Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-09-08T22:09:17-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/5ba78f63325b42810fa2fad2a7b8c04e01ee1c24

Fix issues preventing serialization of event type, fixes #574

Files changed:
M src/plone/restapi/tests/test_services_types.py
M src/plone/restapi/types/utils.py

b"diff --git a/src/plone/restapi/tests/test_services_types.py b/src/plone/restapi/tests/test_services_types.py\nindex ec7c37cd..6fea4bd0 100644\n--- a/src/plone/restapi/tests/test_services_types.py\n+++ b/src/plone/restapi/tests/test_services_types.py\n@@ -112,6 +112,12 @@ def test_file_type(self):\n         self.assertIn(\n             'file.data', response['properties']['file']['properties'])\n \n+    def test_event_type(self):\n+        response = self.api_session.get('/@types/Event')\n+        response = response.json()\n+        self.assertIn('default', response['properties']['start'])\n+        self.assertIn('default_timezone', response['properties']['start'])\n+\n     def test_addable_types_for_non_manager_user(self):\n         user = api.user.create(\n             email='noam.chomsky@example.com',\ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex 97290afb..7cf0d70f 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -18,6 +18,7 @@\n from plone.autoform.form import AutoExtensibleForm\n from plone.autoform.interfaces import WIDGETS_KEY\n from plone.dexterity.utils import getAdditionalSchemata\n+from plone.restapi.interfaces import IJsonCompatible\n from plone.restapi.types.interfaces import IJsonSchemaProvider\n from Products.CMFCore.utils import getToolByName\n from plone.supermodel.utils import mergedTaggedValueDict\n@@ -139,7 +140,10 @@ def get_tagged_values(schemas, key):\n         for field_name in schema:\n             widget = tagged_values.get(field_name)\n             if widget and widget.params:\n-                params[field_name] = widget.params\n+                params[field_name] = widget.params.copy()\n+                for k, v in params[field_name].items():\n+                    if callable(v):\n+                        params[field_name][k] = v()\n     return params\n \n \n@@ -189,7 +193,7 @@ def get_jsonschema_for_fti(fti, context, request, excluded_fields=None):\n     return {\n         'type': 'object',\n         'title': translate(fti.Title(), context=getRequest()),\n-        'properties': properties,\n+        'properties': IJsonCompatible(properties),\n         'required': required,\n         'fieldsets': get_fieldset_infos(fieldsets),\n         'layouts': getattr(fti, 'view_methods', []),\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-09-08T22:11:54-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/32e78fd3c5890363d52876bfe6aa106b257c38cf

changelog

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex b90ac783..433b7411 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -9,6 +9,9 @@ Bugfixes:\n - Make search work with a path query containing a list of paths in a virtual hosting setting.\n   [sunew]\n \n+- Fix serializing the Event type. Fixes https://github.com/plone/plone.restapi/issues/574\n+  [davisagli]\n+\n \n 3.4.4 (2018-08-31)\n ------------------\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-11-02T06:45:00+01:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/4e23e120051d85207e1a243067d056bbe1af45c1

Merge branch 'master' into issue-574-event-type

Files changed:
A plone-5.2.x.cfg
M .gitignore
M .travis.yml
M CHANGES.rst
M Makefile
M docs/source/readthedocs-requirements.txt
M plone-5.1.x.cfg
M requirements.txt
M setup.py
M src/plone/restapi/__init__.py
M src/plone/restapi/batching.py
M src/plone/restapi/demo/demo.py
M src/plone/restapi/deserializer/__init__.py
M src/plone/restapi/deserializer/atcontent.py
M src/plone/restapi/deserializer/controlpanels.py
M src/plone/restapi/deserializer/dxcontent.py
M src/plone/restapi/deserializer/dxfields.py
M src/plone/restapi/deserializer/relationfield.py
M src/plone/restapi/imaging.py
M src/plone/restapi/pas/plugin.py
M src/plone/restapi/search/utils.py
M src/plone/restapi/serializer/atcollection.py
M src/plone/restapi/serializer/atcontent.py
M src/plone/restapi/serializer/atfields.py
M src/plone/restapi/serializer/catalog.py
M src/plone/restapi/serializer/configure.zcml
M src/plone/restapi/serializer/converters.py
M src/plone/restapi/serializer/dxcontent.py
M src/plone/restapi/serializer/expansion.py
M src/plone/restapi/serializer/registry.py
M src/plone/restapi/services/auth/login.py
M src/plone/restapi/services/content/add.py
M src/plone/restapi/services/content/tus.py
M src/plone/restapi/services/content/utils.py
M src/plone/restapi/services/copymove/copymove.py
M src/plone/restapi/services/discussion/conversation.py
M src/plone/restapi/services/email_send/post.py
M src/plone/restapi/services/groups/delete.py
M src/plone/restapi/services/groups/get.py
M src/plone/restapi/services/groups/update.py
M src/plone/restapi/services/history/get.py
M src/plone/restapi/services/history/patch.py
M src/plone/restapi/services/multilingual/pam.py
M src/plone/restapi/services/registry/get.py
M src/plone/restapi/services/tiles/get.py
M src/plone/restapi/services/types/get.py
M src/plone/restapi/services/users/add.py
M src/plone/restapi/services/users/delete.py
M src/plone/restapi/services/users/get.py
M src/plone/restapi/services/users/update.py
M src/plone/restapi/services/vocabularies/get.py
M src/plone/restapi/services/workflow/info.py
M src/plone/restapi/services/workflow/transition.py
M src/plone/restapi/setuphandlers.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/helpers.py
M src/plone/restapi/tests/http-examples/registry_get_list.resp
M src/plone/restapi/tests/http-examples/users_add.resp
M src/plone/restapi/tests/mixin_ordering.py
M src/plone/restapi/tests/performance.py
M src/plone/restapi/tests/test_atcollection.py
M src/plone/restapi/tests/test_atcontent_deserializer.py
M src/plone/restapi/tests/test_atcontent_serializer.py
M src/plone/restapi/tests/test_atfield_deserializer.py
M src/plone/restapi/tests/test_atfield_serializer.py
M src/plone/restapi/tests/test_batching.py
M src/plone/restapi/tests/test_comments.py
M src/plone/restapi/tests/test_content_delete.py
M src/plone/restapi/tests/test_content_get.py
M src/plone/restapi/tests/test_content_local_roles.py
M src/plone/restapi/tests/test_content_patch.py
M src/plone/restapi/tests/test_content_post.py
M src/plone/restapi/tests/test_content_utils.py
M src/plone/restapi/tests/test_copymove.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_dxcontent_deserializer.py
M src/plone/restapi/tests/test_dxcontent_serializer.py
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_dxfield_serializer.py
M src/plone/restapi/tests/test_error_handling.py
M src/plone/restapi/tests/test_expansion.py
M src/plone/restapi/tests/test_pas.py
M src/plone/restapi/tests/test_registry.py
M src/plone/restapi/tests/test_registry_serializer.py
M src/plone/restapi/tests/test_roles.py
M src/plone/restapi/tests/test_search.py
M src/plone/restapi/tests/test_search_utils.py
M src/plone/restapi/tests/test_serializer.py
M src/plone/restapi/tests/test_serializer_catalog.py
M src/plone/restapi/tests/test_serializer_converters.py
M src/plone/restapi/tests/test_serializer_group.py
M src/plone/restapi/tests/test_serializer_summary.py
M src/plone/restapi/tests/test_services.py
M src/plone/restapi/tests/test_services_actions.py
M src/plone/restapi/tests/test_services_comments.py
M src/plone/restapi/tests/test_services_email_notification.py
M src/plone/restapi/tests/test_services_email_send.py
M src/plone/restapi/tests/test_services_history.py
M src/plone/restapi/tests/test_services_principals.py
M src/plone/restapi/tests/test_services_tiles.py
M src/plone/restapi/tests/test_services_types.py
M src/plone/restapi/tests/test_services_users.py
M src/plone/restapi/tests/test_services_vocabularies.py
M src/plone/restapi/tests/test_setup.py
M src/plone/restapi/tests/test_site_deserializer.py
M src/plone/restapi/tests/test_site_serializer.py
M src/plone/restapi/tests/test_translations.py
M src/plone/restapi/tests/test_tus.py
M src/plone/restapi/tests/test_types.py
M src/plone/restapi/tests/test_workflow.py
M src/plone/restapi/types/utils.py
M test-no-uncommitted-doc-changes.in

b'diff --git a/.gitignore b/.gitignore\nindex e79fd8c8..f86d13aa 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -34,3 +34,4 @@ pip-selfcheck.json\n /.idea\n /.vscode\n /.ipython\n+/.mypy_cache/\n\\ No newline at end of file\ndiff --git a/.travis.yml b/.travis.yml\nindex 24ac8f2f..da110928 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -1,5 +1,7 @@\n language: python\n-python: "2.7"\n+python:\n+  - "2.7"\n+  - "3.6"\n sudo: required\n services:\n   - docker\n@@ -11,10 +13,24 @@ env:\n   global:\n     - secure: "tj9kO7Uyn7AY2Z6zhdOggLSYheaD8e+qKA7ZXvdWTrL2HtPAtnNJK8keQGj1JLQyy6bRfoOCt51aL8+Lc0fzcACaLFpAPjleSLtUChphPOh/dqTu1QX5oL0SxZ94B4ZC5+qfaSAQHMwbiiWUW0us9QtJpxQQmiJUekqiTdQDNEo="\n     - secure: "j06un+j2gHjlGfg+xMcvKG2osf1HSzBq/cPPNIonnjGQY3GJfT/YRzYnHe5LJPPt7IJDD7hAEPentRJ4C0zP66U6gcQ2HjWPsMIcvzlgnXoT2QaaCVkMA9YS4WOsN0C5iY/R64GjFwR7J+/bgeG64XvfhpuQ/UBP2+U68PqSBtM="\n-  matrix:\n-    - PLONE_VERSION=4.3.x\n-    - PLONE_VERSION=5.0.x\n-    - PLONE_VERSION=5.1.x\n+matrix:\n+  include:\n+  - python: "2.7"\n+    env: PLONE_VERSION=4.3.x\n+  - python: "2.7"\n+    env: PLONE_VERSION=5.0.x\n+  - python: "2.7"\n+    env: PLONE_VERSION=5.1.x\n+  - python: "2.7"\n+    env: PLONE_VERSION=5.2.x\n+  - python: "3.6"\n+    env: PLONE_VERSION=5.2.x\n+  exclude:\n+  - python: "2.7"\n+  - python: "3.6"\n+  allow_failures:\n+  - python: "3.6"\n+    env: PLONE_VERSION=5.2.x\n before_install:\n   - mkdir -p $HOME/buildout-cache/{eggs,downloads}\n   - mkdir $HOME/.buildout\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 433b7411..76f9065f 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,11 +1,23 @@\n Changelog\n =========\n \n-3.4.5 (unreleased)\n+3.4.6 (unreleased)\n+------------------\n+\n+New Features:\n+\n+- Add Python 3 support.\n+  [pbauer, davisagli]\n+\n+\n+3.4.5 (2018-09-14)\n ------------------\n \n Bugfixes:\n \n+- Avoid ``AttributeError`` on add-on installation (fixes `#465 <https://github.com/plone/plone.restapi/issues/465>`_.\n+  [lukasgraf, hvelarde]\n+\n - Make search work with a path query containing a list of paths in a virtual hosting setting.\n   [sunew]\n \ndiff --git a/Makefile b/Makefile\nindex f1004493..7404dce5 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -9,7 +9,8 @@ all: .installed.cfg\n \tbin/buildout\n \n bin/buildout: bin/pip\n-\tbin/pip install --upgrade pip setuptools zc.buildout\n+\tbin/pip install --upgrade pip\n+\tbin/pip install -r requirements.txt\n \t@touch -c $@\n \n bin/python bin/pip:\ndiff --git a/docs/source/readthedocs-requirements.txt b/docs/source/readthedocs-requirements.txt\nindex b4602115..a83252f7 100644\n--- a/docs/source/readthedocs-requirements.txt\n+++ b/docs/source/readthedocs-requirements.txt\n@@ -1,2 +1,2 @@\n sphinxcontrib-httpdomain\n-sphinxcontrib-httpexample\n+sphinxcontrib-httpexample==0.9.1\n\\ No newline at end of file\ndiff --git a/plone-5.1.x.cfg b/plone-5.1.x.cfg\nindex 5bb3a958..e716cb72 100644\n--- a/plone-5.1.x.cfg\n+++ b/plone-5.1.x.cfg\n@@ -1,5 +1,5 @@\n [buildout]\n extends =\n     base.cfg\n-    http://dist.plone.org/release/5.1.2/versions.cfg\n+    http://dist.plone.org/release/5.1.4/versions.cfg\n     versions.cfg\ndiff --git a/plone-5.2.x.cfg b/plone-5.2.x.cfg\nnew file mode 100644\nindex 00000000..5bb3a958\n--- /dev/null\n+++ b/plone-5.2.x.cfg\n@@ -0,0 +1,5 @@\n+[buildout]\n+extends =\n+    base.cfg\n+    http://dist.plone.org/release/5.1.2/versions.cfg\n+    versions.cfg\ndiff --git a/requirements.txt b/requirements.txt\nindex 3ee645cb..c00f2871 100644\n--- a/requirements.txt\n+++ b/requirements.txt\n@@ -1,6 +1,6 @@\n # https://github.com/plone/buildout.coredev/blob/5.1/requirements.txt\n-setuptools==39.1.0\n-zc.buildout==2.11.5\n+setuptools==40.4.3\n+zc.buildout==2.12.2\n # Sphinx / ReadTheDocs\n alabaster==0.7.10\n appdirs==1.4.2\n@@ -17,13 +17,13 @@ packaging==16.8\n Pygments==2.2.0\n pyparsing==2.1.10\n pytz==2017.3\n-requests==2.18.4\n+requests==2.20.0\n six==1.10.0\n snowballstemmer==1.2.1\n Sphinx==1.6.5\n sphinx-rtd-theme==0.2.4\n sphinxcontrib-httpdomain==1.5.0\n-sphinxcontrib-httpexample==0.7.0\n+sphinxcontrib-httpexample==0.9.1\n sphinxcontrib-websupport==1.0.1\n typing==3.6.2\n urllib3==1.22\ndiff --git a/setup.py b/setup.py\nindex cd36f991..1878a076 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,6 +1,6 @@\n from setuptools import setup, find_packages\n \n-version = \'3.4.5-dev.0\'\n+version = \'3.4.6-dev.0\'\n \n long_description = (\n     open(\'README.rst\').read() + \'\\n\' +\n@@ -10,13 +10,33 @@\n     open(\'CHANGES.rst\').read() + \'\\n\'\n )\n \n+TEST_REQUIRES = [\n+    \'collective.MockMailHost\',\n+    \'plone.app.contenttypes\',\n+    \'plone.app.robotframework\',\n+    \'plone.app.testing [robot] >= 4.2.2\',  # ROBOT_TEST_LEVEL added\n+    \'plone.api\',\n+    \'requests\',\n+    \'freezegun\',\n+    \'plone.tiles\',\n+    \'mock\',\n+]\n+\n+PY2_ONLY = [\n+    \'Products.Archetypes\',\n+    \'plone.app.collection\',\n+]\n+\n+if sys.version_info[0] == 2:\n+    TEST_REQUIRES += PY2_ONLY\n+\n \n setup(name=\'plone.restapi\',\n       version=version,\n       description="plone.restapi is a RESTful hypermedia API for Plone.",\n       long_description=long_description,\n       # Get more strings from\n-      # http://pypi.python.org/pypi?%3Aaction=list_classifiers\n+      # https://pypi.org/classifiers/\n       classifiers=[\n           "Development Status :: 5 - Production/Stable",\n           "Environment :: Web Environment",\n@@ -24,10 +44,13 @@\n           "Framework :: Plone :: 4.3",\n           "Framework :: Plone :: 5.0",\n           "Framework :: Plone :: 5.1",\n+          "Framework :: Plone :: 5.2",\n           "Intended Audience :: Developers",\n           "Operating System :: OS Independent",\n           "Programming Language :: Python",\n           "Programming Language :: Python :: 2.7",\n+          "Programming Language :: Python :: 3.6",\n+          "Programming Language :: Python :: 3.7",\n           "Topic :: Software Development :: Libraries :: Python Modules",\n       ],\n       keywords=\'plone rest restful hypermedia api json\',\n@@ -43,25 +66,13 @@\n       install_requires=[\n           \'setuptools\',\n           \'python-dateutil\',\n-          \'plone.behavior>=1.1\',  # adds name to behavior directive \n+          \'plone.behavior>=1.1\',  # adds name to behavior directive\n           \'plone.rest >= 1.0a6\',  # json renderer moved to plone.restapi\n-          \'plone.schema >= 1.2.0\',  # new json field          \n+          \'plone.schema >= 1.2.0\',  # new json field\n           \'PyJWT\',\n           \'pytz\',\n       ],\n-      extras_require={\'test\': [\n-          \'Products.Archetypes\',\n-          \'collective.MockMailHost\',\n-          \'plone.app.collection\',\n-          \'plone.app.contenttypes\',\n-          \'plone.app.robotframework\',\n-          \'plone.app.testing [robot] >= 4.2.2\',  # ROBOT_TEST_LEVEL added\n-          \'plone.api\',\n-          \'requests\',\n-          \'freezegun\',\n-          \'plone.tiles\',\n-          \'mock\',\n-      ]},\n+      extras_require={\'test\': TEST_REQUIRES},\n       entry_points="""\n       # -*- Entry points: -*-\n       [z3c.autoinclude.plugin]\ndiff --git a/src/plone/restapi/__init__.py b/src/plone/restapi/__init__.py\nindex 4bb52278..cf140252 100644\n--- a/src/plone/restapi/__init__.py\n+++ b/src/plone/restapi/__init__.py\n@@ -25,6 +25,13 @@\n except pkg_resources.DistributionNotFound:  # pragma: no cover\n     HAS_PLONE_APP_CONTENTTYPES = False\n \n+try:\n+    pkg_resources.get_distribution(\'Products.Archetypes\')\n+except pkg_resources.DistributionNotFound:\n+    HAS_AT = False\n+else:\n+    HAS_AT = True\n+\n \n def initialize(context):\n     registerMultiPlugin(plugin.JWTAuthenticationPlugin.meta_type)\n@@ -38,7 +45,7 @@ def initialize(context):\n         visibility=None,\n     )\n \n-    if REGISTER_TEST_TYPES:\n+    if HAS_AT and REGISTER_TEST_TYPES:\n         from Products.Archetypes.ArchetypeTool import process_types, listTypes\n         from Products.CMFCore import permissions\n         from Products.CMFCore import utils\ndiff --git a/src/plone/restapi/batching.py b/src/plone/restapi/batching.py\nindex 92b22faa..c0126c77 100644\n--- a/src/plone/restapi/batching.py\n+++ b/src/plone/restapi/batching.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.batching.batch import Batch\n-from urllib import urlencode\n-from urlparse import parse_qsl\n+from six.moves.urllib.parse import urlencode\n+from six.moves.urllib.parse import parse_qsl\n \n \n DEFAULT_BATCH_SIZE = 25\n@@ -116,7 +116,7 @@ def _url_with_params(self, params):\n         # result of parse_qsl into a dict!\n \n         # Drop params to be updated, then prepend new params in order\n-        qs_params = filter(lambda x: x[0] not in params.keys(), qs_params)\n+        qs_params = [x for x in qs_params if x[0] not in list(params)]\n         qs_params = sorted(params.items()) + qs_params\n \n         qs = urlencode(qs_params)\ndiff --git a/src/plone/restapi/demo/demo.py b/src/plone/restapi/demo/demo.py\nindex 790170c6..7c90983b 100644\n--- a/src/plone/restapi/demo/demo.py\n+++ b/src/plone/restapi/demo/demo.py\n@@ -5,7 +5,7 @@\n class InternalServerErrorView(BrowserView):  # pragma: no cover\n \n     def __call__(self):\n-        from urllib2 import HTTPError\n+        from six.moves.urllib.error import HTTPError\n         raise HTTPError(\n             \'http://nohost/plone/internal_server_error\',\n             500,\ndiff --git a/src/plone/restapi/deserializer/__init__.py b/src/plone/restapi/deserializer/__init__.py\nindex a4f6bdbb..58207c54 100644\n--- a/src/plone/restapi/deserializer/__init__.py\n+++ b/src/plone/restapi/deserializer/__init__.py\n@@ -6,7 +6,7 @@\n \n def json_body(request):\n     try:\n-        data = json.loads(request.get(\'BODY\', \'{}\'))\n+        data = json.loads(request.get(\'BODY\') or \'{}\')\n     except ValueError:\n         raise DeserializationError(\'No JSON object could be decoded\')\n     if not isinstance(data, dict):\ndiff --git a/src/plone/restapi/deserializer/atcontent.py b/src/plone/restapi/deserializer/atcontent.py\nindex a6f696a0..dd1be622 100644\n--- a/src/plone/restapi/deserializer/atcontent.py\n+++ b/src/plone/restapi/deserializer/atcontent.py\n@@ -44,8 +44,8 @@ def __call__(self, validate_all=False, data=None, create=False):\n             name = field.getName()\n \n             if name in data:\n-                deserializer = queryMultiAdapter((field, obj, self.request),\n-                                                 IFieldDeserializer)\n+                deserializer = queryMultiAdapter(\n+                    (field, obj, self.request), IFieldDeserializer)\n                 if deserializer is None:\n                     continue\n                 value, kwargs = deserializer(data[name])\ndiff --git a/src/plone/restapi/deserializer/controlpanels.py b/src/plone/restapi/deserializer/controlpanels.py\nindex b70caedb..e434ee01 100644\n--- a/src/plone/restapi/deserializer/controlpanels.py\n+++ b/src/plone/restapi/deserializer/controlpanels.py\n@@ -69,7 +69,7 @@ def __call__(self):\n                     setattr(proxy, name, value)\n                 except ValueError as e:\n                     errors.append({\n-                        \'message\': e.message, \'field\': name, \'error\': e})\n+                        \'message\': str(e), \'field\': name, \'error\': e})\n                 except ValidationError as e:\n                     errors.append({\n                         \'message\': e.doc(), \'field\': name, \'error\': e})\n@@ -82,7 +82,7 @@ def __call__(self):\n                 (self.context, self.request, None, schema, None),\n                 IManagerValidator)\n             for error in validator.validate(field_data):\n-                errors.append({\'error\': error, \'message\': error.message})\n+                errors.append({\'error\': error, \'message\': str(error)})\n \n         if errors:\n             raise BadRequest(errors)\ndiff --git a/src/plone/restapi/deserializer/dxcontent.py b/src/plone/restapi/deserializer/dxcontent.py\nindex b2e42165..4f93e8ba 100644\n--- a/src/plone/restapi/deserializer/dxcontent.py\n+++ b/src/plone/restapi/deserializer/dxcontent.py\n@@ -88,7 +88,7 @@ def __call__(self, validate_all=False, data=None, create=False):  # noqa: ignore\n                         value = deserializer(data[name])\n                     except ValueError as e:\n                         errors.append({\n-                            \'message\': e.message, \'field\': name, \'error\': e})\n+                            \'message\': str(e), \'field\': name, \'error\': e})\n                     except ValidationError as e:\n                         errors.append({\n                             \'message\': e.doc(), \'field\': name, \'error\': e})\n@@ -123,7 +123,7 @@ def __call__(self, validate_all=False, data=None, create=False):  # noqa: ignore\n                 (self.context, self.request, None, schema, None),\n                 IManagerValidator)\n             for error in validator.validate(field_data):\n-                errors.append({\'error\': error, \'message\': error.message})\n+                errors.append({\'error\': error, \'message\': str(error)})\n \n         if errors:\n             raise BadRequest(errors)\ndiff --git a/src/plone/restapi/deserializer/dxfields.py b/src/plone/restapi/deserializer/dxfields.py\nindex 548a9518..fd1cd046 100644\n--- a/src/plone/restapi/deserializer/dxfields.py\n+++ b/src/plone/restapi/deserializer/dxfields.py\n@@ -23,7 +23,9 @@\n from zope.schema.interfaces import ITime\n from zope.schema.interfaces import ITimedelta\n \n+import codecs\n import dateutil\n+import six\n \n \n @implementer(IFieldDeserializer)\n@@ -38,7 +40,7 @@ def __init__(self, field, context, request):\n         self.request = request\n \n     def __call__(self, value):\n-        if not isinstance(value, unicode):\n+        if not isinstance(value, six.text_type):\n             self.field.validate(value)\n             return value\n \n@@ -52,11 +54,11 @@ def __call__(self, value):\n class TextLineFieldDeserializer(DefaultFieldDeserializer):\n \n     def __call__(self, value):\n-        if isinstance(value, unicode):\n+        if isinstance(value, six.text_type):\n             value = IFromUnicode(self.field).fromUnicode(value)\n \n         # Mimic what z3c.form does in it\'s BaseDataConverter.\n-        if isinstance(value, unicode):\n+        if isinstance(value, six.text_type):\n             value = value.strip()\n             if value == u\'\':\n                 value = self.field.missing_value\n@@ -191,7 +193,7 @@ def __call__(self, value):\n         try:\n             value = timedelta(seconds=value)\n         except TypeError as e:\n-            raise ValueError(e.message)\n+            raise ValueError(str(e))\n \n         self.field.validate(value)\n         return value\n@@ -211,16 +213,18 @@ def __call__(self, value):\n                 # with the \'download\' key so we return the same stored file\n                 return getattr(self.field.context, self.field.__name__)\n \n-            content_type = value.get(u\'content-type\', content_type).encode(\n-                \'utf8\')\n-            filename = value.get(u\'filename\', filename)\n-            if u\'encoding\' in value:\n-                data = value.get(\'data\', \'\').decode(value[u\'encoding\'])\n-            else:\n-                data = value.get(\'data\', \'\')\n+            content_type = value.get(\'content-type\', content_type)\n+            filename = value.get(\'filename\', filename)\n+            data = value.get(\'data\', \'\')\n+            if isinstance(data, six.text_type):\n+                data = data.encode(\'utf-8\')\n+            if \'encoding\' in value:\n+                data = codecs.decode(data, value[\'encoding\'])\n+            if isinstance(data, six.text_type):\n+                data = data.encode(\'utf-8\')\n         elif isinstance(value, TUSUpload):\n             content_type = value.metadata().get(\n-                \'content-type\', content_type).encode(\'utf8\')\n+                \'content-type\', content_type)\n             filename = value.metadata().get(\'filename\', filename)\n             data = value.open()\n         else:\n@@ -228,6 +232,8 @@ def __call__(self, value):\n \n         # Convert if we have data\n         if data:\n+            if six.PY2:\n+                content_type = content_type.encode(\'utf8\')\n             value = self.field._type(\n                 data=data, contentType=content_type, filename=filename)\n         else:\n@@ -246,9 +252,9 @@ def __call__(self, value):\n         content_type = self.field.default_mime_type\n         encoding = \'utf8\'\n         if isinstance(value, dict):\n-            content_type = value.get(u\'content-type\', content_type)\n-            encoding = value.get(u\'encoding\', encoding)\n-            data = value.get(u\'data\', u\'\')\n+            content_type = value.get(\'content-type\', content_type)\n+            encoding = value.get(\'encoding\', encoding)\n+            data = value.get(\'data\', u\'\')\n         elif isinstance(value, TUSUpload):\n             content_type = value.metadata().get(\'content-type\', content_type)\n             with open(value.filepath, \'rb\') as f:\ndiff --git a/src/plone/restapi/deserializer/relationfield.py b/src/plone/restapi/deserializer/relationfield.py\nindex b24db727..ec3e8bc2 100644\n--- a/src/plone/restapi/deserializer/relationfield.py\n+++ b/src/plone/restapi/deserializer/relationfield.py\n@@ -10,6 +10,7 @@\n from zope.interface import implementer\n from zope.intid.interfaces import IIntIds\n from zope.publisher.interfaces.browser import IBrowserRequest\n+import six\n \n \n @implementer(IFieldDeserializer)\n@@ -28,18 +29,19 @@ def __call__(self, value):\n             # Resolve by intid\n             intids = queryUtility(IIntIds)\n             obj = intids.queryObject(value)\n-        elif isinstance(value, basestring):\n+        elif isinstance(value, six.string_types):\n+            if six.PY2 and isinstance(value, six.text_type):\n+                value = value.encode(\'utf8\')\n             portal = getMultiAdapter((self.context, self.request),\n                                      name=\'plone_portal_state\').portal()\n             portal_url = portal.absolute_url()\n             if value.startswith(portal_url):\n                 # Resolve by URL\n                 obj = portal.restrictedTraverse(\n-                    value[len(portal_url) + 1:].encode(\'utf8\'), None)\n+                    value[len(portal_url) + 1:], None)\n             elif value.startswith(\'/\'):\n                 # Resolve by path\n-                obj = portal.restrictedTraverse(\n-                    value.encode(\'utf8\').lstrip(\'/\'), None)\n+                obj = portal.restrictedTraverse(value.lstrip(\'/\'), None)\n             else:\n                 # Resolve by UID\n                 catalog = getToolByName(self.context, \'portal_catalog\')\ndiff --git a/src/plone/restapi/imaging.py b/src/plone/restapi/imaging.py\nindex 202f6bfa..d943f038 100644\n--- a/src/plone/restapi/imaging.py\n+++ b/src/plone/restapi/imaging.py\n@@ -1,8 +1,10 @@\n # -*- coding: utf-8 -*-\n+from __future__ import division\n from Products.CMFCore.interfaces import IPropertiesTool\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.globalrequest import getRequest\n+from six.moves import map\n \n try:\n     from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n@@ -62,8 +64,8 @@ def get_actual_scale(dimensions, bbox):\n     This is supposed to emulate / predict the behavior of Plone\'s\n     ImageScaling implementations.\n     """\n-    width, height = map(float, dimensions)\n-    max_width, max_height = map(float, bbox)\n+    width, height = dimensions\n+    max_width, max_height = bbox\n     resize_ratio = min(max_width / width, max_height / height)\n \n     # Plone doesn\'t upscale images for the default named scales - limit\n@@ -98,7 +100,7 @@ def get_scale_infos():\n \n     def split_scale_info(allowed_size):\n         name, dims = allowed_size.split(\' \')\n-        width, height = map(int, dims.split(\':\'))\n+        width, height = list(map(int, dims.split(\':\')))\n         return name, width, height\n \n     return [split_scale_info(size) for size in allowed_sizes]\ndiff --git a/src/plone/restapi/pas/plugin.py b/src/plone/restapi/pas/plugin.py\nindex dee0485a..f9c5ab25 100644\n--- a/src/plone/restapi/pas/plugin.py\n+++ b/src/plone/restapi/pas/plugin.py\n@@ -15,9 +15,9 @@\n from plone.keyring.interfaces import IKeyManager\n from plone.keyring.keyring import GenerateSecret\n from zope.component import getUtility\n-from zope.interface import implements\n-\n+from zope.interface import implementer\n import jwt\n+import six\n import time\n \n \n@@ -39,14 +39,14 @@ def addJWTAuthenticationPlugin(self, id_, title=None, REQUEST=None):\n         )\n \n \n+@implementer(\n+    IAuthenticationPlugin,\n+    IChallengePlugin,\n+    IExtractionPlugin,\n+)\n class JWTAuthenticationPlugin(BasePlugin):\n     """Plone PAS plugin for authentication with JSON web tokens (JWT).\n     """\n-    implements(\n-        IAuthenticationPlugin,\n-        IChallengePlugin,\n-        IExtractionPlugin,\n-    )\n     meta_type = "JWT Authentication Plugin"\n     security = ClassSecurityInfo()\n \n@@ -117,7 +117,9 @@ def authenticateCredentials(self, credentials):\n         if \'sub\' not in payload:\n             return None\n \n-        userid = payload[\'sub\'].encode(\'utf8\')\n+        userid = payload[\'sub\']\n+        if six.PY2:\n+            userid = userid.encode(\'utf8\')\n \n         if self.store_tokens:\n             if userid not in self._tokens:\n@@ -160,6 +162,8 @@ def _decode_token(self, token, verify=True):\n                 token, self._secret + self._path(), verify=verify)\n \n     def _jwt_decode(self, token, secret, verify=True):\n+        if isinstance(token, six.text_type):\n+            token = token.encode(\'utf-8\')\n         try:\n             return jwt.decode(\n                 token, secret, verify=verify, algorithms=[\'HS256\'])\n@@ -196,6 +200,8 @@ def create_token(self, userid, timeout=None, data=None):\n         if data is not None:\n             payload.update(data)\n         token = jwt.encode(payload, self._signing_secret(), algorithm=\'HS256\')\n+        if not six.PY2:\n+            token = token.decode(\'utf-8\')\n         if self.store_tokens:\n             if self._tokens is None:\n                 self._tokens = OOBTree()\ndiff --git a/src/plone/restapi/search/utils.py b/src/plone/restapi/search/utils.py\nindex 6037bcdd..36a08971 100644\n--- a/src/plone/restapi/search/utils.py\n+++ b/src/plone/restapi/search/utils.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from functools import reduce\n \n \n def unflatten_dotted_dict(dct):\ndiff --git a/src/plone/restapi/serializer/atcollection.py b/src/plone/restapi/serializer/atcollection.py\nindex 95e4e935..a7eb2e99 100644\n--- a/src/plone/restapi/serializer/atcollection.py\n+++ b/src/plone/restapi/serializer/atcollection.py\n@@ -15,9 +15,8 @@\n class SerializeCollectionToJson(SerializeToJson):\n \n     def __call__(self, version=None):\n-        collection_metadata = super(SerializeCollectionToJson, self).__call__(\n-            version=version,\n-        )\n+        collection_metadata = super(\n+            SerializeCollectionToJson, self).__call__(version=version)\n         results = self.context.results(batch=False)\n         batch = HypermediaBatch(self.request, results)\n \n@@ -29,7 +28,8 @@ def __call__(self, version=None):\n             results[\'batching\'] = batch.links\n \n         results[\'items\'] = [\n-            getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n+            getMultiAdapter(\n+                (brain, self.request), ISerializeToJsonSummary)()\n             for brain in batch\n         ]\n         return results\ndiff --git a/src/plone/restapi/serializer/atcontent.py b/src/plone/restapi/serializer/atcontent.py\nindex 0721b6b0..92219877 100644\n--- a/src/plone/restapi/serializer/atcontent.py\n+++ b/src/plone/restapi/serializer/atcontent.py\n@@ -56,7 +56,7 @@ def __call__(self, version=None, include_items=False):\n \n         for field in obj.Schema().fields():\n \n-            if \'r\' not in field.mode or not field.checkPermission(\'r\', obj):\n+            if \'r\' not in field.mode or not field.checkPermission(\'r\', obj):  # noqa: E501\n                 continue\n \n             name = field.getName()\n@@ -94,7 +94,8 @@ def __call__(self, version=None, include_items=True):\n         folder_metadata.update({\'is_folderish\': True})\n         result = folder_metadata\n \n-        include_items = self.request.form.get(\'include_items\', include_items)\n+        include_items = self.request.form.get(\n+            \'include_items\', include_items)\n         include_items = boolean_value(include_items)\n         if include_items:\n             query = self._build_query()\ndiff --git a/src/plone/restapi/serializer/atfields.py b/src/plone/restapi/serializer/atfields.py\nindex 8b5396d8..eed63d04 100644\n--- a/src/plone/restapi/serializer/atfields.py\n+++ b/src/plone/restapi/serializer/atfields.py\n@@ -1,4 +1,6 @@\n # -*- coding: utf-8 -*-\n+from six.moves import map\n+\n from Products.Archetypes.interfaces import IBaseObject\n from Products.Archetypes.interfaces.field import IField\n from Products.Archetypes.interfaces.field import IFileField\n@@ -60,7 +62,8 @@ def __call__(self):\n class TextFieldSerializer(DefaultFieldSerializer):\n \n     def __call__(self):\n-        mimetypes_registry = getToolByName(self.context, \'mimetypes_registry\')\n+        mimetypes_registry = getToolByName(\n+            self.context, \'mimetypes_registry\')\n         data = super(TextFieldSerializer, self).__call__()\n         return {\n             \'content-type\': json_compatible(\n@@ -127,4 +130,4 @@ def __call__(self):\n class QueryFieldSerializer(DefaultFieldSerializer):\n     def __call__(self):\n         raw_value = self.field.getRaw(self.context)\n-        return json_compatible(map(dict, raw_value))\n+        return json_compatible(list(map(dict, raw_value)))\ndiff --git a/src/plone/restapi/serializer/catalog.py b/src/plone/restapi/serializer/catalog.py\nindex 8dc82671..da599fe4 100644\n--- a/src/plone/restapi/serializer/catalog.py\n+++ b/src/plone/restapi/serializer/catalog.py\n@@ -31,7 +31,7 @@ def _get_metadata_to_include(self, metadata_fields):\n         if metadata_fields and \'_all\' in metadata_fields:\n             site = getSite()\n             catalog = getToolByName(site, \'portal_catalog\')\n-            metadata_attrs = catalog.schema() + BRAIN_METHODS\n+            metadata_attrs = list(catalog.schema()) + BRAIN_METHODS\n             return metadata_attrs\n \n         return metadata_fields\ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex 91070fc0..041400fc 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -45,7 +45,7 @@\n     <adapter factory=".converters.python_datetime_converter" />\n     <adapter factory=".converters.RichtextDXContextConverter" />\n     <adapter factory=".converters.set_converter" />\n-    <adapter factory=".converters.string_converter" />\n+    <adapter factory=".converters.bytes_converter" />\n     <adapter factory=".converters.time_converter" />\n     <adapter factory=".converters.timedelta_converter" />\n     <adapter factory=".converters.tuple_converter" />\ndiff --git a/src/plone/restapi/serializer/converters.py b/src/plone/restapi/serializer/converters.py\nindex 9948a975..83529679 100644\n--- a/src/plone/restapi/serializer/converters.py\n+++ b/src/plone/restapi/serializer/converters.py\n@@ -21,6 +21,9 @@\n \n import Missing\n import pytz\n+import six\n+from six.moves import map\n+from six.moves import zip\n # import re\n \n \n@@ -75,7 +78,7 @@ def default_converter(value):\n     if value is None:\n         return value\n \n-    if type(value) in (unicode, bool, int, float, long):\n+    if type(value) in (six.text_type, bool, int, float, int):\n         return value\n \n     raise TypeError(\n@@ -83,16 +86,16 @@ def default_converter(value):\n         \' {0!r} ({1}) JSON compatible.\'.format(value, type(value)))\n \n \n-@adapter(str)\n+@adapter(bytes)\n @implementer(IJsonCompatible)\n-def string_converter(value):\n+def bytes_converter(value):\n     return safe_unicode(value, \'utf-8\')\n \n \n @adapter(list)\n @implementer(IJsonCompatible)\n def list_converter(value):\n-    return map(json_compatible, value)\n+    return list(map(json_compatible, value))\n \n \n @adapter(PersistentList)\n@@ -104,19 +107,19 @@ def persistent_list_converter(value):\n @adapter(tuple)\n @implementer(IJsonCompatible)\n def tuple_converter(value):\n-    return map(json_compatible, value)\n+    return list(map(json_compatible, value))\n \n \n @adapter(frozenset)\n @implementer(IJsonCompatible)\n def frozenset_converter(value):\n-    return map(json_compatible, value)\n+    return list(map(json_compatible, value))\n \n \n @adapter(set)\n @implementer(IJsonCompatible)\n def set_converter(value):\n-    return map(json_compatible, value)\n+    return list(map(json_compatible, value))\n \n \n @adapter(dict)\n@@ -125,10 +128,10 @@ def dict_converter(value):\n     if value == {}:\n         return {}\n \n-    keys, values = zip(*value.items())\n-    keys = map(json_compatible, keys)\n-    values = map(json_compatible, values)\n-    return dict(zip(keys, values))\n+    keys, values = list(zip(*list(value.items())))\n+    keys = list(map(json_compatible, keys))\n+    values = list(map(json_compatible, values))\n+    return dict(list(zip(keys, values)))\n \n \n @adapter(PersistentMapping)\ndiff --git a/src/plone/restapi/serializer/dxcontent.py b/src/plone/restapi/serializer/dxcontent.py\nindex c6ad6f53..ad8eae75 100644\n--- a/src/plone/restapi/serializer/dxcontent.py\n+++ b/src/plone/restapi/serializer/dxcontent.py\n@@ -145,7 +145,7 @@ def __call__(self, version=None, include_items=True):\n             if batch.links:\n                 result[\'batching\'] = batch.links\n \n-            if \'fullobjects\' in self.request.form.keys():\n+            if \'fullobjects\' in list(self.request.form):\n                 result[\'items\'] = getMultiAdapter(\n                     (brains, self.request),\n                     ISerializeToJson\ndiff --git a/src/plone/restapi/serializer/expansion.py b/src/plone/restapi/serializer/expansion.py\nindex cdf0eec8..e3cc3d13 100644\n--- a/src/plone/restapi/serializer/expansion.py\n+++ b/src/plone/restapi/serializer/expansion.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.restapi.interfaces import IExpandableElement\n from zope.component import getAdapters\n+import six\n \n \n def expandable_elements(context, request):\n@@ -18,7 +19,7 @@ def expandable_elements(context, request):\n \n \n def update_dict_recursively(d, u):\n-    for key, value in u.iteritems():\n+    for key, value in six.iteritems(u):\n         if isinstance(value, dict):\n             r = update_dict_recursively(d.get(key, {}), value)\n             d[key] = r\ndiff --git a/src/plone/restapi/serializer/registry.py b/src/plone/restapi/serializer/registry.py\nindex 02400890..247ba2d3 100644\n--- a/src/plone/restapi/serializer/registry.py\n+++ b/src/plone/restapi/serializer/registry.py\n@@ -19,7 +19,7 @@ def __init__(self, registry, request):\n     def __call__(self):\n         records = self.registry.records\n         # Batch keys, because that is a simple BTree\n-        batch = HypermediaBatch(self.request, records.keys())\n+        batch = HypermediaBatch(self.request, list(records))\n \n         results = {}\n         results[\'@id\'] = batch.canonical_url\ndiff --git a/src/plone/restapi/services/auth/login.py b/src/plone/restapi/services/auth/login.py\nindex dc4217da..39568e24 100644\n--- a/src/plone/restapi/services/auth/login.py\n+++ b/src/plone/restapi/services/auth/login.py\n@@ -8,6 +8,7 @@\n from zope.interface import alsoProvides\n \n import plone.protect.interfaces\n+import six\n \n \n class Login(Service):\n@@ -26,8 +27,11 @@ def reply(self):\n             alsoProvides(self.request,\n                          plone.protect.interfaces.IDisableCSRFProtection)\n \n-        userid = data[\'login\'].encode(\'utf8\')\n-        password = data[\'password\'].encode(\'utf8\')\n+        userid = data[\'login\']\n+        password = data[\'password\']\n+        if six.PY2:\n+            userid = userid.encode(\'utf8\')\n+            password = password.encode(\'utf8\')\n         uf = self._find_userfolder(userid)\n \n         if uf is not None:\ndiff --git a/src/plone/restapi/services/content/add.py b/src/plone/restapi/services/content/add.py\nindex efb2086f..1f51413f 100644\n--- a/src/plone/restapi/services/content/add.py\n+++ b/src/plone/restapi/services/content/add.py\n@@ -44,12 +44,12 @@ def reply(self):\n             self.request.response.setStatus(403)\n             return dict(error=dict(\n                 type=\'Forbidden\',\n-                message=exc.message))\n+                message=str(exc)))\n         except BadRequest as exc:\n             self.request.response.setStatus(400)\n             return dict(error=dict(\n                 type=\'Bad Request\',\n-                message=exc.message))\n+                message=str(exc)))\n \n         # Acquisition wrap temporarily to satisfy things like vocabularies\n         # depending on tools\ndiff --git a/src/plone/restapi/services/content/tus.py b/src/plone/restapi/services/content/tus.py\nindex ee37c13b..49139a99 100644\n--- a/src/plone/restapi/services/content/tus.py\n+++ b/src/plone/restapi/services/content/tus.py\n@@ -15,7 +15,7 @@\n from uuid import uuid4\n from zExceptions import Unauthorized\n from zope.component import queryMultiAdapter\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.publisher.interfaces import NotFound\n from zope.lifecycleevent import ObjectCreatedEvent\n@@ -106,7 +106,9 @@ def reply(self):\n         for item in self.request.getHeader(\'Upload-Metadata\', \'\').split(\',\'):\n             key_value = item.split()\n             if len(key_value) == 2:\n-                metadata[key_value[0].lower()] = b64decode(key_value[1])\n+                key = key_value[0].lower()\n+                value = b64decode(key_value[1]).decode(\'utf-8\')\n+                metadata[key] = value\n         metadata[\'length\'] = length\n         if self.__name__.endswith(\'@tus-replace\'):\n             metadata[\'mode\'] = \'replace\'\n@@ -123,8 +125,8 @@ def reply(self):\n         return super(UploadPost, self).reply()\n \n \n+@implementer(IPublishTraverse)\n class UploadFileBase(TUSBaseService):\n-    implements(IPublishTraverse)\n \n     def __init__(self, context, request):\n         super(UploadFileBase, self).__init__(context, request)\n@@ -183,11 +185,10 @@ def reply(self):\n         return super(UploadHead, self).reply()\n \n \n+@implementer(IPublishTraverse)\n class UploadPatch(UploadFileBase):\n     """TUS upload endpoint for handling PATCH requests"""\n \n-    implements(IPublishTraverse)\n-\n     def reply(self):\n \n         tus_upload = self.tus_upload()\n@@ -212,7 +213,10 @@ def reply(self):\n             return self.error(\n                 \'Bad Request\', \'Missing or invalid Upload-Offset header\')\n \n-        tus_upload.write(self.request._file, offset)\n+        request_body = self.request._file\n+        if hasattr(request_body, \'raw\'):  # Unwrap io.BufferedRandom\n+            request_body = request_body.raw\n+        tus_upload.write(request_body, offset)\n \n         if tus_upload.finished:\n             offset = tus_upload.offset()\n@@ -306,7 +310,7 @@ def __init__(self, uid, metadata=None):\n     def initalize(self, metadata):\n         """Initialize a new TUS upload by writing its metadata to disk."""\n         self.cleanup_expired()\n-        with open(self.metadata_path, \'wb\') as f:\n+        with open(self.metadata_path, \'w\') as f:\n             json.dump(metadata, f)\n \n     def length(self):\ndiff --git a/src/plone/restapi/services/content/utils.py b/src/plone/restapi/services/content/utils.py\nindex d8fc1025..d4111d65 100644\n--- a/src/plone/restapi/services/content/utils.py\n+++ b/src/plone/restapi/services/content/utils.py\n@@ -15,6 +15,8 @@\n from zope.container.interfaces import INameChooser\n from zope.event import notify\n \n+import six\n+\n \n def create(container, type_, id_=None, title=None):\n     """Create a new content item."""\n@@ -28,7 +30,7 @@ def create(container, type_, id_=None, title=None):\n             str(now.millis())[7:],\n             randint(0, 9999))\n     else:\n-        if isinstance(id_, unicode):\n+        if six.PY2 and isinstance(id_, six.text_type):\n             new_id = id_.encode(\'utf8\')\n         else:\n             new_id = id_\ndiff --git a/src/plone/restapi/services/copymove/copymove.py b/src/plone/restapi/services/copymove/copymove.py\nindex bb537dad..5e12ea4c 100644\n--- a/src/plone/restapi/services/copymove/copymove.py\n+++ b/src/plone/restapi/services/copymove/copymove.py\n@@ -9,6 +9,7 @@\n from zope.security import checkPermission\n \n import plone\n+import six\n \n \n class BaseCopyMove(Service):\n@@ -24,15 +25,19 @@ def __init__(self, context, request):\n \n     def get_object(self, key):\n         """Get an object by url, path or UID."""\n-        if isinstance(key, basestring):\n+        if isinstance(key, six.string_types):\n             if key.startswith(self.portal_url):\n                 # Resolve by URL\n-                return self.portal.restrictedTraverse(\n-                    key[len(self.portal_url) + 1:].encode(\'utf8\'), None)\n+                key = key[len(self.portal_url) + 1:]\n+                if six.PY2:\n+                    key = key.encode(\'utf8\')\n+                return self.portal.restrictedTraverse(key, None)\n             elif key.startswith(\'/\'):\n+                if six.PY2:\n+                    key = key.encode(\'utf8\')\n                 # Resolve by path\n                 return self.portal.restrictedTraverse(\n-                    key.encode(\'utf8\').lstrip(\'/\'), None)\n+                    key.lstrip(\'/\'), None)\n             else:\n                 # Resolve by UID\n                 brain = self.catalog(UID=key)\ndiff --git a/src/plone/restapi/services/discussion/conversation.py b/src/plone/restapi/services/discussion/conversation.py\nindex 051749a2..1857f226 100644\n--- a/src/plone/restapi/services/discussion/conversation.py\n+++ b/src/plone/restapi/services/discussion/conversation.py\n@@ -39,7 +39,7 @@ class CommentsGet(Service):\n \n     def publishTraverse(self, request, name):\n         if name:\n-            self.comment_id = long(name)\n+            self.comment_id = int(name)\n         return self\n \n     def reply(self):\n@@ -64,7 +64,7 @@ class CommentsAdd(Service):\n \n     def publishTraverse(self, request, name):\n         if name:\n-            self.comment_id = long(name)\n+            self.comment_id = int(name)\n             request[\'form.widgets.in_reply_to\'] = name\n         return self\n \n@@ -75,7 +75,7 @@ def reply(self):\n                          plone.protect.interfaces.IDisableCSRFProtection)\n \n         conversation = IConversation(self.context)\n-        if self.comment_id and self.comment_id not in conversation.keys():\n+        if self.comment_id and self.comment_id not in list(conversation):\n             self.request.response.setStatus(404)\n             return\n \n@@ -104,7 +104,7 @@ class CommentsUpdate(Service):\n \n     def publishTraverse(self, request, name):\n         if name:\n-            self.comment_id = long(name)\n+            self.comment_id = int(name)\n             request[\'form.widgets.comment_id\'] = name\n         return self\n \n@@ -113,7 +113,7 @@ def reply(self):\n             raise BadRequest("Comment id is a required part of the url")\n \n         conversation = IConversation(self.context)\n-        if self.comment_id not in conversation.keys():\n+        if self.comment_id not in list(conversation):\n             self.request.response.setStatus(404)\n             return\n         comment = conversation[self.comment_id]\n@@ -148,7 +148,7 @@ class CommentsDelete(Service):\n     comment_id = None\n \n     def publishTraverse(self, request, name):\n-        self.comment_id = long(name)\n+        self.comment_id = int(name)\n         return self\n \n     def reply(self):\ndiff --git a/src/plone/restapi/services/email_send/post.py b/src/plone/restapi/services/email_send/post.py\nindex 94d37d8d..f142e1be 100644\n--- a/src/plone/restapi/services/email_send/post.py\n+++ b/src/plone/restapi/services/email_send/post.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from AccessControl.Permissions import use_mailhost_services\n-from email.MIMEText import MIMEText\n+from email.mime.text import MIMEText\n from plone.registry.interfaces import IRegistry\n from plone.restapi import _\n from plone.restapi.deserializer import json_body\ndiff --git a/src/plone/restapi/services/groups/delete.py b/src/plone/restapi/services/groups/delete.py\nindex 11bde167..13b7046a 100644\n--- a/src/plone/restapi/services/groups/delete.py\n+++ b/src/plone/restapi/services/groups/delete.py\n@@ -3,16 +3,15 @@\n from Products.CMFCore.utils import getToolByName\n from zExceptions import NotFound\n from zope.component.hooks import getSite\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n \n+@implementer(IPublishTraverse)\n class GroupsDelete(Service):\n     """Deletes a user.\n     """\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(GroupsDelete, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/groups/get.py b/src/plone/restapi/services/groups/get.py\nindex 0c099e6c..0b7c88cd 100644\n--- a/src/plone/restapi/services/groups/get.py\n+++ b/src/plone/restapi/services/groups/get.py\n@@ -6,16 +6,15 @@\n from zExceptions import BadRequest\n from zope.component.hooks import getSite\n from zope.component import queryMultiAdapter\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n DEFAULT_SEARCH_RESULTS_LIMIT = 25\n \n \n+@implementer(IPublishTraverse)\n class GroupsGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(GroupsGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/groups/update.py b/src/plone/restapi/services/groups/update.py\nindex 863bc42c..46b22e09 100644\n--- a/src/plone/restapi/services/groups/update.py\n+++ b/src/plone/restapi/services/groups/update.py\n@@ -4,18 +4,17 @@\n from Products.CMFCore.utils import getToolByName\n from zExceptions import BadRequest\n from zope.component.hooks import getSite\n-from zope.interface import alsoProvides, implements\n+from zope.interface import alsoProvides, implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n import plone\n \n \n+@implementer(IPublishTraverse)\n class GroupsPatch(Service):\n     """Updates an existing group.\n     """\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(GroupsPatch, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/history/get.py b/src/plone/restapi/services/history/get.py\nindex 8b7936ef..4354a288 100644\n--- a/src/plone/restapi/services/history/get.py\n+++ b/src/plone/restapi/services/history/get.py\n@@ -9,6 +9,7 @@\n from zope.publisher.interfaces import IPublishTraverse\n from Products.CMFPlone.utils import safe_unicode\n from datetime import datetime as dt\n+import six\n \n \n @implementer(IPublishTraverse)\n@@ -74,7 +75,7 @@ def reply(self):\n \n             # Versioning entries use a timestamp,\n             # workflow ISO formatted string\n-            if not isinstance(item[\'time\'], basestring):\n+            if not isinstance(item[\'time\'], six.string_types):\n                 item[\'time\'] = dt.fromtimestamp(item[\'time\']).isoformat()\n \n             # The create event has an empty \'action\', but we like it to say\ndiff --git a/src/plone/restapi/services/history/patch.py b/src/plone/restapi/services/history/patch.py\nindex 062b5c58..0b759a2b 100644\n--- a/src/plone/restapi/services/history/patch.py\n+++ b/src/plone/restapi/services/history/patch.py\n@@ -6,6 +6,7 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFEditions import CMFEditionsMessageFactory as _\n from Products.CMFEditions.interfaces.IModifier import FileTooLargeToVersionError  # noqa\n+import six\n \n \n class HistoryPatch(Service):\n@@ -21,8 +22,8 @@ def revert(context, version):\n     pr.revert(context, version)\n \n     title = context.title_or_id()\n-    if not isinstance(title, unicode):\n-        title = unicode(title, \'utf-8\', \'ignore\')\n+    if not isinstance(title, six.text_type):\n+        title = six.text_type(title, \'utf-8\', \'ignore\')\n \n     if pr.supportsPolicy(context, \'version_on_revert\'):\n         try:\ndiff --git a/src/plone/restapi/services/multilingual/pam.py b/src/plone/restapi/services/multilingual/pam.py\nindex 6a378128..bd2ec0e8 100644\n--- a/src/plone/restapi/services/multilingual/pam.py\n+++ b/src/plone/restapi/services/multilingual/pam.py\n@@ -125,7 +125,7 @@ def reply(self):\n                 type=\'BadRequest\',\n                 message=\'You need to provide the language to unlink\'))\n \n-        if language not in manager.get_translations().keys():\n+        if language not in list(manager.get_translations()):\n             self.request.response.setStatus(400)\n             return dict(error=dict(\n                 type=\'BadRequest\',\ndiff --git a/src/plone/restapi/services/registry/get.py b/src/plone/restapi/services/registry/get.py\nindex 5e8a39dd..ed53e17d 100644\n--- a/src/plone/restapi/services/registry/get.py\n+++ b/src/plone/restapi/services/registry/get.py\n@@ -2,15 +2,14 @@\n from plone.registry.interfaces import IRegistry\n from plone.restapi.services import Service\n from zope.component import getUtility, getMultiAdapter\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from plone.restapi.interfaces import ISerializeToJson\n \n \n+@implementer(IPublishTraverse)\n class RegistryGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(RegistryGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/tiles/get.py b/src/plone/restapi/services/tiles/get.py\nindex 2cdf443e..0da486c7 100644\n--- a/src/plone/restapi/services/tiles/get.py\n+++ b/src/plone/restapi/services/tiles/get.py\n@@ -6,15 +6,14 @@\n from plone.tiles.interfaces import ITileType\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.restapi.interfaces import ISerializeToJson\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.component import getUtility\n \n \n+@implementer(IPublishTraverse)\n class TilesGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(TilesGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/types/get.py b/src/plone/restapi/services/types/get.py\nindex 9b252ecb..64da46ab 100644\n--- a/src/plone/restapi/services/types/get.py\n+++ b/src/plone/restapi/services/types/get.py\n@@ -7,15 +7,14 @@\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.i18n import translate\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.schema.interfaces import IVocabularyFactory\n \n \n+@implementer(IPublishTraverse)\n class TypesGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(TypesGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex d9103c0f..8f924966 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -14,7 +14,7 @@\n from zope.component import queryMultiAdapter\n from zope.component.hooks import getSite\n from zope.interface import alsoProvides\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n import plone.protect.interfaces\n@@ -36,12 +36,11 @@\n PLONE5 = getFSVersionTuple()[0] >= 5\n \n \n+@implementer(IPublishTraverse)\n class UsersPost(Service):\n     """Creates a new user.\n     """\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(UsersPost, self).__init__(context, request)\n         self.params = []\n@@ -211,7 +210,7 @@ def reply(self):\n             self.request.response.setStatus(400)\n             return dict(error=dict(\n                 type=\'MissingParameterError\',\n-                message=str(e.message)))\n+                message=str(e)))\n \n         if PLONE5:\n             # After user creation, we have to fix the login_name if it differs.\n@@ -281,7 +280,7 @@ def update_password(self, data):\n             return\n \n         # Send password reset mail\n-        if data.keys() == []:\n+        if list(data) == []:\n             registration_tool = getToolByName(self.context,\n                                               \'portal_registration\')\n             registration_tool.mailPassword(username, self.request)\ndiff --git a/src/plone/restapi/services/users/delete.py b/src/plone/restapi/services/users/delete.py\nindex 92e17bd6..35fc3145 100644\n--- a/src/plone/restapi/services/users/delete.py\n+++ b/src/plone/restapi/services/users/delete.py\n@@ -2,16 +2,15 @@\n from plone.restapi.services import Service\n from Products.CMFCore.utils import getToolByName\n from zope.component.hooks import getSite\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n \n+@implementer(IPublishTraverse)\n class UsersDelete(Service):\n     """Deletes a user.\n     """\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(UsersDelete, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex e1a6b8e9..fa91577a 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -6,16 +6,15 @@\n from zExceptions import BadRequest\n from zope.component.hooks import getSite\n from zope.component import queryMultiAdapter\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n DEFAULT_SEARCH_RESULTS_LIMIT = 25\n \n \n+@implementer(IPublishTraverse)\n class UsersGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(UsersGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/users/update.py b/src/plone/restapi/services/users/update.py\nindex 9ffd2970..41c50e13 100644\n--- a/src/plone/restapi/services/users/update.py\n+++ b/src/plone/restapi/services/users/update.py\n@@ -6,7 +6,7 @@\n from Products.CMFCore.utils import getToolByName\n from zope.component.hooks import getSite\n from zope.interface import alsoProvides\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.component import getAdapter\n \n@@ -19,12 +19,11 @@\n     from plone.app.controlpanel.security import ISecuritySchema\n \n \n+@implementer(IPublishTraverse)\n class UsersPatch(Service):\n     """Updates an existing user.\n     """\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(UsersPatch, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/vocabularies/get.py b/src/plone/restapi/services/vocabularies/get.py\nindex ba88c03d..48233e6d 100644\n--- a/src/plone/restapi/services/vocabularies/get.py\n+++ b/src/plone/restapi/services/vocabularies/get.py\n@@ -4,16 +4,15 @@\n from zope.component import ComponentLookupError\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.schema.interfaces import IVocabularyFactory\n from zope.component import getUtilitiesFor\n \n \n+@implementer(IPublishTraverse)\n class VocabulariesGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(VocabulariesGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/workflow/info.py b/src/plone/restapi/services/workflow/info.py\nindex ac8fd1e1..25a2aa94 100644\n--- a/src/plone/restapi/services/workflow/info.py\n+++ b/src/plone/restapi/services/workflow/info.py\n@@ -8,6 +8,7 @@\n from zope.component import adapter\n from zope.interface import Interface\n from zope.interface import implementer\n+import six\n \n \n @implementer(IExpandableElement)\n@@ -39,20 +40,24 @@ def __call__(self, expand=False):\n             if action[\'category\'] != \'workflow\':\n                 continue\n \n+            title = action[\'title\']\n+            if isinstance(title, six.binary_type):\n+                title = title.decode(\'utf8\')\n+\n             transitions.append({\n                 \'@id\': \'{}/@workflow/{}\'.format(\n                     self.context.absolute_url(), action[\'id\']),\n-                \'title\': self.context.translate(\n-                    action[\'title\'].decode(\'utf8\')),\n+                \'title\': self.context.translate(title),\n             })\n \n         for item, action in enumerate(history):\n-            history[item][\'title\'] = self.context.translate(\n-                wftool.getTitleForStateOnType(\n-                    action[\'review_state\'],\n-                    self.context.portal_type\n-                ).decode(\'utf8\')\n+            title = wftool.getTitleForStateOnType(\n+                action[\'review_state\'],\n+                self.context.portal_type\n             )\n+            if isinstance(title, six.binary_type):\n+                title = title.decode(\'utf8\')\n+            history[item][\'title\'] = self.context.translate(title)\n \n         result[\'workflow\'].update({\n             \'history\': json_compatible(history),\ndiff --git a/src/plone/restapi/services/workflow/transition.py b/src/plone/restapi/services/workflow/transition.py\nindex 8b034300..fc09edb2 100644\n--- a/src/plone/restapi/services/workflow/transition.py\n+++ b/src/plone/restapi/services/workflow/transition.py\n@@ -10,17 +10,17 @@\n from zope.component import queryMultiAdapter\n from zope.i18n import translate\n from zope.interface import alsoProvides\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.publisher.interfaces import NotFound\n \n import plone.protect.interfaces\n \n \n+@implementer(IPublishTraverse)\n class WorkflowTransition(Service):\n     """Trigger workflow transition\n     """\n-    implements(IPublishTraverse)\n \n     def __init__(self, context, request):\n         super(WorkflowTransition, self).__init__(context, request)\n@@ -69,7 +69,7 @@ def reply(self):\n             self.request.response.setStatus(400)\n             return dict(error=dict(\n                 type=\'WorkflowException\',\n-                message=translate(e.message, context=self.request)))\n+                message=translate(str(e), context=self.request)))\n         except BadRequest as e:\n             self.request.response.setStatus(400)\n             return dict(error=dict(\ndiff --git a/src/plone/restapi/setuphandlers.py b/src/plone/restapi/setuphandlers.py\nindex ce9f3c3e..3b6ef6f9 100644\n--- a/src/plone/restapi/setuphandlers.py\n+++ b/src/plone/restapi/setuphandlers.py\n@@ -4,6 +4,7 @@\n from plone.restapi.pas.plugin import JWTAuthenticationPlugin\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import INonInstallable\n+from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService  # noqa: E501\n from zope.interface import implementer\n \n \n@@ -30,7 +31,7 @@ def install_pas_plugin(context):\n     uf_parent = aq_inner(context)\n     while True:\n         uf = getToolByName(uf_parent, \'acl_users\')\n-        if \'jwt_auth\' not in uf:\n+        if IPluggableAuthService.providedBy(uf) and \'jwt_auth\' not in uf:\n             plugin = JWTAuthenticationPlugin(\'jwt_auth\')\n             uf._setObject(plugin.getId(), plugin)\n             plugin = uf[\'jwt_auth\']\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex e37032ce..4786c426 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -23,12 +23,12 @@\n from plone.testing.layer import Layer\n from plone.uuid.interfaces import IUUIDGenerator\n from Products.CMFCore.utils import getToolByName\n-from urlparse import urljoin\n-from urlparse import urlparse\n+from six.moves.urllib.parse import urljoin\n+from six.moves.urllib.parse import urlparse\n from zope.component import getGlobalSiteManager\n from zope.component import getUtility\n from zope.configuration import xmlconfig\n-from zope.interface import implements\n+from zope.interface import implementer\n \n import collective.MockMailHost\n import pkg_resources\n@@ -52,6 +52,12 @@\n else:\n     PLONE_5 = True  # pragma: no cover\n \n+try:\n+    pkg_resources.get_distribution(\'Products.Archetypes\')\n+except pkg_resources.DistributionNotFound:\n+    HAS_AT = False\n+else:\n+    HAS_AT = True\n \n ENABLED_LANGUAGES = [\'de\', \'en\', \'es\', \'fr\']\n \n@@ -253,58 +259,61 @@ def setUpPloneSite(self, portal):\n )\n \n \n-class PloneRestApiATLayer(PloneSandboxLayer):\n-\n-    defaultBases = (DATE_TIME_FIXTURE, PLONE_FIXTURE,)\n-\n-    def setUpZope(self, app, configurationContext):\n-        import Products.ATContentTypes\n-        self.loadZCML(package=Products.ATContentTypes)\n-        import plone.app.dexterity\n-        self.loadZCML(package=plone.app.dexterity)\n-\n-        import plone.restapi\n-        xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.restapi,\n-            context=configurationContext\n-        )\n-\n-        z2.installProduct(app, \'Products.Archetypes\')\n-        z2.installProduct(app, \'Products.ATContentTypes\')\n-        z2.installProduct(app, \'plone.app.collection\')\n-        z2.installProduct(app, \'plone.app.blob\')\n-        z2.installProduct(app, \'plone.restapi\')\n-\n-    def setUpPloneSite(self, portal):\n-        set_supported_languages(portal)\n-\n-        if portal.portal_setup.profileExists(\n-                \'Products.ATContentTypes:default\'):\n-            applyProfile(portal, \'Products.ATContentTypes:default\')\n-        if portal.portal_setup.profileExists(\n-                \'plone.app.collection:default\'):\n-            applyProfile(portal, \'plone.app.collection:default\')\n-\n-        applyProfile(portal, \'plone.app.dexterity:default\')\n-        applyProfile(portal, \'plone.restapi:default\')\n-        applyProfile(portal, \'plone.restapi:testing\')\n-        set_available_languages()\n-        enable_request_language_negotiation(portal)\n-        portal.portal_workflow.setDefaultChain("simple_publication_workflow")\n-        states = portal.portal_workflow[\'simple_publication_workflow\'].states\n-        states[\'published\'].title = u\'Published with accent \xc3\xa9\'.encode(\'utf8\')\n-\n-\n-PLONE_RESTAPI_AT_FIXTURE = PloneRestApiATLayer()\n-PLONE_RESTAPI_AT_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_RESTAPI_AT_FIXTURE,),\n-    name="PloneRestApiATLayer:Integration"\n-)\n-PLONE_RESTAPI_AT_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_AT_FIXTURE, z2.ZSERVER_FIXTURE),\n-    name="PloneRestApiATLayer:Functional"\n-)\n+if HAS_AT:\n+    class PloneRestApiATLayer(PloneSandboxLayer):\n+\n+        defaultBases = (DATE_TIME_FIXTURE, PLONE_FIXTURE,)\n+\n+        def setUpZope(self, app, configurationContext):\n+            import Products.ATContentTypes\n+            self.loadZCML(package=Products.ATContentTypes)\n+            import plone.app.dexterity\n+            self.loadZCML(package=plone.app.dexterity)\n+\n+            import plone.restapi\n+            xmlconfig.file(\n+                \'configure.zcml\',\n+                plone.restapi,\n+                context=configurationContext\n+            )\n+\n+            z2.installProduct(app, \'Products.Archetypes\')\n+            z2.installProduct(app, \'Products.ATContentTypes\')\n+            z2.installProduct(app, \'plone.app.collection\')\n+            z2.installProduct(app, \'plone.app.blob\')\n+            z2.installProduct(app, \'plone.restapi\')\n+\n+        def setUpPloneSite(self, portal):\n+            set_supported_languages(portal)\n+\n+            if portal.portal_setup.profileExists(\n+                    \'Products.ATContentTypes:default\'):\n+                applyProfile(portal, \'Products.ATContentTypes:default\')\n+            if portal.portal_setup.profileExists(\n+                    \'plone.app.collection:default\'):\n+                applyProfile(portal, \'plone.app.collection:default\')\n+\n+            applyProfile(portal, \'plone.app.dexterity:default\')\n+            applyProfile(portal, \'plone.restapi:default\')\n+            applyProfile(portal, \'plone.restapi:testing\')\n+            set_available_languages()\n+            enable_request_language_negotiation(portal)\n+            portal.portal_workflow.setDefaultChain(\'simple_publication_workflow\')  # noqa: E501\n+            states = portal.portal_workflow[\'simple_publication_workflow\'].states  # noqa: E501\n+            states[\'published\'].title = u\'Published with accent \xc3\xa9\'.encode(\'utf8\')  # noqa: E501\n+\n+    PLONE_RESTAPI_AT_FIXTURE = PloneRestApiATLayer()\n+    PLONE_RESTAPI_AT_INTEGRATION_TESTING = IntegrationTesting(\n+        bases=(PLONE_RESTAPI_AT_FIXTURE,),\n+        name="PloneRestApiATLayer:Integration"\n+    )\n+    PLONE_RESTAPI_AT_FUNCTIONAL_TESTING = FunctionalTesting(\n+        bases=(PLONE_RESTAPI_AT_FIXTURE, z2.ZSERVER_FIXTURE),\n+        name="PloneRestApiATLayer:Functional"\n+    )\n+else:\n+    PLONE_RESTAPI_AT_INTEGRATION_TESTING = PLONE_FIXTURE\n+    PLONE_RESTAPI_AT_FUNCTIONAL_TESTING = PLONE_FIXTURE\n \n \n class PloneRestApiTilesLayer(PloneSandboxLayer):\n@@ -350,14 +359,13 @@ def request(self, method, url, **kwargs):\n         return super(RelativeSession, self).request(method, url, **kwargs)\n \n \n+@implementer(IUUIDGenerator)\n class StaticUUIDGenerator(object):\n     """UUID generator that produces stable UUIDs for use in tests.\n \n     Based on code from ftw.testing\n     """\n \n-    implements(IUUIDGenerator)\n-\n     def __init__(self, prefix):\n         self.prefix = prefix[:26]\n         self.counter = 0\ndiff --git a/src/plone/restapi/tests/helpers.py b/src/plone/restapi/tests/helpers.py\nindex f0ca5d9f..49ea7049 100644\n--- a/src/plone/restapi/tests/helpers.py\n+++ b/src/plone/restapi/tests/helpers.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n-from urlparse import urlparse\n+from six.moves.urllib.parse import urlparse\n \n \n def result_paths(results):\ndiff --git a/src/plone/restapi/tests/http-examples/registry_get_list.resp b/src/plone/restapi/tests/http-examples/registry_get_list.resp\nindex 8d4e7af9..a72b47dc 100644\n--- a/src/plone/restapi/tests/http-examples/registry_get_list.resp\n+++ b/src/plone/restapi/tests/http-examples/registry_get_list.resp\n@@ -6,7 +6,7 @@ Content-Type: application/json\n   "batching": {\n     "@id": "http://localhost:55001/plone/@registry", \n     "first": "http://localhost:55001/plone/@registry?b_start=0", \n-    "last": "http://localhost:55001/plone/@registry?b_start=1525", \n+    "last": "http://localhost:55001/plone/@registry?b_start=1650", \n     "next": "http://localhost:55001/plone/@registry?b_start=25"\n   }, \n   "items": [\n@@ -495,5 +495,5 @@ Content-Type: application/json\n       "value": false\n     }\n   ], \n-  "items_total": 1547\n+  "items_total": 1673\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_add.resp b/src/plone/restapi/tests/http-examples/users_add.resp\nindex d4fdd52f..b6aa43b9 100644\n--- a/src/plone/restapi/tests/http-examples/users_add.resp\n+++ b/src/plone/restapi/tests/http-examples/users_add.resp\n@@ -1,6 +1,6 @@\n HTTP/1.1 201 Created\n-Content-Type: application/json\n Location: http://localhost:55001/plone/@users/noamchomsky\n+Content-Type: application/json\n \n {\n   "@id": "http://localhost:55001/plone/@users/noamchomsky", \ndiff --git a/src/plone/restapi/tests/mixin_ordering.py b/src/plone/restapi/tests/mixin_ordering.py\nindex 180cc0e8..e96de6ff 100644\n--- a/src/plone/restapi/tests/mixin_ordering.py\n+++ b/src/plone/restapi/tests/mixin_ordering.py\n@@ -10,7 +10,7 @@ class OrderingMixin():\n     def test_reorder(self):\n         # We run all this in one test, because of dependend ordering.\n         # initial situation\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', \'doc9\', ],  # noqa\n             self.folder.contentIds()\n         )\n@@ -19,7 +19,7 @@ def test_reorder(self):\n         # Move to top\n         data = {\'ordering\': {\'delta\': \'top\', \'obj_id\': \'doc9\'}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc9\', \'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', ],  # noqa\n             self.folder.contentIds()\n         )\n@@ -27,7 +27,7 @@ def test_reorder(self):\n         # Move to bottom\n         data = {\'ordering\': {\'delta\': \'bottom\', \'obj_id\': \'doc9\'}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', \'doc9\', ],  # noqa\n             self.folder.contentIds()\n         )\n@@ -35,7 +35,7 @@ def test_reorder(self):\n         # Delta up\n         data = {\'ordering\': {\'delta\': -2, \'obj_id\': \'doc5\'}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc5\', \'doc3\', \'doc4\', \'doc6\', \'doc7\', \'doc8\', \'doc9\', ],  # noqa\n             self.folder.contentIds()\n         )\n@@ -43,7 +43,7 @@ def test_reorder(self):\n         # Delta down\n         data = {\'ordering\': {\'delta\': 2, \'obj_id\': \'doc6\'}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc5\', \'doc3\', \'doc4\', \'doc7\', \'doc8\', \'doc6\', \'doc9\', ],  # noqa\n             self.folder.contentIds()\n         )\n@@ -52,7 +52,7 @@ def test_reorder(self):\n         # Move to top\n         data = {\'ordering\': {\'delta\': \'top\', \'obj_id\': \'doc8\', \'subset_ids\': [\'doc2\', \'doc3\', \'doc8\']}}  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc8\', \'doc5\', \'doc2\', \'doc4\', \'doc7\', \'doc3\', \'doc6\', \'doc9\'],  # noqa\n             self.folder.contentIds()\n         )\n@@ -60,7 +60,7 @@ def test_reorder(self):\n         # Move to bottom\n         data = {\'ordering\': {\'delta\': \'bottom\', \'obj_id\': \'doc8\', \'subset_ids\': [\'doc8\', \'doc2\', \'doc3\']}}  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc5\', \'doc3\', \'doc4\', \'doc7\', \'doc8\', \'doc6\', \'doc9\'],  # noqa\n             self.folder.contentIds()\n         )\n@@ -68,7 +68,7 @@ def test_reorder(self):\n         # Delta up\n         data = {\'ordering\': {\'delta\': -1, \'obj_id\': \'doc8\', \'subset_ids\': [\'doc2\', \'doc3\', \'doc8\']}}  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc5\', \'doc8\', \'doc4\', \'doc7\', \'doc3\', \'doc6\', \'doc9\'],  # noqa\n             self.folder.contentIds()\n         )\n@@ -76,14 +76,14 @@ def test_reorder(self):\n         # Delta down\n         data = {\'ordering\': {\'delta\': 1, \'obj_id\': \'doc2\', \'subset_ids\': [\'doc2\', \'doc8\', \'doc3\']}}  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc8\', \'doc5\', \'doc2\', \'doc4\', \'doc7\', \'doc3\', \'doc6\', \'doc9\'],  # noqa\n             self.folder.contentIds()\n         )\n \n     def test_reorder_subsetids(self):\n         # sanity check, initial situation\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', \'doc9\'],  # noqa\n             self.folder.contentIds()\n         )\n@@ -93,7 +93,7 @@ def test_reorder_subsetids(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=json.dumps(data), context=self.folder)\n \n-        self.assertEquals(\n+        self.assertEqual(\n             u\'Client/server ordering mismatch\',\n-            cm.exception.message\n+            str(cm.exception)\n         )\ndiff --git a/src/plone/restapi/tests/performance.py b/src/plone/restapi/tests/performance.py\nindex 53ad641a..c3e4b85b 100644\n--- a/src/plone/restapi/tests/performance.py\n+++ b/src/plone/restapi/tests/performance.py\n@@ -7,6 +7,7 @@\n \n import os\n import pytz\n+from six.moves import range\n \n LOREMIPSUM_HTML_10_PARAGRAPHS = \'\'\'<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.</p><p>Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.</p><p>Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis.</p><p>At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, At accusam aliquyam diam diam dolore dolores duo eirmod eos erat, et nonumy sed tempor et et invidunt justo labore Stet clita ea et gubergren, kasd magna no rebum. sanctus sea sed takimata ut vero voluptua. est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat.</p><p>Consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus.</p><p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.</p><p>Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.\'\'\'  # noqa\n \ndiff --git a/src/plone/restapi/tests/test_atcollection.py b/src/plone/restapi/tests/test_atcollection.py\nindex 2b55b4b5..00563641 100644\n--- a/src/plone/restapi/tests/test_atcollection.py\n+++ b/src/plone/restapi/tests/test_atcollection.py\n@@ -3,6 +3,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n from plone.restapi.interfaces import ISerializeToJson\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from zope.component import getMultiAdapter\n \n@@ -14,6 +15,8 @@ class TestATContentSerializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\ndiff --git a/src/plone/restapi/tests/test_atcontent_deserializer.py b/src/plone/restapi/tests/test_atcontent_deserializer.py\nindex 56e74894..6be01743 100644\n--- a/src/plone/restapi/tests/test_atcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_deserializer.py\n@@ -1,11 +1,8 @@\n # -*- coding: utf-8 -*-\n-from Products.Archetypes.interfaces import IBaseObject\n-from Products.Archetypes.interfaces import IObjectEditedEvent\n-from Products.Archetypes.interfaces import IObjectInitializedEvent\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n-from plone.restapi.deserializer.atcontent import ValidationRequest\n from plone.restapi.interfaces import IDeserializeFromJson\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.tests.mixin_ordering import OrderingMixin\n from zExceptions import BadRequest\n@@ -14,11 +11,17 @@\n from zope.component import provideSubscriptionAdapter\n from zope.component import adapter\n from zope.interface import implementer\n-from Products.Archetypes.interfaces import IObjectPostValidation\n-from Products.Archetypes.interfaces import IObjectPreValidation\n-\n \n import unittest\n+from six.moves import range\n+\n+if HAS_AT:\n+    from plone.restapi.deserializer.atcontent import ValidationRequest\n+    from Products.Archetypes.interfaces import IBaseObject\n+    from Products.Archetypes.interfaces import IObjectEditedEvent\n+    from Products.Archetypes.interfaces import IObjectInitializedEvent\n+    from Products.Archetypes.interfaces import IObjectPostValidation\n+    from Products.Archetypes.interfaces import IObjectPreValidation\n \n \n class TestATContentDeserializer(unittest.TestCase, OrderingMixin):\n@@ -26,6 +29,8 @@ class TestATContentDeserializer(unittest.TestCase, OrderingMixin):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n@@ -56,18 +61,18 @@ def deserialize(self, body=\'{}\', validate_all=False, create=False,\n     def test_deserializer_ignores_readonly_fields(self):\n         self.doc1.getField(\'testReadonlyField\').set(self.doc1, \'Readonly\')\n         self.deserialize(body=\'{"testReadonlyField": "Changed"}\')\n-        self.assertEquals(\'Readonly\', self.doc1.getTestReadonlyField())\n+        self.assertEqual(\'Readonly\', self.doc1.getTestReadonlyField())\n \n     def test_deserializer_updates_field_value(self):\n         self.deserialize(body=\'{"testStringField": "Updated"}\')\n-        self.assertEquals(\'Updated\', self.doc1.getTestStringField())\n+        self.assertEqual(\'Updated\', self.doc1.getTestStringField())\n \n     def test_deserializer_validates_content(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"testURLField": "Not an URL"}\')\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Validation failed(isURL): \'Not an URL\' is not a valid url.",\n-            cm.exception.message[0][\'message\'])\n+            cm.exception.args[0][0][\'message\'])\n \n     def test_deserializer_clears_creation_flag(self):\n         self.doc1.markCreationFlag()\n@@ -97,13 +102,15 @@ def test_deserializer_raises_if_required_value_is_missing(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"testStringField": "My Value"}\',\n                              validate_all=True)\n-        self.assertEquals(u\'TestRequiredField is required, please correct.\',\n-                          cm.exception.message[0][\'message\'])\n+        self.assertEqual(\n+            u\'TestRequiredField is required, please correct.\',\n+            cm.exception.args[0][0][\'message\']\n+        )\n \n     def test_deserializer_succeeds_if_required_value_is_provided(self):\n         self.deserialize(body=\'{"testRequiredField": "My Value"}\',\n                          validate_all=True)\n-        self.assertEquals(u\'My Value\', self.portal.doc1.getTestRequiredField())\n+        self.assertEqual(u\'My Value\', self.portal.doc1.getTestRequiredField())\n \n     def test_post_validation(self):\n \n@@ -123,8 +130,8 @@ def __call__(self, request):\n             self.deserialize(body=\'{"testRequiredField": "My Value"}\',\n                              validate_all=True)\n \n-        self.assertEquals(\n-            \'post_validation_error\', cm.exception.message[0][\'message\'])\n+        self.assertEqual(\n+            \'post_validation_error\', cm.exception.args[0][0][\'message\'])\n \n     def test_pre_validation(self):\n \n@@ -144,14 +151,14 @@ def __call__(self, request):\n             self.deserialize(body=\'{"testRequiredField": "My Value"}\',\n                              validate_all=True)\n \n-        self.assertEquals(\n-            \'pre_validation_error\', cm.exception.message[0][\'message\'])\n+        self.assertEqual(\n+            \'pre_validation_error\', cm.exception.args[0][0][\'message\'])\n \n     def test_set_layout(self):\n         current_layout = self.doc1.getLayout()\n         self.assertNotEquals(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n-        self.assertEquals(\'my_new_layout\', self.doc1.getLayout())\n+        self.assertEqual(\'my_new_layout\', self.doc1.getLayout())\n \n \n class TestValidationRequest(unittest.TestCase):\n@@ -159,6 +166,8 @@ class TestValidationRequest(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n         self.doc1 = self.portal[self.portal.invokeFactory(\n@@ -166,16 +175,16 @@ def setUp(self):\n         self.request = ValidationRequest(self.layer[\'request\'], self.doc1)\n \n     def test_value_from_validation_request_using_key_access(self):\n-        self.assertEquals(\'Test Document\', self.request[\'title\'])\n+        self.assertEqual(\'Test Document\', self.request[\'title\'])\n \n     def test_value_from_validation_request_using_get(self):\n-        self.assertEquals(\'Test Document\', self.request.get(\'title\'))\n+        self.assertEqual(\'Test Document\', self.request.get(\'title\'))\n \n     def test_value_from_validation_request_form_using_key_access(self):\n-        self.assertEquals(\'Test Document\', self.request.form[\'title\'])\n+        self.assertEqual(\'Test Document\', self.request.form[\'title\'])\n \n     def test_value_from_validation_request_form_using_get(self):\n-        self.assertEquals(\'Test Document\', self.request.form.get(\'title\'))\n+        self.assertEqual(\'Test Document\', self.request.form.get(\'title\'))\n \n     def test_validation_request_contains_key(self):\n         self.assertIn(\'title\', self.request)\n@@ -188,21 +197,21 @@ def test_validation_request_key_access_raises_keyerror(self):\n             self.request[\'foo\']\n \n     def test_validation_request_get_returns_default_value(self):\n-        self.assertEquals(None, self.request.get(\'foo\'))\n+        self.assertEqual(None, self.request.get(\'foo\'))\n         marker = object()\n-        self.assertEquals(marker, self.request.get(\'foo\', marker))\n+        self.assertEqual(marker, self.request.get(\'foo\', marker))\n \n     def test_validation_request_form_key_access_raises_keyerror(self):\n         with self.assertRaises(KeyError):\n             self.request.form[\'foo\']\n \n     def test_validation_request_form_get_returns_default_value(self):\n-        self.assertEquals(None, self.request.form.get(\'foo\'))\n+        self.assertEqual(None, self.request.form.get(\'foo\'))\n         marker = object()\n-        self.assertEquals(marker, self.request.form.get(\'foo\', marker))\n+        self.assertEqual(marker, self.request.form.get(\'foo\', marker))\n \n     def test_value_from_real_request_using_key_access(self):\n-        self.assertEquals(\'GET\', self.request[\'REQUEST_METHOD\'])\n+        self.assertEqual(\'GET\', self.request[\'REQUEST_METHOD\'])\n \n     def test_value_form_real_request_using_get(self):\n-        self.assertEquals(\'GET\', self.request.get(\'REQUEST_METHOD\'))\n+        self.assertEqual(\'GET\', self.request.get(\'REQUEST_METHOD\'))\ndiff --git a/src/plone/restapi/tests/test_atcontent_serializer.py b/src/plone/restapi/tests/test_atcontent_serializer.py\nindex e3791311..86f9958f 100644\n--- a/src/plone/restapi/tests/test_atcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_serializer.py\n@@ -4,6 +4,7 @@\n from plone.app.testing import setRoles\n from plone.restapi.interfaces import IExpandableElement\n from plone.restapi.interfaces import ISerializeToJson\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.tests.test_expansion import ExpandableElementFoo\n from zope.component import getGlobalSiteManager\n@@ -21,6 +22,8 @@ class TestATContentSerializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n@@ -154,7 +157,7 @@ def test_get_layout(self):\n         current_layout = self.doc1.getLayout()\n         obj = self.serialize(self.doc1)\n         self.assertIn(\'layout\', obj)\n-        self.assertEquals(current_layout, obj[\'layout\'])\n+        self.assertEqual(current_layout, obj[\'layout\'])\n \n     def test_serializer_includes_expansion(self):\n         provideAdapter(\n@@ -179,4 +182,4 @@ def test_get_is_folderish_in_folder(self):\n                                      ISerializeToJson)\n         obj = serializer()\n         self.assertIn(\'is_folderish\', obj)\n-        self.assertEquals(True, obj[\'is_folderish\'])\n+        self.assertEqual(True, obj[\'is_folderish\'])\ndiff --git a/src/plone/restapi/tests/test_atfield_deserializer.py b/src/plone/restapi/tests/test_atfield_deserializer.py\nindex e3bb0cbd..0d9d384f 100644\n--- a/src/plone/restapi/tests/test_atfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_atfield_deserializer.py\n@@ -2,10 +2,12 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n from plone.restapi.interfaces import IFieldDeserializer\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from zope.component import getMultiAdapter\n \n import unittest\n+import six\n \n \n class TestATFieldDeserializer(unittest.TestCase):\n@@ -13,6 +15,8 @@ class TestATFieldDeserializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n@@ -28,55 +32,60 @@ def deserialize(self, fieldname, value):\n \n     def test_string_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testStringField\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'K\xc3\xa4fer\', value)\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'K\xc3\xa4fer\', value)\n \n     def test_boolean_field_deserialization_returns_true(self):\n         value, kwargs = self.deserialize(\'testBooleanField\', True)\n         self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n-        self.assertEquals(True, value)\n+        self.assertEqual(True, value)\n \n     def test_boolean_field_deserialization_returns_false(self):\n         value, kwargs = self.deserialize(\'testBooleanField\', False)\n         self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n-        self.assertEquals(False, value)\n+        self.assertEqual(False, value)\n \n     def test_integer_field_deserialization_returns_integer_value(self):\n         value, kwargs = self.deserialize(\'testIntegerField\', 777)\n         self.assertTrue(isinstance(value, int), \'Not an <int>\')\n-        self.assertEquals(777, value)\n+        self.assertEqual(777, value)\n \n     def test_float_field_deserialization_returns_float_value(self):\n         value, kwargs = self.deserialize(\'testFloatField\', 1.5)\n         self.assertTrue(isinstance(value, float), \'Not a <float>\')\n-        self.assertEquals(1.5, value)\n+        self.assertEqual(1.5, value)\n \n     def test_fixedpoint_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testFixedPointField\', u\'1.1\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'1.1\', value)\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'1.1\', value)\n \n     def test_datetime_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testDateTimeField\',\n                                          u\'2015-12-20T19:51:06.375Z\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'2015-12-20T19:51:06.375Z\', value)\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'2015-12-20T19:51:06.375Z\', value)\n \n     def test_lines_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testLinesField\', u\'line1\\nline2\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(\'line1\\nline2\', value)\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(\'line1\\nline2\', value)\n \n     def test_lines_field_deserialization_returns_list(self):\n         value, kwargs = self.deserialize(\'testLinesField\',\n                                          [u\'line1\', u\'line2\'])\n         self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertEquals([u\'line1\', u\'line2\'], value)\n+        self.assertEqual([u\'line1\', u\'line2\'], value)\n \n     def test_file_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testFileField\', u\'Spam and eggs!\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'Spam and eggs!\', value)\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'Spam and eggs!\', value)\n \n     def test_file_field_deserialization_returns_decoded_value(self):\n         value, kwargs = self.deserialize(\'testFileField\', {\n@@ -84,7 +93,7 @@ def test_file_field_deserialization_returns_decoded_value(self):\n             u\'encoding\': u\'base64\',\n         })\n         self.assertTrue(isinstance(value, str), \'Not a <str>\')\n-        self.assertEquals(\'Spam and eggs!\', value)\n+        self.assertEqual(\'Spam and eggs!\', value)\n \n     def test_file_field_deserialization_returns_mimetype_and_filename(self):\n         value, kwargs = self.deserialize(\'testFileField\', {\n@@ -92,24 +101,27 @@ def test_file_field_deserialization_returns_mimetype_and_filename(self):\n             u\'filename\': \'doc.txt\',\n             u\'content-type\': \'text/plain\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'Spam and eggs!\', value)\n-        self.assertEquals(\'text/plain\', kwargs[u\'mimetype\'])\n-        self.assertEquals(\'doc.txt\', kwargs[u\'filename\'])\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'Spam and eggs!\', value)\n+        self.assertEqual(\'text/plain\', kwargs[u\'mimetype\'])\n+        self.assertEqual(\'doc.txt\', kwargs[u\'filename\'])\n \n     def test_text_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testTextField\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'K\xc3\xa4fer\', value)\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'K\xc3\xa4fer\', value)\n \n     def test_text_field_deserialization_returns_mimetype(self):\n         value, kwargs = self.deserialize(\'testTextField\', {\n             u\'data\': u\'K\xc3\xa4fer\',\n             u\'content-type\': \'text/html\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'K\xc3\xa4fer\', value)\n-        self.assertEquals(\'text/html\', kwargs[u\'mimetype\'])\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'K\xc3\xa4fer\', value)\n+        self.assertEqual(\'text/html\', kwargs[u\'mimetype\'])\n \n     def test_image_field_deserialization_returns_mimetype_and_filename(self):\n         value, kwargs = self.deserialize(\'testImageField\', {\n@@ -118,15 +130,17 @@ def test_image_field_deserialization_returns_mimetype_and_filename(self):\n             u\'filename\': \'image.gif\',\n             u\'content-type\': \'image/gif\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertTrue(value.startswith(\'GIF89a\'))\n-        self.assertEquals(\'image/gif\', kwargs[u\'mimetype\'])\n-        self.assertEquals(\'image.gif\', kwargs[u\'filename\'])\n+        self.assertEqual(\'image/gif\', kwargs[u\'mimetype\'])\n+        self.assertEqual(\'image.gif\', kwargs[u\'filename\'])\n \n     def test_blob_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testBlobField\', u\'Spam and eggs!\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'Spam and eggs!\', value)\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'Spam and eggs!\', value)\n \n     def test_blob_field_deserialization_returns_mimetype_and_filename(self):\n         value, kwargs = self.deserialize(\'testBlobField\', {\n@@ -134,10 +148,11 @@ def test_blob_field_deserialization_returns_mimetype_and_filename(self):\n             u\'filename\': \'doc.txt\',\n             u\'content-type\': \'text/plain\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'Spam and eggs!\', value)\n-        self.assertEquals(\'text/plain\', kwargs[u\'mimetype\'])\n-        self.assertEquals(\'doc.txt\', kwargs[u\'filename\'])\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'Spam and eggs!\', value)\n+        self.assertEqual(\'text/plain\', kwargs[u\'mimetype\'])\n+        self.assertEqual(\'doc.txt\', kwargs[u\'filename\'])\n \n     def test_blobfile_field_deserialization_returns_mimetype_and_filename(\n             self):\n@@ -146,10 +161,11 @@ def test_blobfile_field_deserialization_returns_mimetype_and_filename(\n             u\'filename\': \'doc.txt\',\n             u\'content-type\': \'text/plain\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'Spam and eggs!\', value)\n-        self.assertEquals(\'text/plain\', kwargs[u\'mimetype\'])\n-        self.assertEquals(\'doc.txt\', kwargs[u\'filename\'])\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'Spam and eggs!\', value)\n+        self.assertEqual(\'text/plain\', kwargs[u\'mimetype\'])\n+        self.assertEqual(\'doc.txt\', kwargs[u\'filename\'])\n \n     def test_blobimage_field_deserialization_returns_mimetype_and_filename(\n             self):\n@@ -159,10 +175,11 @@ def test_blobimage_field_deserialization_returns_mimetype_and_filename(\n             u\'filename\': \'image.gif\',\n             u\'content-type\': \'image/gif\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertTrue(value.startswith(\'GIF89a\'))\n-        self.assertEquals(\'image/gif\', kwargs[u\'mimetype\'])\n-        self.assertEquals(\'image.gif\', kwargs[u\'filename\'])\n+        self.assertEqual(\'image/gif\', kwargs[u\'mimetype\'])\n+        self.assertEqual(\'image.gif\', kwargs[u\'filename\'])\n \n     def test_query_field_deserialization_requests_list(self):\n         query_data = [\n@@ -185,7 +202,7 @@ def test_reference_field_deserialization_returns_uid_in_list(self):\n         value, kwargs = self.deserialize(\'testReferenceField\',\n                                          u\'0fc0dac495034b869b3b90c9179499a9\')\n         self.assertTrue(isinstance(value, list), \'Not a <basestring>\')\n-        self.assertEquals([u\'0fc0dac495034b869b3b90c9179499a9\'], value)\n+        self.assertEqual([u\'0fc0dac495034b869b3b90c9179499a9\'], value)\n \n     def test_reference_field_deserialization_returns_uids(self):\n         value, kwargs = self.deserialize(\'testReferenceField\', [\n@@ -200,8 +217,8 @@ def test_reference_field_deserialization_returns_object_in_list(self):\n         doc2 = self.portal[self.portal.invokeFactory(\n             \'ATTestDocument\', id=\'doc2\', title=\'Referenced Document\')]\n         value, kwargs = self.deserialize(\'testReferenceField\',\n-                                         unicode(doc2.absolute_url()))\n-        self.assertEquals(doc2, value[0])\n+                                         six.text_type(doc2.absolute_url()))\n+        self.assertEqual(doc2, value[0])\n \n     def test_reference_field_deserialization_returns_objects(self):\n         doc2 = self.portal[self.portal.invokeFactory(\n@@ -210,6 +227,7 @@ def test_reference_field_deserialization_returns_objects(self):\n             \'ATTestDocument\', id=\'doc3\', title=\'Referenced Document\')]\n         value, kwargs = self.deserialize(\n             \'testReferenceField\',\n-            [unicode(doc2.absolute_url()), unicode(doc3.absolute_url())])\n-        self.assertEquals(doc2, value[0])\n-        self.assertEquals(doc3, value[1])\n+            [six.text_type(\n+                doc2.absolute_url()), six.text_type(doc3.absolute_url())])\n+        self.assertEqual(doc2, value[0])\n+        self.assertEqual(doc3, value[1])\ndiff --git a/src/plone/restapi/tests/test_atfield_serializer.py b/src/plone/restapi/tests/test_atfield_serializer.py\nindex da1b23ad..736001bb 100644\n--- a/src/plone/restapi/tests/test_atfield_serializer.py\n+++ b/src/plone/restapi/tests/test_atfield_serializer.py\n@@ -4,6 +4,7 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.restapi.interfaces import IFieldSerializer\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.testing import PLONE_VERSION\n from plone.scale import storage\n@@ -11,6 +12,7 @@\n \n import os\n import unittest\n+import six\n \n if PLONE_VERSION.base_version >= \'5.1\':\n     GIF_SCALE_FORMAT = \'png\'\n@@ -23,6 +25,8 @@ class TestATFieldSerializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n@@ -40,7 +44,7 @@ def serialize(self, fieldname, value, **kwargs):\n \n     def test_string_field_serialization_returns_unicode(self):\n         value = self.serialize(\'testStringField\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'K\xc3\xa4fer\', value)\n \n     def test_boolean_field_serialization_returns_true(self):\n@@ -65,13 +69,13 @@ def test_float_field_serialization_returns_float(self):\n \n     def test_fixedpoint_field_serialization_returns_unicode(self):\n         value = self.serialize(\'testFixedPointField\', u\'1.11\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'1.11\', value)\n \n     def test_datetime_field_serialization_returns_unicode(self):\n         value = self.serialize(\'testDateTimeField\',\n                                DateTime(\'2016-01-21T01:14:48+00:00\'))\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'2016-01-21T01:14:48+00:00\', value)\n \n     def test_lines_field_serialization_returns_list(self):\n@@ -101,7 +105,8 @@ def test_text_field_serialization_returns_dict(self):\n \n     def test_image_field_serialization_returns_dict(self):\n         image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        image_data = open(image_file, \'rb\').read()\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         fn = \'testImageField\'\n         with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n             value = self.serialize(\n@@ -180,7 +185,8 @@ def test_blobfile_field_serialization_returns_dict(self):\n \n     def test_blobimage_field_serialization_returns_dict(self):\n         image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        image_data = open(image_file, \'rb\').read()\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         fn = \'testBlobImageField\'\n         with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n             value = self.serialize(\n@@ -251,7 +257,7 @@ def test_reference_field_serialization_returns_unicode(self):\n         doc2 = self.portal[self.portal.invokeFactory(\n             \'ATTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n         value = self.serialize(\'testReferenceField\', doc2.UID())\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'http://nohost/plone/doc2\', value)\n \n     def test_reference_field_serialization_returns_list(self):\ndiff --git a/src/plone/restapi/tests/test_batching.py b/src/plone/restapi/tests/test_batching.py\nindex e3f11654..f8e25bb3 100644\n--- a/src/plone/restapi/tests/test_batching.py\n+++ b/src/plone/restapi/tests/test_batching.py\n@@ -5,6 +5,7 @@\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n from plone.dexterity.utils import createContentInContainer\n+from plone.restapi import HAS_AT\n from plone.restapi.batching import DEFAULT_BATCH_SIZE\n from plone.restapi.batching import HypermediaBatch\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n@@ -12,11 +13,12 @@\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from plone.restapi.testing import RelativeSession\n from plone.restapi.tests.helpers import result_paths\n-from urlparse import parse_qsl\n-from urlparse import urlparse\n+from six.moves.urllib.parse import parse_qsl\n+from six.moves.urllib.parse import urlparse\n \n import transaction\n import unittest\n+from six.moves import range\n \n \n class TestBatchingDXBase(unittest.TestCase):\n@@ -104,7 +106,7 @@ def test_contains_correct_batch_of_items(self):\n         response = self.api_session.get(\'/folder/@search?b_start=2&b_size=2\')\n \n         # Response should contain second batch of items\n-        self.assertEquals([\n+        self.assertEqual([\n             u\'/plone/folder/doc-2\',\n             u\'/plone/folder/doc-3\'],\n             result_paths(response.json()))\n@@ -171,7 +173,7 @@ def test_contains_correct_batch_of_items(self):\n         response = self.api_session.get(\'/collection?b_start=2&b_size=2\')\n \n         # Response should contain second batch of items\n-        self.assertEquals([\n+        self.assertEqual([\n             u\'/plone/folder/doc-2\',\n             u\'/plone/folder/doc-3\'],\n             result_paths(response.json()))\n@@ -185,7 +187,7 @@ def test_total_item_count_is_correct(self):\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n         response = self.api_session.get(\'/collection?b_size=100\')\n-        self.assertNotIn(\'batching\', response.json().keys())\n+        self.assertNotIn(\'batching\', list(response.json()))\n \n \n class TestBatchingDXFolders(TestBatchingDXBase):\n@@ -233,7 +235,7 @@ def test_contains_correct_batch_of_items(self):\n         response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n \n         # Response should contain second batch of items\n-        self.assertEquals([\n+        self.assertEqual([\n             u\'/plone/folder/doc-3\',\n             u\'/plone/folder/doc-4\'],\n             result_paths(response.json()))\n@@ -247,7 +249,7 @@ def test_total_item_count_is_correct(self):\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n         response = self.api_session.get(\'/folder?b_size=100\')\n-        self.assertNotIn(\'batching\', response.json().keys())\n+        self.assertNotIn(\'batching\', list(response.json()))\n \n \n class TestBatchingSiteRoot(TestBatchingDXBase):\n@@ -291,7 +293,7 @@ def test_contains_correct_batch_of_items(self):\n         response = self.api_session.get(\'/?b_start=2&b_size=2\')\n \n         # Response should contain second batch of items\n-        self.assertEquals([\n+        self.assertEqual([\n             u\'/plone/doc-3\',\n             u\'/plone/doc-4\'],\n             result_paths(response.json()))\n@@ -305,7 +307,60 @@ def test_total_item_count_is_correct(self):\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n         response = self.api_session.get(\'/folder?b_size=100\')\n-        self.assertNotIn(\'batching\', response.json().keys())\n+        self.assertNotIn(\'batching\', list(response.json()))\n+\n+\n+class TestAABatchingArchetypes(unittest.TestCase):\n+    """This is a dummy test to work around a nasty test-isolation issue.\n+\n+    It does the same requests as TestBatchingArchetypes (see below).\n+    When run with the robot-tests in plone.app.widgets (without isolation)\n+    they return rendered templates since \'mark_as_api_request\' is not hit.\n+\n+    Doing the exact same calls here before actually running the tests\n+    fixes the issue. Don\'t ask why, I do not know.\n+\n+    See https://github.com/plone/Products.CMFPlone/issues/2592 for details.\n+    """\n+\n+    layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n+        self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n+\n+        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Contributor\'])\n+        self.api_session = RelativeSession(self.portal_url)\n+        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+        self.portal[self.portal.invokeFactory(\n+            \'Folder\',\n+            id=\'folder\',\n+            title=\'Some Folder\',\n+        )]\n+        transaction.commit()\n+\n+    def test_contains_canonical_url(self):\n+        # Fetch the second page of the batch\n+        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+\n+    def test_contains_batching_links(self):\n+        # Fetch the second page of the batch\n+        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+\n+    def test_contains_correct_batch_of_items(self):\n+        # Fetch the second page of the batch\n+        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+\n+    def test_total_item_count_is_correct(self):\n+        # Fetch the second page of the batch\n+        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+\n+    def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n+        self.api_session.get(\'/folder?b_size=100\')\n \n \n class TestBatchingArchetypes(unittest.TestCase):\n@@ -313,6 +368,8 @@ class TestBatchingArchetypes(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n         self.portal_url = self.portal.absolute_url()\n@@ -371,7 +428,7 @@ def test_contains_correct_batch_of_items(self):\n         response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n \n         # Response should contain second batch of items\n-        self.assertEquals([\n+        self.assertEqual([\n             u\'/plone/folder/doc-3\',\n             u\'/plone/folder/doc-4\'],\n             result_paths(response.json()))\n@@ -385,7 +442,7 @@ def test_total_item_count_is_correct(self):\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n         response = self.api_session.get(\'/folder?b_size=100\')\n-        self.assertNotIn(\'batching\', response.json().keys())\n+        self.assertNotIn(\'batching\', list(response.json()))\n \n \n class TestHypermediaBatch(unittest.TestCase):\n@@ -397,7 +454,7 @@ def setUp(self):\n         self.request = self.portal.REQUEST\n \n     def test_items_total(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n         # items_total should be total number of items in the sequence\n@@ -405,12 +462,12 @@ def test_items_total(self):\n             25, batch.items_total)\n \n     def test_default_batch_size(self):\n-        items = range(1, 27)\n+        items = list(range(1, 27))\n         batch = HypermediaBatch(self.request, items)\n         self.assertEqual(DEFAULT_BATCH_SIZE, len(list(batch)))\n \n     def test_custom_batch_size(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 5\n         batch = HypermediaBatch(self.request, items)\n         # Batch size should be customizable via request\n@@ -418,39 +475,39 @@ def test_custom_batch_size(self):\n             5, len(list(batch)))\n \n     def test_default_batch_start(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n         # Batch should start on first item by default\n         self.assertEqual(\n-            range(1, 11), list(batch))\n+            list(range(1, 11)), list(batch))\n \n     def test_custom_batch_start(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 10\n         self.request.form[\'b_start\'] = 5\n         batch = HypermediaBatch(self.request, items)\n         # Batch start should be customizable via request\n         self.assertEqual(\n-            range(6, 16), list(batch))\n+            list(range(6, 16)), list(batch))\n \n     def test_custom_start_and_size_can_be_combined(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 5\n         self.request.form[\'b_start\'] = 5\n         batch = HypermediaBatch(self.request, items)\n         # Should be able to combine custom batch start and size\n         self.assertListEqual(\n-            range(6, 11), list(batch))\n+            list(range(6, 11)), list(batch))\n \n     def test_canonical_url(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n         self.assertEqual(\'http://nohost\', batch.canonical_url)\n \n     def test_canonical_url_preserves_query_string_params(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         self.request[\'QUERY_STRING\'] = \'one=1&two=2\'\n@@ -459,12 +516,12 @@ def test_canonical_url_preserves_query_string_params(self):\n         parsed_url = urlparse(batch.canonical_url)\n         qs_params = dict(parse_qsl(parsed_url.query))\n \n-        self.assertEquals({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n-        self.assertEquals(\'nohost\', parsed_url.netloc)\n-        self.assertEquals(\'\', parsed_url.path)\n+        self.assertEqual({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n+        self.assertEqual(\'nohost\', parsed_url.netloc)\n+        self.assertEqual(\'\', parsed_url.path)\n \n     def test_canonical_url_preserves_list_like_query_string_params(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         self.request[\'QUERY_STRING\'] = \'foolist=1&foolist=2\'\n@@ -473,13 +530,13 @@ def test_canonical_url_preserves_list_like_query_string_params(self):\n         # Argument lists (same query string parameter repeated multiple\n         # times) should be preserved.\n \n-        self.assertEquals(\n+        self.assertEqual(\n             set([(\'foolist\', \'1\'), (\'foolist\', \'2\')]),\n             set(parse_qsl(urlparse(batch.canonical_url).query))\n         )\n \n     def test_canonical_url_strips_batching_params(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         self.request[\'QUERY_STRING\'] = \'one=1&b_size=10&b_start=20&two=2\'\n@@ -488,12 +545,12 @@ def test_canonical_url_strips_batching_params(self):\n         parsed_url = urlparse(batch.canonical_url)\n         qs_params = dict(parse_qsl(parsed_url.query))\n \n-        self.assertEquals({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n-        self.assertEquals(\'nohost\', parsed_url.netloc)\n-        self.assertEquals(\'\', parsed_url.path)\n+        self.assertEqual({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n+        self.assertEqual(\'nohost\', parsed_url.netloc)\n+        self.assertEqual(\'\', parsed_url.path)\n \n     def test_canonical_url_strips_sorting_params(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request[\'QUERY_STRING\'] = \'one=1&sort_on=path&two=2\'\n         batch = HypermediaBatch(self.request, items)\n@@ -501,12 +558,12 @@ def test_canonical_url_strips_sorting_params(self):\n         parsed_url = urlparse(batch.canonical_url)\n         qs_params = dict(parse_qsl(parsed_url.query))\n \n-        self.assertEquals({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n-        self.assertEquals(\'nohost\', parsed_url.netloc)\n-        self.assertEquals(\'\', parsed_url.path)\n+        self.assertEqual({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n+        self.assertEqual(\'nohost\', parsed_url.netloc)\n+        self.assertEqual(\'\', parsed_url.path)\n \n     def test_current_batch_url(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         self.request[\'ACTUAL_URL\'] = \'http://nohost\'\n@@ -516,14 +573,14 @@ def test_current_batch_url(self):\n             \'http://nohost?b_size=10&b_start=20\', batch.current_batch_url)\n \n     def test_batching_links_omitted_if_resultset_fits_in_single_batch(self):\n-        items = range(1, 5)\n+        items = list(range(1, 5))\n \n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n         self.assertEqual(None, batch.links)\n \n     def test_first_link_contained(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n@@ -531,7 +588,7 @@ def test_first_link_contained(self):\n             {\'first\': \'http://nohost?b_start=0\'}, batch.links)\n \n     def test_first_link_preserves_list_like_querystring_params(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         self.request[\'QUERY_STRING\'] = \'foolist=1&foolist=2\'\n@@ -541,13 +598,13 @@ def test_first_link_preserves_list_like_querystring_params(self):\n         # times) should be preserved.\n \n         batch_params = set([(\'b_start\', \'0\'), (\'b_size\', \'10\')])\n-        self.assertEquals(\n+        self.assertEqual(\n             set([(\'foolist\', \'1\'), (\'foolist\', \'2\')]),\n             set(parse_qsl(urlparse(batch.links[\'first\']).query)) - batch_params\n         )\n \n     def test_last_link_contained(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n@@ -555,7 +612,7 @@ def test_last_link_contained(self):\n             {\'last\': \'http://nohost?b_start=20\'}, batch.links)\n \n     def test_next_link_contained_if_necessary(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n@@ -563,7 +620,7 @@ def test_next_link_contained_if_necessary(self):\n             {\'next\': \'http://nohost?b_start=10\'}, batch.links)\n \n     def test_next_link_omitted_on_last_page(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         # Start on last page\n         self.request.form[\'b_size\'] = 10\n@@ -571,10 +628,10 @@ def test_next_link_omitted_on_last_page(self):\n         batch = HypermediaBatch(self.request, items)\n         self.assertSetEqual(\n             set([\'@id\', \'first\', \'prev\', \'last\']),\n-            set(batch.links.keys()))\n+            set(batch.links))\n \n     def test_prev_link_contained_if_necessary(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         # Start on third page\n         self.request.form[\'b_size\'] = 10\n@@ -584,16 +641,16 @@ def test_prev_link_contained_if_necessary(self):\n             {\'prev\': \'http://nohost?b_start=10\'}, batch.links)\n \n     def test_prev_link_omitted_on_first_page(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n         self.assertSetEqual(\n             set([\'@id\', \'first\', \'next\', \'last\']),\n-            set(batch.links.keys()))\n+            set(batch.links))\n \n     def test_no_gaps_or_duplicates_between_pages(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         items_from_all_batches = []\n \n         size = 10\n@@ -607,11 +664,11 @@ def test_no_gaps_or_duplicates_between_pages(self):\n         self.assertEqual(items, items_from_all_batches)\n \n     def test_batch_start_never_drops_below_zero(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         # Start in the middle of what would otherwise be the first batch\n         self.request.form[\'b_size\'] = 10\n         self.request.form[\'b_start\'] = 5\n         batch = HypermediaBatch(self.request, items)\n-        self.assertEquals(\n+        self.assertEqual(\n             \'http://nohost?b_start=0\', batch.links[\'prev\'])\ndiff --git a/src/plone/restapi/tests/test_comments.py b/src/plone/restapi/tests/test_comments.py\nindex 44b12633..69e7e44c 100644\n--- a/src/plone/restapi/tests/test_comments.py\n+++ b/src/plone/restapi/tests/test_comments.py\n@@ -57,7 +57,7 @@ def test_conversation(self):\n \n         output = serializer()\n         self.assertEqual(\n-            set(output.keys()),\n+            set(output),\n             set([\'@id\', \'items_total\', \'items\'])\n         )\n \n@@ -95,11 +95,11 @@ def test_comment(self):\n             \'is_deletable\'\n         ]\n         self.assertEqual(\n-            set(output.keys()),\n+            set(output),\n             set(expected)\n         )\n \n         self.assertEqual(\n-            set(output[\'text\'].keys()),\n+            set(output[\'text\']),\n             set([\'data\', \'mime-type\'])\n         )\ndiff --git a/src/plone/restapi/tests/test_content_delete.py b/src/plone/restapi/tests/test_content_delete.py\nindex 6dc5c4f2..e7d39a92 100644\n--- a/src/plone/restapi/tests/test_content_delete.py\n+++ b/src/plone/restapi/tests/test_content_delete.py\n@@ -10,6 +10,7 @@\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.testing import login\n from plone.app.testing import setRoles\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from zope.event import notify\n@@ -65,6 +66,8 @@ class TestATContentDelete(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.doc1 = self.portal[self.portal.invokeFactory(\n@@ -79,8 +82,9 @@ def traverse(self, path=\'/plone\', accept=\'application/json\', method=\'GET\'):\n         request.environ[\'PATH_TRANSLATED\'] = path\n         request.environ[\'HTTP_ACCEPT\'] = accept\n         request.environ[\'REQUEST_METHOD\'] = method\n+        auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         request._auth = \'Basic %s\' % b64encode(\n-            \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD))\n+            auth.encode(\'utf8\')).decode(\'utf8\')\n         notify(PubStart(request))\n         return request.traverse(path)\n \ndiff --git a/src/plone/restapi/tests/test_content_get.py b/src/plone/restapi/tests/test_content_get.py\nindex 21daeaf1..0a21824e 100644\n--- a/src/plone/restapi/tests/test_content_get.py\n+++ b/src/plone/restapi/tests/test_content_get.py\n@@ -73,13 +73,13 @@ def test_get_content_returns_fullobjects(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(3, len(response.json()[\'items\']))\n         self.assertTrue(\n-            \'title\' in response.json()[\'items\'][0].keys()\n+            \'title\' in list(response.json()[\'items\'][0])\n         )\n         self.assertTrue(\n-            \'description\' in response.json()[\'items\'][0].keys()\n+            \'description\' in list(response.json()[\'items\'][0])\n         )\n         self.assertTrue(\n-            \'text\' in response.json()[\'items\'][0].keys()\n+            \'text\' in list(response.json()[\'items\'][0])\n         )\n         self.assertEqual(\n             {\ndiff --git a/src/plone/restapi/tests/test_content_local_roles.py b/src/plone/restapi/tests/test_content_local_roles.py\nindex f0fd0914..e0cd27b6 100644\n--- a/src/plone/restapi/tests/test_content_local_roles.py\n+++ b/src/plone/restapi/tests/test_content_local_roles.py\n@@ -16,6 +16,15 @@\n import unittest\n \n \n+def sorted_roles(roles):\n+    results = []\n+    for line in roles:\n+        line = list(line)\n+        line[1] = sorted(line[1])\n+        results.append(line)\n+    return results\n+\n+\n class TestFolderCreate(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n@@ -237,10 +246,9 @@ def test_set_local_roles_for_user(self):\n \n         self.assertEqual(response.status_code, 204)\n         self.assertEqual(\n-            pas.getLocalRolesForDisplay(self.portal.folder1),\n-            ((\'admin\', (\'Owner\',), \'user\', \'admin\'),\n-             (\'test-user\', (u\'Reviewer\', u\'Reader\'),\n-              \'user\', u\'test_user_1_\'))\n+            sorted_roles(pas.getLocalRolesForDisplay(self.portal.folder1)),\n+            [[\'admin\', [\'Owner\', ], \'user\', \'admin\'],\n+             [\'test-user\', [u\'Reader\', u\'Reviewer\'], \'user\', u\'test_user_1_\']]\n         )\n \n     def test_unset_local_roles_for_user(self):\n@@ -251,9 +259,9 @@ def test_unset_local_roles_for_user(self):\n \n         pas = getToolByName(self.portal, \'acl_users\')\n         self.assertEqual(\n-            pas.getLocalRolesForDisplay(self.portal.folder1),\n-            ((\'admin\', (\'Owner\',), \'user\', \'admin\'),\n-             (\'test-user\', (\'Reviewer\', \'Reader\'), \'user\', \'test_user_1_\'))\n+            sorted_roles(pas.getLocalRolesForDisplay(self.portal.folder1)),\n+            [[\'admin\', [\'Owner\', ], \'user\', \'admin\'],\n+             [\'test-user\', [\'Reader\', \'Reviewer\'], \'user\', \'test_user_1_\']]\n         )\n \n         response = requests.post(\n@@ -402,7 +410,7 @@ def test_no_serializer_available_returns_501(self):\n         self.assertEqual(response.status_code, 501)\n         response = response.json()\n         self.assertIn(\'error\', response)\n-        self.assertEquals(\n+        self.assertEqual(\n             u\'No serializer available.\',\n             response[\'error\'][\'message\']\n         )\ndiff --git a/src/plone/restapi/tests/test_content_patch.py b/src/plone/restapi/tests/test_content_patch.py\nindex 39aecd66..ae29fd2d 100644\n--- a/src/plone/restapi/tests/test_content_patch.py\n+++ b/src/plone/restapi/tests/test_content_patch.py\n@@ -7,6 +7,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n+from plone.restapi import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from Products.CMFCore.PortalContent import PortalContent\n@@ -207,6 +208,8 @@ class TestATContentPatch(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\ndiff --git a/src/plone/restapi/tests/test_content_post.py b/src/plone/restapi/tests/test_content_post.py\nindex f5572bce..13ab90d6 100644\n--- a/src/plone/restapi/tests/test_content_post.py\n+++ b/src/plone/restapi/tests/test_content_post.py\n@@ -7,6 +7,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n+from plone.restapi import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from Products.CMFCore.utils import getToolByName\n@@ -92,7 +93,7 @@ def test_post_without_type_returns_400(self):\n             },\n         )\n         self.assertEqual(400, response.status_code)\n-        self.assertIn("Property \'@type\' is required", response.content)\n+        self.assertIn("Property \'@type\' is required", response.text)\n \n     def test_post_without_id_creates_id_from_title(self):\n         response = requests.post(\n@@ -215,6 +216,8 @@ class TestATFolderCreate(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\ndiff --git a/src/plone/restapi/tests/test_content_utils.py b/src/plone/restapi/tests/test_content_utils.py\nindex 898294b9..773b5d1d 100644\n--- a/src/plone/restapi/tests/test_content_utils.py\n+++ b/src/plone/restapi/tests/test_content_utils.py\n@@ -2,6 +2,7 @@\n from Acquisition import aq_parent\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.restapi import HAS_AT\n from plone.restapi.services.content.utils import add\n from plone.restapi.services.content.utils import create\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n@@ -63,6 +64,8 @@ class TestATCreateContent(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n@@ -150,6 +153,8 @@ class TestATAddContent(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\ndiff --git a/src/plone/restapi/tests/test_copymove.py b/src/plone/restapi/tests/test_copymove.py\nindex 79fcecdd..95f32042 100644\n--- a/src/plone/restapi/tests/test_copymove.py\n+++ b/src/plone/restapi/tests/test_copymove.py\n@@ -34,8 +34,9 @@ def traverse(self, path=\'/plone\', accept=\'application/json\', method=\'GET\'):\n         request.environ[\'PATH_TRANSLATED\'] = path\n         request.environ[\'HTTP_ACCEPT\'] = accept\n         request.environ[\'REQUEST_METHOD\'] = method\n+        auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         request._auth = \'Basic %s\' % b64encode(\n-            \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD))\n+            auth.encode(\'utf8\')).decode(\'utf8\')\n         notify(PubStart(request))\n         return request.traverse(path)\n \n@@ -95,7 +96,7 @@ def test_copy_single_object(self):\n         )\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 200)\n+        self.assertEqual(response.status_code, 200)\n         self.assertIn(\'copy_of_doc1\', self.portal.objectIds())\n \n     def test_move_single_object(self):\n@@ -107,7 +108,7 @@ def test_move_single_object(self):\n         )\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 200)\n+        self.assertEqual(response.status_code, 200)\n         self.assertIn(\'doc1\', self.folder1.objectIds())\n         self.assertNotIn(\'doc1\', self.portal.objectIds())\n \n@@ -118,7 +119,7 @@ def test_move_multiple_objects(self):\n                 "source": [self.doc1.absolute_url(), self.doc2.absolute_url()]\n             }\n         )\n-        self.assertEquals(response.status_code, 200)\n+        self.assertEqual(response.status_code, 200)\n         transaction.commit()\n \n         self.assertIn(\'doc1\', self.folder1.objectIds())\n@@ -128,7 +129,7 @@ def test_move_multiple_objects(self):\n \n     def test_copy_without_source_raises_400(self):\n         response = self.api_session.post(\'/folder1/@copy\')\n-        self.assertEquals(response.status_code, 400)\n+        self.assertEqual(response.status_code, 400)\n \n     def test_copy_not_existing_object(self):\n         response = self.api_session.post(\n@@ -138,7 +139,7 @@ def test_copy_not_existing_object(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 200)\n+        self.assertEqual(response.status_code, 200)\n         self.assertEqual([], response.json())\n \n     def test_copy_multiple_objects(self):\n@@ -150,7 +151,7 @@ def test_copy_multiple_objects(self):\n         )\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 200)\n+        self.assertEqual(response.status_code, 200)\n         self.assertIn(\'copy_of_doc1\', self.portal.objectIds())\n         self.assertIn(\'copy_of_doc2\', self.portal.objectIds())\n \n@@ -163,7 +164,7 @@ def test_copy_single_object_no_permissions_raises_403(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 403)\n+        self.assertEqual(response.status_code, 403)\n \n     def test_copy_single_object_no_auth_raises_401(self):\n         self.api_session.auth = (\'nonexistent\', \'secret\')\n@@ -174,7 +175,7 @@ def test_copy_single_object_no_auth_raises_401(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 401)\n+        self.assertEqual(response.status_code, 401)\n \n     def test_move_single_object_no_permissions_raises_403(self):\n         self.api_session.auth = (\'memberuser\', \'secret\')\n@@ -185,7 +186,7 @@ def test_move_single_object_no_permissions_raises_403(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 403)\n+        self.assertEqual(response.status_code, 403)\n \n     def test_move_single_object_no_auth_raises_401(self):\n         self.api_session.auth = (\'nonexistent\', \'secret\')\n@@ -196,7 +197,7 @@ def test_move_single_object_no_auth_raises_401(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 401)\n+        self.assertEqual(response.status_code, 401)\n \n     def test_move_single_object_no_permission_delete_source_raises_403(self):\n         api.user.grant_roles(\n@@ -212,4 +213,4 @@ def test_move_single_object_no_permission_delete_source_raises_403(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 403)\n+        self.assertEqual(response.status_code, 403)\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 4e2ba04f..e0ee2df2 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -38,10 +38,12 @@\n \n import collections\n import json\n-import re\n import os\n+import re\n+import six\n import transaction\n import unittest\n+from six.moves import range\n \n if PAM_INSTALLED:\n     from plone.app.multilingual.interfaces import ITranslationManager\n@@ -75,9 +77,9 @@\n \n base_path = resource_filename(\'plone.restapi.tests\', \'http-examples\')\n \n-UPLOAD_DATA = \'abcdefgh\'\n-UPLOAD_MIMETYPE = \'text/plain\'\n-UPLOAD_FILENAME = \'test.txt\'\n+UPLOAD_DATA = b\'abcdefgh\'\n+UPLOAD_MIMETYPE = b\'text/plain\'\n+UPLOAD_FILENAME = b\'test.txt\'\n UPLOAD_LENGTH = len(UPLOAD_DATA)\n \n UPLOAD_PDF_MIMETYPE = \'application/pdf\'\n@@ -98,7 +100,12 @@ def pretty_json(data):\n \n \n def save_request_and_response_for_docs(name, response):\n-    with open(\'{}/{}\'.format(base_path, \'%s.req\' % name), \'w\') as req:\n+    if six.PY2:\n+        open_kw = {}\n+    else:\n+        open_kw = {\'newline\': \'\\n\'}\n+    filename = \'{}/{}\'.format(base_path, \'%s.req\' % name)\n+    with open(filename, \'w\', **open_kw) as req:\n         req.write(\'{} {} HTTP/1.1\\n\'.format(\n             response.request.method,\n             response.request.path_url\n@@ -125,9 +132,15 @@ def save_request_and_response_for_docs(name, response):\n                 # ever decide to dump that header\n                 response.request.prepare_body(data=body, files=None)\n \n-            req.write(response.request.body)\n+            if (isinstance(response.request.body, six.text_type)\n+                    or not hasattr(req, \'buffer\')):\n+                req.write(response.request.body)\n+            else:\n+                req.buffer.seek(0, 2)\n+                req.buffer.write(response.request.body)\n \n-    with open(\'{}/{}\'.format(base_path, \'%s.resp\' % name), \'w\') as resp:\n+    filename = \'{}/{}\'.format(base_path, \'%s.resp\' % name)\n+    with open(filename, \'w\', **open_kw) as resp:\n         status = response.status_code\n         reason = response.reason\n         resp.write(\'HTTP/1.1 {} {}\\n\'.format(status, reason))\n@@ -135,7 +148,7 @@ def save_request_and_response_for_docs(name, response):\n             if key.lower() in RESPONSE_HEADER_KEYS:\n                 resp.write(\'{}: {}\\n\'.format(key.title(), value))\n         resp.write(\'\\n\')\n-        resp.write(response.content)\n+        resp.write(response.text)\n \n \n class TestDocumentation(unittest.TestCase):\n@@ -271,8 +284,10 @@ def test_documentation_news_item(self):\n             \'text/html\'\n         )\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         self.portal.newsitem.image = NamedBlobImage(\n-            data=open(image_file, \'r\').read(),\n+            data=image_data,\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\n@@ -324,8 +339,10 @@ def test_documentation_file(self):\n         pdf_file = os.path.join(\n             os.path.dirname(__file__), u\'file.pdf\'\n         )\n+        with open(pdf_file, \'rb\') as f:\n+            pdf_data = f.read()\n         self.portal.file.file = NamedBlobFile(\n-            data=open(pdf_file, \'r\').read(),\n+            data=pdf_data,\n             contentType=\'application/pdf\',\n             filename=u\'file.pdf\'\n         )\n@@ -342,8 +359,10 @@ def test_documentation_image(self):\n         self.portal.image.title = \'My Image\'\n         self.portal.image.description = u\'This is an image\'\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         self.portal.image.image = NamedBlobImage(\n-            data=open(image_file, \'r\').read(),\n+            data=image_data,\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\n@@ -1173,8 +1192,8 @@ def clean_final_url(response, _id=\'document-2016-10-21\'):\n \n         # POST create an upload\n         metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME),\n-            b64encode(UPLOAD_MIMETYPE)\n+            b64encode(UPLOAD_FILENAME).decode(\'utf-8\'),\n+            b64encode(UPLOAD_MIMETYPE).decode(\'utf-8\'),\n         )\n         response = self.api_session.post(\n             \'/folder/@tus-upload\',\n@@ -1228,8 +1247,8 @@ def test_tusreplace_post_patch(self):\n \n         # POST create an upload\n         metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME),\n-            b64encode(UPLOAD_MIMETYPE)\n+            b64encode(UPLOAD_FILENAME).decode(\'utf-8\'),\n+            b64encode(UPLOAD_MIMETYPE).decode(\'utf-8\'),\n         )\n         response = self.api_session.post(\n             \'/myfile/@tus-replace\',\n@@ -1261,8 +1280,8 @@ def test_locking_lock(self):\n         response = self.api_session.post(url)\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n-            r\'"token": "[^"]+"\',\n-            \'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n+            b\'"token": "[^"]+"\',\n+            b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n             response.content)\n         save_request_and_response_for_docs(\'lock\', response)\n \n@@ -1277,8 +1296,8 @@ def test_locking_lock_nonstealable_and_timeout(self):\n         )\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n-            r\'"token": "[^"]+"\',\n-            \'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n+            b\'"token": "[^"]+"\',\n+            b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n             response.content)\n         save_request_and_response_for_docs(\n             \'lock_nonstealable_timeout\', response)\n@@ -1297,8 +1316,8 @@ def test_locking_refresh_lock(self):\n         response = self.api_session.post(url)\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n-            r\'"token": "[^"]+"\',\n-            \'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n+            b\'"token": "[^"]+"\',\n+            b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n             response.content)\n         save_request_and_response_for_docs(\'refresh_lock\', response)\n \n@@ -1469,13 +1488,14 @@ def create_document_with_comments(self):\n                 comment = createObject(\'plone.Comment\')\n                 comment.text = \'Comment %d.%d\' % (x, y)\n                 comment_replies.addComment(comment)\n-        self.comment_id, self.comment = replies.items()[0]\n+        self.comment_id, self.comment = list(replies.items())[0]\n \n         return document\n \n     @staticmethod\n     def clean_comment_id(response, _id=\'123456\'):\n         pattern = r\'@comments/(\\w+)\'\n+        pattern_bytes = b\'@comments/(\\\\w+)\'\n         repl = \'@comments/\' + _id\n \n         # Replaces the dynamic part in the headers with a stable id\n@@ -1488,12 +1508,12 @@ def clean_comment_id(response, _id=\'123456\'):\n         # and the body\n         if response.request.body:\n             response.request.body = re.sub(\n-                pattern, repl, response.request.body\n+                pattern_bytes, repl, response.request.body\n             )\n \n         # and the response\n         if response.content:\n-            response._content = re.sub(pattern, repl, response._content)\n+            response._content = re.sub(pattern_bytes, repl, response._content)\n \n     def test_comments_get(self):\n         url = \'{}/@comments\'.format(self.document.absolute_url())\ndiff --git a/src/plone/restapi/tests/test_dxcontent_deserializer.py b/src/plone/restapi/tests/test_dxcontent_deserializer.py\nindex 8838fae9..6cd85ccd 100644\n--- a/src/plone/restapi/tests/test_dxcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_deserializer.py\n@@ -15,6 +15,8 @@\n \n import json\n import unittest\n+import six\n+from six.moves import range\n \n \n class TestDXContentDeserializer(unittest.TestCase, OrderingMixin):\n@@ -53,20 +55,20 @@ def deserialize(self, body=\'{}\', validate_all=False, context=None):\n     def test_deserializer_raises_with_invalid_body(self):\n         with self.assertRaises(DeserializationError) as cm:\n             self.deserialize(body=\'Not a JSON object\')\n-        self.assertEquals(\'No JSON object could be decoded\', cm.exception.msg)\n+        self.assertEqual(\'No JSON object could be decoded\', cm.exception.msg)\n \n     def test_deserializer_raises_with_malformed_body(self):\n         with self.assertRaises(DeserializationError) as cm:\n             self.deserialize(body=\'[1,2,3]\')\n-        self.assertEquals(\'Malformed body\', cm.exception.msg)\n+        self.assertEqual(\'Malformed body\', cm.exception.msg)\n \n     def test_deserializer_updates_field_value(self):\n         self.deserialize(body=\'{"test_textline_field": "My Item"}\')\n-        self.assertEquals(u\'My Item\', self.portal.doc1.test_textline_field)\n+        self.assertEqual(u\'My Item\', self.portal.doc1.test_textline_field)\n \n     def test_deserializer_ignores_readonly_fields(self):\n         self.deserialize(body=\'{"test_readonly_field": "Foo"}\')\n-        self.assertEquals(u\'readonly\', self.portal.doc1.test_readonly_field)\n+        self.assertEqual(u\'readonly\', self.portal.doc1.test_readonly_field)\n \n     def test_deserializer_notifies_object_modified(self):\n         def handler(obj, event):\n@@ -81,8 +83,8 @@ def handler(obj, event):\n             self.event = event\n         provideHandler(handler, (IDexterityItem, IObjectModifiedEvent,))\n         self.deserialize(body=\'{"test_textline_field": "My Item"}\')\n-        self.assertEquals(1, len(self.event.descriptions))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.event.descriptions))\n+        self.assertEqual(\n             (\'IDXTestDocumentSchema.test_textline_field\',),\n             self.event.descriptions[0].attributes)\n \n@@ -91,31 +93,37 @@ def test_deserializer_does_not_update_field_without_write_permission(self):\n         setRoles(self.portal,\n                  TEST_USER_ID, [\'Member\', \'Contributor\', \'Editor\'])\n         self.deserialize(body=\'{"test_write_permission_field": "Foo"}\')\n-        self.assertEquals(u\'Test Write Permission\',\n-                          self.portal.doc1.test_write_permission_field)\n+        self.assertEqual(\n+            u\'Test Write Permission\',\n+            self.portal.doc1.test_write_permission_field\n+        )\n \n     def test_deserializer_updates_field_with_write_permission(self):\n         self.portal.doc1.test_write_permission_field = u\'Test Write Permission\'\n         setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Manager\'])\n         self.deserialize(body=\'{"test_write_permission_field": "Foo"}\')\n-        self.assertEquals(u\'Foo\',\n-                          self.portal.doc1.test_write_permission_field)\n+        self.assertEqual(\n+            u\'Foo\',\n+            self.portal.doc1.test_write_permission_field\n+        )\n \n     def test_deserializer_validates_invariant(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"test_invariant_field1": "Foo",\'\n                                   \' "test_invariant_field2": "Bar"}\')\n-        self.assertEquals(u\'Must have same values\',\n-                          cm.exception.message[0][\'message\'])\n+        self.assertEqual(\n+            u\'Must have same values\',\n+            str(cm.exception.args[0][0][\'message\'])\n+        )\n \n     def test_deserializer_updates_behavior_field_value(self):\n         self.deserialize(body=\'{"test_behavior_field": "My Value"}\')\n-        self.assertEquals(u\'My Value\', self.portal.doc1.test_behavior_field)\n+        self.assertEqual(u\'My Value\', self.portal.doc1.test_behavior_field)\n \n     def test_deserializer_updates_behavior_field_value_in_annotations(self):\n         self.deserialize(\n             body=\'{"test_annotations_behavior_field": "My Value"}\')\n-        self.assertEquals(\n+        self.assertEqual(\n             u\'My Value\',\n             ITestAnnotationsBehavior(self.portal.doc1)\n             .test_annotations_behavior_field)\n@@ -125,20 +133,24 @@ def test_deserializer_raises_if_required_value_is_missing(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"test_textline_field": "My Value"}\',\n                              validate_all=True)\n-        self.assertEquals(u\'Required input is missing.\',\n-                          cm.exception.message[0][\'message\'])\n+        self.assertEqual(\n+            u\'Required input is missing.\',\n+            cm.exception.args[0][0][\'message\']\n+        )\n \n         # An empty string should be considered a missing value\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"test_textline_field": ""}\',\n                              validate_all=True)\n-        self.assertEquals(u\'Required input is missing.\',\n-                          cm.exception.message[0][\'message\'])\n+        self.assertEqual(\n+            u\'Required input is missing.\',\n+            cm.exception.args[0][0][\'message\']\n+        )\n \n     def test_deserializer_succeeds_if_required_value_is_provided(self):\n         self.deserialize(body=\'{"test_required_field": "My Value"}\',\n                          validate_all=True)\n-        self.assertEquals(u\'My Value\', self.portal.doc1.test_required_field)\n+        self.assertEqual(u\'My Value\', self.portal.doc1.test_required_field)\n \n     def test_deserializer_does_not_store_default_value(self):\n         # XXX: Dexterity has an odd behavior with default values.\n@@ -157,15 +169,21 @@ def test_deserializer_does_not_store_default_value(self):\n     def test_deserializer_passes_validation_with_not_provided_defaults(self):\n         self.deserialize(body=\'{"test_required_field": "My Value"}\',\n                          validate_all=True)\n-        self.assertEquals(u\'Default\',\n-                          self.portal.doc1.test_default_value_field)\n-        self.assertEquals(u\'DefaultFactory\',\n-                          self.portal.doc1.test_default_factory_field)\n+        self.assertEqual(\n+            u\'Default\',\n+            self.portal.doc1.test_default_value_field\n+        )\n+        self.assertEqual(\n+            u\'DefaultFactory\',\n+            self.portal.doc1.test_default_factory_field\n+        )\n \n     def test_deserializer_sets_missing_value_when_receiving_null(self):\n         self.deserialize(body=\'{"test_missing_value_field": null}\')\n-        self.assertEquals(u\'missing\',\n-                          self.portal.doc1.test_missing_value_field)\n+        self.assertEqual(\n+            u\'missing\',\n+            self.portal.doc1.test_missing_value_field\n+        )\n \n     def test_deserializer_sets_missing_value_on_required_field(self):\n         \'\'\'We don\'t set missing_value if the field is required\'\'\'\n@@ -174,23 +192,27 @@ def test_deserializer_sets_missing_value_on_required_field(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(\n                 body=\'{"test_missing_value_required_field": null}\')\n-        self.assertEquals(u\'valid value\',\n-                          self.portal.doc1.test_missing_value_required_field)\n-        self.assertEquals(\n+        self.assertEqual(\n+            u\'valid value\',\n+            self.portal.doc1.test_missing_value_required_field\n+        )\n+        self.assertEqual(\n             (\n                 \'test_missing_value_required_field is a required field.\',\n                 \'Setting it to null is not allowed.\'\n             ),\n-            cm.exception.message[0][\'message\']\n+            cm.exception.args[0][0][\'message\']\n+        )\n+        self.assertEqual(\n+            u\'test_missing_value_required_field\',\n+            cm.exception.args[0][0][\'field\']\n         )\n-        self.assertEquals(u\'test_missing_value_required_field\',\n-                          cm.exception.message[0][\'field\'])\n \n     def test_set_layout(self):\n         current_layout = self.portal.doc1.getLayout()\n         self.assertNotEquals(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n-        self.assertEquals(\'my_new_layout\', self.portal.doc1.getLayout())\n+        self.assertEqual(\'my_new_layout\', self.portal.doc1.getLayout())\n \n \n class TestDXContentSerializerDeserializer(unittest.TestCase):\n@@ -229,14 +251,14 @@ def serialize(self, field):\n         return serializer()[field]\n \n     def test_serialize2deserialize_relation(self):\n-        value = unicode(self.portal.doc2.UID())\n+        value = six.text_type(self.portal.doc2.UID())\n         self.deserialize(\'test_relationchoice_field\', value)\n \n         serialization_value = self.serialize(\'test_relationchoice_field\')\n \n         self.deserialize(\'test_relationchoice_field\', serialization_value)\n \n-        self.assertEquals(\n+        self.assertEqual(\n             serialization_value[\'@id\'],\n             self.portal.doc1.test_relationchoice_field.to_object.absolute_url()\n         )\ndiff --git a/src/plone/restapi/tests/test_dxcontent_serializer.py b/src/plone/restapi/tests/test_dxcontent_serializer.py\nindex 3c47496b..7f393977 100644\n--- a/src/plone/restapi/tests/test_dxcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_serializer.py\n@@ -156,7 +156,7 @@ def test_get_layout(self):\n         current_layout = self.portal.doc1.getLayout()\n         obj = self.serialize()\n         self.assertIn(\'layout\', obj)\n-        self.assertEquals(current_layout, obj[\'layout\'])\n+        self.assertEqual(current_layout, obj[\'layout\'])\n \n     def test_serializer_includes_expansion(self):\n         provideAdapter(\n@@ -178,7 +178,7 @@ def test_serializer_includes_expansion(self):\n     def test_get_is_folderish(self):\n         obj = self.serialize()\n         self.assertIn(\'is_folderish\', obj)\n-        self.assertEquals(False, obj[\'is_folderish\'])\n+        self.assertEqual(False, obj[\'is_folderish\'])\n \n     def test_get_is_folderish_in_folder(self):\n         self.portal.invokeFactory(\'Folder\', id=u\'folder\')\n@@ -186,7 +186,7 @@ def test_get_is_folderish_in_folder(self):\n                                      ISerializeToJson)\n         obj = serializer()\n         self.assertIn(\'is_folderish\', obj)\n-        self.assertEquals(True, obj[\'is_folderish\'])\n+        self.assertEqual(True, obj[\'is_folderish\'])\n \n     def test_richtext_serializer_context(self):\n         """This checks if the context is passed in correctly.\n@@ -208,7 +208,7 @@ def __call__(self, value, mime_type):\n         with AdapterCM(RichtextTransform, (Interface, ), ITransformer):\n             obj = self.serialize()\n \n-        self.assertEquals(\n+        self.assertEqual(\n             obj[\'test_richtext_field\'][\'data\'],\n             self.portal.doc1.portal_type\n         )\n@@ -221,7 +221,7 @@ def test_allow_discussion_by_default(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_obj_instance_allows_but_not_global_enabled(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -231,7 +231,7 @@ def test_allow_discussion_obj_instance_allows_but_not_global_enabled(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_fti_allows_not_global_enabled(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -243,7 +243,7 @@ def test_allow_discussion_fti_allows_not_global_enabled(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_allows_global_enabled_but_nothing_else(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -255,7 +255,7 @@ def test_allow_discussion_allows_global_enabled_but_nothing_else(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_obj_instance_allows_global_enabled(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -268,7 +268,7 @@ def test_allow_discussion_obj_instance_allows_global_enabled(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(True, obj[\'allow_discussion\'])\n+        self.assertEqual(True, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_obj_instance_not_set_global_enabled(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -280,7 +280,7 @@ def test_allow_discussion_obj_instance_not_set_global_enabled(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_fti_allows_allows_global_enabled(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -295,7 +295,7 @@ def test_allow_discussion_fti_allows_allows_global_enabled(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(True, obj[\'allow_discussion\'])\n+        self.assertEqual(True, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_allowed(self): # noqa\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -312,7 +312,7 @@ def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_allow\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_set(self): # noqa\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -328,7 +328,7 @@ def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_set(s\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(True, obj[\'allow_discussion\'])\n+        self.assertEqual(True, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_fti_disallows_allows_global_enabled_but_instance_allowed(self): # noqa\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -345,7 +345,7 @@ def test_allow_discussion_fti_disallows_allows_global_enabled_but_instance_allow\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(True, obj[\'allow_discussion\'])\n+        self.assertEqual(True, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_global_enabled_but_instance_has_no_discussion_behavior(self): # noqa\n         registry = queryUtility(IRegistry)\n@@ -354,4 +354,4 @@ def test_allow_discussion_global_enabled_but_instance_has_no_discussion_behavior\n \n         obj = self.serialize()\n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex d3528ba6..91e3fb3a 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -19,6 +19,7 @@\n from zope.schema.interfaces import ValidationError\n \n import unittest\n+import six\n \n \n class RequiredField(object):\n@@ -55,12 +56,12 @@ def deserialize(self, fieldname, value):\n                                        IFieldDeserializer)\n         return deserializer(value)\n \n-    def test_ascii_deserialization_returns_bytestring(self):\n+    def test_ascii_deserialization_returns_native_string(self):\n         value = self.deserialize(\'test_ascii_field\', u\'Foo\')\n         self.assertTrue(isinstance(value, str), \'Not a <str>\')\n         self.assertEqual(\'Foo\', value)\n \n-    def test_asciiline_deserialization_returns_bytestring(self):\n+    def test_asciiline_deserialization_returns_native_string(self):\n         value = self.deserialize(\'test_asciiline_field\', u\'Foo\')\n         self.assertTrue(isinstance(value, str), \'Not a <str>\')\n         self.assertEqual(\'Foo\', value)\n@@ -77,17 +78,17 @@ def test_bool_deserialization_returns_false(self):\n \n     def test_bytes_deserialization_returns_bytestring(self):\n         value = self.deserialize(\'test_bytes_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, str), \'Not a <str>\')\n-        self.assertEqual(\'Foo\', value)\n+        self.assertTrue(isinstance(value, bytes), \'Not a <bytes>\')\n+        self.assertEqual(b\'Foo\', value)\n \n     def test_bytesline_deserialization_returns_bytestring(self):\n         value = self.deserialize(\'test_bytesline_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, str), \'Not a <str>\')\n-        self.assertEqual(\'Foo\', value)\n+        self.assertTrue(isinstance(value, bytes), \'Not a <bytes>\')\n+        self.assertEqual(b\'Foo\', value)\n \n     def test_choice_deserialization_returns_vocabulary_item(self):\n         value = self.deserialize(\'test_choice_field\', u\'bar\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'bar\', value)\n \n     def test_date_deserialization_returns_date(self):\n@@ -128,7 +129,7 @@ def test_datetime_with_tz_deserialization_handles_dst(self):\n         value = self.deserialize(\'test_datetime_tz_field\',\n                                  u\'2015-05-20T10:39:54.361+02\')\n         self.assertEqual(timezone("Europe/Zurich").localize(\n-            datetime(2015, 05, 20, 10, 39, 54, 361000)), value)\n+            datetime(2015, 5, 20, 10, 39, 54, 361000)), value)\n \n     def test_datetime_deserialization_none(self):\n         # Make sure we don\'t construct a datetime out of nothing\n@@ -179,12 +180,12 @@ def test_set_deserialization_returns_set(self):\n \n     def test_text_deserialization_returns_unicode(self):\n         value = self.deserialize(\'test_text_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'Foo\', value)\n \n     def test_textline_deserialization_returns_unicode(self):\n         value = self.deserialize(\'test_textline_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'Foo\', value)\n \n     def test_time_deserialization_returns_time(self):\n@@ -252,7 +253,7 @@ def test_namedfield_deserialization_decodes_value(self):\n             u\'data\': u\'U3BhbSBhbmQgZWdncyE=\',\n             u\'encoding\': u\'base64\',\n         })\n-        self.assertEquals(\'Spam and eggs!\', value.data)\n+        self.assertEqual(b\'Spam and eggs!\', value.data)\n \n     def test_namedfield_deserialization_sets_content_type(self):\n         value = self.deserialize(\'test_namedfile_field\', {\n@@ -274,7 +275,7 @@ def test_namedfile_deserialization_returns_namedfile(self):\n         })\n         self.assertTrue(isinstance(value, namedfile.NamedFile),\n                         \'Not a <NamedFile>\')\n-        self.assertEqual(\'Spam and eggs!\', value.data)\n+        self.assertEqual(b\'Spam and eggs!\', value.data)\n \n     def test_namedimage_deserialization_returns_namedimage(self):\n         value = self.deserialize(\'test_namedimage_field\', {\n@@ -284,7 +285,7 @@ def test_namedimage_deserialization_returns_namedimage(self):\n         })\n         self.assertTrue(isinstance(value, namedfile.NamedImage),\n                         \'Not a <NamedImage>\')\n-        self.assertTrue(value.data.startswith(\'GIF89a\'))\n+        self.assertTrue(value.data.startswith(b\'GIF89a\'))\n \n     def test_namedblobfile_deserialization_returns_namedblobfile(self):\n         value = self.deserialize(\'test_namedblobfile_field\', {\n@@ -292,7 +293,7 @@ def test_namedblobfile_deserialization_returns_namedblobfile(self):\n         })\n         self.assertTrue(isinstance(value, namedfile.NamedBlobFile),\n                         \'Not a <NamedBlobFile>\')\n-        self.assertEqual(\'Spam and eggs!\', value.data)\n+        self.assertEqual(b\'Spam and eggs!\', value.data)\n \n     def test_namedblobimage_deserialization_returns_namedblobimage(self):\n         value = self.deserialize(\'test_namedblobimage_field\', {\n@@ -302,7 +303,7 @@ def test_namedblobimage_deserialization_returns_namedblobimage(self):\n         })\n         self.assertTrue(isinstance(value, namedfile.NamedBlobImage),\n                         \'Not a <NamedBlobImage>\')\n-        self.assertTrue(value.data.startswith(\'GIF89a\'))\n+        self.assertTrue(value.data.startswith(b\'GIF89a\'))\n \n     def test_namedblobimage_deserialization_fed_with_null_removes_image(self):\n         # null in json translates to None in python.\n@@ -332,14 +333,14 @@ def test_relationchoice_deserialization_from_uid_returns_document(self):\n         doc2 = self.portal[self.portal.invokeFactory(\n             \'DXTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n         value = self.deserialize(\'test_relationchoice_field\',\n-                                 unicode(doc2.UID()))\n+                                 six.text_type(doc2.UID()))\n         self.assertEqual(doc2, value)\n \n     def test_relationchoice_deserialization_from_url_returns_document(self):\n         doc2 = self.portal[self.portal.invokeFactory(\n             \'DXTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n         value = self.deserialize(\'test_relationchoice_field\',\n-                                 unicode(doc2.absolute_url()))\n+                                 six.text_type(doc2.absolute_url()))\n         self.assertEqual(doc2, value)\n \n     def test_relationchoice_deserialization_from_path_returns_document(self):\n@@ -353,8 +354,9 @@ def test_relationlist_deserialization_returns_list_of_documents(self):\n             \'DXTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n         doc3 = self.portal[self.portal.invokeFactory(\n             \'DXTestDocument\', id=\'doc3\', title=\'Referenceable Document\')]\n-        value = self.deserialize(\'test_relationlist_field\',\n-                                 [unicode(doc2.UID()), unicode(doc3.UID())])\n+        value = self.deserialize(\n+            \'test_relationlist_field\',\n+            [six.text_type(doc2.UID()), six.text_type(doc3.UID())])\n         self.assertTrue(isinstance(value, list), \'Not a <list>\')\n         self.assertEqual(doc2, value[0])\n         self.assertEqual(doc3, value[1])\n@@ -368,7 +370,7 @@ def test_datetime_deserializer_handles_invalid_value(self):\n             self.deserialize(\'test_datetime_field\',\n                              u\'2015-15-15T10:39:54.361Z\')\n         self.assertEqual(u\'Invalid date: 2015-15-15T10:39:54.361Z\',\n-                         cm.exception.message)\n+                         str(cm.exception))\n \n     def test_datetime_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError):\n@@ -377,13 +379,13 @@ def test_datetime_deserializer_validates_value(self):\n \n     def test_collection_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n-            self.deserialize(\'test_list_value_type_field\', [1, \'2\', 3])\n+            self.deserialize(\'test_list_value_type_field\', [1, b\'2\', 3])\n \n         # This validation error is actually produced by the\n         # DefaultFieldDeserializer that the CollectionFieldDeserializer will\n         # delegate to for deserializing collection items.\n         self.assertEqual(u\'Object is of wrong type.\', cm.exception.doc())\n-        self.assertEqual((\'2\', (int, long), \'\'), cm.exception.args)\n+        self.assertEqual((b\'2\', six.integer_types, \'\'), cm.exception.args)\n \n     def test_dict_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n@@ -392,15 +394,23 @@ def test_dict_deserializer_validates_value(self):\n         # This validation error is actually produced by the\n         # DefaultFieldDeserializer that the DictFieldSerializer will delegate\n         # to for deserializing keys and values.\n-        self.assertEqual(u\'Object is of wrong type.\', cm.exception.doc())\n-        self.assertEqual((\'k\', (int, long), \'\'), cm.exception.args)\n+        # We check for two sets of exception details\n+        # because zope.schema changed its exception...\n+        self.assertIn(cm.exception.doc(), (\n+            u\'Object is of wrong type.\',\n+            u\'Invalid int literal.\',\n+        ))\n+        self.assertIn(cm.exception.args, (\n+            (\'k\', six.integer_types, \'\'),\n+            ("invalid literal for int() with base 10: \'k\'",),\n+        ))\n \n     def test_time_deserializer_handles_invalid_value(self):\n         with self.assertRaises(ValueError) as cm:\n             self.deserialize(\'test_time_field\',\n                              u\'midnight\')\n         self.assertEqual(u\'Invalid time: midnight\',\n-                         cm.exception.message)\n+                         str(cm.exception))\n \n     def test_time_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n@@ -412,9 +422,9 @@ def test_timedelta_deserializer_handles_invalid_value(self):\n         with self.assertRaises(ValueError) as cm:\n             self.deserialize(\'test_timedelta_field\',\n                              u\'2h\')\n-        self.assertEqual(\n-            u\'unsupported type for timedelta seconds component: unicode\',\n-            cm.exception.message)\n+        self.assertIn(\n+            u\'unsupported type for timedelta seconds component:\',\n+            str(cm.exception))\n \n     def test_timedelta_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n@@ -462,7 +472,7 @@ def test_deserialize_with_context_bound_vocabulary(self):\n \n     def test_textline_deserializer_strips_value(self):\n         value = self.deserialize(\'test_textline_field\', u\'  aa  \')\n-        self.assertEquals(value, \'aa\')\n+        self.assertEqual(value, \'aa\')\n \n     def test_default_field_deserializer_validates_value(self):\n \n@@ -478,6 +488,6 @@ def constraint(self, value):\n                                        IFieldDeserializer)\n \n         with self.assertRaises(ConstraintNotSatisfied):\n-            deserializer("not an int")\n+            deserializer(b"not an int")\n \n         self.assertEqual(42, deserializer(42))\ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex c86dc8e2..99fc6f32 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -21,6 +21,7 @@\n from zope.interface.verify import verifyClass\n \n import os\n+import six\n \n if PLONE_VERSION.base_version >= \'5.1\':\n     GIF_SCALE_FORMAT = \'png\'\n@@ -60,12 +61,12 @@ def serialize(self, fieldname, value):\n \n     def test_ascii_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_ascii_field\', \'foo\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'foo\', value)\n \n     def test_asciiline_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_asciiline_field\', \'foo\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'foo\', value)\n \n     def test_bool_field_serialization_returns_true(self):\n@@ -79,35 +80,35 @@ def test_bool_field_serialization_returns_false(self):\n         self.assertEqual(False, value)\n \n     def test_bytes_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_bytes_field\', \'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        value = self.serialize(\'test_bytes_field\', b\'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'\\xe4\\xf6\\xfc\', value)\n \n     def test_bytesline_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_bytesline_field\',\n-                               \'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+                               b\'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'\\xe4\\xf6\\xfc\', value)\n \n     def test_choice_field_serialization_returns_vocabulary_item(self):\n         value = self.serialize(\'test_choice_field\', u\'foo\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'foo\', value)\n \n     def test_date_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_date_field\', date(2015, 7, 15))\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'2015-07-15\', value)\n \n     def test_datetime_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_datetime_field\',\n                                datetime(2015, 6, 20, 13, 22, 4))\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'2015-06-20T13:22:04\', value)\n \n     def test_decimal_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_decimal_field\', \'1.1\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'1.1\', value)\n \n     def test_dict_field_serialization_returns_dict(self):\n@@ -143,17 +144,17 @@ def test_set_field_serialization_returns_list(self):\n \n     def test_text_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_text_field\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'K\xc3\xa4fer\', value)\n \n     def test_textline_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_textline_field\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'K\xc3\xa4fer\', value)\n \n     def test_time_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_time_field\', time(14, 15, 33))\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'14:15:33\', value)\n \n     def test_timedelta_field_serialization_returns_float(self):\n@@ -189,7 +190,8 @@ def test_namedfile_field_serialization_returns_dict(self):\n \n     def test_namedimage_field_serialization_returns_dict(self):\n         image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        image_data = open(image_file, \'rb\').read()\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         fn = \'test_namedimage_field\'\n         with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n             value = self.serialize(\n@@ -266,7 +268,8 @@ def test_namedblobfile_field_serialization_returns_dict(self):\n \n     def test_namedblobimage_field_serialization_returns_dict(self):\n         image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        image_data = open(image_file, \'rb\').read()\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         fn = \'test_namedblobimage_field\'\n         with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n             value = self.serialize(\ndiff --git a/src/plone/restapi/tests/test_error_handling.py b/src/plone/restapi/tests/test_error_handling.py\nindex f3772895..9cad014d 100644\n--- a/src/plone/restapi/tests/test_error_handling.py\n+++ b/src/plone/restapi/tests/test_error_handling.py\n@@ -18,7 +18,7 @@\n class InternalServerErrorView(BrowserView):\n \n     def __call__(self):  # pragma: no cover\n-        from urllib2 import HTTPError\n+        from six.moves.urllib.error import HTTPError\n         raise HTTPError(\n             \'http://nohost/plone/internal_server_error\',\n             500,\ndiff --git a/src/plone/restapi/tests/test_expansion.py b/src/plone/restapi/tests/test_expansion.py\nindex 3806210f..8bed02c9 100644\n--- a/src/plone/restapi/tests/test_expansion.py\n+++ b/src/plone/restapi/tests/test_expansion.py\n@@ -126,7 +126,7 @@ def test_actions_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'actions\',\n-            response.json().get(\'@components\').keys()\n+            list(response.json().get(\'@components\'))\n         )\n \n     def test_actions_expanded(self):\n@@ -160,7 +160,7 @@ def test_navigation_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'navigation\',\n-            response.json().get(\'@components\').keys()\n+            list(response.json().get(\'@components\'))\n         )\n \n     def test_navigation_expanded(self):\n@@ -239,7 +239,7 @@ def test_breadcrumbs_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'breadcrumbs\',\n-            response.json().get(\'@components\').keys()\n+            list(response.json().get(\'@components\'))\n         )\n \n     def test_breadcrumbs_expanded(self):\n@@ -266,7 +266,7 @@ def test_workflow_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'workflow\',\n-            response.json().get(\'@components\').keys()\n+            list(response.json().get(\'@components\'))\n         )\n \n     def test_workflow_expanded(self):\n@@ -323,9 +323,9 @@ def setUp(self):\n         alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=\'Test document\')\n+            self.portal[\'en\'], \'Document\', title=u\'Test document\')\n         self.es_content = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=\'Test document\')\n+            self.portal[\'es\'], \'Document\', title=u\'Test document\')\n         ITranslationManager(self.en_content).register_translation(\n             \'es\', self.es_content)\n \n@@ -337,7 +337,7 @@ def test_translations_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'translations\',\n-            response.json().get(\'@components\').keys()\n+            list(response.json().get(\'@components\'))\n         )\n \n     def test_translations_expanded(self):\ndiff --git a/src/plone/restapi/tests/test_pas.py b/src/plone/restapi/tests/test_pas.py\nindex ca5482d3..4a30e18d 100644\n--- a/src/plone/restapi/tests/test_pas.py\n+++ b/src/plone/restapi/tests/test_pas.py\n@@ -72,13 +72,13 @@ def test_authenticate_credentials_with_valid_token(self):\n             (\'admin\', \'admin\'),\n             self.plugin.authenticateCredentials(creds))\n \n-    def test_authenticate_credentials_returns_byte_string(self):\n+    def test_authenticate_credentials_returns_native_string(self):\n         creds = {}\n         creds[\'extractor\'] = \'jwt_auth\'\n         creds[\'token\'] = self.plugin.create_token(\'admin\')\n         self.assertIsInstance(\n             self.plugin.authenticateCredentials(creds)[0],\n-            str\n+            str,\n         )\n \n     def test_decode_token_after_key_rotation(self):\ndiff --git a/src/plone/restapi/tests/test_registry.py b/src/plone/restapi/tests/test_registry.py\nindex e421b615..bee9973c 100644\n--- a/src/plone/restapi/tests/test_registry.py\n+++ b/src/plone/restapi/tests/test_registry.py\n@@ -12,6 +12,7 @@\n \n import transaction\n import unittest\n+from six.moves import range\n \n \n class TestRegistry(unittest.TestCase):\ndiff --git a/src/plone/restapi/tests/test_registry_serializer.py b/src/plone/restapi/tests/test_registry_serializer.py\nindex ea9f2856..e6774412 100644\n--- a/src/plone/restapi/tests/test_registry_serializer.py\n+++ b/src/plone/restapi/tests/test_registry_serializer.py\n@@ -1,19 +1,23 @@\n # -*- coding: utf-8 -*-\n-import unittest\n-\n from plone.registry import Registry\n from plone.registry import field\n from plone.registry.record import Record\n+from plone.restapi import HAS_AT\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from zope.component import getMultiAdapter\n \n+import unittest\n+from six.moves import range\n+\n \n class TestRegistrySerializer(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n \n@@ -26,8 +30,8 @@ def test_empty(self):\n         registry = Registry()\n         obj = self.serialize(registry)\n         expected = [\'@id\', \'items_total\', \'items\']\n-        self.assertEqual(set(obj.keys()), set(expected))\n-        self.assertNotIn(\'batching\', obj.keys())\n+        self.assertEqual(set(obj), set(expected))\n+        self.assertNotIn(\'batching\', list(obj))\n \n     def test_batched(self):\n         registry = Registry()\n@@ -38,8 +42,8 @@ def test_batched(self):\n \n         obj = self.serialize(registry)\n         expected = [\'@id\', \'items_total\', \'items\', \'batching\']\n-        self.assertEqual(set(expected), set(obj.keys()))\n-        self.assertEqual(obj[\'items_total\'], len(range(1, 100)))\n+        self.assertEqual(set(expected), set(obj))\n+        self.assertEqual(obj[\'items_total\'], len(list(range(1, 100))))\n \n     def test_structure(self):\n         registry = Registry()\n@@ -49,7 +53,7 @@ def test_structure(self):\n \n         obj = self.serialize(registry)\n         item = obj[\'items\'][0]\n-        self.assertEqual(set(item.keys()), set([\'name\', \'value\', \'schema\']))\n-        self.assertEqual(set(item[\'schema\'].keys()), set([\'properties\']))\n+        self.assertEqual(set(item), set([\'name\', \'value\', \'schema\']))\n+        self.assertEqual(set(item[\'schema\']), set([\'properties\']))\n         self.assertEqual(item[\'name\'], \'foo.bar\')\n         self.assertEqual(item[\'value\'], u"Lorem Ipsum")\ndiff --git a/src/plone/restapi/tests/test_roles.py b/src/plone/restapi/tests/test_roles.py\nindex 26cb4b42..05291d40 100644\n--- a/src/plone/restapi/tests/test_roles.py\n+++ b/src/plone/restapi/tests/test_roles.py\n@@ -22,7 +22,7 @@ def setUp(self):\n     def test_roles_endpoint_lists_roles(self):\n         response = self.api_session.get(\'/@roles\')\n \n-        self.assertItemsEqual([\n+        expected = (\n             {u\'@id\': self.portal_url + u\'/@roles/Contributor\',\n              u\'@type\': u\'role\',\n              u\'id\': u\'Contributor\',\n@@ -50,19 +50,29 @@ def test_roles_endpoint_lists_roles(self):\n             {u\'@id\': self.portal_url + u\'/@roles/Manager\',\n              u\'@type\': u\'role\',\n              u\'id\': u\'Manager\',\n-             u\'title\': u\'Manager\'}],\n-            response.json())\n+             u\'title\': u\'Manager\'},\n+        )\n+        result = response.json()\n+        self.assertEqual(len(expected), len(result))\n+        for item in result:\n+            self.assertIn(item, expected)\n \n     def test_roles_endpoint_translates_role_titles(self):\n         self.api_session.headers.update({\'Accept-Language\': \'de\'})\n         response = self.api_session.get(\'/@roles\')\n-\n-        self.assertItemsEqual([\n+        # One of the roles has changed translation in German.\n+        # Reviewer used to be \'Ver\\xf6ffentlichen\', but is now simply Reviewer.\n+        titles = {item[\'title\'] for item in response.json()}\n+        options = {u\'Ver\\xf6ffentlichen\', u\'Reviewer\'}\n+        # One of the options must match:\n+        self.assertTrue(titles.intersection(options))\n+        # Discard them:\n+        titles = titles.difference(options)\n+        self.assertEqual({\n             u\'Hinzuf\\xfcgen\',\n             u\'Bearbeiten\',\n             u\'Benutzer\',\n             u\'Ansehen\',\n-            u\'Ver\\xf6ffentlichen\',\n             u\'Website-Administrator\',\n-            u\'Verwalten\'],\n-            [item[\'title\'] for item in response.json()])\n+            u\'Verwalten\'},\n+            titles)\ndiff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex ca9619c6..942f9f8a 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -8,6 +8,7 @@\n from plone.app.textfield.value import RichTextValue\n from plone.dexterity.utils import createContentInContainer\n from plone.registry.interfaces import IRegistry\n+from plone.restapi import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n@@ -16,6 +17,7 @@\n from Products.CMFCore.utils import getToolByName\n from zope.component import getUtility\n \n+import six\n import transaction\n import unittest\n \n@@ -224,6 +226,7 @@ def test_full_metadata_retrieval(self):\n         query = {\'SearchableText\': \'lorem\', \'metadata_fields\': \'_all\'}\n         response = self.api_session.get(\'/@search\', params=query)\n \n+        first_item = response.json()[\'items\'][0]\n         self.assertDictContainsSubset(\n             {u\'@id\': self.portal_url + u\'/folder/doc\',\n              u\'Creator\': u\'test_user_1_\',\n@@ -243,7 +246,6 @@ def test_full_metadata_retrieval(self):\n              u\'exclude_from_nav\': False,\n              u\'expires\': u\'1999-01-01T00:00:00+00:00\',\n              u\'getId\': u\'doc\',\n-             u\'getObjSize\': u\'0 KB\',\n              u\'getPath\': u\'/plone/folder/doc\',\n              u\'getRemoteUrl\': None,\n              u\'getURL\': self.portal_url + u\'/folder/doc\',\n@@ -260,7 +262,10 @@ def test_full_metadata_retrieval(self):\n              u\'sync_uid\': None,\n              u\'title\': u\'Lorem Ipsum\',\n              u\'total_comments\': 0},\n-            response.json()[\'items\'][0])\n+            first_item)\n+        # This value changed in Plone 5.2\n+        # (Dexterity gained support for getObjSize)\n+        self.assertIn(first_item[u\'getObjSize\'], (u\'0 KB\', u\'1 KB\'))\n \n     def test_full_objects_retrieval(self):\n         query = {\'SearchableText\': \'lorem\',\n@@ -292,8 +297,8 @@ def test_full_objects_retrieval_discussion(self):\n                  \'fullobjects\': True}\n         response = self.api_session.get(\'/@search\', params=query)\n \n-        self.assertEquals(response.status_code, 200)\n-        self.assertEquals(len(response.json()[\'items\']), 1)\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(len(response.json()[\'items\']), 1)\n \n     def test_full_objects_retrieval_collections(self):\n         self.collection = createContentInContainer(\n@@ -306,8 +311,8 @@ def test_full_objects_retrieval_collections(self):\n                  \'fullobjects\': True}\n         response = self.api_session.get(\'/@search\', params=query)\n \n-        self.assertEquals(response.status_code, 200)\n-        self.assertEquals(len(response.json()[\'items\']), 1)\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(len(response.json()[\'items\']), 1)\n \n     # ZCTextIndex\n \n@@ -344,7 +349,7 @@ def test_keyword_index_str_query_or(self):\n         query = {\'test_list_field\': [\'Keyword2\', \'Keyword3\']}\n         response = self.api_session.get(\'/@search\', params=query)\n \n-        self.assertItemsEqual(\n+        self.assertEqual(\n             [u\'/plone/folder/doc\',\n              u\'/plone/folder/other-document\'],\n             result_paths(response.json())\n@@ -362,6 +367,7 @@ def test_keyword_index_str_query_and(self):\n             result_paths(response.json())\n         )\n \n+    @unittest.skipIf(six.PY3, "Python 3 can\'t sort mixed types")\n     def test_keyword_index_int_query(self):\n         self.doc.test_list_field = [42, 23]\n         self.doc.reindexObject()\n@@ -607,6 +613,8 @@ class TestSearchATFunctional(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n         self.portal_url = self.portal.absolute_url()\ndiff --git a/src/plone/restapi/tests/test_search_utils.py b/src/plone/restapi/tests/test_search_utils.py\nindex bf1e3efb..65a92378 100644\n--- a/src/plone/restapi/tests/test_search_utils.py\n+++ b/src/plone/restapi/tests/test_search_utils.py\n@@ -22,7 +22,7 @@ def test_unflattens_dotted_dict(self):\n         )\n \n     def test_works_on_empty_dict(self):\n-        self.assertEquals({}, unflatten_dotted_dict({}))\n+        self.assertEqual({}, unflatten_dotted_dict({}))\n \n     def test_works_with_list_values(self):\n         dct = {\ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex 43c14ab7..e4c60772 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -66,7 +66,7 @@ def test_serialize_can_read_as_manager(self):\n         setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Manager\'])\n         self.assertIn(\n             \'Test Read Permission\',\n-            self.serialize(self.portal.dxdoc).values()\n+            list(self.serialize(self.portal.dxdoc).values())\n         )\n \n     def test_serialize_cannot_read_as_member(self):\n@@ -75,7 +75,7 @@ def test_serialize_cannot_read_as_member(self):\n         setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n         self.assertNotIn(\n             \'Test Read Permission\',\n-            self.serialize(self.portal.dxdoc).values()\n+            list(self.serialize(self.portal.dxdoc).values())\n         )\n \n     def test_serialize_returns_desciption(self):\n@@ -265,8 +265,10 @@ def test_serialize_empty_file_returns_none(self):\n     def test_serialize_image(self):\n         self.portal.invokeFactory(\'Image\', id=\'image1\', title=\'Image 1\')\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         self.portal.image1.image = NamedBlobImage(\n-            data=open(image_file, \'r\').read(),\n+            data=image_data,\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\ndiff --git a/src/plone/restapi/tests/test_serializer_catalog.py b/src/plone/restapi/tests/test_serializer_catalog.py\nindex a66a0a1b..a873dd8a 100644\n--- a/src/plone/restapi/tests/test_serializer_catalog.py\n+++ b/src/plone/restapi/tests/test_serializer_catalog.py\n@@ -2,6 +2,7 @@\n from DateTime import DateTime\n from plone import api\n from plone.dexterity.utils import createContentInContainer\n+from plone.restapi import HAS_AT\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n@@ -101,7 +102,7 @@ def test_brain_summary_representation(self):\n         brain = lazy_map[0]\n         result = getMultiAdapter(\n             (brain, self.request), ISerializeToJsonSummary)()\n-        self.assertEquals(\n+        self.assertEqual(\n             {\'@id\': \'http://nohost/plone/my-folder/my-document\',\n              \'@type\': \'Document\',\n              \'title\': \'My Document\',\n@@ -177,6 +178,8 @@ class TestCatalogATSerializers(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n         self.request = self.portal.REQUEST\ndiff --git a/src/plone/restapi/tests/test_serializer_converters.py b/src/plone/restapi/tests/test_serializer_converters.py\nindex 3b643c95..289fee0c 100644\n--- a/src/plone/restapi/tests/test_serializer_converters.py\n+++ b/src/plone/restapi/tests/test_serializer_converters.py\n@@ -15,18 +15,19 @@\n \n import json\n import Missing\n+import six\n \n \n class TestJsonCompatibleConverters(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def test_None(self):\n-        self.assertEquals(None, json_compatible(None))\n-        self.assertEquals(\'null\', json.dumps(json_compatible(None)))\n+        self.assertEqual(None, json_compatible(None))\n+        self.assertEqual(\'null\', json.dumps(json_compatible(None)))\n \n     def test_error_when_type_unknown(self):\n         err_regex = r\'^No converter for making <object object at [^>]*>\' + \\\n-                    r\' \\(<type \\\'object\\\'>\\) JSON compatible.$\'\n+                    r\' \\(<(class|type) \\\'object\\\'>\\) JSON compatible.$\'\n \n         with self.assertRaisesRegexp(TypeError, err_regex):\n             json_compatible(object())\n@@ -35,143 +36,175 @@ def test_error_when_type_unknown(self):\n             json_compatible({\'foo\': [object()]})\n \n     def test_True(self):\n-        self.assertEquals(True, json_compatible(True))\n-        self.assertEquals(\'true\', json.dumps(json_compatible(True)))\n+        self.assertEqual(True, json_compatible(True))\n+        self.assertEqual(\'true\', json.dumps(json_compatible(True)))\n \n     def test_False(self):\n-        self.assertEquals(False, json_compatible(False))\n-        self.assertEquals(\'false\', json.dumps(json_compatible(False)))\n+        self.assertEqual(False, json_compatible(False))\n+        self.assertEqual(\'false\', json.dumps(json_compatible(False)))\n \n     def test_unicode(self):\n-        self.assertEquals(u\'foo\', json_compatible(u\'foo\'))\n-        self.assertIsInstance(json_compatible(u\'foo\'), unicode)\n-        self.assertEquals(\'"foo"\', json.dumps(json_compatible(\'foo\')))\n+        self.assertEqual(u\'foo\', json_compatible(u\'foo\'))\n+        self.assertIsInstance(json_compatible(u\'foo\'), six.text_type)\n+        self.assertEqual(\'"foo"\', json.dumps(json_compatible(\'foo\')))\n \n     def test_unicode_with_umlaut(self):\n-        self.assertEquals(u\'Hall\\xf6chen\', json_compatible(u\'Hall\\xf6chen\'))\n-        self.assertEquals(\'"Hall\\\\u00f6chen"\',\n-                          json.dumps(json_compatible(u\'Hall\\xf6chen\')))\n+        self.assertEqual(u\'Hall\\xf6chen\', json_compatible(u\'Hall\\xf6chen\'))\n+        self.assertEqual(\n+            \'"Hall\\\\u00f6chen"\',\n+            json.dumps(json_compatible(u\'Hall\\xf6chen\'))\n+        )\n \n     def test_string_is_converted_to_unicode(self):\n         # Standard library JSON works with unicode.\n-        self.assertEquals(u\'foo\', json_compatible(\'foo\'))\n-        self.assertIsInstance(json_compatible(\'foo\'), unicode)\n-        self.assertEquals(\'"foo"\', json.dumps(json_compatible(\'foo\')))\n+        self.assertEqual(u\'foo\', json_compatible(\'foo\'))\n+        self.assertIsInstance(json_compatible(\'foo\'), six.text_type)\n+        self.assertEqual(\'"foo"\', json.dumps(json_compatible(\'foo\')))\n \n     def test_string_with_umlaut(self):\n         # Standard library JSON works with unicode.\n-        self.assertEquals(u\'Hall\\xf6chen\', json_compatible(\'Hall\xc3\xb6chen\'))\n-        self.assertEquals(\'"Hall\\\\u00f6chen"\',\n-                          json.dumps(json_compatible(\'Hall\xc3\xb6chen\')))\n+        self.assertEqual(u\'Hall\\xf6chen\', json_compatible(\'Hall\xc3\xb6chen\'))\n+        self.assertEqual(\n+            \'"Hall\\\\u00f6chen"\',\n+            json.dumps(json_compatible(\'Hall\xc3\xb6chen\'))\n+        )\n \n     def test_int(self):\n-        self.assertEquals(42, json_compatible(42))\n+        self.assertEqual(42, json_compatible(42))\n         self.assertIsInstance(json_compatible(42), int)\n-        self.assertEquals(\'42\', json.dumps(json_compatible(42)))\n+        self.assertEqual(\'42\', json.dumps(json_compatible(42)))\n \n     def test_long(self):\n-        self.assertEquals(10L, json_compatible(10L))\n-        self.assertIsInstance(json_compatible(10L), long)\n-        self.assertEquals(\'10\', json.dumps(json_compatible(10L)))\n+        def _long(val):\n+            if six.PY2:\n+                return int(val)\n+            else:\n+                return int(val)\n+        self.assertEqual(_long(10), json_compatible(_long(10)))\n+        self.assertIsInstance(json_compatible(_long(10)), int)\n+        self.assertEqual(\'10\', json.dumps(json_compatible(_long(10))))\n \n     def test_float(self):\n-        self.assertEquals(1.4, json_compatible(1.4))\n+        self.assertEqual(1.4, json_compatible(1.4))\n         self.assertIsInstance(json_compatible(1.4), float)\n-        self.assertEquals(\'1.4\', json.dumps(json_compatible(1.4)))\n+        self.assertEqual(\'1.4\', json.dumps(json_compatible(1.4)))\n \n     def test_list(self):\n-        self.assertEquals([\'foo\'], json_compatible([\'foo\']))\n-        self.assertEquals(\'["foo"]\', json.dumps(json_compatible([\'foo\'])))\n+        self.assertEqual([\'foo\'], json_compatible([\'foo\']))\n+        self.assertEqual(\'["foo"]\', json.dumps(json_compatible([\'foo\'])))\n         self.assertIsInstance(json_compatible([\'foo\'])[0],\n-                              unicode,\n+                              six.text_type,\n                               \'List values should be converted recursively.\')\n \n     def test_persistent_list(self):\n         value = PersistentList([\'foo\'])\n-        self.assertEquals([\'foo\'], json_compatible(value))\n-        self.assertEquals(\'["foo"]\', json.dumps(json_compatible(value)))\n+        self.assertEqual([\'foo\'], json_compatible(value))\n+        self.assertEqual(\'["foo"]\', json.dumps(json_compatible(value)))\n         self.assertIsInstance(json_compatible(value)[0],\n-                              unicode,\n+                              six.text_type,\n                               \'PersistentList values should be converted\'\n                               \' recursively.\')\n \n     def test_tuple(self):\n         # Tuples are converted to list (json would do that anyway and\n         # it is easier to implement it with map).\n-        self.assertEquals([\'foo\', None], json_compatible((\'foo\', None)))\n-        self.assertEquals(\'["foo"]\', json.dumps(json_compatible((\'foo\', ))))\n+        self.assertEqual([\'foo\', None], json_compatible((\'foo\', None)))\n+        self.assertEqual(\'["foo"]\', json.dumps(json_compatible((\'foo\', ))))\n         self.assertIsInstance(json_compatible((\'foo\',))[0],\n-                              unicode,\n+                              six.text_type,\n                               \'Tuple values should be converted recursively.\')\n \n     def test_frozenset(self):\n-        self.assertEquals([[1, 1], [2, 2]],\n-                          sorted(json_compatible(frozenset([(1, 1), (2, 2)]))))\n+        self.assertEqual(\n+            [[1, 1], [2, 2]],\n+            sorted(json_compatible(frozenset([(1, 1), (2, 2)])))\n+        )\n \n     def test_set(self):\n-        self.assertEquals([[1, 1], [2, 2]],\n-                          sorted(json_compatible(set([(1, 1), (2, 2)]))))\n+        self.assertEqual(\n+            [[1, 1], [2, 2]],\n+            sorted(json_compatible(set([(1, 1), (2, 2)])))\n+        )\n \n     def test_dict(self):\n-        self.assertEquals({u\'foo\': True,\n-                           u\'bar\': None,\n-                           u\'baz\': 3},\n-                          json_compatible({\'foo\': True,\n-                                           \'bar\': None,\n-                                           \'baz\': 3}))\n-        self.assertEquals(\'{"foo": "bar"}\',\n-                          json.dumps(json_compatible({\'foo\': \'bar\'})))\n-        self.assertIsInstance(json_compatible({\'foo\': \'bar\'}.keys()[0]),\n-                              unicode,\n+        self.assertEqual(\n+            {\n+                u\'foo\': True,\n+                u\'bar\': None,\n+                u\'baz\': 3\n+            },\n+            json_compatible(\n+                {\n+                    \'foo\': True,\n+                    \'bar\': None,\n+                    \'baz\': 3\n+                }\n+            )\n+        )\n+        self.assertEqual(\n+            \'{"foo": "bar"}\',\n+            json.dumps(json_compatible({\'foo\': \'bar\'}))\n+        )\n+        self.assertIsInstance(json_compatible(list({\'foo\': \'bar\'})[0]),\n+                              six.text_type,\n                               \'Dict keys should be converted recursively.\')\n-        self.assertIsInstance(json_compatible({\'foo\': \'bar\'}.values()[0]),\n-                              unicode,\n-                              \'Dict values should be converted recursively.\')\n+        self.assertIsInstance(\n+            json_compatible(list({\'foo\': \'bar\'}.values())[0]),\n+            six.text_type,\n+            \'Dict values should be converted recursively.\')\n \n     def test_dict_empty(self):\n-        self.assertEquals({}, json_compatible({}))\n-        self.assertEquals(\'{}\', json.dumps(json_compatible({})))\n+        self.assertEqual({}, json_compatible({}))\n+        self.assertEqual(\'{}\', json.dumps(json_compatible({})))\n \n     def test_persistent_mapping(self):\n         value = PersistentMapping({\'foo\': \'bar\'})\n-        self.assertEquals({u\'foo\': u\'bar\'}, json_compatible(value))\n-        self.assertEquals(\'{"foo": "bar"}\', json.dumps(json_compatible(value)))\n-        self.assertIsInstance(json_compatible(value.keys()[0]),\n-                              unicode,\n+        self.assertEqual({u\'foo\': u\'bar\'}, json_compatible(value))\n+        self.assertEqual(\'{"foo": "bar"}\', json.dumps(json_compatible(value)))\n+        self.assertIsInstance(json_compatible(list(value)[0]),\n+                              six.text_type,\n                               \'Dict keys should be converted recursively.\')\n-        self.assertIsInstance(json_compatible(value.values()[0]),\n-                              unicode,\n+        self.assertIsInstance(json_compatible(list(value.values())[0]),\n+                              six.text_type,\n                               \'Dict values should be converted recursively.\')\n \n     def test_python_datetime(self):\n         value = DateTime(\'2015/11/23 19:45:55.649027 GMT+3\').asdatetime()\n-        self.assertEquals(u\'2015-11-23T16:45:55+00:00\',\n-                          json_compatible(value))\n-        self.assertEquals(\'"2015-11-23T16:45:55+00:00"\',\n-                          json.dumps(json_compatible(value)))\n+        self.assertEqual(\n+            u\'2015-11-23T16:45:55+00:00\',\n+            json_compatible(value)\n+        )\n+        self.assertEqual(\n+            \'"2015-11-23T16:45:55+00:00"\',\n+            json.dumps(json_compatible(value))\n+        )\n \n     def test_zope_DateTime(self):\n         value = DateTime(\'2015/11/23 19:45:55.649027 GMT+3\')\n-        self.assertEquals(u\'2015-11-23T16:45:55+00:00\',\n-                          json_compatible(value))\n-        self.assertEquals(\'"2015-11-23T16:45:55+00:00"\',\n-                          json.dumps(json_compatible(value)))\n+        self.assertEqual(\n+            u\'2015-11-23T16:45:55+00:00\',\n+            json_compatible(value)\n+        )\n+        self.assertEqual(\n+            \'"2015-11-23T16:45:55+00:00"\',\n+            json.dumps(json_compatible(value))\n+        )\n \n     def test_date(self):\n         value = date(2015, 11, 23)\n-        self.assertEquals(u\'2015-11-23\', json_compatible(value))\n-        self.assertEquals(\'"2015-11-23"\', json.dumps(json_compatible(value)))\n+        self.assertEqual(u\'2015-11-23\', json_compatible(value))\n+        self.assertEqual(\'"2015-11-23"\', json.dumps(json_compatible(value)))\n \n     def test_time(self):\n         value = time(19, 45, 55)\n-        self.assertEquals(u\'19:45:55\', json_compatible(value))\n-        self.assertEquals(\'"19:45:55"\', json.dumps(json_compatible(value)))\n+        self.assertEqual(u\'19:45:55\', json_compatible(value))\n+        self.assertEqual(\'"19:45:55"\', json.dumps(json_compatible(value)))\n \n     def test_timedelta(self):\n-        self.assertEquals(9.58, json_compatible(timedelta(seconds=9.58)))\n+        self.assertEqual(9.58, json_compatible(timedelta(seconds=9.58)))\n \n     def test_broken_relation_value(self):\n-        self.assertEquals(None, json_compatible(RelationValue(12345)))\n+        self.assertEqual(None, json_compatible(RelationValue(12345)))\n \n     def test_relation_value(self):\n         portal = self.layer[\'portal\']\n@@ -181,7 +214,7 @@ def test_relation_value(self):\n             description=\'Description\',\n         )]\n         intids = getUtility(IIntIds)\n-        self.assertEquals(\n+        self.assertEqual(\n             {\'@id\': \'http://nohost/plone/doc1\',\n              \'@type\': \'DXTestDocument\',\n              \'title\': \'Document 1\',\n@@ -192,7 +225,7 @@ def test_relation_value(self):\n     def test_i18n_message(self):\n         _ = MessageFactory(\'plone.restapi.tests\')\n         msg = _(u\'message_id\', default=u\'default message\')\n-        self.assertEquals(u\'default message\', json_compatible(msg))\n+        self.assertEqual(u\'default message\', json_compatible(msg))\n \n     def test_missing_value(self):\n-        self.assertEquals(None, json_compatible(Missing.Value))\n+        self.assertEqual(None, json_compatible(Missing.Value))\ndiff --git a/src/plone/restapi/tests/test_serializer_group.py b/src/plone/restapi/tests/test_serializer_group.py\nindex 29361d68..977fb7ca 100644\n--- a/src/plone/restapi/tests/test_serializer_group.py\n+++ b/src/plone/restapi/tests/test_serializer_group.py\n@@ -49,7 +49,7 @@ def test_serialize_returns_id(self):\n         self.assertEqual(\'Plone Team\', group.get(\'title\'))\n         self.assertEqual(\'We are Plone\', group.get(\'description\'))\n         self.assertEqual(\n-            set(group[\'users\'].keys()),\n+            set(group[\'users\']),\n             set([\'@id\', \'items_total\', \'items\'])\n         )\n \ndiff --git a/src/plone/restapi/tests/test_serializer_summary.py b/src/plone/restapi/tests/test_serializer_summary.py\nindex 1ecdb6b0..235a041f 100644\n--- a/src/plone/restapi/tests/test_serializer_summary.py\n+++ b/src/plone/restapi/tests/test_serializer_summary.py\n@@ -3,6 +3,7 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.dexterity.utils import createContentInContainer\n+from plone.restapi import HAS_AT\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n@@ -100,6 +101,8 @@ class TestSummarySerializersATTypes(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\ndiff --git a/src/plone/restapi/tests/test_services.py b/src/plone/restapi/tests/test_services.py\nindex a52ecd9d..7e25c043 100644\n--- a/src/plone/restapi/tests/test_services.py\n+++ b/src/plone/restapi/tests/test_services.py\n@@ -94,8 +94,10 @@ def test_get_news_item(self):\n             title=\'News Item 1\'\n         )\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         self.portal.news1.image = NamedBlobImage(\n-            data=open(image_file, \'r\').read(),\n+            data=image_data,\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\n@@ -217,8 +219,10 @@ def test_get_file(self):  # pragma: no cover\n         pdf_file = os.path.join(\n             os.path.dirname(__file__), u\'file.pdf\'\n         )\n+        with open(pdf_file, \'rb\') as f:\n+            pdf_data = f.read()\n         self.portal.file1.file = NamedBlobFile(\n-            data=open(pdf_file, \'r\').read(),\n+            data=pdf_data,\n             contentType=\'application/pdf\',\n             filename=u\'file.pdf\'\n         )\n@@ -247,8 +251,10 @@ def test_get_image(self):  # pragma: no cover\n         self.portal.img1.title = \'Image\'\n         self.portal.img1.description = u\'An image\'\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         self.portal.img1.image = NamedBlobImage(\n-            data=open(image_file, \'r\').read(),\n+            data=image_data,\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\ndiff --git a/src/plone/restapi/tests/test_services_actions.py b/src/plone/restapi/tests/test_services_actions.py\nindex da2b8b26..9c3332d5 100644\n--- a/src/plone/restapi/tests/test_services_actions.py\n+++ b/src/plone/restapi/tests/test_services_actions.py\n@@ -72,7 +72,7 @@ def test_actions_all_categories(self):\n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n         self.assertEqual([\'category1\', \'category2\', \'category3\'],\n-                         sorted(response.keys()))\n+                         sorted(response))\n \n     def test_actions_selected_categories(self):\n         response = self.api_session.get(\n@@ -81,7 +81,7 @@ def test_actions_selected_categories(self):\n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n         self.assertEqual([\'category1\', \'category2\'],\n-                         sorted(response.keys()))\n+                         sorted(response))\n \n     def test_actions_siteroot(self):\n         response = self.api_session.get(\'/@actions\')\ndiff --git a/src/plone/restapi/tests/test_services_comments.py b/src/plone/restapi/tests/test_services_comments.py\nindex 06b8d13d..67cc15a0 100644\n--- a/src/plone/restapi/tests/test_services_comments.py\n+++ b/src/plone/restapi/tests/test_services_comments.py\n@@ -63,7 +63,7 @@ def test_list_datastructure(self):\n         data = response.json()\n         self.assertEqual(\n             set([\'items_total\', \'items\', \'@id\']),\n-            set(data.keys())\n+            set(data)\n         )\n \n     def test_list_batching(self):\ndiff --git a/src/plone/restapi/tests/test_services_email_notification.py b/src/plone/restapi/tests/test_services_email_notification.py\nindex af96b603..4a75e6b7 100644\n--- a/src/plone/restapi/tests/test_services_email_notification.py\n+++ b/src/plone/restapi/tests/test_services_email_notification.py\n@@ -55,7 +55,7 @@ def test_email_notification(self):\n             })\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 204)\n+        self.assertEqual(response.status_code, 204)\n         self.assertTrue(\'Subject: [No Subject]\' in\n                         self.mailhost.messages[0])\n         self.assertTrue(\'To: info@plone.org\' in\n@@ -76,7 +76,7 @@ def test_email_notification_all_parameters(self):\n             })\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 204)\n+        self.assertEqual(response.status_code, 204)\n         self.assertTrue(\'=?utf-8?q?This_is_the_subject\' in\n                         self.mailhost.messages[0])\n         self.assertTrue(\'To: info@plone.org\' in\ndiff --git a/src/plone/restapi/tests/test_services_email_send.py b/src/plone/restapi/tests/test_services_email_send.py\nindex 29c31090..32efd9e8 100644\n--- a/src/plone/restapi/tests/test_services_email_send.py\n+++ b/src/plone/restapi/tests/test_services_email_send.py\n@@ -56,7 +56,7 @@ def test_email_send(self):\n             })\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 204)\n+        self.assertEqual(response.status_code, 204)\n         self.assertTrue(\'Subject: =?utf-8?q?A_portal_user_via_Plone_site?=\' in\n                         self.mailhost.messages[0])\n         self.assertTrue(\'From: info@plone.org\' in\n@@ -78,7 +78,7 @@ def test_email_send_all_parameters(self):\n             })\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 204)\n+        self.assertEqual(response.status_code, 204)\n         self.assertTrue(\'=?utf-8?q?This_is_the_subject\' in\n                         self.mailhost.messages[0])\n         self.assertTrue(\'From: info@plone.org\' in\n@@ -101,4 +101,4 @@ def test_email_send_anonymous(self):\n                 \'subject\': \'This is the subject.\'\n             })\n \n-        self.assertEquals(response.status_code, 401)\n+        self.assertEqual(response.status_code, 401)\ndiff --git a/src/plone/restapi/tests/test_services_history.py b/src/plone/restapi/tests/test_services_history.py\nindex e3856e85..7dbbd54e 100644\n--- a/src/plone/restapi/tests/test_services_history.py\n+++ b/src/plone/restapi/tests/test_services_history.py\n@@ -9,6 +9,7 @@\n \n import unittest\n import transaction\n+import six\n \n \n class TestHistoryEndpoint(unittest.TestCase):\n@@ -79,11 +80,11 @@ def test_get_datastructure(self):\n             self.assertIn(item[\'type\'], [\'versioning\', \'workflow\'])\n \n             if item[\'type\'] == \'versioning\':\n-                self.assertEqual(set(item.keys()), set(history_keys))\n+                self.assertEqual(set(item), set(history_keys))\n             else:\n-                self.assertEqual(set(item.keys()), set(workflow_keys))\n+                self.assertEqual(set(item), set(workflow_keys))\n \n-            self.assertEqual(set(item[\'actor\'].keys()), set(actor_keys))\n+            self.assertEqual(set(item[\'actor\']), set(actor_keys))\n \n             self.assertIsNotNone(item[\'action\'])\n \n@@ -103,7 +104,7 @@ def test_time_field(self):\n         response = self.api_session.get(url)\n \n         for item in response.json():\n-            self.assertTrue(isinstance(item[\'time\'], basestring))\n+            self.assertTrue(isinstance(item[\'time\'], six.string_types))\n \n     def test_get_historical_link(self):\n         # The @id field should link to @history/version.\n@@ -116,7 +117,7 @@ def test_get_historical_link(self):\n                     item[\'@id\'].endswith(\'@history/\' + str(item[\'version\']))\n                 )\n             else:\n-                self.assertNotIn(\'@id\', item.keys())\n+                self.assertNotIn(\'@id\', list(item))\n \n     def test_explicit_current(self):\n         # Does version=current get the current version\ndiff --git a/src/plone/restapi/tests/test_services_principals.py b/src/plone/restapi/tests/test_services_principals.py\nindex b1482a4c..64e2d647 100644\n--- a/src/plone/restapi/tests/test_services_principals.py\n+++ b/src/plone/restapi/tests/test_services_principals.py\n@@ -63,8 +63,8 @@ def test_get_principals(self):\n \n         response = response.json()\n         self.assertEqual(2, len(response))\n-        self.assertEquals(1, len(response[\'users\']))\n-        self.assertEquals(\'noam\', response[\'users\'][0][\'id\'])\n+        self.assertEqual(1, len(response[\'users\']))\n+        self.assertEqual(\'noam\', response[\'users\'][0][\'id\'])\n \n         response = self.api_session.get(\n             \'/@principals\',\n@@ -76,8 +76,8 @@ def test_get_principals(self):\n \n         response = response.json()\n         self.assertEqual(2, len(response))\n-        self.assertEquals(1, len(response[\'groups\']))\n-        self.assertEquals(\'ploneteam\', response[\'groups\'][0][\'id\'])\n+        self.assertEqual(1, len(response[\'groups\']))\n+        self.assertEqual(\'ploneteam\', response[\'groups\'][0][\'id\'])\n \n     def test_get_principals_response_both(self):\n         self.user = api.user.create(\n@@ -96,7 +96,7 @@ def test_get_principals_response_both(self):\n \n         response = response.json()\n         self.assertEqual(2, len(response))\n-        self.assertEquals(1, len(response[\'users\']))\n-        self.assertEquals(1, len(response[\'groups\']))\n-        self.assertEquals(\'plone.user\', response[\'users\'][0][\'id\'])\n-        self.assertEquals(\'ploneteam\', response[\'groups\'][0][\'id\'])\n+        self.assertEqual(1, len(response[\'users\']))\n+        self.assertEqual(1, len(response[\'groups\']))\n+        self.assertEqual(\'plone.user\', response[\'users\'][0][\'id\'])\n+        self.assertEqual(\'ploneteam\', response[\'groups\'][0][\'id\'])\ndiff --git a/src/plone/restapi/tests/test_services_tiles.py b/src/plone/restapi/tests/test_services_tiles.py\nindex 74f96bac..4efd6869 100644\n--- a/src/plone/restapi/tests/test_services_tiles.py\n+++ b/src/plone/restapi/tests/test_services_tiles.py\n@@ -80,24 +80,24 @@ def test_get_available_tiles(self):\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        self.assertEquals(len(response), 1)\n-        self.assertEquals(\n+        self.assertEqual(len(response), 1)\n+        self.assertEqual(\n             response[0][\'@id\'],\n             self.portal_url + u\'/@tiles/sample.tile\')\n-        self.assertEquals(response[0][\'title\'], u\'Sample tile\')\n-        self.assertEquals(\n+        self.assertEqual(response[0][\'title\'], u\'Sample tile\')\n+        self.assertEqual(\n             response[0][\'description\'], u\'A tile used for testing\')\n-        self.assertEquals(response[0][\'icon\'], \'testicon\')\n+        self.assertEqual(response[0][\'icon\'], \'testicon\')\n \n     def test_get_tile(self):\n         response = self.api_session.get(\'/@tiles/sample.tile\')\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        self.assertEquals(response[\'title\'], u\'Sample tile\')\n-        self.assertEquals(\n+        self.assertEqual(response[\'title\'], u\'Sample tile\')\n+        self.assertEqual(\n             response[\'properties\'][\'title\'][\'title\'], u\'Title\')\n-        self.assertEquals(\n+        self.assertEqual(\n             response[\'properties\'][\'title\'][\'type\'], u\'string\')\n \n     def test_patch_tiles_list(self):\n@@ -115,7 +115,7 @@ def test_patch_tiles_list(self):\n         response = self.api_session.get(\'/doc\')\n         response = response.json()\n \n-        self.assertEquals(\n+        self.assertEqual(\n             response[\'tiles\'],\n             {\n                 \'uuid1\': {\'@type\': \'title\'},\n@@ -137,7 +137,7 @@ def test_patch_tiles_layout(self):\n         response = self.api_session.get(\'/doc\')\n         response = response.json()\n \n-        self.assertEquals(\n+        self.assertEqual(\n             response[\'tiles_layout\'],\n             {\n                 "items": ["#uuid1", "#uuid2"]\ndiff --git a/src/plone/restapi/tests/test_services_types.py b/src/plone/restapi/tests/test_services_types.py\nindex 6fea4bd0..cf22cf7e 100644\n--- a/src/plone/restapi/tests/test_services_types.py\n+++ b/src/plone/restapi/tests/test_services_types.py\n@@ -41,7 +41,7 @@ def test_get_types(self):\n         )\n         for item in response.json():\n             self.assertEqual(\n-                sorted(item.keys()),\n+                sorted(item),\n                 sorted([\'@id\', \'title\', \'addable\'])\n             )\n \n@@ -163,14 +163,14 @@ def test_addable_types_for_non_manager_user(self):\n         response = self.api_session.get(\'/folder_cant_add/@types\')\n         response = response.json()\n \n-        self.assertEquals(\n+        self.assertEqual(\n             len([a for a in response if a[\'addable\']]), 0)\n \n         # and in the root Plone site there\'s no addable types\n         response = self.api_session.get(\'/@types\')\n         response = response.json()\n \n-        self.assertEquals(\n+        self.assertEqual(\n             len([a for a in response if a[\'addable\']]), 0)\n \n \n@@ -197,7 +197,7 @@ def test_get_types_translated(self):\n \n         self.assertEqual(response.status_code, 200)\n \n-        self.assertItemsEqual([\n+        self.assertEqual({\n             u\'Archivo\',\n             u\'Carpeta\',\n             u\'Colecci\xc3\xb3n\',\n@@ -206,5 +206,5 @@ def test_get_types_translated(self):\n             u\'Evento\',\n             u\'Imagen\',\n             u\'Noticia\',\n-            u\'P\xc3\xa1gina\'],\n-            [item[\'title\'] for item in response.json()])\n+            u\'P\xc3\xa1gina\'},\n+            set(item[\'title\'] for item in response.json()))\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex 93d59ebf..fadf8007 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -850,7 +850,7 @@ def test_anonymous_with_enable_user_sets_only_member_role(self):\n \n         response = response.json()\n         self.assertIn(\'Member\', response[\'roles\'])\n-        self.assertEquals(1, len(response[\'roles\']))\n+        self.assertEqual(1, len(response[\'roles\']))\n \n     def test_add_user_no_roles_sets_member_as_sensible_default(self):\n         response = self.api_session.post(\n@@ -868,4 +868,4 @@ def test_add_user_no_roles_sets_member_as_sensible_default(self):\n         response = response.json()\n \n         self.assertIn(\'Member\', response[\'roles\'])\n-        self.assertEquals(1, len(response[\'roles\']))\n+        self.assertEqual(1, len(response[\'roles\']))\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 10bea099..f7c57563 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -86,10 +86,10 @@ def test_get_all_vocabularies(self):\n         response = response.json()\n         self.assertTrue(len(response) > 0)\n         self.assertTrue(\n-            \'@id\' in response[0].keys()\n+            \'@id\' in list(response[0])\n         )\n         self.assertTrue(\n-            \'title\' in response[0].keys()\n+            \'title\' in list(response[0])\n         )\n         self.assertEqual(\n             [\ndiff --git a/src/plone/restapi/tests/test_setup.py b/src/plone/restapi/tests/test_setup.py\nindex f10c677d..20719007 100644\n--- a/src/plone/restapi/tests/test_setup.py\n+++ b/src/plone/restapi/tests/test_setup.py\n@@ -8,6 +8,13 @@\n from plone.restapi import PROJECT_NAME\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n+try:\n+    from Products.CMFPlone.utils import get_installer\n+except ImportError:  # Plone < 5.1\n+    HAS_INSTALLER = False\n+else:\n+    HAS_INSTALLER = True\n+\n \n class TestInstall(unittest.TestCase):\n \n@@ -16,15 +23,20 @@ class TestInstall(unittest.TestCase):\n     def setUp(self):\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n-        self.qi_tool = getToolByName(self.portal, \'portal_quickinstaller\')\n \n     def test_product_is_installed(self):\n         """ Validate that our products GS profile has been run and the product\n             installed\n         """\n-        installed = [p[\'id\'] for p in self.qi_tool.listInstalledProducts()]\n-        self.assertTrue(PROJECT_NAME in installed,\n-                        \'package appears not to have been installed\')\n+        if HAS_INSTALLER:\n+            qi = get_installer(self.portal)\n+            installed = qi.is_product_installed(PROJECT_NAME)\n+        else:\n+            qi_tool = getToolByName(self.portal, \'portal_quickinstaller\')\n+            installed = PROJECT_NAME in [\n+                p[\'id\'] for p in qi_tool.listInstalledProducts()]\n+        self.assertTrue(\n+            installed, \'package appears not to have been installed\')\n \n \n class TestUninstall(unittest.TestCase):\n@@ -34,13 +46,19 @@ class TestUninstall(unittest.TestCase):\n     def setUp(self):\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n-        self.qi_tool = getToolByName(self.portal, \'portal_quickinstaller\')\n \n-        with api.env.adopt_roles([\'Manager\']):\n-            self.qi_tool.uninstallProducts(products=[PROJECT_NAME])\n+        if HAS_INSTALLER:\n+            qi = get_installer(self.portal)\n+            qi.uninstall_product(PROJECT_NAME)\n+            self.installed = qi.is_product_installed(PROJECT_NAME)\n+        else:\n+            qi_tool = getToolByName(self.portal, \'portal_quickinstaller\')\n+            with api.env.adopt_roles([\'Manager\']):\n+                qi_tool.uninstallProducts(products=[PROJECT_NAME])\n+            self.installed = qi_tool.isProductInstalled(PROJECT_NAME)\n \n     def test_uninstalled(self):\n-        self.assertFalse(self.qi_tool.isProductInstalled(PROJECT_NAME))\n+        self.assertFalse(self.installed)\n \n     def test_addon_layer_removed(self):\n         layers = [l.getName() for l in registered_layers()]\ndiff --git a/src/plone/restapi/tests/test_site_deserializer.py b/src/plone/restapi/tests/test_site_deserializer.py\nindex 4374a46b..ad7f7c0c 100644\n--- a/src/plone/restapi/tests/test_site_deserializer.py\n+++ b/src/plone/restapi/tests/test_site_deserializer.py\n@@ -5,6 +5,7 @@\n from zope.component import getMultiAdapter\n \n import unittest\n+from six.moves import range\n \n \n class TestDXContentDeserializer(unittest.TestCase, OrderingMixin):\n@@ -36,4 +37,4 @@ def test_set_layout(self):\n         current_layout = self.portal.getLayout()\n         self.assertNotEquals(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n-        self.assertEquals(\'my_new_layout\', self.portal.getLayout())\n+        self.assertEqual(\'my_new_layout\', self.portal.getLayout())\ndiff --git a/src/plone/restapi/tests/test_site_serializer.py b/src/plone/restapi/tests/test_site_serializer.py\nindex 02903ce7..8d0cb15f 100644\n--- a/src/plone/restapi/tests/test_site_serializer.py\n+++ b/src/plone/restapi/tests/test_site_serializer.py\n@@ -34,4 +34,4 @@ def test_serializer_includes_title(self):\n     def test_get_is_folderish(self):\n         obj = self.serialize()\n         self.assertIn(\'is_folderish\', obj)\n-        self.assertEquals(True, obj[\'is_folderish\'])\n+        self.assertEqual(True, obj[\'is_folderish\'])\ndiff --git a/src/plone/restapi/tests/test_translations.py b/src/plone/restapi/tests/test_translations.py\nindex 29ae5da7..eccd3025 100644\n--- a/src/plone/restapi/tests/test_translations.py\n+++ b/src/plone/restapi/tests/test_translations.py\n@@ -31,9 +31,9 @@ def setUp(self):\n         alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=\'Test document\')\n+            self.portal[\'en\'], \'Document\', title=u\'Test document\')\n         self.es_content = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=\'Test document\')\n+            self.portal[\'es\'], \'Document\', title=u\'Test document\')\n         ITranslationManager(self.en_content).register_translation(\n             \'es\', self.es_content)\n \n@@ -71,9 +71,9 @@ def setUp(self):\n         alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=\'Test document\')\n+            self.portal[\'en\'], \'Document\', title=u\'Test document\')\n         self.es_content = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=\'Test document\')\n+            self.portal[\'es\'], \'Document\', title=u\'Test document\')\n         transaction.commit()\n \n     def test_translation_linking_succeeds(self):\n@@ -138,9 +138,9 @@ def setUp(self):\n         alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=\'Test document\')\n+            self.portal[\'en\'], \'Document\', title=u\'Test document\')\n         self.es_content = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=\'Test document\')\n+            self.portal[\'es\'], \'Document\', title=u\'Test document\')\n         ITranslationManager(self.en_content).register_translation(\n             \'es\', self.es_content)\n         transaction.commit()\n@@ -159,7 +159,7 @@ def test_translation_unlinking_succeeds(self):\n         manager = ITranslationManager(self.en_content)\n         self.assertNotIn(\n             ILanguage(self.es_content).get_language(),\n-            manager.get_translations().keys())\n+            list(manager.get_translations()))\n \n     def test_calling_endpoint_without_language_gives_400(self):\n         response = requests.delete(\ndiff --git a/src/plone/restapi/tests/test_tus.py b/src/plone/restapi/tests/test_tus.py\nindex dfb12dbd..3879ca81 100644\n--- a/src/plone/restapi/tests/test_tus.py\n+++ b/src/plone/restapi/tests/test_tus.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from DateTime import DateTime\n-from StringIO import StringIO\n+from six import BytesIO\n from base64 import b64encode\n from plone import api\n from plone.app.testing import SITE_OWNER_NAME\n@@ -13,6 +13,7 @@\n from plone.rest.cors import CORSPolicy\n from plone.rest.interfaces import ICORSPolicy\n from plone.restapi.services.content.tus import TUSUpload\n+from plone.restapi import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n@@ -27,7 +28,7 @@\n import transaction\n import unittest\n \n-UPLOAD_DATA = \'abcdefgh\'\n+UPLOAD_DATA = b\'abcdefgh\'\n UPLOAD_MIMETYPE = \'text/plain\'\n UPLOAD_FILENAME = \'test.txt\'\n UPLOAD_LENGTH = len(UPLOAD_DATA)\n@@ -36,6 +37,22 @@\n UPLOAD_PDF_FILENAME = \'file.pdf\'\n \n \n+def _base64_str(s):\n+    if not isinstance(s, bytes):\n+        s = s.encode(\'utf-8\')\n+    s = b64encode(s)\n+    if not isinstance(s, str):\n+        s = s.decode(\'utf-8\')\n+    return s\n+\n+\n+def _prepare_metadata(filename, content_type):\n+    return \'filename {},content-type {}\'.format(\n+        _base64_str(filename),\n+        _base64_str(content_type),\n+    )\n+\n+\n class TestTUS(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n@@ -108,9 +125,7 @@ def test_tus_post_initialization(self):\n         upload.cleanup()\n \n     def test_tus_post_initialization_with_metadata(self):\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME),\n-            b64encode(UPLOAD_MIMETYPE))\n+        metadata = _prepare_metadata(UPLOAD_FILENAME, UPLOAD_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -245,7 +260,7 @@ def test_tus_patch_unfinished_upload_returns_expires_header(self):\n             headers={\'Tus-Resumable\': \'1.0.0\',\n                      \'Content-Type\': \'application/offset+octet-stream\',\n                      \'Upload-Offset\': \'0\'},\n-            data=StringIO(\'abcdefghijkl\'))\n+            data=BytesIO(b\'abcdefghijkl\'))\n         self.assertEqual(204, response.status_code)\n         self.assertIn(\'Upload-Expires\', response.headers)\n         tus.cleanup()\n@@ -260,14 +275,14 @@ def test_tus_patch_non_primary_field(self):\n             headers={\'Tus-Resumable\': \'1.0.0\',\n                      \'Content-Type\': \'application/offset+octet-stream\',\n                      \'Upload-Offset\': \'0\'},\n-            data=StringIO(\'abcdefghijkl\'))\n+            data=BytesIO(b\'abcdefghijkl\'))\n \n         self.assertEqual(204, response.status_code)\n         transaction.commit()\n         self.assertEqual(1, len(self.folder.objectIds()))\n         id_ = self.folder.objectIds()[0]\n         self.assertEqual(\n-            \'abcdefghijkl\', self.folder[id_].test_namedblobfile_field.data)\n+            b\'abcdefghijkl\', self.folder[id_].test_namedblobfile_field.data)\n         tus.cleanup()\n \n     def test_patch_in_create_mode_without_add_permission_raises_401(self):\n@@ -279,7 +294,7 @@ def test_patch_in_create_mode_without_add_permission_raises_401(self):\n             headers={\'Tus-Resumable\': \'1.0.0\',\n                      \'Content-Type\': \'application/offset+octet-stream\',\n                      \'Upload-Offset\': \'0\'},\n-            data=StringIO(\'abcdefghijkl\'))\n+            data=BytesIO(b\'abcdefghijkl\'))\n         self.assertEqual(401, response.status_code)\n         tus.cleanup()\n \n@@ -292,7 +307,7 @@ def test_patch_in_replace_mode_without_modify_permission_raises_401(self):\n             headers={\'Tus-Resumable\': \'1.0.0\',\n                      \'Content-Type\': \'application/offset+octet-stream\',\n                      \'Upload-Offset\': \'0\'},\n-            data=StringIO(\'abcdefghijkl\'))\n+            data=BytesIO(b\'abcdefghijkl\'))\n         self.assertEqual(401, response.status_code)\n         tus.cleanup()\n \n@@ -301,9 +316,7 @@ def test_tus_can_upload_pdf_file(self):\n         pdf_file_path = os.path.join(os.path.dirname(__file__),\n                                      UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_PDF_FILENAME),\n-            b64encode(UPLOAD_PDF_MIMETYPE))\n+        metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -314,13 +327,15 @@ def test_tus_can_upload_pdf_file(self):\n         location = response.headers[\'Location\']\n \n         # upload the data with PATCH\n-        pdf_file = open(pdf_file_path, \'rb\')\n-        response = self.api_session.patch(\n-            location,\n-            headers={\'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\',\n-                     \'Tus-Resumable\': \'1.0.0\'},\n-            data=pdf_file)\n+        with open(pdf_file_path, \'rb\') as pdf_file:\n+            response = self.api_session.patch(\n+                location,\n+                headers={\n+                    \'Content-Type\': \'application/offset+octet-stream\',\n+                    \'Upload-Offset\': \'0\',\n+                    \'Tus-Resumable\': \'1.0.0\'\n+                },\n+                data=pdf_file)\n         self.assertEqual(response.status_code, 204)\n \n         transaction.commit()\n@@ -328,9 +343,7 @@ def test_tus_can_upload_pdf_file(self):\n \n     def test_tus_can_upload_text_file(self):\n         # initialize the upload with POST\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME),\n-            b64encode(UPLOAD_MIMETYPE))\n+        metadata = _prepare_metadata(UPLOAD_FILENAME, UPLOAD_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -346,7 +359,7 @@ def test_tus_can_upload_text_file(self):\n             headers={\'Content-Type\': \'application/offset+octet-stream\',\n                      \'Upload-Offset\': \'0\',\n                      \'Tus-Resumable\': \'1.0.0\'},\n-            data=StringIO(UPLOAD_DATA))\n+            data=BytesIO(UPLOAD_DATA))\n         self.assertEqual(response.status_code, 204)\n \n     def test_tus_can_replace_pdf_file(self):\n@@ -360,9 +373,7 @@ def test_tus_can_replace_pdf_file(self):\n         pdf_file_path = os.path.join(os.path.dirname(__file__),\n                                      UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_PDF_FILENAME),\n-            b64encode(UPLOAD_PDF_MIMETYPE))\n+        metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n             \'{}/@tus-replace\'.format(self.file.absolute_url()),\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -373,13 +384,15 @@ def test_tus_can_replace_pdf_file(self):\n         location = response.headers[\'Location\']\n \n         # upload the data with PATCH\n-        pdf_file = open(pdf_file_path, \'rb\')\n-        response = self.api_session.patch(\n-            location,\n-            headers={\'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\',\n-                     \'Tus-Resumable\': \'1.0.0\'},\n-            data=pdf_file)\n+        with open(pdf_file_path, \'rb\') as pdf_file:\n+            response = self.api_session.patch(\n+                location,\n+                headers={\n+                    \'Content-Type\': \'application/offset+octet-stream\',\n+                    \'Upload-Offset\': \'0\',\n+                    \'Tus-Resumable\': \'1.0.0\'\n+                },\n+                data=pdf_file)\n         self.assertEqual(response.status_code, 204)\n \n         transaction.commit()\n@@ -500,29 +513,29 @@ def test_offset_returns_zero_if_file_doesnt_exist(self):\n \n     def test_offset_returns_size_of_current_file(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(StringIO(\'0123456789\'))\n+        tus.write(BytesIO(b\'0123456789\'))\n         self.assertEqual(10, tus.offset())\n         tus.cleanup()\n \n     def test_write_creates_new_file(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(StringIO(\'0123456789\'))\n+        tus.write(BytesIO(b\'0123456789\'))\n         self.assertTrue(os.path.isfile(tus.filepath))\n         tus.cleanup()\n \n     def test_write_appends_to_file_at_given_offset(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(StringIO(\'0123456789\'))\n-        tus.write(StringIO(\'abc\'), 10)\n+        tus.write(BytesIO(b\'0123456789\'))\n+        tus.write(BytesIO(b\'abc\'), 10)\n         self.assertEqual(13, tus.offset())\n         with open(tus.filepath, \'rb\') as f:\n             data = f.read()\n-        self.assertEqual(\'0123456789abc\', data)\n+        self.assertEqual(b\'0123456789abc\', data)\n         tus.cleanup()\n \n     def test_write_sets_finished_flag(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 10})\n-        tus.write(StringIO(\'0123456789\'))\n+        tus.write(BytesIO(b\'0123456789\'))\n         self.assertTrue(tus.finished)\n         tus.cleanup()\n \n@@ -533,13 +546,13 @@ def test_metadata_returns_empty_dict_if_no_metadata_has_been_set(self):\n \n     def test_expires_returns_expiration_time_of_current_upload(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(StringIO(\'0123456789\'))\n+        tus.write(BytesIO(b\'0123456789\'))\n         self.assertGreater(DateTime(tus.expires()), DateTime())\n         tus.cleanup()\n \n     def test_cleanup_removes_upload_file(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(StringIO(\'0123456789\'))\n+        tus.write(BytesIO(b\'0123456789\'))\n         tus.cleanup()\n         self.assertFalse(os.path.exists(tus.filepath))\n \n@@ -577,6 +590,8 @@ class TestTUSWithAT(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         login(self.portal, TEST_USER_NAME)\n@@ -597,9 +612,7 @@ def test_tus_can_upload_pdf_file(self):\n         pdf_file_path = os.path.join(os.path.dirname(__file__),\n                                      UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_PDF_FILENAME),\n-            b64encode(UPLOAD_PDF_MIMETYPE))\n+        metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -610,13 +623,15 @@ def test_tus_can_upload_pdf_file(self):\n         location = response.headers[\'Location\']\n \n         # upload the data with PATCH\n-        pdf_file = open(pdf_file_path, \'rb\')\n-        response = self.api_session.patch(\n-            location,\n-            headers={\'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\',\n-                     \'Tus-Resumable\': \'1.0.0\'},\n-            data=pdf_file)\n+        with open(pdf_file_path, \'rb\') as pdf_file:\n+            response = self.api_session.patch(\n+                location,\n+                headers={\n+                    \'Content-Type\': \'application/offset+octet-stream\',\n+                    \'Upload-Offset\': \'0\',\n+                    \'Tus-Resumable\': \'1.0.0\'\n+                },\n+                data=pdf_file)\n         self.assertEqual(response.status_code, 204)\n \n         transaction.commit()\ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex e6214247..1ed82b54 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -97,9 +97,9 @@ def test_get_jsonschema_for_fti(self):\n         )\n         self.assertEqual(jsonschema[\'title\'], \'Page\')\n         self.assertEqual(jsonschema[\'type\'], \'object\')\n-        self.assertIn(\'title\', jsonschema[\'properties\'].keys())\n+        self.assertIn(\'title\', list(jsonschema[\'properties\']))\n         self.assertIn(\'title\', jsonschema[\'required\'])\n-        self.assertEquals(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n+        self.assertEqual(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n         self.assertIn(\'title\', jsonschema[\'fieldsets\'][0][\'fields\'])\n         self.assertIn(\'layouts\', jsonschema)\n \n@@ -109,7 +109,7 @@ def test_get_jsonschema_for_fti(self):\n             request,\n             excluded_fields=[\'title\']\n         )\n-        self.assertNotIn(\'title\', jsonschema[\'properties\'].keys())\n+        self.assertNotIn(\'title\', list(jsonschema[\'properties\']))\n \n     def test_get_jsonschema_for_fti_non_dx(self):\n         """Make sure FTIs without lookupSchema are supported.\n@@ -130,14 +130,14 @@ def test_get_jsonschema_for_portal_type(self):\n         )\n         self.assertEqual(jsonschema[\'title\'], \'Page\')\n         self.assertEqual(jsonschema[\'type\'], \'object\')\n-        self.assertIn(\'title\', jsonschema[\'properties\'].keys())\n+        self.assertIn(\'title\', list(jsonschema[\'properties\']))\n         self.assertIn(\'title\', jsonschema[\'required\'])\n-        self.assertEquals(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n+        self.assertEqual(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n         self.assertIn(\'title\', jsonschema[\'fieldsets\'][0][\'fields\'])\n \n         jsonschema = get_jsonschema_for_portal_type(\n             \'Document\', portal, request, excluded_fields=[\'title\'])\n-        self.assertNotIn(\'title\', jsonschema[\'properties\'].keys())\n+        self.assertNotIn(\'title\', list(jsonschema[\'properties\']))\n \n \n class TestTaggedValuesJsonSchemaUtils(TestCase):\ndiff --git a/src/plone/restapi/tests/test_workflow.py b/src/plone/restapi/tests/test_workflow.py\nindex 9d1524ce..ba957e24 100644\n--- a/src/plone/restapi/tests/test_workflow.py\n+++ b/src/plone/restapi/tests/test_workflow.py\n@@ -98,8 +98,9 @@ def traverse(self, path=\'/plone\', accept=\'application/json\',\n         request.environ[\'PATH_TRANSLATED\'] = path\n         request.environ[\'HTTP_ACCEPT\'] = accept\n         request.environ[\'REQUEST_METHOD\'] = method\n+        auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         request._auth = \'Basic %s\' % b64encode(\n-            \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD))\n+            auth.encode(\'utf8\')).decode(\'utf8\')\n         notify(PubStart(request))\n         return request.traverse(path)\n \ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex 7cf0d70f..cf4a84e0 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -18,7 +18,7 @@\n from plone.autoform.form import AutoExtensibleForm\n from plone.autoform.interfaces import WIDGETS_KEY\n from plone.dexterity.utils import getAdditionalSchemata\n-from plone.restapi.interfaces import IJsonCompatible\n+from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.types.interfaces import IJsonSchemaProvider\n from Products.CMFCore.utils import getToolByName\n from plone.supermodel.utils import mergedTaggedValueDict\n@@ -65,7 +65,7 @@ def get_fieldsets(context, request, schema, additional_schemata=None):\n     fieldsets = [{\n         \'id\': \'default\',\n         \'title\': u\'Default\',\n-        \'fields\': form.fields.values(),\n+        \'fields\': list(form.fields.values()),\n     }]\n \n     # Additional fieldsets (AKA z3c.form groups)\n@@ -73,7 +73,7 @@ def get_fieldsets(context, request, schema, additional_schemata=None):\n         fieldset = {\n             \'id\': group.__name__,\n             \'title\': translate(group.label, context=getRequest()),\n-            \'fields\': group.fields.values(),\n+            \'fields\': list(group.fields.values()),\n         }\n         fieldsets.append(fieldset)\n \n@@ -193,7 +193,7 @@ def get_jsonschema_for_fti(fti, context, request, excluded_fields=None):\n     return {\n         \'type\': \'object\',\n         \'title\': translate(fti.Title(), context=getRequest()),\n-        \'properties\': IJsonCompatible(properties),\n+        \'properties\': json_compatible(properties),\n         \'required\': required,\n         \'fieldsets\': get_fieldset_infos(fieldsets),\n         \'layouts\': getattr(fti, \'view_methods\', []),\ndiff --git a/test-no-uncommitted-doc-changes.in b/test-no-uncommitted-doc-changes.in\nindex 878f2f80..9d8838dc 100644\n--- a/test-no-uncommitted-doc-changes.in\n+++ b/test-no-uncommitted-doc-changes.in\n@@ -13,7 +13,7 @@ function red {\n     echo "$RED $1 $RESET"\n }\n \n-if [ "$PLONE_VERSION" = "4.3.x" ] || [ "$PLONE_VERSION" = "5.0.x" ]; then\n+if [ "$PLONE_VERSION" = "4.3.x" ] || [ "$PLONE_VERSION" = "5.0.x" ] || [ "$PLONE_VERSION" = "5.2.x" ]; then\n     # request/response dumps have known differences for Plone 5\n     # => skip, we can\'t have the Plone 5 build fail because of those\n     echo "Skipping checks for undocumented changes for Plone 4 and 5.0.x"\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-02-04T23:25:54+01:00
Author: Elio Schmutz (elioschmutz) <elio.schmutz@4teamwork.ch>
Commit: https://github.com/plone/plone.restapi/commit/a9dd3d1a673f392afbcc425bd7e26eda37efb82c

Merge branch 'master' into issue-574-event-type

Files changed:
M .travis.yml
M CHANGES.rst
M CONTRIBUTORS.rst
M Makefile
M README.rst
M base.cfg
M plone-4.3.x.cfg
M plone-5.2.x.cfg
M requirements.txt
M setup.py
M src/plone/restapi/deserializer/configure.zcml
M src/plone/restapi/services/__init__.py
M src/plone/restapi/services/content/tus.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/test_atcontent_deserializer.py
M src/plone/restapi/tests/test_batching.py
M src/plone/restapi/tests/test_copymove.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_dxcontent_deserializer.py
M src/plone/restapi/tests/test_error_handling.py
M src/plone/restapi/tests/test_expansion.py
M src/plone/restapi/tests/test_locking.py
M src/plone/restapi/tests/test_permissions.py
M src/plone/restapi/tests/test_registry.py
M src/plone/restapi/tests/test_roles.py
M src/plone/restapi/tests/test_search.py
M src/plone/restapi/tests/test_services.py
M src/plone/restapi/tests/test_services_actions.py
M src/plone/restapi/tests/test_services_breadcrumbs.py
M src/plone/restapi/tests/test_services_comments.py
M src/plone/restapi/tests/test_services_content.py
M src/plone/restapi/tests/test_services_controlpanels.py
M src/plone/restapi/tests/test_services_email_notification.py
M src/plone/restapi/tests/test_services_email_send.py
M src/plone/restapi/tests/test_services_groups.py
M src/plone/restapi/tests/test_services_history.py
M src/plone/restapi/tests/test_services_navigation.py
M src/plone/restapi/tests/test_services_principals.py
M src/plone/restapi/tests/test_services_tiles.py
M src/plone/restapi/tests/test_services_types.py
M src/plone/restapi/tests/test_services_users.py
M src/plone/restapi/tests/test_services_vocabularies.py
M src/plone/restapi/tests/test_site_deserializer.py
M src/plone/restapi/tests/test_tus.py
M src/plone/restapi/tests/test_types.py
M src/plone/restapi/types/utils.py
M test-no-sphinx-warnings.in
M versions.cfg

b'diff --git a/.travis.yml b/.travis.yml\nindex da110928..1285c66b 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -2,6 +2,8 @@ language: python\n python:\n   - "2.7"\n   - "3.6"\n+  - "3.7"\n+dist: xenial\n sudo: required\n services:\n   - docker\n@@ -13,6 +15,7 @@ env:\n   global:\n     - secure: "tj9kO7Uyn7AY2Z6zhdOggLSYheaD8e+qKA7ZXvdWTrL2HtPAtnNJK8keQGj1JLQyy6bRfoOCt51aL8+Lc0fzcACaLFpAPjleSLtUChphPOh/dqTu1QX5oL0SxZ94B4ZC5+qfaSAQHMwbiiWUW0us9QtJpxQQmiJUekqiTdQDNEo="\n     - secure: "j06un+j2gHjlGfg+xMcvKG2osf1HSzBq/cPPNIonnjGQY3GJfT/YRzYnHe5LJPPt7IJDD7hAEPentRJ4C0zP66U6gcQ2HjWPsMIcvzlgnXoT2QaaCVkMA9YS4WOsN0C5iY/R64GjFwR7J+/bgeG64XvfhpuQ/UBP2+U68PqSBtM="\n+    - ZSERVER_PORT=55001\n matrix:\n   include:\n   - python: "2.7"\n@@ -25,12 +28,12 @@ matrix:\n     env: PLONE_VERSION=5.2.x\n   - python: "3.6"\n     env: PLONE_VERSION=5.2.x\n+  - python: "3.7"\n+    env: PLONE_VERSION=5.2.x\n   exclude:\n   - python: "2.7"\n   - python: "3.6"\n-  allow_failures:\n-  - python: "3.6"\n-    env: PLONE_VERSION=5.2.x\n+  - python: "3.7"\n before_install:\n   - mkdir -p $HOME/buildout-cache/{eggs,downloads}\n   - mkdir $HOME/.buildout\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 76f9065f..fd237416 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,7 +1,29 @@\n Changelog\n =========\n \n-3.4.6 (unreleased)\n+3.5.1 (unreleased)\n+------------------\n+\n+Bugfixes:\n+\n+- Do not fail on serializing types with fields having non-parametrized widgets.\n+  Fixes issue `664 <https://github.com/plone/plone.restapi/issues/664>`_.\n+  [elioschmutz]\n+\n+- Tests: retry request on ConnectionError.\n+  On Jenkins we often get one ConnectionError in a seemingly random test.\n+  Retrying after a short pause helps.\n+  Fixes issue `648 <https://github.com/plone/plone.restapi/issues/648>`_.\n+  [maurits, gforcada]\n+\n+- Close the api_session in tests.\n+  This prevents lots of ResourceWarnings about unclosed sockets.\n+  Fixes issues `636 <https://github.com/plone/plone.restapi/issues/636>`_\n+  and `648 <https://github.com/plone/plone.restapi/issues/648>`_.\n+  [maurits, gforcada]\n+\n+\n+3.5.0 (2018-11-06)\n ------------------\n \n New Features:\ndiff --git a/CONTRIBUTORS.rst b/CONTRIBUTORS.rst\nindex c86593a7..fb6b2a36 100644\n--- a/CONTRIBUTORS.rst\n+++ b/CONTRIBUTORS.rst\n@@ -2,15 +2,15 @@\n     place names and roles of the people who contribute to this package\n     in this file, one to a line, like so:\n \n-- Timo Stollenwerk, Original Author\n-- Thomas Buchberger\n-- Lukas Graf\n-- V\xc3\xadctor Fern\xc3\xa1ndez de Alba\n+- Timo Stollenwerk, kitconcept GmbH, Original Author\n+- Thomas Buchberger, 4teamwork\n+- Lukas Graf, 4teamwork\n+- V\xc3\xadctor Fern\xc3\xa1ndez de Alba, kitconcept GmbH\n - Paul Roeland\n-- Mikel Larreategi\n+- Mikel Larreategi, codesyntax\n - Eric Brehault\n - Andreas Zeidler\n-- Carsten Senger\n+- Carsten Senger, kitconcept GmbH\n - Tom Gross\n - Roel Bruggink\n - Yann Fouillat, alias Gagaro\ndiff --git a/Makefile b/Makefile\nindex 7404dce5..9966e6bf 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -13,6 +13,17 @@ bin/buildout: bin/pip\n \tbin/pip install -r requirements.txt\n \t@touch -c $@\n \n+build-plone-5.2: .installed.cfg\n+\tbin/pip install --upgrade pip\n+\tbin/pip install -r requirements.txt\n+\tbin/buildout -c plone-5.2.x.cfg\n+\n+build-py3:\n+\tvirtualenv --python=python3 .\n+\tbin/pip install --upgrade pip\n+\tbin/pip install -r requirements.txt\n+\tbin/buildout -c plone-5.2.x.cfg\n+\n bin/python bin/pip:\n \tvirtualenv --clear --python=python$(version) .\n \ndiff --git a/README.rst b/README.rst\nindex 272ae31f..191924da 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -21,30 +21,14 @@ Introduction\n plone.restapi is a RESTful hypermedia API for Plone.\n \n \n-RESTful Hypermedia API\n-----------------------\n-\n-REST stands for `Representational State Transfer <http://en.wikipedia.org/wiki/Representational_state_transfer>`_. It is a software architectural principle to create loosely coupled web APIs.\n-\n-Most web APIs have a tight coupling between client and server. This makes them brittle and hard to change over time. It requires them not only to fully document every small detail of the API, but also to write a client implementation that follows that specification 100% correctly and breaks as soon as you change any detail.\n-\n-A hypermedia API just provides an entry point to the API that contains hyperlinks the clients can follow, just\xc2\xa0as a human user of a regular website knows the initial URL of the site and then follows hyperlinks to navigate through the site. This has the advantage that the client needs to understand only how to detect and follow links. The URL and other details of the API can change without breaking the client.\n-\n-\n Documentation\n =============\n \n http://plonerestapi.readthedocs.org\n \n \n-Roadmap\n-=======\n-\n-https://github.com/plone/plone.restapi/milestones\n-\n-\n-Live Demo\n-=========\n+Getting started\n+===============\n \n A live demo of Plone 5 with the latest plone.restapi release is available at:\n \n@@ -61,39 +45,50 @@ Example POST request to create a new document::\n .. note:: You will need some kind of API browser application to explore the API. We recommend using `Postman <http://www.getpostman.com/>`_.\n \n \n-Design Decisions\n-================\n+Installation\n+============\n \n-* A truly RESTful API (Hypermedia / HATEOAS / Linked-data)\n-* JSON is the main target format; support for other formats (HTML, XML) will come later\n-* Use HTTP headers (to set format and versioning, also provide URL-based option to make it easier for people to try it out)\n-* No versioning; versioning in the HTTP header can be added later\n-* Field names just map over (we will not try to clean up attributes or enforce naming standards like pep8 (e.g. isPrincipiaFoldish -> is_folderish)\n+Install plone.restapi by adding it to your buildout::\n \n+    [buildout]\n \n-Software Quality\n-================\n+    ...\n \n-* 100% test coverage\n-* 100% PEP8 compliant\n-* Documentation-first approach for enhancements\n+    eggs =\n+        plone.restapi\n \n \n-Further Reading\n-===============\n+and then running ``bin/buildout``\n+\n+\n+Contribute\n+==========\n+\n+- Issue Tracker: https://github.com/plone/plone.restapi/issues\n+- Source Code: https://github.com/plone/plone.restapi\n+- Documentation: https://plonerestapi.readthedocs.io/en/latest/\n+\n \n-* `REST in Practice: Hypermedia and Systems Architecture (Webber, Parastatidis, Robinson) <http://www.amazon.com/gp/product/0596805829>`_\n+Examples\n+========\n+\n+plone.restapi is used in production since the first alpha release.\n+It can be seen in action at the following sites:\n+\n+- Zeelandia.de: https://www.zeelandia.de/ (by kitconcept GmbH)\n+- VHS-Ehrenamtsportal: https://vhs-ehrenamtsportal.de/ (by kitconcept GmbH)\n+\n+\n+Support\n+=======\n \n+If you are having issues, please let us know via the issue tracker.\n \n-Standards\n-=========\n+If you required professional support, here is a list of Plone solution providers that contributed to plone.restapi:\n \n-- `JSON-LD <http://www.w3.org/TR/json-ld/>`_\n-- `JSON Schema <http://json-schema.org/>`_\n-- `Schema.org <http://schema.org/>`_\n-- `Hydra <http://www.w3.org/ns/hydra/spec/latest/core/>`_\n-- `Collection+JSON <http://amundsen.com/media-types/collection/>`_\n-- `Siren <https://github.com/kevinswiber/siren>`_\n+- kitconcept GmbH (Germany) https://kitconcept.com\n+- 4teamwork (Switzerland) https://www.4teamwork.ch/\n+- CodeSyntax (Spain) https://www.codesyntax.com/en\n \n \n License\ndiff --git a/base.cfg b/base.cfg\nindex dcf032d3..204f586f 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -189,3 +189,6 @@ mode = 755\n [sources]\n plone.rest = git git://github.com/plone/plone.rest.git pushurl=git@github.com:plone/plone.rest.git branch=master\n plone.schema = git git://github.com/plone/plone.schema.git pushurl=git@github.com:plone/plone.schema.git branch=newjsonschemafield\n+\n+[versions]\n+plone.restapi =\ndiff --git a/plone-4.3.x.cfg b/plone-4.3.x.cfg\nindex c4545ee7..fb06130a 100644\n--- a/plone-4.3.x.cfg\n+++ b/plone-4.3.x.cfg\n@@ -1,7 +1,7 @@\n [buildout]\n extends =\n     base.cfg\n-    http://dist.plone.org/release/4.3.17/versions.cfg\n+    http://dist.plone.org/release/4.3.18/versions.cfg\n     versions.cfg\n \n [versions]\ndiff --git a/plone-5.2.x.cfg b/plone-5.2.x.cfg\nindex 5bb3a958..622ec121 100644\n--- a/plone-5.2.x.cfg\n+++ b/plone-5.2.x.cfg\n@@ -1,5 +1,18 @@\n [buildout]\n extends =\n     base.cfg\n-    http://dist.plone.org/release/5.1.2/versions.cfg\n-    versions.cfg\n+    http://dist.plone.org/release/5.2a2/versions.cfg\n+find-links += http://dist.plone.org/thirdparty/\n+versions=versions\n+\n+[versions]\n+plone.restapi =\n+# Sphinx\n+Sphinx = 1.6.5\n+docutils = 0.14\n+Pygments = 2.2.0\n+sphinxcontrib-httpexample = 0.7.0\n+sphinxcontrib-httpdomain = 1.5.0\n+sphinx-rtd-theme = 0.2.4\n+Jinja2 = 2.10\n+Babel = 2.5.1\ndiff --git a/requirements.txt b/requirements.txt\nindex c00f2871..afc1b14d 100644\n--- a/requirements.txt\n+++ b/requirements.txt\n@@ -1,29 +1,3 @@\n-# https://github.com/plone/buildout.coredev/blob/5.1/requirements.txt\n+# https://github.com/plone/buildout.coredev/blob/5.2/requirements.txt\n setuptools==40.4.3\n zc.buildout==2.12.2\n-# Sphinx / ReadTheDocs\n-alabaster==0.7.10\n-appdirs==1.4.2\n-astunparse==1.5.0\n-Babel==2.5.1\n-certifi==2017.11.5\n-chardet==3.0.4\n-docutils==0.14\n-idna==2.6\n-imagesize==0.7.1\n-Jinja2==2.10\n-MarkupSafe==1.0\n-packaging==16.8\n-Pygments==2.2.0\n-pyparsing==2.1.10\n-pytz==2017.3\n-requests==2.20.0\n-six==1.10.0\n-snowballstemmer==1.2.1\n-Sphinx==1.6.5\n-sphinx-rtd-theme==0.2.4\n-sphinxcontrib-httpdomain==1.5.0\n-sphinxcontrib-httpexample==0.9.1\n-sphinxcontrib-websupport==1.0.1\n-typing==3.6.2\n-urllib3==1.22\ndiff --git a/setup.py b/setup.py\nindex 1878a076..a57ddbcd 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,6 +1,8 @@\n from setuptools import setup, find_packages\n \n-version = \'3.4.6-dev.0\'\n+import sys\n+\n+version = \'3.5.1.dev.0\'\n \n long_description = (\n     open(\'README.rst\').read() + \'\\n\' +\n@@ -23,7 +25,11 @@\n ]\n \n PY2_ONLY = [\n+    \'archetypes.schemaextender\',\n     \'Products.Archetypes\',\n+    \'Products.contentmigration\',\n+    \'Products.ATContentTypes\',\n+    \'plone.app.blob\',\n     \'plone.app.collection\',\n ]\n \ndiff --git a/src/plone/restapi/deserializer/configure.zcml b/src/plone/restapi/deserializer/configure.zcml\nindex ef861bab..635e2c5b 100644\n--- a/src/plone/restapi/deserializer/configure.zcml\n+++ b/src/plone/restapi/deserializer/configure.zcml\n@@ -30,7 +30,7 @@\n     <adapter factory=".atfields.FileFieldDeserializer" />\n     <adapter factory=".atfields.ReferenceFieldDeserializer" />\n   </configure>\n-  \n+\n   <configure zcml:condition="have plone-5">\n     <adapter factory=".controlpanels.ControlpanelDeserializeFromJson" />\n   </configure>\ndiff --git a/src/plone/restapi/services/__init__.py b/src/plone/restapi/services/__init__.py\nindex 2416c256..48311be5 100644\n--- a/src/plone/restapi/services/__init__.py\n+++ b/src/plone/restapi/services/__init__.py\n@@ -19,7 +19,8 @@ def render(self):\n         content = self.reply()\n         if content is not _no_content_marker:\n             self.request.response.setHeader("Content-Type", self.content_type)\n-            return json.dumps(content, indent=2, sort_keys=True)\n+            return json.dumps(\n+                content, indent=2, sort_keys=True, separators=(\', \', \': \'))\n \n     def check_permission(self):\n         sm = getSecurityManager()\ndiff --git a/src/plone/restapi/services/content/tus.py b/src/plone/restapi/services/content/tus.py\nindex 49139a99..5bf9d612 100644\n--- a/src/plone/restapi/services/content/tus.py\n+++ b/src/plone/restapi/services/content/tus.py\n@@ -37,7 +37,7 @@ class UploadOptions(Service):\n \n     def reply(self):\n         for name, value in TUS_OPTIONS_RESPONSE_HEADERS.items():\n-                    self.request.response.setHeader(name, value)\n+            self.request.response.setHeader(name, value)\n         return super(UploadOptions, self).reply()\n \n \ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 4786c426..160526cb 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -23,6 +23,7 @@\n from plone.testing.layer import Layer\n from plone.uuid.interfaces import IUUIDGenerator\n from Products.CMFCore.utils import getToolByName\n+from requests.exceptions import ConnectionError\n from six.moves.urllib.parse import urljoin\n from six.moves.urllib.parse import urlparse\n from zope.component import getGlobalSiteManager\n@@ -356,7 +357,14 @@ def request(self, method, url, **kwargs):\n         if urlparse(url).scheme not in (\'http\', \'https\'):\n             url = url.lstrip(\'/\')\n             url = urljoin(self.__base_url, url)\n-        return super(RelativeSession, self).request(method, url, **kwargs)\n+        try:\n+            return super(RelativeSession, self).request(method, url, **kwargs)\n+        except ConnectionError:\n+            # On Jenkins we often get one ConnectionError in a seemingly\n+            # random test, mostly in test_documentation.py.\n+            # The server is still listening: the port is open.  We retry once.\n+            time.sleep(1)\n+            return super(RelativeSession, self).request(method, url, **kwargs)\n \n \n @implementer(IUUIDGenerator)\ndiff --git a/src/plone/restapi/tests/test_atcontent_deserializer.py b/src/plone/restapi/tests/test_atcontent_deserializer.py\nindex 6be01743..92ae9b45 100644\n--- a/src/plone/restapi/tests/test_atcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_deserializer.py\n@@ -156,7 +156,7 @@ def __call__(self, request):\n \n     def test_set_layout(self):\n         current_layout = self.doc1.getLayout()\n-        self.assertNotEquals(current_layout, "my_new_layout")\n+        self.assertNotEqual(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n         self.assertEqual(\'my_new_layout\', self.doc1.getLayout())\n \ndiff --git a/src/plone/restapi/tests/test_batching.py b/src/plone/restapi/tests/test_batching.py\nindex f8e25bb3..7852d5d8 100644\n--- a/src/plone/restapi/tests/test_batching.py\n+++ b/src/plone/restapi/tests/test_batching.py\n@@ -35,6 +35,9 @@ def setUp(self):\n         self.api_session.headers.update({\'Accept\': \'application/json\'})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def _create_doc(self, container, number):\n         createContentInContainer(\n             container, u\'DXTestDocument\',\ndiff --git a/src/plone/restapi/tests/test_copymove.py b/src/plone/restapi/tests/test_copymove.py\nindex 95f32042..6cc45052 100644\n--- a/src/plone/restapi/tests/test_copymove.py\n+++ b/src/plone/restapi/tests/test_copymove.py\n@@ -87,6 +87,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_copy_single_object(self):\n         response = self.api_session.post(\n             \'/@copy\',\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex e0ee2df2..a2ddbfc5 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -132,6 +132,7 @@ def save_request_and_response_for_docs(name, response):\n                 # ever decide to dump that header\n                 response.request.prepare_body(data=body, files=None)\n \n+            req.flush()\n             if (isinstance(response.request.body, six.text_type)\n                     or not hasattr(req, \'buffer\')):\n                 req.write(response.request.body)\n@@ -225,8 +226,10 @@ def create_folder(self):\n         return folder\n \n     def tearDown(self):\n+        self.api_session.close()\n         self.time_freezer.stop()\n         popGlobalRegistry(getSite())\n+        self.api_session.close()\n \n     def test_documentation_content_crud(self):\n         folder = self.create_folder()\n@@ -296,7 +299,6 @@ def test_documentation_news_item(self):\n             \'2016-01-21T02:14:48+00:00\')\n         self.portal.newsitem.modification_date = DateTime(\n             \'2016-01-21T02:24:11+00:00\')\n-        import transaction\n         transaction.commit()\n \n         with patch.object(storage, \'uuid4\', return_value=\'uuid1\'):\n@@ -314,7 +316,6 @@ def test_documentation_event(self):\n         self.portal.event.creation_date = DateTime(\'2016-01-21T03:14:48+00:00\')\n         self.portal.event.modification_date = DateTime(\n             \'2016-01-21T03:24:11+00:00\')\n-        import transaction\n         transaction.commit()\n         response = self.api_session.get(self.portal.event.absolute_url())\n         save_request_and_response_for_docs(\'event\', response)\n@@ -327,7 +328,6 @@ def test_documentation_link(self):\n         self.portal.link.creation_date = DateTime(\'2016-01-21T04:14:48+00:00\')\n         self.portal.link.modification_date = DateTime(\n             \'2016-01-21T04:24:11+00:00\')\n-        import transaction\n         transaction.commit()\n         response = self.api_session.get(self.portal.link.absolute_url())\n         save_request_and_response_for_docs(\'link\', response)\n@@ -349,7 +349,6 @@ def test_documentation_file(self):\n         self.portal.file.creation_date = DateTime(\'2016-01-21T05:14:48+00:00\')\n         self.portal.file.modification_date = DateTime(\n             \'2016-01-21T05:24:11+00:00\')\n-        import transaction\n         transaction.commit()\n         response = self.api_session.get(self.portal.file.absolute_url())\n         save_request_and_response_for_docs(\'file\', response)\n@@ -369,7 +368,6 @@ def test_documentation_image(self):\n         self.portal.image.creation_date = DateTime(\'2016-01-21T06:14:48+00:00\')\n         self.portal.image.modification_date = DateTime(\n             \'2016-01-21T06:24:11+00:00\')\n-        import transaction\n         transaction.commit()\n         with patch.object(storage, \'uuid4\', return_value=\'uuid1\'):\n             response = self.api_session.get(self.portal.image.absolute_url())\n@@ -377,7 +375,6 @@ def test_documentation_image(self):\n \n     def test_documentation_folder(self):\n         folder = self.create_folder()\n-        import transaction\n         transaction.commit()\n         response = self.api_session.get(folder.absolute_url())\n         save_request_and_response_for_docs(\'folder\', response)\n@@ -406,7 +403,6 @@ def test_documentation_collection(self):\n             \'2016-01-21T08:14:48+00:00\')\n         self.portal.collection.modification_date = DateTime(\n             \'2016-01-21T08:24:11+00:00\')\n-        import transaction\n         transaction.commit()\n         response = self.api_session.get(self.portal.collection.absolute_url())\n         save_request_and_response_for_docs(\'collection\', response)\n@@ -435,7 +431,6 @@ def test_documentation_search_options(self):\n             id=\'folder2\',\n             title=\'Folder 2\'\n         )\n-        import transaction\n         transaction.commit()\n         query = {\'sort_on\': \'path\',\n                  \'path.query\': \'/plone/folder1\',\n@@ -464,7 +459,6 @@ def test_documentation_search_multiple_paths(self):\n             id=\'doc2\',\n             title=\'Lorem Ipsum\'\n         )\n-        import transaction\n         transaction.commit()\n         query = {\'sort_on\': \'path\',\n                  \'path.query\': [\'/plone/folder1\', \'/plone/folder2\'],\n@@ -478,7 +472,6 @@ def test_documentation_search_metadata_fields(self):\n             id=\'doc1\',\n             title=\'Lorem Ipsum\'\n         )\n-        import transaction\n         transaction.commit()\n         query = {\'SearchableText\': \'lorem\',\n                  \'metadata_fields\': [\'modified\', \'created\']}\n@@ -491,7 +484,6 @@ def test_documentation_search_fullobjects(self):\n             id=\'doc1\',\n             title=\'Lorem Ipsum\'\n         )\n-        import transaction\n         transaction.commit()\n         query = {\'SearchableText\': \'lorem\',\n                  \'fullobjects\': 1}\n@@ -550,7 +542,6 @@ def test_documentation_jwt_login(self):\n         self.portal.acl_users.jwt_auth._secret = \'secret\'\n         self.portal.acl_users.jwt_auth.use_keyring = False\n         self.portal.acl_users.jwt_auth.token_timeout = 0\n-        import transaction\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n@@ -563,7 +554,6 @@ def test_documentation_jwt_logged_in(self):\n         self.portal.acl_users.jwt_auth.use_keyring = False\n         self.portal.acl_users.jwt_auth.token_timeout = 0\n         self.portal.acl_users.jwt_auth.store_tokens = True\n-        import transaction\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n@@ -579,7 +569,6 @@ def test_documentation_jwt_login_renew(self):\n         self.portal.acl_users.jwt_auth._secret = \'secret\'\n         self.portal.acl_users.jwt_auth.use_keyring = False\n         self.portal.acl_users.jwt_auth.token_timeout = 0\n-        import transaction\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n@@ -596,7 +585,6 @@ def test_documentation_jwt_logout(self):\n         self.portal.acl_users.jwt_auth.use_keyring = False\n         self.portal.acl_users.jwt_auth.token_timeout = 0\n         self.portal.acl_users.jwt_auth.store_tokens = True\n-        import transaction\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n@@ -659,6 +647,7 @@ def test_documentation_users_as_anonymous(self):\n         response = logged_out_api_session.get(\'@users\')\n         save_request_and_response_for_docs(\'users_anonymous\', response)\n         self.assertEqual(response.status_code, 401)\n+        logged_out_api_session.close()\n \n     def test_documentations_users_as_unauthorized_user(self):\n         properties = {\n@@ -684,6 +673,7 @@ def test_documentations_users_as_unauthorized_user(self):\n         response = standard_api_session.get(\'@users\')\n         save_request_and_response_for_docs(\'users_unauthorized\', response)\n         self.assertEqual(response.status_code, 401)\n+        standard_api_session.close()\n \n     def test_documentation_users_get(self):\n         properties = {\n@@ -724,6 +714,7 @@ def test_documentation_users_anonymous_get(self):\n \n         response = logged_out_api_session.get(\'@users/noam\')\n         save_request_and_response_for_docs(\'users_anonymous_get\', response)\n+        logged_out_api_session.close()\n \n     def test_documentation_users_unauthorized_get(self):\n         properties = {\n@@ -756,6 +747,7 @@ def test_documentation_users_unauthorized_get(self):\n \n         response = logged_out_api_session.get(\'@users/noam\')\n         save_request_and_response_for_docs(\'users_unauthorized_get\', response)\n+        logged_out_api_session.close()\n \n     def test_documentation_users_authorized_get(self):\n         properties = {\n@@ -779,6 +771,7 @@ def test_documentation_users_authorized_get(self):\n         logged_out_api_session.auth = (\'noam\', \'secret\')\n         response = logged_out_api_session.get(\'@users/noam\')\n         save_request_and_response_for_docs(\'users_authorized_get\', response)\n+        logged_out_api_session.close()\n \n     def test_documentation_users_filtered_get(self):\n         properties = {\n@@ -1394,6 +1387,7 @@ def create_document(self):\n     def tearDown(self):\n         self.time_freezer.stop()\n         popGlobalRegistry(getSite())\n+        self.api_session.close()\n \n     def test_translate_messages_types(self):\n         response = self.api_session.get(\'/@types\')\n@@ -1454,6 +1448,7 @@ def setUp(self):\n \n     def tearDown(self):\n         self.time_freezer.stop()\n+        self.api_session.close()\n \n     def create_document_with_comments(self):\n         self.portal.invokeFactory(\'Document\', id=\'front-page\')\n@@ -1631,7 +1626,6 @@ def setUp(self):\n         )\n         self.es_content = self.portal[\'es\'].get(es_id)\n \n-        import transaction\n         transaction.commit()\n         self.browser = Browser(self.app)\n         self.browser.handleErrors = False\n@@ -1642,6 +1636,7 @@ def setUp(self):\n \n     def tearDown(self):\n         self.time_freezer.stop()\n+        self.api_session.close()\n \n     def test_documentation_translations_post(self):\n         response = self.api_session.post(\ndiff --git a/src/plone/restapi/tests/test_dxcontent_deserializer.py b/src/plone/restapi/tests/test_dxcontent_deserializer.py\nindex 6cd85ccd..b8def61d 100644\n--- a/src/plone/restapi/tests/test_dxcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_deserializer.py\n@@ -210,7 +210,7 @@ def test_deserializer_sets_missing_value_on_required_field(self):\n \n     def test_set_layout(self):\n         current_layout = self.portal.doc1.getLayout()\n-        self.assertNotEquals(current_layout, "my_new_layout")\n+        self.assertNotEqual(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n         self.assertEqual(\'my_new_layout\', self.portal.doc1.getLayout())\n \ndiff --git a/src/plone/restapi/tests/test_error_handling.py b/src/plone/restapi/tests/test_error_handling.py\nindex 9cad014d..7cb02d73 100644\n--- a/src/plone/restapi/tests/test_error_handling.py\n+++ b/src/plone/restapi/tests/test_error_handling.py\n@@ -52,6 +52,9 @@ def setUp(self):\n         self.folder_url = self.folder.absolute_url()\n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     @unittest.skip(\'Not working since we moved to plone.rest\')\n     def test_404_not_found(self):\n         response = self.api_session.get(\'non-existing-resource\')\ndiff --git a/src/plone/restapi/tests/test_expansion.py b/src/plone/restapi/tests/test_expansion.py\nindex 8bed02c9..de805d73 100644\n--- a/src/plone/restapi/tests/test_expansion.py\n+++ b/src/plone/restapi/tests/test_expansion.py\n@@ -120,6 +120,9 @@ def setUp(self):\n             title=u\'Some Folder\')\n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_actions_is_expandable(self):\n         response = self.api_session.get(\'/folder\')\n \n@@ -331,6 +334,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_translations_is_expandable(self):\n         response = self.api_session.get(\'/en/test-document\')\n \ndiff --git a/src/plone/restapi/tests/test_locking.py b/src/plone/restapi/tests/test_locking.py\nindex 0e7b49fb..44e57653 100644\n--- a/src/plone/restapi/tests/test_locking.py\n+++ b/src/plone/restapi/tests/test_locking.py\n@@ -32,6 +32,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_lock_object(self):\n         response = self.api_session.post(\'/@lock\',)\n         transaction.commit()\ndiff --git a/src/plone/restapi/tests/test_permissions.py b/src/plone/restapi/tests/test_permissions.py\nindex 0bf9c634..84a94c9b 100644\n--- a/src/plone/restapi/tests/test_permissions.py\n+++ b/src/plone/restapi/tests/test_permissions.py\n@@ -24,6 +24,9 @@ def setUp(self):\n         self.api_session.headers.update({\'Accept\': \'application/json\'})\n         self.api_session.auth = (TEST_USER_NAME, TEST_USER_PASSWORD)\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_anonymous_allowed_to_use_api_by_default(self):\n         setRoles(self.portal, TEST_USER_ID, [\'Anonymous\'])\n         transaction.commit()\ndiff --git a/src/plone/restapi/tests/test_registry.py b/src/plone/restapi/tests/test_registry.py\nindex bee9973c..7bb89ba9 100644\n--- a/src/plone/restapi/tests/test_registry.py\n+++ b/src/plone/restapi/tests/test_registry.py\n@@ -39,6 +39,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_registry_record(self):\n         response = self.api_session.get(\'/@registry/foo.bar\')\n \ndiff --git a/src/plone/restapi/tests/test_roles.py b/src/plone/restapi/tests/test_roles.py\nindex 05291d40..474dd4cc 100644\n--- a/src/plone/restapi/tests/test_roles.py\n+++ b/src/plone/restapi/tests/test_roles.py\n@@ -19,6 +19,9 @@ def setUp(self):\n         self.api_session.headers.update({\'Accept\': \'application/json\'})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_roles_endpoint_lists_roles(self):\n         response = self.api_session.get(\'/@roles\')\n \ndiff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex 942f9f8a..827d1526 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -102,6 +102,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_overall_response_format(self):\n         response = self.api_session.get(\'/@search\')\n \ndiff --git a/src/plone/restapi/tests/test_services.py b/src/plone/restapi/tests/test_services.py\nindex 7e25c043..9a68830c 100644\n--- a/src/plone/restapi/tests/test_services.py\n+++ b/src/plone/restapi/tests/test_services.py\n@@ -33,6 +33,9 @@ def setUp(self):\n         self.api_session.headers.update({\'Accept\': \'application/json\'})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_document(self):\n         self.portal.invokeFactory(\n             \'Document\',\ndiff --git a/src/plone/restapi/tests/test_services_actions.py b/src/plone/restapi/tests/test_services_actions.py\nindex 9c3332d5..e90688ce 100644\n--- a/src/plone/restapi/tests/test_services_actions.py\n+++ b/src/plone/restapi/tests/test_services_actions.py\n@@ -17,7 +17,7 @@\n TEST_CATEGORY_ID = \'testcategory\'\n \n \n-class TestRegistry(unittest.TestCase):\n+class TestActions(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n@@ -66,6 +66,10 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+        self.anon_api_session.close()\n+\n     def test_actions_all_categories(self):\n         response = self.api_session.get(\'/@actions\')\n \ndiff --git a/src/plone/restapi/tests/test_services_breadcrumbs.py b/src/plone/restapi/tests/test_services_breadcrumbs.py\nindex b65f6618..190e6a0d 100644\n--- a/src/plone/restapi/tests/test_services_breadcrumbs.py\n+++ b/src/plone/restapi/tests/test_services_breadcrumbs.py\n@@ -35,6 +35,9 @@ def setUp(self):\n             title=u\'A document\')\n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_breadcrumbs(self):\n         response = self.api_session.get(\'/folder/doc1/@breadcrumbs\')\n \ndiff --git a/src/plone/restapi/tests/test_services_comments.py b/src/plone/restapi/tests/test_services_comments.py\nindex 67cc15a0..0eb86824 100644\n--- a/src/plone/restapi/tests/test_services_comments.py\n+++ b/src/plone/restapi/tests/test_services_comments.py\n@@ -55,6 +55,10 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+        self.user_session.close()\n+\n     def test_list_datastructure(self):\n         url = \'{}/@comments\'.format(self.doc.absolute_url())\n         response = self.api_session.get(url)\ndiff --git a/src/plone/restapi/tests/test_services_content.py b/src/plone/restapi/tests/test_services_content.py\nindex 3af4b406..54b12521 100644\n--- a/src/plone/restapi/tests/test_services_content.py\n+++ b/src/plone/restapi/tests/test_services_content.py\n@@ -34,6 +34,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_response(self):\n         response = self.api_session.get(self.doc.absolute_url())\n         self.assertIn(\'version\', response.json())\ndiff --git a/src/plone/restapi/tests/test_services_controlpanels.py b/src/plone/restapi/tests/test_services_controlpanels.py\nindex aed41985..4955e5da 100644\n--- a/src/plone/restapi/tests/test_services_controlpanels.py\n+++ b/src/plone/restapi/tests/test_services_controlpanels.py\n@@ -32,6 +32,9 @@ def setUp(self):\n         self.api_session.headers.update({\'Accept\': \'application/json\'})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_listing(self):\n         # Do we get a list with at least one item?\n         response = self.api_session.get(\'/@controlpanels\')\ndiff --git a/src/plone/restapi/tests/test_services_email_notification.py b/src/plone/restapi/tests/test_services_email_notification.py\nindex 4a75e6b7..9bd05135 100644\n--- a/src/plone/restapi/tests/test_services_email_notification.py\n+++ b/src/plone/restapi/tests/test_services_email_notification.py\n@@ -21,7 +21,7 @@\n     PLONE5 = True\n \n \n-@unittest.skipIf(not PLONE5, \'email notification not implemented for Plone < 5.\') # noqa\n+@unittest.skipIf(not PLONE5, \'email notification not implemented for Plone < 5.\')  # noqa\n class EmailNotificationEndpoint(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n@@ -46,6 +46,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_email_notification(self):\n         response = self.api_session.post(\n             \'/@email-notification\',\ndiff --git a/src/plone/restapi/tests/test_services_email_send.py b/src/plone/restapi/tests/test_services_email_send.py\nindex 32efd9e8..9fe77368 100644\n--- a/src/plone/restapi/tests/test_services_email_send.py\n+++ b/src/plone/restapi/tests/test_services_email_send.py\n@@ -46,6 +46,10 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+        self.anon_api_session.close()\n+\n     def test_email_send(self):\n         response = self.api_session.post(\n             \'/@email-send\',\ndiff --git a/src/plone/restapi/tests/test_services_groups.py b/src/plone/restapi/tests/test_services_groups.py\nindex 59ebff50..cf265f93 100644\n--- a/src/plone/restapi/tests/test_services_groups.py\n+++ b/src/plone/restapi/tests/test_services_groups.py\n@@ -38,6 +38,9 @@ def setUp(self):\n                             description=properties[\'description\'])\n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_list_groups(self):\n         response = self.api_session.get(\'/@groups\')\n \ndiff --git a/src/plone/restapi/tests/test_services_history.py b/src/plone/restapi/tests/test_services_history.py\nindex 7dbbd54e..0d262098 100644\n--- a/src/plone/restapi/tests/test_services_history.py\n+++ b/src/plone/restapi/tests/test_services_history.py\n@@ -40,6 +40,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_types(self):\n         # Check if we have all history types in our test setup\n         response = self.api_session.get(self.endpoint_url)\n@@ -165,6 +168,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_actions_are_translated(self):\n         url = self.doc.absolute_url() + \'/@history\'\n         response = self.api_session.get(url)\ndiff --git a/src/plone/restapi/tests/test_services_navigation.py b/src/plone/restapi/tests/test_services_navigation.py\nindex 4a25f850..e7c08903 100644\n--- a/src/plone/restapi/tests/test_services_navigation.py\n+++ b/src/plone/restapi/tests/test_services_navigation.py\n@@ -55,6 +55,9 @@ def setUp(self):\n             title=u\'A document\')\n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_navigation_with_no_params_gets_only_top_level(self):\n         response = self.api_session.get(\'/folder/@navigation\')\n \ndiff --git a/src/plone/restapi/tests/test_services_principals.py b/src/plone/restapi/tests/test_services_principals.py\nindex 64e2d647..2aaaf608 100644\n--- a/src/plone/restapi/tests/test_services_principals.py\n+++ b/src/plone/restapi/tests/test_services_principals.py\n@@ -52,6 +52,9 @@ def setUp(self):\n                             description=properties[\'description\'])\n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_principals(self):\n         response = self.api_session.get(\n             \'/@principals\',\ndiff --git a/src/plone/restapi/tests/test_services_tiles.py b/src/plone/restapi/tests/test_services_tiles.py\nindex 4efd6869..7e6adf17 100644\n--- a/src/plone/restapi/tests/test_services_tiles.py\n+++ b/src/plone/restapi/tests/test_services_tiles.py\n@@ -75,6 +75,9 @@ def setUp(self):\n         provideAdapter(SampleTile, (Interface, Interface),\n                        IBasicTile, name=u\'sample.tile\')\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_available_tiles(self):\n         response = self.api_session.get(\'/@tiles\')\n \ndiff --git a/src/plone/restapi/tests/test_services_types.py b/src/plone/restapi/tests/test_services_types.py\nindex cf22cf7e..ef7dfe9c 100644\n--- a/src/plone/restapi/tests/test_services_types.py\n+++ b/src/plone/restapi/tests/test_services_types.py\n@@ -26,6 +26,9 @@ def setUp(self):\n         self.api_session.headers.update({\'Accept\': \'application/json\'})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_types(self):\n         response = self.api_session.get(\n             \'{}/@types\'.format(self.portal.absolute_url())\n@@ -190,6 +193,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_types_translated(self):\n         response = self.api_session.get(\n             \'{}/@types\'.format(self.portal.absolute_url())\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex fadf8007..92097918 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -67,6 +67,10 @@ def setUp(self):\n         )\n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+        self.anon_api_session.close()\n+\n     def test_list_users(self):\n         response = self.api_session.get(\'/@users\')\n \n@@ -95,6 +99,7 @@ def test_list_users_without_being_manager(self):\n \n         response = noam_api_session.get(\'/@users\')\n         self.assertEqual(response.status_code, 401)\n+        noam_api_session.close()\n \n     def test_list_users_as_anonymous(self):\n \n@@ -343,6 +348,7 @@ def test_get_other_user_info_when_logged_in(self):\n \n         response = noam_api_session.get(\'/@users/otheruser\')\n         self.assertEqual(response.status_code, 401)\n+        noam_api_session.close()\n \n     def test_get_search_user_with_filter(self):\n         response = self.api_session.post(\n@@ -406,6 +412,7 @@ def test_get_search_user_with_filter_as_unauthorized_user(self):\n \n         response = noam_api_session.get(\'/@users\', params={\'query\': \'howa\'})\n         self.assertEqual(response.status_code, 401)\n+        noam_api_session.close()\n \n     def test_get_non_existing_user(self):\n         response = self.api_session.get(\'/@users/non-existing-user\')\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex f7c57563..25b6cf65 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -139,6 +139,7 @@ def test_context_vocabulary(self):\n             })\n \n     def tearDown(self):\n+        self.api_session.close()\n         gsm = getGlobalSiteManager()\n         gsm.unregisterUtility(provided=IVocabularyFactory,\n                               name=\'plone.restapi.tests.test_vocabulary\')\ndiff --git a/src/plone/restapi/tests/test_site_deserializer.py b/src/plone/restapi/tests/test_site_deserializer.py\nindex ad7f7c0c..46f38550 100644\n--- a/src/plone/restapi/tests/test_site_deserializer.py\n+++ b/src/plone/restapi/tests/test_site_deserializer.py\n@@ -35,6 +35,6 @@ def deserialize(self, body=\'{}\', validate_all=False, context=None):\n \n     def test_set_layout(self):\n         current_layout = self.portal.getLayout()\n-        self.assertNotEquals(current_layout, "my_new_layout")\n+        self.assertNotEqual(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n         self.assertEqual(\'my_new_layout\', self.portal.getLayout())\ndiff --git a/src/plone/restapi/tests/test_tus.py b/src/plone/restapi/tests/test_tus.py\nindex 3879ca81..e7ec7858 100644\n--- a/src/plone/restapi/tests/test_tus.py\n+++ b/src/plone/restapi/tests/test_tus.py\n@@ -400,6 +400,7 @@ def test_tus_can_replace_pdf_file(self):\n         self.assertEqual(pdf_file_size, self.file.file.size)\n \n     def tearDown(self):\n+        self.api_session.close()\n         client_home = os.environ.get(\'CLIENT_HOME\')\n         tmp_dir = os.path.join(client_home, \'tus-uploads\')\n         if os.path.isdir(tmp_dir):\n@@ -471,6 +472,7 @@ def test_cors_preflight_for_head_contains_tus_headers(self):\n         self.assertIn(\'Tus-Extension\', response.headers)\n \n     def tearDown(self):\n+        self.api_session.close()\n         gsm = getGlobalSiteManager()\n         gsm.unregisterAdapter(\n             CORSTestPolicy, (Interface, IBrowserRequest), ICORSPolicy)\n@@ -607,6 +609,9 @@ def setUp(self):\n         self.api_session.headers.update({\'Accept\': \'application/json\'})\n         self.api_session.auth = (TEST_USER_NAME, TEST_USER_PASSWORD)\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_tus_can_upload_pdf_file(self):\n         # initialize the upload with POST\n         pdf_file_path = os.path.join(os.path.dirname(__file__),\ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex 1ed82b54..90e2a628 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -18,6 +18,7 @@\n from plone.restapi.types.utils import get_jsonschema_for_fti\n from plone.restapi.types.utils import get_jsonschema_for_portal_type\n from plone.restapi.types.utils import get_jsonschema_properties\n+from z3c.form.browser.text import TextWidget\n \n \n class IDummySchema(model.Schema):\n@@ -58,8 +59,13 @@ class ITaggedValuesSchema(model.Schema):\n         description=u"",\n     )\n \n-    another_field = schema.TextLine(title=u"Tagged Values widget params")\n-    form.widget(\'another_field\', a_param=\'some_value\')\n+    parametrized_widget_field = schema.TextLine(\n+        title=u"Parametrized widget field")\n+    form.widget(\'parametrized_widget_field\', a_param=\'some_value\')\n+\n+    not_parametrized_widget_field = schema.TextLine(\n+        title=u"No parametrized widget field")\n+    form.widget(not_parametrized_widget_field=TextWidget)\n \n \n class TestJsonSchemaUtils(TestCase):\n@@ -182,7 +188,19 @@ def test_get_jsonschema_with_widget_params(self):\n         )\n         self.assertEqual(\n             \'some_value\',\n-            jsonschema[\'properties\'][\'another_field\'][\'a_param\']\n+            jsonschema[\'properties\'][\'parametrized_widget_field\'][\'a_param\']\n+        )\n+\n+    def test_do_not_fail_with_non_parametrized_widget(self):\n+        ttool = getToolByName(self.portal, \'portal_types\')\n+        jsonschema = get_jsonschema_for_fti(\n+            ttool[\'TaggedDocument\'],\n+            self.portal,\n+            self.request\n+        )\n+        self.assertEqual(\n+            u\'No parametrized widget field\',\n+            jsonschema[\'properties\'][\'not_parametrized_widget_field\'][\'title\']\n         )\n \n \ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex cf4a84e0..e2bc597a 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -16,6 +16,7 @@\n from collections import OrderedDict\n from copy import copy\n from plone.autoform.form import AutoExtensibleForm\n+from plone.autoform.interfaces import IParameterizedWidget\n from plone.autoform.interfaces import WIDGETS_KEY\n from plone.dexterity.utils import getAdditionalSchemata\n from plone.restapi.serializer.converters import json_compatible\n@@ -139,7 +140,7 @@ def get_tagged_values(schemas, key):\n         tagged_values = mergedTaggedValueDict(schema, key)\n         for field_name in schema:\n             widget = tagged_values.get(field_name)\n-            if widget and widget.params:\n+            if IParameterizedWidget.providedBy(widget) and widget.params:\n                 params[field_name] = widget.params.copy()\n                 for k, v in params[field_name].items():\n                     if callable(v):\ndiff --git a/test-no-sphinx-warnings.in b/test-no-sphinx-warnings.in\nindex 8dfb0aac..ba7c0a7f 100644\n--- a/test-no-sphinx-warnings.in\n+++ b/test-no-sphinx-warnings.in\n@@ -3,6 +3,11 @@\n # CI test that should fail if there are warnings or even errors when building\n # the Sphinx docs.\n \n+if [ "$PLONE_VERSION" = "5.2.x" ]; then\n+    echo "Skipping checks for sphinx warnings for 5.2.x"\n+    exit 0\n+fi\n+\n set -euo pipefail\n \n BUILD_LOG="sphinx_build.log"\ndiff --git a/versions.cfg b/versions.cfg\nindex f9083016..027117cc 100644\n--- a/versions.cfg\n+++ b/versions.cfg\n@@ -1,7 +1,7 @@\n [versions]\n \n # plone.rest\n-plone.rest = 1.1.1\n+plone.rest = 1.4.0\n \n # Build\n setuptools =\n@@ -9,7 +9,7 @@ zc.buildout =\n zc.recipe.egg = 2.0.3\n \n # Code-analysis\n-plone.recipe.codeanalysis = 3.0.0a0\n+plone.recipe.codeanalysis = 3.0.1\n coverage = 3.7.1\n pep8 = 1.7.1\n flake8 = 3.5.0\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-02-04T23:38:02+01:00
Author: Elio Schmutz (elioschmutz) <e.schmutz@4teamwork.ch>
Commit: https://github.com/plone/plone.restapi/commit/a6bbf5db44189637233c8e4456584a7c00b4ef4f

Improve tests to fix broken tests.

Files changed:
M src/plone/restapi/tests/test_services_types.py
M src/plone/restapi/tests/test_types.py

b'diff --git a/src/plone/restapi/tests/test_services_types.py b/src/plone/restapi/tests/test_services_types.py\nindex ef7dfe9c..bb83e4f1 100644\n--- a/src/plone/restapi/tests/test_services_types.py\n+++ b/src/plone/restapi/tests/test_services_types.py\n@@ -118,8 +118,7 @@ def test_file_type(self):\n     def test_event_type(self):\n         response = self.api_session.get(\'/@types/Event\')\n         response = response.json()\n-        self.assertIn(\'default\', response[\'properties\'][\'start\'])\n-        self.assertIn(\'default_timezone\', response[\'properties\'][\'start\'])\n+        self.assertIn(\'title\', response[\'properties\'][\'start\'])\n \n     def test_addable_types_for_non_manager_user(self):\n         user = api.user.create(\ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex 90e2a628..8c3a8d87 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -61,7 +61,8 @@ class ITaggedValuesSchema(model.Schema):\n \n     parametrized_widget_field = schema.TextLine(\n         title=u"Parametrized widget field")\n-    form.widget(\'parametrized_widget_field\', a_param=\'some_value\')\n+    form.widget(\'parametrized_widget_field\',\n+                a_param=\'some_value\', defaultFactory=lambda: \'Foo\')\n \n     not_parametrized_widget_field = schema.TextLine(\n         title=u"No parametrized widget field")\n@@ -203,6 +204,20 @@ def test_do_not_fail_with_non_parametrized_widget(self):\n             jsonschema[\'properties\'][\'not_parametrized_widget_field\'][\'title\']\n         )\n \n+    def test_resolve_callable_widget_params(self):\n+        ttool = getToolByName(self.portal, \'portal_types\')\n+        jsonschema = get_jsonschema_for_fti(\n+            ttool[\'TaggedDocument\'],\n+            self.portal,\n+            self.request\n+        )\n+\n+        self.assertEqual(\n+            u\'Foo\',\n+            jsonschema[\'properties\'][\'parametrized_widget_field\'].get(\n+                \'defaultFactory\')\n+        )\n+\n \n class TestJsonSchemaProviders(TestCase):\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-02-06T08:32:32+01:00
Author: Elio Schmutz (elioschmutz) <e.schmutz@4teamwork.ch>
Commit: https://github.com/plone/plone.restapi/commit/a464e86c05081d9f0bcbd425460790fa0fc36b30

Merge branch 'master' into issue-574-event-type

Files changed:
M CHANGES.rst
M plone-5.1.x.cfg
M setup.py
M src/plone/restapi/tests/http-examples/registry_get_list.resp

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex fd237416..15b5a5a2 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,7 +1,13 @@\n Changelog\n =========\n \n-3.5.1 (unreleased)\n+3.5.2 (unreleased)\n+------------------\n+\n+- Nothing changed yet.\n+\n+\n+3.5.1 (2019-02-05)\n ------------------\n \n Bugfixes:\n@@ -10,18 +16,6 @@ Bugfixes:\n   Fixes issue `664 <https://github.com/plone/plone.restapi/issues/664>`_.\n   [elioschmutz]\n \n-- Tests: retry request on ConnectionError.\n-  On Jenkins we often get one ConnectionError in a seemingly random test.\n-  Retrying after a short pause helps.\n-  Fixes issue `648 <https://github.com/plone/plone.restapi/issues/648>`_.\n-  [maurits, gforcada]\n-\n-- Close the api_session in tests.\n-  This prevents lots of ResourceWarnings about unclosed sockets.\n-  Fixes issues `636 <https://github.com/plone/plone.restapi/issues/636>`_\n-  and `648 <https://github.com/plone/plone.restapi/issues/648>`_.\n-  [maurits, gforcada]\n-\n \n 3.5.0 (2018-11-06)\n ------------------\ndiff --git a/plone-5.1.x.cfg b/plone-5.1.x.cfg\nindex e716cb72..2fde6418 100644\n--- a/plone-5.1.x.cfg\n+++ b/plone-5.1.x.cfg\n@@ -1,5 +1,5 @@\n [buildout]\n extends =\n     base.cfg\n-    http://dist.plone.org/release/5.1.4/versions.cfg\n+    http://dist.plone.org/release/5.1.5/versions.cfg\n     versions.cfg\ndiff --git a/setup.py b/setup.py\nindex a57ddbcd..d213cadc 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n \n import sys\n \n-version = \'3.5.1.dev.0\'\n+version = \'3.5.2-dev.0\'\n \n long_description = (\n     open(\'README.rst\').read() + \'\\n\' +\ndiff --git a/src/plone/restapi/tests/http-examples/registry_get_list.resp b/src/plone/restapi/tests/http-examples/registry_get_list.resp\nindex a72b47dc..f2bb5f51 100644\n--- a/src/plone/restapi/tests/http-examples/registry_get_list.resp\n+++ b/src/plone/restapi/tests/http-examples/registry_get_list.resp\n@@ -6,7 +6,7 @@ Content-Type: application/json\n   "batching": {\n     "@id": "http://localhost:55001/plone/@registry", \n     "first": "http://localhost:55001/plone/@registry?b_start=0", \n-    "last": "http://localhost:55001/plone/@registry?b_start=1650", \n+    "last": "http://localhost:55001/plone/@registry?b_start=1675", \n     "next": "http://localhost:55001/plone/@registry?b_start=25"\n   }, \n   "items": [\n@@ -495,5 +495,5 @@ Content-Type: application/json\n       "value": false\n     }\n   ], \n-  "items_total": 1673\n+  "items_total": 1683\n }\n\\ No newline at end of file\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-02-06T08:35:17+01:00
Author: Elio Schmutz (elioschmutz) <e.schmutz@4teamwork.ch>
Commit: https://github.com/plone/plone.restapi/commit/a7a32b74c879af2381b62152086fd5c1d0983c27

Update changelog

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 15b5a5a2..19e5b52c 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,7 +4,8 @@ Changelog\n 3.5.2 (unreleased)\n ------------------\n \n-- Nothing changed yet.\n+- Fix serializing the Event type. Fixes issue `574 <https://github.com/plone/plone.restapi/issues/574>`_\n+  [davisagli]\n \n \n 3.5.1 (2019-02-05)\n@@ -37,9 +38,6 @@ Bugfixes:\n - Make search work with a path query containing a list of paths in a virtual hosting setting.\n   [sunew]\n \n-- Fix serializing the Event type. Fixes https://github.com/plone/plone.restapi/issues/574\n-  [davisagli]\n-\n \n 3.4.4 (2018-08-31)\n ------------------\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-02-09T09:28:36+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.restapi/commit/879947e049821cec4dd9eb46850a232580a360a6

Merge branch 'master' into issue-574-event-type

Files changed:
A news/.gitkeep
A news/574.bugfix
A pyproject.toml
A setup.cfg
M CHANGES.rst
M MANIFEST.in
M performance.jmx
M plone-4.3.x-performance.cfg
M plone-5.0.x-performance.cfg
M plone-5.1.x-performance.cfg
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 19e5b52c..8c00a434 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,12 +1,12 @@\n Changelog\n =========\n \n-3.5.2 (unreleased)\n-------------------\n-\n-- Fix serializing the Event type. Fixes issue `574 <https://github.com/plone/plone.restapi/issues/574>`_\n-  [davisagli]\n+.. You should *NOT* be adding new change log entries to this file.\n+   You should create a file in the news directory instead.\n+   For helpful instructions, please see:\n+   https://github.com/plone/plone.releaser/blob/master/ADD-A-NEWS-ITEM.rst\n \n+.. towncrier release notes start\n \n 3.5.1 (2019-02-05)\n ------------------\ndiff --git a/MANIFEST.in b/MANIFEST.in\nindex 49ee44d6..19c0b7e9 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -13,3 +13,6 @@ exclude Dockerfile\n exclude Makefile\n exclude bootstrap-buildout.py\n global-exclude *.pyc\n+include pyproject.toml\n+recursive-exclude news *\n+exclude news\ndiff --git a/news/.gitkeep b/news/.gitkeep\nnew file mode 100644\nindex 00000000..e69de29b\ndiff --git a/news/574.bugfix b/news/574.bugfix\nnew file mode 100644\nindex 00000000..8f1f7840\n--- /dev/null\n+++ b/news/574.bugfix\n@@ -0,0 +1,2 @@\n+- Fix serializing the Event type. Fixes issue `574 <https://github.com/plone/plone.restapi/issues/574>`_\n+  [davisagli]\ndiff --git a/performance.jmx b/performance.jmx\nindex ba8836f0..da5e981d 100644\n--- a/performance.jmx\n+++ b/performance.jmx\n@@ -1,5 +1,5 @@\n <?xml version="1.0" encoding="UTF-8"?>\n-<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n+<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">\n   <hashTree>\n     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="plone.restapi" enabled="true">\n       <stringProp name="TestPlan.comments"></stringProp>\n@@ -118,7 +118,7 @@\n \t&quot;@type&quot;: &quot;News Item&quot;, &#xd;\n \t&quot;title&quot;: &quot;My News Item&quot;,&#xd;\n \t&quot;image&quot;: {&#xd;\n-\t\t&quot;data&quot;: &quot;TG9yZW0gSXBzdW0uCg==&quot;,&#xd;\n+\t\t&quot;data&quot;: &quot;iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAADRxJREFUeNrsXAtQU2cWvnlAwisogqsrOLvqqqu2xcpsl611q9M6VduOVWmLzrYKLRVtZ53aKR3c1fqc2aHTqttxkHbaop2pFGx1WUFY10VcnCrt7vCYQh2rFcMzPEIMBEhI9jvmzzZFSG6Sm5DEe2bO3Jub5P435/vPOd8597+RWCwWThT/EaloAhEQUURAREBEEQERARFFBEQERBQREBEQUURARBEBEQERRQQkCETuyZclEgl3r7fvyQYjxRObyMU56TiC9Pb2/kKpVM6AkROkUmk8APgZjiuxnYhtmMlkUmB7Uy6Xv4SteVw9JJiksLBQtmrVqvtlMtnvYPhF2C7Edk50dLQMbw9Ch6BGpmT4Yba1DAwMaJgthzz2OE/cK9BDVnd3d3xERMRTMP4K6GL8HiUO66H9TAf4zHqdTtcA4DKwaxBDloui0WimqFSqVISY1JiYmAfInkxvQU2jzTtn50TYGhBZlguye/duaX9//0oY7kxcXNwPCoXiLXiECm/VQ5ug2jHA4CU4L31fkFAR1CHr2rVrioSEhLSQkJDXkQ8mk4MwbxD0oltaWk5PmzbtLyzXeGSToPSQiooK5eDg4LaZM2degzfsARiUbL9nYNjCkGAK79MIBbI02EITGM+GJUuW1AOIbHiwluWGQS+TgzahAAmKpA7DS3p6eh7YsWNHLpL1bBxqhap9Nf7169d/EKIGCYocUltbGzFnzpxd8IjNeEkztc+X4+P3D02fPn2FWq3W2kDxyKaBCgh5BaropMjIyHzkiAk41CF0suYjyB83UMu8iN3bQrROAjKHIFfIDQbDDtQT5wAGJdZ2d8AwGo23ST25ltu3b6tZ1X5v1iGgsnHIFWeUSuVrePkDS9i8GRFmr6WxsbFk69atr4WGhqaTZmZmvtrQ0PB3vGV2lWF1dXXVC5U/AipkUYjSarWLoqKiCuAVnH2IcCHem4qKinKeffbZKpZrTHbkJrygoODhlJSUNzEUb7Jz4sSJV1JTU//Delweh6yAAITAQGhYi1idi13KFW418eAFRfPmzfuA1SODzCPo/IQwdW2j6urqXl6wYEEKn/Oh1umCp67Dbq+9lwR1DiEw9Hr9diTvPOy2spnocvFGRjp06NAXzHgDNjCYAWmf+lG6nJycQr6hC/VHHfdj9zf4cwhCiwyF3rvwjCxWV7j9w0ECWo4ePdpC3mUZZQqzY0PHjh3rwGdb+ZwTVLfakx5YQBWGBMbx48dzUV+sYoWereXhtrOR8ew9YxRQzPBCI5uoDscaHh427N+/v1JoQPzSQ/Ly8kI+/fTT4wBjBV52CnHOsLCwhO3btyudfW716tUhyAvxzj4HdvXN6dOne4WkvH7pIZRgUWztBR19BC97PPSKn+SirKysVGzet4yRdekz7e3t66VWGucwPII6X2DkwhK0HsIM8jhm8wuc9R6FkGKeNGnSdtQx88f6wM2bN38dGxv7ujMwwK40CKn/Ejpc+R0gX375ZXRMTMx72O3mBG6Rk2LiG2bMmFHe19f3h4qKiv9HB9rHsQ3x8fFU+ZucnQfAncPE6Rc6XPlVHUKhCkY5GB4e/gQnwGIBB0KLFqbiuo1IzHV3DshkCzB+KGdtTjqc9Waz2YhctP7gwYPfU2NR6GVAfgEIhSqEkgdnzpx5itUJvhACxpbkB/mGn1u3bpVOnz59H3UKGCsTFBCfJXW4eER0dPRv8QMW0tomaDQuvBPapdVqa8Fs3mDtEJeTOArHW01NTd9gq1WpVDEJCQlJqF1+7iyncNaVJRxfSk2tl88h9lV+QIUsmvkIQ0+AMb0il8sfZ4xkgMXeYTZL5axt0cVZl+Dwz9Jm89CFCxc+WLFiRRkSrW3JjgyghJWVlT310EMPvehKX4qHd5TAOw5QRY/fPWyzgd97CGsELjSZTIdowRmjr008KKJL3lFeXn6QwGBAGtn5pTqdLiQ5OfmzixcvDixevPhVQSia2Tx4+PDh41T028AICA8hMFBHbAN13cWoa783Lrynp6cGjGwbG+Mn7RCJddqS100AOHlRUVGzPB3vu++++2zu3Ll/Zd5htreBkB4iFdgzaJHBewDjz4yxGLxBX0nVanUV84y7elPsNSVqfUtLS5WnY9FS0bS0tGPMO8ycF0UqJBjwjAMKhSKVc/MOniuC3ESNQuNYVbetWQhp93QshL7cS5cudXN29zy8JXKBwJB0dnY+Dc9IsyvqvCqoqCdwzru/FjA7lSfXA3Z4cfny5ee4ES17v/aQs2fPToS8w8CgaanDDG5G/L4BdydqK3iLIS4ubjEPQ0uQZxa7O4bRaNRmZWUdZKHRxPlA5EKEKiTYF+Ahp7/66qv/Hjly5FtQTp3d7JVMnTo1dPfu3XOTkpLumz179lIeNYJTAbVdXl9fPw+7NQ6KTVqVkuwusaisrHw/Pz9fzY1xD8UvWRbxfoSPcACiZHnDyGoMy4iqOISYDyTsk08+SVq5cuUmGHWGJ9cOWm3RaDRPA/DGkWB0dHQkTpo06QupVOpW3AdpKEGBuZ9YHLVZnNjAf1onLGzI2fbOgywjZxOjoVIGDPWMwhByJuBH56NojPUAlBAMFYMQmQ9wihmzm4YidDXOu55SmzuhBuH2+rJlyzKvXLnSxnKHxVeAeByy2MUaeXzmTnXO7sgNYGabent7GwHMIx4Mb8L5NMTsoC8xwAkAWlFiWzjnUkJH3tCjANwLMDpZi8Sni+983n63WIWMZiguLv6IKmBPT8mKw2bWDWhhDUqLG9dmLi0tPZCdnf2tL2oOn/eynHyXZnNUYWHhsjVr1uxFrFdw4yw1NTUfJCYmfkSAUmvdhbDtn5W6q+0hYj8pKSmVRUVFOwXwFI+kqampBGDkc9aOs3G8rmPcALHLPbrnnnvuAgNlyFutFkcKhnglOTmZ6ijdeOQNf/GQu0BB+PqTrz1Fq9XWr127dldLS0u3M0YV9ICMBOX555+v9CUoOp2uESHzLRSAbeOVxP0OEAegeDV86fX679PS0t48d+4csbN+b97j8HuWBWNMDgkJoWfEleD91yIjIxvsCkiq6FUnTpxYgtm73xvsCzXQlfT09L2g3fT8YZ8nYATsIgcydldX1zyVSpWDSvoxu/aKHN5wY3BwcFd4eHiBrQK3A+WAUKBgHEN1dfVHS5cu/dxgMGg9BcMbgNz5srvK9/uMyTwGg3TjdTv0xghVQ/W0sJr7cV0ttVhiAcqa4eHhxlG+45J2dHQUbtu27WGck/48Jpyqek9+u70NhLSpTzwEs3LKokWLLrPHzxwlThVYzxsTJ0782N5TCgoKfr9u3Tq3PAWe0FZWVvb+M888U8lqDGqrGIViUwFXGFJ7fv78+dl81stSUkdIy964caNilDol2x32RUuMAMY/OOuibbofPmTx47+f8DogX3/9dXxYWFgKA4PPck/lzp07H6GcMwYoLrEveNt9nPUGk8FfmNS4AULeMWvWrM2sw8tXhhUKxa9s1zYSlLy8vNfoUQAGjFMJDQ2dbOtpcgEgXgUkIyNDGRUVtc6GD18F47Lt31WnZGZmXomNjf2jTCZb1draeoGHx4VyAfS0sdSL3iF5++23V8MgEW40+q46Kh4567/6dOzbt+9dorLOPI7zwaILvy8MaQlnX1/fSdQWC105J6hvM8Lck83NzVpHMd/Wvgd4OxMSEtaN9TmTydSDIvRhotVemniBwbJKSkqmIJn/xsWWBnf58uUjAMPpX+sxsAaqqqr+5iT8tXLj8JcbfgUIJfOkpKQ12PJmNWTgmpqaI48++mgpx3+VhzE1NbXWaDT2OKC9Dfc8IFQFI5mv4msIYk25ublbExMTP+ZcWwNFXjSk0+lqx/rA1atXKzgvPOnkLfHK6vdTp05NUSqV9zsyBNHW9vb2qtLS0i/S09O/YUD0ueAddxI9eSGqcfVoiXtoaKht/fr1lzgfLXLzS0AoXMHQT40Fhl6vv97Y2Hh2z549Z4uLi4kt0SI2YkpUVwy7US+Y2Z9QjuYdBW1tbQZOwH9aCEQPkUVGRj5pfwCJtV2tVv+7vLz8n1u2bKljAJAOMipr9qBws7BzjexhNW3YsOEzzoerDv0SkMOHD08Au1pIYYRAOH/+fMXmzZvrmPHtQTAJdIfOAlobMaKQNJ08eXJPbW2tlhvHBQvu/RoB2+9kFOSPhA8//JDa3L+E0hreGGgkZ32ARmarfYRS6o50dnYewX4zUzWo8BY2rlzIsXzRfhccEM7aMicAIrwFwogxFf39/ecJDBCFW9XV1W/i2GQ2tuSeBsQOFIkvjEGak5MzGUC0glE1nDlzZiNnvQGl9NX4fg+IL5WMDhb1skajObpp06YH8TrOl2CIgNw9viwjI4NWz5NGs3Ap8fE1CApIQP9vL1ulYnsUwjQui6P98PkQUQKh2yuKCEhQiHy8XFMU0UNEQEQRAREBEUUERAREFBEQERBRREBEEQERARFFBEQERBQRkOCV/wkwAG3HvBgewMy5AAAAAElFTkSuQmCC&quot;,&#xd;\n \t\t&quot;encoding&quot;: &quot;base64&quot;,&#xd;\n \t\t&quot;filename&quot;: &quot;lorem.png&quot;,&#xd;\n \t\t&quot;content-type&quot;: &quot;image/png&quot;&#xd;\n@@ -279,7 +279,7 @@\n \t&quot;@type&quot;: &quot;Image&quot;, &#xd;\n \t&quot;title&quot;: &quot;My Image&quot;, &#xd;\n \t&quot;image&quot;: {&#xd;\n-\t\t&quot;data&quot;: &quot;TG9yZW0gSXBzdW0uCg==&quot;,&#xd;\n+\t\t&quot;data&quot;:&quot;iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAADRxJREFUeNrsXAtQU2cWvnlAwisogqsrOLvqqqu2xcpsl611q9M6VduOVWmLzrYKLRVtZ53aKR3c1fqc2aHTqttxkHbaop2pFGx1WUFY10VcnCrt7vCYQh2rFcMzPEIMBEhI9jvmzzZFSG6Sm5DEe2bO3Jub5P435/vPOd8597+RWCwWThT/EaloAhEQUURAREBEEQERARFFBEQERBQREBEQUURARBEBEQERRQQkCETuyZclEgl3r7fvyQYjxRObyMU56TiC9Pb2/kKpVM6AkROkUmk8APgZjiuxnYhtmMlkUmB7Uy6Xv4SteVw9JJiksLBQtmrVqvtlMtnvYPhF2C7Edk50dLQMbw9Ch6BGpmT4Yba1DAwMaJgthzz2OE/cK9BDVnd3d3xERMRTMP4K6GL8HiUO66H9TAf4zHqdTtcA4DKwaxBDloui0WimqFSqVISY1JiYmAfInkxvQU2jzTtn50TYGhBZlguye/duaX9//0oY7kxcXNwPCoXiLXiECm/VQ5ug2jHA4CU4L31fkFAR1CHr2rVrioSEhLSQkJDXkQ8mk4MwbxD0oltaWk5PmzbtLyzXeGSToPSQiooK5eDg4LaZM2degzfsARiUbL9nYNjCkGAK79MIBbI02EITGM+GJUuW1AOIbHiwluWGQS+TgzahAAmKpA7DS3p6eh7YsWNHLpL1bBxqhap9Nf7169d/EKIGCYocUltbGzFnzpxd8IjNeEkztc+X4+P3D02fPn2FWq3W2kDxyKaBCgh5BaropMjIyHzkiAk41CF0suYjyB83UMu8iN3bQrROAjKHIFfIDQbDDtQT5wAGJdZ2d8AwGo23ST25ltu3b6tZ1X5v1iGgsnHIFWeUSuVrePkDS9i8GRFmr6WxsbFk69atr4WGhqaTZmZmvtrQ0PB3vGV2lWF1dXXVC5U/AipkUYjSarWLoqKiCuAVnH2IcCHem4qKinKeffbZKpZrTHbkJrygoODhlJSUNzEUb7Jz4sSJV1JTU//Delweh6yAAITAQGhYi1idi13KFW418eAFRfPmzfuA1SODzCPo/IQwdW2j6urqXl6wYEEKn/Oh1umCp67Dbq+9lwR1DiEw9Hr9diTvPOy2spnocvFGRjp06NAXzHgDNjCYAWmf+lG6nJycQr6hC/VHHfdj9zf4cwhCiwyF3rvwjCxWV7j9w0ECWo4ePdpC3mUZZQqzY0PHjh3rwGdb+ZwTVLfakx5YQBWGBMbx48dzUV+sYoWereXhtrOR8ew9YxRQzPBCI5uoDscaHh427N+/v1JoQPzSQ/Ly8kI+/fTT4wBjBV52CnHOsLCwhO3btyudfW716tUhyAvxzj4HdvXN6dOne4WkvH7pIZRgUWztBR19BC97PPSKn+SirKysVGzet4yRdekz7e3t66VWGucwPII6X2DkwhK0HsIM8jhm8wuc9R6FkGKeNGnSdtQx88f6wM2bN38dGxv7ujMwwK40CKn/Ejpc+R0gX375ZXRMTMx72O3mBG6Rk2LiG2bMmFHe19f3h4qKiv9HB9rHsQ3x8fFU+ZucnQfAncPE6Rc6XPlVHUKhCkY5GB4e/gQnwGIBB0KLFqbiuo1IzHV3DshkCzB+KGdtTjqc9Waz2YhctP7gwYPfU2NR6GVAfgEIhSqEkgdnzpx5itUJvhACxpbkB/mGn1u3bpVOnz59H3UKGCsTFBCfJXW4eER0dPRv8QMW0tomaDQuvBPapdVqa8Fs3mDtEJeTOArHW01NTd9gq1WpVDEJCQlJqF1+7iyncNaVJRxfSk2tl88h9lV+QIUsmvkIQ0+AMb0il8sfZ4xkgMXeYTZL5axt0cVZl+Dwz9Jm89CFCxc+WLFiRRkSrW3JjgyghJWVlT310EMPvehKX4qHd5TAOw5QRY/fPWyzgd97CGsELjSZTIdowRmjr008KKJL3lFeXn6QwGBAGtn5pTqdLiQ5OfmzixcvDixevPhVQSia2Tx4+PDh41T028AICA8hMFBHbAN13cWoa783Lrynp6cGjGwbG+Mn7RCJddqS100AOHlRUVGzPB3vu++++2zu3Ll/Zd5htreBkB4iFdgzaJHBewDjz4yxGLxBX0nVanUV84y7elPsNSVqfUtLS5WnY9FS0bS0tGPMO8ycF0UqJBjwjAMKhSKVc/MOniuC3ESNQuNYVbetWQhp93QshL7cS5cudXN29zy8JXKBwJB0dnY+Dc9IsyvqvCqoqCdwzru/FjA7lSfXA3Z4cfny5ee4ES17v/aQs2fPToS8w8CgaanDDG5G/L4BdydqK3iLIS4ubjEPQ0uQZxa7O4bRaNRmZWUdZKHRxPlA5EKEKiTYF+Ahp7/66qv/Hjly5FtQTp3d7JVMnTo1dPfu3XOTkpLumz179lIeNYJTAbVdXl9fPw+7NQ6KTVqVkuwusaisrHw/Pz9fzY1xD8UvWRbxfoSPcACiZHnDyGoMy4iqOISYDyTsk08+SVq5cuUmGHWGJ9cOWm3RaDRPA/DGkWB0dHQkTpo06QupVOpW3AdpKEGBuZ9YHLVZnNjAf1onLGzI2fbOgywjZxOjoVIGDPWMwhByJuBH56NojPUAlBAMFYMQmQ9wihmzm4YidDXOu55SmzuhBuH2+rJlyzKvXLnSxnKHxVeAeByy2MUaeXzmTnXO7sgNYGabent7GwHMIx4Mb8L5NMTsoC8xwAkAWlFiWzjnUkJH3tCjANwLMDpZi8Sni+983n63WIWMZiguLv6IKmBPT8mKw2bWDWhhDUqLG9dmLi0tPZCdnf2tL2oOn/eynHyXZnNUYWHhsjVr1uxFrFdw4yw1NTUfJCYmfkSAUmvdhbDtn5W6q+0hYj8pKSmVRUVFOwXwFI+kqampBGDkc9aOs3G8rmPcALHLPbrnnnvuAgNlyFutFkcKhnglOTmZ6ijdeOQNf/GQu0BB+PqTrz1Fq9XWr127dldLS0u3M0YV9ICMBOX555+v9CUoOp2uESHzLRSAbeOVxP0OEAegeDV86fX679PS0t48d+4csbN+b97j8HuWBWNMDgkJoWfEleD91yIjIxvsCkiq6FUnTpxYgtm73xvsCzXQlfT09L2g3fT8YZ8nYATsIgcydldX1zyVSpWDSvoxu/aKHN5wY3BwcFd4eHiBrQK3A+WAUKBgHEN1dfVHS5cu/dxgMGg9BcMbgNz5srvK9/uMyTwGg3TjdTv0xghVQ/W0sJr7cV0ttVhiAcqa4eHhxlG+45J2dHQUbtu27WGck/48Jpyqek9+u70NhLSpTzwEs3LKokWLLrPHzxwlThVYzxsTJ0782N5TCgoKfr9u3Tq3PAWe0FZWVvb+M888U8lqDGqrGIViUwFXGFJ7fv78+dl81stSUkdIy964caNilDol2x32RUuMAMY/OOuibbofPmTx47+f8DogX3/9dXxYWFgKA4PPck/lzp07H6GcMwYoLrEveNt9nPUGk8FfmNS4AULeMWvWrM2sw8tXhhUKxa9s1zYSlLy8vNfoUQAGjFMJDQ2dbOtpcgEgXgUkIyNDGRUVtc6GD18F47Lt31WnZGZmXomNjf2jTCZb1draeoGHx4VyAfS0sdSL3iF5++23V8MgEW40+q46Kh4567/6dOzbt+9dorLOPI7zwaILvy8MaQlnX1/fSdQWC105J6hvM8Lck83NzVpHMd/Wvgd4OxMSEtaN9TmTydSDIvRhotVemniBwbJKSkqmIJn/xsWWBnf58uUjAMPpX+sxsAaqqqr+5iT8tXLj8JcbfgUIJfOkpKQ12PJmNWTgmpqaI48++mgpx3+VhzE1NbXWaDT2OKC9Dfc8IFQFI5mv4msIYk25ublbExMTP+ZcWwNFXjSk0+lqx/rA1atXKzgvPOnkLfHK6vdTp05NUSqV9zsyBNHW9vb2qtLS0i/S09O/YUD0ueAddxI9eSGqcfVoiXtoaKht/fr1lzgfLXLzS0AoXMHQT40Fhl6vv97Y2Hh2z549Z4uLi4kt0SI2YkpUVwy7US+Y2Z9QjuYdBW1tbQZOwH9aCEQPkUVGRj5pfwCJtV2tVv+7vLz8n1u2bKljAJAOMipr9qBws7BzjexhNW3YsOEzzoerDv0SkMOHD08Au1pIYYRAOH/+fMXmzZvrmPHtQTAJdIfOAlobMaKQNJ08eXJPbW2tlhvHBQvu/RoB2+9kFOSPhA8//JDa3L+E0hreGGgkZ32ARmarfYRS6o50dnYewX4zUzWo8BY2rlzIsXzRfhccEM7aMicAIrwFwogxFf39/ecJDBCFW9XV1W/i2GQ2tuSeBsQOFIkvjEGak5MzGUC0glE1nDlzZiNnvQGl9NX4fg+IL5WMDhb1skajObpp06YH8TrOl2CIgNw9viwjI4NWz5NGs3Ap8fE1CApIQP9vL1ulYnsUwjQui6P98PkQUQKh2yuKCEhQiHy8XFMU0UNEQEQRAREBEUUERAREFBEQERBRREBEEQERARFFBEQERBQRkOCV/wkwAG3HvBgewMy5AAAAAElFTkSuQmCC&quot;,&#xd;\n \t\t&quot;encoding&quot;: &quot;base64&quot;,&#xd;\n \t\t&quot;filename&quot;: &quot;lorem.png&quot;,&#xd;\n \t\t&quot;content-type&quot;: &quot;image/png&quot;&#xd;\n@@ -1372,9 +1372,5 @@\n         <hashTree/>\n       </hashTree>\n     </hashTree>\n-    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n-      <boolProp name="WorkBench.save">true</boolProp>\n-    </WorkBench>\n-    <hashTree/>\n   </hashTree>\n </jmeterTestPlan>\ndiff --git a/plone-4.3.x-performance.cfg b/plone-4.3.x-performance.cfg\nindex f6041153..23bce7b0 100644\n--- a/plone-4.3.x-performance.cfg\n+++ b/plone-4.3.x-performance.cfg\n@@ -1,6 +1,5 @@\n [buildout]\n-extends =\n-    plone-4.3.x.cfg\n+extends = plone-4.3.x.cfg\n parts += instance plonesite\n \n [instance]\ndiff --git a/plone-5.0.x-performance.cfg b/plone-5.0.x-performance.cfg\nindex 2cb2b8da..3cccb0fd 100644\n--- a/plone-5.0.x-performance.cfg\n+++ b/plone-5.0.x-performance.cfg\n@@ -1,6 +1,5 @@\n [buildout]\n-extends =\n-    plone-5.0.x.cfg\n+extends = plone-5.0.x.cfg\n parts += instance plonesite\n \n [instance]\ndiff --git a/plone-5.1.x-performance.cfg b/plone-5.1.x-performance.cfg\nindex ecbb9001..74e57fa5 100644\n--- a/plone-5.1.x-performance.cfg\n+++ b/plone-5.1.x-performance.cfg\n@@ -1,6 +1,5 @@\n [buildout]\n-extends =\n-    plone-5.1.x.cfg\n+extends = plone-5.1.x.cfg\n parts += instance plonesite\n \n [instance]\ndiff --git a/pyproject.toml b/pyproject.toml\nnew file mode 100644\nindex 00000000..05b615de\n--- /dev/null\n+++ b/pyproject.toml\n@@ -0,0 +1,20 @@\n+[tool.towncrier]\n+filename = "CHANGES.rst"\n+directory = "news/"\n+title_format = "{version} ({project_date})"\n+underlines = ["-", ""]\n+\n+[[tool.towncrier.type]]\n+directory = "breaking"\n+name = "Breaking changes:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "feature"\n+name = "New features:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "bugfix"\n+name = "Bug fixes:"\n+showcontent = true\ndiff --git a/setup.cfg b/setup.cfg\nnew file mode 100644\nindex 00000000..2a9acf13\n--- /dev/null\n+++ b/setup.cfg\n@@ -0,0 +1,2 @@\n+[bdist_wheel]\n+universal = 1\ndiff --git a/setup.py b/setup.py\nindex d213cadc..02c32cc9 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n \n import sys\n \n-version = \'3.5.2-dev.0\'\n+version = \'3.5.2.dev0\'\n \n long_description = (\n     open(\'README.rst\').read() + \'\\n\' +\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-02-10T16:42:11+01:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/79932de7703ff54daad9918c8f01dfcea9c102ba

Merge pull request #618 from plone/issue-574-event-type

Fix issues preventing serialization of event type

Files changed:
A news/574.bugfix
M src/plone/restapi/tests/test_services_types.py
M src/plone/restapi/tests/test_types.py
M src/plone/restapi/types/utils.py

b'diff --git a/news/574.bugfix b/news/574.bugfix\nnew file mode 100644\nindex 00000000..8f1f7840\n--- /dev/null\n+++ b/news/574.bugfix\n@@ -0,0 +1,2 @@\n+- Fix serializing the Event type. Fixes issue `574 <https://github.com/plone/plone.restapi/issues/574>`_\n+  [davisagli]\ndiff --git a/src/plone/restapi/tests/test_services_types.py b/src/plone/restapi/tests/test_services_types.py\nindex a498878f..bb83e4f1 100644\n--- a/src/plone/restapi/tests/test_services_types.py\n+++ b/src/plone/restapi/tests/test_services_types.py\n@@ -115,6 +115,11 @@ def test_file_type(self):\n         self.assertIn(\n             \'file.data\', response[\'properties\'][\'file\'][\'properties\'])\n \n+    def test_event_type(self):\n+        response = self.api_session.get(\'/@types/Event\')\n+        response = response.json()\n+        self.assertIn(\'title\', response[\'properties\'][\'start\'])\n+\n     def test_addable_types_for_non_manager_user(self):\n         user = api.user.create(\n             email=\'noam.chomsky@example.com\',\ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex 90e2a628..8c3a8d87 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -61,7 +61,8 @@ class ITaggedValuesSchema(model.Schema):\n \n     parametrized_widget_field = schema.TextLine(\n         title=u"Parametrized widget field")\n-    form.widget(\'parametrized_widget_field\', a_param=\'some_value\')\n+    form.widget(\'parametrized_widget_field\',\n+                a_param=\'some_value\', defaultFactory=lambda: \'Foo\')\n \n     not_parametrized_widget_field = schema.TextLine(\n         title=u"No parametrized widget field")\n@@ -203,6 +204,20 @@ def test_do_not_fail_with_non_parametrized_widget(self):\n             jsonschema[\'properties\'][\'not_parametrized_widget_field\'][\'title\']\n         )\n \n+    def test_resolve_callable_widget_params(self):\n+        ttool = getToolByName(self.portal, \'portal_types\')\n+        jsonschema = get_jsonschema_for_fti(\n+            ttool[\'TaggedDocument\'],\n+            self.portal,\n+            self.request\n+        )\n+\n+        self.assertEqual(\n+            u\'Foo\',\n+            jsonschema[\'properties\'][\'parametrized_widget_field\'].get(\n+                \'defaultFactory\')\n+        )\n+\n \n class TestJsonSchemaProviders(TestCase):\n \ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex cf08b266..e2bc597a 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -141,7 +141,10 @@ def get_tagged_values(schemas, key):\n         for field_name in schema:\n             widget = tagged_values.get(field_name)\n             if IParameterizedWidget.providedBy(widget) and widget.params:\n-                params[field_name] = widget.params\n+                params[field_name] = widget.params.copy()\n+                for k, v in params[field_name].items():\n+                    if callable(v):\n+                        params[field_name][k] = v()\n     return params\n \n \n'

