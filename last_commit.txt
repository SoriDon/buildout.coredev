Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-07-16T10:29:16-03:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.restapi/commit/a31680c4a5e618cef1a730a68f718fe3ff8614f8

fix imports and use decorators for py3

Files changed:
M src/plone/restapi/batching.py
M src/plone/restapi/demo/demo.py
M src/plone/restapi/deserializer/dxfields.py
M src/plone/restapi/deserializer/relationfield.py
M src/plone/restapi/pas/plugin.py
M src/plone/restapi/serializer/converters.py
M src/plone/restapi/services/content/tus.py
M src/plone/restapi/services/copymove/copymove.py
M src/plone/restapi/services/discussion/conversation.py
M src/plone/restapi/services/email_send/post.py
M src/plone/restapi/services/groups/delete.py
M src/plone/restapi/services/groups/get.py
M src/plone/restapi/services/groups/update.py
M src/plone/restapi/services/history/get.py
M src/plone/restapi/services/registry/get.py
M src/plone/restapi/services/types/get.py
M src/plone/restapi/services/users/add.py
M src/plone/restapi/services/users/delete.py
M src/plone/restapi/services/users/get.py
M src/plone/restapi/services/users/update.py
M src/plone/restapi/services/vocabularies/get.py
M src/plone/restapi/services/workflow/transition.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/helpers.py
M src/plone/restapi/tests/test_batching.py
M src/plone/restapi/tests/test_error_handling.py

b'diff --git a/src/plone/restapi/batching.py b/src/plone/restapi/batching.py\nindex 92b22faa..fe633f7f 100644\n--- a/src/plone/restapi/batching.py\n+++ b/src/plone/restapi/batching.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.batching.batch import Batch\n-from urllib import urlencode\n-from urlparse import parse_qsl\n+from six.moves.urllib.parse import urlencode\n+from six.moves.urllib.parse import parse_qsl\n \n \n DEFAULT_BATCH_SIZE = 25\ndiff --git a/src/plone/restapi/demo/demo.py b/src/plone/restapi/demo/demo.py\nindex 790170c6..7c90983b 100644\n--- a/src/plone/restapi/demo/demo.py\n+++ b/src/plone/restapi/demo/demo.py\n@@ -5,7 +5,7 @@\n class InternalServerErrorView(BrowserView):  # pragma: no cover\n \n     def __call__(self):\n-        from urllib2 import HTTPError\n+        from six.moves.urllib.error import HTTPError\n         raise HTTPError(\n             \'http://nohost/plone/internal_server_error\',\n             500,\ndiff --git a/src/plone/restapi/deserializer/dxfields.py b/src/plone/restapi/deserializer/dxfields.py\nindex 548a9518..957cd29a 100644\n--- a/src/plone/restapi/deserializer/dxfields.py\n+++ b/src/plone/restapi/deserializer/dxfields.py\n@@ -24,6 +24,7 @@\n from zope.schema.interfaces import ITimedelta\n \n import dateutil\n+import six\n \n \n @implementer(IFieldDeserializer)\n@@ -38,7 +39,7 @@ def __init__(self, field, context, request):\n         self.request = request\n \n     def __call__(self, value):\n-        if not isinstance(value, unicode):\n+        if not isinstance(value, six.text_type):\n             self.field.validate(value)\n             return value\n \n@@ -52,11 +53,11 @@ def __call__(self, value):\n class TextLineFieldDeserializer(DefaultFieldDeserializer):\n \n     def __call__(self, value):\n-        if isinstance(value, unicode):\n+        if isinstance(value, six.text_type):\n             value = IFromUnicode(self.field).fromUnicode(value)\n \n         # Mimic what z3c.form does in it\'s BaseDataConverter.\n-        if isinstance(value, unicode):\n+        if isinstance(value, six.text_type):\n             value = value.strip()\n             if value == u\'\':\n                 value = self.field.missing_value\ndiff --git a/src/plone/restapi/deserializer/relationfield.py b/src/plone/restapi/deserializer/relationfield.py\nindex b24db727..ccbbc7a4 100644\n--- a/src/plone/restapi/deserializer/relationfield.py\n+++ b/src/plone/restapi/deserializer/relationfield.py\n@@ -10,6 +10,7 @@\n from zope.interface import implementer\n from zope.intid.interfaces import IIntIds\n from zope.publisher.interfaces.browser import IBrowserRequest\n+import six\n \n \n @implementer(IFieldDeserializer)\n@@ -28,7 +29,7 @@ def __call__(self, value):\n             # Resolve by intid\n             intids = queryUtility(IIntIds)\n             obj = intids.queryObject(value)\n-        elif isinstance(value, basestring):\n+        elif isinstance(value, six.string_types):\n             portal = getMultiAdapter((self.context, self.request),\n                                      name=\'plone_portal_state\').portal()\n             portal_url = portal.absolute_url()\ndiff --git a/src/plone/restapi/pas/plugin.py b/src/plone/restapi/pas/plugin.py\nindex dee0485a..78d12e95 100644\n--- a/src/plone/restapi/pas/plugin.py\n+++ b/src/plone/restapi/pas/plugin.py\n@@ -15,7 +15,7 @@\n from plone.keyring.interfaces import IKeyManager\n from plone.keyring.keyring import GenerateSecret\n from zope.component import getUtility\n-from zope.interface import implements\n+from zope.interface import implementer\n \n import jwt\n import time\n@@ -39,14 +39,14 @@ def addJWTAuthenticationPlugin(self, id_, title=None, REQUEST=None):\n         )\n \n \n+@implementer(\n+    IAuthenticationPlugin,\n+    IChallengePlugin,\n+    IExtractionPlugin,\n+)\n class JWTAuthenticationPlugin(BasePlugin):\n     """Plone PAS plugin for authentication with JSON web tokens (JWT).\n     """\n-    implements(\n-        IAuthenticationPlugin,\n-        IChallengePlugin,\n-        IExtractionPlugin,\n-    )\n     meta_type = "JWT Authentication Plugin"\n     security = ClassSecurityInfo()\n \ndiff --git a/src/plone/restapi/serializer/converters.py b/src/plone/restapi/serializer/converters.py\nindex 9948a975..a81e24c8 100644\n--- a/src/plone/restapi/serializer/converters.py\n+++ b/src/plone/restapi/serializer/converters.py\n@@ -21,6 +21,7 @@\n \n import Missing\n import pytz\n+import six\n # import re\n \n \n@@ -75,7 +76,7 @@ def default_converter(value):\n     if value is None:\n         return value\n \n-    if type(value) in (unicode, bool, int, float, long):\n+    if type(value) in (six.text_type, bool, int, float, int):\n         return value\n \n     raise TypeError(\ndiff --git a/src/plone/restapi/services/content/tus.py b/src/plone/restapi/services/content/tus.py\nindex ee37c13b..cceaa1d5 100644\n--- a/src/plone/restapi/services/content/tus.py\n+++ b/src/plone/restapi/services/content/tus.py\n@@ -15,7 +15,7 @@\n from uuid import uuid4\n from zExceptions import Unauthorized\n from zope.component import queryMultiAdapter\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.publisher.interfaces import NotFound\n from zope.lifecycleevent import ObjectCreatedEvent\n@@ -123,8 +123,8 @@ def reply(self):\n         return super(UploadPost, self).reply()\n \n \n+@implementer(IPublishTraverse)\n class UploadFileBase(TUSBaseService):\n-    implements(IPublishTraverse)\n \n     def __init__(self, context, request):\n         super(UploadFileBase, self).__init__(context, request)\n@@ -183,11 +183,10 @@ def reply(self):\n         return super(UploadHead, self).reply()\n \n \n+@implementer(IPublishTraverse)\n class UploadPatch(UploadFileBase):\n     """TUS upload endpoint for handling PATCH requests"""\n \n-    implements(IPublishTraverse)\n-\n     def reply(self):\n \n         tus_upload = self.tus_upload()\ndiff --git a/src/plone/restapi/services/copymove/copymove.py b/src/plone/restapi/services/copymove/copymove.py\nindex bb537dad..5bb10e3b 100644\n--- a/src/plone/restapi/services/copymove/copymove.py\n+++ b/src/plone/restapi/services/copymove/copymove.py\n@@ -9,6 +9,7 @@\n from zope.security import checkPermission\n \n import plone\n+import six\n \n \n class BaseCopyMove(Service):\n@@ -24,7 +25,7 @@ def __init__(self, context, request):\n \n     def get_object(self, key):\n         """Get an object by url, path or UID."""\n-        if isinstance(key, basestring):\n+        if isinstance(key, six.string_types):\n             if key.startswith(self.portal_url):\n                 # Resolve by URL\n                 return self.portal.restrictedTraverse(\ndiff --git a/src/plone/restapi/services/discussion/conversation.py b/src/plone/restapi/services/discussion/conversation.py\nindex 051749a2..e2d450ef 100644\n--- a/src/plone/restapi/services/discussion/conversation.py\n+++ b/src/plone/restapi/services/discussion/conversation.py\n@@ -39,7 +39,7 @@ class CommentsGet(Service):\n \n     def publishTraverse(self, request, name):\n         if name:\n-            self.comment_id = long(name)\n+            self.comment_id = int(name)\n         return self\n \n     def reply(self):\n@@ -64,7 +64,7 @@ class CommentsAdd(Service):\n \n     def publishTraverse(self, request, name):\n         if name:\n-            self.comment_id = long(name)\n+            self.comment_id = int(name)\n             request[\'form.widgets.in_reply_to\'] = name\n         return self\n \n@@ -104,7 +104,7 @@ class CommentsUpdate(Service):\n \n     def publishTraverse(self, request, name):\n         if name:\n-            self.comment_id = long(name)\n+            self.comment_id = int(name)\n             request[\'form.widgets.comment_id\'] = name\n         return self\n \n@@ -148,7 +148,7 @@ class CommentsDelete(Service):\n     comment_id = None\n \n     def publishTraverse(self, request, name):\n-        self.comment_id = long(name)\n+        self.comment_id = int(name)\n         return self\n \n     def reply(self):\ndiff --git a/src/plone/restapi/services/email_send/post.py b/src/plone/restapi/services/email_send/post.py\nindex 94d37d8d..f142e1be 100644\n--- a/src/plone/restapi/services/email_send/post.py\n+++ b/src/plone/restapi/services/email_send/post.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from AccessControl.Permissions import use_mailhost_services\n-from email.MIMEText import MIMEText\n+from email.mime.text import MIMEText\n from plone.registry.interfaces import IRegistry\n from plone.restapi import _\n from plone.restapi.deserializer import json_body\ndiff --git a/src/plone/restapi/services/groups/delete.py b/src/plone/restapi/services/groups/delete.py\nindex 11bde167..13b7046a 100644\n--- a/src/plone/restapi/services/groups/delete.py\n+++ b/src/plone/restapi/services/groups/delete.py\n@@ -3,16 +3,15 @@\n from Products.CMFCore.utils import getToolByName\n from zExceptions import NotFound\n from zope.component.hooks import getSite\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n \n+@implementer(IPublishTraverse)\n class GroupsDelete(Service):\n     """Deletes a user.\n     """\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(GroupsDelete, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/groups/get.py b/src/plone/restapi/services/groups/get.py\nindex 0c099e6c..0b7c88cd 100644\n--- a/src/plone/restapi/services/groups/get.py\n+++ b/src/plone/restapi/services/groups/get.py\n@@ -6,16 +6,15 @@\n from zExceptions import BadRequest\n from zope.component.hooks import getSite\n from zope.component import queryMultiAdapter\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n DEFAULT_SEARCH_RESULTS_LIMIT = 25\n \n \n+@implementer(IPublishTraverse)\n class GroupsGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(GroupsGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/groups/update.py b/src/plone/restapi/services/groups/update.py\nindex 863bc42c..46b22e09 100644\n--- a/src/plone/restapi/services/groups/update.py\n+++ b/src/plone/restapi/services/groups/update.py\n@@ -4,18 +4,17 @@\n from Products.CMFCore.utils import getToolByName\n from zExceptions import BadRequest\n from zope.component.hooks import getSite\n-from zope.interface import alsoProvides, implements\n+from zope.interface import alsoProvides, implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n import plone\n \n \n+@implementer(IPublishTraverse)\n class GroupsPatch(Service):\n     """Updates an existing group.\n     """\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(GroupsPatch, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/history/get.py b/src/plone/restapi/services/history/get.py\nindex 8b7936ef..4354a288 100644\n--- a/src/plone/restapi/services/history/get.py\n+++ b/src/plone/restapi/services/history/get.py\n@@ -9,6 +9,7 @@\n from zope.publisher.interfaces import IPublishTraverse\n from Products.CMFPlone.utils import safe_unicode\n from datetime import datetime as dt\n+import six\n \n \n @implementer(IPublishTraverse)\n@@ -74,7 +75,7 @@ def reply(self):\n \n             # Versioning entries use a timestamp,\n             # workflow ISO formatted string\n-            if not isinstance(item[\'time\'], basestring):\n+            if not isinstance(item[\'time\'], six.string_types):\n                 item[\'time\'] = dt.fromtimestamp(item[\'time\']).isoformat()\n \n             # The create event has an empty \'action\', but we like it to say\ndiff --git a/src/plone/restapi/services/registry/get.py b/src/plone/restapi/services/registry/get.py\nindex 5e8a39dd..ed53e17d 100644\n--- a/src/plone/restapi/services/registry/get.py\n+++ b/src/plone/restapi/services/registry/get.py\n@@ -2,15 +2,14 @@\n from plone.registry.interfaces import IRegistry\n from plone.restapi.services import Service\n from zope.component import getUtility, getMultiAdapter\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from plone.restapi.interfaces import ISerializeToJson\n \n \n+@implementer(IPublishTraverse)\n class RegistryGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(RegistryGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/types/get.py b/src/plone/restapi/services/types/get.py\nindex 9b252ecb..179b42a7 100644\n--- a/src/plone/restapi/services/types/get.py\n+++ b/src/plone/restapi/services/types/get.py\n@@ -7,14 +7,14 @@\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.i18n import translate\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.schema.interfaces import IVocabularyFactory\n \n \n+@implementer(IPublishTraverse)\n class TypesGet(Service):\n \n-    implements(IPublishTraverse)\n \n     def __init__(self, context, request):\n         super(TypesGet, self).__init__(context, request)\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex 9241a724..1e71af77 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -12,7 +12,7 @@\n from zope.component import queryMultiAdapter\n from zope.component.hooks import getSite\n from zope.interface import alsoProvides\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n import plone.protect.interfaces\n@@ -32,12 +32,11 @@\n     from Products.PasswordResetTool.PasswordResetTool import InvalidRequestError  # noqa\n \n \n+@implementer(IPublishTraverse)\n class UsersPost(Service):\n     """Creates a new user.\n     """\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(UsersPost, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/users/delete.py b/src/plone/restapi/services/users/delete.py\nindex 92e17bd6..35fc3145 100644\n--- a/src/plone/restapi/services/users/delete.py\n+++ b/src/plone/restapi/services/users/delete.py\n@@ -2,16 +2,15 @@\n from plone.restapi.services import Service\n from Products.CMFCore.utils import getToolByName\n from zope.component.hooks import getSite\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n \n+@implementer(IPublishTraverse)\n class UsersDelete(Service):\n     """Deletes a user.\n     """\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(UsersDelete, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex e1a6b8e9..fa91577a 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -6,16 +6,15 @@\n from zExceptions import BadRequest\n from zope.component.hooks import getSite\n from zope.component import queryMultiAdapter\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n DEFAULT_SEARCH_RESULTS_LIMIT = 25\n \n \n+@implementer(IPublishTraverse)\n class UsersGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(UsersGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/users/update.py b/src/plone/restapi/services/users/update.py\nindex 9ffd2970..41c50e13 100644\n--- a/src/plone/restapi/services/users/update.py\n+++ b/src/plone/restapi/services/users/update.py\n@@ -6,7 +6,7 @@\n from Products.CMFCore.utils import getToolByName\n from zope.component.hooks import getSite\n from zope.interface import alsoProvides\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.component import getAdapter\n \n@@ -19,12 +19,11 @@\n     from plone.app.controlpanel.security import ISecuritySchema\n \n \n+@implementer(IPublishTraverse)\n class UsersPatch(Service):\n     """Updates an existing user.\n     """\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(UsersPatch, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/vocabularies/get.py b/src/plone/restapi/services/vocabularies/get.py\nindex ba88c03d..48233e6d 100644\n--- a/src/plone/restapi/services/vocabularies/get.py\n+++ b/src/plone/restapi/services/vocabularies/get.py\n@@ -4,16 +4,15 @@\n from zope.component import ComponentLookupError\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.schema.interfaces import IVocabularyFactory\n from zope.component import getUtilitiesFor\n \n \n+@implementer(IPublishTraverse)\n class VocabulariesGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(VocabulariesGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/workflow/transition.py b/src/plone/restapi/services/workflow/transition.py\nindex 8b034300..36a3483e 100644\n--- a/src/plone/restapi/services/workflow/transition.py\n+++ b/src/plone/restapi/services/workflow/transition.py\n@@ -10,17 +10,17 @@\n from zope.component import queryMultiAdapter\n from zope.i18n import translate\n from zope.interface import alsoProvides\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.publisher.interfaces import NotFound\n \n import plone.protect.interfaces\n \n \n+@implementer(IPublishTraverse)\n class WorkflowTransition(Service):\n     """Trigger workflow transition\n     """\n-    implements(IPublishTraverse)\n \n     def __init__(self, context, request):\n         super(WorkflowTransition, self).__init__(context, request)\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 8add5665..7a43aa8d 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -23,12 +23,12 @@\n from plone.testing.layer import Layer\n from plone.uuid.interfaces import IUUIDGenerator\n from Products.CMFCore.utils import getToolByName\n-from urlparse import urljoin\n-from urlparse import urlparse\n+from six.moves.urllib.parse import urljoin\n+from six.moves.urllib.parse import urlparse\n from zope.component import getGlobalSiteManager\n from zope.component import getUtility\n from zope.configuration import xmlconfig\n-from zope.interface import implements\n+from zope.interface import implementer\n \n import collective.MockMailHost\n import pkg_resources\n@@ -325,14 +325,13 @@ def request(self, method, url, **kwargs):\n         return super(RelativeSession, self).request(method, url, **kwargs)\n \n \n+@implementer(IUUIDGenerator)\n class StaticUUIDGenerator(object):\n     """UUID generator that produces stable UUIDs for use in tests.\n \n     Based on code from ftw.testing\n     """\n \n-    implements(IUUIDGenerator)\n-\n     def __init__(self, prefix):\n         self.prefix = prefix[:26]\n         self.counter = 0\ndiff --git a/src/plone/restapi/tests/helpers.py b/src/plone/restapi/tests/helpers.py\nindex f0ca5d9f..49ea7049 100644\n--- a/src/plone/restapi/tests/helpers.py\n+++ b/src/plone/restapi/tests/helpers.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n-from urlparse import urlparse\n+from six.moves.urllib.parse import urlparse\n \n \n def result_paths(results):\ndiff --git a/src/plone/restapi/tests/test_batching.py b/src/plone/restapi/tests/test_batching.py\nindex e3f11654..95d22651 100644\n--- a/src/plone/restapi/tests/test_batching.py\n+++ b/src/plone/restapi/tests/test_batching.py\n@@ -12,8 +12,8 @@\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from plone.restapi.testing import RelativeSession\n from plone.restapi.tests.helpers import result_paths\n-from urlparse import parse_qsl\n-from urlparse import urlparse\n+from six.moves.urllib.parse import parse_qsl\n+from six.moves.urllib.parse import urlparse\n \n import transaction\n import unittest\ndiff --git a/src/plone/restapi/tests/test_error_handling.py b/src/plone/restapi/tests/test_error_handling.py\nindex f3772895..9cad014d 100644\n--- a/src/plone/restapi/tests/test_error_handling.py\n+++ b/src/plone/restapi/tests/test_error_handling.py\n@@ -18,7 +18,7 @@\n class InternalServerErrorView(BrowserView):\n \n     def __call__(self):  # pragma: no cover\n-        from urllib2 import HTTPError\n+        from six.moves.urllib.error import HTTPError\n         raise HTTPError(\n             \'http://nohost/plone/internal_server_error\',\n             500,\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-07-16T10:33:26-03:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.restapi/commit/1c2d763a61f3e75b31f7866b982ff165b3f4098c

only test Products.Archetypes on py2

Files changed:
M setup.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/test_atcollection.py
M src/plone/restapi/tests/test_atcontent_deserializer.py
M src/plone/restapi/tests/test_atcontent_serializer.py
M src/plone/restapi/tests/test_atfield_deserializer.py
M src/plone/restapi/tests/test_atfield_serializer.py

b'diff --git a/setup.py b/setup.py\nindex c0665745..24b6e75b 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -11,6 +11,48 @@\n )\n \n \n+HTTP_EXAMPLES_PATH = \'docs/source/_json/\'\n+\n+TEST_REQUIRES = [\n+    \'collective.MockMailHost\',\n+    \'plone.app.contenttypes\',\n+    \'plone.app.robotframework\',\n+    \'plone.app.testing [robot] >= 4.2.2\',  # ROBOT_TEST_LEVEL added\n+    \'plone.api\',\n+    \'requests\',\n+    \'freezegun\',\n+    \'mock\',\n+]\n+\n+PY2_ONLY = [\n+    \'Products.Archetypes\',\n+    \'plone.app.collection\',\n+]\n+\n+if sys.version_info[0] == 2:\n+    TEST_REQUIRES += PY2_ONLY\n+\n+\n+def collect_http_examples():\n+    """Gather relative paths to every HTTP example file.\n+\n+    We need to do this dynamically because the data_files argument to\n+    setup() doesn\'t support globs (wildcards).\n+\n+    If the HTTP examples directory is ever moved, the HTTP_EXAMPLES_PATH\n+    above needs to be updated before a new release is cut.\n+\n+    The examples need to be included via data_files because they are outside\n+    a Python package. So we can\'t include them using package_data, which only\n+    works relative to Python packages. (The MANIFEST only controls what gets\n+    included in the source distribution. Listing these files in data_files\n+    ensures they actually get copied to the installed .egg).\n+    """\n+    examples_path = HTTP_EXAMPLES_PATH\n+    example_filenames = os.listdir(examples_path)\n+    return [os.path.join(examples_path, fn) for fn in example_filenames]\n+\n+\n setup(name=\'plone.restapi\',\n       version=version,\n       description="plone.restapi is a RESTful hypermedia API for Plone.",\n@@ -49,19 +91,7 @@\n           \'PyJWT\',\n           \'pytz\',\n       ],\n-      extras_require={\'test\': [\n-          \'Products.Archetypes\',\n-          \'collective.MockMailHost\',\n-          \'plone.app.collection\',\n-          \'plone.app.contenttypes\',\n-          \'plone.app.robotframework\',\n-          \'plone.app.testing [robot] >= 4.2.2\',  # ROBOT_TEST_LEVEL added\n-          \'plone.api\',\n-          \'requests\',\n-          \'freezegun\',\n-          \'plone.tiles\',\n-          \'mock\',\n-      ]},\n+      extras_require={\'test\': TEST_REQUIRES},\n       entry_points="""\n       # -*- Entry points: -*-\n       [z3c.autoinclude.plugin]\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 7a43aa8d..b0f10754 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -52,6 +52,12 @@\n else:\n     PLONE_5 = True  # pragma: no cover\n \n+try:\n+    pkg_resources.get_distribution(\'Products.Archetypes\')\n+except pkg_resources.DistributionNotFound:\n+    HAS_AT = False\n+else:\n+    HAS_AT = True\n \n ENABLED_LANGUAGES = [\'de\', \'en\', \'es\', \'fr\']\n \n@@ -253,58 +259,59 @@ def setUpPloneSite(self, portal):\n )\n \n \n-class PloneRestApiATLayer(PloneSandboxLayer):\n-\n-    defaultBases = (DATE_TIME_FIXTURE, PLONE_FIXTURE,)\n-\n-    def setUpZope(self, app, configurationContext):\n-        import Products.ATContentTypes\n-        self.loadZCML(package=Products.ATContentTypes)\n-        import plone.app.dexterity\n-        self.loadZCML(package=plone.app.dexterity)\n-\n-        import plone.restapi\n-        xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.restapi,\n-            context=configurationContext\n-        )\n-\n-        z2.installProduct(app, \'Products.Archetypes\')\n-        z2.installProduct(app, \'Products.ATContentTypes\')\n-        z2.installProduct(app, \'plone.app.collection\')\n-        z2.installProduct(app, \'plone.app.blob\')\n-        z2.installProduct(app, \'plone.restapi\')\n-\n-    def setUpPloneSite(self, portal):\n-        set_supported_languages(portal)\n-\n-        if portal.portal_setup.profileExists(\n-                \'Products.ATContentTypes:default\'):\n-            applyProfile(portal, \'Products.ATContentTypes:default\')\n-        if portal.portal_setup.profileExists(\n-                \'plone.app.collection:default\'):\n-            applyProfile(portal, \'plone.app.collection:default\')\n-\n-        applyProfile(portal, \'plone.app.dexterity:default\')\n-        applyProfile(portal, \'plone.restapi:default\')\n-        applyProfile(portal, \'plone.restapi:testing\')\n-        set_available_languages()\n-        enable_request_language_negotiation(portal)\n-        portal.portal_workflow.setDefaultChain("simple_publication_workflow")\n-        states = portal.portal_workflow[\'simple_publication_workflow\'].states\n-        states[\'published\'].title = u\'Published with accent \xc3\xa9\'.encode(\'utf8\')\n-\n-\n-PLONE_RESTAPI_AT_FIXTURE = PloneRestApiATLayer()\n-PLONE_RESTAPI_AT_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_RESTAPI_AT_FIXTURE,),\n-    name="PloneRestApiATLayer:Integration"\n-)\n-PLONE_RESTAPI_AT_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_AT_FIXTURE, z2.ZSERVER_FIXTURE),\n-    name="PloneRestApiATLayer:Functional"\n-)\n+if HAS_AT:\n+    class PloneRestApiATLayer(PloneSandboxLayer):\n+\n+        defaultBases = (DATE_TIME_FIXTURE, PLONE_FIXTURE,)\n+\n+        def setUpZope(self, app, configurationContext):\n+            import Products.ATContentTypes\n+            self.loadZCML(package=Products.ATContentTypes)\n+            import plone.app.dexterity\n+            self.loadZCML(package=plone.app.dexterity)\n+\n+            import plone.restapi\n+            xmlconfig.file(\n+                \'configure.zcml\',\n+                plone.restapi,\n+                context=configurationContext\n+            )\n+\n+            z2.installProduct(app, \'Products.Archetypes\')\n+            z2.installProduct(app, \'Products.ATContentTypes\')\n+            z2.installProduct(app, \'plone.app.collection\')\n+            z2.installProduct(app, \'plone.app.blob\')\n+            z2.installProduct(app, \'plone.restapi\')\n+\n+        def setUpPloneSite(self, portal):\n+            set_supported_languages(portal)\n+\n+            if portal.portal_setup.profileExists(\n+                    \'Products.ATContentTypes:default\'):\n+                applyProfile(portal, \'Products.ATContentTypes:default\')\n+            if portal.portal_setup.profileExists(\n+                    \'plone.app.collection:default\'):\n+                applyProfile(portal, \'plone.app.collection:default\')\n+\n+            applyProfile(portal, \'plone.app.dexterity:default\')\n+            applyProfile(portal, \'plone.restapi:default\')\n+            applyProfile(portal, \'plone.restapi:testing\')\n+            set_available_languages()\n+            enable_request_language_negotiation(portal)\n+            portal.portal_workflow.setDefaultChain("simple_publication_workflow")\n+            states = portal.portal_workflow[\'simple_publication_workflow\'].states\n+            states[\'published\'].title = u\'Published with accent \xc3\xa9\'.encode(\'utf8\')\n+\n+\n+    PLONE_RESTAPI_AT_FIXTURE = PloneRestApiATLayer()\n+    PLONE_RESTAPI_AT_INTEGRATION_TESTING = IntegrationTesting(\n+        bases=(PLONE_RESTAPI_AT_FIXTURE,),\n+        name="PloneRestApiATLayer:Integration"\n+    )\n+    PLONE_RESTAPI_AT_FUNCTIONAL_TESTING = FunctionalTesting(\n+        bases=(PLONE_RESTAPI_AT_FIXTURE, z2.ZSERVER_FIXTURE),\n+        name="PloneRestApiATLayer:Functional"\n+    )\n \n \n class RelativeSession(requests.Session):\ndiff --git a/src/plone/restapi/tests/test_atcollection.py b/src/plone/restapi/tests/test_atcollection.py\nindex 2b55b4b5..9d6ca5f0 100644\n--- a/src/plone/restapi/tests/test_atcollection.py\n+++ b/src/plone/restapi/tests/test_atcollection.py\n@@ -3,6 +3,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n from plone.restapi.interfaces import ISerializeToJson\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from zope.component import getMultiAdapter\n \n@@ -14,6 +15,8 @@ class TestATContentSerializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\ndiff --git a/src/plone/restapi/tests/test_atcontent_deserializer.py b/src/plone/restapi/tests/test_atcontent_deserializer.py\nindex 56e74894..90f4001a 100644\n--- a/src/plone/restapi/tests/test_atcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_deserializer.py\n@@ -6,6 +6,7 @@\n from plone.app.testing import setRoles\n from plone.restapi.deserializer.atcontent import ValidationRequest\n from plone.restapi.interfaces import IDeserializeFromJson\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.tests.mixin_ordering import OrderingMixin\n from zExceptions import BadRequest\n@@ -26,6 +27,8 @@ class TestATContentDeserializer(unittest.TestCase, OrderingMixin):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\ndiff --git a/src/plone/restapi/tests/test_atcontent_serializer.py b/src/plone/restapi/tests/test_atcontent_serializer.py\nindex e3791311..c0e4f6f9 100644\n--- a/src/plone/restapi/tests/test_atcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_serializer.py\n@@ -4,6 +4,7 @@\n from plone.app.testing import setRoles\n from plone.restapi.interfaces import IExpandableElement\n from plone.restapi.interfaces import ISerializeToJson\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.tests.test_expansion import ExpandableElementFoo\n from zope.component import getGlobalSiteManager\n@@ -21,6 +22,8 @@ class TestATContentSerializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\ndiff --git a/src/plone/restapi/tests/test_atfield_deserializer.py b/src/plone/restapi/tests/test_atfield_deserializer.py\nindex e3bb0cbd..4b923c79 100644\n--- a/src/plone/restapi/tests/test_atfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_atfield_deserializer.py\n@@ -2,6 +2,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n from plone.restapi.interfaces import IFieldDeserializer\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from zope.component import getMultiAdapter\n \n@@ -13,6 +14,8 @@ class TestATFieldDeserializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\ndiff --git a/src/plone/restapi/tests/test_atfield_serializer.py b/src/plone/restapi/tests/test_atfield_serializer.py\nindex da1b23ad..c8f886db 100644\n--- a/src/plone/restapi/tests/test_atfield_serializer.py\n+++ b/src/plone/restapi/tests/test_atfield_serializer.py\n@@ -4,6 +4,7 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.restapi.interfaces import IFieldSerializer\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.testing import PLONE_VERSION\n from plone.scale import storage\n@@ -23,6 +24,8 @@ class TestATFieldSerializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-07-16T10:42:00-03:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.restapi/commit/0fe98ddd657f01901208d61c3bb47048cc699af3

isolate from AT

Files changed:
M src/plone/restapi/__init__.py
M src/plone/restapi/deserializer/atcontent.py
M src/plone/restapi/deserializer/atfields.py
M src/plone/restapi/serializer/atcollection.py
M src/plone/restapi/serializer/atcontent.py
M src/plone/restapi/serializer/atfields.py
M src/plone/restapi/services/content/add.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/test_atcontent_deserializer.py
M src/plone/restapi/tests/test_batching.py
M src/plone/restapi/tests/test_content_patch.py
M src/plone/restapi/tests/test_content_post.py
M src/plone/restapi/tests/test_content_utils.py
M src/plone/restapi/tests/test_registry_serializer.py
M src/plone/restapi/tests/test_search.py
M src/plone/restapi/tests/test_serializer_catalog.py
M src/plone/restapi/tests/test_serializer_summary.py
M src/plone/restapi/tests/test_tus.py

b'diff --git a/src/plone/restapi/__init__.py b/src/plone/restapi/__init__.py\nindex 4bb52278..cf140252 100644\n--- a/src/plone/restapi/__init__.py\n+++ b/src/plone/restapi/__init__.py\n@@ -25,6 +25,13 @@\n except pkg_resources.DistributionNotFound:  # pragma: no cover\n     HAS_PLONE_APP_CONTENTTYPES = False\n \n+try:\n+    pkg_resources.get_distribution(\'Products.Archetypes\')\n+except pkg_resources.DistributionNotFound:\n+    HAS_AT = False\n+else:\n+    HAS_AT = True\n+\n \n def initialize(context):\n     registerMultiPlugin(plugin.JWTAuthenticationPlugin.meta_type)\n@@ -38,7 +45,7 @@ def initialize(context):\n         visibility=None,\n     )\n \n-    if REGISTER_TEST_TYPES:\n+    if HAS_AT and REGISTER_TEST_TYPES:\n         from Products.Archetypes.ArchetypeTool import process_types, listTypes\n         from Products.CMFCore import permissions\n         from Products.CMFCore import utils\ndiff --git a/src/plone/restapi/deserializer/atcontent.py b/src/plone/restapi/deserializer/atcontent.py\nindex a6f696a0..ba950ecc 100644\n--- a/src/plone/restapi/deserializer/atcontent.py\n+++ b/src/plone/restapi/deserializer/atcontent.py\n@@ -1,177 +1,178 @@\n # -*- coding: utf-8 -*-\n-from Products.Archetypes.event import ObjectEditedEvent\n-from Products.Archetypes.event import ObjectInitializedEvent\n-from Products.Archetypes.interfaces import IBaseObject\n-from Products.Archetypes.interfaces import IObjectPostValidation\n-from Products.Archetypes.interfaces import IObjectPreValidation\n-from plone.restapi.deserializer import json_body\n-from plone.restapi.interfaces import IDeserializeFromJson\n-from plone.restapi.interfaces import IFieldDeserializer\n-from zExceptions import BadRequest\n-from zope.component import adapter\n-from zope.component import queryMultiAdapter\n-from zope.component import subscribers\n-from zope.event import notify\n-from zope.interface import Interface\n-from zope.interface import implementer\n-\n-from .mixins import OrderingMixin\n-\n-\n-@implementer(IDeserializeFromJson)\n-@adapter(IBaseObject, Interface)\n-class DeserializeFromJson(OrderingMixin, object):\n-    """JSON deserializer for Archetypes content types\n-    """\n-\n-    notifies_create = True\n-\n-    def __init__(self, context, request):\n-        self.context = context\n-        self.request = request\n-\n-    def __call__(self, validate_all=False, data=None, create=False):\n-        if data is None:\n-            data = json_body(self.request)\n-\n-        obj = self.context\n-        modified = False\n-\n-        for field in obj.Schema().fields():\n-            if not field.writeable(obj):\n-                continue\n-\n-            name = field.getName()\n-\n-            if name in data:\n-                deserializer = queryMultiAdapter((field, obj, self.request),\n-                                                 IFieldDeserializer)\n-                if deserializer is None:\n+from plone.restapi import HAS_AT\n+\n+if HAS_AT:\n+    from Products.Archetypes.event import ObjectEditedEvent\n+    from Products.Archetypes.event import ObjectInitializedEvent\n+    from Products.Archetypes.interfaces import IBaseObject\n+    from Products.Archetypes.interfaces import IObjectPostValidation\n+    from Products.Archetypes.interfaces import IObjectPreValidation\n+    from plone.restapi.deserializer import json_body\n+    from plone.restapi.interfaces import IDeserializeFromJson\n+    from plone.restapi.interfaces import IFieldDeserializer\n+    from zExceptions import BadRequest\n+    from zope.component import adapter\n+    from zope.component import queryMultiAdapter\n+    from zope.component import subscribers\n+    from zope.event import notify\n+    from zope.interface import Interface\n+    from zope.interface import implementer\n+\n+    from .mixins import OrderingMixin\n+\n+\n+    @implementer(IDeserializeFromJson)\n+    @adapter(IBaseObject, Interface)\n+    class DeserializeFromJson(OrderingMixin, object):\n+        """JSON deserializer for Archetypes content types\n+        """\n+\n+        def __init__(self, context, request):\n+            self.context = context\n+            self.request = request\n+\n+        def __call__(self, validate_all=False, data=None, create=False):\n+            if data is None:\n+                data = json_body(self.request)\n+\n+            obj = self.context\n+            modified = False\n+\n+            for field in obj.Schema().fields():\n+                if not field.writeable(obj):\n                     continue\n-                value, kwargs = deserializer(data[name])\n-                mutator = field.getMutator(obj)\n-                mutator(value, **kwargs)\n-                modified = True\n-\n-        if modified:\n-            errors = self.validate()\n-            if not validate_all:\n-                errors = {f: e for f, e in errors.items() if f in data}\n-            if errors:\n-                errors = [{\n-                    \'message\': e,\n-                    \'field\': f,\n-                    \'error\': \'ValidationError\'} for f, e in errors.items()]\n-                raise BadRequest(errors)\n-\n-            if create:\n-                if obj.checkCreationFlag():\n-                    obj.unmarkCreationFlag()\n-                notify(ObjectInitializedEvent(obj))\n-                obj.at_post_create_script()\n-            else:\n-                obj.reindexObject()\n-                notify(ObjectEditedEvent(obj))\n-                obj.at_post_edit_script()\n-\n-        # We\'ll set the layout after the validation and and even if there\n-        # are no other changes.\n-        if \'layout\' in data:\n-            layout = data[\'layout\']\n-            self.context.setLayout(layout)\n-\n-        # OrderingMixin\n-        self.handle_ordering(data)\n-\n-        return obj\n-\n-    def validate(self):\n-        # Instead of calling P.Archetypes.BaseObject.validate() we have to\n-        # provide a custom validation implementation here because some\n-        # validators extract the field value from the request. However a JSON\n-        # API request does not contain any form values in the request.\n-        # Thus we fake a request that extracts form values from the object on\n-        # demand.\n-\n-        obj = self.context\n-        request = ValidationRequest(self.request, obj)\n-        errors = {}\n-\n-        obj.pre_validate(request, errors)\n-\n-        for pre_validator in subscribers((obj,), IObjectPreValidation):\n-            pre_errors = pre_validator(request)\n-            if pre_errors is not None:\n-                for field_name, error_message in pre_errors.items():\n-                    if field_name in errors:\n-                        errors[field_name] += " %s" % error_message\n-                    else:\n-                        errors[field_name] = error_message\n-\n-        obj.Schema().validate(instance=obj, REQUEST=None,\n-                              errors=errors, data=True, metadata=True)\n-\n-        obj.post_validate(request, errors)\n-\n-        for post_validator in subscribers((obj,), IObjectPostValidation):\n-            post_errors = post_validator(request)\n-            if post_errors is not None:\n-                for field_name, error_message in post_errors.items():\n-                    if field_name in errors:\n-                        errors[field_name] += " %s" % error_message\n-                    else:\n-                        errors[field_name] = error_message\n-\n-        return errors\n-\n-\n-class ValidationRequest(dict):\n-    """A fake request for validation purposes.\n-    """\n-\n-    def __init__(self, request, context):\n-        self.request = request\n-        self.context = context\n-        self.form = ValidationRequestForm(request, context)\n-\n-    def __getitem__(self, key):\n-        if key in self.request:\n-            return self.request[key]\n-        return self.form[key]\n-\n-    def __contains__(self, key):\n-        return key in self.request or key in self.form\n-\n-    def get(self, key, default=None):\n-        try:\n-            return self[key]\n-        except KeyError:\n-            return default\n-\n-\n-class ValidationRequestForm(dict):\n-    """A request form dict that returns values from the content object.\n-    """\n-    def __init__(self, request, context):\n-        self.request = request\n-        self.context = context\n-\n-    def __getitem__(self, key):\n-        field = self.context.getField(key)\n-        if field is None:\n-            return self.request.form[key]\n-\n-        accessor = field.getEditAccessor(self.context)\n-        if accessor is None:\n-            accessor = field.getAccessor(self.context)\n-\n-        return accessor()\n-\n-    def __contains__(self, key):\n-        return key in self.context.Schema()\n-\n-    def get(self, key, default=None):\n-        try:\n-            return self[key]\n-        except KeyError:\n-            return default\n+\n+                name = field.getName()\n+\n+                if name in data:\n+                    deserializer = queryMultiAdapter((field, obj, self.request),\n+                                                     IFieldDeserializer)\n+                    if deserializer is None:\n+                        continue\n+                    value, kwargs = deserializer(data[name])\n+                    mutator = field.getMutator(obj)\n+                    mutator(value, **kwargs)\n+                    modified = True\n+\n+            if modified:\n+                errors = self.validate()\n+                if not validate_all:\n+                    errors = {f: e for f, e in errors.items() if f in data}\n+                if errors:\n+                    errors = [{\n+                        \'message\': e,\n+                        \'field\': f,\n+                        \'error\': \'ValidationError\'} for f, e in errors.items()]\n+                    raise BadRequest(errors)\n+\n+                if create:\n+                    if obj.checkCreationFlag():\n+                        obj.unmarkCreationFlag()\n+                    notify(ObjectInitializedEvent(obj))\n+                    obj.at_post_create_script()\n+                else:\n+                    obj.reindexObject()\n+                    notify(ObjectEditedEvent(obj))\n+                    obj.at_post_edit_script()\n+\n+            # We\'ll set the layout after the validation and and even if there\n+            # are no other changes.\n+            if \'layout\' in data:\n+                layout = data[\'layout\']\n+                self.context.setLayout(layout)\n+\n+            # OrderingMixin\n+            self.handle_ordering(data)\n+\n+            return obj\n+\n+        def validate(self):\n+            # Instead of calling P.Archetypes.BaseObject.validate() we have to\n+            # provide a custom validation implementation here because some\n+            # validators extract the field value from the request. However a JSON\n+            # API request does not contain any form values in the request.\n+            # Thus we fake a request that extracts form values from the object on\n+            # demand.\n+\n+            obj = self.context\n+            request = ValidationRequest(self.request, obj)\n+            errors = {}\n+\n+            obj.pre_validate(request, errors)\n+\n+            for pre_validator in subscribers((obj,), IObjectPreValidation):\n+                pre_errors = pre_validator(request)\n+                if pre_errors is not None:\n+                    for field_name, error_message in pre_errors.items():\n+                        if field_name in errors:\n+                            errors[field_name] += " %s" % error_message\n+                        else:\n+                            errors[field_name] = error_message\n+\n+            obj.Schema().validate(instance=obj, REQUEST=None,\n+                                  errors=errors, data=True, metadata=True)\n+\n+            obj.post_validate(request, errors)\n+\n+            for post_validator in subscribers((obj,), IObjectPostValidation):\n+                post_errors = post_validator(request)\n+                if post_errors is not None:\n+                    for field_name, error_message in post_errors.items():\n+                        if field_name in errors:\n+                            errors[field_name] += " %s" % error_message\n+                        else:\n+                            errors[field_name] = error_message\n+\n+            return errors\n+\n+\n+    class ValidationRequest(dict):\n+        """A fake request for validation purposes.\n+        """\n+\n+        def __init__(self, request, context):\n+            self.request = request\n+            self.context = context\n+            self.form = ValidationRequestForm(request, context)\n+\n+        def __getitem__(self, key):\n+            if key in self.request:\n+                return self.request[key]\n+            return self.form[key]\n+\n+        def __contains__(self, key):\n+            return key in self.request or key in self.form\n+\n+        def get(self, key, default=None):\n+            try:\n+                return self[key]\n+            except KeyError:\n+                return default\n+\n+\n+    class ValidationRequestForm(dict):\n+        """A request form dict that returns values from the content object.\n+        """\n+        def __init__(self, request, context):\n+            self.request = request\n+            self.context = context\n+\n+        def __getitem__(self, key):\n+            field = self.context.getField(key)\n+            if field is None:\n+                return self.request.form[key]\n+\n+            accessor = field.getEditAccessor(self.context)\n+            if accessor is None:\n+                accessor = field.getAccessor(self.context)\n+\n+            return accessor()\n+\n+        def __contains__(self, key):\n+            return key in self.context.Schema()\n+\n+        def get(self, key, default=None):\n+            try:\n+                return self[key]\n+            except KeyError:\n+                return default\ndiff --git a/src/plone/restapi/deserializer/atfields.py b/src/plone/restapi/deserializer/atfields.py\nindex 3ab58e06..4d883fa6 100644\n--- a/src/plone/restapi/deserializer/atfields.py\n+++ b/src/plone/restapi/deserializer/atfields.py\n@@ -1,78 +1,81 @@\n # -*- coding: utf-8 -*-\n-from Products.Archetypes.interfaces import IBaseObject\n-from Products.Archetypes.interfaces.field import IField\n-from Products.Archetypes.interfaces.field import IFileField\n-from Products.Archetypes.interfaces.field import IReferenceField\n-from plone.app.blob.interfaces import IBlobField\n-from plone.restapi.interfaces import IFieldDeserializer\n-from plone.restapi.services.content.tus import TUSUpload\n-from zope.component import adapter\n-from zope.component import getMultiAdapter\n-from zope.interface import implementer\n-from zope.publisher.interfaces.browser import IBrowserRequest\n-\n-\n-@implementer(IFieldDeserializer)\n-@adapter(IField, IBaseObject, IBrowserRequest)\n-class DefaultFieldDeserializer(object):\n-\n-    def __init__(self, field, context, request):\n-        self.field = field\n-        self.context = context\n-        self.request = request\n-\n-    def __call__(self, value):\n-        return value, {}\n-\n-\n-@implementer(IFieldDeserializer)\n-@adapter(IFileField, IBaseObject, IBrowserRequest)\n-class FileFieldDeserializer(DefaultFieldDeserializer):\n-\n-    def __call__(self, value):\n-        kwargs = {}\n-        if isinstance(value, dict):\n-            if u\'content-type\' in value:\n-                kwargs[u\'mimetype\'] = value[u\'content-type\'].encode(\'utf8\')\n-            if u\'filename\' in value:\n-                kwargs[u\'filename\'] = value[u\'filename\'].encode(\'utf8\')\n-            if u\'encoding\' in value:\n-                value = value.get(\'data\', \'\').decode(value[u\'encoding\'])\n-            else:\n-                value = value.get(\'data\', \'\')\n-        elif isinstance(value, TUSUpload):\n-            metadata = value.metadata()\n-            if \'content-type\' in metadata:\n-                kwargs[u\'mimetype\'] = metadata[\'content-type\']\n-            if \'filename\' in metadata:\n-                kwargs[u\'filename\'] = metadata[\'filename\']\n-            value = value.open()\n-\n-        return value, kwargs\n-\n-\n-@implementer(IFieldDeserializer)\n-@adapter(IBlobField, IBaseObject, IBrowserRequest)\n-class BlobFieldDeserializer(FileFieldDeserializer):\n-    pass\n-\n-\n-@implementer(IFieldDeserializer)\n-@adapter(IReferenceField, IBaseObject, IBrowserRequest)\n-class ReferenceFieldDeserializer(DefaultFieldDeserializer):\n-\n-    def __call__(self, value):\n-        portal = getMultiAdapter((self.context, self.request),\n-                                 name=\'plone_portal_state\').portal()\n-        portal_url = portal.absolute_url()\n-\n-        if not isinstance(value, list):\n-            value = [value]\n-\n-        for i, v in enumerate(value):\n-            # Resolve references given by URL\n-            if v.startswith(portal_url):\n-                path = v[len(portal_url) + 1:].encode(\'utf8\')\n-                value[i] = portal.unrestrictedTraverse(path, None)\n-\n-        return value, {}\n+from plone.restapi import HAS_AT\n+\n+if HAS_AT:\n+    from Products.Archetypes.interfaces import IBaseObject\n+    from Products.Archetypes.interfaces.field import IField\n+    from Products.Archetypes.interfaces.field import IFileField\n+    from Products.Archetypes.interfaces.field import IReferenceField\n+    from plone.app.blob.interfaces import IBlobField\n+    from plone.restapi.interfaces import IFieldDeserializer\n+    from plone.restapi.services.content.tus import TUSUpload\n+    from zope.component import adapter\n+    from zope.component import getMultiAdapter\n+    from zope.interface import implementer\n+    from zope.publisher.interfaces.browser import IBrowserRequest\n+\n+\n+    @implementer(IFieldDeserializer)\n+    @adapter(IField, IBaseObject, IBrowserRequest)\n+    class DefaultFieldDeserializer(object):\n+\n+        def __init__(self, field, context, request):\n+            self.field = field\n+            self.context = context\n+            self.request = request\n+\n+        def __call__(self, value):\n+            return value, {}\n+\n+\n+    @implementer(IFieldDeserializer)\n+    @adapter(IFileField, IBaseObject, IBrowserRequest)\n+    class FileFieldDeserializer(DefaultFieldDeserializer):\n+\n+        def __call__(self, value):\n+            kwargs = {}\n+            if isinstance(value, dict):\n+                if u\'content-type\' in value:\n+                    kwargs[u\'mimetype\'] = value[u\'content-type\'].encode(\'utf8\')\n+                if u\'filename\' in value:\n+                    kwargs[u\'filename\'] = value[u\'filename\'].encode(\'utf8\')\n+                if u\'encoding\' in value:\n+                    value = value.get(\'data\', \'\').decode(value[u\'encoding\'])\n+                else:\n+                    value = value.get(\'data\', \'\')\n+            elif isinstance(value, TUSUpload):\n+                metadata = value.metadata()\n+                if \'content-type\' in metadata:\n+                    kwargs[u\'mimetype\'] = metadata[\'content-type\']\n+                if \'filename\' in metadata:\n+                    kwargs[u\'filename\'] = metadata[\'filename\']\n+                value = value.open()\n+\n+            return value, kwargs\n+\n+\n+    @implementer(IFieldDeserializer)\n+    @adapter(IBlobField, IBaseObject, IBrowserRequest)\n+    class BlobFieldDeserializer(FileFieldDeserializer):\n+        pass\n+\n+\n+    @implementer(IFieldDeserializer)\n+    @adapter(IReferenceField, IBaseObject, IBrowserRequest)\n+    class ReferenceFieldDeserializer(DefaultFieldDeserializer):\n+\n+        def __call__(self, value):\n+            portal = getMultiAdapter((self.context, self.request),\n+                                     name=\'plone_portal_state\').portal()\n+            portal_url = portal.absolute_url()\n+\n+            if not isinstance(value, list):\n+                value = [value]\n+\n+            for i, v in enumerate(value):\n+                # Resolve references given by URL\n+                if v.startswith(portal_url):\n+                    path = v[len(portal_url) + 1:].encode(\'utf8\')\n+                    value[i] = portal.unrestrictedTraverse(path, None)\n+\n+            return value, {}\ndiff --git a/src/plone/restapi/serializer/atcollection.py b/src/plone/restapi/serializer/atcollection.py\nindex 95e4e935..2cba9adb 100644\n--- a/src/plone/restapi/serializer/atcollection.py\n+++ b/src/plone/restapi/serializer/atcollection.py\n@@ -1,35 +1,38 @@\n # -*- coding: utf-8 -*-\n-from plone.app.collection.interfaces import ICollection\n-from plone.restapi.batching import HypermediaBatch\n-from plone.restapi.interfaces import ISerializeToJson\n-from plone.restapi.interfaces import ISerializeToJsonSummary\n-from plone.restapi.serializer.atcontent import SerializeToJson\n-from zope.component import adapter\n-from zope.component import getMultiAdapter\n-from zope.interface import implementer\n-from zope.interface import Interface\n+from plone.restapi import HAS_AT\n \n+if HAS_AT:\n+    from plone.app.collection.interfaces import ICollection\n+    from plone.restapi.batching import HypermediaBatch\n+    from plone.restapi.interfaces import ISerializeToJson\n+    from plone.restapi.interfaces import ISerializeToJsonSummary\n+    from plone.restapi.serializer.atcontent import SerializeToJson\n+    from zope.component import adapter\n+    from zope.component import getMultiAdapter\n+    from zope.interface import implementer\n+    from zope.interface import Interface\n \n-@implementer(ISerializeToJson)\n-@adapter(ICollection, Interface)\n-class SerializeCollectionToJson(SerializeToJson):\n \n-    def __call__(self, version=None):\n-        collection_metadata = super(SerializeCollectionToJson, self).__call__(\n-            version=version,\n-        )\n-        results = self.context.results(batch=False)\n-        batch = HypermediaBatch(self.request, results)\n+    @implementer(ISerializeToJson)\n+    @adapter(ICollection, Interface)\n+    class SerializeCollectionToJson(SerializeToJson):\n \n-        results = collection_metadata\n-        if not self.request.form.get(\'fullobjects\'):\n-            results[\'@id\'] = batch.canonical_url\n-        results[\'items_total\'] = batch.items_total\n-        if batch.links:\n-            results[\'batching\'] = batch.links\n+        def __call__(self, version=None):\n+            collection_metadata = super(SerializeCollectionToJson, self).__call__(\n+                version=version,\n+            )\n+            results = self.context.results(batch=False)\n+            batch = HypermediaBatch(self.request, results)\n \n-        results[\'items\'] = [\n-            getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n-            for brain in batch\n-        ]\n-        return results\n+            results = collection_metadata\n+            if not self.request.form.get(\'fullobjects\'):\n+                results[\'@id\'] = batch.canonical_url\n+            results[\'items_total\'] = batch.items_total\n+            if batch.links:\n+                results[\'batching\'] = batch.links\n+\n+            results[\'items\'] = [\n+                getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n+                for brain in batch\n+            ]\n+            return results\ndiff --git a/src/plone/restapi/serializer/atcontent.py b/src/plone/restapi/serializer/atcontent.py\nindex 0721b6b0..d36b6537 100644\n--- a/src/plone/restapi/serializer/atcontent.py\n+++ b/src/plone/restapi/serializer/atcontent.py\n@@ -1,119 +1,122 @@\n # -*- coding: utf-8 -*-\n-from Acquisition import aq_inner\n-from Acquisition import aq_parent\n-from Products.Archetypes.interfaces import IBaseFolder\n-from Products.Archetypes.interfaces import IBaseObject\n-from Products.CMFCore.utils import getToolByName\n-from plone.restapi.batching import HypermediaBatch\n-from plone.restapi.deserializer import boolean_value\n-from plone.restapi.interfaces import IFieldSerializer\n-from plone.restapi.interfaces import ISerializeToJson\n-from plone.restapi.interfaces import ISerializeToJsonSummary\n-from plone.restapi.serializer.expansion import expandable_elements\n-from zope.component import adapter\n-from zope.component import getMultiAdapter\n-from zope.component import queryMultiAdapter\n-from zope.interface import Interface\n-from zope.interface import implementer\n-\n-\n-@implementer(ISerializeToJson)\n-@adapter(IBaseObject, Interface)\n-class SerializeToJson(object):\n-\n-    def __init__(self, context, request):\n-        self.context = context\n-        self.request = request\n-\n-    def getVersion(self, version):\n-        if version == \'current\':\n-            return self.context\n-        else:\n-            repo_tool = getToolByName(self.context, "portal_repository")\n-            return repo_tool.retrieve(self.context, int(version)).object\n-\n-    def __call__(self, version=None, include_items=False):\n-        version = \'current\' if version is None else version\n-\n-        obj = self.getVersion(version)\n-        parent = aq_parent(aq_inner(obj))\n-        parent_summary = getMultiAdapter(\n-            (parent, self.request), ISerializeToJsonSummary)()\n-        result = {\n-            # \'@context\': \'http://www.w3.org/ns/hydra/context.jsonld\',\n-            \'@id\': obj.absolute_url(),\n-            \'id\': obj.id,\n-            \'@type\': obj.portal_type,\n-            \'parent\': parent_summary,\n-            \'review_state\': self._get_workflow_state(obj),\n-            \'UID\': obj.UID(),\n-            \'layout\': self.context.getLayout(),\n-            \'is_folderish\': False\n-        }\n-\n-        # Insert expandable elements\n-        result.update(expandable_elements(self.context, self.request))\n-\n-        for field in obj.Schema().fields():\n-\n-            if \'r\' not in field.mode or not field.checkPermission(\'r\', obj):\n-                continue\n-\n-            name = field.getName()\n-\n-            serializer = queryMultiAdapter(\n-                (field, self.context, self.request),\n-                IFieldSerializer)\n-            if serializer is not None:\n-                result[name] = serializer()\n-\n-        return result\n-\n-    def _get_workflow_state(self, obj):\n-        wftool = getToolByName(self.context, \'portal_workflow\')\n-        review_state = wftool.getInfoFor(\n-            ob=obj, name=\'review_state\', default=None)\n-        return review_state\n-\n-\n-@implementer(ISerializeToJson)\n-@adapter(IBaseFolder, Interface)\n-class SerializeFolderToJson(SerializeToJson):\n-\n-    def _build_query(self):\n-        path = \'/\'.join(self.context.getPhysicalPath())\n-        query = {\'path\': {\'depth\': 1, \'query\': path},\n-                 \'sort_on\': \'getObjPositionInParent\'}\n-        return query\n-\n-    def __call__(self, version=None, include_items=True):\n-        folder_metadata = super(SerializeFolderToJson, self).__call__(\n-            version=version\n-        )\n-\n-        folder_metadata.update({\'is_folderish\': True})\n-        result = folder_metadata\n-\n-        include_items = self.request.form.get(\'include_items\', include_items)\n-        include_items = boolean_value(include_items)\n-        if include_items:\n-            query = self._build_query()\n-\n-            catalog = getToolByName(self.context, \'portal_catalog\')\n-            brains = catalog(query)\n-\n-            batch = HypermediaBatch(self.request, brains)\n-\n-            if not self.request.form.get(\'fullobjects\'):\n-                result[\'@id\'] = batch.canonical_url\n-            result[\'items_total\'] = batch.items_total\n-            if batch.links:\n-                result[\'batching\'] = batch.links\n-\n-            result[\'items\'] = [\n-                getMultiAdapter(\n-                    (brain, self.request), ISerializeToJsonSummary\n-                )()\n-                for brain in batch\n-            ]\n-        return result\n+from plone.restapi import HAS_AT\n+\n+if HAS_AT:\n+    from Acquisition import aq_inner\n+    from Acquisition import aq_parent\n+    from Products.Archetypes.interfaces import IBaseFolder\n+    from Products.Archetypes.interfaces import IBaseObject\n+    from Products.CMFCore.utils import getToolByName\n+    from plone.restapi.batching import HypermediaBatch\n+    from plone.restapi.deserializer import boolean_value\n+    from plone.restapi.interfaces import IFieldSerializer\n+    from plone.restapi.interfaces import ISerializeToJson\n+    from plone.restapi.interfaces import ISerializeToJsonSummary\n+    from plone.restapi.serializer.expansion import expandable_elements\n+    from zope.component import adapter\n+    from zope.component import getMultiAdapter\n+    from zope.component import queryMultiAdapter\n+    from zope.interface import Interface\n+    from zope.interface import implementer\n+\n+\n+    @implementer(ISerializeToJson)\n+    @adapter(IBaseObject, Interface)\n+    class SerializeToJson(object):\n+\n+        def __init__(self, context, request):\n+            self.context = context\n+            self.request = request\n+\n+        def getVersion(self, version):\n+            if version == \'current\':\n+                return self.context\n+            else:\n+                repo_tool = getToolByName(self.context, "portal_repository")\n+                return repo_tool.retrieve(self.context, int(version)).object\n+\n+        def __call__(self, version=None, include_items=False):\n+            version = \'current\' if version is None else version\n+\n+            obj = self.getVersion(version)\n+            parent = aq_parent(aq_inner(obj))\n+            parent_summary = getMultiAdapter(\n+                (parent, self.request), ISerializeToJsonSummary)()\n+            result = {\n+                # \'@context\': \'http://www.w3.org/ns/hydra/context.jsonld\',\n+                \'@id\': obj.absolute_url(),\n+                \'id\': obj.id,\n+                \'@type\': obj.portal_type,\n+                \'parent\': parent_summary,\n+                \'review_state\': self._get_workflow_state(obj),\n+                \'UID\': obj.UID(),\n+                \'layout\': self.context.getLayout(),\n+                \'is_folderish\': False\n+            }\n+\n+            # Insert expandable elements\n+            result.update(expandable_elements(self.context, self.request))\n+\n+            for field in obj.Schema().fields():\n+\n+                if \'r\' not in field.mode or not field.checkPermission(\'r\', obj):\n+                    continue\n+\n+                name = field.getName()\n+\n+                serializer = queryMultiAdapter(\n+                    (field, self.context, self.request),\n+                    IFieldSerializer)\n+                if serializer is not None:\n+                    result[name] = serializer()\n+\n+            return result\n+\n+        def _get_workflow_state(self, obj):\n+            wftool = getToolByName(self.context, \'portal_workflow\')\n+            review_state = wftool.getInfoFor(\n+                ob=obj, name=\'review_state\', default=None)\n+            return review_state\n+\n+\n+    @implementer(ISerializeToJson)\n+    @adapter(IBaseFolder, Interface)\n+    class SerializeFolderToJson(SerializeToJson):\n+\n+        def _build_query(self):\n+            path = \'/\'.join(self.context.getPhysicalPath())\n+            query = {\'path\': {\'depth\': 1, \'query\': path},\n+                     \'sort_on\': \'getObjPositionInParent\'}\n+            return query\n+\n+        def __call__(self, version=None, include_items=True):\n+            folder_metadata = super(SerializeFolderToJson, self).__call__(\n+                version=version\n+            )\n+\n+            folder_metadata.update({\'is_folderish\': True})\n+            result = folder_metadata\n+\n+            include_items = self.request.form.get(\'include_items\', include_items)\n+            include_items = boolean_value(include_items)\n+            if include_items:\n+                query = self._build_query()\n+\n+                catalog = getToolByName(self.context, \'portal_catalog\')\n+                brains = catalog(query)\n+\n+                batch = HypermediaBatch(self.request, brains)\n+\n+                if not self.request.form.get(\'fullobjects\'):\n+                    result[\'@id\'] = batch.canonical_url\n+                result[\'items_total\'] = batch.items_total\n+                if batch.links:\n+                    result[\'batching\'] = batch.links\n+\n+                result[\'items\'] = [\n+                    getMultiAdapter(\n+                        (brain, self.request), ISerializeToJsonSummary\n+                    )()\n+                    for brain in batch\n+                ]\n+            return result\ndiff --git a/src/plone/restapi/serializer/atfields.py b/src/plone/restapi/serializer/atfields.py\nindex 8b5396d8..fc7ef3d3 100644\n--- a/src/plone/restapi/serializer/atfields.py\n+++ b/src/plone/restapi/serializer/atfields.py\n@@ -1,130 +1,133 @@\n # -*- coding: utf-8 -*-\n-from Products.Archetypes.interfaces import IBaseObject\n-from Products.Archetypes.interfaces.field import IField\n-from Products.Archetypes.interfaces.field import IFileField\n-from Products.Archetypes.interfaces.field import IImageField\n-from Products.Archetypes.interfaces.field import IReferenceField\n-from Products.Archetypes.interfaces.field import ITextField\n-from Products.CMFCore.utils import getToolByName\n-from plone.app.blob.interfaces import IBlobField\n-from plone.app.blob.interfaces import IBlobImageField\n-from plone.restapi.imaging import get_scales\n-from plone.restapi.imaging import get_original_image_url\n-from plone.restapi.interfaces import IFieldSerializer\n-from plone.restapi.serializer.converters import json_compatible\n-from zope.component import adapter\n-from zope.interface import Interface\n-from zope.interface import implementer\n-\n-try:\n-    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n-except ImportError:\n-    from archetypes.querywidget.interfaces import IQueryField\n-else:\n-    from plone.app.collection.field import IQueryField\n-\n-\n-@adapter(IField, IBaseObject, Interface)\n-@implementer(IFieldSerializer)\n-class DefaultFieldSerializer(object):\n-\n-    def __init__(self, field, context, request):\n-        self.context = context\n-        self.request = request\n-        self.field = field\n-\n-    def __call__(self):\n-        accessor = self.field.getAccessor(self.context)\n-        return json_compatible(accessor())\n-\n-\n-@adapter(IFileField, IBaseObject, Interface)\n-@implementer(IFieldSerializer)\n-class FileFieldSerializer(DefaultFieldSerializer):\n-\n-    def __call__(self):\n-        url = \'/\'.join((self.context.absolute_url(),\n-                        \'@@download\',\n-                        self.field.getName()))\n-        result = {\n-            \'filename\': self.field.getFilename(self.context),\n-            \'content-type\': self.field.getContentType(self.context),\n-            \'size\': self.field.get_size(self.context),\n-            \'download\': url\n-        }\n-        return json_compatible(result)\n-\n-\n-@adapter(ITextField, IBaseObject, Interface)\n-@implementer(IFieldSerializer)\n-class TextFieldSerializer(DefaultFieldSerializer):\n-\n-    def __call__(self):\n-        mimetypes_registry = getToolByName(self.context, \'mimetypes_registry\')\n-        data = super(TextFieldSerializer, self).__call__()\n-        return {\n-            \'content-type\': json_compatible(\n-                mimetypes_registry(data)[2].normalized()),\n-            \'data\': data\n-        }\n-\n-\n-@adapter(IImageField, IBaseObject, Interface)\n-@implementer(IFieldSerializer)\n-class ImageFieldSerializer(DefaultFieldSerializer):\n-\n-    def __call__(self):\n-        image = self.field.get(self.context)\n-        if not image:\n-            return None\n-\n-        width, height = image.width, image.height\n-        url = get_original_image_url(\n-            self.context, self.field.__name__, width, height)\n-\n-        scales = get_scales(self.context, self.field, width, height)\n-        result = {\n-            \'filename\': self.field.getFilename(self.context),\n-            \'content-type\': self.field.get(self.context).getContentType(),\n-            \'size\': self.field.get(self.context).get_size(),\n-            \'download\': url,\n-            \'width\': width,\n-            \'height\': height,\n-            \'scales\': scales,\n-        }\n-        return json_compatible(result)\n-\n-\n-@adapter(IBlobField, IBaseObject, Interface)\n-@implementer(IFieldSerializer)\n-class BlobFieldSerializer(FileFieldSerializer):\n-    pass\n-\n-\n-@adapter(IBlobImageField, IBaseObject, Interface)\n-@implementer(IFieldSerializer)\n-class BlobImageFieldSerializer(ImageFieldSerializer):\n-    pass\n-\n-\n-@adapter(IReferenceField, IBaseObject, Interface)\n-@implementer(IFieldSerializer)\n-class ReferenceFieldSerializer(DefaultFieldSerializer):\n-\n-    def __call__(self):\n-        accessor = self.field.getAccessor(self.context)\n-        refs = accessor()\n-        if self.field.multiValued:\n-            return [json_compatible(r.absolute_url()) for r in refs]\n-        else:\n-            if refs is None:\n+from plone.restapi import HAS_AT\n+\n+if HAS_AT:\n+    from Products.Archetypes.interfaces import IBaseObject\n+    from Products.Archetypes.interfaces.field import IField\n+    from Products.Archetypes.interfaces.field import IFileField\n+    from Products.Archetypes.interfaces.field import IImageField\n+    from Products.Archetypes.interfaces.field import IReferenceField\n+    from Products.Archetypes.interfaces.field import ITextField\n+    from Products.CMFCore.utils import getToolByName\n+    from plone.app.blob.interfaces import IBlobField\n+    from plone.app.blob.interfaces import IBlobImageField\n+    from plone.restapi.imaging import get_scales\n+    from plone.restapi.imaging import get_original_image_url\n+    from plone.restapi.interfaces import IFieldSerializer\n+    from plone.restapi.serializer.converters import json_compatible\n+    from zope.component import adapter\n+    from zope.interface import Interface\n+    from zope.interface import implementer\n+\n+    try:\n+        from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n+    except ImportError:\n+        from archetypes.querywidget.interfaces import IQueryField\n+    else:\n+        from plone.app.collection.field import IQueryField\n+\n+\n+    @adapter(IField, IBaseObject, Interface)\n+    @implementer(IFieldSerializer)\n+    class DefaultFieldSerializer(object):\n+\n+        def __init__(self, field, context, request):\n+            self.context = context\n+            self.request = request\n+            self.field = field\n+\n+        def __call__(self):\n+            accessor = self.field.getAccessor(self.context)\n+            return json_compatible(accessor())\n+\n+\n+    @adapter(IFileField, IBaseObject, Interface)\n+    @implementer(IFieldSerializer)\n+    class FileFieldSerializer(DefaultFieldSerializer):\n+\n+        def __call__(self):\n+            url = \'/\'.join((self.context.absolute_url(),\n+                            \'@@download\',\n+                            self.field.getName()))\n+            result = {\n+                \'filename\': self.field.getFilename(self.context),\n+                \'content-type\': self.field.getContentType(self.context),\n+                \'size\': self.field.get_size(self.context),\n+                \'download\': url\n+            }\n+            return json_compatible(result)\n+\n+\n+    @adapter(ITextField, IBaseObject, Interface)\n+    @implementer(IFieldSerializer)\n+    class TextFieldSerializer(DefaultFieldSerializer):\n+\n+        def __call__(self):\n+            mimetypes_registry = getToolByName(self.context, \'mimetypes_registry\')\n+            data = super(TextFieldSerializer, self).__call__()\n+            return {\n+                \'content-type\': json_compatible(\n+                    mimetypes_registry(data)[2].normalized()),\n+                \'data\': data\n+            }\n+\n+\n+    @adapter(IImageField, IBaseObject, Interface)\n+    @implementer(IFieldSerializer)\n+    class ImageFieldSerializer(DefaultFieldSerializer):\n+\n+        def __call__(self):\n+            image = self.field.get(self.context)\n+            if not image:\n                 return None\n-            return json_compatible(refs.absolute_url())\n \n-\n-@adapter(IQueryField, IBaseObject, Interface)\n-@implementer(IFieldSerializer)\n-class QueryFieldSerializer(DefaultFieldSerializer):\n-    def __call__(self):\n-        raw_value = self.field.getRaw(self.context)\n-        return json_compatible(map(dict, raw_value))\n+            width, height = image.width, image.height\n+            url = get_original_image_url(\n+                self.context, self.field.__name__, width, height)\n+\n+            scales = get_scales(self.context, self.field, width, height)\n+            result = {\n+                \'filename\': self.field.getFilename(self.context),\n+                \'content-type\': self.field.get(self.context).getContentType(),\n+                \'size\': self.field.get(self.context).get_size(),\n+                \'download\': url,\n+                \'width\': width,\n+                \'height\': height,\n+                \'scales\': scales,\n+            }\n+            return json_compatible(result)\n+\n+\n+    @adapter(IBlobField, IBaseObject, Interface)\n+    @implementer(IFieldSerializer)\n+    class BlobFieldSerializer(FileFieldSerializer):\n+        pass\n+\n+\n+    @adapter(IBlobImageField, IBaseObject, Interface)\n+    @implementer(IFieldSerializer)\n+    class BlobImageFieldSerializer(ImageFieldSerializer):\n+        pass\n+\n+\n+    @adapter(IReferenceField, IBaseObject, Interface)\n+    @implementer(IFieldSerializer)\n+    class ReferenceFieldSerializer(DefaultFieldSerializer):\n+\n+        def __call__(self):\n+            accessor = self.field.getAccessor(self.context)\n+            refs = accessor()\n+            if self.field.multiValued:\n+                return [json_compatible(r.absolute_url()) for r in refs]\n+            else:\n+                if refs is None:\n+                    return None\n+                return json_compatible(refs.absolute_url())\n+\n+\n+    @adapter(IQueryField, IBaseObject, Interface)\n+    @implementer(IFieldSerializer)\n+    class QueryFieldSerializer(DefaultFieldSerializer):\n+        def __call__(self):\n+            raw_value = self.field.getRaw(self.context)\n+            return json_compatible(map(dict, raw_value))\ndiff --git a/src/plone/restapi/services/content/add.py b/src/plone/restapi/services/content/add.py\nindex efb2086f..1ff9ed99 100644\n--- a/src/plone/restapi/services/content/add.py\n+++ b/src/plone/restapi/services/content/add.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition.interfaces import IAcquirer\n+from plone.restapi import HAS_AT\n from plone.restapi.deserializer import json_body\n from plone.restapi.exceptions import DeserializationError\n from plone.restapi.interfaces import IDeserializeFromJson\n@@ -8,6 +9,7 @@\n from plone.restapi.services import Service\n from plone.restapi.services.content.utils import add\n from plone.restapi.services.content.utils import create\n+from plone.restapi.services.content.utils import rename\n from Products.CMFPlone.utils import safe_hasattr\n from zExceptions import BadRequest\n from zExceptions import Unauthorized\n@@ -18,6 +20,13 @@\n \n import plone.protect.interfaces\n \n+if HAS_AT:\n+    from Products.Archetypes.interfaces import IBaseObject\n+else:\n+    from zope.interface import Interface\n+    class IBaseObject(Interface):\n+        pass\n+\n \n class FolderPost(Service):\n     """Creates a new content object.\n@@ -77,7 +86,7 @@ def reply(self):\n         if temporarily_wrapped:\n             obj = aq_base(obj)\n \n-        if not getattr(deserializer, \'notifies_create\', False):\n+        if not HAS_AT or not IBaseObject.providedBy(obj):\n             notify(ObjectCreatedEvent(obj))\n \n         obj = add(self.context, obj, rename=not bool(id_))\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex b0f10754..c729ed3c 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -312,6 +312,9 @@ def setUpPloneSite(self, portal):\n         bases=(PLONE_RESTAPI_AT_FIXTURE, z2.ZSERVER_FIXTURE),\n         name="PloneRestApiATLayer:Functional"\n     )\n+else:\n+    PLONE_RESTAPI_AT_INTEGRATION_TESTING = PLONE_FIXTURE\n+    PLONE_RESTAPI_AT_FUNCTIONAL_TESTING = PLONE_FIXTURE\n \n \n class RelativeSession(requests.Session):\ndiff --git a/src/plone/restapi/tests/test_atcontent_deserializer.py b/src/plone/restapi/tests/test_atcontent_deserializer.py\nindex 90f4001a..c9cefca8 100644\n--- a/src/plone/restapi/tests/test_atcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_deserializer.py\n@@ -1,10 +1,6 @@\n # -*- coding: utf-8 -*-\n-from Products.Archetypes.interfaces import IBaseObject\n-from Products.Archetypes.interfaces import IObjectEditedEvent\n-from Products.Archetypes.interfaces import IObjectInitializedEvent\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n-from plone.restapi.deserializer.atcontent import ValidationRequest\n from plone.restapi.interfaces import IDeserializeFromJson\n from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n@@ -15,12 +11,17 @@\n from zope.component import provideSubscriptionAdapter\n from zope.component import adapter\n from zope.interface import implementer\n-from Products.Archetypes.interfaces import IObjectPostValidation\n-from Products.Archetypes.interfaces import IObjectPreValidation\n-\n \n import unittest\n \n+if HAS_AT:\n+    from plone.restapi.deserializer.atcontent import ValidationRequest\n+    from Products.Archetypes.interfaces import IBaseObject\n+    from Products.Archetypes.interfaces import IObjectEditedEvent\n+    from Products.Archetypes.interfaces import IObjectInitializedEvent\n+    from Products.Archetypes.interfaces import IObjectPostValidation\n+    from Products.Archetypes.interfaces import IObjectPreValidation\n+\n \n class TestATContentDeserializer(unittest.TestCase, OrderingMixin):\n \n@@ -162,6 +163,8 @@ class TestValidationRequest(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n         self.doc1 = self.portal[self.portal.invokeFactory(\ndiff --git a/src/plone/restapi/tests/test_batching.py b/src/plone/restapi/tests/test_batching.py\nindex 95d22651..cf820bd0 100644\n--- a/src/plone/restapi/tests/test_batching.py\n+++ b/src/plone/restapi/tests/test_batching.py\n@@ -5,6 +5,7 @@\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n from plone.dexterity.utils import createContentInContainer\n+from plone.restapi import HAS_AT\n from plone.restapi.batching import DEFAULT_BATCH_SIZE\n from plone.restapi.batching import HypermediaBatch\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n@@ -313,6 +314,8 @@ class TestBatchingArchetypes(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n         self.portal_url = self.portal.absolute_url()\ndiff --git a/src/plone/restapi/tests/test_content_patch.py b/src/plone/restapi/tests/test_content_patch.py\nindex 39aecd66..a1929dbe 100644\n--- a/src/plone/restapi/tests/test_content_patch.py\n+++ b/src/plone/restapi/tests/test_content_patch.py\n@@ -7,6 +7,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n+from plone.restapi import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from Products.CMFCore.PortalContent import PortalContent\n@@ -207,6 +208,8 @@ class TestATContentPatch(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\ndiff --git a/src/plone/restapi/tests/test_content_post.py b/src/plone/restapi/tests/test_content_post.py\nindex f5572bce..c94dd113 100644\n--- a/src/plone/restapi/tests/test_content_post.py\n+++ b/src/plone/restapi/tests/test_content_post.py\n@@ -7,6 +7,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n+from plone.restapi import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from Products.CMFCore.utils import getToolByName\n@@ -215,6 +216,8 @@ class TestATFolderCreate(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\ndiff --git a/src/plone/restapi/tests/test_content_utils.py b/src/plone/restapi/tests/test_content_utils.py\nindex 898294b9..ff95b02f 100644\n--- a/src/plone/restapi/tests/test_content_utils.py\n+++ b/src/plone/restapi/tests/test_content_utils.py\n@@ -2,8 +2,10 @@\n from Acquisition import aq_parent\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.restapi import HAS_AT\n from plone.restapi.services.content.utils import add\n from plone.restapi.services.content.utils import create\n+from plone.restapi.services.content.utils import rename\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from Products.CMFPlone.interfaces import ISelectableConstrainTypes\n@@ -63,6 +65,8 @@ class TestATCreateContent(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n@@ -150,6 +154,8 @@ class TestATAddContent(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\ndiff --git a/src/plone/restapi/tests/test_registry_serializer.py b/src/plone/restapi/tests/test_registry_serializer.py\nindex ea9f2856..bd184f75 100644\n--- a/src/plone/restapi/tests/test_registry_serializer.py\n+++ b/src/plone/restapi/tests/test_registry_serializer.py\n@@ -1,19 +1,22 @@\n # -*- coding: utf-8 -*-\n-import unittest\n-\n from plone.registry import Registry\n from plone.registry import field\n from plone.registry.record import Record\n+from plone.restapi import HAS_AT\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from zope.component import getMultiAdapter\n \n+import unittest\n+\n \n class TestRegistrySerializer(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n \ndiff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex ec4fd645..29fe9456 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -8,6 +8,7 @@\n from plone.app.textfield.value import RichTextValue\n from plone.dexterity.utils import createContentInContainer\n from plone.registry.interfaces import IRegistry\n+from plone.restapi import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n@@ -506,6 +507,8 @@ class TestSearchATFunctional(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n         self.portal_url = self.portal.absolute_url()\ndiff --git a/src/plone/restapi/tests/test_serializer_catalog.py b/src/plone/restapi/tests/test_serializer_catalog.py\nindex a66a0a1b..7c4c0430 100644\n--- a/src/plone/restapi/tests/test_serializer_catalog.py\n+++ b/src/plone/restapi/tests/test_serializer_catalog.py\n@@ -2,6 +2,7 @@\n from DateTime import DateTime\n from plone import api\n from plone.dexterity.utils import createContentInContainer\n+from plone.restapi import HAS_AT\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n@@ -177,6 +178,8 @@ class TestCatalogATSerializers(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n         self.request = self.portal.REQUEST\ndiff --git a/src/plone/restapi/tests/test_serializer_summary.py b/src/plone/restapi/tests/test_serializer_summary.py\nindex 1ecdb6b0..7e09abd8 100644\n--- a/src/plone/restapi/tests/test_serializer_summary.py\n+++ b/src/plone/restapi/tests/test_serializer_summary.py\n@@ -3,6 +3,7 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.dexterity.utils import createContentInContainer\n+from plone.restapi import HAS_AT\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n@@ -100,6 +101,8 @@ class TestSummarySerializersATTypes(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\ndiff --git a/src/plone/restapi/tests/test_tus.py b/src/plone/restapi/tests/test_tus.py\nindex dfb12dbd..28ca836a 100644\n--- a/src/plone/restapi/tests/test_tus.py\n+++ b/src/plone/restapi/tests/test_tus.py\n@@ -13,6 +13,7 @@\n from plone.rest.cors import CORSPolicy\n from plone.rest.interfaces import ICORSPolicy\n from plone.restapi.services.content.tus import TUSUpload\n+from plone.restapi import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n@@ -577,6 +578,8 @@ class TestTUSWithAT(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         login(self.portal, TEST_USER_NAME)\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-07-16T10:42:00-03:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.restapi/commit/77e36af27746793e7920543304cd26e9819be57b

some py3 fixes

Files changed:
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_serializer_converters.py
M src/plone/restapi/tests/test_tus.py

b'diff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex d3528ba6..ab33c83f 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -128,7 +128,7 @@ def test_datetime_with_tz_deserialization_handles_dst(self):\n         value = self.deserialize(\'test_datetime_tz_field\',\n                                  u\'2015-05-20T10:39:54.361+02\')\n         self.assertEqual(timezone("Europe/Zurich").localize(\n-            datetime(2015, 05, 20, 10, 39, 54, 361000)), value)\n+            datetime(2015, 5, 20, 10, 39, 54, 361000)), value)\n \n     def test_datetime_deserialization_none(self):\n         # Make sure we don\'t construct a datetime out of nothing\ndiff --git a/src/plone/restapi/tests/test_serializer_converters.py b/src/plone/restapi/tests/test_serializer_converters.py\nindex 3b643c95..b961a413 100644\n--- a/src/plone/restapi/tests/test_serializer_converters.py\n+++ b/src/plone/restapi/tests/test_serializer_converters.py\n@@ -15,6 +15,7 @@\n \n import json\n import Missing\n+import six\n \n \n class TestJsonCompatibleConverters(TestCase):\n@@ -70,9 +71,14 @@ def test_int(self):\n         self.assertEquals(\'42\', json.dumps(json_compatible(42)))\n \n     def test_long(self):\n-        self.assertEquals(10L, json_compatible(10L))\n-        self.assertIsInstance(json_compatible(10L), long)\n-        self.assertEquals(\'10\', json.dumps(json_compatible(10L)))\n+        def _long(val):\n+            if six.PY2:\n+                return long(val)\n+            else:\n+                return int(val)\n+        self.assertEquals(_long(10), json_compatible(_long(10)))\n+        self.assertIsInstance(json_compatible(_long(10)), long)\n+        self.assertEquals(\'10\', json.dumps(json_compatible(_long(10))))\n \n     def test_float(self):\n         self.assertEquals(1.4, json_compatible(1.4))\ndiff --git a/src/plone/restapi/tests/test_tus.py b/src/plone/restapi/tests/test_tus.py\nindex 28ca836a..c04d5764 100644\n--- a/src/plone/restapi/tests/test_tus.py\n+++ b/src/plone/restapi/tests/test_tus.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from DateTime import DateTime\n-from StringIO import StringIO\n+from six import BytesIO\n from base64 import b64encode\n from plone import api\n from plone.app.testing import SITE_OWNER_NAME\n@@ -246,7 +246,7 @@ def test_tus_patch_unfinished_upload_returns_expires_header(self):\n             headers={\'Tus-Resumable\': \'1.0.0\',\n                      \'Content-Type\': \'application/offset+octet-stream\',\n                      \'Upload-Offset\': \'0\'},\n-            data=StringIO(\'abcdefghijkl\'))\n+            data=BytesIO(b\'abcdefghijkl\'))\n         self.assertEqual(204, response.status_code)\n         self.assertIn(\'Upload-Expires\', response.headers)\n         tus.cleanup()\n@@ -261,7 +261,7 @@ def test_tus_patch_non_primary_field(self):\n             headers={\'Tus-Resumable\': \'1.0.0\',\n                      \'Content-Type\': \'application/offset+octet-stream\',\n                      \'Upload-Offset\': \'0\'},\n-            data=StringIO(\'abcdefghijkl\'))\n+            data=BytesIO(b\'abcdefghijkl\'))\n \n         self.assertEqual(204, response.status_code)\n         transaction.commit()\n@@ -280,7 +280,7 @@ def test_patch_in_create_mode_without_add_permission_raises_401(self):\n             headers={\'Tus-Resumable\': \'1.0.0\',\n                      \'Content-Type\': \'application/offset+octet-stream\',\n                      \'Upload-Offset\': \'0\'},\n-            data=StringIO(\'abcdefghijkl\'))\n+            data=BytesIO(b\'abcdefghijkl\'))\n         self.assertEqual(401, response.status_code)\n         tus.cleanup()\n \n@@ -293,7 +293,7 @@ def test_patch_in_replace_mode_without_modify_permission_raises_401(self):\n             headers={\'Tus-Resumable\': \'1.0.0\',\n                      \'Content-Type\': \'application/offset+octet-stream\',\n                      \'Upload-Offset\': \'0\'},\n-            data=StringIO(\'abcdefghijkl\'))\n+            data=BytesIO(b\'abcdefghijkl\'))\n         self.assertEqual(401, response.status_code)\n         tus.cleanup()\n \n@@ -347,7 +347,7 @@ def test_tus_can_upload_text_file(self):\n             headers={\'Content-Type\': \'application/offset+octet-stream\',\n                      \'Upload-Offset\': \'0\',\n                      \'Tus-Resumable\': \'1.0.0\'},\n-            data=StringIO(UPLOAD_DATA))\n+            data=BytesIO(bUPLOAD_DATA))\n         self.assertEqual(response.status_code, 204)\n \n     def test_tus_can_replace_pdf_file(self):\n@@ -501,20 +501,20 @@ def test_offset_returns_zero_if_file_doesnt_exist(self):\n \n     def test_offset_returns_size_of_current_file(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(StringIO(\'0123456789\'))\n+        tus.write(BytesIO(b\'0123456789\'))\n         self.assertEqual(10, tus.offset())\n         tus.cleanup()\n \n     def test_write_creates_new_file(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(StringIO(\'0123456789\'))\n+        tus.write(BytesIO(b\'0123456789\'))\n         self.assertTrue(os.path.isfile(tus.filepath))\n         tus.cleanup()\n \n     def test_write_appends_to_file_at_given_offset(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(StringIO(\'0123456789\'))\n-        tus.write(StringIO(\'abc\'), 10)\n+        tus.write(BytesIO(b\'0123456789\'))\n+        tus.write(BytesIO(b\'abc\'), 10)\n         self.assertEqual(13, tus.offset())\n         with open(tus.filepath, \'rb\') as f:\n             data = f.read()\n@@ -523,7 +523,7 @@ def test_write_appends_to_file_at_given_offset(self):\n \n     def test_write_sets_finished_flag(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 10})\n-        tus.write(StringIO(\'0123456789\'))\n+        tus.write(BytesIO(b\'0123456789\'))\n         self.assertTrue(tus.finished)\n         tus.cleanup()\n \n@@ -534,13 +534,13 @@ def test_metadata_returns_empty_dict_if_no_metadata_has_been_set(self):\n \n     def test_expires_returns_expiration_time_of_current_upload(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(StringIO(\'0123456789\'))\n+        tus.write(BytesIO(b\'0123456789\'))\n         self.assertGreater(DateTime(tus.expires()), DateTime())\n         tus.cleanup()\n \n     def test_cleanup_removes_upload_file(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(StringIO(\'0123456789\'))\n+        tus.write(BytesIO(b\'0123456789\'))\n         tus.cleanup()\n         self.assertFalse(os.path.exists(tus.filepath))\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-07-16T10:43:31-03:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.restapi/commit/d96bc0334b15a60d8f71e8b77066e48cfad8d546

a bunch of py3 fixes, mostly done with python-modernize

Files changed:
M src/plone/restapi/batching.py
M src/plone/restapi/imaging.py
M src/plone/restapi/search/utils.py
M src/plone/restapi/serializer/atfields.py
M src/plone/restapi/serializer/converters.py
M src/plone/restapi/serializer/dxcontent.py
M src/plone/restapi/serializer/expansion.py
M src/plone/restapi/serializer/registry.py
M src/plone/restapi/services/content/tus.py
M src/plone/restapi/services/content/utils.py
M src/plone/restapi/services/copymove/copymove.py
M src/plone/restapi/services/discussion/conversation.py
M src/plone/restapi/services/history/patch.py
M src/plone/restapi/services/multilingual/pam.py
M src/plone/restapi/services/users/add.py
M src/plone/restapi/tests/performance.py
M src/plone/restapi/tests/test_atcontent_deserializer.py
M src/plone/restapi/tests/test_atfield_deserializer.py
M src/plone/restapi/tests/test_atfield_serializer.py
M src/plone/restapi/tests/test_batching.py
M src/plone/restapi/tests/test_content_delete.py
M src/plone/restapi/tests/test_content_get.py
M src/plone/restapi/tests/test_copymove.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_dxcontent_deserializer.py
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_dxfield_serializer.py
M src/plone/restapi/tests/test_expansion.py
M src/plone/restapi/tests/test_functional_auth.py
M src/plone/restapi/tests/test_registry.py
M src/plone/restapi/tests/test_registry_serializer.py
M src/plone/restapi/tests/test_serializer.py
M src/plone/restapi/tests/test_serializer_converters.py
M src/plone/restapi/tests/test_services_history.py
M src/plone/restapi/tests/test_services_vocabularies.py
M src/plone/restapi/tests/test_site_deserializer.py
M src/plone/restapi/tests/test_translations.py
M src/plone/restapi/tests/test_tus.py
M src/plone/restapi/tests/test_types.py
M src/plone/restapi/tests/test_workflow.py
M src/plone/restapi/types/utils.py

b'diff --git a/src/plone/restapi/batching.py b/src/plone/restapi/batching.py\nindex fe633f7f..0fcc94db 100644\n--- a/src/plone/restapi/batching.py\n+++ b/src/plone/restapi/batching.py\n@@ -116,7 +116,7 @@ def _url_with_params(self, params):\n         # result of parse_qsl into a dict!\n \n         # Drop params to be updated, then prepend new params in order\n-        qs_params = filter(lambda x: x[0] not in params.keys(), qs_params)\n+        qs_params = [x for x in qs_params if x[0] not in list(params.keys())]\n         qs_params = sorted(params.items()) + qs_params\n \n         qs = urlencode(qs_params)\ndiff --git a/src/plone/restapi/imaging.py b/src/plone/restapi/imaging.py\nindex 202f6bfa..5046f253 100644\n--- a/src/plone/restapi/imaging.py\n+++ b/src/plone/restapi/imaging.py\n@@ -3,6 +3,7 @@\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.globalrequest import getRequest\n+from six.moves import map\n \n try:\n     from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n@@ -62,8 +63,8 @@ def get_actual_scale(dimensions, bbox):\n     This is supposed to emulate / predict the behavior of Plone\'s\n     ImageScaling implementations.\n     """\n-    width, height = map(float, dimensions)\n-    max_width, max_height = map(float, bbox)\n+    width, height = list(map(float, dimensions))\n+    max_width, max_height = list(map(float, bbox))\n     resize_ratio = min(max_width / width, max_height / height)\n \n     # Plone doesn\'t upscale images for the default named scales - limit\n@@ -98,7 +99,7 @@ def get_scale_infos():\n \n     def split_scale_info(allowed_size):\n         name, dims = allowed_size.split(\' \')\n-        width, height = map(int, dims.split(\':\'))\n+        width, height = list(map(int, dims.split(\':\')))\n         return name, width, height\n \n     return [split_scale_info(size) for size in allowed_sizes]\ndiff --git a/src/plone/restapi/search/utils.py b/src/plone/restapi/search/utils.py\nindex 6037bcdd..36a08971 100644\n--- a/src/plone/restapi/search/utils.py\n+++ b/src/plone/restapi/search/utils.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from functools import reduce\n \n \n def unflatten_dotted_dict(dct):\ndiff --git a/src/plone/restapi/serializer/atfields.py b/src/plone/restapi/serializer/atfields.py\nindex fc7ef3d3..6e1a11a8 100644\n--- a/src/plone/restapi/serializer/atfields.py\n+++ b/src/plone/restapi/serializer/atfields.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from plone.restapi import HAS_AT\n+from six.moves import map\n \n if HAS_AT:\n     from Products.Archetypes.interfaces import IBaseObject\n@@ -130,4 +131,4 @@ def __call__(self):\n     class QueryFieldSerializer(DefaultFieldSerializer):\n         def __call__(self):\n             raw_value = self.field.getRaw(self.context)\n-            return json_compatible(map(dict, raw_value))\n+            return json_compatible(list(map(dict, raw_value)))\ndiff --git a/src/plone/restapi/serializer/converters.py b/src/plone/restapi/serializer/converters.py\nindex a81e24c8..c866a71a 100644\n--- a/src/plone/restapi/serializer/converters.py\n+++ b/src/plone/restapi/serializer/converters.py\n@@ -22,6 +22,8 @@\n import Missing\n import pytz\n import six\n+from six.moves import map\n+from six.moves import zip\n # import re\n \n \n@@ -93,7 +95,7 @@ def string_converter(value):\n @adapter(list)\n @implementer(IJsonCompatible)\n def list_converter(value):\n-    return map(json_compatible, value)\n+    return list(map(json_compatible, value))\n \n \n @adapter(PersistentList)\n@@ -105,19 +107,19 @@ def persistent_list_converter(value):\n @adapter(tuple)\n @implementer(IJsonCompatible)\n def tuple_converter(value):\n-    return map(json_compatible, value)\n+    return list(map(json_compatible, value))\n \n \n @adapter(frozenset)\n @implementer(IJsonCompatible)\n def frozenset_converter(value):\n-    return map(json_compatible, value)\n+    return list(map(json_compatible, value))\n \n \n @adapter(set)\n @implementer(IJsonCompatible)\n def set_converter(value):\n-    return map(json_compatible, value)\n+    return list(map(json_compatible, value))\n \n \n @adapter(dict)\n@@ -126,10 +128,10 @@ def dict_converter(value):\n     if value == {}:\n         return {}\n \n-    keys, values = zip(*value.items())\n-    keys = map(json_compatible, keys)\n-    values = map(json_compatible, values)\n-    return dict(zip(keys, values))\n+    keys, values = list(zip(*list(value.items())))\n+    keys = list(map(json_compatible, keys))\n+    values = list(map(json_compatible, values))\n+    return dict(list(zip(keys, values)))\n \n \n @adapter(PersistentMapping)\ndiff --git a/src/plone/restapi/serializer/dxcontent.py b/src/plone/restapi/serializer/dxcontent.py\nindex c6ad6f53..1ac3c422 100644\n--- a/src/plone/restapi/serializer/dxcontent.py\n+++ b/src/plone/restapi/serializer/dxcontent.py\n@@ -145,7 +145,7 @@ def __call__(self, version=None, include_items=True):\n             if batch.links:\n                 result[\'batching\'] = batch.links\n \n-            if \'fullobjects\' in self.request.form.keys():\n+            if \'fullobjects\' in list(self.request.form.keys()):\n                 result[\'items\'] = getMultiAdapter(\n                     (brains, self.request),\n                     ISerializeToJson\ndiff --git a/src/plone/restapi/serializer/expansion.py b/src/plone/restapi/serializer/expansion.py\nindex cdf0eec8..e3cc3d13 100644\n--- a/src/plone/restapi/serializer/expansion.py\n+++ b/src/plone/restapi/serializer/expansion.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.restapi.interfaces import IExpandableElement\n from zope.component import getAdapters\n+import six\n \n \n def expandable_elements(context, request):\n@@ -18,7 +19,7 @@ def expandable_elements(context, request):\n \n \n def update_dict_recursively(d, u):\n-    for key, value in u.iteritems():\n+    for key, value in six.iteritems(u):\n         if isinstance(value, dict):\n             r = update_dict_recursively(d.get(key, {}), value)\n             d[key] = r\ndiff --git a/src/plone/restapi/serializer/registry.py b/src/plone/restapi/serializer/registry.py\nindex 02400890..7ee278ce 100644\n--- a/src/plone/restapi/serializer/registry.py\n+++ b/src/plone/restapi/serializer/registry.py\n@@ -19,7 +19,7 @@ def __init__(self, registry, request):\n     def __call__(self):\n         records = self.registry.records\n         # Batch keys, because that is a simple BTree\n-        batch = HypermediaBatch(self.request, records.keys())\n+        batch = HypermediaBatch(self.request, list(records.keys()))\n \n         results = {}\n         results[\'@id\'] = batch.canonical_url\ndiff --git a/src/plone/restapi/services/content/tus.py b/src/plone/restapi/services/content/tus.py\nindex cceaa1d5..3f248963 100644\n--- a/src/plone/restapi/services/content/tus.py\n+++ b/src/plone/restapi/services/content/tus.py\n@@ -23,6 +23,7 @@\n \n import json\n import os\n+import six\n import time\n \n TUS_OPTIONS_RESPONSE_HEADERS = {\n@@ -305,7 +306,7 @@ def __init__(self, uid, metadata=None):\n     def initalize(self, metadata):\n         """Initialize a new TUS upload by writing its metadata to disk."""\n         self.cleanup_expired()\n-        with open(self.metadata_path, \'wb\') as f:\n+        with open(self.metadata_path, \'w\') as f:\n             json.dump(metadata, f)\n \n     def length(self):\ndiff --git a/src/plone/restapi/services/content/utils.py b/src/plone/restapi/services/content/utils.py\nindex d8fc1025..482f2b24 100644\n--- a/src/plone/restapi/services/content/utils.py\n+++ b/src/plone/restapi/services/content/utils.py\n@@ -15,6 +15,9 @@\n from zope.container.interfaces import INameChooser\n from zope.event import notify\n \n+import transaction\n+import six\n+\n \n def create(container, type_, id_=None, title=None):\n     """Create a new content item."""\n@@ -28,7 +31,7 @@ def create(container, type_, id_=None, title=None):\n             str(now.millis())[7:],\n             randint(0, 9999))\n     else:\n-        if isinstance(id_, unicode):\n+        if six.PY2 and isinstance(id_, six.text_type):\n             new_id = id_.encode(\'utf8\')\n         else:\n             new_id = id_\ndiff --git a/src/plone/restapi/services/copymove/copymove.py b/src/plone/restapi/services/copymove/copymove.py\nindex 5bb10e3b..5e12ea4c 100644\n--- a/src/plone/restapi/services/copymove/copymove.py\n+++ b/src/plone/restapi/services/copymove/copymove.py\n@@ -28,12 +28,16 @@ def get_object(self, key):\n         if isinstance(key, six.string_types):\n             if key.startswith(self.portal_url):\n                 # Resolve by URL\n-                return self.portal.restrictedTraverse(\n-                    key[len(self.portal_url) + 1:].encode(\'utf8\'), None)\n+                key = key[len(self.portal_url) + 1:]\n+                if six.PY2:\n+                    key = key.encode(\'utf8\')\n+                return self.portal.restrictedTraverse(key, None)\n             elif key.startswith(\'/\'):\n+                if six.PY2:\n+                    key = key.encode(\'utf8\')\n                 # Resolve by path\n                 return self.portal.restrictedTraverse(\n-                    key.encode(\'utf8\').lstrip(\'/\'), None)\n+                    key.lstrip(\'/\'), None)\n             else:\n                 # Resolve by UID\n                 brain = self.catalog(UID=key)\ndiff --git a/src/plone/restapi/services/discussion/conversation.py b/src/plone/restapi/services/discussion/conversation.py\nindex e2d450ef..16b11efb 100644\n--- a/src/plone/restapi/services/discussion/conversation.py\n+++ b/src/plone/restapi/services/discussion/conversation.py\n@@ -75,7 +75,7 @@ def reply(self):\n                          plone.protect.interfaces.IDisableCSRFProtection)\n \n         conversation = IConversation(self.context)\n-        if self.comment_id and self.comment_id not in conversation.keys():\n+        if self.comment_id and self.comment_id not in list(conversation.keys()):\n             self.request.response.setStatus(404)\n             return\n \n@@ -113,7 +113,7 @@ def reply(self):\n             raise BadRequest("Comment id is a required part of the url")\n \n         conversation = IConversation(self.context)\n-        if self.comment_id not in conversation.keys():\n+        if self.comment_id not in list(conversation.keys()):\n             self.request.response.setStatus(404)\n             return\n         comment = conversation[self.comment_id]\ndiff --git a/src/plone/restapi/services/history/patch.py b/src/plone/restapi/services/history/patch.py\nindex 062b5c58..0b759a2b 100644\n--- a/src/plone/restapi/services/history/patch.py\n+++ b/src/plone/restapi/services/history/patch.py\n@@ -6,6 +6,7 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFEditions import CMFEditionsMessageFactory as _\n from Products.CMFEditions.interfaces.IModifier import FileTooLargeToVersionError  # noqa\n+import six\n \n \n class HistoryPatch(Service):\n@@ -21,8 +22,8 @@ def revert(context, version):\n     pr.revert(context, version)\n \n     title = context.title_or_id()\n-    if not isinstance(title, unicode):\n-        title = unicode(title, \'utf-8\', \'ignore\')\n+    if not isinstance(title, six.text_type):\n+        title = six.text_type(title, \'utf-8\', \'ignore\')\n \n     if pr.supportsPolicy(context, \'version_on_revert\'):\n         try:\ndiff --git a/src/plone/restapi/services/multilingual/pam.py b/src/plone/restapi/services/multilingual/pam.py\nindex 6a378128..4372630e 100644\n--- a/src/plone/restapi/services/multilingual/pam.py\n+++ b/src/plone/restapi/services/multilingual/pam.py\n@@ -125,7 +125,7 @@ def reply(self):\n                 type=\'BadRequest\',\n                 message=\'You need to provide the language to unlink\'))\n \n-        if language not in manager.get_translations().keys():\n+        if language not in list(manager.get_translations().keys()):\n             self.request.response.setStatus(400)\n             return dict(error=dict(\n                 type=\'BadRequest\',\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex 1e71af77..497a53d8 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -231,7 +231,7 @@ def update_password(self, data):\n             return\n \n         # Send password reset mail\n-        if data.keys() == []:\n+        if list(data.keys()) == []:\n             registration_tool = getToolByName(self.context,\n                                               \'portal_registration\')\n             registration_tool.mailPassword(username, self.request)\ndiff --git a/src/plone/restapi/tests/performance.py b/src/plone/restapi/tests/performance.py\nindex 53ad641a..c3e4b85b 100644\n--- a/src/plone/restapi/tests/performance.py\n+++ b/src/plone/restapi/tests/performance.py\n@@ -7,6 +7,7 @@\n \n import os\n import pytz\n+from six.moves import range\n \n LOREMIPSUM_HTML_10_PARAGRAPHS = \'\'\'<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.</p><p>Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.</p><p>Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis.</p><p>At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, At accusam aliquyam diam diam dolore dolores duo eirmod eos erat, et nonumy sed tempor et et invidunt justo labore Stet clita ea et gubergren, kasd magna no rebum. sanctus sea sed takimata ut vero voluptua. est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat.</p><p>Consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus.</p><p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.</p><p>Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.\'\'\'  # noqa\n \ndiff --git a/src/plone/restapi/tests/test_atcontent_deserializer.py b/src/plone/restapi/tests/test_atcontent_deserializer.py\nindex c9cefca8..61fb4642 100644\n--- a/src/plone/restapi/tests/test_atcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_deserializer.py\n@@ -13,6 +13,7 @@\n from zope.interface import implementer\n \n import unittest\n+from six.moves import range\n \n if HAS_AT:\n     from plone.restapi.deserializer.atcontent import ValidationRequest\ndiff --git a/src/plone/restapi/tests/test_atfield_deserializer.py b/src/plone/restapi/tests/test_atfield_deserializer.py\nindex 4b923c79..0574d274 100644\n--- a/src/plone/restapi/tests/test_atfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_atfield_deserializer.py\n@@ -7,6 +7,7 @@\n from zope.component import getMultiAdapter\n \n import unittest\n+import six\n \n \n class TestATFieldDeserializer(unittest.TestCase):\n@@ -31,7 +32,7 @@ def deserialize(self, fieldname, value):\n \n     def test_string_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testStringField\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n+        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertEquals(u\'K\xc3\xa4fer\', value)\n \n     def test_boolean_field_deserialization_returns_true(self):\n@@ -56,18 +57,18 @@ def test_float_field_deserialization_returns_float_value(self):\n \n     def test_fixedpoint_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testFixedPointField\', u\'1.1\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n+        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertEquals(u\'1.1\', value)\n \n     def test_datetime_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testDateTimeField\',\n                                          u\'2015-12-20T19:51:06.375Z\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n+        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertEquals(u\'2015-12-20T19:51:06.375Z\', value)\n \n     def test_lines_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testLinesField\', u\'line1\\nline2\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n+        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertEquals(\'line1\\nline2\', value)\n \n     def test_lines_field_deserialization_returns_list(self):\n@@ -78,7 +79,7 @@ def test_lines_field_deserialization_returns_list(self):\n \n     def test_file_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testFileField\', u\'Spam and eggs!\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n+        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertEquals(u\'Spam and eggs!\', value)\n \n     def test_file_field_deserialization_returns_decoded_value(self):\n@@ -95,14 +96,14 @@ def test_file_field_deserialization_returns_mimetype_and_filename(self):\n             u\'filename\': \'doc.txt\',\n             u\'content-type\': \'text/plain\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n+        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertEquals(u\'Spam and eggs!\', value)\n         self.assertEquals(\'text/plain\', kwargs[u\'mimetype\'])\n         self.assertEquals(\'doc.txt\', kwargs[u\'filename\'])\n \n     def test_text_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testTextField\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n+        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertEquals(u\'K\xc3\xa4fer\', value)\n \n     def test_text_field_deserialization_returns_mimetype(self):\n@@ -110,7 +111,7 @@ def test_text_field_deserialization_returns_mimetype(self):\n             u\'data\': u\'K\xc3\xa4fer\',\n             u\'content-type\': \'text/html\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n+        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertEquals(u\'K\xc3\xa4fer\', value)\n         self.assertEquals(\'text/html\', kwargs[u\'mimetype\'])\n \n@@ -121,14 +122,14 @@ def test_image_field_deserialization_returns_mimetype_and_filename(self):\n             u\'filename\': \'image.gif\',\n             u\'content-type\': \'image/gif\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n+        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertTrue(value.startswith(\'GIF89a\'))\n         self.assertEquals(\'image/gif\', kwargs[u\'mimetype\'])\n         self.assertEquals(\'image.gif\', kwargs[u\'filename\'])\n \n     def test_blob_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testBlobField\', u\'Spam and eggs!\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n+        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertEquals(u\'Spam and eggs!\', value)\n \n     def test_blob_field_deserialization_returns_mimetype_and_filename(self):\n@@ -137,7 +138,7 @@ def test_blob_field_deserialization_returns_mimetype_and_filename(self):\n             u\'filename\': \'doc.txt\',\n             u\'content-type\': \'text/plain\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n+        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertEquals(u\'Spam and eggs!\', value)\n         self.assertEquals(\'text/plain\', kwargs[u\'mimetype\'])\n         self.assertEquals(\'doc.txt\', kwargs[u\'filename\'])\n@@ -149,7 +150,7 @@ def test_blobfile_field_deserialization_returns_mimetype_and_filename(\n             u\'filename\': \'doc.txt\',\n             u\'content-type\': \'text/plain\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n+        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertEquals(u\'Spam and eggs!\', value)\n         self.assertEquals(\'text/plain\', kwargs[u\'mimetype\'])\n         self.assertEquals(\'doc.txt\', kwargs[u\'filename\'])\n@@ -162,7 +163,7 @@ def test_blobimage_field_deserialization_returns_mimetype_and_filename(\n             u\'filename\': \'image.gif\',\n             u\'content-type\': \'image/gif\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n+        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertTrue(value.startswith(\'GIF89a\'))\n         self.assertEquals(\'image/gif\', kwargs[u\'mimetype\'])\n         self.assertEquals(\'image.gif\', kwargs[u\'filename\'])\n@@ -203,7 +204,7 @@ def test_reference_field_deserialization_returns_object_in_list(self):\n         doc2 = self.portal[self.portal.invokeFactory(\n             \'ATTestDocument\', id=\'doc2\', title=\'Referenced Document\')]\n         value, kwargs = self.deserialize(\'testReferenceField\',\n-                                         unicode(doc2.absolute_url()))\n+                                         six.text_type(doc2.absolute_url()))\n         self.assertEquals(doc2, value[0])\n \n     def test_reference_field_deserialization_returns_objects(self):\n@@ -213,6 +214,6 @@ def test_reference_field_deserialization_returns_objects(self):\n             \'ATTestDocument\', id=\'doc3\', title=\'Referenced Document\')]\n         value, kwargs = self.deserialize(\n             \'testReferenceField\',\n-            [unicode(doc2.absolute_url()), unicode(doc3.absolute_url())])\n+            [six.text_type(doc2.absolute_url()), six.text_type(doc3.absolute_url())])\n         self.assertEquals(doc2, value[0])\n         self.assertEquals(doc3, value[1])\ndiff --git a/src/plone/restapi/tests/test_atfield_serializer.py b/src/plone/restapi/tests/test_atfield_serializer.py\nindex c8f886db..ad9f4884 100644\n--- a/src/plone/restapi/tests/test_atfield_serializer.py\n+++ b/src/plone/restapi/tests/test_atfield_serializer.py\n@@ -12,6 +12,7 @@\n \n import os\n import unittest\n+import six\n \n if PLONE_VERSION.base_version >= \'5.1\':\n     GIF_SCALE_FORMAT = \'png\'\n@@ -43,7 +44,7 @@ def serialize(self, fieldname, value, **kwargs):\n \n     def test_string_field_serialization_returns_unicode(self):\n         value = self.serialize(\'testStringField\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'K\xc3\xa4fer\', value)\n \n     def test_boolean_field_serialization_returns_true(self):\n@@ -68,13 +69,13 @@ def test_float_field_serialization_returns_float(self):\n \n     def test_fixedpoint_field_serialization_returns_unicode(self):\n         value = self.serialize(\'testFixedPointField\', u\'1.11\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'1.11\', value)\n \n     def test_datetime_field_serialization_returns_unicode(self):\n         value = self.serialize(\'testDateTimeField\',\n                                DateTime(\'2016-01-21T01:14:48+00:00\'))\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'2016-01-21T01:14:48+00:00\', value)\n \n     def test_lines_field_serialization_returns_list(self):\n@@ -254,7 +255,7 @@ def test_reference_field_serialization_returns_unicode(self):\n         doc2 = self.portal[self.portal.invokeFactory(\n             \'ATTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n         value = self.serialize(\'testReferenceField\', doc2.UID())\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'http://nohost/plone/doc2\', value)\n \n     def test_reference_field_serialization_returns_list(self):\ndiff --git a/src/plone/restapi/tests/test_batching.py b/src/plone/restapi/tests/test_batching.py\nindex cf820bd0..016a6353 100644\n--- a/src/plone/restapi/tests/test_batching.py\n+++ b/src/plone/restapi/tests/test_batching.py\n@@ -18,6 +18,7 @@\n \n import transaction\n import unittest\n+from six.moves import range\n \n \n class TestBatchingDXBase(unittest.TestCase):\n@@ -186,7 +187,7 @@ def test_total_item_count_is_correct(self):\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n         response = self.api_session.get(\'/collection?b_size=100\')\n-        self.assertNotIn(\'batching\', response.json().keys())\n+        self.assertNotIn(\'batching\', list(response.json().keys()))\n \n \n class TestBatchingDXFolders(TestBatchingDXBase):\n@@ -248,7 +249,7 @@ def test_total_item_count_is_correct(self):\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n         response = self.api_session.get(\'/folder?b_size=100\')\n-        self.assertNotIn(\'batching\', response.json().keys())\n+        self.assertNotIn(\'batching\', list(response.json().keys()))\n \n \n class TestBatchingSiteRoot(TestBatchingDXBase):\n@@ -306,7 +307,7 @@ def test_total_item_count_is_correct(self):\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n         response = self.api_session.get(\'/folder?b_size=100\')\n-        self.assertNotIn(\'batching\', response.json().keys())\n+        self.assertNotIn(\'batching\', list(response.json().keys()))\n \n \n class TestBatchingArchetypes(unittest.TestCase):\n@@ -388,7 +389,7 @@ def test_total_item_count_is_correct(self):\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n         response = self.api_session.get(\'/folder?b_size=100\')\n-        self.assertNotIn(\'batching\', response.json().keys())\n+        self.assertNotIn(\'batching\', list(response.json().keys()))\n \n \n class TestHypermediaBatch(unittest.TestCase):\n@@ -400,7 +401,7 @@ def setUp(self):\n         self.request = self.portal.REQUEST\n \n     def test_items_total(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n         # items_total should be total number of items in the sequence\n@@ -408,12 +409,12 @@ def test_items_total(self):\n             25, batch.items_total)\n \n     def test_default_batch_size(self):\n-        items = range(1, 27)\n+        items = list(range(1, 27))\n         batch = HypermediaBatch(self.request, items)\n         self.assertEqual(DEFAULT_BATCH_SIZE, len(list(batch)))\n \n     def test_custom_batch_size(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 5\n         batch = HypermediaBatch(self.request, items)\n         # Batch size should be customizable via request\n@@ -421,39 +422,39 @@ def test_custom_batch_size(self):\n             5, len(list(batch)))\n \n     def test_default_batch_start(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n         # Batch should start on first item by default\n         self.assertEqual(\n-            range(1, 11), list(batch))\n+            list(range(1, 11)), list(batch))\n \n     def test_custom_batch_start(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 10\n         self.request.form[\'b_start\'] = 5\n         batch = HypermediaBatch(self.request, items)\n         # Batch start should be customizable via request\n         self.assertEqual(\n-            range(6, 16), list(batch))\n+            list(range(6, 16)), list(batch))\n \n     def test_custom_start_and_size_can_be_combined(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 5\n         self.request.form[\'b_start\'] = 5\n         batch = HypermediaBatch(self.request, items)\n         # Should be able to combine custom batch start and size\n         self.assertListEqual(\n-            range(6, 11), list(batch))\n+            list(range(6, 11)), list(batch))\n \n     def test_canonical_url(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n         self.assertEqual(\'http://nohost\', batch.canonical_url)\n \n     def test_canonical_url_preserves_query_string_params(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         self.request[\'QUERY_STRING\'] = \'one=1&two=2\'\n@@ -467,7 +468,7 @@ def test_canonical_url_preserves_query_string_params(self):\n         self.assertEquals(\'\', parsed_url.path)\n \n     def test_canonical_url_preserves_list_like_query_string_params(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         self.request[\'QUERY_STRING\'] = \'foolist=1&foolist=2\'\n@@ -482,7 +483,7 @@ def test_canonical_url_preserves_list_like_query_string_params(self):\n         )\n \n     def test_canonical_url_strips_batching_params(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         self.request[\'QUERY_STRING\'] = \'one=1&b_size=10&b_start=20&two=2\'\n@@ -496,7 +497,7 @@ def test_canonical_url_strips_batching_params(self):\n         self.assertEquals(\'\', parsed_url.path)\n \n     def test_canonical_url_strips_sorting_params(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request[\'QUERY_STRING\'] = \'one=1&sort_on=path&two=2\'\n         batch = HypermediaBatch(self.request, items)\n@@ -509,7 +510,7 @@ def test_canonical_url_strips_sorting_params(self):\n         self.assertEquals(\'\', parsed_url.path)\n \n     def test_current_batch_url(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         self.request[\'ACTUAL_URL\'] = \'http://nohost\'\n@@ -519,14 +520,14 @@ def test_current_batch_url(self):\n             \'http://nohost?b_size=10&b_start=20\', batch.current_batch_url)\n \n     def test_batching_links_omitted_if_resultset_fits_in_single_batch(self):\n-        items = range(1, 5)\n+        items = list(range(1, 5))\n \n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n         self.assertEqual(None, batch.links)\n \n     def test_first_link_contained(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n@@ -534,7 +535,7 @@ def test_first_link_contained(self):\n             {\'first\': \'http://nohost?b_start=0\'}, batch.links)\n \n     def test_first_link_preserves_list_like_querystring_params(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         self.request[\'QUERY_STRING\'] = \'foolist=1&foolist=2\'\n@@ -550,7 +551,7 @@ def test_first_link_preserves_list_like_querystring_params(self):\n         )\n \n     def test_last_link_contained(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n@@ -558,7 +559,7 @@ def test_last_link_contained(self):\n             {\'last\': \'http://nohost?b_start=20\'}, batch.links)\n \n     def test_next_link_contained_if_necessary(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n@@ -566,7 +567,7 @@ def test_next_link_contained_if_necessary(self):\n             {\'next\': \'http://nohost?b_start=10\'}, batch.links)\n \n     def test_next_link_omitted_on_last_page(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         # Start on last page\n         self.request.form[\'b_size\'] = 10\n@@ -577,7 +578,7 @@ def test_next_link_omitted_on_last_page(self):\n             set(batch.links.keys()))\n \n     def test_prev_link_contained_if_necessary(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         # Start on third page\n         self.request.form[\'b_size\'] = 10\n@@ -587,7 +588,7 @@ def test_prev_link_contained_if_necessary(self):\n             {\'prev\': \'http://nohost?b_start=10\'}, batch.links)\n \n     def test_prev_link_omitted_on_first_page(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n@@ -596,7 +597,7 @@ def test_prev_link_omitted_on_first_page(self):\n             set(batch.links.keys()))\n \n     def test_no_gaps_or_duplicates_between_pages(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         items_from_all_batches = []\n \n         size = 10\n@@ -610,7 +611,7 @@ def test_no_gaps_or_duplicates_between_pages(self):\n         self.assertEqual(items, items_from_all_batches)\n \n     def test_batch_start_never_drops_below_zero(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         # Start in the middle of what would otherwise be the first batch\n         self.request.form[\'b_size\'] = 10\ndiff --git a/src/plone/restapi/tests/test_content_delete.py b/src/plone/restapi/tests/test_content_delete.py\nindex 6dc5c4f2..b0159ce2 100644\n--- a/src/plone/restapi/tests/test_content_delete.py\n+++ b/src/plone/restapi/tests/test_content_delete.py\n@@ -79,8 +79,8 @@ def traverse(self, path=\'/plone\', accept=\'application/json\', method=\'GET\'):\n         request.environ[\'PATH_TRANSLATED\'] = path\n         request.environ[\'HTTP_ACCEPT\'] = accept\n         request.environ[\'REQUEST_METHOD\'] = method\n-        request._auth = \'Basic %s\' % b64encode(\n-            \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD))\n+        auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+        request._auth = \'Basic %s\' % b64encode(auth.encode(\'utf8\')).decode(\'utf8\')\n         notify(PubStart(request))\n         return request.traverse(path)\n \ndiff --git a/src/plone/restapi/tests/test_content_get.py b/src/plone/restapi/tests/test_content_get.py\nindex 21daeaf1..1c600042 100644\n--- a/src/plone/restapi/tests/test_content_get.py\n+++ b/src/plone/restapi/tests/test_content_get.py\n@@ -73,13 +73,13 @@ def test_get_content_returns_fullobjects(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(3, len(response.json()[\'items\']))\n         self.assertTrue(\n-            \'title\' in response.json()[\'items\'][0].keys()\n+            \'title\' in list(response.json()[\'items\'][0].keys())\n         )\n         self.assertTrue(\n-            \'description\' in response.json()[\'items\'][0].keys()\n+            \'description\' in list(response.json()[\'items\'][0].keys())\n         )\n         self.assertTrue(\n-            \'text\' in response.json()[\'items\'][0].keys()\n+            \'text\' in list(response.json()[\'items\'][0].keys())\n         )\n         self.assertEqual(\n             {\ndiff --git a/src/plone/restapi/tests/test_copymove.py b/src/plone/restapi/tests/test_copymove.py\nindex 79fcecdd..24a99aad 100644\n--- a/src/plone/restapi/tests/test_copymove.py\n+++ b/src/plone/restapi/tests/test_copymove.py\n@@ -34,8 +34,8 @@ def traverse(self, path=\'/plone\', accept=\'application/json\', method=\'GET\'):\n         request.environ[\'PATH_TRANSLATED\'] = path\n         request.environ[\'HTTP_ACCEPT\'] = accept\n         request.environ[\'REQUEST_METHOD\'] = method\n-        request._auth = \'Basic %s\' % b64encode(\n-            \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD))\n+        auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+        request._auth = \'Basic %s\' % b64encode(auth.encode(\'utf8\')).decode(\'utf8\')\n         notify(PubStart(request))\n         return request.traverse(path)\n \ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 9f6973cc..7d9da605 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -42,6 +42,7 @@\n import os\n import transaction\n import unittest\n+from six.moves import range\n \n if PAM_INSTALLED:\n     from plone.app.multilingual.interfaces import ITranslationManager\n@@ -127,7 +128,7 @@ def save_request_and_response_for_docs(name, response):\n \n             req.write(response.request.body)\n \n-    with open(\'{}/{}\'.format(base_path, \'%s.resp\' % name), \'w\') as resp:\n+    with open(\'{}/{}\'.format(base_path, \'%s.resp\' % name), \'wb\') as resp:\n         status = response.status_code\n         reason = response.reason\n         resp.write(\'HTTP/1.1 {} {}\\n\'.format(status, reason))\n@@ -1099,8 +1100,8 @@ def clean_final_url(response, _id=\'document-2016-10-21\'):\n \n         # POST create an upload\n         metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME),\n-            b64encode(UPLOAD_MIMETYPE)\n+            b64encode(UPLOAD_FILENAME.encode(\'utf8\')).decode(\'utf8\'),\n+            b64encode(UPLOAD_MIMETYPE.encode(\'utf8\')).decode(\'utf8\')\n         )\n         response = self.api_session.post(\n             \'/folder/@tus-upload\',\n@@ -1395,7 +1396,7 @@ def create_document_with_comments(self):\n                 comment = createObject(\'plone.Comment\')\n                 comment.text = \'Comment %d.%d\' % (x, y)\n                 comment_replies.addComment(comment)\n-        self.comment_id, self.comment = replies.items()[0]\n+        self.comment_id, self.comment = list(replies.items())[0]\n \n         return document\n \ndiff --git a/src/plone/restapi/tests/test_dxcontent_deserializer.py b/src/plone/restapi/tests/test_dxcontent_deserializer.py\nindex 8838fae9..54dbc0bc 100644\n--- a/src/plone/restapi/tests/test_dxcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_deserializer.py\n@@ -15,6 +15,8 @@\n \n import json\n import unittest\n+import six\n+from six.moves import range\n \n \n class TestDXContentDeserializer(unittest.TestCase, OrderingMixin):\n@@ -229,7 +231,7 @@ def serialize(self, field):\n         return serializer()[field]\n \n     def test_serialize2deserialize_relation(self):\n-        value = unicode(self.portal.doc2.UID())\n+        value = six.text_type(self.portal.doc2.UID())\n         self.deserialize(\'test_relationchoice_field\', value)\n \n         serialization_value = self.serialize(\'test_relationchoice_field\')\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex ab33c83f..4c26b8b2 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -19,6 +19,7 @@\n from zope.schema.interfaces import ValidationError\n \n import unittest\n+import six\n \n \n class RequiredField(object):\n@@ -87,7 +88,7 @@ def test_bytesline_deserialization_returns_bytestring(self):\n \n     def test_choice_deserialization_returns_vocabulary_item(self):\n         value = self.deserialize(\'test_choice_field\', u\'bar\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'bar\', value)\n \n     def test_date_deserialization_returns_date(self):\n@@ -179,12 +180,12 @@ def test_set_deserialization_returns_set(self):\n \n     def test_text_deserialization_returns_unicode(self):\n         value = self.deserialize(\'test_text_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'Foo\', value)\n \n     def test_textline_deserialization_returns_unicode(self):\n         value = self.deserialize(\'test_textline_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'Foo\', value)\n \n     def test_time_deserialization_returns_time(self):\n@@ -332,14 +333,14 @@ def test_relationchoice_deserialization_from_uid_returns_document(self):\n         doc2 = self.portal[self.portal.invokeFactory(\n             \'DXTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n         value = self.deserialize(\'test_relationchoice_field\',\n-                                 unicode(doc2.UID()))\n+                                 six.text_type(doc2.UID()))\n         self.assertEqual(doc2, value)\n \n     def test_relationchoice_deserialization_from_url_returns_document(self):\n         doc2 = self.portal[self.portal.invokeFactory(\n             \'DXTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n         value = self.deserialize(\'test_relationchoice_field\',\n-                                 unicode(doc2.absolute_url()))\n+                                 six.text_type(doc2.absolute_url()))\n         self.assertEqual(doc2, value)\n \n     def test_relationchoice_deserialization_from_path_returns_document(self):\n@@ -354,7 +355,7 @@ def test_relationlist_deserialization_returns_list_of_documents(self):\n         doc3 = self.portal[self.portal.invokeFactory(\n             \'DXTestDocument\', id=\'doc3\', title=\'Referenceable Document\')]\n         value = self.deserialize(\'test_relationlist_field\',\n-                                 [unicode(doc2.UID()), unicode(doc3.UID())])\n+                                 [six.text_type(doc2.UID()), six.text_type(doc3.UID())])\n         self.assertTrue(isinstance(value, list), \'Not a <list>\')\n         self.assertEqual(doc2, value[0])\n         self.assertEqual(doc3, value[1])\n@@ -383,7 +384,7 @@ def test_collection_deserializer_validates_value(self):\n         # DefaultFieldDeserializer that the CollectionFieldDeserializer will\n         # delegate to for deserializing collection items.\n         self.assertEqual(u\'Object is of wrong type.\', cm.exception.doc())\n-        self.assertEqual((\'2\', (int, long), \'\'), cm.exception.args)\n+        self.assertEqual((\'2\', six.integer_types, \'\'), cm.exception.args)\n \n     def test_dict_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n@@ -393,7 +394,7 @@ def test_dict_deserializer_validates_value(self):\n         # DefaultFieldDeserializer that the DictFieldSerializer will delegate\n         # to for deserializing keys and values.\n         self.assertEqual(u\'Object is of wrong type.\', cm.exception.doc())\n-        self.assertEqual((\'k\', (int, long), \'\'), cm.exception.args)\n+        self.assertEqual((\'k\', six.integer_types, \'\'), cm.exception.args)\n \n     def test_time_deserializer_handles_invalid_value(self):\n         with self.assertRaises(ValueError) as cm:\ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex c86dc8e2..dc414551 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -21,6 +21,7 @@\n from zope.interface.verify import verifyClass\n \n import os\n+import six\n \n if PLONE_VERSION.base_version >= \'5.1\':\n     GIF_SCALE_FORMAT = \'png\'\n@@ -60,12 +61,12 @@ def serialize(self, fieldname, value):\n \n     def test_ascii_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_ascii_field\', \'foo\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'foo\', value)\n \n     def test_asciiline_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_asciiline_field\', \'foo\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'foo\', value)\n \n     def test_bool_field_serialization_returns_true(self):\n@@ -80,34 +81,34 @@ def test_bool_field_serialization_returns_false(self):\n \n     def test_bytes_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_bytes_field\', \'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'\\xe4\\xf6\\xfc\', value)\n \n     def test_bytesline_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_bytesline_field\',\n                                \'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'\\xe4\\xf6\\xfc\', value)\n \n     def test_choice_field_serialization_returns_vocabulary_item(self):\n         value = self.serialize(\'test_choice_field\', u\'foo\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'foo\', value)\n \n     def test_date_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_date_field\', date(2015, 7, 15))\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'2015-07-15\', value)\n \n     def test_datetime_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_datetime_field\',\n                                datetime(2015, 6, 20, 13, 22, 4))\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'2015-06-20T13:22:04\', value)\n \n     def test_decimal_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_decimal_field\', \'1.1\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'1.1\', value)\n \n     def test_dict_field_serialization_returns_dict(self):\n@@ -143,17 +144,17 @@ def test_set_field_serialization_returns_list(self):\n \n     def test_text_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_text_field\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'K\xc3\xa4fer\', value)\n \n     def test_textline_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_textline_field\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'K\xc3\xa4fer\', value)\n \n     def test_time_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_time_field\', time(14, 15, 33))\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'14:15:33\', value)\n \n     def test_timedelta_field_serialization_returns_float(self):\ndiff --git a/src/plone/restapi/tests/test_expansion.py b/src/plone/restapi/tests/test_expansion.py\nindex 3806210f..3dad6d89 100644\n--- a/src/plone/restapi/tests/test_expansion.py\n+++ b/src/plone/restapi/tests/test_expansion.py\n@@ -126,7 +126,7 @@ def test_actions_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'actions\',\n-            response.json().get(\'@components\').keys()\n+            list(response.json().get(\'@components\').keys())\n         )\n \n     def test_actions_expanded(self):\n@@ -160,7 +160,7 @@ def test_navigation_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'navigation\',\n-            response.json().get(\'@components\').keys()\n+            list(response.json().get(\'@components\').keys())\n         )\n \n     def test_navigation_expanded(self):\n@@ -239,7 +239,7 @@ def test_breadcrumbs_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'breadcrumbs\',\n-            response.json().get(\'@components\').keys()\n+            list(response.json().get(\'@components\').keys())\n         )\n \n     def test_breadcrumbs_expanded(self):\n@@ -266,7 +266,7 @@ def test_workflow_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'workflow\',\n-            response.json().get(\'@components\').keys()\n+            list(response.json().get(\'@components\').keys())\n         )\n \n     def test_workflow_expanded(self):\n@@ -337,7 +337,7 @@ def test_translations_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'translations\',\n-            response.json().get(\'@components\').keys()\n+            list(response.json().get(\'@components\').keys())\n         )\n \n     def test_translations_expanded(self):\ndiff --git a/src/plone/restapi/tests/test_functional_auth.py b/src/plone/restapi/tests/test_functional_auth.py\nindex 1d8543ab..e9e4a385 100644\n--- a/src/plone/restapi/tests/test_functional_auth.py\n+++ b/src/plone/restapi/tests/test_functional_auth.py\n@@ -128,6 +128,8 @@ def test_accessing_private_document_with_expired_token_fails(self):\n             \'admin\',\n             timeout=-60\n         )\n+        if six.PY3:\n+            expired_token = expired_token.decode(\'utf8\')\n         transaction.commit()\n \n         response = requests.get(\ndiff --git a/src/plone/restapi/tests/test_registry.py b/src/plone/restapi/tests/test_registry.py\nindex e421b615..bee9973c 100644\n--- a/src/plone/restapi/tests/test_registry.py\n+++ b/src/plone/restapi/tests/test_registry.py\n@@ -12,6 +12,7 @@\n \n import transaction\n import unittest\n+from six.moves import range\n \n \n class TestRegistry(unittest.TestCase):\ndiff --git a/src/plone/restapi/tests/test_registry_serializer.py b/src/plone/restapi/tests/test_registry_serializer.py\nindex bd184f75..74a435b6 100644\n--- a/src/plone/restapi/tests/test_registry_serializer.py\n+++ b/src/plone/restapi/tests/test_registry_serializer.py\n@@ -8,6 +8,7 @@\n from zope.component import getMultiAdapter\n \n import unittest\n+from six.moves import range\n \n \n class TestRegistrySerializer(unittest.TestCase):\n@@ -30,7 +31,7 @@ def test_empty(self):\n         obj = self.serialize(registry)\n         expected = [\'@id\', \'items_total\', \'items\']\n         self.assertEqual(set(obj.keys()), set(expected))\n-        self.assertNotIn(\'batching\', obj.keys())\n+        self.assertNotIn(\'batching\', list(obj.keys()))\n \n     def test_batched(self):\n         registry = Registry()\n@@ -42,7 +43,7 @@ def test_batched(self):\n         obj = self.serialize(registry)\n         expected = [\'@id\', \'items_total\', \'items\', \'batching\']\n         self.assertEqual(set(expected), set(obj.keys()))\n-        self.assertEqual(obj[\'items_total\'], len(range(1, 100)))\n+        self.assertEqual(obj[\'items_total\'], len(list(range(1, 100))))\n \n     def test_structure(self):\n         registry = Registry()\ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex 43c14ab7..5a7733c5 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -66,7 +66,7 @@ def test_serialize_can_read_as_manager(self):\n         setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Manager\'])\n         self.assertIn(\n             \'Test Read Permission\',\n-            self.serialize(self.portal.dxdoc).values()\n+            list(self.serialize(self.portal.dxdoc).values())\n         )\n \n     def test_serialize_cannot_read_as_member(self):\n@@ -75,7 +75,7 @@ def test_serialize_cannot_read_as_member(self):\n         setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n         self.assertNotIn(\n             \'Test Read Permission\',\n-            self.serialize(self.portal.dxdoc).values()\n+            list(self.serialize(self.portal.dxdoc).values())\n         )\n \n     def test_serialize_returns_desciption(self):\ndiff --git a/src/plone/restapi/tests/test_serializer_converters.py b/src/plone/restapi/tests/test_serializer_converters.py\nindex b961a413..31f60d3e 100644\n--- a/src/plone/restapi/tests/test_serializer_converters.py\n+++ b/src/plone/restapi/tests/test_serializer_converters.py\n@@ -45,7 +45,7 @@ def test_False(self):\n \n     def test_unicode(self):\n         self.assertEquals(u\'foo\', json_compatible(u\'foo\'))\n-        self.assertIsInstance(json_compatible(u\'foo\'), unicode)\n+        self.assertIsInstance(json_compatible(u\'foo\'), six.text_type)\n         self.assertEquals(\'"foo"\', json.dumps(json_compatible(\'foo\')))\n \n     def test_unicode_with_umlaut(self):\n@@ -56,7 +56,7 @@ def test_unicode_with_umlaut(self):\n     def test_string_is_converted_to_unicode(self):\n         # Standard library JSON works with unicode.\n         self.assertEquals(u\'foo\', json_compatible(\'foo\'))\n-        self.assertIsInstance(json_compatible(\'foo\'), unicode)\n+        self.assertIsInstance(json_compatible(\'foo\'), six.text_type)\n         self.assertEquals(\'"foo"\', json.dumps(json_compatible(\'foo\')))\n \n     def test_string_with_umlaut(self):\n@@ -73,11 +73,11 @@ def test_int(self):\n     def test_long(self):\n         def _long(val):\n             if six.PY2:\n-                return long(val)\n+                return int(val)\n             else:\n                 return int(val)\n         self.assertEquals(_long(10), json_compatible(_long(10)))\n-        self.assertIsInstance(json_compatible(_long(10)), long)\n+        self.assertIsInstance(json_compatible(_long(10)), int)\n         self.assertEquals(\'10\', json.dumps(json_compatible(_long(10))))\n \n     def test_float(self):\n@@ -89,7 +89,7 @@ def test_list(self):\n         self.assertEquals([\'foo\'], json_compatible([\'foo\']))\n         self.assertEquals(\'["foo"]\', json.dumps(json_compatible([\'foo\'])))\n         self.assertIsInstance(json_compatible([\'foo\'])[0],\n-                              unicode,\n+                              six.text_type,\n                               \'List values should be converted recursively.\')\n \n     def test_persistent_list(self):\n@@ -97,7 +97,7 @@ def test_persistent_list(self):\n         self.assertEquals([\'foo\'], json_compatible(value))\n         self.assertEquals(\'["foo"]\', json.dumps(json_compatible(value)))\n         self.assertIsInstance(json_compatible(value)[0],\n-                              unicode,\n+                              six.text_type,\n                               \'PersistentList values should be converted\'\n                               \' recursively.\')\n \n@@ -107,7 +107,7 @@ def test_tuple(self):\n         self.assertEquals([\'foo\', None], json_compatible((\'foo\', None)))\n         self.assertEquals(\'["foo"]\', json.dumps(json_compatible((\'foo\', ))))\n         self.assertIsInstance(json_compatible((\'foo\',))[0],\n-                              unicode,\n+                              six.text_type,\n                               \'Tuple values should be converted recursively.\')\n \n     def test_frozenset(self):\n@@ -127,11 +127,11 @@ def test_dict(self):\n                                            \'baz\': 3}))\n         self.assertEquals(\'{"foo": "bar"}\',\n                           json.dumps(json_compatible({\'foo\': \'bar\'})))\n-        self.assertIsInstance(json_compatible({\'foo\': \'bar\'}.keys()[0]),\n-                              unicode,\n+        self.assertIsInstance(json_compatible(list({\'foo\': \'bar\'}.keys())[0]),\n+                              six.text_type,\n                               \'Dict keys should be converted recursively.\')\n-        self.assertIsInstance(json_compatible({\'foo\': \'bar\'}.values()[0]),\n-                              unicode,\n+        self.assertIsInstance(json_compatible(list({\'foo\': \'bar\'}.values())[0]),\n+                              six.text_type,\n                               \'Dict values should be converted recursively.\')\n \n     def test_dict_empty(self):\n@@ -142,11 +142,11 @@ def test_persistent_mapping(self):\n         value = PersistentMapping({\'foo\': \'bar\'})\n         self.assertEquals({u\'foo\': u\'bar\'}, json_compatible(value))\n         self.assertEquals(\'{"foo": "bar"}\', json.dumps(json_compatible(value)))\n-        self.assertIsInstance(json_compatible(value.keys()[0]),\n-                              unicode,\n+        self.assertIsInstance(json_compatible(list(value.keys())[0]),\n+                              six.text_type,\n                               \'Dict keys should be converted recursively.\')\n-        self.assertIsInstance(json_compatible(value.values()[0]),\n-                              unicode,\n+        self.assertIsInstance(json_compatible(list(value.values())[0]),\n+                              six.text_type,\n                               \'Dict values should be converted recursively.\')\n \n     def test_python_datetime(self):\ndiff --git a/src/plone/restapi/tests/test_services_history.py b/src/plone/restapi/tests/test_services_history.py\nindex e3856e85..ccac6649 100644\n--- a/src/plone/restapi/tests/test_services_history.py\n+++ b/src/plone/restapi/tests/test_services_history.py\n@@ -9,6 +9,7 @@\n \n import unittest\n import transaction\n+import six\n \n \n class TestHistoryEndpoint(unittest.TestCase):\n@@ -103,7 +104,7 @@ def test_time_field(self):\n         response = self.api_session.get(url)\n \n         for item in response.json():\n-            self.assertTrue(isinstance(item[\'time\'], basestring))\n+            self.assertTrue(isinstance(item[\'time\'], six.string_types))\n \n     def test_get_historical_link(self):\n         # The @id field should link to @history/version.\n@@ -116,7 +117,7 @@ def test_get_historical_link(self):\n                     item[\'@id\'].endswith(\'@history/\' + str(item[\'version\']))\n                 )\n             else:\n-                self.assertNotIn(\'@id\', item.keys())\n+                self.assertNotIn(\'@id\', list(item.keys()))\n \n     def test_explicit_current(self):\n         # Does version=current get the current version\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 10bea099..d981e2fb 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -86,10 +86,10 @@ def test_get_all_vocabularies(self):\n         response = response.json()\n         self.assertTrue(len(response) > 0)\n         self.assertTrue(\n-            \'@id\' in response[0].keys()\n+            \'@id\' in list(response[0].keys())\n         )\n         self.assertTrue(\n-            \'title\' in response[0].keys()\n+            \'title\' in list(response[0].keys())\n         )\n         self.assertEqual(\n             [\ndiff --git a/src/plone/restapi/tests/test_site_deserializer.py b/src/plone/restapi/tests/test_site_deserializer.py\nindex 4374a46b..aa0142c2 100644\n--- a/src/plone/restapi/tests/test_site_deserializer.py\n+++ b/src/plone/restapi/tests/test_site_deserializer.py\n@@ -5,6 +5,7 @@\n from zope.component import getMultiAdapter\n \n import unittest\n+from six.moves import range\n \n \n class TestDXContentDeserializer(unittest.TestCase, OrderingMixin):\ndiff --git a/src/plone/restapi/tests/test_translations.py b/src/plone/restapi/tests/test_translations.py\nindex 29ae5da7..af89c5bc 100644\n--- a/src/plone/restapi/tests/test_translations.py\n+++ b/src/plone/restapi/tests/test_translations.py\n@@ -159,7 +159,7 @@ def test_translation_unlinking_succeeds(self):\n         manager = ITranslationManager(self.en_content)\n         self.assertNotIn(\n             ILanguage(self.es_content).get_language(),\n-            manager.get_translations().keys())\n+            list(manager.get_translations().keys()))\n \n     def test_calling_endpoint_without_language_gives_400(self):\n         response = requests.delete(\ndiff --git a/src/plone/restapi/tests/test_tus.py b/src/plone/restapi/tests/test_tus.py\nindex c04d5764..0424af1a 100644\n--- a/src/plone/restapi/tests/test_tus.py\n+++ b/src/plone/restapi/tests/test_tus.py\n@@ -110,8 +110,8 @@ def test_tus_post_initialization(self):\n \n     def test_tus_post_initialization_with_metadata(self):\n         metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME),\n-            b64encode(UPLOAD_MIMETYPE))\n+            b64encode(UPLOAD_FILENAME.encode(\'utf8\')).decode(\'utf8\'),\n+            b64encode(UPLOAD_MIMETYPE.encode(\'utf8\')).decode(\'utf8\'))\n         response = self.api_session.post(\n             self.upload_url,\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -303,8 +303,8 @@ def test_tus_can_upload_pdf_file(self):\n                                      UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n         metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_PDF_FILENAME),\n-            b64encode(UPLOAD_PDF_MIMETYPE))\n+            b64encode(UPLOAD_PDF_FILENAME.encode(\'utf8\')),\n+            b64encode(UPLOAD_PDF_MIMETYPE.encode(\'utf8\')))\n         response = self.api_session.post(\n             self.upload_url,\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -330,8 +330,8 @@ def test_tus_can_upload_pdf_file(self):\n     def test_tus_can_upload_text_file(self):\n         # initialize the upload with POST\n         metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME),\n-            b64encode(UPLOAD_MIMETYPE))\n+            b64encode(UPLOAD_FILENAME.encode(\'utf8\')),\n+            b64encode(UPLOAD_MIMETYPE.encode(\'utf8\')))\n         response = self.api_session.post(\n             self.upload_url,\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -362,8 +362,8 @@ def test_tus_can_replace_pdf_file(self):\n                                      UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n         metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_PDF_FILENAME),\n-            b64encode(UPLOAD_PDF_MIMETYPE))\n+            b64encode(UPLOAD_PDF_FILENAME.encode(\'utf8\')),\n+            b64encode(UPLOAD_PDF_MIMETYPE.encode(\'utf8\')))\n         response = self.api_session.post(\n             \'{}/@tus-replace\'.format(self.file.absolute_url()),\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -518,7 +518,7 @@ def test_write_appends_to_file_at_given_offset(self):\n         self.assertEqual(13, tus.offset())\n         with open(tus.filepath, \'rb\') as f:\n             data = f.read()\n-        self.assertEqual(\'0123456789abc\', data)\n+        self.assertEqual(b\'0123456789abc\', data)\n         tus.cleanup()\n \n     def test_write_sets_finished_flag(self):\n@@ -601,8 +601,8 @@ def test_tus_can_upload_pdf_file(self):\n                                      UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n         metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_PDF_FILENAME),\n-            b64encode(UPLOAD_PDF_MIMETYPE))\n+            b64encode(UPLOAD_PDF_FILENAME.encode(\'utf8\')),\n+            b64encode(UPLOAD_PDF_MIMETYPE.encode(\'utf8\')))\n         response = self.api_session.post(\n             self.upload_url,\n             headers={\'Tus-Resumable\': \'1.0.0\',\ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex e6214247..a050533c 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -97,7 +97,7 @@ def test_get_jsonschema_for_fti(self):\n         )\n         self.assertEqual(jsonschema[\'title\'], \'Page\')\n         self.assertEqual(jsonschema[\'type\'], \'object\')\n-        self.assertIn(\'title\', jsonschema[\'properties\'].keys())\n+        self.assertIn(\'title\', list(jsonschema[\'properties\'].keys()))\n         self.assertIn(\'title\', jsonschema[\'required\'])\n         self.assertEquals(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n         self.assertIn(\'title\', jsonschema[\'fieldsets\'][0][\'fields\'])\n@@ -109,7 +109,7 @@ def test_get_jsonschema_for_fti(self):\n             request,\n             excluded_fields=[\'title\']\n         )\n-        self.assertNotIn(\'title\', jsonschema[\'properties\'].keys())\n+        self.assertNotIn(\'title\', list(jsonschema[\'properties\'].keys()))\n \n     def test_get_jsonschema_for_fti_non_dx(self):\n         """Make sure FTIs without lookupSchema are supported.\n@@ -130,14 +130,14 @@ def test_get_jsonschema_for_portal_type(self):\n         )\n         self.assertEqual(jsonschema[\'title\'], \'Page\')\n         self.assertEqual(jsonschema[\'type\'], \'object\')\n-        self.assertIn(\'title\', jsonschema[\'properties\'].keys())\n+        self.assertIn(\'title\', list(jsonschema[\'properties\'].keys()))\n         self.assertIn(\'title\', jsonschema[\'required\'])\n         self.assertEquals(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n         self.assertIn(\'title\', jsonschema[\'fieldsets\'][0][\'fields\'])\n \n         jsonschema = get_jsonschema_for_portal_type(\n             \'Document\', portal, request, excluded_fields=[\'title\'])\n-        self.assertNotIn(\'title\', jsonschema[\'properties\'].keys())\n+        self.assertNotIn(\'title\', list(jsonschema[\'properties\'].keys()))\n \n \n class TestTaggedValuesJsonSchemaUtils(TestCase):\ndiff --git a/src/plone/restapi/tests/test_workflow.py b/src/plone/restapi/tests/test_workflow.py\nindex 9d1524ce..03bb783f 100644\n--- a/src/plone/restapi/tests/test_workflow.py\n+++ b/src/plone/restapi/tests/test_workflow.py\n@@ -98,8 +98,8 @@ def traverse(self, path=\'/plone\', accept=\'application/json\',\n         request.environ[\'PATH_TRANSLATED\'] = path\n         request.environ[\'HTTP_ACCEPT\'] = accept\n         request.environ[\'REQUEST_METHOD\'] = method\n-        request._auth = \'Basic %s\' % b64encode(\n-            \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD))\n+        auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+        request._auth = \'Basic %s\' % b64encode(auth.encode(\'utf8\')).decode(\'utf8\')\n         notify(PubStart(request))\n         return request.traverse(path)\n \ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex 97290afb..d979f08d 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -64,7 +64,7 @@ def get_fieldsets(context, request, schema, additional_schemata=None):\n     fieldsets = [{\n         \'id\': \'default\',\n         \'title\': u\'Default\',\n-        \'fields\': form.fields.values(),\n+        \'fields\': list(form.fields.values()),\n     }]\n \n     # Additional fieldsets (AKA z3c.form groups)\n@@ -72,7 +72,7 @@ def get_fieldsets(context, request, schema, additional_schemata=None):\n         fieldset = {\n             \'id\': group.__name__,\n             \'title\': translate(group.label, context=getRequest()),\n-            \'fields\': group.fields.values(),\n+            \'fields\': list(group.fields.values()),\n         }\n         fieldsets.append(fieldset)\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-07-16T10:43:31-03:00
Author: hvelarde (hvelarde) <hector.velarde@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/45cd2964ec2e1344ff87ab210d923547507ce9fa

Fix old-division

Files changed:
M src/plone/restapi/imaging.py

b'diff --git a/src/plone/restapi/imaging.py b/src/plone/restapi/imaging.py\nindex 5046f253..3b0220e4 100644\n--- a/src/plone/restapi/imaging.py\n+++ b/src/plone/restapi/imaging.py\n@@ -65,7 +65,7 @@ def get_actual_scale(dimensions, bbox):\n     """\n     width, height = list(map(float, dimensions))\n     max_width, max_height = list(map(float, bbox))\n-    resize_ratio = min(max_width / width, max_height / height)\n+    resize_ratio = min(max_width // width, max_height // height)\n \n     # Plone doesn\'t upscale images for the default named scales - limit\n     # to actual image dimensions\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-07-16T10:43:31-03:00
Author: hvelarde (hvelarde) <hector.velarde@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/6fc4723d722f87a4d9d76741d3ec67548e25fb3c

Fix exception-message-attribute

Files changed:
M src/plone/restapi/deserializer/controlpanels.py
M src/plone/restapi/deserializer/dxcontent.py
M src/plone/restapi/deserializer/dxfields.py
M src/plone/restapi/services/users/add.py

b"diff --git a/src/plone/restapi/deserializer/controlpanels.py b/src/plone/restapi/deserializer/controlpanels.py\nindex b70caedb..5a8692b6 100644\n--- a/src/plone/restapi/deserializer/controlpanels.py\n+++ b/src/plone/restapi/deserializer/controlpanels.py\n@@ -69,7 +69,7 @@ def __call__(self):\n                     setattr(proxy, name, value)\n                 except ValueError as e:\n                     errors.append({\n-                        'message': e.message, 'field': name, 'error': e})\n+                        'message': str(e), 'field': name, 'error': e})\n                 except ValidationError as e:\n                     errors.append({\n                         'message': e.doc(), 'field': name, 'error': e})\ndiff --git a/src/plone/restapi/deserializer/dxcontent.py b/src/plone/restapi/deserializer/dxcontent.py\nindex b2e42165..1877314b 100644\n--- a/src/plone/restapi/deserializer/dxcontent.py\n+++ b/src/plone/restapi/deserializer/dxcontent.py\n@@ -88,7 +88,7 @@ def __call__(self, validate_all=False, data=None, create=False):  # noqa: ignore\n                         value = deserializer(data[name])\n                     except ValueError as e:\n                         errors.append({\n-                            'message': e.message, 'field': name, 'error': e})\n+                            'message': str(e), 'field': name, 'error': e})\n                     except ValidationError as e:\n                         errors.append({\n                             'message': e.doc(), 'field': name, 'error': e})\ndiff --git a/src/plone/restapi/deserializer/dxfields.py b/src/plone/restapi/deserializer/dxfields.py\nindex 957cd29a..6dafa672 100644\n--- a/src/plone/restapi/deserializer/dxfields.py\n+++ b/src/plone/restapi/deserializer/dxfields.py\n@@ -192,7 +192,7 @@ def __call__(self, value):\n         try:\n             value = timedelta(seconds=value)\n         except TypeError as e:\n-            raise ValueError(e.message)\n+            raise ValueError(str(e))\n \n         self.field.validate(value)\n         return value\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex 497a53d8..b6f8505b 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -175,7 +175,7 @@ def reply(self):\n             self.request.response.setStatus(400)\n             return dict(error=dict(\n                 type='MissingParameterError',\n-                message=str(e.message)))\n+                message=str(e)))\n \n         if send_password_reset:\n             registration.registeredNotify(username)\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-07-16T10:43:31-03:00
Author: hvelarde (hvelarde) <hector.velarde@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/ebb7a15a274d6a08d765e0c3838b3001a2559fce

Refactor fix for old-division

Files changed:
M src/plone/restapi/imaging.py

b'diff --git a/src/plone/restapi/imaging.py b/src/plone/restapi/imaging.py\nindex 3b0220e4..d943f038 100644\n--- a/src/plone/restapi/imaging.py\n+++ b/src/plone/restapi/imaging.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from __future__ import division\n from Products.CMFCore.interfaces import IPropertiesTool\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n@@ -63,9 +64,9 @@ def get_actual_scale(dimensions, bbox):\n     This is supposed to emulate / predict the behavior of Plone\'s\n     ImageScaling implementations.\n     """\n-    width, height = list(map(float, dimensions))\n-    max_width, max_height = list(map(float, bbox))\n-    resize_ratio = min(max_width // width, max_height // height)\n+    width, height = dimensions\n+    max_width, max_height = bbox\n+    resize_ratio = min(max_width / width, max_height / height)\n \n     # Plone doesn\'t upscale images for the default named scales - limit\n     # to actual image dimensions\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-07-16T12:44:15-03:00
Author: hvelarde (hvelarde) <hector.velarde@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/e1b6615b092cf5b3daa31cf4d92fe2f586175ff7

Fix issues probably related with code rebase

Files changed:
M setup.py
M src/plone/restapi/services/content/add.py
M src/plone/restapi/tests/test_content_utils.py
M src/plone/restapi/tests/test_functional_auth.py
M src/plone/restapi/tests/test_tus.py

b'diff --git a/setup.py b/setup.py\nindex 24b6e75b..44f13c12 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -10,9 +10,6 @@\n     open(\'CHANGES.rst\').read() + \'\\n\'\n )\n \n-\n-HTTP_EXAMPLES_PATH = \'docs/source/_json/\'\n-\n TEST_REQUIRES = [\n     \'collective.MockMailHost\',\n     \'plone.app.contenttypes\',\n@@ -21,6 +18,7 @@\n     \'plone.api\',\n     \'requests\',\n     \'freezegun\',\n+    \'plone.tiles\',\n     \'mock\',\n ]\n \n@@ -33,26 +31,6 @@\n     TEST_REQUIRES += PY2_ONLY\n \n \n-def collect_http_examples():\n-    """Gather relative paths to every HTTP example file.\n-\n-    We need to do this dynamically because the data_files argument to\n-    setup() doesn\'t support globs (wildcards).\n-\n-    If the HTTP examples directory is ever moved, the HTTP_EXAMPLES_PATH\n-    above needs to be updated before a new release is cut.\n-\n-    The examples need to be included via data_files because they are outside\n-    a Python package. So we can\'t include them using package_data, which only\n-    works relative to Python packages. (The MANIFEST only controls what gets\n-    included in the source distribution. Listing these files in data_files\n-    ensures they actually get copied to the installed .egg).\n-    """\n-    examples_path = HTTP_EXAMPLES_PATH\n-    example_filenames = os.listdir(examples_path)\n-    return [os.path.join(examples_path, fn) for fn in example_filenames]\n-\n-\n setup(name=\'plone.restapi\',\n       version=version,\n       description="plone.restapi is a RESTful hypermedia API for Plone.",\ndiff --git a/src/plone/restapi/services/content/add.py b/src/plone/restapi/services/content/add.py\nindex 1ff9ed99..2303130e 100644\n--- a/src/plone/restapi/services/content/add.py\n+++ b/src/plone/restapi/services/content/add.py\n@@ -9,7 +9,6 @@\n from plone.restapi.services import Service\n from plone.restapi.services.content.utils import add\n from plone.restapi.services.content.utils import create\n-from plone.restapi.services.content.utils import rename\n from Products.CMFPlone.utils import safe_hasattr\n from zExceptions import BadRequest\n from zExceptions import Unauthorized\ndiff --git a/src/plone/restapi/tests/test_content_utils.py b/src/plone/restapi/tests/test_content_utils.py\nindex ff95b02f..40b67063 100644\n--- a/src/plone/restapi/tests/test_content_utils.py\n+++ b/src/plone/restapi/tests/test_content_utils.py\n@@ -5,7 +5,6 @@\n from plone.restapi import HAS_AT\n from plone.restapi.services.content.utils import add\n from plone.restapi.services.content.utils import create\n-from plone.restapi.services.content.utils import rename\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from Products.CMFPlone.interfaces import ISelectableConstrainTypes\ndiff --git a/src/plone/restapi/tests/test_functional_auth.py b/src/plone/restapi/tests/test_functional_auth.py\nindex e9e4a385..0f004607 100644\n--- a/src/plone/restapi/tests/test_functional_auth.py\n+++ b/src/plone/restapi/tests/test_functional_auth.py\n@@ -8,6 +8,7 @@\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n import requests\n+import six\n import transaction\n import unittest\n \ndiff --git a/src/plone/restapi/tests/test_tus.py b/src/plone/restapi/tests/test_tus.py\nindex 0424af1a..5b1d2883 100644\n--- a/src/plone/restapi/tests/test_tus.py\n+++ b/src/plone/restapi/tests/test_tus.py\n@@ -347,7 +347,7 @@ def test_tus_can_upload_text_file(self):\n             headers={\'Content-Type\': \'application/offset+octet-stream\',\n                      \'Upload-Offset\': \'0\',\n                      \'Tus-Resumable\': \'1.0.0\'},\n-            data=BytesIO(bUPLOAD_DATA))\n+            data=BytesIO(UPLOAD_DATA))\n         self.assertEqual(response.status_code, 204)\n \n     def test_tus_can_replace_pdf_file(self):\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-07-16T12:44:15-03:00
Author: hvelarde (hvelarde) <hector.velarde@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/fcc1d176d24c7d9c053c63fb7e2680820bd760d6

Fix code analysis

Files changed:
M src/plone/restapi/deserializer/atcontent.py
M src/plone/restapi/deserializer/atfields.py
M src/plone/restapi/serializer/atcollection.py
M src/plone/restapi/serializer/atcontent.py
M src/plone/restapi/serializer/atfields.py
M src/plone/restapi/services/content/add.py
M src/plone/restapi/services/content/tus.py
M src/plone/restapi/services/content/utils.py
M src/plone/restapi/services/types/get.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/test_atfield_deserializer.py
M src/plone/restapi/tests/test_content_delete.py
M src/plone/restapi/tests/test_copymove.py
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_serializer_converters.py
M src/plone/restapi/tests/test_workflow.py

b'diff --git a/src/plone/restapi/deserializer/atcontent.py b/src/plone/restapi/deserializer/atcontent.py\nindex ba950ecc..a3abf267 100644\n--- a/src/plone/restapi/deserializer/atcontent.py\n+++ b/src/plone/restapi/deserializer/atcontent.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.restapi import HAS_AT\n \n-if HAS_AT:\n+if HAS_AT:  # noqa: C901\n     from Products.Archetypes.event import ObjectEditedEvent\n     from Products.Archetypes.event import ObjectInitializedEvent\n     from Products.Archetypes.interfaces import IBaseObject\n@@ -20,7 +20,6 @@\n \n     from .mixins import OrderingMixin\n \n-\n     @implementer(IDeserializeFromJson)\n     @adapter(IBaseObject, Interface)\n     class DeserializeFromJson(OrderingMixin, object):\n@@ -45,8 +44,8 @@ def __call__(self, validate_all=False, data=None, create=False):\n                 name = field.getName()\n \n                 if name in data:\n-                    deserializer = queryMultiAdapter((field, obj, self.request),\n-                                                     IFieldDeserializer)\n+                    deserializer = queryMultiAdapter(\n+                        (field, obj, self.request), IFieldDeserializer)\n                     if deserializer is None:\n                         continue\n                     value, kwargs = deserializer(data[name])\n@@ -89,10 +88,10 @@ def __call__(self, validate_all=False, data=None, create=False):\n         def validate(self):\n             # Instead of calling P.Archetypes.BaseObject.validate() we have to\n             # provide a custom validation implementation here because some\n-            # validators extract the field value from the request. However a JSON\n-            # API request does not contain any form values in the request.\n-            # Thus we fake a request that extracts form values from the object on\n-            # demand.\n+            # validators extract the field value from the request. However a\n+            # JSON API request does not contain any form values in the request.\n+            # Thus we fake a request that extracts form values from the object\n+            # on demand.\n \n             obj = self.context\n             request = ValidationRequest(self.request, obj)\n@@ -125,7 +124,6 @@ def validate(self):\n \n             return errors\n \n-\n     class ValidationRequest(dict):\n         """A fake request for validation purposes.\n         """\n@@ -149,7 +147,6 @@ def get(self, key, default=None):\n             except KeyError:\n                 return default\n \n-\n     class ValidationRequestForm(dict):\n         """A request form dict that returns values from the content object.\n         """\ndiff --git a/src/plone/restapi/deserializer/atfields.py b/src/plone/restapi/deserializer/atfields.py\nindex 4d883fa6..5f907ab8 100644\n--- a/src/plone/restapi/deserializer/atfields.py\n+++ b/src/plone/restapi/deserializer/atfields.py\n@@ -14,7 +14,6 @@\n     from zope.interface import implementer\n     from zope.publisher.interfaces.browser import IBrowserRequest\n \n-\n     @implementer(IFieldDeserializer)\n     @adapter(IField, IBaseObject, IBrowserRequest)\n     class DefaultFieldDeserializer(object):\n@@ -27,7 +26,6 @@ def __init__(self, field, context, request):\n         def __call__(self, value):\n             return value, {}\n \n-\n     @implementer(IFieldDeserializer)\n     @adapter(IFileField, IBaseObject, IBrowserRequest)\n     class FileFieldDeserializer(DefaultFieldDeserializer):\n@@ -53,13 +51,11 @@ def __call__(self, value):\n \n             return value, kwargs\n \n-\n     @implementer(IFieldDeserializer)\n     @adapter(IBlobField, IBaseObject, IBrowserRequest)\n     class BlobFieldDeserializer(FileFieldDeserializer):\n         pass\n \n-\n     @implementer(IFieldDeserializer)\n     @adapter(IReferenceField, IBaseObject, IBrowserRequest)\n     class ReferenceFieldDeserializer(DefaultFieldDeserializer):\ndiff --git a/src/plone/restapi/serializer/atcollection.py b/src/plone/restapi/serializer/atcollection.py\nindex 2cba9adb..c6e03a92 100644\n--- a/src/plone/restapi/serializer/atcollection.py\n+++ b/src/plone/restapi/serializer/atcollection.py\n@@ -12,15 +12,13 @@\n     from zope.interface import implementer\n     from zope.interface import Interface\n \n-\n     @implementer(ISerializeToJson)\n     @adapter(ICollection, Interface)\n     class SerializeCollectionToJson(SerializeToJson):\n \n         def __call__(self, version=None):\n-            collection_metadata = super(SerializeCollectionToJson, self).__call__(\n-                version=version,\n-            )\n+            collection_metadata = super(\n+                SerializeCollectionToJson, self).__call__(version=version)\n             results = self.context.results(batch=False)\n             batch = HypermediaBatch(self.request, results)\n \n@@ -32,7 +30,8 @@ def __call__(self, version=None):\n                 results[\'batching\'] = batch.links\n \n             results[\'items\'] = [\n-                getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n+                getMultiAdapter(\n+                    (brain, self.request), ISerializeToJsonSummary)()\n                 for brain in batch\n             ]\n             return results\ndiff --git a/src/plone/restapi/serializer/atcontent.py b/src/plone/restapi/serializer/atcontent.py\nindex d36b6537..f669bb5b 100644\n--- a/src/plone/restapi/serializer/atcontent.py\n+++ b/src/plone/restapi/serializer/atcontent.py\n@@ -19,7 +19,6 @@\n     from zope.interface import Interface\n     from zope.interface import implementer\n \n-\n     @implementer(ISerializeToJson)\n     @adapter(IBaseObject, Interface)\n     class SerializeToJson(object):\n@@ -59,7 +58,7 @@ def __call__(self, version=None, include_items=False):\n \n             for field in obj.Schema().fields():\n \n-                if \'r\' not in field.mode or not field.checkPermission(\'r\', obj):\n+                if \'r\' not in field.mode or not field.checkPermission(\'r\', obj):  # noqa: E501\n                     continue\n \n                 name = field.getName()\n@@ -78,7 +77,6 @@ def _get_workflow_state(self, obj):\n                 ob=obj, name=\'review_state\', default=None)\n             return review_state\n \n-\n     @implementer(ISerializeToJson)\n     @adapter(IBaseFolder, Interface)\n     class SerializeFolderToJson(SerializeToJson):\n@@ -97,7 +95,8 @@ def __call__(self, version=None, include_items=True):\n             folder_metadata.update({\'is_folderish\': True})\n             result = folder_metadata\n \n-            include_items = self.request.form.get(\'include_items\', include_items)\n+            include_items = self.request.form.get(\n+                \'include_items\', include_items)\n             include_items = boolean_value(include_items)\n             if include_items:\n                 query = self._build_query()\ndiff --git a/src/plone/restapi/serializer/atfields.py b/src/plone/restapi/serializer/atfields.py\nindex 6e1a11a8..349130ed 100644\n--- a/src/plone/restapi/serializer/atfields.py\n+++ b/src/plone/restapi/serializer/atfields.py\n@@ -27,7 +27,6 @@\n     else:\n         from plone.app.collection.field import IQueryField\n \n-\n     @adapter(IField, IBaseObject, Interface)\n     @implementer(IFieldSerializer)\n     class DefaultFieldSerializer(object):\n@@ -41,7 +40,6 @@ def __call__(self):\n             accessor = self.field.getAccessor(self.context)\n             return json_compatible(accessor())\n \n-\n     @adapter(IFileField, IBaseObject, Interface)\n     @implementer(IFieldSerializer)\n     class FileFieldSerializer(DefaultFieldSerializer):\n@@ -58,13 +56,13 @@ def __call__(self):\n             }\n             return json_compatible(result)\n \n-\n     @adapter(ITextField, IBaseObject, Interface)\n     @implementer(IFieldSerializer)\n     class TextFieldSerializer(DefaultFieldSerializer):\n \n         def __call__(self):\n-            mimetypes_registry = getToolByName(self.context, \'mimetypes_registry\')\n+            mimetypes_registry = getToolByName(\n+                self.context, \'mimetypes_registry\')\n             data = super(TextFieldSerializer, self).__call__()\n             return {\n                 \'content-type\': json_compatible(\n@@ -72,7 +70,6 @@ def __call__(self):\n                 \'data\': data\n             }\n \n-\n     @adapter(IImageField, IBaseObject, Interface)\n     @implementer(IFieldSerializer)\n     class ImageFieldSerializer(DefaultFieldSerializer):\n@@ -98,19 +95,16 @@ def __call__(self):\n             }\n             return json_compatible(result)\n \n-\n     @adapter(IBlobField, IBaseObject, Interface)\n     @implementer(IFieldSerializer)\n     class BlobFieldSerializer(FileFieldSerializer):\n         pass\n \n-\n     @adapter(IBlobImageField, IBaseObject, Interface)\n     @implementer(IFieldSerializer)\n     class BlobImageFieldSerializer(ImageFieldSerializer):\n         pass\n \n-\n     @adapter(IReferenceField, IBaseObject, Interface)\n     @implementer(IFieldSerializer)\n     class ReferenceFieldSerializer(DefaultFieldSerializer):\n@@ -125,7 +119,6 @@ def __call__(self):\n                     return None\n                 return json_compatible(refs.absolute_url())\n \n-\n     @adapter(IQueryField, IBaseObject, Interface)\n     @implementer(IFieldSerializer)\n     class QueryFieldSerializer(DefaultFieldSerializer):\ndiff --git a/src/plone/restapi/services/content/add.py b/src/plone/restapi/services/content/add.py\nindex 2303130e..9e3ac5c3 100644\n--- a/src/plone/restapi/services/content/add.py\n+++ b/src/plone/restapi/services/content/add.py\n@@ -23,6 +23,7 @@\n     from Products.Archetypes.interfaces import IBaseObject\n else:\n     from zope.interface import Interface\n+\n     class IBaseObject(Interface):\n         pass\n \ndiff --git a/src/plone/restapi/services/content/tus.py b/src/plone/restapi/services/content/tus.py\nindex 3f248963..2596df99 100644\n--- a/src/plone/restapi/services/content/tus.py\n+++ b/src/plone/restapi/services/content/tus.py\n@@ -23,7 +23,6 @@\n \n import json\n import os\n-import six\n import time\n \n TUS_OPTIONS_RESPONSE_HEADERS = {\ndiff --git a/src/plone/restapi/services/content/utils.py b/src/plone/restapi/services/content/utils.py\nindex 482f2b24..d4111d65 100644\n--- a/src/plone/restapi/services/content/utils.py\n+++ b/src/plone/restapi/services/content/utils.py\n@@ -15,7 +15,6 @@\n from zope.container.interfaces import INameChooser\n from zope.event import notify\n \n-import transaction\n import six\n \n \ndiff --git a/src/plone/restapi/services/types/get.py b/src/plone/restapi/services/types/get.py\nindex 179b42a7..64da46ab 100644\n--- a/src/plone/restapi/services/types/get.py\n+++ b/src/plone/restapi/services/types/get.py\n@@ -15,7 +15,6 @@\n @implementer(IPublishTraverse)\n class TypesGet(Service):\n \n-\n     def __init__(self, context, request):\n         super(TypesGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex c729ed3c..3d521606 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -298,10 +298,9 @@ def setUpPloneSite(self, portal):\n             applyProfile(portal, \'plone.restapi:testing\')\n             set_available_languages()\n             enable_request_language_negotiation(portal)\n-            portal.portal_workflow.setDefaultChain("simple_publication_workflow")\n-            states = portal.portal_workflow[\'simple_publication_workflow\'].states\n-            states[\'published\'].title = u\'Published with accent \xc3\xa9\'.encode(\'utf8\')\n-\n+            portal.portal_workflow.setDefaultChain(\'simple_publication_workflow\')  # noqa: E501\n+            states = portal.portal_workflow[\'simple_publication_workflow\'].states  # noqa: E501\n+            states[\'published\'].title = u\'Published with accent \xc3\xa9\'.encode(\'utf8\')  # noqa: E501\n \n     PLONE_RESTAPI_AT_FIXTURE = PloneRestApiATLayer()\n     PLONE_RESTAPI_AT_INTEGRATION_TESTING = IntegrationTesting(\ndiff --git a/src/plone/restapi/tests/test_atfield_deserializer.py b/src/plone/restapi/tests/test_atfield_deserializer.py\nindex 0574d274..44224ad5 100644\n--- a/src/plone/restapi/tests/test_atfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_atfield_deserializer.py\n@@ -32,7 +32,8 @@ def deserialize(self, fieldname, value):\n \n     def test_string_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testStringField\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertEquals(u\'K\xc3\xa4fer\', value)\n \n     def test_boolean_field_deserialization_returns_true(self):\n@@ -57,18 +58,21 @@ def test_float_field_deserialization_returns_float_value(self):\n \n     def test_fixedpoint_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testFixedPointField\', u\'1.1\')\n-        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertEquals(u\'1.1\', value)\n \n     def test_datetime_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testDateTimeField\',\n                                          u\'2015-12-20T19:51:06.375Z\')\n-        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertEquals(u\'2015-12-20T19:51:06.375Z\', value)\n \n     def test_lines_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testLinesField\', u\'line1\\nline2\')\n-        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertEquals(\'line1\\nline2\', value)\n \n     def test_lines_field_deserialization_returns_list(self):\n@@ -79,7 +83,8 @@ def test_lines_field_deserialization_returns_list(self):\n \n     def test_file_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testFileField\', u\'Spam and eggs!\')\n-        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertEquals(u\'Spam and eggs!\', value)\n \n     def test_file_field_deserialization_returns_decoded_value(self):\n@@ -96,14 +101,16 @@ def test_file_field_deserialization_returns_mimetype_and_filename(self):\n             u\'filename\': \'doc.txt\',\n             u\'content-type\': \'text/plain\',\n         })\n-        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertEquals(u\'Spam and eggs!\', value)\n         self.assertEquals(\'text/plain\', kwargs[u\'mimetype\'])\n         self.assertEquals(\'doc.txt\', kwargs[u\'filename\'])\n \n     def test_text_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testTextField\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertEquals(u\'K\xc3\xa4fer\', value)\n \n     def test_text_field_deserialization_returns_mimetype(self):\n@@ -111,7 +118,8 @@ def test_text_field_deserialization_returns_mimetype(self):\n             u\'data\': u\'K\xc3\xa4fer\',\n             u\'content-type\': \'text/html\',\n         })\n-        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertEquals(u\'K\xc3\xa4fer\', value)\n         self.assertEquals(\'text/html\', kwargs[u\'mimetype\'])\n \n@@ -122,14 +130,16 @@ def test_image_field_deserialization_returns_mimetype_and_filename(self):\n             u\'filename\': \'image.gif\',\n             u\'content-type\': \'image/gif\',\n         })\n-        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertTrue(value.startswith(\'GIF89a\'))\n         self.assertEquals(\'image/gif\', kwargs[u\'mimetype\'])\n         self.assertEquals(\'image.gif\', kwargs[u\'filename\'])\n \n     def test_blob_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testBlobField\', u\'Spam and eggs!\')\n-        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertEquals(u\'Spam and eggs!\', value)\n \n     def test_blob_field_deserialization_returns_mimetype_and_filename(self):\n@@ -138,7 +148,8 @@ def test_blob_field_deserialization_returns_mimetype_and_filename(self):\n             u\'filename\': \'doc.txt\',\n             u\'content-type\': \'text/plain\',\n         })\n-        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertEquals(u\'Spam and eggs!\', value)\n         self.assertEquals(\'text/plain\', kwargs[u\'mimetype\'])\n         self.assertEquals(\'doc.txt\', kwargs[u\'filename\'])\n@@ -150,7 +161,8 @@ def test_blobfile_field_deserialization_returns_mimetype_and_filename(\n             u\'filename\': \'doc.txt\',\n             u\'content-type\': \'text/plain\',\n         })\n-        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertEquals(u\'Spam and eggs!\', value)\n         self.assertEquals(\'text/plain\', kwargs[u\'mimetype\'])\n         self.assertEquals(\'doc.txt\', kwargs[u\'filename\'])\n@@ -163,7 +175,8 @@ def test_blobimage_field_deserialization_returns_mimetype_and_filename(\n             u\'filename\': \'image.gif\',\n             u\'content-type\': \'image/gif\',\n         })\n-        self.assertTrue(isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertTrue(value.startswith(\'GIF89a\'))\n         self.assertEquals(\'image/gif\', kwargs[u\'mimetype\'])\n         self.assertEquals(\'image.gif\', kwargs[u\'filename\'])\n@@ -214,6 +227,7 @@ def test_reference_field_deserialization_returns_objects(self):\n             \'ATTestDocument\', id=\'doc3\', title=\'Referenced Document\')]\n         value, kwargs = self.deserialize(\n             \'testReferenceField\',\n-            [six.text_type(doc2.absolute_url()), six.text_type(doc3.absolute_url())])\n+            [six.text_type(\n+                doc2.absolute_url()), six.text_type(doc3.absolute_url())])\n         self.assertEquals(doc2, value[0])\n         self.assertEquals(doc3, value[1])\ndiff --git a/src/plone/restapi/tests/test_content_delete.py b/src/plone/restapi/tests/test_content_delete.py\nindex b0159ce2..c8555767 100644\n--- a/src/plone/restapi/tests/test_content_delete.py\n+++ b/src/plone/restapi/tests/test_content_delete.py\n@@ -80,7 +80,8 @@ def traverse(self, path=\'/plone\', accept=\'application/json\', method=\'GET\'):\n         request.environ[\'HTTP_ACCEPT\'] = accept\n         request.environ[\'REQUEST_METHOD\'] = method\n         auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-        request._auth = \'Basic %s\' % b64encode(auth.encode(\'utf8\')).decode(\'utf8\')\n+        request._auth = \'Basic %s\' % b64encode(\n+            auth.encode(\'utf8\')).decode(\'utf8\')\n         notify(PubStart(request))\n         return request.traverse(path)\n \ndiff --git a/src/plone/restapi/tests/test_copymove.py b/src/plone/restapi/tests/test_copymove.py\nindex 24a99aad..37c34dfb 100644\n--- a/src/plone/restapi/tests/test_copymove.py\n+++ b/src/plone/restapi/tests/test_copymove.py\n@@ -35,7 +35,8 @@ def traverse(self, path=\'/plone\', accept=\'application/json\', method=\'GET\'):\n         request.environ[\'HTTP_ACCEPT\'] = accept\n         request.environ[\'REQUEST_METHOD\'] = method\n         auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-        request._auth = \'Basic %s\' % b64encode(auth.encode(\'utf8\')).decode(\'utf8\')\n+        request._auth = \'Basic %s\' % b64encode(\n+            auth.encode(\'utf8\')).decode(\'utf8\')\n         notify(PubStart(request))\n         return request.traverse(path)\n \ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex 4c26b8b2..18544bfe 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -354,8 +354,9 @@ def test_relationlist_deserialization_returns_list_of_documents(self):\n             \'DXTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n         doc3 = self.portal[self.portal.invokeFactory(\n             \'DXTestDocument\', id=\'doc3\', title=\'Referenceable Document\')]\n-        value = self.deserialize(\'test_relationlist_field\',\n-                                 [six.text_type(doc2.UID()), six.text_type(doc3.UID())])\n+        value = self.deserialize(\n+            \'test_relationlist_field\',\n+            [six.text_type(doc2.UID()), six.text_type(doc3.UID())])\n         self.assertTrue(isinstance(value, list), \'Not a <list>\')\n         self.assertEqual(doc2, value[0])\n         self.assertEqual(doc3, value[1])\ndiff --git a/src/plone/restapi/tests/test_serializer_converters.py b/src/plone/restapi/tests/test_serializer_converters.py\nindex 31f60d3e..d42c3214 100644\n--- a/src/plone/restapi/tests/test_serializer_converters.py\n+++ b/src/plone/restapi/tests/test_serializer_converters.py\n@@ -130,9 +130,10 @@ def test_dict(self):\n         self.assertIsInstance(json_compatible(list({\'foo\': \'bar\'}.keys())[0]),\n                               six.text_type,\n                               \'Dict keys should be converted recursively.\')\n-        self.assertIsInstance(json_compatible(list({\'foo\': \'bar\'}.values())[0]),\n-                              six.text_type,\n-                              \'Dict values should be converted recursively.\')\n+        self.assertIsInstance(\n+            json_compatible(list({\'foo\': \'bar\'}.values())[0]),\n+            six.text_type,\n+            \'Dict values should be converted recursively.\')\n \n     def test_dict_empty(self):\n         self.assertEquals({}, json_compatible({}))\ndiff --git a/src/plone/restapi/tests/test_workflow.py b/src/plone/restapi/tests/test_workflow.py\nindex 03bb783f..ba957e24 100644\n--- a/src/plone/restapi/tests/test_workflow.py\n+++ b/src/plone/restapi/tests/test_workflow.py\n@@ -99,7 +99,8 @@ def traverse(self, path=\'/plone\', accept=\'application/json\',\n         request.environ[\'HTTP_ACCEPT\'] = accept\n         request.environ[\'REQUEST_METHOD\'] = method\n         auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-        request._auth = \'Basic %s\' % b64encode(auth.encode(\'utf8\')).decode(\'utf8\')\n+        request._auth = \'Basic %s\' % b64encode(\n+            auth.encode(\'utf8\')).decode(\'utf8\')\n         notify(PubStart(request))\n         return request.traverse(path)\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-07-16T12:44:15-03:00
Author: hvelarde (hvelarde) <hector.velarde@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/5bfc404bd21eb209dfe811a039a90bbb30aeb76d

Code clean up

Converting a dictionary to a list always return a list of keys, calling .keys() is unnecessary.

Files changed:
M src/plone/restapi/batching.py
M src/plone/restapi/serializer/dxcontent.py
M src/plone/restapi/serializer/registry.py
M src/plone/restapi/services/discussion/conversation.py
M src/plone/restapi/services/multilingual/pam.py
M src/plone/restapi/services/users/add.py
M src/plone/restapi/tests/test_batching.py
M src/plone/restapi/tests/test_comments.py
M src/plone/restapi/tests/test_content_get.py
M src/plone/restapi/tests/test_expansion.py
M src/plone/restapi/tests/test_registry_serializer.py
M src/plone/restapi/tests/test_serializer_converters.py
M src/plone/restapi/tests/test_serializer_group.py
M src/plone/restapi/tests/test_services_actions.py
M src/plone/restapi/tests/test_services_comments.py
M src/plone/restapi/tests/test_services_history.py
M src/plone/restapi/tests/test_services_types.py
M src/plone/restapi/tests/test_services_vocabularies.py
M src/plone/restapi/tests/test_translations.py
M src/plone/restapi/tests/test_types.py

b'diff --git a/src/plone/restapi/batching.py b/src/plone/restapi/batching.py\nindex 0fcc94db..c0126c77 100644\n--- a/src/plone/restapi/batching.py\n+++ b/src/plone/restapi/batching.py\n@@ -116,7 +116,7 @@ def _url_with_params(self, params):\n         # result of parse_qsl into a dict!\n \n         # Drop params to be updated, then prepend new params in order\n-        qs_params = [x for x in qs_params if x[0] not in list(params.keys())]\n+        qs_params = [x for x in qs_params if x[0] not in list(params)]\n         qs_params = sorted(params.items()) + qs_params\n \n         qs = urlencode(qs_params)\ndiff --git a/src/plone/restapi/serializer/dxcontent.py b/src/plone/restapi/serializer/dxcontent.py\nindex 1ac3c422..ad8eae75 100644\n--- a/src/plone/restapi/serializer/dxcontent.py\n+++ b/src/plone/restapi/serializer/dxcontent.py\n@@ -145,7 +145,7 @@ def __call__(self, version=None, include_items=True):\n             if batch.links:\n                 result[\'batching\'] = batch.links\n \n-            if \'fullobjects\' in list(self.request.form.keys()):\n+            if \'fullobjects\' in list(self.request.form):\n                 result[\'items\'] = getMultiAdapter(\n                     (brains, self.request),\n                     ISerializeToJson\ndiff --git a/src/plone/restapi/serializer/registry.py b/src/plone/restapi/serializer/registry.py\nindex 7ee278ce..247ba2d3 100644\n--- a/src/plone/restapi/serializer/registry.py\n+++ b/src/plone/restapi/serializer/registry.py\n@@ -19,7 +19,7 @@ def __init__(self, registry, request):\n     def __call__(self):\n         records = self.registry.records\n         # Batch keys, because that is a simple BTree\n-        batch = HypermediaBatch(self.request, list(records.keys()))\n+        batch = HypermediaBatch(self.request, list(records))\n \n         results = {}\n         results[\'@id\'] = batch.canonical_url\ndiff --git a/src/plone/restapi/services/discussion/conversation.py b/src/plone/restapi/services/discussion/conversation.py\nindex 16b11efb..1857f226 100644\n--- a/src/plone/restapi/services/discussion/conversation.py\n+++ b/src/plone/restapi/services/discussion/conversation.py\n@@ -75,7 +75,7 @@ def reply(self):\n                          plone.protect.interfaces.IDisableCSRFProtection)\n \n         conversation = IConversation(self.context)\n-        if self.comment_id and self.comment_id not in list(conversation.keys()):\n+        if self.comment_id and self.comment_id not in list(conversation):\n             self.request.response.setStatus(404)\n             return\n \n@@ -113,7 +113,7 @@ def reply(self):\n             raise BadRequest("Comment id is a required part of the url")\n \n         conversation = IConversation(self.context)\n-        if self.comment_id not in list(conversation.keys()):\n+        if self.comment_id not in list(conversation):\n             self.request.response.setStatus(404)\n             return\n         comment = conversation[self.comment_id]\ndiff --git a/src/plone/restapi/services/multilingual/pam.py b/src/plone/restapi/services/multilingual/pam.py\nindex 4372630e..bd2ec0e8 100644\n--- a/src/plone/restapi/services/multilingual/pam.py\n+++ b/src/plone/restapi/services/multilingual/pam.py\n@@ -125,7 +125,7 @@ def reply(self):\n                 type=\'BadRequest\',\n                 message=\'You need to provide the language to unlink\'))\n \n-        if language not in list(manager.get_translations().keys()):\n+        if language not in list(manager.get_translations()):\n             self.request.response.setStatus(400)\n             return dict(error=dict(\n                 type=\'BadRequest\',\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex b6f8505b..173a4f51 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -231,7 +231,7 @@ def update_password(self, data):\n             return\n \n         # Send password reset mail\n-        if list(data.keys()) == []:\n+        if list(data) == []:\n             registration_tool = getToolByName(self.context,\n                                               \'portal_registration\')\n             registration_tool.mailPassword(username, self.request)\ndiff --git a/src/plone/restapi/tests/test_batching.py b/src/plone/restapi/tests/test_batching.py\nindex 016a6353..d11e2ff5 100644\n--- a/src/plone/restapi/tests/test_batching.py\n+++ b/src/plone/restapi/tests/test_batching.py\n@@ -187,7 +187,7 @@ def test_total_item_count_is_correct(self):\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n         response = self.api_session.get(\'/collection?b_size=100\')\n-        self.assertNotIn(\'batching\', list(response.json().keys()))\n+        self.assertNotIn(\'batching\', list(response.json()))\n \n \n class TestBatchingDXFolders(TestBatchingDXBase):\n@@ -249,7 +249,7 @@ def test_total_item_count_is_correct(self):\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n         response = self.api_session.get(\'/folder?b_size=100\')\n-        self.assertNotIn(\'batching\', list(response.json().keys()))\n+        self.assertNotIn(\'batching\', list(response.json()))\n \n \n class TestBatchingSiteRoot(TestBatchingDXBase):\n@@ -307,7 +307,7 @@ def test_total_item_count_is_correct(self):\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n         response = self.api_session.get(\'/folder?b_size=100\')\n-        self.assertNotIn(\'batching\', list(response.json().keys()))\n+        self.assertNotIn(\'batching\', list(response.json()))\n \n \n class TestBatchingArchetypes(unittest.TestCase):\n@@ -389,7 +389,7 @@ def test_total_item_count_is_correct(self):\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n         response = self.api_session.get(\'/folder?b_size=100\')\n-        self.assertNotIn(\'batching\', list(response.json().keys()))\n+        self.assertNotIn(\'batching\', list(response.json()))\n \n \n class TestHypermediaBatch(unittest.TestCase):\n@@ -575,7 +575,7 @@ def test_next_link_omitted_on_last_page(self):\n         batch = HypermediaBatch(self.request, items)\n         self.assertSetEqual(\n             set([\'@id\', \'first\', \'prev\', \'last\']),\n-            set(batch.links.keys()))\n+            set(batch.links))\n \n     def test_prev_link_contained_if_necessary(self):\n         items = list(range(1, 26))\n@@ -594,7 +594,7 @@ def test_prev_link_omitted_on_first_page(self):\n         batch = HypermediaBatch(self.request, items)\n         self.assertSetEqual(\n             set([\'@id\', \'first\', \'next\', \'last\']),\n-            set(batch.links.keys()))\n+            set(batch.links))\n \n     def test_no_gaps_or_duplicates_between_pages(self):\n         items = list(range(1, 26))\ndiff --git a/src/plone/restapi/tests/test_comments.py b/src/plone/restapi/tests/test_comments.py\nindex 44b12633..69e7e44c 100644\n--- a/src/plone/restapi/tests/test_comments.py\n+++ b/src/plone/restapi/tests/test_comments.py\n@@ -57,7 +57,7 @@ def test_conversation(self):\n \n         output = serializer()\n         self.assertEqual(\n-            set(output.keys()),\n+            set(output),\n             set([\'@id\', \'items_total\', \'items\'])\n         )\n \n@@ -95,11 +95,11 @@ def test_comment(self):\n             \'is_deletable\'\n         ]\n         self.assertEqual(\n-            set(output.keys()),\n+            set(output),\n             set(expected)\n         )\n \n         self.assertEqual(\n-            set(output[\'text\'].keys()),\n+            set(output[\'text\']),\n             set([\'data\', \'mime-type\'])\n         )\ndiff --git a/src/plone/restapi/tests/test_content_get.py b/src/plone/restapi/tests/test_content_get.py\nindex 1c600042..0a21824e 100644\n--- a/src/plone/restapi/tests/test_content_get.py\n+++ b/src/plone/restapi/tests/test_content_get.py\n@@ -73,13 +73,13 @@ def test_get_content_returns_fullobjects(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(3, len(response.json()[\'items\']))\n         self.assertTrue(\n-            \'title\' in list(response.json()[\'items\'][0].keys())\n+            \'title\' in list(response.json()[\'items\'][0])\n         )\n         self.assertTrue(\n-            \'description\' in list(response.json()[\'items\'][0].keys())\n+            \'description\' in list(response.json()[\'items\'][0])\n         )\n         self.assertTrue(\n-            \'text\' in list(response.json()[\'items\'][0].keys())\n+            \'text\' in list(response.json()[\'items\'][0])\n         )\n         self.assertEqual(\n             {\ndiff --git a/src/plone/restapi/tests/test_expansion.py b/src/plone/restapi/tests/test_expansion.py\nindex 3dad6d89..43833ae9 100644\n--- a/src/plone/restapi/tests/test_expansion.py\n+++ b/src/plone/restapi/tests/test_expansion.py\n@@ -126,7 +126,7 @@ def test_actions_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'actions\',\n-            list(response.json().get(\'@components\').keys())\n+            list(response.json().get(\'@components\'))\n         )\n \n     def test_actions_expanded(self):\n@@ -160,7 +160,7 @@ def test_navigation_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'navigation\',\n-            list(response.json().get(\'@components\').keys())\n+            list(response.json().get(\'@components\'))\n         )\n \n     def test_navigation_expanded(self):\n@@ -239,7 +239,7 @@ def test_breadcrumbs_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'breadcrumbs\',\n-            list(response.json().get(\'@components\').keys())\n+            list(response.json().get(\'@components\'))\n         )\n \n     def test_breadcrumbs_expanded(self):\n@@ -266,7 +266,7 @@ def test_workflow_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'workflow\',\n-            list(response.json().get(\'@components\').keys())\n+            list(response.json().get(\'@components\'))\n         )\n \n     def test_workflow_expanded(self):\n@@ -337,7 +337,7 @@ def test_translations_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'translations\',\n-            list(response.json().get(\'@components\').keys())\n+            list(response.json().get(\'@components\'))\n         )\n \n     def test_translations_expanded(self):\ndiff --git a/src/plone/restapi/tests/test_registry_serializer.py b/src/plone/restapi/tests/test_registry_serializer.py\nindex 74a435b6..b5817a20 100644\n--- a/src/plone/restapi/tests/test_registry_serializer.py\n+++ b/src/plone/restapi/tests/test_registry_serializer.py\n@@ -30,8 +30,8 @@ def test_empty(self):\n         registry = Registry()\n         obj = self.serialize(registry)\n         expected = [\'@id\', \'items_total\', \'items\']\n-        self.assertEqual(set(obj.keys()), set(expected))\n-        self.assertNotIn(\'batching\', list(obj.keys()))\n+        self.assertEqual(set(obj), set(expected))\n+        self.assertNotIn(\'batching\', list(obj))\n \n     def test_batched(self):\n         registry = Registry()\n@@ -42,7 +42,7 @@ def test_batched(self):\n \n         obj = self.serialize(registry)\n         expected = [\'@id\', \'items_total\', \'items\', \'batching\']\n-        self.assertEqual(set(expected), set(obj.keys()))\n+        self.assertEqual(set(expected), set(obj))\n         self.assertEqual(obj[\'items_total\'], len(list(range(1, 100))))\n \n     def test_structure(self):\n@@ -53,7 +53,7 @@ def test_structure(self):\n \n         obj = self.serialize(registry)\n         item = obj[\'items\'][0]\n-        self.assertEqual(set(item.keys()), set([\'name\', \'value\', \'schema\']))\n-        self.assertEqual(set(item[\'schema\'].keys()), set([\'properties\']))\n+        self.assertEqual(set(item), set([\'name\', \'value\', \'schema\']))\n+        self.assertEqual(set(item[\'schema\']), set([\'properties\']))\n         self.assertEqual(item[\'name\'], \'foo.bar\')\n         self.assertEqual(item[\'value\'], u"Lorem Ipsum")\ndiff --git a/src/plone/restapi/tests/test_serializer_converters.py b/src/plone/restapi/tests/test_serializer_converters.py\nindex d42c3214..da9de8fb 100644\n--- a/src/plone/restapi/tests/test_serializer_converters.py\n+++ b/src/plone/restapi/tests/test_serializer_converters.py\n@@ -127,7 +127,7 @@ def test_dict(self):\n                                            \'baz\': 3}))\n         self.assertEquals(\'{"foo": "bar"}\',\n                           json.dumps(json_compatible({\'foo\': \'bar\'})))\n-        self.assertIsInstance(json_compatible(list({\'foo\': \'bar\'}.keys())[0]),\n+        self.assertIsInstance(json_compatible(list({\'foo\': \'bar\'})[0]),\n                               six.text_type,\n                               \'Dict keys should be converted recursively.\')\n         self.assertIsInstance(\n@@ -143,7 +143,7 @@ def test_persistent_mapping(self):\n         value = PersistentMapping({\'foo\': \'bar\'})\n         self.assertEquals({u\'foo\': u\'bar\'}, json_compatible(value))\n         self.assertEquals(\'{"foo": "bar"}\', json.dumps(json_compatible(value)))\n-        self.assertIsInstance(json_compatible(list(value.keys())[0]),\n+        self.assertIsInstance(json_compatible(list(value)[0]),\n                               six.text_type,\n                               \'Dict keys should be converted recursively.\')\n         self.assertIsInstance(json_compatible(list(value.values())[0]),\ndiff --git a/src/plone/restapi/tests/test_serializer_group.py b/src/plone/restapi/tests/test_serializer_group.py\nindex 29361d68..977fb7ca 100644\n--- a/src/plone/restapi/tests/test_serializer_group.py\n+++ b/src/plone/restapi/tests/test_serializer_group.py\n@@ -49,7 +49,7 @@ def test_serialize_returns_id(self):\n         self.assertEqual(\'Plone Team\', group.get(\'title\'))\n         self.assertEqual(\'We are Plone\', group.get(\'description\'))\n         self.assertEqual(\n-            set(group[\'users\'].keys()),\n+            set(group[\'users\']),\n             set([\'@id\', \'items_total\', \'items\'])\n         )\n \ndiff --git a/src/plone/restapi/tests/test_services_actions.py b/src/plone/restapi/tests/test_services_actions.py\nindex da2b8b26..9c3332d5 100644\n--- a/src/plone/restapi/tests/test_services_actions.py\n+++ b/src/plone/restapi/tests/test_services_actions.py\n@@ -72,7 +72,7 @@ def test_actions_all_categories(self):\n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n         self.assertEqual([\'category1\', \'category2\', \'category3\'],\n-                         sorted(response.keys()))\n+                         sorted(response))\n \n     def test_actions_selected_categories(self):\n         response = self.api_session.get(\n@@ -81,7 +81,7 @@ def test_actions_selected_categories(self):\n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n         self.assertEqual([\'category1\', \'category2\'],\n-                         sorted(response.keys()))\n+                         sorted(response))\n \n     def test_actions_siteroot(self):\n         response = self.api_session.get(\'/@actions\')\ndiff --git a/src/plone/restapi/tests/test_services_comments.py b/src/plone/restapi/tests/test_services_comments.py\nindex 06b8d13d..67cc15a0 100644\n--- a/src/plone/restapi/tests/test_services_comments.py\n+++ b/src/plone/restapi/tests/test_services_comments.py\n@@ -63,7 +63,7 @@ def test_list_datastructure(self):\n         data = response.json()\n         self.assertEqual(\n             set([\'items_total\', \'items\', \'@id\']),\n-            set(data.keys())\n+            set(data)\n         )\n \n     def test_list_batching(self):\ndiff --git a/src/plone/restapi/tests/test_services_history.py b/src/plone/restapi/tests/test_services_history.py\nindex ccac6649..7dbbd54e 100644\n--- a/src/plone/restapi/tests/test_services_history.py\n+++ b/src/plone/restapi/tests/test_services_history.py\n@@ -80,11 +80,11 @@ def test_get_datastructure(self):\n             self.assertIn(item[\'type\'], [\'versioning\', \'workflow\'])\n \n             if item[\'type\'] == \'versioning\':\n-                self.assertEqual(set(item.keys()), set(history_keys))\n+                self.assertEqual(set(item), set(history_keys))\n             else:\n-                self.assertEqual(set(item.keys()), set(workflow_keys))\n+                self.assertEqual(set(item), set(workflow_keys))\n \n-            self.assertEqual(set(item[\'actor\'].keys()), set(actor_keys))\n+            self.assertEqual(set(item[\'actor\']), set(actor_keys))\n \n             self.assertIsNotNone(item[\'action\'])\n \n@@ -117,7 +117,7 @@ def test_get_historical_link(self):\n                     item[\'@id\'].endswith(\'@history/\' + str(item[\'version\']))\n                 )\n             else:\n-                self.assertNotIn(\'@id\', list(item.keys()))\n+                self.assertNotIn(\'@id\', list(item))\n \n     def test_explicit_current(self):\n         # Does version=current get the current version\ndiff --git a/src/plone/restapi/tests/test_services_types.py b/src/plone/restapi/tests/test_services_types.py\nindex ec7c37cd..9a871e44 100644\n--- a/src/plone/restapi/tests/test_services_types.py\n+++ b/src/plone/restapi/tests/test_services_types.py\n@@ -41,7 +41,7 @@ def test_get_types(self):\n         )\n         for item in response.json():\n             self.assertEqual(\n-                sorted(item.keys()),\n+                sorted(item),\n                 sorted([\'@id\', \'title\', \'addable\'])\n             )\n \ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex d981e2fb..f7c57563 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -86,10 +86,10 @@ def test_get_all_vocabularies(self):\n         response = response.json()\n         self.assertTrue(len(response) > 0)\n         self.assertTrue(\n-            \'@id\' in list(response[0].keys())\n+            \'@id\' in list(response[0])\n         )\n         self.assertTrue(\n-            \'title\' in list(response[0].keys())\n+            \'title\' in list(response[0])\n         )\n         self.assertEqual(\n             [\ndiff --git a/src/plone/restapi/tests/test_translations.py b/src/plone/restapi/tests/test_translations.py\nindex af89c5bc..21fc1c93 100644\n--- a/src/plone/restapi/tests/test_translations.py\n+++ b/src/plone/restapi/tests/test_translations.py\n@@ -159,7 +159,7 @@ def test_translation_unlinking_succeeds(self):\n         manager = ITranslationManager(self.en_content)\n         self.assertNotIn(\n             ILanguage(self.es_content).get_language(),\n-            list(manager.get_translations().keys()))\n+            list(manager.get_translations()))\n \n     def test_calling_endpoint_without_language_gives_400(self):\n         response = requests.delete(\ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex a050533c..be598b6a 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -97,7 +97,7 @@ def test_get_jsonschema_for_fti(self):\n         )\n         self.assertEqual(jsonschema[\'title\'], \'Page\')\n         self.assertEqual(jsonschema[\'type\'], \'object\')\n-        self.assertIn(\'title\', list(jsonschema[\'properties\'].keys()))\n+        self.assertIn(\'title\', list(jsonschema[\'properties\']))\n         self.assertIn(\'title\', jsonschema[\'required\'])\n         self.assertEquals(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n         self.assertIn(\'title\', jsonschema[\'fieldsets\'][0][\'fields\'])\n@@ -109,7 +109,7 @@ def test_get_jsonschema_for_fti(self):\n             request,\n             excluded_fields=[\'title\']\n         )\n-        self.assertNotIn(\'title\', list(jsonschema[\'properties\'].keys()))\n+        self.assertNotIn(\'title\', list(jsonschema[\'properties\']))\n \n     def test_get_jsonschema_for_fti_non_dx(self):\n         """Make sure FTIs without lookupSchema are supported.\n@@ -130,14 +130,14 @@ def test_get_jsonschema_for_portal_type(self):\n         )\n         self.assertEqual(jsonschema[\'title\'], \'Page\')\n         self.assertEqual(jsonschema[\'type\'], \'object\')\n-        self.assertIn(\'title\', list(jsonschema[\'properties\'].keys()))\n+        self.assertIn(\'title\', list(jsonschema[\'properties\']))\n         self.assertIn(\'title\', jsonschema[\'required\'])\n         self.assertEquals(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n         self.assertIn(\'title\', jsonschema[\'fieldsets\'][0][\'fields\'])\n \n         jsonschema = get_jsonschema_for_portal_type(\n             \'Document\', portal, request, excluded_fields=[\'title\'])\n-        self.assertNotIn(\'title\', list(jsonschema[\'properties\'].keys()))\n+        self.assertNotIn(\'title\', list(jsonschema[\'properties\']))\n \n \n class TestTaggedValuesJsonSchemaUtils(TestCase):\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-07-18T10:12:24+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.restapi/commit/d3593ee57fb954008c3773c743bf4a8ffb869eae

remove Class advice

Files changed:
M src/plone/restapi/services/tiles/get.py

b'diff --git a/src/plone/restapi/services/tiles/get.py b/src/plone/restapi/services/tiles/get.py\nindex 2cdf443e..0da486c7 100644\n--- a/src/plone/restapi/services/tiles/get.py\n+++ b/src/plone/restapi/services/tiles/get.py\n@@ -6,15 +6,14 @@\n from plone.tiles.interfaces import ITileType\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.restapi.interfaces import ISerializeToJson\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.component import getUtility\n \n \n+@implementer(IPublishTraverse)\n class TilesGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(TilesGet, self).__init__(context, request)\n         self.params = []\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-09-16T20:44:46-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/18031f1f35cd183edb2fd91a02a2b5880a3a4c18

Python 3 fixes

Files changed:
M src/plone/restapi/deserializer/controlpanels.py
M src/plone/restapi/deserializer/dxcontent.py
M src/plone/restapi/pas/plugin.py
M src/plone/restapi/serializer/catalog.py
M src/plone/restapi/services/auth/login.py
M src/plone/restapi/services/content/add.py
M src/plone/restapi/services/workflow/transition.py
M src/plone/restapi/tests/http-examples/404_not_found.resp
M src/plone/restapi/tests/http-examples/batching.resp
M src/plone/restapi/tests/http-examples/breadcrumbs.resp
M src/plone/restapi/tests/http-examples/collection.resp
M src/plone/restapi/tests/http-examples/comments_delete.resp
M src/plone/restapi/tests/http-examples/comments_get.resp
M src/plone/restapi/tests/http-examples/content_delete.resp
M src/plone/restapi/tests/http-examples/content_get.resp
M src/plone/restapi/tests/http-examples/content_patch.resp
M src/plone/restapi/tests/http-examples/content_patch_representation.resp
M src/plone/restapi/tests/http-examples/content_post.resp
M src/plone/restapi/tests/http-examples/controlpanels_get.resp
M src/plone/restapi/tests/http-examples/controlpanels_get_item.resp
M src/plone/restapi/tests/http-examples/copy.resp
M src/plone/restapi/tests/http-examples/copy_multiple.resp
M src/plone/restapi/tests/http-examples/document.resp
M src/plone/restapi/tests/http-examples/event.resp
M src/plone/restapi/tests/http-examples/expansion.resp
M src/plone/restapi/tests/http-examples/expansion_expanded.resp
M src/plone/restapi/tests/http-examples/file.resp
M src/plone/restapi/tests/http-examples/folder.resp
M src/plone/restapi/tests/http-examples/groups.resp
M src/plone/restapi/tests/http-examples/groups_delete.resp
M src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp
M src/plone/restapi/tests/http-examples/groups_update.resp
M src/plone/restapi/tests/http-examples/history_get.resp
M src/plone/restapi/tests/http-examples/image.resp
M src/plone/restapi/tests/http-examples/jwt_logged_in.req
M src/plone/restapi/tests/http-examples/jwt_logged_in.resp
M src/plone/restapi/tests/http-examples/jwt_login.resp
M src/plone/restapi/tests/http-examples/jwt_login_renew.req
M src/plone/restapi/tests/http-examples/jwt_login_renew.resp
M src/plone/restapi/tests/http-examples/jwt_logout.req
M src/plone/restapi/tests/http-examples/link.resp
M src/plone/restapi/tests/http-examples/lock_get.resp
M src/plone/restapi/tests/http-examples/move.resp
M src/plone/restapi/tests/http-examples/navigation.resp
M src/plone/restapi/tests/http-examples/navigation_tree.resp
M src/plone/restapi/tests/http-examples/newsitem.resp
M src/plone/restapi/tests/http-examples/principals.resp
M src/plone/restapi/tests/http-examples/registry_get_list.resp
M src/plone/restapi/tests/http-examples/registry_update.resp
M src/plone/restapi/tests/http-examples/roles.resp
M src/plone/restapi/tests/http-examples/search.resp
M src/plone/restapi/tests/http-examples/sharing_folder_get.resp
M src/plone/restapi/tests/http-examples/sharing_folder_post.resp
M src/plone/restapi/tests/http-examples/sharing_search.resp
M src/plone/restapi/tests/http-examples/siteroot.resp
M src/plone/restapi/tests/http-examples/translated_messages_object_history.resp
M src/plone/restapi/tests/http-examples/translated_messages_types.resp
M src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp
M src/plone/restapi/tests/http-examples/translations_delete.resp
M src/plone/restapi/tests/http-examples/translations_get.resp
M src/plone/restapi/tests/http-examples/translations_post.resp
M src/plone/restapi/tests/http-examples/tusupload_options.resp
M src/plone/restapi/tests/http-examples/types.resp
M src/plone/restapi/tests/http-examples/types_document.resp
M src/plone/restapi/tests/http-examples/unlock.resp
M src/plone/restapi/tests/http-examples/users.resp
M src/plone/restapi/tests/http-examples/users_add.resp
M src/plone/restapi/tests/http-examples/users_authorized_get.resp
M src/plone/restapi/tests/http-examples/users_created.resp
M src/plone/restapi/tests/http-examples/users_delete.resp
M src/plone/restapi/tests/http-examples/users_filtered_by_username.resp
M src/plone/restapi/tests/http-examples/users_get.resp
M src/plone/restapi/tests/http-examples/users_update.resp
M src/plone/restapi/tests/http-examples/vocabularies.resp
M src/plone/restapi/tests/http-examples/vocabularies_get.resp
M src/plone/restapi/tests/mixin_ordering.py
M src/plone/restapi/tests/test_atcontent_deserializer.py
M src/plone/restapi/tests/test_content_post.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_dxcontent_deserializer.py
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_pas.py
M src/plone/restapi/tests/test_roles.py
M src/plone/restapi/tests/test_search.py
M src/plone/restapi/tests/test_serializer_converters.py
M src/plone/restapi/tests/test_services_types.py

b'diff --git a/src/plone/restapi/deserializer/controlpanels.py b/src/plone/restapi/deserializer/controlpanels.py\nindex 5a8692b6..e434ee01 100644\n--- a/src/plone/restapi/deserializer/controlpanels.py\n+++ b/src/plone/restapi/deserializer/controlpanels.py\n@@ -82,7 +82,7 @@ def __call__(self):\n                 (self.context, self.request, None, schema, None),\n                 IManagerValidator)\n             for error in validator.validate(field_data):\n-                errors.append({\'error\': error, \'message\': error.message})\n+                errors.append({\'error\': error, \'message\': str(error)})\n \n         if errors:\n             raise BadRequest(errors)\ndiff --git a/src/plone/restapi/deserializer/dxcontent.py b/src/plone/restapi/deserializer/dxcontent.py\nindex 1877314b..4f93e8ba 100644\n--- a/src/plone/restapi/deserializer/dxcontent.py\n+++ b/src/plone/restapi/deserializer/dxcontent.py\n@@ -123,7 +123,7 @@ def __call__(self, validate_all=False, data=None, create=False):  # noqa: ignore\n                 (self.context, self.request, None, schema, None),\n                 IManagerValidator)\n             for error in validator.validate(field_data):\n-                errors.append({\'error\': error, \'message\': error.message})\n+                errors.append({\'error\': error, \'message\': str(error)})\n \n         if errors:\n             raise BadRequest(errors)\ndiff --git a/src/plone/restapi/pas/plugin.py b/src/plone/restapi/pas/plugin.py\nindex 78d12e95..f9c5ab25 100644\n--- a/src/plone/restapi/pas/plugin.py\n+++ b/src/plone/restapi/pas/plugin.py\n@@ -16,8 +16,8 @@\n from plone.keyring.keyring import GenerateSecret\n from zope.component import getUtility\n from zope.interface import implementer\n-\n import jwt\n+import six\n import time\n \n \n@@ -117,7 +117,9 @@ def authenticateCredentials(self, credentials):\n         if \'sub\' not in payload:\n             return None\n \n-        userid = payload[\'sub\'].encode(\'utf8\')\n+        userid = payload[\'sub\']\n+        if six.PY2:\n+            userid = userid.encode(\'utf8\')\n \n         if self.store_tokens:\n             if userid not in self._tokens:\n@@ -160,6 +162,8 @@ def _decode_token(self, token, verify=True):\n                 token, self._secret + self._path(), verify=verify)\n \n     def _jwt_decode(self, token, secret, verify=True):\n+        if isinstance(token, six.text_type):\n+            token = token.encode(\'utf-8\')\n         try:\n             return jwt.decode(\n                 token, secret, verify=verify, algorithms=[\'HS256\'])\n@@ -196,6 +200,8 @@ def create_token(self, userid, timeout=None, data=None):\n         if data is not None:\n             payload.update(data)\n         token = jwt.encode(payload, self._signing_secret(), algorithm=\'HS256\')\n+        if not six.PY2:\n+            token = token.decode(\'utf-8\')\n         if self.store_tokens:\n             if self._tokens is None:\n                 self._tokens = OOBTree()\ndiff --git a/src/plone/restapi/serializer/catalog.py b/src/plone/restapi/serializer/catalog.py\nindex 8dc82671..da599fe4 100644\n--- a/src/plone/restapi/serializer/catalog.py\n+++ b/src/plone/restapi/serializer/catalog.py\n@@ -31,7 +31,7 @@ def _get_metadata_to_include(self, metadata_fields):\n         if metadata_fields and \'_all\' in metadata_fields:\n             site = getSite()\n             catalog = getToolByName(site, \'portal_catalog\')\n-            metadata_attrs = catalog.schema() + BRAIN_METHODS\n+            metadata_attrs = list(catalog.schema()) + BRAIN_METHODS\n             return metadata_attrs\n \n         return metadata_fields\ndiff --git a/src/plone/restapi/services/auth/login.py b/src/plone/restapi/services/auth/login.py\nindex dc4217da..39568e24 100644\n--- a/src/plone/restapi/services/auth/login.py\n+++ b/src/plone/restapi/services/auth/login.py\n@@ -8,6 +8,7 @@\n from zope.interface import alsoProvides\n \n import plone.protect.interfaces\n+import six\n \n \n class Login(Service):\n@@ -26,8 +27,11 @@ def reply(self):\n             alsoProvides(self.request,\n                          plone.protect.interfaces.IDisableCSRFProtection)\n \n-        userid = data[\'login\'].encode(\'utf8\')\n-        password = data[\'password\'].encode(\'utf8\')\n+        userid = data[\'login\']\n+        password = data[\'password\']\n+        if six.PY2:\n+            userid = userid.encode(\'utf8\')\n+            password = password.encode(\'utf8\')\n         uf = self._find_userfolder(userid)\n \n         if uf is not None:\ndiff --git a/src/plone/restapi/services/content/add.py b/src/plone/restapi/services/content/add.py\nindex 9e3ac5c3..1b82f236 100644\n--- a/src/plone/restapi/services/content/add.py\n+++ b/src/plone/restapi/services/content/add.py\n@@ -53,12 +53,12 @@ def reply(self):\n             self.request.response.setStatus(403)\n             return dict(error=dict(\n                 type=\'Forbidden\',\n-                message=exc.message))\n+                message=str(exc)))\n         except BadRequest as exc:\n             self.request.response.setStatus(400)\n             return dict(error=dict(\n                 type=\'Bad Request\',\n-                message=exc.message))\n+                message=str(exc)))\n \n         # Acquisition wrap temporarily to satisfy things like vocabularies\n         # depending on tools\ndiff --git a/src/plone/restapi/services/workflow/transition.py b/src/plone/restapi/services/workflow/transition.py\nindex 36a3483e..fc09edb2 100644\n--- a/src/plone/restapi/services/workflow/transition.py\n+++ b/src/plone/restapi/services/workflow/transition.py\n@@ -69,7 +69,7 @@ def reply(self):\n             self.request.response.setStatus(400)\n             return dict(error=dict(\n                 type=\'WorkflowException\',\n-                message=translate(e.message, context=self.request)))\n+                message=translate(str(e), context=self.request)))\n         except BadRequest as e:\n             self.request.response.setStatus(400)\n             return dict(error=dict(\ndiff --git a/src/plone/restapi/tests/http-examples/404_not_found.resp b/src/plone/restapi/tests/http-examples/404_not_found.resp\nindex c3113aa8..bbf39099 100644\n--- a/src/plone/restapi/tests/http-examples/404_not_found.resp\n+++ b/src/plone/restapi/tests/http-examples/404_not_found.resp\n@@ -2,6 +2,6 @@ HTTP/1.1 404 Not Found\n Content-Type: application/json\n \n {\n-  "message": "Resource not found: http://localhost:55001/plone/non-existing-resource", \n+  "message": "Resource not found: http://localhost:55001/plone/non-existing-resource",\n   "type": "NotFound"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/batching.resp b/src/plone/restapi/tests/http-examples/batching.resp\nindex ef2084ec..34840d5f 100644\n--- a/src/plone/restapi/tests/http-examples/batching.resp\n+++ b/src/plone/restapi/tests/http-examples/batching.resp\n@@ -2,49 +2,49 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/folder/@search", \n+  "@id": "http://localhost:55001/plone/folder/@search",\n   "batching": {\n-    "@id": "http://localhost:55001/plone/folder/@search?b_size=5&sort_on=path", \n-    "first": "http://localhost:55001/plone/folder/@search?b_start=0&b_size=5&sort_on=path", \n-    "last": "http://localhost:55001/plone/folder/@search?b_start=5&b_size=5&sort_on=path", \n+    "@id": "http://localhost:55001/plone/folder/@search?b_size=5&sort_on=path",\n+    "first": "http://localhost:55001/plone/folder/@search?b_start=0&b_size=5&sort_on=path",\n+    "last": "http://localhost:55001/plone/folder/@search?b_start=5&b_size=5&sort_on=path",\n     "next": "http://localhost:55001/plone/folder/@search?b_start=5&b_size=5&sort_on=path"\n-  }, \n+  },\n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone/folder", \n-      "@type": "Folder", \n-      "description": "", \n-      "review_state": "private", \n+      "@id": "http://localhost:55001/plone/folder",\n+      "@type": "Folder",\n+      "description": "",\n+      "review_state": "private",\n       "title": "Folder"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/folder/doc-1", \n-      "@type": "Document", \n-      "description": "", \n-      "review_state": "private", \n+      "@id": "http://localhost:55001/plone/folder/doc-1",\n+      "@type": "Document",\n+      "description": "",\n+      "review_state": "private",\n       "title": "Document 1"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/folder/doc-2", \n-      "@type": "Document", \n-      "description": "", \n-      "review_state": "private", \n+      "@id": "http://localhost:55001/plone/folder/doc-2",\n+      "@type": "Document",\n+      "description": "",\n+      "review_state": "private",\n       "title": "Document 2"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/folder/doc-3", \n-      "@type": "Document", \n-      "description": "", \n-      "review_state": "private", \n+      "@id": "http://localhost:55001/plone/folder/doc-3",\n+      "@type": "Document",\n+      "description": "",\n+      "review_state": "private",\n       "title": "Document 3"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/folder/doc-4", \n-      "@type": "Document", \n-      "description": "", \n-      "review_state": "private", \n+      "@id": "http://localhost:55001/plone/folder/doc-4",\n+      "@type": "Document",\n+      "description": "",\n+      "review_state": "private",\n       "title": "Document 4"\n     }\n-  ], \n+  ],\n   "items_total": 8\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/breadcrumbs.resp b/src/plone/restapi/tests/http-examples/breadcrumbs.resp\nindex 78aebf25..0a46996c 100644\n--- a/src/plone/restapi/tests/http-examples/breadcrumbs.resp\n+++ b/src/plone/restapi/tests/http-examples/breadcrumbs.resp\n@@ -2,10 +2,10 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/front-page/@breadcrumbs", \n+  "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone/front-page", \n+      "@id": "http://localhost:55001/plone/front-page",\n       "title": "Welcome to Plone"\n     }\n   ]\ndiff --git a/src/plone/restapi/tests/http-examples/collection.resp b/src/plone/restapi/tests/http-examples/collection.resp\nindex 86c6c4ce..6b187d72 100644\n--- a/src/plone/restapi/tests/http-examples/collection.resp\n+++ b/src/plone/restapi/tests/http-examples/collection.resp\n@@ -5,87 +5,87 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/collection/@actions"\n-    }, \n+    },\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/collection/@breadcrumbs"\n-    }, \n+    },\n     "navigation": {\n       "@id": "http://localhost:55001/plone/collection/@navigation"\n-    }, \n+    },\n     "workflow": {\n       "@id": "http://localhost:55001/plone/collection/@workflow"\n     }\n-  }, \n-  "@id": "http://localhost:55001/plone/collection", \n-  "@type": "Collection", \n-  "UID": "SomeUUID000000000000000000000002", \n-  "allow_discussion": false, \n-  "contributors": [], \n-  "created": "2016-01-21T08:14:48+00:00", \n+  },\n+  "@id": "http://localhost:55001/plone/collection",\n+  "@type": "Collection",\n+  "UID": "SomeUUID000000000000000000000002",\n+  "allow_discussion": false,\n+  "contributors": [],\n+  "created": "2016-01-21T08:14:48+00:00",\n   "creators": [\n     "test_user_1_"\n-  ], \n+  ],\n   "customViewFields": [\n-    "Title", \n-    "Creator", \n-    "Type", \n+    "Title",\n+    "Creator",\n+    "Type",\n     "ModificationDate"\n-  ], \n-  "description": "This is a collection with two documents", \n-  "effective": null, \n-  "exclude_from_nav": false, \n-  "expires": null, \n-  "id": "collection", \n-  "is_folderish": false, \n-  "item_count": 30, \n+  ],\n+  "description": "This is a collection with two documents",\n+  "effective": null,\n+  "exclude_from_nav": false,\n+  "expires": null,\n+  "id": "collection",\n+  "is_folderish": false,\n+  "item_count": 30,\n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone/front-page", \n-      "@type": "Document", \n-      "description": "Congratulations! You have successfully installed Plone.", \n-      "review_state": "private", \n+      "@id": "http://localhost:55001/plone/front-page",\n+      "@type": "Document",\n+      "description": "Congratulations! You have successfully installed Plone.",\n+      "review_state": "private",\n       "title": "Welcome to Plone"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/doc1", \n-      "@type": "Document", \n-      "description": "", \n-      "review_state": "private", \n+      "@id": "http://localhost:55001/plone/doc1",\n+      "@type": "Document",\n+      "description": "",\n+      "review_state": "private",\n       "title": "Document 1"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/doc2", \n-      "@type": "Document", \n-      "description": "", \n-      "review_state": "private", \n+      "@id": "http://localhost:55001/plone/doc2",\n+      "@type": "Document",\n+      "description": "",\n+      "review_state": "private",\n       "title": "Document 2"\n     }\n-  ], \n-  "items_total": 3, \n-  "language": "", \n-  "layout": "listing_view", \n-  "limit": 1000, \n-  "modified": "2016-01-21T08:24:11+00:00", \n+  ],\n+  "items_total": 3,\n+  "language": "",\n+  "layout": "listing_view",\n+  "limit": 1000,\n+  "modified": "2016-01-21T08:24:11+00:00",\n   "parent": {\n-    "@id": "http://localhost:55001/plone", \n-    "@type": "Plone Site", \n-    "description": "", \n+    "@id": "http://localhost:55001/plone",\n+    "@type": "Plone Site",\n+    "description": "",\n     "title": "Plone site"\n-  }, \n+  },\n   "query": [\n     {\n-      "i": "portal_type", \n-      "o": "plone.app.querystring.operation.string.is", \n+      "i": "portal_type",\n+      "o": "plone.app.querystring.operation.string.is",\n       "v": "Document"\n     }\n-  ], \n-  "relatedItems": [], \n-  "review_state": "private", \n-  "rights": "", \n-  "sort_on": null, \n-  "sort_reversed": null, \n-  "subjects": [], \n-  "text": null, \n-  "title": "My Collection", \n+  ],\n+  "relatedItems": [],\n+  "review_state": "private",\n+  "rights": "",\n+  "sort_on": null,\n+  "sort_reversed": null,\n+  "subjects": [],\n+  "text": null,\n+  "title": "My Collection",\n   "version": "current"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/comments_delete.resp b/src/plone/restapi/tests/http-examples/comments_delete.resp\nindex 0074ded3..460c2259 100644\n--- a/src/plone/restapi/tests/http-examples/comments_delete.resp\n+++ b/src/plone/restapi/tests/http-examples/comments_delete.resp\n@@ -1,2 +1,3 @@\n HTTP/1.1 204 No Content\n+Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/comments_get.resp b/src/plone/restapi/tests/http-examples/comments_get.resp\nindex 5f4813b0..04d5676c 100644\n--- a/src/plone/restapi/tests/http-examples/comments_get.resp\n+++ b/src/plone/restapi/tests/http-examples/comments_get.resp\n@@ -2,44 +2,44 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/front-page/@comments", \n+  "@id": "http://localhost:55001/plone/front-page/@comments",\n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone/front-page/@comments/1477076400000000", \n-      "@parent": null, \n-      "@type": "Discussion Item", \n-      "author_name": null, \n-      "author_username": null, \n-      "comment_id": "1477076400000000", \n-      "creation_date": "2016-10-21T19:00:00", \n-      "in_reply_to": null, \n-      "is_deletable": true, \n-      "is_editable": true, \n-      "modification_date": "2016-10-21T19:00:00", \n+      "@id": "http://localhost:55001/plone/front-page/@comments/1477076400000000",\n+      "@parent": null,\n+      "@type": "Discussion Item",\n+      "author_name": null,\n+      "author_username": null,\n+      "comment_id": "1477076400000000",\n+      "creation_date": "2016-10-21T19:00:00",\n+      "in_reply_to": null,\n+      "is_deletable": true,\n+      "is_editable": true,\n+      "modification_date": "2016-10-21T19:00:00",\n       "text": {\n-        "data": "Comment 1", \n+        "data": "Comment 1",\n         "mime-type": "text/plain"\n-      }, \n+      },\n       "user_notification": null\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/front-page/@comments/1477076400000001", \n-      "@parent": "http://localhost:55001/plone/front-page/@comments/1477076400000000", \n-      "@type": "Discussion Item", \n-      "author_name": null, \n-      "author_username": null, \n-      "comment_id": "1477076400000001", \n-      "creation_date": "2016-10-21T19:00:00", \n-      "in_reply_to": "1477076400000000", \n-      "is_deletable": true, \n-      "is_editable": true, \n-      "modification_date": "2016-10-21T19:00:00", \n+      "@id": "http://localhost:55001/plone/front-page/@comments/1477076400000001",\n+      "@parent": "http://localhost:55001/plone/front-page/@comments/1477076400000000",\n+      "@type": "Discussion Item",\n+      "author_name": null,\n+      "author_username": null,\n+      "comment_id": "1477076400000001",\n+      "creation_date": "2016-10-21T19:00:00",\n+      "in_reply_to": "1477076400000000",\n+      "is_deletable": true,\n+      "is_editable": true,\n+      "modification_date": "2016-10-21T19:00:00",\n       "text": {\n-        "data": "Comment 1.1", \n+        "data": "Comment 1.1",\n         "mime-type": "text/plain"\n-      }, \n+      },\n       "user_notification": null\n     }\n-  ], \n+  ],\n   "items_total": 2\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/content_delete.resp b/src/plone/restapi/tests/http-examples/content_delete.resp\nindex 0074ded3..460c2259 100644\n--- a/src/plone/restapi/tests/http-examples/content_delete.resp\n+++ b/src/plone/restapi/tests/http-examples/content_delete.resp\n@@ -1,2 +1,3 @@\n HTTP/1.1 204 No Content\n+Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/content_get.resp b/src/plone/restapi/tests/http-examples/content_get.resp\nindex 3cee3662..a922f27a 100644\n--- a/src/plone/restapi/tests/http-examples/content_get.resp\n+++ b/src/plone/restapi/tests/http-examples/content_get.resp\n@@ -5,50 +5,50 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@actions"\n-    }, \n+    },\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@breadcrumbs"\n-    }, \n+    },\n     "navigation": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@navigation"\n-    }, \n+    },\n     "workflow": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@workflow"\n     }\n-  }, \n-  "@id": "http://localhost:55001/plone/folder/my-document", \n-  "@type": "Document", \n-  "UID": "SomeUUID000000000000000000000005", \n-  "allow_discussion": false, \n-  "changeNote": "", \n-  "contributors": [], \n-  "created": "2016-10-21T19:00:00+00:00", \n+  },\n+  "@id": "http://localhost:55001/plone/folder/my-document",\n+  "@type": "Document",\n+  "UID": "SomeUUID000000000000000000000005",\n+  "allow_discussion": false,\n+  "changeNote": "",\n+  "contributors": [],\n+  "created": "2016-10-21T15:00:00+00:00",\n   "creators": [\n     "admin"\n-  ], \n-  "description": "", \n-  "effective": null, \n-  "exclude_from_nav": false, \n-  "expires": null, \n-  "id": "my-document", \n-  "is_folderish": false, \n-  "language": "", \n-  "layout": "document_view", \n-  "modified": "2016-10-21T19:00:00+00:00", \n+  ],\n+  "description": "",\n+  "effective": null,\n+  "exclude_from_nav": false,\n+  "expires": null,\n+  "id": "my-document",\n+  "is_folderish": false,\n+  "language": "",\n+  "layout": "document_view",\n+  "modified": "2016-10-21T15:00:00+00:00",\n   "parent": {\n-    "@id": "http://localhost:55001/plone/folder", \n-    "@type": "Folder", \n-    "description": "This is a folder with two documents", \n-    "review_state": "private", \n+    "@id": "http://localhost:55001/plone/folder",\n+    "@type": "Folder",\n+    "description": "This is a folder with two documents",\n+    "review_state": "private",\n     "title": "My Folder"\n-  }, \n-  "relatedItems": [], \n-  "review_state": "private", \n-  "rights": "", \n-  "subjects": [], \n-  "table_of_contents": null, \n-  "text": null, \n-  "title": "My Document", \n-  "version": "current", \n+  },\n+  "relatedItems": [],\n+  "review_state": "private",\n+  "rights": "",\n+  "subjects": [],\n+  "table_of_contents": null,\n+  "text": null,\n+  "title": "My Document",\n+  "version": "current",\n   "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/content_patch.resp b/src/plone/restapi/tests/http-examples/content_patch.resp\nindex 0074ded3..460c2259 100644\n--- a/src/plone/restapi/tests/http-examples/content_patch.resp\n+++ b/src/plone/restapi/tests/http-examples/content_patch.resp\n@@ -1,2 +1,3 @@\n HTTP/1.1 204 No Content\n+Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/content_patch_representation.resp b/src/plone/restapi/tests/http-examples/content_patch_representation.resp\nindex 7596044f..85cec5bb 100644\n--- a/src/plone/restapi/tests/http-examples/content_patch_representation.resp\n+++ b/src/plone/restapi/tests/http-examples/content_patch_representation.resp\n@@ -5,50 +5,50 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@actions"\n-    }, \n+    },\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@breadcrumbs"\n-    }, \n+    },\n     "navigation": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@navigation"\n-    }, \n+    },\n     "workflow": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@workflow"\n     }\n-  }, \n-  "@id": "http://localhost:55001/plone/folder/my-document", \n-  "@type": "Document", \n-  "UID": "SomeUUID000000000000000000000005", \n-  "allow_discussion": false, \n-  "changeNote": "", \n-  "contributors": [], \n-  "created": "2016-10-21T19:00:00+00:00", \n+  },\n+  "@id": "http://localhost:55001/plone/folder/my-document",\n+  "@type": "Document",\n+  "UID": "SomeUUID000000000000000000000005",\n+  "allow_discussion": false,\n+  "changeNote": "",\n+  "contributors": [],\n+  "created": "2016-10-21T15:00:00+00:00",\n   "creators": [\n     "admin"\n-  ], \n-  "description": "", \n-  "effective": null, \n-  "exclude_from_nav": false, \n-  "expires": null, \n-  "id": "my-document", \n-  "is_folderish": false, \n-  "language": "", \n-  "layout": "document_view", \n-  "modified": "2016-10-21T19:00:00+00:00", \n+  ],\n+  "description": "",\n+  "effective": null,\n+  "exclude_from_nav": false,\n+  "expires": null,\n+  "id": "my-document",\n+  "is_folderish": false,\n+  "language": "",\n+  "layout": "document_view",\n+  "modified": "2016-10-21T15:00:00+00:00",\n   "parent": {\n-    "@id": "http://localhost:55001/plone/folder", \n-    "@type": "Folder", \n-    "description": "This is a folder with two documents", \n-    "review_state": "private", \n+    "@id": "http://localhost:55001/plone/folder",\n+    "@type": "Folder",\n+    "description": "This is a folder with two documents",\n+    "review_state": "private",\n     "title": "My Folder"\n-  }, \n-  "relatedItems": [], \n-  "review_state": "private", \n-  "rights": "", \n-  "subjects": [], \n-  "table_of_contents": null, \n-  "text": null, \n-  "title": "My New Document Title", \n-  "version": "current", \n+  },\n+  "relatedItems": [],\n+  "review_state": "private",\n+  "rights": "",\n+  "subjects": [],\n+  "table_of_contents": null,\n+  "text": null,\n+  "title": "My New Document Title",\n+  "version": "current",\n   "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/content_post.resp b/src/plone/restapi/tests/http-examples/content_post.resp\nindex 63b4140c..a7f4f6d0 100644\n--- a/src/plone/restapi/tests/http-examples/content_post.resp\n+++ b/src/plone/restapi/tests/http-examples/content_post.resp\n@@ -1,55 +1,55 @@\n HTTP/1.1 201 Created\n-Content-Type: application/json\n Location: http://localhost:55001/plone/folder/my-document\n+Content-Type: application/json\n \n {\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@actions"\n-    }, \n+    },\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@breadcrumbs"\n-    }, \n+    },\n     "navigation": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@navigation"\n-    }, \n+    },\n     "workflow": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@workflow"\n     }\n-  }, \n-  "@id": "http://localhost:55001/plone/folder/my-document", \n-  "@type": "Document", \n-  "UID": "SomeUUID000000000000000000000005", \n-  "allow_discussion": false, \n-  "changeNote": "", \n-  "contributors": [], \n-  "created": "2016-10-21T19:00:00+00:00", \n+  },\n+  "@id": "http://localhost:55001/plone/folder/my-document",\n+  "@type": "Document",\n+  "UID": "SomeUUID000000000000000000000005",\n+  "allow_discussion": false,\n+  "changeNote": "",\n+  "contributors": [],\n+  "created": "2016-10-21T15:00:00+00:00",\n   "creators": [\n     "admin"\n-  ], \n-  "description": "", \n-  "effective": null, \n-  "exclude_from_nav": false, \n-  "expires": null, \n-  "id": "my-document", \n-  "is_folderish": false, \n-  "language": "", \n-  "layout": "document_view", \n-  "modified": "2016-10-21T19:00:00+00:00", \n+  ],\n+  "description": "",\n+  "effective": null,\n+  "exclude_from_nav": false,\n+  "expires": null,\n+  "id": "my-document",\n+  "is_folderish": false,\n+  "language": "",\n+  "layout": "document_view",\n+  "modified": "2016-10-21T15:00:00+00:00",\n   "parent": {\n-    "@id": "http://localhost:55001/plone/folder", \n-    "@type": "Folder", \n-    "description": "This is a folder with two documents", \n-    "review_state": "private", \n+    "@id": "http://localhost:55001/plone/folder",\n+    "@type": "Folder",\n+    "description": "This is a folder with two documents",\n+    "review_state": "private",\n     "title": "My Folder"\n-  }, \n-  "relatedItems": [], \n-  "review_state": "private", \n-  "rights": "", \n-  "subjects": [], \n-  "table_of_contents": null, \n-  "text": null, \n-  "title": "My Document", \n-  "version": "current", \n+  },\n+  "relatedItems": [],\n+  "review_state": "private",\n+  "rights": "",\n+  "subjects": [],\n+  "table_of_contents": null,\n+  "text": null,\n+  "title": "My Document",\n+  "version": "current",\n   "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get.resp b/src/plone/restapi/tests/http-examples/controlpanels_get.resp\nindex 038b2cdc..6633091f 100644\n--- a/src/plone/restapi/tests/http-examples/controlpanels_get.resp\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get.resp\n@@ -3,58 +3,58 @@ Content-Type: application/json\n \n [\n   {\n-    "@id": "http://localhost:55001/plone/@controlpanels/date-and-time", \n-    "group": "General", \n+    "@id": "http://localhost:55001/plone/@controlpanels/date-and-time",\n+    "group": "General",\n     "title": "Date and Time"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@controlpanels/language", \n-    "group": "General", \n+    "@id": "http://localhost:55001/plone/@controlpanels/language",\n+    "group": "General",\n     "title": "Language"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@controlpanels/mail", \n-    "group": "General", \n+    "@id": "http://localhost:55001/plone/@controlpanels/mail",\n+    "group": "General",\n     "title": "Mail"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@controlpanels/navigation", \n-    "group": "General", \n+    "@id": "http://localhost:55001/plone/@controlpanels/navigation",\n+    "group": "General",\n     "title": "Navigation"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@controlpanels/site", \n-    "group": "General", \n+    "@id": "http://localhost:55001/plone/@controlpanels/site",\n+    "group": "General",\n     "title": "Site"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@controlpanels/search", \n-    "group": "General", \n+    "@id": "http://localhost:55001/plone/@controlpanels/search",\n+    "group": "General",\n     "title": "Search"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@controlpanels/socialmedia", \n-    "group": "General", \n+    "@id": "http://localhost:55001/plone/@controlpanels/socialmedia",\n+    "group": "General",\n     "title": "Social Media"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@controlpanels/editing", \n-    "group": "Content", \n+    "@id": "http://localhost:55001/plone/@controlpanels/editing",\n+    "group": "Content",\n     "title": "Editing"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@controlpanels/imaging", \n-    "group": "Content", \n+    "@id": "http://localhost:55001/plone/@controlpanels/imaging",\n+    "group": "Content",\n     "title": "Image Handling"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@controlpanels/markup", \n-    "group": "Content", \n+    "@id": "http://localhost:55001/plone/@controlpanels/markup",\n+    "group": "Content",\n     "title": "Markup"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@controlpanels/security", \n-    "group": "Security", \n+    "@id": "http://localhost:55001/plone/@controlpanels/security",\n+    "group": "Security",\n     "title": "Security"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\nindex 47ca1799..e7cc3363 100644\n--- a/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n@@ -2,105 +2,105 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/@controlpanels/editing", \n+  "@id": "http://localhost:55001/plone/@controlpanels/editing",\n   "data": {\n     "available_editors": [\n-      "TinyMCE", \n+      "TinyMCE",\n       "None"\n-    ], \n-    "default_editor": "TinyMCE", \n-    "enable_link_integrity_checks": true, \n-    "ext_editor": false, \n-    "lock_on_ttw_edit": true, \n+    ],\n+    "default_editor": "TinyMCE",\n+    "enable_link_integrity_checks": true,\n+    "ext_editor": false,\n+    "lock_on_ttw_edit": true,\n     "subjects_of_navigation_root": false\n-  }, \n-  "group": "Content", \n+  },\n+  "group": "Content",\n   "schema": {\n     "fieldsets": [\n       {\n         "fields": [\n-          "available_editors", \n-          "default_editor", \n-          "ext_editor", \n-          "enable_link_integrity_checks", \n-          "lock_on_ttw_edit", \n+          "available_editors",\n+          "default_editor",\n+          "ext_editor",\n+          "enable_link_integrity_checks",\n+          "lock_on_ttw_edit",\n           "subjects_of_navigation_root"\n-        ], \n-        "id": "default", \n+        ],\n+        "id": "default",\n         "title": "Default"\n       }\n-    ], \n+    ],\n     "properties": {\n       "available_editors": {\n-        "additionalItems": true, \n+        "additionalItems": true,\n         "default": [\n-          "TinyMCE", \n+          "TinyMCE",\n           "None"\n-        ], \n-        "description": "Available editors in the portal.", \n+        ],\n+        "description": "Available editors in the portal.",\n         "items": {\n-          "description": "", \n-          "title": "", \n+          "description": "",\n+          "title": "",\n           "type": "string"\n-        }, \n-        "title": "Available editors", \n-        "type": "array", \n+        },\n+        "title": "Available editors",\n+        "type": "array",\n         "uniqueItems": false\n-      }, \n+      },\n       "default_editor": {\n         "choices": [\n           [\n-            "TinyMCE", \n+            "TinyMCE",\n             "TinyMCE"\n-          ], \n+          ],\n           [\n-            "None", \n+            "None",\n             "None"\n           ]\n-        ], \n-        "default": "TinyMCE", \n-        "description": "Select the default wysiwyg editor. Users will be able to choose their own or select to use the site default.", \n+        ],\n+        "default": "TinyMCE",\n+        "description": "Select the default wysiwyg editor. Users will be able to choose their own or select to use the site default.",\n         "enum": [\n-          "TinyMCE", \n+          "TinyMCE",\n           "None"\n-        ], \n+        ],\n         "enumNames": [\n-          "TinyMCE", \n+          "TinyMCE",\n           "None"\n-        ], \n-        "title": "Default editor", \n+        ],\n+        "title": "Default editor",\n         "type": "string"\n-      }, \n+      },\n       "enable_link_integrity_checks": {\n-        "default": true, \n-        "description": "Determines if the users should get warnings when they delete or move content that is linked from inside the site.", \n-        "title": "Enable link integrity checks", \n+        "default": true,\n+        "description": "Determines if the users should get warnings when they delete or move content that is linked from inside the site.",\n+        "title": "Enable link integrity checks",\n         "type": "boolean"\n-      }, \n+      },\n       "ext_editor": {\n-        "default": false, \n-        "description": "Determines if the external editor feature is enabled. This feature requires a special client-side application installed. The users also have to enable this in their preferences.", \n-        "title": "Enable External Editor feature", \n+        "default": false,\n+        "description": "Determines if the external editor feature is enabled. This feature requires a special client-side application installed. The users also have to enable this in their preferences.",\n+        "title": "Enable External Editor feature",\n         "type": "boolean"\n-      }, \n+      },\n       "lock_on_ttw_edit": {\n-        "default": true, \n-        "description": "Disabling locking here will only affect users editing content through the Plone web UI.  Content edited via WebDAV clients will still be subject to locking.", \n-        "title": "Enable locking for through-the-web edits", \n+        "default": true,\n+        "description": "Disabling locking here will only affect users editing content through the Plone web UI.  Content edited via WebDAV clients will still be subject to locking.",\n+        "title": "Enable locking for through-the-web edits",\n         "type": "boolean"\n-      }, \n+      },\n       "subjects_of_navigation_root": {\n-        "default": false, \n-        "description": "Limit tags aka keywords vocabulary used for Tags field and in searches to the terms used inside the subtree of the current navigation root. This can be used together with Plone\'s multilingual extension plone.app.multilingual to only offer keywords of the current selected language. Other addons may utilize this feature for its specific purposes.", \n-        "title": "Limit tags/keywords to the current navigation root", \n+        "default": false,\n+        "description": "Limit tags aka keywords vocabulary used for Tags field and in searches to the terms used inside the subtree of the current navigation root. This can be used together with Plone\'s multilingual extension plone.app.multilingual to only offer keywords of the current selected language. Other addons may utilize this feature for its specific purposes.",\n+        "title": "Limit tags/keywords to the current navigation root",\n         "type": "boolean"\n       }\n-    }, \n+    },\n     "required": [\n-      "available_editors", \n+      "available_editors",\n       "default_editor"\n-    ], \n+    ],\n     "type": "object"\n-  }, \n+  },\n   "title": "Editing"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/copy.resp b/src/plone/restapi/tests/http-examples/copy.resp\nindex 389bbbd3..01d8f2a7 100644\n--- a/src/plone/restapi/tests/http-examples/copy.resp\n+++ b/src/plone/restapi/tests/http-examples/copy.resp\n@@ -3,7 +3,7 @@ Content-Type: application/json\n \n [\n   {\n-    "source": "http://localhost:55001/plone/front-page", \n+    "source": "http://localhost:55001/plone/front-page",\n     "target": "http://localhost:55001/plone/copy_of_front-page"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/copy_multiple.resp b/src/plone/restapi/tests/http-examples/copy_multiple.resp\nindex 2fdbfef1..e8d63733 100644\n--- a/src/plone/restapi/tests/http-examples/copy_multiple.resp\n+++ b/src/plone/restapi/tests/http-examples/copy_multiple.resp\n@@ -3,11 +3,11 @@ Content-Type: application/json\n \n [\n   {\n-    "source": "http://localhost:55001/plone/front-page", \n+    "source": "http://localhost:55001/plone/front-page",\n     "target": "http://localhost:55001/plone/copy_of_front-page"\n-  }, \n+  },\n   {\n-    "source": "http://localhost:55001/plone/newsitem", \n+    "source": "http://localhost:55001/plone/newsitem",\n     "target": "http://localhost:55001/plone/copy_of_newsitem"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/document.resp b/src/plone/restapi/tests/http-examples/document.resp\nindex 14009c36..49216f71 100644\n--- a/src/plone/restapi/tests/http-examples/document.resp\n+++ b/src/plone/restapi/tests/http-examples/document.resp\n@@ -5,53 +5,53 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/front-page/@actions"\n-    }, \n+    },\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/front-page/@breadcrumbs"\n-    }, \n+    },\n     "navigation": {\n       "@id": "http://localhost:55001/plone/front-page/@navigation"\n-    }, \n+    },\n     "workflow": {\n       "@id": "http://localhost:55001/plone/front-page/@workflow"\n     }\n-  }, \n-  "@id": "http://localhost:55001/plone/front-page", \n-  "@type": "Document", \n-  "UID": "SomeUUID000000000000000000000001", \n-  "allow_discussion": false, \n-  "changeNote": "", \n-  "contributors": [], \n-  "created": "2016-01-21T01:14:48+00:00", \n+  },\n+  "@id": "http://localhost:55001/plone/front-page",\n+  "@type": "Document",\n+  "UID": "SomeUUID000000000000000000000001",\n+  "allow_discussion": false,\n+  "changeNote": "",\n+  "contributors": [],\n+  "created": "2016-01-21T01:14:48+00:00",\n   "creators": [\n     "test_user_1_"\n-  ], \n-  "description": "Congratulations! You have successfully installed Plone.", \n-  "effective": null, \n-  "exclude_from_nav": false, \n-  "expires": null, \n-  "id": "front-page", \n-  "is_folderish": false, \n-  "language": "", \n-  "layout": "document_view", \n-  "modified": "2016-01-21T01:24:11+00:00", \n+  ],\n+  "description": "Congratulations! You have successfully installed Plone.",\n+  "effective": null,\n+  "exclude_from_nav": false,\n+  "expires": null,\n+  "id": "front-page",\n+  "is_folderish": false,\n+  "language": "",\n+  "layout": "document_view",\n+  "modified": "2016-01-21T01:24:11+00:00",\n   "parent": {\n-    "@id": "http://localhost:55001/plone", \n-    "@type": "Plone Site", \n-    "description": "", \n+    "@id": "http://localhost:55001/plone",\n+    "@type": "Plone Site",\n+    "description": "",\n     "title": "Plone site"\n-  }, \n-  "relatedItems": [], \n-  "review_state": "private", \n-  "rights": "", \n-  "subjects": [], \n-  "table_of_contents": null, \n+  },\n+  "relatedItems": [],\n+  "review_state": "private",\n+  "rights": "",\n+  "subjects": [],\n+  "table_of_contents": null,\n   "text": {\n-    "content-type": "text/plain", \n-    "data": "<p>If you\'re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone mailing lists about this.</p>", \n+    "content-type": "text/plain",\n+    "data": "<p>If you&#x27;re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone mailing lists about this.</p>",\n     "encoding": "utf-8"\n-  }, \n-  "title": "Welcome to Plone", \n-  "version": "current", \n+  },\n+  "title": "Welcome to Plone",\n+  "version": "current",\n   "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/event.resp b/src/plone/restapi/tests/http-examples/event.resp\nindex 759a3259..b38a41b9 100644\n--- a/src/plone/restapi/tests/http-examples/event.resp\n+++ b/src/plone/restapi/tests/http-examples/event.resp\n@@ -5,60 +5,60 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/event/@actions"\n-    }, \n+    },\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/event/@breadcrumbs"\n-    }, \n+    },\n     "navigation": {\n       "@id": "http://localhost:55001/plone/event/@navigation"\n-    }, \n+    },\n     "workflow": {\n       "@id": "http://localhost:55001/plone/event/@workflow"\n     }\n-  }, \n-  "@id": "http://localhost:55001/plone/event", \n-  "@type": "Event", \n-  "UID": "SomeUUID000000000000000000000002", \n-  "allow_discussion": false, \n-  "attendees": [], \n-  "changeNote": "", \n-  "contact_email": null, \n-  "contact_name": null, \n-  "contact_phone": null, \n-  "contributors": [], \n-  "created": "2016-01-21T03:14:48+00:00", \n+  },\n+  "@id": "http://localhost:55001/plone/event",\n+  "@type": "Event",\n+  "UID": "SomeUUID000000000000000000000002",\n+  "allow_discussion": false,\n+  "attendees": [],\n+  "changeNote": "",\n+  "contact_email": null,\n+  "contact_name": null,\n+  "contact_phone": null,\n+  "contributors": [],\n+  "created": "2016-01-21T03:14:48+00:00",\n   "creators": [\n     "test_user_1_"\n-  ], \n-  "description": "This is an event", \n-  "effective": null, \n-  "end": "2013-01-01T12:00:00", \n-  "event_url": null, \n-  "exclude_from_nav": false, \n-  "expires": null, \n-  "id": "event", \n-  "is_folderish": false, \n-  "language": "", \n-  "layout": "event_view", \n-  "location": null, \n-  "modified": "2016-01-21T03:24:11+00:00", \n-  "open_end": false, \n+  ],\n+  "description": "This is an event",\n+  "effective": null,\n+  "end": "2013-01-01T12:00:00",\n+  "event_url": null,\n+  "exclude_from_nav": false,\n+  "expires": null,\n+  "id": "event",\n+  "is_folderish": false,\n+  "language": "",\n+  "layout": "event_view",\n+  "location": null,\n+  "modified": "2016-01-21T03:24:11+00:00",\n+  "open_end": false,\n   "parent": {\n-    "@id": "http://localhost:55001/plone", \n-    "@type": "Plone Site", \n-    "description": "", \n+    "@id": "http://localhost:55001/plone",\n+    "@type": "Plone Site",\n+    "description": "",\n     "title": "Plone site"\n-  }, \n-  "recurrence": null, \n-  "relatedItems": [], \n-  "review_state": "private", \n-  "rights": "", \n-  "start": "2013-01-01T10:00:00", \n-  "subjects": [], \n-  "sync_uid": null, \n-  "text": null, \n-  "title": "Event", \n-  "version": "current", \n-  "versioning_enabled": true, \n+  },\n+  "recurrence": null,\n+  "relatedItems": [],\n+  "review_state": "private",\n+  "rights": "",\n+  "start": "2013-01-01T10:00:00",\n+  "subjects": [],\n+  "sync_uid": null,\n+  "text": null,\n+  "title": "Event",\n+  "version": "current",\n+  "versioning_enabled": true,\n   "whole_day": false\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/expansion.resp b/src/plone/restapi/tests/http-examples/expansion.resp\nindex 14009c36..49216f71 100644\n--- a/src/plone/restapi/tests/http-examples/expansion.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion.resp\n@@ -5,53 +5,53 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/front-page/@actions"\n-    }, \n+    },\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/front-page/@breadcrumbs"\n-    }, \n+    },\n     "navigation": {\n       "@id": "http://localhost:55001/plone/front-page/@navigation"\n-    }, \n+    },\n     "workflow": {\n       "@id": "http://localhost:55001/plone/front-page/@workflow"\n     }\n-  }, \n-  "@id": "http://localhost:55001/plone/front-page", \n-  "@type": "Document", \n-  "UID": "SomeUUID000000000000000000000001", \n-  "allow_discussion": false, \n-  "changeNote": "", \n-  "contributors": [], \n-  "created": "2016-01-21T01:14:48+00:00", \n+  },\n+  "@id": "http://localhost:55001/plone/front-page",\n+  "@type": "Document",\n+  "UID": "SomeUUID000000000000000000000001",\n+  "allow_discussion": false,\n+  "changeNote": "",\n+  "contributors": [],\n+  "created": "2016-01-21T01:14:48+00:00",\n   "creators": [\n     "test_user_1_"\n-  ], \n-  "description": "Congratulations! You have successfully installed Plone.", \n-  "effective": null, \n-  "exclude_from_nav": false, \n-  "expires": null, \n-  "id": "front-page", \n-  "is_folderish": false, \n-  "language": "", \n-  "layout": "document_view", \n-  "modified": "2016-01-21T01:24:11+00:00", \n+  ],\n+  "description": "Congratulations! You have successfully installed Plone.",\n+  "effective": null,\n+  "exclude_from_nav": false,\n+  "expires": null,\n+  "id": "front-page",\n+  "is_folderish": false,\n+  "language": "",\n+  "layout": "document_view",\n+  "modified": "2016-01-21T01:24:11+00:00",\n   "parent": {\n-    "@id": "http://localhost:55001/plone", \n-    "@type": "Plone Site", \n-    "description": "", \n+    "@id": "http://localhost:55001/plone",\n+    "@type": "Plone Site",\n+    "description": "",\n     "title": "Plone site"\n-  }, \n-  "relatedItems": [], \n-  "review_state": "private", \n-  "rights": "", \n-  "subjects": [], \n-  "table_of_contents": null, \n+  },\n+  "relatedItems": [],\n+  "review_state": "private",\n+  "rights": "",\n+  "subjects": [],\n+  "table_of_contents": null,\n   "text": {\n-    "content-type": "text/plain", \n-    "data": "<p>If you\'re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone mailing lists about this.</p>", \n+    "content-type": "text/plain",\n+    "data": "<p>If you&#x27;re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone mailing lists about this.</p>",\n     "encoding": "utf-8"\n-  }, \n-  "title": "Welcome to Plone", \n-  "version": "current", \n+  },\n+  "title": "Welcome to Plone",\n+  "version": "current",\n   "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/expansion_expanded.resp b/src/plone/restapi/tests/http-examples/expansion_expanded.resp\nindex 2881430a..ecb9e8b9 100644\n--- a/src/plone/restapi/tests/http-examples/expansion_expanded.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion_expanded.resp\n@@ -5,59 +5,59 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/front-page/@actions"\n-    }, \n+    },\n     "breadcrumbs": {\n-      "@id": "http://localhost:55001/plone/front-page/@breadcrumbs", \n+      "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n       "items": [\n         {\n-          "@id": "http://localhost:55001/plone/front-page", \n+          "@id": "http://localhost:55001/plone/front-page",\n           "title": "Welcome to Plone"\n         }\n       ]\n-    }, \n+    },\n     "navigation": {\n       "@id": "http://localhost:55001/plone/front-page/@navigation"\n-    }, \n+    },\n     "workflow": {\n       "@id": "http://localhost:55001/plone/front-page/@workflow"\n     }\n-  }, \n-  "@id": "http://localhost:55001/plone/front-page", \n-  "@type": "Document", \n-  "UID": "SomeUUID000000000000000000000001", \n-  "allow_discussion": false, \n-  "changeNote": "", \n-  "contributors": [], \n-  "created": "2016-01-21T01:14:48+00:00", \n+  },\n+  "@id": "http://localhost:55001/plone/front-page",\n+  "@type": "Document",\n+  "UID": "SomeUUID000000000000000000000001",\n+  "allow_discussion": false,\n+  "changeNote": "",\n+  "contributors": [],\n+  "created": "2016-01-21T01:14:48+00:00",\n   "creators": [\n     "test_user_1_"\n-  ], \n-  "description": "Congratulations! You have successfully installed Plone.", \n-  "effective": null, \n-  "exclude_from_nav": false, \n-  "expires": null, \n-  "id": "front-page", \n-  "is_folderish": false, \n-  "language": "", \n-  "layout": "document_view", \n-  "modified": "2016-01-21T01:24:11+00:00", \n+  ],\n+  "description": "Congratulations! You have successfully installed Plone.",\n+  "effective": null,\n+  "exclude_from_nav": false,\n+  "expires": null,\n+  "id": "front-page",\n+  "is_folderish": false,\n+  "language": "",\n+  "layout": "document_view",\n+  "modified": "2016-01-21T01:24:11+00:00",\n   "parent": {\n-    "@id": "http://localhost:55001/plone", \n-    "@type": "Plone Site", \n-    "description": "", \n+    "@id": "http://localhost:55001/plone",\n+    "@type": "Plone Site",\n+    "description": "",\n     "title": "Plone site"\n-  }, \n-  "relatedItems": [], \n-  "review_state": "private", \n-  "rights": "", \n-  "subjects": [], \n-  "table_of_contents": null, \n+  },\n+  "relatedItems": [],\n+  "review_state": "private",\n+  "rights": "",\n+  "subjects": [],\n+  "table_of_contents": null,\n   "text": {\n-    "content-type": "text/plain", \n-    "data": "<p>If you\'re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone mailing lists about this.</p>", \n+    "content-type": "text/plain",\n+    "data": "<p>If you&#x27;re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone mailing lists about this.</p>",\n     "encoding": "utf-8"\n-  }, \n-  "title": "Welcome to Plone", \n-  "version": "current", \n+  },\n+  "title": "Welcome to Plone",\n+  "version": "current",\n   "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/file.resp b/src/plone/restapi/tests/http-examples/file.resp\nindex b76c1f95..dfab580d 100644\n--- a/src/plone/restapi/tests/http-examples/file.resp\n+++ b/src/plone/restapi/tests/http-examples/file.resp\n@@ -5,51 +5,51 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/file/@actions"\n-    }, \n+    },\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/file/@breadcrumbs"\n-    }, \n+    },\n     "navigation": {\n       "@id": "http://localhost:55001/plone/file/@navigation"\n-    }, \n+    },\n     "workflow": {\n       "@id": "http://localhost:55001/plone/file/@workflow"\n     }\n-  }, \n-  "@id": "http://localhost:55001/plone/file", \n-  "@type": "File", \n-  "UID": "SomeUUID000000000000000000000002", \n-  "allow_discussion": false, \n-  "contributors": [], \n-  "created": "2016-01-21T05:14:48+00:00", \n+  },\n+  "@id": "http://localhost:55001/plone/file",\n+  "@type": "File",\n+  "UID": "SomeUUID000000000000000000000002",\n+  "allow_discussion": false,\n+  "contributors": [],\n+  "created": "2016-01-21T05:14:48+00:00",\n   "creators": [\n     "test_user_1_"\n-  ], \n-  "description": "This is a file", \n-  "effective": null, \n-  "exclude_from_nav": false, \n-  "expires": null, \n+  ],\n+  "description": "This is a file",\n+  "effective": null,\n+  "exclude_from_nav": false,\n+  "expires": null,\n   "file": {\n-    "content-type": "application/pdf", \n-    "download": "http://localhost:55001/plone/file/@@download/file", \n-    "filename": "file.pdf", \n+    "content-type": "application/pdf",\n+    "download": "http://localhost:55001/plone/file/@@download/file",\n+    "filename": "file.pdf",\n     "size": 74429\n-  }, \n-  "id": "file", \n-  "is_folderish": false, \n-  "language": "", \n-  "layout": "file_view", \n-  "modified": "2016-01-21T05:24:11+00:00", \n+  },\n+  "id": "file",\n+  "is_folderish": false,\n+  "language": "",\n+  "layout": "file_view",\n+  "modified": "2016-01-21T05:24:11+00:00",\n   "parent": {\n-    "@id": "http://localhost:55001/plone", \n-    "@type": "Plone Site", \n-    "description": "", \n+    "@id": "http://localhost:55001/plone",\n+    "@type": "Plone Site",\n+    "description": "",\n     "title": "Plone site"\n-  }, \n-  "relatedItems": [], \n-  "review_state": null, \n-  "rights": "", \n-  "subjects": [], \n-  "title": "My File", \n+  },\n+  "relatedItems": [],\n+  "review_state": null,\n+  "rights": "",\n+  "subjects": [],\n+  "title": "My File",\n   "version": "current"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/folder.resp b/src/plone/restapi/tests/http-examples/folder.resp\nindex 2905c0a2..edacdf77 100644\n--- a/src/plone/restapi/tests/http-examples/folder.resp\n+++ b/src/plone/restapi/tests/http-examples/folder.resp\n@@ -5,63 +5,63 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/folder/@actions"\n-    }, \n+    },\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/folder/@breadcrumbs"\n-    }, \n+    },\n     "navigation": {\n       "@id": "http://localhost:55001/plone/folder/@navigation"\n-    }, \n+    },\n     "workflow": {\n       "@id": "http://localhost:55001/plone/folder/@workflow"\n     }\n-  }, \n-  "@id": "http://localhost:55001/plone/folder", \n-  "@type": "Folder", \n-  "UID": "SomeUUID000000000000000000000002", \n-  "allow_discussion": false, \n-  "contributors": [], \n-  "created": "2016-01-21T07:14:48+00:00", \n+  },\n+  "@id": "http://localhost:55001/plone/folder",\n+  "@type": "Folder",\n+  "UID": "SomeUUID000000000000000000000002",\n+  "allow_discussion": false,\n+  "contributors": [],\n+  "created": "2016-01-21T07:14:48+00:00",\n   "creators": [\n     "test_user_1_"\n-  ], \n-  "description": "This is a folder with two documents", \n-  "effective": null, \n-  "exclude_from_nav": false, \n-  "expires": null, \n-  "id": "folder", \n-  "is_folderish": true, \n+  ],\n+  "description": "This is a folder with two documents",\n+  "effective": null,\n+  "exclude_from_nav": false,\n+  "expires": null,\n+  "id": "folder",\n+  "is_folderish": true,\n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone/folder/doc1", \n-      "@type": "Document", \n-      "description": "", \n-      "review_state": "private", \n+      "@id": "http://localhost:55001/plone/folder/doc1",\n+      "@type": "Document",\n+      "description": "",\n+      "review_state": "private",\n       "title": "A document within a folder"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/folder/doc2", \n-      "@type": "Document", \n-      "description": "", \n-      "review_state": "private", \n+      "@id": "http://localhost:55001/plone/folder/doc2",\n+      "@type": "Document",\n+      "description": "",\n+      "review_state": "private",\n       "title": "A document within a folder"\n     }\n-  ], \n-  "items_total": 2, \n-  "language": "", \n-  "layout": "listing_view", \n-  "modified": "2016-01-21T07:24:11+00:00", \n-  "nextPreviousEnabled": false, \n+  ],\n+  "items_total": 2,\n+  "language": "",\n+  "layout": "listing_view",\n+  "modified": "2016-01-21T07:24:11+00:00",\n+  "nextPreviousEnabled": false,\n   "parent": {\n-    "@id": "http://localhost:55001/plone", \n-    "@type": "Plone Site", \n-    "description": "", \n+    "@id": "http://localhost:55001/plone",\n+    "@type": "Plone Site",\n+    "description": "",\n     "title": "Plone site"\n-  }, \n-  "relatedItems": [], \n-  "review_state": "private", \n-  "rights": "", \n-  "subjects": [], \n-  "title": "My Folder", \n+  },\n+  "relatedItems": [],\n+  "review_state": "private",\n+  "rights": "",\n+  "subjects": [],\n+  "title": "My Folder",\n   "version": "current"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/groups.resp b/src/plone/restapi/tests/http-examples/groups.resp\nindex 4900bf9e..a3dfdc01 100644\n--- a/src/plone/restapi/tests/http-examples/groups.resp\n+++ b/src/plone/restapi/tests/http-examples/groups.resp\n@@ -3,43 +3,43 @@ Content-Type: application/json\n \n [\n   {\n-    "@id": "http://localhost:55001/plone/@groups/Administrators", \n-    "description": "", \n-    "email": "", \n-    "groupname": "Administrators", \n-    "id": "Administrators", \n+    "@id": "http://localhost:55001/plone/@groups/Administrators",\n+    "description": "",\n+    "email": "",\n+    "groupname": "Administrators",\n+    "id": "Administrators",\n     "title": "Administrators"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@groups/Reviewers", \n-    "description": "", \n-    "email": "", \n-    "groupname": "Reviewers", \n-    "id": "Reviewers", \n+    "@id": "http://localhost:55001/plone/@groups/Reviewers",\n+    "description": "",\n+    "email": "",\n+    "groupname": "Reviewers",\n+    "id": "Reviewers",\n     "title": "Reviewers"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@groups/Site Administrators", \n-    "description": "", \n-    "email": "", \n-    "groupname": "Site Administrators", \n-    "id": "Site Administrators", \n+    "@id": "http://localhost:55001/plone/@groups/Site Administrators",\n+    "description": "",\n+    "email": "",\n+    "groupname": "Site Administrators",\n+    "id": "Site Administrators",\n     "title": "Site Administrators"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@groups/ploneteam", \n-    "description": "We are Plone", \n-    "email": "ploneteam@plone.org", \n-    "groupname": "ploneteam", \n-    "id": "ploneteam", \n+    "@id": "http://localhost:55001/plone/@groups/ploneteam",\n+    "description": "We are Plone",\n+    "email": "ploneteam@plone.org",\n+    "groupname": "ploneteam",\n+    "id": "ploneteam",\n     "title": "Plone Team"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@groups/AuthenticatedUsers", \n-    "description": "Automatic Group Provider", \n-    "email": "", \n-    "groupname": "AuthenticatedUsers", \n-    "id": "AuthenticatedUsers", \n+    "@id": "http://localhost:55001/plone/@groups/AuthenticatedUsers",\n+    "description": "Automatic Group Provider",\n+    "email": "",\n+    "groupname": "AuthenticatedUsers",\n+    "id": "AuthenticatedUsers",\n     "title": "Authenticated Users (Virtual Group)"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/groups_delete.resp b/src/plone/restapi/tests/http-examples/groups_delete.resp\nindex 0074ded3..460c2259 100644\n--- a/src/plone/restapi/tests/http-examples/groups_delete.resp\n+++ b/src/plone/restapi/tests/http-examples/groups_delete.resp\n@@ -1,2 +1,3 @@\n HTTP/1.1 204 No Content\n+Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp b/src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp\nindex d4358609..fcdb9e28 100644\n--- a/src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp\n+++ b/src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp\n@@ -3,11 +3,11 @@ Content-Type: application/json\n \n [\n   {\n-    "@id": "http://localhost:55001/plone/@groups/ploneteam", \n-    "description": "We are Plone", \n-    "email": "ploneteam@plone.org", \n-    "groupname": "ploneteam", \n-    "id": "ploneteam", \n+    "@id": "http://localhost:55001/plone/@groups/ploneteam",\n+    "description": "We are Plone",\n+    "email": "ploneteam@plone.org",\n+    "groupname": "ploneteam",\n+    "id": "ploneteam",\n     "title": "Plone Team"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/groups_update.resp b/src/plone/restapi/tests/http-examples/groups_update.resp\nindex 0074ded3..460c2259 100644\n--- a/src/plone/restapi/tests/http-examples/groups_update.resp\n+++ b/src/plone/restapi/tests/http-examples/groups_update.resp\n@@ -1,2 +1,3 @@\n HTTP/1.1 204 No Content\n+Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/history_get.resp b/src/plone/restapi/tests/http-examples/history_get.resp\nindex 0f751f02..79ffc9ea 100644\n--- a/src/plone/restapi/tests/http-examples/history_get.resp\n+++ b/src/plone/restapi/tests/http-examples/history_get.resp\n@@ -3,34 +3,34 @@ Content-Type: application/json\n \n [\n   {\n-    "action": "Create", \n+    "action": "Create",\n     "actor": {\n-      "@id": "http://localhost:55001/plone/@users/test_user_1_", \n-      "fullname": "", \n-      "id": "test_user_1_", \n+      "@id": "http://localhost:55001/plone/@users/test_user_1_",\n+      "fullname": "",\n+      "id": "test_user_1_",\n       "username": "test-user"\n-    }, \n-    "comments": "", \n-    "review_state": "private", \n-    "state_title": "Private", \n-    "time": "2016-10-21T19:00:00", \n-    "transition_title": "Create", \n+    },\n+    "comments": "",\n+    "review_state": "private",\n+    "state_title": "Private",\n+    "time": "2016-10-21T15:00:00",\n+    "transition_title": "Create",\n     "type": "workflow"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/front-page/@history/0", \n-    "action": "Edited", \n+    "@id": "http://localhost:55001/plone/front-page/@history/0",\n+    "action": "Edited",\n     "actor": {\n-      "@id": "http://localhost:55001/plone/@users/test-user", \n-      "fullname": "test-user", \n-      "id": "test-user", \n+      "@id": "http://localhost:55001/plone/@users/test-user",\n+      "fullname": "test-user",\n+      "id": "test-user",\n       "username": null\n-    }, \n-    "comments": null, \n-    "may_revert": true, \n-    "time": "2016-10-21T19:00:00", \n-    "transition_title": "Edited", \n-    "type": "versioning", \n+    },\n+    "comments": null,\n+    "may_revert": true,\n+    "time": "2016-10-21T15:00:00",\n+    "transition_title": "Edited",\n+    "type": "versioning",\n     "version": 0\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/image.resp b/src/plone/restapi/tests/http-examples/image.resp\nindex c2e1a516..0f3c55c0 100644\n--- a/src/plone/restapi/tests/http-examples/image.resp\n+++ b/src/plone/restapi/tests/http-examples/image.resp\n@@ -5,90 +5,90 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/image/@actions"\n-    }, \n+    },\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/image/@breadcrumbs"\n-    }, \n+    },\n     "navigation": {\n       "@id": "http://localhost:55001/plone/image/@navigation"\n-    }, \n+    },\n     "workflow": {\n       "@id": "http://localhost:55001/plone/image/@workflow"\n     }\n-  }, \n-  "@id": "http://localhost:55001/plone/image", \n-  "@type": "Image", \n-  "UID": "SomeUUID000000000000000000000002", \n-  "allow_discussion": false, \n-  "contributors": [], \n-  "created": "2016-01-21T06:14:48+00:00", \n+  },\n+  "@id": "http://localhost:55001/plone/image",\n+  "@type": "Image",\n+  "UID": "SomeUUID000000000000000000000002",\n+  "allow_discussion": false,\n+  "contributors": [],\n+  "created": "2016-01-21T06:14:48+00:00",\n   "creators": [\n     "test_user_1_"\n-  ], \n-  "description": "This is an image", \n-  "effective": null, \n-  "exclude_from_nav": false, \n-  "expires": null, \n-  "id": "image", \n+  ],\n+  "description": "This is an image",\n+  "effective": null,\n+  "exclude_from_nav": false,\n+  "expires": null,\n+  "id": "image",\n   "image": {\n-    "content-type": "image/png", \n-    "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n-    "filename": "image.png", \n-    "height": 56, \n+    "content-type": "image/png",\n+    "download": "http://localhost:55001/plone/image/@@images/uuid1.png",\n+    "filename": "image.png",\n+    "height": 56,\n     "scales": {\n       "icon": {\n-        "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n-        "height": 8, \n+        "download": "http://localhost:55001/plone/image/@@images/uuid1.png",\n+        "height": 8,\n         "width": 32\n-      }, \n+      },\n       "large": {\n-        "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n-        "height": 56, \n+        "download": "http://localhost:55001/plone/image/@@images/uuid1.png",\n+        "height": 56,\n         "width": 215\n-      }, \n+      },\n       "listing": {\n-        "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n-        "height": 4, \n+        "download": "http://localhost:55001/plone/image/@@images/uuid1.png",\n+        "height": 4,\n         "width": 16\n-      }, \n+      },\n       "mini": {\n-        "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n-        "height": 52, \n+        "download": "http://localhost:55001/plone/image/@@images/uuid1.png",\n+        "height": 52,\n         "width": 200\n-      }, \n+      },\n       "preview": {\n-        "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n-        "height": 56, \n+        "download": "http://localhost:55001/plone/image/@@images/uuid1.png",\n+        "height": 56,\n         "width": 215\n-      }, \n+      },\n       "thumb": {\n-        "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n-        "height": 33, \n+        "download": "http://localhost:55001/plone/image/@@images/uuid1.png",\n+        "height": 33,\n         "width": 128\n-      }, \n+      },\n       "tile": {\n-        "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n-        "height": 16, \n+        "download": "http://localhost:55001/plone/image/@@images/uuid1.png",\n+        "height": 16,\n         "width": 64\n       }\n-    }, \n-    "size": 1185, \n+    },\n+    "size": 1185,\n     "width": 215\n-  }, \n-  "is_folderish": false, \n-  "language": "", \n-  "layout": "image_view", \n-  "modified": "2016-01-21T06:24:11+00:00", \n+  },\n+  "is_folderish": false,\n+  "language": "",\n+  "layout": "image_view",\n+  "modified": "2016-01-21T06:24:11+00:00",\n   "parent": {\n-    "@id": "http://localhost:55001/plone", \n-    "@type": "Plone Site", \n-    "description": "", \n+    "@id": "http://localhost:55001/plone",\n+    "@type": "Plone Site",\n+    "description": "",\n     "title": "Plone site"\n-  }, \n-  "relatedItems": [], \n-  "review_state": null, \n-  "rights": "", \n-  "subjects": [], \n-  "title": "My Image", \n+  },\n+  "relatedItems": [],\n+  "review_state": null,\n+  "rights": "",\n+  "subjects": [],\n+  "title": "My Image",\n   "version": "current"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/jwt_logged_in.req b/src/plone/restapi/tests/http-examples/jwt_logged_in.req\nindex c9c7b9d7..95e91fee 100644\n--- a/src/plone/restapi/tests/http-examples/jwt_logged_in.req\n+++ b/src/plone/restapi/tests/http-examples/jwt_logged_in.req\n@@ -1,3 +1,3 @@\n GET /plone/ HTTP/1.1\n Accept: application/json\n-Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmdWxsbmFtZSI6IiIsInN1YiI6ImFkbWluIn0.RVl8ZFJWIaA-8ujyulJvw0j3F3qFjIHDIJFK0GF6j_0\n+Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImZ1bGxuYW1lIjoiIn0.krI8ep0NQHyYYObtXl1ygI4NM2UbHUlZqF7kKnx9JFo\ndiff --git a/src/plone/restapi/tests/http-examples/jwt_logged_in.resp b/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\nindex 8ce3cff3..e6b65de9 100644\n--- a/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\n+++ b/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\n@@ -5,28 +5,28 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/@actions"\n-    }, \n+    },\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/@breadcrumbs"\n-    }, \n+    },\n     "navigation": {\n       "@id": "http://localhost:55001/plone/@navigation"\n     }\n-  }, \n-  "@id": "http://localhost:55001/plone/", \n-  "@type": "Plone Site", \n-  "id": "plone", \n-  "is_folderish": true, \n+  },\n+  "@id": "http://localhost:55001/plone/",\n+  "@type": "Plone Site",\n+  "id": "plone",\n+  "is_folderish": true,\n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone/front-page", \n-      "@type": "Document", \n-      "description": "Congratulations! You have successfully installed Plone.", \n-      "review_state": "private", \n+      "@id": "http://localhost:55001/plone/front-page",\n+      "@type": "Document",\n+      "description": "Congratulations! You have successfully installed Plone.",\n+      "review_state": "private",\n       "title": "Welcome to Plone"\n     }\n-  ], \n-  "items_total": 1, \n-  "parent": {}, \n+  ],\n+  "items_total": 1,\n+  "parent": {},\n   "title": "Plone site"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/jwt_login.resp b/src/plone/restapi/tests/http-examples/jwt_login.resp\nindex fcd1b9a2..f2e57949 100644\n--- a/src/plone/restapi/tests/http-examples/jwt_login.resp\n+++ b/src/plone/restapi/tests/http-examples/jwt_login.resp\n@@ -2,5 +2,5 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmdWxsbmFtZSI6IiIsInN1YiI6ImFkbWluIn0.RVl8ZFJWIaA-8ujyulJvw0j3F3qFjIHDIJFK0GF6j_0"\n+  "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImZ1bGxuYW1lIjoiIn0.krI8ep0NQHyYYObtXl1ygI4NM2UbHUlZqF7kKnx9JFo"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/jwt_login_renew.req b/src/plone/restapi/tests/http-examples/jwt_login_renew.req\nindex e3ea6f7a..1afd58d9 100644\n--- a/src/plone/restapi/tests/http-examples/jwt_login_renew.req\n+++ b/src/plone/restapi/tests/http-examples/jwt_login_renew.req\n@@ -1,3 +1,3 @@\n POST /plone/@login-renew HTTP/1.1\n Accept: application/json\n-Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmdWxsbmFtZSI6IiIsInN1YiI6ImFkbWluIn0.RVl8ZFJWIaA-8ujyulJvw0j3F3qFjIHDIJFK0GF6j_0\n+Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImZ1bGxuYW1lIjoiIn0.krI8ep0NQHyYYObtXl1ygI4NM2UbHUlZqF7kKnx9JFo\ndiff --git a/src/plone/restapi/tests/http-examples/jwt_login_renew.resp b/src/plone/restapi/tests/http-examples/jwt_login_renew.resp\nindex fcd1b9a2..f2e57949 100644\n--- a/src/plone/restapi/tests/http-examples/jwt_login_renew.resp\n+++ b/src/plone/restapi/tests/http-examples/jwt_login_renew.resp\n@@ -2,5 +2,5 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmdWxsbmFtZSI6IiIsInN1YiI6ImFkbWluIn0.RVl8ZFJWIaA-8ujyulJvw0j3F3qFjIHDIJFK0GF6j_0"\n+  "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImZ1bGxuYW1lIjoiIn0.krI8ep0NQHyYYObtXl1ygI4NM2UbHUlZqF7kKnx9JFo"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/jwt_logout.req b/src/plone/restapi/tests/http-examples/jwt_logout.req\nindex 0abc0206..9696c83c 100644\n--- a/src/plone/restapi/tests/http-examples/jwt_logout.req\n+++ b/src/plone/restapi/tests/http-examples/jwt_logout.req\n@@ -1,3 +1,3 @@\n POST /plone/@logout HTTP/1.1\n Accept: application/json\n-Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmdWxsbmFtZSI6IiIsInN1YiI6ImFkbWluIn0.RVl8ZFJWIaA-8ujyulJvw0j3F3qFjIHDIJFK0GF6j_0\n+Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImZ1bGxuYW1lIjoiIn0.krI8ep0NQHyYYObtXl1ygI4NM2UbHUlZqF7kKnx9JFo\ndiff --git a/src/plone/restapi/tests/http-examples/link.resp b/src/plone/restapi/tests/http-examples/link.resp\nindex 0e3e74db..4a26b495 100644\n--- a/src/plone/restapi/tests/http-examples/link.resp\n+++ b/src/plone/restapi/tests/http-examples/link.resp\n@@ -5,47 +5,47 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/link/@actions"\n-    }, \n+    },\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/link/@breadcrumbs"\n-    }, \n+    },\n     "navigation": {\n       "@id": "http://localhost:55001/plone/link/@navigation"\n-    }, \n+    },\n     "workflow": {\n       "@id": "http://localhost:55001/plone/link/@workflow"\n     }\n-  }, \n-  "@id": "http://localhost:55001/plone/link", \n-  "@type": "Link", \n-  "UID": "SomeUUID000000000000000000000002", \n-  "allow_discussion": false, \n-  "changeNote": "", \n-  "contributors": [], \n-  "created": "2016-01-21T04:14:48+00:00", \n+  },\n+  "@id": "http://localhost:55001/plone/link",\n+  "@type": "Link",\n+  "UID": "SomeUUID000000000000000000000002",\n+  "allow_discussion": false,\n+  "changeNote": "",\n+  "contributors": [],\n+  "created": "2016-01-21T04:14:48+00:00",\n   "creators": [\n     "test_user_1_"\n-  ], \n-  "description": "This is a link", \n-  "effective": null, \n-  "exclude_from_nav": false, \n-  "expires": null, \n-  "id": "link", \n-  "is_folderish": false, \n-  "language": "", \n-  "layout": "link_redirect_view", \n-  "modified": "2016-01-21T04:24:11+00:00", \n+  ],\n+  "description": "This is a link",\n+  "effective": null,\n+  "exclude_from_nav": false,\n+  "expires": null,\n+  "id": "link",\n+  "is_folderish": false,\n+  "language": "",\n+  "layout": "link_redirect_view",\n+  "modified": "2016-01-21T04:24:11+00:00",\n   "parent": {\n-    "@id": "http://localhost:55001/plone", \n-    "@type": "Plone Site", \n-    "description": "", \n+    "@id": "http://localhost:55001/plone",\n+    "@type": "Plone Site",\n+    "description": "",\n     "title": "Plone site"\n-  }, \n-  "remoteUrl": null, \n-  "review_state": "private", \n-  "rights": "", \n-  "subjects": [], \n-  "title": "My Link", \n-  "version": "current", \n+  },\n+  "remoteUrl": null,\n+  "review_state": "private",\n+  "rights": "",\n+  "subjects": [],\n+  "title": "My Link",\n+  "version": "current",\n   "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/lock_get.resp b/src/plone/restapi/tests/http-examples/lock_get.resp\nindex 52852385..4622ce69 100644\n--- a/src/plone/restapi/tests/http-examples/lock_get.resp\n+++ b/src/plone/restapi/tests/http-examples/lock_get.resp\n@@ -2,6 +2,6 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "locked": false, \n+  "locked": false,\n   "stealable": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/move.resp b/src/plone/restapi/tests/http-examples/move.resp\nindex e9fdeb80..fab2ae3c 100644\n--- a/src/plone/restapi/tests/http-examples/move.resp\n+++ b/src/plone/restapi/tests/http-examples/move.resp\n@@ -3,7 +3,7 @@ Content-Type: application/json\n \n [\n   {\n-    "source": "http://localhost:55001/plone/front-page", \n+    "source": "http://localhost:55001/plone/front-page",\n     "target": "http://localhost:55001/plone/folder/front-page"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/navigation.resp b/src/plone/restapi/tests/http-examples/navigation.resp\nindex 81f1be2e..99afd5a7 100644\n--- a/src/plone/restapi/tests/http-examples/navigation.resp\n+++ b/src/plone/restapi/tests/http-examples/navigation.resp\n@@ -2,16 +2,16 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/front-page/@navigation", \n+  "@id": "http://localhost:55001/plone/front-page/@navigation",\n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone", \n-      "description": "", \n+      "@id": "http://localhost:55001/plone",\n+      "description": "",\n       "title": "Home"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/front-page", \n-      "description": "Congratulations! You have successfully installed Plone.", \n+      "@id": "http://localhost:55001/plone/front-page",\n+      "description": "Congratulations! You have successfully installed Plone.",\n       "title": "Welcome to Plone"\n     }\n   ]\ndiff --git a/src/plone/restapi/tests/http-examples/navigation_tree.resp b/src/plone/restapi/tests/http-examples/navigation_tree.resp\nindex 67370a3c..46110769 100644\n--- a/src/plone/restapi/tests/http-examples/navigation_tree.resp\n+++ b/src/plone/restapi/tests/http-examples/navigation_tree.resp\n@@ -2,60 +2,60 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/front-page/@navigation", \n+  "@id": "http://localhost:55001/plone/front-page/@navigation",\n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone", \n-      "description": "", \n-      "items": "", \n+      "@id": "http://localhost:55001/plone",\n+      "description": "",\n+      "items": "",\n       "title": "Home"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/front-page", \n-      "description": "Congratulations! You have successfully installed Plone.", \n-      "items": [], \n+      "@id": "http://localhost:55001/plone/front-page",\n+      "description": "Congratulations! You have successfully installed Plone.",\n+      "items": [],\n       "title": "Welcome to Plone"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/folder", \n-      "description": "", \n+      "@id": "http://localhost:55001/plone/folder",\n+      "description": "",\n       "items": [\n         {\n-          "@id": "http://localhost:55001/plone/folder/subfolder1", \n-          "description": "", \n+          "@id": "http://localhost:55001/plone/folder/subfolder1",\n+          "description": "",\n           "items": [\n             {\n-              "@id": "http://localhost:55001/plone/folder/subfolder1/thirdlevelfolder", \n-              "description": "", \n+              "@id": "http://localhost:55001/plone/folder/subfolder1/thirdlevelfolder",\n+              "description": "",\n               "items": [\n                 {\n-                  "@id": "http://localhost:55001/plone/folder/subfolder1/thirdlevelfolder/fourthlevelfolder", \n-                  "description": "", \n+                  "@id": "http://localhost:55001/plone/folder/subfolder1/thirdlevelfolder/fourthlevelfolder",\n+                  "description": "",\n                   "title": "Fourth Level Folder"\n                 }\n-              ], \n+              ],\n               "title": "Third Level Folder"\n             }\n-          ], \n+          ],\n           "title": "SubFolder 1"\n-        }, \n+        },\n         {\n-          "@id": "http://localhost:55001/plone/folder/subfolder2", \n-          "description": "", \n+          "@id": "http://localhost:55001/plone/folder/subfolder2",\n+          "description": "",\n           "title": "SubFolder 2"\n-        }, \n+        },\n         {\n-          "@id": "http://localhost:55001/plone/folder/doc1", \n-          "description": "", \n+          "@id": "http://localhost:55001/plone/folder/doc1",\n+          "description": "",\n           "title": "A document"\n         }\n-      ], \n+      ],\n       "title": "Some Folder"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/folder2", \n-      "description": "", \n-      "items": [], \n+      "@id": "http://localhost:55001/plone/folder2",\n+      "description": "",\n+      "items": [],\n       "title": "Some Folder 2"\n     }\n   ]\ndiff --git a/src/plone/restapi/tests/http-examples/newsitem.resp b/src/plone/restapi/tests/http-examples/newsitem.resp\nindex 235d894f..0dc371b2 100644\n--- a/src/plone/restapi/tests/http-examples/newsitem.resp\n+++ b/src/plone/restapi/tests/http-examples/newsitem.resp\n@@ -5,98 +5,98 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/newsitem/@actions"\n-    }, \n+    },\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/newsitem/@breadcrumbs"\n-    }, \n+    },\n     "navigation": {\n       "@id": "http://localhost:55001/plone/newsitem/@navigation"\n-    }, \n+    },\n     "workflow": {\n       "@id": "http://localhost:55001/plone/newsitem/@workflow"\n     }\n-  }, \n-  "@id": "http://localhost:55001/plone/newsitem", \n-  "@type": "News Item", \n-  "UID": "SomeUUID000000000000000000000002", \n-  "allow_discussion": false, \n-  "changeNote": "", \n-  "contributors": [], \n-  "created": "2016-01-21T02:14:48+00:00", \n+  },\n+  "@id": "http://localhost:55001/plone/newsitem",\n+  "@type": "News Item",\n+  "UID": "SomeUUID000000000000000000000002",\n+  "allow_discussion": false,\n+  "changeNote": "",\n+  "contributors": [],\n+  "created": "2016-01-21T02:14:48+00:00",\n   "creators": [\n     "test_user_1_"\n-  ], \n-  "description": "This is a news item", \n-  "effective": null, \n-  "exclude_from_nav": false, \n-  "expires": null, \n-  "id": "newsitem", \n+  ],\n+  "description": "This is a news item",\n+  "effective": null,\n+  "exclude_from_nav": false,\n+  "expires": null,\n+  "id": "newsitem",\n   "image": {\n-    "content-type": "image/png", \n-    "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n-    "filename": "image.png", \n-    "height": 56, \n+    "content-type": "image/png",\n+    "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png",\n+    "filename": "image.png",\n+    "height": 56,\n     "scales": {\n       "icon": {\n-        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n-        "height": 8, \n+        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png",\n+        "height": 8,\n         "width": 32\n-      }, \n+      },\n       "large": {\n-        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n-        "height": 56, \n+        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png",\n+        "height": 56,\n         "width": 215\n-      }, \n+      },\n       "listing": {\n-        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n-        "height": 4, \n+        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png",\n+        "height": 4,\n         "width": 16\n-      }, \n+      },\n       "mini": {\n-        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n-        "height": 52, \n+        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png",\n+        "height": 52,\n         "width": 200\n-      }, \n+      },\n       "preview": {\n-        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n-        "height": 56, \n+        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png",\n+        "height": 56,\n         "width": 215\n-      }, \n+      },\n       "thumb": {\n-        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n-        "height": 33, \n+        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png",\n+        "height": 33,\n         "width": 128\n-      }, \n+      },\n       "tile": {\n-        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n-        "height": 16, \n+        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png",\n+        "height": 16,\n         "width": 64\n       }\n-    }, \n-    "size": 1185, \n+    },\n+    "size": 1185,\n     "width": 215\n-  }, \n-  "image_caption": "This is an image caption.", \n-  "is_folderish": false, \n-  "language": "", \n-  "layout": "newsitem_view", \n-  "modified": "2016-01-21T02:24:11+00:00", \n+  },\n+  "image_caption": "This is an image caption.",\n+  "is_folderish": false,\n+  "language": "",\n+  "layout": "newsitem_view",\n+  "modified": "2016-01-21T02:24:11+00:00",\n   "parent": {\n-    "@id": "http://localhost:55001/plone", \n-    "@type": "Plone Site", \n-    "description": "", \n+    "@id": "http://localhost:55001/plone",\n+    "@type": "Plone Site",\n+    "description": "",\n     "title": "Plone site"\n-  }, \n-  "relatedItems": [], \n-  "review_state": "private", \n-  "rights": "", \n-  "subjects": [], \n+  },\n+  "relatedItems": [],\n+  "review_state": "private",\n+  "rights": "",\n+  "subjects": [],\n   "text": {\n-    "content-type": "text/plain", \n-    "data": "<p>Lorem ipsum</p>", \n+    "content-type": "text/plain",\n+    "data": "<p>Lorem ipsum</p>",\n     "encoding": "utf-8"\n-  }, \n-  "title": "My News Item", \n-  "version": "current", \n+  },\n+  "title": "My News Item",\n+  "version": "current",\n   "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/principals.resp b/src/plone/restapi/tests/http-examples/principals.resp\nindex 6ca70dbb..327de415 100644\n--- a/src/plone/restapi/tests/http-examples/principals.resp\n+++ b/src/plone/restapi/tests/http-examples/principals.resp\n@@ -4,13 +4,13 @@ Content-Type: application/json\n {\n   "groups": [\n     {\n-      "@id": "http://localhost:55001/plone/@groups/ploneteam", \n-      "description": "We are Plone", \n-      "email": "ploneteam@plone.org", \n-      "groupname": "ploneteam", \n-      "id": "ploneteam", \n+      "@id": "http://localhost:55001/plone/@groups/ploneteam",\n+      "description": "We are Plone",\n+      "email": "ploneteam@plone.org",\n+      "groupname": "ploneteam",\n+      "id": "ploneteam",\n       "title": "Plone Team"\n     }\n-  ], \n+  ],\n   "users": []\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/registry_get_list.resp b/src/plone/restapi/tests/http-examples/registry_get_list.resp\nindex 8d4e7af9..5a7cd103 100644\n--- a/src/plone/restapi/tests/http-examples/registry_get_list.resp\n+++ b/src/plone/restapi/tests/http-examples/registry_get_list.resp\n@@ -2,498 +2,498 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/@registry", \n+  "@id": "http://localhost:55001/plone/@registry",\n   "batching": {\n-    "@id": "http://localhost:55001/plone/@registry", \n-    "first": "http://localhost:55001/plone/@registry?b_start=0", \n-    "last": "http://localhost:55001/plone/@registry?b_start=1525", \n+    "@id": "http://localhost:55001/plone/@registry",\n+    "first": "http://localhost:55001/plone/@registry?b_start=0",\n+    "last": "http://localhost:55001/plone/@registry?b_start=1675",\n     "next": "http://localhost:55001/plone/@registry?b_start=25"\n-  }, \n+  },\n   "items": [\n     {\n-      "name": "Products.CMFPlone.i18nl10n.override_dateformat.Enabled", \n+      "name": "Products.CMFPlone.i18nl10n.override_dateformat.Enabled",\n       "schema": {\n         "properties": {\n-          "description": "Override the translation machinery", \n-          "title": "Enabled", \n+          "description": "Override the translation machinery",\n+          "title": "Enabled",\n           "type": "boolean"\n         }\n-      }, \n+      },\n       "value": false\n-    }, \n+    },\n     {\n-      "name": "Products.CMFPlone.i18nl10n.override_dateformat.date_format_long", \n+      "name": "Products.CMFPlone.i18nl10n.override_dateformat.date_format_long",\n       "schema": {\n         "properties": {\n-          "description": "Default value: %Y-%m-%d %H:%M (2038-01-19 03:14)", \n-          "title": "old ZMI property: localLongTimeFormat", \n+          "description": "Default value: %Y-%m-%d %H:%M (2038-01-19 03:14)",\n+          "title": "old ZMI property: localLongTimeFormat",\n           "type": "string"\n         }\n-      }, \n+      },\n       "value": "%Y-%m-%d %H:%M"\n-    }, \n+    },\n     {\n-      "name": "Products.CMFPlone.i18nl10n.override_dateformat.date_format_short", \n+      "name": "Products.CMFPlone.i18nl10n.override_dateformat.date_format_short",\n       "schema": {\n         "properties": {\n-          "description": "Default value: %Y-%m-%d (2038-01-19)", \n-          "title": "old ZMI property: localTimeFormat", \n+          "description": "Default value: %Y-%m-%d (2038-01-19)",\n+          "title": "old ZMI property: localTimeFormat",\n           "type": "string"\n         }\n-      }, \n+      },\n       "value": "%Y-%m-%d"\n-    }, \n+    },\n     {\n-      "name": "Products.CMFPlone.i18nl10n.override_dateformat.time_format", \n+      "name": "Products.CMFPlone.i18nl10n.override_dateformat.time_format",\n       "schema": {\n         "properties": {\n-          "description": "Default value: %H:%M (03:14)", \n-          "title": "old ZMI property: localTimeOnlyFormat", \n+          "description": "Default value: %H:%M (03:14)",\n+          "title": "old ZMI property: localTimeOnlyFormat",\n           "type": "string"\n         }\n-      }, \n+      },\n       "value": "%H:%M"\n-    }, \n+    },\n     {\n-      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.allowed", \n+      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.allowed",\n       "schema": {\n         "properties": {\n-          "default": true, \n-          "description": "Allow syndication for collections and folders on site.", \n-          "title": "Allowed", \n+          "default": true,\n+          "description": "Allow syndication for collections and folders on site.",\n+          "title": "Allowed",\n           "type": "boolean"\n         }\n-      }, \n+      },\n       "value": true\n-    }, \n+    },\n     {\n-      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.allowed_feed_types", \n+      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.allowed_feed_types",\n       "schema": {\n         "properties": {\n-          "additionalItems": true, \n+          "additionalItems": true,\n           "default": [\n-            "RSS|RSS 1.0", \n-            "rss.xml|RSS 2.0", \n-            "atom.xml|Atom", \n+            "RSS|RSS 1.0",\n+            "rss.xml|RSS 2.0",\n+            "atom.xml|Atom",\n             "itunes.xml|iTunes"\n-          ], \n-          "description": "Separate view name and title by \'|\'", \n+          ],\n+          "description": "Separate view name and title by \'|\'",\n           "items": {\n-            "description": "", \n-            "title": "", \n+            "description": "",\n+            "title": "",\n             "type": "string"\n-          }, \n-          "title": "Allowed Feed Types", \n-          "type": "array", \n+          },\n+          "title": "Allowed Feed Types",\n+          "type": "array",\n           "uniqueItems": true\n         }\n-      }, \n+      },\n       "value": [\n-        "RSS|RSS 1.0", \n-        "rss.xml|RSS 2.0", \n-        "atom.xml|Atom", \n+        "RSS|RSS 1.0",\n+        "rss.xml|RSS 2.0",\n+        "atom.xml|Atom",\n         "itunes.xml|iTunes"\n       ]\n-    }, \n+    },\n     {\n-      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.default_enabled", \n+      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.default_enabled",\n       "schema": {\n         "properties": {\n-          "default": false, \n-          "description": "If syndication should be enabled by default for all folders and collections.", \n-          "title": "Enabled by default", \n+          "default": false,\n+          "description": "If syndication should be enabled by default for all folders and collections.",\n+          "title": "Enabled by default",\n           "type": "boolean"\n         }\n-      }, \n+      },\n       "value": false\n-    }, \n+    },\n     {\n-      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.max_items", \n+      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.max_items",\n       "schema": {\n         "properties": {\n-          "default": 15, \n-          "description": "Maximum number of items that will be syndicated.", \n-          "minimum": 1, \n-          "title": "Maximum items", \n+          "default": 15,\n+          "description": "Maximum number of items that will be syndicated.",\n+          "minimum": 1,\n+          "title": "Maximum items",\n           "type": "integer"\n         }\n-      }, \n+      },\n       "value": 15\n-    }, \n+    },\n     {\n-      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.render_body", \n+      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.render_body",\n       "schema": {\n         "properties": {\n-          "default": false, \n-          "description": "If body text available for item, render it, otherwise use description.", \n-          "title": "Render Body", \n+          "default": false,\n+          "description": "If body text available for item, render it, otherwise use description.",\n+          "title": "Render Body",\n           "type": "boolean"\n         }\n-      }, \n+      },\n       "value": false\n-    }, \n+    },\n     {\n-      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.search_rss_enabled", \n+      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.search_rss_enabled",\n       "schema": {\n         "properties": {\n-          "default": true, \n-          "description": "Allows users to subscribe to feeds of search results", \n-          "title": "Search RSS enabled", \n+          "default": true,\n+          "description": "Allows users to subscribe to feeds of search results",\n+          "title": "Search RSS enabled",\n           "type": "boolean"\n         }\n-      }, \n+      },\n       "value": true\n-    }, \n+    },\n     {\n-      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.show_author_info", \n+      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.show_author_info",\n       "schema": {\n         "properties": {\n-          "default": true, \n-          "description": "Should feeds include author information", \n-          "title": "Show author info", \n+          "default": true,\n+          "description": "Should feeds include author information",\n+          "title": "Show author info",\n           "type": "boolean"\n         }\n-      }, \n+      },\n       "value": true\n-    }, \n+    },\n     {\n-      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.show_syndication_button", \n+      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.show_syndication_button",\n       "schema": {\n         "properties": {\n-          "description": "Makes it possible to customize syndication settings for particular folders and collections ", \n-          "title": "Show settings button", \n+          "description": "Makes it possible to customize syndication settings for particular folders and collections ",\n+          "title": "Show settings button",\n           "type": "boolean"\n         }\n-      }, \n+      },\n       "value": null\n-    }, \n+    },\n     {\n-      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.show_syndication_link", \n+      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.show_syndication_link",\n       "schema": {\n         "properties": {\n-          "description": "Enable RSS link document action on the syndication content item.", \n-          "title": "Show feed link", \n+          "description": "Enable RSS link document action on the syndication content item.",\n+          "title": "Show feed link",\n           "type": "boolean"\n         }\n-      }, \n+      },\n       "value": null\n-    }, \n+    },\n     {\n-      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.site_rss_items", \n+      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.site_rss_items",\n       "schema": {\n         "properties": {\n-          "additionalItems": true, \n+          "additionalItems": true,\n           "default": [\n             "/news/aggregator"\n-          ], \n-          "description": "Paths to folders and collections to link to at the portal root.", \n+          ],\n+          "description": "Paths to folders and collections to link to at the portal root.",\n           "items": {\n-            "choices": [], \n-            "description": "", \n-            "enum": [], \n-            "enumNames": [], \n-            "title": "", \n+            "choices": [],\n+            "description": "",\n+            "enum": [],\n+            "enumNames": [],\n+            "title": "",\n             "type": "string"\n-          }, \n-          "title": "Site RSS", \n-          "type": "array", \n+          },\n+          "title": "Site RSS",\n+          "type": "array",\n           "uniqueItems": true\n         }\n-      }, \n+      },\n       "value": [\n         "/news/aggregator"\n       ]\n-    }, \n+    },\n     {\n-      "name": "Products.ResourceRegistries.interfaces.settings.IResourceRegistriesSettings.resourceBundlesForThemes", \n+      "name": "Products.ResourceRegistries.interfaces.settings.IResourceRegistriesSettings.resourceBundlesForThemes",\n       "schema": {\n         "properties": {\n-          "description": "Maps skin names to lists of resource bundle names", \n+          "description": "Maps skin names to lists of resource bundle names",\n           "key_type": {\n-            "additional": {}, \n+            "additional": {},\n             "schema": {\n-              "description": "", \n-              "title": "", \n+              "description": "",\n+              "title": "",\n               "type": "string"\n             }\n-          }, \n-          "title": "Resource bundles for themes", \n-          "type": "dict", \n+          },\n+          "title": "Resource bundles for themes",\n+          "type": "dict",\n           "value_type": {\n-            "additional": {}, \n+            "additional": {},\n             "schema": {\n-              "description": "", \n-              "title": "", \n+              "description": "",\n+              "title": "",\n               "type": "string"\n             }\n           }\n         }\n-      }, \n+      },\n       "value": {\n         "(default)": [\n-          "jquery", \n+          "jquery",\n           "default"\n         ]\n       }\n-    }, \n+    },\n     {\n-      "name": "plone.alignment_styles", \n+      "name": "plone.alignment_styles",\n       "schema": {\n         "properties": {\n-          "additionalItems": true, \n+          "additionalItems": true,\n           "default": [\n-            "Left|alignleft|alignleft", \n-            "Center|aligncenter|aligncenter", \n-            "Right|alignright|alignright", \n+            "Left|alignleft|alignleft",\n+            "Center|aligncenter|aligncenter",\n+            "Right|alignright|alignright",\n             "Justify|alignjustify|alignjustify"\n-          ], \n-          "description": "Name|format|icon", \n+          ],\n+          "description": "Name|format|icon",\n           "items": {\n-            "description": "", \n-            "title": "", \n+            "description": "",\n+            "title": "",\n             "type": "string"\n-          }, \n-          "title": "Alignment styles", \n-          "type": "array", \n+          },\n+          "title": "Alignment styles",\n+          "type": "array",\n           "uniqueItems": false\n         }\n-      }, \n+      },\n       "value": [\n-        "Left|alignleft|alignleft", \n-        "Center|aligncenter|aligncenter", \n-        "Right|alignright|alignright", \n+        "Left|alignleft|alignleft",\n+        "Center|aligncenter|aligncenter",\n+        "Right|alignright|alignright",\n         "Justify|alignjustify|alignjustify"\n       ]\n-    }, \n+    },\n     {\n-      "name": "plone.allow_anon_views_about", \n+      "name": "plone.allow_anon_views_about",\n       "schema": {\n         "properties": {\n-          "default": false, \n-          "description": "If not selected only logged-in users will be able to view information about who created an item and when it was modified.", \n-          "title": "Allow anyone to view \'about\' information", \n+          "default": false,\n+          "description": "If not selected only logged-in users will be able to view information about who created an item and when it was modified.",\n+          "title": "Allow anyone to view \'about\' information",\n           "type": "boolean"\n         }\n-      }, \n+      },\n       "value": false\n-    }, \n+    },\n     {\n-      "name": "plone.allow_external_login_sites", \n+      "name": "plone.allow_external_login_sites",\n       "schema": {\n         "properties": {\n-          "additionalItems": true, \n-          "default": [], \n-          "description": "", \n+          "additionalItems": true,\n+          "default": [],\n+          "description": "",\n           "items": {\n-            "description": "", \n-            "title": "", \n+            "description": "",\n+            "title": "",\n             "type": "string"\n-          }, \n-          "title": "Allow external login sites", \n-          "type": "array", \n+          },\n+          "title": "Allow external login sites",\n+          "type": "array",\n           "uniqueItems": true\n         }\n-      }, \n+      },\n       "value": []\n-    }, \n+    },\n     {\n-      "name": "plone.allowed_sizes", \n+      "name": "plone.allowed_sizes",\n       "schema": {\n         "properties": {\n-          "additionalItems": true, \n+          "additionalItems": true,\n           "default": [\n-            "large 768:768", \n-            "preview 400:400", \n-            "mini 200:200", \n-            "thumb 128:128", \n-            "tile 64:64", \n-            "icon 32:32", \n+            "large 768:768",\n+            "preview 400:400",\n+            "mini 200:200",\n+            "thumb 128:128",\n+            "tile 64:64",\n+            "icon 32:32",\n             "listing 16:16"\n-          ], \n-          "description": "Specify all allowed maximum image dimensions, one per line. The required format is &lt;name&gt; &lt;width&gt;:&lt;height&gt;.", \n+          ],\n+          "description": "Specify all allowed maximum image dimensions, one per line. The required format is &lt;name&gt; &lt;width&gt;:&lt;height&gt;.",\n           "items": {\n-            "description": "", \n-            "title": "", \n+            "description": "",\n+            "title": "",\n             "type": "string"\n-          }, \n-          "title": "Allowed image sizes", \n-          "type": "array", \n+          },\n+          "title": "Allowed image sizes",\n+          "type": "array",\n           "uniqueItems": false\n         }\n-      }, \n+      },\n       "value": [\n-        "large 768:768", \n-        "preview 400:400", \n-        "mini 200:200", \n-        "thumb 128:128", \n-        "tile 64:64", \n-        "icon 32:32", \n+        "large 768:768",\n+        "preview 400:400",\n+        "mini 200:200",\n+        "thumb 128:128",\n+        "tile 64:64",\n+        "icon 32:32",\n         "listing 16:16"\n       ]\n-    }, \n+    },\n     {\n-      "name": "plone.allowed_types", \n+      "name": "plone.allowed_types",\n       "schema": {\n         "properties": {\n-          "additionalItems": true, \n+          "additionalItems": true,\n           "default": [\n-            "text/html", \n+            "text/html",\n             "text/x-web-textile"\n-          ], \n-          "description": "Select which formats are available for users as alternative to the default format. Note that if new formats are installed, they will be enabled for text fields by default unless explicitly turned off here or by the relevant installer.", \n+          ],\n+          "description": "Select which formats are available for users as alternative to the default format. Note that if new formats are installed, they will be enabled for text fields by default unless explicitly turned off here or by the relevant installer.",\n           "items": {\n             "choices": [\n               [\n-                "text/html", \n+                "text/html",\n                 "text/html"\n-              ], \n+              ],\n               [\n-                "text/plain", \n+                "text/plain",\n                 "text/plain"\n-              ], \n+              ],\n               [\n-                "text/plain-pre", \n+                "text/plain-pre",\n                 "text/plain-pre"\n-              ], \n+              ],\n               [\n-                "text/restructured", \n+                "text/restructured",\n                 "text/restructured"\n-              ], \n+              ],\n               [\n-                "text/structured", \n+                "text/structured",\n                 "text/structured"\n-              ], \n+              ],\n               [\n-                "text/x-python", \n+                "text/x-python",\n                 "text/x-python"\n-              ], \n+              ],\n               [\n-                "text/x-rst", \n+                "text/x-rst",\n                 "text/x-rst"\n-              ], \n+              ],\n               [\n-                "text/x-web-intelligent", \n+                "text/x-web-intelligent",\n                 "text/x-web-intelligent"\n-              ], \n+              ],\n               [\n-                "text/x-web-markdown", \n+                "text/x-web-markdown",\n                 "text/x-web-markdown"\n-              ], \n+              ],\n               [\n-                "text/x-web-textile", \n+                "text/x-web-textile",\n                 "text/x-web-textile"\n               ]\n-            ], \n-            "description": "", \n+            ],\n+            "description": "",\n             "enum": [\n-              "text/html", \n-              "text/plain", \n-              "text/plain-pre", \n-              "text/restructured", \n-              "text/structured", \n-              "text/x-python", \n-              "text/x-rst", \n-              "text/x-web-intelligent", \n-              "text/x-web-markdown", \n+              "text/html",\n+              "text/plain",\n+              "text/plain-pre",\n+              "text/restructured",\n+              "text/structured",\n+              "text/x-python",\n+              "text/x-rst",\n+              "text/x-web-intelligent",\n+              "text/x-web-markdown",\n               "text/x-web-textile"\n-            ], \n+            ],\n             "enumNames": [\n-              "text/html", \n-              "text/plain", \n-              "text/plain-pre", \n-              "text/restructured", \n-              "text/structured", \n-              "text/x-python", \n-              "text/x-rst", \n-              "text/x-web-intelligent", \n-              "text/x-web-markdown", \n+              "text/html",\n+              "text/plain",\n+              "text/plain-pre",\n+              "text/restructured",\n+              "text/structured",\n+              "text/x-python",\n+              "text/x-rst",\n+              "text/x-web-intelligent",\n+              "text/x-web-markdown",\n               "text/x-web-textile"\n-            ], \n-            "title": "", \n+            ],\n+            "title": "",\n             "type": "string"\n-          }, \n-          "title": "Alternative formats", \n-          "type": "array", \n+          },\n+          "title": "Alternative formats",\n+          "type": "array",\n           "uniqueItems": true\n         }\n-      }, \n+      },\n       "value": [\n-        "text/html", \n+        "text/html",\n         "text/x-web-textile"\n       ]\n-    }, \n+    },\n     {\n-      "name": "plone.always_show_selector", \n+      "name": "plone.always_show_selector",\n       "schema": {\n         "properties": {\n-          "default": false, \n-          "description": "", \n-          "title": "Always show language selector", \n+          "default": false,\n+          "description": "",\n+          "title": "Always show language selector",\n           "type": "boolean"\n         }\n-      }, \n+      },\n       "value": false\n-    }, \n+    },\n     {\n-      "name": "plone.app.discussion.interfaces.IDiscussionSettings.anonymous_comments", \n+      "name": "plone.app.discussion.interfaces.IDiscussionSettings.anonymous_comments",\n       "schema": {\n         "properties": {\n-          "default": false, \n-          "description": "If selected, anonymous users are able to post comments without logging in. It is highly recommended to use a captcha solution to prevent spam if this setting is enabled.", \n-          "title": "Enable anonymous comments", \n+          "default": false,\n+          "description": "If selected, anonymous users are able to post comments without logging in. It is highly recommended to use a captcha solution to prevent spam if this setting is enabled.",\n+          "title": "Enable anonymous comments",\n           "type": "boolean"\n         }\n-      }, \n+      },\n       "value": false\n-    }, \n+    },\n     {\n-      "name": "plone.app.discussion.interfaces.IDiscussionSettings.anonymous_email_enabled", \n+      "name": "plone.app.discussion.interfaces.IDiscussionSettings.anonymous_email_enabled",\n       "schema": {\n         "properties": {\n-          "default": false, \n-          "description": "If selected, anonymous user will have to give their email.", \n-          "title": "Enable anonymous email field", \n+          "default": false,\n+          "description": "If selected, anonymous user will have to give their email.",\n+          "title": "Enable anonymous email field",\n           "type": "boolean"\n         }\n-      }, \n+      },\n       "value": false\n-    }, \n+    },\n     {\n-      "name": "plone.app.discussion.interfaces.IDiscussionSettings.captcha", \n+      "name": "plone.app.discussion.interfaces.IDiscussionSettings.captcha",\n       "schema": {\n         "properties": {\n           "choices": [\n             [\n-              "disabled", \n+              "disabled",\n               "Disabled"\n             ]\n-          ], \n-          "default": "disabled", \n-          "description": "Use this setting to enable or disable Captcha validation for comments. Install plone.formwidget.captcha, plone.formwidget.recaptcha, collective.akismet, or collective.z3cform.norobots if there are no options available.", \n+          ],\n+          "default": "disabled",\n+          "description": "Use this setting to enable or disable Captcha validation for comments. Install plone.formwidget.captcha, plone.formwidget.recaptcha, collective.akismet, or collective.z3cform.norobots if there are no options available.",\n           "enum": [\n             "disabled"\n-          ], \n+          ],\n           "enumNames": [\n             "Disabled"\n-          ], \n-          "title": "Captcha", \n+          ],\n+          "title": "Captcha",\n           "type": "string"\n         }\n-      }, \n+      },\n       "value": "disabled"\n-    }, \n+    },\n     {\n-      "name": "plone.app.discussion.interfaces.IDiscussionSettings.delete_own_comment_enabled", \n+      "name": "plone.app.discussion.interfaces.IDiscussionSettings.delete_own_comment_enabled",\n       "schema": {\n         "properties": {\n-          "default": false, \n-          "description": "If selected, supports deleting of own comments for users with the \\"Delete own comments\\" permission.", \n-          "title": "Enable deleting own comments", \n+          "default": false,\n+          "description": "If selected, supports deleting of own comments for users with the \\"Delete own comments\\" permission.",\n+          "title": "Enable deleting own comments",\n           "type": "boolean"\n         }\n-      }, \n+      },\n       "value": false\n     }\n-  ], \n-  "items_total": 1547\n+  ],\n+  "items_total": 1680\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/registry_update.resp b/src/plone/restapi/tests/http-examples/registry_update.resp\nindex 0074ded3..460c2259 100644\n--- a/src/plone/restapi/tests/http-examples/registry_update.resp\n+++ b/src/plone/restapi/tests/http-examples/registry_update.resp\n@@ -1,2 +1,3 @@\n HTTP/1.1 204 No Content\n+Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/roles.resp b/src/plone/restapi/tests/http-examples/roles.resp\nindex c75a122b..a52ec245 100644\n--- a/src/plone/restapi/tests/http-examples/roles.resp\n+++ b/src/plone/restapi/tests/http-examples/roles.resp\n@@ -3,45 +3,45 @@ Content-Type: application/json\n \n [\n   {\n-    "@id": "http://localhost:55001/plone/@roles/Contributor", \n-    "@type": "role", \n-    "id": "Contributor", \n+    "@id": "http://localhost:55001/plone/@roles/Contributor",\n+    "@type": "role",\n+    "id": "Contributor",\n     "title": "Contributor"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@roles/Editor", \n-    "@type": "role", \n-    "id": "Editor", \n-    "title": "Editor"\n-  }, \n-  {\n-    "@id": "http://localhost:55001/plone/@roles/Member", \n-    "@type": "role", \n-    "id": "Member", \n+    "@id": "http://localhost:55001/plone/@roles/Member",\n+    "@type": "role",\n+    "id": "Member",\n     "title": "Member"\n-  }, \n+  },\n+  {\n+    "@id": "http://localhost:55001/plone/@roles/Site Administrator",\n+    "@type": "role",\n+    "id": "Site Administrator",\n+    "title": "Site Administrator"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@roles/Reader", \n-    "@type": "role", \n-    "id": "Reader", \n+    "@id": "http://localhost:55001/plone/@roles/Reader",\n+    "@type": "role",\n+    "id": "Reader",\n     "title": "Reader"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@roles/Reviewer", \n-    "@type": "role", \n-    "id": "Reviewer", \n-    "title": "Reviewer"\n-  }, \n+    "@id": "http://localhost:55001/plone/@roles/Editor",\n+    "@type": "role",\n+    "id": "Editor",\n+    "title": "Editor"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@roles/Site Administrator", \n-    "@type": "role", \n-    "id": "Site Administrator", \n-    "title": "Site Administrator"\n-  }, \n+    "@id": "http://localhost:55001/plone/@roles/Reviewer",\n+    "@type": "role",\n+    "id": "Reviewer",\n+    "title": "Reviewer"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@roles/Manager", \n-    "@type": "role", \n-    "id": "Manager", \n+    "@id": "http://localhost:55001/plone/@roles/Manager",\n+    "@type": "role",\n+    "id": "Manager",\n     "title": "Manager"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/search.resp b/src/plone/restapi/tests/http-examples/search.resp\nindex fbc626a2..ff2c43c0 100644\n--- a/src/plone/restapi/tests/http-examples/search.resp\n+++ b/src/plone/restapi/tests/http-examples/search.resp\n@@ -2,15 +2,15 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/@search", \n+  "@id": "http://localhost:55001/plone/@search",\n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone/front-page", \n-      "@type": "Document", \n-      "description": "Congratulations! You have successfully installed Plone.", \n-      "review_state": "private", \n+      "@id": "http://localhost:55001/plone/front-page",\n+      "@type": "Document",\n+      "description": "Congratulations! You have successfully installed Plone.",\n+      "review_state": "private",\n       "title": "Welcome to Plone"\n     }\n-  ], \n+  ],\n   "items_total": 1\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/sharing_folder_get.resp b/src/plone/restapi/tests/http-examples/sharing_folder_get.resp\nindex 9df40be7..08518349 100644\n--- a/src/plone/restapi/tests/http-examples/sharing_folder_get.resp\n+++ b/src/plone/restapi/tests/http-examples/sharing_folder_get.resp\n@@ -4,36 +4,36 @@ Content-Type: application/json\n {\n   "available_roles": [\n     {\n-      "id": "Contributor", \n+      "id": "Contributor",\n       "title": "Can add"\n-    }, \n+    },\n     {\n-      "id": "Editor", \n+      "id": "Editor",\n       "title": "Can edit"\n-    }, \n+    },\n     {\n-      "id": "Reader", \n+      "id": "Reader",\n       "title": "Can view"\n-    }, \n+    },\n     {\n-      "id": "Reviewer", \n+      "id": "Reviewer",\n       "title": "Can review"\n     }\n-  ], \n+  ],\n   "entries": [\n     {\n-      "disabled": false, \n-      "id": "AuthenticatedUsers", \n-      "login": null, \n+      "disabled": false,\n+      "id": "AuthenticatedUsers",\n+      "login": null,\n       "roles": {\n-        "Contributor": false, \n-        "Editor": false, \n-        "Reader": false, \n+        "Contributor": false,\n+        "Editor": false,\n+        "Reader": false,\n         "Reviewer": false\n-      }, \n-      "title": "Logged-in users", \n+      },\n+      "title": "Logged-in users",\n       "type": "group"\n     }\n-  ], \n+  ],\n   "inherit": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/sharing_folder_post.resp b/src/plone/restapi/tests/http-examples/sharing_folder_post.resp\nindex 0074ded3..460c2259 100644\n--- a/src/plone/restapi/tests/http-examples/sharing_folder_post.resp\n+++ b/src/plone/restapi/tests/http-examples/sharing_folder_post.resp\n@@ -1,2 +1,3 @@\n HTTP/1.1 204 No Content\n+Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/sharing_search.resp b/src/plone/restapi/tests/http-examples/sharing_search.resp\nindex c489ff69..5a5c2786 100644\n--- a/src/plone/restapi/tests/http-examples/sharing_search.resp\n+++ b/src/plone/restapi/tests/http-examples/sharing_search.resp\n@@ -4,72 +4,72 @@ Content-Type: application/json\n {\n   "available_roles": [\n     {\n-      "id": "Contributor", \n+      "id": "Contributor",\n       "title": "Can add"\n-    }, \n+    },\n     {\n-      "id": "Editor", \n+      "id": "Editor",\n       "title": "Can edit"\n-    }, \n+    },\n     {\n-      "id": "Reader", \n+      "id": "Reader",\n       "title": "Can view"\n-    }, \n+    },\n     {\n-      "id": "Reviewer", \n+      "id": "Reviewer",\n       "title": "Can review"\n     }\n-  ], \n+  ],\n   "entries": [\n     {\n-      "id": "Administrators", \n-      "login": null, \n+      "id": "Administrators",\n+      "login": null,\n       "roles": {\n-        "Contributor": false, \n-        "Editor": false, \n-        "Reader": false, \n+        "Contributor": false,\n+        "Editor": false,\n+        "Reader": false,\n         "Reviewer": false\n-      }, \n-      "title": "Administrators", \n+      },\n+      "title": "Administrators",\n       "type": "group"\n-    }, \n+    },\n     {\n-      "disabled": false, \n-      "id": "AuthenticatedUsers", \n-      "login": null, \n+      "disabled": false,\n+      "id": "AuthenticatedUsers",\n+      "login": null,\n       "roles": {\n-        "Contributor": false, \n-        "Editor": false, \n-        "Reader": false, \n+        "Contributor": false,\n+        "Editor": false,\n+        "Reader": false,\n         "Reviewer": false\n-      }, \n-      "title": "Logged-in users", \n+      },\n+      "title": "Logged-in users",\n       "type": "group"\n-    }, \n+    },\n     {\n-      "id": "Site Administrators", \n-      "login": null, \n+      "id": "Site Administrators",\n+      "login": null,\n       "roles": {\n-        "Contributor": false, \n-        "Editor": false, \n-        "Reader": false, \n+        "Contributor": false,\n+        "Editor": false,\n+        "Reader": false,\n         "Reviewer": false\n-      }, \n-      "title": "Site Administrators", \n+      },\n+      "title": "Site Administrators",\n       "type": "group"\n-    }, \n+    },\n     {\n-      "disabled": true, \n-      "id": "admin", \n+      "disabled": true,\n+      "id": "admin",\n       "roles": {\n-        "Contributor": "global", \n-        "Editor": "acquired", \n-        "Reader": false, \n+        "Contributor": "global",\n+        "Editor": "acquired",\n+        "Reader": false,\n         "Reviewer": false\n-      }, \n-      "title": "admin", \n+      },\n+      "title": "admin",\n       "type": "user"\n     }\n-  ], \n+  ],\n   "inherit": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/siteroot.resp b/src/plone/restapi/tests/http-examples/siteroot.resp\nindex 0b2f0231..488718b0 100644\n--- a/src/plone/restapi/tests/http-examples/siteroot.resp\n+++ b/src/plone/restapi/tests/http-examples/siteroot.resp\n@@ -5,28 +5,28 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/@actions"\n-    }, \n+    },\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/@breadcrumbs"\n-    }, \n+    },\n     "navigation": {\n       "@id": "http://localhost:55001/plone/@navigation"\n     }\n-  }, \n-  "@id": "http://localhost:55001/plone", \n-  "@type": "Plone Site", \n-  "id": "plone", \n-  "is_folderish": true, \n+  },\n+  "@id": "http://localhost:55001/plone",\n+  "@type": "Plone Site",\n+  "id": "plone",\n+  "is_folderish": true,\n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone/front-page", \n-      "@type": "Document", \n-      "description": "Congratulations! You have successfully installed Plone.", \n-      "review_state": "private", \n+      "@id": "http://localhost:55001/plone/front-page",\n+      "@type": "Document",\n+      "description": "Congratulations! You have successfully installed Plone.",\n+      "review_state": "private",\n       "title": "Welcome to Plone"\n     }\n-  ], \n-  "items_total": 1, \n-  "parent": {}, \n+  ],\n+  "items_total": 1,\n+  "parent": {},\n   "title": "Plone site"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_object_history.resp b/src/plone/restapi/tests/http-examples/translated_messages_object_history.resp\nindex 9b932398..53a849ec 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_object_history.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_object_history.resp\n@@ -3,34 +3,34 @@ Content-Type: application/json\n \n [\n   {\n-    "action": "Crear", \n+    "action": "Crear",\n     "actor": {\n-      "@id": "http://localhost:55001/plone/@users/test_user_1_", \n-      "fullname": "", \n-      "id": "test_user_1_", \n+      "@id": "http://localhost:55001/plone/@users/test_user_1_",\n+      "fullname": "",\n+      "id": "test_user_1_",\n       "username": "test-user"\n-    }, \n-    "comments": "", \n-    "review_state": "private", \n-    "state_title": "Privado", \n-    "time": "2016-10-21T19:00:00", \n-    "transition_title": "Crear", \n+    },\n+    "comments": "",\n+    "review_state": "private",\n+    "state_title": "Privado",\n+    "time": "2016-10-21T15:00:00",\n+    "transition_title": "Crear",\n     "type": "workflow"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/front-page/@history/0", \n-    "action": "Editado", \n+    "@id": "http://localhost:55001/plone/front-page/@history/0",\n+    "action": "Editado",\n     "actor": {\n-      "@id": "http://localhost:55001/plone/@users/test-user", \n-      "fullname": "test-user", \n-      "id": "test-user", \n+      "@id": "http://localhost:55001/plone/@users/test-user",\n+      "fullname": "test-user",\n+      "id": "test-user",\n       "username": null\n-    }, \n-    "comments": null, \n-    "may_revert": true, \n-    "time": "2016-10-21T19:00:00", \n-    "transition_title": "Editado", \n-    "type": "versioning", \n+    },\n+    "comments": null,\n+    "may_revert": true,\n+    "time": "2016-10-21T15:00:00",\n+    "transition_title": "Editado",\n+    "type": "versioning",\n     "version": 0\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_types.resp b/src/plone/restapi/tests/http-examples/translated_messages_types.resp\nindex 0510b9af..f4ce1f47 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_types.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_types.resp\n@@ -3,48 +3,48 @@ Content-Type: application/json\n \n [\n   {\n-    "@id": "http://localhost:55001/plone/@types/File", \n-    "addable": true, \n+    "@id": "http://localhost:55001/plone/@types/File",\n+    "addable": true,\n     "title": "Archivo"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@types/Folder", \n-    "addable": true, \n+    "@id": "http://localhost:55001/plone/@types/Folder",\n+    "addable": true,\n     "title": "Carpeta"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@types/Collection", \n-    "addable": true, \n+    "@id": "http://localhost:55001/plone/@types/Collection",\n+    "addable": true,\n     "title": "Colecci\\u00f3n"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@types/DXTestDocument", \n-    "addable": true, \n+    "@id": "http://localhost:55001/plone/@types/DXTestDocument",\n+    "addable": true,\n     "title": "DX Test Document"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@types/Link", \n-    "addable": true, \n+    "@id": "http://localhost:55001/plone/@types/Link",\n+    "addable": true,\n     "title": "Enlace"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@types/Event", \n-    "addable": true, \n+    "@id": "http://localhost:55001/plone/@types/Event",\n+    "addable": true,\n     "title": "Evento"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@types/Image", \n-    "addable": true, \n+    "@id": "http://localhost:55001/plone/@types/Image",\n+    "addable": true,\n     "title": "Imagen"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@types/News Item", \n-    "addable": true, \n+    "@id": "http://localhost:55001/plone/@types/News Item",\n+    "addable": true,\n     "title": "Noticia"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@types/Document", \n-    "addable": true, \n+    "@id": "http://localhost:55001/plone/@types/Document",\n+    "addable": true,\n     "title": "P\\u00e1gina"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\nindex a6ce8d8c..7c629ff3 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n@@ -5,222 +5,222 @@ Content-Type: application/json+schema\n   "fieldsets": [\n     {\n       "fields": [\n-        "title", \n+        "title",\n         "description"\n-      ], \n-      "id": "default", \n+      ],\n+      "id": "default",\n       "title": "Default"\n-    }, \n+    },\n     {\n       "fields": [\n-        "subjects", \n-        "language", \n+        "subjects",\n+        "language",\n         "relatedItems"\n-      ], \n-      "id": "categorization", \n+      ],\n+      "id": "categorization",\n       "title": "Categorizaci\\u00f3n"\n-    }, \n+    },\n     {\n       "fields": [\n-        "effective", \n+        "effective",\n         "expires"\n-      ], \n-      "id": "dates", \n+      ],\n+      "id": "dates",\n       "title": "Fechas"\n-    }, \n+    },\n     {\n       "fields": [\n-        "creators", \n-        "contributors", \n+        "creators",\n+        "contributors",\n         "rights"\n-      ], \n-      "id": "ownership", \n+      ],\n+      "id": "ownership",\n       "title": "Propiedad"\n-    }, \n+    },\n     {\n       "fields": [\n-        "allow_discussion", \n-        "exclude_from_nav", \n-        "id", \n+        "allow_discussion",\n+        "exclude_from_nav",\n+        "id",\n         "nextPreviousEnabled"\n-      ], \n-      "id": "settings", \n+      ],\n+      "id": "settings",\n       "title": "Configuraci\\u00f3n"\n     }\n-  ], \n+  ],\n   "layouts": [\n-    "album_view", \n-    "event_listing", \n-    "full_view", \n-    "listing_view", \n-    "summary_view", \n+    "album_view",\n+    "event_listing",\n+    "full_view",\n+    "listing_view",\n+    "summary_view",\n     "tabular_view"\n-  ], \n+  ],\n   "properties": {\n     "allow_discussion": {\n       "choices": [\n         [\n-          "True", \n+          "True",\n           "S\\u00ed"\n-        ], \n+        ],\n         [\n-          "False", \n+          "False",\n           "No"\n         ]\n-      ], \n-      "description": "Permitir comentarios para este tipo de contenido", \n+      ],\n+      "description": "Permitir comentarios para este tipo de contenido",\n       "enum": [\n-        "True", \n+        "True",\n         "False"\n-      ], \n+      ],\n       "enumNames": [\n-        "S\\u00ed", \n+        "S\\u00ed",\n         "No"\n-      ], \n-      "title": "Permitir comentarios", \n+      ],\n+      "title": "Permitir comentarios",\n       "type": "string"\n-    }, \n+    },\n     "contributors": {\n-      "additionalItems": true, \n-      "description": "Los nombres de las personas que han contribuido a este elemento. Cada colaborador deber\\u00eda estar en una l\\u00ednea independiente.", \n+      "additionalItems": true,\n+      "description": "Los nombres de las personas que han contribuido a este elemento. Cada colaborador deber\\u00eda estar en una l\\u00ednea independiente.",\n       "items": {\n-        "description": "", \n-        "title": "", \n+        "description": "",\n+        "title": "",\n         "type": "string"\n-      }, \n-      "title": "Colaboradores", \n-      "type": "array", \n-      "uniqueItems": true, \n+      },\n+      "title": "Colaboradores",\n+      "type": "array",\n+      "uniqueItems": true,\n       "vocabulary": "plone.app.vocabularies.Users"\n-    }, \n+    },\n     "creators": {\n-      "additionalItems": true, \n-      "description": "Personas responsables de la creaci\\u00f3n del contenido de este elemento. Por favor, introduzca una lista de nombres de usuario, uno por l\\u00ednea. El autor principal deber\\u00eda ser el primero.", \n+      "additionalItems": true,\n+      "description": "Personas responsables de la creaci\\u00f3n del contenido de este elemento. Por favor, introduzca una lista de nombres de usuario, uno por l\\u00ednea. El autor principal deber\\u00eda ser el primero.",\n       "items": {\n-        "description": "", \n-        "title": "", \n+        "description": "",\n+        "title": "",\n         "type": "string"\n-      }, \n-      "title": "Creadores", \n-      "type": "array", \n-      "uniqueItems": true, \n+      },\n+      "title": "Creadores",\n+      "type": "array",\n+      "uniqueItems": true,\n       "vocabulary": "plone.app.vocabularies.Users"\n-    }, \n+    },\n     "description": {\n-      "description": "Usado en listados de elementos y resultados de b\\u00fasquedas.", \n-      "minLength": 0, \n-      "title": "Descripci\\u00f3n", \n-      "type": "string", \n+      "description": "Usado en listados de elementos y resultados de b\\u00fasquedas.",\n+      "minLength": 0,\n+      "title": "Descripci\\u00f3n",\n+      "type": "string",\n       "widget": "textarea"\n-    }, \n+    },\n     "effective": {\n-      "description": "La fecha en la que el documento ser\\u00e1 publicado. Si no selecciona ninguna fecha, el documento ser\\u00e1 publicado inmediatamente.", \n-      "title": "Fecha de Publicaci\\u00f3n", \n-      "type": "string", \n+      "description": "La fecha en la que el documento ser\\u00e1 publicado. Si no selecciona ninguna fecha, el documento ser\\u00e1 publicado inmediatamente.",\n+      "title": "Fecha de Publicaci\\u00f3n",\n+      "type": "string",\n       "widget": "datetime"\n-    }, \n+    },\n     "exclude_from_nav": {\n-      "default": false, \n-      "description": "Si est\\u00e1 marcado, este elemento no aparecer\\u00e1 en el \\u00e1rbol de navegaci\\u00f3n", \n-      "title": "Excluir de la navegaci\\u00f3n", \n+      "default": false,\n+      "description": "Si est\\u00e1 marcado, este elemento no aparecer\\u00e1 en el \\u00e1rbol de navegaci\\u00f3n",\n+      "title": "Excluir de la navegaci\\u00f3n",\n       "type": "boolean"\n-    }, \n+    },\n     "expires": {\n-      "description": "La fecha en la que expira el documento. Esto har\\u00e1 autom\\u00e1ticamente el documento invisible a otros a una fecha dada. Si no elije ninguna fecha, nunca expirar\\u00e1.", \n-      "title": "Fecha de Terminaci\\u00f3n", \n-      "type": "string", \n+      "description": "La fecha en la que expira el documento. Esto har\\u00e1 autom\\u00e1ticamente el documento invisible a otros a una fecha dada. Si no elije ninguna fecha, nunca expirar\\u00e1.",\n+      "title": "Fecha de Terminaci\\u00f3n",\n+      "type": "string",\n       "widget": "datetime"\n-    }, \n+    },\n     "id": {\n-      "description": "Este nombre se mostrar\\u00e1 en la URL.", \n-      "title": "Nombre corto", \n+      "description": "Este nombre se mostrar\\u00e1 en la URL.",\n+      "title": "Nombre corto",\n       "type": "string"\n-    }, \n+    },\n     "language": {\n       "choices": [\n         [\n-          "de", \n+          "de",\n           "Deutsch"\n-        ], \n+        ],\n         [\n-          "en", \n+          "en",\n           "English"\n-        ], \n+        ],\n         [\n-          "es", \n+          "es",\n           "Espa\\u00f1ol"\n-        ], \n+        ],\n         [\n-          "fr", \n+          "fr",\n           "Fran\\u00e7ais"\n         ]\n-      ], \n-      "default": "en", \n-      "description": "", \n+      ],\n+      "default": "en",\n+      "description": "",\n       "enum": [\n-        "de", \n-        "en", \n-        "es", \n+        "de",\n+        "en",\n+        "es",\n         "fr"\n-      ], \n+      ],\n       "enumNames": [\n-        "Deutsch", \n-        "English", \n-        "Espa\\u00f1ol", \n+        "Deutsch",\n+        "English",\n+        "Espa\\u00f1ol",\n         "Fran\\u00e7ais"\n-      ], \n-      "title": "Idioma", \n+      ],\n+      "title": "Idioma",\n       "type": "string"\n-    }, \n+    },\n     "nextPreviousEnabled": {\n-      "default": false, \n-      "description": "Esto habilita el widget siguiente/pr\\u00f3ximo en los elementos contenidos en esta carpeta.", \n-      "title": "Habilitar la navegaci\\u00f3n siguiente/anterior", \n+      "default": false,\n+      "description": "Esto habilita el widget siguiente/pr\\u00f3ximo en los elementos contenidos en esta carpeta.",\n+      "title": "Habilitar la navegaci\\u00f3n siguiente/anterior",\n       "type": "boolean"\n-    }, \n+    },\n     "relatedItems": {\n-      "additionalItems": true, \n-      "default": [], \n-      "description": "", \n+      "additionalItems": true,\n+      "default": [],\n+      "description": "",\n       "items": {\n-        "description": "", \n-        "title": "Related", \n+        "description": "",\n+        "title": "Related",\n         "type": "string"\n-      }, \n+      },\n       "pattern_options": {\n         "recentlyUsed": true\n-      }, \n-      "title": "Contenido relacionado", \n-      "type": "array", \n-      "uniqueItems": true, \n+      },\n+      "title": "Contenido relacionado",\n+      "type": "array",\n+      "uniqueItems": true,\n       "vocabulary": "plone.app.vocabularies.Catalog"\n-    }, \n+    },\n     "rights": {\n-      "description": "Declaraci\\u00f3n de copyright o informaci\\u00f3n de otros derechos sobre este elemento.", \n-      "minLength": 0, \n-      "title": "Derechos de Autor", \n-      "type": "string", \n+      "description": "Declaraci\\u00f3n de copyright o informaci\\u00f3n de otros derechos sobre este elemento.",\n+      "minLength": 0,\n+      "title": "Derechos de Autor",\n+      "type": "string",\n       "widget": "textarea"\n-    }, \n+    },\n     "subjects": {\n-      "choices": [], \n-      "description": "Las etiquetas suelen utilizarse para la organizaci\\u00f3n a medida del contenido.", \n-      "enum": [], \n-      "enumNames": [], \n-      "title": "Etiquetas", \n-      "type": "string", \n+      "choices": [],\n+      "description": "Las etiquetas suelen utilizarse para la organizaci\\u00f3n a medida del contenido.",\n+      "enum": [],\n+      "enumNames": [],\n+      "title": "Etiquetas",\n+      "type": "string",\n       "vocabulary": "plone.app.vocabularies.Keywords"\n-    }, \n+    },\n     "title": {\n-      "description": "", \n-      "title": "T\\u00edtulo", \n+      "description": "",\n+      "title": "T\\u00edtulo",\n       "type": "string"\n     }\n-  }, \n+  },\n   "required": [\n-    "title", \n+    "title",\n     "nextPreviousEnabled"\n-  ], \n-  "title": "Carpeta", \n+  ],\n+  "title": "Carpeta",\n   "type": "object"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/translations_delete.resp b/src/plone/restapi/tests/http-examples/translations_delete.resp\nindex 0074ded3..460c2259 100644\n--- a/src/plone/restapi/tests/http-examples/translations_delete.resp\n+++ b/src/plone/restapi/tests/http-examples/translations_delete.resp\n@@ -1,2 +1,3 @@\n HTTP/1.1 204 No Content\n+Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/translations_get.resp b/src/plone/restapi/tests/http-examples/translations_get.resp\nindex b6b78eaf..a7a24aaa 100644\n--- a/src/plone/restapi/tests/http-examples/translations_get.resp\n+++ b/src/plone/restapi/tests/http-examples/translations_get.resp\n@@ -2,10 +2,10 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/en/test-document/@translations", \n+  "@id": "http://localhost:55001/plone/en/test-document/@translations",\n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone/es/test-document", \n+      "@id": "http://localhost:55001/plone/es/test-document",\n       "language": "es"\n     }\n   ]\ndiff --git a/src/plone/restapi/tests/http-examples/translations_post.resp b/src/plone/restapi/tests/http-examples/translations_post.resp\nindex b0d80491..b9774105 100644\n--- a/src/plone/restapi/tests/http-examples/translations_post.resp\n+++ b/src/plone/restapi/tests/http-examples/translations_post.resp\n@@ -1,5 +1,5 @@\n HTTP/1.1 201 Created\n-Content-Type: application/json\n Location: http://localhost:55001/plone/en/test-document\n+Content-Type: application/json\n \n {}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/tusupload_options.resp b/src/plone/restapi/tests/http-examples/tusupload_options.resp\nindex 9ae1445d..73e5d301 100644\n--- a/src/plone/restapi/tests/http-examples/tusupload_options.resp\n+++ b/src/plone/restapi/tests/http-examples/tusupload_options.resp\n@@ -1,5 +1,5 @@\n HTTP/1.1 204 No Content\n+Tus-Resumable: 1.0.0\n Tus-Version: 1.0.0\n Tus-Extension: creation,expiration\n-Tus-Resumable: 1.0.0\n \ndiff --git a/src/plone/restapi/tests/http-examples/types.resp b/src/plone/restapi/tests/http-examples/types.resp\nindex 459c9c66..814b97b1 100644\n--- a/src/plone/restapi/tests/http-examples/types.resp\n+++ b/src/plone/restapi/tests/http-examples/types.resp\n@@ -3,48 +3,48 @@ Content-Type: application/json\n \n [\n   {\n-    "@id": "http://localhost:55001/plone/@types/Collection", \n-    "addable": true, \n+    "@id": "http://localhost:55001/plone/@types/Collection",\n+    "addable": true,\n     "title": "Collection"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@types/DXTestDocument", \n-    "addable": true, \n+    "@id": "http://localhost:55001/plone/@types/DXTestDocument",\n+    "addable": true,\n     "title": "DX Test Document"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@types/Event", \n-    "addable": true, \n+    "@id": "http://localhost:55001/plone/@types/Event",\n+    "addable": true,\n     "title": "Event"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@types/File", \n-    "addable": true, \n+    "@id": "http://localhost:55001/plone/@types/File",\n+    "addable": true,\n     "title": "File"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@types/Folder", \n-    "addable": true, \n+    "@id": "http://localhost:55001/plone/@types/Folder",\n+    "addable": true,\n     "title": "Folder"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@types/Image", \n-    "addable": true, \n+    "@id": "http://localhost:55001/plone/@types/Image",\n+    "addable": true,\n     "title": "Image"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@types/Link", \n-    "addable": true, \n+    "@id": "http://localhost:55001/plone/@types/Link",\n+    "addable": true,\n     "title": "Link"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@types/News Item", \n-    "addable": true, \n+    "@id": "http://localhost:55001/plone/@types/News Item",\n+    "addable": true,\n     "title": "News Item"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@types/Document", \n-    "addable": true, \n+    "@id": "http://localhost:55001/plone/@types/Document",\n+    "addable": true,\n     "title": "Page"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/types_document.resp b/src/plone/restapi/tests/http-examples/types_document.resp\nindex c16c6fb4..42f44d7f 100644\n--- a/src/plone/restapi/tests/http-examples/types_document.resp\n+++ b/src/plone/restapi/tests/http-examples/types_document.resp\n@@ -5,235 +5,235 @@ Content-Type: application/json+schema\n   "fieldsets": [\n     {\n       "fields": [\n-        "title", \n-        "description", \n-        "text", \n+        "title",\n+        "description",\n+        "text",\n         "changeNote"\n-      ], \n-      "id": "default", \n+      ],\n+      "id": "default",\n       "title": "Default"\n-    }, \n+    },\n     {\n       "fields": [\n-        "allow_discussion", \n-        "exclude_from_nav", \n-        "id", \n-        "versioning_enabled", \n+        "allow_discussion",\n+        "exclude_from_nav",\n+        "id",\n+        "versioning_enabled",\n         "table_of_contents"\n-      ], \n-      "id": "settings", \n+      ],\n+      "id": "settings",\n       "title": "Settings"\n-    }, \n+    },\n     {\n       "fields": [\n-        "subjects", \n-        "language", \n+        "subjects",\n+        "language",\n         "relatedItems"\n-      ], \n-      "id": "categorization", \n+      ],\n+      "id": "categorization",\n       "title": "Categorization"\n-    }, \n+    },\n     {\n       "fields": [\n-        "effective", \n+        "effective",\n         "expires"\n-      ], \n-      "id": "dates", \n+      ],\n+      "id": "dates",\n       "title": "Dates"\n-    }, \n+    },\n     {\n       "fields": [\n-        "creators", \n-        "contributors", \n+        "creators",\n+        "contributors",\n         "rights"\n-      ], \n-      "id": "ownership", \n+      ],\n+      "id": "ownership",\n       "title": "Ownership"\n     }\n-  ], \n+  ],\n   "layouts": [\n     "document_view"\n-  ], \n+  ],\n   "properties": {\n     "allow_discussion": {\n       "choices": [\n         [\n-          "True", \n+          "True",\n           "Yes"\n-        ], \n+        ],\n         [\n-          "False", \n+          "False",\n           "No"\n         ]\n-      ], \n-      "description": "Allow discussion for this content object.", \n+      ],\n+      "description": "Allow discussion for this content object.",\n       "enum": [\n-        "True", \n+        "True",\n         "False"\n-      ], \n+      ],\n       "enumNames": [\n-        "Yes", \n+        "Yes",\n         "No"\n-      ], \n-      "title": "Allow discussion", \n+      ],\n+      "title": "Allow discussion",\n       "type": "string"\n-    }, \n+    },\n     "changeNote": {\n-      "description": "Enter a comment that describes the changes you made.", \n-      "title": "Change Note", \n+      "description": "Enter a comment that describes the changes you made.",\n+      "title": "Change Note",\n       "type": "string"\n-    }, \n+    },\n     "contributors": {\n-      "additionalItems": true, \n-      "description": "The names of people that have contributed to this item. Each contributor should be on a separate line.", \n+      "additionalItems": true,\n+      "description": "The names of people that have contributed to this item. Each contributor should be on a separate line.",\n       "items": {\n-        "description": "", \n-        "title": "", \n+        "description": "",\n+        "title": "",\n         "type": "string"\n-      }, \n-      "title": "Contributors", \n-      "type": "array", \n-      "uniqueItems": true, \n+      },\n+      "title": "Contributors",\n+      "type": "array",\n+      "uniqueItems": true,\n       "vocabulary": "plone.app.vocabularies.Users"\n-    }, \n+    },\n     "creators": {\n-      "additionalItems": true, \n-      "description": "Persons responsible for creating the content of this item. Please enter a list of user names, one per line. The principal creator should come first.", \n+      "additionalItems": true,\n+      "description": "Persons responsible for creating the content of this item. Please enter a list of user names, one per line. The principal creator should come first.",\n       "items": {\n-        "description": "", \n-        "title": "", \n+        "description": "",\n+        "title": "",\n         "type": "string"\n-      }, \n-      "title": "Creators", \n-      "type": "array", \n-      "uniqueItems": true, \n+      },\n+      "title": "Creators",\n+      "type": "array",\n+      "uniqueItems": true,\n       "vocabulary": "plone.app.vocabularies.Users"\n-    }, \n+    },\n     "description": {\n-      "description": "Used in item listings and search results.", \n-      "minLength": 0, \n-      "title": "Summary", \n-      "type": "string", \n+      "description": "Used in item listings and search results.",\n+      "minLength": 0,\n+      "title": "Summary",\n+      "type": "string",\n       "widget": "textarea"\n-    }, \n+    },\n     "effective": {\n-      "description": "If this date is in the future, the content will not show up in listings and searches until this date.", \n-      "title": "Publishing Date", \n-      "type": "string", \n+      "description": "If this date is in the future, the content will not show up in listings and searches until this date.",\n+      "title": "Publishing Date",\n+      "type": "string",\n       "widget": "datetime"\n-    }, \n+    },\n     "exclude_from_nav": {\n-      "default": false, \n-      "description": "If selected, this item will not appear in the navigation tree", \n-      "title": "Exclude from navigation", \n+      "default": false,\n+      "description": "If selected, this item will not appear in the navigation tree",\n+      "title": "Exclude from navigation",\n       "type": "boolean"\n-    }, \n+    },\n     "expires": {\n-      "description": "When this date is reached, the content will no longer be visible in listings and searches.", \n-      "title": "Expiration Date", \n-      "type": "string", \n+      "description": "When this date is reached, the content will no longer be visible in listings and searches.",\n+      "title": "Expiration Date",\n+      "type": "string",\n       "widget": "datetime"\n-    }, \n+    },\n     "id": {\n-      "description": "This name will be displayed in the URL.", \n-      "title": "Short name", \n+      "description": "This name will be displayed in the URL.",\n+      "title": "Short name",\n       "type": "string"\n-    }, \n+    },\n     "language": {\n       "choices": [\n         [\n-          "de", \n+          "de",\n           "Deutsch"\n-        ], \n+        ],\n         [\n-          "en", \n+          "en",\n           "English"\n-        ], \n+        ],\n         [\n-          "es", \n+          "es",\n           "Espa\\u00f1ol"\n-        ], \n+        ],\n         [\n-          "fr", \n+          "fr",\n           "Fran\\u00e7ais"\n         ]\n-      ], \n-      "default": "en", \n-      "description": "", \n+      ],\n+      "default": "en",\n+      "description": "",\n       "enum": [\n-        "de", \n-        "en", \n-        "es", \n+        "de",\n+        "en",\n+        "es",\n         "fr"\n-      ], \n+      ],\n       "enumNames": [\n-        "Deutsch", \n-        "English", \n-        "Espa\\u00f1ol", \n+        "Deutsch",\n+        "English",\n+        "Espa\\u00f1ol",\n         "Fran\\u00e7ais"\n-      ], \n-      "title": "Language", \n+      ],\n+      "title": "Language",\n       "type": "string"\n-    }, \n+    },\n     "relatedItems": {\n-      "additionalItems": true, \n-      "default": [], \n-      "description": "", \n+      "additionalItems": true,\n+      "default": [],\n+      "description": "",\n       "items": {\n-        "description": "", \n-        "title": "Related", \n+        "description": "",\n+        "title": "Related",\n         "type": "string"\n-      }, \n+      },\n       "pattern_options": {\n         "recentlyUsed": true\n-      }, \n-      "title": "Related Items", \n-      "type": "array", \n-      "uniqueItems": true, \n+      },\n+      "title": "Related Items",\n+      "type": "array",\n+      "uniqueItems": true,\n       "vocabulary": "plone.app.vocabularies.Catalog"\n-    }, \n+    },\n     "rights": {\n-      "description": "Copyright statement or other rights information on this item.", \n-      "minLength": 0, \n-      "title": "Rights", \n-      "type": "string", \n+      "description": "Copyright statement or other rights information on this item.",\n+      "minLength": 0,\n+      "title": "Rights",\n+      "type": "string",\n       "widget": "textarea"\n-    }, \n+    },\n     "subjects": {\n-      "choices": [], \n-      "description": "Tags are commonly used for ad-hoc organization of content.", \n-      "enum": [], \n-      "enumNames": [], \n-      "title": "Tags", \n-      "type": "string", \n+      "choices": [],\n+      "description": "Tags are commonly used for ad-hoc organization of content.",\n+      "enum": [],\n+      "enumNames": [],\n+      "title": "Tags",\n+      "type": "string",\n       "vocabulary": "plone.app.vocabularies.Keywords"\n-    }, \n+    },\n     "table_of_contents": {\n-      "description": "If selected, this will show a table of contents at the top of the page.", \n-      "title": "Table of contents", \n+      "description": "If selected, this will show a table of contents at the top of the page.",\n+      "title": "Table of contents",\n       "type": "boolean"\n-    }, \n+    },\n     "text": {\n-      "description": "", \n-      "title": "Text", \n-      "type": "string", \n+      "description": "",\n+      "title": "Text",\n+      "type": "string",\n       "widget": "richtext"\n-    }, \n+    },\n     "title": {\n-      "description": "", \n-      "title": "Title", \n+      "description": "",\n+      "title": "Title",\n       "type": "string"\n-    }, \n+    },\n     "versioning_enabled": {\n-      "default": true, \n-      "description": "Enable/disable versioning for this document.", \n-      "title": "Versioning enabled", \n+      "default": true,\n+      "description": "Enable/disable versioning for this document.",\n+      "title": "Versioning enabled",\n       "type": "boolean"\n     }\n-  }, \n+  },\n   "required": [\n     "title"\n-  ], \n-  "title": "Page", \n+  ],\n+  "title": "Page",\n   "type": "object"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/unlock.resp b/src/plone/restapi/tests/http-examples/unlock.resp\nindex 52852385..4622ce69 100644\n--- a/src/plone/restapi/tests/http-examples/unlock.resp\n+++ b/src/plone/restapi/tests/http-examples/unlock.resp\n@@ -2,6 +2,6 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "locked": false, \n+  "locked": false,\n   "stealable": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users.resp b/src/plone/restapi/tests/http-examples/users.resp\nindex 3b07d7f5..769552f6 100644\n--- a/src/plone/restapi/tests/http-examples/users.resp\n+++ b/src/plone/restapi/tests/http-examples/users.resp\n@@ -3,29 +3,29 @@ Content-Type: application/json\n \n [\n   {\n-    "@id": "http://localhost:55001/plone/@users/admin", \n-    "description": "This is an admin user", \n-    "email": "admin@example.com", \n-    "fullname": "Administrator", \n-    "home_page": "http://www.example.com", \n-    "id": "admin", \n-    "location": "Berlin", \n+    "@id": "http://localhost:55001/plone/@users/admin",\n+    "description": "This is an admin user",\n+    "email": "admin@example.com",\n+    "fullname": "Administrator",\n+    "home_page": "http://www.example.com",\n+    "id": "admin",\n+    "location": "Berlin",\n     "roles": [\n       "Manager"\n-    ], \n+    ],\n     "username": "admin"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@users/test_user_1_", \n-    "description": "This is a test user", \n-    "email": "test@example.com", \n-    "fullname": "Test User", \n-    "home_page": "http://www.example.com", \n-    "id": "test_user_1_", \n-    "location": "Bonn", \n+    "@id": "http://localhost:55001/plone/@users/test_user_1_",\n+    "description": "This is a test user",\n+    "email": "test@example.com",\n+    "fullname": "Test User",\n+    "home_page": "http://www.example.com",\n+    "id": "test_user_1_",\n+    "location": "Bonn",\n     "roles": [\n       "Manager"\n-    ], \n+    ],\n     "username": "test-user"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_add.resp b/src/plone/restapi/tests/http-examples/users_add.resp\nindex 4e0df867..68979e27 100644\n--- a/src/plone/restapi/tests/http-examples/users_add.resp\n+++ b/src/plone/restapi/tests/http-examples/users_add.resp\n@@ -3,15 +3,15 @@ Content-Type: application/json\n Location: http://localhost:55001/plone/@users/noamchomsky\n \n {\n-  "@id": "http://localhost:55001/plone/@users/noamchomsky", \n-  "description": "Professor of Linguistics", \n-  "email": "noam.chomsky@example.com", \n-  "fullname": "Noam Avram Chomsky", \n-  "home_page": "web.mit.edu/chomsky", \n-  "id": "noamchomsky", \n-  "location": "Cambridge, MA", \n+  "@id": "http://localhost:55001/plone/@users/noamchomsky",\n+  "description": "Professor of Linguistics",\n+  "email": "noam.chomsky@example.com",\n+  "fullname": "Noam Avram Chomsky",\n+  "home_page": "web.mit.edu/chomsky",\n+  "id": "noamchomsky",\n+  "location": "Cambridge, MA",\n   "roles": [\n     "Member"\n-  ], \n+  ],\n   "username": "noamchomsky"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_authorized_get.resp b/src/plone/restapi/tests/http-examples/users_authorized_get.resp\nindex 314b3450..b9f28241 100644\n--- a/src/plone/restapi/tests/http-examples/users_authorized_get.resp\n+++ b/src/plone/restapi/tests/http-examples/users_authorized_get.resp\n@@ -2,15 +2,15 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/@users/noam", \n-  "description": "Professor of Linguistics", \n-  "email": "noam.chomsky@example.com", \n-  "fullname": "Noam Avram Chomsky", \n-  "home_page": "web.mit.edu/chomsky", \n-  "id": "noam", \n-  "location": "Cambridge, MA", \n+  "@id": "http://localhost:55001/plone/@users/noam",\n+  "description": "Professor of Linguistics",\n+  "email": "noam.chomsky@example.com",\n+  "fullname": "Noam Avram Chomsky",\n+  "home_page": "web.mit.edu/chomsky",\n+  "id": "noam",\n+  "location": "Cambridge, MA",\n   "roles": [\n     "Member"\n-  ], \n+  ],\n   "username": "noam"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_created.resp b/src/plone/restapi/tests/http-examples/users_created.resp\nindex 21e40ee5..6c845e73 100644\n--- a/src/plone/restapi/tests/http-examples/users_created.resp\n+++ b/src/plone/restapi/tests/http-examples/users_created.resp\n@@ -1,17 +1,17 @@\n HTTP/1.1 201 Created\n-Content-Type: application/json\n Location: http://localhost:55001/plone/@users/noamchomsky\n+Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/@users/noamchomsky", \n-  "description": "Professor of Linguistics", \n-  "email": "noam.chomsky@example.com", \n-  "fullname": "Noam Avram Chomsky", \n-  "home_page": "web.mit.edu/chomsky", \n-  "id": "noamchomsky", \n-  "location": "Cambridge, MA", \n+  "@id": "http://localhost:55001/plone/@users/noamchomsky",\n+  "description": "Professor of Linguistics",\n+  "email": "noam.chomsky@example.com",\n+  "fullname": "Noam Avram Chomsky",\n+  "home_page": "web.mit.edu/chomsky",\n+  "id": "noamchomsky",\n+  "location": "Cambridge, MA",\n   "roles": [\n     "Contributor"\n-  ], \n+  ],\n   "username": "noamchomsky"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_delete.resp b/src/plone/restapi/tests/http-examples/users_delete.resp\nindex 0074ded3..460c2259 100644\n--- a/src/plone/restapi/tests/http-examples/users_delete.resp\n+++ b/src/plone/restapi/tests/http-examples/users_delete.resp\n@@ -1,2 +1,3 @@\n HTTP/1.1 204 No Content\n+Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp b/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\nindex c1bd7027..7fde71a7 100644\n--- a/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n+++ b/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n@@ -3,16 +3,16 @@ Content-Type: application/json\n \n [\n   {\n-    "@id": "http://localhost:55001/plone/@users/noam", \n-    "description": "Professor of Linguistics", \n-    "email": "noam.chomsky@example.com", \n-    "fullname": "Noam Avram Chomsky", \n-    "home_page": "web.mit.edu/chomsky", \n-    "id": "noam", \n-    "location": "Cambridge, MA", \n+    "@id": "http://localhost:55001/plone/@users/noam",\n+    "description": "Professor of Linguistics",\n+    "email": "noam.chomsky@example.com",\n+    "fullname": "Noam Avram Chomsky",\n+    "home_page": "web.mit.edu/chomsky",\n+    "id": "noam",\n+    "location": "Cambridge, MA",\n     "roles": [\n       "Member"\n-    ], \n+    ],\n     "username": "noam"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_get.resp b/src/plone/restapi/tests/http-examples/users_get.resp\nindex 314b3450..b9f28241 100644\n--- a/src/plone/restapi/tests/http-examples/users_get.resp\n+++ b/src/plone/restapi/tests/http-examples/users_get.resp\n@@ -2,15 +2,15 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/@users/noam", \n-  "description": "Professor of Linguistics", \n-  "email": "noam.chomsky@example.com", \n-  "fullname": "Noam Avram Chomsky", \n-  "home_page": "web.mit.edu/chomsky", \n-  "id": "noam", \n-  "location": "Cambridge, MA", \n+  "@id": "http://localhost:55001/plone/@users/noam",\n+  "description": "Professor of Linguistics",\n+  "email": "noam.chomsky@example.com",\n+  "fullname": "Noam Avram Chomsky",\n+  "home_page": "web.mit.edu/chomsky",\n+  "id": "noam",\n+  "location": "Cambridge, MA",\n   "roles": [\n     "Member"\n-  ], \n+  ],\n   "username": "noam"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_update.resp b/src/plone/restapi/tests/http-examples/users_update.resp\nindex 0074ded3..460c2259 100644\n--- a/src/plone/restapi/tests/http-examples/users_update.resp\n+++ b/src/plone/restapi/tests/http-examples/users_update.resp\n@@ -1,2 +1,3 @@\n HTTP/1.1 204 No Content\n+Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies.resp b/src/plone/restapi/tests/http-examples/vocabularies.resp\nindex 0229bb0b..c04b0b9b 100644\n--- a/src/plone/restapi/tests/http-examples/vocabularies.resp\n+++ b/src/plone/restapi/tests/http-examples/vocabularies.resp\n@@ -3,207 +3,195 @@ Content-Type: application/json\n \n [\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes", \n-    "title": "plone.app.vocabularies.ReallyUserFriendlyTypes"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.content.ValidAddableTypes",\n+    "title": "plone.app.content.ValidAddableTypes"\n+  },\n+  {\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.contentrules.events",\n+    "title": "plone.contentrules.events"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AvailableContentLanguages", \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AvailableContentLanguages",\n     "title": "plone.app.vocabularies.AvailableContentLanguages"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.schemaeditor.VocabulariesVocabulary", \n-    "title": "plone.schemaeditor.VocabulariesVocabulary"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SupportedContentLanguages",\n+    "title": "plone.app.vocabularies.SupportedContentLanguages"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.users.group_ids", \n-    "title": "plone.app.users.group_ids"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Roles",\n+    "title": "plone.app.vocabularies.Roles"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Permissions", \n-    "title": "plone.app.vocabularies.Permissions"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Groups",\n+    "title": "plone.app.vocabularies.Groups"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.contentrules.events", \n-    "title": "plone.contentrules.events"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Permissions",\n+    "title": "plone.app.vocabularies.Permissions"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.CaptchaVocabulary", \n-    "title": "plone.app.discussion.vocabularies.CaptchaVocabulary"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AllowedContentTypes",\n+    "title": "plone.app.vocabularies.AllowedContentTypes"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Actions", \n-    "title": "plone.app.vocabularies.Actions"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AllowableContentTypes",\n+    "title": "plone.app.vocabularies.AllowableContentTypes"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ImagesScales", \n-    "title": "plone.app.vocabularies.ImagesScales"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.PortalTypes",\n+    "title": "plone.app.vocabularies.PortalTypes"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.PortalActionCategories", \n-    "title": "plone.app.vocabularies.PortalActionCategories"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n+    "title": "plone.app.vocabularies.ReallyUserFriendlyTypes"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.multilingual.vocabularies.AllAvailableLanguageVocabulary", \n-    "title": "plone.app.multilingual.vocabularies.AllAvailableLanguageVocabulary"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.UserFriendlyTypes",\n+    "title": "plone.app.vocabularies.UserFriendlyTypes"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.multilingual.RootCatalog", \n-    "title": "plone.app.multilingual.RootCatalog"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Skins",\n+    "title": "plone.app.vocabularies.Skins"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.content.ValidAddableTypes", \n-    "title": "plone.app.content.ValidAddableTypes"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Workflows",\n+    "title": "plone.app.vocabularies.Workflows"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.CommonTimezones", \n-    "title": "plone.app.vocabularies.CommonTimezones"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.WorkflowStates",\n+    "title": "plone.app.vocabularies.WorkflowStates"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.restapi.testing.context_vocabulary", \n-    "title": "plone.restapi.testing.context_vocabulary"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.WorkflowTransitions",\n+    "title": "plone.app.vocabularies.WorkflowTransitions"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AvailableEditors", \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AvailableEditors",\n     "title": "plone.app.vocabularies.AvailableEditors"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Roles", \n-    "title": "plone.app.vocabularies.Roles"\n-  }, \n-  {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SupportedContentLanguages", \n-    "title": "plone.app.vocabularies.SupportedContentLanguages"\n-  }, \n-  {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords", \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords",\n     "title": "plone.app.vocabularies.Keywords"\n-  }, \n-  {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Groups", \n-    "title": "plone.app.vocabularies.Groups"\n-  }, \n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AvailableTimezones", \n-    "title": "plone.app.vocabularies.AvailableTimezones"\n-  }, \n-  {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog", \n-    "title": "plone.app.vocabularies.Catalog"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SyndicationFeedTypes",\n+    "title": "plone.app.vocabularies.SyndicationFeedTypes"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.TextTransformVocabulary", \n-    "title": "plone.app.discussion.vocabularies.TextTransformVocabulary"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SyndicatableFeedItems",\n+    "title": "plone.app.vocabularies.SyndicatableFeedItems"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Month", \n-    "title": "plone.app.vocabularies.Month"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users",\n+    "title": "plone.app.vocabularies.Users"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Weekdays", \n-    "title": "plone.app.vocabularies.Weekdays"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog",\n+    "title": "plone.app.vocabularies.Catalog"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.WorkflowTransitions", \n-    "title": "plone.app.vocabularies.WorkflowTransitions"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Actions",\n+    "title": "plone.app.vocabularies.Actions"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.WeekdaysShort", \n-    "title": "plone.app.vocabularies.WeekdaysShort"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.PortalActionCategories",\n+    "title": "plone.app.vocabularies.PortalActionCategories"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.contenttypes.metadatafields", \n-    "title": "plone.app.contenttypes.metadatafields"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Timezones",\n+    "title": "plone.app.vocabularies.Timezones"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/Interfaces", \n-    "title": "Interfaces"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.CommonTimezones",\n+    "title": "plone.app.vocabularies.CommonTimezones"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.WorkflowStates", \n-    "title": "plone.app.vocabularies.WorkflowStates"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AvailableTimezones",\n+    "title": "plone.app.vocabularies.AvailableTimezones"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/Fields", \n-    "title": "Fields"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Weekdays",\n+    "title": "plone.app.vocabularies.Weekdays"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.contenttypes.migration.atctypes", \n-    "title": "plone.app.contenttypes.migration.atctypes"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.WeekdaysAbbr",\n+    "title": "plone.app.vocabularies.WeekdaysAbbr"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.multilingual.vocabularies.AllContentLanguageVocabulary", \n-    "title": "plone.app.multilingual.vocabularies.AllContentLanguageVocabulary"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.WeekdaysShort",\n+    "title": "plone.app.vocabularies.WeekdaysShort"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SyndicatableFeedItems", \n-    "title": "plone.app.vocabularies.SyndicatableFeedItems"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Month",\n+    "title": "plone.app.vocabularies.Month"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AllowedContentTypes", \n-    "title": "plone.app.vocabularies.AllowedContentTypes"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.MonthAbbr",\n+    "title": "plone.app.vocabularies.MonthAbbr"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.users.user_registration_fields", \n-    "title": "plone.app.users.user_registration_fields"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ImagesScales",\n+    "title": "plone.app.vocabularies.ImagesScales"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.WeekdaysAbbr", \n-    "title": "plone.app.vocabularies.WeekdaysAbbr"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/Behaviors",\n+    "title": "Behaviors"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.UserFriendlyTypes", \n-    "title": "plone.app.vocabularies.UserFriendlyTypes"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/Fields",\n+    "title": "Fields"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.PortalTypes", \n-    "title": "plone.app.vocabularies.PortalTypes"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.schemaeditor.VocabulariesVocabulary",\n+    "title": "plone.schemaeditor.VocabulariesVocabulary"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/Behaviors", \n-    "title": "Behaviors"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.formwidget.relations.cmfcontentsearch",\n+    "title": "plone.formwidget.relations.cmfcontentsearch"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SyndicationFeedTypes", \n-    "title": "plone.app.vocabularies.SyndicationFeedTypes"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.event.SynchronizationStrategies",\n+    "title": "plone.app.event.SynchronizationStrategies"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Timezones", \n-    "title": "plone.app.vocabularies.Timezones"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.contenttypes.metadatafields",\n+    "title": "plone.app.contenttypes.metadatafields"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.formwidget.relations.cmfcontentsearch", \n-    "title": "plone.formwidget.relations.cmfcontentsearch"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/Interfaces",\n+    "title": "Interfaces"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Skins", \n-    "title": "plone.app.vocabularies.Skins"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.CaptchaVocabulary",\n+    "title": "plone.app.discussion.vocabularies.CaptchaVocabulary"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AllowableContentTypes", \n-    "title": "plone.app.vocabularies.AllowableContentTypes"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.TextTransformVocabulary",\n+    "title": "plone.app.discussion.vocabularies.TextTransformVocabulary"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.contenttypes.migration.extendedtypes", \n-    "title": "plone.app.contenttypes.migration.extendedtypes"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.users.user_registration_fields",\n+    "title": "plone.app.users.user_registration_fields"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.MonthAbbr", \n-    "title": "plone.app.vocabularies.MonthAbbr"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.users.group_ids",\n+    "title": "plone.app.users.group_ids"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Workflows", \n-    "title": "plone.app.vocabularies.Workflows"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.multilingual.vocabularies.AllContentLanguageVocabulary",\n+    "title": "plone.app.multilingual.vocabularies.AllContentLanguageVocabulary"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.contenttypes.migration.changed_base_classes", \n-    "title": "plone.app.contenttypes.migration.changed_base_classes"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.multilingual.vocabularies.AllAvailableLanguageVocabulary",\n+    "title": "plone.app.multilingual.vocabularies.AllAvailableLanguageVocabulary"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users", \n-    "title": "plone.app.vocabularies.Users"\n-  }, \n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.multilingual.RootCatalog",\n+    "title": "plone.app.multilingual.RootCatalog"\n+  },\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.event.SynchronizationStrategies", \n-    "title": "plone.app.event.SynchronizationStrategies"\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.restapi.testing.context_vocabulary",\n+    "title": "plone.restapi.testing.context_vocabulary"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get.resp b/src/plone/restapi/tests/http-examples/vocabularies_get.resp\nindex 06ecfc17..c9ad99cc 100644\n--- a/src/plone/restapi/tests/http-examples/vocabularies_get.resp\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get.resp\n@@ -2,66 +2,66 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes", \n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n   "terms": [\n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Collection", \n-      "title": "Collection", \n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Collection",\n+      "title": "Collection",\n       "token": "Collection"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Discussion Item", \n-      "title": "Comment", \n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Discussion Item",\n+      "title": "Comment",\n       "token": "Discussion Item"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/DXTestDocument", \n-      "title": "DX Test Document", \n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/DXTestDocument",\n+      "title": "DX Test Document",\n       "token": "DXTestDocument"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Event", \n-      "title": "Event", \n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Event",\n+      "title": "Event",\n       "token": "Event"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/File", \n-      "title": "File", \n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/File",\n+      "title": "File",\n       "token": "File"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Folder", \n-      "title": "Folder", \n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Folder",\n+      "title": "Folder",\n       "token": "Folder"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Image", \n-      "title": "Image", \n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Image",\n+      "title": "Image",\n       "token": "Image"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Link", \n-      "title": "Link", \n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Link",\n+      "title": "Link",\n       "token": "Link"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/News Item", \n-      "title": "News Item", \n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/News Item",\n+      "title": "News Item",\n       "token": "News Item"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Document", \n-      "title": "Page", \n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Document",\n+      "title": "Page",\n       "token": "Document"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/ATTestDocument", \n-      "title": "Test Document", \n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/ATTestDocument",\n+      "title": "Test Document",\n       "token": "ATTestDocument"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/ATTestFolder", \n-      "title": "Test Folder", \n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/ATTestFolder",\n+      "title": "Test Folder",\n       "token": "ATTestFolder"\n     }\n   ]\ndiff --git a/src/plone/restapi/tests/mixin_ordering.py b/src/plone/restapi/tests/mixin_ordering.py\nindex 180cc0e8..ad219fb5 100644\n--- a/src/plone/restapi/tests/mixin_ordering.py\n+++ b/src/plone/restapi/tests/mixin_ordering.py\n@@ -95,5 +95,5 @@ def test_reorder_subsetids(self):\n \n         self.assertEquals(\n             u\'Client/server ordering mismatch\',\n-            cm.exception.message\n+            str(cm.exception)\n         )\ndiff --git a/src/plone/restapi/tests/test_atcontent_deserializer.py b/src/plone/restapi/tests/test_atcontent_deserializer.py\nindex 61fb4642..395571d0 100644\n--- a/src/plone/restapi/tests/test_atcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_deserializer.py\n@@ -72,7 +72,7 @@ def test_deserializer_validates_content(self):\n             self.deserialize(body=\'{"testURLField": "Not an URL"}\')\n         self.assertEquals(\n             u"Validation failed(isURL): \'Not an URL\' is not a valid url.",\n-            cm.exception.message[0][\'message\'])\n+            cm.exception.args[0][0][\'message\'])\n \n     def test_deserializer_clears_creation_flag(self):\n         self.doc1.markCreationFlag()\n@@ -103,7 +103,7 @@ def test_deserializer_raises_if_required_value_is_missing(self):\n             self.deserialize(body=\'{"testStringField": "My Value"}\',\n                              validate_all=True)\n         self.assertEquals(u\'TestRequiredField is required, please correct.\',\n-                          cm.exception.message[0][\'message\'])\n+                          cm.exception.args[0][0][\'message\'])\n \n     def test_deserializer_succeeds_if_required_value_is_provided(self):\n         self.deserialize(body=\'{"testRequiredField": "My Value"}\',\n@@ -129,7 +129,7 @@ def __call__(self, request):\n                              validate_all=True)\n \n         self.assertEquals(\n-            \'post_validation_error\', cm.exception.message[0][\'message\'])\n+            \'post_validation_error\', cm.exception.args[0][0][\'message\'])\n \n     def test_pre_validation(self):\n \n@@ -150,7 +150,7 @@ def __call__(self, request):\n                              validate_all=True)\n \n         self.assertEquals(\n-            \'pre_validation_error\', cm.exception.message[0][\'message\'])\n+            \'pre_validation_error\', cm.exception.args[0][0][\'message\'])\n \n     def test_set_layout(self):\n         current_layout = self.doc1.getLayout()\ndiff --git a/src/plone/restapi/tests/test_content_post.py b/src/plone/restapi/tests/test_content_post.py\nindex c94dd113..02416b68 100644\n--- a/src/plone/restapi/tests/test_content_post.py\n+++ b/src/plone/restapi/tests/test_content_post.py\n@@ -93,7 +93,7 @@ def test_post_without_type_returns_400(self):\n             },\n         )\n         self.assertEqual(400, response.status_code)\n-        self.assertIn("Property \'@type\' is required", response.content)\n+        self.assertIn("Property \'@type\' is required", response.text)\n \n     def test_post_without_id_creates_id_from_title(self):\n         response = requests.post(\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 7d9da605..6579bb94 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -128,7 +128,7 @@ def save_request_and_response_for_docs(name, response):\n \n             req.write(response.request.body)\n \n-    with open(\'{}/{}\'.format(base_path, \'%s.resp\' % name), \'wb\') as resp:\n+    with open(\'{}/{}\'.format(base_path, \'%s.resp\' % name), \'w\') as resp:\n         status = response.status_code\n         reason = response.reason\n         resp.write(\'HTTP/1.1 {} {}\\n\'.format(status, reason))\n@@ -136,7 +136,7 @@ def save_request_and_response_for_docs(name, response):\n             if key.lower() in RESPONSE_HEADER_KEYS:\n                 resp.write(\'{}: {}\\n\'.format(key.title(), value))\n         resp.write(\'\\n\')\n-        resp.write(response.content)\n+        resp.write(response.text)\n \n \n class TestDocumentation(unittest.TestCase):\n@@ -273,7 +273,7 @@ def test_documentation_news_item(self):\n         )\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n         self.portal.newsitem.image = NamedBlobImage(\n-            data=open(image_file, \'r\').read(),\n+            data=open(image_file, \'rb\').read(),\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\n@@ -326,7 +326,7 @@ def test_documentation_file(self):\n             os.path.dirname(__file__), u\'file.pdf\'\n         )\n         self.portal.file.file = NamedBlobFile(\n-            data=open(pdf_file, \'r\').read(),\n+            data=open(pdf_file, \'rb\').read(),\n             contentType=\'application/pdf\',\n             filename=u\'file.pdf\'\n         )\n@@ -344,7 +344,7 @@ def test_documentation_image(self):\n         self.portal.image.description = u\'This is an image\'\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n         self.portal.image.image = NamedBlobImage(\n-            data=open(image_file, \'r\').read(),\n+            data=open(image_file, \'rb\').read(),\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\ndiff --git a/src/plone/restapi/tests/test_dxcontent_deserializer.py b/src/plone/restapi/tests/test_dxcontent_deserializer.py\nindex 54dbc0bc..8e44805a 100644\n--- a/src/plone/restapi/tests/test_dxcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_deserializer.py\n@@ -108,7 +108,7 @@ def test_deserializer_validates_invariant(self):\n             self.deserialize(body=\'{"test_invariant_field1": "Foo",\'\n                                   \' "test_invariant_field2": "Bar"}\')\n         self.assertEquals(u\'Must have same values\',\n-                          cm.exception.message[0][\'message\'])\n+                          str(cm.exception.args[0][0][\'message\']))\n \n     def test_deserializer_updates_behavior_field_value(self):\n         self.deserialize(body=\'{"test_behavior_field": "My Value"}\')\n@@ -128,14 +128,14 @@ def test_deserializer_raises_if_required_value_is_missing(self):\n             self.deserialize(body=\'{"test_textline_field": "My Value"}\',\n                              validate_all=True)\n         self.assertEquals(u\'Required input is missing.\',\n-                          cm.exception.message[0][\'message\'])\n+                          cm.exception.args[0][0][\'message\'])\n \n         # An empty string should be considered a missing value\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"test_textline_field": ""}\',\n                              validate_all=True)\n         self.assertEquals(u\'Required input is missing.\',\n-                          cm.exception.message[0][\'message\'])\n+                          cm.exception.args[0][0][\'message\'])\n \n     def test_deserializer_succeeds_if_required_value_is_provided(self):\n         self.deserialize(body=\'{"test_required_field": "My Value"}\',\n@@ -183,10 +183,10 @@ def test_deserializer_sets_missing_value_on_required_field(self):\n                 \'test_missing_value_required_field is a required field.\',\n                 \'Setting it to null is not allowed.\'\n             ),\n-            cm.exception.message[0][\'message\']\n+            cm.exception.args[0][0][\'message\']\n         )\n         self.assertEquals(u\'test_missing_value_required_field\',\n-                          cm.exception.message[0][\'field\'])\n+                          cm.exception.args[0][0][\'field\'])\n \n     def test_set_layout(self):\n         current_layout = self.portal.doc1.getLayout()\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex 18544bfe..e19100a7 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -59,7 +59,7 @@ def deserialize(self, fieldname, value):\n     def test_ascii_deserialization_returns_bytestring(self):\n         value = self.deserialize(\'test_ascii_field\', u\'Foo\')\n         self.assertTrue(isinstance(value, str), \'Not a <str>\')\n-        self.assertEqual(\'Foo\', value)\n+        self.assertEqual(b\'Foo\', value)\n \n     def test_asciiline_deserialization_returns_bytestring(self):\n         value = self.deserialize(\'test_asciiline_field\', u\'Foo\')\n@@ -78,13 +78,13 @@ def test_bool_deserialization_returns_false(self):\n \n     def test_bytes_deserialization_returns_bytestring(self):\n         value = self.deserialize(\'test_bytes_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, str), \'Not a <str>\')\n-        self.assertEqual(\'Foo\', value)\n+        self.assertTrue(isinstance(value, bytes), \'Not a <bytes>\')\n+        self.assertEqual(b\'Foo\', value)\n \n     def test_bytesline_deserialization_returns_bytestring(self):\n         value = self.deserialize(\'test_bytesline_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, str), \'Not a <str>\')\n-        self.assertEqual(\'Foo\', value)\n+        self.assertTrue(isinstance(value, bytes), \'Not a <bytes>\')\n+        self.assertEqual(b\'Foo\', value)\n \n     def test_choice_deserialization_returns_vocabulary_item(self):\n         value = self.deserialize(\'test_choice_field\', u\'bar\')\n@@ -370,7 +370,7 @@ def test_datetime_deserializer_handles_invalid_value(self):\n             self.deserialize(\'test_datetime_field\',\n                              u\'2015-15-15T10:39:54.361Z\')\n         self.assertEqual(u\'Invalid date: 2015-15-15T10:39:54.361Z\',\n-                         cm.exception.message)\n+                         str(cm.exception))\n \n     def test_datetime_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError):\n@@ -402,7 +402,7 @@ def test_time_deserializer_handles_invalid_value(self):\n             self.deserialize(\'test_time_field\',\n                              u\'midnight\')\n         self.assertEqual(u\'Invalid time: midnight\',\n-                         cm.exception.message)\n+                         str(cm.exception))\n \n     def test_time_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n@@ -414,9 +414,9 @@ def test_timedelta_deserializer_handles_invalid_value(self):\n         with self.assertRaises(ValueError) as cm:\n             self.deserialize(\'test_timedelta_field\',\n                              u\'2h\')\n-        self.assertEqual(\n-            u\'unsupported type for timedelta seconds component: unicode\',\n-            cm.exception.message)\n+        self.assertIn(\n+            u\'unsupported type for timedelta seconds component:\',\n+            str(cm.exception))\n \n     def test_timedelta_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\ndiff --git a/src/plone/restapi/tests/test_pas.py b/src/plone/restapi/tests/test_pas.py\nindex ca5482d3..c2c20e2e 100644\n--- a/src/plone/restapi/tests/test_pas.py\n+++ b/src/plone/restapi/tests/test_pas.py\n@@ -69,7 +69,7 @@ def test_authenticate_credentials_with_valid_token(self):\n         creds[\'extractor\'] = \'jwt_auth\'\n         creds[\'token\'] = self.plugin.create_token(\'admin\')\n         self.assertEqual(\n-            (\'admin\', \'admin\'),\n+            (b\'admin\', b\'admin\'),\n             self.plugin.authenticateCredentials(creds))\n \n     def test_authenticate_credentials_returns_byte_string(self):\n@@ -78,7 +78,7 @@ def test_authenticate_credentials_returns_byte_string(self):\n         creds[\'token\'] = self.plugin.create_token(\'admin\')\n         self.assertIsInstance(\n             self.plugin.authenticateCredentials(creds)[0],\n-            str\n+            bytes\n         )\n \n     def test_decode_token_after_key_rotation(self):\ndiff --git a/src/plone/restapi/tests/test_roles.py b/src/plone/restapi/tests/test_roles.py\nindex 26cb4b42..01b82d69 100644\n--- a/src/plone/restapi/tests/test_roles.py\n+++ b/src/plone/restapi/tests/test_roles.py\n@@ -22,7 +22,7 @@ def setUp(self):\n     def test_roles_endpoint_lists_roles(self):\n         response = self.api_session.get(\'/@roles\')\n \n-        self.assertItemsEqual([\n+        self.assertEqual({\n             {u\'@id\': self.portal_url + u\'/@roles/Contributor\',\n              u\'@type\': u\'role\',\n              u\'id\': u\'Contributor\',\n@@ -50,19 +50,19 @@ def test_roles_endpoint_lists_roles(self):\n             {u\'@id\': self.portal_url + u\'/@roles/Manager\',\n              u\'@type\': u\'role\',\n              u\'id\': u\'Manager\',\n-             u\'title\': u\'Manager\'}],\n-            response.json())\n+             u\'title\': u\'Manager\'}},\n+            set(response.json()))\n \n     def test_roles_endpoint_translates_role_titles(self):\n         self.api_session.headers.update({\'Accept-Language\': \'de\'})\n         response = self.api_session.get(\'/@roles\')\n \n-        self.assertItemsEqual([\n+        self.assertEqual({\n             u\'Hinzuf\\xfcgen\',\n             u\'Bearbeiten\',\n             u\'Benutzer\',\n             u\'Ansehen\',\n             u\'Ver\\xf6ffentlichen\',\n             u\'Website-Administrator\',\n-            u\'Verwalten\'],\n-            [item[\'title\'] for item in response.json()])\n+            u\'Verwalten\'},\n+            {item[\'title\'] for item in response.json()})\ndiff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex 29fe9456..665070c3 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -277,7 +277,7 @@ def test_keyword_index_str_query_or(self):\n         query = {\'test_list_field\': [\'Keyword2\', \'Keyword3\']}\n         response = self.api_session.get(\'/@search\', params=query)\n \n-        self.assertItemsEqual(\n+        self.assertEqual(\n             [u\'/plone/folder/doc\',\n              u\'/plone/folder/other-document\'],\n             result_paths(response.json())\ndiff --git a/src/plone/restapi/tests/test_serializer_converters.py b/src/plone/restapi/tests/test_serializer_converters.py\nindex da9de8fb..af5b0047 100644\n--- a/src/plone/restapi/tests/test_serializer_converters.py\n+++ b/src/plone/restapi/tests/test_serializer_converters.py\n@@ -27,7 +27,7 @@ def test_None(self):\n \n     def test_error_when_type_unknown(self):\n         err_regex = r\'^No converter for making <object object at [^>]*>\' + \\\n-                    r\' \\(<type \\\'object\\\'>\\) JSON compatible.$\'\n+                    r\' \\(<(class|type) \\\'object\\\'>\\) JSON compatible.$\'\n \n         with self.assertRaisesRegexp(TypeError, err_regex):\n             json_compatible(object())\ndiff --git a/src/plone/restapi/tests/test_services_types.py b/src/plone/restapi/tests/test_services_types.py\nindex 9a871e44..e4743243 100644\n--- a/src/plone/restapi/tests/test_services_types.py\n+++ b/src/plone/restapi/tests/test_services_types.py\n@@ -191,7 +191,7 @@ def test_get_types_translated(self):\n \n         self.assertEqual(response.status_code, 200)\n \n-        self.assertItemsEqual([\n+        self.assertEqual({\n             u\'Archivo\',\n             u\'Carpeta\',\n             u\'Colecci\xc3\xb3n\',\n@@ -200,5 +200,5 @@ def test_get_types_translated(self):\n             u\'Evento\',\n             u\'Imagen\',\n             u\'Noticia\',\n-            u\'P\xc3\xa1gina\'],\n-            [item[\'title\'] for item in response.json()])\n+            u\'P\xc3\xa1gina\'},\n+            set(item[\'title\'] for item in response.json()))\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-09-20T09:14:47+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.restapi/commit/c54a79a9851348909894a06feb1bae697bf5ce5e

title needs to be unicode

Files changed:
M src/plone/restapi/tests/test_expansion.py
M src/plone/restapi/tests/test_translations.py

b"diff --git a/src/plone/restapi/tests/test_expansion.py b/src/plone/restapi/tests/test_expansion.py\nindex 43833ae9..8bed02c9 100644\n--- a/src/plone/restapi/tests/test_expansion.py\n+++ b/src/plone/restapi/tests/test_expansion.py\n@@ -323,9 +323,9 @@ def setUp(self):\n         alsoProvides(self.layer['request'], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal['en'], 'Document', title='Test document')\n+            self.portal['en'], 'Document', title=u'Test document')\n         self.es_content = createContentInContainer(\n-            self.portal['es'], 'Document', title='Test document')\n+            self.portal['es'], 'Document', title=u'Test document')\n         ITranslationManager(self.en_content).register_translation(\n             'es', self.es_content)\n \ndiff --git a/src/plone/restapi/tests/test_translations.py b/src/plone/restapi/tests/test_translations.py\nindex 21fc1c93..eccd3025 100644\n--- a/src/plone/restapi/tests/test_translations.py\n+++ b/src/plone/restapi/tests/test_translations.py\n@@ -31,9 +31,9 @@ def setUp(self):\n         alsoProvides(self.layer['request'], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal['en'], 'Document', title='Test document')\n+            self.portal['en'], 'Document', title=u'Test document')\n         self.es_content = createContentInContainer(\n-            self.portal['es'], 'Document', title='Test document')\n+            self.portal['es'], 'Document', title=u'Test document')\n         ITranslationManager(self.en_content).register_translation(\n             'es', self.es_content)\n \n@@ -71,9 +71,9 @@ def setUp(self):\n         alsoProvides(self.layer['request'], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal['en'], 'Document', title='Test document')\n+            self.portal['en'], 'Document', title=u'Test document')\n         self.es_content = createContentInContainer(\n-            self.portal['es'], 'Document', title='Test document')\n+            self.portal['es'], 'Document', title=u'Test document')\n         transaction.commit()\n \n     def test_translation_linking_succeeds(self):\n@@ -138,9 +138,9 @@ def setUp(self):\n         alsoProvides(self.layer['request'], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal['en'], 'Document', title='Test document')\n+            self.portal['en'], 'Document', title=u'Test document')\n         self.es_content = createContentInContainer(\n-            self.portal['es'], 'Document', title='Test document')\n+            self.portal['es'], 'Document', title=u'Test document')\n         ITranslationManager(self.en_content).register_translation(\n             'es', self.es_content)\n         transaction.commit()\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-09-20T22:07:13-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/ec5870389d85edd8651eedae4e7b799d8cdeeb1e

More string handling fixes

Files changed:
M src/plone/restapi/deserializer/atfields.py
M src/plone/restapi/deserializer/dxfields.py
M src/plone/restapi/deserializer/relationfield.py
M src/plone/restapi/serializer/configure.zcml
M src/plone/restapi/serializer/converters.py
M src/plone/restapi/services/workflow/info.py
M src/plone/restapi/tests/http-examples/expansion_expanded_full.resp
M src/plone/restapi/tests/http-examples/groups_created.resp
M src/plone/restapi/tests/http-examples/groups_get.resp
M src/plone/restapi/tests/http-examples/registry_get_list.resp
M src/plone/restapi/tests/http-examples/roles.resp
M src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp
M src/plone/restapi/tests/http-examples/workflow_get.resp
M src/plone/restapi/tests/http-examples/workflow_post_with_body.resp
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_dxfield_serializer.py
M src/plone/restapi/tests/test_pas.py
M src/plone/restapi/tests/test_serializer.py

b'diff --git a/src/plone/restapi/deserializer/atfields.py b/src/plone/restapi/deserializer/atfields.py\nindex 5f907ab8..e987a5c6 100644\n--- a/src/plone/restapi/deserializer/atfields.py\n+++ b/src/plone/restapi/deserializer/atfields.py\n@@ -13,6 +13,7 @@\n     from zope.component import getMultiAdapter\n     from zope.interface import implementer\n     from zope.publisher.interfaces.browser import IBrowserRequest\n+    import six\n \n     @implementer(IFieldDeserializer)\n     @adapter(IField, IBaseObject, IBrowserRequest)\n@@ -70,8 +71,10 @@ def __call__(self, value):\n \n             for i, v in enumerate(value):\n                 # Resolve references given by URL\n+                if six.PY2 and isinstance(value, six.text_type):\n+                    v = v.encode(\'utf-8\')\n                 if v.startswith(portal_url):\n-                    path = v[len(portal_url) + 1:].encode(\'utf8\')\n+                    path = v[len(portal_url) + 1:]\n                     value[i] = portal.unrestrictedTraverse(path, None)\n \n             return value, {}\ndiff --git a/src/plone/restapi/deserializer/dxfields.py b/src/plone/restapi/deserializer/dxfields.py\nindex 6dafa672..fd1cd046 100644\n--- a/src/plone/restapi/deserializer/dxfields.py\n+++ b/src/plone/restapi/deserializer/dxfields.py\n@@ -23,6 +23,7 @@\n from zope.schema.interfaces import ITime\n from zope.schema.interfaces import ITimedelta\n \n+import codecs\n import dateutil\n import six\n \n@@ -212,16 +213,18 @@ def __call__(self, value):\n                 # with the \'download\' key so we return the same stored file\n                 return getattr(self.field.context, self.field.__name__)\n \n-            content_type = value.get(u\'content-type\', content_type).encode(\n-                \'utf8\')\n-            filename = value.get(u\'filename\', filename)\n-            if u\'encoding\' in value:\n-                data = value.get(\'data\', \'\').decode(value[u\'encoding\'])\n-            else:\n-                data = value.get(\'data\', \'\')\n+            content_type = value.get(\'content-type\', content_type)\n+            filename = value.get(\'filename\', filename)\n+            data = value.get(\'data\', \'\')\n+            if isinstance(data, six.text_type):\n+                data = data.encode(\'utf-8\')\n+            if \'encoding\' in value:\n+                data = codecs.decode(data, value[\'encoding\'])\n+            if isinstance(data, six.text_type):\n+                data = data.encode(\'utf-8\')\n         elif isinstance(value, TUSUpload):\n             content_type = value.metadata().get(\n-                \'content-type\', content_type).encode(\'utf8\')\n+                \'content-type\', content_type)\n             filename = value.metadata().get(\'filename\', filename)\n             data = value.open()\n         else:\n@@ -229,6 +232,8 @@ def __call__(self, value):\n \n         # Convert if we have data\n         if data:\n+            if six.PY2:\n+                content_type = content_type.encode(\'utf8\')\n             value = self.field._type(\n                 data=data, contentType=content_type, filename=filename)\n         else:\n@@ -247,9 +252,9 @@ def __call__(self, value):\n         content_type = self.field.default_mime_type\n         encoding = \'utf8\'\n         if isinstance(value, dict):\n-            content_type = value.get(u\'content-type\', content_type)\n-            encoding = value.get(u\'encoding\', encoding)\n-            data = value.get(u\'data\', u\'\')\n+            content_type = value.get(\'content-type\', content_type)\n+            encoding = value.get(\'encoding\', encoding)\n+            data = value.get(\'data\', u\'\')\n         elif isinstance(value, TUSUpload):\n             content_type = value.metadata().get(\'content-type\', content_type)\n             with open(value.filepath, \'rb\') as f:\ndiff --git a/src/plone/restapi/deserializer/relationfield.py b/src/plone/restapi/deserializer/relationfield.py\nindex ccbbc7a4..ec3e8bc2 100644\n--- a/src/plone/restapi/deserializer/relationfield.py\n+++ b/src/plone/restapi/deserializer/relationfield.py\n@@ -30,17 +30,18 @@ def __call__(self, value):\n             intids = queryUtility(IIntIds)\n             obj = intids.queryObject(value)\n         elif isinstance(value, six.string_types):\n+            if six.PY2 and isinstance(value, six.text_type):\n+                value = value.encode(\'utf8\')\n             portal = getMultiAdapter((self.context, self.request),\n                                      name=\'plone_portal_state\').portal()\n             portal_url = portal.absolute_url()\n             if value.startswith(portal_url):\n                 # Resolve by URL\n                 obj = portal.restrictedTraverse(\n-                    value[len(portal_url) + 1:].encode(\'utf8\'), None)\n+                    value[len(portal_url) + 1:], None)\n             elif value.startswith(\'/\'):\n                 # Resolve by path\n-                obj = portal.restrictedTraverse(\n-                    value.encode(\'utf8\').lstrip(\'/\'), None)\n+                obj = portal.restrictedTraverse(value.lstrip(\'/\'), None)\n             else:\n                 # Resolve by UID\n                 catalog = getToolByName(self.context, \'portal_catalog\')\ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex 91070fc0..041400fc 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -45,7 +45,7 @@\n     <adapter factory=".converters.python_datetime_converter" />\n     <adapter factory=".converters.RichtextDXContextConverter" />\n     <adapter factory=".converters.set_converter" />\n-    <adapter factory=".converters.string_converter" />\n+    <adapter factory=".converters.bytes_converter" />\n     <adapter factory=".converters.time_converter" />\n     <adapter factory=".converters.timedelta_converter" />\n     <adapter factory=".converters.tuple_converter" />\ndiff --git a/src/plone/restapi/serializer/converters.py b/src/plone/restapi/serializer/converters.py\nindex c866a71a..83529679 100644\n--- a/src/plone/restapi/serializer/converters.py\n+++ b/src/plone/restapi/serializer/converters.py\n@@ -86,9 +86,9 @@ def default_converter(value):\n         \' {0!r} ({1}) JSON compatible.\'.format(value, type(value)))\n \n \n-@adapter(str)\n+@adapter(bytes)\n @implementer(IJsonCompatible)\n-def string_converter(value):\n+def bytes_converter(value):\n     return safe_unicode(value, \'utf-8\')\n \n \ndiff --git a/src/plone/restapi/services/workflow/info.py b/src/plone/restapi/services/workflow/info.py\nindex ac8fd1e1..25a2aa94 100644\n--- a/src/plone/restapi/services/workflow/info.py\n+++ b/src/plone/restapi/services/workflow/info.py\n@@ -8,6 +8,7 @@\n from zope.component import adapter\n from zope.interface import Interface\n from zope.interface import implementer\n+import six\n \n \n @implementer(IExpandableElement)\n@@ -39,20 +40,24 @@ def __call__(self, expand=False):\n             if action[\'category\'] != \'workflow\':\n                 continue\n \n+            title = action[\'title\']\n+            if isinstance(title, six.binary_type):\n+                title = title.decode(\'utf8\')\n+\n             transitions.append({\n                 \'@id\': \'{}/@workflow/{}\'.format(\n                     self.context.absolute_url(), action[\'id\']),\n-                \'title\': self.context.translate(\n-                    action[\'title\'].decode(\'utf8\')),\n+                \'title\': self.context.translate(title),\n             })\n \n         for item, action in enumerate(history):\n-            history[item][\'title\'] = self.context.translate(\n-                wftool.getTitleForStateOnType(\n-                    action[\'review_state\'],\n-                    self.context.portal_type\n-                ).decode(\'utf8\')\n+            title = wftool.getTitleForStateOnType(\n+                action[\'review_state\'],\n+                self.context.portal_type\n             )\n+            if isinstance(title, six.binary_type):\n+                title = title.decode(\'utf8\')\n+            history[item][\'title\'] = self.context.translate(title)\n \n         result[\'workflow\'].update({\n             \'history\': json_compatible(history),\ndiff --git a/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp b/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\nindex 08ce461b..78b57fb3 100644\n--- a/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\n@@ -4,187 +4,187 @@ Content-Type: application/json\n {\n   "@components": {\n     "actions": {\n-      "document_actions": [], \n+      "document_actions": [],\n       "object": [\n         {\n-          "icon": "", \n-          "id": "view", \n+          "icon": "",\n+          "id": "view",\n           "title": "View"\n-        }, \n+        },\n         {\n-          "icon": "", \n-          "id": "edit", \n+          "icon": "",\n+          "id": "edit",\n           "title": "Edit"\n-        }, \n+        },\n         {\n-          "icon": "", \n-          "id": "folderContents", \n+          "icon": "",\n+          "id": "folderContents",\n           "title": "Contents"\n-        }, \n+        },\n         {\n-          "icon": "", \n-          "id": "history", \n+          "icon": "",\n+          "id": "history",\n           "title": "History"\n-        }, \n+        },\n         {\n-          "icon": "", \n-          "id": "local_roles", \n+          "icon": "",\n+          "id": "local_roles",\n           "title": "Sharing"\n         }\n-      ], \n+      ],\n       "object_buttons": [\n         {\n-          "icon": "", \n-          "id": "cut", \n+          "icon": "",\n+          "id": "cut",\n           "title": "Cut"\n-        }, \n+        },\n         {\n-          "icon": "", \n-          "id": "copy", \n+          "icon": "",\n+          "id": "copy",\n           "title": "Copy"\n-        }, \n+        },\n         {\n-          "icon": "", \n-          "id": "delete", \n+          "icon": "",\n+          "id": "delete",\n           "title": "Delete"\n-        }, \n+        },\n         {\n-          "icon": "", \n-          "id": "rename", \n+          "icon": "",\n+          "id": "rename",\n           "title": "Rename"\n         }\n-      ], \n+      ],\n       "portal_tabs": [\n         {\n-          "icon": "", \n-          "id": "index_html", \n+          "icon": "",\n+          "id": "index_html",\n           "title": "Home"\n         }\n-      ], \n+      ],\n       "site_actions": [\n         {\n-          "icon": "", \n-          "id": "sitemap", \n+          "icon": "",\n+          "id": "sitemap",\n           "title": "Site Map"\n-        }, \n+        },\n         {\n-          "icon": "", \n-          "id": "accessibility", \n+          "icon": "",\n+          "id": "accessibility",\n           "title": "Accessibility"\n-        }, \n+        },\n         {\n-          "icon": "", \n-          "id": "contact", \n+          "icon": "",\n+          "id": "contact",\n           "title": "Contact"\n         }\n-      ], \n+      ],\n       "user": [\n         {\n-          "icon": "", \n-          "id": "preferences", \n+          "icon": "",\n+          "id": "preferences",\n           "title": "Preferences"\n-        }, \n+        },\n         {\n-          "icon": "", \n-          "id": "dashboard", \n+          "icon": "",\n+          "id": "dashboard",\n           "title": "Dashboard"\n-        }, \n+        },\n         {\n-          "icon": "", \n-          "id": "plone_setup", \n+          "icon": "",\n+          "id": "plone_setup",\n           "title": "Site Setup"\n-        }, \n+        },\n         {\n-          "icon": "", \n-          "id": "logout", \n+          "icon": "",\n+          "id": "logout",\n           "title": "Log out"\n         }\n       ]\n-    }, \n+    },\n     "breadcrumbs": {\n-      "@id": "http://localhost:55001/plone/front-page/@breadcrumbs", \n+      "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n       "items": [\n         {\n-          "@id": "http://localhost:55001/plone/front-page", \n+          "@id": "http://localhost:55001/plone/front-page",\n           "title": "Welcome to Plone"\n         }\n       ]\n-    }, \n+    },\n     "navigation": {\n-      "@id": "http://localhost:55001/plone/front-page/@navigation", \n+      "@id": "http://localhost:55001/plone/front-page/@navigation",\n       "items": [\n         {\n-          "@id": "http://localhost:55001/plone", \n-          "description": "", \n+          "@id": "http://localhost:55001/plone",\n+          "description": "",\n           "title": "Home"\n-        }, \n+        },\n         {\n-          "@id": "http://localhost:55001/plone/front-page", \n-          "description": "Congratulations! You have successfully installed Plone.", \n+          "@id": "http://localhost:55001/plone/front-page",\n+          "description": "Congratulations! You have successfully installed Plone.",\n           "title": "Welcome to Plone"\n         }\n       ]\n-    }, \n+    },\n     "workflow": {\n-      "@id": "http://localhost:55001/plone/front-page/@workflow", \n+      "@id": "http://localhost:55001/plone/front-page/@workflow",\n       "history": [\n         {\n-          "action": null, \n-          "actor": "test_user_1_", \n-          "comments": "", \n-          "review_state": "private", \n-          "time": "2016-10-21T19:00:00+00:00", \n+          "action": null,\n+          "actor": "test_user_1_",\n+          "comments": "",\n+          "review_state": "private",\n+          "time": "2016-10-21T19:00:00+00:00",\n           "title": "Private"\n         }\n-      ], \n+      ],\n       "transitions": [\n         {\n-          "@id": "http://localhost:55001/plone/front-page/@workflow/publish", \n+          "@id": "http://localhost:55001/plone/front-page/@workflow/publish",\n           "title": "Publish"\n-        }, \n+        },\n         {\n-          "@id": "http://localhost:55001/plone/front-page/@workflow/submit", \n+          "@id": "http://localhost:55001/plone/front-page/@workflow/submit",\n           "title": "Submit for publication"\n         }\n       ]\n     }\n-  }, \n-  "@id": "http://localhost:55001/plone/front-page", \n-  "@type": "Document", \n-  "UID": "SomeUUID000000000000000000000001", \n-  "allow_discussion": false, \n-  "changeNote": "", \n-  "contributors": [], \n-  "created": "2016-01-21T01:14:48+00:00", \n+  },\n+  "@id": "http://localhost:55001/plone/front-page",\n+  "@type": "Document",\n+  "UID": "SomeUUID000000000000000000000001",\n+  "allow_discussion": false,\n+  "changeNote": "",\n+  "contributors": [],\n+  "created": "2016-01-21T01:14:48+00:00",\n   "creators": [\n     "test_user_1_"\n-  ], \n-  "description": "Congratulations! You have successfully installed Plone.", \n-  "effective": null, \n-  "exclude_from_nav": false, \n-  "expires": null, \n-  "id": "front-page", \n-  "is_folderish": false, \n-  "language": "", \n-  "layout": "document_view", \n-  "modified": "2016-01-21T01:24:11+00:00", \n+  ],\n+  "description": "Congratulations! You have successfully installed Plone.",\n+  "effective": null,\n+  "exclude_from_nav": false,\n+  "expires": null,\n+  "id": "front-page",\n+  "is_folderish": false,\n+  "language": "",\n+  "layout": "document_view",\n+  "modified": "2016-01-21T01:24:11+00:00",\n   "parent": {\n-    "@id": "http://localhost:55001/plone", \n-    "@type": "Plone Site", \n-    "description": "", \n+    "@id": "http://localhost:55001/plone",\n+    "@type": "Plone Site",\n+    "description": "",\n     "title": "Plone site"\n-  }, \n-  "relatedItems": [], \n-  "review_state": "private", \n-  "rights": "", \n-  "subjects": [], \n-  "table_of_contents": null, \n+  },\n+  "relatedItems": [],\n+  "review_state": "private",\n+  "rights": "",\n+  "subjects": [],\n+  "table_of_contents": null,\n   "text": {\n-    "content-type": "text/plain", \n-    "data": "<p>If you\'re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone mailing lists about this.</p>", \n+    "content-type": "text/plain",\n+    "data": "<p>If you&#x27;re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone mailing lists about this.</p>",\n     "encoding": "utf-8"\n-  }, \n-  "title": "Welcome to Plone", \n-  "version": "current", \n+  },\n+  "title": "Welcome to Plone",\n+  "version": "current",\n   "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/groups_created.resp b/src/plone/restapi/tests/http-examples/groups_created.resp\nindex d7611e18..52aea20d 100644\n--- a/src/plone/restapi/tests/http-examples/groups_created.resp\n+++ b/src/plone/restapi/tests/http-examples/groups_created.resp\n@@ -1,21 +1,21 @@\n HTTP/1.1 201 Created\n-Content-Type: application/json\n Location: http://localhost:55001/plone/@groups/fwt\n+Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/@groups/fwt", \n-  "description": "The Plone Framework Team", \n-  "email": "fwt@plone.org", \n-  "groupname": "fwt", \n-  "id": "fwt", \n-  "title": "Framework Team", \n+  "@id": "http://localhost:55001/plone/@groups/fwt",\n+  "description": "The Plone Framework Team",\n+  "email": "fwt@plone.org",\n+  "groupname": "fwt",\n+  "id": "fwt",\n+  "title": "Framework Team",\n   "users": {\n-    "@id": "http://localhost:55001/plone/@groups", \n+    "@id": "http://localhost:55001/plone/@groups",\n     "items": [\n-      "Administrators", \n-      "admin", \n-      "test_user_1_"\n-    ], \n+      "test_user_1_",\n+      "Administrators",\n+      "admin"\n+    ],\n     "items_total": 3\n   }\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/groups_get.resp b/src/plone/restapi/tests/http-examples/groups_get.resp\nindex 32616b25..149884db 100644\n--- a/src/plone/restapi/tests/http-examples/groups_get.resp\n+++ b/src/plone/restapi/tests/http-examples/groups_get.resp\n@@ -2,15 +2,15 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/@groups/ploneteam", \n-  "description": "We are Plone", \n-  "email": "ploneteam@plone.org", \n-  "groupname": "ploneteam", \n-  "id": "ploneteam", \n-  "title": "Plone Team", \n+  "@id": "http://localhost:55001/plone/@groups/ploneteam",\n+  "description": "We are Plone",\n+  "email": "ploneteam@plone.org",\n+  "groupname": "ploneteam",\n+  "id": "ploneteam",\n+  "title": "Plone Team",\n   "users": {\n-    "@id": "http://localhost:55001/plone/@groups/ploneteam", \n-    "items": [], \n+    "@id": "http://localhost:55001/plone/@groups/ploneteam",\n+    "items": [],\n     "items_total": 0\n   }\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/registry_get_list.resp b/src/plone/restapi/tests/http-examples/registry_get_list.resp\nindex 5a7cd103..854804f9 100644\n--- a/src/plone/restapi/tests/http-examples/registry_get_list.resp\n+++ b/src/plone/restapi/tests/http-examples/registry_get_list.resp\n@@ -6,7 +6,7 @@ Content-Type: application/json\n   "batching": {\n     "@id": "http://localhost:55001/plone/@registry",\n     "first": "http://localhost:55001/plone/@registry?b_start=0",\n-    "last": "http://localhost:55001/plone/@registry?b_start=1675",\n+    "last": "http://localhost:55001/plone/@registry?b_start=1650",\n     "next": "http://localhost:55001/plone/@registry?b_start=25"\n   },\n   "items": [\n@@ -495,5 +495,5 @@ Content-Type: application/json\n       "value": false\n     }\n   ],\n-  "items_total": 1680\n+  "items_total": 1673\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/roles.resp b/src/plone/restapi/tests/http-examples/roles.resp\nindex a52ec245..5e522e29 100644\n--- a/src/plone/restapi/tests/http-examples/roles.resp\n+++ b/src/plone/restapi/tests/http-examples/roles.resp\n@@ -3,28 +3,22 @@ Content-Type: application/json\n \n [\n   {\n-    "@id": "http://localhost:55001/plone/@roles/Contributor",\n-    "@type": "role",\n-    "id": "Contributor",\n-    "title": "Contributor"\n-  },\n-  {\n-    "@id": "http://localhost:55001/plone/@roles/Member",\n+    "@id": "http://localhost:55001/plone/@roles/Reader",\n     "@type": "role",\n-    "id": "Member",\n-    "title": "Member"\n+    "id": "Reader",\n+    "title": "Reader"\n   },\n   {\n-    "@id": "http://localhost:55001/plone/@roles/Site Administrator",\n+    "@id": "http://localhost:55001/plone/@roles/Contributor",\n     "@type": "role",\n-    "id": "Site Administrator",\n-    "title": "Site Administrator"\n+    "id": "Contributor",\n+    "title": "Contributor"\n   },\n   {\n-    "@id": "http://localhost:55001/plone/@roles/Reader",\n+    "@id": "http://localhost:55001/plone/@roles/Reviewer",\n     "@type": "role",\n-    "id": "Reader",\n-    "title": "Reader"\n+    "id": "Reviewer",\n+    "title": "Reviewer"\n   },\n   {\n     "@id": "http://localhost:55001/plone/@roles/Editor",\n@@ -33,10 +27,16 @@ Content-Type: application/json\n     "title": "Editor"\n   },\n   {\n-    "@id": "http://localhost:55001/plone/@roles/Reviewer",\n+    "@id": "http://localhost:55001/plone/@roles/Member",\n     "@type": "role",\n-    "id": "Reviewer",\n-    "title": "Reviewer"\n+    "id": "Member",\n+    "title": "Member"\n+  },\n+  {\n+    "@id": "http://localhost:55001/plone/@roles/Site Administrator",\n+    "@type": "role",\n+    "id": "Site Administrator",\n+    "title": "Site Administrator"\n   },\n   {\n     "@id": "http://localhost:55001/plone/@roles/Manager",\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp b/src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp\nindex abc02d33..7fac7fe3 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp\n@@ -2,24 +2,24 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/front-page/@workflow", \n+  "@id": "http://localhost:55001/plone/front-page/@workflow",\n   "history": [\n     {\n-      "action": null, \n-      "actor": "test_user_1_", \n-      "comments": "", \n-      "review_state": "private", \n-      "time": "2016-10-21T19:00:00+00:00", \n+      "action": null,\n+      "actor": "test_user_1_",\n+      "comments": "",\n+      "review_state": "private",\n+      "time": "2016-10-21T19:00:00+00:00",\n       "title": "Privado"\n     }\n-  ], \n+  ],\n   "transitions": [\n     {\n-      "@id": "http://localhost:55001/plone/front-page/@workflow/publish", \n+      "@id": "http://localhost:55001/plone/front-page/@workflow/publish",\n       "title": "Publicar"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/front-page/@workflow/submit", \n+      "@id": "http://localhost:55001/plone/front-page/@workflow/submit",\n       "title": "Enviar para publicaci\\u00f3n"\n     }\n   ]\ndiff --git a/src/plone/restapi/tests/http-examples/workflow_get.resp b/src/plone/restapi/tests/http-examples/workflow_get.resp\nindex 6c365e9e..beee904b 100644\n--- a/src/plone/restapi/tests/http-examples/workflow_get.resp\n+++ b/src/plone/restapi/tests/http-examples/workflow_get.resp\n@@ -2,24 +2,24 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/front-page/@workflow", \n+  "@id": "http://localhost:55001/plone/front-page/@workflow",\n   "history": [\n     {\n-      "action": null, \n-      "actor": "test_user_1_", \n-      "comments": "", \n-      "review_state": "private", \n-      "time": "2016-10-21T19:00:00+00:00", \n+      "action": null,\n+      "actor": "test_user_1_",\n+      "comments": "",\n+      "review_state": "private",\n+      "time": "2016-10-21T19:00:00+00:00",\n       "title": "Private"\n     }\n-  ], \n+  ],\n   "transitions": [\n     {\n-      "@id": "http://localhost:55001/plone/front-page/@workflow/publish", \n+      "@id": "http://localhost:55001/plone/front-page/@workflow/publish",\n       "title": "Publish"\n-    }, \n+    },\n     {\n-      "@id": "http://localhost:55001/plone/front-page/@workflow/submit", \n+      "@id": "http://localhost:55001/plone/front-page/@workflow/submit",\n       "title": "Submit for publication"\n     }\n   ]\ndiff --git a/src/plone/restapi/tests/http-examples/workflow_post_with_body.resp b/src/plone/restapi/tests/http-examples/workflow_post_with_body.resp\nindex 1f3582d7..3c2342ee 100644\n--- a/src/plone/restapi/tests/http-examples/workflow_post_with_body.resp\n+++ b/src/plone/restapi/tests/http-examples/workflow_post_with_body.resp\n@@ -2,10 +2,10 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "action": "publish", \n-  "actor": "admin", \n-  "comments": "Publishing my folder...", \n-  "review_state": "published", \n-  "time": "2016-10-21T19:05:00+00:00", \n+  "action": "publish",\n+  "actor": "admin",\n+  "comments": "Publishing my folder...",\n+  "review_state": "published",\n+  "time": "2016-10-21T15:05:00+00:00",\n   "title": "Published with accent \\u00e9"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex e19100a7..550f4dea 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -56,12 +56,12 @@ def deserialize(self, fieldname, value):\n                                        IFieldDeserializer)\n         return deserializer(value)\n \n-    def test_ascii_deserialization_returns_bytestring(self):\n+    def test_ascii_deserialization_returns_native_string(self):\n         value = self.deserialize(\'test_ascii_field\', u\'Foo\')\n         self.assertTrue(isinstance(value, str), \'Not a <str>\')\n-        self.assertEqual(b\'Foo\', value)\n+        self.assertEqual(\'Foo\', value)\n \n-    def test_asciiline_deserialization_returns_bytestring(self):\n+    def test_asciiline_deserialization_returns_native_string(self):\n         value = self.deserialize(\'test_asciiline_field\', u\'Foo\')\n         self.assertTrue(isinstance(value, str), \'Not a <str>\')\n         self.assertEqual(\'Foo\', value)\n@@ -253,7 +253,7 @@ def test_namedfield_deserialization_decodes_value(self):\n             u\'data\': u\'U3BhbSBhbmQgZWdncyE=\',\n             u\'encoding\': u\'base64\',\n         })\n-        self.assertEquals(\'Spam and eggs!\', value.data)\n+        self.assertEquals(b\'Spam and eggs!\', value.data)\n \n     def test_namedfield_deserialization_sets_content_type(self):\n         value = self.deserialize(\'test_namedfile_field\', {\n@@ -275,7 +275,7 @@ def test_namedfile_deserialization_returns_namedfile(self):\n         })\n         self.assertTrue(isinstance(value, namedfile.NamedFile),\n                         \'Not a <NamedFile>\')\n-        self.assertEqual(\'Spam and eggs!\', value.data)\n+        self.assertEqual(b\'Spam and eggs!\', value.data)\n \n     def test_namedimage_deserialization_returns_namedimage(self):\n         value = self.deserialize(\'test_namedimage_field\', {\n@@ -285,7 +285,7 @@ def test_namedimage_deserialization_returns_namedimage(self):\n         })\n         self.assertTrue(isinstance(value, namedfile.NamedImage),\n                         \'Not a <NamedImage>\')\n-        self.assertTrue(value.data.startswith(\'GIF89a\'))\n+        self.assertTrue(value.data.startswith(b\'GIF89a\'))\n \n     def test_namedblobfile_deserialization_returns_namedblobfile(self):\n         value = self.deserialize(\'test_namedblobfile_field\', {\n@@ -293,7 +293,7 @@ def test_namedblobfile_deserialization_returns_namedblobfile(self):\n         })\n         self.assertTrue(isinstance(value, namedfile.NamedBlobFile),\n                         \'Not a <NamedBlobFile>\')\n-        self.assertEqual(\'Spam and eggs!\', value.data)\n+        self.assertEqual(b\'Spam and eggs!\', value.data)\n \n     def test_namedblobimage_deserialization_returns_namedblobimage(self):\n         value = self.deserialize(\'test_namedblobimage_field\', {\n@@ -303,7 +303,7 @@ def test_namedblobimage_deserialization_returns_namedblobimage(self):\n         })\n         self.assertTrue(isinstance(value, namedfile.NamedBlobImage),\n                         \'Not a <NamedBlobImage>\')\n-        self.assertTrue(value.data.startswith(\'GIF89a\'))\n+        self.assertTrue(value.data.startswith(b\'GIF89a\'))\n \n     def test_namedblobimage_deserialization_fed_with_null_removes_image(self):\n         # null in json translates to None in python.\n@@ -379,13 +379,13 @@ def test_datetime_deserializer_validates_value(self):\n \n     def test_collection_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n-            self.deserialize(\'test_list_value_type_field\', [1, \'2\', 3])\n+            self.deserialize(\'test_list_value_type_field\', [1, b\'2\', 3])\n \n         # This validation error is actually produced by the\n         # DefaultFieldDeserializer that the CollectionFieldDeserializer will\n         # delegate to for deserializing collection items.\n         self.assertEqual(u\'Object is of wrong type.\', cm.exception.doc())\n-        self.assertEqual((\'2\', six.integer_types, \'\'), cm.exception.args)\n+        self.assertEqual((b\'2\', six.integer_types, \'\'), cm.exception.args)\n \n     def test_dict_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n@@ -394,8 +394,16 @@ def test_dict_deserializer_validates_value(self):\n         # This validation error is actually produced by the\n         # DefaultFieldDeserializer that the DictFieldSerializer will delegate\n         # to for deserializing keys and values.\n-        self.assertEqual(u\'Object is of wrong type.\', cm.exception.doc())\n-        self.assertEqual((\'k\', six.integer_types, \'\'), cm.exception.args)\n+        # We check for two sets of exception details\n+        # because zope.schema changed its exception...\n+        self.assertIn(cm.exception.doc(), (\n+            u\'Object is of wrong type.\',\n+            u\'Invalid int literal.\',\n+        ))\n+        self.assertIn(cm.exception.args, (\n+            (\'k\', (int,), \'\'),\n+            ("invalid literal for int() with base 10: \'k\'",),\n+        ))\n \n     def test_time_deserializer_handles_invalid_value(self):\n         with self.assertRaises(ValueError) as cm:\n@@ -480,6 +488,6 @@ def constraint(self, value):\n                                        IFieldDeserializer)\n \n         with self.assertRaises(ConstraintNotSatisfied):\n-            deserializer("not an int")\n+            deserializer(b"not an int")\n \n         self.assertEqual(42, deserializer(42))\ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex dc414551..ac2f06b6 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -80,13 +80,13 @@ def test_bool_field_serialization_returns_false(self):\n         self.assertEqual(False, value)\n \n     def test_bytes_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_bytes_field\', \'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\')\n+        value = self.serialize(\'test_bytes_field\', b\'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\')\n         self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'\\xe4\\xf6\\xfc\', value)\n \n     def test_bytesline_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_bytesline_field\',\n-                               \'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\')\n+                               b\'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\')\n         self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'\\xe4\\xf6\\xfc\', value)\n \ndiff --git a/src/plone/restapi/tests/test_pas.py b/src/plone/restapi/tests/test_pas.py\nindex c2c20e2e..4a30e18d 100644\n--- a/src/plone/restapi/tests/test_pas.py\n+++ b/src/plone/restapi/tests/test_pas.py\n@@ -69,16 +69,16 @@ def test_authenticate_credentials_with_valid_token(self):\n         creds[\'extractor\'] = \'jwt_auth\'\n         creds[\'token\'] = self.plugin.create_token(\'admin\')\n         self.assertEqual(\n-            (b\'admin\', b\'admin\'),\n+            (\'admin\', \'admin\'),\n             self.plugin.authenticateCredentials(creds))\n \n-    def test_authenticate_credentials_returns_byte_string(self):\n+    def test_authenticate_credentials_returns_native_string(self):\n         creds = {}\n         creds[\'extractor\'] = \'jwt_auth\'\n         creds[\'token\'] = self.plugin.create_token(\'admin\')\n         self.assertIsInstance(\n             self.plugin.authenticateCredentials(creds)[0],\n-            bytes\n+            str,\n         )\n \n     def test_decode_token_after_key_rotation(self):\ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex 5a7733c5..3e7b3275 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -266,7 +266,7 @@ def test_serialize_image(self):\n         self.portal.invokeFactory(\'Image\', id=\'image1\', title=\'Image 1\')\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n         self.portal.image1.image = NamedBlobImage(\n-            data=open(image_file, \'r\').read(),\n+            data=open(image_file, \'rb\').read(),\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-09-24T22:19:55-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/bc363f3296a0ab5489b1a84a005549574ca97291

More fixes

Files changed:
M src/plone/restapi/deserializer/__init__.py
M src/plone/restapi/services/content/tus.py
M src/plone/restapi/tests/http-examples/comments_add_root.resp
M src/plone/restapi/tests/http-examples/comments_add_sub.resp
M src/plone/restapi/tests/http-examples/comments_update.resp
M src/plone/restapi/tests/http-examples/groups_created.resp
M src/plone/restapi/tests/http-examples/lock.resp
M src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp
M src/plone/restapi/tests/http-examples/lock_update.resp
M src/plone/restapi/tests/http-examples/refresh_lock.resp
M src/plone/restapi/tests/http-examples/roles.resp
M src/plone/restapi/tests/http-examples/tusreplace_patch.req
M src/plone/restapi/tests/http-examples/tusreplace_patch.resp
M src/plone/restapi/tests/http-examples/tusreplace_post.resp
M src/plone/restapi/tests/http-examples/tusupload_head.resp
M src/plone/restapi/tests/http-examples/tusupload_patch.req
M src/plone/restapi/tests/http-examples/tusupload_patch.resp
M src/plone/restapi/tests/http-examples/tusupload_patch_finalized.req
M src/plone/restapi/tests/http-examples/tusupload_patch_finalized.resp
M src/plone/restapi/tests/http-examples/tusupload_post.resp
M src/plone/restapi/tests/http-examples/workflow_post.resp
M src/plone/restapi/tests/mixin_ordering.py
M src/plone/restapi/tests/test_atcontent_deserializer.py
M src/plone/restapi/tests/test_atcontent_serializer.py
M src/plone/restapi/tests/test_atfield_deserializer.py
M src/plone/restapi/tests/test_atfield_serializer.py
M src/plone/restapi/tests/test_batching.py
M src/plone/restapi/tests/test_content_local_roles.py
M src/plone/restapi/tests/test_copymove.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_dxcontent_deserializer.py
M src/plone/restapi/tests/test_dxcontent_serializer.py
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_dxfield_serializer.py
M src/plone/restapi/tests/test_functional_auth.py
M src/plone/restapi/tests/test_roles.py
M src/plone/restapi/tests/test_search.py
M src/plone/restapi/tests/test_search_utils.py
M src/plone/restapi/tests/test_serializer.py
M src/plone/restapi/tests/test_serializer_catalog.py
M src/plone/restapi/tests/test_serializer_converters.py
M src/plone/restapi/tests/test_services.py
M src/plone/restapi/tests/test_services_email_notification.py
M src/plone/restapi/tests/test_services_email_send.py
M src/plone/restapi/tests/test_services_principals.py
M src/plone/restapi/tests/test_services_tiles.py
M src/plone/restapi/tests/test_services_types.py
M src/plone/restapi/tests/test_services_users.py
M src/plone/restapi/tests/test_setup.py
M src/plone/restapi/tests/test_site_deserializer.py
M src/plone/restapi/tests/test_site_serializer.py
M src/plone/restapi/tests/test_tus.py
M src/plone/restapi/tests/test_types.py

b'diff --git a/src/plone/restapi/deserializer/__init__.py b/src/plone/restapi/deserializer/__init__.py\nindex a4f6bdbb..58207c54 100644\n--- a/src/plone/restapi/deserializer/__init__.py\n+++ b/src/plone/restapi/deserializer/__init__.py\n@@ -6,7 +6,7 @@\n \n def json_body(request):\n     try:\n-        data = json.loads(request.get(\'BODY\', \'{}\'))\n+        data = json.loads(request.get(\'BODY\') or \'{}\')\n     except ValueError:\n         raise DeserializationError(\'No JSON object could be decoded\')\n     if not isinstance(data, dict):\ndiff --git a/src/plone/restapi/services/content/tus.py b/src/plone/restapi/services/content/tus.py\nindex 2596df99..49139a99 100644\n--- a/src/plone/restapi/services/content/tus.py\n+++ b/src/plone/restapi/services/content/tus.py\n@@ -106,7 +106,9 @@ def reply(self):\n         for item in self.request.getHeader(\'Upload-Metadata\', \'\').split(\',\'):\n             key_value = item.split()\n             if len(key_value) == 2:\n-                metadata[key_value[0].lower()] = b64decode(key_value[1])\n+                key = key_value[0].lower()\n+                value = b64decode(key_value[1]).decode(\'utf-8\')\n+                metadata[key] = value\n         metadata[\'length\'] = length\n         if self.__name__.endswith(\'@tus-replace\'):\n             metadata[\'mode\'] = \'replace\'\n@@ -211,7 +213,10 @@ def reply(self):\n             return self.error(\n                 \'Bad Request\', \'Missing or invalid Upload-Offset header\')\n \n-        tus_upload.write(self.request._file, offset)\n+        request_body = self.request._file\n+        if hasattr(request_body, \'raw\'):  # Unwrap io.BufferedRandom\n+            request_body = request_body.raw\n+        tus_upload.write(request_body, offset)\n \n         if tus_upload.finished:\n             offset = tus_upload.offset()\ndiff --git a/src/plone/restapi/tests/http-examples/comments_add_root.resp b/src/plone/restapi/tests/http-examples/comments_add_root.resp\nindex 80279137..e0cf0dc3 100644\n--- a/src/plone/restapi/tests/http-examples/comments_add_root.resp\n+++ b/src/plone/restapi/tests/http-examples/comments_add_root.resp\n@@ -1,3 +1,4 @@\n HTTP/1.1 204 No Content\n Location: http://localhost:55001/plone/front-page/@comments/123456\n+Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/comments_add_sub.resp b/src/plone/restapi/tests/http-examples/comments_add_sub.resp\nindex 80279137..e0cf0dc3 100644\n--- a/src/plone/restapi/tests/http-examples/comments_add_sub.resp\n+++ b/src/plone/restapi/tests/http-examples/comments_add_sub.resp\n@@ -1,3 +1,4 @@\n HTTP/1.1 204 No Content\n Location: http://localhost:55001/plone/front-page/@comments/123456\n+Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/comments_update.resp b/src/plone/restapi/tests/http-examples/comments_update.resp\nindex 80279137..e0cf0dc3 100644\n--- a/src/plone/restapi/tests/http-examples/comments_update.resp\n+++ b/src/plone/restapi/tests/http-examples/comments_update.resp\n@@ -1,3 +1,4 @@\n HTTP/1.1 204 No Content\n Location: http://localhost:55001/plone/front-page/@comments/123456\n+Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/groups_created.resp b/src/plone/restapi/tests/http-examples/groups_created.resp\nindex 52aea20d..97aa7871 100644\n--- a/src/plone/restapi/tests/http-examples/groups_created.resp\n+++ b/src/plone/restapi/tests/http-examples/groups_created.resp\n@@ -12,9 +12,9 @@ Content-Type: application/json\n   "users": {\n     "@id": "http://localhost:55001/plone/@groups",\n     "items": [\n-      "test_user_1_",\n       "Administrators",\n-      "admin"\n+      "admin",\n+      "test_user_1_"\n     ],\n     "items_total": 3\n   }\ndiff --git a/src/plone/restapi/tests/http-examples/lock.resp b/src/plone/restapi/tests/http-examples/lock.resp\nindex 06da01d4..34ad56ee 100644\n--- a/src/plone/restapi/tests/http-examples/lock.resp\n+++ b/src/plone/restapi/tests/http-examples/lock.resp\n@@ -2,11 +2,11 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "creator": "admin", \n-  "locked": true, \n-  "name": "plone.locking.stealable", \n-  "stealable": true, \n-  "time": 1477076400.0, \n-  "timeout": 600, \n+  "creator": "admin",\n+  "locked": true,\n+  "name": "plone.locking.stealable",\n+  "stealable": true,\n+  "time": 1477076400.0,\n+  "timeout": 600,\n   "token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp b/src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp\nindex e3927240..5aec6042 100644\n--- a/src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp\n+++ b/src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp\n@@ -2,11 +2,11 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "creator": "admin", \n-  "locked": true, \n-  "name": "plone.locking.stealable", \n-  "stealable": true, \n-  "time": 1477076400.0, \n-  "timeout": 3600, \n+  "creator": "admin",\n+  "locked": true,\n+  "name": "plone.locking.stealable",\n+  "stealable": true,\n+  "time": 1477076400.0,\n+  "timeout": 3600,\n   "token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/lock_update.resp b/src/plone/restapi/tests/http-examples/lock_update.resp\nindex 0074ded3..460c2259 100644\n--- a/src/plone/restapi/tests/http-examples/lock_update.resp\n+++ b/src/plone/restapi/tests/http-examples/lock_update.resp\n@@ -1,2 +1,3 @@\n HTTP/1.1 204 No Content\n+Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/refresh_lock.resp b/src/plone/restapi/tests/http-examples/refresh_lock.resp\nindex 06da01d4..34ad56ee 100644\n--- a/src/plone/restapi/tests/http-examples/refresh_lock.resp\n+++ b/src/plone/restapi/tests/http-examples/refresh_lock.resp\n@@ -2,11 +2,11 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "creator": "admin", \n-  "locked": true, \n-  "name": "plone.locking.stealable", \n-  "stealable": true, \n-  "time": 1477076400.0, \n-  "timeout": 600, \n+  "creator": "admin",\n+  "locked": true,\n+  "name": "plone.locking.stealable",\n+  "stealable": true,\n+  "time": 1477076400.0,\n+  "timeout": 600,\n   "token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/roles.resp b/src/plone/restapi/tests/http-examples/roles.resp\nindex 5e522e29..67f3f15f 100644\n--- a/src/plone/restapi/tests/http-examples/roles.resp\n+++ b/src/plone/restapi/tests/http-examples/roles.resp\n@@ -8,30 +8,30 @@ Content-Type: application/json\n     "id": "Reader",\n     "title": "Reader"\n   },\n-  {\n-    "@id": "http://localhost:55001/plone/@roles/Contributor",\n-    "@type": "role",\n-    "id": "Contributor",\n-    "title": "Contributor"\n-  },\n-  {\n-    "@id": "http://localhost:55001/plone/@roles/Reviewer",\n-    "@type": "role",\n-    "id": "Reviewer",\n-    "title": "Reviewer"\n-  },\n   {\n     "@id": "http://localhost:55001/plone/@roles/Editor",\n     "@type": "role",\n     "id": "Editor",\n     "title": "Editor"\n   },\n+  {\n+    "@id": "http://localhost:55001/plone/@roles/Contributor",\n+    "@type": "role",\n+    "id": "Contributor",\n+    "title": "Contributor"\n+  },\n   {\n     "@id": "http://localhost:55001/plone/@roles/Member",\n     "@type": "role",\n     "id": "Member",\n     "title": "Member"\n   },\n+  {\n+    "@id": "http://localhost:55001/plone/@roles/Reviewer",\n+    "@type": "role",\n+    "id": "Reviewer",\n+    "title": "Reviewer"\n+  },\n   {\n     "@id": "http://localhost:55001/plone/@roles/Site Administrator",\n     "@type": "role",\ndiff --git a/src/plone/restapi/tests/http-examples/tusreplace_patch.req b/src/plone/restapi/tests/http-examples/tusreplace_patch.req\nindex 6230eb5a..62bac258 100644\n--- a/src/plone/restapi/tests/http-examples/tusreplace_patch.req\n+++ b/src/plone/restapi/tests/http-examples/tusreplace_patch.req\n@@ -1,8 +1,7 @@\n-PATCH /plone/myfile/@tus-upload/4e465958b24a46ec8657e6f3be720991 HTTP/1.1\n+abcdefghPATCH /plone/myfile/@tus-upload/4e465958b24a46ec8657e6f3be720991 HTTP/1.1\n Accept: application/json\n Authorization: Basic YWRtaW46c2VjcmV0\n Tus-Resumable: 1.0.0\n Upload-Offset: 0\n Content-Type: application/offset+octet-stream\n \n-abcdefgh\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/tusreplace_patch.resp b/src/plone/restapi/tests/http-examples/tusreplace_patch.resp\nindex faf25c3f..4b1bb83f 100644\n--- a/src/plone/restapi/tests/http-examples/tusreplace_patch.resp\n+++ b/src/plone/restapi/tests/http-examples/tusreplace_patch.resp\n@@ -1,5 +1,47 @@\n-HTTP/1.1 204 No Content\n-Upload-Offset: 8\n-Location: http://localhost:55001/plone/myfile\n-Tus-Resumable: 1.0.0\n+HTTP/1.1 500 Internal Server Error\n+Content-Type: application/json\n \n+{\n+  "message": "(<InterfaceClass plone.namedfile.interfaces.IStorage>, \'_io.BufferedReader\')",\n+  "traceback": [\n+    "File \\"/Users/davisagli/Plone/py3/src/Zope/src/ZPublisher/WSGIPublisher.py\\", line 128, in transaction_pubevents",\n+    "    yield",\n+    "",\n+    "  File \\"/Users/davisagli/Plone/py3/src/Zope/src/ZPublisher/WSGIPublisher.py\\", line 270, in publish_module",\n+    "    response = _publish(request, new_mod_info)",\n+    "",\n+    "  File \\"/Users/davisagli/Plone/py3/src/Zope/src/ZPublisher/WSGIPublisher.py\\", line 210, in publish",\n+    "    bind=1)",\n+    "",\n+    "  File \\"/Users/davisagli/Plone/py3/src/Zope/src/ZPublisher/mapply.py\\", line 85, in mapply",\n+    "    return debug(object, args, context)",\n+    "",\n+    "  File \\"/Users/davisagli/Plone/py3/src/Zope/src/ZPublisher/WSGIPublisher.py\\", line 57, in call_object",\n+    "    return obj(*args)",\n+    "",\n+    "  File \\"/Users/davisagli/Plone/py3/src/plone.restapi/src/plone/restapi/services/content/tus.py\\", line 63, in __call__",\n+    "    return self.render()",\n+    "",\n+    "  File \\"/Users/davisagli/Plone/py3/src/plone.restapi/src/plone/restapi/services/__init__.py\\", line 19, in render",\n+    "    content = self.reply()",\n+    "",\n+    "  File \\"/Users/davisagli/Plone/py3/src/plone.restapi/src/plone/restapi/services/content/tus.py\\", line 261, in reply",\n+    "    deserializer(data={fieldname: tus_upload})",\n+    "",\n+    "  File \\"/Users/davisagli/Plone/py3/src/plone.restapi/src/plone/restapi/deserializer/dxcontent.py\\", line 88, in __call__",\n+    "    value = deserializer(data[name])",\n+    "",\n+    "  File \\"/Users/davisagli/Plone/py3/src/plone.restapi/src/plone/restapi/deserializer/dxfields.py\\", line 238, in __call__",\n+    "    data=data, contentType=content_type, filename=filename)",\n+    "",\n+    "  File \\"/Users/davisagli/Plone/py3/src/plone.namedfile/plone/namedfile/file.py\\", line 331, in __init__",\n+    "    self._setData(data)",\n+    "",\n+    "  File \\"/Users/davisagli/Plone/py3/src/plone.namedfile/plone/namedfile/file.py\\", line 349, in _setData",\n+    "    storable = getUtility(IStorage, name=dottedName)",\n+    "",\n+    "  File \\"/Users/davisagli/.buildout/eggs/zope.component-4.4.1-py3.6.egg/zope/component/_api.py\\", line 169, in getUtility",\n+    "    raise ComponentLookupError(interface, name)"\n+  ],\n+  "type": "ComponentLookupError"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/tusreplace_post.resp b/src/plone/restapi/tests/http-examples/tusreplace_post.resp\nindex 088f3130..63899237 100644\n--- a/src/plone/restapi/tests/http-examples/tusreplace_post.resp\n+++ b/src/plone/restapi/tests/http-examples/tusreplace_post.resp\n@@ -1,4 +1,4 @@\n HTTP/1.1 201 Created\n-Tus-Resumable: 1.0.0\n Location: http://localhost:55001/plone/myfile/@tus-upload/4e465958b24a46ec8657e6f3be720991\n+Tus-Resumable: 1.0.0\n \ndiff --git a/src/plone/restapi/tests/http-examples/tusupload_head.resp b/src/plone/restapi/tests/http-examples/tusupload_head.resp\nindex 3401c5bb..7b5b91df 100644\n--- a/src/plone/restapi/tests/http-examples/tusupload_head.resp\n+++ b/src/plone/restapi/tests/http-examples/tusupload_head.resp\n@@ -1,5 +1,5 @@\n HTTP/1.1 200 OK\n-Upload-Offset: 3\n Upload-Length: 8\n+Upload-Offset: 3\n Tus-Resumable: 1.0.0\n \ndiff --git a/src/plone/restapi/tests/http-examples/tusupload_patch.req b/src/plone/restapi/tests/http-examples/tusupload_patch.req\nindex d355a0e1..5bec57cd 100644\n--- a/src/plone/restapi/tests/http-examples/tusupload_patch.req\n+++ b/src/plone/restapi/tests/http-examples/tusupload_patch.req\n@@ -1,8 +1,7 @@\n-PATCH /plone/folder/@tus-upload/032803b64ad746b3ab46d9223ea3d90f HTTP/1.1\n+abcPATCH /plone/folder/@tus-upload/032803b64ad746b3ab46d9223ea3d90f HTTP/1.1\n Accept: application/json\n Authorization: Basic YWRtaW46c2VjcmV0\n Tus-Resumable: 1.0.0\n Upload-Offset: 0\n Content-Type: application/offset+octet-stream\n \n-abc\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/tusupload_patch.resp b/src/plone/restapi/tests/http-examples/tusupload_patch.resp\nindex 7d3d9474..e9284266 100644\n--- a/src/plone/restapi/tests/http-examples/tusupload_patch.resp\n+++ b/src/plone/restapi/tests/http-examples/tusupload_patch.resp\n@@ -1,4 +1,4 @@\n HTTP/1.1 204 No Content\n-Upload-Offset: 3\n Tus-Resumable: 1.0.0\n+Upload-Offset: 3\n \ndiff --git a/src/plone/restapi/tests/http-examples/tusupload_patch_finalized.req b/src/plone/restapi/tests/http-examples/tusupload_patch_finalized.req\nindex 2682de17..553fbf40 100644\n--- a/src/plone/restapi/tests/http-examples/tusupload_patch_finalized.req\n+++ b/src/plone/restapi/tests/http-examples/tusupload_patch_finalized.req\n@@ -1,8 +1,7 @@\n-PATCH /plone/folder/@tus-upload/032803b64ad746b3ab46d9223ea3d90f HTTP/1.1\n+defghPATCH /plone/folder/@tus-upload/032803b64ad746b3ab46d9223ea3d90f HTTP/1.1\n Accept: application/json\n Authorization: Basic YWRtaW46c2VjcmV0\n Tus-Resumable: 1.0.0\n Upload-Offset: 3\n Content-Type: application/offset+octet-stream\n \n-defgh\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/tusupload_patch_finalized.resp b/src/plone/restapi/tests/http-examples/tusupload_patch_finalized.resp\nindex 4928d905..3ba1a088 100644\n--- a/src/plone/restapi/tests/http-examples/tusupload_patch_finalized.resp\n+++ b/src/plone/restapi/tests/http-examples/tusupload_patch_finalized.resp\n@@ -1,5 +1,5 @@\n HTTP/1.1 204 No Content\n-Upload-Offset: 8\n Location: http://localhost:55001/plone/folder/document-2016-10-21\n Tus-Resumable: 1.0.0\n+Upload-Offset: 8\n \ndiff --git a/src/plone/restapi/tests/http-examples/tusupload_post.resp b/src/plone/restapi/tests/http-examples/tusupload_post.resp\nindex ed4ee518..1f01bd93 100644\n--- a/src/plone/restapi/tests/http-examples/tusupload_post.resp\n+++ b/src/plone/restapi/tests/http-examples/tusupload_post.resp\n@@ -1,4 +1,4 @@\n HTTP/1.1 201 Created\n-Tus-Resumable: 1.0.0\n Location: http://localhost:55001/plone/folder/@tus-upload/032803b64ad746b3ab46d9223ea3d90f\n+Tus-Resumable: 1.0.0\n \ndiff --git a/src/plone/restapi/tests/http-examples/workflow_post.resp b/src/plone/restapi/tests/http-examples/workflow_post.resp\nindex 01375c56..af9efa1a 100644\n--- a/src/plone/restapi/tests/http-examples/workflow_post.resp\n+++ b/src/plone/restapi/tests/http-examples/workflow_post.resp\n@@ -2,10 +2,10 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "action": "publish", \n-  "actor": "admin", \n-  "comments": "", \n-  "review_state": "published", \n-  "time": "2016-10-21T19:05:00+00:00", \n+  "action": "publish",\n+  "actor": "admin",\n+  "comments": "",\n+  "review_state": "published",\n+  "time": "2016-10-21T15:05:00+00:00",\n   "title": "Published with accent \\u00e9"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/mixin_ordering.py b/src/plone/restapi/tests/mixin_ordering.py\nindex ad219fb5..e96de6ff 100644\n--- a/src/plone/restapi/tests/mixin_ordering.py\n+++ b/src/plone/restapi/tests/mixin_ordering.py\n@@ -10,7 +10,7 @@ class OrderingMixin():\n     def test_reorder(self):\n         # We run all this in one test, because of dependend ordering.\n         # initial situation\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', \'doc9\', ],  # noqa\n             self.folder.contentIds()\n         )\n@@ -19,7 +19,7 @@ def test_reorder(self):\n         # Move to top\n         data = {\'ordering\': {\'delta\': \'top\', \'obj_id\': \'doc9\'}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc9\', \'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', ],  # noqa\n             self.folder.contentIds()\n         )\n@@ -27,7 +27,7 @@ def test_reorder(self):\n         # Move to bottom\n         data = {\'ordering\': {\'delta\': \'bottom\', \'obj_id\': \'doc9\'}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', \'doc9\', ],  # noqa\n             self.folder.contentIds()\n         )\n@@ -35,7 +35,7 @@ def test_reorder(self):\n         # Delta up\n         data = {\'ordering\': {\'delta\': -2, \'obj_id\': \'doc5\'}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc5\', \'doc3\', \'doc4\', \'doc6\', \'doc7\', \'doc8\', \'doc9\', ],  # noqa\n             self.folder.contentIds()\n         )\n@@ -43,7 +43,7 @@ def test_reorder(self):\n         # Delta down\n         data = {\'ordering\': {\'delta\': 2, \'obj_id\': \'doc6\'}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc5\', \'doc3\', \'doc4\', \'doc7\', \'doc8\', \'doc6\', \'doc9\', ],  # noqa\n             self.folder.contentIds()\n         )\n@@ -52,7 +52,7 @@ def test_reorder(self):\n         # Move to top\n         data = {\'ordering\': {\'delta\': \'top\', \'obj_id\': \'doc8\', \'subset_ids\': [\'doc2\', \'doc3\', \'doc8\']}}  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc8\', \'doc5\', \'doc2\', \'doc4\', \'doc7\', \'doc3\', \'doc6\', \'doc9\'],  # noqa\n             self.folder.contentIds()\n         )\n@@ -60,7 +60,7 @@ def test_reorder(self):\n         # Move to bottom\n         data = {\'ordering\': {\'delta\': \'bottom\', \'obj_id\': \'doc8\', \'subset_ids\': [\'doc8\', \'doc2\', \'doc3\']}}  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc5\', \'doc3\', \'doc4\', \'doc7\', \'doc8\', \'doc6\', \'doc9\'],  # noqa\n             self.folder.contentIds()\n         )\n@@ -68,7 +68,7 @@ def test_reorder(self):\n         # Delta up\n         data = {\'ordering\': {\'delta\': -1, \'obj_id\': \'doc8\', \'subset_ids\': [\'doc2\', \'doc3\', \'doc8\']}}  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc5\', \'doc8\', \'doc4\', \'doc7\', \'doc3\', \'doc6\', \'doc9\'],  # noqa\n             self.folder.contentIds()\n         )\n@@ -76,14 +76,14 @@ def test_reorder(self):\n         # Delta down\n         data = {\'ordering\': {\'delta\': 1, \'obj_id\': \'doc2\', \'subset_ids\': [\'doc2\', \'doc8\', \'doc3\']}}  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc8\', \'doc5\', \'doc2\', \'doc4\', \'doc7\', \'doc3\', \'doc6\', \'doc9\'],  # noqa\n             self.folder.contentIds()\n         )\n \n     def test_reorder_subsetids(self):\n         # sanity check, initial situation\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', \'doc9\'],  # noqa\n             self.folder.contentIds()\n         )\n@@ -93,7 +93,7 @@ def test_reorder_subsetids(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=json.dumps(data), context=self.folder)\n \n-        self.assertEquals(\n+        self.assertEqual(\n             u\'Client/server ordering mismatch\',\n             str(cm.exception)\n         )\ndiff --git a/src/plone/restapi/tests/test_atcontent_deserializer.py b/src/plone/restapi/tests/test_atcontent_deserializer.py\nindex 395571d0..38eccf84 100644\n--- a/src/plone/restapi/tests/test_atcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_deserializer.py\n@@ -61,16 +61,16 @@ def deserialize(self, body=\'{}\', validate_all=False, create=False,\n     def test_deserializer_ignores_readonly_fields(self):\n         self.doc1.getField(\'testReadonlyField\').set(self.doc1, \'Readonly\')\n         self.deserialize(body=\'{"testReadonlyField": "Changed"}\')\n-        self.assertEquals(\'Readonly\', self.doc1.getTestReadonlyField())\n+        self.assertEqual(\'Readonly\', self.doc1.getTestReadonlyField())\n \n     def test_deserializer_updates_field_value(self):\n         self.deserialize(body=\'{"testStringField": "Updated"}\')\n-        self.assertEquals(\'Updated\', self.doc1.getTestStringField())\n+        self.assertEqual(\'Updated\', self.doc1.getTestStringField())\n \n     def test_deserializer_validates_content(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"testURLField": "Not an URL"}\')\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Validation failed(isURL): \'Not an URL\' is not a valid url.",\n             cm.exception.args[0][0][\'message\'])\n \n@@ -102,13 +102,13 @@ def test_deserializer_raises_if_required_value_is_missing(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"testStringField": "My Value"}\',\n                              validate_all=True)\n-        self.assertEquals(u\'TestRequiredField is required, please correct.\',\n+        self.assertEqual(u\'TestRequiredField is required, please correct.\',\n                           cm.exception.args[0][0][\'message\'])\n \n     def test_deserializer_succeeds_if_required_value_is_provided(self):\n         self.deserialize(body=\'{"testRequiredField": "My Value"}\',\n                          validate_all=True)\n-        self.assertEquals(u\'My Value\', self.portal.doc1.getTestRequiredField())\n+        self.assertEqual(u\'My Value\', self.portal.doc1.getTestRequiredField())\n \n     def test_post_validation(self):\n \n@@ -128,7 +128,7 @@ def __call__(self, request):\n             self.deserialize(body=\'{"testRequiredField": "My Value"}\',\n                              validate_all=True)\n \n-        self.assertEquals(\n+        self.assertEqual(\n             \'post_validation_error\', cm.exception.args[0][0][\'message\'])\n \n     def test_pre_validation(self):\n@@ -149,14 +149,14 @@ def __call__(self, request):\n             self.deserialize(body=\'{"testRequiredField": "My Value"}\',\n                              validate_all=True)\n \n-        self.assertEquals(\n+        self.assertEqual(\n             \'pre_validation_error\', cm.exception.args[0][0][\'message\'])\n \n     def test_set_layout(self):\n         current_layout = self.doc1.getLayout()\n         self.assertNotEquals(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n-        self.assertEquals(\'my_new_layout\', self.doc1.getLayout())\n+        self.assertEqual(\'my_new_layout\', self.doc1.getLayout())\n \n \n class TestValidationRequest(unittest.TestCase):\n@@ -173,16 +173,16 @@ def setUp(self):\n         self.request = ValidationRequest(self.layer[\'request\'], self.doc1)\n \n     def test_value_from_validation_request_using_key_access(self):\n-        self.assertEquals(\'Test Document\', self.request[\'title\'])\n+        self.assertEqual(\'Test Document\', self.request[\'title\'])\n \n     def test_value_from_validation_request_using_get(self):\n-        self.assertEquals(\'Test Document\', self.request.get(\'title\'))\n+        self.assertEqual(\'Test Document\', self.request.get(\'title\'))\n \n     def test_value_from_validation_request_form_using_key_access(self):\n-        self.assertEquals(\'Test Document\', self.request.form[\'title\'])\n+        self.assertEqual(\'Test Document\', self.request.form[\'title\'])\n \n     def test_value_from_validation_request_form_using_get(self):\n-        self.assertEquals(\'Test Document\', self.request.form.get(\'title\'))\n+        self.assertEqual(\'Test Document\', self.request.form.get(\'title\'))\n \n     def test_validation_request_contains_key(self):\n         self.assertIn(\'title\', self.request)\n@@ -195,21 +195,21 @@ def test_validation_request_key_access_raises_keyerror(self):\n             self.request[\'foo\']\n \n     def test_validation_request_get_returns_default_value(self):\n-        self.assertEquals(None, self.request.get(\'foo\'))\n+        self.assertEqual(None, self.request.get(\'foo\'))\n         marker = object()\n-        self.assertEquals(marker, self.request.get(\'foo\', marker))\n+        self.assertEqual(marker, self.request.get(\'foo\', marker))\n \n     def test_validation_request_form_key_access_raises_keyerror(self):\n         with self.assertRaises(KeyError):\n             self.request.form[\'foo\']\n \n     def test_validation_request_form_get_returns_default_value(self):\n-        self.assertEquals(None, self.request.form.get(\'foo\'))\n+        self.assertEqual(None, self.request.form.get(\'foo\'))\n         marker = object()\n-        self.assertEquals(marker, self.request.form.get(\'foo\', marker))\n+        self.assertEqual(marker, self.request.form.get(\'foo\', marker))\n \n     def test_value_from_real_request_using_key_access(self):\n-        self.assertEquals(\'GET\', self.request[\'REQUEST_METHOD\'])\n+        self.assertEqual(\'GET\', self.request[\'REQUEST_METHOD\'])\n \n     def test_value_form_real_request_using_get(self):\n-        self.assertEquals(\'GET\', self.request.get(\'REQUEST_METHOD\'))\n+        self.assertEqual(\'GET\', self.request.get(\'REQUEST_METHOD\'))\ndiff --git a/src/plone/restapi/tests/test_atcontent_serializer.py b/src/plone/restapi/tests/test_atcontent_serializer.py\nindex c0e4f6f9..5361ed18 100644\n--- a/src/plone/restapi/tests/test_atcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_serializer.py\n@@ -157,7 +157,7 @@ def test_get_layout(self):\n         current_layout = self.doc1.getLayout()\n         obj = self.serialize(self.doc1)\n         self.assertIn(\'layout\', obj)\n-        self.assertEquals(current_layout, obj[\'layout\'])\n+        self.assertEqual(current_layout, obj[\'layout\'])\n \n     def test_serializer_includes_expansion(self):\n         provideAdapter(\n@@ -182,4 +182,4 @@ def test_get_is_folderish_in_folder(self):\n                                      ISerializeToJson)\n         obj = serializer()\n         self.assertIn(\'is_folderish\', obj)\n-        self.assertEquals(True, obj[\'is_folderish\'])\n+        self.assertEqual(True, obj[\'is_folderish\'])\ndiff --git a/src/plone/restapi/tests/test_atfield_deserializer.py b/src/plone/restapi/tests/test_atfield_deserializer.py\nindex 44224ad5..c2009866 100644\n--- a/src/plone/restapi/tests/test_atfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_atfield_deserializer.py\n@@ -34,58 +34,58 @@ def test_string_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testStringField\', u\'K\xc3\xa4fer\')\n         self.assertTrue(\n             isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEquals(u\'K\xc3\xa4fer\', value)\n+        self.assertEqual(u\'K\xc3\xa4fer\', value)\n \n     def test_boolean_field_deserialization_returns_true(self):\n         value, kwargs = self.deserialize(\'testBooleanField\', True)\n         self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n-        self.assertEquals(True, value)\n+        self.assertEqual(True, value)\n \n     def test_boolean_field_deserialization_returns_false(self):\n         value, kwargs = self.deserialize(\'testBooleanField\', False)\n         self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n-        self.assertEquals(False, value)\n+        self.assertEqual(False, value)\n \n     def test_integer_field_deserialization_returns_integer_value(self):\n         value, kwargs = self.deserialize(\'testIntegerField\', 777)\n         self.assertTrue(isinstance(value, int), \'Not an <int>\')\n-        self.assertEquals(777, value)\n+        self.assertEqual(777, value)\n \n     def test_float_field_deserialization_returns_float_value(self):\n         value, kwargs = self.deserialize(\'testFloatField\', 1.5)\n         self.assertTrue(isinstance(value, float), \'Not a <float>\')\n-        self.assertEquals(1.5, value)\n+        self.assertEqual(1.5, value)\n \n     def test_fixedpoint_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testFixedPointField\', u\'1.1\')\n         self.assertTrue(\n             isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEquals(u\'1.1\', value)\n+        self.assertEqual(u\'1.1\', value)\n \n     def test_datetime_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testDateTimeField\',\n                                          u\'2015-12-20T19:51:06.375Z\')\n         self.assertTrue(\n             isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEquals(u\'2015-12-20T19:51:06.375Z\', value)\n+        self.assertEqual(u\'2015-12-20T19:51:06.375Z\', value)\n \n     def test_lines_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testLinesField\', u\'line1\\nline2\')\n         self.assertTrue(\n             isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEquals(\'line1\\nline2\', value)\n+        self.assertEqual(\'line1\\nline2\', value)\n \n     def test_lines_field_deserialization_returns_list(self):\n         value, kwargs = self.deserialize(\'testLinesField\',\n                                          [u\'line1\', u\'line2\'])\n         self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertEquals([u\'line1\', u\'line2\'], value)\n+        self.assertEqual([u\'line1\', u\'line2\'], value)\n \n     def test_file_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testFileField\', u\'Spam and eggs!\')\n         self.assertTrue(\n             isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEquals(u\'Spam and eggs!\', value)\n+        self.assertEqual(u\'Spam and eggs!\', value)\n \n     def test_file_field_deserialization_returns_decoded_value(self):\n         value, kwargs = self.deserialize(\'testFileField\', {\n@@ -93,7 +93,7 @@ def test_file_field_deserialization_returns_decoded_value(self):\n             u\'encoding\': u\'base64\',\n         })\n         self.assertTrue(isinstance(value, str), \'Not a <str>\')\n-        self.assertEquals(\'Spam and eggs!\', value)\n+        self.assertEqual(\'Spam and eggs!\', value)\n \n     def test_file_field_deserialization_returns_mimetype_and_filename(self):\n         value, kwargs = self.deserialize(\'testFileField\', {\n@@ -103,15 +103,15 @@ def test_file_field_deserialization_returns_mimetype_and_filename(self):\n         })\n         self.assertTrue(\n             isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEquals(u\'Spam and eggs!\', value)\n-        self.assertEquals(\'text/plain\', kwargs[u\'mimetype\'])\n-        self.assertEquals(\'doc.txt\', kwargs[u\'filename\'])\n+        self.assertEqual(u\'Spam and eggs!\', value)\n+        self.assertEqual(\'text/plain\', kwargs[u\'mimetype\'])\n+        self.assertEqual(\'doc.txt\', kwargs[u\'filename\'])\n \n     def test_text_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testTextField\', u\'K\xc3\xa4fer\')\n         self.assertTrue(\n             isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEquals(u\'K\xc3\xa4fer\', value)\n+        self.assertEqual(u\'K\xc3\xa4fer\', value)\n \n     def test_text_field_deserialization_returns_mimetype(self):\n         value, kwargs = self.deserialize(\'testTextField\', {\n@@ -120,8 +120,8 @@ def test_text_field_deserialization_returns_mimetype(self):\n         })\n         self.assertTrue(\n             isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEquals(u\'K\xc3\xa4fer\', value)\n-        self.assertEquals(\'text/html\', kwargs[u\'mimetype\'])\n+        self.assertEqual(u\'K\xc3\xa4fer\', value)\n+        self.assertEqual(\'text/html\', kwargs[u\'mimetype\'])\n \n     def test_image_field_deserialization_returns_mimetype_and_filename(self):\n         value, kwargs = self.deserialize(\'testImageField\', {\n@@ -133,14 +133,14 @@ def test_image_field_deserialization_returns_mimetype_and_filename(self):\n         self.assertTrue(\n             isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertTrue(value.startswith(\'GIF89a\'))\n-        self.assertEquals(\'image/gif\', kwargs[u\'mimetype\'])\n-        self.assertEquals(\'image.gif\', kwargs[u\'filename\'])\n+        self.assertEqual(\'image/gif\', kwargs[u\'mimetype\'])\n+        self.assertEqual(\'image.gif\', kwargs[u\'filename\'])\n \n     def test_blob_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testBlobField\', u\'Spam and eggs!\')\n         self.assertTrue(\n             isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEquals(u\'Spam and eggs!\', value)\n+        self.assertEqual(u\'Spam and eggs!\', value)\n \n     def test_blob_field_deserialization_returns_mimetype_and_filename(self):\n         value, kwargs = self.deserialize(\'testBlobField\', {\n@@ -150,9 +150,9 @@ def test_blob_field_deserialization_returns_mimetype_and_filename(self):\n         })\n         self.assertTrue(\n             isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEquals(u\'Spam and eggs!\', value)\n-        self.assertEquals(\'text/plain\', kwargs[u\'mimetype\'])\n-        self.assertEquals(\'doc.txt\', kwargs[u\'filename\'])\n+        self.assertEqual(u\'Spam and eggs!\', value)\n+        self.assertEqual(\'text/plain\', kwargs[u\'mimetype\'])\n+        self.assertEqual(\'doc.txt\', kwargs[u\'filename\'])\n \n     def test_blobfile_field_deserialization_returns_mimetype_and_filename(\n             self):\n@@ -163,9 +163,9 @@ def test_blobfile_field_deserialization_returns_mimetype_and_filename(\n         })\n         self.assertTrue(\n             isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEquals(u\'Spam and eggs!\', value)\n-        self.assertEquals(\'text/plain\', kwargs[u\'mimetype\'])\n-        self.assertEquals(\'doc.txt\', kwargs[u\'filename\'])\n+        self.assertEqual(u\'Spam and eggs!\', value)\n+        self.assertEqual(\'text/plain\', kwargs[u\'mimetype\'])\n+        self.assertEqual(\'doc.txt\', kwargs[u\'filename\'])\n \n     def test_blobimage_field_deserialization_returns_mimetype_and_filename(\n             self):\n@@ -178,8 +178,8 @@ def test_blobimage_field_deserialization_returns_mimetype_and_filename(\n         self.assertTrue(\n             isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertTrue(value.startswith(\'GIF89a\'))\n-        self.assertEquals(\'image/gif\', kwargs[u\'mimetype\'])\n-        self.assertEquals(\'image.gif\', kwargs[u\'filename\'])\n+        self.assertEqual(\'image/gif\', kwargs[u\'mimetype\'])\n+        self.assertEqual(\'image.gif\', kwargs[u\'filename\'])\n \n     def test_query_field_deserialization_requests_list(self):\n         query_data = [\n@@ -202,7 +202,7 @@ def test_reference_field_deserialization_returns_uid_in_list(self):\n         value, kwargs = self.deserialize(\'testReferenceField\',\n                                          u\'0fc0dac495034b869b3b90c9179499a9\')\n         self.assertTrue(isinstance(value, list), \'Not a <basestring>\')\n-        self.assertEquals([u\'0fc0dac495034b869b3b90c9179499a9\'], value)\n+        self.assertEqual([u\'0fc0dac495034b869b3b90c9179499a9\'], value)\n \n     def test_reference_field_deserialization_returns_uids(self):\n         value, kwargs = self.deserialize(\'testReferenceField\', [\n@@ -218,7 +218,7 @@ def test_reference_field_deserialization_returns_object_in_list(self):\n             \'ATTestDocument\', id=\'doc2\', title=\'Referenced Document\')]\n         value, kwargs = self.deserialize(\'testReferenceField\',\n                                          six.text_type(doc2.absolute_url()))\n-        self.assertEquals(doc2, value[0])\n+        self.assertEqual(doc2, value[0])\n \n     def test_reference_field_deserialization_returns_objects(self):\n         doc2 = self.portal[self.portal.invokeFactory(\n@@ -229,5 +229,5 @@ def test_reference_field_deserialization_returns_objects(self):\n             \'testReferenceField\',\n             [six.text_type(\n                 doc2.absolute_url()), six.text_type(doc3.absolute_url())])\n-        self.assertEquals(doc2, value[0])\n-        self.assertEquals(doc3, value[1])\n+        self.assertEqual(doc2, value[0])\n+        self.assertEqual(doc3, value[1])\ndiff --git a/src/plone/restapi/tests/test_atfield_serializer.py b/src/plone/restapi/tests/test_atfield_serializer.py\nindex ad9f4884..c74e915e 100644\n--- a/src/plone/restapi/tests/test_atfield_serializer.py\n+++ b/src/plone/restapi/tests/test_atfield_serializer.py\n@@ -105,7 +105,8 @@ def test_text_field_serialization_returns_dict(self):\n \n     def test_image_field_serialization_returns_dict(self):\n         image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        image_data = open(image_file, \'rb\').read()\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         fn = \'testImageField\'\n         with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n             value = self.serialize(\n@@ -184,7 +185,8 @@ def test_blobfile_field_serialization_returns_dict(self):\n \n     def test_blobimage_field_serialization_returns_dict(self):\n         image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        image_data = open(image_file, \'rb\').read()\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         fn = \'testBlobImageField\'\n         with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n             value = self.serialize(\ndiff --git a/src/plone/restapi/tests/test_batching.py b/src/plone/restapi/tests/test_batching.py\nindex d11e2ff5..206eaedc 100644\n--- a/src/plone/restapi/tests/test_batching.py\n+++ b/src/plone/restapi/tests/test_batching.py\n@@ -106,7 +106,7 @@ def test_contains_correct_batch_of_items(self):\n         response = self.api_session.get(\'/folder/@search?b_start=2&b_size=2\')\n \n         # Response should contain second batch of items\n-        self.assertEquals([\n+        self.assertEqual([\n             u\'/plone/folder/doc-2\',\n             u\'/plone/folder/doc-3\'],\n             result_paths(response.json()))\n@@ -173,7 +173,7 @@ def test_contains_correct_batch_of_items(self):\n         response = self.api_session.get(\'/collection?b_start=2&b_size=2\')\n \n         # Response should contain second batch of items\n-        self.assertEquals([\n+        self.assertEqual([\n             u\'/plone/folder/doc-2\',\n             u\'/plone/folder/doc-3\'],\n             result_paths(response.json()))\n@@ -235,7 +235,7 @@ def test_contains_correct_batch_of_items(self):\n         response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n \n         # Response should contain second batch of items\n-        self.assertEquals([\n+        self.assertEqual([\n             u\'/plone/folder/doc-3\',\n             u\'/plone/folder/doc-4\'],\n             result_paths(response.json()))\n@@ -293,7 +293,7 @@ def test_contains_correct_batch_of_items(self):\n         response = self.api_session.get(\'/?b_start=2&b_size=2\')\n \n         # Response should contain second batch of items\n-        self.assertEquals([\n+        self.assertEqual([\n             u\'/plone/doc-3\',\n             u\'/plone/doc-4\'],\n             result_paths(response.json()))\n@@ -375,7 +375,7 @@ def test_contains_correct_batch_of_items(self):\n         response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n \n         # Response should contain second batch of items\n-        self.assertEquals([\n+        self.assertEqual([\n             u\'/plone/folder/doc-3\',\n             u\'/plone/folder/doc-4\'],\n             result_paths(response.json()))\n@@ -463,9 +463,9 @@ def test_canonical_url_preserves_query_string_params(self):\n         parsed_url = urlparse(batch.canonical_url)\n         qs_params = dict(parse_qsl(parsed_url.query))\n \n-        self.assertEquals({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n-        self.assertEquals(\'nohost\', parsed_url.netloc)\n-        self.assertEquals(\'\', parsed_url.path)\n+        self.assertEqual({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n+        self.assertEqual(\'nohost\', parsed_url.netloc)\n+        self.assertEqual(\'\', parsed_url.path)\n \n     def test_canonical_url_preserves_list_like_query_string_params(self):\n         items = list(range(1, 26))\n@@ -477,7 +477,7 @@ def test_canonical_url_preserves_list_like_query_string_params(self):\n         # Argument lists (same query string parameter repeated multiple\n         # times) should be preserved.\n \n-        self.assertEquals(\n+        self.assertEqual(\n             set([(\'foolist\', \'1\'), (\'foolist\', \'2\')]),\n             set(parse_qsl(urlparse(batch.canonical_url).query))\n         )\n@@ -492,9 +492,9 @@ def test_canonical_url_strips_batching_params(self):\n         parsed_url = urlparse(batch.canonical_url)\n         qs_params = dict(parse_qsl(parsed_url.query))\n \n-        self.assertEquals({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n-        self.assertEquals(\'nohost\', parsed_url.netloc)\n-        self.assertEquals(\'\', parsed_url.path)\n+        self.assertEqual({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n+        self.assertEqual(\'nohost\', parsed_url.netloc)\n+        self.assertEqual(\'\', parsed_url.path)\n \n     def test_canonical_url_strips_sorting_params(self):\n         items = list(range(1, 26))\n@@ -505,9 +505,9 @@ def test_canonical_url_strips_sorting_params(self):\n         parsed_url = urlparse(batch.canonical_url)\n         qs_params = dict(parse_qsl(parsed_url.query))\n \n-        self.assertEquals({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n-        self.assertEquals(\'nohost\', parsed_url.netloc)\n-        self.assertEquals(\'\', parsed_url.path)\n+        self.assertEqual({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n+        self.assertEqual(\'nohost\', parsed_url.netloc)\n+        self.assertEqual(\'\', parsed_url.path)\n \n     def test_current_batch_url(self):\n         items = list(range(1, 26))\n@@ -545,7 +545,7 @@ def test_first_link_preserves_list_like_querystring_params(self):\n         # times) should be preserved.\n \n         batch_params = set([(\'b_start\', \'0\'), (\'b_size\', \'10\')])\n-        self.assertEquals(\n+        self.assertEqual(\n             set([(\'foolist\', \'1\'), (\'foolist\', \'2\')]),\n             set(parse_qsl(urlparse(batch.links[\'first\']).query)) - batch_params\n         )\n@@ -617,5 +617,5 @@ def test_batch_start_never_drops_below_zero(self):\n         self.request.form[\'b_size\'] = 10\n         self.request.form[\'b_start\'] = 5\n         batch = HypermediaBatch(self.request, items)\n-        self.assertEquals(\n+        self.assertEqual(\n             \'http://nohost?b_start=0\', batch.links[\'prev\'])\ndiff --git a/src/plone/restapi/tests/test_content_local_roles.py b/src/plone/restapi/tests/test_content_local_roles.py\nindex f0fd0914..c6a437c4 100644\n--- a/src/plone/restapi/tests/test_content_local_roles.py\n+++ b/src/plone/restapi/tests/test_content_local_roles.py\n@@ -402,7 +402,7 @@ def test_no_serializer_available_returns_501(self):\n         self.assertEqual(response.status_code, 501)\n         response = response.json()\n         self.assertIn(\'error\', response)\n-        self.assertEquals(\n+        self.assertEqual(\n             u\'No serializer available.\',\n             response[\'error\'][\'message\']\n         )\ndiff --git a/src/plone/restapi/tests/test_copymove.py b/src/plone/restapi/tests/test_copymove.py\nindex 37c34dfb..95f32042 100644\n--- a/src/plone/restapi/tests/test_copymove.py\n+++ b/src/plone/restapi/tests/test_copymove.py\n@@ -96,7 +96,7 @@ def test_copy_single_object(self):\n         )\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 200)\n+        self.assertEqual(response.status_code, 200)\n         self.assertIn(\'copy_of_doc1\', self.portal.objectIds())\n \n     def test_move_single_object(self):\n@@ -108,7 +108,7 @@ def test_move_single_object(self):\n         )\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 200)\n+        self.assertEqual(response.status_code, 200)\n         self.assertIn(\'doc1\', self.folder1.objectIds())\n         self.assertNotIn(\'doc1\', self.portal.objectIds())\n \n@@ -119,7 +119,7 @@ def test_move_multiple_objects(self):\n                 "source": [self.doc1.absolute_url(), self.doc2.absolute_url()]\n             }\n         )\n-        self.assertEquals(response.status_code, 200)\n+        self.assertEqual(response.status_code, 200)\n         transaction.commit()\n \n         self.assertIn(\'doc1\', self.folder1.objectIds())\n@@ -129,7 +129,7 @@ def test_move_multiple_objects(self):\n \n     def test_copy_without_source_raises_400(self):\n         response = self.api_session.post(\'/folder1/@copy\')\n-        self.assertEquals(response.status_code, 400)\n+        self.assertEqual(response.status_code, 400)\n \n     def test_copy_not_existing_object(self):\n         response = self.api_session.post(\n@@ -139,7 +139,7 @@ def test_copy_not_existing_object(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 200)\n+        self.assertEqual(response.status_code, 200)\n         self.assertEqual([], response.json())\n \n     def test_copy_multiple_objects(self):\n@@ -151,7 +151,7 @@ def test_copy_multiple_objects(self):\n         )\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 200)\n+        self.assertEqual(response.status_code, 200)\n         self.assertIn(\'copy_of_doc1\', self.portal.objectIds())\n         self.assertIn(\'copy_of_doc2\', self.portal.objectIds())\n \n@@ -164,7 +164,7 @@ def test_copy_single_object_no_permissions_raises_403(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 403)\n+        self.assertEqual(response.status_code, 403)\n \n     def test_copy_single_object_no_auth_raises_401(self):\n         self.api_session.auth = (\'nonexistent\', \'secret\')\n@@ -175,7 +175,7 @@ def test_copy_single_object_no_auth_raises_401(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 401)\n+        self.assertEqual(response.status_code, 401)\n \n     def test_move_single_object_no_permissions_raises_403(self):\n         self.api_session.auth = (\'memberuser\', \'secret\')\n@@ -186,7 +186,7 @@ def test_move_single_object_no_permissions_raises_403(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 403)\n+        self.assertEqual(response.status_code, 403)\n \n     def test_move_single_object_no_auth_raises_401(self):\n         self.api_session.auth = (\'nonexistent\', \'secret\')\n@@ -197,7 +197,7 @@ def test_move_single_object_no_auth_raises_401(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 401)\n+        self.assertEqual(response.status_code, 401)\n \n     def test_move_single_object_no_permission_delete_source_raises_403(self):\n         api.user.grant_roles(\n@@ -213,4 +213,4 @@ def test_move_single_object_no_permission_delete_source_raises_403(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 403)\n+        self.assertEqual(response.status_code, 403)\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 6579bb94..c9e53d1b 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -38,8 +38,9 @@\n \n import collections\n import json\n-import re\n import os\n+import re\n+import six\n import transaction\n import unittest\n from six.moves import range\n@@ -76,9 +77,9 @@\n \n base_path = resource_filename(\'plone.restapi.tests\', \'http-examples\')\n \n-UPLOAD_DATA = \'abcdefgh\'\n-UPLOAD_MIMETYPE = \'text/plain\'\n-UPLOAD_FILENAME = \'test.txt\'\n+UPLOAD_DATA = b\'abcdefgh\'\n+UPLOAD_MIMETYPE = b\'text/plain\'\n+UPLOAD_FILENAME = b\'test.txt\'\n UPLOAD_LENGTH = len(UPLOAD_DATA)\n \n UPLOAD_PDF_MIMETYPE = \'application/pdf\'\n@@ -99,7 +100,7 @@ def pretty_json(data):\n \n \n def save_request_and_response_for_docs(name, response):\n-    with open(\'{}/{}\'.format(base_path, \'%s.req\' % name), \'w\') as req:\n+    with open(\'{}/{}\'.format(base_path, \'%s.req\' % name), \'w\', newline=\'\\n\') as req:\n         req.write(\'{} {} HTTP/1.1\\n\'.format(\n             response.request.method,\n             response.request.path_url\n@@ -126,9 +127,13 @@ def save_request_and_response_for_docs(name, response):\n                 # ever decide to dump that header\n                 response.request.prepare_body(data=body, files=None)\n \n-            req.write(response.request.body)\n+            if isinstance(response.request.body, six.text_type):\n+                req.write(response.request.body)\n+            else:\n+                req.buffer.seek(0, 2)\n+                req.buffer.write(response.request.body)\n \n-    with open(\'{}/{}\'.format(base_path, \'%s.resp\' % name), \'w\') as resp:\n+    with open(\'{}/{}\'.format(base_path, \'%s.resp\' % name), \'w\', newline=\'\\n\') as resp:\n         status = response.status_code\n         reason = response.reason\n         resp.write(\'HTTP/1.1 {} {}\\n\'.format(status, reason))\n@@ -272,8 +277,10 @@ def test_documentation_news_item(self):\n             \'text/html\'\n         )\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         self.portal.newsitem.image = NamedBlobImage(\n-            data=open(image_file, \'rb\').read(),\n+            data=image_data,\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\n@@ -325,8 +332,10 @@ def test_documentation_file(self):\n         pdf_file = os.path.join(\n             os.path.dirname(__file__), u\'file.pdf\'\n         )\n+        with open(pdf_file, \'rb\') as f:\n+            pdf_data = f.read()\n         self.portal.file.file = NamedBlobFile(\n-            data=open(pdf_file, \'rb\').read(),\n+            data=pdf_data,\n             contentType=\'application/pdf\',\n             filename=u\'file.pdf\'\n         )\n@@ -343,8 +352,10 @@ def test_documentation_image(self):\n         self.portal.image.title = \'My Image\'\n         self.portal.image.description = u\'This is an image\'\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         self.portal.image.image = NamedBlobImage(\n-            data=open(image_file, \'rb\').read(),\n+            data=image_data,\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\n@@ -1100,8 +1111,8 @@ def clean_final_url(response, _id=\'document-2016-10-21\'):\n \n         # POST create an upload\n         metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME.encode(\'utf8\')).decode(\'utf8\'),\n-            b64encode(UPLOAD_MIMETYPE.encode(\'utf8\')).decode(\'utf8\')\n+            b64encode(UPLOAD_FILENAME).decode(\'utf-8\'),\n+            b64encode(UPLOAD_MIMETYPE).decode(\'utf-8\'),\n         )\n         response = self.api_session.post(\n             \'/folder/@tus-upload\',\n@@ -1155,8 +1166,8 @@ def test_tusreplace_post_patch(self):\n \n         # POST create an upload\n         metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME),\n-            b64encode(UPLOAD_MIMETYPE)\n+            b64encode(UPLOAD_FILENAME).decode(\'utf-8\'),\n+            b64encode(UPLOAD_MIMETYPE).decode(\'utf-8\'),\n         )\n         response = self.api_session.post(\n             \'/myfile/@tus-replace\',\n@@ -1188,8 +1199,8 @@ def test_locking_lock(self):\n         response = self.api_session.post(url)\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n-            r\'"token": "[^"]+"\',\n-            \'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n+            rb\'"token": "[^"]+"\',\n+            b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n             response.content)\n         save_request_and_response_for_docs(\'lock\', response)\n \n@@ -1204,8 +1215,8 @@ def test_locking_lock_nonstealable_and_timeout(self):\n         )\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n-            r\'"token": "[^"]+"\',\n-            \'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n+            rb\'"token": "[^"]+"\',\n+            b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n             response.content)\n         save_request_and_response_for_docs(\n             \'lock_nonstealable_timeout\', response)\n@@ -1224,8 +1235,8 @@ def test_locking_refresh_lock(self):\n         response = self.api_session.post(url)\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n-            r\'"token": "[^"]+"\',\n-            \'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n+            rb\'"token": "[^"]+"\',\n+            b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n             response.content)\n         save_request_and_response_for_docs(\'refresh_lock\', response)\n \n@@ -1403,6 +1414,7 @@ def create_document_with_comments(self):\n     @staticmethod\n     def clean_comment_id(response, _id=\'123456\'):\n         pattern = r\'@comments/(\\w+)\'\n+        pattern_bytes = rb\'@comments/(\\w+)\'\n         repl = \'@comments/\' + _id\n \n         # Replaces the dynamic part in the headers with a stable id\n@@ -1415,12 +1427,12 @@ def clean_comment_id(response, _id=\'123456\'):\n         # and the body\n         if response.request.body:\n             response.request.body = re.sub(\n-                pattern, repl, response.request.body\n+                pattern_bytes, repl, response.request.body\n             )\n \n         # and the response\n         if response.content:\n-            response._content = re.sub(pattern, repl, response._content)\n+            response._content = re.sub(pattern_bytes, repl, response._content)\n \n     def test_comments_get(self):\n         url = \'{}/@comments\'.format(self.document.absolute_url())\ndiff --git a/src/plone/restapi/tests/test_dxcontent_deserializer.py b/src/plone/restapi/tests/test_dxcontent_deserializer.py\nindex 8e44805a..4b0ee9c5 100644\n--- a/src/plone/restapi/tests/test_dxcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_deserializer.py\n@@ -55,20 +55,20 @@ def deserialize(self, body=\'{}\', validate_all=False, context=None):\n     def test_deserializer_raises_with_invalid_body(self):\n         with self.assertRaises(DeserializationError) as cm:\n             self.deserialize(body=\'Not a JSON object\')\n-        self.assertEquals(\'No JSON object could be decoded\', cm.exception.msg)\n+        self.assertEqual(\'No JSON object could be decoded\', cm.exception.msg)\n \n     def test_deserializer_raises_with_malformed_body(self):\n         with self.assertRaises(DeserializationError) as cm:\n             self.deserialize(body=\'[1,2,3]\')\n-        self.assertEquals(\'Malformed body\', cm.exception.msg)\n+        self.assertEqual(\'Malformed body\', cm.exception.msg)\n \n     def test_deserializer_updates_field_value(self):\n         self.deserialize(body=\'{"test_textline_field": "My Item"}\')\n-        self.assertEquals(u\'My Item\', self.portal.doc1.test_textline_field)\n+        self.assertEqual(u\'My Item\', self.portal.doc1.test_textline_field)\n \n     def test_deserializer_ignores_readonly_fields(self):\n         self.deserialize(body=\'{"test_readonly_field": "Foo"}\')\n-        self.assertEquals(u\'readonly\', self.portal.doc1.test_readonly_field)\n+        self.assertEqual(u\'readonly\', self.portal.doc1.test_readonly_field)\n \n     def test_deserializer_notifies_object_modified(self):\n         def handler(obj, event):\n@@ -83,8 +83,8 @@ def handler(obj, event):\n             self.event = event\n         provideHandler(handler, (IDexterityItem, IObjectModifiedEvent,))\n         self.deserialize(body=\'{"test_textline_field": "My Item"}\')\n-        self.assertEquals(1, len(self.event.descriptions))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.event.descriptions))\n+        self.assertEqual(\n             (\'IDXTestDocumentSchema.test_textline_field\',),\n             self.event.descriptions[0].attributes)\n \n@@ -93,31 +93,31 @@ def test_deserializer_does_not_update_field_without_write_permission(self):\n         setRoles(self.portal,\n                  TEST_USER_ID, [\'Member\', \'Contributor\', \'Editor\'])\n         self.deserialize(body=\'{"test_write_permission_field": "Foo"}\')\n-        self.assertEquals(u\'Test Write Permission\',\n+        self.assertEqual(u\'Test Write Permission\',\n                           self.portal.doc1.test_write_permission_field)\n \n     def test_deserializer_updates_field_with_write_permission(self):\n         self.portal.doc1.test_write_permission_field = u\'Test Write Permission\'\n         setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Manager\'])\n         self.deserialize(body=\'{"test_write_permission_field": "Foo"}\')\n-        self.assertEquals(u\'Foo\',\n+        self.assertEqual(u\'Foo\',\n                           self.portal.doc1.test_write_permission_field)\n \n     def test_deserializer_validates_invariant(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"test_invariant_field1": "Foo",\'\n                                   \' "test_invariant_field2": "Bar"}\')\n-        self.assertEquals(u\'Must have same values\',\n+        self.assertEqual(u\'Must have same values\',\n                           str(cm.exception.args[0][0][\'message\']))\n \n     def test_deserializer_updates_behavior_field_value(self):\n         self.deserialize(body=\'{"test_behavior_field": "My Value"}\')\n-        self.assertEquals(u\'My Value\', self.portal.doc1.test_behavior_field)\n+        self.assertEqual(u\'My Value\', self.portal.doc1.test_behavior_field)\n \n     def test_deserializer_updates_behavior_field_value_in_annotations(self):\n         self.deserialize(\n             body=\'{"test_annotations_behavior_field": "My Value"}\')\n-        self.assertEquals(\n+        self.assertEqual(\n             u\'My Value\',\n             ITestAnnotationsBehavior(self.portal.doc1)\n             .test_annotations_behavior_field)\n@@ -127,20 +127,20 @@ def test_deserializer_raises_if_required_value_is_missing(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"test_textline_field": "My Value"}\',\n                              validate_all=True)\n-        self.assertEquals(u\'Required input is missing.\',\n+        self.assertEqual(u\'Required input is missing.\',\n                           cm.exception.args[0][0][\'message\'])\n \n         # An empty string should be considered a missing value\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"test_textline_field": ""}\',\n                              validate_all=True)\n-        self.assertEquals(u\'Required input is missing.\',\n+        self.assertEqual(u\'Required input is missing.\',\n                           cm.exception.args[0][0][\'message\'])\n \n     def test_deserializer_succeeds_if_required_value_is_provided(self):\n         self.deserialize(body=\'{"test_required_field": "My Value"}\',\n                          validate_all=True)\n-        self.assertEquals(u\'My Value\', self.portal.doc1.test_required_field)\n+        self.assertEqual(u\'My Value\', self.portal.doc1.test_required_field)\n \n     def test_deserializer_does_not_store_default_value(self):\n         # XXX: Dexterity has an odd behavior with default values.\n@@ -159,14 +159,14 @@ def test_deserializer_does_not_store_default_value(self):\n     def test_deserializer_passes_validation_with_not_provided_defaults(self):\n         self.deserialize(body=\'{"test_required_field": "My Value"}\',\n                          validate_all=True)\n-        self.assertEquals(u\'Default\',\n+        self.assertEqual(u\'Default\',\n                           self.portal.doc1.test_default_value_field)\n-        self.assertEquals(u\'DefaultFactory\',\n+        self.assertEqual(u\'DefaultFactory\',\n                           self.portal.doc1.test_default_factory_field)\n \n     def test_deserializer_sets_missing_value_when_receiving_null(self):\n         self.deserialize(body=\'{"test_missing_value_field": null}\')\n-        self.assertEquals(u\'missing\',\n+        self.assertEqual(u\'missing\',\n                           self.portal.doc1.test_missing_value_field)\n \n     def test_deserializer_sets_missing_value_on_required_field(self):\n@@ -176,23 +176,23 @@ def test_deserializer_sets_missing_value_on_required_field(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(\n                 body=\'{"test_missing_value_required_field": null}\')\n-        self.assertEquals(u\'valid value\',\n+        self.assertEqual(u\'valid value\',\n                           self.portal.doc1.test_missing_value_required_field)\n-        self.assertEquals(\n+        self.assertEqual(\n             (\n                 \'test_missing_value_required_field is a required field.\',\n                 \'Setting it to null is not allowed.\'\n             ),\n             cm.exception.args[0][0][\'message\']\n         )\n-        self.assertEquals(u\'test_missing_value_required_field\',\n+        self.assertEqual(u\'test_missing_value_required_field\',\n                           cm.exception.args[0][0][\'field\'])\n \n     def test_set_layout(self):\n         current_layout = self.portal.doc1.getLayout()\n         self.assertNotEquals(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n-        self.assertEquals(\'my_new_layout\', self.portal.doc1.getLayout())\n+        self.assertEqual(\'my_new_layout\', self.portal.doc1.getLayout())\n \n \n class TestDXContentSerializerDeserializer(unittest.TestCase):\n@@ -238,7 +238,7 @@ def test_serialize2deserialize_relation(self):\n \n         self.deserialize(\'test_relationchoice_field\', serialization_value)\n \n-        self.assertEquals(\n+        self.assertEqual(\n             serialization_value[\'@id\'],\n             self.portal.doc1.test_relationchoice_field.to_object.absolute_url()\n         )\ndiff --git a/src/plone/restapi/tests/test_dxcontent_serializer.py b/src/plone/restapi/tests/test_dxcontent_serializer.py\nindex 3c47496b..7f393977 100644\n--- a/src/plone/restapi/tests/test_dxcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_serializer.py\n@@ -156,7 +156,7 @@ def test_get_layout(self):\n         current_layout = self.portal.doc1.getLayout()\n         obj = self.serialize()\n         self.assertIn(\'layout\', obj)\n-        self.assertEquals(current_layout, obj[\'layout\'])\n+        self.assertEqual(current_layout, obj[\'layout\'])\n \n     def test_serializer_includes_expansion(self):\n         provideAdapter(\n@@ -178,7 +178,7 @@ def test_serializer_includes_expansion(self):\n     def test_get_is_folderish(self):\n         obj = self.serialize()\n         self.assertIn(\'is_folderish\', obj)\n-        self.assertEquals(False, obj[\'is_folderish\'])\n+        self.assertEqual(False, obj[\'is_folderish\'])\n \n     def test_get_is_folderish_in_folder(self):\n         self.portal.invokeFactory(\'Folder\', id=u\'folder\')\n@@ -186,7 +186,7 @@ def test_get_is_folderish_in_folder(self):\n                                      ISerializeToJson)\n         obj = serializer()\n         self.assertIn(\'is_folderish\', obj)\n-        self.assertEquals(True, obj[\'is_folderish\'])\n+        self.assertEqual(True, obj[\'is_folderish\'])\n \n     def test_richtext_serializer_context(self):\n         """This checks if the context is passed in correctly.\n@@ -208,7 +208,7 @@ def __call__(self, value, mime_type):\n         with AdapterCM(RichtextTransform, (Interface, ), ITransformer):\n             obj = self.serialize()\n \n-        self.assertEquals(\n+        self.assertEqual(\n             obj[\'test_richtext_field\'][\'data\'],\n             self.portal.doc1.portal_type\n         )\n@@ -221,7 +221,7 @@ def test_allow_discussion_by_default(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_obj_instance_allows_but_not_global_enabled(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -231,7 +231,7 @@ def test_allow_discussion_obj_instance_allows_but_not_global_enabled(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_fti_allows_not_global_enabled(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -243,7 +243,7 @@ def test_allow_discussion_fti_allows_not_global_enabled(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_allows_global_enabled_but_nothing_else(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -255,7 +255,7 @@ def test_allow_discussion_allows_global_enabled_but_nothing_else(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_obj_instance_allows_global_enabled(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -268,7 +268,7 @@ def test_allow_discussion_obj_instance_allows_global_enabled(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(True, obj[\'allow_discussion\'])\n+        self.assertEqual(True, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_obj_instance_not_set_global_enabled(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -280,7 +280,7 @@ def test_allow_discussion_obj_instance_not_set_global_enabled(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_fti_allows_allows_global_enabled(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -295,7 +295,7 @@ def test_allow_discussion_fti_allows_allows_global_enabled(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(True, obj[\'allow_discussion\'])\n+        self.assertEqual(True, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_allowed(self): # noqa\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -312,7 +312,7 @@ def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_allow\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_set(self): # noqa\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -328,7 +328,7 @@ def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_set(s\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(True, obj[\'allow_discussion\'])\n+        self.assertEqual(True, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_fti_disallows_allows_global_enabled_but_instance_allowed(self): # noqa\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -345,7 +345,7 @@ def test_allow_discussion_fti_disallows_allows_global_enabled_but_instance_allow\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(True, obj[\'allow_discussion\'])\n+        self.assertEqual(True, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_global_enabled_but_instance_has_no_discussion_behavior(self): # noqa\n         registry = queryUtility(IRegistry)\n@@ -354,4 +354,4 @@ def test_allow_discussion_global_enabled_but_instance_has_no_discussion_behavior\n \n         obj = self.serialize()\n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex 550f4dea..6d147bc4 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -253,7 +253,7 @@ def test_namedfield_deserialization_decodes_value(self):\n             u\'data\': u\'U3BhbSBhbmQgZWdncyE=\',\n             u\'encoding\': u\'base64\',\n         })\n-        self.assertEquals(b\'Spam and eggs!\', value.data)\n+        self.assertEqual(b\'Spam and eggs!\', value.data)\n \n     def test_namedfield_deserialization_sets_content_type(self):\n         value = self.deserialize(\'test_namedfile_field\', {\n@@ -472,7 +472,7 @@ def test_deserialize_with_context_bound_vocabulary(self):\n \n     def test_textline_deserializer_strips_value(self):\n         value = self.deserialize(\'test_textline_field\', u\'  aa  \')\n-        self.assertEquals(value, \'aa\')\n+        self.assertEqual(value, \'aa\')\n \n     def test_default_field_deserializer_validates_value(self):\n \ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex ac2f06b6..99fc6f32 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -190,7 +190,8 @@ def test_namedfile_field_serialization_returns_dict(self):\n \n     def test_namedimage_field_serialization_returns_dict(self):\n         image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        image_data = open(image_file, \'rb\').read()\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         fn = \'test_namedimage_field\'\n         with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n             value = self.serialize(\n@@ -267,7 +268,8 @@ def test_namedblobfile_field_serialization_returns_dict(self):\n \n     def test_namedblobimage_field_serialization_returns_dict(self):\n         image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        image_data = open(image_file, \'rb\').read()\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         fn = \'test_namedblobimage_field\'\n         with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n             value = self.serialize(\ndiff --git a/src/plone/restapi/tests/test_functional_auth.py b/src/plone/restapi/tests/test_functional_auth.py\nindex 0f004607..112ee230 100644\n--- a/src/plone/restapi/tests/test_functional_auth.py\n+++ b/src/plone/restapi/tests/test_functional_auth.py\n@@ -129,8 +129,6 @@ def test_accessing_private_document_with_expired_token_fails(self):\n             \'admin\',\n             timeout=-60\n         )\n-        if six.PY3:\n-            expired_token = expired_token.decode(\'utf8\')\n         transaction.commit()\n \n         response = requests.get(\ndiff --git a/src/plone/restapi/tests/test_roles.py b/src/plone/restapi/tests/test_roles.py\nindex 01b82d69..83d5becb 100644\n--- a/src/plone/restapi/tests/test_roles.py\n+++ b/src/plone/restapi/tests/test_roles.py\n@@ -22,7 +22,7 @@ def setUp(self):\n     def test_roles_endpoint_lists_roles(self):\n         response = self.api_session.get(\'/@roles\')\n \n-        self.assertEqual({\n+        expected = (\n             {u\'@id\': self.portal_url + u\'/@roles/Contributor\',\n              u\'@type\': u\'role\',\n              u\'id\': u\'Contributor\',\n@@ -50,8 +50,12 @@ def test_roles_endpoint_lists_roles(self):\n             {u\'@id\': self.portal_url + u\'/@roles/Manager\',\n              u\'@type\': u\'role\',\n              u\'id\': u\'Manager\',\n-             u\'title\': u\'Manager\'}},\n-            set(response.json()))\n+             u\'title\': u\'Manager\'},\n+        )\n+        result = response.json()\n+        self.assertEqual(len(expected), len(result))\n+        for item in result:\n+            self.assertIn(item, expected)\n \n     def test_roles_endpoint_translates_role_titles(self):\n         self.api_session.headers.update({\'Accept-Language\': \'de\'})\ndiff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex 665070c3..c7e462e8 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -225,8 +225,8 @@ def test_full_objects_retrieval_discussion(self):\n                  \'fullobjects\': True}\n         response = self.api_session.get(\'/@search\', params=query)\n \n-        self.assertEquals(response.status_code, 200)\n-        self.assertEquals(len(response.json()[\'items\']), 1)\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(len(response.json()[\'items\']), 1)\n \n     def test_full_objects_retrieval_collections(self):\n         self.collection = createContentInContainer(\n@@ -239,8 +239,8 @@ def test_full_objects_retrieval_collections(self):\n                  \'fullobjects\': True}\n         response = self.api_session.get(\'/@search\', params=query)\n \n-        self.assertEquals(response.status_code, 200)\n-        self.assertEquals(len(response.json()[\'items\']), 1)\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(len(response.json()[\'items\']), 1)\n \n     # ZCTextIndex\n \ndiff --git a/src/plone/restapi/tests/test_search_utils.py b/src/plone/restapi/tests/test_search_utils.py\nindex bf1e3efb..65a92378 100644\n--- a/src/plone/restapi/tests/test_search_utils.py\n+++ b/src/plone/restapi/tests/test_search_utils.py\n@@ -22,7 +22,7 @@ def test_unflattens_dotted_dict(self):\n         )\n \n     def test_works_on_empty_dict(self):\n-        self.assertEquals({}, unflatten_dotted_dict({}))\n+        self.assertEqual({}, unflatten_dotted_dict({}))\n \n     def test_works_with_list_values(self):\n         dct = {\ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex 3e7b3275..e4c60772 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -265,8 +265,10 @@ def test_serialize_empty_file_returns_none(self):\n     def test_serialize_image(self):\n         self.portal.invokeFactory(\'Image\', id=\'image1\', title=\'Image 1\')\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         self.portal.image1.image = NamedBlobImage(\n-            data=open(image_file, \'rb\').read(),\n+            data=image_data,\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\ndiff --git a/src/plone/restapi/tests/test_serializer_catalog.py b/src/plone/restapi/tests/test_serializer_catalog.py\nindex 7c4c0430..f8fa3bcc 100644\n--- a/src/plone/restapi/tests/test_serializer_catalog.py\n+++ b/src/plone/restapi/tests/test_serializer_catalog.py\n@@ -102,7 +102,7 @@ def test_brain_summary_representation(self):\n         brain = lazy_map[0]\n         result = getMultiAdapter(\n             (brain, self.request), ISerializeToJsonSummary)()\n-        self.assertEquals(\n+        self.assertEqual(\n             {\'@id\': \'http://nohost/plone/my-folder/my-document\',\n              \'@type\': \'Document\',\n              \'title\': \'My Document\',\ndiff --git a/src/plone/restapi/tests/test_serializer_converters.py b/src/plone/restapi/tests/test_serializer_converters.py\nindex af5b0047..adec3b65 100644\n--- a/src/plone/restapi/tests/test_serializer_converters.py\n+++ b/src/plone/restapi/tests/test_serializer_converters.py\n@@ -22,8 +22,8 @@ class TestJsonCompatibleConverters(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def test_None(self):\n-        self.assertEquals(None, json_compatible(None))\n-        self.assertEquals(\'null\', json.dumps(json_compatible(None)))\n+        self.assertEqual(None, json_compatible(None))\n+        self.assertEqual(\'null\', json.dumps(json_compatible(None)))\n \n     def test_error_when_type_unknown(self):\n         err_regex = r\'^No converter for making <object object at [^>]*>\' + \\\n@@ -36,39 +36,39 @@ def test_error_when_type_unknown(self):\n             json_compatible({\'foo\': [object()]})\n \n     def test_True(self):\n-        self.assertEquals(True, json_compatible(True))\n-        self.assertEquals(\'true\', json.dumps(json_compatible(True)))\n+        self.assertEqual(True, json_compatible(True))\n+        self.assertEqual(\'true\', json.dumps(json_compatible(True)))\n \n     def test_False(self):\n-        self.assertEquals(False, json_compatible(False))\n-        self.assertEquals(\'false\', json.dumps(json_compatible(False)))\n+        self.assertEqual(False, json_compatible(False))\n+        self.assertEqual(\'false\', json.dumps(json_compatible(False)))\n \n     def test_unicode(self):\n-        self.assertEquals(u\'foo\', json_compatible(u\'foo\'))\n+        self.assertEqual(u\'foo\', json_compatible(u\'foo\'))\n         self.assertIsInstance(json_compatible(u\'foo\'), six.text_type)\n-        self.assertEquals(\'"foo"\', json.dumps(json_compatible(\'foo\')))\n+        self.assertEqual(\'"foo"\', json.dumps(json_compatible(\'foo\')))\n \n     def test_unicode_with_umlaut(self):\n-        self.assertEquals(u\'Hall\\xf6chen\', json_compatible(u\'Hall\\xf6chen\'))\n-        self.assertEquals(\'"Hall\\\\u00f6chen"\',\n+        self.assertEqual(u\'Hall\\xf6chen\', json_compatible(u\'Hall\\xf6chen\'))\n+        self.assertEqual(\'"Hall\\\\u00f6chen"\',\n                           json.dumps(json_compatible(u\'Hall\\xf6chen\')))\n \n     def test_string_is_converted_to_unicode(self):\n         # Standard library JSON works with unicode.\n-        self.assertEquals(u\'foo\', json_compatible(\'foo\'))\n+        self.assertEqual(u\'foo\', json_compatible(\'foo\'))\n         self.assertIsInstance(json_compatible(\'foo\'), six.text_type)\n-        self.assertEquals(\'"foo"\', json.dumps(json_compatible(\'foo\')))\n+        self.assertEqual(\'"foo"\', json.dumps(json_compatible(\'foo\')))\n \n     def test_string_with_umlaut(self):\n         # Standard library JSON works with unicode.\n-        self.assertEquals(u\'Hall\\xf6chen\', json_compatible(\'Hall\xc3\xb6chen\'))\n-        self.assertEquals(\'"Hall\\\\u00f6chen"\',\n+        self.assertEqual(u\'Hall\\xf6chen\', json_compatible(\'Hall\xc3\xb6chen\'))\n+        self.assertEqual(\'"Hall\\\\u00f6chen"\',\n                           json.dumps(json_compatible(\'Hall\xc3\xb6chen\')))\n \n     def test_int(self):\n-        self.assertEquals(42, json_compatible(42))\n+        self.assertEqual(42, json_compatible(42))\n         self.assertIsInstance(json_compatible(42), int)\n-        self.assertEquals(\'42\', json.dumps(json_compatible(42)))\n+        self.assertEqual(\'42\', json.dumps(json_compatible(42)))\n \n     def test_long(self):\n         def _long(val):\n@@ -76,26 +76,26 @@ def _long(val):\n                 return int(val)\n             else:\n                 return int(val)\n-        self.assertEquals(_long(10), json_compatible(_long(10)))\n+        self.assertEqual(_long(10), json_compatible(_long(10)))\n         self.assertIsInstance(json_compatible(_long(10)), int)\n-        self.assertEquals(\'10\', json.dumps(json_compatible(_long(10))))\n+        self.assertEqual(\'10\', json.dumps(json_compatible(_long(10))))\n \n     def test_float(self):\n-        self.assertEquals(1.4, json_compatible(1.4))\n+        self.assertEqual(1.4, json_compatible(1.4))\n         self.assertIsInstance(json_compatible(1.4), float)\n-        self.assertEquals(\'1.4\', json.dumps(json_compatible(1.4)))\n+        self.assertEqual(\'1.4\', json.dumps(json_compatible(1.4)))\n \n     def test_list(self):\n-        self.assertEquals([\'foo\'], json_compatible([\'foo\']))\n-        self.assertEquals(\'["foo"]\', json.dumps(json_compatible([\'foo\'])))\n+        self.assertEqual([\'foo\'], json_compatible([\'foo\']))\n+        self.assertEqual(\'["foo"]\', json.dumps(json_compatible([\'foo\'])))\n         self.assertIsInstance(json_compatible([\'foo\'])[0],\n                               six.text_type,\n                               \'List values should be converted recursively.\')\n \n     def test_persistent_list(self):\n         value = PersistentList([\'foo\'])\n-        self.assertEquals([\'foo\'], json_compatible(value))\n-        self.assertEquals(\'["foo"]\', json.dumps(json_compatible(value)))\n+        self.assertEqual([\'foo\'], json_compatible(value))\n+        self.assertEqual(\'["foo"]\', json.dumps(json_compatible(value)))\n         self.assertIsInstance(json_compatible(value)[0],\n                               six.text_type,\n                               \'PersistentList values should be converted\'\n@@ -104,28 +104,28 @@ def test_persistent_list(self):\n     def test_tuple(self):\n         # Tuples are converted to list (json would do that anyway and\n         # it is easier to implement it with map).\n-        self.assertEquals([\'foo\', None], json_compatible((\'foo\', None)))\n-        self.assertEquals(\'["foo"]\', json.dumps(json_compatible((\'foo\', ))))\n+        self.assertEqual([\'foo\', None], json_compatible((\'foo\', None)))\n+        self.assertEqual(\'["foo"]\', json.dumps(json_compatible((\'foo\', ))))\n         self.assertIsInstance(json_compatible((\'foo\',))[0],\n                               six.text_type,\n                               \'Tuple values should be converted recursively.\')\n \n     def test_frozenset(self):\n-        self.assertEquals([[1, 1], [2, 2]],\n+        self.assertEqual([[1, 1], [2, 2]],\n                           sorted(json_compatible(frozenset([(1, 1), (2, 2)]))))\n \n     def test_set(self):\n-        self.assertEquals([[1, 1], [2, 2]],\n+        self.assertEqual([[1, 1], [2, 2]],\n                           sorted(json_compatible(set([(1, 1), (2, 2)]))))\n \n     def test_dict(self):\n-        self.assertEquals({u\'foo\': True,\n+        self.assertEqual({u\'foo\': True,\n                            u\'bar\': None,\n                            u\'baz\': 3},\n                           json_compatible({\'foo\': True,\n                                            \'bar\': None,\n                                            \'baz\': 3}))\n-        self.assertEquals(\'{"foo": "bar"}\',\n+        self.assertEqual(\'{"foo": "bar"}\',\n                           json.dumps(json_compatible({\'foo\': \'bar\'})))\n         self.assertIsInstance(json_compatible(list({\'foo\': \'bar\'})[0]),\n                               six.text_type,\n@@ -136,13 +136,13 @@ def test_dict(self):\n             \'Dict values should be converted recursively.\')\n \n     def test_dict_empty(self):\n-        self.assertEquals({}, json_compatible({}))\n-        self.assertEquals(\'{}\', json.dumps(json_compatible({})))\n+        self.assertEqual({}, json_compatible({}))\n+        self.assertEqual(\'{}\', json.dumps(json_compatible({})))\n \n     def test_persistent_mapping(self):\n         value = PersistentMapping({\'foo\': \'bar\'})\n-        self.assertEquals({u\'foo\': u\'bar\'}, json_compatible(value))\n-        self.assertEquals(\'{"foo": "bar"}\', json.dumps(json_compatible(value)))\n+        self.assertEqual({u\'foo\': u\'bar\'}, json_compatible(value))\n+        self.assertEqual(\'{"foo": "bar"}\', json.dumps(json_compatible(value)))\n         self.assertIsInstance(json_compatible(list(value)[0]),\n                               six.text_type,\n                               \'Dict keys should be converted recursively.\')\n@@ -152,33 +152,33 @@ def test_persistent_mapping(self):\n \n     def test_python_datetime(self):\n         value = DateTime(\'2015/11/23 19:45:55.649027 GMT+3\').asdatetime()\n-        self.assertEquals(u\'2015-11-23T16:45:55+00:00\',\n+        self.assertEqual(u\'2015-11-23T16:45:55+00:00\',\n                           json_compatible(value))\n-        self.assertEquals(\'"2015-11-23T16:45:55+00:00"\',\n+        self.assertEqual(\'"2015-11-23T16:45:55+00:00"\',\n                           json.dumps(json_compatible(value)))\n \n     def test_zope_DateTime(self):\n         value = DateTime(\'2015/11/23 19:45:55.649027 GMT+3\')\n-        self.assertEquals(u\'2015-11-23T16:45:55+00:00\',\n+        self.assertEqual(u\'2015-11-23T16:45:55+00:00\',\n                           json_compatible(value))\n-        self.assertEquals(\'"2015-11-23T16:45:55+00:00"\',\n+        self.assertEqual(\'"2015-11-23T16:45:55+00:00"\',\n                           json.dumps(json_compatible(value)))\n \n     def test_date(self):\n         value = date(2015, 11, 23)\n-        self.assertEquals(u\'2015-11-23\', json_compatible(value))\n-        self.assertEquals(\'"2015-11-23"\', json.dumps(json_compatible(value)))\n+        self.assertEqual(u\'2015-11-23\', json_compatible(value))\n+        self.assertEqual(\'"2015-11-23"\', json.dumps(json_compatible(value)))\n \n     def test_time(self):\n         value = time(19, 45, 55)\n-        self.assertEquals(u\'19:45:55\', json_compatible(value))\n-        self.assertEquals(\'"19:45:55"\', json.dumps(json_compatible(value)))\n+        self.assertEqual(u\'19:45:55\', json_compatible(value))\n+        self.assertEqual(\'"19:45:55"\', json.dumps(json_compatible(value)))\n \n     def test_timedelta(self):\n-        self.assertEquals(9.58, json_compatible(timedelta(seconds=9.58)))\n+        self.assertEqual(9.58, json_compatible(timedelta(seconds=9.58)))\n \n     def test_broken_relation_value(self):\n-        self.assertEquals(None, json_compatible(RelationValue(12345)))\n+        self.assertEqual(None, json_compatible(RelationValue(12345)))\n \n     def test_relation_value(self):\n         portal = self.layer[\'portal\']\n@@ -188,7 +188,7 @@ def test_relation_value(self):\n             description=\'Description\',\n         )]\n         intids = getUtility(IIntIds)\n-        self.assertEquals(\n+        self.assertEqual(\n             {\'@id\': \'http://nohost/plone/doc1\',\n              \'@type\': \'DXTestDocument\',\n              \'title\': \'Document 1\',\n@@ -199,7 +199,7 @@ def test_relation_value(self):\n     def test_i18n_message(self):\n         _ = MessageFactory(\'plone.restapi.tests\')\n         msg = _(u\'message_id\', default=u\'default message\')\n-        self.assertEquals(u\'default message\', json_compatible(msg))\n+        self.assertEqual(u\'default message\', json_compatible(msg))\n \n     def test_missing_value(self):\n-        self.assertEquals(None, json_compatible(Missing.Value))\n+        self.assertEqual(None, json_compatible(Missing.Value))\ndiff --git a/src/plone/restapi/tests/test_services.py b/src/plone/restapi/tests/test_services.py\nindex a52ecd9d..7e25c043 100644\n--- a/src/plone/restapi/tests/test_services.py\n+++ b/src/plone/restapi/tests/test_services.py\n@@ -94,8 +94,10 @@ def test_get_news_item(self):\n             title=\'News Item 1\'\n         )\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         self.portal.news1.image = NamedBlobImage(\n-            data=open(image_file, \'r\').read(),\n+            data=image_data,\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\n@@ -217,8 +219,10 @@ def test_get_file(self):  # pragma: no cover\n         pdf_file = os.path.join(\n             os.path.dirname(__file__), u\'file.pdf\'\n         )\n+        with open(pdf_file, \'rb\') as f:\n+            pdf_data = f.read()\n         self.portal.file1.file = NamedBlobFile(\n-            data=open(pdf_file, \'r\').read(),\n+            data=pdf_data,\n             contentType=\'application/pdf\',\n             filename=u\'file.pdf\'\n         )\n@@ -247,8 +251,10 @@ def test_get_image(self):  # pragma: no cover\n         self.portal.img1.title = \'Image\'\n         self.portal.img1.description = u\'An image\'\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         self.portal.img1.image = NamedBlobImage(\n-            data=open(image_file, \'r\').read(),\n+            data=image_data,\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\ndiff --git a/src/plone/restapi/tests/test_services_email_notification.py b/src/plone/restapi/tests/test_services_email_notification.py\nindex af96b603..4a75e6b7 100644\n--- a/src/plone/restapi/tests/test_services_email_notification.py\n+++ b/src/plone/restapi/tests/test_services_email_notification.py\n@@ -55,7 +55,7 @@ def test_email_notification(self):\n             })\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 204)\n+        self.assertEqual(response.status_code, 204)\n         self.assertTrue(\'Subject: [No Subject]\' in\n                         self.mailhost.messages[0])\n         self.assertTrue(\'To: info@plone.org\' in\n@@ -76,7 +76,7 @@ def test_email_notification_all_parameters(self):\n             })\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 204)\n+        self.assertEqual(response.status_code, 204)\n         self.assertTrue(\'=?utf-8?q?This_is_the_subject\' in\n                         self.mailhost.messages[0])\n         self.assertTrue(\'To: info@plone.org\' in\ndiff --git a/src/plone/restapi/tests/test_services_email_send.py b/src/plone/restapi/tests/test_services_email_send.py\nindex 29c31090..32efd9e8 100644\n--- a/src/plone/restapi/tests/test_services_email_send.py\n+++ b/src/plone/restapi/tests/test_services_email_send.py\n@@ -56,7 +56,7 @@ def test_email_send(self):\n             })\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 204)\n+        self.assertEqual(response.status_code, 204)\n         self.assertTrue(\'Subject: =?utf-8?q?A_portal_user_via_Plone_site?=\' in\n                         self.mailhost.messages[0])\n         self.assertTrue(\'From: info@plone.org\' in\n@@ -78,7 +78,7 @@ def test_email_send_all_parameters(self):\n             })\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 204)\n+        self.assertEqual(response.status_code, 204)\n         self.assertTrue(\'=?utf-8?q?This_is_the_subject\' in\n                         self.mailhost.messages[0])\n         self.assertTrue(\'From: info@plone.org\' in\n@@ -101,4 +101,4 @@ def test_email_send_anonymous(self):\n                 \'subject\': \'This is the subject.\'\n             })\n \n-        self.assertEquals(response.status_code, 401)\n+        self.assertEqual(response.status_code, 401)\ndiff --git a/src/plone/restapi/tests/test_services_principals.py b/src/plone/restapi/tests/test_services_principals.py\nindex b1482a4c..64e2d647 100644\n--- a/src/plone/restapi/tests/test_services_principals.py\n+++ b/src/plone/restapi/tests/test_services_principals.py\n@@ -63,8 +63,8 @@ def test_get_principals(self):\n \n         response = response.json()\n         self.assertEqual(2, len(response))\n-        self.assertEquals(1, len(response[\'users\']))\n-        self.assertEquals(\'noam\', response[\'users\'][0][\'id\'])\n+        self.assertEqual(1, len(response[\'users\']))\n+        self.assertEqual(\'noam\', response[\'users\'][0][\'id\'])\n \n         response = self.api_session.get(\n             \'/@principals\',\n@@ -76,8 +76,8 @@ def test_get_principals(self):\n \n         response = response.json()\n         self.assertEqual(2, len(response))\n-        self.assertEquals(1, len(response[\'groups\']))\n-        self.assertEquals(\'ploneteam\', response[\'groups\'][0][\'id\'])\n+        self.assertEqual(1, len(response[\'groups\']))\n+        self.assertEqual(\'ploneteam\', response[\'groups\'][0][\'id\'])\n \n     def test_get_principals_response_both(self):\n         self.user = api.user.create(\n@@ -96,7 +96,7 @@ def test_get_principals_response_both(self):\n \n         response = response.json()\n         self.assertEqual(2, len(response))\n-        self.assertEquals(1, len(response[\'users\']))\n-        self.assertEquals(1, len(response[\'groups\']))\n-        self.assertEquals(\'plone.user\', response[\'users\'][0][\'id\'])\n-        self.assertEquals(\'ploneteam\', response[\'groups\'][0][\'id\'])\n+        self.assertEqual(1, len(response[\'users\']))\n+        self.assertEqual(1, len(response[\'groups\']))\n+        self.assertEqual(\'plone.user\', response[\'users\'][0][\'id\'])\n+        self.assertEqual(\'ploneteam\', response[\'groups\'][0][\'id\'])\ndiff --git a/src/plone/restapi/tests/test_services_tiles.py b/src/plone/restapi/tests/test_services_tiles.py\nindex 74f96bac..4efd6869 100644\n--- a/src/plone/restapi/tests/test_services_tiles.py\n+++ b/src/plone/restapi/tests/test_services_tiles.py\n@@ -80,24 +80,24 @@ def test_get_available_tiles(self):\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        self.assertEquals(len(response), 1)\n-        self.assertEquals(\n+        self.assertEqual(len(response), 1)\n+        self.assertEqual(\n             response[0][\'@id\'],\n             self.portal_url + u\'/@tiles/sample.tile\')\n-        self.assertEquals(response[0][\'title\'], u\'Sample tile\')\n-        self.assertEquals(\n+        self.assertEqual(response[0][\'title\'], u\'Sample tile\')\n+        self.assertEqual(\n             response[0][\'description\'], u\'A tile used for testing\')\n-        self.assertEquals(response[0][\'icon\'], \'testicon\')\n+        self.assertEqual(response[0][\'icon\'], \'testicon\')\n \n     def test_get_tile(self):\n         response = self.api_session.get(\'/@tiles/sample.tile\')\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        self.assertEquals(response[\'title\'], u\'Sample tile\')\n-        self.assertEquals(\n+        self.assertEqual(response[\'title\'], u\'Sample tile\')\n+        self.assertEqual(\n             response[\'properties\'][\'title\'][\'title\'], u\'Title\')\n-        self.assertEquals(\n+        self.assertEqual(\n             response[\'properties\'][\'title\'][\'type\'], u\'string\')\n \n     def test_patch_tiles_list(self):\n@@ -115,7 +115,7 @@ def test_patch_tiles_list(self):\n         response = self.api_session.get(\'/doc\')\n         response = response.json()\n \n-        self.assertEquals(\n+        self.assertEqual(\n             response[\'tiles\'],\n             {\n                 \'uuid1\': {\'@type\': \'title\'},\n@@ -137,7 +137,7 @@ def test_patch_tiles_layout(self):\n         response = self.api_session.get(\'/doc\')\n         response = response.json()\n \n-        self.assertEquals(\n+        self.assertEqual(\n             response[\'tiles_layout\'],\n             {\n                 "items": ["#uuid1", "#uuid2"]\ndiff --git a/src/plone/restapi/tests/test_services_types.py b/src/plone/restapi/tests/test_services_types.py\nindex e4743243..44b44e5e 100644\n--- a/src/plone/restapi/tests/test_services_types.py\n+++ b/src/plone/restapi/tests/test_services_types.py\n@@ -157,14 +157,14 @@ def test_addable_types_for_non_manager_user(self):\n         response = self.api_session.get(\'/folder_cant_add/@types\')\n         response = response.json()\n \n-        self.assertEquals(\n+        self.assertEqual(\n             len([a for a in response if a[\'addable\']]), 0)\n \n         # and in the root Plone site there\'s no addable types\n         response = self.api_session.get(\'/@types\')\n         response = response.json()\n \n-        self.assertEquals(\n+        self.assertEqual(\n             len([a for a in response if a[\'addable\']]), 0)\n \n \ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex 228ddae6..f4506663 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -727,7 +727,7 @@ def test_anonymous_with_enable_user_sets_only_member_role(self):\n \n         response = response.json()\n         self.assertIn(\'Member\', response[\'roles\'])\n-        self.assertEquals(1, len(response[\'roles\']))\n+        self.assertEqual(1, len(response[\'roles\']))\n \n     def test_add_user_no_roles_sets_member_as_sensible_default(self):\n         response = self.api_session.post(\n@@ -745,4 +745,4 @@ def test_add_user_no_roles_sets_member_as_sensible_default(self):\n         response = response.json()\n \n         self.assertIn(\'Member\', response[\'roles\'])\n-        self.assertEquals(1, len(response[\'roles\']))\n+        self.assertEqual(1, len(response[\'roles\']))\ndiff --git a/src/plone/restapi/tests/test_setup.py b/src/plone/restapi/tests/test_setup.py\nindex f10c677d..349e4e40 100644\n--- a/src/plone/restapi/tests/test_setup.py\n+++ b/src/plone/restapi/tests/test_setup.py\n@@ -8,6 +8,13 @@\n from plone.restapi import PROJECT_NAME\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n+try:\n+    from Products.CMFPlone.utils import get_installer\n+except ImportError:  # Plone < 5.1\n+    HAS_INSTALLER = False\n+else:\n+    HAS_INSTALLER = True\n+\n \n class TestInstall(unittest.TestCase):\n \n@@ -16,15 +23,19 @@ class TestInstall(unittest.TestCase):\n     def setUp(self):\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n-        self.qi_tool = getToolByName(self.portal, \'portal_quickinstaller\')\n \n     def test_product_is_installed(self):\n         """ Validate that our products GS profile has been run and the product\n             installed\n         """\n-        installed = [p[\'id\'] for p in self.qi_tool.listInstalledProducts()]\n-        self.assertTrue(PROJECT_NAME in installed,\n-                        \'package appears not to have been installed\')\n+        if HAS_INSTALLER:\n+            qi = get_installer(self.portal)\n+            installed = qi.is_product_installed(PROJECT_NAME)\n+        else:\n+            qi_tool = getToolByName(self.portal, \'portal_quickinstaller\')\n+            installed = PROJECT_NAME in qi_tool.listInstalledProducts()\n+        self.assertTrue(\n+            installed, \'package appears not to have been installed\')\n \n \n class TestUninstall(unittest.TestCase):\n@@ -34,13 +45,18 @@ class TestUninstall(unittest.TestCase):\n     def setUp(self):\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n-        self.qi_tool = getToolByName(self.portal, \'portal_quickinstaller\')\n \n-        with api.env.adopt_roles([\'Manager\']):\n-            self.qi_tool.uninstallProducts(products=[PROJECT_NAME])\n+        if HAS_INSTALLER:\n+            qi = get_installer(self.portal)\n+            qi.uninstall_product(PROJECT_NAME)\n+            self.installed = qi.is_product_installed(PROJECT_NAME)\n+        else:\n+            qi_tool = getToolByName(self.portal, \'portal_quickinstaller\')\n+            with api.env.adopt_roles([\'Manager\']):\n+                qi_tool.uninstallProducts(products=[PROJECT_NAME])\n \n     def test_uninstalled(self):\n-        self.assertFalse(self.qi_tool.isProductInstalled(PROJECT_NAME))\n+        self.assertFalse(self.installed)\n \n     def test_addon_layer_removed(self):\n         layers = [l.getName() for l in registered_layers()]\ndiff --git a/src/plone/restapi/tests/test_site_deserializer.py b/src/plone/restapi/tests/test_site_deserializer.py\nindex aa0142c2..ad7f7c0c 100644\n--- a/src/plone/restapi/tests/test_site_deserializer.py\n+++ b/src/plone/restapi/tests/test_site_deserializer.py\n@@ -37,4 +37,4 @@ def test_set_layout(self):\n         current_layout = self.portal.getLayout()\n         self.assertNotEquals(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n-        self.assertEquals(\'my_new_layout\', self.portal.getLayout())\n+        self.assertEqual(\'my_new_layout\', self.portal.getLayout())\ndiff --git a/src/plone/restapi/tests/test_site_serializer.py b/src/plone/restapi/tests/test_site_serializer.py\nindex 02903ce7..8d0cb15f 100644\n--- a/src/plone/restapi/tests/test_site_serializer.py\n+++ b/src/plone/restapi/tests/test_site_serializer.py\n@@ -34,4 +34,4 @@ def test_serializer_includes_title(self):\n     def test_get_is_folderish(self):\n         obj = self.serialize()\n         self.assertIn(\'is_folderish\', obj)\n-        self.assertEquals(True, obj[\'is_folderish\'])\n+        self.assertEqual(True, obj[\'is_folderish\'])\ndiff --git a/src/plone/restapi/tests/test_tus.py b/src/plone/restapi/tests/test_tus.py\nindex 5b1d2883..2755e44f 100644\n--- a/src/plone/restapi/tests/test_tus.py\n+++ b/src/plone/restapi/tests/test_tus.py\n@@ -315,13 +315,13 @@ def test_tus_can_upload_pdf_file(self):\n         location = response.headers[\'Location\']\n \n         # upload the data with PATCH\n-        pdf_file = open(pdf_file_path, \'rb\')\n-        response = self.api_session.patch(\n-            location,\n-            headers={\'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\',\n-                     \'Tus-Resumable\': \'1.0.0\'},\n-            data=pdf_file)\n+        with open(pdf_file_path, \'rb\') as pdf_file:\n+            response = self.api_session.patch(\n+                location,\n+                headers={\'Content-Type\': \'application/offset+octet-stream\',\n+                        \'Upload-Offset\': \'0\',\n+                        \'Tus-Resumable\': \'1.0.0\'},\n+                data=pdf_file)\n         self.assertEqual(response.status_code, 204)\n \n         transaction.commit()\n@@ -374,13 +374,13 @@ def test_tus_can_replace_pdf_file(self):\n         location = response.headers[\'Location\']\n \n         # upload the data with PATCH\n-        pdf_file = open(pdf_file_path, \'rb\')\n-        response = self.api_session.patch(\n-            location,\n-            headers={\'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\',\n-                     \'Tus-Resumable\': \'1.0.0\'},\n-            data=pdf_file)\n+        with open(pdf_file_path, \'rb\') as pdf_file:\n+            response = self.api_session.patch(\n+                location,\n+                headers={\'Content-Type\': \'application/offset+octet-stream\',\n+                        \'Upload-Offset\': \'0\',\n+                        \'Tus-Resumable\': \'1.0.0\'},\n+                data=pdf_file)\n         self.assertEqual(response.status_code, 204)\n \n         transaction.commit()\n@@ -613,13 +613,13 @@ def test_tus_can_upload_pdf_file(self):\n         location = response.headers[\'Location\']\n \n         # upload the data with PATCH\n-        pdf_file = open(pdf_file_path, \'rb\')\n-        response = self.api_session.patch(\n-            location,\n-            headers={\'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\',\n-                     \'Tus-Resumable\': \'1.0.0\'},\n-            data=pdf_file)\n+        with open(pdf_file_path, \'rb\') as pdf_file:\n+            response = self.api_session.patch(\n+                location,\n+                headers={\'Content-Type\': \'application/offset+octet-stream\',\n+                        \'Upload-Offset\': \'0\',\n+                        \'Tus-Resumable\': \'1.0.0\'},\n+                data=pdf_file)\n         self.assertEqual(response.status_code, 204)\n \n         transaction.commit()\ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex be598b6a..1ed82b54 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -99,7 +99,7 @@ def test_get_jsonschema_for_fti(self):\n         self.assertEqual(jsonschema[\'type\'], \'object\')\n         self.assertIn(\'title\', list(jsonschema[\'properties\']))\n         self.assertIn(\'title\', jsonschema[\'required\'])\n-        self.assertEquals(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n+        self.assertEqual(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n         self.assertIn(\'title\', jsonschema[\'fieldsets\'][0][\'fields\'])\n         self.assertIn(\'layouts\', jsonschema)\n \n@@ -132,7 +132,7 @@ def test_get_jsonschema_for_portal_type(self):\n         self.assertEqual(jsonschema[\'type\'], \'object\')\n         self.assertIn(\'title\', list(jsonschema[\'properties\']))\n         self.assertIn(\'title\', jsonschema[\'required\'])\n-        self.assertEquals(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n+        self.assertEqual(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n         self.assertIn(\'title\', jsonschema[\'fieldsets\'][0][\'fields\'])\n \n         jsonschema = get_jsonschema_for_portal_type(\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-09-24T22:58:41-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/e96a2a7e3f92fe93fe1d4bb920f7c78c3610308e

fix regressions

Files changed:
M src/plone/restapi/deserializer/atfields.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_setup.py

b'diff --git a/src/plone/restapi/deserializer/atfields.py b/src/plone/restapi/deserializer/atfields.py\nindex e987a5c6..5f907ab8 100644\n--- a/src/plone/restapi/deserializer/atfields.py\n+++ b/src/plone/restapi/deserializer/atfields.py\n@@ -13,7 +13,6 @@\n     from zope.component import getMultiAdapter\n     from zope.interface import implementer\n     from zope.publisher.interfaces.browser import IBrowserRequest\n-    import six\n \n     @implementer(IFieldDeserializer)\n     @adapter(IField, IBaseObject, IBrowserRequest)\n@@ -71,10 +70,8 @@ def __call__(self, value):\n \n             for i, v in enumerate(value):\n                 # Resolve references given by URL\n-                if six.PY2 and isinstance(value, six.text_type):\n-                    v = v.encode(\'utf-8\')\n                 if v.startswith(portal_url):\n-                    path = v[len(portal_url) + 1:]\n+                    path = v[len(portal_url) + 1:].encode(\'utf8\')\n                     value[i] = portal.unrestrictedTraverse(path, None)\n \n             return value, {}\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex c9e53d1b..50e1f37d 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -37,6 +37,7 @@\n from zope.site.hooks import getSite\n \n import collections\n+import io\n import json\n import os\n import re\n@@ -100,7 +101,11 @@ def pretty_json(data):\n \n \n def save_request_and_response_for_docs(name, response):\n-    with open(\'{}/{}\'.format(base_path, \'%s.req\' % name), \'w\', newline=\'\\n\') as req:\n+    if six.PY2:\n+        open_kw = {}\n+    else:\n+        open_kw = {\'newline\': \'\\n\'}\n+    with open(\'{}/{}\'.format(base_path, \'%s.req\' % name), \'w\', **open_kw) as req:\n         req.write(\'{} {} HTTP/1.1\\n\'.format(\n             response.request.method,\n             response.request.path_url\n@@ -127,13 +132,14 @@ def save_request_and_response_for_docs(name, response):\n                 # ever decide to dump that header\n                 response.request.prepare_body(data=body, files=None)\n \n-            if isinstance(response.request.body, six.text_type):\n+            if (isinstance(response.request.body, six.text_type)\n+                    or not hasattr(req, \'buffer\')):\n                 req.write(response.request.body)\n             else:\n                 req.buffer.seek(0, 2)\n                 req.buffer.write(response.request.body)\n \n-    with open(\'{}/{}\'.format(base_path, \'%s.resp\' % name), \'w\', newline=\'\\n\') as resp:\n+    with open(\'{}/{}\'.format(base_path, \'%s.resp\' % name), \'w\', **open_kw) as resp:\n         status = response.status_code\n         reason = response.reason\n         resp.write(\'HTTP/1.1 {} {}\\n\'.format(status, reason))\n@@ -1199,7 +1205,7 @@ def test_locking_lock(self):\n         response = self.api_session.post(url)\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n-            rb\'"token": "[^"]+"\',\n+            b\'"token": "[^"]+"\',\n             b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n             response.content)\n         save_request_and_response_for_docs(\'lock\', response)\n@@ -1215,7 +1221,7 @@ def test_locking_lock_nonstealable_and_timeout(self):\n         )\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n-            rb\'"token": "[^"]+"\',\n+            b\'"token": "[^"]+"\',\n             b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n             response.content)\n         save_request_and_response_for_docs(\n@@ -1235,7 +1241,7 @@ def test_locking_refresh_lock(self):\n         response = self.api_session.post(url)\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n-            rb\'"token": "[^"]+"\',\n+            b\'"token": "[^"]+"\',\n             b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n             response.content)\n         save_request_and_response_for_docs(\'refresh_lock\', response)\n@@ -1414,7 +1420,7 @@ def create_document_with_comments(self):\n     @staticmethod\n     def clean_comment_id(response, _id=\'123456\'):\n         pattern = r\'@comments/(\\w+)\'\n-        pattern_bytes = rb\'@comments/(\\w+)\'\n+        pattern_bytes = b\'@comments/(\\\\w+)\'\n         repl = \'@comments/\' + _id\n \n         # Replaces the dynamic part in the headers with a stable id\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex 6d147bc4..91e3fb3a 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -401,7 +401,7 @@ def test_dict_deserializer_validates_value(self):\n             u\'Invalid int literal.\',\n         ))\n         self.assertIn(cm.exception.args, (\n-            (\'k\', (int,), \'\'),\n+            (\'k\', six.integer_types, \'\'),\n             ("invalid literal for int() with base 10: \'k\'",),\n         ))\n \ndiff --git a/src/plone/restapi/tests/test_setup.py b/src/plone/restapi/tests/test_setup.py\nindex 349e4e40..20719007 100644\n--- a/src/plone/restapi/tests/test_setup.py\n+++ b/src/plone/restapi/tests/test_setup.py\n@@ -33,7 +33,8 @@ def test_product_is_installed(self):\n             installed = qi.is_product_installed(PROJECT_NAME)\n         else:\n             qi_tool = getToolByName(self.portal, \'portal_quickinstaller\')\n-            installed = PROJECT_NAME in qi_tool.listInstalledProducts()\n+            installed = PROJECT_NAME in [\n+                p[\'id\'] for p in qi_tool.listInstalledProducts()]\n         self.assertTrue(\n             installed, \'package appears not to have been installed\')\n \n@@ -54,6 +55,7 @@ def setUp(self):\n             qi_tool = getToolByName(self.portal, \'portal_quickinstaller\')\n             with api.env.adopt_roles([\'Manager\']):\n                 qi_tool.uninstallProducts(products=[PROJECT_NAME])\n+            self.installed = qi_tool.isProductInstalled(PROJECT_NAME)\n \n     def test_uninstalled(self):\n         self.assertFalse(self.installed)\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-10-01T19:18:04+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.restapi/commit/b072619549cec48c2a9375d1b0bb0e0a7a1f0d57

Merge branch 'master' into python3

Files changed:
A docs/source/contributing.rst
A src/plone/restapi/profiles/tiles/metadata.xml
A src/plone/restapi/profiles/tiles/types.xml
A src/plone/restapi/profiles/tiles/types/Document.xml
A src/plone/restapi/tests/http-examples/search_fullobjects.req
A src/plone/restapi/tests/http-examples/search_fullobjects.resp
A src/plone/restapi/tests/http-examples/search_metadata_fields.req
A src/plone/restapi/tests/http-examples/search_metadata_fields.resp
A src/plone/restapi/tests/http-examples/search_multiple_paths.req
A src/plone/restapi/tests/http-examples/search_multiple_paths.resp
A src/plone/restapi/tests/http-examples/search_options.req
A src/plone/restapi/tests/http-examples/search_options.resp
A src/plone/restapi/tests/test_profile_tiles.py
M CHANGES.rst
M MANIFEST.in
M Makefile
M base.cfg
M docs/source/index.rst
M docs/source/searching.rst
M docs/source/tiles.rst
M setup.py
M src/plone/restapi/configure.zcml
M src/plone/restapi/search/handler.py
M src/plone/restapi/serializer/user.py
M src/plone/restapi/services/users/add.py
M src/plone/restapi/setuphandlers.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/dxtypes.py
M src/plone/restapi/tests/http-examples/users.resp
M src/plone/restapi/tests/http-examples/users_add.resp
M src/plone/restapi/tests/http-examples/users_authorized_get.resp
M src/plone/restapi/tests/http-examples/users_created.resp
M src/plone/restapi/tests/http-examples/users_filtered_by_username.resp
M src/plone/restapi/tests/http-examples/users_get.resp
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_search.py
M src/plone/restapi/tests/test_serializer_user.py
M src/plone/restapi/tests/test_services_users.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 23bd0c2a..52a7ad66 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,7 +1,84 @@\n Changelog\n =========\n \n-3.2.2 (unreleased)\n+3.4.6 (unreleased)\n+------------------\n+\n+- Nothing changed yet.\n+\n+\n+3.4.5 (2018-09-14)\n+------------------\n+\n+Bugfixes:\n+\n+- Avoid ``AttributeError`` on add-on installation (fixes `#465 <https://github.com/plone/plone.restapi/issues/465>`_.\n+  [lukasgraf, hvelarde]\n+\n+- Make search work with a path query containing a list of paths in a virtual hosting setting.\n+  [sunew]\n+\n+\n+3.4.4 (2018-08-31)\n+------------------\n+\n+Bugfixes:\n+\n+- Generalize the last bugfix solution for searching the userid on password\n+  reset requests, matching it with Plone\'s one. This covers all the request\n+  use cases.\n+  [sneridagh]\n+\n+\n+3.4.3 (2018-08-30)\n+------------------\n+\n+Bugfixes:\n+\n+- Add "Use UUID as user ID" support for password resets\n+  [sneridagh]\n+\n+\n+3.4.2 (2018-08-27)\n+------------------\n+\n+Bugfixes:\n+\n+- Add missing "Use UUID as user ID" support to POST @users endpoint on user creation.\n+  Also improve the userid/username chooser by using the same process as Plone does.\n+  This fixes: https://github.com/plone/plone.restapi/issues/586\n+  [sneridagh]\n+\n+\n+3.4.1 (2018-07-22)\n+------------------\n+\n+Bugfixes:\n+\n+- Make sure the default profile is installed on tiles profile installation.\n+  [timo]\n+\n+\n+3.4.0 (2018-07-21)\n+------------------\n+\n+New Features:\n+\n+- Add tiles profile.\n+  [timo]\n+\n+\n+3.3.0 (2018-07-20)\n+------------------\n+\n+New Features:\n+\n+- Return member fields based on user schema in `@users` endpoint instead of a\n+  fixed list of member properties.\n+  [buchi]\n+\n+\n+3.2.2 (2018-07-19)\n ------------------\n \n Bugfixes:\n@@ -20,6 +97,12 @@ Bugfixes:\n - Make setup.py require plone.behavior >= 1.1. This fixes #575.\n   [timo]\n \n+- Fixes ``test_search`` to work with bug fixed ``plone.indexer``.\n+  Now ``DXTestDocument`` explicit got an attribute ``exclude_from_nav``.\n+  This fixes `issue 579 <https://github.com/plone/plone.restapi/issues/579>`_.\n+  Refers to `Products.CMFPlone Issue 2469 <https://github.com/plone/Products.CMFPlone/issues/2469>`_\n+  [jensens]\n+\n \n 3.2.1 (2018-06-28)\n ------------------\ndiff --git a/MANIFEST.in b/MANIFEST.in\nindex 9d0b6b2d..49ee44d6 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -1,7 +1,15 @@\n graft src/plone/restapi\n graft docs\n include *.rst\n+include *.txt\n exclude *.cfg\n exclude *.yml\n+exclude *.in\n+exclude *.jmx\n+exclude *.yaml\n+exclude .coveragerc\n+exclude .editorconfig\n+exclude Dockerfile\n+exclude Makefile\n exclude bootstrap-buildout.py\n global-exclude *.pyc\ndiff --git a/Makefile b/Makefile\nindex f1004493..7404dce5 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -9,7 +9,8 @@ all: .installed.cfg\n \tbin/buildout\n \n bin/buildout: bin/pip\n-\tbin/pip install --upgrade pip setuptools zc.buildout\n+\tbin/pip install --upgrade pip\n+\tbin/pip install -r requirements.txt\n \t@touch -c $@\n \n bin/python bin/pip:\ndiff --git a/base.cfg b/base.cfg\nindex 4e6a6580..dcf032d3 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -50,7 +50,7 @@ zcml-additional =\n   <configure xmlns="http://namespaces.zope.org/zope"\n              xmlns:plone="http://namespaces.plone.org/plone">\n     <plone:CORSPolicy\n-        allow_origin="http://localhost:4300,http://127.0.0.1:4300"\n+        allow_origin="http://localhost:4300,http://127.0.0.1:4300,http://localhost:3000,http://127.0.0.1:3000"\n         allow_methods="DELETE,GET,OPTIONS,PATCH,POST,PUT"\n         allow_credentials="true"\n         expose_headers="Content-Length,X-My-Header"\ndiff --git a/docs/source/contributing.rst b/docs/source/contributing.rst\nnew file mode 100644\nindex 00000000..e03d24d8\n--- /dev/null\n+++ b/docs/source/contributing.rst\n@@ -0,0 +1,28 @@\n+Contributing to plone.restapi\n+=============================\n+\n+Generating documentation examples\n+---------------------------------\n+\n+This documentation includes examples of requests and responses (http, curl, httpie and python-requests).\n+These examples are generated by the documentation tests in ``test_documentation.py``.\n+To generate a new example, add a new test case to `test_documentation.py` - for example ``test_documentation_search_fullobjects``, and run the test:\n+\n+``./bin/test -t test_documentation_search_fullobjects``\n+\n+This generates the request and the response files in ``tests/http-examples/``.\n+\n+Include them in the documentation like this:\n+\n+.. code-block:: ReST\n+\n+    ..  http:example:: curl httpie python-requests\n+        :request: ../../src/plone/restapi/tests/http-examples/search_fullobjects.req\n+\n+    .. literalinclude:: ../../src/plone/restapi/tests/http-examples/search_fullobjects.resp\n+       :language: http\n+\n+\n+Build the sphinx docs locally to test the rendering by running ``./bin/sphinxbuilder``.\n+\n+Make sure you add and commit the generated files in ``http-examples``.\ndiff --git a/docs/source/index.rst b/docs/source/index.rst\nindex 6cca136e..882b2765 100644\n--- a/docs/source/index.rst\n+++ b/docs/source/index.rst\n@@ -53,6 +53,7 @@ Contents\n    i18n\n    email-notification\n    upgrade-guide\n+   contributing\n \n .. include:: ../../README.rst\n \ndiff --git a/docs/source/searching.rst b/docs/source/searching.rst\nindex e832f630..d7882ed6 100644\n--- a/docs/source/searching.rst\n+++ b/docs/source/searching.rst\n@@ -8,7 +8,7 @@ Content in a Plone site can be searched for by invoking the ``/@search`` endpoin\n     GET /plone/@search HTTP/1.1\n     Accept: application/json\n \n-A search is **contextual** by default, i.e. it is bound to a specific collection and searches within that collection and any sub-collections.\n+A search is **contextual** by default, i.e. it is bound to a specific context (a *collection* in HTTP REST terms) and searches within that collection and any sub-collections.\n \n Since a Plone site is also a collection, we therefore have a global search (by invoking the ``/@search`` endpoint on the site root) and contextual searches (by invoking that endpoint on any other context) all using the same pattern.\n \n@@ -25,6 +25,17 @@ Search results are represented similar to collections:\n The default representation for search results is a summary that contains only the most basic information.\n In order to return specific metadata columns, see the documentation of the ``metadata_fields`` parameter below.\n \n+.. note::\n+        A search invoked on a container will by default **include that container\n+        itself** as part of the search results. This is the same behavior as displayed by\n+        ZCatalog, which is used internally.\n+        If you add the query string\n+        parameter ``depth=1`` to your search, you will only get **immediate**\n+        children of the container, and the container itself also won\'t be part\n+        of the results. See the Plone docs on\n+        `searching for content within a folder <https://docs.plone.org/develop/plone/searching_and_indexing/query.html#searching-for-content-within-a-folder>`_.\n+        for more details.\n+\n .. note::\n         Search results results will be **batched** if the size of the\n         resultset exceeds the batch size. See :doc:`/batching` for more\n@@ -61,13 +72,33 @@ For example, to specify the ``depth`` query option for a path query, the origina\n \n This dictionary will need to be flattened in dotted notation in order to pass it in a query string:\n \n-.. code-block:: http\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/search_options.req\n \n-    GET /plone/@search?path.query=%2Ffolder&path.depth=2 HTTP/1.1\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/search_options.resp\n+   :language: http\n \n Again, this is very similar to how `Record Arguments <http://docs.zope.org/zope2/zdgbook/ObjectPublishing.html?highlight=record#record-arguments>`_ are parsed by ZPublisher, except that you can omit the ``:record`` suffix.\n \n \n+Restricting search to multiple paths\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+To restrict search to multiple paths, the original query as a Python dictionary would look like this (with an optional depth and sort_on)::\n+\n+    query = {\'path\': {\'query\': (\'/folder\', \'/folder2\'),\n+                      \'depth\': 2},\n+             \'sort_on\': \'path\'}\n+\n+This dictionary will need to be flattened in dotted notation in order to pass it in a query string. In order to specify multiple paths, simply repeat the query string parameter (the ``requests`` module will do this automatically for you if you pass it a list of values for a query string parameter).\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/search_multiple_paths.req\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/search_multiple_paths.resp\n+   :language: http\n+\n+\n Data types in queries\n ^^^^^^^^^^^^^^^^^^^^^\n \n@@ -95,10 +126,11 @@ Retrieving additional metadata\n By default the results are represented as summaries that only contain the most basic information about the items, like their URL and title.\n If you need to retrieve additional metadata columns, you can do so by specifying the additional column names in the ``metadata_fields`` parameter:\n \n-.. code-block:: http\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/search_metadata_fields.req\n \n-    GET /plone/@search?SearchableText=lorem&metadata_fields=modified HTTP/1.1\n-    Accept: application/json\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/search_metadata_fields.resp\n+   :language: http\n \n The metadata from those columns then will be included in the results.\n In order to specify multiple columns, simply repeat the query string parameter once for every column name (the ``requests`` module will do this automatically for you if you pass it a list of values for a query string parameter).\n@@ -113,10 +145,11 @@ If the data provided as metadata is not enough, you can retrieve search results\n \n You do so by specifying the ``fullobjects`` parameter:\n \n-.. code-block:: http\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/search_fullobjects.req\n \n-    GET /plone/@search?fullobjects&SearchableText=lorem HTTP/1.1\n-    Accept: application/json\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/search_fullobjects.resp\n+   :language: http\n \n .. warning::\n \ndiff --git a/docs/source/tiles.rst b/docs/source/tiles.rst\nindex 589b13bb..5d11bf61 100644\n--- a/docs/source/tiles.rst\n+++ b/docs/source/tiles.rst\n@@ -7,18 +7,16 @@ Tiles\n   not rely on those technologies. The serialization of the tile information on objects are subject to change in\n   the future to extend or improve features.\n \n-A tile is an HTML snippet that can contain arbitrary content (e.g. text, images, videos).\n+A tile in Plone is an HTML snippet that can contain arbitrary content (e.g. text, images, videos).\n \n-The @tiles endpoint is context specific.\n-Called on the portal root it will list all available tiles,\n-and allows to retrieve the JSON schema for those tiles.\n-\n-If called on a content object, it will return the tiles that are actually stored on that content object.\n \n Listing available tiles\n -----------------------\n \n-List all available tiles type by sending a GET request to the @tiles endpoint on the portal roots::\n+.. note::\n+  This endpoint currently does not return any data. The functionality needs to be implemented.\n+\n+List all available tiles type by sending a GET request to the @tiles endpoint on the portal root::\n \n   GET /plone/@tiles HTTP/1.1\n   Accept: application/json\n@@ -41,8 +39,12 @@ The server responds with a `Status 200` and list all available tiles::\n     },\n   ]\n \n-Retrieve Tile JSON schema\n--------------------------\n+\n+Retrieve JSON schema of an individual tile\n+------------------------------------------\n+\n+.. note::\n+  This endpoint currently does not return any data. The functionality needs to be implemented.\n \n Retrieve the JSON schema of a specific tile by calling the \'@tiles\' endpoint with the id of the tile::\n \n@@ -75,52 +77,15 @@ The server responds with a JSON schema definition for that particular tile::\n Retrieving tiles on a content object\n ------------------------------------\n \n-Retrieve a list of tiles stored on a content object by calling the @tiles endpoint on a content object::\n+Tiles data are stored in the objects via a Dexterity behavior `plone.tiles`. It has two attributes that stores existing tiles in the object (`tiles`) and the current layout (`tiles_layout`).\n+As it\'s a dexterity behavior, both attributes will be returned in a simple GET::\n \n-  GET /plone/my-document/@tiles HTTP/1.1\n+  GET /plone/my-document HTTP/1.1\n   Accept: application/json\n   Authorization: Basic YWRtaW46c2VjcmV0\n \n The server responds with a `Status 200` and list all stored tiles on that content object::\n \n-  HTTP/1.1 200 OK\n-  Content-Type: application/json\n-  {\n-    "@id": "http://localhost:55001/plone/my-document",\n-    ...\n-    "tiles": [\n-      {\n-        "@id": "http://localhost:55001/plone/my-document/@tiles/my-title",\n-        "type": "title",\n-      },\n-      {\n-        "@id": "http://localhost:55001/plone/my-document/@tiles/my-description",\n-        "type": "description",\n-      },\n-      {\n-        "@id": "http://localhost:55001/plone/my-document/@tiles/image-1",\n-        "type": "image",\n-        "data": {\n-          "image": "<some random url>",\n-          "caption": "My pony",\n-        },\n-      },\n-      {\n-        "type": "image",\n-        "data": {\n-          "image": "<some random url>",\n-          "caption": "My cow",\n-        },\n-      },\n-    ]\n-  }\n-\n-\n-Fetching tiles on an object\n----------------------------\n-Tiles data are stored in the objects via a Dexterity behavior `plone.tiles`. It has two attributes that stores existing tiles in the object (`tiles`) and the current layout (`tiles_layout`).\n-As it\'s a dexterity behavior, both attributes will be returned in a simple GET::\n-\n   GET /plone/my-document HTTP/1.1\n   Accept: application/json\n   Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/setup.py b/setup.py\nindex 44f13c12..b0875211 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,6 +1,6 @@\n from setuptools import setup, find_packages\n \n-version = \'3.2.2.dev0\'\n+version = \'3.4.6-dev.0\'\n \n long_description = (\n     open(\'README.rst\').read() + \'\\n\' +\n@@ -36,7 +36,7 @@\n       description="plone.restapi is a RESTful hypermedia API for Plone.",\n       long_description=long_description,\n       # Get more strings from\n-      # http://pypi.python.org/pypi?%3Aaction=list_classifiers\n+      # https://pypi.org/classifiers/\n       classifiers=[\n           "Development Status :: 5 - Production/Stable",\n           "Environment :: Web Environment",\n@@ -44,6 +44,7 @@\n           "Framework :: Plone :: 4.3",\n           "Framework :: Plone :: 5.0",\n           "Framework :: Plone :: 5.1",\n+          "Framework :: Plone :: 5.2",\n           "Intended Audience :: Developers",\n           "Operating System :: OS Independent",\n           "Programming Language :: Python",\ndiff --git a/src/plone/restapi/configure.zcml b/src/plone/restapi/configure.zcml\nindex bf0377c6..7d823d27 100644\n--- a/src/plone/restapi/configure.zcml\n+++ b/src/plone/restapi/configure.zcml\n@@ -40,6 +40,14 @@\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n       />\n \n+  <genericsetup:registerProfile\n+      name="tiles"\n+      title="plone.restapi tiles"\n+      directory="profiles/tiles"\n+      description="Enables tiles on the Document content type"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      />\n+\n   <!-- Register "various" import step -->\n   <genericsetup:importStep\n     name="plone.restapi"\ndiff --git a/src/plone/restapi/profiles/tiles/metadata.xml b/src/plone/restapi/profiles/tiles/metadata.xml\nnew file mode 100644\nindex 00000000..2665db30\n--- /dev/null\n+++ b/src/plone/restapi/profiles/tiles/metadata.xml\n@@ -0,0 +1,7 @@\n+<?xml version="1.0"?>\n+<metadata>\n+  <version>0001</version>\n+  <dependencies>\n+    <dependency>profile-plone.restapi:default</dependency>\n+  </dependencies>\n+</metadata>\ndiff --git a/src/plone/restapi/profiles/tiles/types.xml b/src/plone/restapi/profiles/tiles/types.xml\nnew file mode 100644\nindex 00000000..f264a135\n--- /dev/null\n+++ b/src/plone/restapi/profiles/tiles/types.xml\n@@ -0,0 +1,3 @@\n+<object name="portal_types" meta_type="Plone Types Tool">\n+  <object name="Document" meta_type="Dexterity FTI" />\n+</object>\ndiff --git a/src/plone/restapi/profiles/tiles/types/Document.xml b/src/plone/restapi/profiles/tiles/types/Document.xml\nnew file mode 100644\nindex 00000000..b1a8ff36\n--- /dev/null\n+++ b/src/plone/restapi/profiles/tiles/types/Document.xml\n@@ -0,0 +1,9 @@\n+<?xml version="1.0"?>\n+<object name="Document" meta_type="Dexterity FTI" i18n:domain="plone"\n+   xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n+ <property name="behaviors" purge="false">\n+  <element value="plone.tiles" />\n+  <!--<element value="collective.dexteritytextindexer.behavior.IDexterityTextIndexer" />-->\n+ </property>\n+\n+</object>\ndiff --git a/src/plone/restapi/search/handler.py b/src/plone/restapi/search/handler.py\nindex 2f65f530..a2b3f955 100644\n--- a/src/plone/restapi/search/handler.py\n+++ b/src/plone/restapi/search/handler.py\n@@ -33,7 +33,10 @@ def _constrain_query_by_path(self, query):\n         if \'path\' not in query:\n             query[\'path\'] = {}\n \n-        if isinstance(query[\'path\'], str):\n+        if (\n+            isinstance(query[\'path\'], str)\n+            or isinstance(query[\'path\'], list)\n+        ):\n             query[\'path\'] = {\'query\': query[\'path\']}\n \n         # If this is accessed through a VHM the client does not know\n@@ -43,9 +46,17 @@ def _constrain_query_by_path(self, query):\n         if vhm_physical_path:\n             path = query[\'path\'].get(\'query\')\n             if path:\n-                path = path.lstrip(\'/\')\n-                full_path = \'/\'.join(vhm_physical_path + (path,))\n-                query[\'path\'][\'query\'] = full_path\n+                if isinstance(path, str):\n+                    path = path.lstrip(\'/\')\n+                    full_path = \'/\'.join(vhm_physical_path + (path,))\n+                    query[\'path\'][\'query\'] = full_path\n+                if isinstance(path, list):\n+                    full_paths = []\n+                    for p in path:\n+                        p = p.lstrip(\'/\')\n+                        full_path = \'/\'.join(vhm_physical_path + (p,))\n+                        full_paths.append(full_path)\n+                    query[\'path\'][\'query\'] = full_paths\n \n         if isinstance(query[\'path\'], dict) and \'query\' not in query[\'path\']:\n             # We either had no \'path\' parameter at all, or an incomplete\ndiff --git a/src/plone/restapi/serializer/user.py b/src/plone/restapi/serializer/user.py\nindex 0bb67b67..0f153c8f 100644\n--- a/src/plone/restapi/serializer/user.py\n+++ b/src/plone/restapi/serializer/user.py\n@@ -2,10 +2,23 @@\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from Products.CMFCore.interfaces._tools import IMemberData\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.utils import safe_unicode\n from zope.component import adapter\n+from zope.component import getUtility\n from zope.component.hooks import getSite\n from zope.interface import implementer\n from zope.publisher.interfaces import IRequest\n+from zope.schema import getFieldNames\n+\n+try:\n+    # Plone 5\n+    from plone.app.users.browser.userdatapanel import getUserDataSchema\n+    HAS_TTW_SCHEMAS = True\n+except ImportError:\n+    # Plone 4.3\n+    from plone.app.users.userdataschema import IUserDataSchemaProvider\n+    HAS_TTW_SCHEMAS = False\n \n \n class BaseSerializer(object):\n@@ -24,21 +37,39 @@ def __call__(self):\n         # to logged-in or logged-out users. They should not be exposed here\n         roles = list(set(roles) - set([\'Anonymous\', \'Authenticated\', ]))\n \n-        return {\n-            \'@id\': \'{}/@users/{}\'.format(\n-                portal.absolute_url(),\n-                user.id\n-            ),\n+        data = {\n+            \'@id\': \'{}/@users/{}\'.format(portal.absolute_url(), user.id),\n             \'id\': user.id,\n-            \'email\': user.getProperty(\'email\'),\n             \'username\': user.getUserName(),\n-            \'fullname\': user.getProperty(\'fullname\'),\n-            \'home_page\': user.getProperty(\'home_page\'),\n-            \'description\': user.getProperty(\'description\'),\n-            \'location\': user.getProperty(\'location\'),\n             \'roles\': roles,\n         }\n \n+        if HAS_TTW_SCHEMAS:\n+            schema = getUserDataSchema()\n+        else:\n+            util = getUtility(IUserDataSchemaProvider)\n+            schema = util.getSchema()\n+\n+        for name in getFieldNames(schema):\n+            if name == \'portrait\':\n+                memberdata = getToolByName(portal, \'portal_memberdata\')\n+                if user.id in memberdata.portraits:\n+                    value = \'{}/portal_memberdata/portraits/{}\'.format(\n+                        portal.absolute_url(), user.id)\n+                else:\n+                    value = None\n+            elif name == \'pdelete\':\n+                continue\n+            else:\n+                value = user.getProperty(name, \'\')\n+                if value == \'\':\n+                    value = None\n+                if value:\n+                    value = safe_unicode(value)\n+            data[name] = value\n+\n+        return data\n+\n \n @implementer(ISerializeToJson)\n @adapter(IMemberData, IRequest)\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex 173a4f51..8f924966 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -1,14 +1,16 @@\n # -*- coding: utf-8 -*-\n \n from AccessControl import getSecurityManager\n-\n from plone.restapi.deserializer import json_body\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.services import Service\n-from Products.CMFCore.utils import getToolByName\n from Products.CMFCore.permissions import AddPortalMember\n from Products.CMFCore.permissions import SetOwnPassword\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.RegistrationTool import get_member_by_login_name\n+from Products.CMFPlone.utils import getFSVersionTuple\n from zope.component import getAdapter\n+from zope.component import getMultiAdapter\n from zope.component import queryMultiAdapter\n from zope.component.hooks import getSite\n from zope.interface import alsoProvides\n@@ -31,6 +33,8 @@\n     from Products.PasswordResetTool.PasswordResetTool import ExpiredRequestError  # noqa\n     from Products.PasswordResetTool.PasswordResetTool import InvalidRequestError  # noqa\n \n+PLONE5 = getFSVersionTuple()[0] >= 5\n+\n \n @implementer(IPublishTraverse)\n class UsersPost(Service):\n@@ -149,12 +153,43 @@ def reply(self):\n         send_password_reset = data.pop(\'sendPasswordReset\', None)\n         properties = data\n \n-        # set username based on the login settings (username or email)\n-        if security.use_email_as_login:\n-            username = email\n-            properties[\'username\'] = email\n+        if PLONE5:\n+            # We are improving the way the userid/login_name is generated using\n+            # Plone\'s plone.app.users utilities directly. Plone 4 lacks of the\n+            # login_name one, so we leave it as it is, improving the Plone 5\n+            # story\n+            user_id_login_name_data = {\n+                \'username\': username,\n+                \'email\': email,\n+                \'fullname\': data.get(\'fullname\', \'\')\n+            }\n+\n+            register_view = getMultiAdapter(\n+                (self.context, self.request),\n+                name=\'register\'\n+            )\n+\n+            register_view.generate_user_id(user_id_login_name_data)\n+            register_view.generate_login_name(user_id_login_name_data)\n+\n+            user_id = user_id_login_name_data.get(\n+                \'user_id\',\n+                data.get(\'username\')\n+            )\n+            login_name = user_id_login_name_data.get(\n+                \'login_name\',\n+                data.get(\'username\')\n+            )\n+\n+            username = user_id\n+            properties[\'username\'] = user_id\n         else:\n-            properties[\'username\'] = username\n+            # set username based on the login settings (username or email)\n+            if security.use_email_as_login:\n+                username = email\n+                properties[\'username\'] = email\n+            else:\n+                properties[\'username\'] = username\n \n         properties[\'email\'] = email\n \n@@ -177,6 +212,16 @@ def reply(self):\n                 type=\'MissingParameterError\',\n                 message=str(e)))\n \n+        if PLONE5:\n+            # After user creation, we have to fix the login_name if it differs.\n+            # That happens when the email login is enabled and we are using\n+            # UUID as user ID security settings.\n+            if user_id != login_name:\n+                # The user id differs from the login name.  Set the login\n+                # name correctly.\n+                pas = getToolByName(self.context, \'acl_users\')\n+                pas.updateLoginName(user_id, login_name)\n+\n         if send_password_reset:\n             registration.registeredNotify(username)\n         self.request.response.setStatus(201)\n@@ -194,6 +239,10 @@ def _get_user(self, user_id):\n         portal_membership = getToolByName(portal, \'portal_membership\')\n         return portal_membership.getMemberById(user_id)\n \n+    def _get_user_by_login_name(self, user_id):\n+        return get_member_by_login_name(\n+            self.context, user_id, raise_exceptions=False)\n+\n     def _error(self, status, type, message):\n         self.request.response.setStatus(status)\n         return {\'error\': {\'type\': type,\n@@ -217,7 +266,7 @@ def can_add_member(self):\n \n     def update_password(self, data):\n         username = self.params[0]\n-        target_user = self._get_user(username)\n+        target_user = self._get_user_by_login_name(username)\n         reset_token = data.get(\'reset_token\', None)\n         old_password = data.get(\'old_password\', None)\n         new_password = data.get(\'new_password\', None)\ndiff --git a/src/plone/restapi/setuphandlers.py b/src/plone/restapi/setuphandlers.py\nindex ce9f3c3e..3b6ef6f9 100644\n--- a/src/plone/restapi/setuphandlers.py\n+++ b/src/plone/restapi/setuphandlers.py\n@@ -4,6 +4,7 @@\n from plone.restapi.pas.plugin import JWTAuthenticationPlugin\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import INonInstallable\n+from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService  # noqa: E501\n from zope.interface import implementer\n \n \n@@ -30,7 +31,7 @@ def install_pas_plugin(context):\n     uf_parent = aq_inner(context)\n     while True:\n         uf = getToolByName(uf_parent, \'acl_users\')\n-        if \'jwt_auth\' not in uf:\n+        if IPluggableAuthService.providedBy(uf) and \'jwt_auth\' not in uf:\n             plugin = JWTAuthenticationPlugin(\'jwt_auth\')\n             uf._setObject(plugin.getId(), plugin)\n             plugin = uf[\'jwt_auth\']\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 3d521606..4786c426 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -316,6 +316,31 @@ def setUpPloneSite(self, portal):\n     PLONE_RESTAPI_AT_FUNCTIONAL_TESTING = PLONE_FIXTURE\n \n \n+class PloneRestApiTilesLayer(PloneSandboxLayer):\n+\n+    defaultBases = (PLONE_RESTAPI_DX_FIXTURE,)\n+\n+    def setUpPloneSite(self, portal):\n+        applyProfile(portal, \'plone.restapi:tiles\')\n+\n+\n+PLONE_RESTAPI_TILES_FIXTURE = PloneRestApiTilesLayer()\n+PLONE_RESTAPI_TILES_INTEGRATION_TESTING = IntegrationTesting(\n+    bases=(PLONE_RESTAPI_TILES_FIXTURE,),\n+    name="PloneRestApiTilesLayer:Integration"\n+)\n+PLONE_RESTAPI_TILES_FUNCTIONAL_TESTING = FunctionalTesting(\n+    bases=(PLONE_RESTAPI_TILES_FIXTURE, z2.ZSERVER_FIXTURE),\n+    name="PloneRestApiTilesLayer:Functional"\n+)\n+PLONE_RESTAPI_TILES_FUNCTIONAL_TESTING_FREEZETIME = FunctionalTesting(\n+    bases=(FREEZE_TIME_FIXTURE,\n+           PLONE_RESTAPI_TILES_FIXTURE,\n+           z2.ZSERVER_FIXTURE),\n+    name="PloneRestApiTilesLayerFreeze:Functional"\n+)\n+\n+\n class RelativeSession(requests.Session):\n     """A session that takes a base URL and makes requests relative to that\n     base if their URL is relative (doesn\'t begin with a HTTP[S] scheme).\ndiff --git a/src/plone/restapi/tests/dxtypes.py b/src/plone/restapi/tests/dxtypes.py\nindex 92ceb742..2284f677 100644\n--- a/src/plone/restapi/tests/dxtypes.py\n+++ b/src/plone/restapi/tests/dxtypes.py\n@@ -145,6 +145,10 @@ def default_factory(context):\n class DXTestDocument(Item):\n     """A Dexterity based test type containing a set of standard fields."""\n \n+    # Plone standard types (both, dx and at) do provide exclude_from_nav\n+    # and at least one test expect it to be here, so make it explicit\n+    exclude_from_nav = False\n+\n \n @provider(IFormFieldProvider)\n class ITestBehavior(model.Schema):\ndiff --git a/src/plone/restapi/tests/http-examples/search_fullobjects.req b/src/plone/restapi/tests/http-examples/search_fullobjects.req\nnew file mode 100644\nindex 00000000..3596b2de\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/search_fullobjects.req\n@@ -0,0 +1,3 @@\n+GET /plone/@search?fullobjects=1&SearchableText=lorem HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/search_fullobjects.resp b/src/plone/restapi/tests/http-examples/search_fullobjects.resp\nnew file mode 100644\nindex 00000000..aff87ad6\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/search_fullobjects.resp\n@@ -0,0 +1,59 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@search?fullobjects=1&SearchableText=lorem", \n+  "items": [\n+    {\n+      "@components": {\n+        "actions": {\n+          "@id": "http://localhost:55001/plone/doc1/@actions"\n+        }, \n+        "breadcrumbs": {\n+          "@id": "http://localhost:55001/plone/doc1/@breadcrumbs"\n+        }, \n+        "navigation": {\n+          "@id": "http://localhost:55001/plone/doc1/@navigation"\n+        }, \n+        "workflow": {\n+          "@id": "http://localhost:55001/plone/doc1/@workflow"\n+        }\n+      }, \n+      "@id": "http://localhost:55001/plone/doc1", \n+      "@type": "Document", \n+      "UID": "SomeUUID000000000000000000000002", \n+      "allow_discussion": false, \n+      "changeNote": "", \n+      "contributors": [], \n+      "created": "2016-10-21T19:00:00+00:00", \n+      "creators": [\n+        "test_user_1_"\n+      ], \n+      "description": "", \n+      "effective": null, \n+      "exclude_from_nav": false, \n+      "expires": null, \n+      "id": "doc1", \n+      "is_folderish": false, \n+      "language": "", \n+      "layout": "document_view", \n+      "modified": "2016-10-21T19:00:00+00:00", \n+      "parent": {\n+        "@id": "http://localhost:55001/plone", \n+        "@type": "Plone Site", \n+        "description": "", \n+        "title": "Plone site"\n+      }, \n+      "relatedItems": [], \n+      "review_state": "private", \n+      "rights": "", \n+      "subjects": [], \n+      "table_of_contents": null, \n+      "text": null, \n+      "title": "Lorem Ipsum", \n+      "version": "current", \n+      "versioning_enabled": true\n+    }\n+  ], \n+  "items_total": 1\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/search_metadata_fields.req b/src/plone/restapi/tests/http-examples/search_metadata_fields.req\nnew file mode 100644\nindex 00000000..591f5c19\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/search_metadata_fields.req\n@@ -0,0 +1,3 @@\n+GET /plone/@search?metadata_fields=modified&metadata_fields=created&SearchableText=lorem HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/search_metadata_fields.resp b/src/plone/restapi/tests/http-examples/search_metadata_fields.resp\nnew file mode 100644\nindex 00000000..5d72f0c2\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/search_metadata_fields.resp\n@@ -0,0 +1,18 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@search?metadata_fields=modified&metadata_fields=created&SearchableText=lorem", \n+  "items": [\n+    {\n+      "@id": "http://localhost:55001/plone/doc1", \n+      "@type": "Document", \n+      "created": "2016-10-21T19:00:00+00:00", \n+      "description": "", \n+      "modified": "2016-10-21T19:00:00+00:00", \n+      "review_state": "private", \n+      "title": "Lorem Ipsum"\n+    }\n+  ], \n+  "items_total": 1\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/search_multiple_paths.req b/src/plone/restapi/tests/http-examples/search_multiple_paths.req\nnew file mode 100644\nindex 00000000..0067c1de\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/search_multiple_paths.req\n@@ -0,0 +1,3 @@\n+GET /plone/@search?path.query=%2Fplone%2Ffolder1&path.query=%2Fplone%2Ffolder2&sort_on=path&path.depth=2 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/search_multiple_paths.resp b/src/plone/restapi/tests/http-examples/search_multiple_paths.resp\nnew file mode 100644\nindex 00000000..1aacaf15\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/search_multiple_paths.resp\n@@ -0,0 +1,37 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@search?path.query=%2Fplone%2Ffolder1&path.query=%2Fplone%2Ffolder2&path.depth=2", \n+  "items": [\n+    {\n+      "@id": "http://localhost:55001/plone/folder1", \n+      "@type": "Folder", \n+      "description": "", \n+      "review_state": "private", \n+      "title": "Folder 1"\n+    }, \n+    {\n+      "@id": "http://localhost:55001/plone/folder1/doc1", \n+      "@type": "Document", \n+      "description": "", \n+      "review_state": "private", \n+      "title": "Lorem Ipsum"\n+    }, \n+    {\n+      "@id": "http://localhost:55001/plone/folder2", \n+      "@type": "Folder", \n+      "description": "", \n+      "review_state": "private", \n+      "title": "Folder 2"\n+    }, \n+    {\n+      "@id": "http://localhost:55001/plone/folder2/doc2", \n+      "@type": "Document", \n+      "description": "", \n+      "review_state": "private", \n+      "title": "Lorem Ipsum"\n+    }\n+  ], \n+  "items_total": 4\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/search_options.req b/src/plone/restapi/tests/http-examples/search_options.req\nnew file mode 100644\nindex 00000000..53e86241\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/search_options.req\n@@ -0,0 +1,3 @@\n+GET /plone/@search?path.query=%2Fplone%2Ffolder1&sort_on=path&path.depth=1 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/search_options.resp b/src/plone/restapi/tests/http-examples/search_options.resp\nnew file mode 100644\nindex 00000000..70aab34a\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/search_options.resp\n@@ -0,0 +1,16 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@search?path.query=%2Fplone%2Ffolder1&path.depth=1", \n+  "items": [\n+    {\n+      "@id": "http://localhost:55001/plone/folder1/folder2", \n+      "@type": "Folder", \n+      "description": "", \n+      "review_state": "private", \n+      "title": "Folder 2"\n+    }\n+  ], \n+  "items_total": 1\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users.resp b/src/plone/restapi/tests/http-examples/users.resp\nindex 769552f6..c99b4114 100644\n--- a/src/plone/restapi/tests/http-examples/users.resp\n+++ b/src/plone/restapi/tests/http-examples/users.resp\n@@ -3,29 +3,31 @@ Content-Type: application/json\n \n [\n   {\n-    "@id": "http://localhost:55001/plone/@users/admin",\n-    "description": "This is an admin user",\n-    "email": "admin@example.com",\n-    "fullname": "Administrator",\n-    "home_page": "http://www.example.com",\n-    "id": "admin",\n-    "location": "Berlin",\n+    "@id": "http://localhost:55001/plone/@users/admin", \n+    "description": "This is an admin user", \n+    "email": "admin@example.com", \n+    "fullname": "Administrator", \n+    "home_page": "http://www.example.com", \n+    "id": "admin", \n+    "location": "Berlin", \n+    "portrait": null, \n     "roles": [\n       "Manager"\n     ],\n     "username": "admin"\n   },\n   {\n-    "@id": "http://localhost:55001/plone/@users/test_user_1_",\n-    "description": "This is a test user",\n-    "email": "test@example.com",\n-    "fullname": "Test User",\n-    "home_page": "http://www.example.com",\n-    "id": "test_user_1_",\n-    "location": "Bonn",\n+    "@id": "http://localhost:55001/plone/@users/test_user_1_", \n+    "description": "This is a test user", \n+    "email": "test@example.com", \n+    "fullname": "Test User", \n+    "home_page": "http://www.example.com", \n+    "id": "test_user_1_", \n+    "location": "Bonn", \n+    "portrait": null, \n     "roles": [\n       "Manager"\n     ],\n     "username": "test-user"\n   }\n-]\n\\ No newline at end of file\n+]\ndiff --git a/src/plone/restapi/tests/http-examples/users_add.resp b/src/plone/restapi/tests/http-examples/users_add.resp\nindex 68979e27..3394b2c8 100644\n--- a/src/plone/restapi/tests/http-examples/users_add.resp\n+++ b/src/plone/restapi/tests/http-examples/users_add.resp\n@@ -3,15 +3,16 @@ Content-Type: application/json\n Location: http://localhost:55001/plone/@users/noamchomsky\n \n {\n-  "@id": "http://localhost:55001/plone/@users/noamchomsky",\n-  "description": "Professor of Linguistics",\n-  "email": "noam.chomsky@example.com",\n-  "fullname": "Noam Avram Chomsky",\n-  "home_page": "web.mit.edu/chomsky",\n-  "id": "noamchomsky",\n-  "location": "Cambridge, MA",\n+  "@id": "http://localhost:55001/plone/@users/noamchomsky", \n+  "description": "Professor of Linguistics", \n+  "email": "noam.chomsky@example.com", \n+  "fullname": "Noam Avram Chomsky", \n+  "home_page": "web.mit.edu/chomsky", \n+  "id": "noamchomsky", \n+  "location": "Cambridge, MA", \n+  "portrait": null, \n   "roles": [\n     "Member"\n   ],\n   "username": "noamchomsky"\n-}\n\\ No newline at end of file\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/users_authorized_get.resp b/src/plone/restapi/tests/http-examples/users_authorized_get.resp\nindex b9f28241..36a9f006 100644\n--- a/src/plone/restapi/tests/http-examples/users_authorized_get.resp\n+++ b/src/plone/restapi/tests/http-examples/users_authorized_get.resp\n@@ -2,15 +2,16 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/@users/noam",\n-  "description": "Professor of Linguistics",\n-  "email": "noam.chomsky@example.com",\n-  "fullname": "Noam Avram Chomsky",\n-  "home_page": "web.mit.edu/chomsky",\n-  "id": "noam",\n-  "location": "Cambridge, MA",\n+  "@id": "http://localhost:55001/plone/@users/noam", \n+  "description": "Professor of Linguistics", \n+  "email": "noam.chomsky@example.com", \n+  "fullname": "Noam Avram Chomsky", \n+  "home_page": "web.mit.edu/chomsky", \n+  "id": "noam", \n+  "location": "Cambridge, MA", \n+  "portrait": null, \n   "roles": [\n     "Member"\n   ],\n   "username": "noam"\n-}\n\\ No newline at end of file\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/users_created.resp b/src/plone/restapi/tests/http-examples/users_created.resp\nindex 6c845e73..207e24ef 100644\n--- a/src/plone/restapi/tests/http-examples/users_created.resp\n+++ b/src/plone/restapi/tests/http-examples/users_created.resp\n@@ -3,15 +3,16 @@ Location: http://localhost:55001/plone/@users/noamchomsky\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/@users/noamchomsky",\n-  "description": "Professor of Linguistics",\n-  "email": "noam.chomsky@example.com",\n-  "fullname": "Noam Avram Chomsky",\n-  "home_page": "web.mit.edu/chomsky",\n-  "id": "noamchomsky",\n-  "location": "Cambridge, MA",\n+  "@id": "http://localhost:55001/plone/@users/noamchomsky", \n+  "description": "Professor of Linguistics", \n+  "email": "noam.chomsky@example.com", \n+  "fullname": "Noam Avram Chomsky", \n+  "home_page": "web.mit.edu/chomsky", \n+  "id": "noamchomsky", \n+  "location": "Cambridge, MA", \n+  "portrait": null, \n   "roles": [\n     "Contributor"\n   ],\n   "username": "noamchomsky"\n-}\n\\ No newline at end of file\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp b/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\nindex 7fde71a7..8f33a3e1 100644\n--- a/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n+++ b/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n@@ -3,16 +3,17 @@ Content-Type: application/json\n \n [\n   {\n-    "@id": "http://localhost:55001/plone/@users/noam",\n-    "description": "Professor of Linguistics",\n-    "email": "noam.chomsky@example.com",\n-    "fullname": "Noam Avram Chomsky",\n-    "home_page": "web.mit.edu/chomsky",\n-    "id": "noam",\n-    "location": "Cambridge, MA",\n+    "@id": "http://localhost:55001/plone/@users/noam", \n+    "description": "Professor of Linguistics", \n+    "email": "noam.chomsky@example.com", \n+    "fullname": "Noam Avram Chomsky", \n+    "home_page": "web.mit.edu/chomsky", \n+    "id": "noam", \n+    "location": "Cambridge, MA", \n+    "portrait": null, \n     "roles": [\n       "Member"\n     ],\n     "username": "noam"\n   }\n-]\n\\ No newline at end of file\n+]\ndiff --git a/src/plone/restapi/tests/http-examples/users_get.resp b/src/plone/restapi/tests/http-examples/users_get.resp\nindex b9f28241..36a9f006 100644\n--- a/src/plone/restapi/tests/http-examples/users_get.resp\n+++ b/src/plone/restapi/tests/http-examples/users_get.resp\n@@ -2,15 +2,16 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/@users/noam",\n-  "description": "Professor of Linguistics",\n-  "email": "noam.chomsky@example.com",\n-  "fullname": "Noam Avram Chomsky",\n-  "home_page": "web.mit.edu/chomsky",\n-  "id": "noam",\n-  "location": "Cambridge, MA",\n+  "@id": "http://localhost:55001/plone/@users/noam", \n+  "description": "Professor of Linguistics", \n+  "email": "noam.chomsky@example.com", \n+  "fullname": "Noam Avram Chomsky", \n+  "home_page": "web.mit.edu/chomsky", \n+  "id": "noam", \n+  "location": "Cambridge, MA", \n+  "portrait": null, \n   "roles": [\n     "Member"\n   ],\n   "username": "noam"\n-}\n\\ No newline at end of file\n+}\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 50e1f37d..deae388b 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -423,6 +423,80 @@ def test_documentation_search(self):\n         response = self.api_session.get(\'/@search\', params=query)\n         save_request_and_response_for_docs(\'search\', response)\n \n+    def test_documentation_search_options(self):\n+        self.portal.invokeFactory(\n+            \'Folder\',\n+            id=\'folder1\',\n+            title=\'Folder 1\'\n+        )\n+        self.portal.folder1.invokeFactory(\n+            \'Folder\',\n+            id=\'folder2\',\n+            title=\'Folder 2\'\n+        )\n+        import transaction\n+        transaction.commit()\n+        query = {\'sort_on\': \'path\',\n+                 \'path.query\': \'/plone/folder1\',\n+                 \'path.depth\': \'1\'}\n+        response = self.api_session.get(\'/@search\', params=query)\n+        save_request_and_response_for_docs(\'search_options\', response)\n+\n+    def test_documentation_search_multiple_paths(self):\n+        self.portal.invokeFactory(\n+            \'Folder\',\n+            id=\'folder1\',\n+            title=\'Folder 1\'\n+        )\n+        self.portal.folder1.invokeFactory(\n+            \'Document\',\n+            id=\'doc1\',\n+            title=\'Lorem Ipsum\'\n+        )\n+        self.portal.invokeFactory(\n+            \'Folder\',\n+            id=\'folder2\',\n+            title=\'Folder 2\'\n+        )\n+        self.portal.folder2.invokeFactory(\n+            \'Document\',\n+            id=\'doc2\',\n+            title=\'Lorem Ipsum\'\n+        )\n+        import transaction\n+        transaction.commit()\n+        query = {\'sort_on\': \'path\',\n+                 \'path.query\': [\'/plone/folder1\', \'/plone/folder2\'],\n+                 \'path.depth\': \'2\'}\n+        response = self.api_session.get(\'/@search\', params=query)\n+        save_request_and_response_for_docs(\'search_multiple_paths\', response)\n+\n+    def test_documentation_search_metadata_fields(self):\n+        self.portal.invokeFactory(\n+            \'Document\',\n+            id=\'doc1\',\n+            title=\'Lorem Ipsum\'\n+        )\n+        import transaction\n+        transaction.commit()\n+        query = {\'SearchableText\': \'lorem\',\n+                 \'metadata_fields\': [\'modified\', \'created\']}\n+        response = self.api_session.get(\'/@search\', params=query)\n+        save_request_and_response_for_docs(\'search_metadata_fields\', response)\n+\n+    def test_documentation_search_fullobjects(self):\n+        self.portal.invokeFactory(\n+            \'Document\',\n+            id=\'doc1\',\n+            title=\'Lorem Ipsum\'\n+        )\n+        import transaction\n+        transaction.commit()\n+        query = {\'SearchableText\': \'lorem\',\n+                 \'fullobjects\': 1}\n+        response = self.api_session.get(\'/@search\', params=query)\n+        save_request_and_response_for_docs(\'search_fullobjects\', response)\n+\n     def test_documentation_workflow(self):\n         response = self.api_session.get(\n             \'{}/@workflow\'.format(self.document.absolute_url()))\ndiff --git a/src/plone/restapi/tests/test_profile_tiles.py b/src/plone/restapi/tests/test_profile_tiles.py\nnew file mode 100644\nindex 00000000..dbeccb14\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_profile_tiles.py\n@@ -0,0 +1,34 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import login\n+from plone.app.testing import setRoles\n+from plone.restapi.testing import PLONE_RESTAPI_TILES_INTEGRATION_TESTING\n+from plone.restapi.behaviors import ITiles\n+from Products.CMFCore.utils import getToolByName\n+\n+import unittest\n+\n+\n+class TestProfileTiles(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_TILES_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer[\'app\']\n+        self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        login(self.portal, SITE_OWNER_NAME)\n+\n+    def test_document_type_has_tiles_behavior_enabled(self):\n+        self.portal.invokeFactory(\n+            \'Document\',\n+            id=\'tileddoc\',\n+            title=\'Document with Tiles\'\n+        )\n+        ITiles.providedBy(self.portal[\'tileddoc\'])\n+\n+    def test_plone_restapi_base_profile_applied(self):\n+        uf = getToolByName(self.portal, \'acl_users\')\n+        self.assertTrue(\'jwt_auth\' in uf)\ndiff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex c7e462e8..478215a2 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -75,6 +75,23 @@ def setUp(self):\n             test_bool_field=False,\n         )\n \n+        # /plone/folder2\n+        self.folder2 = createContentInContainer(\n+            self.portal, u\'Folder\',\n+            id=u\'folder2\',\n+            title=u\'Another Folder\')\n+\n+        # /plone/folder2/doc\n+        createContentInContainer(\n+            self.folder2, u\'DXTestDocument\',\n+            id=\'doc\',\n+            title=u\'Document in second folder\',\n+            start=DateTime(1975, 1, 1, 0, 0),\n+            effective=DateTime(2015, 1, 1, 0, 0),\n+            expires=DateTime(2020, 1, 1, 0, 0),\n+            test_bool_field=False,\n+        )\n+\n         # /plone/doc-outside-folder\n         createContentInContainer(\n             self.portal, u\'DXTestDocument\',\n@@ -134,10 +151,61 @@ def test_search_in_vhm(self):\n              u\'/folder/other-document\'},\n             set(result_paths(response.json())))\n \n+    def test_search_in_vhm_multiple_paths(self):\n+        # Install a Virtual Host Monster\n+        if \'virtual_hosting\' not in self.app.objectIds():\n+            # If ZopeLite was imported, we have no default virtual\n+            # host monster\n+            from Products.SiteAccess.VirtualHostMonster \\\n+                import manage_addVirtualHostMonster\n+            manage_addVirtualHostMonster(self.app, \'virtual_hosting\')\n+        transaction.commit()\n+\n+        # path as a list\n+        query = {\'path\': [\n+            \'/folder\',\n+            \'/folder2\']\n+        }\n+\n+        # If we go through the VHM we will get results for multiple paths\n+        # if we only use the part of the path inside the VHM\n+        vhm_url = (\n+            \'%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s\' %\n+            (self.app.absolute_url(), \'@search\'))\n+        response = self.api_session.get(vhm_url, params=query)\n+        self.assertSetEqual(\n+            {u\'/folder\',\n+             u\'/folder/doc\',\n+             u\'/folder/other-document\',\n+             u\'/folder2\',\n+             u\'/folder2/doc\'},\n+            set(result_paths(response.json())))\n+\n+        # path as a dict with a query list\n+        query = {\'path.query\': [\n+            \'/folder\',\n+            \'/folder2\']\n+        }\n+\n+        # If we go through the VHM we will get results for multiple paths\n+        # if we only use the part of the path inside the VHM\n+        vhm_url = (\n+            \'%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s\' %\n+            (self.app.absolute_url(), \'@search\'))\n+        response = self.api_session.get(vhm_url, params=query)\n+        self.assertSetEqual(\n+            {u\'/folder\',\n+             u\'/folder/doc\',\n+             u\'/folder/other-document\',\n+             u\'/folder2\',\n+             u\'/folder2/doc\'},\n+            set(result_paths(response.json())))\n+\n     def test_path_gets_prefilled_if_missing_from_path_query_dict(self):\n         response = self.api_session.get(\'/@search?path.depth=1\')\n         self.assertSetEqual(\n             {u\'/plone/folder\',\n+             u\'/plone/folder2\',\n              u\'/plone/doc-outside-folder\'},\n             set(result_paths(response.json())))\n \n@@ -176,7 +244,7 @@ def test_full_metadata_retrieval(self):\n              u\'exclude_from_nav\': False,\n              u\'expires\': u\'1999-01-01T00:00:00+00:00\',\n              u\'getId\': u\'doc\',\n-             u\'getObjSize\': u\'0 KB\',\n+             u\'getObjSize\': u\'1 KB\',\n              u\'getPath\': u\'/plone/folder/doc\',\n              u\'getRemoteUrl\': None,\n              u\'getURL\': self.portal_url + u\'/folder/doc\',\n@@ -362,6 +430,39 @@ def test_extended_path_index_query(self):\n             result_paths(response.json())\n         )\n \n+    def test_extended_path_index_query_multiple(self):\n+        # path as a list\n+        query = {\'path\': [\n+                \'/\'.join(self.folder.getPhysicalPath()),\n+                \'/\'.join(self.folder2.getPhysicalPath())]\n+        }\n+        response = self.api_session.get(\'/@search\', params=query)\n+\n+        self.assertEqual(\n+            [u\'/plone/folder\',\n+             u\'/plone/folder/doc\',\n+             u\'/plone/folder/other-document\',\n+             u\'/plone/folder2\',\n+             u\'/plone/folder2/doc\'],\n+            result_paths(response.json())\n+        )\n+\n+        # path as a dict with a query list\n+        query = {\'path.query\': [\n+                \'/\'.join(self.folder.getPhysicalPath()),\n+                \'/\'.join(self.folder2.getPhysicalPath())]\n+        }\n+        response = self.api_session.get(\'/@search\', params=query)\n+\n+        self.assertEqual(\n+            [u\'/plone/folder\',\n+             u\'/plone/folder/doc\',\n+             u\'/plone/folder/other-document\',\n+             u\'/plone/folder2\',\n+             u\'/plone/folder2/doc\'],\n+            result_paths(response.json())\n+        )\n+\n     def test_extended_path_index_depth_limiting(self):\n         lvl1 = createContentInContainer(self.portal, u\'Folder\', id=u\'lvl1\')\n         lvl2 = createContentInContainer(lvl1, u\'Folder\', id=u\'lvl2\')\ndiff --git a/src/plone/restapi/tests/test_serializer_user.py b/src/plone/restapi/tests/test_serializer_user.py\nindex cc4d6309..b32d9041 100644\n--- a/src/plone/restapi/tests/test_serializer_user.py\n+++ b/src/plone/restapi/tests/test_serializer_user.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone import api\n from plone.restapi.interfaces import ISerializeToJson\n+from plone.restapi.serializer.user import HAS_TTW_SCHEMAS\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from zope.component import getMultiAdapter\n \n@@ -49,3 +50,33 @@ def test_serialize_roles(self):\n         self.assertIn(\'roles\', user)\n         self.assertNotIn(\'Authenticated\', user[\'roles\'])\n         self.assertNotIn(\'Anonymous\', user[\'roles\'])\n+\n+    @unittest.skipUnless(HAS_TTW_SCHEMAS, \'Requires TTW user schemas\')\n+    def test_serialize_custom_member_schema(self):\n+        from plone.app.users.browser.schemaeditor import applySchema\n+        member_schema = """\n+            <model xmlns="http://namespaces.plone.org/supermodel/schema"\n+                xmlns:form="http://namespaces.plone.org/supermodel/form"\n+                xmlns:users="http://namespaces.plone.org/supermodel/users"\n+                xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+                i18n:domain="plone">\n+              <schema name="member-fields">\n+                <field name="twitter" type="zope.schema.TextLine"\n+                         users:forms="In User Profile">\n+                  <description i18n:translate="help_twitter">\n+                    Twitter account\n+                  </description>\n+                  <required>False</required>\n+                  <title i18n:translate="label_twitter">Twitter Account</title>\n+                </field>\n+              </schema>\n+            </model>\n+        """\n+        applySchema(member_schema)\n+        user = api.user.create(\n+            email=\'donald.duck@example.com\',\n+            username=\'donald\',\n+            properties={\'twitter\': \'TheRealDuck\'})\n+        res = self.serialize(user)\n+        self.assertIn(\'twitter\', res)\n+        self.assertEqual(res[\'twitter\'], \'TheRealDuck\')\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex f4506663..fadf8007 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -292,6 +292,28 @@ def test_add_anon_no_roles(self):\n         fields = [x[\'field\'] for x in errors]\n         self.assertEqual([\'roles\'], fields)\n \n+    def test_add_user_with_uuid_as_userid_enabled(self):\n+        # enable use_email_as_login\n+        security_settings = getAdapter(self.portal, ISecuritySchema)\n+        security_settings.use_email_as_login = True\n+        security_settings.use_uuid_as_userid = True\n+        transaction.commit()\n+        response = self.api_session.post(\n+            \'/@users\',\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": "secret"\n+            },\n+        )\n+        transaction.commit()\n+\n+        self.assertEqual(201, response.status_code)\n+        user_id = response.json()[\'id\']\n+        user = api.user.get(userid=user_id)\n+        self.assertTrue(user)\n+        self.assertEqual(\'howard.zinn@example.com\', user.getUserName())\n+        self.assertEqual(\'howard.zinn@example.com\', user.getProperty(\'email\'))\n+\n     def test_get_user(self):\n         response = self.api_session.get(\'/@users/noam\')\n \n@@ -597,6 +619,107 @@ def test_reset_with_token(self):\n                                                     {})\n         self.assertTrue(authed)\n \n+    def test_reset_with_uuid_as_userid_and_login_email_using_id(self):\n+        # enable use_email_as_login\n+        security_settings = getAdapter(self.portal, ISecuritySchema)\n+        security_settings.use_email_as_login = True\n+        security_settings.use_uuid_as_userid = True\n+        transaction.commit()\n+\n+        response = self.api_session.post(\n+            \'/@users\',\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": "secret"\n+            },\n+        )\n+        transaction.commit()\n+\n+        self.assertEqual(201, response.status_code)\n+        user_id = response.json()[\'id\']\n+        user = api.user.get(userid=user_id)\n+        self.assertTrue(user)\n+\n+        reset_tool = getToolByName(self.portal, \'portal_password_reset\')\n+        reset_info = reset_tool.requestReset(user.id)\n+        token = reset_info[\'randomstring\']\n+        transaction.commit()\n+\n+        payload = {\'reset_token\': token,\n+                   \'new_password\': \'new_password\'}\n+        response = self.api_session.post(\n+            \'/@users/{}/reset-password\'.format(user.id),\n+            json=payload)\n+\n+        self.assertEqual(response.status_code, 200)\n+\n+    def test_reset_with_uuid_as_userid_and_login_email_using_mail(self):\n+        # enable use_email_as_login\n+        security_settings = getAdapter(self.portal, ISecuritySchema)\n+        security_settings.use_email_as_login = True\n+        security_settings.use_uuid_as_userid = True\n+        transaction.commit()\n+\n+        response = self.api_session.post(\n+            \'/@users\',\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": "secret"\n+            },\n+        )\n+        transaction.commit()\n+\n+        self.assertEqual(201, response.status_code)\n+        user_id = response.json()[\'id\']\n+        user = api.user.get(userid=user_id)\n+        self.assertTrue(user)\n+\n+        reset_tool = getToolByName(self.portal, \'portal_password_reset\')\n+        reset_info = reset_tool.requestReset(user.id)\n+        token = reset_info[\'randomstring\']\n+        transaction.commit()\n+\n+        payload = {\'reset_token\': token,\n+                   \'new_password\': \'new_password\'}\n+        response = self.api_session.post(\n+            \'/@users/{}/reset-password\'.format(user.getUserName()),\n+            json=payload)\n+\n+        self.assertEqual(response.status_code, 200)\n+\n+    def test_reset_and_login_email_using_mail(self):\n+        # enable use_email_as_login\n+        security_settings = getAdapter(self.portal, ISecuritySchema)\n+        security_settings.use_email_as_login = True\n+        transaction.commit()\n+\n+        response = self.api_session.post(\n+            \'/@users\',\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": "secret"\n+            },\n+        )\n+        transaction.commit()\n+\n+        self.assertEqual(201, response.status_code)\n+        user_id = response.json()[\'id\']\n+        user = api.user.get(userid=user_id)\n+        self.assertTrue(user)\n+\n+        reset_tool = getToolByName(self.portal, \'portal_password_reset\')\n+        reset_info = reset_tool.requestReset(user.id)\n+        token = reset_info[\'randomstring\']\n+        transaction.commit()\n+\n+        payload = {\'reset_token\': token,\n+                   \'new_password\': \'new_password\'}\n+        response = self.api_session.post(\n+            \'/@users/{}/reset-password\'.format(user.getUserName()),\n+            json=payload)\n+\n+        self.assertEqual(response.status_code, 200)\n+\n     def test_delete_user(self):\n         response = self.api_session.delete(\'/@users/noam\')\n         transaction.commit()\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-10-01T19:40:44+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.restapi/commit/c1a9e50a30fb555ea3c88c880d7ef2861ad819ef

Pep8 fixes.

Files changed:
M src/plone/restapi/tests/test_atcontent_deserializer.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_dxcontent_deserializer.py
M src/plone/restapi/tests/test_functional_auth.py
M src/plone/restapi/tests/test_serializer_converters.py
M src/plone/restapi/tests/test_tus.py

b'diff --git a/src/plone/restapi/tests/test_atcontent_deserializer.py b/src/plone/restapi/tests/test_atcontent_deserializer.py\nindex 38eccf84..8f9e79bb 100644\n--- a/src/plone/restapi/tests/test_atcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_deserializer.py\n@@ -102,8 +102,10 @@ def test_deserializer_raises_if_required_value_is_missing(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"testStringField": "My Value"}\',\n                              validate_all=True)\n-        self.assertEqual(u\'TestRequiredField is required, please correct.\',\n-                          cm.exception.args[0][0][\'message\'])\n+        self.assertEqual(\n+            u\'TestRequiredField is required, please correct.\',\n+            cm.exception.args[0][0][\'message\']\n+        )\n \n     def test_deserializer_succeeds_if_required_value_is_provided(self):\n         self.deserialize(body=\'{"testRequiredField": "My Value"}\',\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex deae388b..e0ee2df2 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -37,7 +37,6 @@\n from zope.site.hooks import getSite\n \n import collections\n-import io\n import json\n import os\n import re\n@@ -105,7 +104,8 @@ def save_request_and_response_for_docs(name, response):\n         open_kw = {}\n     else:\n         open_kw = {\'newline\': \'\\n\'}\n-    with open(\'{}/{}\'.format(base_path, \'%s.req\' % name), \'w\', **open_kw) as req:\n+    filename = \'{}/{}\'.format(base_path, \'%s.req\' % name)\n+    with open(filename, \'w\', **open_kw) as req:\n         req.write(\'{} {} HTTP/1.1\\n\'.format(\n             response.request.method,\n             response.request.path_url\n@@ -139,7 +139,8 @@ def save_request_and_response_for_docs(name, response):\n                 req.buffer.seek(0, 2)\n                 req.buffer.write(response.request.body)\n \n-    with open(\'{}/{}\'.format(base_path, \'%s.resp\' % name), \'w\', **open_kw) as resp:\n+    filename = \'{}/{}\'.format(base_path, \'%s.resp\' % name)\n+    with open(filename, \'w\', **open_kw) as resp:\n         status = response.status_code\n         reason = response.reason\n         resp.write(\'HTTP/1.1 {} {}\\n\'.format(status, reason))\ndiff --git a/src/plone/restapi/tests/test_dxcontent_deserializer.py b/src/plone/restapi/tests/test_dxcontent_deserializer.py\nindex 4b0ee9c5..6cd85ccd 100644\n--- a/src/plone/restapi/tests/test_dxcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_deserializer.py\n@@ -93,22 +93,28 @@ def test_deserializer_does_not_update_field_without_write_permission(self):\n         setRoles(self.portal,\n                  TEST_USER_ID, [\'Member\', \'Contributor\', \'Editor\'])\n         self.deserialize(body=\'{"test_write_permission_field": "Foo"}\')\n-        self.assertEqual(u\'Test Write Permission\',\n-                          self.portal.doc1.test_write_permission_field)\n+        self.assertEqual(\n+            u\'Test Write Permission\',\n+            self.portal.doc1.test_write_permission_field\n+        )\n \n     def test_deserializer_updates_field_with_write_permission(self):\n         self.portal.doc1.test_write_permission_field = u\'Test Write Permission\'\n         setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Manager\'])\n         self.deserialize(body=\'{"test_write_permission_field": "Foo"}\')\n-        self.assertEqual(u\'Foo\',\n-                          self.portal.doc1.test_write_permission_field)\n+        self.assertEqual(\n+            u\'Foo\',\n+            self.portal.doc1.test_write_permission_field\n+        )\n \n     def test_deserializer_validates_invariant(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"test_invariant_field1": "Foo",\'\n                                   \' "test_invariant_field2": "Bar"}\')\n-        self.assertEqual(u\'Must have same values\',\n-                          str(cm.exception.args[0][0][\'message\']))\n+        self.assertEqual(\n+            u\'Must have same values\',\n+            str(cm.exception.args[0][0][\'message\'])\n+        )\n \n     def test_deserializer_updates_behavior_field_value(self):\n         self.deserialize(body=\'{"test_behavior_field": "My Value"}\')\n@@ -127,15 +133,19 @@ def test_deserializer_raises_if_required_value_is_missing(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"test_textline_field": "My Value"}\',\n                              validate_all=True)\n-        self.assertEqual(u\'Required input is missing.\',\n-                          cm.exception.args[0][0][\'message\'])\n+        self.assertEqual(\n+            u\'Required input is missing.\',\n+            cm.exception.args[0][0][\'message\']\n+        )\n \n         # An empty string should be considered a missing value\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"test_textline_field": ""}\',\n                              validate_all=True)\n-        self.assertEqual(u\'Required input is missing.\',\n-                          cm.exception.args[0][0][\'message\'])\n+        self.assertEqual(\n+            u\'Required input is missing.\',\n+            cm.exception.args[0][0][\'message\']\n+        )\n \n     def test_deserializer_succeeds_if_required_value_is_provided(self):\n         self.deserialize(body=\'{"test_required_field": "My Value"}\',\n@@ -159,15 +169,21 @@ def test_deserializer_does_not_store_default_value(self):\n     def test_deserializer_passes_validation_with_not_provided_defaults(self):\n         self.deserialize(body=\'{"test_required_field": "My Value"}\',\n                          validate_all=True)\n-        self.assertEqual(u\'Default\',\n-                          self.portal.doc1.test_default_value_field)\n-        self.assertEqual(u\'DefaultFactory\',\n-                          self.portal.doc1.test_default_factory_field)\n+        self.assertEqual(\n+            u\'Default\',\n+            self.portal.doc1.test_default_value_field\n+        )\n+        self.assertEqual(\n+            u\'DefaultFactory\',\n+            self.portal.doc1.test_default_factory_field\n+        )\n \n     def test_deserializer_sets_missing_value_when_receiving_null(self):\n         self.deserialize(body=\'{"test_missing_value_field": null}\')\n-        self.assertEqual(u\'missing\',\n-                          self.portal.doc1.test_missing_value_field)\n+        self.assertEqual(\n+            u\'missing\',\n+            self.portal.doc1.test_missing_value_field\n+        )\n \n     def test_deserializer_sets_missing_value_on_required_field(self):\n         \'\'\'We don\'t set missing_value if the field is required\'\'\'\n@@ -176,8 +192,10 @@ def test_deserializer_sets_missing_value_on_required_field(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(\n                 body=\'{"test_missing_value_required_field": null}\')\n-        self.assertEqual(u\'valid value\',\n-                          self.portal.doc1.test_missing_value_required_field)\n+        self.assertEqual(\n+            u\'valid value\',\n+            self.portal.doc1.test_missing_value_required_field\n+        )\n         self.assertEqual(\n             (\n                 \'test_missing_value_required_field is a required field.\',\n@@ -185,8 +203,10 @@ def test_deserializer_sets_missing_value_on_required_field(self):\n             ),\n             cm.exception.args[0][0][\'message\']\n         )\n-        self.assertEqual(u\'test_missing_value_required_field\',\n-                          cm.exception.args[0][0][\'field\'])\n+        self.assertEqual(\n+            u\'test_missing_value_required_field\',\n+            cm.exception.args[0][0][\'field\']\n+        )\n \n     def test_set_layout(self):\n         current_layout = self.portal.doc1.getLayout()\ndiff --git a/src/plone/restapi/tests/test_functional_auth.py b/src/plone/restapi/tests/test_functional_auth.py\nindex 112ee230..1d8543ab 100644\n--- a/src/plone/restapi/tests/test_functional_auth.py\n+++ b/src/plone/restapi/tests/test_functional_auth.py\n@@ -8,7 +8,6 @@\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n import requests\n-import six\n import transaction\n import unittest\n \ndiff --git a/src/plone/restapi/tests/test_serializer_converters.py b/src/plone/restapi/tests/test_serializer_converters.py\nindex adec3b65..289fee0c 100644\n--- a/src/plone/restapi/tests/test_serializer_converters.py\n+++ b/src/plone/restapi/tests/test_serializer_converters.py\n@@ -50,8 +50,10 @@ def test_unicode(self):\n \n     def test_unicode_with_umlaut(self):\n         self.assertEqual(u\'Hall\\xf6chen\', json_compatible(u\'Hall\\xf6chen\'))\n-        self.assertEqual(\'"Hall\\\\u00f6chen"\',\n-                          json.dumps(json_compatible(u\'Hall\\xf6chen\')))\n+        self.assertEqual(\n+            \'"Hall\\\\u00f6chen"\',\n+            json.dumps(json_compatible(u\'Hall\\xf6chen\'))\n+        )\n \n     def test_string_is_converted_to_unicode(self):\n         # Standard library JSON works with unicode.\n@@ -62,8 +64,10 @@ def test_string_is_converted_to_unicode(self):\n     def test_string_with_umlaut(self):\n         # Standard library JSON works with unicode.\n         self.assertEqual(u\'Hall\\xf6chen\', json_compatible(\'Hall\xc3\xb6chen\'))\n-        self.assertEqual(\'"Hall\\\\u00f6chen"\',\n-                          json.dumps(json_compatible(\'Hall\xc3\xb6chen\')))\n+        self.assertEqual(\n+            \'"Hall\\\\u00f6chen"\',\n+            json.dumps(json_compatible(\'Hall\xc3\xb6chen\'))\n+        )\n \n     def test_int(self):\n         self.assertEqual(42, json_compatible(42))\n@@ -111,22 +115,36 @@ def test_tuple(self):\n                               \'Tuple values should be converted recursively.\')\n \n     def test_frozenset(self):\n-        self.assertEqual([[1, 1], [2, 2]],\n-                          sorted(json_compatible(frozenset([(1, 1), (2, 2)]))))\n+        self.assertEqual(\n+            [[1, 1], [2, 2]],\n+            sorted(json_compatible(frozenset([(1, 1), (2, 2)])))\n+        )\n \n     def test_set(self):\n-        self.assertEqual([[1, 1], [2, 2]],\n-                          sorted(json_compatible(set([(1, 1), (2, 2)]))))\n+        self.assertEqual(\n+            [[1, 1], [2, 2]],\n+            sorted(json_compatible(set([(1, 1), (2, 2)])))\n+        )\n \n     def test_dict(self):\n-        self.assertEqual({u\'foo\': True,\n-                           u\'bar\': None,\n-                           u\'baz\': 3},\n-                          json_compatible({\'foo\': True,\n-                                           \'bar\': None,\n-                                           \'baz\': 3}))\n-        self.assertEqual(\'{"foo": "bar"}\',\n-                          json.dumps(json_compatible({\'foo\': \'bar\'})))\n+        self.assertEqual(\n+            {\n+                u\'foo\': True,\n+                u\'bar\': None,\n+                u\'baz\': 3\n+            },\n+            json_compatible(\n+                {\n+                    \'foo\': True,\n+                    \'bar\': None,\n+                    \'baz\': 3\n+                }\n+            )\n+        )\n+        self.assertEqual(\n+            \'{"foo": "bar"}\',\n+            json.dumps(json_compatible({\'foo\': \'bar\'}))\n+        )\n         self.assertIsInstance(json_compatible(list({\'foo\': \'bar\'})[0]),\n                               six.text_type,\n                               \'Dict keys should be converted recursively.\')\n@@ -152,17 +170,25 @@ def test_persistent_mapping(self):\n \n     def test_python_datetime(self):\n         value = DateTime(\'2015/11/23 19:45:55.649027 GMT+3\').asdatetime()\n-        self.assertEqual(u\'2015-11-23T16:45:55+00:00\',\n-                          json_compatible(value))\n-        self.assertEqual(\'"2015-11-23T16:45:55+00:00"\',\n-                          json.dumps(json_compatible(value)))\n+        self.assertEqual(\n+            u\'2015-11-23T16:45:55+00:00\',\n+            json_compatible(value)\n+        )\n+        self.assertEqual(\n+            \'"2015-11-23T16:45:55+00:00"\',\n+            json.dumps(json_compatible(value))\n+        )\n \n     def test_zope_DateTime(self):\n         value = DateTime(\'2015/11/23 19:45:55.649027 GMT+3\')\n-        self.assertEqual(u\'2015-11-23T16:45:55+00:00\',\n-                          json_compatible(value))\n-        self.assertEqual(\'"2015-11-23T16:45:55+00:00"\',\n-                          json.dumps(json_compatible(value)))\n+        self.assertEqual(\n+            u\'2015-11-23T16:45:55+00:00\',\n+            json_compatible(value)\n+        )\n+        self.assertEqual(\n+            \'"2015-11-23T16:45:55+00:00"\',\n+            json.dumps(json_compatible(value))\n+        )\n \n     def test_date(self):\n         value = date(2015, 11, 23)\ndiff --git a/src/plone/restapi/tests/test_tus.py b/src/plone/restapi/tests/test_tus.py\nindex 2755e44f..c1ae50ad 100644\n--- a/src/plone/restapi/tests/test_tus.py\n+++ b/src/plone/restapi/tests/test_tus.py\n@@ -318,9 +318,11 @@ def test_tus_can_upload_pdf_file(self):\n         with open(pdf_file_path, \'rb\') as pdf_file:\n             response = self.api_session.patch(\n                 location,\n-                headers={\'Content-Type\': \'application/offset+octet-stream\',\n-                        \'Upload-Offset\': \'0\',\n-                        \'Tus-Resumable\': \'1.0.0\'},\n+                headers={\n+                    \'Content-Type\': \'application/offset+octet-stream\',\n+                    \'Upload-Offset\': \'0\',\n+                    \'Tus-Resumable\': \'1.0.0\'\n+                },\n                 data=pdf_file)\n         self.assertEqual(response.status_code, 204)\n \n@@ -377,9 +379,11 @@ def test_tus_can_replace_pdf_file(self):\n         with open(pdf_file_path, \'rb\') as pdf_file:\n             response = self.api_session.patch(\n                 location,\n-                headers={\'Content-Type\': \'application/offset+octet-stream\',\n-                        \'Upload-Offset\': \'0\',\n-                        \'Tus-Resumable\': \'1.0.0\'},\n+                headers={\n+                    \'Content-Type\': \'application/offset+octet-stream\',\n+                    \'Upload-Offset\': \'0\',\n+                    \'Tus-Resumable\': \'1.0.0\'\n+                },\n                 data=pdf_file)\n         self.assertEqual(response.status_code, 204)\n \n@@ -616,9 +620,11 @@ def test_tus_can_upload_pdf_file(self):\n         with open(pdf_file_path, \'rb\') as pdf_file:\n             response = self.api_session.patch(\n                 location,\n-                headers={\'Content-Type\': \'application/offset+octet-stream\',\n-                        \'Upload-Offset\': \'0\',\n-                        \'Tus-Resumable\': \'1.0.0\'},\n+                headers={\n+                    \'Content-Type\': \'application/offset+octet-stream\',\n+                    \'Upload-Offset\': \'0\',\n+                    \'Tus-Resumable\': \'1.0.0\'\n+                },\n                 data=pdf_file)\n         self.assertEqual(response.status_code, 204)\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-10-01T20:01:27+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.restapi/commit/2637e6e79fcebb3da6bcefc221115fa12389ecf0

Merge branch 'master' into python3

Files changed:
M src/plone/restapi/tests/test_search.py

b"diff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex 478215a2..da96552b 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -244,7 +244,7 @@ def test_full_metadata_retrieval(self):\n              u'exclude_from_nav': False,\n              u'expires': u'1999-01-01T00:00:00+00:00',\n              u'getId': u'doc',\n-             u'getObjSize': u'1 KB',\n+             u'getObjSize': u'0 KB',\n              u'getPath': u'/plone/folder/doc',\n              u'getRemoteUrl': None,\n              u'getURL': self.portal_url + u'/folder/doc',\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-10-02T13:54:30+02:00
Author: Timo Stollenwerk (tisto) <stollenwerk@kitconcept.com>
Commit: https://github.com/plone/plone.restapi/commit/d104c332d356c9d7f400857022768667d66491a6

Checkin doc changes that I ran locally on os x.

Files changed:
M src/plone/restapi/tests/http-examples/404_not_found.resp
M src/plone/restapi/tests/http-examples/batching.resp
M src/plone/restapi/tests/http-examples/breadcrumbs.resp
M src/plone/restapi/tests/http-examples/collection.resp
M src/plone/restapi/tests/http-examples/comments_add_root.resp
M src/plone/restapi/tests/http-examples/comments_add_sub.resp
M src/plone/restapi/tests/http-examples/comments_delete.resp
M src/plone/restapi/tests/http-examples/comments_get.resp
M src/plone/restapi/tests/http-examples/comments_update.resp
M src/plone/restapi/tests/http-examples/content_delete.resp
M src/plone/restapi/tests/http-examples/content_get.resp
M src/plone/restapi/tests/http-examples/content_patch.resp
M src/plone/restapi/tests/http-examples/content_patch_representation.resp
M src/plone/restapi/tests/http-examples/content_post.resp
M src/plone/restapi/tests/http-examples/controlpanels_get.resp
M src/plone/restapi/tests/http-examples/controlpanels_get_item.resp
M src/plone/restapi/tests/http-examples/copy.resp
M src/plone/restapi/tests/http-examples/copy_multiple.resp
M src/plone/restapi/tests/http-examples/document.resp
M src/plone/restapi/tests/http-examples/event.resp
M src/plone/restapi/tests/http-examples/expansion.resp
M src/plone/restapi/tests/http-examples/expansion_expanded.resp
M src/plone/restapi/tests/http-examples/expansion_expanded_full.resp
M src/plone/restapi/tests/http-examples/file.resp
M src/plone/restapi/tests/http-examples/folder.resp
M src/plone/restapi/tests/http-examples/groups.resp
M src/plone/restapi/tests/http-examples/groups_created.resp
M src/plone/restapi/tests/http-examples/groups_delete.resp
M src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp
M src/plone/restapi/tests/http-examples/groups_get.resp
M src/plone/restapi/tests/http-examples/groups_update.resp
M src/plone/restapi/tests/http-examples/history_get.resp
M src/plone/restapi/tests/http-examples/image.resp
M src/plone/restapi/tests/http-examples/jwt_logged_in.req
M src/plone/restapi/tests/http-examples/jwt_logged_in.resp
M src/plone/restapi/tests/http-examples/jwt_login.resp
M src/plone/restapi/tests/http-examples/jwt_login_renew.req
M src/plone/restapi/tests/http-examples/jwt_login_renew.resp
M src/plone/restapi/tests/http-examples/jwt_logout.req
M src/plone/restapi/tests/http-examples/link.resp
M src/plone/restapi/tests/http-examples/lock.resp
M src/plone/restapi/tests/http-examples/lock_get.resp
M src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp
M src/plone/restapi/tests/http-examples/lock_update.resp
M src/plone/restapi/tests/http-examples/move.resp
M src/plone/restapi/tests/http-examples/navigation.resp
M src/plone/restapi/tests/http-examples/navigation_tree.resp
M src/plone/restapi/tests/http-examples/newsitem.resp
M src/plone/restapi/tests/http-examples/principals.resp
M src/plone/restapi/tests/http-examples/refresh_lock.resp
M src/plone/restapi/tests/http-examples/registry_get_list.resp
M src/plone/restapi/tests/http-examples/registry_update.resp
M src/plone/restapi/tests/http-examples/roles.resp
M src/plone/restapi/tests/http-examples/search.resp
M src/plone/restapi/tests/http-examples/sharing_folder_get.resp
M src/plone/restapi/tests/http-examples/sharing_folder_post.resp
M src/plone/restapi/tests/http-examples/sharing_search.resp
M src/plone/restapi/tests/http-examples/siteroot.resp
M src/plone/restapi/tests/http-examples/translated_messages_object_history.resp
M src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp
M src/plone/restapi/tests/http-examples/translated_messages_types.resp
M src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp
M src/plone/restapi/tests/http-examples/translations_delete.resp
M src/plone/restapi/tests/http-examples/translations_get.resp
M src/plone/restapi/tests/http-examples/translations_post.resp
M src/plone/restapi/tests/http-examples/tusreplace_patch.req
M src/plone/restapi/tests/http-examples/tusreplace_patch.resp
M src/plone/restapi/tests/http-examples/tusreplace_post.resp
M src/plone/restapi/tests/http-examples/tusupload_head.resp
M src/plone/restapi/tests/http-examples/tusupload_options.resp
M src/plone/restapi/tests/http-examples/tusupload_patch.req
M src/plone/restapi/tests/http-examples/tusupload_patch.resp
M src/plone/restapi/tests/http-examples/tusupload_patch_finalized.req
M src/plone/restapi/tests/http-examples/tusupload_patch_finalized.resp
M src/plone/restapi/tests/http-examples/tusupload_post.resp
M src/plone/restapi/tests/http-examples/types.resp
M src/plone/restapi/tests/http-examples/types_document.resp
M src/plone/restapi/tests/http-examples/unlock.resp
M src/plone/restapi/tests/http-examples/users.resp
M src/plone/restapi/tests/http-examples/users_add.resp
M src/plone/restapi/tests/http-examples/users_authorized_get.resp
M src/plone/restapi/tests/http-examples/users_created.resp
M src/plone/restapi/tests/http-examples/users_delete.resp
M src/plone/restapi/tests/http-examples/users_filtered_by_username.resp
M src/plone/restapi/tests/http-examples/users_get.resp
M src/plone/restapi/tests/http-examples/users_update.resp
M src/plone/restapi/tests/http-examples/vocabularies.resp
M src/plone/restapi/tests/http-examples/vocabularies_get.resp
M src/plone/restapi/tests/http-examples/workflow_get.resp
M src/plone/restapi/tests/http-examples/workflow_post.resp
M src/plone/restapi/tests/http-examples/workflow_post_with_body.resp

b'diff --git a/src/plone/restapi/tests/http-examples/404_not_found.resp b/src/plone/restapi/tests/http-examples/404_not_found.resp\nindex bbf39099..c3113aa8 100644\n--- a/src/plone/restapi/tests/http-examples/404_not_found.resp\n+++ b/src/plone/restapi/tests/http-examples/404_not_found.resp\n@@ -2,6 +2,6 @@ HTTP/1.1 404 Not Found\n Content-Type: application/json\n \n {\n-  "message": "Resource not found: http://localhost:55001/plone/non-existing-resource",\n+  "message": "Resource not found: http://localhost:55001/plone/non-existing-resource", \n   "type": "NotFound"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/batching.resp b/src/plone/restapi/tests/http-examples/batching.resp\nindex 34840d5f..ef2084ec 100644\n--- a/src/plone/restapi/tests/http-examples/batching.resp\n+++ b/src/plone/restapi/tests/http-examples/batching.resp\n@@ -2,49 +2,49 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/folder/@search",\n+  "@id": "http://localhost:55001/plone/folder/@search", \n   "batching": {\n-    "@id": "http://localhost:55001/plone/folder/@search?b_size=5&sort_on=path",\n-    "first": "http://localhost:55001/plone/folder/@search?b_start=0&b_size=5&sort_on=path",\n-    "last": "http://localhost:55001/plone/folder/@search?b_start=5&b_size=5&sort_on=path",\n+    "@id": "http://localhost:55001/plone/folder/@search?b_size=5&sort_on=path", \n+    "first": "http://localhost:55001/plone/folder/@search?b_start=0&b_size=5&sort_on=path", \n+    "last": "http://localhost:55001/plone/folder/@search?b_start=5&b_size=5&sort_on=path", \n     "next": "http://localhost:55001/plone/folder/@search?b_start=5&b_size=5&sort_on=path"\n-  },\n+  }, \n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone/folder",\n-      "@type": "Folder",\n-      "description": "",\n-      "review_state": "private",\n+      "@id": "http://localhost:55001/plone/folder", \n+      "@type": "Folder", \n+      "description": "", \n+      "review_state": "private", \n       "title": "Folder"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/folder/doc-1",\n-      "@type": "Document",\n-      "description": "",\n-      "review_state": "private",\n+      "@id": "http://localhost:55001/plone/folder/doc-1", \n+      "@type": "Document", \n+      "description": "", \n+      "review_state": "private", \n       "title": "Document 1"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/folder/doc-2",\n-      "@type": "Document",\n-      "description": "",\n-      "review_state": "private",\n+      "@id": "http://localhost:55001/plone/folder/doc-2", \n+      "@type": "Document", \n+      "description": "", \n+      "review_state": "private", \n       "title": "Document 2"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/folder/doc-3",\n-      "@type": "Document",\n-      "description": "",\n-      "review_state": "private",\n+      "@id": "http://localhost:55001/plone/folder/doc-3", \n+      "@type": "Document", \n+      "description": "", \n+      "review_state": "private", \n       "title": "Document 3"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/folder/doc-4",\n-      "@type": "Document",\n-      "description": "",\n-      "review_state": "private",\n+      "@id": "http://localhost:55001/plone/folder/doc-4", \n+      "@type": "Document", \n+      "description": "", \n+      "review_state": "private", \n       "title": "Document 4"\n     }\n-  ],\n+  ], \n   "items_total": 8\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/breadcrumbs.resp b/src/plone/restapi/tests/http-examples/breadcrumbs.resp\nindex 0a46996c..78aebf25 100644\n--- a/src/plone/restapi/tests/http-examples/breadcrumbs.resp\n+++ b/src/plone/restapi/tests/http-examples/breadcrumbs.resp\n@@ -2,10 +2,10 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n+  "@id": "http://localhost:55001/plone/front-page/@breadcrumbs", \n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone/front-page",\n+      "@id": "http://localhost:55001/plone/front-page", \n       "title": "Welcome to Plone"\n     }\n   ]\ndiff --git a/src/plone/restapi/tests/http-examples/collection.resp b/src/plone/restapi/tests/http-examples/collection.resp\nindex 6b187d72..86c6c4ce 100644\n--- a/src/plone/restapi/tests/http-examples/collection.resp\n+++ b/src/plone/restapi/tests/http-examples/collection.resp\n@@ -5,87 +5,87 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/collection/@actions"\n-    },\n+    }, \n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/collection/@breadcrumbs"\n-    },\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/collection/@navigation"\n-    },\n+    }, \n     "workflow": {\n       "@id": "http://localhost:55001/plone/collection/@workflow"\n     }\n-  },\n-  "@id": "http://localhost:55001/plone/collection",\n-  "@type": "Collection",\n-  "UID": "SomeUUID000000000000000000000002",\n-  "allow_discussion": false,\n-  "contributors": [],\n-  "created": "2016-01-21T08:14:48+00:00",\n+  }, \n+  "@id": "http://localhost:55001/plone/collection", \n+  "@type": "Collection", \n+  "UID": "SomeUUID000000000000000000000002", \n+  "allow_discussion": false, \n+  "contributors": [], \n+  "created": "2016-01-21T08:14:48+00:00", \n   "creators": [\n     "test_user_1_"\n-  ],\n+  ], \n   "customViewFields": [\n-    "Title",\n-    "Creator",\n-    "Type",\n+    "Title", \n+    "Creator", \n+    "Type", \n     "ModificationDate"\n-  ],\n-  "description": "This is a collection with two documents",\n-  "effective": null,\n-  "exclude_from_nav": false,\n-  "expires": null,\n-  "id": "collection",\n-  "is_folderish": false,\n-  "item_count": 30,\n+  ], \n+  "description": "This is a collection with two documents", \n+  "effective": null, \n+  "exclude_from_nav": false, \n+  "expires": null, \n+  "id": "collection", \n+  "is_folderish": false, \n+  "item_count": 30, \n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone/front-page",\n-      "@type": "Document",\n-      "description": "Congratulations! You have successfully installed Plone.",\n-      "review_state": "private",\n+      "@id": "http://localhost:55001/plone/front-page", \n+      "@type": "Document", \n+      "description": "Congratulations! You have successfully installed Plone.", \n+      "review_state": "private", \n       "title": "Welcome to Plone"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/doc1",\n-      "@type": "Document",\n-      "description": "",\n-      "review_state": "private",\n+      "@id": "http://localhost:55001/plone/doc1", \n+      "@type": "Document", \n+      "description": "", \n+      "review_state": "private", \n       "title": "Document 1"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/doc2",\n-      "@type": "Document",\n-      "description": "",\n-      "review_state": "private",\n+      "@id": "http://localhost:55001/plone/doc2", \n+      "@type": "Document", \n+      "description": "", \n+      "review_state": "private", \n       "title": "Document 2"\n     }\n-  ],\n-  "items_total": 3,\n-  "language": "",\n-  "layout": "listing_view",\n-  "limit": 1000,\n-  "modified": "2016-01-21T08:24:11+00:00",\n+  ], \n+  "items_total": 3, \n+  "language": "", \n+  "layout": "listing_view", \n+  "limit": 1000, \n+  "modified": "2016-01-21T08:24:11+00:00", \n   "parent": {\n-    "@id": "http://localhost:55001/plone",\n-    "@type": "Plone Site",\n-    "description": "",\n+    "@id": "http://localhost:55001/plone", \n+    "@type": "Plone Site", \n+    "description": "", \n     "title": "Plone site"\n-  },\n+  }, \n   "query": [\n     {\n-      "i": "portal_type",\n-      "o": "plone.app.querystring.operation.string.is",\n+      "i": "portal_type", \n+      "o": "plone.app.querystring.operation.string.is", \n       "v": "Document"\n     }\n-  ],\n-  "relatedItems": [],\n-  "review_state": "private",\n-  "rights": "",\n-  "sort_on": null,\n-  "sort_reversed": null,\n-  "subjects": [],\n-  "text": null,\n-  "title": "My Collection",\n+  ], \n+  "relatedItems": [], \n+  "review_state": "private", \n+  "rights": "", \n+  "sort_on": null, \n+  "sort_reversed": null, \n+  "subjects": [], \n+  "text": null, \n+  "title": "My Collection", \n   "version": "current"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/comments_add_root.resp b/src/plone/restapi/tests/http-examples/comments_add_root.resp\nindex e0cf0dc3..80279137 100644\n--- a/src/plone/restapi/tests/http-examples/comments_add_root.resp\n+++ b/src/plone/restapi/tests/http-examples/comments_add_root.resp\n@@ -1,4 +1,3 @@\n HTTP/1.1 204 No Content\n Location: http://localhost:55001/plone/front-page/@comments/123456\n-Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/comments_add_sub.resp b/src/plone/restapi/tests/http-examples/comments_add_sub.resp\nindex e0cf0dc3..80279137 100644\n--- a/src/plone/restapi/tests/http-examples/comments_add_sub.resp\n+++ b/src/plone/restapi/tests/http-examples/comments_add_sub.resp\n@@ -1,4 +1,3 @@\n HTTP/1.1 204 No Content\n Location: http://localhost:55001/plone/front-page/@comments/123456\n-Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/comments_delete.resp b/src/plone/restapi/tests/http-examples/comments_delete.resp\nindex 460c2259..0074ded3 100644\n--- a/src/plone/restapi/tests/http-examples/comments_delete.resp\n+++ b/src/plone/restapi/tests/http-examples/comments_delete.resp\n@@ -1,3 +1,2 @@\n HTTP/1.1 204 No Content\n-Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/comments_get.resp b/src/plone/restapi/tests/http-examples/comments_get.resp\nindex 04d5676c..5f4813b0 100644\n--- a/src/plone/restapi/tests/http-examples/comments_get.resp\n+++ b/src/plone/restapi/tests/http-examples/comments_get.resp\n@@ -2,44 +2,44 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/front-page/@comments",\n+  "@id": "http://localhost:55001/plone/front-page/@comments", \n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone/front-page/@comments/1477076400000000",\n-      "@parent": null,\n-      "@type": "Discussion Item",\n-      "author_name": null,\n-      "author_username": null,\n-      "comment_id": "1477076400000000",\n-      "creation_date": "2016-10-21T19:00:00",\n-      "in_reply_to": null,\n-      "is_deletable": true,\n-      "is_editable": true,\n-      "modification_date": "2016-10-21T19:00:00",\n+      "@id": "http://localhost:55001/plone/front-page/@comments/1477076400000000", \n+      "@parent": null, \n+      "@type": "Discussion Item", \n+      "author_name": null, \n+      "author_username": null, \n+      "comment_id": "1477076400000000", \n+      "creation_date": "2016-10-21T19:00:00", \n+      "in_reply_to": null, \n+      "is_deletable": true, \n+      "is_editable": true, \n+      "modification_date": "2016-10-21T19:00:00", \n       "text": {\n-        "data": "Comment 1",\n+        "data": "Comment 1", \n         "mime-type": "text/plain"\n-      },\n+      }, \n       "user_notification": null\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/front-page/@comments/1477076400000001",\n-      "@parent": "http://localhost:55001/plone/front-page/@comments/1477076400000000",\n-      "@type": "Discussion Item",\n-      "author_name": null,\n-      "author_username": null,\n-      "comment_id": "1477076400000001",\n-      "creation_date": "2016-10-21T19:00:00",\n-      "in_reply_to": "1477076400000000",\n-      "is_deletable": true,\n-      "is_editable": true,\n-      "modification_date": "2016-10-21T19:00:00",\n+      "@id": "http://localhost:55001/plone/front-page/@comments/1477076400000001", \n+      "@parent": "http://localhost:55001/plone/front-page/@comments/1477076400000000", \n+      "@type": "Discussion Item", \n+      "author_name": null, \n+      "author_username": null, \n+      "comment_id": "1477076400000001", \n+      "creation_date": "2016-10-21T19:00:00", \n+      "in_reply_to": "1477076400000000", \n+      "is_deletable": true, \n+      "is_editable": true, \n+      "modification_date": "2016-10-21T19:00:00", \n       "text": {\n-        "data": "Comment 1.1",\n+        "data": "Comment 1.1", \n         "mime-type": "text/plain"\n-      },\n+      }, \n       "user_notification": null\n     }\n-  ],\n+  ], \n   "items_total": 2\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/comments_update.resp b/src/plone/restapi/tests/http-examples/comments_update.resp\nindex e0cf0dc3..80279137 100644\n--- a/src/plone/restapi/tests/http-examples/comments_update.resp\n+++ b/src/plone/restapi/tests/http-examples/comments_update.resp\n@@ -1,4 +1,3 @@\n HTTP/1.1 204 No Content\n Location: http://localhost:55001/plone/front-page/@comments/123456\n-Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/content_delete.resp b/src/plone/restapi/tests/http-examples/content_delete.resp\nindex 460c2259..0074ded3 100644\n--- a/src/plone/restapi/tests/http-examples/content_delete.resp\n+++ b/src/plone/restapi/tests/http-examples/content_delete.resp\n@@ -1,3 +1,2 @@\n HTTP/1.1 204 No Content\n-Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/content_get.resp b/src/plone/restapi/tests/http-examples/content_get.resp\nindex a922f27a..3cee3662 100644\n--- a/src/plone/restapi/tests/http-examples/content_get.resp\n+++ b/src/plone/restapi/tests/http-examples/content_get.resp\n@@ -5,50 +5,50 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@actions"\n-    },\n+    }, \n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@breadcrumbs"\n-    },\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@navigation"\n-    },\n+    }, \n     "workflow": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@workflow"\n     }\n-  },\n-  "@id": "http://localhost:55001/plone/folder/my-document",\n-  "@type": "Document",\n-  "UID": "SomeUUID000000000000000000000005",\n-  "allow_discussion": false,\n-  "changeNote": "",\n-  "contributors": [],\n-  "created": "2016-10-21T15:00:00+00:00",\n+  }, \n+  "@id": "http://localhost:55001/plone/folder/my-document", \n+  "@type": "Document", \n+  "UID": "SomeUUID000000000000000000000005", \n+  "allow_discussion": false, \n+  "changeNote": "", \n+  "contributors": [], \n+  "created": "2016-10-21T19:00:00+00:00", \n   "creators": [\n     "admin"\n-  ],\n-  "description": "",\n-  "effective": null,\n-  "exclude_from_nav": false,\n-  "expires": null,\n-  "id": "my-document",\n-  "is_folderish": false,\n-  "language": "",\n-  "layout": "document_view",\n-  "modified": "2016-10-21T15:00:00+00:00",\n+  ], \n+  "description": "", \n+  "effective": null, \n+  "exclude_from_nav": false, \n+  "expires": null, \n+  "id": "my-document", \n+  "is_folderish": false, \n+  "language": "", \n+  "layout": "document_view", \n+  "modified": "2016-10-21T19:00:00+00:00", \n   "parent": {\n-    "@id": "http://localhost:55001/plone/folder",\n-    "@type": "Folder",\n-    "description": "This is a folder with two documents",\n-    "review_state": "private",\n+    "@id": "http://localhost:55001/plone/folder", \n+    "@type": "Folder", \n+    "description": "This is a folder with two documents", \n+    "review_state": "private", \n     "title": "My Folder"\n-  },\n-  "relatedItems": [],\n-  "review_state": "private",\n-  "rights": "",\n-  "subjects": [],\n-  "table_of_contents": null,\n-  "text": null,\n-  "title": "My Document",\n-  "version": "current",\n+  }, \n+  "relatedItems": [], \n+  "review_state": "private", \n+  "rights": "", \n+  "subjects": [], \n+  "table_of_contents": null, \n+  "text": null, \n+  "title": "My Document", \n+  "version": "current", \n   "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/content_patch.resp b/src/plone/restapi/tests/http-examples/content_patch.resp\nindex 460c2259..0074ded3 100644\n--- a/src/plone/restapi/tests/http-examples/content_patch.resp\n+++ b/src/plone/restapi/tests/http-examples/content_patch.resp\n@@ -1,3 +1,2 @@\n HTTP/1.1 204 No Content\n-Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/content_patch_representation.resp b/src/plone/restapi/tests/http-examples/content_patch_representation.resp\nindex 85cec5bb..7596044f 100644\n--- a/src/plone/restapi/tests/http-examples/content_patch_representation.resp\n+++ b/src/plone/restapi/tests/http-examples/content_patch_representation.resp\n@@ -5,50 +5,50 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@actions"\n-    },\n+    }, \n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@breadcrumbs"\n-    },\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@navigation"\n-    },\n+    }, \n     "workflow": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@workflow"\n     }\n-  },\n-  "@id": "http://localhost:55001/plone/folder/my-document",\n-  "@type": "Document",\n-  "UID": "SomeUUID000000000000000000000005",\n-  "allow_discussion": false,\n-  "changeNote": "",\n-  "contributors": [],\n-  "created": "2016-10-21T15:00:00+00:00",\n+  }, \n+  "@id": "http://localhost:55001/plone/folder/my-document", \n+  "@type": "Document", \n+  "UID": "SomeUUID000000000000000000000005", \n+  "allow_discussion": false, \n+  "changeNote": "", \n+  "contributors": [], \n+  "created": "2016-10-21T19:00:00+00:00", \n   "creators": [\n     "admin"\n-  ],\n-  "description": "",\n-  "effective": null,\n-  "exclude_from_nav": false,\n-  "expires": null,\n-  "id": "my-document",\n-  "is_folderish": false,\n-  "language": "",\n-  "layout": "document_view",\n-  "modified": "2016-10-21T15:00:00+00:00",\n+  ], \n+  "description": "", \n+  "effective": null, \n+  "exclude_from_nav": false, \n+  "expires": null, \n+  "id": "my-document", \n+  "is_folderish": false, \n+  "language": "", \n+  "layout": "document_view", \n+  "modified": "2016-10-21T19:00:00+00:00", \n   "parent": {\n-    "@id": "http://localhost:55001/plone/folder",\n-    "@type": "Folder",\n-    "description": "This is a folder with two documents",\n-    "review_state": "private",\n+    "@id": "http://localhost:55001/plone/folder", \n+    "@type": "Folder", \n+    "description": "This is a folder with two documents", \n+    "review_state": "private", \n     "title": "My Folder"\n-  },\n-  "relatedItems": [],\n-  "review_state": "private",\n-  "rights": "",\n-  "subjects": [],\n-  "table_of_contents": null,\n-  "text": null,\n-  "title": "My New Document Title",\n-  "version": "current",\n+  }, \n+  "relatedItems": [], \n+  "review_state": "private", \n+  "rights": "", \n+  "subjects": [], \n+  "table_of_contents": null, \n+  "text": null, \n+  "title": "My New Document Title", \n+  "version": "current", \n   "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/content_post.resp b/src/plone/restapi/tests/http-examples/content_post.resp\nindex a7f4f6d0..63b4140c 100644\n--- a/src/plone/restapi/tests/http-examples/content_post.resp\n+++ b/src/plone/restapi/tests/http-examples/content_post.resp\n@@ -1,55 +1,55 @@\n HTTP/1.1 201 Created\n-Location: http://localhost:55001/plone/folder/my-document\n Content-Type: application/json\n+Location: http://localhost:55001/plone/folder/my-document\n \n {\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@actions"\n-    },\n+    }, \n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@breadcrumbs"\n-    },\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@navigation"\n-    },\n+    }, \n     "workflow": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@workflow"\n     }\n-  },\n-  "@id": "http://localhost:55001/plone/folder/my-document",\n-  "@type": "Document",\n-  "UID": "SomeUUID000000000000000000000005",\n-  "allow_discussion": false,\n-  "changeNote": "",\n-  "contributors": [],\n-  "created": "2016-10-21T15:00:00+00:00",\n+  }, \n+  "@id": "http://localhost:55001/plone/folder/my-document", \n+  "@type": "Document", \n+  "UID": "SomeUUID000000000000000000000005", \n+  "allow_discussion": false, \n+  "changeNote": "", \n+  "contributors": [], \n+  "created": "2016-10-21T19:00:00+00:00", \n   "creators": [\n     "admin"\n-  ],\n-  "description": "",\n-  "effective": null,\n-  "exclude_from_nav": false,\n-  "expires": null,\n-  "id": "my-document",\n-  "is_folderish": false,\n-  "language": "",\n-  "layout": "document_view",\n-  "modified": "2016-10-21T15:00:00+00:00",\n+  ], \n+  "description": "", \n+  "effective": null, \n+  "exclude_from_nav": false, \n+  "expires": null, \n+  "id": "my-document", \n+  "is_folderish": false, \n+  "language": "", \n+  "layout": "document_view", \n+  "modified": "2016-10-21T19:00:00+00:00", \n   "parent": {\n-    "@id": "http://localhost:55001/plone/folder",\n-    "@type": "Folder",\n-    "description": "This is a folder with two documents",\n-    "review_state": "private",\n+    "@id": "http://localhost:55001/plone/folder", \n+    "@type": "Folder", \n+    "description": "This is a folder with two documents", \n+    "review_state": "private", \n     "title": "My Folder"\n-  },\n-  "relatedItems": [],\n-  "review_state": "private",\n-  "rights": "",\n-  "subjects": [],\n-  "table_of_contents": null,\n-  "text": null,\n-  "title": "My Document",\n-  "version": "current",\n+  }, \n+  "relatedItems": [], \n+  "review_state": "private", \n+  "rights": "", \n+  "subjects": [], \n+  "table_of_contents": null, \n+  "text": null, \n+  "title": "My Document", \n+  "version": "current", \n   "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get.resp b/src/plone/restapi/tests/http-examples/controlpanels_get.resp\nindex 6633091f..038b2cdc 100644\n--- a/src/plone/restapi/tests/http-examples/controlpanels_get.resp\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get.resp\n@@ -3,58 +3,58 @@ Content-Type: application/json\n \n [\n   {\n-    "@id": "http://localhost:55001/plone/@controlpanels/date-and-time",\n-    "group": "General",\n+    "@id": "http://localhost:55001/plone/@controlpanels/date-and-time", \n+    "group": "General", \n     "title": "Date and Time"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@controlpanels/language",\n-    "group": "General",\n+    "@id": "http://localhost:55001/plone/@controlpanels/language", \n+    "group": "General", \n     "title": "Language"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@controlpanels/mail",\n-    "group": "General",\n+    "@id": "http://localhost:55001/plone/@controlpanels/mail", \n+    "group": "General", \n     "title": "Mail"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@controlpanels/navigation",\n-    "group": "General",\n+    "@id": "http://localhost:55001/plone/@controlpanels/navigation", \n+    "group": "General", \n     "title": "Navigation"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@controlpanels/site",\n-    "group": "General",\n+    "@id": "http://localhost:55001/plone/@controlpanels/site", \n+    "group": "General", \n     "title": "Site"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@controlpanels/search",\n-    "group": "General",\n+    "@id": "http://localhost:55001/plone/@controlpanels/search", \n+    "group": "General", \n     "title": "Search"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@controlpanels/socialmedia",\n-    "group": "General",\n+    "@id": "http://localhost:55001/plone/@controlpanels/socialmedia", \n+    "group": "General", \n     "title": "Social Media"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@controlpanels/editing",\n-    "group": "Content",\n+    "@id": "http://localhost:55001/plone/@controlpanels/editing", \n+    "group": "Content", \n     "title": "Editing"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@controlpanels/imaging",\n-    "group": "Content",\n+    "@id": "http://localhost:55001/plone/@controlpanels/imaging", \n+    "group": "Content", \n     "title": "Image Handling"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@controlpanels/markup",\n-    "group": "Content",\n+    "@id": "http://localhost:55001/plone/@controlpanels/markup", \n+    "group": "Content", \n     "title": "Markup"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@controlpanels/security",\n-    "group": "Security",\n+    "@id": "http://localhost:55001/plone/@controlpanels/security", \n+    "group": "Security", \n     "title": "Security"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\nindex e7cc3363..47ca1799 100644\n--- a/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n@@ -2,105 +2,105 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/@controlpanels/editing",\n+  "@id": "http://localhost:55001/plone/@controlpanels/editing", \n   "data": {\n     "available_editors": [\n-      "TinyMCE",\n+      "TinyMCE", \n       "None"\n-    ],\n-    "default_editor": "TinyMCE",\n-    "enable_link_integrity_checks": true,\n-    "ext_editor": false,\n-    "lock_on_ttw_edit": true,\n+    ], \n+    "default_editor": "TinyMCE", \n+    "enable_link_integrity_checks": true, \n+    "ext_editor": false, \n+    "lock_on_ttw_edit": true, \n     "subjects_of_navigation_root": false\n-  },\n-  "group": "Content",\n+  }, \n+  "group": "Content", \n   "schema": {\n     "fieldsets": [\n       {\n         "fields": [\n-          "available_editors",\n-          "default_editor",\n-          "ext_editor",\n-          "enable_link_integrity_checks",\n-          "lock_on_ttw_edit",\n+          "available_editors", \n+          "default_editor", \n+          "ext_editor", \n+          "enable_link_integrity_checks", \n+          "lock_on_ttw_edit", \n           "subjects_of_navigation_root"\n-        ],\n-        "id": "default",\n+        ], \n+        "id": "default", \n         "title": "Default"\n       }\n-    ],\n+    ], \n     "properties": {\n       "available_editors": {\n-        "additionalItems": true,\n+        "additionalItems": true, \n         "default": [\n-          "TinyMCE",\n+          "TinyMCE", \n           "None"\n-        ],\n-        "description": "Available editors in the portal.",\n+        ], \n+        "description": "Available editors in the portal.", \n         "items": {\n-          "description": "",\n-          "title": "",\n+          "description": "", \n+          "title": "", \n           "type": "string"\n-        },\n-        "title": "Available editors",\n-        "type": "array",\n+        }, \n+        "title": "Available editors", \n+        "type": "array", \n         "uniqueItems": false\n-      },\n+      }, \n       "default_editor": {\n         "choices": [\n           [\n-            "TinyMCE",\n+            "TinyMCE", \n             "TinyMCE"\n-          ],\n+          ], \n           [\n-            "None",\n+            "None", \n             "None"\n           ]\n-        ],\n-        "default": "TinyMCE",\n-        "description": "Select the default wysiwyg editor. Users will be able to choose their own or select to use the site default.",\n+        ], \n+        "default": "TinyMCE", \n+        "description": "Select the default wysiwyg editor. Users will be able to choose their own or select to use the site default.", \n         "enum": [\n-          "TinyMCE",\n+          "TinyMCE", \n           "None"\n-        ],\n+        ], \n         "enumNames": [\n-          "TinyMCE",\n+          "TinyMCE", \n           "None"\n-        ],\n-        "title": "Default editor",\n+        ], \n+        "title": "Default editor", \n         "type": "string"\n-      },\n+      }, \n       "enable_link_integrity_checks": {\n-        "default": true,\n-        "description": "Determines if the users should get warnings when they delete or move content that is linked from inside the site.",\n-        "title": "Enable link integrity checks",\n+        "default": true, \n+        "description": "Determines if the users should get warnings when they delete or move content that is linked from inside the site.", \n+        "title": "Enable link integrity checks", \n         "type": "boolean"\n-      },\n+      }, \n       "ext_editor": {\n-        "default": false,\n-        "description": "Determines if the external editor feature is enabled. This feature requires a special client-side application installed. The users also have to enable this in their preferences.",\n-        "title": "Enable External Editor feature",\n+        "default": false, \n+        "description": "Determines if the external editor feature is enabled. This feature requires a special client-side application installed. The users also have to enable this in their preferences.", \n+        "title": "Enable External Editor feature", \n         "type": "boolean"\n-      },\n+      }, \n       "lock_on_ttw_edit": {\n-        "default": true,\n-        "description": "Disabling locking here will only affect users editing content through the Plone web UI.  Content edited via WebDAV clients will still be subject to locking.",\n-        "title": "Enable locking for through-the-web edits",\n+        "default": true, \n+        "description": "Disabling locking here will only affect users editing content through the Plone web UI.  Content edited via WebDAV clients will still be subject to locking.", \n+        "title": "Enable locking for through-the-web edits", \n         "type": "boolean"\n-      },\n+      }, \n       "subjects_of_navigation_root": {\n-        "default": false,\n-        "description": "Limit tags aka keywords vocabulary used for Tags field and in searches to the terms used inside the subtree of the current navigation root. This can be used together with Plone\'s multilingual extension plone.app.multilingual to only offer keywords of the current selected language. Other addons may utilize this feature for its specific purposes.",\n-        "title": "Limit tags/keywords to the current navigation root",\n+        "default": false, \n+        "description": "Limit tags aka keywords vocabulary used for Tags field and in searches to the terms used inside the subtree of the current navigation root. This can be used together with Plone\'s multilingual extension plone.app.multilingual to only offer keywords of the current selected language. Other addons may utilize this feature for its specific purposes.", \n+        "title": "Limit tags/keywords to the current navigation root", \n         "type": "boolean"\n       }\n-    },\n+    }, \n     "required": [\n-      "available_editors",\n+      "available_editors", \n       "default_editor"\n-    ],\n+    ], \n     "type": "object"\n-  },\n+  }, \n   "title": "Editing"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/copy.resp b/src/plone/restapi/tests/http-examples/copy.resp\nindex 01d8f2a7..389bbbd3 100644\n--- a/src/plone/restapi/tests/http-examples/copy.resp\n+++ b/src/plone/restapi/tests/http-examples/copy.resp\n@@ -3,7 +3,7 @@ Content-Type: application/json\n \n [\n   {\n-    "source": "http://localhost:55001/plone/front-page",\n+    "source": "http://localhost:55001/plone/front-page", \n     "target": "http://localhost:55001/plone/copy_of_front-page"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/copy_multiple.resp b/src/plone/restapi/tests/http-examples/copy_multiple.resp\nindex e8d63733..2fdbfef1 100644\n--- a/src/plone/restapi/tests/http-examples/copy_multiple.resp\n+++ b/src/plone/restapi/tests/http-examples/copy_multiple.resp\n@@ -3,11 +3,11 @@ Content-Type: application/json\n \n [\n   {\n-    "source": "http://localhost:55001/plone/front-page",\n+    "source": "http://localhost:55001/plone/front-page", \n     "target": "http://localhost:55001/plone/copy_of_front-page"\n-  },\n+  }, \n   {\n-    "source": "http://localhost:55001/plone/newsitem",\n+    "source": "http://localhost:55001/plone/newsitem", \n     "target": "http://localhost:55001/plone/copy_of_newsitem"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/document.resp b/src/plone/restapi/tests/http-examples/document.resp\nindex 49216f71..14009c36 100644\n--- a/src/plone/restapi/tests/http-examples/document.resp\n+++ b/src/plone/restapi/tests/http-examples/document.resp\n@@ -5,53 +5,53 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/front-page/@actions"\n-    },\n+    }, \n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/front-page/@breadcrumbs"\n-    },\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/front-page/@navigation"\n-    },\n+    }, \n     "workflow": {\n       "@id": "http://localhost:55001/plone/front-page/@workflow"\n     }\n-  },\n-  "@id": "http://localhost:55001/plone/front-page",\n-  "@type": "Document",\n-  "UID": "SomeUUID000000000000000000000001",\n-  "allow_discussion": false,\n-  "changeNote": "",\n-  "contributors": [],\n-  "created": "2016-01-21T01:14:48+00:00",\n+  }, \n+  "@id": "http://localhost:55001/plone/front-page", \n+  "@type": "Document", \n+  "UID": "SomeUUID000000000000000000000001", \n+  "allow_discussion": false, \n+  "changeNote": "", \n+  "contributors": [], \n+  "created": "2016-01-21T01:14:48+00:00", \n   "creators": [\n     "test_user_1_"\n-  ],\n-  "description": "Congratulations! You have successfully installed Plone.",\n-  "effective": null,\n-  "exclude_from_nav": false,\n-  "expires": null,\n-  "id": "front-page",\n-  "is_folderish": false,\n-  "language": "",\n-  "layout": "document_view",\n-  "modified": "2016-01-21T01:24:11+00:00",\n+  ], \n+  "description": "Congratulations! You have successfully installed Plone.", \n+  "effective": null, \n+  "exclude_from_nav": false, \n+  "expires": null, \n+  "id": "front-page", \n+  "is_folderish": false, \n+  "language": "", \n+  "layout": "document_view", \n+  "modified": "2016-01-21T01:24:11+00:00", \n   "parent": {\n-    "@id": "http://localhost:55001/plone",\n-    "@type": "Plone Site",\n-    "description": "",\n+    "@id": "http://localhost:55001/plone", \n+    "@type": "Plone Site", \n+    "description": "", \n     "title": "Plone site"\n-  },\n-  "relatedItems": [],\n-  "review_state": "private",\n-  "rights": "",\n-  "subjects": [],\n-  "table_of_contents": null,\n+  }, \n+  "relatedItems": [], \n+  "review_state": "private", \n+  "rights": "", \n+  "subjects": [], \n+  "table_of_contents": null, \n   "text": {\n-    "content-type": "text/plain",\n-    "data": "<p>If you&#x27;re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone mailing lists about this.</p>",\n+    "content-type": "text/plain", \n+    "data": "<p>If you\'re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone mailing lists about this.</p>", \n     "encoding": "utf-8"\n-  },\n-  "title": "Welcome to Plone",\n-  "version": "current",\n+  }, \n+  "title": "Welcome to Plone", \n+  "version": "current", \n   "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/event.resp b/src/plone/restapi/tests/http-examples/event.resp\nindex b38a41b9..759a3259 100644\n--- a/src/plone/restapi/tests/http-examples/event.resp\n+++ b/src/plone/restapi/tests/http-examples/event.resp\n@@ -5,60 +5,60 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/event/@actions"\n-    },\n+    }, \n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/event/@breadcrumbs"\n-    },\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/event/@navigation"\n-    },\n+    }, \n     "workflow": {\n       "@id": "http://localhost:55001/plone/event/@workflow"\n     }\n-  },\n-  "@id": "http://localhost:55001/plone/event",\n-  "@type": "Event",\n-  "UID": "SomeUUID000000000000000000000002",\n-  "allow_discussion": false,\n-  "attendees": [],\n-  "changeNote": "",\n-  "contact_email": null,\n-  "contact_name": null,\n-  "contact_phone": null,\n-  "contributors": [],\n-  "created": "2016-01-21T03:14:48+00:00",\n+  }, \n+  "@id": "http://localhost:55001/plone/event", \n+  "@type": "Event", \n+  "UID": "SomeUUID000000000000000000000002", \n+  "allow_discussion": false, \n+  "attendees": [], \n+  "changeNote": "", \n+  "contact_email": null, \n+  "contact_name": null, \n+  "contact_phone": null, \n+  "contributors": [], \n+  "created": "2016-01-21T03:14:48+00:00", \n   "creators": [\n     "test_user_1_"\n-  ],\n-  "description": "This is an event",\n-  "effective": null,\n-  "end": "2013-01-01T12:00:00",\n-  "event_url": null,\n-  "exclude_from_nav": false,\n-  "expires": null,\n-  "id": "event",\n-  "is_folderish": false,\n-  "language": "",\n-  "layout": "event_view",\n-  "location": null,\n-  "modified": "2016-01-21T03:24:11+00:00",\n-  "open_end": false,\n+  ], \n+  "description": "This is an event", \n+  "effective": null, \n+  "end": "2013-01-01T12:00:00", \n+  "event_url": null, \n+  "exclude_from_nav": false, \n+  "expires": null, \n+  "id": "event", \n+  "is_folderish": false, \n+  "language": "", \n+  "layout": "event_view", \n+  "location": null, \n+  "modified": "2016-01-21T03:24:11+00:00", \n+  "open_end": false, \n   "parent": {\n-    "@id": "http://localhost:55001/plone",\n-    "@type": "Plone Site",\n-    "description": "",\n+    "@id": "http://localhost:55001/plone", \n+    "@type": "Plone Site", \n+    "description": "", \n     "title": "Plone site"\n-  },\n-  "recurrence": null,\n-  "relatedItems": [],\n-  "review_state": "private",\n-  "rights": "",\n-  "start": "2013-01-01T10:00:00",\n-  "subjects": [],\n-  "sync_uid": null,\n-  "text": null,\n-  "title": "Event",\n-  "version": "current",\n-  "versioning_enabled": true,\n+  }, \n+  "recurrence": null, \n+  "relatedItems": [], \n+  "review_state": "private", \n+  "rights": "", \n+  "start": "2013-01-01T10:00:00", \n+  "subjects": [], \n+  "sync_uid": null, \n+  "text": null, \n+  "title": "Event", \n+  "version": "current", \n+  "versioning_enabled": true, \n   "whole_day": false\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/expansion.resp b/src/plone/restapi/tests/http-examples/expansion.resp\nindex 49216f71..14009c36 100644\n--- a/src/plone/restapi/tests/http-examples/expansion.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion.resp\n@@ -5,53 +5,53 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/front-page/@actions"\n-    },\n+    }, \n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/front-page/@breadcrumbs"\n-    },\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/front-page/@navigation"\n-    },\n+    }, \n     "workflow": {\n       "@id": "http://localhost:55001/plone/front-page/@workflow"\n     }\n-  },\n-  "@id": "http://localhost:55001/plone/front-page",\n-  "@type": "Document",\n-  "UID": "SomeUUID000000000000000000000001",\n-  "allow_discussion": false,\n-  "changeNote": "",\n-  "contributors": [],\n-  "created": "2016-01-21T01:14:48+00:00",\n+  }, \n+  "@id": "http://localhost:55001/plone/front-page", \n+  "@type": "Document", \n+  "UID": "SomeUUID000000000000000000000001", \n+  "allow_discussion": false, \n+  "changeNote": "", \n+  "contributors": [], \n+  "created": "2016-01-21T01:14:48+00:00", \n   "creators": [\n     "test_user_1_"\n-  ],\n-  "description": "Congratulations! You have successfully installed Plone.",\n-  "effective": null,\n-  "exclude_from_nav": false,\n-  "expires": null,\n-  "id": "front-page",\n-  "is_folderish": false,\n-  "language": "",\n-  "layout": "document_view",\n-  "modified": "2016-01-21T01:24:11+00:00",\n+  ], \n+  "description": "Congratulations! You have successfully installed Plone.", \n+  "effective": null, \n+  "exclude_from_nav": false, \n+  "expires": null, \n+  "id": "front-page", \n+  "is_folderish": false, \n+  "language": "", \n+  "layout": "document_view", \n+  "modified": "2016-01-21T01:24:11+00:00", \n   "parent": {\n-    "@id": "http://localhost:55001/plone",\n-    "@type": "Plone Site",\n-    "description": "",\n+    "@id": "http://localhost:55001/plone", \n+    "@type": "Plone Site", \n+    "description": "", \n     "title": "Plone site"\n-  },\n-  "relatedItems": [],\n-  "review_state": "private",\n-  "rights": "",\n-  "subjects": [],\n-  "table_of_contents": null,\n+  }, \n+  "relatedItems": [], \n+  "review_state": "private", \n+  "rights": "", \n+  "subjects": [], \n+  "table_of_contents": null, \n   "text": {\n-    "content-type": "text/plain",\n-    "data": "<p>If you&#x27;re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone mailing lists about this.</p>",\n+    "content-type": "text/plain", \n+    "data": "<p>If you\'re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone mailing lists about this.</p>", \n     "encoding": "utf-8"\n-  },\n-  "title": "Welcome to Plone",\n-  "version": "current",\n+  }, \n+  "title": "Welcome to Plone", \n+  "version": "current", \n   "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/expansion_expanded.resp b/src/plone/restapi/tests/http-examples/expansion_expanded.resp\nindex ecb9e8b9..2881430a 100644\n--- a/src/plone/restapi/tests/http-examples/expansion_expanded.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion_expanded.resp\n@@ -5,59 +5,59 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/front-page/@actions"\n-    },\n+    }, \n     "breadcrumbs": {\n-      "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n+      "@id": "http://localhost:55001/plone/front-page/@breadcrumbs", \n       "items": [\n         {\n-          "@id": "http://localhost:55001/plone/front-page",\n+          "@id": "http://localhost:55001/plone/front-page", \n           "title": "Welcome to Plone"\n         }\n       ]\n-    },\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/front-page/@navigation"\n-    },\n+    }, \n     "workflow": {\n       "@id": "http://localhost:55001/plone/front-page/@workflow"\n     }\n-  },\n-  "@id": "http://localhost:55001/plone/front-page",\n-  "@type": "Document",\n-  "UID": "SomeUUID000000000000000000000001",\n-  "allow_discussion": false,\n-  "changeNote": "",\n-  "contributors": [],\n-  "created": "2016-01-21T01:14:48+00:00",\n+  }, \n+  "@id": "http://localhost:55001/plone/front-page", \n+  "@type": "Document", \n+  "UID": "SomeUUID000000000000000000000001", \n+  "allow_discussion": false, \n+  "changeNote": "", \n+  "contributors": [], \n+  "created": "2016-01-21T01:14:48+00:00", \n   "creators": [\n     "test_user_1_"\n-  ],\n-  "description": "Congratulations! You have successfully installed Plone.",\n-  "effective": null,\n-  "exclude_from_nav": false,\n-  "expires": null,\n-  "id": "front-page",\n-  "is_folderish": false,\n-  "language": "",\n-  "layout": "document_view",\n-  "modified": "2016-01-21T01:24:11+00:00",\n+  ], \n+  "description": "Congratulations! You have successfully installed Plone.", \n+  "effective": null, \n+  "exclude_from_nav": false, \n+  "expires": null, \n+  "id": "front-page", \n+  "is_folderish": false, \n+  "language": "", \n+  "layout": "document_view", \n+  "modified": "2016-01-21T01:24:11+00:00", \n   "parent": {\n-    "@id": "http://localhost:55001/plone",\n-    "@type": "Plone Site",\n-    "description": "",\n+    "@id": "http://localhost:55001/plone", \n+    "@type": "Plone Site", \n+    "description": "", \n     "title": "Plone site"\n-  },\n-  "relatedItems": [],\n-  "review_state": "private",\n-  "rights": "",\n-  "subjects": [],\n-  "table_of_contents": null,\n+  }, \n+  "relatedItems": [], \n+  "review_state": "private", \n+  "rights": "", \n+  "subjects": [], \n+  "table_of_contents": null, \n   "text": {\n-    "content-type": "text/plain",\n-    "data": "<p>If you&#x27;re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone mailing lists about this.</p>",\n+    "content-type": "text/plain", \n+    "data": "<p>If you\'re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone mailing lists about this.</p>", \n     "encoding": "utf-8"\n-  },\n-  "title": "Welcome to Plone",\n-  "version": "current",\n+  }, \n+  "title": "Welcome to Plone", \n+  "version": "current", \n   "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp b/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\nindex 78b57fb3..08ce461b 100644\n--- a/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\n@@ -4,187 +4,187 @@ Content-Type: application/json\n {\n   "@components": {\n     "actions": {\n-      "document_actions": [],\n+      "document_actions": [], \n       "object": [\n         {\n-          "icon": "",\n-          "id": "view",\n+          "icon": "", \n+          "id": "view", \n           "title": "View"\n-        },\n+        }, \n         {\n-          "icon": "",\n-          "id": "edit",\n+          "icon": "", \n+          "id": "edit", \n           "title": "Edit"\n-        },\n+        }, \n         {\n-          "icon": "",\n-          "id": "folderContents",\n+          "icon": "", \n+          "id": "folderContents", \n           "title": "Contents"\n-        },\n+        }, \n         {\n-          "icon": "",\n-          "id": "history",\n+          "icon": "", \n+          "id": "history", \n           "title": "History"\n-        },\n+        }, \n         {\n-          "icon": "",\n-          "id": "local_roles",\n+          "icon": "", \n+          "id": "local_roles", \n           "title": "Sharing"\n         }\n-      ],\n+      ], \n       "object_buttons": [\n         {\n-          "icon": "",\n-          "id": "cut",\n+          "icon": "", \n+          "id": "cut", \n           "title": "Cut"\n-        },\n+        }, \n         {\n-          "icon": "",\n-          "id": "copy",\n+          "icon": "", \n+          "id": "copy", \n           "title": "Copy"\n-        },\n+        }, \n         {\n-          "icon": "",\n-          "id": "delete",\n+          "icon": "", \n+          "id": "delete", \n           "title": "Delete"\n-        },\n+        }, \n         {\n-          "icon": "",\n-          "id": "rename",\n+          "icon": "", \n+          "id": "rename", \n           "title": "Rename"\n         }\n-      ],\n+      ], \n       "portal_tabs": [\n         {\n-          "icon": "",\n-          "id": "index_html",\n+          "icon": "", \n+          "id": "index_html", \n           "title": "Home"\n         }\n-      ],\n+      ], \n       "site_actions": [\n         {\n-          "icon": "",\n-          "id": "sitemap",\n+          "icon": "", \n+          "id": "sitemap", \n           "title": "Site Map"\n-        },\n+        }, \n         {\n-          "icon": "",\n-          "id": "accessibility",\n+          "icon": "", \n+          "id": "accessibility", \n           "title": "Accessibility"\n-        },\n+        }, \n         {\n-          "icon": "",\n-          "id": "contact",\n+          "icon": "", \n+          "id": "contact", \n           "title": "Contact"\n         }\n-      ],\n+      ], \n       "user": [\n         {\n-          "icon": "",\n-          "id": "preferences",\n+          "icon": "", \n+          "id": "preferences", \n           "title": "Preferences"\n-        },\n+        }, \n         {\n-          "icon": "",\n-          "id": "dashboard",\n+          "icon": "", \n+          "id": "dashboard", \n           "title": "Dashboard"\n-        },\n+        }, \n         {\n-          "icon": "",\n-          "id": "plone_setup",\n+          "icon": "", \n+          "id": "plone_setup", \n           "title": "Site Setup"\n-        },\n+        }, \n         {\n-          "icon": "",\n-          "id": "logout",\n+          "icon": "", \n+          "id": "logout", \n           "title": "Log out"\n         }\n       ]\n-    },\n+    }, \n     "breadcrumbs": {\n-      "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n+      "@id": "http://localhost:55001/plone/front-page/@breadcrumbs", \n       "items": [\n         {\n-          "@id": "http://localhost:55001/plone/front-page",\n+          "@id": "http://localhost:55001/plone/front-page", \n           "title": "Welcome to Plone"\n         }\n       ]\n-    },\n+    }, \n     "navigation": {\n-      "@id": "http://localhost:55001/plone/front-page/@navigation",\n+      "@id": "http://localhost:55001/plone/front-page/@navigation", \n       "items": [\n         {\n-          "@id": "http://localhost:55001/plone",\n-          "description": "",\n+          "@id": "http://localhost:55001/plone", \n+          "description": "", \n           "title": "Home"\n-        },\n+        }, \n         {\n-          "@id": "http://localhost:55001/plone/front-page",\n-          "description": "Congratulations! You have successfully installed Plone.",\n+          "@id": "http://localhost:55001/plone/front-page", \n+          "description": "Congratulations! You have successfully installed Plone.", \n           "title": "Welcome to Plone"\n         }\n       ]\n-    },\n+    }, \n     "workflow": {\n-      "@id": "http://localhost:55001/plone/front-page/@workflow",\n+      "@id": "http://localhost:55001/plone/front-page/@workflow", \n       "history": [\n         {\n-          "action": null,\n-          "actor": "test_user_1_",\n-          "comments": "",\n-          "review_state": "private",\n-          "time": "2016-10-21T19:00:00+00:00",\n+          "action": null, \n+          "actor": "test_user_1_", \n+          "comments": "", \n+          "review_state": "private", \n+          "time": "2016-10-21T19:00:00+00:00", \n           "title": "Private"\n         }\n-      ],\n+      ], \n       "transitions": [\n         {\n-          "@id": "http://localhost:55001/plone/front-page/@workflow/publish",\n+          "@id": "http://localhost:55001/plone/front-page/@workflow/publish", \n           "title": "Publish"\n-        },\n+        }, \n         {\n-          "@id": "http://localhost:55001/plone/front-page/@workflow/submit",\n+          "@id": "http://localhost:55001/plone/front-page/@workflow/submit", \n           "title": "Submit for publication"\n         }\n       ]\n     }\n-  },\n-  "@id": "http://localhost:55001/plone/front-page",\n-  "@type": "Document",\n-  "UID": "SomeUUID000000000000000000000001",\n-  "allow_discussion": false,\n-  "changeNote": "",\n-  "contributors": [],\n-  "created": "2016-01-21T01:14:48+00:00",\n+  }, \n+  "@id": "http://localhost:55001/plone/front-page", \n+  "@type": "Document", \n+  "UID": "SomeUUID000000000000000000000001", \n+  "allow_discussion": false, \n+  "changeNote": "", \n+  "contributors": [], \n+  "created": "2016-01-21T01:14:48+00:00", \n   "creators": [\n     "test_user_1_"\n-  ],\n-  "description": "Congratulations! You have successfully installed Plone.",\n-  "effective": null,\n-  "exclude_from_nav": false,\n-  "expires": null,\n-  "id": "front-page",\n-  "is_folderish": false,\n-  "language": "",\n-  "layout": "document_view",\n-  "modified": "2016-01-21T01:24:11+00:00",\n+  ], \n+  "description": "Congratulations! You have successfully installed Plone.", \n+  "effective": null, \n+  "exclude_from_nav": false, \n+  "expires": null, \n+  "id": "front-page", \n+  "is_folderish": false, \n+  "language": "", \n+  "layout": "document_view", \n+  "modified": "2016-01-21T01:24:11+00:00", \n   "parent": {\n-    "@id": "http://localhost:55001/plone",\n-    "@type": "Plone Site",\n-    "description": "",\n+    "@id": "http://localhost:55001/plone", \n+    "@type": "Plone Site", \n+    "description": "", \n     "title": "Plone site"\n-  },\n-  "relatedItems": [],\n-  "review_state": "private",\n-  "rights": "",\n-  "subjects": [],\n-  "table_of_contents": null,\n+  }, \n+  "relatedItems": [], \n+  "review_state": "private", \n+  "rights": "", \n+  "subjects": [], \n+  "table_of_contents": null, \n   "text": {\n-    "content-type": "text/plain",\n-    "data": "<p>If you&#x27;re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone mailing lists about this.</p>",\n+    "content-type": "text/plain", \n+    "data": "<p>If you\'re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone mailing lists about this.</p>", \n     "encoding": "utf-8"\n-  },\n-  "title": "Welcome to Plone",\n-  "version": "current",\n+  }, \n+  "title": "Welcome to Plone", \n+  "version": "current", \n   "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/file.resp b/src/plone/restapi/tests/http-examples/file.resp\nindex dfab580d..b76c1f95 100644\n--- a/src/plone/restapi/tests/http-examples/file.resp\n+++ b/src/plone/restapi/tests/http-examples/file.resp\n@@ -5,51 +5,51 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/file/@actions"\n-    },\n+    }, \n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/file/@breadcrumbs"\n-    },\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/file/@navigation"\n-    },\n+    }, \n     "workflow": {\n       "@id": "http://localhost:55001/plone/file/@workflow"\n     }\n-  },\n-  "@id": "http://localhost:55001/plone/file",\n-  "@type": "File",\n-  "UID": "SomeUUID000000000000000000000002",\n-  "allow_discussion": false,\n-  "contributors": [],\n-  "created": "2016-01-21T05:14:48+00:00",\n+  }, \n+  "@id": "http://localhost:55001/plone/file", \n+  "@type": "File", \n+  "UID": "SomeUUID000000000000000000000002", \n+  "allow_discussion": false, \n+  "contributors": [], \n+  "created": "2016-01-21T05:14:48+00:00", \n   "creators": [\n     "test_user_1_"\n-  ],\n-  "description": "This is a file",\n-  "effective": null,\n-  "exclude_from_nav": false,\n-  "expires": null,\n+  ], \n+  "description": "This is a file", \n+  "effective": null, \n+  "exclude_from_nav": false, \n+  "expires": null, \n   "file": {\n-    "content-type": "application/pdf",\n-    "download": "http://localhost:55001/plone/file/@@download/file",\n-    "filename": "file.pdf",\n+    "content-type": "application/pdf", \n+    "download": "http://localhost:55001/plone/file/@@download/file", \n+    "filename": "file.pdf", \n     "size": 74429\n-  },\n-  "id": "file",\n-  "is_folderish": false,\n-  "language": "",\n-  "layout": "file_view",\n-  "modified": "2016-01-21T05:24:11+00:00",\n+  }, \n+  "id": "file", \n+  "is_folderish": false, \n+  "language": "", \n+  "layout": "file_view", \n+  "modified": "2016-01-21T05:24:11+00:00", \n   "parent": {\n-    "@id": "http://localhost:55001/plone",\n-    "@type": "Plone Site",\n-    "description": "",\n+    "@id": "http://localhost:55001/plone", \n+    "@type": "Plone Site", \n+    "description": "", \n     "title": "Plone site"\n-  },\n-  "relatedItems": [],\n-  "review_state": null,\n-  "rights": "",\n-  "subjects": [],\n-  "title": "My File",\n+  }, \n+  "relatedItems": [], \n+  "review_state": null, \n+  "rights": "", \n+  "subjects": [], \n+  "title": "My File", \n   "version": "current"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/folder.resp b/src/plone/restapi/tests/http-examples/folder.resp\nindex edacdf77..2905c0a2 100644\n--- a/src/plone/restapi/tests/http-examples/folder.resp\n+++ b/src/plone/restapi/tests/http-examples/folder.resp\n@@ -5,63 +5,63 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/folder/@actions"\n-    },\n+    }, \n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/folder/@breadcrumbs"\n-    },\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/folder/@navigation"\n-    },\n+    }, \n     "workflow": {\n       "@id": "http://localhost:55001/plone/folder/@workflow"\n     }\n-  },\n-  "@id": "http://localhost:55001/plone/folder",\n-  "@type": "Folder",\n-  "UID": "SomeUUID000000000000000000000002",\n-  "allow_discussion": false,\n-  "contributors": [],\n-  "created": "2016-01-21T07:14:48+00:00",\n+  }, \n+  "@id": "http://localhost:55001/plone/folder", \n+  "@type": "Folder", \n+  "UID": "SomeUUID000000000000000000000002", \n+  "allow_discussion": false, \n+  "contributors": [], \n+  "created": "2016-01-21T07:14:48+00:00", \n   "creators": [\n     "test_user_1_"\n-  ],\n-  "description": "This is a folder with two documents",\n-  "effective": null,\n-  "exclude_from_nav": false,\n-  "expires": null,\n-  "id": "folder",\n-  "is_folderish": true,\n+  ], \n+  "description": "This is a folder with two documents", \n+  "effective": null, \n+  "exclude_from_nav": false, \n+  "expires": null, \n+  "id": "folder", \n+  "is_folderish": true, \n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone/folder/doc1",\n-      "@type": "Document",\n-      "description": "",\n-      "review_state": "private",\n+      "@id": "http://localhost:55001/plone/folder/doc1", \n+      "@type": "Document", \n+      "description": "", \n+      "review_state": "private", \n       "title": "A document within a folder"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/folder/doc2",\n-      "@type": "Document",\n-      "description": "",\n-      "review_state": "private",\n+      "@id": "http://localhost:55001/plone/folder/doc2", \n+      "@type": "Document", \n+      "description": "", \n+      "review_state": "private", \n       "title": "A document within a folder"\n     }\n-  ],\n-  "items_total": 2,\n-  "language": "",\n-  "layout": "listing_view",\n-  "modified": "2016-01-21T07:24:11+00:00",\n-  "nextPreviousEnabled": false,\n+  ], \n+  "items_total": 2, \n+  "language": "", \n+  "layout": "listing_view", \n+  "modified": "2016-01-21T07:24:11+00:00", \n+  "nextPreviousEnabled": false, \n   "parent": {\n-    "@id": "http://localhost:55001/plone",\n-    "@type": "Plone Site",\n-    "description": "",\n+    "@id": "http://localhost:55001/plone", \n+    "@type": "Plone Site", \n+    "description": "", \n     "title": "Plone site"\n-  },\n-  "relatedItems": [],\n-  "review_state": "private",\n-  "rights": "",\n-  "subjects": [],\n-  "title": "My Folder",\n+  }, \n+  "relatedItems": [], \n+  "review_state": "private", \n+  "rights": "", \n+  "subjects": [], \n+  "title": "My Folder", \n   "version": "current"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/groups.resp b/src/plone/restapi/tests/http-examples/groups.resp\nindex a3dfdc01..4900bf9e 100644\n--- a/src/plone/restapi/tests/http-examples/groups.resp\n+++ b/src/plone/restapi/tests/http-examples/groups.resp\n@@ -3,43 +3,43 @@ Content-Type: application/json\n \n [\n   {\n-    "@id": "http://localhost:55001/plone/@groups/Administrators",\n-    "description": "",\n-    "email": "",\n-    "groupname": "Administrators",\n-    "id": "Administrators",\n+    "@id": "http://localhost:55001/plone/@groups/Administrators", \n+    "description": "", \n+    "email": "", \n+    "groupname": "Administrators", \n+    "id": "Administrators", \n     "title": "Administrators"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@groups/Reviewers",\n-    "description": "",\n-    "email": "",\n-    "groupname": "Reviewers",\n-    "id": "Reviewers",\n+    "@id": "http://localhost:55001/plone/@groups/Reviewers", \n+    "description": "", \n+    "email": "", \n+    "groupname": "Reviewers", \n+    "id": "Reviewers", \n     "title": "Reviewers"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@groups/Site Administrators",\n-    "description": "",\n-    "email": "",\n-    "groupname": "Site Administrators",\n-    "id": "Site Administrators",\n+    "@id": "http://localhost:55001/plone/@groups/Site Administrators", \n+    "description": "", \n+    "email": "", \n+    "groupname": "Site Administrators", \n+    "id": "Site Administrators", \n     "title": "Site Administrators"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@groups/ploneteam",\n-    "description": "We are Plone",\n-    "email": "ploneteam@plone.org",\n-    "groupname": "ploneteam",\n-    "id": "ploneteam",\n+    "@id": "http://localhost:55001/plone/@groups/ploneteam", \n+    "description": "We are Plone", \n+    "email": "ploneteam@plone.org", \n+    "groupname": "ploneteam", \n+    "id": "ploneteam", \n     "title": "Plone Team"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@groups/AuthenticatedUsers",\n-    "description": "Automatic Group Provider",\n-    "email": "",\n-    "groupname": "AuthenticatedUsers",\n-    "id": "AuthenticatedUsers",\n+    "@id": "http://localhost:55001/plone/@groups/AuthenticatedUsers", \n+    "description": "Automatic Group Provider", \n+    "email": "", \n+    "groupname": "AuthenticatedUsers", \n+    "id": "AuthenticatedUsers", \n     "title": "Authenticated Users (Virtual Group)"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/groups_created.resp b/src/plone/restapi/tests/http-examples/groups_created.resp\nindex 97aa7871..d7611e18 100644\n--- a/src/plone/restapi/tests/http-examples/groups_created.resp\n+++ b/src/plone/restapi/tests/http-examples/groups_created.resp\n@@ -1,21 +1,21 @@\n HTTP/1.1 201 Created\n-Location: http://localhost:55001/plone/@groups/fwt\n Content-Type: application/json\n+Location: http://localhost:55001/plone/@groups/fwt\n \n {\n-  "@id": "http://localhost:55001/plone/@groups/fwt",\n-  "description": "The Plone Framework Team",\n-  "email": "fwt@plone.org",\n-  "groupname": "fwt",\n-  "id": "fwt",\n-  "title": "Framework Team",\n+  "@id": "http://localhost:55001/plone/@groups/fwt", \n+  "description": "The Plone Framework Team", \n+  "email": "fwt@plone.org", \n+  "groupname": "fwt", \n+  "id": "fwt", \n+  "title": "Framework Team", \n   "users": {\n-    "@id": "http://localhost:55001/plone/@groups",\n+    "@id": "http://localhost:55001/plone/@groups", \n     "items": [\n-      "Administrators",\n-      "admin",\n+      "Administrators", \n+      "admin", \n       "test_user_1_"\n-    ],\n+    ], \n     "items_total": 3\n   }\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/groups_delete.resp b/src/plone/restapi/tests/http-examples/groups_delete.resp\nindex 460c2259..0074ded3 100644\n--- a/src/plone/restapi/tests/http-examples/groups_delete.resp\n+++ b/src/plone/restapi/tests/http-examples/groups_delete.resp\n@@ -1,3 +1,2 @@\n HTTP/1.1 204 No Content\n-Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp b/src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp\nindex fcdb9e28..d4358609 100644\n--- a/src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp\n+++ b/src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp\n@@ -3,11 +3,11 @@ Content-Type: application/json\n \n [\n   {\n-    "@id": "http://localhost:55001/plone/@groups/ploneteam",\n-    "description": "We are Plone",\n-    "email": "ploneteam@plone.org",\n-    "groupname": "ploneteam",\n-    "id": "ploneteam",\n+    "@id": "http://localhost:55001/plone/@groups/ploneteam", \n+    "description": "We are Plone", \n+    "email": "ploneteam@plone.org", \n+    "groupname": "ploneteam", \n+    "id": "ploneteam", \n     "title": "Plone Team"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/groups_get.resp b/src/plone/restapi/tests/http-examples/groups_get.resp\nindex 149884db..32616b25 100644\n--- a/src/plone/restapi/tests/http-examples/groups_get.resp\n+++ b/src/plone/restapi/tests/http-examples/groups_get.resp\n@@ -2,15 +2,15 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/@groups/ploneteam",\n-  "description": "We are Plone",\n-  "email": "ploneteam@plone.org",\n-  "groupname": "ploneteam",\n-  "id": "ploneteam",\n-  "title": "Plone Team",\n+  "@id": "http://localhost:55001/plone/@groups/ploneteam", \n+  "description": "We are Plone", \n+  "email": "ploneteam@plone.org", \n+  "groupname": "ploneteam", \n+  "id": "ploneteam", \n+  "title": "Plone Team", \n   "users": {\n-    "@id": "http://localhost:55001/plone/@groups/ploneteam",\n-    "items": [],\n+    "@id": "http://localhost:55001/plone/@groups/ploneteam", \n+    "items": [], \n     "items_total": 0\n   }\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/groups_update.resp b/src/plone/restapi/tests/http-examples/groups_update.resp\nindex 460c2259..0074ded3 100644\n--- a/src/plone/restapi/tests/http-examples/groups_update.resp\n+++ b/src/plone/restapi/tests/http-examples/groups_update.resp\n@@ -1,3 +1,2 @@\n HTTP/1.1 204 No Content\n-Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/history_get.resp b/src/plone/restapi/tests/http-examples/history_get.resp\nindex 79ffc9ea..0f751f02 100644\n--- a/src/plone/restapi/tests/http-examples/history_get.resp\n+++ b/src/plone/restapi/tests/http-examples/history_get.resp\n@@ -3,34 +3,34 @@ Content-Type: application/json\n \n [\n   {\n-    "action": "Create",\n+    "action": "Create", \n     "actor": {\n-      "@id": "http://localhost:55001/plone/@users/test_user_1_",\n-      "fullname": "",\n-      "id": "test_user_1_",\n+      "@id": "http://localhost:55001/plone/@users/test_user_1_", \n+      "fullname": "", \n+      "id": "test_user_1_", \n       "username": "test-user"\n-    },\n-    "comments": "",\n-    "review_state": "private",\n-    "state_title": "Private",\n-    "time": "2016-10-21T15:00:00",\n-    "transition_title": "Create",\n+    }, \n+    "comments": "", \n+    "review_state": "private", \n+    "state_title": "Private", \n+    "time": "2016-10-21T19:00:00", \n+    "transition_title": "Create", \n     "type": "workflow"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/front-page/@history/0",\n-    "action": "Edited",\n+    "@id": "http://localhost:55001/plone/front-page/@history/0", \n+    "action": "Edited", \n     "actor": {\n-      "@id": "http://localhost:55001/plone/@users/test-user",\n-      "fullname": "test-user",\n-      "id": "test-user",\n+      "@id": "http://localhost:55001/plone/@users/test-user", \n+      "fullname": "test-user", \n+      "id": "test-user", \n       "username": null\n-    },\n-    "comments": null,\n-    "may_revert": true,\n-    "time": "2016-10-21T15:00:00",\n-    "transition_title": "Edited",\n-    "type": "versioning",\n+    }, \n+    "comments": null, \n+    "may_revert": true, \n+    "time": "2016-10-21T19:00:00", \n+    "transition_title": "Edited", \n+    "type": "versioning", \n     "version": 0\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/image.resp b/src/plone/restapi/tests/http-examples/image.resp\nindex 0f3c55c0..c2e1a516 100644\n--- a/src/plone/restapi/tests/http-examples/image.resp\n+++ b/src/plone/restapi/tests/http-examples/image.resp\n@@ -5,90 +5,90 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/image/@actions"\n-    },\n+    }, \n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/image/@breadcrumbs"\n-    },\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/image/@navigation"\n-    },\n+    }, \n     "workflow": {\n       "@id": "http://localhost:55001/plone/image/@workflow"\n     }\n-  },\n-  "@id": "http://localhost:55001/plone/image",\n-  "@type": "Image",\n-  "UID": "SomeUUID000000000000000000000002",\n-  "allow_discussion": false,\n-  "contributors": [],\n-  "created": "2016-01-21T06:14:48+00:00",\n+  }, \n+  "@id": "http://localhost:55001/plone/image", \n+  "@type": "Image", \n+  "UID": "SomeUUID000000000000000000000002", \n+  "allow_discussion": false, \n+  "contributors": [], \n+  "created": "2016-01-21T06:14:48+00:00", \n   "creators": [\n     "test_user_1_"\n-  ],\n-  "description": "This is an image",\n-  "effective": null,\n-  "exclude_from_nav": false,\n-  "expires": null,\n-  "id": "image",\n+  ], \n+  "description": "This is an image", \n+  "effective": null, \n+  "exclude_from_nav": false, \n+  "expires": null, \n+  "id": "image", \n   "image": {\n-    "content-type": "image/png",\n-    "download": "http://localhost:55001/plone/image/@@images/uuid1.png",\n-    "filename": "image.png",\n-    "height": 56,\n+    "content-type": "image/png", \n+    "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n+    "filename": "image.png", \n+    "height": 56, \n     "scales": {\n       "icon": {\n-        "download": "http://localhost:55001/plone/image/@@images/uuid1.png",\n-        "height": 8,\n+        "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n+        "height": 8, \n         "width": 32\n-      },\n+      }, \n       "large": {\n-        "download": "http://localhost:55001/plone/image/@@images/uuid1.png",\n-        "height": 56,\n+        "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n+        "height": 56, \n         "width": 215\n-      },\n+      }, \n       "listing": {\n-        "download": "http://localhost:55001/plone/image/@@images/uuid1.png",\n-        "height": 4,\n+        "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n+        "height": 4, \n         "width": 16\n-      },\n+      }, \n       "mini": {\n-        "download": "http://localhost:55001/plone/image/@@images/uuid1.png",\n-        "height": 52,\n+        "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n+        "height": 52, \n         "width": 200\n-      },\n+      }, \n       "preview": {\n-        "download": "http://localhost:55001/plone/image/@@images/uuid1.png",\n-        "height": 56,\n+        "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n+        "height": 56, \n         "width": 215\n-      },\n+      }, \n       "thumb": {\n-        "download": "http://localhost:55001/plone/image/@@images/uuid1.png",\n-        "height": 33,\n+        "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n+        "height": 33, \n         "width": 128\n-      },\n+      }, \n       "tile": {\n-        "download": "http://localhost:55001/plone/image/@@images/uuid1.png",\n-        "height": 16,\n+        "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n+        "height": 16, \n         "width": 64\n       }\n-    },\n-    "size": 1185,\n+    }, \n+    "size": 1185, \n     "width": 215\n-  },\n-  "is_folderish": false,\n-  "language": "",\n-  "layout": "image_view",\n-  "modified": "2016-01-21T06:24:11+00:00",\n+  }, \n+  "is_folderish": false, \n+  "language": "", \n+  "layout": "image_view", \n+  "modified": "2016-01-21T06:24:11+00:00", \n   "parent": {\n-    "@id": "http://localhost:55001/plone",\n-    "@type": "Plone Site",\n-    "description": "",\n+    "@id": "http://localhost:55001/plone", \n+    "@type": "Plone Site", \n+    "description": "", \n     "title": "Plone site"\n-  },\n-  "relatedItems": [],\n-  "review_state": null,\n-  "rights": "",\n-  "subjects": [],\n-  "title": "My Image",\n+  }, \n+  "relatedItems": [], \n+  "review_state": null, \n+  "rights": "", \n+  "subjects": [], \n+  "title": "My Image", \n   "version": "current"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/jwt_logged_in.req b/src/plone/restapi/tests/http-examples/jwt_logged_in.req\nindex 95e91fee..c9c7b9d7 100644\n--- a/src/plone/restapi/tests/http-examples/jwt_logged_in.req\n+++ b/src/plone/restapi/tests/http-examples/jwt_logged_in.req\n@@ -1,3 +1,3 @@\n GET /plone/ HTTP/1.1\n Accept: application/json\n-Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImZ1bGxuYW1lIjoiIn0.krI8ep0NQHyYYObtXl1ygI4NM2UbHUlZqF7kKnx9JFo\n+Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmdWxsbmFtZSI6IiIsInN1YiI6ImFkbWluIn0.RVl8ZFJWIaA-8ujyulJvw0j3F3qFjIHDIJFK0GF6j_0\ndiff --git a/src/plone/restapi/tests/http-examples/jwt_logged_in.resp b/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\nindex e6b65de9..8ce3cff3 100644\n--- a/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\n+++ b/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\n@@ -5,28 +5,28 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/@actions"\n-    },\n+    }, \n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/@breadcrumbs"\n-    },\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/@navigation"\n     }\n-  },\n-  "@id": "http://localhost:55001/plone/",\n-  "@type": "Plone Site",\n-  "id": "plone",\n-  "is_folderish": true,\n+  }, \n+  "@id": "http://localhost:55001/plone/", \n+  "@type": "Plone Site", \n+  "id": "plone", \n+  "is_folderish": true, \n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone/front-page",\n-      "@type": "Document",\n-      "description": "Congratulations! You have successfully installed Plone.",\n-      "review_state": "private",\n+      "@id": "http://localhost:55001/plone/front-page", \n+      "@type": "Document", \n+      "description": "Congratulations! You have successfully installed Plone.", \n+      "review_state": "private", \n       "title": "Welcome to Plone"\n     }\n-  ],\n-  "items_total": 1,\n-  "parent": {},\n+  ], \n+  "items_total": 1, \n+  "parent": {}, \n   "title": "Plone site"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/jwt_login.resp b/src/plone/restapi/tests/http-examples/jwt_login.resp\nindex f2e57949..fcd1b9a2 100644\n--- a/src/plone/restapi/tests/http-examples/jwt_login.resp\n+++ b/src/plone/restapi/tests/http-examples/jwt_login.resp\n@@ -2,5 +2,5 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImZ1bGxuYW1lIjoiIn0.krI8ep0NQHyYYObtXl1ygI4NM2UbHUlZqF7kKnx9JFo"\n+  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmdWxsbmFtZSI6IiIsInN1YiI6ImFkbWluIn0.RVl8ZFJWIaA-8ujyulJvw0j3F3qFjIHDIJFK0GF6j_0"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/jwt_login_renew.req b/src/plone/restapi/tests/http-examples/jwt_login_renew.req\nindex 1afd58d9..e3ea6f7a 100644\n--- a/src/plone/restapi/tests/http-examples/jwt_login_renew.req\n+++ b/src/plone/restapi/tests/http-examples/jwt_login_renew.req\n@@ -1,3 +1,3 @@\n POST /plone/@login-renew HTTP/1.1\n Accept: application/json\n-Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImZ1bGxuYW1lIjoiIn0.krI8ep0NQHyYYObtXl1ygI4NM2UbHUlZqF7kKnx9JFo\n+Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmdWxsbmFtZSI6IiIsInN1YiI6ImFkbWluIn0.RVl8ZFJWIaA-8ujyulJvw0j3F3qFjIHDIJFK0GF6j_0\ndiff --git a/src/plone/restapi/tests/http-examples/jwt_login_renew.resp b/src/plone/restapi/tests/http-examples/jwt_login_renew.resp\nindex f2e57949..fcd1b9a2 100644\n--- a/src/plone/restapi/tests/http-examples/jwt_login_renew.resp\n+++ b/src/plone/restapi/tests/http-examples/jwt_login_renew.resp\n@@ -2,5 +2,5 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImZ1bGxuYW1lIjoiIn0.krI8ep0NQHyYYObtXl1ygI4NM2UbHUlZqF7kKnx9JFo"\n+  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmdWxsbmFtZSI6IiIsInN1YiI6ImFkbWluIn0.RVl8ZFJWIaA-8ujyulJvw0j3F3qFjIHDIJFK0GF6j_0"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/jwt_logout.req b/src/plone/restapi/tests/http-examples/jwt_logout.req\nindex 9696c83c..0abc0206 100644\n--- a/src/plone/restapi/tests/http-examples/jwt_logout.req\n+++ b/src/plone/restapi/tests/http-examples/jwt_logout.req\n@@ -1,3 +1,3 @@\n POST /plone/@logout HTTP/1.1\n Accept: application/json\n-Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImZ1bGxuYW1lIjoiIn0.krI8ep0NQHyYYObtXl1ygI4NM2UbHUlZqF7kKnx9JFo\n+Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmdWxsbmFtZSI6IiIsInN1YiI6ImFkbWluIn0.RVl8ZFJWIaA-8ujyulJvw0j3F3qFjIHDIJFK0GF6j_0\ndiff --git a/src/plone/restapi/tests/http-examples/link.resp b/src/plone/restapi/tests/http-examples/link.resp\nindex 4a26b495..0e3e74db 100644\n--- a/src/plone/restapi/tests/http-examples/link.resp\n+++ b/src/plone/restapi/tests/http-examples/link.resp\n@@ -5,47 +5,47 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/link/@actions"\n-    },\n+    }, \n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/link/@breadcrumbs"\n-    },\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/link/@navigation"\n-    },\n+    }, \n     "workflow": {\n       "@id": "http://localhost:55001/plone/link/@workflow"\n     }\n-  },\n-  "@id": "http://localhost:55001/plone/link",\n-  "@type": "Link",\n-  "UID": "SomeUUID000000000000000000000002",\n-  "allow_discussion": false,\n-  "changeNote": "",\n-  "contributors": [],\n-  "created": "2016-01-21T04:14:48+00:00",\n+  }, \n+  "@id": "http://localhost:55001/plone/link", \n+  "@type": "Link", \n+  "UID": "SomeUUID000000000000000000000002", \n+  "allow_discussion": false, \n+  "changeNote": "", \n+  "contributors": [], \n+  "created": "2016-01-21T04:14:48+00:00", \n   "creators": [\n     "test_user_1_"\n-  ],\n-  "description": "This is a link",\n-  "effective": null,\n-  "exclude_from_nav": false,\n-  "expires": null,\n-  "id": "link",\n-  "is_folderish": false,\n-  "language": "",\n-  "layout": "link_redirect_view",\n-  "modified": "2016-01-21T04:24:11+00:00",\n+  ], \n+  "description": "This is a link", \n+  "effective": null, \n+  "exclude_from_nav": false, \n+  "expires": null, \n+  "id": "link", \n+  "is_folderish": false, \n+  "language": "", \n+  "layout": "link_redirect_view", \n+  "modified": "2016-01-21T04:24:11+00:00", \n   "parent": {\n-    "@id": "http://localhost:55001/plone",\n-    "@type": "Plone Site",\n-    "description": "",\n+    "@id": "http://localhost:55001/plone", \n+    "@type": "Plone Site", \n+    "description": "", \n     "title": "Plone site"\n-  },\n-  "remoteUrl": null,\n-  "review_state": "private",\n-  "rights": "",\n-  "subjects": [],\n-  "title": "My Link",\n-  "version": "current",\n+  }, \n+  "remoteUrl": null, \n+  "review_state": "private", \n+  "rights": "", \n+  "subjects": [], \n+  "title": "My Link", \n+  "version": "current", \n   "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/lock.resp b/src/plone/restapi/tests/http-examples/lock.resp\nindex 34ad56ee..06da01d4 100644\n--- a/src/plone/restapi/tests/http-examples/lock.resp\n+++ b/src/plone/restapi/tests/http-examples/lock.resp\n@@ -2,11 +2,11 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "creator": "admin",\n-  "locked": true,\n-  "name": "plone.locking.stealable",\n-  "stealable": true,\n-  "time": 1477076400.0,\n-  "timeout": 600,\n+  "creator": "admin", \n+  "locked": true, \n+  "name": "plone.locking.stealable", \n+  "stealable": true, \n+  "time": 1477076400.0, \n+  "timeout": 600, \n   "token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/lock_get.resp b/src/plone/restapi/tests/http-examples/lock_get.resp\nindex 4622ce69..52852385 100644\n--- a/src/plone/restapi/tests/http-examples/lock_get.resp\n+++ b/src/plone/restapi/tests/http-examples/lock_get.resp\n@@ -2,6 +2,6 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "locked": false,\n+  "locked": false, \n   "stealable": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp b/src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp\nindex 5aec6042..e3927240 100644\n--- a/src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp\n+++ b/src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp\n@@ -2,11 +2,11 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "creator": "admin",\n-  "locked": true,\n-  "name": "plone.locking.stealable",\n-  "stealable": true,\n-  "time": 1477076400.0,\n-  "timeout": 3600,\n+  "creator": "admin", \n+  "locked": true, \n+  "name": "plone.locking.stealable", \n+  "stealable": true, \n+  "time": 1477076400.0, \n+  "timeout": 3600, \n   "token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/lock_update.resp b/src/plone/restapi/tests/http-examples/lock_update.resp\nindex 460c2259..0074ded3 100644\n--- a/src/plone/restapi/tests/http-examples/lock_update.resp\n+++ b/src/plone/restapi/tests/http-examples/lock_update.resp\n@@ -1,3 +1,2 @@\n HTTP/1.1 204 No Content\n-Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/move.resp b/src/plone/restapi/tests/http-examples/move.resp\nindex fab2ae3c..e9fdeb80 100644\n--- a/src/plone/restapi/tests/http-examples/move.resp\n+++ b/src/plone/restapi/tests/http-examples/move.resp\n@@ -3,7 +3,7 @@ Content-Type: application/json\n \n [\n   {\n-    "source": "http://localhost:55001/plone/front-page",\n+    "source": "http://localhost:55001/plone/front-page", \n     "target": "http://localhost:55001/plone/folder/front-page"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/navigation.resp b/src/plone/restapi/tests/http-examples/navigation.resp\nindex 99afd5a7..81f1be2e 100644\n--- a/src/plone/restapi/tests/http-examples/navigation.resp\n+++ b/src/plone/restapi/tests/http-examples/navigation.resp\n@@ -2,16 +2,16 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/front-page/@navigation",\n+  "@id": "http://localhost:55001/plone/front-page/@navigation", \n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone",\n-      "description": "",\n+      "@id": "http://localhost:55001/plone", \n+      "description": "", \n       "title": "Home"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/front-page",\n-      "description": "Congratulations! You have successfully installed Plone.",\n+      "@id": "http://localhost:55001/plone/front-page", \n+      "description": "Congratulations! You have successfully installed Plone.", \n       "title": "Welcome to Plone"\n     }\n   ]\ndiff --git a/src/plone/restapi/tests/http-examples/navigation_tree.resp b/src/plone/restapi/tests/http-examples/navigation_tree.resp\nindex 46110769..67370a3c 100644\n--- a/src/plone/restapi/tests/http-examples/navigation_tree.resp\n+++ b/src/plone/restapi/tests/http-examples/navigation_tree.resp\n@@ -2,60 +2,60 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/front-page/@navigation",\n+  "@id": "http://localhost:55001/plone/front-page/@navigation", \n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone",\n-      "description": "",\n-      "items": "",\n+      "@id": "http://localhost:55001/plone", \n+      "description": "", \n+      "items": "", \n       "title": "Home"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/front-page",\n-      "description": "Congratulations! You have successfully installed Plone.",\n-      "items": [],\n+      "@id": "http://localhost:55001/plone/front-page", \n+      "description": "Congratulations! You have successfully installed Plone.", \n+      "items": [], \n       "title": "Welcome to Plone"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/folder",\n-      "description": "",\n+      "@id": "http://localhost:55001/plone/folder", \n+      "description": "", \n       "items": [\n         {\n-          "@id": "http://localhost:55001/plone/folder/subfolder1",\n-          "description": "",\n+          "@id": "http://localhost:55001/plone/folder/subfolder1", \n+          "description": "", \n           "items": [\n             {\n-              "@id": "http://localhost:55001/plone/folder/subfolder1/thirdlevelfolder",\n-              "description": "",\n+              "@id": "http://localhost:55001/plone/folder/subfolder1/thirdlevelfolder", \n+              "description": "", \n               "items": [\n                 {\n-                  "@id": "http://localhost:55001/plone/folder/subfolder1/thirdlevelfolder/fourthlevelfolder",\n-                  "description": "",\n+                  "@id": "http://localhost:55001/plone/folder/subfolder1/thirdlevelfolder/fourthlevelfolder", \n+                  "description": "", \n                   "title": "Fourth Level Folder"\n                 }\n-              ],\n+              ], \n               "title": "Third Level Folder"\n             }\n-          ],\n+          ], \n           "title": "SubFolder 1"\n-        },\n+        }, \n         {\n-          "@id": "http://localhost:55001/plone/folder/subfolder2",\n-          "description": "",\n+          "@id": "http://localhost:55001/plone/folder/subfolder2", \n+          "description": "", \n           "title": "SubFolder 2"\n-        },\n+        }, \n         {\n-          "@id": "http://localhost:55001/plone/folder/doc1",\n-          "description": "",\n+          "@id": "http://localhost:55001/plone/folder/doc1", \n+          "description": "", \n           "title": "A document"\n         }\n-      ],\n+      ], \n       "title": "Some Folder"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/folder2",\n-      "description": "",\n-      "items": [],\n+      "@id": "http://localhost:55001/plone/folder2", \n+      "description": "", \n+      "items": [], \n       "title": "Some Folder 2"\n     }\n   ]\ndiff --git a/src/plone/restapi/tests/http-examples/newsitem.resp b/src/plone/restapi/tests/http-examples/newsitem.resp\nindex 0dc371b2..235d894f 100644\n--- a/src/plone/restapi/tests/http-examples/newsitem.resp\n+++ b/src/plone/restapi/tests/http-examples/newsitem.resp\n@@ -5,98 +5,98 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/newsitem/@actions"\n-    },\n+    }, \n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/newsitem/@breadcrumbs"\n-    },\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/newsitem/@navigation"\n-    },\n+    }, \n     "workflow": {\n       "@id": "http://localhost:55001/plone/newsitem/@workflow"\n     }\n-  },\n-  "@id": "http://localhost:55001/plone/newsitem",\n-  "@type": "News Item",\n-  "UID": "SomeUUID000000000000000000000002",\n-  "allow_discussion": false,\n-  "changeNote": "",\n-  "contributors": [],\n-  "created": "2016-01-21T02:14:48+00:00",\n+  }, \n+  "@id": "http://localhost:55001/plone/newsitem", \n+  "@type": "News Item", \n+  "UID": "SomeUUID000000000000000000000002", \n+  "allow_discussion": false, \n+  "changeNote": "", \n+  "contributors": [], \n+  "created": "2016-01-21T02:14:48+00:00", \n   "creators": [\n     "test_user_1_"\n-  ],\n-  "description": "This is a news item",\n-  "effective": null,\n-  "exclude_from_nav": false,\n-  "expires": null,\n-  "id": "newsitem",\n+  ], \n+  "description": "This is a news item", \n+  "effective": null, \n+  "exclude_from_nav": false, \n+  "expires": null, \n+  "id": "newsitem", \n   "image": {\n-    "content-type": "image/png",\n-    "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png",\n-    "filename": "image.png",\n-    "height": 56,\n+    "content-type": "image/png", \n+    "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n+    "filename": "image.png", \n+    "height": 56, \n     "scales": {\n       "icon": {\n-        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png",\n-        "height": 8,\n+        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n+        "height": 8, \n         "width": 32\n-      },\n+      }, \n       "large": {\n-        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png",\n-        "height": 56,\n+        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n+        "height": 56, \n         "width": 215\n-      },\n+      }, \n       "listing": {\n-        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png",\n-        "height": 4,\n+        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n+        "height": 4, \n         "width": 16\n-      },\n+      }, \n       "mini": {\n-        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png",\n-        "height": 52,\n+        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n+        "height": 52, \n         "width": 200\n-      },\n+      }, \n       "preview": {\n-        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png",\n-        "height": 56,\n+        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n+        "height": 56, \n         "width": 215\n-      },\n+      }, \n       "thumb": {\n-        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png",\n-        "height": 33,\n+        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n+        "height": 33, \n         "width": 128\n-      },\n+      }, \n       "tile": {\n-        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png",\n-        "height": 16,\n+        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n+        "height": 16, \n         "width": 64\n       }\n-    },\n-    "size": 1185,\n+    }, \n+    "size": 1185, \n     "width": 215\n-  },\n-  "image_caption": "This is an image caption.",\n-  "is_folderish": false,\n-  "language": "",\n-  "layout": "newsitem_view",\n-  "modified": "2016-01-21T02:24:11+00:00",\n+  }, \n+  "image_caption": "This is an image caption.", \n+  "is_folderish": false, \n+  "language": "", \n+  "layout": "newsitem_view", \n+  "modified": "2016-01-21T02:24:11+00:00", \n   "parent": {\n-    "@id": "http://localhost:55001/plone",\n-    "@type": "Plone Site",\n-    "description": "",\n+    "@id": "http://localhost:55001/plone", \n+    "@type": "Plone Site", \n+    "description": "", \n     "title": "Plone site"\n-  },\n-  "relatedItems": [],\n-  "review_state": "private",\n-  "rights": "",\n-  "subjects": [],\n+  }, \n+  "relatedItems": [], \n+  "review_state": "private", \n+  "rights": "", \n+  "subjects": [], \n   "text": {\n-    "content-type": "text/plain",\n-    "data": "<p>Lorem ipsum</p>",\n+    "content-type": "text/plain", \n+    "data": "<p>Lorem ipsum</p>", \n     "encoding": "utf-8"\n-  },\n-  "title": "My News Item",\n-  "version": "current",\n+  }, \n+  "title": "My News Item", \n+  "version": "current", \n   "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/principals.resp b/src/plone/restapi/tests/http-examples/principals.resp\nindex 327de415..6ca70dbb 100644\n--- a/src/plone/restapi/tests/http-examples/principals.resp\n+++ b/src/plone/restapi/tests/http-examples/principals.resp\n@@ -4,13 +4,13 @@ Content-Type: application/json\n {\n   "groups": [\n     {\n-      "@id": "http://localhost:55001/plone/@groups/ploneteam",\n-      "description": "We are Plone",\n-      "email": "ploneteam@plone.org",\n-      "groupname": "ploneteam",\n-      "id": "ploneteam",\n+      "@id": "http://localhost:55001/plone/@groups/ploneteam", \n+      "description": "We are Plone", \n+      "email": "ploneteam@plone.org", \n+      "groupname": "ploneteam", \n+      "id": "ploneteam", \n       "title": "Plone Team"\n     }\n-  ],\n+  ], \n   "users": []\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/refresh_lock.resp b/src/plone/restapi/tests/http-examples/refresh_lock.resp\nindex 34ad56ee..06da01d4 100644\n--- a/src/plone/restapi/tests/http-examples/refresh_lock.resp\n+++ b/src/plone/restapi/tests/http-examples/refresh_lock.resp\n@@ -2,11 +2,11 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "creator": "admin",\n-  "locked": true,\n-  "name": "plone.locking.stealable",\n-  "stealable": true,\n-  "time": 1477076400.0,\n-  "timeout": 600,\n+  "creator": "admin", \n+  "locked": true, \n+  "name": "plone.locking.stealable", \n+  "stealable": true, \n+  "time": 1477076400.0, \n+  "timeout": 600, \n   "token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/registry_get_list.resp b/src/plone/restapi/tests/http-examples/registry_get_list.resp\nindex 854804f9..8d4e7af9 100644\n--- a/src/plone/restapi/tests/http-examples/registry_get_list.resp\n+++ b/src/plone/restapi/tests/http-examples/registry_get_list.resp\n@@ -2,498 +2,498 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/@registry",\n+  "@id": "http://localhost:55001/plone/@registry", \n   "batching": {\n-    "@id": "http://localhost:55001/plone/@registry",\n-    "first": "http://localhost:55001/plone/@registry?b_start=0",\n-    "last": "http://localhost:55001/plone/@registry?b_start=1650",\n+    "@id": "http://localhost:55001/plone/@registry", \n+    "first": "http://localhost:55001/plone/@registry?b_start=0", \n+    "last": "http://localhost:55001/plone/@registry?b_start=1525", \n     "next": "http://localhost:55001/plone/@registry?b_start=25"\n-  },\n+  }, \n   "items": [\n     {\n-      "name": "Products.CMFPlone.i18nl10n.override_dateformat.Enabled",\n+      "name": "Products.CMFPlone.i18nl10n.override_dateformat.Enabled", \n       "schema": {\n         "properties": {\n-          "description": "Override the translation machinery",\n-          "title": "Enabled",\n+          "description": "Override the translation machinery", \n+          "title": "Enabled", \n           "type": "boolean"\n         }\n-      },\n+      }, \n       "value": false\n-    },\n+    }, \n     {\n-      "name": "Products.CMFPlone.i18nl10n.override_dateformat.date_format_long",\n+      "name": "Products.CMFPlone.i18nl10n.override_dateformat.date_format_long", \n       "schema": {\n         "properties": {\n-          "description": "Default value: %Y-%m-%d %H:%M (2038-01-19 03:14)",\n-          "title": "old ZMI property: localLongTimeFormat",\n+          "description": "Default value: %Y-%m-%d %H:%M (2038-01-19 03:14)", \n+          "title": "old ZMI property: localLongTimeFormat", \n           "type": "string"\n         }\n-      },\n+      }, \n       "value": "%Y-%m-%d %H:%M"\n-    },\n+    }, \n     {\n-      "name": "Products.CMFPlone.i18nl10n.override_dateformat.date_format_short",\n+      "name": "Products.CMFPlone.i18nl10n.override_dateformat.date_format_short", \n       "schema": {\n         "properties": {\n-          "description": "Default value: %Y-%m-%d (2038-01-19)",\n-          "title": "old ZMI property: localTimeFormat",\n+          "description": "Default value: %Y-%m-%d (2038-01-19)", \n+          "title": "old ZMI property: localTimeFormat", \n           "type": "string"\n         }\n-      },\n+      }, \n       "value": "%Y-%m-%d"\n-    },\n+    }, \n     {\n-      "name": "Products.CMFPlone.i18nl10n.override_dateformat.time_format",\n+      "name": "Products.CMFPlone.i18nl10n.override_dateformat.time_format", \n       "schema": {\n         "properties": {\n-          "description": "Default value: %H:%M (03:14)",\n-          "title": "old ZMI property: localTimeOnlyFormat",\n+          "description": "Default value: %H:%M (03:14)", \n+          "title": "old ZMI property: localTimeOnlyFormat", \n           "type": "string"\n         }\n-      },\n+      }, \n       "value": "%H:%M"\n-    },\n+    }, \n     {\n-      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.allowed",\n+      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.allowed", \n       "schema": {\n         "properties": {\n-          "default": true,\n-          "description": "Allow syndication for collections and folders on site.",\n-          "title": "Allowed",\n+          "default": true, \n+          "description": "Allow syndication for collections and folders on site.", \n+          "title": "Allowed", \n           "type": "boolean"\n         }\n-      },\n+      }, \n       "value": true\n-    },\n+    }, \n     {\n-      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.allowed_feed_types",\n+      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.allowed_feed_types", \n       "schema": {\n         "properties": {\n-          "additionalItems": true,\n+          "additionalItems": true, \n           "default": [\n-            "RSS|RSS 1.0",\n-            "rss.xml|RSS 2.0",\n-            "atom.xml|Atom",\n+            "RSS|RSS 1.0", \n+            "rss.xml|RSS 2.0", \n+            "atom.xml|Atom", \n             "itunes.xml|iTunes"\n-          ],\n-          "description": "Separate view name and title by \'|\'",\n+          ], \n+          "description": "Separate view name and title by \'|\'", \n           "items": {\n-            "description": "",\n-            "title": "",\n+            "description": "", \n+            "title": "", \n             "type": "string"\n-          },\n-          "title": "Allowed Feed Types",\n-          "type": "array",\n+          }, \n+          "title": "Allowed Feed Types", \n+          "type": "array", \n           "uniqueItems": true\n         }\n-      },\n+      }, \n       "value": [\n-        "RSS|RSS 1.0",\n-        "rss.xml|RSS 2.0",\n-        "atom.xml|Atom",\n+        "RSS|RSS 1.0", \n+        "rss.xml|RSS 2.0", \n+        "atom.xml|Atom", \n         "itunes.xml|iTunes"\n       ]\n-    },\n+    }, \n     {\n-      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.default_enabled",\n+      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.default_enabled", \n       "schema": {\n         "properties": {\n-          "default": false,\n-          "description": "If syndication should be enabled by default for all folders and collections.",\n-          "title": "Enabled by default",\n+          "default": false, \n+          "description": "If syndication should be enabled by default for all folders and collections.", \n+          "title": "Enabled by default", \n           "type": "boolean"\n         }\n-      },\n+      }, \n       "value": false\n-    },\n+    }, \n     {\n-      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.max_items",\n+      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.max_items", \n       "schema": {\n         "properties": {\n-          "default": 15,\n-          "description": "Maximum number of items that will be syndicated.",\n-          "minimum": 1,\n-          "title": "Maximum items",\n+          "default": 15, \n+          "description": "Maximum number of items that will be syndicated.", \n+          "minimum": 1, \n+          "title": "Maximum items", \n           "type": "integer"\n         }\n-      },\n+      }, \n       "value": 15\n-    },\n+    }, \n     {\n-      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.render_body",\n+      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.render_body", \n       "schema": {\n         "properties": {\n-          "default": false,\n-          "description": "If body text available for item, render it, otherwise use description.",\n-          "title": "Render Body",\n+          "default": false, \n+          "description": "If body text available for item, render it, otherwise use description.", \n+          "title": "Render Body", \n           "type": "boolean"\n         }\n-      },\n+      }, \n       "value": false\n-    },\n+    }, \n     {\n-      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.search_rss_enabled",\n+      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.search_rss_enabled", \n       "schema": {\n         "properties": {\n-          "default": true,\n-          "description": "Allows users to subscribe to feeds of search results",\n-          "title": "Search RSS enabled",\n+          "default": true, \n+          "description": "Allows users to subscribe to feeds of search results", \n+          "title": "Search RSS enabled", \n           "type": "boolean"\n         }\n-      },\n+      }, \n       "value": true\n-    },\n+    }, \n     {\n-      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.show_author_info",\n+      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.show_author_info", \n       "schema": {\n         "properties": {\n-          "default": true,\n-          "description": "Should feeds include author information",\n-          "title": "Show author info",\n+          "default": true, \n+          "description": "Should feeds include author information", \n+          "title": "Show author info", \n           "type": "boolean"\n         }\n-      },\n+      }, \n       "value": true\n-    },\n+    }, \n     {\n-      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.show_syndication_button",\n+      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.show_syndication_button", \n       "schema": {\n         "properties": {\n-          "description": "Makes it possible to customize syndication settings for particular folders and collections ",\n-          "title": "Show settings button",\n+          "description": "Makes it possible to customize syndication settings for particular folders and collections ", \n+          "title": "Show settings button", \n           "type": "boolean"\n         }\n-      },\n+      }, \n       "value": null\n-    },\n+    }, \n     {\n-      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.show_syndication_link",\n+      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.show_syndication_link", \n       "schema": {\n         "properties": {\n-          "description": "Enable RSS link document action on the syndication content item.",\n-          "title": "Show feed link",\n+          "description": "Enable RSS link document action on the syndication content item.", \n+          "title": "Show feed link", \n           "type": "boolean"\n         }\n-      },\n+      }, \n       "value": null\n-    },\n+    }, \n     {\n-      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.site_rss_items",\n+      "name": "Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings.site_rss_items", \n       "schema": {\n         "properties": {\n-          "additionalItems": true,\n+          "additionalItems": true, \n           "default": [\n             "/news/aggregator"\n-          ],\n-          "description": "Paths to folders and collections to link to at the portal root.",\n+          ], \n+          "description": "Paths to folders and collections to link to at the portal root.", \n           "items": {\n-            "choices": [],\n-            "description": "",\n-            "enum": [],\n-            "enumNames": [],\n-            "title": "",\n+            "choices": [], \n+            "description": "", \n+            "enum": [], \n+            "enumNames": [], \n+            "title": "", \n             "type": "string"\n-          },\n-          "title": "Site RSS",\n-          "type": "array",\n+          }, \n+          "title": "Site RSS", \n+          "type": "array", \n           "uniqueItems": true\n         }\n-      },\n+      }, \n       "value": [\n         "/news/aggregator"\n       ]\n-    },\n+    }, \n     {\n-      "name": "Products.ResourceRegistries.interfaces.settings.IResourceRegistriesSettings.resourceBundlesForThemes",\n+      "name": "Products.ResourceRegistries.interfaces.settings.IResourceRegistriesSettings.resourceBundlesForThemes", \n       "schema": {\n         "properties": {\n-          "description": "Maps skin names to lists of resource bundle names",\n+          "description": "Maps skin names to lists of resource bundle names", \n           "key_type": {\n-            "additional": {},\n+            "additional": {}, \n             "schema": {\n-              "description": "",\n-              "title": "",\n+              "description": "", \n+              "title": "", \n               "type": "string"\n             }\n-          },\n-          "title": "Resource bundles for themes",\n-          "type": "dict",\n+          }, \n+          "title": "Resource bundles for themes", \n+          "type": "dict", \n           "value_type": {\n-            "additional": {},\n+            "additional": {}, \n             "schema": {\n-              "description": "",\n-              "title": "",\n+              "description": "", \n+              "title": "", \n               "type": "string"\n             }\n           }\n         }\n-      },\n+      }, \n       "value": {\n         "(default)": [\n-          "jquery",\n+          "jquery", \n           "default"\n         ]\n       }\n-    },\n+    }, \n     {\n-      "name": "plone.alignment_styles",\n+      "name": "plone.alignment_styles", \n       "schema": {\n         "properties": {\n-          "additionalItems": true,\n+          "additionalItems": true, \n           "default": [\n-            "Left|alignleft|alignleft",\n-            "Center|aligncenter|aligncenter",\n-            "Right|alignright|alignright",\n+            "Left|alignleft|alignleft", \n+            "Center|aligncenter|aligncenter", \n+            "Right|alignright|alignright", \n             "Justify|alignjustify|alignjustify"\n-          ],\n-          "description": "Name|format|icon",\n+          ], \n+          "description": "Name|format|icon", \n           "items": {\n-            "description": "",\n-            "title": "",\n+            "description": "", \n+            "title": "", \n             "type": "string"\n-          },\n-          "title": "Alignment styles",\n-          "type": "array",\n+          }, \n+          "title": "Alignment styles", \n+          "type": "array", \n           "uniqueItems": false\n         }\n-      },\n+      }, \n       "value": [\n-        "Left|alignleft|alignleft",\n-        "Center|aligncenter|aligncenter",\n-        "Right|alignright|alignright",\n+        "Left|alignleft|alignleft", \n+        "Center|aligncenter|aligncenter", \n+        "Right|alignright|alignright", \n         "Justify|alignjustify|alignjustify"\n       ]\n-    },\n+    }, \n     {\n-      "name": "plone.allow_anon_views_about",\n+      "name": "plone.allow_anon_views_about", \n       "schema": {\n         "properties": {\n-          "default": false,\n-          "description": "If not selected only logged-in users will be able to view information about who created an item and when it was modified.",\n-          "title": "Allow anyone to view \'about\' information",\n+          "default": false, \n+          "description": "If not selected only logged-in users will be able to view information about who created an item and when it was modified.", \n+          "title": "Allow anyone to view \'about\' information", \n           "type": "boolean"\n         }\n-      },\n+      }, \n       "value": false\n-    },\n+    }, \n     {\n-      "name": "plone.allow_external_login_sites",\n+      "name": "plone.allow_external_login_sites", \n       "schema": {\n         "properties": {\n-          "additionalItems": true,\n-          "default": [],\n-          "description": "",\n+          "additionalItems": true, \n+          "default": [], \n+          "description": "", \n           "items": {\n-            "description": "",\n-            "title": "",\n+            "description": "", \n+            "title": "", \n             "type": "string"\n-          },\n-          "title": "Allow external login sites",\n-          "type": "array",\n+          }, \n+          "title": "Allow external login sites", \n+          "type": "array", \n           "uniqueItems": true\n         }\n-      },\n+      }, \n       "value": []\n-    },\n+    }, \n     {\n-      "name": "plone.allowed_sizes",\n+      "name": "plone.allowed_sizes", \n       "schema": {\n         "properties": {\n-          "additionalItems": true,\n+          "additionalItems": true, \n           "default": [\n-            "large 768:768",\n-            "preview 400:400",\n-            "mini 200:200",\n-            "thumb 128:128",\n-            "tile 64:64",\n-            "icon 32:32",\n+            "large 768:768", \n+            "preview 400:400", \n+            "mini 200:200", \n+            "thumb 128:128", \n+            "tile 64:64", \n+            "icon 32:32", \n             "listing 16:16"\n-          ],\n-          "description": "Specify all allowed maximum image dimensions, one per line. The required format is &lt;name&gt; &lt;width&gt;:&lt;height&gt;.",\n+          ], \n+          "description": "Specify all allowed maximum image dimensions, one per line. The required format is &lt;name&gt; &lt;width&gt;:&lt;height&gt;.", \n           "items": {\n-            "description": "",\n-            "title": "",\n+            "description": "", \n+            "title": "", \n             "type": "string"\n-          },\n-          "title": "Allowed image sizes",\n-          "type": "array",\n+          }, \n+          "title": "Allowed image sizes", \n+          "type": "array", \n           "uniqueItems": false\n         }\n-      },\n+      }, \n       "value": [\n-        "large 768:768",\n-        "preview 400:400",\n-        "mini 200:200",\n-        "thumb 128:128",\n-        "tile 64:64",\n-        "icon 32:32",\n+        "large 768:768", \n+        "preview 400:400", \n+        "mini 200:200", \n+        "thumb 128:128", \n+        "tile 64:64", \n+        "icon 32:32", \n         "listing 16:16"\n       ]\n-    },\n+    }, \n     {\n-      "name": "plone.allowed_types",\n+      "name": "plone.allowed_types", \n       "schema": {\n         "properties": {\n-          "additionalItems": true,\n+          "additionalItems": true, \n           "default": [\n-            "text/html",\n+            "text/html", \n             "text/x-web-textile"\n-          ],\n-          "description": "Select which formats are available for users as alternative to the default format. Note that if new formats are installed, they will be enabled for text fields by default unless explicitly turned off here or by the relevant installer.",\n+          ], \n+          "description": "Select which formats are available for users as alternative to the default format. Note that if new formats are installed, they will be enabled for text fields by default unless explicitly turned off here or by the relevant installer.", \n           "items": {\n             "choices": [\n               [\n-                "text/html",\n+                "text/html", \n                 "text/html"\n-              ],\n+              ], \n               [\n-                "text/plain",\n+                "text/plain", \n                 "text/plain"\n-              ],\n+              ], \n               [\n-                "text/plain-pre",\n+                "text/plain-pre", \n                 "text/plain-pre"\n-              ],\n+              ], \n               [\n-                "text/restructured",\n+                "text/restructured", \n                 "text/restructured"\n-              ],\n+              ], \n               [\n-                "text/structured",\n+                "text/structured", \n                 "text/structured"\n-              ],\n+              ], \n               [\n-                "text/x-python",\n+                "text/x-python", \n                 "text/x-python"\n-              ],\n+              ], \n               [\n-                "text/x-rst",\n+                "text/x-rst", \n                 "text/x-rst"\n-              ],\n+              ], \n               [\n-                "text/x-web-intelligent",\n+                "text/x-web-intelligent", \n                 "text/x-web-intelligent"\n-              ],\n+              ], \n               [\n-                "text/x-web-markdown",\n+                "text/x-web-markdown", \n                 "text/x-web-markdown"\n-              ],\n+              ], \n               [\n-                "text/x-web-textile",\n+                "text/x-web-textile", \n                 "text/x-web-textile"\n               ]\n-            ],\n-            "description": "",\n+            ], \n+            "description": "", \n             "enum": [\n-              "text/html",\n-              "text/plain",\n-              "text/plain-pre",\n-              "text/restructured",\n-              "text/structured",\n-              "text/x-python",\n-              "text/x-rst",\n-              "text/x-web-intelligent",\n-              "text/x-web-markdown",\n+              "text/html", \n+              "text/plain", \n+              "text/plain-pre", \n+              "text/restructured", \n+              "text/structured", \n+              "text/x-python", \n+              "text/x-rst", \n+              "text/x-web-intelligent", \n+              "text/x-web-markdown", \n               "text/x-web-textile"\n-            ],\n+            ], \n             "enumNames": [\n-              "text/html",\n-              "text/plain",\n-              "text/plain-pre",\n-              "text/restructured",\n-              "text/structured",\n-              "text/x-python",\n-              "text/x-rst",\n-              "text/x-web-intelligent",\n-              "text/x-web-markdown",\n+              "text/html", \n+              "text/plain", \n+              "text/plain-pre", \n+              "text/restructured", \n+              "text/structured", \n+              "text/x-python", \n+              "text/x-rst", \n+              "text/x-web-intelligent", \n+              "text/x-web-markdown", \n               "text/x-web-textile"\n-            ],\n-            "title": "",\n+            ], \n+            "title": "", \n             "type": "string"\n-          },\n-          "title": "Alternative formats",\n-          "type": "array",\n+          }, \n+          "title": "Alternative formats", \n+          "type": "array", \n           "uniqueItems": true\n         }\n-      },\n+      }, \n       "value": [\n-        "text/html",\n+        "text/html", \n         "text/x-web-textile"\n       ]\n-    },\n+    }, \n     {\n-      "name": "plone.always_show_selector",\n+      "name": "plone.always_show_selector", \n       "schema": {\n         "properties": {\n-          "default": false,\n-          "description": "",\n-          "title": "Always show language selector",\n+          "default": false, \n+          "description": "", \n+          "title": "Always show language selector", \n           "type": "boolean"\n         }\n-      },\n+      }, \n       "value": false\n-    },\n+    }, \n     {\n-      "name": "plone.app.discussion.interfaces.IDiscussionSettings.anonymous_comments",\n+      "name": "plone.app.discussion.interfaces.IDiscussionSettings.anonymous_comments", \n       "schema": {\n         "properties": {\n-          "default": false,\n-          "description": "If selected, anonymous users are able to post comments without logging in. It is highly recommended to use a captcha solution to prevent spam if this setting is enabled.",\n-          "title": "Enable anonymous comments",\n+          "default": false, \n+          "description": "If selected, anonymous users are able to post comments without logging in. It is highly recommended to use a captcha solution to prevent spam if this setting is enabled.", \n+          "title": "Enable anonymous comments", \n           "type": "boolean"\n         }\n-      },\n+      }, \n       "value": false\n-    },\n+    }, \n     {\n-      "name": "plone.app.discussion.interfaces.IDiscussionSettings.anonymous_email_enabled",\n+      "name": "plone.app.discussion.interfaces.IDiscussionSettings.anonymous_email_enabled", \n       "schema": {\n         "properties": {\n-          "default": false,\n-          "description": "If selected, anonymous user will have to give their email.",\n-          "title": "Enable anonymous email field",\n+          "default": false, \n+          "description": "If selected, anonymous user will have to give their email.", \n+          "title": "Enable anonymous email field", \n           "type": "boolean"\n         }\n-      },\n+      }, \n       "value": false\n-    },\n+    }, \n     {\n-      "name": "plone.app.discussion.interfaces.IDiscussionSettings.captcha",\n+      "name": "plone.app.discussion.interfaces.IDiscussionSettings.captcha", \n       "schema": {\n         "properties": {\n           "choices": [\n             [\n-              "disabled",\n+              "disabled", \n               "Disabled"\n             ]\n-          ],\n-          "default": "disabled",\n-          "description": "Use this setting to enable or disable Captcha validation for comments. Install plone.formwidget.captcha, plone.formwidget.recaptcha, collective.akismet, or collective.z3cform.norobots if there are no options available.",\n+          ], \n+          "default": "disabled", \n+          "description": "Use this setting to enable or disable Captcha validation for comments. Install plone.formwidget.captcha, plone.formwidget.recaptcha, collective.akismet, or collective.z3cform.norobots if there are no options available.", \n           "enum": [\n             "disabled"\n-          ],\n+          ], \n           "enumNames": [\n             "Disabled"\n-          ],\n-          "title": "Captcha",\n+          ], \n+          "title": "Captcha", \n           "type": "string"\n         }\n-      },\n+      }, \n       "value": "disabled"\n-    },\n+    }, \n     {\n-      "name": "plone.app.discussion.interfaces.IDiscussionSettings.delete_own_comment_enabled",\n+      "name": "plone.app.discussion.interfaces.IDiscussionSettings.delete_own_comment_enabled", \n       "schema": {\n         "properties": {\n-          "default": false,\n-          "description": "If selected, supports deleting of own comments for users with the \\"Delete own comments\\" permission.",\n-          "title": "Enable deleting own comments",\n+          "default": false, \n+          "description": "If selected, supports deleting of own comments for users with the \\"Delete own comments\\" permission.", \n+          "title": "Enable deleting own comments", \n           "type": "boolean"\n         }\n-      },\n+      }, \n       "value": false\n     }\n-  ],\n-  "items_total": 1673\n+  ], \n+  "items_total": 1547\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/registry_update.resp b/src/plone/restapi/tests/http-examples/registry_update.resp\nindex 460c2259..0074ded3 100644\n--- a/src/plone/restapi/tests/http-examples/registry_update.resp\n+++ b/src/plone/restapi/tests/http-examples/registry_update.resp\n@@ -1,3 +1,2 @@\n HTTP/1.1 204 No Content\n-Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/roles.resp b/src/plone/restapi/tests/http-examples/roles.resp\nindex 67f3f15f..c75a122b 100644\n--- a/src/plone/restapi/tests/http-examples/roles.resp\n+++ b/src/plone/restapi/tests/http-examples/roles.resp\n@@ -3,45 +3,45 @@ Content-Type: application/json\n \n [\n   {\n-    "@id": "http://localhost:55001/plone/@roles/Reader",\n-    "@type": "role",\n-    "id": "Reader",\n-    "title": "Reader"\n-  },\n+    "@id": "http://localhost:55001/plone/@roles/Contributor", \n+    "@type": "role", \n+    "id": "Contributor", \n+    "title": "Contributor"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@roles/Editor",\n-    "@type": "role",\n-    "id": "Editor",\n+    "@id": "http://localhost:55001/plone/@roles/Editor", \n+    "@type": "role", \n+    "id": "Editor", \n     "title": "Editor"\n-  },\n-  {\n-    "@id": "http://localhost:55001/plone/@roles/Contributor",\n-    "@type": "role",\n-    "id": "Contributor",\n-    "title": "Contributor"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@roles/Member",\n-    "@type": "role",\n-    "id": "Member",\n+    "@id": "http://localhost:55001/plone/@roles/Member", \n+    "@type": "role", \n+    "id": "Member", \n     "title": "Member"\n-  },\n+  }, \n+  {\n+    "@id": "http://localhost:55001/plone/@roles/Reader", \n+    "@type": "role", \n+    "id": "Reader", \n+    "title": "Reader"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@roles/Reviewer",\n-    "@type": "role",\n-    "id": "Reviewer",\n+    "@id": "http://localhost:55001/plone/@roles/Reviewer", \n+    "@type": "role", \n+    "id": "Reviewer", \n     "title": "Reviewer"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@roles/Site Administrator",\n-    "@type": "role",\n-    "id": "Site Administrator",\n+    "@id": "http://localhost:55001/plone/@roles/Site Administrator", \n+    "@type": "role", \n+    "id": "Site Administrator", \n     "title": "Site Administrator"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@roles/Manager",\n-    "@type": "role",\n-    "id": "Manager",\n+    "@id": "http://localhost:55001/plone/@roles/Manager", \n+    "@type": "role", \n+    "id": "Manager", \n     "title": "Manager"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/search.resp b/src/plone/restapi/tests/http-examples/search.resp\nindex ff2c43c0..fbc626a2 100644\n--- a/src/plone/restapi/tests/http-examples/search.resp\n+++ b/src/plone/restapi/tests/http-examples/search.resp\n@@ -2,15 +2,15 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/@search",\n+  "@id": "http://localhost:55001/plone/@search", \n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone/front-page",\n-      "@type": "Document",\n-      "description": "Congratulations! You have successfully installed Plone.",\n-      "review_state": "private",\n+      "@id": "http://localhost:55001/plone/front-page", \n+      "@type": "Document", \n+      "description": "Congratulations! You have successfully installed Plone.", \n+      "review_state": "private", \n       "title": "Welcome to Plone"\n     }\n-  ],\n+  ], \n   "items_total": 1\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/sharing_folder_get.resp b/src/plone/restapi/tests/http-examples/sharing_folder_get.resp\nindex 08518349..9df40be7 100644\n--- a/src/plone/restapi/tests/http-examples/sharing_folder_get.resp\n+++ b/src/plone/restapi/tests/http-examples/sharing_folder_get.resp\n@@ -4,36 +4,36 @@ Content-Type: application/json\n {\n   "available_roles": [\n     {\n-      "id": "Contributor",\n+      "id": "Contributor", \n       "title": "Can add"\n-    },\n+    }, \n     {\n-      "id": "Editor",\n+      "id": "Editor", \n       "title": "Can edit"\n-    },\n+    }, \n     {\n-      "id": "Reader",\n+      "id": "Reader", \n       "title": "Can view"\n-    },\n+    }, \n     {\n-      "id": "Reviewer",\n+      "id": "Reviewer", \n       "title": "Can review"\n     }\n-  ],\n+  ], \n   "entries": [\n     {\n-      "disabled": false,\n-      "id": "AuthenticatedUsers",\n-      "login": null,\n+      "disabled": false, \n+      "id": "AuthenticatedUsers", \n+      "login": null, \n       "roles": {\n-        "Contributor": false,\n-        "Editor": false,\n-        "Reader": false,\n+        "Contributor": false, \n+        "Editor": false, \n+        "Reader": false, \n         "Reviewer": false\n-      },\n-      "title": "Logged-in users",\n+      }, \n+      "title": "Logged-in users", \n       "type": "group"\n     }\n-  ],\n+  ], \n   "inherit": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/sharing_folder_post.resp b/src/plone/restapi/tests/http-examples/sharing_folder_post.resp\nindex 460c2259..0074ded3 100644\n--- a/src/plone/restapi/tests/http-examples/sharing_folder_post.resp\n+++ b/src/plone/restapi/tests/http-examples/sharing_folder_post.resp\n@@ -1,3 +1,2 @@\n HTTP/1.1 204 No Content\n-Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/sharing_search.resp b/src/plone/restapi/tests/http-examples/sharing_search.resp\nindex 5a5c2786..c489ff69 100644\n--- a/src/plone/restapi/tests/http-examples/sharing_search.resp\n+++ b/src/plone/restapi/tests/http-examples/sharing_search.resp\n@@ -4,72 +4,72 @@ Content-Type: application/json\n {\n   "available_roles": [\n     {\n-      "id": "Contributor",\n+      "id": "Contributor", \n       "title": "Can add"\n-    },\n+    }, \n     {\n-      "id": "Editor",\n+      "id": "Editor", \n       "title": "Can edit"\n-    },\n+    }, \n     {\n-      "id": "Reader",\n+      "id": "Reader", \n       "title": "Can view"\n-    },\n+    }, \n     {\n-      "id": "Reviewer",\n+      "id": "Reviewer", \n       "title": "Can review"\n     }\n-  ],\n+  ], \n   "entries": [\n     {\n-      "id": "Administrators",\n-      "login": null,\n+      "id": "Administrators", \n+      "login": null, \n       "roles": {\n-        "Contributor": false,\n-        "Editor": false,\n-        "Reader": false,\n+        "Contributor": false, \n+        "Editor": false, \n+        "Reader": false, \n         "Reviewer": false\n-      },\n-      "title": "Administrators",\n+      }, \n+      "title": "Administrators", \n       "type": "group"\n-    },\n+    }, \n     {\n-      "disabled": false,\n-      "id": "AuthenticatedUsers",\n-      "login": null,\n+      "disabled": false, \n+      "id": "AuthenticatedUsers", \n+      "login": null, \n       "roles": {\n-        "Contributor": false,\n-        "Editor": false,\n-        "Reader": false,\n+        "Contributor": false, \n+        "Editor": false, \n+        "Reader": false, \n         "Reviewer": false\n-      },\n-      "title": "Logged-in users",\n+      }, \n+      "title": "Logged-in users", \n       "type": "group"\n-    },\n+    }, \n     {\n-      "id": "Site Administrators",\n-      "login": null,\n+      "id": "Site Administrators", \n+      "login": null, \n       "roles": {\n-        "Contributor": false,\n-        "Editor": false,\n-        "Reader": false,\n+        "Contributor": false, \n+        "Editor": false, \n+        "Reader": false, \n         "Reviewer": false\n-      },\n-      "title": "Site Administrators",\n+      }, \n+      "title": "Site Administrators", \n       "type": "group"\n-    },\n+    }, \n     {\n-      "disabled": true,\n-      "id": "admin",\n+      "disabled": true, \n+      "id": "admin", \n       "roles": {\n-        "Contributor": "global",\n-        "Editor": "acquired",\n-        "Reader": false,\n+        "Contributor": "global", \n+        "Editor": "acquired", \n+        "Reader": false, \n         "Reviewer": false\n-      },\n-      "title": "admin",\n+      }, \n+      "title": "admin", \n       "type": "user"\n     }\n-  ],\n+  ], \n   "inherit": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/siteroot.resp b/src/plone/restapi/tests/http-examples/siteroot.resp\nindex 488718b0..0b2f0231 100644\n--- a/src/plone/restapi/tests/http-examples/siteroot.resp\n+++ b/src/plone/restapi/tests/http-examples/siteroot.resp\n@@ -5,28 +5,28 @@ Content-Type: application/json\n   "@components": {\n     "actions": {\n       "@id": "http://localhost:55001/plone/@actions"\n-    },\n+    }, \n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/@breadcrumbs"\n-    },\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/@navigation"\n     }\n-  },\n-  "@id": "http://localhost:55001/plone",\n-  "@type": "Plone Site",\n-  "id": "plone",\n-  "is_folderish": true,\n+  }, \n+  "@id": "http://localhost:55001/plone", \n+  "@type": "Plone Site", \n+  "id": "plone", \n+  "is_folderish": true, \n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone/front-page",\n-      "@type": "Document",\n-      "description": "Congratulations! You have successfully installed Plone.",\n-      "review_state": "private",\n+      "@id": "http://localhost:55001/plone/front-page", \n+      "@type": "Document", \n+      "description": "Congratulations! You have successfully installed Plone.", \n+      "review_state": "private", \n       "title": "Welcome to Plone"\n     }\n-  ],\n-  "items_total": 1,\n-  "parent": {},\n+  ], \n+  "items_total": 1, \n+  "parent": {}, \n   "title": "Plone site"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_object_history.resp b/src/plone/restapi/tests/http-examples/translated_messages_object_history.resp\nindex 53a849ec..9b932398 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_object_history.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_object_history.resp\n@@ -3,34 +3,34 @@ Content-Type: application/json\n \n [\n   {\n-    "action": "Crear",\n+    "action": "Crear", \n     "actor": {\n-      "@id": "http://localhost:55001/plone/@users/test_user_1_",\n-      "fullname": "",\n-      "id": "test_user_1_",\n+      "@id": "http://localhost:55001/plone/@users/test_user_1_", \n+      "fullname": "", \n+      "id": "test_user_1_", \n       "username": "test-user"\n-    },\n-    "comments": "",\n-    "review_state": "private",\n-    "state_title": "Privado",\n-    "time": "2016-10-21T15:00:00",\n-    "transition_title": "Crear",\n+    }, \n+    "comments": "", \n+    "review_state": "private", \n+    "state_title": "Privado", \n+    "time": "2016-10-21T19:00:00", \n+    "transition_title": "Crear", \n     "type": "workflow"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/front-page/@history/0",\n-    "action": "Editado",\n+    "@id": "http://localhost:55001/plone/front-page/@history/0", \n+    "action": "Editado", \n     "actor": {\n-      "@id": "http://localhost:55001/plone/@users/test-user",\n-      "fullname": "test-user",\n-      "id": "test-user",\n+      "@id": "http://localhost:55001/plone/@users/test-user", \n+      "fullname": "test-user", \n+      "id": "test-user", \n       "username": null\n-    },\n-    "comments": null,\n-    "may_revert": true,\n-    "time": "2016-10-21T15:00:00",\n-    "transition_title": "Editado",\n-    "type": "versioning",\n+    }, \n+    "comments": null, \n+    "may_revert": true, \n+    "time": "2016-10-21T19:00:00", \n+    "transition_title": "Editado", \n+    "type": "versioning", \n     "version": 0\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp b/src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp\nindex 7fac7fe3..abc02d33 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp\n@@ -2,24 +2,24 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/front-page/@workflow",\n+  "@id": "http://localhost:55001/plone/front-page/@workflow", \n   "history": [\n     {\n-      "action": null,\n-      "actor": "test_user_1_",\n-      "comments": "",\n-      "review_state": "private",\n-      "time": "2016-10-21T19:00:00+00:00",\n+      "action": null, \n+      "actor": "test_user_1_", \n+      "comments": "", \n+      "review_state": "private", \n+      "time": "2016-10-21T19:00:00+00:00", \n       "title": "Privado"\n     }\n-  ],\n+  ], \n   "transitions": [\n     {\n-      "@id": "http://localhost:55001/plone/front-page/@workflow/publish",\n+      "@id": "http://localhost:55001/plone/front-page/@workflow/publish", \n       "title": "Publicar"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/front-page/@workflow/submit",\n+      "@id": "http://localhost:55001/plone/front-page/@workflow/submit", \n       "title": "Enviar para publicaci\\u00f3n"\n     }\n   ]\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_types.resp b/src/plone/restapi/tests/http-examples/translated_messages_types.resp\nindex f4ce1f47..0510b9af 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_types.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_types.resp\n@@ -3,48 +3,48 @@ Content-Type: application/json\n \n [\n   {\n-    "@id": "http://localhost:55001/plone/@types/File",\n-    "addable": true,\n+    "@id": "http://localhost:55001/plone/@types/File", \n+    "addable": true, \n     "title": "Archivo"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@types/Folder",\n-    "addable": true,\n+    "@id": "http://localhost:55001/plone/@types/Folder", \n+    "addable": true, \n     "title": "Carpeta"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@types/Collection",\n-    "addable": true,\n+    "@id": "http://localhost:55001/plone/@types/Collection", \n+    "addable": true, \n     "title": "Colecci\\u00f3n"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@types/DXTestDocument",\n-    "addable": true,\n+    "@id": "http://localhost:55001/plone/@types/DXTestDocument", \n+    "addable": true, \n     "title": "DX Test Document"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@types/Link",\n-    "addable": true,\n+    "@id": "http://localhost:55001/plone/@types/Link", \n+    "addable": true, \n     "title": "Enlace"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@types/Event",\n-    "addable": true,\n+    "@id": "http://localhost:55001/plone/@types/Event", \n+    "addable": true, \n     "title": "Evento"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@types/Image",\n-    "addable": true,\n+    "@id": "http://localhost:55001/plone/@types/Image", \n+    "addable": true, \n     "title": "Imagen"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@types/News Item",\n-    "addable": true,\n+    "@id": "http://localhost:55001/plone/@types/News Item", \n+    "addable": true, \n     "title": "Noticia"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@types/Document",\n-    "addable": true,\n+    "@id": "http://localhost:55001/plone/@types/Document", \n+    "addable": true, \n     "title": "P\\u00e1gina"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\nindex 7c629ff3..a6ce8d8c 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n@@ -5,222 +5,222 @@ Content-Type: application/json+schema\n   "fieldsets": [\n     {\n       "fields": [\n-        "title",\n+        "title", \n         "description"\n-      ],\n-      "id": "default",\n+      ], \n+      "id": "default", \n       "title": "Default"\n-    },\n+    }, \n     {\n       "fields": [\n-        "subjects",\n-        "language",\n+        "subjects", \n+        "language", \n         "relatedItems"\n-      ],\n-      "id": "categorization",\n+      ], \n+      "id": "categorization", \n       "title": "Categorizaci\\u00f3n"\n-    },\n+    }, \n     {\n       "fields": [\n-        "effective",\n+        "effective", \n         "expires"\n-      ],\n-      "id": "dates",\n+      ], \n+      "id": "dates", \n       "title": "Fechas"\n-    },\n+    }, \n     {\n       "fields": [\n-        "creators",\n-        "contributors",\n+        "creators", \n+        "contributors", \n         "rights"\n-      ],\n-      "id": "ownership",\n+      ], \n+      "id": "ownership", \n       "title": "Propiedad"\n-    },\n+    }, \n     {\n       "fields": [\n-        "allow_discussion",\n-        "exclude_from_nav",\n-        "id",\n+        "allow_discussion", \n+        "exclude_from_nav", \n+        "id", \n         "nextPreviousEnabled"\n-      ],\n-      "id": "settings",\n+      ], \n+      "id": "settings", \n       "title": "Configuraci\\u00f3n"\n     }\n-  ],\n+  ], \n   "layouts": [\n-    "album_view",\n-    "event_listing",\n-    "full_view",\n-    "listing_view",\n-    "summary_view",\n+    "album_view", \n+    "event_listing", \n+    "full_view", \n+    "listing_view", \n+    "summary_view", \n     "tabular_view"\n-  ],\n+  ], \n   "properties": {\n     "allow_discussion": {\n       "choices": [\n         [\n-          "True",\n+          "True", \n           "S\\u00ed"\n-        ],\n+        ], \n         [\n-          "False",\n+          "False", \n           "No"\n         ]\n-      ],\n-      "description": "Permitir comentarios para este tipo de contenido",\n+      ], \n+      "description": "Permitir comentarios para este tipo de contenido", \n       "enum": [\n-        "True",\n+        "True", \n         "False"\n-      ],\n+      ], \n       "enumNames": [\n-        "S\\u00ed",\n+        "S\\u00ed", \n         "No"\n-      ],\n-      "title": "Permitir comentarios",\n+      ], \n+      "title": "Permitir comentarios", \n       "type": "string"\n-    },\n+    }, \n     "contributors": {\n-      "additionalItems": true,\n-      "description": "Los nombres de las personas que han contribuido a este elemento. Cada colaborador deber\\u00eda estar en una l\\u00ednea independiente.",\n+      "additionalItems": true, \n+      "description": "Los nombres de las personas que han contribuido a este elemento. Cada colaborador deber\\u00eda estar en una l\\u00ednea independiente.", \n       "items": {\n-        "description": "",\n-        "title": "",\n+        "description": "", \n+        "title": "", \n         "type": "string"\n-      },\n-      "title": "Colaboradores",\n-      "type": "array",\n-      "uniqueItems": true,\n+      }, \n+      "title": "Colaboradores", \n+      "type": "array", \n+      "uniqueItems": true, \n       "vocabulary": "plone.app.vocabularies.Users"\n-    },\n+    }, \n     "creators": {\n-      "additionalItems": true,\n-      "description": "Personas responsables de la creaci\\u00f3n del contenido de este elemento. Por favor, introduzca una lista de nombres de usuario, uno por l\\u00ednea. El autor principal deber\\u00eda ser el primero.",\n+      "additionalItems": true, \n+      "description": "Personas responsables de la creaci\\u00f3n del contenido de este elemento. Por favor, introduzca una lista de nombres de usuario, uno por l\\u00ednea. El autor principal deber\\u00eda ser el primero.", \n       "items": {\n-        "description": "",\n-        "title": "",\n+        "description": "", \n+        "title": "", \n         "type": "string"\n-      },\n-      "title": "Creadores",\n-      "type": "array",\n-      "uniqueItems": true,\n+      }, \n+      "title": "Creadores", \n+      "type": "array", \n+      "uniqueItems": true, \n       "vocabulary": "plone.app.vocabularies.Users"\n-    },\n+    }, \n     "description": {\n-      "description": "Usado en listados de elementos y resultados de b\\u00fasquedas.",\n-      "minLength": 0,\n-      "title": "Descripci\\u00f3n",\n-      "type": "string",\n+      "description": "Usado en listados de elementos y resultados de b\\u00fasquedas.", \n+      "minLength": 0, \n+      "title": "Descripci\\u00f3n", \n+      "type": "string", \n       "widget": "textarea"\n-    },\n+    }, \n     "effective": {\n-      "description": "La fecha en la que el documento ser\\u00e1 publicado. Si no selecciona ninguna fecha, el documento ser\\u00e1 publicado inmediatamente.",\n-      "title": "Fecha de Publicaci\\u00f3n",\n-      "type": "string",\n+      "description": "La fecha en la que el documento ser\\u00e1 publicado. Si no selecciona ninguna fecha, el documento ser\\u00e1 publicado inmediatamente.", \n+      "title": "Fecha de Publicaci\\u00f3n", \n+      "type": "string", \n       "widget": "datetime"\n-    },\n+    }, \n     "exclude_from_nav": {\n-      "default": false,\n-      "description": "Si est\\u00e1 marcado, este elemento no aparecer\\u00e1 en el \\u00e1rbol de navegaci\\u00f3n",\n-      "title": "Excluir de la navegaci\\u00f3n",\n+      "default": false, \n+      "description": "Si est\\u00e1 marcado, este elemento no aparecer\\u00e1 en el \\u00e1rbol de navegaci\\u00f3n", \n+      "title": "Excluir de la navegaci\\u00f3n", \n       "type": "boolean"\n-    },\n+    }, \n     "expires": {\n-      "description": "La fecha en la que expira el documento. Esto har\\u00e1 autom\\u00e1ticamente el documento invisible a otros a una fecha dada. Si no elije ninguna fecha, nunca expirar\\u00e1.",\n-      "title": "Fecha de Terminaci\\u00f3n",\n-      "type": "string",\n+      "description": "La fecha en la que expira el documento. Esto har\\u00e1 autom\\u00e1ticamente el documento invisible a otros a una fecha dada. Si no elije ninguna fecha, nunca expirar\\u00e1.", \n+      "title": "Fecha de Terminaci\\u00f3n", \n+      "type": "string", \n       "widget": "datetime"\n-    },\n+    }, \n     "id": {\n-      "description": "Este nombre se mostrar\\u00e1 en la URL.",\n-      "title": "Nombre corto",\n+      "description": "Este nombre se mostrar\\u00e1 en la URL.", \n+      "title": "Nombre corto", \n       "type": "string"\n-    },\n+    }, \n     "language": {\n       "choices": [\n         [\n-          "de",\n+          "de", \n           "Deutsch"\n-        ],\n+        ], \n         [\n-          "en",\n+          "en", \n           "English"\n-        ],\n+        ], \n         [\n-          "es",\n+          "es", \n           "Espa\\u00f1ol"\n-        ],\n+        ], \n         [\n-          "fr",\n+          "fr", \n           "Fran\\u00e7ais"\n         ]\n-      ],\n-      "default": "en",\n-      "description": "",\n+      ], \n+      "default": "en", \n+      "description": "", \n       "enum": [\n-        "de",\n-        "en",\n-        "es",\n+        "de", \n+        "en", \n+        "es", \n         "fr"\n-      ],\n+      ], \n       "enumNames": [\n-        "Deutsch",\n-        "English",\n-        "Espa\\u00f1ol",\n+        "Deutsch", \n+        "English", \n+        "Espa\\u00f1ol", \n         "Fran\\u00e7ais"\n-      ],\n-      "title": "Idioma",\n+      ], \n+      "title": "Idioma", \n       "type": "string"\n-    },\n+    }, \n     "nextPreviousEnabled": {\n-      "default": false,\n-      "description": "Esto habilita el widget siguiente/pr\\u00f3ximo en los elementos contenidos en esta carpeta.",\n-      "title": "Habilitar la navegaci\\u00f3n siguiente/anterior",\n+      "default": false, \n+      "description": "Esto habilita el widget siguiente/pr\\u00f3ximo en los elementos contenidos en esta carpeta.", \n+      "title": "Habilitar la navegaci\\u00f3n siguiente/anterior", \n       "type": "boolean"\n-    },\n+    }, \n     "relatedItems": {\n-      "additionalItems": true,\n-      "default": [],\n-      "description": "",\n+      "additionalItems": true, \n+      "default": [], \n+      "description": "", \n       "items": {\n-        "description": "",\n-        "title": "Related",\n+        "description": "", \n+        "title": "Related", \n         "type": "string"\n-      },\n+      }, \n       "pattern_options": {\n         "recentlyUsed": true\n-      },\n-      "title": "Contenido relacionado",\n-      "type": "array",\n-      "uniqueItems": true,\n+      }, \n+      "title": "Contenido relacionado", \n+      "type": "array", \n+      "uniqueItems": true, \n       "vocabulary": "plone.app.vocabularies.Catalog"\n-    },\n+    }, \n     "rights": {\n-      "description": "Declaraci\\u00f3n de copyright o informaci\\u00f3n de otros derechos sobre este elemento.",\n-      "minLength": 0,\n-      "title": "Derechos de Autor",\n-      "type": "string",\n+      "description": "Declaraci\\u00f3n de copyright o informaci\\u00f3n de otros derechos sobre este elemento.", \n+      "minLength": 0, \n+      "title": "Derechos de Autor", \n+      "type": "string", \n       "widget": "textarea"\n-    },\n+    }, \n     "subjects": {\n-      "choices": [],\n-      "description": "Las etiquetas suelen utilizarse para la organizaci\\u00f3n a medida del contenido.",\n-      "enum": [],\n-      "enumNames": [],\n-      "title": "Etiquetas",\n-      "type": "string",\n+      "choices": [], \n+      "description": "Las etiquetas suelen utilizarse para la organizaci\\u00f3n a medida del contenido.", \n+      "enum": [], \n+      "enumNames": [], \n+      "title": "Etiquetas", \n+      "type": "string", \n       "vocabulary": "plone.app.vocabularies.Keywords"\n-    },\n+    }, \n     "title": {\n-      "description": "",\n-      "title": "T\\u00edtulo",\n+      "description": "", \n+      "title": "T\\u00edtulo", \n       "type": "string"\n     }\n-  },\n+  }, \n   "required": [\n-    "title",\n+    "title", \n     "nextPreviousEnabled"\n-  ],\n-  "title": "Carpeta",\n+  ], \n+  "title": "Carpeta", \n   "type": "object"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/translations_delete.resp b/src/plone/restapi/tests/http-examples/translations_delete.resp\nindex 460c2259..0074ded3 100644\n--- a/src/plone/restapi/tests/http-examples/translations_delete.resp\n+++ b/src/plone/restapi/tests/http-examples/translations_delete.resp\n@@ -1,3 +1,2 @@\n HTTP/1.1 204 No Content\n-Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/translations_get.resp b/src/plone/restapi/tests/http-examples/translations_get.resp\nindex a7a24aaa..b6b78eaf 100644\n--- a/src/plone/restapi/tests/http-examples/translations_get.resp\n+++ b/src/plone/restapi/tests/http-examples/translations_get.resp\n@@ -2,10 +2,10 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/en/test-document/@translations",\n+  "@id": "http://localhost:55001/plone/en/test-document/@translations", \n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone/es/test-document",\n+      "@id": "http://localhost:55001/plone/es/test-document", \n       "language": "es"\n     }\n   ]\ndiff --git a/src/plone/restapi/tests/http-examples/translations_post.resp b/src/plone/restapi/tests/http-examples/translations_post.resp\nindex b9774105..b0d80491 100644\n--- a/src/plone/restapi/tests/http-examples/translations_post.resp\n+++ b/src/plone/restapi/tests/http-examples/translations_post.resp\n@@ -1,5 +1,5 @@\n HTTP/1.1 201 Created\n-Location: http://localhost:55001/plone/en/test-document\n Content-Type: application/json\n+Location: http://localhost:55001/plone/en/test-document\n \n {}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/tusreplace_patch.req b/src/plone/restapi/tests/http-examples/tusreplace_patch.req\nindex 62bac258..6230eb5a 100644\n--- a/src/plone/restapi/tests/http-examples/tusreplace_patch.req\n+++ b/src/plone/restapi/tests/http-examples/tusreplace_patch.req\n@@ -1,7 +1,8 @@\n-abcdefghPATCH /plone/myfile/@tus-upload/4e465958b24a46ec8657e6f3be720991 HTTP/1.1\n+PATCH /plone/myfile/@tus-upload/4e465958b24a46ec8657e6f3be720991 HTTP/1.1\n Accept: application/json\n Authorization: Basic YWRtaW46c2VjcmV0\n Tus-Resumable: 1.0.0\n Upload-Offset: 0\n Content-Type: application/offset+octet-stream\n \n+abcdefgh\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/tusreplace_patch.resp b/src/plone/restapi/tests/http-examples/tusreplace_patch.resp\nindex 4b1bb83f..faf25c3f 100644\n--- a/src/plone/restapi/tests/http-examples/tusreplace_patch.resp\n+++ b/src/plone/restapi/tests/http-examples/tusreplace_patch.resp\n@@ -1,47 +1,5 @@\n-HTTP/1.1 500 Internal Server Error\n-Content-Type: application/json\n+HTTP/1.1 204 No Content\n+Upload-Offset: 8\n+Location: http://localhost:55001/plone/myfile\n+Tus-Resumable: 1.0.0\n \n-{\n-  "message": "(<InterfaceClass plone.namedfile.interfaces.IStorage>, \'_io.BufferedReader\')",\n-  "traceback": [\n-    "File \\"/Users/davisagli/Plone/py3/src/Zope/src/ZPublisher/WSGIPublisher.py\\", line 128, in transaction_pubevents",\n-    "    yield",\n-    "",\n-    "  File \\"/Users/davisagli/Plone/py3/src/Zope/src/ZPublisher/WSGIPublisher.py\\", line 270, in publish_module",\n-    "    response = _publish(request, new_mod_info)",\n-    "",\n-    "  File \\"/Users/davisagli/Plone/py3/src/Zope/src/ZPublisher/WSGIPublisher.py\\", line 210, in publish",\n-    "    bind=1)",\n-    "",\n-    "  File \\"/Users/davisagli/Plone/py3/src/Zope/src/ZPublisher/mapply.py\\", line 85, in mapply",\n-    "    return debug(object, args, context)",\n-    "",\n-    "  File \\"/Users/davisagli/Plone/py3/src/Zope/src/ZPublisher/WSGIPublisher.py\\", line 57, in call_object",\n-    "    return obj(*args)",\n-    "",\n-    "  File \\"/Users/davisagli/Plone/py3/src/plone.restapi/src/plone/restapi/services/content/tus.py\\", line 63, in __call__",\n-    "    return self.render()",\n-    "",\n-    "  File \\"/Users/davisagli/Plone/py3/src/plone.restapi/src/plone/restapi/services/__init__.py\\", line 19, in render",\n-    "    content = self.reply()",\n-    "",\n-    "  File \\"/Users/davisagli/Plone/py3/src/plone.restapi/src/plone/restapi/services/content/tus.py\\", line 261, in reply",\n-    "    deserializer(data={fieldname: tus_upload})",\n-    "",\n-    "  File \\"/Users/davisagli/Plone/py3/src/plone.restapi/src/plone/restapi/deserializer/dxcontent.py\\", line 88, in __call__",\n-    "    value = deserializer(data[name])",\n-    "",\n-    "  File \\"/Users/davisagli/Plone/py3/src/plone.restapi/src/plone/restapi/deserializer/dxfields.py\\", line 238, in __call__",\n-    "    data=data, contentType=content_type, filename=filename)",\n-    "",\n-    "  File \\"/Users/davisagli/Plone/py3/src/plone.namedfile/plone/namedfile/file.py\\", line 331, in __init__",\n-    "    self._setData(data)",\n-    "",\n-    "  File \\"/Users/davisagli/Plone/py3/src/plone.namedfile/plone/namedfile/file.py\\", line 349, in _setData",\n-    "    storable = getUtility(IStorage, name=dottedName)",\n-    "",\n-    "  File \\"/Users/davisagli/.buildout/eggs/zope.component-4.4.1-py3.6.egg/zope/component/_api.py\\", line 169, in getUtility",\n-    "    raise ComponentLookupError(interface, name)"\n-  ],\n-  "type": "ComponentLookupError"\n-}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/tusreplace_post.resp b/src/plone/restapi/tests/http-examples/tusreplace_post.resp\nindex 63899237..088f3130 100644\n--- a/src/plone/restapi/tests/http-examples/tusreplace_post.resp\n+++ b/src/plone/restapi/tests/http-examples/tusreplace_post.resp\n@@ -1,4 +1,4 @@\n HTTP/1.1 201 Created\n-Location: http://localhost:55001/plone/myfile/@tus-upload/4e465958b24a46ec8657e6f3be720991\n Tus-Resumable: 1.0.0\n+Location: http://localhost:55001/plone/myfile/@tus-upload/4e465958b24a46ec8657e6f3be720991\n \ndiff --git a/src/plone/restapi/tests/http-examples/tusupload_head.resp b/src/plone/restapi/tests/http-examples/tusupload_head.resp\nindex 7b5b91df..3401c5bb 100644\n--- a/src/plone/restapi/tests/http-examples/tusupload_head.resp\n+++ b/src/plone/restapi/tests/http-examples/tusupload_head.resp\n@@ -1,5 +1,5 @@\n HTTP/1.1 200 OK\n-Upload-Length: 8\n Upload-Offset: 3\n+Upload-Length: 8\n Tus-Resumable: 1.0.0\n \ndiff --git a/src/plone/restapi/tests/http-examples/tusupload_options.resp b/src/plone/restapi/tests/http-examples/tusupload_options.resp\nindex 73e5d301..9ae1445d 100644\n--- a/src/plone/restapi/tests/http-examples/tusupload_options.resp\n+++ b/src/plone/restapi/tests/http-examples/tusupload_options.resp\n@@ -1,5 +1,5 @@\n HTTP/1.1 204 No Content\n-Tus-Resumable: 1.0.0\n Tus-Version: 1.0.0\n Tus-Extension: creation,expiration\n+Tus-Resumable: 1.0.0\n \ndiff --git a/src/plone/restapi/tests/http-examples/tusupload_patch.req b/src/plone/restapi/tests/http-examples/tusupload_patch.req\nindex 5bec57cd..d355a0e1 100644\n--- a/src/plone/restapi/tests/http-examples/tusupload_patch.req\n+++ b/src/plone/restapi/tests/http-examples/tusupload_patch.req\n@@ -1,7 +1,8 @@\n-abcPATCH /plone/folder/@tus-upload/032803b64ad746b3ab46d9223ea3d90f HTTP/1.1\n+PATCH /plone/folder/@tus-upload/032803b64ad746b3ab46d9223ea3d90f HTTP/1.1\n Accept: application/json\n Authorization: Basic YWRtaW46c2VjcmV0\n Tus-Resumable: 1.0.0\n Upload-Offset: 0\n Content-Type: application/offset+octet-stream\n \n+abc\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/tusupload_patch.resp b/src/plone/restapi/tests/http-examples/tusupload_patch.resp\nindex e9284266..7d3d9474 100644\n--- a/src/plone/restapi/tests/http-examples/tusupload_patch.resp\n+++ b/src/plone/restapi/tests/http-examples/tusupload_patch.resp\n@@ -1,4 +1,4 @@\n HTTP/1.1 204 No Content\n-Tus-Resumable: 1.0.0\n Upload-Offset: 3\n+Tus-Resumable: 1.0.0\n \ndiff --git a/src/plone/restapi/tests/http-examples/tusupload_patch_finalized.req b/src/plone/restapi/tests/http-examples/tusupload_patch_finalized.req\nindex 553fbf40..2682de17 100644\n--- a/src/plone/restapi/tests/http-examples/tusupload_patch_finalized.req\n+++ b/src/plone/restapi/tests/http-examples/tusupload_patch_finalized.req\n@@ -1,7 +1,8 @@\n-defghPATCH /plone/folder/@tus-upload/032803b64ad746b3ab46d9223ea3d90f HTTP/1.1\n+PATCH /plone/folder/@tus-upload/032803b64ad746b3ab46d9223ea3d90f HTTP/1.1\n Accept: application/json\n Authorization: Basic YWRtaW46c2VjcmV0\n Tus-Resumable: 1.0.0\n Upload-Offset: 3\n Content-Type: application/offset+octet-stream\n \n+defgh\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/tusupload_patch_finalized.resp b/src/plone/restapi/tests/http-examples/tusupload_patch_finalized.resp\nindex 3ba1a088..4928d905 100644\n--- a/src/plone/restapi/tests/http-examples/tusupload_patch_finalized.resp\n+++ b/src/plone/restapi/tests/http-examples/tusupload_patch_finalized.resp\n@@ -1,5 +1,5 @@\n HTTP/1.1 204 No Content\n+Upload-Offset: 8\n Location: http://localhost:55001/plone/folder/document-2016-10-21\n Tus-Resumable: 1.0.0\n-Upload-Offset: 8\n \ndiff --git a/src/plone/restapi/tests/http-examples/tusupload_post.resp b/src/plone/restapi/tests/http-examples/tusupload_post.resp\nindex 1f01bd93..ed4ee518 100644\n--- a/src/plone/restapi/tests/http-examples/tusupload_post.resp\n+++ b/src/plone/restapi/tests/http-examples/tusupload_post.resp\n@@ -1,4 +1,4 @@\n HTTP/1.1 201 Created\n-Location: http://localhost:55001/plone/folder/@tus-upload/032803b64ad746b3ab46d9223ea3d90f\n Tus-Resumable: 1.0.0\n+Location: http://localhost:55001/plone/folder/@tus-upload/032803b64ad746b3ab46d9223ea3d90f\n \ndiff --git a/src/plone/restapi/tests/http-examples/types.resp b/src/plone/restapi/tests/http-examples/types.resp\nindex 814b97b1..459c9c66 100644\n--- a/src/plone/restapi/tests/http-examples/types.resp\n+++ b/src/plone/restapi/tests/http-examples/types.resp\n@@ -3,48 +3,48 @@ Content-Type: application/json\n \n [\n   {\n-    "@id": "http://localhost:55001/plone/@types/Collection",\n-    "addable": true,\n+    "@id": "http://localhost:55001/plone/@types/Collection", \n+    "addable": true, \n     "title": "Collection"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@types/DXTestDocument",\n-    "addable": true,\n+    "@id": "http://localhost:55001/plone/@types/DXTestDocument", \n+    "addable": true, \n     "title": "DX Test Document"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@types/Event",\n-    "addable": true,\n+    "@id": "http://localhost:55001/plone/@types/Event", \n+    "addable": true, \n     "title": "Event"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@types/File",\n-    "addable": true,\n+    "@id": "http://localhost:55001/plone/@types/File", \n+    "addable": true, \n     "title": "File"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@types/Folder",\n-    "addable": true,\n+    "@id": "http://localhost:55001/plone/@types/Folder", \n+    "addable": true, \n     "title": "Folder"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@types/Image",\n-    "addable": true,\n+    "@id": "http://localhost:55001/plone/@types/Image", \n+    "addable": true, \n     "title": "Image"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@types/Link",\n-    "addable": true,\n+    "@id": "http://localhost:55001/plone/@types/Link", \n+    "addable": true, \n     "title": "Link"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@types/News Item",\n-    "addable": true,\n+    "@id": "http://localhost:55001/plone/@types/News Item", \n+    "addable": true, \n     "title": "News Item"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@types/Document",\n-    "addable": true,\n+    "@id": "http://localhost:55001/plone/@types/Document", \n+    "addable": true, \n     "title": "Page"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/types_document.resp b/src/plone/restapi/tests/http-examples/types_document.resp\nindex 42f44d7f..c16c6fb4 100644\n--- a/src/plone/restapi/tests/http-examples/types_document.resp\n+++ b/src/plone/restapi/tests/http-examples/types_document.resp\n@@ -5,235 +5,235 @@ Content-Type: application/json+schema\n   "fieldsets": [\n     {\n       "fields": [\n-        "title",\n-        "description",\n-        "text",\n+        "title", \n+        "description", \n+        "text", \n         "changeNote"\n-      ],\n-      "id": "default",\n+      ], \n+      "id": "default", \n       "title": "Default"\n-    },\n+    }, \n     {\n       "fields": [\n-        "allow_discussion",\n-        "exclude_from_nav",\n-        "id",\n-        "versioning_enabled",\n+        "allow_discussion", \n+        "exclude_from_nav", \n+        "id", \n+        "versioning_enabled", \n         "table_of_contents"\n-      ],\n-      "id": "settings",\n+      ], \n+      "id": "settings", \n       "title": "Settings"\n-    },\n+    }, \n     {\n       "fields": [\n-        "subjects",\n-        "language",\n+        "subjects", \n+        "language", \n         "relatedItems"\n-      ],\n-      "id": "categorization",\n+      ], \n+      "id": "categorization", \n       "title": "Categorization"\n-    },\n+    }, \n     {\n       "fields": [\n-        "effective",\n+        "effective", \n         "expires"\n-      ],\n-      "id": "dates",\n+      ], \n+      "id": "dates", \n       "title": "Dates"\n-    },\n+    }, \n     {\n       "fields": [\n-        "creators",\n-        "contributors",\n+        "creators", \n+        "contributors", \n         "rights"\n-      ],\n-      "id": "ownership",\n+      ], \n+      "id": "ownership", \n       "title": "Ownership"\n     }\n-  ],\n+  ], \n   "layouts": [\n     "document_view"\n-  ],\n+  ], \n   "properties": {\n     "allow_discussion": {\n       "choices": [\n         [\n-          "True",\n+          "True", \n           "Yes"\n-        ],\n+        ], \n         [\n-          "False",\n+          "False", \n           "No"\n         ]\n-      ],\n-      "description": "Allow discussion for this content object.",\n+      ], \n+      "description": "Allow discussion for this content object.", \n       "enum": [\n-        "True",\n+        "True", \n         "False"\n-      ],\n+      ], \n       "enumNames": [\n-        "Yes",\n+        "Yes", \n         "No"\n-      ],\n-      "title": "Allow discussion",\n+      ], \n+      "title": "Allow discussion", \n       "type": "string"\n-    },\n+    }, \n     "changeNote": {\n-      "description": "Enter a comment that describes the changes you made.",\n-      "title": "Change Note",\n+      "description": "Enter a comment that describes the changes you made.", \n+      "title": "Change Note", \n       "type": "string"\n-    },\n+    }, \n     "contributors": {\n-      "additionalItems": true,\n-      "description": "The names of people that have contributed to this item. Each contributor should be on a separate line.",\n+      "additionalItems": true, \n+      "description": "The names of people that have contributed to this item. Each contributor should be on a separate line.", \n       "items": {\n-        "description": "",\n-        "title": "",\n+        "description": "", \n+        "title": "", \n         "type": "string"\n-      },\n-      "title": "Contributors",\n-      "type": "array",\n-      "uniqueItems": true,\n+      }, \n+      "title": "Contributors", \n+      "type": "array", \n+      "uniqueItems": true, \n       "vocabulary": "plone.app.vocabularies.Users"\n-    },\n+    }, \n     "creators": {\n-      "additionalItems": true,\n-      "description": "Persons responsible for creating the content of this item. Please enter a list of user names, one per line. The principal creator should come first.",\n+      "additionalItems": true, \n+      "description": "Persons responsible for creating the content of this item. Please enter a list of user names, one per line. The principal creator should come first.", \n       "items": {\n-        "description": "",\n-        "title": "",\n+        "description": "", \n+        "title": "", \n         "type": "string"\n-      },\n-      "title": "Creators",\n-      "type": "array",\n-      "uniqueItems": true,\n+      }, \n+      "title": "Creators", \n+      "type": "array", \n+      "uniqueItems": true, \n       "vocabulary": "plone.app.vocabularies.Users"\n-    },\n+    }, \n     "description": {\n-      "description": "Used in item listings and search results.",\n-      "minLength": 0,\n-      "title": "Summary",\n-      "type": "string",\n+      "description": "Used in item listings and search results.", \n+      "minLength": 0, \n+      "title": "Summary", \n+      "type": "string", \n       "widget": "textarea"\n-    },\n+    }, \n     "effective": {\n-      "description": "If this date is in the future, the content will not show up in listings and searches until this date.",\n-      "title": "Publishing Date",\n-      "type": "string",\n+      "description": "If this date is in the future, the content will not show up in listings and searches until this date.", \n+      "title": "Publishing Date", \n+      "type": "string", \n       "widget": "datetime"\n-    },\n+    }, \n     "exclude_from_nav": {\n-      "default": false,\n-      "description": "If selected, this item will not appear in the navigation tree",\n-      "title": "Exclude from navigation",\n+      "default": false, \n+      "description": "If selected, this item will not appear in the navigation tree", \n+      "title": "Exclude from navigation", \n       "type": "boolean"\n-    },\n+    }, \n     "expires": {\n-      "description": "When this date is reached, the content will no longer be visible in listings and searches.",\n-      "title": "Expiration Date",\n-      "type": "string",\n+      "description": "When this date is reached, the content will no longer be visible in listings and searches.", \n+      "title": "Expiration Date", \n+      "type": "string", \n       "widget": "datetime"\n-    },\n+    }, \n     "id": {\n-      "description": "This name will be displayed in the URL.",\n-      "title": "Short name",\n+      "description": "This name will be displayed in the URL.", \n+      "title": "Short name", \n       "type": "string"\n-    },\n+    }, \n     "language": {\n       "choices": [\n         [\n-          "de",\n+          "de", \n           "Deutsch"\n-        ],\n+        ], \n         [\n-          "en",\n+          "en", \n           "English"\n-        ],\n+        ], \n         [\n-          "es",\n+          "es", \n           "Espa\\u00f1ol"\n-        ],\n+        ], \n         [\n-          "fr",\n+          "fr", \n           "Fran\\u00e7ais"\n         ]\n-      ],\n-      "default": "en",\n-      "description": "",\n+      ], \n+      "default": "en", \n+      "description": "", \n       "enum": [\n-        "de",\n-        "en",\n-        "es",\n+        "de", \n+        "en", \n+        "es", \n         "fr"\n-      ],\n+      ], \n       "enumNames": [\n-        "Deutsch",\n-        "English",\n-        "Espa\\u00f1ol",\n+        "Deutsch", \n+        "English", \n+        "Espa\\u00f1ol", \n         "Fran\\u00e7ais"\n-      ],\n-      "title": "Language",\n+      ], \n+      "title": "Language", \n       "type": "string"\n-    },\n+    }, \n     "relatedItems": {\n-      "additionalItems": true,\n-      "default": [],\n-      "description": "",\n+      "additionalItems": true, \n+      "default": [], \n+      "description": "", \n       "items": {\n-        "description": "",\n-        "title": "Related",\n+        "description": "", \n+        "title": "Related", \n         "type": "string"\n-      },\n+      }, \n       "pattern_options": {\n         "recentlyUsed": true\n-      },\n-      "title": "Related Items",\n-      "type": "array",\n-      "uniqueItems": true,\n+      }, \n+      "title": "Related Items", \n+      "type": "array", \n+      "uniqueItems": true, \n       "vocabulary": "plone.app.vocabularies.Catalog"\n-    },\n+    }, \n     "rights": {\n-      "description": "Copyright statement or other rights information on this item.",\n-      "minLength": 0,\n-      "title": "Rights",\n-      "type": "string",\n+      "description": "Copyright statement or other rights information on this item.", \n+      "minLength": 0, \n+      "title": "Rights", \n+      "type": "string", \n       "widget": "textarea"\n-    },\n+    }, \n     "subjects": {\n-      "choices": [],\n-      "description": "Tags are commonly used for ad-hoc organization of content.",\n-      "enum": [],\n-      "enumNames": [],\n-      "title": "Tags",\n-      "type": "string",\n+      "choices": [], \n+      "description": "Tags are commonly used for ad-hoc organization of content.", \n+      "enum": [], \n+      "enumNames": [], \n+      "title": "Tags", \n+      "type": "string", \n       "vocabulary": "plone.app.vocabularies.Keywords"\n-    },\n+    }, \n     "table_of_contents": {\n-      "description": "If selected, this will show a table of contents at the top of the page.",\n-      "title": "Table of contents",\n+      "description": "If selected, this will show a table of contents at the top of the page.", \n+      "title": "Table of contents", \n       "type": "boolean"\n-    },\n+    }, \n     "text": {\n-      "description": "",\n-      "title": "Text",\n-      "type": "string",\n+      "description": "", \n+      "title": "Text", \n+      "type": "string", \n       "widget": "richtext"\n-    },\n+    }, \n     "title": {\n-      "description": "",\n-      "title": "Title",\n+      "description": "", \n+      "title": "Title", \n       "type": "string"\n-    },\n+    }, \n     "versioning_enabled": {\n-      "default": true,\n-      "description": "Enable/disable versioning for this document.",\n-      "title": "Versioning enabled",\n+      "default": true, \n+      "description": "Enable/disable versioning for this document.", \n+      "title": "Versioning enabled", \n       "type": "boolean"\n     }\n-  },\n+  }, \n   "required": [\n     "title"\n-  ],\n-  "title": "Page",\n+  ], \n+  "title": "Page", \n   "type": "object"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/unlock.resp b/src/plone/restapi/tests/http-examples/unlock.resp\nindex 4622ce69..52852385 100644\n--- a/src/plone/restapi/tests/http-examples/unlock.resp\n+++ b/src/plone/restapi/tests/http-examples/unlock.resp\n@@ -2,6 +2,6 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "locked": false,\n+  "locked": false, \n   "stealable": true\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users.resp b/src/plone/restapi/tests/http-examples/users.resp\nindex c99b4114..e69cb939 100644\n--- a/src/plone/restapi/tests/http-examples/users.resp\n+++ b/src/plone/restapi/tests/http-examples/users.resp\n@@ -13,9 +13,9 @@ Content-Type: application/json\n     "portrait": null, \n     "roles": [\n       "Manager"\n-    ],\n+    ], \n     "username": "admin"\n-  },\n+  }, \n   {\n     "@id": "http://localhost:55001/plone/@users/test_user_1_", \n     "description": "This is a test user", \n@@ -27,7 +27,7 @@ Content-Type: application/json\n     "portrait": null, \n     "roles": [\n       "Manager"\n-    ],\n+    ], \n     "username": "test-user"\n   }\n-]\n+]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_add.resp b/src/plone/restapi/tests/http-examples/users_add.resp\nindex 3394b2c8..d4fdd52f 100644\n--- a/src/plone/restapi/tests/http-examples/users_add.resp\n+++ b/src/plone/restapi/tests/http-examples/users_add.resp\n@@ -13,6 +13,6 @@ Location: http://localhost:55001/plone/@users/noamchomsky\n   "portrait": null, \n   "roles": [\n     "Member"\n-  ],\n+  ], \n   "username": "noamchomsky"\n-}\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_authorized_get.resp b/src/plone/restapi/tests/http-examples/users_authorized_get.resp\nindex 36a9f006..80a85227 100644\n--- a/src/plone/restapi/tests/http-examples/users_authorized_get.resp\n+++ b/src/plone/restapi/tests/http-examples/users_authorized_get.resp\n@@ -12,6 +12,6 @@ Content-Type: application/json\n   "portrait": null, \n   "roles": [\n     "Member"\n-  ],\n+  ], \n   "username": "noam"\n-}\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_created.resp b/src/plone/restapi/tests/http-examples/users_created.resp\nindex 207e24ef..beaeff44 100644\n--- a/src/plone/restapi/tests/http-examples/users_created.resp\n+++ b/src/plone/restapi/tests/http-examples/users_created.resp\n@@ -1,6 +1,6 @@\n HTTP/1.1 201 Created\n-Location: http://localhost:55001/plone/@users/noamchomsky\n Content-Type: application/json\n+Location: http://localhost:55001/plone/@users/noamchomsky\n \n {\n   "@id": "http://localhost:55001/plone/@users/noamchomsky", \n@@ -13,6 +13,6 @@ Content-Type: application/json\n   "portrait": null, \n   "roles": [\n     "Contributor"\n-  ],\n+  ], \n   "username": "noamchomsky"\n-}\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_delete.resp b/src/plone/restapi/tests/http-examples/users_delete.resp\nindex 460c2259..0074ded3 100644\n--- a/src/plone/restapi/tests/http-examples/users_delete.resp\n+++ b/src/plone/restapi/tests/http-examples/users_delete.resp\n@@ -1,3 +1,2 @@\n HTTP/1.1 204 No Content\n-Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp b/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\nindex 8f33a3e1..54591ca6 100644\n--- a/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n+++ b/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n@@ -13,7 +13,7 @@ Content-Type: application/json\n     "portrait": null, \n     "roles": [\n       "Member"\n-    ],\n+    ], \n     "username": "noam"\n   }\n-]\n+]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_get.resp b/src/plone/restapi/tests/http-examples/users_get.resp\nindex 36a9f006..80a85227 100644\n--- a/src/plone/restapi/tests/http-examples/users_get.resp\n+++ b/src/plone/restapi/tests/http-examples/users_get.resp\n@@ -12,6 +12,6 @@ Content-Type: application/json\n   "portrait": null, \n   "roles": [\n     "Member"\n-  ],\n+  ], \n   "username": "noam"\n-}\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_update.resp b/src/plone/restapi/tests/http-examples/users_update.resp\nindex 460c2259..0074ded3 100644\n--- a/src/plone/restapi/tests/http-examples/users_update.resp\n+++ b/src/plone/restapi/tests/http-examples/users_update.resp\n@@ -1,3 +1,2 @@\n HTTP/1.1 204 No Content\n-Content-Type: application/json\n \ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies.resp b/src/plone/restapi/tests/http-examples/vocabularies.resp\nindex c04b0b9b..0229bb0b 100644\n--- a/src/plone/restapi/tests/http-examples/vocabularies.resp\n+++ b/src/plone/restapi/tests/http-examples/vocabularies.resp\n@@ -3,195 +3,207 @@ Content-Type: application/json\n \n [\n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.content.ValidAddableTypes",\n-    "title": "plone.app.content.ValidAddableTypes"\n-  },\n-  {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.contentrules.events",\n-    "title": "plone.contentrules.events"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes", \n+    "title": "plone.app.vocabularies.ReallyUserFriendlyTypes"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AvailableContentLanguages",\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AvailableContentLanguages", \n     "title": "plone.app.vocabularies.AvailableContentLanguages"\n-  },\n-  {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SupportedContentLanguages",\n-    "title": "plone.app.vocabularies.SupportedContentLanguages"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Roles",\n-    "title": "plone.app.vocabularies.Roles"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.schemaeditor.VocabulariesVocabulary", \n+    "title": "plone.schemaeditor.VocabulariesVocabulary"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Groups",\n-    "title": "plone.app.vocabularies.Groups"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.users.group_ids", \n+    "title": "plone.app.users.group_ids"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Permissions",\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Permissions", \n     "title": "plone.app.vocabularies.Permissions"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AllowedContentTypes",\n-    "title": "plone.app.vocabularies.AllowedContentTypes"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.contentrules.events", \n+    "title": "plone.contentrules.events"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AllowableContentTypes",\n-    "title": "plone.app.vocabularies.AllowableContentTypes"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.CaptchaVocabulary", \n+    "title": "plone.app.discussion.vocabularies.CaptchaVocabulary"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.PortalTypes",\n-    "title": "plone.app.vocabularies.PortalTypes"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Actions", \n+    "title": "plone.app.vocabularies.Actions"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n-    "title": "plone.app.vocabularies.ReallyUserFriendlyTypes"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ImagesScales", \n+    "title": "plone.app.vocabularies.ImagesScales"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.UserFriendlyTypes",\n-    "title": "plone.app.vocabularies.UserFriendlyTypes"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.PortalActionCategories", \n+    "title": "plone.app.vocabularies.PortalActionCategories"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Skins",\n-    "title": "plone.app.vocabularies.Skins"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.multilingual.vocabularies.AllAvailableLanguageVocabulary", \n+    "title": "plone.app.multilingual.vocabularies.AllAvailableLanguageVocabulary"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Workflows",\n-    "title": "plone.app.vocabularies.Workflows"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.multilingual.RootCatalog", \n+    "title": "plone.app.multilingual.RootCatalog"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.WorkflowStates",\n-    "title": "plone.app.vocabularies.WorkflowStates"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.content.ValidAddableTypes", \n+    "title": "plone.app.content.ValidAddableTypes"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.WorkflowTransitions",\n-    "title": "plone.app.vocabularies.WorkflowTransitions"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.CommonTimezones", \n+    "title": "plone.app.vocabularies.CommonTimezones"\n+  }, \n+  {\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.restapi.testing.context_vocabulary", \n+    "title": "plone.restapi.testing.context_vocabulary"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AvailableEditors",\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AvailableEditors", \n     "title": "plone.app.vocabularies.AvailableEditors"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords",\n-    "title": "plone.app.vocabularies.Keywords"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Roles", \n+    "title": "plone.app.vocabularies.Roles"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SyndicationFeedTypes",\n-    "title": "plone.app.vocabularies.SyndicationFeedTypes"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SupportedContentLanguages", \n+    "title": "plone.app.vocabularies.SupportedContentLanguages"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SyndicatableFeedItems",\n-    "title": "plone.app.vocabularies.SyndicatableFeedItems"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords", \n+    "title": "plone.app.vocabularies.Keywords"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users",\n-    "title": "plone.app.vocabularies.Users"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Groups", \n+    "title": "plone.app.vocabularies.Groups"\n+  }, \n+  {\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AvailableTimezones", \n+    "title": "plone.app.vocabularies.AvailableTimezones"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog",\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog", \n     "title": "plone.app.vocabularies.Catalog"\n-  },\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Actions",\n-    "title": "plone.app.vocabularies.Actions"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.TextTransformVocabulary", \n+    "title": "plone.app.discussion.vocabularies.TextTransformVocabulary"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.PortalActionCategories",\n-    "title": "plone.app.vocabularies.PortalActionCategories"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Month", \n+    "title": "plone.app.vocabularies.Month"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Timezones",\n-    "title": "plone.app.vocabularies.Timezones"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Weekdays", \n+    "title": "plone.app.vocabularies.Weekdays"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.CommonTimezones",\n-    "title": "plone.app.vocabularies.CommonTimezones"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.WorkflowTransitions", \n+    "title": "plone.app.vocabularies.WorkflowTransitions"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AvailableTimezones",\n-    "title": "plone.app.vocabularies.AvailableTimezones"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.WeekdaysShort", \n+    "title": "plone.app.vocabularies.WeekdaysShort"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Weekdays",\n-    "title": "plone.app.vocabularies.Weekdays"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.contenttypes.metadatafields", \n+    "title": "plone.app.contenttypes.metadatafields"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.WeekdaysAbbr",\n-    "title": "plone.app.vocabularies.WeekdaysAbbr"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/Interfaces", \n+    "title": "Interfaces"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.WeekdaysShort",\n-    "title": "plone.app.vocabularies.WeekdaysShort"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.WorkflowStates", \n+    "title": "plone.app.vocabularies.WorkflowStates"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Month",\n-    "title": "plone.app.vocabularies.Month"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/Fields", \n+    "title": "Fields"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.MonthAbbr",\n-    "title": "plone.app.vocabularies.MonthAbbr"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.contenttypes.migration.atctypes", \n+    "title": "plone.app.contenttypes.migration.atctypes"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ImagesScales",\n-    "title": "plone.app.vocabularies.ImagesScales"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.multilingual.vocabularies.AllContentLanguageVocabulary", \n+    "title": "plone.app.multilingual.vocabularies.AllContentLanguageVocabulary"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/Behaviors",\n-    "title": "Behaviors"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SyndicatableFeedItems", \n+    "title": "plone.app.vocabularies.SyndicatableFeedItems"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/Fields",\n-    "title": "Fields"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AllowedContentTypes", \n+    "title": "plone.app.vocabularies.AllowedContentTypes"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.schemaeditor.VocabulariesVocabulary",\n-    "title": "plone.schemaeditor.VocabulariesVocabulary"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.users.user_registration_fields", \n+    "title": "plone.app.users.user_registration_fields"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.formwidget.relations.cmfcontentsearch",\n-    "title": "plone.formwidget.relations.cmfcontentsearch"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.WeekdaysAbbr", \n+    "title": "plone.app.vocabularies.WeekdaysAbbr"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.event.SynchronizationStrategies",\n-    "title": "plone.app.event.SynchronizationStrategies"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.UserFriendlyTypes", \n+    "title": "plone.app.vocabularies.UserFriendlyTypes"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.contenttypes.metadatafields",\n-    "title": "plone.app.contenttypes.metadatafields"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.PortalTypes", \n+    "title": "plone.app.vocabularies.PortalTypes"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/Interfaces",\n-    "title": "Interfaces"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/Behaviors", \n+    "title": "Behaviors"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.CaptchaVocabulary",\n-    "title": "plone.app.discussion.vocabularies.CaptchaVocabulary"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SyndicationFeedTypes", \n+    "title": "plone.app.vocabularies.SyndicationFeedTypes"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.TextTransformVocabulary",\n-    "title": "plone.app.discussion.vocabularies.TextTransformVocabulary"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Timezones", \n+    "title": "plone.app.vocabularies.Timezones"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.users.user_registration_fields",\n-    "title": "plone.app.users.user_registration_fields"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.formwidget.relations.cmfcontentsearch", \n+    "title": "plone.formwidget.relations.cmfcontentsearch"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.users.group_ids",\n-    "title": "plone.app.users.group_ids"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Skins", \n+    "title": "plone.app.vocabularies.Skins"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.multilingual.vocabularies.AllContentLanguageVocabulary",\n-    "title": "plone.app.multilingual.vocabularies.AllContentLanguageVocabulary"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AllowableContentTypes", \n+    "title": "plone.app.vocabularies.AllowableContentTypes"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.multilingual.vocabularies.AllAvailableLanguageVocabulary",\n-    "title": "plone.app.multilingual.vocabularies.AllAvailableLanguageVocabulary"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.contenttypes.migration.extendedtypes", \n+    "title": "plone.app.contenttypes.migration.extendedtypes"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.multilingual.RootCatalog",\n-    "title": "plone.app.multilingual.RootCatalog"\n-  },\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.MonthAbbr", \n+    "title": "plone.app.vocabularies.MonthAbbr"\n+  }, \n   {\n-    "@id": "http://localhost:55001/plone/@vocabularies/plone.restapi.testing.context_vocabulary",\n-    "title": "plone.restapi.testing.context_vocabulary"\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Workflows", \n+    "title": "plone.app.vocabularies.Workflows"\n+  }, \n+  {\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.contenttypes.migration.changed_base_classes", \n+    "title": "plone.app.contenttypes.migration.changed_base_classes"\n+  }, \n+  {\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users", \n+    "title": "plone.app.vocabularies.Users"\n+  }, \n+  {\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.event.SynchronizationStrategies", \n+    "title": "plone.app.event.SynchronizationStrategies"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get.resp b/src/plone/restapi/tests/http-examples/vocabularies_get.resp\nindex c9ad99cc..06ecfc17 100644\n--- a/src/plone/restapi/tests/http-examples/vocabularies_get.resp\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get.resp\n@@ -2,66 +2,66 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes", \n   "terms": [\n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Collection",\n-      "title": "Collection",\n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Collection", \n+      "title": "Collection", \n       "token": "Collection"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Discussion Item",\n-      "title": "Comment",\n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Discussion Item", \n+      "title": "Comment", \n       "token": "Discussion Item"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/DXTestDocument",\n-      "title": "DX Test Document",\n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/DXTestDocument", \n+      "title": "DX Test Document", \n       "token": "DXTestDocument"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Event",\n-      "title": "Event",\n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Event", \n+      "title": "Event", \n       "token": "Event"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/File",\n-      "title": "File",\n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/File", \n+      "title": "File", \n       "token": "File"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Folder",\n-      "title": "Folder",\n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Folder", \n+      "title": "Folder", \n       "token": "Folder"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Image",\n-      "title": "Image",\n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Image", \n+      "title": "Image", \n       "token": "Image"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Link",\n-      "title": "Link",\n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Link", \n+      "title": "Link", \n       "token": "Link"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/News Item",\n-      "title": "News Item",\n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/News Item", \n+      "title": "News Item", \n       "token": "News Item"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Document",\n-      "title": "Page",\n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Document", \n+      "title": "Page", \n       "token": "Document"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/ATTestDocument",\n-      "title": "Test Document",\n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/ATTestDocument", \n+      "title": "Test Document", \n       "token": "ATTestDocument"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/ATTestFolder",\n-      "title": "Test Folder",\n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/ATTestFolder", \n+      "title": "Test Folder", \n       "token": "ATTestFolder"\n     }\n   ]\ndiff --git a/src/plone/restapi/tests/http-examples/workflow_get.resp b/src/plone/restapi/tests/http-examples/workflow_get.resp\nindex beee904b..6c365e9e 100644\n--- a/src/plone/restapi/tests/http-examples/workflow_get.resp\n+++ b/src/plone/restapi/tests/http-examples/workflow_get.resp\n@@ -2,24 +2,24 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/front-page/@workflow",\n+  "@id": "http://localhost:55001/plone/front-page/@workflow", \n   "history": [\n     {\n-      "action": null,\n-      "actor": "test_user_1_",\n-      "comments": "",\n-      "review_state": "private",\n-      "time": "2016-10-21T19:00:00+00:00",\n+      "action": null, \n+      "actor": "test_user_1_", \n+      "comments": "", \n+      "review_state": "private", \n+      "time": "2016-10-21T19:00:00+00:00", \n       "title": "Private"\n     }\n-  ],\n+  ], \n   "transitions": [\n     {\n-      "@id": "http://localhost:55001/plone/front-page/@workflow/publish",\n+      "@id": "http://localhost:55001/plone/front-page/@workflow/publish", \n       "title": "Publish"\n-    },\n+    }, \n     {\n-      "@id": "http://localhost:55001/plone/front-page/@workflow/submit",\n+      "@id": "http://localhost:55001/plone/front-page/@workflow/submit", \n       "title": "Submit for publication"\n     }\n   ]\ndiff --git a/src/plone/restapi/tests/http-examples/workflow_post.resp b/src/plone/restapi/tests/http-examples/workflow_post.resp\nindex af9efa1a..01375c56 100644\n--- a/src/plone/restapi/tests/http-examples/workflow_post.resp\n+++ b/src/plone/restapi/tests/http-examples/workflow_post.resp\n@@ -2,10 +2,10 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "action": "publish",\n-  "actor": "admin",\n-  "comments": "",\n-  "review_state": "published",\n-  "time": "2016-10-21T15:05:00+00:00",\n+  "action": "publish", \n+  "actor": "admin", \n+  "comments": "", \n+  "review_state": "published", \n+  "time": "2016-10-21T19:05:00+00:00", \n   "title": "Published with accent \\u00e9"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/workflow_post_with_body.resp b/src/plone/restapi/tests/http-examples/workflow_post_with_body.resp\nindex 3c2342ee..1f3582d7 100644\n--- a/src/plone/restapi/tests/http-examples/workflow_post_with_body.resp\n+++ b/src/plone/restapi/tests/http-examples/workflow_post_with_body.resp\n@@ -2,10 +2,10 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "action": "publish",\n-  "actor": "admin",\n-  "comments": "Publishing my folder...",\n-  "review_state": "published",\n-  "time": "2016-10-21T15:05:00+00:00",\n+  "action": "publish", \n+  "actor": "admin", \n+  "comments": "Publishing my folder...", \n+  "review_state": "published", \n+  "time": "2016-10-21T19:05:00+00:00", \n   "title": "Published with accent \\u00e9"\n }\n\\ No newline at end of file\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-10-02T09:04:41-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/aedc7f516c04c16ac28d09cb8e8b60dc7f0e6911

Fix remaining tests

Files changed:
M src/plone/restapi/tests/test_search.py
M src/plone/restapi/tests/test_tus.py
M src/plone/restapi/types/utils.py

b'diff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex da96552b..0302e1fa 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -17,6 +17,7 @@\n from Products.CMFCore.utils import getToolByName\n from zope.component import getUtility\n \n+import six\n import transaction\n import unittest\n \n@@ -363,6 +364,7 @@ def test_keyword_index_str_query_and(self):\n             result_paths(response.json())\n         )\n \n+    @unittest.skipIf(six.PY3, "Python 3 can\'t sort mixed types")\n     def test_keyword_index_int_query(self):\n         self.doc.test_list_field = [42, 23]\n         self.doc.reindexObject()\ndiff --git a/src/plone/restapi/tests/test_tus.py b/src/plone/restapi/tests/test_tus.py\nindex c1ae50ad..a8c34fd8 100644\n--- a/src/plone/restapi/tests/test_tus.py\n+++ b/src/plone/restapi/tests/test_tus.py\n@@ -28,7 +28,7 @@\n import transaction\n import unittest\n \n-UPLOAD_DATA = \'abcdefgh\'\n+UPLOAD_DATA = b\'abcdefgh\'\n UPLOAD_MIMETYPE = \'text/plain\'\n UPLOAD_FILENAME = \'test.txt\'\n UPLOAD_LENGTH = len(UPLOAD_DATA)\n@@ -36,6 +36,19 @@\n UPLOAD_PDF_MIMETYPE = \'application/pdf\'\n UPLOAD_PDF_FILENAME = \'file.pdf\'\n \n+def _base64_str(s):\n+    if not isinstance(s, bytes):\n+        s = s.encode(\'utf-8\')\n+    s = b64encode(s)\n+    if not isinstance(s, str):\n+        s = s.decode(\'utf-8\')\n+    return s\n+\n+def _prepare_metadata(filename, content_type):\n+    return \'filename {},content-type {}\'.format(\n+        _base64_str(filename),\n+        _base64_str(content_type),\n+    )\n \n class TestTUS(unittest.TestCase):\n \n@@ -109,9 +122,7 @@ def test_tus_post_initialization(self):\n         upload.cleanup()\n \n     def test_tus_post_initialization_with_metadata(self):\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME.encode(\'utf8\')).decode(\'utf8\'),\n-            b64encode(UPLOAD_MIMETYPE.encode(\'utf8\')).decode(\'utf8\'))\n+        metadata = _prepare_metadata(UPLOAD_FILENAME, UPLOAD_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -268,7 +279,7 @@ def test_tus_patch_non_primary_field(self):\n         self.assertEqual(1, len(self.folder.objectIds()))\n         id_ = self.folder.objectIds()[0]\n         self.assertEqual(\n-            \'abcdefghijkl\', self.folder[id_].test_namedblobfile_field.data)\n+            b\'abcdefghijkl\', self.folder[id_].test_namedblobfile_field.data)\n         tus.cleanup()\n \n     def test_patch_in_create_mode_without_add_permission_raises_401(self):\n@@ -302,9 +313,7 @@ def test_tus_can_upload_pdf_file(self):\n         pdf_file_path = os.path.join(os.path.dirname(__file__),\n                                      UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_PDF_FILENAME.encode(\'utf8\')),\n-            b64encode(UPLOAD_PDF_MIMETYPE.encode(\'utf8\')))\n+        metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -331,9 +340,7 @@ def test_tus_can_upload_pdf_file(self):\n \n     def test_tus_can_upload_text_file(self):\n         # initialize the upload with POST\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME.encode(\'utf8\')),\n-            b64encode(UPLOAD_MIMETYPE.encode(\'utf8\')))\n+        metadata = _prepare_metadata(UPLOAD_FILENAME, UPLOAD_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -363,9 +370,7 @@ def test_tus_can_replace_pdf_file(self):\n         pdf_file_path = os.path.join(os.path.dirname(__file__),\n                                      UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_PDF_FILENAME.encode(\'utf8\')),\n-            b64encode(UPLOAD_PDF_MIMETYPE.encode(\'utf8\')))\n+        metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n             \'{}/@tus-replace\'.format(self.file.absolute_url()),\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -604,9 +609,7 @@ def test_tus_can_upload_pdf_file(self):\n         pdf_file_path = os.path.join(os.path.dirname(__file__),\n                                      UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_PDF_FILENAME.encode(\'utf8\')),\n-            b64encode(UPLOAD_PDF_MIMETYPE.encode(\'utf8\')))\n+        metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n             headers={\'Tus-Resumable\': \'1.0.0\',\ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex d979f08d..44e3b703 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -18,6 +18,7 @@\n from plone.autoform.form import AutoExtensibleForm\n from plone.autoform.interfaces import WIDGETS_KEY\n from plone.dexterity.utils import getAdditionalSchemata\n+from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.types.interfaces import IJsonSchemaProvider\n from Products.CMFCore.utils import getToolByName\n from plone.supermodel.utils import mergedTaggedValueDict\n@@ -189,7 +190,7 @@ def get_jsonschema_for_fti(fti, context, request, excluded_fields=None):\n     return {\n         \'type\': \'object\',\n         \'title\': translate(fti.Title(), context=getRequest()),\n-        \'properties\': properties,\n+        \'properties\': json_compatible(properties),\n         \'required\': required,\n         \'fieldsets\': get_fieldset_infos(fieldsets),\n         \'layouts\': getattr(fti, \'view_methods\', []),\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-10-02T09:09:15-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/ff48344cf63334a869168cb30a7fb763db00fb8e

Fix test: normalize difference between Plone 5.2 and previous versions

Files changed:
M src/plone/restapi/tests/test_search.py

b"diff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex 0302e1fa..c6ffbbfa 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -226,6 +226,7 @@ def test_full_metadata_retrieval(self):\n         query = {'SearchableText': 'lorem', 'metadata_fields': '_all'}\n         response = self.api_session.get('/@search', params=query)\n \n+        first_item = response.json()['items'][0]\n         self.assertDictContainsSubset(\n             {u'@id': self.portal_url + u'/folder/doc',\n              u'Creator': u'test_user_1_',\n@@ -245,7 +246,6 @@ def test_full_metadata_retrieval(self):\n              u'exclude_from_nav': False,\n              u'expires': u'1999-01-01T00:00:00+00:00',\n              u'getId': u'doc',\n-             u'getObjSize': u'0 KB',\n              u'getPath': u'/plone/folder/doc',\n              u'getRemoteUrl': None,\n              u'getURL': self.portal_url + u'/folder/doc',\n@@ -262,7 +262,10 @@ def test_full_metadata_retrieval(self):\n              u'sync_uid': None,\n              u'title': u'Lorem Ipsum',\n              u'total_comments': 0},\n-            response.json()['items'][0])\n+            first_item)\n+        # This value changed in Plone 5.2\n+        # (Dexterity gained support for getObjSize)\n+        self.assertIn(first_item[u'getObjSize'], (u'0 KB', u'1 KB'))\n \n     def test_full_objects_retrieval(self):\n         query = {'SearchableText': 'lorem',\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-10-02T09:18:40-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/49e0137db171a1ee87e15cbd4f123f843dbcb472

Fix formatting

Files changed:
M src/plone/restapi/tests/test_tus.py

b"diff --git a/src/plone/restapi/tests/test_tus.py b/src/plone/restapi/tests/test_tus.py\nindex a8c34fd8..e65daf36 100644\n--- a/src/plone/restapi/tests/test_tus.py\n+++ b/src/plone/restapi/tests/test_tus.py\n@@ -36,6 +36,7 @@\n UPLOAD_PDF_MIMETYPE = 'application/pdf'\n UPLOAD_PDF_FILENAME = 'file.pdf'\n \n+\n def _base64_str(s):\n     if not isinstance(s, bytes):\n         s = s.encode('utf-8')\n@@ -44,12 +45,14 @@ def _base64_str(s):\n         s = s.decode('utf-8')\n     return s\n \n+\n def _prepare_metadata(filename, content_type):\n     return 'filename {},content-type {}'.format(\n         _base64_str(filename),\n         _base64_str(content_type),\n     )\n \n+\n class TestTUS(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-10-03T09:56:32+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.restapi/commit/3c368549ac264b0698acc79eb0de584cf82b52ea

gitignore mypy cache

Files changed:
M .gitignore

b'diff --git a/.gitignore b/.gitignore\nindex e79fd8c8..f86d13aa 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -34,3 +34,4 @@ pip-selfcheck.json\n /.idea\n /.vscode\n /.ipython\n+/.mypy_cache/\n\\ No newline at end of file\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-10-03T13:36:08+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.restapi/commit/0e27792058a2d12b760f81fa9ed31c4f0ce7f5a4

fix tests for local roles.

Files changed:
M src/plone/restapi/tests/test_content_local_roles.py

b"diff --git a/src/plone/restapi/tests/test_content_local_roles.py b/src/plone/restapi/tests/test_content_local_roles.py\nindex c6a437c4..f06d8daf 100644\n--- a/src/plone/restapi/tests/test_content_local_roles.py\n+++ b/src/plone/restapi/tests/test_content_local_roles.py\n@@ -16,6 +16,15 @@\n import unittest\n \n \n+def sorted_roles(roles):\n+    results = []\n+    for line in roles:\n+        line = list(line)\n+        line[1] = sorted(line[1])\n+        results.append(line)\n+    return results\n+\n+\n class TestFolderCreate(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n@@ -237,10 +246,9 @@ def test_set_local_roles_for_user(self):\n \n         self.assertEqual(response.status_code, 204)\n         self.assertEqual(\n-            pas.getLocalRolesForDisplay(self.portal.folder1),\n-            (('admin', ('Owner',), 'user', 'admin'),\n-             ('test-user', (u'Reviewer', u'Reader'),\n-              'user', u'test_user_1_'))\n+            sorted_roles(pas.getLocalRolesForDisplay(self.portal.folder1)),\n+            [['admin', ['Owner',], 'user', 'admin'],\n+             ['test-user', [u'Reader', u'Reviewer'], 'user', u'test_user_1_']]\n         )\n \n     def test_unset_local_roles_for_user(self):\n@@ -251,9 +259,9 @@ def test_unset_local_roles_for_user(self):\n \n         pas = getToolByName(self.portal, 'acl_users')\n         self.assertEqual(\n-            pas.getLocalRolesForDisplay(self.portal.folder1),\n-            (('admin', ('Owner',), 'user', 'admin'),\n-             ('test-user', ('Reviewer', 'Reader'), 'user', 'test_user_1_'))\n+            sorted_roles(pas.getLocalRolesForDisplay(self.portal.folder1)),\n+            [['admin', ['Owner',], 'user', 'admin'],\n+             ['test-user', ['Reviewer', 'Reader'], 'user', 'test_user_1_']]\n         )\n \n         response = requests.post(\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-10-03T13:48:14+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.restapi/commit/e3f5d65dd80932e65e841a84199e7660b8d248e9

Fix test because i'm an idiot that doesn't run them before pushing.

Files changed:
M src/plone/restapi/tests/test_content_local_roles.py

b"diff --git a/src/plone/restapi/tests/test_content_local_roles.py b/src/plone/restapi/tests/test_content_local_roles.py\nindex f06d8daf..f9bca662 100644\n--- a/src/plone/restapi/tests/test_content_local_roles.py\n+++ b/src/plone/restapi/tests/test_content_local_roles.py\n@@ -261,7 +261,7 @@ def test_unset_local_roles_for_user(self):\n         self.assertEqual(\n             sorted_roles(pas.getLocalRolesForDisplay(self.portal.folder1)),\n             [['admin', ['Owner',], 'user', 'admin'],\n-             ['test-user', ['Reviewer', 'Reader'], 'user', 'test_user_1_']]\n+             ['test-user', ['Reader', 'Reviewer'], 'user', 'test_user_1_']]\n         )\n \n         response = requests.post(\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-10-03T13:55:37+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.restapi/commit/a99b3b7d8959f6a50e7cad8d7a9d8d71210c37a5

flake8

Files changed:
M src/plone/restapi/tests/test_content_local_roles.py

b"diff --git a/src/plone/restapi/tests/test_content_local_roles.py b/src/plone/restapi/tests/test_content_local_roles.py\nindex f9bca662..e0cd27b6 100644\n--- a/src/plone/restapi/tests/test_content_local_roles.py\n+++ b/src/plone/restapi/tests/test_content_local_roles.py\n@@ -247,7 +247,7 @@ def test_set_local_roles_for_user(self):\n         self.assertEqual(response.status_code, 204)\n         self.assertEqual(\n             sorted_roles(pas.getLocalRolesForDisplay(self.portal.folder1)),\n-            [['admin', ['Owner',], 'user', 'admin'],\n+            [['admin', ['Owner', ], 'user', 'admin'],\n              ['test-user', [u'Reader', u'Reviewer'], 'user', u'test_user_1_']]\n         )\n \n@@ -260,7 +260,7 @@ def test_unset_local_roles_for_user(self):\n         pas = getToolByName(self.portal, 'acl_users')\n         self.assertEqual(\n             sorted_roles(pas.getLocalRolesForDisplay(self.portal.folder1)),\n-            [['admin', ['Owner',], 'user', 'admin'],\n+            [['admin', ['Owner', ], 'user', 'admin'],\n              ['test-user', ['Reader', 'Reviewer'], 'user', 'test_user_1_']]\n         )\n \n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-10-03T14:51:38+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.restapi/commit/48246acd4213c61026bf8f3871342460ebd480bb

Remove HAS_AT checks as the conditional ZCML is enough

Files changed:
M src/plone/restapi/deserializer/atcontent.py
M src/plone/restapi/deserializer/atfields.py
M src/plone/restapi/serializer/atcollection.py
M src/plone/restapi/serializer/atcontent.py
M src/plone/restapi/serializer/atfields.py
M src/plone/restapi/services/content/add.py

b'diff --git a/src/plone/restapi/deserializer/atcontent.py b/src/plone/restapi/deserializer/atcontent.py\nindex a3abf267..24c6de60 100644\n--- a/src/plone/restapi/deserializer/atcontent.py\n+++ b/src/plone/restapi/deserializer/atcontent.py\n@@ -1,175 +1,174 @@\n # -*- coding: utf-8 -*-\n-from plone.restapi import HAS_AT\n-\n-if HAS_AT:  # noqa: C901\n-    from Products.Archetypes.event import ObjectEditedEvent\n-    from Products.Archetypes.event import ObjectInitializedEvent\n-    from Products.Archetypes.interfaces import IBaseObject\n-    from Products.Archetypes.interfaces import IObjectPostValidation\n-    from Products.Archetypes.interfaces import IObjectPreValidation\n-    from plone.restapi.deserializer import json_body\n-    from plone.restapi.interfaces import IDeserializeFromJson\n-    from plone.restapi.interfaces import IFieldDeserializer\n-    from zExceptions import BadRequest\n-    from zope.component import adapter\n-    from zope.component import queryMultiAdapter\n-    from zope.component import subscribers\n-    from zope.event import notify\n-    from zope.interface import Interface\n-    from zope.interface import implementer\n-\n-    from .mixins import OrderingMixin\n-\n-    @implementer(IDeserializeFromJson)\n-    @adapter(IBaseObject, Interface)\n-    class DeserializeFromJson(OrderingMixin, object):\n-        """JSON deserializer for Archetypes content types\n-        """\n-\n-        def __init__(self, context, request):\n-            self.context = context\n-            self.request = request\n-\n-        def __call__(self, validate_all=False, data=None, create=False):\n-            if data is None:\n-                data = json_body(self.request)\n-\n-            obj = self.context\n-            modified = False\n-\n-            for field in obj.Schema().fields():\n-                if not field.writeable(obj):\n+from Products.Archetypes.event import ObjectEditedEvent\n+from Products.Archetypes.event import ObjectInitializedEvent\n+from Products.Archetypes.interfaces import IBaseObject\n+from Products.Archetypes.interfaces import IObjectPostValidation\n+from Products.Archetypes.interfaces import IObjectPreValidation\n+from plone.restapi.deserializer import json_body\n+from plone.restapi.interfaces import IDeserializeFromJson\n+from plone.restapi.interfaces import IFieldDeserializer\n+from zExceptions import BadRequest\n+from zope.component import adapter\n+from zope.component import queryMultiAdapter\n+from zope.component import subscribers\n+from zope.event import notify\n+from zope.interface import Interface\n+from zope.interface import implementer\n+\n+from .mixins import OrderingMixin\n+\n+@implementer(IDeserializeFromJson)\n+@adapter(IBaseObject, Interface)\n+class DeserializeFromJson(OrderingMixin, object):\n+    """JSON deserializer for Archetypes content types\n+    """\n+\n+    notifies_create = True\n+\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def __call__(self, validate_all=False, data=None, create=False):\n+        if data is None:\n+            data = json_body(self.request)\n+\n+        obj = self.context\n+        modified = False\n+\n+        for field in obj.Schema().fields():\n+            if not field.writeable(obj):\n+                continue\n+\n+            name = field.getName()\n+\n+            if name in data:\n+                deserializer = queryMultiAdapter(\n+                    (field, obj, self.request), IFieldDeserializer)\n+                if deserializer is None:\n                     continue\n-\n-                name = field.getName()\n-\n-                if name in data:\n-                    deserializer = queryMultiAdapter(\n-                        (field, obj, self.request), IFieldDeserializer)\n-                    if deserializer is None:\n-                        continue\n-                    value, kwargs = deserializer(data[name])\n-                    mutator = field.getMutator(obj)\n-                    mutator(value, **kwargs)\n-                    modified = True\n-\n-            if modified:\n-                errors = self.validate()\n-                if not validate_all:\n-                    errors = {f: e for f, e in errors.items() if f in data}\n-                if errors:\n-                    errors = [{\n-                        \'message\': e,\n-                        \'field\': f,\n-                        \'error\': \'ValidationError\'} for f, e in errors.items()]\n-                    raise BadRequest(errors)\n-\n-                if create:\n-                    if obj.checkCreationFlag():\n-                        obj.unmarkCreationFlag()\n-                    notify(ObjectInitializedEvent(obj))\n-                    obj.at_post_create_script()\n-                else:\n-                    obj.reindexObject()\n-                    notify(ObjectEditedEvent(obj))\n-                    obj.at_post_edit_script()\n-\n-            # We\'ll set the layout after the validation and and even if there\n-            # are no other changes.\n-            if \'layout\' in data:\n-                layout = data[\'layout\']\n-                self.context.setLayout(layout)\n-\n-            # OrderingMixin\n-            self.handle_ordering(data)\n-\n-            return obj\n-\n-        def validate(self):\n-            # Instead of calling P.Archetypes.BaseObject.validate() we have to\n-            # provide a custom validation implementation here because some\n-            # validators extract the field value from the request. However a\n-            # JSON API request does not contain any form values in the request.\n-            # Thus we fake a request that extracts form values from the object\n-            # on demand.\n-\n-            obj = self.context\n-            request = ValidationRequest(self.request, obj)\n-            errors = {}\n-\n-            obj.pre_validate(request, errors)\n-\n-            for pre_validator in subscribers((obj,), IObjectPreValidation):\n-                pre_errors = pre_validator(request)\n-                if pre_errors is not None:\n-                    for field_name, error_message in pre_errors.items():\n-                        if field_name in errors:\n-                            errors[field_name] += " %s" % error_message\n-                        else:\n-                            errors[field_name] = error_message\n-\n-            obj.Schema().validate(instance=obj, REQUEST=None,\n-                                  errors=errors, data=True, metadata=True)\n-\n-            obj.post_validate(request, errors)\n-\n-            for post_validator in subscribers((obj,), IObjectPostValidation):\n-                post_errors = post_validator(request)\n-                if post_errors is not None:\n-                    for field_name, error_message in post_errors.items():\n-                        if field_name in errors:\n-                            errors[field_name] += " %s" % error_message\n-                        else:\n-                            errors[field_name] = error_message\n-\n-            return errors\n-\n-    class ValidationRequest(dict):\n-        """A fake request for validation purposes.\n-        """\n-\n-        def __init__(self, request, context):\n-            self.request = request\n-            self.context = context\n-            self.form = ValidationRequestForm(request, context)\n-\n-        def __getitem__(self, key):\n-            if key in self.request:\n-                return self.request[key]\n-            return self.form[key]\n-\n-        def __contains__(self, key):\n-            return key in self.request or key in self.form\n-\n-        def get(self, key, default=None):\n-            try:\n-                return self[key]\n-            except KeyError:\n-                return default\n-\n-    class ValidationRequestForm(dict):\n-        """A request form dict that returns values from the content object.\n-        """\n-        def __init__(self, request, context):\n-            self.request = request\n-            self.context = context\n-\n-        def __getitem__(self, key):\n-            field = self.context.getField(key)\n-            if field is None:\n-                return self.request.form[key]\n-\n-            accessor = field.getEditAccessor(self.context)\n-            if accessor is None:\n-                accessor = field.getAccessor(self.context)\n-\n-            return accessor()\n-\n-        def __contains__(self, key):\n-            return key in self.context.Schema()\n-\n-        def get(self, key, default=None):\n-            try:\n-                return self[key]\n-            except KeyError:\n-                return default\n+                value, kwargs = deserializer(data[name])\n+                mutator = field.getMutator(obj)\n+                mutator(value, **kwargs)\n+                modified = True\n+\n+        if modified:\n+            errors = self.validate()\n+            if not validate_all:\n+                errors = {f: e for f, e in errors.items() if f in data}\n+            if errors:\n+                errors = [{\n+                    \'message\': e,\n+                    \'field\': f,\n+                    \'error\': \'ValidationError\'} for f, e in errors.items()]\n+                raise BadRequest(errors)\n+\n+            if create:\n+                if obj.checkCreationFlag():\n+                    obj.unmarkCreationFlag()\n+                notify(ObjectInitializedEvent(obj))\n+                obj.at_post_create_script()\n+            else:\n+                obj.reindexObject()\n+                notify(ObjectEditedEvent(obj))\n+                obj.at_post_edit_script()\n+\n+        # We\'ll set the layout after the validation and and even if there\n+        # are no other changes.\n+        if \'layout\' in data:\n+            layout = data[\'layout\']\n+            self.context.setLayout(layout)\n+\n+        # OrderingMixin\n+        self.handle_ordering(data)\n+\n+        return obj\n+\n+    def validate(self):\n+        # Instead of calling P.Archetypes.BaseObject.validate() we have to\n+        # provide a custom validation implementation here because some\n+        # validators extract the field value from the request. However a\n+        # JSON API request does not contain any form values in the request.\n+        # Thus we fake a request that extracts form values from the object\n+        # on demand.\n+\n+        obj = self.context\n+        request = ValidationRequest(self.request, obj)\n+        errors = {}\n+\n+        obj.pre_validate(request, errors)\n+\n+        for pre_validator in subscribers((obj,), IObjectPreValidation):\n+            pre_errors = pre_validator(request)\n+            if pre_errors is not None:\n+                for field_name, error_message in pre_errors.items():\n+                    if field_name in errors:\n+                        errors[field_name] += " %s" % error_message\n+                    else:\n+                        errors[field_name] = error_message\n+\n+        obj.Schema().validate(instance=obj, REQUEST=None,\n+                              errors=errors, data=True, metadata=True)\n+\n+        obj.post_validate(request, errors)\n+\n+        for post_validator in subscribers((obj,), IObjectPostValidation):\n+            post_errors = post_validator(request)\n+            if post_errors is not None:\n+                for field_name, error_message in post_errors.items():\n+                    if field_name in errors:\n+                        errors[field_name] += " %s" % error_message\n+                    else:\n+                        errors[field_name] = error_message\n+\n+        return errors\n+\n+class ValidationRequest(dict):\n+    """A fake request for validation purposes.\n+    """\n+\n+    def __init__(self, request, context):\n+        self.request = request\n+        self.context = context\n+        self.form = ValidationRequestForm(request, context)\n+\n+    def __getitem__(self, key):\n+        if key in self.request:\n+            return self.request[key]\n+        return self.form[key]\n+\n+    def __contains__(self, key):\n+        return key in self.request or key in self.form\n+\n+    def get(self, key, default=None):\n+        try:\n+            return self[key]\n+        except KeyError:\n+            return default\n+\n+class ValidationRequestForm(dict):\n+    """A request form dict that returns values from the content object.\n+    """\n+    def __init__(self, request, context):\n+        self.request = request\n+        self.context = context\n+\n+    def __getitem__(self, key):\n+        field = self.context.getField(key)\n+        if field is None:\n+            return self.request.form[key]\n+\n+        accessor = field.getEditAccessor(self.context)\n+        if accessor is None:\n+            accessor = field.getAccessor(self.context)\n+\n+        return accessor()\n+\n+    def __contains__(self, key):\n+        return key in self.context.Schema()\n+\n+    def get(self, key, default=None):\n+        try:\n+            return self[key]\n+        except KeyError:\n+            return default\ndiff --git a/src/plone/restapi/deserializer/atfields.py b/src/plone/restapi/deserializer/atfields.py\nindex 5f907ab8..8d9555ae 100644\n--- a/src/plone/restapi/deserializer/atfields.py\n+++ b/src/plone/restapi/deserializer/atfields.py\n@@ -1,77 +1,74 @@\n # -*- coding: utf-8 -*-\n-from plone.restapi import HAS_AT\n+from Products.Archetypes.interfaces import IBaseObject\n+from Products.Archetypes.interfaces.field import IField\n+from Products.Archetypes.interfaces.field import IFileField\n+from Products.Archetypes.interfaces.field import IReferenceField\n+from plone.app.blob.interfaces import IBlobField\n+from plone.restapi.interfaces import IFieldDeserializer\n+from plone.restapi.services.content.tus import TUSUpload\n+from zope.component import adapter\n+from zope.component import getMultiAdapter\n+from zope.interface import implementer\n+from zope.publisher.interfaces.browser import IBrowserRequest\n \n-if HAS_AT:\n-    from Products.Archetypes.interfaces import IBaseObject\n-    from Products.Archetypes.interfaces.field import IField\n-    from Products.Archetypes.interfaces.field import IFileField\n-    from Products.Archetypes.interfaces.field import IReferenceField\n-    from plone.app.blob.interfaces import IBlobField\n-    from plone.restapi.interfaces import IFieldDeserializer\n-    from plone.restapi.services.content.tus import TUSUpload\n-    from zope.component import adapter\n-    from zope.component import getMultiAdapter\n-    from zope.interface import implementer\n-    from zope.publisher.interfaces.browser import IBrowserRequest\n+@implementer(IFieldDeserializer)\n+@adapter(IField, IBaseObject, IBrowserRequest)\n+class DefaultFieldDeserializer(object):\n \n-    @implementer(IFieldDeserializer)\n-    @adapter(IField, IBaseObject, IBrowserRequest)\n-    class DefaultFieldDeserializer(object):\n+    def __init__(self, field, context, request):\n+        self.field = field\n+        self.context = context\n+        self.request = request\n \n-        def __init__(self, field, context, request):\n-            self.field = field\n-            self.context = context\n-            self.request = request\n+    def __call__(self, value):\n+        return value, {}\n \n-        def __call__(self, value):\n-            return value, {}\n+@implementer(IFieldDeserializer)\n+@adapter(IFileField, IBaseObject, IBrowserRequest)\n+class FileFieldDeserializer(DefaultFieldDeserializer):\n \n-    @implementer(IFieldDeserializer)\n-    @adapter(IFileField, IBaseObject, IBrowserRequest)\n-    class FileFieldDeserializer(DefaultFieldDeserializer):\n+    def __call__(self, value):\n+        kwargs = {}\n+        if isinstance(value, dict):\n+            if u\'content-type\' in value:\n+                kwargs[u\'mimetype\'] = value[u\'content-type\'].encode(\'utf8\')\n+            if u\'filename\' in value:\n+                kwargs[u\'filename\'] = value[u\'filename\'].encode(\'utf8\')\n+            if u\'encoding\' in value:\n+                value = value.get(\'data\', \'\').decode(value[u\'encoding\'])\n+            else:\n+                value = value.get(\'data\', \'\')\n+        elif isinstance(value, TUSUpload):\n+            metadata = value.metadata()\n+            if \'content-type\' in metadata:\n+                kwargs[u\'mimetype\'] = metadata[\'content-type\']\n+            if \'filename\' in metadata:\n+                kwargs[u\'filename\'] = metadata[\'filename\']\n+            value = value.open()\n \n-        def __call__(self, value):\n-            kwargs = {}\n-            if isinstance(value, dict):\n-                if u\'content-type\' in value:\n-                    kwargs[u\'mimetype\'] = value[u\'content-type\'].encode(\'utf8\')\n-                if u\'filename\' in value:\n-                    kwargs[u\'filename\'] = value[u\'filename\'].encode(\'utf8\')\n-                if u\'encoding\' in value:\n-                    value = value.get(\'data\', \'\').decode(value[u\'encoding\'])\n-                else:\n-                    value = value.get(\'data\', \'\')\n-            elif isinstance(value, TUSUpload):\n-                metadata = value.metadata()\n-                if \'content-type\' in metadata:\n-                    kwargs[u\'mimetype\'] = metadata[\'content-type\']\n-                if \'filename\' in metadata:\n-                    kwargs[u\'filename\'] = metadata[\'filename\']\n-                value = value.open()\n+        return value, kwargs\n \n-            return value, kwargs\n+@implementer(IFieldDeserializer)\n+@adapter(IBlobField, IBaseObject, IBrowserRequest)\n+class BlobFieldDeserializer(FileFieldDeserializer):\n+    pass\n \n-    @implementer(IFieldDeserializer)\n-    @adapter(IBlobField, IBaseObject, IBrowserRequest)\n-    class BlobFieldDeserializer(FileFieldDeserializer):\n-        pass\n+@implementer(IFieldDeserializer)\n+@adapter(IReferenceField, IBaseObject, IBrowserRequest)\n+class ReferenceFieldDeserializer(DefaultFieldDeserializer):\n \n-    @implementer(IFieldDeserializer)\n-    @adapter(IReferenceField, IBaseObject, IBrowserRequest)\n-    class ReferenceFieldDeserializer(DefaultFieldDeserializer):\n+    def __call__(self, value):\n+        portal = getMultiAdapter((self.context, self.request),\n+                                 name=\'plone_portal_state\').portal()\n+        portal_url = portal.absolute_url()\n \n-        def __call__(self, value):\n-            portal = getMultiAdapter((self.context, self.request),\n-                                     name=\'plone_portal_state\').portal()\n-            portal_url = portal.absolute_url()\n+        if not isinstance(value, list):\n+            value = [value]\n \n-            if not isinstance(value, list):\n-                value = [value]\n+        for i, v in enumerate(value):\n+            # Resolve references given by URL\n+            if v.startswith(portal_url):\n+                path = v[len(portal_url) + 1:].encode(\'utf8\')\n+                value[i] = portal.unrestrictedTraverse(path, None)\n \n-            for i, v in enumerate(value):\n-                # Resolve references given by URL\n-                if v.startswith(portal_url):\n-                    path = v[len(portal_url) + 1:].encode(\'utf8\')\n-                    value[i] = portal.unrestrictedTraverse(path, None)\n-\n-            return value, {}\n+        return value, {}\ndiff --git a/src/plone/restapi/serializer/atcollection.py b/src/plone/restapi/serializer/atcollection.py\nindex c6e03a92..9bcc5adb 100644\n--- a/src/plone/restapi/serializer/atcollection.py\n+++ b/src/plone/restapi/serializer/atcollection.py\n@@ -1,37 +1,34 @@\n # -*- coding: utf-8 -*-\n-from plone.restapi import HAS_AT\n+from plone.app.collection.interfaces import ICollection\n+from plone.restapi.batching import HypermediaBatch\n+from plone.restapi.interfaces import ISerializeToJson\n+from plone.restapi.interfaces import ISerializeToJsonSummary\n+from plone.restapi.serializer.atcontent import SerializeToJson\n+from zope.component import adapter\n+from zope.component import getMultiAdapter\n+from zope.interface import implementer\n+from zope.interface import Interface\n \n-if HAS_AT:\n-    from plone.app.collection.interfaces import ICollection\n-    from plone.restapi.batching import HypermediaBatch\n-    from plone.restapi.interfaces import ISerializeToJson\n-    from plone.restapi.interfaces import ISerializeToJsonSummary\n-    from plone.restapi.serializer.atcontent import SerializeToJson\n-    from zope.component import adapter\n-    from zope.component import getMultiAdapter\n-    from zope.interface import implementer\n-    from zope.interface import Interface\n+@implementer(ISerializeToJson)\n+@adapter(ICollection, Interface)\n+class SerializeCollectionToJson(SerializeToJson):\n \n-    @implementer(ISerializeToJson)\n-    @adapter(ICollection, Interface)\n-    class SerializeCollectionToJson(SerializeToJson):\n+    def __call__(self, version=None):\n+        collection_metadata = super(\n+            SerializeCollectionToJson, self).__call__(version=version)\n+        results = self.context.results(batch=False)\n+        batch = HypermediaBatch(self.request, results)\n \n-        def __call__(self, version=None):\n-            collection_metadata = super(\n-                SerializeCollectionToJson, self).__call__(version=version)\n-            results = self.context.results(batch=False)\n-            batch = HypermediaBatch(self.request, results)\n+        results = collection_metadata\n+        if not self.request.form.get(\'fullobjects\'):\n+            results[\'@id\'] = batch.canonical_url\n+        results[\'items_total\'] = batch.items_total\n+        if batch.links:\n+            results[\'batching\'] = batch.links\n \n-            results = collection_metadata\n-            if not self.request.form.get(\'fullobjects\'):\n-                results[\'@id\'] = batch.canonical_url\n-            results[\'items_total\'] = batch.items_total\n-            if batch.links:\n-                results[\'batching\'] = batch.links\n-\n-            results[\'items\'] = [\n-                getMultiAdapter(\n-                    (brain, self.request), ISerializeToJsonSummary)()\n-                for brain in batch\n-            ]\n-            return results\n+        results[\'items\'] = [\n+            getMultiAdapter(\n+                (brain, self.request), ISerializeToJsonSummary)()\n+            for brain in batch\n+        ]\n+        return results\ndiff --git a/src/plone/restapi/serializer/atcontent.py b/src/plone/restapi/serializer/atcontent.py\nindex f669bb5b..d6e376a9 100644\n--- a/src/plone/restapi/serializer/atcontent.py\n+++ b/src/plone/restapi/serializer/atcontent.py\n@@ -1,121 +1,118 @@\n # -*- coding: utf-8 -*-\n-from plone.restapi import HAS_AT\n-\n-if HAS_AT:\n-    from Acquisition import aq_inner\n-    from Acquisition import aq_parent\n-    from Products.Archetypes.interfaces import IBaseFolder\n-    from Products.Archetypes.interfaces import IBaseObject\n-    from Products.CMFCore.utils import getToolByName\n-    from plone.restapi.batching import HypermediaBatch\n-    from plone.restapi.deserializer import boolean_value\n-    from plone.restapi.interfaces import IFieldSerializer\n-    from plone.restapi.interfaces import ISerializeToJson\n-    from plone.restapi.interfaces import ISerializeToJsonSummary\n-    from plone.restapi.serializer.expansion import expandable_elements\n-    from zope.component import adapter\n-    from zope.component import getMultiAdapter\n-    from zope.component import queryMultiAdapter\n-    from zope.interface import Interface\n-    from zope.interface import implementer\n-\n-    @implementer(ISerializeToJson)\n-    @adapter(IBaseObject, Interface)\n-    class SerializeToJson(object):\n-\n-        def __init__(self, context, request):\n-            self.context = context\n-            self.request = request\n-\n-        def getVersion(self, version):\n-            if version == \'current\':\n-                return self.context\n-            else:\n-                repo_tool = getToolByName(self.context, "portal_repository")\n-                return repo_tool.retrieve(self.context, int(version)).object\n-\n-        def __call__(self, version=None, include_items=False):\n-            version = \'current\' if version is None else version\n-\n-            obj = self.getVersion(version)\n-            parent = aq_parent(aq_inner(obj))\n-            parent_summary = getMultiAdapter(\n-                (parent, self.request), ISerializeToJsonSummary)()\n-            result = {\n-                # \'@context\': \'http://www.w3.org/ns/hydra/context.jsonld\',\n-                \'@id\': obj.absolute_url(),\n-                \'id\': obj.id,\n-                \'@type\': obj.portal_type,\n-                \'parent\': parent_summary,\n-                \'review_state\': self._get_workflow_state(obj),\n-                \'UID\': obj.UID(),\n-                \'layout\': self.context.getLayout(),\n-                \'is_folderish\': False\n-            }\n-\n-            # Insert expandable elements\n-            result.update(expandable_elements(self.context, self.request))\n-\n-            for field in obj.Schema().fields():\n-\n-                if \'r\' not in field.mode or not field.checkPermission(\'r\', obj):  # noqa: E501\n-                    continue\n-\n-                name = field.getName()\n-\n-                serializer = queryMultiAdapter(\n-                    (field, self.context, self.request),\n-                    IFieldSerializer)\n-                if serializer is not None:\n-                    result[name] = serializer()\n-\n-            return result\n-\n-        def _get_workflow_state(self, obj):\n-            wftool = getToolByName(self.context, \'portal_workflow\')\n-            review_state = wftool.getInfoFor(\n-                ob=obj, name=\'review_state\', default=None)\n-            return review_state\n-\n-    @implementer(ISerializeToJson)\n-    @adapter(IBaseFolder, Interface)\n-    class SerializeFolderToJson(SerializeToJson):\n-\n-        def _build_query(self):\n-            path = \'/\'.join(self.context.getPhysicalPath())\n-            query = {\'path\': {\'depth\': 1, \'query\': path},\n-                     \'sort_on\': \'getObjPositionInParent\'}\n-            return query\n-\n-        def __call__(self, version=None, include_items=True):\n-            folder_metadata = super(SerializeFolderToJson, self).__call__(\n-                version=version\n-            )\n-\n-            folder_metadata.update({\'is_folderish\': True})\n-            result = folder_metadata\n-\n-            include_items = self.request.form.get(\n-                \'include_items\', include_items)\n-            include_items = boolean_value(include_items)\n-            if include_items:\n-                query = self._build_query()\n-\n-                catalog = getToolByName(self.context, \'portal_catalog\')\n-                brains = catalog(query)\n-\n-                batch = HypermediaBatch(self.request, brains)\n-\n-                if not self.request.form.get(\'fullobjects\'):\n-                    result[\'@id\'] = batch.canonical_url\n-                result[\'items_total\'] = batch.items_total\n-                if batch.links:\n-                    result[\'batching\'] = batch.links\n-\n-                result[\'items\'] = [\n-                    getMultiAdapter(\n-                        (brain, self.request), ISerializeToJsonSummary\n-                    )()\n-                    for brain in batch\n-                ]\n-            return result\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n+from Products.Archetypes.interfaces import IBaseFolder\n+from Products.Archetypes.interfaces import IBaseObject\n+from Products.CMFCore.utils import getToolByName\n+from plone.restapi.batching import HypermediaBatch\n+from plone.restapi.deserializer import boolean_value\n+from plone.restapi.interfaces import IFieldSerializer\n+from plone.restapi.interfaces import ISerializeToJson\n+from plone.restapi.interfaces import ISerializeToJsonSummary\n+from plone.restapi.serializer.expansion import expandable_elements\n+from zope.component import adapter\n+from zope.component import getMultiAdapter\n+from zope.component import queryMultiAdapter\n+from zope.interface import Interface\n+from zope.interface import implementer\n+\n+@implementer(ISerializeToJson)\n+@adapter(IBaseObject, Interface)\n+class SerializeToJson(object):\n+\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def getVersion(self, version):\n+        if version == \'current\':\n+            return self.context\n+        else:\n+            repo_tool = getToolByName(self.context, "portal_repository")\n+            return repo_tool.retrieve(self.context, int(version)).object\n+\n+    def __call__(self, version=None, include_items=False):\n+        version = \'current\' if version is None else version\n+\n+        obj = self.getVersion(version)\n+        parent = aq_parent(aq_inner(obj))\n+        parent_summary = getMultiAdapter(\n+            (parent, self.request), ISerializeToJsonSummary)()\n+        result = {\n+            # \'@context\': \'http://www.w3.org/ns/hydra/context.jsonld\',\n+            \'@id\': obj.absolute_url(),\n+            \'id\': obj.id,\n+            \'@type\': obj.portal_type,\n+            \'parent\': parent_summary,\n+            \'review_state\': self._get_workflow_state(obj),\n+            \'UID\': obj.UID(),\n+            \'layout\': self.context.getLayout(),\n+            \'is_folderish\': False\n+        }\n+\n+        # Insert expandable elements\n+        result.update(expandable_elements(self.context, self.request))\n+\n+        for field in obj.Schema().fields():\n+\n+            if \'r\' not in field.mode or not field.checkPermission(\'r\', obj):  # noqa: E501\n+                continue\n+\n+            name = field.getName()\n+\n+            serializer = queryMultiAdapter(\n+                (field, self.context, self.request),\n+                IFieldSerializer)\n+            if serializer is not None:\n+                result[name] = serializer()\n+\n+        return result\n+\n+    def _get_workflow_state(self, obj):\n+        wftool = getToolByName(self.context, \'portal_workflow\')\n+        review_state = wftool.getInfoFor(\n+            ob=obj, name=\'review_state\', default=None)\n+        return review_state\n+\n+@implementer(ISerializeToJson)\n+@adapter(IBaseFolder, Interface)\n+class SerializeFolderToJson(SerializeToJson):\n+\n+    def _build_query(self):\n+        path = \'/\'.join(self.context.getPhysicalPath())\n+        query = {\'path\': {\'depth\': 1, \'query\': path},\n+                 \'sort_on\': \'getObjPositionInParent\'}\n+        return query\n+\n+    def __call__(self, version=None, include_items=True):\n+        folder_metadata = super(SerializeFolderToJson, self).__call__(\n+            version=version\n+        )\n+\n+        folder_metadata.update({\'is_folderish\': True})\n+        result = folder_metadata\n+\n+        include_items = self.request.form.get(\n+            \'include_items\', include_items)\n+        include_items = boolean_value(include_items)\n+        if include_items:\n+            query = self._build_query()\n+\n+            catalog = getToolByName(self.context, \'portal_catalog\')\n+            brains = catalog(query)\n+\n+            batch = HypermediaBatch(self.request, brains)\n+\n+            if not self.request.form.get(\'fullobjects\'):\n+                result[\'@id\'] = batch.canonical_url\n+            result[\'items_total\'] = batch.items_total\n+            if batch.links:\n+                result[\'batching\'] = batch.links\n+\n+            result[\'items\'] = [\n+                getMultiAdapter(\n+                    (brain, self.request), ISerializeToJsonSummary\n+                )()\n+                for brain in batch\n+            ]\n+        return result\ndiff --git a/src/plone/restapi/serializer/atfields.py b/src/plone/restapi/serializer/atfields.py\nindex 349130ed..10929420 100644\n--- a/src/plone/restapi/serializer/atfields.py\n+++ b/src/plone/restapi/serializer/atfields.py\n@@ -1,127 +1,125 @@\n # -*- coding: utf-8 -*-\n-from plone.restapi import HAS_AT\n from six.moves import map\n \n-if HAS_AT:\n-    from Products.Archetypes.interfaces import IBaseObject\n-    from Products.Archetypes.interfaces.field import IField\n-    from Products.Archetypes.interfaces.field import IFileField\n-    from Products.Archetypes.interfaces.field import IImageField\n-    from Products.Archetypes.interfaces.field import IReferenceField\n-    from Products.Archetypes.interfaces.field import ITextField\n-    from Products.CMFCore.utils import getToolByName\n-    from plone.app.blob.interfaces import IBlobField\n-    from plone.app.blob.interfaces import IBlobImageField\n-    from plone.restapi.imaging import get_scales\n-    from plone.restapi.imaging import get_original_image_url\n-    from plone.restapi.interfaces import IFieldSerializer\n-    from plone.restapi.serializer.converters import json_compatible\n-    from zope.component import adapter\n-    from zope.interface import Interface\n-    from zope.interface import implementer\n-\n-    try:\n-        from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n-    except ImportError:\n-        from archetypes.querywidget.interfaces import IQueryField\n-    else:\n-        from plone.app.collection.field import IQueryField\n-\n-    @adapter(IField, IBaseObject, Interface)\n-    @implementer(IFieldSerializer)\n-    class DefaultFieldSerializer(object):\n-\n-        def __init__(self, field, context, request):\n-            self.context = context\n-            self.request = request\n-            self.field = field\n-\n-        def __call__(self):\n-            accessor = self.field.getAccessor(self.context)\n-            return json_compatible(accessor())\n-\n-    @adapter(IFileField, IBaseObject, Interface)\n-    @implementer(IFieldSerializer)\n-    class FileFieldSerializer(DefaultFieldSerializer):\n-\n-        def __call__(self):\n-            url = \'/\'.join((self.context.absolute_url(),\n-                            \'@@download\',\n-                            self.field.getName()))\n-            result = {\n-                \'filename\': self.field.getFilename(self.context),\n-                \'content-type\': self.field.getContentType(self.context),\n-                \'size\': self.field.get_size(self.context),\n-                \'download\': url\n-            }\n-            return json_compatible(result)\n-\n-    @adapter(ITextField, IBaseObject, Interface)\n-    @implementer(IFieldSerializer)\n-    class TextFieldSerializer(DefaultFieldSerializer):\n-\n-        def __call__(self):\n-            mimetypes_registry = getToolByName(\n-                self.context, \'mimetypes_registry\')\n-            data = super(TextFieldSerializer, self).__call__()\n-            return {\n-                \'content-type\': json_compatible(\n-                    mimetypes_registry(data)[2].normalized()),\n-                \'data\': data\n-            }\n-\n-    @adapter(IImageField, IBaseObject, Interface)\n-    @implementer(IFieldSerializer)\n-    class ImageFieldSerializer(DefaultFieldSerializer):\n-\n-        def __call__(self):\n-            image = self.field.get(self.context)\n-            if not image:\n+from Products.Archetypes.interfaces import IBaseObject\n+from Products.Archetypes.interfaces.field import IField\n+from Products.Archetypes.interfaces.field import IFileField\n+from Products.Archetypes.interfaces.field import IImageField\n+from Products.Archetypes.interfaces.field import IReferenceField\n+from Products.Archetypes.interfaces.field import ITextField\n+from Products.CMFCore.utils import getToolByName\n+from plone.app.blob.interfaces import IBlobField\n+from plone.app.blob.interfaces import IBlobImageField\n+from plone.restapi.imaging import get_scales\n+from plone.restapi.imaging import get_original_image_url\n+from plone.restapi.interfaces import IFieldSerializer\n+from plone.restapi.serializer.converters import json_compatible\n+from zope.component import adapter\n+from zope.interface import Interface\n+from zope.interface import implementer\n+\n+try:\n+    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n+except ImportError:\n+    from archetypes.querywidget.interfaces import IQueryField\n+else:\n+    from plone.app.collection.field import IQueryField\n+\n+@adapter(IField, IBaseObject, Interface)\n+@implementer(IFieldSerializer)\n+class DefaultFieldSerializer(object):\n+\n+    def __init__(self, field, context, request):\n+        self.context = context\n+        self.request = request\n+        self.field = field\n+\n+    def __call__(self):\n+        accessor = self.field.getAccessor(self.context)\n+        return json_compatible(accessor())\n+\n+@adapter(IFileField, IBaseObject, Interface)\n+@implementer(IFieldSerializer)\n+class FileFieldSerializer(DefaultFieldSerializer):\n+\n+    def __call__(self):\n+        url = \'/\'.join((self.context.absolute_url(),\n+                        \'@@download\',\n+                        self.field.getName()))\n+        result = {\n+            \'filename\': self.field.getFilename(self.context),\n+            \'content-type\': self.field.getContentType(self.context),\n+            \'size\': self.field.get_size(self.context),\n+            \'download\': url\n+        }\n+        return json_compatible(result)\n+\n+@adapter(ITextField, IBaseObject, Interface)\n+@implementer(IFieldSerializer)\n+class TextFieldSerializer(DefaultFieldSerializer):\n+\n+    def __call__(self):\n+        mimetypes_registry = getToolByName(\n+            self.context, \'mimetypes_registry\')\n+        data = super(TextFieldSerializer, self).__call__()\n+        return {\n+            \'content-type\': json_compatible(\n+                mimetypes_registry(data)[2].normalized()),\n+            \'data\': data\n+        }\n+\n+@adapter(IImageField, IBaseObject, Interface)\n+@implementer(IFieldSerializer)\n+class ImageFieldSerializer(DefaultFieldSerializer):\n+\n+    def __call__(self):\n+        image = self.field.get(self.context)\n+        if not image:\n+            return None\n+\n+        width, height = image.width, image.height\n+        url = get_original_image_url(\n+            self.context, self.field.__name__, width, height)\n+\n+        scales = get_scales(self.context, self.field, width, height)\n+        result = {\n+            \'filename\': self.field.getFilename(self.context),\n+            \'content-type\': self.field.get(self.context).getContentType(),\n+            \'size\': self.field.get(self.context).get_size(),\n+            \'download\': url,\n+            \'width\': width,\n+            \'height\': height,\n+            \'scales\': scales,\n+        }\n+        return json_compatible(result)\n+\n+@adapter(IBlobField, IBaseObject, Interface)\n+@implementer(IFieldSerializer)\n+class BlobFieldSerializer(FileFieldSerializer):\n+    pass\n+\n+@adapter(IBlobImageField, IBaseObject, Interface)\n+@implementer(IFieldSerializer)\n+class BlobImageFieldSerializer(ImageFieldSerializer):\n+    pass\n+\n+@adapter(IReferenceField, IBaseObject, Interface)\n+@implementer(IFieldSerializer)\n+class ReferenceFieldSerializer(DefaultFieldSerializer):\n+\n+    def __call__(self):\n+        accessor = self.field.getAccessor(self.context)\n+        refs = accessor()\n+        if self.field.multiValued:\n+            return [json_compatible(r.absolute_url()) for r in refs]\n+        else:\n+            if refs is None:\n                 return None\n-\n-            width, height = image.width, image.height\n-            url = get_original_image_url(\n-                self.context, self.field.__name__, width, height)\n-\n-            scales = get_scales(self.context, self.field, width, height)\n-            result = {\n-                \'filename\': self.field.getFilename(self.context),\n-                \'content-type\': self.field.get(self.context).getContentType(),\n-                \'size\': self.field.get(self.context).get_size(),\n-                \'download\': url,\n-                \'width\': width,\n-                \'height\': height,\n-                \'scales\': scales,\n-            }\n-            return json_compatible(result)\n-\n-    @adapter(IBlobField, IBaseObject, Interface)\n-    @implementer(IFieldSerializer)\n-    class BlobFieldSerializer(FileFieldSerializer):\n-        pass\n-\n-    @adapter(IBlobImageField, IBaseObject, Interface)\n-    @implementer(IFieldSerializer)\n-    class BlobImageFieldSerializer(ImageFieldSerializer):\n-        pass\n-\n-    @adapter(IReferenceField, IBaseObject, Interface)\n-    @implementer(IFieldSerializer)\n-    class ReferenceFieldSerializer(DefaultFieldSerializer):\n-\n-        def __call__(self):\n-            accessor = self.field.getAccessor(self.context)\n-            refs = accessor()\n-            if self.field.multiValued:\n-                return [json_compatible(r.absolute_url()) for r in refs]\n-            else:\n-                if refs is None:\n-                    return None\n-                return json_compatible(refs.absolute_url())\n-\n-    @adapter(IQueryField, IBaseObject, Interface)\n-    @implementer(IFieldSerializer)\n-    class QueryFieldSerializer(DefaultFieldSerializer):\n-        def __call__(self):\n-            raw_value = self.field.getRaw(self.context)\n-            return json_compatible(list(map(dict, raw_value)))\n+            return json_compatible(refs.absolute_url())\n+\n+@adapter(IQueryField, IBaseObject, Interface)\n+@implementer(IFieldSerializer)\n+class QueryFieldSerializer(DefaultFieldSerializer):\n+    def __call__(self):\n+        raw_value = self.field.getRaw(self.context)\n+        return json_compatible(list(map(dict, raw_value)))\ndiff --git a/src/plone/restapi/services/content/add.py b/src/plone/restapi/services/content/add.py\nindex 1b82f236..1f51413f 100644\n--- a/src/plone/restapi/services/content/add.py\n+++ b/src/plone/restapi/services/content/add.py\n@@ -1,7 +1,6 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition.interfaces import IAcquirer\n-from plone.restapi import HAS_AT\n from plone.restapi.deserializer import json_body\n from plone.restapi.exceptions import DeserializationError\n from plone.restapi.interfaces import IDeserializeFromJson\n@@ -19,14 +18,6 @@\n \n import plone.protect.interfaces\n \n-if HAS_AT:\n-    from Products.Archetypes.interfaces import IBaseObject\n-else:\n-    from zope.interface import Interface\n-\n-    class IBaseObject(Interface):\n-        pass\n-\n \n class FolderPost(Service):\n     """Creates a new content object.\n@@ -86,7 +77,7 @@ def reply(self):\n         if temporarily_wrapped:\n             obj = aq_base(obj)\n \n-        if not HAS_AT or not IBaseObject.providedBy(obj):\n+        if not getattr(deserializer, \'notifies_create\', False):\n             notify(ObjectCreatedEvent(obj))\n \n         obj = add(self.context, obj, rename=not bool(id_))\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-10-03T15:35:12+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.restapi/commit/ef79f717cb5f76abd7498b11838a083d31fd3a5d

see you later flake8r

Files changed:
M src/plone/restapi/deserializer/atcontent.py
M src/plone/restapi/deserializer/atfields.py
M src/plone/restapi/serializer/atcontent.py
M src/plone/restapi/serializer/atfields.py

b'diff --git a/src/plone/restapi/deserializer/atcontent.py b/src/plone/restapi/deserializer/atcontent.py\nindex 24c6de60..dd1be622 100644\n--- a/src/plone/restapi/deserializer/atcontent.py\n+++ b/src/plone/restapi/deserializer/atcontent.py\n@@ -17,6 +17,7 @@\n \n from .mixins import OrderingMixin\n \n+\n @implementer(IDeserializeFromJson)\n @adapter(IBaseObject, Interface)\n class DeserializeFromJson(OrderingMixin, object):\n@@ -87,10 +88,10 @@ def __call__(self, validate_all=False, data=None, create=False):\n     def validate(self):\n         # Instead of calling P.Archetypes.BaseObject.validate() we have to\n         # provide a custom validation implementation here because some\n-        # validators extract the field value from the request. However a\n-        # JSON API request does not contain any form values in the request.\n-        # Thus we fake a request that extracts form values from the object\n-        # on demand.\n+        # validators extract the field value from the request. However a JSON\n+        # API request does not contain any form values in the request.\n+        # Thus we fake a request that extracts form values from the object on\n+        # demand.\n \n         obj = self.context\n         request = ValidationRequest(self.request, obj)\n@@ -123,6 +124,7 @@ def validate(self):\n \n         return errors\n \n+\n class ValidationRequest(dict):\n     """A fake request for validation purposes.\n     """\n@@ -146,6 +148,7 @@ def get(self, key, default=None):\n         except KeyError:\n             return default\n \n+\n class ValidationRequestForm(dict):\n     """A request form dict that returns values from the content object.\n     """\ndiff --git a/src/plone/restapi/deserializer/atfields.py b/src/plone/restapi/deserializer/atfields.py\nindex 8d9555ae..3ab58e06 100644\n--- a/src/plone/restapi/deserializer/atfields.py\n+++ b/src/plone/restapi/deserializer/atfields.py\n@@ -11,6 +11,7 @@\n from zope.interface import implementer\n from zope.publisher.interfaces.browser import IBrowserRequest\n \n+\n @implementer(IFieldDeserializer)\n @adapter(IField, IBaseObject, IBrowserRequest)\n class DefaultFieldDeserializer(object):\n@@ -23,6 +24,7 @@ def __init__(self, field, context, request):\n     def __call__(self, value):\n         return value, {}\n \n+\n @implementer(IFieldDeserializer)\n @adapter(IFileField, IBaseObject, IBrowserRequest)\n class FileFieldDeserializer(DefaultFieldDeserializer):\n@@ -48,11 +50,13 @@ def __call__(self, value):\n \n         return value, kwargs\n \n+\n @implementer(IFieldDeserializer)\n @adapter(IBlobField, IBaseObject, IBrowserRequest)\n class BlobFieldDeserializer(FileFieldDeserializer):\n     pass\n \n+\n @implementer(IFieldDeserializer)\n @adapter(IReferenceField, IBaseObject, IBrowserRequest)\n class ReferenceFieldDeserializer(DefaultFieldDeserializer):\ndiff --git a/src/plone/restapi/serializer/atcontent.py b/src/plone/restapi/serializer/atcontent.py\nindex d6e376a9..92219877 100644\n--- a/src/plone/restapi/serializer/atcontent.py\n+++ b/src/plone/restapi/serializer/atcontent.py\n@@ -16,6 +16,7 @@\n from zope.interface import Interface\n from zope.interface import implementer\n \n+\n @implementer(ISerializeToJson)\n @adapter(IBaseObject, Interface)\n class SerializeToJson(object):\n@@ -74,6 +75,7 @@ def _get_workflow_state(self, obj):\n             ob=obj, name=\'review_state\', default=None)\n         return review_state\n \n+\n @implementer(ISerializeToJson)\n @adapter(IBaseFolder, Interface)\n class SerializeFolderToJson(SerializeToJson):\ndiff --git a/src/plone/restapi/serializer/atfields.py b/src/plone/restapi/serializer/atfields.py\nindex 10929420..eed63d04 100644\n--- a/src/plone/restapi/serializer/atfields.py\n+++ b/src/plone/restapi/serializer/atfields.py\n@@ -25,6 +25,7 @@\n else:\n     from plone.app.collection.field import IQueryField\n \n+\n @adapter(IField, IBaseObject, Interface)\n @implementer(IFieldSerializer)\n class DefaultFieldSerializer(object):\n@@ -38,6 +39,7 @@ def __call__(self):\n         accessor = self.field.getAccessor(self.context)\n         return json_compatible(accessor())\n \n+\n @adapter(IFileField, IBaseObject, Interface)\n @implementer(IFieldSerializer)\n class FileFieldSerializer(DefaultFieldSerializer):\n@@ -54,6 +56,7 @@ def __call__(self):\n         }\n         return json_compatible(result)\n \n+\n @adapter(ITextField, IBaseObject, Interface)\n @implementer(IFieldSerializer)\n class TextFieldSerializer(DefaultFieldSerializer):\n@@ -68,6 +71,7 @@ def __call__(self):\n             \'data\': data\n         }\n \n+\n @adapter(IImageField, IBaseObject, Interface)\n @implementer(IFieldSerializer)\n class ImageFieldSerializer(DefaultFieldSerializer):\n@@ -93,16 +97,19 @@ def __call__(self):\n         }\n         return json_compatible(result)\n \n+\n @adapter(IBlobField, IBaseObject, Interface)\n @implementer(IFieldSerializer)\n class BlobFieldSerializer(FileFieldSerializer):\n     pass\n \n+\n @adapter(IBlobImageField, IBaseObject, Interface)\n @implementer(IFieldSerializer)\n class BlobImageFieldSerializer(ImageFieldSerializer):\n     pass\n \n+\n @adapter(IReferenceField, IBaseObject, Interface)\n @implementer(IFieldSerializer)\n class ReferenceFieldSerializer(DefaultFieldSerializer):\n@@ -117,6 +124,7 @@ def __call__(self):\n                 return None\n             return json_compatible(refs.absolute_url())\n \n+\n @adapter(IQueryField, IBaseObject, Interface)\n @implementer(IFieldSerializer)\n class QueryFieldSerializer(DefaultFieldSerializer):\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-10-03T15:56:15+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.restapi/commit/5d4c94d48a12b1a0c7e2d82378fdda73f80a4c55

flake4

Files changed:
M src/plone/restapi/serializer/atcollection.py

b'diff --git a/src/plone/restapi/serializer/atcollection.py b/src/plone/restapi/serializer/atcollection.py\nindex 9bcc5adb..a7eb2e99 100644\n--- a/src/plone/restapi/serializer/atcollection.py\n+++ b/src/plone/restapi/serializer/atcollection.py\n@@ -9,6 +9,7 @@\n from zope.interface import implementer\n from zope.interface import Interface\n \n+\n @implementer(ISerializeToJson)\n @adapter(ICollection, Interface)\n class SerializeCollectionToJson(SerializeToJson):\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-10-04T23:00:34-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/53036eacc9ecebe9ccc641f2661d7840b0af747f

Skip AT tests unless we have AT

Files changed:
M src/plone/restapi/tests/test_content_delete.py

b"diff --git a/src/plone/restapi/tests/test_content_delete.py b/src/plone/restapi/tests/test_content_delete.py\nindex c8555767..c7fd572a 100644\n--- a/src/plone/restapi/tests/test_content_delete.py\n+++ b/src/plone/restapi/tests/test_content_delete.py\n@@ -10,6 +10,7 @@\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.testing import login\n from plone.app.testing import setRoles\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from zope.event import notify\n@@ -65,6 +66,8 @@ class TestATContentDelete(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest('Testing Archetypes support requires it')\n         self.portal = self.layer['portal']\n         setRoles(self.portal, TEST_USER_ID, ['Manager'])\n         self.doc1 = self.portal[self.portal.invokeFactory(\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-10-12T12:20:23+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.restapi/commit/ced7377d2d28e56a8ebce7878de2188612c4edf5

skip tests until https://github.com/plone/Products.CMFPlone/issues/2592#issuecomment-429242129 is resolved

Files changed:
M src/plone/restapi/tests/test_batching.py

b"diff --git a/src/plone/restapi/tests/test_batching.py b/src/plone/restapi/tests/test_batching.py\nindex 206eaedc..556c5b8d 100644\n--- a/src/plone/restapi/tests/test_batching.py\n+++ b/src/plone/restapi/tests/test_batching.py\n@@ -315,8 +315,9 @@ class TestBatchingArchetypes(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        if not HAS_AT:\n-            raise unittest.SkipTest('Testing Archetypes support requires it')\n+        # FIXME: These fail in py2 when run together with the robot-tests\n+        # of plone.app.widgets. The pass when run in isolation.\n+        raise unittest.SkipTest('Skip until https://github.com/plone/Products.CMFPlone/issues/2592#issuecomment-429242129 is resolved')  # noqa: E501\n         self.app = self.layer['app']\n         self.portal = self.layer['portal']\n         self.portal_url = self.portal.absolute_url()\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-10-12T12:32:11+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.restapi/commit/945cf5fc8a515bead6949e1870a974f168ea2f9e

remove unused import

Files changed:
M src/plone/restapi/tests/test_batching.py

b"diff --git a/src/plone/restapi/tests/test_batching.py b/src/plone/restapi/tests/test_batching.py\nindex 556c5b8d..6125f6e3 100644\n--- a/src/plone/restapi/tests/test_batching.py\n+++ b/src/plone/restapi/tests/test_batching.py\n@@ -5,7 +5,6 @@\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n from plone.dexterity.utils import createContentInContainer\n-from plone.restapi import HAS_AT\n from plone.restapi.batching import DEFAULT_BATCH_SIZE\n from plone.restapi.batching import HypermediaBatch\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n@@ -317,6 +316,7 @@ class TestBatchingArchetypes(unittest.TestCase):\n     def setUp(self):\n         # FIXME: These fail in py2 when run together with the robot-tests\n         # of plone.app.widgets. The pass when run in isolation.\n+        # When fixed this should be skiped if plone.restapi.HAS_AT is False\n         raise unittest.SkipTest('Skip until https://github.com/plone/Products.CMFPlone/issues/2592#issuecomment-429242129 is resolved')  # noqa: E501\n         self.app = self.layer['app']\n         self.portal = self.layer['portal']\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-10-12T16:37:16+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.restapi/commit/af0223275b63850af6049a74ff39301fc619da1a

revert skip because then tne next test in the layer fails...

Files changed:
M src/plone/restapi/tests/test_batching.py

b"diff --git a/src/plone/restapi/tests/test_batching.py b/src/plone/restapi/tests/test_batching.py\nindex 6125f6e3..206eaedc 100644\n--- a/src/plone/restapi/tests/test_batching.py\n+++ b/src/plone/restapi/tests/test_batching.py\n@@ -5,6 +5,7 @@\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n from plone.dexterity.utils import createContentInContainer\n+from plone.restapi import HAS_AT\n from plone.restapi.batching import DEFAULT_BATCH_SIZE\n from plone.restapi.batching import HypermediaBatch\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n@@ -314,10 +315,8 @@ class TestBatchingArchetypes(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        # FIXME: These fail in py2 when run together with the robot-tests\n-        # of plone.app.widgets. The pass when run in isolation.\n-        # When fixed this should be skiped if plone.restapi.HAS_AT is False\n-        raise unittest.SkipTest('Skip until https://github.com/plone/Products.CMFPlone/issues/2592#issuecomment-429242129 is resolved')  # noqa: E501\n+        if not HAS_AT:\n+            raise unittest.SkipTest('Testing Archetypes support requires it')\n         self.app = self.layer['app']\n         self.portal = self.layer['portal']\n         self.portal_url = self.portal.absolute_url()\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-10-12T18:12:28+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.restapi/commit/23fad9ad12d11c00c3c524f1ab032b0c5bb54cb3

add crazy dummy-test to fix https://github.com/plone/Products.CMFPlone/issues/2592

Files changed:
M src/plone/restapi/tests/test_batching.py

b'diff --git a/src/plone/restapi/tests/test_batching.py b/src/plone/restapi/tests/test_batching.py\nindex 206eaedc..3796d833 100644\n--- a/src/plone/restapi/tests/test_batching.py\n+++ b/src/plone/restapi/tests/test_batching.py\n@@ -310,6 +310,59 @@ def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n         self.assertNotIn(\'batching\', list(response.json()))\n \n \n+class TestAABatchingArchetypes(unittest.TestCase):\n+    """This is a dummy test to work around a nasty test-isolation issue.\n+\n+    It does the same requests as TestBatchingArchetypes (see below).\n+    When run with the robot-tests in plone.app.widgets (without isolation)\n+    they return rendered templates since \'mark_as_api_request\' is not hit.\n+\n+    Doing the exact same calls here before actually running the tests\n+    fixes the issue. Don\'t ask why, I do not know.\n+\n+    See https://github.com/plone/Products.CMFPlone/issues/2592 for details.\n+    """\n+\n+    layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n+        self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n+\n+        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Contributor\'])\n+        self.api_session = RelativeSession(self.portal_url)\n+        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+        self.portal[self.portal.invokeFactory(\n+            \'Folder\',\n+            id=\'folder\',\n+            title=\'Some Folder\',\n+        )]\n+        transaction.commit()\n+\n+    def test_contains_canonical_url(self):\n+        # Fetch the second page of the batch\n+        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+\n+    def test_contains_batching_links(self):\n+        # Fetch the second page of the batch\n+        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+\n+    def test_contains_correct_batch_of_items(self):\n+        # Fetch the second page of the batch\n+        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+\n+    def test_total_item_count_is_correct(self):\n+        # Fetch the second page of the batch\n+        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+\n+    def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n+        self.api_session.get(\'/folder?b_size=100\')\n+\n+\n class TestBatchingArchetypes(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-10-17T11:58:05+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.restapi/commit/7fe22a50b58d07471f5bdef74d6dd057508653b5

add changenote and classifiers

Files changed:
M CHANGES.rst
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 52a7ad66..dab24e33 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,7 +4,8 @@ Changelog\n 3.4.6 (unreleased)\n ------------------\n \n-- Nothing changed yet.\n+- Add support for Python 3.\n+  [pbauer, davisagli]\n \n \n 3.4.5 (2018-09-14)\ndiff --git a/setup.py b/setup.py\nindex b0875211..1878a076 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -49,6 +49,8 @@\n           "Operating System :: OS Independent",\n           "Programming Language :: Python",\n           "Programming Language :: Python :: 2.7",\n+          "Programming Language :: Python :: 3.6",\n+          "Programming Language :: Python :: 3.7",\n           "Topic :: Software Development :: Libraries :: Python Modules",\n       ],\n       keywords=\'plone rest restful hypermedia api json\',\n@@ -64,9 +66,9 @@\n       install_requires=[\n           \'setuptools\',\n           \'python-dateutil\',\n-          \'plone.behavior>=1.1\',  # adds name to behavior directive \n+          \'plone.behavior>=1.1\',  # adds name to behavior directive\n           \'plone.rest >= 1.0a6\',  # json renderer moved to plone.restapi\n-          \'plone.schema >= 1.2.0\',  # new json field          \n+          \'plone.schema >= 1.2.0\',  # new json field\n           \'PyJWT\',\n           \'pytz\',\n       ],\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-10-17T12:24:04+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.restapi/commit/1d4d683704f5f4b319e0bff111dcdb5984a8d308

Merge pull request #542 from plone/python3

[WIP] Python 3 support

Files changed:
M .gitignore
M CHANGES.rst
M setup.py
M src/plone/restapi/__init__.py
M src/plone/restapi/batching.py
M src/plone/restapi/demo/demo.py
M src/plone/restapi/deserializer/__init__.py
M src/plone/restapi/deserializer/atcontent.py
M src/plone/restapi/deserializer/controlpanels.py
M src/plone/restapi/deserializer/dxcontent.py
M src/plone/restapi/deserializer/dxfields.py
M src/plone/restapi/deserializer/relationfield.py
M src/plone/restapi/imaging.py
M src/plone/restapi/pas/plugin.py
M src/plone/restapi/search/utils.py
M src/plone/restapi/serializer/atcollection.py
M src/plone/restapi/serializer/atcontent.py
M src/plone/restapi/serializer/atfields.py
M src/plone/restapi/serializer/catalog.py
M src/plone/restapi/serializer/configure.zcml
M src/plone/restapi/serializer/converters.py
M src/plone/restapi/serializer/dxcontent.py
M src/plone/restapi/serializer/expansion.py
M src/plone/restapi/serializer/registry.py
M src/plone/restapi/services/auth/login.py
M src/plone/restapi/services/content/add.py
M src/plone/restapi/services/content/tus.py
M src/plone/restapi/services/content/utils.py
M src/plone/restapi/services/copymove/copymove.py
M src/plone/restapi/services/discussion/conversation.py
M src/plone/restapi/services/email_send/post.py
M src/plone/restapi/services/groups/delete.py
M src/plone/restapi/services/groups/get.py
M src/plone/restapi/services/groups/update.py
M src/plone/restapi/services/history/get.py
M src/plone/restapi/services/history/patch.py
M src/plone/restapi/services/multilingual/pam.py
M src/plone/restapi/services/registry/get.py
M src/plone/restapi/services/tiles/get.py
M src/plone/restapi/services/types/get.py
M src/plone/restapi/services/users/add.py
M src/plone/restapi/services/users/delete.py
M src/plone/restapi/services/users/get.py
M src/plone/restapi/services/users/update.py
M src/plone/restapi/services/vocabularies/get.py
M src/plone/restapi/services/workflow/info.py
M src/plone/restapi/services/workflow/transition.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/helpers.py
M src/plone/restapi/tests/mixin_ordering.py
M src/plone/restapi/tests/performance.py
M src/plone/restapi/tests/test_atcollection.py
M src/plone/restapi/tests/test_atcontent_deserializer.py
M src/plone/restapi/tests/test_atcontent_serializer.py
M src/plone/restapi/tests/test_atfield_deserializer.py
M src/plone/restapi/tests/test_atfield_serializer.py
M src/plone/restapi/tests/test_batching.py
M src/plone/restapi/tests/test_comments.py
M src/plone/restapi/tests/test_content_delete.py
M src/plone/restapi/tests/test_content_get.py
M src/plone/restapi/tests/test_content_local_roles.py
M src/plone/restapi/tests/test_content_patch.py
M src/plone/restapi/tests/test_content_post.py
M src/plone/restapi/tests/test_content_utils.py
M src/plone/restapi/tests/test_copymove.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_dxcontent_deserializer.py
M src/plone/restapi/tests/test_dxcontent_serializer.py
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_dxfield_serializer.py
M src/plone/restapi/tests/test_error_handling.py
M src/plone/restapi/tests/test_expansion.py
M src/plone/restapi/tests/test_pas.py
M src/plone/restapi/tests/test_registry.py
M src/plone/restapi/tests/test_registry_serializer.py
M src/plone/restapi/tests/test_roles.py
M src/plone/restapi/tests/test_search.py
M src/plone/restapi/tests/test_search_utils.py
M src/plone/restapi/tests/test_serializer.py
M src/plone/restapi/tests/test_serializer_catalog.py
M src/plone/restapi/tests/test_serializer_converters.py
M src/plone/restapi/tests/test_serializer_group.py
M src/plone/restapi/tests/test_serializer_summary.py
M src/plone/restapi/tests/test_services.py
M src/plone/restapi/tests/test_services_actions.py
M src/plone/restapi/tests/test_services_comments.py
M src/plone/restapi/tests/test_services_email_notification.py
M src/plone/restapi/tests/test_services_email_send.py
M src/plone/restapi/tests/test_services_history.py
M src/plone/restapi/tests/test_services_principals.py
M src/plone/restapi/tests/test_services_tiles.py
M src/plone/restapi/tests/test_services_types.py
M src/plone/restapi/tests/test_services_users.py
M src/plone/restapi/tests/test_services_vocabularies.py
M src/plone/restapi/tests/test_setup.py
M src/plone/restapi/tests/test_site_deserializer.py
M src/plone/restapi/tests/test_site_serializer.py
M src/plone/restapi/tests/test_translations.py
M src/plone/restapi/tests/test_tus.py
M src/plone/restapi/tests/test_types.py
M src/plone/restapi/tests/test_workflow.py
M src/plone/restapi/types/utils.py

b'diff --git a/.gitignore b/.gitignore\nindex e79fd8c8..f86d13aa 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -34,3 +34,4 @@ pip-selfcheck.json\n /.idea\n /.vscode\n /.ipython\n+/.mypy_cache/\n\\ No newline at end of file\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 52a7ad66..dab24e33 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,7 +4,8 @@ Changelog\n 3.4.6 (unreleased)\n ------------------\n \n-- Nothing changed yet.\n+- Add support for Python 3.\n+  [pbauer, davisagli]\n \n \n 3.4.5 (2018-09-14)\ndiff --git a/setup.py b/setup.py\nindex 479e19d5..1878a076 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -10,6 +10,26 @@\n     open(\'CHANGES.rst\').read() + \'\\n\'\n )\n \n+TEST_REQUIRES = [\n+    \'collective.MockMailHost\',\n+    \'plone.app.contenttypes\',\n+    \'plone.app.robotframework\',\n+    \'plone.app.testing [robot] >= 4.2.2\',  # ROBOT_TEST_LEVEL added\n+    \'plone.api\',\n+    \'requests\',\n+    \'freezegun\',\n+    \'plone.tiles\',\n+    \'mock\',\n+]\n+\n+PY2_ONLY = [\n+    \'Products.Archetypes\',\n+    \'plone.app.collection\',\n+]\n+\n+if sys.version_info[0] == 2:\n+    TEST_REQUIRES += PY2_ONLY\n+\n \n setup(name=\'plone.restapi\',\n       version=version,\n@@ -29,6 +49,8 @@\n           "Operating System :: OS Independent",\n           "Programming Language :: Python",\n           "Programming Language :: Python :: 2.7",\n+          "Programming Language :: Python :: 3.6",\n+          "Programming Language :: Python :: 3.7",\n           "Topic :: Software Development :: Libraries :: Python Modules",\n       ],\n       keywords=\'plone rest restful hypermedia api json\',\n@@ -44,25 +66,13 @@\n       install_requires=[\n           \'setuptools\',\n           \'python-dateutil\',\n-          \'plone.behavior>=1.1\',  # adds name to behavior directive \n+          \'plone.behavior>=1.1\',  # adds name to behavior directive\n           \'plone.rest >= 1.0a6\',  # json renderer moved to plone.restapi\n-          \'plone.schema >= 1.2.0\',  # new json field          \n+          \'plone.schema >= 1.2.0\',  # new json field\n           \'PyJWT\',\n           \'pytz\',\n       ],\n-      extras_require={\'test\': [\n-          \'Products.Archetypes\',\n-          \'collective.MockMailHost\',\n-          \'plone.app.collection\',\n-          \'plone.app.contenttypes\',\n-          \'plone.app.robotframework\',\n-          \'plone.app.testing [robot] >= 4.2.2\',  # ROBOT_TEST_LEVEL added\n-          \'plone.api\',\n-          \'requests\',\n-          \'freezegun\',\n-          \'plone.tiles\',\n-          \'mock\',\n-      ]},\n+      extras_require={\'test\': TEST_REQUIRES},\n       entry_points="""\n       # -*- Entry points: -*-\n       [z3c.autoinclude.plugin]\ndiff --git a/src/plone/restapi/__init__.py b/src/plone/restapi/__init__.py\nindex 4bb52278..cf140252 100644\n--- a/src/plone/restapi/__init__.py\n+++ b/src/plone/restapi/__init__.py\n@@ -25,6 +25,13 @@\n except pkg_resources.DistributionNotFound:  # pragma: no cover\n     HAS_PLONE_APP_CONTENTTYPES = False\n \n+try:\n+    pkg_resources.get_distribution(\'Products.Archetypes\')\n+except pkg_resources.DistributionNotFound:\n+    HAS_AT = False\n+else:\n+    HAS_AT = True\n+\n \n def initialize(context):\n     registerMultiPlugin(plugin.JWTAuthenticationPlugin.meta_type)\n@@ -38,7 +45,7 @@ def initialize(context):\n         visibility=None,\n     )\n \n-    if REGISTER_TEST_TYPES:\n+    if HAS_AT and REGISTER_TEST_TYPES:\n         from Products.Archetypes.ArchetypeTool import process_types, listTypes\n         from Products.CMFCore import permissions\n         from Products.CMFCore import utils\ndiff --git a/src/plone/restapi/batching.py b/src/plone/restapi/batching.py\nindex 92b22faa..c0126c77 100644\n--- a/src/plone/restapi/batching.py\n+++ b/src/plone/restapi/batching.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.batching.batch import Batch\n-from urllib import urlencode\n-from urlparse import parse_qsl\n+from six.moves.urllib.parse import urlencode\n+from six.moves.urllib.parse import parse_qsl\n \n \n DEFAULT_BATCH_SIZE = 25\n@@ -116,7 +116,7 @@ def _url_with_params(self, params):\n         # result of parse_qsl into a dict!\n \n         # Drop params to be updated, then prepend new params in order\n-        qs_params = filter(lambda x: x[0] not in params.keys(), qs_params)\n+        qs_params = [x for x in qs_params if x[0] not in list(params)]\n         qs_params = sorted(params.items()) + qs_params\n \n         qs = urlencode(qs_params)\ndiff --git a/src/plone/restapi/demo/demo.py b/src/plone/restapi/demo/demo.py\nindex 790170c6..7c90983b 100644\n--- a/src/plone/restapi/demo/demo.py\n+++ b/src/plone/restapi/demo/demo.py\n@@ -5,7 +5,7 @@\n class InternalServerErrorView(BrowserView):  # pragma: no cover\n \n     def __call__(self):\n-        from urllib2 import HTTPError\n+        from six.moves.urllib.error import HTTPError\n         raise HTTPError(\n             \'http://nohost/plone/internal_server_error\',\n             500,\ndiff --git a/src/plone/restapi/deserializer/__init__.py b/src/plone/restapi/deserializer/__init__.py\nindex a4f6bdbb..58207c54 100644\n--- a/src/plone/restapi/deserializer/__init__.py\n+++ b/src/plone/restapi/deserializer/__init__.py\n@@ -6,7 +6,7 @@\n \n def json_body(request):\n     try:\n-        data = json.loads(request.get(\'BODY\', \'{}\'))\n+        data = json.loads(request.get(\'BODY\') or \'{}\')\n     except ValueError:\n         raise DeserializationError(\'No JSON object could be decoded\')\n     if not isinstance(data, dict):\ndiff --git a/src/plone/restapi/deserializer/atcontent.py b/src/plone/restapi/deserializer/atcontent.py\nindex a6f696a0..dd1be622 100644\n--- a/src/plone/restapi/deserializer/atcontent.py\n+++ b/src/plone/restapi/deserializer/atcontent.py\n@@ -44,8 +44,8 @@ def __call__(self, validate_all=False, data=None, create=False):\n             name = field.getName()\n \n             if name in data:\n-                deserializer = queryMultiAdapter((field, obj, self.request),\n-                                                 IFieldDeserializer)\n+                deserializer = queryMultiAdapter(\n+                    (field, obj, self.request), IFieldDeserializer)\n                 if deserializer is None:\n                     continue\n                 value, kwargs = deserializer(data[name])\ndiff --git a/src/plone/restapi/deserializer/controlpanels.py b/src/plone/restapi/deserializer/controlpanels.py\nindex b70caedb..e434ee01 100644\n--- a/src/plone/restapi/deserializer/controlpanels.py\n+++ b/src/plone/restapi/deserializer/controlpanels.py\n@@ -69,7 +69,7 @@ def __call__(self):\n                     setattr(proxy, name, value)\n                 except ValueError as e:\n                     errors.append({\n-                        \'message\': e.message, \'field\': name, \'error\': e})\n+                        \'message\': str(e), \'field\': name, \'error\': e})\n                 except ValidationError as e:\n                     errors.append({\n                         \'message\': e.doc(), \'field\': name, \'error\': e})\n@@ -82,7 +82,7 @@ def __call__(self):\n                 (self.context, self.request, None, schema, None),\n                 IManagerValidator)\n             for error in validator.validate(field_data):\n-                errors.append({\'error\': error, \'message\': error.message})\n+                errors.append({\'error\': error, \'message\': str(error)})\n \n         if errors:\n             raise BadRequest(errors)\ndiff --git a/src/plone/restapi/deserializer/dxcontent.py b/src/plone/restapi/deserializer/dxcontent.py\nindex b2e42165..4f93e8ba 100644\n--- a/src/plone/restapi/deserializer/dxcontent.py\n+++ b/src/plone/restapi/deserializer/dxcontent.py\n@@ -88,7 +88,7 @@ def __call__(self, validate_all=False, data=None, create=False):  # noqa: ignore\n                         value = deserializer(data[name])\n                     except ValueError as e:\n                         errors.append({\n-                            \'message\': e.message, \'field\': name, \'error\': e})\n+                            \'message\': str(e), \'field\': name, \'error\': e})\n                     except ValidationError as e:\n                         errors.append({\n                             \'message\': e.doc(), \'field\': name, \'error\': e})\n@@ -123,7 +123,7 @@ def __call__(self, validate_all=False, data=None, create=False):  # noqa: ignore\n                 (self.context, self.request, None, schema, None),\n                 IManagerValidator)\n             for error in validator.validate(field_data):\n-                errors.append({\'error\': error, \'message\': error.message})\n+                errors.append({\'error\': error, \'message\': str(error)})\n \n         if errors:\n             raise BadRequest(errors)\ndiff --git a/src/plone/restapi/deserializer/dxfields.py b/src/plone/restapi/deserializer/dxfields.py\nindex 548a9518..fd1cd046 100644\n--- a/src/plone/restapi/deserializer/dxfields.py\n+++ b/src/plone/restapi/deserializer/dxfields.py\n@@ -23,7 +23,9 @@\n from zope.schema.interfaces import ITime\n from zope.schema.interfaces import ITimedelta\n \n+import codecs\n import dateutil\n+import six\n \n \n @implementer(IFieldDeserializer)\n@@ -38,7 +40,7 @@ def __init__(self, field, context, request):\n         self.request = request\n \n     def __call__(self, value):\n-        if not isinstance(value, unicode):\n+        if not isinstance(value, six.text_type):\n             self.field.validate(value)\n             return value\n \n@@ -52,11 +54,11 @@ def __call__(self, value):\n class TextLineFieldDeserializer(DefaultFieldDeserializer):\n \n     def __call__(self, value):\n-        if isinstance(value, unicode):\n+        if isinstance(value, six.text_type):\n             value = IFromUnicode(self.field).fromUnicode(value)\n \n         # Mimic what z3c.form does in it\'s BaseDataConverter.\n-        if isinstance(value, unicode):\n+        if isinstance(value, six.text_type):\n             value = value.strip()\n             if value == u\'\':\n                 value = self.field.missing_value\n@@ -191,7 +193,7 @@ def __call__(self, value):\n         try:\n             value = timedelta(seconds=value)\n         except TypeError as e:\n-            raise ValueError(e.message)\n+            raise ValueError(str(e))\n \n         self.field.validate(value)\n         return value\n@@ -211,16 +213,18 @@ def __call__(self, value):\n                 # with the \'download\' key so we return the same stored file\n                 return getattr(self.field.context, self.field.__name__)\n \n-            content_type = value.get(u\'content-type\', content_type).encode(\n-                \'utf8\')\n-            filename = value.get(u\'filename\', filename)\n-            if u\'encoding\' in value:\n-                data = value.get(\'data\', \'\').decode(value[u\'encoding\'])\n-            else:\n-                data = value.get(\'data\', \'\')\n+            content_type = value.get(\'content-type\', content_type)\n+            filename = value.get(\'filename\', filename)\n+            data = value.get(\'data\', \'\')\n+            if isinstance(data, six.text_type):\n+                data = data.encode(\'utf-8\')\n+            if \'encoding\' in value:\n+                data = codecs.decode(data, value[\'encoding\'])\n+            if isinstance(data, six.text_type):\n+                data = data.encode(\'utf-8\')\n         elif isinstance(value, TUSUpload):\n             content_type = value.metadata().get(\n-                \'content-type\', content_type).encode(\'utf8\')\n+                \'content-type\', content_type)\n             filename = value.metadata().get(\'filename\', filename)\n             data = value.open()\n         else:\n@@ -228,6 +232,8 @@ def __call__(self, value):\n \n         # Convert if we have data\n         if data:\n+            if six.PY2:\n+                content_type = content_type.encode(\'utf8\')\n             value = self.field._type(\n                 data=data, contentType=content_type, filename=filename)\n         else:\n@@ -246,9 +252,9 @@ def __call__(self, value):\n         content_type = self.field.default_mime_type\n         encoding = \'utf8\'\n         if isinstance(value, dict):\n-            content_type = value.get(u\'content-type\', content_type)\n-            encoding = value.get(u\'encoding\', encoding)\n-            data = value.get(u\'data\', u\'\')\n+            content_type = value.get(\'content-type\', content_type)\n+            encoding = value.get(\'encoding\', encoding)\n+            data = value.get(\'data\', u\'\')\n         elif isinstance(value, TUSUpload):\n             content_type = value.metadata().get(\'content-type\', content_type)\n             with open(value.filepath, \'rb\') as f:\ndiff --git a/src/plone/restapi/deserializer/relationfield.py b/src/plone/restapi/deserializer/relationfield.py\nindex b24db727..ec3e8bc2 100644\n--- a/src/plone/restapi/deserializer/relationfield.py\n+++ b/src/plone/restapi/deserializer/relationfield.py\n@@ -10,6 +10,7 @@\n from zope.interface import implementer\n from zope.intid.interfaces import IIntIds\n from zope.publisher.interfaces.browser import IBrowserRequest\n+import six\n \n \n @implementer(IFieldDeserializer)\n@@ -28,18 +29,19 @@ def __call__(self, value):\n             # Resolve by intid\n             intids = queryUtility(IIntIds)\n             obj = intids.queryObject(value)\n-        elif isinstance(value, basestring):\n+        elif isinstance(value, six.string_types):\n+            if six.PY2 and isinstance(value, six.text_type):\n+                value = value.encode(\'utf8\')\n             portal = getMultiAdapter((self.context, self.request),\n                                      name=\'plone_portal_state\').portal()\n             portal_url = portal.absolute_url()\n             if value.startswith(portal_url):\n                 # Resolve by URL\n                 obj = portal.restrictedTraverse(\n-                    value[len(portal_url) + 1:].encode(\'utf8\'), None)\n+                    value[len(portal_url) + 1:], None)\n             elif value.startswith(\'/\'):\n                 # Resolve by path\n-                obj = portal.restrictedTraverse(\n-                    value.encode(\'utf8\').lstrip(\'/\'), None)\n+                obj = portal.restrictedTraverse(value.lstrip(\'/\'), None)\n             else:\n                 # Resolve by UID\n                 catalog = getToolByName(self.context, \'portal_catalog\')\ndiff --git a/src/plone/restapi/imaging.py b/src/plone/restapi/imaging.py\nindex 202f6bfa..d943f038 100644\n--- a/src/plone/restapi/imaging.py\n+++ b/src/plone/restapi/imaging.py\n@@ -1,8 +1,10 @@\n # -*- coding: utf-8 -*-\n+from __future__ import division\n from Products.CMFCore.interfaces import IPropertiesTool\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.globalrequest import getRequest\n+from six.moves import map\n \n try:\n     from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n@@ -62,8 +64,8 @@ def get_actual_scale(dimensions, bbox):\n     This is supposed to emulate / predict the behavior of Plone\'s\n     ImageScaling implementations.\n     """\n-    width, height = map(float, dimensions)\n-    max_width, max_height = map(float, bbox)\n+    width, height = dimensions\n+    max_width, max_height = bbox\n     resize_ratio = min(max_width / width, max_height / height)\n \n     # Plone doesn\'t upscale images for the default named scales - limit\n@@ -98,7 +100,7 @@ def get_scale_infos():\n \n     def split_scale_info(allowed_size):\n         name, dims = allowed_size.split(\' \')\n-        width, height = map(int, dims.split(\':\'))\n+        width, height = list(map(int, dims.split(\':\')))\n         return name, width, height\n \n     return [split_scale_info(size) for size in allowed_sizes]\ndiff --git a/src/plone/restapi/pas/plugin.py b/src/plone/restapi/pas/plugin.py\nindex dee0485a..f9c5ab25 100644\n--- a/src/plone/restapi/pas/plugin.py\n+++ b/src/plone/restapi/pas/plugin.py\n@@ -15,9 +15,9 @@\n from plone.keyring.interfaces import IKeyManager\n from plone.keyring.keyring import GenerateSecret\n from zope.component import getUtility\n-from zope.interface import implements\n-\n+from zope.interface import implementer\n import jwt\n+import six\n import time\n \n \n@@ -39,14 +39,14 @@ def addJWTAuthenticationPlugin(self, id_, title=None, REQUEST=None):\n         )\n \n \n+@implementer(\n+    IAuthenticationPlugin,\n+    IChallengePlugin,\n+    IExtractionPlugin,\n+)\n class JWTAuthenticationPlugin(BasePlugin):\n     """Plone PAS plugin for authentication with JSON web tokens (JWT).\n     """\n-    implements(\n-        IAuthenticationPlugin,\n-        IChallengePlugin,\n-        IExtractionPlugin,\n-    )\n     meta_type = "JWT Authentication Plugin"\n     security = ClassSecurityInfo()\n \n@@ -117,7 +117,9 @@ def authenticateCredentials(self, credentials):\n         if \'sub\' not in payload:\n             return None\n \n-        userid = payload[\'sub\'].encode(\'utf8\')\n+        userid = payload[\'sub\']\n+        if six.PY2:\n+            userid = userid.encode(\'utf8\')\n \n         if self.store_tokens:\n             if userid not in self._tokens:\n@@ -160,6 +162,8 @@ def _decode_token(self, token, verify=True):\n                 token, self._secret + self._path(), verify=verify)\n \n     def _jwt_decode(self, token, secret, verify=True):\n+        if isinstance(token, six.text_type):\n+            token = token.encode(\'utf-8\')\n         try:\n             return jwt.decode(\n                 token, secret, verify=verify, algorithms=[\'HS256\'])\n@@ -196,6 +200,8 @@ def create_token(self, userid, timeout=None, data=None):\n         if data is not None:\n             payload.update(data)\n         token = jwt.encode(payload, self._signing_secret(), algorithm=\'HS256\')\n+        if not six.PY2:\n+            token = token.decode(\'utf-8\')\n         if self.store_tokens:\n             if self._tokens is None:\n                 self._tokens = OOBTree()\ndiff --git a/src/plone/restapi/search/utils.py b/src/plone/restapi/search/utils.py\nindex 6037bcdd..36a08971 100644\n--- a/src/plone/restapi/search/utils.py\n+++ b/src/plone/restapi/search/utils.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from functools import reduce\n \n \n def unflatten_dotted_dict(dct):\ndiff --git a/src/plone/restapi/serializer/atcollection.py b/src/plone/restapi/serializer/atcollection.py\nindex 95e4e935..a7eb2e99 100644\n--- a/src/plone/restapi/serializer/atcollection.py\n+++ b/src/plone/restapi/serializer/atcollection.py\n@@ -15,9 +15,8 @@\n class SerializeCollectionToJson(SerializeToJson):\n \n     def __call__(self, version=None):\n-        collection_metadata = super(SerializeCollectionToJson, self).__call__(\n-            version=version,\n-        )\n+        collection_metadata = super(\n+            SerializeCollectionToJson, self).__call__(version=version)\n         results = self.context.results(batch=False)\n         batch = HypermediaBatch(self.request, results)\n \n@@ -29,7 +28,8 @@ def __call__(self, version=None):\n             results[\'batching\'] = batch.links\n \n         results[\'items\'] = [\n-            getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n+            getMultiAdapter(\n+                (brain, self.request), ISerializeToJsonSummary)()\n             for brain in batch\n         ]\n         return results\ndiff --git a/src/plone/restapi/serializer/atcontent.py b/src/plone/restapi/serializer/atcontent.py\nindex 0721b6b0..92219877 100644\n--- a/src/plone/restapi/serializer/atcontent.py\n+++ b/src/plone/restapi/serializer/atcontent.py\n@@ -56,7 +56,7 @@ def __call__(self, version=None, include_items=False):\n \n         for field in obj.Schema().fields():\n \n-            if \'r\' not in field.mode or not field.checkPermission(\'r\', obj):\n+            if \'r\' not in field.mode or not field.checkPermission(\'r\', obj):  # noqa: E501\n                 continue\n \n             name = field.getName()\n@@ -94,7 +94,8 @@ def __call__(self, version=None, include_items=True):\n         folder_metadata.update({\'is_folderish\': True})\n         result = folder_metadata\n \n-        include_items = self.request.form.get(\'include_items\', include_items)\n+        include_items = self.request.form.get(\n+            \'include_items\', include_items)\n         include_items = boolean_value(include_items)\n         if include_items:\n             query = self._build_query()\ndiff --git a/src/plone/restapi/serializer/atfields.py b/src/plone/restapi/serializer/atfields.py\nindex 8b5396d8..eed63d04 100644\n--- a/src/plone/restapi/serializer/atfields.py\n+++ b/src/plone/restapi/serializer/atfields.py\n@@ -1,4 +1,6 @@\n # -*- coding: utf-8 -*-\n+from six.moves import map\n+\n from Products.Archetypes.interfaces import IBaseObject\n from Products.Archetypes.interfaces.field import IField\n from Products.Archetypes.interfaces.field import IFileField\n@@ -60,7 +62,8 @@ def __call__(self):\n class TextFieldSerializer(DefaultFieldSerializer):\n \n     def __call__(self):\n-        mimetypes_registry = getToolByName(self.context, \'mimetypes_registry\')\n+        mimetypes_registry = getToolByName(\n+            self.context, \'mimetypes_registry\')\n         data = super(TextFieldSerializer, self).__call__()\n         return {\n             \'content-type\': json_compatible(\n@@ -127,4 +130,4 @@ def __call__(self):\n class QueryFieldSerializer(DefaultFieldSerializer):\n     def __call__(self):\n         raw_value = self.field.getRaw(self.context)\n-        return json_compatible(map(dict, raw_value))\n+        return json_compatible(list(map(dict, raw_value)))\ndiff --git a/src/plone/restapi/serializer/catalog.py b/src/plone/restapi/serializer/catalog.py\nindex 8dc82671..da599fe4 100644\n--- a/src/plone/restapi/serializer/catalog.py\n+++ b/src/plone/restapi/serializer/catalog.py\n@@ -31,7 +31,7 @@ def _get_metadata_to_include(self, metadata_fields):\n         if metadata_fields and \'_all\' in metadata_fields:\n             site = getSite()\n             catalog = getToolByName(site, \'portal_catalog\')\n-            metadata_attrs = catalog.schema() + BRAIN_METHODS\n+            metadata_attrs = list(catalog.schema()) + BRAIN_METHODS\n             return metadata_attrs\n \n         return metadata_fields\ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex 91070fc0..041400fc 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -45,7 +45,7 @@\n     <adapter factory=".converters.python_datetime_converter" />\n     <adapter factory=".converters.RichtextDXContextConverter" />\n     <adapter factory=".converters.set_converter" />\n-    <adapter factory=".converters.string_converter" />\n+    <adapter factory=".converters.bytes_converter" />\n     <adapter factory=".converters.time_converter" />\n     <adapter factory=".converters.timedelta_converter" />\n     <adapter factory=".converters.tuple_converter" />\ndiff --git a/src/plone/restapi/serializer/converters.py b/src/plone/restapi/serializer/converters.py\nindex 9948a975..83529679 100644\n--- a/src/plone/restapi/serializer/converters.py\n+++ b/src/plone/restapi/serializer/converters.py\n@@ -21,6 +21,9 @@\n \n import Missing\n import pytz\n+import six\n+from six.moves import map\n+from six.moves import zip\n # import re\n \n \n@@ -75,7 +78,7 @@ def default_converter(value):\n     if value is None:\n         return value\n \n-    if type(value) in (unicode, bool, int, float, long):\n+    if type(value) in (six.text_type, bool, int, float, int):\n         return value\n \n     raise TypeError(\n@@ -83,16 +86,16 @@ def default_converter(value):\n         \' {0!r} ({1}) JSON compatible.\'.format(value, type(value)))\n \n \n-@adapter(str)\n+@adapter(bytes)\n @implementer(IJsonCompatible)\n-def string_converter(value):\n+def bytes_converter(value):\n     return safe_unicode(value, \'utf-8\')\n \n \n @adapter(list)\n @implementer(IJsonCompatible)\n def list_converter(value):\n-    return map(json_compatible, value)\n+    return list(map(json_compatible, value))\n \n \n @adapter(PersistentList)\n@@ -104,19 +107,19 @@ def persistent_list_converter(value):\n @adapter(tuple)\n @implementer(IJsonCompatible)\n def tuple_converter(value):\n-    return map(json_compatible, value)\n+    return list(map(json_compatible, value))\n \n \n @adapter(frozenset)\n @implementer(IJsonCompatible)\n def frozenset_converter(value):\n-    return map(json_compatible, value)\n+    return list(map(json_compatible, value))\n \n \n @adapter(set)\n @implementer(IJsonCompatible)\n def set_converter(value):\n-    return map(json_compatible, value)\n+    return list(map(json_compatible, value))\n \n \n @adapter(dict)\n@@ -125,10 +128,10 @@ def dict_converter(value):\n     if value == {}:\n         return {}\n \n-    keys, values = zip(*value.items())\n-    keys = map(json_compatible, keys)\n-    values = map(json_compatible, values)\n-    return dict(zip(keys, values))\n+    keys, values = list(zip(*list(value.items())))\n+    keys = list(map(json_compatible, keys))\n+    values = list(map(json_compatible, values))\n+    return dict(list(zip(keys, values)))\n \n \n @adapter(PersistentMapping)\ndiff --git a/src/plone/restapi/serializer/dxcontent.py b/src/plone/restapi/serializer/dxcontent.py\nindex c6ad6f53..ad8eae75 100644\n--- a/src/plone/restapi/serializer/dxcontent.py\n+++ b/src/plone/restapi/serializer/dxcontent.py\n@@ -145,7 +145,7 @@ def __call__(self, version=None, include_items=True):\n             if batch.links:\n                 result[\'batching\'] = batch.links\n \n-            if \'fullobjects\' in self.request.form.keys():\n+            if \'fullobjects\' in list(self.request.form):\n                 result[\'items\'] = getMultiAdapter(\n                     (brains, self.request),\n                     ISerializeToJson\ndiff --git a/src/plone/restapi/serializer/expansion.py b/src/plone/restapi/serializer/expansion.py\nindex cdf0eec8..e3cc3d13 100644\n--- a/src/plone/restapi/serializer/expansion.py\n+++ b/src/plone/restapi/serializer/expansion.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.restapi.interfaces import IExpandableElement\n from zope.component import getAdapters\n+import six\n \n \n def expandable_elements(context, request):\n@@ -18,7 +19,7 @@ def expandable_elements(context, request):\n \n \n def update_dict_recursively(d, u):\n-    for key, value in u.iteritems():\n+    for key, value in six.iteritems(u):\n         if isinstance(value, dict):\n             r = update_dict_recursively(d.get(key, {}), value)\n             d[key] = r\ndiff --git a/src/plone/restapi/serializer/registry.py b/src/plone/restapi/serializer/registry.py\nindex 02400890..247ba2d3 100644\n--- a/src/plone/restapi/serializer/registry.py\n+++ b/src/plone/restapi/serializer/registry.py\n@@ -19,7 +19,7 @@ def __init__(self, registry, request):\n     def __call__(self):\n         records = self.registry.records\n         # Batch keys, because that is a simple BTree\n-        batch = HypermediaBatch(self.request, records.keys())\n+        batch = HypermediaBatch(self.request, list(records))\n \n         results = {}\n         results[\'@id\'] = batch.canonical_url\ndiff --git a/src/plone/restapi/services/auth/login.py b/src/plone/restapi/services/auth/login.py\nindex dc4217da..39568e24 100644\n--- a/src/plone/restapi/services/auth/login.py\n+++ b/src/plone/restapi/services/auth/login.py\n@@ -8,6 +8,7 @@\n from zope.interface import alsoProvides\n \n import plone.protect.interfaces\n+import six\n \n \n class Login(Service):\n@@ -26,8 +27,11 @@ def reply(self):\n             alsoProvides(self.request,\n                          plone.protect.interfaces.IDisableCSRFProtection)\n \n-        userid = data[\'login\'].encode(\'utf8\')\n-        password = data[\'password\'].encode(\'utf8\')\n+        userid = data[\'login\']\n+        password = data[\'password\']\n+        if six.PY2:\n+            userid = userid.encode(\'utf8\')\n+            password = password.encode(\'utf8\')\n         uf = self._find_userfolder(userid)\n \n         if uf is not None:\ndiff --git a/src/plone/restapi/services/content/add.py b/src/plone/restapi/services/content/add.py\nindex efb2086f..1f51413f 100644\n--- a/src/plone/restapi/services/content/add.py\n+++ b/src/plone/restapi/services/content/add.py\n@@ -44,12 +44,12 @@ def reply(self):\n             self.request.response.setStatus(403)\n             return dict(error=dict(\n                 type=\'Forbidden\',\n-                message=exc.message))\n+                message=str(exc)))\n         except BadRequest as exc:\n             self.request.response.setStatus(400)\n             return dict(error=dict(\n                 type=\'Bad Request\',\n-                message=exc.message))\n+                message=str(exc)))\n \n         # Acquisition wrap temporarily to satisfy things like vocabularies\n         # depending on tools\ndiff --git a/src/plone/restapi/services/content/tus.py b/src/plone/restapi/services/content/tus.py\nindex ee37c13b..49139a99 100644\n--- a/src/plone/restapi/services/content/tus.py\n+++ b/src/plone/restapi/services/content/tus.py\n@@ -15,7 +15,7 @@\n from uuid import uuid4\n from zExceptions import Unauthorized\n from zope.component import queryMultiAdapter\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.publisher.interfaces import NotFound\n from zope.lifecycleevent import ObjectCreatedEvent\n@@ -106,7 +106,9 @@ def reply(self):\n         for item in self.request.getHeader(\'Upload-Metadata\', \'\').split(\',\'):\n             key_value = item.split()\n             if len(key_value) == 2:\n-                metadata[key_value[0].lower()] = b64decode(key_value[1])\n+                key = key_value[0].lower()\n+                value = b64decode(key_value[1]).decode(\'utf-8\')\n+                metadata[key] = value\n         metadata[\'length\'] = length\n         if self.__name__.endswith(\'@tus-replace\'):\n             metadata[\'mode\'] = \'replace\'\n@@ -123,8 +125,8 @@ def reply(self):\n         return super(UploadPost, self).reply()\n \n \n+@implementer(IPublishTraverse)\n class UploadFileBase(TUSBaseService):\n-    implements(IPublishTraverse)\n \n     def __init__(self, context, request):\n         super(UploadFileBase, self).__init__(context, request)\n@@ -183,11 +185,10 @@ def reply(self):\n         return super(UploadHead, self).reply()\n \n \n+@implementer(IPublishTraverse)\n class UploadPatch(UploadFileBase):\n     """TUS upload endpoint for handling PATCH requests"""\n \n-    implements(IPublishTraverse)\n-\n     def reply(self):\n \n         tus_upload = self.tus_upload()\n@@ -212,7 +213,10 @@ def reply(self):\n             return self.error(\n                 \'Bad Request\', \'Missing or invalid Upload-Offset header\')\n \n-        tus_upload.write(self.request._file, offset)\n+        request_body = self.request._file\n+        if hasattr(request_body, \'raw\'):  # Unwrap io.BufferedRandom\n+            request_body = request_body.raw\n+        tus_upload.write(request_body, offset)\n \n         if tus_upload.finished:\n             offset = tus_upload.offset()\n@@ -306,7 +310,7 @@ def __init__(self, uid, metadata=None):\n     def initalize(self, metadata):\n         """Initialize a new TUS upload by writing its metadata to disk."""\n         self.cleanup_expired()\n-        with open(self.metadata_path, \'wb\') as f:\n+        with open(self.metadata_path, \'w\') as f:\n             json.dump(metadata, f)\n \n     def length(self):\ndiff --git a/src/plone/restapi/services/content/utils.py b/src/plone/restapi/services/content/utils.py\nindex d8fc1025..d4111d65 100644\n--- a/src/plone/restapi/services/content/utils.py\n+++ b/src/plone/restapi/services/content/utils.py\n@@ -15,6 +15,8 @@\n from zope.container.interfaces import INameChooser\n from zope.event import notify\n \n+import six\n+\n \n def create(container, type_, id_=None, title=None):\n     """Create a new content item."""\n@@ -28,7 +30,7 @@ def create(container, type_, id_=None, title=None):\n             str(now.millis())[7:],\n             randint(0, 9999))\n     else:\n-        if isinstance(id_, unicode):\n+        if six.PY2 and isinstance(id_, six.text_type):\n             new_id = id_.encode(\'utf8\')\n         else:\n             new_id = id_\ndiff --git a/src/plone/restapi/services/copymove/copymove.py b/src/plone/restapi/services/copymove/copymove.py\nindex bb537dad..5e12ea4c 100644\n--- a/src/plone/restapi/services/copymove/copymove.py\n+++ b/src/plone/restapi/services/copymove/copymove.py\n@@ -9,6 +9,7 @@\n from zope.security import checkPermission\n \n import plone\n+import six\n \n \n class BaseCopyMove(Service):\n@@ -24,15 +25,19 @@ def __init__(self, context, request):\n \n     def get_object(self, key):\n         """Get an object by url, path or UID."""\n-        if isinstance(key, basestring):\n+        if isinstance(key, six.string_types):\n             if key.startswith(self.portal_url):\n                 # Resolve by URL\n-                return self.portal.restrictedTraverse(\n-                    key[len(self.portal_url) + 1:].encode(\'utf8\'), None)\n+                key = key[len(self.portal_url) + 1:]\n+                if six.PY2:\n+                    key = key.encode(\'utf8\')\n+                return self.portal.restrictedTraverse(key, None)\n             elif key.startswith(\'/\'):\n+                if six.PY2:\n+                    key = key.encode(\'utf8\')\n                 # Resolve by path\n                 return self.portal.restrictedTraverse(\n-                    key.encode(\'utf8\').lstrip(\'/\'), None)\n+                    key.lstrip(\'/\'), None)\n             else:\n                 # Resolve by UID\n                 brain = self.catalog(UID=key)\ndiff --git a/src/plone/restapi/services/discussion/conversation.py b/src/plone/restapi/services/discussion/conversation.py\nindex 051749a2..1857f226 100644\n--- a/src/plone/restapi/services/discussion/conversation.py\n+++ b/src/plone/restapi/services/discussion/conversation.py\n@@ -39,7 +39,7 @@ class CommentsGet(Service):\n \n     def publishTraverse(self, request, name):\n         if name:\n-            self.comment_id = long(name)\n+            self.comment_id = int(name)\n         return self\n \n     def reply(self):\n@@ -64,7 +64,7 @@ class CommentsAdd(Service):\n \n     def publishTraverse(self, request, name):\n         if name:\n-            self.comment_id = long(name)\n+            self.comment_id = int(name)\n             request[\'form.widgets.in_reply_to\'] = name\n         return self\n \n@@ -75,7 +75,7 @@ def reply(self):\n                          plone.protect.interfaces.IDisableCSRFProtection)\n \n         conversation = IConversation(self.context)\n-        if self.comment_id and self.comment_id not in conversation.keys():\n+        if self.comment_id and self.comment_id not in list(conversation):\n             self.request.response.setStatus(404)\n             return\n \n@@ -104,7 +104,7 @@ class CommentsUpdate(Service):\n \n     def publishTraverse(self, request, name):\n         if name:\n-            self.comment_id = long(name)\n+            self.comment_id = int(name)\n             request[\'form.widgets.comment_id\'] = name\n         return self\n \n@@ -113,7 +113,7 @@ def reply(self):\n             raise BadRequest("Comment id is a required part of the url")\n \n         conversation = IConversation(self.context)\n-        if self.comment_id not in conversation.keys():\n+        if self.comment_id not in list(conversation):\n             self.request.response.setStatus(404)\n             return\n         comment = conversation[self.comment_id]\n@@ -148,7 +148,7 @@ class CommentsDelete(Service):\n     comment_id = None\n \n     def publishTraverse(self, request, name):\n-        self.comment_id = long(name)\n+        self.comment_id = int(name)\n         return self\n \n     def reply(self):\ndiff --git a/src/plone/restapi/services/email_send/post.py b/src/plone/restapi/services/email_send/post.py\nindex 94d37d8d..f142e1be 100644\n--- a/src/plone/restapi/services/email_send/post.py\n+++ b/src/plone/restapi/services/email_send/post.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from AccessControl.Permissions import use_mailhost_services\n-from email.MIMEText import MIMEText\n+from email.mime.text import MIMEText\n from plone.registry.interfaces import IRegistry\n from plone.restapi import _\n from plone.restapi.deserializer import json_body\ndiff --git a/src/plone/restapi/services/groups/delete.py b/src/plone/restapi/services/groups/delete.py\nindex 11bde167..13b7046a 100644\n--- a/src/plone/restapi/services/groups/delete.py\n+++ b/src/plone/restapi/services/groups/delete.py\n@@ -3,16 +3,15 @@\n from Products.CMFCore.utils import getToolByName\n from zExceptions import NotFound\n from zope.component.hooks import getSite\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n \n+@implementer(IPublishTraverse)\n class GroupsDelete(Service):\n     """Deletes a user.\n     """\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(GroupsDelete, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/groups/get.py b/src/plone/restapi/services/groups/get.py\nindex 0c099e6c..0b7c88cd 100644\n--- a/src/plone/restapi/services/groups/get.py\n+++ b/src/plone/restapi/services/groups/get.py\n@@ -6,16 +6,15 @@\n from zExceptions import BadRequest\n from zope.component.hooks import getSite\n from zope.component import queryMultiAdapter\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n DEFAULT_SEARCH_RESULTS_LIMIT = 25\n \n \n+@implementer(IPublishTraverse)\n class GroupsGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(GroupsGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/groups/update.py b/src/plone/restapi/services/groups/update.py\nindex 863bc42c..46b22e09 100644\n--- a/src/plone/restapi/services/groups/update.py\n+++ b/src/plone/restapi/services/groups/update.py\n@@ -4,18 +4,17 @@\n from Products.CMFCore.utils import getToolByName\n from zExceptions import BadRequest\n from zope.component.hooks import getSite\n-from zope.interface import alsoProvides, implements\n+from zope.interface import alsoProvides, implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n import plone\n \n \n+@implementer(IPublishTraverse)\n class GroupsPatch(Service):\n     """Updates an existing group.\n     """\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(GroupsPatch, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/history/get.py b/src/plone/restapi/services/history/get.py\nindex 8b7936ef..4354a288 100644\n--- a/src/plone/restapi/services/history/get.py\n+++ b/src/plone/restapi/services/history/get.py\n@@ -9,6 +9,7 @@\n from zope.publisher.interfaces import IPublishTraverse\n from Products.CMFPlone.utils import safe_unicode\n from datetime import datetime as dt\n+import six\n \n \n @implementer(IPublishTraverse)\n@@ -74,7 +75,7 @@ def reply(self):\n \n             # Versioning entries use a timestamp,\n             # workflow ISO formatted string\n-            if not isinstance(item[\'time\'], basestring):\n+            if not isinstance(item[\'time\'], six.string_types):\n                 item[\'time\'] = dt.fromtimestamp(item[\'time\']).isoformat()\n \n             # The create event has an empty \'action\', but we like it to say\ndiff --git a/src/plone/restapi/services/history/patch.py b/src/plone/restapi/services/history/patch.py\nindex 062b5c58..0b759a2b 100644\n--- a/src/plone/restapi/services/history/patch.py\n+++ b/src/plone/restapi/services/history/patch.py\n@@ -6,6 +6,7 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFEditions import CMFEditionsMessageFactory as _\n from Products.CMFEditions.interfaces.IModifier import FileTooLargeToVersionError  # noqa\n+import six\n \n \n class HistoryPatch(Service):\n@@ -21,8 +22,8 @@ def revert(context, version):\n     pr.revert(context, version)\n \n     title = context.title_or_id()\n-    if not isinstance(title, unicode):\n-        title = unicode(title, \'utf-8\', \'ignore\')\n+    if not isinstance(title, six.text_type):\n+        title = six.text_type(title, \'utf-8\', \'ignore\')\n \n     if pr.supportsPolicy(context, \'version_on_revert\'):\n         try:\ndiff --git a/src/plone/restapi/services/multilingual/pam.py b/src/plone/restapi/services/multilingual/pam.py\nindex 6a378128..bd2ec0e8 100644\n--- a/src/plone/restapi/services/multilingual/pam.py\n+++ b/src/plone/restapi/services/multilingual/pam.py\n@@ -125,7 +125,7 @@ def reply(self):\n                 type=\'BadRequest\',\n                 message=\'You need to provide the language to unlink\'))\n \n-        if language not in manager.get_translations().keys():\n+        if language not in list(manager.get_translations()):\n             self.request.response.setStatus(400)\n             return dict(error=dict(\n                 type=\'BadRequest\',\ndiff --git a/src/plone/restapi/services/registry/get.py b/src/plone/restapi/services/registry/get.py\nindex 5e8a39dd..ed53e17d 100644\n--- a/src/plone/restapi/services/registry/get.py\n+++ b/src/plone/restapi/services/registry/get.py\n@@ -2,15 +2,14 @@\n from plone.registry.interfaces import IRegistry\n from plone.restapi.services import Service\n from zope.component import getUtility, getMultiAdapter\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from plone.restapi.interfaces import ISerializeToJson\n \n \n+@implementer(IPublishTraverse)\n class RegistryGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(RegistryGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/tiles/get.py b/src/plone/restapi/services/tiles/get.py\nindex 2cdf443e..0da486c7 100644\n--- a/src/plone/restapi/services/tiles/get.py\n+++ b/src/plone/restapi/services/tiles/get.py\n@@ -6,15 +6,14 @@\n from plone.tiles.interfaces import ITileType\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.restapi.interfaces import ISerializeToJson\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.component import getUtility\n \n \n+@implementer(IPublishTraverse)\n class TilesGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(TilesGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/types/get.py b/src/plone/restapi/services/types/get.py\nindex 9b252ecb..64da46ab 100644\n--- a/src/plone/restapi/services/types/get.py\n+++ b/src/plone/restapi/services/types/get.py\n@@ -7,15 +7,14 @@\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.i18n import translate\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.schema.interfaces import IVocabularyFactory\n \n \n+@implementer(IPublishTraverse)\n class TypesGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(TypesGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex d9103c0f..8f924966 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -14,7 +14,7 @@\n from zope.component import queryMultiAdapter\n from zope.component.hooks import getSite\n from zope.interface import alsoProvides\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n import plone.protect.interfaces\n@@ -36,12 +36,11 @@\n PLONE5 = getFSVersionTuple()[0] >= 5\n \n \n+@implementer(IPublishTraverse)\n class UsersPost(Service):\n     """Creates a new user.\n     """\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(UsersPost, self).__init__(context, request)\n         self.params = []\n@@ -211,7 +210,7 @@ def reply(self):\n             self.request.response.setStatus(400)\n             return dict(error=dict(\n                 type=\'MissingParameterError\',\n-                message=str(e.message)))\n+                message=str(e)))\n \n         if PLONE5:\n             # After user creation, we have to fix the login_name if it differs.\n@@ -281,7 +280,7 @@ def update_password(self, data):\n             return\n \n         # Send password reset mail\n-        if data.keys() == []:\n+        if list(data) == []:\n             registration_tool = getToolByName(self.context,\n                                               \'portal_registration\')\n             registration_tool.mailPassword(username, self.request)\ndiff --git a/src/plone/restapi/services/users/delete.py b/src/plone/restapi/services/users/delete.py\nindex 92e17bd6..35fc3145 100644\n--- a/src/plone/restapi/services/users/delete.py\n+++ b/src/plone/restapi/services/users/delete.py\n@@ -2,16 +2,15 @@\n from plone.restapi.services import Service\n from Products.CMFCore.utils import getToolByName\n from zope.component.hooks import getSite\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n \n+@implementer(IPublishTraverse)\n class UsersDelete(Service):\n     """Deletes a user.\n     """\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(UsersDelete, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex e1a6b8e9..fa91577a 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -6,16 +6,15 @@\n from zExceptions import BadRequest\n from zope.component.hooks import getSite\n from zope.component import queryMultiAdapter\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n DEFAULT_SEARCH_RESULTS_LIMIT = 25\n \n \n+@implementer(IPublishTraverse)\n class UsersGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(UsersGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/users/update.py b/src/plone/restapi/services/users/update.py\nindex 9ffd2970..41c50e13 100644\n--- a/src/plone/restapi/services/users/update.py\n+++ b/src/plone/restapi/services/users/update.py\n@@ -6,7 +6,7 @@\n from Products.CMFCore.utils import getToolByName\n from zope.component.hooks import getSite\n from zope.interface import alsoProvides\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.component import getAdapter\n \n@@ -19,12 +19,11 @@\n     from plone.app.controlpanel.security import ISecuritySchema\n \n \n+@implementer(IPublishTraverse)\n class UsersPatch(Service):\n     """Updates an existing user.\n     """\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(UsersPatch, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/vocabularies/get.py b/src/plone/restapi/services/vocabularies/get.py\nindex ba88c03d..48233e6d 100644\n--- a/src/plone/restapi/services/vocabularies/get.py\n+++ b/src/plone/restapi/services/vocabularies/get.py\n@@ -4,16 +4,15 @@\n from zope.component import ComponentLookupError\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.schema.interfaces import IVocabularyFactory\n from zope.component import getUtilitiesFor\n \n \n+@implementer(IPublishTraverse)\n class VocabulariesGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(VocabulariesGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/workflow/info.py b/src/plone/restapi/services/workflow/info.py\nindex ac8fd1e1..25a2aa94 100644\n--- a/src/plone/restapi/services/workflow/info.py\n+++ b/src/plone/restapi/services/workflow/info.py\n@@ -8,6 +8,7 @@\n from zope.component import adapter\n from zope.interface import Interface\n from zope.interface import implementer\n+import six\n \n \n @implementer(IExpandableElement)\n@@ -39,20 +40,24 @@ def __call__(self, expand=False):\n             if action[\'category\'] != \'workflow\':\n                 continue\n \n+            title = action[\'title\']\n+            if isinstance(title, six.binary_type):\n+                title = title.decode(\'utf8\')\n+\n             transitions.append({\n                 \'@id\': \'{}/@workflow/{}\'.format(\n                     self.context.absolute_url(), action[\'id\']),\n-                \'title\': self.context.translate(\n-                    action[\'title\'].decode(\'utf8\')),\n+                \'title\': self.context.translate(title),\n             })\n \n         for item, action in enumerate(history):\n-            history[item][\'title\'] = self.context.translate(\n-                wftool.getTitleForStateOnType(\n-                    action[\'review_state\'],\n-                    self.context.portal_type\n-                ).decode(\'utf8\')\n+            title = wftool.getTitleForStateOnType(\n+                action[\'review_state\'],\n+                self.context.portal_type\n             )\n+            if isinstance(title, six.binary_type):\n+                title = title.decode(\'utf8\')\n+            history[item][\'title\'] = self.context.translate(title)\n \n         result[\'workflow\'].update({\n             \'history\': json_compatible(history),\ndiff --git a/src/plone/restapi/services/workflow/transition.py b/src/plone/restapi/services/workflow/transition.py\nindex 8b034300..fc09edb2 100644\n--- a/src/plone/restapi/services/workflow/transition.py\n+++ b/src/plone/restapi/services/workflow/transition.py\n@@ -10,17 +10,17 @@\n from zope.component import queryMultiAdapter\n from zope.i18n import translate\n from zope.interface import alsoProvides\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.publisher.interfaces import NotFound\n \n import plone.protect.interfaces\n \n \n+@implementer(IPublishTraverse)\n class WorkflowTransition(Service):\n     """Trigger workflow transition\n     """\n-    implements(IPublishTraverse)\n \n     def __init__(self, context, request):\n         super(WorkflowTransition, self).__init__(context, request)\n@@ -69,7 +69,7 @@ def reply(self):\n             self.request.response.setStatus(400)\n             return dict(error=dict(\n                 type=\'WorkflowException\',\n-                message=translate(e.message, context=self.request)))\n+                message=translate(str(e), context=self.request)))\n         except BadRequest as e:\n             self.request.response.setStatus(400)\n             return dict(error=dict(\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex e37032ce..4786c426 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -23,12 +23,12 @@\n from plone.testing.layer import Layer\n from plone.uuid.interfaces import IUUIDGenerator\n from Products.CMFCore.utils import getToolByName\n-from urlparse import urljoin\n-from urlparse import urlparse\n+from six.moves.urllib.parse import urljoin\n+from six.moves.urllib.parse import urlparse\n from zope.component import getGlobalSiteManager\n from zope.component import getUtility\n from zope.configuration import xmlconfig\n-from zope.interface import implements\n+from zope.interface import implementer\n \n import collective.MockMailHost\n import pkg_resources\n@@ -52,6 +52,12 @@\n else:\n     PLONE_5 = True  # pragma: no cover\n \n+try:\n+    pkg_resources.get_distribution(\'Products.Archetypes\')\n+except pkg_resources.DistributionNotFound:\n+    HAS_AT = False\n+else:\n+    HAS_AT = True\n \n ENABLED_LANGUAGES = [\'de\', \'en\', \'es\', \'fr\']\n \n@@ -253,58 +259,61 @@ def setUpPloneSite(self, portal):\n )\n \n \n-class PloneRestApiATLayer(PloneSandboxLayer):\n-\n-    defaultBases = (DATE_TIME_FIXTURE, PLONE_FIXTURE,)\n-\n-    def setUpZope(self, app, configurationContext):\n-        import Products.ATContentTypes\n-        self.loadZCML(package=Products.ATContentTypes)\n-        import plone.app.dexterity\n-        self.loadZCML(package=plone.app.dexterity)\n-\n-        import plone.restapi\n-        xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.restapi,\n-            context=configurationContext\n-        )\n-\n-        z2.installProduct(app, \'Products.Archetypes\')\n-        z2.installProduct(app, \'Products.ATContentTypes\')\n-        z2.installProduct(app, \'plone.app.collection\')\n-        z2.installProduct(app, \'plone.app.blob\')\n-        z2.installProduct(app, \'plone.restapi\')\n-\n-    def setUpPloneSite(self, portal):\n-        set_supported_languages(portal)\n-\n-        if portal.portal_setup.profileExists(\n-                \'Products.ATContentTypes:default\'):\n-            applyProfile(portal, \'Products.ATContentTypes:default\')\n-        if portal.portal_setup.profileExists(\n-                \'plone.app.collection:default\'):\n-            applyProfile(portal, \'plone.app.collection:default\')\n-\n-        applyProfile(portal, \'plone.app.dexterity:default\')\n-        applyProfile(portal, \'plone.restapi:default\')\n-        applyProfile(portal, \'plone.restapi:testing\')\n-        set_available_languages()\n-        enable_request_language_negotiation(portal)\n-        portal.portal_workflow.setDefaultChain("simple_publication_workflow")\n-        states = portal.portal_workflow[\'simple_publication_workflow\'].states\n-        states[\'published\'].title = u\'Published with accent \xc3\xa9\'.encode(\'utf8\')\n-\n-\n-PLONE_RESTAPI_AT_FIXTURE = PloneRestApiATLayer()\n-PLONE_RESTAPI_AT_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_RESTAPI_AT_FIXTURE,),\n-    name="PloneRestApiATLayer:Integration"\n-)\n-PLONE_RESTAPI_AT_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_AT_FIXTURE, z2.ZSERVER_FIXTURE),\n-    name="PloneRestApiATLayer:Functional"\n-)\n+if HAS_AT:\n+    class PloneRestApiATLayer(PloneSandboxLayer):\n+\n+        defaultBases = (DATE_TIME_FIXTURE, PLONE_FIXTURE,)\n+\n+        def setUpZope(self, app, configurationContext):\n+            import Products.ATContentTypes\n+            self.loadZCML(package=Products.ATContentTypes)\n+            import plone.app.dexterity\n+            self.loadZCML(package=plone.app.dexterity)\n+\n+            import plone.restapi\n+            xmlconfig.file(\n+                \'configure.zcml\',\n+                plone.restapi,\n+                context=configurationContext\n+            )\n+\n+            z2.installProduct(app, \'Products.Archetypes\')\n+            z2.installProduct(app, \'Products.ATContentTypes\')\n+            z2.installProduct(app, \'plone.app.collection\')\n+            z2.installProduct(app, \'plone.app.blob\')\n+            z2.installProduct(app, \'plone.restapi\')\n+\n+        def setUpPloneSite(self, portal):\n+            set_supported_languages(portal)\n+\n+            if portal.portal_setup.profileExists(\n+                    \'Products.ATContentTypes:default\'):\n+                applyProfile(portal, \'Products.ATContentTypes:default\')\n+            if portal.portal_setup.profileExists(\n+                    \'plone.app.collection:default\'):\n+                applyProfile(portal, \'plone.app.collection:default\')\n+\n+            applyProfile(portal, \'plone.app.dexterity:default\')\n+            applyProfile(portal, \'plone.restapi:default\')\n+            applyProfile(portal, \'plone.restapi:testing\')\n+            set_available_languages()\n+            enable_request_language_negotiation(portal)\n+            portal.portal_workflow.setDefaultChain(\'simple_publication_workflow\')  # noqa: E501\n+            states = portal.portal_workflow[\'simple_publication_workflow\'].states  # noqa: E501\n+            states[\'published\'].title = u\'Published with accent \xc3\xa9\'.encode(\'utf8\')  # noqa: E501\n+\n+    PLONE_RESTAPI_AT_FIXTURE = PloneRestApiATLayer()\n+    PLONE_RESTAPI_AT_INTEGRATION_TESTING = IntegrationTesting(\n+        bases=(PLONE_RESTAPI_AT_FIXTURE,),\n+        name="PloneRestApiATLayer:Integration"\n+    )\n+    PLONE_RESTAPI_AT_FUNCTIONAL_TESTING = FunctionalTesting(\n+        bases=(PLONE_RESTAPI_AT_FIXTURE, z2.ZSERVER_FIXTURE),\n+        name="PloneRestApiATLayer:Functional"\n+    )\n+else:\n+    PLONE_RESTAPI_AT_INTEGRATION_TESTING = PLONE_FIXTURE\n+    PLONE_RESTAPI_AT_FUNCTIONAL_TESTING = PLONE_FIXTURE\n \n \n class PloneRestApiTilesLayer(PloneSandboxLayer):\n@@ -350,14 +359,13 @@ def request(self, method, url, **kwargs):\n         return super(RelativeSession, self).request(method, url, **kwargs)\n \n \n+@implementer(IUUIDGenerator)\n class StaticUUIDGenerator(object):\n     """UUID generator that produces stable UUIDs for use in tests.\n \n     Based on code from ftw.testing\n     """\n \n-    implements(IUUIDGenerator)\n-\n     def __init__(self, prefix):\n         self.prefix = prefix[:26]\n         self.counter = 0\ndiff --git a/src/plone/restapi/tests/helpers.py b/src/plone/restapi/tests/helpers.py\nindex f0ca5d9f..49ea7049 100644\n--- a/src/plone/restapi/tests/helpers.py\n+++ b/src/plone/restapi/tests/helpers.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n-from urlparse import urlparse\n+from six.moves.urllib.parse import urlparse\n \n \n def result_paths(results):\ndiff --git a/src/plone/restapi/tests/mixin_ordering.py b/src/plone/restapi/tests/mixin_ordering.py\nindex 180cc0e8..e96de6ff 100644\n--- a/src/plone/restapi/tests/mixin_ordering.py\n+++ b/src/plone/restapi/tests/mixin_ordering.py\n@@ -10,7 +10,7 @@ class OrderingMixin():\n     def test_reorder(self):\n         # We run all this in one test, because of dependend ordering.\n         # initial situation\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', \'doc9\', ],  # noqa\n             self.folder.contentIds()\n         )\n@@ -19,7 +19,7 @@ def test_reorder(self):\n         # Move to top\n         data = {\'ordering\': {\'delta\': \'top\', \'obj_id\': \'doc9\'}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc9\', \'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', ],  # noqa\n             self.folder.contentIds()\n         )\n@@ -27,7 +27,7 @@ def test_reorder(self):\n         # Move to bottom\n         data = {\'ordering\': {\'delta\': \'bottom\', \'obj_id\': \'doc9\'}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', \'doc9\', ],  # noqa\n             self.folder.contentIds()\n         )\n@@ -35,7 +35,7 @@ def test_reorder(self):\n         # Delta up\n         data = {\'ordering\': {\'delta\': -2, \'obj_id\': \'doc5\'}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc5\', \'doc3\', \'doc4\', \'doc6\', \'doc7\', \'doc8\', \'doc9\', ],  # noqa\n             self.folder.contentIds()\n         )\n@@ -43,7 +43,7 @@ def test_reorder(self):\n         # Delta down\n         data = {\'ordering\': {\'delta\': 2, \'obj_id\': \'doc6\'}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc5\', \'doc3\', \'doc4\', \'doc7\', \'doc8\', \'doc6\', \'doc9\', ],  # noqa\n             self.folder.contentIds()\n         )\n@@ -52,7 +52,7 @@ def test_reorder(self):\n         # Move to top\n         data = {\'ordering\': {\'delta\': \'top\', \'obj_id\': \'doc8\', \'subset_ids\': [\'doc2\', \'doc3\', \'doc8\']}}  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc8\', \'doc5\', \'doc2\', \'doc4\', \'doc7\', \'doc3\', \'doc6\', \'doc9\'],  # noqa\n             self.folder.contentIds()\n         )\n@@ -60,7 +60,7 @@ def test_reorder(self):\n         # Move to bottom\n         data = {\'ordering\': {\'delta\': \'bottom\', \'obj_id\': \'doc8\', \'subset_ids\': [\'doc8\', \'doc2\', \'doc3\']}}  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc5\', \'doc3\', \'doc4\', \'doc7\', \'doc8\', \'doc6\', \'doc9\'],  # noqa\n             self.folder.contentIds()\n         )\n@@ -68,7 +68,7 @@ def test_reorder(self):\n         # Delta up\n         data = {\'ordering\': {\'delta\': -1, \'obj_id\': \'doc8\', \'subset_ids\': [\'doc2\', \'doc3\', \'doc8\']}}  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc5\', \'doc8\', \'doc4\', \'doc7\', \'doc3\', \'doc6\', \'doc9\'],  # noqa\n             self.folder.contentIds()\n         )\n@@ -76,14 +76,14 @@ def test_reorder(self):\n         # Delta down\n         data = {\'ordering\': {\'delta\': 1, \'obj_id\': \'doc2\', \'subset_ids\': [\'doc2\', \'doc8\', \'doc3\']}}  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc8\', \'doc5\', \'doc2\', \'doc4\', \'doc7\', \'doc3\', \'doc6\', \'doc9\'],  # noqa\n             self.folder.contentIds()\n         )\n \n     def test_reorder_subsetids(self):\n         # sanity check, initial situation\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', \'doc9\'],  # noqa\n             self.folder.contentIds()\n         )\n@@ -93,7 +93,7 @@ def test_reorder_subsetids(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=json.dumps(data), context=self.folder)\n \n-        self.assertEquals(\n+        self.assertEqual(\n             u\'Client/server ordering mismatch\',\n-            cm.exception.message\n+            str(cm.exception)\n         )\ndiff --git a/src/plone/restapi/tests/performance.py b/src/plone/restapi/tests/performance.py\nindex 53ad641a..c3e4b85b 100644\n--- a/src/plone/restapi/tests/performance.py\n+++ b/src/plone/restapi/tests/performance.py\n@@ -7,6 +7,7 @@\n \n import os\n import pytz\n+from six.moves import range\n \n LOREMIPSUM_HTML_10_PARAGRAPHS = \'\'\'<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.</p><p>Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.</p><p>Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis.</p><p>At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, At accusam aliquyam diam diam dolore dolores duo eirmod eos erat, et nonumy sed tempor et et invidunt justo labore Stet clita ea et gubergren, kasd magna no rebum. sanctus sea sed takimata ut vero voluptua. est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat.</p><p>Consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus.</p><p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.</p><p>Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.\'\'\'  # noqa\n \ndiff --git a/src/plone/restapi/tests/test_atcollection.py b/src/plone/restapi/tests/test_atcollection.py\nindex 2b55b4b5..9d6ca5f0 100644\n--- a/src/plone/restapi/tests/test_atcollection.py\n+++ b/src/plone/restapi/tests/test_atcollection.py\n@@ -3,6 +3,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n from plone.restapi.interfaces import ISerializeToJson\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from zope.component import getMultiAdapter\n \n@@ -14,6 +15,8 @@ class TestATContentSerializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\ndiff --git a/src/plone/restapi/tests/test_atcontent_deserializer.py b/src/plone/restapi/tests/test_atcontent_deserializer.py\nindex 56e74894..8f9e79bb 100644\n--- a/src/plone/restapi/tests/test_atcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_deserializer.py\n@@ -1,11 +1,8 @@\n # -*- coding: utf-8 -*-\n-from Products.Archetypes.interfaces import IBaseObject\n-from Products.Archetypes.interfaces import IObjectEditedEvent\n-from Products.Archetypes.interfaces import IObjectInitializedEvent\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n-from plone.restapi.deserializer.atcontent import ValidationRequest\n from plone.restapi.interfaces import IDeserializeFromJson\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.tests.mixin_ordering import OrderingMixin\n from zExceptions import BadRequest\n@@ -14,11 +11,17 @@\n from zope.component import provideSubscriptionAdapter\n from zope.component import adapter\n from zope.interface import implementer\n-from Products.Archetypes.interfaces import IObjectPostValidation\n-from Products.Archetypes.interfaces import IObjectPreValidation\n-\n \n import unittest\n+from six.moves import range\n+\n+if HAS_AT:\n+    from plone.restapi.deserializer.atcontent import ValidationRequest\n+    from Products.Archetypes.interfaces import IBaseObject\n+    from Products.Archetypes.interfaces import IObjectEditedEvent\n+    from Products.Archetypes.interfaces import IObjectInitializedEvent\n+    from Products.Archetypes.interfaces import IObjectPostValidation\n+    from Products.Archetypes.interfaces import IObjectPreValidation\n \n \n class TestATContentDeserializer(unittest.TestCase, OrderingMixin):\n@@ -26,6 +29,8 @@ class TestATContentDeserializer(unittest.TestCase, OrderingMixin):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n@@ -56,18 +61,18 @@ def deserialize(self, body=\'{}\', validate_all=False, create=False,\n     def test_deserializer_ignores_readonly_fields(self):\n         self.doc1.getField(\'testReadonlyField\').set(self.doc1, \'Readonly\')\n         self.deserialize(body=\'{"testReadonlyField": "Changed"}\')\n-        self.assertEquals(\'Readonly\', self.doc1.getTestReadonlyField())\n+        self.assertEqual(\'Readonly\', self.doc1.getTestReadonlyField())\n \n     def test_deserializer_updates_field_value(self):\n         self.deserialize(body=\'{"testStringField": "Updated"}\')\n-        self.assertEquals(\'Updated\', self.doc1.getTestStringField())\n+        self.assertEqual(\'Updated\', self.doc1.getTestStringField())\n \n     def test_deserializer_validates_content(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"testURLField": "Not an URL"}\')\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Validation failed(isURL): \'Not an URL\' is not a valid url.",\n-            cm.exception.message[0][\'message\'])\n+            cm.exception.args[0][0][\'message\'])\n \n     def test_deserializer_clears_creation_flag(self):\n         self.doc1.markCreationFlag()\n@@ -97,13 +102,15 @@ def test_deserializer_raises_if_required_value_is_missing(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"testStringField": "My Value"}\',\n                              validate_all=True)\n-        self.assertEquals(u\'TestRequiredField is required, please correct.\',\n-                          cm.exception.message[0][\'message\'])\n+        self.assertEqual(\n+            u\'TestRequiredField is required, please correct.\',\n+            cm.exception.args[0][0][\'message\']\n+        )\n \n     def test_deserializer_succeeds_if_required_value_is_provided(self):\n         self.deserialize(body=\'{"testRequiredField": "My Value"}\',\n                          validate_all=True)\n-        self.assertEquals(u\'My Value\', self.portal.doc1.getTestRequiredField())\n+        self.assertEqual(u\'My Value\', self.portal.doc1.getTestRequiredField())\n \n     def test_post_validation(self):\n \n@@ -123,8 +130,8 @@ def __call__(self, request):\n             self.deserialize(body=\'{"testRequiredField": "My Value"}\',\n                              validate_all=True)\n \n-        self.assertEquals(\n-            \'post_validation_error\', cm.exception.message[0][\'message\'])\n+        self.assertEqual(\n+            \'post_validation_error\', cm.exception.args[0][0][\'message\'])\n \n     def test_pre_validation(self):\n \n@@ -144,14 +151,14 @@ def __call__(self, request):\n             self.deserialize(body=\'{"testRequiredField": "My Value"}\',\n                              validate_all=True)\n \n-        self.assertEquals(\n-            \'pre_validation_error\', cm.exception.message[0][\'message\'])\n+        self.assertEqual(\n+            \'pre_validation_error\', cm.exception.args[0][0][\'message\'])\n \n     def test_set_layout(self):\n         current_layout = self.doc1.getLayout()\n         self.assertNotEquals(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n-        self.assertEquals(\'my_new_layout\', self.doc1.getLayout())\n+        self.assertEqual(\'my_new_layout\', self.doc1.getLayout())\n \n \n class TestValidationRequest(unittest.TestCase):\n@@ -159,6 +166,8 @@ class TestValidationRequest(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n         self.doc1 = self.portal[self.portal.invokeFactory(\n@@ -166,16 +175,16 @@ def setUp(self):\n         self.request = ValidationRequest(self.layer[\'request\'], self.doc1)\n \n     def test_value_from_validation_request_using_key_access(self):\n-        self.assertEquals(\'Test Document\', self.request[\'title\'])\n+        self.assertEqual(\'Test Document\', self.request[\'title\'])\n \n     def test_value_from_validation_request_using_get(self):\n-        self.assertEquals(\'Test Document\', self.request.get(\'title\'))\n+        self.assertEqual(\'Test Document\', self.request.get(\'title\'))\n \n     def test_value_from_validation_request_form_using_key_access(self):\n-        self.assertEquals(\'Test Document\', self.request.form[\'title\'])\n+        self.assertEqual(\'Test Document\', self.request.form[\'title\'])\n \n     def test_value_from_validation_request_form_using_get(self):\n-        self.assertEquals(\'Test Document\', self.request.form.get(\'title\'))\n+        self.assertEqual(\'Test Document\', self.request.form.get(\'title\'))\n \n     def test_validation_request_contains_key(self):\n         self.assertIn(\'title\', self.request)\n@@ -188,21 +197,21 @@ def test_validation_request_key_access_raises_keyerror(self):\n             self.request[\'foo\']\n \n     def test_validation_request_get_returns_default_value(self):\n-        self.assertEquals(None, self.request.get(\'foo\'))\n+        self.assertEqual(None, self.request.get(\'foo\'))\n         marker = object()\n-        self.assertEquals(marker, self.request.get(\'foo\', marker))\n+        self.assertEqual(marker, self.request.get(\'foo\', marker))\n \n     def test_validation_request_form_key_access_raises_keyerror(self):\n         with self.assertRaises(KeyError):\n             self.request.form[\'foo\']\n \n     def test_validation_request_form_get_returns_default_value(self):\n-        self.assertEquals(None, self.request.form.get(\'foo\'))\n+        self.assertEqual(None, self.request.form.get(\'foo\'))\n         marker = object()\n-        self.assertEquals(marker, self.request.form.get(\'foo\', marker))\n+        self.assertEqual(marker, self.request.form.get(\'foo\', marker))\n \n     def test_value_from_real_request_using_key_access(self):\n-        self.assertEquals(\'GET\', self.request[\'REQUEST_METHOD\'])\n+        self.assertEqual(\'GET\', self.request[\'REQUEST_METHOD\'])\n \n     def test_value_form_real_request_using_get(self):\n-        self.assertEquals(\'GET\', self.request.get(\'REQUEST_METHOD\'))\n+        self.assertEqual(\'GET\', self.request.get(\'REQUEST_METHOD\'))\ndiff --git a/src/plone/restapi/tests/test_atcontent_serializer.py b/src/plone/restapi/tests/test_atcontent_serializer.py\nindex e3791311..5361ed18 100644\n--- a/src/plone/restapi/tests/test_atcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_serializer.py\n@@ -4,6 +4,7 @@\n from plone.app.testing import setRoles\n from plone.restapi.interfaces import IExpandableElement\n from plone.restapi.interfaces import ISerializeToJson\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.tests.test_expansion import ExpandableElementFoo\n from zope.component import getGlobalSiteManager\n@@ -21,6 +22,8 @@ class TestATContentSerializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n@@ -154,7 +157,7 @@ def test_get_layout(self):\n         current_layout = self.doc1.getLayout()\n         obj = self.serialize(self.doc1)\n         self.assertIn(\'layout\', obj)\n-        self.assertEquals(current_layout, obj[\'layout\'])\n+        self.assertEqual(current_layout, obj[\'layout\'])\n \n     def test_serializer_includes_expansion(self):\n         provideAdapter(\n@@ -179,4 +182,4 @@ def test_get_is_folderish_in_folder(self):\n                                      ISerializeToJson)\n         obj = serializer()\n         self.assertIn(\'is_folderish\', obj)\n-        self.assertEquals(True, obj[\'is_folderish\'])\n+        self.assertEqual(True, obj[\'is_folderish\'])\ndiff --git a/src/plone/restapi/tests/test_atfield_deserializer.py b/src/plone/restapi/tests/test_atfield_deserializer.py\nindex e3bb0cbd..c2009866 100644\n--- a/src/plone/restapi/tests/test_atfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_atfield_deserializer.py\n@@ -2,10 +2,12 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n from plone.restapi.interfaces import IFieldDeserializer\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from zope.component import getMultiAdapter\n \n import unittest\n+import six\n \n \n class TestATFieldDeserializer(unittest.TestCase):\n@@ -13,6 +15,8 @@ class TestATFieldDeserializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n@@ -28,55 +32,60 @@ def deserialize(self, fieldname, value):\n \n     def test_string_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testStringField\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'K\xc3\xa4fer\', value)\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'K\xc3\xa4fer\', value)\n \n     def test_boolean_field_deserialization_returns_true(self):\n         value, kwargs = self.deserialize(\'testBooleanField\', True)\n         self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n-        self.assertEquals(True, value)\n+        self.assertEqual(True, value)\n \n     def test_boolean_field_deserialization_returns_false(self):\n         value, kwargs = self.deserialize(\'testBooleanField\', False)\n         self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n-        self.assertEquals(False, value)\n+        self.assertEqual(False, value)\n \n     def test_integer_field_deserialization_returns_integer_value(self):\n         value, kwargs = self.deserialize(\'testIntegerField\', 777)\n         self.assertTrue(isinstance(value, int), \'Not an <int>\')\n-        self.assertEquals(777, value)\n+        self.assertEqual(777, value)\n \n     def test_float_field_deserialization_returns_float_value(self):\n         value, kwargs = self.deserialize(\'testFloatField\', 1.5)\n         self.assertTrue(isinstance(value, float), \'Not a <float>\')\n-        self.assertEquals(1.5, value)\n+        self.assertEqual(1.5, value)\n \n     def test_fixedpoint_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testFixedPointField\', u\'1.1\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'1.1\', value)\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'1.1\', value)\n \n     def test_datetime_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testDateTimeField\',\n                                          u\'2015-12-20T19:51:06.375Z\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'2015-12-20T19:51:06.375Z\', value)\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'2015-12-20T19:51:06.375Z\', value)\n \n     def test_lines_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testLinesField\', u\'line1\\nline2\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(\'line1\\nline2\', value)\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(\'line1\\nline2\', value)\n \n     def test_lines_field_deserialization_returns_list(self):\n         value, kwargs = self.deserialize(\'testLinesField\',\n                                          [u\'line1\', u\'line2\'])\n         self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertEquals([u\'line1\', u\'line2\'], value)\n+        self.assertEqual([u\'line1\', u\'line2\'], value)\n \n     def test_file_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testFileField\', u\'Spam and eggs!\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'Spam and eggs!\', value)\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'Spam and eggs!\', value)\n \n     def test_file_field_deserialization_returns_decoded_value(self):\n         value, kwargs = self.deserialize(\'testFileField\', {\n@@ -84,7 +93,7 @@ def test_file_field_deserialization_returns_decoded_value(self):\n             u\'encoding\': u\'base64\',\n         })\n         self.assertTrue(isinstance(value, str), \'Not a <str>\')\n-        self.assertEquals(\'Spam and eggs!\', value)\n+        self.assertEqual(\'Spam and eggs!\', value)\n \n     def test_file_field_deserialization_returns_mimetype_and_filename(self):\n         value, kwargs = self.deserialize(\'testFileField\', {\n@@ -92,24 +101,27 @@ def test_file_field_deserialization_returns_mimetype_and_filename(self):\n             u\'filename\': \'doc.txt\',\n             u\'content-type\': \'text/plain\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'Spam and eggs!\', value)\n-        self.assertEquals(\'text/plain\', kwargs[u\'mimetype\'])\n-        self.assertEquals(\'doc.txt\', kwargs[u\'filename\'])\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'Spam and eggs!\', value)\n+        self.assertEqual(\'text/plain\', kwargs[u\'mimetype\'])\n+        self.assertEqual(\'doc.txt\', kwargs[u\'filename\'])\n \n     def test_text_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testTextField\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'K\xc3\xa4fer\', value)\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'K\xc3\xa4fer\', value)\n \n     def test_text_field_deserialization_returns_mimetype(self):\n         value, kwargs = self.deserialize(\'testTextField\', {\n             u\'data\': u\'K\xc3\xa4fer\',\n             u\'content-type\': \'text/html\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'K\xc3\xa4fer\', value)\n-        self.assertEquals(\'text/html\', kwargs[u\'mimetype\'])\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'K\xc3\xa4fer\', value)\n+        self.assertEqual(\'text/html\', kwargs[u\'mimetype\'])\n \n     def test_image_field_deserialization_returns_mimetype_and_filename(self):\n         value, kwargs = self.deserialize(\'testImageField\', {\n@@ -118,15 +130,17 @@ def test_image_field_deserialization_returns_mimetype_and_filename(self):\n             u\'filename\': \'image.gif\',\n             u\'content-type\': \'image/gif\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertTrue(value.startswith(\'GIF89a\'))\n-        self.assertEquals(\'image/gif\', kwargs[u\'mimetype\'])\n-        self.assertEquals(\'image.gif\', kwargs[u\'filename\'])\n+        self.assertEqual(\'image/gif\', kwargs[u\'mimetype\'])\n+        self.assertEqual(\'image.gif\', kwargs[u\'filename\'])\n \n     def test_blob_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testBlobField\', u\'Spam and eggs!\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'Spam and eggs!\', value)\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'Spam and eggs!\', value)\n \n     def test_blob_field_deserialization_returns_mimetype_and_filename(self):\n         value, kwargs = self.deserialize(\'testBlobField\', {\n@@ -134,10 +148,11 @@ def test_blob_field_deserialization_returns_mimetype_and_filename(self):\n             u\'filename\': \'doc.txt\',\n             u\'content-type\': \'text/plain\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'Spam and eggs!\', value)\n-        self.assertEquals(\'text/plain\', kwargs[u\'mimetype\'])\n-        self.assertEquals(\'doc.txt\', kwargs[u\'filename\'])\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'Spam and eggs!\', value)\n+        self.assertEqual(\'text/plain\', kwargs[u\'mimetype\'])\n+        self.assertEqual(\'doc.txt\', kwargs[u\'filename\'])\n \n     def test_blobfile_field_deserialization_returns_mimetype_and_filename(\n             self):\n@@ -146,10 +161,11 @@ def test_blobfile_field_deserialization_returns_mimetype_and_filename(\n             u\'filename\': \'doc.txt\',\n             u\'content-type\': \'text/plain\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'Spam and eggs!\', value)\n-        self.assertEquals(\'text/plain\', kwargs[u\'mimetype\'])\n-        self.assertEquals(\'doc.txt\', kwargs[u\'filename\'])\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'Spam and eggs!\', value)\n+        self.assertEqual(\'text/plain\', kwargs[u\'mimetype\'])\n+        self.assertEqual(\'doc.txt\', kwargs[u\'filename\'])\n \n     def test_blobimage_field_deserialization_returns_mimetype_and_filename(\n             self):\n@@ -159,10 +175,11 @@ def test_blobimage_field_deserialization_returns_mimetype_and_filename(\n             u\'filename\': \'image.gif\',\n             u\'content-type\': \'image/gif\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertTrue(value.startswith(\'GIF89a\'))\n-        self.assertEquals(\'image/gif\', kwargs[u\'mimetype\'])\n-        self.assertEquals(\'image.gif\', kwargs[u\'filename\'])\n+        self.assertEqual(\'image/gif\', kwargs[u\'mimetype\'])\n+        self.assertEqual(\'image.gif\', kwargs[u\'filename\'])\n \n     def test_query_field_deserialization_requests_list(self):\n         query_data = [\n@@ -185,7 +202,7 @@ def test_reference_field_deserialization_returns_uid_in_list(self):\n         value, kwargs = self.deserialize(\'testReferenceField\',\n                                          u\'0fc0dac495034b869b3b90c9179499a9\')\n         self.assertTrue(isinstance(value, list), \'Not a <basestring>\')\n-        self.assertEquals([u\'0fc0dac495034b869b3b90c9179499a9\'], value)\n+        self.assertEqual([u\'0fc0dac495034b869b3b90c9179499a9\'], value)\n \n     def test_reference_field_deserialization_returns_uids(self):\n         value, kwargs = self.deserialize(\'testReferenceField\', [\n@@ -200,8 +217,8 @@ def test_reference_field_deserialization_returns_object_in_list(self):\n         doc2 = self.portal[self.portal.invokeFactory(\n             \'ATTestDocument\', id=\'doc2\', title=\'Referenced Document\')]\n         value, kwargs = self.deserialize(\'testReferenceField\',\n-                                         unicode(doc2.absolute_url()))\n-        self.assertEquals(doc2, value[0])\n+                                         six.text_type(doc2.absolute_url()))\n+        self.assertEqual(doc2, value[0])\n \n     def test_reference_field_deserialization_returns_objects(self):\n         doc2 = self.portal[self.portal.invokeFactory(\n@@ -210,6 +227,7 @@ def test_reference_field_deserialization_returns_objects(self):\n             \'ATTestDocument\', id=\'doc3\', title=\'Referenced Document\')]\n         value, kwargs = self.deserialize(\n             \'testReferenceField\',\n-            [unicode(doc2.absolute_url()), unicode(doc3.absolute_url())])\n-        self.assertEquals(doc2, value[0])\n-        self.assertEquals(doc3, value[1])\n+            [six.text_type(\n+                doc2.absolute_url()), six.text_type(doc3.absolute_url())])\n+        self.assertEqual(doc2, value[0])\n+        self.assertEqual(doc3, value[1])\ndiff --git a/src/plone/restapi/tests/test_atfield_serializer.py b/src/plone/restapi/tests/test_atfield_serializer.py\nindex da1b23ad..c74e915e 100644\n--- a/src/plone/restapi/tests/test_atfield_serializer.py\n+++ b/src/plone/restapi/tests/test_atfield_serializer.py\n@@ -4,6 +4,7 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.restapi.interfaces import IFieldSerializer\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.testing import PLONE_VERSION\n from plone.scale import storage\n@@ -11,6 +12,7 @@\n \n import os\n import unittest\n+import six\n \n if PLONE_VERSION.base_version >= \'5.1\':\n     GIF_SCALE_FORMAT = \'png\'\n@@ -23,6 +25,8 @@ class TestATFieldSerializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n@@ -40,7 +44,7 @@ def serialize(self, fieldname, value, **kwargs):\n \n     def test_string_field_serialization_returns_unicode(self):\n         value = self.serialize(\'testStringField\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'K\xc3\xa4fer\', value)\n \n     def test_boolean_field_serialization_returns_true(self):\n@@ -65,13 +69,13 @@ def test_float_field_serialization_returns_float(self):\n \n     def test_fixedpoint_field_serialization_returns_unicode(self):\n         value = self.serialize(\'testFixedPointField\', u\'1.11\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'1.11\', value)\n \n     def test_datetime_field_serialization_returns_unicode(self):\n         value = self.serialize(\'testDateTimeField\',\n                                DateTime(\'2016-01-21T01:14:48+00:00\'))\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'2016-01-21T01:14:48+00:00\', value)\n \n     def test_lines_field_serialization_returns_list(self):\n@@ -101,7 +105,8 @@ def test_text_field_serialization_returns_dict(self):\n \n     def test_image_field_serialization_returns_dict(self):\n         image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        image_data = open(image_file, \'rb\').read()\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         fn = \'testImageField\'\n         with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n             value = self.serialize(\n@@ -180,7 +185,8 @@ def test_blobfile_field_serialization_returns_dict(self):\n \n     def test_blobimage_field_serialization_returns_dict(self):\n         image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        image_data = open(image_file, \'rb\').read()\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         fn = \'testBlobImageField\'\n         with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n             value = self.serialize(\n@@ -251,7 +257,7 @@ def test_reference_field_serialization_returns_unicode(self):\n         doc2 = self.portal[self.portal.invokeFactory(\n             \'ATTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n         value = self.serialize(\'testReferenceField\', doc2.UID())\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'http://nohost/plone/doc2\', value)\n \n     def test_reference_field_serialization_returns_list(self):\ndiff --git a/src/plone/restapi/tests/test_batching.py b/src/plone/restapi/tests/test_batching.py\nindex e3f11654..3796d833 100644\n--- a/src/plone/restapi/tests/test_batching.py\n+++ b/src/plone/restapi/tests/test_batching.py\n@@ -5,6 +5,7 @@\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n from plone.dexterity.utils import createContentInContainer\n+from plone.restapi import HAS_AT\n from plone.restapi.batching import DEFAULT_BATCH_SIZE\n from plone.restapi.batching import HypermediaBatch\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n@@ -12,11 +13,12 @@\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from plone.restapi.testing import RelativeSession\n from plone.restapi.tests.helpers import result_paths\n-from urlparse import parse_qsl\n-from urlparse import urlparse\n+from six.moves.urllib.parse import parse_qsl\n+from six.moves.urllib.parse import urlparse\n \n import transaction\n import unittest\n+from six.moves import range\n \n \n class TestBatchingDXBase(unittest.TestCase):\n@@ -104,7 +106,7 @@ def test_contains_correct_batch_of_items(self):\n         response = self.api_session.get(\'/folder/@search?b_start=2&b_size=2\')\n \n         # Response should contain second batch of items\n-        self.assertEquals([\n+        self.assertEqual([\n             u\'/plone/folder/doc-2\',\n             u\'/plone/folder/doc-3\'],\n             result_paths(response.json()))\n@@ -171,7 +173,7 @@ def test_contains_correct_batch_of_items(self):\n         response = self.api_session.get(\'/collection?b_start=2&b_size=2\')\n \n         # Response should contain second batch of items\n-        self.assertEquals([\n+        self.assertEqual([\n             u\'/plone/folder/doc-2\',\n             u\'/plone/folder/doc-3\'],\n             result_paths(response.json()))\n@@ -185,7 +187,7 @@ def test_total_item_count_is_correct(self):\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n         response = self.api_session.get(\'/collection?b_size=100\')\n-        self.assertNotIn(\'batching\', response.json().keys())\n+        self.assertNotIn(\'batching\', list(response.json()))\n \n \n class TestBatchingDXFolders(TestBatchingDXBase):\n@@ -233,7 +235,7 @@ def test_contains_correct_batch_of_items(self):\n         response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n \n         # Response should contain second batch of items\n-        self.assertEquals([\n+        self.assertEqual([\n             u\'/plone/folder/doc-3\',\n             u\'/plone/folder/doc-4\'],\n             result_paths(response.json()))\n@@ -247,7 +249,7 @@ def test_total_item_count_is_correct(self):\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n         response = self.api_session.get(\'/folder?b_size=100\')\n-        self.assertNotIn(\'batching\', response.json().keys())\n+        self.assertNotIn(\'batching\', list(response.json()))\n \n \n class TestBatchingSiteRoot(TestBatchingDXBase):\n@@ -291,7 +293,7 @@ def test_contains_correct_batch_of_items(self):\n         response = self.api_session.get(\'/?b_start=2&b_size=2\')\n \n         # Response should contain second batch of items\n-        self.assertEquals([\n+        self.assertEqual([\n             u\'/plone/doc-3\',\n             u\'/plone/doc-4\'],\n             result_paths(response.json()))\n@@ -305,7 +307,60 @@ def test_total_item_count_is_correct(self):\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n         response = self.api_session.get(\'/folder?b_size=100\')\n-        self.assertNotIn(\'batching\', response.json().keys())\n+        self.assertNotIn(\'batching\', list(response.json()))\n+\n+\n+class TestAABatchingArchetypes(unittest.TestCase):\n+    """This is a dummy test to work around a nasty test-isolation issue.\n+\n+    It does the same requests as TestBatchingArchetypes (see below).\n+    When run with the robot-tests in plone.app.widgets (without isolation)\n+    they return rendered templates since \'mark_as_api_request\' is not hit.\n+\n+    Doing the exact same calls here before actually running the tests\n+    fixes the issue. Don\'t ask why, I do not know.\n+\n+    See https://github.com/plone/Products.CMFPlone/issues/2592 for details.\n+    """\n+\n+    layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n+        self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n+\n+        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Contributor\'])\n+        self.api_session = RelativeSession(self.portal_url)\n+        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+        self.portal[self.portal.invokeFactory(\n+            \'Folder\',\n+            id=\'folder\',\n+            title=\'Some Folder\',\n+        )]\n+        transaction.commit()\n+\n+    def test_contains_canonical_url(self):\n+        # Fetch the second page of the batch\n+        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+\n+    def test_contains_batching_links(self):\n+        # Fetch the second page of the batch\n+        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+\n+    def test_contains_correct_batch_of_items(self):\n+        # Fetch the second page of the batch\n+        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+\n+    def test_total_item_count_is_correct(self):\n+        # Fetch the second page of the batch\n+        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+\n+    def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n+        self.api_session.get(\'/folder?b_size=100\')\n \n \n class TestBatchingArchetypes(unittest.TestCase):\n@@ -313,6 +368,8 @@ class TestBatchingArchetypes(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n         self.portal_url = self.portal.absolute_url()\n@@ -371,7 +428,7 @@ def test_contains_correct_batch_of_items(self):\n         response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n \n         # Response should contain second batch of items\n-        self.assertEquals([\n+        self.assertEqual([\n             u\'/plone/folder/doc-3\',\n             u\'/plone/folder/doc-4\'],\n             result_paths(response.json()))\n@@ -385,7 +442,7 @@ def test_total_item_count_is_correct(self):\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n         response = self.api_session.get(\'/folder?b_size=100\')\n-        self.assertNotIn(\'batching\', response.json().keys())\n+        self.assertNotIn(\'batching\', list(response.json()))\n \n \n class TestHypermediaBatch(unittest.TestCase):\n@@ -397,7 +454,7 @@ def setUp(self):\n         self.request = self.portal.REQUEST\n \n     def test_items_total(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n         # items_total should be total number of items in the sequence\n@@ -405,12 +462,12 @@ def test_items_total(self):\n             25, batch.items_total)\n \n     def test_default_batch_size(self):\n-        items = range(1, 27)\n+        items = list(range(1, 27))\n         batch = HypermediaBatch(self.request, items)\n         self.assertEqual(DEFAULT_BATCH_SIZE, len(list(batch)))\n \n     def test_custom_batch_size(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 5\n         batch = HypermediaBatch(self.request, items)\n         # Batch size should be customizable via request\n@@ -418,39 +475,39 @@ def test_custom_batch_size(self):\n             5, len(list(batch)))\n \n     def test_default_batch_start(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n         # Batch should start on first item by default\n         self.assertEqual(\n-            range(1, 11), list(batch))\n+            list(range(1, 11)), list(batch))\n \n     def test_custom_batch_start(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 10\n         self.request.form[\'b_start\'] = 5\n         batch = HypermediaBatch(self.request, items)\n         # Batch start should be customizable via request\n         self.assertEqual(\n-            range(6, 16), list(batch))\n+            list(range(6, 16)), list(batch))\n \n     def test_custom_start_and_size_can_be_combined(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 5\n         self.request.form[\'b_start\'] = 5\n         batch = HypermediaBatch(self.request, items)\n         # Should be able to combine custom batch start and size\n         self.assertListEqual(\n-            range(6, 11), list(batch))\n+            list(range(6, 11)), list(batch))\n \n     def test_canonical_url(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n         self.assertEqual(\'http://nohost\', batch.canonical_url)\n \n     def test_canonical_url_preserves_query_string_params(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         self.request[\'QUERY_STRING\'] = \'one=1&two=2\'\n@@ -459,12 +516,12 @@ def test_canonical_url_preserves_query_string_params(self):\n         parsed_url = urlparse(batch.canonical_url)\n         qs_params = dict(parse_qsl(parsed_url.query))\n \n-        self.assertEquals({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n-        self.assertEquals(\'nohost\', parsed_url.netloc)\n-        self.assertEquals(\'\', parsed_url.path)\n+        self.assertEqual({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n+        self.assertEqual(\'nohost\', parsed_url.netloc)\n+        self.assertEqual(\'\', parsed_url.path)\n \n     def test_canonical_url_preserves_list_like_query_string_params(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         self.request[\'QUERY_STRING\'] = \'foolist=1&foolist=2\'\n@@ -473,13 +530,13 @@ def test_canonical_url_preserves_list_like_query_string_params(self):\n         # Argument lists (same query string parameter repeated multiple\n         # times) should be preserved.\n \n-        self.assertEquals(\n+        self.assertEqual(\n             set([(\'foolist\', \'1\'), (\'foolist\', \'2\')]),\n             set(parse_qsl(urlparse(batch.canonical_url).query))\n         )\n \n     def test_canonical_url_strips_batching_params(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         self.request[\'QUERY_STRING\'] = \'one=1&b_size=10&b_start=20&two=2\'\n@@ -488,12 +545,12 @@ def test_canonical_url_strips_batching_params(self):\n         parsed_url = urlparse(batch.canonical_url)\n         qs_params = dict(parse_qsl(parsed_url.query))\n \n-        self.assertEquals({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n-        self.assertEquals(\'nohost\', parsed_url.netloc)\n-        self.assertEquals(\'\', parsed_url.path)\n+        self.assertEqual({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n+        self.assertEqual(\'nohost\', parsed_url.netloc)\n+        self.assertEqual(\'\', parsed_url.path)\n \n     def test_canonical_url_strips_sorting_params(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request[\'QUERY_STRING\'] = \'one=1&sort_on=path&two=2\'\n         batch = HypermediaBatch(self.request, items)\n@@ -501,12 +558,12 @@ def test_canonical_url_strips_sorting_params(self):\n         parsed_url = urlparse(batch.canonical_url)\n         qs_params = dict(parse_qsl(parsed_url.query))\n \n-        self.assertEquals({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n-        self.assertEquals(\'nohost\', parsed_url.netloc)\n-        self.assertEquals(\'\', parsed_url.path)\n+        self.assertEqual({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n+        self.assertEqual(\'nohost\', parsed_url.netloc)\n+        self.assertEqual(\'\', parsed_url.path)\n \n     def test_current_batch_url(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         self.request[\'ACTUAL_URL\'] = \'http://nohost\'\n@@ -516,14 +573,14 @@ def test_current_batch_url(self):\n             \'http://nohost?b_size=10&b_start=20\', batch.current_batch_url)\n \n     def test_batching_links_omitted_if_resultset_fits_in_single_batch(self):\n-        items = range(1, 5)\n+        items = list(range(1, 5))\n \n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n         self.assertEqual(None, batch.links)\n \n     def test_first_link_contained(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n@@ -531,7 +588,7 @@ def test_first_link_contained(self):\n             {\'first\': \'http://nohost?b_start=0\'}, batch.links)\n \n     def test_first_link_preserves_list_like_querystring_params(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         self.request[\'QUERY_STRING\'] = \'foolist=1&foolist=2\'\n@@ -541,13 +598,13 @@ def test_first_link_preserves_list_like_querystring_params(self):\n         # times) should be preserved.\n \n         batch_params = set([(\'b_start\', \'0\'), (\'b_size\', \'10\')])\n-        self.assertEquals(\n+        self.assertEqual(\n             set([(\'foolist\', \'1\'), (\'foolist\', \'2\')]),\n             set(parse_qsl(urlparse(batch.links[\'first\']).query)) - batch_params\n         )\n \n     def test_last_link_contained(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n@@ -555,7 +612,7 @@ def test_last_link_contained(self):\n             {\'last\': \'http://nohost?b_start=20\'}, batch.links)\n \n     def test_next_link_contained_if_necessary(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n@@ -563,7 +620,7 @@ def test_next_link_contained_if_necessary(self):\n             {\'next\': \'http://nohost?b_start=10\'}, batch.links)\n \n     def test_next_link_omitted_on_last_page(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         # Start on last page\n         self.request.form[\'b_size\'] = 10\n@@ -571,10 +628,10 @@ def test_next_link_omitted_on_last_page(self):\n         batch = HypermediaBatch(self.request, items)\n         self.assertSetEqual(\n             set([\'@id\', \'first\', \'prev\', \'last\']),\n-            set(batch.links.keys()))\n+            set(batch.links))\n \n     def test_prev_link_contained_if_necessary(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         # Start on third page\n         self.request.form[\'b_size\'] = 10\n@@ -584,16 +641,16 @@ def test_prev_link_contained_if_necessary(self):\n             {\'prev\': \'http://nohost?b_start=10\'}, batch.links)\n \n     def test_prev_link_omitted_on_first_page(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n         self.assertSetEqual(\n             set([\'@id\', \'first\', \'next\', \'last\']),\n-            set(batch.links.keys()))\n+            set(batch.links))\n \n     def test_no_gaps_or_duplicates_between_pages(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         items_from_all_batches = []\n \n         size = 10\n@@ -607,11 +664,11 @@ def test_no_gaps_or_duplicates_between_pages(self):\n         self.assertEqual(items, items_from_all_batches)\n \n     def test_batch_start_never_drops_below_zero(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         # Start in the middle of what would otherwise be the first batch\n         self.request.form[\'b_size\'] = 10\n         self.request.form[\'b_start\'] = 5\n         batch = HypermediaBatch(self.request, items)\n-        self.assertEquals(\n+        self.assertEqual(\n             \'http://nohost?b_start=0\', batch.links[\'prev\'])\ndiff --git a/src/plone/restapi/tests/test_comments.py b/src/plone/restapi/tests/test_comments.py\nindex 44b12633..69e7e44c 100644\n--- a/src/plone/restapi/tests/test_comments.py\n+++ b/src/plone/restapi/tests/test_comments.py\n@@ -57,7 +57,7 @@ def test_conversation(self):\n \n         output = serializer()\n         self.assertEqual(\n-            set(output.keys()),\n+            set(output),\n             set([\'@id\', \'items_total\', \'items\'])\n         )\n \n@@ -95,11 +95,11 @@ def test_comment(self):\n             \'is_deletable\'\n         ]\n         self.assertEqual(\n-            set(output.keys()),\n+            set(output),\n             set(expected)\n         )\n \n         self.assertEqual(\n-            set(output[\'text\'].keys()),\n+            set(output[\'text\']),\n             set([\'data\', \'mime-type\'])\n         )\ndiff --git a/src/plone/restapi/tests/test_content_delete.py b/src/plone/restapi/tests/test_content_delete.py\nindex 6dc5c4f2..c7fd572a 100644\n--- a/src/plone/restapi/tests/test_content_delete.py\n+++ b/src/plone/restapi/tests/test_content_delete.py\n@@ -10,6 +10,7 @@\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.testing import login\n from plone.app.testing import setRoles\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from zope.event import notify\n@@ -65,6 +66,8 @@ class TestATContentDelete(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.doc1 = self.portal[self.portal.invokeFactory(\n@@ -79,8 +82,9 @@ def traverse(self, path=\'/plone\', accept=\'application/json\', method=\'GET\'):\n         request.environ[\'PATH_TRANSLATED\'] = path\n         request.environ[\'HTTP_ACCEPT\'] = accept\n         request.environ[\'REQUEST_METHOD\'] = method\n+        auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         request._auth = \'Basic %s\' % b64encode(\n-            \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD))\n+            auth.encode(\'utf8\')).decode(\'utf8\')\n         notify(PubStart(request))\n         return request.traverse(path)\n \ndiff --git a/src/plone/restapi/tests/test_content_get.py b/src/plone/restapi/tests/test_content_get.py\nindex 21daeaf1..0a21824e 100644\n--- a/src/plone/restapi/tests/test_content_get.py\n+++ b/src/plone/restapi/tests/test_content_get.py\n@@ -73,13 +73,13 @@ def test_get_content_returns_fullobjects(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(3, len(response.json()[\'items\']))\n         self.assertTrue(\n-            \'title\' in response.json()[\'items\'][0].keys()\n+            \'title\' in list(response.json()[\'items\'][0])\n         )\n         self.assertTrue(\n-            \'description\' in response.json()[\'items\'][0].keys()\n+            \'description\' in list(response.json()[\'items\'][0])\n         )\n         self.assertTrue(\n-            \'text\' in response.json()[\'items\'][0].keys()\n+            \'text\' in list(response.json()[\'items\'][0])\n         )\n         self.assertEqual(\n             {\ndiff --git a/src/plone/restapi/tests/test_content_local_roles.py b/src/plone/restapi/tests/test_content_local_roles.py\nindex f0fd0914..e0cd27b6 100644\n--- a/src/plone/restapi/tests/test_content_local_roles.py\n+++ b/src/plone/restapi/tests/test_content_local_roles.py\n@@ -16,6 +16,15 @@\n import unittest\n \n \n+def sorted_roles(roles):\n+    results = []\n+    for line in roles:\n+        line = list(line)\n+        line[1] = sorted(line[1])\n+        results.append(line)\n+    return results\n+\n+\n class TestFolderCreate(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n@@ -237,10 +246,9 @@ def test_set_local_roles_for_user(self):\n \n         self.assertEqual(response.status_code, 204)\n         self.assertEqual(\n-            pas.getLocalRolesForDisplay(self.portal.folder1),\n-            ((\'admin\', (\'Owner\',), \'user\', \'admin\'),\n-             (\'test-user\', (u\'Reviewer\', u\'Reader\'),\n-              \'user\', u\'test_user_1_\'))\n+            sorted_roles(pas.getLocalRolesForDisplay(self.portal.folder1)),\n+            [[\'admin\', [\'Owner\', ], \'user\', \'admin\'],\n+             [\'test-user\', [u\'Reader\', u\'Reviewer\'], \'user\', u\'test_user_1_\']]\n         )\n \n     def test_unset_local_roles_for_user(self):\n@@ -251,9 +259,9 @@ def test_unset_local_roles_for_user(self):\n \n         pas = getToolByName(self.portal, \'acl_users\')\n         self.assertEqual(\n-            pas.getLocalRolesForDisplay(self.portal.folder1),\n-            ((\'admin\', (\'Owner\',), \'user\', \'admin\'),\n-             (\'test-user\', (\'Reviewer\', \'Reader\'), \'user\', \'test_user_1_\'))\n+            sorted_roles(pas.getLocalRolesForDisplay(self.portal.folder1)),\n+            [[\'admin\', [\'Owner\', ], \'user\', \'admin\'],\n+             [\'test-user\', [\'Reader\', \'Reviewer\'], \'user\', \'test_user_1_\']]\n         )\n \n         response = requests.post(\n@@ -402,7 +410,7 @@ def test_no_serializer_available_returns_501(self):\n         self.assertEqual(response.status_code, 501)\n         response = response.json()\n         self.assertIn(\'error\', response)\n-        self.assertEquals(\n+        self.assertEqual(\n             u\'No serializer available.\',\n             response[\'error\'][\'message\']\n         )\ndiff --git a/src/plone/restapi/tests/test_content_patch.py b/src/plone/restapi/tests/test_content_patch.py\nindex 39aecd66..a1929dbe 100644\n--- a/src/plone/restapi/tests/test_content_patch.py\n+++ b/src/plone/restapi/tests/test_content_patch.py\n@@ -7,6 +7,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n+from plone.restapi import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from Products.CMFCore.PortalContent import PortalContent\n@@ -207,6 +208,8 @@ class TestATContentPatch(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\ndiff --git a/src/plone/restapi/tests/test_content_post.py b/src/plone/restapi/tests/test_content_post.py\nindex f5572bce..02416b68 100644\n--- a/src/plone/restapi/tests/test_content_post.py\n+++ b/src/plone/restapi/tests/test_content_post.py\n@@ -7,6 +7,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n+from plone.restapi import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from Products.CMFCore.utils import getToolByName\n@@ -92,7 +93,7 @@ def test_post_without_type_returns_400(self):\n             },\n         )\n         self.assertEqual(400, response.status_code)\n-        self.assertIn("Property \'@type\' is required", response.content)\n+        self.assertIn("Property \'@type\' is required", response.text)\n \n     def test_post_without_id_creates_id_from_title(self):\n         response = requests.post(\n@@ -215,6 +216,8 @@ class TestATFolderCreate(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\ndiff --git a/src/plone/restapi/tests/test_content_utils.py b/src/plone/restapi/tests/test_content_utils.py\nindex 898294b9..40b67063 100644\n--- a/src/plone/restapi/tests/test_content_utils.py\n+++ b/src/plone/restapi/tests/test_content_utils.py\n@@ -2,6 +2,7 @@\n from Acquisition import aq_parent\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.restapi import HAS_AT\n from plone.restapi.services.content.utils import add\n from plone.restapi.services.content.utils import create\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n@@ -63,6 +64,8 @@ class TestATCreateContent(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n@@ -150,6 +153,8 @@ class TestATAddContent(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\ndiff --git a/src/plone/restapi/tests/test_copymove.py b/src/plone/restapi/tests/test_copymove.py\nindex 79fcecdd..95f32042 100644\n--- a/src/plone/restapi/tests/test_copymove.py\n+++ b/src/plone/restapi/tests/test_copymove.py\n@@ -34,8 +34,9 @@ def traverse(self, path=\'/plone\', accept=\'application/json\', method=\'GET\'):\n         request.environ[\'PATH_TRANSLATED\'] = path\n         request.environ[\'HTTP_ACCEPT\'] = accept\n         request.environ[\'REQUEST_METHOD\'] = method\n+        auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         request._auth = \'Basic %s\' % b64encode(\n-            \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD))\n+            auth.encode(\'utf8\')).decode(\'utf8\')\n         notify(PubStart(request))\n         return request.traverse(path)\n \n@@ -95,7 +96,7 @@ def test_copy_single_object(self):\n         )\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 200)\n+        self.assertEqual(response.status_code, 200)\n         self.assertIn(\'copy_of_doc1\', self.portal.objectIds())\n \n     def test_move_single_object(self):\n@@ -107,7 +108,7 @@ def test_move_single_object(self):\n         )\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 200)\n+        self.assertEqual(response.status_code, 200)\n         self.assertIn(\'doc1\', self.folder1.objectIds())\n         self.assertNotIn(\'doc1\', self.portal.objectIds())\n \n@@ -118,7 +119,7 @@ def test_move_multiple_objects(self):\n                 "source": [self.doc1.absolute_url(), self.doc2.absolute_url()]\n             }\n         )\n-        self.assertEquals(response.status_code, 200)\n+        self.assertEqual(response.status_code, 200)\n         transaction.commit()\n \n         self.assertIn(\'doc1\', self.folder1.objectIds())\n@@ -128,7 +129,7 @@ def test_move_multiple_objects(self):\n \n     def test_copy_without_source_raises_400(self):\n         response = self.api_session.post(\'/folder1/@copy\')\n-        self.assertEquals(response.status_code, 400)\n+        self.assertEqual(response.status_code, 400)\n \n     def test_copy_not_existing_object(self):\n         response = self.api_session.post(\n@@ -138,7 +139,7 @@ def test_copy_not_existing_object(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 200)\n+        self.assertEqual(response.status_code, 200)\n         self.assertEqual([], response.json())\n \n     def test_copy_multiple_objects(self):\n@@ -150,7 +151,7 @@ def test_copy_multiple_objects(self):\n         )\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 200)\n+        self.assertEqual(response.status_code, 200)\n         self.assertIn(\'copy_of_doc1\', self.portal.objectIds())\n         self.assertIn(\'copy_of_doc2\', self.portal.objectIds())\n \n@@ -163,7 +164,7 @@ def test_copy_single_object_no_permissions_raises_403(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 403)\n+        self.assertEqual(response.status_code, 403)\n \n     def test_copy_single_object_no_auth_raises_401(self):\n         self.api_session.auth = (\'nonexistent\', \'secret\')\n@@ -174,7 +175,7 @@ def test_copy_single_object_no_auth_raises_401(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 401)\n+        self.assertEqual(response.status_code, 401)\n \n     def test_move_single_object_no_permissions_raises_403(self):\n         self.api_session.auth = (\'memberuser\', \'secret\')\n@@ -185,7 +186,7 @@ def test_move_single_object_no_permissions_raises_403(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 403)\n+        self.assertEqual(response.status_code, 403)\n \n     def test_move_single_object_no_auth_raises_401(self):\n         self.api_session.auth = (\'nonexistent\', \'secret\')\n@@ -196,7 +197,7 @@ def test_move_single_object_no_auth_raises_401(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 401)\n+        self.assertEqual(response.status_code, 401)\n \n     def test_move_single_object_no_permission_delete_source_raises_403(self):\n         api.user.grant_roles(\n@@ -212,4 +213,4 @@ def test_move_single_object_no_permission_delete_source_raises_403(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 403)\n+        self.assertEqual(response.status_code, 403)\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 4e2ba04f..e0ee2df2 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -38,10 +38,12 @@\n \n import collections\n import json\n-import re\n import os\n+import re\n+import six\n import transaction\n import unittest\n+from six.moves import range\n \n if PAM_INSTALLED:\n     from plone.app.multilingual.interfaces import ITranslationManager\n@@ -75,9 +77,9 @@\n \n base_path = resource_filename(\'plone.restapi.tests\', \'http-examples\')\n \n-UPLOAD_DATA = \'abcdefgh\'\n-UPLOAD_MIMETYPE = \'text/plain\'\n-UPLOAD_FILENAME = \'test.txt\'\n+UPLOAD_DATA = b\'abcdefgh\'\n+UPLOAD_MIMETYPE = b\'text/plain\'\n+UPLOAD_FILENAME = b\'test.txt\'\n UPLOAD_LENGTH = len(UPLOAD_DATA)\n \n UPLOAD_PDF_MIMETYPE = \'application/pdf\'\n@@ -98,7 +100,12 @@ def pretty_json(data):\n \n \n def save_request_and_response_for_docs(name, response):\n-    with open(\'{}/{}\'.format(base_path, \'%s.req\' % name), \'w\') as req:\n+    if six.PY2:\n+        open_kw = {}\n+    else:\n+        open_kw = {\'newline\': \'\\n\'}\n+    filename = \'{}/{}\'.format(base_path, \'%s.req\' % name)\n+    with open(filename, \'w\', **open_kw) as req:\n         req.write(\'{} {} HTTP/1.1\\n\'.format(\n             response.request.method,\n             response.request.path_url\n@@ -125,9 +132,15 @@ def save_request_and_response_for_docs(name, response):\n                 # ever decide to dump that header\n                 response.request.prepare_body(data=body, files=None)\n \n-            req.write(response.request.body)\n+            if (isinstance(response.request.body, six.text_type)\n+                    or not hasattr(req, \'buffer\')):\n+                req.write(response.request.body)\n+            else:\n+                req.buffer.seek(0, 2)\n+                req.buffer.write(response.request.body)\n \n-    with open(\'{}/{}\'.format(base_path, \'%s.resp\' % name), \'w\') as resp:\n+    filename = \'{}/{}\'.format(base_path, \'%s.resp\' % name)\n+    with open(filename, \'w\', **open_kw) as resp:\n         status = response.status_code\n         reason = response.reason\n         resp.write(\'HTTP/1.1 {} {}\\n\'.format(status, reason))\n@@ -135,7 +148,7 @@ def save_request_and_response_for_docs(name, response):\n             if key.lower() in RESPONSE_HEADER_KEYS:\n                 resp.write(\'{}: {}\\n\'.format(key.title(), value))\n         resp.write(\'\\n\')\n-        resp.write(response.content)\n+        resp.write(response.text)\n \n \n class TestDocumentation(unittest.TestCase):\n@@ -271,8 +284,10 @@ def test_documentation_news_item(self):\n             \'text/html\'\n         )\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         self.portal.newsitem.image = NamedBlobImage(\n-            data=open(image_file, \'r\').read(),\n+            data=image_data,\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\n@@ -324,8 +339,10 @@ def test_documentation_file(self):\n         pdf_file = os.path.join(\n             os.path.dirname(__file__), u\'file.pdf\'\n         )\n+        with open(pdf_file, \'rb\') as f:\n+            pdf_data = f.read()\n         self.portal.file.file = NamedBlobFile(\n-            data=open(pdf_file, \'r\').read(),\n+            data=pdf_data,\n             contentType=\'application/pdf\',\n             filename=u\'file.pdf\'\n         )\n@@ -342,8 +359,10 @@ def test_documentation_image(self):\n         self.portal.image.title = \'My Image\'\n         self.portal.image.description = u\'This is an image\'\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         self.portal.image.image = NamedBlobImage(\n-            data=open(image_file, \'r\').read(),\n+            data=image_data,\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\n@@ -1173,8 +1192,8 @@ def clean_final_url(response, _id=\'document-2016-10-21\'):\n \n         # POST create an upload\n         metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME),\n-            b64encode(UPLOAD_MIMETYPE)\n+            b64encode(UPLOAD_FILENAME).decode(\'utf-8\'),\n+            b64encode(UPLOAD_MIMETYPE).decode(\'utf-8\'),\n         )\n         response = self.api_session.post(\n             \'/folder/@tus-upload\',\n@@ -1228,8 +1247,8 @@ def test_tusreplace_post_patch(self):\n \n         # POST create an upload\n         metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME),\n-            b64encode(UPLOAD_MIMETYPE)\n+            b64encode(UPLOAD_FILENAME).decode(\'utf-8\'),\n+            b64encode(UPLOAD_MIMETYPE).decode(\'utf-8\'),\n         )\n         response = self.api_session.post(\n             \'/myfile/@tus-replace\',\n@@ -1261,8 +1280,8 @@ def test_locking_lock(self):\n         response = self.api_session.post(url)\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n-            r\'"token": "[^"]+"\',\n-            \'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n+            b\'"token": "[^"]+"\',\n+            b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n             response.content)\n         save_request_and_response_for_docs(\'lock\', response)\n \n@@ -1277,8 +1296,8 @@ def test_locking_lock_nonstealable_and_timeout(self):\n         )\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n-            r\'"token": "[^"]+"\',\n-            \'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n+            b\'"token": "[^"]+"\',\n+            b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n             response.content)\n         save_request_and_response_for_docs(\n             \'lock_nonstealable_timeout\', response)\n@@ -1297,8 +1316,8 @@ def test_locking_refresh_lock(self):\n         response = self.api_session.post(url)\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n-            r\'"token": "[^"]+"\',\n-            \'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n+            b\'"token": "[^"]+"\',\n+            b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n             response.content)\n         save_request_and_response_for_docs(\'refresh_lock\', response)\n \n@@ -1469,13 +1488,14 @@ def create_document_with_comments(self):\n                 comment = createObject(\'plone.Comment\')\n                 comment.text = \'Comment %d.%d\' % (x, y)\n                 comment_replies.addComment(comment)\n-        self.comment_id, self.comment = replies.items()[0]\n+        self.comment_id, self.comment = list(replies.items())[0]\n \n         return document\n \n     @staticmethod\n     def clean_comment_id(response, _id=\'123456\'):\n         pattern = r\'@comments/(\\w+)\'\n+        pattern_bytes = b\'@comments/(\\\\w+)\'\n         repl = \'@comments/\' + _id\n \n         # Replaces the dynamic part in the headers with a stable id\n@@ -1488,12 +1508,12 @@ def clean_comment_id(response, _id=\'123456\'):\n         # and the body\n         if response.request.body:\n             response.request.body = re.sub(\n-                pattern, repl, response.request.body\n+                pattern_bytes, repl, response.request.body\n             )\n \n         # and the response\n         if response.content:\n-            response._content = re.sub(pattern, repl, response._content)\n+            response._content = re.sub(pattern_bytes, repl, response._content)\n \n     def test_comments_get(self):\n         url = \'{}/@comments\'.format(self.document.absolute_url())\ndiff --git a/src/plone/restapi/tests/test_dxcontent_deserializer.py b/src/plone/restapi/tests/test_dxcontent_deserializer.py\nindex 8838fae9..6cd85ccd 100644\n--- a/src/plone/restapi/tests/test_dxcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_deserializer.py\n@@ -15,6 +15,8 @@\n \n import json\n import unittest\n+import six\n+from six.moves import range\n \n \n class TestDXContentDeserializer(unittest.TestCase, OrderingMixin):\n@@ -53,20 +55,20 @@ def deserialize(self, body=\'{}\', validate_all=False, context=None):\n     def test_deserializer_raises_with_invalid_body(self):\n         with self.assertRaises(DeserializationError) as cm:\n             self.deserialize(body=\'Not a JSON object\')\n-        self.assertEquals(\'No JSON object could be decoded\', cm.exception.msg)\n+        self.assertEqual(\'No JSON object could be decoded\', cm.exception.msg)\n \n     def test_deserializer_raises_with_malformed_body(self):\n         with self.assertRaises(DeserializationError) as cm:\n             self.deserialize(body=\'[1,2,3]\')\n-        self.assertEquals(\'Malformed body\', cm.exception.msg)\n+        self.assertEqual(\'Malformed body\', cm.exception.msg)\n \n     def test_deserializer_updates_field_value(self):\n         self.deserialize(body=\'{"test_textline_field": "My Item"}\')\n-        self.assertEquals(u\'My Item\', self.portal.doc1.test_textline_field)\n+        self.assertEqual(u\'My Item\', self.portal.doc1.test_textline_field)\n \n     def test_deserializer_ignores_readonly_fields(self):\n         self.deserialize(body=\'{"test_readonly_field": "Foo"}\')\n-        self.assertEquals(u\'readonly\', self.portal.doc1.test_readonly_field)\n+        self.assertEqual(u\'readonly\', self.portal.doc1.test_readonly_field)\n \n     def test_deserializer_notifies_object_modified(self):\n         def handler(obj, event):\n@@ -81,8 +83,8 @@ def handler(obj, event):\n             self.event = event\n         provideHandler(handler, (IDexterityItem, IObjectModifiedEvent,))\n         self.deserialize(body=\'{"test_textline_field": "My Item"}\')\n-        self.assertEquals(1, len(self.event.descriptions))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.event.descriptions))\n+        self.assertEqual(\n             (\'IDXTestDocumentSchema.test_textline_field\',),\n             self.event.descriptions[0].attributes)\n \n@@ -91,31 +93,37 @@ def test_deserializer_does_not_update_field_without_write_permission(self):\n         setRoles(self.portal,\n                  TEST_USER_ID, [\'Member\', \'Contributor\', \'Editor\'])\n         self.deserialize(body=\'{"test_write_permission_field": "Foo"}\')\n-        self.assertEquals(u\'Test Write Permission\',\n-                          self.portal.doc1.test_write_permission_field)\n+        self.assertEqual(\n+            u\'Test Write Permission\',\n+            self.portal.doc1.test_write_permission_field\n+        )\n \n     def test_deserializer_updates_field_with_write_permission(self):\n         self.portal.doc1.test_write_permission_field = u\'Test Write Permission\'\n         setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Manager\'])\n         self.deserialize(body=\'{"test_write_permission_field": "Foo"}\')\n-        self.assertEquals(u\'Foo\',\n-                          self.portal.doc1.test_write_permission_field)\n+        self.assertEqual(\n+            u\'Foo\',\n+            self.portal.doc1.test_write_permission_field\n+        )\n \n     def test_deserializer_validates_invariant(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"test_invariant_field1": "Foo",\'\n                                   \' "test_invariant_field2": "Bar"}\')\n-        self.assertEquals(u\'Must have same values\',\n-                          cm.exception.message[0][\'message\'])\n+        self.assertEqual(\n+            u\'Must have same values\',\n+            str(cm.exception.args[0][0][\'message\'])\n+        )\n \n     def test_deserializer_updates_behavior_field_value(self):\n         self.deserialize(body=\'{"test_behavior_field": "My Value"}\')\n-        self.assertEquals(u\'My Value\', self.portal.doc1.test_behavior_field)\n+        self.assertEqual(u\'My Value\', self.portal.doc1.test_behavior_field)\n \n     def test_deserializer_updates_behavior_field_value_in_annotations(self):\n         self.deserialize(\n             body=\'{"test_annotations_behavior_field": "My Value"}\')\n-        self.assertEquals(\n+        self.assertEqual(\n             u\'My Value\',\n             ITestAnnotationsBehavior(self.portal.doc1)\n             .test_annotations_behavior_field)\n@@ -125,20 +133,24 @@ def test_deserializer_raises_if_required_value_is_missing(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"test_textline_field": "My Value"}\',\n                              validate_all=True)\n-        self.assertEquals(u\'Required input is missing.\',\n-                          cm.exception.message[0][\'message\'])\n+        self.assertEqual(\n+            u\'Required input is missing.\',\n+            cm.exception.args[0][0][\'message\']\n+        )\n \n         # An empty string should be considered a missing value\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"test_textline_field": ""}\',\n                              validate_all=True)\n-        self.assertEquals(u\'Required input is missing.\',\n-                          cm.exception.message[0][\'message\'])\n+        self.assertEqual(\n+            u\'Required input is missing.\',\n+            cm.exception.args[0][0][\'message\']\n+        )\n \n     def test_deserializer_succeeds_if_required_value_is_provided(self):\n         self.deserialize(body=\'{"test_required_field": "My Value"}\',\n                          validate_all=True)\n-        self.assertEquals(u\'My Value\', self.portal.doc1.test_required_field)\n+        self.assertEqual(u\'My Value\', self.portal.doc1.test_required_field)\n \n     def test_deserializer_does_not_store_default_value(self):\n         # XXX: Dexterity has an odd behavior with default values.\n@@ -157,15 +169,21 @@ def test_deserializer_does_not_store_default_value(self):\n     def test_deserializer_passes_validation_with_not_provided_defaults(self):\n         self.deserialize(body=\'{"test_required_field": "My Value"}\',\n                          validate_all=True)\n-        self.assertEquals(u\'Default\',\n-                          self.portal.doc1.test_default_value_field)\n-        self.assertEquals(u\'DefaultFactory\',\n-                          self.portal.doc1.test_default_factory_field)\n+        self.assertEqual(\n+            u\'Default\',\n+            self.portal.doc1.test_default_value_field\n+        )\n+        self.assertEqual(\n+            u\'DefaultFactory\',\n+            self.portal.doc1.test_default_factory_field\n+        )\n \n     def test_deserializer_sets_missing_value_when_receiving_null(self):\n         self.deserialize(body=\'{"test_missing_value_field": null}\')\n-        self.assertEquals(u\'missing\',\n-                          self.portal.doc1.test_missing_value_field)\n+        self.assertEqual(\n+            u\'missing\',\n+            self.portal.doc1.test_missing_value_field\n+        )\n \n     def test_deserializer_sets_missing_value_on_required_field(self):\n         \'\'\'We don\'t set missing_value if the field is required\'\'\'\n@@ -174,23 +192,27 @@ def test_deserializer_sets_missing_value_on_required_field(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(\n                 body=\'{"test_missing_value_required_field": null}\')\n-        self.assertEquals(u\'valid value\',\n-                          self.portal.doc1.test_missing_value_required_field)\n-        self.assertEquals(\n+        self.assertEqual(\n+            u\'valid value\',\n+            self.portal.doc1.test_missing_value_required_field\n+        )\n+        self.assertEqual(\n             (\n                 \'test_missing_value_required_field is a required field.\',\n                 \'Setting it to null is not allowed.\'\n             ),\n-            cm.exception.message[0][\'message\']\n+            cm.exception.args[0][0][\'message\']\n+        )\n+        self.assertEqual(\n+            u\'test_missing_value_required_field\',\n+            cm.exception.args[0][0][\'field\']\n         )\n-        self.assertEquals(u\'test_missing_value_required_field\',\n-                          cm.exception.message[0][\'field\'])\n \n     def test_set_layout(self):\n         current_layout = self.portal.doc1.getLayout()\n         self.assertNotEquals(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n-        self.assertEquals(\'my_new_layout\', self.portal.doc1.getLayout())\n+        self.assertEqual(\'my_new_layout\', self.portal.doc1.getLayout())\n \n \n class TestDXContentSerializerDeserializer(unittest.TestCase):\n@@ -229,14 +251,14 @@ def serialize(self, field):\n         return serializer()[field]\n \n     def test_serialize2deserialize_relation(self):\n-        value = unicode(self.portal.doc2.UID())\n+        value = six.text_type(self.portal.doc2.UID())\n         self.deserialize(\'test_relationchoice_field\', value)\n \n         serialization_value = self.serialize(\'test_relationchoice_field\')\n \n         self.deserialize(\'test_relationchoice_field\', serialization_value)\n \n-        self.assertEquals(\n+        self.assertEqual(\n             serialization_value[\'@id\'],\n             self.portal.doc1.test_relationchoice_field.to_object.absolute_url()\n         )\ndiff --git a/src/plone/restapi/tests/test_dxcontent_serializer.py b/src/plone/restapi/tests/test_dxcontent_serializer.py\nindex 3c47496b..7f393977 100644\n--- a/src/plone/restapi/tests/test_dxcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_serializer.py\n@@ -156,7 +156,7 @@ def test_get_layout(self):\n         current_layout = self.portal.doc1.getLayout()\n         obj = self.serialize()\n         self.assertIn(\'layout\', obj)\n-        self.assertEquals(current_layout, obj[\'layout\'])\n+        self.assertEqual(current_layout, obj[\'layout\'])\n \n     def test_serializer_includes_expansion(self):\n         provideAdapter(\n@@ -178,7 +178,7 @@ def test_serializer_includes_expansion(self):\n     def test_get_is_folderish(self):\n         obj = self.serialize()\n         self.assertIn(\'is_folderish\', obj)\n-        self.assertEquals(False, obj[\'is_folderish\'])\n+        self.assertEqual(False, obj[\'is_folderish\'])\n \n     def test_get_is_folderish_in_folder(self):\n         self.portal.invokeFactory(\'Folder\', id=u\'folder\')\n@@ -186,7 +186,7 @@ def test_get_is_folderish_in_folder(self):\n                                      ISerializeToJson)\n         obj = serializer()\n         self.assertIn(\'is_folderish\', obj)\n-        self.assertEquals(True, obj[\'is_folderish\'])\n+        self.assertEqual(True, obj[\'is_folderish\'])\n \n     def test_richtext_serializer_context(self):\n         """This checks if the context is passed in correctly.\n@@ -208,7 +208,7 @@ def __call__(self, value, mime_type):\n         with AdapterCM(RichtextTransform, (Interface, ), ITransformer):\n             obj = self.serialize()\n \n-        self.assertEquals(\n+        self.assertEqual(\n             obj[\'test_richtext_field\'][\'data\'],\n             self.portal.doc1.portal_type\n         )\n@@ -221,7 +221,7 @@ def test_allow_discussion_by_default(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_obj_instance_allows_but_not_global_enabled(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -231,7 +231,7 @@ def test_allow_discussion_obj_instance_allows_but_not_global_enabled(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_fti_allows_not_global_enabled(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -243,7 +243,7 @@ def test_allow_discussion_fti_allows_not_global_enabled(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_allows_global_enabled_but_nothing_else(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -255,7 +255,7 @@ def test_allow_discussion_allows_global_enabled_but_nothing_else(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_obj_instance_allows_global_enabled(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -268,7 +268,7 @@ def test_allow_discussion_obj_instance_allows_global_enabled(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(True, obj[\'allow_discussion\'])\n+        self.assertEqual(True, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_obj_instance_not_set_global_enabled(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -280,7 +280,7 @@ def test_allow_discussion_obj_instance_not_set_global_enabled(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_fti_allows_allows_global_enabled(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -295,7 +295,7 @@ def test_allow_discussion_fti_allows_allows_global_enabled(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(True, obj[\'allow_discussion\'])\n+        self.assertEqual(True, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_allowed(self): # noqa\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -312,7 +312,7 @@ def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_allow\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_set(self): # noqa\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -328,7 +328,7 @@ def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_set(s\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(True, obj[\'allow_discussion\'])\n+        self.assertEqual(True, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_fti_disallows_allows_global_enabled_but_instance_allowed(self): # noqa\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -345,7 +345,7 @@ def test_allow_discussion_fti_disallows_allows_global_enabled_but_instance_allow\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(True, obj[\'allow_discussion\'])\n+        self.assertEqual(True, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_global_enabled_but_instance_has_no_discussion_behavior(self): # noqa\n         registry = queryUtility(IRegistry)\n@@ -354,4 +354,4 @@ def test_allow_discussion_global_enabled_but_instance_has_no_discussion_behavior\n \n         obj = self.serialize()\n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex d3528ba6..91e3fb3a 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -19,6 +19,7 @@\n from zope.schema.interfaces import ValidationError\n \n import unittest\n+import six\n \n \n class RequiredField(object):\n@@ -55,12 +56,12 @@ def deserialize(self, fieldname, value):\n                                        IFieldDeserializer)\n         return deserializer(value)\n \n-    def test_ascii_deserialization_returns_bytestring(self):\n+    def test_ascii_deserialization_returns_native_string(self):\n         value = self.deserialize(\'test_ascii_field\', u\'Foo\')\n         self.assertTrue(isinstance(value, str), \'Not a <str>\')\n         self.assertEqual(\'Foo\', value)\n \n-    def test_asciiline_deserialization_returns_bytestring(self):\n+    def test_asciiline_deserialization_returns_native_string(self):\n         value = self.deserialize(\'test_asciiline_field\', u\'Foo\')\n         self.assertTrue(isinstance(value, str), \'Not a <str>\')\n         self.assertEqual(\'Foo\', value)\n@@ -77,17 +78,17 @@ def test_bool_deserialization_returns_false(self):\n \n     def test_bytes_deserialization_returns_bytestring(self):\n         value = self.deserialize(\'test_bytes_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, str), \'Not a <str>\')\n-        self.assertEqual(\'Foo\', value)\n+        self.assertTrue(isinstance(value, bytes), \'Not a <bytes>\')\n+        self.assertEqual(b\'Foo\', value)\n \n     def test_bytesline_deserialization_returns_bytestring(self):\n         value = self.deserialize(\'test_bytesline_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, str), \'Not a <str>\')\n-        self.assertEqual(\'Foo\', value)\n+        self.assertTrue(isinstance(value, bytes), \'Not a <bytes>\')\n+        self.assertEqual(b\'Foo\', value)\n \n     def test_choice_deserialization_returns_vocabulary_item(self):\n         value = self.deserialize(\'test_choice_field\', u\'bar\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'bar\', value)\n \n     def test_date_deserialization_returns_date(self):\n@@ -128,7 +129,7 @@ def test_datetime_with_tz_deserialization_handles_dst(self):\n         value = self.deserialize(\'test_datetime_tz_field\',\n                                  u\'2015-05-20T10:39:54.361+02\')\n         self.assertEqual(timezone("Europe/Zurich").localize(\n-            datetime(2015, 05, 20, 10, 39, 54, 361000)), value)\n+            datetime(2015, 5, 20, 10, 39, 54, 361000)), value)\n \n     def test_datetime_deserialization_none(self):\n         # Make sure we don\'t construct a datetime out of nothing\n@@ -179,12 +180,12 @@ def test_set_deserialization_returns_set(self):\n \n     def test_text_deserialization_returns_unicode(self):\n         value = self.deserialize(\'test_text_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'Foo\', value)\n \n     def test_textline_deserialization_returns_unicode(self):\n         value = self.deserialize(\'test_textline_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'Foo\', value)\n \n     def test_time_deserialization_returns_time(self):\n@@ -252,7 +253,7 @@ def test_namedfield_deserialization_decodes_value(self):\n             u\'data\': u\'U3BhbSBhbmQgZWdncyE=\',\n             u\'encoding\': u\'base64\',\n         })\n-        self.assertEquals(\'Spam and eggs!\', value.data)\n+        self.assertEqual(b\'Spam and eggs!\', value.data)\n \n     def test_namedfield_deserialization_sets_content_type(self):\n         value = self.deserialize(\'test_namedfile_field\', {\n@@ -274,7 +275,7 @@ def test_namedfile_deserialization_returns_namedfile(self):\n         })\n         self.assertTrue(isinstance(value, namedfile.NamedFile),\n                         \'Not a <NamedFile>\')\n-        self.assertEqual(\'Spam and eggs!\', value.data)\n+        self.assertEqual(b\'Spam and eggs!\', value.data)\n \n     def test_namedimage_deserialization_returns_namedimage(self):\n         value = self.deserialize(\'test_namedimage_field\', {\n@@ -284,7 +285,7 @@ def test_namedimage_deserialization_returns_namedimage(self):\n         })\n         self.assertTrue(isinstance(value, namedfile.NamedImage),\n                         \'Not a <NamedImage>\')\n-        self.assertTrue(value.data.startswith(\'GIF89a\'))\n+        self.assertTrue(value.data.startswith(b\'GIF89a\'))\n \n     def test_namedblobfile_deserialization_returns_namedblobfile(self):\n         value = self.deserialize(\'test_namedblobfile_field\', {\n@@ -292,7 +293,7 @@ def test_namedblobfile_deserialization_returns_namedblobfile(self):\n         })\n         self.assertTrue(isinstance(value, namedfile.NamedBlobFile),\n                         \'Not a <NamedBlobFile>\')\n-        self.assertEqual(\'Spam and eggs!\', value.data)\n+        self.assertEqual(b\'Spam and eggs!\', value.data)\n \n     def test_namedblobimage_deserialization_returns_namedblobimage(self):\n         value = self.deserialize(\'test_namedblobimage_field\', {\n@@ -302,7 +303,7 @@ def test_namedblobimage_deserialization_returns_namedblobimage(self):\n         })\n         self.assertTrue(isinstance(value, namedfile.NamedBlobImage),\n                         \'Not a <NamedBlobImage>\')\n-        self.assertTrue(value.data.startswith(\'GIF89a\'))\n+        self.assertTrue(value.data.startswith(b\'GIF89a\'))\n \n     def test_namedblobimage_deserialization_fed_with_null_removes_image(self):\n         # null in json translates to None in python.\n@@ -332,14 +333,14 @@ def test_relationchoice_deserialization_from_uid_returns_document(self):\n         doc2 = self.portal[self.portal.invokeFactory(\n             \'DXTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n         value = self.deserialize(\'test_relationchoice_field\',\n-                                 unicode(doc2.UID()))\n+                                 six.text_type(doc2.UID()))\n         self.assertEqual(doc2, value)\n \n     def test_relationchoice_deserialization_from_url_returns_document(self):\n         doc2 = self.portal[self.portal.invokeFactory(\n             \'DXTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n         value = self.deserialize(\'test_relationchoice_field\',\n-                                 unicode(doc2.absolute_url()))\n+                                 six.text_type(doc2.absolute_url()))\n         self.assertEqual(doc2, value)\n \n     def test_relationchoice_deserialization_from_path_returns_document(self):\n@@ -353,8 +354,9 @@ def test_relationlist_deserialization_returns_list_of_documents(self):\n             \'DXTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n         doc3 = self.portal[self.portal.invokeFactory(\n             \'DXTestDocument\', id=\'doc3\', title=\'Referenceable Document\')]\n-        value = self.deserialize(\'test_relationlist_field\',\n-                                 [unicode(doc2.UID()), unicode(doc3.UID())])\n+        value = self.deserialize(\n+            \'test_relationlist_field\',\n+            [six.text_type(doc2.UID()), six.text_type(doc3.UID())])\n         self.assertTrue(isinstance(value, list), \'Not a <list>\')\n         self.assertEqual(doc2, value[0])\n         self.assertEqual(doc3, value[1])\n@@ -368,7 +370,7 @@ def test_datetime_deserializer_handles_invalid_value(self):\n             self.deserialize(\'test_datetime_field\',\n                              u\'2015-15-15T10:39:54.361Z\')\n         self.assertEqual(u\'Invalid date: 2015-15-15T10:39:54.361Z\',\n-                         cm.exception.message)\n+                         str(cm.exception))\n \n     def test_datetime_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError):\n@@ -377,13 +379,13 @@ def test_datetime_deserializer_validates_value(self):\n \n     def test_collection_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n-            self.deserialize(\'test_list_value_type_field\', [1, \'2\', 3])\n+            self.deserialize(\'test_list_value_type_field\', [1, b\'2\', 3])\n \n         # This validation error is actually produced by the\n         # DefaultFieldDeserializer that the CollectionFieldDeserializer will\n         # delegate to for deserializing collection items.\n         self.assertEqual(u\'Object is of wrong type.\', cm.exception.doc())\n-        self.assertEqual((\'2\', (int, long), \'\'), cm.exception.args)\n+        self.assertEqual((b\'2\', six.integer_types, \'\'), cm.exception.args)\n \n     def test_dict_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n@@ -392,15 +394,23 @@ def test_dict_deserializer_validates_value(self):\n         # This validation error is actually produced by the\n         # DefaultFieldDeserializer that the DictFieldSerializer will delegate\n         # to for deserializing keys and values.\n-        self.assertEqual(u\'Object is of wrong type.\', cm.exception.doc())\n-        self.assertEqual((\'k\', (int, long), \'\'), cm.exception.args)\n+        # We check for two sets of exception details\n+        # because zope.schema changed its exception...\n+        self.assertIn(cm.exception.doc(), (\n+            u\'Object is of wrong type.\',\n+            u\'Invalid int literal.\',\n+        ))\n+        self.assertIn(cm.exception.args, (\n+            (\'k\', six.integer_types, \'\'),\n+            ("invalid literal for int() with base 10: \'k\'",),\n+        ))\n \n     def test_time_deserializer_handles_invalid_value(self):\n         with self.assertRaises(ValueError) as cm:\n             self.deserialize(\'test_time_field\',\n                              u\'midnight\')\n         self.assertEqual(u\'Invalid time: midnight\',\n-                         cm.exception.message)\n+                         str(cm.exception))\n \n     def test_time_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n@@ -412,9 +422,9 @@ def test_timedelta_deserializer_handles_invalid_value(self):\n         with self.assertRaises(ValueError) as cm:\n             self.deserialize(\'test_timedelta_field\',\n                              u\'2h\')\n-        self.assertEqual(\n-            u\'unsupported type for timedelta seconds component: unicode\',\n-            cm.exception.message)\n+        self.assertIn(\n+            u\'unsupported type for timedelta seconds component:\',\n+            str(cm.exception))\n \n     def test_timedelta_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n@@ -462,7 +472,7 @@ def test_deserialize_with_context_bound_vocabulary(self):\n \n     def test_textline_deserializer_strips_value(self):\n         value = self.deserialize(\'test_textline_field\', u\'  aa  \')\n-        self.assertEquals(value, \'aa\')\n+        self.assertEqual(value, \'aa\')\n \n     def test_default_field_deserializer_validates_value(self):\n \n@@ -478,6 +488,6 @@ def constraint(self, value):\n                                        IFieldDeserializer)\n \n         with self.assertRaises(ConstraintNotSatisfied):\n-            deserializer("not an int")\n+            deserializer(b"not an int")\n \n         self.assertEqual(42, deserializer(42))\ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex c86dc8e2..99fc6f32 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -21,6 +21,7 @@\n from zope.interface.verify import verifyClass\n \n import os\n+import six\n \n if PLONE_VERSION.base_version >= \'5.1\':\n     GIF_SCALE_FORMAT = \'png\'\n@@ -60,12 +61,12 @@ def serialize(self, fieldname, value):\n \n     def test_ascii_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_ascii_field\', \'foo\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'foo\', value)\n \n     def test_asciiline_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_asciiline_field\', \'foo\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'foo\', value)\n \n     def test_bool_field_serialization_returns_true(self):\n@@ -79,35 +80,35 @@ def test_bool_field_serialization_returns_false(self):\n         self.assertEqual(False, value)\n \n     def test_bytes_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_bytes_field\', \'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        value = self.serialize(\'test_bytes_field\', b\'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'\\xe4\\xf6\\xfc\', value)\n \n     def test_bytesline_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_bytesline_field\',\n-                               \'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+                               b\'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'\\xe4\\xf6\\xfc\', value)\n \n     def test_choice_field_serialization_returns_vocabulary_item(self):\n         value = self.serialize(\'test_choice_field\', u\'foo\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'foo\', value)\n \n     def test_date_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_date_field\', date(2015, 7, 15))\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'2015-07-15\', value)\n \n     def test_datetime_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_datetime_field\',\n                                datetime(2015, 6, 20, 13, 22, 4))\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'2015-06-20T13:22:04\', value)\n \n     def test_decimal_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_decimal_field\', \'1.1\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'1.1\', value)\n \n     def test_dict_field_serialization_returns_dict(self):\n@@ -143,17 +144,17 @@ def test_set_field_serialization_returns_list(self):\n \n     def test_text_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_text_field\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'K\xc3\xa4fer\', value)\n \n     def test_textline_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_textline_field\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'K\xc3\xa4fer\', value)\n \n     def test_time_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_time_field\', time(14, 15, 33))\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'14:15:33\', value)\n \n     def test_timedelta_field_serialization_returns_float(self):\n@@ -189,7 +190,8 @@ def test_namedfile_field_serialization_returns_dict(self):\n \n     def test_namedimage_field_serialization_returns_dict(self):\n         image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        image_data = open(image_file, \'rb\').read()\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         fn = \'test_namedimage_field\'\n         with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n             value = self.serialize(\n@@ -266,7 +268,8 @@ def test_namedblobfile_field_serialization_returns_dict(self):\n \n     def test_namedblobimage_field_serialization_returns_dict(self):\n         image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        image_data = open(image_file, \'rb\').read()\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         fn = \'test_namedblobimage_field\'\n         with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n             value = self.serialize(\ndiff --git a/src/plone/restapi/tests/test_error_handling.py b/src/plone/restapi/tests/test_error_handling.py\nindex f3772895..9cad014d 100644\n--- a/src/plone/restapi/tests/test_error_handling.py\n+++ b/src/plone/restapi/tests/test_error_handling.py\n@@ -18,7 +18,7 @@\n class InternalServerErrorView(BrowserView):\n \n     def __call__(self):  # pragma: no cover\n-        from urllib2 import HTTPError\n+        from six.moves.urllib.error import HTTPError\n         raise HTTPError(\n             \'http://nohost/plone/internal_server_error\',\n             500,\ndiff --git a/src/plone/restapi/tests/test_expansion.py b/src/plone/restapi/tests/test_expansion.py\nindex 3806210f..8bed02c9 100644\n--- a/src/plone/restapi/tests/test_expansion.py\n+++ b/src/plone/restapi/tests/test_expansion.py\n@@ -126,7 +126,7 @@ def test_actions_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'actions\',\n-            response.json().get(\'@components\').keys()\n+            list(response.json().get(\'@components\'))\n         )\n \n     def test_actions_expanded(self):\n@@ -160,7 +160,7 @@ def test_navigation_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'navigation\',\n-            response.json().get(\'@components\').keys()\n+            list(response.json().get(\'@components\'))\n         )\n \n     def test_navigation_expanded(self):\n@@ -239,7 +239,7 @@ def test_breadcrumbs_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'breadcrumbs\',\n-            response.json().get(\'@components\').keys()\n+            list(response.json().get(\'@components\'))\n         )\n \n     def test_breadcrumbs_expanded(self):\n@@ -266,7 +266,7 @@ def test_workflow_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'workflow\',\n-            response.json().get(\'@components\').keys()\n+            list(response.json().get(\'@components\'))\n         )\n \n     def test_workflow_expanded(self):\n@@ -323,9 +323,9 @@ def setUp(self):\n         alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=\'Test document\')\n+            self.portal[\'en\'], \'Document\', title=u\'Test document\')\n         self.es_content = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=\'Test document\')\n+            self.portal[\'es\'], \'Document\', title=u\'Test document\')\n         ITranslationManager(self.en_content).register_translation(\n             \'es\', self.es_content)\n \n@@ -337,7 +337,7 @@ def test_translations_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'translations\',\n-            response.json().get(\'@components\').keys()\n+            list(response.json().get(\'@components\'))\n         )\n \n     def test_translations_expanded(self):\ndiff --git a/src/plone/restapi/tests/test_pas.py b/src/plone/restapi/tests/test_pas.py\nindex ca5482d3..4a30e18d 100644\n--- a/src/plone/restapi/tests/test_pas.py\n+++ b/src/plone/restapi/tests/test_pas.py\n@@ -72,13 +72,13 @@ def test_authenticate_credentials_with_valid_token(self):\n             (\'admin\', \'admin\'),\n             self.plugin.authenticateCredentials(creds))\n \n-    def test_authenticate_credentials_returns_byte_string(self):\n+    def test_authenticate_credentials_returns_native_string(self):\n         creds = {}\n         creds[\'extractor\'] = \'jwt_auth\'\n         creds[\'token\'] = self.plugin.create_token(\'admin\')\n         self.assertIsInstance(\n             self.plugin.authenticateCredentials(creds)[0],\n-            str\n+            str,\n         )\n \n     def test_decode_token_after_key_rotation(self):\ndiff --git a/src/plone/restapi/tests/test_registry.py b/src/plone/restapi/tests/test_registry.py\nindex e421b615..bee9973c 100644\n--- a/src/plone/restapi/tests/test_registry.py\n+++ b/src/plone/restapi/tests/test_registry.py\n@@ -12,6 +12,7 @@\n \n import transaction\n import unittest\n+from six.moves import range\n \n \n class TestRegistry(unittest.TestCase):\ndiff --git a/src/plone/restapi/tests/test_registry_serializer.py b/src/plone/restapi/tests/test_registry_serializer.py\nindex ea9f2856..b5817a20 100644\n--- a/src/plone/restapi/tests/test_registry_serializer.py\n+++ b/src/plone/restapi/tests/test_registry_serializer.py\n@@ -1,19 +1,23 @@\n # -*- coding: utf-8 -*-\n-import unittest\n-\n from plone.registry import Registry\n from plone.registry import field\n from plone.registry.record import Record\n+from plone.restapi import HAS_AT\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from zope.component import getMultiAdapter\n \n+import unittest\n+from six.moves import range\n+\n \n class TestRegistrySerializer(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n \n@@ -26,8 +30,8 @@ def test_empty(self):\n         registry = Registry()\n         obj = self.serialize(registry)\n         expected = [\'@id\', \'items_total\', \'items\']\n-        self.assertEqual(set(obj.keys()), set(expected))\n-        self.assertNotIn(\'batching\', obj.keys())\n+        self.assertEqual(set(obj), set(expected))\n+        self.assertNotIn(\'batching\', list(obj))\n \n     def test_batched(self):\n         registry = Registry()\n@@ -38,8 +42,8 @@ def test_batched(self):\n \n         obj = self.serialize(registry)\n         expected = [\'@id\', \'items_total\', \'items\', \'batching\']\n-        self.assertEqual(set(expected), set(obj.keys()))\n-        self.assertEqual(obj[\'items_total\'], len(range(1, 100)))\n+        self.assertEqual(set(expected), set(obj))\n+        self.assertEqual(obj[\'items_total\'], len(list(range(1, 100))))\n \n     def test_structure(self):\n         registry = Registry()\n@@ -49,7 +53,7 @@ def test_structure(self):\n \n         obj = self.serialize(registry)\n         item = obj[\'items\'][0]\n-        self.assertEqual(set(item.keys()), set([\'name\', \'value\', \'schema\']))\n-        self.assertEqual(set(item[\'schema\'].keys()), set([\'properties\']))\n+        self.assertEqual(set(item), set([\'name\', \'value\', \'schema\']))\n+        self.assertEqual(set(item[\'schema\']), set([\'properties\']))\n         self.assertEqual(item[\'name\'], \'foo.bar\')\n         self.assertEqual(item[\'value\'], u"Lorem Ipsum")\ndiff --git a/src/plone/restapi/tests/test_roles.py b/src/plone/restapi/tests/test_roles.py\nindex 26cb4b42..83d5becb 100644\n--- a/src/plone/restapi/tests/test_roles.py\n+++ b/src/plone/restapi/tests/test_roles.py\n@@ -22,7 +22,7 @@ def setUp(self):\n     def test_roles_endpoint_lists_roles(self):\n         response = self.api_session.get(\'/@roles\')\n \n-        self.assertItemsEqual([\n+        expected = (\n             {u\'@id\': self.portal_url + u\'/@roles/Contributor\',\n              u\'@type\': u\'role\',\n              u\'id\': u\'Contributor\',\n@@ -50,19 +50,23 @@ def test_roles_endpoint_lists_roles(self):\n             {u\'@id\': self.portal_url + u\'/@roles/Manager\',\n              u\'@type\': u\'role\',\n              u\'id\': u\'Manager\',\n-             u\'title\': u\'Manager\'}],\n-            response.json())\n+             u\'title\': u\'Manager\'},\n+        )\n+        result = response.json()\n+        self.assertEqual(len(expected), len(result))\n+        for item in result:\n+            self.assertIn(item, expected)\n \n     def test_roles_endpoint_translates_role_titles(self):\n         self.api_session.headers.update({\'Accept-Language\': \'de\'})\n         response = self.api_session.get(\'/@roles\')\n \n-        self.assertItemsEqual([\n+        self.assertEqual({\n             u\'Hinzuf\\xfcgen\',\n             u\'Bearbeiten\',\n             u\'Benutzer\',\n             u\'Ansehen\',\n             u\'Ver\\xf6ffentlichen\',\n             u\'Website-Administrator\',\n-            u\'Verwalten\'],\n-            [item[\'title\'] for item in response.json()])\n+            u\'Verwalten\'},\n+            {item[\'title\'] for item in response.json()})\ndiff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex 1cb3aef3..c6ffbbfa 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -8,6 +8,7 @@\n from plone.app.textfield.value import RichTextValue\n from plone.dexterity.utils import createContentInContainer\n from plone.registry.interfaces import IRegistry\n+from plone.restapi import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n@@ -16,6 +17,7 @@\n from Products.CMFCore.utils import getToolByName\n from zope.component import getUtility\n \n+import six\n import transaction\n import unittest\n \n@@ -295,8 +297,8 @@ def test_full_objects_retrieval_discussion(self):\n                  \'fullobjects\': True}\n         response = self.api_session.get(\'/@search\', params=query)\n \n-        self.assertEquals(response.status_code, 200)\n-        self.assertEquals(len(response.json()[\'items\']), 1)\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(len(response.json()[\'items\']), 1)\n \n     def test_full_objects_retrieval_collections(self):\n         self.collection = createContentInContainer(\n@@ -309,8 +311,8 @@ def test_full_objects_retrieval_collections(self):\n                  \'fullobjects\': True}\n         response = self.api_session.get(\'/@search\', params=query)\n \n-        self.assertEquals(response.status_code, 200)\n-        self.assertEquals(len(response.json()[\'items\']), 1)\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(len(response.json()[\'items\']), 1)\n \n     # ZCTextIndex\n \n@@ -347,7 +349,7 @@ def test_keyword_index_str_query_or(self):\n         query = {\'test_list_field\': [\'Keyword2\', \'Keyword3\']}\n         response = self.api_session.get(\'/@search\', params=query)\n \n-        self.assertItemsEqual(\n+        self.assertEqual(\n             [u\'/plone/folder/doc\',\n              u\'/plone/folder/other-document\'],\n             result_paths(response.json())\n@@ -365,6 +367,7 @@ def test_keyword_index_str_query_and(self):\n             result_paths(response.json())\n         )\n \n+    @unittest.skipIf(six.PY3, "Python 3 can\'t sort mixed types")\n     def test_keyword_index_int_query(self):\n         self.doc.test_list_field = [42, 23]\n         self.doc.reindexObject()\n@@ -610,6 +613,8 @@ class TestSearchATFunctional(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n         self.portal_url = self.portal.absolute_url()\ndiff --git a/src/plone/restapi/tests/test_search_utils.py b/src/plone/restapi/tests/test_search_utils.py\nindex bf1e3efb..65a92378 100644\n--- a/src/plone/restapi/tests/test_search_utils.py\n+++ b/src/plone/restapi/tests/test_search_utils.py\n@@ -22,7 +22,7 @@ def test_unflattens_dotted_dict(self):\n         )\n \n     def test_works_on_empty_dict(self):\n-        self.assertEquals({}, unflatten_dotted_dict({}))\n+        self.assertEqual({}, unflatten_dotted_dict({}))\n \n     def test_works_with_list_values(self):\n         dct = {\ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex 43c14ab7..e4c60772 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -66,7 +66,7 @@ def test_serialize_can_read_as_manager(self):\n         setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Manager\'])\n         self.assertIn(\n             \'Test Read Permission\',\n-            self.serialize(self.portal.dxdoc).values()\n+            list(self.serialize(self.portal.dxdoc).values())\n         )\n \n     def test_serialize_cannot_read_as_member(self):\n@@ -75,7 +75,7 @@ def test_serialize_cannot_read_as_member(self):\n         setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n         self.assertNotIn(\n             \'Test Read Permission\',\n-            self.serialize(self.portal.dxdoc).values()\n+            list(self.serialize(self.portal.dxdoc).values())\n         )\n \n     def test_serialize_returns_desciption(self):\n@@ -265,8 +265,10 @@ def test_serialize_empty_file_returns_none(self):\n     def test_serialize_image(self):\n         self.portal.invokeFactory(\'Image\', id=\'image1\', title=\'Image 1\')\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         self.portal.image1.image = NamedBlobImage(\n-            data=open(image_file, \'r\').read(),\n+            data=image_data,\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\ndiff --git a/src/plone/restapi/tests/test_serializer_catalog.py b/src/plone/restapi/tests/test_serializer_catalog.py\nindex a66a0a1b..f8fa3bcc 100644\n--- a/src/plone/restapi/tests/test_serializer_catalog.py\n+++ b/src/plone/restapi/tests/test_serializer_catalog.py\n@@ -2,6 +2,7 @@\n from DateTime import DateTime\n from plone import api\n from plone.dexterity.utils import createContentInContainer\n+from plone.restapi import HAS_AT\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n@@ -101,7 +102,7 @@ def test_brain_summary_representation(self):\n         brain = lazy_map[0]\n         result = getMultiAdapter(\n             (brain, self.request), ISerializeToJsonSummary)()\n-        self.assertEquals(\n+        self.assertEqual(\n             {\'@id\': \'http://nohost/plone/my-folder/my-document\',\n              \'@type\': \'Document\',\n              \'title\': \'My Document\',\n@@ -177,6 +178,8 @@ class TestCatalogATSerializers(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n         self.request = self.portal.REQUEST\ndiff --git a/src/plone/restapi/tests/test_serializer_converters.py b/src/plone/restapi/tests/test_serializer_converters.py\nindex 3b643c95..289fee0c 100644\n--- a/src/plone/restapi/tests/test_serializer_converters.py\n+++ b/src/plone/restapi/tests/test_serializer_converters.py\n@@ -15,18 +15,19 @@\n \n import json\n import Missing\n+import six\n \n \n class TestJsonCompatibleConverters(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def test_None(self):\n-        self.assertEquals(None, json_compatible(None))\n-        self.assertEquals(\'null\', json.dumps(json_compatible(None)))\n+        self.assertEqual(None, json_compatible(None))\n+        self.assertEqual(\'null\', json.dumps(json_compatible(None)))\n \n     def test_error_when_type_unknown(self):\n         err_regex = r\'^No converter for making <object object at [^>]*>\' + \\\n-                    r\' \\(<type \\\'object\\\'>\\) JSON compatible.$\'\n+                    r\' \\(<(class|type) \\\'object\\\'>\\) JSON compatible.$\'\n \n         with self.assertRaisesRegexp(TypeError, err_regex):\n             json_compatible(object())\n@@ -35,143 +36,175 @@ def test_error_when_type_unknown(self):\n             json_compatible({\'foo\': [object()]})\n \n     def test_True(self):\n-        self.assertEquals(True, json_compatible(True))\n-        self.assertEquals(\'true\', json.dumps(json_compatible(True)))\n+        self.assertEqual(True, json_compatible(True))\n+        self.assertEqual(\'true\', json.dumps(json_compatible(True)))\n \n     def test_False(self):\n-        self.assertEquals(False, json_compatible(False))\n-        self.assertEquals(\'false\', json.dumps(json_compatible(False)))\n+        self.assertEqual(False, json_compatible(False))\n+        self.assertEqual(\'false\', json.dumps(json_compatible(False)))\n \n     def test_unicode(self):\n-        self.assertEquals(u\'foo\', json_compatible(u\'foo\'))\n-        self.assertIsInstance(json_compatible(u\'foo\'), unicode)\n-        self.assertEquals(\'"foo"\', json.dumps(json_compatible(\'foo\')))\n+        self.assertEqual(u\'foo\', json_compatible(u\'foo\'))\n+        self.assertIsInstance(json_compatible(u\'foo\'), six.text_type)\n+        self.assertEqual(\'"foo"\', json.dumps(json_compatible(\'foo\')))\n \n     def test_unicode_with_umlaut(self):\n-        self.assertEquals(u\'Hall\\xf6chen\', json_compatible(u\'Hall\\xf6chen\'))\n-        self.assertEquals(\'"Hall\\\\u00f6chen"\',\n-                          json.dumps(json_compatible(u\'Hall\\xf6chen\')))\n+        self.assertEqual(u\'Hall\\xf6chen\', json_compatible(u\'Hall\\xf6chen\'))\n+        self.assertEqual(\n+            \'"Hall\\\\u00f6chen"\',\n+            json.dumps(json_compatible(u\'Hall\\xf6chen\'))\n+        )\n \n     def test_string_is_converted_to_unicode(self):\n         # Standard library JSON works with unicode.\n-        self.assertEquals(u\'foo\', json_compatible(\'foo\'))\n-        self.assertIsInstance(json_compatible(\'foo\'), unicode)\n-        self.assertEquals(\'"foo"\', json.dumps(json_compatible(\'foo\')))\n+        self.assertEqual(u\'foo\', json_compatible(\'foo\'))\n+        self.assertIsInstance(json_compatible(\'foo\'), six.text_type)\n+        self.assertEqual(\'"foo"\', json.dumps(json_compatible(\'foo\')))\n \n     def test_string_with_umlaut(self):\n         # Standard library JSON works with unicode.\n-        self.assertEquals(u\'Hall\\xf6chen\', json_compatible(\'Hall\xc3\xb6chen\'))\n-        self.assertEquals(\'"Hall\\\\u00f6chen"\',\n-                          json.dumps(json_compatible(\'Hall\xc3\xb6chen\')))\n+        self.assertEqual(u\'Hall\\xf6chen\', json_compatible(\'Hall\xc3\xb6chen\'))\n+        self.assertEqual(\n+            \'"Hall\\\\u00f6chen"\',\n+            json.dumps(json_compatible(\'Hall\xc3\xb6chen\'))\n+        )\n \n     def test_int(self):\n-        self.assertEquals(42, json_compatible(42))\n+        self.assertEqual(42, json_compatible(42))\n         self.assertIsInstance(json_compatible(42), int)\n-        self.assertEquals(\'42\', json.dumps(json_compatible(42)))\n+        self.assertEqual(\'42\', json.dumps(json_compatible(42)))\n \n     def test_long(self):\n-        self.assertEquals(10L, json_compatible(10L))\n-        self.assertIsInstance(json_compatible(10L), long)\n-        self.assertEquals(\'10\', json.dumps(json_compatible(10L)))\n+        def _long(val):\n+            if six.PY2:\n+                return int(val)\n+            else:\n+                return int(val)\n+        self.assertEqual(_long(10), json_compatible(_long(10)))\n+        self.assertIsInstance(json_compatible(_long(10)), int)\n+        self.assertEqual(\'10\', json.dumps(json_compatible(_long(10))))\n \n     def test_float(self):\n-        self.assertEquals(1.4, json_compatible(1.4))\n+        self.assertEqual(1.4, json_compatible(1.4))\n         self.assertIsInstance(json_compatible(1.4), float)\n-        self.assertEquals(\'1.4\', json.dumps(json_compatible(1.4)))\n+        self.assertEqual(\'1.4\', json.dumps(json_compatible(1.4)))\n \n     def test_list(self):\n-        self.assertEquals([\'foo\'], json_compatible([\'foo\']))\n-        self.assertEquals(\'["foo"]\', json.dumps(json_compatible([\'foo\'])))\n+        self.assertEqual([\'foo\'], json_compatible([\'foo\']))\n+        self.assertEqual(\'["foo"]\', json.dumps(json_compatible([\'foo\'])))\n         self.assertIsInstance(json_compatible([\'foo\'])[0],\n-                              unicode,\n+                              six.text_type,\n                               \'List values should be converted recursively.\')\n \n     def test_persistent_list(self):\n         value = PersistentList([\'foo\'])\n-        self.assertEquals([\'foo\'], json_compatible(value))\n-        self.assertEquals(\'["foo"]\', json.dumps(json_compatible(value)))\n+        self.assertEqual([\'foo\'], json_compatible(value))\n+        self.assertEqual(\'["foo"]\', json.dumps(json_compatible(value)))\n         self.assertIsInstance(json_compatible(value)[0],\n-                              unicode,\n+                              six.text_type,\n                               \'PersistentList values should be converted\'\n                               \' recursively.\')\n \n     def test_tuple(self):\n         # Tuples are converted to list (json would do that anyway and\n         # it is easier to implement it with map).\n-        self.assertEquals([\'foo\', None], json_compatible((\'foo\', None)))\n-        self.assertEquals(\'["foo"]\', json.dumps(json_compatible((\'foo\', ))))\n+        self.assertEqual([\'foo\', None], json_compatible((\'foo\', None)))\n+        self.assertEqual(\'["foo"]\', json.dumps(json_compatible((\'foo\', ))))\n         self.assertIsInstance(json_compatible((\'foo\',))[0],\n-                              unicode,\n+                              six.text_type,\n                               \'Tuple values should be converted recursively.\')\n \n     def test_frozenset(self):\n-        self.assertEquals([[1, 1], [2, 2]],\n-                          sorted(json_compatible(frozenset([(1, 1), (2, 2)]))))\n+        self.assertEqual(\n+            [[1, 1], [2, 2]],\n+            sorted(json_compatible(frozenset([(1, 1), (2, 2)])))\n+        )\n \n     def test_set(self):\n-        self.assertEquals([[1, 1], [2, 2]],\n-                          sorted(json_compatible(set([(1, 1), (2, 2)]))))\n+        self.assertEqual(\n+            [[1, 1], [2, 2]],\n+            sorted(json_compatible(set([(1, 1), (2, 2)])))\n+        )\n \n     def test_dict(self):\n-        self.assertEquals({u\'foo\': True,\n-                           u\'bar\': None,\n-                           u\'baz\': 3},\n-                          json_compatible({\'foo\': True,\n-                                           \'bar\': None,\n-                                           \'baz\': 3}))\n-        self.assertEquals(\'{"foo": "bar"}\',\n-                          json.dumps(json_compatible({\'foo\': \'bar\'})))\n-        self.assertIsInstance(json_compatible({\'foo\': \'bar\'}.keys()[0]),\n-                              unicode,\n+        self.assertEqual(\n+            {\n+                u\'foo\': True,\n+                u\'bar\': None,\n+                u\'baz\': 3\n+            },\n+            json_compatible(\n+                {\n+                    \'foo\': True,\n+                    \'bar\': None,\n+                    \'baz\': 3\n+                }\n+            )\n+        )\n+        self.assertEqual(\n+            \'{"foo": "bar"}\',\n+            json.dumps(json_compatible({\'foo\': \'bar\'}))\n+        )\n+        self.assertIsInstance(json_compatible(list({\'foo\': \'bar\'})[0]),\n+                              six.text_type,\n                               \'Dict keys should be converted recursively.\')\n-        self.assertIsInstance(json_compatible({\'foo\': \'bar\'}.values()[0]),\n-                              unicode,\n-                              \'Dict values should be converted recursively.\')\n+        self.assertIsInstance(\n+            json_compatible(list({\'foo\': \'bar\'}.values())[0]),\n+            six.text_type,\n+            \'Dict values should be converted recursively.\')\n \n     def test_dict_empty(self):\n-        self.assertEquals({}, json_compatible({}))\n-        self.assertEquals(\'{}\', json.dumps(json_compatible({})))\n+        self.assertEqual({}, json_compatible({}))\n+        self.assertEqual(\'{}\', json.dumps(json_compatible({})))\n \n     def test_persistent_mapping(self):\n         value = PersistentMapping({\'foo\': \'bar\'})\n-        self.assertEquals({u\'foo\': u\'bar\'}, json_compatible(value))\n-        self.assertEquals(\'{"foo": "bar"}\', json.dumps(json_compatible(value)))\n-        self.assertIsInstance(json_compatible(value.keys()[0]),\n-                              unicode,\n+        self.assertEqual({u\'foo\': u\'bar\'}, json_compatible(value))\n+        self.assertEqual(\'{"foo": "bar"}\', json.dumps(json_compatible(value)))\n+        self.assertIsInstance(json_compatible(list(value)[0]),\n+                              six.text_type,\n                               \'Dict keys should be converted recursively.\')\n-        self.assertIsInstance(json_compatible(value.values()[0]),\n-                              unicode,\n+        self.assertIsInstance(json_compatible(list(value.values())[0]),\n+                              six.text_type,\n                               \'Dict values should be converted recursively.\')\n \n     def test_python_datetime(self):\n         value = DateTime(\'2015/11/23 19:45:55.649027 GMT+3\').asdatetime()\n-        self.assertEquals(u\'2015-11-23T16:45:55+00:00\',\n-                          json_compatible(value))\n-        self.assertEquals(\'"2015-11-23T16:45:55+00:00"\',\n-                          json.dumps(json_compatible(value)))\n+        self.assertEqual(\n+            u\'2015-11-23T16:45:55+00:00\',\n+            json_compatible(value)\n+        )\n+        self.assertEqual(\n+            \'"2015-11-23T16:45:55+00:00"\',\n+            json.dumps(json_compatible(value))\n+        )\n \n     def test_zope_DateTime(self):\n         value = DateTime(\'2015/11/23 19:45:55.649027 GMT+3\')\n-        self.assertEquals(u\'2015-11-23T16:45:55+00:00\',\n-                          json_compatible(value))\n-        self.assertEquals(\'"2015-11-23T16:45:55+00:00"\',\n-                          json.dumps(json_compatible(value)))\n+        self.assertEqual(\n+            u\'2015-11-23T16:45:55+00:00\',\n+            json_compatible(value)\n+        )\n+        self.assertEqual(\n+            \'"2015-11-23T16:45:55+00:00"\',\n+            json.dumps(json_compatible(value))\n+        )\n \n     def test_date(self):\n         value = date(2015, 11, 23)\n-        self.assertEquals(u\'2015-11-23\', json_compatible(value))\n-        self.assertEquals(\'"2015-11-23"\', json.dumps(json_compatible(value)))\n+        self.assertEqual(u\'2015-11-23\', json_compatible(value))\n+        self.assertEqual(\'"2015-11-23"\', json.dumps(json_compatible(value)))\n \n     def test_time(self):\n         value = time(19, 45, 55)\n-        self.assertEquals(u\'19:45:55\', json_compatible(value))\n-        self.assertEquals(\'"19:45:55"\', json.dumps(json_compatible(value)))\n+        self.assertEqual(u\'19:45:55\', json_compatible(value))\n+        self.assertEqual(\'"19:45:55"\', json.dumps(json_compatible(value)))\n \n     def test_timedelta(self):\n-        self.assertEquals(9.58, json_compatible(timedelta(seconds=9.58)))\n+        self.assertEqual(9.58, json_compatible(timedelta(seconds=9.58)))\n \n     def test_broken_relation_value(self):\n-        self.assertEquals(None, json_compatible(RelationValue(12345)))\n+        self.assertEqual(None, json_compatible(RelationValue(12345)))\n \n     def test_relation_value(self):\n         portal = self.layer[\'portal\']\n@@ -181,7 +214,7 @@ def test_relation_value(self):\n             description=\'Description\',\n         )]\n         intids = getUtility(IIntIds)\n-        self.assertEquals(\n+        self.assertEqual(\n             {\'@id\': \'http://nohost/plone/doc1\',\n              \'@type\': \'DXTestDocument\',\n              \'title\': \'Document 1\',\n@@ -192,7 +225,7 @@ def test_relation_value(self):\n     def test_i18n_message(self):\n         _ = MessageFactory(\'plone.restapi.tests\')\n         msg = _(u\'message_id\', default=u\'default message\')\n-        self.assertEquals(u\'default message\', json_compatible(msg))\n+        self.assertEqual(u\'default message\', json_compatible(msg))\n \n     def test_missing_value(self):\n-        self.assertEquals(None, json_compatible(Missing.Value))\n+        self.assertEqual(None, json_compatible(Missing.Value))\ndiff --git a/src/plone/restapi/tests/test_serializer_group.py b/src/plone/restapi/tests/test_serializer_group.py\nindex 29361d68..977fb7ca 100644\n--- a/src/plone/restapi/tests/test_serializer_group.py\n+++ b/src/plone/restapi/tests/test_serializer_group.py\n@@ -49,7 +49,7 @@ def test_serialize_returns_id(self):\n         self.assertEqual(\'Plone Team\', group.get(\'title\'))\n         self.assertEqual(\'We are Plone\', group.get(\'description\'))\n         self.assertEqual(\n-            set(group[\'users\'].keys()),\n+            set(group[\'users\']),\n             set([\'@id\', \'items_total\', \'items\'])\n         )\n \ndiff --git a/src/plone/restapi/tests/test_serializer_summary.py b/src/plone/restapi/tests/test_serializer_summary.py\nindex 1ecdb6b0..7e09abd8 100644\n--- a/src/plone/restapi/tests/test_serializer_summary.py\n+++ b/src/plone/restapi/tests/test_serializer_summary.py\n@@ -3,6 +3,7 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.dexterity.utils import createContentInContainer\n+from plone.restapi import HAS_AT\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n@@ -100,6 +101,8 @@ class TestSummarySerializersATTypes(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\ndiff --git a/src/plone/restapi/tests/test_services.py b/src/plone/restapi/tests/test_services.py\nindex a52ecd9d..7e25c043 100644\n--- a/src/plone/restapi/tests/test_services.py\n+++ b/src/plone/restapi/tests/test_services.py\n@@ -94,8 +94,10 @@ def test_get_news_item(self):\n             title=\'News Item 1\'\n         )\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         self.portal.news1.image = NamedBlobImage(\n-            data=open(image_file, \'r\').read(),\n+            data=image_data,\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\n@@ -217,8 +219,10 @@ def test_get_file(self):  # pragma: no cover\n         pdf_file = os.path.join(\n             os.path.dirname(__file__), u\'file.pdf\'\n         )\n+        with open(pdf_file, \'rb\') as f:\n+            pdf_data = f.read()\n         self.portal.file1.file = NamedBlobFile(\n-            data=open(pdf_file, \'r\').read(),\n+            data=pdf_data,\n             contentType=\'application/pdf\',\n             filename=u\'file.pdf\'\n         )\n@@ -247,8 +251,10 @@ def test_get_image(self):  # pragma: no cover\n         self.portal.img1.title = \'Image\'\n         self.portal.img1.description = u\'An image\'\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         self.portal.img1.image = NamedBlobImage(\n-            data=open(image_file, \'r\').read(),\n+            data=image_data,\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\ndiff --git a/src/plone/restapi/tests/test_services_actions.py b/src/plone/restapi/tests/test_services_actions.py\nindex da2b8b26..9c3332d5 100644\n--- a/src/plone/restapi/tests/test_services_actions.py\n+++ b/src/plone/restapi/tests/test_services_actions.py\n@@ -72,7 +72,7 @@ def test_actions_all_categories(self):\n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n         self.assertEqual([\'category1\', \'category2\', \'category3\'],\n-                         sorted(response.keys()))\n+                         sorted(response))\n \n     def test_actions_selected_categories(self):\n         response = self.api_session.get(\n@@ -81,7 +81,7 @@ def test_actions_selected_categories(self):\n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n         self.assertEqual([\'category1\', \'category2\'],\n-                         sorted(response.keys()))\n+                         sorted(response))\n \n     def test_actions_siteroot(self):\n         response = self.api_session.get(\'/@actions\')\ndiff --git a/src/plone/restapi/tests/test_services_comments.py b/src/plone/restapi/tests/test_services_comments.py\nindex 06b8d13d..67cc15a0 100644\n--- a/src/plone/restapi/tests/test_services_comments.py\n+++ b/src/plone/restapi/tests/test_services_comments.py\n@@ -63,7 +63,7 @@ def test_list_datastructure(self):\n         data = response.json()\n         self.assertEqual(\n             set([\'items_total\', \'items\', \'@id\']),\n-            set(data.keys())\n+            set(data)\n         )\n \n     def test_list_batching(self):\ndiff --git a/src/plone/restapi/tests/test_services_email_notification.py b/src/plone/restapi/tests/test_services_email_notification.py\nindex af96b603..4a75e6b7 100644\n--- a/src/plone/restapi/tests/test_services_email_notification.py\n+++ b/src/plone/restapi/tests/test_services_email_notification.py\n@@ -55,7 +55,7 @@ def test_email_notification(self):\n             })\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 204)\n+        self.assertEqual(response.status_code, 204)\n         self.assertTrue(\'Subject: [No Subject]\' in\n                         self.mailhost.messages[0])\n         self.assertTrue(\'To: info@plone.org\' in\n@@ -76,7 +76,7 @@ def test_email_notification_all_parameters(self):\n             })\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 204)\n+        self.assertEqual(response.status_code, 204)\n         self.assertTrue(\'=?utf-8?q?This_is_the_subject\' in\n                         self.mailhost.messages[0])\n         self.assertTrue(\'To: info@plone.org\' in\ndiff --git a/src/plone/restapi/tests/test_services_email_send.py b/src/plone/restapi/tests/test_services_email_send.py\nindex 29c31090..32efd9e8 100644\n--- a/src/plone/restapi/tests/test_services_email_send.py\n+++ b/src/plone/restapi/tests/test_services_email_send.py\n@@ -56,7 +56,7 @@ def test_email_send(self):\n             })\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 204)\n+        self.assertEqual(response.status_code, 204)\n         self.assertTrue(\'Subject: =?utf-8?q?A_portal_user_via_Plone_site?=\' in\n                         self.mailhost.messages[0])\n         self.assertTrue(\'From: info@plone.org\' in\n@@ -78,7 +78,7 @@ def test_email_send_all_parameters(self):\n             })\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 204)\n+        self.assertEqual(response.status_code, 204)\n         self.assertTrue(\'=?utf-8?q?This_is_the_subject\' in\n                         self.mailhost.messages[0])\n         self.assertTrue(\'From: info@plone.org\' in\n@@ -101,4 +101,4 @@ def test_email_send_anonymous(self):\n                 \'subject\': \'This is the subject.\'\n             })\n \n-        self.assertEquals(response.status_code, 401)\n+        self.assertEqual(response.status_code, 401)\ndiff --git a/src/plone/restapi/tests/test_services_history.py b/src/plone/restapi/tests/test_services_history.py\nindex e3856e85..7dbbd54e 100644\n--- a/src/plone/restapi/tests/test_services_history.py\n+++ b/src/plone/restapi/tests/test_services_history.py\n@@ -9,6 +9,7 @@\n \n import unittest\n import transaction\n+import six\n \n \n class TestHistoryEndpoint(unittest.TestCase):\n@@ -79,11 +80,11 @@ def test_get_datastructure(self):\n             self.assertIn(item[\'type\'], [\'versioning\', \'workflow\'])\n \n             if item[\'type\'] == \'versioning\':\n-                self.assertEqual(set(item.keys()), set(history_keys))\n+                self.assertEqual(set(item), set(history_keys))\n             else:\n-                self.assertEqual(set(item.keys()), set(workflow_keys))\n+                self.assertEqual(set(item), set(workflow_keys))\n \n-            self.assertEqual(set(item[\'actor\'].keys()), set(actor_keys))\n+            self.assertEqual(set(item[\'actor\']), set(actor_keys))\n \n             self.assertIsNotNone(item[\'action\'])\n \n@@ -103,7 +104,7 @@ def test_time_field(self):\n         response = self.api_session.get(url)\n \n         for item in response.json():\n-            self.assertTrue(isinstance(item[\'time\'], basestring))\n+            self.assertTrue(isinstance(item[\'time\'], six.string_types))\n \n     def test_get_historical_link(self):\n         # The @id field should link to @history/version.\n@@ -116,7 +117,7 @@ def test_get_historical_link(self):\n                     item[\'@id\'].endswith(\'@history/\' + str(item[\'version\']))\n                 )\n             else:\n-                self.assertNotIn(\'@id\', item.keys())\n+                self.assertNotIn(\'@id\', list(item))\n \n     def test_explicit_current(self):\n         # Does version=current get the current version\ndiff --git a/src/plone/restapi/tests/test_services_principals.py b/src/plone/restapi/tests/test_services_principals.py\nindex b1482a4c..64e2d647 100644\n--- a/src/plone/restapi/tests/test_services_principals.py\n+++ b/src/plone/restapi/tests/test_services_principals.py\n@@ -63,8 +63,8 @@ def test_get_principals(self):\n \n         response = response.json()\n         self.assertEqual(2, len(response))\n-        self.assertEquals(1, len(response[\'users\']))\n-        self.assertEquals(\'noam\', response[\'users\'][0][\'id\'])\n+        self.assertEqual(1, len(response[\'users\']))\n+        self.assertEqual(\'noam\', response[\'users\'][0][\'id\'])\n \n         response = self.api_session.get(\n             \'/@principals\',\n@@ -76,8 +76,8 @@ def test_get_principals(self):\n \n         response = response.json()\n         self.assertEqual(2, len(response))\n-        self.assertEquals(1, len(response[\'groups\']))\n-        self.assertEquals(\'ploneteam\', response[\'groups\'][0][\'id\'])\n+        self.assertEqual(1, len(response[\'groups\']))\n+        self.assertEqual(\'ploneteam\', response[\'groups\'][0][\'id\'])\n \n     def test_get_principals_response_both(self):\n         self.user = api.user.create(\n@@ -96,7 +96,7 @@ def test_get_principals_response_both(self):\n \n         response = response.json()\n         self.assertEqual(2, len(response))\n-        self.assertEquals(1, len(response[\'users\']))\n-        self.assertEquals(1, len(response[\'groups\']))\n-        self.assertEquals(\'plone.user\', response[\'users\'][0][\'id\'])\n-        self.assertEquals(\'ploneteam\', response[\'groups\'][0][\'id\'])\n+        self.assertEqual(1, len(response[\'users\']))\n+        self.assertEqual(1, len(response[\'groups\']))\n+        self.assertEqual(\'plone.user\', response[\'users\'][0][\'id\'])\n+        self.assertEqual(\'ploneteam\', response[\'groups\'][0][\'id\'])\ndiff --git a/src/plone/restapi/tests/test_services_tiles.py b/src/plone/restapi/tests/test_services_tiles.py\nindex 74f96bac..4efd6869 100644\n--- a/src/plone/restapi/tests/test_services_tiles.py\n+++ b/src/plone/restapi/tests/test_services_tiles.py\n@@ -80,24 +80,24 @@ def test_get_available_tiles(self):\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        self.assertEquals(len(response), 1)\n-        self.assertEquals(\n+        self.assertEqual(len(response), 1)\n+        self.assertEqual(\n             response[0][\'@id\'],\n             self.portal_url + u\'/@tiles/sample.tile\')\n-        self.assertEquals(response[0][\'title\'], u\'Sample tile\')\n-        self.assertEquals(\n+        self.assertEqual(response[0][\'title\'], u\'Sample tile\')\n+        self.assertEqual(\n             response[0][\'description\'], u\'A tile used for testing\')\n-        self.assertEquals(response[0][\'icon\'], \'testicon\')\n+        self.assertEqual(response[0][\'icon\'], \'testicon\')\n \n     def test_get_tile(self):\n         response = self.api_session.get(\'/@tiles/sample.tile\')\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        self.assertEquals(response[\'title\'], u\'Sample tile\')\n-        self.assertEquals(\n+        self.assertEqual(response[\'title\'], u\'Sample tile\')\n+        self.assertEqual(\n             response[\'properties\'][\'title\'][\'title\'], u\'Title\')\n-        self.assertEquals(\n+        self.assertEqual(\n             response[\'properties\'][\'title\'][\'type\'], u\'string\')\n \n     def test_patch_tiles_list(self):\n@@ -115,7 +115,7 @@ def test_patch_tiles_list(self):\n         response = self.api_session.get(\'/doc\')\n         response = response.json()\n \n-        self.assertEquals(\n+        self.assertEqual(\n             response[\'tiles\'],\n             {\n                 \'uuid1\': {\'@type\': \'title\'},\n@@ -137,7 +137,7 @@ def test_patch_tiles_layout(self):\n         response = self.api_session.get(\'/doc\')\n         response = response.json()\n \n-        self.assertEquals(\n+        self.assertEqual(\n             response[\'tiles_layout\'],\n             {\n                 "items": ["#uuid1", "#uuid2"]\ndiff --git a/src/plone/restapi/tests/test_services_types.py b/src/plone/restapi/tests/test_services_types.py\nindex ec7c37cd..44b44e5e 100644\n--- a/src/plone/restapi/tests/test_services_types.py\n+++ b/src/plone/restapi/tests/test_services_types.py\n@@ -41,7 +41,7 @@ def test_get_types(self):\n         )\n         for item in response.json():\n             self.assertEqual(\n-                sorted(item.keys()),\n+                sorted(item),\n                 sorted([\'@id\', \'title\', \'addable\'])\n             )\n \n@@ -157,14 +157,14 @@ def test_addable_types_for_non_manager_user(self):\n         response = self.api_session.get(\'/folder_cant_add/@types\')\n         response = response.json()\n \n-        self.assertEquals(\n+        self.assertEqual(\n             len([a for a in response if a[\'addable\']]), 0)\n \n         # and in the root Plone site there\'s no addable types\n         response = self.api_session.get(\'/@types\')\n         response = response.json()\n \n-        self.assertEquals(\n+        self.assertEqual(\n             len([a for a in response if a[\'addable\']]), 0)\n \n \n@@ -191,7 +191,7 @@ def test_get_types_translated(self):\n \n         self.assertEqual(response.status_code, 200)\n \n-        self.assertItemsEqual([\n+        self.assertEqual({\n             u\'Archivo\',\n             u\'Carpeta\',\n             u\'Colecci\xc3\xb3n\',\n@@ -200,5 +200,5 @@ def test_get_types_translated(self):\n             u\'Evento\',\n             u\'Imagen\',\n             u\'Noticia\',\n-            u\'P\xc3\xa1gina\'],\n-            [item[\'title\'] for item in response.json()])\n+            u\'P\xc3\xa1gina\'},\n+            set(item[\'title\'] for item in response.json()))\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex 93d59ebf..fadf8007 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -850,7 +850,7 @@ def test_anonymous_with_enable_user_sets_only_member_role(self):\n \n         response = response.json()\n         self.assertIn(\'Member\', response[\'roles\'])\n-        self.assertEquals(1, len(response[\'roles\']))\n+        self.assertEqual(1, len(response[\'roles\']))\n \n     def test_add_user_no_roles_sets_member_as_sensible_default(self):\n         response = self.api_session.post(\n@@ -868,4 +868,4 @@ def test_add_user_no_roles_sets_member_as_sensible_default(self):\n         response = response.json()\n \n         self.assertIn(\'Member\', response[\'roles\'])\n-        self.assertEquals(1, len(response[\'roles\']))\n+        self.assertEqual(1, len(response[\'roles\']))\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 10bea099..f7c57563 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -86,10 +86,10 @@ def test_get_all_vocabularies(self):\n         response = response.json()\n         self.assertTrue(len(response) > 0)\n         self.assertTrue(\n-            \'@id\' in response[0].keys()\n+            \'@id\' in list(response[0])\n         )\n         self.assertTrue(\n-            \'title\' in response[0].keys()\n+            \'title\' in list(response[0])\n         )\n         self.assertEqual(\n             [\ndiff --git a/src/plone/restapi/tests/test_setup.py b/src/plone/restapi/tests/test_setup.py\nindex f10c677d..20719007 100644\n--- a/src/plone/restapi/tests/test_setup.py\n+++ b/src/plone/restapi/tests/test_setup.py\n@@ -8,6 +8,13 @@\n from plone.restapi import PROJECT_NAME\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n+try:\n+    from Products.CMFPlone.utils import get_installer\n+except ImportError:  # Plone < 5.1\n+    HAS_INSTALLER = False\n+else:\n+    HAS_INSTALLER = True\n+\n \n class TestInstall(unittest.TestCase):\n \n@@ -16,15 +23,20 @@ class TestInstall(unittest.TestCase):\n     def setUp(self):\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n-        self.qi_tool = getToolByName(self.portal, \'portal_quickinstaller\')\n \n     def test_product_is_installed(self):\n         """ Validate that our products GS profile has been run and the product\n             installed\n         """\n-        installed = [p[\'id\'] for p in self.qi_tool.listInstalledProducts()]\n-        self.assertTrue(PROJECT_NAME in installed,\n-                        \'package appears not to have been installed\')\n+        if HAS_INSTALLER:\n+            qi = get_installer(self.portal)\n+            installed = qi.is_product_installed(PROJECT_NAME)\n+        else:\n+            qi_tool = getToolByName(self.portal, \'portal_quickinstaller\')\n+            installed = PROJECT_NAME in [\n+                p[\'id\'] for p in qi_tool.listInstalledProducts()]\n+        self.assertTrue(\n+            installed, \'package appears not to have been installed\')\n \n \n class TestUninstall(unittest.TestCase):\n@@ -34,13 +46,19 @@ class TestUninstall(unittest.TestCase):\n     def setUp(self):\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n-        self.qi_tool = getToolByName(self.portal, \'portal_quickinstaller\')\n \n-        with api.env.adopt_roles([\'Manager\']):\n-            self.qi_tool.uninstallProducts(products=[PROJECT_NAME])\n+        if HAS_INSTALLER:\n+            qi = get_installer(self.portal)\n+            qi.uninstall_product(PROJECT_NAME)\n+            self.installed = qi.is_product_installed(PROJECT_NAME)\n+        else:\n+            qi_tool = getToolByName(self.portal, \'portal_quickinstaller\')\n+            with api.env.adopt_roles([\'Manager\']):\n+                qi_tool.uninstallProducts(products=[PROJECT_NAME])\n+            self.installed = qi_tool.isProductInstalled(PROJECT_NAME)\n \n     def test_uninstalled(self):\n-        self.assertFalse(self.qi_tool.isProductInstalled(PROJECT_NAME))\n+        self.assertFalse(self.installed)\n \n     def test_addon_layer_removed(self):\n         layers = [l.getName() for l in registered_layers()]\ndiff --git a/src/plone/restapi/tests/test_site_deserializer.py b/src/plone/restapi/tests/test_site_deserializer.py\nindex 4374a46b..ad7f7c0c 100644\n--- a/src/plone/restapi/tests/test_site_deserializer.py\n+++ b/src/plone/restapi/tests/test_site_deserializer.py\n@@ -5,6 +5,7 @@\n from zope.component import getMultiAdapter\n \n import unittest\n+from six.moves import range\n \n \n class TestDXContentDeserializer(unittest.TestCase, OrderingMixin):\n@@ -36,4 +37,4 @@ def test_set_layout(self):\n         current_layout = self.portal.getLayout()\n         self.assertNotEquals(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n-        self.assertEquals(\'my_new_layout\', self.portal.getLayout())\n+        self.assertEqual(\'my_new_layout\', self.portal.getLayout())\ndiff --git a/src/plone/restapi/tests/test_site_serializer.py b/src/plone/restapi/tests/test_site_serializer.py\nindex 02903ce7..8d0cb15f 100644\n--- a/src/plone/restapi/tests/test_site_serializer.py\n+++ b/src/plone/restapi/tests/test_site_serializer.py\n@@ -34,4 +34,4 @@ def test_serializer_includes_title(self):\n     def test_get_is_folderish(self):\n         obj = self.serialize()\n         self.assertIn(\'is_folderish\', obj)\n-        self.assertEquals(True, obj[\'is_folderish\'])\n+        self.assertEqual(True, obj[\'is_folderish\'])\ndiff --git a/src/plone/restapi/tests/test_translations.py b/src/plone/restapi/tests/test_translations.py\nindex 29ae5da7..eccd3025 100644\n--- a/src/plone/restapi/tests/test_translations.py\n+++ b/src/plone/restapi/tests/test_translations.py\n@@ -31,9 +31,9 @@ def setUp(self):\n         alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=\'Test document\')\n+            self.portal[\'en\'], \'Document\', title=u\'Test document\')\n         self.es_content = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=\'Test document\')\n+            self.portal[\'es\'], \'Document\', title=u\'Test document\')\n         ITranslationManager(self.en_content).register_translation(\n             \'es\', self.es_content)\n \n@@ -71,9 +71,9 @@ def setUp(self):\n         alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=\'Test document\')\n+            self.portal[\'en\'], \'Document\', title=u\'Test document\')\n         self.es_content = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=\'Test document\')\n+            self.portal[\'es\'], \'Document\', title=u\'Test document\')\n         transaction.commit()\n \n     def test_translation_linking_succeeds(self):\n@@ -138,9 +138,9 @@ def setUp(self):\n         alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=\'Test document\')\n+            self.portal[\'en\'], \'Document\', title=u\'Test document\')\n         self.es_content = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=\'Test document\')\n+            self.portal[\'es\'], \'Document\', title=u\'Test document\')\n         ITranslationManager(self.en_content).register_translation(\n             \'es\', self.es_content)\n         transaction.commit()\n@@ -159,7 +159,7 @@ def test_translation_unlinking_succeeds(self):\n         manager = ITranslationManager(self.en_content)\n         self.assertNotIn(\n             ILanguage(self.es_content).get_language(),\n-            manager.get_translations().keys())\n+            list(manager.get_translations()))\n \n     def test_calling_endpoint_without_language_gives_400(self):\n         response = requests.delete(\ndiff --git a/src/plone/restapi/tests/test_tus.py b/src/plone/restapi/tests/test_tus.py\nindex dfb12dbd..e65daf36 100644\n--- a/src/plone/restapi/tests/test_tus.py\n+++ b/src/plone/restapi/tests/test_tus.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from DateTime import DateTime\n-from StringIO import StringIO\n+from six import BytesIO\n from base64 import b64encode\n from plone import api\n from plone.app.testing import SITE_OWNER_NAME\n@@ -13,6 +13,7 @@\n from plone.rest.cors import CORSPolicy\n from plone.rest.interfaces import ICORSPolicy\n from plone.restapi.services.content.tus import TUSUpload\n+from plone.restapi import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n@@ -27,7 +28,7 @@\n import transaction\n import unittest\n \n-UPLOAD_DATA = \'abcdefgh\'\n+UPLOAD_DATA = b\'abcdefgh\'\n UPLOAD_MIMETYPE = \'text/plain\'\n UPLOAD_FILENAME = \'test.txt\'\n UPLOAD_LENGTH = len(UPLOAD_DATA)\n@@ -36,6 +37,22 @@\n UPLOAD_PDF_FILENAME = \'file.pdf\'\n \n \n+def _base64_str(s):\n+    if not isinstance(s, bytes):\n+        s = s.encode(\'utf-8\')\n+    s = b64encode(s)\n+    if not isinstance(s, str):\n+        s = s.decode(\'utf-8\')\n+    return s\n+\n+\n+def _prepare_metadata(filename, content_type):\n+    return \'filename {},content-type {}\'.format(\n+        _base64_str(filename),\n+        _base64_str(content_type),\n+    )\n+\n+\n class TestTUS(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n@@ -108,9 +125,7 @@ def test_tus_post_initialization(self):\n         upload.cleanup()\n \n     def test_tus_post_initialization_with_metadata(self):\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME),\n-            b64encode(UPLOAD_MIMETYPE))\n+        metadata = _prepare_metadata(UPLOAD_FILENAME, UPLOAD_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -245,7 +260,7 @@ def test_tus_patch_unfinished_upload_returns_expires_header(self):\n             headers={\'Tus-Resumable\': \'1.0.0\',\n                      \'Content-Type\': \'application/offset+octet-stream\',\n                      \'Upload-Offset\': \'0\'},\n-            data=StringIO(\'abcdefghijkl\'))\n+            data=BytesIO(b\'abcdefghijkl\'))\n         self.assertEqual(204, response.status_code)\n         self.assertIn(\'Upload-Expires\', response.headers)\n         tus.cleanup()\n@@ -260,14 +275,14 @@ def test_tus_patch_non_primary_field(self):\n             headers={\'Tus-Resumable\': \'1.0.0\',\n                      \'Content-Type\': \'application/offset+octet-stream\',\n                      \'Upload-Offset\': \'0\'},\n-            data=StringIO(\'abcdefghijkl\'))\n+            data=BytesIO(b\'abcdefghijkl\'))\n \n         self.assertEqual(204, response.status_code)\n         transaction.commit()\n         self.assertEqual(1, len(self.folder.objectIds()))\n         id_ = self.folder.objectIds()[0]\n         self.assertEqual(\n-            \'abcdefghijkl\', self.folder[id_].test_namedblobfile_field.data)\n+            b\'abcdefghijkl\', self.folder[id_].test_namedblobfile_field.data)\n         tus.cleanup()\n \n     def test_patch_in_create_mode_without_add_permission_raises_401(self):\n@@ -279,7 +294,7 @@ def test_patch_in_create_mode_without_add_permission_raises_401(self):\n             headers={\'Tus-Resumable\': \'1.0.0\',\n                      \'Content-Type\': \'application/offset+octet-stream\',\n                      \'Upload-Offset\': \'0\'},\n-            data=StringIO(\'abcdefghijkl\'))\n+            data=BytesIO(b\'abcdefghijkl\'))\n         self.assertEqual(401, response.status_code)\n         tus.cleanup()\n \n@@ -292,7 +307,7 @@ def test_patch_in_replace_mode_without_modify_permission_raises_401(self):\n             headers={\'Tus-Resumable\': \'1.0.0\',\n                      \'Content-Type\': \'application/offset+octet-stream\',\n                      \'Upload-Offset\': \'0\'},\n-            data=StringIO(\'abcdefghijkl\'))\n+            data=BytesIO(b\'abcdefghijkl\'))\n         self.assertEqual(401, response.status_code)\n         tus.cleanup()\n \n@@ -301,9 +316,7 @@ def test_tus_can_upload_pdf_file(self):\n         pdf_file_path = os.path.join(os.path.dirname(__file__),\n                                      UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_PDF_FILENAME),\n-            b64encode(UPLOAD_PDF_MIMETYPE))\n+        metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -314,13 +327,15 @@ def test_tus_can_upload_pdf_file(self):\n         location = response.headers[\'Location\']\n \n         # upload the data with PATCH\n-        pdf_file = open(pdf_file_path, \'rb\')\n-        response = self.api_session.patch(\n-            location,\n-            headers={\'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\',\n-                     \'Tus-Resumable\': \'1.0.0\'},\n-            data=pdf_file)\n+        with open(pdf_file_path, \'rb\') as pdf_file:\n+            response = self.api_session.patch(\n+                location,\n+                headers={\n+                    \'Content-Type\': \'application/offset+octet-stream\',\n+                    \'Upload-Offset\': \'0\',\n+                    \'Tus-Resumable\': \'1.0.0\'\n+                },\n+                data=pdf_file)\n         self.assertEqual(response.status_code, 204)\n \n         transaction.commit()\n@@ -328,9 +343,7 @@ def test_tus_can_upload_pdf_file(self):\n \n     def test_tus_can_upload_text_file(self):\n         # initialize the upload with POST\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME),\n-            b64encode(UPLOAD_MIMETYPE))\n+        metadata = _prepare_metadata(UPLOAD_FILENAME, UPLOAD_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -346,7 +359,7 @@ def test_tus_can_upload_text_file(self):\n             headers={\'Content-Type\': \'application/offset+octet-stream\',\n                      \'Upload-Offset\': \'0\',\n                      \'Tus-Resumable\': \'1.0.0\'},\n-            data=StringIO(UPLOAD_DATA))\n+            data=BytesIO(UPLOAD_DATA))\n         self.assertEqual(response.status_code, 204)\n \n     def test_tus_can_replace_pdf_file(self):\n@@ -360,9 +373,7 @@ def test_tus_can_replace_pdf_file(self):\n         pdf_file_path = os.path.join(os.path.dirname(__file__),\n                                      UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_PDF_FILENAME),\n-            b64encode(UPLOAD_PDF_MIMETYPE))\n+        metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n             \'{}/@tus-replace\'.format(self.file.absolute_url()),\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -373,13 +384,15 @@ def test_tus_can_replace_pdf_file(self):\n         location = response.headers[\'Location\']\n \n         # upload the data with PATCH\n-        pdf_file = open(pdf_file_path, \'rb\')\n-        response = self.api_session.patch(\n-            location,\n-            headers={\'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\',\n-                     \'Tus-Resumable\': \'1.0.0\'},\n-            data=pdf_file)\n+        with open(pdf_file_path, \'rb\') as pdf_file:\n+            response = self.api_session.patch(\n+                location,\n+                headers={\n+                    \'Content-Type\': \'application/offset+octet-stream\',\n+                    \'Upload-Offset\': \'0\',\n+                    \'Tus-Resumable\': \'1.0.0\'\n+                },\n+                data=pdf_file)\n         self.assertEqual(response.status_code, 204)\n \n         transaction.commit()\n@@ -500,29 +513,29 @@ def test_offset_returns_zero_if_file_doesnt_exist(self):\n \n     def test_offset_returns_size_of_current_file(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(StringIO(\'0123456789\'))\n+        tus.write(BytesIO(b\'0123456789\'))\n         self.assertEqual(10, tus.offset())\n         tus.cleanup()\n \n     def test_write_creates_new_file(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(StringIO(\'0123456789\'))\n+        tus.write(BytesIO(b\'0123456789\'))\n         self.assertTrue(os.path.isfile(tus.filepath))\n         tus.cleanup()\n \n     def test_write_appends_to_file_at_given_offset(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(StringIO(\'0123456789\'))\n-        tus.write(StringIO(\'abc\'), 10)\n+        tus.write(BytesIO(b\'0123456789\'))\n+        tus.write(BytesIO(b\'abc\'), 10)\n         self.assertEqual(13, tus.offset())\n         with open(tus.filepath, \'rb\') as f:\n             data = f.read()\n-        self.assertEqual(\'0123456789abc\', data)\n+        self.assertEqual(b\'0123456789abc\', data)\n         tus.cleanup()\n \n     def test_write_sets_finished_flag(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 10})\n-        tus.write(StringIO(\'0123456789\'))\n+        tus.write(BytesIO(b\'0123456789\'))\n         self.assertTrue(tus.finished)\n         tus.cleanup()\n \n@@ -533,13 +546,13 @@ def test_metadata_returns_empty_dict_if_no_metadata_has_been_set(self):\n \n     def test_expires_returns_expiration_time_of_current_upload(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(StringIO(\'0123456789\'))\n+        tus.write(BytesIO(b\'0123456789\'))\n         self.assertGreater(DateTime(tus.expires()), DateTime())\n         tus.cleanup()\n \n     def test_cleanup_removes_upload_file(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(StringIO(\'0123456789\'))\n+        tus.write(BytesIO(b\'0123456789\'))\n         tus.cleanup()\n         self.assertFalse(os.path.exists(tus.filepath))\n \n@@ -577,6 +590,8 @@ class TestTUSWithAT(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Testing Archetypes support requires it\')\n         self.portal = self.layer[\'portal\']\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         login(self.portal, TEST_USER_NAME)\n@@ -597,9 +612,7 @@ def test_tus_can_upload_pdf_file(self):\n         pdf_file_path = os.path.join(os.path.dirname(__file__),\n                                      UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_PDF_FILENAME),\n-            b64encode(UPLOAD_PDF_MIMETYPE))\n+        metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -610,13 +623,15 @@ def test_tus_can_upload_pdf_file(self):\n         location = response.headers[\'Location\']\n \n         # upload the data with PATCH\n-        pdf_file = open(pdf_file_path, \'rb\')\n-        response = self.api_session.patch(\n-            location,\n-            headers={\'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\',\n-                     \'Tus-Resumable\': \'1.0.0\'},\n-            data=pdf_file)\n+        with open(pdf_file_path, \'rb\') as pdf_file:\n+            response = self.api_session.patch(\n+                location,\n+                headers={\n+                    \'Content-Type\': \'application/offset+octet-stream\',\n+                    \'Upload-Offset\': \'0\',\n+                    \'Tus-Resumable\': \'1.0.0\'\n+                },\n+                data=pdf_file)\n         self.assertEqual(response.status_code, 204)\n \n         transaction.commit()\ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex e6214247..1ed82b54 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -97,9 +97,9 @@ def test_get_jsonschema_for_fti(self):\n         )\n         self.assertEqual(jsonschema[\'title\'], \'Page\')\n         self.assertEqual(jsonschema[\'type\'], \'object\')\n-        self.assertIn(\'title\', jsonschema[\'properties\'].keys())\n+        self.assertIn(\'title\', list(jsonschema[\'properties\']))\n         self.assertIn(\'title\', jsonschema[\'required\'])\n-        self.assertEquals(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n+        self.assertEqual(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n         self.assertIn(\'title\', jsonschema[\'fieldsets\'][0][\'fields\'])\n         self.assertIn(\'layouts\', jsonschema)\n \n@@ -109,7 +109,7 @@ def test_get_jsonschema_for_fti(self):\n             request,\n             excluded_fields=[\'title\']\n         )\n-        self.assertNotIn(\'title\', jsonschema[\'properties\'].keys())\n+        self.assertNotIn(\'title\', list(jsonschema[\'properties\']))\n \n     def test_get_jsonschema_for_fti_non_dx(self):\n         """Make sure FTIs without lookupSchema are supported.\n@@ -130,14 +130,14 @@ def test_get_jsonschema_for_portal_type(self):\n         )\n         self.assertEqual(jsonschema[\'title\'], \'Page\')\n         self.assertEqual(jsonschema[\'type\'], \'object\')\n-        self.assertIn(\'title\', jsonschema[\'properties\'].keys())\n+        self.assertIn(\'title\', list(jsonschema[\'properties\']))\n         self.assertIn(\'title\', jsonschema[\'required\'])\n-        self.assertEquals(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n+        self.assertEqual(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n         self.assertIn(\'title\', jsonschema[\'fieldsets\'][0][\'fields\'])\n \n         jsonschema = get_jsonschema_for_portal_type(\n             \'Document\', portal, request, excluded_fields=[\'title\'])\n-        self.assertNotIn(\'title\', jsonschema[\'properties\'].keys())\n+        self.assertNotIn(\'title\', list(jsonschema[\'properties\']))\n \n \n class TestTaggedValuesJsonSchemaUtils(TestCase):\ndiff --git a/src/plone/restapi/tests/test_workflow.py b/src/plone/restapi/tests/test_workflow.py\nindex 9d1524ce..ba957e24 100644\n--- a/src/plone/restapi/tests/test_workflow.py\n+++ b/src/plone/restapi/tests/test_workflow.py\n@@ -98,8 +98,9 @@ def traverse(self, path=\'/plone\', accept=\'application/json\',\n         request.environ[\'PATH_TRANSLATED\'] = path\n         request.environ[\'HTTP_ACCEPT\'] = accept\n         request.environ[\'REQUEST_METHOD\'] = method\n+        auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         request._auth = \'Basic %s\' % b64encode(\n-            \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD))\n+            auth.encode(\'utf8\')).decode(\'utf8\')\n         notify(PubStart(request))\n         return request.traverse(path)\n \ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex 97290afb..44e3b703 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -18,6 +18,7 @@\n from plone.autoform.form import AutoExtensibleForm\n from plone.autoform.interfaces import WIDGETS_KEY\n from plone.dexterity.utils import getAdditionalSchemata\n+from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.types.interfaces import IJsonSchemaProvider\n from Products.CMFCore.utils import getToolByName\n from plone.supermodel.utils import mergedTaggedValueDict\n@@ -64,7 +65,7 @@ def get_fieldsets(context, request, schema, additional_schemata=None):\n     fieldsets = [{\n         \'id\': \'default\',\n         \'title\': u\'Default\',\n-        \'fields\': form.fields.values(),\n+        \'fields\': list(form.fields.values()),\n     }]\n \n     # Additional fieldsets (AKA z3c.form groups)\n@@ -72,7 +73,7 @@ def get_fieldsets(context, request, schema, additional_schemata=None):\n         fieldset = {\n             \'id\': group.__name__,\n             \'title\': translate(group.label, context=getRequest()),\n-            \'fields\': group.fields.values(),\n+            \'fields\': list(group.fields.values()),\n         }\n         fieldsets.append(fieldset)\n \n@@ -189,7 +190,7 @@ def get_jsonschema_for_fti(fti, context, request, excluded_fields=None):\n     return {\n         \'type\': \'object\',\n         \'title\': translate(fti.Title(), context=getRequest()),\n-        \'properties\': properties,\n+        \'properties\': json_compatible(properties),\n         \'required\': required,\n         \'fieldsets\': get_fieldset_infos(fieldsets),\n         \'layouts\': getattr(fti, \'view_methods\', []),\n'

