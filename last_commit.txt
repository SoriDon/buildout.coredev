Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2016-02-04T23:15:37+01:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.app.contentlisting/commit/1e2a0e4c40492d9387623b004d5fcb09edecc2c3

Cleanup

Files changed:
M plone/app/contentlisting/catalog.py
M plone/app/contentlisting/contentlisting.py
M plone/app/contentlisting/realobject.py
M plone/app/contentlisting/tests/base.py
M plone/app/contentlisting/tests/test_integration_doctest.py
M plone/app/contentlisting/tests/test_integration_unit.py

diff --git a/plone/app/contentlisting/catalog.py b/plone/app/contentlisting/catalog.py
index ac2fea7..f9750dc 100644
--- a/plone/app/contentlisting/catalog.py
+++ b/plone/app/contentlisting/catalog.py
@@ -25,8 +25,8 @@ def __init__(self, brain):
         self.request = aq_get(brain, 'REQUEST')
 
     def __repr__(self):
-        return "<plone.app.contentlisting.catalog."\
-            "CatalogContentListingObject instance at {0}>".format(
+        return '<plone.app.contentlisting.catalog.'\
+            'CatalogContentListingObject instance at {0}>'.format(
                 self.getPath()
             )
 
diff --git a/plone/app/contentlisting/contentlisting.py b/plone/app/contentlisting/contentlisting.py
index 954210d..6e08739 100644
--- a/plone/app/contentlisting/contentlisting.py
+++ b/plone/app/contentlisting/contentlisting.py
@@ -4,9 +4,9 @@
 from plone.i18n.normalizer.interfaces import IIDNormalizer
 from plone.registry.interfaces import IRegistry
 from Products.CMFPlone.interfaces import INavigationSchema
-from zope.interface import implementer
 from zope.component import getUtility
 from zope.component import queryUtility
+from zope.interface import implementer
 
 
 @implementer(IContentListing)
@@ -105,13 +105,13 @@ def __eq__(self, other):
     def ContentTypeClass(self):
         """A normalised type name that identifies the object in listings.
         used for CSS styling"""
-        return "contenttype-" + queryUtility(IIDNormalizer).normalize(
+        return 'contenttype-' + queryUtility(IIDNormalizer).normalize(
             self.PortalType())
 
     def ReviewStateClass(self):
         """A normalised review state string for CSS styling use in listings.
         """
-        return "state-" + queryUtility(IIDNormalizer).normalize(
+        return 'state-' + queryUtility(IIDNormalizer).normalize(
             self.review_state())
 
     def appendViewAction(self):
@@ -121,7 +121,7 @@ def appendViewAction(self):
         registry = getUtility(IRegistry)
         types = registry.get('plone.types_use_view_action_in_listings', [])
         if self.portal_type in types:
-            return "/view"
+            return '/view'
         return ''
 
     def isVisibleInNav(self):
diff --git a/plone/app/contentlisting/realobject.py b/plone/app/contentlisting/realobject.py
index 0bcf53a..68087ca 100644
--- a/plone/app/contentlisting/realobject.py
+++ b/plone/app/contentlisting/realobject.py
@@ -18,8 +18,8 @@ def __init__(self, obj):
         self.request = aq_get(obj, 'REQUEST')
 
     def __repr__(self):
-        return "<plone.app.contentlisting.realobject."\
-            "RealContentListingObject instance at {0}>".format(
+        return '<plone.app.contentlisting.realobject.'\
+            'RealContentListingObject instance at {0}>'.format(
                 self.getPath()
             )
 
@@ -66,7 +66,7 @@ def uuid(self):
 
     def review_state(self):
         obj = self.getObject()
-        wftool = getToolByName(obj, "portal_workflow")
+        wftool = getToolByName(obj, 'portal_workflow')
         return wftool.getInfoFor(obj, 'review_state')
 
     def Type(self):
diff --git a/plone/app/contentlisting/tests/base.py b/plone/app/contentlisting/tests/base.py
index dcea273..b8aa5f2 100644
--- a/plone/app/contentlisting/tests/base.py
+++ b/plone/app/contentlisting/tests/base.py
@@ -7,6 +7,7 @@
 from plone.app.testing import TEST_USER_ID
 from Products.CMFCore.utils import getToolByName
 from zope.configuration import xmlconfig
+
 import unittest2 as unittest
 
 
@@ -26,11 +27,11 @@ def setUpZope(self, app, configurationContext):
 CONTENTLISTING_FIXTURE = ContentListingLayer()
 CONTENTLISTING_INTEGRATION_TESTING = IntegrationTesting(
     bases=(CONTENTLISTING_FIXTURE, ),
-    name="ContentListing:Integration"
+    name='ContentListing:Integration'
 )
 CONTENTLISTING_FUNCTIONAL_TESTING = FunctionalTesting(
     bases=(CONTENTLISTING_FIXTURE, ),
-    name="ContentListing:Functional"
+    name='ContentListing:Functional'
 )
 
 
diff --git a/plone/app/contentlisting/tests/test_integration_doctest.py b/plone/app/contentlisting/tests/test_integration_doctest.py
index cfbd1af..d73e0c1 100644
--- a/plone/app/contentlisting/tests/test_integration_doctest.py
+++ b/plone/app/contentlisting/tests/test_integration_doctest.py
@@ -1,5 +1,7 @@
-from .base import ContentlistingFunctionalTestCase
+# -*- coding: utf-8 -*-
+from plone.app.contentlisting.tests.base import ContentlistingFunctionalTestCase  # noqa
 from Testing import ZopeTestCase as ztc
+
 import doctest
 import unittest
 
diff --git a/plone/app/contentlisting/tests/test_integration_unit.py b/plone/app/contentlisting/tests/test_integration_unit.py
index 85637b5..8f31ae0 100644
--- a/plone/app/contentlisting/tests/test_integration_unit.py
+++ b/plone/app/contentlisting/tests/test_integration_unit.py
@@ -1,8 +1,7 @@
 # -*- coding: utf-8 -*-
 from plone.app.contentlisting.interfaces import IContentListing
 from plone.app.contentlisting.interfaces import IContentListingObject
-from plone.app.contentlisting.tests.base import \
-    ContentlistingFunctionalTestCase
+from plone.app.contentlisting.tests.base import ContentlistingFunctionalTestCase  # noqa
 from plone.app.testing import setRoles
 from plone.app.testing import TEST_USER_ID
 from plone.batching.interfaces import IBatch
@@ -87,7 +86,7 @@ def test_special_getattr_from_brain(self):
 
     def test_special_getattr_from_object(self):
         # Asking for an attribute not in the contentlistingobject, should
-        # defer lookup to the brain"""
+        # defer lookup to the brain
         self.assertEqual(self.item.absolute_url(), '')
         self.assertEqual(
             repr(self.item.getDataOrigin()),
@@ -116,7 +115,7 @@ def test_item_getSize(self):
         self.assertEqual(self.item.getSize().upper(), '0 KB')
 
     def test_item_reviewState(self):
-        wftool = getToolByName(self.realitem, "portal_workflow")
+        wftool = getToolByName(self.realitem, 'portal_workflow')
         wf = wftool.getInfoFor(self.realitem, 'review_state')
         self.assertEqual(self.item.review_state(), wf)
 
@@ -196,7 +195,7 @@ def test_item_getURL(self):
         self.assertEqual(self.item.getURL(), self.realitem.absolute_url())
 
     def test_item_reviewState(self):
-        wftool = getToolByName(self.realitem, "portal_workflow")
+        wftool = getToolByName(self.realitem, 'portal_workflow')
         wf = wftool.getInfoFor(self.realitem, 'review_state')
         self.assertEqual(self.item.review_state(), wf)
 


Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2016-02-05T01:49:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.app.contentlisting/commit/ec176642eb442534face31af276b4026f6251c4f

Merge pull request #14 from plone/cleanup

Cleanup

Files changed:
M plone/app/contentlisting/catalog.py
M plone/app/contentlisting/contentlisting.py
M plone/app/contentlisting/realobject.py
M plone/app/contentlisting/tests/base.py
M plone/app/contentlisting/tests/test_integration_doctest.py
M plone/app/contentlisting/tests/test_integration_unit.py

diff --git a/plone/app/contentlisting/catalog.py b/plone/app/contentlisting/catalog.py
index ac2fea7..f9750dc 100644
--- a/plone/app/contentlisting/catalog.py
+++ b/plone/app/contentlisting/catalog.py
@@ -25,8 +25,8 @@ def __init__(self, brain):
         self.request = aq_get(brain, 'REQUEST')
 
     def __repr__(self):
-        return "<plone.app.contentlisting.catalog."\
-            "CatalogContentListingObject instance at {0}>".format(
+        return '<plone.app.contentlisting.catalog.'\
+            'CatalogContentListingObject instance at {0}>'.format(
                 self.getPath()
             )
 
diff --git a/plone/app/contentlisting/contentlisting.py b/plone/app/contentlisting/contentlisting.py
index 954210d..6e08739 100644
--- a/plone/app/contentlisting/contentlisting.py
+++ b/plone/app/contentlisting/contentlisting.py
@@ -4,9 +4,9 @@
 from plone.i18n.normalizer.interfaces import IIDNormalizer
 from plone.registry.interfaces import IRegistry
 from Products.CMFPlone.interfaces import INavigationSchema
-from zope.interface import implementer
 from zope.component import getUtility
 from zope.component import queryUtility
+from zope.interface import implementer
 
 
 @implementer(IContentListing)
@@ -105,13 +105,13 @@ def __eq__(self, other):
     def ContentTypeClass(self):
         """A normalised type name that identifies the object in listings.
         used for CSS styling"""
-        return "contenttype-" + queryUtility(IIDNormalizer).normalize(
+        return 'contenttype-' + queryUtility(IIDNormalizer).normalize(
             self.PortalType())
 
     def ReviewStateClass(self):
         """A normalised review state string for CSS styling use in listings.
         """
-        return "state-" + queryUtility(IIDNormalizer).normalize(
+        return 'state-' + queryUtility(IIDNormalizer).normalize(
             self.review_state())
 
     def appendViewAction(self):
@@ -121,7 +121,7 @@ def appendViewAction(self):
         registry = getUtility(IRegistry)
         types = registry.get('plone.types_use_view_action_in_listings', [])
         if self.portal_type in types:
-            return "/view"
+            return '/view'
         return ''
 
     def isVisibleInNav(self):
diff --git a/plone/app/contentlisting/realobject.py b/plone/app/contentlisting/realobject.py
index 0bcf53a..68087ca 100644
--- a/plone/app/contentlisting/realobject.py
+++ b/plone/app/contentlisting/realobject.py
@@ -18,8 +18,8 @@ def __init__(self, obj):
         self.request = aq_get(obj, 'REQUEST')
 
     def __repr__(self):
-        return "<plone.app.contentlisting.realobject."\
-            "RealContentListingObject instance at {0}>".format(
+        return '<plone.app.contentlisting.realobject.'\
+            'RealContentListingObject instance at {0}>'.format(
                 self.getPath()
             )
 
@@ -66,7 +66,7 @@ def uuid(self):
 
     def review_state(self):
         obj = self.getObject()
-        wftool = getToolByName(obj, "portal_workflow")
+        wftool = getToolByName(obj, 'portal_workflow')
         return wftool.getInfoFor(obj, 'review_state')
 
     def Type(self):
diff --git a/plone/app/contentlisting/tests/base.py b/plone/app/contentlisting/tests/base.py
index dcea273..b8aa5f2 100644
--- a/plone/app/contentlisting/tests/base.py
+++ b/plone/app/contentlisting/tests/base.py
@@ -7,6 +7,7 @@
 from plone.app.testing import TEST_USER_ID
 from Products.CMFCore.utils import getToolByName
 from zope.configuration import xmlconfig
+
 import unittest2 as unittest
 
 
@@ -26,11 +27,11 @@ def setUpZope(self, app, configurationContext):
 CONTENTLISTING_FIXTURE = ContentListingLayer()
 CONTENTLISTING_INTEGRATION_TESTING = IntegrationTesting(
     bases=(CONTENTLISTING_FIXTURE, ),
-    name="ContentListing:Integration"
+    name='ContentListing:Integration'
 )
 CONTENTLISTING_FUNCTIONAL_TESTING = FunctionalTesting(
     bases=(CONTENTLISTING_FIXTURE, ),
-    name="ContentListing:Functional"
+    name='ContentListing:Functional'
 )
 
 
diff --git a/plone/app/contentlisting/tests/test_integration_doctest.py b/plone/app/contentlisting/tests/test_integration_doctest.py
index cfbd1af..d73e0c1 100644
--- a/plone/app/contentlisting/tests/test_integration_doctest.py
+++ b/plone/app/contentlisting/tests/test_integration_doctest.py
@@ -1,5 +1,7 @@
-from .base import ContentlistingFunctionalTestCase
+# -*- coding: utf-8 -*-
+from plone.app.contentlisting.tests.base import ContentlistingFunctionalTestCase  # noqa
 from Testing import ZopeTestCase as ztc
+
 import doctest
 import unittest
 
diff --git a/plone/app/contentlisting/tests/test_integration_unit.py b/plone/app/contentlisting/tests/test_integration_unit.py
index 85637b5..8f31ae0 100644
--- a/plone/app/contentlisting/tests/test_integration_unit.py
+++ b/plone/app/contentlisting/tests/test_integration_unit.py
@@ -1,8 +1,7 @@
 # -*- coding: utf-8 -*-
 from plone.app.contentlisting.interfaces import IContentListing
 from plone.app.contentlisting.interfaces import IContentListingObject
-from plone.app.contentlisting.tests.base import \
-    ContentlistingFunctionalTestCase
+from plone.app.contentlisting.tests.base import ContentlistingFunctionalTestCase  # noqa
 from plone.app.testing import setRoles
 from plone.app.testing import TEST_USER_ID
 from plone.batching.interfaces import IBatch
@@ -87,7 +86,7 @@ def test_special_getattr_from_brain(self):
 
     def test_special_getattr_from_object(self):
         # Asking for an attribute not in the contentlistingobject, should
-        # defer lookup to the brain"""
+        # defer lookup to the brain
         self.assertEqual(self.item.absolute_url(), '')
         self.assertEqual(
             repr(self.item.getDataOrigin()),
@@ -116,7 +115,7 @@ def test_item_getSize(self):
         self.assertEqual(self.item.getSize().upper(), '0 KB')
 
     def test_item_reviewState(self):
-        wftool = getToolByName(self.realitem, "portal_workflow")
+        wftool = getToolByName(self.realitem, 'portal_workflow')
         wf = wftool.getInfoFor(self.realitem, 'review_state')
         self.assertEqual(self.item.review_state(), wf)
 
@@ -196,7 +195,7 @@ def test_item_getURL(self):
         self.assertEqual(self.item.getURL(), self.realitem.absolute_url())
 
     def test_item_reviewState(self):
-        wftool = getToolByName(self.realitem, "portal_workflow")
+        wftool = getToolByName(self.realitem, 'portal_workflow')
         wf = wftool.getInfoFor(self.realitem, 'review_state')
         self.assertEqual(self.item.review_state(), wf)
 


