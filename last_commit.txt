Repository: Products.ATContentTypes


Branch: refs/heads/master
Date: 2016-02-05T18:29:59+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.ATContentTypes/commit/9fc83f7a392f13e045a0cc32fc1eb42a8a1f44fa

Nuked trailing white space.

Files changed:
M Products/ATContentTypes/configuration/component.xml
M Products/ATContentTypes/skins/ATContentTypes/atct_album_image.pt
M Products/ATContentTypes/skins/ATContentTypes/atct_album_view.pt
M Products/ATContentTypes/skins/ATContentTypes/atct_history.pt
M Products/ATContentTypes/skins/ATContentTypes/atct_image_transform.pt
M Products/ATContentTypes/skins/ATContentTypes/atct_macros.pt
M Products/ATContentTypes/skins/ATContentTypes/atct_saveTopicSetup.cpy
M Products/ATContentTypes/skins/ATContentTypes/criterion_edit_form.cpt
M Products/ATContentTypes/skins/ATContentTypes/criterion_remove.cpy
M Products/ATContentTypes/skins/ATContentTypes/validate_remove_criterion.vpy
M Products/ATContentTypes/tool/metadata.py
M Products/ATContentTypes/www/imageScales.zpt
M Products/ATContentTypes/www/overview.zpt
M README.rst

diff --git a/Products/ATContentTypes/configuration/component.xml b/Products/ATContentTypes/configuration/component.xml
index 14186d7..91f5280 100644
--- a/Products/ATContentTypes/configuration/component.xml
+++ b/Products/ATContentTypes/configuration/component.xml
@@ -58,12 +58,12 @@
       <description>
         XXX
       </description>
-    </key> 
+    </key>
     <key name="char_encoding" datatype="string" required="no" default="raw">
       <description>
         XXX
       </description>
-    </key> 
+    </key>
   </sectiontype>
 
   <sectiontype name="feature" keytype="identifier" datatype=".Feature">
@@ -76,7 +76,7 @@
       </description>
     </key>
   </sectiontype>
-  
+
   <sectiontype name="contenttypes">
     <description format="plain">
       Section content types of an archetype
@@ -104,14 +104,14 @@
     </description>
     <section name="*" attribute="contenttypes" type="contenttypes"
        required="no" />
-       
+
     <key name="max_file_size" attribute="max_file_size" datatype="byte-size-in-mb"
          default="0" required="no" />
     <key name="max_image_dimension" attribute="max_image_dimension"
          datatype="image-dimension-or-no" default="no" required="no" />
     <key name="allow_document_upload" attribute="allow_document_upload"
-         datatype="boolean" default="yes" required="no" /> 
-    
+         datatype="boolean" default="yes" required="no" />
+
   </sectiontype>
 
   <sectiontype name="pil_config" attribute="pil_config" keytype="identifier">
diff --git a/Products/ATContentTypes/skins/ATContentTypes/atct_album_image.pt b/Products/ATContentTypes/skins/ATContentTypes/atct_album_image.pt
index 1f90398..d58a633 100644
--- a/Products/ATContentTypes/skins/ATContentTypes/atct_album_image.pt
+++ b/Products/ATContentTypes/skins/ATContentTypes/atct_album_image.pt
@@ -29,7 +29,7 @@
         <a tal:condition="image/size" tal:attributes="href string:${image/absolute_url}/view">
             <img src="#" alt="" tal:replace="structure python:image.tag(scale=photo_display)" />
         </a>
-        
+
         <div tal:define="b_start python:request.get('b_start', 0)">
           <a href="" tal:attributes="href string:${request/URL1}/view?b_start=$b_start">
             <img src="#" alt="Back to album"
diff --git a/Products/ATContentTypes/skins/ATContentTypes/atct_album_view.pt b/Products/ATContentTypes/skins/ATContentTypes/atct_album_view.pt
index 428aaf7..de9a541 100644
--- a/Products/ATContentTypes/skins/ATContentTypes/atct_album_view.pt
+++ b/Products/ATContentTypes/skins/ATContentTypes/atct_album_view.pt
@@ -17,7 +17,7 @@
                  getKssClasses nocall:kssClassesView/getKssClassesInlineEditable;
                  templateId template/getId;
                  batch python:Batch(images, 12, int(b_start), orphan=1)">
-    
+
     <div metal:define-macro="text-field-view"
          id="parent-fieldname-text" class="stx"
          tal:define="kss_class python:getKssClasses('text',
diff --git a/Products/ATContentTypes/skins/ATContentTypes/atct_history.pt b/Products/ATContentTypes/skins/ATContentTypes/atct_history.pt
index c786552..2bc8adb 100644
--- a/Products/ATContentTypes/skins/ATContentTypes/atct_history.pt
+++ b/Products/ATContentTypes/skins/ATContentTypes/atct_history.pt
@@ -66,9 +66,9 @@
               </p>
             </tal:nohistories>
         </div>
-        
+
     </tal:main-macro>
-</metal:main>        
+</metal:main>
 
 </body>
 </html>
diff --git a/Products/ATContentTypes/skins/ATContentTypes/atct_image_transform.pt b/Products/ATContentTypes/skins/ATContentTypes/atct_image_transform.pt
index 2a74db8..909acfb 100644
--- a/Products/ATContentTypes/skins/ATContentTypes/atct_image_transform.pt
+++ b/Products/ATContentTypes/skins/ATContentTypes/atct_image_transform.pt
@@ -11,10 +11,10 @@
     <h1 class="documentFirstHeading" tal:content="here/pretty_title_or_id">Title or id</h1>
     <div class="documentDescription" tal:content="here/Description">
         Description
-    </div>    
+    </div>
 
     <div id="content-core">
-        
+
         <img src="#" alt="" tal:replace="structure python:here.tag(scale='mini')" />
 
         <div>
diff --git a/Products/ATContentTypes/skins/ATContentTypes/atct_macros.pt b/Products/ATContentTypes/skins/ATContentTypes/atct_macros.pt
index 3c5b7f9..bc507fa 100644
--- a/Products/ATContentTypes/skins/ATContentTypes/atct_macros.pt
+++ b/Products/ATContentTypes/skins/ATContentTypes/atct_macros.pt
@@ -20,15 +20,15 @@
 
       <td style="padding: 0.5em; align: center;">
         <input class="noborder"
-               type="checkbox" 
-               value="" 
-               name="criterion_ids:list" 
+               type="checkbox"
+               value=""
+               name="criterion_ids:list"
                id=""
-               tal:attributes="value criterionid; 
+               tal:attributes="value criterionid;
                                id string:cb_${criterionid}"
                />
       </td>
-      
+
       <td style="padding: 0.5em;">
          <span tal:content="python:index.friendlyName or index.index" i18n:translate="" />
          <div class="formHelp" tal:content="index/description" i18n:translate="" />
@@ -37,9 +37,9 @@
 
         <div i18n:translate="" tal:content="criterion/Description" />
 
-        <div id="" 
+        <div id=""
              i18n:translate=""
-             class="formHelp" 
+             class="formHelp"
              style="visibility:hidden"
              tal:content="criterion/Description"
              tal:attributes="id string:${criterionid}_help;"
@@ -47,8 +47,8 @@
         String
         </div>
 
-        <input type="hidden" 
-               name="criteria.id:records" 
+        <input type="hidden"
+               name="criteria.id:records"
                value=""
                tal:attributes="value criterionid"
                />
diff --git a/Products/ATContentTypes/skins/ATContentTypes/atct_saveTopicSetup.cpy b/Products/ATContentTypes/skins/ATContentTypes/atct_saveTopicSetup.cpy
index 47ce477..65d9935 100644
--- a/Products/ATContentTypes/skins/ATContentTypes/atct_saveTopicSetup.cpy
+++ b/Products/ATContentTypes/skins/ATContentTypes/atct_saveTopicSetup.cpy
@@ -8,7 +8,7 @@
 ##parameters=
 ##title=Save topic setup modifications
 
-from Products.ATContentTypes import ATCTMessageFactory as _ 
+from Products.ATContentTypes import ATCTMessageFactory as _
 
 if state.button == 'index_save':
     next_page = 'atct_manageTopicIndex'
diff --git a/Products/ATContentTypes/skins/ATContentTypes/criterion_edit_form.cpt b/Products/ATContentTypes/skins/ATContentTypes/criterion_edit_form.cpt
index fb4177b..40a6724 100644
--- a/Products/ATContentTypes/skins/ATContentTypes/criterion_edit_form.cpt
+++ b/Products/ATContentTypes/skins/ATContentTypes/criterion_edit_form.cpt
@@ -36,10 +36,10 @@ var cache = {}
 function selectField() {
     var field = $(this).val()
     if (cache[field] == undefined)
-        $.getJSON('@@jsoncriteria', { field: field }, 
-            function(data) { 
-                cache[field] = data; 
-                updateCriterionType(data) 
+        $.getJSON('@@jsoncriteria', { field: field },
+            function(data) {
+                cache[field] = data;
+                updateCriterionType(data)
             });
     else updateCriterionType(cache[field]);
 };
diff --git a/Products/ATContentTypes/skins/ATContentTypes/criterion_remove.cpy b/Products/ATContentTypes/skins/ATContentTypes/criterion_remove.cpy
index ade984b..ee86942 100644
--- a/Products/ATContentTypes/skins/ATContentTypes/criterion_remove.cpy
+++ b/Products/ATContentTypes/skins/ATContentTypes/criterion_remove.cpy
@@ -18,8 +18,8 @@ for crit in criteria:
     id  = crit.getId()
 
     if id in criterion_ids:
-        remove.append(id) 
-        
+        remove.append(id)
+
 context.deleteCriterion(remove)
 
 msg = _(u'Removed criteria ${criteria}.',
diff --git a/Products/ATContentTypes/skins/ATContentTypes/validate_remove_criterion.vpy b/Products/ATContentTypes/skins/ATContentTypes/validate_remove_criterion.vpy
index eb41098..5a3ba34 100644
--- a/Products/ATContentTypes/skins/ATContentTypes/validate_remove_criterion.vpy
+++ b/Products/ATContentTypes/skins/ATContentTypes/validate_remove_criterion.vpy
@@ -7,7 +7,7 @@
 ##parameters=
 ##
 from Products.ATContentTypes import ATCTMessageFactory as _
- 
+
 criterion_ids=context.REQUEST.get('criterion_ids')
 if not criterion_ids:
     msg = _(u'You must first select a criterion to remove.')
diff --git a/Products/ATContentTypes/tool/metadata.py b/Products/ATContentTypes/tool/metadata.py
index 078ff13..4e02ff5 100644
--- a/Products/ATContentTypes/tool/metadata.py
+++ b/Products/ATContentTypes/tool/metadata.py
@@ -263,7 +263,7 @@ def removeElementPolicy(self, element, content_type, REQUEST=None
 
     def updateElementPolicy(self, element, content_type, is_required, supply_default, default_value, enforce_vocabulary, allowed_vocabulary, REQUEST=None
                             ):
-        """ Update a policy for one of our elements 
+        """ Update a policy for one of our elements
 
         o 'content_type' will be '<default>' when we edit the default.
         """
@@ -389,7 +389,7 @@ def __init__(self, publisher=None):
 
     def editProperties(self, publisher=None, REQUEST=None
                        ):
-        """ Form handler for "tool-wide" properties 
+        """ Form handler for "tool-wide" properties
         """
         if publisher is not None:
             self.publisher = publisher
diff --git a/Products/ATContentTypes/www/imageScales.zpt b/Products/ATContentTypes/www/imageScales.zpt
index aa33b37..e85e9c8 100644
--- a/Products/ATContentTypes/www/imageScales.zpt
+++ b/Products/ATContentTypes/www/imageScales.zpt
@@ -14,15 +14,15 @@
   remove a scale from the field definition. If you want to have a scale
   removed set its value to <code>(0, 0)</code>.
   </p>
-  
-  <p>This function recreates the scales of the <code>'image'</code> field of 
+
+  <p>This function recreates the scales of the <code>'image'</code> field of
   all portal types listed in <code>image_types</code> in the property tab.
   Neither other portal types nor other fields are affected. The recreation
   process is using a catalog query so make sure your catalog is up to date.
   </p>
-  
+
   <p><em>This may take a very long time!</em></p>
- 
+
   <form method="put" action="" tal:attributes="action string:manage_imageScales">
     <input type="hidden" name="submitted" value="1" />
     <input type="submit" name="submit" value="recreate" />
diff --git a/Products/ATContentTypes/www/overview.zpt b/Products/ATContentTypes/www/overview.zpt
index cdd85d0..9908e88 100644
--- a/Products/ATContentTypes/www/overview.zpt
+++ b/Products/ATContentTypes/www/overview.zpt
@@ -15,9 +15,9 @@
     <dt>Properties</dt>
     <dd>to set certain properties for album view and more</dd>
   </dl>
-  
+
   <h3>Properties</h3>
-  
+
   <dl>
     <dt><code>image_types</code></dt>
     <dd>A list of portal type names to be treated as image. The types must be
diff --git a/README.rst b/README.rst
index 69b9309..2d51421 100644
--- a/README.rst
+++ b/README.rst
@@ -37,12 +37,12 @@ and the new ATContentTypes types.
 * Clean and documented API.
 
 * Translateable using LinguaPlone.
-  
+
 * Dynamic Views: All types are using the new dynamic view FTI that allows you
   to choose the view template per instance. You can configure the templates in
   the portal_types tool. This features is used to turn an ordinary folder into
   a photo album by simple switching to a different view.
-  
+
 * Permissions per type and feature: Every type has its own add permission and
   all features like template mixin have their own modify permission, too.
 


Repository: Products.ATContentTypes


Branch: refs/heads/master
Date: 2016-02-05T18:32:14+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.ATContentTypes/commit/cc86d2290a7215c49a54a736902e3922cd69d9d2

white space only pep8

Files changed:
M Products/ATContentTypes/tests/test_attopic.py

diff --git a/Products/ATContentTypes/tests/test_attopic.py b/Products/ATContentTypes/tests/test_attopic.py
index 75ffecf..76387bc 100644
--- a/Products/ATContentTypes/tests/test_attopic.py
+++ b/Products/ATContentTypes/tests/test_attopic.py
@@ -470,7 +470,7 @@ def test_acquireCriteriaField(self):
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 0, 'Value is %s' % field.required)
         self.assertFalse(field.default, 'Value is %s' %
-                        str(field.default))
+                         str(field.default))
         self.assertTrue(field.searchable == 0, 'Value is %s' %
                         field.searchable)
         self.assertTrue(field.vocabulary == field_vocab,
@@ -515,7 +515,7 @@ def test_limitNumberField(self):
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 0, 'Value is %s' % field.required)
         self.assertFalse(field.default, 'Value is %s' %
-                        str(field.default))
+                         str(field.default))
         self.assertTrue(field.searchable == 0, 'Value is %s' %
                         field.searchable)
         self.assertTrue(field.vocabulary == field_vocab,
@@ -603,7 +603,7 @@ def test_customViewField(self):
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 0, 'Value is %s' % field.required)
         self.assertFalse(field.default, 'Value is %s' %
-                        str(field.default))
+                         str(field.default))
         self.assertTrue(field.searchable == 0, 'Value is %s' %
                         field.searchable)
         self.assertTrue(field.vocabulary == (),


Repository: Products.ATContentTypes


Branch: refs/heads/master
Date: 2016-02-05T18:33:52+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.ATContentTypes/commit/13639ba4ab8bae5795c97f2d8a9f3b55d12f9550

Selected autopep8 fixes.

Files changed:
M Products/ATContentTypes/configuration/config.py
M Products/ATContentTypes/configuration/datatype.py
M Products/ATContentTypes/configuration/schema.py
M Products/ATContentTypes/content/base.py
M Products/ATContentTypes/criteria/date.py
M Products/ATContentTypes/lib/calendarsupport.py
M Products/ATContentTypes/lib/constraintypes.py
M Products/ATContentTypes/lib/imagetransform.py
M Products/ATContentTypes/tests/test_bugs.py
M Products/ATContentTypes/thirdparty/exif.py
M Products/ATContentTypes/tool/metadata.py
M Products/ATContentTypes/tool/topic.py

diff --git a/Products/ATContentTypes/configuration/config.py b/Products/ATContentTypes/configuration/config.py
index 7aa89a7..f2eba0e 100644
--- a/Products/ATContentTypes/configuration/config.py
+++ b/Products/ATContentTypes/configuration/config.py
@@ -39,11 +39,11 @@ def loadConfig(files, schema=atctSchema, overwrite=False):
     if not isinstance(files, (tuple, list)):
         files = (files, )
     if zconf is not None and not overwrite:
-        raise RuntimeError, 'Configuration is already loaded'
+        raise RuntimeError('Configuration is already loaded')
     for file in files:
         if file is not None:
             if not os.path.exists(file):
-                raise RuntimeError, '%s does not exist' % file
+                raise RuntimeError('%s does not exist' % file)
             conf_file = file
             zconf, handler = ConfigLoader(schema).loadURL(conf_file)
             break
diff --git a/Products/ATContentTypes/configuration/datatype.py b/Products/ATContentTypes/configuration/datatype.py
index 0d16452..c70f912 100644
--- a/Products/ATContentTypes/configuration/datatype.py
+++ b/Products/ATContentTypes/configuration/datatype.py
@@ -9,7 +9,7 @@
 def _getValueFromModule(module, key):
     var = getattr(module, key, _marker)
     if key is _marker:
-        raise ValueError, "%s doesn't have an attribute %s" % (module, key)
+        raise ValueError("%s doesn't have an attribute %s" % (module, key))
     return var
 
 
@@ -20,7 +20,7 @@ def _getValueFromDottedName(dotted_name):
     try:
         module = __import__(module_name, globals(), locals(), [key])
     except ImportError, msg:
-        raise ValueError, str(msg)
+        raise ValueError(str(msg))
     return _getValueFromModule(module, key)
 
 
@@ -39,8 +39,8 @@ def permission_handler(value):
     else:
         permission = _getValueFromDottedName(value)
     if not isinstance(permission, basestring):
-        raise ValueError, 'Permission %s is not a string: %s' % (permission,
-                                                                 type(permission))
+        raise ValueError('Permission %s is not a string: %s' % (permission,
+                                                                type(permission)))
     return permission
 
 
@@ -66,7 +66,7 @@ def image_dimension(value):
     Splits a value of "200, 400" into two ints of (200, 400)
     """
     if value.count(',') != 1:
-        raise ValueError, "Width and height must be seperated by a comma"
+        raise ValueError("Width and height must be seperated by a comma")
     w, h = value.split(',')
     w = int(w)
     h = int(h)
@@ -97,7 +97,7 @@ def pil_algo(value):
     value = value.upper()
     available = ('NEAREST', 'BILINEAR', 'BICUBIC', 'ANTIALIAS')
     if value not in available:
-        raise ValueError, "unknown algo %s" % value
+        raise ValueError("unknown algo %s" % value)
     import PIL.Image
     return getattr(PIL.Image, value)
 
@@ -159,7 +159,7 @@ def _parse(self):
             default = ct.default_content_type
 
             if default not in allowed:
-                raise ValueError, "Default %s is not in %s" % (default, ct)
+                raise ValueError("Default %s is not in %s" % (default, ct))
 
             self.set('default_content_type', default)
             self.set('allowed_content_types', allowed)
diff --git a/Products/ATContentTypes/configuration/schema.py b/Products/ATContentTypes/configuration/schema.py
index 16cc5c1..919d63a 100644
--- a/Products/ATContentTypes/configuration/schema.py
+++ b/Products/ATContentTypes/configuration/schema.py
@@ -37,7 +37,7 @@ def loadSchema(file, registry=atctRegistry, overwrite=False):
     """
     global atctSchema
     if atctSchema is not None and not overwrite:
-        raise RuntimeError, 'Schema is already loaded'
+        raise RuntimeError('Schema is already loaded')
     schemaLoader = SchemaLoader(registry=registry)
     atctSchema = schemaLoader.loadURL(file)
     return atctSchema
diff --git a/Products/ATContentTypes/content/base.py b/Products/ATContentTypes/content/base.py
index d679c35..3454574 100644
--- a/Products/ATContentTypes/content/base.py
+++ b/Products/ATContentTypes/content/base.py
@@ -320,7 +320,7 @@ def manage_edit(self, title, content_type, precondition='',
         Changes the title and content type attributes of the File or Image.
         """
         if self.wl_isLocked():
-            raise ResourceLockedError, "File is locked via WebDAV"
+            raise ResourceLockedError("File is locked via WebDAV")
 
         self.setTitle(title)
         if filedata is not None:
@@ -403,7 +403,8 @@ def post_validate(self, REQUEST=None, errors=None):
             # former method
             upload.seek(0)
 
-        if not used_id or not self._should_set_id_to_filename(filename, REQUEST.form.get('title')):
+        if not used_id or not self._should_set_id_to_filename(
+                filename, REQUEST.form.get('title')):
             # Set ID in whatever way the base classes usually do.
             return
 
@@ -537,7 +538,7 @@ def index_html(self, REQUEST=None, RESPONSE=None):
                     # Do nothing, let it go and acquire.
                     pass
                 else:
-                    raise AttributeError, 'index_html'
+                    raise AttributeError('index_html')
         # Acquire from parent
         _target = aq_parent(aq_inner(self)).aq_acquire('index_html')
         return ReplaceableWrapper(aq_base(_target).__of__(self))
diff --git a/Products/ATContentTypes/criteria/date.py b/Products/ATContentTypes/criteria/date.py
index 47b35f8..6ac4943 100644
--- a/Products/ATContentTypes/criteria/date.py
+++ b/Products/ATContentTypes/criteria/date.py
@@ -126,7 +126,8 @@ def getCriteriaItems(self):
             elif operation == 'more':
                 if value != 0:
                     range_op = (self.getDateRange() == '-' and 'max') or 'min'
-                    return ((field, {'query': date.earliestTime(), 'range': range_op}),)
+                    return (
+                        (field, {'query': date.earliestTime(), 'range': range_op}),)
                 else:
                     return ((field, {'query': date, 'range': 'min'}),)
             elif operation == 'less':
@@ -134,7 +135,8 @@ def getCriteriaItems(self):
                     date_range = (self.getDateRange() == '-' and
                                   (date.earliestTime(), current_date)
                                   ) or (current_date, date.latestTime())
-                    return ((field, {'query': date_range, 'range': 'min:max'}),)
+                    return (
+                        (field, {'query': date_range, 'range': 'min:max'}),)
                 else:
                     return ((field, {'query': date, 'range': 'max'}),)
         else:
diff --git a/Products/ATContentTypes/lib/calendarsupport.py b/Products/ATContentTypes/lib/calendarsupport.py
index 41563eb..093c245 100644
--- a/Products/ATContentTypes/lib/calendarsupport.py
+++ b/Products/ATContentTypes/lib/calendarsupport.py
@@ -255,7 +255,13 @@ def foldLine(s):
 
     lineLen = 70
 
-    workStr = s.strip().replace('\r\n', '\n').replace('\r', '\n').replace('\n', '\\n')
+    workStr = s.strip().replace(
+        '\r\n',
+        '\n').replace(
+        '\r',
+        '\n').replace(
+            '\n',
+        '\\n')
     numLinesToBeProcessed = len(workStr) / lineLen
     startingChar = 0
     res = ''
diff --git a/Products/ATContentTypes/lib/constraintypes.py b/Products/ATContentTypes/lib/constraintypes.py
index a08a3e2..3360daa 100644
--- a/Products/ATContentTypes/lib/constraintypes.py
+++ b/Products/ATContentTypes/lib/constraintypes.py
@@ -180,13 +180,15 @@ def getLocallyAllowedTypes(self, context=None):
         mode = self.getConstrainTypesMode()
 
         if mode == DISABLED:
-            return [fti.getId() for fti in self.getDefaultAddableTypes(context)]
+            return [fti.getId()
+                    for fti in self.getDefaultAddableTypes(context)]
         elif mode == ENABLED:
             return self.getField('locallyAllowedTypes').get(self)
         elif mode == ACQUIRE:
             parent = getParent(self)
             if not parent or parent.portal_type == 'Plone Site':
-                return [fti.getId() for fti in self.getDefaultAddableTypes(context)]
+                return [fti.getId()
+                        for fti in self.getDefaultAddableTypes(context)]
             elif not parentPortalTypeEqual(self):
                 # if parent.portal_type != self.portal_type:
                 default_addable_types = [
@@ -203,7 +205,7 @@ def getLocallyAllowedTypes(self, context=None):
                 else:
                     return parent.getLocallyAllowedTypes()
         else:
-            raise ValueError, "Invalid value for enableAddRestriction"
+            raise ValueError("Invalid value for enableAddRestriction")
 
     security.declareProtected(View, 'getImmediatelyAddableTypes')
 
@@ -236,7 +238,7 @@ def getImmediatelyAddableTypes(self, context=None):
                 parent = aq_parent(aq_inner(self))
                 return parent.getImmediatelyAddableTypes(context)
         else:
-            raise ValueError, "Invalid value for enableAddRestriction"
+            raise ValueError("Invalid value for enableAddRestriction")
 
     # overrides CMFCore's PortalFolder allowedTypes
     def allowedContentTypes(self, context=None):
@@ -283,7 +285,8 @@ def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kw):
             return PortalFolder.invokeFactory(self, type_name, id,
                                               RESPONSE=None, *args, **kw)
 
-        if not type_name in [fti.getId() for fti in self.allowedContentTypes()]:
+        if not type_name in [fti.getId()
+                             for fti in self.allowedContentTypes()]:
             raise ValueError('Disallowed subobject type: %s' % type_name)
 
         pt = getToolByName(self, 'portal_types')
@@ -321,7 +324,8 @@ def canSetConstrainTypes(self):
         """
         mtool = getToolByName(self, 'portal_membership')
         member = mtool.getAuthenticatedMember()
-        return member.has_permission(ATCTPermissions.ModifyConstrainTypes, self)
+        return member.has_permission(
+            ATCTPermissions.ModifyConstrainTypes, self)
 
     #
     # Helper methods
@@ -360,7 +364,8 @@ def _ct_defaultConstrainTypesMode(self):
         else:
             parent = aq_parent(aq_inner(self))
 
-        if ISelectableConstrainTypes.providedBy(parent) and parentPortalTypeEqual(self):
+        if ISelectableConstrainTypes.providedBy(
+                parent) and parentPortalTypeEqual(self):
             return ACQUIRE
         else:
             return DISABLED
diff --git a/Products/ATContentTypes/lib/imagetransform.py b/Products/ATContentTypes/lib/imagetransform.py
index ed5aca2..41168cb 100644
--- a/Products/ATContentTypes/lib/imagetransform.py
+++ b/Products/ATContentTypes/lib/imagetransform.py
@@ -193,7 +193,7 @@ def transformImage(self, method, REQUEST=None):
         except ValueError:
             method = int(REQUEST.form.get('method'))
         if method not in TRANSPOSE_MAP:
-            raise RuntimeError, "Unknown method %s" % method
+            raise RuntimeError("Unknown method %s" % method)
 
         target = self.absolute_url() + '/atct_image_transform'
 
diff --git a/Products/ATContentTypes/tests/test_bugs.py b/Products/ATContentTypes/tests/test_bugs.py
index ef6b8d8..27cba99 100644
--- a/Products/ATContentTypes/tests/test_bugs.py
+++ b/Products/ATContentTypes/tests/test_bugs.py
@@ -33,6 +33,7 @@ def test_striphtmlbug(self):
         self.assertEqual(
             d.Title(), "HTML end tags start with </ and end with >")
 
-    def test_validation_layer_from_id_field_from_base_schema_was_initialized(self):
+    def test_validation_layer_from_id_field_from_base_schema_was_initialized(
+            self):
         field = ATContentTypeSchema['id']
         self.assertTrue(IValidationChain.providedBy(field.validators))
diff --git a/Products/ATContentTypes/thirdparty/exif.py b/Products/ATContentTypes/thirdparty/exif.py
index 2cbee58..a019c90 100644
--- a/Products/ATContentTypes/thirdparty/exif.py
+++ b/Products/ATContentTypes/thirdparty/exif.py
@@ -809,8 +809,9 @@ def dump_IFD(self, ifd, ifd_name, dict=EXIF_TAGS, relative=0):
             field_type = self.s2n(entry + 2, 2)
             if not 0 < field_type < len(FIELD_TYPES):
                 # unknown field type
-                raise ValueError, \
-                    'unknown type %d in tag 0x%04X' % (field_type, tag)
+                raise ValueError(
+                    'unknown type %d in tag 0x%04X' %
+                    (field_type, tag))
 
             typelen = FIELD_TYPES[field_type][0]
             count = self.s2n(entry + 4, 4)
@@ -922,7 +923,7 @@ def decode_maker_note(self):
                 if self.debug:
                     print "Looks like a labeled type 2 Nikon MakerNote"
                 if note[0][12:14] != [0, 42] and note[0][12:14] != [42L, 0L]:
-                    raise ValueError, "Missing marker tag '42' in MakerNote."
+                    raise ValueError("Missing marker tag '42' in MakerNote.")
                 # skip the Makernote label and the TIFF header
                 self.dump_IFD(note[2] + 10 + 8, 'MakerNote',
                               dict=MAKERNOTE_NIKON_NEWER_TAGS, relative=1)
diff --git a/Products/ATContentTypes/tool/metadata.py b/Products/ATContentTypes/tool/metadata.py
index 4e02ff5..95aba1a 100644
--- a/Products/ATContentTypes/tool/metadata.py
+++ b/Products/ATContentTypes/tool/metadata.py
@@ -171,10 +171,10 @@ def addPolicy(self, typ):
         """ Add a policy to this element for objects of the given type.
         """
         if typ is None:
-            raise MetadataError, "Can't replace default policy."
+            raise MetadataError("Can't replace default policy.")
 
-        if self.policies.has_key(typ):
-            raise MetadataError, "Existing policy for content type:" + typ
+        if typ in self.policies:
+            raise MetadataError("Existing policy for content type:" + typ)
 
         self.policies[typ] = self._makePolicy()
 
@@ -186,7 +186,7 @@ def removePolicy(self, typ):
         o Do *not* remvoe the default, however.
         """
         if typ is None:
-            raise MetadataError, "Can't remove default policy."
+            raise MetadataError("Can't remove default policy.")
         del self.policies[typ]
 
 InitializeClass(ElementSpec)
@@ -306,7 +306,7 @@ def addElementSpec(self, element, is_multi_valued, REQUEST=None):
         """ Add 'element' to our list of managed elements.
         """
         # Don't replace.
-        if self.element_specs.has_key(element):
+        if element in self.element_specs:
             return
 
         self.element_specs[element] = ElementSpec(is_multi_valued)
@@ -425,7 +425,7 @@ def manage_removeSchemas(self, schema_ids, REQUEST):
         """ ZMI wrapper around removeSchema
         """
         if not schema_ids:
-            raise ValueError, 'No schemas selected!'
+            raise ValueError('No schemas selected!')
 
         for schema_id in schema_ids:
             self.removeSchema(schema_id)
@@ -508,7 +508,7 @@ def addSchema(self, schema_id, elements=()):
         """ See IMetadataTool.
         """
         if schema_id == 'DCMI' or schema_id in self.objectIds():
-            raise KeyError, 'Duplicate schema ID: %s' % schema_id
+            raise KeyError('Duplicate schema ID: %s' % schema_id)
 
         schema = MetadataSchema(schema_id, elements)
         self._setObject(schema_id, schema)
@@ -521,7 +521,7 @@ def removeSchema(self, schema_id):
         """ See IMetadataTool.
         """
         if schema_id == 'DCMI' or schema_id not in self.objectIds():
-            raise KeyError, 'Invalid schema ID: %s' % schema_id
+            raise KeyError('Invalid schema ID: %s' % schema_id)
 
         self._delObject(schema_id)
 
@@ -540,8 +540,8 @@ def setInitialMetadata(self, content):
                         setter = getattr(content, 'set%s' % element)
                         setter(policy.defaultValue())
                     elif policy.isRequired():
-                        raise MetadataError, \
-                            'Metadata element %s is required.' % element
+                        raise MetadataError(
+                            'Metadata element %s is required.' % element)
 
         # TODO:  Call initial_values_hook, if present
 
@@ -556,16 +556,16 @@ def validateMetadata(self, content):
 
                 value = getattr(content, element)()
                 if not value and policy.isRequired():
-                    raise MetadataError, \
-                        'Metadata element %s is required.' % element
+                    raise MetadataError(
+                        'Metadata element %s is required.' %
+                        element)
 
                 if value and policy.enforceVocabulary():
                     values = policy.isMultiValued() and value or [value]
                     for value in values:
                         if not value in policy.allowedVocabulary():
-                            raise MetadataError, \
-                                'Value %s is not in allowed vocabulary for ' \
-                                'metadata element %s.' % (value, element)
+                            raise MetadataError('Value %s is not in allowed vocabulary for '
+                                                'metadata element %s.' % (value, element))
 
 InitializeClass(MetadataTool)
 registerToolInterface('portal_metadata', IMetadataTool)
diff --git a/Products/ATContentTypes/tool/topic.py b/Products/ATContentTypes/tool/topic.py
index f2050d9..7d6fe57 100644
--- a/Products/ATContentTypes/tool/topic.py
+++ b/Products/ATContentTypes/tool/topic.py
@@ -16,7 +16,8 @@
 
 class TopicIndex(SimpleItem, Persistent):
 
-    def __init__(self, index, friendlyName='', description='', enabled=False, criteria=()):
+    def __init__(self, index, friendlyName='',
+                 description='', enabled=False, criteria=()):
         self.index = index
         self.friendlyName = friendlyName
         self.description = description
@@ -67,7 +68,8 @@ def getCriteriaForIndex(self, index, as_dict=False):
 
     security.declareProtected(ManagePortal, 'addIndex')
 
-    def addIndex(self, index, friendlyName='', description='', enabled=False, criteria=None):
+    def addIndex(self, index, friendlyName='', description='',
+                 enabled=False, criteria=None):
         """ Add a new index along with descriptive information to the index
             registry """
         if criteria is None:
@@ -87,7 +89,8 @@ def addIndex(self, index, friendlyName='', description='', enabled=False, criter
 
     security.declareProtected(ManagePortal, 'addMetadata')
 
-    def addMetadata(self, metadata, friendlyName='', description='', enabled=False):
+    def addMetadata(self, metadata, friendlyName='',
+                    description='', enabled=False):
         """ Add a new metadata field along with descriptive information to the
             metadata registry """
         if metadata in self.topic_metadata:
@@ -103,7 +106,8 @@ def addMetadata(self, metadata, friendlyName='', description='', enabled=False):
 
     security.declareProtected(ManagePortal, 'updateIndex')
 
-    def updateIndex(self, index, friendlyName=None, description=None, enabled=None, criteria=None):
+    def updateIndex(self, index, friendlyName=None,
+                    description=None, enabled=None, criteria=None):
         """ Updates an existing index in the registry, unrecognized values are
             added """
         indexes = self.topic_indexes
@@ -120,7 +124,8 @@ def updateIndex(self, index, friendlyName=None, description=None, enabled=None,
 
     security.declareProtected(ManagePortal, 'updateMetadata')
 
-    def updateMetadata(self, metadata, friendlyName=None, description=None, enabled=None):
+    def updateMetadata(self, metadata, friendlyName=None,
+                       description=None, enabled=None):
         """ Updates an existing metadata field in the registry, unrecognized values are
             added """
         meta = self.topic_metadata


Repository: Products.ATContentTypes


Branch: refs/heads/master
Date: 2016-02-05T18:52:02+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.ATContentTypes/commit/2e8eaeaa13a77b730f244654e6d1fd4621091552

Selected more invasive autopep8 fixes.

Files changed:
M CHANGES.rst
M Products/ATContentTypes/configuration/datatype.py
M Products/ATContentTypes/content/base.py
M Products/ATContentTypes/content/document.py
M Products/ATContentTypes/content/file.py
M Products/ATContentTypes/content/topic.py
M Products/ATContentTypes/criteria/__init__.py
M Products/ATContentTypes/criteria/reference.py
M Products/ATContentTypes/criteria/selection.py
M Products/ATContentTypes/interface.py
M Products/ATContentTypes/lib/constraintypes.py
M Products/ATContentTypes/lib/validators.py
M Products/ATContentTypes/tests/test_criteria.py
M Products/ATContentTypes/tests/test_portal_factory.py
M Products/ATContentTypes/thirdparty/exif.py
M Products/ATContentTypes/tool/factory.py
M Products/ATContentTypes/tool/topic.py

diff --git a/CHANGES.rst b/CHANGES.rst
index a6374a1..96b5672 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,6 +10,8 @@ New:
 
 Fixes:
 
+- Fixed pep8 errors.  [maurits]
+
 - Prevent topic-criteria from having unicode as id. A unicode-id broke
   indexing the criteria in ZCatalog since obj.getPhysicalPath() prefers
   obj.id over obj.getId() in zope4.
diff --git a/Products/ATContentTypes/configuration/datatype.py b/Products/ATContentTypes/configuration/datatype.py
index c70f912..a61427e 100644
--- a/Products/ATContentTypes/configuration/datatype.py
+++ b/Products/ATContentTypes/configuration/datatype.py
@@ -19,7 +19,7 @@ def _getValueFromDottedName(dotted_name):
     key = parts[-1]
     try:
         module = __import__(module_name, globals(), locals(), [key])
-    except ImportError, msg:
+    except ImportError as msg:
         raise ValueError(str(msg))
     return _getValueFromModule(module, key)
 
diff --git a/Products/ATContentTypes/content/base.py b/Products/ATContentTypes/content/base.py
index 3454574..0b515bd 100644
--- a/Products/ATContentTypes/content/base.py
+++ b/Products/ATContentTypes/content/base.py
@@ -130,7 +130,7 @@ def initializeArchetype(self, **kwargs):
                 self.copyLayoutFromParent()
         except ConflictError:
             raise
-        except Exception, msg:
+        except Exception as msg:
             LOG.warn('Exception in initializeArchetype', exc_info=True)
             if DEBUG and str(msg) not in ('SESSION',):
                 # debug code
diff --git a/Products/ATContentTypes/content/document.py b/Products/ATContentTypes/content/document.py
index 69f0a59..561c1be 100644
--- a/Products/ATContentTypes/content/document.py
+++ b/Products/ATContentTypes/content/document.py
@@ -153,11 +153,12 @@ def guessMimetypeOfText(self):
             # no extension
             mimetype = mtr.classify(data)
 
-        if not mimetype or (type(mimetype) is TupleType and not len(mimetype)):
+        if not mimetype or (isinstance(mimetype, TupleType)
+                            and not len(mimetype)):
             # nothing found
             return None
 
-        if type(mimetype) is TupleType and len(mimetype):
+        if isinstance(mimetype, TupleType) and len(mimetype):
             mimetype = mimetype[0]
         return mimetype.normalized()
 
diff --git a/Products/ATContentTypes/content/file.py b/Products/ATContentTypes/content/file.py
index 33aac19..9086e6e 100644
--- a/Products/ATContentTypes/content/file.py
+++ b/Products/ATContentTypes/content/file.py
@@ -132,7 +132,7 @@ def getIcon(self, relative_to_portal=0):
             mimetypeitem = None
             try:
                 mimetypeitem = mtr.lookup(contenttype)
-            except MimeTypeException, msg:
+            except MimeTypeException as msg:
                 LOG.error('MimeTypeException for %s. Error is: %s' %
                           (self.absolute_url(), str(msg)))
             if not mimetypeitem:
diff --git a/Products/ATContentTypes/content/topic.py b/Products/ATContentTypes/content/topic.py
index eee7ef2..e346f35 100644
--- a/Products/ATContentTypes/content/topic.py
+++ b/Products/ATContentTypes/content/topic.py
@@ -196,8 +196,7 @@ def listCriteriaTypes(self):
     def listCriteriaMetaTypes(self):
         """List available criteria
         """
-        val = _criterionRegistry.listTypes()
-        val.sort()
+        val = sorted(_criterionRegistry.listTypes())
         return val
 
     security.declareProtected(ChangeTopics, 'listSearchCriteriaTypes')
@@ -214,8 +213,7 @@ def listSearchCriteriaTypes(self):
     def listSearchCriteriaMetaTypes(self):
         """List available search criteria
         """
-        val = _criterionRegistry.listSearchTypes()
-        val.sort()
+        val = sorted(_criterionRegistry.listSearchTypes())
         return val
 
     security.declareProtected(ChangeTopics, 'listSortCriteriaTypes')
@@ -232,8 +230,7 @@ def listSortCriteriaTypes(self):
     def listSortCriteriaMetaTypes(self):
         """List available sort criteria
         """
-        val = _criterionRegistry.listSortTypes()
-        val.sort()
+        val = sorted(_criterionRegistry.listSortTypes())
         return val
 
     security.declareProtected(View, 'listCriteria')
@@ -487,7 +484,7 @@ def addCriterion(self, field, criterion_type):
     def deleteCriterion(self, criterion_id):
         """Delete selected criterion.
         """
-        if type(criterion_id) is StringType:
+        if isinstance(criterion_id, StringType):
             self._delObject(criterion_id)
         elif type(criterion_id) in (ListType, TupleType):
             for cid in criterion_id:
diff --git a/Products/ATContentTypes/criteria/__init__.py b/Products/ATContentTypes/criteria/__init__.py
index 00d5280..5b896a5 100644
--- a/Products/ATContentTypes/criteria/__init__.py
+++ b/Products/ATContentTypes/criteria/__init__.py
@@ -45,7 +45,7 @@ def __init__(self, *args, **kwargs):
         self.portaltypes = {}
 
     def register(self, criterion, indices):
-        if type(indices) is StringType:
+        if isinstance(indices, StringType):
             indices = (indices,)
         indices = tuple(indices)
 
diff --git a/Products/ATContentTypes/criteria/reference.py b/Products/ATContentTypes/criteria/reference.py
index 08bd5d6..93fc999 100644
--- a/Products/ATContentTypes/criteria/reference.py
+++ b/Products/ATContentTypes/criteria/reference.py
@@ -36,9 +36,8 @@ def getCurrentValues(self):
             query['Language'] = [self.Language(), '']
 
         brains = uid_cat(**query)
-        display = [((putils.pretty_title_or_id(b)).lower(),
-                    b.UID, b.Title or b.id) for b in brains]
-        display.sort()
+        display = sorted([((putils.pretty_title_or_id(b)).lower(),
+                           b.UID, b.Title or b.id) for b in brains])
         display_list = DisplayList([(d[1], d[2]) for d in display])
 
         return display_list
diff --git a/Products/ATContentTypes/criteria/selection.py b/Products/ATContentTypes/criteria/selection.py
index 9b42f15..d6d5319 100644
--- a/Products/ATContentTypes/criteria/selection.py
+++ b/Products/ATContentTypes/criteria/selection.py
@@ -74,9 +74,8 @@ def getCurrentValues(self):
         # DisplayList keys though it is supposed to (it should
         # probably accept Booleans as well) so we only accept strings
         # for now
-        options = [(o.lower(), o)
-                   for o in options if isinstance(o, basestring)]
-        options.sort()
+        options = sorted([(o.lower(), o)
+                          for o in options if isinstance(o, basestring)])
         return [o[1] for o in options]
 
     security.declareProtected(View, 'getCriteriaItems')
diff --git a/Products/ATContentTypes/interface.py b/Products/ATContentTypes/interface.py
index 1513188..12ffa0c 100644
--- a/Products/ATContentTypes/interface.py
+++ b/Products/ATContentTypes/interface.py
@@ -18,5 +18,5 @@
 from types import ModuleType
 from sys import modules
 for name, obj in globals().items():
-    if type(obj) is ModuleType:
+    if isinstance(obj, ModuleType):
         modules['%s.%s' % (__name__, name)] = obj
diff --git a/Products/ATContentTypes/lib/constraintypes.py b/Products/ATContentTypes/lib/constraintypes.py
index 3360daa..06c8d91 100644
--- a/Products/ATContentTypes/lib/constraintypes.py
+++ b/Products/ATContentTypes/lib/constraintypes.py
@@ -337,9 +337,8 @@ def canSetConstrainTypes(self):
     def _ct_vocabularyPossibleTypes(self):
         """Get a DisplayList of types which may be added (id -> title)
         """
-        typelist = [(fti.title_or_id(), fti.getId())
-                    for fti in self.getDefaultAddableTypes()]
-        typelist.sort()
+        typelist = sorted([(fti.title_or_id(), fti.getId())
+                           for fti in self.getDefaultAddableTypes()])
         return DisplayList([(id, title) for title, id in typelist])
 
     # Default method for type lists
diff --git a/Products/ATContentTypes/lib/validators.py b/Products/ATContentTypes/lib/validators.py
index 134fcc4..047743c 100644
--- a/Products/ATContentTypes/lib/validators.py
+++ b/Products/ATContentTypes/lib/validators.py
@@ -65,7 +65,7 @@ def __call__(self, value, *args, **kw):
         parser = HTMLTALParser(gen)
         try:
             parser.parseString(value)
-        except Exception, err:
+        except Exception as err:
             return ("Validation Failed(%s): \n %s" % (self.name, err))
         return 1
 
@@ -169,7 +169,7 @@ def __init__(self, name, title='', description=''):
 
     def __call__(self, value, *args, **kwargs):
         # calculate size
-        if isinstance(value, FileUpload) or type(value) is FileType \
+        if isinstance(value, FileUpload) or isinstance(value, FileType) \
                 or hasattr(aq_base(value), 'tell'):
             value.seek(0, 2)  # eof
             size = value.tell()
diff --git a/Products/ATContentTypes/tests/test_criteria.py b/Products/ATContentTypes/tests/test_criteria.py
index b94084e..dd8ff40 100644
--- a/Products/ATContentTypes/tests/test_criteria.py
+++ b/Products/ATContentTypes/tests/test_criteria.py
@@ -369,8 +369,7 @@ def test_vocabulary_sorted(self):
         # Should return sorted ids
         self.dummy.Schema()['field'].set(self.dummy, 'getId')
         orig_vocab = [a.lower() for a in list(self.dummy.getCurrentValues())]
-        sorted_vocab = orig_vocab[:]
-        sorted_vocab.sort()
+        sorted_vocab = sorted(orig_vocab[:])
         self.assertEqual(orig_vocab, sorted_vocab)
 
 tests.append(TestATSelectionCriterion)
diff --git a/Products/ATContentTypes/tests/test_portal_factory.py b/Products/ATContentTypes/tests/test_portal_factory.py
index 1d74fe5..6a67c60 100644
--- a/Products/ATContentTypes/tests/test_portal_factory.py
+++ b/Products/ATContentTypes/tests/test_portal_factory.py
@@ -11,8 +11,7 @@
 
 
 def sortTuple(t):
-    l = list(t)
-    l.sort()
+    l = sorted(t)
     return tuple(l)
 
 ADD_DOC_PERM = 'ATContentTypes: Add Document'
diff --git a/Products/ATContentTypes/thirdparty/exif.py b/Products/ATContentTypes/thirdparty/exif.py
index a019c90..088a640 100644
--- a/Products/ATContentTypes/thirdparty/exif.py
+++ b/Products/ATContentTypes/thirdparty/exif.py
@@ -719,7 +719,7 @@ def s2n_motorola(str):
 # extract multibyte integer in Intel format (big endian)
 def s2n_intel(str):
     x = 0
-    y = 0L
+    y = 0
     for c in str:
         x = x | (ord(c) << y)
         y = y + 8
@@ -759,7 +759,7 @@ def s2n(self, offset, length, signed=0):
             val = s2n_motorola(slice)
         # Sign extension ?
         if signed:
-            msb = 1L << (8 * length - 1)
+            msb = 1 << (8 * length - 1)
             if val & msb:
                 val = val - (msb << 1)
         return val
@@ -914,15 +914,15 @@ def decode_maker_note(self):
         # not at the start of the makernote, it's probably type 2, since some
         # cameras work that way.
         if make in ('NIKON', 'NIKON CORPORATION'):
-            if note.values[0:7] == [78, 105, 107, 111, 110, 00, 01]:
+            if note.values[0:7] == [78, 105, 107, 111, 110, 00, 0o1]:
                 if self.debug:
                     print "Looks like a type 1 Nikon MakerNote."
                 self.dump_IFD(note[2] + 8, 'MakerNote',
                               dict=MAKERNOTE_NIKON_OLDER_TAGS)
-            elif note.values[0:7] == [78, 105, 107, 111, 110, 00, 02]:
+            elif note.values[0:7] == [78, 105, 107, 111, 110, 00, 0o2]:
                 if self.debug:
                     print "Looks like a labeled type 2 Nikon MakerNote"
-                if note[0][12:14] != [0, 42] and note[0][12:14] != [42L, 0L]:
+                if note[0][12:14] != [0, 42] and note[0][12:14] != [42, 0]:
                     raise ValueError("Missing marker tag '42' in MakerNote.")
                 # skip the Makernote label and the TIFF header
                 self.dump_IFD(note[2] + 10 + 8, 'MakerNote',
@@ -1068,8 +1068,7 @@ def process_file(file, debug=0):
             pass
         del hdr.tags['EXIF MakerNote']
     dict = {}
-    tags = hdr.tags.keys()
-    tags.sort()
+    tags = sorted(hdr.tags.keys())
     for tag in tags:
         hdr.tags[tag] = hdr.tags[tag][1]
     return hdr.tags
@@ -1102,8 +1101,7 @@ def process_file(file, debug=0):
             print 'No EXIF information found'
             continue
 
-        x = data.keys()
-        x.sort()
+        x = sorted(data.keys())
         for i in x:
             print "   %s: %s" % (i, data[i])
     end_time = time.clock()
diff --git a/Products/ATContentTypes/tool/factory.py b/Products/ATContentTypes/tool/factory.py
index 06e268c..7511ee0 100644
--- a/Products/ATContentTypes/tool/factory.py
+++ b/Products/ATContentTypes/tool/factory.py
@@ -105,7 +105,7 @@ def __ac_local_roles__(self):
         their walking from TempFolder to portal_factory to the portal root."""
         object = aq_parent(aq_parent(self))
         local_roles = {}
-        while 1:
+        while True:
             # Get local roles for this user
             lr = getattr(object, '__ac_local_roles__', None)
             if lr:
diff --git a/Products/ATContentTypes/tool/topic.py b/Products/ATContentTypes/tool/topic.py
index 7d6fe57..60268c1 100644
--- a/Products/ATContentTypes/tool/topic.py
+++ b/Products/ATContentTypes/tool/topic.py
@@ -111,13 +111,13 @@ def updateIndex(self, index, friendlyName=None,
         """ Updates an existing index in the registry, unrecognized values are
             added """
         indexes = self.topic_indexes
-        if friendlyName == None:
+        if friendlyName is None:
             friendlyName = indexes[index].friendlyName
-        if description == None:
+        if description is None:
             description = indexes[index].description
-        if enabled == None:
+        if enabled is None:
             enabled = indexes[index].enabled
-        if criteria == None:
+        if criteria is None:
             criteria = indexes[index].criteria
 
         self.addIndex(index, friendlyName, description, enabled, criteria)
@@ -129,11 +129,11 @@ def updateMetadata(self, metadata, friendlyName=None,
         """ Updates an existing metadata field in the registry, unrecognized values are
             added """
         meta = self.topic_metadata
-        if friendlyName == None:
+        if friendlyName is None:
             friendlyName = meta[metadata].friendlyName
-        if description == None:
+        if description is None:
             description = meta[metadata].description
-        if enabled == None:
+        if enabled is None:
             enabled = meta[metadata].enabled
         self.addMetadata(metadata, friendlyName, description, enabled)
 
@@ -181,8 +181,7 @@ def listCatalogFields(self):
         """ Return a list of fields from portal_catalog. """
         pcatalog = getToolByName(self, 'portal_catalog')
         available = pcatalog.indexes()
-        val = [field for field in available]
-        val.sort()
+        val = sorted([field for field in available])
         return val
 
     security.declarePrivate('listCatalogMetadata')
@@ -191,8 +190,7 @@ def listCatalogMetadata(self):
         """ Return a list of columns from portal_catalog. """
         pcatalog = getToolByName(self, 'portal_catalog')
         available = pcatalog.schema()
-        val = [field for field in available]
-        val.sort()
+        val = sorted([field for field in available])
         return val
 
     def getAllPortalTypes(self):
@@ -259,10 +257,9 @@ def getEnabledFields(self):
         """ Returns a list of tuples containing the index name, friendly name,
             and description for each enabled index. """
         enabledIndexes = self.getEnabledIndexes()
-        dec_fields = [(i.friendlyName.lower() or
-                       i.index.lower(), i.index, i.friendlyName or
-                       i.index, i.description) for i in enabledIndexes]
-        dec_fields.sort()
+        dec_fields = sorted([(i.friendlyName.lower() or
+                              i.index.lower(), i.index, i.friendlyName or
+                              i.index, i.description) for i in enabledIndexes])
         fields = [(a[1], a[2], a[3]) for a in dec_fields]
         return fields
 
@@ -325,7 +322,7 @@ def getMetadata(self, metadata):
 
     def manage_saveTopicSetup(self, REQUEST=None):
         """ Set indexes and metadata from form """
-        if REQUEST == None:
+        if REQUEST is None:
             return 'Nothing saved.'
 
         data = REQUEST.get('index', [])
@@ -346,7 +343,7 @@ def manage_saveTopicSetup(self, REQUEST=None):
 
     def manage_saveTopicSetupTypes(self, REQUEST=None):
         """ Set portal types from form """
-        if REQUEST == None:
+        if REQUEST is None:
             return 'Nothing saved.'
 
         self.allowed_portal_types = REQUEST.get('allowed_types', [])


Repository: Products.ATContentTypes


Branch: refs/heads/master
Date: 2016-02-05T18:53:13+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.ATContentTypes/commit/315ae5dc360e9f96f5175503a46409707e24e7f1

Sorted imports with isort.

Added .isort.cfg.
We skip __init__.py files, because they would cause ImportErrors.

Files changed:
A .isort.cfg
M CHANGES.rst
M Products/ATContentTypes/atct.py
M Products/ATContentTypes/browser/calendar.py
M Products/ATContentTypes/browser/criteria.py
M Products/ATContentTypes/browser/download.py
M Products/ATContentTypes/browser/nextprevious.py
M Products/ATContentTypes/config.py
M Products/ATContentTypes/configuration/config.py
M Products/ATContentTypes/configuration/datatype.py
M Products/ATContentTypes/configuration/schema.py
M Products/ATContentTypes/content/base.py
M Products/ATContentTypes/content/document.py
M Products/ATContentTypes/content/event.py
M Products/ATContentTypes/content/favorite.py
M Products/ATContentTypes/content/file.py
M Products/ATContentTypes/content/folder.py
M Products/ATContentTypes/content/image.py
M Products/ATContentTypes/content/link.py
M Products/ATContentTypes/content/newsitem.py
M Products/ATContentTypes/content/schemata.py
M Products/ATContentTypes/content/topic.py
M Products/ATContentTypes/criteria/base.py
M Products/ATContentTypes/criteria/boolean.py
M Products/ATContentTypes/criteria/currentauthor.py
M Products/ATContentTypes/criteria/date.py
M Products/ATContentTypes/criteria/daterange.py
M Products/ATContentTypes/criteria/list.py
M Products/ATContentTypes/criteria/path.py
M Products/ATContentTypes/criteria/portaltype.py
M Products/ATContentTypes/criteria/reference.py
M Products/ATContentTypes/criteria/relativepath.py
M Products/ATContentTypes/criteria/schemata.py
M Products/ATContentTypes/criteria/selection.py
M Products/ATContentTypes/criteria/simpleint.py
M Products/ATContentTypes/criteria/simplestring.py
M Products/ATContentTypes/criteria/sort.py
M Products/ATContentTypes/exportimport/atcttool.py
M Products/ATContentTypes/exportimport/content.py
M Products/ATContentTypes/exportimport/factorytool.py
M Products/ATContentTypes/exportimport/tests/test_factory_tool.py
M Products/ATContentTypes/factories.py
M Products/ATContentTypes/interface.py
M Products/ATContentTypes/interfaces/factory.py
M Products/ATContentTypes/interfaces/folder.py
M Products/ATContentTypes/interfaces/interfaces.py
M Products/ATContentTypes/interfaces/topic.py
M Products/ATContentTypes/lib/calendarsupport.py
M Products/ATContentTypes/lib/constraintypes.py
M Products/ATContentTypes/lib/historyaware.py
M Products/ATContentTypes/lib/imagetransform.py
M Products/ATContentTypes/lib/validators.py
M Products/ATContentTypes/permission.py
M Products/ATContentTypes/setuphandlers.py
M Products/ATContentTypes/skins/ATContentTypes/formatCatalogMetadata.py
M Products/ATContentTypes/skins/ATContentTypes/link_redirect_view.py
M Products/ATContentTypes/tests/atctftestcase.py
M Products/ATContentTypes/tests/atcttestcase.py
M Products/ATContentTypes/tests/testContentTypes.py
M Products/ATContentTypes/tests/test_atdocument.py
M Products/ATContentTypes/tests/test_atevent.py
M Products/ATContentTypes/tests/test_atfile.py
M Products/ATContentTypes/tests/test_atfolder.py
M Products/ATContentTypes/tests/test_atimage.py
M Products/ATContentTypes/tests/test_atlink.py
M Products/ATContentTypes/tests/test_atnewsitem.py
M Products/ATContentTypes/tests/test_attopic.py
M Products/ATContentTypes/tests/test_browserdefaultmixin.py
M Products/ATContentTypes/tests/test_bugs.py
M Products/ATContentTypes/tests/test_constraintypes.py
M Products/ATContentTypes/tests/test_content_profile.py
M Products/ATContentTypes/tests/test_criteria.py
M Products/ATContentTypes/tests/test_default_mimetypes.py
M Products/ATContentTypes/tests/test_doctests.py
M Products/ATContentTypes/tests/test_installation.py
M Products/ATContentTypes/tests/test_interfaces.py
M Products/ATContentTypes/tests/test_portal_factory.py
M Products/ATContentTypes/tests/test_skinScripts.py
M Products/ATContentTypes/tests/test_tool.py
M Products/ATContentTypes/tests/test_topictool.py
M Products/ATContentTypes/tests/utils.py
M Products/ATContentTypes/thirdparty/exif.py
M Products/ATContentTypes/tool/atct.py
M Products/ATContentTypes/tool/factory.py
M Products/ATContentTypes/tool/metadata.py
M Products/ATContentTypes/tool/topic.py
M Products/ATContentTypes/utils.py

diff --git a/.isort.cfg b/.isort.cfg
new file mode 100644
index 0000000..0e395d2
--- /dev/null
+++ b/.isort.cfg
@@ -0,0 +1,7 @@
+[settings]
+force_alphabetical_sort = True
+force_single_line = True
+lines_after_imports = 2
+line_length = 200
+# This would give too many ImportErrors:
+# not_skip = __init__.py
diff --git a/CHANGES.rst b/CHANGES.rst
index 96b5672..100549d 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,6 +10,8 @@ New:
 
 Fixes:
 
+- Sorted imports with isort.  [maurits]
+
 - Fixed pep8 errors.  [maurits]
 
 - Prevent topic-criteria from having unicode as id. A unicode-id broke
diff --git a/Products/ATContentTypes/atct.py b/Products/ATContentTypes/atct.py
index 53f53a6..556d4d6 100644
--- a/Products/ATContentTypes/atct.py
+++ b/Products/ATContentTypes/atct.py
@@ -1,60 +1,53 @@
+from Products.ATContentTypes.content.base import ATCTBTreeFolder
 from Products.ATContentTypes.content.base import ATCTContent
 from Products.ATContentTypes.content.base import ATCTFileContent
 from Products.ATContentTypes.content.base import ATCTFolder
 from Products.ATContentTypes.content.base import ATCTOrderedFolder
-from Products.ATContentTypes.content.base import ATCTBTreeFolder
-
-from Products.ATContentTypes.content.schemata import ATContentTypeSchema
-
 from Products.ATContentTypes.content.document import ATDocument
-from Products.ATContentTypes.content.event import ATEvent
-from Products.ATContentTypes.content.file import ATFile
-from Products.ATContentTypes.content.folder import ATFolder
-from Products.ATContentTypes.content.folder import ATBTreeFolder
-from Products.ATContentTypes.content.image import ATImage
-from Products.ATContentTypes.content.link import ATLink
-from Products.ATContentTypes.content.newsitem import ATNewsItem
-from Products.ATContentTypes.content.topic import ATTopic
-
 from Products.ATContentTypes.content.document import ATDocumentSchema
+from Products.ATContentTypes.content.event import ATEvent
 from Products.ATContentTypes.content.event import ATEventSchema
+from Products.ATContentTypes.content.file import ATFile
 from Products.ATContentTypes.content.file import ATFileSchema
-from Products.ATContentTypes.content.folder import ATFolderSchema
+from Products.ATContentTypes.content.folder import ATBTreeFolder
 from Products.ATContentTypes.content.folder import ATBTreeFolderSchema
+from Products.ATContentTypes.content.folder import ATFolder
+from Products.ATContentTypes.content.folder import ATFolderSchema
+from Products.ATContentTypes.content.image import ATImage
 from Products.ATContentTypes.content.image import ATImageSchema
+from Products.ATContentTypes.content.link import ATLink
 from Products.ATContentTypes.content.link import ATLinkSchema
+from Products.ATContentTypes.content.newsitem import ATNewsItem
 from Products.ATContentTypes.content.newsitem import ATNewsItemSchema
+from Products.ATContentTypes.content.schemata import ATContentTypeSchema
+from Products.ATContentTypes.content.topic import ATTopic
 from Products.ATContentTypes.content.topic import ATTopicSchema
-
 from Products.ATContentTypes.criteria import ALL_INDICES
 from Products.ATContentTypes.criteria import DATE_INDICES
-from Products.ATContentTypes.criteria import STRING_INDICES
 from Products.ATContentTypes.criteria import LIST_INDICES
-from Products.ATContentTypes.criteria import SORT_INDICES
 from Products.ATContentTypes.criteria import registerCriterion
+from Products.ATContentTypes.criteria import SORT_INDICES
+from Products.ATContentTypes.criteria import STRING_INDICES
 from Products.ATContentTypes.criteria import unregisterCriterion
-
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
-from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
-
 from Products.ATContentTypes.criteria.boolean import ATBooleanCriterion
-from Products.ATContentTypes.criteria.date import ATDateCriteria
-from Products.ATContentTypes.criteria.daterange import ATDateRangeCriterion
-from Products.ATContentTypes.criteria.list import ATListCriterion
-from Products.ATContentTypes.criteria.portaltype import ATPortalTypeCriterion
-from Products.ATContentTypes.criteria.reference import ATReferenceCriterion
-from Products.ATContentTypes.criteria.selection import ATSelectionCriterion
-from Products.ATContentTypes.criteria.simpleint import ATSimpleIntCriterion
-from Products.ATContentTypes.criteria.simplestring import ATSimpleStringCriterion
-from Products.ATContentTypes.criteria.sort import ATSortCriterion
-
 from Products.ATContentTypes.criteria.boolean import ATBooleanCriterionSchema
+from Products.ATContentTypes.criteria.date import ATDateCriteria
 from Products.ATContentTypes.criteria.date import ATDateCriteriaSchema
+from Products.ATContentTypes.criteria.daterange import ATDateRangeCriterion
 from Products.ATContentTypes.criteria.daterange import ATDateRangeCriterionSchema
+from Products.ATContentTypes.criteria.list import ATListCriterion
 from Products.ATContentTypes.criteria.list import ATListCriterionSchema
+from Products.ATContentTypes.criteria.portaltype import ATPortalTypeCriterion
 from Products.ATContentTypes.criteria.portaltype import ATPortalTypeCriterionSchema
+from Products.ATContentTypes.criteria.reference import ATReferenceCriterion
 from Products.ATContentTypes.criteria.reference import ATReferenceCriterionSchema
+from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
+from Products.ATContentTypes.criteria.selection import ATSelectionCriterion
 from Products.ATContentTypes.criteria.selection import ATSelectionCriterionSchema
+from Products.ATContentTypes.criteria.simpleint import ATSimpleIntCriterion
 from Products.ATContentTypes.criteria.simpleint import ATSimpleIntCriterionSchema
+from Products.ATContentTypes.criteria.simplestring import ATSimpleStringCriterion
 from Products.ATContentTypes.criteria.simplestring import ATSimpleStringCriterionSchema
+from Products.ATContentTypes.criteria.sort import ATSortCriterion
 from Products.ATContentTypes.criteria.sort import ATSortCriterionSchema
diff --git a/Products/ATContentTypes/browser/calendar.py b/Products/ATContentTypes/browser/calendar.py
index 4da44ac..b71ff7b 100644
--- a/Products/ATContentTypes/browser/calendar.py
+++ b/Products/ATContentTypes/browser/calendar.py
@@ -1,10 +1,8 @@
 from plone.memoize import ram
-from zope.publisher.browser import BrowserView
-
-from Products.CMFCore.utils import getToolByName
-
 from Products.ATContentTypes.interfaces import ICalendarSupport
 from Products.ATContentTypes.lib import calendarsupport as cs
+from Products.CMFCore.utils import getToolByName
+from zope.publisher.browser import BrowserView
 
 
 def cachekey(fun, self):
diff --git a/Products/ATContentTypes/browser/criteria.py b/Products/ATContentTypes/browser/criteria.py
index f6b892e..2648764 100644
--- a/Products/ATContentTypes/browser/criteria.py
+++ b/Products/ATContentTypes/browser/criteria.py
@@ -1,7 +1,8 @@
-import json
 from zope.i18n import translate
 from zope.publisher.browser import BrowserView
 
+import json
+
 
 class JSONCriteriaForField(BrowserView):
     """Return the criteria vocabulary as a json result"""
diff --git a/Products/ATContentTypes/browser/download.py b/Products/ATContentTypes/browser/download.py
index 2aee5c0..b8fa352 100644
--- a/Products/ATContentTypes/browser/download.py
+++ b/Products/ATContentTypes/browser/download.py
@@ -1,8 +1,8 @@
+from AccessControl import Unauthorized
+from Products.Five import BrowserView
 from zope.interface import implements
 from zope.publisher.interfaces import IPublishTraverse
 from zope.publisher.interfaces import NotFound as pNotFound
-from AccessControl import Unauthorized
-from Products.Five import BrowserView
 
 
 class DownloadArchetypeFile(BrowserView):
diff --git a/Products/ATContentTypes/browser/nextprevious.py b/Products/ATContentTypes/browser/nextprevious.py
index 634cf29..0bc09ad 100644
--- a/Products/ATContentTypes/browser/nextprevious.py
+++ b/Products/ATContentTypes/browser/nextprevious.py
@@ -1,15 +1,12 @@
-from zope.interface import implements
-from zope.component import adapts
-from zope.component import getUtility
-
+from Acquisition import aq_base
 from plone.app.layout.nextprevious.interfaces import INextPreviousProvider
-from Products.ATContentTypes.interfaces.folder import IATFolder
-
 from plone.memoize.instance import memoize
 from plone.registry.interfaces import IRegistry
-
-from Acquisition import aq_base
+from Products.ATContentTypes.interfaces.folder import IATFolder
 from Products.CMFCore.utils import getToolByName
+from zope.component import adapts
+from zope.component import getUtility
+from zope.interface import implements
 
 
 class ATFolderNextPrevious(object):
diff --git a/Products/ATContentTypes/config.py b/Products/ATContentTypes/config.py
index 9f1e479..2a7b695 100644
--- a/Products/ATContentTypes/config.py
+++ b/Products/ATContentTypes/config.py
@@ -6,10 +6,12 @@
 """
 __docformat__ = 'restructuredtext'
 
-import pkg_resources
-import os
 from Products.ATContentTypes.configuration import zconf
 
+import os
+import pkg_resources
+
+
 # options for mx tidy
 # read http://www.egenix.com/files/python/mxTidy.html for more informations
 MX_TIDY_ENABLED = zconf.mxtidy.enable
diff --git a/Products/ATContentTypes/configuration/config.py b/Products/ATContentTypes/configuration/config.py
index f2eba0e..0151004 100644
--- a/Products/ATContentTypes/configuration/config.py
+++ b/Products/ATContentTypes/configuration/config.py
@@ -1,8 +1,9 @@
-import os
-
-from ZConfig.loader import ConfigLoader
 from Globals import INSTANCE_HOME
 from Products.ATContentTypes.configuration.schema import atctSchema
+from ZConfig.loader import ConfigLoader
+
+import os
+
 
 # directories
 INSTANCE_ETC = os.path.join(INSTANCE_HOME, 'etc')
diff --git a/Products/ATContentTypes/configuration/datatype.py b/Products/ATContentTypes/configuration/datatype.py
index a61427e..1eddf3b 100644
--- a/Products/ATContentTypes/configuration/datatype.py
+++ b/Products/ATContentTypes/configuration/datatype.py
@@ -1,8 +1,9 @@
-from Products.CMFCore import permissions as CMFCorePermissions
 from AccessControl import Permissions as ZopePermissions
+from Products.CMFCore import permissions as CMFCorePermissions
 from ZConfig.datatypes import IdentifierConversion
 from ZConfig.datatypes import stock_datatypes
 
+
 _marker = object()
 
 
diff --git a/Products/ATContentTypes/configuration/schema.py b/Products/ATContentTypes/configuration/schema.py
index 919d63a..d0bc1de 100644
--- a/Products/ATContentTypes/configuration/schema.py
+++ b/Products/ATContentTypes/configuration/schema.py
@@ -1,8 +1,9 @@
-import os
-
+from Products.ATContentTypes.configuration import datatype
 from ZConfig.datatypes import Registry
 from ZConfig.loader import SchemaLoader
-from Products.ATContentTypes.configuration import datatype
+
+import os
+
 
 # schema file
 DIR = os.path.dirname(os.path.abspath(__file__))
diff --git a/Products/ATContentTypes/content/base.py b/Products/ATContentTypes/content/base.py
index 0b515bd..e7ed512 100644
--- a/Products/ATContentTypes/content/base.py
+++ b/Products/ATContentTypes/content/base.py
@@ -1,11 +1,33 @@
+from AccessControl import ClassSecurityInfo
+from Acquisition import aq_base
+from Acquisition import aq_inner
+from Acquisition import aq_parent
+from App.class_init import InitializeClass
+from ComputedAttribute import ComputedAttribute
+from OFS.ObjectManager import REPLACEABLE
+from plone.i18n.normalizer.interfaces import IUserPreferredFileNameNormalizer
+from Products.ATContentTypes.config import HAS_LINGUA_PLONE
+from Products.ATContentTypes.config import MIME_ALIAS
+from Products.ATContentTypes.content.schemata import ATContentTypeSchema
+from Products.ATContentTypes.interfaces import IATContentType
+from Products.ATContentTypes.interfaces import ISelectableConstrainTypes
+from Products.ATContentTypes.lib.constraintypes import ConstrainTypesMixin
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFCore.permissions import View
+from Products.CMFCore.utils import getToolByName
+from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin
+from webdav.Lockable import ResourceLockedError
+from webdav.NullResource import NullResource
+from webdav.Resource import Resource as WebdavResoure
+from ZODB.POSException import ConflictError
+from zope.interface import implements
+
+import logging
 import os
 import posixpath
-import logging
 import transaction
 
-from zope.interface import implements
 
-from Products.ATContentTypes.config import HAS_LINGUA_PLONE
 if HAS_LINGUA_PLONE:
     from Products.LinguaPlone.public import BaseContent
     from Products.LinguaPlone.public import BaseFolder
@@ -19,30 +41,9 @@
     from Products.Archetypes.atapi import BaseBTreeFolder
     from Products.Archetypes.atapi import registerType
 
-from AccessControl import ClassSecurityInfo
-from ComputedAttribute import ComputedAttribute
-from App.class_init import InitializeClass
-from Acquisition import aq_base
-from Acquisition import aq_inner
-from Acquisition import aq_parent
-from OFS.ObjectManager import REPLACEABLE
-from webdav.Lockable import ResourceLockedError
-from webdav.NullResource import NullResource
-from ZODB.POSException import ConflictError
-from webdav.Resource import Resource as WebdavResoure
 
-from Products.CMFCore.permissions import View
-from Products.CMFCore.permissions import ModifyPortalContent
-from Products.CMFCore.utils import getToolByName
-from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin
 
-from Products.ATContentTypes.config import MIME_ALIAS
-from Products.ATContentTypes.lib.constraintypes import ConstrainTypesMixin
-from Products.ATContentTypes.interfaces import IATContentType
-from Products.ATContentTypes.interfaces import ISelectableConstrainTypes
-from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 
-from plone.i18n.normalizer.interfaces import IUserPreferredFileNameNormalizer
 
 DEBUG = True
 LOG = logging.getLogger('ATCT')
diff --git a/Products/ATContentTypes/content/document.py b/Products/ATContentTypes/content/document.py
index 561c1be..cc37e6e 100644
--- a/Products/ATContentTypes/content/document.py
+++ b/Products/ATContentTypes/content/document.py
@@ -1,36 +1,31 @@
-from types import TupleType
-
-from zope.interface import implements
-
-from ZPublisher.HTTPRequest import HTTPRequest
-from Products.CMFCore.permissions import View
-from Products.CMFCore.permissions import ModifyPortalContent
-from Products.CMFCore.utils import getToolByName
 from AccessControl import ClassSecurityInfo
 from ComputedAttribute import ComputedAttribute
-
 from lxml import etree
-from Products.GenericSetup.interfaces import IDAVAware
-
-from Products.Archetypes.atapi import Schema
-from Products.Archetypes.atapi import TextField
+from Products.Archetypes.atapi import AnnotationStorage
 from Products.Archetypes.atapi import BooleanField
-from Products.Archetypes.atapi import TinyMCEWidget
 from Products.Archetypes.atapi import BooleanWidget
 from Products.Archetypes.atapi import RFC822Marshaller
-from Products.Archetypes.atapi import AnnotationStorage
-
-from Products.ATContentTypes.configuration import zconf
+from Products.Archetypes.atapi import Schema
+from Products.Archetypes.atapi import TextField
+from Products.Archetypes.atapi import TinyMCEWidget
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.config import PROJECTNAME
-from Products.ATContentTypes.content.base import registerATCT
+from Products.ATContentTypes.configuration import zconf
 from Products.ATContentTypes.content.base import ATCTContent
+from Products.ATContentTypes.content.base import registerATCT
 from Products.ATContentTypes.content.base import translateMimetypeAlias
 from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 from Products.ATContentTypes.content.schemata import finalizeATCTSchema
-from Products.ATContentTypes.lib.historyaware import HistoryAwareMixin
 from Products.ATContentTypes.interfaces import IATDocument
+from Products.ATContentTypes.lib.historyaware import HistoryAwareMixin
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFCore.permissions import View
+from Products.CMFCore.utils import getToolByName
+from Products.GenericSetup.interfaces import IDAVAware
+from types import TupleType
+from zope.interface import implements
+from ZPublisher.HTTPRequest import HTTPRequest
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 ATDocumentSchema = ATContentTypeSchema.copy() + Schema((
     TextField('text',
diff --git a/Products/ATContentTypes/content/event.py b/Products/ATContentTypes/content/event.py
index 0e0ee68..1d206f0 100644
--- a/Products/ATContentTypes/content/event.py
+++ b/Products/ATContentTypes/content/event.py
@@ -1,33 +1,31 @@
-from zope.interface import implements
-
-from Products.CMFCore.permissions import ModifyPortalContent, View
 from AccessControl import ClassSecurityInfo
-from DateTime import DateTime
 from ComputedAttribute import ComputedAttribute
-
-from Products.Archetypes.atapi import Schema
+from DateTime import DateTime
+from Products.Archetypes.atapi import AnnotationStorage
 from Products.Archetypes.atapi import DateTimeField
+from Products.Archetypes.atapi import DatetimeWidget
 from Products.Archetypes.atapi import LinesField
+from Products.Archetypes.atapi import LinesWidget
+from Products.Archetypes.atapi import RFC822Marshaller
+from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import StringField
+from Products.Archetypes.atapi import StringWidget
 from Products.Archetypes.atapi import TextField
-from Products.Archetypes.atapi import DatetimeWidget
-from Products.Archetypes.atapi import LinesWidget
 from Products.Archetypes.atapi import TinyMCEWidget
-from Products.Archetypes.atapi import StringWidget
-from Products.Archetypes.atapi import RFC822Marshaller
-from Products.Archetypes.atapi import AnnotationStorage
-
-from Products.ATContentTypes.configuration import zconf
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.config import PROJECTNAME
-from Products.ATContentTypes.content.base import registerATCT
+from Products.ATContentTypes.configuration import zconf
 from Products.ATContentTypes.content.base import ATCTContent
+from Products.ATContentTypes.content.base import registerATCT
 from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 from Products.ATContentTypes.content.schemata import finalizeATCTSchema
 from Products.ATContentTypes.interfaces import IATEvent
 from Products.ATContentTypes.lib.calendarsupport import CalendarSupportMixin
 from Products.ATContentTypes.lib.historyaware import HistoryAwareMixin
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFCore.permissions import View
+from zope.interface import implements
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 ATEventSchema = ATContentTypeSchema.copy() + Schema((
     StringField('location',
diff --git a/Products/ATContentTypes/content/favorite.py b/Products/ATContentTypes/content/favorite.py
index 9351266..ef30eff 100644
--- a/Products/ATContentTypes/content/favorite.py
+++ b/Products/ATContentTypes/content/favorite.py
@@ -1,6 +1,7 @@
+from Products.ATContentTypes.content import link
+
 import logging
 
-from Products.ATContentTypes.content import link
 
 logger = logging.getLogger('ATContentTypes')
 logger.log(logging.INFO, 'Warning: You have content instances of the '
diff --git a/Products/ATContentTypes/content/file.py b/Products/ATContentTypes/content/file.py
index 9086e6e..f03fa40 100644
--- a/Products/ATContentTypes/content/file.py
+++ b/Products/ATContentTypes/content/file.py
@@ -1,35 +1,31 @@
-import logging
-from urllib import quote
-
-from zope.interface import implements
-
-from Products.CMFCore.permissions import View
-from Products.CMFCore.permissions import ModifyPortalContent
-from Products.CMFCore.utils import getToolByName
 from AccessControl import ClassSecurityInfo
-
-from Products.Archetypes.atapi import Schema
+from Products.Archetypes.atapi import AnnotationStorage
 from Products.Archetypes.atapi import FileField
 from Products.Archetypes.atapi import FileWidget
 from Products.Archetypes.atapi import PrimaryFieldMarshaller
-from Products.Archetypes.atapi import AnnotationStorage
+from Products.Archetypes.atapi import Schema
 from Products.Archetypes.BaseContent import BaseContent
-from Products.MimetypesRegistry.common import MimeTypeException
-
+from Products.ATContentTypes import ATCTMessageFactory as _
+from Products.ATContentTypes.config import ICONMAP
 from Products.ATContentTypes.config import PROJECTNAME
 from Products.ATContentTypes.configuration import zconf
-from Products.ATContentTypes.config import ICONMAP
-from Products.ATContentTypes.content.base import registerATCT
 from Products.ATContentTypes.content.base import ATCTFileContent
+from Products.ATContentTypes.content.base import registerATCT
 from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 from Products.ATContentTypes.content.schemata import finalizeATCTSchema
 from Products.ATContentTypes.interfaces import IATFile
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFCore.permissions import View
+from Products.CMFCore.utils import getToolByName
+from Products.MimetypesRegistry.common import MimeTypeException
+from Products.validation import V_REQUIRED
+from Products.validation.config import validation
+from Products.validation.validators.SupplValidators import MaxSizeValidator
+from urllib import quote
+from zope.interface import implements
 
-from Products.ATContentTypes import ATCTMessageFactory as _
+import logging
 
-from Products.validation.validators.SupplValidators import MaxSizeValidator
-from Products.validation.config import validation
-from Products.validation import V_REQUIRED
 
 LOG = logging.getLogger('ATCT')
 
diff --git a/Products/ATContentTypes/content/folder.py b/Products/ATContentTypes/content/folder.py
index 7284839..39df6c2 100644
--- a/Products/ATContentTypes/content/folder.py
+++ b/Products/ATContentTypes/content/folder.py
@@ -1,22 +1,19 @@
-from zope.interface import implements
-
 from AccessControl import ClassSecurityInfo
 from OFS.interfaces import IOrderedContainer
-
+from plone.app.folder import folder
 from Products.ATContentTypes.config import PROJECTNAME
-from Products.ATContentTypes.content.base import registerATCT
-from Products.ATContentTypes.content.base import ATCTOrderedFolder
 from Products.ATContentTypes.content.base import ATCTBTreeFolder
-from Products.ATContentTypes.interfaces import IATFolder
-from Products.ATContentTypes.interfaces import IATBTreeFolder
+from Products.ATContentTypes.content.base import ATCTOrderedFolder
+from Products.ATContentTypes.content.base import registerATCT
 from Products.ATContentTypes.content.schemata import ATContentTypeSchema
-from Products.ATContentTypes.content.schemata import NextPreviousAwareSchema
 from Products.ATContentTypes.content.schemata import finalizeATCTSchema
+from Products.ATContentTypes.content.schemata import NextPreviousAwareSchema
+from Products.ATContentTypes.interfaces import IATBTreeFolder
+from Products.ATContentTypes.interfaces import IATFolder
 from Products.ATContentTypes.lib.constraintypes import ConstrainTypesMixinSchema
-
 from Products.CMFCore.permissions import View
+from zope.interface import implements
 
-from plone.app.folder import folder
 
 ATFolderSchema = folder.ATFolderSchema
 ObsoleteATFolderSchema = ATContentTypeSchema.copy() + ConstrainTypesMixinSchema + \
diff --git a/Products/ATContentTypes/content/image.py b/Products/ATContentTypes/content/image.py
index bd05acf..225f3d1 100644
--- a/Products/ATContentTypes/content/image.py
+++ b/Products/ATContentTypes/content/image.py
@@ -1,32 +1,27 @@
-from zope.interface import implements
-
-from Products.CMFCore.permissions import View
-from Products.CMFCore.permissions import ModifyPortalContent
 from AccessControl import ClassSecurityInfo
 from Acquisition import aq_base
 from ComputedAttribute import ComputedAttribute
-
-from Products.Archetypes.atapi import Schema
+from Products.Archetypes.atapi import AnnotationStorage
 from Products.Archetypes.atapi import ImageField
 from Products.Archetypes.atapi import ImageWidget
 from Products.Archetypes.atapi import PrimaryFieldMarshaller
-from Products.Archetypes.atapi import AnnotationStorage
-
+from Products.Archetypes.atapi import Schema
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.config import PROJECTNAME
 from Products.ATContentTypes.configuration import zconf
-from Products.ATContentTypes.content.base import registerATCT
 from Products.ATContentTypes.content.base import ATCTFileContent
+from Products.ATContentTypes.content.base import registerATCT
 from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 from Products.ATContentTypes.content.schemata import finalizeATCTSchema
 from Products.ATContentTypes.interfaces import IATImage
-
 from Products.ATContentTypes.lib.imagetransform import ATCTImageTransform
-
-from Products.ATContentTypes import ATCTMessageFactory as _
-
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFCore.permissions import View
+from Products.validation import V_REQUIRED
 from Products.validation.config import validation
 from Products.validation.validators.SupplValidators import MaxSizeValidator
-from Products.validation import V_REQUIRED
+from zope.interface import implements
+
 
 validation.register(MaxSizeValidator('checkImageMaxSize',
                                      maxsize=zconf.ATImage.max_file_size))
diff --git a/Products/ATContentTypes/content/link.py b/Products/ATContentTypes/content/link.py
index 87f32b4..5ff60b7 100644
--- a/Products/ATContentTypes/content/link.py
+++ b/Products/ATContentTypes/content/link.py
@@ -1,24 +1,21 @@
-import urlparse
-from urllib import quote
-
-from zope.interface import implements
-
-from Products.CMFCore.permissions import View
-from Products.CMFCore.permissions import ModifyPortalContent
 from AccessControl import ClassSecurityInfo
-
 from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import StringField
 from Products.Archetypes.atapi import StringWidget
-
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.config import PROJECTNAME
-from Products.ATContentTypes.content.base import registerATCT
 from Products.ATContentTypes.content.base import ATCTContent
+from Products.ATContentTypes.content.base import registerATCT
 from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 from Products.ATContentTypes.content.schemata import finalizeATCTSchema
 from Products.ATContentTypes.interfaces import IATLink
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFCore.permissions import View
+from urllib import quote
+from zope.interface import implements
+
+import urlparse
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 ATLinkSchema = ATContentTypeSchema.copy() + Schema((
     StringField('remoteUrl',
diff --git a/Products/ATContentTypes/content/newsitem.py b/Products/ATContentTypes/content/newsitem.py
index 7fa298c..6b754df 100644
--- a/Products/ATContentTypes/content/newsitem.py
+++ b/Products/ATContentTypes/content/newsitem.py
@@ -1,17 +1,14 @@
-from zope.interface import implements
-
 from AccessControl import ClassSecurityInfo
-
-from Products.Archetypes.atapi import Schema
+from Products.Archetypes.atapi import AnnotationStorage
 from Products.Archetypes.atapi import ImageField
+from Products.Archetypes.atapi import ImageWidget
+from Products.Archetypes.atapi import RFC822Marshaller
+from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import StringField
+from Products.Archetypes.atapi import StringWidget
 from Products.Archetypes.atapi import TextField
-from Products.Archetypes.atapi import ImageWidget
 from Products.Archetypes.atapi import TinyMCEWidget
-from Products.Archetypes.atapi import StringWidget
-from Products.Archetypes.atapi import RFC822Marshaller
-from Products.Archetypes.atapi import AnnotationStorage
-
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.config import PROJECTNAME
 from Products.ATContentTypes.configuration import zconf
 from Products.ATContentTypes.content.base import registerATCT
@@ -21,14 +18,12 @@
 from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 from Products.ATContentTypes.content.schemata import finalizeATCTSchema
 from Products.ATContentTypes.interfaces import IATNewsItem
-
-from Products.ATContentTypes import ATCTMessageFactory as _
-
 from Products.CMFCore.permissions import View
-
+from Products.validation import V_REQUIRED
 from Products.validation.config import validation
 from Products.validation.validators.SupplValidators import MaxSizeValidator
-from Products.validation import V_REQUIRED
+from zope.interface import implements
+
 
 validation.register(MaxSizeValidator('checkNewsImageMaxSize',
                                      maxsize=zconf.ATNewsItem.max_file_size))
diff --git a/Products/ATContentTypes/content/schemata.py b/Products/ATContentTypes/content/schemata.py
index 79113f4..375b127 100644
--- a/Products/ATContentTypes/content/schemata.py
+++ b/Products/ATContentTypes/content/schemata.py
@@ -1,11 +1,11 @@
 from Products.Archetypes.atapi import BaseSchema
-from Products.Archetypes.atapi import MetadataSchema
-from Products.Archetypes.atapi import ReferenceField
 from Products.Archetypes.atapi import BooleanField
 from Products.Archetypes.atapi import BooleanWidget
+from Products.Archetypes.atapi import MetadataSchema
+from Products.Archetypes.atapi import ReferenceField
+from Products.Archetypes.Widget import RelatedItemsWidget
 from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.CMFCore.permissions import ModifyPortalContent
-from Products.Archetypes.Widget import RelatedItemsWidget
 
 
 # for ATContentTypes we want to have the description in the edit view
diff --git a/Products/ATContentTypes/content/topic.py b/Products/ATContentTypes/content/topic.py
index e346f35..3a31cd5 100644
--- a/Products/ATContentTypes/content/topic.py
+++ b/Products/ATContentTypes/content/topic.py
@@ -1,49 +1,44 @@
-from types import ListType
-from types import TupleType
-from types import StringType
-
-from zope.interface import implements
-
-from ZPublisher.HTTPRequest import HTTPRequest
-from Products.ZCatalog.Lazy import LazyCat
-from Products.CMFCore.permissions import View
-from Products.CMFCore.permissions import AddPortalContent
-from Products.CMFCore.utils import getToolByName
 from AccessControl import ClassSecurityInfo
 from AccessControl import Unauthorized
-from Acquisition import aq_parent
 from Acquisition import aq_inner
-from webdav.Resource import Resource as WebdavResoure
-
-from Products.Archetypes.atapi import Schema
-from Products.Archetypes.atapi import TextField
+from Acquisition import aq_parent
+from Products.Archetypes.atapi import AnnotationStorage
 from Products.Archetypes.atapi import BooleanField
-from Products.Archetypes.atapi import IntegerField
-from Products.Archetypes.atapi import LinesField
 from Products.Archetypes.atapi import BooleanWidget
-from Products.Archetypes.atapi import IntegerWidget
+from Products.Archetypes.atapi import DisplayList
 from Products.Archetypes.atapi import InAndOutWidget
+from Products.Archetypes.atapi import IntegerField
+from Products.Archetypes.atapi import IntegerWidget
+from Products.Archetypes.atapi import LinesField
+from Products.Archetypes.atapi import Schema
+from Products.Archetypes.atapi import TextField
 from Products.Archetypes.atapi import TinyMCEWidget
-from Products.Archetypes.atapi import DisplayList
-from Products.Archetypes.atapi import AnnotationStorage
-
-from Products.ATContentTypes.configuration import zconf
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.config import PROJECTNAME
-from Products.ATContentTypes.content.base import registerATCT
+from Products.ATContentTypes.config import TOOLNAME
+from Products.ATContentTypes.configuration import zconf
 from Products.ATContentTypes.content.base import ATCTFolder
-from Products.ATContentTypes.criteria import _criterionRegistry
-from Products.ATContentTypes.exportimport.content import IDisabledExport
+from Products.ATContentTypes.content.base import registerATCT
 from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 from Products.ATContentTypes.content.schemata import finalizeATCTSchema
+from Products.ATContentTypes.criteria import _criterionRegistry
+from Products.ATContentTypes.exportimport.content import IDisabledExport
 from Products.ATContentTypes.interfaces import IATTopic
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.interfaces import IATTopicSortCriterion
 from Products.ATContentTypes.permission import ChangeTopics
-
-from Products.ATContentTypes.config import TOOLNAME
-
-from Products.ATContentTypes import ATCTMessageFactory as _
+from Products.CMFCore.permissions import AddPortalContent
+from Products.CMFCore.permissions import View
+from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.PloneBatch import Batch
+from Products.ZCatalog.Lazy import LazyCat
+from types import ListType
+from types import StringType
+from types import TupleType
+from webdav.Resource import Resource as WebdavResoure
+from zope.interface import implements
+from ZPublisher.HTTPRequest import HTTPRequest
+
 
 # A couple of fields just don't make sense to sort (for a user),
 # some are just doubles.
diff --git a/Products/ATContentTypes/criteria/base.py b/Products/ATContentTypes/criteria/base.py
index dfd06db..431bf94 100644
--- a/Products/ATContentTypes/criteria/base.py
+++ b/Products/ATContentTypes/criteria/base.py
@@ -1,16 +1,14 @@
-from zope.interface import implements, classImplementsOnly, implementedBy
-
-from Products.Archetypes.atapi import BaseContentMixin
-
-from Products.CMFCore.permissions import View
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
-
+from Products.Archetypes.atapi import BaseContentMixin
 from Products.Archetypes.ClassGen import generateClass
+from Products.Archetypes.interfaces.referenceable import IReferenceable
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
 from Products.ATContentTypes.interfaces import IATTopicCriterion
-
-from Products.Archetypes.interfaces.referenceable import IReferenceable
+from Products.CMFCore.permissions import View
+from zope.interface import classImplementsOnly
+from zope.interface import implementedBy
+from zope.interface import implements
 
 
 class NonRefCatalogContent(BaseContentMixin):
diff --git a/Products/ATContentTypes/criteria/boolean.py b/Products/ATContentTypes/criteria/boolean.py
index a4c7b79..c2bb455 100644
--- a/Products/ATContentTypes/criteria/boolean.py
+++ b/Products/ATContentTypes/criteria/boolean.py
@@ -1,22 +1,18 @@
-from zope.interface import implements
-
-from Missing import MV
-
-from Products.CMFCore.permissions import View
 from AccessControl import ClassSecurityInfo
-
-from Products.Archetypes.atapi import Schema
+from Missing import MV
 from Products.Archetypes.atapi import BooleanField
 from Products.Archetypes.atapi import BooleanWidget
-
-from Products.ATContentTypes.criteria import registerCriterion
+from Products.Archetypes.atapi import Schema
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.criteria import FIELD_INDICES
+from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
+from Products.CMFCore.permissions import View
+from zope.interface import implements
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 ATBooleanCriterionSchema = ATBaseCriterionSchema + Schema((
     BooleanField('bool',
diff --git a/Products/ATContentTypes/criteria/currentauthor.py b/Products/ATContentTypes/criteria/currentauthor.py
index 85d549d..1169941 100644
--- a/Products/ATContentTypes/criteria/currentauthor.py
+++ b/Products/ATContentTypes/criteria/currentauthor.py
@@ -1,14 +1,13 @@
-from zope.interface import implements
-
-from Products.CMFCore.permissions import View
-from Products.CMFCore.utils import getToolByName
 from AccessControl import ClassSecurityInfo
-
-from Products.ATContentTypes.criteria import registerCriterion, \
-    LIST_INDICES
+from Products.ATContentTypes.criteria import LIST_INDICES
+from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
+from Products.CMFCore.permissions import View
+from Products.CMFCore.utils import getToolByName
+from zope.interface import implements
+
 
 ATCurrentAuthorSchema = ATBaseCriterionSchema
 
diff --git a/Products/ATContentTypes/criteria/date.py b/Products/ATContentTypes/criteria/date.py
index 6ac4943..014ecbd 100644
--- a/Products/ATContentTypes/criteria/date.py
+++ b/Products/ATContentTypes/criteria/date.py
@@ -1,24 +1,21 @@
-from zope.interface import implements
-
-from DateTime import DateTime
-from Products.CMFCore.permissions import View
 from AccessControl import ClassSecurityInfo
-
-from Products.Archetypes.atapi import Schema
-from Products.Archetypes.atapi import IntegerField
-from Products.Archetypes.atapi import StringField
-from Products.Archetypes.atapi import SelectionWidget
+from DateTime import DateTime
 from Products.Archetypes.atapi import DisplayList
 from Products.Archetypes.atapi import IntDisplayList
-
-from Products.ATContentTypes.criteria import registerCriterion
+from Products.Archetypes.atapi import IntegerField
+from Products.Archetypes.atapi import Schema
+from Products.Archetypes.atapi import SelectionWidget
+from Products.Archetypes.atapi import StringField
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.criteria import DATE_INDICES
+from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
+from Products.CMFCore.permissions import View
+from zope.interface import implements
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 DateOptions = IntDisplayList((
     (0, _(u'Now')),
diff --git a/Products/ATContentTypes/criteria/daterange.py b/Products/ATContentTypes/criteria/daterange.py
index ed1e6b5..e3762f9 100644
--- a/Products/ATContentTypes/criteria/daterange.py
+++ b/Products/ATContentTypes/criteria/daterange.py
@@ -1,20 +1,17 @@
-from zope.interface import implements
-
-from Products.CMFCore.permissions import View
 from AccessControl import ClassSecurityInfo
-
-from Products.Archetypes.atapi import Schema
-from Products.Archetypes.atapi import DateTimeField
 from Products.Archetypes.atapi import CalendarWidget
-
-from Products.ATContentTypes.criteria import registerCriterion
+from Products.Archetypes.atapi import DateTimeField
+from Products.Archetypes.atapi import Schema
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.criteria import DATE_INDICES
+from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
+from Products.CMFCore.permissions import View
+from zope.interface import implements
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 RELEVANT_INDICES = list(DATE_INDICES)
 RELEVANT_INDICES.remove('DateRangeIndex')
diff --git a/Products/ATContentTypes/criteria/list.py b/Products/ATContentTypes/criteria/list.py
index 12b3362..36dddc9 100644
--- a/Products/ATContentTypes/criteria/list.py
+++ b/Products/ATContentTypes/criteria/list.py
@@ -1,23 +1,20 @@
-from zope.interface import implements
-
-from Products.CMFCore.permissions import View
 from AccessControl import ClassSecurityInfo
-
-from Products.Archetypes.atapi import Schema
+from Products.Archetypes.atapi import DisplayList
 from Products.Archetypes.atapi import LinesField
-from Products.Archetypes.atapi import StringField
-from Products.Archetypes.atapi import SelectionWidget
 from Products.Archetypes.atapi import LinesWidget
-from Products.Archetypes.atapi import DisplayList
-
-from Products.ATContentTypes.criteria import registerCriterion
+from Products.Archetypes.atapi import Schema
+from Products.Archetypes.atapi import SelectionWidget
+from Products.Archetypes.atapi import StringField
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.criteria import LIST_INDICES
+from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
+from Products.CMFCore.permissions import View
+from zope.interface import implements
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 CompareOperators = DisplayList((
     ('and', _(u'and')),
diff --git a/Products/ATContentTypes/criteria/path.py b/Products/ATContentTypes/criteria/path.py
index 7ba5b55..b72ed86 100644
--- a/Products/ATContentTypes/criteria/path.py
+++ b/Products/ATContentTypes/criteria/path.py
@@ -1,24 +1,20 @@
-from zope.interface import implements
-
-from Products.CMFCore.permissions import View
 from AccessControl import ClassSecurityInfo
-
-from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import BooleanField
 from Products.Archetypes.atapi import BooleanWidget
 from Products.Archetypes.atapi import ReferenceField
+from Products.Archetypes.atapi import Schema
 from Products.Archetypes.Referenceable import Referenceable
-
-from Products.ATContentTypes.criteria import registerCriterion
+from Products.Archetypes.Widget import RelatedItemsWidget
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.criteria import PATH_INDICES
+from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
+from Products.CMFCore.permissions import View
+from zope.interface import implements
 
-from Products.Archetypes.Widget import RelatedItemsWidget
-
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 ATPathCriterionSchema = ATBaseCriterionSchema + Schema((
     ReferenceField('value',
diff --git a/Products/ATContentTypes/criteria/portaltype.py b/Products/ATContentTypes/criteria/portaltype.py
index 2fc6a13..7a0ae45 100644
--- a/Products/ATContentTypes/criteria/portaltype.py
+++ b/Products/ATContentTypes/criteria/portaltype.py
@@ -1,17 +1,16 @@
-from zope.component import queryUtility
-from zope.interface import implements
-from zope.schema.interfaces import IVocabularyFactory
-
 from AccessControl import ClassSecurityInfo
 from Products.Archetypes.atapi import DisplayList
-from Products.CMFCore.permissions import View
-from Products.CMFCore.utils import getToolByName
-from Products.ATContentTypes.criteria import registerCriterion
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.criteria import FIELD_INDICES
+from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria.selection import ATSelectionCriterion
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
+from Products.CMFCore.permissions import View
+from Products.CMFCore.utils import getToolByName
+from zope.component import queryUtility
+from zope.interface import implements
+from zope.schema.interfaces import IVocabularyFactory
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 ATPortalTypeCriterionSchema = ATSelectionCriterion.schema.copy()
 # and/or operator makes no sense for type selection, as no item can ever be
diff --git a/Products/ATContentTypes/criteria/reference.py b/Products/ATContentTypes/criteria/reference.py
index 93fc999..1a7e705 100644
--- a/Products/ATContentTypes/criteria/reference.py
+++ b/Products/ATContentTypes/criteria/reference.py
@@ -1,13 +1,12 @@
-from zope.interface import implements
-
-from Products.CMFCore.utils import getToolByName
 from AccessControl import ClassSecurityInfo
-
-from Products.ATContentTypes.criteria import registerCriterion
+from Products.Archetypes.atapi import DisplayList
 from Products.ATContentTypes.criteria import REFERENCE_INDICES
+from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria.selection import ATSelectionCriterion
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
-from Products.Archetypes.atapi import DisplayList
+from Products.CMFCore.utils import getToolByName
+from zope.interface import implements
+
 
 ATReferenceCriterionSchema = ATSelectionCriterion.schema
 
diff --git a/Products/ATContentTypes/criteria/relativepath.py b/Products/ATContentTypes/criteria/relativepath.py
index 07030aa..75f3aa2 100644
--- a/Products/ATContentTypes/criteria/relativepath.py
+++ b/Products/ATContentTypes/criteria/relativepath.py
@@ -1,22 +1,20 @@
-from zope.interface import implements
-
-from Products.CMFCore.permissions import View
 from AccessControl import ClassSecurityInfo
 from Acquisition import aq_parent
-
+from Products.Archetypes.atapi import BooleanField
+from Products.Archetypes.atapi import BooleanWidget
 from Products.Archetypes.atapi import Schema
-from Products.Archetypes.atapi import BooleanField, StringField
-from Products.Archetypes.atapi import BooleanWidget, StringWidget
-
-from Products.ATContentTypes.criteria import registerCriterion
+from Products.Archetypes.atapi import StringField
+from Products.Archetypes.atapi import StringWidget
 from Products.ATContentTypes.criteria import PATH_INDICES
+from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
-
-
+from Products.CMFCore.permissions import View
 from Products.CMFCore.utils import getToolByName
+from zope.interface import implements
+
 
 ATRelativePathCriterionSchema = ATBaseCriterionSchema + Schema((
     StringField('relativePath',
diff --git a/Products/ATContentTypes/criteria/schemata.py b/Products/ATContentTypes/criteria/schemata.py
index 3ce31ec..50d5eaa 100644
--- a/Products/ATContentTypes/criteria/schemata.py
+++ b/Products/ATContentTypes/criteria/schemata.py
@@ -1,10 +1,10 @@
+from Products.Archetypes.atapi import IdWidget
 from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import StringField
-from Products.Archetypes.atapi import IdWidget
 from Products.Archetypes.atapi import StringWidget
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.permission import ChangeTopics
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 ###
 # AT Base Criterion
diff --git a/Products/ATContentTypes/criteria/selection.py b/Products/ATContentTypes/criteria/selection.py
index d6d5319..07d4643 100644
--- a/Products/ATContentTypes/criteria/selection.py
+++ b/Products/ATContentTypes/criteria/selection.py
@@ -1,24 +1,21 @@
-from zope.interface import implements
-
-from Products.CMFCore.permissions import View
-from Products.CMFCore.utils import getToolByName
 from AccessControl import ClassSecurityInfo
-
-from Products.Archetypes.atapi import Schema
+from Products.Archetypes.atapi import DisplayList
 from Products.Archetypes.atapi import LinesField
 from Products.Archetypes.atapi import MultiSelectionWidget
-from Products.Archetypes.atapi import StringField
+from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import SelectionWidget
-from Products.Archetypes.atapi import DisplayList
-
-from Products.ATContentTypes.criteria import registerCriterion
+from Products.Archetypes.atapi import StringField
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.criteria import LIST_INDICES
-from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
-from Products.ATContentTypes.permission import ChangeTopics
+from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
+from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
+from Products.ATContentTypes.permission import ChangeTopics
+from Products.CMFCore.permissions import View
+from Products.CMFCore.utils import getToolByName
+from zope.interface import implements
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 CompareOperators = DisplayList((
     ('and', _(u'and')),
diff --git a/Products/ATContentTypes/criteria/simpleint.py b/Products/ATContentTypes/criteria/simpleint.py
index 090b8f6..99e3445 100644
--- a/Products/ATContentTypes/criteria/simpleint.py
+++ b/Products/ATContentTypes/criteria/simpleint.py
@@ -1,23 +1,20 @@
-from zope.interface import implements
-
-from Products.CMFCore.permissions import View
 from AccessControl import ClassSecurityInfo
-
-from Products.Archetypes.atapi import Schema
+from Products.Archetypes.atapi import DisplayList
 from Products.Archetypes.atapi import IntegerField
 from Products.Archetypes.atapi import IntegerWidget
-from Products.Archetypes.atapi import StringField
+from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import SelectionWidget
-from Products.Archetypes.atapi import DisplayList
-
-from Products.ATContentTypes.criteria import registerCriterion
+from Products.Archetypes.atapi import StringField
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.criteria import LIST_INDICES
-from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
-from Products.ATContentTypes.permission import ChangeTopics
+from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
+from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
+from Products.ATContentTypes.permission import ChangeTopics
+from Products.CMFCore.permissions import View
+from zope.interface import implements
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 DirectionOperations = DisplayList((
     ('', _(u'Equal to')),
diff --git a/Products/ATContentTypes/criteria/simplestring.py b/Products/ATContentTypes/criteria/simplestring.py
index fa2dcbc..34c7ad5 100644
--- a/Products/ATContentTypes/criteria/simplestring.py
+++ b/Products/ATContentTypes/criteria/simplestring.py
@@ -1,21 +1,17 @@
-from zope.interface import implements
-
-from Products.CMFCore.permissions import View
 from AccessControl import ClassSecurityInfo
-
 from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import StringField
 from Products.Archetypes.atapi import StringWidget
-
-from Products.ATContentTypes.criteria import registerCriterion, \
-    STRING_INDICES
-from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
-
-from Products.ATContentTypes.permission import ChangeTopics
+from Products.ATContentTypes import ATCTMessageFactory as _
+from Products.ATContentTypes.criteria import registerCriterion
+from Products.ATContentTypes.criteria import STRING_INDICES
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
+from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
+from Products.ATContentTypes.permission import ChangeTopics
+from Products.CMFCore.permissions import View
+from zope.interface import implements
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 ATSimpleStringCriterionSchema = ATBaseCriterionSchema + Schema((
     StringField('value',
diff --git a/Products/ATContentTypes/criteria/sort.py b/Products/ATContentTypes/criteria/sort.py
index 69da318..827567a 100644
--- a/Products/ATContentTypes/criteria/sort.py
+++ b/Products/ATContentTypes/criteria/sort.py
@@ -1,19 +1,17 @@
-from Products.CMFCore.permissions import View
 from AccessControl import ClassSecurityInfo
-from zope.interface import implements
-
-from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import BooleanField
 from Products.Archetypes.atapi import BooleanWidget
-
+from Products.Archetypes.atapi import Schema
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria import SORT_INDICES
-from Products.ATContentTypes.interfaces import IATTopicSortCriterion
-from Products.ATContentTypes.permission import ChangeTopics
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
+from Products.ATContentTypes.interfaces import IATTopicSortCriterion
+from Products.ATContentTypes.permission import ChangeTopics
+from Products.CMFCore.permissions import View
+from zope.interface import implements
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 ATSortCriterionSchema = ATBaseCriterionSchema + Schema((
     BooleanField('reversed',
diff --git a/Products/ATContentTypes/exportimport/atcttool.py b/Products/ATContentTypes/exportimport/atcttool.py
index 94c0934..b45e894 100644
--- a/Products/ATContentTypes/exportimport/atcttool.py
+++ b/Products/ATContentTypes/exportimport/atcttool.py
@@ -1,9 +1,9 @@
 from Products.ATContentTypes.interfaces import IATCTTool
-from Products.GenericSetup.utils import PropertyManagerHelpers
-from Products.GenericSetup.utils import XMLAdapterBase
+from Products.CMFCore.utils import getToolByName
 from Products.GenericSetup.utils import exportObjects
 from Products.GenericSetup.utils import importObjects
-from Products.CMFCore.utils import getToolByName
+from Products.GenericSetup.utils import PropertyManagerHelpers
+from Products.GenericSetup.utils import XMLAdapterBase
 
 
 def safeGetAttribute(node, attribute):
diff --git a/Products/ATContentTypes/exportimport/content.py b/Products/ATContentTypes/exportimport/content.py
index 57fb7cb..189ee55 100644
--- a/Products/ATContentTypes/exportimport/content.py
+++ b/Products/ATContentTypes/exportimport/content.py
@@ -1,7 +1,7 @@
+from Products.GenericSetup.interfaces import IFilesystemExporter
 from zope.interface import implements
 from zope.interface import Interface
 
-from Products.GenericSetup.interfaces import IFilesystemExporter
 
 # TODO: This is a temporary hack to allow disabling exporting of some
 # content types until all of them support proper exporting
diff --git a/Products/ATContentTypes/exportimport/factorytool.py b/Products/ATContentTypes/exportimport/factorytool.py
index c398bc8..d7af09d 100644
--- a/Products/ATContentTypes/exportimport/factorytool.py
+++ b/Products/ATContentTypes/exportimport/factorytool.py
@@ -1,8 +1,8 @@
 from Products.ATContentTypes.interfaces import IFactoryTool
-from Products.GenericSetup.utils import XMLAdapterBase
-from Products.GenericSetup.utils import importObjects
-from Products.GenericSetup.utils import exportObjects
 from Products.CMFCore.utils import getToolByName
+from Products.GenericSetup.utils import exportObjects
+from Products.GenericSetup.utils import importObjects
+from Products.GenericSetup.utils import XMLAdapterBase
 
 
 class PortalFactoryXMLAdapter(XMLAdapterBase):
diff --git a/Products/ATContentTypes/exportimport/tests/test_factory_tool.py b/Products/ATContentTypes/exportimport/tests/test_factory_tool.py
index 7233033..d8be152 100644
--- a/Products/ATContentTypes/exportimport/tests/test_factory_tool.py
+++ b/Products/ATContentTypes/exportimport/tests/test_factory_tool.py
@@ -1,7 +1,7 @@
 from OFS.Folder import Folder
 from Products.CMFPlone.exportimport.tests.base import BodyAdapterTestCase
-from zope.component import provideUtility
 from zope.component import provideAdapter
+from zope.component import provideUtility
 
 
 _FACTORYTOOL_XML = """\
diff --git a/Products/ATContentTypes/factories.py b/Products/ATContentTypes/factories.py
index 5a87e34..f985875 100644
--- a/Products/ATContentTypes/factories.py
+++ b/Products/ATContentTypes/factories.py
@@ -1,20 +1,19 @@
-import transaction
+from plone.i18n.normalizer.interfaces import IFileNameNormalizer
+from Products.Archetypes.event import ObjectInitializedEvent
+from Products.Archetypes.interfaces import IATCTFileFactory
+from Products.CMFCore.interfaces._content import IFolderish
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone import utils as ploneutils
 from thread import allocate_lock
-
-from zope.component import getUtility
 from zope.component import adapts
+from zope.component import getUtility
 from zope.container.interfaces import INameChooser
-from zope.lifecycleevent import ObjectModifiedEvent
 from zope.event import notify
 from zope.interface import implements
+from zope.lifecycleevent import ObjectModifiedEvent
 
-from Products.Archetypes.event import ObjectInitializedEvent
-from Products.Archetypes.interfaces import IATCTFileFactory
-from Products.CMFCore.utils import getToolByName
-from Products.CMFCore.interfaces._content import IFolderish
-from Products.CMFPlone import utils as ploneutils
+import transaction
 
-from plone.i18n.normalizer.interfaces import IFileNameNormalizer
 
 upload_lock = allocate_lock()
 
diff --git a/Products/ATContentTypes/interface.py b/Products/ATContentTypes/interface.py
index 12ffa0c..01155e0 100644
--- a/Products/ATContentTypes/interface.py
+++ b/Products/ATContentTypes/interface.py
@@ -4,19 +4,20 @@
 the conventional name, though.
 """
 
-from Products.ATContentTypes.interfaces import *
-
-# the following is a rather crude workaround for the failing imports
-# seen in plone 4 when trying to import submodules from `ATCT.interface`:
-#   >>> import Products.ATContentTypes.interface.interfaces
-#   Traceback (most recent call last):
 #     File "<stdin>", line 1, in <module>
+#   >>> import Products.ATContentTypes.interface.interfaces
 #   ImportError: No module named interfaces
+#   Traceback (most recent call last):
+# again.  to work around we inject them manually...
 # apparently the modules imported from `interfaces` above are already
+# seen in plone 4 when trying to import submodules from `ATCT.interface`:
 # somehow known to the interpreter and therefore not added to `sys.modules`
-# again.  to work around we inject them manually...
-from types import ModuleType
+# the following is a rather crude workaround for the failing imports
+from Products.ATContentTypes.interfaces import *
 from sys import modules
+from types import ModuleType
+
+
 for name, obj in globals().items():
     if isinstance(obj, ModuleType):
         modules['%s.%s' % (__name__, name)] = obj
diff --git a/Products/ATContentTypes/interfaces/factory.py b/Products/ATContentTypes/interfaces/factory.py
index 2b369ac..327ed01 100644
--- a/Products/ATContentTypes/interfaces/factory.py
+++ b/Products/ATContentTypes/interfaces/factory.py
@@ -1,4 +1,5 @@
-from zope.interface import Attribute, Interface
+from zope.interface import Attribute
+from zope.interface import Interface
 
 
 class IFactoryTool(Interface):
diff --git a/Products/ATContentTypes/interfaces/folder.py b/Products/ATContentTypes/interfaces/folder.py
index 1ebd264..73b1fcc 100644
--- a/Products/ATContentTypes/interfaces/folder.py
+++ b/Products/ATContentTypes/interfaces/folder.py
@@ -1,5 +1,7 @@
-from zope.interface import Interface
 from Products.ATContentTypes.interfaces.interfaces import IATContentType
+from zope.interface import Interface
+
+
 try:
     from Products.CMFPlone.interfaces.syndication import ISyndicatable
 except ImportError:
diff --git a/Products/ATContentTypes/interfaces/interfaces.py b/Products/ATContentTypes/interfaces/interfaces.py
index 5188986..0181818 100644
--- a/Products/ATContentTypes/interfaces/interfaces.py
+++ b/Products/ATContentTypes/interfaces/interfaces.py
@@ -1,11 +1,10 @@
-from zope.interface import Interface
-from zope.interface import Attribute
-
+from Products.Archetypes.interfaces import IATHistoryAware
 from Products.Archetypes.interfaces import IBaseContent
 from Products.Archetypes.interfaces import IBaseFolder
 from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault
-from Products.Archetypes.interfaces import IATHistoryAware
 from Products.CMFPlone.interfaces import ISelectableConstrainTypes
+from zope.interface import Attribute
+from zope.interface import Interface
 
 
 class IATContentType(ISelectableBrowserDefault, IBaseContent):
diff --git a/Products/ATContentTypes/interfaces/topic.py b/Products/ATContentTypes/interfaces/topic.py
index b0c3321..6207bf7 100644
--- a/Products/ATContentTypes/interfaces/topic.py
+++ b/Products/ATContentTypes/interfaces/topic.py
@@ -1,5 +1,7 @@
 from Products.ATContentTypes.interfaces.interfaces import IATContentType
 from zope.interface import Interface
+
+
 try:
     from Products.CMFPlone.interfaces.syndication import ISyndicatable
 except ImportError:
diff --git a/Products/ATContentTypes/lib/calendarsupport.py b/Products/ATContentTypes/lib/calendarsupport.py
index 093c245..140ef1c 100644
--- a/Products/ATContentTypes/lib/calendarsupport.py
+++ b/Products/ATContentTypes/lib/calendarsupport.py
@@ -1,13 +1,11 @@
+from AccessControl import ClassSecurityInfo
+from App.class_init import InitializeClass
 from cStringIO import StringIO
-from zope.interface import implements
-
 from DateTime import DateTime
-from App.class_init import InitializeClass
-
+from Products.ATContentTypes.interfaces import ICalendarSupport
 from Products.CMFCore.permissions import View
-from AccessControl import ClassSecurityInfo
+from zope.interface import implements
 
-from Products.ATContentTypes.interfaces import ICalendarSupport
 
 PRODID = "-//AT Content Types//AT Event//EN"
 
diff --git a/Products/ATContentTypes/lib/constraintypes.py b/Products/ATContentTypes/lib/constraintypes.py
index 06c8d91..caecf91 100644
--- a/Products/ATContentTypes/lib/constraintypes.py
+++ b/Products/ATContentTypes/lib/constraintypes.py
@@ -1,28 +1,24 @@
-from zope.interface import implements
-
 from AccessControl import ClassSecurityInfo
-from App.class_init import InitializeClass
-from Acquisition import aq_parent
 from Acquisition import aq_inner
-
-from Products.CMFCore.utils import getToolByName
-from Products.CMFCore.permissions import View
-from Products.CMFCore.permissions import ModifyPortalContent
-from Products.CMFCore.permissions import AddPortalContent
-from Products.CMFCore.PortalFolder import PortalFolderBase as PortalFolder
-
-from Products.Archetypes.atapi import Schema
-from Products.Archetypes.atapi import LinesField
+from Acquisition import aq_parent
+from App.class_init import InitializeClass
+from Products.Archetypes.atapi import DisplayList
+from Products.Archetypes.atapi import IntDisplayList
 from Products.Archetypes.atapi import IntegerField
+from Products.Archetypes.atapi import LinesField
 from Products.Archetypes.atapi import MultiSelectionWidget
+from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import SelectionWidget
-from Products.Archetypes.atapi import IntDisplayList
-from Products.Archetypes.atapi import DisplayList
-
 from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes import permission as ATCTPermissions
-
 from Products.ATContentTypes.interfaces import ISelectableConstrainTypes
+from Products.CMFCore.permissions import AddPortalContent
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFCore.permissions import View
+from Products.CMFCore.PortalFolder import PortalFolderBase as PortalFolder
+from Products.CMFCore.utils import getToolByName
+from zope.interface import implements
+
 
 # constants for enableConstrainMixin
 ACQUIRE = -1  # acquire locallyAllowedTypes from parent (default)
diff --git a/Products/ATContentTypes/lib/historyaware.py b/Products/ATContentTypes/lib/historyaware.py
index 2a2fdc9..c7d3362 100644
--- a/Products/ATContentTypes/lib/historyaware.py
+++ b/Products/ATContentTypes/lib/historyaware.py
@@ -1,17 +1,14 @@
-import difflib
-
-from zope.interface import implements
-
-from DocumentTemplate.DT_Util import html_quote
-from App.class_init import InitializeClass
-
-from Products.CMFCore.utils import getToolByName
-from Products.CMFCore.permissions import View
 from AccessControl import ClassSecurityInfo
-
+from App.class_init import InitializeClass
+from DocumentTemplate.DT_Util import html_quote
 from Products.Archetypes.atapi import ATHistoryAwareMixin
 from Products.ATContentTypes import permission as ATCTPermissions
 from Products.ATContentTypes.interfaces import IHistoryAware
+from Products.CMFCore.permissions import View
+from Products.CMFCore.utils import getToolByName
+from zope.interface import implements
+
+import difflib
 
 
 class HistoryAwareMixin(ATHistoryAwareMixin):
diff --git a/Products/ATContentTypes/lib/imagetransform.py b/Products/ATContentTypes/lib/imagetransform.py
index 41168cb..6089107 100644
--- a/Products/ATContentTypes/lib/imagetransform.py
+++ b/Products/ATContentTypes/lib/imagetransform.py
@@ -1,21 +1,20 @@
-import logging
-from cStringIO import StringIO
-
-from Products.CMFCore.permissions import View
-from Products.CMFCore.permissions import ModifyPortalContent
 from AccessControl import ClassSecurityInfo
-from ExtensionClass import Base
-from DateTime import DateTime
 from App.class_init import InitializeClass
+from cStringIO import StringIO
+from DateTime import DateTime
+from ExtensionClass import Base
 from OFS.Image import Image as OFSImage
 from OFS.Image import Pdata
-
-from Products.ATContentTypes.configuration import zconf
-from Products.ATContentTypes.config import HAS_PIL
 from Products.ATContentTypes import ATCTMessageFactory as _
+from Products.ATContentTypes.config import HAS_PIL
+from Products.ATContentTypes.configuration import zconf
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFCore.permissions import View
 
 # third party extension
 import exif
+import logging
+
 
 # the following code is based on the rotation code of Photo
 if HAS_PIL:
diff --git a/Products/ATContentTypes/lib/validators.py b/Products/ATContentTypes/lib/validators.py
index 047743c..4b62d45 100644
--- a/Products/ATContentTypes/lib/validators.py
+++ b/Products/ATContentTypes/lib/validators.py
@@ -1,25 +1,25 @@
-from types import FileType
 from Acquisition import aq_base
-
 from Products.ATContentTypes.config import HAS_MX_TIDY
 from Products.ATContentTypes.config import MX_TIDY_ENABLED
 from Products.ATContentTypes.config import MX_TIDY_MIMETYPES
 from Products.ATContentTypes.config import MX_TIDY_OPTIONS
-
+from Products.PageTemplates.Expressions import getEngine
 from Products.validation.config import validation
 from Products.validation.interfaces.IValidator import IValidator
+from types import FileType
+from zope.interface import implements
+from zope.tal.htmltalparser import HTMLTALParser
+from zope.tal.talgenerator import TALGenerator
+from ZPublisher.HTTPRequest import FileUpload
 
-import re
 import encodings
 import logging
+import re
+
+
 logger = logging.getLogger('ATCT')
 
-from ZPublisher.HTTPRequest import FileUpload
 
-from zope.tal.htmltalparser import HTMLTALParser
-from zope.tal.talgenerator import TALGenerator
-from Products.PageTemplates.Expressions import getEngine
-from zope.interface import implements
 
 if HAS_MX_TIDY:
     from mx.Tidy import tidy as mx_tidy
diff --git a/Products/ATContentTypes/permission.py b/Products/ATContentTypes/permission.py
index 9fbfd66..aae1290 100644
--- a/Products/ATContentTypes/permission.py
+++ b/Products/ATContentTypes/permission.py
@@ -1,12 +1,12 @@
-from Products.CMFCore.permissions import setDefaultRoles
+from plone.app.widgets.interfaces import IFieldPermissionChecker
 from Products.Archetypes.atapi import listTypes
+from Products.Archetypes.interfaces import IBaseObject
 from Products.ATContentTypes.config import PROJECTNAME
 from Products.ATContentTypes.interfaces import IATTopic
 from Products.ATContentTypes.interfaces import IATTopicCriterion
-from Products.Archetypes.interfaces import IBaseObject
-from plone.app.widgets.interfaces import IFieldPermissionChecker
-from zope.interface import implements
+from Products.CMFCore.permissions import setDefaultRoles
 from zope.component import adapts
+from zope.interface import implements
 
 
 TYPE_ROLES = ('Manager', 'Site Administrator', 'Owner')
diff --git a/Products/ATContentTypes/setuphandlers.py b/Products/ATContentTypes/setuphandlers.py
index f9729eb..3ea70a3 100644
--- a/Products/ATContentTypes/setuphandlers.py
+++ b/Products/ATContentTypes/setuphandlers.py
@@ -1,19 +1,18 @@
 from Acquisition import aq_base
-from Products.ATContentTypes.lib import constraintypes
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.utils import bodyfinder
-from Products.CMFPlone.utils import _createObjectByType
 from plone.i18n.normalizer.interfaces import IURLNormalizer
 from plone.portlets.interfaces import ILocalPortletAssignmentManager
 from plone.portlets.interfaces import IPortletManager
+from plone.registry.interfaces import IRegistry
+from Products.ATContentTypes.lib import constraintypes
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces import ILanguageSchema
+from Products.CMFPlone.utils import _createObjectByType
+from Products.CMFPlone.utils import bodyfinder
+from zope.component import getUtility
 from zope.component import queryMultiAdapter
 from zope.component import queryUtility
 from zope.i18n.interfaces import ITranslationDomain
 from zope.i18n.locales import locales
-from plone.registry.interfaces import IRegistry
-from zope.component import getUtility
-
-from Products.CMFPlone.interfaces import ILanguageSchema
 
 
 def assignTitles(portal):
diff --git a/Products/ATContentTypes/skins/ATContentTypes/formatCatalogMetadata.py b/Products/ATContentTypes/skins/ATContentTypes/formatCatalogMetadata.py
index 585a25c..c62ac62 100644
--- a/Products/ATContentTypes/skins/ATContentTypes/formatCatalogMetadata.py
+++ b/Products/ATContentTypes/skins/ATContentTypes/formatCatalogMetadata.py
@@ -6,9 +6,10 @@
 ##bind subpath=traverse_subpath
 ##parameters=value,long_format=True
 ##title=Determine whether the input is a DateTime or ISO date and localize it if so, also convert lists and dicts into reasonable strings.
+from AccessControl import Unauthorized
 from DateTime import DateTime
 from ZODB.POSException import ConflictError
-from AccessControl import Unauthorized
+
 
 if value is None:
     return ''
diff --git a/Products/ATContentTypes/skins/ATContentTypes/link_redirect_view.py b/Products/ATContentTypes/skins/ATContentTypes/link_redirect_view.py
index 0cc5a54..7b73598 100644
--- a/Products/ATContentTypes/skins/ATContentTypes/link_redirect_view.py
+++ b/Products/ATContentTypes/skins/ATContentTypes/link_redirect_view.py
@@ -14,6 +14,7 @@
 
 from Products.CMFCore.utils import getToolByName
 
+
 mtool = getToolByName(context, 'portal_membership')
 
 redirect_links = context.portal_registry['plone.redirect_links']
diff --git a/Products/ATContentTypes/tests/atctftestcase.py b/Products/ATContentTypes/tests/atctftestcase.py
index 0c2d952..48ba19f 100644
--- a/Products/ATContentTypes/tests/atctftestcase.py
+++ b/Products/ATContentTypes/tests/atctftestcase.py
@@ -8,6 +8,7 @@
 from Products.ATContentTypes.config import HAS_LINGUA_PLONE
 from Products.ATContentTypes.tests import atcttestcase
 from zope.component import getUtility
+
 import hmac
 
 
diff --git a/Products/ATContentTypes/tests/atcttestcase.py b/Products/ATContentTypes/tests/atcttestcase.py
index 6f3fc94..70941f7 100644
--- a/Products/ATContentTypes/tests/atcttestcase.py
+++ b/Products/ATContentTypes/tests/atcttestcase.py
@@ -25,8 +25,10 @@
 from Products.CMFCore.utils import getToolByName
 from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault
 from zope.interface.verify import verifyObject
+
 import os
 
+
 test_home = os.path.dirname(__file__)
 
 
diff --git a/Products/ATContentTypes/tests/testContentTypes.py b/Products/ATContentTypes/tests/testContentTypes.py
index 78343cc..bf91d7e 100644
--- a/Products/ATContentTypes/tests/testContentTypes.py
+++ b/Products/ATContentTypes/tests/testContentTypes.py
@@ -3,6 +3,7 @@
 from Products.CMFPlone.tests import dummy
 from zope.i18nmessageid.message import Message
 
+
 AddPortalTopics = 'Add portal topics'
 
 atct_types = ('Document', 'Event', 'File', 'Folder',
diff --git a/Products/ATContentTypes/tests/test_atdocument.py b/Products/ATContentTypes/tests/test_atdocument.py
index a3b0e1b..c99c6fd 100644
--- a/Products/ATContentTypes/tests/test_atdocument.py
+++ b/Products/ATContentTypes/tests/test_atdocument.py
@@ -7,7 +7,8 @@
 from Products.ATContentTypes.interfaces import IHistoryAware
 from Products.ATContentTypes.interfaces import ITextContent
 from Products.ATContentTypes.lib.validators import TidyHtmlWithCleanupValidator
-from Products.ATContentTypes.tests import atcttestcase, atctftestcase
+from Products.ATContentTypes.tests import atctftestcase
+from Products.ATContentTypes.tests import atcttestcase
 from Products.ATContentTypes.tests.utils import dcEdit
 from Products.ATContentTypes.tests.utils import input_file_path
 from Products.ATContentTypes.tests.utils import NotRequiredTidyHTMLValidator
@@ -15,8 +16,10 @@
 from Products.CMFCore.permissions import View
 from zope.interface.verify import verifyObject
 from ZPublisher.HTTPRequest import FileUpload
+
 import transaction
 
+
 example_stx = """
 Header
 
diff --git a/Products/ATContentTypes/tests/test_atevent.py b/Products/ATContentTypes/tests/test_atevent.py
index fcab35e..ca5341e 100644
--- a/Products/ATContentTypes/tests/test_atevent.py
+++ b/Products/ATContentTypes/tests/test_atevent.py
@@ -4,7 +4,8 @@
 from Products.ATContentTypes.content.event import ATEvent
 from Products.ATContentTypes.interfaces import IATEvent
 from Products.ATContentTypes.interfaces import ICalendarSupport
-from Products.ATContentTypes.tests import atcttestcase, atctftestcase
+from Products.ATContentTypes.tests import atctftestcase
+from Products.ATContentTypes.tests import atcttestcase
 from Products.ATContentTypes.tests.utils import dcEdit
 from Products.ATContentTypes.tests.utils import EmailValidator
 from Products.ATContentTypes.tests.utils import EmptyValidator
@@ -14,8 +15,10 @@
 from Products.CMFCore.permissions import View
 from Testing import ZopeTestCase  # side effect import. leave it here.
 from zope.interface.verify import verifyObject
+
 import unittest
 
+
 ZopeTestCase  # pyflakes
 
 
diff --git a/Products/ATContentTypes/tests/test_atfile.py b/Products/ATContentTypes/tests/test_atfile.py
index 60cd146..d9f9c40 100644
--- a/Products/ATContentTypes/tests/test_atfile.py
+++ b/Products/ATContentTypes/tests/test_atfile.py
@@ -1,22 +1,26 @@
 # -*- coding: utf-8 -*-
 
-import unittest
-from Testing import ZopeTestCase  # side effect import. leave it here.
-ZopeTestCase  # pyflakes
-from Products.ATContentTypes.tests import atcttestcase, atctftestcase
-
-from Products.CMFCore.permissions import View
-from Products.CMFCore.permissions import ModifyPortalContent
-from Products.Archetypes.interfaces.layer import ILayerContainer
-from Products.Archetypes import atapi
-from Products.ATContentTypes.tests.utils import dcEdit
-import StringIO
-
 from plone.app.blob.content import ATBlob
+from Products.Archetypes import atapi
+from Products.Archetypes.interfaces.layer import ILayerContainer
 from Products.ATContentTypes.interfaces import IATFile
 from Products.ATContentTypes.interfaces import IFileContent
+from Products.ATContentTypes.tests import atctftestcase
+from Products.ATContentTypes.tests import atcttestcase
+from Products.ATContentTypes.tests.utils import dcEdit
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFCore.permissions import View
+from Testing import ZopeTestCase  # side effect import. leave it here.
 from zope.interface.verify import verifyObject
 
+import StringIO
+import unittest
+
+
+ZopeTestCase  # pyflakes
+
+
+
 
 file_text = """
 foooooo
diff --git a/Products/ATContentTypes/tests/test_atfolder.py b/Products/ATContentTypes/tests/test_atfolder.py
index 77d025e..27f3209 100644
--- a/Products/ATContentTypes/tests/test_atfolder.py
+++ b/Products/ATContentTypes/tests/test_atfolder.py
@@ -5,7 +5,8 @@
 from Products.ATContentTypes.interfaces import IATBTreeFolder
 from Products.ATContentTypes.interfaces import IATFolder
 from Products.ATContentTypes.interfaces import ISelectableConstrainTypes
-from Products.ATContentTypes.tests import atcttestcase, atctftestcase
+from Products.ATContentTypes.tests import atctftestcase
+from Products.ATContentTypes.tests import atcttestcase
 from Products.ATContentTypes.tests.utils import dcEdit
 from zope.interface.verify import verifyObject
 
diff --git a/Products/ATContentTypes/tests/test_atimage.py b/Products/ATContentTypes/tests/test_atimage.py
index 170b541..db5ed12 100644
--- a/Products/ATContentTypes/tests/test_atimage.py
+++ b/Products/ATContentTypes/tests/test_atimage.py
@@ -7,12 +7,15 @@
 from Products.Archetypes.interfaces.layer import ILayerContainer
 from Products.ATContentTypes.interfaces import IATImage
 from Products.ATContentTypes.interfaces import IImageContent
-from Products.ATContentTypes.tests import atcttestcase, atctftestcase
-from Products.ATContentTypes.tests.utils import dcEdit, PACKAGE_HOME
+from Products.ATContentTypes.tests import atctftestcase
+from Products.ATContentTypes.tests import atcttestcase
+from Products.ATContentTypes.tests.utils import dcEdit
+from Products.ATContentTypes.tests.utils import PACKAGE_HOME
 from Products.CMFCore.permissions import ModifyPortalContent
 from Products.CMFCore.permissions import View
 from transaction import commit
 from zope.interface.verify import verifyObject
+
 import exif
 import os
 
diff --git a/Products/ATContentTypes/tests/test_atlink.py b/Products/ATContentTypes/tests/test_atlink.py
index 2526d87..13de48d 100644
--- a/Products/ATContentTypes/tests/test_atlink.py
+++ b/Products/ATContentTypes/tests/test_atlink.py
@@ -2,12 +2,15 @@
 from Products.Archetypes.interfaces.layer import ILayerContainer
 from Products.ATContentTypes.content.link import ATLink
 from Products.ATContentTypes.interfaces import IATLink
-from Products.ATContentTypes.tests import atcttestcase, atctftestcase
+from Products.ATContentTypes.tests import atctftestcase
+from Products.ATContentTypes.tests import atcttestcase
 from Products.CMFCore.permissions import ModifyPortalContent
 from Products.CMFCore.permissions import View
 from zope.interface.verify import verifyObject
+
 import unittest
 
+
 URL = 'http://www.example.org/'
 
 
diff --git a/Products/ATContentTypes/tests/test_atnewsitem.py b/Products/ATContentTypes/tests/test_atnewsitem.py
index 519f806..3987b4d 100644
--- a/Products/ATContentTypes/tests/test_atnewsitem.py
+++ b/Products/ATContentTypes/tests/test_atnewsitem.py
@@ -4,12 +4,14 @@
 from Products.ATContentTypes.interfaces import IATNewsItem
 from Products.ATContentTypes.interfaces import IImageContent
 from Products.ATContentTypes.interfaces import ITextContent
-from Products.ATContentTypes.tests import atcttestcase, atctftestcase
+from Products.ATContentTypes.tests import atctftestcase
+from Products.ATContentTypes.tests import atcttestcase
 from Products.ATContentTypes.tests.utils import dcEdit
 from Products.ATContentTypes.tests.utils import NotRequiredTidyHTMLValidator
 from Products.CMFCore.permissions import ModifyPortalContent
 from Products.CMFCore.permissions import View
 from zope.interface.verify import verifyObject
+
 import unittest
 
 
diff --git a/Products/ATContentTypes/tests/test_attopic.py b/Products/ATContentTypes/tests/test_attopic.py
index 76387bc..5e61818 100644
--- a/Products/ATContentTypes/tests/test_attopic.py
+++ b/Products/ATContentTypes/tests/test_attopic.py
@@ -6,13 +6,15 @@
 from Products.ATContentTypes.content.topic import ATTopic
 from Products.ATContentTypes.interfaces import IATTopic
 from Products.ATContentTypes.permission import ChangeTopics
-from Products.ATContentTypes.tests import atcttestcase, atctftestcase
+from Products.ATContentTypes.tests import atctftestcase
+from Products.ATContentTypes.tests import atcttestcase
 from Products.ATContentTypes.tests.utils import dcEdit
 from Products.ATContentTypes.tests.utils import EmptyValidator
 from Products.CMFCore.permissions import View
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.PloneBatch import Batch
 from zope.interface.verify import verifyObject
+
 import unittest
 
 
diff --git a/Products/ATContentTypes/tests/test_browserdefaultmixin.py b/Products/ATContentTypes/tests/test_browserdefaultmixin.py
index 8ffe846..173f1dc 100644
--- a/Products/ATContentTypes/tests/test_browserdefaultmixin.py
+++ b/Products/ATContentTypes/tests/test_browserdefaultmixin.py
@@ -2,9 +2,11 @@
 from Products.ATContentTypes.tests import atcttestcase
 from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin
 from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault
+
 import re
 import unittest
 
+
 tests = []
 
 RE_REMOVE_AUTHENTICATOR = re.compile(r'_authenticator=.*\"')
diff --git a/Products/ATContentTypes/tests/test_bugs.py b/Products/ATContentTypes/tests/test_bugs.py
index 27cba99..787e91a 100644
--- a/Products/ATContentTypes/tests/test_bugs.py
+++ b/Products/ATContentTypes/tests/test_bugs.py
@@ -2,6 +2,7 @@
 from Products.ATContentTypes.tests import atcttestcase
 from Products.validation.interfaces.IValidator import IValidationChain
 
+
 tests = []
 
 
diff --git a/Products/ATContentTypes/tests/test_constraintypes.py b/Products/ATContentTypes/tests/test_constraintypes.py
index 247f175..c30b9a4 100644
--- a/Products/ATContentTypes/tests/test_constraintypes.py
+++ b/Products/ATContentTypes/tests/test_constraintypes.py
@@ -2,8 +2,10 @@
 from Products.ATContentTypes.lib import constraintypes
 from Products.ATContentTypes.tests import atcttestcase
 from Products.CMFPlone.interfaces import ISelectableConstrainTypes
+
 import unittest
 
+
 tests = []
 
 
diff --git a/Products/ATContentTypes/tests/test_content_profile.py b/Products/ATContentTypes/tests/test_content_profile.py
index d32379d..c130ea3 100644
--- a/Products/ATContentTypes/tests/test_content_profile.py
+++ b/Products/ATContentTypes/tests/test_content_profile.py
@@ -1,5 +1,5 @@
-from Products.ATContentTypes import setuphandlers
 from plone.app.testing.bbb import PloneTestCase
+from Products.ATContentTypes import setuphandlers
 
 
 # No sense to check this in Plone 5, frontpage is DX
diff --git a/Products/ATContentTypes/tests/test_criteria.py b/Products/ATContentTypes/tests/test_criteria.py
index dd8ff40..e4b672c 100644
--- a/Products/ATContentTypes/tests/test_criteria.py
+++ b/Products/ATContentTypes/tests/test_criteria.py
@@ -5,25 +5,25 @@
 from Products.Archetypes.interfaces.referenceable import IReferenceable
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.boolean import ATBooleanCriterion
-from Products.ATContentTypes.criteria.currentauthor import \
-    ATCurrentAuthorCriterion
+from Products.ATContentTypes.criteria.currentauthor import ATCurrentAuthorCriterion
 from Products.ATContentTypes.criteria.date import ATDateCriteria
 from Products.ATContentTypes.criteria.daterange import ATDateRangeCriterion
 from Products.ATContentTypes.criteria.list import ATListCriterion
 from Products.ATContentTypes.criteria.path import ATPathCriterion
 from Products.ATContentTypes.criteria.portaltype import ATPortalTypeCriterion
 from Products.ATContentTypes.criteria.reference import ATReferenceCriterion
-from Products.ATContentTypes.criteria.relativepath import \
-    ATRelativePathCriterion
+from Products.ATContentTypes.criteria.relativepath import ATRelativePathCriterion
 from Products.ATContentTypes.criteria.selection import ATSelectionCriterion
 from Products.ATContentTypes.criteria.simpleint import ATSimpleIntCriterion
-from Products.ATContentTypes.criteria.simplestring import \
-    ATSimpleStringCriterion
+from Products.ATContentTypes.criteria.simplestring import ATSimpleStringCriterion
 from Products.ATContentTypes.criteria.sort import ATSortCriterion
 from Products.ATContentTypes.interfaces import IATTopicCriterion
 from Products.ATContentTypes.tests import atcttestcase
 from zope.interface.verify import verifyObject
+
 import unittest
+
+
 tests = []
 
 
diff --git a/Products/ATContentTypes/tests/test_default_mimetypes.py b/Products/ATContentTypes/tests/test_default_mimetypes.py
index 7220d8b..8a55255 100644
--- a/Products/ATContentTypes/tests/test_default_mimetypes.py
+++ b/Products/ATContentTypes/tests/test_default_mimetypes.py
@@ -1,7 +1,8 @@
 # test initialisation and setup
 
 from Products.ATContentTypes.tests.atcttestcase import ATCTSiteTestCase
-from unittest import TestSuite, makeSuite
+from unittest import makeSuite
+from unittest import TestSuite
 
 
 class TestDefaultMimeTypes(ATCTSiteTestCase):
diff --git a/Products/ATContentTypes/tests/test_doctests.py b/Products/ATContentTypes/tests/test_doctests.py
index 84da7f6..7717d7f 100644
--- a/Products/ATContentTypes/tests/test_doctests.py
+++ b/Products/ATContentTypes/tests/test_doctests.py
@@ -9,14 +9,17 @@
     'traversal.txt',
 ]
 
+from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING
+from plone.testing import layered
+
 import doctest
+
+
 OPTIONFLAGS = (doctest.ELLIPSIS |
                doctest.NORMALIZE_WHITESPACE |
                doctest.REPORT_NDIFF |
                doctest.REPORT_ONLY_FIRST_FAILURE)
 
-from plone.testing import layered
-from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING
 
 
 def test_suite():
diff --git a/Products/ATContentTypes/tests/test_installation.py b/Products/ATContentTypes/tests/test_installation.py
index 12f713e..6df8976 100644
--- a/Products/ATContentTypes/tests/test_installation.py
+++ b/Products/ATContentTypes/tests/test_installation.py
@@ -1,11 +1,12 @@
-import unittest
-from Products.ATContentTypes.tests import atcttestcase
-from Products.ATContentTypes.config import TOOLNAME
 from Products.ATContentTypes.config import SWALLOW_IMAGE_RESIZE_EXCEPTIONS
+from Products.ATContentTypes.config import TOOLNAME
+from Products.ATContentTypes.tests import atcttestcase
 from Products.ATContentTypes.tool.atct import ATCTTool
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.utils import getFSVersionTuple
 
+import unittest
+
 
 PLONE5 = getFSVersionTuple()[0] >= 5
 tests = []
diff --git a/Products/ATContentTypes/tests/test_interfaces.py b/Products/ATContentTypes/tests/test_interfaces.py
index d9cb3c1..28062ba 100644
--- a/Products/ATContentTypes/tests/test_interfaces.py
+++ b/Products/ATContentTypes/tests/test_interfaces.py
@@ -1,7 +1,12 @@
-from Products.ATContentTypes.tool.factory import FactoryTool, TempFolder
+from Products.ATContentTypes.tool.factory import FactoryTool
+from Products.ATContentTypes.tool.factory import TempFolder
 from Products.ATContentTypes.tool.metadata import MetadataTool
-from Products.CMFPlone.tests.testInterfaces import (className, InterfaceTest,
-                                                    zope_interface_test)
+from Products.CMFPlone.tests.testInterfaces import className
+from Products.CMFPlone.tests.testInterfaces import InterfaceTest
+from Products.CMFPlone.tests.testInterfaces import zope_interface_test
+
+import unittest
+
 
 ###############################################################################
 ###                         testing starts here                             ###
@@ -38,7 +43,6 @@ class KlassInterfaceTest(zope_interface_test):
     setattr(KlassInterfaceTest, funcName, lambda self: self._testStuff())
     tests.append(KlassInterfaceTest)
 
-import unittest
 
 
 def test_suite():
diff --git a/Products/ATContentTypes/tests/test_portal_factory.py b/Products/ATContentTypes/tests/test_portal_factory.py
index 6a67c60..5261162 100644
--- a/Products/ATContentTypes/tests/test_portal_factory.py
+++ b/Products/ATContentTypes/tests/test_portal_factory.py
@@ -1,5 +1,5 @@
-from AccessControl import Permissions
 from AccessControl import getSecurityManager
+from AccessControl import Permissions
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import TEST_USER_PASSWORD
@@ -7,6 +7,7 @@
 from Products.CMFCore.permissions import ModifyPortalContent
 from Products.CMFPlone.tests import PloneTestCase
 from Products.PluggableAuthService.interfaces.plugins import IChallengePlugin
+
 import urlparse
 
 
diff --git a/Products/ATContentTypes/tests/test_skinScripts.py b/Products/ATContentTypes/tests/test_skinScripts.py
index e90e3ba..aad8fe8 100644
--- a/Products/ATContentTypes/tests/test_skinScripts.py
+++ b/Products/ATContentTypes/tests/test_skinScripts.py
@@ -1,8 +1,10 @@
 from DateTime import DateTime
 from Products.ATContentTypes.tests import atcttestcase
+
 import Missing
 import unittest
 
+
 tests = []
 
 
diff --git a/Products/ATContentTypes/tests/test_tool.py b/Products/ATContentTypes/tests/test_tool.py
index d601295..1541fdc 100644
--- a/Products/ATContentTypes/tests/test_tool.py
+++ b/Products/ATContentTypes/tests/test_tool.py
@@ -1,10 +1,13 @@
 from Products.ATContentTypes.config import TOOLNAME
 from Products.ATContentTypes.interfaces import IATCTTool
-from Products.ATContentTypes.tests import atcttestcase, atctftestcase
+from Products.ATContentTypes.tests import atctftestcase
+from Products.ATContentTypes.tests import atcttestcase
 from Products.CMFCore.utils import getToolByName
 from zope.interface.verify import verifyObject
+
 import unittest
 
+
 tests = []
 
 
diff --git a/Products/ATContentTypes/tests/test_topictool.py b/Products/ATContentTypes/tests/test_topictool.py
index 49b9d16..b04c448 100644
--- a/Products/ATContentTypes/tests/test_topictool.py
+++ b/Products/ATContentTypes/tests/test_topictool.py
@@ -3,8 +3,10 @@
 from Products.ATContentTypes.tests import atcttestcase
 from Products.CMFCore.utils import getToolByName
 from zope.interface.verify import verifyObject
+
 import unittest
 
+
 tests = []
 index_def = {'index': 'end',
              'friendlyName': 'End Date For Test',
diff --git a/Products/ATContentTypes/tests/utils.py b/Products/ATContentTypes/tests/utils.py
index c08b0a1..d7bc358 100644
--- a/Products/ATContentTypes/tests/utils.py
+++ b/Products/ATContentTypes/tests/utils.py
@@ -2,10 +2,13 @@
 from App.class_init import InitializeClass
 from App.Common import package_home
 from DateTime import DateTime
+from Products.validation import ValidationChain
 from UserDict import UserDict
+
 import ExtensionClass
 import os
 
+
 PACKAGE_HOME = package_home(globals())
 
 
@@ -45,7 +48,6 @@ def dcEdit(obj):
     obj.setLanguage('de')
     obj.setRights('GPL')
 
-from Products.validation import ValidationChain
 EmptyValidator = ValidationChain('isEmpty')
 EmptyValidator.appendSufficient('isEmpty')
 idValidator = ValidationChain('isValidId')
diff --git a/Products/ATContentTypes/thirdparty/exif.py b/Products/ATContentTypes/thirdparty/exif.py
index 088a640..b86b5e9 100644
--- a/Products/ATContentTypes/thirdparty/exif.py
+++ b/Products/ATContentTypes/thirdparty/exif.py
@@ -101,6 +101,8 @@ class IFD_Tag:
     pass
 
 import logging
+
+
 LOG = logging.getLogger('exif')
 
 # field type descriptions as (length, abbreviation, full name) tuples
diff --git a/Products/ATContentTypes/tool/atct.py b/Products/ATContentTypes/tool/atct.py
index c5b70d0..7089aa8 100644
--- a/Products/ATContentTypes/tool/atct.py
+++ b/Products/ATContentTypes/tool/atct.py
@@ -1,25 +1,23 @@
-import logging
-from cStringIO import StringIO
-from zope.interface import implements
-
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
-from OFS.SimpleItem import SimpleItem
+from cStringIO import StringIO
 from OFS.PropertyManager import PropertyManager
-from ZODB.POSException import ConflictError
-
-from Products.PageTemplates.PageTemplateFile import PageTemplateFile
-
-from Products.CMFCore.utils import registerToolInterface
-from Products.CMFCore.utils import UniqueObject
-from Products.CMFCore.utils import getToolByName
-from Products.CMFCore.permissions import ManagePortal
-
-from Products.ATContentTypes.interfaces import IImageContent
-from Products.ATContentTypes.interfaces import IATCTTool
+from OFS.SimpleItem import SimpleItem
 from Products.ATContentTypes.config import TOOLNAME
 from Products.ATContentTypes.config import WWW_DIR
+from Products.ATContentTypes.interfaces import IATCTTool
+from Products.ATContentTypes.interfaces import IImageContent
 from Products.ATContentTypes.tool.topic import ATTopicsTool
+from Products.CMFCore.permissions import ManagePortal
+from Products.CMFCore.utils import getToolByName
+from Products.CMFCore.utils import registerToolInterface
+from Products.CMFCore.utils import UniqueObject
+from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+from ZODB.POSException import ConflictError
+from zope.interface import implements
+
+import logging
+
 
 LOG = logging.getLogger('ATCT')
 
diff --git a/Products/ATContentTypes/tool/factory.py b/Products/ATContentTypes/tool/factory.py
index 7511ee0..dcdc956 100644
--- a/Products/ATContentTypes/tool/factory.py
+++ b/Products/ATContentTypes/tool/factory.py
@@ -1,29 +1,36 @@
-import logging
-import os
-
-from zope.interface import implements
-from zope.structuredtext import stx2html
-
-from AccessControl import Owned, ClassSecurityInfo, getSecurityManager
-from Acquisition import aq_parent, aq_base, aq_inner, aq_get
+from AccessControl import ClassSecurityInfo
+from AccessControl import getSecurityManager
+from AccessControl import Owned
+from Acquisition import aq_base
+from Acquisition import aq_get
+from Acquisition import aq_inner
+from Acquisition import aq_parent
 from App.class_init import InitializeClass
 from App.Common import package_home
 from OFS.SimpleItem import SimpleItem
-from zExceptions import NotFound
-from ZPublisher.Publish import call_object, missing_name, dont_publish_class
-from ZPublisher.mapply import mapply
 from Products.ATContentTypes.config import GLOBALS
-from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+from Products.ATContentTypes.interfaces import IFactoryTool
 from Products.CMFCore.permissions import ManagePortal
-from Products.CMFCore.utils import UniqueObject
 from Products.CMFCore.utils import getToolByName
-from Products.ATContentTypes.interfaces import IFactoryTool
+from Products.CMFCore.utils import UniqueObject
 from Products.CMFPlone.interfaces import IHideFromBreadcrumbs
-from Products.CMFPlone.PloneFolder import PloneFolder as TempFolderBase
 from Products.CMFPlone.PloneBaseTool import PloneBaseTool
+from Products.CMFPlone.PloneFolder import PloneFolder as TempFolderBase
 from Products.CMFPlone.utils import base_hasattr
 from Products.CMFPlone.utils import log_exc
+from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+from zExceptions import NotFound
 from ZODB.POSException import ConflictError
+from zope.interface import implements
+from zope.structuredtext import stx2html
+from ZPublisher.mapply import mapply
+from ZPublisher.Publish import call_object
+from ZPublisher.Publish import dont_publish_class
+from ZPublisher.Publish import missing_name
+
+import logging
+import os
+
 
 FACTORY_INFO = '__factory__info__'
 
diff --git a/Products/ATContentTypes/tool/metadata.py b/Products/ATContentTypes/tool/metadata.py
index 95aba1a..53ff8a4 100644
--- a/Products/ATContentTypes/tool/metadata.py
+++ b/Products/ATContentTypes/tool/metadata.py
@@ -18,8 +18,6 @@
 from OFS.Folder import Folder
 from OFS.SimpleItem import SimpleItem
 from Persistence import PersistentMapping
-from zope.interface import implements
-
 from Products.ATContentTypes.config import WWW_DIR
 from Products.CMFCore.interfaces import IMetadataTool
 from Products.CMFCore.utils import registerToolInterface
@@ -28,6 +26,7 @@
 from Products.CMFPlone.permissions import ModifyPortalContent
 from Products.CMFPlone.permissions import View
 from Products.CMFPlone.PloneBaseTool import PloneBaseTool
+from zope.interface import implements
 
 
 class MetadataError(Exception):
diff --git a/Products/ATContentTypes/tool/topic.py b/Products/ATContentTypes/tool/topic.py
index 60268c1..6e465e7 100644
--- a/Products/ATContentTypes/tool/topic.py
+++ b/Products/ATContentTypes/tool/topic.py
@@ -1,17 +1,15 @@
-from zope.interface import implements
-
-from App.class_init import InitializeClass
-from Products.CMFCore.utils import getToolByName
-from Products.ATContentTypes.criteria import _criterionRegistry
 from AccessControl import ClassSecurityInfo
-from Persistence import Persistent
-from OFS.SimpleItem import SimpleItem
+from App.class_init import InitializeClass
 from ExtensionClass import Base
-
+from OFS.SimpleItem import SimpleItem
+from Persistence import Persistent
+from Products.Archetypes.atapi import DisplayList
 from Products.ATContentTypes.config import TOOLNAME
+from Products.ATContentTypes.criteria import _criterionRegistry
 from Products.ATContentTypes.interfaces import IATCTTopicsTool
-from Products.Archetypes.atapi import DisplayList
 from Products.CMFCore.permissions import ManagePortal
+from Products.CMFCore.utils import getToolByName
+from zope.interface import implements
 
 
 class TopicIndex(SimpleItem, Persistent):
diff --git a/Products/ATContentTypes/utils.py b/Products/ATContentTypes/utils.py
index 3444079..a66045d 100644
--- a/Products/ATContentTypes/utils.py
+++ b/Products/ATContentTypes/utils.py
@@ -1,6 +1,7 @@
-import datetime
 from DateTime import DateTime
 
+import datetime
+
 
 def dt2DT(date):
     """Convert Python's datetime to Zope's DateTime


Repository: Products.ATContentTypes


Branch: refs/heads/master
Date: 2016-02-05T19:02:45+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.ATContentTypes/commit/17c6ac91fa75b15bba11787b9122ae65aa53d724

Added utf-8 coding magic comment.

Files changed:
M CHANGES.rst
M Products/ATContentTypes/__init__.py
M Products/ATContentTypes/atct.py
M Products/ATContentTypes/browser/calendar.py
M Products/ATContentTypes/browser/criteria.py
M Products/ATContentTypes/browser/download.py
M Products/ATContentTypes/browser/nextprevious.py
M Products/ATContentTypes/config.py
M Products/ATContentTypes/configuration/__init__.py
M Products/ATContentTypes/configuration/config.py
M Products/ATContentTypes/configuration/datatype.py
M Products/ATContentTypes/configuration/schema.py
M Products/ATContentTypes/content/__init__.py
M Products/ATContentTypes/content/base.py
M Products/ATContentTypes/content/document.py
M Products/ATContentTypes/content/event.py
M Products/ATContentTypes/content/favorite.py
M Products/ATContentTypes/content/file.py
M Products/ATContentTypes/content/folder.py
M Products/ATContentTypes/content/image.py
M Products/ATContentTypes/content/link.py
M Products/ATContentTypes/content/newsitem.py
M Products/ATContentTypes/content/schemata.py
M Products/ATContentTypes/content/topic.py
M Products/ATContentTypes/criteria/__init__.py
M Products/ATContentTypes/criteria/base.py
M Products/ATContentTypes/criteria/boolean.py
M Products/ATContentTypes/criteria/currentauthor.py
M Products/ATContentTypes/criteria/date.py
M Products/ATContentTypes/criteria/daterange.py
M Products/ATContentTypes/criteria/list.py
M Products/ATContentTypes/criteria/path.py
M Products/ATContentTypes/criteria/portaltype.py
M Products/ATContentTypes/criteria/reference.py
M Products/ATContentTypes/criteria/relativepath.py
M Products/ATContentTypes/criteria/schemata.py
M Products/ATContentTypes/criteria/selection.py
M Products/ATContentTypes/criteria/simpleint.py
M Products/ATContentTypes/criteria/simplestring.py
M Products/ATContentTypes/criteria/sort.py
M Products/ATContentTypes/exportimport/__init__.py
M Products/ATContentTypes/exportimport/atcttool.py
M Products/ATContentTypes/exportimport/content.py
M Products/ATContentTypes/exportimport/factorytool.py
M Products/ATContentTypes/exportimport/tests/test_factory_tool.py
M Products/ATContentTypes/factories.py
M Products/ATContentTypes/interface.py
M Products/ATContentTypes/interfaces/__init__.py
M Products/ATContentTypes/interfaces/document.py
M Products/ATContentTypes/interfaces/event.py
M Products/ATContentTypes/interfaces/factories.py
M Products/ATContentTypes/interfaces/factory.py
M Products/ATContentTypes/interfaces/file.py
M Products/ATContentTypes/interfaces/folder.py
M Products/ATContentTypes/interfaces/image.py
M Products/ATContentTypes/interfaces/interfaces.py
M Products/ATContentTypes/interfaces/link.py
M Products/ATContentTypes/interfaces/news.py
M Products/ATContentTypes/interfaces/topic.py
M Products/ATContentTypes/lib/__init__.py
M Products/ATContentTypes/lib/calendarsupport.py
M Products/ATContentTypes/lib/constraintypes.py
M Products/ATContentTypes/lib/historyaware.py
M Products/ATContentTypes/lib/imagetransform.py
M Products/ATContentTypes/lib/validators.py
M Products/ATContentTypes/migration/__init__.py
M Products/ATContentTypes/migration/v1_2/__init__.py
M Products/ATContentTypes/permission.py
M Products/ATContentTypes/setuphandlers.py
M Products/ATContentTypes/tests/atctftestcase.py
M Products/ATContentTypes/tests/atcttestcase.py
M Products/ATContentTypes/tests/testContentTypes.py
M Products/ATContentTypes/tests/test_atdocument.py
M Products/ATContentTypes/tests/test_atevent.py
M Products/ATContentTypes/tests/test_atfolder.py
M Products/ATContentTypes/tests/test_atlink.py
M Products/ATContentTypes/tests/test_atnewsitem.py
M Products/ATContentTypes/tests/test_attopic.py
M Products/ATContentTypes/tests/test_browserdefaultmixin.py
M Products/ATContentTypes/tests/test_bugs.py
M Products/ATContentTypes/tests/test_constraintypes.py
M Products/ATContentTypes/tests/test_content_profile.py
M Products/ATContentTypes/tests/test_controlpanel.py
M Products/ATContentTypes/tests/test_criteria.py
M Products/ATContentTypes/tests/test_default_mimetypes.py
M Products/ATContentTypes/tests/test_installation.py
M Products/ATContentTypes/tests/test_interfaces.py
M Products/ATContentTypes/tests/test_migrations.py
M Products/ATContentTypes/tests/test_portal_factory.py
M Products/ATContentTypes/tests/test_skinScripts.py
M Products/ATContentTypes/tests/test_tool.py
M Products/ATContentTypes/tests/test_topictool.py
M Products/ATContentTypes/tests/utils.py
M Products/ATContentTypes/thirdparty/exif.py
M Products/ATContentTypes/tool/__init__.py
M Products/ATContentTypes/tool/atct.py
M Products/ATContentTypes/tool/factory.py
M Products/ATContentTypes/tool/metadata.py
M Products/ATContentTypes/tool/topic.py
M Products/ATContentTypes/utils.py
M Products/__init__.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 100549d..13872e7 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,6 +10,8 @@ New:
 
 Fixes:
 
+- Added utf-8 coding magic comment.  [maurits]
+
 - Sorted imports with isort.  [maurits]
 
 - Fixed pep8 errors.  [maurits]
diff --git a/Products/ATContentTypes/__init__.py b/Products/ATContentTypes/__init__.py
index d7c4e65..cf23055 100644
--- a/Products/ATContentTypes/__init__.py
+++ b/Products/ATContentTypes/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 import os.path
 import sys
 import logging
diff --git a/Products/ATContentTypes/atct.py b/Products/ATContentTypes/atct.py
index 556d4d6..d250927 100644
--- a/Products/ATContentTypes/atct.py
+++ b/Products/ATContentTypes/atct.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.content.base import ATCTBTreeFolder
 from Products.ATContentTypes.content.base import ATCTContent
 from Products.ATContentTypes.content.base import ATCTFileContent
diff --git a/Products/ATContentTypes/browser/calendar.py b/Products/ATContentTypes/browser/calendar.py
index b71ff7b..281f761 100644
--- a/Products/ATContentTypes/browser/calendar.py
+++ b/Products/ATContentTypes/browser/calendar.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.memoize import ram
 from Products.ATContentTypes.interfaces import ICalendarSupport
 from Products.ATContentTypes.lib import calendarsupport as cs
diff --git a/Products/ATContentTypes/browser/criteria.py b/Products/ATContentTypes/browser/criteria.py
index 2648764..c4e6794 100644
--- a/Products/ATContentTypes/browser/criteria.py
+++ b/Products/ATContentTypes/browser/criteria.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope.i18n import translate
 from zope.publisher.browser import BrowserView
 
diff --git a/Products/ATContentTypes/browser/download.py b/Products/ATContentTypes/browser/download.py
index b8fa352..d16a858 100644
--- a/Products/ATContentTypes/browser/download.py
+++ b/Products/ATContentTypes/browser/download.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import Unauthorized
 from Products.Five import BrowserView
 from zope.interface import implements
diff --git a/Products/ATContentTypes/browser/nextprevious.py b/Products/ATContentTypes/browser/nextprevious.py
index 0bc09ad..e244a58 100644
--- a/Products/ATContentTypes/browser/nextprevious.py
+++ b/Products/ATContentTypes/browser/nextprevious.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
 from plone.app.layout.nextprevious.interfaces import INextPreviousProvider
 from plone.memoize.instance import memoize
diff --git a/Products/ATContentTypes/config.py b/Products/ATContentTypes/config.py
index 2a7b695..abe632a 100644
--- a/Products/ATContentTypes/config.py
+++ b/Products/ATContentTypes/config.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """AT Content Types configuration file
 
 DO NOT CHANGE THIS FILE!
diff --git a/Products/ATContentTypes/configuration/__init__.py b/Products/ATContentTypes/configuration/__init__.py
index 706ccac..39cca7e 100644
--- a/Products/ATContentTypes/configuration/__init__.py
+++ b/Products/ATContentTypes/configuration/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.configuration.config import zconf
 from Products.ATContentTypes.configuration.config import handler
 from Products.ATContentTypes.configuration.config import conf_file
diff --git a/Products/ATContentTypes/configuration/config.py b/Products/ATContentTypes/configuration/config.py
index 0151004..9a380d0 100644
--- a/Products/ATContentTypes/configuration/config.py
+++ b/Products/ATContentTypes/configuration/config.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Globals import INSTANCE_HOME
 from Products.ATContentTypes.configuration.schema import atctSchema
 from ZConfig.loader import ConfigLoader
diff --git a/Products/ATContentTypes/configuration/datatype.py b/Products/ATContentTypes/configuration/datatype.py
index 1eddf3b..586e97e 100644
--- a/Products/ATContentTypes/configuration/datatype.py
+++ b/Products/ATContentTypes/configuration/datatype.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import Permissions as ZopePermissions
 from Products.CMFCore import permissions as CMFCorePermissions
 from ZConfig.datatypes import IdentifierConversion
diff --git a/Products/ATContentTypes/configuration/schema.py b/Products/ATContentTypes/configuration/schema.py
index d0bc1de..09b5174 100644
--- a/Products/ATContentTypes/configuration/schema.py
+++ b/Products/ATContentTypes/configuration/schema.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.configuration import datatype
 from ZConfig.datatypes import Registry
 from ZConfig.loader import SchemaLoader
diff --git a/Products/ATContentTypes/content/__init__.py b/Products/ATContentTypes/content/__init__.py
index 61a88cd..badce20 100644
--- a/Products/ATContentTypes/content/__init__.py
+++ b/Products/ATContentTypes/content/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 import Products.ATContentTypes.content.link
 import Products.ATContentTypes.content.image
 import Products.ATContentTypes.content.document
diff --git a/Products/ATContentTypes/content/base.py b/Products/ATContentTypes/content/base.py
index e7ed512..b45ec8a 100644
--- a/Products/ATContentTypes/content/base.py
+++ b/Products/ATContentTypes/content/base.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Acquisition import aq_base
 from Acquisition import aq_inner
diff --git a/Products/ATContentTypes/content/document.py b/Products/ATContentTypes/content/document.py
index cc37e6e..7698ce9 100644
--- a/Products/ATContentTypes/content/document.py
+++ b/Products/ATContentTypes/content/document.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from ComputedAttribute import ComputedAttribute
 from lxml import etree
diff --git a/Products/ATContentTypes/content/event.py b/Products/ATContentTypes/content/event.py
index 1d206f0..c7d60ac 100644
--- a/Products/ATContentTypes/content/event.py
+++ b/Products/ATContentTypes/content/event.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from ComputedAttribute import ComputedAttribute
 from DateTime import DateTime
diff --git a/Products/ATContentTypes/content/favorite.py b/Products/ATContentTypes/content/favorite.py
index ef30eff..4bd58ce 100644
--- a/Products/ATContentTypes/content/favorite.py
+++ b/Products/ATContentTypes/content/favorite.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.content import link
 
 import logging
diff --git a/Products/ATContentTypes/content/file.py b/Products/ATContentTypes/content/file.py
index f03fa40..34f42dc 100644
--- a/Products/ATContentTypes/content/file.py
+++ b/Products/ATContentTypes/content/file.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Products.Archetypes.atapi import AnnotationStorage
 from Products.Archetypes.atapi import FileField
diff --git a/Products/ATContentTypes/content/folder.py b/Products/ATContentTypes/content/folder.py
index 39df6c2..327b32a 100644
--- a/Products/ATContentTypes/content/folder.py
+++ b/Products/ATContentTypes/content/folder.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from OFS.interfaces import IOrderedContainer
 from plone.app.folder import folder
diff --git a/Products/ATContentTypes/content/image.py b/Products/ATContentTypes/content/image.py
index 225f3d1..1438cfe 100644
--- a/Products/ATContentTypes/content/image.py
+++ b/Products/ATContentTypes/content/image.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Acquisition import aq_base
 from ComputedAttribute import ComputedAttribute
diff --git a/Products/ATContentTypes/content/link.py b/Products/ATContentTypes/content/link.py
index 5ff60b7..2ad563c 100644
--- a/Products/ATContentTypes/content/link.py
+++ b/Products/ATContentTypes/content/link.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import StringField
diff --git a/Products/ATContentTypes/content/newsitem.py b/Products/ATContentTypes/content/newsitem.py
index 6b754df..f37773b 100644
--- a/Products/ATContentTypes/content/newsitem.py
+++ b/Products/ATContentTypes/content/newsitem.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Products.Archetypes.atapi import AnnotationStorage
 from Products.Archetypes.atapi import ImageField
diff --git a/Products/ATContentTypes/content/schemata.py b/Products/ATContentTypes/content/schemata.py
index 375b127..8d716fe 100644
--- a/Products/ATContentTypes/content/schemata.py
+++ b/Products/ATContentTypes/content/schemata.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.Archetypes.atapi import BaseSchema
 from Products.Archetypes.atapi import BooleanField
 from Products.Archetypes.atapi import BooleanWidget
diff --git a/Products/ATContentTypes/content/topic.py b/Products/ATContentTypes/content/topic.py
index 3a31cd5..7b83f41 100644
--- a/Products/ATContentTypes/content/topic.py
+++ b/Products/ATContentTypes/content/topic.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from AccessControl import Unauthorized
 from Acquisition import aq_inner
diff --git a/Products/ATContentTypes/criteria/__init__.py b/Products/ATContentTypes/criteria/__init__.py
index 5b896a5..837f9aa 100644
--- a/Products/ATContentTypes/criteria/__init__.py
+++ b/Products/ATContentTypes/criteria/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from UserDict import UserDict
 from Products.Archetypes.atapi import registerType
 from Products.Archetypes.ClassGen import generateClass
diff --git a/Products/ATContentTypes/criteria/base.py b/Products/ATContentTypes/criteria/base.py
index 431bf94..b5ff99e 100644
--- a/Products/ATContentTypes/criteria/base.py
+++ b/Products/ATContentTypes/criteria/base.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from Products.Archetypes.atapi import BaseContentMixin
diff --git a/Products/ATContentTypes/criteria/boolean.py b/Products/ATContentTypes/criteria/boolean.py
index c2bb455..fdc8c99 100644
--- a/Products/ATContentTypes/criteria/boolean.py
+++ b/Products/ATContentTypes/criteria/boolean.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Missing import MV
 from Products.Archetypes.atapi import BooleanField
diff --git a/Products/ATContentTypes/criteria/currentauthor.py b/Products/ATContentTypes/criteria/currentauthor.py
index 1169941..47a4be7 100644
--- a/Products/ATContentTypes/criteria/currentauthor.py
+++ b/Products/ATContentTypes/criteria/currentauthor.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Products.ATContentTypes.criteria import LIST_INDICES
 from Products.ATContentTypes.criteria import registerCriterion
diff --git a/Products/ATContentTypes/criteria/date.py b/Products/ATContentTypes/criteria/date.py
index 014ecbd..f5d4c15 100644
--- a/Products/ATContentTypes/criteria/date.py
+++ b/Products/ATContentTypes/criteria/date.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from DateTime import DateTime
 from Products.Archetypes.atapi import DisplayList
diff --git a/Products/ATContentTypes/criteria/daterange.py b/Products/ATContentTypes/criteria/daterange.py
index e3762f9..2439c97 100644
--- a/Products/ATContentTypes/criteria/daterange.py
+++ b/Products/ATContentTypes/criteria/daterange.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Products.Archetypes.atapi import CalendarWidget
 from Products.Archetypes.atapi import DateTimeField
diff --git a/Products/ATContentTypes/criteria/list.py b/Products/ATContentTypes/criteria/list.py
index 36dddc9..c0c0436 100644
--- a/Products/ATContentTypes/criteria/list.py
+++ b/Products/ATContentTypes/criteria/list.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Products.Archetypes.atapi import DisplayList
 from Products.Archetypes.atapi import LinesField
diff --git a/Products/ATContentTypes/criteria/path.py b/Products/ATContentTypes/criteria/path.py
index b72ed86..758f102 100644
--- a/Products/ATContentTypes/criteria/path.py
+++ b/Products/ATContentTypes/criteria/path.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Products.Archetypes.atapi import BooleanField
 from Products.Archetypes.atapi import BooleanWidget
diff --git a/Products/ATContentTypes/criteria/portaltype.py b/Products/ATContentTypes/criteria/portaltype.py
index 7a0ae45..d217fa9 100644
--- a/Products/ATContentTypes/criteria/portaltype.py
+++ b/Products/ATContentTypes/criteria/portaltype.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Products.Archetypes.atapi import DisplayList
 from Products.ATContentTypes import ATCTMessageFactory as _
diff --git a/Products/ATContentTypes/criteria/reference.py b/Products/ATContentTypes/criteria/reference.py
index 1a7e705..13107fd 100644
--- a/Products/ATContentTypes/criteria/reference.py
+++ b/Products/ATContentTypes/criteria/reference.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Products.Archetypes.atapi import DisplayList
 from Products.ATContentTypes.criteria import REFERENCE_INDICES
diff --git a/Products/ATContentTypes/criteria/relativepath.py b/Products/ATContentTypes/criteria/relativepath.py
index 75f3aa2..bf15441 100644
--- a/Products/ATContentTypes/criteria/relativepath.py
+++ b/Products/ATContentTypes/criteria/relativepath.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Acquisition import aq_parent
 from Products.Archetypes.atapi import BooleanField
diff --git a/Products/ATContentTypes/criteria/schemata.py b/Products/ATContentTypes/criteria/schemata.py
index 50d5eaa..6da1c9b 100644
--- a/Products/ATContentTypes/criteria/schemata.py
+++ b/Products/ATContentTypes/criteria/schemata.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.Archetypes.atapi import IdWidget
 from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import StringField
diff --git a/Products/ATContentTypes/criteria/selection.py b/Products/ATContentTypes/criteria/selection.py
index 07d4643..16f442d 100644
--- a/Products/ATContentTypes/criteria/selection.py
+++ b/Products/ATContentTypes/criteria/selection.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Products.Archetypes.atapi import DisplayList
 from Products.Archetypes.atapi import LinesField
diff --git a/Products/ATContentTypes/criteria/simpleint.py b/Products/ATContentTypes/criteria/simpleint.py
index 99e3445..3878046 100644
--- a/Products/ATContentTypes/criteria/simpleint.py
+++ b/Products/ATContentTypes/criteria/simpleint.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Products.Archetypes.atapi import DisplayList
 from Products.Archetypes.atapi import IntegerField
diff --git a/Products/ATContentTypes/criteria/simplestring.py b/Products/ATContentTypes/criteria/simplestring.py
index 34c7ad5..c2bcacb 100644
--- a/Products/ATContentTypes/criteria/simplestring.py
+++ b/Products/ATContentTypes/criteria/simplestring.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import StringField
diff --git a/Products/ATContentTypes/criteria/sort.py b/Products/ATContentTypes/criteria/sort.py
index 827567a..67c0531 100644
--- a/Products/ATContentTypes/criteria/sort.py
+++ b/Products/ATContentTypes/criteria/sort.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Products.Archetypes.atapi import BooleanField
 from Products.Archetypes.atapi import BooleanWidget
diff --git a/Products/ATContentTypes/exportimport/__init__.py b/Products/ATContentTypes/exportimport/__init__.py
index c818e4e..48851c4 100644
--- a/Products/ATContentTypes/exportimport/__init__.py
+++ b/Products/ATContentTypes/exportimport/__init__.py
@@ -1 +1,2 @@
+# -*- coding: utf-8 -*-
 # Make it a package
diff --git a/Products/ATContentTypes/exportimport/atcttool.py b/Products/ATContentTypes/exportimport/atcttool.py
index b45e894..464a24f 100644
--- a/Products/ATContentTypes/exportimport/atcttool.py
+++ b/Products/ATContentTypes/exportimport/atcttool.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.interfaces import IATCTTool
 from Products.CMFCore.utils import getToolByName
 from Products.GenericSetup.utils import exportObjects
diff --git a/Products/ATContentTypes/exportimport/content.py b/Products/ATContentTypes/exportimport/content.py
index 189ee55..791e6d7 100644
--- a/Products/ATContentTypes/exportimport/content.py
+++ b/Products/ATContentTypes/exportimport/content.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.GenericSetup.interfaces import IFilesystemExporter
 from zope.interface import implements
 from zope.interface import Interface
diff --git a/Products/ATContentTypes/exportimport/factorytool.py b/Products/ATContentTypes/exportimport/factorytool.py
index d7af09d..0d92876 100644
--- a/Products/ATContentTypes/exportimport/factorytool.py
+++ b/Products/ATContentTypes/exportimport/factorytool.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.interfaces import IFactoryTool
 from Products.CMFCore.utils import getToolByName
 from Products.GenericSetup.utils import exportObjects
diff --git a/Products/ATContentTypes/exportimport/tests/test_factory_tool.py b/Products/ATContentTypes/exportimport/tests/test_factory_tool.py
index d8be152..9c1f30e 100644
--- a/Products/ATContentTypes/exportimport/tests/test_factory_tool.py
+++ b/Products/ATContentTypes/exportimport/tests/test_factory_tool.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from OFS.Folder import Folder
 from Products.CMFPlone.exportimport.tests.base import BodyAdapterTestCase
 from zope.component import provideAdapter
diff --git a/Products/ATContentTypes/factories.py b/Products/ATContentTypes/factories.py
index f985875..0acf18f 100644
--- a/Products/ATContentTypes/factories.py
+++ b/Products/ATContentTypes/factories.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.i18n.normalizer.interfaces import IFileNameNormalizer
 from Products.Archetypes.event import ObjectInitializedEvent
 from Products.Archetypes.interfaces import IATCTFileFactory
diff --git a/Products/ATContentTypes/interface.py b/Products/ATContentTypes/interface.py
index 01155e0..6879956 100644
--- a/Products/ATContentTypes/interface.py
+++ b/Products/ATContentTypes/interface.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """AT Content Types general interfaces
 
 BBB: We used to have all interfaces specified in "interface". "interfaces" is
diff --git a/Products/ATContentTypes/interfaces/__init__.py b/Products/ATContentTypes/interfaces/__init__.py
index 4bbe008..53fe2c7 100644
--- a/Products/ATContentTypes/interfaces/__init__.py
+++ b/Products/ATContentTypes/interfaces/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.interfaces.document import IATDocument
 from Products.ATContentTypes.interfaces.event import IATEvent
 from Products.ATContentTypes.interfaces.factory import IFactoryTool
diff --git a/Products/ATContentTypes/interfaces/document.py b/Products/ATContentTypes/interfaces/document.py
index dea59f2..393a267 100644
--- a/Products/ATContentTypes/interfaces/document.py
+++ b/Products/ATContentTypes/interfaces/document.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.interfaces.interfaces import ITextContent
 
 
diff --git a/Products/ATContentTypes/interfaces/event.py b/Products/ATContentTypes/interfaces/event.py
index 9781711..723ba3c 100644
--- a/Products/ATContentTypes/interfaces/event.py
+++ b/Products/ATContentTypes/interfaces/event.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.interfaces.interfaces import IATContentType
 
 
diff --git a/Products/ATContentTypes/interfaces/factories.py b/Products/ATContentTypes/interfaces/factories.py
index f9d2ebc..3233271 100644
--- a/Products/ATContentTypes/interfaces/factories.py
+++ b/Products/ATContentTypes/interfaces/factories.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.widgets.interfaces import IFileFactory
 
 
diff --git a/Products/ATContentTypes/interfaces/factory.py b/Products/ATContentTypes/interfaces/factory.py
index 327ed01..f58d6e0 100644
--- a/Products/ATContentTypes/interfaces/factory.py
+++ b/Products/ATContentTypes/interfaces/factory.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope.interface import Attribute
 from zope.interface import Interface
 
diff --git a/Products/ATContentTypes/interfaces/file.py b/Products/ATContentTypes/interfaces/file.py
index 0097b51..79f10b4 100644
--- a/Products/ATContentTypes/interfaces/file.py
+++ b/Products/ATContentTypes/interfaces/file.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope.interface import Interface
 
 
diff --git a/Products/ATContentTypes/interfaces/folder.py b/Products/ATContentTypes/interfaces/folder.py
index 73b1fcc..cdaf1aa 100644
--- a/Products/ATContentTypes/interfaces/folder.py
+++ b/Products/ATContentTypes/interfaces/folder.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.interfaces.interfaces import IATContentType
 from zope.interface import Interface
 
diff --git a/Products/ATContentTypes/interfaces/image.py b/Products/ATContentTypes/interfaces/image.py
index 08f40da..e358c6e 100644
--- a/Products/ATContentTypes/interfaces/image.py
+++ b/Products/ATContentTypes/interfaces/image.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope.interface import Interface
 
 
diff --git a/Products/ATContentTypes/interfaces/interfaces.py b/Products/ATContentTypes/interfaces/interfaces.py
index 0181818..9937eb1 100644
--- a/Products/ATContentTypes/interfaces/interfaces.py
+++ b/Products/ATContentTypes/interfaces/interfaces.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.Archetypes.interfaces import IATHistoryAware
 from Products.Archetypes.interfaces import IBaseContent
 from Products.Archetypes.interfaces import IBaseFolder
diff --git a/Products/ATContentTypes/interfaces/link.py b/Products/ATContentTypes/interfaces/link.py
index c8ff826..746e731 100644
--- a/Products/ATContentTypes/interfaces/link.py
+++ b/Products/ATContentTypes/interfaces/link.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.interfaces.interfaces import IATContentType
 
 
diff --git a/Products/ATContentTypes/interfaces/news.py b/Products/ATContentTypes/interfaces/news.py
index 1ea53b6..fe48492 100644
--- a/Products/ATContentTypes/interfaces/news.py
+++ b/Products/ATContentTypes/interfaces/news.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.interfaces.document import IATDocument
 from Products.ATContentTypes.interfaces.image import IImageContent
 
diff --git a/Products/ATContentTypes/interfaces/topic.py b/Products/ATContentTypes/interfaces/topic.py
index 6207bf7..b9770f5 100644
--- a/Products/ATContentTypes/interfaces/topic.py
+++ b/Products/ATContentTypes/interfaces/topic.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.interfaces.interfaces import IATContentType
 from zope.interface import Interface
 
diff --git a/Products/ATContentTypes/lib/__init__.py b/Products/ATContentTypes/lib/__init__.py
index 3c8e49b..1383934 100644
--- a/Products/ATContentTypes/lib/__init__.py
+++ b/Products/ATContentTypes/lib/__init__.py
@@ -1 +1,2 @@
+# -*- coding: utf-8 -*-
 # additional modules and packages for ATCT
diff --git a/Products/ATContentTypes/lib/calendarsupport.py b/Products/ATContentTypes/lib/calendarsupport.py
index 140ef1c..adb0a28 100644
--- a/Products/ATContentTypes/lib/calendarsupport.py
+++ b/Products/ATContentTypes/lib/calendarsupport.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from cStringIO import StringIO
diff --git a/Products/ATContentTypes/lib/constraintypes.py b/Products/ATContentTypes/lib/constraintypes.py
index caecf91..98d8b6b 100644
--- a/Products/ATContentTypes/lib/constraintypes.py
+++ b/Products/ATContentTypes/lib/constraintypes.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Acquisition import aq_inner
 from Acquisition import aq_parent
diff --git a/Products/ATContentTypes/lib/historyaware.py b/Products/ATContentTypes/lib/historyaware.py
index c7d3362..0eca996 100644
--- a/Products/ATContentTypes/lib/historyaware.py
+++ b/Products/ATContentTypes/lib/historyaware.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from DocumentTemplate.DT_Util import html_quote
diff --git a/Products/ATContentTypes/lib/imagetransform.py b/Products/ATContentTypes/lib/imagetransform.py
index 6089107..9c0fdcd 100644
--- a/Products/ATContentTypes/lib/imagetransform.py
+++ b/Products/ATContentTypes/lib/imagetransform.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from cStringIO import StringIO
diff --git a/Products/ATContentTypes/lib/validators.py b/Products/ATContentTypes/lib/validators.py
index 4b62d45..764c293 100644
--- a/Products/ATContentTypes/lib/validators.py
+++ b/Products/ATContentTypes/lib/validators.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
 from Products.ATContentTypes.config import HAS_MX_TIDY
 from Products.ATContentTypes.config import MX_TIDY_ENABLED
diff --git a/Products/ATContentTypes/migration/__init__.py b/Products/ATContentTypes/migration/__init__.py
index bb4bf33..b3450e8 100644
--- a/Products/ATContentTypes/migration/__init__.py
+++ b/Products/ATContentTypes/migration/__init__.py
@@ -1,2 +1,3 @@
+# -*- coding: utf-8 -*-
 """AT Content Types migration suite
 """
diff --git a/Products/ATContentTypes/migration/v1_2/__init__.py b/Products/ATContentTypes/migration/v1_2/__init__.py
index aa3120b..8530c1d 100644
--- a/Products/ATContentTypes/migration/v1_2/__init__.py
+++ b/Products/ATContentTypes/migration/v1_2/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """Migration functions for ATContentTypes 1.2. These are called during the
    usual CMFPlone migration.
 """
diff --git a/Products/ATContentTypes/permission.py b/Products/ATContentTypes/permission.py
index aae1290..ca0083c 100644
--- a/Products/ATContentTypes/permission.py
+++ b/Products/ATContentTypes/permission.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.widgets.interfaces import IFieldPermissionChecker
 from Products.Archetypes.atapi import listTypes
 from Products.Archetypes.interfaces import IBaseObject
diff --git a/Products/ATContentTypes/setuphandlers.py b/Products/ATContentTypes/setuphandlers.py
index 3ea70a3..0342946 100644
--- a/Products/ATContentTypes/setuphandlers.py
+++ b/Products/ATContentTypes/setuphandlers.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
 from plone.i18n.normalizer.interfaces import IURLNormalizer
 from plone.portlets.interfaces import ILocalPortletAssignmentManager
diff --git a/Products/ATContentTypes/tests/atctftestcase.py b/Products/ATContentTypes/tests/atctftestcase.py
index 48ba19f..e71afe3 100644
--- a/Products/ATContentTypes/tests/atctftestcase.py
+++ b/Products/ATContentTypes/tests/atctftestcase.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from hashlib import sha1 as sha
 from plone.app.testing import SITE_OWNER_NAME
 from plone.app.testing import SITE_OWNER_PASSWORD
diff --git a/Products/ATContentTypes/tests/atcttestcase.py b/Products/ATContentTypes/tests/atcttestcase.py
index 70941f7..9548701 100644
--- a/Products/ATContentTypes/tests/atcttestcase.py
+++ b/Products/ATContentTypes/tests/atcttestcase.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.blob.markings import markAs
 from plone.app.testing import TEST_USER_ID as default_user
 from plone.app.testing.bbb import PloneTestCase
diff --git a/Products/ATContentTypes/tests/testContentTypes.py b/Products/ATContentTypes/tests/testContentTypes.py
index bf91d7e..c61e788 100644
--- a/Products/ATContentTypes/tests/testContentTypes.py
+++ b/Products/ATContentTypes/tests/testContentTypes.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.testing.bbb import PloneTestCase
 from Products.ATContentTypes.interfaces import IATContentType
 from Products.CMFPlone.tests import dummy
diff --git a/Products/ATContentTypes/tests/test_atdocument.py b/Products/ATContentTypes/tests/test_atdocument.py
index c99c6fd..3a7aee9 100644
--- a/Products/ATContentTypes/tests/test_atdocument.py
+++ b/Products/ATContentTypes/tests/test_atdocument.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from cgi import FieldStorage
 from Products.Archetypes import atapi
 from Products.Archetypes.interfaces.layer import ILayerContainer
diff --git a/Products/ATContentTypes/tests/test_atevent.py b/Products/ATContentTypes/tests/test_atevent.py
index ca5341e..67d84a9 100644
--- a/Products/ATContentTypes/tests/test_atevent.py
+++ b/Products/ATContentTypes/tests/test_atevent.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from DateTime import DateTime
 from Products.Archetypes import atapi
 from Products.Archetypes.interfaces.layer import ILayerContainer
diff --git a/Products/ATContentTypes/tests/test_atfolder.py b/Products/ATContentTypes/tests/test_atfolder.py
index 27f3209..032e01b 100644
--- a/Products/ATContentTypes/tests/test_atfolder.py
+++ b/Products/ATContentTypes/tests/test_atfolder.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from OFS.interfaces import IOrderedContainer as IOrderedContainer
 from plone.app.testing import SITE_OWNER_NAME as portal_owner
 from Products.ATContentTypes.content.folder import ATBTreeFolder
diff --git a/Products/ATContentTypes/tests/test_atlink.py b/Products/ATContentTypes/tests/test_atlink.py
index 13de48d..16ebb49 100644
--- a/Products/ATContentTypes/tests/test_atlink.py
+++ b/Products/ATContentTypes/tests/test_atlink.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.Archetypes import atapi
 from Products.Archetypes.interfaces.layer import ILayerContainer
 from Products.ATContentTypes.content.link import ATLink
diff --git a/Products/ATContentTypes/tests/test_atnewsitem.py b/Products/ATContentTypes/tests/test_atnewsitem.py
index 3987b4d..678e444 100644
--- a/Products/ATContentTypes/tests/test_atnewsitem.py
+++ b/Products/ATContentTypes/tests/test_atnewsitem.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.Archetypes import atapi
 from Products.Archetypes.interfaces.layer import ILayerContainer
 from Products.ATContentTypes.content.newsitem import ATNewsItem
diff --git a/Products/ATContentTypes/tests/test_attopic.py b/Products/ATContentTypes/tests/test_attopic.py
index 5e61818..bc3cb13 100644
--- a/Products/ATContentTypes/tests/test_attopic.py
+++ b/Products/ATContentTypes/tests/test_attopic.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from OFS.interfaces import IOrderedContainer
 from Products.Archetypes import atapi
 from Products.Archetypes.Field import BooleanField
diff --git a/Products/ATContentTypes/tests/test_browserdefaultmixin.py b/Products/ATContentTypes/tests/test_browserdefaultmixin.py
index 173f1dc..ecc06c3 100644
--- a/Products/ATContentTypes/tests/test_browserdefaultmixin.py
+++ b/Products/ATContentTypes/tests/test_browserdefaultmixin.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes import permission
 from Products.ATContentTypes.tests import atcttestcase
 from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin
diff --git a/Products/ATContentTypes/tests/test_bugs.py b/Products/ATContentTypes/tests/test_bugs.py
index 787e91a..03b6b6f 100644
--- a/Products/ATContentTypes/tests/test_bugs.py
+++ b/Products/ATContentTypes/tests/test_bugs.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 from Products.ATContentTypes.tests import atcttestcase
 from Products.validation.interfaces.IValidator import IValidationChain
diff --git a/Products/ATContentTypes/tests/test_constraintypes.py b/Products/ATContentTypes/tests/test_constraintypes.py
index c30b9a4..806048b 100644
--- a/Products/ATContentTypes/tests/test_constraintypes.py
+++ b/Products/ATContentTypes/tests/test_constraintypes.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl.SecurityManagement import newSecurityManager
 from Products.ATContentTypes.lib import constraintypes
 from Products.ATContentTypes.tests import atcttestcase
diff --git a/Products/ATContentTypes/tests/test_content_profile.py b/Products/ATContentTypes/tests/test_content_profile.py
index c130ea3..6a101f0 100644
--- a/Products/ATContentTypes/tests/test_content_profile.py
+++ b/Products/ATContentTypes/tests/test_content_profile.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.testing.bbb import PloneTestCase
 from Products.ATContentTypes import setuphandlers
 
diff --git a/Products/ATContentTypes/tests/test_controlpanel.py b/Products/ATContentTypes/tests/test_controlpanel.py
index b7b138a..babb62c 100644
--- a/Products/ATContentTypes/tests/test_controlpanel.py
+++ b/Products/ATContentTypes/tests/test_controlpanel.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.testing.bbb import PloneTestCase
 
 
diff --git a/Products/ATContentTypes/tests/test_criteria.py b/Products/ATContentTypes/tests/test_criteria.py
index e4b672c..43d2cf8 100644
--- a/Products/ATContentTypes/tests/test_criteria.py
+++ b/Products/ATContentTypes/tests/test_criteria.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from DateTime import DateTime
 from Missing import MV
 from Products.Archetypes.interfaces import IExtensibleMetadata
diff --git a/Products/ATContentTypes/tests/test_default_mimetypes.py b/Products/ATContentTypes/tests/test_default_mimetypes.py
index 8a55255..0cf413d 100644
--- a/Products/ATContentTypes/tests/test_default_mimetypes.py
+++ b/Products/ATContentTypes/tests/test_default_mimetypes.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # test initialisation and setup
 
 from Products.ATContentTypes.tests.atcttestcase import ATCTSiteTestCase
diff --git a/Products/ATContentTypes/tests/test_installation.py b/Products/ATContentTypes/tests/test_installation.py
index 6df8976..e8743c8 100644
--- a/Products/ATContentTypes/tests/test_installation.py
+++ b/Products/ATContentTypes/tests/test_installation.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.config import SWALLOW_IMAGE_RESIZE_EXCEPTIONS
 from Products.ATContentTypes.config import TOOLNAME
 from Products.ATContentTypes.tests import atcttestcase
diff --git a/Products/ATContentTypes/tests/test_interfaces.py b/Products/ATContentTypes/tests/test_interfaces.py
index 28062ba..3073cde 100644
--- a/Products/ATContentTypes/tests/test_interfaces.py
+++ b/Products/ATContentTypes/tests/test_interfaces.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.tool.factory import FactoryTool
 from Products.ATContentTypes.tool.factory import TempFolder
 from Products.ATContentTypes.tool.metadata import MetadataTool
diff --git a/Products/ATContentTypes/tests/test_migrations.py b/Products/ATContentTypes/tests/test_migrations.py
index af5ab75..d7b14ca 100644
--- a/Products/ATContentTypes/tests/test_migrations.py
+++ b/Products/ATContentTypes/tests/test_migrations.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.config import TOOLNAME
 from Products.ATContentTypes.migration.v1_2 import upgradeATCTTool
 from Products.ATContentTypes.tests import atcttestcase
diff --git a/Products/ATContentTypes/tests/test_portal_factory.py b/Products/ATContentTypes/tests/test_portal_factory.py
index 5261162..55e723d 100644
--- a/Products/ATContentTypes/tests/test_portal_factory.py
+++ b/Products/ATContentTypes/tests/test_portal_factory.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import getSecurityManager
 from AccessControl import Permissions
 from plone.app.testing import TEST_USER_ID
diff --git a/Products/ATContentTypes/tests/test_skinScripts.py b/Products/ATContentTypes/tests/test_skinScripts.py
index aad8fe8..a1b68ff 100644
--- a/Products/ATContentTypes/tests/test_skinScripts.py
+++ b/Products/ATContentTypes/tests/test_skinScripts.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from DateTime import DateTime
 from Products.ATContentTypes.tests import atcttestcase
 
diff --git a/Products/ATContentTypes/tests/test_tool.py b/Products/ATContentTypes/tests/test_tool.py
index 1541fdc..dc244c1 100644
--- a/Products/ATContentTypes/tests/test_tool.py
+++ b/Products/ATContentTypes/tests/test_tool.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.config import TOOLNAME
 from Products.ATContentTypes.interfaces import IATCTTool
 from Products.ATContentTypes.tests import atctftestcase
diff --git a/Products/ATContentTypes/tests/test_topictool.py b/Products/ATContentTypes/tests/test_topictool.py
index b04c448..c29c6bf 100644
--- a/Products/ATContentTypes/tests/test_topictool.py
+++ b/Products/ATContentTypes/tests/test_topictool.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.config import TOOLNAME
 from Products.ATContentTypes.interfaces import IATCTTopicsTool
 from Products.ATContentTypes.tests import atcttestcase
diff --git a/Products/ATContentTypes/tests/utils.py b/Products/ATContentTypes/tests/utils.py
index d7bc358..a92edb5 100644
--- a/Products/ATContentTypes/tests/utils.py
+++ b/Products/ATContentTypes/tests/utils.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from App.Common import package_home
diff --git a/Products/ATContentTypes/thirdparty/exif.py b/Products/ATContentTypes/thirdparty/exif.py
index b86b5e9..cf5efef 100644
--- a/Products/ATContentTypes/thirdparty/exif.py
+++ b/Products/ATContentTypes/thirdparty/exif.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # Library to extract EXIF information in digital camera image files
 #
 # To use this library call with:
diff --git a/Products/ATContentTypes/tool/__init__.py b/Products/ATContentTypes/tool/__init__.py
index 792d600..40a96af 100644
--- a/Products/ATContentTypes/tool/__init__.py
+++ b/Products/ATContentTypes/tool/__init__.py
@@ -1 +1 @@
-#
+# -*- coding: utf-8 -*-
diff --git a/Products/ATContentTypes/tool/atct.py b/Products/ATContentTypes/tool/atct.py
index 7089aa8..e499e48 100644
--- a/Products/ATContentTypes/tool/atct.py
+++ b/Products/ATContentTypes/tool/atct.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from cStringIO import StringIO
diff --git a/Products/ATContentTypes/tool/factory.py b/Products/ATContentTypes/tool/factory.py
index dcdc956..a76d0b8 100644
--- a/Products/ATContentTypes/tool/factory.py
+++ b/Products/ATContentTypes/tool/factory.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from AccessControl import getSecurityManager
 from AccessControl import Owned
diff --git a/Products/ATContentTypes/tool/metadata.py b/Products/ATContentTypes/tool/metadata.py
index 53ff8a4..701d814 100644
--- a/Products/ATContentTypes/tool/metadata.py
+++ b/Products/ATContentTypes/tool/metadata.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 ##############################################################################
 #
 # Copyright (c) 2001 Zope Foundation and Contributors.
diff --git a/Products/ATContentTypes/tool/topic.py b/Products/ATContentTypes/tool/topic.py
index 6e465e7..0625b49 100644
--- a/Products/ATContentTypes/tool/topic.py
+++ b/Products/ATContentTypes/tool/topic.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from ExtensionClass import Base
diff --git a/Products/ATContentTypes/utils.py b/Products/ATContentTypes/utils.py
index a66045d..bd1f13a 100644
--- a/Products/ATContentTypes/utils.py
+++ b/Products/ATContentTypes/utils.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from DateTime import DateTime
 
 import datetime
diff --git a/Products/__init__.py b/Products/__init__.py
index f48ad10..85880ef 100644
--- a/Products/__init__.py
+++ b/Products/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
 try:
     __import__('pkg_resources').declare_namespace(__name__)


Repository: Products.ATContentTypes


Branch: refs/heads/master
Date: 2016-02-05T19:22:45+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.ATContentTypes/commit/2db18b913bc9b108cfb39de6df10f51d4918d2e7

Removed unneeded imports.

Or added '# noqa' to stop flake8 from complaining,
especially in __init__.py files.

Files changed:
M Products/ATContentTypes/__init__.py
M Products/ATContentTypes/atct.py
M Products/ATContentTypes/config.py
M Products/ATContentTypes/configuration/__init__.py
M Products/ATContentTypes/configuration/datatype.py
M Products/ATContentTypes/content/__init__.py
M Products/ATContentTypes/criteria/__init__.py
M Products/ATContentTypes/interfaces/__init__.py
M Products/ATContentTypes/interfaces/interfaces.py

diff --git a/Products/ATContentTypes/__init__.py b/Products/ATContentTypes/__init__.py
index cf23055..adcb404 100644
--- a/Products/ATContentTypes/__init__.py
+++ b/Products/ATContentTypes/__init__.py
@@ -1,22 +1,22 @@
 # -*- coding: utf-8 -*-
 import os.path
 import sys
-import logging
-logger = logging.getLogger('ATCT')
 
+# This must be at the top, because the exif module is needed in
+# lib/imagetransform.py.
 ATCT_DIR = os.path.abspath(os.path.dirname(__file__))
 sys.path.insert(3, os.path.join(ATCT_DIR, 'thirdparty'))
 
 from AccessControl import ModuleSecurityInfo
 
+from Products.ATContentTypes.config import GLOBALS
 from Products.ATContentTypes.config import HAS_LINGUA_PLONE
-from Products.ATContentTypes.config import SKINS_DIR
 from Products.ATContentTypes.config import PROJECTNAME
-from Products.ATContentTypes.config import GLOBALS
+from Products.ATContentTypes.config import SKINS_DIR
 
+from Products.CMFCore.DirectoryView import registerDirectory
 from Products.CMFCore.utils import ContentInit
 from Products.CMFCore.utils import ToolInit
-from Products.CMFCore.DirectoryView import registerDirectory
 
 # Import "ATCTMessageFactory as _" to create messages in atcontenttypes domain
 from zope.i18nmessageid import MessageFactory
@@ -28,10 +28,10 @@
 import Products.ATContentTypes.configuration
 import Products.ATContentTypes.lib.validators
 
-# second leven imports: content types, criteria
+# second level imports: content types, criteria
 # the content types are depending on the validators and configuration
-import Products.ATContentTypes.content
-import Products.ATContentTypes.criteria
+import Products.ATContentTypes.content  # noqa
+import Products.ATContentTypes.criteria  # noqa
 
 # misc imports
 from Products.ATContentTypes.tool.atct import ATCTTool
diff --git a/Products/ATContentTypes/atct.py b/Products/ATContentTypes/atct.py
index d250927..0fdb69b 100644
--- a/Products/ATContentTypes/atct.py
+++ b/Products/ATContentTypes/atct.py
@@ -1,54 +1,54 @@
 # -*- coding: utf-8 -*-
-from Products.ATContentTypes.content.base import ATCTBTreeFolder
-from Products.ATContentTypes.content.base import ATCTContent
-from Products.ATContentTypes.content.base import ATCTFileContent
-from Products.ATContentTypes.content.base import ATCTFolder
-from Products.ATContentTypes.content.base import ATCTOrderedFolder
-from Products.ATContentTypes.content.document import ATDocument
-from Products.ATContentTypes.content.document import ATDocumentSchema
-from Products.ATContentTypes.content.event import ATEvent
-from Products.ATContentTypes.content.event import ATEventSchema
-from Products.ATContentTypes.content.file import ATFile
-from Products.ATContentTypes.content.file import ATFileSchema
-from Products.ATContentTypes.content.folder import ATBTreeFolder
-from Products.ATContentTypes.content.folder import ATBTreeFolderSchema
-from Products.ATContentTypes.content.folder import ATFolder
-from Products.ATContentTypes.content.folder import ATFolderSchema
-from Products.ATContentTypes.content.image import ATImage
-from Products.ATContentTypes.content.image import ATImageSchema
-from Products.ATContentTypes.content.link import ATLink
-from Products.ATContentTypes.content.link import ATLinkSchema
-from Products.ATContentTypes.content.newsitem import ATNewsItem
-from Products.ATContentTypes.content.newsitem import ATNewsItemSchema
-from Products.ATContentTypes.content.schemata import ATContentTypeSchema
-from Products.ATContentTypes.content.topic import ATTopic
-from Products.ATContentTypes.content.topic import ATTopicSchema
-from Products.ATContentTypes.criteria import ALL_INDICES
-from Products.ATContentTypes.criteria import DATE_INDICES
-from Products.ATContentTypes.criteria import LIST_INDICES
-from Products.ATContentTypes.criteria import registerCriterion
-from Products.ATContentTypes.criteria import SORT_INDICES
-from Products.ATContentTypes.criteria import STRING_INDICES
-from Products.ATContentTypes.criteria import unregisterCriterion
-from Products.ATContentTypes.criteria.base import ATBaseCriterion
-from Products.ATContentTypes.criteria.boolean import ATBooleanCriterion
-from Products.ATContentTypes.criteria.boolean import ATBooleanCriterionSchema
-from Products.ATContentTypes.criteria.date import ATDateCriteria
-from Products.ATContentTypes.criteria.date import ATDateCriteriaSchema
-from Products.ATContentTypes.criteria.daterange import ATDateRangeCriterion
-from Products.ATContentTypes.criteria.daterange import ATDateRangeCriterionSchema
-from Products.ATContentTypes.criteria.list import ATListCriterion
-from Products.ATContentTypes.criteria.list import ATListCriterionSchema
-from Products.ATContentTypes.criteria.portaltype import ATPortalTypeCriterion
-from Products.ATContentTypes.criteria.portaltype import ATPortalTypeCriterionSchema
-from Products.ATContentTypes.criteria.reference import ATReferenceCriterion
-from Products.ATContentTypes.criteria.reference import ATReferenceCriterionSchema
-from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
-from Products.ATContentTypes.criteria.selection import ATSelectionCriterion
-from Products.ATContentTypes.criteria.selection import ATSelectionCriterionSchema
-from Products.ATContentTypes.criteria.simpleint import ATSimpleIntCriterion
-from Products.ATContentTypes.criteria.simpleint import ATSimpleIntCriterionSchema
-from Products.ATContentTypes.criteria.simplestring import ATSimpleStringCriterion
-from Products.ATContentTypes.criteria.simplestring import ATSimpleStringCriterionSchema
-from Products.ATContentTypes.criteria.sort import ATSortCriterion
-from Products.ATContentTypes.criteria.sort import ATSortCriterionSchema
+from Products.ATContentTypes.content.base import ATCTBTreeFolder  # noqa
+from Products.ATContentTypes.content.base import ATCTContent  # noqa
+from Products.ATContentTypes.content.base import ATCTFileContent  # noqa
+from Products.ATContentTypes.content.base import ATCTFolder  # noqa
+from Products.ATContentTypes.content.base import ATCTOrderedFolder  # noqa
+from Products.ATContentTypes.content.document import ATDocument  # noqa
+from Products.ATContentTypes.content.document import ATDocumentSchema  # noqa
+from Products.ATContentTypes.content.event import ATEvent  # noqa
+from Products.ATContentTypes.content.event import ATEventSchema  # noqa
+from Products.ATContentTypes.content.file import ATFile  # noqa
+from Products.ATContentTypes.content.file import ATFileSchema  # noqa
+from Products.ATContentTypes.content.folder import ATBTreeFolder  # noqa
+from Products.ATContentTypes.content.folder import ATBTreeFolderSchema  # noqa
+from Products.ATContentTypes.content.folder import ATFolder  # noqa
+from Products.ATContentTypes.content.folder import ATFolderSchema  # noqa
+from Products.ATContentTypes.content.image import ATImage  # noqa
+from Products.ATContentTypes.content.image import ATImageSchema  # noqa
+from Products.ATContentTypes.content.link import ATLink  # noqa
+from Products.ATContentTypes.content.link import ATLinkSchema  # noqa
+from Products.ATContentTypes.content.newsitem import ATNewsItem  # noqa
+from Products.ATContentTypes.content.newsitem import ATNewsItemSchema  # noqa
+from Products.ATContentTypes.content.schemata import ATContentTypeSchema  # noqa
+from Products.ATContentTypes.content.topic import ATTopic  # noqa
+from Products.ATContentTypes.content.topic import ATTopicSchema  # noqa
+from Products.ATContentTypes.criteria import ALL_INDICES  # noqa
+from Products.ATContentTypes.criteria import DATE_INDICES  # noqa
+from Products.ATContentTypes.criteria import LIST_INDICES  # noqa
+from Products.ATContentTypes.criteria import registerCriterion  # noqa
+from Products.ATContentTypes.criteria import SORT_INDICES  # noqa
+from Products.ATContentTypes.criteria import STRING_INDICES  # noqa
+from Products.ATContentTypes.criteria import unregisterCriterion  # noqa
+from Products.ATContentTypes.criteria.base import ATBaseCriterion  # noqa
+from Products.ATContentTypes.criteria.boolean import ATBooleanCriterion  # noqa
+from Products.ATContentTypes.criteria.boolean import ATBooleanCriterionSchema  # noqa
+from Products.ATContentTypes.criteria.date import ATDateCriteria  # noqa
+from Products.ATContentTypes.criteria.date import ATDateCriteriaSchema  # noqa
+from Products.ATContentTypes.criteria.daterange import ATDateRangeCriterion  # noqa
+from Products.ATContentTypes.criteria.daterange import ATDateRangeCriterionSchema  # noqa
+from Products.ATContentTypes.criteria.list import ATListCriterion  # noqa
+from Products.ATContentTypes.criteria.list import ATListCriterionSchema  # noqa
+from Products.ATContentTypes.criteria.portaltype import ATPortalTypeCriterion  # noqa
+from Products.ATContentTypes.criteria.portaltype import ATPortalTypeCriterionSchema  # noqa
+from Products.ATContentTypes.criteria.reference import ATReferenceCriterion  # noqa
+from Products.ATContentTypes.criteria.reference import ATReferenceCriterionSchema  # noqa
+from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema  # noqa
+from Products.ATContentTypes.criteria.selection import ATSelectionCriterion  # noqa
+from Products.ATContentTypes.criteria.selection import ATSelectionCriterionSchema  # noqa
+from Products.ATContentTypes.criteria.simpleint import ATSimpleIntCriterion  # noqa
+from Products.ATContentTypes.criteria.simpleint import ATSimpleIntCriterionSchema  # noqa
+from Products.ATContentTypes.criteria.simplestring import ATSimpleStringCriterion  # noqa
+from Products.ATContentTypes.criteria.simplestring import ATSimpleStringCriterionSchema  # noqa
+from Products.ATContentTypes.criteria.sort import ATSortCriterion  # noqa
+from Products.ATContentTypes.criteria.sort import ATSortCriterionSchema  # noqa
diff --git a/Products/ATContentTypes/config.py b/Products/ATContentTypes/config.py
index abe632a..1c5f369 100644
--- a/Products/ATContentTypes/config.py
+++ b/Products/ATContentTypes/config.py
@@ -5,7 +5,6 @@
 
 Use ZConfig to configure ATCT
 """
-__docformat__ = 'restructuredtext'
 
 from Products.ATContentTypes.configuration import zconf
 
@@ -69,7 +68,7 @@
 
 try:
     # Won't use pkg_resources because of the packaging issue
-    from PIL import Image
+    from PIL import Image  # noqa
 except ImportError:
     HAS_PIL = False
 else:
diff --git a/Products/ATContentTypes/configuration/__init__.py b/Products/ATContentTypes/configuration/__init__.py
index 39cca7e..997848e 100644
--- a/Products/ATContentTypes/configuration/__init__.py
+++ b/Products/ATContentTypes/configuration/__init__.py
@@ -1,4 +1,4 @@
 # -*- coding: utf-8 -*-
-from Products.ATContentTypes.configuration.config import zconf
-from Products.ATContentTypes.configuration.config import handler
-from Products.ATContentTypes.configuration.config import conf_file
+from Products.ATContentTypes.configuration.config import zconf  # noqa
+from Products.ATContentTypes.configuration.config import handler  # noqa
+from Products.ATContentTypes.configuration.config import conf_file  # noqa
diff --git a/Products/ATContentTypes/configuration/datatype.py b/Products/ATContentTypes/configuration/datatype.py
index 586e97e..6c4d776 100644
--- a/Products/ATContentTypes/configuration/datatype.py
+++ b/Products/ATContentTypes/configuration/datatype.py
@@ -41,8 +41,8 @@ def permission_handler(value):
     else:
         permission = _getValueFromDottedName(value)
     if not isinstance(permission, basestring):
-        raise ValueError('Permission %s is not a string: %s' % (permission,
-                                                                type(permission)))
+        raise ValueError('Permission %s is not a string: %s' % (
+            permission, type(permission)))
     return permission
 
 
@@ -100,7 +100,6 @@ def pil_algo(value):
     available = ('NEAREST', 'BILINEAR', 'BICUBIC', 'ANTIALIAS')
     if value not in available:
         raise ValueError("unknown algo %s" % value)
-    import PIL.Image
     return getattr(PIL.Image, value)
 
 
@@ -110,7 +109,7 @@ class BaseFactory(object):
 
     def __init__(self, section):
         self.name = section.getSectionName()
-        #self._parsed = False
+        # self._parsed = False
         self._section = section
         self._names = {}
         self._parse()
@@ -139,7 +138,8 @@ def _parse(self):
         self.set('enable', sec.enable)
         cfg = {}
         for id in ('char_encoding', 'drop_empty_paras', 'drop_font_tags',
-                   'indent_spaces', 'input_xml', 'output_xhtml', 'quiet', 'show_warnings',
+                   'indent_spaces', 'input_xml', 'output_xhtml', 'quiet',
+                   'show_warnings',
                    'tab_size', 'word_2000', 'wrap'):
             cfg[id] = getattr(sec, id)
         self.set('options', cfg)
diff --git a/Products/ATContentTypes/content/__init__.py b/Products/ATContentTypes/content/__init__.py
index badce20..d637478 100644
--- a/Products/ATContentTypes/content/__init__.py
+++ b/Products/ATContentTypes/content/__init__.py
@@ -1,9 +1,9 @@
 # -*- coding: utf-8 -*-
-import Products.ATContentTypes.content.link
-import Products.ATContentTypes.content.image
-import Products.ATContentTypes.content.document
-import Products.ATContentTypes.content.file
-import Products.ATContentTypes.content.event
-import Products.ATContentTypes.content.newsitem
-import Products.ATContentTypes.content.folder
-import Products.ATContentTypes.content.topic
+import Products.ATContentTypes.content.link  # noqa
+import Products.ATContentTypes.content.image  # noqa
+import Products.ATContentTypes.content.document  # noqa
+import Products.ATContentTypes.content.file  # noqa
+import Products.ATContentTypes.content.event  # noqa
+import Products.ATContentTypes.content.newsitem  # noqa
+import Products.ATContentTypes.content.folder  # noqa
+import Products.ATContentTypes.content.topic  # noqa
diff --git a/Products/ATContentTypes/criteria/__init__.py b/Products/ATContentTypes/criteria/__init__.py
index 837f9aa..7e93420 100644
--- a/Products/ATContentTypes/criteria/__init__.py
+++ b/Products/ATContentTypes/criteria/__init__.py
@@ -1,7 +1,6 @@
 # -*- coding: utf-8 -*-
 from UserDict import UserDict
 from Products.Archetypes.atapi import registerType
-from Products.Archetypes.ClassGen import generateClass
 from Products.ATContentTypes.config import PROJECTNAME
 from types import StringType
 
@@ -109,16 +108,16 @@ def getPortalTypes(self):
            'LIST_INDICES', 'SORT_INDICES', )
 
 # criteria
-from Products.ATContentTypes.criteria.boolean import ATBooleanCriterion
-from Products.ATContentTypes.criteria.date import ATDateCriteria
-from Products.ATContentTypes.criteria.daterange import ATDateRangeCriterion
-from Products.ATContentTypes.criteria.list import ATListCriterion
-from Products.ATContentTypes.criteria.portaltype import ATPortalTypeCriterion
-from Products.ATContentTypes.criteria.reference import ATReferenceCriterion
-from Products.ATContentTypes.criteria.selection import ATSelectionCriterion
-from Products.ATContentTypes.criteria.simpleint import ATSimpleIntCriterion
-from Products.ATContentTypes.criteria.simplestring import ATSimpleStringCriterion
-from Products.ATContentTypes.criteria.sort import ATSortCriterion
-from Products.ATContentTypes.criteria.currentauthor import ATCurrentAuthorCriterion
-from Products.ATContentTypes.criteria.path import ATPathCriterion
-from Products.ATContentTypes.criteria.relativepath import ATRelativePathCriterion
+from Products.ATContentTypes.criteria.boolean import ATBooleanCriterion  # noqa
+from Products.ATContentTypes.criteria.date import ATDateCriteria  # noqa
+from Products.ATContentTypes.criteria.daterange import ATDateRangeCriterion  # noqa
+from Products.ATContentTypes.criteria.list import ATListCriterion  # noqa
+from Products.ATContentTypes.criteria.portaltype import ATPortalTypeCriterion  # noqa
+from Products.ATContentTypes.criteria.reference import ATReferenceCriterion  # noqa
+from Products.ATContentTypes.criteria.selection import ATSelectionCriterion  # noqa
+from Products.ATContentTypes.criteria.simpleint import ATSimpleIntCriterion  # noqa
+from Products.ATContentTypes.criteria.simplestring import ATSimpleStringCriterion  # noqa
+from Products.ATContentTypes.criteria.sort import ATSortCriterion  # noqa
+from Products.ATContentTypes.criteria.currentauthor import ATCurrentAuthorCriterion  # noqa
+from Products.ATContentTypes.criteria.path import ATPathCriterion  # noqa
+from Products.ATContentTypes.criteria.relativepath import ATRelativePathCriterion  # noqa
diff --git a/Products/ATContentTypes/interfaces/__init__.py b/Products/ATContentTypes/interfaces/__init__.py
index 53fe2c7..19f67b8 100644
--- a/Products/ATContentTypes/interfaces/__init__.py
+++ b/Products/ATContentTypes/interfaces/__init__.py
@@ -1,25 +1,25 @@
 # -*- coding: utf-8 -*-
-from Products.ATContentTypes.interfaces.document import IATDocument
-from Products.ATContentTypes.interfaces.event import IATEvent
-from Products.ATContentTypes.interfaces.factory import IFactoryTool
-from Products.ATContentTypes.interfaces.file import IATFile
-from Products.ATContentTypes.interfaces.file import IFileContent
-from Products.ATContentTypes.interfaces.folder import IATBTreeFolder
-from Products.ATContentTypes.interfaces.folder import IATFolder
-from Products.ATContentTypes.interfaces.folder import IFilterFolder
-from Products.ATContentTypes.interfaces.image import IATImage
-from Products.ATContentTypes.interfaces.image import IImageContent
-from Products.ATContentTypes.interfaces.interfaces import IATCTTool
-from Products.ATContentTypes.interfaces.interfaces import IATContentType
-from Products.ATContentTypes.interfaces.interfaces import ICalendarSupport
-from Products.ATContentTypes.interfaces.interfaces import IHistoryAware
-from Products.ATContentTypes.interfaces.interfaces import ISelectableConstrainTypes
-from Products.ATContentTypes.interfaces.interfaces import ITextContent
-from Products.ATContentTypes.interfaces.link import IATLink
-from Products.ATContentTypes.interfaces.news import IATNewsItem
-from Products.ATContentTypes.interfaces.topic import IATCTTopicsTool
-from Products.ATContentTypes.interfaces.topic import IATTopic
-from Products.ATContentTypes.interfaces.topic import IATTopicCriterion
-from Products.ATContentTypes.interfaces.topic import IATTopicSearchCriterion
-from Products.ATContentTypes.interfaces.topic import IATTopicSortCriterion
-from Products.ATContentTypes.interfaces.factories import IATCTFileFactory
+from Products.ATContentTypes.interfaces.document import IATDocument  # noqa
+from Products.ATContentTypes.interfaces.event import IATEvent  # noqa
+from Products.ATContentTypes.interfaces.factory import IFactoryTool  # noqa
+from Products.ATContentTypes.interfaces.file import IATFile  # noqa
+from Products.ATContentTypes.interfaces.file import IFileContent  # noqa
+from Products.ATContentTypes.interfaces.folder import IATBTreeFolder  # noqa
+from Products.ATContentTypes.interfaces.folder import IATFolder  # noqa
+from Products.ATContentTypes.interfaces.folder import IFilterFolder  # noqa
+from Products.ATContentTypes.interfaces.image import IATImage  # noqa
+from Products.ATContentTypes.interfaces.image import IImageContent  # noqa
+from Products.ATContentTypes.interfaces.interfaces import IATCTTool  # noqa
+from Products.ATContentTypes.interfaces.interfaces import IATContentType  # noqa
+from Products.ATContentTypes.interfaces.interfaces import ICalendarSupport  # noqa
+from Products.ATContentTypes.interfaces.interfaces import IHistoryAware  # noqa
+from Products.ATContentTypes.interfaces.interfaces import ISelectableConstrainTypes  # noqa
+from Products.ATContentTypes.interfaces.interfaces import ITextContent  # noqa
+from Products.ATContentTypes.interfaces.link import IATLink  # noqa
+from Products.ATContentTypes.interfaces.news import IATNewsItem  # noqa
+from Products.ATContentTypes.interfaces.topic import IATCTTopicsTool  # noqa
+from Products.ATContentTypes.interfaces.topic import IATTopic  # noqa
+from Products.ATContentTypes.interfaces.topic import IATTopicCriterion  # noqa
+from Products.ATContentTypes.interfaces.topic import IATTopicSearchCriterion  # noqa
+from Products.ATContentTypes.interfaces.topic import IATTopicSortCriterion  # noqa
+from Products.ATContentTypes.interfaces.factories import IATCTFileFactory  # noqa
diff --git a/Products/ATContentTypes/interfaces/interfaces.py b/Products/ATContentTypes/interfaces/interfaces.py
index 9937eb1..f9fddae 100644
--- a/Products/ATContentTypes/interfaces/interfaces.py
+++ b/Products/ATContentTypes/interfaces/interfaces.py
@@ -1,9 +1,11 @@
 # -*- coding: utf-8 -*-
 from Products.Archetypes.interfaces import IATHistoryAware
 from Products.Archetypes.interfaces import IBaseContent
-from Products.Archetypes.interfaces import IBaseFolder
+# Keep import for backwards compatibility:
+from Products.Archetypes.interfaces import IBaseFolder  # noqa
 from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault
-from Products.CMFPlone.interfaces import ISelectableConstrainTypes
+# Keep import for backwards compatibility:
+from Products.CMFPlone.interfaces import ISelectableConstrainTypes  # noqa
 from zope.interface import Attribute
 from zope.interface import Interface
 


Repository: Products.ATContentTypes


Branch: refs/heads/master
Date: 2016-02-05T19:27:15+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.ATContentTypes/commit/b8b5830d82e5cdc2c7c01d01cacec211188252c5

Removed unused local variables.

Files changed:
M Products/ATContentTypes/criteria/daterange.py
M Products/ATContentTypes/thirdparty/exif.py

diff --git a/Products/ATContentTypes/criteria/daterange.py b/Products/ATContentTypes/criteria/daterange.py
index 2439c97..a089afc 100644
--- a/Products/ATContentTypes/criteria/daterange.py
+++ b/Products/ATContentTypes/criteria/daterange.py
@@ -27,8 +27,9 @@
                   widget=CalendarWidget(
                       label=_(u'label_date_range_criteria_start',
                               default=u'Start Date'),
-                      description=_(u'help_date_range_criteria_start',
-                                    default=u'The beginning of the date range to search')
+                      description=_(
+                          u'help_date_range_criteria_start',
+                          default=u'The beginning of the date range to search')
                   ),
                   ),
     DateTimeField('end',
@@ -39,8 +40,9 @@
                   widget=CalendarWidget(
                       label=_(u'label_date_range_criteria_end',
                               default=u'End Date'),
-                      description=_(u'help_date_range_criteria_end',
-                                    default=u'The ending of the date range to search.')
+                      description=_(
+                          u'help_date_range_criteria_end',
+                          default=u'The ending of the date range to search.')
 
                   ),
                   ),
@@ -66,8 +68,6 @@ def Value(self):
     security.declareProtected(View, 'getCriteriaItems')
 
     def getCriteriaItems(self):
-        result = []
-
         field = self.Field()
         value = self.Value()
 
diff --git a/Products/ATContentTypes/thirdparty/exif.py b/Products/ATContentTypes/thirdparty/exif.py
index cf5efef..4ba4630 100644
--- a/Products/ATContentTypes/thirdparty/exif.py
+++ b/Products/ATContentTypes/thirdparty/exif.py
@@ -91,6 +91,8 @@
 # 04-DEC-05 JFROCHE Reduce number of objects created.
 #
 
+import logging
+
 
 # XXX: These are here because removing them broke existing ZODB instances.
 # we should remove them completely and have migrations to fix them up instead.
@@ -101,9 +103,6 @@ class Ratio:
 class IFD_Tag:
     pass
 
-import logging
-
-
 LOG = logging.getLogger('exif')
 
 # field type descriptions as (length, abbreviation, full name) tuples
@@ -248,7 +247,8 @@ class IFD_Tag:
     0x920A: ('FocalLength', ),
     0x927C: ('MakerNote', ),
     # print as string
-    0x9286: ('UserComment', lambda x: isinstance(x, str) and x or ''.join(map(chr, x))),
+    0x9286: ('UserComment', lambda x: isinstance(x, str) and x or ''.join(map(
+        chr, x))),
     0x9290: ('SubSecTime', ),
     0x9291: ('SubSecTimeOriginal', ),
     0x9292: ('SubSecTimeDigitized', ),
@@ -884,8 +884,8 @@ def dump_IFD(self, ifd, ifd_name, dict=EXIF_TAGS, relative=0):
                 self.tags[ifd_name + ' ' +
                           tag_name] = (values[0], printable, field_offset)
             if self.debug:
-                print ' debug:   %s: %s' % (tag_name,
-                                            repr(self.tags[ifd_name + ' ' + tag_name]))
+                print ' debug:   %s: %s' % (
+                    tag_name, repr(self.tags[ifd_name + ' ' + tag_name]))
 
     # decode all the camera-specific MakerNote formats
 
@@ -909,7 +909,7 @@ def dump_IFD(self, ifd, ifd_name, dict=EXIF_TAGS, relative=0):
     def decode_maker_note(self):
         note = self.tags['EXIF MakerNote']
         make = self.tags['Image Make'][1]
-        model = self.tags['Image Model'][1]
+        # model = self.tags['Image Model'][1]
 
         # Nikon
         # The maker note usually starts with the word Nikon, followed by the
@@ -1036,7 +1036,7 @@ def process_file(file, debug=0):
             IFD_name = 'Image'
         elif ctr == 1:
             IFD_name = 'Thumbnail'
-            thumb_ifd = i
+            # thumb_ifd = i
         else:
             IFD_name = 'IFD %d' % ctr
         if debug:
@@ -1070,7 +1070,6 @@ def process_file(file, debug=0):
         except:
             pass
         del hdr.tags['EXIF MakerNote']
-    dict = {}
     tags = sorted(hdr.tags.keys())
     for tag in tags:
         hdr.tags[tag] = hdr.tags[tag][1]


Repository: Products.ATContentTypes


Branch: refs/heads/master
Date: 2016-02-05T20:42:17+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.ATContentTypes/commit/d6160c7d7fcce321e5b8a7b027d1f662cffccca2

Fixed too long lines.

Plus assorted other small pyflakes/pep8 changes.

Files changed:
M Products/ATContentTypes/browser/nextprevious.py
M Products/ATContentTypes/content/base.py
M Products/ATContentTypes/content/document.py
M Products/ATContentTypes/content/event.py
M Products/ATContentTypes/content/favorite.py
M Products/ATContentTypes/content/folder.py
M Products/ATContentTypes/content/image.py
M Products/ATContentTypes/content/newsitem.py
M Products/ATContentTypes/content/schemata.py
M Products/ATContentTypes/content/topic.py
M Products/ATContentTypes/criteria/__init__.py
M Products/ATContentTypes/criteria/date.py
M Products/ATContentTypes/criteria/daterange.py
M Products/ATContentTypes/criteria/list.py
M Products/ATContentTypes/criteria/relativepath.py
M Products/ATContentTypes/criteria/schemata.py
M Products/ATContentTypes/criteria/selection.py
M Products/ATContentTypes/criteria/simpleint.py
M Products/ATContentTypes/lib/calendarsupport.py
M Products/ATContentTypes/lib/constraintypes.py
M Products/ATContentTypes/lib/validators.py
M Products/ATContentTypes/setuphandlers.py
M Products/ATContentTypes/tests/atctftestcase.py
M Products/ATContentTypes/tests/atcttestcase.py
M Products/ATContentTypes/tests/test_atdocument.py
M Products/ATContentTypes/tests/test_atevent.py
M Products/ATContentTypes/tests/test_atfile.py
M Products/ATContentTypes/tests/test_atfolder.py
M Products/ATContentTypes/tests/test_atimage.py
M Products/ATContentTypes/tests/test_atlink.py
M Products/ATContentTypes/tests/test_atnewsitem.py
M Products/ATContentTypes/tests/test_attopic.py
M Products/ATContentTypes/tests/test_browserdefaultmixin.py
M Products/ATContentTypes/tests/test_calendar.py
M Products/ATContentTypes/tests/test_constraintypes.py
M Products/ATContentTypes/tests/test_controlpanel.py
M Products/ATContentTypes/tests/test_criteria.py
M Products/ATContentTypes/tests/test_doctests.py
M Products/ATContentTypes/tests/test_installation.py
M Products/ATContentTypes/tool/factory.py
M Products/ATContentTypes/tool/metadata.py
M Products/ATContentTypes/tool/topic.py

diff --git a/Products/ATContentTypes/browser/nextprevious.py b/Products/ATContentTypes/browser/nextprevious.py
index e244a58..46211bc 100644
--- a/Products/ATContentTypes/browser/nextprevious.py
+++ b/Products/ATContentTypes/browser/nextprevious.py
@@ -49,9 +49,8 @@ def itemRelatives(self, oid):
 
         # Get the previous item
         if position - 1 >= 0:
-            prev_brain = catalog(self.buildNextPreviousQuery(position=position - 1,
-                                                             range='max',
-                                                             sort_order='reverse'))
+            prev_brain = catalog(self.buildNextPreviousQuery(
+                position=position - 1, range='max', sort_order='reverse'))
             if prev_brain and len(prev_brain) > 0:
                 previous = self.buildNextPreviousItem(prev_brain[0])
 
@@ -63,8 +62,8 @@ def itemRelatives(self, oid):
             count = len(folder)
 
         if (position + 1) < count:
-            next_brain = catalog(self.buildNextPreviousQuery(position=position + 1,
-                                                             range='min'))
+            next_brain = catalog(self.buildNextPreviousQuery(
+                position=position + 1, range='min'))
 
             if next_brain and len(next_brain) > 0:
                 next = self.buildNextPreviousItem(next_brain[0])
diff --git a/Products/ATContentTypes/content/base.py b/Products/ATContentTypes/content/base.py
index b45ec8a..4353ec7 100644
--- a/Products/ATContentTypes/content/base.py
+++ b/Products/ATContentTypes/content/base.py
@@ -42,10 +42,6 @@
     from Products.Archetypes.atapi import BaseBTreeFolder
     from Products.Archetypes.atapi import registerType
 
-
-
-
-
 DEBUG = True
 LOG = logging.getLogger('ATCT')
 
@@ -141,7 +137,8 @@ def initializeArchetype(self, **kwargs):
     security.declarePrivate('copyLayoutFromParent')
 
     def copyLayoutFromParent(self):
-        """Copies the layout from the parent object if it's of the same type."""
+        """Copies the layout from the parent object if it's of the same type.
+        """
         parent = aq_parent(aq_inner(self))
         if parent is not None:
             # Only set the layout if we are the same type as out parent object
@@ -301,7 +298,8 @@ def get_content_type(self):
         """CMF compatibility method
         """
         f = self.getPrimaryField().getAccessor(self)()
-        return f and f.getContentType() or 'text/plain'  # 'application/octet-stream'
+        # 'application/octet-stream'
+        return f and f.getContentType() or 'text/plain'
 
     content_type = ComputedAttribute(get_content_type, 1)
 
@@ -342,7 +340,10 @@ def _cleanupFilename(self, filename, request=None):
         return filename and filename.encode(encoding) or None
 
     def _setATCTFileContent(self, value, **kwargs):
-        """Set ID based on name of uploaded file, Title, or possibly other conditions."""
+        """Set ID based on name of uploaded file, Title.
+
+        Or possibly other conditions.
+        """
         field = self.getPrimaryField()
         # set first then get the filename
         field.set(self, value, **kwargs)  # set is ok
@@ -367,15 +368,18 @@ def _setATCTFileContent(self, value, **kwargs):
                 # fails when the type is created using portal_factory.
                 transaction.savepoint(optimistic=True)
                 self.setId(clean_filename)
-            # Else, fall through to BaseObject._renameAfterCreation(),
-            # which Archetypes calls after all the fields have been set. It will
+            # Else, fall through to BaseObject._renameAfterCreation(), which
+            # Archetypes calls after all the fields have been set.  It will
             # rename me based on my Title iff my ID looks autogenerated (which
             # it does if we don't setId() here).
 
     security.declarePrivate('_should_set_id_to_filename')
 
     def _should_set_id_to_filename(self, filename, title):
-        """Given the name of the uploaded file and my title, return whether the filename should be used as my ID.
+        """Should the filename should be used as my ID?
+
+        Given the name of the uploaded file and my title, return whether
+        the filename should be used as my ID.
 
         Default implementation: if the filename changed, say that we should set
         my ID to it.
diff --git a/Products/ATContentTypes/content/document.py b/Products/ATContentTypes/content/document.py
index 7698ce9..00e674b 100644
--- a/Products/ATContentTypes/content/document.py
+++ b/Products/ATContentTypes/content/document.py
@@ -29,33 +29,37 @@
 
 
 ATDocumentSchema = ATContentTypeSchema.copy() + Schema((
-    TextField('text',
-              required=False,
-              searchable=True,
-              primary=True,
-              storage=AnnotationStorage(migrate=True),
-              validators=('isTidyHtmlWithCleanup',),
-              # validators=('isTidyHtml',),
-              default_output_type='text/x-html-safe',
-              widget=TinyMCEWidget(
-                  description='',
-                  label=_(u'label_body_text', default=u'Body Text'),
-                  rows=25,
-                  allow_file_upload=zconf.ATDocument.allow_document_upload),
-              ),
-
-    BooleanField('tableContents',
-                 required=False,
-                 languageIndependent=True,
-                 widget=BooleanWidget(
-                     label=_(
-                         u'help_enable_table_of_contents',
-                         default=u'Table of contents'),
-                     description=_(
-                         u'help_enable_table_of_contents_description',
-                         default=u'If selected, this will show a table of contents at the top of the page.')
-                 ),
-                 )),
+    TextField(
+        'text',
+        required=False,
+        searchable=True,
+        primary=True,
+        storage=AnnotationStorage(migrate=True),
+        validators=('isTidyHtmlWithCleanup',),
+        # validators=('isTidyHtml',),
+        default_output_type='text/x-html-safe',
+        widget=TinyMCEWidget(
+            description='',
+            label=_(u'label_body_text', default=u'Body Text'),
+            rows=25,
+            allow_file_upload=zconf.ATDocument.allow_document_upload),
+    ),
+
+    BooleanField(
+        'tableContents',
+        required=False,
+        languageIndependent=True,
+        widget=BooleanWidget(
+            label=_(
+                u'help_enable_table_of_contents',
+                default=u'Table of contents'),
+            description=_(
+                u'help_enable_table_of_contents_description',
+                default=u'If selected, this will show a table of contents '
+                u'at the top of the page.')
+        ),
+    )),
+
     marshall=RFC822Marshaller()
 )
 
@@ -95,8 +99,8 @@ def setFormat(self, value):
 
         The default mutator is overwritten to:
 
-          o add a conversion from stupid CMF content type (e.g. structured-text)
-            to real mime types used by MTR.
+          o add a conversion from stupid CMF content type
+            (e.g. structured-text) to real mime types used by MTR.
 
           o Set format to default format if value is empty
 
@@ -149,8 +153,8 @@ def guessMimetypeOfText(self):
             # no extension
             mimetype = mtr.classify(data)
 
-        if not mimetype or (isinstance(mimetype, TupleType)
-                            and not len(mimetype)):
+        if not mimetype or (
+                isinstance(mimetype, TupleType) and not len(mimetype)):
             # nothing found
             return None
 
diff --git a/Products/ATContentTypes/content/event.py b/Products/ATContentTypes/content/event.py
index c7d60ac..aa92bb4 100644
--- a/Products/ATContentTypes/content/event.py
+++ b/Products/ATContentTypes/content/event.py
@@ -29,105 +29,124 @@
 
 
 ATEventSchema = ATContentTypeSchema.copy() + Schema((
-    StringField('location',
-                searchable=True,
-                write_permission=ModifyPortalContent,
-                widget=StringWidget(
-                    description='',
-                    label=_(u'label_event_location', default=u'Event Location')
-                )),
-
-    DateTimeField('startDate',
-                  required=True,
-                  searchable=False,
-                  accessor='start',
-                  write_permission=ModifyPortalContent,
-                  default_method=DateTime,
-                  languageIndependent=True,
-                  widget=DatetimeWidget(
-                      description='',
-                      label=_(u'label_event_start', default=u'Event Starts')
-                  )),
-
-    DateTimeField('endDate',
-                  required=True,
-                  searchable=False,
-                  accessor='end',
-                  write_permission=ModifyPortalContent,
-                  default_method=DateTime,
-                  languageIndependent=True,
-                  widget=DatetimeWidget(
-                      description='',
-                      label=_(u'label_event_end', default=u'Event Ends')
-                  )),
-
-    TextField('text',
-              required=False,
-              searchable=True,
-              primary=True,
-              storage=AnnotationStorage(migrate=True),
-              validators=('isTidyHtmlWithCleanup',),
-              default_output_type='text/x-html-safe',
-              widget=TinyMCEWidget(
-                  description='',
-                  label=_(u'label_event_announcement',
-                          default=u'Event body text'),
-                  rows=25,
-                  allow_file_upload=zconf.ATDocument.allow_document_upload)),
-
-    LinesField('attendees',
-               languageIndependent=True,
-               searchable=True,
-               write_permission=ModifyPortalContent,
-               widget=LinesWidget(
-                   description='',
-                   label=_(u'label_event_attendees', default=u'Attendees')
-               )),
-
-    StringField('eventUrl',
-                required=False,
-                searchable=True,
-                accessor='event_url',
-                write_permission=ModifyPortalContent,
-                validators=('isURL',),
-                widget=StringWidget(
-                    description=_(u'help_event_url',
-                                  default=u"Web address with more info about the event. "
-                                  "Add http:// for external links."),
-                    label=_(u'label_event_url', default=u'Event URL')
-                )),
-
-    StringField('contactName',
-                required=False,
-                searchable=True,
-                accessor='contact_name',
-                write_permission=ModifyPortalContent,
-                widget=StringWidget(
-                    description='',
-                    label=_(u'label_contact_name', default=u'Contact Name')
-                )),
-
-    StringField('contactEmail',
-                required=False,
-                searchable=True,
-                accessor='contact_email',
-                write_permission=ModifyPortalContent,
-                validators=('isEmail',),
-                widget=StringWidget(
-                    description='',
-                    label=_(u'label_contact_email', default=u'Contact E-mail')
-                )),
-
-    StringField('contactPhone',
-                required=False,
-                searchable=True,
-                accessor='contact_phone',
-                write_permission=ModifyPortalContent,
-                validators=(),
-                widget=StringWidget(
-                    description='',
-                    label=_(u'label_contact_phone', default=u'Contact Phone')
-                )),
+    StringField(
+        'location',
+        searchable=True,
+        write_permission=ModifyPortalContent,
+        widget=StringWidget(
+            description='',
+            label=_(u'label_event_location', default=u'Event Location')
+        )
+    ),
+
+    DateTimeField(
+        'startDate',
+        required=True,
+        searchable=False,
+        accessor='start',
+        write_permission=ModifyPortalContent,
+        default_method=DateTime,
+        languageIndependent=True,
+        widget=DatetimeWidget(
+            description='',
+            label=_(u'label_event_start', default=u'Event Starts')
+        )
+    ),
+
+    DateTimeField(
+        'endDate',
+        required=True,
+        searchable=False,
+        accessor='end',
+        write_permission=ModifyPortalContent,
+        default_method=DateTime,
+        languageIndependent=True,
+        widget=DatetimeWidget(
+            description='',
+            label=_(u'label_event_end', default=u'Event Ends')
+        )
+    ),
+
+    TextField(
+        'text',
+        required=False,
+        searchable=True,
+        primary=True,
+        storage=AnnotationStorage(migrate=True),
+        validators=('isTidyHtmlWithCleanup',),
+        default_output_type='text/x-html-safe',
+        widget=TinyMCEWidget(
+            description='',
+            label=_(u'label_event_announcement',
+                    default=u'Event body text'),
+            rows=25,
+            allow_file_upload=zconf.ATDocument.allow_document_upload)
+    ),
+
+    LinesField(
+        'attendees',
+        languageIndependent=True,
+        searchable=True,
+        write_permission=ModifyPortalContent,
+        widget=LinesWidget(
+            description='',
+            label=_(u'label_event_attendees', default=u'Attendees')
+        )
+    ),
+
+    StringField(
+        'eventUrl',
+        required=False,
+        searchable=True,
+        accessor='event_url',
+        write_permission=ModifyPortalContent,
+        validators=('isURL',),
+        widget=StringWidget(
+            description=_(
+                u'help_event_url',
+                default=u"Web address with more info about the event. "
+                u"Add http:// for external links."),
+            label=_(u'label_event_url', default=u'Event URL')
+        )
+    ),
+
+    StringField(
+        'contactName',
+        required=False,
+        searchable=True,
+        accessor='contact_name',
+        write_permission=ModifyPortalContent,
+        widget=StringWidget(
+            description='',
+            label=_(u'label_contact_name', default=u'Contact Name')
+        )
+    ),
+
+    StringField(
+        'contactEmail',
+        required=False,
+        searchable=True,
+        accessor='contact_email',
+        write_permission=ModifyPortalContent,
+        validators=('isEmail',),
+        widget=StringWidget(
+            description='',
+            label=_(u'label_contact_email', default=u'Contact E-mail')
+        )
+    ),
+
+    StringField(
+        'contactPhone',
+        required=False,
+        searchable=True,
+        accessor='contact_phone',
+        write_permission=ModifyPortalContent,
+        validators=(),
+        widget=StringWidget(
+            description='',
+            label=_(u'label_contact_phone', default=u'Contact Phone')
+        )
+    ),
 ), marshall=RFC822Marshaller()
 )
 
@@ -146,7 +165,10 @@
 
 
 class ATEvent(ATCTContent, CalendarSupportMixin, HistoryAwareMixin):
-    """Information about an upcoming event, which can be displayed in the calendar."""
+    """Information about an upcoming event.
+
+    This can be displayed in the calendar.
+    """
 
     schema = ATEventSchema
 
@@ -177,8 +199,9 @@ def cmf_edit(
             event_url=None):
 
         if effectiveDay and effectiveMo and effectiveYear and start_time:
-            sdate = '%s-%s-%s %s %s' % (effectiveDay, effectiveMo, effectiveYear,
-                                        start_time, startAMPM)
+            sdate = '%s-%s-%s %s %s' % (
+                effectiveDay, effectiveMo, effectiveYear,
+                start_time, startAMPM)
         elif start_date:
             if not start_time:
                 start_time = '00:00:00'
@@ -225,16 +248,18 @@ def post_validate(self, REQUEST=None, errors=None):
             try:
                 end = DateTime(rendDate)
             except:
-                errors['endDate'] = _(u'error_invalid_end_date',
-                                      default=u'End date is not valid.')
+                errors['endDate'] = _(
+                    u'error_invalid_end_date',
+                    default=u'End date is not valid.')
         else:
             end = self.end()
         if rstartDate:
             try:
                 start = DateTime(rstartDate)
             except:
-                errors['startDate'] = _(u'error_invalid_start_date',
-                                        default=u'Start date is not valid.')
+                errors['startDate'] = _(
+                    u'error_invalid_start_date',
+                    default=u'Start date is not valid.')
         else:
             start = self.start()
 
@@ -243,8 +268,9 @@ def post_validate(self, REQUEST=None, errors=None):
             return
 
         if start > end:
-            errors['endDate'] = _(u'error_end_must_be_after_start_date',
-                                  default=u'End date must be after start date.')
+            errors['endDate'] = _(
+                u'error_end_must_be_after_start_date',
+                default=u'End date must be after start date.')
 
     def _start_date(self):
         value = self['startDate']
diff --git a/Products/ATContentTypes/content/favorite.py b/Products/ATContentTypes/content/favorite.py
index 4bd58ce..1d0c274 100644
--- a/Products/ATContentTypes/content/favorite.py
+++ b/Products/ATContentTypes/content/favorite.py
@@ -5,9 +5,11 @@
 
 
 logger = logging.getLogger('ATContentTypes')
-logger.log(logging.INFO, 'Warning: You have content instances of the '
-           'ATFavorite type in your site. This type is no longer available. Please '
-           'remove all remaining instances of this type or migrate them to links.')
+
+logger.warn(
+    'You have content instances of the ATFavorite type in your site. '
+    'This type is no longer available. Please remove all remaining instances '
+    'of this type or migrate them to links.')
 
 
 class ATFavorite(link.ATLink):
diff --git a/Products/ATContentTypes/content/folder.py b/Products/ATContentTypes/content/folder.py
index 327b32a..1568eae 100644
--- a/Products/ATContentTypes/content/folder.py
+++ b/Products/ATContentTypes/content/folder.py
@@ -11,14 +11,14 @@
 from Products.ATContentTypes.content.schemata import NextPreviousAwareSchema
 from Products.ATContentTypes.interfaces import IATBTreeFolder
 from Products.ATContentTypes.interfaces import IATFolder
-from Products.ATContentTypes.lib.constraintypes import ConstrainTypesMixinSchema
+from Products.ATContentTypes.lib.constraintypes import ConstrainTypesMixinSchema  # noqa
 from Products.CMFCore.permissions import View
 from zope.interface import implements
 
 
 ATFolderSchema = folder.ATFolderSchema
-ObsoleteATFolderSchema = ATContentTypeSchema.copy() + ConstrainTypesMixinSchema + \
-    NextPreviousAwareSchema
+ObsoleteATFolderSchema = ATContentTypeSchema.copy() + \
+  ConstrainTypesMixinSchema + NextPreviousAwareSchema
 ATBTreeFolderSchema = ATContentTypeSchema.copy() + ConstrainTypesMixinSchema
 
 finalizeATCTSchema(folder.ATFolderSchema, folderish=True, moveDiscussion=False)
@@ -26,7 +26,8 @@
 
 HAS_LINGUAPLONE = True
 try:
-    from Products.LinguaPlone.I18NBaseBTreeFolder import I18NOnlyBaseBTreeFolder
+    from Products.LinguaPlone.I18NBaseBTreeFolder import \
+        I18NOnlyBaseBTreeFolder
 except ImportError:
     HAS_LINGUAPLONE = False
 
diff --git a/Products/ATContentTypes/content/image.py b/Products/ATContentTypes/content/image.py
index 1438cfe..c38c187 100644
--- a/Products/ATContentTypes/content/image.py
+++ b/Products/ATContentTypes/content/image.py
@@ -29,29 +29,31 @@
 
 
 ATImageSchema = ATContentTypeSchema.copy() + Schema((
-    ImageField('image',
-               required=True,
-               primary=True,
-               languageIndependent=True,
-               storage=AnnotationStorage(migrate=True),
-               swallowResizeExceptions=zconf.swallowImageResizeExceptions.enable,
-               pil_quality=zconf.pil_config.quality,
-               pil_resize_algo=zconf.pil_config.resize_algo,
-               max_size=zconf.ATImage.max_image_dimension,
-               sizes={'large': (768, 768),
-                      'preview': (400, 400),
-                      'mini': (200, 200),
-                      'thumb': (128, 128),
-                      'tile': (64, 64),
-                      'icon': (32, 32),
-                      'listing': (16, 16),
-                      },
-               validators=(('isNonEmptyFile', V_REQUIRED),
-                           ('checkImageMaxSize', V_REQUIRED)),
-               widget=ImageWidget(
-                   description='',
-                   label=_(u'label_image', default=u'Image'),
-                   show_content_type=False,)),
+    ImageField(
+        'image',
+        required=True,
+        primary=True,
+        languageIndependent=True,
+        storage=AnnotationStorage(migrate=True),
+        swallowResizeExceptions=zconf.swallowImageResizeExceptions.enable,
+        pil_quality=zconf.pil_config.quality,
+        pil_resize_algo=zconf.pil_config.resize_algo,
+        max_size=zconf.ATImage.max_image_dimension,
+        sizes={'large': (768, 768),
+               'preview': (400, 400),
+               'mini': (200, 200),
+               'thumb': (128, 128),
+               'tile': (64, 64),
+               'icon': (32, 32),
+               'listing': (16, 16),
+               },
+        validators=(('isNonEmptyFile', V_REQUIRED),
+                    ('checkImageMaxSize', V_REQUIRED)),
+        widget=ImageWidget(
+            description='',
+            label=_(u'label_image', default=u'Image'),
+            show_content_type=False,)
+    ),
 
 ), marshall=PrimaryFieldMarshaller()
 )
@@ -64,7 +66,10 @@
 
 
 class ATImage(ATCTFileContent, ATCTImageTransform):
-    """An image, which can be referenced in documents or displayed in an album."""
+    """An image, which can be referenced in documents.
+
+    Or displayed in an album.
+    """
 
     schema = ATImageSchema
 
@@ -94,7 +99,7 @@ def setImage(self, value, refresh_exif=True, **kwargs):
         self._setATCTFileContent(value, **kwargs)
 
     def _should_set_id_to_filename(self, filename, title):
-        """If title is blank, have the caller set my ID to the uploaded file's name."""
+        """If title is blank, have the caller set my ID to the file's name."""
         # When the title is blank, sometimes the filename is returned as the
         # title.
         return filename == title or not title
diff --git a/Products/ATContentTypes/content/newsitem.py b/Products/ATContentTypes/content/newsitem.py
index f37773b..c339a51 100644
--- a/Products/ATContentTypes/content/newsitem.py
+++ b/Products/ATContentTypes/content/newsitem.py
@@ -31,51 +31,56 @@
 
 
 ATNewsItemSchema = ATContentTypeSchema.copy() + Schema((
-    TextField('text',
-              required=False,
-              searchable=True,
-              primary=True,
-              storage=AnnotationStorage(migrate=True),
-              validators=('isTidyHtmlWithCleanup',),
-              # validators=('isTidyHtml',),
-              default_output_type='text/x-html-safe',
-              widget=TinyMCEWidget(
-                  description='',
-                  label=_(u'label_body_text', u'Body Text'),
-                  rows=25,
-                  allow_file_upload=zconf.ATDocument.allow_document_upload)
-              ),
-
-    ImageField('image',
-               required=False,
-               storage=AnnotationStorage(migrate=True),
-               languageIndependent=True,
-               max_size=zconf.ATNewsItem.max_image_dimension,
-               sizes={'large': (768, 768),
-                      'preview': (400, 400),
-                      'mini': (200, 200),
-                      'thumb': (128, 128),
-                      'tile': (64, 64),
-                      'icon': (32, 32),
-                      'listing': (16, 16),
-                      },
-               validators=(('isNonEmptyFile', V_REQUIRED),
-                           ('checkNewsImageMaxSize', V_REQUIRED)),
-               widget=ImageWidget(
-                   description=_(
-                       u'help_news_image', default=u'Will be shown in the news listing, and in the news item itself. Image will be scaled to a sensible size.'),
-                   label=_(u'label_news_image', default=u'Image'),
-                   show_content_type=False)
-               ),
-
-    StringField('imageCaption',
-                required=False,
-                searchable=True,
-                widget=StringWidget(
-                    description='',
-                    label=_(u'label_image_caption', default=u'Image Caption'),
-                    size=40)
-                ),
+    TextField(
+        'text',
+        required=False,
+        searchable=True,
+        primary=True,
+        storage=AnnotationStorage(migrate=True),
+        validators=('isTidyHtmlWithCleanup',),
+        # validators=('isTidyHtml',),
+        default_output_type='text/x-html-safe',
+        widget=TinyMCEWidget(
+            description='',
+            label=_(u'label_body_text', u'Body Text'),
+            rows=25,
+            allow_file_upload=zconf.ATDocument.allow_document_upload)
+    ),
+
+    ImageField(
+        'image',
+        required=False,
+        storage=AnnotationStorage(migrate=True),
+        languageIndependent=True,
+        max_size=zconf.ATNewsItem.max_image_dimension,
+        sizes={'large': (768, 768),
+               'preview': (400, 400),
+               'mini': (200, 200),
+               'thumb': (128, 128),
+               'tile': (64, 64),
+               'icon': (32, 32),
+               'listing': (16, 16),
+               },
+        validators=(('isNonEmptyFile', V_REQUIRED),
+                    ('checkNewsImageMaxSize', V_REQUIRED)),
+        widget=ImageWidget(
+            description=_(
+                u'help_news_image',
+                default=u'Will be shown in the news listing, and in the news '
+                u'item itself. Image will be scaled to a sensible size.'),
+            label=_(u'label_news_image', default=u'Image'),
+            show_content_type=False)
+    ),
+
+    StringField(
+        'imageCaption',
+        required=False,
+        searchable=True,
+        widget=StringWidget(
+            description='',
+            label=_(u'label_image_caption', default=u'Image Caption'),
+            size=40)
+    ),
 ), marshall=RFC822Marshaller()
 )
 
@@ -86,7 +91,10 @@
 
 
 class ATNewsItem(ATDocumentBase, ATCTImageTransform):
-    """An announcement that will show up on the news portlet and in the news listing."""
+    """An announcement that will show up on the news portlet.
+
+    And in the news listing.
+    """
 
     schema = ATNewsItemSchema
 
diff --git a/Products/ATContentTypes/content/schemata.py b/Products/ATContentTypes/content/schemata.py
index 8d716fe..01f12ff 100644
--- a/Products/ATContentTypes/content/schemata.py
+++ b/Products/ATContentTypes/content/schemata.py
@@ -12,19 +12,22 @@
 # for ATContentTypes we want to have the description in the edit view
 # just like CMF
 ATContentTypeSchema = BaseSchema.copy() + MetadataSchema((
-    BooleanField('excludeFromNav',
-                 required=False,
-                 languageIndependent=True,
-                 schemata='metadata',  # moved to 'default' for folders
-                 widget=BooleanWidget(
-                     description=_(u'help_exclude_from_nav',
-                                   default=u'If selected, this item will not appear in the navigation tree'),
-                     label=_(u'label_exclude_from_nav',
-                             default=u'Exclude from navigation'),
-                     visible={'view': 'hidden',
-                              'edit': 'visible'},
-                 ),
-                 ),
+    BooleanField(
+        'excludeFromNav',
+        required=False,
+        languageIndependent=True,
+        schemata='metadata',  # moved to 'default' for folders
+        widget=BooleanWidget(
+            label=_(u'label_exclude_from_nav',
+                    default=u'Exclude from navigation'),
+            description=_(
+                u'help_exclude_from_nav',
+                default=u'If selected, this item will not appear in the '
+                u'navigation tree'),
+            visible={'view': 'hidden',
+                     'edit': 'visible'},
+        ),
+    ),
 ),)
 
 ATContentTypeSchema['id'].searchable = True
@@ -60,20 +63,23 @@
 # Enabling next / previous navigation
 
 NextPreviousAwareSchema = MetadataSchema((
-    BooleanField('nextPreviousEnabled',
-                 # required=False,
-                 languageIndependent=True,
-                 schemata='metadata',
-                 widget=BooleanWidget(
-                     description=_(
-                         u'help_nextprevious', default=u'This enables next/previous widget on content items contained in this folder.'),
-                     label=_(u'label_nextprevious',
-                             default=u'Enable next previous navigation'),
-                     visible={'view': 'hidden',
-                              'edit': 'visible'},
-                 ),
-                 default_method="getNextPreviousParentValue"
-                 ),
+    BooleanField(
+        'nextPreviousEnabled',
+        # required=False,
+        languageIndependent=True,
+        schemata='metadata',
+        widget=BooleanWidget(
+            description=_(
+                u'help_nextprevious',
+                default=u'This enables next/previous widget on '
+                u'content items contained in this folder.'),
+            label=_(u'label_nextprevious',
+                    default=u'Enable next previous navigation'),
+            visible={'view': 'hidden',
+                     'edit': 'visible'},
+        ),
+        default_method="getNextPreviousParentValue"
+        ),
 ),)
 
 
diff --git a/Products/ATContentTypes/content/topic.py b/Products/ATContentTypes/content/topic.py
index 7b83f41..f0d33e0 100644
--- a/Products/ATContentTypes/content/topic.py
+++ b/Products/ATContentTypes/content/topic.py
@@ -49,92 +49,106 @@
                   ]
 
 ATTopicSchema = ATContentTypeSchema.copy() + Schema((
-    TextField('text',
-              required=False,
-              searchable=True,
-              primary=True,
-              storage=AnnotationStorage(migrate=True),
-              validators=('isTidyHtmlWithCleanup',),
-              # validators=('isTidyHtml',),
-              default_output_type='text/x-html-safe',
-              write_permission=ChangeTopics,
-              widget=TinyMCEWidget(
-                  description='',
-                  label=_(u'label_body_text', default=u'Body Text'),
-                  rows=25,
-                  allow_file_upload=zconf.ATDocument.allow_document_upload),
-              ),
-    BooleanField('acquireCriteria',
-                 required=False,
-                 mode="rw",
-                 default=False,
-                 write_permission=ChangeTopics,
-                 widget=BooleanWidget(
-                     label=_(u'label_inherit_criteria',
-                             default=u'Inherit Criteria'),
-                     description=_(u'help_inherit_collection_criteria',
-                                   default=u"Narrow down the search results from the parent Collection(s) "
-                                   "by using the criteria from this Collection."),
-                     # Only show when the parent object is a Topic also,
-                     condition="python:object.aq_parent.portal_type == 'Topic'"),
-                 ),
-    BooleanField('limitNumber',
-                 required=False,
-                 mode="rw",
-                 default=False,
-                 write_permission=ChangeTopics,
-                 widget=BooleanWidget(
-                     label=_(u'label_limit_number',
-                             default=u'Limit Search Results'),
-                     description=_(u'help_limit_number',
-                                   default=u"If selected, only the 'Number of Items' "
-                                   "indicated below will be displayed.")
-                 ),
-                 ),
-    IntegerField('itemCount',
-                 required=False,
-                 mode="rw",
-                 default=0,
-                 write_permission=ChangeTopics,
-                 widget=IntegerWidget(
-                     label=_(u'label_item_count', default=u'Number of Items'),
-                     description=''
-                 ),
-                 ),
-    BooleanField('customView',
-                 required=False,
-                 mode="rw",
-                 default=False,
-                 write_permission=ChangeTopics,
-                 widget=BooleanWidget(
-                     label=_(u'label_custom_view',
-                             default=u'Display as Table'),
-                     description=_(u'help_custom_view',
-                                   default=u"Columns in the table are controlled "
-                                   "by 'Table Columns' below.")
-                 ),
-                 ),
-    LinesField('customViewFields',
-               required=False,
-               mode="rw",
-               default=('Title',),
-               vocabulary='listMetaDataFields',
-               enforceVocabulary=True,
-               write_permission=ChangeTopics,
-               widget=InAndOutWidget(
-                    label=_(u'label_custom_view_fields',
-                            default=u'Table Columns'),
-                    description=_(u'help_custom_view_fields',
-                                  default=u"Select which fields to display when "
-                                  "'Display as Table' is checked.")
-               ),
-               ),
+    TextField(
+        'text',
+        required=False,
+        searchable=True,
+        primary=True,
+        storage=AnnotationStorage(migrate=True),
+        validators=('isTidyHtmlWithCleanup',),
+        # validators=('isTidyHtml',),
+        default_output_type='text/x-html-safe',
+        write_permission=ChangeTopics,
+        widget=TinyMCEWidget(
+            description='',
+            label=_(u'label_body_text', default=u'Body Text'),
+            rows=25,
+            allow_file_upload=zconf.ATDocument.allow_document_upload),
+    ),
+
+    BooleanField(
+        'acquireCriteria',
+        required=False,
+        mode="rw",
+        default=False,
+        write_permission=ChangeTopics,
+        widget=BooleanWidget(
+            label=_(u'label_inherit_criteria',
+                    default=u'Inherit Criteria'),
+            description=_(
+                u'help_inherit_collection_criteria',
+                default=u"Narrow down the search results from the parent "
+                u"Collection(s) by using the criteria from this Collection."),
+            # Only show when the parent object is a Topic also.
+            condition="python:object.aq_parent.portal_type == 'Topic'"),
+    ),
+
+    BooleanField(
+        'limitNumber',
+        required=False,
+        mode="rw",
+        default=False,
+        write_permission=ChangeTopics,
+        widget=BooleanWidget(
+            label=_(u'label_limit_number',
+                    default=u'Limit Search Results'),
+            description=_(u'help_limit_number',
+                          default=u"If selected, only the 'Number of Items' "
+                          "indicated below will be displayed.")
+        ),
+    ),
+
+    IntegerField(
+        'itemCount',
+        required=False,
+        mode="rw",
+        default=0,
+        write_permission=ChangeTopics,
+        widget=IntegerWidget(
+            label=_(u'label_item_count', default=u'Number of Items'),
+            description=''),
+    ),
+
+    BooleanField(
+        'customView',
+        required=False,
+        mode="rw",
+        default=False,
+        write_permission=ChangeTopics,
+        widget=BooleanWidget(
+            label=_(u'label_custom_view',
+                    default=u'Display as Table'),
+            description=_(u'help_custom_view',
+                          default=u"Columns in the table are controlled "
+                          "by 'Table Columns' below.")
+        ),
+    ),
+
+    LinesField(
+        'customViewFields',
+        required=False,
+        mode="rw",
+        default=('Title',),
+        vocabulary='listMetaDataFields',
+        enforceVocabulary=True,
+        write_permission=ChangeTopics,
+        widget=InAndOutWidget(
+             label=_(u'label_custom_view_fields',
+                     default=u'Table Columns'),
+             description=_(u'help_custom_view_fields',
+                           default=u"Select which fields to display when "
+                           "'Display as Table' is checked.")
+        ),
+    ),
 ))
 finalizeATCTSchema(ATTopicSchema, folderish=False, moveDiscussion=False)
 
 
 class ATTopic(ATCTFolder):
-    """An automatically updated stored search that can be used to display items matching criteria you specify."""
+    """An automatically updated stored search.
+
+    This can be used to display items matching criteria you specify.
+    """
 
     schema = ATTopicSchema
 
@@ -393,16 +407,19 @@ def buildQuery(self):
         for criterion in criteria:
             for key, value in criterion.getCriteriaItems():
                 # Ticket: https://dev.plone.org/plone/ticket/8827
-                # If a sub topic is set to acquire then the 'start' key have to
-                # be deleted to get ATFriendlyDateCriteria to work properly (the 'end' key) -
-                # so the 'start' key should be deleted.
+                # If a sub topic is set to acquire then the 'start' key has to
+                # be deleted to get ATFriendlyDateCriteria to work properly
+                # (the 'end' key) - so the 'start' key should be deleted.
                 # But only when:
                 # - a subtopic with acquire enabled
                 # - its a ATFriendlyDateCriteria
                 # - the date criteria is set to 'now' (0)
                 # - the end key is set
-                if clear_start and criterion.meta_type in ['ATFriendlyDateCriteria'] \
-                        and not criterion.value and key == 'end' and 'start' in result:
+                if (clear_start and
+                        criterion.meta_type in ['ATFriendlyDateCriteria'] and
+                        not criterion.value and
+                        key == 'end' and
+                        'start' in result):
                     del result['start']
                 result[key] = value
         return result
diff --git a/Products/ATContentTypes/criteria/__init__.py b/Products/ATContentTypes/criteria/__init__.py
index 7e93420..e00f645 100644
--- a/Products/ATContentTypes/criteria/__init__.py
+++ b/Products/ATContentTypes/criteria/__init__.py
@@ -104,8 +104,14 @@ def getPortalTypes(self):
 registerCriterion = _criterionRegistry.register
 unregisterCriterion = _criterionRegistry.unregister
 
-__all__ = ('registerCriterion', 'ALL_INDICES', 'DATE_INDICES', 'STRING_INDICES',
-           'LIST_INDICES', 'SORT_INDICES', )
+__all__ = (
+    'registerCriterion',
+    'ALL_INDICES',
+    'DATE_INDICES',
+    'STRING_INDICES',
+    'LIST_INDICES',
+    'SORT_INDICES',
+)
 
 # criteria
 from Products.ATContentTypes.criteria.boolean import ATBooleanCriterion  # noqa
diff --git a/Products/ATContentTypes/criteria/date.py b/Products/ATContentTypes/criteria/date.py
index f5d4c15..3235dda 100644
--- a/Products/ATContentTypes/criteria/date.py
+++ b/Products/ATContentTypes/criteria/date.py
@@ -44,49 +44,56 @@
 ))
 
 ATDateCriteriaSchema = ATBaseCriterionSchema + Schema((
-    IntegerField('value',
-                 required=1,
-                 mode="rw",
-                 accessor="Value",
-                 mutator="setValue",
-                 write_permission=ChangeTopics,
-                 default=None,
-                 vocabulary=DateOptions,
-                 widget=SelectionWidget(
-                     label=_(u'label_date_criteria_value',
-                             default=u'Which day'),
-                     description=_(u'help_date_criteria_value',
-                                   default=u'Select the date criteria value.')
-                 ),
-                 ),
-    StringField('dateRange',
-                required=1,
-                mode="rw",
-                write_permission=ChangeTopics,
-                default=None,
-                vocabulary=RangeOperations,
-                enforceVocabulary=1,
-                widget=SelectionWidget(
-                    label=_(u'label_date_criteria_range',
-                            default=u'In the past or future'),
-                    description=_(u'help_date_criteria_range',
-                                  default=u"Select the date criteria range. Ignore this if you selected 'Now' above."),
-                    format="select"),
-                ),
-    StringField('operation',
-                required=1,
-                mode="rw",
-                default=None,
-                write_permission=ChangeTopics,
-                vocabulary=CompareOperations,
-                enforceVocabulary=1,
-                widget=SelectionWidget(
-                    label=_(u'label_date_criteria_operation',
-                            default=u'More or less'),
-                    description=_(u'help_date_criteria_operation',
-                                  default=u'Select the date criteria operation.'),
-                    format="select"),
-                ),
+    IntegerField(
+        'value',
+        required=1,
+        mode="rw",
+        accessor="Value",
+        mutator="setValue",
+        write_permission=ChangeTopics,
+        default=None,
+        vocabulary=DateOptions,
+        widget=SelectionWidget(
+            label=_(u'label_date_criteria_value',
+                    default=u'Which day'),
+            description=_(u'help_date_criteria_value',
+                          default=u'Select the date criteria value.')
+        ),
+    ),
+
+    StringField(
+        'dateRange',
+        required=1,
+        mode="rw",
+        write_permission=ChangeTopics,
+        default=None,
+        vocabulary=RangeOperations,
+        enforceVocabulary=1,
+        widget=SelectionWidget(
+            label=_(u'label_date_criteria_range',
+                    default=u'In the past or future'),
+            description=_(
+                u'help_date_criteria_range',
+                default=u"Select the date criteria range. "
+                u"Ignore this if you selected 'Now' above."),
+            format="select"),
+    ),
+
+    StringField(
+        'operation',
+        required=1,
+        mode="rw",
+        default=None,
+        write_permission=ChangeTopics,
+        vocabulary=CompareOperations,
+        enforceVocabulary=1,
+        widget=SelectionWidget(
+            label=_(u'label_date_criteria_operation',
+                    default=u'More or less'),
+            description=_(u'help_date_criteria_operation',
+                          default=u'Select the date criteria operation.'),
+            format="select"),
+    ),
 ))
 
 
@@ -125,7 +132,8 @@ def getCriteriaItems(self):
                 if value != 0:
                     range_op = (self.getDateRange() == '-' and 'max') or 'min'
                     return (
-                        (field, {'query': date.earliestTime(), 'range': range_op}),)
+                        (field, {'query': date.earliestTime(),
+                                 'range': range_op}),)
                 else:
                     return ((field, {'query': date, 'range': 'min'}),)
             elif operation == 'less':
diff --git a/Products/ATContentTypes/criteria/daterange.py b/Products/ATContentTypes/criteria/daterange.py
index a089afc..d91d0c6 100644
--- a/Products/ATContentTypes/criteria/daterange.py
+++ b/Products/ATContentTypes/criteria/daterange.py
@@ -19,33 +19,36 @@
 RELEVANT_INDICES = tuple(RELEVANT_INDICES)
 
 ATDateRangeCriterionSchema = ATBaseCriterionSchema + Schema((
-    DateTimeField('start',
-                  required=1,
-                  mode="rw",
-                  write_permission=ChangeTopics,
-                  default=None,
-                  widget=CalendarWidget(
-                      label=_(u'label_date_range_criteria_start',
-                              default=u'Start Date'),
-                      description=_(
-                          u'help_date_range_criteria_start',
-                          default=u'The beginning of the date range to search')
-                  ),
-                  ),
-    DateTimeField('end',
-                  required=1,
-                  mode="rw",
-                  write_permission=ChangeTopics,
-                  default=None,
-                  widget=CalendarWidget(
-                      label=_(u'label_date_range_criteria_end',
-                              default=u'End Date'),
-                      description=_(
-                          u'help_date_range_criteria_end',
-                          default=u'The ending of the date range to search.')
+    DateTimeField(
+        'start',
+        required=1,
+        mode="rw",
+        write_permission=ChangeTopics,
+        default=None,
+        widget=CalendarWidget(
+            label=_(u'label_date_range_criteria_start',
+                    default=u'Start Date'),
+            description=_(
+                u'help_date_range_criteria_start',
+                default=u'The beginning of the date range to search')
+        ),
+    ),
 
-                  ),
-                  ),
+    DateTimeField(
+        'end',
+        required=1,
+        mode="rw",
+        write_permission=ChangeTopics,
+        default=None,
+        widget=CalendarWidget(
+            label=_(u'label_date_range_criteria_end',
+                    default=u'End Date'),
+            description=_(
+                u'help_date_range_criteria_end',
+                default=u'The ending of the date range to search.')
+
+        ),
+    ),
 ))
 
 
diff --git a/Products/ATContentTypes/criteria/list.py b/Products/ATContentTypes/criteria/list.py
index c0c0436..eb451bd 100644
--- a/Products/ATContentTypes/criteria/list.py
+++ b/Products/ATContentTypes/criteria/list.py
@@ -23,32 +23,36 @@
 ))
 
 ATListCriterionSchema = ATBaseCriterionSchema + Schema((
-    LinesField('value',
-               required=1,
-               mode="rw",
-               write_permission=ChangeTopics,
-               accessor="Value",
-               mutator="setValue",
-               default=[],
-               widget=LinesWidget(
-                    label=_(u'label_list_criteria_value', default=u'Values'),
-                    description=_(u'help_list_criteria_value',
-                                  default=u'Values, each on its own line.')
-               ),
-               ),
-    StringField('operator',
-                required=1,
-                mode="rw",
-                write_permission=ChangeTopics,
-                default='or',
-                vocabulary=CompareOperators,
-                widget=SelectionWidget(
-                    label=_(u'label_list_criteria_operator',
-                            default=u'operator name'),
-                    description=_(u'help_list_criteria_operator',
-                                  default=u'Operator used to join the tests on each value.')
-                ),
-                ),
+    LinesField(
+        'value',
+        required=1,
+        mode="rw",
+        write_permission=ChangeTopics,
+        accessor="Value",
+        mutator="setValue",
+        default=[],
+        widget=LinesWidget(
+             label=_(u'label_list_criteria_value', default=u'Values'),
+             description=_(u'help_list_criteria_value',
+                           default=u'Values, each on its own line.')
+        ),
+    ),
+
+    StringField(
+        'operator',
+        required=1,
+        mode="rw",
+        write_permission=ChangeTopics,
+        default='or',
+        vocabulary=CompareOperators,
+        widget=SelectionWidget(
+            label=_(u'label_list_criteria_operator',
+                    default=u'operator name'),
+            description=_(
+                u'help_list_criteria_operator',
+                default=u'Operator used to join the tests on each value.')
+        ),
+    ),
 ))
 
 
diff --git a/Products/ATContentTypes/criteria/relativepath.py b/Products/ATContentTypes/criteria/relativepath.py
index bf15441..d536239 100644
--- a/Products/ATContentTypes/criteria/relativepath.py
+++ b/Products/ATContentTypes/criteria/relativepath.py
@@ -18,25 +18,32 @@
 
 
 ATRelativePathCriterionSchema = ATBaseCriterionSchema + Schema((
-    StringField('relativePath',
-                default='..',
-                widget=StringWidget(label='Relative path',
-                                    label_msgid="label_relativepath_criteria_customrelativepath",
-                                    description_msgid="help_relativepath_criteria_customrelativepath",
-                                    i18n_domain="plone",
-                                    description="Enter a relative path e.g.: <br /> '..' for the parent folder <br /> '../..' for the parent's parent <br />'../somefolder' for a sibling folder")),
-    BooleanField('recurse',
-                 mode="rw",
-                 write_permission=ChangeTopics,
-                 accessor="Recurse",
-                 default=False,
-                 widget=BooleanWidget(
-                     label="Search Sub-Folders",
-                     label_msgid="label_path_criteria_recurse",
-                     description="",
-                     description_msgid="help_path_criteria_recurse",
-                     i18n_domain="plone"),
-                 ),
+    StringField(
+        'relativePath',
+        default='..',
+        widget=StringWidget(
+            label='Relative path',
+            label_msgid="label_relativepath_criteria_customrelativepath",
+            description_msgid="help_relativepath_criteria_customrelativepath",
+            i18n_domain="plone",
+            description=u"Enter a relative path e.g.: <br /> '..' for the "
+            u"parent folder <br /> '../..' for the parent's parent <br />"
+            u"'../somefolder' for a sibling folder")
+    ),
+
+    BooleanField(
+        'recurse',
+        mode="rw",
+        write_permission=ChangeTopics,
+        accessor="Recurse",
+        default=False,
+        widget=BooleanWidget(
+            label="Search Sub-Folders",
+            label_msgid="label_path_criteria_recurse",
+            description="",
+            description_msgid="help_path_criteria_recurse",
+            i18n_domain="plone"),
+    ),
 ))
 
 
@@ -81,9 +88,9 @@ def getCriteriaItems(self):
             # set the path to the collections path
             path = list(aq_parent(self).getPhysicalPath())
 
-            # now construct an aboslute path based on the relative custom path
-            # eat away from 'path' whenever we encounter a '..' in the relative path
-            # apend all other elements other than ..
+            # Now construct an absolute path based on the relative custom path.
+            # Eat away from 'path' whenever we encounter a '..' in the relative
+            # path.  Append all other elements other than '..'.
             for folder in folders:
                 if folder == '..':
                     # chop off one level from path
diff --git a/Products/ATContentTypes/criteria/schemata.py b/Products/ATContentTypes/criteria/schemata.py
index 6da1c9b..37fa8f1 100644
--- a/Products/ATContentTypes/criteria/schemata.py
+++ b/Products/ATContentTypes/criteria/schemata.py
@@ -12,31 +12,36 @@
 ###
 
 ATBaseCriterionSchema = Schema((
-    StringField('id',
-                required=1,
-                mode="r",
-                default=None,
-                write_permission=ChangeTopics,
-                widget=IdWidget(
-                    label=_(u'label_short_name', default=u'Short Name'),
-                    description=_(u'help_shortname',
-                                  default=u"Should not contain spaces, underscores or mixed case. "
-                                  "Short Name is part of the item's web address."),
-                    visible={'view': 'invisible'}
-                ),
-                ),
-    StringField('field',
-                required=1,
-                mode="r",
-                accessor="Field",
-                write_permission=ChangeTopics,
-                default=None,
-                widget=StringWidget(
-                    label=_(u'label_criteria_field_name',
-                            default=u'Field name'),
-                    description=_(u'help_shortname',
-                                  default=u"Should not contain spaces, underscores or mixed case. "
-                                  "Short Name is part of the item's web address.")
-                ),
-                ),
+    StringField(
+        'id',
+        required=1,
+        mode="r",
+        default=None,
+        write_permission=ChangeTopics,
+        widget=IdWidget(
+            label=_(u'label_short_name', default=u'Short Name'),
+            description=_(
+                u'help_shortname',
+                default=u"Should not contain spaces, underscores or mixed "
+                u"case. Short Name is part of the item's web address."),
+            visible={'view': 'invisible'}
+        ),
+    ),
+
+    StringField(
+        'field',
+        required=1,
+        mode="r",
+        accessor="Field",
+        write_permission=ChangeTopics,
+        default=None,
+        widget=StringWidget(
+            label=_(u'label_criteria_field_name',
+                    default=u'Field name'),
+            description=_(
+                u'help_shortname',
+                default=u"Should not contain spaces, underscores or mixed "
+                u"case. Short Name is part of the item's web address.")
+        ),
+    ),
 ))
diff --git a/Products/ATContentTypes/criteria/selection.py b/Products/ATContentTypes/criteria/selection.py
index 16f442d..fddf646 100644
--- a/Products/ATContentTypes/criteria/selection.py
+++ b/Products/ATContentTypes/criteria/selection.py
@@ -24,33 +24,37 @@
 ))
 
 ATSelectionCriterionSchema = ATBaseCriterionSchema + Schema((
-    LinesField('value',
-               required=1,
-               mode="rw",
-               write_permission=ChangeTopics,
-               accessor="Value",
-               mutator="setValue",
-               default=[],
-               vocabulary="getCurrentValues",
-               widget=MultiSelectionWidget(
-                    label=_(u'label_criteria_values', default=u'Values'),
-                    description=_(u'help_criteria_values',
-                                  default=u'Existing values.')
-               ),
-               ),
-    StringField('operator',
-                required=1,
-                mode="rw",
-                write_permission=ChangeTopics,
-                default='or',
-                vocabulary=CompareOperators,
-                widget=SelectionWidget(
-                    label=_(u'label_list_criteria_operator',
-                            default=u'operator name'),
-                    description=_(u'help_list_criteria_operator',
-                                  default=u'Operator used to join the tests on each value.')
-                ),
-                ),
+    LinesField(
+        'value',
+        required=1,
+        mode="rw",
+        write_permission=ChangeTopics,
+        accessor="Value",
+        mutator="setValue",
+        default=[],
+        vocabulary="getCurrentValues",
+        widget=MultiSelectionWidget(
+             label=_(u'label_criteria_values', default=u'Values'),
+             description=_(u'help_criteria_values',
+                           default=u'Existing values.')
+        ),
+    ),
+
+    StringField(
+        'operator',
+        required=1,
+        mode="rw",
+        write_permission=ChangeTopics,
+        default='or',
+        vocabulary=CompareOperators,
+        widget=SelectionWidget(
+            label=_(u'label_list_criteria_operator',
+                    default=u'operator name'),
+            description=_(
+                u'help_list_criteria_operator',
+                default=u'Operator used to join the tests on each value.')
+        ),
+    ),
 ))
 
 
diff --git a/Products/ATContentTypes/criteria/simpleint.py b/Products/ATContentTypes/criteria/simpleint.py
index 3878046..a750fdb 100644
--- a/Products/ATContentTypes/criteria/simpleint.py
+++ b/Products/ATContentTypes/criteria/simpleint.py
@@ -25,47 +25,55 @@
 ))
 
 ATSimpleIntCriterionSchema = ATBaseCriterionSchema + Schema((
-    IntegerField('value',
-                 required=1,
-                 mode="rw",
-                 write_permission=ChangeTopics,
-                 accessor="Value",
-                 mutator="setValue",
-                 default=None,
-                 widget=IntegerWidget(
-                     label=_(u'label_int_criteria_value', default=u'Value'),
-                     description=_(u'help_int_criteria_value',
-                                   default=u'An integer number.')
-                 ),
-                 ),
-    IntegerField('value2',
-                 required=0,
-                 mode="rw",
-                 write_permission=ChangeTopics,
-                 accessor="Value2",
-                 mutator="setValue2",
-                 default=None,
-                 widget=IntegerWidget(
-                     label=_(u'label_int_criteria_value2',
-                             default=u'Second Value'),
-                     description=_(u'help_int_criteria_value2',
-                                   default=u'An integer number used as the maximum value if the between direction is selected.')
-                 ),
-                 ),
-    StringField('direction',
-                required=0,
-                mode="rw",
-                write_permission=ChangeTopics,
-                default='',
-                vocabulary=DirectionOperations,
-                enforceVocabulary=1,
-                widget=SelectionWidget(
-                    label=_(u'label_int_criteria_direction',
-                            default=u'Direction'),
-                    description=_(u'help_int_criteria_direction',
-                                  default=u'Specify whether you want to find values lesser than, greater than, equal to, or between the chosen value(s).')
-                ),
-                ),
+    IntegerField(
+        'value',
+        required=1,
+        mode="rw",
+        write_permission=ChangeTopics,
+        accessor="Value",
+        mutator="setValue",
+        default=None,
+        widget=IntegerWidget(
+            label=_(u'label_int_criteria_value', default=u'Value'),
+            description=_(u'help_int_criteria_value',
+                          default=u'An integer number.')
+        ),
+    ),
+    IntegerField(
+        'value2',
+        required=0,
+        mode="rw",
+        write_permission=ChangeTopics,
+        accessor="Value2",
+        mutator="setValue2",
+        default=None,
+        widget=IntegerWidget(
+            label=_(u'label_int_criteria_value2',
+                    default=u'Second Value'),
+            description=_(
+                u'help_int_criteria_value2',
+                default=u'An integer number used as the maximum value if '
+                u'the between direction is selected.')
+        ),
+    ),
+    StringField(
+        'direction',
+        required=0,
+        mode="rw",
+        write_permission=ChangeTopics,
+        default='',
+        vocabulary=DirectionOperations,
+        enforceVocabulary=1,
+        widget=SelectionWidget(
+            label=_(u'label_int_criteria_direction',
+                    default=u'Direction'),
+            description=_(
+                u'help_int_criteria_direction',
+                default=u'Specify whether you want to find values lesser '
+                u'than, greater than, equal to, or between the chosen '
+                u'value(s).')
+        ),
+    ),
 ))
 
 
@@ -106,8 +114,10 @@ def post_validate(self, REQUEST, errors):
         direction = REQUEST.get('direction', self.getDirection())
         val2 = REQUEST.get('value2', self.Value2())
         if direction == 'min:max' and not val2 and not val2 == 0:
-            errors['value2'] = 'You must enter a second value to do a "Between" search.'
-        errors['value2'] = 'You must enter a second value to do a "Between" search.'
+            errors['value2'] = (
+                'You must enter a second value to do a "Between" search.')
+        errors['value2'] = (
+            'You must enter a second value to do a "Between" search.')
         return errors
 
 registerCriterion(ATSimpleIntCriterion, LIST_INDICES)
diff --git a/Products/ATContentTypes/lib/calendarsupport.py b/Products/ATContentTypes/lib/calendarsupport.py
index adb0a28..765eddf 100644
--- a/Products/ATContentTypes/lib/calendarsupport.py
+++ b/Products/ATContentTypes/lib/calendarsupport.py
@@ -41,8 +41,8 @@
 # blocking of the time slot. That's not appropriate for an event
 # calendar.
 # Also, previous version set "PRIORITY:3", which the RFC interprets as a high
-# priority. In absence of a priority field in the event, there's no justification
-# for that.
+# priority. In absence of a priority field in the event, there is no
+# justification for that.
 
 ICS_EVENT_END = """\
 CLASS:PUBLIC
@@ -148,7 +148,8 @@ def getICal(self):
         if subject:
             out.write('CATEGORIES:%s\n' % ', '.join(subject))
 
-        # TODO  -- NO! see the RFC; ORGANIZER field is not to be used for non-group-scheduled entities
+        # TODO -- NO! see the RFC; ORGANIZER field is not to be used for
+        # non-group-scheduled entities.
         # ORGANIZER;CN=%(name):MAILTO=%(email)
         # ATTENDEE;CN=%(name);ROLE=REQ-PARTICIPANT:mailto:%(email)
 
diff --git a/Products/ATContentTypes/lib/constraintypes.py b/Products/ATContentTypes/lib/constraintypes.py
index 98d8b6b..7df12bc 100644
--- a/Products/ATContentTypes/lib/constraintypes.py
+++ b/Products/ATContentTypes/lib/constraintypes.py
@@ -21,10 +21,13 @@
 from zope.interface import implements
 
 
-# constants for enableConstrainMixin
-ACQUIRE = -1  # acquire locallyAllowedTypes from parent (default)
-DISABLED = 0  # use default behavior of PortalFolder which uses the FTI information
-ENABLED = 1  # allow types from locallyAllowedTypes only
+# Constants for enableConstrainMixin.
+# Acquire locallyAllowedTypes from parent (default):
+ACQUIRE = -1
+# Use default behavior of PortalFolder which uses the FTI information:
+DISABLED = 0
+# Allow types from locallyAllowedTypes only:
+ENABLED = 1
 
 # Note: ACQUIRED means get allowable types from parent (regardless of
 #  whether it supports IConstrainTypes) but only if parent is the same
@@ -34,71 +37,78 @@
 enableDisplayList = IntDisplayList((
     (ACQUIRE, _(u'constraintypes_acquire_label',
                 default=u'Use parent folder settings')),
-    (DISABLED, _(u'constraintypes_disable_label', default=u'Use portal default')),
-    (ENABLED, _(u'constraintypes_enable_label', default=u'Select manually')),
+    (DISABLED, _(u'constraintypes_disable_label',
+                 default=u'Use portal default')),
+    (ENABLED, _(u'constraintypes_enable_label',
+                default=u'Select manually')),
 ))
 
 ConstrainTypesMixinSchema = Schema((
-    IntegerField('constrainTypesMode',
-                 required=False,
-                 default_method="_ct_defaultConstrainTypesMode",
-                 vocabulary=enableDisplayList,
-                 languageIndependent=True,
-                 write_permission=ATCTPermissions.ModifyConstrainTypes,
-                 widget=SelectionWidget(
-                     label=_(u'label_contrain_types_mode',
-                             default=u'Constrain types mode'),
-                     description=_(u'description_constrain_types_mode',
-                                   default=u'Select the constraint type mode for this folder.'),
-                     visible={'view': 'invisible',
-                              'edit': 'invisible',
-                              },
-                 ),
-                 ),
-
-    LinesField('locallyAllowedTypes',
-               vocabulary='_ct_vocabularyPossibleTypes',
-               enforceVocabulary=False,
-               languageIndependent=True,
-               default_method='_ct_defaultAddableTypeIds',
-               accessor='getLocallyAllowedTypes',  # Respects ENABLE/DISABLE/ACQUIRE
-               write_permission=ATCTPermissions.ModifyConstrainTypes,
-               multiValued=True,
-               widget=MultiSelectionWidget(
-                   size=10,
-                   label=_(u'label_constrain_allowed_types',
-                           default=u'Permitted types'),
-                   description=_(u'description_constrain_allowed_types',
-                                 default=u'Select the types which will be addable inside this folder.'
-                                 ),
-                   visible={'view': 'invisible',
-                            'edit': 'invisible',
-                            },
-               ),
-               ),
-
-    LinesField('immediatelyAddableTypes',
-               vocabulary='_ct_vocabularyPossibleTypes',
-               enforceVocabulary=False,
-               languageIndependent=True,
-               default_method='_ct_defaultAddableTypeIds',
-               accessor='getImmediatelyAddableTypes',  # Respects ENABLE/DISABLE/ACQUIRE
-               write_permission=ATCTPermissions.ModifyConstrainTypes,
-               multiValued=True,
-               widget=MultiSelectionWidget(
-                   size=10,
-                   label=_(u'label_constrain_preferred_types',
-                           u'Preferred types'),
-                   description=_(u'description_constrain_preferred_types',
-                                 default=u'Select the types which will be addable '
-                                 'from the "Add new item" menu. Any '
-                                 'additional types set in the list above '
-                                 'will be addable from a separate form.'),
-                   visible={'view': 'invisible',
-                            'edit': 'invisible',
-                            },
-               ),
-               ),
+    IntegerField(
+        'constrainTypesMode',
+        required=False,
+        default_method="_ct_defaultConstrainTypesMode",
+        vocabulary=enableDisplayList,
+        languageIndependent=True,
+        write_permission=ATCTPermissions.ModifyConstrainTypes,
+        widget=SelectionWidget(
+            label=_(u'label_contrain_types_mode',
+                    default=u'Constrain types mode'),
+            description=_(
+                u'description_constrain_types_mode',
+                default=u'Select the constraint type mode for this folder.'),
+            visible={'view': 'invisible',
+                     'edit': 'invisible'},
+        ),
+    ),
+
+    LinesField(
+        'locallyAllowedTypes',
+        vocabulary='_ct_vocabularyPossibleTypes',
+        enforceVocabulary=False,
+        languageIndependent=True,
+        default_method='_ct_defaultAddableTypeIds',
+        accessor='getLocallyAllowedTypes',  # Respects ENABLE/DISABLE/ACQUIRE
+        write_permission=ATCTPermissions.ModifyConstrainTypes,
+        multiValued=True,
+        widget=MultiSelectionWidget(
+            size=10,
+            label=_(u'label_constrain_allowed_types',
+                    default=u'Permitted types'),
+            description=_(
+                u'description_constrain_allowed_types',
+                default=u'Select the types which will be addable '
+                        u'inside this folder.'
+            ),
+            visible={'view': 'invisible',
+                     'edit': 'invisible'},
+        ),
+    ),
+
+    LinesField(
+        'immediatelyAddableTypes',
+        vocabulary='_ct_vocabularyPossibleTypes',
+        enforceVocabulary=False,
+        languageIndependent=True,
+        default_method='_ct_defaultAddableTypeIds',
+        # Respects ENABLE/DISABLE/ACQUIRE:
+        accessor='getImmediatelyAddableTypes',
+        write_permission=ATCTPermissions.ModifyConstrainTypes,
+        multiValued=True,
+        widget=MultiSelectionWidget(
+            size=10,
+            label=_(u'label_constrain_preferred_types',
+                    u'Preferred types'),
+            description=_(
+                u'description_constrain_preferred_types',
+                default=u'Select the types which will be addable '
+                u'from the "Add new item" menu. Any '
+                u'additional types set in the list above '
+                u'will be addable from a separate form.'),
+            visible={'view': 'invisible',
+                     'edit': 'invisible'},
+        ),
+    ),
 ))
 
 
@@ -153,7 +163,7 @@ def validate_preferredTypes(self, value):
 
         disallowed = []
         for p in preferred:
-            if not p in allowed:
+            if p not in allowed:
                 disallowed.append(p)
 
         if disallowed:
@@ -189,7 +199,8 @@ def getLocallyAllowedTypes(self, context=None):
             elif not parentPortalTypeEqual(self):
                 # if parent.portal_type != self.portal_type:
                 default_addable_types = [
-                    fti.getId() for fti in self.getDefaultAddableTypes(context)]
+                    fti.getId() for fti in
+                    self.getDefaultAddableTypes(context)]
                 if ISelectableConstrainTypes.providedBy(parent):
                     return [t for t in parent.getLocallyAllowedTypes(context)
                             if t in default_addable_types]
@@ -282,7 +293,7 @@ def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kw):
             return PortalFolder.invokeFactory(self, type_name, id,
                                               RESPONSE=None, *args, **kw)
 
-        if not type_name in [fti.getId()
+        if type_name not in [fti.getId()
                              for fti in self.allowedContentTypes()]:
             raise ValueError('Disallowed subobject type: %s' % type_name)
 
diff --git a/Products/ATContentTypes/lib/validators.py b/Products/ATContentTypes/lib/validators.py
index 764c293..66c296e 100644
--- a/Products/ATContentTypes/lib/validators.py
+++ b/Products/ATContentTypes/lib/validators.py
@@ -20,8 +20,6 @@
 
 logger = logging.getLogger('ATCT')
 
-
-
 if HAS_MX_TIDY:
     from mx.Tidy import tidy as mx_tidy
 
@@ -33,16 +31,17 @@
 RE_MATCH_ERROR = re.compile('^line (\d+) column (\d+) - Error: (.*)$')
 ERROR_LINE = 'line %d column %d - Error: %s'
 
-# the following regex is safe because *? matches the minimal text in the body tag
-# and .* matches the maximum text between two body tags including other body tags
-# if they exists
+# The following regex is safe because *? matches the minimal text in the body
+# tag and .* matches the maximum text between two body tags including other
+# body tags if they exists
 RE_BODY = re.compile('<body[^>]*?>(.*)</body>', re.DOTALL)
 
 # get the encoding from an uploaded html-page
 # e.g. <meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 # we get ISO-8859-1 into the second match, the rest into the first and third.
 RE_GET_HTML_ENCODING = re.compile(
-    '(<meta.*?content-type.*?charset[\s]*=[\s]*)([^"]*?)("[^>]*?>)', re.S | re.I)
+    '(<meta.*?content-type.*?charset[\s]*=[\s]*)([^"]*?)("[^>]*?>)',
+    re.S | re.I)
 
 # subtract 11 line numbers from the warning/error
 SUBTRACT_LINES = 11
diff --git a/Products/ATContentTypes/setuphandlers.py b/Products/ATContentTypes/setuphandlers.py
index 0342946..e332bcb 100644
--- a/Products/ATContentTypes/setuphandlers.py
+++ b/Products/ATContentTypes/setuphandlers.py
@@ -107,8 +107,8 @@ def setupPortalContent(p):
                     target_language=target_language,
                     default="Congratulations! You have successfully installed "
                             "Plone.")
-                translated_text = util.translate(u'front-text',
-                                                 target_language=target_language)
+                translated_text = util.translate(
+                    u'front-text', target_language=target_language)
                 if translated_text != u'front-text':
                     front_text = translated_text
 
diff --git a/Products/ATContentTypes/tests/atctftestcase.py b/Products/ATContentTypes/tests/atctftestcase.py
index e71afe3..526c4c3 100644
--- a/Products/ATContentTypes/tests/atctftestcase.py
+++ b/Products/ATContentTypes/tests/atctftestcase.py
@@ -91,7 +91,8 @@ def test_createObject(self):
         self.assertEqual(new_obj.checkCreationFlag(), True)
 
     def check_newly_created(self):
-        """Objects created programmatically should not have the creation flag set"""
+        """Objects created programmatically should not have creation flag set.
+        """
         self.assertEqual(self.obj.checkCreationFlag(),
                          False)  # object is fully created
 
@@ -133,8 +134,9 @@ def test_linguaplone_views(self):
 
         def test_linguaplone_create_translation(self):
             # create translation creates a new object
-            response = self.publish('%s/createTranslation?language=de&set_language=de'
-                                    % self.obj_path, self.basic_auth)
+            response = self.publish(
+                '{}/createTranslation?language=de&set_language=de'.format(
+                    self.obj_path), self.basic_auth)
             self.assertEqual(response.getStatus(), 302)  # Redirect
 
             body = response.getBody()
diff --git a/Products/ATContentTypes/tests/atcttestcase.py b/Products/ATContentTypes/tests/atcttestcase.py
index 9548701..c087828 100644
--- a/Products/ATContentTypes/tests/atcttestcase.py
+++ b/Products/ATContentTypes/tests/atcttestcase.py
@@ -40,8 +40,8 @@ def afterSetUp(self):
         #  - Large Plone Folder
         #  - Topic
         user = self.portal.acl_users.getUserById(default_user)
-        orig_roles = self.portal.acl_users.portal_role_manager.getRolesForPrincipal(
-            user)
+        role_manager = self.portal.acl_users.portal_role_manager
+        orig_roles = role_manager.getRolesForPrincipal(user)
         self.setRoles(['Manager'])
         ttool = self.portal.portal_types
         cb_copy_data = ttool.manage_copyObjects(['Folder'])
diff --git a/Products/ATContentTypes/tests/test_atdocument.py b/Products/ATContentTypes/tests/test_atdocument.py
index 3a7aee9..3475432 100644
--- a/Products/ATContentTypes/tests/test_atdocument.py
+++ b/Products/ATContentTypes/tests/test_atdocument.py
@@ -123,9 +123,11 @@ def test_tidy_validator_with_upload_wrong_encoding(self):
             input_file_name = 'tidy1-in.html'
             in_file = open(input_file_path(input_file_name))
             env = {'REQUEST_METHOD': 'PUT'}
-            headers = {'content-type': 'text/html',
-                       'content-length': len(in_file.read()),
-                       'content-disposition': 'attachment; filename=%s' % input_file_name}
+            headers = {
+                'content-type': 'text/html',
+                'content-length': len(in_file.read()),
+                'content-disposition': 'attachment; filename={}'.format(
+                    input_file_name)}
             in_file.seek(0)
             fs = FieldStorage(fp=in_file, environ=env, headers=headers)
             f = FileUpload(fs)
@@ -234,8 +236,10 @@ def test_textField(self):
         self.assertTrue(field.type == 'text', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AnnotationStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AnnotationStorage(migrate=True),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') ==
+            atapi.AnnotationStorage(migrate=True),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == NotRequiredTidyHTMLValidator,
                         'Value is %s' % repr(field.validators))
@@ -261,7 +265,8 @@ class TestATDocumentFunctional(atctftestcase.ATCTIntegrationTestCase):
     views = ('document_view', )
 
     def test_id_change_on_initial_edit(self):
-        """Make sure Id is taken from title on initial edit and not otherwise"""
+        """Make sure Id is taken from title on initial edit and not otherwise.
+        """
         # first create an object using the createObject script
         auth = self.getAuthToken()
         response = self.publish(
@@ -290,16 +295,22 @@ def test_id_change_on_initial_edit(self):
 
         from plone.protect import auto
         auto.CSRF_DISABLED = True
-        response = self.publish('%s/atct_edit?form.submitted=1&title=%s&text=Blank&_authenticator=%s' %
-                                (new_obj_path, obj_title, auth), self.basic_auth)  # Edit object
+        # Edit object
+        response = self.publish(
+            '{}/atct_edit?form.submitted=1&title={}&text=Blank'
+            '&_authenticator={}'.format(
+                new_obj_path, obj_title, auth), self.basic_auth)
         self.assertEqual(response.getStatus(), 302)  # OK
         new_obj = self.folder[new_id]
         self.assertEqual(new_obj.getId(), new_id)  # does id match
         self.assertEqual(new_obj.checkCreationFlag(),
                          False)  # object is fully created
         new_title = "Second Title"
-        response = self.publish('%s/atct_edit?form.submitted=1&title=%s&text=Blank&_authenticator=%s' % (
-            '/%s' % new_obj.absolute_url(1), new_title, auth), self.basic_auth)  # Edit object
+        # Edit object
+        response = self.publish(
+            '/{}/atct_edit?form.submitted=1&title={}&text=Blank'
+            '&_authenticator={}'.format(
+                new_obj.absolute_url(1), new_title, auth), self.basic_auth)
         self.assertEqual(response.getStatus(), 302)  # OK
         self.assertEqual(new_obj.getId(), new_id)  # id shouldn't have changed
         auto.CSRF_DISABLED = False
diff --git a/Products/ATContentTypes/tests/test_atevent.py b/Products/ATContentTypes/tests/test_atevent.py
index 67d84a9..465193b 100644
--- a/Products/ATContentTypes/tests/test_atevent.py
+++ b/Products/ATContentTypes/tests/test_atevent.py
@@ -176,8 +176,9 @@ def test_locationField(self):
         self.assertTrue(field.type == 'string', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == EmptyValidator,
                         'Value is %s' % str(field.validators))
@@ -218,8 +219,9 @@ def test_subjectField(self):
         self.assertTrue(field.type == 'lines', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.MetadataStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.MetadataStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.MetadataStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == EmptyValidator,
                         'Value is %s' % repr(field.validators))
@@ -259,8 +261,9 @@ def test_eventUrlField(self):
         self.assertTrue(field.type == 'string', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertEqual(field.validators, URLValidator)
         self.assertTrue(isinstance(field.widget, atapi.StringWidget),
@@ -305,8 +308,9 @@ def test_startDateField(self):
         self.assertTrue(field.type == 'datetime', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == (),
                         'Value is %s' % str(field.validators))
@@ -352,8 +356,9 @@ def test_endDateField(self):
         self.assertTrue(field.type == 'datetime', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == (),
                         'Value is %s' % str(field.validators))
@@ -397,8 +402,9 @@ def test_contactNameField(self):
         self.assertTrue(field.type == 'string', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == EmptyValidator,
                         'Value is %s' % str(field.validators))
@@ -442,8 +448,9 @@ def test_contactEmailField(self):
         self.assertTrue(field.type == 'string', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == EmailValidator,
                         'Value is %s' % str(field.validators))
@@ -487,8 +494,9 @@ def test_contactPhoneField(self):
         self.assertTrue(field.type == 'string', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertEqual(field.validators, EmptyValidator)
         self.assertTrue(isinstance(field.widget, atapi.StringWidget),
@@ -531,8 +539,9 @@ def test_attendeesField(self):
         self.assertTrue(field.type == 'lines', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(isinstance(field.widget, atapi.LinesWidget),
                         'Value is %s' % id(field.widget))
@@ -574,8 +583,10 @@ def test_textField(self):
         self.assertTrue(field.type == 'text', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AnnotationStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AnnotationStorage(migrate=True),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') ==
+            atapi.AnnotationStorage(migrate=True),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == NotRequiredTidyHTMLValidator,
                         'Value is %s' % repr(field.validators))
diff --git a/Products/ATContentTypes/tests/test_atfile.py b/Products/ATContentTypes/tests/test_atfile.py
index d9f9c40..b5a331e 100644
--- a/Products/ATContentTypes/tests/test_atfile.py
+++ b/Products/ATContentTypes/tests/test_atfile.py
@@ -19,9 +19,6 @@
 
 ZopeTestCase  # pyflakes
 
-
-
-
 file_text = """
 foooooo
 """
@@ -160,7 +157,7 @@ def test_fileField(self):
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 1, 'Value is %s' % field.required)
         self.assertFalse(field.default, 'Value is %s' % str(field.default))
-        self.assertTrue(field.searchable == True,
+        self.assertTrue(field.searchable,
                         'Value is %s' % field.searchable)
         self.assertTrue(field.vocabulary == (),
                         'Value is %s' % str(field.vocabulary))
@@ -184,11 +181,16 @@ def test_fileField(self):
         self.assertTrue(field.type == 'blob', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AnnotationStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AnnotationStorage(migrate=True),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') ==
+            atapi.AnnotationStorage(migrate=True),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
-        self.assertTrue(field.validators == "(('isNonEmptyFile', V_REQUIRED), ('checkFileMaxSize', V_REQUIRED))",
-                        'Value is %s' % str(field.validators))
+        self.assertTrue(
+            field.validators ==
+            "(('isNonEmptyFile', V_REQUIRED), " +
+            "('checkFileMaxSize', V_REQUIRED))",
+            'Value is %s' % str(field.validators))
         self.assertTrue(isinstance(field.widget, atapi.FileWidget),
                         'Value is %s' % id(field.widget))
         vocab = field.Vocabulary(dummy)
diff --git a/Products/ATContentTypes/tests/test_atfolder.py b/Products/ATContentTypes/tests/test_atfolder.py
index 032e01b..ef52e0f 100644
--- a/Products/ATContentTypes/tests/test_atfolder.py
+++ b/Products/ATContentTypes/tests/test_atfolder.py
@@ -122,7 +122,8 @@ def test_dictBehavior(self):
         try:
             self.assertEqual(['d1'], list(f1))  # iter
         except (KeyError, AttributeError):
-            print '\nKnown failure: please see comments in `test_dictBehavior`!'
+            print('\nKnown failure: please see comments in '
+                  '`test_dictBehavior`!')
         self.assertEqual(['d1'], list(f1.aq_base))  # iter (this works, weird!)
         self.assertTrue(f1.values()[0].aq_base is new_doc.aq_base)  # values
         self.assertTrue(f1.get('d1').aq_base is new_doc.aq_base)  # get
@@ -155,7 +156,8 @@ def test_dynamic_view_without_view(self):
     def test_selectViewTemplate(self):
         # create an object using the createObject script
         self.publish(
-            '%s/selectViewTemplate?templateId=atct_album_view&_authenticator=%s' % (
+            '{}/selectViewTemplate?templateId=atct_album_view'
+            '&_authenticator={}'.format(
                 self.obj_path, self.getAuthToken(portal_owner)),
             self.owner_auth)
         self.assertEqual(self.obj.getLayout(), 'atct_album_view')
diff --git a/Products/ATContentTypes/tests/test_atimage.py b/Products/ATContentTypes/tests/test_atimage.py
index db5ed12..e59f29f 100644
--- a/Products/ATContentTypes/tests/test_atimage.py
+++ b/Products/ATContentTypes/tests/test_atimage.py
@@ -47,8 +47,10 @@ def editATCT(obj):
 
 
 class TestIDFromTitle(FunctionalTestCase):
-    """Browsertests to make sure ATImages derive their default IDs from their titles"""
-    # TODO: Merge into TestATImageFunctional, below.
+    """Browsertests to make sure ATImages derive default IDs from titles.
+
+    TODO: Merge into TestATImageFunctional, below.
+    """
 
     def afterSetUp(self):
         self.userId = 'fred'
@@ -260,11 +262,16 @@ def test_imageField(self):
         self.assertTrue(field.type == 'blob', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AnnotationStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AnnotationStorage(migrate=True),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') ==
+            atapi.AnnotationStorage(migrate=True),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
-        self.assertTrue(field.validators == "(('isNonEmptyFile', V_REQUIRED), ('checkImageMaxSize', V_REQUIRED))",
-                        'Value is %s' % str(field.validators))
+        self.assertTrue(
+            field.validators ==
+            "(('isNonEmptyFile', V_REQUIRED), " +
+            "('checkImageMaxSize', V_REQUIRED))",
+            'Value is %s' % str(field.validators))
         self.assertTrue(isinstance(field.widget, atapi.ImageWidget),
                         'Value is %s' % id(field.widget))
         vocab = field.Vocabulary(dummy)
diff --git a/Products/ATContentTypes/tests/test_atlink.py b/Products/ATContentTypes/tests/test_atlink.py
index 16ebb49..85f3122 100644
--- a/Products/ATContentTypes/tests/test_atlink.py
+++ b/Products/ATContentTypes/tests/test_atlink.py
@@ -116,8 +116,9 @@ def test_remoteUrlField(self):
         self.assertTrue(field.type == 'string', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == (),
                         'Value is %s' % str(field.validators))
diff --git a/Products/ATContentTypes/tests/test_atnewsitem.py b/Products/ATContentTypes/tests/test_atnewsitem.py
index 678e444..f8ba964 100644
--- a/Products/ATContentTypes/tests/test_atnewsitem.py
+++ b/Products/ATContentTypes/tests/test_atnewsitem.py
@@ -98,8 +98,10 @@ def test_textField(self):
         self.assertTrue(field.type == 'text', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AnnotationStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AnnotationStorage(migrate=True),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') ==
+            atapi.AnnotationStorage(migrate=True),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == NotRequiredTidyHTMLValidator,
                         'Value is %s' % repr(field.validators))
diff --git a/Products/ATContentTypes/tests/test_attopic.py b/Products/ATContentTypes/tests/test_attopic.py
index bc3cb13..cfd9211 100644
--- a/Products/ATContentTypes/tests/test_attopic.py
+++ b/Products/ATContentTypes/tests/test_attopic.py
@@ -221,17 +221,23 @@ def test_nested(self):
 
     def test_nested_friendly_date_criteria(self):
         """
-        The queries before adding fix for https://dev.plone.org/plone/ticket/8827
+        The queries before adding fix for
+        https://dev.plone.org/plone/ticket/8827
         where subtopics should inhert start / end keys
         topic query: {
-        'start': {'query': DateTime('2009/01/30 21:54:27.370 GMT+1'), 'range': 'min'}
+          'start': {'query': DateTime('2009/01/30 21:54:27.370 GMT+1'),
+          'range': 'min'}
         }
         subtopic query: {
-        'start': {'query': DateTime('2009/01/30 21:54:27.444 GMT+1'), 'range': 'min'},
-        'end': {'query': DateTime('2009/01/30 21:54:27.445 GMT+1'), 'range': 'max'}
+          'start': {'query': DateTime('2009/01/30 21:54:27.444 GMT+1'),
+                    'range': 'min'},
+          'end': {'query': DateTime('2009/01/30 21:54:27.445 GMT+1'),
+                  'range': 'max'}
         }
-        ^^ the 'start' key in the subtopic query is odd and results in combination
-        with the 'end' key in zero results even if there is old/past items.
+
+        ^^ the 'start' key in the subtopic query is odd and results in
+        combination with the 'end' key in zero results even if there is
+        old/past items.
         """
         # Add topic - future items
         topic = self._ATCT
@@ -498,8 +504,9 @@ def test_acquireCriteriaField(self):
         self.assertTrue(field.type == 'boolean', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(field.validators == EmptyValidator,
                         'Value is %s' % str(field.validators))
         self.assertTrue(isinstance(field.widget, atapi.BooleanWidget),
@@ -543,8 +550,9 @@ def test_limitNumberField(self):
         self.assertTrue(field.type == 'boolean', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(field.validators == EmptyValidator,
                         'Value is %s' % str(field.validators))
         self.assertTrue(isinstance(field.widget, atapi.BooleanWidget),
@@ -586,8 +594,9 @@ def test_itemCountField(self):
         self.assertTrue(field.type == 'integer', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(field.validators == EmptyValidator,
                         'Value is %s' % str(field.validators))
         self.assertTrue(isinstance(field.widget, atapi.IntegerWidget),
@@ -631,8 +640,9 @@ def test_customViewField(self):
         self.assertTrue(field.type == 'boolean', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(field.validators == EmptyValidator,
                         'Value is %s' % str(field.validators))
         self.assertTrue(isinstance(field.widget, atapi.BooleanWidget),
@@ -676,8 +686,9 @@ def test_customViewFieldsField(self):
         self.assertTrue(field.type == 'lines', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(field.validators == EmptyValidator,
                         'Value is %s' % str(field.validators))
         self.assertTrue(isinstance(field.widget, atapi.InAndOutWidget),
diff --git a/Products/ATContentTypes/tests/test_browserdefaultmixin.py b/Products/ATContentTypes/tests/test_browserdefaultmixin.py
index ecc06c3..d87f1c9 100644
--- a/Products/ATContentTypes/tests/test_browserdefaultmixin.py
+++ b/Products/ATContentTypes/tests/test_browserdefaultmixin.py
@@ -30,10 +30,12 @@ def afterSetUp(self):
         self.app.REQUEST.set('PARENTS', [self.app])
 
     def test_isMixedIn(self):
-        self.assertTrue(isinstance(self.af, BrowserDefaultMixin),
-                        "ISelectableBrowserDefault was not mixed in to ATFolder")
-        self.assertTrue(ISelectableBrowserDefault.providedBy(self.af),
-                        "ISelectableBrowserDefault not implemented by ATFolder instance")
+        self.assertTrue(
+            isinstance(self.af, BrowserDefaultMixin),
+            "ISelectableBrowserDefault was not mixed in to ATFolder")
+        self.assertTrue(
+            ISelectableBrowserDefault.providedBy(self.af),
+            "ISelectableBrowserDefault not implemented by ATFolder instance")
 
     def test_defaultFolderViews(self):
         self.assertEqual(self.af.getLayout(), 'folder_listing')
diff --git a/Products/ATContentTypes/tests/test_calendar.py b/Products/ATContentTypes/tests/test_calendar.py
index c485751..02ba9ff 100644
--- a/Products/ATContentTypes/tests/test_calendar.py
+++ b/Products/ATContentTypes/tests/test_calendar.py
@@ -161,14 +161,15 @@ def testRenderingForTopic(self):
         view.render()
         self.assertEqual(len(headers), 2)
         self.assertEqual(headers['Content-Type'], 'text/calendar')
-        self.checkOrder(''.join(output),
-                        'BEGIN:VCALENDAR',
-                        'BEGIN:VEVENT',
-                        'SUMMARY:Plone Conf 2008',
-                        'LOCATION:DC',
-                        'URL:http://plone.org/events/conferences/2008-washington-dc',
-                        'END:VEVENT',
-                        'END:VCALENDAR')
+        self.checkOrder(
+            ''.join(output),
+            'BEGIN:VCALENDAR',
+            'BEGIN:VEVENT',
+            'SUMMARY:Plone Conf 2008',
+            'LOCATION:DC',
+            'URL:http://plone.org/events/conferences/2008-washington-dc',
+            'END:VEVENT',
+            'END:VCALENDAR')
         lines = ''.join(output).splitlines()
         self.assertEqual(len([l for l in lines if l == 'BEGIN:VEVENT']), 1)
 
@@ -195,10 +196,11 @@ def testCacheKey(self):
         key4 = cachekey(None, view)
         self.assertNotEqual(key1, key4)
         # the same goes if another one is added
-        self.folder[self.folder.invokeFactory('Event',
-                                              id='ploneconf2009', title='Plone Conf 2009',
-                                              startDate='2008/10/28', endDate='2008/10/30', location='Budapest',
-                                              eventUrl='http://plone.org/events/conferences/2009')]
+        self.folder[self.folder.invokeFactory(
+            'Event',
+            id='ploneconf2009', title='Plone Conf 2009',
+            startDate='2008/10/28', endDate='2008/10/30', location='Budapest',
+            eventUrl='http://plone.org/events/conferences/2009')]
         view.update()
         key5 = cachekey(None, view)
         self.assertNotEqual(key1, key5)
diff --git a/Products/ATContentTypes/tests/test_constraintypes.py b/Products/ATContentTypes/tests/test_constraintypes.py
index 806048b..a79920d 100644
--- a/Products/ATContentTypes/tests/test_constraintypes.py
+++ b/Products/ATContentTypes/tests/test_constraintypes.py
@@ -26,11 +26,12 @@ def afterSetUp(self):
         self.at = self.tt.getTypeInfo(self.af)
 
     def test_isMixedIn(self):
-        self.assertTrue(isinstance(self.af,
-                                   constraintypes.ConstrainTypesMixin),
-                        "ConstrainTypesMixin was not mixed in to ATFolder")
-        self.assertTrue(ISelectableConstrainTypes.providedBy(self.af),
-                        "ISelectableConstrainTypes not implemented by ATFolder instance")
+        self.assertTrue(
+            isinstance(self.af, constraintypes.ConstrainTypesMixin),
+            "ConstrainTypesMixin was not mixed in to ATFolder")
+        self.assertTrue(
+            ISelectableConstrainTypes.providedBy(self.af),
+            "ISelectableConstrainTypes not implemented by ATFolder instance")
 
     def test_enabled(self):
         self.af.setConstrainTypesMode(constraintypes.ENABLED)
@@ -176,11 +177,12 @@ def test_acquireFromCustomHetereogenousParent(self):
         folder2 = self.af.folder2
         folder2.setConstrainTypesMode(constraintypes.ACQUIRE)
 
-        # News item is not in addable types because it is globally forbidden in Folder2 type
-        # and Folder is not in addable types because it is locally forbidden in
-        # folder2 parent
-        self.assertEqual([fti.getId() for fti in folder2.allowedContentTypes()],
-                         ['Image'])
+        # News item is not in addable types because it is globally forbidden in
+        # Folder2 type and Folder is not in addable types because it is locally
+        # forbidden in folder2 parent
+        self.assertEqual(
+            [fti.getId() for fti in folder2.allowedContentTypes()],
+            ['Image'])
         self.assertEqual(folder2.getImmediatelyAddableTypes(), ['Image'])
 
 tests.append(TestConstrainTypes)
diff --git a/Products/ATContentTypes/tests/test_controlpanel.py b/Products/ATContentTypes/tests/test_controlpanel.py
index babb62c..8b92589 100644
--- a/Products/ATContentTypes/tests/test_controlpanel.py
+++ b/Products/ATContentTypes/tests/test_controlpanel.py
@@ -12,6 +12,7 @@ def afterSetUp(self):
 
     def testDefaultConfiglets(self):
         for title in self.configlets:
-            self.assertTrue(title in [a.getAction(self)['id']
-                                      for a in self.controlpanel.listActions()],
-                            "Missing configlet with id '%s'" % title)
+            self.assertTrue(
+                title in [a.getAction(self)['id']
+                          for a in self.controlpanel.listActions()],
+                "Missing configlet with id '%s'" % title)
diff --git a/Products/ATContentTypes/tests/test_criteria.py b/Products/ATContentTypes/tests/test_criteria.py
index 43d2cf8..56f6135 100644
--- a/Products/ATContentTypes/tests/test_criteria.py
+++ b/Products/ATContentTypes/tests/test_criteria.py
@@ -6,17 +6,17 @@
 from Products.Archetypes.interfaces.referenceable import IReferenceable
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.boolean import ATBooleanCriterion
-from Products.ATContentTypes.criteria.currentauthor import ATCurrentAuthorCriterion
+from Products.ATContentTypes.criteria.currentauthor import ATCurrentAuthorCriterion  # noqa
 from Products.ATContentTypes.criteria.date import ATDateCriteria
 from Products.ATContentTypes.criteria.daterange import ATDateRangeCriterion
 from Products.ATContentTypes.criteria.list import ATListCriterion
 from Products.ATContentTypes.criteria.path import ATPathCriterion
 from Products.ATContentTypes.criteria.portaltype import ATPortalTypeCriterion
 from Products.ATContentTypes.criteria.reference import ATReferenceCriterion
-from Products.ATContentTypes.criteria.relativepath import ATRelativePathCriterion
+from Products.ATContentTypes.criteria.relativepath import ATRelativePathCriterion  # noqa
 from Products.ATContentTypes.criteria.selection import ATSelectionCriterion
 from Products.ATContentTypes.criteria.simpleint import ATSimpleIntCriterion
-from Products.ATContentTypes.criteria.simplestring import ATSimpleStringCriterion
+from Products.ATContentTypes.criteria.simplestring import ATSimpleStringCriterion  # noqa
 from Products.ATContentTypes.criteria.sort import ATSortCriterion
 from Products.ATContentTypes.interfaces import IATTopicCriterion
 from Products.ATContentTypes.tests import atcttestcase
@@ -492,7 +492,8 @@ def test_vocabulary(self):
         self.dummy.Schema()['field'].set(self.dummy, 'portal_types')
         self.assertTrue('Document' in self.dummy.getCurrentValues().keys())
         self.assertTrue(
-            'ATSimpleStringCriterion' not in self.dummy.getCurrentValues().keys())
+            'ATSimpleStringCriterion' not in
+            self.dummy.getCurrentValues().keys())
 
     def test_vocabulary_sorts_by_title(self):
         # Should return standard types, but not blacklisted types
@@ -626,7 +627,8 @@ def test_relative_path_query7(self):
     def test_relative_path_query8(self):
         self.path_crit.setRelativePath('.')  # should give the new_topic
         self.assertTrue(self.path_crit.getCriteriaItems() == (
-            ('path', {'query': '/plone/folderA/folderA1/new_topic', 'depth': 1}),))
+            ('path', {'query': '/plone/folderA/folderA1/new_topic',
+                      'depth': 1}),))
 
     def test_relative_path_query9(self):
         # Acquisition can mess us up, for example when a BrowserView
@@ -717,8 +719,9 @@ def testRegisterCriteria(self):
         # add and ensure that it was added
         self.crit_registry.register(ATDateCriteria, ('Bogus Index',))
         self.assertTrue(ATDateCriteria in self.crit_registry.listCriteria())
-        self.assertEqual(self.crit_registry.indicesByCriterion('ATFriendlyDateCriteria'),
-                         ('Bogus Index',))
+        self.assertEqual(
+            self.crit_registry.indicesByCriterion('ATFriendlyDateCriteria'),
+            ('Bogus Index',))
 
     def testCriteriaIndexLookupOnBadIndex(self):
         # Make sure we don't throw errors when someone has a non-default index
diff --git a/Products/ATContentTypes/tests/test_doctests.py b/Products/ATContentTypes/tests/test_doctests.py
index 7717d7f..9ef2e61 100644
--- a/Products/ATContentTypes/tests/test_doctests.py
+++ b/Products/ATContentTypes/tests/test_doctests.py
@@ -1,19 +1,25 @@
 # -*- coding: utf-8 -*-
 
-FILES = [
-    'events.txt', 'editing.txt',
-    'topictool.txt', 'portaltype_criterion.txt', 'webdav.txt', 'http_access.txt',
-    'reindex_sanity.txt', 'uploading.txt', 'browser_collection_views.txt',
-    # traversal.txt registers the browser page "document_view", and this registration
-    # stays active in different doctests, so we make sure to include it last.
-    'traversal.txt',
-]
-
 from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING
 from plone.testing import layered
 
 import doctest
 
+FILES = [
+    'events.txt',
+    'editing.txt',
+    'topictool.txt',
+    'portaltype_criterion.txt',
+    'webdav.txt',
+    'http_access.txt',
+    'reindex_sanity.txt',
+    'uploading.txt',
+    'browser_collection_views.txt',
+    # traversal.txt registers the browser page "document_view", and this
+    # registration stays active in different doctests, so we make sure to
+    # include it last.
+    'traversal.txt',
+]
 
 OPTIONFLAGS = (doctest.ELLIPSIS |
                doctest.NORMALIZE_WHITESPACE |
@@ -21,14 +27,15 @@
                doctest.REPORT_ONLY_FIRST_FAILURE)
 
 
-
 def test_suite():
     import unittest
     suite = unittest.TestSuite()
     for testfile in FILES:
-        suite.addTest(layered(doctest.DocFileSuite(testfile,
-                                                   optionflags=OPTIONFLAGS,
-                                                   package="Products.ATContentTypes.tests",),
-                              layer=PTC_FUNCTIONAL_TESTING)
-                      )
+        suite.addTest(layered(
+            doctest.DocFileSuite(
+                testfile,
+                optionflags=OPTIONFLAGS,
+                package="Products.ATContentTypes.tests", ),
+            layer=PTC_FUNCTIONAL_TESTING)
+        )
     return suite
diff --git a/Products/ATContentTypes/tests/test_installation.py b/Products/ATContentTypes/tests/test_installation.py
index e8743c8..cebc86f 100644
--- a/Products/ATContentTypes/tests/test_installation.py
+++ b/Products/ATContentTypes/tests/test_installation.py
@@ -63,8 +63,9 @@ def test_reindex_doesnt_add_tools(self):
             self.assertEqual(l, 0, (id, l, result))
 
     def test_adds_related_items_catalog_index(self):
-        self.assertEqual(self.cat.Indexes['getRawRelatedItems'].__class__.__name__,
-                         'KeywordIndex')
+        self.assertEqual(
+            self.cat.Indexes['getRawRelatedItems'].__class__.__name__,
+            'KeywordIndex')
 
     def test_api_import(self):
         import Products.ATContentTypes.atct
diff --git a/Products/ATContentTypes/tool/factory.py b/Products/ATContentTypes/tool/factory.py
index a76d0b8..232c12c 100644
--- a/Products/ATContentTypes/tool/factory.py
+++ b/Products/ATContentTypes/tool/factory.py
@@ -121,10 +121,10 @@ def __ac_local_roles__(self):
                     lr = lr()
                 lr = lr or {}
                 for k, v in lr.items():
-                    if not k in local_roles:
+                    if k not in local_roles:
                         local_roles[k] = []
                     for role in v:
-                        if not role in local_roles[k]:
+                        if role not in local_roles[k]:
                             local_roles[k].append(role)
 
             # Check if local role has to be acquired (PLIP 16)
@@ -185,9 +185,15 @@ def allowedContentTypes(self):
 
     def __getitem__(self, id):
         # Zope's inner acquisition chain for objects returned by __getitem__
-        # will be portal -> portal_factory -> temporary_folder -> object
-        # What we really want is for the inner acquisition chain to be
-        # intended_parent_folder -> portal_factory -> temporary_folder -> object
+        # will be:
+        #
+        # portal -> portal_factory -> temporary_folder -> object
+        #
+        # What we really want is for the inner acquisition chain to be:
+        #
+        # intended_parent_folder -> portal_factory -> temporary_folder ->
+        # object
+        #
         # So we need to rewrap...
         portal_factory = aq_parent(aq_inner(self))
         intended_parent = aq_parent(portal_factory)
@@ -397,7 +403,7 @@ def __before_publishing_traverse__(self, other, REQUEST):
         type_name = stack[-1]
         types_tool = getToolByName(self, 'portal_types')
         # make sure this is really a type name
-        if not type_name in types_tool.listContentTypes():
+        if type_name not in types_tool.listContentTypes():
             return  # nope -- do nothing
 
         gobbled_length += 1
@@ -443,7 +449,7 @@ def __bobo_traverse__(self, REQUEST, name):
         # cleared by __before_publishing_traverse__
         name = str(name)  # fix unicode weirdness
         types_tool = getToolByName(self, 'portal_types')
-        if not name in types_tool.listContentTypes():
+        if name not in types_tool.listContentTypes():
             # not a type name -- do the standard thing
             return getattr(self, name)
         # a type name -- return a temp folder
@@ -499,7 +505,7 @@ def _getTempFolder(self, type_name):
 
         # make sure we can add an object of this type to the temp folder
         types_tool = getToolByName(self, 'portal_types')
-        if not type_name in types_tool.TempFolder.allowed_content_types:
+        if type_name not in types_tool.TempFolder.allowed_content_types:
             # update allowed types for tempfolder
             types_tool.TempFolder.allowed_content_types = \
                 (types_tool.listContentTypes())
diff --git a/Products/ATContentTypes/tool/metadata.py b/Products/ATContentTypes/tool/metadata.py
index 701d814..d7ec1a1 100644
--- a/Products/ATContentTypes/tool/metadata.py
+++ b/Products/ATContentTypes/tool/metadata.py
@@ -57,8 +57,8 @@ def __init__(self, is_multi_valued=False):
     #
     security.declareProtected(ManagePortal, 'edit')
 
-    def edit(self, is_required, supply_default, default_value, enforce_vocabulary, allowed_vocabulary
-             ):
+    def edit(self, is_required, supply_default, default_value,
+             enforce_vocabulary, allowed_vocabulary):
         self.is_required = bool(is_required)
         self.supply_default = bool(supply_default)
         self.default_value = default_value
@@ -211,19 +211,18 @@ def __init__(self, id, element_specs=()):
     #
     #   ZMI methods
     #
-    manage_options = (({'label': 'Elements', 'action': 'elementPoliciesForm'
-                        },
-                       )
-                      + SimpleItem.manage_options
-                      )
+    manage_options = (
+        ({'label': 'Elements', 'action': 'elementPoliciesForm'}, ) +
+        SimpleItem.manage_options)
 
     security.declareProtected(ManagePortal, 'elementPoliciesForm')
     elementPoliciesForm = DTMLFile('metadataElementPolicies', WWW_DIR)
 
     security.declareProtected(ManagePortal, 'addElementPolicy')
 
-    def addElementPolicy(self, element, content_type, is_required, supply_default, default_value, enforce_vocabulary, allowed_vocabulary, REQUEST=None
-                         ):
+    def addElementPolicy(self, element, content_type, is_required,
+                         supply_default, default_value, enforce_vocabulary,
+                         allowed_vocabulary, REQUEST=None):
         """ Add a type-specific policy for one of our elements.
         """
         if content_type == '<default>':
@@ -232,14 +231,13 @@ def addElementPolicy(self, element, content_type, is_required, supply_default, d
         spec = self.getElementSpec(element)
         spec.addPolicy(content_type)
         policy = spec.getPolicy(content_type)
-        policy.edit(is_required, supply_default, default_value, enforce_vocabulary, allowed_vocabulary
-                    )
+        policy.edit(is_required, supply_default, default_value,
+                    enforce_vocabulary, allowed_vocabulary)
         if REQUEST is not None:
-            REQUEST['RESPONSE'].redirect(self.absolute_url()
-                                         + '/elementPoliciesForm'
-                                         + '?element=' + element
-                                         + '&manage_tabs_message=Policy+added.'
-                                         )
+            REQUEST['RESPONSE'].redirect(
+                self.absolute_url() +
+                '/elementPoliciesForm?element=' + element +
+                '&manage_tabs_message=Policy+added.')
 
     security.declareProtected(ManagePortal, 'removeElementPolicy')
 
@@ -253,16 +251,16 @@ def removeElementPolicy(self, element, content_type, REQUEST=None
         spec = self.getElementSpec(element)
         spec.removePolicy(content_type)
         if REQUEST is not None:
-            REQUEST['RESPONSE'].redirect(self.absolute_url()
-                                         + '/elementPoliciesForm'
-                                         + '?element=' + element
-                                         + '&manage_tabs_message=Policy+removed.'
-                                         )
+            REQUEST['RESPONSE'].redirect(
+                self.absolute_url() +
+                '/elementPoliciesForm?element=' + element +
+                '&manage_tabs_message=Policy+removed.')
 
     security.declareProtected(ManagePortal, 'updateElementPolicy')
 
-    def updateElementPolicy(self, element, content_type, is_required, supply_default, default_value, enforce_vocabulary, allowed_vocabulary, REQUEST=None
-                            ):
+    def updateElementPolicy(self, element, content_type, is_required,
+                            supply_default, default_value, enforce_vocabulary,
+                            allowed_vocabulary, REQUEST=None):
         """ Update a policy for one of our elements
 
         o 'content_type' will be '<default>' when we edit the default.
@@ -271,14 +269,13 @@ def updateElementPolicy(self, element, content_type, is_required, supply_default
             content_type = None
         spec = self.getElementSpec(element)
         policy = spec.getPolicy(content_type)
-        policy.edit(is_required, supply_default, default_value, enforce_vocabulary, allowed_vocabulary
-                    )
+        policy.edit(is_required, supply_default, default_value,
+                    enforce_vocabulary, allowed_vocabulary)
         if REQUEST is not None:
-            REQUEST['RESPONSE'].redirect(self.absolute_url()
-                                         + '/elementPoliciesForm'
-                                         + '?element=' + element
-                                         + '&manage_tabs_message=Policy+updated.'
-                                         )
+            REQUEST['RESPONSE'].redirect(
+                self.absolute_url() +
+                '/elementPoliciesForm?element=' + element +
+                '&manage_tabs_message=Policy+updated.')
 
     #
     #   Element spec manipulation.
@@ -312,10 +309,10 @@ def addElementSpec(self, element, is_multi_valued, REQUEST=None):
         self.element_specs[element] = ElementSpec(is_multi_valued)
 
         if REQUEST is not None:
-            REQUEST['RESPONSE'].redirect(self.absolute_url()
-                                         + '/propertiesForm'
-                                         + '?manage_tabs_message=Element+' + element + '+added.'
-                                         )
+            REQUEST['RESPONSE'].redirect(
+                self.absolute_url() +
+                '/propertiesForm?manage_tabs_message=Element+' + element +
+                '+added.')
 
     security.declareProtected(ManagePortal, 'removeElementSpec')
 
@@ -325,10 +322,10 @@ def removeElementSpec(self, element, REQUEST=None):
         del self.element_specs[element]
 
         if REQUEST is not None:
-            REQUEST['RESPONSE'].redirect(self.absolute_url()
-                                         + '/propertiesForm'
-                                         + '?manage_tabs_message=Element+' + element + '+removed.'
-                                         )
+            REQUEST['RESPONSE'].redirect(
+                self.absolute_url() +
+                '/propertiesForm?manage_tabs_message=Element+' + element +
+                '+removed.')
 
     security.declareProtected(ManagePortal, 'listPolicies')
 
@@ -345,8 +342,14 @@ def listPolicies(self, typ=None):
 InitializeClass(MetadataSchema)
 
 
-_DCMI_ELEMENT_SPECS = (('Title', 0), ('Description', 0), ('Subject', 1), ('Format', 0), ('Language', 0), ('Rights', 0)
-                       )
+_DCMI_ELEMENT_SPECS = (
+    ('Title', 0),
+    ('Description', 0),
+    ('Subject', 1),
+    ('Format', 0),
+    ('Language', 0),
+    ('Rights', 0)
+)
 
 
 class MetadataTool(PloneBaseTool, UniqueObject, Folder):
@@ -372,12 +375,10 @@ def __init__(self, publisher=None):
     #
     #   ZMI methods
     #
-    manage_options = (({'label': 'Schema', 'action': 'propertiesForm'
-                        }, {'label': 'Overview', 'action': 'manage_overview'
-                            }
-                       )
-                      + Folder.manage_options
-                      )
+    manage_options = (
+        ({'label': 'Schema', 'action': 'propertiesForm'},
+         {'label': 'Overview', 'action': 'manage_overview'}) +
+        Folder.manage_options)
 
     security.declareProtected(ManagePortal, 'manage_overview')
     manage_overview = DTMLFile('explainMetadataTool', WWW_DIR)
@@ -395,10 +396,9 @@ def editProperties(self, publisher=None, REQUEST=None
             self.publisher = publisher
 
         if REQUEST is not None:
-            REQUEST['RESPONSE'].redirect(self.absolute_url()
-                                         + '/propertiesForm'
-                                         + '?manage_tabs_message=Tool+updated.'
-                                         )
+            REQUEST['RESPONSE'].redirect(
+                self.absolute_url() +
+                '/propertiesForm?manage_tabs_message=Tool+updated.')
 
     security.declareProtected(ManagePortal, 'manage_addSchema')
 
@@ -414,10 +414,9 @@ def manage_addSchema(self, schema_id, elements, REQUEST):
             massaged.append(element)
         self.addSchema(schema_id, massaged)
 
-        REQUEST['RESPONSE'].redirect(self.absolute_url()
-                                     + '/propertiesForm'
-                                     + '?manage_tabs_message=Schema+added.'
-                                     )
+        REQUEST['RESPONSE'].redirect(
+            self.absolute_url() +
+            '/propertiesForm?manage_tabs_message=Schema+added.')
 
     security.declareProtected(ManagePortal, 'manage_removeSchemas')
 
@@ -430,10 +429,9 @@ def manage_removeSchemas(self, schema_ids, REQUEST):
         for schema_id in schema_ids:
             self.removeSchema(schema_id)
 
-        REQUEST['RESPONSE'].redirect(self.absolute_url()
-                                     + '/propertiesForm'
-                                     + '?manage_tabs_message=Schemas+removed.'
-                                     )
+        REQUEST['RESPONSE'].redirect(
+            self.absolute_url() +
+            '/propertiesForm?manage_tabs_message=Schemas+removed.')
 
     security.declarePrivate('getFullName')
 
@@ -454,37 +452,37 @@ def getPublisher(self):
     def listAllowedSubjects(self, content=None, content_type=None):
         """ See IMetadataTool.
         """
-        return self.listAllowedVocabulary('DCMI', 'Subject', content, content_type
-                                          )
+        return self.listAllowedVocabulary(
+            'DCMI', 'Subject', content, content_type)
 
     security.declarePublic('listAllowedFormats')
 
     def listAllowedFormats(self, content=None, content_type=None):
         """ See IMetadataTool.
         """
-        return self.listAllowedVocabulary('DCMI', 'Format', content, content_type
-                                          )
+        return self.listAllowedVocabulary(
+            'DCMI', 'Format', content, content_type)
 
     security.declarePublic('listAllowedLanguages')
 
     def listAllowedLanguages(self, content=None, content_type=None):
         """ See IMetadataTool.
         """
-        return self.listAllowedVocabulary('DCMI', 'Language', content, content_type
-                                          )
+        return self.listAllowedVocabulary(
+            'DCMI', 'Language', content, content_type)
 
     security.declarePublic('listAllowedRights')
 
     def listAllowedRights(self, content=None, content_type=None):
         """ See IMetadata Tool.
         """
-        return self.listAllowedVocabulary('DCMI', 'Rights', content, content_type
-                                          )
+        return self.listAllowedVocabulary(
+            'DCMI', 'Rights', content, content_type)
 
     security.declarePublic('listAllowedVocabulary')
 
-    def listAllowedVocabulary(self, schema, element, content=None, content_type=None
-                              ):
+    def listAllowedVocabulary(self, schema, element, content=None,
+                              content_type=None):
         """ See IMetadataTool.
         """
         schema_def = getattr(self, schema)
@@ -563,9 +561,10 @@ def validateMetadata(self, content):
                 if value and policy.enforceVocabulary():
                     values = policy.isMultiValued() and value or [value]
                     for value in values:
-                        if not value in policy.allowedVocabulary():
-                            raise MetadataError('Value %s is not in allowed vocabulary for '
-                                                'metadata element %s.' % (value, element))
+                        if value not in policy.allowedVocabulary():
+                            raise MetadataError(
+                                'Value %s is not in allowed vocabulary for '
+                                'metadata element %s.' % (value, element))
 
 InitializeClass(MetadataTool)
 registerToolInterface('portal_metadata', IMetadataTool)
diff --git a/Products/ATContentTypes/tool/topic.py b/Products/ATContentTypes/tool/topic.py
index 0625b49..bb18ee4 100644
--- a/Products/ATContentTypes/tool/topic.py
+++ b/Products/ATContentTypes/tool/topic.py
@@ -33,8 +33,9 @@ class ATTopicsTool(Base):
 
     security = ClassSecurityInfo()
 
-    # is used in ATPortalTypeCriterion to control which types are allowed to search with
-    # until this is fixed in CMF or whatever, this is the way to go.
+    # This is used in ATPortalTypeCriterion to control which types are allowed
+    # to search with until this is fixed in CMF or whatever, this is the way to
+    # go.
     allowed_portal_types = []
 
     id = TOOLNAME
@@ -58,8 +59,10 @@ def getCriteriaForIndex(self, index, as_dict=False):
             _criterionRegistry.criteriaByIndex(indexObj.meta_type))
         search_criteria = _criterionRegistry.listSearchTypes()
         if as_dict:
-            criteria = [{'name': a, 'description': _criterionRegistry[a].shortDesc}
-                        for a in criteria if a in search_criteria]
+            criteria = [{
+                'name': a,
+                'description': _criterionRegistry[a].shortDesc,
+                } for a in criteria if a in search_criteria]
         else:
             criteria = [a for a in criteria if a in search_criteria]
         criteria.sort()
@@ -280,7 +283,8 @@ def getIndexes(self, enabledOnly=False):
             indexes_dec = [(i.index.lower(), i.index)
                            for i in self.getEnabledIndexes()]
         else:
-            self.createInitialIndexes()  # update in case of new catalogue indexes
+            # update in case of new catalog indexes
+            self.createInitialIndexes()
             indexes_dec = [(i.lower(), i) for i in self.topic_indexes.keys()]
 
         indexes_dec.sort()
@@ -296,7 +300,8 @@ def getAllMetadata(self, enabledOnly=False):
             meta_dec = [(i.index.lower(), i.index)
                         for i in self.getEnabledMetadata()]
         else:
-            self.createInitialMetadata()  # update in case of new catalogue metadata
+            # update in case of new catalog indexes
+            self.createInitialMetadata()
             meta_dec = [(i.lower(), i) for i in self.topic_metadata.keys()]
 
         meta_dec.sort()
@@ -334,8 +339,11 @@ def manage_saveTopicSetup(self, REQUEST=None):
         meta = REQUEST.get('metadata', [])
         for metadata in meta:
             enabled = 'enabled' in metadata
-            self.updateMetadata(metadata['index'], metadata[
-                                'friendlyName'], metadata['description'], enabled)
+            self.updateMetadata(
+                metadata['index'],
+                metadata['friendlyName'],
+                metadata['description'],
+                enabled)
         return True
 
     security.declareProtected(ManagePortal, 'manage_saveTopicSetupTypes')


Repository: Products.ATContentTypes


Branch: refs/heads/master
Date: 2016-02-05T20:45:44+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.ATContentTypes/commit/246e416eb519c3205d174d23acd7c657fb708da8

Removed double line from simpleint criterion.

This had the effect that post_validate always gave an error for
value2.

Possibly this is used nowhere, because this has been in there for
years.

Files changed:
M CHANGES.rst
M Products/ATContentTypes/criteria/simpleint.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 13872e7..d2e4942 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,6 +10,10 @@ New:
 
 Fixes:
 
+- Removed double line from simpleint criterion.  This had the effect
+  that post_validate always gave an error for value2.  Possibly this
+  is used nowhere, because this has been in there for years.  [maurits]
+
 - Added utf-8 coding magic comment.  [maurits]
 
 - Sorted imports with isort.  [maurits]
diff --git a/Products/ATContentTypes/criteria/simpleint.py b/Products/ATContentTypes/criteria/simpleint.py
index a750fdb..548d991 100644
--- a/Products/ATContentTypes/criteria/simpleint.py
+++ b/Products/ATContentTypes/criteria/simpleint.py
@@ -116,8 +116,6 @@ def post_validate(self, REQUEST, errors):
         if direction == 'min:max' and not val2 and not val2 == 0:
             errors['value2'] = (
                 'You must enter a second value to do a "Between" search.')
-        errors['value2'] = (
-            'You must enter a second value to do a "Between" search.')
         return errors
 
 registerCriterion(ATSimpleIntCriterion, LIST_INDICES)


Repository: Products.ATContentTypes


Branch: refs/heads/master
Date: 2016-02-05T21:01:16+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.ATContentTypes/commit/2433d58e2fe87df26ff04942c9eede69facc5276

Another minor pep8 fix

Files changed:
M Products/ATContentTypes/tests/test_interfaces.py

diff --git a/Products/ATContentTypes/tests/test_interfaces.py b/Products/ATContentTypes/tests/test_interfaces.py
index 3073cde..a083d34 100644
--- a/Products/ATContentTypes/tests/test_interfaces.py
+++ b/Products/ATContentTypes/tests/test_interfaces.py
@@ -9,10 +9,6 @@
 import unittest
 
 
-###############################################################################
-###                         testing starts here                             ###
-###############################################################################
-
 tests = []
 # format: (class object, (list interface objects))
 testClasses = [
@@ -45,7 +41,6 @@ class KlassInterfaceTest(zope_interface_test):
     tests.append(KlassInterfaceTest)
 
 
-
 def test_suite():
     suite = unittest.TestSuite()
     for test in tests:


Repository: Products.ATContentTypes


Branch: refs/heads/master
Date: 2016-02-05T21:26:11+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.ATContentTypes/commit/93a2ba699d99382fe992ac07385cf2942df3ccd1

Added security decorators.

Files changed:
M CHANGES.rst
M Products/ATContentTypes/content/base.py
M Products/ATContentTypes/content/document.py
M Products/ATContentTypes/content/event.py
M Products/ATContentTypes/content/file.py
M Products/ATContentTypes/content/folder.py
M Products/ATContentTypes/content/image.py
M Products/ATContentTypes/content/link.py
M Products/ATContentTypes/content/newsitem.py
M Products/ATContentTypes/content/topic.py
M Products/ATContentTypes/criteria/base.py
M Products/ATContentTypes/criteria/boolean.py
M Products/ATContentTypes/criteria/currentauthor.py
M Products/ATContentTypes/criteria/date.py
M Products/ATContentTypes/criteria/daterange.py
M Products/ATContentTypes/criteria/list.py
M Products/ATContentTypes/criteria/path.py
M Products/ATContentTypes/criteria/portaltype.py
M Products/ATContentTypes/criteria/relativepath.py
M Products/ATContentTypes/criteria/selection.py
M Products/ATContentTypes/criteria/simpleint.py
M Products/ATContentTypes/criteria/simplestring.py
M Products/ATContentTypes/criteria/sort.py
M Products/ATContentTypes/lib/calendarsupport.py
M Products/ATContentTypes/lib/constraintypes.py
M Products/ATContentTypes/lib/historyaware.py
M Products/ATContentTypes/lib/imagetransform.py
M Products/ATContentTypes/tool/atct.py
M Products/ATContentTypes/tool/factory.py
M Products/ATContentTypes/tool/metadata.py
M Products/ATContentTypes/tool/topic.py

diff --git a/CHANGES.rst b/CHANGES.rst
index d2e4942..2121e0c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,6 +10,8 @@ New:
 
 Fixes:
 
+- Added security decorators.  [maurits]
+
 - Removed double line from simpleint criterion.  This had the effect
   that post_validate always gave an error for value2.  Possibly this
   is used nowhere, because this has been in there for years.  [maurits]
diff --git a/Products/ATContentTypes/content/base.py b/Products/ATContentTypes/content/base.py
index 4353ec7..4509824 100644
--- a/Products/ATContentTypes/content/base.py
+++ b/Products/ATContentTypes/content/base.py
@@ -107,9 +107,7 @@ class ATCTMixin(BrowserDefaultMixin):
 
     security = ClassSecurityInfo()
 
-    security.declareProtected(ModifyPortalContent,
-                              'initializeArchetype')
-
+    @security.protected(ModifyPortalContent)
     def initializeArchetype(self, **kwargs):
         """called by the generated add* factory in types tool
 
@@ -134,8 +132,7 @@ def initializeArchetype(self, **kwargs):
                 # debug code
                 raise
 
-    security.declarePrivate('copyLayoutFromParent')
-
+    @security.private
     def copyLayoutFromParent(self):
         """Copies the layout from the parent object if it's of the same type.
         """
@@ -151,8 +148,7 @@ def copyLayoutFromParent(self):
                 if parent_layout in [l[0] for l in self.getAvailableLayouts()]:
                     self.setLayout(parent_layout)
 
-    security.declareProtected(ModifyPortalContent, 'edit')
-
+    @security.protected(ModifyPortalContent)
     def edit(self, *args, **kwargs):
         """Reimplementing edit() to have a compatibility method for the old
         cmf edit() method
@@ -176,8 +172,7 @@ def edit(self, *args, **kwargs):
             kwargs['_initializing_'] = True
         return self.update(**kwargs)
 
-    security.declarePrivate('cmf_edit')
-
+    @security.private
     def cmf_edit(self, *args, **kwargs):
         """Overwrite this method to make AT compatible with the crappy
         CMF edit()
@@ -193,8 +188,7 @@ def exclude_from_nav(self):
         else:
             return False
 
-    security.declareProtected(View, 'get_size')
-
+    @security.protected(View)
     def get_size(self):
         """ZMI / Plone get size method
         """
@@ -211,8 +205,7 @@ class ATCTContent(ATCTMixin, BaseContent):
 
     security = ClassSecurityInfo()
 
-    security.declarePrivate('manage_afterPUT')
-
+    @security.private
     def manage_afterPUT(self, data, marshall_data, file, context, mimetype,
                         filename, REQUEST, RESPONSE):
         """After webdav/ftp PUT method
@@ -248,8 +241,7 @@ class ATCTFileContent(ATCTContent):
 
     security = ClassSecurityInfo()
 
-    security.declareProtected(View, 'download')
-
+    @security.protected(View)
     def download(self, REQUEST=None, RESPONSE=None):
         """Download the file (use default index_html)
         """
@@ -260,8 +252,7 @@ def download(self, REQUEST=None, RESPONSE=None):
         field = self.getPrimaryField()
         return field.download(self, REQUEST, RESPONSE)
 
-    security.declareProtected(View, 'index_html')
-
+    @security.protected(View)
     def index_html(self, REQUEST=None, RESPONSE=None):
         """Make it directly viewable when entering the objects URL
         """
@@ -275,8 +266,7 @@ def index_html(self, REQUEST=None, RESPONSE=None):
             return data.index_html(REQUEST, RESPONSE)
         # XXX what should be returned if no data is present?
 
-    security.declareProtected(View, 'get_data')
-
+    @security.protected(View)
     def get_data(self):
         """CMF compatibility method
         """
@@ -285,15 +275,13 @@ def get_data(self):
 
     data = ComputedAttribute(get_data, 1)
 
-    security.declareProtected(View, 'size')
-
+    @security.protected(View)
     def size(self):
         """Get size (image_view.pt)
         """
         return self.get_size()
 
-    security.declareProtected(View, 'get_content_type')
-
+    @security.protected(View)
     def get_content_type(self):
         """CMF compatibility method
         """
@@ -303,8 +291,7 @@ def get_content_type(self):
 
     content_type = ComputedAttribute(get_content_type, 1)
 
-    security.declarePrivate('update_data')
-
+    @security.private
     def update_data(self, data, content_type=None, size='ignored'):
         kwargs = {}
         if content_type is not None:
@@ -312,8 +299,7 @@ def update_data(self, data, content_type=None, size='ignored'):
         mutator = self.getPrimaryField().getMutator(self)
         mutator(data, **kwargs)
 
-    security.declareProtected(ModifyPortalContent, 'manage_edit')
-
+    @security.protected(ModifyPortalContent)
     def manage_edit(self, title, content_type, precondition='',
                     filedata=None, REQUEST=None):
         """
@@ -373,8 +359,7 @@ def _setATCTFileContent(self, value, **kwargs):
             # rename me based on my Title iff my ID looks autogenerated (which
             # it does if we don't setId() here).
 
-    security.declarePrivate('_should_set_id_to_filename')
-
+    @security.private
     def _should_set_id_to_filename(self, filename, title):
         """Should the filename should be used as my ID?
 
@@ -386,8 +371,7 @@ def _should_set_id_to_filename(self, filename, title):
         """
         return filename != self.getId()
 
-    security.declareProtected(View, 'post_validate')
-
+    @security.protected(View)
     def post_validate(self, REQUEST=None, errors=None):
         """Validates upload file and id
         """
@@ -427,8 +411,7 @@ def post_validate(self, REQUEST=None, errors=None):
         elif check_id:
             errors[f_name] = check_id
 
-    security.declarePrivate('manage_afterPUT')
-
+    @security.private
     def manage_afterPUT(self, data, marshall_data, file, context, mimetype,
                         filename, REQUEST, RESPONSE):
         """After webdav/ftp PUT method
@@ -464,8 +447,7 @@ class ATCTFolder(ATCTMixin, BaseFolder):
 
     security = ClassSecurityInfo()
 
-    security.declareProtected(View, 'get_size')
-
+    @security.protected(View)
     def get_size(self):
         """Returns 1 as folders have no size."""
         return 1
@@ -485,14 +467,12 @@ def __browser_default__(self, request):
         of index_html """
         return getToolByName(self, 'plone_utils').browserDefault(self)
 
-    security.declareProtected(View, 'get_size')
-
+    @security.protected(View)
     def get_size(self):
         """Returns 1 as folders have no size."""
         return 1
 
-    security.declarePrivate('manage_afterMKCOL')
-
+    @security.private
     def manage_afterMKCOL(self, id, result, REQUEST=None, RESPONSE=None):
         """After MKCOL handler
 
@@ -513,8 +493,7 @@ def manage_afterMKCOL(self, id, result, REQUEST=None, RESPONSE=None):
                     id = posixpath.basename(path_info)
             new.update(title=id)
 
-    security.declareProtected(View, 'HEAD')
-
+    @security.protected(View)
     def HEAD(self, REQUEST, RESPONSE):
         """HTTP HEAD handler"""
         return WebdavResoure.HEAD(self, REQUEST, RESPONSE)
@@ -527,8 +506,7 @@ class ATCTOrderedFolder(ATCTFolderMixin, OrderedBaseFolder):
 
     security = ClassSecurityInfo()
 
-    security.declareProtected(View, 'index_html')
-
+    @security.protected(View)
     def index_html(self, REQUEST=None, RESPONSE=None):
         """Special case index_html"""
         request = REQUEST
@@ -570,8 +548,7 @@ class ATCTBTreeFolder(ATCTFolderMixin, BaseBTreeFolder):
 
     security = ClassSecurityInfo()
 
-    security.declareProtected(View, 'index_html')
-
+    @security.protected(View)
     def index_html(self, REQUEST=None, RESPONSE=None):
         """
         BTree folders don't store objects as attributes, the
diff --git a/Products/ATContentTypes/content/document.py b/Products/ATContentTypes/content/document.py
index 00e674b..2167138 100644
--- a/Products/ATContentTypes/content/document.py
+++ b/Products/ATContentTypes/content/document.py
@@ -78,22 +78,19 @@ class ATDocumentBase(ATCTContent, HistoryAwareMixin):
     security = ClassSecurityInfo()
     cmf_edit_kws = ('text_format',)
 
-    security.declareProtected(View, 'CookedBody')
-
+    @security.protected(View)
     def CookedBody(self, stx_level='ignored'):
         """CMF compatibility method
         """
         return self.getText()
 
-    security.declareProtected(ModifyPortalContent, 'EditableBody')
-
+    @security.protected(ModifyPortalContent)
     def EditableBody(self):
         """CMF compatibility method
         """
         return self.getRawText()
 
-    security.declareProtected(ModifyPortalContent, 'setFormat')
-
+    @security.protected(ModifyPortalContent)
     def setFormat(self, value):
         """CMF compatibility method
 
@@ -111,8 +108,7 @@ def setFormat(self, value):
             value = translateMimetypeAlias(value)
         ATCTContent.setFormat(self, value)
 
-    security.declareProtected(ModifyPortalContent, 'setText')
-
+    @security.protected(ModifyPortalContent)
     def setText(self, value, **kwargs):
         """Body text mutator
 
@@ -137,8 +133,7 @@ def setText(self, value, **kwargs):
 
     text_format = ComputedAttribute(ATCTContent.getContentType, 1)
 
-    security.declarePrivate('guessMimetypeOfText')
-
+    @security.private
     def guessMimetypeOfText(self):
         """For ftp/webdav upload: get the mimetype from the id and data
         """
@@ -162,8 +157,7 @@ def guessMimetypeOfText(self):
             mimetype = mimetype[0]
         return mimetype.normalized()
 
-    security.declarePrivate('getTidyOutput')
-
+    @security.private
     def getTidyOutput(self, field):
         """Get the tidied output for a specific field from the request
         if available
@@ -181,8 +175,7 @@ def _notifyOfCopyTo(self, container, op=0):
         self._v_renamed = 1
         return ATCTContent._notifyOfCopyTo(self, container, op=op)
 
-    security.declarePrivate('manage_afterAdd')
-
+    @security.private
     def manage_afterAdd(self, item, container):
         """Fix text when created througt webdav
         Guess the right mimetype from the id/data
@@ -203,15 +196,13 @@ def manage_afterAdd(self, item, container):
             elif tidyOutput:
                 field.set(self, tidyOutput)  # set is ok
 
-    security.declarePrivate('cmf_edit')
-
+    @security.private
     def cmf_edit(self, text_format, text, file='', safety_belt='', **kwargs):
         assert file == '', 'file currently not supported'  # XXX
         self.setText(text, mimetype=translateMimetypeAlias(text_format))
         self.update(**kwargs)
 
-    security.declarePrivate('manage_afterPUT')
-
+    @security.private
     def manage_afterPUT(self, data, marshall_data, file, context, mimetype,
                         filename, REQUEST, RESPONSE):
         """After webdav/ftp PUT method
diff --git a/Products/ATContentTypes/content/event.py b/Products/ATContentTypes/content/event.py
index aa92bb4..9886139 100644
--- a/Products/ATContentTypes/content/event.py
+++ b/Products/ATContentTypes/content/event.py
@@ -187,8 +187,7 @@ class ATEvent(ATCTContent, CalendarSupportMixin, HistoryAwareMixin):
 
     security = ClassSecurityInfo()
 
-    security.declarePrivate('cmf_edit')
-
+    @security.private
     def cmf_edit(
             self, title=None, description=None, effectiveDay=None,
             effectiveMo=None, effectiveYear=None, expirationDay=None,
@@ -230,8 +229,7 @@ def cmf_edit(
             contactName=contact_name, contactEmail=contact_email,
             contactPhone=contact_phone, eventUrl=event_url)
 
-    security.declareProtected(View, 'post_validate')
-
+    @security.protected(View)
     def post_validate(self, REQUEST=None, errors=None):
         """Validates start and end date
 
@@ -320,8 +318,7 @@ def __cmp__(self, other):
     def __hash__(self):
         return hash((self.start_date, self.duration, self.title))
 
-    security.declareProtected(ModifyPortalContent, 'update')
-
+    @security.protected(ModifyPortalContent)
     def update(self, event=None, **kwargs):
         # Clashes with BaseObject.update, so
         # we handle gracefully
diff --git a/Products/ATContentTypes/content/file.py b/Products/ATContentTypes/content/file.py
index 34f42dc..6fa4a88 100644
--- a/Products/ATContentTypes/content/file.py
+++ b/Products/ATContentTypes/content/file.py
@@ -78,8 +78,7 @@ class ATFile(ATCTFileContent):
 
     security = ClassSecurityInfo()
 
-    security.declareProtected(View, 'index_html')
-
+    @security.protected(View)
     def index_html(self, REQUEST=None, RESPONSE=None):
         """Download the file
         """
@@ -93,8 +92,7 @@ def index_html(self, REQUEST=None, RESPONSE=None):
         # this is a security risk (IE renders anything as HTML).
         return field.download(self)
 
-    security.declareProtected(ModifyPortalContent, 'setFile')
-
+    @security.protected(ModifyPortalContent)
     def setFile(self, value, **kwargs):
         """Set id to uploaded id
         """
@@ -105,8 +103,7 @@ def __str__(self):
         """
         return self.get_data()
 
-    security.declarePublic('getIcon')
-
+    @security.public
     def getIcon(self, relative_to_portal=0):
         """Calculate the icon using the mime type of the file
         """
@@ -145,15 +142,13 @@ def getIcon(self, relative_to_portal=0):
                 res = res[1:]
             return res
 
-    security.declareProtected(View, 'icon')
-
+    @security.protected(View)
     def icon(self):
         """for ZMI
         """
         return self.getIcon()
 
-    security.declarePrivate('cmf_edit')
-
+    @security.private
     def cmf_edit(self, precondition='', file=None):
         if file is not None:
             self.setFile(file)
diff --git a/Products/ATContentTypes/content/folder.py b/Products/ATContentTypes/content/folder.py
index 1568eae..d9425db 100644
--- a/Products/ATContentTypes/content/folder.py
+++ b/Products/ATContentTypes/content/folder.py
@@ -52,8 +52,7 @@ class ObsoleteATFolder(ATCTOrderedFolder):
 
     security = ClassSecurityInfo()
 
-    security.declareProtected(View, 'getNextPreviousParentValue')
-
+    @security.protected(View)
     def getNextPreviousParentValue(self):
         """If the parent node is also an IATFolder and has next/previous
         navigation enabled, then let this folder have it enabled by
@@ -83,8 +82,7 @@ class ATFolder(I18NOnlyBaseBTreeFolder, folder.ATFolder):
         manage_options = FOLDER_MANAGE_OPTIONS
         security = ClassSecurityInfo()
 
-        security.declarePrivate('manage_beforeDelete')
-
+        @security.private
         def manage_beforeDelete(self, item, container):
             I18NOnlyBaseBTreeFolder.manage_beforeDelete(self, item, container)
             folder.ATFolder.manage_beforeDelete(self, item, container)
diff --git a/Products/ATContentTypes/content/image.py b/Products/ATContentTypes/content/image.py
index c38c187..102f590 100644
--- a/Products/ATContentTypes/content/image.py
+++ b/Products/ATContentTypes/content/image.py
@@ -88,8 +88,7 @@ class ATImage(ATCTFileContent, ATCTImageTransform):
     def exportImage(self, format, width, height):
         return '', ''
 
-    security.declareProtected(ModifyPortalContent, 'setImage')
-
+    @security.protected(ModifyPortalContent)
     def setImage(self, value, refresh_exif=True, **kwargs):
         """Set ID to uploaded file name if Title is empty."""
         # set exif first because rotation might screw up the exif data
@@ -104,8 +103,7 @@ def _should_set_id_to_filename(self, filename, title):
         # title.
         return filename == title or not title
 
-    security.declareProtected(View, 'tag')
-
+    @security.protected(View)
     def tag(self, **kwargs):
         """Generate image tag using the api of the ImageField
         """
@@ -116,8 +114,7 @@ def __str__(self):
         """
         return self.tag()
 
-    security.declareProtected(View, 'get_size')
-
+    @security.protected(View)
     def get_size(self):
         """ZMI / Plone get size method
 
@@ -129,27 +126,23 @@ def get_size(self):
             return 0
         return img.get_size()
 
-    security.declareProtected(View, 'getSize')
-
+    @security.protected(View)
     def getSize(self, scale=None):
         field = self.getField('image')
         return field.getSize(self, scale=scale)
 
-    security.declareProtected(View, 'getWidth')
-
+    @security.protected(View)
     def getWidth(self, scale=None):
         return self.getSize(scale)[0]
 
-    security.declareProtected(View, 'getHeight')
-
+    @security.protected(View)
     def getHeight(self, scale=None):
         return self.getSize(scale)[1]
 
     width = ComputedAttribute(getWidth, 1)
     height = ComputedAttribute(getHeight, 1)
 
-    security.declarePrivate('cmf_edit')
-
+    @security.private
     def cmf_edit(self, precondition='', file=None, title=None):
         if file is not None:
             self.setImage(file)
diff --git a/Products/ATContentTypes/content/link.py b/Products/ATContentTypes/content/link.py
index 2ad563c..7a2afb3 100644
--- a/Products/ATContentTypes/content/link.py
+++ b/Products/ATContentTypes/content/link.py
@@ -51,8 +51,7 @@ class ATLink(ATCTContent):
 
     security = ClassSecurityInfo()
 
-    security.declareProtected(ModifyPortalContent, 'setRemoteUrl')
-
+    @security.protected(ModifyPortalContent)
     def setRemoteUrl(self, value, **kwargs):
         """remute url mutator
 
@@ -63,22 +62,19 @@ def setRemoteUrl(self, value, **kwargs):
             value = urlparse.urlunparse(urlparse.urlparse(value))
         self.getField('remoteUrl').set(self, value, **kwargs)
 
-    security.declareProtected(View, 'remote_url')
-
+    @security.protected(View)
     def remote_url(self):
         """CMF compatibility method
         """
         return self.getRemoteUrl()
 
-    security.declarePrivate('cmf_edit')
-
+    @security.private
     def cmf_edit(self, remote_url=None, **kwargs):
         if not remote_url:
             remote_url = kwargs.get('remote_url', None)
         self.update(remoteUrl=remote_url, **kwargs)
 
-    security.declareProtected(View, 'getRemoteUrl')
-
+    @security.protected(View)
     def getRemoteUrl(self):
         """Sanitize output
         """
diff --git a/Products/ATContentTypes/content/newsitem.py b/Products/ATContentTypes/content/newsitem.py
index c339a51..c2e4d55 100644
--- a/Products/ATContentTypes/content/newsitem.py
+++ b/Products/ATContentTypes/content/newsitem.py
@@ -110,8 +110,7 @@ class ATNewsItem(ATDocumentBase, ATCTImageTransform):
 
     security = ClassSecurityInfo()
 
-    security.declareProtected(View, 'tag')
-
+    @security.protected(View)
     def tag(self, **kwargs):
         """Generate image tag using the api of the ImageField
         """
@@ -119,8 +118,7 @@ def tag(self, **kwargs):
             kwargs['title'] = self.getImageCaption()
         return self.getField('image').tag(self, **kwargs)
 
-    security.declarePrivate('cmf_edit')
-
+    @security.private
     def cmf_edit(self, text, description=None, text_format=None, **kwargs):
         if description is not None:
             self.setDescription(description)
diff --git a/Products/ATContentTypes/content/topic.py b/Products/ATContentTypes/content/topic.py
index f0d33e0..d079fc2 100644
--- a/Products/ATContentTypes/content/topic.py
+++ b/Products/ATContentTypes/content/topic.py
@@ -177,23 +177,20 @@ def initializeArchetype(self, **kwargs):
                 syn_tool.enableSyndication(self)
         return ret_val
 
-    security.declareProtected(ChangeTopics, 'validateAddCriterion')
-
+    @security.protected(ChangeTopics)
     def validateAddCriterion(self, indexId, criteriaType):
         """Is criteriaType acceptable criteria for indexId
         """
         return criteriaType in self.criteriaByIndexId(indexId)
 
-    security.declareProtected(ChangeTopics, 'criteriaByIndexId')
-
+    @security.protected(ChangeTopics)
     def criteriaByIndexId(self, indexId):
         catalog_tool = getToolByName(self, 'portal_catalog')
         indexObj = catalog_tool.Indexes[indexId]
         results = _criterionRegistry.criteriaByIndex(indexObj.meta_type)
         return results
 
-    security.declareProtected(ChangeTopics, 'listCriteriaTypes')
-
+    @security.protected(ChangeTopics)
     def listCriteriaTypes(self):
         """List available criteria types as dict
         """
@@ -201,16 +198,14 @@ def listCriteriaTypes(self):
                  'description': _criterionRegistry[ctype].shortDesc}
                 for ctype in self.listCriteriaMetaTypes()]
 
-    security.declareProtected(ChangeTopics, 'listCriteriaMetaTypes')
-
+    @security.protected(ChangeTopics)
     def listCriteriaMetaTypes(self):
         """List available criteria
         """
         val = sorted(_criterionRegistry.listTypes())
         return val
 
-    security.declareProtected(ChangeTopics, 'listSearchCriteriaTypes')
-
+    @security.protected(ChangeTopics)
     def listSearchCriteriaTypes(self):
         """List available search criteria types as dict
         """
@@ -218,16 +213,14 @@ def listSearchCriteriaTypes(self):
                  'description': _criterionRegistry[ctype].shortDesc}
                 for ctype in self.listSearchCriteriaMetaTypes()]
 
-    security.declareProtected(ChangeTopics, 'listSearchCriteriaMetaTypes')
-
+    @security.protected(ChangeTopics)
     def listSearchCriteriaMetaTypes(self):
         """List available search criteria
         """
         val = sorted(_criterionRegistry.listSearchTypes())
         return val
 
-    security.declareProtected(ChangeTopics, 'listSortCriteriaTypes')
-
+    @security.protected(ChangeTopics)
     def listSortCriteriaTypes(self):
         """List available sort criteria types as dict
         """
@@ -235,39 +228,34 @@ def listSortCriteriaTypes(self):
                  'description': _criterionRegistry[ctype].shortDesc}
                 for ctype in self.listSortCriteriaMetaTypes()]
 
-    security.declareProtected(ChangeTopics, 'listSortCriteriaMetaTypes')
-
+    @security.protected(ChangeTopics)
     def listSortCriteriaMetaTypes(self):
         """List available sort criteria
         """
         val = sorted(_criterionRegistry.listSortTypes())
         return val
 
-    security.declareProtected(View, 'listCriteria')
-
+    @security.protected(View)
     def listCriteria(self):
         """Return a list of our criteria objects.
         """
         val = self.objectValues(self.listCriteriaMetaTypes())
         return val
 
-    security.declareProtected(View, 'listSearchCriteria')
-
+    @security.protected(View)
     def listSearchCriteria(self):
         """Return a list of our search criteria objects.
         """
         return [val for val in self.listCriteria() if
                 IATTopicSearchCriterion.providedBy(val)]
 
-    security.declareProtected(ChangeTopics, 'hasSortCriterion')
-
+    @security.protected(ChangeTopics)
     def hasSortCriterion(self):
         """Tells if a sort criterai is already setup.
         """
         return not self.getSortCriterion() is None
 
-    security.declareProtected(ChangeTopics, 'getSortCriterion')
-
+    @security.protected(ChangeTopics)
     def getSortCriterion(self):
         """Return the Sort criterion if setup.
         """
@@ -276,16 +264,14 @@ def getSortCriterion(self):
                 return criterion
         return None
 
-    security.declareProtected(ChangeTopics, 'removeSortCriterion')
-
+    @security.protected(ChangeTopics)
     def removeSortCriterion(self):
         """remove the Sort criterion.
         """
         if self.hasSortCriterion():
             self.deleteCriterion(self.getSortCriterion().getId())
 
-    security.declareProtected(ChangeTopics, 'setSortCriterion')
-
+    @security.protected(ChangeTopics)
     def setSortCriterion(self, field, reversed):
         """Set the Sort criterion.
         """
@@ -293,23 +279,20 @@ def setSortCriterion(self, field, reversed):
         self.addCriterion(field, 'ATSortCriterion')
         self.getSortCriterion().setReversed(reversed)
 
-    security.declareProtected(ChangeTopics, 'listIndicesByCriterion')
-
+    @security.protected(ChangeTopics)
     def listIndicesByCriterion(self, criterion):
         """
         """
         return _criterionRegistry.indicesByCriterion(criterion)
 
-    security.declareProtected(ChangeTopics, 'listFields')
-
+    @security.protected(ChangeTopics)
     def listFields(self):
         """Return a list of fields from portal_catalog.
         """
         tool = getToolByName(self, TOOLNAME)
         return tool.getEnabledFields()
 
-    security.declareProtected(ChangeTopics, 'listSortFields')
-
+    @security.protected(ChangeTopics)
     def listSortFields(self):
         """Return a list of available fields for sorting."""
         fields = [field
@@ -317,8 +300,7 @@ def listSortFields(self):
                   if self.validateAddCriterion(field[0], 'ATSortCriterion')]
         return fields
 
-    security.declareProtected(ChangeTopics, 'listAvailableFields')
-
+    @security.protected(ChangeTopics)
     def listAvailableFields(self):
         """Return a list of available fields for new criteria.
         """
@@ -331,8 +313,7 @@ def listAvailableFields(self):
                ]
         return val
 
-    security.declareProtected(View, 'listSubtopics')
-
+    @security.protected(View)
     def listSubtopics(self):
         """Return a list of our subtopics.
         """
@@ -346,24 +327,21 @@ def listSubtopics(self):
         tops = [t[1] for t in tops]
         return tops
 
-    security.declareProtected(View, 'hasSubtopics')
-
+    @security.protected(View)
     def hasSubtopics(self):
         """Returns true if subtopics have been created on this topic.
         """
         val = self.objectIds(self.meta_type)
         return not not val
 
-    security.declareProtected(View, 'listMetaDataFields')
-
+    @security.protected(View)
     def listMetaDataFields(self, exclude=True):
         """Return a list of metadata fields from portal_catalog.
         """
         tool = getToolByName(self, TOOLNAME)
         return tool.getMetadataDisplay(exclude)
 
-    security.declareProtected(View, 'allowedCriteriaForField')
-
+    @security.protected(View)
     def allowedCriteriaForField(self, field, display_list=False):
         """ Return all valid criteria for a given field.  Optionally include
             descriptions in list in format [(desc1, val1) , (desc2, val2)] for
@@ -380,8 +358,7 @@ def allowedCriteriaForField(self, field, display_list=False):
             allowed = DisplayList(flat)
         return allowed
 
-    security.declareProtected(View, 'buildQuery')
-
+    @security.protected(View)
     def buildQuery(self):
         """Construct a catalog query using our criterion objects.
         """
@@ -424,8 +401,7 @@ def buildQuery(self):
                 result[key] = value
         return result
 
-    security.declareProtected(View, 'queryCatalog')
-
+    @security.protected(View)
     def queryCatalog(self, REQUEST=None, batch=False, b_size=None,
                      full_objects=False, **kw):
         # Invoke the catalog using our criteria to augment any passed
@@ -480,8 +456,7 @@ def queryCatalog(self, REQUEST=None, batch=False, b_size=None,
             return batch
         return results
 
-    security.declareProtected(ChangeTopics, 'addCriterion')
-
+    @security.protected(ChangeTopics)
     def addCriterion(self, field, criterion_type):
         """Add a new search criterion. Return the resulting object.
         """
@@ -492,8 +467,7 @@ def addCriterion(self, field, criterion_type):
         self._setObject(newid, crit)
         return self._getOb(newid)
 
-    security.declareProtected(ChangeTopics, 'deleteCriterion')
-
+    @security.protected(ChangeTopics)
     def deleteCriterion(self, criterion_id):
         """Delete selected criterion.
         """
@@ -503,8 +477,7 @@ def deleteCriterion(self, criterion_id):
             for cid in criterion_id:
                 self._delObject(cid)
 
-    security.declareProtected(View, 'getCriterion')
-
+    @security.protected(View)
     def getCriterion(self, criterion_id):
         """Get the criterion object.
         """
@@ -513,8 +486,7 @@ def getCriterion(self, criterion_id):
         except AttributeError:
             return self._getOb(criterion_id)
 
-    security.declareProtected(AddPortalContent, 'addSubtopic')
-
+    @security.protected(AddPortalContent)
     def addSubtopic(self, id):
         """Add a new subtopic.
         """
@@ -522,8 +494,7 @@ def addSubtopic(self, id):
         ti.constructInstance(self, id)
         return self._getOb(id)
 
-    security.declareProtected(View, 'synContentValues')
-
+    @security.protected(View)
     def synContentValues(self):
         """Getter for syndacation support
         """
@@ -531,8 +502,7 @@ def synContentValues(self):
         limit = int(syn_tool.getMaxItems(self))
         return self.queryCatalog(sort_limit=limit)[:limit]
 
-    security.declarePublic('canSetDefaultPage')
-
+    @security.public
     def canSetDefaultPage(self):
         """
         Override BrowserDefaultMixin because default page stuff doesn't make
@@ -540,8 +510,7 @@ def canSetDefaultPage(self):
         """
         return False
 
-    security.declarePublic('getCriterionUniqueWidgetAttr')
-
+    @security.public
     def getCriteriaUniqueWidgetAttr(self, attr):
         """Get a unique list values for a specific attribute for all widgets
            on all criteria"""
@@ -558,14 +527,12 @@ def getCriteriaUniqueWidgetAttr(self, attr):
                         if item not in order]
         return order
 
-    security.declareProtected(View, 'HEAD')
-
+    @security.protected(View)
     def HEAD(self, REQUEST, RESPONSE):
         """HTTP HEAD handler"""
         return WebdavResoure.HEAD(self, REQUEST, RESPONSE)
 
-    security.declareProtected(ChangeTopics, 'setText')
-
+    @security.protected(ChangeTopics)
     def setText(self, value, **kwargs):
         """Body text mutator
 
@@ -588,8 +555,7 @@ def setText(self, value, **kwargs):
 
         field.set(self, value, **kwargs)  # set is ok
 
-    security.declarePrivate('getTidyOutput')
-
+    @security.private
     def getTidyOutput(self, field):
         """Get the tidied output for a specific field from the request
         if available
diff --git a/Products/ATContentTypes/criteria/base.py b/Products/ATContentTypes/criteria/base.py
index b5ff99e..3bd596a 100644
--- a/Products/ATContentTypes/criteria/base.py
+++ b/Products/ATContentTypes/criteria/base.py
@@ -64,8 +64,7 @@ def __init__(self, id=None, field=None, oid=None):
             self.id = id
         self.getField('field').set(self, field)
 
-    security.declareProtected(View, 'getId')
-
+    @security.protected(View)
     def getId(self):
         """Get the object id"""
         return str(self.id)
@@ -75,19 +74,16 @@ def setId(self, value, *kw):
         """
         assert value == self.getId(), 'You are not allowed to change the id'
 
-    security.declareProtected(View, 'Type')
-
+    @security.protected(View)
     def Type(self):
         return self.archetype_name
 
-    security.declareProtected(View, 'Description')
-
+    @security.protected(View)
     def Description(self):
         lines = [line.strip() for line in self.__doc__.splitlines()]
         return ' '.join([line for line in lines if line])
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         """Return a sequence of items to be used to build the catalog query.
         """
diff --git a/Products/ATContentTypes/criteria/boolean.py b/Products/ATContentTypes/criteria/boolean.py
index fdc8c99..cb0b18c 100644
--- a/Products/ATContentTypes/criteria/boolean.py
+++ b/Products/ATContentTypes/criteria/boolean.py
@@ -41,8 +41,7 @@ class ATBooleanCriterion(ATBaseCriterion):
     archetype_name = 'Boolean Criterion'
     shortDesc = 'Boolean (True/False)'
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         result = []
         if self.getBool():
diff --git a/Products/ATContentTypes/criteria/currentauthor.py b/Products/ATContentTypes/criteria/currentauthor.py
index 47a4be7..44989d3 100644
--- a/Products/ATContentTypes/criteria/currentauthor.py
+++ b/Products/ATContentTypes/criteria/currentauthor.py
@@ -24,8 +24,7 @@ class ATCurrentAuthorCriterion(ATBaseCriterion):
     archetype_name = 'Current Author Criterion'
     shortDesc = 'Restrict to current user'
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         result = []
 
diff --git a/Products/ATContentTypes/criteria/date.py b/Products/ATContentTypes/criteria/date.py
index 3235dda..2560e27 100644
--- a/Products/ATContentTypes/criteria/date.py
+++ b/Products/ATContentTypes/criteria/date.py
@@ -108,8 +108,7 @@ class ATDateCriteria(ATBaseCriterion):
     archetype_name = 'Friendly Date Criteria'
     shortDesc = 'Relative date'
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         """Return a sequence of items to be used to build the catalog query.
         """
diff --git a/Products/ATContentTypes/criteria/daterange.py b/Products/ATContentTypes/criteria/daterange.py
index d91d0c6..4e27530 100644
--- a/Products/ATContentTypes/criteria/daterange.py
+++ b/Products/ATContentTypes/criteria/daterange.py
@@ -63,13 +63,11 @@ class ATDateRangeCriterion(ATBaseCriterion):
     archetype_name = 'Date Range Criterion'
     shortDesc = 'Date range'
 
-    security.declareProtected(View, 'Value')
-
+    @security.protected(View)
     def Value(self):
         return (self.getStart(), self.getEnd())
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         field = self.Field()
         value = self.Value()
diff --git a/Products/ATContentTypes/criteria/list.py b/Products/ATContentTypes/criteria/list.py
index eb451bd..0d7a153 100644
--- a/Products/ATContentTypes/criteria/list.py
+++ b/Products/ATContentTypes/criteria/list.py
@@ -67,8 +67,7 @@ class ATListCriterion(ATBaseCriterion):
     archetype_name = 'List Criterion'
     shortDesc = 'List of values'
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         # filter out empty strings
         result = []
diff --git a/Products/ATContentTypes/criteria/path.py b/Products/ATContentTypes/criteria/path.py
index 758f102..0eece15 100644
--- a/Products/ATContentTypes/criteria/path.py
+++ b/Products/ATContentTypes/criteria/path.py
@@ -73,8 +73,7 @@ def setValue(self, value):
         self.getField('value').set(self, value)
         self.reindexObject()
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         result = []
         depth = (not self.Recurse() and 1) or -1
diff --git a/Products/ATContentTypes/criteria/portaltype.py b/Products/ATContentTypes/criteria/portaltype.py
index d217fa9..b468546 100644
--- a/Products/ATContentTypes/criteria/portaltype.py
+++ b/Products/ATContentTypes/criteria/portaltype.py
@@ -37,8 +37,7 @@ class ATPortalTypeCriterion(ATSelectionCriterion):
     archetype_name = 'Portal Types Criterion'
     shortDesc = 'Select content types'
 
-    security.declareProtected(View, 'getCurrentValues')
-
+    @security.protected(View)
     def getCurrentValues(self):
         """Return enabled portal types"""
         vocab = queryUtility(IVocabularyFactory, name=VOCAB_ID)(self)
@@ -58,8 +57,7 @@ def getCurrentValues(self):
 
         return DisplayList(result)
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         result = []
         if self.Value() is not '':
diff --git a/Products/ATContentTypes/criteria/relativepath.py b/Products/ATContentTypes/criteria/relativepath.py
index d536239..82c2a22 100644
--- a/Products/ATContentTypes/criteria/relativepath.py
+++ b/Products/ATContentTypes/criteria/relativepath.py
@@ -63,8 +63,7 @@ def getNavTypes(self):
         nav_types = ptool.typesToList()
         return nav_types
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         result = []
         depth = (not self.Recurse() and 1) or -1
diff --git a/Products/ATContentTypes/criteria/selection.py b/Products/ATContentTypes/criteria/selection.py
index fddf646..f1c78ed 100644
--- a/Products/ATContentTypes/criteria/selection.py
+++ b/Products/ATContentTypes/criteria/selection.py
@@ -80,8 +80,7 @@ def getCurrentValues(self):
                           for o in options if isinstance(o, basestring)])
         return [o[1] for o in options]
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         # filter out empty strings
         result = []
diff --git a/Products/ATContentTypes/criteria/simpleint.py b/Products/ATContentTypes/criteria/simpleint.py
index 548d991..e40ce6d 100644
--- a/Products/ATContentTypes/criteria/simpleint.py
+++ b/Products/ATContentTypes/criteria/simpleint.py
@@ -88,8 +88,7 @@ class ATSimpleIntCriterion(ATBaseCriterion):
     archetype_name = 'Simple Int Criterion'
     shortDesc = 'Integer value or range'
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         result = []
         val = self.Value()
@@ -107,8 +106,7 @@ def getCriteriaItems(self):
 
         return tuple(result)
 
-    security.declareProtected(View, 'post_validate')
-
+    @security.protected(View)
     def post_validate(self, REQUEST, errors):
         """Check that Value2 is set if range is set to min:max"""
         direction = REQUEST.get('direction', self.getDirection())
diff --git a/Products/ATContentTypes/criteria/simplestring.py b/Products/ATContentTypes/criteria/simplestring.py
index c2bcacb..2dff2e2 100644
--- a/Products/ATContentTypes/criteria/simplestring.py
+++ b/Products/ATContentTypes/criteria/simplestring.py
@@ -41,8 +41,7 @@ class ATSimpleStringCriterion(ATBaseCriterion):
     archetype_name = 'Simple String Criterion'
     shortDesc = 'Text'
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         result = []
 
diff --git a/Products/ATContentTypes/criteria/sort.py b/Products/ATContentTypes/criteria/sort.py
index 67c0531..d60489c 100644
--- a/Products/ATContentTypes/criteria/sort.py
+++ b/Products/ATContentTypes/criteria/sort.py
@@ -36,8 +36,7 @@ class ATSortCriterion(ATBaseCriterion):
     archetype_name = 'Sort Criterion'
     shortDesc = 'Sort'
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         result = [('sort_on', self.Field())]
 
diff --git a/Products/ATContentTypes/lib/calendarsupport.py b/Products/ATContentTypes/lib/calendarsupport.py
index 765eddf..de16e4a 100644
--- a/Products/ATContentTypes/lib/calendarsupport.py
+++ b/Products/ATContentTypes/lib/calendarsupport.py
@@ -119,8 +119,7 @@ class CalendarSupportMixin:
     },
     )
 
-    security.declareProtected(View, 'getICal')
-
+    @security.protected(View)
     def getICal(self):
         """get iCal data
         """
@@ -173,8 +172,7 @@ def getICal(self):
         out.write(ICS_EVENT_END)
         return out.getvalue()
 
-    security.declareProtected(View, 'ics_view')
-
+    @security.protected(View)
     def ics_view(self, REQUEST, RESPONSE):
         """iCalendar output
         """
@@ -187,8 +185,7 @@ def ics_view(self, REQUEST, RESPONSE):
         out.write(ICS_FOOTER)
         return n2rn(out.getvalue())
 
-    security.declareProtected(View, 'getVCal')
-
+    @security.protected(View)
     def getVCal(self):
         """get vCal data
         """
@@ -214,8 +211,7 @@ def getVCal(self):
         # Insert missing code here :]
         return out.getvalue()
 
-    security.declareProtected(View, 'vcs_view')
-
+    @security.protected(View)
     def vcs_view(self, REQUEST, RESPONSE):
         """vCalendar output
         """
diff --git a/Products/ATContentTypes/lib/constraintypes.py b/Products/ATContentTypes/lib/constraintypes.py
index 7df12bc..1d14d9f 100644
--- a/Products/ATContentTypes/lib/constraintypes.py
+++ b/Products/ATContentTypes/lib/constraintypes.py
@@ -153,8 +153,7 @@ class ConstrainTypesMixin:
     #
     # Sanity validator
     #
-    security.declareProtected(ModifyPortalContent, 'validate_preferredTypes')
-
+    @security.protected(ModifyPortalContent)
     def validate_preferredTypes(self, value):
         """Ensure that the preferred types is a subset of the allowed types.
         """
@@ -174,8 +173,7 @@ def validate_preferredTypes(self, value):
     # Overrides + supplements for CMF types machinery
     #
 
-    security.declareProtected(View, 'getLocallyAllowedTypes')
-
+    @security.protected(View)
     def getLocallyAllowedTypes(self, context=None):
         """If enableTypeRestrictions is ENABLE, return the list of types
         set. If it is ACQUIRE, get the types set on the parent so long
@@ -215,8 +213,7 @@ def getLocallyAllowedTypes(self, context=None):
         else:
             raise ValueError("Invalid value for enableAddRestriction")
 
-    security.declareProtected(View, 'getImmediatelyAddableTypes')
-
+    @security.protected(View)
     def getImmediatelyAddableTypes(self, context=None):
         """Get the list of type ids which should be immediately addable.
         If enableTypeRestrictions is ENABLE, return the list set; if it is
@@ -276,8 +273,7 @@ def allowedContentTypes(self, context=None):
             return ftis
 
     # overrides CMFCore's PortalFolder invokeFactory
-    security.declareProtected(AddPortalContent, 'invokeFactory')
-
+    @security.protected(AddPortalContent)
     def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kw):
         """Invokes the portal_types tool
         """
@@ -301,8 +297,7 @@ def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kw):
         args = (type_name, self, id, RESPONSE) + args
         return pt.constructContent(*args, **kw)
 
-    security.declareProtected(View, 'getDefaultAddableTypes')
-
+    @security.protected(View)
     def getDefaultAddableTypes(self, context=None):
         """returns a list of normally allowed objects as ftis.
         Exactly like PortalFolder.allowedContentTypes except this
@@ -325,8 +320,7 @@ def getDefaultAddableTypes(self, context=None):
 
         return [t for t in result if t.isConstructionAllowed(context)]
 
-    security.declarePublic('canSetConstrainTypes')
-
+    @security.public
     def canSetConstrainTypes(self):
         """Find out if the current user is allowed to set the allowable types
         """
@@ -340,8 +334,7 @@ def canSetConstrainTypes(self):
     #
 
     # Vocab for type lists
-    security.declarePrivate('_ct_vocabularyPossibleTypes')
-
+    @security.private
     def _ct_vocabularyPossibleTypes(self):
         """Get a DisplayList of types which may be added (id -> title)
         """
@@ -350,8 +343,7 @@ def _ct_vocabularyPossibleTypes(self):
         return DisplayList([(id, title) for title, id in typelist])
 
     # Default method for type lists
-    security.declarePrivate('_ct_defaultAddableTypeIds')
-
+    @security.private
     def _ct_defaultAddableTypeIds(self):
         """Get a list of types which are addable in the ordinary case w/o the
         constraint machinery.
diff --git a/Products/ATContentTypes/lib/historyaware.py b/Products/ATContentTypes/lib/historyaware.py
index 0eca996..eded116 100644
--- a/Products/ATContentTypes/lib/historyaware.py
+++ b/Products/ATContentTypes/lib/historyaware.py
@@ -37,8 +37,7 @@ class HistoryAwareMixin(ATHistoryAwareMixin):
     },
     )
 
-    security.declarePrivate('getHistorySource')
-
+    @security.private
     def getHistorySource(self):
         """get source for HistoryAwareMixin
 
@@ -50,8 +49,7 @@ def getHistorySource(self):
         else:
             return ''
 
-    security.declareProtected(View, 'getLastEditor')
-
+    @security.protected(View)
     def getLastEditor(self):
         """Returns the user name of the last editor.
 
@@ -63,9 +61,7 @@ def getLastEditor(self):
         user = histories[0][3].split(" ")[-1].strip()
         return user
 
-    security.declareProtected(
-        ATCTPermissions.ViewHistory, 'getDocumentComparisons')
-
+    @security.protected(ATCTPermissions.ViewHistory)
     def getDocumentComparisons(self, max=10, filterComment=0):
         """Get history as unified diff
         """
diff --git a/Products/ATContentTypes/lib/imagetransform.py b/Products/ATContentTypes/lib/imagetransform.py
index 9c0fdcd..77e6049 100644
--- a/Products/ATContentTypes/lib/imagetransform.py
+++ b/Products/ATContentTypes/lib/imagetransform.py
@@ -56,8 +56,7 @@ class ATCTImageTransform(Base):
 
     security = ClassSecurityInfo()
 
-    security.declarePrivate('getImageAsFile')
-
+    @security.private
     def getImageAsFile(self, img=None, scale=None):
         """Get the img as file like object
         """
@@ -84,8 +83,7 @@ def getImageAsFile(self, img=None, scale=None):
     # image related code like exif and rotation
     # partly based on CMFPhoto
 
-    security.declareProtected(View, 'getEXIF')
-
+    @security.protected(View)
     def getEXIF(self, img=None, refresh=False):
         """Get the exif informations of the file
 
@@ -127,8 +125,7 @@ def getEXIF(self, img=None, refresh=False):
         setattr(self, cache, exif_data)
         return exif_data
 
-    security.declareProtected(View, 'getEXIFOrientation')
-
+    @security.protected(View)
     def getEXIFOrientation(self):
         """Get the rotation and mirror orientation from the EXIF data
 
@@ -161,8 +158,7 @@ def getEXIFOrientation(self):
 
         return (mirror, rotation)
 
-    security.declareProtected(View, 'getEXIFOrigDate')
-
+    @security.protected(View)
     def getEXIFOrigDate(self):
         """Get the EXIF DateTimeOriginal from the image (or None)
         """
@@ -177,8 +173,7 @@ def getEXIFOrigDate(self):
                           raw_date, exc_info=True)
         return None
 
-    security.declareProtected(ModifyPortalContent, 'transformImage')
-
+    @security.protected(ModifyPortalContent)
     def transformImage(self, method, REQUEST=None):
         """
         Transform an Image:
@@ -224,8 +219,7 @@ def transformImage(self, method, REQUEST=None):
         if REQUEST:
             REQUEST.RESPONSE.redirect(target)
 
-    security.declareProtected(ModifyPortalContent, 'autoTransformImage')
-
+    @security.protected(ModifyPortalContent)
     def autoTransformImage(self, REQUEST=None):
         """Auto transform image according to EXIF data
 
@@ -243,15 +237,13 @@ def autoTransformImage(self, REQUEST=None):
         else:
             return mirror, rotation, transform
 
-    security.declareProtected(View, 'getTransformMap')
-
+    @security.protected(View)
     def getTransformMap(self):
         """Get map for tranforming the image
         """
         return [{'name': n, 'value': v} for v, n in TRANSPOSE_MAP.items()]
 
-    security.declareProtected(View, 'hasPIL')
-
+    @security.protected(View)
     def hasPIL(self):
         """Is PIL installed?
         """
diff --git a/Products/ATContentTypes/tool/atct.py b/Products/ATContentTypes/tool/atct.py
index e499e48..f9d74bf 100644
--- a/Products/ATContentTypes/tool/atct.py
+++ b/Products/ATContentTypes/tool/atct.py
@@ -71,8 +71,7 @@ def om_icons(self):
 
     # image scales
 
-    security.declareProtected(ManagePortal, 'recreateImageScales')
-
+    @security.protected(ManagePortal)
     def recreateImageScales(self, portal_type=None):
         """Recreates AT Image scales (doesn't remove unused!)
         """
@@ -108,8 +107,7 @@ def recreateImageScales(self, portal_type=None):
         print >> out, "Updated AT Image scales"
         return out.getvalue()
 
-    security.declareProtected(ManagePortal, 'listContentTypes')
-
+    @security.protected(ManagePortal)
     def listContentTypes(self):
         """List all content types. Used for image/folder_types property.
         """
diff --git a/Products/ATContentTypes/tool/factory.py b/Products/ATContentTypes/tool/factory.py
index 232c12c..7364ee4 100644
--- a/Products/ATContentTypes/tool/factory.py
+++ b/Products/ATContentTypes/tool/factory.py
@@ -289,8 +289,7 @@ class FactoryTool(PloneBaseTool, UniqueObject, SimpleItem):
     f.close()
     _docs = stx2html(_docs)
 
-    security.declarePublic('docs')
-
+    @security.public
     def docs(self):
         """Returns FactoryTool docs formatted as HTML"""
         return self._docs
@@ -300,8 +299,7 @@ def getFactoryTypes(self):
             self._factory_types = {}
         return self._factory_types
 
-    security.declareProtected(ManagePortal, 'manage_setPortalFactoryTypes')
-
+    @security.protected(ManagePortal)
     def manage_setPortalFactoryTypes(self, REQUEST=None, listOfTypeIds=None):
         """Set the portal types that should use the factory."""
         if listOfTypeIds is not None:
@@ -455,8 +453,7 @@ def __bobo_traverse__(self, REQUEST, name):
         # a type name -- return a temp folder
         return self._getTempFolder(str(name))
 
-    security.declarePublic('__call__')
-
+    @security.public
     def __call__(self, *args, **kwargs):
         """call method"""
         self._fixRequest()
diff --git a/Products/ATContentTypes/tool/metadata.py b/Products/ATContentTypes/tool/metadata.py
index d7ec1a1..296873a 100644
--- a/Products/ATContentTypes/tool/metadata.py
+++ b/Products/ATContentTypes/tool/metadata.py
@@ -55,8 +55,7 @@ def __init__(self, is_multi_valued=False):
     #
     #   Mutator.
     #
-    security.declareProtected(ManagePortal, 'edit')
-
+    @security.protected(ManagePortal)
     def edit(self, is_required, supply_default, default_value,
              enforce_vocabulary, allowed_vocabulary):
         self.is_required = bool(is_required)
@@ -68,43 +67,37 @@ def edit(self, is_required, supply_default, default_value,
     #
     #   Query interface
     #
-    security.declareProtected(View, 'isMultiValued')
-
+    @security.protected(View)
     def isMultiValued(self):
         """ Can this element hold multiple values?
         """
         return self.is_multi_valued
 
-    security.declareProtected(View, 'isRequired')
-
+    @security.protected(View)
     def isRequired(self):
         """ Must this element be supplied?
         """
         return self.is_required
 
-    security.declareProtected(View, 'supplyDefault')
-
+    @security.protected(View)
     def supplyDefault(self):
         """ Should the tool supply a default?
         """
         return self.supply_default
 
-    security.declareProtected(View, 'defaultValue')
-
+    @security.protected(View)
     def defaultValue(self):
         """ If so, what is the default?
         """
         return self.default_value
 
-    security.declareProtected(View, 'enforceVocabulary')
-
+    @security.protected(View)
     def enforceVocabulary(self):
         """ Should the tool enforce the policy's vocabulary?
         """
         return self.enforce_vocabulary
 
-    security.declareProtected(View, 'allowedVocabulary')
-
+    @security.protected(View)
     def allowedVocabulary(self):
         """ What are the allowed values?
         """
@@ -130,21 +123,18 @@ def __init__(self, is_multi_valued):
         self.policies = PersistentMapping()
         self.policies[None] = self._makePolicy()  # set default policy
 
-    security.declarePrivate('_makePolicy')
-
+    @security.private
     def _makePolicy(self):
         return MetadataElementPolicy(self.is_multi_valued)
 
-    security.declareProtected(View, 'isMultiValued')
-
+    @security.protected(View)
     def isMultiValued(self):
         """
             Is this element multi-valued?
         """
         return self.is_multi_valued
 
-    security.declareProtected(View, 'getPolicy')
-
+    @security.protected(View)
     def getPolicy(self, typ=None):
         """ Find the policy for this element for objects of the given type.
 
@@ -155,8 +145,7 @@ def getPolicy(self, typ=None):
         except KeyError:
             return self.policies[None].__of__(self)
 
-    security.declareProtected(View, 'listPolicies')
-
+    @security.protected(View)
     def listPolicies(self):
         """ Return a list of all policies for this element.
         """
@@ -165,8 +154,7 @@ def listPolicies(self):
             res.append((k, v.__of__(self)))
         return res
 
-    security.declareProtected(ManagePortal, 'addPolicy')
-
+    @security.protected(ManagePortal)
     def addPolicy(self, typ):
         """ Add a policy to this element for objects of the given type.
         """
@@ -178,8 +166,7 @@ def addPolicy(self, typ):
 
         self.policies[typ] = self._makePolicy()
 
-    security.declareProtected(ManagePortal, 'removePolicy')
-
+    @security.protected(ManagePortal)
     def removePolicy(self, typ):
         """ Remove the policy from this element for objects of the given type.
 
@@ -218,8 +205,7 @@ def __init__(self, id, element_specs=()):
     security.declareProtected(ManagePortal, 'elementPoliciesForm')
     elementPoliciesForm = DTMLFile('metadataElementPolicies', WWW_DIR)
 
-    security.declareProtected(ManagePortal, 'addElementPolicy')
-
+    @security.protected(ManagePortal)
     def addElementPolicy(self, element, content_type, is_required,
                          supply_default, default_value, enforce_vocabulary,
                          allowed_vocabulary, REQUEST=None):
@@ -239,8 +225,7 @@ def addElementPolicy(self, element, content_type, is_required,
                 '/elementPoliciesForm?element=' + element +
                 '&manage_tabs_message=Policy+added.')
 
-    security.declareProtected(ManagePortal, 'removeElementPolicy')
-
+    @security.protected(ManagePortal)
     def removeElementPolicy(self, element, content_type, REQUEST=None
                             ):
         """ Remvoe a type-specific policy for one of our elements.
@@ -256,8 +241,7 @@ def removeElementPolicy(self, element, content_type, REQUEST=None
                 '/elementPoliciesForm?element=' + element +
                 '&manage_tabs_message=Policy+removed.')
 
-    security.declareProtected(ManagePortal, 'updateElementPolicy')
-
+    @security.protected(ManagePortal)
     def updateElementPolicy(self, element, content_type, is_required,
                             supply_default, default_value, enforce_vocabulary,
                             allowed_vocabulary, REQUEST=None):
@@ -280,8 +264,7 @@ def updateElementPolicy(self, element, content_type, is_required,
     #
     #   Element spec manipulation.
     #
-    security.declareProtected(ManagePortal, 'listElementSpecs')
-
+    @security.protected(ManagePortal)
     def listElementSpecs(self):
         """ Return a list of ElementSpecs representing the elements we manage.
         """
@@ -290,15 +273,13 @@ def listElementSpecs(self):
             res.append((k, v.__of__(self)))
         return res
 
-    security.declareProtected(ManagePortal, 'getElementSpec')
-
+    @security.protected(ManagePortal)
     def getElementSpec(self, element):
         """ Return an ElementSpec for the given 'element'.
         """
         return self.element_specs[element].__of__(self)
 
-    security.declareProtected(ManagePortal, 'addElementSpec')
-
+    @security.protected(ManagePortal)
     def addElementSpec(self, element, is_multi_valued, REQUEST=None):
         """ Add 'element' to our list of managed elements.
         """
@@ -314,8 +295,7 @@ def addElementSpec(self, element, is_multi_valued, REQUEST=None):
                 '/propertiesForm?manage_tabs_message=Element+' + element +
                 '+added.')
 
-    security.declareProtected(ManagePortal, 'removeElementSpec')
-
+    @security.protected(ManagePortal)
     def removeElementSpec(self, element, REQUEST=None):
         """ Remove 'element' from our list of managed elements.
         """
@@ -327,8 +307,7 @@ def removeElementSpec(self, element, REQUEST=None):
                 '/propertiesForm?manage_tabs_message=Element+' + element +
                 '+removed.')
 
-    security.declareProtected(ManagePortal, 'listPolicies')
-
+    @security.protected(ManagePortal)
     def listPolicies(self, typ=None):
         """ Show all policies for a given content type
 
@@ -386,10 +365,8 @@ def __init__(self, publisher=None):
     security.declareProtected(ManagePortal, 'propertiesForm')
     propertiesForm = DTMLFile('metadataProperties', WWW_DIR)
 
-    security.declareProtected(ManagePortal, 'editProperties')
-
-    def editProperties(self, publisher=None, REQUEST=None
-                       ):
+    @security.protected(ManagePortal)
+    def editProperties(self, publisher=None, REQUEST=None):
         """ Form handler for "tool-wide" properties
         """
         if publisher is not None:
@@ -400,8 +377,7 @@ def editProperties(self, publisher=None, REQUEST=None
                 self.absolute_url() +
                 '/propertiesForm?manage_tabs_message=Tool+updated.')
 
-    security.declareProtected(ManagePortal, 'manage_addSchema')
-
+    @security.protected(ManagePortal)
     def manage_addSchema(self, schema_id, elements, REQUEST):
         """ ZMI wrapper around addSchema
         """
@@ -418,8 +394,7 @@ def manage_addSchema(self, schema_id, elements, REQUEST):
             self.absolute_url() +
             '/propertiesForm?manage_tabs_message=Schema+added.')
 
-    security.declareProtected(ManagePortal, 'manage_removeSchemas')
-
+    @security.protected(ManagePortal)
     def manage_removeSchemas(self, schema_ids, REQUEST):
         """ ZMI wrapper around removeSchema
         """
@@ -433,54 +408,47 @@ def manage_removeSchemas(self, schema_ids, REQUEST):
             self.absolute_url() +
             '/propertiesForm?manage_tabs_message=Schemas+removed.')
 
-    security.declarePrivate('getFullName')
-
+    @security.private
     def getFullName(self, userid):
         """ See IMetadataTool.
         """
         return userid   # TODO: do lookup here
 
-    security.declarePublic('getPublisher')
-
+    @security.public
     def getPublisher(self):
         """ See IMetadataTool.
         """
         return self.publisher
 
-    security.declarePublic('listAllowedSubjects')
-
+    @security.public
     def listAllowedSubjects(self, content=None, content_type=None):
         """ See IMetadataTool.
         """
         return self.listAllowedVocabulary(
             'DCMI', 'Subject', content, content_type)
 
-    security.declarePublic('listAllowedFormats')
-
+    @security.public
     def listAllowedFormats(self, content=None, content_type=None):
         """ See IMetadataTool.
         """
         return self.listAllowedVocabulary(
             'DCMI', 'Format', content, content_type)
 
-    security.declarePublic('listAllowedLanguages')
-
+    @security.public
     def listAllowedLanguages(self, content=None, content_type=None):
         """ See IMetadataTool.
         """
         return self.listAllowedVocabulary(
             'DCMI', 'Language', content, content_type)
 
-    security.declarePublic('listAllowedRights')
-
+    @security.public
     def listAllowedRights(self, content=None, content_type=None):
         """ See IMetadata Tool.
         """
         return self.listAllowedVocabulary(
             'DCMI', 'Rights', content, content_type)
 
-    security.declarePublic('listAllowedVocabulary')
-
+    @security.public
     def listAllowedVocabulary(self, schema, element, content=None,
                               content_type=None):
         """ See IMetadataTool.
@@ -491,8 +459,7 @@ def listAllowedVocabulary(self, schema, element, content=None,
             content_type = content.getPortalTypeName()
         return spec.getPolicy(content_type).allowedVocabulary()
 
-    security.declarePublic('listSchemas')
-
+    @security.public
     def listSchemas(self):
         """ See IMetadataTool.
         """
@@ -500,8 +467,7 @@ def listSchemas(self):
         result.extend(self.objectItems([MetadataSchema.meta_type]))
         return result
 
-    security.declareProtected(ModifyPortalContent, 'addSchema')
-
+    @security.protected(ModifyPortalContent)
     def addSchema(self, schema_id, elements=()):
         """ See IMetadataTool.
         """
@@ -513,8 +479,7 @@ def addSchema(self, schema_id, elements=()):
 
         return self._getOb(schema_id)
 
-    security.declareProtected(ModifyPortalContent, 'removeSchema')
-
+    @security.protected(ModifyPortalContent)
     def removeSchema(self, schema_id):
         """ See IMetadataTool.
         """
@@ -523,8 +488,7 @@ def removeSchema(self, schema_id):
 
         self._delObject(schema_id)
 
-    security.declareProtected(ModifyPortalContent, 'setInitialMetadata')
-
+    @security.protected(ModifyPortalContent)
     def setInitialMetadata(self, content):
         """ See IMetadataTool.
         """
@@ -543,8 +507,7 @@ def setInitialMetadata(self, content):
 
         # TODO:  Call initial_values_hook, if present
 
-    security.declareProtected(View, 'validateMetadata')
-
+    @security.protected(View)
     def validateMetadata(self, content):
         """ See IMetadataTool.
         """
diff --git a/Products/ATContentTypes/tool/topic.py b/Products/ATContentTypes/tool/topic.py
index bb18ee4..1fceec0 100644
--- a/Products/ATContentTypes/tool/topic.py
+++ b/Products/ATContentTypes/tool/topic.py
@@ -68,8 +68,7 @@ def getCriteriaForIndex(self, index, as_dict=False):
         criteria.sort()
         return criteria
 
-    security.declareProtected(ManagePortal, 'addIndex')
-
+    @security.protected(ManagePortal)
     def addIndex(self, index, friendlyName='', description='',
                  enabled=False, criteria=None):
         """ Add a new index along with descriptive information to the index
@@ -89,8 +88,7 @@ def addIndex(self, index, friendlyName='', description='',
         self.topic_indexes[index] = objIndex
         self._p_changed = True
 
-    security.declareProtected(ManagePortal, 'addMetadata')
-
+    @security.protected(ManagePortal)
     def addMetadata(self, metadata, friendlyName='',
                     description='', enabled=False):
         """ Add a new metadata field along with descriptive information to the
@@ -106,8 +104,7 @@ def addMetadata(self, metadata, friendlyName='',
         self.topic_metadata[metadata] = objMeta
         self._p_changed = True
 
-    security.declareProtected(ManagePortal, 'updateIndex')
-
+    @security.protected(ManagePortal)
     def updateIndex(self, index, friendlyName=None,
                     description=None, enabled=None, criteria=None):
         """ Updates an existing index in the registry, unrecognized values are
@@ -124,8 +121,7 @@ def updateIndex(self, index, friendlyName=None,
 
         self.addIndex(index, friendlyName, description, enabled, criteria)
 
-    security.declareProtected(ManagePortal, 'updateMetadata')
-
+    @security.protected(ManagePortal)
     def updateMetadata(self, metadata, friendlyName=None,
                        description=None, enabled=None):
         """ Updates an existing metadata field in the registry, unrecognized values are
@@ -139,24 +135,21 @@ def updateMetadata(self, metadata, friendlyName=None,
             enabled = meta[metadata].enabled
         self.addMetadata(metadata, friendlyName, description, enabled)
 
-    security.declareProtected(ManagePortal, 'removeIndex')
-
+    @security.protected(ManagePortal)
     def removeIndex(self, index):
         """ Removes an existing index from the registry """
         if index in self.topic_indexes:
             del self.topic_indexes[index]
             self._p_changed = True
 
-    security.declareProtected(ManagePortal, 'removeMetadata')
-
+    @security.protected(ManagePortal)
     def removeMetadata(self, metadata):
         """ Removes an existing metadata field from the registry """
         if metadata in self.topic_metadata:
             del self.topic_metadata[metadata]
             self._p_changed = True
 
-    security.declareProtected(ManagePortal, 'createInitialIndexes')
-
+    @security.protected(ManagePortal)
     def createInitialIndexes(self):
         """ create indexes for all indexes in the catalog """
         indexes = self.listCatalogFields()
@@ -166,8 +159,7 @@ def createInitialIndexes(self):
                 self.addIndex(i, friendlyName='', enabled=enabled)
         return True
 
-    security.declareProtected(ManagePortal, 'createInitialMetadata')
-
+    @security.protected(ManagePortal)
     def createInitialMetadata(self):
         """ create metadata for all indexes in the catalog """
         metas = self.listCatalogMetadata()
@@ -177,8 +169,7 @@ def createInitialMetadata(self):
                 self.addMetadata(i, friendlyName='', enabled=enabled)
         return True
 
-    security.declarePrivate('listCatalogFields')
-
+    @security.private
     def listCatalogFields(self):
         """ Return a list of fields from portal_catalog. """
         pcatalog = getToolByName(self, 'portal_catalog')
@@ -186,8 +177,7 @@ def listCatalogFields(self):
         val = sorted([field for field in available])
         return val
 
-    security.declarePrivate('listCatalogMetadata')
-
+    @security.private
     def listCatalogMetadata(self):
         """ Return a list of columns from portal_catalog. """
         pcatalog = getToolByName(self, 'portal_catalog')
@@ -274,8 +264,7 @@ def getFriendlyName(self, index):
         else:
             return index
 
-    security.declareProtected(ManagePortal, 'getIndexes')
-
+    @security.protected(ManagePortal)
     def getIndexes(self, enabledOnly=False):
         """ Returns the full list of available indexes, optionally filtering
             out those that are not marked enabled """
@@ -291,8 +280,7 @@ def getIndexes(self, enabledOnly=False):
         indexes = [i[1] for i in indexes_dec]
         return indexes
 
-    security.declareProtected(ManagePortal, 'getAllMetadata')
-
+    @security.protected(ManagePortal)
     def getAllMetadata(self, enabledOnly=False):
         """ Returns the full list of available metadata fields, optionally
             filtering out those that are not marked enabled """
@@ -322,8 +310,7 @@ def getMetadata(self, metadata):
         else:
             raise AttributeError('Metadata ' + str(metadata) + ' not found')
 
-    security.declareProtected(ManagePortal, 'manage_saveTopicSetup')
-
+    @security.protected(ManagePortal)
     def manage_saveTopicSetup(self, REQUEST=None):
         """ Set indexes and metadata from form """
         if REQUEST is None:
@@ -346,8 +333,7 @@ def manage_saveTopicSetup(self, REQUEST=None):
                 enabled)
         return True
 
-    security.declareProtected(ManagePortal, 'manage_saveTopicSetupTypes')
-
+    @security.protected(ManagePortal)
     def manage_saveTopicSetupTypes(self, REQUEST=None):
         """ Set portal types from form """
         if REQUEST is None:


Repository: Products.ATContentTypes


Branch: refs/heads/master
Date: 2016-02-06T23:08:06+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/Products.ATContentTypes/commit/29416856ab6f1a6a929339822a583ef5300d3dec

Merge pull request #31 from plone/maurits-partial-cleanup

Partial cleanup (pep8, pyflakes, sorting, security decorators)

Files changed:
A .isort.cfg
M CHANGES.rst
M Products/ATContentTypes/__init__.py
M Products/ATContentTypes/atct.py
M Products/ATContentTypes/browser/calendar.py
M Products/ATContentTypes/browser/criteria.py
M Products/ATContentTypes/browser/download.py
M Products/ATContentTypes/browser/nextprevious.py
M Products/ATContentTypes/config.py
M Products/ATContentTypes/configuration/__init__.py
M Products/ATContentTypes/configuration/component.xml
M Products/ATContentTypes/configuration/config.py
M Products/ATContentTypes/configuration/datatype.py
M Products/ATContentTypes/configuration/schema.py
M Products/ATContentTypes/content/__init__.py
M Products/ATContentTypes/content/base.py
M Products/ATContentTypes/content/document.py
M Products/ATContentTypes/content/event.py
M Products/ATContentTypes/content/favorite.py
M Products/ATContentTypes/content/file.py
M Products/ATContentTypes/content/folder.py
M Products/ATContentTypes/content/image.py
M Products/ATContentTypes/content/link.py
M Products/ATContentTypes/content/newsitem.py
M Products/ATContentTypes/content/schemata.py
M Products/ATContentTypes/content/topic.py
M Products/ATContentTypes/criteria/__init__.py
M Products/ATContentTypes/criteria/base.py
M Products/ATContentTypes/criteria/boolean.py
M Products/ATContentTypes/criteria/currentauthor.py
M Products/ATContentTypes/criteria/date.py
M Products/ATContentTypes/criteria/daterange.py
M Products/ATContentTypes/criteria/list.py
M Products/ATContentTypes/criteria/path.py
M Products/ATContentTypes/criteria/portaltype.py
M Products/ATContentTypes/criteria/reference.py
M Products/ATContentTypes/criteria/relativepath.py
M Products/ATContentTypes/criteria/schemata.py
M Products/ATContentTypes/criteria/selection.py
M Products/ATContentTypes/criteria/simpleint.py
M Products/ATContentTypes/criteria/simplestring.py
M Products/ATContentTypes/criteria/sort.py
M Products/ATContentTypes/exportimport/__init__.py
M Products/ATContentTypes/exportimport/atcttool.py
M Products/ATContentTypes/exportimport/content.py
M Products/ATContentTypes/exportimport/factorytool.py
M Products/ATContentTypes/exportimport/tests/test_factory_tool.py
M Products/ATContentTypes/factories.py
M Products/ATContentTypes/interface.py
M Products/ATContentTypes/interfaces/__init__.py
M Products/ATContentTypes/interfaces/document.py
M Products/ATContentTypes/interfaces/event.py
M Products/ATContentTypes/interfaces/factories.py
M Products/ATContentTypes/interfaces/factory.py
M Products/ATContentTypes/interfaces/file.py
M Products/ATContentTypes/interfaces/folder.py
M Products/ATContentTypes/interfaces/image.py
M Products/ATContentTypes/interfaces/interfaces.py
M Products/ATContentTypes/interfaces/link.py
M Products/ATContentTypes/interfaces/news.py
M Products/ATContentTypes/interfaces/topic.py
M Products/ATContentTypes/lib/__init__.py
M Products/ATContentTypes/lib/calendarsupport.py
M Products/ATContentTypes/lib/constraintypes.py
M Products/ATContentTypes/lib/historyaware.py
M Products/ATContentTypes/lib/imagetransform.py
M Products/ATContentTypes/lib/validators.py
M Products/ATContentTypes/migration/__init__.py
M Products/ATContentTypes/migration/v1_2/__init__.py
M Products/ATContentTypes/permission.py
M Products/ATContentTypes/setuphandlers.py
M Products/ATContentTypes/skins/ATContentTypes/atct_album_image.pt
M Products/ATContentTypes/skins/ATContentTypes/atct_album_view.pt
M Products/ATContentTypes/skins/ATContentTypes/atct_history.pt
M Products/ATContentTypes/skins/ATContentTypes/atct_image_transform.pt
M Products/ATContentTypes/skins/ATContentTypes/atct_macros.pt
M Products/ATContentTypes/skins/ATContentTypes/atct_saveTopicSetup.cpy
M Products/ATContentTypes/skins/ATContentTypes/criterion_edit_form.cpt
M Products/ATContentTypes/skins/ATContentTypes/criterion_remove.cpy
M Products/ATContentTypes/skins/ATContentTypes/formatCatalogMetadata.py
M Products/ATContentTypes/skins/ATContentTypes/link_redirect_view.py
M Products/ATContentTypes/skins/ATContentTypes/validate_remove_criterion.vpy
M Products/ATContentTypes/tests/atctftestcase.py
M Products/ATContentTypes/tests/atcttestcase.py
M Products/ATContentTypes/tests/testContentTypes.py
M Products/ATContentTypes/tests/test_atdocument.py
M Products/ATContentTypes/tests/test_atevent.py
M Products/ATContentTypes/tests/test_atfile.py
M Products/ATContentTypes/tests/test_atfolder.py
M Products/ATContentTypes/tests/test_atimage.py
M Products/ATContentTypes/tests/test_atlink.py
M Products/ATContentTypes/tests/test_atnewsitem.py
M Products/ATContentTypes/tests/test_attopic.py
M Products/ATContentTypes/tests/test_browserdefaultmixin.py
M Products/ATContentTypes/tests/test_bugs.py
M Products/ATContentTypes/tests/test_calendar.py
M Products/ATContentTypes/tests/test_constraintypes.py
M Products/ATContentTypes/tests/test_content_profile.py
M Products/ATContentTypes/tests/test_controlpanel.py
M Products/ATContentTypes/tests/test_criteria.py
M Products/ATContentTypes/tests/test_default_mimetypes.py
M Products/ATContentTypes/tests/test_doctests.py
M Products/ATContentTypes/tests/test_installation.py
M Products/ATContentTypes/tests/test_interfaces.py
M Products/ATContentTypes/tests/test_migrations.py
M Products/ATContentTypes/tests/test_portal_factory.py
M Products/ATContentTypes/tests/test_skinScripts.py
M Products/ATContentTypes/tests/test_tool.py
M Products/ATContentTypes/tests/test_topictool.py
M Products/ATContentTypes/tests/utils.py
M Products/ATContentTypes/thirdparty/exif.py
M Products/ATContentTypes/tool/__init__.py
M Products/ATContentTypes/tool/atct.py
M Products/ATContentTypes/tool/factory.py
M Products/ATContentTypes/tool/metadata.py
M Products/ATContentTypes/tool/topic.py
M Products/ATContentTypes/utils.py
M Products/ATContentTypes/www/imageScales.zpt
M Products/ATContentTypes/www/overview.zpt
M Products/__init__.py
M README.rst

diff --git a/.isort.cfg b/.isort.cfg
new file mode 100644
index 0000000..0e395d2
--- /dev/null
+++ b/.isort.cfg
@@ -0,0 +1,7 @@
+[settings]
+force_alphabetical_sort = True
+force_single_line = True
+lines_after_imports = 2
+line_length = 200
+# This would give too many ImportErrors:
+# not_skip = __init__.py
diff --git a/CHANGES.rst b/CHANGES.rst
index a6374a1..2121e0c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,6 +10,18 @@ New:
 
 Fixes:
 
+- Added security decorators.  [maurits]
+
+- Removed double line from simpleint criterion.  This had the effect
+  that post_validate always gave an error for value2.  Possibly this
+  is used nowhere, because this has been in there for years.  [maurits]
+
+- Added utf-8 coding magic comment.  [maurits]
+
+- Sorted imports with isort.  [maurits]
+
+- Fixed pep8 errors.  [maurits]
+
 - Prevent topic-criteria from having unicode as id. A unicode-id broke
   indexing the criteria in ZCatalog since obj.getPhysicalPath() prefers
   obj.id over obj.getId() in zope4.
diff --git a/Products/ATContentTypes/__init__.py b/Products/ATContentTypes/__init__.py
index d7c4e65..adcb404 100644
--- a/Products/ATContentTypes/__init__.py
+++ b/Products/ATContentTypes/__init__.py
@@ -1,21 +1,22 @@
+# -*- coding: utf-8 -*-
 import os.path
 import sys
-import logging
-logger = logging.getLogger('ATCT')
 
+# This must be at the top, because the exif module is needed in
+# lib/imagetransform.py.
 ATCT_DIR = os.path.abspath(os.path.dirname(__file__))
 sys.path.insert(3, os.path.join(ATCT_DIR, 'thirdparty'))
 
 from AccessControl import ModuleSecurityInfo
 
+from Products.ATContentTypes.config import GLOBALS
 from Products.ATContentTypes.config import HAS_LINGUA_PLONE
-from Products.ATContentTypes.config import SKINS_DIR
 from Products.ATContentTypes.config import PROJECTNAME
-from Products.ATContentTypes.config import GLOBALS
+from Products.ATContentTypes.config import SKINS_DIR
 
+from Products.CMFCore.DirectoryView import registerDirectory
 from Products.CMFCore.utils import ContentInit
 from Products.CMFCore.utils import ToolInit
-from Products.CMFCore.DirectoryView import registerDirectory
 
 # Import "ATCTMessageFactory as _" to create messages in atcontenttypes domain
 from zope.i18nmessageid import MessageFactory
@@ -27,10 +28,10 @@
 import Products.ATContentTypes.configuration
 import Products.ATContentTypes.lib.validators
 
-# second leven imports: content types, criteria
+# second level imports: content types, criteria
 # the content types are depending on the validators and configuration
-import Products.ATContentTypes.content
-import Products.ATContentTypes.criteria
+import Products.ATContentTypes.content  # noqa
+import Products.ATContentTypes.criteria  # noqa
 
 # misc imports
 from Products.ATContentTypes.tool.atct import ATCTTool
diff --git a/Products/ATContentTypes/atct.py b/Products/ATContentTypes/atct.py
index 53f53a6..0fdb69b 100644
--- a/Products/ATContentTypes/atct.py
+++ b/Products/ATContentTypes/atct.py
@@ -1,60 +1,54 @@
-from Products.ATContentTypes.content.base import ATCTContent
-from Products.ATContentTypes.content.base import ATCTFileContent
-from Products.ATContentTypes.content.base import ATCTFolder
-from Products.ATContentTypes.content.base import ATCTOrderedFolder
-from Products.ATContentTypes.content.base import ATCTBTreeFolder
-
-from Products.ATContentTypes.content.schemata import ATContentTypeSchema
-
-from Products.ATContentTypes.content.document import ATDocument
-from Products.ATContentTypes.content.event import ATEvent
-from Products.ATContentTypes.content.file import ATFile
-from Products.ATContentTypes.content.folder import ATFolder
-from Products.ATContentTypes.content.folder import ATBTreeFolder
-from Products.ATContentTypes.content.image import ATImage
-from Products.ATContentTypes.content.link import ATLink
-from Products.ATContentTypes.content.newsitem import ATNewsItem
-from Products.ATContentTypes.content.topic import ATTopic
-
-from Products.ATContentTypes.content.document import ATDocumentSchema
-from Products.ATContentTypes.content.event import ATEventSchema
-from Products.ATContentTypes.content.file import ATFileSchema
-from Products.ATContentTypes.content.folder import ATFolderSchema
-from Products.ATContentTypes.content.folder import ATBTreeFolderSchema
-from Products.ATContentTypes.content.image import ATImageSchema
-from Products.ATContentTypes.content.link import ATLinkSchema
-from Products.ATContentTypes.content.newsitem import ATNewsItemSchema
-from Products.ATContentTypes.content.topic import ATTopicSchema
-
-from Products.ATContentTypes.criteria import ALL_INDICES
-from Products.ATContentTypes.criteria import DATE_INDICES
-from Products.ATContentTypes.criteria import STRING_INDICES
-from Products.ATContentTypes.criteria import LIST_INDICES
-from Products.ATContentTypes.criteria import SORT_INDICES
-from Products.ATContentTypes.criteria import registerCriterion
-from Products.ATContentTypes.criteria import unregisterCriterion
-
-from Products.ATContentTypes.criteria.base import ATBaseCriterion
-from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
-
-from Products.ATContentTypes.criteria.boolean import ATBooleanCriterion
-from Products.ATContentTypes.criteria.date import ATDateCriteria
-from Products.ATContentTypes.criteria.daterange import ATDateRangeCriterion
-from Products.ATContentTypes.criteria.list import ATListCriterion
-from Products.ATContentTypes.criteria.portaltype import ATPortalTypeCriterion
-from Products.ATContentTypes.criteria.reference import ATReferenceCriterion
-from Products.ATContentTypes.criteria.selection import ATSelectionCriterion
-from Products.ATContentTypes.criteria.simpleint import ATSimpleIntCriterion
-from Products.ATContentTypes.criteria.simplestring import ATSimpleStringCriterion
-from Products.ATContentTypes.criteria.sort import ATSortCriterion
-
-from Products.ATContentTypes.criteria.boolean import ATBooleanCriterionSchema
-from Products.ATContentTypes.criteria.date import ATDateCriteriaSchema
-from Products.ATContentTypes.criteria.daterange import ATDateRangeCriterionSchema
-from Products.ATContentTypes.criteria.list import ATListCriterionSchema
-from Products.ATContentTypes.criteria.portaltype import ATPortalTypeCriterionSchema
-from Products.ATContentTypes.criteria.reference import ATReferenceCriterionSchema
-from Products.ATContentTypes.criteria.selection import ATSelectionCriterionSchema
-from Products.ATContentTypes.criteria.simpleint import ATSimpleIntCriterionSchema
-from Products.ATContentTypes.criteria.simplestring import ATSimpleStringCriterionSchema
-from Products.ATContentTypes.criteria.sort import ATSortCriterionSchema
+# -*- coding: utf-8 -*-
+from Products.ATContentTypes.content.base import ATCTBTreeFolder  # noqa
+from Products.ATContentTypes.content.base import ATCTContent  # noqa
+from Products.ATContentTypes.content.base import ATCTFileContent  # noqa
+from Products.ATContentTypes.content.base import ATCTFolder  # noqa
+from Products.ATContentTypes.content.base import ATCTOrderedFolder  # noqa
+from Products.ATContentTypes.content.document import ATDocument  # noqa
+from Products.ATContentTypes.content.document import ATDocumentSchema  # noqa
+from Products.ATContentTypes.content.event import ATEvent  # noqa
+from Products.ATContentTypes.content.event import ATEventSchema  # noqa
+from Products.ATContentTypes.content.file import ATFile  # noqa
+from Products.ATContentTypes.content.file import ATFileSchema  # noqa
+from Products.ATContentTypes.content.folder import ATBTreeFolder  # noqa
+from Products.ATContentTypes.content.folder import ATBTreeFolderSchema  # noqa
+from Products.ATContentTypes.content.folder import ATFolder  # noqa
+from Products.ATContentTypes.content.folder import ATFolderSchema  # noqa
+from Products.ATContentTypes.content.image import ATImage  # noqa
+from Products.ATContentTypes.content.image import ATImageSchema  # noqa
+from Products.ATContentTypes.content.link import ATLink  # noqa
+from Products.ATContentTypes.content.link import ATLinkSchema  # noqa
+from Products.ATContentTypes.content.newsitem import ATNewsItem  # noqa
+from Products.ATContentTypes.content.newsitem import ATNewsItemSchema  # noqa
+from Products.ATContentTypes.content.schemata import ATContentTypeSchema  # noqa
+from Products.ATContentTypes.content.topic import ATTopic  # noqa
+from Products.ATContentTypes.content.topic import ATTopicSchema  # noqa
+from Products.ATContentTypes.criteria import ALL_INDICES  # noqa
+from Products.ATContentTypes.criteria import DATE_INDICES  # noqa
+from Products.ATContentTypes.criteria import LIST_INDICES  # noqa
+from Products.ATContentTypes.criteria import registerCriterion  # noqa
+from Products.ATContentTypes.criteria import SORT_INDICES  # noqa
+from Products.ATContentTypes.criteria import STRING_INDICES  # noqa
+from Products.ATContentTypes.criteria import unregisterCriterion  # noqa
+from Products.ATContentTypes.criteria.base import ATBaseCriterion  # noqa
+from Products.ATContentTypes.criteria.boolean import ATBooleanCriterion  # noqa
+from Products.ATContentTypes.criteria.boolean import ATBooleanCriterionSchema  # noqa
+from Products.ATContentTypes.criteria.date import ATDateCriteria  # noqa
+from Products.ATContentTypes.criteria.date import ATDateCriteriaSchema  # noqa
+from Products.ATContentTypes.criteria.daterange import ATDateRangeCriterion  # noqa
+from Products.ATContentTypes.criteria.daterange import ATDateRangeCriterionSchema  # noqa
+from Products.ATContentTypes.criteria.list import ATListCriterion  # noqa
+from Products.ATContentTypes.criteria.list import ATListCriterionSchema  # noqa
+from Products.ATContentTypes.criteria.portaltype import ATPortalTypeCriterion  # noqa
+from Products.ATContentTypes.criteria.portaltype import ATPortalTypeCriterionSchema  # noqa
+from Products.ATContentTypes.criteria.reference import ATReferenceCriterion  # noqa
+from Products.ATContentTypes.criteria.reference import ATReferenceCriterionSchema  # noqa
+from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema  # noqa
+from Products.ATContentTypes.criteria.selection import ATSelectionCriterion  # noqa
+from Products.ATContentTypes.criteria.selection import ATSelectionCriterionSchema  # noqa
+from Products.ATContentTypes.criteria.simpleint import ATSimpleIntCriterion  # noqa
+from Products.ATContentTypes.criteria.simpleint import ATSimpleIntCriterionSchema  # noqa
+from Products.ATContentTypes.criteria.simplestring import ATSimpleStringCriterion  # noqa
+from Products.ATContentTypes.criteria.simplestring import ATSimpleStringCriterionSchema  # noqa
+from Products.ATContentTypes.criteria.sort import ATSortCriterion  # noqa
+from Products.ATContentTypes.criteria.sort import ATSortCriterionSchema  # noqa
diff --git a/Products/ATContentTypes/browser/calendar.py b/Products/ATContentTypes/browser/calendar.py
index 4da44ac..281f761 100644
--- a/Products/ATContentTypes/browser/calendar.py
+++ b/Products/ATContentTypes/browser/calendar.py
@@ -1,10 +1,9 @@
+# -*- coding: utf-8 -*-
 from plone.memoize import ram
-from zope.publisher.browser import BrowserView
-
-from Products.CMFCore.utils import getToolByName
-
 from Products.ATContentTypes.interfaces import ICalendarSupport
 from Products.ATContentTypes.lib import calendarsupport as cs
+from Products.CMFCore.utils import getToolByName
+from zope.publisher.browser import BrowserView
 
 
 def cachekey(fun, self):
diff --git a/Products/ATContentTypes/browser/criteria.py b/Products/ATContentTypes/browser/criteria.py
index f6b892e..c4e6794 100644
--- a/Products/ATContentTypes/browser/criteria.py
+++ b/Products/ATContentTypes/browser/criteria.py
@@ -1,7 +1,9 @@
-import json
+# -*- coding: utf-8 -*-
 from zope.i18n import translate
 from zope.publisher.browser import BrowserView
 
+import json
+
 
 class JSONCriteriaForField(BrowserView):
     """Return the criteria vocabulary as a json result"""
diff --git a/Products/ATContentTypes/browser/download.py b/Products/ATContentTypes/browser/download.py
index 2aee5c0..d16a858 100644
--- a/Products/ATContentTypes/browser/download.py
+++ b/Products/ATContentTypes/browser/download.py
@@ -1,8 +1,9 @@
+# -*- coding: utf-8 -*-
+from AccessControl import Unauthorized
+from Products.Five import BrowserView
 from zope.interface import implements
 from zope.publisher.interfaces import IPublishTraverse
 from zope.publisher.interfaces import NotFound as pNotFound
-from AccessControl import Unauthorized
-from Products.Five import BrowserView
 
 
 class DownloadArchetypeFile(BrowserView):
diff --git a/Products/ATContentTypes/browser/nextprevious.py b/Products/ATContentTypes/browser/nextprevious.py
index 634cf29..46211bc 100644
--- a/Products/ATContentTypes/browser/nextprevious.py
+++ b/Products/ATContentTypes/browser/nextprevious.py
@@ -1,15 +1,13 @@
-from zope.interface import implements
-from zope.component import adapts
-from zope.component import getUtility
-
+# -*- coding: utf-8 -*-
+from Acquisition import aq_base
 from plone.app.layout.nextprevious.interfaces import INextPreviousProvider
-from Products.ATContentTypes.interfaces.folder import IATFolder
-
 from plone.memoize.instance import memoize
 from plone.registry.interfaces import IRegistry
-
-from Acquisition import aq_base
+from Products.ATContentTypes.interfaces.folder import IATFolder
 from Products.CMFCore.utils import getToolByName
+from zope.component import adapts
+from zope.component import getUtility
+from zope.interface import implements
 
 
 class ATFolderNextPrevious(object):
@@ -51,9 +49,8 @@ def itemRelatives(self, oid):
 
         # Get the previous item
         if position - 1 >= 0:
-            prev_brain = catalog(self.buildNextPreviousQuery(position=position - 1,
-                                                             range='max',
-                                                             sort_order='reverse'))
+            prev_brain = catalog(self.buildNextPreviousQuery(
+                position=position - 1, range='max', sort_order='reverse'))
             if prev_brain and len(prev_brain) > 0:
                 previous = self.buildNextPreviousItem(prev_brain[0])
 
@@ -65,8 +62,8 @@ def itemRelatives(self, oid):
             count = len(folder)
 
         if (position + 1) < count:
-            next_brain = catalog(self.buildNextPreviousQuery(position=position + 1,
-                                                             range='min'))
+            next_brain = catalog(self.buildNextPreviousQuery(
+                position=position + 1, range='min'))
 
             if next_brain and len(next_brain) > 0:
                 next = self.buildNextPreviousItem(next_brain[0])
diff --git a/Products/ATContentTypes/config.py b/Products/ATContentTypes/config.py
index 9f1e479..1c5f369 100644
--- a/Products/ATContentTypes/config.py
+++ b/Products/ATContentTypes/config.py
@@ -1,15 +1,17 @@
+# -*- coding: utf-8 -*-
 """AT Content Types configuration file
 
 DO NOT CHANGE THIS FILE!
 
 Use ZConfig to configure ATCT
 """
-__docformat__ = 'restructuredtext'
 
-import pkg_resources
-import os
 from Products.ATContentTypes.configuration import zconf
 
+import os
+import pkg_resources
+
+
 # options for mx tidy
 # read http://www.egenix.com/files/python/mxTidy.html for more informations
 MX_TIDY_ENABLED = zconf.mxtidy.enable
@@ -66,7 +68,7 @@
 
 try:
     # Won't use pkg_resources because of the packaging issue
-    from PIL import Image
+    from PIL import Image  # noqa
 except ImportError:
     HAS_PIL = False
 else:
diff --git a/Products/ATContentTypes/configuration/__init__.py b/Products/ATContentTypes/configuration/__init__.py
index 706ccac..997848e 100644
--- a/Products/ATContentTypes/configuration/__init__.py
+++ b/Products/ATContentTypes/configuration/__init__.py
@@ -1,3 +1,4 @@
-from Products.ATContentTypes.configuration.config import zconf
-from Products.ATContentTypes.configuration.config import handler
-from Products.ATContentTypes.configuration.config import conf_file
+# -*- coding: utf-8 -*-
+from Products.ATContentTypes.configuration.config import zconf  # noqa
+from Products.ATContentTypes.configuration.config import handler  # noqa
+from Products.ATContentTypes.configuration.config import conf_file  # noqa
diff --git a/Products/ATContentTypes/configuration/component.xml b/Products/ATContentTypes/configuration/component.xml
index 14186d7..91f5280 100644
--- a/Products/ATContentTypes/configuration/component.xml
+++ b/Products/ATContentTypes/configuration/component.xml
@@ -58,12 +58,12 @@
       <description>
         XXX
       </description>
-    </key> 
+    </key>
     <key name="char_encoding" datatype="string" required="no" default="raw">
       <description>
         XXX
       </description>
-    </key> 
+    </key>
   </sectiontype>
 
   <sectiontype name="feature" keytype="identifier" datatype=".Feature">
@@ -76,7 +76,7 @@
       </description>
     </key>
   </sectiontype>
-  
+
   <sectiontype name="contenttypes">
     <description format="plain">
       Section content types of an archetype
@@ -104,14 +104,14 @@
     </description>
     <section name="*" attribute="contenttypes" type="contenttypes"
        required="no" />
-       
+
     <key name="max_file_size" attribute="max_file_size" datatype="byte-size-in-mb"
          default="0" required="no" />
     <key name="max_image_dimension" attribute="max_image_dimension"
          datatype="image-dimension-or-no" default="no" required="no" />
     <key name="allow_document_upload" attribute="allow_document_upload"
-         datatype="boolean" default="yes" required="no" /> 
-    
+         datatype="boolean" default="yes" required="no" />
+
   </sectiontype>
 
   <sectiontype name="pil_config" attribute="pil_config" keytype="identifier">
diff --git a/Products/ATContentTypes/configuration/config.py b/Products/ATContentTypes/configuration/config.py
index 7aa89a7..9a380d0 100644
--- a/Products/ATContentTypes/configuration/config.py
+++ b/Products/ATContentTypes/configuration/config.py
@@ -1,8 +1,10 @@
-import os
-
-from ZConfig.loader import ConfigLoader
+# -*- coding: utf-8 -*-
 from Globals import INSTANCE_HOME
 from Products.ATContentTypes.configuration.schema import atctSchema
+from ZConfig.loader import ConfigLoader
+
+import os
+
 
 # directories
 INSTANCE_ETC = os.path.join(INSTANCE_HOME, 'etc')
@@ -39,11 +41,11 @@ def loadConfig(files, schema=atctSchema, overwrite=False):
     if not isinstance(files, (tuple, list)):
         files = (files, )
     if zconf is not None and not overwrite:
-        raise RuntimeError, 'Configuration is already loaded'
+        raise RuntimeError('Configuration is already loaded')
     for file in files:
         if file is not None:
             if not os.path.exists(file):
-                raise RuntimeError, '%s does not exist' % file
+                raise RuntimeError('%s does not exist' % file)
             conf_file = file
             zconf, handler = ConfigLoader(schema).loadURL(conf_file)
             break
diff --git a/Products/ATContentTypes/configuration/datatype.py b/Products/ATContentTypes/configuration/datatype.py
index 0d16452..6c4d776 100644
--- a/Products/ATContentTypes/configuration/datatype.py
+++ b/Products/ATContentTypes/configuration/datatype.py
@@ -1,15 +1,17 @@
-from Products.CMFCore import permissions as CMFCorePermissions
+# -*- coding: utf-8 -*-
 from AccessControl import Permissions as ZopePermissions
+from Products.CMFCore import permissions as CMFCorePermissions
 from ZConfig.datatypes import IdentifierConversion
 from ZConfig.datatypes import stock_datatypes
 
+
 _marker = object()
 
 
 def _getValueFromModule(module, key):
     var = getattr(module, key, _marker)
     if key is _marker:
-        raise ValueError, "%s doesn't have an attribute %s" % (module, key)
+        raise ValueError("%s doesn't have an attribute %s" % (module, key))
     return var
 
 
@@ -19,8 +21,8 @@ def _getValueFromDottedName(dotted_name):
     key = parts[-1]
     try:
         module = __import__(module_name, globals(), locals(), [key])
-    except ImportError, msg:
-        raise ValueError, str(msg)
+    except ImportError as msg:
+        raise ValueError(str(msg))
     return _getValueFromModule(module, key)
 
 
@@ -39,8 +41,8 @@ def permission_handler(value):
     else:
         permission = _getValueFromDottedName(value)
     if not isinstance(permission, basestring):
-        raise ValueError, 'Permission %s is not a string: %s' % (permission,
-                                                                 type(permission))
+        raise ValueError('Permission %s is not a string: %s' % (
+            permission, type(permission)))
     return permission
 
 
@@ -66,7 +68,7 @@ def image_dimension(value):
     Splits a value of "200, 400" into two ints of (200, 400)
     """
     if value.count(',') != 1:
-        raise ValueError, "Width and height must be seperated by a comma"
+        raise ValueError("Width and height must be seperated by a comma")
     w, h = value.split(',')
     w = int(w)
     h = int(h)
@@ -97,8 +99,7 @@ def pil_algo(value):
     value = value.upper()
     available = ('NEAREST', 'BILINEAR', 'BICUBIC', 'ANTIALIAS')
     if value not in available:
-        raise ValueError, "unknown algo %s" % value
-    import PIL.Image
+        raise ValueError("unknown algo %s" % value)
     return getattr(PIL.Image, value)
 
 
@@ -108,7 +109,7 @@ class BaseFactory(object):
 
     def __init__(self, section):
         self.name = section.getSectionName()
-        #self._parsed = False
+        # self._parsed = False
         self._section = section
         self._names = {}
         self._parse()
@@ -137,7 +138,8 @@ def _parse(self):
         self.set('enable', sec.enable)
         cfg = {}
         for id in ('char_encoding', 'drop_empty_paras', 'drop_font_tags',
-                   'indent_spaces', 'input_xml', 'output_xhtml', 'quiet', 'show_warnings',
+                   'indent_spaces', 'input_xml', 'output_xhtml', 'quiet',
+                   'show_warnings',
                    'tab_size', 'word_2000', 'wrap'):
             cfg[id] = getattr(sec, id)
         self.set('options', cfg)
@@ -159,7 +161,7 @@ def _parse(self):
             default = ct.default_content_type
 
             if default not in allowed:
-                raise ValueError, "Default %s is not in %s" % (default, ct)
+                raise ValueError("Default %s is not in %s" % (default, ct))
 
             self.set('default_content_type', default)
             self.set('allowed_content_types', allowed)
diff --git a/Products/ATContentTypes/configuration/schema.py b/Products/ATContentTypes/configuration/schema.py
index 16cc5c1..09b5174 100644
--- a/Products/ATContentTypes/configuration/schema.py
+++ b/Products/ATContentTypes/configuration/schema.py
@@ -1,8 +1,10 @@
-import os
-
+# -*- coding: utf-8 -*-
+from Products.ATContentTypes.configuration import datatype
 from ZConfig.datatypes import Registry
 from ZConfig.loader import SchemaLoader
-from Products.ATContentTypes.configuration import datatype
+
+import os
+
 
 # schema file
 DIR = os.path.dirname(os.path.abspath(__file__))
@@ -37,7 +39,7 @@ def loadSchema(file, registry=atctRegistry, overwrite=False):
     """
     global atctSchema
     if atctSchema is not None and not overwrite:
-        raise RuntimeError, 'Schema is already loaded'
+        raise RuntimeError('Schema is already loaded')
     schemaLoader = SchemaLoader(registry=registry)
     atctSchema = schemaLoader.loadURL(file)
     return atctSchema
diff --git a/Products/ATContentTypes/content/__init__.py b/Products/ATContentTypes/content/__init__.py
index 61a88cd..d637478 100644
--- a/Products/ATContentTypes/content/__init__.py
+++ b/Products/ATContentTypes/content/__init__.py
@@ -1,8 +1,9 @@
-import Products.ATContentTypes.content.link
-import Products.ATContentTypes.content.image
-import Products.ATContentTypes.content.document
-import Products.ATContentTypes.content.file
-import Products.ATContentTypes.content.event
-import Products.ATContentTypes.content.newsitem
-import Products.ATContentTypes.content.folder
-import Products.ATContentTypes.content.topic
+# -*- coding: utf-8 -*-
+import Products.ATContentTypes.content.link  # noqa
+import Products.ATContentTypes.content.image  # noqa
+import Products.ATContentTypes.content.document  # noqa
+import Products.ATContentTypes.content.file  # noqa
+import Products.ATContentTypes.content.event  # noqa
+import Products.ATContentTypes.content.newsitem  # noqa
+import Products.ATContentTypes.content.folder  # noqa
+import Products.ATContentTypes.content.topic  # noqa
diff --git a/Products/ATContentTypes/content/base.py b/Products/ATContentTypes/content/base.py
index d679c35..4509824 100644
--- a/Products/ATContentTypes/content/base.py
+++ b/Products/ATContentTypes/content/base.py
@@ -1,11 +1,34 @@
+# -*- coding: utf-8 -*-
+from AccessControl import ClassSecurityInfo
+from Acquisition import aq_base
+from Acquisition import aq_inner
+from Acquisition import aq_parent
+from App.class_init import InitializeClass
+from ComputedAttribute import ComputedAttribute
+from OFS.ObjectManager import REPLACEABLE
+from plone.i18n.normalizer.interfaces import IUserPreferredFileNameNormalizer
+from Products.ATContentTypes.config import HAS_LINGUA_PLONE
+from Products.ATContentTypes.config import MIME_ALIAS
+from Products.ATContentTypes.content.schemata import ATContentTypeSchema
+from Products.ATContentTypes.interfaces import IATContentType
+from Products.ATContentTypes.interfaces import ISelectableConstrainTypes
+from Products.ATContentTypes.lib.constraintypes import ConstrainTypesMixin
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFCore.permissions import View
+from Products.CMFCore.utils import getToolByName
+from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin
+from webdav.Lockable import ResourceLockedError
+from webdav.NullResource import NullResource
+from webdav.Resource import Resource as WebdavResoure
+from ZODB.POSException import ConflictError
+from zope.interface import implements
+
+import logging
 import os
 import posixpath
-import logging
 import transaction
 
-from zope.interface import implements
 
-from Products.ATContentTypes.config import HAS_LINGUA_PLONE
 if HAS_LINGUA_PLONE:
     from Products.LinguaPlone.public import BaseContent
     from Products.LinguaPlone.public import BaseFolder
@@ -19,31 +42,6 @@
     from Products.Archetypes.atapi import BaseBTreeFolder
     from Products.Archetypes.atapi import registerType
 
-from AccessControl import ClassSecurityInfo
-from ComputedAttribute import ComputedAttribute
-from App.class_init import InitializeClass
-from Acquisition import aq_base
-from Acquisition import aq_inner
-from Acquisition import aq_parent
-from OFS.ObjectManager import REPLACEABLE
-from webdav.Lockable import ResourceLockedError
-from webdav.NullResource import NullResource
-from ZODB.POSException import ConflictError
-from webdav.Resource import Resource as WebdavResoure
-
-from Products.CMFCore.permissions import View
-from Products.CMFCore.permissions import ModifyPortalContent
-from Products.CMFCore.utils import getToolByName
-from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin
-
-from Products.ATContentTypes.config import MIME_ALIAS
-from Products.ATContentTypes.lib.constraintypes import ConstrainTypesMixin
-from Products.ATContentTypes.interfaces import IATContentType
-from Products.ATContentTypes.interfaces import ISelectableConstrainTypes
-from Products.ATContentTypes.content.schemata import ATContentTypeSchema
-
-from plone.i18n.normalizer.interfaces import IUserPreferredFileNameNormalizer
-
 DEBUG = True
 LOG = logging.getLogger('ATCT')
 
@@ -109,9 +107,7 @@ class ATCTMixin(BrowserDefaultMixin):
 
     security = ClassSecurityInfo()
 
-    security.declareProtected(ModifyPortalContent,
-                              'initializeArchetype')
-
+    @security.protected(ModifyPortalContent)
     def initializeArchetype(self, **kwargs):
         """called by the generated add* factory in types tool
 
@@ -130,16 +126,16 @@ def initializeArchetype(self, **kwargs):
                 self.copyLayoutFromParent()
         except ConflictError:
             raise
-        except Exception, msg:
+        except Exception as msg:
             LOG.warn('Exception in initializeArchetype', exc_info=True)
             if DEBUG and str(msg) not in ('SESSION',):
                 # debug code
                 raise
 
-    security.declarePrivate('copyLayoutFromParent')
-
+    @security.private
     def copyLayoutFromParent(self):
-        """Copies the layout from the parent object if it's of the same type."""
+        """Copies the layout from the parent object if it's of the same type.
+        """
         parent = aq_parent(aq_inner(self))
         if parent is not None:
             # Only set the layout if we are the same type as out parent object
@@ -152,8 +148,7 @@ def copyLayoutFromParent(self):
                 if parent_layout in [l[0] for l in self.getAvailableLayouts()]:
                     self.setLayout(parent_layout)
 
-    security.declareProtected(ModifyPortalContent, 'edit')
-
+    @security.protected(ModifyPortalContent)
     def edit(self, *args, **kwargs):
         """Reimplementing edit() to have a compatibility method for the old
         cmf edit() method
@@ -177,8 +172,7 @@ def edit(self, *args, **kwargs):
             kwargs['_initializing_'] = True
         return self.update(**kwargs)
 
-    security.declarePrivate('cmf_edit')
-
+    @security.private
     def cmf_edit(self, *args, **kwargs):
         """Overwrite this method to make AT compatible with the crappy
         CMF edit()
@@ -194,8 +188,7 @@ def exclude_from_nav(self):
         else:
             return False
 
-    security.declareProtected(View, 'get_size')
-
+    @security.protected(View)
     def get_size(self):
         """ZMI / Plone get size method
         """
@@ -212,8 +205,7 @@ class ATCTContent(ATCTMixin, BaseContent):
 
     security = ClassSecurityInfo()
 
-    security.declarePrivate('manage_afterPUT')
-
+    @security.private
     def manage_afterPUT(self, data, marshall_data, file, context, mimetype,
                         filename, REQUEST, RESPONSE):
         """After webdav/ftp PUT method
@@ -249,8 +241,7 @@ class ATCTFileContent(ATCTContent):
 
     security = ClassSecurityInfo()
 
-    security.declareProtected(View, 'download')
-
+    @security.protected(View)
     def download(self, REQUEST=None, RESPONSE=None):
         """Download the file (use default index_html)
         """
@@ -261,8 +252,7 @@ def download(self, REQUEST=None, RESPONSE=None):
         field = self.getPrimaryField()
         return field.download(self, REQUEST, RESPONSE)
 
-    security.declareProtected(View, 'index_html')
-
+    @security.protected(View)
     def index_html(self, REQUEST=None, RESPONSE=None):
         """Make it directly viewable when entering the objects URL
         """
@@ -276,8 +266,7 @@ def index_html(self, REQUEST=None, RESPONSE=None):
             return data.index_html(REQUEST, RESPONSE)
         # XXX what should be returned if no data is present?
 
-    security.declareProtected(View, 'get_data')
-
+    @security.protected(View)
     def get_data(self):
         """CMF compatibility method
         """
@@ -286,25 +275,23 @@ def get_data(self):
 
     data = ComputedAttribute(get_data, 1)
 
-    security.declareProtected(View, 'size')
-
+    @security.protected(View)
     def size(self):
         """Get size (image_view.pt)
         """
         return self.get_size()
 
-    security.declareProtected(View, 'get_content_type')
-
+    @security.protected(View)
     def get_content_type(self):
         """CMF compatibility method
         """
         f = self.getPrimaryField().getAccessor(self)()
-        return f and f.getContentType() or 'text/plain'  # 'application/octet-stream'
+        # 'application/octet-stream'
+        return f and f.getContentType() or 'text/plain'
 
     content_type = ComputedAttribute(get_content_type, 1)
 
-    security.declarePrivate('update_data')
-
+    @security.private
     def update_data(self, data, content_type=None, size='ignored'):
         kwargs = {}
         if content_type is not None:
@@ -312,15 +299,14 @@ def update_data(self, data, content_type=None, size='ignored'):
         mutator = self.getPrimaryField().getMutator(self)
         mutator(data, **kwargs)
 
-    security.declareProtected(ModifyPortalContent, 'manage_edit')
-
+    @security.protected(ModifyPortalContent)
     def manage_edit(self, title, content_type, precondition='',
                     filedata=None, REQUEST=None):
         """
         Changes the title and content type attributes of the File or Image.
         """
         if self.wl_isLocked():
-            raise ResourceLockedError, "File is locked via WebDAV"
+            raise ResourceLockedError("File is locked via WebDAV")
 
         self.setTitle(title)
         if filedata is not None:
@@ -340,7 +326,10 @@ def _cleanupFilename(self, filename, request=None):
         return filename and filename.encode(encoding) or None
 
     def _setATCTFileContent(self, value, **kwargs):
-        """Set ID based on name of uploaded file, Title, or possibly other conditions."""
+        """Set ID based on name of uploaded file, Title.
+
+        Or possibly other conditions.
+        """
         field = self.getPrimaryField()
         # set first then get the filename
         field.set(self, value, **kwargs)  # set is ok
@@ -365,23 +354,24 @@ def _setATCTFileContent(self, value, **kwargs):
                 # fails when the type is created using portal_factory.
                 transaction.savepoint(optimistic=True)
                 self.setId(clean_filename)
-            # Else, fall through to BaseObject._renameAfterCreation(),
-            # which Archetypes calls after all the fields have been set. It will
+            # Else, fall through to BaseObject._renameAfterCreation(), which
+            # Archetypes calls after all the fields have been set.  It will
             # rename me based on my Title iff my ID looks autogenerated (which
             # it does if we don't setId() here).
 
-    security.declarePrivate('_should_set_id_to_filename')
-
+    @security.private
     def _should_set_id_to_filename(self, filename, title):
-        """Given the name of the uploaded file and my title, return whether the filename should be used as my ID.
+        """Should the filename should be used as my ID?
+
+        Given the name of the uploaded file and my title, return whether
+        the filename should be used as my ID.
 
         Default implementation: if the filename changed, say that we should set
         my ID to it.
         """
         return filename != self.getId()
 
-    security.declareProtected(View, 'post_validate')
-
+    @security.protected(View)
     def post_validate(self, REQUEST=None, errors=None):
         """Validates upload file and id
         """
@@ -403,7 +393,8 @@ def post_validate(self, REQUEST=None, errors=None):
             # former method
             upload.seek(0)
 
-        if not used_id or not self._should_set_id_to_filename(filename, REQUEST.form.get('title')):
+        if not used_id or not self._should_set_id_to_filename(
+                filename, REQUEST.form.get('title')):
             # Set ID in whatever way the base classes usually do.
             return
 
@@ -420,8 +411,7 @@ def post_validate(self, REQUEST=None, errors=None):
         elif check_id:
             errors[f_name] = check_id
 
-    security.declarePrivate('manage_afterPUT')
-
+    @security.private
     def manage_afterPUT(self, data, marshall_data, file, context, mimetype,
                         filename, REQUEST, RESPONSE):
         """After webdav/ftp PUT method
@@ -457,8 +447,7 @@ class ATCTFolder(ATCTMixin, BaseFolder):
 
     security = ClassSecurityInfo()
 
-    security.declareProtected(View, 'get_size')
-
+    @security.protected(View)
     def get_size(self):
         """Returns 1 as folders have no size."""
         return 1
@@ -478,14 +467,12 @@ def __browser_default__(self, request):
         of index_html """
         return getToolByName(self, 'plone_utils').browserDefault(self)
 
-    security.declareProtected(View, 'get_size')
-
+    @security.protected(View)
     def get_size(self):
         """Returns 1 as folders have no size."""
         return 1
 
-    security.declarePrivate('manage_afterMKCOL')
-
+    @security.private
     def manage_afterMKCOL(self, id, result, REQUEST=None, RESPONSE=None):
         """After MKCOL handler
 
@@ -506,8 +493,7 @@ def manage_afterMKCOL(self, id, result, REQUEST=None, RESPONSE=None):
                     id = posixpath.basename(path_info)
             new.update(title=id)
 
-    security.declareProtected(View, 'HEAD')
-
+    @security.protected(View)
     def HEAD(self, REQUEST, RESPONSE):
         """HTTP HEAD handler"""
         return WebdavResoure.HEAD(self, REQUEST, RESPONSE)
@@ -520,8 +506,7 @@ class ATCTOrderedFolder(ATCTFolderMixin, OrderedBaseFolder):
 
     security = ClassSecurityInfo()
 
-    security.declareProtected(View, 'index_html')
-
+    @security.protected(View)
     def index_html(self, REQUEST=None, RESPONSE=None):
         """Special case index_html"""
         request = REQUEST
@@ -537,7 +522,7 @@ def index_html(self, REQUEST=None, RESPONSE=None):
                     # Do nothing, let it go and acquire.
                     pass
                 else:
-                    raise AttributeError, 'index_html'
+                    raise AttributeError('index_html')
         # Acquire from parent
         _target = aq_parent(aq_inner(self)).aq_acquire('index_html')
         return ReplaceableWrapper(aq_base(_target).__of__(self))
@@ -563,8 +548,7 @@ class ATCTBTreeFolder(ATCTFolderMixin, BaseBTreeFolder):
 
     security = ClassSecurityInfo()
 
-    security.declareProtected(View, 'index_html')
-
+    @security.protected(View)
     def index_html(self, REQUEST=None, RESPONSE=None):
         """
         BTree folders don't store objects as attributes, the
diff --git a/Products/ATContentTypes/content/document.py b/Products/ATContentTypes/content/document.py
index 69f0a59..2167138 100644
--- a/Products/ATContentTypes/content/document.py
+++ b/Products/ATContentTypes/content/document.py
@@ -1,65 +1,65 @@
-from types import TupleType
-
-from zope.interface import implements
-
-from ZPublisher.HTTPRequest import HTTPRequest
-from Products.CMFCore.permissions import View
-from Products.CMFCore.permissions import ModifyPortalContent
-from Products.CMFCore.utils import getToolByName
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from ComputedAttribute import ComputedAttribute
-
 from lxml import etree
-from Products.GenericSetup.interfaces import IDAVAware
-
-from Products.Archetypes.atapi import Schema
-from Products.Archetypes.atapi import TextField
+from Products.Archetypes.atapi import AnnotationStorage
 from Products.Archetypes.atapi import BooleanField
-from Products.Archetypes.atapi import TinyMCEWidget
 from Products.Archetypes.atapi import BooleanWidget
 from Products.Archetypes.atapi import RFC822Marshaller
-from Products.Archetypes.atapi import AnnotationStorage
-
-from Products.ATContentTypes.configuration import zconf
+from Products.Archetypes.atapi import Schema
+from Products.Archetypes.atapi import TextField
+from Products.Archetypes.atapi import TinyMCEWidget
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.config import PROJECTNAME
-from Products.ATContentTypes.content.base import registerATCT
+from Products.ATContentTypes.configuration import zconf
 from Products.ATContentTypes.content.base import ATCTContent
+from Products.ATContentTypes.content.base import registerATCT
 from Products.ATContentTypes.content.base import translateMimetypeAlias
 from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 from Products.ATContentTypes.content.schemata import finalizeATCTSchema
-from Products.ATContentTypes.lib.historyaware import HistoryAwareMixin
 from Products.ATContentTypes.interfaces import IATDocument
+from Products.ATContentTypes.lib.historyaware import HistoryAwareMixin
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFCore.permissions import View
+from Products.CMFCore.utils import getToolByName
+from Products.GenericSetup.interfaces import IDAVAware
+from types import TupleType
+from zope.interface import implements
+from ZPublisher.HTTPRequest import HTTPRequest
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 ATDocumentSchema = ATContentTypeSchema.copy() + Schema((
-    TextField('text',
-              required=False,
-              searchable=True,
-              primary=True,
-              storage=AnnotationStorage(migrate=True),
-              validators=('isTidyHtmlWithCleanup',),
-              # validators=('isTidyHtml',),
-              default_output_type='text/x-html-safe',
-              widget=TinyMCEWidget(
-                  description='',
-                  label=_(u'label_body_text', default=u'Body Text'),
-                  rows=25,
-                  allow_file_upload=zconf.ATDocument.allow_document_upload),
-              ),
-
-    BooleanField('tableContents',
-                 required=False,
-                 languageIndependent=True,
-                 widget=BooleanWidget(
-                     label=_(
-                         u'help_enable_table_of_contents',
-                         default=u'Table of contents'),
-                     description=_(
-                         u'help_enable_table_of_contents_description',
-                         default=u'If selected, this will show a table of contents at the top of the page.')
-                 ),
-                 )),
+    TextField(
+        'text',
+        required=False,
+        searchable=True,
+        primary=True,
+        storage=AnnotationStorage(migrate=True),
+        validators=('isTidyHtmlWithCleanup',),
+        # validators=('isTidyHtml',),
+        default_output_type='text/x-html-safe',
+        widget=TinyMCEWidget(
+            description='',
+            label=_(u'label_body_text', default=u'Body Text'),
+            rows=25,
+            allow_file_upload=zconf.ATDocument.allow_document_upload),
+    ),
+
+    BooleanField(
+        'tableContents',
+        required=False,
+        languageIndependent=True,
+        widget=BooleanWidget(
+            label=_(
+                u'help_enable_table_of_contents',
+                default=u'Table of contents'),
+            description=_(
+                u'help_enable_table_of_contents_description',
+                default=u'If selected, this will show a table of contents '
+                u'at the top of the page.')
+        ),
+    )),
+
     marshall=RFC822Marshaller()
 )
 
@@ -78,29 +78,26 @@ class ATDocumentBase(ATCTContent, HistoryAwareMixin):
     security = ClassSecurityInfo()
     cmf_edit_kws = ('text_format',)
 
-    security.declareProtected(View, 'CookedBody')
-
+    @security.protected(View)
     def CookedBody(self, stx_level='ignored'):
         """CMF compatibility method
         """
         return self.getText()
 
-    security.declareProtected(ModifyPortalContent, 'EditableBody')
-
+    @security.protected(ModifyPortalContent)
     def EditableBody(self):
         """CMF compatibility method
         """
         return self.getRawText()
 
-    security.declareProtected(ModifyPortalContent, 'setFormat')
-
+    @security.protected(ModifyPortalContent)
     def setFormat(self, value):
         """CMF compatibility method
 
         The default mutator is overwritten to:
 
-          o add a conversion from stupid CMF content type (e.g. structured-text)
-            to real mime types used by MTR.
+          o add a conversion from stupid CMF content type
+            (e.g. structured-text) to real mime types used by MTR.
 
           o Set format to default format if value is empty
 
@@ -111,8 +108,7 @@ def setFormat(self, value):
             value = translateMimetypeAlias(value)
         ATCTContent.setFormat(self, value)
 
-    security.declareProtected(ModifyPortalContent, 'setText')
-
+    @security.protected(ModifyPortalContent)
     def setText(self, value, **kwargs):
         """Body text mutator
 
@@ -137,8 +133,7 @@ def setText(self, value, **kwargs):
 
     text_format = ComputedAttribute(ATCTContent.getContentType, 1)
 
-    security.declarePrivate('guessMimetypeOfText')
-
+    @security.private
     def guessMimetypeOfText(self):
         """For ftp/webdav upload: get the mimetype from the id and data
         """
@@ -153,16 +148,16 @@ def guessMimetypeOfText(self):
             # no extension
             mimetype = mtr.classify(data)
 
-        if not mimetype or (type(mimetype) is TupleType and not len(mimetype)):
+        if not mimetype or (
+                isinstance(mimetype, TupleType) and not len(mimetype)):
             # nothing found
             return None
 
-        if type(mimetype) is TupleType and len(mimetype):
+        if isinstance(mimetype, TupleType) and len(mimetype):
             mimetype = mimetype[0]
         return mimetype.normalized()
 
-    security.declarePrivate('getTidyOutput')
-
+    @security.private
     def getTidyOutput(self, field):
         """Get the tidied output for a specific field from the request
         if available
@@ -180,8 +175,7 @@ def _notifyOfCopyTo(self, container, op=0):
         self._v_renamed = 1
         return ATCTContent._notifyOfCopyTo(self, container, op=op)
 
-    security.declarePrivate('manage_afterAdd')
-
+    @security.private
     def manage_afterAdd(self, item, container):
         """Fix text when created througt webdav
         Guess the right mimetype from the id/data
@@ -202,15 +196,13 @@ def manage_afterAdd(self, item, container):
             elif tidyOutput:
                 field.set(self, tidyOutput)  # set is ok
 
-    security.declarePrivate('cmf_edit')
-
+    @security.private
     def cmf_edit(self, text_format, text, file='', safety_belt='', **kwargs):
         assert file == '', 'file currently not supported'  # XXX
         self.setText(text, mimetype=translateMimetypeAlias(text_format))
         self.update(**kwargs)
 
-    security.declarePrivate('manage_afterPUT')
-
+    @security.private
     def manage_afterPUT(self, data, marshall_data, file, context, mimetype,
                         filename, REQUEST, RESPONSE):
         """After webdav/ftp PUT method
diff --git a/Products/ATContentTypes/content/event.py b/Products/ATContentTypes/content/event.py
index 0e0ee68..9886139 100644
--- a/Products/ATContentTypes/content/event.py
+++ b/Products/ATContentTypes/content/event.py
@@ -1,134 +1,152 @@
-from zope.interface import implements
-
-from Products.CMFCore.permissions import ModifyPortalContent, View
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
-from DateTime import DateTime
 from ComputedAttribute import ComputedAttribute
-
-from Products.Archetypes.atapi import Schema
+from DateTime import DateTime
+from Products.Archetypes.atapi import AnnotationStorage
 from Products.Archetypes.atapi import DateTimeField
+from Products.Archetypes.atapi import DatetimeWidget
 from Products.Archetypes.atapi import LinesField
+from Products.Archetypes.atapi import LinesWidget
+from Products.Archetypes.atapi import RFC822Marshaller
+from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import StringField
+from Products.Archetypes.atapi import StringWidget
 from Products.Archetypes.atapi import TextField
-from Products.Archetypes.atapi import DatetimeWidget
-from Products.Archetypes.atapi import LinesWidget
 from Products.Archetypes.atapi import TinyMCEWidget
-from Products.Archetypes.atapi import StringWidget
-from Products.Archetypes.atapi import RFC822Marshaller
-from Products.Archetypes.atapi import AnnotationStorage
-
-from Products.ATContentTypes.configuration import zconf
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.config import PROJECTNAME
-from Products.ATContentTypes.content.base import registerATCT
+from Products.ATContentTypes.configuration import zconf
 from Products.ATContentTypes.content.base import ATCTContent
+from Products.ATContentTypes.content.base import registerATCT
 from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 from Products.ATContentTypes.content.schemata import finalizeATCTSchema
 from Products.ATContentTypes.interfaces import IATEvent
 from Products.ATContentTypes.lib.calendarsupport import CalendarSupportMixin
 from Products.ATContentTypes.lib.historyaware import HistoryAwareMixin
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFCore.permissions import View
+from zope.interface import implements
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 ATEventSchema = ATContentTypeSchema.copy() + Schema((
-    StringField('location',
-                searchable=True,
-                write_permission=ModifyPortalContent,
-                widget=StringWidget(
-                    description='',
-                    label=_(u'label_event_location', default=u'Event Location')
-                )),
-
-    DateTimeField('startDate',
-                  required=True,
-                  searchable=False,
-                  accessor='start',
-                  write_permission=ModifyPortalContent,
-                  default_method=DateTime,
-                  languageIndependent=True,
-                  widget=DatetimeWidget(
-                      description='',
-                      label=_(u'label_event_start', default=u'Event Starts')
-                  )),
-
-    DateTimeField('endDate',
-                  required=True,
-                  searchable=False,
-                  accessor='end',
-                  write_permission=ModifyPortalContent,
-                  default_method=DateTime,
-                  languageIndependent=True,
-                  widget=DatetimeWidget(
-                      description='',
-                      label=_(u'label_event_end', default=u'Event Ends')
-                  )),
-
-    TextField('text',
-              required=False,
-              searchable=True,
-              primary=True,
-              storage=AnnotationStorage(migrate=True),
-              validators=('isTidyHtmlWithCleanup',),
-              default_output_type='text/x-html-safe',
-              widget=TinyMCEWidget(
-                  description='',
-                  label=_(u'label_event_announcement',
-                          default=u'Event body text'),
-                  rows=25,
-                  allow_file_upload=zconf.ATDocument.allow_document_upload)),
-
-    LinesField('attendees',
-               languageIndependent=True,
-               searchable=True,
-               write_permission=ModifyPortalContent,
-               widget=LinesWidget(
-                   description='',
-                   label=_(u'label_event_attendees', default=u'Attendees')
-               )),
-
-    StringField('eventUrl',
-                required=False,
-                searchable=True,
-                accessor='event_url',
-                write_permission=ModifyPortalContent,
-                validators=('isURL',),
-                widget=StringWidget(
-                    description=_(u'help_event_url',
-                                  default=u"Web address with more info about the event. "
-                                  "Add http:// for external links."),
-                    label=_(u'label_event_url', default=u'Event URL')
-                )),
-
-    StringField('contactName',
-                required=False,
-                searchable=True,
-                accessor='contact_name',
-                write_permission=ModifyPortalContent,
-                widget=StringWidget(
-                    description='',
-                    label=_(u'label_contact_name', default=u'Contact Name')
-                )),
-
-    StringField('contactEmail',
-                required=False,
-                searchable=True,
-                accessor='contact_email',
-                write_permission=ModifyPortalContent,
-                validators=('isEmail',),
-                widget=StringWidget(
-                    description='',
-                    label=_(u'label_contact_email', default=u'Contact E-mail')
-                )),
-
-    StringField('contactPhone',
-                required=False,
-                searchable=True,
-                accessor='contact_phone',
-                write_permission=ModifyPortalContent,
-                validators=(),
-                widget=StringWidget(
-                    description='',
-                    label=_(u'label_contact_phone', default=u'Contact Phone')
-                )),
+    StringField(
+        'location',
+        searchable=True,
+        write_permission=ModifyPortalContent,
+        widget=StringWidget(
+            description='',
+            label=_(u'label_event_location', default=u'Event Location')
+        )
+    ),
+
+    DateTimeField(
+        'startDate',
+        required=True,
+        searchable=False,
+        accessor='start',
+        write_permission=ModifyPortalContent,
+        default_method=DateTime,
+        languageIndependent=True,
+        widget=DatetimeWidget(
+            description='',
+            label=_(u'label_event_start', default=u'Event Starts')
+        )
+    ),
+
+    DateTimeField(
+        'endDate',
+        required=True,
+        searchable=False,
+        accessor='end',
+        write_permission=ModifyPortalContent,
+        default_method=DateTime,
+        languageIndependent=True,
+        widget=DatetimeWidget(
+            description='',
+            label=_(u'label_event_end', default=u'Event Ends')
+        )
+    ),
+
+    TextField(
+        'text',
+        required=False,
+        searchable=True,
+        primary=True,
+        storage=AnnotationStorage(migrate=True),
+        validators=('isTidyHtmlWithCleanup',),
+        default_output_type='text/x-html-safe',
+        widget=TinyMCEWidget(
+            description='',
+            label=_(u'label_event_announcement',
+                    default=u'Event body text'),
+            rows=25,
+            allow_file_upload=zconf.ATDocument.allow_document_upload)
+    ),
+
+    LinesField(
+        'attendees',
+        languageIndependent=True,
+        searchable=True,
+        write_permission=ModifyPortalContent,
+        widget=LinesWidget(
+            description='',
+            label=_(u'label_event_attendees', default=u'Attendees')
+        )
+    ),
+
+    StringField(
+        'eventUrl',
+        required=False,
+        searchable=True,
+        accessor='event_url',
+        write_permission=ModifyPortalContent,
+        validators=('isURL',),
+        widget=StringWidget(
+            description=_(
+                u'help_event_url',
+                default=u"Web address with more info about the event. "
+                u"Add http:// for external links."),
+            label=_(u'label_event_url', default=u'Event URL')
+        )
+    ),
+
+    StringField(
+        'contactName',
+        required=False,
+        searchable=True,
+        accessor='contact_name',
+        write_permission=ModifyPortalContent,
+        widget=StringWidget(
+            description='',
+            label=_(u'label_contact_name', default=u'Contact Name')
+        )
+    ),
+
+    StringField(
+        'contactEmail',
+        required=False,
+        searchable=True,
+        accessor='contact_email',
+        write_permission=ModifyPortalContent,
+        validators=('isEmail',),
+        widget=StringWidget(
+            description='',
+            label=_(u'label_contact_email', default=u'Contact E-mail')
+        )
+    ),
+
+    StringField(
+        'contactPhone',
+        required=False,
+        searchable=True,
+        accessor='contact_phone',
+        write_permission=ModifyPortalContent,
+        validators=(),
+        widget=StringWidget(
+            description='',
+            label=_(u'label_contact_phone', default=u'Contact Phone')
+        )
+    ),
 ), marshall=RFC822Marshaller()
 )
 
@@ -147,7 +165,10 @@
 
 
 class ATEvent(ATCTContent, CalendarSupportMixin, HistoryAwareMixin):
-    """Information about an upcoming event, which can be displayed in the calendar."""
+    """Information about an upcoming event.
+
+    This can be displayed in the calendar.
+    """
 
     schema = ATEventSchema
 
@@ -166,8 +187,7 @@ class ATEvent(ATCTContent, CalendarSupportMixin, HistoryAwareMixin):
 
     security = ClassSecurityInfo()
 
-    security.declarePrivate('cmf_edit')
-
+    @security.private
     def cmf_edit(
             self, title=None, description=None, effectiveDay=None,
             effectiveMo=None, effectiveYear=None, expirationDay=None,
@@ -178,8 +198,9 @@ def cmf_edit(
             event_url=None):
 
         if effectiveDay and effectiveMo and effectiveYear and start_time:
-            sdate = '%s-%s-%s %s %s' % (effectiveDay, effectiveMo, effectiveYear,
-                                        start_time, startAMPM)
+            sdate = '%s-%s-%s %s %s' % (
+                effectiveDay, effectiveMo, effectiveYear,
+                start_time, startAMPM)
         elif start_date:
             if not start_time:
                 start_time = '00:00:00'
@@ -208,8 +229,7 @@ def cmf_edit(
             contactName=contact_name, contactEmail=contact_email,
             contactPhone=contact_phone, eventUrl=event_url)
 
-    security.declareProtected(View, 'post_validate')
-
+    @security.protected(View)
     def post_validate(self, REQUEST=None, errors=None):
         """Validates start and end date
 
@@ -226,16 +246,18 @@ def post_validate(self, REQUEST=None, errors=None):
             try:
                 end = DateTime(rendDate)
             except:
-                errors['endDate'] = _(u'error_invalid_end_date',
-                                      default=u'End date is not valid.')
+                errors['endDate'] = _(
+                    u'error_invalid_end_date',
+                    default=u'End date is not valid.')
         else:
             end = self.end()
         if rstartDate:
             try:
                 start = DateTime(rstartDate)
             except:
-                errors['startDate'] = _(u'error_invalid_start_date',
-                                        default=u'Start date is not valid.')
+                errors['startDate'] = _(
+                    u'error_invalid_start_date',
+                    default=u'Start date is not valid.')
         else:
             start = self.start()
 
@@ -244,8 +266,9 @@ def post_validate(self, REQUEST=None, errors=None):
             return
 
         if start > end:
-            errors['endDate'] = _(u'error_end_must_be_after_start_date',
-                                  default=u'End date must be after start date.')
+            errors['endDate'] = _(
+                u'error_end_must_be_after_start_date',
+                default=u'End date must be after start date.')
 
     def _start_date(self):
         value = self['startDate']
@@ -295,8 +318,7 @@ def __cmp__(self, other):
     def __hash__(self):
         return hash((self.start_date, self.duration, self.title))
 
-    security.declareProtected(ModifyPortalContent, 'update')
-
+    @security.protected(ModifyPortalContent)
     def update(self, event=None, **kwargs):
         # Clashes with BaseObject.update, so
         # we handle gracefully
diff --git a/Products/ATContentTypes/content/favorite.py b/Products/ATContentTypes/content/favorite.py
index 9351266..1d0c274 100644
--- a/Products/ATContentTypes/content/favorite.py
+++ b/Products/ATContentTypes/content/favorite.py
@@ -1,11 +1,15 @@
+# -*- coding: utf-8 -*-
+from Products.ATContentTypes.content import link
+
 import logging
 
-from Products.ATContentTypes.content import link
 
 logger = logging.getLogger('ATContentTypes')
-logger.log(logging.INFO, 'Warning: You have content instances of the '
-           'ATFavorite type in your site. This type is no longer available. Please '
-           'remove all remaining instances of this type or migrate them to links.')
+
+logger.warn(
+    'You have content instances of the ATFavorite type in your site. '
+    'This type is no longer available. Please remove all remaining instances '
+    'of this type or migrate them to links.')
 
 
 class ATFavorite(link.ATLink):
diff --git a/Products/ATContentTypes/content/file.py b/Products/ATContentTypes/content/file.py
index 33aac19..6fa4a88 100644
--- a/Products/ATContentTypes/content/file.py
+++ b/Products/ATContentTypes/content/file.py
@@ -1,35 +1,32 @@
-import logging
-from urllib import quote
-
-from zope.interface import implements
-
-from Products.CMFCore.permissions import View
-from Products.CMFCore.permissions import ModifyPortalContent
-from Products.CMFCore.utils import getToolByName
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
-
-from Products.Archetypes.atapi import Schema
+from Products.Archetypes.atapi import AnnotationStorage
 from Products.Archetypes.atapi import FileField
 from Products.Archetypes.atapi import FileWidget
 from Products.Archetypes.atapi import PrimaryFieldMarshaller
-from Products.Archetypes.atapi import AnnotationStorage
+from Products.Archetypes.atapi import Schema
 from Products.Archetypes.BaseContent import BaseContent
-from Products.MimetypesRegistry.common import MimeTypeException
-
+from Products.ATContentTypes import ATCTMessageFactory as _
+from Products.ATContentTypes.config import ICONMAP
 from Products.ATContentTypes.config import PROJECTNAME
 from Products.ATContentTypes.configuration import zconf
-from Products.ATContentTypes.config import ICONMAP
-from Products.ATContentTypes.content.base import registerATCT
 from Products.ATContentTypes.content.base import ATCTFileContent
+from Products.ATContentTypes.content.base import registerATCT
 from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 from Products.ATContentTypes.content.schemata import finalizeATCTSchema
 from Products.ATContentTypes.interfaces import IATFile
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFCore.permissions import View
+from Products.CMFCore.utils import getToolByName
+from Products.MimetypesRegistry.common import MimeTypeException
+from Products.validation import V_REQUIRED
+from Products.validation.config import validation
+from Products.validation.validators.SupplValidators import MaxSizeValidator
+from urllib import quote
+from zope.interface import implements
 
-from Products.ATContentTypes import ATCTMessageFactory as _
+import logging
 
-from Products.validation.validators.SupplValidators import MaxSizeValidator
-from Products.validation.config import validation
-from Products.validation import V_REQUIRED
 
 LOG = logging.getLogger('ATCT')
 
@@ -81,8 +78,7 @@ class ATFile(ATCTFileContent):
 
     security = ClassSecurityInfo()
 
-    security.declareProtected(View, 'index_html')
-
+    @security.protected(View)
     def index_html(self, REQUEST=None, RESPONSE=None):
         """Download the file
         """
@@ -96,8 +92,7 @@ def index_html(self, REQUEST=None, RESPONSE=None):
         # this is a security risk (IE renders anything as HTML).
         return field.download(self)
 
-    security.declareProtected(ModifyPortalContent, 'setFile')
-
+    @security.protected(ModifyPortalContent)
     def setFile(self, value, **kwargs):
         """Set id to uploaded id
         """
@@ -108,8 +103,7 @@ def __str__(self):
         """
         return self.get_data()
 
-    security.declarePublic('getIcon')
-
+    @security.public
     def getIcon(self, relative_to_portal=0):
         """Calculate the icon using the mime type of the file
         """
@@ -132,7 +126,7 @@ def getIcon(self, relative_to_portal=0):
             mimetypeitem = None
             try:
                 mimetypeitem = mtr.lookup(contenttype)
-            except MimeTypeException, msg:
+            except MimeTypeException as msg:
                 LOG.error('MimeTypeException for %s. Error is: %s' %
                           (self.absolute_url(), str(msg)))
             if not mimetypeitem:
@@ -148,15 +142,13 @@ def getIcon(self, relative_to_portal=0):
                 res = res[1:]
             return res
 
-    security.declareProtected(View, 'icon')
-
+    @security.protected(View)
     def icon(self):
         """for ZMI
         """
         return self.getIcon()
 
-    security.declarePrivate('cmf_edit')
-
+    @security.private
     def cmf_edit(self, precondition='', file=None):
         if file is not None:
             self.setFile(file)
diff --git a/Products/ATContentTypes/content/folder.py b/Products/ATContentTypes/content/folder.py
index 7284839..d9425db 100644
--- a/Products/ATContentTypes/content/folder.py
+++ b/Products/ATContentTypes/content/folder.py
@@ -1,26 +1,24 @@
-from zope.interface import implements
-
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from OFS.interfaces import IOrderedContainer
-
+from plone.app.folder import folder
 from Products.ATContentTypes.config import PROJECTNAME
-from Products.ATContentTypes.content.base import registerATCT
-from Products.ATContentTypes.content.base import ATCTOrderedFolder
 from Products.ATContentTypes.content.base import ATCTBTreeFolder
-from Products.ATContentTypes.interfaces import IATFolder
-from Products.ATContentTypes.interfaces import IATBTreeFolder
+from Products.ATContentTypes.content.base import ATCTOrderedFolder
+from Products.ATContentTypes.content.base import registerATCT
 from Products.ATContentTypes.content.schemata import ATContentTypeSchema
-from Products.ATContentTypes.content.schemata import NextPreviousAwareSchema
 from Products.ATContentTypes.content.schemata import finalizeATCTSchema
-from Products.ATContentTypes.lib.constraintypes import ConstrainTypesMixinSchema
-
+from Products.ATContentTypes.content.schemata import NextPreviousAwareSchema
+from Products.ATContentTypes.interfaces import IATBTreeFolder
+from Products.ATContentTypes.interfaces import IATFolder
+from Products.ATContentTypes.lib.constraintypes import ConstrainTypesMixinSchema  # noqa
 from Products.CMFCore.permissions import View
+from zope.interface import implements
 
-from plone.app.folder import folder
 
 ATFolderSchema = folder.ATFolderSchema
-ObsoleteATFolderSchema = ATContentTypeSchema.copy() + ConstrainTypesMixinSchema + \
-    NextPreviousAwareSchema
+ObsoleteATFolderSchema = ATContentTypeSchema.copy() + \
+  ConstrainTypesMixinSchema + NextPreviousAwareSchema
 ATBTreeFolderSchema = ATContentTypeSchema.copy() + ConstrainTypesMixinSchema
 
 finalizeATCTSchema(folder.ATFolderSchema, folderish=True, moveDiscussion=False)
@@ -28,7 +26,8 @@
 
 HAS_LINGUAPLONE = True
 try:
-    from Products.LinguaPlone.I18NBaseBTreeFolder import I18NOnlyBaseBTreeFolder
+    from Products.LinguaPlone.I18NBaseBTreeFolder import \
+        I18NOnlyBaseBTreeFolder
 except ImportError:
     HAS_LINGUAPLONE = False
 
@@ -53,8 +52,7 @@ class ObsoleteATFolder(ATCTOrderedFolder):
 
     security = ClassSecurityInfo()
 
-    security.declareProtected(View, 'getNextPreviousParentValue')
-
+    @security.protected(View)
     def getNextPreviousParentValue(self):
         """If the parent node is also an IATFolder and has next/previous
         navigation enabled, then let this folder have it enabled by
@@ -84,8 +82,7 @@ class ATFolder(I18NOnlyBaseBTreeFolder, folder.ATFolder):
         manage_options = FOLDER_MANAGE_OPTIONS
         security = ClassSecurityInfo()
 
-        security.declarePrivate('manage_beforeDelete')
-
+        @security.private
         def manage_beforeDelete(self, item, container):
             I18NOnlyBaseBTreeFolder.manage_beforeDelete(self, item, container)
             folder.ATFolder.manage_beforeDelete(self, item, container)
diff --git a/Products/ATContentTypes/content/image.py b/Products/ATContentTypes/content/image.py
index bd05acf..102f590 100644
--- a/Products/ATContentTypes/content/image.py
+++ b/Products/ATContentTypes/content/image.py
@@ -1,61 +1,59 @@
-from zope.interface import implements
-
-from Products.CMFCore.permissions import View
-from Products.CMFCore.permissions import ModifyPortalContent
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Acquisition import aq_base
 from ComputedAttribute import ComputedAttribute
-
-from Products.Archetypes.atapi import Schema
+from Products.Archetypes.atapi import AnnotationStorage
 from Products.Archetypes.atapi import ImageField
 from Products.Archetypes.atapi import ImageWidget
 from Products.Archetypes.atapi import PrimaryFieldMarshaller
-from Products.Archetypes.atapi import AnnotationStorage
-
+from Products.Archetypes.atapi import Schema
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.config import PROJECTNAME
 from Products.ATContentTypes.configuration import zconf
-from Products.ATContentTypes.content.base import registerATCT
 from Products.ATContentTypes.content.base import ATCTFileContent
+from Products.ATContentTypes.content.base import registerATCT
 from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 from Products.ATContentTypes.content.schemata import finalizeATCTSchema
 from Products.ATContentTypes.interfaces import IATImage
-
 from Products.ATContentTypes.lib.imagetransform import ATCTImageTransform
-
-from Products.ATContentTypes import ATCTMessageFactory as _
-
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFCore.permissions import View
+from Products.validation import V_REQUIRED
 from Products.validation.config import validation
 from Products.validation.validators.SupplValidators import MaxSizeValidator
-from Products.validation import V_REQUIRED
+from zope.interface import implements
+
 
 validation.register(MaxSizeValidator('checkImageMaxSize',
                                      maxsize=zconf.ATImage.max_file_size))
 
 
 ATImageSchema = ATContentTypeSchema.copy() + Schema((
-    ImageField('image',
-               required=True,
-               primary=True,
-               languageIndependent=True,
-               storage=AnnotationStorage(migrate=True),
-               swallowResizeExceptions=zconf.swallowImageResizeExceptions.enable,
-               pil_quality=zconf.pil_config.quality,
-               pil_resize_algo=zconf.pil_config.resize_algo,
-               max_size=zconf.ATImage.max_image_dimension,
-               sizes={'large': (768, 768),
-                      'preview': (400, 400),
-                      'mini': (200, 200),
-                      'thumb': (128, 128),
-                      'tile': (64, 64),
-                      'icon': (32, 32),
-                      'listing': (16, 16),
-                      },
-               validators=(('isNonEmptyFile', V_REQUIRED),
-                           ('checkImageMaxSize', V_REQUIRED)),
-               widget=ImageWidget(
-                   description='',
-                   label=_(u'label_image', default=u'Image'),
-                   show_content_type=False,)),
+    ImageField(
+        'image',
+        required=True,
+        primary=True,
+        languageIndependent=True,
+        storage=AnnotationStorage(migrate=True),
+        swallowResizeExceptions=zconf.swallowImageResizeExceptions.enable,
+        pil_quality=zconf.pil_config.quality,
+        pil_resize_algo=zconf.pil_config.resize_algo,
+        max_size=zconf.ATImage.max_image_dimension,
+        sizes={'large': (768, 768),
+               'preview': (400, 400),
+               'mini': (200, 200),
+               'thumb': (128, 128),
+               'tile': (64, 64),
+               'icon': (32, 32),
+               'listing': (16, 16),
+               },
+        validators=(('isNonEmptyFile', V_REQUIRED),
+                    ('checkImageMaxSize', V_REQUIRED)),
+        widget=ImageWidget(
+            description='',
+            label=_(u'label_image', default=u'Image'),
+            show_content_type=False,)
+    ),
 
 ), marshall=PrimaryFieldMarshaller()
 )
@@ -68,7 +66,10 @@
 
 
 class ATImage(ATCTFileContent, ATCTImageTransform):
-    """An image, which can be referenced in documents or displayed in an album."""
+    """An image, which can be referenced in documents.
+
+    Or displayed in an album.
+    """
 
     schema = ATImageSchema
 
@@ -87,8 +88,7 @@ class ATImage(ATCTFileContent, ATCTImageTransform):
     def exportImage(self, format, width, height):
         return '', ''
 
-    security.declareProtected(ModifyPortalContent, 'setImage')
-
+    @security.protected(ModifyPortalContent)
     def setImage(self, value, refresh_exif=True, **kwargs):
         """Set ID to uploaded file name if Title is empty."""
         # set exif first because rotation might screw up the exif data
@@ -98,13 +98,12 @@ def setImage(self, value, refresh_exif=True, **kwargs):
         self._setATCTFileContent(value, **kwargs)
 
     def _should_set_id_to_filename(self, filename, title):
-        """If title is blank, have the caller set my ID to the uploaded file's name."""
+        """If title is blank, have the caller set my ID to the file's name."""
         # When the title is blank, sometimes the filename is returned as the
         # title.
         return filename == title or not title
 
-    security.declareProtected(View, 'tag')
-
+    @security.protected(View)
     def tag(self, **kwargs):
         """Generate image tag using the api of the ImageField
         """
@@ -115,8 +114,7 @@ def __str__(self):
         """
         return self.tag()
 
-    security.declareProtected(View, 'get_size')
-
+    @security.protected(View)
     def get_size(self):
         """ZMI / Plone get size method
 
@@ -128,27 +126,23 @@ def get_size(self):
             return 0
         return img.get_size()
 
-    security.declareProtected(View, 'getSize')
-
+    @security.protected(View)
     def getSize(self, scale=None):
         field = self.getField('image')
         return field.getSize(self, scale=scale)
 
-    security.declareProtected(View, 'getWidth')
-
+    @security.protected(View)
     def getWidth(self, scale=None):
         return self.getSize(scale)[0]
 
-    security.declareProtected(View, 'getHeight')
-
+    @security.protected(View)
     def getHeight(self, scale=None):
         return self.getSize(scale)[1]
 
     width = ComputedAttribute(getWidth, 1)
     height = ComputedAttribute(getHeight, 1)
 
-    security.declarePrivate('cmf_edit')
-
+    @security.private
     def cmf_edit(self, precondition='', file=None, title=None):
         if file is not None:
             self.setImage(file)
diff --git a/Products/ATContentTypes/content/link.py b/Products/ATContentTypes/content/link.py
index 87f32b4..7a2afb3 100644
--- a/Products/ATContentTypes/content/link.py
+++ b/Products/ATContentTypes/content/link.py
@@ -1,24 +1,22 @@
-import urlparse
-from urllib import quote
-
-from zope.interface import implements
-
-from Products.CMFCore.permissions import View
-from Products.CMFCore.permissions import ModifyPortalContent
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
-
 from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import StringField
 from Products.Archetypes.atapi import StringWidget
-
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.config import PROJECTNAME
-from Products.ATContentTypes.content.base import registerATCT
 from Products.ATContentTypes.content.base import ATCTContent
+from Products.ATContentTypes.content.base import registerATCT
 from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 from Products.ATContentTypes.content.schemata import finalizeATCTSchema
 from Products.ATContentTypes.interfaces import IATLink
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFCore.permissions import View
+from urllib import quote
+from zope.interface import implements
+
+import urlparse
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 ATLinkSchema = ATContentTypeSchema.copy() + Schema((
     StringField('remoteUrl',
@@ -53,8 +51,7 @@ class ATLink(ATCTContent):
 
     security = ClassSecurityInfo()
 
-    security.declareProtected(ModifyPortalContent, 'setRemoteUrl')
-
+    @security.protected(ModifyPortalContent)
     def setRemoteUrl(self, value, **kwargs):
         """remute url mutator
 
@@ -65,22 +62,19 @@ def setRemoteUrl(self, value, **kwargs):
             value = urlparse.urlunparse(urlparse.urlparse(value))
         self.getField('remoteUrl').set(self, value, **kwargs)
 
-    security.declareProtected(View, 'remote_url')
-
+    @security.protected(View)
     def remote_url(self):
         """CMF compatibility method
         """
         return self.getRemoteUrl()
 
-    security.declarePrivate('cmf_edit')
-
+    @security.private
     def cmf_edit(self, remote_url=None, **kwargs):
         if not remote_url:
             remote_url = kwargs.get('remote_url', None)
         self.update(remoteUrl=remote_url, **kwargs)
 
-    security.declareProtected(View, 'getRemoteUrl')
-
+    @security.protected(View)
     def getRemoteUrl(self):
         """Sanitize output
         """
diff --git a/Products/ATContentTypes/content/newsitem.py b/Products/ATContentTypes/content/newsitem.py
index 7fa298c..c2e4d55 100644
--- a/Products/ATContentTypes/content/newsitem.py
+++ b/Products/ATContentTypes/content/newsitem.py
@@ -1,17 +1,15 @@
-from zope.interface import implements
-
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
-
-from Products.Archetypes.atapi import Schema
+from Products.Archetypes.atapi import AnnotationStorage
 from Products.Archetypes.atapi import ImageField
+from Products.Archetypes.atapi import ImageWidget
+from Products.Archetypes.atapi import RFC822Marshaller
+from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import StringField
+from Products.Archetypes.atapi import StringWidget
 from Products.Archetypes.atapi import TextField
-from Products.Archetypes.atapi import ImageWidget
 from Products.Archetypes.atapi import TinyMCEWidget
-from Products.Archetypes.atapi import StringWidget
-from Products.Archetypes.atapi import RFC822Marshaller
-from Products.Archetypes.atapi import AnnotationStorage
-
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.config import PROJECTNAME
 from Products.ATContentTypes.configuration import zconf
 from Products.ATContentTypes.content.base import registerATCT
@@ -21,65 +19,68 @@
 from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 from Products.ATContentTypes.content.schemata import finalizeATCTSchema
 from Products.ATContentTypes.interfaces import IATNewsItem
-
-from Products.ATContentTypes import ATCTMessageFactory as _
-
 from Products.CMFCore.permissions import View
-
+from Products.validation import V_REQUIRED
 from Products.validation.config import validation
 from Products.validation.validators.SupplValidators import MaxSizeValidator
-from Products.validation import V_REQUIRED
+from zope.interface import implements
+
 
 validation.register(MaxSizeValidator('checkNewsImageMaxSize',
                                      maxsize=zconf.ATNewsItem.max_file_size))
 
 
 ATNewsItemSchema = ATContentTypeSchema.copy() + Schema((
-    TextField('text',
-              required=False,
-              searchable=True,
-              primary=True,
-              storage=AnnotationStorage(migrate=True),
-              validators=('isTidyHtmlWithCleanup',),
-              # validators=('isTidyHtml',),
-              default_output_type='text/x-html-safe',
-              widget=TinyMCEWidget(
-                  description='',
-                  label=_(u'label_body_text', u'Body Text'),
-                  rows=25,
-                  allow_file_upload=zconf.ATDocument.allow_document_upload)
-              ),
-
-    ImageField('image',
-               required=False,
-               storage=AnnotationStorage(migrate=True),
-               languageIndependent=True,
-               max_size=zconf.ATNewsItem.max_image_dimension,
-               sizes={'large': (768, 768),
-                      'preview': (400, 400),
-                      'mini': (200, 200),
-                      'thumb': (128, 128),
-                      'tile': (64, 64),
-                      'icon': (32, 32),
-                      'listing': (16, 16),
-                      },
-               validators=(('isNonEmptyFile', V_REQUIRED),
-                           ('checkNewsImageMaxSize', V_REQUIRED)),
-               widget=ImageWidget(
-                   description=_(
-                       u'help_news_image', default=u'Will be shown in the news listing, and in the news item itself. Image will be scaled to a sensible size.'),
-                   label=_(u'label_news_image', default=u'Image'),
-                   show_content_type=False)
-               ),
-
-    StringField('imageCaption',
-                required=False,
-                searchable=True,
-                widget=StringWidget(
-                    description='',
-                    label=_(u'label_image_caption', default=u'Image Caption'),
-                    size=40)
-                ),
+    TextField(
+        'text',
+        required=False,
+        searchable=True,
+        primary=True,
+        storage=AnnotationStorage(migrate=True),
+        validators=('isTidyHtmlWithCleanup',),
+        # validators=('isTidyHtml',),
+        default_output_type='text/x-html-safe',
+        widget=TinyMCEWidget(
+            description='',
+            label=_(u'label_body_text', u'Body Text'),
+            rows=25,
+            allow_file_upload=zconf.ATDocument.allow_document_upload)
+    ),
+
+    ImageField(
+        'image',
+        required=False,
+        storage=AnnotationStorage(migrate=True),
+        languageIndependent=True,
+        max_size=zconf.ATNewsItem.max_image_dimension,
+        sizes={'large': (768, 768),
+               'preview': (400, 400),
+               'mini': (200, 200),
+               'thumb': (128, 128),
+               'tile': (64, 64),
+               'icon': (32, 32),
+               'listing': (16, 16),
+               },
+        validators=(('isNonEmptyFile', V_REQUIRED),
+                    ('checkNewsImageMaxSize', V_REQUIRED)),
+        widget=ImageWidget(
+            description=_(
+                u'help_news_image',
+                default=u'Will be shown in the news listing, and in the news '
+                u'item itself. Image will be scaled to a sensible size.'),
+            label=_(u'label_news_image', default=u'Image'),
+            show_content_type=False)
+    ),
+
+    StringField(
+        'imageCaption',
+        required=False,
+        searchable=True,
+        widget=StringWidget(
+            description='',
+            label=_(u'label_image_caption', default=u'Image Caption'),
+            size=40)
+    ),
 ), marshall=RFC822Marshaller()
 )
 
@@ -90,7 +91,10 @@
 
 
 class ATNewsItem(ATDocumentBase, ATCTImageTransform):
-    """An announcement that will show up on the news portlet and in the news listing."""
+    """An announcement that will show up on the news portlet.
+
+    And in the news listing.
+    """
 
     schema = ATNewsItemSchema
 
@@ -106,8 +110,7 @@ class ATNewsItem(ATDocumentBase, ATCTImageTransform):
 
     security = ClassSecurityInfo()
 
-    security.declareProtected(View, 'tag')
-
+    @security.protected(View)
     def tag(self, **kwargs):
         """Generate image tag using the api of the ImageField
         """
@@ -115,8 +118,7 @@ def tag(self, **kwargs):
             kwargs['title'] = self.getImageCaption()
         return self.getField('image').tag(self, **kwargs)
 
-    security.declarePrivate('cmf_edit')
-
+    @security.private
     def cmf_edit(self, text, description=None, text_format=None, **kwargs):
         if description is not None:
             self.setDescription(description)
diff --git a/Products/ATContentTypes/content/schemata.py b/Products/ATContentTypes/content/schemata.py
index 79113f4..01f12ff 100644
--- a/Products/ATContentTypes/content/schemata.py
+++ b/Products/ATContentTypes/content/schemata.py
@@ -1,29 +1,33 @@
+# -*- coding: utf-8 -*-
 from Products.Archetypes.atapi import BaseSchema
-from Products.Archetypes.atapi import MetadataSchema
-from Products.Archetypes.atapi import ReferenceField
 from Products.Archetypes.atapi import BooleanField
 from Products.Archetypes.atapi import BooleanWidget
+from Products.Archetypes.atapi import MetadataSchema
+from Products.Archetypes.atapi import ReferenceField
+from Products.Archetypes.Widget import RelatedItemsWidget
 from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.CMFCore.permissions import ModifyPortalContent
-from Products.Archetypes.Widget import RelatedItemsWidget
 
 
 # for ATContentTypes we want to have the description in the edit view
 # just like CMF
 ATContentTypeSchema = BaseSchema.copy() + MetadataSchema((
-    BooleanField('excludeFromNav',
-                 required=False,
-                 languageIndependent=True,
-                 schemata='metadata',  # moved to 'default' for folders
-                 widget=BooleanWidget(
-                     description=_(u'help_exclude_from_nav',
-                                   default=u'If selected, this item will not appear in the navigation tree'),
-                     label=_(u'label_exclude_from_nav',
-                             default=u'Exclude from navigation'),
-                     visible={'view': 'hidden',
-                              'edit': 'visible'},
-                 ),
-                 ),
+    BooleanField(
+        'excludeFromNav',
+        required=False,
+        languageIndependent=True,
+        schemata='metadata',  # moved to 'default' for folders
+        widget=BooleanWidget(
+            label=_(u'label_exclude_from_nav',
+                    default=u'Exclude from navigation'),
+            description=_(
+                u'help_exclude_from_nav',
+                default=u'If selected, this item will not appear in the '
+                u'navigation tree'),
+            visible={'view': 'hidden',
+                     'edit': 'visible'},
+        ),
+    ),
 ),)
 
 ATContentTypeSchema['id'].searchable = True
@@ -59,20 +63,23 @@
 # Enabling next / previous navigation
 
 NextPreviousAwareSchema = MetadataSchema((
-    BooleanField('nextPreviousEnabled',
-                 # required=False,
-                 languageIndependent=True,
-                 schemata='metadata',
-                 widget=BooleanWidget(
-                     description=_(
-                         u'help_nextprevious', default=u'This enables next/previous widget on content items contained in this folder.'),
-                     label=_(u'label_nextprevious',
-                             default=u'Enable next previous navigation'),
-                     visible={'view': 'hidden',
-                              'edit': 'visible'},
-                 ),
-                 default_method="getNextPreviousParentValue"
-                 ),
+    BooleanField(
+        'nextPreviousEnabled',
+        # required=False,
+        languageIndependent=True,
+        schemata='metadata',
+        widget=BooleanWidget(
+            description=_(
+                u'help_nextprevious',
+                default=u'This enables next/previous widget on '
+                u'content items contained in this folder.'),
+            label=_(u'label_nextprevious',
+                    default=u'Enable next previous navigation'),
+            visible={'view': 'hidden',
+                     'edit': 'visible'},
+        ),
+        default_method="getNextPreviousParentValue"
+        ),
 ),)
 
 
diff --git a/Products/ATContentTypes/content/topic.py b/Products/ATContentTypes/content/topic.py
index eee7ef2..d079fc2 100644
--- a/Products/ATContentTypes/content/topic.py
+++ b/Products/ATContentTypes/content/topic.py
@@ -1,49 +1,45 @@
-from types import ListType
-from types import TupleType
-from types import StringType
-
-from zope.interface import implements
-
-from ZPublisher.HTTPRequest import HTTPRequest
-from Products.ZCatalog.Lazy import LazyCat
-from Products.CMFCore.permissions import View
-from Products.CMFCore.permissions import AddPortalContent
-from Products.CMFCore.utils import getToolByName
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from AccessControl import Unauthorized
-from Acquisition import aq_parent
 from Acquisition import aq_inner
-from webdav.Resource import Resource as WebdavResoure
-
-from Products.Archetypes.atapi import Schema
-from Products.Archetypes.atapi import TextField
+from Acquisition import aq_parent
+from Products.Archetypes.atapi import AnnotationStorage
 from Products.Archetypes.atapi import BooleanField
-from Products.Archetypes.atapi import IntegerField
-from Products.Archetypes.atapi import LinesField
 from Products.Archetypes.atapi import BooleanWidget
-from Products.Archetypes.atapi import IntegerWidget
+from Products.Archetypes.atapi import DisplayList
 from Products.Archetypes.atapi import InAndOutWidget
+from Products.Archetypes.atapi import IntegerField
+from Products.Archetypes.atapi import IntegerWidget
+from Products.Archetypes.atapi import LinesField
+from Products.Archetypes.atapi import Schema
+from Products.Archetypes.atapi import TextField
 from Products.Archetypes.atapi import TinyMCEWidget
-from Products.Archetypes.atapi import DisplayList
-from Products.Archetypes.atapi import AnnotationStorage
-
-from Products.ATContentTypes.configuration import zconf
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.config import PROJECTNAME
-from Products.ATContentTypes.content.base import registerATCT
+from Products.ATContentTypes.config import TOOLNAME
+from Products.ATContentTypes.configuration import zconf
 from Products.ATContentTypes.content.base import ATCTFolder
-from Products.ATContentTypes.criteria import _criterionRegistry
-from Products.ATContentTypes.exportimport.content import IDisabledExport
+from Products.ATContentTypes.content.base import registerATCT
 from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 from Products.ATContentTypes.content.schemata import finalizeATCTSchema
+from Products.ATContentTypes.criteria import _criterionRegistry
+from Products.ATContentTypes.exportimport.content import IDisabledExport
 from Products.ATContentTypes.interfaces import IATTopic
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.interfaces import IATTopicSortCriterion
 from Products.ATContentTypes.permission import ChangeTopics
-
-from Products.ATContentTypes.config import TOOLNAME
-
-from Products.ATContentTypes import ATCTMessageFactory as _
+from Products.CMFCore.permissions import AddPortalContent
+from Products.CMFCore.permissions import View
+from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.PloneBatch import Batch
+from Products.ZCatalog.Lazy import LazyCat
+from types import ListType
+from types import StringType
+from types import TupleType
+from webdav.Resource import Resource as WebdavResoure
+from zope.interface import implements
+from ZPublisher.HTTPRequest import HTTPRequest
+
 
 # A couple of fields just don't make sense to sort (for a user),
 # some are just doubles.
@@ -53,92 +49,106 @@
                   ]
 
 ATTopicSchema = ATContentTypeSchema.copy() + Schema((
-    TextField('text',
-              required=False,
-              searchable=True,
-              primary=True,
-              storage=AnnotationStorage(migrate=True),
-              validators=('isTidyHtmlWithCleanup',),
-              # validators=('isTidyHtml',),
-              default_output_type='text/x-html-safe',
-              write_permission=ChangeTopics,
-              widget=TinyMCEWidget(
-                  description='',
-                  label=_(u'label_body_text', default=u'Body Text'),
-                  rows=25,
-                  allow_file_upload=zconf.ATDocument.allow_document_upload),
-              ),
-    BooleanField('acquireCriteria',
-                 required=False,
-                 mode="rw",
-                 default=False,
-                 write_permission=ChangeTopics,
-                 widget=BooleanWidget(
-                     label=_(u'label_inherit_criteria',
-                             default=u'Inherit Criteria'),
-                     description=_(u'help_inherit_collection_criteria',
-                                   default=u"Narrow down the search results from the parent Collection(s) "
-                                   "by using the criteria from this Collection."),
-                     # Only show when the parent object is a Topic also,
-                     condition="python:object.aq_parent.portal_type == 'Topic'"),
-                 ),
-    BooleanField('limitNumber',
-                 required=False,
-                 mode="rw",
-                 default=False,
-                 write_permission=ChangeTopics,
-                 widget=BooleanWidget(
-                     label=_(u'label_limit_number',
-                             default=u'Limit Search Results'),
-                     description=_(u'help_limit_number',
-                                   default=u"If selected, only the 'Number of Items' "
-                                   "indicated below will be displayed.")
-                 ),
-                 ),
-    IntegerField('itemCount',
-                 required=False,
-                 mode="rw",
-                 default=0,
-                 write_permission=ChangeTopics,
-                 widget=IntegerWidget(
-                     label=_(u'label_item_count', default=u'Number of Items'),
-                     description=''
-                 ),
-                 ),
-    BooleanField('customView',
-                 required=False,
-                 mode="rw",
-                 default=False,
-                 write_permission=ChangeTopics,
-                 widget=BooleanWidget(
-                     label=_(u'label_custom_view',
-                             default=u'Display as Table'),
-                     description=_(u'help_custom_view',
-                                   default=u"Columns in the table are controlled "
-                                   "by 'Table Columns' below.")
-                 ),
-                 ),
-    LinesField('customViewFields',
-               required=False,
-               mode="rw",
-               default=('Title',),
-               vocabulary='listMetaDataFields',
-               enforceVocabulary=True,
-               write_permission=ChangeTopics,
-               widget=InAndOutWidget(
-                    label=_(u'label_custom_view_fields',
-                            default=u'Table Columns'),
-                    description=_(u'help_custom_view_fields',
-                                  default=u"Select which fields to display when "
-                                  "'Display as Table' is checked.")
-               ),
-               ),
+    TextField(
+        'text',
+        required=False,
+        searchable=True,
+        primary=True,
+        storage=AnnotationStorage(migrate=True),
+        validators=('isTidyHtmlWithCleanup',),
+        # validators=('isTidyHtml',),
+        default_output_type='text/x-html-safe',
+        write_permission=ChangeTopics,
+        widget=TinyMCEWidget(
+            description='',
+            label=_(u'label_body_text', default=u'Body Text'),
+            rows=25,
+            allow_file_upload=zconf.ATDocument.allow_document_upload),
+    ),
+
+    BooleanField(
+        'acquireCriteria',
+        required=False,
+        mode="rw",
+        default=False,
+        write_permission=ChangeTopics,
+        widget=BooleanWidget(
+            label=_(u'label_inherit_criteria',
+                    default=u'Inherit Criteria'),
+            description=_(
+                u'help_inherit_collection_criteria',
+                default=u"Narrow down the search results from the parent "
+                u"Collection(s) by using the criteria from this Collection."),
+            # Only show when the parent object is a Topic also.
+            condition="python:object.aq_parent.portal_type == 'Topic'"),
+    ),
+
+    BooleanField(
+        'limitNumber',
+        required=False,
+        mode="rw",
+        default=False,
+        write_permission=ChangeTopics,
+        widget=BooleanWidget(
+            label=_(u'label_limit_number',
+                    default=u'Limit Search Results'),
+            description=_(u'help_limit_number',
+                          default=u"If selected, only the 'Number of Items' "
+                          "indicated below will be displayed.")
+        ),
+    ),
+
+    IntegerField(
+        'itemCount',
+        required=False,
+        mode="rw",
+        default=0,
+        write_permission=ChangeTopics,
+        widget=IntegerWidget(
+            label=_(u'label_item_count', default=u'Number of Items'),
+            description=''),
+    ),
+
+    BooleanField(
+        'customView',
+        required=False,
+        mode="rw",
+        default=False,
+        write_permission=ChangeTopics,
+        widget=BooleanWidget(
+            label=_(u'label_custom_view',
+                    default=u'Display as Table'),
+            description=_(u'help_custom_view',
+                          default=u"Columns in the table are controlled "
+                          "by 'Table Columns' below.")
+        ),
+    ),
+
+    LinesField(
+        'customViewFields',
+        required=False,
+        mode="rw",
+        default=('Title',),
+        vocabulary='listMetaDataFields',
+        enforceVocabulary=True,
+        write_permission=ChangeTopics,
+        widget=InAndOutWidget(
+             label=_(u'label_custom_view_fields',
+                     default=u'Table Columns'),
+             description=_(u'help_custom_view_fields',
+                           default=u"Select which fields to display when "
+                           "'Display as Table' is checked.")
+        ),
+    ),
 ))
 finalizeATCTSchema(ATTopicSchema, folderish=False, moveDiscussion=False)
 
 
 class ATTopic(ATCTFolder):
-    """An automatically updated stored search that can be used to display items matching criteria you specify."""
+    """An automatically updated stored search.
+
+    This can be used to display items matching criteria you specify.
+    """
 
     schema = ATTopicSchema
 
@@ -167,23 +177,20 @@ def initializeArchetype(self, **kwargs):
                 syn_tool.enableSyndication(self)
         return ret_val
 
-    security.declareProtected(ChangeTopics, 'validateAddCriterion')
-
+    @security.protected(ChangeTopics)
     def validateAddCriterion(self, indexId, criteriaType):
         """Is criteriaType acceptable criteria for indexId
         """
         return criteriaType in self.criteriaByIndexId(indexId)
 
-    security.declareProtected(ChangeTopics, 'criteriaByIndexId')
-
+    @security.protected(ChangeTopics)
     def criteriaByIndexId(self, indexId):
         catalog_tool = getToolByName(self, 'portal_catalog')
         indexObj = catalog_tool.Indexes[indexId]
         results = _criterionRegistry.criteriaByIndex(indexObj.meta_type)
         return results
 
-    security.declareProtected(ChangeTopics, 'listCriteriaTypes')
-
+    @security.protected(ChangeTopics)
     def listCriteriaTypes(self):
         """List available criteria types as dict
         """
@@ -191,17 +198,14 @@ def listCriteriaTypes(self):
                  'description': _criterionRegistry[ctype].shortDesc}
                 for ctype in self.listCriteriaMetaTypes()]
 
-    security.declareProtected(ChangeTopics, 'listCriteriaMetaTypes')
-
+    @security.protected(ChangeTopics)
     def listCriteriaMetaTypes(self):
         """List available criteria
         """
-        val = _criterionRegistry.listTypes()
-        val.sort()
+        val = sorted(_criterionRegistry.listTypes())
         return val
 
-    security.declareProtected(ChangeTopics, 'listSearchCriteriaTypes')
-
+    @security.protected(ChangeTopics)
     def listSearchCriteriaTypes(self):
         """List available search criteria types as dict
         """
@@ -209,17 +213,14 @@ def listSearchCriteriaTypes(self):
                  'description': _criterionRegistry[ctype].shortDesc}
                 for ctype in self.listSearchCriteriaMetaTypes()]
 
-    security.declareProtected(ChangeTopics, 'listSearchCriteriaMetaTypes')
-
+    @security.protected(ChangeTopics)
     def listSearchCriteriaMetaTypes(self):
         """List available search criteria
         """
-        val = _criterionRegistry.listSearchTypes()
-        val.sort()
+        val = sorted(_criterionRegistry.listSearchTypes())
         return val
 
-    security.declareProtected(ChangeTopics, 'listSortCriteriaTypes')
-
+    @security.protected(ChangeTopics)
     def listSortCriteriaTypes(self):
         """List available sort criteria types as dict
         """
@@ -227,40 +228,34 @@ def listSortCriteriaTypes(self):
                  'description': _criterionRegistry[ctype].shortDesc}
                 for ctype in self.listSortCriteriaMetaTypes()]
 
-    security.declareProtected(ChangeTopics, 'listSortCriteriaMetaTypes')
-
+    @security.protected(ChangeTopics)
     def listSortCriteriaMetaTypes(self):
         """List available sort criteria
         """
-        val = _criterionRegistry.listSortTypes()
-        val.sort()
+        val = sorted(_criterionRegistry.listSortTypes())
         return val
 
-    security.declareProtected(View, 'listCriteria')
-
+    @security.protected(View)
     def listCriteria(self):
         """Return a list of our criteria objects.
         """
         val = self.objectValues(self.listCriteriaMetaTypes())
         return val
 
-    security.declareProtected(View, 'listSearchCriteria')
-
+    @security.protected(View)
     def listSearchCriteria(self):
         """Return a list of our search criteria objects.
         """
         return [val for val in self.listCriteria() if
                 IATTopicSearchCriterion.providedBy(val)]
 
-    security.declareProtected(ChangeTopics, 'hasSortCriterion')
-
+    @security.protected(ChangeTopics)
     def hasSortCriterion(self):
         """Tells if a sort criterai is already setup.
         """
         return not self.getSortCriterion() is None
 
-    security.declareProtected(ChangeTopics, 'getSortCriterion')
-
+    @security.protected(ChangeTopics)
     def getSortCriterion(self):
         """Return the Sort criterion if setup.
         """
@@ -269,16 +264,14 @@ def getSortCriterion(self):
                 return criterion
         return None
 
-    security.declareProtected(ChangeTopics, 'removeSortCriterion')
-
+    @security.protected(ChangeTopics)
     def removeSortCriterion(self):
         """remove the Sort criterion.
         """
         if self.hasSortCriterion():
             self.deleteCriterion(self.getSortCriterion().getId())
 
-    security.declareProtected(ChangeTopics, 'setSortCriterion')
-
+    @security.protected(ChangeTopics)
     def setSortCriterion(self, field, reversed):
         """Set the Sort criterion.
         """
@@ -286,23 +279,20 @@ def setSortCriterion(self, field, reversed):
         self.addCriterion(field, 'ATSortCriterion')
         self.getSortCriterion().setReversed(reversed)
 
-    security.declareProtected(ChangeTopics, 'listIndicesByCriterion')
-
+    @security.protected(ChangeTopics)
     def listIndicesByCriterion(self, criterion):
         """
         """
         return _criterionRegistry.indicesByCriterion(criterion)
 
-    security.declareProtected(ChangeTopics, 'listFields')
-
+    @security.protected(ChangeTopics)
     def listFields(self):
         """Return a list of fields from portal_catalog.
         """
         tool = getToolByName(self, TOOLNAME)
         return tool.getEnabledFields()
 
-    security.declareProtected(ChangeTopics, 'listSortFields')
-
+    @security.protected(ChangeTopics)
     def listSortFields(self):
         """Return a list of available fields for sorting."""
         fields = [field
@@ -310,8 +300,7 @@ def listSortFields(self):
                   if self.validateAddCriterion(field[0], 'ATSortCriterion')]
         return fields
 
-    security.declareProtected(ChangeTopics, 'listAvailableFields')
-
+    @security.protected(ChangeTopics)
     def listAvailableFields(self):
         """Return a list of available fields for new criteria.
         """
@@ -324,8 +313,7 @@ def listAvailableFields(self):
                ]
         return val
 
-    security.declareProtected(View, 'listSubtopics')
-
+    @security.protected(View)
     def listSubtopics(self):
         """Return a list of our subtopics.
         """
@@ -339,24 +327,21 @@ def listSubtopics(self):
         tops = [t[1] for t in tops]
         return tops
 
-    security.declareProtected(View, 'hasSubtopics')
-
+    @security.protected(View)
     def hasSubtopics(self):
         """Returns true if subtopics have been created on this topic.
         """
         val = self.objectIds(self.meta_type)
         return not not val
 
-    security.declareProtected(View, 'listMetaDataFields')
-
+    @security.protected(View)
     def listMetaDataFields(self, exclude=True):
         """Return a list of metadata fields from portal_catalog.
         """
         tool = getToolByName(self, TOOLNAME)
         return tool.getMetadataDisplay(exclude)
 
-    security.declareProtected(View, 'allowedCriteriaForField')
-
+    @security.protected(View)
     def allowedCriteriaForField(self, field, display_list=False):
         """ Return all valid criteria for a given field.  Optionally include
             descriptions in list in format [(desc1, val1) , (desc2, val2)] for
@@ -373,8 +358,7 @@ def allowedCriteriaForField(self, field, display_list=False):
             allowed = DisplayList(flat)
         return allowed
 
-    security.declareProtected(View, 'buildQuery')
-
+    @security.protected(View)
     def buildQuery(self):
         """Construct a catalog query using our criterion objects.
         """
@@ -400,22 +384,24 @@ def buildQuery(self):
         for criterion in criteria:
             for key, value in criterion.getCriteriaItems():
                 # Ticket: https://dev.plone.org/plone/ticket/8827
-                # If a sub topic is set to acquire then the 'start' key have to
-                # be deleted to get ATFriendlyDateCriteria to work properly (the 'end' key) -
-                # so the 'start' key should be deleted.
+                # If a sub topic is set to acquire then the 'start' key has to
+                # be deleted to get ATFriendlyDateCriteria to work properly
+                # (the 'end' key) - so the 'start' key should be deleted.
                 # But only when:
                 # - a subtopic with acquire enabled
                 # - its a ATFriendlyDateCriteria
                 # - the date criteria is set to 'now' (0)
                 # - the end key is set
-                if clear_start and criterion.meta_type in ['ATFriendlyDateCriteria'] \
-                        and not criterion.value and key == 'end' and 'start' in result:
+                if (clear_start and
+                        criterion.meta_type in ['ATFriendlyDateCriteria'] and
+                        not criterion.value and
+                        key == 'end' and
+                        'start' in result):
                     del result['start']
                 result[key] = value
         return result
 
-    security.declareProtected(View, 'queryCatalog')
-
+    @security.protected(View)
     def queryCatalog(self, REQUEST=None, batch=False, b_size=None,
                      full_objects=False, **kw):
         # Invoke the catalog using our criteria to augment any passed
@@ -470,8 +456,7 @@ def queryCatalog(self, REQUEST=None, batch=False, b_size=None,
             return batch
         return results
 
-    security.declareProtected(ChangeTopics, 'addCriterion')
-
+    @security.protected(ChangeTopics)
     def addCriterion(self, field, criterion_type):
         """Add a new search criterion. Return the resulting object.
         """
@@ -482,19 +467,17 @@ def addCriterion(self, field, criterion_type):
         self._setObject(newid, crit)
         return self._getOb(newid)
 
-    security.declareProtected(ChangeTopics, 'deleteCriterion')
-
+    @security.protected(ChangeTopics)
     def deleteCriterion(self, criterion_id):
         """Delete selected criterion.
         """
-        if type(criterion_id) is StringType:
+        if isinstance(criterion_id, StringType):
             self._delObject(criterion_id)
         elif type(criterion_id) in (ListType, TupleType):
             for cid in criterion_id:
                 self._delObject(cid)
 
-    security.declareProtected(View, 'getCriterion')
-
+    @security.protected(View)
     def getCriterion(self, criterion_id):
         """Get the criterion object.
         """
@@ -503,8 +486,7 @@ def getCriterion(self, criterion_id):
         except AttributeError:
             return self._getOb(criterion_id)
 
-    security.declareProtected(AddPortalContent, 'addSubtopic')
-
+    @security.protected(AddPortalContent)
     def addSubtopic(self, id):
         """Add a new subtopic.
         """
@@ -512,8 +494,7 @@ def addSubtopic(self, id):
         ti.constructInstance(self, id)
         return self._getOb(id)
 
-    security.declareProtected(View, 'synContentValues')
-
+    @security.protected(View)
     def synContentValues(self):
         """Getter for syndacation support
         """
@@ -521,8 +502,7 @@ def synContentValues(self):
         limit = int(syn_tool.getMaxItems(self))
         return self.queryCatalog(sort_limit=limit)[:limit]
 
-    security.declarePublic('canSetDefaultPage')
-
+    @security.public
     def canSetDefaultPage(self):
         """
         Override BrowserDefaultMixin because default page stuff doesn't make
@@ -530,8 +510,7 @@ def canSetDefaultPage(self):
         """
         return False
 
-    security.declarePublic('getCriterionUniqueWidgetAttr')
-
+    @security.public
     def getCriteriaUniqueWidgetAttr(self, attr):
         """Get a unique list values for a specific attribute for all widgets
            on all criteria"""
@@ -548,14 +527,12 @@ def getCriteriaUniqueWidgetAttr(self, attr):
                         if item not in order]
         return order
 
-    security.declareProtected(View, 'HEAD')
-
+    @security.protected(View)
     def HEAD(self, REQUEST, RESPONSE):
         """HTTP HEAD handler"""
         return WebdavResoure.HEAD(self, REQUEST, RESPONSE)
 
-    security.declareProtected(ChangeTopics, 'setText')
-
+    @security.protected(ChangeTopics)
     def setText(self, value, **kwargs):
         """Body text mutator
 
@@ -578,8 +555,7 @@ def setText(self, value, **kwargs):
 
         field.set(self, value, **kwargs)  # set is ok
 
-    security.declarePrivate('getTidyOutput')
-
+    @security.private
     def getTidyOutput(self, field):
         """Get the tidied output for a specific field from the request
         if available
diff --git a/Products/ATContentTypes/criteria/__init__.py b/Products/ATContentTypes/criteria/__init__.py
index 00d5280..e00f645 100644
--- a/Products/ATContentTypes/criteria/__init__.py
+++ b/Products/ATContentTypes/criteria/__init__.py
@@ -1,6 +1,6 @@
+# -*- coding: utf-8 -*-
 from UserDict import UserDict
 from Products.Archetypes.atapi import registerType
-from Products.Archetypes.ClassGen import generateClass
 from Products.ATContentTypes.config import PROJECTNAME
 from types import StringType
 
@@ -45,7 +45,7 @@ def __init__(self, *args, **kwargs):
         self.portaltypes = {}
 
     def register(self, criterion, indices):
-        if type(indices) is StringType:
+        if isinstance(indices, StringType):
             indices = (indices,)
         indices = tuple(indices)
 
@@ -104,20 +104,26 @@ def getPortalTypes(self):
 registerCriterion = _criterionRegistry.register
 unregisterCriterion = _criterionRegistry.unregister
 
-__all__ = ('registerCriterion', 'ALL_INDICES', 'DATE_INDICES', 'STRING_INDICES',
-           'LIST_INDICES', 'SORT_INDICES', )
+__all__ = (
+    'registerCriterion',
+    'ALL_INDICES',
+    'DATE_INDICES',
+    'STRING_INDICES',
+    'LIST_INDICES',
+    'SORT_INDICES',
+)
 
 # criteria
-from Products.ATContentTypes.criteria.boolean import ATBooleanCriterion
-from Products.ATContentTypes.criteria.date import ATDateCriteria
-from Products.ATContentTypes.criteria.daterange import ATDateRangeCriterion
-from Products.ATContentTypes.criteria.list import ATListCriterion
-from Products.ATContentTypes.criteria.portaltype import ATPortalTypeCriterion
-from Products.ATContentTypes.criteria.reference import ATReferenceCriterion
-from Products.ATContentTypes.criteria.selection import ATSelectionCriterion
-from Products.ATContentTypes.criteria.simpleint import ATSimpleIntCriterion
-from Products.ATContentTypes.criteria.simplestring import ATSimpleStringCriterion
-from Products.ATContentTypes.criteria.sort import ATSortCriterion
-from Products.ATContentTypes.criteria.currentauthor import ATCurrentAuthorCriterion
-from Products.ATContentTypes.criteria.path import ATPathCriterion
-from Products.ATContentTypes.criteria.relativepath import ATRelativePathCriterion
+from Products.ATContentTypes.criteria.boolean import ATBooleanCriterion  # noqa
+from Products.ATContentTypes.criteria.date import ATDateCriteria  # noqa
+from Products.ATContentTypes.criteria.daterange import ATDateRangeCriterion  # noqa
+from Products.ATContentTypes.criteria.list import ATListCriterion  # noqa
+from Products.ATContentTypes.criteria.portaltype import ATPortalTypeCriterion  # noqa
+from Products.ATContentTypes.criteria.reference import ATReferenceCriterion  # noqa
+from Products.ATContentTypes.criteria.selection import ATSelectionCriterion  # noqa
+from Products.ATContentTypes.criteria.simpleint import ATSimpleIntCriterion  # noqa
+from Products.ATContentTypes.criteria.simplestring import ATSimpleStringCriterion  # noqa
+from Products.ATContentTypes.criteria.sort import ATSortCriterion  # noqa
+from Products.ATContentTypes.criteria.currentauthor import ATCurrentAuthorCriterion  # noqa
+from Products.ATContentTypes.criteria.path import ATPathCriterion  # noqa
+from Products.ATContentTypes.criteria.relativepath import ATRelativePathCriterion  # noqa
diff --git a/Products/ATContentTypes/criteria/base.py b/Products/ATContentTypes/criteria/base.py
index dfd06db..3bd596a 100644
--- a/Products/ATContentTypes/criteria/base.py
+++ b/Products/ATContentTypes/criteria/base.py
@@ -1,16 +1,15 @@
-from zope.interface import implements, classImplementsOnly, implementedBy
-
-from Products.Archetypes.atapi import BaseContentMixin
-
-from Products.CMFCore.permissions import View
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
-
+from Products.Archetypes.atapi import BaseContentMixin
 from Products.Archetypes.ClassGen import generateClass
+from Products.Archetypes.interfaces.referenceable import IReferenceable
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
 from Products.ATContentTypes.interfaces import IATTopicCriterion
-
-from Products.Archetypes.interfaces.referenceable import IReferenceable
+from Products.CMFCore.permissions import View
+from zope.interface import classImplementsOnly
+from zope.interface import implementedBy
+from zope.interface import implements
 
 
 class NonRefCatalogContent(BaseContentMixin):
@@ -65,8 +64,7 @@ def __init__(self, id=None, field=None, oid=None):
             self.id = id
         self.getField('field').set(self, field)
 
-    security.declareProtected(View, 'getId')
-
+    @security.protected(View)
     def getId(self):
         """Get the object id"""
         return str(self.id)
@@ -76,19 +74,16 @@ def setId(self, value, *kw):
         """
         assert value == self.getId(), 'You are not allowed to change the id'
 
-    security.declareProtected(View, 'Type')
-
+    @security.protected(View)
     def Type(self):
         return self.archetype_name
 
-    security.declareProtected(View, 'Description')
-
+    @security.protected(View)
     def Description(self):
         lines = [line.strip() for line in self.__doc__.splitlines()]
         return ' '.join([line for line in lines if line])
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         """Return a sequence of items to be used to build the catalog query.
         """
diff --git a/Products/ATContentTypes/criteria/boolean.py b/Products/ATContentTypes/criteria/boolean.py
index a4c7b79..cb0b18c 100644
--- a/Products/ATContentTypes/criteria/boolean.py
+++ b/Products/ATContentTypes/criteria/boolean.py
@@ -1,22 +1,19 @@
-from zope.interface import implements
-
-from Missing import MV
-
-from Products.CMFCore.permissions import View
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
-
-from Products.Archetypes.atapi import Schema
+from Missing import MV
 from Products.Archetypes.atapi import BooleanField
 from Products.Archetypes.atapi import BooleanWidget
-
-from Products.ATContentTypes.criteria import registerCriterion
+from Products.Archetypes.atapi import Schema
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.criteria import FIELD_INDICES
+from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
+from Products.CMFCore.permissions import View
+from zope.interface import implements
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 ATBooleanCriterionSchema = ATBaseCriterionSchema + Schema((
     BooleanField('bool',
@@ -44,8 +41,7 @@ class ATBooleanCriterion(ATBaseCriterion):
     archetype_name = 'Boolean Criterion'
     shortDesc = 'Boolean (True/False)'
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         result = []
         if self.getBool():
diff --git a/Products/ATContentTypes/criteria/currentauthor.py b/Products/ATContentTypes/criteria/currentauthor.py
index 85d549d..44989d3 100644
--- a/Products/ATContentTypes/criteria/currentauthor.py
+++ b/Products/ATContentTypes/criteria/currentauthor.py
@@ -1,14 +1,14 @@
-from zope.interface import implements
-
-from Products.CMFCore.permissions import View
-from Products.CMFCore.utils import getToolByName
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
-
-from Products.ATContentTypes.criteria import registerCriterion, \
-    LIST_INDICES
+from Products.ATContentTypes.criteria import LIST_INDICES
+from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
+from Products.CMFCore.permissions import View
+from Products.CMFCore.utils import getToolByName
+from zope.interface import implements
+
 
 ATCurrentAuthorSchema = ATBaseCriterionSchema
 
@@ -24,8 +24,7 @@ class ATCurrentAuthorCriterion(ATBaseCriterion):
     archetype_name = 'Current Author Criterion'
     shortDesc = 'Restrict to current user'
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         result = []
 
diff --git a/Products/ATContentTypes/criteria/date.py b/Products/ATContentTypes/criteria/date.py
index 47b35f8..2560e27 100644
--- a/Products/ATContentTypes/criteria/date.py
+++ b/Products/ATContentTypes/criteria/date.py
@@ -1,24 +1,22 @@
-from zope.interface import implements
-
-from DateTime import DateTime
-from Products.CMFCore.permissions import View
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
-
-from Products.Archetypes.atapi import Schema
-from Products.Archetypes.atapi import IntegerField
-from Products.Archetypes.atapi import StringField
-from Products.Archetypes.atapi import SelectionWidget
+from DateTime import DateTime
 from Products.Archetypes.atapi import DisplayList
 from Products.Archetypes.atapi import IntDisplayList
-
-from Products.ATContentTypes.criteria import registerCriterion
+from Products.Archetypes.atapi import IntegerField
+from Products.Archetypes.atapi import Schema
+from Products.Archetypes.atapi import SelectionWidget
+from Products.Archetypes.atapi import StringField
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.criteria import DATE_INDICES
+from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
+from Products.CMFCore.permissions import View
+from zope.interface import implements
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 DateOptions = IntDisplayList((
     (0, _(u'Now')),
@@ -46,49 +44,56 @@
 ))
 
 ATDateCriteriaSchema = ATBaseCriterionSchema + Schema((
-    IntegerField('value',
-                 required=1,
-                 mode="rw",
-                 accessor="Value",
-                 mutator="setValue",
-                 write_permission=ChangeTopics,
-                 default=None,
-                 vocabulary=DateOptions,
-                 widget=SelectionWidget(
-                     label=_(u'label_date_criteria_value',
-                             default=u'Which day'),
-                     description=_(u'help_date_criteria_value',
-                                   default=u'Select the date criteria value.')
-                 ),
-                 ),
-    StringField('dateRange',
-                required=1,
-                mode="rw",
-                write_permission=ChangeTopics,
-                default=None,
-                vocabulary=RangeOperations,
-                enforceVocabulary=1,
-                widget=SelectionWidget(
-                    label=_(u'label_date_criteria_range',
-                            default=u'In the past or future'),
-                    description=_(u'help_date_criteria_range',
-                                  default=u"Select the date criteria range. Ignore this if you selected 'Now' above."),
-                    format="select"),
-                ),
-    StringField('operation',
-                required=1,
-                mode="rw",
-                default=None,
-                write_permission=ChangeTopics,
-                vocabulary=CompareOperations,
-                enforceVocabulary=1,
-                widget=SelectionWidget(
-                    label=_(u'label_date_criteria_operation',
-                            default=u'More or less'),
-                    description=_(u'help_date_criteria_operation',
-                                  default=u'Select the date criteria operation.'),
-                    format="select"),
-                ),
+    IntegerField(
+        'value',
+        required=1,
+        mode="rw",
+        accessor="Value",
+        mutator="setValue",
+        write_permission=ChangeTopics,
+        default=None,
+        vocabulary=DateOptions,
+        widget=SelectionWidget(
+            label=_(u'label_date_criteria_value',
+                    default=u'Which day'),
+            description=_(u'help_date_criteria_value',
+                          default=u'Select the date criteria value.')
+        ),
+    ),
+
+    StringField(
+        'dateRange',
+        required=1,
+        mode="rw",
+        write_permission=ChangeTopics,
+        default=None,
+        vocabulary=RangeOperations,
+        enforceVocabulary=1,
+        widget=SelectionWidget(
+            label=_(u'label_date_criteria_range',
+                    default=u'In the past or future'),
+            description=_(
+                u'help_date_criteria_range',
+                default=u"Select the date criteria range. "
+                u"Ignore this if you selected 'Now' above."),
+            format="select"),
+    ),
+
+    StringField(
+        'operation',
+        required=1,
+        mode="rw",
+        default=None,
+        write_permission=ChangeTopics,
+        vocabulary=CompareOperations,
+        enforceVocabulary=1,
+        widget=SelectionWidget(
+            label=_(u'label_date_criteria_operation',
+                    default=u'More or less'),
+            description=_(u'help_date_criteria_operation',
+                          default=u'Select the date criteria operation.'),
+            format="select"),
+    ),
 ))
 
 
@@ -103,8 +108,7 @@ class ATDateCriteria(ATBaseCriterion):
     archetype_name = 'Friendly Date Criteria'
     shortDesc = 'Relative date'
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         """Return a sequence of items to be used to build the catalog query.
         """
@@ -126,7 +130,9 @@ def getCriteriaItems(self):
             elif operation == 'more':
                 if value != 0:
                     range_op = (self.getDateRange() == '-' and 'max') or 'min'
-                    return ((field, {'query': date.earliestTime(), 'range': range_op}),)
+                    return (
+                        (field, {'query': date.earliestTime(),
+                                 'range': range_op}),)
                 else:
                     return ((field, {'query': date, 'range': 'min'}),)
             elif operation == 'less':
@@ -134,7 +140,8 @@ def getCriteriaItems(self):
                     date_range = (self.getDateRange() == '-' and
                                   (date.earliestTime(), current_date)
                                   ) or (current_date, date.latestTime())
-                    return ((field, {'query': date_range, 'range': 'min:max'}),)
+                    return (
+                        (field, {'query': date_range, 'range': 'min:max'}),)
                 else:
                     return ((field, {'query': date, 'range': 'max'}),)
         else:
diff --git a/Products/ATContentTypes/criteria/daterange.py b/Products/ATContentTypes/criteria/daterange.py
index ed1e6b5..4e27530 100644
--- a/Products/ATContentTypes/criteria/daterange.py
+++ b/Products/ATContentTypes/criteria/daterange.py
@@ -1,51 +1,54 @@
-from zope.interface import implements
-
-from Products.CMFCore.permissions import View
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
-
-from Products.Archetypes.atapi import Schema
-from Products.Archetypes.atapi import DateTimeField
 from Products.Archetypes.atapi import CalendarWidget
-
-from Products.ATContentTypes.criteria import registerCriterion
+from Products.Archetypes.atapi import DateTimeField
+from Products.Archetypes.atapi import Schema
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.criteria import DATE_INDICES
+from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
+from Products.CMFCore.permissions import View
+from zope.interface import implements
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 RELEVANT_INDICES = list(DATE_INDICES)
 RELEVANT_INDICES.remove('DateRangeIndex')
 RELEVANT_INDICES = tuple(RELEVANT_INDICES)
 
 ATDateRangeCriterionSchema = ATBaseCriterionSchema + Schema((
-    DateTimeField('start',
-                  required=1,
-                  mode="rw",
-                  write_permission=ChangeTopics,
-                  default=None,
-                  widget=CalendarWidget(
-                      label=_(u'label_date_range_criteria_start',
-                              default=u'Start Date'),
-                      description=_(u'help_date_range_criteria_start',
-                                    default=u'The beginning of the date range to search')
-                  ),
-                  ),
-    DateTimeField('end',
-                  required=1,
-                  mode="rw",
-                  write_permission=ChangeTopics,
-                  default=None,
-                  widget=CalendarWidget(
-                      label=_(u'label_date_range_criteria_end',
-                              default=u'End Date'),
-                      description=_(u'help_date_range_criteria_end',
-                                    default=u'The ending of the date range to search.')
-
-                  ),
-                  ),
+    DateTimeField(
+        'start',
+        required=1,
+        mode="rw",
+        write_permission=ChangeTopics,
+        default=None,
+        widget=CalendarWidget(
+            label=_(u'label_date_range_criteria_start',
+                    default=u'Start Date'),
+            description=_(
+                u'help_date_range_criteria_start',
+                default=u'The beginning of the date range to search')
+        ),
+    ),
+
+    DateTimeField(
+        'end',
+        required=1,
+        mode="rw",
+        write_permission=ChangeTopics,
+        default=None,
+        widget=CalendarWidget(
+            label=_(u'label_date_range_criteria_end',
+                    default=u'End Date'),
+            description=_(
+                u'help_date_range_criteria_end',
+                default=u'The ending of the date range to search.')
+
+        ),
+    ),
 ))
 
 
@@ -60,16 +63,12 @@ class ATDateRangeCriterion(ATBaseCriterion):
     archetype_name = 'Date Range Criterion'
     shortDesc = 'Date range'
 
-    security.declareProtected(View, 'Value')
-
+    @security.protected(View)
     def Value(self):
         return (self.getStart(), self.getEnd())
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
-        result = []
-
         field = self.Field()
         value = self.Value()
 
diff --git a/Products/ATContentTypes/criteria/list.py b/Products/ATContentTypes/criteria/list.py
index 12b3362..0d7a153 100644
--- a/Products/ATContentTypes/criteria/list.py
+++ b/Products/ATContentTypes/criteria/list.py
@@ -1,23 +1,21 @@
-from zope.interface import implements
-
-from Products.CMFCore.permissions import View
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
-
-from Products.Archetypes.atapi import Schema
+from Products.Archetypes.atapi import DisplayList
 from Products.Archetypes.atapi import LinesField
-from Products.Archetypes.atapi import StringField
-from Products.Archetypes.atapi import SelectionWidget
 from Products.Archetypes.atapi import LinesWidget
-from Products.Archetypes.atapi import DisplayList
-
-from Products.ATContentTypes.criteria import registerCriterion
+from Products.Archetypes.atapi import Schema
+from Products.Archetypes.atapi import SelectionWidget
+from Products.Archetypes.atapi import StringField
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.criteria import LIST_INDICES
+from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
+from Products.CMFCore.permissions import View
+from zope.interface import implements
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 CompareOperators = DisplayList((
     ('and', _(u'and')),
@@ -25,32 +23,36 @@
 ))
 
 ATListCriterionSchema = ATBaseCriterionSchema + Schema((
-    LinesField('value',
-               required=1,
-               mode="rw",
-               write_permission=ChangeTopics,
-               accessor="Value",
-               mutator="setValue",
-               default=[],
-               widget=LinesWidget(
-                    label=_(u'label_list_criteria_value', default=u'Values'),
-                    description=_(u'help_list_criteria_value',
-                                  default=u'Values, each on its own line.')
-               ),
-               ),
-    StringField('operator',
-                required=1,
-                mode="rw",
-                write_permission=ChangeTopics,
-                default='or',
-                vocabulary=CompareOperators,
-                widget=SelectionWidget(
-                    label=_(u'label_list_criteria_operator',
-                            default=u'operator name'),
-                    description=_(u'help_list_criteria_operator',
-                                  default=u'Operator used to join the tests on each value.')
-                ),
-                ),
+    LinesField(
+        'value',
+        required=1,
+        mode="rw",
+        write_permission=ChangeTopics,
+        accessor="Value",
+        mutator="setValue",
+        default=[],
+        widget=LinesWidget(
+             label=_(u'label_list_criteria_value', default=u'Values'),
+             description=_(u'help_list_criteria_value',
+                           default=u'Values, each on its own line.')
+        ),
+    ),
+
+    StringField(
+        'operator',
+        required=1,
+        mode="rw",
+        write_permission=ChangeTopics,
+        default='or',
+        vocabulary=CompareOperators,
+        widget=SelectionWidget(
+            label=_(u'label_list_criteria_operator',
+                    default=u'operator name'),
+            description=_(
+                u'help_list_criteria_operator',
+                default=u'Operator used to join the tests on each value.')
+        ),
+    ),
 ))
 
 
@@ -65,8 +67,7 @@ class ATListCriterion(ATBaseCriterion):
     archetype_name = 'List Criterion'
     shortDesc = 'List of values'
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         # filter out empty strings
         result = []
diff --git a/Products/ATContentTypes/criteria/path.py b/Products/ATContentTypes/criteria/path.py
index 7ba5b55..0eece15 100644
--- a/Products/ATContentTypes/criteria/path.py
+++ b/Products/ATContentTypes/criteria/path.py
@@ -1,24 +1,21 @@
-from zope.interface import implements
-
-from Products.CMFCore.permissions import View
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
-
-from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import BooleanField
 from Products.Archetypes.atapi import BooleanWidget
 from Products.Archetypes.atapi import ReferenceField
+from Products.Archetypes.atapi import Schema
 from Products.Archetypes.Referenceable import Referenceable
-
-from Products.ATContentTypes.criteria import registerCriterion
+from Products.Archetypes.Widget import RelatedItemsWidget
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.criteria import PATH_INDICES
+from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
+from Products.CMFCore.permissions import View
+from zope.interface import implements
 
-from Products.Archetypes.Widget import RelatedItemsWidget
-
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 ATPathCriterionSchema = ATBaseCriterionSchema + Schema((
     ReferenceField('value',
@@ -76,8 +73,7 @@ def setValue(self, value):
         self.getField('value').set(self, value)
         self.reindexObject()
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         result = []
         depth = (not self.Recurse() and 1) or -1
diff --git a/Products/ATContentTypes/criteria/portaltype.py b/Products/ATContentTypes/criteria/portaltype.py
index 2fc6a13..b468546 100644
--- a/Products/ATContentTypes/criteria/portaltype.py
+++ b/Products/ATContentTypes/criteria/portaltype.py
@@ -1,17 +1,17 @@
-from zope.component import queryUtility
-from zope.interface import implements
-from zope.schema.interfaces import IVocabularyFactory
-
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Products.Archetypes.atapi import DisplayList
-from Products.CMFCore.permissions import View
-from Products.CMFCore.utils import getToolByName
-from Products.ATContentTypes.criteria import registerCriterion
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.criteria import FIELD_INDICES
+from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria.selection import ATSelectionCriterion
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
+from Products.CMFCore.permissions import View
+from Products.CMFCore.utils import getToolByName
+from zope.component import queryUtility
+from zope.interface import implements
+from zope.schema.interfaces import IVocabularyFactory
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 ATPortalTypeCriterionSchema = ATSelectionCriterion.schema.copy()
 # and/or operator makes no sense for type selection, as no item can ever be
@@ -37,8 +37,7 @@ class ATPortalTypeCriterion(ATSelectionCriterion):
     archetype_name = 'Portal Types Criterion'
     shortDesc = 'Select content types'
 
-    security.declareProtected(View, 'getCurrentValues')
-
+    @security.protected(View)
     def getCurrentValues(self):
         """Return enabled portal types"""
         vocab = queryUtility(IVocabularyFactory, name=VOCAB_ID)(self)
@@ -58,8 +57,7 @@ def getCurrentValues(self):
 
         return DisplayList(result)
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         result = []
         if self.Value() is not '':
diff --git a/Products/ATContentTypes/criteria/reference.py b/Products/ATContentTypes/criteria/reference.py
index 08bd5d6..13107fd 100644
--- a/Products/ATContentTypes/criteria/reference.py
+++ b/Products/ATContentTypes/criteria/reference.py
@@ -1,13 +1,13 @@
-from zope.interface import implements
-
-from Products.CMFCore.utils import getToolByName
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
-
-from Products.ATContentTypes.criteria import registerCriterion
+from Products.Archetypes.atapi import DisplayList
 from Products.ATContentTypes.criteria import REFERENCE_INDICES
+from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria.selection import ATSelectionCriterion
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
-from Products.Archetypes.atapi import DisplayList
+from Products.CMFCore.utils import getToolByName
+from zope.interface import implements
+
 
 ATReferenceCriterionSchema = ATSelectionCriterion.schema
 
@@ -36,9 +36,8 @@ def getCurrentValues(self):
             query['Language'] = [self.Language(), '']
 
         brains = uid_cat(**query)
-        display = [((putils.pretty_title_or_id(b)).lower(),
-                    b.UID, b.Title or b.id) for b in brains]
-        display.sort()
+        display = sorted([((putils.pretty_title_or_id(b)).lower(),
+                           b.UID, b.Title or b.id) for b in brains])
         display_list = DisplayList([(d[1], d[2]) for d in display])
 
         return display_list
diff --git a/Products/ATContentTypes/criteria/relativepath.py b/Products/ATContentTypes/criteria/relativepath.py
index 07030aa..82c2a22 100644
--- a/Products/ATContentTypes/criteria/relativepath.py
+++ b/Products/ATContentTypes/criteria/relativepath.py
@@ -1,43 +1,49 @@
-from zope.interface import implements
-
-from Products.CMFCore.permissions import View
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Acquisition import aq_parent
-
+from Products.Archetypes.atapi import BooleanField
+from Products.Archetypes.atapi import BooleanWidget
 from Products.Archetypes.atapi import Schema
-from Products.Archetypes.atapi import BooleanField, StringField
-from Products.Archetypes.atapi import BooleanWidget, StringWidget
-
-from Products.ATContentTypes.criteria import registerCriterion
+from Products.Archetypes.atapi import StringField
+from Products.Archetypes.atapi import StringWidget
 from Products.ATContentTypes.criteria import PATH_INDICES
+from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
-
-
+from Products.CMFCore.permissions import View
 from Products.CMFCore.utils import getToolByName
+from zope.interface import implements
+
 
 ATRelativePathCriterionSchema = ATBaseCriterionSchema + Schema((
-    StringField('relativePath',
-                default='..',
-                widget=StringWidget(label='Relative path',
-                                    label_msgid="label_relativepath_criteria_customrelativepath",
-                                    description_msgid="help_relativepath_criteria_customrelativepath",
-                                    i18n_domain="plone",
-                                    description="Enter a relative path e.g.: <br /> '..' for the parent folder <br /> '../..' for the parent's parent <br />'../somefolder' for a sibling folder")),
-    BooleanField('recurse',
-                 mode="rw",
-                 write_permission=ChangeTopics,
-                 accessor="Recurse",
-                 default=False,
-                 widget=BooleanWidget(
-                     label="Search Sub-Folders",
-                     label_msgid="label_path_criteria_recurse",
-                     description="",
-                     description_msgid="help_path_criteria_recurse",
-                     i18n_domain="plone"),
-                 ),
+    StringField(
+        'relativePath',
+        default='..',
+        widget=StringWidget(
+            label='Relative path',
+            label_msgid="label_relativepath_criteria_customrelativepath",
+            description_msgid="help_relativepath_criteria_customrelativepath",
+            i18n_domain="plone",
+            description=u"Enter a relative path e.g.: <br /> '..' for the "
+            u"parent folder <br /> '../..' for the parent's parent <br />"
+            u"'../somefolder' for a sibling folder")
+    ),
+
+    BooleanField(
+        'recurse',
+        mode="rw",
+        write_permission=ChangeTopics,
+        accessor="Recurse",
+        default=False,
+        widget=BooleanWidget(
+            label="Search Sub-Folders",
+            label_msgid="label_path_criteria_recurse",
+            description="",
+            description_msgid="help_path_criteria_recurse",
+            i18n_domain="plone"),
+    ),
 ))
 
 
@@ -57,8 +63,7 @@ def getNavTypes(self):
         nav_types = ptool.typesToList()
         return nav_types
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         result = []
         depth = (not self.Recurse() and 1) or -1
@@ -82,9 +87,9 @@ def getCriteriaItems(self):
             # set the path to the collections path
             path = list(aq_parent(self).getPhysicalPath())
 
-            # now construct an aboslute path based on the relative custom path
-            # eat away from 'path' whenever we encounter a '..' in the relative path
-            # apend all other elements other than ..
+            # Now construct an absolute path based on the relative custom path.
+            # Eat away from 'path' whenever we encounter a '..' in the relative
+            # path.  Append all other elements other than '..'.
             for folder in folders:
                 if folder == '..':
                     # chop off one level from path
diff --git a/Products/ATContentTypes/criteria/schemata.py b/Products/ATContentTypes/criteria/schemata.py
index 3ce31ec..37fa8f1 100644
--- a/Products/ATContentTypes/criteria/schemata.py
+++ b/Products/ATContentTypes/criteria/schemata.py
@@ -1,41 +1,47 @@
+# -*- coding: utf-8 -*-
+from Products.Archetypes.atapi import IdWidget
 from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import StringField
-from Products.Archetypes.atapi import IdWidget
 from Products.Archetypes.atapi import StringWidget
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.permission import ChangeTopics
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 ###
 # AT Base Criterion
 ###
 
 ATBaseCriterionSchema = Schema((
-    StringField('id',
-                required=1,
-                mode="r",
-                default=None,
-                write_permission=ChangeTopics,
-                widget=IdWidget(
-                    label=_(u'label_short_name', default=u'Short Name'),
-                    description=_(u'help_shortname',
-                                  default=u"Should not contain spaces, underscores or mixed case. "
-                                  "Short Name is part of the item's web address."),
-                    visible={'view': 'invisible'}
-                ),
-                ),
-    StringField('field',
-                required=1,
-                mode="r",
-                accessor="Field",
-                write_permission=ChangeTopics,
-                default=None,
-                widget=StringWidget(
-                    label=_(u'label_criteria_field_name',
-                            default=u'Field name'),
-                    description=_(u'help_shortname',
-                                  default=u"Should not contain spaces, underscores or mixed case. "
-                                  "Short Name is part of the item's web address.")
-                ),
-                ),
+    StringField(
+        'id',
+        required=1,
+        mode="r",
+        default=None,
+        write_permission=ChangeTopics,
+        widget=IdWidget(
+            label=_(u'label_short_name', default=u'Short Name'),
+            description=_(
+                u'help_shortname',
+                default=u"Should not contain spaces, underscores or mixed "
+                u"case. Short Name is part of the item's web address."),
+            visible={'view': 'invisible'}
+        ),
+    ),
+
+    StringField(
+        'field',
+        required=1,
+        mode="r",
+        accessor="Field",
+        write_permission=ChangeTopics,
+        default=None,
+        widget=StringWidget(
+            label=_(u'label_criteria_field_name',
+                    default=u'Field name'),
+            description=_(
+                u'help_shortname',
+                default=u"Should not contain spaces, underscores or mixed "
+                u"case. Short Name is part of the item's web address.")
+        ),
+    ),
 ))
diff --git a/Products/ATContentTypes/criteria/selection.py b/Products/ATContentTypes/criteria/selection.py
index 9b42f15..f1c78ed 100644
--- a/Products/ATContentTypes/criteria/selection.py
+++ b/Products/ATContentTypes/criteria/selection.py
@@ -1,24 +1,22 @@
-from zope.interface import implements
-
-from Products.CMFCore.permissions import View
-from Products.CMFCore.utils import getToolByName
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
-
-from Products.Archetypes.atapi import Schema
+from Products.Archetypes.atapi import DisplayList
 from Products.Archetypes.atapi import LinesField
 from Products.Archetypes.atapi import MultiSelectionWidget
-from Products.Archetypes.atapi import StringField
+from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import SelectionWidget
-from Products.Archetypes.atapi import DisplayList
-
-from Products.ATContentTypes.criteria import registerCriterion
+from Products.Archetypes.atapi import StringField
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.criteria import LIST_INDICES
-from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
-from Products.ATContentTypes.permission import ChangeTopics
+from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
+from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
+from Products.ATContentTypes.permission import ChangeTopics
+from Products.CMFCore.permissions import View
+from Products.CMFCore.utils import getToolByName
+from zope.interface import implements
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 CompareOperators = DisplayList((
     ('and', _(u'and')),
@@ -26,33 +24,37 @@
 ))
 
 ATSelectionCriterionSchema = ATBaseCriterionSchema + Schema((
-    LinesField('value',
-               required=1,
-               mode="rw",
-               write_permission=ChangeTopics,
-               accessor="Value",
-               mutator="setValue",
-               default=[],
-               vocabulary="getCurrentValues",
-               widget=MultiSelectionWidget(
-                    label=_(u'label_criteria_values', default=u'Values'),
-                    description=_(u'help_criteria_values',
-                                  default=u'Existing values.')
-               ),
-               ),
-    StringField('operator',
-                required=1,
-                mode="rw",
-                write_permission=ChangeTopics,
-                default='or',
-                vocabulary=CompareOperators,
-                widget=SelectionWidget(
-                    label=_(u'label_list_criteria_operator',
-                            default=u'operator name'),
-                    description=_(u'help_list_criteria_operator',
-                                  default=u'Operator used to join the tests on each value.')
-                ),
-                ),
+    LinesField(
+        'value',
+        required=1,
+        mode="rw",
+        write_permission=ChangeTopics,
+        accessor="Value",
+        mutator="setValue",
+        default=[],
+        vocabulary="getCurrentValues",
+        widget=MultiSelectionWidget(
+             label=_(u'label_criteria_values', default=u'Values'),
+             description=_(u'help_criteria_values',
+                           default=u'Existing values.')
+        ),
+    ),
+
+    StringField(
+        'operator',
+        required=1,
+        mode="rw",
+        write_permission=ChangeTopics,
+        default='or',
+        vocabulary=CompareOperators,
+        widget=SelectionWidget(
+            label=_(u'label_list_criteria_operator',
+                    default=u'operator name'),
+            description=_(
+                u'help_list_criteria_operator',
+                default=u'Operator used to join the tests on each value.')
+        ),
+    ),
 ))
 
 
@@ -74,13 +76,11 @@ def getCurrentValues(self):
         # DisplayList keys though it is supposed to (it should
         # probably accept Booleans as well) so we only accept strings
         # for now
-        options = [(o.lower(), o)
-                   for o in options if isinstance(o, basestring)]
-        options.sort()
+        options = sorted([(o.lower(), o)
+                          for o in options if isinstance(o, basestring)])
         return [o[1] for o in options]
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         # filter out empty strings
         result = []
diff --git a/Products/ATContentTypes/criteria/simpleint.py b/Products/ATContentTypes/criteria/simpleint.py
index 090b8f6..e40ce6d 100644
--- a/Products/ATContentTypes/criteria/simpleint.py
+++ b/Products/ATContentTypes/criteria/simpleint.py
@@ -1,23 +1,21 @@
-from zope.interface import implements
-
-from Products.CMFCore.permissions import View
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
-
-from Products.Archetypes.atapi import Schema
+from Products.Archetypes.atapi import DisplayList
 from Products.Archetypes.atapi import IntegerField
 from Products.Archetypes.atapi import IntegerWidget
-from Products.Archetypes.atapi import StringField
+from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import SelectionWidget
-from Products.Archetypes.atapi import DisplayList
-
-from Products.ATContentTypes.criteria import registerCriterion
+from Products.Archetypes.atapi import StringField
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.criteria import LIST_INDICES
-from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
-from Products.ATContentTypes.permission import ChangeTopics
+from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
+from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
+from Products.ATContentTypes.permission import ChangeTopics
+from Products.CMFCore.permissions import View
+from zope.interface import implements
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 DirectionOperations = DisplayList((
     ('', _(u'Equal to')),
@@ -27,47 +25,55 @@
 ))
 
 ATSimpleIntCriterionSchema = ATBaseCriterionSchema + Schema((
-    IntegerField('value',
-                 required=1,
-                 mode="rw",
-                 write_permission=ChangeTopics,
-                 accessor="Value",
-                 mutator="setValue",
-                 default=None,
-                 widget=IntegerWidget(
-                     label=_(u'label_int_criteria_value', default=u'Value'),
-                     description=_(u'help_int_criteria_value',
-                                   default=u'An integer number.')
-                 ),
-                 ),
-    IntegerField('value2',
-                 required=0,
-                 mode="rw",
-                 write_permission=ChangeTopics,
-                 accessor="Value2",
-                 mutator="setValue2",
-                 default=None,
-                 widget=IntegerWidget(
-                     label=_(u'label_int_criteria_value2',
-                             default=u'Second Value'),
-                     description=_(u'help_int_criteria_value2',
-                                   default=u'An integer number used as the maximum value if the between direction is selected.')
-                 ),
-                 ),
-    StringField('direction',
-                required=0,
-                mode="rw",
-                write_permission=ChangeTopics,
-                default='',
-                vocabulary=DirectionOperations,
-                enforceVocabulary=1,
-                widget=SelectionWidget(
-                    label=_(u'label_int_criteria_direction',
-                            default=u'Direction'),
-                    description=_(u'help_int_criteria_direction',
-                                  default=u'Specify whether you want to find values lesser than, greater than, equal to, or between the chosen value(s).')
-                ),
-                ),
+    IntegerField(
+        'value',
+        required=1,
+        mode="rw",
+        write_permission=ChangeTopics,
+        accessor="Value",
+        mutator="setValue",
+        default=None,
+        widget=IntegerWidget(
+            label=_(u'label_int_criteria_value', default=u'Value'),
+            description=_(u'help_int_criteria_value',
+                          default=u'An integer number.')
+        ),
+    ),
+    IntegerField(
+        'value2',
+        required=0,
+        mode="rw",
+        write_permission=ChangeTopics,
+        accessor="Value2",
+        mutator="setValue2",
+        default=None,
+        widget=IntegerWidget(
+            label=_(u'label_int_criteria_value2',
+                    default=u'Second Value'),
+            description=_(
+                u'help_int_criteria_value2',
+                default=u'An integer number used as the maximum value if '
+                u'the between direction is selected.')
+        ),
+    ),
+    StringField(
+        'direction',
+        required=0,
+        mode="rw",
+        write_permission=ChangeTopics,
+        default='',
+        vocabulary=DirectionOperations,
+        enforceVocabulary=1,
+        widget=SelectionWidget(
+            label=_(u'label_int_criteria_direction',
+                    default=u'Direction'),
+            description=_(
+                u'help_int_criteria_direction',
+                default=u'Specify whether you want to find values lesser '
+                u'than, greater than, equal to, or between the chosen '
+                u'value(s).')
+        ),
+    ),
 ))
 
 
@@ -82,8 +88,7 @@ class ATSimpleIntCriterion(ATBaseCriterion):
     archetype_name = 'Simple Int Criterion'
     shortDesc = 'Integer value or range'
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         result = []
         val = self.Value()
@@ -101,15 +106,14 @@ def getCriteriaItems(self):
 
         return tuple(result)
 
-    security.declareProtected(View, 'post_validate')
-
+    @security.protected(View)
     def post_validate(self, REQUEST, errors):
         """Check that Value2 is set if range is set to min:max"""
         direction = REQUEST.get('direction', self.getDirection())
         val2 = REQUEST.get('value2', self.Value2())
         if direction == 'min:max' and not val2 and not val2 == 0:
-            errors['value2'] = 'You must enter a second value to do a "Between" search.'
-        errors['value2'] = 'You must enter a second value to do a "Between" search.'
+            errors['value2'] = (
+                'You must enter a second value to do a "Between" search.')
         return errors
 
 registerCriterion(ATSimpleIntCriterion, LIST_INDICES)
diff --git a/Products/ATContentTypes/criteria/simplestring.py b/Products/ATContentTypes/criteria/simplestring.py
index fa2dcbc..2dff2e2 100644
--- a/Products/ATContentTypes/criteria/simplestring.py
+++ b/Products/ATContentTypes/criteria/simplestring.py
@@ -1,21 +1,18 @@
-from zope.interface import implements
-
-from Products.CMFCore.permissions import View
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
-
 from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import StringField
 from Products.Archetypes.atapi import StringWidget
-
-from Products.ATContentTypes.criteria import registerCriterion, \
-    STRING_INDICES
-from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
-
-from Products.ATContentTypes.permission import ChangeTopics
+from Products.ATContentTypes import ATCTMessageFactory as _
+from Products.ATContentTypes.criteria import registerCriterion
+from Products.ATContentTypes.criteria import STRING_INDICES
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
+from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
+from Products.ATContentTypes.permission import ChangeTopics
+from Products.CMFCore.permissions import View
+from zope.interface import implements
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 ATSimpleStringCriterionSchema = ATBaseCriterionSchema + Schema((
     StringField('value',
@@ -44,8 +41,7 @@ class ATSimpleStringCriterion(ATBaseCriterion):
     archetype_name = 'Simple String Criterion'
     shortDesc = 'Text'
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         result = []
 
diff --git a/Products/ATContentTypes/criteria/sort.py b/Products/ATContentTypes/criteria/sort.py
index 69da318..d60489c 100644
--- a/Products/ATContentTypes/criteria/sort.py
+++ b/Products/ATContentTypes/criteria/sort.py
@@ -1,19 +1,18 @@
-from Products.CMFCore.permissions import View
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
-from zope.interface import implements
-
-from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import BooleanField
 from Products.Archetypes.atapi import BooleanWidget
-
+from Products.Archetypes.atapi import Schema
+from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes.criteria import registerCriterion
 from Products.ATContentTypes.criteria import SORT_INDICES
-from Products.ATContentTypes.interfaces import IATTopicSortCriterion
-from Products.ATContentTypes.permission import ChangeTopics
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.schemata import ATBaseCriterionSchema
+from Products.ATContentTypes.interfaces import IATTopicSortCriterion
+from Products.ATContentTypes.permission import ChangeTopics
+from Products.CMFCore.permissions import View
+from zope.interface import implements
 
-from Products.ATContentTypes import ATCTMessageFactory as _
 
 ATSortCriterionSchema = ATBaseCriterionSchema + Schema((
     BooleanField('reversed',
@@ -37,8 +36,7 @@ class ATSortCriterion(ATBaseCriterion):
     archetype_name = 'Sort Criterion'
     shortDesc = 'Sort'
 
-    security.declareProtected(View, 'getCriteriaItems')
-
+    @security.protected(View)
     def getCriteriaItems(self):
         result = [('sort_on', self.Field())]
 
diff --git a/Products/ATContentTypes/exportimport/__init__.py b/Products/ATContentTypes/exportimport/__init__.py
index c818e4e..48851c4 100644
--- a/Products/ATContentTypes/exportimport/__init__.py
+++ b/Products/ATContentTypes/exportimport/__init__.py
@@ -1 +1,2 @@
+# -*- coding: utf-8 -*-
 # Make it a package
diff --git a/Products/ATContentTypes/exportimport/atcttool.py b/Products/ATContentTypes/exportimport/atcttool.py
index 94c0934..464a24f 100644
--- a/Products/ATContentTypes/exportimport/atcttool.py
+++ b/Products/ATContentTypes/exportimport/atcttool.py
@@ -1,9 +1,10 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.interfaces import IATCTTool
-from Products.GenericSetup.utils import PropertyManagerHelpers
-from Products.GenericSetup.utils import XMLAdapterBase
+from Products.CMFCore.utils import getToolByName
 from Products.GenericSetup.utils import exportObjects
 from Products.GenericSetup.utils import importObjects
-from Products.CMFCore.utils import getToolByName
+from Products.GenericSetup.utils import PropertyManagerHelpers
+from Products.GenericSetup.utils import XMLAdapterBase
 
 
 def safeGetAttribute(node, attribute):
diff --git a/Products/ATContentTypes/exportimport/content.py b/Products/ATContentTypes/exportimport/content.py
index 57fb7cb..791e6d7 100644
--- a/Products/ATContentTypes/exportimport/content.py
+++ b/Products/ATContentTypes/exportimport/content.py
@@ -1,7 +1,8 @@
+# -*- coding: utf-8 -*-
+from Products.GenericSetup.interfaces import IFilesystemExporter
 from zope.interface import implements
 from zope.interface import Interface
 
-from Products.GenericSetup.interfaces import IFilesystemExporter
 
 # TODO: This is a temporary hack to allow disabling exporting of some
 # content types until all of them support proper exporting
diff --git a/Products/ATContentTypes/exportimport/factorytool.py b/Products/ATContentTypes/exportimport/factorytool.py
index c398bc8..0d92876 100644
--- a/Products/ATContentTypes/exportimport/factorytool.py
+++ b/Products/ATContentTypes/exportimport/factorytool.py
@@ -1,8 +1,9 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.interfaces import IFactoryTool
-from Products.GenericSetup.utils import XMLAdapterBase
-from Products.GenericSetup.utils import importObjects
-from Products.GenericSetup.utils import exportObjects
 from Products.CMFCore.utils import getToolByName
+from Products.GenericSetup.utils import exportObjects
+from Products.GenericSetup.utils import importObjects
+from Products.GenericSetup.utils import XMLAdapterBase
 
 
 class PortalFactoryXMLAdapter(XMLAdapterBase):
diff --git a/Products/ATContentTypes/exportimport/tests/test_factory_tool.py b/Products/ATContentTypes/exportimport/tests/test_factory_tool.py
index 7233033..9c1f30e 100644
--- a/Products/ATContentTypes/exportimport/tests/test_factory_tool.py
+++ b/Products/ATContentTypes/exportimport/tests/test_factory_tool.py
@@ -1,7 +1,8 @@
+# -*- coding: utf-8 -*-
 from OFS.Folder import Folder
 from Products.CMFPlone.exportimport.tests.base import BodyAdapterTestCase
-from zope.component import provideUtility
 from zope.component import provideAdapter
+from zope.component import provideUtility
 
 
 _FACTORYTOOL_XML = """\
diff --git a/Products/ATContentTypes/factories.py b/Products/ATContentTypes/factories.py
index 5a87e34..0acf18f 100644
--- a/Products/ATContentTypes/factories.py
+++ b/Products/ATContentTypes/factories.py
@@ -1,20 +1,20 @@
-import transaction
+# -*- coding: utf-8 -*-
+from plone.i18n.normalizer.interfaces import IFileNameNormalizer
+from Products.Archetypes.event import ObjectInitializedEvent
+from Products.Archetypes.interfaces import IATCTFileFactory
+from Products.CMFCore.interfaces._content import IFolderish
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone import utils as ploneutils
 from thread import allocate_lock
-
-from zope.component import getUtility
 from zope.component import adapts
+from zope.component import getUtility
 from zope.container.interfaces import INameChooser
-from zope.lifecycleevent import ObjectModifiedEvent
 from zope.event import notify
 from zope.interface import implements
+from zope.lifecycleevent import ObjectModifiedEvent
 
-from Products.Archetypes.event import ObjectInitializedEvent
-from Products.Archetypes.interfaces import IATCTFileFactory
-from Products.CMFCore.utils import getToolByName
-from Products.CMFCore.interfaces._content import IFolderish
-from Products.CMFPlone import utils as ploneutils
+import transaction
 
-from plone.i18n.normalizer.interfaces import IFileNameNormalizer
 
 upload_lock = allocate_lock()
 
diff --git a/Products/ATContentTypes/interface.py b/Products/ATContentTypes/interface.py
index 1513188..6879956 100644
--- a/Products/ATContentTypes/interface.py
+++ b/Products/ATContentTypes/interface.py
@@ -1,22 +1,24 @@
+# -*- coding: utf-8 -*-
 """AT Content Types general interfaces
 
 BBB: We used to have all interfaces specified in "interface". "interfaces" is
 the conventional name, though.
 """
 
-from Products.ATContentTypes.interfaces import *
-
-# the following is a rather crude workaround for the failing imports
-# seen in plone 4 when trying to import submodules from `ATCT.interface`:
-#   >>> import Products.ATContentTypes.interface.interfaces
-#   Traceback (most recent call last):
 #     File "<stdin>", line 1, in <module>
+#   >>> import Products.ATContentTypes.interface.interfaces
 #   ImportError: No module named interfaces
+#   Traceback (most recent call last):
+# again.  to work around we inject them manually...
 # apparently the modules imported from `interfaces` above are already
+# seen in plone 4 when trying to import submodules from `ATCT.interface`:
 # somehow known to the interpreter and therefore not added to `sys.modules`
-# again.  to work around we inject them manually...
-from types import ModuleType
+# the following is a rather crude workaround for the failing imports
+from Products.ATContentTypes.interfaces import *
 from sys import modules
+from types import ModuleType
+
+
 for name, obj in globals().items():
-    if type(obj) is ModuleType:
+    if isinstance(obj, ModuleType):
         modules['%s.%s' % (__name__, name)] = obj
diff --git a/Products/ATContentTypes/interfaces/__init__.py b/Products/ATContentTypes/interfaces/__init__.py
index 4bbe008..19f67b8 100644
--- a/Products/ATContentTypes/interfaces/__init__.py
+++ b/Products/ATContentTypes/interfaces/__init__.py
@@ -1,24 +1,25 @@
-from Products.ATContentTypes.interfaces.document import IATDocument
-from Products.ATContentTypes.interfaces.event import IATEvent
-from Products.ATContentTypes.interfaces.factory import IFactoryTool
-from Products.ATContentTypes.interfaces.file import IATFile
-from Products.ATContentTypes.interfaces.file import IFileContent
-from Products.ATContentTypes.interfaces.folder import IATBTreeFolder
-from Products.ATContentTypes.interfaces.folder import IATFolder
-from Products.ATContentTypes.interfaces.folder import IFilterFolder
-from Products.ATContentTypes.interfaces.image import IATImage
-from Products.ATContentTypes.interfaces.image import IImageContent
-from Products.ATContentTypes.interfaces.interfaces import IATCTTool
-from Products.ATContentTypes.interfaces.interfaces import IATContentType
-from Products.ATContentTypes.interfaces.interfaces import ICalendarSupport
-from Products.ATContentTypes.interfaces.interfaces import IHistoryAware
-from Products.ATContentTypes.interfaces.interfaces import ISelectableConstrainTypes
-from Products.ATContentTypes.interfaces.interfaces import ITextContent
-from Products.ATContentTypes.interfaces.link import IATLink
-from Products.ATContentTypes.interfaces.news import IATNewsItem
-from Products.ATContentTypes.interfaces.topic import IATCTTopicsTool
-from Products.ATContentTypes.interfaces.topic import IATTopic
-from Products.ATContentTypes.interfaces.topic import IATTopicCriterion
-from Products.ATContentTypes.interfaces.topic import IATTopicSearchCriterion
-from Products.ATContentTypes.interfaces.topic import IATTopicSortCriterion
-from Products.ATContentTypes.interfaces.factories import IATCTFileFactory
+# -*- coding: utf-8 -*-
+from Products.ATContentTypes.interfaces.document import IATDocument  # noqa
+from Products.ATContentTypes.interfaces.event import IATEvent  # noqa
+from Products.ATContentTypes.interfaces.factory import IFactoryTool  # noqa
+from Products.ATContentTypes.interfaces.file import IATFile  # noqa
+from Products.ATContentTypes.interfaces.file import IFileContent  # noqa
+from Products.ATContentTypes.interfaces.folder import IATBTreeFolder  # noqa
+from Products.ATContentTypes.interfaces.folder import IATFolder  # noqa
+from Products.ATContentTypes.interfaces.folder import IFilterFolder  # noqa
+from Products.ATContentTypes.interfaces.image import IATImage  # noqa
+from Products.ATContentTypes.interfaces.image import IImageContent  # noqa
+from Products.ATContentTypes.interfaces.interfaces import IATCTTool  # noqa
+from Products.ATContentTypes.interfaces.interfaces import IATContentType  # noqa
+from Products.ATContentTypes.interfaces.interfaces import ICalendarSupport  # noqa
+from Products.ATContentTypes.interfaces.interfaces import IHistoryAware  # noqa
+from Products.ATContentTypes.interfaces.interfaces import ISelectableConstrainTypes  # noqa
+from Products.ATContentTypes.interfaces.interfaces import ITextContent  # noqa
+from Products.ATContentTypes.interfaces.link import IATLink  # noqa
+from Products.ATContentTypes.interfaces.news import IATNewsItem  # noqa
+from Products.ATContentTypes.interfaces.topic import IATCTTopicsTool  # noqa
+from Products.ATContentTypes.interfaces.topic import IATTopic  # noqa
+from Products.ATContentTypes.interfaces.topic import IATTopicCriterion  # noqa
+from Products.ATContentTypes.interfaces.topic import IATTopicSearchCriterion  # noqa
+from Products.ATContentTypes.interfaces.topic import IATTopicSortCriterion  # noqa
+from Products.ATContentTypes.interfaces.factories import IATCTFileFactory  # noqa
diff --git a/Products/ATContentTypes/interfaces/document.py b/Products/ATContentTypes/interfaces/document.py
index dea59f2..393a267 100644
--- a/Products/ATContentTypes/interfaces/document.py
+++ b/Products/ATContentTypes/interfaces/document.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.interfaces.interfaces import ITextContent
 
 
diff --git a/Products/ATContentTypes/interfaces/event.py b/Products/ATContentTypes/interfaces/event.py
index 9781711..723ba3c 100644
--- a/Products/ATContentTypes/interfaces/event.py
+++ b/Products/ATContentTypes/interfaces/event.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.interfaces.interfaces import IATContentType
 
 
diff --git a/Products/ATContentTypes/interfaces/factories.py b/Products/ATContentTypes/interfaces/factories.py
index f9d2ebc..3233271 100644
--- a/Products/ATContentTypes/interfaces/factories.py
+++ b/Products/ATContentTypes/interfaces/factories.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.widgets.interfaces import IFileFactory
 
 
diff --git a/Products/ATContentTypes/interfaces/factory.py b/Products/ATContentTypes/interfaces/factory.py
index 2b369ac..f58d6e0 100644
--- a/Products/ATContentTypes/interfaces/factory.py
+++ b/Products/ATContentTypes/interfaces/factory.py
@@ -1,4 +1,6 @@
-from zope.interface import Attribute, Interface
+# -*- coding: utf-8 -*-
+from zope.interface import Attribute
+from zope.interface import Interface
 
 
 class IFactoryTool(Interface):
diff --git a/Products/ATContentTypes/interfaces/file.py b/Products/ATContentTypes/interfaces/file.py
index 0097b51..79f10b4 100644
--- a/Products/ATContentTypes/interfaces/file.py
+++ b/Products/ATContentTypes/interfaces/file.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope.interface import Interface
 
 
diff --git a/Products/ATContentTypes/interfaces/folder.py b/Products/ATContentTypes/interfaces/folder.py
index 1ebd264..cdaf1aa 100644
--- a/Products/ATContentTypes/interfaces/folder.py
+++ b/Products/ATContentTypes/interfaces/folder.py
@@ -1,5 +1,8 @@
-from zope.interface import Interface
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.interfaces.interfaces import IATContentType
+from zope.interface import Interface
+
+
 try:
     from Products.CMFPlone.interfaces.syndication import ISyndicatable
 except ImportError:
diff --git a/Products/ATContentTypes/interfaces/image.py b/Products/ATContentTypes/interfaces/image.py
index 08f40da..e358c6e 100644
--- a/Products/ATContentTypes/interfaces/image.py
+++ b/Products/ATContentTypes/interfaces/image.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope.interface import Interface
 
 
diff --git a/Products/ATContentTypes/interfaces/interfaces.py b/Products/ATContentTypes/interfaces/interfaces.py
index 5188986..f9fddae 100644
--- a/Products/ATContentTypes/interfaces/interfaces.py
+++ b/Products/ATContentTypes/interfaces/interfaces.py
@@ -1,11 +1,13 @@
-from zope.interface import Interface
-from zope.interface import Attribute
-
+# -*- coding: utf-8 -*-
+from Products.Archetypes.interfaces import IATHistoryAware
 from Products.Archetypes.interfaces import IBaseContent
-from Products.Archetypes.interfaces import IBaseFolder
+# Keep import for backwards compatibility:
+from Products.Archetypes.interfaces import IBaseFolder  # noqa
 from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault
-from Products.Archetypes.interfaces import IATHistoryAware
-from Products.CMFPlone.interfaces import ISelectableConstrainTypes
+# Keep import for backwards compatibility:
+from Products.CMFPlone.interfaces import ISelectableConstrainTypes  # noqa
+from zope.interface import Attribute
+from zope.interface import Interface
 
 
 class IATContentType(ISelectableBrowserDefault, IBaseContent):
diff --git a/Products/ATContentTypes/interfaces/link.py b/Products/ATContentTypes/interfaces/link.py
index c8ff826..746e731 100644
--- a/Products/ATContentTypes/interfaces/link.py
+++ b/Products/ATContentTypes/interfaces/link.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.interfaces.interfaces import IATContentType
 
 
diff --git a/Products/ATContentTypes/interfaces/news.py b/Products/ATContentTypes/interfaces/news.py
index 1ea53b6..fe48492 100644
--- a/Products/ATContentTypes/interfaces/news.py
+++ b/Products/ATContentTypes/interfaces/news.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.interfaces.document import IATDocument
 from Products.ATContentTypes.interfaces.image import IImageContent
 
diff --git a/Products/ATContentTypes/interfaces/topic.py b/Products/ATContentTypes/interfaces/topic.py
index b0c3321..b9770f5 100644
--- a/Products/ATContentTypes/interfaces/topic.py
+++ b/Products/ATContentTypes/interfaces/topic.py
@@ -1,5 +1,8 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.interfaces.interfaces import IATContentType
 from zope.interface import Interface
+
+
 try:
     from Products.CMFPlone.interfaces.syndication import ISyndicatable
 except ImportError:
diff --git a/Products/ATContentTypes/lib/__init__.py b/Products/ATContentTypes/lib/__init__.py
index 3c8e49b..1383934 100644
--- a/Products/ATContentTypes/lib/__init__.py
+++ b/Products/ATContentTypes/lib/__init__.py
@@ -1 +1,2 @@
+# -*- coding: utf-8 -*-
 # additional modules and packages for ATCT
diff --git a/Products/ATContentTypes/lib/calendarsupport.py b/Products/ATContentTypes/lib/calendarsupport.py
index 41563eb..de16e4a 100644
--- a/Products/ATContentTypes/lib/calendarsupport.py
+++ b/Products/ATContentTypes/lib/calendarsupport.py
@@ -1,13 +1,12 @@
+# -*- coding: utf-8 -*-
+from AccessControl import ClassSecurityInfo
+from App.class_init import InitializeClass
 from cStringIO import StringIO
-from zope.interface import implements
-
 from DateTime import DateTime
-from App.class_init import InitializeClass
-
+from Products.ATContentTypes.interfaces import ICalendarSupport
 from Products.CMFCore.permissions import View
-from AccessControl import ClassSecurityInfo
+from zope.interface import implements
 
-from Products.ATContentTypes.interfaces import ICalendarSupport
 
 PRODID = "-//AT Content Types//AT Event//EN"
 
@@ -42,8 +41,8 @@
 # blocking of the time slot. That's not appropriate for an event
 # calendar.
 # Also, previous version set "PRIORITY:3", which the RFC interprets as a high
-# priority. In absence of a priority field in the event, there's no justification
-# for that.
+# priority. In absence of a priority field in the event, there is no
+# justification for that.
 
 ICS_EVENT_END = """\
 CLASS:PUBLIC
@@ -120,8 +119,7 @@ class CalendarSupportMixin:
     },
     )
 
-    security.declareProtected(View, 'getICal')
-
+    @security.protected(View)
     def getICal(self):
         """get iCal data
         """
@@ -149,7 +147,8 @@ def getICal(self):
         if subject:
             out.write('CATEGORIES:%s\n' % ', '.join(subject))
 
-        # TODO  -- NO! see the RFC; ORGANIZER field is not to be used for non-group-scheduled entities
+        # TODO -- NO! see the RFC; ORGANIZER field is not to be used for
+        # non-group-scheduled entities.
         # ORGANIZER;CN=%(name):MAILTO=%(email)
         # ATTENDEE;CN=%(name);ROLE=REQ-PARTICIPANT:mailto:%(email)
 
@@ -173,8 +172,7 @@ def getICal(self):
         out.write(ICS_EVENT_END)
         return out.getvalue()
 
-    security.declareProtected(View, 'ics_view')
-
+    @security.protected(View)
     def ics_view(self, REQUEST, RESPONSE):
         """iCalendar output
         """
@@ -187,8 +185,7 @@ def ics_view(self, REQUEST, RESPONSE):
         out.write(ICS_FOOTER)
         return n2rn(out.getvalue())
 
-    security.declareProtected(View, 'getVCal')
-
+    @security.protected(View)
     def getVCal(self):
         """get vCal data
         """
@@ -214,8 +211,7 @@ def getVCal(self):
         # Insert missing code here :]
         return out.getvalue()
 
-    security.declareProtected(View, 'vcs_view')
-
+    @security.protected(View)
     def vcs_view(self, REQUEST, RESPONSE):
         """vCalendar output
         """
@@ -255,7 +251,13 @@ def foldLine(s):
 
     lineLen = 70
 
-    workStr = s.strip().replace('\r\n', '\n').replace('\r', '\n').replace('\n', '\\n')
+    workStr = s.strip().replace(
+        '\r\n',
+        '\n').replace(
+        '\r',
+        '\n').replace(
+            '\n',
+        '\\n')
     numLinesToBeProcessed = len(workStr) / lineLen
     startingChar = 0
     res = ''
diff --git a/Products/ATContentTypes/lib/constraintypes.py b/Products/ATContentTypes/lib/constraintypes.py
index a08a3e2..1d14d9f 100644
--- a/Products/ATContentTypes/lib/constraintypes.py
+++ b/Products/ATContentTypes/lib/constraintypes.py
@@ -1,33 +1,33 @@
-from zope.interface import implements
-
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
-from App.class_init import InitializeClass
-from Acquisition import aq_parent
 from Acquisition import aq_inner
-
-from Products.CMFCore.utils import getToolByName
-from Products.CMFCore.permissions import View
-from Products.CMFCore.permissions import ModifyPortalContent
-from Products.CMFCore.permissions import AddPortalContent
-from Products.CMFCore.PortalFolder import PortalFolderBase as PortalFolder
-
-from Products.Archetypes.atapi import Schema
-from Products.Archetypes.atapi import LinesField
+from Acquisition import aq_parent
+from App.class_init import InitializeClass
+from Products.Archetypes.atapi import DisplayList
+from Products.Archetypes.atapi import IntDisplayList
 from Products.Archetypes.atapi import IntegerField
+from Products.Archetypes.atapi import LinesField
 from Products.Archetypes.atapi import MultiSelectionWidget
+from Products.Archetypes.atapi import Schema
 from Products.Archetypes.atapi import SelectionWidget
-from Products.Archetypes.atapi import IntDisplayList
-from Products.Archetypes.atapi import DisplayList
-
 from Products.ATContentTypes import ATCTMessageFactory as _
 from Products.ATContentTypes import permission as ATCTPermissions
-
 from Products.ATContentTypes.interfaces import ISelectableConstrainTypes
+from Products.CMFCore.permissions import AddPortalContent
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFCore.permissions import View
+from Products.CMFCore.PortalFolder import PortalFolderBase as PortalFolder
+from Products.CMFCore.utils import getToolByName
+from zope.interface import implements
+
 
-# constants for enableConstrainMixin
-ACQUIRE = -1  # acquire locallyAllowedTypes from parent (default)
-DISABLED = 0  # use default behavior of PortalFolder which uses the FTI information
-ENABLED = 1  # allow types from locallyAllowedTypes only
+# Constants for enableConstrainMixin.
+# Acquire locallyAllowedTypes from parent (default):
+ACQUIRE = -1
+# Use default behavior of PortalFolder which uses the FTI information:
+DISABLED = 0
+# Allow types from locallyAllowedTypes only:
+ENABLED = 1
 
 # Note: ACQUIRED means get allowable types from parent (regardless of
 #  whether it supports IConstrainTypes) but only if parent is the same
@@ -37,71 +37,78 @@
 enableDisplayList = IntDisplayList((
     (ACQUIRE, _(u'constraintypes_acquire_label',
                 default=u'Use parent folder settings')),
-    (DISABLED, _(u'constraintypes_disable_label', default=u'Use portal default')),
-    (ENABLED, _(u'constraintypes_enable_label', default=u'Select manually')),
+    (DISABLED, _(u'constraintypes_disable_label',
+                 default=u'Use portal default')),
+    (ENABLED, _(u'constraintypes_enable_label',
+                default=u'Select manually')),
 ))
 
 ConstrainTypesMixinSchema = Schema((
-    IntegerField('constrainTypesMode',
-                 required=False,
-                 default_method="_ct_defaultConstrainTypesMode",
-                 vocabulary=enableDisplayList,
-                 languageIndependent=True,
-                 write_permission=ATCTPermissions.ModifyConstrainTypes,
-                 widget=SelectionWidget(
-                     label=_(u'label_contrain_types_mode',
-                             default=u'Constrain types mode'),
-                     description=_(u'description_constrain_types_mode',
-                                   default=u'Select the constraint type mode for this folder.'),
-                     visible={'view': 'invisible',
-                              'edit': 'invisible',
-                              },
-                 ),
-                 ),
-
-    LinesField('locallyAllowedTypes',
-               vocabulary='_ct_vocabularyPossibleTypes',
-               enforceVocabulary=False,
-               languageIndependent=True,
-               default_method='_ct_defaultAddableTypeIds',
-               accessor='getLocallyAllowedTypes',  # Respects ENABLE/DISABLE/ACQUIRE
-               write_permission=ATCTPermissions.ModifyConstrainTypes,
-               multiValued=True,
-               widget=MultiSelectionWidget(
-                   size=10,
-                   label=_(u'label_constrain_allowed_types',
-                           default=u'Permitted types'),
-                   description=_(u'description_constrain_allowed_types',
-                                 default=u'Select the types which will be addable inside this folder.'
-                                 ),
-                   visible={'view': 'invisible',
-                            'edit': 'invisible',
-                            },
-               ),
-               ),
-
-    LinesField('immediatelyAddableTypes',
-               vocabulary='_ct_vocabularyPossibleTypes',
-               enforceVocabulary=False,
-               languageIndependent=True,
-               default_method='_ct_defaultAddableTypeIds',
-               accessor='getImmediatelyAddableTypes',  # Respects ENABLE/DISABLE/ACQUIRE
-               write_permission=ATCTPermissions.ModifyConstrainTypes,
-               multiValued=True,
-               widget=MultiSelectionWidget(
-                   size=10,
-                   label=_(u'label_constrain_preferred_types',
-                           u'Preferred types'),
-                   description=_(u'description_constrain_preferred_types',
-                                 default=u'Select the types which will be addable '
-                                 'from the "Add new item" menu. Any '
-                                 'additional types set in the list above '
-                                 'will be addable from a separate form.'),
-                   visible={'view': 'invisible',
-                            'edit': 'invisible',
-                            },
-               ),
-               ),
+    IntegerField(
+        'constrainTypesMode',
+        required=False,
+        default_method="_ct_defaultConstrainTypesMode",
+        vocabulary=enableDisplayList,
+        languageIndependent=True,
+        write_permission=ATCTPermissions.ModifyConstrainTypes,
+        widget=SelectionWidget(
+            label=_(u'label_contrain_types_mode',
+                    default=u'Constrain types mode'),
+            description=_(
+                u'description_constrain_types_mode',
+                default=u'Select the constraint type mode for this folder.'),
+            visible={'view': 'invisible',
+                     'edit': 'invisible'},
+        ),
+    ),
+
+    LinesField(
+        'locallyAllowedTypes',
+        vocabulary='_ct_vocabularyPossibleTypes',
+        enforceVocabulary=False,
+        languageIndependent=True,
+        default_method='_ct_defaultAddableTypeIds',
+        accessor='getLocallyAllowedTypes',  # Respects ENABLE/DISABLE/ACQUIRE
+        write_permission=ATCTPermissions.ModifyConstrainTypes,
+        multiValued=True,
+        widget=MultiSelectionWidget(
+            size=10,
+            label=_(u'label_constrain_allowed_types',
+                    default=u'Permitted types'),
+            description=_(
+                u'description_constrain_allowed_types',
+                default=u'Select the types which will be addable '
+                        u'inside this folder.'
+            ),
+            visible={'view': 'invisible',
+                     'edit': 'invisible'},
+        ),
+    ),
+
+    LinesField(
+        'immediatelyAddableTypes',
+        vocabulary='_ct_vocabularyPossibleTypes',
+        enforceVocabulary=False,
+        languageIndependent=True,
+        default_method='_ct_defaultAddableTypeIds',
+        # Respects ENABLE/DISABLE/ACQUIRE:
+        accessor='getImmediatelyAddableTypes',
+        write_permission=ATCTPermissions.ModifyConstrainTypes,
+        multiValued=True,
+        widget=MultiSelectionWidget(
+            size=10,
+            label=_(u'label_constrain_preferred_types',
+                    u'Preferred types'),
+            description=_(
+                u'description_constrain_preferred_types',
+                default=u'Select the types which will be addable '
+                u'from the "Add new item" menu. Any '
+                u'additional types set in the list above '
+                u'will be addable from a separate form.'),
+            visible={'view': 'invisible',
+                     'edit': 'invisible'},
+        ),
+    ),
 ))
 
 
@@ -146,8 +153,7 @@ class ConstrainTypesMixin:
     #
     # Sanity validator
     #
-    security.declareProtected(ModifyPortalContent, 'validate_preferredTypes')
-
+    @security.protected(ModifyPortalContent)
     def validate_preferredTypes(self, value):
         """Ensure that the preferred types is a subset of the allowed types.
         """
@@ -156,7 +162,7 @@ def validate_preferredTypes(self, value):
 
         disallowed = []
         for p in preferred:
-            if not p in allowed:
+            if p not in allowed:
                 disallowed.append(p)
 
         if disallowed:
@@ -167,8 +173,7 @@ def validate_preferredTypes(self, value):
     # Overrides + supplements for CMF types machinery
     #
 
-    security.declareProtected(View, 'getLocallyAllowedTypes')
-
+    @security.protected(View)
     def getLocallyAllowedTypes(self, context=None):
         """If enableTypeRestrictions is ENABLE, return the list of types
         set. If it is ACQUIRE, get the types set on the parent so long
@@ -180,17 +185,20 @@ def getLocallyAllowedTypes(self, context=None):
         mode = self.getConstrainTypesMode()
 
         if mode == DISABLED:
-            return [fti.getId() for fti in self.getDefaultAddableTypes(context)]
+            return [fti.getId()
+                    for fti in self.getDefaultAddableTypes(context)]
         elif mode == ENABLED:
             return self.getField('locallyAllowedTypes').get(self)
         elif mode == ACQUIRE:
             parent = getParent(self)
             if not parent or parent.portal_type == 'Plone Site':
-                return [fti.getId() for fti in self.getDefaultAddableTypes(context)]
+                return [fti.getId()
+                        for fti in self.getDefaultAddableTypes(context)]
             elif not parentPortalTypeEqual(self):
                 # if parent.portal_type != self.portal_type:
                 default_addable_types = [
-                    fti.getId() for fti in self.getDefaultAddableTypes(context)]
+                    fti.getId() for fti in
+                    self.getDefaultAddableTypes(context)]
                 if ISelectableConstrainTypes.providedBy(parent):
                     return [t for t in parent.getLocallyAllowedTypes(context)
                             if t in default_addable_types]
@@ -203,10 +211,9 @@ def getLocallyAllowedTypes(self, context=None):
                 else:
                     return parent.getLocallyAllowedTypes()
         else:
-            raise ValueError, "Invalid value for enableAddRestriction"
-
-    security.declareProtected(View, 'getImmediatelyAddableTypes')
+            raise ValueError("Invalid value for enableAddRestriction")
 
+    @security.protected(View)
     def getImmediatelyAddableTypes(self, context=None):
         """Get the list of type ids which should be immediately addable.
         If enableTypeRestrictions is ENABLE, return the list set; if it is
@@ -236,7 +243,7 @@ def getImmediatelyAddableTypes(self, context=None):
                 parent = aq_parent(aq_inner(self))
                 return parent.getImmediatelyAddableTypes(context)
         else:
-            raise ValueError, "Invalid value for enableAddRestriction"
+            raise ValueError("Invalid value for enableAddRestriction")
 
     # overrides CMFCore's PortalFolder allowedTypes
     def allowedContentTypes(self, context=None):
@@ -266,8 +273,7 @@ def allowedContentTypes(self, context=None):
             return ftis
 
     # overrides CMFCore's PortalFolder invokeFactory
-    security.declareProtected(AddPortalContent, 'invokeFactory')
-
+    @security.protected(AddPortalContent)
     def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kw):
         """Invokes the portal_types tool
         """
@@ -283,15 +289,15 @@ def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kw):
             return PortalFolder.invokeFactory(self, type_name, id,
                                               RESPONSE=None, *args, **kw)
 
-        if not type_name in [fti.getId() for fti in self.allowedContentTypes()]:
+        if type_name not in [fti.getId()
+                             for fti in self.allowedContentTypes()]:
             raise ValueError('Disallowed subobject type: %s' % type_name)
 
         pt = getToolByName(self, 'portal_types')
         args = (type_name, self, id, RESPONSE) + args
         return pt.constructContent(*args, **kw)
 
-    security.declareProtected(View, 'getDefaultAddableTypes')
-
+    @security.protected(View)
     def getDefaultAddableTypes(self, context=None):
         """returns a list of normally allowed objects as ftis.
         Exactly like PortalFolder.allowedContentTypes except this
@@ -314,33 +320,30 @@ def getDefaultAddableTypes(self, context=None):
 
         return [t for t in result if t.isConstructionAllowed(context)]
 
-    security.declarePublic('canSetConstrainTypes')
-
+    @security.public
     def canSetConstrainTypes(self):
         """Find out if the current user is allowed to set the allowable types
         """
         mtool = getToolByName(self, 'portal_membership')
         member = mtool.getAuthenticatedMember()
-        return member.has_permission(ATCTPermissions.ModifyConstrainTypes, self)
+        return member.has_permission(
+            ATCTPermissions.ModifyConstrainTypes, self)
 
     #
     # Helper methods
     #
 
     # Vocab for type lists
-    security.declarePrivate('_ct_vocabularyPossibleTypes')
-
+    @security.private
     def _ct_vocabularyPossibleTypes(self):
         """Get a DisplayList of types which may be added (id -> title)
         """
-        typelist = [(fti.title_or_id(), fti.getId())
-                    for fti in self.getDefaultAddableTypes()]
-        typelist.sort()
+        typelist = sorted([(fti.title_or_id(), fti.getId())
+                           for fti in self.getDefaultAddableTypes()])
         return DisplayList([(id, title) for title, id in typelist])
 
     # Default method for type lists
-    security.declarePrivate('_ct_defaultAddableTypeIds')
-
+    @security.private
     def _ct_defaultAddableTypeIds(self):
         """Get a list of types which are addable in the ordinary case w/o the
         constraint machinery.
@@ -360,7 +363,8 @@ def _ct_defaultConstrainTypesMode(self):
         else:
             parent = aq_parent(aq_inner(self))
 
-        if ISelectableConstrainTypes.providedBy(parent) and parentPortalTypeEqual(self):
+        if ISelectableConstrainTypes.providedBy(
+                parent) and parentPortalTypeEqual(self):
             return ACQUIRE
         else:
             return DISABLED
diff --git a/Products/ATContentTypes/lib/historyaware.py b/Products/ATContentTypes/lib/historyaware.py
index 2a2fdc9..eded116 100644
--- a/Products/ATContentTypes/lib/historyaware.py
+++ b/Products/ATContentTypes/lib/historyaware.py
@@ -1,17 +1,15 @@
-import difflib
-
-from zope.interface import implements
-
-from DocumentTemplate.DT_Util import html_quote
-from App.class_init import InitializeClass
-
-from Products.CMFCore.utils import getToolByName
-from Products.CMFCore.permissions import View
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
-
+from App.class_init import InitializeClass
+from DocumentTemplate.DT_Util import html_quote
 from Products.Archetypes.atapi import ATHistoryAwareMixin
 from Products.ATContentTypes import permission as ATCTPermissions
 from Products.ATContentTypes.interfaces import IHistoryAware
+from Products.CMFCore.permissions import View
+from Products.CMFCore.utils import getToolByName
+from zope.interface import implements
+
+import difflib
 
 
 class HistoryAwareMixin(ATHistoryAwareMixin):
@@ -39,8 +37,7 @@ class HistoryAwareMixin(ATHistoryAwareMixin):
     },
     )
 
-    security.declarePrivate('getHistorySource')
-
+    @security.private
     def getHistorySource(self):
         """get source for HistoryAwareMixin
 
@@ -52,8 +49,7 @@ def getHistorySource(self):
         else:
             return ''
 
-    security.declareProtected(View, 'getLastEditor')
-
+    @security.protected(View)
     def getLastEditor(self):
         """Returns the user name of the last editor.
 
@@ -65,9 +61,7 @@ def getLastEditor(self):
         user = histories[0][3].split(" ")[-1].strip()
         return user
 
-    security.declareProtected(
-        ATCTPermissions.ViewHistory, 'getDocumentComparisons')
-
+    @security.protected(ATCTPermissions.ViewHistory)
     def getDocumentComparisons(self, max=10, filterComment=0):
         """Get history as unified diff
         """
diff --git a/Products/ATContentTypes/lib/imagetransform.py b/Products/ATContentTypes/lib/imagetransform.py
index ed5aca2..77e6049 100644
--- a/Products/ATContentTypes/lib/imagetransform.py
+++ b/Products/ATContentTypes/lib/imagetransform.py
@@ -1,21 +1,21 @@
-import logging
-from cStringIO import StringIO
-
-from Products.CMFCore.permissions import View
-from Products.CMFCore.permissions import ModifyPortalContent
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
-from ExtensionClass import Base
-from DateTime import DateTime
 from App.class_init import InitializeClass
+from cStringIO import StringIO
+from DateTime import DateTime
+from ExtensionClass import Base
 from OFS.Image import Image as OFSImage
 from OFS.Image import Pdata
-
-from Products.ATContentTypes.configuration import zconf
-from Products.ATContentTypes.config import HAS_PIL
 from Products.ATContentTypes import ATCTMessageFactory as _
+from Products.ATContentTypes.config import HAS_PIL
+from Products.ATContentTypes.configuration import zconf
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFCore.permissions import View
 
 # third party extension
 import exif
+import logging
+
 
 # the following code is based on the rotation code of Photo
 if HAS_PIL:
@@ -56,8 +56,7 @@ class ATCTImageTransform(Base):
 
     security = ClassSecurityInfo()
 
-    security.declarePrivate('getImageAsFile')
-
+    @security.private
     def getImageAsFile(self, img=None, scale=None):
         """Get the img as file like object
         """
@@ -84,8 +83,7 @@ def getImageAsFile(self, img=None, scale=None):
     # image related code like exif and rotation
     # partly based on CMFPhoto
 
-    security.declareProtected(View, 'getEXIF')
-
+    @security.protected(View)
     def getEXIF(self, img=None, refresh=False):
         """Get the exif informations of the file
 
@@ -127,8 +125,7 @@ def getEXIF(self, img=None, refresh=False):
         setattr(self, cache, exif_data)
         return exif_data
 
-    security.declareProtected(View, 'getEXIFOrientation')
-
+    @security.protected(View)
     def getEXIFOrientation(self):
         """Get the rotation and mirror orientation from the EXIF data
 
@@ -161,8 +158,7 @@ def getEXIFOrientation(self):
 
         return (mirror, rotation)
 
-    security.declareProtected(View, 'getEXIFOrigDate')
-
+    @security.protected(View)
     def getEXIFOrigDate(self):
         """Get the EXIF DateTimeOriginal from the image (or None)
         """
@@ -177,8 +173,7 @@ def getEXIFOrigDate(self):
                           raw_date, exc_info=True)
         return None
 
-    security.declareProtected(ModifyPortalContent, 'transformImage')
-
+    @security.protected(ModifyPortalContent)
     def transformImage(self, method, REQUEST=None):
         """
         Transform an Image:
@@ -193,7 +188,7 @@ def transformImage(self, method, REQUEST=None):
         except ValueError:
             method = int(REQUEST.form.get('method'))
         if method not in TRANSPOSE_MAP:
-            raise RuntimeError, "Unknown method %s" % method
+            raise RuntimeError("Unknown method %s" % method)
 
         target = self.absolute_url() + '/atct_image_transform'
 
@@ -224,8 +219,7 @@ def transformImage(self, method, REQUEST=None):
         if REQUEST:
             REQUEST.RESPONSE.redirect(target)
 
-    security.declareProtected(ModifyPortalContent, 'autoTransformImage')
-
+    @security.protected(ModifyPortalContent)
     def autoTransformImage(self, REQUEST=None):
         """Auto transform image according to EXIF data
 
@@ -243,15 +237,13 @@ def autoTransformImage(self, REQUEST=None):
         else:
             return mirror, rotation, transform
 
-    security.declareProtected(View, 'getTransformMap')
-
+    @security.protected(View)
     def getTransformMap(self):
         """Get map for tranforming the image
         """
         return [{'name': n, 'value': v} for v, n in TRANSPOSE_MAP.items()]
 
-    security.declareProtected(View, 'hasPIL')
-
+    @security.protected(View)
     def hasPIL(self):
         """Is PIL installed?
         """
diff --git a/Products/ATContentTypes/lib/validators.py b/Products/ATContentTypes/lib/validators.py
index 134fcc4..66c296e 100644
--- a/Products/ATContentTypes/lib/validators.py
+++ b/Products/ATContentTypes/lib/validators.py
@@ -1,25 +1,24 @@
-from types import FileType
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
-
 from Products.ATContentTypes.config import HAS_MX_TIDY
 from Products.ATContentTypes.config import MX_TIDY_ENABLED
 from Products.ATContentTypes.config import MX_TIDY_MIMETYPES
 from Products.ATContentTypes.config import MX_TIDY_OPTIONS
-
+from Products.PageTemplates.Expressions import getEngine
 from Products.validation.config import validation
 from Products.validation.interfaces.IValidator import IValidator
+from types import FileType
+from zope.interface import implements
+from zope.tal.htmltalparser import HTMLTALParser
+from zope.tal.talgenerator import TALGenerator
+from ZPublisher.HTTPRequest import FileUpload
 
-import re
 import encodings
 import logging
-logger = logging.getLogger('ATCT')
+import re
 
-from ZPublisher.HTTPRequest import FileUpload
 
-from zope.tal.htmltalparser import HTMLTALParser
-from zope.tal.talgenerator import TALGenerator
-from Products.PageTemplates.Expressions import getEngine
-from zope.interface import implements
+logger = logging.getLogger('ATCT')
 
 if HAS_MX_TIDY:
     from mx.Tidy import tidy as mx_tidy
@@ -32,16 +31,17 @@
 RE_MATCH_ERROR = re.compile('^line (\d+) column (\d+) - Error: (.*)$')
 ERROR_LINE = 'line %d column %d - Error: %s'
 
-# the following regex is safe because *? matches the minimal text in the body tag
-# and .* matches the maximum text between two body tags including other body tags
-# if they exists
+# The following regex is safe because *? matches the minimal text in the body
+# tag and .* matches the maximum text between two body tags including other
+# body tags if they exists
 RE_BODY = re.compile('<body[^>]*?>(.*)</body>', re.DOTALL)
 
 # get the encoding from an uploaded html-page
 # e.g. <meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 # we get ISO-8859-1 into the second match, the rest into the first and third.
 RE_GET_HTML_ENCODING = re.compile(
-    '(<meta.*?content-type.*?charset[\s]*=[\s]*)([^"]*?)("[^>]*?>)', re.S | re.I)
+    '(<meta.*?content-type.*?charset[\s]*=[\s]*)([^"]*?)("[^>]*?>)',
+    re.S | re.I)
 
 # subtract 11 line numbers from the warning/error
 SUBTRACT_LINES = 11
@@ -65,7 +65,7 @@ def __call__(self, value, *args, **kw):
         parser = HTMLTALParser(gen)
         try:
             parser.parseString(value)
-        except Exception, err:
+        except Exception as err:
             return ("Validation Failed(%s): \n %s" % (self.name, err))
         return 1
 
@@ -169,7 +169,7 @@ def __init__(self, name, title='', description=''):
 
     def __call__(self, value, *args, **kwargs):
         # calculate size
-        if isinstance(value, FileUpload) or type(value) is FileType \
+        if isinstance(value, FileUpload) or isinstance(value, FileType) \
                 or hasattr(aq_base(value), 'tell'):
             value.seek(0, 2)  # eof
             size = value.tell()
diff --git a/Products/ATContentTypes/migration/__init__.py b/Products/ATContentTypes/migration/__init__.py
index bb4bf33..b3450e8 100644
--- a/Products/ATContentTypes/migration/__init__.py
+++ b/Products/ATContentTypes/migration/__init__.py
@@ -1,2 +1,3 @@
+# -*- coding: utf-8 -*-
 """AT Content Types migration suite
 """
diff --git a/Products/ATContentTypes/migration/v1_2/__init__.py b/Products/ATContentTypes/migration/v1_2/__init__.py
index aa3120b..8530c1d 100644
--- a/Products/ATContentTypes/migration/v1_2/__init__.py
+++ b/Products/ATContentTypes/migration/v1_2/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """Migration functions for ATContentTypes 1.2. These are called during the
    usual CMFPlone migration.
 """
diff --git a/Products/ATContentTypes/permission.py b/Products/ATContentTypes/permission.py
index 9fbfd66..ca0083c 100644
--- a/Products/ATContentTypes/permission.py
+++ b/Products/ATContentTypes/permission.py
@@ -1,12 +1,13 @@
-from Products.CMFCore.permissions import setDefaultRoles
+# -*- coding: utf-8 -*-
+from plone.app.widgets.interfaces import IFieldPermissionChecker
 from Products.Archetypes.atapi import listTypes
+from Products.Archetypes.interfaces import IBaseObject
 from Products.ATContentTypes.config import PROJECTNAME
 from Products.ATContentTypes.interfaces import IATTopic
 from Products.ATContentTypes.interfaces import IATTopicCriterion
-from Products.Archetypes.interfaces import IBaseObject
-from plone.app.widgets.interfaces import IFieldPermissionChecker
-from zope.interface import implements
+from Products.CMFCore.permissions import setDefaultRoles
 from zope.component import adapts
+from zope.interface import implements
 
 
 TYPE_ROLES = ('Manager', 'Site Administrator', 'Owner')
diff --git a/Products/ATContentTypes/setuphandlers.py b/Products/ATContentTypes/setuphandlers.py
index f9729eb..e332bcb 100644
--- a/Products/ATContentTypes/setuphandlers.py
+++ b/Products/ATContentTypes/setuphandlers.py
@@ -1,19 +1,19 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
-from Products.ATContentTypes.lib import constraintypes
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.utils import bodyfinder
-from Products.CMFPlone.utils import _createObjectByType
 from plone.i18n.normalizer.interfaces import IURLNormalizer
 from plone.portlets.interfaces import ILocalPortletAssignmentManager
 from plone.portlets.interfaces import IPortletManager
+from plone.registry.interfaces import IRegistry
+from Products.ATContentTypes.lib import constraintypes
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces import ILanguageSchema
+from Products.CMFPlone.utils import _createObjectByType
+from Products.CMFPlone.utils import bodyfinder
+from zope.component import getUtility
 from zope.component import queryMultiAdapter
 from zope.component import queryUtility
 from zope.i18n.interfaces import ITranslationDomain
 from zope.i18n.locales import locales
-from plone.registry.interfaces import IRegistry
-from zope.component import getUtility
-
-from Products.CMFPlone.interfaces import ILanguageSchema
 
 
 def assignTitles(portal):
@@ -107,8 +107,8 @@ def setupPortalContent(p):
                     target_language=target_language,
                     default="Congratulations! You have successfully installed "
                             "Plone.")
-                translated_text = util.translate(u'front-text',
-                                                 target_language=target_language)
+                translated_text = util.translate(
+                    u'front-text', target_language=target_language)
                 if translated_text != u'front-text':
                     front_text = translated_text
 
diff --git a/Products/ATContentTypes/skins/ATContentTypes/atct_album_image.pt b/Products/ATContentTypes/skins/ATContentTypes/atct_album_image.pt
index 1f90398..d58a633 100644
--- a/Products/ATContentTypes/skins/ATContentTypes/atct_album_image.pt
+++ b/Products/ATContentTypes/skins/ATContentTypes/atct_album_image.pt
@@ -29,7 +29,7 @@
         <a tal:condition="image/size" tal:attributes="href string:${image/absolute_url}/view">
             <img src="#" alt="" tal:replace="structure python:image.tag(scale=photo_display)" />
         </a>
-        
+
         <div tal:define="b_start python:request.get('b_start', 0)">
           <a href="" tal:attributes="href string:${request/URL1}/view?b_start=$b_start">
             <img src="#" alt="Back to album"
diff --git a/Products/ATContentTypes/skins/ATContentTypes/atct_album_view.pt b/Products/ATContentTypes/skins/ATContentTypes/atct_album_view.pt
index 428aaf7..de9a541 100644
--- a/Products/ATContentTypes/skins/ATContentTypes/atct_album_view.pt
+++ b/Products/ATContentTypes/skins/ATContentTypes/atct_album_view.pt
@@ -17,7 +17,7 @@
                  getKssClasses nocall:kssClassesView/getKssClassesInlineEditable;
                  templateId template/getId;
                  batch python:Batch(images, 12, int(b_start), orphan=1)">
-    
+
     <div metal:define-macro="text-field-view"
          id="parent-fieldname-text" class="stx"
          tal:define="kss_class python:getKssClasses('text',
diff --git a/Products/ATContentTypes/skins/ATContentTypes/atct_history.pt b/Products/ATContentTypes/skins/ATContentTypes/atct_history.pt
index c786552..2bc8adb 100644
--- a/Products/ATContentTypes/skins/ATContentTypes/atct_history.pt
+++ b/Products/ATContentTypes/skins/ATContentTypes/atct_history.pt
@@ -66,9 +66,9 @@
               </p>
             </tal:nohistories>
         </div>
-        
+
     </tal:main-macro>
-</metal:main>        
+</metal:main>
 
 </body>
 </html>
diff --git a/Products/ATContentTypes/skins/ATContentTypes/atct_image_transform.pt b/Products/ATContentTypes/skins/ATContentTypes/atct_image_transform.pt
index 2a74db8..909acfb 100644
--- a/Products/ATContentTypes/skins/ATContentTypes/atct_image_transform.pt
+++ b/Products/ATContentTypes/skins/ATContentTypes/atct_image_transform.pt
@@ -11,10 +11,10 @@
     <h1 class="documentFirstHeading" tal:content="here/pretty_title_or_id">Title or id</h1>
     <div class="documentDescription" tal:content="here/Description">
         Description
-    </div>    
+    </div>
 
     <div id="content-core">
-        
+
         <img src="#" alt="" tal:replace="structure python:here.tag(scale='mini')" />
 
         <div>
diff --git a/Products/ATContentTypes/skins/ATContentTypes/atct_macros.pt b/Products/ATContentTypes/skins/ATContentTypes/atct_macros.pt
index 3c5b7f9..bc507fa 100644
--- a/Products/ATContentTypes/skins/ATContentTypes/atct_macros.pt
+++ b/Products/ATContentTypes/skins/ATContentTypes/atct_macros.pt
@@ -20,15 +20,15 @@
 
       <td style="padding: 0.5em; align: center;">
         <input class="noborder"
-               type="checkbox" 
-               value="" 
-               name="criterion_ids:list" 
+               type="checkbox"
+               value=""
+               name="criterion_ids:list"
                id=""
-               tal:attributes="value criterionid; 
+               tal:attributes="value criterionid;
                                id string:cb_${criterionid}"
                />
       </td>
-      
+
       <td style="padding: 0.5em;">
          <span tal:content="python:index.friendlyName or index.index" i18n:translate="" />
          <div class="formHelp" tal:content="index/description" i18n:translate="" />
@@ -37,9 +37,9 @@
 
         <div i18n:translate="" tal:content="criterion/Description" />
 
-        <div id="" 
+        <div id=""
              i18n:translate=""
-             class="formHelp" 
+             class="formHelp"
              style="visibility:hidden"
              tal:content="criterion/Description"
              tal:attributes="id string:${criterionid}_help;"
@@ -47,8 +47,8 @@
         String
         </div>
 
-        <input type="hidden" 
-               name="criteria.id:records" 
+        <input type="hidden"
+               name="criteria.id:records"
                value=""
                tal:attributes="value criterionid"
                />
diff --git a/Products/ATContentTypes/skins/ATContentTypes/atct_saveTopicSetup.cpy b/Products/ATContentTypes/skins/ATContentTypes/atct_saveTopicSetup.cpy
index 47ce477..65d9935 100644
--- a/Products/ATContentTypes/skins/ATContentTypes/atct_saveTopicSetup.cpy
+++ b/Products/ATContentTypes/skins/ATContentTypes/atct_saveTopicSetup.cpy
@@ -8,7 +8,7 @@
 ##parameters=
 ##title=Save topic setup modifications
 
-from Products.ATContentTypes import ATCTMessageFactory as _ 
+from Products.ATContentTypes import ATCTMessageFactory as _
 
 if state.button == 'index_save':
     next_page = 'atct_manageTopicIndex'
diff --git a/Products/ATContentTypes/skins/ATContentTypes/criterion_edit_form.cpt b/Products/ATContentTypes/skins/ATContentTypes/criterion_edit_form.cpt
index fb4177b..40a6724 100644
--- a/Products/ATContentTypes/skins/ATContentTypes/criterion_edit_form.cpt
+++ b/Products/ATContentTypes/skins/ATContentTypes/criterion_edit_form.cpt
@@ -36,10 +36,10 @@ var cache = {}
 function selectField() {
     var field = $(this).val()
     if (cache[field] == undefined)
-        $.getJSON('@@jsoncriteria', { field: field }, 
-            function(data) { 
-                cache[field] = data; 
-                updateCriterionType(data) 
+        $.getJSON('@@jsoncriteria', { field: field },
+            function(data) {
+                cache[field] = data;
+                updateCriterionType(data)
             });
     else updateCriterionType(cache[field]);
 };
diff --git a/Products/ATContentTypes/skins/ATContentTypes/criterion_remove.cpy b/Products/ATContentTypes/skins/ATContentTypes/criterion_remove.cpy
index ade984b..ee86942 100644
--- a/Products/ATContentTypes/skins/ATContentTypes/criterion_remove.cpy
+++ b/Products/ATContentTypes/skins/ATContentTypes/criterion_remove.cpy
@@ -18,8 +18,8 @@ for crit in criteria:
     id  = crit.getId()
 
     if id in criterion_ids:
-        remove.append(id) 
-        
+        remove.append(id)
+
 context.deleteCriterion(remove)
 
 msg = _(u'Removed criteria ${criteria}.',
diff --git a/Products/ATContentTypes/skins/ATContentTypes/formatCatalogMetadata.py b/Products/ATContentTypes/skins/ATContentTypes/formatCatalogMetadata.py
index 585a25c..c62ac62 100644
--- a/Products/ATContentTypes/skins/ATContentTypes/formatCatalogMetadata.py
+++ b/Products/ATContentTypes/skins/ATContentTypes/formatCatalogMetadata.py
@@ -6,9 +6,10 @@
 ##bind subpath=traverse_subpath
 ##parameters=value,long_format=True
 ##title=Determine whether the input is a DateTime or ISO date and localize it if so, also convert lists and dicts into reasonable strings.
+from AccessControl import Unauthorized
 from DateTime import DateTime
 from ZODB.POSException import ConflictError
-from AccessControl import Unauthorized
+
 
 if value is None:
     return ''
diff --git a/Products/ATContentTypes/skins/ATContentTypes/link_redirect_view.py b/Products/ATContentTypes/skins/ATContentTypes/link_redirect_view.py
index 0cc5a54..7b73598 100644
--- a/Products/ATContentTypes/skins/ATContentTypes/link_redirect_view.py
+++ b/Products/ATContentTypes/skins/ATContentTypes/link_redirect_view.py
@@ -14,6 +14,7 @@
 
 from Products.CMFCore.utils import getToolByName
 
+
 mtool = getToolByName(context, 'portal_membership')
 
 redirect_links = context.portal_registry['plone.redirect_links']
diff --git a/Products/ATContentTypes/skins/ATContentTypes/validate_remove_criterion.vpy b/Products/ATContentTypes/skins/ATContentTypes/validate_remove_criterion.vpy
index eb41098..5a3ba34 100644
--- a/Products/ATContentTypes/skins/ATContentTypes/validate_remove_criterion.vpy
+++ b/Products/ATContentTypes/skins/ATContentTypes/validate_remove_criterion.vpy
@@ -7,7 +7,7 @@
 ##parameters=
 ##
 from Products.ATContentTypes import ATCTMessageFactory as _
- 
+
 criterion_ids=context.REQUEST.get('criterion_ids')
 if not criterion_ids:
     msg = _(u'You must first select a criterion to remove.')
diff --git a/Products/ATContentTypes/tests/atctftestcase.py b/Products/ATContentTypes/tests/atctftestcase.py
index 0c2d952..526c4c3 100644
--- a/Products/ATContentTypes/tests/atctftestcase.py
+++ b/Products/ATContentTypes/tests/atctftestcase.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from hashlib import sha1 as sha
 from plone.app.testing import SITE_OWNER_NAME
 from plone.app.testing import SITE_OWNER_PASSWORD
@@ -8,6 +9,7 @@
 from Products.ATContentTypes.config import HAS_LINGUA_PLONE
 from Products.ATContentTypes.tests import atcttestcase
 from zope.component import getUtility
+
 import hmac
 
 
@@ -89,7 +91,8 @@ def test_createObject(self):
         self.assertEqual(new_obj.checkCreationFlag(), True)
 
     def check_newly_created(self):
-        """Objects created programmatically should not have the creation flag set"""
+        """Objects created programmatically should not have creation flag set.
+        """
         self.assertEqual(self.obj.checkCreationFlag(),
                          False)  # object is fully created
 
@@ -131,8 +134,9 @@ def test_linguaplone_views(self):
 
         def test_linguaplone_create_translation(self):
             # create translation creates a new object
-            response = self.publish('%s/createTranslation?language=de&set_language=de'
-                                    % self.obj_path, self.basic_auth)
+            response = self.publish(
+                '{}/createTranslation?language=de&set_language=de'.format(
+                    self.obj_path), self.basic_auth)
             self.assertEqual(response.getStatus(), 302)  # Redirect
 
             body = response.getBody()
diff --git a/Products/ATContentTypes/tests/atcttestcase.py b/Products/ATContentTypes/tests/atcttestcase.py
index 6f3fc94..c087828 100644
--- a/Products/ATContentTypes/tests/atcttestcase.py
+++ b/Products/ATContentTypes/tests/atcttestcase.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.blob.markings import markAs
 from plone.app.testing import TEST_USER_ID as default_user
 from plone.app.testing.bbb import PloneTestCase
@@ -25,8 +26,10 @@
 from Products.CMFCore.utils import getToolByName
 from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault
 from zope.interface.verify import verifyObject
+
 import os
 
+
 test_home = os.path.dirname(__file__)
 
 
@@ -37,8 +40,8 @@ def afterSetUp(self):
         #  - Large Plone Folder
         #  - Topic
         user = self.portal.acl_users.getUserById(default_user)
-        orig_roles = self.portal.acl_users.portal_role_manager.getRolesForPrincipal(
-            user)
+        role_manager = self.portal.acl_users.portal_role_manager
+        orig_roles = role_manager.getRolesForPrincipal(user)
         self.setRoles(['Manager'])
         ttool = self.portal.portal_types
         cb_copy_data = ttool.manage_copyObjects(['Folder'])
diff --git a/Products/ATContentTypes/tests/testContentTypes.py b/Products/ATContentTypes/tests/testContentTypes.py
index 78343cc..c61e788 100644
--- a/Products/ATContentTypes/tests/testContentTypes.py
+++ b/Products/ATContentTypes/tests/testContentTypes.py
@@ -1,8 +1,10 @@
+# -*- coding: utf-8 -*-
 from plone.app.testing.bbb import PloneTestCase
 from Products.ATContentTypes.interfaces import IATContentType
 from Products.CMFPlone.tests import dummy
 from zope.i18nmessageid.message import Message
 
+
 AddPortalTopics = 'Add portal topics'
 
 atct_types = ('Document', 'Event', 'File', 'Folder',
diff --git a/Products/ATContentTypes/tests/test_atdocument.py b/Products/ATContentTypes/tests/test_atdocument.py
index a3b0e1b..3475432 100644
--- a/Products/ATContentTypes/tests/test_atdocument.py
+++ b/Products/ATContentTypes/tests/test_atdocument.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from cgi import FieldStorage
 from Products.Archetypes import atapi
 from Products.Archetypes.interfaces.layer import ILayerContainer
@@ -7,7 +8,8 @@
 from Products.ATContentTypes.interfaces import IHistoryAware
 from Products.ATContentTypes.interfaces import ITextContent
 from Products.ATContentTypes.lib.validators import TidyHtmlWithCleanupValidator
-from Products.ATContentTypes.tests import atcttestcase, atctftestcase
+from Products.ATContentTypes.tests import atctftestcase
+from Products.ATContentTypes.tests import atcttestcase
 from Products.ATContentTypes.tests.utils import dcEdit
 from Products.ATContentTypes.tests.utils import input_file_path
 from Products.ATContentTypes.tests.utils import NotRequiredTidyHTMLValidator
@@ -15,8 +17,10 @@
 from Products.CMFCore.permissions import View
 from zope.interface.verify import verifyObject
 from ZPublisher.HTTPRequest import FileUpload
+
 import transaction
 
+
 example_stx = """
 Header
 
@@ -119,9 +123,11 @@ def test_tidy_validator_with_upload_wrong_encoding(self):
             input_file_name = 'tidy1-in.html'
             in_file = open(input_file_path(input_file_name))
             env = {'REQUEST_METHOD': 'PUT'}
-            headers = {'content-type': 'text/html',
-                       'content-length': len(in_file.read()),
-                       'content-disposition': 'attachment; filename=%s' % input_file_name}
+            headers = {
+                'content-type': 'text/html',
+                'content-length': len(in_file.read()),
+                'content-disposition': 'attachment; filename={}'.format(
+                    input_file_name)}
             in_file.seek(0)
             fs = FieldStorage(fp=in_file, environ=env, headers=headers)
             f = FileUpload(fs)
@@ -230,8 +236,10 @@ def test_textField(self):
         self.assertTrue(field.type == 'text', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AnnotationStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AnnotationStorage(migrate=True),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') ==
+            atapi.AnnotationStorage(migrate=True),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == NotRequiredTidyHTMLValidator,
                         'Value is %s' % repr(field.validators))
@@ -257,7 +265,8 @@ class TestATDocumentFunctional(atctftestcase.ATCTIntegrationTestCase):
     views = ('document_view', )
 
     def test_id_change_on_initial_edit(self):
-        """Make sure Id is taken from title on initial edit and not otherwise"""
+        """Make sure Id is taken from title on initial edit and not otherwise.
+        """
         # first create an object using the createObject script
         auth = self.getAuthToken()
         response = self.publish(
@@ -286,16 +295,22 @@ def test_id_change_on_initial_edit(self):
 
         from plone.protect import auto
         auto.CSRF_DISABLED = True
-        response = self.publish('%s/atct_edit?form.submitted=1&title=%s&text=Blank&_authenticator=%s' %
-                                (new_obj_path, obj_title, auth), self.basic_auth)  # Edit object
+        # Edit object
+        response = self.publish(
+            '{}/atct_edit?form.submitted=1&title={}&text=Blank'
+            '&_authenticator={}'.format(
+                new_obj_path, obj_title, auth), self.basic_auth)
         self.assertEqual(response.getStatus(), 302)  # OK
         new_obj = self.folder[new_id]
         self.assertEqual(new_obj.getId(), new_id)  # does id match
         self.assertEqual(new_obj.checkCreationFlag(),
                          False)  # object is fully created
         new_title = "Second Title"
-        response = self.publish('%s/atct_edit?form.submitted=1&title=%s&text=Blank&_authenticator=%s' % (
-            '/%s' % new_obj.absolute_url(1), new_title, auth), self.basic_auth)  # Edit object
+        # Edit object
+        response = self.publish(
+            '/{}/atct_edit?form.submitted=1&title={}&text=Blank'
+            '&_authenticator={}'.format(
+                new_obj.absolute_url(1), new_title, auth), self.basic_auth)
         self.assertEqual(response.getStatus(), 302)  # OK
         self.assertEqual(new_obj.getId(), new_id)  # id shouldn't have changed
         auto.CSRF_DISABLED = False
diff --git a/Products/ATContentTypes/tests/test_atevent.py b/Products/ATContentTypes/tests/test_atevent.py
index fcab35e..465193b 100644
--- a/Products/ATContentTypes/tests/test_atevent.py
+++ b/Products/ATContentTypes/tests/test_atevent.py
@@ -1,10 +1,12 @@
+# -*- coding: utf-8 -*-
 from DateTime import DateTime
 from Products.Archetypes import atapi
 from Products.Archetypes.interfaces.layer import ILayerContainer
 from Products.ATContentTypes.content.event import ATEvent
 from Products.ATContentTypes.interfaces import IATEvent
 from Products.ATContentTypes.interfaces import ICalendarSupport
-from Products.ATContentTypes.tests import atcttestcase, atctftestcase
+from Products.ATContentTypes.tests import atctftestcase
+from Products.ATContentTypes.tests import atcttestcase
 from Products.ATContentTypes.tests.utils import dcEdit
 from Products.ATContentTypes.tests.utils import EmailValidator
 from Products.ATContentTypes.tests.utils import EmptyValidator
@@ -14,8 +16,10 @@
 from Products.CMFCore.permissions import View
 from Testing import ZopeTestCase  # side effect import. leave it here.
 from zope.interface.verify import verifyObject
+
 import unittest
 
+
 ZopeTestCase  # pyflakes
 
 
@@ -172,8 +176,9 @@ def test_locationField(self):
         self.assertTrue(field.type == 'string', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == EmptyValidator,
                         'Value is %s' % str(field.validators))
@@ -214,8 +219,9 @@ def test_subjectField(self):
         self.assertTrue(field.type == 'lines', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.MetadataStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.MetadataStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.MetadataStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == EmptyValidator,
                         'Value is %s' % repr(field.validators))
@@ -255,8 +261,9 @@ def test_eventUrlField(self):
         self.assertTrue(field.type == 'string', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertEqual(field.validators, URLValidator)
         self.assertTrue(isinstance(field.widget, atapi.StringWidget),
@@ -301,8 +308,9 @@ def test_startDateField(self):
         self.assertTrue(field.type == 'datetime', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == (),
                         'Value is %s' % str(field.validators))
@@ -348,8 +356,9 @@ def test_endDateField(self):
         self.assertTrue(field.type == 'datetime', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == (),
                         'Value is %s' % str(field.validators))
@@ -393,8 +402,9 @@ def test_contactNameField(self):
         self.assertTrue(field.type == 'string', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == EmptyValidator,
                         'Value is %s' % str(field.validators))
@@ -438,8 +448,9 @@ def test_contactEmailField(self):
         self.assertTrue(field.type == 'string', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == EmailValidator,
                         'Value is %s' % str(field.validators))
@@ -483,8 +494,9 @@ def test_contactPhoneField(self):
         self.assertTrue(field.type == 'string', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertEqual(field.validators, EmptyValidator)
         self.assertTrue(isinstance(field.widget, atapi.StringWidget),
@@ -527,8 +539,9 @@ def test_attendeesField(self):
         self.assertTrue(field.type == 'lines', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(isinstance(field.widget, atapi.LinesWidget),
                         'Value is %s' % id(field.widget))
@@ -570,8 +583,10 @@ def test_textField(self):
         self.assertTrue(field.type == 'text', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AnnotationStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AnnotationStorage(migrate=True),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') ==
+            atapi.AnnotationStorage(migrate=True),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == NotRequiredTidyHTMLValidator,
                         'Value is %s' % repr(field.validators))
diff --git a/Products/ATContentTypes/tests/test_atfile.py b/Products/ATContentTypes/tests/test_atfile.py
index 60cd146..b5a331e 100644
--- a/Products/ATContentTypes/tests/test_atfile.py
+++ b/Products/ATContentTypes/tests/test_atfile.py
@@ -1,22 +1,23 @@
 # -*- coding: utf-8 -*-
 
-import unittest
-from Testing import ZopeTestCase  # side effect import. leave it here.
-ZopeTestCase  # pyflakes
-from Products.ATContentTypes.tests import atcttestcase, atctftestcase
-
-from Products.CMFCore.permissions import View
-from Products.CMFCore.permissions import ModifyPortalContent
-from Products.Archetypes.interfaces.layer import ILayerContainer
-from Products.Archetypes import atapi
-from Products.ATContentTypes.tests.utils import dcEdit
-import StringIO
-
 from plone.app.blob.content import ATBlob
+from Products.Archetypes import atapi
+from Products.Archetypes.interfaces.layer import ILayerContainer
 from Products.ATContentTypes.interfaces import IATFile
 from Products.ATContentTypes.interfaces import IFileContent
+from Products.ATContentTypes.tests import atctftestcase
+from Products.ATContentTypes.tests import atcttestcase
+from Products.ATContentTypes.tests.utils import dcEdit
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFCore.permissions import View
+from Testing import ZopeTestCase  # side effect import. leave it here.
 from zope.interface.verify import verifyObject
 
+import StringIO
+import unittest
+
+
+ZopeTestCase  # pyflakes
 
 file_text = """
 foooooo
@@ -156,7 +157,7 @@ def test_fileField(self):
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 1, 'Value is %s' % field.required)
         self.assertFalse(field.default, 'Value is %s' % str(field.default))
-        self.assertTrue(field.searchable == True,
+        self.assertTrue(field.searchable,
                         'Value is %s' % field.searchable)
         self.assertTrue(field.vocabulary == (),
                         'Value is %s' % str(field.vocabulary))
@@ -180,11 +181,16 @@ def test_fileField(self):
         self.assertTrue(field.type == 'blob', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AnnotationStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AnnotationStorage(migrate=True),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') ==
+            atapi.AnnotationStorage(migrate=True),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
-        self.assertTrue(field.validators == "(('isNonEmptyFile', V_REQUIRED), ('checkFileMaxSize', V_REQUIRED))",
-                        'Value is %s' % str(field.validators))
+        self.assertTrue(
+            field.validators ==
+            "(('isNonEmptyFile', V_REQUIRED), " +
+            "('checkFileMaxSize', V_REQUIRED))",
+            'Value is %s' % str(field.validators))
         self.assertTrue(isinstance(field.widget, atapi.FileWidget),
                         'Value is %s' % id(field.widget))
         vocab = field.Vocabulary(dummy)
diff --git a/Products/ATContentTypes/tests/test_atfolder.py b/Products/ATContentTypes/tests/test_atfolder.py
index 77d025e..ef52e0f 100644
--- a/Products/ATContentTypes/tests/test_atfolder.py
+++ b/Products/ATContentTypes/tests/test_atfolder.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from OFS.interfaces import IOrderedContainer as IOrderedContainer
 from plone.app.testing import SITE_OWNER_NAME as portal_owner
 from Products.ATContentTypes.content.folder import ATBTreeFolder
@@ -5,7 +6,8 @@
 from Products.ATContentTypes.interfaces import IATBTreeFolder
 from Products.ATContentTypes.interfaces import IATFolder
 from Products.ATContentTypes.interfaces import ISelectableConstrainTypes
-from Products.ATContentTypes.tests import atcttestcase, atctftestcase
+from Products.ATContentTypes.tests import atctftestcase
+from Products.ATContentTypes.tests import atcttestcase
 from Products.ATContentTypes.tests.utils import dcEdit
 from zope.interface.verify import verifyObject
 
@@ -120,7 +122,8 @@ def test_dictBehavior(self):
         try:
             self.assertEqual(['d1'], list(f1))  # iter
         except (KeyError, AttributeError):
-            print '\nKnown failure: please see comments in `test_dictBehavior`!'
+            print('\nKnown failure: please see comments in '
+                  '`test_dictBehavior`!')
         self.assertEqual(['d1'], list(f1.aq_base))  # iter (this works, weird!)
         self.assertTrue(f1.values()[0].aq_base is new_doc.aq_base)  # values
         self.assertTrue(f1.get('d1').aq_base is new_doc.aq_base)  # get
@@ -153,7 +156,8 @@ def test_dynamic_view_without_view(self):
     def test_selectViewTemplate(self):
         # create an object using the createObject script
         self.publish(
-            '%s/selectViewTemplate?templateId=atct_album_view&_authenticator=%s' % (
+            '{}/selectViewTemplate?templateId=atct_album_view'
+            '&_authenticator={}'.format(
                 self.obj_path, self.getAuthToken(portal_owner)),
             self.owner_auth)
         self.assertEqual(self.obj.getLayout(), 'atct_album_view')
diff --git a/Products/ATContentTypes/tests/test_atimage.py b/Products/ATContentTypes/tests/test_atimage.py
index 170b541..e59f29f 100644
--- a/Products/ATContentTypes/tests/test_atimage.py
+++ b/Products/ATContentTypes/tests/test_atimage.py
@@ -7,12 +7,15 @@
 from Products.Archetypes.interfaces.layer import ILayerContainer
 from Products.ATContentTypes.interfaces import IATImage
 from Products.ATContentTypes.interfaces import IImageContent
-from Products.ATContentTypes.tests import atcttestcase, atctftestcase
-from Products.ATContentTypes.tests.utils import dcEdit, PACKAGE_HOME
+from Products.ATContentTypes.tests import atctftestcase
+from Products.ATContentTypes.tests import atcttestcase
+from Products.ATContentTypes.tests.utils import dcEdit
+from Products.ATContentTypes.tests.utils import PACKAGE_HOME
 from Products.CMFCore.permissions import ModifyPortalContent
 from Products.CMFCore.permissions import View
 from transaction import commit
 from zope.interface.verify import verifyObject
+
 import exif
 import os
 
@@ -44,8 +47,10 @@ def editATCT(obj):
 
 
 class TestIDFromTitle(FunctionalTestCase):
-    """Browsertests to make sure ATImages derive their default IDs from their titles"""
-    # TODO: Merge into TestATImageFunctional, below.
+    """Browsertests to make sure ATImages derive default IDs from titles.
+
+    TODO: Merge into TestATImageFunctional, below.
+    """
 
     def afterSetUp(self):
         self.userId = 'fred'
@@ -257,11 +262,16 @@ def test_imageField(self):
         self.assertTrue(field.type == 'blob', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AnnotationStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AnnotationStorage(migrate=True),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') ==
+            atapi.AnnotationStorage(migrate=True),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
-        self.assertTrue(field.validators == "(('isNonEmptyFile', V_REQUIRED), ('checkImageMaxSize', V_REQUIRED))",
-                        'Value is %s' % str(field.validators))
+        self.assertTrue(
+            field.validators ==
+            "(('isNonEmptyFile', V_REQUIRED), " +
+            "('checkImageMaxSize', V_REQUIRED))",
+            'Value is %s' % str(field.validators))
         self.assertTrue(isinstance(field.widget, atapi.ImageWidget),
                         'Value is %s' % id(field.widget))
         vocab = field.Vocabulary(dummy)
diff --git a/Products/ATContentTypes/tests/test_atlink.py b/Products/ATContentTypes/tests/test_atlink.py
index 2526d87..85f3122 100644
--- a/Products/ATContentTypes/tests/test_atlink.py
+++ b/Products/ATContentTypes/tests/test_atlink.py
@@ -1,13 +1,17 @@
+# -*- coding: utf-8 -*-
 from Products.Archetypes import atapi
 from Products.Archetypes.interfaces.layer import ILayerContainer
 from Products.ATContentTypes.content.link import ATLink
 from Products.ATContentTypes.interfaces import IATLink
-from Products.ATContentTypes.tests import atcttestcase, atctftestcase
+from Products.ATContentTypes.tests import atctftestcase
+from Products.ATContentTypes.tests import atcttestcase
 from Products.CMFCore.permissions import ModifyPortalContent
 from Products.CMFCore.permissions import View
 from zope.interface.verify import verifyObject
+
 import unittest
 
+
 URL = 'http://www.example.org/'
 
 
@@ -112,8 +116,9 @@ def test_remoteUrlField(self):
         self.assertTrue(field.type == 'string', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == (),
                         'Value is %s' % str(field.validators))
diff --git a/Products/ATContentTypes/tests/test_atnewsitem.py b/Products/ATContentTypes/tests/test_atnewsitem.py
index 519f806..f8ba964 100644
--- a/Products/ATContentTypes/tests/test_atnewsitem.py
+++ b/Products/ATContentTypes/tests/test_atnewsitem.py
@@ -1,15 +1,18 @@
+# -*- coding: utf-8 -*-
 from Products.Archetypes import atapi
 from Products.Archetypes.interfaces.layer import ILayerContainer
 from Products.ATContentTypes.content.newsitem import ATNewsItem
 from Products.ATContentTypes.interfaces import IATNewsItem
 from Products.ATContentTypes.interfaces import IImageContent
 from Products.ATContentTypes.interfaces import ITextContent
-from Products.ATContentTypes.tests import atcttestcase, atctftestcase
+from Products.ATContentTypes.tests import atctftestcase
+from Products.ATContentTypes.tests import atcttestcase
 from Products.ATContentTypes.tests.utils import dcEdit
 from Products.ATContentTypes.tests.utils import NotRequiredTidyHTMLValidator
 from Products.CMFCore.permissions import ModifyPortalContent
 from Products.CMFCore.permissions import View
 from zope.interface.verify import verifyObject
+
 import unittest
 
 
@@ -95,8 +98,10 @@ def test_textField(self):
         self.assertTrue(field.type == 'text', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AnnotationStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AnnotationStorage(migrate=True),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') ==
+            atapi.AnnotationStorage(migrate=True),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.validators == NotRequiredTidyHTMLValidator,
                         'Value is %s' % repr(field.validators))
diff --git a/Products/ATContentTypes/tests/test_attopic.py b/Products/ATContentTypes/tests/test_attopic.py
index 75ffecf..cfd9211 100644
--- a/Products/ATContentTypes/tests/test_attopic.py
+++ b/Products/ATContentTypes/tests/test_attopic.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from OFS.interfaces import IOrderedContainer
 from Products.Archetypes import atapi
 from Products.Archetypes.Field import BooleanField
@@ -6,13 +7,15 @@
 from Products.ATContentTypes.content.topic import ATTopic
 from Products.ATContentTypes.interfaces import IATTopic
 from Products.ATContentTypes.permission import ChangeTopics
-from Products.ATContentTypes.tests import atcttestcase, atctftestcase
+from Products.ATContentTypes.tests import atctftestcase
+from Products.ATContentTypes.tests import atcttestcase
 from Products.ATContentTypes.tests.utils import dcEdit
 from Products.ATContentTypes.tests.utils import EmptyValidator
 from Products.CMFCore.permissions import View
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.PloneBatch import Batch
 from zope.interface.verify import verifyObject
+
 import unittest
 
 
@@ -218,17 +221,23 @@ def test_nested(self):
 
     def test_nested_friendly_date_criteria(self):
         """
-        The queries before adding fix for https://dev.plone.org/plone/ticket/8827
+        The queries before adding fix for
+        https://dev.plone.org/plone/ticket/8827
         where subtopics should inhert start / end keys
         topic query: {
-        'start': {'query': DateTime('2009/01/30 21:54:27.370 GMT+1'), 'range': 'min'}
+          'start': {'query': DateTime('2009/01/30 21:54:27.370 GMT+1'),
+          'range': 'min'}
         }
         subtopic query: {
-        'start': {'query': DateTime('2009/01/30 21:54:27.444 GMT+1'), 'range': 'min'},
-        'end': {'query': DateTime('2009/01/30 21:54:27.445 GMT+1'), 'range': 'max'}
+          'start': {'query': DateTime('2009/01/30 21:54:27.444 GMT+1'),
+                    'range': 'min'},
+          'end': {'query': DateTime('2009/01/30 21:54:27.445 GMT+1'),
+                  'range': 'max'}
         }
-        ^^ the 'start' key in the subtopic query is odd and results in combination
-        with the 'end' key in zero results even if there is old/past items.
+
+        ^^ the 'start' key in the subtopic query is odd and results in
+        combination with the 'end' key in zero results even if there is
+        old/past items.
         """
         # Add topic - future items
         topic = self._ATCT
@@ -470,7 +479,7 @@ def test_acquireCriteriaField(self):
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 0, 'Value is %s' % field.required)
         self.assertFalse(field.default, 'Value is %s' %
-                        str(field.default))
+                         str(field.default))
         self.assertTrue(field.searchable == 0, 'Value is %s' %
                         field.searchable)
         self.assertTrue(field.vocabulary == field_vocab,
@@ -495,8 +504,9 @@ def test_acquireCriteriaField(self):
         self.assertTrue(field.type == 'boolean', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(field.validators == EmptyValidator,
                         'Value is %s' % str(field.validators))
         self.assertTrue(isinstance(field.widget, atapi.BooleanWidget),
@@ -515,7 +525,7 @@ def test_limitNumberField(self):
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 0, 'Value is %s' % field.required)
         self.assertFalse(field.default, 'Value is %s' %
-                        str(field.default))
+                         str(field.default))
         self.assertTrue(field.searchable == 0, 'Value is %s' %
                         field.searchable)
         self.assertTrue(field.vocabulary == field_vocab,
@@ -540,8 +550,9 @@ def test_limitNumberField(self):
         self.assertTrue(field.type == 'boolean', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(field.validators == EmptyValidator,
                         'Value is %s' % str(field.validators))
         self.assertTrue(isinstance(field.widget, atapi.BooleanWidget),
@@ -583,8 +594,9 @@ def test_itemCountField(self):
         self.assertTrue(field.type == 'integer', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(field.validators == EmptyValidator,
                         'Value is %s' % str(field.validators))
         self.assertTrue(isinstance(field.widget, atapi.IntegerWidget),
@@ -603,7 +615,7 @@ def test_customViewField(self):
         self.assertTrue(ILayerContainer.providedBy(field))
         self.assertTrue(field.required == 0, 'Value is %s' % field.required)
         self.assertFalse(field.default, 'Value is %s' %
-                        str(field.default))
+                         str(field.default))
         self.assertTrue(field.searchable == 0, 'Value is %s' %
                         field.searchable)
         self.assertTrue(field.vocabulary == (),
@@ -628,8 +640,9 @@ def test_customViewField(self):
         self.assertTrue(field.type == 'boolean', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(field.validators == EmptyValidator,
                         'Value is %s' % str(field.validators))
         self.assertTrue(isinstance(field.widget, atapi.BooleanWidget),
@@ -673,8 +686,9 @@ def test_customViewFieldsField(self):
         self.assertTrue(field.type == 'lines', 'Value is %s' % field.type)
         self.assertTrue(isinstance(field.storage, atapi.AttributeStorage),
                         'Value is %s' % type(field.storage))
-        self.assertTrue(field.getLayerImpl('storage') == atapi.AttributeStorage(),
-                        'Value is %s' % field.getLayerImpl('storage'))
+        self.assertTrue(
+            field.getLayerImpl('storage') == atapi.AttributeStorage(),
+            'Value is %s' % field.getLayerImpl('storage'))
         self.assertTrue(field.validators == EmptyValidator,
                         'Value is %s' % str(field.validators))
         self.assertTrue(isinstance(field.widget, atapi.InAndOutWidget),
diff --git a/Products/ATContentTypes/tests/test_browserdefaultmixin.py b/Products/ATContentTypes/tests/test_browserdefaultmixin.py
index 8ffe846..d87f1c9 100644
--- a/Products/ATContentTypes/tests/test_browserdefaultmixin.py
+++ b/Products/ATContentTypes/tests/test_browserdefaultmixin.py
@@ -1,10 +1,13 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes import permission
 from Products.ATContentTypes.tests import atcttestcase
 from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin
 from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault
+
 import re
 import unittest
 
+
 tests = []
 
 RE_REMOVE_AUTHENTICATOR = re.compile(r'_authenticator=.*\"')
@@ -27,10 +30,12 @@ def afterSetUp(self):
         self.app.REQUEST.set('PARENTS', [self.app])
 
     def test_isMixedIn(self):
-        self.assertTrue(isinstance(self.af, BrowserDefaultMixin),
-                        "ISelectableBrowserDefault was not mixed in to ATFolder")
-        self.assertTrue(ISelectableBrowserDefault.providedBy(self.af),
-                        "ISelectableBrowserDefault not implemented by ATFolder instance")
+        self.assertTrue(
+            isinstance(self.af, BrowserDefaultMixin),
+            "ISelectableBrowserDefault was not mixed in to ATFolder")
+        self.assertTrue(
+            ISelectableBrowserDefault.providedBy(self.af),
+            "ISelectableBrowserDefault not implemented by ATFolder instance")
 
     def test_defaultFolderViews(self):
         self.assertEqual(self.af.getLayout(), 'folder_listing')
diff --git a/Products/ATContentTypes/tests/test_bugs.py b/Products/ATContentTypes/tests/test_bugs.py
index ef6b8d8..03b6b6f 100644
--- a/Products/ATContentTypes/tests/test_bugs.py
+++ b/Products/ATContentTypes/tests/test_bugs.py
@@ -1,7 +1,9 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 from Products.ATContentTypes.tests import atcttestcase
 from Products.validation.interfaces.IValidator import IValidationChain
 
+
 tests = []
 
 
@@ -33,6 +35,7 @@ def test_striphtmlbug(self):
         self.assertEqual(
             d.Title(), "HTML end tags start with </ and end with >")
 
-    def test_validation_layer_from_id_field_from_base_schema_was_initialized(self):
+    def test_validation_layer_from_id_field_from_base_schema_was_initialized(
+            self):
         field = ATContentTypeSchema['id']
         self.assertTrue(IValidationChain.providedBy(field.validators))
diff --git a/Products/ATContentTypes/tests/test_calendar.py b/Products/ATContentTypes/tests/test_calendar.py
index c485751..02ba9ff 100644
--- a/Products/ATContentTypes/tests/test_calendar.py
+++ b/Products/ATContentTypes/tests/test_calendar.py
@@ -161,14 +161,15 @@ def testRenderingForTopic(self):
         view.render()
         self.assertEqual(len(headers), 2)
         self.assertEqual(headers['Content-Type'], 'text/calendar')
-        self.checkOrder(''.join(output),
-                        'BEGIN:VCALENDAR',
-                        'BEGIN:VEVENT',
-                        'SUMMARY:Plone Conf 2008',
-                        'LOCATION:DC',
-                        'URL:http://plone.org/events/conferences/2008-washington-dc',
-                        'END:VEVENT',
-                        'END:VCALENDAR')
+        self.checkOrder(
+            ''.join(output),
+            'BEGIN:VCALENDAR',
+            'BEGIN:VEVENT',
+            'SUMMARY:Plone Conf 2008',
+            'LOCATION:DC',
+            'URL:http://plone.org/events/conferences/2008-washington-dc',
+            'END:VEVENT',
+            'END:VCALENDAR')
         lines = ''.join(output).splitlines()
         self.assertEqual(len([l for l in lines if l == 'BEGIN:VEVENT']), 1)
 
@@ -195,10 +196,11 @@ def testCacheKey(self):
         key4 = cachekey(None, view)
         self.assertNotEqual(key1, key4)
         # the same goes if another one is added
-        self.folder[self.folder.invokeFactory('Event',
-                                              id='ploneconf2009', title='Plone Conf 2009',
-                                              startDate='2008/10/28', endDate='2008/10/30', location='Budapest',
-                                              eventUrl='http://plone.org/events/conferences/2009')]
+        self.folder[self.folder.invokeFactory(
+            'Event',
+            id='ploneconf2009', title='Plone Conf 2009',
+            startDate='2008/10/28', endDate='2008/10/30', location='Budapest',
+            eventUrl='http://plone.org/events/conferences/2009')]
         view.update()
         key5 = cachekey(None, view)
         self.assertNotEqual(key1, key5)
diff --git a/Products/ATContentTypes/tests/test_constraintypes.py b/Products/ATContentTypes/tests/test_constraintypes.py
index 247f175..a79920d 100644
--- a/Products/ATContentTypes/tests/test_constraintypes.py
+++ b/Products/ATContentTypes/tests/test_constraintypes.py
@@ -1,9 +1,12 @@
+# -*- coding: utf-8 -*-
 from AccessControl.SecurityManagement import newSecurityManager
 from Products.ATContentTypes.lib import constraintypes
 from Products.ATContentTypes.tests import atcttestcase
 from Products.CMFPlone.interfaces import ISelectableConstrainTypes
+
 import unittest
 
+
 tests = []
 
 
@@ -23,11 +26,12 @@ def afterSetUp(self):
         self.at = self.tt.getTypeInfo(self.af)
 
     def test_isMixedIn(self):
-        self.assertTrue(isinstance(self.af,
-                                   constraintypes.ConstrainTypesMixin),
-                        "ConstrainTypesMixin was not mixed in to ATFolder")
-        self.assertTrue(ISelectableConstrainTypes.providedBy(self.af),
-                        "ISelectableConstrainTypes not implemented by ATFolder instance")
+        self.assertTrue(
+            isinstance(self.af, constraintypes.ConstrainTypesMixin),
+            "ConstrainTypesMixin was not mixed in to ATFolder")
+        self.assertTrue(
+            ISelectableConstrainTypes.providedBy(self.af),
+            "ISelectableConstrainTypes not implemented by ATFolder instance")
 
     def test_enabled(self):
         self.af.setConstrainTypesMode(constraintypes.ENABLED)
@@ -173,11 +177,12 @@ def test_acquireFromCustomHetereogenousParent(self):
         folder2 = self.af.folder2
         folder2.setConstrainTypesMode(constraintypes.ACQUIRE)
 
-        # News item is not in addable types because it is globally forbidden in Folder2 type
-        # and Folder is not in addable types because it is locally forbidden in
-        # folder2 parent
-        self.assertEqual([fti.getId() for fti in folder2.allowedContentTypes()],
-                         ['Image'])
+        # News item is not in addable types because it is globally forbidden in
+        # Folder2 type and Folder is not in addable types because it is locally
+        # forbidden in folder2 parent
+        self.assertEqual(
+            [fti.getId() for fti in folder2.allowedContentTypes()],
+            ['Image'])
         self.assertEqual(folder2.getImmediatelyAddableTypes(), ['Image'])
 
 tests.append(TestConstrainTypes)
diff --git a/Products/ATContentTypes/tests/test_content_profile.py b/Products/ATContentTypes/tests/test_content_profile.py
index d32379d..6a101f0 100644
--- a/Products/ATContentTypes/tests/test_content_profile.py
+++ b/Products/ATContentTypes/tests/test_content_profile.py
@@ -1,5 +1,6 @@
-from Products.ATContentTypes import setuphandlers
+# -*- coding: utf-8 -*-
 from plone.app.testing.bbb import PloneTestCase
+from Products.ATContentTypes import setuphandlers
 
 
 # No sense to check this in Plone 5, frontpage is DX
diff --git a/Products/ATContentTypes/tests/test_controlpanel.py b/Products/ATContentTypes/tests/test_controlpanel.py
index b7b138a..8b92589 100644
--- a/Products/ATContentTypes/tests/test_controlpanel.py
+++ b/Products/ATContentTypes/tests/test_controlpanel.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.testing.bbb import PloneTestCase
 
 
@@ -11,6 +12,7 @@ def afterSetUp(self):
 
     def testDefaultConfiglets(self):
         for title in self.configlets:
-            self.assertTrue(title in [a.getAction(self)['id']
-                                      for a in self.controlpanel.listActions()],
-                            "Missing configlet with id '%s'" % title)
+            self.assertTrue(
+                title in [a.getAction(self)['id']
+                          for a in self.controlpanel.listActions()],
+                "Missing configlet with id '%s'" % title)
diff --git a/Products/ATContentTypes/tests/test_criteria.py b/Products/ATContentTypes/tests/test_criteria.py
index b94084e..56f6135 100644
--- a/Products/ATContentTypes/tests/test_criteria.py
+++ b/Products/ATContentTypes/tests/test_criteria.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from DateTime import DateTime
 from Missing import MV
 from Products.Archetypes.interfaces import IExtensibleMetadata
@@ -5,25 +6,25 @@
 from Products.Archetypes.interfaces.referenceable import IReferenceable
 from Products.ATContentTypes.criteria.base import ATBaseCriterion
 from Products.ATContentTypes.criteria.boolean import ATBooleanCriterion
-from Products.ATContentTypes.criteria.currentauthor import \
-    ATCurrentAuthorCriterion
+from Products.ATContentTypes.criteria.currentauthor import ATCurrentAuthorCriterion  # noqa
 from Products.ATContentTypes.criteria.date import ATDateCriteria
 from Products.ATContentTypes.criteria.daterange import ATDateRangeCriterion
 from Products.ATContentTypes.criteria.list import ATListCriterion
 from Products.ATContentTypes.criteria.path import ATPathCriterion
 from Products.ATContentTypes.criteria.portaltype import ATPortalTypeCriterion
 from Products.ATContentTypes.criteria.reference import ATReferenceCriterion
-from Products.ATContentTypes.criteria.relativepath import \
-    ATRelativePathCriterion
+from Products.ATContentTypes.criteria.relativepath import ATRelativePathCriterion  # noqa
 from Products.ATContentTypes.criteria.selection import ATSelectionCriterion
 from Products.ATContentTypes.criteria.simpleint import ATSimpleIntCriterion
-from Products.ATContentTypes.criteria.simplestring import \
-    ATSimpleStringCriterion
+from Products.ATContentTypes.criteria.simplestring import ATSimpleStringCriterion  # noqa
 from Products.ATContentTypes.criteria.sort import ATSortCriterion
 from Products.ATContentTypes.interfaces import IATTopicCriterion
 from Products.ATContentTypes.tests import atcttestcase
 from zope.interface.verify import verifyObject
+
 import unittest
+
+
 tests = []
 
 
@@ -369,8 +370,7 @@ def test_vocabulary_sorted(self):
         # Should return sorted ids
         self.dummy.Schema()['field'].set(self.dummy, 'getId')
         orig_vocab = [a.lower() for a in list(self.dummy.getCurrentValues())]
-        sorted_vocab = orig_vocab[:]
-        sorted_vocab.sort()
+        sorted_vocab = sorted(orig_vocab[:])
         self.assertEqual(orig_vocab, sorted_vocab)
 
 tests.append(TestATSelectionCriterion)
@@ -492,7 +492,8 @@ def test_vocabulary(self):
         self.dummy.Schema()['field'].set(self.dummy, 'portal_types')
         self.assertTrue('Document' in self.dummy.getCurrentValues().keys())
         self.assertTrue(
-            'ATSimpleStringCriterion' not in self.dummy.getCurrentValues().keys())
+            'ATSimpleStringCriterion' not in
+            self.dummy.getCurrentValues().keys())
 
     def test_vocabulary_sorts_by_title(self):
         # Should return standard types, but not blacklisted types
@@ -626,7 +627,8 @@ def test_relative_path_query7(self):
     def test_relative_path_query8(self):
         self.path_crit.setRelativePath('.')  # should give the new_topic
         self.assertTrue(self.path_crit.getCriteriaItems() == (
-            ('path', {'query': '/plone/folderA/folderA1/new_topic', 'depth': 1}),))
+            ('path', {'query': '/plone/folderA/folderA1/new_topic',
+                      'depth': 1}),))
 
     def test_relative_path_query9(self):
         # Acquisition can mess us up, for example when a BrowserView
@@ -717,8 +719,9 @@ def testRegisterCriteria(self):
         # add and ensure that it was added
         self.crit_registry.register(ATDateCriteria, ('Bogus Index',))
         self.assertTrue(ATDateCriteria in self.crit_registry.listCriteria())
-        self.assertEqual(self.crit_registry.indicesByCriterion('ATFriendlyDateCriteria'),
-                         ('Bogus Index',))
+        self.assertEqual(
+            self.crit_registry.indicesByCriterion('ATFriendlyDateCriteria'),
+            ('Bogus Index',))
 
     def testCriteriaIndexLookupOnBadIndex(self):
         # Make sure we don't throw errors when someone has a non-default index
diff --git a/Products/ATContentTypes/tests/test_default_mimetypes.py b/Products/ATContentTypes/tests/test_default_mimetypes.py
index 7220d8b..0cf413d 100644
--- a/Products/ATContentTypes/tests/test_default_mimetypes.py
+++ b/Products/ATContentTypes/tests/test_default_mimetypes.py
@@ -1,7 +1,9 @@
+# -*- coding: utf-8 -*-
 # test initialisation and setup
 
 from Products.ATContentTypes.tests.atcttestcase import ATCTSiteTestCase
-from unittest import TestSuite, makeSuite
+from unittest import makeSuite
+from unittest import TestSuite
 
 
 class TestDefaultMimeTypes(ATCTSiteTestCase):
diff --git a/Products/ATContentTypes/tests/test_doctests.py b/Products/ATContentTypes/tests/test_doctests.py
index 84da7f6..9ef2e61 100644
--- a/Products/ATContentTypes/tests/test_doctests.py
+++ b/Products/ATContentTypes/tests/test_doctests.py
@@ -1,31 +1,41 @@
 # -*- coding: utf-8 -*-
 
+from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING
+from plone.testing import layered
+
+import doctest
+
 FILES = [
-    'events.txt', 'editing.txt',
-    'topictool.txt', 'portaltype_criterion.txt', 'webdav.txt', 'http_access.txt',
-    'reindex_sanity.txt', 'uploading.txt', 'browser_collection_views.txt',
-    # traversal.txt registers the browser page "document_view", and this registration
-    # stays active in different doctests, so we make sure to include it last.
+    'events.txt',
+    'editing.txt',
+    'topictool.txt',
+    'portaltype_criterion.txt',
+    'webdav.txt',
+    'http_access.txt',
+    'reindex_sanity.txt',
+    'uploading.txt',
+    'browser_collection_views.txt',
+    # traversal.txt registers the browser page "document_view", and this
+    # registration stays active in different doctests, so we make sure to
+    # include it last.
     'traversal.txt',
 ]
 
-import doctest
 OPTIONFLAGS = (doctest.ELLIPSIS |
                doctest.NORMALIZE_WHITESPACE |
                doctest.REPORT_NDIFF |
                doctest.REPORT_ONLY_FIRST_FAILURE)
 
-from plone.testing import layered
-from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING
-
 
 def test_suite():
     import unittest
     suite = unittest.TestSuite()
     for testfile in FILES:
-        suite.addTest(layered(doctest.DocFileSuite(testfile,
-                                                   optionflags=OPTIONFLAGS,
-                                                   package="Products.ATContentTypes.tests",),
-                              layer=PTC_FUNCTIONAL_TESTING)
-                      )
+        suite.addTest(layered(
+            doctest.DocFileSuite(
+                testfile,
+                optionflags=OPTIONFLAGS,
+                package="Products.ATContentTypes.tests", ),
+            layer=PTC_FUNCTIONAL_TESTING)
+        )
     return suite
diff --git a/Products/ATContentTypes/tests/test_installation.py b/Products/ATContentTypes/tests/test_installation.py
index 12f713e..cebc86f 100644
--- a/Products/ATContentTypes/tests/test_installation.py
+++ b/Products/ATContentTypes/tests/test_installation.py
@@ -1,11 +1,13 @@
-import unittest
-from Products.ATContentTypes.tests import atcttestcase
-from Products.ATContentTypes.config import TOOLNAME
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.config import SWALLOW_IMAGE_RESIZE_EXCEPTIONS
+from Products.ATContentTypes.config import TOOLNAME
+from Products.ATContentTypes.tests import atcttestcase
 from Products.ATContentTypes.tool.atct import ATCTTool
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.utils import getFSVersionTuple
 
+import unittest
+
 
 PLONE5 = getFSVersionTuple()[0] >= 5
 tests = []
@@ -61,8 +63,9 @@ def test_reindex_doesnt_add_tools(self):
             self.assertEqual(l, 0, (id, l, result))
 
     def test_adds_related_items_catalog_index(self):
-        self.assertEqual(self.cat.Indexes['getRawRelatedItems'].__class__.__name__,
-                         'KeywordIndex')
+        self.assertEqual(
+            self.cat.Indexes['getRawRelatedItems'].__class__.__name__,
+            'KeywordIndex')
 
     def test_api_import(self):
         import Products.ATContentTypes.atct
diff --git a/Products/ATContentTypes/tests/test_interfaces.py b/Products/ATContentTypes/tests/test_interfaces.py
index d9cb3c1..a083d34 100644
--- a/Products/ATContentTypes/tests/test_interfaces.py
+++ b/Products/ATContentTypes/tests/test_interfaces.py
@@ -1,11 +1,13 @@
-from Products.ATContentTypes.tool.factory import FactoryTool, TempFolder
+# -*- coding: utf-8 -*-
+from Products.ATContentTypes.tool.factory import FactoryTool
+from Products.ATContentTypes.tool.factory import TempFolder
 from Products.ATContentTypes.tool.metadata import MetadataTool
-from Products.CMFPlone.tests.testInterfaces import (className, InterfaceTest,
-                                                    zope_interface_test)
+from Products.CMFPlone.tests.testInterfaces import className
+from Products.CMFPlone.tests.testInterfaces import InterfaceTest
+from Products.CMFPlone.tests.testInterfaces import zope_interface_test
+
+import unittest
 
-###############################################################################
-###                         testing starts here                             ###
-###############################################################################
 
 tests = []
 # format: (class object, (list interface objects))
@@ -38,8 +40,6 @@ class KlassInterfaceTest(zope_interface_test):
     setattr(KlassInterfaceTest, funcName, lambda self: self._testStuff())
     tests.append(KlassInterfaceTest)
 
-import unittest
-
 
 def test_suite():
     suite = unittest.TestSuite()
diff --git a/Products/ATContentTypes/tests/test_migrations.py b/Products/ATContentTypes/tests/test_migrations.py
index af5ab75..d7b14ca 100644
--- a/Products/ATContentTypes/tests/test_migrations.py
+++ b/Products/ATContentTypes/tests/test_migrations.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.config import TOOLNAME
 from Products.ATContentTypes.migration.v1_2 import upgradeATCTTool
 from Products.ATContentTypes.tests import atcttestcase
diff --git a/Products/ATContentTypes/tests/test_portal_factory.py b/Products/ATContentTypes/tests/test_portal_factory.py
index 1d74fe5..55e723d 100644
--- a/Products/ATContentTypes/tests/test_portal_factory.py
+++ b/Products/ATContentTypes/tests/test_portal_factory.py
@@ -1,5 +1,6 @@
-from AccessControl import Permissions
+# -*- coding: utf-8 -*-
 from AccessControl import getSecurityManager
+from AccessControl import Permissions
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import TEST_USER_PASSWORD
@@ -7,12 +8,12 @@
 from Products.CMFCore.permissions import ModifyPortalContent
 from Products.CMFPlone.tests import PloneTestCase
 from Products.PluggableAuthService.interfaces.plugins import IChallengePlugin
+
 import urlparse
 
 
 def sortTuple(t):
-    l = list(t)
-    l.sort()
+    l = sorted(t)
     return tuple(l)
 
 ADD_DOC_PERM = 'ATContentTypes: Add Document'
diff --git a/Products/ATContentTypes/tests/test_skinScripts.py b/Products/ATContentTypes/tests/test_skinScripts.py
index e90e3ba..a1b68ff 100644
--- a/Products/ATContentTypes/tests/test_skinScripts.py
+++ b/Products/ATContentTypes/tests/test_skinScripts.py
@@ -1,8 +1,11 @@
+# -*- coding: utf-8 -*-
 from DateTime import DateTime
 from Products.ATContentTypes.tests import atcttestcase
+
 import Missing
 import unittest
 
+
 tests = []
 
 
diff --git a/Products/ATContentTypes/tests/test_tool.py b/Products/ATContentTypes/tests/test_tool.py
index d601295..dc244c1 100644
--- a/Products/ATContentTypes/tests/test_tool.py
+++ b/Products/ATContentTypes/tests/test_tool.py
@@ -1,10 +1,14 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.config import TOOLNAME
 from Products.ATContentTypes.interfaces import IATCTTool
-from Products.ATContentTypes.tests import atcttestcase, atctftestcase
+from Products.ATContentTypes.tests import atctftestcase
+from Products.ATContentTypes.tests import atcttestcase
 from Products.CMFCore.utils import getToolByName
 from zope.interface.verify import verifyObject
+
 import unittest
 
+
 tests = []
 
 
diff --git a/Products/ATContentTypes/tests/test_topictool.py b/Products/ATContentTypes/tests/test_topictool.py
index 49b9d16..c29c6bf 100644
--- a/Products/ATContentTypes/tests/test_topictool.py
+++ b/Products/ATContentTypes/tests/test_topictool.py
@@ -1,10 +1,13 @@
+# -*- coding: utf-8 -*-
 from Products.ATContentTypes.config import TOOLNAME
 from Products.ATContentTypes.interfaces import IATCTTopicsTool
 from Products.ATContentTypes.tests import atcttestcase
 from Products.CMFCore.utils import getToolByName
 from zope.interface.verify import verifyObject
+
 import unittest
 
+
 tests = []
 index_def = {'index': 'end',
              'friendlyName': 'End Date For Test',
diff --git a/Products/ATContentTypes/tests/utils.py b/Products/ATContentTypes/tests/utils.py
index c08b0a1..a92edb5 100644
--- a/Products/ATContentTypes/tests/utils.py
+++ b/Products/ATContentTypes/tests/utils.py
@@ -1,11 +1,15 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from App.Common import package_home
 from DateTime import DateTime
+from Products.validation import ValidationChain
 from UserDict import UserDict
+
 import ExtensionClass
 import os
 
+
 PACKAGE_HOME = package_home(globals())
 
 
@@ -45,7 +49,6 @@ def dcEdit(obj):
     obj.setLanguage('de')
     obj.setRights('GPL')
 
-from Products.validation import ValidationChain
 EmptyValidator = ValidationChain('isEmpty')
 EmptyValidator.appendSufficient('isEmpty')
 idValidator = ValidationChain('isValidId')
diff --git a/Products/ATContentTypes/thirdparty/exif.py b/Products/ATContentTypes/thirdparty/exif.py
index 2cbee58..4ba4630 100644
--- a/Products/ATContentTypes/thirdparty/exif.py
+++ b/Products/ATContentTypes/thirdparty/exif.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # Library to extract EXIF information in digital camera image files
 #
 # To use this library call with:
@@ -90,6 +91,8 @@
 # 04-DEC-05 JFROCHE Reduce number of objects created.
 #
 
+import logging
+
 
 # XXX: These are here because removing them broke existing ZODB instances.
 # we should remove them completely and have migrations to fix them up instead.
@@ -100,7 +103,6 @@ class Ratio:
 class IFD_Tag:
     pass
 
-import logging
 LOG = logging.getLogger('exif')
 
 # field type descriptions as (length, abbreviation, full name) tuples
@@ -245,7 +247,8 @@ class IFD_Tag:
     0x920A: ('FocalLength', ),
     0x927C: ('MakerNote', ),
     # print as string
-    0x9286: ('UserComment', lambda x: isinstance(x, str) and x or ''.join(map(chr, x))),
+    0x9286: ('UserComment', lambda x: isinstance(x, str) and x or ''.join(map(
+        chr, x))),
     0x9290: ('SubSecTime', ),
     0x9291: ('SubSecTimeOriginal', ),
     0x9292: ('SubSecTimeDigitized', ),
@@ -719,7 +722,7 @@ def s2n_motorola(str):
 # extract multibyte integer in Intel format (big endian)
 def s2n_intel(str):
     x = 0
-    y = 0L
+    y = 0
     for c in str:
         x = x | (ord(c) << y)
         y = y + 8
@@ -759,7 +762,7 @@ def s2n(self, offset, length, signed=0):
             val = s2n_motorola(slice)
         # Sign extension ?
         if signed:
-            msb = 1L << (8 * length - 1)
+            msb = 1 << (8 * length - 1)
             if val & msb:
                 val = val - (msb << 1)
         return val
@@ -809,8 +812,9 @@ def dump_IFD(self, ifd, ifd_name, dict=EXIF_TAGS, relative=0):
             field_type = self.s2n(entry + 2, 2)
             if not 0 < field_type < len(FIELD_TYPES):
                 # unknown field type
-                raise ValueError, \
-                    'unknown type %d in tag 0x%04X' % (field_type, tag)
+                raise ValueError(
+                    'unknown type %d in tag 0x%04X' %
+                    (field_type, tag))
 
             typelen = FIELD_TYPES[field_type][0]
             count = self.s2n(entry + 4, 4)
@@ -880,8 +884,8 @@ def dump_IFD(self, ifd, ifd_name, dict=EXIF_TAGS, relative=0):
                 self.tags[ifd_name + ' ' +
                           tag_name] = (values[0], printable, field_offset)
             if self.debug:
-                print ' debug:   %s: %s' % (tag_name,
-                                            repr(self.tags[ifd_name + ' ' + tag_name]))
+                print ' debug:   %s: %s' % (
+                    tag_name, repr(self.tags[ifd_name + ' ' + tag_name]))
 
     # decode all the camera-specific MakerNote formats
 
@@ -905,7 +909,7 @@ def dump_IFD(self, ifd, ifd_name, dict=EXIF_TAGS, relative=0):
     def decode_maker_note(self):
         note = self.tags['EXIF MakerNote']
         make = self.tags['Image Make'][1]
-        model = self.tags['Image Model'][1]
+        # model = self.tags['Image Model'][1]
 
         # Nikon
         # The maker note usually starts with the word Nikon, followed by the
@@ -913,16 +917,16 @@ def decode_maker_note(self):
         # not at the start of the makernote, it's probably type 2, since some
         # cameras work that way.
         if make in ('NIKON', 'NIKON CORPORATION'):
-            if note.values[0:7] == [78, 105, 107, 111, 110, 00, 01]:
+            if note.values[0:7] == [78, 105, 107, 111, 110, 00, 0o1]:
                 if self.debug:
                     print "Looks like a type 1 Nikon MakerNote."
                 self.dump_IFD(note[2] + 8, 'MakerNote',
                               dict=MAKERNOTE_NIKON_OLDER_TAGS)
-            elif note.values[0:7] == [78, 105, 107, 111, 110, 00, 02]:
+            elif note.values[0:7] == [78, 105, 107, 111, 110, 00, 0o2]:
                 if self.debug:
                     print "Looks like a labeled type 2 Nikon MakerNote"
-                if note[0][12:14] != [0, 42] and note[0][12:14] != [42L, 0L]:
-                    raise ValueError, "Missing marker tag '42' in MakerNote."
+                if note[0][12:14] != [0, 42] and note[0][12:14] != [42, 0]:
+                    raise ValueError("Missing marker tag '42' in MakerNote.")
                 # skip the Makernote label and the TIFF header
                 self.dump_IFD(note[2] + 10 + 8, 'MakerNote',
                               dict=MAKERNOTE_NIKON_NEWER_TAGS, relative=1)
@@ -1032,7 +1036,7 @@ def process_file(file, debug=0):
             IFD_name = 'Image'
         elif ctr == 1:
             IFD_name = 'Thumbnail'
-            thumb_ifd = i
+            # thumb_ifd = i
         else:
             IFD_name = 'IFD %d' % ctr
         if debug:
@@ -1066,9 +1070,7 @@ def process_file(file, debug=0):
         except:
             pass
         del hdr.tags['EXIF MakerNote']
-    dict = {}
-    tags = hdr.tags.keys()
-    tags.sort()
+    tags = sorted(hdr.tags.keys())
     for tag in tags:
         hdr.tags[tag] = hdr.tags[tag][1]
     return hdr.tags
@@ -1101,8 +1103,7 @@ def process_file(file, debug=0):
             print 'No EXIF information found'
             continue
 
-        x = data.keys()
-        x.sort()
+        x = sorted(data.keys())
         for i in x:
             print "   %s: %s" % (i, data[i])
     end_time = time.clock()
diff --git a/Products/ATContentTypes/tool/__init__.py b/Products/ATContentTypes/tool/__init__.py
index 792d600..40a96af 100644
--- a/Products/ATContentTypes/tool/__init__.py
+++ b/Products/ATContentTypes/tool/__init__.py
@@ -1 +1 @@
-#
+# -*- coding: utf-8 -*-
diff --git a/Products/ATContentTypes/tool/atct.py b/Products/ATContentTypes/tool/atct.py
index c5b70d0..f9d74bf 100644
--- a/Products/ATContentTypes/tool/atct.py
+++ b/Products/ATContentTypes/tool/atct.py
@@ -1,25 +1,24 @@
-import logging
-from cStringIO import StringIO
-from zope.interface import implements
-
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
-from OFS.SimpleItem import SimpleItem
+from cStringIO import StringIO
 from OFS.PropertyManager import PropertyManager
-from ZODB.POSException import ConflictError
-
-from Products.PageTemplates.PageTemplateFile import PageTemplateFile
-
-from Products.CMFCore.utils import registerToolInterface
-from Products.CMFCore.utils import UniqueObject
-from Products.CMFCore.utils import getToolByName
-from Products.CMFCore.permissions import ManagePortal
-
-from Products.ATContentTypes.interfaces import IImageContent
-from Products.ATContentTypes.interfaces import IATCTTool
+from OFS.SimpleItem import SimpleItem
 from Products.ATContentTypes.config import TOOLNAME
 from Products.ATContentTypes.config import WWW_DIR
+from Products.ATContentTypes.interfaces import IATCTTool
+from Products.ATContentTypes.interfaces import IImageContent
 from Products.ATContentTypes.tool.topic import ATTopicsTool
+from Products.CMFCore.permissions import ManagePortal
+from Products.CMFCore.utils import getToolByName
+from Products.CMFCore.utils import registerToolInterface
+from Products.CMFCore.utils import UniqueObject
+from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+from ZODB.POSException import ConflictError
+from zope.interface import implements
+
+import logging
+
 
 LOG = logging.getLogger('ATCT')
 
@@ -72,8 +71,7 @@ def om_icons(self):
 
     # image scales
 
-    security.declareProtected(ManagePortal, 'recreateImageScales')
-
+    @security.protected(ManagePortal)
     def recreateImageScales(self, portal_type=None):
         """Recreates AT Image scales (doesn't remove unused!)
         """
@@ -109,8 +107,7 @@ def recreateImageScales(self, portal_type=None):
         print >> out, "Updated AT Image scales"
         return out.getvalue()
 
-    security.declareProtected(ManagePortal, 'listContentTypes')
-
+    @security.protected(ManagePortal)
     def listContentTypes(self):
         """List all content types. Used for image/folder_types property.
         """
diff --git a/Products/ATContentTypes/tool/factory.py b/Products/ATContentTypes/tool/factory.py
index 06e268c..7364ee4 100644
--- a/Products/ATContentTypes/tool/factory.py
+++ b/Products/ATContentTypes/tool/factory.py
@@ -1,29 +1,37 @@
-import logging
-import os
-
-from zope.interface import implements
-from zope.structuredtext import stx2html
-
-from AccessControl import Owned, ClassSecurityInfo, getSecurityManager
-from Acquisition import aq_parent, aq_base, aq_inner, aq_get
+# -*- coding: utf-8 -*-
+from AccessControl import ClassSecurityInfo
+from AccessControl import getSecurityManager
+from AccessControl import Owned
+from Acquisition import aq_base
+from Acquisition import aq_get
+from Acquisition import aq_inner
+from Acquisition import aq_parent
 from App.class_init import InitializeClass
 from App.Common import package_home
 from OFS.SimpleItem import SimpleItem
-from zExceptions import NotFound
-from ZPublisher.Publish import call_object, missing_name, dont_publish_class
-from ZPublisher.mapply import mapply
 from Products.ATContentTypes.config import GLOBALS
-from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+from Products.ATContentTypes.interfaces import IFactoryTool
 from Products.CMFCore.permissions import ManagePortal
-from Products.CMFCore.utils import UniqueObject
 from Products.CMFCore.utils import getToolByName
-from Products.ATContentTypes.interfaces import IFactoryTool
+from Products.CMFCore.utils import UniqueObject
 from Products.CMFPlone.interfaces import IHideFromBreadcrumbs
-from Products.CMFPlone.PloneFolder import PloneFolder as TempFolderBase
 from Products.CMFPlone.PloneBaseTool import PloneBaseTool
+from Products.CMFPlone.PloneFolder import PloneFolder as TempFolderBase
 from Products.CMFPlone.utils import base_hasattr
 from Products.CMFPlone.utils import log_exc
+from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+from zExceptions import NotFound
 from ZODB.POSException import ConflictError
+from zope.interface import implements
+from zope.structuredtext import stx2html
+from ZPublisher.mapply import mapply
+from ZPublisher.Publish import call_object
+from ZPublisher.Publish import dont_publish_class
+from ZPublisher.Publish import missing_name
+
+import logging
+import os
+
 
 FACTORY_INFO = '__factory__info__'
 
@@ -105,7 +113,7 @@ def __ac_local_roles__(self):
         their walking from TempFolder to portal_factory to the portal root."""
         object = aq_parent(aq_parent(self))
         local_roles = {}
-        while 1:
+        while True:
             # Get local roles for this user
             lr = getattr(object, '__ac_local_roles__', None)
             if lr:
@@ -113,10 +121,10 @@ def __ac_local_roles__(self):
                     lr = lr()
                 lr = lr or {}
                 for k, v in lr.items():
-                    if not k in local_roles:
+                    if k not in local_roles:
                         local_roles[k] = []
                     for role in v:
-                        if not role in local_roles[k]:
+                        if role not in local_roles[k]:
                             local_roles[k].append(role)
 
             # Check if local role has to be acquired (PLIP 16)
@@ -177,9 +185,15 @@ def allowedContentTypes(self):
 
     def __getitem__(self, id):
         # Zope's inner acquisition chain for objects returned by __getitem__
-        # will be portal -> portal_factory -> temporary_folder -> object
-        # What we really want is for the inner acquisition chain to be
-        # intended_parent_folder -> portal_factory -> temporary_folder -> object
+        # will be:
+        #
+        # portal -> portal_factory -> temporary_folder -> object
+        #
+        # What we really want is for the inner acquisition chain to be:
+        #
+        # intended_parent_folder -> portal_factory -> temporary_folder ->
+        # object
+        #
         # So we need to rewrap...
         portal_factory = aq_parent(aq_inner(self))
         intended_parent = aq_parent(portal_factory)
@@ -275,8 +289,7 @@ class FactoryTool(PloneBaseTool, UniqueObject, SimpleItem):
     f.close()
     _docs = stx2html(_docs)
 
-    security.declarePublic('docs')
-
+    @security.public
     def docs(self):
         """Returns FactoryTool docs formatted as HTML"""
         return self._docs
@@ -286,8 +299,7 @@ def getFactoryTypes(self):
             self._factory_types = {}
         return self._factory_types
 
-    security.declareProtected(ManagePortal, 'manage_setPortalFactoryTypes')
-
+    @security.protected(ManagePortal)
     def manage_setPortalFactoryTypes(self, REQUEST=None, listOfTypeIds=None):
         """Set the portal types that should use the factory."""
         if listOfTypeIds is not None:
@@ -389,7 +401,7 @@ def __before_publishing_traverse__(self, other, REQUEST):
         type_name = stack[-1]
         types_tool = getToolByName(self, 'portal_types')
         # make sure this is really a type name
-        if not type_name in types_tool.listContentTypes():
+        if type_name not in types_tool.listContentTypes():
             return  # nope -- do nothing
 
         gobbled_length += 1
@@ -435,14 +447,13 @@ def __bobo_traverse__(self, REQUEST, name):
         # cleared by __before_publishing_traverse__
         name = str(name)  # fix unicode weirdness
         types_tool = getToolByName(self, 'portal_types')
-        if not name in types_tool.listContentTypes():
+        if name not in types_tool.listContentTypes():
             # not a type name -- do the standard thing
             return getattr(self, name)
         # a type name -- return a temp folder
         return self._getTempFolder(str(name))
 
-    security.declarePublic('__call__')
-
+    @security.public
     def __call__(self, *args, **kwargs):
         """call method"""
         self._fixRequest()
@@ -491,7 +502,7 @@ def _getTempFolder(self, type_name):
 
         # make sure we can add an object of this type to the temp folder
         types_tool = getToolByName(self, 'portal_types')
-        if not type_name in types_tool.TempFolder.allowed_content_types:
+        if type_name not in types_tool.TempFolder.allowed_content_types:
             # update allowed types for tempfolder
             types_tool.TempFolder.allowed_content_types = \
                 (types_tool.listContentTypes())
diff --git a/Products/ATContentTypes/tool/metadata.py b/Products/ATContentTypes/tool/metadata.py
index 078ff13..296873a 100644
--- a/Products/ATContentTypes/tool/metadata.py
+++ b/Products/ATContentTypes/tool/metadata.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 ##############################################################################
 #
 # Copyright (c) 2001 Zope Foundation and Contributors.
@@ -18,8 +19,6 @@
 from OFS.Folder import Folder
 from OFS.SimpleItem import SimpleItem
 from Persistence import PersistentMapping
-from zope.interface import implements
-
 from Products.ATContentTypes.config import WWW_DIR
 from Products.CMFCore.interfaces import IMetadataTool
 from Products.CMFCore.utils import registerToolInterface
@@ -28,6 +27,7 @@
 from Products.CMFPlone.permissions import ModifyPortalContent
 from Products.CMFPlone.permissions import View
 from Products.CMFPlone.PloneBaseTool import PloneBaseTool
+from zope.interface import implements
 
 
 class MetadataError(Exception):
@@ -55,10 +55,9 @@ def __init__(self, is_multi_valued=False):
     #
     #   Mutator.
     #
-    security.declareProtected(ManagePortal, 'edit')
-
-    def edit(self, is_required, supply_default, default_value, enforce_vocabulary, allowed_vocabulary
-             ):
+    @security.protected(ManagePortal)
+    def edit(self, is_required, supply_default, default_value,
+             enforce_vocabulary, allowed_vocabulary):
         self.is_required = bool(is_required)
         self.supply_default = bool(supply_default)
         self.default_value = default_value
@@ -68,43 +67,37 @@ def edit(self, is_required, supply_default, default_value, enforce_vocabulary, a
     #
     #   Query interface
     #
-    security.declareProtected(View, 'isMultiValued')
-
+    @security.protected(View)
     def isMultiValued(self):
         """ Can this element hold multiple values?
         """
         return self.is_multi_valued
 
-    security.declareProtected(View, 'isRequired')
-
+    @security.protected(View)
     def isRequired(self):
         """ Must this element be supplied?
         """
         return self.is_required
 
-    security.declareProtected(View, 'supplyDefault')
-
+    @security.protected(View)
     def supplyDefault(self):
         """ Should the tool supply a default?
         """
         return self.supply_default
 
-    security.declareProtected(View, 'defaultValue')
-
+    @security.protected(View)
     def defaultValue(self):
         """ If so, what is the default?
         """
         return self.default_value
 
-    security.declareProtected(View, 'enforceVocabulary')
-
+    @security.protected(View)
     def enforceVocabulary(self):
         """ Should the tool enforce the policy's vocabulary?
         """
         return self.enforce_vocabulary
 
-    security.declareProtected(View, 'allowedVocabulary')
-
+    @security.protected(View)
     def allowedVocabulary(self):
         """ What are the allowed values?
         """
@@ -130,21 +123,18 @@ def __init__(self, is_multi_valued):
         self.policies = PersistentMapping()
         self.policies[None] = self._makePolicy()  # set default policy
 
-    security.declarePrivate('_makePolicy')
-
+    @security.private
     def _makePolicy(self):
         return MetadataElementPolicy(self.is_multi_valued)
 
-    security.declareProtected(View, 'isMultiValued')
-
+    @security.protected(View)
     def isMultiValued(self):
         """
             Is this element multi-valued?
         """
         return self.is_multi_valued
 
-    security.declareProtected(View, 'getPolicy')
-
+    @security.protected(View)
     def getPolicy(self, typ=None):
         """ Find the policy for this element for objects of the given type.
 
@@ -155,8 +145,7 @@ def getPolicy(self, typ=None):
         except KeyError:
             return self.policies[None].__of__(self)
 
-    security.declareProtected(View, 'listPolicies')
-
+    @security.protected(View)
     def listPolicies(self):
         """ Return a list of all policies for this element.
         """
@@ -165,28 +154,26 @@ def listPolicies(self):
             res.append((k, v.__of__(self)))
         return res
 
-    security.declareProtected(ManagePortal, 'addPolicy')
-
+    @security.protected(ManagePortal)
     def addPolicy(self, typ):
         """ Add a policy to this element for objects of the given type.
         """
         if typ is None:
-            raise MetadataError, "Can't replace default policy."
+            raise MetadataError("Can't replace default policy.")
 
-        if self.policies.has_key(typ):
-            raise MetadataError, "Existing policy for content type:" + typ
+        if typ in self.policies:
+            raise MetadataError("Existing policy for content type:" + typ)
 
         self.policies[typ] = self._makePolicy()
 
-    security.declareProtected(ManagePortal, 'removePolicy')
-
+    @security.protected(ManagePortal)
     def removePolicy(self, typ):
         """ Remove the policy from this element for objects of the given type.
 
         o Do *not* remvoe the default, however.
         """
         if typ is None:
-            raise MetadataError, "Can't remove default policy."
+            raise MetadataError("Can't remove default policy.")
         del self.policies[typ]
 
 InitializeClass(ElementSpec)
@@ -211,19 +198,17 @@ def __init__(self, id, element_specs=()):
     #
     #   ZMI methods
     #
-    manage_options = (({'label': 'Elements', 'action': 'elementPoliciesForm'
-                        },
-                       )
-                      + SimpleItem.manage_options
-                      )
+    manage_options = (
+        ({'label': 'Elements', 'action': 'elementPoliciesForm'}, ) +
+        SimpleItem.manage_options)
 
     security.declareProtected(ManagePortal, 'elementPoliciesForm')
     elementPoliciesForm = DTMLFile('metadataElementPolicies', WWW_DIR)
 
-    security.declareProtected(ManagePortal, 'addElementPolicy')
-
-    def addElementPolicy(self, element, content_type, is_required, supply_default, default_value, enforce_vocabulary, allowed_vocabulary, REQUEST=None
-                         ):
+    @security.protected(ManagePortal)
+    def addElementPolicy(self, element, content_type, is_required,
+                         supply_default, default_value, enforce_vocabulary,
+                         allowed_vocabulary, REQUEST=None):
         """ Add a type-specific policy for one of our elements.
         """
         if content_type == '<default>':
@@ -232,17 +217,15 @@ def addElementPolicy(self, element, content_type, is_required, supply_default, d
         spec = self.getElementSpec(element)
         spec.addPolicy(content_type)
         policy = spec.getPolicy(content_type)
-        policy.edit(is_required, supply_default, default_value, enforce_vocabulary, allowed_vocabulary
-                    )
+        policy.edit(is_required, supply_default, default_value,
+                    enforce_vocabulary, allowed_vocabulary)
         if REQUEST is not None:
-            REQUEST['RESPONSE'].redirect(self.absolute_url()
-                                         + '/elementPoliciesForm'
-                                         + '?element=' + element
-                                         + '&manage_tabs_message=Policy+added.'
-                                         )
-
-    security.declareProtected(ManagePortal, 'removeElementPolicy')
+            REQUEST['RESPONSE'].redirect(
+                self.absolute_url() +
+                '/elementPoliciesForm?element=' + element +
+                '&manage_tabs_message=Policy+added.')
 
+    @security.protected(ManagePortal)
     def removeElementPolicy(self, element, content_type, REQUEST=None
                             ):
         """ Remvoe a type-specific policy for one of our elements.
@@ -253,17 +236,16 @@ def removeElementPolicy(self, element, content_type, REQUEST=None
         spec = self.getElementSpec(element)
         spec.removePolicy(content_type)
         if REQUEST is not None:
-            REQUEST['RESPONSE'].redirect(self.absolute_url()
-                                         + '/elementPoliciesForm'
-                                         + '?element=' + element
-                                         + '&manage_tabs_message=Policy+removed.'
-                                         )
+            REQUEST['RESPONSE'].redirect(
+                self.absolute_url() +
+                '/elementPoliciesForm?element=' + element +
+                '&manage_tabs_message=Policy+removed.')
 
-    security.declareProtected(ManagePortal, 'updateElementPolicy')
-
-    def updateElementPolicy(self, element, content_type, is_required, supply_default, default_value, enforce_vocabulary, allowed_vocabulary, REQUEST=None
-                            ):
-        """ Update a policy for one of our elements 
+    @security.protected(ManagePortal)
+    def updateElementPolicy(self, element, content_type, is_required,
+                            supply_default, default_value, enforce_vocabulary,
+                            allowed_vocabulary, REQUEST=None):
+        """ Update a policy for one of our elements
 
         o 'content_type' will be '<default>' when we edit the default.
         """
@@ -271,20 +253,18 @@ def updateElementPolicy(self, element, content_type, is_required, supply_default
             content_type = None
         spec = self.getElementSpec(element)
         policy = spec.getPolicy(content_type)
-        policy.edit(is_required, supply_default, default_value, enforce_vocabulary, allowed_vocabulary
-                    )
+        policy.edit(is_required, supply_default, default_value,
+                    enforce_vocabulary, allowed_vocabulary)
         if REQUEST is not None:
-            REQUEST['RESPONSE'].redirect(self.absolute_url()
-                                         + '/elementPoliciesForm'
-                                         + '?element=' + element
-                                         + '&manage_tabs_message=Policy+updated.'
-                                         )
+            REQUEST['RESPONSE'].redirect(
+                self.absolute_url() +
+                '/elementPoliciesForm?element=' + element +
+                '&manage_tabs_message=Policy+updated.')
 
     #
     #   Element spec manipulation.
     #
-    security.declareProtected(ManagePortal, 'listElementSpecs')
-
+    @security.protected(ManagePortal)
     def listElementSpecs(self):
         """ Return a list of ElementSpecs representing the elements we manage.
         """
@@ -293,45 +273,41 @@ def listElementSpecs(self):
             res.append((k, v.__of__(self)))
         return res
 
-    security.declareProtected(ManagePortal, 'getElementSpec')
-
+    @security.protected(ManagePortal)
     def getElementSpec(self, element):
         """ Return an ElementSpec for the given 'element'.
         """
         return self.element_specs[element].__of__(self)
 
-    security.declareProtected(ManagePortal, 'addElementSpec')
-
+    @security.protected(ManagePortal)
     def addElementSpec(self, element, is_multi_valued, REQUEST=None):
         """ Add 'element' to our list of managed elements.
         """
         # Don't replace.
-        if self.element_specs.has_key(element):
+        if element in self.element_specs:
             return
 
         self.element_specs[element] = ElementSpec(is_multi_valued)
 
         if REQUEST is not None:
-            REQUEST['RESPONSE'].redirect(self.absolute_url()
-                                         + '/propertiesForm'
-                                         + '?manage_tabs_message=Element+' + element + '+added.'
-                                         )
-
-    security.declareProtected(ManagePortal, 'removeElementSpec')
+            REQUEST['RESPONSE'].redirect(
+                self.absolute_url() +
+                '/propertiesForm?manage_tabs_message=Element+' + element +
+                '+added.')
 
+    @security.protected(ManagePortal)
     def removeElementSpec(self, element, REQUEST=None):
         """ Remove 'element' from our list of managed elements.
         """
         del self.element_specs[element]
 
         if REQUEST is not None:
-            REQUEST['RESPONSE'].redirect(self.absolute_url()
-                                         + '/propertiesForm'
-                                         + '?manage_tabs_message=Element+' + element + '+removed.'
-                                         )
-
-    security.declareProtected(ManagePortal, 'listPolicies')
+            REQUEST['RESPONSE'].redirect(
+                self.absolute_url() +
+                '/propertiesForm?manage_tabs_message=Element+' + element +
+                '+removed.')
 
+    @security.protected(ManagePortal)
     def listPolicies(self, typ=None):
         """ Show all policies for a given content type
 
@@ -345,8 +321,14 @@ def listPolicies(self, typ=None):
 InitializeClass(MetadataSchema)
 
 
-_DCMI_ELEMENT_SPECS = (('Title', 0), ('Description', 0), ('Subject', 1), ('Format', 0), ('Language', 0), ('Rights', 0)
-                       )
+_DCMI_ELEMENT_SPECS = (
+    ('Title', 0),
+    ('Description', 0),
+    ('Subject', 1),
+    ('Format', 0),
+    ('Language', 0),
+    ('Rights', 0)
+)
 
 
 class MetadataTool(PloneBaseTool, UniqueObject, Folder):
@@ -372,12 +354,10 @@ def __init__(self, publisher=None):
     #
     #   ZMI methods
     #
-    manage_options = (({'label': 'Schema', 'action': 'propertiesForm'
-                        }, {'label': 'Overview', 'action': 'manage_overview'
-                            }
-                       )
-                      + Folder.manage_options
-                      )
+    manage_options = (
+        ({'label': 'Schema', 'action': 'propertiesForm'},
+         {'label': 'Overview', 'action': 'manage_overview'}) +
+        Folder.manage_options)
 
     security.declareProtected(ManagePortal, 'manage_overview')
     manage_overview = DTMLFile('explainMetadataTool', WWW_DIR)
@@ -385,23 +365,19 @@ def __init__(self, publisher=None):
     security.declareProtected(ManagePortal, 'propertiesForm')
     propertiesForm = DTMLFile('metadataProperties', WWW_DIR)
 
-    security.declareProtected(ManagePortal, 'editProperties')
-
-    def editProperties(self, publisher=None, REQUEST=None
-                       ):
-        """ Form handler for "tool-wide" properties 
+    @security.protected(ManagePortal)
+    def editProperties(self, publisher=None, REQUEST=None):
+        """ Form handler for "tool-wide" properties
         """
         if publisher is not None:
             self.publisher = publisher
 
         if REQUEST is not None:
-            REQUEST['RESPONSE'].redirect(self.absolute_url()
-                                         + '/propertiesForm'
-                                         + '?manage_tabs_message=Tool+updated.'
-                                         )
-
-    security.declareProtected(ManagePortal, 'manage_addSchema')
+            REQUEST['RESPONSE'].redirect(
+                self.absolute_url() +
+                '/propertiesForm?manage_tabs_message=Tool+updated.')
 
+    @security.protected(ManagePortal)
     def manage_addSchema(self, schema_id, elements, REQUEST):
         """ ZMI wrapper around addSchema
         """
@@ -414,77 +390,67 @@ def manage_addSchema(self, schema_id, elements, REQUEST):
             massaged.append(element)
         self.addSchema(schema_id, massaged)
 
-        REQUEST['RESPONSE'].redirect(self.absolute_url()
-                                     + '/propertiesForm'
-                                     + '?manage_tabs_message=Schema+added.'
-                                     )
-
-    security.declareProtected(ManagePortal, 'manage_removeSchemas')
+        REQUEST['RESPONSE'].redirect(
+            self.absolute_url() +
+            '/propertiesForm?manage_tabs_message=Schema+added.')
 
+    @security.protected(ManagePortal)
     def manage_removeSchemas(self, schema_ids, REQUEST):
         """ ZMI wrapper around removeSchema
         """
         if not schema_ids:
-            raise ValueError, 'No schemas selected!'
+            raise ValueError('No schemas selected!')
 
         for schema_id in schema_ids:
             self.removeSchema(schema_id)
 
-        REQUEST['RESPONSE'].redirect(self.absolute_url()
-                                     + '/propertiesForm'
-                                     + '?manage_tabs_message=Schemas+removed.'
-                                     )
-
-    security.declarePrivate('getFullName')
+        REQUEST['RESPONSE'].redirect(
+            self.absolute_url() +
+            '/propertiesForm?manage_tabs_message=Schemas+removed.')
 
+    @security.private
     def getFullName(self, userid):
         """ See IMetadataTool.
         """
         return userid   # TODO: do lookup here
 
-    security.declarePublic('getPublisher')
-
+    @security.public
     def getPublisher(self):
         """ See IMetadataTool.
         """
         return self.publisher
 
-    security.declarePublic('listAllowedSubjects')
-
+    @security.public
     def listAllowedSubjects(self, content=None, content_type=None):
         """ See IMetadataTool.
         """
-        return self.listAllowedVocabulary('DCMI', 'Subject', content, content_type
-                                          )
-
-    security.declarePublic('listAllowedFormats')
+        return self.listAllowedVocabulary(
+            'DCMI', 'Subject', content, content_type)
 
+    @security.public
     def listAllowedFormats(self, content=None, content_type=None):
         """ See IMetadataTool.
         """
-        return self.listAllowedVocabulary('DCMI', 'Format', content, content_type
-                                          )
-
-    security.declarePublic('listAllowedLanguages')
+        return self.listAllowedVocabulary(
+            'DCMI', 'Format', content, content_type)
 
+    @security.public
     def listAllowedLanguages(self, content=None, content_type=None):
         """ See IMetadataTool.
         """
-        return self.listAllowedVocabulary('DCMI', 'Language', content, content_type
-                                          )
-
-    security.declarePublic('listAllowedRights')
+        return self.listAllowedVocabulary(
+            'DCMI', 'Language', content, content_type)
 
+    @security.public
     def listAllowedRights(self, content=None, content_type=None):
         """ See IMetadata Tool.
         """
-        return self.listAllowedVocabulary('DCMI', 'Rights', content, content_type
-                                          )
-
-    security.declarePublic('listAllowedVocabulary')
+        return self.listAllowedVocabulary(
+            'DCMI', 'Rights', content, content_type)
 
-    def listAllowedVocabulary(self, schema, element, content=None, content_type=None
-                              ):
+    @security.public
+    def listAllowedVocabulary(self, schema, element, content=None,
+                              content_type=None):
         """ See IMetadataTool.
         """
         schema_def = getattr(self, schema)
@@ -493,8 +459,7 @@ def listAllowedVocabulary(self, schema, element, content=None, content_type=None
             content_type = content.getPortalTypeName()
         return spec.getPolicy(content_type).allowedVocabulary()
 
-    security.declarePublic('listSchemas')
-
+    @security.public
     def listSchemas(self):
         """ See IMetadataTool.
         """
@@ -502,31 +467,28 @@ def listSchemas(self):
         result.extend(self.objectItems([MetadataSchema.meta_type]))
         return result
 
-    security.declareProtected(ModifyPortalContent, 'addSchema')
-
+    @security.protected(ModifyPortalContent)
     def addSchema(self, schema_id, elements=()):
         """ See IMetadataTool.
         """
         if schema_id == 'DCMI' or schema_id in self.objectIds():
-            raise KeyError, 'Duplicate schema ID: %s' % schema_id
+            raise KeyError('Duplicate schema ID: %s' % schema_id)
 
         schema = MetadataSchema(schema_id, elements)
         self._setObject(schema_id, schema)
 
         return self._getOb(schema_id)
 
-    security.declareProtected(ModifyPortalContent, 'removeSchema')
-
+    @security.protected(ModifyPortalContent)
     def removeSchema(self, schema_id):
         """ See IMetadataTool.
         """
         if schema_id == 'DCMI' or schema_id not in self.objectIds():
-            raise KeyError, 'Invalid schema ID: %s' % schema_id
+            raise KeyError('Invalid schema ID: %s' % schema_id)
 
         self._delObject(schema_id)
 
-    security.declareProtected(ModifyPortalContent, 'setInitialMetadata')
-
+    @security.protected(ModifyPortalContent)
     def setInitialMetadata(self, content):
         """ See IMetadataTool.
         """
@@ -540,13 +502,12 @@ def setInitialMetadata(self, content):
                         setter = getattr(content, 'set%s' % element)
                         setter(policy.defaultValue())
                     elif policy.isRequired():
-                        raise MetadataError, \
-                            'Metadata element %s is required.' % element
+                        raise MetadataError(
+                            'Metadata element %s is required.' % element)
 
         # TODO:  Call initial_values_hook, if present
 
-    security.declareProtected(View, 'validateMetadata')
-
+    @security.protected(View)
     def validateMetadata(self, content):
         """ See IMetadataTool.
         """
@@ -556,16 +517,17 @@ def validateMetadata(self, content):
 
                 value = getattr(content, element)()
                 if not value and policy.isRequired():
-                    raise MetadataError, \
-                        'Metadata element %s is required.' % element
+                    raise MetadataError(
+                        'Metadata element %s is required.' %
+                        element)
 
                 if value and policy.enforceVocabulary():
                     values = policy.isMultiValued() and value or [value]
                     for value in values:
-                        if not value in policy.allowedVocabulary():
-                            raise MetadataError, \
-                                'Value %s is not in allowed vocabulary for ' \
-                                'metadata element %s.' % (value, element)
+                        if value not in policy.allowedVocabulary():
+                            raise MetadataError(
+                                'Value %s is not in allowed vocabulary for '
+                                'metadata element %s.' % (value, element))
 
 InitializeClass(MetadataTool)
 registerToolInterface('portal_metadata', IMetadataTool)
diff --git a/Products/ATContentTypes/tool/topic.py b/Products/ATContentTypes/tool/topic.py
index f2050d9..1fceec0 100644
--- a/Products/ATContentTypes/tool/topic.py
+++ b/Products/ATContentTypes/tool/topic.py
@@ -1,22 +1,22 @@
-from zope.interface import implements
-
-from App.class_init import InitializeClass
-from Products.CMFCore.utils import getToolByName
-from Products.ATContentTypes.criteria import _criterionRegistry
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
-from Persistence import Persistent
-from OFS.SimpleItem import SimpleItem
+from App.class_init import InitializeClass
 from ExtensionClass import Base
-
+from OFS.SimpleItem import SimpleItem
+from Persistence import Persistent
+from Products.Archetypes.atapi import DisplayList
 from Products.ATContentTypes.config import TOOLNAME
+from Products.ATContentTypes.criteria import _criterionRegistry
 from Products.ATContentTypes.interfaces import IATCTTopicsTool
-from Products.Archetypes.atapi import DisplayList
 from Products.CMFCore.permissions import ManagePortal
+from Products.CMFCore.utils import getToolByName
+from zope.interface import implements
 
 
 class TopicIndex(SimpleItem, Persistent):
 
-    def __init__(self, index, friendlyName='', description='', enabled=False, criteria=()):
+    def __init__(self, index, friendlyName='',
+                 description='', enabled=False, criteria=()):
         self.index = index
         self.friendlyName = friendlyName
         self.description = description
@@ -33,8 +33,9 @@ class ATTopicsTool(Base):
 
     security = ClassSecurityInfo()
 
-    # is used in ATPortalTypeCriterion to control which types are allowed to search with
-    # until this is fixed in CMF or whatever, this is the way to go.
+    # This is used in ATPortalTypeCriterion to control which types are allowed
+    # to search with until this is fixed in CMF or whatever, this is the way to
+    # go.
     allowed_portal_types = []
 
     id = TOOLNAME
@@ -58,16 +59,18 @@ def getCriteriaForIndex(self, index, as_dict=False):
             _criterionRegistry.criteriaByIndex(indexObj.meta_type))
         search_criteria = _criterionRegistry.listSearchTypes()
         if as_dict:
-            criteria = [{'name': a, 'description': _criterionRegistry[a].shortDesc}
-                        for a in criteria if a in search_criteria]
+            criteria = [{
+                'name': a,
+                'description': _criterionRegistry[a].shortDesc,
+                } for a in criteria if a in search_criteria]
         else:
             criteria = [a for a in criteria if a in search_criteria]
         criteria.sort()
         return criteria
 
-    security.declareProtected(ManagePortal, 'addIndex')
-
-    def addIndex(self, index, friendlyName='', description='', enabled=False, criteria=None):
+    @security.protected(ManagePortal)
+    def addIndex(self, index, friendlyName='', description='',
+                 enabled=False, criteria=None):
         """ Add a new index along with descriptive information to the index
             registry """
         if criteria is None:
@@ -85,9 +88,9 @@ def addIndex(self, index, friendlyName='', description='', enabled=False, criter
         self.topic_indexes[index] = objIndex
         self._p_changed = True
 
-    security.declareProtected(ManagePortal, 'addMetadata')
-
-    def addMetadata(self, metadata, friendlyName='', description='', enabled=False):
+    @security.protected(ManagePortal)
+    def addMetadata(self, metadata, friendlyName='',
+                    description='', enabled=False):
         """ Add a new metadata field along with descriptive information to the
             metadata registry """
         if metadata in self.topic_metadata:
@@ -101,55 +104,52 @@ def addMetadata(self, metadata, friendlyName='', description='', enabled=False):
         self.topic_metadata[metadata] = objMeta
         self._p_changed = True
 
-    security.declareProtected(ManagePortal, 'updateIndex')
-
-    def updateIndex(self, index, friendlyName=None, description=None, enabled=None, criteria=None):
+    @security.protected(ManagePortal)
+    def updateIndex(self, index, friendlyName=None,
+                    description=None, enabled=None, criteria=None):
         """ Updates an existing index in the registry, unrecognized values are
             added """
         indexes = self.topic_indexes
-        if friendlyName == None:
+        if friendlyName is None:
             friendlyName = indexes[index].friendlyName
-        if description == None:
+        if description is None:
             description = indexes[index].description
-        if enabled == None:
+        if enabled is None:
             enabled = indexes[index].enabled
-        if criteria == None:
+        if criteria is None:
             criteria = indexes[index].criteria
 
         self.addIndex(index, friendlyName, description, enabled, criteria)
 
-    security.declareProtected(ManagePortal, 'updateMetadata')
-
-    def updateMetadata(self, metadata, friendlyName=None, description=None, enabled=None):
+    @security.protected(ManagePortal)
+    def updateMetadata(self, metadata, friendlyName=None,
+                       description=None, enabled=None):
         """ Updates an existing metadata field in the registry, unrecognized values are
             added """
         meta = self.topic_metadata
-        if friendlyName == None:
+        if friendlyName is None:
             friendlyName = meta[metadata].friendlyName
-        if description == None:
+        if description is None:
             description = meta[metadata].description
-        if enabled == None:
+        if enabled is None:
             enabled = meta[metadata].enabled
         self.addMetadata(metadata, friendlyName, description, enabled)
 
-    security.declareProtected(ManagePortal, 'removeIndex')
-
+    @security.protected(ManagePortal)
     def removeIndex(self, index):
         """ Removes an existing index from the registry """
         if index in self.topic_indexes:
             del self.topic_indexes[index]
             self._p_changed = True
 
-    security.declareProtected(ManagePortal, 'removeMetadata')
-
+    @security.protected(ManagePortal)
     def removeMetadata(self, metadata):
         """ Removes an existing metadata field from the registry """
         if metadata in self.topic_metadata:
             del self.topic_metadata[metadata]
             self._p_changed = True
 
-    security.declareProtected(ManagePortal, 'createInitialIndexes')
-
+    @security.protected(ManagePortal)
     def createInitialIndexes(self):
         """ create indexes for all indexes in the catalog """
         indexes = self.listCatalogFields()
@@ -159,8 +159,7 @@ def createInitialIndexes(self):
                 self.addIndex(i, friendlyName='', enabled=enabled)
         return True
 
-    security.declareProtected(ManagePortal, 'createInitialMetadata')
-
+    @security.protected(ManagePortal)
     def createInitialMetadata(self):
         """ create metadata for all indexes in the catalog """
         metas = self.listCatalogMetadata()
@@ -170,24 +169,20 @@ def createInitialMetadata(self):
                 self.addMetadata(i, friendlyName='', enabled=enabled)
         return True
 
-    security.declarePrivate('listCatalogFields')
-
+    @security.private
     def listCatalogFields(self):
         """ Return a list of fields from portal_catalog. """
         pcatalog = getToolByName(self, 'portal_catalog')
         available = pcatalog.indexes()
-        val = [field for field in available]
-        val.sort()
+        val = sorted([field for field in available])
         return val
 
-    security.declarePrivate('listCatalogMetadata')
-
+    @security.private
     def listCatalogMetadata(self):
         """ Return a list of columns from portal_catalog. """
         pcatalog = getToolByName(self, 'portal_catalog')
         available = pcatalog.schema()
-        val = [field for field in available]
-        val.sort()
+        val = sorted([field for field in available])
         return val
 
     def getAllPortalTypes(self):
@@ -254,10 +249,9 @@ def getEnabledFields(self):
         """ Returns a list of tuples containing the index name, friendly name,
             and description for each enabled index. """
         enabledIndexes = self.getEnabledIndexes()
-        dec_fields = [(i.friendlyName.lower() or
-                       i.index.lower(), i.index, i.friendlyName or
-                       i.index, i.description) for i in enabledIndexes]
-        dec_fields.sort()
+        dec_fields = sorted([(i.friendlyName.lower() or
+                              i.index.lower(), i.index, i.friendlyName or
+                              i.index, i.description) for i in enabledIndexes])
         fields = [(a[1], a[2], a[3]) for a in dec_fields]
         return fields
 
@@ -270,8 +264,7 @@ def getFriendlyName(self, index):
         else:
             return index
 
-    security.declareProtected(ManagePortal, 'getIndexes')
-
+    @security.protected(ManagePortal)
     def getIndexes(self, enabledOnly=False):
         """ Returns the full list of available indexes, optionally filtering
             out those that are not marked enabled """
@@ -279,15 +272,15 @@ def getIndexes(self, enabledOnly=False):
             indexes_dec = [(i.index.lower(), i.index)
                            for i in self.getEnabledIndexes()]
         else:
-            self.createInitialIndexes()  # update in case of new catalogue indexes
+            # update in case of new catalog indexes
+            self.createInitialIndexes()
             indexes_dec = [(i.lower(), i) for i in self.topic_indexes.keys()]
 
         indexes_dec.sort()
         indexes = [i[1] for i in indexes_dec]
         return indexes
 
-    security.declareProtected(ManagePortal, 'getAllMetadata')
-
+    @security.protected(ManagePortal)
     def getAllMetadata(self, enabledOnly=False):
         """ Returns the full list of available metadata fields, optionally
             filtering out those that are not marked enabled """
@@ -295,7 +288,8 @@ def getAllMetadata(self, enabledOnly=False):
             meta_dec = [(i.index.lower(), i.index)
                         for i in self.getEnabledMetadata()]
         else:
-            self.createInitialMetadata()  # update in case of new catalogue metadata
+            # update in case of new catalog indexes
+            self.createInitialMetadata()
             meta_dec = [(i.lower(), i) for i in self.topic_metadata.keys()]
 
         meta_dec.sort()
@@ -316,11 +310,10 @@ def getMetadata(self, metadata):
         else:
             raise AttributeError('Metadata ' + str(metadata) + ' not found')
 
-    security.declareProtected(ManagePortal, 'manage_saveTopicSetup')
-
+    @security.protected(ManagePortal)
     def manage_saveTopicSetup(self, REQUEST=None):
         """ Set indexes and metadata from form """
-        if REQUEST == None:
+        if REQUEST is None:
             return 'Nothing saved.'
 
         data = REQUEST.get('index', [])
@@ -333,15 +326,17 @@ def manage_saveTopicSetup(self, REQUEST=None):
         meta = REQUEST.get('metadata', [])
         for metadata in meta:
             enabled = 'enabled' in metadata
-            self.updateMetadata(metadata['index'], metadata[
-                                'friendlyName'], metadata['description'], enabled)
+            self.updateMetadata(
+                metadata['index'],
+                metadata['friendlyName'],
+                metadata['description'],
+                enabled)
         return True
 
-    security.declareProtected(ManagePortal, 'manage_saveTopicSetupTypes')
-
+    @security.protected(ManagePortal)
     def manage_saveTopicSetupTypes(self, REQUEST=None):
         """ Set portal types from form """
-        if REQUEST == None:
+        if REQUEST is None:
             return 'Nothing saved.'
 
         self.allowed_portal_types = REQUEST.get('allowed_types', [])
diff --git a/Products/ATContentTypes/utils.py b/Products/ATContentTypes/utils.py
index 3444079..bd1f13a 100644
--- a/Products/ATContentTypes/utils.py
+++ b/Products/ATContentTypes/utils.py
@@ -1,6 +1,8 @@
-import datetime
+# -*- coding: utf-8 -*-
 from DateTime import DateTime
 
+import datetime
+
 
 def dt2DT(date):
     """Convert Python's datetime to Zope's DateTime
diff --git a/Products/ATContentTypes/www/imageScales.zpt b/Products/ATContentTypes/www/imageScales.zpt
index aa33b37..e85e9c8 100644
--- a/Products/ATContentTypes/www/imageScales.zpt
+++ b/Products/ATContentTypes/www/imageScales.zpt
@@ -14,15 +14,15 @@
   remove a scale from the field definition. If you want to have a scale
   removed set its value to <code>(0, 0)</code>.
   </p>
-  
-  <p>This function recreates the scales of the <code>'image'</code> field of 
+
+  <p>This function recreates the scales of the <code>'image'</code> field of
   all portal types listed in <code>image_types</code> in the property tab.
   Neither other portal types nor other fields are affected. The recreation
   process is using a catalog query so make sure your catalog is up to date.
   </p>
-  
+
   <p><em>This may take a very long time!</em></p>
- 
+
   <form method="put" action="" tal:attributes="action string:manage_imageScales">
     <input type="hidden" name="submitted" value="1" />
     <input type="submit" name="submit" value="recreate" />
diff --git a/Products/ATContentTypes/www/overview.zpt b/Products/ATContentTypes/www/overview.zpt
index cdd85d0..9908e88 100644
--- a/Products/ATContentTypes/www/overview.zpt
+++ b/Products/ATContentTypes/www/overview.zpt
@@ -15,9 +15,9 @@
     <dt>Properties</dt>
     <dd>to set certain properties for album view and more</dd>
   </dl>
-  
+
   <h3>Properties</h3>
-  
+
   <dl>
     <dt><code>image_types</code></dt>
     <dd>A list of portal type names to be treated as image. The types must be
diff --git a/Products/__init__.py b/Products/__init__.py
index f48ad10..85880ef 100644
--- a/Products/__init__.py
+++ b/Products/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
 try:
     __import__('pkg_resources').declare_namespace(__name__)
diff --git a/README.rst b/README.rst
index 69b9309..2d51421 100644
--- a/README.rst
+++ b/README.rst
@@ -37,12 +37,12 @@ and the new ATContentTypes types.
 * Clean and documented API.
 
 * Translateable using LinguaPlone.
-  
+
 * Dynamic Views: All types are using the new dynamic view FTI that allows you
   to choose the view template per instance. You can configure the templates in
   the portal_types tool. This features is used to turn an ordinary folder into
   a photo album by simple switching to a different view.
-  
+
 * Permissions per type and feature: Every type has its own add permission and
   all features like template mixin have their own modify permission, too.
 


