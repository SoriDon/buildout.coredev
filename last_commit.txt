Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-06-24T11:05:36+02:00
Author: Thomas Buchberger (buchi) <t.buchberger@4teamwork.ch>
Commit: https://github.com/plone/plone.restapi/commit/ee1b436e02d96fc25a119a33becd2584d4e6f05e

Additional metadata fields in summary serializer

Support retrieval of additional metadata fields in summaries in the same way as
in search results.

Files changed:
A news/681.feature
M src/plone/restapi/serializer/summary.py
M src/plone/restapi/tests/test_serializer_summary.py

b'diff --git a/news/681.feature b/news/681.feature\nnew file mode 100644\nindex 00000000..7d460ed0\n--- /dev/null\n+++ b/news/681.feature\n@@ -0,0 +1,4 @@\n+Support retrieval of additional metadata fields in summaries in the same way as\n+in search results.\n+[buchi]\n+\ndiff --git a/src/plone/restapi/serializer/summary.py b/src/plone/restapi/serializer/summary.py\nindex 4f94ba8a..9eb5eed4 100644\n--- a/src/plone/restapi/serializer/summary.py\n+++ b/src/plone/restapi/serializer/summary.py\n@@ -2,11 +2,40 @@\n from plone.app.contentlisting.interfaces import IContentListingObject\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.restapi.serializer.converters import json_compatible\n+from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n from zope.component import adapter\n from zope.interface import implementer\n from zope.interface import Interface\n \n+# fmt: off\n+DEFAULT_METADATA_FIELDS = set([\n+    \'@id\',\n+    \'@type\',\n+    \'description\',\n+    \'review_state\',\n+    \'title\',\n+])\n+\n+FIELD_ACCESSORS = {\n+    "@id": "getURL",\n+    "@type": "PortalType",\n+    "description": "Description",\n+    "title": "Title",\n+}\n+\n+NON_METADATA_ATTRIBUTES = set([\n+    "getPath",\n+    "getURL",\n+])\n+\n+BLACKLISTED_ATTRIBUTES = set([\n+    \'getDataOrigin\',\n+    \'getObject\',\n+    \'getUserData\',\n+])\n+# fmt: on\n+\n \n @implementer(ISerializeToJsonSummary)\n @adapter(Interface, Interface)\n@@ -23,17 +52,34 @@ def __init__(self, context, request):\n \n     def __call__(self):\n         obj = IContentListingObject(self.context)\n-        summary = json_compatible(\n-            {\n-                "@id": obj.getURL(),\n-                "@type": obj.PortalType(),\n-                "title": obj.Title(),\n-                "description": obj.Description(),\n-                "review_state": obj.review_state(),\n-            }\n-        )\n+\n+        summary = {}\n+        for field in self.metadata_fields():\n+            if field.startswith("_") or field in BLACKLISTED_ATTRIBUTES:\n+                continue\n+            accessor = FIELD_ACCESSORS.get(field, field)\n+            value = getattr(obj, accessor, None)\n+            if callable(value):\n+                value = value()\n+            summary[field] = json_compatible(value)\n         return summary\n \n+    def metadata_fields(self):\n+        additional_metadata_fields = self.request.form.get("metadata_fields", [])\n+        if not isinstance(additional_metadata_fields, list):\n+            additional_metadata_fields = [additional_metadata_fields]\n+        additional_metadata_fields = set(additional_metadata_fields)\n+\n+        if "_all" in additional_metadata_fields:\n+            fields_cache = self.request.get(\'_summary_fields_cache\', None)\n+            if fields_cache is None:\n+                catalog = getToolByName(self.context, "portal_catalog")\n+                fields_cache = set(catalog.schema()) | NON_METADATA_ATTRIBUTES\n+                self.request.set(\'_summary_fields_cache\', fields_cache)\n+            additional_metadata_fields = fields_cache\n+\n+        return DEFAULT_METADATA_FIELDS | additional_metadata_fields\n+\n \n @implementer(ISerializeToJsonSummary)\n @adapter(IPloneSiteRoot, Interface)\ndiff --git a/src/plone/restapi/tests/test_serializer_summary.py b/src/plone/restapi/tests/test_serializer_summary.py\nindex a8647e5e..c60ecf57 100644\n--- a/src/plone/restapi/tests/test_serializer_summary.py\n+++ b/src/plone/restapi/tests/test_serializer_summary.py\n@@ -1,5 +1,8 @@\n # -*- coding: utf-8 -*-\n+from freezegun import freeze_time\n from plone.app.contentlisting.interfaces import IContentListingObject\n+from plone.app.testing import popGlobalRegistry\n+from plone.app.testing import pushGlobalRegistry\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.dexterity.utils import createContentInContainer\n@@ -7,8 +10,11 @@\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+from plone.restapi.testing import register_static_uuid_utility\n from Products.CMFCore.utils import getToolByName\n from zope.component import getMultiAdapter\n+from zope.site.hooks import getSite\n+\n \n import Missing\n import unittest\n@@ -21,6 +27,12 @@ class TestSummarySerializers(unittest.TestCase):\n     def setUp(self):\n         self.portal = self.layer["portal"]\n         self.request = self.layer["request"]\n+\n+        pushGlobalRegistry(getSite())\n+        register_static_uuid_utility(prefix="c6dcbd55ab2746e199cd4ed458")\n+        self.time_freezer = freeze_time("2019-06-22 12:47:03")\n+        self.time_freezer.start()\n+\n         self.catalog = getToolByName(self.portal, "portal_catalog")\n \n         self.doc1 = createContentInContainer(\n@@ -31,6 +43,10 @@ def setUp(self):\n             description=u"Description",\n         )\n \n+    def tearDown(self):\n+        self.time_freezer.stop()\n+        popGlobalRegistry(getSite())\n+\n     def test_site_root_summary(self):\n         summary = getMultiAdapter(\n             (self.portal, self.request), ISerializeToJsonSummary\n@@ -97,6 +113,83 @@ def test_brain_summary_with_missing_value(self):\n             summary,\n         )\n \n+    def test_brain_summary_includes_additional_metadata_fields(self):\n+        brain = self.catalog(UID=self.doc1.UID())[0]\n+        self.request.form.update({\'metadata_fields\': [\'UID\', \'Creator\']})\n+        summary = getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n+\n+        self.assertDictEqual(\n+            {\n+                "@id": "http://nohost/plone/doc1",\n+                "@type": "DXTestDocument",\n+                \'UID\': \'c6dcbd55ab2746e199cd4ed458000001\',\n+                \'Creator\': \'test_user_1_\',\n+                "title": "Lorem Ipsum",\n+                "description": \'Description\',\n+                "review_state": "private",\n+            },\n+            summary,\n+        )\n+\n+    def test_brain_summary_includes_all_metadata_fields(self):\n+        brain = self.catalog(UID=self.doc1.UID())[0]\n+        self.request.form.update({\'metadata_fields\': \'_all\'})\n+        summary = getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n+\n+        # mime_type was added in Plone 5.1\n+        # Make sure tests pass on older Plone versions\n+        if \'mime_type\' not in summary:\n+            summary[\'mime_type\'] = u\'text/plain\'\n+\n+        self.assertDictEqual(\n+            {\n+                \'@id\': u\'http://nohost/plone/doc1\',\n+                \'@type\': u\'DXTestDocument\',\n+                \'CreationDate\': u\'2019-06-22T12:47:03+00:00\',\n+                \'Creator\': u\'test_user_1_\',\n+                \'Date\': u\'2019-06-22T12:47:03+00:00\',\n+                \'Description\': u\'Description\',\n+                \'EffectiveDate\': u\'None\',\n+                \'ExpirationDate\': u\'None\',\n+                \'ModificationDate\': u\'2019-06-22T12:47:03+00:00\',\n+                \'Subject\': [],\n+                \'Title\': u\'Lorem Ipsum\',\n+                \'Type\': u\'DX Test Document\',\n+                \'UID\': u\'c6dcbd55ab2746e199cd4ed458000001\',\n+                \'author_name\': None,\n+                \'cmf_uid\': None,\n+                \'commentators\': [],\n+                \'created\': u\'2019-06-22T12:47:03+00:00\',\n+                \'description\': u\'Description\',\n+                \'effective\': u\'1969-12-31T00:00:00+00:00\',\n+                \'end\': None,\n+                \'exclude_from_nav\': False,\n+                \'expires\': u\'2499-12-31T00:00:00+00:00\',\n+                \'getIcon\': None,\n+                \'getId\': u\'doc1\',\n+                \'getObjSize\': u\'0 KB\',\n+                \'getPath\': u\'/plone/doc1\',\n+                \'getRemoteUrl\': None,\n+                \'getURL\': u\'http://nohost/plone/doc1\',\n+                \'id\': u\'doc1\',\n+                \'in_response_to\': None,\n+                \'is_folderish\': False,\n+                \'last_comment_date\': None,\n+                \'listCreators\': [u\'test_user_1_\'],\n+                \'location\': None,\n+                \'meta_type\': u\'Dexterity Item\',\n+                \'mime_type\': u\'text/plain\',\n+                \'modified\': u\'2019-06-22T12:47:03+00:00\',\n+                \'portal_type\': u\'DXTestDocument\',\n+                \'review_state\': u\'private\',\n+                \'start\': None,\n+                \'sync_uid\': None,\n+                \'title\': u\'Lorem Ipsum\',\n+                \'total_comments\': 0,\n+            },\n+            summary,\n+        )\n+\n     def test_dx_type_summary(self):\n         summary = getMultiAdapter((self.doc1, self.request), ISerializeToJsonSummary)()\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-06-24T11:05:36+02:00
Author: Thomas Buchberger (buchi) <t.buchberger@4teamwork.ch>
Commit: https://github.com/plone/plone.restapi/commit/eff387747930976b253bb996edac7aae43927a24

Remove catalog brain serializer

The summary serializer already does all the work.

Files changed:
M src/plone/restapi/serializer/catalog.py
M src/plone/restapi/serializer/configure.zcml
M src/plone/restapi/tests/test_serializer_catalog.py

b'diff --git a/src/plone/restapi/serializer/catalog.py b/src/plone/restapi/serializer/catalog.py\nindex 6147491d..e8506148 100644\n--- a/src/plone/restapi/serializer/catalog.py\n+++ b/src/plone/restapi/serializer/catalog.py\n@@ -2,63 +2,13 @@\n from plone.restapi.batching import HypermediaBatch\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n-from plone.restapi.serializer.converters import json_compatible\n-from Products.CMFCore.utils import getToolByName\n-from Products.ZCatalog.interfaces import ICatalogBrain\n from Products.ZCatalog.Lazy import Lazy\n from zope.component import adapter\n from zope.component import getMultiAdapter\n-from zope.component.hooks import getSite\n from zope.interface import implementer\n from zope.interface import Interface\n \n \n-BRAIN_METHODS = ["getPath", "getURL"]\n-\n-\n-@implementer(ISerializeToJson)\n-@adapter(ICatalogBrain, Interface)\n-class BrainSerializer(object):\n-    """Serializes a catalog brain to a Python data structure that can in turn\n-    be serialized to JSON.\n-    """\n-\n-    def __init__(self, brain, request):\n-        self.brain = brain\n-        self.request = request\n-\n-    def _get_metadata_to_include(self, metadata_fields):\n-        if metadata_fields and "_all" in metadata_fields:\n-            site = getSite()\n-            catalog = getToolByName(site, "portal_catalog")\n-            metadata_attrs = list(catalog.schema()) + BRAIN_METHODS\n-            return metadata_attrs\n-\n-        return metadata_fields\n-\n-    def __call__(self, metadata_fields=("_all",)):\n-        metadata_to_include = self._get_metadata_to_include(metadata_fields)\n-\n-        # Start with a summary representation as our base\n-        result = getMultiAdapter((self.brain, self.request), ISerializeToJsonSummary)()\n-\n-        for attr in metadata_to_include:\n-            value = getattr(self.brain, attr, None)\n-\n-            # Handle values that are provided via methods on brains, like\n-            # getPath or getURL (see ICatalogBrain for details)\n-            if attr in BRAIN_METHODS:\n-                value = value()\n-\n-            value = json_compatible(value)\n-\n-            # TODO: Deal with metadata attributes that already contain\n-            # timestamps as isoformat strings, like \'Created\'\n-            result[attr] = value\n-\n-        return result\n-\n-\n @implementer(ISerializeToJson)\n @adapter(Lazy, Interface)\n class LazyCatalogResultSerializer(object):\n@@ -91,13 +41,6 @@ def __call__(self, metadata_fields=(), fullobjects=False):\n                     (brain, self.request), ISerializeToJsonSummary\n                 )()\n \n-                # Merge additional metadata into the summary we already have\n-                if metadata_fields:\n-                    metadata = getMultiAdapter((brain, self.request), ISerializeToJson)(\n-                        metadata_fields=metadata_fields\n-                    )\n-                    result.update(metadata)\n-\n             results["items"].append(result)\n \n         return results\ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex 350ef417..f3d33ffc 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -59,7 +59,6 @@\n         <adapter factory=".relationfield.relationvalue_converter" />\n     </configure>\n \n-    <adapter factory=".catalog.BrainSerializer" />\n     <adapter factory=".catalog.LazyCatalogResultSerializer" />\n \n     <adapter factory=".user.SerializeUserToJson" />\ndiff --git a/src/plone/restapi/tests/test_serializer_catalog.py b/src/plone/restapi/tests/test_serializer_catalog.py\nindex e8c64311..dd59afee 100644\n--- a/src/plone/restapi/tests/test_serializer_catalog.py\n+++ b/src/plone/restapi/tests/test_serializer_catalog.py\n@@ -119,74 +119,6 @@ def test_brain_summary_representation(self):\n             result,\n         )\n \n-    def test_brain_partial_metadata_representation(self):\n-        lazy_map = self.catalog(path="/plone/my-folder/my-document")\n-        brain = lazy_map[0]\n-        result = getMultiAdapter((brain, self.request), ISerializeToJson)(\n-            metadata_fields=["portal_type", "review_state"]\n-        )\n-\n-        self.assertDictEqual(\n-            {\n-                "@id": "http://nohost/plone/my-folder/my-document",\n-                "@type": "Document",\n-                "title": "My Document",\n-                "description": "",\n-                "portal_type": u"Document",\n-                "review_state": u"private",\n-            },\n-            result,\n-        )\n-\n-    def test_brain_full_metadata_representation(self):\n-        lazy_map = self.catalog(path="/plone/my-folder/my-document")\n-        brain = lazy_map[0]\n-        result = getMultiAdapter((brain, self.request), ISerializeToJson)(\n-            metadata_fields=["_all"]\n-        )\n-\n-        self.assertDictContainsSubset(\n-            {\n-                "@id": "http://nohost/plone/my-folder/my-document",\n-                "Creator": u"test_user_1_",\n-                "Description": u"",\n-                "EffectiveDate": u"None",\n-                "ExpirationDate": u"None",\n-                "Subject": [],\n-                "Title": u"My Document",\n-                "Type": u"Page",\n-                "UID": u"77779ffa110e45afb1ba502f75f77777",\n-                "author_name": None,\n-                "cmf_uid": 1,\n-                "commentators": [],\n-                "created": u"2015-12-31T23:45:00+00:00",\n-                "description": "",\n-                "effective": u"1969-12-31T00:00:00+00:00",\n-                "end": None,\n-                "exclude_from_nav": False,\n-                "expires": u"2499-12-31T00:00:00+00:00",\n-                "getId": u"my-document",\n-                "getObjSize": u"0 KB",\n-                "getPath": "/plone/my-folder/my-document",\n-                "getRemoteUrl": None,\n-                "getURL": "http://nohost/plone/my-folder/my-document",\n-                "id": u"my-document",\n-                "in_response_to": None,\n-                "is_folderish": False,\n-                "last_comment_date": None,\n-                "listCreators": [u"test_user_1_"],\n-                "location": None,\n-                "meta_type": u"Dexterity Item",\n-                "portal_type": u"Document",\n-                "review_state": u"private",\n-                "start": None,\n-                "sync_uid": None,\n-                "title": "My Document",\n-                "total_comments": 0,\n-            },\n-            result,\n-        )\n-\n \n class TestCatalogATSerializers(unittest.TestCase):\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-06-24T11:05:36+02:00
Author: Thomas Buchberger (buchi) <t.buchberger@4teamwork.ch>
Commit: https://github.com/plone/plone.restapi/commit/d80613624c1ee3a4b4dcd7a1c8bc33a4c3ab6965

Document how to retrieve addtional metadata fields in summaries

Files changed:
A src/plone/restapi/tests/http-examples/content_get_folder.req
A src/plone/restapi/tests/http-examples/content_get_folder.resp
M docs/source/content.rst
M docs/source/searching.rst
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/docs/source/content.rst b/docs/source/content.rst\nindex 8750fd9e..5707e663 100644\n--- a/docs/source/content.rst\n+++ b/docs/source/content.rst\n@@ -112,8 +112,6 @@ After a successful POST, we can access the resource by sending a GET request to\n ..  http:example:: curl httpie python-requests\n     :request: ../../src/plone/restapi/tests/http-examples/content_get.req\n \n-You can also set the `include_items` GET parameter to false if you don\'t want to include children.\n-\n \n Successful Response (200 OK)\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -123,6 +121,23 @@ If a resource has been retrieved successfully, the server responds with :term:`2\n .. literalinclude:: ../../src/plone/restapi/tests/http-examples/content_get.resp\n    :language: http\n \n+\n+For folderish types, their childrens are automatically included in the response\n+as ``items``. To disable the inclusion, add the GET parameter ``include_items=false``\n+to the URL.\n+\n+By default only basic metadata is included. To include additional metadata,\n+you can specify the names of the properties with the ``metadata_fields`` parameter.\n+See also :ref:`retrieving-additional-metadata`.\n+\n+The following example additionaly retrieves the UID and Creator:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/content_get_folder.req\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/content_get_folder.resp\n+   :language: http\n+\n .. note::\n         For folderish types, collections or search results, the results will\n         be **batched** if the size of the resultset exceeds the batch size.\ndiff --git a/docs/source/searching.rst b/docs/source/searching.rst\nindex d7882ed6..76aaaf59 100644\n--- a/docs/source/searching.rst\n+++ b/docs/source/searching.rst\n@@ -119,6 +119,7 @@ In that case, ``plone.restapi`` simply can\'t know what data type to cast your qu\n \n Please refer to the `Documentation on Argument Conversion in ZPublisher <http://docs.zope.org/zope2/zdgbook/ObjectPublishing.html#argument-conversion>`_ for details.\n \n+.. _retrieving-additional-metadata:\n \n Retrieving additional metadata\n ------------------------------\ndiff --git a/src/plone/restapi/tests/http-examples/content_get_folder.req b/src/plone/restapi/tests/http-examples/content_get_folder.req\nnew file mode 100644\nindex 00000000..41097d39\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/content_get_folder.req\n@@ -0,0 +1,3 @@\n+GET /plone/folder?metadata_fields=UID&metadata_fields=Creator HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/content_get_folder.resp b/src/plone/restapi/tests/http-examples/content_get_folder.resp\nnew file mode 100644\nindex 00000000..31f65fdd\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/content_get_folder.resp\n@@ -0,0 +1,80 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@components": {\n+    "actions": {\n+      "@id": "http://localhost:55001/plone/folder/@actions"\n+    }, \n+    "breadcrumbs": {\n+      "@id": "http://localhost:55001/plone/folder/@breadcrumbs"\n+    }, \n+    "navigation": {\n+      "@id": "http://localhost:55001/plone/folder/@navigation"\n+    }, \n+    "workflow": {\n+      "@id": "http://localhost:55001/plone/folder/@workflow"\n+    }\n+  }, \n+  "@id": "http://localhost:55001/plone/folder?metadata_fields=UID&metadata_fields=Creator", \n+  "@type": "Folder", \n+  "UID": "SomeUUID000000000000000000000002", \n+  "allow_discussion": false, \n+  "contributors": [], \n+  "created": "2016-01-21T07:14:48+00:00", \n+  "creators": [\n+    "test_user_1_"\n+  ], \n+  "description": "This is a folder with two documents", \n+  "effective": null, \n+  "exclude_from_nav": false, \n+  "expires": null, \n+  "id": "folder", \n+  "is_folderish": true, \n+  "items": [\n+    {\n+      "@id": "http://localhost:55001/plone/folder/doc1", \n+      "@type": "Document", \n+      "Creator": "test_user_1_", \n+      "UID": "SomeUUID000000000000000000000003", \n+      "description": "", \n+      "review_state": "private", \n+      "title": "A document within a folder"\n+    }, \n+    {\n+      "@id": "http://localhost:55001/plone/folder/doc2", \n+      "@type": "Document", \n+      "Creator": "test_user_1_", \n+      "UID": "SomeUUID000000000000000000000004", \n+      "description": "", \n+      "review_state": "private", \n+      "title": "A document within a folder"\n+    }, \n+    {\n+      "@id": "http://localhost:55001/plone/folder/my-document", \n+      "@type": "Document", \n+      "Creator": "admin", \n+      "UID": "SomeUUID000000000000000000000005", \n+      "description": "", \n+      "review_state": "private", \n+      "title": "My Document"\n+    }\n+  ], \n+  "items_total": 3, \n+  "language": "", \n+  "layout": "listing_view", \n+  "modified": "2016-10-21T19:00:00+00:00", \n+  "nextPreviousEnabled": false, \n+  "parent": {\n+    "@id": "http://localhost:55001/plone", \n+    "@type": "Plone Site", \n+    "description": "", \n+    "title": "Plone site"\n+  }, \n+  "relatedItems": [], \n+  "review_state": "private", \n+  "rights": "", \n+  "subjects": [], \n+  "title": "My Folder", \n+  "version": "current"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex a9bda9ff..99719554 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -233,6 +233,11 @@ def test_documentation_content_crud(self):\n         response = self.api_session.get(document.absolute_url())\n         save_request_and_response_for_docs("content_get", response)\n \n+        response = self.api_session.get(\n+            folder.absolute_url() + "?metadata_fields=UID&metadata_fields=Creator"\n+        )\n+        save_request_and_response_for_docs("content_get_folder", response)\n+\n         response = self.api_session.patch(\n             document.absolute_url(), json={"title": "My New Document Title"}\n         )\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-06-24T14:56:15+02:00
Author: Thomas Buchberger (buchi) <t.buchberger@4teamwork.ch>
Commit: https://github.com/plone/plone.restapi/commit/4ab0e45978ae7ef40e2db1fbef1416a73770a21e

Fix timezone patch in tests

Files changed:
M src/plone/restapi/testing.py

b'diff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 5a584625..f857fd97 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -33,6 +33,7 @@\n from zope.interface import implementer\n \n import collective.MockMailHost\n+import os\n import pkg_resources\n import re\n import requests\n@@ -105,21 +106,33 @@ def enable_request_language_negotiation(portal):\n class DateTimeFixture(Layer):\n     def setUp(self):\n         tz = "UTC"\n+        os.environ[\'TZ\'] = tz\n+        time.tzset()\n+\n         # Patch DateTime\'s timezone for deterministic behavior.\n         from DateTime import DateTime\n-\n         self.DT_orig_localZone = DateTime.localZone\n         DateTime.localZone = lambda cls=None, ltm=None: tz\n-        from plone.dexterity import content\n \n+        from plone.dexterity import content\n         content.FLOOR_DATE = DateTime(1970, 0)\n         content.CEILING_DATE = DateTime(2500, 0)\n+        self._orig_content_zone = content._zone\n+        content._zone = tz\n \n     def tearDown(self):\n-        from DateTime import DateTime\n+        if \'TZ\' in os.environ:\n+            del os.environ[\'TZ\']\n+        time.tzset()\n \n+        from DateTime import DateTime\n         DateTime.localZone = self.DT_orig_localZone\n \n+        from plone.dexterity import content\n+        content._zone = self._orig_content_zone\n+        content.FLOOR_DATE = DateTime(1970, 0)\n+        content.CEILING_DATE = DateTime(2500, 0)\n+\n \n DATE_TIME_FIXTURE = DateTimeFixture()\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-06-30T04:22:32+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/6fd5f8923ff9f8205835322c79b895f6ecdfae75

Merge pull request #767 from plone/metadata-fields-in-summaries

Metadata fields in summaries

Files changed:
A news/681.feature
A src/plone/restapi/tests/http-examples/content_get_folder.req
A src/plone/restapi/tests/http-examples/content_get_folder.resp
M docs/source/content.rst
M docs/source/searching.rst
M src/plone/restapi/serializer/catalog.py
M src/plone/restapi/serializer/configure.zcml
M src/plone/restapi/serializer/summary.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_serializer_catalog.py
M src/plone/restapi/tests/test_serializer_summary.py

b'diff --git a/docs/source/content.rst b/docs/source/content.rst\nindex 8750fd9e..5707e663 100644\n--- a/docs/source/content.rst\n+++ b/docs/source/content.rst\n@@ -112,8 +112,6 @@ After a successful POST, we can access the resource by sending a GET request to\n ..  http:example:: curl httpie python-requests\n     :request: ../../src/plone/restapi/tests/http-examples/content_get.req\n \n-You can also set the `include_items` GET parameter to false if you don\'t want to include children.\n-\n \n Successful Response (200 OK)\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -123,6 +121,23 @@ If a resource has been retrieved successfully, the server responds with :term:`2\n .. literalinclude:: ../../src/plone/restapi/tests/http-examples/content_get.resp\n    :language: http\n \n+\n+For folderish types, their childrens are automatically included in the response\n+as ``items``. To disable the inclusion, add the GET parameter ``include_items=false``\n+to the URL.\n+\n+By default only basic metadata is included. To include additional metadata,\n+you can specify the names of the properties with the ``metadata_fields`` parameter.\n+See also :ref:`retrieving-additional-metadata`.\n+\n+The following example additionaly retrieves the UID and Creator:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/content_get_folder.req\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/content_get_folder.resp\n+   :language: http\n+\n .. note::\n         For folderish types, collections or search results, the results will\n         be **batched** if the size of the resultset exceeds the batch size.\ndiff --git a/docs/source/searching.rst b/docs/source/searching.rst\nindex d7882ed6..76aaaf59 100644\n--- a/docs/source/searching.rst\n+++ b/docs/source/searching.rst\n@@ -119,6 +119,7 @@ In that case, ``plone.restapi`` simply can\'t know what data type to cast your qu\n \n Please refer to the `Documentation on Argument Conversion in ZPublisher <http://docs.zope.org/zope2/zdgbook/ObjectPublishing.html#argument-conversion>`_ for details.\n \n+.. _retrieving-additional-metadata:\n \n Retrieving additional metadata\n ------------------------------\ndiff --git a/news/681.feature b/news/681.feature\nnew file mode 100644\nindex 00000000..7d460ed0\n--- /dev/null\n+++ b/news/681.feature\n@@ -0,0 +1,4 @@\n+Support retrieval of additional metadata fields in summaries in the same way as\n+in search results.\n+[buchi]\n+\ndiff --git a/src/plone/restapi/serializer/catalog.py b/src/plone/restapi/serializer/catalog.py\nindex 6147491d..e8506148 100644\n--- a/src/plone/restapi/serializer/catalog.py\n+++ b/src/plone/restapi/serializer/catalog.py\n@@ -2,63 +2,13 @@\n from plone.restapi.batching import HypermediaBatch\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n-from plone.restapi.serializer.converters import json_compatible\n-from Products.CMFCore.utils import getToolByName\n-from Products.ZCatalog.interfaces import ICatalogBrain\n from Products.ZCatalog.Lazy import Lazy\n from zope.component import adapter\n from zope.component import getMultiAdapter\n-from zope.component.hooks import getSite\n from zope.interface import implementer\n from zope.interface import Interface\n \n \n-BRAIN_METHODS = ["getPath", "getURL"]\n-\n-\n-@implementer(ISerializeToJson)\n-@adapter(ICatalogBrain, Interface)\n-class BrainSerializer(object):\n-    """Serializes a catalog brain to a Python data structure that can in turn\n-    be serialized to JSON.\n-    """\n-\n-    def __init__(self, brain, request):\n-        self.brain = brain\n-        self.request = request\n-\n-    def _get_metadata_to_include(self, metadata_fields):\n-        if metadata_fields and "_all" in metadata_fields:\n-            site = getSite()\n-            catalog = getToolByName(site, "portal_catalog")\n-            metadata_attrs = list(catalog.schema()) + BRAIN_METHODS\n-            return metadata_attrs\n-\n-        return metadata_fields\n-\n-    def __call__(self, metadata_fields=("_all",)):\n-        metadata_to_include = self._get_metadata_to_include(metadata_fields)\n-\n-        # Start with a summary representation as our base\n-        result = getMultiAdapter((self.brain, self.request), ISerializeToJsonSummary)()\n-\n-        for attr in metadata_to_include:\n-            value = getattr(self.brain, attr, None)\n-\n-            # Handle values that are provided via methods on brains, like\n-            # getPath or getURL (see ICatalogBrain for details)\n-            if attr in BRAIN_METHODS:\n-                value = value()\n-\n-            value = json_compatible(value)\n-\n-            # TODO: Deal with metadata attributes that already contain\n-            # timestamps as isoformat strings, like \'Created\'\n-            result[attr] = value\n-\n-        return result\n-\n-\n @implementer(ISerializeToJson)\n @adapter(Lazy, Interface)\n class LazyCatalogResultSerializer(object):\n@@ -91,13 +41,6 @@ def __call__(self, metadata_fields=(), fullobjects=False):\n                     (brain, self.request), ISerializeToJsonSummary\n                 )()\n \n-                # Merge additional metadata into the summary we already have\n-                if metadata_fields:\n-                    metadata = getMultiAdapter((brain, self.request), ISerializeToJson)(\n-                        metadata_fields=metadata_fields\n-                    )\n-                    result.update(metadata)\n-\n             results["items"].append(result)\n \n         return results\ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex 350ef417..f3d33ffc 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -59,7 +59,6 @@\n         <adapter factory=".relationfield.relationvalue_converter" />\n     </configure>\n \n-    <adapter factory=".catalog.BrainSerializer" />\n     <adapter factory=".catalog.LazyCatalogResultSerializer" />\n \n     <adapter factory=".user.SerializeUserToJson" />\ndiff --git a/src/plone/restapi/serializer/summary.py b/src/plone/restapi/serializer/summary.py\nindex 4f94ba8a..9eb5eed4 100644\n--- a/src/plone/restapi/serializer/summary.py\n+++ b/src/plone/restapi/serializer/summary.py\n@@ -2,11 +2,40 @@\n from plone.app.contentlisting.interfaces import IContentListingObject\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.restapi.serializer.converters import json_compatible\n+from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n from zope.component import adapter\n from zope.interface import implementer\n from zope.interface import Interface\n \n+# fmt: off\n+DEFAULT_METADATA_FIELDS = set([\n+    \'@id\',\n+    \'@type\',\n+    \'description\',\n+    \'review_state\',\n+    \'title\',\n+])\n+\n+FIELD_ACCESSORS = {\n+    "@id": "getURL",\n+    "@type": "PortalType",\n+    "description": "Description",\n+    "title": "Title",\n+}\n+\n+NON_METADATA_ATTRIBUTES = set([\n+    "getPath",\n+    "getURL",\n+])\n+\n+BLACKLISTED_ATTRIBUTES = set([\n+    \'getDataOrigin\',\n+    \'getObject\',\n+    \'getUserData\',\n+])\n+# fmt: on\n+\n \n @implementer(ISerializeToJsonSummary)\n @adapter(Interface, Interface)\n@@ -23,17 +52,34 @@ def __init__(self, context, request):\n \n     def __call__(self):\n         obj = IContentListingObject(self.context)\n-        summary = json_compatible(\n-            {\n-                "@id": obj.getURL(),\n-                "@type": obj.PortalType(),\n-                "title": obj.Title(),\n-                "description": obj.Description(),\n-                "review_state": obj.review_state(),\n-            }\n-        )\n+\n+        summary = {}\n+        for field in self.metadata_fields():\n+            if field.startswith("_") or field in BLACKLISTED_ATTRIBUTES:\n+                continue\n+            accessor = FIELD_ACCESSORS.get(field, field)\n+            value = getattr(obj, accessor, None)\n+            if callable(value):\n+                value = value()\n+            summary[field] = json_compatible(value)\n         return summary\n \n+    def metadata_fields(self):\n+        additional_metadata_fields = self.request.form.get("metadata_fields", [])\n+        if not isinstance(additional_metadata_fields, list):\n+            additional_metadata_fields = [additional_metadata_fields]\n+        additional_metadata_fields = set(additional_metadata_fields)\n+\n+        if "_all" in additional_metadata_fields:\n+            fields_cache = self.request.get(\'_summary_fields_cache\', None)\n+            if fields_cache is None:\n+                catalog = getToolByName(self.context, "portal_catalog")\n+                fields_cache = set(catalog.schema()) | NON_METADATA_ATTRIBUTES\n+                self.request.set(\'_summary_fields_cache\', fields_cache)\n+            additional_metadata_fields = fields_cache\n+\n+        return DEFAULT_METADATA_FIELDS | additional_metadata_fields\n+\n \n @implementer(ISerializeToJsonSummary)\n @adapter(IPloneSiteRoot, Interface)\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 5a584625..f857fd97 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -33,6 +33,7 @@\n from zope.interface import implementer\n \n import collective.MockMailHost\n+import os\n import pkg_resources\n import re\n import requests\n@@ -105,21 +106,33 @@ def enable_request_language_negotiation(portal):\n class DateTimeFixture(Layer):\n     def setUp(self):\n         tz = "UTC"\n+        os.environ[\'TZ\'] = tz\n+        time.tzset()\n+\n         # Patch DateTime\'s timezone for deterministic behavior.\n         from DateTime import DateTime\n-\n         self.DT_orig_localZone = DateTime.localZone\n         DateTime.localZone = lambda cls=None, ltm=None: tz\n-        from plone.dexterity import content\n \n+        from plone.dexterity import content\n         content.FLOOR_DATE = DateTime(1970, 0)\n         content.CEILING_DATE = DateTime(2500, 0)\n+        self._orig_content_zone = content._zone\n+        content._zone = tz\n \n     def tearDown(self):\n-        from DateTime import DateTime\n+        if \'TZ\' in os.environ:\n+            del os.environ[\'TZ\']\n+        time.tzset()\n \n+        from DateTime import DateTime\n         DateTime.localZone = self.DT_orig_localZone\n \n+        from plone.dexterity import content\n+        content._zone = self._orig_content_zone\n+        content.FLOOR_DATE = DateTime(1970, 0)\n+        content.CEILING_DATE = DateTime(2500, 0)\n+\n \n DATE_TIME_FIXTURE = DateTimeFixture()\n \ndiff --git a/src/plone/restapi/tests/http-examples/content_get_folder.req b/src/plone/restapi/tests/http-examples/content_get_folder.req\nnew file mode 100644\nindex 00000000..41097d39\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/content_get_folder.req\n@@ -0,0 +1,3 @@\n+GET /plone/folder?metadata_fields=UID&metadata_fields=Creator HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/content_get_folder.resp b/src/plone/restapi/tests/http-examples/content_get_folder.resp\nnew file mode 100644\nindex 00000000..31f65fdd\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/content_get_folder.resp\n@@ -0,0 +1,80 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@components": {\n+    "actions": {\n+      "@id": "http://localhost:55001/plone/folder/@actions"\n+    }, \n+    "breadcrumbs": {\n+      "@id": "http://localhost:55001/plone/folder/@breadcrumbs"\n+    }, \n+    "navigation": {\n+      "@id": "http://localhost:55001/plone/folder/@navigation"\n+    }, \n+    "workflow": {\n+      "@id": "http://localhost:55001/plone/folder/@workflow"\n+    }\n+  }, \n+  "@id": "http://localhost:55001/plone/folder?metadata_fields=UID&metadata_fields=Creator", \n+  "@type": "Folder", \n+  "UID": "SomeUUID000000000000000000000002", \n+  "allow_discussion": false, \n+  "contributors": [], \n+  "created": "2016-01-21T07:14:48+00:00", \n+  "creators": [\n+    "test_user_1_"\n+  ], \n+  "description": "This is a folder with two documents", \n+  "effective": null, \n+  "exclude_from_nav": false, \n+  "expires": null, \n+  "id": "folder", \n+  "is_folderish": true, \n+  "items": [\n+    {\n+      "@id": "http://localhost:55001/plone/folder/doc1", \n+      "@type": "Document", \n+      "Creator": "test_user_1_", \n+      "UID": "SomeUUID000000000000000000000003", \n+      "description": "", \n+      "review_state": "private", \n+      "title": "A document within a folder"\n+    }, \n+    {\n+      "@id": "http://localhost:55001/plone/folder/doc2", \n+      "@type": "Document", \n+      "Creator": "test_user_1_", \n+      "UID": "SomeUUID000000000000000000000004", \n+      "description": "", \n+      "review_state": "private", \n+      "title": "A document within a folder"\n+    }, \n+    {\n+      "@id": "http://localhost:55001/plone/folder/my-document", \n+      "@type": "Document", \n+      "Creator": "admin", \n+      "UID": "SomeUUID000000000000000000000005", \n+      "description": "", \n+      "review_state": "private", \n+      "title": "My Document"\n+    }\n+  ], \n+  "items_total": 3, \n+  "language": "", \n+  "layout": "listing_view", \n+  "modified": "2016-10-21T19:00:00+00:00", \n+  "nextPreviousEnabled": false, \n+  "parent": {\n+    "@id": "http://localhost:55001/plone", \n+    "@type": "Plone Site", \n+    "description": "", \n+    "title": "Plone site"\n+  }, \n+  "relatedItems": [], \n+  "review_state": "private", \n+  "rights": "", \n+  "subjects": [], \n+  "title": "My Folder", \n+  "version": "current"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 7e91c81e..a3027ddf 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -233,6 +233,11 @@ def test_documentation_content_crud(self):\n         response = self.api_session.get(document.absolute_url())\n         save_request_and_response_for_docs("content_get", response)\n \n+        response = self.api_session.get(\n+            folder.absolute_url() + "?metadata_fields=UID&metadata_fields=Creator"\n+        )\n+        save_request_and_response_for_docs("content_get_folder", response)\n+\n         response = self.api_session.patch(\n             document.absolute_url(), json={"title": "My New Document Title"}\n         )\ndiff --git a/src/plone/restapi/tests/test_serializer_catalog.py b/src/plone/restapi/tests/test_serializer_catalog.py\nindex e8c64311..dd59afee 100644\n--- a/src/plone/restapi/tests/test_serializer_catalog.py\n+++ b/src/plone/restapi/tests/test_serializer_catalog.py\n@@ -119,74 +119,6 @@ def test_brain_summary_representation(self):\n             result,\n         )\n \n-    def test_brain_partial_metadata_representation(self):\n-        lazy_map = self.catalog(path="/plone/my-folder/my-document")\n-        brain = lazy_map[0]\n-        result = getMultiAdapter((brain, self.request), ISerializeToJson)(\n-            metadata_fields=["portal_type", "review_state"]\n-        )\n-\n-        self.assertDictEqual(\n-            {\n-                "@id": "http://nohost/plone/my-folder/my-document",\n-                "@type": "Document",\n-                "title": "My Document",\n-                "description": "",\n-                "portal_type": u"Document",\n-                "review_state": u"private",\n-            },\n-            result,\n-        )\n-\n-    def test_brain_full_metadata_representation(self):\n-        lazy_map = self.catalog(path="/plone/my-folder/my-document")\n-        brain = lazy_map[0]\n-        result = getMultiAdapter((brain, self.request), ISerializeToJson)(\n-            metadata_fields=["_all"]\n-        )\n-\n-        self.assertDictContainsSubset(\n-            {\n-                "@id": "http://nohost/plone/my-folder/my-document",\n-                "Creator": u"test_user_1_",\n-                "Description": u"",\n-                "EffectiveDate": u"None",\n-                "ExpirationDate": u"None",\n-                "Subject": [],\n-                "Title": u"My Document",\n-                "Type": u"Page",\n-                "UID": u"77779ffa110e45afb1ba502f75f77777",\n-                "author_name": None,\n-                "cmf_uid": 1,\n-                "commentators": [],\n-                "created": u"2015-12-31T23:45:00+00:00",\n-                "description": "",\n-                "effective": u"1969-12-31T00:00:00+00:00",\n-                "end": None,\n-                "exclude_from_nav": False,\n-                "expires": u"2499-12-31T00:00:00+00:00",\n-                "getId": u"my-document",\n-                "getObjSize": u"0 KB",\n-                "getPath": "/plone/my-folder/my-document",\n-                "getRemoteUrl": None,\n-                "getURL": "http://nohost/plone/my-folder/my-document",\n-                "id": u"my-document",\n-                "in_response_to": None,\n-                "is_folderish": False,\n-                "last_comment_date": None,\n-                "listCreators": [u"test_user_1_"],\n-                "location": None,\n-                "meta_type": u"Dexterity Item",\n-                "portal_type": u"Document",\n-                "review_state": u"private",\n-                "start": None,\n-                "sync_uid": None,\n-                "title": "My Document",\n-                "total_comments": 0,\n-            },\n-            result,\n-        )\n-\n \n class TestCatalogATSerializers(unittest.TestCase):\n \ndiff --git a/src/plone/restapi/tests/test_serializer_summary.py b/src/plone/restapi/tests/test_serializer_summary.py\nindex a8647e5e..c60ecf57 100644\n--- a/src/plone/restapi/tests/test_serializer_summary.py\n+++ b/src/plone/restapi/tests/test_serializer_summary.py\n@@ -1,5 +1,8 @@\n # -*- coding: utf-8 -*-\n+from freezegun import freeze_time\n from plone.app.contentlisting.interfaces import IContentListingObject\n+from plone.app.testing import popGlobalRegistry\n+from plone.app.testing import pushGlobalRegistry\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.dexterity.utils import createContentInContainer\n@@ -7,8 +10,11 @@\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+from plone.restapi.testing import register_static_uuid_utility\n from Products.CMFCore.utils import getToolByName\n from zope.component import getMultiAdapter\n+from zope.site.hooks import getSite\n+\n \n import Missing\n import unittest\n@@ -21,6 +27,12 @@ class TestSummarySerializers(unittest.TestCase):\n     def setUp(self):\n         self.portal = self.layer["portal"]\n         self.request = self.layer["request"]\n+\n+        pushGlobalRegistry(getSite())\n+        register_static_uuid_utility(prefix="c6dcbd55ab2746e199cd4ed458")\n+        self.time_freezer = freeze_time("2019-06-22 12:47:03")\n+        self.time_freezer.start()\n+\n         self.catalog = getToolByName(self.portal, "portal_catalog")\n \n         self.doc1 = createContentInContainer(\n@@ -31,6 +43,10 @@ def setUp(self):\n             description=u"Description",\n         )\n \n+    def tearDown(self):\n+        self.time_freezer.stop()\n+        popGlobalRegistry(getSite())\n+\n     def test_site_root_summary(self):\n         summary = getMultiAdapter(\n             (self.portal, self.request), ISerializeToJsonSummary\n@@ -97,6 +113,83 @@ def test_brain_summary_with_missing_value(self):\n             summary,\n         )\n \n+    def test_brain_summary_includes_additional_metadata_fields(self):\n+        brain = self.catalog(UID=self.doc1.UID())[0]\n+        self.request.form.update({\'metadata_fields\': [\'UID\', \'Creator\']})\n+        summary = getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n+\n+        self.assertDictEqual(\n+            {\n+                "@id": "http://nohost/plone/doc1",\n+                "@type": "DXTestDocument",\n+                \'UID\': \'c6dcbd55ab2746e199cd4ed458000001\',\n+                \'Creator\': \'test_user_1_\',\n+                "title": "Lorem Ipsum",\n+                "description": \'Description\',\n+                "review_state": "private",\n+            },\n+            summary,\n+        )\n+\n+    def test_brain_summary_includes_all_metadata_fields(self):\n+        brain = self.catalog(UID=self.doc1.UID())[0]\n+        self.request.form.update({\'metadata_fields\': \'_all\'})\n+        summary = getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n+\n+        # mime_type was added in Plone 5.1\n+        # Make sure tests pass on older Plone versions\n+        if \'mime_type\' not in summary:\n+            summary[\'mime_type\'] = u\'text/plain\'\n+\n+        self.assertDictEqual(\n+            {\n+                \'@id\': u\'http://nohost/plone/doc1\',\n+                \'@type\': u\'DXTestDocument\',\n+                \'CreationDate\': u\'2019-06-22T12:47:03+00:00\',\n+                \'Creator\': u\'test_user_1_\',\n+                \'Date\': u\'2019-06-22T12:47:03+00:00\',\n+                \'Description\': u\'Description\',\n+                \'EffectiveDate\': u\'None\',\n+                \'ExpirationDate\': u\'None\',\n+                \'ModificationDate\': u\'2019-06-22T12:47:03+00:00\',\n+                \'Subject\': [],\n+                \'Title\': u\'Lorem Ipsum\',\n+                \'Type\': u\'DX Test Document\',\n+                \'UID\': u\'c6dcbd55ab2746e199cd4ed458000001\',\n+                \'author_name\': None,\n+                \'cmf_uid\': None,\n+                \'commentators\': [],\n+                \'created\': u\'2019-06-22T12:47:03+00:00\',\n+                \'description\': u\'Description\',\n+                \'effective\': u\'1969-12-31T00:00:00+00:00\',\n+                \'end\': None,\n+                \'exclude_from_nav\': False,\n+                \'expires\': u\'2499-12-31T00:00:00+00:00\',\n+                \'getIcon\': None,\n+                \'getId\': u\'doc1\',\n+                \'getObjSize\': u\'0 KB\',\n+                \'getPath\': u\'/plone/doc1\',\n+                \'getRemoteUrl\': None,\n+                \'getURL\': u\'http://nohost/plone/doc1\',\n+                \'id\': u\'doc1\',\n+                \'in_response_to\': None,\n+                \'is_folderish\': False,\n+                \'last_comment_date\': None,\n+                \'listCreators\': [u\'test_user_1_\'],\n+                \'location\': None,\n+                \'meta_type\': u\'Dexterity Item\',\n+                \'mime_type\': u\'text/plain\',\n+                \'modified\': u\'2019-06-22T12:47:03+00:00\',\n+                \'portal_type\': u\'DXTestDocument\',\n+                \'review_state\': u\'private\',\n+                \'start\': None,\n+                \'sync_uid\': None,\n+                \'title\': u\'Lorem Ipsum\',\n+                \'total_comments\': 0,\n+            },\n+            summary,\n+        )\n+\n     def test_dx_type_summary(self):\n         summary = getMultiAdapter((self.doc1, self.request), ISerializeToJsonSummary)()\n \n'

