Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-06-23T18:11:48+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/688b68187c75c44049dfdddad0f18fcb829576c8

Filtering and batching for @vocabularies

Files changed:
A docs/source/_json/vocabularies_get_filtered.req
A docs/source/_json/vocabularies_get_filtered.resp
M CHANGES.rst
M docs/source/_json/vocabularies_get.resp
M docs/source/vocabularies.rst
M src/plone/restapi/serializer/catalog.py
M src/plone/restapi/serializer/vocabularies.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_services_vocabularies.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex cb32c5db..d3adb052 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,10 +1,29 @@\n Changelog\n =========\n \n-2.1.1 (unreleased)\n+3.0.0 (unreleased)\n ------------------\n \n-- Nothing changed yet.\n+Breaking Changes:\n+\n+- `@vocabularies` service:\n+  \n+  - No longer returns an `@id` for terms.\n+  - Results are batched. Batch size is 25 by default\n+    but can be overridden using the `b_size` parameter.\n+\n+  [davisagli]\n+\n+New Features:\n+\n+- `@vocabularies` service: Use `q` parameter to filter terms by title\n+  (case-insensitive).\n+  [davisagli]\n+\n+Bugfixes:\n+\n+- Avoid calculating batch links for catalog results twice.\n+  [davisagli]\n \n \n 2.1.0 (2018-06-23)\ndiff --git a/docs/source/_json/vocabularies_get.resp b/docs/source/_json/vocabularies_get.resp\nindex 06ecfc17..d7396025 100644\n--- a/docs/source/_json/vocabularies_get.resp\n+++ b/docs/source/_json/vocabularies_get.resp\n@@ -5,64 +5,53 @@ Content-Type: application/json\n   "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes", \n   "terms": [\n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Collection", \n       "title": "Collection", \n       "token": "Collection"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Discussion Item", \n       "title": "Comment", \n       "token": "Discussion Item"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/DXTestDocument", \n       "title": "DX Test Document", \n       "token": "DXTestDocument"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Event", \n       "title": "Event", \n       "token": "Event"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/File", \n       "title": "File", \n       "token": "File"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Folder", \n       "title": "Folder", \n       "token": "Folder"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Image", \n       "title": "Image", \n       "token": "Image"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Link", \n       "title": "Link", \n       "token": "Link"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/News Item", \n       "title": "News Item", \n       "token": "News Item"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Document", \n       "title": "Page", \n       "token": "Document"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/ATTestDocument", \n       "title": "Test Document", \n       "token": "ATTestDocument"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/ATTestFolder", \n       "title": "Test Folder", \n       "token": "ATTestFolder"\n     }\n-  ]\n+  ], \n+  "terms_total": 12\n }\n\\ No newline at end of file\ndiff --git a/docs/source/_json/vocabularies_get_filtered.req b/docs/source/_json/vocabularies_get_filtered.req\nnew file mode 100644\nindex 00000000..0b04c25a\n--- /dev/null\n+++ b/docs/source/_json/vocabularies_get_filtered.req\n@@ -0,0 +1,3 @@\n+GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?q=doc HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/docs/source/_json/vocabularies_get_filtered.resp b/docs/source/_json/vocabularies_get_filtered.resp\nnew file mode 100644\nindex 00000000..81d09cd3\n--- /dev/null\n+++ b/docs/source/_json/vocabularies_get_filtered.resp\n@@ -0,0 +1,17 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?q=doc", \n+  "terms": [\n+    {\n+      "title": "DX Test Document", \n+      "token": "DXTestDocument"\n+    }, \n+    {\n+      "title": "Test Document", \n+      "token": "ATTestDocument"\n+    }\n+  ], \n+  "terms_total": 2\n+}\n\\ No newline at end of file\ndiff --git a/docs/source/vocabularies.rst b/docs/source/vocabularies.rst\nindex 2de3babf..62366716 100644\n--- a/docs/source/vocabularies.rst\n+++ b/docs/source/vocabularies.rst\n@@ -27,16 +27,31 @@ vocabularies in Plone.\n Get a vocabulary\n ----------------\n \n-To get a particular vocabulary, ``/@vocabularies`` endpoint\n+To get a particular vocabulary, use the ``/@vocabularies`` endpoint\n with the name of the vocabulary, e.g.\n ``/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes``. The\n-endpoint can be used with the site root and content objects. The right way is\n-depending on the implementation of the vocabulary.\n+endpoint can be used with the site root and content objects.\n \n ..  http:example:: curl httpie python-requests\n     :request: _json/vocabularies_get.req\n \n-The server will respond with a list of terms. The title is pureley for display purposes. The token is what should be send to the server to retrive the value of the term.\n+The server will respond with a list of terms. The title is purely for display purposes.\n+The token is what should be sent to the server to retrieve the value of the term.\n+\n+.. note::\n+    Vocabulary terms will be **batched** if the size of the\n+    resultset exceeds the batch size. See :doc:`/batching` for more\n+    details on how to work with batched results.\n \n .. literalinclude:: _json/vocabularies_get.resp\n    :language: http\n+\n+Vocabulary terms can be filtered using a `q` parameter\n+to return only terms with a title that contains the specified text\n+(case insensitive).\n+\n+.. http:example:: curl httpie python-requests\n+    :request: _json/vocabularies_get_filtered.req\n+\n+.. literalinclude:: _json/vocabularies_get_filtered.resp\n+   :language: http\ndiff --git a/src/plone/restapi/serializer/catalog.py b/src/plone/restapi/serializer/catalog.py\nindex 8dc82671..fb78354c 100644\n--- a/src/plone/restapi/serializer/catalog.py\n+++ b/src/plone/restapi/serializer/catalog.py\n@@ -77,8 +77,9 @@ def __call__(self, metadata_fields=(), fullobjects=False):\n         results = {}\n         results[\'@id\'] = batch.canonical_url\n         results[\'items_total\'] = batch.items_total\n-        if batch.links:\n-            results[\'batching\'] = batch.links\n+        links = batch.links\n+        if links:\n+            results[\'batching\'] = links\n \n         results[\'items\'] = []\n         for brain in batch:\ndiff --git a/src/plone/restapi/serializer/vocabularies.py b/src/plone/restapi/serializer/vocabularies.py\nindex abf26d2b..18a53c2d 100644\n--- a/src/plone/restapi/serializer/vocabularies.py\n+++ b/src/plone/restapi/serializer/vocabularies.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from plone.restapi.batching import HypermediaBatch\n from plone.restapi.interfaces import ISerializeToJson\n from zope.component import adapter\n from zope.component import getMultiAdapter\n@@ -19,16 +20,31 @@ def __init__(self, context, request):\n \n     def __call__(self, vocabulary_id):\n         vocabulary = self.context\n-        serialized_terms = []\n+        query = self.request.form.get(\'q\', \'\')\n+\n+        terms = []\n         for term in vocabulary:\n+            if query.lower() not in term.title.lower():\n+                continue\n+            terms.append(term)\n+\n+        batch = HypermediaBatch(self.request, terms)\n+\n+        serialized_terms = []\n+        for term in batch:\n             serializer = getMultiAdapter((term, self.request),\n                                          interface=ISerializeToJson)\n-            serialized_terms.append(serializer(vocabulary_id))\n+            serialized_terms.append(serializer())\n \n-        return {\n-            \'@id\': vocabulary_id,\n-            \'terms\': serialized_terms\n+        result = {\n+            \'@id\': batch.canonical_url,\n+            \'terms\': serialized_terms,\n+            \'terms_total\': batch.items_total,\n         }\n+        links = batch.links\n+        if links:\n+            result[\'batching\'] = links\n+        return result\n \n \n @implementer(ISerializeToJson)\n@@ -39,12 +55,11 @@ def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n-    def __call__(self, vocabulary_id):\n+    def __call__(self):\n         term = self.context\n         token = term.token\n         title = term.title if ITitledTokenizedTerm.providedBy(term) else token\n         return {\n-            \'@id\': \'{}/{}\'.format(vocabulary_id, token),\n             \'token\': token,\n             \'title\': title\n         }\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 49d3cb47..a0b0e9bb 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -980,6 +980,14 @@ def test_documentation_vocabularies_get(self):\n         )\n         save_request_and_response_for_docs(\'vocabularies_get\', response)\n \n+    def test_documentation_vocabularies_get_filtered(self):\n+        response = self.api_session.get(\n+            \'/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?\'\n+            \'q=doc\'\n+        )\n+        save_request_and_response_for_docs(\n+            \'vocabularies_get_filtered\', response)\n+\n     def test_documentation_sharing_folder_get(self):\n         self.portal.invokeFactory(\'Folder\', id=\'folder\')\n         transaction.commit()\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 5dc5273e..a1bbf8c0 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -61,14 +61,60 @@ def test_get_vocabulary(self):\n         response = response.json()\n         self.assertEqual(\n             response,\n-            {u\'@id\': u\'http://localhost:55001/plone/@vocabularies/\'\'plone.restapi.tests.test_vocabulary\',  # noqa\n-             u\'terms\': [\n-                 {u\'@id\': u\'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary/token1\',  # noqa\n-                  u\'title\': u\'Title 1\',\n-                  u\'token\': u\'token1\'},\n-                 {u\'@id\': u\'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary/token2\',  # noqa\n-                  u\'title\': u\'Title 2\',\n-                  u\'token\': u\'token2\'}]})\n+            {\n+                u\'@id\': u\'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary\',  # noqa\n+                u\'terms\': [\n+                    {u\'title\': u\'Title 1\', u\'token\': u\'token1\'},\n+                    {u\'title\': u\'Title 2\', u\'token\': u\'token2\'},\n+                ],\n+                u\'terms_total\': 2,\n+            }\n+        )\n+\n+    def test_get_vocabulary_batched(self):\n+        response = self.api_session.get(\n+            \'/@vocabularies/plone.restapi.tests.test_vocabulary?b_size=1\'\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        response = response.json()\n+        self.assertEqual(\n+            response,\n+            {\n+                u\'@id\': u\'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary\',  # noqa\n+                u\'batching\': {\n+                    u\'@id\': u\'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary?b_size=1\',  # noqa\n+                    u\'first\': u\'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=0&b_size=1\',  # noqa\n+                    u\'last\': u\'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1\',  # noqa\n+                    u\'next\': u\'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1\',  # noqa\n+                },\n+                u\'terms\': [\n+                    {u\'title\': u\'Title 1\', u\'token\': u\'token1\'},\n+                ],\n+                u\'terms_total\': 2,\n+            }\n+        )\n+\n+    def test_get_vocabulary_filtered(self):\n+        response = self.api_session.get(\n+            \'/@vocabularies/plone.restapi.tests.test_vocabulary?q=2\'\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        response = response.json()\n+        self.assertEqual(\n+            response,\n+            {\n+                u\'@id\': u\'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary?q=2\',  # noqa\n+                u\'terms\': [\n+                    {\n+                        u\'title\': u\'Title 2\',\n+                        u\'token\': u\'token2\',\n+                    }\n+                ],\n+                u\'terms_total\': 1,\n+            }\n+        )\n \n     def test_get_unknown_vocabulary(self):\n         response = self.api_session.get(\n@@ -126,10 +172,8 @@ def test_context_vocabulary(self):\n             {\n                 u\'@id\': u\'http://localhost:55001/plone/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary\',  # noqa\n                 u\'terms\': [\n-                    {u\'@id\': u\'http://localhost:55001/plone/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary/id\',  # noqa\n-                     u\'title\': u\'testdoc\',\n-                     u\'token\': u\'id\'},\n-                    {u\'@id\': u\'http://localhost:55001/plone/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary/title\',  # noqa\n-                     u\'title\': u\'Document 1\',\n-                     u\'token\': u\'title\'}]\n+                    {u\'title\': u\'testdoc\', u\'token\': u\'id\'},\n+                    {u\'title\': u\'Document 1\', u\'token\': u\'title\'},\n+                ],\n+                u\'terms_total\': 2,\n             })\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-06-23T18:21:00+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/d9c0ef25385cf10bb0af04bc9cf6a070b6fa2d6c

Try container-based build, just for kicks

Files changed:
M .travis.yml

b'diff --git a/.travis.yml b/.travis.yml\nindex 92198db0..299a2ac7 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -1,6 +1,6 @@\n language: python\n python: "2.7"\n-sudo: required\n+sudo: false\n services:\n   - docker\n cache:\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-06-23T21:13:26+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/ab0d9559de2dd33b5f3c67548e8795679dae2bbe

Batch items instead of terms, for consistency

Files changed:
M CHANGES.rst
M docs/source/_json/vocabularies_get.resp
M docs/source/_json/vocabularies_get_filtered.resp
M docs/source/vocabularies.rst
M src/plone/restapi/serializer/vocabularies.py
M src/plone/restapi/tests/test_services_vocabularies.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex d3adb052..76295d71 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,15 +8,17 @@ Breaking Changes:\n \n - `@vocabularies` service:\n   \n-  - No longer returns an `@id` for terms.\n-  - Results are batched. Batch size is 25 by default\n-    but can be overridden using the `b_size` parameter.\n+  - No longer returns an ``@id`` for terms.\n+  - Results are batched, and terms are now listed as ``items``\n+    instead of ``terms`` to match other batched responses.\n+    Batch size is 25 by default but can be overridden\n+    using the ``b_size`` parameter.\n \n   [davisagli]\n \n New Features:\n \n-- `@vocabularies` service: Use `q` parameter to filter terms by title\n+- ``@vocabularies`` service: Use ``q`` parameter to filter terms by title\n   (case-insensitive).\n   [davisagli]\n \ndiff --git a/docs/source/_json/vocabularies_get.resp b/docs/source/_json/vocabularies_get.resp\nindex d7396025..3720bfcc 100644\n--- a/docs/source/_json/vocabularies_get.resp\n+++ b/docs/source/_json/vocabularies_get.resp\n@@ -3,7 +3,7 @@ Content-Type: application/json\n \n {\n   "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes", \n-  "terms": [\n+  "items": [\n     {\n       "title": "Collection", \n       "token": "Collection"\n@@ -53,5 +53,5 @@ Content-Type: application/json\n       "token": "ATTestFolder"\n     }\n   ], \n-  "terms_total": 12\n+  "items_total": 12\n }\n\\ No newline at end of file\ndiff --git a/docs/source/_json/vocabularies_get_filtered.resp b/docs/source/_json/vocabularies_get_filtered.resp\nindex 81d09cd3..e609c514 100644\n--- a/docs/source/_json/vocabularies_get_filtered.resp\n+++ b/docs/source/_json/vocabularies_get_filtered.resp\n@@ -3,7 +3,7 @@ Content-Type: application/json\n \n {\n   "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?q=doc", \n-  "terms": [\n+  "items": [\n     {\n       "title": "DX Test Document", \n       "token": "DXTestDocument"\n@@ -13,5 +13,5 @@ Content-Type: application/json\n       "token": "ATTestDocument"\n     }\n   ], \n-  "terms_total": 2\n+  "items_total": 2\n }\n\\ No newline at end of file\ndiff --git a/docs/source/vocabularies.rst b/docs/source/vocabularies.rst\nindex 62366716..81294295 100644\n--- a/docs/source/vocabularies.rst\n+++ b/docs/source/vocabularies.rst\n@@ -46,7 +46,7 @@ The token is what should be sent to the server to retrieve the value of the term\n .. literalinclude:: _json/vocabularies_get.resp\n    :language: http\n \n-Vocabulary terms can be filtered using a `q` parameter\n+Vocabulary terms can be filtered using a ``q`` parameter\n to return only terms with a title that contains the specified text\n (case insensitive).\n \ndiff --git a/src/plone/restapi/serializer/vocabularies.py b/src/plone/restapi/serializer/vocabularies.py\nindex 18a53c2d..31e6f4ca 100644\n--- a/src/plone/restapi/serializer/vocabularies.py\n+++ b/src/plone/restapi/serializer/vocabularies.py\n@@ -38,8 +38,8 @@ def __call__(self, vocabulary_id):\n \n         result = {\n             \'@id\': batch.canonical_url,\n-            \'terms\': serialized_terms,\n-            \'terms_total\': batch.items_total,\n+            \'items\': serialized_terms,\n+            \'items_total\': batch.items_total,\n         }\n         links = batch.links\n         if links:\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex a1bbf8c0..586d363f 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -63,11 +63,11 @@ def test_get_vocabulary(self):\n             response,\n             {\n                 u\'@id\': u\'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary\',  # noqa\n-                u\'terms\': [\n+                u\'items\': [\n                     {u\'title\': u\'Title 1\', u\'token\': u\'token1\'},\n                     {u\'title\': u\'Title 2\', u\'token\': u\'token2\'},\n                 ],\n-                u\'terms_total\': 2,\n+                u\'items_total\': 2,\n             }\n         )\n \n@@ -88,10 +88,10 @@ def test_get_vocabulary_batched(self):\n                     u\'last\': u\'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1\',  # noqa\n                     u\'next\': u\'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1\',  # noqa\n                 },\n-                u\'terms\': [\n+                u\'items\': [\n                     {u\'title\': u\'Title 1\', u\'token\': u\'token1\'},\n                 ],\n-                u\'terms_total\': 2,\n+                u\'items_total\': 2,\n             }\n         )\n \n@@ -106,13 +106,13 @@ def test_get_vocabulary_filtered(self):\n             response,\n             {\n                 u\'@id\': u\'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary?q=2\',  # noqa\n-                u\'terms\': [\n+                u\'items\': [\n                     {\n                         u\'title\': u\'Title 2\',\n                         u\'token\': u\'token2\',\n                     }\n                 ],\n-                u\'terms_total\': 1,\n+                u\'items_total\': 1,\n             }\n         )\n \n@@ -171,9 +171,9 @@ def test_context_vocabulary(self):\n             response.json(),\n             {\n                 u\'@id\': u\'http://localhost:55001/plone/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary\',  # noqa\n-                u\'terms\': [\n+                u\'items\': [\n                     {u\'title\': u\'testdoc\', u\'token\': u\'id\'},\n                     {u\'title\': u\'Document 1\', u\'token\': u\'title\'},\n                 ],\n-                u\'terms_total\': 2,\n+                u\'items_total\': 2,\n             })\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-06-23T22:49:06+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/f53f0aac7b5638d3f031c17543319d97645e2718

Make schemas refer to named vocabularies by URL rather than serializing terms inline

Files changed:
M CHANGES.rst
M docs/source/_json/controlpanels_get_item.resp
M docs/source/_json/registry_get_list.resp
M docs/source/_json/types_document.resp
M setup.py
M src/plone/restapi/tests/test_types.py
M src/plone/restapi/types/adapters.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 76295d71..37b870ea 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -16,6 +16,16 @@ Breaking Changes:\n \n   [davisagli]\n \n+- Choice fields using named vocabularies are now serialized\n+  with a ``vocabulary`` property giving the URL of the ``@vocabularies``\n+  endpoint for the vocabulary instead of including ``choices``,\n+  ``enum`` and ``enumNames`` inline.\n+  [davisagli]\n+\n+- The ``subjects`` field is now serialized as an ``array``\n+  of ``string`` items using the ``plone.app.vocabularies.Keywords`` vocabulary.\n+  [davisagli]\n+\n New Features:\n \n - ``@vocabularies`` service: Use ``q`` parameter to filter terms by title\ndiff --git a/docs/source/_json/controlpanels_get_item.resp b/docs/source/_json/controlpanels_get_item.resp\nindex e3ff789f..8a10f120 100644\n--- a/docs/source/_json/controlpanels_get_item.resp\n+++ b/docs/source/_json/controlpanels_get_item.resp\n@@ -46,28 +46,11 @@ Content-Type: application/json\n         "uniqueItems": false\n       }, \n       "default_editor": {\n-        "choices": [\n-          [\n-            "TinyMCE", \n-            "TinyMCE"\n-          ], \n-          [\n-            "None", \n-            "None"\n-          ]\n-        ], \n         "default": "TinyMCE", \n         "description": "Select the default wysiwyg editor. Users will be able to choose their own or select to use the site default.", \n-        "enum": [\n-          "TinyMCE", \n-          "None"\n-        ], \n-        "enumNames": [\n-          "TinyMCE", \n-          "None"\n-        ], \n         "title": "Default editor", \n-        "type": "string"\n+        "type": "string", \n+        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AvailableEditors"\n       }, \n       "enable_link_integrity_checks": {\n         "default": true, \ndiff --git a/docs/source/_json/registry_get_list.resp b/docs/source/_json/registry_get_list.resp\nindex 782336da..2aeeaed0 100644\n--- a/docs/source/_json/registry_get_list.resp\n+++ b/docs/source/_json/registry_get_list.resp\n@@ -188,12 +188,10 @@ Content-Type: application/json\n           ], \n           "description": "Paths to folders and collections to link to at the portal root.", \n           "items": {\n-            "choices": [], \n             "description": "", \n-            "enum": [], \n-            "enumNames": [], \n             "title": "", \n-            "type": "string"\n+            "type": "string", \n+            "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SyndicatableFeedItems"\n           }, \n           "title": "Site RSS", \n           "type": "array", \n@@ -342,75 +340,10 @@ Content-Type: application/json\n           ], \n           "description": "Select which formats are available for users as alternative to the default format. Note that if new formats are installed, they will be enabled for text fields by default unless explicitly turned off here or by the relevant installer.", \n           "items": {\n-            "choices": [\n-              [\n-                "text/html", \n-                "text/html"\n-              ], \n-              [\n-                "text/plain", \n-                "text/plain"\n-              ], \n-              [\n-                "text/plain-pre", \n-                "text/plain-pre"\n-              ], \n-              [\n-                "text/restructured", \n-                "text/restructured"\n-              ], \n-              [\n-                "text/structured", \n-                "text/structured"\n-              ], \n-              [\n-                "text/x-python", \n-                "text/x-python"\n-              ], \n-              [\n-                "text/x-rst", \n-                "text/x-rst"\n-              ], \n-              [\n-                "text/x-web-intelligent", \n-                "text/x-web-intelligent"\n-              ], \n-              [\n-                "text/x-web-markdown", \n-                "text/x-web-markdown"\n-              ], \n-              [\n-                "text/x-web-textile", \n-                "text/x-web-textile"\n-              ]\n-            ], \n             "description": "", \n-            "enum": [\n-              "text/html", \n-              "text/plain", \n-              "text/plain-pre", \n-              "text/restructured", \n-              "text/structured", \n-              "text/x-python", \n-              "text/x-rst", \n-              "text/x-web-intelligent", \n-              "text/x-web-markdown", \n-              "text/x-web-textile"\n-            ], \n-            "enumNames": [\n-              "text/html", \n-              "text/plain", \n-              "text/plain-pre", \n-              "text/restructured", \n-              "text/structured", \n-              "text/x-python", \n-              "text/x-rst", \n-              "text/x-web-intelligent", \n-              "text/x-web-markdown", \n-              "text/x-web-textile"\n-            ], \n             "title": "", \n-            "type": "string"\n+            "type": "string", \n+            "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AllowableContentTypes"\n           }, \n           "title": "Alternative formats", \n           "type": "array", \n@@ -462,22 +395,11 @@ Content-Type: application/json\n       "name": "plone.app.discussion.interfaces.IDiscussionSettings.captcha", \n       "schema": {\n         "properties": {\n-          "choices": [\n-            [\n-              "disabled", \n-              "Disabled"\n-            ]\n-          ], \n           "default": "disabled", \n           "description": "Use this setting to enable or disable Captcha validation for comments. Install plone.formwidget.captcha, plone.formwidget.recaptcha, collective.akismet, or collective.z3cform.norobots if there are no options available.", \n-          "enum": [\n-            "disabled"\n-          ], \n-          "enumNames": [\n-            "Disabled"\n-          ], \n           "title": "Captcha", \n-          "type": "string"\n+          "type": "string", \n+          "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.CaptchaVocabulary"\n         }\n       }, \n       "value": "disabled"\ndiff --git a/docs/source/_json/types_document.resp b/docs/source/_json/types_document.resp\nindex dd387bc3..0bc84b15 100644\n--- a/docs/source/_json/types_document.resp\n+++ b/docs/source/_json/types_document.resp\n@@ -139,40 +139,11 @@ Content-Type: application/json+schema\n       "type": "string"\n     }, \n     "language": {\n-      "choices": [\n-        [\n-          "de", \n-          "Deutsch"\n-        ], \n-        [\n-          "en", \n-          "English"\n-        ], \n-        [\n-          "es", \n-          "Espa\\u00f1ol"\n-        ], \n-        [\n-          "fr", \n-          "Fran\\u00e7ais"\n-        ]\n-      ], \n       "default": "en", \n       "description": "", \n-      "enum": [\n-        "de", \n-        "en", \n-        "es", \n-        "fr"\n-      ], \n-      "enumNames": [\n-        "Deutsch", \n-        "English", \n-        "Espa\\u00f1ol", \n-        "Fran\\u00e7ais"\n-      ], \n       "title": "Language", \n-      "type": "string"\n+      "type": "string", \n+      "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AvailableContentLanguages"\n     }, \n     "relatedItems": {\n       "additionalItems": true, \n@@ -181,7 +152,8 @@ Content-Type: application/json+schema\n       "items": {\n         "description": "", \n         "title": "Related", \n-        "type": "string"\n+        "type": "string", \n+        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n       }, \n       "title": "Related Items", \n       "type": "array", \n@@ -196,12 +168,16 @@ Content-Type: application/json+schema\n       "widget": "textarea"\n     }, \n     "subjects": {\n-      "choices": [], \n+      "additionalItems": true, \n       "description": "Tags are commonly used for ad-hoc organization of content.", \n-      "enum": [], \n-      "enumNames": [], \n+      "items": {\n+        "description": "", \n+        "title": "", \n+        "type": "string", \n+        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+      }, \n       "title": "Tags", \n-      "type": "string", \n+      "type": "array", \n       "vocabulary": "plone.app.vocabularies.Keywords"\n     }, \n     "table_of_contents": {\ndiff --git a/setup.py b/setup.py\nindex 1b6ff8c4..a92cb91f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,6 +1,6 @@\n from setuptools import setup, find_packages\n \n-version = \'2.1.1.dev0\'\n+version = \'3.0.0.dev0\'\n \n long_description = (\n     open(\'README.rst\').read() + \'\\n\' +\ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex e6214247..482b5a94 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -362,6 +362,25 @@ def test_choice(self):\n             adapter.get_schema()\n         )\n \n+    def test_choice_named_vocab(self):\n+        field = schema.Choice(\n+            title=u\'My field\',\n+            description=u\'My great field\',\n+            vocabulary=\'plone.app.vocabularies.ReallyUserFriendlyTypes\',\n+        )\n+        adapter = getMultiAdapter((field, self.portal, self.request),\n+                                  IJsonSchemaProvider)\n+\n+        self.assertEqual(\n+            {\n+                \'type\': \'string\',\n+                \'title\': u\'My field\',\n+                \'description\': u\'My great field\',\n+                \'vocabulary\': u\'http://nohost/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes\'  # noqa\n+            },\n+            adapter.get_schema()\n+        )\n+\n     def test_choice_source_vocab(self):\n         field = schema.Choice(\n             title=u\'My field\',\ndiff --git a/src/plone/restapi/types/adapters.py b/src/plone/restapi/types/adapters.py\nindex c44bda4d..79b7eb48 100644\n--- a/src/plone/restapi/types/adapters.py\n+++ b/src/plone/restapi/types/adapters.py\n@@ -5,7 +5,6 @@\n from plone.app.textfield.interfaces import IRichText\n from zope.component import adapter\n from zope.component import getMultiAdapter\n-from zope.component import getUtility\n from zope.i18n import translate\n from zope.interface import implementer\n from zope.interface import Interface\n@@ -29,7 +28,6 @@\n from zope.schema.interfaces import IText\n from zope.schema.interfaces import ITextLine\n from zope.schema.interfaces import ITuple\n-from zope.schema.interfaces import IVocabularyFactory\n \n from plone.restapi.types.interfaces import IJsonSchemaProvider\n from plone.restapi.types.utils import get_fieldsets, get_tagged_values\n@@ -231,7 +229,6 @@ def additional(self):\n @adapter(ITuple, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class TupleJsonSchemaProvider(SetJsonSchemaProvider):\n-\n     pass\n \n \n@@ -247,30 +244,39 @@ def get_type(self):\n         return \'string\'\n \n     def additional(self):\n-        # choices and enumNames are v5 proposals, for now we implement both\n-        choices = []\n-        enum = []\n-        enum_names = []\n-        vocabulary = None\n-\n-        if getattr(self.field, \'vocabularyName\', None):\n-            vocabulary = getUtility(\n-                IVocabularyFactory,\n-                name=self.field.vocabularyName)(self.context)\n-        elif getattr(self.field, \'vocabulary\', None):\n-            vocabulary = self.field.vocabulary\n-        else:\n+        vocab_name = getattr(self.field, \'vocabularyName\', None)\n+        if not vocab_name:\n             tagged = get_tagged_values([self.field.interface], WIDGETS_KEY)\n             tagged_field_values = tagged.get(self.field.getName(), {})\n             vocab_name = tagged_field_values.get(\'vocabulary\', None)\n-            if vocab_name:\n-                vocab_fac = getUtility(IVocabularyFactory, name=vocab_name)\n-                vocabulary = vocab_fac(self.context)\n+        if vocab_name:\n+            try:\n+                context_url = self.context.absolute_url()\n+            except AttributeError:\n+                portal = getMultiAdapter(\n+                    (self.context, self.request),\n+                    name=\'plone_portal_state\').portal()\n+                context_url = portal.absolute_url()\n+            vocab_url = \'{}/@vocabularies/{}\'.format(\n+                context_url,\n+                vocab_name,\n+            )\n+            return {\n+                \'vocabulary\': vocab_url,\n+            }\n+\n+        # Maybe we have an unnamed vocabulary or source.\n \n+        vocabulary = getattr(self.field, \'vocabulary\', None)\n         if IContextSourceBinder.providedBy(vocabulary):\n             vocabulary = vocabulary(self.context)\n \n         if hasattr(vocabulary, \'__iter__\') and self.should_render_choices:\n+            # choices and enumNames are v5 proposals, for now we implement both\n+            choices = []\n+            enum = []\n+            enum_names = []\n+\n             for term in vocabulary:\n                 title = translate(term.title, context=self.request)\n                 choices.append((term.token, title))\n@@ -385,5 +391,13 @@ def get_widget(self):\n \n @adapter(ITuple, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n-class SubjectsFieldJsonSchemaProvider(ChoiceJsonSchemaProvider):\n-    pass\n+class SubjectsFieldJsonSchemaProvider(CollectionJsonSchemaProvider):\n+\n+    def get_items(self):\n+        result = super(SubjectsFieldJsonSchemaProvider, self).get_items()\n+        vocab_name = \'plone.app.vocabularies.Keywords\'\n+        result[\'vocabulary\'] = \'{}/@vocabularies/{}\'.format(\n+            self.context.absolute_url(),\n+            vocab_name,\n+        )\n+        return result\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-06-24T16:21:14+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/362ea9c014ac93ff76aa4f0faeaa3699979a1db6

Move widget type and params into widget object

Files changed:
M CHANGES.rst
M docs/source/_json/types_document.resp
M src/plone/restapi/tests/test_types.py
M src/plone/restapi/types/adapters.py
M src/plone/restapi/types/configure.zcml
M src/plone/restapi/types/utils.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 37b870ea..85f727bb 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -16,14 +16,18 @@ Breaking Changes:\n \n   [davisagli]\n \n-- Choice fields using named vocabularies are now serialized\n-  with a ``vocabulary`` property giving the URL of the ``@vocabularies``\n-  endpoint for the vocabulary instead of including ``choices``,\n-  ``enum`` and ``enumNames`` inline.\n-  [davisagli]\n+- `@types` service:\n+\n+  - Choice fields using named vocabularies are now serialized\n+    with a ``vocabulary`` property giving the URL of the ``@vocabularies``\n+    endpoint for the vocabulary instead of including ``choices``,\n+    ``enum`` and ``enumNames`` inline.\n+  - The ``subjects`` field is now serialized as an ``array``\n+    of ``string`` items using the ``plone.app.vocabularies.Keywords`` vocabulary.\n+    [davisagli]\n+  - Serialize widget parameters into a ``widget`` object\n+    instead of adding them to the top level the schema property.\n \n-- The ``subjects`` field is now serialized as an ``array``\n-  of ``string`` items using the ``plone.app.vocabularies.Keywords`` vocabulary.\n   [davisagli]\n \n New Features:\ndiff --git a/docs/source/_json/types_document.resp b/docs/source/_json/types_document.resp\nindex 0bc84b15..e4759b02 100644\n--- a/docs/source/_json/types_document.resp\n+++ b/docs/source/_json/types_document.resp\n@@ -93,7 +93,9 @@ Content-Type: application/json+schema\n       "title": "Contributors", \n       "type": "array", \n       "uniqueItems": true, \n-      "vocabulary": "plone.app.vocabularies.Users"\n+      "widget": {\n+        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+      }\n     }, \n     "creators": {\n       "additionalItems": true, \n@@ -106,20 +108,26 @@ Content-Type: application/json+schema\n       "title": "Creators", \n       "type": "array", \n       "uniqueItems": true, \n-      "vocabulary": "plone.app.vocabularies.Users"\n+      "widget": {\n+        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+      }\n     }, \n     "description": {\n       "description": "Used in item listings and search results.", \n       "minLength": 0, \n       "title": "Summary", \n       "type": "string", \n-      "widget": "textarea"\n+      "widget": {\n+        "type": "textarea"\n+      }\n     }, \n     "effective": {\n       "description": "If this date is in the future, the content will not show up in listings and searches until this date.", \n       "title": "Publishing Date", \n       "type": "string", \n-      "widget": "datetime"\n+      "widget": {\n+        "type": "datetime"\n+      }\n     }, \n     "exclude_from_nav": {\n       "default": false, \n@@ -131,7 +139,9 @@ Content-Type: application/json+schema\n       "description": "When this date is reached, the content will no longer be visible in listings and searches.", \n       "title": "Expiration Date", \n       "type": "string", \n-      "widget": "datetime"\n+      "widget": {\n+        "type": "datetime"\n+      }\n     }, \n     "id": {\n       "description": "This name will be displayed in the URL.", \n@@ -158,14 +168,18 @@ Content-Type: application/json+schema\n       "title": "Related Items", \n       "type": "array", \n       "uniqueItems": true, \n-      "vocabulary": "plone.app.vocabularies.Catalog"\n+      "widget": {\n+        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+      }\n     }, \n     "rights": {\n       "description": "Copyright statement or other rights information on this item.", \n       "minLength": 0, \n       "title": "Rights", \n       "type": "string", \n-      "widget": "textarea"\n+      "widget": {\n+        "type": "textarea"\n+      }\n     }, \n     "subjects": {\n       "additionalItems": true, \n@@ -173,12 +187,14 @@ Content-Type: application/json+schema\n       "items": {\n         "description": "", \n         "title": "", \n-        "type": "string", \n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+        "type": "string"\n       }, \n       "title": "Tags", \n       "type": "array", \n-      "vocabulary": "plone.app.vocabularies.Keywords"\n+      "uniqueItems": true, \n+      "widget": {\n+        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+      }\n     }, \n     "table_of_contents": {\n       "description": "If selected, this will show a table of contents at the top of the page.", \n@@ -189,7 +205,9 @@ Content-Type: application/json+schema\n       "description": "", \n       "title": "Text", \n       "type": "string", \n-      "widget": "richtext"\n+      "widget": {\n+        "type": "richtext"\n+      }\n     }, \n     "title": {\n       "description": "", \ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex 482b5a94..f05de01e 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -182,7 +182,7 @@ def test_get_jsonschema_with_widget_params(self):\n         )\n         self.assertEqual(\n             \'some_value\',\n-            jsonschema[\'properties\'][\'another_field\'][\'a_param\']\n+            jsonschema[\'properties\'][\'another_field\'][\'widget\'][\'a_param\']\n         )\n \n \n@@ -246,7 +246,9 @@ def test_text(self):\n                 \'type\': \'string\',\n                 \'title\': u\'My field\',\n                 \'description\': u\'My great field\',\n-                \'widget\': \'textarea\',\n+                \'widget\': {\n+                    \'type\': \'textarea\',\n+                },\n                 \'default\': u\'Lorem ipsum dolor sit amet\',\n                 \'minLength\': 10,\n             },\n@@ -564,7 +566,9 @@ def test_richtext(self):\n                 \'type\': \'string\',\n                 \'title\': u\'My field\',\n                 \'description\': u\'My great field\',\n-                \'widget\': \'richtext\',\n+                \'widget\': {\n+                    \'type\': \'richtext\',\n+                },\n             },\n             adapter.get_schema()\n         )\n@@ -586,7 +590,9 @@ def test_date(self):\n                 \'title\': u\'My field\',\n                 \'description\': u\'My great field\',\n                 \'default\': date(2016, 1, 1),\n-                \'widget\': u\'date\',\n+                \'widget\': {\n+                    \'type\': u\'date\'\n+                },\n             },\n             adapter.get_schema()\n         )\n@@ -606,7 +612,9 @@ def test_datetime(self):\n                 \'type\': \'string\',\n                 \'title\': u\'My field\',\n                 \'description\': u\'My great field\',\n-                \'widget\': u\'datetime\',\n+                \'widget\': {\n+                    \'type\': u\'datetime\'\n+                },\n             },\n             adapter.get_schema()\n         )\ndiff --git a/src/plone/restapi/types/adapters.py b/src/plone/restapi/types/adapters.py\nindex 79b7eb48..0b596c12 100644\n--- a/src/plone/restapi/types/adapters.py\n+++ b/src/plone/restapi/types/adapters.py\n@@ -32,6 +32,7 @@\n from plone.restapi.types.interfaces import IJsonSchemaProvider\n from plone.restapi.types.utils import get_fieldsets, get_tagged_values\n from plone.restapi.types.utils import get_jsonschema_properties\n+from plone.restapi.types.utils import get_vocabulary_url\n \n \n @adapter(IField, Interface, Interface)\n@@ -67,7 +68,10 @@ def get_schema(self):\n             \'description\': self.get_description(),\n         }\n \n-        widget = self.get_widget()\n+        widget = self.get_widget_params()\n+        widget_type = self.get_widget()\n+        if widget_type:\n+            widget[\'type\'] = widget_type\n         if widget:\n             schema[\'widget\'] = widget\n \n@@ -83,6 +87,15 @@ def get_type(self):\n     def get_widget(self):\n         return None\n \n+    def get_widget_params(self):\n+        all_params = get_tagged_values([self.field.interface], WIDGETS_KEY)\n+        params = all_params.get(self.field.getName(), {})\n+        if \'vocabulary\' in params:\n+            vocab_name = params[\'vocabulary\']\n+            params[\'vocabulary\'] = get_vocabulary_url(\n+                vocab_name, self.context, self.request)\n+        return params\n+\n \n @adapter(IBytes, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n@@ -245,24 +258,10 @@ def get_type(self):\n \n     def additional(self):\n         vocab_name = getattr(self.field, \'vocabularyName\', None)\n-        if not vocab_name:\n-            tagged = get_tagged_values([self.field.interface], WIDGETS_KEY)\n-            tagged_field_values = tagged.get(self.field.getName(), {})\n-            vocab_name = tagged_field_values.get(\'vocabulary\', None)\n         if vocab_name:\n-            try:\n-                context_url = self.context.absolute_url()\n-            except AttributeError:\n-                portal = getMultiAdapter(\n-                    (self.context, self.request),\n-                    name=\'plone_portal_state\').portal()\n-                context_url = portal.absolute_url()\n-            vocab_url = \'{}/@vocabularies/{}\'.format(\n-                context_url,\n-                vocab_name,\n-            )\n             return {\n-                \'vocabulary\': vocab_url,\n+                \'vocabulary\': get_vocabulary_url(\n+                    vocab_name, self.context, self.request)\n             }\n \n         # Maybe we have an unnamed vocabulary or source.\n@@ -387,17 +386,3 @@ class DatetimeJsonSchemaProvider(DateJsonSchemaProvider):\n \n     def get_widget(self):\n         return \'datetime\'\n-\n-\n-@adapter(ITuple, Interface, Interface)\n-@implementer(IJsonSchemaProvider)\n-class SubjectsFieldJsonSchemaProvider(CollectionJsonSchemaProvider):\n-\n-    def get_items(self):\n-        result = super(SubjectsFieldJsonSchemaProvider, self).get_items()\n-        vocab_name = \'plone.app.vocabularies.Keywords\'\n-        result[\'vocabulary\'] = \'{}/@vocabularies/{}\'.format(\n-            self.context.absolute_url(),\n-            vocab_name,\n-        )\n-        return result\ndiff --git a/src/plone/restapi/types/configure.zcml b/src/plone/restapi/types/configure.zcml\nindex e55d6d52..3cf63a17 100644\n--- a/src/plone/restapi/types/configure.zcml\n+++ b/src/plone/restapi/types/configure.zcml\n@@ -19,7 +19,6 @@\n         zcml:condition="installed z3c.relationfield"\n         factory=".z3crelationadapter.ChoiceslessRelationListSchemaProvider"\n         name="IRelatedItems.relatedItems" />\n-    <adapter factory=".adapters.SubjectsFieldJsonSchemaProvider" name="IDublinCore.subjects" />\n     <adapter factory=".adapters.SetJsonSchemaProvider" />\n     <adapter factory=".adapters.TupleJsonSchemaProvider" />\n     <adapter factory=".adapters.ChoiceJsonSchemaProvider" />\ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex 97290afb..8aa43df8 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -16,7 +16,6 @@\n from collections import OrderedDict\n from copy import copy\n from plone.autoform.form import AutoExtensibleForm\n-from plone.autoform.interfaces import WIDGETS_KEY\n from plone.dexterity.utils import getAdditionalSchemata\n from plone.restapi.types.interfaces import IJsonSchemaProvider\n from Products.CMFCore.utils import getToolByName\n@@ -93,7 +92,7 @@ def get_fieldset_infos(fieldsets):\n \n \n def get_jsonschema_properties(context, request, fieldsets, prefix=\'\',\n-                              excluded_fields=None, tagged_values={}):\n+                              excluded_fields=None):\n     """Build a JSON schema \'properties\' list, based on a list of fieldset\n     dicts as returned by `get_fieldsets()`.\n     """\n@@ -122,11 +121,6 @@ def get_jsonschema_properties(context, request, fieldsets, prefix=\'\',\n \n             properties[fieldname] = adapter.get_schema()\n \n-            for key, value in tagged_values.get(fieldname, {}).items():\n-                if key in properties[fieldname]:\n-                    continue\n-                properties[fieldname][key] = value\n-\n     return properties\n \n \n@@ -163,16 +157,12 @@ def get_jsonschema_for_fti(fti, context, request, excluded_fields=None):\n             context, request, schema, additional_schemata\n         )\n \n-    # Mangle the properties a bit to add widgets hints\n-    schemas = (schema,) + additional_schemata\n-\n     # Build JSON schema properties\n     properties = get_jsonschema_properties(\n         context,\n         request,\n         fieldsets,\n         excluded_fields=excluded_fields,\n-        tagged_values=get_tagged_values(schemas, WIDGETS_KEY)\n     )\n \n     # Determine required fields\n@@ -204,3 +194,17 @@ def get_jsonschema_for_portal_type(portal_type, context, request,\n     fti = ttool[portal_type]\n     return get_jsonschema_for_fti(\n         fti, context, request, excluded_fields=excluded_fields)\n+\n+\n+def get_vocabulary_url(vocab_name, context, request):\n+    try:\n+        context_url = context.absolute_url()\n+    except AttributeError:\n+        portal = getMultiAdapter(\n+            (context, request),\n+            name=\'plone_portal_state\').portal()\n+        context_url = portal.absolute_url()\n+    return \'{}/@vocabularies/{}\'.format(\n+        context_url,\n+        vocab_name,\n+    )\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-06-24T16:50:09+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/e4103732fb5ba87baf5379ce56a046ea36fdfe64

keep widget as is

Files changed:
M CHANGES.rst
M docs/source/_json/types_document.resp
M src/plone/restapi/tests/test_types.py
M src/plone/restapi/types/adapters.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 85f727bb..e0f14ce4 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -25,8 +25,8 @@ Breaking Changes:\n   - The ``subjects`` field is now serialized as an ``array``\n     of ``string`` items using the ``plone.app.vocabularies.Keywords`` vocabulary.\n     [davisagli]\n-  - Serialize widget parameters into a ``widget`` object\n-    instead of adding them to the top level the schema property.\n+  - Serialize widget parameters into a ``widgetOptions`` object\n+    instead of adding them to the top level of the schema property.\n \n   [davisagli]\n \ndiff --git a/docs/source/_json/types_document.resp b/docs/source/_json/types_document.resp\nindex e4759b02..98e95c88 100644\n--- a/docs/source/_json/types_document.resp\n+++ b/docs/source/_json/types_document.resp\n@@ -93,7 +93,7 @@ Content-Type: application/json+schema\n       "title": "Contributors", \n       "type": "array", \n       "uniqueItems": true, \n-      "widget": {\n+      "widgetOptions": {\n         "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n       }\n     }, \n@@ -108,7 +108,7 @@ Content-Type: application/json+schema\n       "title": "Creators", \n       "type": "array", \n       "uniqueItems": true, \n-      "widget": {\n+      "widgetOptions": {\n         "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n       }\n     }, \n@@ -117,17 +117,13 @@ Content-Type: application/json+schema\n       "minLength": 0, \n       "title": "Summary", \n       "type": "string", \n-      "widget": {\n-        "type": "textarea"\n-      }\n+      "widget": "textarea"\n     }, \n     "effective": {\n       "description": "If this date is in the future, the content will not show up in listings and searches until this date.", \n       "title": "Publishing Date", \n       "type": "string", \n-      "widget": {\n-        "type": "datetime"\n-      }\n+      "widget": "datetime"\n     }, \n     "exclude_from_nav": {\n       "default": false, \n@@ -139,9 +135,7 @@ Content-Type: application/json+schema\n       "description": "When this date is reached, the content will no longer be visible in listings and searches.", \n       "title": "Expiration Date", \n       "type": "string", \n-      "widget": {\n-        "type": "datetime"\n-      }\n+      "widget": "datetime"\n     }, \n     "id": {\n       "description": "This name will be displayed in the URL.", \n@@ -168,7 +162,7 @@ Content-Type: application/json+schema\n       "title": "Related Items", \n       "type": "array", \n       "uniqueItems": true, \n-      "widget": {\n+      "widgetOptions": {\n         "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n       }\n     }, \n@@ -177,9 +171,7 @@ Content-Type: application/json+schema\n       "minLength": 0, \n       "title": "Rights", \n       "type": "string", \n-      "widget": {\n-        "type": "textarea"\n-      }\n+      "widget": "textarea"\n     }, \n     "subjects": {\n       "additionalItems": true, \n@@ -192,7 +184,7 @@ Content-Type: application/json+schema\n       "title": "Tags", \n       "type": "array", \n       "uniqueItems": true, \n-      "widget": {\n+      "widgetOptions": {\n         "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n       }\n     }, \n@@ -205,9 +197,7 @@ Content-Type: application/json+schema\n       "description": "", \n       "title": "Text", \n       "type": "string", \n-      "widget": {\n-        "type": "richtext"\n-      }\n+      "widget": "richtext"\n     }, \n     "title": {\n       "description": "", \ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex f05de01e..a869a545 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -182,7 +182,8 @@ def test_get_jsonschema_with_widget_params(self):\n         )\n         self.assertEqual(\n             \'some_value\',\n-            jsonschema[\'properties\'][\'another_field\'][\'widget\'][\'a_param\']\n+            jsonschema[\'properties\'][\'another_field\'][\n+                \'widgetOptions\'][\'a_param\']\n         )\n \n \n@@ -246,9 +247,7 @@ def test_text(self):\n                 \'type\': \'string\',\n                 \'title\': u\'My field\',\n                 \'description\': u\'My great field\',\n-                \'widget\': {\n-                    \'type\': \'textarea\',\n-                },\n+                \'widget\': \'textarea\',\n                 \'default\': u\'Lorem ipsum dolor sit amet\',\n                 \'minLength\': 10,\n             },\n@@ -566,9 +565,7 @@ def test_richtext(self):\n                 \'type\': \'string\',\n                 \'title\': u\'My field\',\n                 \'description\': u\'My great field\',\n-                \'widget\': {\n-                    \'type\': \'richtext\',\n-                },\n+                \'widget\': \'richtext\',\n             },\n             adapter.get_schema()\n         )\n@@ -590,9 +587,7 @@ def test_date(self):\n                 \'title\': u\'My field\',\n                 \'description\': u\'My great field\',\n                 \'default\': date(2016, 1, 1),\n-                \'widget\': {\n-                    \'type\': u\'date\'\n-                },\n+                \'widget\': u\'date\'\n             },\n             adapter.get_schema()\n         )\n@@ -612,9 +607,7 @@ def test_datetime(self):\n                 \'type\': \'string\',\n                 \'title\': u\'My field\',\n                 \'description\': u\'My great field\',\n-                \'widget\': {\n-                    \'type\': u\'datetime\'\n-                },\n+                \'widget\': u\'datetime\',\n             },\n             adapter.get_schema()\n         )\ndiff --git a/src/plone/restapi/types/adapters.py b/src/plone/restapi/types/adapters.py\nindex 0b596c12..e0c83d04 100644\n--- a/src/plone/restapi/types/adapters.py\n+++ b/src/plone/restapi/types/adapters.py\n@@ -68,13 +68,14 @@ def get_schema(self):\n             \'description\': self.get_description(),\n         }\n \n-        widget = self.get_widget_params()\n-        widget_type = self.get_widget()\n-        if widget_type:\n-            widget[\'type\'] = widget_type\n+        widget = self.get_widget()\n         if widget:\n             schema[\'widget\'] = widget\n \n+        widget_options = self.get_widget_params()\n+        if widget_options:\n+            schema[\'widgetOptions\'] = widget_options\n+\n         if self.field.default is not None:\n             schema[\'default\'] = self.field.default\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-06-24T17:23:22+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/8f82b34c8126292fbc4142c1a4fb05eaf1742253

Fix serialization of default values in Event schema

Files changed:
M src/plone/restapi/types/adapters.py
M src/plone/restapi/types/utils.py

b'diff --git a/src/plone/restapi/types/adapters.py b/src/plone/restapi/types/adapters.py\nindex e0c83d04..e1223c69 100644\n--- a/src/plone/restapi/types/adapters.py\n+++ b/src/plone/restapi/types/adapters.py\n@@ -1,7 +1,5 @@\n # -*- coding: utf-8 -*-\n """JsonSchema providers."""\n-from plone.autoform.interfaces import WIDGETS_KEY\n-\n from plone.app.textfield.interfaces import IRichText\n from zope.component import adapter\n from zope.component import getMultiAdapter\n@@ -30,7 +28,7 @@\n from zope.schema.interfaces import ITuple\n \n from plone.restapi.types.interfaces import IJsonSchemaProvider\n-from plone.restapi.types.utils import get_fieldsets, get_tagged_values\n+from plone.restapi.types.utils import get_fieldsets, get_widget_params\n from plone.restapi.types.utils import get_jsonschema_properties\n from plone.restapi.types.utils import get_vocabulary_url\n \n@@ -89,7 +87,7 @@ def get_widget(self):\n         return None\n \n     def get_widget_params(self):\n-        all_params = get_tagged_values([self.field.interface], WIDGETS_KEY)\n+        all_params = get_widget_params([self.field.interface])\n         params = all_params.get(self.field.getName(), {})\n         if \'vocabulary\' in params:\n             vocab_name = params[\'vocabulary\']\ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex 8aa43df8..8c47a821 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -16,7 +16,9 @@\n from collections import OrderedDict\n from copy import copy\n from plone.autoform.form import AutoExtensibleForm\n+from plone.autoform.interfaces import WIDGETS_KEY\n from plone.dexterity.utils import getAdditionalSchemata\n+from plone.restapi.serializer.converters import IJsonCompatible\n from plone.restapi.types.interfaces import IJsonSchemaProvider\n from Products.CMFCore.utils import getToolByName\n from plone.supermodel.utils import mergedTaggedValueDict\n@@ -124,16 +126,20 @@ def get_jsonschema_properties(context, request, fieldsets, prefix=\'\',\n     return properties\n \n \n-def get_tagged_values(schemas, key):\n+def get_widget_params(schemas):\n     params = {}\n     for schema in schemas:\n         if not schema:\n             continue\n-        tagged_values = mergedTaggedValueDict(schema, key)\n+        tagged_values = mergedTaggedValueDict(schema, WIDGETS_KEY)\n         for field_name in schema:\n             widget = tagged_values.get(field_name)\n             if widget and widget.params:\n-                params[field_name] = widget.params\n+                params[field_name] = {}\n+                for k, v in widget.params.items():\n+                    if callable(v):\n+                        v = v()\n+                    params[field_name][k] = v\n     return params\n \n \n@@ -179,7 +185,7 @@ def get_jsonschema_for_fti(fti, context, request, excluded_fields=None):\n     return {\n         \'type\': \'object\',\n         \'title\': translate(fti.Title(), context=getRequest()),\n-        \'properties\': properties,\n+        \'properties\': IJsonCompatible(properties),\n         \'required\': required,\n         \'fieldsets\': get_fieldset_infos(fieldsets),\n         \'layouts\': getattr(fti, \'view_methods\', []),\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-07-06T16:51:44+02:00
Author: Timo Stollenwerk (tisto) <stollenwerk@kitconcept.com>
Commit: https://github.com/plone/plone.restapi/commit/23071e0031c9793acd2fa0a7ad0e73db12fad51e

Merge branch 'master' into filtered-batched-vocabs

Files changed:
A .isort.cfg
A docs/source/i18n.rst
A docs/source/tiles.rst
A src/plone/restapi/behaviors.py
A src/plone/restapi/serializer/tile.py
A src/plone/restapi/services/tiles/__init__.py
A src/plone/restapi/services/tiles/configure.zcml
A src/plone/restapi/services/tiles/get.py
A src/plone/restapi/tests/http-examples/404_not_found.req
A src/plone/restapi/tests/http-examples/404_not_found.resp
A src/plone/restapi/tests/http-examples/actions_get.req
A src/plone/restapi/tests/http-examples/actions_get.resp
A src/plone/restapi/tests/http-examples/batching.req
A src/plone/restapi/tests/http-examples/batching.resp
A src/plone/restapi/tests/http-examples/breadcrumbs.req
A src/plone/restapi/tests/http-examples/breadcrumbs.resp
A src/plone/restapi/tests/http-examples/collection.req
A src/plone/restapi/tests/http-examples/collection.resp
A src/plone/restapi/tests/http-examples/comments_add_root.req
A src/plone/restapi/tests/http-examples/comments_add_root.resp
A src/plone/restapi/tests/http-examples/comments_add_sub.req
A src/plone/restapi/tests/http-examples/comments_add_sub.resp
A src/plone/restapi/tests/http-examples/comments_delete.req
A src/plone/restapi/tests/http-examples/comments_delete.resp
A src/plone/restapi/tests/http-examples/comments_get.req
A src/plone/restapi/tests/http-examples/comments_get.resp
A src/plone/restapi/tests/http-examples/comments_update.req
A src/plone/restapi/tests/http-examples/comments_update.resp
A src/plone/restapi/tests/http-examples/component_breadcrumbs.req
A src/plone/restapi/tests/http-examples/component_breadcrumbs.resp
A src/plone/restapi/tests/http-examples/component_navigation.req
A src/plone/restapi/tests/http-examples/component_navigation.resp
A src/plone/restapi/tests/http-examples/content_delete.req
A src/plone/restapi/tests/http-examples/content_delete.resp
A src/plone/restapi/tests/http-examples/content_get.req
A src/plone/restapi/tests/http-examples/content_get.resp
A src/plone/restapi/tests/http-examples/content_patch.req
A src/plone/restapi/tests/http-examples/content_patch.resp
A src/plone/restapi/tests/http-examples/content_patch_representation.req
A src/plone/restapi/tests/http-examples/content_patch_representation.resp
A src/plone/restapi/tests/http-examples/content_post.req
A src/plone/restapi/tests/http-examples/content_post.resp
A src/plone/restapi/tests/http-examples/content_reorder.req
A src/plone/restapi/tests/http-examples/controlpanels_get.req
A src/plone/restapi/tests/http-examples/controlpanels_get.resp
A src/plone/restapi/tests/http-examples/controlpanels_get_item.req
A src/plone/restapi/tests/http-examples/controlpanels_get_item.resp
A src/plone/restapi/tests/http-examples/controlpanels_patch.req
A src/plone/restapi/tests/http-examples/controlpanels_patch.resp
A src/plone/restapi/tests/http-examples/conversation_comment_add_root.req
A src/plone/restapi/tests/http-examples/conversation_comment_add_root.resp
A src/plone/restapi/tests/http-examples/conversation_comment_add_sub.req
A src/plone/restapi/tests/http-examples/conversation_comment_add_sub.resp
A src/plone/restapi/tests/http-examples/conversation_comment_delete.req
A src/plone/restapi/tests/http-examples/conversation_comment_delete.resp
A src/plone/restapi/tests/http-examples/conversation_comment_detele.req
A src/plone/restapi/tests/http-examples/conversation_comment_get.req
A src/plone/restapi/tests/http-examples/conversation_comment_update.req
A src/plone/restapi/tests/http-examples/conversation_comment_update.resp
A src/plone/restapi/tests/http-examples/conversation_delete.req
A src/plone/restapi/tests/http-examples/conversation_delete.resp
A src/plone/restapi/tests/http-examples/copy.json
A src/plone/restapi/tests/http-examples/copy.json.req
A src/plone/restapi/tests/http-examples/copy.json.resp
A src/plone/restapi/tests/http-examples/copy.req
A src/plone/restapi/tests/http-examples/copy.resp
A src/plone/restapi/tests/http-examples/copy_multiple.req
A src/plone/restapi/tests/http-examples/copy_multiple.resp
A src/plone/restapi/tests/http-examples/document.req
A src/plone/restapi/tests/http-examples/document.resp
A src/plone/restapi/tests/http-examples/event.req
A src/plone/restapi/tests/http-examples/event.resp
A src/plone/restapi/tests/http-examples/expansion.req
A src/plone/restapi/tests/http-examples/expansion.resp
A src/plone/restapi/tests/http-examples/expansion_expanded.req
A src/plone/restapi/tests/http-examples/expansion_expanded.resp
A src/plone/restapi/tests/http-examples/expansion_expanded_full.req
A src/plone/restapi/tests/http-examples/expansion_expanded_full.resp
A src/plone/restapi/tests/http-examples/file.req
A src/plone/restapi/tests/http-examples/file.resp
A src/plone/restapi/tests/http-examples/folder.req
A src/plone/restapi/tests/http-examples/folder.resp
A src/plone/restapi/tests/http-examples/groups.req
A src/plone/restapi/tests/http-examples/groups.resp
A src/plone/restapi/tests/http-examples/groups_created.req
A src/plone/restapi/tests/http-examples/groups_created.resp
A src/plone/restapi/tests/http-examples/groups_delete.req
A src/plone/restapi/tests/http-examples/groups_delete.resp
A src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.req
A src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp
A src/plone/restapi/tests/http-examples/groups_get.req
A src/plone/restapi/tests/http-examples/groups_get.resp
A src/plone/restapi/tests/http-examples/groups_update.req
A src/plone/restapi/tests/http-examples/groups_update.resp
A src/plone/restapi/tests/http-examples/history_get.req
A src/plone/restapi/tests/http-examples/history_get.resp
A src/plone/restapi/tests/http-examples/history_get_versioned.req
A src/plone/restapi/tests/http-examples/history_revert.req
A src/plone/restapi/tests/http-examples/history_revert.resp
A src/plone/restapi/tests/http-examples/image.req
A src/plone/restapi/tests/http-examples/image.resp
A src/plone/restapi/tests/http-examples/jwt_logged_in.req
A src/plone/restapi/tests/http-examples/jwt_logged_in.resp
A src/plone/restapi/tests/http-examples/jwt_login.req
A src/plone/restapi/tests/http-examples/jwt_login.resp
A src/plone/restapi/tests/http-examples/jwt_login_renew.req
A src/plone/restapi/tests/http-examples/jwt_login_renew.resp
A src/plone/restapi/tests/http-examples/jwt_logout.req
A src/plone/restapi/tests/http-examples/jwt_logout.resp
A src/plone/restapi/tests/http-examples/link.req
A src/plone/restapi/tests/http-examples/link.resp
A src/plone/restapi/tests/http-examples/lock.req
A src/plone/restapi/tests/http-examples/lock.resp
A src/plone/restapi/tests/http-examples/lock_get.req
A src/plone/restapi/tests/http-examples/lock_get.resp
A src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.req
A src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp
A src/plone/restapi/tests/http-examples/lock_update.req
A src/plone/restapi/tests/http-examples/lock_update.resp
A src/plone/restapi/tests/http-examples/login.req
A src/plone/restapi/tests/http-examples/move.json
A src/plone/restapi/tests/http-examples/move.json.req
A src/plone/restapi/tests/http-examples/move.json.resp
A src/plone/restapi/tests/http-examples/move.req
A src/plone/restapi/tests/http-examples/move.resp
A src/plone/restapi/tests/http-examples/navigation.req
A src/plone/restapi/tests/http-examples/navigation.resp
A src/plone/restapi/tests/http-examples/navigation_tree.req
A src/plone/restapi/tests/http-examples/navigation_tree.resp
A src/plone/restapi/tests/http-examples/newsitem.req
A src/plone/restapi/tests/http-examples/newsitem.resp
A src/plone/restapi/tests/http-examples/principals.req
A src/plone/restapi/tests/http-examples/principals.resp
A src/plone/restapi/tests/http-examples/refresh_lock.req
A src/plone/restapi/tests/http-examples/refresh_lock.resp
A src/plone/restapi/tests/http-examples/registry_get.req
A src/plone/restapi/tests/http-examples/registry_get.resp
A src/plone/restapi/tests/http-examples/registry_get_list.req
A src/plone/restapi/tests/http-examples/registry_get_list.resp
A src/plone/restapi/tests/http-examples/registry_update.req
A src/plone/restapi/tests/http-examples/registry_update.resp
A src/plone/restapi/tests/http-examples/roles.req
A src/plone/restapi/tests/http-examples/roles.resp
A src/plone/restapi/tests/http-examples/search.req
A src/plone/restapi/tests/http-examples/search.resp
A src/plone/restapi/tests/http-examples/sharing_folder_get.req
A src/plone/restapi/tests/http-examples/sharing_folder_get.resp
A src/plone/restapi/tests/http-examples/sharing_folder_get_include_titles.req
A src/plone/restapi/tests/http-examples/sharing_folder_post.req
A src/plone/restapi/tests/http-examples/sharing_folder_post.resp
A src/plone/restapi/tests/http-examples/sharing_search.req
A src/plone/restapi/tests/http-examples/sharing_search.resp
A src/plone/restapi/tests/http-examples/siteroot.req
A src/plone/restapi/tests/http-examples/siteroot.resp
A src/plone/restapi/tests/http-examples/translated_messages_object_history.req
A src/plone/restapi/tests/http-examples/translated_messages_object_history.resp
A src/plone/restapi/tests/http-examples/translated_messages_object_workflow.req
A src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp
A src/plone/restapi/tests/http-examples/translated_messages_types.req
A src/plone/restapi/tests/http-examples/translated_messages_types.resp
A src/plone/restapi/tests/http-examples/translated_messages_types_folder.req
A src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp
A src/plone/restapi/tests/http-examples/translations_delete.req
A src/plone/restapi/tests/http-examples/translations_delete.resp
A src/plone/restapi/tests/http-examples/translations_get.req
A src/plone/restapi/tests/http-examples/translations_get.resp
A src/plone/restapi/tests/http-examples/translations_post.req
A src/plone/restapi/tests/http-examples/translations_post.resp
A src/plone/restapi/tests/http-examples/tusreplace_patch.req
A src/plone/restapi/tests/http-examples/tusreplace_patch.resp
A src/plone/restapi/tests/http-examples/tusreplace_post.req
A src/plone/restapi/tests/http-examples/tusreplace_post.resp
A src/plone/restapi/tests/http-examples/tusupload_head.req
A src/plone/restapi/tests/http-examples/tusupload_head.resp
A src/plone/restapi/tests/http-examples/tusupload_options.req
A src/plone/restapi/tests/http-examples/tusupload_options.resp
A src/plone/restapi/tests/http-examples/tusupload_patch.req
A src/plone/restapi/tests/http-examples/tusupload_patch.resp
A src/plone/restapi/tests/http-examples/tusupload_patch_finalized.req
A src/plone/restapi/tests/http-examples/tusupload_patch_finalized.resp
A src/plone/restapi/tests/http-examples/tusupload_post.req
A src/plone/restapi/tests/http-examples/tusupload_post.resp
A src/plone/restapi/tests/http-examples/types.req
A src/plone/restapi/tests/http-examples/types.resp
A src/plone/restapi/tests/http-examples/types_document.req
A src/plone/restapi/tests/http-examples/types_document.resp
A src/plone/restapi/tests/http-examples/unlock.req
A src/plone/restapi/tests/http-examples/unlock.resp
A src/plone/restapi/tests/http-examples/users.req
A src/plone/restapi/tests/http-examples/users.resp
A src/plone/restapi/tests/http-examples/users_add.req
A src/plone/restapi/tests/http-examples/users_add.resp
A src/plone/restapi/tests/http-examples/users_anonymous.req
A src/plone/restapi/tests/http-examples/users_anonymous.resp
A src/plone/restapi/tests/http-examples/users_anonymous_get.req
A src/plone/restapi/tests/http-examples/users_anonymous_get.resp
A src/plone/restapi/tests/http-examples/users_authorized_get.req
A src/plone/restapi/tests/http-examples/users_authorized_get.resp
A src/plone/restapi/tests/http-examples/users_created.req
A src/plone/restapi/tests/http-examples/users_created.resp
A src/plone/restapi/tests/http-examples/users_delete.req
A src/plone/restapi/tests/http-examples/users_delete.resp
A src/plone/restapi/tests/http-examples/users_filtered_by_username.req
A src/plone/restapi/tests/http-examples/users_filtered_by_username.resp
A src/plone/restapi/tests/http-examples/users_get.req
A src/plone/restapi/tests/http-examples/users_get.resp
A src/plone/restapi/tests/http-examples/users_reset.req
A src/plone/restapi/tests/http-examples/users_unauthorized.req
A src/plone/restapi/tests/http-examples/users_unauthorized.resp
A src/plone/restapi/tests/http-examples/users_unauthorized_get.req
A src/plone/restapi/tests/http-examples/users_unauthorized_get.resp
A src/plone/restapi/tests/http-examples/users_update.req
A src/plone/restapi/tests/http-examples/users_update.resp
A src/plone/restapi/tests/http-examples/vocabularies.req
A src/plone/restapi/tests/http-examples/vocabularies.resp
A src/plone/restapi/tests/http-examples/vocabularies_get.req
A src/plone/restapi/tests/http-examples/vocabularies_get.resp
A src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req
A src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp
A src/plone/restapi/tests/http-examples/workflow_get.req
A src/plone/restapi/tests/http-examples/workflow_get.resp
A src/plone/restapi/tests/http-examples/workflow_post.req
A src/plone/restapi/tests/http-examples/workflow_post.resp
A src/plone/restapi/tests/http-examples/workflow_post_with_body.req
A src/plone/restapi/tests/http-examples/workflow_post_with_body.resp
A src/plone/restapi/tests/test_behaviors.py
A src/plone/restapi/tests/test_content_utils.py
A src/plone/restapi/tests/test_services_tiles.py
A test-no-sphinx-warnings.in
M .gitignore
M .travis.yml
M CHANGES.rst
M CONTRIBUTORS.rst
M base.cfg
M buildout.cfg
M docs/source/actions.rst
M docs/source/authentication.rst
M docs/source/batching.rst
M docs/source/breadcrumbs.rst
M docs/source/comments.rst
M docs/source/content.rst
M docs/source/controlpanels.rst
M docs/source/copymove.rst
M docs/source/expansion.rst
M docs/source/glossary.rst
M docs/source/groups.rst
M docs/source/history.rst
M docs/source/ideas/hydra.rst
M docs/source/index.rst
M docs/source/introduction.rst
M docs/source/locking.rst
M docs/source/navigation.rst
M docs/source/plone-content.rst
M docs/source/principals.rst
M docs/source/registry.rst
M docs/source/roles.rst
M docs/source/searching.rst
M docs/source/serialization.rst
M docs/source/sharing.rst
M docs/source/translations.rst
M docs/source/tusupload.rst
M docs/source/types.rst
M docs/source/upgrade-guide.rst
M docs/source/users.rst
M docs/source/vocabularies.rst
M docs/source/workflow.rst
M plone-4.3.x-performance.cfg
M plone-4.3.x.cfg
M plone-5.0.x-performance.cfg
M plone-5.0.x.cfg
M plone-5.1.x-performance.cfg
M plone-5.1.x.cfg
M requirements.txt
M setup.py
M src/plone/restapi/configure.zcml
M src/plone/restapi/deserializer/atcontent.py
M src/plone/restapi/deserializer/dxcontent.py
M src/plone/restapi/deserializer/dxfields.py
M src/plone/restapi/imaging.py
M src/plone/restapi/serializer/atfields.py
M src/plone/restapi/serializer/configure.zcml
M src/plone/restapi/serializer/dxfields.py
M src/plone/restapi/serializer/local_roles.py
M src/plone/restapi/services/configure.zcml
M src/plone/restapi/services/content/add.py
M src/plone/restapi/services/content/sharing.py
M src/plone/restapi/services/content/tus.py
M src/plone/restapi/services/content/utils.py
M src/plone/restapi/services/history/get.py
M src/plone/restapi/services/types/get.py
M src/plone/restapi/services/users/update.py
M src/plone/restapi/services/workflow/transition.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/robot/test.robot
M src/plone/restapi/tests/test_atcontent_deserializer.py
M src/plone/restapi/tests/test_atcontent_serializer.py
M src/plone/restapi/tests/test_atfield_serializer.py
M src/plone/restapi/tests/test_batching.py
M src/plone/restapi/tests/test_content_get.py
M src/plone/restapi/tests/test_content_local_roles.py
M src/plone/restapi/tests/test_content_patch.py
M src/plone/restapi/tests/test_content_post.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_dxcontent_serializer.py
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_dxfield_serializer.py
M src/plone/restapi/tests/test_expansion.py
M src/plone/restapi/tests/test_roles.py
M src/plone/restapi/tests/test_search.py
M src/plone/restapi/tests/test_serializer.py
M src/plone/restapi/tests/test_services.py
M src/plone/restapi/tests/test_services_breadcrumbs.py
M src/plone/restapi/tests/test_services_history.py
M src/plone/restapi/tests/test_services_navigation.py
M src/plone/restapi/tests/test_services_types.py
M src/plone/restapi/tests/test_services_users.py
M src/plone/restapi/tests/test_services_vocabularies.py
M src/plone/restapi/tests/test_tus.py
M src/plone/restapi/tests/test_workflow.py
M src/plone/restapi/types/adapters.py
M src/plone/restapi/types/configure.zcml
M test-no-uncommitted-doc-changes.in
M versions.cfg
D bootstrap-buildout.py
D bootstrap.py
D docs/source/_json/404_not_found.req
D docs/source/_json/404_not_found.resp
D docs/source/_json/actions_get.req
D docs/source/_json/actions_get.resp
D docs/source/_json/batching.req
D docs/source/_json/batching.resp
D docs/source/_json/breadcrumbs.req
D docs/source/_json/breadcrumbs.resp
D docs/source/_json/collection.req
D docs/source/_json/collection.resp
D docs/source/_json/comments_add_root.req
D docs/source/_json/comments_add_root.resp
D docs/source/_json/comments_add_sub.req
D docs/source/_json/comments_add_sub.resp
D docs/source/_json/comments_delete.req
D docs/source/_json/comments_delete.resp
D docs/source/_json/comments_get.req
D docs/source/_json/comments_get.resp
D docs/source/_json/comments_update.req
D docs/source/_json/comments_update.resp
D docs/source/_json/component_breadcrumbs.req
D docs/source/_json/component_breadcrumbs.resp
D docs/source/_json/component_navigation.req
D docs/source/_json/component_navigation.resp
D docs/source/_json/content_delete.req
D docs/source/_json/content_delete.resp
D docs/source/_json/content_get.req
D docs/source/_json/content_get.resp
D docs/source/_json/content_patch.req
D docs/source/_json/content_patch.resp
D docs/source/_json/content_patch_representation.req
D docs/source/_json/content_patch_representation.resp
D docs/source/_json/content_post.req
D docs/source/_json/content_post.resp
D docs/source/_json/content_reorder.req
D docs/source/_json/controlpanels_get.req
D docs/source/_json/controlpanels_get.resp
D docs/source/_json/controlpanels_get_item.req
D docs/source/_json/controlpanels_get_item.resp
D docs/source/_json/controlpanels_patch.req
D docs/source/_json/controlpanels_patch.resp
D docs/source/_json/conversation_comment_add_root.req
D docs/source/_json/conversation_comment_add_root.resp
D docs/source/_json/conversation_comment_add_sub.req
D docs/source/_json/conversation_comment_add_sub.resp
D docs/source/_json/conversation_comment_delete.req
D docs/source/_json/conversation_comment_delete.resp
D docs/source/_json/conversation_comment_detele.req
D docs/source/_json/conversation_comment_get.req
D docs/source/_json/conversation_comment_update.req
D docs/source/_json/conversation_comment_update.resp
D docs/source/_json/conversation_delete.req
D docs/source/_json/conversation_delete.resp
D docs/source/_json/copy.json
D docs/source/_json/copy.json.req
D docs/source/_json/copy.json.resp
D docs/source/_json/copy.req
D docs/source/_json/copy.resp
D docs/source/_json/copy_multiple.req
D docs/source/_json/copy_multiple.resp
D docs/source/_json/document.req
D docs/source/_json/document.resp
D docs/source/_json/event.req
D docs/source/_json/event.resp
D docs/source/_json/expansion.req
D docs/source/_json/expansion.resp
D docs/source/_json/expansion_expanded.req
D docs/source/_json/expansion_expanded.resp
D docs/source/_json/expansion_expanded_full.req
D docs/source/_json/expansion_expanded_full.resp
D docs/source/_json/file.req
D docs/source/_json/file.resp
D docs/source/_json/folder.req
D docs/source/_json/folder.resp
D docs/source/_json/groups.req
D docs/source/_json/groups.resp
D docs/source/_json/groups_created.req
D docs/source/_json/groups_created.resp
D docs/source/_json/groups_delete.req
D docs/source/_json/groups_delete.resp
D docs/source/_json/groups_filtered_by_groupname.req
D docs/source/_json/groups_filtered_by_groupname.resp
D docs/source/_json/groups_get.req
D docs/source/_json/groups_get.resp
D docs/source/_json/groups_update.req
D docs/source/_json/groups_update.resp
D docs/source/_json/history_get.req
D docs/source/_json/history_get.resp
D docs/source/_json/history_get_versioned.req
D docs/source/_json/history_revert.req
D docs/source/_json/history_revert.resp
D docs/source/_json/image.req
D docs/source/_json/image.resp
D docs/source/_json/jwt_logged_in.req
D docs/source/_json/jwt_logged_in.resp
D docs/source/_json/jwt_login.req
D docs/source/_json/jwt_login.resp
D docs/source/_json/jwt_login_renew.req
D docs/source/_json/jwt_login_renew.resp
D docs/source/_json/jwt_logout.req
D docs/source/_json/jwt_logout.resp
D docs/source/_json/link.req
D docs/source/_json/link.resp
D docs/source/_json/lock.req
D docs/source/_json/lock.resp
D docs/source/_json/lock_get.req
D docs/source/_json/lock_get.resp
D docs/source/_json/lock_nonstealable_timeout.req
D docs/source/_json/lock_nonstealable_timeout.resp
D docs/source/_json/lock_update.req
D docs/source/_json/lock_update.resp
D docs/source/_json/login.req
D docs/source/_json/move.json
D docs/source/_json/move.json.req
D docs/source/_json/move.json.resp
D docs/source/_json/move.req
D docs/source/_json/move.resp
D docs/source/_json/navigation.req
D docs/source/_json/navigation.resp
D docs/source/_json/navigation_tree.req
D docs/source/_json/navigation_tree.resp
D docs/source/_json/newsitem.req
D docs/source/_json/newsitem.resp
D docs/source/_json/principals.req
D docs/source/_json/principals.resp
D docs/source/_json/refresh_lock.req
D docs/source/_json/refresh_lock.resp
D docs/source/_json/registry_get.req
D docs/source/_json/registry_get.resp
D docs/source/_json/registry_get_list.req
D docs/source/_json/registry_get_list.resp
D docs/source/_json/registry_update.req
D docs/source/_json/registry_update.resp
D docs/source/_json/roles.req
D docs/source/_json/roles.resp
D docs/source/_json/search.req
D docs/source/_json/search.resp
D docs/source/_json/sharing_folder_get.req
D docs/source/_json/sharing_folder_get.resp
D docs/source/_json/sharing_folder_post.req
D docs/source/_json/sharing_folder_post.resp
D docs/source/_json/sharing_search.req
D docs/source/_json/sharing_search.resp
D docs/source/_json/siteroot.req
D docs/source/_json/siteroot.resp
D docs/source/_json/translations_delete.req
D docs/source/_json/translations_delete.resp
D docs/source/_json/translations_get.req
D docs/source/_json/translations_get.resp
D docs/source/_json/translations_post.req
D docs/source/_json/translations_post.resp
D docs/source/_json/tusreplace_patch.req
D docs/source/_json/tusreplace_patch.resp
D docs/source/_json/tusreplace_post.req
D docs/source/_json/tusreplace_post.resp
D docs/source/_json/tusupload_head.req
D docs/source/_json/tusupload_head.resp
D docs/source/_json/tusupload_options.req
D docs/source/_json/tusupload_options.resp
D docs/source/_json/tusupload_patch.req
D docs/source/_json/tusupload_patch.resp
D docs/source/_json/tusupload_patch_finalized.req
D docs/source/_json/tusupload_patch_finalized.resp
D docs/source/_json/tusupload_post.req
D docs/source/_json/tusupload_post.resp
D docs/source/_json/types.req
D docs/source/_json/types.resp
D docs/source/_json/types_document.req
D docs/source/_json/types_document.resp
D docs/source/_json/unlock.req
D docs/source/_json/unlock.resp
D docs/source/_json/users.req
D docs/source/_json/users.resp
D docs/source/_json/users_add.req
D docs/source/_json/users_add.resp
D docs/source/_json/users_anonymous.req
D docs/source/_json/users_anonymous.resp
D docs/source/_json/users_anonymous_get.req
D docs/source/_json/users_anonymous_get.resp
D docs/source/_json/users_authorized_get.req
D docs/source/_json/users_authorized_get.resp
D docs/source/_json/users_created.req
D docs/source/_json/users_created.resp
D docs/source/_json/users_delete.req
D docs/source/_json/users_delete.resp
D docs/source/_json/users_filtered_by_username.req
D docs/source/_json/users_filtered_by_username.resp
D docs/source/_json/users_get.req
D docs/source/_json/users_get.resp
D docs/source/_json/users_reset.req
D docs/source/_json/users_unauthorized.req
D docs/source/_json/users_unauthorized.resp
D docs/source/_json/users_unauthorized_get.req
D docs/source/_json/users_unauthorized_get.resp
D docs/source/_json/users_update.req
D docs/source/_json/users_update.resp
D docs/source/_json/vocabularies.req
D docs/source/_json/vocabularies.resp
D docs/source/_json/vocabularies_get.req
D docs/source/_json/vocabularies_get.resp
D docs/source/_json/workflow_get.req
D docs/source/_json/workflow_get.resp
D docs/source/_json/workflow_post.req
D docs/source/_json/workflow_post.resp

b'diff --git a/.gitignore b/.gitignore\nindex 9340215f8..e79fd8c8 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -33,4 +33,4 @@ jmeter.log\n pip-selfcheck.json\n /.idea\n /.vscode\n-\n+/.ipython\ndiff --git a/.isort.cfg b/.isort.cfg\nnew file mode 100644\nindex 00000000..85c8762c\n--- /dev/null\n+++ b/.isort.cfg\n@@ -0,0 +1,8 @@\n+[settings]\n+# for details see\n+# http://docs.plone.org/develop/styleguide/python.html#grouping-and-sorting\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n+line_length = 200\n+not_skip = __init__.py\ndiff --git a/.travis.yml b/.travis.yml\nindex 299a2ac7..5d46b12a 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -17,6 +17,10 @@ env:\n     - PLONE_VERSION=5.1.x\n before_install:\n   - mkdir -p $HOME/buildout-cache/{eggs,downloads}\n+  - mkdir $HOME/.buildout\n+  - echo "[buildout]" > $HOME/.buildout/default.cfg\n+  - echo "download-cache = $HOME/buildout-cache/downloads" >> $HOME/.buildout/default.cfg\n+  - echo "eggs-directory = $HOME/buildout-cache/eggs" >> $HOME/.buildout/default.cfg\n   - pip install -r requirements.txt\n install:\n   - sed -ie "s#plone-x.x.x.cfg#plone-$PLONE_VERSION.cfg#" travis.cfg\n@@ -26,11 +30,12 @@ script:\n   - bin/sphinxbuilder\n   - bin/test\n   - bin/test-no-uncommitted-doc-changes\n+  - bin/test-no-sphinx-warnings\n after_success:\n   - bin/test-coverage\n   - pip install coverage==3.7.1 coveralls\n   - coveralls\n-  - docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"\n-  - if [ ! $TRAVIS_TAG ]; then docker build --tag plone/plone.restapi:plone-$PLONE_VERSION-$(git rev-parse HEAD) --tag plone/plone.restapi:latest . ; fi\n-  - if [ $TRAVIS_TAG ]; then docker build --tag plone/plone.restapi:plone-$PLONE_VERSION-$(git rev-parse HEAD) . --tag plone/plone.restapi:plone-$PLONE_VERSION-$TRAVIS_TAG --tag plone/plone.restapi:latest ; fi\n-  - docker push plone/plone.restapi\n+  # - docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"\n+  # - if [ ! $TRAVIS_TAG ]; then docker build --tag plone/plone.restapi:plone-$PLONE_VERSION-$(git rev-parse HEAD) --tag plone/plone.restapi:latest . ; fi\n+  # - if [ $TRAVIS_TAG ]; then docker build --tag plone/plone.restapi:plone-$PLONE_VERSION-$(git rev-parse HEAD) . --tag plone/plone.restapi:plone-$PLONE_VERSION-$TRAVIS_TAG --tag plone/plone.restapi:latest ; fi\n+  # - docker push plone/plone.restapi\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex e0f14ce4..85a65c85 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,6 +1,7 @@\n Changelog\n =========\n \n+\n 3.0.0 (unreleased)\n ------------------\n \n@@ -42,6 +43,121 @@ Bugfixes:\n   [davisagli]\n \n \n+3.2.2 (unreleased)\n+------------------\n+\n+Bugfixes:\n+\n+- Do not include HTTP examples using data_files anymore, but move them below\n+  src/plone/restapi instead and use package_data to include them.\n+  [lgraf]\n+\n+- Rename Dexterity content before adding it to a container.\n+  [buchi]\n+\n+- Avoid hard dependency on Archetypes introduced in 3.0.0.\n+  This fixes `issue 570 <https://github.com/plone/plone.restapi/issues/570>`_.\n+  [buchi]\n+\n+- Make setup.py require plone.behavior >= 1.1. This fixes #575.\n+  [timo]\n+\n+\n+3.2.1 (2018-06-28)\n+------------------\n+\n+Bugfixes:\n+\n+- Require plone.schema >= 1.2.0 in setup.py for new tiles endpoint.\n+  [timo]\n+\n+3.2.0 (2018-06-28)\n+------------------\n+\n+New Features:\n+\n+- Add tiles endpoint for getting all available content tiles and its JSONSchema.\n+  [sneridagh]\n+\n+- Add a tiles behavior to support the new tiles implementation for plone.restapi.\n+  [sneridagh]\n+\n+- Make sure to include HTTP examples in installed egg, so test_documentation\n+  tests also work against a installed release of plone.restapi.\n+  [lgraf]\n+\n+\n+3.1.0 (2018-06-27)\n+------------------\n+\n+New Features:\n+\n+- Plone 5.2 compatibility.\n+  [sunew, davisagli, timo]\n+\n+\n+3.0.0 (2018-06-26)\n+------------------\n+\n+Breaking Changes:\n+\n+- Fix object creation events. Before this fix, creation events were fired on\n+  empty not yet deserialized objects. Also a modified event was fired after\n+  deserializing e newly created object.\n+  Custom content deserializers now must handle the `create` keyword argument,\n+  which determines if deserialization is performed during object creation or\n+  while updating an object.\n+  [buchi]\n+\n+- Include translated role titles in `@sharing` GET.\n+  [lgraf]\n+\n+- Image URLs are now created using the cache optimized way. Fixes #494.\n+  [erral]\n+\n+\n+2.2.1 (2018-06-25)\n+------------------\n+\n+Bugfixes:\n+\n+- Fix ReST on PyPi.\n+  [timo]\n+\n+\n+2.2.0 (2018-06-25)\n+------------------\n+\n+New Features:\n+\n+- Document the use of the `Accept-Language` HTTP header.\n+  [erral]\n+\n+- Translate FTI titles on `@types` endpoint. Fixes #337.\n+  [erral]\n+\n+- Translate action name, workflow state and transition names in @history endpoint.\n+  [erral]\n+\n+- Enhance `@workflow` endpoint to support applying transitions to all contained\n+  items and to set effective and expiration dates.\n+  [buchi]\n+\n+Bugfixes:\n+\n+- Make sure DX DefaultFieldDeserializer validates field values.\n+  [lgraf]\n+\n+- Reindex AT content on PATCH. This fixes `issue 531 <https://github.com/plone/plone.restapi/issues/531>`_.\n+  [buchi]\n+\n+- Fix change password on Plone 5.2\n+  [sunew]\n+\n+- Plone 5.2 compatible tests.\n+  [sunew]\n+\n+\n 2.1.0 (2018-06-23)\n ------------------\n \ndiff --git a/CONTRIBUTORS.rst b/CONTRIBUTORS.rst\nindex ec0182c5..c86593a7 100644\n--- a/CONTRIBUTORS.rst\n+++ b/CONTRIBUTORS.rst\n@@ -14,3 +14,4 @@\n - Tom Gross\n - Roel Bruggink\n - Yann Fouillat, alias Gagaro\n+- Sune Br\xc3\xb8ndum W\xc3\xb8ller\ndiff --git a/base.cfg b/base.cfg\nindex c212abe5..4e6a6580 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -1,5 +1,5 @@\n [buildout]\n-index = https://pypi.python.org/simple\n+index = https://pypi.org/simple/\n extensions = mr.developer\n parts =\n     instance\n@@ -7,6 +7,7 @@ parts =\n     coverage\n     test-coverage\n     test-no-uncommitted-doc-changes\n+    test-no-sphinx-warnings\n     code-analysis\n     dependencychecker\n     releaser\n@@ -22,6 +23,16 @@ sources-dir = extras\n auto-checkout =\n #    plone.rest\n \n+allow-hosts =\n+    *.python.org\n+    *.plone.org\n+    *.zope.org\n+    pypi.org\n+    files.pythonhosted.org\n+    launchpad.net\n+    code.google.com\n+    robotframework.googlecode.com\n+\n [instance]\n recipe = plone.recipe.zope2instance\n user = admin:admin\n@@ -35,6 +46,19 @@ eggs =\n environment-vars =\n     zope_i18n_compile_mo_files true\n \n+zcml-additional =\n+  <configure xmlns="http://namespaces.zope.org/zope"\n+             xmlns:plone="http://namespaces.plone.org/plone">\n+    <plone:CORSPolicy\n+        allow_origin="http://localhost:4300,http://127.0.0.1:4300"\n+        allow_methods="DELETE,GET,OPTIONS,PATCH,POST,PUT"\n+        allow_credentials="true"\n+        expose_headers="Content-Length,X-My-Header"\n+        allow_headers="Accept,Authorization,Content-Type,X-Custom-Header"\n+        max_age="3600"\n+        />\n+    </configure>\n+\n [test]\n recipe = zc.recipe.testrunner\n eggs = ${instance:eggs}\n@@ -65,6 +89,11 @@ input = test-no-uncommitted-doc-changes.in\n output = bin/test-no-uncommitted-doc-changes\n mode = 755\n \n+[test-no-sphinx-warnings]\n+recipe = collective.recipe.template\n+input = test-no-sphinx-warnings.in\n+output = bin/test-no-sphinx-warnings\n+mode = 755\n \n [code-analysis]\n recipe = plone.recipe.codeanalysis\n@@ -89,7 +118,10 @@ scripts = dependencychecker\n \n [releaser]\n recipe = zc.recipe.egg\n-eggs = zest.releaser\n+eggs =\n+    zest.releaser[recommended]\n+    readme\n+    docutils\n \n [pocompile]\n recipe = zc.recipe.egg\n@@ -156,3 +188,4 @@ mode = 755\n \n [sources]\n plone.rest = git git://github.com/plone/plone.rest.git pushurl=git@github.com:plone/plone.rest.git branch=master\n+plone.schema = git git://github.com/plone/plone.schema.git pushurl=git@github.com:plone/plone.schema.git branch=newjsonschemafield\ndiff --git a/bootstrap-buildout.py b/bootstrap-buildout.py\ndeleted file mode 100644\nindex a4599211..00000000\n--- a/bootstrap-buildout.py\n+++ /dev/null\n@@ -1,210 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-__version__ = \'2015-07-01\'\n-# See zc.buildout\'s changelog if this version is up to date.\n-\n-tmpeggs = tempfile.mkdtemp(prefix=\'bootstrap-\')\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep\n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("--version",\n-                  action="store_true", default=False,\n-                  help=("Return bootstrap.py version."))\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-parser.add_option("--buildout-version",\n-                  help="Use a specific zc.buildout version")\n-parser.add_option("--setuptools-version",\n-                  help="Use a specific setuptools version")\n-parser.add_option("--setuptools-to-dir",\n-                  help=("Allow for re-use of existing directory of "\n-                        "setuptools versions"))\n-\n-options, args = parser.parse_args()\n-if options.version:\n-    print("bootstrap.py version %s" % __version__)\n-    sys.exit(0)\n-\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-if os.path.exists(\'ez_setup.py\'):\n-    exec(open(\'ez_setup.py\').read(), ez)\n-else:\n-    exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions\n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'.\n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            # Strip all site-packages directories from sys.path that\n-            # are not sys.prefix; this is because on Windows\n-            # sys.prefix is a site-package directory.\n-            if sitepackage_path != sys.prefix:\n-                sys.path[:] = [x for x in sys.path\n-                               if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-\n-if options.setuptools_version is not None:\n-    setup_args[\'version\'] = options.setuptools_version\n-if options.setuptools_to_dir is not None:\n-    setup_args[\'to_dir\'] = options.setuptools_to_dir\n-\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-# Fix sys.path here as easy_install.pth added before PYTHONPATH\n-cmd = [sys.executable, \'-c\',\n-       \'import sys; sys.path[0:0] = [%r]; \' % setuptools_path +\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-requirement = \'zc.buildout\'\n-version = options.buildout_version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        try:\n-            return not parsed_version.is_prerelease\n-        except AttributeError:\n-            # Older setuptools\n-            for part in parsed_version:\n-                if (part[:1] == \'*\') and (part not in _final_parts):\n-                    return False\n-            return True\n-\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex a6295667..00000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,189 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-tmpeggs = tempfile.mkdtemp()\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep\n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n-\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-parser.add_option("--setuptools-version",\n-                  help="use a specific setuptools version")\n-\n-\n-options, args = parser.parse_args()\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    if options.allow_site_packages:\n-        import setuptools\n-        import pkg_resources\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions\n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'.\n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-\n-if options.setuptools_version is not None:\n-    setup_args[\'version\'] = options.setuptools_version\n-\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-cmd = [sys.executable, \'-c\',\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-requirement = \'zc.buildout\'\n-version = options.version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        try:\n-            return not parsed_version.is_prerelease\n-        except AttributeError:\n-            # Older setuptools\n-            for part in parsed_version:\n-                if (part[:1] == \'*\') and (part not in _final_parts):\n-                    return False\n-            return True\n-\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/buildout.cfg b/buildout.cfg\nindex bbe81ec6..464b24b2 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -1,2 +1,2 @@\n [buildout]\n-extends = plone-5.0.x.cfg\n+extends = plone-5.1.x.cfg\ndiff --git a/docs/source/actions.rst b/docs/source/actions.rst\nindex 2b57686c..5305cc10 100644\n--- a/docs/source/actions.rst\n+++ b/docs/source/actions.rst\n@@ -21,13 +21,13 @@ Listing available actions\n To list the available actions, send a GET request to the \'@actions\' endpoint on a specific content object:\n \n .. http:example:: curl httpie python-requests\n-   :request: _json/actions_get.req\n+   :request: ../../src/plone/restapi/tests/http-examples/actions_get.req\n \n The server will respond with a `200 OK` status code.\n The JSON response contains the available actions categories (object, object_buttons, user) on the top level.\n Each category contains a list of the available actions in that category:\n \n-.. literalinclude:: _json/actions_get.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/actions_get.resp\n    :language: http\n \n If you want to limit the categories that are retured, pass one or more parameters\ndiff --git a/docs/source/authentication.rst b/docs/source/authentication.rst\nindex 561cb015..e499f13d 100644\n--- a/docs/source/authentication.rst\n+++ b/docs/source/authentication.rst\n@@ -47,11 +47,11 @@ A JWT token can be acquired by posting a user\'s credentials to the ``@login``\n endpoint.\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/jwt_login.req\n+    :request: ../../src/plone/restapi/tests/http-examples/jwt_login.req\n \n The server responds with a JSON object containing the token.\n \n-.. literalinclude:: _json/jwt_login.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/jwt_login.resp\n    :language: http\n \n Authenticating with a token\n@@ -61,7 +61,7 @@ The token can now be used in subsequent requests by including it in the\n ``Authorization`` header with the ``Bearer`` scheme:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/jwt_logged_in.req\n+    :request: ../../src/plone/restapi/tests/http-examples/jwt_logged_in.req\n \n \n Renewing a token (@login-renew)\n@@ -71,11 +71,11 @@ By default the token will expire after 12 hours and thus must be renewed before\n expiration. To renew the token simply post to the ``@login-renew`` endpoint.\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/jwt_login_renew.req\n+    :request: ../../src/plone/restapi/tests/http-examples/jwt_login_renew.req\n \n The server returns a JSON object with a new token:\n \n-.. literalinclude:: _json/jwt_login_renew.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/jwt_login_renew.resp\n    :language: http\n \n Invalidating a token (@logout)\n@@ -90,11 +90,11 @@ keyring in the PAS plugin (option ``use_keyring``).\n The logout request must contain the existing token in the ``Authorization`` header.\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/jwt_logout.req\n+    :request: ../../src/plone/restapi/tests/http-examples/jwt_logout.req\n \n If invalidation succeeds, the server responds with an empty 204 reponse:\n \n-.. literalinclude:: _json/jwt_logout.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/jwt_logout.resp\n    :language: http\n \n Permissions\ndiff --git a/docs/source/batching.rst b/docs/source/batching.rst\nindex 604ad3b6..078c0698 100644\n--- a/docs/source/batching.rst\n+++ b/docs/source/batching.rst\n@@ -79,8 +79,8 @@ Parameter        Description\n Full example of a batched request and response:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/batching.req\n+    :request: ../../src/plone/restapi/tests/http-examples/batching.req\n \n-.. literalinclude:: _json/batching.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/batching.resp\n    :language: http\n \ndiff --git a/docs/source/breadcrumbs.rst b/docs/source/breadcrumbs.rst\nindex 53f9a44f..36261da3 100644\n--- a/docs/source/breadcrumbs.rst\n+++ b/docs/source/breadcrumbs.rst\n@@ -6,9 +6,9 @@ Breadcrumbs\n Getting the breadcrumbs for the current page:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/breadcrumbs.req\n+    :request: ../../src/plone/restapi/tests/http-examples/breadcrumbs.req\n \n Example response:\n \n-.. literalinclude:: _json/breadcrumbs.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/breadcrumbs.resp\n    :language: http\ndiff --git a/docs/source/comments.rst b/docs/source/comments.rst\nindex 59cd007f..913a3895 100644\n--- a/docs/source/comments.rst\n+++ b/docs/source/comments.rst\n@@ -13,11 +13,11 @@ Listing Comments\n You can list the existing comment on a content object by sending a GET request to the URL of the content object and appending \'/@comments\':\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/comments_get.req\n+    :request: ../../src/plone/restapi/tests/http-examples/comments_get.req\n \n The server will respond with a `Status 200` and a batched list of all comments:\n \n-.. literalinclude:: _json/comments_get.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/comments_get.resp\n    :language: http\n \n These following fields are returned:\n@@ -47,11 +47,11 @@ Adding a Comment\n To add a new comment to a content object, send a POST request to the URL of the content object and append \'/@comments\' to the URL. The body of the request needs to contain a JSON structure with a \'text\' attribute that contains the comment text:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/comments_add_root.req\n+    :request: ../../src/plone/restapi/tests/http-examples/comments_add_root.req\n \n If the creation of the comment has been successful, the server will respond with a :term:`204 No Content` status and the URL of the newly created comment in the location header:\n \n-.. literalinclude:: _json/comments_add_root.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/comments_add_root.resp\n    :language: http\n \n \n@@ -61,11 +61,11 @@ Replying to a Comment\n To add a direct reply to an existing comment, send a POST request to the URL of the comment you want to reply to. The body of the request needs to contain a JSON structure with a \'text\' attribute that contains the comment text:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/comments_add_sub.req\n+    :request: ../../src/plone/restapi/tests/http-examples/comments_add_sub.req\n \n If the creation of the comment has been successful, the server will respond with a :term:`204 No Content` status and the URL of the newly created comment in the location header:\n \n-.. literalinclude:: _json/comments_add_sub.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/comments_add_sub.resp\n    :language: http\n \n \n@@ -77,11 +77,11 @@ Updating a Comment\n An existing comment can be updated by sending a PATCH request to the URL of the comment. The request body needs to contain a JSON structure with at least a \'text\' attribute:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/comments_update.req\n+    :request: ../../src/plone/restapi/tests/http-examples/comments_update.req\n \n The server will respond with a :term:`204 No Content` response and a location header with the comment URL when the comment has been updated successfully:\n \n-.. literalinclude:: _json/comments_update.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/comments_update.resp\n    :language: http\n \n \n@@ -93,9 +93,9 @@ An existing comment can be deleted by sending a DELETE request to the URL of the\n ..note: Deleting a comment will, by default, also delete all existing replies to that comment.\n \n ..  http:example:: curl httpie python-requests\n-\t :request: _json/comments_delete.req\n+\t :request: ../../src/plone/restapi/tests/http-examples/comments_delete.req\n \n When the comment has been deleted successfully, the server will respond with a :term:`204 No Content` response:\n \n-.. literalinclude:: _json/comments_delete.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/comments_delete.resp\n    :language: http\ndiff --git a/docs/source/content.rst b/docs/source/content.rst\nindex eba2dca7..8750fd9e 100644\n--- a/docs/source/content.rst\n+++ b/docs/source/content.rst\n@@ -22,7 +22,7 @@ To create a new resource, we send a POST request to the resource container.\n If we want to create a new document within an existing folder, we send a POST request to that folder:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/content_post.req\n+    :request: ../../src/plone/restapi/tests/http-examples/content_post.req\n \n By setting the \'Accept\' header, we tell the server that we would like to receive the response in the \'application/json\' representation format.\n \n@@ -39,7 +39,7 @@ If a resource has been created, the server responds with the :term:`201 Created`\n The \'Location\' header contains the URL of the newly created resource and the resource representation in the payload:\n \n \n-.. literalinclude:: _json/content_post.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/content_post.resp\n    :language: http\n \n \n@@ -110,7 +110,7 @@ Reading a Resource with GET\n After a successful POST, we can access the resource by sending a GET request to the resource URL:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/content_get.req\n+    :request: ../../src/plone/restapi/tests/http-examples/content_get.req\n \n You can also set the `include_items` GET parameter to false if you don\'t want to include children.\n \n@@ -120,7 +120,7 @@ Successful Response (200 OK)\n \n If a resource has been retrieved successfully, the server responds with :term:`200 OK`:\n \n-.. literalinclude:: _json/content_get.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/content_get.resp\n    :language: http\n \n .. note::\n@@ -185,7 +185,7 @@ will be set. Note that this is not possible if the field is ``required``,\n and it only works for Dexterity types, not Archetypes:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/content_patch.req\n+    :request: ../../src/plone/restapi/tests/http-examples/content_patch.req\n \n \n Successful Response (204 No Content)\n@@ -193,7 +193,7 @@ Successful Response (204 No Content)\n \n A successful response to a PATCH request will be indicated by a :term:`204 No Content` response by default:\n \n-.. literalinclude:: _json/content_patch.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/content_patch.resp\n    :language: http\n \n \n@@ -204,9 +204,9 @@ You can get the object representation by adding a `Prefer` header with a value o\n In this case, the response will be a :term:`200 OK`:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/content_patch_representation.req\n+    :request: ../../src/plone/restapi/tests/http-examples/content_patch_representation.req\n \n-.. literalinclude:: _json/content_patch_representation.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/content_patch_representation.resp\n    :language: http\n \n See for full specs the `RFC 5789: PATCH Method for HTTP <http://tools.ietf.org/html/rfc5789>`_\n@@ -301,11 +301,11 @@ Removing a Resource with DELETE\n We can delete an existing resource by sending a DELETE request:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/content_delete.req\n+    :request: ../../src/plone/restapi/tests/http-examples/content_delete.req\n \n A successful response will be indicated by a :term:`204 No Content` response:\n \n-.. literalinclude:: _json/content_delete.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/content_delete.resp\n    :language: http\n \n \n@@ -358,4 +358,4 @@ A response 400 BadRequest with a message \'Client/server ordering mismatch\' will\n A response 400 BadRequest with a message \'Content ordering is not supported by this resource\' will be returned if the container does not support ordering.\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/content_reorder.req\n+    :request: ../../src/plone/restapi/tests/http-examples/content_reorder.req\ndiff --git a/docs/source/controlpanels.rst b/docs/source/controlpanels.rst\nindex 8da15125..8afed7e9 100644\n--- a/docs/source/controlpanels.rst\n+++ b/docs/source/controlpanels.rst\n@@ -22,11 +22,11 @@ A list of all existing control panels in the portal can be retrieved by\n sending a GET request to the @controlpanels endpoint:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/controlpanels_get.req\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_get.req\n \n Response:\n \n-.. literalinclude:: _json/controlpanels_get.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_get.resp\n    :language: http\n \n The following fields are returned:\n@@ -43,11 +43,11 @@ To retrieve a single control panel, send a GET request to the URL of the\n control panel:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/controlpanels_get_item.req\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_get_item.req\n \n Response:\n \n-.. literalinclude:: _json/controlpanels_get_item.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n    :language: http\n \n \n@@ -67,11 +67,11 @@ To update the settings on a control panel send a PATCH request to control panel\n resource:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/controlpanels_patch.req\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_patch.req\n \n A successful response to a PATCH request will be indicated by a :term:`204 No Content` response:\n \n   HTTP/1.1 204 No Content\n \n-.. literalinclude:: _json/controlpanels_patch.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_patch.resp\n    :language: http\ndiff --git a/docs/source/copymove.rst b/docs/source/copymove.rst\nindex 0bb8665c..9fd12868 100644\n--- a/docs/source/copymove.rst\n+++ b/docs/source/copymove.rst\n@@ -9,12 +9,12 @@ destinations url with the source object specified in the request body. The sourc\n object can be specified either by url, path, UID or intid.\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/copy.req\n+    :request: ../../src/plone/restapi/tests/http-examples/copy.req\n \n If the copy operation succeeds, the server will respond with status 200 (OK) and return\n the new and old url of the copied object.\n \n-.. literalinclude:: _json/copy.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/copy.resp\n    :language: http\n \n \n@@ -26,12 +26,12 @@ destinations url with the source object specified in the request body. The sourc\n object can be specified either by url, path, UID or intid.\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/move.req\n+    :request: ../../src/plone/restapi/tests/http-examples/move.req\n \n If the move operation succeeds, the server will respond with status 200 (OK) and return\n the new and old url of the moved object.\n \n-.. literalinclude:: _json/move.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/move.resp\n    :language: http\n \n \n@@ -41,11 +41,11 @@ Copying/moving multiple objects\n Multiple objects can be moved/copied by giving a list of sources.\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/copy_multiple.req\n+    :request: ../../src/plone/restapi/tests/http-examples/copy_multiple.req\n \n If the operation succeeds, the server will respond with status 200 (OK) and return\n the new and old urls for each copied/moved object.\n \n \n-.. literalinclude:: _json/copy_multiple.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/copy_multiple.resp\n    :language: http\ndiff --git a/docs/source/expansion.rst b/docs/source/expansion.rst\nindex aeab6d3e..c56b7dfb 100644\n--- a/docs/source/expansion.rst\n+++ b/docs/source/expansion.rst\n@@ -38,11 +38,11 @@ in the reponse of any content GET request::\n Request Unexpanded:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/expansion.req\n+    :request: ../../src/plone/restapi/tests/http-examples/expansion.req\n \n Response Unexpanded:\n \n-.. literalinclude:: _json/expansion.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/expansion.resp\n    :language: http\n \n In order to expand and embed one or more components, use the "expand" GET\n@@ -87,19 +87,19 @@ component::\n Request Expanded:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/expansion_expanded.req\n+    :request: ../../src/plone/restapi/tests/http-examples/expansion_expanded.req\n \n Response Expanded:\n \n-.. literalinclude:: _json/expansion_expanded.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/expansion_expanded.resp\n    :language: http\n \n Here is an exaxmple of a request that expands all possible expansions:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/expansion_expanded_full.req\n+    :request: ../../src/plone/restapi/tests/http-examples/expansion_expanded_full.req\n \n And the response:\n \n-.. literalinclude:: _json/expansion_expanded_full.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\n    :language: http\ndiff --git a/docs/source/glossary.rst b/docs/source/glossary.rst\nindex 6ca5f525..b8a79d1d 100644\n--- a/docs/source/glossary.rst\n+++ b/docs/source/glossary.rst\n@@ -46,11 +46,3 @@ Glossary\n \n     Basic Auth\n         A simple :term:`Authentication Method` referenced in the :term:`Authorization Header` that needs to be provided by the server.\n-\n-    Client\n-\n-    Server\n-\n-    Network\n-\n-    Socket\n\\ No newline at end of file\ndiff --git a/docs/source/groups.rst b/docs/source/groups.rst\nindex 1c557706..cf77173c 100644\n--- a/docs/source/groups.rst\n+++ b/docs/source/groups.rst\n@@ -9,23 +9,23 @@ List Groups\n To retrieve a list of all current groups in the portal, call the ``/@groups`` endpoint with a ``GET`` request:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/groups.req\n+    :request: ../../src/plone/restapi/tests/http-examples/groups.req\n \n The server will respond with a list of all groups in the portal:\n \n-.. literalinclude:: _json/groups.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/groups.resp\n    :language: http\n \n The endpoint supports some basic filtering:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/groups_filtered_by_groupname.req\n+    :request: ../../src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.req\n \n The server will respond with a list the filtered groups in the portal with groupname starts with the query.\n \n The endpoint also takes a ``limit`` parameter that defaults to a maximum of 25 groups at a time for performance reasons.\n \n-.. literalinclude:: _json/groups_filtered_by_groupname.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp\n    :language: http\n \n \n@@ -35,14 +35,14 @@ Create Group\n To create a new group, send a ``POST`` request to the global ``/@groups`` endpoint with a JSON representation of the group you want to create in the body:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/groups_created.req\n+    :request: ../../src/plone/restapi/tests/http-examples/groups_created.req\n \n .. note::\n     By default, "groupname" is a required field.\n \n If the group has been created successfully, the server will respond with a status ``201 (Created)``. The ``Location`` header contains the URL of the newly created group and the resource representation in the payload:\n \n-.. literalinclude:: _json/groups_created.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/groups_created.resp\n    :language: http\n \n \n@@ -52,11 +52,11 @@ Read Group\n To retrieve all details for a particular group, send a ``GET`` request to the ``/@groups`` endpoint and append the group id to the URL:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/groups_get.req\n+    :request: ../../src/plone/restapi/tests/http-examples/groups_get.req\n \n The server will respond with a ``200 OK`` status code and the JSON representation of the group in the body:\n \n-.. literalinclude:: _json/groups_get.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/groups_get.resp\n    :language: http\n \n Batching is supported for the \'users\' object.\n@@ -67,14 +67,14 @@ Update Group\n To update the settings of a group, send a ``PATCH`` request with the group details you want to amend to the URL of that particular group:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/groups_update.req\n+    :request: ../../src/plone/restapi/tests/http-examples/groups_update.req\n \n .. note::\n         The \'users\' object is a mapping of a user_id and a boolean indicating adding or removing from the group.\n \n A successful response to a PATCH request will be indicated by a :term:`204 No Content` response:\n \n-.. literalinclude:: _json/groups_update.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/groups_update.resp\n    :language: http\n \n \n@@ -84,9 +84,9 @@ Delete Group\n To delete a group send a ``DELETE`` request to the ``/@groups`` endpoint and append the group id of the group you want to delete:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/groups_delete.req\n+    :request: ../../src/plone/restapi/tests/http-examples/groups_delete.req\n \n A successful response will be indicated by a :term:`204 No Content` response:\n \n-.. literalinclude:: _json/groups_delete.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/groups_delete.resp\n    :language: js\ndiff --git a/docs/source/history.rst b/docs/source/history.rst\nindex cc1767d5..97e51047 100644\n--- a/docs/source/history.rst\n+++ b/docs/source/history.rst\n@@ -11,9 +11,9 @@ Listing the History of a Content Object\n Listing versions and history of a resource:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/history_get.req\n+    :request: ../../src/plone/restapi/tests/http-examples/history_get.req\n \n-.. literalinclude:: _json/history_get.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/history_get.resp\n    :language: http\n \n This following fields are returned:\n@@ -35,7 +35,7 @@ Get a Historical Version\n Older versions of a resource can be retrieved by appending `version` to the @history endpoint url.\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/history_get_versioned.req\n+    :request: ../../src/plone/restapi/tests/http-examples/history_get_versioned.req\n \n \n Revert to a Historical Version\n@@ -45,7 +45,7 @@ Reverting to an older versions of a resource can be done by sending a PATCH requ\n to.\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/history_revert.req\n+    :request: ../../src/plone/restapi/tests/http-examples/history_revert.req\n \n-.. literalinclude:: _json/history_revert.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/history_revert.resp\n    :language: http\ndiff --git a/docs/source/i18n.rst b/docs/source/i18n.rst\nnew file mode 100644\nindex 00000000..ae1fb13c\n--- /dev/null\n+++ b/docs/source/i18n.rst\n@@ -0,0 +1,80 @@\n+i18n: internationalization of screen messages\n+=============================================\n+\n+Plone already provides user-interface translations using the `plone.app.locales`_\n+packages.\n+\n+In plone.restapi we also use those translations where the end user needs to have\n+those translated strings, this way the front-end work is easier, because you\n+directly get from the server everything you need, instead of needing to query\n+yet another endpoint to get the translations.\n+\n+To do so, plone.restapi relies on Plone\'s language-negotiation configuration and lets\n+Plone to do the work of deciding the language in which the messages should be shown.\n+\n+For the content of a multilingual site built using `plone.app.multilingual`_ this is\n+an easy task: Plone is configured to show in the language of the content-object, so\n+there is no need to ask anything to the REST API.\n+\n+Nevertheless, when you want to query the Plone Site object of a multilingual site, or\n+any other endpoint in a plain Plone site with multiple languages configured, you need\n+to query the REST API which language do you want to have the messages on, otherwise\n+you will get the messages on the default language configured in Plone.\n+\n+To achieve that, the REST API requires to use the ``Accept-Language`` HTTP header passing\n+as the value the code of the required language.\n+\n+You will also need to configure Plone to use the browser request language negotiation.\n+To do so, you need to go the Plone Control Panel, go to the Language Control Panel,\n+open the Negotiation configuration tab and select "Use browser language request\n+negotiation" option.\n+\n+Using this option we can get the content-type titles translated:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translated_messages_types.req\n+\n+And the response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translated_messages_types.resp\n+   :language: http\n+\n+\n+All the field titles and descriptions, will also be translated. For instance for the Folder\n+content type:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translated_messages_types_folder.req\n+\n+And the response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n+   :language: http\n+\n+\n+In a given object, the workflow state and actions will be translated too:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translated_messages_object_workflow.req\n+\n+And the response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp\n+   :language: http\n+\n+\n+The same happens in the `@history` endpoint, all the relevant messages, will\n+be shown translated:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translated_messages_object_history.req\n+\n+And the response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translated_messages_object_history.resp\n+   :language: http\n+\n+\n+\n+.. _`plone.app.locales`: https://pypi.org/project/plone.app.locales\n+.. _`plone.app.multilingual`: https://pypi.org/project/plone.app.multilingual\ndiff --git a/docs/source/ideas/hydra.rst b/docs/source/ideas/hydra.rst\nindex 43bed16c..979e68b1 100644\n--- a/docs/source/ideas/hydra.rst\n+++ b/docs/source/ideas/hydra.rst\n@@ -81,63 +81,63 @@ Implementation\n Plone Document:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../_json/document.req\n+    :request: ../../../src/plone/restapi/tests/http-examples/document.req\n \n-.. literalinclude:: ../source/_json/document.resp\n+.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/document.resp\n    :language: http\n \n Plone Folder:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../_json/folder.req\n+    :request: ../../../src/plone/restapi/tests/http-examples/folder.req\n \n-.. literalinclude:: ../source/_json/folder.resp\n+.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/folder.resp\n    :language: http\n \n Plone Portal Root:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../_json/siteroot.req\n+    :request: ../../../src/plone/restapi/tests/http-examples/siteroot.req\n \n-.. literalinclude:: ../source/_json/siteroot.resp\n+.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/siteroot.resp\n    :language: http\n \n Collection:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../_json/collection.req\n+    :request: ../../../src/plone/restapi/tests/http-examples/collection.req\n \n-.. literalinclude:: ../source/_json/collection.resp\n+.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/collection.resp\n    :language: http\n \n Plone Image:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../_json/image.req\n+    :request: ../../../src/plone/restapi/tests/http-examples/image.req\n \n-.. literalinclude:: ../source/_json/image.resp\n+.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/image.resp\n    :language: http\n \n File:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../_json/file.req\n+    :request: ../../../src/plone/restapi/tests/http-examples/file.req\n \n-.. literalinclude:: ../source/_json/file.resp\n+.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/file.resp\n    :language: http\n \n Link:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../_json/link.req\n+    :request: ../../../src/plone/restapi/tests/http-examples/link.req\n \n-.. literalinclude:: ../source/_json/link.resp\n+.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/link.resp\n    :language: http\n \n News Item:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../_json/newsitem.req\n+    :request: ../../../src/plone/restapi/tests/http-examples/newsitem.req\n \n-.. literalinclude:: ../source/_json/newsitem.resp\n+.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/newsitem.resp\n    :language: http\ndiff --git a/docs/source/index.rst b/docs/source/index.rst\nindex c5cfc71e..6cca136e 100644\n--- a/docs/source/index.rst\n+++ b/docs/source/index.rst\n@@ -19,6 +19,7 @@ Contents\n    :maxdepth: 2\n \n    authentication\n+   exploring\n    content\n    history\n    batching\n@@ -31,8 +32,10 @@ Contents\n    sharing\n    registry\n    types\n+   types-schema\n    users\n    groups\n+   principals\n    roles\n    components\n    breadcrumbs\n@@ -42,10 +45,13 @@ Contents\n    tusupload\n    vocabularies\n    controlpanels\n+   tiles\n    customization\n    conventions\n    translations\n    email-send\n+   i18n\n+   email-notification\n    upgrade-guide\n \n .. include:: ../../README.rst\ndiff --git a/docs/source/introduction.rst b/docs/source/introduction.rst\nindex 80d0f052..16e63701 100644\n--- a/docs/source/introduction.rst\n+++ b/docs/source/introduction.rst\n@@ -16,7 +16,7 @@ The entry point to the Plone RESTful API is the portal root.\n The client can ask for a :term:`REST` API response by setting the ``\'Accept\'`` HTTP header to ``\'application/json\'``:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/siteroot.req\n+    :request: ../../src/plone/restapi/tests/http-examples/siteroot.req\n \n \n This uses so-called \'content negotiation\'\n@@ -28,7 +28,7 @@ This uses so-called \'content negotiation\'\n \n The server will then respond with the portal root in the JSON format:\n \n-.. literalinclude:: _json/siteroot.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/siteroot.resp\n    :language: http\n \n ``@id`` is a unique identifier for resources (IRIs).\n@@ -45,9 +45,9 @@ Another example, this time showing a request and response for a document.\n Click on the buttons below to show the different syntaxes for the request.\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/document.req\n+    :request: ../../src/plone/restapi/tests/http-examples/document.req\n \n-.. literalinclude:: _json/document.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/document.resp\n    :language: http\n \n And so on, see\ndiff --git a/docs/source/locking.rst b/docs/source/locking.rst\nindex 56097e06..2c445792 100644\n--- a/docs/source/locking.rst\n+++ b/docs/source/locking.rst\n@@ -13,12 +13,12 @@ Locking an object\n To lock an object send a POST request to the ``/@lock`` endpoint that is available on any content object in Plone:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/lock.req\n+    :request: ../../src/plone/restapi/tests/http-examples/lock.req\n \n If the lock operation succeeds, the server will respond with status :term:`200 OK` and return various information\n about the lock including the lock token. The token is needed in later requests to update the locked object.\n \n-.. literalinclude:: _json/lock.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/lock.resp\n    :language: http\n \n \n@@ -30,12 +30,12 @@ To create a lock with a non-default timeout, you can pass the the timeout value\n The following example creates a non-stealable lock with a timeout of 1h.\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/lock_nonstealable_timeout.req\n+    :request: ../../src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.req\n \n \n The server responds with status :term:`200 OK` and returns the lock information.\n \n-.. literalinclude:: _json/lock_nonstealable_timeout.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp\n    :language: http\n \n \n@@ -45,11 +45,11 @@ Unlocking an object\n To unlock an object send a POST request to the ``/@unlock`` endpoint.\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/unlock.req\n+    :request: ../../src/plone/restapi/tests/http-examples/unlock.req\n \n The server responds with status :term:`200 OK` and returns the lock information.\n \n-.. literalinclude:: _json/unlock.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/unlock.resp\n    :language: http\n \n \n@@ -59,11 +59,11 @@ Refreshing a lock\n An existing lock can be refreshed by sending a POST request to the ``@refresh-lock`` endpoint.\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/refresh_lock.req\n+    :request: ../../src/plone/restapi/tests/http-examples/refresh_lock.req\n \n The server responds with status :term:`200 OK` and returns the lock information containing the updated creation time.\n \n-.. literalinclude:: _json/refresh_lock.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/refresh_lock.resp\n    :language: http\n \n \n@@ -74,11 +74,11 @@ To find out if an object is locked or to get information about the current lock\n you can send a GET request to the ``@lock`` endpoint.\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/lock_get.req\n+    :request: ../../src/plone/restapi/tests/http-examples/lock_get.req\n \n The server responds with status :term:`200 OK` and returns the information about the lock.\n \n-.. literalinclude:: _json/lock_get.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/lock_get.resp\n    :language: http\n \n \n@@ -89,4 +89,4 @@ To update a locked object with a PATCH request, you have to provide the lock\n token with the ``Lock-Token`` header.\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/lock_update.req\n+    :request: ../../src/plone/restapi/tests/http-examples/lock_update.req\ndiff --git a/docs/source/navigation.rst b/docs/source/navigation.rst\nindex e0b5447d..64ed697f 100644\n--- a/docs/source/navigation.rst\n+++ b/docs/source/navigation.rst\n@@ -9,11 +9,11 @@ Top-Level Navigation\n Getting the top navigation items:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/navigation.req\n+    :request: ../../src/plone/restapi/tests/http-examples/navigation.req\n \n Example response:\n \n-.. literalinclude:: _json/navigation.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/navigation.resp\n    :language: http\n \n \n@@ -23,9 +23,9 @@ Navigation Tree\n Getting the navigation item tree providing a `expand.navigation.depth` parameter:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/navigation_tree.req\n+    :request: ../../src/plone/restapi/tests/http-examples/navigation_tree.req\n \n Example response:\n \n-.. literalinclude:: _json/navigation_tree.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/navigation_tree.resp\n    :language: http\ndiff --git a/docs/source/plone-content.rst b/docs/source/plone-content.rst\nindex d72ccd90..d179dc98 100644\n--- a/docs/source/plone-content.rst\n+++ b/docs/source/plone-content.rst\n@@ -15,9 +15,9 @@ Plone Portal Root:\n ------------------\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/siteroot.req\n+    :request: ../../src/plone/restapi/tests/http-examples/siteroot.req\n \n-.. literalinclude:: _json/siteroot.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/siteroot.resp\n    :language: http\n \n \n@@ -25,9 +25,9 @@ Plone Folder:\n -------------\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/folder.req\n+    :request: ../../src/plone/restapi/tests/http-examples/folder.req\n \n-.. literalinclude:: _json/folder.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/folder.resp\n    :language: http\n \n \n@@ -35,19 +35,24 @@ Plone Document:\n ---------------\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/document.req\n+    :request: ../../src/plone/restapi/tests/http-examples/document.req\n \n-.. literalinclude:: _json/document.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/document.resp\n    :language: http\n \n \n News Item:\n ----------\n \n+.. note::\n+    Here we show ``uuid1`` as an example uid for all image scales because this documentation\n+    is autogenerated by the tests. When running in a real application, these ``uuid1``\n+    values will be exchanged by proper uuid4 values.\n+\n ..  http:example:: curl httpie python-requests\n-    :request: _json/newsitem.req\n+    :request: ../../src/plone/restapi/tests/http-examples/newsitem.req\n \n-.. literalinclude:: _json/newsitem.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/newsitem.resp\n    :language: http\n \n \n@@ -55,19 +60,25 @@ Event:\n ------\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/event.req\n+    :request: ../../src/plone/restapi/tests/http-examples/event.req\n \n-.. literalinclude:: _json/event.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/event.resp\n    :language: http\n \n \n Image:\n ------\n \n+.. note::\n+    Here we show ``uuid1`` as an example uid for all image scales because this documentation\n+    is autogenerated by the tests. When running in a real application, these ``uuid1``\n+    values will be exchanged by proper uuid4 values.\n+\n+\n ..  http:example:: curl httpie python-requests\n-    :request: _json/image.req\n+    :request: ../../src/plone/restapi/tests/http-examples/image.req\n \n-.. literalinclude:: _json/image.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/image.resp\n    :language: http\n \n \n@@ -75,9 +86,9 @@ File:\n -----\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/file.req\n+    :request: ../../src/plone/restapi/tests/http-examples/file.req\n \n-.. literalinclude:: _json/file.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/file.resp\n    :language: http\n \n \n@@ -85,9 +96,9 @@ Link:\n -----\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/link.req\n+    :request: ../../src/plone/restapi/tests/http-examples/link.req\n \n-.. literalinclude:: _json/link.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/link.resp\n    :language: http\n \n \n@@ -95,7 +106,7 @@ Collection:\n -----------\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/collection.req\n+    :request: ../../src/plone/restapi/tests/http-examples/collection.req\n \n-.. literalinclude:: _json/collection.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/collection.resp\n    :language: http\ndiff --git a/docs/source/principals.rst b/docs/source/principals.rst\nindex a6d9ced9..ed3e2e1e 100644\n--- a/docs/source/principals.rst\n+++ b/docs/source/principals.rst\n@@ -11,9 +11,9 @@ Search Principals\n To retrieve a list of principals given a search string, call the ``/@principals`` endpoint with a GET request and a ``search`` query parameter:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/principals.req\n+    :request: ../../src/plone/restapi/tests/http-examples/principals.req\n \n The server will respond with a list of the users and groups in the portal that match the query string:\n \n-.. literalinclude:: _json/principals.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/principals.resp\n    :language: http\ndiff --git a/docs/source/registry.rst b/docs/source/registry.rst\nindex eacb9183..476d7e89 100644\n--- a/docs/source/registry.rst\n+++ b/docs/source/registry.rst\n@@ -15,11 +15,11 @@ Reading registry records\n Reading a single record:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/registry_get.req\n+    :request: ../../src/plone/restapi/tests/http-examples/registry_get.req\n \n Example Response:\n \n-.. literalinclude:: _json/registry_get.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/registry_get.resp\n    :language: http\n \n \n@@ -35,11 +35,11 @@ value: The record\'s value. This is the same as GETting `@registry/name`.\n \n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/registry_get_list.req\n+    :request: ../../src/plone/restapi/tests/http-examples/registry_get_list.req\n \n Example Response:\n \n-.. literalinclude:: _json/registry_get_list.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/registry_get_list.resp\n    :language: http\n \n \n@@ -49,9 +49,9 @@ Updating registry records\n Updating an existing record:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/registry_update.req\n+    :request: ../../src/plone/restapi/tests/http-examples/registry_update.req\n \n Example Response:\n \n-.. literalinclude:: _json/registry_update.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/registry_update.resp\n    :language: http\n\\ No newline at end of file\ndiff --git a/docs/source/roles.rst b/docs/source/roles.rst\nindex 8a7569e7..cef25319 100644\n--- a/docs/source/roles.rst\n+++ b/docs/source/roles.rst\n@@ -9,11 +9,11 @@ List Roles\n To retrieve a list of all roles in the portal, call the ``/@roles`` endpoint with a ``GET`` request:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/groups.req\n+    :request: ../../src/plone/restapi/tests/http-examples/roles.req\n \n-The server will respond with a list of all groups in the portal:\n+The server will respond with a list of all roles in the portal:\n \n-.. literalinclude:: _json/roles.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/roles.resp\n    :language: http\n \n The role ``title`` is the translated role title as displayed in Plone\'s\ndiff --git a/docs/source/searching.rst b/docs/source/searching.rst\nindex 91b19754..e832f630 100644\n--- a/docs/source/searching.rst\n+++ b/docs/source/searching.rst\n@@ -17,9 +17,9 @@ In terms of the resulting catalog query this means that, by default, a search wi\n Search results are represented similar to collections:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/search.req\n+    :request: ../../src/plone/restapi/tests/http-examples/search.req\n \n-.. literalinclude:: _json/search.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/search.resp\n    :language: http\n \n The default representation for search results is a summary that contains only the most basic information.\ndiff --git a/docs/source/serialization.rst b/docs/source/serialization.rst\nindex 333cf7ee..c7e7c246 100644\n--- a/docs/source/serialization.rst\n+++ b/docs/source/serialization.rst\n@@ -79,18 +79,20 @@ and will get a response containing the file.\n \n Image fields are serialized in the same way, except that their serialization\n contains their ``width`` and ``height``, and an additional property\n-``scales`` that contains a mapping with the available image scales:\n+``scales`` that contains a mapping with the available image scales.\n+Image URLs are created using the UID-based URL that changes each time the image\n+is modified, so these URLs can be properly cached:\n \n .. code-block:: json\n \n     {\n       "icon": {\n-        "download": "http://localhost:55001/plone/image/@@images/image/icon",\n+        "download": "http://localhost:55001/plone/image/@@images/8eed3f80-5e1f-4115-85b8-650a10a6ca84.png",\n         "height": 32,\n         "width": 24\n       },\n       "large": {\n-        "download": "http://localhost:55001/plone/image/@@images/image/large",\n+        "download": "http://localhost:55001/plone/image/@@images/0d1824d1-2672-4b62-9277-aeb220d3bf15.png",\n         "height": 768,\n         "width": 576\n       },\ndiff --git a/docs/source/sharing.rst b/docs/source/sharing.rst\nindex b7360d97..d83b87b8 100644\n--- a/docs/source/sharing.rst\n+++ b/docs/source/sharing.rst\n@@ -6,16 +6,18 @@ Sharing\n Plone comes with a sophisticated user management system that allows to assign users and groups with global roles and permissions. Sometimes this in not enough though and you might want to give users the permission to access or edit a specific part of your website or a specific content object. This is where local roles (located in the Plone sharing tab) come in handy.\n \n \n-Retrieve Local Roles\n---------------------\n+Retrieving Local Roles\n+----------------------\n \n-In plone.restapi, the representation of any content object will include a hypermedia link to the local role / sharing information in the \'sharing\' attribute:\n+In plone.restapi, the representation of any content object will include a hypermedia link to the local role / sharing information in the ``sharing`` attribute:\n \n-.. code:: json\n+.. code-block:: http\n \n-  GET /plone/folder\n+  GET /plone/folder HTTP/1.1\n   Accept: application/json\n \n+.. code::\n+\n   HTTP 200 OK\n   content-type: application/json\n \n@@ -29,32 +31,39 @@ In plone.restapi, the representation of any content object will include a hyperm\n     }\n   }\n \n-The sharing information of a content object can also be directly accessed by appending \'/@sharing\' to the GET request to the URL of a content object. E.g. to access the sharing information for a top-level folder, do:\n+The sharing information of a content object can also be directly accessed by appending ``/@sharing`` to the GET request to the URL of a content object. E.g. to access the sharing information for a top-level folder, do:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/sharing_folder_get.req\n+    :request: ../../src/plone/restapi/tests/http-examples/sharing_folder_get.req\n \n-.. literalinclude:: _json/sharing_folder_get.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/sharing_folder_get.resp\n    :language: http\n \n+The ``available_roles`` property contains the list of roles that can be\n+managed via the sharing page. It contains dictionaries with the role ID and\n+its translated ``title`` (as it appears on the sharing page).\n+\n \n-Users and/or groups without a sharing entry can be found by appending the argument `search` to the query string. ie search=admin.\n-Global roles are marked with the string "global". Inherited roles are marked with the string "acquired".\n+Searching for principals\n+------------------------\n+\n+Users and/or groups without a sharing entry can be found by appending the argument ``search`` to the query string. ie ``?search=admin``.\n+Global roles are marked with the string ``"global"``. Inherited roles are marked with the string ``"acquired"``.\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/sharing_search.req\n+    :request: ../../src/plone/restapi/tests/http-examples/sharing_search.req\n \n-.. literalinclude:: _json/sharing_search.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/sharing_search.resp\n    :language: http\n \n \n-Update Local Roles\n-------------------\n+Updating Local Roles\n+--------------------\n \n-You can update the \'sharing\' information by sending a POST request to the object URL and appending \'/@sharing\', e.g. \'/plone/folder/@sharing\'. E.g. say you want to give the AuthenticatedUsers group the \'reader\' local role for a folder:\n+You can update the \'sharing\' information by sending a POST request to the object URL and appending ``/@sharing``, e.g. ``/plone/folder/@sharing``. E.g. say you want to give the ``AuthenticatedUsers`` group the ``Reader`` local role for a folder:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/sharing_folder_post.req\n+    :request: ../../src/plone/restapi/tests/http-examples/sharing_folder_post.req\n \n-.. literalinclude:: _json/sharing_folder_post.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/sharing_folder_post.resp\n    :language: http\ndiff --git a/docs/source/tiles.rst b/docs/source/tiles.rst\nnew file mode 100644\nindex 00000000..589b13bb\n--- /dev/null\n+++ b/docs/source/tiles.rst\n@@ -0,0 +1,230 @@\n+Tiles\n+=====\n+\n+.. note::\n+  The tiles endpoint currently match only partially (the GET endpoints) the default Plone implementation.\n+  The serialization of tiles didn\'t match the Mosaic (and plone.app.blocks) implementation and it\'s done to\n+  not rely on those technologies. The serialization of the tile information on objects are subject to change in\n+  the future to extend or improve features.\n+\n+A tile is an HTML snippet that can contain arbitrary content (e.g. text, images, videos).\n+\n+The @tiles endpoint is context specific.\n+Called on the portal root it will list all available tiles,\n+and allows to retrieve the JSON schema for those tiles.\n+\n+If called on a content object, it will return the tiles that are actually stored on that content object.\n+\n+Listing available tiles\n+-----------------------\n+\n+List all available tiles type by sending a GET request to the @tiles endpoint on the portal roots::\n+\n+  GET /plone/@tiles HTTP/1.1\n+  Accept: application/json\n+  Authorization: Basic YWRtaW46c2VjcmV0\n+\n+The server responds with a `Status 200` and list all available tiles::\n+\n+  HTTP/1.1 200 OK\n+  Content-Type: application/json\n+  [\n+    {\n+      "@id": "http://localhost:55001/plone/@tiles/title",\n+      "title": "Title tile",\n+      "description": "A field tile that will show the title of the content object",\n+    },\n+    {\n+      "@id": "http://localhost:55001/plone/@tiles/description",\n+      "title": "Description tile",\n+      "description": "A field tile that will show the description of the content object",\n+    },\n+  ]\n+\n+Retrieve Tile JSON schema\n+-------------------------\n+\n+Retrieve the JSON schema of a specific tile by calling the \'@tiles\' endpoint with the id of the tile::\n+\n+  GET /plone/@tiles/title HTTP/1.1\n+  Accept: application/json\n+  Authorization: Basic YWRtaW46c2VjcmV0\n+\n+The server responds with a JSON schema definition for that particular tile::\n+\n+  HTTP/1.1 200 OK\n+  Content-Type: application/json+schema\n+\n+  {\n+    "properties": {\n+      "title": {\n+        "description": "",\n+        "title": "Title",\n+        "type": "string"\n+      },\n+      ...\n+    },\n+    "required": [\n+      "title",\n+    ],\n+    "title": "Title Tile",\n+    "type": "object"\n+  }\n+\n+\n+Retrieving tiles on a content object\n+------------------------------------\n+\n+Retrieve a list of tiles stored on a content object by calling the @tiles endpoint on a content object::\n+\n+  GET /plone/my-document/@tiles HTTP/1.1\n+  Accept: application/json\n+  Authorization: Basic YWRtaW46c2VjcmV0\n+\n+The server responds with a `Status 200` and list all stored tiles on that content object::\n+\n+  HTTP/1.1 200 OK\n+  Content-Type: application/json\n+  {\n+    "@id": "http://localhost:55001/plone/my-document",\n+    ...\n+    "tiles": [\n+      {\n+        "@id": "http://localhost:55001/plone/my-document/@tiles/my-title",\n+        "type": "title",\n+      },\n+      {\n+        "@id": "http://localhost:55001/plone/my-document/@tiles/my-description",\n+        "type": "description",\n+      },\n+      {\n+        "@id": "http://localhost:55001/plone/my-document/@tiles/image-1",\n+        "type": "image",\n+        "data": {\n+          "image": "<some random url>",\n+          "caption": "My pony",\n+        },\n+      },\n+      {\n+        "type": "image",\n+        "data": {\n+          "image": "<some random url>",\n+          "caption": "My cow",\n+        },\n+      },\n+    ]\n+  }\n+\n+\n+Fetching tiles on an object\n+---------------------------\n+Tiles data are stored in the objects via a Dexterity behavior `plone.tiles`. It has two attributes that stores existing tiles in the object (`tiles`) and the current layout (`tiles_layout`).\n+As it\'s a dexterity behavior, both attributes will be returned in a simple GET::\n+\n+  GET /plone/my-document HTTP/1.1\n+  Accept: application/json\n+  Authorization: Basic YWRtaW46c2VjcmV0\n+  Content-Type: application/json\n+\n+  {\n+    "@id": "http://localhost:55001/plone/my-document",\n+    ...\n+    "tiles_layout": [\n+      "#title-1",\n+      "#description-1",\n+      "#image-1"\n+    ],\n+    "tiles": {\n+      "#title-1": {\n+        "@type": "title"\n+      },\n+      "#description-1": {\n+        "@type": "Description"\n+      },\n+      "#image-1": {\n+        "@type": "Image",\n+        "image": "<some random url>"\n+      }\n+    }\n+  }\n+\n+Tiles objects will contain the tile metadata and the information to render it.\n+\n+\n+Adding tiles to an object\n+-------------------------\n+\n+Storing tiles is done also via a default PATCH content operation::\n+\n+  PATCH /plone/my-document HTTP/1.1\n+  Accept: application/json\n+  Authorization: Basic YWRtaW46c2VjcmV0\n+  Content-Type: application/json\n+\n+  {\n+    "tiles_layout": [\n+      "#title-1",\n+      "#description-1",\n+      "#image-1"\n+    ],\n+    "tiles": {\n+      "#title-1": {\n+        "@type": "title"\n+      },\n+      "#description-1": {\n+        "@type": "Description"\n+      },\n+      "#image-1": {\n+        "@type": "Image",\n+        "image": "<some random url>"\n+      }\n+    }\n+  }\n+\n+If the tile has been added, the server responds with a `204` status code.\n+\n+\n+Proposal on saving tiles layout\n+--------------------------------\n+\n+.. note::\n+  This is not implemented (yet) in the tiles_layout field, but it\'s a proposal on\n+  how could look like in the future. For now, we stick with the implementation shown in\n+  previous sections.\n+\n+They might be serialized using this structure::\n+\n+  [\n+    [\n+      id: UUID,\n+      columns: [\n+        {\n+          id: UUID, // column UUID\n+          size: int // the size of the column\n+          rows: [\n+            {\n+              id: UUID, // inner row UUID\n+              cells: [\n+                {\n+                  id: UUID, // cell UUID\n+                  component: string\n+                  content: {\n+                    // tile fields serialization (or tile id referal)\n+                  },\n+                  size: int\n+                },\n+              ]\n+            }\n+          ]\n+        },\n+      ]\n+    ], // row 1\n+    [], // row 2\n+  ]\n+\n+It tries to match the usual way of CSS frameworks to map grid systems. So we have:\n+\n+row (orderables up/down) -> column (resizables on width) -> row -> cell (actual tile content)\n+\n+Rows are orderable vertically, columns resizables horizontally and cells can be\n+moved around to an specific inner row.\ndiff --git a/docs/source/translations.rst b/docs/source/translations.rst\nindex 6a92aa3f..f422cf6c 100644\n--- a/docs/source/translations.rst\n+++ b/docs/source/translations.rst\n@@ -29,7 +29,7 @@ endpoint including the `id` of the content which should be linked to. The\n \n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/translations_post.req\n+    :request: ../../src/plone/restapi/tests/http-examples/translations_post.req\n \n \n .. note::\n@@ -38,7 +38,7 @@ endpoint including the `id` of the content which should be linked to. The\n The API will return a `201 Created` response if the linking was successful.\n \n \n-.. literalinclude:: _json/translations_post.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translations_post.resp\n    :language: http\n \n \n@@ -47,9 +47,9 @@ content item by issuing a ``GET`` request on the `@translations` endpoint of\n that content item.:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/translations_get.req\n+    :request: ../../src/plone/restapi/tests/http-examples/translations_get.req\n \n-.. literalinclude:: _json/translations_get.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translations_get.resp\n    :language: http\n \n \n@@ -58,12 +58,12 @@ endpoint of the content item and provide the language code you want to unlink.:\n \n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/translations_delete.req\n+    :request: ../../src/plone/restapi/tests/http-examples/translations_delete.req\n \n .. note::\n     "language" is a required field.\n \n-.. literalinclude:: _json/translations_delete.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translations_delete.resp\n    :language: http\n \n \ndiff --git a/docs/source/tusupload.rst b/docs/source/tusupload.rst\nindex 483b7e84..5d37cdec 100644\n--- a/docs/source/tusupload.rst\n+++ b/docs/source/tusupload.rst\n@@ -13,11 +13,11 @@ Creating an Upload URL\n To create a new upload, send a POST request to the `@tus-upload` endpoint.\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/tusupload_post.req\n+    :request: ../../src/plone/restapi/tests/http-examples/tusupload_post.req\n \n The server will return a temporary upload URL in the location header of the response:\n \n-.. literalinclude:: _json/tusupload_post.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_post.resp\n    :language: http\n \n The file can then be uploaded in the next step to that temporary URL.\n@@ -30,13 +30,13 @@ Uploading a File\n \n Once a temporary upload URL has been created, a client can send a PATCH request to upload a file. The file content should be send in the body of the request:\n \n-.. literalinclude:: _json/tusupload_patch_finalized.req\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_patch_finalized.req\n    :language: http\n \n When just a single file is uploaded at once, the server will respond with a `204: No Content` response after a successful upload.\n The HTTP location header contains he URL of the newly created content object:\n \n-.. literalinclude:: _json/tusupload_patch_finalized.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_patch_finalized.resp\n    :language: http\n \n \n@@ -46,13 +46,13 @@ Partial Upload\n TUS allows partial upload of files.\n A partial file is also uploaded by sending a PATCH request to the temporary URL:\n \n-.. literalinclude:: _json/tusupload_patch.req\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_patch.req\n    :language: http\n \n The server will also respond with a `204: No content` response.\n Though, instead of providing the final file URL in the \'location\' header, the server provides an updated \'Upload-Offset\' value, to tell the client the new offset:\n \n-.. literalinclude:: _json/tusupload_patch.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_patch.resp\n    :language: http\n \n When the last partial file has been uploaded, the server will contain the final file URL in the \'location\' header.\n@@ -63,23 +63,23 @@ Replacing Existing Files\n \n TUS can also be used to replace an existing file by sending a POST request to the `@tus-replace` endpoint instead.\n \n-.. literalinclude:: _json/tusreplace_post.req\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusreplace_post.req\n    :language: http\n \n The server will respond with a `201: Created` status and return the URL of the temprorary created upload resource\n in the location header of the response:\n \n-.. literalinclude:: _json/tusupload_post.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_post.resp\n    :language: http\n \n The file can then be uploaded to that URL using the PATCH method in the same way as creating a new file:\n \n-.. literalinclude:: _json/tusreplace_patch.req\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusreplace_patch.req\n    :language: http\n \n The server will respond with a `204: No Content` response and the final file URL in the HTTP location header:\n \n-.. literalinclude:: _json/tusreplace_patch.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusreplace_patch.resp\n    :language: http\n \n \n@@ -89,11 +89,11 @@ Asking for the Current File Offset\n To ask the server for the current file offset, the client can send a HEAD request to the upload URL:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/tusupload_head.req\n+    :request: ../../src/plone/restapi/tests/http-examples/tusupload_head.req\n \n The server will respond with a `200: Ok` status and the current file offset in the \'Upload-Offset\' header:\n \n-.. literalinclude:: _json/tusupload_head.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_head.resp\n    :language: http\n \n \n@@ -103,11 +103,11 @@ Configuration and Options\n The current TUS configuration and a list of supported options can be retrieved sending an OPTIONS request to the `@tus-upload` endpoint:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/tusupload_options.req\n+    :request: ../../src/plone/restapi/tests/http-examples/tusupload_options.req\n \n The server will respond with a `204: No content` status and HTTP headers containing information about the available extentions and the TUS version:\n \n-.. literalinclude:: _json/tusupload_options.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_options.resp\n    :language: http\n \n \ndiff --git a/docs/source/types.rst b/docs/source/types.rst\nindex df35f739..6cec37ae 100644\n--- a/docs/source/types.rst\n+++ b/docs/source/types.rst\n@@ -8,9 +8,9 @@ Available content types in a Plone site can be listed and queried by accessing t\n \n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/types.req\n+    :request: ../../src/plone/restapi/tests/http-examples/types.req\n \n-.. literalinclude:: _json/types.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types.resp\n    :language: http\n \n \n@@ -18,9 +18,9 @@ Available content types in a Plone site can be listed and queried by accessing t\n To get the schema of a content type, access the ``/@types`` endpoint  with the name of the content type, e.g. \'/plone/@types/Document\':\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/types_document.req\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document.req\n \n-.. literalinclude:: _json/types_document.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document.resp\n    :language: http\n \n The content type schema uses the `JSON Schema <http://json-schema.org/>`_ format.\ndiff --git a/docs/source/upgrade-guide.rst b/docs/source/upgrade-guide.rst\nindex 30ac1291..709d94bb 100644\n--- a/docs/source/upgrade-guide.rst\n+++ b/docs/source/upgrade-guide.rst\n@@ -4,6 +4,117 @@ Upgrade Guide\n This upgrade guide lists all breaking changes in plone.restapi and explains the necessary steps that are needed to upgrade to the lastest version.\n \n \n+Upgrading to plone.restapi 3.x\n+------------------------------\n+\n+Image scales\n+^^^^^^^^^^^^\n+\n+Image download URLs and image scale URLs are created using the UID based url formats. This allows Plone to create different URLs when the image changes and thus ensuring caches are updated.\n+\n+Old Response:: \n+\n+     {\n+       "icon": {\n+         "download": "http://localhost:55001/plone/image/@@images/image/icon",\n+         "height": 32,\n+         "width": 24\n+       },\n+       "large": {\n+         "download": "http://localhost:55001/plone/image/@@images/image/large",\n+         "height": 768,\n+         "width": 576\n+       },\n+       ...\n+      }\n+\n+New Response::\n+\n+     {\n+       "icon": {\n+         "download": "http://localhost:55001/plone/image/@@images/8eed3f80-5e1f-4115-85b8-650a10a6ca84.png",\n+         "height": 32,\n+         "width": 24\n+       },\n+       "large": {\n+         "download": "http://localhost:55001/plone/image/@@images/0d1824d1-2672-4b62-9277-aeb220d3bf15.png",\n+         "height": 768,\n+         "width": 576\n+       },\n+      ...\n+      }\n+     \n+\n+@sharing endpoint\n+^^^^^^^^^^^^^^^^^\n+\n+The ``available_roles`` property in the response to a GET request to the\n+``@sharing`` endpoint has changed: Instead of a flat list of strings, it now\n+contains a list of dicts, with the role ID and their translated title:\n+\n+Old Response::\n+\n+  HTTP/1.1 200 OK\n+  Content-Type: application/json\n+  \n+  {\n+    "available_roles": [\n+      "Contributor",\n+      "Editor",\n+      "Reviewer",\n+      "Reader"\n+    ],\n+    "entries": [\n+        "..."\n+    ],\n+    "inherit": true\n+  }\n+\n+\n+New Response::\n+\n+  HTTP/1.1 200 OK\n+  Content-Type: application/json\n+  \n+  {\n+    "available_roles": [\n+      {\n+        "id": "Contributor",\n+        "title": "Can add"\n+      },\n+      {\n+        "id": "Editor",\n+        "title": "Can edit"\n+      },\n+      {\n+        "id": "Reader",\n+        "title": "Can view"\n+      },\n+      {\n+        "id": "Reviewer",\n+        "title": "Can review"\n+      }\n+    ],\n+    "entries": [\n+        "..."\n+    ],\n+    "inherit": true\n+  }\n+\n+\n+Custom Content Deserializers\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+If you have implemented custom content deserializers, you have to handle the\n+new ``create`` keyword in the ``__call__`` method, which determines if deserialization\n+is performed during object creation or while updating an object.\n+\n+Deserializers should only fire an ``IObjectModifiedEvent`` event if an object\n+has been updated. They should not fire it, when a new object has been created.\n+\n+See `Dexterity content deserializer <https://github.com/plone/plone.restapi/blob/master/src/plone/restapi/deserializer/dxcontent.py>`_ for an example.\n+\n+\n Upgrading to plone.restapi 2.x\n ------------------------------\n \ndiff --git a/docs/source/users.rst b/docs/source/users.rst\nindex 3dae824a..c4a2a689 100644\n--- a/docs/source/users.rst\n+++ b/docs/source/users.rst\n@@ -9,44 +9,44 @@ List Users\n To retrieve a list of all current users in the portal, call the ``/@users`` endpoint with a ``GET`` request:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/users.req\n+    :request: ../../src/plone/restapi/tests/http-examples/users.req\n \n The server will respond with a list of all users in the portal:\n \n-.. literalinclude:: _json/users.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users.resp\n    :language: http\n \n \n This only works for Manager users, anonymous users or logged-in users without Manager rights are now allowed to list users. This is the example as an anonymous user:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/users_anonymous.req\n+    :request: ../../src/plone/restapi/tests/http-examples/users_anonymous.req\n \n The server will return a 401 Unauthorized status code\n \n-.. literalinclude:: _json/users_anonymous.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_anonymous.resp\n    :language: http\n \n \n And this one as an user without the proper rights:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/users_unauthorized.req\n+    :request: ../../src/plone/restapi/tests/http-examples/users_unauthorized.req\n \n The server will return a 401 Unauthorized status code\n \n-.. literalinclude:: _json/users_unauthorized.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_unauthorized.resp\n    :language: http\n \n \n The endpoint supports some basic filtering:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/users_filtered_by_username.req\n+    :request: ../../src/plone/restapi/tests/http-examples/users_filtered_by_username.req\n \n The server will respond with a list the filtered users in the portal with username starts with the query.\n \n-.. literalinclude:: _json/users_filtered_by_username.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n    :language: http\n \n The endpoint also takes a ``limit`` parameter that defaults to a maximum of 25 users at a time for performance reasons.\n@@ -58,7 +58,7 @@ Create User\n To create a new user, send a ``POST`` request to the global ``/@users`` endpoint with a JSON representation of the user you want to create in the body:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/users_created.req\n+    :request: ../../src/plone/restapi/tests/http-examples/users_created.req\n \n \n .. note::\n@@ -68,7 +68,7 @@ To create a new user, send a ``POST`` request to the global ``/@users`` endpoint\n \n If the user has been created successfully, the server will respond with a status 201 (Created). The ``Location`` header contains the URL of the newly created user and the resource representation in the payload:\n \n-.. literalinclude:: _json/users_created.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_created.resp\n    :language: http\n \n If no roles has been specified, then a default ``Member`` role is added as a sensible default.\n@@ -80,11 +80,11 @@ Read User\n To retrieve all details for a particular user, send a ``GET`` request to the ``/@users`` endpoint and append the user id to the URL:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/users_get.req\n+    :request: ../../src/plone/restapi/tests/http-examples/users_get.req\n \n The server will respond with a 200 OK status code and the JSON representation of the user in the body:\n \n-.. literalinclude:: _json/users_get.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_get.resp\n    :language: http\n \n The key \'roles\' lists the globally defined roles for the user.\n@@ -92,31 +92,31 @@ The key \'roles\' lists the globally defined roles for the user.\n Only users with Manager rights are allowed to get other users\' information:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/users_unauthorized_get.req\n+    :request: ../../src/plone/restapi/tests/http-examples/users_unauthorized_get.req\n \n If the user lacks this rights, the server will respond with a 401 Unauthorized status code:\n \n-.. literalinclude:: _json/users_unauthorized_get.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_unauthorized_get.resp\n    :language: http\n \n Also anonymous users are not allowed to get users\' information:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/users_anonymous_get.req\n+    :request: ../../src/plone/restapi/tests/http-examples/users_anonymous_get.req\n \n If the user is an anonymous one, the server will respond with a 401 Unauthorized status code:\n \n-.. literalinclude:: _json/users_anonymous_get.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_anonymous_get.resp\n    :language: http\n \n But each user is allowed to get its own information.\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/users_authorized_get.req\n+    :request: ../../src/plone/restapi/tests/http-examples/users_authorized_get.req\n \n In this case, the server will respond with a 200 OK status code and the JSON respresentation of the user in the body:\n \n-.. literalinclude:: _json/users_authorized_get.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_authorized_get.resp\n    :language: http\n \n Update User\n@@ -125,11 +125,11 @@ Update User\n To update the settings of a user, send a ``PATCH`` request with the user details you want to amend to the URL of that particular user, e.g. if you want to update the email address of the admin user to:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/users_update.req\n+    :request: ../../src/plone/restapi/tests/http-examples/users_update.req\n \n A successful response to a PATCH request will be indicated by a :term:`204 No Content` response:\n \n-.. literalinclude:: _json/users_update.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_update.resp\n    :language: http\n \n .. note::\n@@ -143,11 +143,11 @@ Delete User\n To delete a user send a ``DELETE`` request to the ``/@users`` endpoint and append the user id of the user you want to delete, e.g. to delete the user with the id johndoe:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/users_delete.req\n+    :request: ../../src/plone/restapi/tests/http-examples/users_delete.req\n \n A successful response will be indicated by a :term:`204 No Content` response:\n \n-.. literalinclude:: _json/users_delete.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_delete.resp\n    :language: http\n \n \n@@ -161,14 +161,14 @@ This new user will have the role ``Member`` by default as the Plone registration\n To create a new user send a POST request to the \'@users\' endpoint:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/users_add.req\n+    :request: ../../src/plone/restapi/tests/http-examples/users_add.req\n \n If the user should receive an email to set her password, you should pass \'sendPasswordReset": true\' in the JSON body of the request.\n Keep in mind that Plone will send a URL that points to the URL of the Plone site, which might just be your API endpoint.\n \n If the user has been created, the server will respond with a :term:`201 Created` response:\n \n-..  literalinclude:: _json/users_add.resp\n+..  literalinclude:: ../../src/plone/restapi/tests/http-examples/users_add.resp\n     :language: http\n \n \n@@ -187,7 +187,7 @@ The token that is part of the reset url in the email can be used to\n authorize setting a new password:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/users_reset.req\n+    :request: ../../src/plone/restapi/tests/http-examples/users_reset.req\n \n \n Reset Own Password\ndiff --git a/docs/source/vocabularies.rst b/docs/source/vocabularies.rst\nindex 81294295..c8f22b0c 100644\n--- a/docs/source/vocabularies.rst\n+++ b/docs/source/vocabularies.rst\n@@ -16,12 +16,12 @@ Get all vocabularies\n To get a list of all the available content types, you can query using a GET to the @vocabulary endpoint:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/vocabularies.req\n+    :request: ../../src/plone/restapi/tests/http-examples/vocabularies.req\n \n The response will include a list with all the dotted names of the available\n vocabularies in Plone.\n \n-.. literalinclude:: _json/vocabularies.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies.resp\n    :language: http\n \n Get a vocabulary\n@@ -33,7 +33,7 @@ with the name of the vocabulary, e.g.\n endpoint can be used with the site root and content objects.\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/vocabularies_get.req\n+    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get.req\n \n The server will respond with a list of terms. The title is purely for display purposes.\n The token is what should be sent to the server to retrieve the value of the term.\n@@ -43,7 +43,7 @@ The token is what should be sent to the server to retrieve the value of the term\n     resultset exceeds the batch size. See :doc:`/batching` for more\n     details on how to work with batched results.\n \n-.. literalinclude:: _json/vocabularies_get.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get.resp\n    :language: http\n \n Vocabulary terms can be filtered using a ``q`` parameter\ndiff --git a/docs/source/workflow.rst b/docs/source/workflow.rst\nindex e5c93b45..3b336ff4 100644\n--- a/docs/source/workflow.rst\n+++ b/docs/source/workflow.rst\n@@ -8,16 +8,25 @@ In Plone, content almost always has a :term:`workflow` attached.\n We can get the current state and history of an object by issuing a ``GET`` request using on any context:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/workflow_get.req\n+    :request: ../../src/plone/restapi/tests/http-examples/workflow_get.req\n \n-.. literalinclude:: _json/workflow_get.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workflow_get.resp\n    :language: http\n \n \n Now, if we want to change the state of the front page to publish, we would proceed by issuing a ``POST`` request to the given URL:\n \n ..  http:example:: curl httpie python-requests\n-    :request: _json/workflow_post.req\n+    :request: ../../src/plone/restapi/tests/http-examples/workflow_post.req\n \n-.. literalinclude:: _json/workflow_post.resp\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workflow_post.resp\n+   :language: http\n+\n+\n+We can also also change the state recursively for all contained items, provide a comment and set effective and expiration dates:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workflow_post_with_body.req\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workflow_post_with_body.resp\n    :language: http\ndiff --git a/plone-4.3.x-performance.cfg b/plone-4.3.x-performance.cfg\nindex 3cf231f3..f6041153 100644\n--- a/plone-4.3.x-performance.cfg\n+++ b/plone-4.3.x-performance.cfg\n@@ -1,7 +1,6 @@\n [buildout]\n extends =\n     plone-4.3.x.cfg\n-    versions.cfg\n parts += instance plonesite\n \n [instance]\ndiff --git a/plone-4.3.x.cfg b/plone-4.3.x.cfg\nindex d0bd9014..c4545ee7 100644\n--- a/plone-4.3.x.cfg\n+++ b/plone-4.3.x.cfg\n@@ -1,5 +1,9 @@\n [buildout]\n extends =\n     base.cfg\n-    http://dist.plone.org/release/4.3.11/versions.cfg\n+    http://dist.plone.org/release/4.3.17/versions.cfg\n     versions.cfg\n+\n+[versions]\n+pytz = 2017.3\n+zope.interface = 4.1.0\ndiff --git a/plone-5.0.x-performance.cfg b/plone-5.0.x-performance.cfg\nindex 3dacf234..2cb2b8da 100644\n--- a/plone-5.0.x-performance.cfg\n+++ b/plone-5.0.x-performance.cfg\n@@ -1,7 +1,6 @@\n [buildout]\n extends =\n     plone-5.0.x.cfg\n-    versions.cfg\n parts += instance plonesite\n \n [instance]\ndiff --git a/plone-5.0.x.cfg b/plone-5.0.x.cfg\nindex 2a017616..40b7613c 100644\n--- a/plone-5.0.x.cfg\n+++ b/plone-5.0.x.cfg\n@@ -3,3 +3,7 @@ extends =\n     base.cfg\n     http://dist.plone.org/release/5.0.8/versions.cfg\n     versions.cfg\n+\n+[versions]\n+pytz = 2017.3\n+zope.interface = 4.1.0\ndiff --git a/plone-5.1.x-performance.cfg b/plone-5.1.x-performance.cfg\nindex cda70caf..ecbb9001 100644\n--- a/plone-5.1.x-performance.cfg\n+++ b/plone-5.1.x-performance.cfg\n@@ -1,7 +1,6 @@\n [buildout]\n extends =\n     plone-5.1.x.cfg\n-    versions.cfg\n parts += instance plonesite\n \n [instance]\ndiff --git a/plone-5.1.x.cfg b/plone-5.1.x.cfg\nindex 286bddd2..5bb3a958 100644\n--- a/plone-5.1.x.cfg\n+++ b/plone-5.1.x.cfg\n@@ -1,10 +1,5 @@\n [buildout]\n extends =\n     base.cfg\n-    http://dist.plone.org/release/5.1rc2/versions.cfg\n+    http://dist.plone.org/release/5.1.2/versions.cfg\n     versions.cfg\n-\n-[versions]\n-plone.namedfile = 4.2.3\n-plone.app.event = 3.0.6\n-\ndiff --git a/requirements.txt b/requirements.txt\nindex b451c725..3ee645cb 100644\n--- a/requirements.txt\n+++ b/requirements.txt\n@@ -1,6 +1,6 @@\n # https://github.com/plone/buildout.coredev/blob/5.1/requirements.txt\n setuptools==39.1.0\n-zc.buildout==2.11.4\n+zc.buildout==2.11.5\n # Sphinx / ReadTheDocs\n alabaster==0.7.10\n appdirs==1.4.2\ndiff --git a/setup.py b/setup.py\nindex a92cb91f..b1d2930f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,6 +1,7 @@\n from setuptools import setup, find_packages\n \n-version = \'3.0.0.dev0\'\n+\n+version = \'3.2.2.dev0\'\n \n long_description = (\n     open(\'README.rst\').read() + \'\\n\' +\n@@ -10,6 +11,7 @@\n     open(\'CHANGES.rst\').read() + \'\\n\'\n )\n \n+\n setup(name=\'plone.restapi\',\n       version=version,\n       description="plone.restapi is a RESTful hypermedia API for Plone.",\n@@ -42,7 +44,9 @@\n       install_requires=[\n           \'setuptools\',\n           \'python-dateutil\',\n+          \'plone.behavior>=1.1\',  # adds name to behavior directive \n           \'plone.rest >= 1.0a6\',  # json renderer moved to plone.restapi\n+          \'plone.schema >= 1.2.0\',  # new json field          \n           \'PyJWT\',\n           \'pytz\',\n       ],\n@@ -56,6 +60,8 @@\n           \'plone.api\',\n           \'requests\',\n           \'freezegun\',\n+          \'plone.tiles\',\n+          \'mock\',\n       ]},\n       entry_points="""\n       # -*- Entry points: -*-\ndiff --git a/src/plone/restapi/behaviors.py b/src/plone/restapi/behaviors.py\nnew file mode 100644\nindex 00000000..cba56701\n--- /dev/null\n+++ b/src/plone/restapi/behaviors.py\n@@ -0,0 +1,49 @@\n+# -*- coding: utf-8 -*-\n+from plone.autoform.interfaces import IFormFieldProvider\n+from plone.restapi import _\n+from plone.schema import JSONField\n+from plone.supermodel import model\n+from zope.interface import provider\n+\n+import json\n+\n+\n+TILES_SCHEMA = json.dumps({\n+    \'type\': \'object\',\n+    \'properties\': {},\n+})\n+\n+LAYOUT_SCHEMA = json.dumps({\n+    \'type\': \'object\',\n+    \'properties\': {\n+        \'items\': {\n+            \'type\': \'array\',\n+            \'items\': {\n+                \'type\': \'string\'\n+            }\n+        }\n+    }\n+})\n+\n+\n+@provider(IFormFieldProvider)\n+class ITiles(model.Schema):\n+\n+    model.fieldset(\'layout\', label=_(u\'Layout\'),\n+                   fields=[\'tiles\', \'tiles_layout\'])\n+\n+    tiles = JSONField(\n+        title=u\'Tiles\',\n+        description=u\'The JSON representation of the object tiles information. Must be a JSON object.\',  # noqa\n+        schema=TILES_SCHEMA,\n+        default={},\n+        required=False,\n+    )\n+\n+    tiles_layout = JSONField(\n+        title=u\'Tiles Layout)\',\n+        description=u\'The JSON representation of the object tiles layout. Must be a JSON array.\',  # noqa\n+        schema=LAYOUT_SCHEMA,\n+        default={\'items\': []},\n+        required=False,\n+    )\ndiff --git a/src/plone/restapi/configure.zcml b/src/plone/restapi/configure.zcml\nindex 370fb7cb..bf0377c6 100644\n--- a/src/plone/restapi/configure.zcml\n+++ b/src/plone/restapi/configure.zcml\n@@ -2,7 +2,9 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:five="http://namespaces.zope.org/five"\n     xmlns:i18n="http://namespaces.zope.org/i18n"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     i18n_domain="plone.restapi">\n \n   <i18n:registerTranslations directory="locales" />\n@@ -63,6 +65,20 @@\n \n   <include package=".upgrades" />\n \n+  <configure zcml:condition="installed plone.app.dexterity">\n+\n+    <include package="plone.behavior" file="meta.zcml"/>\n+\n+    <plone:behavior\n+        name="plone.tiles"\n+        title="Tiles"\n+        description="Existing tiles on the object and their layout"\n+        provides=".behaviors.ITiles"\n+        for="plone.dexterity.interfaces.IDexterityContent"\n+      />\n+\n+  </configure>\n+\n   <utility\n       factory=".setuphandlers.HiddenProfiles"\n       name="plone.restapi"\ndiff --git a/src/plone/restapi/deserializer/atcontent.py b/src/plone/restapi/deserializer/atcontent.py\nindex 390667c0..a6f696a0 100644\n--- a/src/plone/restapi/deserializer/atcontent.py\n+++ b/src/plone/restapi/deserializer/atcontent.py\n@@ -24,11 +24,13 @@ class DeserializeFromJson(OrderingMixin, object):\n     """JSON deserializer for Archetypes content types\n     """\n \n+    notifies_create = True\n+\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n-    def __call__(self, validate_all=False, data=None):\n+    def __call__(self, validate_all=False, data=None, create=False):\n         if data is None:\n             data = json_body(self.request)\n \n@@ -62,11 +64,13 @@ def __call__(self, validate_all=False, data=None):\n                     \'error\': \'ValidationError\'} for f, e in errors.items()]\n                 raise BadRequest(errors)\n \n-            if obj.checkCreationFlag():\n-                obj.unmarkCreationFlag()\n+            if create:\n+                if obj.checkCreationFlag():\n+                    obj.unmarkCreationFlag()\n                 notify(ObjectInitializedEvent(obj))\n                 obj.at_post_create_script()\n             else:\n+                obj.reindexObject()\n                 notify(ObjectEditedEvent(obj))\n                 obj.at_post_edit_script()\n \ndiff --git a/src/plone/restapi/deserializer/dxcontent.py b/src/plone/restapi/deserializer/dxcontent.py\nindex 0338500f..b2e42165 100644\n--- a/src/plone/restapi/deserializer/dxcontent.py\n+++ b/src/plone/restapi/deserializer/dxcontent.py\n@@ -35,7 +35,7 @@ def __init__(self, context, request):\n         self.sm = getSecurityManager()\n         self.permission_cache = {}\n \n-    def __call__(self, validate_all=False, data=None):  # noqa: ignore=C901\n+    def __call__(self, validate_all=False, data=None, create=False):  # noqa: ignore=C901\n         if data is None:\n             data = json_body(self.request)\n \n@@ -137,7 +137,7 @@ def __call__(self, validate_all=False, data=None):  # noqa: ignore=C901\n         # OrderingMixin\n         self.handle_ordering(data)\n \n-        if modified:\n+        if modified and not create:\n             descriptions = []\n             for interface, names in modified.items():\n                 descriptions.append(Attributes(interface, *names))\ndiff --git a/src/plone/restapi/deserializer/dxfields.py b/src/plone/restapi/deserializer/dxfields.py\nindex 84d8f109..548a9518 100644\n--- a/src/plone/restapi/deserializer/dxfields.py\n+++ b/src/plone/restapi/deserializer/dxfields.py\n@@ -39,8 +39,12 @@ def __init__(self, field, context, request):\n \n     def __call__(self, value):\n         if not isinstance(value, unicode):\n+            self.field.validate(value)\n             return value\n-        return IFromUnicode(self.field).fromUnicode(value)\n+\n+        value = IFromUnicode(self.field).fromUnicode(value)\n+        # IFromUnicode.fromUnicode() will validate, no need to do it twice\n+        return value\n \n \n @implementer(IFieldDeserializer)\ndiff --git a/src/plone/restapi/imaging.py b/src/plone/restapi/imaging.py\nindex 1c569a92..202f6bfa 100644\n--- a/src/plone/restapi/imaging.py\n+++ b/src/plone/restapi/imaging.py\n@@ -1,7 +1,8 @@\n # -*- coding: utf-8 -*-\n from Products.CMFCore.interfaces import IPropertiesTool\n+from zope.component import getMultiAdapter\n from zope.component import getUtility\n-\n+from zope.globalrequest import getRequest\n \n try:\n     from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n@@ -16,12 +17,21 @@ def get_scales(context, field, width, height):\n     with the actual dimensions (aspect ratio of the original image).\n     """\n     scales = {}\n-    absolute_url = context.absolute_url()\n-\n-    for name, scale_width, scale_height in get_scale_infos():\n-        bbox = scale_width, scale_height\n-        actual_width, actual_height = get_actual_scale((width, height), bbox)\n-        url = u\'{}/@@images/{}/{}\'.format(absolute_url, field.__name__, name)\n+    request = getRequest()\n+    images_view = getMultiAdapter((context, request), name=\'images\')\n+\n+    for name, actual_width, actual_height in get_scale_infos():\n+        # Try first with scale name\n+        scale = images_view.scale(field.__name__, scale=name)\n+        if scale is None:\n+            # Sometimes it fails, but we can create it\n+            # using scale sizes\n+            scale = images_view.scale(\n+                field.__name__, width=actual_width, height=actual_height)\n+\n+        url = scale.url\n+        actual_width = scale.width\n+        actual_height = scale.height\n \n         scales[name] = {\n             u\'download\': url,\n@@ -31,6 +41,19 @@ def get_scales(context, field, width, height):\n     return scales\n \n \n+def get_original_image_url(context, fieldname, width, height):\n+    request = getRequest()\n+    images_view = getMultiAdapter((context, request), name=\'images\')\n+    scale = images_view.scale(\n+        fieldname,\n+        width=width,\n+        height=height,\n+        direction=\'thumbnail\'\n+    )\n+\n+    return scale.url\n+\n+\n def get_actual_scale(dimensions, bbox):\n     """Given dimensions of an original image, and a bounding box of a scale,\n     calculates what actual dimensions that scaled image would have,\ndiff --git a/src/plone/restapi/serializer/atfields.py b/src/plone/restapi/serializer/atfields.py\nindex 4f668bb6..8b5396d8 100644\n--- a/src/plone/restapi/serializer/atfields.py\n+++ b/src/plone/restapi/serializer/atfields.py\n@@ -9,6 +9,7 @@\n from plone.app.blob.interfaces import IBlobField\n from plone.app.blob.interfaces import IBlobImageField\n from plone.restapi.imaging import get_scales\n+from plone.restapi.imaging import get_original_image_url\n from plone.restapi.interfaces import IFieldSerializer\n from plone.restapi.serializer.converters import json_compatible\n from zope.component import adapter\n@@ -77,11 +78,10 @@ def __call__(self):\n         if not image:\n             return None\n \n-        url = \'/\'.join((self.context.absolute_url(),\n-                        \'@@images\',\n-                        self.field.__name__))\n-\n         width, height = image.width, image.height\n+        url = get_original_image_url(\n+            self.context, self.field.__name__, width, height)\n+\n         scales = get_scales(self.context, self.field, width, height)\n         result = {\n             \'filename\': self.field.getFilename(self.context),\ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex d9d07479..91070fc0 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -69,12 +69,17 @@\n \n     <adapter factory=".vocabularies.SerializeVocabularyToJson" />\n     <adapter factory=".vocabularies.SerializeTermToJson" />\n-    \n+\n     <adapter factory=".registry.SerializeRegistryToJson" />\n-    \n+\n     <adapter factory=".discussion.ConversationSerializer" />\n     <adapter factory=".discussion.CommentSerializer" />\n \n+    <configure zcml:condition="installed plone.tiles">\n+        <adapter factory=".tile.TileSummarySerializeToJson" />\n+        <adapter factory=".tile.TileSerializeToJson" />\n+    </configure>\n+\n     <configure zcml:condition="have plone-5">\n         <adapter factory=".controlpanels.ControlpanelSerializeToJson" />\n         <adapter factory=".controlpanels.ControlpanelSummarySerializeToJson" />\ndiff --git a/src/plone/restapi/serializer/dxfields.py b/src/plone/restapi/serializer/dxfields.py\nindex 213d9e01..41124705 100644\n--- a/src/plone/restapi/serializer/dxfields.py\n+++ b/src/plone/restapi/serializer/dxfields.py\n@@ -3,6 +3,7 @@\n from plone.dexterity.interfaces import IDexterityContent\n from plone.namedfile.interfaces import INamedFileField\n from plone.namedfile.interfaces import INamedImageField\n+from plone.restapi.imaging import get_original_image_url\n from plone.restapi.imaging import get_scales\n from plone.restapi.interfaces import IFieldSerializer\n from plone.restapi.serializer.converters import json_compatible\n@@ -38,11 +39,15 @@ def __call__(self):\n         if not image:\n             return None\n \n-        url = \'/\'.join((self.context.absolute_url(),\n-                        \'@@images\',\n-                        self.field.__name__))\n-\n         width, height = image.getImageSize()\n+\n+        url = get_original_image_url(\n+            self.context,\n+            self.field.__name__,\n+            width,\n+            height,\n+        )\n+\n         scales = get_scales(self.context, self.field, width, height)\n         result = {\n             \'filename\': image.filename,\ndiff --git a/src/plone/restapi/serializer/local_roles.py b/src/plone/restapi/serializer/local_roles.py\nindex d484a1d8..2add7a68 100644\n--- a/src/plone/restapi/serializer/local_roles.py\n+++ b/src/plone/restapi/serializer/local_roles.py\n@@ -1,12 +1,15 @@\n # -*- coding: utf-8 -*-\n from AccessControl.interfaces import IRoleManager\n from Acquisition import aq_base\n-\n+from operator import itemgetter\n+from plone.app.workflow.interfaces import ISharingPageRole\n from plone.restapi.interfaces import ISerializeToJson\n from zope.component import adapter\n from zope.component import getMultiAdapter\n-from zope.interface import Interface\n+from zope.component import queryUtility\n+from zope.i18n import translate\n from zope.interface import implementer\n+from zope.interface import Interface\n \n \n @adapter(IRoleManager, Interface)\n@@ -17,12 +20,25 @@ def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n+    def _get_title(self, role_id):\n+        util = queryUtility(ISharingPageRole, name=role_id)\n+        if not util:\n+            return role_id\n+        return util.title\n+\n     def __call__(self, search=None):\n         self.request.form[\'search_term\'] = search\n         sharing_view = getMultiAdapter((self.context, self.request),\n                                        name=\'sharing\')\n         local_roles = sharing_view.role_settings()\n-        available_roles = [r[\'id\'] for r in sharing_view.roles()]\n+\n+        available_roles = []\n+        for role in sorted(sharing_view.roles(), key=itemgetter(\'id\')):\n+            util = queryUtility(ISharingPageRole, name=role[\'id\'])\n+            title = util.title\n+            available_roles.append({\n+                \'id\': role[\'id\'],\n+                \'title\': translate(title, context=self.request)})\n \n         blocked_roles = getattr(\n             aq_base(self.context),\ndiff --git a/src/plone/restapi/serializer/tile.py b/src/plone/restapi/serializer/tile.py\nnew file mode 100644\nindex 00000000..89f0030c\n--- /dev/null\n+++ b/src/plone/restapi/serializer/tile.py\n@@ -0,0 +1,79 @@\n+# -*- coding: utf-8 -*-\n+from plone.restapi.interfaces import ISerializeToJson\n+from plone.restapi.interfaces import ISerializeToJsonSummary\n+from plone.restapi.types import utils\n+from zope.interface import implementer\n+from zope.interface import Interface\n+from plone.tiles.interfaces import ITileType\n+from zope.component import adapter\n+from zope.component.hooks import getSite\n+\n+SERVICE_ID = \'@tiles\'\n+\n+\n+@implementer(ISerializeToJsonSummary)\n+@adapter(ITileType, Interface)\n+class TileSummarySerializeToJson(object):\n+\n+    def __init__(self, tile, request):\n+        self.tile = tile\n+\n+    def __call__(self):\n+        portal = getSite()\n+        return {\n+            \'@id\': \'{}/{}/{}\'.format(\n+                portal.absolute_url(),\n+                SERVICE_ID,\n+                self.tile.__name__\n+            ),\n+            \'title\': self.tile.title,\n+            \'description\': self.tile.description,\n+            \'icon\': self.tile.icon,\n+        }\n+\n+\n+def get_jsonschema_for_tile(tile, context, request):\n+    """Build a complete JSON schema for the given tile.\n+    """\n+    schema = tile.schema\n+\n+    fieldsets = utils.get_fieldsets(context, request, schema)\n+\n+    # Build JSON schema properties\n+    properties = utils.get_jsonschema_properties(\n+        context, request, fieldsets\n+    )\n+\n+    # Determine required fields\n+    required = []\n+    for field in utils.iter_fields(fieldsets):\n+        if field.field.required:\n+            required.append(field.field.getName())\n+\n+    # Include field modes\n+    for field in utils.iter_fields(fieldsets):\n+        if field.mode:\n+            properties[field.field.getName()][\'mode\'] = field.mode\n+\n+    return {\n+        \'type\': \'object\',\n+        \'title\': tile.title,\n+        \'properties\': properties,\n+        \'required\': required,\n+        \'fieldsets\': utils.get_fieldset_infos(fieldsets),\n+    }\n+\n+\n+@implementer(ISerializeToJson)\n+@adapter(ITileType, Interface)\n+class TileSerializeToJson(object):\n+\n+    def __init__(self, tile, request):\n+        self.tile = tile\n+        self.request = request\n+        self.schema = self.tile.schema\n+\n+    def __call__(self):\n+        portal = getSite()\n+\n+        return get_jsonschema_for_tile(self.tile, portal, self.request)\ndiff --git a/src/plone/restapi/services/configure.zcml b/src/plone/restapi/services/configure.zcml\nindex 2c7a6bd6..19b45f0b 100644\n--- a/src/plone/restapi/services/configure.zcml\n+++ b/src/plone/restapi/services/configure.zcml\n@@ -32,4 +32,7 @@\n       zcml:condition="have plone-5"/>\n   <include package=".email_send"\n       zcml:condition="have plone-5"/>\n+  <include package=".tiles"\n+      zcml:condition="installed plone.tiles" />\n+\n </configure>\ndiff --git a/src/plone/restapi/services/content/add.py b/src/plone/restapi/services/content/add.py\nindex ab9540b3..efb2086f 100644\n--- a/src/plone/restapi/services/content/add.py\n+++ b/src/plone/restapi/services/content/add.py\n@@ -1,14 +1,20 @@\n # -*- coding: utf-8 -*-\n+from Acquisition import aq_base\n+from Acquisition.interfaces import IAcquirer\n from plone.restapi.deserializer import json_body\n from plone.restapi.exceptions import DeserializationError\n from plone.restapi.interfaces import IDeserializeFromJson\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.services import Service\n+from plone.restapi.services.content.utils import add\n from plone.restapi.services.content.utils import create\n-from plone.restapi.services.content.utils import rename\n+from Products.CMFPlone.utils import safe_hasattr\n from zExceptions import BadRequest\n+from zExceptions import Unauthorized\n from zope.component import queryMultiAdapter\n+from zope.event import notify\n from zope.interface import alsoProvides\n+from zope.lifecycleevent import ObjectCreatedEvent\n \n import plone.protect.interfaces\n \n@@ -32,10 +38,25 @@ def reply(self):\n             alsoProvides(self.request,\n                          plone.protect.interfaces.IDisableCSRFProtection)\n \n-        obj = create(self.context, type_, id_=id_, title=title)\n-        if isinstance(obj, dict) and \'error\' in obj:\n+        try:\n+            obj = create(self.context, type_, id_=id_, title=title)\n+        except Unauthorized as exc:\n+            self.request.response.setStatus(403)\n+            return dict(error=dict(\n+                type=\'Forbidden\',\n+                message=exc.message))\n+        except BadRequest as exc:\n             self.request.response.setStatus(400)\n-            return obj\n+            return dict(error=dict(\n+                type=\'Bad Request\',\n+                message=exc.message))\n+\n+        # Acquisition wrap temporarily to satisfy things like vocabularies\n+        # depending on tools\n+        temporarily_wrapped = False\n+        if IAcquirer.providedBy(obj) and not safe_hasattr(obj, \'aq_base\'):\n+            obj = obj.__of__(self.context)\n+            temporarily_wrapped = True\n \n         # Update fields\n         deserializer = queryMultiAdapter((obj, self.request),\n@@ -46,16 +67,20 @@ def reply(self):\n                 message=\'Cannot deserialize type {}\'.format(obj.portal_type)))\n \n         try:\n-            deserializer(validate_all=True)\n+            deserializer(validate_all=True, create=True)\n         except DeserializationError as e:\n             self.request.response.setStatus(400)\n             return dict(error=dict(\n                 type=\'DeserializationError\',\n                 message=str(e)))\n \n-        # Rename if generated id\n-        if not id_:\n-            rename(obj)\n+        if temporarily_wrapped:\n+            obj = aq_base(obj)\n+\n+        if not getattr(deserializer, \'notifies_create\', False):\n+            notify(ObjectCreatedEvent(obj))\n+\n+        obj = add(self.context, obj, rename=not bool(id_))\n \n         self.request.response.setStatus(201)\n         self.request.response.setHeader(\'Location\', obj.absolute_url())\ndiff --git a/src/plone/restapi/services/content/sharing.py b/src/plone/restapi/services/content/sharing.py\nindex 1940f937..72c40738 100644\n--- a/src/plone/restapi/services/content/sharing.py\n+++ b/src/plone/restapi/services/content/sharing.py\n@@ -26,7 +26,8 @@ def reply(self):\n             self.request.response.setStatus(501)\n             return dict(error=dict(message=\'No serializer available.\'))\n \n-        return serializer(search=self.request.form.get(\'search\'))\n+        search = self.request.form.get(\'search\')\n+        return serializer(search=search)\n \n \n class SharingPost(Service):\ndiff --git a/src/plone/restapi/services/content/tus.py b/src/plone/restapi/services/content/tus.py\nindex 9c708f52..ee37c13b 100644\n--- a/src/plone/restapi/services/content/tus.py\n+++ b/src/plone/restapi/services/content/tus.py\n@@ -10,7 +10,7 @@\n from plone.restapi.interfaces import IDeserializeFromJson\n from plone.restapi.services import Service\n from plone.restapi.services.content.utils import create\n-from plone.restapi.services.content.utils import rename\n+from plone.restapi.services.content.utils import add\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from uuid import uuid4\n from zExceptions import Unauthorized\n@@ -18,6 +18,8 @@\n from zope.interface import implements\n from zope.publisher.interfaces import IPublishTraverse\n from zope.publisher.interfaces import NotFound\n+from zope.lifecycleevent import ObjectCreatedEvent\n+from zope.event import notify\n \n import json\n import os\n@@ -258,7 +260,9 @@ def reply(self):\n                     \'Deserialization Error\', str(e), 400)\n \n             if mode == \'create\':\n-                rename(obj)\n+                if not getattr(deserializer, \'notifies_create\', False):\n+                    notify(ObjectCreatedEvent(obj))\n+                obj = add(self.context, obj)\n \n             tus_upload.close()\n             tus_upload.cleanup()\ndiff --git a/src/plone/restapi/services/content/utils.py b/src/plone/restapi/services/content/utils.py\nindex 1534e310..d8fc1025 100644\n--- a/src/plone/restapi/services/content/utils.py\n+++ b/src/plone/restapi/services/content/utils.py\n@@ -1,13 +1,19 @@\n # -*- coding: utf-8 -*-\n-from Acquisition import aq_parent\n+from Acquisition import aq_base\n from DateTime import DateTime\n-from Products.CMFPlone.utils import base_hasattr\n from plone.app.content.interfaces import INameFromTitle\n+from plone.app.uuid.utils import uuidToObject\n+from plone.uuid.interfaces import IUUID\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.utils import base_hasattr\n from random import randint\n-from zExceptions import BadRequest\n+from zExceptions import Unauthorized\n+from zope.component import getUtility\n+from zope.component.interfaces import IFactory\n+from zope.container.contained import notifyContainerModified\n+from zope.container.contained import ObjectAddedEvent\n from zope.container.interfaces import INameChooser\n-\n-import transaction\n+from zope.event import notify\n \n \n def create(container, type_, id_=None, title=None):\n@@ -22,40 +28,73 @@ def create(container, type_, id_=None, title=None):\n             str(now.millis())[7:],\n             randint(0, 9999))\n     else:\n-        new_id = id_\n-\n-    try:\n-        new_id = container.invokeFactory(type_, new_id, title=title)\n-    except (BadRequest, ValueError) as exc:\n-        return {\'error\': {\n-            \'type\': exc.__class__.__name__,\n-            \'message\': exc.message,\n-        }}\n-\n-    return container[new_id]\n-\n-\n-def rename(obj):\n-    """Rename an object if it has a temporary id."""\n-\n-    # Archetypes objects may get renamed during deserialization.\n-    # Do not rename again.\n-    if (base_hasattr(obj, \'_isIDAutoGenerated\') and\n-            not obj._isIDAutoGenerated(obj.getId())):\n-        return\n-\n-    container = aq_parent(obj)\n-    chooser = INameChooser(container)\n-    # INameFromTitle adaptable objects should not get a name\n-    # suggestion. NameChooser would prefer the given name instead of\n-    # the one provided by the INameFromTitle adapter.\n-    suggestion = None\n-    name_from_title = INameFromTitle(obj, None)\n-    if name_from_title is None:\n-        if base_hasattr(obj, \'generateNewId\'):\n-            suggestion = obj.generateNewId()\n+        if isinstance(id_, unicode):\n+            new_id = id_.encode(\'utf8\')\n         else:\n-            suggestion = obj.Title()\n-    name = chooser.chooseName(suggestion, obj)\n-    transaction.savepoint(optimistic=True)\n-    container.manage_renameObject(obj.getId(), name)\n+            new_id = id_\n+\n+    portal_types = getToolByName(container, \'portal_types\')\n+    type_info = portal_types.getTypeInfo(type_)\n+\n+    # Check for add permission\n+    if not type_info.isConstructionAllowed(container):\n+        raise Unauthorized(\'Cannot create %s\' % type_info.getId())\n+\n+    # Check if allowed subobject type\n+    container_type_info = portal_types.getTypeInfo(container)\n+    if not container_type_info.allowType(type_):\n+        raise Unauthorized(\'Disallowed subobject type: %s\' % type_)\n+\n+    # Check for type constraints\n+    if type_ not in [fti.getId() for fti in container.allowedContentTypes()]:\n+        raise Unauthorized(\'Disallowed subobject type: %s\' % type_)\n+\n+    if type_info.product:\n+        # Oldstyle factory\n+        factory = type_info._getFactoryMethod(container, check_security=0)\n+        new_id = factory(new_id, title=title)\n+        obj = container._getOb(new_id)\n+\n+    else:\n+        factory = getUtility(IFactory, type_info.factory)\n+        obj = factory(new_id, title=title)\n+\n+    if base_hasattr(obj, \'_setPortalTypeName\'):\n+        obj._setPortalTypeName(type_info.getId())\n+\n+    return obj\n+\n+\n+def add(container, obj, rename=True):\n+    """Add an object to a container."""\n+    id_ = getattr(aq_base(obj), \'id\', None)\n+\n+    # Archetypes objects are already created in a container thus we just fire\n+    # the notification events and rename the object if necessary.\n+    if base_hasattr(obj, \'_at_rename_after_creation\'):\n+        notify(ObjectAddedEvent(obj, container, id_))\n+        notifyContainerModified(container)\n+        if obj._at_rename_after_creation and rename:\n+            obj._renameAfterCreation(check_auto_id=True)\n+        return obj\n+    else:\n+        if rename:\n+            chooser = INameChooser(container)\n+            # INameFromTitle adaptable objects should not get a name\n+            # suggestion. NameChooser would prefer the given name instead of\n+            # the one provided by the INameFromTitle adapter.\n+            suggestion = None\n+            name_from_title = INameFromTitle(obj, None)\n+            if name_from_title is None:\n+                suggestion = obj.Title()\n+            id_ = chooser.chooseName(suggestion, obj)\n+            obj.id = id_\n+        new_id = container._setObject(id_, obj)\n+        # _setObject triggers ObjectAddedEvent which can end up triggering a\n+        # content rule to move the item to a different container. In this case\n+        # look up the object by UUID.\n+        try:\n+            return container._getOb(new_id)\n+        except AttributeError:\n+            uuid = IUUID(obj)\n+            return uuidToObject(uuid)\ndiff --git a/src/plone/restapi/services/history/get.py b/src/plone/restapi/services/history/get.py\nindex 83b3f9c2..8b7936ef 100644\n--- a/src/plone/restapi/services/history/get.py\n+++ b/src/plone/restapi/services/history/get.py\n@@ -7,7 +7,7 @@\n from zope.component.hooks import getSite\n from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n-\n+from Products.CMFPlone.utils import safe_unicode\n from datetime import datetime as dt\n \n \n@@ -82,6 +82,25 @@ def reply(self):\n             if item[\'action\'] is None:\n                 item[\'action\'] = \'Create\'\n \n+            # We want action, state and transition names translated\n+            if \'state_title\' in item:\n+                item[\'state_title\'] = self.context.translate(\n+                    safe_unicode(item[\'state_title\']),\n+                    context=self.request\n+                )\n+\n+            if \'transition_title\' in item:\n+                item[\'transition_title\'] = self.context.translate(\n+                    safe_unicode(item[\'transition_title\']),\n+                    context=self.request\n+                )\n+\n+            if \'action\' in item:\n+                item[\'action\'] = self.context.translate(\n+                    safe_unicode(item[\'action\']),\n+                    context=self.request\n+                )\n+\n             # clean up\n             for key in unwanted_keys:\n                 if key in item:\ndiff --git a/docs/source/_json/controlpanels_patch.resp b/src/plone/restapi/services/tiles/__init__.py\nsimilarity index 100%\nrename from docs/source/_json/controlpanels_patch.resp\nrename to src/plone/restapi/services/tiles/__init__.py\ndiff --git a/src/plone/restapi/services/tiles/configure.zcml b/src/plone/restapi/services/tiles/configure.zcml\nnew file mode 100644\nindex 00000000..2750955f\n--- /dev/null\n+++ b/src/plone/restapi/services/tiles/configure.zcml\n@@ -0,0 +1,13 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:plone="http://namespaces.plone.org/plone">\n+\n+  <plone:service\n+    method="GET"\n+    for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+    factory=".get.TilesGet"\n+    name="@tiles"\n+    permission="zope2.View"\n+    />\n+\n+</configure>\ndiff --git a/src/plone/restapi/services/tiles/get.py b/src/plone/restapi/services/tiles/get.py\nnew file mode 100644\nindex 00000000..2cdf443e\n--- /dev/null\n+++ b/src/plone/restapi/services/tiles/get.py\n@@ -0,0 +1,52 @@\n+# -*- coding: utf-8 -*-\n+from plone.restapi.services import Service\n+from AccessControl.security import checkPermission\n+from zope.component import getUtilitiesFor\n+from zope.component import getMultiAdapter\n+from plone.tiles.interfaces import ITileType\n+from plone.restapi.interfaces import ISerializeToJsonSummary\n+from plone.restapi.interfaces import ISerializeToJson\n+from zope.interface import implements\n+from zope.publisher.interfaces import IPublishTraverse\n+from zope.component import getUtility\n+\n+\n+class TilesGet(Service):\n+\n+    implements(IPublishTraverse)\n+\n+    def __init__(self, context, request):\n+        super(TilesGet, self).__init__(context, request)\n+        self.params = []\n+\n+    def publishTraverse(self, request, name):\n+        # Treat any path segments after /@types as parameters\n+        self.params.append(name)\n+        return self\n+\n+    def reply(self):\n+        if self.params and len(self.params) > 0:\n+            self.content_type = "application/json+schema"\n+            try:\n+                tile = getUtility(ITileType, name=self.params[0])\n+                return getMultiAdapter(\n+                    (tile, self.request), ISerializeToJson)()\n+            except KeyError:\n+                self.content_type = "application/json"\n+                self.request.response.setStatus(404)\n+                return {\n+                    \'type\': \'NotFound\',\n+                    \'message\': \'Tile "{}" could not be found.\'.format(\n+                        self.params[0]\n+                    )\n+                }\n+\n+        result = []\n+        tiles = getUtilitiesFor(ITileType, context=self.context)\n+        for name, tile in tiles:\n+            serializer = getMultiAdapter(\n+                (tile, self.request), ISerializeToJsonSummary)\n+            if checkPermission(tile.add_permission, self.context):\n+                result.append(serializer())\n+\n+        return result\ndiff --git a/src/plone/restapi/services/types/get.py b/src/plone/restapi/services/types/get.py\nindex d61ca2f7..9b252ecb 100644\n--- a/src/plone/restapi/services/types/get.py\n+++ b/src/plone/restapi/services/types/get.py\n@@ -4,8 +4,9 @@\n from Products.CMFCore.interfaces import IFolderish\n from Products.CMFCore.utils import getToolByName\n from zExceptions import Unauthorized\n-from zope.component import getUtility\n from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.i18n import translate\n from zope.interface import implements\n from zope.publisher.interfaces import IPublishTraverse\n from zope.schema.interfaces import IVocabularyFactory\n@@ -85,7 +86,7 @@ def reply(self):\n         return [\n             {\n                 \'@id\': \'{}/@types/{}\'.format(portal_url, fti.getId()),\n-                \'title\': fti.Title(),\n+                \'title\': translate(fti.Title(), context=self.request),\n                 \'addable\': fti.getId() in allowed_types if can_add else False,\n             } for fti in ftis\n         ]\ndiff --git a/src/plone/restapi/services/users/update.py b/src/plone/restapi/services/users/update.py\nindex d1be6538..9ffd2970 100644\n--- a/src/plone/restapi/services/users/update.py\n+++ b/src/plone/restapi/services/users/update.py\n@@ -46,6 +46,10 @@ def _get_user(self, user_id):\n         portal_membership = getToolByName(portal, \'portal_membership\')\n         return portal_membership.getMemberById(user_id)\n \n+    def _change_user_password(self, user, value):\n+        acl_users = getToolByName(self.context, \'acl_users\')\n+        acl_users.userSetPassword(user.getUserId(), value)\n+\n     def reply(self):\n         user_settings_to_update = json.loads(self.request.get(\'BODY\', \'{}\'))\n         user = self._get_user(self._get_user_id)\n@@ -60,7 +64,7 @@ def reply(self):\n         if self.can_manage_users:\n             for key, value in user_settings_to_update.items():\n                 if key == \'password\':\n-                    user.userSetPassword(user.getUserId(), value)\n+                    self._change_user_password(user, value)\n                 elif key == \'username\':\n                     set_own_login_name(user, value)\n                 else:\n@@ -87,7 +91,7 @@ def reply(self):\n                 if key == \'password\' and \\\n                    security.enable_user_pwd_choice and \\\n                    self.can_set_own_password:\n-                    user.userSetPassword(user.getUserId(), value)\n+                    self._change_user_password(user, value)\n                 else:\n                     user.setMemberProperties(mapping={key: value})\n \ndiff --git a/src/plone/restapi/services/workflow/transition.py b/src/plone/restapi/services/workflow/transition.py\nindex 5879d77b..8b034300 100644\n--- a/src/plone/restapi/services/workflow/transition.py\n+++ b/src/plone/restapi/services/workflow/transition.py\n@@ -1,14 +1,18 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFCore.WorkflowCore import WorkflowException\n-from Products.CMFCore.utils import getToolByName\n from plone.restapi.deserializer import json_body\n+from plone.restapi.interfaces import IDeserializeFromJson\n from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.services import Service\n+from Products.CMFCore.interfaces import IFolderish\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFCore.WorkflowCore import WorkflowException\n+from zExceptions import BadRequest\n+from zope.component import queryMultiAdapter\n from zope.i18n import translate\n+from zope.interface import alsoProvides\n from zope.interface import implements\n from zope.publisher.interfaces import IPublishTraverse\n from zope.publisher.interfaces import NotFound\n-from zope.interface import alsoProvides\n \n import plone.protect.interfaces\n \n@@ -21,6 +25,7 @@ class WorkflowTransition(Service):\n     def __init__(self, context, request):\n         super(WorkflowTransition, self).__init__(context, request)\n         self.transition = None\n+        self.wftool = getToolByName(context, \'portal_workflow\')\n \n     def publishTraverse(self, request, name):\n         if self.transition is None:\n@@ -37,32 +42,59 @@ def reply(self):\n                 message=\'Missing transition\'))\n \n         data = json_body(self.request)\n-        if data.keys() not in [[], [\'comment\']]:\n-            self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'BadRequest\',\n-                message=\'Invalid body\'))\n-\n-        wftool = getToolByName(self.context, \'portal_workflow\')\n \n         # Disable CSRF protection\n         if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n             alsoProvides(self.request,\n                          plone.protect.interfaces.IDisableCSRFProtection)\n \n+        comment = data.get(\'comment\', \'\')\n+        include_children = data.get(\'include_children\', False)\n+        publication_dates = {}\n+        if \'effective\' in data:\n+            publication_dates[\'effective\'] = data[\'effective\']\n+        if \'expires\' in data:\n+            publication_dates[\'expires\'] = data[\'expires\']\n+        # Archetypes has different field names\n+        if \'effectiveDate\' in data:\n+            publication_dates[\'effectiveDate\'] = data[\'effectiveDate\']\n+        if \'expirationDate\' in data:\n+            publication_dates[\'expirationDate\'] = data[\'expirationDate\']\n+\n         try:\n-            wftool.doActionFor(self.context, self.transition, **data)\n+            self.recurse_transition(\n+                [self.context], comment, publication_dates, include_children)\n+\n         except WorkflowException as e:\n             self.request.response.setStatus(400)\n             return dict(error=dict(\n                 type=\'WorkflowException\',\n                 message=translate(e.message, context=self.request)))\n+        except BadRequest as e:\n+            self.request.response.setStatus(400)\n+            return dict(error=dict(\n+                type=\'Bad Request\',\n+                message=str(e)))\n \n-        history = wftool.getInfoFor(self.context, "review_history")\n+        history = self.wftool.getInfoFor(self.context, "review_history")\n         action = history[-1]\n         action[\'title\'] = self.context.translate(\n-            wftool.getTitleForStateOnType(\n+            self.wftool.getTitleForStateOnType(\n                 action[\'review_state\'],\n                 self.context.portal_type).decode(\'utf8\'))\n \n         return json_compatible(action)\n+\n+    def recurse_transition(self, objs, comment, publication_dates,\n+                           include_children=False):\n+        for obj in objs:\n+            if publication_dates:\n+                deserializer = queryMultiAdapter((obj, self.request),\n+                                                 IDeserializeFromJson)\n+                deserializer(data=publication_dates)\n+\n+            self.wftool.doActionFor(obj, self.transition, comment=comment)\n+            if include_children and IFolderish.providedBy(obj):\n+                self.recurse_transition(\n+                    obj.objectValues(), comment, publication_dates,\n+                    include_children)\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 9dfaeb24..8add5665 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n # pylint: disable=E1002\n # E1002: Use of super on an old style class\n+from plone import api\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.i18n.locales.interfaces import IContentLanguages\n from plone.app.i18n.locales.interfaces import IMetadataLanguages\n@@ -35,6 +36,9 @@\n import requests\n \n \n+PLONE_VERSION = pkg_resources.parse_version(api.env.plone_version())\n+\n+\n try:\n     pkg_resources.get_distribution(\'plone.app.multilingual\')\n     PAM_INSTALLED = True\n@@ -107,6 +111,38 @@ def tearDown(self):\n DATE_TIME_FIXTURE = DateTimeFixture()\n \n \n+import time  # noqa\n+from persistent.TimeStamp import TimeStamp  # noqa\n+\n+def patchedNewTid(old):  # noqa\n+    if getattr(time.time, \'previous_time_function\', False):\n+        t = time.time.previous_time_function()\n+        ts = TimeStamp(*time.gmtime.previous_gmtime_function(t)[:5]+(t % 60,))\n+    else:\n+        t = time.time()\n+        ts = TimeStamp(*time.gmtime(t)[:5]+(t % 60,))\n+    if old is not None:\n+        ts = ts.laterThan(TimeStamp(old))\n+    return ts.raw()\n+\n+\n+class FreezeTimeFixture(Layer):\n+\n+    def setUp(self):\n+        if PLONE_VERSION.base_version >= \'5.1\':\n+            from ZODB import utils\n+            self.ZODB_orig_newTid = utils.newTid\n+            utils.newTid = patchedNewTid\n+\n+    def tearDown(self):\n+        if PLONE_VERSION.base_version >= \'5.1\':\n+            from ZODB import utils\n+            utils.newTid = self.ZODB_orig_newTid\n+\n+\n+FREEZE_TIME_FIXTURE = FreezeTimeFixture()\n+\n+\n class PloneRestApiDXLayer(PloneSandboxLayer):\n \n     defaultBases = (DATE_TIME_FIXTURE, PLONE_APP_CONTENTTYPES_FIXTURE,)\n@@ -155,6 +191,12 @@ def setUpPloneSite(self, portal):\n     bases=(PLONE_RESTAPI_DX_FIXTURE, z2.ZSERVER_FIXTURE),\n     name="PloneRestApiDXLayer:Functional"\n )\n+PLONE_RESTAPI_DX_FUNCTIONAL_TESTING_FREEZETIME = FunctionalTesting(\n+    bases=(FREEZE_TIME_FIXTURE,\n+           PLONE_RESTAPI_DX_FIXTURE,\n+           z2.ZSERVER_FIXTURE),\n+    name="PloneRestApiDXLayerFreeze:Functional"\n+)\n \n \n class PloneRestApiDXPAMLayer(PloneSandboxLayer):\n@@ -203,6 +245,12 @@ def setUpPloneSite(self, portal):\n     bases=(PLONE_RESTAPI_DX_PAM_FIXTURE, z2.ZSERVER_FIXTURE),\n     name="PloneRestApiDXPAMLayer:Functional"\n )\n+PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING_FREEZETIME = FunctionalTesting(\n+    bases=(FREEZE_TIME_FIXTURE,\n+           PLONE_RESTAPI_DX_PAM_FIXTURE,\n+           z2.ZSERVER_FIXTURE),\n+    name="PloneRestApiDXPAMLayerFreeze:Functional"\n+)\n \n \n class PloneRestApiATLayer(PloneSandboxLayer):\ndiff --git a/docs/source/_json/404_not_found.req b/src/plone/restapi/tests/http-examples/404_not_found.req\nsimilarity index 100%\nrename from docs/source/_json/404_not_found.req\nrename to src/plone/restapi/tests/http-examples/404_not_found.req\ndiff --git a/docs/source/_json/404_not_found.resp b/src/plone/restapi/tests/http-examples/404_not_found.resp\nsimilarity index 100%\nrename from docs/source/_json/404_not_found.resp\nrename to src/plone/restapi/tests/http-examples/404_not_found.resp\ndiff --git a/docs/source/_json/actions_get.req b/src/plone/restapi/tests/http-examples/actions_get.req\nsimilarity index 100%\nrename from docs/source/_json/actions_get.req\nrename to src/plone/restapi/tests/http-examples/actions_get.req\ndiff --git a/docs/source/_json/actions_get.resp b/src/plone/restapi/tests/http-examples/actions_get.resp\nsimilarity index 100%\nrename from docs/source/_json/actions_get.resp\nrename to src/plone/restapi/tests/http-examples/actions_get.resp\ndiff --git a/docs/source/_json/batching.req b/src/plone/restapi/tests/http-examples/batching.req\nsimilarity index 100%\nrename from docs/source/_json/batching.req\nrename to src/plone/restapi/tests/http-examples/batching.req\ndiff --git a/docs/source/_json/batching.resp b/src/plone/restapi/tests/http-examples/batching.resp\nsimilarity index 100%\nrename from docs/source/_json/batching.resp\nrename to src/plone/restapi/tests/http-examples/batching.resp\ndiff --git a/docs/source/_json/breadcrumbs.req b/src/plone/restapi/tests/http-examples/breadcrumbs.req\nsimilarity index 100%\nrename from docs/source/_json/breadcrumbs.req\nrename to src/plone/restapi/tests/http-examples/breadcrumbs.req\ndiff --git a/docs/source/_json/breadcrumbs.resp b/src/plone/restapi/tests/http-examples/breadcrumbs.resp\nsimilarity index 100%\nrename from docs/source/_json/breadcrumbs.resp\nrename to src/plone/restapi/tests/http-examples/breadcrumbs.resp\ndiff --git a/docs/source/_json/collection.req b/src/plone/restapi/tests/http-examples/collection.req\nsimilarity index 100%\nrename from docs/source/_json/collection.req\nrename to src/plone/restapi/tests/http-examples/collection.req\ndiff --git a/docs/source/_json/collection.resp b/src/plone/restapi/tests/http-examples/collection.resp\nsimilarity index 100%\nrename from docs/source/_json/collection.resp\nrename to src/plone/restapi/tests/http-examples/collection.resp\ndiff --git a/docs/source/_json/comments_add_root.req b/src/plone/restapi/tests/http-examples/comments_add_root.req\nsimilarity index 100%\nrename from docs/source/_json/comments_add_root.req\nrename to src/plone/restapi/tests/http-examples/comments_add_root.req\ndiff --git a/docs/source/_json/comments_add_root.resp b/src/plone/restapi/tests/http-examples/comments_add_root.resp\nsimilarity index 100%\nrename from docs/source/_json/comments_add_root.resp\nrename to src/plone/restapi/tests/http-examples/comments_add_root.resp\ndiff --git a/docs/source/_json/comments_add_sub.req b/src/plone/restapi/tests/http-examples/comments_add_sub.req\nsimilarity index 100%\nrename from docs/source/_json/comments_add_sub.req\nrename to src/plone/restapi/tests/http-examples/comments_add_sub.req\ndiff --git a/docs/source/_json/comments_add_sub.resp b/src/plone/restapi/tests/http-examples/comments_add_sub.resp\nsimilarity index 100%\nrename from docs/source/_json/comments_add_sub.resp\nrename to src/plone/restapi/tests/http-examples/comments_add_sub.resp\ndiff --git a/docs/source/_json/comments_delete.req b/src/plone/restapi/tests/http-examples/comments_delete.req\nsimilarity index 100%\nrename from docs/source/_json/comments_delete.req\nrename to src/plone/restapi/tests/http-examples/comments_delete.req\ndiff --git a/docs/source/_json/comments_delete.resp b/src/plone/restapi/tests/http-examples/comments_delete.resp\nsimilarity index 100%\nrename from docs/source/_json/comments_delete.resp\nrename to src/plone/restapi/tests/http-examples/comments_delete.resp\ndiff --git a/docs/source/_json/comments_get.req b/src/plone/restapi/tests/http-examples/comments_get.req\nsimilarity index 100%\nrename from docs/source/_json/comments_get.req\nrename to src/plone/restapi/tests/http-examples/comments_get.req\ndiff --git a/docs/source/_json/comments_get.resp b/src/plone/restapi/tests/http-examples/comments_get.resp\nsimilarity index 100%\nrename from docs/source/_json/comments_get.resp\nrename to src/plone/restapi/tests/http-examples/comments_get.resp\ndiff --git a/docs/source/_json/comments_update.req b/src/plone/restapi/tests/http-examples/comments_update.req\nsimilarity index 100%\nrename from docs/source/_json/comments_update.req\nrename to src/plone/restapi/tests/http-examples/comments_update.req\ndiff --git a/docs/source/_json/comments_update.resp b/src/plone/restapi/tests/http-examples/comments_update.resp\nsimilarity index 100%\nrename from docs/source/_json/comments_update.resp\nrename to src/plone/restapi/tests/http-examples/comments_update.resp\ndiff --git a/docs/source/_json/component_breadcrumbs.req b/src/plone/restapi/tests/http-examples/component_breadcrumbs.req\nsimilarity index 100%\nrename from docs/source/_json/component_breadcrumbs.req\nrename to src/plone/restapi/tests/http-examples/component_breadcrumbs.req\ndiff --git a/docs/source/_json/component_breadcrumbs.resp b/src/plone/restapi/tests/http-examples/component_breadcrumbs.resp\nsimilarity index 100%\nrename from docs/source/_json/component_breadcrumbs.resp\nrename to src/plone/restapi/tests/http-examples/component_breadcrumbs.resp\ndiff --git a/docs/source/_json/component_navigation.req b/src/plone/restapi/tests/http-examples/component_navigation.req\nsimilarity index 100%\nrename from docs/source/_json/component_navigation.req\nrename to src/plone/restapi/tests/http-examples/component_navigation.req\ndiff --git a/docs/source/_json/component_navigation.resp b/src/plone/restapi/tests/http-examples/component_navigation.resp\nsimilarity index 100%\nrename from docs/source/_json/component_navigation.resp\nrename to src/plone/restapi/tests/http-examples/component_navigation.resp\ndiff --git a/docs/source/_json/content_delete.req b/src/plone/restapi/tests/http-examples/content_delete.req\nsimilarity index 100%\nrename from docs/source/_json/content_delete.req\nrename to src/plone/restapi/tests/http-examples/content_delete.req\ndiff --git a/docs/source/_json/content_delete.resp b/src/plone/restapi/tests/http-examples/content_delete.resp\nsimilarity index 100%\nrename from docs/source/_json/content_delete.resp\nrename to src/plone/restapi/tests/http-examples/content_delete.resp\ndiff --git a/docs/source/_json/content_get.req b/src/plone/restapi/tests/http-examples/content_get.req\nsimilarity index 100%\nrename from docs/source/_json/content_get.req\nrename to src/plone/restapi/tests/http-examples/content_get.req\ndiff --git a/docs/source/_json/content_get.resp b/src/plone/restapi/tests/http-examples/content_get.resp\nsimilarity index 96%\nrename from docs/source/_json/content_get.resp\nrename to src/plone/restapi/tests/http-examples/content_get.resp\nindex c25c4835..3cee3662 100644\n--- a/docs/source/_json/content_get.resp\n+++ b/src/plone/restapi/tests/http-examples/content_get.resp\n@@ -49,5 +49,6 @@ Content-Type: application/json\n   "table_of_contents": null, \n   "text": null, \n   "title": "My Document", \n-  "version": "current"\n+  "version": "current", \n+  "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/docs/source/_json/content_patch.req b/src/plone/restapi/tests/http-examples/content_patch.req\nsimilarity index 100%\nrename from docs/source/_json/content_patch.req\nrename to src/plone/restapi/tests/http-examples/content_patch.req\ndiff --git a/docs/source/_json/content_patch.resp b/src/plone/restapi/tests/http-examples/content_patch.resp\nsimilarity index 100%\nrename from docs/source/_json/content_patch.resp\nrename to src/plone/restapi/tests/http-examples/content_patch.resp\ndiff --git a/docs/source/_json/content_patch_representation.req b/src/plone/restapi/tests/http-examples/content_patch_representation.req\nsimilarity index 100%\nrename from docs/source/_json/content_patch_representation.req\nrename to src/plone/restapi/tests/http-examples/content_patch_representation.req\ndiff --git a/docs/source/_json/content_patch_representation.resp b/src/plone/restapi/tests/http-examples/content_patch_representation.resp\nsimilarity index 96%\nrename from docs/source/_json/content_patch_representation.resp\nrename to src/plone/restapi/tests/http-examples/content_patch_representation.resp\nindex ee859de3..7596044f 100644\n--- a/docs/source/_json/content_patch_representation.resp\n+++ b/src/plone/restapi/tests/http-examples/content_patch_representation.resp\n@@ -49,5 +49,6 @@ Content-Type: application/json\n   "table_of_contents": null, \n   "text": null, \n   "title": "My New Document Title", \n-  "version": "current"\n+  "version": "current", \n+  "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/docs/source/_json/content_post.req b/src/plone/restapi/tests/http-examples/content_post.req\nsimilarity index 100%\nrename from docs/source/_json/content_post.req\nrename to src/plone/restapi/tests/http-examples/content_post.req\ndiff --git a/docs/source/_json/content_post.resp b/src/plone/restapi/tests/http-examples/content_post.resp\nsimilarity index 96%\nrename from docs/source/_json/content_post.resp\nrename to src/plone/restapi/tests/http-examples/content_post.resp\nindex 89664953..63b4140c 100644\n--- a/docs/source/_json/content_post.resp\n+++ b/src/plone/restapi/tests/http-examples/content_post.resp\n@@ -50,5 +50,6 @@ Location: http://localhost:55001/plone/folder/my-document\n   "table_of_contents": null, \n   "text": null, \n   "title": "My Document", \n-  "version": "current"\n+  "version": "current", \n+  "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/docs/source/_json/content_reorder.req b/src/plone/restapi/tests/http-examples/content_reorder.req\nsimilarity index 100%\nrename from docs/source/_json/content_reorder.req\nrename to src/plone/restapi/tests/http-examples/content_reorder.req\ndiff --git a/docs/source/_json/controlpanels_get.req b/src/plone/restapi/tests/http-examples/controlpanels_get.req\nsimilarity index 100%\nrename from docs/source/_json/controlpanels_get.req\nrename to src/plone/restapi/tests/http-examples/controlpanels_get.req\ndiff --git a/docs/source/_json/controlpanels_get.resp b/src/plone/restapi/tests/http-examples/controlpanels_get.resp\nsimilarity index 100%\nrename from docs/source/_json/controlpanels_get.resp\nrename to src/plone/restapi/tests/http-examples/controlpanels_get.resp\ndiff --git a/docs/source/_json/controlpanels_get_item.req b/src/plone/restapi/tests/http-examples/controlpanels_get_item.req\nsimilarity index 100%\nrename from docs/source/_json/controlpanels_get_item.req\nrename to src/plone/restapi/tests/http-examples/controlpanels_get_item.req\ndiff --git a/docs/source/_json/controlpanels_get_item.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\nsimilarity index 78%\nrename from docs/source/_json/controlpanels_get_item.resp\nrename to src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\nindex 8a10f120..c3bd8d37 100644\n--- a/docs/source/_json/controlpanels_get_item.resp\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n@@ -11,7 +11,8 @@ Content-Type: application/json\n     "default_editor": "TinyMCE", \n     "enable_link_integrity_checks": true, \n     "ext_editor": false, \n-    "lock_on_ttw_edit": true\n+    "lock_on_ttw_edit": true, \n+    "subjects_of_navigation_root": false\n   }, \n   "group": "Content", \n   "schema": {\n@@ -22,7 +23,8 @@ Content-Type: application/json\n           "default_editor", \n           "ext_editor", \n           "enable_link_integrity_checks", \n-          "lock_on_ttw_edit"\n+          "lock_on_ttw_edit", \n+          "subjects_of_navigation_root"\n         ], \n         "id": "default", \n         "title": "Default"\n@@ -69,6 +71,12 @@ Content-Type: application/json\n         "description": "Disabling locking here will only affect users editing content through the Plone web UI.  Content edited via WebDAV clients will still be subject to locking.", \n         "title": "Enable locking for through-the-web edits", \n         "type": "boolean"\n+      }, \n+      "subjects_of_navigation_root": {\n+        "default": false, \n+        "description": "Limit tags aka keywords vocabulary used for Tags field and in searches to the terms used inside the subtree of the current navigation root. This can be used together with Plone\'s multilingual extension plone.app.multilingual to only offer keywords of the current selected language. Other addons may utilize this feature for its specific purposes.", \n+        "title": "Limit tags/keywords to the current navigation root", \n+        "type": "boolean"\n       }\n     }, \n     "required": [\ndiff --git a/docs/source/_json/controlpanels_patch.req b/src/plone/restapi/tests/http-examples/controlpanels_patch.req\nsimilarity index 100%\nrename from docs/source/_json/controlpanels_patch.req\nrename to src/plone/restapi/tests/http-examples/controlpanels_patch.req\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_patch.resp b/src/plone/restapi/tests/http-examples/controlpanels_patch.resp\nnew file mode 100644\nindex 00000000..e69de29b\ndiff --git a/docs/source/_json/conversation_comment_add_root.req b/src/plone/restapi/tests/http-examples/conversation_comment_add_root.req\nsimilarity index 100%\nrename from docs/source/_json/conversation_comment_add_root.req\nrename to src/plone/restapi/tests/http-examples/conversation_comment_add_root.req\ndiff --git a/docs/source/_json/conversation_comment_add_root.resp b/src/plone/restapi/tests/http-examples/conversation_comment_add_root.resp\nsimilarity index 100%\nrename from docs/source/_json/conversation_comment_add_root.resp\nrename to src/plone/restapi/tests/http-examples/conversation_comment_add_root.resp\ndiff --git a/docs/source/_json/conversation_comment_add_sub.req b/src/plone/restapi/tests/http-examples/conversation_comment_add_sub.req\nsimilarity index 100%\nrename from docs/source/_json/conversation_comment_add_sub.req\nrename to src/plone/restapi/tests/http-examples/conversation_comment_add_sub.req\ndiff --git a/docs/source/_json/conversation_comment_add_sub.resp b/src/plone/restapi/tests/http-examples/conversation_comment_add_sub.resp\nsimilarity index 100%\nrename from docs/source/_json/conversation_comment_add_sub.resp\nrename to src/plone/restapi/tests/http-examples/conversation_comment_add_sub.resp\ndiff --git a/docs/source/_json/conversation_comment_delete.req b/src/plone/restapi/tests/http-examples/conversation_comment_delete.req\nsimilarity index 100%\nrename from docs/source/_json/conversation_comment_delete.req\nrename to src/plone/restapi/tests/http-examples/conversation_comment_delete.req\ndiff --git a/docs/source/_json/conversation_comment_delete.resp b/src/plone/restapi/tests/http-examples/conversation_comment_delete.resp\nsimilarity index 100%\nrename from docs/source/_json/conversation_comment_delete.resp\nrename to src/plone/restapi/tests/http-examples/conversation_comment_delete.resp\ndiff --git a/docs/source/_json/conversation_comment_detele.req b/src/plone/restapi/tests/http-examples/conversation_comment_detele.req\nsimilarity index 100%\nrename from docs/source/_json/conversation_comment_detele.req\nrename to src/plone/restapi/tests/http-examples/conversation_comment_detele.req\ndiff --git a/docs/source/_json/conversation_comment_get.req b/src/plone/restapi/tests/http-examples/conversation_comment_get.req\nsimilarity index 100%\nrename from docs/source/_json/conversation_comment_get.req\nrename to src/plone/restapi/tests/http-examples/conversation_comment_get.req\ndiff --git a/docs/source/_json/conversation_comment_update.req b/src/plone/restapi/tests/http-examples/conversation_comment_update.req\nsimilarity index 100%\nrename from docs/source/_json/conversation_comment_update.req\nrename to src/plone/restapi/tests/http-examples/conversation_comment_update.req\ndiff --git a/docs/source/_json/conversation_comment_update.resp b/src/plone/restapi/tests/http-examples/conversation_comment_update.resp\nsimilarity index 100%\nrename from docs/source/_json/conversation_comment_update.resp\nrename to src/plone/restapi/tests/http-examples/conversation_comment_update.resp\ndiff --git a/docs/source/_json/conversation_delete.req b/src/plone/restapi/tests/http-examples/conversation_delete.req\nsimilarity index 100%\nrename from docs/source/_json/conversation_delete.req\nrename to src/plone/restapi/tests/http-examples/conversation_delete.req\ndiff --git a/docs/source/_json/conversation_delete.resp b/src/plone/restapi/tests/http-examples/conversation_delete.resp\nsimilarity index 100%\nrename from docs/source/_json/conversation_delete.resp\nrename to src/plone/restapi/tests/http-examples/conversation_delete.resp\ndiff --git a/docs/source/_json/copy.json b/src/plone/restapi/tests/http-examples/copy.json\nsimilarity index 100%\nrename from docs/source/_json/copy.json\nrename to src/plone/restapi/tests/http-examples/copy.json\ndiff --git a/docs/source/_json/copy.json.req b/src/plone/restapi/tests/http-examples/copy.json.req\nsimilarity index 100%\nrename from docs/source/_json/copy.json.req\nrename to src/plone/restapi/tests/http-examples/copy.json.req\ndiff --git a/docs/source/_json/copy.json.resp b/src/plone/restapi/tests/http-examples/copy.json.resp\nsimilarity index 100%\nrename from docs/source/_json/copy.json.resp\nrename to src/plone/restapi/tests/http-examples/copy.json.resp\ndiff --git a/docs/source/_json/copy.req b/src/plone/restapi/tests/http-examples/copy.req\nsimilarity index 100%\nrename from docs/source/_json/copy.req\nrename to src/plone/restapi/tests/http-examples/copy.req\ndiff --git a/docs/source/_json/copy.resp b/src/plone/restapi/tests/http-examples/copy.resp\nsimilarity index 100%\nrename from docs/source/_json/copy.resp\nrename to src/plone/restapi/tests/http-examples/copy.resp\ndiff --git a/docs/source/_json/copy_multiple.req b/src/plone/restapi/tests/http-examples/copy_multiple.req\nsimilarity index 100%\nrename from docs/source/_json/copy_multiple.req\nrename to src/plone/restapi/tests/http-examples/copy_multiple.req\ndiff --git a/docs/source/_json/copy_multiple.resp b/src/plone/restapi/tests/http-examples/copy_multiple.resp\nsimilarity index 100%\nrename from docs/source/_json/copy_multiple.resp\nrename to src/plone/restapi/tests/http-examples/copy_multiple.resp\ndiff --git a/docs/source/_json/document.req b/src/plone/restapi/tests/http-examples/document.req\nsimilarity index 100%\nrename from docs/source/_json/document.req\nrename to src/plone/restapi/tests/http-examples/document.req\ndiff --git a/docs/source/_json/document.resp b/src/plone/restapi/tests/http-examples/document.resp\nsimilarity index 96%\nrename from docs/source/_json/document.resp\nrename to src/plone/restapi/tests/http-examples/document.resp\nindex 3429a2df..14009c36 100644\n--- a/docs/source/_json/document.resp\n+++ b/src/plone/restapi/tests/http-examples/document.resp\n@@ -52,5 +52,6 @@ Content-Type: application/json\n     "encoding": "utf-8"\n   }, \n   "title": "Welcome to Plone", \n-  "version": "current"\n+  "version": "current", \n+  "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/docs/source/_json/event.req b/src/plone/restapi/tests/http-examples/event.req\nsimilarity index 100%\nrename from docs/source/_json/event.req\nrename to src/plone/restapi/tests/http-examples/event.req\ndiff --git a/docs/source/_json/event.resp b/src/plone/restapi/tests/http-examples/event.resp\nsimilarity index 97%\nrename from docs/source/_json/event.resp\nrename to src/plone/restapi/tests/http-examples/event.resp\nindex 5aaa2269..759a3259 100644\n--- a/docs/source/_json/event.resp\n+++ b/src/plone/restapi/tests/http-examples/event.resp\n@@ -59,5 +59,6 @@ Content-Type: application/json\n   "text": null, \n   "title": "Event", \n   "version": "current", \n+  "versioning_enabled": true, \n   "whole_day": false\n }\n\\ No newline at end of file\ndiff --git a/docs/source/_json/expansion.req b/src/plone/restapi/tests/http-examples/expansion.req\nsimilarity index 100%\nrename from docs/source/_json/expansion.req\nrename to src/plone/restapi/tests/http-examples/expansion.req\ndiff --git a/docs/source/_json/expansion.resp b/src/plone/restapi/tests/http-examples/expansion.resp\nsimilarity index 96%\nrename from docs/source/_json/expansion.resp\nrename to src/plone/restapi/tests/http-examples/expansion.resp\nindex 3429a2df..14009c36 100644\n--- a/docs/source/_json/expansion.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion.resp\n@@ -52,5 +52,6 @@ Content-Type: application/json\n     "encoding": "utf-8"\n   }, \n   "title": "Welcome to Plone", \n-  "version": "current"\n+  "version": "current", \n+  "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/docs/source/_json/expansion_expanded.req b/src/plone/restapi/tests/http-examples/expansion_expanded.req\nsimilarity index 100%\nrename from docs/source/_json/expansion_expanded.req\nrename to src/plone/restapi/tests/http-examples/expansion_expanded.req\ndiff --git a/docs/source/_json/expansion_expanded.resp b/src/plone/restapi/tests/http-examples/expansion_expanded.resp\nsimilarity index 96%\nrename from docs/source/_json/expansion_expanded.resp\nrename to src/plone/restapi/tests/http-examples/expansion_expanded.resp\nindex ac46fbd7..2881430a 100644\n--- a/docs/source/_json/expansion_expanded.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion_expanded.resp\n@@ -58,5 +58,6 @@ Content-Type: application/json\n     "encoding": "utf-8"\n   }, \n   "title": "Welcome to Plone", \n-  "version": "current"\n+  "version": "current", \n+  "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/docs/source/_json/expansion_expanded_full.req b/src/plone/restapi/tests/http-examples/expansion_expanded_full.req\nsimilarity index 100%\nrename from docs/source/_json/expansion_expanded_full.req\nrename to src/plone/restapi/tests/http-examples/expansion_expanded_full.req\ndiff --git a/docs/source/_json/expansion_expanded_full.resp b/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\nsimilarity index 96%\nrename from docs/source/_json/expansion_expanded_full.resp\nrename to src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\nindex 940cec13..08ce461b 100644\n--- a/docs/source/_json/expansion_expanded_full.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\n@@ -84,6 +84,11 @@ Content-Type: application/json\n           "id": "preferences", \n           "title": "Preferences"\n         }, \n+        {\n+          "icon": "", \n+          "id": "dashboard", \n+          "title": "Dashboard"\n+        }, \n         {\n           "icon": "", \n           "id": "plone_setup", \n@@ -180,5 +185,6 @@ Content-Type: application/json\n     "encoding": "utf-8"\n   }, \n   "title": "Welcome to Plone", \n-  "version": "current"\n+  "version": "current", \n+  "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/docs/source/_json/file.req b/src/plone/restapi/tests/http-examples/file.req\nsimilarity index 100%\nrename from docs/source/_json/file.req\nrename to src/plone/restapi/tests/http-examples/file.req\ndiff --git a/docs/source/_json/file.resp b/src/plone/restapi/tests/http-examples/file.resp\nsimilarity index 100%\nrename from docs/source/_json/file.resp\nrename to src/plone/restapi/tests/http-examples/file.resp\ndiff --git a/docs/source/_json/folder.req b/src/plone/restapi/tests/http-examples/folder.req\nsimilarity index 100%\nrename from docs/source/_json/folder.req\nrename to src/plone/restapi/tests/http-examples/folder.req\ndiff --git a/docs/source/_json/folder.resp b/src/plone/restapi/tests/http-examples/folder.resp\nsimilarity index 100%\nrename from docs/source/_json/folder.resp\nrename to src/plone/restapi/tests/http-examples/folder.resp\ndiff --git a/docs/source/_json/groups.req b/src/plone/restapi/tests/http-examples/groups.req\nsimilarity index 100%\nrename from docs/source/_json/groups.req\nrename to src/plone/restapi/tests/http-examples/groups.req\ndiff --git a/docs/source/_json/groups.resp b/src/plone/restapi/tests/http-examples/groups.resp\nsimilarity index 100%\nrename from docs/source/_json/groups.resp\nrename to src/plone/restapi/tests/http-examples/groups.resp\ndiff --git a/docs/source/_json/groups_created.req b/src/plone/restapi/tests/http-examples/groups_created.req\nsimilarity index 100%\nrename from docs/source/_json/groups_created.req\nrename to src/plone/restapi/tests/http-examples/groups_created.req\ndiff --git a/docs/source/_json/groups_created.resp b/src/plone/restapi/tests/http-examples/groups_created.resp\nsimilarity index 100%\nrename from docs/source/_json/groups_created.resp\nrename to src/plone/restapi/tests/http-examples/groups_created.resp\ndiff --git a/docs/source/_json/groups_delete.req b/src/plone/restapi/tests/http-examples/groups_delete.req\nsimilarity index 100%\nrename from docs/source/_json/groups_delete.req\nrename to src/plone/restapi/tests/http-examples/groups_delete.req\ndiff --git a/docs/source/_json/groups_delete.resp b/src/plone/restapi/tests/http-examples/groups_delete.resp\nsimilarity index 100%\nrename from docs/source/_json/groups_delete.resp\nrename to src/plone/restapi/tests/http-examples/groups_delete.resp\ndiff --git a/docs/source/_json/groups_filtered_by_groupname.req b/src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.req\nsimilarity index 100%\nrename from docs/source/_json/groups_filtered_by_groupname.req\nrename to src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.req\ndiff --git a/docs/source/_json/groups_filtered_by_groupname.resp b/src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp\nsimilarity index 100%\nrename from docs/source/_json/groups_filtered_by_groupname.resp\nrename to src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp\ndiff --git a/docs/source/_json/groups_get.req b/src/plone/restapi/tests/http-examples/groups_get.req\nsimilarity index 100%\nrename from docs/source/_json/groups_get.req\nrename to src/plone/restapi/tests/http-examples/groups_get.req\ndiff --git a/docs/source/_json/groups_get.resp b/src/plone/restapi/tests/http-examples/groups_get.resp\nsimilarity index 100%\nrename from docs/source/_json/groups_get.resp\nrename to src/plone/restapi/tests/http-examples/groups_get.resp\ndiff --git a/docs/source/_json/groups_update.req b/src/plone/restapi/tests/http-examples/groups_update.req\nsimilarity index 100%\nrename from docs/source/_json/groups_update.req\nrename to src/plone/restapi/tests/http-examples/groups_update.req\ndiff --git a/docs/source/_json/groups_update.resp b/src/plone/restapi/tests/http-examples/groups_update.resp\nsimilarity index 100%\nrename from docs/source/_json/groups_update.resp\nrename to src/plone/restapi/tests/http-examples/groups_update.resp\ndiff --git a/docs/source/_json/history_get.req b/src/plone/restapi/tests/http-examples/history_get.req\nsimilarity index 100%\nrename from docs/source/_json/history_get.req\nrename to src/plone/restapi/tests/http-examples/history_get.req\ndiff --git a/docs/source/_json/history_get.resp b/src/plone/restapi/tests/http-examples/history_get.resp\nsimilarity index 100%\nrename from docs/source/_json/history_get.resp\nrename to src/plone/restapi/tests/http-examples/history_get.resp\ndiff --git a/docs/source/_json/history_get_versioned.req b/src/plone/restapi/tests/http-examples/history_get_versioned.req\nsimilarity index 100%\nrename from docs/source/_json/history_get_versioned.req\nrename to src/plone/restapi/tests/http-examples/history_get_versioned.req\ndiff --git a/docs/source/_json/history_revert.req b/src/plone/restapi/tests/http-examples/history_revert.req\nsimilarity index 100%\nrename from docs/source/_json/history_revert.req\nrename to src/plone/restapi/tests/http-examples/history_revert.req\ndiff --git a/docs/source/_json/history_revert.resp b/src/plone/restapi/tests/http-examples/history_revert.resp\nsimilarity index 100%\nrename from docs/source/_json/history_revert.resp\nrename to src/plone/restapi/tests/http-examples/history_revert.resp\ndiff --git a/docs/source/_json/image.req b/src/plone/restapi/tests/http-examples/image.req\nsimilarity index 100%\nrename from docs/source/_json/image.req\nrename to src/plone/restapi/tests/http-examples/image.req\ndiff --git a/docs/source/_json/image.resp b/src/plone/restapi/tests/http-examples/image.resp\nsimilarity index 92%\nrename from docs/source/_json/image.resp\nrename to src/plone/restapi/tests/http-examples/image.resp\nindex ab96607b..c2e1a516 100644\n--- a/docs/source/_json/image.resp\n+++ b/src/plone/restapi/tests/http-examples/image.resp\n@@ -32,42 +32,42 @@ Content-Type: application/json\n   "id": "image", \n   "image": {\n     "content-type": "image/png", \n-    "download": "http://localhost:55001/plone/image/@@images/image", \n+    "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n     "filename": "image.png", \n     "height": 56, \n     "scales": {\n       "icon": {\n-        "download": "http://localhost:55001/plone/image/@@images/image/icon", \n+        "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n         "height": 8, \n         "width": 32\n       }, \n       "large": {\n-        "download": "http://localhost:55001/plone/image/@@images/image/large", \n+        "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n         "height": 56, \n         "width": 215\n       }, \n       "listing": {\n-        "download": "http://localhost:55001/plone/image/@@images/image/listing", \n+        "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n         "height": 4, \n         "width": 16\n       }, \n       "mini": {\n-        "download": "http://localhost:55001/plone/image/@@images/image/mini", \n+        "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n         "height": 52, \n         "width": 200\n       }, \n       "preview": {\n-        "download": "http://localhost:55001/plone/image/@@images/image/preview", \n+        "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n         "height": 56, \n         "width": 215\n       }, \n       "thumb": {\n-        "download": "http://localhost:55001/plone/image/@@images/image/thumb", \n+        "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n         "height": 33, \n         "width": 128\n       }, \n       "tile": {\n-        "download": "http://localhost:55001/plone/image/@@images/image/tile", \n+        "download": "http://localhost:55001/plone/image/@@images/uuid1.png", \n         "height": 16, \n         "width": 64\n       }\ndiff --git a/docs/source/_json/jwt_logged_in.req b/src/plone/restapi/tests/http-examples/jwt_logged_in.req\nsimilarity index 100%\nrename from docs/source/_json/jwt_logged_in.req\nrename to src/plone/restapi/tests/http-examples/jwt_logged_in.req\ndiff --git a/docs/source/_json/jwt_logged_in.resp b/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\nsimilarity index 100%\nrename from docs/source/_json/jwt_logged_in.resp\nrename to src/plone/restapi/tests/http-examples/jwt_logged_in.resp\ndiff --git a/docs/source/_json/jwt_login.req b/src/plone/restapi/tests/http-examples/jwt_login.req\nsimilarity index 100%\nrename from docs/source/_json/jwt_login.req\nrename to src/plone/restapi/tests/http-examples/jwt_login.req\ndiff --git a/docs/source/_json/jwt_login.resp b/src/plone/restapi/tests/http-examples/jwt_login.resp\nsimilarity index 100%\nrename from docs/source/_json/jwt_login.resp\nrename to src/plone/restapi/tests/http-examples/jwt_login.resp\ndiff --git a/docs/source/_json/jwt_login_renew.req b/src/plone/restapi/tests/http-examples/jwt_login_renew.req\nsimilarity index 100%\nrename from docs/source/_json/jwt_login_renew.req\nrename to src/plone/restapi/tests/http-examples/jwt_login_renew.req\ndiff --git a/docs/source/_json/jwt_login_renew.resp b/src/plone/restapi/tests/http-examples/jwt_login_renew.resp\nsimilarity index 100%\nrename from docs/source/_json/jwt_login_renew.resp\nrename to src/plone/restapi/tests/http-examples/jwt_login_renew.resp\ndiff --git a/docs/source/_json/jwt_logout.req b/src/plone/restapi/tests/http-examples/jwt_logout.req\nsimilarity index 100%\nrename from docs/source/_json/jwt_logout.req\nrename to src/plone/restapi/tests/http-examples/jwt_logout.req\ndiff --git a/docs/source/_json/jwt_logout.resp b/src/plone/restapi/tests/http-examples/jwt_logout.resp\nsimilarity index 100%\nrename from docs/source/_json/jwt_logout.resp\nrename to src/plone/restapi/tests/http-examples/jwt_logout.resp\ndiff --git a/docs/source/_json/link.req b/src/plone/restapi/tests/http-examples/link.req\nsimilarity index 100%\nrename from docs/source/_json/link.req\nrename to src/plone/restapi/tests/http-examples/link.req\ndiff --git a/docs/source/_json/link.resp b/src/plone/restapi/tests/http-examples/link.resp\nsimilarity index 93%\nrename from docs/source/_json/link.resp\nrename to src/plone/restapi/tests/http-examples/link.resp\nindex 38238edc..0e3e74db 100644\n--- a/docs/source/_json/link.resp\n+++ b/src/plone/restapi/tests/http-examples/link.resp\n@@ -41,10 +41,11 @@ Content-Type: application/json\n     "description": "", \n     "title": "Plone site"\n   }, \n-  "remoteUrl": "http://", \n+  "remoteUrl": null, \n   "review_state": "private", \n   "rights": "", \n   "subjects": [], \n   "title": "My Link", \n-  "version": "current"\n+  "version": "current", \n+  "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/docs/source/_json/lock.req b/src/plone/restapi/tests/http-examples/lock.req\nsimilarity index 100%\nrename from docs/source/_json/lock.req\nrename to src/plone/restapi/tests/http-examples/lock.req\ndiff --git a/docs/source/_json/lock.resp b/src/plone/restapi/tests/http-examples/lock.resp\nsimilarity index 100%\nrename from docs/source/_json/lock.resp\nrename to src/plone/restapi/tests/http-examples/lock.resp\ndiff --git a/docs/source/_json/lock_get.req b/src/plone/restapi/tests/http-examples/lock_get.req\nsimilarity index 100%\nrename from docs/source/_json/lock_get.req\nrename to src/plone/restapi/tests/http-examples/lock_get.req\ndiff --git a/docs/source/_json/lock_get.resp b/src/plone/restapi/tests/http-examples/lock_get.resp\nsimilarity index 100%\nrename from docs/source/_json/lock_get.resp\nrename to src/plone/restapi/tests/http-examples/lock_get.resp\ndiff --git a/docs/source/_json/lock_nonstealable_timeout.req b/src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.req\nsimilarity index 100%\nrename from docs/source/_json/lock_nonstealable_timeout.req\nrename to src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.req\ndiff --git a/docs/source/_json/lock_nonstealable_timeout.resp b/src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp\nsimilarity index 100%\nrename from docs/source/_json/lock_nonstealable_timeout.resp\nrename to src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp\ndiff --git a/docs/source/_json/lock_update.req b/src/plone/restapi/tests/http-examples/lock_update.req\nsimilarity index 100%\nrename from docs/source/_json/lock_update.req\nrename to src/plone/restapi/tests/http-examples/lock_update.req\ndiff --git a/docs/source/_json/lock_update.resp b/src/plone/restapi/tests/http-examples/lock_update.resp\nsimilarity index 100%\nrename from docs/source/_json/lock_update.resp\nrename to src/plone/restapi/tests/http-examples/lock_update.resp\ndiff --git a/docs/source/_json/login.req b/src/plone/restapi/tests/http-examples/login.req\nsimilarity index 100%\nrename from docs/source/_json/login.req\nrename to src/plone/restapi/tests/http-examples/login.req\ndiff --git a/docs/source/_json/move.json b/src/plone/restapi/tests/http-examples/move.json\nsimilarity index 100%\nrename from docs/source/_json/move.json\nrename to src/plone/restapi/tests/http-examples/move.json\ndiff --git a/docs/source/_json/move.json.req b/src/plone/restapi/tests/http-examples/move.json.req\nsimilarity index 100%\nrename from docs/source/_json/move.json.req\nrename to src/plone/restapi/tests/http-examples/move.json.req\ndiff --git a/docs/source/_json/move.json.resp b/src/plone/restapi/tests/http-examples/move.json.resp\nsimilarity index 100%\nrename from docs/source/_json/move.json.resp\nrename to src/plone/restapi/tests/http-examples/move.json.resp\ndiff --git a/docs/source/_json/move.req b/src/plone/restapi/tests/http-examples/move.req\nsimilarity index 100%\nrename from docs/source/_json/move.req\nrename to src/plone/restapi/tests/http-examples/move.req\ndiff --git a/docs/source/_json/move.resp b/src/plone/restapi/tests/http-examples/move.resp\nsimilarity index 100%\nrename from docs/source/_json/move.resp\nrename to src/plone/restapi/tests/http-examples/move.resp\ndiff --git a/docs/source/_json/navigation.req b/src/plone/restapi/tests/http-examples/navigation.req\nsimilarity index 100%\nrename from docs/source/_json/navigation.req\nrename to src/plone/restapi/tests/http-examples/navigation.req\ndiff --git a/docs/source/_json/navigation.resp b/src/plone/restapi/tests/http-examples/navigation.resp\nsimilarity index 100%\nrename from docs/source/_json/navigation.resp\nrename to src/plone/restapi/tests/http-examples/navigation.resp\ndiff --git a/docs/source/_json/navigation_tree.req b/src/plone/restapi/tests/http-examples/navigation_tree.req\nsimilarity index 100%\nrename from docs/source/_json/navigation_tree.req\nrename to src/plone/restapi/tests/http-examples/navigation_tree.req\ndiff --git a/docs/source/_json/navigation_tree.resp b/src/plone/restapi/tests/http-examples/navigation_tree.resp\nsimilarity index 100%\nrename from docs/source/_json/navigation_tree.resp\nrename to src/plone/restapi/tests/http-examples/navigation_tree.resp\ndiff --git a/docs/source/_json/newsitem.req b/src/plone/restapi/tests/http-examples/newsitem.req\nsimilarity index 100%\nrename from docs/source/_json/newsitem.req\nrename to src/plone/restapi/tests/http-examples/newsitem.req\ndiff --git a/docs/source/_json/newsitem.resp b/src/plone/restapi/tests/http-examples/newsitem.resp\nsimilarity index 93%\nrename from docs/source/_json/newsitem.resp\nrename to src/plone/restapi/tests/http-examples/newsitem.resp\nindex dc8228aa..235d894f 100644\n--- a/docs/source/_json/newsitem.resp\n+++ b/src/plone/restapi/tests/http-examples/newsitem.resp\n@@ -33,42 +33,42 @@ Content-Type: application/json\n   "id": "newsitem", \n   "image": {\n     "content-type": "image/png", \n-    "download": "http://localhost:55001/plone/newsitem/@@images/image", \n+    "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n     "filename": "image.png", \n     "height": 56, \n     "scales": {\n       "icon": {\n-        "download": "http://localhost:55001/plone/newsitem/@@images/image/icon", \n+        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n         "height": 8, \n         "width": 32\n       }, \n       "large": {\n-        "download": "http://localhost:55001/plone/newsitem/@@images/image/large", \n+        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n         "height": 56, \n         "width": 215\n       }, \n       "listing": {\n-        "download": "http://localhost:55001/plone/newsitem/@@images/image/listing", \n+        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n         "height": 4, \n         "width": 16\n       }, \n       "mini": {\n-        "download": "http://localhost:55001/plone/newsitem/@@images/image/mini", \n+        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n         "height": 52, \n         "width": 200\n       }, \n       "preview": {\n-        "download": "http://localhost:55001/plone/newsitem/@@images/image/preview", \n+        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n         "height": 56, \n         "width": 215\n       }, \n       "thumb": {\n-        "download": "http://localhost:55001/plone/newsitem/@@images/image/thumb", \n+        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n         "height": 33, \n         "width": 128\n       }, \n       "tile": {\n-        "download": "http://localhost:55001/plone/newsitem/@@images/image/tile", \n+        "download": "http://localhost:55001/plone/newsitem/@@images/uuid1.png", \n         "height": 16, \n         "width": 64\n       }\n@@ -97,5 +97,6 @@ Content-Type: application/json\n     "encoding": "utf-8"\n   }, \n   "title": "My News Item", \n-  "version": "current"\n+  "version": "current", \n+  "versioning_enabled": true\n }\n\\ No newline at end of file\ndiff --git a/docs/source/_json/principals.req b/src/plone/restapi/tests/http-examples/principals.req\nsimilarity index 100%\nrename from docs/source/_json/principals.req\nrename to src/plone/restapi/tests/http-examples/principals.req\ndiff --git a/docs/source/_json/principals.resp b/src/plone/restapi/tests/http-examples/principals.resp\nsimilarity index 100%\nrename from docs/source/_json/principals.resp\nrename to src/plone/restapi/tests/http-examples/principals.resp\ndiff --git a/docs/source/_json/refresh_lock.req b/src/plone/restapi/tests/http-examples/refresh_lock.req\nsimilarity index 100%\nrename from docs/source/_json/refresh_lock.req\nrename to src/plone/restapi/tests/http-examples/refresh_lock.req\ndiff --git a/docs/source/_json/refresh_lock.resp b/src/plone/restapi/tests/http-examples/refresh_lock.resp\nsimilarity index 100%\nrename from docs/source/_json/refresh_lock.resp\nrename to src/plone/restapi/tests/http-examples/refresh_lock.resp\ndiff --git a/docs/source/_json/registry_get.req b/src/plone/restapi/tests/http-examples/registry_get.req\nsimilarity index 100%\nrename from docs/source/_json/registry_get.req\nrename to src/plone/restapi/tests/http-examples/registry_get.req\ndiff --git a/docs/source/_json/registry_get.resp b/src/plone/restapi/tests/http-examples/registry_get.resp\nsimilarity index 100%\nrename from docs/source/_json/registry_get.resp\nrename to src/plone/restapi/tests/http-examples/registry_get.resp\ndiff --git a/docs/source/_json/registry_get_list.req b/src/plone/restapi/tests/http-examples/registry_get_list.req\nsimilarity index 100%\nrename from docs/source/_json/registry_get_list.req\nrename to src/plone/restapi/tests/http-examples/registry_get_list.req\ndiff --git a/docs/source/_json/registry_get_list.resp b/src/plone/restapi/tests/http-examples/registry_get_list.resp\nsimilarity index 99%\nrename from docs/source/_json/registry_get_list.resp\nrename to src/plone/restapi/tests/http-examples/registry_get_list.resp\nindex 2aeeaed0..2bfcb866 100644\n--- a/docs/source/_json/registry_get_list.resp\n+++ b/src/plone/restapi/tests/http-examples/registry_get_list.resp\n@@ -6,7 +6,7 @@ Content-Type: application/json\n   "batching": {\n     "@id": "http://localhost:55001/plone/@registry", \n     "first": "http://localhost:55001/plone/@registry?b_start=0", \n-    "last": "http://localhost:55001/plone/@registry?b_start=1500", \n+    "last": "http://localhost:55001/plone/@registry?b_start=1525", \n     "next": "http://localhost:55001/plone/@registry?b_start=25"\n   }, \n   "items": [\n@@ -417,5 +417,5 @@ Content-Type: application/json\n       "value": false\n     }\n   ], \n-  "items_total": 1524\n+  "items_total": 1547\n }\n\\ No newline at end of file\ndiff --git a/docs/source/_json/registry_update.req b/src/plone/restapi/tests/http-examples/registry_update.req\nsimilarity index 100%\nrename from docs/source/_json/registry_update.req\nrename to src/plone/restapi/tests/http-examples/registry_update.req\ndiff --git a/docs/source/_json/registry_update.resp b/src/plone/restapi/tests/http-examples/registry_update.resp\nsimilarity index 100%\nrename from docs/source/_json/registry_update.resp\nrename to src/plone/restapi/tests/http-examples/registry_update.resp\ndiff --git a/docs/source/_json/roles.req b/src/plone/restapi/tests/http-examples/roles.req\nsimilarity index 100%\nrename from docs/source/_json/roles.req\nrename to src/plone/restapi/tests/http-examples/roles.req\ndiff --git a/docs/source/_json/roles.resp b/src/plone/restapi/tests/http-examples/roles.resp\nsimilarity index 100%\nrename from docs/source/_json/roles.resp\nrename to src/plone/restapi/tests/http-examples/roles.resp\ndiff --git a/docs/source/_json/search.req b/src/plone/restapi/tests/http-examples/search.req\nsimilarity index 100%\nrename from docs/source/_json/search.req\nrename to src/plone/restapi/tests/http-examples/search.req\ndiff --git a/docs/source/_json/search.resp b/src/plone/restapi/tests/http-examples/search.resp\nsimilarity index 100%\nrename from docs/source/_json/search.resp\nrename to src/plone/restapi/tests/http-examples/search.resp\ndiff --git a/docs/source/_json/sharing_folder_get.req b/src/plone/restapi/tests/http-examples/sharing_folder_get.req\nsimilarity index 100%\nrename from docs/source/_json/sharing_folder_get.req\nrename to src/plone/restapi/tests/http-examples/sharing_folder_get.req\ndiff --git a/docs/source/_json/sharing_folder_get.resp b/src/plone/restapi/tests/http-examples/sharing_folder_get.resp\nsimilarity index 61%\nrename from docs/source/_json/sharing_folder_get.resp\nrename to src/plone/restapi/tests/http-examples/sharing_folder_get.resp\nindex 5a745f5a..9df40be7 100644\n--- a/docs/source/_json/sharing_folder_get.resp\n+++ b/src/plone/restapi/tests/http-examples/sharing_folder_get.resp\n@@ -3,10 +3,22 @@ Content-Type: application/json\n \n {\n   "available_roles": [\n-    "Contributor", \n-    "Editor", \n-    "Reviewer", \n-    "Reader"\n+    {\n+      "id": "Contributor", \n+      "title": "Can add"\n+    }, \n+    {\n+      "id": "Editor", \n+      "title": "Can edit"\n+    }, \n+    {\n+      "id": "Reader", \n+      "title": "Can view"\n+    }, \n+    {\n+      "id": "Reviewer", \n+      "title": "Can review"\n+    }\n   ], \n   "entries": [\n     {\ndiff --git a/src/plone/restapi/tests/http-examples/sharing_folder_get_include_titles.req b/src/plone/restapi/tests/http-examples/sharing_folder_get_include_titles.req\nnew file mode 100644\nindex 00000000..14c13bc1\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/sharing_folder_get_include_titles.req\n@@ -0,0 +1,3 @@\n+GET /plone/folder/@sharing?include_titles=1 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/docs/source/_json/sharing_folder_post.req b/src/plone/restapi/tests/http-examples/sharing_folder_post.req\nsimilarity index 90%\nrename from docs/source/_json/sharing_folder_post.req\nrename to src/plone/restapi/tests/http-examples/sharing_folder_post.req\nindex fa678c7e..27182e00 100644\n--- a/docs/source/_json/sharing_folder_post.req\n+++ b/src/plone/restapi/tests/http-examples/sharing_folder_post.req\n@@ -6,7 +6,7 @@ Content-Type: application/json\n {\n     "entries": [\n         {\n-            "id": "test_user_1_",\n+            "id": "AuthenticatedUsers",\n             "roles": {\n                 "Contributor": false,\n                 "Editor": false,\ndiff --git a/docs/source/_json/sharing_folder_post.resp b/src/plone/restapi/tests/http-examples/sharing_folder_post.resp\nsimilarity index 100%\nrename from docs/source/_json/sharing_folder_post.resp\nrename to src/plone/restapi/tests/http-examples/sharing_folder_post.resp\ndiff --git a/docs/source/_json/sharing_search.req b/src/plone/restapi/tests/http-examples/sharing_search.req\nsimilarity index 100%\nrename from docs/source/_json/sharing_search.req\nrename to src/plone/restapi/tests/http-examples/sharing_search.req\ndiff --git a/docs/source/_json/sharing_search.resp b/src/plone/restapi/tests/http-examples/sharing_search.resp\nsimilarity index 82%\nrename from docs/source/_json/sharing_search.resp\nrename to src/plone/restapi/tests/http-examples/sharing_search.resp\nindex 635f7e1f..c489ff69 100644\n--- a/docs/source/_json/sharing_search.resp\n+++ b/src/plone/restapi/tests/http-examples/sharing_search.resp\n@@ -3,10 +3,22 @@ Content-Type: application/json\n \n {\n   "available_roles": [\n-    "Contributor", \n-    "Editor", \n-    "Reviewer", \n-    "Reader"\n+    {\n+      "id": "Contributor", \n+      "title": "Can add"\n+    }, \n+    {\n+      "id": "Editor", \n+      "title": "Can edit"\n+    }, \n+    {\n+      "id": "Reader", \n+      "title": "Can view"\n+    }, \n+    {\n+      "id": "Reviewer", \n+      "title": "Can review"\n+    }\n   ], \n   "entries": [\n     {\ndiff --git a/docs/source/_json/siteroot.req b/src/plone/restapi/tests/http-examples/siteroot.req\nsimilarity index 100%\nrename from docs/source/_json/siteroot.req\nrename to src/plone/restapi/tests/http-examples/siteroot.req\ndiff --git a/docs/source/_json/siteroot.resp b/src/plone/restapi/tests/http-examples/siteroot.resp\nsimilarity index 100%\nrename from docs/source/_json/siteroot.resp\nrename to src/plone/restapi/tests/http-examples/siteroot.resp\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_object_history.req b/src/plone/restapi/tests/http-examples/translated_messages_object_history.req\nnew file mode 100644\nindex 00000000..fd3f88d1\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_object_history.req\n@@ -0,0 +1,4 @@\n+GET /plone/front-page/@history HTTP/1.1\n+Accept: application/json\n+Accept-Language: es\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_object_history.resp b/src/plone/restapi/tests/http-examples/translated_messages_object_history.resp\nnew file mode 100644\nindex 00000000..9b932398\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_object_history.resp\n@@ -0,0 +1,36 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+[\n+  {\n+    "action": "Crear", \n+    "actor": {\n+      "@id": "http://localhost:55001/plone/@users/test_user_1_", \n+      "fullname": "", \n+      "id": "test_user_1_", \n+      "username": "test-user"\n+    }, \n+    "comments": "", \n+    "review_state": "private", \n+    "state_title": "Privado", \n+    "time": "2016-10-21T19:00:00", \n+    "transition_title": "Crear", \n+    "type": "workflow"\n+  }, \n+  {\n+    "@id": "http://localhost:55001/plone/front-page/@history/0", \n+    "action": "Editado", \n+    "actor": {\n+      "@id": "http://localhost:55001/plone/@users/test-user", \n+      "fullname": "test-user", \n+      "id": "test-user", \n+      "username": null\n+    }, \n+    "comments": null, \n+    "may_revert": true, \n+    "time": "2016-10-21T19:00:00", \n+    "transition_title": "Editado", \n+    "type": "versioning", \n+    "version": 0\n+  }\n+]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_object_workflow.req b/src/plone/restapi/tests/http-examples/translated_messages_object_workflow.req\nnew file mode 100644\nindex 00000000..a5da60f4\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_object_workflow.req\n@@ -0,0 +1,4 @@\n+GET /plone/front-page/@workflow HTTP/1.1\n+Accept: application/json\n+Accept-Language: es\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp b/src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp\nnew file mode 100644\nindex 00000000..abc02d33\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp\n@@ -0,0 +1,26 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/front-page/@workflow", \n+  "history": [\n+    {\n+      "action": null, \n+      "actor": "test_user_1_", \n+      "comments": "", \n+      "review_state": "private", \n+      "time": "2016-10-21T19:00:00+00:00", \n+      "title": "Privado"\n+    }\n+  ], \n+  "transitions": [\n+    {\n+      "@id": "http://localhost:55001/plone/front-page/@workflow/publish", \n+      "title": "Publicar"\n+    }, \n+    {\n+      "@id": "http://localhost:55001/plone/front-page/@workflow/submit", \n+      "title": "Enviar para publicaci\\u00f3n"\n+    }\n+  ]\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_types.req b/src/plone/restapi/tests/http-examples/translated_messages_types.req\nnew file mode 100644\nindex 00000000..094d1608\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_types.req\n@@ -0,0 +1,4 @@\n+GET /plone/@types HTTP/1.1\n+Accept: application/json\n+Accept-Language: es\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_types.resp b/src/plone/restapi/tests/http-examples/translated_messages_types.resp\nnew file mode 100644\nindex 00000000..0510b9af\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_types.resp\n@@ -0,0 +1,50 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+[\n+  {\n+    "@id": "http://localhost:55001/plone/@types/File", \n+    "addable": true, \n+    "title": "Archivo"\n+  }, \n+  {\n+    "@id": "http://localhost:55001/plone/@types/Folder", \n+    "addable": true, \n+    "title": "Carpeta"\n+  }, \n+  {\n+    "@id": "http://localhost:55001/plone/@types/Collection", \n+    "addable": true, \n+    "title": "Colecci\\u00f3n"\n+  }, \n+  {\n+    "@id": "http://localhost:55001/plone/@types/DXTestDocument", \n+    "addable": true, \n+    "title": "DX Test Document"\n+  }, \n+  {\n+    "@id": "http://localhost:55001/plone/@types/Link", \n+    "addable": true, \n+    "title": "Enlace"\n+  }, \n+  {\n+    "@id": "http://localhost:55001/plone/@types/Event", \n+    "addable": true, \n+    "title": "Evento"\n+  }, \n+  {\n+    "@id": "http://localhost:55001/plone/@types/Image", \n+    "addable": true, \n+    "title": "Imagen"\n+  }, \n+  {\n+    "@id": "http://localhost:55001/plone/@types/News Item", \n+    "addable": true, \n+    "title": "Noticia"\n+  }, \n+  {\n+    "@id": "http://localhost:55001/plone/@types/Document", \n+    "addable": true, \n+    "title": "P\\u00e1gina"\n+  }\n+]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_types_folder.req b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.req\nnew file mode 100644\nindex 00000000..db2fbce2\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.req\n@@ -0,0 +1,4 @@\n+GET /plone/@types/Folder HTTP/1.1\n+Accept: application/json\n+Accept-Language: es\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\nnew file mode 100644\nindex 00000000..e1c9b2f1\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n@@ -0,0 +1,210 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json+schema\n+\n+{\n+  "fieldsets": [\n+    {\n+      "fields": [\n+        "title", \n+        "description"\n+      ], \n+      "id": "default", \n+      "title": "Default"\n+    }, \n+    {\n+      "fields": [\n+        "subjects", \n+        "language", \n+        "relatedItems"\n+      ], \n+      "id": "categorization", \n+      "title": "Categorizaci\\u00f3n"\n+    }, \n+    {\n+      "fields": [\n+        "effective", \n+        "expires"\n+      ], \n+      "id": "dates", \n+      "title": "Fechas"\n+    }, \n+    {\n+      "fields": [\n+        "creators", \n+        "contributors", \n+        "rights"\n+      ], \n+      "id": "ownership", \n+      "title": "Propiedad"\n+    }, \n+    {\n+      "fields": [\n+        "allow_discussion", \n+        "exclude_from_nav", \n+        "id", \n+        "nextPreviousEnabled"\n+      ], \n+      "id": "settings", \n+      "title": "Configuraci\\u00f3n"\n+    }\n+  ], \n+  "layouts": [\n+    "album_view", \n+    "event_listing", \n+    "full_view", \n+    "listing_view", \n+    "summary_view", \n+    "tabular_view"\n+  ], \n+  "properties": {\n+    "allow_discussion": {\n+      "choices": [\n+        [\n+          "True", \n+          "S\\u00ed"\n+        ], \n+        [\n+          "False", \n+          "No"\n+        ]\n+      ], \n+      "description": "Permitir comentarios para este tipo de contenido", \n+      "enum": [\n+        "True", \n+        "False"\n+      ], \n+      "enumNames": [\n+        "S\\u00ed", \n+        "No"\n+      ], \n+      "title": "Permitir comentarios", \n+      "type": "string"\n+    }, \n+    "contributors": {\n+      "additionalItems": true, \n+      "description": "Los nombres de las personas que han contribuido a este elemento. Cada colaborador deber\\u00eda estar en una l\\u00ednea independiente.", \n+      "items": {\n+        "description": "", \n+        "title": "", \n+        "type": "string"\n+      }, \n+      "title": "Colaboradores", \n+      "type": "array", \n+      "uniqueItems": true, \n+      "widgetOptions": {\n+        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+      }\n+    }, \n+    "creators": {\n+      "additionalItems": true, \n+      "description": "Personas responsables de la creaci\\u00f3n del contenido de este elemento. Por favor, introduzca una lista de nombres de usuario, uno por l\\u00ednea. El autor principal deber\\u00eda ser el primero.", \n+      "items": {\n+        "description": "", \n+        "title": "", \n+        "type": "string"\n+      }, \n+      "title": "Creadores", \n+      "type": "array", \n+      "uniqueItems": true, \n+      "widgetOptions": {\n+        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+      }\n+    }, \n+    "description": {\n+      "description": "Usado en listados de elementos y resultados de b\\u00fasquedas.", \n+      "minLength": 0, \n+      "title": "Descripci\\u00f3n", \n+      "type": "string", \n+      "widget": "textarea"\n+    }, \n+    "effective": {\n+      "description": "La fecha en la que el documento ser\\u00e1 publicado. Si no selecciona ninguna fecha, el documento ser\\u00e1 publicado inmediatamente.", \n+      "title": "Fecha de Publicaci\\u00f3n", \n+      "type": "string", \n+      "widget": "datetime"\n+    }, \n+    "exclude_from_nav": {\n+      "default": false, \n+      "description": "Si est\\u00e1 marcado, este elemento no aparecer\\u00e1 en el \\u00e1rbol de navegaci\\u00f3n", \n+      "title": "Excluir de la navegaci\\u00f3n", \n+      "type": "boolean"\n+    }, \n+    "expires": {\n+      "description": "La fecha en la que expira el documento. Esto har\\u00e1 autom\\u00e1ticamente el documento invisible a otros a una fecha dada. Si no elije ninguna fecha, nunca expirar\\u00e1.", \n+      "title": "Fecha de Terminaci\\u00f3n", \n+      "type": "string", \n+      "widget": "datetime"\n+    }, \n+    "id": {\n+      "description": "Este nombre se mostrar\\u00e1 en la URL.", \n+      "title": "Nombre corto", \n+      "type": "string"\n+    }, \n+    "language": {\n+      "default": "en", \n+      "description": "", \n+      "title": "Idioma", \n+      "type": "string", \n+      "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SupportedContentLanguages"\n+    }, \n+    "nextPreviousEnabled": {\n+      "default": false, \n+      "description": "Esto habilita el widget siguiente/pr\\u00f3ximo en los elementos contenidos en esta carpeta.", \n+      "title": "Habilitar la navegaci\\u00f3n siguiente/anterior", \n+      "type": "boolean"\n+    }, \n+    "relatedItems": {\n+      "additionalItems": true, \n+      "default": [], \n+      "description": "", \n+      "items": {\n+        "description": "", \n+        "title": "Related", \n+        "type": "string", \n+        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+      }, \n+      "title": "Contenido relacionado", \n+      "type": "array", \n+      "uniqueItems": true, \n+      "widgetOptions": {\n+        "pattern_options": {\n+          "recentlyUsed": true\n+        }, \n+        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+      }\n+    }, \n+    "rights": {\n+      "description": "Declaraci\\u00f3n de copyright o informaci\\u00f3n de otros derechos sobre este elemento.", \n+      "minLength": 0, \n+      "title": "Derechos de Autor", \n+      "type": "string", \n+      "widget": "textarea"\n+    }, \n+    "subjects": {\n+      "additionalItems": true, \n+      "description": "Las etiquetas suelen utilizarse para la organizaci\\u00f3n a medida del contenido.", \n+      "items": {\n+        "description": "", \n+        "title": "", \n+        "type": "string"\n+      }, \n+      "title": "Etiquetas", \n+      "type": "array", \n+      "uniqueItems": true, \n+      "widgetOptions": {\n+        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+      }\n+    }, \n+    "title": {\n+      "description": "", \n+      "title": "T\\u00edtulo", \n+      "type": "string"\n+    }\n+  }, \n+  "required": [\n+    "title", \n+    "nextPreviousEnabled"\n+  ], \n+  "title": "Carpeta", \n+  "type": "object"\n+}\n\\ No newline at end of file\ndiff --git a/docs/source/_json/translations_delete.req b/src/plone/restapi/tests/http-examples/translations_delete.req\nsimilarity index 100%\nrename from docs/source/_json/translations_delete.req\nrename to src/plone/restapi/tests/http-examples/translations_delete.req\ndiff --git a/docs/source/_json/translations_delete.resp b/src/plone/restapi/tests/http-examples/translations_delete.resp\nsimilarity index 100%\nrename from docs/source/_json/translations_delete.resp\nrename to src/plone/restapi/tests/http-examples/translations_delete.resp\ndiff --git a/docs/source/_json/translations_get.req b/src/plone/restapi/tests/http-examples/translations_get.req\nsimilarity index 100%\nrename from docs/source/_json/translations_get.req\nrename to src/plone/restapi/tests/http-examples/translations_get.req\ndiff --git a/docs/source/_json/translations_get.resp b/src/plone/restapi/tests/http-examples/translations_get.resp\nsimilarity index 100%\nrename from docs/source/_json/translations_get.resp\nrename to src/plone/restapi/tests/http-examples/translations_get.resp\ndiff --git a/docs/source/_json/translations_post.req b/src/plone/restapi/tests/http-examples/translations_post.req\nsimilarity index 100%\nrename from docs/source/_json/translations_post.req\nrename to src/plone/restapi/tests/http-examples/translations_post.req\ndiff --git a/docs/source/_json/translations_post.resp b/src/plone/restapi/tests/http-examples/translations_post.resp\nsimilarity index 100%\nrename from docs/source/_json/translations_post.resp\nrename to src/plone/restapi/tests/http-examples/translations_post.resp\ndiff --git a/docs/source/_json/tusreplace_patch.req b/src/plone/restapi/tests/http-examples/tusreplace_patch.req\nsimilarity index 100%\nrename from docs/source/_json/tusreplace_patch.req\nrename to src/plone/restapi/tests/http-examples/tusreplace_patch.req\ndiff --git a/docs/source/_json/tusreplace_patch.resp b/src/plone/restapi/tests/http-examples/tusreplace_patch.resp\nsimilarity index 100%\nrename from docs/source/_json/tusreplace_patch.resp\nrename to src/plone/restapi/tests/http-examples/tusreplace_patch.resp\ndiff --git a/docs/source/_json/tusreplace_post.req b/src/plone/restapi/tests/http-examples/tusreplace_post.req\nsimilarity index 100%\nrename from docs/source/_json/tusreplace_post.req\nrename to src/plone/restapi/tests/http-examples/tusreplace_post.req\ndiff --git a/docs/source/_json/tusreplace_post.resp b/src/plone/restapi/tests/http-examples/tusreplace_post.resp\nsimilarity index 100%\nrename from docs/source/_json/tusreplace_post.resp\nrename to src/plone/restapi/tests/http-examples/tusreplace_post.resp\ndiff --git a/docs/source/_json/tusupload_head.req b/src/plone/restapi/tests/http-examples/tusupload_head.req\nsimilarity index 100%\nrename from docs/source/_json/tusupload_head.req\nrename to src/plone/restapi/tests/http-examples/tusupload_head.req\ndiff --git a/docs/source/_json/tusupload_head.resp b/src/plone/restapi/tests/http-examples/tusupload_head.resp\nsimilarity index 100%\nrename from docs/source/_json/tusupload_head.resp\nrename to src/plone/restapi/tests/http-examples/tusupload_head.resp\ndiff --git a/docs/source/_json/tusupload_options.req b/src/plone/restapi/tests/http-examples/tusupload_options.req\nsimilarity index 100%\nrename from docs/source/_json/tusupload_options.req\nrename to src/plone/restapi/tests/http-examples/tusupload_options.req\ndiff --git a/docs/source/_json/tusupload_options.resp b/src/plone/restapi/tests/http-examples/tusupload_options.resp\nsimilarity index 100%\nrename from docs/source/_json/tusupload_options.resp\nrename to src/plone/restapi/tests/http-examples/tusupload_options.resp\ndiff --git a/docs/source/_json/tusupload_patch.req b/src/plone/restapi/tests/http-examples/tusupload_patch.req\nsimilarity index 100%\nrename from docs/source/_json/tusupload_patch.req\nrename to src/plone/restapi/tests/http-examples/tusupload_patch.req\ndiff --git a/docs/source/_json/tusupload_patch.resp b/src/plone/restapi/tests/http-examples/tusupload_patch.resp\nsimilarity index 100%\nrename from docs/source/_json/tusupload_patch.resp\nrename to src/plone/restapi/tests/http-examples/tusupload_patch.resp\ndiff --git a/docs/source/_json/tusupload_patch_finalized.req b/src/plone/restapi/tests/http-examples/tusupload_patch_finalized.req\nsimilarity index 100%\nrename from docs/source/_json/tusupload_patch_finalized.req\nrename to src/plone/restapi/tests/http-examples/tusupload_patch_finalized.req\ndiff --git a/docs/source/_json/tusupload_patch_finalized.resp b/src/plone/restapi/tests/http-examples/tusupload_patch_finalized.resp\nsimilarity index 100%\nrename from docs/source/_json/tusupload_patch_finalized.resp\nrename to src/plone/restapi/tests/http-examples/tusupload_patch_finalized.resp\ndiff --git a/docs/source/_json/tusupload_post.req b/src/plone/restapi/tests/http-examples/tusupload_post.req\nsimilarity index 100%\nrename from docs/source/_json/tusupload_post.req\nrename to src/plone/restapi/tests/http-examples/tusupload_post.req\ndiff --git a/docs/source/_json/tusupload_post.resp b/src/plone/restapi/tests/http-examples/tusupload_post.resp\nsimilarity index 100%\nrename from docs/source/_json/tusupload_post.resp\nrename to src/plone/restapi/tests/http-examples/tusupload_post.resp\ndiff --git a/docs/source/_json/types.req b/src/plone/restapi/tests/http-examples/types.req\nsimilarity index 100%\nrename from docs/source/_json/types.req\nrename to src/plone/restapi/tests/http-examples/types.req\ndiff --git a/docs/source/_json/types.resp b/src/plone/restapi/tests/http-examples/types.resp\nsimilarity index 100%\nrename from docs/source/_json/types.resp\nrename to src/plone/restapi/tests/http-examples/types.resp\ndiff --git a/docs/source/_json/types_document.req b/src/plone/restapi/tests/http-examples/types_document.req\nsimilarity index 100%\nrename from docs/source/_json/types_document.req\nrename to src/plone/restapi/tests/http-examples/types_document.req\ndiff --git a/docs/source/_json/types_document.resp b/src/plone/restapi/tests/http-examples/types_document.resp\nsimilarity index 93%\nrename from docs/source/_json/types_document.resp\nrename to src/plone/restapi/tests/http-examples/types_document.resp\nindex 98e95c88..969f4e51 100644\n--- a/docs/source/_json/types_document.resp\n+++ b/src/plone/restapi/tests/http-examples/types_document.resp\n@@ -18,6 +18,7 @@ Content-Type: application/json+schema\n         "allow_discussion", \n         "exclude_from_nav", \n         "id", \n+        "versioning_enabled", \n         "table_of_contents"\n       ], \n       "id": "settings", \n@@ -147,7 +148,7 @@ Content-Type: application/json+schema\n       "description": "", \n       "title": "Language", \n       "type": "string", \n-      "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AvailableContentLanguages"\n+      "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SupportedContentLanguages"\n     }, \n     "relatedItems": {\n       "additionalItems": true, \n@@ -163,6 +164,9 @@ Content-Type: application/json+schema\n       "type": "array", \n       "uniqueItems": true, \n       "widgetOptions": {\n+        "pattern_options": {\n+          "recentlyUsed": true\n+        }, \n         "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n       }\n     }, \n@@ -203,11 +207,16 @@ Content-Type: application/json+schema\n       "description": "", \n       "title": "Title", \n       "type": "string"\n+    }, \n+    "versioning_enabled": {\n+      "default": true, \n+      "description": "Enable/disable versioning for this document.", \n+      "title": "Versioning enabled", \n+      "type": "boolean"\n     }\n   }, \n   "required": [\n-    "title", \n-    "exclude_from_nav"\n+    "title"\n   ], \n   "title": "Page", \n   "type": "object"\ndiff --git a/docs/source/_json/unlock.req b/src/plone/restapi/tests/http-examples/unlock.req\nsimilarity index 100%\nrename from docs/source/_json/unlock.req\nrename to src/plone/restapi/tests/http-examples/unlock.req\ndiff --git a/docs/source/_json/unlock.resp b/src/plone/restapi/tests/http-examples/unlock.resp\nsimilarity index 100%\nrename from docs/source/_json/unlock.resp\nrename to src/plone/restapi/tests/http-examples/unlock.resp\ndiff --git a/docs/source/_json/users.req b/src/plone/restapi/tests/http-examples/users.req\nsimilarity index 100%\nrename from docs/source/_json/users.req\nrename to src/plone/restapi/tests/http-examples/users.req\ndiff --git a/docs/source/_json/users.resp b/src/plone/restapi/tests/http-examples/users.resp\nsimilarity index 100%\nrename from docs/source/_json/users.resp\nrename to src/plone/restapi/tests/http-examples/users.resp\ndiff --git a/docs/source/_json/users_add.req b/src/plone/restapi/tests/http-examples/users_add.req\nsimilarity index 100%\nrename from docs/source/_json/users_add.req\nrename to src/plone/restapi/tests/http-examples/users_add.req\ndiff --git a/docs/source/_json/users_add.resp b/src/plone/restapi/tests/http-examples/users_add.resp\nsimilarity index 100%\nrename from docs/source/_json/users_add.resp\nrename to src/plone/restapi/tests/http-examples/users_add.resp\ndiff --git a/docs/source/_json/users_anonymous.req b/src/plone/restapi/tests/http-examples/users_anonymous.req\nsimilarity index 100%\nrename from docs/source/_json/users_anonymous.req\nrename to src/plone/restapi/tests/http-examples/users_anonymous.req\ndiff --git a/docs/source/_json/users_anonymous.resp b/src/plone/restapi/tests/http-examples/users_anonymous.resp\nsimilarity index 100%\nrename from docs/source/_json/users_anonymous.resp\nrename to src/plone/restapi/tests/http-examples/users_anonymous.resp\ndiff --git a/docs/source/_json/users_anonymous_get.req b/src/plone/restapi/tests/http-examples/users_anonymous_get.req\nsimilarity index 100%\nrename from docs/source/_json/users_anonymous_get.req\nrename to src/plone/restapi/tests/http-examples/users_anonymous_get.req\ndiff --git a/docs/source/_json/users_anonymous_get.resp b/src/plone/restapi/tests/http-examples/users_anonymous_get.resp\nsimilarity index 100%\nrename from docs/source/_json/users_anonymous_get.resp\nrename to src/plone/restapi/tests/http-examples/users_anonymous_get.resp\ndiff --git a/docs/source/_json/users_authorized_get.req b/src/plone/restapi/tests/http-examples/users_authorized_get.req\nsimilarity index 100%\nrename from docs/source/_json/users_authorized_get.req\nrename to src/plone/restapi/tests/http-examples/users_authorized_get.req\ndiff --git a/docs/source/_json/users_authorized_get.resp b/src/plone/restapi/tests/http-examples/users_authorized_get.resp\nsimilarity index 100%\nrename from docs/source/_json/users_authorized_get.resp\nrename to src/plone/restapi/tests/http-examples/users_authorized_get.resp\ndiff --git a/docs/source/_json/users_created.req b/src/plone/restapi/tests/http-examples/users_created.req\nsimilarity index 100%\nrename from docs/source/_json/users_created.req\nrename to src/plone/restapi/tests/http-examples/users_created.req\ndiff --git a/docs/source/_json/users_created.resp b/src/plone/restapi/tests/http-examples/users_created.resp\nsimilarity index 100%\nrename from docs/source/_json/users_created.resp\nrename to src/plone/restapi/tests/http-examples/users_created.resp\ndiff --git a/docs/source/_json/users_delete.req b/src/plone/restapi/tests/http-examples/users_delete.req\nsimilarity index 100%\nrename from docs/source/_json/users_delete.req\nrename to src/plone/restapi/tests/http-examples/users_delete.req\ndiff --git a/docs/source/_json/users_delete.resp b/src/plone/restapi/tests/http-examples/users_delete.resp\nsimilarity index 100%\nrename from docs/source/_json/users_delete.resp\nrename to src/plone/restapi/tests/http-examples/users_delete.resp\ndiff --git a/docs/source/_json/users_filtered_by_username.req b/src/plone/restapi/tests/http-examples/users_filtered_by_username.req\nsimilarity index 100%\nrename from docs/source/_json/users_filtered_by_username.req\nrename to src/plone/restapi/tests/http-examples/users_filtered_by_username.req\ndiff --git a/docs/source/_json/users_filtered_by_username.resp b/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\nsimilarity index 100%\nrename from docs/source/_json/users_filtered_by_username.resp\nrename to src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\ndiff --git a/docs/source/_json/users_get.req b/src/plone/restapi/tests/http-examples/users_get.req\nsimilarity index 100%\nrename from docs/source/_json/users_get.req\nrename to src/plone/restapi/tests/http-examples/users_get.req\ndiff --git a/docs/source/_json/users_get.resp b/src/plone/restapi/tests/http-examples/users_get.resp\nsimilarity index 100%\nrename from docs/source/_json/users_get.resp\nrename to src/plone/restapi/tests/http-examples/users_get.resp\ndiff --git a/docs/source/_json/users_reset.req b/src/plone/restapi/tests/http-examples/users_reset.req\nsimilarity index 100%\nrename from docs/source/_json/users_reset.req\nrename to src/plone/restapi/tests/http-examples/users_reset.req\ndiff --git a/docs/source/_json/users_unauthorized.req b/src/plone/restapi/tests/http-examples/users_unauthorized.req\nsimilarity index 100%\nrename from docs/source/_json/users_unauthorized.req\nrename to src/plone/restapi/tests/http-examples/users_unauthorized.req\ndiff --git a/docs/source/_json/users_unauthorized.resp b/src/plone/restapi/tests/http-examples/users_unauthorized.resp\nsimilarity index 100%\nrename from docs/source/_json/users_unauthorized.resp\nrename to src/plone/restapi/tests/http-examples/users_unauthorized.resp\ndiff --git a/docs/source/_json/users_unauthorized_get.req b/src/plone/restapi/tests/http-examples/users_unauthorized_get.req\nsimilarity index 100%\nrename from docs/source/_json/users_unauthorized_get.req\nrename to src/plone/restapi/tests/http-examples/users_unauthorized_get.req\ndiff --git a/docs/source/_json/users_unauthorized_get.resp b/src/plone/restapi/tests/http-examples/users_unauthorized_get.resp\nsimilarity index 100%\nrename from docs/source/_json/users_unauthorized_get.resp\nrename to src/plone/restapi/tests/http-examples/users_unauthorized_get.resp\ndiff --git a/docs/source/_json/users_update.req b/src/plone/restapi/tests/http-examples/users_update.req\nsimilarity index 100%\nrename from docs/source/_json/users_update.req\nrename to src/plone/restapi/tests/http-examples/users_update.req\ndiff --git a/docs/source/_json/users_update.resp b/src/plone/restapi/tests/http-examples/users_update.resp\nsimilarity index 100%\nrename from docs/source/_json/users_update.resp\nrename to src/plone/restapi/tests/http-examples/users_update.resp\ndiff --git a/docs/source/_json/vocabularies.req b/src/plone/restapi/tests/http-examples/vocabularies.req\nsimilarity index 100%\nrename from docs/source/_json/vocabularies.req\nrename to src/plone/restapi/tests/http-examples/vocabularies.req\ndiff --git a/docs/source/_json/vocabularies.resp b/src/plone/restapi/tests/http-examples/vocabularies.resp\nsimilarity index 100%\nrename from docs/source/_json/vocabularies.resp\nrename to src/plone/restapi/tests/http-examples/vocabularies.resp\ndiff --git a/docs/source/_json/vocabularies_get.req b/src/plone/restapi/tests/http-examples/vocabularies_get.req\nsimilarity index 100%\nrename from docs/source/_json/vocabularies_get.req\nrename to src/plone/restapi/tests/http-examples/vocabularies_get.req\ndiff --git a/docs/source/_json/vocabularies_get.resp b/src/plone/restapi/tests/http-examples/vocabularies_get.resp\nsimilarity index 100%\nrename from docs/source/_json/vocabularies_get.resp\nrename to src/plone/restapi/tests/http-examples/vocabularies_get.resp\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req\nnew file mode 100644\nindex 00000000..0b04c25a\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req\n@@ -0,0 +1,3 @@\n+GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?q=doc HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\nnew file mode 100644\nindex 00000000..e609c514\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\n@@ -0,0 +1,17 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?q=doc", \n+  "items": [\n+    {\n+      "title": "DX Test Document", \n+      "token": "DXTestDocument"\n+    }, \n+    {\n+      "title": "Test Document", \n+      "token": "ATTestDocument"\n+    }\n+  ], \n+  "items_total": 2\n+}\n\\ No newline at end of file\ndiff --git a/docs/source/_json/workflow_get.req b/src/plone/restapi/tests/http-examples/workflow_get.req\nsimilarity index 100%\nrename from docs/source/_json/workflow_get.req\nrename to src/plone/restapi/tests/http-examples/workflow_get.req\ndiff --git a/docs/source/_json/workflow_get.resp b/src/plone/restapi/tests/http-examples/workflow_get.resp\nsimilarity index 100%\nrename from docs/source/_json/workflow_get.resp\nrename to src/plone/restapi/tests/http-examples/workflow_get.resp\ndiff --git a/docs/source/_json/workflow_post.req b/src/plone/restapi/tests/http-examples/workflow_post.req\nsimilarity index 100%\nrename from docs/source/_json/workflow_post.req\nrename to src/plone/restapi/tests/http-examples/workflow_post.req\ndiff --git a/docs/source/_json/workflow_post.resp b/src/plone/restapi/tests/http-examples/workflow_post.resp\nsimilarity index 100%\nrename from docs/source/_json/workflow_post.resp\nrename to src/plone/restapi/tests/http-examples/workflow_post.resp\ndiff --git a/src/plone/restapi/tests/http-examples/workflow_post_with_body.req b/src/plone/restapi/tests/http-examples/workflow_post_with_body.req\nnew file mode 100644\nindex 00000000..ecab92e7\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/workflow_post_with_body.req\n@@ -0,0 +1,11 @@\n+POST /plone/folder/@workflow/publish HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "comment": "Publishing my folder...",\n+    "effective": "2018-01-21T08:00:00",\n+    "expires": "2019-01-21T08:00:00",\n+    "include_children": true\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/workflow_post_with_body.resp b/src/plone/restapi/tests/http-examples/workflow_post_with_body.resp\nnew file mode 100644\nindex 00000000..1f3582d7\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/workflow_post_with_body.resp\n@@ -0,0 +1,11 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "action": "publish", \n+  "actor": "admin", \n+  "comments": "Publishing my folder...", \n+  "review_state": "published", \n+  "time": "2016-10-21T19:05:00+00:00", \n+  "title": "Published with accent \\u00e9"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/robot/test.robot b/src/plone/restapi/tests/robot/test.robot\nindex f4bbd4b1..9313a7d5 100644\n--- a/src/plone/restapi/tests/robot/test.robot\n+++ b/src/plone/restapi/tests/robot/test.robot\n@@ -13,10 +13,10 @@ ${BROWSER} =  firefox\n \n Plone site\n     [Tags]  start\n-    Go to  http://localhost:55001/plone/\n+    Go to  ${PLONE_URL}\n     Page should contain  Plone site\n \n *** Keywords ***\n \n Start browser\n-    Open browser  http://localhost:55001/plone/  browser=${BROWSER}\n+    Open browser  ${PLONE_URL}  browser=${BROWSER}\ndiff --git a/src/plone/restapi/tests/test_atcontent_deserializer.py b/src/plone/restapi/tests/test_atcontent_deserializer.py\nindex a97f3cbd..56e74894 100644\n--- a/src/plone/restapi/tests/test_atcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_deserializer.py\n@@ -45,12 +45,13 @@ def setUp(self):\n                 title=\'Test doc \' + str(x)\n             )\n \n-    def deserialize(self, body=\'{}\', validate_all=False, context=None):\n+    def deserialize(self, body=\'{}\', validate_all=False, create=False,\n+                    context=None):\n         context = context or self.doc1\n         self.request[\'BODY\'] = body\n         deserializer = getMultiAdapter((context, self.request),\n                                        IDeserializeFromJson)\n-        return deserializer(validate_all=validate_all)\n+        return deserializer(validate_all=validate_all, create=create)\n \n     def test_deserializer_ignores_readonly_fields(self):\n         self.doc1.getField(\'testReadonlyField\').set(self.doc1, \'Readonly\')\n@@ -70,7 +71,7 @@ def test_deserializer_validates_content(self):\n \n     def test_deserializer_clears_creation_flag(self):\n         self.doc1.markCreationFlag()\n-        self.deserialize(body=\'{"testStringField": "Updated"}\')\n+        self.deserialize(body=\'{"testStringField": "Updated"}\', create=True)\n         self.assertFalse(self.doc1.checkCreationFlag(),\n                          \'Creation flag not cleared\')\n \ndiff --git a/src/plone/restapi/tests/test_atcontent_serializer.py b/src/plone/restapi/tests/test_atcontent_serializer.py\nindex 7c08f08a..e3791311 100644\n--- a/src/plone/restapi/tests/test_atcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_serializer.py\n@@ -6,6 +6,7 @@\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.tests.test_expansion import ExpandableElementFoo\n+from zope.component import getGlobalSiteManager\n from zope.component import getMultiAdapter\n from zope.component import provideAdapter\n from zope.interface import Interface\n@@ -165,6 +166,12 @@ def test_serializer_includes_expansion(self):\n         obj = self.serialize(self.doc1)\n         self.assertIn(\'foo\', obj[\'@components\'])\n         self.assertEqual(\'collapsed\', obj[\'@components\'][\'foo\'])\n+        gsm = getGlobalSiteManager()\n+        gsm.unregisterAdapter(\n+            ExpandableElementFoo,\n+            (Interface, IBrowserRequest),\n+            IExpandableElement,\n+            \'foo\')\n \n     def test_get_is_folderish_in_folder(self):\n         self.portal.invokeFactory(\'Folder\', id=u\'folder\')\ndiff --git a/src/plone/restapi/tests/test_atfield_serializer.py b/src/plone/restapi/tests/test_atfield_serializer.py\nindex 79318660..da1b23ad 100644\n--- a/src/plone/restapi/tests/test_atfield_serializer.py\n+++ b/src/plone/restapi/tests/test_atfield_serializer.py\n@@ -1,14 +1,22 @@\n # -*- coding: utf-8 -*-\n from DateTime import DateTime\n-from plone.app.testing import TEST_USER_ID\n+from mock import patch\n from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from plone.restapi.interfaces import IFieldSerializer\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n+from plone.restapi.testing import PLONE_VERSION\n+from plone.scale import storage\n from zope.component import getMultiAdapter\n \n import os\n import unittest\n \n+if PLONE_VERSION.base_version >= \'5.1\':\n+    GIF_SCALE_FORMAT = \'png\'\n+else:\n+    GIF_SCALE_FORMAT = \'jpeg\'\n+\n \n class TestATFieldSerializer(unittest.TestCase):\n \n@@ -95,52 +103,55 @@ def test_image_field_serialization_returns_dict(self):\n         image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n         image_data = open(image_file, \'rb\').read()\n         fn = \'testImageField\'\n-        value = self.serialize(fn, image_data,\n-                               filename=\'1024x768.gif\', mimetype=\'image/gif\')\n-        self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n+        with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n+            value = self.serialize(\n+                fn, image_data, filename=\'1024x768.gif\', mimetype=\'image/gif\')\n+            self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n \n-        self.maxDiff = 99999\n-        obj_url = self.doc1.absolute_url()\n-        download_url = u\'{}/@@images/{}\'.format(obj_url, fn)\n-        scales = {\n-            u\'listing\': {\n-                u\'download\': u\'{}/@@images/{}/listing\'.format(obj_url, fn),\n-                u\'width\': 16,\n-                u\'height\': 12},\n-            u\'icon\': {\n-                u\'download\': u\'{}/@@images/{}/icon\'.format(obj_url, fn),\n-                u\'width\': 32,\n-                u\'height\': 24},\n-            u\'tile\': {\n-                u\'download\': u\'{}/@@images/{}/tile\'.format(obj_url, fn),\n-                u\'width\': 64,\n-                u\'height\': 48},\n-            u\'thumb\': {\n-                u\'download\': u\'{}/@@images/{}/thumb\'.format(obj_url, fn),\n-                u\'width\': 128,\n-                u\'height\': 96},\n-            u\'mini\': {\n-                u\'download\': u\'{}/@@images/{}/mini\'.format(obj_url, fn),\n-                u\'width\': 200,\n-                u\'height\': 150},\n-            u\'preview\': {\n-                u\'download\': u\'{}/@@images/{}/preview\'.format(obj_url, fn),\n-                u\'width\': 400,\n-                u\'height\': 300},\n-            u\'large\': {\n-                u\'download\': u\'{}/@@images/{}/large\'.format(obj_url, fn),\n-                u\'width\': 768,\n-                u\'height\': 576},\n-        }\n-        self.assertEqual(\n-            {u\'filename\': u\'1024x768.gif\',\n-             u\'content-type\': u\'image/gif\',\n-             u\'size\': 1514,\n-             u\'download\': download_url,\n-             u\'width\': 1024,\n-             u\'height\': 768,\n-             u\'scales\': scales},\n-            value)\n+            self.maxDiff = 99999\n+            obj_url = self.doc1.absolute_url()\n+            scale_url_uuid = \'uuid_1\'\n+            download_url = u\'{}/@@images/{}.{}\'.format(\n+                obj_url, scale_url_uuid, GIF_SCALE_FORMAT)\n+            scales = {\n+                u\'listing\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 16,\n+                    u\'height\': 12},\n+                u\'icon\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 32,\n+                    u\'height\': 24},\n+                u\'tile\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 64,\n+                    u\'height\': 48},\n+                u\'thumb\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 80,\n+                    u\'height\': 60},\n+                u\'mini\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 200,\n+                    u\'height\': 150},\n+                u\'preview\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 400,\n+                    u\'height\': 300},\n+                u\'large\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 768,\n+                    u\'height\': 576},\n+            }\n+            self.assertEqual({\n+                u\'filename\': u\'1024x768.gif\',\n+                u\'content-type\': u\'image/gif\',\n+                u\'size\': 1514,\n+                u\'download\': download_url,\n+                u\'width\': 1024,\n+                u\'height\': 768,\n+                u\'scales\': scales},\n+                value)\n \n     def test_blob_field_serialization_returns_dict(self):\n         value = self.serialize(\'testBlobField\', \'spam and eggs\',\n@@ -171,51 +182,53 @@ def test_blobimage_field_serialization_returns_dict(self):\n         image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n         image_data = open(image_file, \'rb\').read()\n         fn = \'testBlobImageField\'\n-        value = self.serialize(fn, image_data,\n-                               filename=\'1024x768.gif\', mimetype=\'image/gif\')\n-        self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n-\n-        obj_url = self.doc1.absolute_url()\n-        download_url = u\'{}/@@images/{}\'.format(obj_url, fn)\n-        scales = {\n-            u\'listing\': {\n-                u\'download\': u\'{}/@@images/{}/listing\'.format(obj_url, fn),\n-                u\'width\': 16,\n-                u\'height\': 12},\n-            u\'icon\': {\n-                u\'download\': u\'{}/@@images/{}/icon\'.format(obj_url, fn),\n-                u\'width\': 32,\n-                u\'height\': 24},\n-            u\'tile\': {\n-                u\'download\': u\'{}/@@images/{}/tile\'.format(obj_url, fn),\n-                u\'width\': 64,\n-                u\'height\': 48},\n-            u\'thumb\': {\n-                u\'download\': u\'{}/@@images/{}/thumb\'.format(obj_url, fn),\n-                u\'width\': 128,\n-                u\'height\': 96},\n-            u\'mini\': {\n-                u\'download\': u\'{}/@@images/{}/mini\'.format(obj_url, fn),\n-                u\'width\': 200,\n-                u\'height\': 150},\n-            u\'preview\': {\n-                u\'download\': u\'{}/@@images/{}/preview\'.format(obj_url, fn),\n-                u\'width\': 400,\n-                u\'height\': 300},\n-            u\'large\': {\n-                u\'download\': u\'{}/@@images/{}/large\'.format(obj_url, fn),\n-                u\'width\': 768,\n-                u\'height\': 576},\n-        }\n-        self.assertEqual(\n-            {u\'filename\': u\'1024x768.gif\',\n-             u\'content-type\': u\'image/gif\',\n-             u\'size\': 1514,\n-             u\'download\': download_url,\n-             u\'width\': 1024,\n-             u\'height\': 768,\n-             u\'scales\': scales},\n-            value)\n+        with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n+            value = self.serialize(\n+                fn, image_data, filename=\'1024x768.gif\', mimetype=\'image/gif\')\n+            self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n+            scale_url_uuid = \'uuid_1\'\n+            obj_url = self.doc1.absolute_url()\n+            download_url = u\'{}/@@images/{}.{}\'.format(\n+                obj_url, scale_url_uuid, GIF_SCALE_FORMAT)\n+            scales = {\n+                u\'listing\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 16,\n+                    u\'height\': 12},\n+                u\'icon\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 32,\n+                    u\'height\': 24},\n+                u\'tile\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 64,\n+                    u\'height\': 48},\n+                u\'thumb\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 128,\n+                    u\'height\': 96},\n+                u\'mini\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 200,\n+                    u\'height\': 150},\n+                u\'preview\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 400,\n+                    u\'height\': 300},\n+                u\'large\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 768,\n+                    u\'height\': 576},\n+            }\n+            self.assertEqual({\n+                u\'filename\': u\'1024x768.gif\',\n+                u\'content-type\': u\'image/gif\',\n+                u\'size\': 1514,\n+                u\'download\': download_url,\n+                u\'width\': 1024,\n+                u\'height\': 768,\n+                u\'scales\': scales},\n+                value)\n \n     def test_query_field_serialization_returns_list(self):\n         query_data = [\ndiff --git a/src/plone/restapi/tests/test_batching.py b/src/plone/restapi/tests/test_batching.py\nindex 853c4110..e3f11654 100644\n--- a/src/plone/restapi/tests/test_batching.py\n+++ b/src/plone/restapi/tests/test_batching.py\n@@ -268,7 +268,7 @@ def test_contains_canonical_url(self):\n         # Response should contain canonical URL without batching params\n         self.assertEqual(\n             response.json()[\'@id\'],\n-            u\'http://localhost:55001/plone/\')\n+            self.portal_url + u\'/\')\n \n     def test_contains_batching_links(self):\n         # Fetch the second page of the batch\ndiff --git a/src/plone/restapi/tests/test_behaviors.py b/src/plone/restapi/tests/test_behaviors.py\nnew file mode 100644\nindex 00000000..382c86a0\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_behaviors.py\n@@ -0,0 +1,56 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.testing import login\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n+from plone.dexterity.fti import DexterityFTI\n+from plone.restapi.behaviors import ITiles\n+from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+from zope.interface import alsoProvides\n+\n+import unittest\n+\n+\n+class TestTilesBehavior(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n+        login(self.portal, TEST_USER_NAME)\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        fti = DexterityFTI(\'tiledfolder\')\n+        self.portal.portal_types._setObject(\'tiledfolder\', fti)\n+        fti.klass = \'plone.dexterity.content.Container\'\n+        fti.behaviors = (\n+            \'plone.tiles\',\n+        )\n+        self.fti = fti\n+        alsoProvides(self.request, ITiles)\n+\n+    def test_basic_fields(self):\n+        self.portal.invokeFactory(\n+            \'tiledfolder\',\n+            id=\'tiledfolder\',\n+            title=u\'Folder with tiles\'\n+        )\n+\n+        self.portal[\'tiledfolder\'].tiles = {\n+            \'uuid1\': {\'@type\': \'title\'},\n+            \'uuid2\': {\'@type\': \'description\'}\n+        }\n+\n+        self.portal[\'tiledfolder\'].tiles_layout = {\n+            \'uuid1\': {\'@type\': \'title\'},\n+            \'uuid2\': {\'@type\': \'description\'}\n+        }\n+\n+    def test_behavior_provides(self):\n+        self.portal.invokeFactory(\n+            \'tiledfolder\',\n+            id=\'tiledfolder\',\n+            title=u\'Folder with tiles\'\n+        )\n+\n+        ITiles.providedBy(self.portal[\'tiledfolder\'])\ndiff --git a/src/plone/restapi/tests/test_content_get.py b/src/plone/restapi/tests/test_content_get.py\nindex 0bdcaa3d..21daeaf1 100644\n--- a/src/plone/restapi/tests/test_content_get.py\n+++ b/src/plone/restapi/tests/test_content_get.py\n@@ -23,6 +23,7 @@ class TestContentGet(unittest.TestCase):\n     def setUp(self):\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n         setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n         login(self.portal, SITE_OWNER_NAME)\n         self.portal.invokeFactory(\n@@ -120,7 +121,7 @@ def test_get_content_returns_fullobjects_correct_id(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(3, len(response.json()[\'items\']))\n         self.assertEqual(response.json()[\'items\'][1][\'@id\'],\n-                         \'http://localhost:55001/plone/folder1/folder2\')\n+                         self.portal_url + u\'/folder1/folder2\')\n \n     def test_get_content_returns_fullobjects_non_recursive(self):\n         response = requests.get(\n@@ -154,7 +155,7 @@ def test_get_content_includes_related_items(self):\n         self.assertEqual(1, len(response.json()[\'relatedItems\']))\n         self.assertEqual(\n             [{\n-                u\'@id\': u\'http://localhost:55001/plone/folder1/folder2/doc2\',\n+                u\'@id\': self.portal_url + u\'/folder1/folder2/doc2\',\n                 u\'@type\': u\'Document\',\n                 u\'description\': u\'\',\n                 u\'review_state\': u\'published\',\ndiff --git a/src/plone/restapi/tests/test_content_local_roles.py b/src/plone/restapi/tests/test_content_local_roles.py\nindex bede17f4..f0fd0914 100644\n--- a/src/plone/restapi/tests/test_content_local_roles.py\n+++ b/src/plone/restapi/tests/test_content_local_roles.py\n@@ -114,6 +114,21 @@ def test_sharing_search_roundtrip(self):\n         roles = roles[0][\'roles\']\n         self.assertEqual(new_roles, roles)\n \n+    def test_sharing_titles_are_translated(self):\n+        response = requests.get(\n+            self.portal.folder1.absolute_url() + \'/@sharing\',\n+            headers={\'Accept\': \'application/json\',\n+                     \'Accept-Language\': \'de\'},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+        )\n+        available_roles = response.json()[\'available_roles\']\n+        self.assertEqual([\n+            {u\'id\': u\'Contributor\', u\'title\': u\'Kann hinzuf\\xfcgen\'},\n+            {u\'id\': u\'Editor\', u\'title\': u\'Kann bearbeiten\'},\n+            {u\'id\': u\'Reader\', u\'title\': u\'Kann ansehen\'},\n+            {u\'id\': u\'Reviewer\', u\'title\': u\'Kann ver\\xf6ffentlichen\'}],\n+            available_roles)\n+\n     def test_sharing_requires_delegate_roles_permission(self):\n         \'\'\'A response for an object without any roles assigned\'\'\'\n         response = requests.get(\n@@ -134,7 +149,11 @@ def test_get_local_roles_none_assigned(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n             response.json(),\n-            {u\'available_roles\': [u\'Contributor\', u\'Editor\', u\'Reviewer\', u\'Reader\'],  # noqa\n+            {u\'available_roles\': [\n+                {u\'id\': u\'Contributor\', u\'title\': u\'Can add\'},\n+                {u\'id\': u\'Editor\', u\'title\': u\'Can edit\'},\n+                {u\'id\': u\'Reader\', u\'title\': u\'Can view\'},\n+                {u\'id\': u\'Reviewer\', u\'title\': u\'Can review\'}],\n              u\'entries\': [{\n                  u\'disabled\': False,\n                  u\'id\': u\'AuthenticatedUsers\',\n@@ -163,7 +182,11 @@ def test_get_local_roles_with_user(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n             response.json(),\n-            {u\'available_roles\': [u\'Contributor\', u\'Editor\', u\'Reviewer\', u\'Reader\'],  # noqa\n+            {u\'available_roles\': [\n+                {u\'id\': u\'Contributor\', u\'title\': u\'Can add\'},\n+                {u\'id\': u\'Editor\', u\'title\': u\'Can edit\'},\n+                {u\'id\': u\'Reader\', u\'title\': u\'Can view\'},\n+                {u\'id\': u\'Reviewer\', u\'title\': u\'Can review\'}],\n              u\'entries\': [\n                 {\n                     u\'disabled\': False,\n@@ -320,7 +343,8 @@ def test_get_available_roles(self):\n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n         self.assertIn(\'available_roles\', response)\n-        self.assertIn(\'Reader\', response[\'available_roles\'])\n+        self.assertIn({\'id\': \'Reader\', \'title\': \'Can view\'},\n+                      response[\'available_roles\'])\n \n     def test_inherited_global(self):\n         api.user.grant_roles(username=TEST_USER_ID, roles=[\'Reviewer\'])\ndiff --git a/src/plone/restapi/tests/test_content_patch.py b/src/plone/restapi/tests/test_content_patch.py\nindex a4adbb71..39aecd66 100644\n--- a/src/plone/restapi/tests/test_content_patch.py\n+++ b/src/plone/restapi/tests/test_content_patch.py\n@@ -1,14 +1,20 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFCore.PortalContent import PortalContent\n-from Products.CMFCore.utils import getToolByName\n+from OFS.interfaces import IObjectWillBeAddedEvent\n+from plone.app.testing import login\n+from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n-from plone.app.testing import login\n-from plone.app.testing import setRoles\n+from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+from Products.CMFCore.PortalContent import PortalContent\n+from Products.CMFCore.utils import getToolByName\n+from zope.component import getGlobalSiteManager\n+from zope.lifecycleevent.interfaces import IObjectAddedEvent\n+from zope.lifecycleevent.interfaces import IObjectCreatedEvent\n+from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n \n import requests\n import transaction\n@@ -162,3 +168,100 @@ def test_patch_image_with_the_contents_of_the_get_preserves_image(self):\n         self.assertTrue(response.json()[\'image\'])\n         self.assertIn(\'content-type\', response.json()[\'image\'])\n         self.assertIn(\'download\', response.json()[\'image\'])\n+\n+    def test_patch_document_fires_proper_events(self):\n+        sm = getGlobalSiteManager()\n+        fired_events = []\n+\n+        def record_event(event):\n+            fired_events.append(event.__class__.__name__)\n+\n+        sm.registerHandler(record_event, (IObjectCreatedEvent,))\n+        sm.registerHandler(record_event, (IObjectWillBeAddedEvent,))\n+        sm.registerHandler(record_event, (IObjectAddedEvent,))\n+        sm.registerHandler(record_event, (IObjectModifiedEvent,))\n+\n+        requests.patch(\n+            self.portal.doc1.absolute_url(),\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            json={\n+                "description": "123",\n+            },\n+        )\n+\n+        self.assertEqual(\n+            fired_events,\n+            [\n+                \'ObjectModifiedEvent\',\n+            ])\n+\n+        sm.unregisterHandler(record_event, (IObjectCreatedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectWillBeAddedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectAddedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectModifiedEvent,))\n+\n+\n+class TestATContentPatch(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer[\'app\']\n+        self.portal = self.layer[\'portal\']\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        login(self.portal, TEST_USER_NAME)\n+        self.portal.portal_repository._versionable_content_types = []\n+        self.portal.invokeFactory(\n+            \'Document\',\n+            id=\'doc1\',\n+            title=\'My Document\',\n+            description=\'Some Description\'\n+        )\n+        self.portal.doc1.unmarkCreationFlag()\n+        transaction.commit()\n+\n+    def test_patch_reindexes_document(self):\n+        requests.patch(\n+            self.portal.doc1.absolute_url(),\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(TEST_USER_NAME, TEST_USER_PASSWORD),\n+            json={\n+                "description": "Foo Bar",\n+            },\n+        )\n+        transaction.begin()\n+        brain = self.portal.portal_catalog(UID=self.portal.doc1.UID())[0]\n+        self.assertEqual(brain.Description, \'Foo Bar\')\n+\n+    def test_patch_document_fires_proper_events(self):\n+        sm = getGlobalSiteManager()\n+        fired_events = []\n+\n+        def record_event(event):\n+            fired_events.append(event.__class__.__name__)\n+\n+        sm.registerHandler(record_event, (IObjectCreatedEvent,))\n+        sm.registerHandler(record_event, (IObjectWillBeAddedEvent,))\n+        sm.registerHandler(record_event, (IObjectAddedEvent,))\n+        sm.registerHandler(record_event, (IObjectModifiedEvent,))\n+\n+        requests.patch(\n+            self.portal.doc1.absolute_url(),\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(TEST_USER_NAME, TEST_USER_PASSWORD),\n+            json={\n+                "description": "123",\n+            },\n+        )\n+\n+        self.assertEqual(\n+            fired_events,\n+            [\n+                \'ObjectEditedEvent\',\n+            ])\n+\n+        sm.unregisterHandler(record_event, (IObjectCreatedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectWillBeAddedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectAddedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectModifiedEvent,))\ndiff --git a/src/plone/restapi/tests/test_content_post.py b/src/plone/restapi/tests/test_content_post.py\nindex 7edab292..f5572bce 100644\n--- a/src/plone/restapi/tests/test_content_post.py\n+++ b/src/plone/restapi/tests/test_content_post.py\n@@ -1,14 +1,19 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFCore.utils import getToolByName\n+from OFS.interfaces import IObjectWillBeAddedEvent\n+from plone.app.testing import login\n+from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n-from plone.app.testing import login\n-from plone.app.testing import setRoles\n-from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n+from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+from Products.CMFCore.utils import getToolByName\n+from zope.component import getGlobalSiteManager\n+from zope.lifecycleevent.interfaces import IObjectAddedEvent\n+from zope.lifecycleevent.interfaces import IObjectCreatedEvent\n+from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n \n import requests\n import transaction\n@@ -22,6 +27,7 @@ class TestFolderCreate(unittest.TestCase):\n     def setUp(self):\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n         setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n         login(self.portal, SITE_OWNER_NAME)\n         self.portal.invokeFactory(\n@@ -51,7 +57,7 @@ def test_post_to_folder_creates_document(self):\n         self.assertEqual("mydocument", response.json().get(\'id\'))\n         self.assertEqual("My Document", response.json().get(\'title\'))\n \n-        expected_url = "http://localhost:55001/plone/folder1/mydocument"\n+        expected_url = self.portal_url + u"/folder1/mydocument"\n         self.assertEqual(expected_url, response.json().get(\'@id\'))\n \n     def test_post_to_folder_creates_folder(self):\n@@ -72,7 +78,7 @@ def test_post_to_folder_creates_folder(self):\n         self.assertEqual("myfolder", response.json().get(\'id\'))\n         self.assertEqual("My Folder", response.json().get(\'title\'))\n \n-        expected_url = "http://localhost:55001/plone/folder1/myfolder"\n+        expected_url = self.portal_url + u"/folder1/myfolder"\n         self.assertEqual(expected_url, response.json().get(\'@id\'))\n \n     def test_post_without_type_returns_400(self):\n@@ -149,8 +155,62 @@ def test_post_to_folder_returns_401_unauthorized(self):\n         )\n         self.assertEqual(401, response.status_code)\n \n+    def test_post_to_folder_without_add_permission_returns_403_forbidden(self):\n+        self.portal.folder1.manage_permission(\n+            \'plone.app.contenttypes: Add Document\', [], acquire=False)\n+        transaction.commit()\n+        response = requests.post(\n+            self.portal.folder1.absolute_url(),\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            json={\n+                "@type": "Document",\n+                "id": "mydocument",\n+                "title": "My Document",\n+            },\n+        )\n+        self.assertEqual(403, response.status_code)\n+\n+    def test_post_to_folder_fires_proper_events(self):\n+        sm = getGlobalSiteManager()\n+        fired_events = []\n+\n+        def record_event(event):\n+            fired_events.append(event.__class__.__name__)\n+\n+        sm.registerHandler(record_event, (IObjectCreatedEvent,))\n+        sm.registerHandler(record_event, (IObjectWillBeAddedEvent,))\n+        sm.registerHandler(record_event, (IObjectAddedEvent,))\n+        sm.registerHandler(record_event, (IObjectModifiedEvent,))\n+\n+        requests.post(\n+            self.portal.folder1.absolute_url(),\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            json={\n+                "@type": "Document",\n+                "id": "mydocument",\n+                "title": "My Document",\n+                "description": "123",\n+            },\n+        )\n+\n+        self.assertEqual(\n+            fired_events,\n+            [\n+                \'ObjectCreatedEvent\',\n+                \'ObjectWillBeAddedEvent\',\n+                \'ObjectAddedEvent\',\n+                \'ContainerModifiedEvent\',\n+            ])\n \n-class TestFolderCreateAT(unittest.TestCase):\n+        sm.unregisterHandler(record_event, (IObjectCreatedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectWillBeAddedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectAddedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectModifiedEvent,))\n+\n+\n+class TestATFolderCreate(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n@@ -196,3 +256,55 @@ def test_id_from_filename(self):\n         self.assertEqual(201, response.status_code)\n         transaction.begin()\n         self.assertIn(\'test.txt\', self.portal.folder1)\n+\n+    def test_post_with_id_already_in_use_returns_400(self):\n+        self.portal.folder1.invokeFactory(\'Document\', \'mydocument\')\n+        transaction.commit()\n+        response = requests.post(\n+            self.portal.folder1.absolute_url(),\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(TEST_USER_NAME, TEST_USER_PASSWORD),\n+            json={\n+                "@type": "Document",\n+                "id": "mydocument",\n+                "title": "My Document",\n+            },\n+        )\n+        self.assertEqual(400, response.status_code)\n+\n+    def test_post_to_folder_fires_proper_events(self):\n+        sm = getGlobalSiteManager()\n+        fired_events = []\n+\n+        def record_event(event):\n+            fired_events.append(event.__class__.__name__)\n+\n+        sm.registerHandler(record_event, (IObjectCreatedEvent,))\n+        sm.registerHandler(record_event, (IObjectWillBeAddedEvent,))\n+        sm.registerHandler(record_event, (IObjectAddedEvent,))\n+        sm.registerHandler(record_event, (IObjectModifiedEvent,))\n+\n+        requests.post(\n+            self.portal.folder1.absolute_url(),\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            json={\n+                "@type": "Document",\n+                "id": "mydocument",\n+                "title": "My Document",\n+                "description": "123",\n+            },\n+        )\n+\n+        self.assertEqual(\n+            fired_events,\n+            [\n+                \'ObjectInitializedEvent\',\n+                \'ObjectAddedEvent\',\n+                \'ContainerModifiedEvent\',\n+            ])\n+\n+        sm.unregisterHandler(record_event, (IObjectCreatedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectWillBeAddedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectAddedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectModifiedEvent,))\ndiff --git a/src/plone/restapi/tests/test_content_utils.py b/src/plone/restapi/tests/test_content_utils.py\nnew file mode 100644\nindex 00000000..898294b9\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_content_utils.py\n@@ -0,0 +1,174 @@\n+# -*- coding: utf-8 -*-\n+from Acquisition import aq_parent\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.restapi.services.content.utils import add\n+from plone.restapi.services.content.utils import create\n+from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n+from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+from Products.CMFPlone.interfaces import ISelectableConstrainTypes\n+from zExceptions import Unauthorized\n+from zope.component import getGlobalSiteManager\n+from zope.event import notify\n+from zope.lifecycleevent import ObjectCreatedEvent\n+from zope.lifecycleevent.interfaces import IObjectAddedEvent\n+\n+import unittest\n+\n+\n+class TestCreateContent(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n+\n+        self.folder = self.portal[self.portal.invokeFactory(\n+            \'Folder\', id=\'folder\', title=\'My Folder\'\n+        )]\n+\n+    def test_create_content_with_provided_id(self):\n+        obj = create(self.folder, \'Document\', \'my-document\')\n+        self.assertEqual(obj.portal_type, \'Document\')\n+        self.assertEqual(obj.getId(), \'my-document\')\n+\n+    def test_create_content_without_provided_id(self):\n+        obj = create(self.folder, \'Document\')\n+        self.assertEqual(obj.portal_type, \'Document\')\n+        self.assertTrue(obj.getId().startswith(\'document.\'))\n+\n+    def test_create_content_without_add_permission_raises_unauthorized(self):\n+        self.folder.manage_permission(\n+            \'plone.app.contenttypes: Add Document\', [], acquire=False)\n+        with self.assertRaises(Unauthorized):\n+            create(self.folder, \'Document\', \'my-document\')\n+\n+    def test_create_of_disallowed_content_type_raises_unauthorized(self):\n+        self.portal.portal_types.Folder.filter_content_types = True\n+        self.portal.portal_types.Folder.allowed_content_types = ()\n+        with self.assertRaises(Unauthorized):\n+            create(self.folder, \'Document\', \'my-document\')\n+\n+    def test_create_of_constrained_content_type_raises_unauthorized(self):\n+        constrains = ISelectableConstrainTypes(self.folder)\n+        constrains.setConstrainTypesMode(1)\n+        constrains.setLocallyAllowedTypes([\'File\'])\n+        with self.assertRaises(Unauthorized):\n+            create(self.folder, \'Document\', \'my-document\')\n+\n+\n+class TestATCreateContent(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n+        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+\n+        self.folder = self.portal[self.portal.invokeFactory(\n+            \'Folder\', id=\'folder\', title=\'My Folder\'\n+        )]\n+\n+    def test_create_content_with_provided_id(self):\n+        obj = create(self.folder, \'Document\', \'my-document\')\n+        self.assertEqual(obj.portal_type, \'Document\')\n+        self.assertEqual(obj.getId(), \'my-document\')\n+\n+    def test_create_content_without_provided_id(self):\n+        obj = create(self.folder, \'Document\')\n+        self.assertEqual(obj.portal_type, \'Document\')\n+        self.assertTrue(obj.getId().startswith(\'document.\'))\n+\n+    def test_create_content_without_add_permission_raises_unauthorized(self):\n+        self.folder.manage_permission(\n+            \'ATContentTypes: Add Document\', [], acquire=False)\n+        with self.assertRaises(Unauthorized):\n+            create(self.folder, \'Document\', \'my-document\')\n+\n+    def test_create_of_disallowed_content_type_raises_unauthorized(self):\n+        self.portal.portal_types.Folder.filter_content_types = True\n+        self.portal.portal_types.Folder.allowed_content_types = ()\n+        with self.assertRaises(Unauthorized):\n+            create(self.folder, \'Document\', \'my-document\')\n+\n+    def test_create_of_constrained_content_type_raises_unauthorized(self):\n+        constrains = ISelectableConstrainTypes(self.folder)\n+        constrains.setConstrainTypesMode(1)\n+        constrains.setLocallyAllowedTypes([\'File\'])\n+        with self.assertRaises(Unauthorized):\n+            create(self.folder, \'Document\', \'my-document\')\n+\n+\n+class TestAddContent(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n+\n+        self.folder = self.portal[self.portal.invokeFactory(\n+            \'Folder\', id=\'folder\', title=\'My Folder\'\n+        )]\n+\n+    def test_add_content_to_container(self):\n+        obj = create(self.folder, \'Document\', \'my-document\')\n+        obj = add(self.folder, obj)\n+        self.assertEqual(aq_parent(obj), self.folder)\n+\n+    def test_add_content_to_container_renames_id(self):\n+        obj = create(self.folder, \'Document\', title=\'My Document\')\n+        obj = add(self.folder, obj)\n+        self.assertEqual(obj.getId(), \'my-document\')\n+\n+    def test_add_content_to_container_keeps_id(self):\n+        obj = create(self.folder, \'Document\', \'doc-1\', \'My Document\')\n+        obj = add(self.folder, obj, rename=False)\n+        self.assertEqual(obj.getId(), \'doc-1\')\n+\n+    def test_add_content_to_container_and_move_on_added_event(self):\n+        sm = getGlobalSiteManager()\n+\n+        def move_object(event):\n+            self.portal.manage_pasteObjects(\n+                cb_copy_data=self.folder.manage_cutObjects(\n+                    ids=[\'my-document\']))\n+        sm.registerHandler(move_object, (IObjectAddedEvent,))\n+\n+        obj = create(self.folder, \'Document\', \'my-document\')\n+        notify(ObjectCreatedEvent(obj))\n+        obj = add(self.folder, obj)\n+        self.assertEqual(aq_parent(obj), self.portal)\n+\n+        sm.unregisterHandler(move_object, (IObjectAddedEvent,))\n+\n+\n+class TestATAddContent(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n+        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+\n+        self.folder = self.portal[self.portal.invokeFactory(\n+            \'Folder\', id=\'folder\', title=\'My Folder\'\n+        )]\n+\n+    def test_add_content_to_container(self):\n+        obj = create(self.folder, \'Document\', \'my-document\')\n+        obj = add(self.folder, obj)\n+        self.assertEqual(aq_parent(obj), self.folder)\n+\n+    def test_add_content_to_container_renames_id(self):\n+        obj = create(self.folder, \'Document\', title=\'My Document\')\n+        obj = add(self.folder, obj)\n+        self.assertEqual(obj.getId(), \'my-document\')\n+\n+    def test_add_content_to_container_keeps_id(self):\n+        obj = create(self.folder, \'Document\', \'doc-1\', \'My Document\')\n+        obj = add(self.folder, obj, rename=False)\n+        self.assertEqual(obj.getId(), \'doc-1\')\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex a0b0e9bb..14c33207 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -4,7 +4,9 @@\n from DateTime import DateTime\n from datetime import timedelta\n from freezegun import freeze_time\n+from mock import patch\n from pkg_resources import parse_version\n+from pkg_resources import resource_filename\n from plone import api\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IDiscussionSettings\n@@ -23,10 +25,11 @@\n from plone.namedfile.file import NamedBlobImage\n from plone.registry.interfaces import IRegistry\n from plone.restapi.testing import PAM_INSTALLED\n-from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n-from plone.restapi.testing import PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n+from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING_FREEZETIME  # noqa\n+from plone.restapi.testing import PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING_FREEZETIME  # noqa\n from plone.restapi.testing import register_static_uuid_utility\n from plone.restapi.testing import RelativeSession\n+from plone.scale import storage\n from plone.testing.z2 import Browser\n from zope.component import createObject\n from zope.component import getUtility\n@@ -57,6 +60,7 @@\n \n REQUEST_HEADER_KEYS = [\n     \'accept\',\n+    \'accept-language\',\n     \'authorization\',\n     \'lock-token\',\n     \'prefer\',\n@@ -68,14 +72,8 @@\n     \'location\',\n ] + TUS_HEADERS\n \n-base_path = os.path.join(\n-    os.path.dirname(__file__),\n-    \'..\',\n-    \'..\',\n-    \'..\',\n-    \'..\',\n-    \'docs/source/_json\'\n-)\n+\n+base_path = resource_filename(\'plone.restapi.tests\', \'http-examples\')\n \n UPLOAD_DATA = \'abcdefgh\'\n UPLOAD_MIMETYPE = \'text/plain\'\n@@ -142,11 +140,9 @@ def save_request_and_response_for_docs(name, response):\n \n class TestDocumentation(unittest.TestCase):\n \n-    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING_FREEZETIME\n \n     def setUp(self):\n-        if PLONE_VERSION.base_version >= \'5.1\':\n-            self.skipTest(\'Do not run documentation tests for Plone 5\')\n         self.app = self.layer[\'app\']\n         self.request = self.layer[\'request\']\n         self.portal = self.layer[\'portal\']\n@@ -287,8 +283,12 @@ def test_documentation_news_item(self):\n             \'2016-01-21T02:24:11+00:00\')\n         import transaction\n         transaction.commit()\n-        response = self.api_session.get(self.portal.newsitem.absolute_url())\n-        save_request_and_response_for_docs(\'newsitem\', response)\n+\n+        with patch.object(storage, \'uuid4\', return_value=\'uuid1\'):\n+            response = self.api_session.get(\n+                self.portal.newsitem.absolute_url()\n+            )\n+            save_request_and_response_for_docs(\'newsitem\', response)\n \n     def test_documentation_event(self):\n         self.portal.invokeFactory(\'Event\', id=\'event\')\n@@ -352,8 +352,9 @@ def test_documentation_image(self):\n             \'2016-01-21T06:24:11+00:00\')\n         import transaction\n         transaction.commit()\n-        response = self.api_session.get(self.portal.image.absolute_url())\n-        save_request_and_response_for_docs(\'image\', response)\n+        with patch.object(storage, \'uuid4\', return_value=\'uuid1\'):\n+            response = self.api_session.get(self.portal.image.absolute_url())\n+            save_request_and_response_for_docs(\'image\', response)\n \n     def test_documentation_folder(self):\n         folder = self.create_folder()\n@@ -415,6 +416,20 @@ def test_documentation_workflow_transition(self):\n             \'{}/@workflow/publish\'.format(self.document.absolute_url()))\n         save_request_and_response_for_docs(\'workflow_post\', response)\n \n+    def test_documentation_workflow_transition_with_body(self):\n+        self.frozen_time.tick(timedelta(minutes=5))\n+        folder = self.portal[self.portal.invokeFactory(\'Folder\', id=\'folder\')]\n+        transaction.commit()\n+        response = self.api_session.post(\n+            \'{}/@workflow/publish\'.format(folder.absolute_url()),\n+            json={\n+                \'comment\': \'Publishing my folder...\',\n+                \'include_children\': True,\n+                \'effective\': \'2018-01-21T08:00:00\',\n+                \'expires\': \'2019-01-21T08:00:00\',\n+            })\n+        save_request_and_response_for_docs(\'workflow_post_with_body\', response)\n+\n     def test_documentation_registry_get(self):\n         response = self.api_session.get(\n             \'/@registry/plone.app.querystring.field.path.title\')\n@@ -1003,7 +1018,7 @@ def test_documentation_sharing_folder_post(self):\n             "inherit": True,\n             "entries": [\n                 {\n-                    "id": "test_user_1_",\n+                    "id": "AuthenticatedUsers",\n                     "roles": {\n                         "Reviewer": True,\n                         "Editor": False,\n@@ -1238,13 +1253,91 @@ def test_update_with_lock(self):\n         save_request_and_response_for_docs(\'lock_update\', response)\n \n \n+class TestDocumentationMessageTranslations(unittest.TestCase):\n+\n+    layer = layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING_FREEZETIME\n+\n+    def setUp(self):\n+        self.app = self.layer[\'app\']\n+        self.request = self.layer[\'request\']\n+        self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n+\n+        # Register custom UUID generator to produce stable UUIDs during tests\n+        pushGlobalRegistry(getSite())\n+        register_static_uuid_utility(prefix=\'SomeUUID\')\n+\n+        self.time_freezer = freeze_time("2016-10-21 19:00:00")\n+        self.frozen_time = self.time_freezer.start()\n+\n+        self.api_session = RelativeSession(self.portal_url)\n+        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({\'Accept-Language\': \'es\'})\n+        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.document = self.create_document()\n+        alsoProvides(self.document, ITTWLockable)\n+\n+        transaction.commit()\n+        self.browser = Browser(self.app)\n+        self.browser.handleErrors = False\n+        self.browser.addHeader(\n+            \'Authorization\',\n+            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+        )\n+\n+    def create_document(self):\n+        self.portal.invokeFactory(\'Document\', id=\'front-page\')\n+        document = self.portal[\'front-page\']\n+        document.title = u"Welcome to Plone"\n+        document.description = \\\n+            u"Congratulations! You have successfully installed Plone."\n+        document.text = RichTextValue(\n+            u"If you\'re seeing this instead of the web site you were " +\n+            u"expecting, the owner of this web site has just installed " +\n+            u"Plone. Do not contact the Plone Team or the Plone mailing " +\n+            u"lists about this.",\n+            \'text/plain\',\n+            \'text/html\'\n+        )\n+        document.creation_date = DateTime(\'2016-01-21T01:14:48+00:00\')\n+        document.reindexObject()\n+        document.modification_date = DateTime(\'2016-01-21T01:24:11+00:00\')\n+        return document\n+\n+    def tearDown(self):\n+        self.time_freezer.stop()\n+        popGlobalRegistry(getSite())\n+\n+    def test_translate_messages_types(self):\n+        response = self.api_session.get(\'/@types\')\n+        save_request_and_response_for_docs(\n+            \'translated_messages_types\', response)\n+\n+    def test_translate_messages_types_folder(self):\n+        response = self.api_session.get(\'/@types/Folder\')\n+        save_request_and_response_for_docs(\n+            \'translated_messages_types_folder\', response)\n+\n+    def test_translate_messages_object_workflow(self):\n+        response = self.api_session.get(\n+            \'{}/@workflow\'.format(self.document.id))\n+        save_request_and_response_for_docs(\n+            \'translated_messages_object_workflow\', response)\n+\n+    def test_translate_messages_object_history(self):\n+        response = self.api_session.get(\n+            \'{}/@history\'.format(self.document.id))\n+        save_request_and_response_for_docs(\n+            \'translated_messages_object_history\', response)\n+\n+\n class TestCommenting(unittest.TestCase):\n \n-    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING_FREEZETIME\n \n     def setUp(self):\n-        if PLONE_VERSION.base_version >= \'5.1\':\n-            self.skipTest(\'Do not run documentation tests for Plone 5\')\n         self.app = self.layer[\'app\']\n         self.request = self.layer[\'request\']\n         self.portal = self.layer[\'portal\']\n@@ -1418,11 +1511,9 @@ def test_controlpanels_get_item(self):\n @unittest.skipUnless(PAM_INSTALLED, \'plone.app.multilingual is installed by default only in Plone 5\')  # NOQA\n class TestPAMDocumentation(unittest.TestCase):\n \n-    layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n+    layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING_FREEZETIME\n \n     def setUp(self):\n-        if PLONE_VERSION.base_version >= \'5.1\':\n-            self.skipTest(\'Do not run documentation tests for Plone 5\')\n         self.app = self.layer[\'app\']\n         self.request = self.layer[\'request\']\n         self.portal = self.layer[\'portal\']\ndiff --git a/src/plone/restapi/tests/test_dxcontent_serializer.py b/src/plone/restapi/tests/test_dxcontent_serializer.py\nindex 09bef580..3c47496b 100644\n--- a/src/plone/restapi/tests/test_dxcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_serializer.py\n@@ -168,6 +168,12 @@ def test_serializer_includes_expansion(self):\n         obj = self.serialize()\n         self.assertIn(\'foo\', obj[\'@components\'])\n         self.assertEqual(\'collapsed\', obj[\'@components\'][\'foo\'])\n+        gsm = getGlobalSiteManager()\n+        gsm.unregisterAdapter(\n+            ExpandableElementFoo,\n+            (Interface, IBrowserRequest),\n+            IExpandableElement,\n+            \'foo\')\n \n     def test_get_is_folderish(self):\n         obj = self.serialize()\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex 1957e001..d3528ba6 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -13,6 +13,8 @@\n \n from plone.restapi.tests.dxtypes import IDXTestDocumentSchema\n from zope.component import getMultiAdapter\n+from zope.schema.interfaces import ConstraintNotSatisfied\n+from zope.schema import Field\n from zope.schema._bootstrapinterfaces import RequiredMissing\n from zope.schema.interfaces import ValidationError\n \n@@ -376,12 +378,22 @@ def test_datetime_deserializer_validates_value(self):\n     def test_collection_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n             self.deserialize(\'test_list_value_type_field\', [1, \'2\', 3])\n-        self.assertEqual(u\'Wrong contained type\', cm.exception.doc())\n+\n+        # This validation error is actually produced by the\n+        # DefaultFieldDeserializer that the CollectionFieldDeserializer will\n+        # delegate to for deserializing collection items.\n+        self.assertEqual(u\'Object is of wrong type.\', cm.exception.doc())\n+        self.assertEqual((\'2\', (int, long), \'\'), cm.exception.args)\n \n     def test_dict_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n             self.deserialize(\'test_dict_key_type_field\', {\'k\': \'v\'})\n-        self.assertEqual(u\'Wrong contained type\', cm.exception.doc())\n+\n+        # This validation error is actually produced by the\n+        # DefaultFieldDeserializer that the DictFieldSerializer will delegate\n+        # to for deserializing keys and values.\n+        self.assertEqual(u\'Object is of wrong type.\', cm.exception.doc())\n+        self.assertEqual((\'k\', (int, long), \'\'), cm.exception.args)\n \n     def test_time_deserializer_handles_invalid_value(self):\n         with self.assertRaises(ValueError) as cm:\n@@ -451,3 +463,21 @@ def test_deserialize_with_context_bound_vocabulary(self):\n     def test_textline_deserializer_strips_value(self):\n         value = self.deserialize(\'test_textline_field\', u\'  aa  \')\n         self.assertEquals(value, \'aa\')\n+\n+    def test_default_field_deserializer_validates_value(self):\n+\n+        class CustomIntField(Field):\n+\n+            def constraint(self, value):\n+                if not isinstance(value, int):\n+                    raise ConstraintNotSatisfied\n+                return True\n+\n+        field = CustomIntField()\n+        deserializer = getMultiAdapter((field, self.portal.doc1, self.request),\n+                                       IFieldDeserializer)\n+\n+        with self.assertRaises(ConstraintNotSatisfied):\n+            deserializer("not an int")\n+\n+        self.assertEqual(42, deserializer(42))\ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex 741c0550..c86dc8e2 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -3,6 +3,7 @@\n from datetime import datetime\n from datetime import time\n from datetime import timedelta\n+from mock import patch\n from plone.app.textfield.value import RichTextValue\n from plone.dexterity.utils import iterSchemata\n from plone.namedfile.file import NamedBlobFile\n@@ -12,6 +13,8 @@\n from plone.restapi.interfaces import IFieldSerializer\n from plone.restapi.serializer.dxfields import DefaultFieldSerializer\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+from plone.restapi.testing import PLONE_VERSION\n+from plone.scale import storage\n from unittest import TestCase\n from z3c.form.interfaces import IDataManager\n from zope.component import getMultiAdapter\n@@ -19,13 +22,20 @@\n \n import os\n \n+if PLONE_VERSION.base_version >= \'5.1\':\n+    GIF_SCALE_FORMAT = \'png\'\n+else:\n+    GIF_SCALE_FORMAT = \'jpeg\'\n+\n \n class TestDexterityFieldSerializing(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+    maxDiff = None\n \n     def setUp(self):\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n+\n         self.doc1 = self.portal[self.portal.invokeFactory(\n             \'DXTestDocument\',\n             id=\'doc1\',\n@@ -181,53 +191,61 @@ def test_namedimage_field_serialization_returns_dict(self):\n         image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n         image_data = open(image_file, \'rb\').read()\n         fn = \'test_namedimage_field\'\n-        value = self.serialize(\n-            fn,\n-            NamedImage(data=image_data, contentType=u\'image/gif\',\n-                       filename=u\'1024x768.gif\'))\n-        self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n-\n-        obj_url = self.doc1.absolute_url()\n-        download_url = u\'{}/@@images/{}\'.format(obj_url, fn)\n-        scales = {\n-            u\'listing\': {\n-                u\'download\': u\'{}/@@images/{}/listing\'.format(obj_url, fn),\n-                u\'width\': 16,\n-                u\'height\': 12},\n-            u\'icon\': {\n-                u\'download\': u\'{}/@@images/{}/icon\'.format(obj_url, fn),\n-                u\'width\': 32,\n-                u\'height\': 24},\n-            u\'tile\': {\n-                u\'download\': u\'{}/@@images/{}/tile\'.format(obj_url, fn),\n-                u\'width\': 64,\n-                u\'height\': 48},\n-            u\'thumb\': {\n-                u\'download\': u\'{}/@@images/{}/thumb\'.format(obj_url, fn),\n-                u\'width\': 128,\n-                u\'height\': 96},\n-            u\'mini\': {\n-                u\'download\': u\'{}/@@images/{}/mini\'.format(obj_url, fn),\n-                u\'width\': 200,\n-                u\'height\': 150},\n-            u\'preview\': {\n-                u\'download\': u\'{}/@@images/{}/preview\'.format(obj_url, fn),\n-                u\'width\': 400,\n-                u\'height\': 300},\n-            u\'large\': {\n-                u\'download\': u\'{}/@@images/{}/large\'.format(obj_url, fn),\n-                u\'width\': 768,\n-                u\'height\': 576},\n-        }\n-        self.assertEqual(\n-            {u\'filename\': u\'1024x768.gif\',\n-             u\'content-type\': u\'image/gif\',\n-             u\'size\': 1514,\n-             u\'download\': download_url,\n-             u\'width\': 1024,\n-             u\'height\': 768,\n-             u\'scales\': scales},\n-            value)\n+        with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n+            value = self.serialize(\n+                fn,\n+                NamedImage(\n+                    data=image_data,\n+                    contentType=u\'image/gif\',\n+                    filename=u\'1024x768.gif\'\n+                )\n+            )\n+            self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n+\n+            scale_url_uuid = \'uuid_1\'\n+            obj_url = self.doc1.absolute_url()\n+            download_url = u\'{}/@@images/{}.{}\'.format(\n+                obj_url, scale_url_uuid, GIF_SCALE_FORMAT\n+            )\n+            scales = {\n+                u\'listing\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 16,\n+                    u\'height\': 12},\n+                u\'icon\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 32,\n+                    u\'height\': 24},\n+                u\'tile\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 64,\n+                    u\'height\': 48},\n+                u\'thumb\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 128,\n+                    u\'height\': 96},\n+                u\'mini\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 200,\n+                    u\'height\': 150},\n+                u\'preview\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 400,\n+                    u\'height\': 300},\n+                u\'large\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 768,\n+                    u\'height\': 576},\n+            }\n+            self.assertEqual({\n+                u\'filename\': u\'1024x768.gif\',\n+                u\'content-type\': u\'image/gif\',\n+                u\'size\': 1514,\n+                u\'download\': download_url,\n+                u\'width\': 1024,\n+                u\'height\': 768,\n+                u\'scales\': scales},\n+                value)\n \n     def test_namedblobfile_field_serialization_returns_dict(self):\n         value = self.serialize(\n@@ -250,53 +268,61 @@ def test_namedblobimage_field_serialization_returns_dict(self):\n         image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n         image_data = open(image_file, \'rb\').read()\n         fn = \'test_namedblobimage_field\'\n-        value = self.serialize(\n-            fn,\n-            NamedBlobImage(data=image_data, contentType=u\'image/gif\',\n-                           filename=u\'1024x768.gif\'))\n-        self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n-\n-        obj_url = self.doc1.absolute_url()\n-        download_url = u\'{}/@@images/{}\'.format(obj_url, fn)\n-        scales = {\n-            u\'listing\': {\n-                u\'download\': u\'{}/@@images/{}/listing\'.format(obj_url, fn),\n-                u\'width\': 16,\n-                u\'height\': 12},\n-            u\'icon\': {\n-                u\'download\': u\'{}/@@images/{}/icon\'.format(obj_url, fn),\n-                u\'width\': 32,\n-                u\'height\': 24},\n-            u\'tile\': {\n-                u\'download\': u\'{}/@@images/{}/tile\'.format(obj_url, fn),\n-                u\'width\': 64,\n-                u\'height\': 48},\n-            u\'thumb\': {\n-                u\'download\': u\'{}/@@images/{}/thumb\'.format(obj_url, fn),\n-                u\'width\': 128,\n-                u\'height\': 96},\n-            u\'mini\': {\n-                u\'download\': u\'{}/@@images/{}/mini\'.format(obj_url, fn),\n-                u\'width\': 200,\n-                u\'height\': 150},\n-            u\'preview\': {\n-                u\'download\': u\'{}/@@images/{}/preview\'.format(obj_url, fn),\n-                u\'width\': 400,\n-                u\'height\': 300},\n-            u\'large\': {\n-                u\'download\': u\'{}/@@images/{}/large\'.format(obj_url, fn),\n-                u\'width\': 768,\n-                u\'height\': 576},\n-        }\n-        self.assertEqual(\n-            {u\'filename\': u\'1024x768.gif\',\n-             u\'content-type\': u\'image/gif\',\n-             u\'size\': 1514,\n-             u\'download\': download_url,\n-             u\'width\': 1024,\n-             u\'height\': 768,\n-             u\'scales\': scales},\n-            value)\n+        with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n+            value = self.serialize(\n+                fn,\n+                NamedBlobImage(\n+                    data=image_data,\n+                    contentType=u\'image/gif\',\n+                    filename=u\'1024x768.gif\'\n+                )\n+            )\n+            self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n+\n+            scale_url_uuid = \'uuid_1\'\n+            obj_url = self.doc1.absolute_url()\n+            download_url = u\'{}/@@images/{}.{}\'.format(\n+                obj_url, scale_url_uuid, GIF_SCALE_FORMAT\n+            )\n+            scales = {\n+                u\'listing\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 16,\n+                    u\'height\': 12},\n+                u\'icon\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 32,\n+                    u\'height\': 24},\n+                u\'tile\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 64,\n+                    u\'height\': 48},\n+                u\'thumb\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 128,\n+                    u\'height\': 96},\n+                u\'mini\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 200,\n+                    u\'height\': 150},\n+                u\'preview\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 400,\n+                    u\'height\': 300},\n+                u\'large\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 768,\n+                    u\'height\': 576},\n+            }\n+            self.assertEqual({\n+                u\'filename\': u\'1024x768.gif\',\n+                u\'content-type\': u\'image/gif\',\n+                u\'size\': 1514,\n+                u\'download\': download_url,\n+                u\'width\': 1024,\n+                u\'height\': 768,\n+                u\'scales\': scales},\n+                value)\n \n     def test_relationchoice_field_serialization_returns_summary_dict(self):\n         doc2 = self.portal[self.portal.invokeFactory(\ndiff --git a/src/plone/restapi/tests/test_expansion.py b/src/plone/restapi/tests/test_expansion.py\nindex 263430c4..3806210f 100644\n--- a/src/plone/restapi/tests/test_expansion.py\n+++ b/src/plone/restapi/tests/test_expansion.py\n@@ -11,6 +11,7 @@\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n+from zope.component import getGlobalSiteManager\n from zope.component import provideAdapter\n from zope.interface import alsoProvides\n from zope.interface import Interface\n@@ -85,6 +86,19 @@ def test_expansion_returns_multiple_expanded_elements(self):\n             {\'@components\': {\'bar\': \'expanded\', \'foo\': \'expanded\'}},\n             expandable_elements(None, request))\n \n+    def tearDown(self):\n+        gsm = getGlobalSiteManager()\n+        gsm.unregisterAdapter(\n+            ExpandableElementFoo,\n+            (Interface, IBrowserRequest),\n+            IExpandableElement,\n+            \'foo\')\n+        gsm.unregisterAdapter(\n+            ExpandableElementBar,\n+            (Interface, IBrowserRequest),\n+            IExpandableElement,\n+            \'bar\')\n+\n \n class TestExpansionFunctional(unittest.TestCase):\n \n@@ -161,12 +175,12 @@ def test_navigation_expanded(self):\n             [\n                 {\n                     u\'title\': u\'Home\',\n-                    u\'@id\': u\'http://localhost:55001/plone\',\n+                    u\'@id\': self.portal_url + u\'\',\n                     u\'description\': u\'\',\n                 },\n                 {\n                     u\'title\': u\'Some Folder\',\n-                    u\'@id\': u\'http://localhost:55001/plone/folder\',\n+                    u\'@id\': self.portal_url + u\'/folder\',\n                     u\'description\': u\'\',\n                 }\n             ],\n@@ -240,7 +254,7 @@ def test_breadcrumbs_expanded(self):\n             [\n                 {\n                     u\'title\': u\'Some Folder\',\n-                    u\'@id\': u\'http://localhost:55001/plone/folder\'\n+                    u\'@id\': self.portal_url + u\'/folder\'\n                 }\n             ],\n             response.json()[\'@components\'][\'breadcrumbs\'][\'items\']\n@@ -265,7 +279,7 @@ def test_workflow_expanded(self):\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            u\'http://localhost:55001/plone/folder/@workflow\',\n+            self.portal_url + u\'/folder/@workflow\',\n             response.json().get(\'@components\').get(\'workflow\').get(\'@id\')\n         )\n         self.assertEqual(\n@@ -279,11 +293,11 @@ def test_workflow_expanded(self):\n         self.assertEqual(\n             [\n                 {\n-                    u\'@id\': u\'http://localhost:55001/plone/folder/@workflow/publish\',  # noqa\n+                    u\'@id\': self.portal_url + u\'/folder/@workflow/publish\',  # noqa\n                     u\'title\': u\'Publish\'\n                 },\n                 {\n-                    u\'@id\': u\'http://localhost:55001/plone/folder/@workflow/submit\',  # noqa\n+                    u\'@id\': self.portal_url + u\'/folder/@workflow/submit\',  # noqa\n                     u\'title\': u\'Submit for publication\'\n                 }\n             ],\ndiff --git a/src/plone/restapi/tests/test_roles.py b/src/plone/restapi/tests/test_roles.py\nindex a77a105c..26cb4b42 100644\n--- a/src/plone/restapi/tests/test_roles.py\n+++ b/src/plone/restapi/tests/test_roles.py\n@@ -22,32 +22,32 @@ def setUp(self):\n     def test_roles_endpoint_lists_roles(self):\n         response = self.api_session.get(\'/@roles\')\n \n-        self.assertEqual([\n-            {u\'@id\': u\'http://localhost:55001/plone/@roles/Contributor\',\n+        self.assertItemsEqual([\n+            {u\'@id\': self.portal_url + u\'/@roles/Contributor\',\n              u\'@type\': u\'role\',\n              u\'id\': u\'Contributor\',\n              u\'title\': u\'Contributor\'},\n-            {u\'@id\': u\'http://localhost:55001/plone/@roles/Editor\',\n+            {u\'@id\': self.portal_url + u\'/@roles/Editor\',\n              u\'@type\': u\'role\',\n              u\'id\': u\'Editor\',\n              u\'title\': u\'Editor\'},\n-            {u\'@id\': u\'http://localhost:55001/plone/@roles/Member\',\n+            {u\'@id\': self.portal_url + u\'/@roles/Member\',\n              u\'@type\': u\'role\',\n              u\'id\': u\'Member\',\n              u\'title\': u\'Member\'},\n-            {u\'@id\': u\'http://localhost:55001/plone/@roles/Reader\',\n+            {u\'@id\': self.portal_url + u\'/@roles/Reader\',\n              u\'@type\': u\'role\',\n              u\'id\': u\'Reader\',\n              u\'title\': u\'Reader\'},\n-            {u\'@id\': u\'http://localhost:55001/plone/@roles/Reviewer\',\n+            {u\'@id\': self.portal_url + u\'/@roles/Reviewer\',\n              u\'@type\': u\'role\',\n              u\'id\': u\'Reviewer\',\n              u\'title\': u\'Reviewer\'},\n-            {u\'@id\': u\'http://localhost:55001/plone/@roles/Site Administrator\',\n+            {u\'@id\': self.portal_url + u\'/@roles/Site Administrator\',\n              u\'@type\': u\'role\',\n              u\'id\': u\'Site Administrator\',\n              u\'title\': u\'Site Administrator\'},\n-            {u\'@id\': u\'http://localhost:55001/plone/@roles/Manager\',\n+            {u\'@id\': self.portal_url + u\'/@roles/Manager\',\n              u\'@type\': u\'role\',\n              u\'id\': u\'Manager\',\n              u\'title\': u\'Manager\'}],\ndiff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex dc2b3905..ec4fd645 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -146,7 +146,7 @@ def test_partial_metadata_retrieval(self):\n         response = self.api_session.get(\'/@search\', params=query)\n \n         self.assertDictContainsSubset(\n-            {u\'@id\': u\'http://localhost:55001/plone/folder/doc\',\n+            {u\'@id\': self.portal_url + u\'/folder/doc\',\n              u\'title\': u\'Lorem Ipsum\',\n              u\'portal_type\': u\'DXTestDocument\',\n              u\'review_state\': u\'private\'},\n@@ -157,7 +157,7 @@ def test_full_metadata_retrieval(self):\n         response = self.api_session.get(\'/@search\', params=query)\n \n         self.assertDictContainsSubset(\n-            {u\'@id\': u\'http://localhost:55001/plone/folder/doc\',\n+            {u\'@id\': self.portal_url + u\'/folder/doc\',\n              u\'Creator\': u\'test_user_1_\',\n              u\'Description\': u\'\',\n              u\'EffectiveDate\': u\'None\',\n@@ -178,7 +178,7 @@ def test_full_metadata_retrieval(self):\n              u\'getObjSize\': u\'0 KB\',\n              u\'getPath\': u\'/plone/folder/doc\',\n              u\'getRemoteUrl\': None,\n-             u\'getURL\': u\'http://localhost:55001/plone/folder/doc\',\n+             u\'getURL\': self.portal_url + u\'/folder/doc\',\n              u\'id\': u\'doc\',\n              u\'in_response_to\': None,\n              u\'is_folderish\': False,\n@@ -204,7 +204,7 @@ def test_full_objects_retrieval(self):\n             u\'<p>Some Text</p>\',\n             response.json()[\'items\'][0][\'test_richtext_field\'][\'data\'])\n         self.assertEqual(\n-            \'http://localhost:55001/plone/folder/doc\',\n+            self.portal_url + u\'/folder/doc\',\n             response.json()[\'items\'][0][\'@id\'])\n \n     def test_full_objects_retrieval_discussion(self):\n@@ -276,7 +276,7 @@ def test_keyword_index_str_query_or(self):\n         query = {\'test_list_field\': [\'Keyword2\', \'Keyword3\']}\n         response = self.api_session.get(\'/@search\', params=query)\n \n-        self.assertEqual(\n+        self.assertItemsEqual(\n             [u\'/plone/folder/doc\',\n              u\'/plone/folder/other-document\'],\n             result_paths(response.json())\n@@ -574,5 +574,5 @@ def test_full_objects_retrieval(self):\n             {u\'data\': u\' Some Text \', u\'content-type\': u\'text/plain\'},\n             response.json()[\'items\'][0][\'testTextField\'])\n         self.assertEqual(\n-            \'http://localhost:55001/plone/folder/doc\',\n+            self.portal_url + u\'/folder/doc\',\n             response.json()[\'items\'][0][\'@id\'])\ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex 7e4af674..43c14ab7 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from DateTime import DateTime\n+from mock import patch\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.textfield.value import RichTextValue\n@@ -7,6 +8,7 @@\n from plone.namedfile.file import NamedFile\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+from plone.scale import storage\n from Products.CMFCore.utils import getToolByName\n from zope.component import getMultiAdapter\n \n@@ -269,47 +271,53 @@ def test_serialize_image(self):\n             filename=u\'image.png\'\n         )\n \n-        obj_url = self.portal.image1.absolute_url()\n-        download_url = u\'{}/@@images/image\'.format(obj_url)\n-        scales = {\n-            u\'listing\': {\n-                u\'download\': u\'{}/@@images/image/listing\'.format(obj_url),\n-                u\'width\': 16,\n-                u\'height\': 4},\n-            u\'icon\': {\n-                u\'download\': u\'{}/@@images/image/icon\'.format(obj_url),\n-                u\'width\': 32,\n-                u\'height\': 8},\n-            u\'tile\': {\n-                u\'download\': u\'{}/@@images/image/tile\'.format(obj_url),\n-                u\'width\': 64,\n-                u\'height\': 16},\n-            u\'thumb\': {\n-                u\'download\': u\'{}/@@images/image/thumb\'.format(obj_url),\n-                u\'width\': 128,\n-                u\'height\': 33},\n-            u\'mini\': {\n-                u\'download\': u\'{}/@@images/image/mini\'.format(obj_url),\n-                u\'width\': 200,\n-                u\'height\': 52},\n-            u\'preview\': {\n-                u\'download\': u\'{}/@@images/image/preview\'.format(obj_url),\n+        self.maxDiff = 99999\n+\n+        with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n+            obj_url = self.portal.image1.absolute_url()\n+            scale_url_uuid = \'uuid_1\'\n+            download_url = u\'{}/@@images/{}.png\'.format(\n+                obj_url, scale_url_uuid\n+            )\n+            scales = {\n+                u\'listing\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 16,\n+                    u\'height\': 4},\n+                u\'icon\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 32,\n+                    u\'height\': 8},\n+                u\'tile\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 64,\n+                    u\'height\': 16},\n+                u\'thumb\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 128,\n+                    u\'height\': 33},\n+                u\'mini\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 200,\n+                    u\'height\': 52},\n+                u\'preview\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 215,\n+                    u\'height\': 56},\n+                u\'large\': {\n+                    u\'download\': download_url,\n+                    u\'width\': 215,\n+                    u\'height\': 56},\n+            }\n+            self.assertEqual({\n+                u\'filename\': u\'image.png\',\n+                u\'content-type\': u\'image/png\',\n+                u\'size\': 1185,\n+                u\'download\': download_url,\n                 u\'width\': 215,\n-                u\'height\': 56},\n-            u\'large\': {\n-                u\'download\': u\'{}/@@images/image/large\'.format(obj_url),\n-                u\'width\': 215,\n-                u\'height\': 56},\n-        }\n-        self.assertEqual(\n-            {u\'filename\': u\'image.png\',\n-             u\'content-type\': u\'image/png\',\n-             u\'size\': 1185,\n-             u\'download\': download_url,\n-             u\'width\': 215,\n-             u\'height\': 56,\n-             u\'scales\': scales},\n-            self.serialize(self.portal.image1)[\'image\'])\n+                u\'height\': 56,\n+                u\'scales\': scales},\n+                self.serialize(self.portal.image1)[\'image\'])\n \n     def test_serialize_empty_image_returns_none(self):\n         self.portal.invokeFactory(\'Image\', id=\'image1\', title=\'Image 1\')\ndiff --git a/src/plone/restapi/tests/test_services.py b/src/plone/restapi/tests/test_services.py\nindex 8a7053e2..a52ecd9d 100644\n--- a/src/plone/restapi/tests/test_services.py\n+++ b/src/plone/restapi/tests/test_services.py\n@@ -1,14 +1,15 @@\n # -*- coding: utf-8 -*-\n-from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n-from plone.restapi.testing import RelativeSession\n+from mock import patch\n from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n from plone.app.textfield.value import RichTextValue\n from plone.namedfile.file import NamedBlobFile\n from plone.namedfile.file import NamedBlobImage\n-\n+from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+from plone.restapi.testing import RelativeSession\n+from plone.scale import storage\n from z3c.relationfield import RelationValue\n from zope.component import getUtility\n from zope.intid.interfaces import IIntIds\n@@ -101,38 +102,39 @@ def test_get_news_item(self):\n         self.portal.news1.image_caption = u\'This is an image caption.\'\n         transaction.commit()\n \n-        response = self.api_session.get(self.portal.news1.absolute_url())\n+        with patch.object(storage, \'uuid4\', return_value=\'uuid1\'):\n+            response = self.api_session.get(self.portal.news1.absolute_url())\n \n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Content-Type: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n-        )\n-        self.assertEqual(\n-            \'News Item\',\n-            response.json().get(\'@type\'),\n-            "Response should be @type \'News Item\', not \'{}\'".format(\n-                response.json().get(\'@type\')\n+            self.assertEqual(response.status_code, 200)\n+            self.assertEqual(\n+                response.headers.get(\'Content-Type\'),\n+                \'application/json\',\n+                \'When sending a GET request with Content-Type: application/json \' + # noqa\n+                \'the server should respond with sending back application/json.\'\n+            )\n+            self.assertEqual(\n+                \'News Item\',\n+                response.json().get(\'@type\'),\n+                "Response should be @type \'News Item\', not \'{}\'".format(\n+                    response.json().get(\'@type\')\n+                )\n+            )\n+            self.assertEqual(\n+                response.json().get(\'@id\'),\n+                self.portal.news1.absolute_url()\n+            )\n+            self.assertEqual(\n+                \'News Item 1\',\n+                response.json().get(\'title\')\n+            )\n+            self.assertEqual(\n+                u\'This is an image caption.\',\n+                response.json()[\'image_caption\']\n+            )\n+            self.assertDictContainsSubset(\n+                {\'download\': self.portal_url + u\'/news1/@@images/uuid1.png\'},  # noqa\n+                response.json()[\'image\']\n             )\n-        )\n-        self.assertEqual(\n-            response.json().get(\'@id\'),\n-            self.portal.news1.absolute_url()\n-        )\n-        self.assertEqual(\n-            \'News Item 1\',\n-            response.json().get(\'title\')\n-        )\n-        self.assertEqual(\n-            u\'This is an image caption.\',\n-            response.json()[\'image_caption\']\n-        )\n-        self.assertDictContainsSubset(\n-            {\'download\': u\'http://localhost:55001/plone/news1/@@images/image\'},\n-            response.json()[\'image\']\n-        )\n \n     def test_get_folder(self):\n         self.portal.invokeFactory(\ndiff --git a/src/plone/restapi/tests/test_services_breadcrumbs.py b/src/plone/restapi/tests/test_services_breadcrumbs.py\nindex 8e0a00f9..b65f6618 100644\n--- a/src/plone/restapi/tests/test_services_breadcrumbs.py\n+++ b/src/plone/restapi/tests/test_services_breadcrumbs.py\n@@ -42,13 +42,13 @@ def test_breadcrumbs(self):\n         self.assertEqual(\n             response.json(),\n             {\n-                \'@id\': \'http://localhost:55001/plone/folder/doc1/@breadcrumbs\',\n+                \'@id\': self.portal_url + u\'/folder/doc1/@breadcrumbs\',\n                 \'items\': [\n                     {\n-                        u\'@id\': u\'http://localhost:55001/plone/folder\',\n+                        u\'@id\': self.portal_url + u\'/folder\',\n                         u\'title\': u\'Some Folder\'\n                     }, {\n-                        u\'@id\': u\'http://localhost:55001/plone/folder/doc1\',\n+                        u\'@id\': self.portal_url + u\'/folder/doc1\',\n                         u\'title\': u\'A document\'\n                     }\n                 ]\ndiff --git a/src/plone/restapi/tests/test_services_history.py b/src/plone/restapi/tests/test_services_history.py\nindex 0cbcbd03..e3856e85 100644\n--- a/src/plone/restapi/tests/test_services_history.py\n+++ b/src/plone/restapi/tests/test_services_history.py\n@@ -1,11 +1,11 @@\n # -*- coding: utf-8 -*-\n-from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n-from plone.restapi.testing import RelativeSession\n+from plone import api\n from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n-from plone import api\n+from plone.app.testing import TEST_USER_ID\n+from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+from plone.restapi.testing import RelativeSession\n \n import unittest\n import transaction\n@@ -134,3 +134,59 @@ def test_no_sharing(self):\n         url = self.doc.absolute_url() + \'/@history/0\'\n         response = self.api_session.get(url)\n         self.assertNotIn(\'sharing\', response.json())\n+\n+\n+class TestHistoryEndpointTranslatedMessages(unittest.TestCase):\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer[\'app\']\n+        self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+\n+        self.api_session = RelativeSession(self.portal_url)\n+        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({\'Accept-Language\': \'es\'})\n+        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+        self.portal.invokeFactory(\n+            \'Document\',\n+            id=\'doc_with_history\',\n+            title=\'My Document\'\n+        )\n+        self.doc = self.portal.doc_with_history\n+        self.doc.setTitle(\'Current version\')\n+\n+        api.content.transition(self.doc, \'publish\')\n+\n+        self.endpoint_url = \'{}/@history\'.format(self.doc.absolute_url())\n+\n+        transaction.commit()\n+\n+    def test_actions_are_translated(self):\n+        url = self.doc.absolute_url() + \'/@history\'\n+        response = self.api_session.get(url)\n+        first_action = response.json()[-1]\n+        self.assertEqual(\n+            u\'Crear\',\n+            first_action[\'action\'],\n+        )\n+\n+    def test_state_titles_are_translated(self):\n+        url = self.doc.absolute_url() + \'/@history\'\n+        response = self.api_session.get(url)\n+        first_action = response.json()[-1]\n+        self.assertEqual(\n+            u\'Privado\',\n+            first_action[\'state_title\'],\n+        )\n+\n+    def test_transition_titles_are_translated(self):\n+        url = self.doc.absolute_url() + \'/@history\'\n+        response = self.api_session.get(url)\n+        first_action = response.json()[-1]\n+        self.assertEqual(\n+            u\'Crear\',\n+            first_action[\'transition_title\'],\n+        )\ndiff --git a/src/plone/restapi/tests/test_services_navigation.py b/src/plone/restapi/tests/test_services_navigation.py\nindex 30f670a0..4a25f850 100644\n--- a/src/plone/restapi/tests/test_services_navigation.py\n+++ b/src/plone/restapi/tests/test_services_navigation.py\n@@ -62,20 +62,20 @@ def test_navigation_with_no_params_gets_only_top_level(self):\n         self.assertEqual(\n             response.json(),\n             {\n-                \'@id\': \'http://localhost:55001/plone/folder/@navigation\',\n+                \'@id\': self.portal_url + u\'/folder/@navigation\',\n                 \'items\': [\n                     {\n                         u\'title\': u\'Home\',\n-                        u\'@id\': u\'http://localhost:55001/plone\',\n+                        u\'@id\': self.portal_url,\n                         u\'description\': u\'\',\n                     },\n                     {\n                         u\'title\': u\'Some Folder\',\n-                        u\'@id\': u\'http://localhost:55001/plone/folder\',\n+                        u\'@id\': self.portal_url + u\'/folder\',\n                         u\'description\': u\'\',\n                     },\n                     {\n-                        u\'@id\': u\'http://localhost:55001/plone/folder2\',\n+                        u\'@id\': self.portal_url + u\'/folder2\',\n                         u\'description\': u\'\',\n                         u\'title\': u\'Some Folder 2\'\n                     }\ndiff --git a/src/plone/restapi/tests/test_services_tiles.py b/src/plone/restapi/tests/test_services_tiles.py\nnew file mode 100644\nindex 00000000..74f96bac\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_services_tiles.py\n@@ -0,0 +1,169 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.testing import setRoles\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n+from plone.dexterity.interfaces import IDexterityFTI\n+from plone.dexterity.utils import createContentInContainer\n+from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+from plone.restapi.testing import RelativeSession\n+from plone.tiles import Tile\n+from plone.tiles.interfaces import IBasicTile\n+from plone.tiles.type import TileType\n+from zope.component import provideAdapter\n+from zope.component import provideUtility\n+from zope.component import queryUtility\n+from zope.interface import Interface\n+\n+import transaction\n+import unittest\n+import zope.schema\n+\n+\n+class ISampleTile(Interface):\n+    title = zope.schema.TextLine(\n+        title=u\'Title\',\n+        required=False\n+    )\n+\n+\n+class SampleTile(Tile):\n+\n+    __name__ = \'sample.tile\'  # would normally be set by a ZCML handler\n+\n+    def __call__(self):\n+        return \'<html><body><b>My tile</b></body></html>\'\n+\n+\n+class TestServicesTiles(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer[\'app\']\n+        self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+\n+        self.api_session = RelativeSession(self.portal_url)\n+        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+        fti = queryUtility(\n+            IDexterityFTI,\n+            name=\'Document\')\n+        behavior_list = [a for a in fti.behaviors]\n+        behavior_list.append(\'plone.tiles\')\n+        behavior_list.append(\'plone.leadimage\')\n+        fti.behaviors = tuple(behavior_list)\n+\n+        self.doc = createContentInContainer(\n+            self.portal, u\'Document\',\n+            id=u\'doc\',\n+            title=u\'A document\')\n+        transaction.commit()\n+\n+        sampleTileType = TileType(\n+            u\'sample.tile\',\n+            u\'Sample tile\',\n+            \'cmf.ModifyPortalContent\',\n+            \'zope.Public\',\n+            description=u\'A tile used for testing\',\n+            schema=ISampleTile,\n+            icon=\'testicon\')\n+        provideUtility(sampleTileType, name=u\'sample.tile\')\n+        provideAdapter(SampleTile, (Interface, Interface),\n+                       IBasicTile, name=u\'sample.tile\')\n+\n+    def test_get_available_tiles(self):\n+        response = self.api_session.get(\'/@tiles\')\n+\n+        self.assertEqual(response.status_code, 200)\n+        response = response.json()\n+        self.assertEquals(len(response), 1)\n+        self.assertEquals(\n+            response[0][\'@id\'],\n+            self.portal_url + u\'/@tiles/sample.tile\')\n+        self.assertEquals(response[0][\'title\'], u\'Sample tile\')\n+        self.assertEquals(\n+            response[0][\'description\'], u\'A tile used for testing\')\n+        self.assertEquals(response[0][\'icon\'], \'testicon\')\n+\n+    def test_get_tile(self):\n+        response = self.api_session.get(\'/@tiles/sample.tile\')\n+\n+        self.assertEqual(response.status_code, 200)\n+        response = response.json()\n+        self.assertEquals(response[\'title\'], u\'Sample tile\')\n+        self.assertEquals(\n+            response[\'properties\'][\'title\'][\'title\'], u\'Title\')\n+        self.assertEquals(\n+            response[\'properties\'][\'title\'][\'type\'], u\'string\')\n+\n+    def test_patch_tiles_list(self):\n+        response = self.api_session.patch(\n+            \'/doc\',\n+            json={\n+                "tiles": {\n+                    \'uuid1\': {\'@type\': \'title\'},\n+                    \'uuid2\': {\'@type\': \'description\'}\n+                },\n+            })\n+\n+        self.assertEqual(response.status_code, 204)\n+\n+        response = self.api_session.get(\'/doc\')\n+        response = response.json()\n+\n+        self.assertEquals(\n+            response[\'tiles\'],\n+            {\n+                \'uuid1\': {\'@type\': \'title\'},\n+                \'uuid2\': {\'@type\': \'description\'}\n+            }\n+        )\n+\n+    def test_patch_tiles_layout(self):\n+        response = self.api_session.patch(\n+            \'/doc\',\n+            json={\n+                "tiles_layout": {\n+                    "items": ["#uuid1", "#uuid2"]\n+                }\n+            })\n+\n+        self.assertEqual(response.status_code, 204)\n+\n+        response = self.api_session.get(\'/doc\')\n+        response = response.json()\n+\n+        self.assertEquals(\n+            response[\'tiles_layout\'],\n+            {\n+                "items": ["#uuid1", "#uuid2"]\n+            }\n+        )\n+\n+    def test_get_tiles_layout_schema(self):\n+        response = self.api_session.get(\'/@types/Document\')\n+\n+        self.assertEqual(response.status_code, 200)\n+        response = response.json()\n+\n+    # These are not failing because the patch operations doesn\'t validate\n+    # fields right now\n+    # def test_patch_tiles_list_wrong_type(self):\n+    #     response = self.api_session.patch(\n+    #         \'/doc\',\n+    #         json={\n+    #             "tiles": [{\'uuid1\': {\'@type\': \'title\'}}]\n+    #         })\n+    #     self.assertEqual(response.status_code, 500)\n+\n+    # def test_patch_tiles_layout_wrong_type(self):\n+    #     response = self.api_session.patch(\n+    #         \'/doc\',\n+    #         json={\n+    #             "tiles_layout": {\'uuid1\': {\'@type\': \'title\'}}\n+    #         })\n+    #     self.assertEqual(response.status_code, 500)\ndiff --git a/src/plone/restapi/tests/test_services_types.py b/src/plone/restapi/tests/test_services_types.py\nindex cb8cb048..ec7c37cd 100644\n--- a/src/plone/restapi/tests/test_services_types.py\n+++ b/src/plone/restapi/tests/test_services_types.py\n@@ -1,11 +1,12 @@\n # -*- coding: utf-8 -*-\n from plone import api\n-from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n-from plone.restapi.testing import RelativeSession\n from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n+from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+from plone.restapi.testing import RelativeSession\n+\n \n import transaction\n import unittest\n@@ -165,3 +166,39 @@ def test_addable_types_for_non_manager_user(self):\n \n         self.assertEquals(\n             len([a for a in response if a[\'addable\']]), 0)\n+\n+\n+class TestServicesTypesTranslatedTitles(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer[\'app\']\n+        self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.api_session = RelativeSession(self.portal_url)\n+        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({\'Accept-Language\': \'es\'})\n+        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+        transaction.commit()\n+\n+    def test_get_types_translated(self):\n+        response = self.api_session.get(\n+            \'{}/@types\'.format(self.portal.absolute_url())\n+        )\n+\n+        self.assertEqual(response.status_code, 200)\n+\n+        self.assertItemsEqual([\n+            u\'Archivo\',\n+            u\'Carpeta\',\n+            u\'Colecci\xc3\xb3n\',\n+            u\'DX Test Document\',\n+            u\'Enlace\',\n+            u\'Evento\',\n+            u\'Imagen\',\n+            u\'Noticia\',\n+            u\'P\xc3\xa1gina\'],\n+            [item[\'title\'] for item in response.json()])\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex f6967f86..228ddae6 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -451,9 +451,11 @@ def test_update_user_password(self):\n             self.portal.acl_users.source_users._user_passwords\n         )\n         payload = {\'password\': \'secret\'}\n-        self.api_session.patch(\'/@users/noam\', json=payload)\n+        response = self.api_session.patch(\'/@users/noam\', json=payload)\n         transaction.commit()\n \n+        self.assertEqual(response.status_code, 204)\n+\n         new_password_hashes = dict(\n             self.portal.acl_users.source_users._user_passwords\n         )\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 586d363f..4163f611 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -6,6 +6,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n+from zope.component import getGlobalSiteManager\n from zope.component import provideUtility\n from zope.schema.interfaces import IVocabularyFactory\n from zope.schema.vocabulary import SimpleVocabulary\n@@ -61,6 +62,7 @@ def test_get_vocabulary(self):\n         response = response.json()\n         self.assertEqual(\n             response,\n+<<<<<<< HEAD\n             {\n                 u\'@id\': u\'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary\',  # noqa\n                 u\'items\': [\n@@ -115,6 +117,16 @@ def test_get_vocabulary_filtered(self):\n                 u\'items_total\': 1,\n             }\n         )\n+=======\n+            {u\'@id\': self.portal_url + u\'/@vocabularies/\'\'plone.restapi.tests.test_vocabulary\',  # noqa\n+             u\'terms\': [\n+                 {u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary/token1\',  # noqa\n+                  u\'title\': u\'Title 1\',\n+                  u\'token\': u\'token1\'},\n+                 {u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary/token2\',  # noqa\n+                  u\'title\': u\'Title 2\',\n+                  u\'token\': u\'token2\'}]})\n+>>>>>>> master\n \n     def test_get_unknown_vocabulary(self):\n         response = self.api_session.get(\n@@ -139,7 +151,7 @@ def test_get_all_vocabularies(self):\n         self.assertEqual(\n             [\n                 {\n-                    u\'@id\': u\'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary\',  # noqa\n+                    u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary\',  # noqa\n                     u\'title\': u\'plone.restapi.tests.test_vocabulary\'\n                 }\n             ],\n@@ -166,14 +178,33 @@ def test_context_vocabulary(self):\n         response = self.api_session.get(\n             \'testdoc/@vocabularies/{}\'.format(context_vocab_name))\n \n+        gsm = getGlobalSiteManager()\n+        gsm.unregisterUtility(provided=IVocabularyFactory,\n+                              name=context_vocab_name)\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n             response.json(),\n             {\n+<<<<<<< HEAD\n                 u\'@id\': u\'http://localhost:55001/plone/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary\',  # noqa\n                 u\'items\': [\n                     {u\'title\': u\'testdoc\', u\'token\': u\'id\'},\n                     {u\'title\': u\'Document 1\', u\'token\': u\'title\'},\n                 ],\n                 u\'items_total\': 2,\n+=======\n+                u\'@id\': self.portal_url + u\'/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary\',  # noqa\n+                u\'terms\': [\n+                    {u\'@id\': self.portal_url + u\'/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary/id\',  # noqa\n+                     u\'title\': u\'testdoc\',\n+                     u\'token\': u\'id\'},\n+                    {u\'@id\': self.portal_url + u\'/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary/title\',  # noqa\n+                     u\'title\': u\'Document 1\',\n+                     u\'token\': u\'title\'}]\n+>>>>>>> master\n             })\n+\n+    def tearDown(self):\n+        gsm = getGlobalSiteManager()\n+        gsm.unregisterUtility(provided=IVocabularyFactory,\n+                              name=\'plone.restapi.tests.test_vocabulary\')\ndiff --git a/src/plone/restapi/tests/test_tus.py b/src/plone/restapi/tests/test_tus.py\nindex 7380db6a..dfb12dbd 100644\n--- a/src/plone/restapi/tests/test_tus.py\n+++ b/src/plone/restapi/tests/test_tus.py\n@@ -105,6 +105,7 @@ def test_tus_post_initialization(self):\n         stored_metadata = upload.metadata()\n         self.assertEqual(stored_metadata,\n                          {u\'length\': 8, u\'mode\': u\'create\'})\n+        upload.cleanup()\n \n     def test_tus_post_initialization_with_metadata(self):\n         metadata = \'filename {},content-type {}\'.format(\n@@ -125,6 +126,7 @@ def test_tus_post_initialization_with_metadata(self):\n                           u\'filename\': u\'test.txt\',\n                           u\'length\': 8,\n                           u\'mode\': u\'create\'})\n+        upload.cleanup()\n \n     def test_tus_post_replace(self):\n         self.file = api.content.create(container=self.portal,\n@@ -145,13 +147,16 @@ def test_tus_post_replace(self):\n         stored_metadata = upload.metadata()\n         self.assertEqual(stored_metadata,\n                          {u\'length\': 8, u\'mode\': u\'replace\'})\n+        upload.cleanup()\n \n     def test_tus_head_on_not_existing_resource_returns_404(self):\n         response = self.api_session.head(\n             self.upload_url + \'/myuid/123\', headers={\'Tus-Resumable\': \'1.0.0\'})\n         self.assertEqual(404, response.status_code)\n         response = self.api_session.head(\n-            self.upload_url + \'/myuid\', headers={\'Tus-Resumable\': \'1.0.0\'})\n+            self.upload_url + \'/non-existing-uid\',\n+            headers={\'Tus-Resumable\': \'1.0.0\'}\n+        )\n         self.assertEqual(404, response.status_code)\n         response = self.api_session.head(\n             self.upload_url, headers={\'Tus-Resumable\': \'1.0.0\'})\n@@ -178,22 +183,24 @@ def test_tus_head_response_includes_required_headers(self):\n     def test_head_in_create_mode_without_add_permission_raises_401(self):\n         self.folder.manage_permission(\'Add portal content\', [], 0)\n         transaction.commit()\n-        TUSUpload(\'myuid\', {\'mode\': \'create\', \'length\': 12})\n+        tus = TUSUpload(\'myuid\', {\'mode\': \'create\', \'length\': 12})\n         response = self.api_session.head(\n             self.upload_url + \'/myuid\',\n             headers={\'Tus-Resumable\': \'1.0.0\',\n                      \'Upload-Offset\': \'0\'})\n         self.assertEqual(401, response.status_code)\n+        tus.cleanup()\n \n     def test_head_in_replace_mode_without_modify_permission_raises_401(self):\n         self.folder.manage_permission(\'Modify portal content\', [], 0)\n         transaction.commit()\n-        TUSUpload(\'myuid\', {\'mode\': \'replace\', \'length\': 12})\n+        tus = TUSUpload(\'myuid\', {\'mode\': \'replace\', \'length\': 12})\n         response = self.api_session.head(\n             self.upload_url + \'/myuid\',\n             headers={\'Tus-Resumable\': \'1.0.0\',\n                      \'Upload-Offset\': \'0\'})\n         self.assertEqual(401, response.status_code)\n+        tus.cleanup()\n \n     def test_tus_patch_on_not_existing_resource_returns_404(self):\n         response = self.api_session.patch(\n@@ -266,7 +273,7 @@ def test_tus_patch_non_primary_field(self):\n     def test_patch_in_create_mode_without_add_permission_raises_401(self):\n         self.folder.manage_permission(\'Add portal content\', [], 0)\n         transaction.commit()\n-        TUSUpload(\'myuid\', {\'mode\': \'create\', \'length\': 12})\n+        tus = TUSUpload(\'myuid\', {\'mode\': \'create\', \'length\': 12})\n         response = self.api_session.patch(\n             self.upload_url + \'/myuid\',\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -274,11 +281,12 @@ def test_patch_in_create_mode_without_add_permission_raises_401(self):\n                      \'Upload-Offset\': \'0\'},\n             data=StringIO(\'abcdefghijkl\'))\n         self.assertEqual(401, response.status_code)\n+        tus.cleanup()\n \n     def test_patch_in_replace_mode_without_modify_permission_raises_401(self):\n         self.folder.manage_permission(\'Modify portal content\', [], 0)\n         transaction.commit()\n-        TUSUpload(\'myuid\', {\'mode\': \'replace\', \'length\': 12})\n+        tus = TUSUpload(\'myuid\', {\'mode\': \'replace\', \'length\': 12})\n         response = self.api_session.patch(\n             self.upload_url + \'/myuid\',\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -286,6 +294,7 @@ def test_patch_in_replace_mode_without_modify_permission_raises_401(self):\n                      \'Upload-Offset\': \'0\'},\n             data=StringIO(\'abcdefghijkl\'))\n         self.assertEqual(401, response.status_code)\n+        tus.cleanup()\n \n     def test_tus_can_upload_pdf_file(self):\n         # initialize the upload with POST\n@@ -459,39 +468,47 @@ class TestTUSUpload(unittest.TestCase):\n     def test_tmp_dir_gets_created_in_client_home(self):\n         tus = TUSUpload(\'myuid\')\n         self.assertTrue(os.path.isdir(tus.tmp_dir))\n+        tus.cleanup()\n \n     def test_use_tus_tmp_dir_if_provided(self):\n         tus_upload_dir = tempfile.mkdtemp()\n         os.environ[\'TUS_TMP_FILE_DIR\'] = tus_upload_dir\n         tus = TUSUpload(\'myuid\')\n         self.assertEqual(tus_upload_dir, tus.tmp_dir)\n+        tus.cleanup()\n \n     def test_metadata_gets_stored_if_provided(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024, \'filename\': \'test.pdf\'})\n         self.assertIn(\'filename\', tus.metadata())\n         self.assertEqual(\'test.pdf\', tus.metadata()[\'filename\'])\n+        tus.cleanup()\n \n     def test_length_returns_total_length_if_set(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n         self.assertEqual(1024, tus.length())\n+        tus.cleanup()\n \n     def test_length_returns_zero_if_not_set(self):\n         tus = TUSUpload(\'myuid\')\n         self.assertEqual(0, tus.length())\n+        tus.cleanup()\n \n     def test_offset_returns_zero_if_file_doesnt_exist(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n         self.assertEqual(0, tus.offset())\n+        tus.cleanup()\n \n     def test_offset_returns_size_of_current_file(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n         tus.write(StringIO(\'0123456789\'))\n         self.assertEqual(10, tus.offset())\n+        tus.cleanup()\n \n     def test_write_creates_new_file(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n         tus.write(StringIO(\'0123456789\'))\n         self.assertTrue(os.path.isfile(tus.filepath))\n+        tus.cleanup()\n \n     def test_write_appends_to_file_at_given_offset(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n@@ -501,20 +518,24 @@ def test_write_appends_to_file_at_given_offset(self):\n         with open(tus.filepath, \'rb\') as f:\n             data = f.read()\n         self.assertEqual(\'0123456789abc\', data)\n+        tus.cleanup()\n \n     def test_write_sets_finished_flag(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 10})\n         tus.write(StringIO(\'0123456789\'))\n         self.assertTrue(tus.finished)\n+        tus.cleanup()\n \n     def test_metadata_returns_empty_dict_if_no_metadata_has_been_set(self):\n         tus = TUSUpload(\'myuid\')\n         self.assertEqual({}, tus.metadata())\n+        tus.cleanup()\n \n     def test_expires_returns_expiration_time_of_current_upload(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n         tus.write(StringIO(\'0123456789\'))\n         self.assertGreater(DateTime(tus.expires()), DateTime())\n+        tus.cleanup()\n \n     def test_cleanup_removes_upload_file(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n@@ -542,6 +563,7 @@ def test_cleanup_expired_files(self):\n         self.assertFalse(os.path.exists(filepath))\n         self.assertFalse(os.path.exists(metadata_path))\n         self.assertFalse(os.path.exists(metadata_only_path))\n+        tus.cleanup()\n \n     def tearDown(self):\n         client_home = os.environ.get(\'CLIENT_HOME\')\ndiff --git a/src/plone/restapi/tests/test_workflow.py b/src/plone/restapi/tests/test_workflow.py\nindex 4a699fce..9d1524ce 100644\n--- a/src/plone/restapi/tests/test_workflow.py\n+++ b/src/plone/restapi/tests/test_workflow.py\n@@ -89,7 +89,7 @@ def setUp(self):\n         self.request = self.layer[\'request\']\n         self.wftool = getToolByName(self.portal, \'portal_workflow\')\n         login(self.portal, SITE_OWNER_NAME)\n-        self.portal.invokeFactory(\'DXTestDocument\', id=\'doc1\')\n+        self.portal.invokeFactory(\'Document\', id=\'doc1\')\n \n     def traverse(self, path=\'/plone\', accept=\'application/json\',\n                  method=\'POST\'):\n@@ -128,15 +128,46 @@ def test_transition_with_comment(self):\n         res = service.reply()\n         self.assertEqual(u\'A comment\', res[u\'comments\'])\n \n-    def test_transition_with_invalid_body(self):\n-        self.request[\'BODY\'] = \'{"comment": "A comment", "test": "123"}\'\n+    def test_transition_including_children(self):\n+        folder = self.portal[self.portal.invokeFactory(\'Folder\', id=\'folder\')]\n+        subfolder = folder[folder.invokeFactory(\'Folder\', id=\'subfolder\')]\n+        self.request[\'BODY\'] = (\n+            \'{"comment": "A comment", "include_children": true}\')\n+        service = self.traverse(\'/plone/folder/@workflow/publish\')\n+        service.reply()\n+        self.assertEqual(200, self.request.response.getStatus())\n+        self.assertEqual(\n+            u\'published\',\n+            self.wftool.getInfoFor(folder, u\'review_state\'))\n+        self.assertEqual(\n+            u\'published\',\n+            self.wftool.getInfoFor(subfolder, u\'review_state\'))\n+\n+    def test_transition_with_effective_date(self):\n+        self.request[\'BODY\'] = \'{"effective": "2018-06-24T09:17:02"}\'\n         service = self.traverse(\'/plone/doc1/@workflow/publish\')\n-        res = service.reply()\n-        self.assertEqual(400, self.request.response.getStatus())\n-        self.assertEqual(\'Invalid body\', res[\'error\'][\'message\'])\n+        service.reply()\n+        self.assertEqual(\n+            \'2018-06-24T09:17:00+00:00\',\n+            self.portal.doc1.effective().ISO8601())\n+\n+    def test_transition_with_expiration_date(self):\n+        self.request[\'BODY\'] = \'{"expires": "2019-06-20T18:00:00"}\'\n+        service = self.traverse(\'/plone/doc1/@workflow/publish\')\n+        service.reply()\n+        self.assertEqual(\n+            \'2019-06-20T18:00:00+00:00\',\n+            self.portal.doc1.expires().ISO8601())\n \n     def test_invalid_transition_results_in_400(self):\n         service = self.traverse(\'/plone/doc1/@workflow/foo\')\n         res = service.reply()\n         self.assertEqual(400, self.request.response.getStatus())\n         self.assertEqual(\'WorkflowException\', res[\'error\'][\'type\'])\n+\n+    def test_invalid_effective_date_results_in_400(self):\n+        self.request[\'BODY\'] = \'{"effective": "now"}\'\n+        service = self.traverse(\'/plone/doc1/@workflow/publish\')\n+        res = service.reply()\n+        self.assertEqual(400, self.request.response.getStatus())\n+        self.assertEqual(\'Bad Request\', res[\'error\'][\'type\'])\ndiff --git a/src/plone/restapi/types/adapters.py b/src/plone/restapi/types/adapters.py\nindex e1223c69..e68ef522 100644\n--- a/src/plone/restapi/types/adapters.py\n+++ b/src/plone/restapi/types/adapters.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n """JsonSchema providers."""\n from plone.app.textfield.interfaces import IRichText\n+from plone.schema import IJSONField\n from zope.component import adapter\n from zope.component import getMultiAdapter\n from zope.i18n import translate\n@@ -333,7 +334,6 @@ def additional(self):\n             \'schema\': key_type.get_schema(),\n             \'additional\': key_type.additional(),\n         }\n-\n         value_type = getMultiAdapter(\n             (self.field.key_type, self.context, self.request),\n             IJsonSchemaProvider\n@@ -385,3 +385,21 @@ class DatetimeJsonSchemaProvider(DateJsonSchemaProvider):\n \n     def get_widget(self):\n         return \'datetime\'\n+\n+\n+\n+@adapter(ITuple, Interface, Interface)\n+@implementer(IJsonSchemaProvider)\n+class SubjectsFieldJsonSchemaProvider(ChoiceJsonSchemaProvider):\n+    pass\n+\n+\n+@adapter(IJSONField, Interface, Interface)\n+@implementer(IJsonSchemaProvider)\n+class JSONFieldSchemaProvider(DefaultJsonSchemaProvider):\n+\n+    def get_type(self):\n+        return \'dict\'\n+\n+    def get_widget(self):\n+        return \'json\'\ndiff --git a/src/plone/restapi/types/configure.zcml b/src/plone/restapi/types/configure.zcml\nindex 3cf63a17..bfb356b2 100644\n--- a/src/plone/restapi/types/configure.zcml\n+++ b/src/plone/restapi/types/configure.zcml\n@@ -27,5 +27,6 @@\n     <adapter factory=".adapters.RichTextJsonSchemaProvider" />\n     <adapter factory=".adapters.DateJsonSchemaProvider" />\n     <adapter factory=".adapters.DatetimeJsonSchemaProvider" />\n+    <adapter factory=".adapters.JSONFieldSchemaProvider" />\n \n </configure>\ndiff --git a/test-no-sphinx-warnings.in b/test-no-sphinx-warnings.in\nnew file mode 100644\nindex 00000000..8dfb0aac\n--- /dev/null\n+++ b/test-no-sphinx-warnings.in\n@@ -0,0 +1,40 @@\n+#!/bin/bash\n+#\n+# CI test that should fail if there are warnings or even errors when building\n+# the Sphinx docs.\n+\n+set -euo pipefail\n+\n+BUILD_LOG="sphinx_build.log"\n+\n+function red {\n+    RED=$(tput setaf 1)\n+    RESET=$(tput sgr0)\n+    echo "$RED $1 $RESET"\n+}\n+\n+bin/sphinxbuilder 2>&1 | tee $BUILD_LOG\n+BUILD_RETCODE=$?\n+\n+! grep -q \'WARNING: \' $BUILD_LOG\n+WARNINGS=$?\n+\n+# Fail the build if either\n+# - exit code is 1\n+# - or there are WARNINGs in Sphinx build output\n+\n+if [[ $WARNINGS = 1 || $BUILD_RETCODE = 1 ]]; then\n+    red "ERROR: There have been warnings or errors when building Sphinx docs!"\n+    red ""\n+    red "This probably means these have been introduced by your changes."\n+    red "Please take the time to check the output of the Sphinx build and"\n+    red "address these warnings."\n+    red ""\n+    red "You should see the Sphinx build output just above, or you can run"\n+    red "bin/sphinxbuilder"\n+    red "locally to build the documentation (and then open docs/html/index.html"\n+    red "to view it)."\n+    exit 1\n+else\n+    exit 0\n+fi\ndiff --git a/test-no-uncommitted-doc-changes.in b/test-no-uncommitted-doc-changes.in\nindex 411a8479..878f2f80 100644\n--- a/test-no-uncommitted-doc-changes.in\n+++ b/test-no-uncommitted-doc-changes.in\n@@ -5,7 +5,7 @@\n #\n # (To be executed after running tests in test_documentation.py)\n \n-DUMPS_DIR="docs/source/_json/"\n+DUMPS_DIR="src/plone/restapi/tests/http-examples/"\n \n function red {\n     RED=$(tput setaf 1)\n@@ -13,10 +13,10 @@ function red {\n     echo "$RED $1 $RESET"\n }\n \n-if [ "$PLONE_VERSION" = "4.3.x" ] || [ "$PLONE_VERSION" = "5.1.x" ]; then\n+if [ "$PLONE_VERSION" = "4.3.x" ] || [ "$PLONE_VERSION" = "5.0.x" ]; then\n     # request/response dumps have known differences for Plone 5\n     # => skip, we can\'t have the Plone 5 build fail because of those\n-    echo "Skipping checks for undocumented changes for Plone 5.0.x"\n+    echo "Skipping checks for undocumented changes for Plone 4 and 5.0.x"\n     exit 0\n fi\n \ndiff --git a/versions.cfg b/versions.cfg\nindex 3a19064f..f9083016 100644\n--- a/versions.cfg\n+++ b/versions.cfg\n@@ -27,15 +27,14 @@ Jinja2 = 2.10\n Babel = 2.5.1\n \n # Release\n-zest.releaser = 6.12.4\n-twine = 1.9.1\n+zest.releaser = 6.14.0\n+twine = 1.10.0\n requests = 2.18.4\n \n # Tests\n collective.xmltestreport = 1.3.4\n+plone.testing = 4.3.1\n \n # Misc\n plone.recipe.zope2instance = 4.4.0\n-plone.testing = 4.3.0\n-pytz = 2017.3\n-zope.interface = 4.1.0\n+plone.schema = 1.2.0\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-07-06T16:58:54+02:00
Author: Timo Stollenwerk (tisto) <stollenwerk@kitconcept.com>
Commit: https://github.com/plone/plone.restapi/commit/fe44013cd08fe61683bf53443bccc2ea2acc464e

Merge

Files changed:
M src/plone/restapi/tests/test_services_vocabularies.py
M src/plone/restapi/types/adapters.py

b"diff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 4163f611..d5e63207 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -62,7 +62,6 @@ def test_get_vocabulary(self):\n         response = response.json()\n         self.assertEqual(\n             response,\n-<<<<<<< HEAD\n             {\n                 u'@id': u'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary',  # noqa\n                 u'items': [\n@@ -117,16 +116,6 @@ def test_get_vocabulary_filtered(self):\n                 u'items_total': 1,\n             }\n         )\n-=======\n-            {u'@id': self.portal_url + u'/@vocabularies/''plone.restapi.tests.test_vocabulary',  # noqa\n-             u'terms': [\n-                 {u'@id': self.portal_url + u'/@vocabularies/plone.restapi.tests.test_vocabulary/token1',  # noqa\n-                  u'title': u'Title 1',\n-                  u'token': u'token1'},\n-                 {u'@id': self.portal_url + u'/@vocabularies/plone.restapi.tests.test_vocabulary/token2',  # noqa\n-                  u'title': u'Title 2',\n-                  u'token': u'token2'}]})\n->>>>>>> master\n \n     def test_get_unknown_vocabulary(self):\n         response = self.api_session.get(\n@@ -185,23 +174,13 @@ def test_context_vocabulary(self):\n         self.assertEqual(\n             response.json(),\n             {\n-<<<<<<< HEAD\n                 u'@id': u'http://localhost:55001/plone/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary',  # noqa\n                 u'items': [\n                     {u'title': u'testdoc', u'token': u'id'},\n                     {u'title': u'Document 1', u'token': u'title'},\n                 ],\n                 u'items_total': 2,\n-=======\n-                u'@id': self.portal_url + u'/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary',  # noqa\n-                u'terms': [\n-                    {u'@id': self.portal_url + u'/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary/id',  # noqa\n-                     u'title': u'testdoc',\n-                     u'token': u'id'},\n-                    {u'@id': self.portal_url + u'/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary/title',  # noqa\n-                     u'title': u'Document 1',\n-                     u'token': u'title'}]\n->>>>>>> master\n+\n             })\n \n     def tearDown(self):\ndiff --git a/src/plone/restapi/types/adapters.py b/src/plone/restapi/types/adapters.py\nindex e68ef522..2ff8fa60 100644\n--- a/src/plone/restapi/types/adapters.py\n+++ b/src/plone/restapi/types/adapters.py\n@@ -387,7 +387,6 @@ def get_widget(self):\n         return 'datetime'\n \n \n-\n @adapter(ITuple, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class SubjectsFieldJsonSchemaProvider(ChoiceJsonSchemaProvider):\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-03-11T12:27:07+01:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/2761cf723fdef8b5825f2ed0a39c53cc21f89cf3

Merge branch 'master' into filtered-batched-vocabs

Files changed:
A docs/source/contributing.rst
A news/.gitkeep
A plone-5.2.x.cfg
A pyproject.toml
A src/plone/restapi/profiles/tiles/metadata.xml
A src/plone/restapi/profiles/tiles/types.xml
A src/plone/restapi/profiles/tiles/types/Document.xml
A src/plone/restapi/tests/http-examples/search_fullobjects.req
A src/plone/restapi/tests/http-examples/search_fullobjects.resp
A src/plone/restapi/tests/http-examples/search_metadata_fields.req
A src/plone/restapi/tests/http-examples/search_metadata_fields.resp
A src/plone/restapi/tests/http-examples/search_multiple_paths.req
A src/plone/restapi/tests/http-examples/search_multiple_paths.resp
A src/plone/restapi/tests/http-examples/search_options.req
A src/plone/restapi/tests/http-examples/search_options.resp
A src/plone/restapi/tests/test_profile_tiles.py
M .gitignore
M .travis.yml
M CHANGES.rst
M CONTRIBUTORS.rst
M MANIFEST.in
M Makefile
M README.rst
M base.cfg
M docs/source/index.rst
M docs/source/readthedocs-requirements.txt
M docs/source/searching.rst
M docs/source/tiles.rst
M performance.jmx
M plone-4.3.x-performance.cfg
M plone-4.3.x.cfg
M plone-5.0.x-performance.cfg
M plone-5.0.x.cfg
M plone-5.1.x-performance.cfg
M plone-5.1.x.cfg
M requirements.txt
M setup.py
M src/plone/restapi/__init__.py
M src/plone/restapi/batching.py
M src/plone/restapi/configure.zcml
M src/plone/restapi/demo/demo.py
M src/plone/restapi/deserializer/__init__.py
M src/plone/restapi/deserializer/atcontent.py
M src/plone/restapi/deserializer/configure.zcml
M src/plone/restapi/deserializer/controlpanels.py
M src/plone/restapi/deserializer/dxcontent.py
M src/plone/restapi/deserializer/dxfields.py
M src/plone/restapi/deserializer/relationfield.py
M src/plone/restapi/deserializer/site.py
M src/plone/restapi/imaging.py
M src/plone/restapi/pas/plugin.py
M src/plone/restapi/search/handler.py
M src/plone/restapi/search/utils.py
M src/plone/restapi/serializer/atcollection.py
M src/plone/restapi/serializer/atcontent.py
M src/plone/restapi/serializer/atfields.py
M src/plone/restapi/serializer/catalog.py
M src/plone/restapi/serializer/configure.zcml
M src/plone/restapi/serializer/converters.py
M src/plone/restapi/serializer/dxcontent.py
M src/plone/restapi/serializer/expansion.py
M src/plone/restapi/serializer/group.py
M src/plone/restapi/serializer/registry.py
M src/plone/restapi/serializer/site.py
M src/plone/restapi/serializer/user.py
M src/plone/restapi/services/__init__.py
M src/plone/restapi/services/auth/login.py
M src/plone/restapi/services/content/add.py
M src/plone/restapi/services/content/tus.py
M src/plone/restapi/services/content/utils.py
M src/plone/restapi/services/copymove/copymove.py
M src/plone/restapi/services/discussion/conversation.py
M src/plone/restapi/services/email_send/post.py
M src/plone/restapi/services/groups/delete.py
M src/plone/restapi/services/groups/get.py
M src/plone/restapi/services/groups/update.py
M src/plone/restapi/services/history/get.py
M src/plone/restapi/services/history/patch.py
M src/plone/restapi/services/multilingual/pam.py
M src/plone/restapi/services/registry/get.py
M src/plone/restapi/services/tiles/get.py
M src/plone/restapi/services/types/get.py
M src/plone/restapi/services/users/add.py
M src/plone/restapi/services/users/delete.py
M src/plone/restapi/services/users/get.py
M src/plone/restapi/services/users/update.py
M src/plone/restapi/services/vocabularies/get.py
M src/plone/restapi/services/workflow/configure.zcml
M src/plone/restapi/services/workflow/info.py
M src/plone/restapi/services/workflow/transition.py
M src/plone/restapi/setuphandlers.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/dxtypes.py
M src/plone/restapi/tests/helpers.py
M src/plone/restapi/tests/http-examples/groups.resp
M src/plone/restapi/tests/http-examples/groups_created.resp
M src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp
M src/plone/restapi/tests/http-examples/groups_get.resp
M src/plone/restapi/tests/http-examples/jwt_logged_in.resp
M src/plone/restapi/tests/http-examples/principals.resp
M src/plone/restapi/tests/http-examples/registry_get_list.resp
M src/plone/restapi/tests/http-examples/siteroot.resp
M src/plone/restapi/tests/http-examples/users.resp
M src/plone/restapi/tests/http-examples/users_add.resp
M src/plone/restapi/tests/http-examples/users_authorized_get.resp
M src/plone/restapi/tests/http-examples/users_created.resp
M src/plone/restapi/tests/http-examples/users_filtered_by_username.resp
M src/plone/restapi/tests/http-examples/users_get.resp
M src/plone/restapi/tests/mixin_ordering.py
M src/plone/restapi/tests/performance.py
M src/plone/restapi/tests/test_atcollection.py
M src/plone/restapi/tests/test_atcontent_deserializer.py
M src/plone/restapi/tests/test_atcontent_serializer.py
M src/plone/restapi/tests/test_atfield_deserializer.py
M src/plone/restapi/tests/test_atfield_serializer.py
M src/plone/restapi/tests/test_batching.py
M src/plone/restapi/tests/test_comments.py
M src/plone/restapi/tests/test_content_delete.py
M src/plone/restapi/tests/test_content_get.py
M src/plone/restapi/tests/test_content_local_roles.py
M src/plone/restapi/tests/test_content_patch.py
M src/plone/restapi/tests/test_content_post.py
M src/plone/restapi/tests/test_content_utils.py
M src/plone/restapi/tests/test_copymove.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_dxcontent_deserializer.py
M src/plone/restapi/tests/test_dxcontent_serializer.py
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_dxfield_serializer.py
M src/plone/restapi/tests/test_error_handling.py
M src/plone/restapi/tests/test_expansion.py
M src/plone/restapi/tests/test_locking.py
M src/plone/restapi/tests/test_pas.py
M src/plone/restapi/tests/test_permissions.py
M src/plone/restapi/tests/test_registry.py
M src/plone/restapi/tests/test_registry_serializer.py
M src/plone/restapi/tests/test_roles.py
M src/plone/restapi/tests/test_search.py
M src/plone/restapi/tests/test_search_utils.py
M src/plone/restapi/tests/test_serializer.py
M src/plone/restapi/tests/test_serializer_catalog.py
M src/plone/restapi/tests/test_serializer_converters.py
M src/plone/restapi/tests/test_serializer_group.py
M src/plone/restapi/tests/test_serializer_summary.py
M src/plone/restapi/tests/test_serializer_user.py
M src/plone/restapi/tests/test_services.py
M src/plone/restapi/tests/test_services_actions.py
M src/plone/restapi/tests/test_services_breadcrumbs.py
M src/plone/restapi/tests/test_services_comments.py
M src/plone/restapi/tests/test_services_content.py
M src/plone/restapi/tests/test_services_controlpanels.py
M src/plone/restapi/tests/test_services_email_notification.py
M src/plone/restapi/tests/test_services_email_send.py
M src/plone/restapi/tests/test_services_groups.py
M src/plone/restapi/tests/test_services_history.py
M src/plone/restapi/tests/test_services_navigation.py
M src/plone/restapi/tests/test_services_principals.py
M src/plone/restapi/tests/test_services_tiles.py
M src/plone/restapi/tests/test_services_types.py
M src/plone/restapi/tests/test_services_users.py
M src/plone/restapi/tests/test_services_vocabularies.py
M src/plone/restapi/tests/test_setup.py
M src/plone/restapi/tests/test_site_deserializer.py
M src/plone/restapi/tests/test_site_serializer.py
M src/plone/restapi/tests/test_translations.py
M src/plone/restapi/tests/test_tus.py
M src/plone/restapi/tests/test_types.py
M src/plone/restapi/tests/test_workflow.py
M src/plone/restapi/types/utils.py
M test-no-sphinx-warnings.in
M test-no-uncommitted-doc-changes.in
M versions.cfg

b'diff --git a/.gitignore b/.gitignore\nindex e79fd8c8..f86d13aa 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -34,3 +34,4 @@ pip-selfcheck.json\n /.idea\n /.vscode\n /.ipython\n+/.mypy_cache/\n\\ No newline at end of file\ndiff --git a/.travis.yml b/.travis.yml\nindex 5d46b12a..1285c66b 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -1,6 +1,10 @@\n language: python\n-python: "2.7"\n-sudo: false\n+python:\n+  - "2.7"\n+  - "3.6"\n+  - "3.7"\n+dist: xenial\n+sudo: required\n services:\n   - docker\n cache:\n@@ -11,10 +15,25 @@ env:\n   global:\n     - secure: "tj9kO7Uyn7AY2Z6zhdOggLSYheaD8e+qKA7ZXvdWTrL2HtPAtnNJK8keQGj1JLQyy6bRfoOCt51aL8+Lc0fzcACaLFpAPjleSLtUChphPOh/dqTu1QX5oL0SxZ94B4ZC5+qfaSAQHMwbiiWUW0us9QtJpxQQmiJUekqiTdQDNEo="\n     - secure: "j06un+j2gHjlGfg+xMcvKG2osf1HSzBq/cPPNIonnjGQY3GJfT/YRzYnHe5LJPPt7IJDD7hAEPentRJ4C0zP66U6gcQ2HjWPsMIcvzlgnXoT2QaaCVkMA9YS4WOsN0C5iY/R64GjFwR7J+/bgeG64XvfhpuQ/UBP2+U68PqSBtM="\n-  matrix:\n-    - PLONE_VERSION=4.3.x\n-    - PLONE_VERSION=5.0.x\n-    - PLONE_VERSION=5.1.x\n+    - ZSERVER_PORT=55001\n+matrix:\n+  include:\n+  - python: "2.7"\n+    env: PLONE_VERSION=4.3.x\n+  - python: "2.7"\n+    env: PLONE_VERSION=5.0.x\n+  - python: "2.7"\n+    env: PLONE_VERSION=5.1.x\n+  - python: "2.7"\n+    env: PLONE_VERSION=5.2.x\n+  - python: "3.6"\n+    env: PLONE_VERSION=5.2.x\n+  - python: "3.7"\n+    env: PLONE_VERSION=5.2.x\n+  exclude:\n+  - python: "2.7"\n+  - python: "3.6"\n+  - python: "3.7"\n before_install:\n   - mkdir -p $HOME/buildout-cache/{eggs,downloads}\n   - mkdir $HOME/.buildout\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 85a65c85..cdfbdf04 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,7 +1,6 @@\n Changelog\n =========\n \n-\n 3.0.0 (unreleased)\n ------------------\n \n@@ -43,7 +42,166 @@ Bugfixes:\n   [davisagli]\n \n \n-3.2.2 (unreleased)\n+.. You should *NOT* be adding new change log entries to this file.\n+   You should create a file in the news directory instead.\n+   For helpful instructions, please see:\n+   https://github.com/plone/plone.releaser/blob/master/ADD-A-NEWS-ITEM.rst\n+\n+.. towncrier release notes start\n+\n+3.7.3 (2019-03-08)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Use environment-markers instead of python-logic to specify dependencies for py2.\n+  [pbauer] (#688)\n+\n+\n+3.7.2 (2019-03-07)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Fix TUS upload events `#689 <https://github.com/plone/plone.restapi/issues/689>`_.\n+  [buchi] (#689)\n+\n+\n+3.7.1 (2019-03-06)\n+------------------\n+\n+Bugfixes:\n+\n+- Fix release to not create universal (Python 2/3) wheels.\n+  [gforcada]\n+\n+- Install zestreleaser.towncrier in the buildout to the changelog is updated correctly. (#684)\n+  [maurits]\n+\n+\n+3.7.0 (2019-03-04)\n+------------------\n+\n+New Features:\n+\n+- Add group roles to @groups serializer\n+  [sneridagh]\n+\n+\n+3.6.0 (2019-02-16)\n+------------------\n+\n+New Features:\n+\n+- Enhance site root to serialize and deserialize \'tiles\' and \'tiles_layout\' attributes.\n+  [sneridagh]\n+\n+- Fix @workflow endpoint on site root to return an empty object instead of a 404.\n+  [sneridagh]\n+\n+\n+3.5.2 (2019-02-14)\n+------------------\n+\n+Bugfixes:\n+\n+- Fix serializing the Event type. This fixes https://github.com/plone/plone.restapi/issues/664.\n+  [davisagli, elioschmutz]\n+\n+\n+3.5.1 (2019-02-05)\n+------------------\n+\n+Bugfixes:\n+\n+- Do not fail on serializing types with fields having non-parametrized widgets.\n+  Fixes issue `664 <https://github.com/plone/plone.restapi/issues/664>`_.\n+  [elioschmutz]\n+\n+\n+3.5.0 (2018-11-06)\n+------------------\n+\n+New Features:\n+\n+- Add Python 3 support.\n+  [pbauer, davisagli]\n+\n+\n+3.4.5 (2018-09-14)\n+------------------\n+\n+Bugfixes:\n+\n+- Avoid ``AttributeError`` on add-on installation (fixes `#465 <https://github.com/plone/plone.restapi/issues/465>`_.\n+  [lukasgraf, hvelarde]\n+\n+- Make search work with a path query containing a list of paths in a virtual hosting setting.\n+  [sunew]\n+\n+\n+3.4.4 (2018-08-31)\n+------------------\n+\n+Bugfixes:\n+\n+- Generalize the last bugfix solution for searching the userid on password\n+  reset requests, matching it with Plone\'s one. This covers all the request\n+  use cases.\n+  [sneridagh]\n+\n+\n+3.4.3 (2018-08-30)\n+------------------\n+\n+Bugfixes:\n+\n+- Add "Use UUID as user ID" support for password resets\n+  [sneridagh]\n+\n+\n+3.4.2 (2018-08-27)\n+------------------\n+\n+Bugfixes:\n+\n+- Add missing "Use UUID as user ID" support to POST @users endpoint on user creation.\n+  Also improve the userid/username chooser by using the same process as Plone does.\n+  This fixes: https://github.com/plone/plone.restapi/issues/586\n+  [sneridagh]\n+\n+\n+3.4.1 (2018-07-22)\n+------------------\n+\n+Bugfixes:\n+\n+- Make sure the default profile is installed on tiles profile installation.\n+  [timo]\n+\n+\n+3.4.0 (2018-07-21)\n+------------------\n+\n+New Features:\n+\n+- Add tiles profile.\n+  [timo]\n+\n+\n+3.3.0 (2018-07-20)\n+------------------\n+\n+New Features:\n+\n+- Return member fields based on user schema in `@users` endpoint instead of a\n+  fixed list of member properties.\n+  [buchi]\n+\n+\n+3.2.2 (2018-07-19)\n ------------------\n \n Bugfixes:\n@@ -62,6 +220,12 @@ Bugfixes:\n - Make setup.py require plone.behavior >= 1.1. This fixes #575.\n   [timo]\n \n+- Fixes ``test_search`` to work with bug fixed ``plone.indexer``.\n+  Now ``DXTestDocument`` explicit got an attribute ``exclude_from_nav``.\n+  This fixes `issue 579 <https://github.com/plone/plone.restapi/issues/579>`_.\n+  Refers to `Products.CMFPlone Issue 2469 <https://github.com/plone/Products.CMFPlone/issues/2469>`_\n+  [jensens]\n+\n \n 3.2.1 (2018-06-28)\n ------------------\ndiff --git a/CONTRIBUTORS.rst b/CONTRIBUTORS.rst\nindex c86593a7..fb6b2a36 100644\n--- a/CONTRIBUTORS.rst\n+++ b/CONTRIBUTORS.rst\n@@ -2,15 +2,15 @@\n     place names and roles of the people who contribute to this package\n     in this file, one to a line, like so:\n \n-- Timo Stollenwerk, Original Author\n-- Thomas Buchberger\n-- Lukas Graf\n-- V\xc3\xadctor Fern\xc3\xa1ndez de Alba\n+- Timo Stollenwerk, kitconcept GmbH, Original Author\n+- Thomas Buchberger, 4teamwork\n+- Lukas Graf, 4teamwork\n+- V\xc3\xadctor Fern\xc3\xa1ndez de Alba, kitconcept GmbH\n - Paul Roeland\n-- Mikel Larreategi\n+- Mikel Larreategi, codesyntax\n - Eric Brehault\n - Andreas Zeidler\n-- Carsten Senger\n+- Carsten Senger, kitconcept GmbH\n - Tom Gross\n - Roel Bruggink\n - Yann Fouillat, alias Gagaro\ndiff --git a/MANIFEST.in b/MANIFEST.in\nindex 9d0b6b2d..19c0b7e9 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -1,7 +1,18 @@\n graft src/plone/restapi\n graft docs\n include *.rst\n+include *.txt\n exclude *.cfg\n exclude *.yml\n+exclude *.in\n+exclude *.jmx\n+exclude *.yaml\n+exclude .coveragerc\n+exclude .editorconfig\n+exclude Dockerfile\n+exclude Makefile\n exclude bootstrap-buildout.py\n global-exclude *.pyc\n+include pyproject.toml\n+recursive-exclude news *\n+exclude news\ndiff --git a/Makefile b/Makefile\nindex f1004493..9966e6bf 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -9,9 +9,21 @@ all: .installed.cfg\n \tbin/buildout\n \n bin/buildout: bin/pip\n-\tbin/pip install --upgrade pip setuptools zc.buildout\n+\tbin/pip install --upgrade pip\n+\tbin/pip install -r requirements.txt\n \t@touch -c $@\n \n+build-plone-5.2: .installed.cfg\n+\tbin/pip install --upgrade pip\n+\tbin/pip install -r requirements.txt\n+\tbin/buildout -c plone-5.2.x.cfg\n+\n+build-py3:\n+\tvirtualenv --python=python3 .\n+\tbin/pip install --upgrade pip\n+\tbin/pip install -r requirements.txt\n+\tbin/buildout -c plone-5.2.x.cfg\n+\n bin/python bin/pip:\n \tvirtualenv --clear --python=python$(version) .\n \ndiff --git a/README.rst b/README.rst\nindex 272ae31f..dd7af9ad 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -8,7 +8,7 @@\n    :target: https://landscape.io/github/plone/plone.restapi/master\n    :alt: Code Health\n \n-.. image:: https://readthedocs.org/projects/pip/badge/\n+.. image:: https://readthedocs.org/projects/pip/badge\n   :target: https://plonerestapi.readthedocs.org\n \n .. image:: https://img.shields.io/pypi/v/plone.restapi.svg\n@@ -21,30 +21,14 @@ Introduction\n plone.restapi is a RESTful hypermedia API for Plone.\n \n \n-RESTful Hypermedia API\n-----------------------\n-\n-REST stands for `Representational State Transfer <http://en.wikipedia.org/wiki/Representational_state_transfer>`_. It is a software architectural principle to create loosely coupled web APIs.\n-\n-Most web APIs have a tight coupling between client and server. This makes them brittle and hard to change over time. It requires them not only to fully document every small detail of the API, but also to write a client implementation that follows that specification 100% correctly and breaks as soon as you change any detail.\n-\n-A hypermedia API just provides an entry point to the API that contains hyperlinks the clients can follow, just\xc2\xa0as a human user of a regular website knows the initial URL of the site and then follows hyperlinks to navigate through the site. This has the advantage that the client needs to understand only how to detect and follow links. The URL and other details of the API can change without breaking the client.\n-\n-\n Documentation\n =============\n \n http://plonerestapi.readthedocs.org\n \n \n-Roadmap\n-=======\n-\n-https://github.com/plone/plone.restapi/milestones\n-\n-\n-Live Demo\n-=========\n+Getting started\n+===============\n \n A live demo of Plone 5 with the latest plone.restapi release is available at:\n \n@@ -52,48 +36,60 @@ http://plonedemo.kitconcept.com\n \n Example GET request on the portal root::\n \n-  $ curl -i http://plonedemo.kitconcept.com -H "Accept: application/json"\n+  $ curl -i https://plonedemo.kitconcept.com -H "Accept: application/json"\n \n Example POST request to create a new document::\n \n-  $ curl -i -X POST http://plonedemo.kitconcept.com -H "Accept: application/json" -H "Content-Type: application/json" --data-raw \'{"@type": "Document", "title": "My Document"}\' --user admin:admin\n+  $ curl -i -X POST https://plonedemo.kitconcept.com -H "Accept: application/json" -H "Content-Type: application/json" --data-raw \'{"@type": "Document", "title": "My Document"}\' --user admin:admin\n \n .. note:: You will need some kind of API browser application to explore the API. We recommend using `Postman <http://www.getpostman.com/>`_.\n \n \n-Design Decisions\n-================\n+Installation\n+============\n \n-* A truly RESTful API (Hypermedia / HATEOAS / Linked-data)\n-* JSON is the main target format; support for other formats (HTML, XML) will come later\n-* Use HTTP headers (to set format and versioning, also provide URL-based option to make it easier for people to try it out)\n-* No versioning; versioning in the HTTP header can be added later\n-* Field names just map over (we will not try to clean up attributes or enforce naming standards like pep8 (e.g. isPrincipiaFoldish -> is_folderish)\n+Install plone.restapi by adding it to your buildout::\n \n+    [buildout]\n \n-Software Quality\n-================\n+    ...\n \n-* 100% test coverage\n-* 100% PEP8 compliant\n-* Documentation-first approach for enhancements\n+    eggs =\n+        plone.restapi\n \n \n-Further Reading\n-===============\n+and then running ``bin/buildout``\n+\n+\n+Contribute\n+==========\n+\n+- Issue Tracker: https://github.com/plone/plone.restapi/issues\n+- Source Code: https://github.com/plone/plone.restapi\n+- Documentation: https://plonerestapi.readthedocs.io/en/latest\n \n-* `REST in Practice: Hypermedia and Systems Architecture (Webber, Parastatidis, Robinson) <http://www.amazon.com/gp/product/0596805829>`_\n \n+Examples\n+========\n+\n+plone.restapi is used in production since the first alpha release.\n+It can be seen in action at the following sites:\n+\n+- Zeelandia GmbH & Co. KG: https://www.zeelandia.de (by kitconcept GmbH)\n+- VHS-Ehrenamtsportal: https://vhs-ehrenamtsportal.de (by kitconcept GmbH)\n+- German Physical Society: https://www.dpg-physik.de (by kitconcept GmbH)\n+- Universitat Polit\xc3\xa8cnica de Catalunya: https://www.upc.edu (by kitconcept GmbH)\n+\n+Support\n+=======\n+\n+If you are having issues, please let us know via the issue tracker.\n \n-Standards\n-=========\n+If you required professional support, here is a list of Plone solution providers that contributed significantly to plone.restapi in the past:\n \n-- `JSON-LD <http://www.w3.org/TR/json-ld/>`_\n-- `JSON Schema <http://json-schema.org/>`_\n-- `Schema.org <http://schema.org/>`_\n-- `Hydra <http://www.w3.org/ns/hydra/spec/latest/core/>`_\n-- `Collection+JSON <http://amundsen.com/media-types/collection/>`_\n-- `Siren <https://github.com/kevinswiber/siren>`_\n+- kitconcept GmbH (Germany) https://kitconcept.com\n+- 4teamwork (Switzerland) https://www.4teamwork.ch\n+- CodeSyntax (Spain) https://www.codesyntax.com/en\n \n \n License\ndiff --git a/base.cfg b/base.cfg\nindex 4e6a6580..c75383a8 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -50,7 +50,7 @@ zcml-additional =\n   <configure xmlns="http://namespaces.zope.org/zope"\n              xmlns:plone="http://namespaces.plone.org/plone">\n     <plone:CORSPolicy\n-        allow_origin="http://localhost:4300,http://127.0.0.1:4300"\n+        allow_origin="http://localhost:4300,http://127.0.0.1:4300,http://localhost:3000,http://127.0.0.1:3000"\n         allow_methods="DELETE,GET,OPTIONS,PATCH,POST,PUT"\n         allow_credentials="true"\n         expose_headers="Content-Length,X-My-Header"\n@@ -120,6 +120,8 @@ scripts = dependencychecker\n recipe = zc.recipe.egg\n eggs =\n     zest.releaser[recommended]\n+    zestreleaser.towncrier\n+    towncrier\n     readme\n     docutils\n \n@@ -189,3 +191,6 @@ mode = 755\n [sources]\n plone.rest = git git://github.com/plone/plone.rest.git pushurl=git@github.com:plone/plone.rest.git branch=master\n plone.schema = git git://github.com/plone/plone.schema.git pushurl=git@github.com:plone/plone.schema.git branch=newjsonschemafield\n+\n+[versions]\n+plone.restapi =\ndiff --git a/docs/source/contributing.rst b/docs/source/contributing.rst\nnew file mode 100644\nindex 00000000..e03d24d8\n--- /dev/null\n+++ b/docs/source/contributing.rst\n@@ -0,0 +1,28 @@\n+Contributing to plone.restapi\n+=============================\n+\n+Generating documentation examples\n+---------------------------------\n+\n+This documentation includes examples of requests and responses (http, curl, httpie and python-requests).\n+These examples are generated by the documentation tests in ``test_documentation.py``.\n+To generate a new example, add a new test case to `test_documentation.py` - for example ``test_documentation_search_fullobjects``, and run the test:\n+\n+``./bin/test -t test_documentation_search_fullobjects``\n+\n+This generates the request and the response files in ``tests/http-examples/``.\n+\n+Include them in the documentation like this:\n+\n+.. code-block:: ReST\n+\n+    ..  http:example:: curl httpie python-requests\n+        :request: ../../src/plone/restapi/tests/http-examples/search_fullobjects.req\n+\n+    .. literalinclude:: ../../src/plone/restapi/tests/http-examples/search_fullobjects.resp\n+       :language: http\n+\n+\n+Build the sphinx docs locally to test the rendering by running ``./bin/sphinxbuilder``.\n+\n+Make sure you add and commit the generated files in ``http-examples``.\ndiff --git a/docs/source/index.rst b/docs/source/index.rst\nindex 6cca136e..882b2765 100644\n--- a/docs/source/index.rst\n+++ b/docs/source/index.rst\n@@ -53,6 +53,7 @@ Contents\n    i18n\n    email-notification\n    upgrade-guide\n+   contributing\n \n .. include:: ../../README.rst\n \ndiff --git a/docs/source/readthedocs-requirements.txt b/docs/source/readthedocs-requirements.txt\nindex b4602115..a83252f7 100644\n--- a/docs/source/readthedocs-requirements.txt\n+++ b/docs/source/readthedocs-requirements.txt\n@@ -1,2 +1,2 @@\n sphinxcontrib-httpdomain\n-sphinxcontrib-httpexample\n+sphinxcontrib-httpexample==0.9.1\n\\ No newline at end of file\ndiff --git a/docs/source/searching.rst b/docs/source/searching.rst\nindex e832f630..d7882ed6 100644\n--- a/docs/source/searching.rst\n+++ b/docs/source/searching.rst\n@@ -8,7 +8,7 @@ Content in a Plone site can be searched for by invoking the ``/@search`` endpoin\n     GET /plone/@search HTTP/1.1\n     Accept: application/json\n \n-A search is **contextual** by default, i.e. it is bound to a specific collection and searches within that collection and any sub-collections.\n+A search is **contextual** by default, i.e. it is bound to a specific context (a *collection* in HTTP REST terms) and searches within that collection and any sub-collections.\n \n Since a Plone site is also a collection, we therefore have a global search (by invoking the ``/@search`` endpoint on the site root) and contextual searches (by invoking that endpoint on any other context) all using the same pattern.\n \n@@ -25,6 +25,17 @@ Search results are represented similar to collections:\n The default representation for search results is a summary that contains only the most basic information.\n In order to return specific metadata columns, see the documentation of the ``metadata_fields`` parameter below.\n \n+.. note::\n+        A search invoked on a container will by default **include that container\n+        itself** as part of the search results. This is the same behavior as displayed by\n+        ZCatalog, which is used internally.\n+        If you add the query string\n+        parameter ``depth=1`` to your search, you will only get **immediate**\n+        children of the container, and the container itself also won\'t be part\n+        of the results. See the Plone docs on\n+        `searching for content within a folder <https://docs.plone.org/develop/plone/searching_and_indexing/query.html#searching-for-content-within-a-folder>`_.\n+        for more details.\n+\n .. note::\n         Search results results will be **batched** if the size of the\n         resultset exceeds the batch size. See :doc:`/batching` for more\n@@ -61,13 +72,33 @@ For example, to specify the ``depth`` query option for a path query, the origina\n \n This dictionary will need to be flattened in dotted notation in order to pass it in a query string:\n \n-.. code-block:: http\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/search_options.req\n \n-    GET /plone/@search?path.query=%2Ffolder&path.depth=2 HTTP/1.1\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/search_options.resp\n+   :language: http\n \n Again, this is very similar to how `Record Arguments <http://docs.zope.org/zope2/zdgbook/ObjectPublishing.html?highlight=record#record-arguments>`_ are parsed by ZPublisher, except that you can omit the ``:record`` suffix.\n \n \n+Restricting search to multiple paths\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+To restrict search to multiple paths, the original query as a Python dictionary would look like this (with an optional depth and sort_on)::\n+\n+    query = {\'path\': {\'query\': (\'/folder\', \'/folder2\'),\n+                      \'depth\': 2},\n+             \'sort_on\': \'path\'}\n+\n+This dictionary will need to be flattened in dotted notation in order to pass it in a query string. In order to specify multiple paths, simply repeat the query string parameter (the ``requests`` module will do this automatically for you if you pass it a list of values for a query string parameter).\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/search_multiple_paths.req\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/search_multiple_paths.resp\n+   :language: http\n+\n+\n Data types in queries\n ^^^^^^^^^^^^^^^^^^^^^\n \n@@ -95,10 +126,11 @@ Retrieving additional metadata\n By default the results are represented as summaries that only contain the most basic information about the items, like their URL and title.\n If you need to retrieve additional metadata columns, you can do so by specifying the additional column names in the ``metadata_fields`` parameter:\n \n-.. code-block:: http\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/search_metadata_fields.req\n \n-    GET /plone/@search?SearchableText=lorem&metadata_fields=modified HTTP/1.1\n-    Accept: application/json\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/search_metadata_fields.resp\n+   :language: http\n \n The metadata from those columns then will be included in the results.\n In order to specify multiple columns, simply repeat the query string parameter once for every column name (the ``requests`` module will do this automatically for you if you pass it a list of values for a query string parameter).\n@@ -113,10 +145,11 @@ If the data provided as metadata is not enough, you can retrieve search results\n \n You do so by specifying the ``fullobjects`` parameter:\n \n-.. code-block:: http\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/search_fullobjects.req\n \n-    GET /plone/@search?fullobjects&SearchableText=lorem HTTP/1.1\n-    Accept: application/json\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/search_fullobjects.resp\n+   :language: http\n \n .. warning::\n \ndiff --git a/docs/source/tiles.rst b/docs/source/tiles.rst\nindex 589b13bb..5d11bf61 100644\n--- a/docs/source/tiles.rst\n+++ b/docs/source/tiles.rst\n@@ -7,18 +7,16 @@ Tiles\n   not rely on those technologies. The serialization of the tile information on objects are subject to change in\n   the future to extend or improve features.\n \n-A tile is an HTML snippet that can contain arbitrary content (e.g. text, images, videos).\n+A tile in Plone is an HTML snippet that can contain arbitrary content (e.g. text, images, videos).\n \n-The @tiles endpoint is context specific.\n-Called on the portal root it will list all available tiles,\n-and allows to retrieve the JSON schema for those tiles.\n-\n-If called on a content object, it will return the tiles that are actually stored on that content object.\n \n Listing available tiles\n -----------------------\n \n-List all available tiles type by sending a GET request to the @tiles endpoint on the portal roots::\n+.. note::\n+  This endpoint currently does not return any data. The functionality needs to be implemented.\n+\n+List all available tiles type by sending a GET request to the @tiles endpoint on the portal root::\n \n   GET /plone/@tiles HTTP/1.1\n   Accept: application/json\n@@ -41,8 +39,12 @@ The server responds with a `Status 200` and list all available tiles::\n     },\n   ]\n \n-Retrieve Tile JSON schema\n--------------------------\n+\n+Retrieve JSON schema of an individual tile\n+------------------------------------------\n+\n+.. note::\n+  This endpoint currently does not return any data. The functionality needs to be implemented.\n \n Retrieve the JSON schema of a specific tile by calling the \'@tiles\' endpoint with the id of the tile::\n \n@@ -75,52 +77,15 @@ The server responds with a JSON schema definition for that particular tile::\n Retrieving tiles on a content object\n ------------------------------------\n \n-Retrieve a list of tiles stored on a content object by calling the @tiles endpoint on a content object::\n+Tiles data are stored in the objects via a Dexterity behavior `plone.tiles`. It has two attributes that stores existing tiles in the object (`tiles`) and the current layout (`tiles_layout`).\n+As it\'s a dexterity behavior, both attributes will be returned in a simple GET::\n \n-  GET /plone/my-document/@tiles HTTP/1.1\n+  GET /plone/my-document HTTP/1.1\n   Accept: application/json\n   Authorization: Basic YWRtaW46c2VjcmV0\n \n The server responds with a `Status 200` and list all stored tiles on that content object::\n \n-  HTTP/1.1 200 OK\n-  Content-Type: application/json\n-  {\n-    "@id": "http://localhost:55001/plone/my-document",\n-    ...\n-    "tiles": [\n-      {\n-        "@id": "http://localhost:55001/plone/my-document/@tiles/my-title",\n-        "type": "title",\n-      },\n-      {\n-        "@id": "http://localhost:55001/plone/my-document/@tiles/my-description",\n-        "type": "description",\n-      },\n-      {\n-        "@id": "http://localhost:55001/plone/my-document/@tiles/image-1",\n-        "type": "image",\n-        "data": {\n-          "image": "<some random url>",\n-          "caption": "My pony",\n-        },\n-      },\n-      {\n-        "type": "image",\n-        "data": {\n-          "image": "<some random url>",\n-          "caption": "My cow",\n-        },\n-      },\n-    ]\n-  }\n-\n-\n-Fetching tiles on an object\n----------------------------\n-Tiles data are stored in the objects via a Dexterity behavior `plone.tiles`. It has two attributes that stores existing tiles in the object (`tiles`) and the current layout (`tiles_layout`).\n-As it\'s a dexterity behavior, both attributes will be returned in a simple GET::\n-\n   GET /plone/my-document HTTP/1.1\n   Accept: application/json\n   Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/news/.gitkeep b/news/.gitkeep\nnew file mode 100644\nindex 00000000..e69de29b\ndiff --git a/performance.jmx b/performance.jmx\nindex ba8836f0..da5e981d 100644\n--- a/performance.jmx\n+++ b/performance.jmx\n@@ -1,5 +1,5 @@\n <?xml version="1.0" encoding="UTF-8"?>\n-<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n+<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">\n   <hashTree>\n     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="plone.restapi" enabled="true">\n       <stringProp name="TestPlan.comments"></stringProp>\n@@ -118,7 +118,7 @@\n \t&quot;@type&quot;: &quot;News Item&quot;, &#xd;\n \t&quot;title&quot;: &quot;My News Item&quot;,&#xd;\n \t&quot;image&quot;: {&#xd;\n-\t\t&quot;data&quot;: &quot;TG9yZW0gSXBzdW0uCg==&quot;,&#xd;\n+\t\t&quot;data&quot;: &quot;iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAADRxJREFUeNrsXAtQU2cWvnlAwisogqsrOLvqqqu2xcpsl611q9M6VduOVWmLzrYKLRVtZ53aKR3c1fqc2aHTqttxkHbaop2pFGx1WUFY10VcnCrt7vCYQh2rFcMzPEIMBEhI9jvmzzZFSG6Sm5DEe2bO3Jub5P435/vPOd8597+RWCwWThT/EaloAhEQUURAREBEEQERARFFBEQERBQREBEQUURARBEBEQERRQQkCETuyZclEgl3r7fvyQYjxRObyMU56TiC9Pb2/kKpVM6AkROkUmk8APgZjiuxnYhtmMlkUmB7Uy6Xv4SteVw9JJiksLBQtmrVqvtlMtnvYPhF2C7Edk50dLQMbw9Ch6BGpmT4Yba1DAwMaJgthzz2OE/cK9BDVnd3d3xERMRTMP4K6GL8HiUO66H9TAf4zHqdTtcA4DKwaxBDloui0WimqFSqVISY1JiYmAfInkxvQU2jzTtn50TYGhBZlguye/duaX9//0oY7kxcXNwPCoXiLXiECm/VQ5ug2jHA4CU4L31fkFAR1CHr2rVrioSEhLSQkJDXkQ8mk4MwbxD0oltaWk5PmzbtLyzXeGSToPSQiooK5eDg4LaZM2degzfsARiUbL9nYNjCkGAK79MIBbI02EITGM+GJUuW1AOIbHiwluWGQS+TgzahAAmKpA7DS3p6eh7YsWNHLpL1bBxqhap9Nf7169d/EKIGCYocUltbGzFnzpxd8IjNeEkztc+X4+P3D02fPn2FWq3W2kDxyKaBCgh5BaropMjIyHzkiAk41CF0suYjyB83UMu8iN3bQrROAjKHIFfIDQbDDtQT5wAGJdZ2d8AwGo23ST25ltu3b6tZ1X5v1iGgsnHIFWeUSuVrePkDS9i8GRFmr6WxsbFk69atr4WGhqaTZmZmvtrQ0PB3vGV2lWF1dXXVC5U/AipkUYjSarWLoqKiCuAVnH2IcCHem4qKinKeffbZKpZrTHbkJrygoODhlJSUNzEUb7Jz4sSJV1JTU//Delweh6yAAITAQGhYi1idi13KFW418eAFRfPmzfuA1SODzCPo/IQwdW2j6urqXl6wYEEKn/Oh1umCp67Dbq+9lwR1DiEw9Hr9diTvPOy2spnocvFGRjp06NAXzHgDNjCYAWmf+lG6nJycQr6hC/VHHfdj9zf4cwhCiwyF3rvwjCxWV7j9w0ECWo4ePdpC3mUZZQqzY0PHjh3rwGdb+ZwTVLfakx5YQBWGBMbx48dzUV+sYoWereXhtrOR8ew9YxRQzPBCI5uoDscaHh427N+/v1JoQPzSQ/Ly8kI+/fTT4wBjBV52CnHOsLCwhO3btyudfW716tUhyAvxzj4HdvXN6dOne4WkvH7pIZRgUWztBR19BC97PPSKn+SirKysVGzet4yRdekz7e3t66VWGucwPII6X2DkwhK0HsIM8jhm8wuc9R6FkGKeNGnSdtQx88f6wM2bN38dGxv7ujMwwK40CKn/Ejpc+R0gX375ZXRMTMx72O3mBG6Rk2LiG2bMmFHe19f3h4qKiv9HB9rHsQ3x8fFU+ZucnQfAncPE6Rc6XPlVHUKhCkY5GB4e/gQnwGIBB0KLFqbiuo1IzHV3DshkCzB+KGdtTjqc9Waz2YhctP7gwYPfU2NR6GVAfgEIhSqEkgdnzpx5itUJvhACxpbkB/mGn1u3bpVOnz59H3UKGCsTFBCfJXW4eER0dPRv8QMW0tomaDQuvBPapdVqa8Fs3mDtEJeTOArHW01NTd9gq1WpVDEJCQlJqF1+7iyncNaVJRxfSk2tl88h9lV+QIUsmvkIQ0+AMb0il8sfZ4xkgMXeYTZL5axt0cVZl+Dwz9Jm89CFCxc+WLFiRRkSrW3JjgyghJWVlT310EMPvehKX4qHd5TAOw5QRY/fPWyzgd97CGsELjSZTIdowRmjr008KKJL3lFeXn6QwGBAGtn5pTqdLiQ5OfmzixcvDixevPhVQSia2Tx4+PDh41T028AICA8hMFBHbAN13cWoa783Lrynp6cGjGwbG+Mn7RCJddqS100AOHlRUVGzPB3vu++++2zu3Ll/Zd5htreBkB4iFdgzaJHBewDjz4yxGLxBX0nVanUV84y7elPsNSVqfUtLS5WnY9FS0bS0tGPMO8ycF0UqJBjwjAMKhSKVc/MOniuC3ESNQuNYVbetWQhp93QshL7cS5cudXN29zy8JXKBwJB0dnY+Dc9IsyvqvCqoqCdwzru/FjA7lSfXA3Z4cfny5ee4ES17v/aQs2fPToS8w8CgaanDDG5G/L4BdydqK3iLIS4ubjEPQ0uQZxa7O4bRaNRmZWUdZKHRxPlA5EKEKiTYF+Ahp7/66qv/Hjly5FtQTp3d7JVMnTo1dPfu3XOTkpLumz179lIeNYJTAbVdXl9fPw+7NQ6KTVqVkuwusaisrHw/Pz9fzY1xD8UvWRbxfoSPcACiZHnDyGoMy4iqOISYDyTsk08+SVq5cuUmGHWGJ9cOWm3RaDRPA/DGkWB0dHQkTpo06QupVOpW3AdpKEGBuZ9YHLVZnNjAf1onLGzI2fbOgywjZxOjoVIGDPWMwhByJuBH56NojPUAlBAMFYMQmQ9wihmzm4YidDXOu55SmzuhBuH2+rJlyzKvXLnSxnKHxVeAeByy2MUaeXzmTnXO7sgNYGabent7GwHMIx4Mb8L5NMTsoC8xwAkAWlFiWzjnUkJH3tCjANwLMDpZi8Sni+983n63WIWMZiguLv6IKmBPT8mKw2bWDWhhDUqLG9dmLi0tPZCdnf2tL2oOn/eynHyXZnNUYWHhsjVr1uxFrFdw4yw1NTUfJCYmfkSAUmvdhbDtn5W6q+0hYj8pKSmVRUVFOwXwFI+kqampBGDkc9aOs3G8rmPcALHLPbrnnnvuAgNlyFutFkcKhnglOTmZ6ijdeOQNf/GQu0BB+PqTrz1Fq9XWr127dldLS0u3M0YV9ICMBOX555+v9CUoOp2uESHzLRSAbeOVxP0OEAegeDV86fX679PS0t48d+4csbN+b97j8HuWBWNMDgkJoWfEleD91yIjIxvsCkiq6FUnTpxYgtm73xvsCzXQlfT09L2g3fT8YZ8nYATsIgcydldX1zyVSpWDSvoxu/aKHN5wY3BwcFd4eHiBrQK3A+WAUKBgHEN1dfVHS5cu/dxgMGg9BcMbgNz5srvK9/uMyTwGg3TjdTv0xghVQ/W0sJr7cV0ttVhiAcqa4eHhxlG+45J2dHQUbtu27WGck/48Jpyqek9+u70NhLSpTzwEs3LKokWLLrPHzxwlThVYzxsTJ0782N5TCgoKfr9u3Tq3PAWe0FZWVvb+M888U8lqDGqrGIViUwFXGFJ7fv78+dl81stSUkdIy964caNilDol2x32RUuMAMY/OOuibbofPmTx47+f8DogX3/9dXxYWFgKA4PPck/lzp07H6GcMwYoLrEveNt9nPUGk8FfmNS4AULeMWvWrM2sw8tXhhUKxa9s1zYSlLy8vNfoUQAGjFMJDQ2dbOtpcgEgXgUkIyNDGRUVtc6GD18F47Lt31WnZGZmXomNjf2jTCZb1draeoGHx4VyAfS0sdSL3iF5++23V8MgEW40+q46Kh4567/6dOzbt+9dorLOPI7zwaILvy8MaQlnX1/fSdQWC105J6hvM8Lck83NzVpHMd/Wvgd4OxMSEtaN9TmTydSDIvRhotVemniBwbJKSkqmIJn/xsWWBnf58uUjAMPpX+sxsAaqqqr+5iT8tXLj8JcbfgUIJfOkpKQ12PJmNWTgmpqaI48++mgpx3+VhzE1NbXWaDT2OKC9Dfc8IFQFI5mv4msIYk25ublbExMTP+ZcWwNFXjSk0+lqx/rA1atXKzgvPOnkLfHK6vdTp05NUSqV9zsyBNHW9vb2qtLS0i/S09O/YUD0ueAddxI9eSGqcfVoiXtoaKht/fr1lzgfLXLzS0AoXMHQT40Fhl6vv97Y2Hh2z549Z4uLi4kt0SI2YkpUVwy7US+Y2Z9QjuYdBW1tbQZOwH9aCEQPkUVGRj5pfwCJtV2tVv+7vLz8n1u2bKljAJAOMipr9qBws7BzjexhNW3YsOEzzoerDv0SkMOHD08Au1pIYYRAOH/+fMXmzZvrmPHtQTAJdIfOAlobMaKQNJ08eXJPbW2tlhvHBQvu/RoB2+9kFOSPhA8//JDa3L+E0hreGGgkZ32ARmarfYRS6o50dnYewX4zUzWo8BY2rlzIsXzRfhccEM7aMicAIrwFwogxFf39/ecJDBCFW9XV1W/i2GQ2tuSeBsQOFIkvjEGak5MzGUC0glE1nDlzZiNnvQGl9NX4fg+IL5WMDhb1skajObpp06YH8TrOl2CIgNw9viwjI4NWz5NGs3Ap8fE1CApIQP9vL1ulYnsUwjQui6P98PkQUQKh2yuKCEhQiHy8XFMU0UNEQEQRAREBEUUERAREFBEQERBRREBEEQERARFFBEQERBQRkOCV/wkwAG3HvBgewMy5AAAAAElFTkSuQmCC&quot;,&#xd;\n \t\t&quot;encoding&quot;: &quot;base64&quot;,&#xd;\n \t\t&quot;filename&quot;: &quot;lorem.png&quot;,&#xd;\n \t\t&quot;content-type&quot;: &quot;image/png&quot;&#xd;\n@@ -279,7 +279,7 @@\n \t&quot;@type&quot;: &quot;Image&quot;, &#xd;\n \t&quot;title&quot;: &quot;My Image&quot;, &#xd;\n \t&quot;image&quot;: {&#xd;\n-\t\t&quot;data&quot;: &quot;TG9yZW0gSXBzdW0uCg==&quot;,&#xd;\n+\t\t&quot;data&quot;:&quot;iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAADRxJREFUeNrsXAtQU2cWvnlAwisogqsrOLvqqqu2xcpsl611q9M6VduOVWmLzrYKLRVtZ53aKR3c1fqc2aHTqttxkHbaop2pFGx1WUFY10VcnCrt7vCYQh2rFcMzPEIMBEhI9jvmzzZFSG6Sm5DEe2bO3Jub5P435/vPOd8597+RWCwWThT/EaloAhEQUURAREBEEQERARFFBEQERBQREBEQUURARBEBEQERRQQkCETuyZclEgl3r7fvyQYjxRObyMU56TiC9Pb2/kKpVM6AkROkUmk8APgZjiuxnYhtmMlkUmB7Uy6Xv4SteVw9JJiksLBQtmrVqvtlMtnvYPhF2C7Edk50dLQMbw9Ch6BGpmT4Yba1DAwMaJgthzz2OE/cK9BDVnd3d3xERMRTMP4K6GL8HiUO66H9TAf4zHqdTtcA4DKwaxBDloui0WimqFSqVISY1JiYmAfInkxvQU2jzTtn50TYGhBZlguye/duaX9//0oY7kxcXNwPCoXiLXiECm/VQ5ug2jHA4CU4L31fkFAR1CHr2rVrioSEhLSQkJDXkQ8mk4MwbxD0oltaWk5PmzbtLyzXeGSToPSQiooK5eDg4LaZM2degzfsARiUbL9nYNjCkGAK79MIBbI02EITGM+GJUuW1AOIbHiwluWGQS+TgzahAAmKpA7DS3p6eh7YsWNHLpL1bBxqhap9Nf7169d/EKIGCYocUltbGzFnzpxd8IjNeEkztc+X4+P3D02fPn2FWq3W2kDxyKaBCgh5BaropMjIyHzkiAk41CF0suYjyB83UMu8iN3bQrROAjKHIFfIDQbDDtQT5wAGJdZ2d8AwGo23ST25ltu3b6tZ1X5v1iGgsnHIFWeUSuVrePkDS9i8GRFmr6WxsbFk69atr4WGhqaTZmZmvtrQ0PB3vGV2lWF1dXXVC5U/AipkUYjSarWLoqKiCuAVnH2IcCHem4qKinKeffbZKpZrTHbkJrygoODhlJSUNzEUb7Jz4sSJV1JTU//Delweh6yAAITAQGhYi1idi13KFW418eAFRfPmzfuA1SODzCPo/IQwdW2j6urqXl6wYEEKn/Oh1umCp67Dbq+9lwR1DiEw9Hr9diTvPOy2spnocvFGRjp06NAXzHgDNjCYAWmf+lG6nJycQr6hC/VHHfdj9zf4cwhCiwyF3rvwjCxWV7j9w0ECWo4ePdpC3mUZZQqzY0PHjh3rwGdb+ZwTVLfakx5YQBWGBMbx48dzUV+sYoWereXhtrOR8ew9YxRQzPBCI5uoDscaHh427N+/v1JoQPzSQ/Ly8kI+/fTT4wBjBV52CnHOsLCwhO3btyudfW716tUhyAvxzj4HdvXN6dOne4WkvH7pIZRgUWztBR19BC97PPSKn+SirKysVGzet4yRdekz7e3t66VWGucwPII6X2DkwhK0HsIM8jhm8wuc9R6FkGKeNGnSdtQx88f6wM2bN38dGxv7ujMwwK40CKn/Ejpc+R0gX375ZXRMTMx72O3mBG6Rk2LiG2bMmFHe19f3h4qKiv9HB9rHsQ3x8fFU+ZucnQfAncPE6Rc6XPlVHUKhCkY5GB4e/gQnwGIBB0KLFqbiuo1IzHV3DshkCzB+KGdtTjqc9Waz2YhctP7gwYPfU2NR6GVAfgEIhSqEkgdnzpx5itUJvhACxpbkB/mGn1u3bpVOnz59H3UKGCsTFBCfJXW4eER0dPRv8QMW0tomaDQuvBPapdVqa8Fs3mDtEJeTOArHW01NTd9gq1WpVDEJCQlJqF1+7iyncNaVJRxfSk2tl88h9lV+QIUsmvkIQ0+AMb0il8sfZ4xkgMXeYTZL5axt0cVZl+Dwz9Jm89CFCxc+WLFiRRkSrW3JjgyghJWVlT310EMPvehKX4qHd5TAOw5QRY/fPWyzgd97CGsELjSZTIdowRmjr008KKJL3lFeXn6QwGBAGtn5pTqdLiQ5OfmzixcvDixevPhVQSia2Tx4+PDh41T028AICA8hMFBHbAN13cWoa783Lrynp6cGjGwbG+Mn7RCJddqS100AOHlRUVGzPB3vu++++2zu3Ll/Zd5htreBkB4iFdgzaJHBewDjz4yxGLxBX0nVanUV84y7elPsNSVqfUtLS5WnY9FS0bS0tGPMO8ycF0UqJBjwjAMKhSKVc/MOniuC3ESNQuNYVbetWQhp93QshL7cS5cudXN29zy8JXKBwJB0dnY+Dc9IsyvqvCqoqCdwzru/FjA7lSfXA3Z4cfny5ee4ES17v/aQs2fPToS8w8CgaanDDG5G/L4BdydqK3iLIS4ubjEPQ0uQZxa7O4bRaNRmZWUdZKHRxPlA5EKEKiTYF+Ahp7/66qv/Hjly5FtQTp3d7JVMnTo1dPfu3XOTkpLumz179lIeNYJTAbVdXl9fPw+7NQ6KTVqVkuwusaisrHw/Pz9fzY1xD8UvWRbxfoSPcACiZHnDyGoMy4iqOISYDyTsk08+SVq5cuUmGHWGJ9cOWm3RaDRPA/DGkWB0dHQkTpo06QupVOpW3AdpKEGBuZ9YHLVZnNjAf1onLGzI2fbOgywjZxOjoVIGDPWMwhByJuBH56NojPUAlBAMFYMQmQ9wihmzm4YidDXOu55SmzuhBuH2+rJlyzKvXLnSxnKHxVeAeByy2MUaeXzmTnXO7sgNYGabent7GwHMIx4Mb8L5NMTsoC8xwAkAWlFiWzjnUkJH3tCjANwLMDpZi8Sni+983n63WIWMZiguLv6IKmBPT8mKw2bWDWhhDUqLG9dmLi0tPZCdnf2tL2oOn/eynHyXZnNUYWHhsjVr1uxFrFdw4yw1NTUfJCYmfkSAUmvdhbDtn5W6q+0hYj8pKSmVRUVFOwXwFI+kqampBGDkc9aOs3G8rmPcALHLPbrnnnvuAgNlyFutFkcKhnglOTmZ6ijdeOQNf/GQu0BB+PqTrz1Fq9XWr127dldLS0u3M0YV9ICMBOX555+v9CUoOp2uESHzLRSAbeOVxP0OEAegeDV86fX679PS0t48d+4csbN+b97j8HuWBWNMDgkJoWfEleD91yIjIxvsCkiq6FUnTpxYgtm73xvsCzXQlfT09L2g3fT8YZ8nYATsIgcydldX1zyVSpWDSvoxu/aKHN5wY3BwcFd4eHiBrQK3A+WAUKBgHEN1dfVHS5cu/dxgMGg9BcMbgNz5srvK9/uMyTwGg3TjdTv0xghVQ/W0sJr7cV0ttVhiAcqa4eHhxlG+45J2dHQUbtu27WGck/48Jpyqek9+u70NhLSpTzwEs3LKokWLLrPHzxwlThVYzxsTJ0782N5TCgoKfr9u3Tq3PAWe0FZWVvb+M888U8lqDGqrGIViUwFXGFJ7fv78+dl81stSUkdIy964caNilDol2x32RUuMAMY/OOuibbofPmTx47+f8DogX3/9dXxYWFgKA4PPck/lzp07H6GcMwYoLrEveNt9nPUGk8FfmNS4AULeMWvWrM2sw8tXhhUKxa9s1zYSlLy8vNfoUQAGjFMJDQ2dbOtpcgEgXgUkIyNDGRUVtc6GD18F47Lt31WnZGZmXomNjf2jTCZb1draeoGHx4VyAfS0sdSL3iF5++23V8MgEW40+q46Kh4567/6dOzbt+9dorLOPI7zwaILvy8MaQlnX1/fSdQWC105J6hvM8Lck83NzVpHMd/Wvgd4OxMSEtaN9TmTydSDIvRhotVemniBwbJKSkqmIJn/xsWWBnf58uUjAMPpX+sxsAaqqqr+5iT8tXLj8JcbfgUIJfOkpKQ12PJmNWTgmpqaI48++mgpx3+VhzE1NbXWaDT2OKC9Dfc8IFQFI5mv4msIYk25ublbExMTP+ZcWwNFXjSk0+lqx/rA1atXKzgvPOnkLfHK6vdTp05NUSqV9zsyBNHW9vb2qtLS0i/S09O/YUD0ueAddxI9eSGqcfVoiXtoaKht/fr1lzgfLXLzS0AoXMHQT40Fhl6vv97Y2Hh2z549Z4uLi4kt0SI2YkpUVwy7US+Y2Z9QjuYdBW1tbQZOwH9aCEQPkUVGRj5pfwCJtV2tVv+7vLz8n1u2bKljAJAOMipr9qBws7BzjexhNW3YsOEzzoerDv0SkMOHD08Au1pIYYRAOH/+fMXmzZvrmPHtQTAJdIfOAlobMaKQNJ08eXJPbW2tlhvHBQvu/RoB2+9kFOSPhA8//JDa3L+E0hreGGgkZ32ARmarfYRS6o50dnYewX4zUzWo8BY2rlzIsXzRfhccEM7aMicAIrwFwogxFf39/ecJDBCFW9XV1W/i2GQ2tuSeBsQOFIkvjEGak5MzGUC0glE1nDlzZiNnvQGl9NX4fg+IL5WMDhb1skajObpp06YH8TrOl2CIgNw9viwjI4NWz5NGs3Ap8fE1CApIQP9vL1ulYnsUwjQui6P98PkQUQKh2yuKCEhQiHy8XFMU0UNEQEQRAREBEUUERAREFBEQERBRREBEEQERARFFBEQERBQRkOCV/wkwAG3HvBgewMy5AAAAAElFTkSuQmCC&quot;,&#xd;\n \t\t&quot;encoding&quot;: &quot;base64&quot;,&#xd;\n \t\t&quot;filename&quot;: &quot;lorem.png&quot;,&#xd;\n \t\t&quot;content-type&quot;: &quot;image/png&quot;&#xd;\n@@ -1372,9 +1372,5 @@\n         <hashTree/>\n       </hashTree>\n     </hashTree>\n-    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n-      <boolProp name="WorkBench.save">true</boolProp>\n-    </WorkBench>\n-    <hashTree/>\n   </hashTree>\n </jmeterTestPlan>\ndiff --git a/plone-4.3.x-performance.cfg b/plone-4.3.x-performance.cfg\nindex f6041153..23bce7b0 100644\n--- a/plone-4.3.x-performance.cfg\n+++ b/plone-4.3.x-performance.cfg\n@@ -1,6 +1,5 @@\n [buildout]\n-extends =\n-    plone-4.3.x.cfg\n+extends = plone-4.3.x.cfg\n parts += instance plonesite\n \n [instance]\ndiff --git a/plone-4.3.x.cfg b/plone-4.3.x.cfg\nindex c4545ee7..7d6dd445 100644\n--- a/plone-4.3.x.cfg\n+++ b/plone-4.3.x.cfg\n@@ -1,9 +1,10 @@\n [buildout]\n extends =\n     base.cfg\n-    http://dist.plone.org/release/4.3.17/versions.cfg\n+    http://dist.plone.org/release/4.3.18/versions.cfg\n     versions.cfg\n \n [versions]\n pytz = 2017.3\n+six = 1.11.0\n zope.interface = 4.1.0\ndiff --git a/plone-5.0.x-performance.cfg b/plone-5.0.x-performance.cfg\nindex 2cb2b8da..3cccb0fd 100644\n--- a/plone-5.0.x-performance.cfg\n+++ b/plone-5.0.x-performance.cfg\n@@ -1,6 +1,5 @@\n [buildout]\n-extends =\n-    plone-5.0.x.cfg\n+extends = plone-5.0.x.cfg\n parts += instance plonesite\n \n [instance]\ndiff --git a/plone-5.0.x.cfg b/plone-5.0.x.cfg\nindex 40b7613c..bc3c0932 100644\n--- a/plone-5.0.x.cfg\n+++ b/plone-5.0.x.cfg\n@@ -1,7 +1,7 @@\n [buildout]\n extends =\n     base.cfg\n-    http://dist.plone.org/release/5.0.8/versions.cfg\n+    http://dist.plone.org/release/5.0.10/versions.cfg\n     versions.cfg\n \n [versions]\ndiff --git a/plone-5.1.x-performance.cfg b/plone-5.1.x-performance.cfg\nindex ecbb9001..74e57fa5 100644\n--- a/plone-5.1.x-performance.cfg\n+++ b/plone-5.1.x-performance.cfg\n@@ -1,6 +1,5 @@\n [buildout]\n-extends =\n-    plone-5.1.x.cfg\n+extends = plone-5.1.x.cfg\n parts += instance plonesite\n \n [instance]\ndiff --git a/plone-5.1.x.cfg b/plone-5.1.x.cfg\nindex 5bb3a958..2fde6418 100644\n--- a/plone-5.1.x.cfg\n+++ b/plone-5.1.x.cfg\n@@ -1,5 +1,5 @@\n [buildout]\n extends =\n     base.cfg\n-    http://dist.plone.org/release/5.1.2/versions.cfg\n+    http://dist.plone.org/release/5.1.5/versions.cfg\n     versions.cfg\ndiff --git a/plone-5.2.x.cfg b/plone-5.2.x.cfg\nnew file mode 100644\nindex 00000000..622ec121\n--- /dev/null\n+++ b/plone-5.2.x.cfg\n@@ -0,0 +1,18 @@\n+[buildout]\n+extends =\n+    base.cfg\n+    http://dist.plone.org/release/5.2a2/versions.cfg\n+find-links += http://dist.plone.org/thirdparty/\n+versions=versions\n+\n+[versions]\n+plone.restapi =\n+# Sphinx\n+Sphinx = 1.6.5\n+docutils = 0.14\n+Pygments = 2.2.0\n+sphinxcontrib-httpexample = 0.7.0\n+sphinxcontrib-httpdomain = 1.5.0\n+sphinx-rtd-theme = 0.2.4\n+Jinja2 = 2.10\n+Babel = 2.5.1\ndiff --git a/pyproject.toml b/pyproject.toml\nnew file mode 100644\nindex 00000000..05b615de\n--- /dev/null\n+++ b/pyproject.toml\n@@ -0,0 +1,20 @@\n+[tool.towncrier]\n+filename = "CHANGES.rst"\n+directory = "news/"\n+title_format = "{version} ({project_date})"\n+underlines = ["-", ""]\n+\n+[[tool.towncrier.type]]\n+directory = "breaking"\n+name = "Breaking changes:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "feature"\n+name = "New features:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "bugfix"\n+name = "Bug fixes:"\n+showcontent = true\ndiff --git a/requirements.txt b/requirements.txt\nindex 3ee645cb..ad0b8d39 100644\n--- a/requirements.txt\n+++ b/requirements.txt\n@@ -1,29 +1,3 @@\n-# https://github.com/plone/buildout.coredev/blob/5.1/requirements.txt\n-setuptools==39.1.0\n-zc.buildout==2.11.5\n-# Sphinx / ReadTheDocs\n-alabaster==0.7.10\n-appdirs==1.4.2\n-astunparse==1.5.0\n-Babel==2.5.1\n-certifi==2017.11.5\n-chardet==3.0.4\n-docutils==0.14\n-idna==2.6\n-imagesize==0.7.1\n-Jinja2==2.10\n-MarkupSafe==1.0\n-packaging==16.8\n-Pygments==2.2.0\n-pyparsing==2.1.10\n-pytz==2017.3\n-requests==2.18.4\n-six==1.10.0\n-snowballstemmer==1.2.1\n-Sphinx==1.6.5\n-sphinx-rtd-theme==0.2.4\n-sphinxcontrib-httpdomain==1.5.0\n-sphinxcontrib-httpexample==0.7.0\n-sphinxcontrib-websupport==1.0.1\n-typing==3.6.2\n-urllib3==1.22\n+# https://github.com/plone/buildout.coredev/blob/5.2/requirements.txt\n+setuptools==40.6.3\n+zc.buildout==2.12.2\ndiff --git a/setup.py b/setup.py\nindex b1d2930f..ac900d51 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,7 +1,8 @@\n from setuptools import setup, find_packages\n \n+import sys\n \n-version = \'3.2.2.dev0\'\n+version = \'3.7.4-dev.0\'\n \n long_description = (\n     open(\'README.rst\').read() + \'\\n\' +\n@@ -11,13 +12,30 @@\n     open(\'CHANGES.rst\').read() + \'\\n\'\n )\n \n+TEST_REQUIRES = [\n+    \'collective.MockMailHost\',\n+    \'plone.app.contenttypes\',\n+    \'plone.app.robotframework\',\n+    \'plone.app.testing [robot] >= 4.2.2\',  # ROBOT_TEST_LEVEL added\n+    \'plone.api\',\n+    \'requests\',\n+    \'freezegun\',\n+    \'plone.tiles\',\n+    \'mock\',\n+    \'archetypes.schemaextender ; python_version<"3"\',\n+    \'Products.Archetypes ; python_version<"3"\',\n+    \'Products.contentmigration ; python_version<"3"\',\n+    \'Products.ATContentTypes ; python_version<"3"\',\n+    \'plone.app.blob ; python_version<"3"\',\n+    \'plone.app.collection ; python_version<"3"\',\n+]\n \n setup(name=\'plone.restapi\',\n       version=version,\n       description="plone.restapi is a RESTful hypermedia API for Plone.",\n       long_description=long_description,\n       # Get more strings from\n-      # http://pypi.python.org/pypi?%3Aaction=list_classifiers\n+      # https://pypi.org/classifiers/\n       classifiers=[\n           "Development Status :: 5 - Production/Stable",\n           "Environment :: Web Environment",\n@@ -25,10 +43,13 @@\n           "Framework :: Plone :: 4.3",\n           "Framework :: Plone :: 5.0",\n           "Framework :: Plone :: 5.1",\n+          "Framework :: Plone :: 5.2",\n           "Intended Audience :: Developers",\n           "Operating System :: OS Independent",\n           "Programming Language :: Python",\n           "Programming Language :: Python :: 2.7",\n+          "Programming Language :: Python :: 3.6",\n+          "Programming Language :: Python :: 3.7",\n           "Topic :: Software Development :: Libraries :: Python Modules",\n       ],\n       keywords=\'plone rest restful hypermedia api json\',\n@@ -44,25 +65,13 @@\n       install_requires=[\n           \'setuptools\',\n           \'python-dateutil\',\n-          \'plone.behavior>=1.1\',  # adds name to behavior directive \n+          \'plone.behavior>=1.1\',  # adds name to behavior directive\n           \'plone.rest >= 1.0a6\',  # json renderer moved to plone.restapi\n-          \'plone.schema >= 1.2.0\',  # new json field          \n+          \'plone.schema >= 1.2.0\',  # new json field\n           \'PyJWT\',\n           \'pytz\',\n       ],\n-      extras_require={\'test\': [\n-          \'Products.Archetypes\',\n-          \'collective.MockMailHost\',\n-          \'plone.app.collection\',\n-          \'plone.app.contenttypes\',\n-          \'plone.app.robotframework\',\n-          \'plone.app.testing [robot] >= 4.2.2\',  # ROBOT_TEST_LEVEL added\n-          \'plone.api\',\n-          \'requests\',\n-          \'freezegun\',\n-          \'plone.tiles\',\n-          \'mock\',\n-      ]},\n+      extras_require={\'test\': TEST_REQUIRES},\n       entry_points="""\n       # -*- Entry points: -*-\n       [z3c.autoinclude.plugin]\ndiff --git a/src/plone/restapi/__init__.py b/src/plone/restapi/__init__.py\nindex 4bb52278..cf140252 100644\n--- a/src/plone/restapi/__init__.py\n+++ b/src/plone/restapi/__init__.py\n@@ -25,6 +25,13 @@\n except pkg_resources.DistributionNotFound:  # pragma: no cover\n     HAS_PLONE_APP_CONTENTTYPES = False\n \n+try:\n+    pkg_resources.get_distribution(\'Products.Archetypes\')\n+except pkg_resources.DistributionNotFound:\n+    HAS_AT = False\n+else:\n+    HAS_AT = True\n+\n \n def initialize(context):\n     registerMultiPlugin(plugin.JWTAuthenticationPlugin.meta_type)\n@@ -38,7 +45,7 @@ def initialize(context):\n         visibility=None,\n     )\n \n-    if REGISTER_TEST_TYPES:\n+    if HAS_AT and REGISTER_TEST_TYPES:\n         from Products.Archetypes.ArchetypeTool import process_types, listTypes\n         from Products.CMFCore import permissions\n         from Products.CMFCore import utils\ndiff --git a/src/plone/restapi/batching.py b/src/plone/restapi/batching.py\nindex 92b22faa..c0126c77 100644\n--- a/src/plone/restapi/batching.py\n+++ b/src/plone/restapi/batching.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.batching.batch import Batch\n-from urllib import urlencode\n-from urlparse import parse_qsl\n+from six.moves.urllib.parse import urlencode\n+from six.moves.urllib.parse import parse_qsl\n \n \n DEFAULT_BATCH_SIZE = 25\n@@ -116,7 +116,7 @@ def _url_with_params(self, params):\n         # result of parse_qsl into a dict!\n \n         # Drop params to be updated, then prepend new params in order\n-        qs_params = filter(lambda x: x[0] not in params.keys(), qs_params)\n+        qs_params = [x for x in qs_params if x[0] not in list(params)]\n         qs_params = sorted(params.items()) + qs_params\n \n         qs = urlencode(qs_params)\ndiff --git a/src/plone/restapi/configure.zcml b/src/plone/restapi/configure.zcml\nindex bf0377c6..7d823d27 100644\n--- a/src/plone/restapi/configure.zcml\n+++ b/src/plone/restapi/configure.zcml\n@@ -40,6 +40,14 @@\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n       />\n \n+  <genericsetup:registerProfile\n+      name="tiles"\n+      title="plone.restapi tiles"\n+      directory="profiles/tiles"\n+      description="Enables tiles on the Document content type"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      />\n+\n   <!-- Register "various" import step -->\n   <genericsetup:importStep\n     name="plone.restapi"\ndiff --git a/src/plone/restapi/demo/demo.py b/src/plone/restapi/demo/demo.py\nindex 790170c6..7c90983b 100644\n--- a/src/plone/restapi/demo/demo.py\n+++ b/src/plone/restapi/demo/demo.py\n@@ -5,7 +5,7 @@\n class InternalServerErrorView(BrowserView):  # pragma: no cover\n \n     def __call__(self):\n-        from urllib2 import HTTPError\n+        from six.moves.urllib.error import HTTPError\n         raise HTTPError(\n             \'http://nohost/plone/internal_server_error\',\n             500,\ndiff --git a/src/plone/restapi/deserializer/__init__.py b/src/plone/restapi/deserializer/__init__.py\nindex a4f6bdbb..58207c54 100644\n--- a/src/plone/restapi/deserializer/__init__.py\n+++ b/src/plone/restapi/deserializer/__init__.py\n@@ -6,7 +6,7 @@\n \n def json_body(request):\n     try:\n-        data = json.loads(request.get(\'BODY\', \'{}\'))\n+        data = json.loads(request.get(\'BODY\') or \'{}\')\n     except ValueError:\n         raise DeserializationError(\'No JSON object could be decoded\')\n     if not isinstance(data, dict):\ndiff --git a/src/plone/restapi/deserializer/atcontent.py b/src/plone/restapi/deserializer/atcontent.py\nindex a6f696a0..dd1be622 100644\n--- a/src/plone/restapi/deserializer/atcontent.py\n+++ b/src/plone/restapi/deserializer/atcontent.py\n@@ -44,8 +44,8 @@ def __call__(self, validate_all=False, data=None, create=False):\n             name = field.getName()\n \n             if name in data:\n-                deserializer = queryMultiAdapter((field, obj, self.request),\n-                                                 IFieldDeserializer)\n+                deserializer = queryMultiAdapter(\n+                    (field, obj, self.request), IFieldDeserializer)\n                 if deserializer is None:\n                     continue\n                 value, kwargs = deserializer(data[name])\ndiff --git a/src/plone/restapi/deserializer/configure.zcml b/src/plone/restapi/deserializer/configure.zcml\nindex ef861bab..635e2c5b 100644\n--- a/src/plone/restapi/deserializer/configure.zcml\n+++ b/src/plone/restapi/deserializer/configure.zcml\n@@ -30,7 +30,7 @@\n     <adapter factory=".atfields.FileFieldDeserializer" />\n     <adapter factory=".atfields.ReferenceFieldDeserializer" />\n   </configure>\n-  \n+\n   <configure zcml:condition="have plone-5">\n     <adapter factory=".controlpanels.ControlpanelDeserializeFromJson" />\n   </configure>\ndiff --git a/src/plone/restapi/deserializer/controlpanels.py b/src/plone/restapi/deserializer/controlpanels.py\nindex b70caedb..e434ee01 100644\n--- a/src/plone/restapi/deserializer/controlpanels.py\n+++ b/src/plone/restapi/deserializer/controlpanels.py\n@@ -69,7 +69,7 @@ def __call__(self):\n                     setattr(proxy, name, value)\n                 except ValueError as e:\n                     errors.append({\n-                        \'message\': e.message, \'field\': name, \'error\': e})\n+                        \'message\': str(e), \'field\': name, \'error\': e})\n                 except ValidationError as e:\n                     errors.append({\n                         \'message\': e.doc(), \'field\': name, \'error\': e})\n@@ -82,7 +82,7 @@ def __call__(self):\n                 (self.context, self.request, None, schema, None),\n                 IManagerValidator)\n             for error in validator.validate(field_data):\n-                errors.append({\'error\': error, \'message\': error.message})\n+                errors.append({\'error\': error, \'message\': str(error)})\n \n         if errors:\n             raise BadRequest(errors)\ndiff --git a/src/plone/restapi/deserializer/dxcontent.py b/src/plone/restapi/deserializer/dxcontent.py\nindex b2e42165..4f93e8ba 100644\n--- a/src/plone/restapi/deserializer/dxcontent.py\n+++ b/src/plone/restapi/deserializer/dxcontent.py\n@@ -88,7 +88,7 @@ def __call__(self, validate_all=False, data=None, create=False):  # noqa: ignore\n                         value = deserializer(data[name])\n                     except ValueError as e:\n                         errors.append({\n-                            \'message\': e.message, \'field\': name, \'error\': e})\n+                            \'message\': str(e), \'field\': name, \'error\': e})\n                     except ValidationError as e:\n                         errors.append({\n                             \'message\': e.doc(), \'field\': name, \'error\': e})\n@@ -123,7 +123,7 @@ def __call__(self, validate_all=False, data=None, create=False):  # noqa: ignore\n                 (self.context, self.request, None, schema, None),\n                 IManagerValidator)\n             for error in validator.validate(field_data):\n-                errors.append({\'error\': error, \'message\': error.message})\n+                errors.append({\'error\': error, \'message\': str(error)})\n \n         if errors:\n             raise BadRequest(errors)\ndiff --git a/src/plone/restapi/deserializer/dxfields.py b/src/plone/restapi/deserializer/dxfields.py\nindex 548a9518..fd1cd046 100644\n--- a/src/plone/restapi/deserializer/dxfields.py\n+++ b/src/plone/restapi/deserializer/dxfields.py\n@@ -23,7 +23,9 @@\n from zope.schema.interfaces import ITime\n from zope.schema.interfaces import ITimedelta\n \n+import codecs\n import dateutil\n+import six\n \n \n @implementer(IFieldDeserializer)\n@@ -38,7 +40,7 @@ def __init__(self, field, context, request):\n         self.request = request\n \n     def __call__(self, value):\n-        if not isinstance(value, unicode):\n+        if not isinstance(value, six.text_type):\n             self.field.validate(value)\n             return value\n \n@@ -52,11 +54,11 @@ def __call__(self, value):\n class TextLineFieldDeserializer(DefaultFieldDeserializer):\n \n     def __call__(self, value):\n-        if isinstance(value, unicode):\n+        if isinstance(value, six.text_type):\n             value = IFromUnicode(self.field).fromUnicode(value)\n \n         # Mimic what z3c.form does in it\'s BaseDataConverter.\n-        if isinstance(value, unicode):\n+        if isinstance(value, six.text_type):\n             value = value.strip()\n             if value == u\'\':\n                 value = self.field.missing_value\n@@ -191,7 +193,7 @@ def __call__(self, value):\n         try:\n             value = timedelta(seconds=value)\n         except TypeError as e:\n-            raise ValueError(e.message)\n+            raise ValueError(str(e))\n \n         self.field.validate(value)\n         return value\n@@ -211,16 +213,18 @@ def __call__(self, value):\n                 # with the \'download\' key so we return the same stored file\n                 return getattr(self.field.context, self.field.__name__)\n \n-            content_type = value.get(u\'content-type\', content_type).encode(\n-                \'utf8\')\n-            filename = value.get(u\'filename\', filename)\n-            if u\'encoding\' in value:\n-                data = value.get(\'data\', \'\').decode(value[u\'encoding\'])\n-            else:\n-                data = value.get(\'data\', \'\')\n+            content_type = value.get(\'content-type\', content_type)\n+            filename = value.get(\'filename\', filename)\n+            data = value.get(\'data\', \'\')\n+            if isinstance(data, six.text_type):\n+                data = data.encode(\'utf-8\')\n+            if \'encoding\' in value:\n+                data = codecs.decode(data, value[\'encoding\'])\n+            if isinstance(data, six.text_type):\n+                data = data.encode(\'utf-8\')\n         elif isinstance(value, TUSUpload):\n             content_type = value.metadata().get(\n-                \'content-type\', content_type).encode(\'utf8\')\n+                \'content-type\', content_type)\n             filename = value.metadata().get(\'filename\', filename)\n             data = value.open()\n         else:\n@@ -228,6 +232,8 @@ def __call__(self, value):\n \n         # Convert if we have data\n         if data:\n+            if six.PY2:\n+                content_type = content_type.encode(\'utf8\')\n             value = self.field._type(\n                 data=data, contentType=content_type, filename=filename)\n         else:\n@@ -246,9 +252,9 @@ def __call__(self, value):\n         content_type = self.field.default_mime_type\n         encoding = \'utf8\'\n         if isinstance(value, dict):\n-            content_type = value.get(u\'content-type\', content_type)\n-            encoding = value.get(u\'encoding\', encoding)\n-            data = value.get(u\'data\', u\'\')\n+            content_type = value.get(\'content-type\', content_type)\n+            encoding = value.get(\'encoding\', encoding)\n+            data = value.get(\'data\', u\'\')\n         elif isinstance(value, TUSUpload):\n             content_type = value.metadata().get(\'content-type\', content_type)\n             with open(value.filepath, \'rb\') as f:\ndiff --git a/src/plone/restapi/deserializer/relationfield.py b/src/plone/restapi/deserializer/relationfield.py\nindex b24db727..ec3e8bc2 100644\n--- a/src/plone/restapi/deserializer/relationfield.py\n+++ b/src/plone/restapi/deserializer/relationfield.py\n@@ -10,6 +10,7 @@\n from zope.interface import implementer\n from zope.intid.interfaces import IIntIds\n from zope.publisher.interfaces.browser import IBrowserRequest\n+import six\n \n \n @implementer(IFieldDeserializer)\n@@ -28,18 +29,19 @@ def __call__(self, value):\n             # Resolve by intid\n             intids = queryUtility(IIntIds)\n             obj = intids.queryObject(value)\n-        elif isinstance(value, basestring):\n+        elif isinstance(value, six.string_types):\n+            if six.PY2 and isinstance(value, six.text_type):\n+                value = value.encode(\'utf8\')\n             portal = getMultiAdapter((self.context, self.request),\n                                      name=\'plone_portal_state\').portal()\n             portal_url = portal.absolute_url()\n             if value.startswith(portal_url):\n                 # Resolve by URL\n                 obj = portal.restrictedTraverse(\n-                    value[len(portal_url) + 1:].encode(\'utf8\'), None)\n+                    value[len(portal_url) + 1:], None)\n             elif value.startswith(\'/\'):\n                 # Resolve by path\n-                obj = portal.restrictedTraverse(\n-                    value.encode(\'utf8\').lstrip(\'/\'), None)\n+                obj = portal.restrictedTraverse(value.lstrip(\'/\'), None)\n             else:\n                 # Resolve by UID\n                 catalog = getToolByName(self.context, \'portal_catalog\')\ndiff --git a/src/plone/restapi/deserializer/site.py b/src/plone/restapi/deserializer/site.py\nindex 7b749383..949fd630 100644\n--- a/src/plone/restapi/deserializer/site.py\n+++ b/src/plone/restapi/deserializer/site.py\n@@ -8,6 +8,8 @@\n from plone.restapi.deserializer.mixins import OrderingMixin\n from zope.publisher.interfaces import IRequest\n \n+import json\n+\n \n @implementer(IDeserializeFromJson)\n @adapter(IPloneSiteRoot, IRequest)\n@@ -33,4 +35,23 @@ def __call__(self, validate_all=False):\n             data[\'ordering\'][\'subset_ids\'] = self.context.contentIds()\n         self.handle_ordering(data)\n \n+        # Volto Tiles on the Plone Site root faker\n+        if \'tiles\' in data:\n+            if not getattr(self.context, \'tiles\', False):\n+                self.context.manage_addProperty(\'tiles\', json.dumps(data[\'tiles\']), \'string\') # noqa\n+            else:\n+                self.context.manage_changeProperties(tiles=json.dumps(data[\'tiles\'])) # noqa\n+\n+        if \'tiles_layout\' in data:\n+            if not getattr(self.context, \'tiles_layout\', False):\n+                self.context.manage_addProperty(\'tiles_layout\', json.dumps(data[\'tiles_layout\']), \'string\') # noqa\n+            else:\n+                self.context.manage_changeProperties(tiles_layout=json.dumps(data[\'tiles_layout\'])) # noqa\n+\n+        if \'title\' in data:\n+            self.context.setTitle(data[\'title\'])\n+\n+        if \'description\' in data:\n+            self.context.manage_changeProperties(description=data[\'description\']) # noqa\n+\n         return self.context\ndiff --git a/src/plone/restapi/imaging.py b/src/plone/restapi/imaging.py\nindex 202f6bfa..d943f038 100644\n--- a/src/plone/restapi/imaging.py\n+++ b/src/plone/restapi/imaging.py\n@@ -1,8 +1,10 @@\n # -*- coding: utf-8 -*-\n+from __future__ import division\n from Products.CMFCore.interfaces import IPropertiesTool\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.globalrequest import getRequest\n+from six.moves import map\n \n try:\n     from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n@@ -62,8 +64,8 @@ def get_actual_scale(dimensions, bbox):\n     This is supposed to emulate / predict the behavior of Plone\'s\n     ImageScaling implementations.\n     """\n-    width, height = map(float, dimensions)\n-    max_width, max_height = map(float, bbox)\n+    width, height = dimensions\n+    max_width, max_height = bbox\n     resize_ratio = min(max_width / width, max_height / height)\n \n     # Plone doesn\'t upscale images for the default named scales - limit\n@@ -98,7 +100,7 @@ def get_scale_infos():\n \n     def split_scale_info(allowed_size):\n         name, dims = allowed_size.split(\' \')\n-        width, height = map(int, dims.split(\':\'))\n+        width, height = list(map(int, dims.split(\':\')))\n         return name, width, height\n \n     return [split_scale_info(size) for size in allowed_sizes]\ndiff --git a/src/plone/restapi/pas/plugin.py b/src/plone/restapi/pas/plugin.py\nindex dee0485a..f9c5ab25 100644\n--- a/src/plone/restapi/pas/plugin.py\n+++ b/src/plone/restapi/pas/plugin.py\n@@ -15,9 +15,9 @@\n from plone.keyring.interfaces import IKeyManager\n from plone.keyring.keyring import GenerateSecret\n from zope.component import getUtility\n-from zope.interface import implements\n-\n+from zope.interface import implementer\n import jwt\n+import six\n import time\n \n \n@@ -39,14 +39,14 @@ def addJWTAuthenticationPlugin(self, id_, title=None, REQUEST=None):\n         )\n \n \n+@implementer(\n+    IAuthenticationPlugin,\n+    IChallengePlugin,\n+    IExtractionPlugin,\n+)\n class JWTAuthenticationPlugin(BasePlugin):\n     """Plone PAS plugin for authentication with JSON web tokens (JWT).\n     """\n-    implements(\n-        IAuthenticationPlugin,\n-        IChallengePlugin,\n-        IExtractionPlugin,\n-    )\n     meta_type = "JWT Authentication Plugin"\n     security = ClassSecurityInfo()\n \n@@ -117,7 +117,9 @@ def authenticateCredentials(self, credentials):\n         if \'sub\' not in payload:\n             return None\n \n-        userid = payload[\'sub\'].encode(\'utf8\')\n+        userid = payload[\'sub\']\n+        if six.PY2:\n+            userid = userid.encode(\'utf8\')\n \n         if self.store_tokens:\n             if userid not in self._tokens:\n@@ -160,6 +162,8 @@ def _decode_token(self, token, verify=True):\n                 token, self._secret + self._path(), verify=verify)\n \n     def _jwt_decode(self, token, secret, verify=True):\n+        if isinstance(token, six.text_type):\n+            token = token.encode(\'utf-8\')\n         try:\n             return jwt.decode(\n                 token, secret, verify=verify, algorithms=[\'HS256\'])\n@@ -196,6 +200,8 @@ def create_token(self, userid, timeout=None, data=None):\n         if data is not None:\n             payload.update(data)\n         token = jwt.encode(payload, self._signing_secret(), algorithm=\'HS256\')\n+        if not six.PY2:\n+            token = token.decode(\'utf-8\')\n         if self.store_tokens:\n             if self._tokens is None:\n                 self._tokens = OOBTree()\ndiff --git a/src/plone/restapi/profiles/tiles/metadata.xml b/src/plone/restapi/profiles/tiles/metadata.xml\nnew file mode 100644\nindex 00000000..2665db30\n--- /dev/null\n+++ b/src/plone/restapi/profiles/tiles/metadata.xml\n@@ -0,0 +1,7 @@\n+<?xml version="1.0"?>\n+<metadata>\n+  <version>0001</version>\n+  <dependencies>\n+    <dependency>profile-plone.restapi:default</dependency>\n+  </dependencies>\n+</metadata>\ndiff --git a/src/plone/restapi/profiles/tiles/types.xml b/src/plone/restapi/profiles/tiles/types.xml\nnew file mode 100644\nindex 00000000..f264a135\n--- /dev/null\n+++ b/src/plone/restapi/profiles/tiles/types.xml\n@@ -0,0 +1,3 @@\n+<object name="portal_types" meta_type="Plone Types Tool">\n+  <object name="Document" meta_type="Dexterity FTI" />\n+</object>\ndiff --git a/src/plone/restapi/profiles/tiles/types/Document.xml b/src/plone/restapi/profiles/tiles/types/Document.xml\nnew file mode 100644\nindex 00000000..b1a8ff36\n--- /dev/null\n+++ b/src/plone/restapi/profiles/tiles/types/Document.xml\n@@ -0,0 +1,9 @@\n+<?xml version="1.0"?>\n+<object name="Document" meta_type="Dexterity FTI" i18n:domain="plone"\n+   xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n+ <property name="behaviors" purge="false">\n+  <element value="plone.tiles" />\n+  <!--<element value="collective.dexteritytextindexer.behavior.IDexterityTextIndexer" />-->\n+ </property>\n+\n+</object>\ndiff --git a/src/plone/restapi/search/handler.py b/src/plone/restapi/search/handler.py\nindex 2f65f530..a2b3f955 100644\n--- a/src/plone/restapi/search/handler.py\n+++ b/src/plone/restapi/search/handler.py\n@@ -33,7 +33,10 @@ def _constrain_query_by_path(self, query):\n         if \'path\' not in query:\n             query[\'path\'] = {}\n \n-        if isinstance(query[\'path\'], str):\n+        if (\n+            isinstance(query[\'path\'], str)\n+            or isinstance(query[\'path\'], list)\n+        ):\n             query[\'path\'] = {\'query\': query[\'path\']}\n \n         # If this is accessed through a VHM the client does not know\n@@ -43,9 +46,17 @@ def _constrain_query_by_path(self, query):\n         if vhm_physical_path:\n             path = query[\'path\'].get(\'query\')\n             if path:\n-                path = path.lstrip(\'/\')\n-                full_path = \'/\'.join(vhm_physical_path + (path,))\n-                query[\'path\'][\'query\'] = full_path\n+                if isinstance(path, str):\n+                    path = path.lstrip(\'/\')\n+                    full_path = \'/\'.join(vhm_physical_path + (path,))\n+                    query[\'path\'][\'query\'] = full_path\n+                if isinstance(path, list):\n+                    full_paths = []\n+                    for p in path:\n+                        p = p.lstrip(\'/\')\n+                        full_path = \'/\'.join(vhm_physical_path + (p,))\n+                        full_paths.append(full_path)\n+                    query[\'path\'][\'query\'] = full_paths\n \n         if isinstance(query[\'path\'], dict) and \'query\' not in query[\'path\']:\n             # We either had no \'path\' parameter at all, or an incomplete\ndiff --git a/src/plone/restapi/search/utils.py b/src/plone/restapi/search/utils.py\nindex 6037bcdd..36a08971 100644\n--- a/src/plone/restapi/search/utils.py\n+++ b/src/plone/restapi/search/utils.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from functools import reduce\n \n \n def unflatten_dotted_dict(dct):\ndiff --git a/src/plone/restapi/serializer/atcollection.py b/src/plone/restapi/serializer/atcollection.py\nindex 95e4e935..a7eb2e99 100644\n--- a/src/plone/restapi/serializer/atcollection.py\n+++ b/src/plone/restapi/serializer/atcollection.py\n@@ -15,9 +15,8 @@\n class SerializeCollectionToJson(SerializeToJson):\n \n     def __call__(self, version=None):\n-        collection_metadata = super(SerializeCollectionToJson, self).__call__(\n-            version=version,\n-        )\n+        collection_metadata = super(\n+            SerializeCollectionToJson, self).__call__(version=version)\n         results = self.context.results(batch=False)\n         batch = HypermediaBatch(self.request, results)\n \n@@ -29,7 +28,8 @@ def __call__(self, version=None):\n             results[\'batching\'] = batch.links\n \n         results[\'items\'] = [\n-            getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n+            getMultiAdapter(\n+                (brain, self.request), ISerializeToJsonSummary)()\n             for brain in batch\n         ]\n         return results\ndiff --git a/src/plone/restapi/serializer/atcontent.py b/src/plone/restapi/serializer/atcontent.py\nindex 0721b6b0..92219877 100644\n--- a/src/plone/restapi/serializer/atcontent.py\n+++ b/src/plone/restapi/serializer/atcontent.py\n@@ -56,7 +56,7 @@ def __call__(self, version=None, include_items=False):\n \n         for field in obj.Schema().fields():\n \n-            if \'r\' not in field.mode or not field.checkPermission(\'r\', obj):\n+            if \'r\' not in field.mode or not field.checkPermission(\'r\', obj):  # noqa: E501\n                 continue\n \n             name = field.getName()\n@@ -94,7 +94,8 @@ def __call__(self, version=None, include_items=True):\n         folder_metadata.update({\'is_folderish\': True})\n         result = folder_metadata\n \n-        include_items = self.request.form.get(\'include_items\', include_items)\n+        include_items = self.request.form.get(\n+            \'include_items\', include_items)\n         include_items = boolean_value(include_items)\n         if include_items:\n             query = self._build_query()\ndiff --git a/src/plone/restapi/serializer/atfields.py b/src/plone/restapi/serializer/atfields.py\nindex 8b5396d8..eed63d04 100644\n--- a/src/plone/restapi/serializer/atfields.py\n+++ b/src/plone/restapi/serializer/atfields.py\n@@ -1,4 +1,6 @@\n # -*- coding: utf-8 -*-\n+from six.moves import map\n+\n from Products.Archetypes.interfaces import IBaseObject\n from Products.Archetypes.interfaces.field import IField\n from Products.Archetypes.interfaces.field import IFileField\n@@ -60,7 +62,8 @@ def __call__(self):\n class TextFieldSerializer(DefaultFieldSerializer):\n \n     def __call__(self):\n-        mimetypes_registry = getToolByName(self.context, \'mimetypes_registry\')\n+        mimetypes_registry = getToolByName(\n+            self.context, \'mimetypes_registry\')\n         data = super(TextFieldSerializer, self).__call__()\n         return {\n             \'content-type\': json_compatible(\n@@ -127,4 +130,4 @@ def __call__(self):\n class QueryFieldSerializer(DefaultFieldSerializer):\n     def __call__(self):\n         raw_value = self.field.getRaw(self.context)\n-        return json_compatible(map(dict, raw_value))\n+        return json_compatible(list(map(dict, raw_value)))\ndiff --git a/src/plone/restapi/serializer/catalog.py b/src/plone/restapi/serializer/catalog.py\nindex fb78354c..e1ec1ec8 100644\n--- a/src/plone/restapi/serializer/catalog.py\n+++ b/src/plone/restapi/serializer/catalog.py\n@@ -31,7 +31,7 @@ def _get_metadata_to_include(self, metadata_fields):\n         if metadata_fields and \'_all\' in metadata_fields:\n             site = getSite()\n             catalog = getToolByName(site, \'portal_catalog\')\n-            metadata_attrs = catalog.schema() + BRAIN_METHODS\n+            metadata_attrs = list(catalog.schema()) + BRAIN_METHODS\n             return metadata_attrs\n \n         return metadata_fields\ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex 91070fc0..041400fc 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -45,7 +45,7 @@\n     <adapter factory=".converters.python_datetime_converter" />\n     <adapter factory=".converters.RichtextDXContextConverter" />\n     <adapter factory=".converters.set_converter" />\n-    <adapter factory=".converters.string_converter" />\n+    <adapter factory=".converters.bytes_converter" />\n     <adapter factory=".converters.time_converter" />\n     <adapter factory=".converters.timedelta_converter" />\n     <adapter factory=".converters.tuple_converter" />\ndiff --git a/src/plone/restapi/serializer/converters.py b/src/plone/restapi/serializer/converters.py\nindex 9948a975..83529679 100644\n--- a/src/plone/restapi/serializer/converters.py\n+++ b/src/plone/restapi/serializer/converters.py\n@@ -21,6 +21,9 @@\n \n import Missing\n import pytz\n+import six\n+from six.moves import map\n+from six.moves import zip\n # import re\n \n \n@@ -75,7 +78,7 @@ def default_converter(value):\n     if value is None:\n         return value\n \n-    if type(value) in (unicode, bool, int, float, long):\n+    if type(value) in (six.text_type, bool, int, float, int):\n         return value\n \n     raise TypeError(\n@@ -83,16 +86,16 @@ def default_converter(value):\n         \' {0!r} ({1}) JSON compatible.\'.format(value, type(value)))\n \n \n-@adapter(str)\n+@adapter(bytes)\n @implementer(IJsonCompatible)\n-def string_converter(value):\n+def bytes_converter(value):\n     return safe_unicode(value, \'utf-8\')\n \n \n @adapter(list)\n @implementer(IJsonCompatible)\n def list_converter(value):\n-    return map(json_compatible, value)\n+    return list(map(json_compatible, value))\n \n \n @adapter(PersistentList)\n@@ -104,19 +107,19 @@ def persistent_list_converter(value):\n @adapter(tuple)\n @implementer(IJsonCompatible)\n def tuple_converter(value):\n-    return map(json_compatible, value)\n+    return list(map(json_compatible, value))\n \n \n @adapter(frozenset)\n @implementer(IJsonCompatible)\n def frozenset_converter(value):\n-    return map(json_compatible, value)\n+    return list(map(json_compatible, value))\n \n \n @adapter(set)\n @implementer(IJsonCompatible)\n def set_converter(value):\n-    return map(json_compatible, value)\n+    return list(map(json_compatible, value))\n \n \n @adapter(dict)\n@@ -125,10 +128,10 @@ def dict_converter(value):\n     if value == {}:\n         return {}\n \n-    keys, values = zip(*value.items())\n-    keys = map(json_compatible, keys)\n-    values = map(json_compatible, values)\n-    return dict(zip(keys, values))\n+    keys, values = list(zip(*list(value.items())))\n+    keys = list(map(json_compatible, keys))\n+    values = list(map(json_compatible, values))\n+    return dict(list(zip(keys, values)))\n \n \n @adapter(PersistentMapping)\ndiff --git a/src/plone/restapi/serializer/dxcontent.py b/src/plone/restapi/serializer/dxcontent.py\nindex c6ad6f53..ad8eae75 100644\n--- a/src/plone/restapi/serializer/dxcontent.py\n+++ b/src/plone/restapi/serializer/dxcontent.py\n@@ -145,7 +145,7 @@ def __call__(self, version=None, include_items=True):\n             if batch.links:\n                 result[\'batching\'] = batch.links\n \n-            if \'fullobjects\' in self.request.form.keys():\n+            if \'fullobjects\' in list(self.request.form):\n                 result[\'items\'] = getMultiAdapter(\n                     (brains, self.request),\n                     ISerializeToJson\ndiff --git a/src/plone/restapi/serializer/expansion.py b/src/plone/restapi/serializer/expansion.py\nindex cdf0eec8..e3cc3d13 100644\n--- a/src/plone/restapi/serializer/expansion.py\n+++ b/src/plone/restapi/serializer/expansion.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.restapi.interfaces import IExpandableElement\n from zope.component import getAdapters\n+import six\n \n \n def expandable_elements(context, request):\n@@ -18,7 +19,7 @@ def expandable_elements(context, request):\n \n \n def update_dict_recursively(d, u):\n-    for key, value in u.iteritems():\n+    for key, value in six.iteritems(u):\n         if isinstance(value, dict):\n             r = update_dict_recursively(d.get(key, {}), value)\n             d[key] = r\ndiff --git a/src/plone/restapi/serializer/group.py b/src/plone/restapi/serializer/group.py\nindex ab60834f..a547787d 100644\n--- a/src/plone/restapi/serializer/group.py\n+++ b/src/plone/restapi/serializer/group.py\n@@ -28,6 +28,7 @@ def __call__(self):\n             \'email\': group.getProperty(\'email\'),\n             \'title\': group.getProperty(\'title\'),\n             \'description\': group.getProperty(\'description\'),\n+            \'roles\': group.getRoles(),\n         }\n \n \ndiff --git a/src/plone/restapi/serializer/registry.py b/src/plone/restapi/serializer/registry.py\nindex 02400890..247ba2d3 100644\n--- a/src/plone/restapi/serializer/registry.py\n+++ b/src/plone/restapi/serializer/registry.py\n@@ -19,7 +19,7 @@ def __init__(self, registry, request):\n     def __call__(self):\n         records = self.registry.records\n         # Batch keys, because that is a simple BTree\n-        batch = HypermediaBatch(self.request, records.keys())\n+        batch = HypermediaBatch(self.request, list(records))\n \n         results = {}\n         results[\'@id\'] = batch.canonical_url\ndiff --git a/src/plone/restapi/serializer/site.py b/src/plone/restapi/serializer/site.py\nindex 9330ad27..41445a5c 100644\n--- a/src/plone/restapi/serializer/site.py\n+++ b/src/plone/restapi/serializer/site.py\n@@ -10,6 +10,8 @@\n from zope.interface import Interface\n from zope.interface import implementer\n \n+import json\n+\n \n @implementer(ISerializeToJson)\n @adapter(IPloneSiteRoot, Interface)\n@@ -44,7 +46,10 @@ def __call__(self, version=None):\n             \'@type\': \'Plone Site\',\n             \'title\': self.context.Title(),\n             \'parent\': {},\n-            \'is_folderish\': True\n+            \'is_folderish\': True,\n+            \'description\': self.context.description,\n+            \'tiles\': json.loads(getattr(self.context, \'tiles\', \'{}\')),\n+            \'tiles_layout\': json.loads(getattr(self.context, \'tiles_layout\', \'{}\')) # noqa\n         }\n \n         # Insert expandable elements\ndiff --git a/src/plone/restapi/serializer/user.py b/src/plone/restapi/serializer/user.py\nindex 0bb67b67..0f153c8f 100644\n--- a/src/plone/restapi/serializer/user.py\n+++ b/src/plone/restapi/serializer/user.py\n@@ -2,10 +2,23 @@\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from Products.CMFCore.interfaces._tools import IMemberData\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.utils import safe_unicode\n from zope.component import adapter\n+from zope.component import getUtility\n from zope.component.hooks import getSite\n from zope.interface import implementer\n from zope.publisher.interfaces import IRequest\n+from zope.schema import getFieldNames\n+\n+try:\n+    # Plone 5\n+    from plone.app.users.browser.userdatapanel import getUserDataSchema\n+    HAS_TTW_SCHEMAS = True\n+except ImportError:\n+    # Plone 4.3\n+    from plone.app.users.userdataschema import IUserDataSchemaProvider\n+    HAS_TTW_SCHEMAS = False\n \n \n class BaseSerializer(object):\n@@ -24,21 +37,39 @@ def __call__(self):\n         # to logged-in or logged-out users. They should not be exposed here\n         roles = list(set(roles) - set([\'Anonymous\', \'Authenticated\', ]))\n \n-        return {\n-            \'@id\': \'{}/@users/{}\'.format(\n-                portal.absolute_url(),\n-                user.id\n-            ),\n+        data = {\n+            \'@id\': \'{}/@users/{}\'.format(portal.absolute_url(), user.id),\n             \'id\': user.id,\n-            \'email\': user.getProperty(\'email\'),\n             \'username\': user.getUserName(),\n-            \'fullname\': user.getProperty(\'fullname\'),\n-            \'home_page\': user.getProperty(\'home_page\'),\n-            \'description\': user.getProperty(\'description\'),\n-            \'location\': user.getProperty(\'location\'),\n             \'roles\': roles,\n         }\n \n+        if HAS_TTW_SCHEMAS:\n+            schema = getUserDataSchema()\n+        else:\n+            util = getUtility(IUserDataSchemaProvider)\n+            schema = util.getSchema()\n+\n+        for name in getFieldNames(schema):\n+            if name == \'portrait\':\n+                memberdata = getToolByName(portal, \'portal_memberdata\')\n+                if user.id in memberdata.portraits:\n+                    value = \'{}/portal_memberdata/portraits/{}\'.format(\n+                        portal.absolute_url(), user.id)\n+                else:\n+                    value = None\n+            elif name == \'pdelete\':\n+                continue\n+            else:\n+                value = user.getProperty(name, \'\')\n+                if value == \'\':\n+                    value = None\n+                if value:\n+                    value = safe_unicode(value)\n+            data[name] = value\n+\n+        return data\n+\n \n @implementer(ISerializeToJson)\n @adapter(IMemberData, IRequest)\ndiff --git a/src/plone/restapi/services/__init__.py b/src/plone/restapi/services/__init__.py\nindex 2416c256..48311be5 100644\n--- a/src/plone/restapi/services/__init__.py\n+++ b/src/plone/restapi/services/__init__.py\n@@ -19,7 +19,8 @@ def render(self):\n         content = self.reply()\n         if content is not _no_content_marker:\n             self.request.response.setHeader("Content-Type", self.content_type)\n-            return json.dumps(content, indent=2, sort_keys=True)\n+            return json.dumps(\n+                content, indent=2, sort_keys=True, separators=(\', \', \': \'))\n \n     def check_permission(self):\n         sm = getSecurityManager()\ndiff --git a/src/plone/restapi/services/auth/login.py b/src/plone/restapi/services/auth/login.py\nindex dc4217da..39568e24 100644\n--- a/src/plone/restapi/services/auth/login.py\n+++ b/src/plone/restapi/services/auth/login.py\n@@ -8,6 +8,7 @@\n from zope.interface import alsoProvides\n \n import plone.protect.interfaces\n+import six\n \n \n class Login(Service):\n@@ -26,8 +27,11 @@ def reply(self):\n             alsoProvides(self.request,\n                          plone.protect.interfaces.IDisableCSRFProtection)\n \n-        userid = data[\'login\'].encode(\'utf8\')\n-        password = data[\'password\'].encode(\'utf8\')\n+        userid = data[\'login\']\n+        password = data[\'password\']\n+        if six.PY2:\n+            userid = userid.encode(\'utf8\')\n+            password = password.encode(\'utf8\')\n         uf = self._find_userfolder(userid)\n \n         if uf is not None:\ndiff --git a/src/plone/restapi/services/content/add.py b/src/plone/restapi/services/content/add.py\nindex efb2086f..1f51413f 100644\n--- a/src/plone/restapi/services/content/add.py\n+++ b/src/plone/restapi/services/content/add.py\n@@ -44,12 +44,12 @@ def reply(self):\n             self.request.response.setStatus(403)\n             return dict(error=dict(\n                 type=\'Forbidden\',\n-                message=exc.message))\n+                message=str(exc)))\n         except BadRequest as exc:\n             self.request.response.setStatus(400)\n             return dict(error=dict(\n                 type=\'Bad Request\',\n-                message=exc.message))\n+                message=str(exc)))\n \n         # Acquisition wrap temporarily to satisfy things like vocabularies\n         # depending on tools\ndiff --git a/src/plone/restapi/services/content/tus.py b/src/plone/restapi/services/content/tus.py\nindex ee37c13b..524e7c57 100644\n--- a/src/plone/restapi/services/content/tus.py\n+++ b/src/plone/restapi/services/content/tus.py\n@@ -1,7 +1,10 @@\n # -*- coding: utf-8 -*-\n+from Acquisition import aq_base\n+from Acquisition.interfaces import IAcquirer\n from AccessControl.SecurityManagement import getSecurityManager\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import base_hasattr\n+from Products.CMFPlone.utils import safe_hasattr\n from base64 import b64decode\n from email.utils import formatdate\n from fnmatch import fnmatch\n@@ -15,7 +18,7 @@\n from uuid import uuid4\n from zExceptions import Unauthorized\n from zope.component import queryMultiAdapter\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.publisher.interfaces import NotFound\n from zope.lifecycleevent import ObjectCreatedEvent\n@@ -37,7 +40,7 @@ class UploadOptions(Service):\n \n     def reply(self):\n         for name, value in TUS_OPTIONS_RESPONSE_HEADERS.items():\n-                    self.request.response.setHeader(name, value)\n+            self.request.response.setHeader(name, value)\n         return super(UploadOptions, self).reply()\n \n \n@@ -106,7 +109,9 @@ def reply(self):\n         for item in self.request.getHeader(\'Upload-Metadata\', \'\').split(\',\'):\n             key_value = item.split()\n             if len(key_value) == 2:\n-                metadata[key_value[0].lower()] = b64decode(key_value[1])\n+                key = key_value[0].lower()\n+                value = b64decode(key_value[1]).decode(\'utf-8\')\n+                metadata[key] = value\n         metadata[\'length\'] = length\n         if self.__name__.endswith(\'@tus-replace\'):\n             metadata[\'mode\'] = \'replace\'\n@@ -123,8 +128,8 @@ def reply(self):\n         return super(UploadPost, self).reply()\n \n \n+@implementer(IPublishTraverse)\n class UploadFileBase(TUSBaseService):\n-    implements(IPublishTraverse)\n \n     def __init__(self, context, request):\n         super(UploadFileBase, self).__init__(context, request)\n@@ -183,11 +188,10 @@ def reply(self):\n         return super(UploadHead, self).reply()\n \n \n+@implementer(IPublishTraverse)\n class UploadPatch(UploadFileBase):\n     """TUS upload endpoint for handling PATCH requests"""\n \n-    implements(IPublishTraverse)\n-\n     def reply(self):\n \n         tus_upload = self.tus_upload()\n@@ -212,63 +216,15 @@ def reply(self):\n             return self.error(\n                 \'Bad Request\', \'Missing or invalid Upload-Offset header\')\n \n-        tus_upload.write(self.request._file, offset)\n+        request_body = self.request._file\n+        if hasattr(request_body, \'raw\'):  # Unwrap io.BufferedRandom\n+            request_body = request_body.raw\n+        tus_upload.write(request_body, offset)\n+        offset = tus_upload.offset()\n \n         if tus_upload.finished:\n-            offset = tus_upload.offset()\n-            filename = metadata.get(\'filename\', \'\')\n-            content_type = metadata.get(\'content-type\',\n-                                        \'application/octet-stream\')\n-            mode = metadata.get(\'mode\', \'create\')\n-            fieldname = metadata.get(\'fieldname\')\n-\n-            if mode == \'create\':\n-                type_ = metadata.get(\'@type\')\n-                if type_ is None:\n-                    ctr = getToolByName(self.context, \'content_type_registry\')\n-                    type_ = ctr.findTypeName(\n-                        filename.lower(), content_type, \'\') or \'File\'\n-\n-                obj = create(self.context, type_)\n-            else:\n-                obj = self.context\n-\n-            if not fieldname:\n-                info = IPrimaryFieldInfo(obj, None)\n-                if info is not None:\n-                    fieldname = info.fieldname\n-                elif base_hasattr(obj, \'getPrimaryField\'):\n-                    field = obj.getPrimaryField()\n-                    fieldname = field.getName()\n-\n-            if not fieldname:\n-                return self.error(\'Bad Request\', \'Fieldname required\', 400)\n-\n-            # Update field with file data\n-            deserializer = queryMultiAdapter(\n-                (obj, self.request), IDeserializeFromJson)\n-            if deserializer is None:\n-                return self.error(\n-                    \'Not Implemented\',\n-                    \'Cannot deserialize type {}\'.format(\n-                        obj.portal_type),\n-                    501)\n-            try:\n-                deserializer(data={fieldname: tus_upload})\n-            except DeserializationError as e:\n-                return self.error(\n-                    \'Deserialization Error\', str(e), 400)\n-\n-            if mode == \'create\':\n-                if not getattr(deserializer, \'notifies_create\', False):\n-                    notify(ObjectCreatedEvent(obj))\n-                obj = add(self.context, obj)\n-\n-            tus_upload.close()\n-            tus_upload.cleanup()\n-            self.request.response.setHeader(\'Location\', obj.absolute_url())\n+            self.create_or_modify_content(tus_upload)\n         else:\n-            offset = tus_upload.offset()\n             self.request.response.setHeader(\n                 \'Upload-Expires\', tus_upload.expires())\n \n@@ -277,6 +233,70 @@ def reply(self):\n         self.request.response.setStatus(204, lock=1)\n         return super(UploadPatch, self).reply()\n \n+    def create_or_modify_content(self, tus_upload):\n+        metadata = tus_upload.metadata()\n+        filename = metadata.get(\'filename\', \'\')\n+        content_type = metadata.get(\'content-type\',\n+                                    \'application/octet-stream\')\n+        mode = metadata.get(\'mode\', \'create\')\n+        fieldname = metadata.get(\'fieldname\')\n+\n+        if mode == \'create\':\n+            type_ = metadata.get(\'@type\')\n+            if type_ is None:\n+                ctr = getToolByName(self.context, \'content_type_registry\')\n+                type_ = ctr.findTypeName(\n+                    filename.lower(), content_type, \'\') or \'File\'\n+\n+            obj = create(self.context, type_)\n+        else:\n+            obj = self.context\n+\n+        if not fieldname:\n+            info = IPrimaryFieldInfo(obj, None)\n+            if info is not None:\n+                fieldname = info.fieldname\n+            elif base_hasattr(obj, \'getPrimaryField\'):\n+                field = obj.getPrimaryField()\n+                fieldname = field.getName()\n+\n+        if not fieldname:\n+            return self.error(\'Bad Request\', \'Fieldname required\', 400)\n+\n+        # Acquisition wrap temporarily for deserialization\n+        temporarily_wrapped = False\n+        if IAcquirer.providedBy(obj) and not safe_hasattr(obj, \'aq_base\'):\n+            obj = obj.__of__(self.context)\n+            temporarily_wrapped = True\n+\n+        # Update field with file data\n+        deserializer = queryMultiAdapter(\n+            (obj, self.request), IDeserializeFromJson)\n+        if deserializer is None:\n+            return self.error(\n+                \'Not Implemented\',\n+                \'Cannot deserialize type {}\'.format(\n+                    obj.portal_type),\n+                501)\n+        try:\n+            deserializer(\n+                data={fieldname: tus_upload}, create=mode == \'create\')\n+        except DeserializationError as e:\n+            return self.error(\n+                \'Deserialization Error\', str(e), 400)\n+\n+        if temporarily_wrapped:\n+            obj = aq_base(obj)\n+\n+        if mode == \'create\':\n+            if not getattr(deserializer, \'notifies_create\', False):\n+                notify(ObjectCreatedEvent(obj))\n+            obj = add(self.context, obj)\n+\n+        tus_upload.close()\n+        tus_upload.cleanup()\n+        self.request.response.setHeader(\'Location\', obj.absolute_url())\n+\n \n class TUSUpload(object):\n \n@@ -306,7 +326,7 @@ def __init__(self, uid, metadata=None):\n     def initalize(self, metadata):\n         """Initialize a new TUS upload by writing its metadata to disk."""\n         self.cleanup_expired()\n-        with open(self.metadata_path, \'wb\') as f:\n+        with open(self.metadata_path, \'w\') as f:\n             json.dump(metadata, f)\n \n     def length(self):\ndiff --git a/src/plone/restapi/services/content/utils.py b/src/plone/restapi/services/content/utils.py\nindex d8fc1025..d4111d65 100644\n--- a/src/plone/restapi/services/content/utils.py\n+++ b/src/plone/restapi/services/content/utils.py\n@@ -15,6 +15,8 @@\n from zope.container.interfaces import INameChooser\n from zope.event import notify\n \n+import six\n+\n \n def create(container, type_, id_=None, title=None):\n     """Create a new content item."""\n@@ -28,7 +30,7 @@ def create(container, type_, id_=None, title=None):\n             str(now.millis())[7:],\n             randint(0, 9999))\n     else:\n-        if isinstance(id_, unicode):\n+        if six.PY2 and isinstance(id_, six.text_type):\n             new_id = id_.encode(\'utf8\')\n         else:\n             new_id = id_\ndiff --git a/src/plone/restapi/services/copymove/copymove.py b/src/plone/restapi/services/copymove/copymove.py\nindex bb537dad..5e12ea4c 100644\n--- a/src/plone/restapi/services/copymove/copymove.py\n+++ b/src/plone/restapi/services/copymove/copymove.py\n@@ -9,6 +9,7 @@\n from zope.security import checkPermission\n \n import plone\n+import six\n \n \n class BaseCopyMove(Service):\n@@ -24,15 +25,19 @@ def __init__(self, context, request):\n \n     def get_object(self, key):\n         """Get an object by url, path or UID."""\n-        if isinstance(key, basestring):\n+        if isinstance(key, six.string_types):\n             if key.startswith(self.portal_url):\n                 # Resolve by URL\n-                return self.portal.restrictedTraverse(\n-                    key[len(self.portal_url) + 1:].encode(\'utf8\'), None)\n+                key = key[len(self.portal_url) + 1:]\n+                if six.PY2:\n+                    key = key.encode(\'utf8\')\n+                return self.portal.restrictedTraverse(key, None)\n             elif key.startswith(\'/\'):\n+                if six.PY2:\n+                    key = key.encode(\'utf8\')\n                 # Resolve by path\n                 return self.portal.restrictedTraverse(\n-                    key.encode(\'utf8\').lstrip(\'/\'), None)\n+                    key.lstrip(\'/\'), None)\n             else:\n                 # Resolve by UID\n                 brain = self.catalog(UID=key)\ndiff --git a/src/plone/restapi/services/discussion/conversation.py b/src/plone/restapi/services/discussion/conversation.py\nindex 051749a2..1857f226 100644\n--- a/src/plone/restapi/services/discussion/conversation.py\n+++ b/src/plone/restapi/services/discussion/conversation.py\n@@ -39,7 +39,7 @@ class CommentsGet(Service):\n \n     def publishTraverse(self, request, name):\n         if name:\n-            self.comment_id = long(name)\n+            self.comment_id = int(name)\n         return self\n \n     def reply(self):\n@@ -64,7 +64,7 @@ class CommentsAdd(Service):\n \n     def publishTraverse(self, request, name):\n         if name:\n-            self.comment_id = long(name)\n+            self.comment_id = int(name)\n             request[\'form.widgets.in_reply_to\'] = name\n         return self\n \n@@ -75,7 +75,7 @@ def reply(self):\n                          plone.protect.interfaces.IDisableCSRFProtection)\n \n         conversation = IConversation(self.context)\n-        if self.comment_id and self.comment_id not in conversation.keys():\n+        if self.comment_id and self.comment_id not in list(conversation):\n             self.request.response.setStatus(404)\n             return\n \n@@ -104,7 +104,7 @@ class CommentsUpdate(Service):\n \n     def publishTraverse(self, request, name):\n         if name:\n-            self.comment_id = long(name)\n+            self.comment_id = int(name)\n             request[\'form.widgets.comment_id\'] = name\n         return self\n \n@@ -113,7 +113,7 @@ def reply(self):\n             raise BadRequest("Comment id is a required part of the url")\n \n         conversation = IConversation(self.context)\n-        if self.comment_id not in conversation.keys():\n+        if self.comment_id not in list(conversation):\n             self.request.response.setStatus(404)\n             return\n         comment = conversation[self.comment_id]\n@@ -148,7 +148,7 @@ class CommentsDelete(Service):\n     comment_id = None\n \n     def publishTraverse(self, request, name):\n-        self.comment_id = long(name)\n+        self.comment_id = int(name)\n         return self\n \n     def reply(self):\ndiff --git a/src/plone/restapi/services/email_send/post.py b/src/plone/restapi/services/email_send/post.py\nindex 94d37d8d..f142e1be 100644\n--- a/src/plone/restapi/services/email_send/post.py\n+++ b/src/plone/restapi/services/email_send/post.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from AccessControl.Permissions import use_mailhost_services\n-from email.MIMEText import MIMEText\n+from email.mime.text import MIMEText\n from plone.registry.interfaces import IRegistry\n from plone.restapi import _\n from plone.restapi.deserializer import json_body\ndiff --git a/src/plone/restapi/services/groups/delete.py b/src/plone/restapi/services/groups/delete.py\nindex 11bde167..13b7046a 100644\n--- a/src/plone/restapi/services/groups/delete.py\n+++ b/src/plone/restapi/services/groups/delete.py\n@@ -3,16 +3,15 @@\n from Products.CMFCore.utils import getToolByName\n from zExceptions import NotFound\n from zope.component.hooks import getSite\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n \n+@implementer(IPublishTraverse)\n class GroupsDelete(Service):\n     """Deletes a user.\n     """\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(GroupsDelete, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/groups/get.py b/src/plone/restapi/services/groups/get.py\nindex 0c099e6c..0b7c88cd 100644\n--- a/src/plone/restapi/services/groups/get.py\n+++ b/src/plone/restapi/services/groups/get.py\n@@ -6,16 +6,15 @@\n from zExceptions import BadRequest\n from zope.component.hooks import getSite\n from zope.component import queryMultiAdapter\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n DEFAULT_SEARCH_RESULTS_LIMIT = 25\n \n \n+@implementer(IPublishTraverse)\n class GroupsGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(GroupsGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/groups/update.py b/src/plone/restapi/services/groups/update.py\nindex 863bc42c..46b22e09 100644\n--- a/src/plone/restapi/services/groups/update.py\n+++ b/src/plone/restapi/services/groups/update.py\n@@ -4,18 +4,17 @@\n from Products.CMFCore.utils import getToolByName\n from zExceptions import BadRequest\n from zope.component.hooks import getSite\n-from zope.interface import alsoProvides, implements\n+from zope.interface import alsoProvides, implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n import plone\n \n \n+@implementer(IPublishTraverse)\n class GroupsPatch(Service):\n     """Updates an existing group.\n     """\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(GroupsPatch, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/history/get.py b/src/plone/restapi/services/history/get.py\nindex 8b7936ef..4354a288 100644\n--- a/src/plone/restapi/services/history/get.py\n+++ b/src/plone/restapi/services/history/get.py\n@@ -9,6 +9,7 @@\n from zope.publisher.interfaces import IPublishTraverse\n from Products.CMFPlone.utils import safe_unicode\n from datetime import datetime as dt\n+import six\n \n \n @implementer(IPublishTraverse)\n@@ -74,7 +75,7 @@ def reply(self):\n \n             # Versioning entries use a timestamp,\n             # workflow ISO formatted string\n-            if not isinstance(item[\'time\'], basestring):\n+            if not isinstance(item[\'time\'], six.string_types):\n                 item[\'time\'] = dt.fromtimestamp(item[\'time\']).isoformat()\n \n             # The create event has an empty \'action\', but we like it to say\ndiff --git a/src/plone/restapi/services/history/patch.py b/src/plone/restapi/services/history/patch.py\nindex 062b5c58..0b759a2b 100644\n--- a/src/plone/restapi/services/history/patch.py\n+++ b/src/plone/restapi/services/history/patch.py\n@@ -6,6 +6,7 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFEditions import CMFEditionsMessageFactory as _\n from Products.CMFEditions.interfaces.IModifier import FileTooLargeToVersionError  # noqa\n+import six\n \n \n class HistoryPatch(Service):\n@@ -21,8 +22,8 @@ def revert(context, version):\n     pr.revert(context, version)\n \n     title = context.title_or_id()\n-    if not isinstance(title, unicode):\n-        title = unicode(title, \'utf-8\', \'ignore\')\n+    if not isinstance(title, six.text_type):\n+        title = six.text_type(title, \'utf-8\', \'ignore\')\n \n     if pr.supportsPolicy(context, \'version_on_revert\'):\n         try:\ndiff --git a/src/plone/restapi/services/multilingual/pam.py b/src/plone/restapi/services/multilingual/pam.py\nindex 6a378128..bd2ec0e8 100644\n--- a/src/plone/restapi/services/multilingual/pam.py\n+++ b/src/plone/restapi/services/multilingual/pam.py\n@@ -125,7 +125,7 @@ def reply(self):\n                 type=\'BadRequest\',\n                 message=\'You need to provide the language to unlink\'))\n \n-        if language not in manager.get_translations().keys():\n+        if language not in list(manager.get_translations()):\n             self.request.response.setStatus(400)\n             return dict(error=dict(\n                 type=\'BadRequest\',\ndiff --git a/src/plone/restapi/services/registry/get.py b/src/plone/restapi/services/registry/get.py\nindex 5e8a39dd..ed53e17d 100644\n--- a/src/plone/restapi/services/registry/get.py\n+++ b/src/plone/restapi/services/registry/get.py\n@@ -2,15 +2,14 @@\n from plone.registry.interfaces import IRegistry\n from plone.restapi.services import Service\n from zope.component import getUtility, getMultiAdapter\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from plone.restapi.interfaces import ISerializeToJson\n \n \n+@implementer(IPublishTraverse)\n class RegistryGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(RegistryGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/tiles/get.py b/src/plone/restapi/services/tiles/get.py\nindex 2cdf443e..0da486c7 100644\n--- a/src/plone/restapi/services/tiles/get.py\n+++ b/src/plone/restapi/services/tiles/get.py\n@@ -6,15 +6,14 @@\n from plone.tiles.interfaces import ITileType\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.restapi.interfaces import ISerializeToJson\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.component import getUtility\n \n \n+@implementer(IPublishTraverse)\n class TilesGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(TilesGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/types/get.py b/src/plone/restapi/services/types/get.py\nindex 9b252ecb..64da46ab 100644\n--- a/src/plone/restapi/services/types/get.py\n+++ b/src/plone/restapi/services/types/get.py\n@@ -7,15 +7,14 @@\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.i18n import translate\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.schema.interfaces import IVocabularyFactory\n \n \n+@implementer(IPublishTraverse)\n class TypesGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(TypesGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex 9241a724..8f924966 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -1,18 +1,20 @@\n # -*- coding: utf-8 -*-\n \n from AccessControl import getSecurityManager\n-\n from plone.restapi.deserializer import json_body\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.services import Service\n-from Products.CMFCore.utils import getToolByName\n from Products.CMFCore.permissions import AddPortalMember\n from Products.CMFCore.permissions import SetOwnPassword\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.RegistrationTool import get_member_by_login_name\n+from Products.CMFPlone.utils import getFSVersionTuple\n from zope.component import getAdapter\n+from zope.component import getMultiAdapter\n from zope.component import queryMultiAdapter\n from zope.component.hooks import getSite\n from zope.interface import alsoProvides\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n import plone.protect.interfaces\n@@ -31,13 +33,14 @@\n     from Products.PasswordResetTool.PasswordResetTool import ExpiredRequestError  # noqa\n     from Products.PasswordResetTool.PasswordResetTool import InvalidRequestError  # noqa\n \n+PLONE5 = getFSVersionTuple()[0] >= 5\n \n+\n+@implementer(IPublishTraverse)\n class UsersPost(Service):\n     """Creates a new user.\n     """\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(UsersPost, self).__init__(context, request)\n         self.params = []\n@@ -150,12 +153,43 @@ def reply(self):\n         send_password_reset = data.pop(\'sendPasswordReset\', None)\n         properties = data\n \n-        # set username based on the login settings (username or email)\n-        if security.use_email_as_login:\n-            username = email\n-            properties[\'username\'] = email\n+        if PLONE5:\n+            # We are improving the way the userid/login_name is generated using\n+            # Plone\'s plone.app.users utilities directly. Plone 4 lacks of the\n+            # login_name one, so we leave it as it is, improving the Plone 5\n+            # story\n+            user_id_login_name_data = {\n+                \'username\': username,\n+                \'email\': email,\n+                \'fullname\': data.get(\'fullname\', \'\')\n+            }\n+\n+            register_view = getMultiAdapter(\n+                (self.context, self.request),\n+                name=\'register\'\n+            )\n+\n+            register_view.generate_user_id(user_id_login_name_data)\n+            register_view.generate_login_name(user_id_login_name_data)\n+\n+            user_id = user_id_login_name_data.get(\n+                \'user_id\',\n+                data.get(\'username\')\n+            )\n+            login_name = user_id_login_name_data.get(\n+                \'login_name\',\n+                data.get(\'username\')\n+            )\n+\n+            username = user_id\n+            properties[\'username\'] = user_id\n         else:\n-            properties[\'username\'] = username\n+            # set username based on the login settings (username or email)\n+            if security.use_email_as_login:\n+                username = email\n+                properties[\'username\'] = email\n+            else:\n+                properties[\'username\'] = username\n \n         properties[\'email\'] = email\n \n@@ -176,7 +210,17 @@ def reply(self):\n             self.request.response.setStatus(400)\n             return dict(error=dict(\n                 type=\'MissingParameterError\',\n-                message=str(e.message)))\n+                message=str(e)))\n+\n+        if PLONE5:\n+            # After user creation, we have to fix the login_name if it differs.\n+            # That happens when the email login is enabled and we are using\n+            # UUID as user ID security settings.\n+            if user_id != login_name:\n+                # The user id differs from the login name.  Set the login\n+                # name correctly.\n+                pas = getToolByName(self.context, \'acl_users\')\n+                pas.updateLoginName(user_id, login_name)\n \n         if send_password_reset:\n             registration.registeredNotify(username)\n@@ -195,6 +239,10 @@ def _get_user(self, user_id):\n         portal_membership = getToolByName(portal, \'portal_membership\')\n         return portal_membership.getMemberById(user_id)\n \n+    def _get_user_by_login_name(self, user_id):\n+        return get_member_by_login_name(\n+            self.context, user_id, raise_exceptions=False)\n+\n     def _error(self, status, type, message):\n         self.request.response.setStatus(status)\n         return {\'error\': {\'type\': type,\n@@ -218,7 +266,7 @@ def can_add_member(self):\n \n     def update_password(self, data):\n         username = self.params[0]\n-        target_user = self._get_user(username)\n+        target_user = self._get_user_by_login_name(username)\n         reset_token = data.get(\'reset_token\', None)\n         old_password = data.get(\'old_password\', None)\n         new_password = data.get(\'new_password\', None)\n@@ -232,7 +280,7 @@ def update_password(self, data):\n             return\n \n         # Send password reset mail\n-        if data.keys() == []:\n+        if list(data) == []:\n             registration_tool = getToolByName(self.context,\n                                               \'portal_registration\')\n             registration_tool.mailPassword(username, self.request)\ndiff --git a/src/plone/restapi/services/users/delete.py b/src/plone/restapi/services/users/delete.py\nindex 92e17bd6..35fc3145 100644\n--- a/src/plone/restapi/services/users/delete.py\n+++ b/src/plone/restapi/services/users/delete.py\n@@ -2,16 +2,15 @@\n from plone.restapi.services import Service\n from Products.CMFCore.utils import getToolByName\n from zope.component.hooks import getSite\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n \n+@implementer(IPublishTraverse)\n class UsersDelete(Service):\n     """Deletes a user.\n     """\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(UsersDelete, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex e1a6b8e9..fa91577a 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -6,16 +6,15 @@\n from zExceptions import BadRequest\n from zope.component.hooks import getSite\n from zope.component import queryMultiAdapter\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n DEFAULT_SEARCH_RESULTS_LIMIT = 25\n \n \n+@implementer(IPublishTraverse)\n class UsersGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(UsersGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/users/update.py b/src/plone/restapi/services/users/update.py\nindex 9ffd2970..41c50e13 100644\n--- a/src/plone/restapi/services/users/update.py\n+++ b/src/plone/restapi/services/users/update.py\n@@ -6,7 +6,7 @@\n from Products.CMFCore.utils import getToolByName\n from zope.component.hooks import getSite\n from zope.interface import alsoProvides\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.component import getAdapter\n \n@@ -19,12 +19,11 @@\n     from plone.app.controlpanel.security import ISecuritySchema\n \n \n+@implementer(IPublishTraverse)\n class UsersPatch(Service):\n     """Updates an existing user.\n     """\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(UsersPatch, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/vocabularies/get.py b/src/plone/restapi/services/vocabularies/get.py\nindex ba88c03d..48233e6d 100644\n--- a/src/plone/restapi/services/vocabularies/get.py\n+++ b/src/plone/restapi/services/vocabularies/get.py\n@@ -4,16 +4,15 @@\n from zope.component import ComponentLookupError\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.schema.interfaces import IVocabularyFactory\n from zope.component import getUtilitiesFor\n \n \n+@implementer(IPublishTraverse)\n class VocabulariesGet(Service):\n \n-    implements(IPublishTraverse)\n-\n     def __init__(self, context, request):\n         super(VocabulariesGet, self).__init__(context, request)\n         self.params = []\ndiff --git a/src/plone/restapi/services/workflow/configure.zcml b/src/plone/restapi/services/workflow/configure.zcml\nindex e26831d0..6f77abef 100644\n--- a/src/plone/restapi/services/workflow/configure.zcml\n+++ b/src/plone/restapi/services/workflow/configure.zcml\n@@ -3,6 +3,14 @@\n     xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml">\n \n+  <plone:service\n+    method="GET"\n+    name="@workflow"\n+    for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+    factory=".info.WorkflowInfoService"\n+    permission="zope2.View"\n+    />\n+\n   <plone:service\n     method="GET"\n     name="@workflow"\ndiff --git a/src/plone/restapi/services/workflow/info.py b/src/plone/restapi/services/workflow/info.py\nindex ac8fd1e1..a4cb0e54 100644\n--- a/src/plone/restapi/services/workflow/info.py\n+++ b/src/plone/restapi/services/workflow/info.py\n@@ -2,12 +2,14 @@\n from Products.CMFCore.WorkflowCore import WorkflowException\n from Products.CMFCore.utils import getToolByName\n from Products.CMFCore.interfaces._content import IWorkflowAware\n+from Products.CMFPlone.interfaces import IPloneSiteRoot\n from plone.restapi.interfaces import IExpandableElement\n from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.services import Service\n from zope.component import adapter\n from zope.interface import Interface\n from zope.interface import implementer\n+import six\n \n \n @implementer(IExpandableElement)\n@@ -27,6 +29,14 @@ def __call__(self, expand=False):\n         if not expand:\n             return result\n \n+        # Prevent 404 on site root on workflow request\n+        # Although 404 will be more semantic, for the sake of uniformity of the\n+        # API we fake the response to the endpoint by providing an empty\n+        # response instead of a 404.\n+        if IPloneSiteRoot.providedBy(self.context):\n+            result[\'workflow\'].update({\'history\': [], \'transitions\': []})\n+            return result\n+\n         wftool = getToolByName(self.context, \'portal_workflow\')\n         try:\n             history = wftool.getInfoFor(self.context, "review_history")\n@@ -39,20 +49,24 @@ def __call__(self, expand=False):\n             if action[\'category\'] != \'workflow\':\n                 continue\n \n+            title = action[\'title\']\n+            if isinstance(title, six.binary_type):\n+                title = title.decode(\'utf8\')\n+\n             transitions.append({\n                 \'@id\': \'{}/@workflow/{}\'.format(\n                     self.context.absolute_url(), action[\'id\']),\n-                \'title\': self.context.translate(\n-                    action[\'title\'].decode(\'utf8\')),\n+                \'title\': self.context.translate(title),\n             })\n \n         for item, action in enumerate(history):\n-            history[item][\'title\'] = self.context.translate(\n-                wftool.getTitleForStateOnType(\n-                    action[\'review_state\'],\n-                    self.context.portal_type\n-                ).decode(\'utf8\')\n+            title = wftool.getTitleForStateOnType(\n+                action[\'review_state\'],\n+                self.context.portal_type\n             )\n+            if isinstance(title, six.binary_type):\n+                title = title.decode(\'utf8\')\n+            history[item][\'title\'] = self.context.translate(title)\n \n         result[\'workflow\'].update({\n             \'history\': json_compatible(history),\n@@ -64,6 +78,7 @@ def __call__(self, expand=False):\n class WorkflowInfoService(Service):\n     """Get workflow information\n     """\n+\n     def reply(self):\n         info = WorkflowInfo(self.context, self.request)\n         return info(expand=True)[\'workflow\']\ndiff --git a/src/plone/restapi/services/workflow/transition.py b/src/plone/restapi/services/workflow/transition.py\nindex 8b034300..fc09edb2 100644\n--- a/src/plone/restapi/services/workflow/transition.py\n+++ b/src/plone/restapi/services/workflow/transition.py\n@@ -10,17 +10,17 @@\n from zope.component import queryMultiAdapter\n from zope.i18n import translate\n from zope.interface import alsoProvides\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.publisher.interfaces import NotFound\n \n import plone.protect.interfaces\n \n \n+@implementer(IPublishTraverse)\n class WorkflowTransition(Service):\n     """Trigger workflow transition\n     """\n-    implements(IPublishTraverse)\n \n     def __init__(self, context, request):\n         super(WorkflowTransition, self).__init__(context, request)\n@@ -69,7 +69,7 @@ def reply(self):\n             self.request.response.setStatus(400)\n             return dict(error=dict(\n                 type=\'WorkflowException\',\n-                message=translate(e.message, context=self.request)))\n+                message=translate(str(e), context=self.request)))\n         except BadRequest as e:\n             self.request.response.setStatus(400)\n             return dict(error=dict(\ndiff --git a/src/plone/restapi/setuphandlers.py b/src/plone/restapi/setuphandlers.py\nindex ce9f3c3e..3b6ef6f9 100644\n--- a/src/plone/restapi/setuphandlers.py\n+++ b/src/plone/restapi/setuphandlers.py\n@@ -4,6 +4,7 @@\n from plone.restapi.pas.plugin import JWTAuthenticationPlugin\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import INonInstallable\n+from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService  # noqa: E501\n from zope.interface import implementer\n \n \n@@ -30,7 +31,7 @@ def install_pas_plugin(context):\n     uf_parent = aq_inner(context)\n     while True:\n         uf = getToolByName(uf_parent, \'acl_users\')\n-        if \'jwt_auth\' not in uf:\n+        if IPluggableAuthService.providedBy(uf) and \'jwt_auth\' not in uf:\n             plugin = JWTAuthenticationPlugin(\'jwt_auth\')\n             uf._setObject(plugin.getId(), plugin)\n             plugin = uf[\'jwt_auth\']\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 8add5665..160526cb 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -23,12 +23,13 @@\n from plone.testing.layer import Layer\n from plone.uuid.interfaces import IUUIDGenerator\n from Products.CMFCore.utils import getToolByName\n-from urlparse import urljoin\n-from urlparse import urlparse\n+from requests.exceptions import ConnectionError\n+from six.moves.urllib.parse import urljoin\n+from six.moves.urllib.parse import urlparse\n from zope.component import getGlobalSiteManager\n from zope.component import getUtility\n from zope.configuration import xmlconfig\n-from zope.interface import implements\n+from zope.interface import implementer\n \n import collective.MockMailHost\n import pkg_resources\n@@ -52,6 +53,12 @@\n else:\n     PLONE_5 = True  # pragma: no cover\n \n+try:\n+    pkg_resources.get_distribution(\'Products.Archetypes\')\n+except pkg_resources.DistributionNotFound:\n+    HAS_AT = False\n+else:\n+    HAS_AT = True\n \n ENABLED_LANGUAGES = [\'de\', \'en\', \'es\', \'fr\']\n \n@@ -253,57 +260,85 @@ def setUpPloneSite(self, portal):\n )\n \n \n-class PloneRestApiATLayer(PloneSandboxLayer):\n+if HAS_AT:\n+    class PloneRestApiATLayer(PloneSandboxLayer):\n+\n+        defaultBases = (DATE_TIME_FIXTURE, PLONE_FIXTURE,)\n+\n+        def setUpZope(self, app, configurationContext):\n+            import Products.ATContentTypes\n+            self.loadZCML(package=Products.ATContentTypes)\n+            import plone.app.dexterity\n+            self.loadZCML(package=plone.app.dexterity)\n+\n+            import plone.restapi\n+            xmlconfig.file(\n+                \'configure.zcml\',\n+                plone.restapi,\n+                context=configurationContext\n+            )\n+\n+            z2.installProduct(app, \'Products.Archetypes\')\n+            z2.installProduct(app, \'Products.ATContentTypes\')\n+            z2.installProduct(app, \'plone.app.collection\')\n+            z2.installProduct(app, \'plone.app.blob\')\n+            z2.installProduct(app, \'plone.restapi\')\n+\n+        def setUpPloneSite(self, portal):\n+            set_supported_languages(portal)\n+\n+            if portal.portal_setup.profileExists(\n+                    \'Products.ATContentTypes:default\'):\n+                applyProfile(portal, \'Products.ATContentTypes:default\')\n+            if portal.portal_setup.profileExists(\n+                    \'plone.app.collection:default\'):\n+                applyProfile(portal, \'plone.app.collection:default\')\n+\n+            applyProfile(portal, \'plone.app.dexterity:default\')\n+            applyProfile(portal, \'plone.restapi:default\')\n+            applyProfile(portal, \'plone.restapi:testing\')\n+            set_available_languages()\n+            enable_request_language_negotiation(portal)\n+            portal.portal_workflow.setDefaultChain(\'simple_publication_workflow\')  # noqa: E501\n+            states = portal.portal_workflow[\'simple_publication_workflow\'].states  # noqa: E501\n+            states[\'published\'].title = u\'Published with accent \xc3\xa9\'.encode(\'utf8\')  # noqa: E501\n+\n+    PLONE_RESTAPI_AT_FIXTURE = PloneRestApiATLayer()\n+    PLONE_RESTAPI_AT_INTEGRATION_TESTING = IntegrationTesting(\n+        bases=(PLONE_RESTAPI_AT_FIXTURE,),\n+        name="PloneRestApiATLayer:Integration"\n+    )\n+    PLONE_RESTAPI_AT_FUNCTIONAL_TESTING = FunctionalTesting(\n+        bases=(PLONE_RESTAPI_AT_FIXTURE, z2.ZSERVER_FIXTURE),\n+        name="PloneRestApiATLayer:Functional"\n+    )\n+else:\n+    PLONE_RESTAPI_AT_INTEGRATION_TESTING = PLONE_FIXTURE\n+    PLONE_RESTAPI_AT_FUNCTIONAL_TESTING = PLONE_FIXTURE\n \n-    defaultBases = (DATE_TIME_FIXTURE, PLONE_FIXTURE,)\n \n-    def setUpZope(self, app, configurationContext):\n-        import Products.ATContentTypes\n-        self.loadZCML(package=Products.ATContentTypes)\n-        import plone.app.dexterity\n-        self.loadZCML(package=plone.app.dexterity)\n+class PloneRestApiTilesLayer(PloneSandboxLayer):\n \n-        import plone.restapi\n-        xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.restapi,\n-            context=configurationContext\n-        )\n-\n-        z2.installProduct(app, \'Products.Archetypes\')\n-        z2.installProduct(app, \'Products.ATContentTypes\')\n-        z2.installProduct(app, \'plone.app.collection\')\n-        z2.installProduct(app, \'plone.app.blob\')\n-        z2.installProduct(app, \'plone.restapi\')\n+    defaultBases = (PLONE_RESTAPI_DX_FIXTURE,)\n \n     def setUpPloneSite(self, portal):\n-        set_supported_languages(portal)\n+        applyProfile(portal, \'plone.restapi:tiles\')\n \n-        if portal.portal_setup.profileExists(\n-                \'Products.ATContentTypes:default\'):\n-            applyProfile(portal, \'Products.ATContentTypes:default\')\n-        if portal.portal_setup.profileExists(\n-                \'plone.app.collection:default\'):\n-            applyProfile(portal, \'plone.app.collection:default\')\n \n-        applyProfile(portal, \'plone.app.dexterity:default\')\n-        applyProfile(portal, \'plone.restapi:default\')\n-        applyProfile(portal, \'plone.restapi:testing\')\n-        set_available_languages()\n-        enable_request_language_negotiation(portal)\n-        portal.portal_workflow.setDefaultChain("simple_publication_workflow")\n-        states = portal.portal_workflow[\'simple_publication_workflow\'].states\n-        states[\'published\'].title = u\'Published with accent \xc3\xa9\'.encode(\'utf8\')\n-\n-\n-PLONE_RESTAPI_AT_FIXTURE = PloneRestApiATLayer()\n-PLONE_RESTAPI_AT_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_RESTAPI_AT_FIXTURE,),\n-    name="PloneRestApiATLayer:Integration"\n+PLONE_RESTAPI_TILES_FIXTURE = PloneRestApiTilesLayer()\n+PLONE_RESTAPI_TILES_INTEGRATION_TESTING = IntegrationTesting(\n+    bases=(PLONE_RESTAPI_TILES_FIXTURE,),\n+    name="PloneRestApiTilesLayer:Integration"\n+)\n+PLONE_RESTAPI_TILES_FUNCTIONAL_TESTING = FunctionalTesting(\n+    bases=(PLONE_RESTAPI_TILES_FIXTURE, z2.ZSERVER_FIXTURE),\n+    name="PloneRestApiTilesLayer:Functional"\n )\n-PLONE_RESTAPI_AT_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_AT_FIXTURE, z2.ZSERVER_FIXTURE),\n-    name="PloneRestApiATLayer:Functional"\n+PLONE_RESTAPI_TILES_FUNCTIONAL_TESTING_FREEZETIME = FunctionalTesting(\n+    bases=(FREEZE_TIME_FIXTURE,\n+           PLONE_RESTAPI_TILES_FIXTURE,\n+           z2.ZSERVER_FIXTURE),\n+    name="PloneRestApiTilesLayerFreeze:Functional"\n )\n \n \n@@ -322,17 +357,23 @@ def request(self, method, url, **kwargs):\n         if urlparse(url).scheme not in (\'http\', \'https\'):\n             url = url.lstrip(\'/\')\n             url = urljoin(self.__base_url, url)\n-        return super(RelativeSession, self).request(method, url, **kwargs)\n+        try:\n+            return super(RelativeSession, self).request(method, url, **kwargs)\n+        except ConnectionError:\n+            # On Jenkins we often get one ConnectionError in a seemingly\n+            # random test, mostly in test_documentation.py.\n+            # The server is still listening: the port is open.  We retry once.\n+            time.sleep(1)\n+            return super(RelativeSession, self).request(method, url, **kwargs)\n \n \n+@implementer(IUUIDGenerator)\n class StaticUUIDGenerator(object):\n     """UUID generator that produces stable UUIDs for use in tests.\n \n     Based on code from ftw.testing\n     """\n \n-    implements(IUUIDGenerator)\n-\n     def __init__(self, prefix):\n         self.prefix = prefix[:26]\n         self.counter = 0\ndiff --git a/src/plone/restapi/tests/dxtypes.py b/src/plone/restapi/tests/dxtypes.py\nindex 92ceb742..2284f677 100644\n--- a/src/plone/restapi/tests/dxtypes.py\n+++ b/src/plone/restapi/tests/dxtypes.py\n@@ -145,6 +145,10 @@ def default_factory(context):\n class DXTestDocument(Item):\n     """A Dexterity based test type containing a set of standard fields."""\n \n+    # Plone standard types (both, dx and at) do provide exclude_from_nav\n+    # and at least one test expect it to be here, so make it explicit\n+    exclude_from_nav = False\n+\n \n @provider(IFormFieldProvider)\n class ITestBehavior(model.Schema):\ndiff --git a/src/plone/restapi/tests/helpers.py b/src/plone/restapi/tests/helpers.py\nindex f0ca5d9f..49ea7049 100644\n--- a/src/plone/restapi/tests/helpers.py\n+++ b/src/plone/restapi/tests/helpers.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n-from urlparse import urlparse\n+from six.moves.urllib.parse import urlparse\n \n \n def result_paths(results):\ndiff --git a/src/plone/restapi/tests/http-examples/groups.resp b/src/plone/restapi/tests/http-examples/groups.resp\nindex 4900bf9e..6f24788b 100644\n--- a/src/plone/restapi/tests/http-examples/groups.resp\n+++ b/src/plone/restapi/tests/http-examples/groups.resp\n@@ -8,6 +8,10 @@ Content-Type: application/json\n     "email": "", \n     "groupname": "Administrators", \n     "id": "Administrators", \n+    "roles": [\n+      "Manager", \n+      "Authenticated"\n+    ], \n     "title": "Administrators"\n   }, \n   {\n@@ -16,6 +20,10 @@ Content-Type: application/json\n     "email": "", \n     "groupname": "Reviewers", \n     "id": "Reviewers", \n+    "roles": [\n+      "Reviewer", \n+      "Authenticated"\n+    ], \n     "title": "Reviewers"\n   }, \n   {\n@@ -24,6 +32,10 @@ Content-Type: application/json\n     "email": "", \n     "groupname": "Site Administrators", \n     "id": "Site Administrators", \n+    "roles": [\n+      "Site Administrator", \n+      "Authenticated"\n+    ], \n     "title": "Site Administrators"\n   }, \n   {\n@@ -32,6 +44,9 @@ Content-Type: application/json\n     "email": "ploneteam@plone.org", \n     "groupname": "ploneteam", \n     "id": "ploneteam", \n+    "roles": [\n+      "Authenticated"\n+    ], \n     "title": "Plone Team"\n   }, \n   {\n@@ -40,6 +55,7 @@ Content-Type: application/json\n     "email": "", \n     "groupname": "AuthenticatedUsers", \n     "id": "AuthenticatedUsers", \n+    "roles": [], \n     "title": "Authenticated Users (Virtual Group)"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/groups_created.resp b/src/plone/restapi/tests/http-examples/groups_created.resp\nindex d7611e18..db08b74d 100644\n--- a/src/plone/restapi/tests/http-examples/groups_created.resp\n+++ b/src/plone/restapi/tests/http-examples/groups_created.resp\n@@ -8,6 +8,10 @@ Location: http://localhost:55001/plone/@groups/fwt\n   "email": "fwt@plone.org", \n   "groupname": "fwt", \n   "id": "fwt", \n+  "roles": [\n+    "Manager", \n+    "Authenticated"\n+  ], \n   "title": "Framework Team", \n   "users": {\n     "@id": "http://localhost:55001/plone/@groups", \ndiff --git a/src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp b/src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp\nindex d4358609..2932114e 100644\n--- a/src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp\n+++ b/src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp\n@@ -8,6 +8,9 @@ Content-Type: application/json\n     "email": "ploneteam@plone.org", \n     "groupname": "ploneteam", \n     "id": "ploneteam", \n+    "roles": [\n+      "Authenticated"\n+    ], \n     "title": "Plone Team"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/groups_get.resp b/src/plone/restapi/tests/http-examples/groups_get.resp\nindex 32616b25..656466e0 100644\n--- a/src/plone/restapi/tests/http-examples/groups_get.resp\n+++ b/src/plone/restapi/tests/http-examples/groups_get.resp\n@@ -7,6 +7,9 @@ Content-Type: application/json\n   "email": "ploneteam@plone.org", \n   "groupname": "ploneteam", \n   "id": "ploneteam", \n+  "roles": [\n+    "Authenticated"\n+  ], \n   "title": "Plone Team", \n   "users": {\n     "@id": "http://localhost:55001/plone/@groups/ploneteam", \ndiff --git a/src/plone/restapi/tests/http-examples/jwt_logged_in.resp b/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\nindex 8ce3cff3..3dabbdc5 100644\n--- a/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\n+++ b/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\n@@ -15,6 +15,7 @@ Content-Type: application/json\n   }, \n   "@id": "http://localhost:55001/plone/", \n   "@type": "Plone Site", \n+  "description": "", \n   "id": "plone", \n   "is_folderish": true, \n   "items": [\n@@ -28,5 +29,7 @@ Content-Type: application/json\n   ], \n   "items_total": 1, \n   "parent": {}, \n+  "tiles": {}, \n+  "tiles_layout": {}, \n   "title": "Plone site"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/principals.resp b/src/plone/restapi/tests/http-examples/principals.resp\nindex 6ca70dbb..ed94e761 100644\n--- a/src/plone/restapi/tests/http-examples/principals.resp\n+++ b/src/plone/restapi/tests/http-examples/principals.resp\n@@ -9,6 +9,9 @@ Content-Type: application/json\n       "email": "ploneteam@plone.org", \n       "groupname": "ploneteam", \n       "id": "ploneteam", \n+      "roles": [\n+        "Authenticated"\n+      ], \n       "title": "Plone Team"\n     }\n   ], \ndiff --git a/src/plone/restapi/tests/http-examples/registry_get_list.resp b/src/plone/restapi/tests/http-examples/registry_get_list.resp\nindex 2bfcb866..43fcc7c9 100644\n--- a/src/plone/restapi/tests/http-examples/registry_get_list.resp\n+++ b/src/plone/restapi/tests/http-examples/registry_get_list.resp\n@@ -6,7 +6,7 @@ Content-Type: application/json\n   "batching": {\n     "@id": "http://localhost:55001/plone/@registry", \n     "first": "http://localhost:55001/plone/@registry?b_start=0", \n-    "last": "http://localhost:55001/plone/@registry?b_start=1525", \n+    "last": "http://localhost:55001/plone/@registry?b_start=1675", \n     "next": "http://localhost:55001/plone/@registry?b_start=25"\n   }, \n   "items": [\n@@ -417,5 +417,5 @@ Content-Type: application/json\n       "value": false\n     }\n   ], \n-  "items_total": 1547\n+  "items_total": 1683\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/search_fullobjects.req b/src/plone/restapi/tests/http-examples/search_fullobjects.req\nnew file mode 100644\nindex 00000000..3596b2de\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/search_fullobjects.req\n@@ -0,0 +1,3 @@\n+GET /plone/@search?fullobjects=1&SearchableText=lorem HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/search_fullobjects.resp b/src/plone/restapi/tests/http-examples/search_fullobjects.resp\nnew file mode 100644\nindex 00000000..aff87ad6\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/search_fullobjects.resp\n@@ -0,0 +1,59 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@search?fullobjects=1&SearchableText=lorem", \n+  "items": [\n+    {\n+      "@components": {\n+        "actions": {\n+          "@id": "http://localhost:55001/plone/doc1/@actions"\n+        }, \n+        "breadcrumbs": {\n+          "@id": "http://localhost:55001/plone/doc1/@breadcrumbs"\n+        }, \n+        "navigation": {\n+          "@id": "http://localhost:55001/plone/doc1/@navigation"\n+        }, \n+        "workflow": {\n+          "@id": "http://localhost:55001/plone/doc1/@workflow"\n+        }\n+      }, \n+      "@id": "http://localhost:55001/plone/doc1", \n+      "@type": "Document", \n+      "UID": "SomeUUID000000000000000000000002", \n+      "allow_discussion": false, \n+      "changeNote": "", \n+      "contributors": [], \n+      "created": "2016-10-21T19:00:00+00:00", \n+      "creators": [\n+        "test_user_1_"\n+      ], \n+      "description": "", \n+      "effective": null, \n+      "exclude_from_nav": false, \n+      "expires": null, \n+      "id": "doc1", \n+      "is_folderish": false, \n+      "language": "", \n+      "layout": "document_view", \n+      "modified": "2016-10-21T19:00:00+00:00", \n+      "parent": {\n+        "@id": "http://localhost:55001/plone", \n+        "@type": "Plone Site", \n+        "description": "", \n+        "title": "Plone site"\n+      }, \n+      "relatedItems": [], \n+      "review_state": "private", \n+      "rights": "", \n+      "subjects": [], \n+      "table_of_contents": null, \n+      "text": null, \n+      "title": "Lorem Ipsum", \n+      "version": "current", \n+      "versioning_enabled": true\n+    }\n+  ], \n+  "items_total": 1\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/search_metadata_fields.req b/src/plone/restapi/tests/http-examples/search_metadata_fields.req\nnew file mode 100644\nindex 00000000..591f5c19\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/search_metadata_fields.req\n@@ -0,0 +1,3 @@\n+GET /plone/@search?metadata_fields=modified&metadata_fields=created&SearchableText=lorem HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/search_metadata_fields.resp b/src/plone/restapi/tests/http-examples/search_metadata_fields.resp\nnew file mode 100644\nindex 00000000..5d72f0c2\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/search_metadata_fields.resp\n@@ -0,0 +1,18 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@search?metadata_fields=modified&metadata_fields=created&SearchableText=lorem", \n+  "items": [\n+    {\n+      "@id": "http://localhost:55001/plone/doc1", \n+      "@type": "Document", \n+      "created": "2016-10-21T19:00:00+00:00", \n+      "description": "", \n+      "modified": "2016-10-21T19:00:00+00:00", \n+      "review_state": "private", \n+      "title": "Lorem Ipsum"\n+    }\n+  ], \n+  "items_total": 1\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/search_multiple_paths.req b/src/plone/restapi/tests/http-examples/search_multiple_paths.req\nnew file mode 100644\nindex 00000000..0067c1de\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/search_multiple_paths.req\n@@ -0,0 +1,3 @@\n+GET /plone/@search?path.query=%2Fplone%2Ffolder1&path.query=%2Fplone%2Ffolder2&sort_on=path&path.depth=2 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/search_multiple_paths.resp b/src/plone/restapi/tests/http-examples/search_multiple_paths.resp\nnew file mode 100644\nindex 00000000..1aacaf15\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/search_multiple_paths.resp\n@@ -0,0 +1,37 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@search?path.query=%2Fplone%2Ffolder1&path.query=%2Fplone%2Ffolder2&path.depth=2", \n+  "items": [\n+    {\n+      "@id": "http://localhost:55001/plone/folder1", \n+      "@type": "Folder", \n+      "description": "", \n+      "review_state": "private", \n+      "title": "Folder 1"\n+    }, \n+    {\n+      "@id": "http://localhost:55001/plone/folder1/doc1", \n+      "@type": "Document", \n+      "description": "", \n+      "review_state": "private", \n+      "title": "Lorem Ipsum"\n+    }, \n+    {\n+      "@id": "http://localhost:55001/plone/folder2", \n+      "@type": "Folder", \n+      "description": "", \n+      "review_state": "private", \n+      "title": "Folder 2"\n+    }, \n+    {\n+      "@id": "http://localhost:55001/plone/folder2/doc2", \n+      "@type": "Document", \n+      "description": "", \n+      "review_state": "private", \n+      "title": "Lorem Ipsum"\n+    }\n+  ], \n+  "items_total": 4\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/search_options.req b/src/plone/restapi/tests/http-examples/search_options.req\nnew file mode 100644\nindex 00000000..53e86241\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/search_options.req\n@@ -0,0 +1,3 @@\n+GET /plone/@search?path.query=%2Fplone%2Ffolder1&sort_on=path&path.depth=1 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/search_options.resp b/src/plone/restapi/tests/http-examples/search_options.resp\nnew file mode 100644\nindex 00000000..70aab34a\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/search_options.resp\n@@ -0,0 +1,16 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@search?path.query=%2Fplone%2Ffolder1&path.depth=1", \n+  "items": [\n+    {\n+      "@id": "http://localhost:55001/plone/folder1/folder2", \n+      "@type": "Folder", \n+      "description": "", \n+      "review_state": "private", \n+      "title": "Folder 2"\n+    }\n+  ], \n+  "items_total": 1\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/siteroot.resp b/src/plone/restapi/tests/http-examples/siteroot.resp\nindex 0b2f0231..66922a5e 100644\n--- a/src/plone/restapi/tests/http-examples/siteroot.resp\n+++ b/src/plone/restapi/tests/http-examples/siteroot.resp\n@@ -15,6 +15,7 @@ Content-Type: application/json\n   }, \n   "@id": "http://localhost:55001/plone", \n   "@type": "Plone Site", \n+  "description": "", \n   "id": "plone", \n   "is_folderish": true, \n   "items": [\n@@ -28,5 +29,7 @@ Content-Type: application/json\n   ], \n   "items_total": 1, \n   "parent": {}, \n+  "tiles": {}, \n+  "tiles_layout": {}, \n   "title": "Plone site"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users.resp b/src/plone/restapi/tests/http-examples/users.resp\nindex 3b07d7f5..e69cb939 100644\n--- a/src/plone/restapi/tests/http-examples/users.resp\n+++ b/src/plone/restapi/tests/http-examples/users.resp\n@@ -10,6 +10,7 @@ Content-Type: application/json\n     "home_page": "http://www.example.com", \n     "id": "admin", \n     "location": "Berlin", \n+    "portrait": null, \n     "roles": [\n       "Manager"\n     ], \n@@ -23,6 +24,7 @@ Content-Type: application/json\n     "home_page": "http://www.example.com", \n     "id": "test_user_1_", \n     "location": "Bonn", \n+    "portrait": null, \n     "roles": [\n       "Manager"\n     ], \ndiff --git a/src/plone/restapi/tests/http-examples/users_add.resp b/src/plone/restapi/tests/http-examples/users_add.resp\nindex 4e0df867..b6aa43b9 100644\n--- a/src/plone/restapi/tests/http-examples/users_add.resp\n+++ b/src/plone/restapi/tests/http-examples/users_add.resp\n@@ -1,6 +1,6 @@\n HTTP/1.1 201 Created\n-Content-Type: application/json\n Location: http://localhost:55001/plone/@users/noamchomsky\n+Content-Type: application/json\n \n {\n   "@id": "http://localhost:55001/plone/@users/noamchomsky", \n@@ -10,6 +10,7 @@ Location: http://localhost:55001/plone/@users/noamchomsky\n   "home_page": "web.mit.edu/chomsky", \n   "id": "noamchomsky", \n   "location": "Cambridge, MA", \n+  "portrait": null, \n   "roles": [\n     "Member"\n   ], \ndiff --git a/src/plone/restapi/tests/http-examples/users_authorized_get.resp b/src/plone/restapi/tests/http-examples/users_authorized_get.resp\nindex 314b3450..80a85227 100644\n--- a/src/plone/restapi/tests/http-examples/users_authorized_get.resp\n+++ b/src/plone/restapi/tests/http-examples/users_authorized_get.resp\n@@ -9,6 +9,7 @@ Content-Type: application/json\n   "home_page": "web.mit.edu/chomsky", \n   "id": "noam", \n   "location": "Cambridge, MA", \n+  "portrait": null, \n   "roles": [\n     "Member"\n   ], \ndiff --git a/src/plone/restapi/tests/http-examples/users_created.resp b/src/plone/restapi/tests/http-examples/users_created.resp\nindex 21e40ee5..beaeff44 100644\n--- a/src/plone/restapi/tests/http-examples/users_created.resp\n+++ b/src/plone/restapi/tests/http-examples/users_created.resp\n@@ -10,6 +10,7 @@ Location: http://localhost:55001/plone/@users/noamchomsky\n   "home_page": "web.mit.edu/chomsky", \n   "id": "noamchomsky", \n   "location": "Cambridge, MA", \n+  "portrait": null, \n   "roles": [\n     "Contributor"\n   ], \ndiff --git a/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp b/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\nindex c1bd7027..54591ca6 100644\n--- a/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n+++ b/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n@@ -10,6 +10,7 @@ Content-Type: application/json\n     "home_page": "web.mit.edu/chomsky", \n     "id": "noam", \n     "location": "Cambridge, MA", \n+    "portrait": null, \n     "roles": [\n       "Member"\n     ], \ndiff --git a/src/plone/restapi/tests/http-examples/users_get.resp b/src/plone/restapi/tests/http-examples/users_get.resp\nindex 314b3450..80a85227 100644\n--- a/src/plone/restapi/tests/http-examples/users_get.resp\n+++ b/src/plone/restapi/tests/http-examples/users_get.resp\n@@ -9,6 +9,7 @@ Content-Type: application/json\n   "home_page": "web.mit.edu/chomsky", \n   "id": "noam", \n   "location": "Cambridge, MA", \n+  "portrait": null, \n   "roles": [\n     "Member"\n   ], \ndiff --git a/src/plone/restapi/tests/mixin_ordering.py b/src/plone/restapi/tests/mixin_ordering.py\nindex 180cc0e8..e96de6ff 100644\n--- a/src/plone/restapi/tests/mixin_ordering.py\n+++ b/src/plone/restapi/tests/mixin_ordering.py\n@@ -10,7 +10,7 @@ class OrderingMixin():\n     def test_reorder(self):\n         # We run all this in one test, because of dependend ordering.\n         # initial situation\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', \'doc9\', ],  # noqa\n             self.folder.contentIds()\n         )\n@@ -19,7 +19,7 @@ def test_reorder(self):\n         # Move to top\n         data = {\'ordering\': {\'delta\': \'top\', \'obj_id\': \'doc9\'}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc9\', \'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', ],  # noqa\n             self.folder.contentIds()\n         )\n@@ -27,7 +27,7 @@ def test_reorder(self):\n         # Move to bottom\n         data = {\'ordering\': {\'delta\': \'bottom\', \'obj_id\': \'doc9\'}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', \'doc9\', ],  # noqa\n             self.folder.contentIds()\n         )\n@@ -35,7 +35,7 @@ def test_reorder(self):\n         # Delta up\n         data = {\'ordering\': {\'delta\': -2, \'obj_id\': \'doc5\'}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc5\', \'doc3\', \'doc4\', \'doc6\', \'doc7\', \'doc8\', \'doc9\', ],  # noqa\n             self.folder.contentIds()\n         )\n@@ -43,7 +43,7 @@ def test_reorder(self):\n         # Delta down\n         data = {\'ordering\': {\'delta\': 2, \'obj_id\': \'doc6\'}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc5\', \'doc3\', \'doc4\', \'doc7\', \'doc8\', \'doc6\', \'doc9\', ],  # noqa\n             self.folder.contentIds()\n         )\n@@ -52,7 +52,7 @@ def test_reorder(self):\n         # Move to top\n         data = {\'ordering\': {\'delta\': \'top\', \'obj_id\': \'doc8\', \'subset_ids\': [\'doc2\', \'doc3\', \'doc8\']}}  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc8\', \'doc5\', \'doc2\', \'doc4\', \'doc7\', \'doc3\', \'doc6\', \'doc9\'],  # noqa\n             self.folder.contentIds()\n         )\n@@ -60,7 +60,7 @@ def test_reorder(self):\n         # Move to bottom\n         data = {\'ordering\': {\'delta\': \'bottom\', \'obj_id\': \'doc8\', \'subset_ids\': [\'doc8\', \'doc2\', \'doc3\']}}  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc5\', \'doc3\', \'doc4\', \'doc7\', \'doc8\', \'doc6\', \'doc9\'],  # noqa\n             self.folder.contentIds()\n         )\n@@ -68,7 +68,7 @@ def test_reorder(self):\n         # Delta up\n         data = {\'ordering\': {\'delta\': -1, \'obj_id\': \'doc8\', \'subset_ids\': [\'doc2\', \'doc3\', \'doc8\']}}  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc5\', \'doc8\', \'doc4\', \'doc7\', \'doc3\', \'doc6\', \'doc9\'],  # noqa\n             self.folder.contentIds()\n         )\n@@ -76,14 +76,14 @@ def test_reorder(self):\n         # Delta down\n         data = {\'ordering\': {\'delta\': 1, \'obj_id\': \'doc2\', \'subset_ids\': [\'doc2\', \'doc8\', \'doc3\']}}  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc8\', \'doc5\', \'doc2\', \'doc4\', \'doc7\', \'doc3\', \'doc6\', \'doc9\'],  # noqa\n             self.folder.contentIds()\n         )\n \n     def test_reorder_subsetids(self):\n         # sanity check, initial situation\n-        self.assertEquals(\n+        self.assertEqual(\n             [\'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', \'doc9\'],  # noqa\n             self.folder.contentIds()\n         )\n@@ -93,7 +93,7 @@ def test_reorder_subsetids(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=json.dumps(data), context=self.folder)\n \n-        self.assertEquals(\n+        self.assertEqual(\n             u\'Client/server ordering mismatch\',\n-            cm.exception.message\n+            str(cm.exception)\n         )\ndiff --git a/src/plone/restapi/tests/performance.py b/src/plone/restapi/tests/performance.py\nindex 53ad641a..c3e4b85b 100644\n--- a/src/plone/restapi/tests/performance.py\n+++ b/src/plone/restapi/tests/performance.py\n@@ -7,6 +7,7 @@\n \n import os\n import pytz\n+from six.moves import range\n \n LOREMIPSUM_HTML_10_PARAGRAPHS = \'\'\'<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.</p><p>Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.</p><p>Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis.</p><p>At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, At accusam aliquyam diam diam dolore dolores duo eirmod eos erat, et nonumy sed tempor et et invidunt justo labore Stet clita ea et gubergren, kasd magna no rebum. sanctus sea sed takimata ut vero voluptua. est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat.</p><p>Consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus.</p><p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.</p><p>Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.\'\'\'  # noqa\n \ndiff --git a/src/plone/restapi/tests/test_atcollection.py b/src/plone/restapi/tests/test_atcollection.py\nindex 2b55b4b5..00563641 100644\n--- a/src/plone/restapi/tests/test_atcollection.py\n+++ b/src/plone/restapi/tests/test_atcollection.py\n@@ -3,6 +3,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n from plone.restapi.interfaces import ISerializeToJson\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from zope.component import getMultiAdapter\n \n@@ -14,6 +15,8 @@ class TestATContentSerializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\ndiff --git a/src/plone/restapi/tests/test_atcontent_deserializer.py b/src/plone/restapi/tests/test_atcontent_deserializer.py\nindex 56e74894..92ae9b45 100644\n--- a/src/plone/restapi/tests/test_atcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_deserializer.py\n@@ -1,11 +1,8 @@\n # -*- coding: utf-8 -*-\n-from Products.Archetypes.interfaces import IBaseObject\n-from Products.Archetypes.interfaces import IObjectEditedEvent\n-from Products.Archetypes.interfaces import IObjectInitializedEvent\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n-from plone.restapi.deserializer.atcontent import ValidationRequest\n from plone.restapi.interfaces import IDeserializeFromJson\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.tests.mixin_ordering import OrderingMixin\n from zExceptions import BadRequest\n@@ -14,11 +11,17 @@\n from zope.component import provideSubscriptionAdapter\n from zope.component import adapter\n from zope.interface import implementer\n-from Products.Archetypes.interfaces import IObjectPostValidation\n-from Products.Archetypes.interfaces import IObjectPreValidation\n-\n \n import unittest\n+from six.moves import range\n+\n+if HAS_AT:\n+    from plone.restapi.deserializer.atcontent import ValidationRequest\n+    from Products.Archetypes.interfaces import IBaseObject\n+    from Products.Archetypes.interfaces import IObjectEditedEvent\n+    from Products.Archetypes.interfaces import IObjectInitializedEvent\n+    from Products.Archetypes.interfaces import IObjectPostValidation\n+    from Products.Archetypes.interfaces import IObjectPreValidation\n \n \n class TestATContentDeserializer(unittest.TestCase, OrderingMixin):\n@@ -26,6 +29,8 @@ class TestATContentDeserializer(unittest.TestCase, OrderingMixin):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n@@ -56,18 +61,18 @@ def deserialize(self, body=\'{}\', validate_all=False, create=False,\n     def test_deserializer_ignores_readonly_fields(self):\n         self.doc1.getField(\'testReadonlyField\').set(self.doc1, \'Readonly\')\n         self.deserialize(body=\'{"testReadonlyField": "Changed"}\')\n-        self.assertEquals(\'Readonly\', self.doc1.getTestReadonlyField())\n+        self.assertEqual(\'Readonly\', self.doc1.getTestReadonlyField())\n \n     def test_deserializer_updates_field_value(self):\n         self.deserialize(body=\'{"testStringField": "Updated"}\')\n-        self.assertEquals(\'Updated\', self.doc1.getTestStringField())\n+        self.assertEqual(\'Updated\', self.doc1.getTestStringField())\n \n     def test_deserializer_validates_content(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"testURLField": "Not an URL"}\')\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Validation failed(isURL): \'Not an URL\' is not a valid url.",\n-            cm.exception.message[0][\'message\'])\n+            cm.exception.args[0][0][\'message\'])\n \n     def test_deserializer_clears_creation_flag(self):\n         self.doc1.markCreationFlag()\n@@ -97,13 +102,15 @@ def test_deserializer_raises_if_required_value_is_missing(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"testStringField": "My Value"}\',\n                              validate_all=True)\n-        self.assertEquals(u\'TestRequiredField is required, please correct.\',\n-                          cm.exception.message[0][\'message\'])\n+        self.assertEqual(\n+            u\'TestRequiredField is required, please correct.\',\n+            cm.exception.args[0][0][\'message\']\n+        )\n \n     def test_deserializer_succeeds_if_required_value_is_provided(self):\n         self.deserialize(body=\'{"testRequiredField": "My Value"}\',\n                          validate_all=True)\n-        self.assertEquals(u\'My Value\', self.portal.doc1.getTestRequiredField())\n+        self.assertEqual(u\'My Value\', self.portal.doc1.getTestRequiredField())\n \n     def test_post_validation(self):\n \n@@ -123,8 +130,8 @@ def __call__(self, request):\n             self.deserialize(body=\'{"testRequiredField": "My Value"}\',\n                              validate_all=True)\n \n-        self.assertEquals(\n-            \'post_validation_error\', cm.exception.message[0][\'message\'])\n+        self.assertEqual(\n+            \'post_validation_error\', cm.exception.args[0][0][\'message\'])\n \n     def test_pre_validation(self):\n \n@@ -144,14 +151,14 @@ def __call__(self, request):\n             self.deserialize(body=\'{"testRequiredField": "My Value"}\',\n                              validate_all=True)\n \n-        self.assertEquals(\n-            \'pre_validation_error\', cm.exception.message[0][\'message\'])\n+        self.assertEqual(\n+            \'pre_validation_error\', cm.exception.args[0][0][\'message\'])\n \n     def test_set_layout(self):\n         current_layout = self.doc1.getLayout()\n-        self.assertNotEquals(current_layout, "my_new_layout")\n+        self.assertNotEqual(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n-        self.assertEquals(\'my_new_layout\', self.doc1.getLayout())\n+        self.assertEqual(\'my_new_layout\', self.doc1.getLayout())\n \n \n class TestValidationRequest(unittest.TestCase):\n@@ -159,6 +166,8 @@ class TestValidationRequest(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n         self.doc1 = self.portal[self.portal.invokeFactory(\n@@ -166,16 +175,16 @@ def setUp(self):\n         self.request = ValidationRequest(self.layer[\'request\'], self.doc1)\n \n     def test_value_from_validation_request_using_key_access(self):\n-        self.assertEquals(\'Test Document\', self.request[\'title\'])\n+        self.assertEqual(\'Test Document\', self.request[\'title\'])\n \n     def test_value_from_validation_request_using_get(self):\n-        self.assertEquals(\'Test Document\', self.request.get(\'title\'))\n+        self.assertEqual(\'Test Document\', self.request.get(\'title\'))\n \n     def test_value_from_validation_request_form_using_key_access(self):\n-        self.assertEquals(\'Test Document\', self.request.form[\'title\'])\n+        self.assertEqual(\'Test Document\', self.request.form[\'title\'])\n \n     def test_value_from_validation_request_form_using_get(self):\n-        self.assertEquals(\'Test Document\', self.request.form.get(\'title\'))\n+        self.assertEqual(\'Test Document\', self.request.form.get(\'title\'))\n \n     def test_validation_request_contains_key(self):\n         self.assertIn(\'title\', self.request)\n@@ -188,21 +197,21 @@ def test_validation_request_key_access_raises_keyerror(self):\n             self.request[\'foo\']\n \n     def test_validation_request_get_returns_default_value(self):\n-        self.assertEquals(None, self.request.get(\'foo\'))\n+        self.assertEqual(None, self.request.get(\'foo\'))\n         marker = object()\n-        self.assertEquals(marker, self.request.get(\'foo\', marker))\n+        self.assertEqual(marker, self.request.get(\'foo\', marker))\n \n     def test_validation_request_form_key_access_raises_keyerror(self):\n         with self.assertRaises(KeyError):\n             self.request.form[\'foo\']\n \n     def test_validation_request_form_get_returns_default_value(self):\n-        self.assertEquals(None, self.request.form.get(\'foo\'))\n+        self.assertEqual(None, self.request.form.get(\'foo\'))\n         marker = object()\n-        self.assertEquals(marker, self.request.form.get(\'foo\', marker))\n+        self.assertEqual(marker, self.request.form.get(\'foo\', marker))\n \n     def test_value_from_real_request_using_key_access(self):\n-        self.assertEquals(\'GET\', self.request[\'REQUEST_METHOD\'])\n+        self.assertEqual(\'GET\', self.request[\'REQUEST_METHOD\'])\n \n     def test_value_form_real_request_using_get(self):\n-        self.assertEquals(\'GET\', self.request.get(\'REQUEST_METHOD\'))\n+        self.assertEqual(\'GET\', self.request.get(\'REQUEST_METHOD\'))\ndiff --git a/src/plone/restapi/tests/test_atcontent_serializer.py b/src/plone/restapi/tests/test_atcontent_serializer.py\nindex e3791311..86f9958f 100644\n--- a/src/plone/restapi/tests/test_atcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_serializer.py\n@@ -4,6 +4,7 @@\n from plone.app.testing import setRoles\n from plone.restapi.interfaces import IExpandableElement\n from plone.restapi.interfaces import ISerializeToJson\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.tests.test_expansion import ExpandableElementFoo\n from zope.component import getGlobalSiteManager\n@@ -21,6 +22,8 @@ class TestATContentSerializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n@@ -154,7 +157,7 @@ def test_get_layout(self):\n         current_layout = self.doc1.getLayout()\n         obj = self.serialize(self.doc1)\n         self.assertIn(\'layout\', obj)\n-        self.assertEquals(current_layout, obj[\'layout\'])\n+        self.assertEqual(current_layout, obj[\'layout\'])\n \n     def test_serializer_includes_expansion(self):\n         provideAdapter(\n@@ -179,4 +182,4 @@ def test_get_is_folderish_in_folder(self):\n                                      ISerializeToJson)\n         obj = serializer()\n         self.assertIn(\'is_folderish\', obj)\n-        self.assertEquals(True, obj[\'is_folderish\'])\n+        self.assertEqual(True, obj[\'is_folderish\'])\ndiff --git a/src/plone/restapi/tests/test_atfield_deserializer.py b/src/plone/restapi/tests/test_atfield_deserializer.py\nindex e3bb0cbd..0d9d384f 100644\n--- a/src/plone/restapi/tests/test_atfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_atfield_deserializer.py\n@@ -2,10 +2,12 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n from plone.restapi.interfaces import IFieldDeserializer\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from zope.component import getMultiAdapter\n \n import unittest\n+import six\n \n \n class TestATFieldDeserializer(unittest.TestCase):\n@@ -13,6 +15,8 @@ class TestATFieldDeserializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n@@ -28,55 +32,60 @@ def deserialize(self, fieldname, value):\n \n     def test_string_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testStringField\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'K\xc3\xa4fer\', value)\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'K\xc3\xa4fer\', value)\n \n     def test_boolean_field_deserialization_returns_true(self):\n         value, kwargs = self.deserialize(\'testBooleanField\', True)\n         self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n-        self.assertEquals(True, value)\n+        self.assertEqual(True, value)\n \n     def test_boolean_field_deserialization_returns_false(self):\n         value, kwargs = self.deserialize(\'testBooleanField\', False)\n         self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n-        self.assertEquals(False, value)\n+        self.assertEqual(False, value)\n \n     def test_integer_field_deserialization_returns_integer_value(self):\n         value, kwargs = self.deserialize(\'testIntegerField\', 777)\n         self.assertTrue(isinstance(value, int), \'Not an <int>\')\n-        self.assertEquals(777, value)\n+        self.assertEqual(777, value)\n \n     def test_float_field_deserialization_returns_float_value(self):\n         value, kwargs = self.deserialize(\'testFloatField\', 1.5)\n         self.assertTrue(isinstance(value, float), \'Not a <float>\')\n-        self.assertEquals(1.5, value)\n+        self.assertEqual(1.5, value)\n \n     def test_fixedpoint_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testFixedPointField\', u\'1.1\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'1.1\', value)\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'1.1\', value)\n \n     def test_datetime_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testDateTimeField\',\n                                          u\'2015-12-20T19:51:06.375Z\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'2015-12-20T19:51:06.375Z\', value)\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'2015-12-20T19:51:06.375Z\', value)\n \n     def test_lines_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testLinesField\', u\'line1\\nline2\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(\'line1\\nline2\', value)\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(\'line1\\nline2\', value)\n \n     def test_lines_field_deserialization_returns_list(self):\n         value, kwargs = self.deserialize(\'testLinesField\',\n                                          [u\'line1\', u\'line2\'])\n         self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertEquals([u\'line1\', u\'line2\'], value)\n+        self.assertEqual([u\'line1\', u\'line2\'], value)\n \n     def test_file_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testFileField\', u\'Spam and eggs!\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'Spam and eggs!\', value)\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'Spam and eggs!\', value)\n \n     def test_file_field_deserialization_returns_decoded_value(self):\n         value, kwargs = self.deserialize(\'testFileField\', {\n@@ -84,7 +93,7 @@ def test_file_field_deserialization_returns_decoded_value(self):\n             u\'encoding\': u\'base64\',\n         })\n         self.assertTrue(isinstance(value, str), \'Not a <str>\')\n-        self.assertEquals(\'Spam and eggs!\', value)\n+        self.assertEqual(\'Spam and eggs!\', value)\n \n     def test_file_field_deserialization_returns_mimetype_and_filename(self):\n         value, kwargs = self.deserialize(\'testFileField\', {\n@@ -92,24 +101,27 @@ def test_file_field_deserialization_returns_mimetype_and_filename(self):\n             u\'filename\': \'doc.txt\',\n             u\'content-type\': \'text/plain\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'Spam and eggs!\', value)\n-        self.assertEquals(\'text/plain\', kwargs[u\'mimetype\'])\n-        self.assertEquals(\'doc.txt\', kwargs[u\'filename\'])\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'Spam and eggs!\', value)\n+        self.assertEqual(\'text/plain\', kwargs[u\'mimetype\'])\n+        self.assertEqual(\'doc.txt\', kwargs[u\'filename\'])\n \n     def test_text_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testTextField\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'K\xc3\xa4fer\', value)\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'K\xc3\xa4fer\', value)\n \n     def test_text_field_deserialization_returns_mimetype(self):\n         value, kwargs = self.deserialize(\'testTextField\', {\n             u\'data\': u\'K\xc3\xa4fer\',\n             u\'content-type\': \'text/html\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'K\xc3\xa4fer\', value)\n-        self.assertEquals(\'text/html\', kwargs[u\'mimetype\'])\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'K\xc3\xa4fer\', value)\n+        self.assertEqual(\'text/html\', kwargs[u\'mimetype\'])\n \n     def test_image_field_deserialization_returns_mimetype_and_filename(self):\n         value, kwargs = self.deserialize(\'testImageField\', {\n@@ -118,15 +130,17 @@ def test_image_field_deserialization_returns_mimetype_and_filename(self):\n             u\'filename\': \'image.gif\',\n             u\'content-type\': \'image/gif\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertTrue(value.startswith(\'GIF89a\'))\n-        self.assertEquals(\'image/gif\', kwargs[u\'mimetype\'])\n-        self.assertEquals(\'image.gif\', kwargs[u\'filename\'])\n+        self.assertEqual(\'image/gif\', kwargs[u\'mimetype\'])\n+        self.assertEqual(\'image.gif\', kwargs[u\'filename\'])\n \n     def test_blob_field_deserialization_returns_string(self):\n         value, kwargs = self.deserialize(\'testBlobField\', u\'Spam and eggs!\')\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'Spam and eggs!\', value)\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'Spam and eggs!\', value)\n \n     def test_blob_field_deserialization_returns_mimetype_and_filename(self):\n         value, kwargs = self.deserialize(\'testBlobField\', {\n@@ -134,10 +148,11 @@ def test_blob_field_deserialization_returns_mimetype_and_filename(self):\n             u\'filename\': \'doc.txt\',\n             u\'content-type\': \'text/plain\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'Spam and eggs!\', value)\n-        self.assertEquals(\'text/plain\', kwargs[u\'mimetype\'])\n-        self.assertEquals(\'doc.txt\', kwargs[u\'filename\'])\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'Spam and eggs!\', value)\n+        self.assertEqual(\'text/plain\', kwargs[u\'mimetype\'])\n+        self.assertEqual(\'doc.txt\', kwargs[u\'filename\'])\n \n     def test_blobfile_field_deserialization_returns_mimetype_and_filename(\n             self):\n@@ -146,10 +161,11 @@ def test_blobfile_field_deserialization_returns_mimetype_and_filename(\n             u\'filename\': \'doc.txt\',\n             u\'content-type\': \'text/plain\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n-        self.assertEquals(u\'Spam and eggs!\', value)\n-        self.assertEquals(\'text/plain\', kwargs[u\'mimetype\'])\n-        self.assertEquals(\'doc.txt\', kwargs[u\'filename\'])\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n+        self.assertEqual(u\'Spam and eggs!\', value)\n+        self.assertEqual(\'text/plain\', kwargs[u\'mimetype\'])\n+        self.assertEqual(\'doc.txt\', kwargs[u\'filename\'])\n \n     def test_blobimage_field_deserialization_returns_mimetype_and_filename(\n             self):\n@@ -159,10 +175,11 @@ def test_blobimage_field_deserialization_returns_mimetype_and_filename(\n             u\'filename\': \'image.gif\',\n             u\'content-type\': \'image/gif\',\n         })\n-        self.assertTrue(isinstance(value, basestring), \'Not a <basestring>\')\n+        self.assertTrue(\n+            isinstance(value, six.string_types), \'Not a <basestring>\')\n         self.assertTrue(value.startswith(\'GIF89a\'))\n-        self.assertEquals(\'image/gif\', kwargs[u\'mimetype\'])\n-        self.assertEquals(\'image.gif\', kwargs[u\'filename\'])\n+        self.assertEqual(\'image/gif\', kwargs[u\'mimetype\'])\n+        self.assertEqual(\'image.gif\', kwargs[u\'filename\'])\n \n     def test_query_field_deserialization_requests_list(self):\n         query_data = [\n@@ -185,7 +202,7 @@ def test_reference_field_deserialization_returns_uid_in_list(self):\n         value, kwargs = self.deserialize(\'testReferenceField\',\n                                          u\'0fc0dac495034b869b3b90c9179499a9\')\n         self.assertTrue(isinstance(value, list), \'Not a <basestring>\')\n-        self.assertEquals([u\'0fc0dac495034b869b3b90c9179499a9\'], value)\n+        self.assertEqual([u\'0fc0dac495034b869b3b90c9179499a9\'], value)\n \n     def test_reference_field_deserialization_returns_uids(self):\n         value, kwargs = self.deserialize(\'testReferenceField\', [\n@@ -200,8 +217,8 @@ def test_reference_field_deserialization_returns_object_in_list(self):\n         doc2 = self.portal[self.portal.invokeFactory(\n             \'ATTestDocument\', id=\'doc2\', title=\'Referenced Document\')]\n         value, kwargs = self.deserialize(\'testReferenceField\',\n-                                         unicode(doc2.absolute_url()))\n-        self.assertEquals(doc2, value[0])\n+                                         six.text_type(doc2.absolute_url()))\n+        self.assertEqual(doc2, value[0])\n \n     def test_reference_field_deserialization_returns_objects(self):\n         doc2 = self.portal[self.portal.invokeFactory(\n@@ -210,6 +227,7 @@ def test_reference_field_deserialization_returns_objects(self):\n             \'ATTestDocument\', id=\'doc3\', title=\'Referenced Document\')]\n         value, kwargs = self.deserialize(\n             \'testReferenceField\',\n-            [unicode(doc2.absolute_url()), unicode(doc3.absolute_url())])\n-        self.assertEquals(doc2, value[0])\n-        self.assertEquals(doc3, value[1])\n+            [six.text_type(\n+                doc2.absolute_url()), six.text_type(doc3.absolute_url())])\n+        self.assertEqual(doc2, value[0])\n+        self.assertEqual(doc3, value[1])\ndiff --git a/src/plone/restapi/tests/test_atfield_serializer.py b/src/plone/restapi/tests/test_atfield_serializer.py\nindex da1b23ad..736001bb 100644\n--- a/src/plone/restapi/tests/test_atfield_serializer.py\n+++ b/src/plone/restapi/tests/test_atfield_serializer.py\n@@ -4,6 +4,7 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.restapi.interfaces import IFieldSerializer\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.testing import PLONE_VERSION\n from plone.scale import storage\n@@ -11,6 +12,7 @@\n \n import os\n import unittest\n+import six\n \n if PLONE_VERSION.base_version >= \'5.1\':\n     GIF_SCALE_FORMAT = \'png\'\n@@ -23,6 +25,8 @@ class TestATFieldSerializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n@@ -40,7 +44,7 @@ def serialize(self, fieldname, value, **kwargs):\n \n     def test_string_field_serialization_returns_unicode(self):\n         value = self.serialize(\'testStringField\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'K\xc3\xa4fer\', value)\n \n     def test_boolean_field_serialization_returns_true(self):\n@@ -65,13 +69,13 @@ def test_float_field_serialization_returns_float(self):\n \n     def test_fixedpoint_field_serialization_returns_unicode(self):\n         value = self.serialize(\'testFixedPointField\', u\'1.11\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'1.11\', value)\n \n     def test_datetime_field_serialization_returns_unicode(self):\n         value = self.serialize(\'testDateTimeField\',\n                                DateTime(\'2016-01-21T01:14:48+00:00\'))\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'2016-01-21T01:14:48+00:00\', value)\n \n     def test_lines_field_serialization_returns_list(self):\n@@ -101,7 +105,8 @@ def test_text_field_serialization_returns_dict(self):\n \n     def test_image_field_serialization_returns_dict(self):\n         image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        image_data = open(image_file, \'rb\').read()\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         fn = \'testImageField\'\n         with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n             value = self.serialize(\n@@ -180,7 +185,8 @@ def test_blobfile_field_serialization_returns_dict(self):\n \n     def test_blobimage_field_serialization_returns_dict(self):\n         image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        image_data = open(image_file, \'rb\').read()\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         fn = \'testBlobImageField\'\n         with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n             value = self.serialize(\n@@ -251,7 +257,7 @@ def test_reference_field_serialization_returns_unicode(self):\n         doc2 = self.portal[self.portal.invokeFactory(\n             \'ATTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n         value = self.serialize(\'testReferenceField\', doc2.UID())\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'http://nohost/plone/doc2\', value)\n \n     def test_reference_field_serialization_returns_list(self):\ndiff --git a/src/plone/restapi/tests/test_batching.py b/src/plone/restapi/tests/test_batching.py\nindex e3f11654..7852d5d8 100644\n--- a/src/plone/restapi/tests/test_batching.py\n+++ b/src/plone/restapi/tests/test_batching.py\n@@ -5,6 +5,7 @@\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n from plone.dexterity.utils import createContentInContainer\n+from plone.restapi import HAS_AT\n from plone.restapi.batching import DEFAULT_BATCH_SIZE\n from plone.restapi.batching import HypermediaBatch\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n@@ -12,11 +13,12 @@\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from plone.restapi.testing import RelativeSession\n from plone.restapi.tests.helpers import result_paths\n-from urlparse import parse_qsl\n-from urlparse import urlparse\n+from six.moves.urllib.parse import parse_qsl\n+from six.moves.urllib.parse import urlparse\n \n import transaction\n import unittest\n+from six.moves import range\n \n \n class TestBatchingDXBase(unittest.TestCase):\n@@ -33,6 +35,9 @@ def setUp(self):\n         self.api_session.headers.update({\'Accept\': \'application/json\'})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def _create_doc(self, container, number):\n         createContentInContainer(\n             container, u\'DXTestDocument\',\n@@ -104,7 +109,7 @@ def test_contains_correct_batch_of_items(self):\n         response = self.api_session.get(\'/folder/@search?b_start=2&b_size=2\')\n \n         # Response should contain second batch of items\n-        self.assertEquals([\n+        self.assertEqual([\n             u\'/plone/folder/doc-2\',\n             u\'/plone/folder/doc-3\'],\n             result_paths(response.json()))\n@@ -171,7 +176,7 @@ def test_contains_correct_batch_of_items(self):\n         response = self.api_session.get(\'/collection?b_start=2&b_size=2\')\n \n         # Response should contain second batch of items\n-        self.assertEquals([\n+        self.assertEqual([\n             u\'/plone/folder/doc-2\',\n             u\'/plone/folder/doc-3\'],\n             result_paths(response.json()))\n@@ -185,7 +190,7 @@ def test_total_item_count_is_correct(self):\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n         response = self.api_session.get(\'/collection?b_size=100\')\n-        self.assertNotIn(\'batching\', response.json().keys())\n+        self.assertNotIn(\'batching\', list(response.json()))\n \n \n class TestBatchingDXFolders(TestBatchingDXBase):\n@@ -233,7 +238,7 @@ def test_contains_correct_batch_of_items(self):\n         response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n \n         # Response should contain second batch of items\n-        self.assertEquals([\n+        self.assertEqual([\n             u\'/plone/folder/doc-3\',\n             u\'/plone/folder/doc-4\'],\n             result_paths(response.json()))\n@@ -247,7 +252,7 @@ def test_total_item_count_is_correct(self):\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n         response = self.api_session.get(\'/folder?b_size=100\')\n-        self.assertNotIn(\'batching\', response.json().keys())\n+        self.assertNotIn(\'batching\', list(response.json()))\n \n \n class TestBatchingSiteRoot(TestBatchingDXBase):\n@@ -291,7 +296,7 @@ def test_contains_correct_batch_of_items(self):\n         response = self.api_session.get(\'/?b_start=2&b_size=2\')\n \n         # Response should contain second batch of items\n-        self.assertEquals([\n+        self.assertEqual([\n             u\'/plone/doc-3\',\n             u\'/plone/doc-4\'],\n             result_paths(response.json()))\n@@ -305,7 +310,60 @@ def test_total_item_count_is_correct(self):\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n         response = self.api_session.get(\'/folder?b_size=100\')\n-        self.assertNotIn(\'batching\', response.json().keys())\n+        self.assertNotIn(\'batching\', list(response.json()))\n+\n+\n+class TestAABatchingArchetypes(unittest.TestCase):\n+    """This is a dummy test to work around a nasty test-isolation issue.\n+\n+    It does the same requests as TestBatchingArchetypes (see below).\n+    When run with the robot-tests in plone.app.widgets (without isolation)\n+    they return rendered templates since \'mark_as_api_request\' is not hit.\n+\n+    Doing the exact same calls here before actually running the tests\n+    fixes the issue. Don\'t ask why, I do not know.\n+\n+    See https://github.com/plone/Products.CMFPlone/issues/2592 for details.\n+    """\n+\n+    layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n+        self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n+\n+        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Contributor\'])\n+        self.api_session = RelativeSession(self.portal_url)\n+        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+        self.portal[self.portal.invokeFactory(\n+            \'Folder\',\n+            id=\'folder\',\n+            title=\'Some Folder\',\n+        )]\n+        transaction.commit()\n+\n+    def test_contains_canonical_url(self):\n+        # Fetch the second page of the batch\n+        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+\n+    def test_contains_batching_links(self):\n+        # Fetch the second page of the batch\n+        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+\n+    def test_contains_correct_batch_of_items(self):\n+        # Fetch the second page of the batch\n+        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+\n+    def test_total_item_count_is_correct(self):\n+        # Fetch the second page of the batch\n+        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+\n+    def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n+        self.api_session.get(\'/folder?b_size=100\')\n \n \n class TestBatchingArchetypes(unittest.TestCase):\n@@ -313,6 +371,8 @@ class TestBatchingArchetypes(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n         self.portal_url = self.portal.absolute_url()\n@@ -371,7 +431,7 @@ def test_contains_correct_batch_of_items(self):\n         response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n \n         # Response should contain second batch of items\n-        self.assertEquals([\n+        self.assertEqual([\n             u\'/plone/folder/doc-3\',\n             u\'/plone/folder/doc-4\'],\n             result_paths(response.json()))\n@@ -385,7 +445,7 @@ def test_total_item_count_is_correct(self):\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n         response = self.api_session.get(\'/folder?b_size=100\')\n-        self.assertNotIn(\'batching\', response.json().keys())\n+        self.assertNotIn(\'batching\', list(response.json()))\n \n \n class TestHypermediaBatch(unittest.TestCase):\n@@ -397,7 +457,7 @@ def setUp(self):\n         self.request = self.portal.REQUEST\n \n     def test_items_total(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n         # items_total should be total number of items in the sequence\n@@ -405,12 +465,12 @@ def test_items_total(self):\n             25, batch.items_total)\n \n     def test_default_batch_size(self):\n-        items = range(1, 27)\n+        items = list(range(1, 27))\n         batch = HypermediaBatch(self.request, items)\n         self.assertEqual(DEFAULT_BATCH_SIZE, len(list(batch)))\n \n     def test_custom_batch_size(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 5\n         batch = HypermediaBatch(self.request, items)\n         # Batch size should be customizable via request\n@@ -418,39 +478,39 @@ def test_custom_batch_size(self):\n             5, len(list(batch)))\n \n     def test_default_batch_start(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n         # Batch should start on first item by default\n         self.assertEqual(\n-            range(1, 11), list(batch))\n+            list(range(1, 11)), list(batch))\n \n     def test_custom_batch_start(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 10\n         self.request.form[\'b_start\'] = 5\n         batch = HypermediaBatch(self.request, items)\n         # Batch start should be customizable via request\n         self.assertEqual(\n-            range(6, 16), list(batch))\n+            list(range(6, 16)), list(batch))\n \n     def test_custom_start_and_size_can_be_combined(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 5\n         self.request.form[\'b_start\'] = 5\n         batch = HypermediaBatch(self.request, items)\n         # Should be able to combine custom batch start and size\n         self.assertListEqual(\n-            range(6, 11), list(batch))\n+            list(range(6, 11)), list(batch))\n \n     def test_canonical_url(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n         self.assertEqual(\'http://nohost\', batch.canonical_url)\n \n     def test_canonical_url_preserves_query_string_params(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         self.request[\'QUERY_STRING\'] = \'one=1&two=2\'\n@@ -459,12 +519,12 @@ def test_canonical_url_preserves_query_string_params(self):\n         parsed_url = urlparse(batch.canonical_url)\n         qs_params = dict(parse_qsl(parsed_url.query))\n \n-        self.assertEquals({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n-        self.assertEquals(\'nohost\', parsed_url.netloc)\n-        self.assertEquals(\'\', parsed_url.path)\n+        self.assertEqual({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n+        self.assertEqual(\'nohost\', parsed_url.netloc)\n+        self.assertEqual(\'\', parsed_url.path)\n \n     def test_canonical_url_preserves_list_like_query_string_params(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         self.request[\'QUERY_STRING\'] = \'foolist=1&foolist=2\'\n@@ -473,13 +533,13 @@ def test_canonical_url_preserves_list_like_query_string_params(self):\n         # Argument lists (same query string parameter repeated multiple\n         # times) should be preserved.\n \n-        self.assertEquals(\n+        self.assertEqual(\n             set([(\'foolist\', \'1\'), (\'foolist\', \'2\')]),\n             set(parse_qsl(urlparse(batch.canonical_url).query))\n         )\n \n     def test_canonical_url_strips_batching_params(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         self.request[\'QUERY_STRING\'] = \'one=1&b_size=10&b_start=20&two=2\'\n@@ -488,12 +548,12 @@ def test_canonical_url_strips_batching_params(self):\n         parsed_url = urlparse(batch.canonical_url)\n         qs_params = dict(parse_qsl(parsed_url.query))\n \n-        self.assertEquals({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n-        self.assertEquals(\'nohost\', parsed_url.netloc)\n-        self.assertEquals(\'\', parsed_url.path)\n+        self.assertEqual({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n+        self.assertEqual(\'nohost\', parsed_url.netloc)\n+        self.assertEqual(\'\', parsed_url.path)\n \n     def test_canonical_url_strips_sorting_params(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request[\'QUERY_STRING\'] = \'one=1&sort_on=path&two=2\'\n         batch = HypermediaBatch(self.request, items)\n@@ -501,12 +561,12 @@ def test_canonical_url_strips_sorting_params(self):\n         parsed_url = urlparse(batch.canonical_url)\n         qs_params = dict(parse_qsl(parsed_url.query))\n \n-        self.assertEquals({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n-        self.assertEquals(\'nohost\', parsed_url.netloc)\n-        self.assertEquals(\'\', parsed_url.path)\n+        self.assertEqual({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n+        self.assertEqual(\'nohost\', parsed_url.netloc)\n+        self.assertEqual(\'\', parsed_url.path)\n \n     def test_current_batch_url(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         self.request[\'ACTUAL_URL\'] = \'http://nohost\'\n@@ -516,14 +576,14 @@ def test_current_batch_url(self):\n             \'http://nohost?b_size=10&b_start=20\', batch.current_batch_url)\n \n     def test_batching_links_omitted_if_resultset_fits_in_single_batch(self):\n-        items = range(1, 5)\n+        items = list(range(1, 5))\n \n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n         self.assertEqual(None, batch.links)\n \n     def test_first_link_contained(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n@@ -531,7 +591,7 @@ def test_first_link_contained(self):\n             {\'first\': \'http://nohost?b_start=0\'}, batch.links)\n \n     def test_first_link_preserves_list_like_querystring_params(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         self.request[\'QUERY_STRING\'] = \'foolist=1&foolist=2\'\n@@ -541,13 +601,13 @@ def test_first_link_preserves_list_like_querystring_params(self):\n         # times) should be preserved.\n \n         batch_params = set([(\'b_start\', \'0\'), (\'b_size\', \'10\')])\n-        self.assertEquals(\n+        self.assertEqual(\n             set([(\'foolist\', \'1\'), (\'foolist\', \'2\')]),\n             set(parse_qsl(urlparse(batch.links[\'first\']).query)) - batch_params\n         )\n \n     def test_last_link_contained(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n@@ -555,7 +615,7 @@ def test_last_link_contained(self):\n             {\'last\': \'http://nohost?b_start=20\'}, batch.links)\n \n     def test_next_link_contained_if_necessary(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n@@ -563,7 +623,7 @@ def test_next_link_contained_if_necessary(self):\n             {\'next\': \'http://nohost?b_start=10\'}, batch.links)\n \n     def test_next_link_omitted_on_last_page(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         # Start on last page\n         self.request.form[\'b_size\'] = 10\n@@ -571,10 +631,10 @@ def test_next_link_omitted_on_last_page(self):\n         batch = HypermediaBatch(self.request, items)\n         self.assertSetEqual(\n             set([\'@id\', \'first\', \'prev\', \'last\']),\n-            set(batch.links.keys()))\n+            set(batch.links))\n \n     def test_prev_link_contained_if_necessary(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         # Start on third page\n         self.request.form[\'b_size\'] = 10\n@@ -584,16 +644,16 @@ def test_prev_link_contained_if_necessary(self):\n             {\'prev\': \'http://nohost?b_start=10\'}, batch.links)\n \n     def test_prev_link_omitted_on_first_page(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         self.request.form[\'b_size\'] = 10\n         batch = HypermediaBatch(self.request, items)\n         self.assertSetEqual(\n             set([\'@id\', \'first\', \'next\', \'last\']),\n-            set(batch.links.keys()))\n+            set(batch.links))\n \n     def test_no_gaps_or_duplicates_between_pages(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n         items_from_all_batches = []\n \n         size = 10\n@@ -607,11 +667,11 @@ def test_no_gaps_or_duplicates_between_pages(self):\n         self.assertEqual(items, items_from_all_batches)\n \n     def test_batch_start_never_drops_below_zero(self):\n-        items = range(1, 26)\n+        items = list(range(1, 26))\n \n         # Start in the middle of what would otherwise be the first batch\n         self.request.form[\'b_size\'] = 10\n         self.request.form[\'b_start\'] = 5\n         batch = HypermediaBatch(self.request, items)\n-        self.assertEquals(\n+        self.assertEqual(\n             \'http://nohost?b_start=0\', batch.links[\'prev\'])\ndiff --git a/src/plone/restapi/tests/test_comments.py b/src/plone/restapi/tests/test_comments.py\nindex 44b12633..69e7e44c 100644\n--- a/src/plone/restapi/tests/test_comments.py\n+++ b/src/plone/restapi/tests/test_comments.py\n@@ -57,7 +57,7 @@ def test_conversation(self):\n \n         output = serializer()\n         self.assertEqual(\n-            set(output.keys()),\n+            set(output),\n             set([\'@id\', \'items_total\', \'items\'])\n         )\n \n@@ -95,11 +95,11 @@ def test_comment(self):\n             \'is_deletable\'\n         ]\n         self.assertEqual(\n-            set(output.keys()),\n+            set(output),\n             set(expected)\n         )\n \n         self.assertEqual(\n-            set(output[\'text\'].keys()),\n+            set(output[\'text\']),\n             set([\'data\', \'mime-type\'])\n         )\ndiff --git a/src/plone/restapi/tests/test_content_delete.py b/src/plone/restapi/tests/test_content_delete.py\nindex 6dc5c4f2..e7d39a92 100644\n--- a/src/plone/restapi/tests/test_content_delete.py\n+++ b/src/plone/restapi/tests/test_content_delete.py\n@@ -10,6 +10,7 @@\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.testing import login\n from plone.app.testing import setRoles\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from zope.event import notify\n@@ -65,6 +66,8 @@ class TestATContentDelete(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.doc1 = self.portal[self.portal.invokeFactory(\n@@ -79,8 +82,9 @@ def traverse(self, path=\'/plone\', accept=\'application/json\', method=\'GET\'):\n         request.environ[\'PATH_TRANSLATED\'] = path\n         request.environ[\'HTTP_ACCEPT\'] = accept\n         request.environ[\'REQUEST_METHOD\'] = method\n+        auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         request._auth = \'Basic %s\' % b64encode(\n-            \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD))\n+            auth.encode(\'utf8\')).decode(\'utf8\')\n         notify(PubStart(request))\n         return request.traverse(path)\n \ndiff --git a/src/plone/restapi/tests/test_content_get.py b/src/plone/restapi/tests/test_content_get.py\nindex 21daeaf1..0a21824e 100644\n--- a/src/plone/restapi/tests/test_content_get.py\n+++ b/src/plone/restapi/tests/test_content_get.py\n@@ -73,13 +73,13 @@ def test_get_content_returns_fullobjects(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(3, len(response.json()[\'items\']))\n         self.assertTrue(\n-            \'title\' in response.json()[\'items\'][0].keys()\n+            \'title\' in list(response.json()[\'items\'][0])\n         )\n         self.assertTrue(\n-            \'description\' in response.json()[\'items\'][0].keys()\n+            \'description\' in list(response.json()[\'items\'][0])\n         )\n         self.assertTrue(\n-            \'text\' in response.json()[\'items\'][0].keys()\n+            \'text\' in list(response.json()[\'items\'][0])\n         )\n         self.assertEqual(\n             {\ndiff --git a/src/plone/restapi/tests/test_content_local_roles.py b/src/plone/restapi/tests/test_content_local_roles.py\nindex f0fd0914..e0cd27b6 100644\n--- a/src/plone/restapi/tests/test_content_local_roles.py\n+++ b/src/plone/restapi/tests/test_content_local_roles.py\n@@ -16,6 +16,15 @@\n import unittest\n \n \n+def sorted_roles(roles):\n+    results = []\n+    for line in roles:\n+        line = list(line)\n+        line[1] = sorted(line[1])\n+        results.append(line)\n+    return results\n+\n+\n class TestFolderCreate(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n@@ -237,10 +246,9 @@ def test_set_local_roles_for_user(self):\n \n         self.assertEqual(response.status_code, 204)\n         self.assertEqual(\n-            pas.getLocalRolesForDisplay(self.portal.folder1),\n-            ((\'admin\', (\'Owner\',), \'user\', \'admin\'),\n-             (\'test-user\', (u\'Reviewer\', u\'Reader\'),\n-              \'user\', u\'test_user_1_\'))\n+            sorted_roles(pas.getLocalRolesForDisplay(self.portal.folder1)),\n+            [[\'admin\', [\'Owner\', ], \'user\', \'admin\'],\n+             [\'test-user\', [u\'Reader\', u\'Reviewer\'], \'user\', u\'test_user_1_\']]\n         )\n \n     def test_unset_local_roles_for_user(self):\n@@ -251,9 +259,9 @@ def test_unset_local_roles_for_user(self):\n \n         pas = getToolByName(self.portal, \'acl_users\')\n         self.assertEqual(\n-            pas.getLocalRolesForDisplay(self.portal.folder1),\n-            ((\'admin\', (\'Owner\',), \'user\', \'admin\'),\n-             (\'test-user\', (\'Reviewer\', \'Reader\'), \'user\', \'test_user_1_\'))\n+            sorted_roles(pas.getLocalRolesForDisplay(self.portal.folder1)),\n+            [[\'admin\', [\'Owner\', ], \'user\', \'admin\'],\n+             [\'test-user\', [\'Reader\', \'Reviewer\'], \'user\', \'test_user_1_\']]\n         )\n \n         response = requests.post(\n@@ -402,7 +410,7 @@ def test_no_serializer_available_returns_501(self):\n         self.assertEqual(response.status_code, 501)\n         response = response.json()\n         self.assertIn(\'error\', response)\n-        self.assertEquals(\n+        self.assertEqual(\n             u\'No serializer available.\',\n             response[\'error\'][\'message\']\n         )\ndiff --git a/src/plone/restapi/tests/test_content_patch.py b/src/plone/restapi/tests/test_content_patch.py\nindex 39aecd66..ae29fd2d 100644\n--- a/src/plone/restapi/tests/test_content_patch.py\n+++ b/src/plone/restapi/tests/test_content_patch.py\n@@ -7,6 +7,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n+from plone.restapi import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from Products.CMFCore.PortalContent import PortalContent\n@@ -207,6 +208,8 @@ class TestATContentPatch(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\ndiff --git a/src/plone/restapi/tests/test_content_post.py b/src/plone/restapi/tests/test_content_post.py\nindex f5572bce..13ab90d6 100644\n--- a/src/plone/restapi/tests/test_content_post.py\n+++ b/src/plone/restapi/tests/test_content_post.py\n@@ -7,6 +7,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n+from plone.restapi import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from Products.CMFCore.utils import getToolByName\n@@ -92,7 +93,7 @@ def test_post_without_type_returns_400(self):\n             },\n         )\n         self.assertEqual(400, response.status_code)\n-        self.assertIn("Property \'@type\' is required", response.content)\n+        self.assertIn("Property \'@type\' is required", response.text)\n \n     def test_post_without_id_creates_id_from_title(self):\n         response = requests.post(\n@@ -215,6 +216,8 @@ class TestATFolderCreate(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\ndiff --git a/src/plone/restapi/tests/test_content_utils.py b/src/plone/restapi/tests/test_content_utils.py\nindex 898294b9..773b5d1d 100644\n--- a/src/plone/restapi/tests/test_content_utils.py\n+++ b/src/plone/restapi/tests/test_content_utils.py\n@@ -2,6 +2,7 @@\n from Acquisition import aq_parent\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.restapi import HAS_AT\n from plone.restapi.services.content.utils import add\n from plone.restapi.services.content.utils import create\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n@@ -63,6 +64,8 @@ class TestATCreateContent(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n@@ -150,6 +153,8 @@ class TestATAddContent(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\ndiff --git a/src/plone/restapi/tests/test_copymove.py b/src/plone/restapi/tests/test_copymove.py\nindex 79fcecdd..6cc45052 100644\n--- a/src/plone/restapi/tests/test_copymove.py\n+++ b/src/plone/restapi/tests/test_copymove.py\n@@ -34,8 +34,9 @@ def traverse(self, path=\'/plone\', accept=\'application/json\', method=\'GET\'):\n         request.environ[\'PATH_TRANSLATED\'] = path\n         request.environ[\'HTTP_ACCEPT\'] = accept\n         request.environ[\'REQUEST_METHOD\'] = method\n+        auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         request._auth = \'Basic %s\' % b64encode(\n-            \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD))\n+            auth.encode(\'utf8\')).decode(\'utf8\')\n         notify(PubStart(request))\n         return request.traverse(path)\n \n@@ -86,6 +87,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_copy_single_object(self):\n         response = self.api_session.post(\n             \'/@copy\',\n@@ -95,7 +99,7 @@ def test_copy_single_object(self):\n         )\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 200)\n+        self.assertEqual(response.status_code, 200)\n         self.assertIn(\'copy_of_doc1\', self.portal.objectIds())\n \n     def test_move_single_object(self):\n@@ -107,7 +111,7 @@ def test_move_single_object(self):\n         )\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 200)\n+        self.assertEqual(response.status_code, 200)\n         self.assertIn(\'doc1\', self.folder1.objectIds())\n         self.assertNotIn(\'doc1\', self.portal.objectIds())\n \n@@ -118,7 +122,7 @@ def test_move_multiple_objects(self):\n                 "source": [self.doc1.absolute_url(), self.doc2.absolute_url()]\n             }\n         )\n-        self.assertEquals(response.status_code, 200)\n+        self.assertEqual(response.status_code, 200)\n         transaction.commit()\n \n         self.assertIn(\'doc1\', self.folder1.objectIds())\n@@ -128,7 +132,7 @@ def test_move_multiple_objects(self):\n \n     def test_copy_without_source_raises_400(self):\n         response = self.api_session.post(\'/folder1/@copy\')\n-        self.assertEquals(response.status_code, 400)\n+        self.assertEqual(response.status_code, 400)\n \n     def test_copy_not_existing_object(self):\n         response = self.api_session.post(\n@@ -138,7 +142,7 @@ def test_copy_not_existing_object(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 200)\n+        self.assertEqual(response.status_code, 200)\n         self.assertEqual([], response.json())\n \n     def test_copy_multiple_objects(self):\n@@ -150,7 +154,7 @@ def test_copy_multiple_objects(self):\n         )\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 200)\n+        self.assertEqual(response.status_code, 200)\n         self.assertIn(\'copy_of_doc1\', self.portal.objectIds())\n         self.assertIn(\'copy_of_doc2\', self.portal.objectIds())\n \n@@ -163,7 +167,7 @@ def test_copy_single_object_no_permissions_raises_403(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 403)\n+        self.assertEqual(response.status_code, 403)\n \n     def test_copy_single_object_no_auth_raises_401(self):\n         self.api_session.auth = (\'nonexistent\', \'secret\')\n@@ -174,7 +178,7 @@ def test_copy_single_object_no_auth_raises_401(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 401)\n+        self.assertEqual(response.status_code, 401)\n \n     def test_move_single_object_no_permissions_raises_403(self):\n         self.api_session.auth = (\'memberuser\', \'secret\')\n@@ -185,7 +189,7 @@ def test_move_single_object_no_permissions_raises_403(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 403)\n+        self.assertEqual(response.status_code, 403)\n \n     def test_move_single_object_no_auth_raises_401(self):\n         self.api_session.auth = (\'nonexistent\', \'secret\')\n@@ -196,7 +200,7 @@ def test_move_single_object_no_auth_raises_401(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 401)\n+        self.assertEqual(response.status_code, 401)\n \n     def test_move_single_object_no_permission_delete_source_raises_403(self):\n         api.user.grant_roles(\n@@ -212,4 +216,4 @@ def test_move_single_object_no_permission_delete_source_raises_403(self):\n             }\n         )\n \n-        self.assertEquals(response.status_code, 403)\n+        self.assertEqual(response.status_code, 403)\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 14c33207..a075ad11 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -38,10 +38,12 @@\n \n import collections\n import json\n-import re\n import os\n+import re\n+import six\n import transaction\n import unittest\n+from six.moves import range\n \n if PAM_INSTALLED:\n     from plone.app.multilingual.interfaces import ITranslationManager\n@@ -75,9 +77,9 @@\n \n base_path = resource_filename(\'plone.restapi.tests\', \'http-examples\')\n \n-UPLOAD_DATA = \'abcdefgh\'\n-UPLOAD_MIMETYPE = \'text/plain\'\n-UPLOAD_FILENAME = \'test.txt\'\n+UPLOAD_DATA = b\'abcdefgh\'\n+UPLOAD_MIMETYPE = b\'text/plain\'\n+UPLOAD_FILENAME = b\'test.txt\'\n UPLOAD_LENGTH = len(UPLOAD_DATA)\n \n UPLOAD_PDF_MIMETYPE = \'application/pdf\'\n@@ -98,7 +100,12 @@ def pretty_json(data):\n \n \n def save_request_and_response_for_docs(name, response):\n-    with open(\'{}/{}\'.format(base_path, \'%s.req\' % name), \'w\') as req:\n+    if six.PY2:\n+        open_kw = {}\n+    else:\n+        open_kw = {\'newline\': \'\\n\'}\n+    filename = \'{}/{}\'.format(base_path, \'%s.req\' % name)\n+    with open(filename, \'w\', **open_kw) as req:\n         req.write(\'{} {} HTTP/1.1\\n\'.format(\n             response.request.method,\n             response.request.path_url\n@@ -125,9 +132,16 @@ def save_request_and_response_for_docs(name, response):\n                 # ever decide to dump that header\n                 response.request.prepare_body(data=body, files=None)\n \n-            req.write(response.request.body)\n+            req.flush()\n+            if (isinstance(response.request.body, six.text_type)\n+                    or not hasattr(req, \'buffer\')):\n+                req.write(response.request.body)\n+            else:\n+                req.buffer.seek(0, 2)\n+                req.buffer.write(response.request.body)\n \n-    with open(\'{}/{}\'.format(base_path, \'%s.resp\' % name), \'w\') as resp:\n+    filename = \'{}/{}\'.format(base_path, \'%s.resp\' % name)\n+    with open(filename, \'w\', **open_kw) as resp:\n         status = response.status_code\n         reason = response.reason\n         resp.write(\'HTTP/1.1 {} {}\\n\'.format(status, reason))\n@@ -135,7 +149,7 @@ def save_request_and_response_for_docs(name, response):\n             if key.lower() in RESPONSE_HEADER_KEYS:\n                 resp.write(\'{}: {}\\n\'.format(key.title(), value))\n         resp.write(\'\\n\')\n-        resp.write(response.content)\n+        resp.write(response.text)\n \n \n class TestDocumentation(unittest.TestCase):\n@@ -212,8 +226,10 @@ def create_folder(self):\n         return folder\n \n     def tearDown(self):\n+        self.api_session.close()\n         self.time_freezer.stop()\n         popGlobalRegistry(getSite())\n+        self.api_session.close()\n \n     def test_documentation_content_crud(self):\n         folder = self.create_folder()\n@@ -271,8 +287,10 @@ def test_documentation_news_item(self):\n             \'text/html\'\n         )\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         self.portal.newsitem.image = NamedBlobImage(\n-            data=open(image_file, \'r\').read(),\n+            data=image_data,\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\n@@ -281,7 +299,6 @@ def test_documentation_news_item(self):\n             \'2016-01-21T02:14:48+00:00\')\n         self.portal.newsitem.modification_date = DateTime(\n             \'2016-01-21T02:24:11+00:00\')\n-        import transaction\n         transaction.commit()\n \n         with patch.object(storage, \'uuid4\', return_value=\'uuid1\'):\n@@ -299,7 +316,6 @@ def test_documentation_event(self):\n         self.portal.event.creation_date = DateTime(\'2016-01-21T03:14:48+00:00\')\n         self.portal.event.modification_date = DateTime(\n             \'2016-01-21T03:24:11+00:00\')\n-        import transaction\n         transaction.commit()\n         response = self.api_session.get(self.portal.event.absolute_url())\n         save_request_and_response_for_docs(\'event\', response)\n@@ -312,7 +328,6 @@ def test_documentation_link(self):\n         self.portal.link.creation_date = DateTime(\'2016-01-21T04:14:48+00:00\')\n         self.portal.link.modification_date = DateTime(\n             \'2016-01-21T04:24:11+00:00\')\n-        import transaction\n         transaction.commit()\n         response = self.api_session.get(self.portal.link.absolute_url())\n         save_request_and_response_for_docs(\'link\', response)\n@@ -324,15 +339,16 @@ def test_documentation_file(self):\n         pdf_file = os.path.join(\n             os.path.dirname(__file__), u\'file.pdf\'\n         )\n+        with open(pdf_file, \'rb\') as f:\n+            pdf_data = f.read()\n         self.portal.file.file = NamedBlobFile(\n-            data=open(pdf_file, \'r\').read(),\n+            data=pdf_data,\n             contentType=\'application/pdf\',\n             filename=u\'file.pdf\'\n         )\n         self.portal.file.creation_date = DateTime(\'2016-01-21T05:14:48+00:00\')\n         self.portal.file.modification_date = DateTime(\n             \'2016-01-21T05:24:11+00:00\')\n-        import transaction\n         transaction.commit()\n         response = self.api_session.get(self.portal.file.absolute_url())\n         save_request_and_response_for_docs(\'file\', response)\n@@ -342,15 +358,16 @@ def test_documentation_image(self):\n         self.portal.image.title = \'My Image\'\n         self.portal.image.description = u\'This is an image\'\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         self.portal.image.image = NamedBlobImage(\n-            data=open(image_file, \'r\').read(),\n+            data=image_data,\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\n         self.portal.image.creation_date = DateTime(\'2016-01-21T06:14:48+00:00\')\n         self.portal.image.modification_date = DateTime(\n             \'2016-01-21T06:24:11+00:00\')\n-        import transaction\n         transaction.commit()\n         with patch.object(storage, \'uuid4\', return_value=\'uuid1\'):\n             response = self.api_session.get(self.portal.image.absolute_url())\n@@ -358,7 +375,6 @@ def test_documentation_image(self):\n \n     def test_documentation_folder(self):\n         folder = self.create_folder()\n-        import transaction\n         transaction.commit()\n         response = self.api_session.get(folder.absolute_url())\n         save_request_and_response_for_docs(\'folder\', response)\n@@ -387,7 +403,6 @@ def test_documentation_collection(self):\n             \'2016-01-21T08:14:48+00:00\')\n         self.portal.collection.modification_date = DateTime(\n             \'2016-01-21T08:24:11+00:00\')\n-        import transaction\n         transaction.commit()\n         response = self.api_session.get(self.portal.collection.absolute_url())\n         save_request_and_response_for_docs(\'collection\', response)\n@@ -405,6 +420,76 @@ def test_documentation_search(self):\n         response = self.api_session.get(\'/@search\', params=query)\n         save_request_and_response_for_docs(\'search\', response)\n \n+    def test_documentation_search_options(self):\n+        self.portal.invokeFactory(\n+            \'Folder\',\n+            id=\'folder1\',\n+            title=\'Folder 1\'\n+        )\n+        self.portal.folder1.invokeFactory(\n+            \'Folder\',\n+            id=\'folder2\',\n+            title=\'Folder 2\'\n+        )\n+        transaction.commit()\n+        query = {\'sort_on\': \'path\',\n+                 \'path.query\': \'/plone/folder1\',\n+                 \'path.depth\': \'1\'}\n+        response = self.api_session.get(\'/@search\', params=query)\n+        save_request_and_response_for_docs(\'search_options\', response)\n+\n+    def test_documentation_search_multiple_paths(self):\n+        self.portal.invokeFactory(\n+            \'Folder\',\n+            id=\'folder1\',\n+            title=\'Folder 1\'\n+        )\n+        self.portal.folder1.invokeFactory(\n+            \'Document\',\n+            id=\'doc1\',\n+            title=\'Lorem Ipsum\'\n+        )\n+        self.portal.invokeFactory(\n+            \'Folder\',\n+            id=\'folder2\',\n+            title=\'Folder 2\'\n+        )\n+        self.portal.folder2.invokeFactory(\n+            \'Document\',\n+            id=\'doc2\',\n+            title=\'Lorem Ipsum\'\n+        )\n+        transaction.commit()\n+        query = {\'sort_on\': \'path\',\n+                 \'path.query\': [\'/plone/folder1\', \'/plone/folder2\'],\n+                 \'path.depth\': \'2\'}\n+        response = self.api_session.get(\'/@search\', params=query)\n+        save_request_and_response_for_docs(\'search_multiple_paths\', response)\n+\n+    def test_documentation_search_metadata_fields(self):\n+        self.portal.invokeFactory(\n+            \'Document\',\n+            id=\'doc1\',\n+            title=\'Lorem Ipsum\'\n+        )\n+        transaction.commit()\n+        query = {\'SearchableText\': \'lorem\',\n+                 \'metadata_fields\': [\'modified\', \'created\']}\n+        response = self.api_session.get(\'/@search\', params=query)\n+        save_request_and_response_for_docs(\'search_metadata_fields\', response)\n+\n+    def test_documentation_search_fullobjects(self):\n+        self.portal.invokeFactory(\n+            \'Document\',\n+            id=\'doc1\',\n+            title=\'Lorem Ipsum\'\n+        )\n+        transaction.commit()\n+        query = {\'SearchableText\': \'lorem\',\n+                 \'fullobjects\': 1}\n+        response = self.api_session.get(\'/@search\', params=query)\n+        save_request_and_response_for_docs(\'search_fullobjects\', response)\n+\n     def test_documentation_workflow(self):\n         response = self.api_session.get(\n             \'{}/@workflow\'.format(self.document.absolute_url()))\n@@ -457,7 +542,6 @@ def test_documentation_jwt_login(self):\n         self.portal.acl_users.jwt_auth._secret = \'secret\'\n         self.portal.acl_users.jwt_auth.use_keyring = False\n         self.portal.acl_users.jwt_auth.token_timeout = 0\n-        import transaction\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n@@ -470,7 +554,6 @@ def test_documentation_jwt_logged_in(self):\n         self.portal.acl_users.jwt_auth.use_keyring = False\n         self.portal.acl_users.jwt_auth.token_timeout = 0\n         self.portal.acl_users.jwt_auth.store_tokens = True\n-        import transaction\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n@@ -486,7 +569,6 @@ def test_documentation_jwt_login_renew(self):\n         self.portal.acl_users.jwt_auth._secret = \'secret\'\n         self.portal.acl_users.jwt_auth.use_keyring = False\n         self.portal.acl_users.jwt_auth.token_timeout = 0\n-        import transaction\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n@@ -503,7 +585,6 @@ def test_documentation_jwt_logout(self):\n         self.portal.acl_users.jwt_auth.use_keyring = False\n         self.portal.acl_users.jwt_auth.token_timeout = 0\n         self.portal.acl_users.jwt_auth.store_tokens = True\n-        import transaction\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n@@ -566,6 +647,7 @@ def test_documentation_users_as_anonymous(self):\n         response = logged_out_api_session.get(\'@users\')\n         save_request_and_response_for_docs(\'users_anonymous\', response)\n         self.assertEqual(response.status_code, 401)\n+        logged_out_api_session.close()\n \n     def test_documentations_users_as_unauthorized_user(self):\n         properties = {\n@@ -591,6 +673,7 @@ def test_documentations_users_as_unauthorized_user(self):\n         response = standard_api_session.get(\'@users\')\n         save_request_and_response_for_docs(\'users_unauthorized\', response)\n         self.assertEqual(response.status_code, 401)\n+        standard_api_session.close()\n \n     def test_documentation_users_get(self):\n         properties = {\n@@ -631,6 +714,7 @@ def test_documentation_users_anonymous_get(self):\n \n         response = logged_out_api_session.get(\'@users/noam\')\n         save_request_and_response_for_docs(\'users_anonymous_get\', response)\n+        logged_out_api_session.close()\n \n     def test_documentation_users_unauthorized_get(self):\n         properties = {\n@@ -663,6 +747,7 @@ def test_documentation_users_unauthorized_get(self):\n \n         response = logged_out_api_session.get(\'@users/noam\')\n         save_request_and_response_for_docs(\'users_unauthorized_get\', response)\n+        logged_out_api_session.close()\n \n     def test_documentation_users_authorized_get(self):\n         properties = {\n@@ -686,6 +771,7 @@ def test_documentation_users_authorized_get(self):\n         logged_out_api_session.auth = (\'noam\', \'secret\')\n         response = logged_out_api_session.get(\'@users/noam\')\n         save_request_and_response_for_docs(\'users_authorized_get\', response)\n+        logged_out_api_session.close()\n \n     def test_documentation_users_filtered_get(self):\n         properties = {\n@@ -1107,8 +1193,8 @@ def clean_final_url(response, _id=\'document-2016-10-21\'):\n \n         # POST create an upload\n         metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME),\n-            b64encode(UPLOAD_MIMETYPE)\n+            b64encode(UPLOAD_FILENAME).decode(\'utf-8\'),\n+            b64encode(UPLOAD_MIMETYPE).decode(\'utf-8\'),\n         )\n         response = self.api_session.post(\n             \'/folder/@tus-upload\',\n@@ -1162,8 +1248,8 @@ def test_tusreplace_post_patch(self):\n \n         # POST create an upload\n         metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME),\n-            b64encode(UPLOAD_MIMETYPE)\n+            b64encode(UPLOAD_FILENAME).decode(\'utf-8\'),\n+            b64encode(UPLOAD_MIMETYPE).decode(\'utf-8\'),\n         )\n         response = self.api_session.post(\n             \'/myfile/@tus-replace\',\n@@ -1195,8 +1281,8 @@ def test_locking_lock(self):\n         response = self.api_session.post(url)\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n-            r\'"token": "[^"]+"\',\n-            \'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n+            b\'"token": "[^"]+"\',\n+            b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n             response.content)\n         save_request_and_response_for_docs(\'lock\', response)\n \n@@ -1211,8 +1297,8 @@ def test_locking_lock_nonstealable_and_timeout(self):\n         )\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n-            r\'"token": "[^"]+"\',\n-            \'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n+            b\'"token": "[^"]+"\',\n+            b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n             response.content)\n         save_request_and_response_for_docs(\n             \'lock_nonstealable_timeout\', response)\n@@ -1231,8 +1317,8 @@ def test_locking_refresh_lock(self):\n         response = self.api_session.post(url)\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n-            r\'"token": "[^"]+"\',\n-            \'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n+            b\'"token": "[^"]+"\',\n+            b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n             response.content)\n         save_request_and_response_for_docs(\'refresh_lock\', response)\n \n@@ -1309,6 +1395,7 @@ def create_document(self):\n     def tearDown(self):\n         self.time_freezer.stop()\n         popGlobalRegistry(getSite())\n+        self.api_session.close()\n \n     def test_translate_messages_types(self):\n         response = self.api_session.get(\'/@types\')\n@@ -1369,6 +1456,7 @@ def setUp(self):\n \n     def tearDown(self):\n         self.time_freezer.stop()\n+        self.api_session.close()\n \n     def create_document_with_comments(self):\n         self.portal.invokeFactory(\'Document\', id=\'front-page\')\n@@ -1403,13 +1491,14 @@ def create_document_with_comments(self):\n                 comment = createObject(\'plone.Comment\')\n                 comment.text = \'Comment %d.%d\' % (x, y)\n                 comment_replies.addComment(comment)\n-        self.comment_id, self.comment = replies.items()[0]\n+        self.comment_id, self.comment = list(replies.items())[0]\n \n         return document\n \n     @staticmethod\n     def clean_comment_id(response, _id=\'123456\'):\n         pattern = r\'@comments/(\\w+)\'\n+        pattern_bytes = b\'@comments/(\\\\w+)\'\n         repl = \'@comments/\' + _id\n \n         # Replaces the dynamic part in the headers with a stable id\n@@ -1422,12 +1511,12 @@ def clean_comment_id(response, _id=\'123456\'):\n         # and the body\n         if response.request.body:\n             response.request.body = re.sub(\n-                pattern, repl, response.request.body\n+                pattern_bytes, repl, response.request.body\n             )\n \n         # and the response\n         if response.content:\n-            response._content = re.sub(pattern, repl, response._content)\n+            response._content = re.sub(pattern_bytes, repl, response._content)\n \n     def test_comments_get(self):\n         url = \'{}/@comments\'.format(self.document.absolute_url())\n@@ -1545,7 +1634,6 @@ def setUp(self):\n         )\n         self.es_content = self.portal[\'es\'].get(es_id)\n \n-        import transaction\n         transaction.commit()\n         self.browser = Browser(self.app)\n         self.browser.handleErrors = False\n@@ -1556,6 +1644,7 @@ def setUp(self):\n \n     def tearDown(self):\n         self.time_freezer.stop()\n+        self.api_session.close()\n \n     def test_documentation_translations_post(self):\n         response = self.api_session.post(\ndiff --git a/src/plone/restapi/tests/test_dxcontent_deserializer.py b/src/plone/restapi/tests/test_dxcontent_deserializer.py\nindex 8838fae9..b8def61d 100644\n--- a/src/plone/restapi/tests/test_dxcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_deserializer.py\n@@ -15,6 +15,8 @@\n \n import json\n import unittest\n+import six\n+from six.moves import range\n \n \n class TestDXContentDeserializer(unittest.TestCase, OrderingMixin):\n@@ -53,20 +55,20 @@ def deserialize(self, body=\'{}\', validate_all=False, context=None):\n     def test_deserializer_raises_with_invalid_body(self):\n         with self.assertRaises(DeserializationError) as cm:\n             self.deserialize(body=\'Not a JSON object\')\n-        self.assertEquals(\'No JSON object could be decoded\', cm.exception.msg)\n+        self.assertEqual(\'No JSON object could be decoded\', cm.exception.msg)\n \n     def test_deserializer_raises_with_malformed_body(self):\n         with self.assertRaises(DeserializationError) as cm:\n             self.deserialize(body=\'[1,2,3]\')\n-        self.assertEquals(\'Malformed body\', cm.exception.msg)\n+        self.assertEqual(\'Malformed body\', cm.exception.msg)\n \n     def test_deserializer_updates_field_value(self):\n         self.deserialize(body=\'{"test_textline_field": "My Item"}\')\n-        self.assertEquals(u\'My Item\', self.portal.doc1.test_textline_field)\n+        self.assertEqual(u\'My Item\', self.portal.doc1.test_textline_field)\n \n     def test_deserializer_ignores_readonly_fields(self):\n         self.deserialize(body=\'{"test_readonly_field": "Foo"}\')\n-        self.assertEquals(u\'readonly\', self.portal.doc1.test_readonly_field)\n+        self.assertEqual(u\'readonly\', self.portal.doc1.test_readonly_field)\n \n     def test_deserializer_notifies_object_modified(self):\n         def handler(obj, event):\n@@ -81,8 +83,8 @@ def handler(obj, event):\n             self.event = event\n         provideHandler(handler, (IDexterityItem, IObjectModifiedEvent,))\n         self.deserialize(body=\'{"test_textline_field": "My Item"}\')\n-        self.assertEquals(1, len(self.event.descriptions))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.event.descriptions))\n+        self.assertEqual(\n             (\'IDXTestDocumentSchema.test_textline_field\',),\n             self.event.descriptions[0].attributes)\n \n@@ -91,31 +93,37 @@ def test_deserializer_does_not_update_field_without_write_permission(self):\n         setRoles(self.portal,\n                  TEST_USER_ID, [\'Member\', \'Contributor\', \'Editor\'])\n         self.deserialize(body=\'{"test_write_permission_field": "Foo"}\')\n-        self.assertEquals(u\'Test Write Permission\',\n-                          self.portal.doc1.test_write_permission_field)\n+        self.assertEqual(\n+            u\'Test Write Permission\',\n+            self.portal.doc1.test_write_permission_field\n+        )\n \n     def test_deserializer_updates_field_with_write_permission(self):\n         self.portal.doc1.test_write_permission_field = u\'Test Write Permission\'\n         setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Manager\'])\n         self.deserialize(body=\'{"test_write_permission_field": "Foo"}\')\n-        self.assertEquals(u\'Foo\',\n-                          self.portal.doc1.test_write_permission_field)\n+        self.assertEqual(\n+            u\'Foo\',\n+            self.portal.doc1.test_write_permission_field\n+        )\n \n     def test_deserializer_validates_invariant(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"test_invariant_field1": "Foo",\'\n                                   \' "test_invariant_field2": "Bar"}\')\n-        self.assertEquals(u\'Must have same values\',\n-                          cm.exception.message[0][\'message\'])\n+        self.assertEqual(\n+            u\'Must have same values\',\n+            str(cm.exception.args[0][0][\'message\'])\n+        )\n \n     def test_deserializer_updates_behavior_field_value(self):\n         self.deserialize(body=\'{"test_behavior_field": "My Value"}\')\n-        self.assertEquals(u\'My Value\', self.portal.doc1.test_behavior_field)\n+        self.assertEqual(u\'My Value\', self.portal.doc1.test_behavior_field)\n \n     def test_deserializer_updates_behavior_field_value_in_annotations(self):\n         self.deserialize(\n             body=\'{"test_annotations_behavior_field": "My Value"}\')\n-        self.assertEquals(\n+        self.assertEqual(\n             u\'My Value\',\n             ITestAnnotationsBehavior(self.portal.doc1)\n             .test_annotations_behavior_field)\n@@ -125,20 +133,24 @@ def test_deserializer_raises_if_required_value_is_missing(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"test_textline_field": "My Value"}\',\n                              validate_all=True)\n-        self.assertEquals(u\'Required input is missing.\',\n-                          cm.exception.message[0][\'message\'])\n+        self.assertEqual(\n+            u\'Required input is missing.\',\n+            cm.exception.args[0][0][\'message\']\n+        )\n \n         # An empty string should be considered a missing value\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"test_textline_field": ""}\',\n                              validate_all=True)\n-        self.assertEquals(u\'Required input is missing.\',\n-                          cm.exception.message[0][\'message\'])\n+        self.assertEqual(\n+            u\'Required input is missing.\',\n+            cm.exception.args[0][0][\'message\']\n+        )\n \n     def test_deserializer_succeeds_if_required_value_is_provided(self):\n         self.deserialize(body=\'{"test_required_field": "My Value"}\',\n                          validate_all=True)\n-        self.assertEquals(u\'My Value\', self.portal.doc1.test_required_field)\n+        self.assertEqual(u\'My Value\', self.portal.doc1.test_required_field)\n \n     def test_deserializer_does_not_store_default_value(self):\n         # XXX: Dexterity has an odd behavior with default values.\n@@ -157,15 +169,21 @@ def test_deserializer_does_not_store_default_value(self):\n     def test_deserializer_passes_validation_with_not_provided_defaults(self):\n         self.deserialize(body=\'{"test_required_field": "My Value"}\',\n                          validate_all=True)\n-        self.assertEquals(u\'Default\',\n-                          self.portal.doc1.test_default_value_field)\n-        self.assertEquals(u\'DefaultFactory\',\n-                          self.portal.doc1.test_default_factory_field)\n+        self.assertEqual(\n+            u\'Default\',\n+            self.portal.doc1.test_default_value_field\n+        )\n+        self.assertEqual(\n+            u\'DefaultFactory\',\n+            self.portal.doc1.test_default_factory_field\n+        )\n \n     def test_deserializer_sets_missing_value_when_receiving_null(self):\n         self.deserialize(body=\'{"test_missing_value_field": null}\')\n-        self.assertEquals(u\'missing\',\n-                          self.portal.doc1.test_missing_value_field)\n+        self.assertEqual(\n+            u\'missing\',\n+            self.portal.doc1.test_missing_value_field\n+        )\n \n     def test_deserializer_sets_missing_value_on_required_field(self):\n         \'\'\'We don\'t set missing_value if the field is required\'\'\'\n@@ -174,23 +192,27 @@ def test_deserializer_sets_missing_value_on_required_field(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(\n                 body=\'{"test_missing_value_required_field": null}\')\n-        self.assertEquals(u\'valid value\',\n-                          self.portal.doc1.test_missing_value_required_field)\n-        self.assertEquals(\n+        self.assertEqual(\n+            u\'valid value\',\n+            self.portal.doc1.test_missing_value_required_field\n+        )\n+        self.assertEqual(\n             (\n                 \'test_missing_value_required_field is a required field.\',\n                 \'Setting it to null is not allowed.\'\n             ),\n-            cm.exception.message[0][\'message\']\n+            cm.exception.args[0][0][\'message\']\n+        )\n+        self.assertEqual(\n+            u\'test_missing_value_required_field\',\n+            cm.exception.args[0][0][\'field\']\n         )\n-        self.assertEquals(u\'test_missing_value_required_field\',\n-                          cm.exception.message[0][\'field\'])\n \n     def test_set_layout(self):\n         current_layout = self.portal.doc1.getLayout()\n-        self.assertNotEquals(current_layout, "my_new_layout")\n+        self.assertNotEqual(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n-        self.assertEquals(\'my_new_layout\', self.portal.doc1.getLayout())\n+        self.assertEqual(\'my_new_layout\', self.portal.doc1.getLayout())\n \n \n class TestDXContentSerializerDeserializer(unittest.TestCase):\n@@ -229,14 +251,14 @@ def serialize(self, field):\n         return serializer()[field]\n \n     def test_serialize2deserialize_relation(self):\n-        value = unicode(self.portal.doc2.UID())\n+        value = six.text_type(self.portal.doc2.UID())\n         self.deserialize(\'test_relationchoice_field\', value)\n \n         serialization_value = self.serialize(\'test_relationchoice_field\')\n \n         self.deserialize(\'test_relationchoice_field\', serialization_value)\n \n-        self.assertEquals(\n+        self.assertEqual(\n             serialization_value[\'@id\'],\n             self.portal.doc1.test_relationchoice_field.to_object.absolute_url()\n         )\ndiff --git a/src/plone/restapi/tests/test_dxcontent_serializer.py b/src/plone/restapi/tests/test_dxcontent_serializer.py\nindex 3c47496b..7f393977 100644\n--- a/src/plone/restapi/tests/test_dxcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_serializer.py\n@@ -156,7 +156,7 @@ def test_get_layout(self):\n         current_layout = self.portal.doc1.getLayout()\n         obj = self.serialize()\n         self.assertIn(\'layout\', obj)\n-        self.assertEquals(current_layout, obj[\'layout\'])\n+        self.assertEqual(current_layout, obj[\'layout\'])\n \n     def test_serializer_includes_expansion(self):\n         provideAdapter(\n@@ -178,7 +178,7 @@ def test_serializer_includes_expansion(self):\n     def test_get_is_folderish(self):\n         obj = self.serialize()\n         self.assertIn(\'is_folderish\', obj)\n-        self.assertEquals(False, obj[\'is_folderish\'])\n+        self.assertEqual(False, obj[\'is_folderish\'])\n \n     def test_get_is_folderish_in_folder(self):\n         self.portal.invokeFactory(\'Folder\', id=u\'folder\')\n@@ -186,7 +186,7 @@ def test_get_is_folderish_in_folder(self):\n                                      ISerializeToJson)\n         obj = serializer()\n         self.assertIn(\'is_folderish\', obj)\n-        self.assertEquals(True, obj[\'is_folderish\'])\n+        self.assertEqual(True, obj[\'is_folderish\'])\n \n     def test_richtext_serializer_context(self):\n         """This checks if the context is passed in correctly.\n@@ -208,7 +208,7 @@ def __call__(self, value, mime_type):\n         with AdapterCM(RichtextTransform, (Interface, ), ITransformer):\n             obj = self.serialize()\n \n-        self.assertEquals(\n+        self.assertEqual(\n             obj[\'test_richtext_field\'][\'data\'],\n             self.portal.doc1.portal_type\n         )\n@@ -221,7 +221,7 @@ def test_allow_discussion_by_default(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_obj_instance_allows_but_not_global_enabled(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -231,7 +231,7 @@ def test_allow_discussion_obj_instance_allows_but_not_global_enabled(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_fti_allows_not_global_enabled(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -243,7 +243,7 @@ def test_allow_discussion_fti_allows_not_global_enabled(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_allows_global_enabled_but_nothing_else(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -255,7 +255,7 @@ def test_allow_discussion_allows_global_enabled_but_nothing_else(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_obj_instance_allows_global_enabled(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -268,7 +268,7 @@ def test_allow_discussion_obj_instance_allows_global_enabled(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(True, obj[\'allow_discussion\'])\n+        self.assertEqual(True, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_obj_instance_not_set_global_enabled(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -280,7 +280,7 @@ def test_allow_discussion_obj_instance_not_set_global_enabled(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_fti_allows_allows_global_enabled(self):\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -295,7 +295,7 @@ def test_allow_discussion_fti_allows_allows_global_enabled(self):\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(True, obj[\'allow_discussion\'])\n+        self.assertEqual(True, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_allowed(self): # noqa\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -312,7 +312,7 @@ def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_allow\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_set(self): # noqa\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -328,7 +328,7 @@ def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_set(s\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(True, obj[\'allow_discussion\'])\n+        self.assertEqual(True, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_fti_disallows_allows_global_enabled_but_instance_allowed(self): # noqa\n         self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n@@ -345,7 +345,7 @@ def test_allow_discussion_fti_disallows_allows_global_enabled_but_instance_allow\n         obj = serializer()\n \n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(True, obj[\'allow_discussion\'])\n+        self.assertEqual(True, obj[\'allow_discussion\'])\n \n     def test_allow_discussion_global_enabled_but_instance_has_no_discussion_behavior(self): # noqa\n         registry = queryUtility(IRegistry)\n@@ -354,4 +354,4 @@ def test_allow_discussion_global_enabled_but_instance_has_no_discussion_behavior\n \n         obj = self.serialize()\n         self.assertIn(\'allow_discussion\', obj)\n-        self.assertEquals(False, obj[\'allow_discussion\'])\n+        self.assertEqual(False, obj[\'allow_discussion\'])\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex d3528ba6..91e3fb3a 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -19,6 +19,7 @@\n from zope.schema.interfaces import ValidationError\n \n import unittest\n+import six\n \n \n class RequiredField(object):\n@@ -55,12 +56,12 @@ def deserialize(self, fieldname, value):\n                                        IFieldDeserializer)\n         return deserializer(value)\n \n-    def test_ascii_deserialization_returns_bytestring(self):\n+    def test_ascii_deserialization_returns_native_string(self):\n         value = self.deserialize(\'test_ascii_field\', u\'Foo\')\n         self.assertTrue(isinstance(value, str), \'Not a <str>\')\n         self.assertEqual(\'Foo\', value)\n \n-    def test_asciiline_deserialization_returns_bytestring(self):\n+    def test_asciiline_deserialization_returns_native_string(self):\n         value = self.deserialize(\'test_asciiline_field\', u\'Foo\')\n         self.assertTrue(isinstance(value, str), \'Not a <str>\')\n         self.assertEqual(\'Foo\', value)\n@@ -77,17 +78,17 @@ def test_bool_deserialization_returns_false(self):\n \n     def test_bytes_deserialization_returns_bytestring(self):\n         value = self.deserialize(\'test_bytes_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, str), \'Not a <str>\')\n-        self.assertEqual(\'Foo\', value)\n+        self.assertTrue(isinstance(value, bytes), \'Not a <bytes>\')\n+        self.assertEqual(b\'Foo\', value)\n \n     def test_bytesline_deserialization_returns_bytestring(self):\n         value = self.deserialize(\'test_bytesline_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, str), \'Not a <str>\')\n-        self.assertEqual(\'Foo\', value)\n+        self.assertTrue(isinstance(value, bytes), \'Not a <bytes>\')\n+        self.assertEqual(b\'Foo\', value)\n \n     def test_choice_deserialization_returns_vocabulary_item(self):\n         value = self.deserialize(\'test_choice_field\', u\'bar\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'bar\', value)\n \n     def test_date_deserialization_returns_date(self):\n@@ -128,7 +129,7 @@ def test_datetime_with_tz_deserialization_handles_dst(self):\n         value = self.deserialize(\'test_datetime_tz_field\',\n                                  u\'2015-05-20T10:39:54.361+02\')\n         self.assertEqual(timezone("Europe/Zurich").localize(\n-            datetime(2015, 05, 20, 10, 39, 54, 361000)), value)\n+            datetime(2015, 5, 20, 10, 39, 54, 361000)), value)\n \n     def test_datetime_deserialization_none(self):\n         # Make sure we don\'t construct a datetime out of nothing\n@@ -179,12 +180,12 @@ def test_set_deserialization_returns_set(self):\n \n     def test_text_deserialization_returns_unicode(self):\n         value = self.deserialize(\'test_text_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'Foo\', value)\n \n     def test_textline_deserialization_returns_unicode(self):\n         value = self.deserialize(\'test_textline_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'Foo\', value)\n \n     def test_time_deserialization_returns_time(self):\n@@ -252,7 +253,7 @@ def test_namedfield_deserialization_decodes_value(self):\n             u\'data\': u\'U3BhbSBhbmQgZWdncyE=\',\n             u\'encoding\': u\'base64\',\n         })\n-        self.assertEquals(\'Spam and eggs!\', value.data)\n+        self.assertEqual(b\'Spam and eggs!\', value.data)\n \n     def test_namedfield_deserialization_sets_content_type(self):\n         value = self.deserialize(\'test_namedfile_field\', {\n@@ -274,7 +275,7 @@ def test_namedfile_deserialization_returns_namedfile(self):\n         })\n         self.assertTrue(isinstance(value, namedfile.NamedFile),\n                         \'Not a <NamedFile>\')\n-        self.assertEqual(\'Spam and eggs!\', value.data)\n+        self.assertEqual(b\'Spam and eggs!\', value.data)\n \n     def test_namedimage_deserialization_returns_namedimage(self):\n         value = self.deserialize(\'test_namedimage_field\', {\n@@ -284,7 +285,7 @@ def test_namedimage_deserialization_returns_namedimage(self):\n         })\n         self.assertTrue(isinstance(value, namedfile.NamedImage),\n                         \'Not a <NamedImage>\')\n-        self.assertTrue(value.data.startswith(\'GIF89a\'))\n+        self.assertTrue(value.data.startswith(b\'GIF89a\'))\n \n     def test_namedblobfile_deserialization_returns_namedblobfile(self):\n         value = self.deserialize(\'test_namedblobfile_field\', {\n@@ -292,7 +293,7 @@ def test_namedblobfile_deserialization_returns_namedblobfile(self):\n         })\n         self.assertTrue(isinstance(value, namedfile.NamedBlobFile),\n                         \'Not a <NamedBlobFile>\')\n-        self.assertEqual(\'Spam and eggs!\', value.data)\n+        self.assertEqual(b\'Spam and eggs!\', value.data)\n \n     def test_namedblobimage_deserialization_returns_namedblobimage(self):\n         value = self.deserialize(\'test_namedblobimage_field\', {\n@@ -302,7 +303,7 @@ def test_namedblobimage_deserialization_returns_namedblobimage(self):\n         })\n         self.assertTrue(isinstance(value, namedfile.NamedBlobImage),\n                         \'Not a <NamedBlobImage>\')\n-        self.assertTrue(value.data.startswith(\'GIF89a\'))\n+        self.assertTrue(value.data.startswith(b\'GIF89a\'))\n \n     def test_namedblobimage_deserialization_fed_with_null_removes_image(self):\n         # null in json translates to None in python.\n@@ -332,14 +333,14 @@ def test_relationchoice_deserialization_from_uid_returns_document(self):\n         doc2 = self.portal[self.portal.invokeFactory(\n             \'DXTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n         value = self.deserialize(\'test_relationchoice_field\',\n-                                 unicode(doc2.UID()))\n+                                 six.text_type(doc2.UID()))\n         self.assertEqual(doc2, value)\n \n     def test_relationchoice_deserialization_from_url_returns_document(self):\n         doc2 = self.portal[self.portal.invokeFactory(\n             \'DXTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n         value = self.deserialize(\'test_relationchoice_field\',\n-                                 unicode(doc2.absolute_url()))\n+                                 six.text_type(doc2.absolute_url()))\n         self.assertEqual(doc2, value)\n \n     def test_relationchoice_deserialization_from_path_returns_document(self):\n@@ -353,8 +354,9 @@ def test_relationlist_deserialization_returns_list_of_documents(self):\n             \'DXTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n         doc3 = self.portal[self.portal.invokeFactory(\n             \'DXTestDocument\', id=\'doc3\', title=\'Referenceable Document\')]\n-        value = self.deserialize(\'test_relationlist_field\',\n-                                 [unicode(doc2.UID()), unicode(doc3.UID())])\n+        value = self.deserialize(\n+            \'test_relationlist_field\',\n+            [six.text_type(doc2.UID()), six.text_type(doc3.UID())])\n         self.assertTrue(isinstance(value, list), \'Not a <list>\')\n         self.assertEqual(doc2, value[0])\n         self.assertEqual(doc3, value[1])\n@@ -368,7 +370,7 @@ def test_datetime_deserializer_handles_invalid_value(self):\n             self.deserialize(\'test_datetime_field\',\n                              u\'2015-15-15T10:39:54.361Z\')\n         self.assertEqual(u\'Invalid date: 2015-15-15T10:39:54.361Z\',\n-                         cm.exception.message)\n+                         str(cm.exception))\n \n     def test_datetime_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError):\n@@ -377,13 +379,13 @@ def test_datetime_deserializer_validates_value(self):\n \n     def test_collection_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n-            self.deserialize(\'test_list_value_type_field\', [1, \'2\', 3])\n+            self.deserialize(\'test_list_value_type_field\', [1, b\'2\', 3])\n \n         # This validation error is actually produced by the\n         # DefaultFieldDeserializer that the CollectionFieldDeserializer will\n         # delegate to for deserializing collection items.\n         self.assertEqual(u\'Object is of wrong type.\', cm.exception.doc())\n-        self.assertEqual((\'2\', (int, long), \'\'), cm.exception.args)\n+        self.assertEqual((b\'2\', six.integer_types, \'\'), cm.exception.args)\n \n     def test_dict_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n@@ -392,15 +394,23 @@ def test_dict_deserializer_validates_value(self):\n         # This validation error is actually produced by the\n         # DefaultFieldDeserializer that the DictFieldSerializer will delegate\n         # to for deserializing keys and values.\n-        self.assertEqual(u\'Object is of wrong type.\', cm.exception.doc())\n-        self.assertEqual((\'k\', (int, long), \'\'), cm.exception.args)\n+        # We check for two sets of exception details\n+        # because zope.schema changed its exception...\n+        self.assertIn(cm.exception.doc(), (\n+            u\'Object is of wrong type.\',\n+            u\'Invalid int literal.\',\n+        ))\n+        self.assertIn(cm.exception.args, (\n+            (\'k\', six.integer_types, \'\'),\n+            ("invalid literal for int() with base 10: \'k\'",),\n+        ))\n \n     def test_time_deserializer_handles_invalid_value(self):\n         with self.assertRaises(ValueError) as cm:\n             self.deserialize(\'test_time_field\',\n                              u\'midnight\')\n         self.assertEqual(u\'Invalid time: midnight\',\n-                         cm.exception.message)\n+                         str(cm.exception))\n \n     def test_time_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n@@ -412,9 +422,9 @@ def test_timedelta_deserializer_handles_invalid_value(self):\n         with self.assertRaises(ValueError) as cm:\n             self.deserialize(\'test_timedelta_field\',\n                              u\'2h\')\n-        self.assertEqual(\n-            u\'unsupported type for timedelta seconds component: unicode\',\n-            cm.exception.message)\n+        self.assertIn(\n+            u\'unsupported type for timedelta seconds component:\',\n+            str(cm.exception))\n \n     def test_timedelta_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n@@ -462,7 +472,7 @@ def test_deserialize_with_context_bound_vocabulary(self):\n \n     def test_textline_deserializer_strips_value(self):\n         value = self.deserialize(\'test_textline_field\', u\'  aa  \')\n-        self.assertEquals(value, \'aa\')\n+        self.assertEqual(value, \'aa\')\n \n     def test_default_field_deserializer_validates_value(self):\n \n@@ -478,6 +488,6 @@ def constraint(self, value):\n                                        IFieldDeserializer)\n \n         with self.assertRaises(ConstraintNotSatisfied):\n-            deserializer("not an int")\n+            deserializer(b"not an int")\n \n         self.assertEqual(42, deserializer(42))\ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex c86dc8e2..99fc6f32 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -21,6 +21,7 @@\n from zope.interface.verify import verifyClass\n \n import os\n+import six\n \n if PLONE_VERSION.base_version >= \'5.1\':\n     GIF_SCALE_FORMAT = \'png\'\n@@ -60,12 +61,12 @@ def serialize(self, fieldname, value):\n \n     def test_ascii_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_ascii_field\', \'foo\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'foo\', value)\n \n     def test_asciiline_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_asciiline_field\', \'foo\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'foo\', value)\n \n     def test_bool_field_serialization_returns_true(self):\n@@ -79,35 +80,35 @@ def test_bool_field_serialization_returns_false(self):\n         self.assertEqual(False, value)\n \n     def test_bytes_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_bytes_field\', \'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        value = self.serialize(\'test_bytes_field\', b\'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'\\xe4\\xf6\\xfc\', value)\n \n     def test_bytesline_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_bytesline_field\',\n-                               \'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+                               b\'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'\\xe4\\xf6\\xfc\', value)\n \n     def test_choice_field_serialization_returns_vocabulary_item(self):\n         value = self.serialize(\'test_choice_field\', u\'foo\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'foo\', value)\n \n     def test_date_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_date_field\', date(2015, 7, 15))\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'2015-07-15\', value)\n \n     def test_datetime_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_datetime_field\',\n                                datetime(2015, 6, 20, 13, 22, 4))\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'2015-06-20T13:22:04\', value)\n \n     def test_decimal_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_decimal_field\', \'1.1\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'1.1\', value)\n \n     def test_dict_field_serialization_returns_dict(self):\n@@ -143,17 +144,17 @@ def test_set_field_serialization_returns_list(self):\n \n     def test_text_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_text_field\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'K\xc3\xa4fer\', value)\n \n     def test_textline_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_textline_field\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'K\xc3\xa4fer\', value)\n \n     def test_time_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_time_field\', time(14, 15, 33))\n-        self.assertTrue(isinstance(value, unicode), \'Not an <unicode>\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'14:15:33\', value)\n \n     def test_timedelta_field_serialization_returns_float(self):\n@@ -189,7 +190,8 @@ def test_namedfile_field_serialization_returns_dict(self):\n \n     def test_namedimage_field_serialization_returns_dict(self):\n         image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        image_data = open(image_file, \'rb\').read()\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         fn = \'test_namedimage_field\'\n         with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n             value = self.serialize(\n@@ -266,7 +268,8 @@ def test_namedblobfile_field_serialization_returns_dict(self):\n \n     def test_namedblobimage_field_serialization_returns_dict(self):\n         image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        image_data = open(image_file, \'rb\').read()\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         fn = \'test_namedblobimage_field\'\n         with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n             value = self.serialize(\ndiff --git a/src/plone/restapi/tests/test_error_handling.py b/src/plone/restapi/tests/test_error_handling.py\nindex f3772895..7cb02d73 100644\n--- a/src/plone/restapi/tests/test_error_handling.py\n+++ b/src/plone/restapi/tests/test_error_handling.py\n@@ -18,7 +18,7 @@\n class InternalServerErrorView(BrowserView):\n \n     def __call__(self):  # pragma: no cover\n-        from urllib2 import HTTPError\n+        from six.moves.urllib.error import HTTPError\n         raise HTTPError(\n             \'http://nohost/plone/internal_server_error\',\n             500,\n@@ -52,6 +52,9 @@ def setUp(self):\n         self.folder_url = self.folder.absolute_url()\n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     @unittest.skip(\'Not working since we moved to plone.rest\')\n     def test_404_not_found(self):\n         response = self.api_session.get(\'non-existing-resource\')\ndiff --git a/src/plone/restapi/tests/test_expansion.py b/src/plone/restapi/tests/test_expansion.py\nindex 3806210f..de805d73 100644\n--- a/src/plone/restapi/tests/test_expansion.py\n+++ b/src/plone/restapi/tests/test_expansion.py\n@@ -120,13 +120,16 @@ def setUp(self):\n             title=u\'Some Folder\')\n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_actions_is_expandable(self):\n         response = self.api_session.get(\'/folder\')\n \n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'actions\',\n-            response.json().get(\'@components\').keys()\n+            list(response.json().get(\'@components\'))\n         )\n \n     def test_actions_expanded(self):\n@@ -160,7 +163,7 @@ def test_navigation_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'navigation\',\n-            response.json().get(\'@components\').keys()\n+            list(response.json().get(\'@components\'))\n         )\n \n     def test_navigation_expanded(self):\n@@ -239,7 +242,7 @@ def test_breadcrumbs_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'breadcrumbs\',\n-            response.json().get(\'@components\').keys()\n+            list(response.json().get(\'@components\'))\n         )\n \n     def test_breadcrumbs_expanded(self):\n@@ -266,7 +269,7 @@ def test_workflow_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'workflow\',\n-            response.json().get(\'@components\').keys()\n+            list(response.json().get(\'@components\'))\n         )\n \n     def test_workflow_expanded(self):\n@@ -323,21 +326,24 @@ def setUp(self):\n         alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=\'Test document\')\n+            self.portal[\'en\'], \'Document\', title=u\'Test document\')\n         self.es_content = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=\'Test document\')\n+            self.portal[\'es\'], \'Document\', title=u\'Test document\')\n         ITranslationManager(self.en_content).register_translation(\n             \'es\', self.es_content)\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_translations_is_expandable(self):\n         response = self.api_session.get(\'/en/test-document\')\n \n         self.assertEqual(response.status_code, 200)\n         self.assertIn(\n             \'translations\',\n-            response.json().get(\'@components\').keys()\n+            list(response.json().get(\'@components\'))\n         )\n \n     def test_translations_expanded(self):\ndiff --git a/src/plone/restapi/tests/test_locking.py b/src/plone/restapi/tests/test_locking.py\nindex 0e7b49fb..44e57653 100644\n--- a/src/plone/restapi/tests/test_locking.py\n+++ b/src/plone/restapi/tests/test_locking.py\n@@ -32,6 +32,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_lock_object(self):\n         response = self.api_session.post(\'/@lock\',)\n         transaction.commit()\ndiff --git a/src/plone/restapi/tests/test_pas.py b/src/plone/restapi/tests/test_pas.py\nindex ca5482d3..4a30e18d 100644\n--- a/src/plone/restapi/tests/test_pas.py\n+++ b/src/plone/restapi/tests/test_pas.py\n@@ -72,13 +72,13 @@ def test_authenticate_credentials_with_valid_token(self):\n             (\'admin\', \'admin\'),\n             self.plugin.authenticateCredentials(creds))\n \n-    def test_authenticate_credentials_returns_byte_string(self):\n+    def test_authenticate_credentials_returns_native_string(self):\n         creds = {}\n         creds[\'extractor\'] = \'jwt_auth\'\n         creds[\'token\'] = self.plugin.create_token(\'admin\')\n         self.assertIsInstance(\n             self.plugin.authenticateCredentials(creds)[0],\n-            str\n+            str,\n         )\n \n     def test_decode_token_after_key_rotation(self):\ndiff --git a/src/plone/restapi/tests/test_permissions.py b/src/plone/restapi/tests/test_permissions.py\nindex 0bf9c634..84a94c9b 100644\n--- a/src/plone/restapi/tests/test_permissions.py\n+++ b/src/plone/restapi/tests/test_permissions.py\n@@ -24,6 +24,9 @@ def setUp(self):\n         self.api_session.headers.update({\'Accept\': \'application/json\'})\n         self.api_session.auth = (TEST_USER_NAME, TEST_USER_PASSWORD)\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_anonymous_allowed_to_use_api_by_default(self):\n         setRoles(self.portal, TEST_USER_ID, [\'Anonymous\'])\n         transaction.commit()\ndiff --git a/src/plone/restapi/tests/test_profile_tiles.py b/src/plone/restapi/tests/test_profile_tiles.py\nnew file mode 100644\nindex 00000000..dbeccb14\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_profile_tiles.py\n@@ -0,0 +1,34 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import login\n+from plone.app.testing import setRoles\n+from plone.restapi.testing import PLONE_RESTAPI_TILES_INTEGRATION_TESTING\n+from plone.restapi.behaviors import ITiles\n+from Products.CMFCore.utils import getToolByName\n+\n+import unittest\n+\n+\n+class TestProfileTiles(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_TILES_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer[\'app\']\n+        self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        login(self.portal, SITE_OWNER_NAME)\n+\n+    def test_document_type_has_tiles_behavior_enabled(self):\n+        self.portal.invokeFactory(\n+            \'Document\',\n+            id=\'tileddoc\',\n+            title=\'Document with Tiles\'\n+        )\n+        ITiles.providedBy(self.portal[\'tileddoc\'])\n+\n+    def test_plone_restapi_base_profile_applied(self):\n+        uf = getToolByName(self.portal, \'acl_users\')\n+        self.assertTrue(\'jwt_auth\' in uf)\ndiff --git a/src/plone/restapi/tests/test_registry.py b/src/plone/restapi/tests/test_registry.py\nindex e421b615..7bb89ba9 100644\n--- a/src/plone/restapi/tests/test_registry.py\n+++ b/src/plone/restapi/tests/test_registry.py\n@@ -12,6 +12,7 @@\n \n import transaction\n import unittest\n+from six.moves import range\n \n \n class TestRegistry(unittest.TestCase):\n@@ -38,6 +39,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_registry_record(self):\n         response = self.api_session.get(\'/@registry/foo.bar\')\n \ndiff --git a/src/plone/restapi/tests/test_registry_serializer.py b/src/plone/restapi/tests/test_registry_serializer.py\nindex ea9f2856..e6774412 100644\n--- a/src/plone/restapi/tests/test_registry_serializer.py\n+++ b/src/plone/restapi/tests/test_registry_serializer.py\n@@ -1,19 +1,23 @@\n # -*- coding: utf-8 -*-\n-import unittest\n-\n from plone.registry import Registry\n from plone.registry import field\n from plone.registry.record import Record\n+from plone.restapi import HAS_AT\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from zope.component import getMultiAdapter\n \n+import unittest\n+from six.moves import range\n+\n \n class TestRegistrySerializer(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n \n@@ -26,8 +30,8 @@ def test_empty(self):\n         registry = Registry()\n         obj = self.serialize(registry)\n         expected = [\'@id\', \'items_total\', \'items\']\n-        self.assertEqual(set(obj.keys()), set(expected))\n-        self.assertNotIn(\'batching\', obj.keys())\n+        self.assertEqual(set(obj), set(expected))\n+        self.assertNotIn(\'batching\', list(obj))\n \n     def test_batched(self):\n         registry = Registry()\n@@ -38,8 +42,8 @@ def test_batched(self):\n \n         obj = self.serialize(registry)\n         expected = [\'@id\', \'items_total\', \'items\', \'batching\']\n-        self.assertEqual(set(expected), set(obj.keys()))\n-        self.assertEqual(obj[\'items_total\'], len(range(1, 100)))\n+        self.assertEqual(set(expected), set(obj))\n+        self.assertEqual(obj[\'items_total\'], len(list(range(1, 100))))\n \n     def test_structure(self):\n         registry = Registry()\n@@ -49,7 +53,7 @@ def test_structure(self):\n \n         obj = self.serialize(registry)\n         item = obj[\'items\'][0]\n-        self.assertEqual(set(item.keys()), set([\'name\', \'value\', \'schema\']))\n-        self.assertEqual(set(item[\'schema\'].keys()), set([\'properties\']))\n+        self.assertEqual(set(item), set([\'name\', \'value\', \'schema\']))\n+        self.assertEqual(set(item[\'schema\']), set([\'properties\']))\n         self.assertEqual(item[\'name\'], \'foo.bar\')\n         self.assertEqual(item[\'value\'], u"Lorem Ipsum")\ndiff --git a/src/plone/restapi/tests/test_roles.py b/src/plone/restapi/tests/test_roles.py\nindex 26cb4b42..474dd4cc 100644\n--- a/src/plone/restapi/tests/test_roles.py\n+++ b/src/plone/restapi/tests/test_roles.py\n@@ -19,10 +19,13 @@ def setUp(self):\n         self.api_session.headers.update({\'Accept\': \'application/json\'})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_roles_endpoint_lists_roles(self):\n         response = self.api_session.get(\'/@roles\')\n \n-        self.assertItemsEqual([\n+        expected = (\n             {u\'@id\': self.portal_url + u\'/@roles/Contributor\',\n              u\'@type\': u\'role\',\n              u\'id\': u\'Contributor\',\n@@ -50,19 +53,29 @@ def test_roles_endpoint_lists_roles(self):\n             {u\'@id\': self.portal_url + u\'/@roles/Manager\',\n              u\'@type\': u\'role\',\n              u\'id\': u\'Manager\',\n-             u\'title\': u\'Manager\'}],\n-            response.json())\n+             u\'title\': u\'Manager\'},\n+        )\n+        result = response.json()\n+        self.assertEqual(len(expected), len(result))\n+        for item in result:\n+            self.assertIn(item, expected)\n \n     def test_roles_endpoint_translates_role_titles(self):\n         self.api_session.headers.update({\'Accept-Language\': \'de\'})\n         response = self.api_session.get(\'/@roles\')\n-\n-        self.assertItemsEqual([\n+        # One of the roles has changed translation in German.\n+        # Reviewer used to be \'Ver\\xf6ffentlichen\', but is now simply Reviewer.\n+        titles = {item[\'title\'] for item in response.json()}\n+        options = {u\'Ver\\xf6ffentlichen\', u\'Reviewer\'}\n+        # One of the options must match:\n+        self.assertTrue(titles.intersection(options))\n+        # Discard them:\n+        titles = titles.difference(options)\n+        self.assertEqual({\n             u\'Hinzuf\\xfcgen\',\n             u\'Bearbeiten\',\n             u\'Benutzer\',\n             u\'Ansehen\',\n-            u\'Ver\\xf6ffentlichen\',\n             u\'Website-Administrator\',\n-            u\'Verwalten\'],\n-            [item[\'title\'] for item in response.json()])\n+            u\'Verwalten\'},\n+            titles)\ndiff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex ec4fd645..827d1526 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -8,6 +8,7 @@\n from plone.app.textfield.value import RichTextValue\n from plone.dexterity.utils import createContentInContainer\n from plone.registry.interfaces import IRegistry\n+from plone.restapi import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n@@ -16,6 +17,7 @@\n from Products.CMFCore.utils import getToolByName\n from zope.component import getUtility\n \n+import six\n import transaction\n import unittest\n \n@@ -74,6 +76,23 @@ def setUp(self):\n             test_bool_field=False,\n         )\n \n+        # /plone/folder2\n+        self.folder2 = createContentInContainer(\n+            self.portal, u\'Folder\',\n+            id=u\'folder2\',\n+            title=u\'Another Folder\')\n+\n+        # /plone/folder2/doc\n+        createContentInContainer(\n+            self.folder2, u\'DXTestDocument\',\n+            id=\'doc\',\n+            title=u\'Document in second folder\',\n+            start=DateTime(1975, 1, 1, 0, 0),\n+            effective=DateTime(2015, 1, 1, 0, 0),\n+            expires=DateTime(2020, 1, 1, 0, 0),\n+            test_bool_field=False,\n+        )\n+\n         # /plone/doc-outside-folder\n         createContentInContainer(\n             self.portal, u\'DXTestDocument\',\n@@ -83,6 +102,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_overall_response_format(self):\n         response = self.api_session.get(\'/@search\')\n \n@@ -133,10 +155,61 @@ def test_search_in_vhm(self):\n              u\'/folder/other-document\'},\n             set(result_paths(response.json())))\n \n+    def test_search_in_vhm_multiple_paths(self):\n+        # Install a Virtual Host Monster\n+        if \'virtual_hosting\' not in self.app.objectIds():\n+            # If ZopeLite was imported, we have no default virtual\n+            # host monster\n+            from Products.SiteAccess.VirtualHostMonster \\\n+                import manage_addVirtualHostMonster\n+            manage_addVirtualHostMonster(self.app, \'virtual_hosting\')\n+        transaction.commit()\n+\n+        # path as a list\n+        query = {\'path\': [\n+            \'/folder\',\n+            \'/folder2\']\n+        }\n+\n+        # If we go through the VHM we will get results for multiple paths\n+        # if we only use the part of the path inside the VHM\n+        vhm_url = (\n+            \'%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s\' %\n+            (self.app.absolute_url(), \'@search\'))\n+        response = self.api_session.get(vhm_url, params=query)\n+        self.assertSetEqual(\n+            {u\'/folder\',\n+             u\'/folder/doc\',\n+             u\'/folder/other-document\',\n+             u\'/folder2\',\n+             u\'/folder2/doc\'},\n+            set(result_paths(response.json())))\n+\n+        # path as a dict with a query list\n+        query = {\'path.query\': [\n+            \'/folder\',\n+            \'/folder2\']\n+        }\n+\n+        # If we go through the VHM we will get results for multiple paths\n+        # if we only use the part of the path inside the VHM\n+        vhm_url = (\n+            \'%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s\' %\n+            (self.app.absolute_url(), \'@search\'))\n+        response = self.api_session.get(vhm_url, params=query)\n+        self.assertSetEqual(\n+            {u\'/folder\',\n+             u\'/folder/doc\',\n+             u\'/folder/other-document\',\n+             u\'/folder2\',\n+             u\'/folder2/doc\'},\n+            set(result_paths(response.json())))\n+\n     def test_path_gets_prefilled_if_missing_from_path_query_dict(self):\n         response = self.api_session.get(\'/@search?path.depth=1\')\n         self.assertSetEqual(\n             {u\'/plone/folder\',\n+             u\'/plone/folder2\',\n              u\'/plone/doc-outside-folder\'},\n             set(result_paths(response.json())))\n \n@@ -156,6 +229,7 @@ def test_full_metadata_retrieval(self):\n         query = {\'SearchableText\': \'lorem\', \'metadata_fields\': \'_all\'}\n         response = self.api_session.get(\'/@search\', params=query)\n \n+        first_item = response.json()[\'items\'][0]\n         self.assertDictContainsSubset(\n             {u\'@id\': self.portal_url + u\'/folder/doc\',\n              u\'Creator\': u\'test_user_1_\',\n@@ -175,7 +249,6 @@ def test_full_metadata_retrieval(self):\n              u\'exclude_from_nav\': False,\n              u\'expires\': u\'1999-01-01T00:00:00+00:00\',\n              u\'getId\': u\'doc\',\n-             u\'getObjSize\': u\'0 KB\',\n              u\'getPath\': u\'/plone/folder/doc\',\n              u\'getRemoteUrl\': None,\n              u\'getURL\': self.portal_url + u\'/folder/doc\',\n@@ -192,7 +265,10 @@ def test_full_metadata_retrieval(self):\n              u\'sync_uid\': None,\n              u\'title\': u\'Lorem Ipsum\',\n              u\'total_comments\': 0},\n-            response.json()[\'items\'][0])\n+            first_item)\n+        # This value changed in Plone 5.2\n+        # (Dexterity gained support for getObjSize)\n+        self.assertIn(first_item[u\'getObjSize\'], (u\'0 KB\', u\'1 KB\'))\n \n     def test_full_objects_retrieval(self):\n         query = {\'SearchableText\': \'lorem\',\n@@ -224,8 +300,8 @@ def test_full_objects_retrieval_discussion(self):\n                  \'fullobjects\': True}\n         response = self.api_session.get(\'/@search\', params=query)\n \n-        self.assertEquals(response.status_code, 200)\n-        self.assertEquals(len(response.json()[\'items\']), 1)\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(len(response.json()[\'items\']), 1)\n \n     def test_full_objects_retrieval_collections(self):\n         self.collection = createContentInContainer(\n@@ -238,8 +314,8 @@ def test_full_objects_retrieval_collections(self):\n                  \'fullobjects\': True}\n         response = self.api_session.get(\'/@search\', params=query)\n \n-        self.assertEquals(response.status_code, 200)\n-        self.assertEquals(len(response.json()[\'items\']), 1)\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(len(response.json()[\'items\']), 1)\n \n     # ZCTextIndex\n \n@@ -276,7 +352,7 @@ def test_keyword_index_str_query_or(self):\n         query = {\'test_list_field\': [\'Keyword2\', \'Keyword3\']}\n         response = self.api_session.get(\'/@search\', params=query)\n \n-        self.assertItemsEqual(\n+        self.assertEqual(\n             [u\'/plone/folder/doc\',\n              u\'/plone/folder/other-document\'],\n             result_paths(response.json())\n@@ -294,6 +370,7 @@ def test_keyword_index_str_query_and(self):\n             result_paths(response.json())\n         )\n \n+    @unittest.skipIf(six.PY3, "Python 3 can\'t sort mixed types")\n     def test_keyword_index_int_query(self):\n         self.doc.test_list_field = [42, 23]\n         self.doc.reindexObject()\n@@ -361,6 +438,39 @@ def test_extended_path_index_query(self):\n             result_paths(response.json())\n         )\n \n+    def test_extended_path_index_query_multiple(self):\n+        # path as a list\n+        query = {\'path\': [\n+                \'/\'.join(self.folder.getPhysicalPath()),\n+                \'/\'.join(self.folder2.getPhysicalPath())]\n+        }\n+        response = self.api_session.get(\'/@search\', params=query)\n+\n+        self.assertEqual(\n+            [u\'/plone/folder\',\n+             u\'/plone/folder/doc\',\n+             u\'/plone/folder/other-document\',\n+             u\'/plone/folder2\',\n+             u\'/plone/folder2/doc\'],\n+            result_paths(response.json())\n+        )\n+\n+        # path as a dict with a query list\n+        query = {\'path.query\': [\n+                \'/\'.join(self.folder.getPhysicalPath()),\n+                \'/\'.join(self.folder2.getPhysicalPath())]\n+        }\n+        response = self.api_session.get(\'/@search\', params=query)\n+\n+        self.assertEqual(\n+            [u\'/plone/folder\',\n+             u\'/plone/folder/doc\',\n+             u\'/plone/folder/other-document\',\n+             u\'/plone/folder2\',\n+             u\'/plone/folder2/doc\'],\n+            result_paths(response.json())\n+        )\n+\n     def test_extended_path_index_depth_limiting(self):\n         lvl1 = createContentInContainer(self.portal, u\'Folder\', id=u\'lvl1\')\n         lvl2 = createContentInContainer(lvl1, u\'Folder\', id=u\'lvl2\')\n@@ -506,6 +616,8 @@ class TestSearchATFunctional(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n         self.portal_url = self.portal.absolute_url()\ndiff --git a/src/plone/restapi/tests/test_search_utils.py b/src/plone/restapi/tests/test_search_utils.py\nindex bf1e3efb..65a92378 100644\n--- a/src/plone/restapi/tests/test_search_utils.py\n+++ b/src/plone/restapi/tests/test_search_utils.py\n@@ -22,7 +22,7 @@ def test_unflattens_dotted_dict(self):\n         )\n \n     def test_works_on_empty_dict(self):\n-        self.assertEquals({}, unflatten_dotted_dict({}))\n+        self.assertEqual({}, unflatten_dotted_dict({}))\n \n     def test_works_with_list_values(self):\n         dct = {\ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex 43c14ab7..6d1748e1 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -12,6 +12,7 @@\n from Products.CMFCore.utils import getToolByName\n from zope.component import getMultiAdapter\n \n+import json\n import os\n import unittest\n \n@@ -66,7 +67,7 @@ def test_serialize_can_read_as_manager(self):\n         setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Manager\'])\n         self.assertIn(\n             \'Test Read Permission\',\n-            self.serialize(self.portal.dxdoc).values()\n+            list(self.serialize(self.portal.dxdoc).values())\n         )\n \n     def test_serialize_cannot_read_as_member(self):\n@@ -75,7 +76,7 @@ def test_serialize_cannot_read_as_member(self):\n         setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n         self.assertNotIn(\n             \'Test Read Permission\',\n-            self.serialize(self.portal.dxdoc).values()\n+            list(self.serialize(self.portal.dxdoc).values())\n         )\n \n     def test_serialize_returns_desciption(self):\n@@ -265,8 +266,10 @@ def test_serialize_empty_file_returns_none(self):\n     def test_serialize_image(self):\n         self.portal.invokeFactory(\'Image\', id=\'image1\', title=\'Image 1\')\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         self.portal.image1.image = NamedBlobImage(\n-            data=open(image_file, \'r\').read(),\n+            data=image_data,\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\n@@ -368,3 +371,52 @@ def test_serialize_to_json_collection(self):\n             ],\n             self.serialize(self.portal.collection1).get(\'items\')\n         )\n+\n+    def test_serialize_returns_site_root_common(self):\n+        self.assertIn(\n+            \'title\',\n+            self.serialize(self.portal),\n+        )\n+        self.assertIn(\n+            \'description\',\n+            self.serialize(self.portal)\n+        )\n+\n+    def test_serialize_returns_site_root_opt_in_tiles_not_present(self):\n+        self.assertEqual(\n+            self.serialize(self.portal)[\'tiles\'],\n+            {}\n+        )\n+        self.assertEqual(\n+            self.serialize(self.portal)[\'tiles_layout\'],\n+            {}\n+        )\n+\n+    def test_serialize_returns_site_root_opt_in_tiles_present(self):\n+        tiles = {\n+            "0358abe2-b4f1-463d-a279-a63ea80daf19": {\n+                "@type": "description"\n+            },\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {\n+                "@type": "title"\n+            }\n+        }\n+        tiles_layout = {\n+            "items": [\n+                "07c273fc-8bfc-4e7d-a327-d513e5a945bb",\n+                "0358abe2-b4f1-463d-a279-a63ea80daf19"\n+            ]\n+        }\n+        self.portal.manage_addProperty(\n+            \'tiles\', json.dumps(tiles), \'string\')\n+        self.portal.manage_addProperty(\n+            \'tiles_layout\', json.dumps(tiles_layout), \'string\')\n+\n+        self.assertEqual(\n+            self.serialize(self.portal)[\'tiles\'],\n+            tiles\n+        )\n+        self.assertEqual(\n+            self.serialize(self.portal)[\'tiles_layout\'],\n+            tiles_layout\n+        )\ndiff --git a/src/plone/restapi/tests/test_serializer_catalog.py b/src/plone/restapi/tests/test_serializer_catalog.py\nindex a66a0a1b..a873dd8a 100644\n--- a/src/plone/restapi/tests/test_serializer_catalog.py\n+++ b/src/plone/restapi/tests/test_serializer_catalog.py\n@@ -2,6 +2,7 @@\n from DateTime import DateTime\n from plone import api\n from plone.dexterity.utils import createContentInContainer\n+from plone.restapi import HAS_AT\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n@@ -101,7 +102,7 @@ def test_brain_summary_representation(self):\n         brain = lazy_map[0]\n         result = getMultiAdapter(\n             (brain, self.request), ISerializeToJsonSummary)()\n-        self.assertEquals(\n+        self.assertEqual(\n             {\'@id\': \'http://nohost/plone/my-folder/my-document\',\n              \'@type\': \'Document\',\n              \'title\': \'My Document\',\n@@ -177,6 +178,8 @@ class TestCatalogATSerializers(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n         self.request = self.portal.REQUEST\ndiff --git a/src/plone/restapi/tests/test_serializer_converters.py b/src/plone/restapi/tests/test_serializer_converters.py\nindex 3b643c95..289fee0c 100644\n--- a/src/plone/restapi/tests/test_serializer_converters.py\n+++ b/src/plone/restapi/tests/test_serializer_converters.py\n@@ -15,18 +15,19 @@\n \n import json\n import Missing\n+import six\n \n \n class TestJsonCompatibleConverters(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def test_None(self):\n-        self.assertEquals(None, json_compatible(None))\n-        self.assertEquals(\'null\', json.dumps(json_compatible(None)))\n+        self.assertEqual(None, json_compatible(None))\n+        self.assertEqual(\'null\', json.dumps(json_compatible(None)))\n \n     def test_error_when_type_unknown(self):\n         err_regex = r\'^No converter for making <object object at [^>]*>\' + \\\n-                    r\' \\(<type \\\'object\\\'>\\) JSON compatible.$\'\n+                    r\' \\(<(class|type) \\\'object\\\'>\\) JSON compatible.$\'\n \n         with self.assertRaisesRegexp(TypeError, err_regex):\n             json_compatible(object())\n@@ -35,143 +36,175 @@ def test_error_when_type_unknown(self):\n             json_compatible({\'foo\': [object()]})\n \n     def test_True(self):\n-        self.assertEquals(True, json_compatible(True))\n-        self.assertEquals(\'true\', json.dumps(json_compatible(True)))\n+        self.assertEqual(True, json_compatible(True))\n+        self.assertEqual(\'true\', json.dumps(json_compatible(True)))\n \n     def test_False(self):\n-        self.assertEquals(False, json_compatible(False))\n-        self.assertEquals(\'false\', json.dumps(json_compatible(False)))\n+        self.assertEqual(False, json_compatible(False))\n+        self.assertEqual(\'false\', json.dumps(json_compatible(False)))\n \n     def test_unicode(self):\n-        self.assertEquals(u\'foo\', json_compatible(u\'foo\'))\n-        self.assertIsInstance(json_compatible(u\'foo\'), unicode)\n-        self.assertEquals(\'"foo"\', json.dumps(json_compatible(\'foo\')))\n+        self.assertEqual(u\'foo\', json_compatible(u\'foo\'))\n+        self.assertIsInstance(json_compatible(u\'foo\'), six.text_type)\n+        self.assertEqual(\'"foo"\', json.dumps(json_compatible(\'foo\')))\n \n     def test_unicode_with_umlaut(self):\n-        self.assertEquals(u\'Hall\\xf6chen\', json_compatible(u\'Hall\\xf6chen\'))\n-        self.assertEquals(\'"Hall\\\\u00f6chen"\',\n-                          json.dumps(json_compatible(u\'Hall\\xf6chen\')))\n+        self.assertEqual(u\'Hall\\xf6chen\', json_compatible(u\'Hall\\xf6chen\'))\n+        self.assertEqual(\n+            \'"Hall\\\\u00f6chen"\',\n+            json.dumps(json_compatible(u\'Hall\\xf6chen\'))\n+        )\n \n     def test_string_is_converted_to_unicode(self):\n         # Standard library JSON works with unicode.\n-        self.assertEquals(u\'foo\', json_compatible(\'foo\'))\n-        self.assertIsInstance(json_compatible(\'foo\'), unicode)\n-        self.assertEquals(\'"foo"\', json.dumps(json_compatible(\'foo\')))\n+        self.assertEqual(u\'foo\', json_compatible(\'foo\'))\n+        self.assertIsInstance(json_compatible(\'foo\'), six.text_type)\n+        self.assertEqual(\'"foo"\', json.dumps(json_compatible(\'foo\')))\n \n     def test_string_with_umlaut(self):\n         # Standard library JSON works with unicode.\n-        self.assertEquals(u\'Hall\\xf6chen\', json_compatible(\'Hall\xc3\xb6chen\'))\n-        self.assertEquals(\'"Hall\\\\u00f6chen"\',\n-                          json.dumps(json_compatible(\'Hall\xc3\xb6chen\')))\n+        self.assertEqual(u\'Hall\\xf6chen\', json_compatible(\'Hall\xc3\xb6chen\'))\n+        self.assertEqual(\n+            \'"Hall\\\\u00f6chen"\',\n+            json.dumps(json_compatible(\'Hall\xc3\xb6chen\'))\n+        )\n \n     def test_int(self):\n-        self.assertEquals(42, json_compatible(42))\n+        self.assertEqual(42, json_compatible(42))\n         self.assertIsInstance(json_compatible(42), int)\n-        self.assertEquals(\'42\', json.dumps(json_compatible(42)))\n+        self.assertEqual(\'42\', json.dumps(json_compatible(42)))\n \n     def test_long(self):\n-        self.assertEquals(10L, json_compatible(10L))\n-        self.assertIsInstance(json_compatible(10L), long)\n-        self.assertEquals(\'10\', json.dumps(json_compatible(10L)))\n+        def _long(val):\n+            if six.PY2:\n+                return int(val)\n+            else:\n+                return int(val)\n+        self.assertEqual(_long(10), json_compatible(_long(10)))\n+        self.assertIsInstance(json_compatible(_long(10)), int)\n+        self.assertEqual(\'10\', json.dumps(json_compatible(_long(10))))\n \n     def test_float(self):\n-        self.assertEquals(1.4, json_compatible(1.4))\n+        self.assertEqual(1.4, json_compatible(1.4))\n         self.assertIsInstance(json_compatible(1.4), float)\n-        self.assertEquals(\'1.4\', json.dumps(json_compatible(1.4)))\n+        self.assertEqual(\'1.4\', json.dumps(json_compatible(1.4)))\n \n     def test_list(self):\n-        self.assertEquals([\'foo\'], json_compatible([\'foo\']))\n-        self.assertEquals(\'["foo"]\', json.dumps(json_compatible([\'foo\'])))\n+        self.assertEqual([\'foo\'], json_compatible([\'foo\']))\n+        self.assertEqual(\'["foo"]\', json.dumps(json_compatible([\'foo\'])))\n         self.assertIsInstance(json_compatible([\'foo\'])[0],\n-                              unicode,\n+                              six.text_type,\n                               \'List values should be converted recursively.\')\n \n     def test_persistent_list(self):\n         value = PersistentList([\'foo\'])\n-        self.assertEquals([\'foo\'], json_compatible(value))\n-        self.assertEquals(\'["foo"]\', json.dumps(json_compatible(value)))\n+        self.assertEqual([\'foo\'], json_compatible(value))\n+        self.assertEqual(\'["foo"]\', json.dumps(json_compatible(value)))\n         self.assertIsInstance(json_compatible(value)[0],\n-                              unicode,\n+                              six.text_type,\n                               \'PersistentList values should be converted\'\n                               \' recursively.\')\n \n     def test_tuple(self):\n         # Tuples are converted to list (json would do that anyway and\n         # it is easier to implement it with map).\n-        self.assertEquals([\'foo\', None], json_compatible((\'foo\', None)))\n-        self.assertEquals(\'["foo"]\', json.dumps(json_compatible((\'foo\', ))))\n+        self.assertEqual([\'foo\', None], json_compatible((\'foo\', None)))\n+        self.assertEqual(\'["foo"]\', json.dumps(json_compatible((\'foo\', ))))\n         self.assertIsInstance(json_compatible((\'foo\',))[0],\n-                              unicode,\n+                              six.text_type,\n                               \'Tuple values should be converted recursively.\')\n \n     def test_frozenset(self):\n-        self.assertEquals([[1, 1], [2, 2]],\n-                          sorted(json_compatible(frozenset([(1, 1), (2, 2)]))))\n+        self.assertEqual(\n+            [[1, 1], [2, 2]],\n+            sorted(json_compatible(frozenset([(1, 1), (2, 2)])))\n+        )\n \n     def test_set(self):\n-        self.assertEquals([[1, 1], [2, 2]],\n-                          sorted(json_compatible(set([(1, 1), (2, 2)]))))\n+        self.assertEqual(\n+            [[1, 1], [2, 2]],\n+            sorted(json_compatible(set([(1, 1), (2, 2)])))\n+        )\n \n     def test_dict(self):\n-        self.assertEquals({u\'foo\': True,\n-                           u\'bar\': None,\n-                           u\'baz\': 3},\n-                          json_compatible({\'foo\': True,\n-                                           \'bar\': None,\n-                                           \'baz\': 3}))\n-        self.assertEquals(\'{"foo": "bar"}\',\n-                          json.dumps(json_compatible({\'foo\': \'bar\'})))\n-        self.assertIsInstance(json_compatible({\'foo\': \'bar\'}.keys()[0]),\n-                              unicode,\n+        self.assertEqual(\n+            {\n+                u\'foo\': True,\n+                u\'bar\': None,\n+                u\'baz\': 3\n+            },\n+            json_compatible(\n+                {\n+                    \'foo\': True,\n+                    \'bar\': None,\n+                    \'baz\': 3\n+                }\n+            )\n+        )\n+        self.assertEqual(\n+            \'{"foo": "bar"}\',\n+            json.dumps(json_compatible({\'foo\': \'bar\'}))\n+        )\n+        self.assertIsInstance(json_compatible(list({\'foo\': \'bar\'})[0]),\n+                              six.text_type,\n                               \'Dict keys should be converted recursively.\')\n-        self.assertIsInstance(json_compatible({\'foo\': \'bar\'}.values()[0]),\n-                              unicode,\n-                              \'Dict values should be converted recursively.\')\n+        self.assertIsInstance(\n+            json_compatible(list({\'foo\': \'bar\'}.values())[0]),\n+            six.text_type,\n+            \'Dict values should be converted recursively.\')\n \n     def test_dict_empty(self):\n-        self.assertEquals({}, json_compatible({}))\n-        self.assertEquals(\'{}\', json.dumps(json_compatible({})))\n+        self.assertEqual({}, json_compatible({}))\n+        self.assertEqual(\'{}\', json.dumps(json_compatible({})))\n \n     def test_persistent_mapping(self):\n         value = PersistentMapping({\'foo\': \'bar\'})\n-        self.assertEquals({u\'foo\': u\'bar\'}, json_compatible(value))\n-        self.assertEquals(\'{"foo": "bar"}\', json.dumps(json_compatible(value)))\n-        self.assertIsInstance(json_compatible(value.keys()[0]),\n-                              unicode,\n+        self.assertEqual({u\'foo\': u\'bar\'}, json_compatible(value))\n+        self.assertEqual(\'{"foo": "bar"}\', json.dumps(json_compatible(value)))\n+        self.assertIsInstance(json_compatible(list(value)[0]),\n+                              six.text_type,\n                               \'Dict keys should be converted recursively.\')\n-        self.assertIsInstance(json_compatible(value.values()[0]),\n-                              unicode,\n+        self.assertIsInstance(json_compatible(list(value.values())[0]),\n+                              six.text_type,\n                               \'Dict values should be converted recursively.\')\n \n     def test_python_datetime(self):\n         value = DateTime(\'2015/11/23 19:45:55.649027 GMT+3\').asdatetime()\n-        self.assertEquals(u\'2015-11-23T16:45:55+00:00\',\n-                          json_compatible(value))\n-        self.assertEquals(\'"2015-11-23T16:45:55+00:00"\',\n-                          json.dumps(json_compatible(value)))\n+        self.assertEqual(\n+            u\'2015-11-23T16:45:55+00:00\',\n+            json_compatible(value)\n+        )\n+        self.assertEqual(\n+            \'"2015-11-23T16:45:55+00:00"\',\n+            json.dumps(json_compatible(value))\n+        )\n \n     def test_zope_DateTime(self):\n         value = DateTime(\'2015/11/23 19:45:55.649027 GMT+3\')\n-        self.assertEquals(u\'2015-11-23T16:45:55+00:00\',\n-                          json_compatible(value))\n-        self.assertEquals(\'"2015-11-23T16:45:55+00:00"\',\n-                          json.dumps(json_compatible(value)))\n+        self.assertEqual(\n+            u\'2015-11-23T16:45:55+00:00\',\n+            json_compatible(value)\n+        )\n+        self.assertEqual(\n+            \'"2015-11-23T16:45:55+00:00"\',\n+            json.dumps(json_compatible(value))\n+        )\n \n     def test_date(self):\n         value = date(2015, 11, 23)\n-        self.assertEquals(u\'2015-11-23\', json_compatible(value))\n-        self.assertEquals(\'"2015-11-23"\', json.dumps(json_compatible(value)))\n+        self.assertEqual(u\'2015-11-23\', json_compatible(value))\n+        self.assertEqual(\'"2015-11-23"\', json.dumps(json_compatible(value)))\n \n     def test_time(self):\n         value = time(19, 45, 55)\n-        self.assertEquals(u\'19:45:55\', json_compatible(value))\n-        self.assertEquals(\'"19:45:55"\', json.dumps(json_compatible(value)))\n+        self.assertEqual(u\'19:45:55\', json_compatible(value))\n+        self.assertEqual(\'"19:45:55"\', json.dumps(json_compatible(value)))\n \n     def test_timedelta(self):\n-        self.assertEquals(9.58, json_compatible(timedelta(seconds=9.58)))\n+        self.assertEqual(9.58, json_compatible(timedelta(seconds=9.58)))\n \n     def test_broken_relation_value(self):\n-        self.assertEquals(None, json_compatible(RelationValue(12345)))\n+        self.assertEqual(None, json_compatible(RelationValue(12345)))\n \n     def test_relation_value(self):\n         portal = self.layer[\'portal\']\n@@ -181,7 +214,7 @@ def test_relation_value(self):\n             description=\'Description\',\n         )]\n         intids = getUtility(IIntIds)\n-        self.assertEquals(\n+        self.assertEqual(\n             {\'@id\': \'http://nohost/plone/doc1\',\n              \'@type\': \'DXTestDocument\',\n              \'title\': \'Document 1\',\n@@ -192,7 +225,7 @@ def test_relation_value(self):\n     def test_i18n_message(self):\n         _ = MessageFactory(\'plone.restapi.tests\')\n         msg = _(u\'message_id\', default=u\'default message\')\n-        self.assertEquals(u\'default message\', json_compatible(msg))\n+        self.assertEqual(u\'default message\', json_compatible(msg))\n \n     def test_missing_value(self):\n-        self.assertEquals(None, json_compatible(Missing.Value))\n+        self.assertEqual(None, json_compatible(Missing.Value))\ndiff --git a/src/plone/restapi/tests/test_serializer_group.py b/src/plone/restapi/tests/test_serializer_group.py\nindex 29361d68..977fb7ca 100644\n--- a/src/plone/restapi/tests/test_serializer_group.py\n+++ b/src/plone/restapi/tests/test_serializer_group.py\n@@ -49,7 +49,7 @@ def test_serialize_returns_id(self):\n         self.assertEqual(\'Plone Team\', group.get(\'title\'))\n         self.assertEqual(\'We are Plone\', group.get(\'description\'))\n         self.assertEqual(\n-            set(group[\'users\'].keys()),\n+            set(group[\'users\']),\n             set([\'@id\', \'items_total\', \'items\'])\n         )\n \ndiff --git a/src/plone/restapi/tests/test_serializer_summary.py b/src/plone/restapi/tests/test_serializer_summary.py\nindex 1ecdb6b0..235a041f 100644\n--- a/src/plone/restapi/tests/test_serializer_summary.py\n+++ b/src/plone/restapi/tests/test_serializer_summary.py\n@@ -3,6 +3,7 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.dexterity.utils import createContentInContainer\n+from plone.restapi import HAS_AT\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n@@ -100,6 +101,8 @@ class TestSummarySerializersATTypes(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\ndiff --git a/src/plone/restapi/tests/test_serializer_user.py b/src/plone/restapi/tests/test_serializer_user.py\nindex cc4d6309..b32d9041 100644\n--- a/src/plone/restapi/tests/test_serializer_user.py\n+++ b/src/plone/restapi/tests/test_serializer_user.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone import api\n from plone.restapi.interfaces import ISerializeToJson\n+from plone.restapi.serializer.user import HAS_TTW_SCHEMAS\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from zope.component import getMultiAdapter\n \n@@ -49,3 +50,33 @@ def test_serialize_roles(self):\n         self.assertIn(\'roles\', user)\n         self.assertNotIn(\'Authenticated\', user[\'roles\'])\n         self.assertNotIn(\'Anonymous\', user[\'roles\'])\n+\n+    @unittest.skipUnless(HAS_TTW_SCHEMAS, \'Requires TTW user schemas\')\n+    def test_serialize_custom_member_schema(self):\n+        from plone.app.users.browser.schemaeditor import applySchema\n+        member_schema = """\n+            <model xmlns="http://namespaces.plone.org/supermodel/schema"\n+                xmlns:form="http://namespaces.plone.org/supermodel/form"\n+                xmlns:users="http://namespaces.plone.org/supermodel/users"\n+                xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+                i18n:domain="plone">\n+              <schema name="member-fields">\n+                <field name="twitter" type="zope.schema.TextLine"\n+                         users:forms="In User Profile">\n+                  <description i18n:translate="help_twitter">\n+                    Twitter account\n+                  </description>\n+                  <required>False</required>\n+                  <title i18n:translate="label_twitter">Twitter Account</title>\n+                </field>\n+              </schema>\n+            </model>\n+        """\n+        applySchema(member_schema)\n+        user = api.user.create(\n+            email=\'donald.duck@example.com\',\n+            username=\'donald\',\n+            properties={\'twitter\': \'TheRealDuck\'})\n+        res = self.serialize(user)\n+        self.assertIn(\'twitter\', res)\n+        self.assertEqual(res[\'twitter\'], \'TheRealDuck\')\ndiff --git a/src/plone/restapi/tests/test_services.py b/src/plone/restapi/tests/test_services.py\nindex a52ecd9d..9a68830c 100644\n--- a/src/plone/restapi/tests/test_services.py\n+++ b/src/plone/restapi/tests/test_services.py\n@@ -33,6 +33,9 @@ def setUp(self):\n         self.api_session.headers.update({\'Accept\': \'application/json\'})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_document(self):\n         self.portal.invokeFactory(\n             \'Document\',\n@@ -94,8 +97,10 @@ def test_get_news_item(self):\n             title=\'News Item 1\'\n         )\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         self.portal.news1.image = NamedBlobImage(\n-            data=open(image_file, \'r\').read(),\n+            data=image_data,\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\n@@ -217,8 +222,10 @@ def test_get_file(self):  # pragma: no cover\n         pdf_file = os.path.join(\n             os.path.dirname(__file__), u\'file.pdf\'\n         )\n+        with open(pdf_file, \'rb\') as f:\n+            pdf_data = f.read()\n         self.portal.file1.file = NamedBlobFile(\n-            data=open(pdf_file, \'r\').read(),\n+            data=pdf_data,\n             contentType=\'application/pdf\',\n             filename=u\'file.pdf\'\n         )\n@@ -247,8 +254,10 @@ def test_get_image(self):  # pragma: no cover\n         self.portal.img1.title = \'Image\'\n         self.portal.img1.description = u\'An image\'\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        with open(image_file, \'rb\') as f:\n+            image_data = f.read()\n         self.portal.img1.image = NamedBlobImage(\n-            data=open(image_file, \'r\').read(),\n+            data=image_data,\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\ndiff --git a/src/plone/restapi/tests/test_services_actions.py b/src/plone/restapi/tests/test_services_actions.py\nindex da2b8b26..e90688ce 100644\n--- a/src/plone/restapi/tests/test_services_actions.py\n+++ b/src/plone/restapi/tests/test_services_actions.py\n@@ -17,7 +17,7 @@\n TEST_CATEGORY_ID = \'testcategory\'\n \n \n-class TestRegistry(unittest.TestCase):\n+class TestActions(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n@@ -66,13 +66,17 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+        self.anon_api_session.close()\n+\n     def test_actions_all_categories(self):\n         response = self.api_session.get(\'/@actions\')\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n         self.assertEqual([\'category1\', \'category2\', \'category3\'],\n-                         sorted(response.keys()))\n+                         sorted(response))\n \n     def test_actions_selected_categories(self):\n         response = self.api_session.get(\n@@ -81,7 +85,7 @@ def test_actions_selected_categories(self):\n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n         self.assertEqual([\'category1\', \'category2\'],\n-                         sorted(response.keys()))\n+                         sorted(response))\n \n     def test_actions_siteroot(self):\n         response = self.api_session.get(\'/@actions\')\ndiff --git a/src/plone/restapi/tests/test_services_breadcrumbs.py b/src/plone/restapi/tests/test_services_breadcrumbs.py\nindex b65f6618..190e6a0d 100644\n--- a/src/plone/restapi/tests/test_services_breadcrumbs.py\n+++ b/src/plone/restapi/tests/test_services_breadcrumbs.py\n@@ -35,6 +35,9 @@ def setUp(self):\n             title=u\'A document\')\n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_breadcrumbs(self):\n         response = self.api_session.get(\'/folder/doc1/@breadcrumbs\')\n \ndiff --git a/src/plone/restapi/tests/test_services_comments.py b/src/plone/restapi/tests/test_services_comments.py\nindex 06b8d13d..0eb86824 100644\n--- a/src/plone/restapi/tests/test_services_comments.py\n+++ b/src/plone/restapi/tests/test_services_comments.py\n@@ -55,6 +55,10 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+        self.user_session.close()\n+\n     def test_list_datastructure(self):\n         url = \'{}/@comments\'.format(self.doc.absolute_url())\n         response = self.api_session.get(url)\n@@ -63,7 +67,7 @@ def test_list_datastructure(self):\n         data = response.json()\n         self.assertEqual(\n             set([\'items_total\', \'items\', \'@id\']),\n-            set(data.keys())\n+            set(data)\n         )\n \n     def test_list_batching(self):\ndiff --git a/src/plone/restapi/tests/test_services_content.py b/src/plone/restapi/tests/test_services_content.py\nindex 3af4b406..54b12521 100644\n--- a/src/plone/restapi/tests/test_services_content.py\n+++ b/src/plone/restapi/tests/test_services_content.py\n@@ -34,6 +34,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_response(self):\n         response = self.api_session.get(self.doc.absolute_url())\n         self.assertIn(\'version\', response.json())\ndiff --git a/src/plone/restapi/tests/test_services_controlpanels.py b/src/plone/restapi/tests/test_services_controlpanels.py\nindex aed41985..4955e5da 100644\n--- a/src/plone/restapi/tests/test_services_controlpanels.py\n+++ b/src/plone/restapi/tests/test_services_controlpanels.py\n@@ -32,6 +32,9 @@ def setUp(self):\n         self.api_session.headers.update({\'Accept\': \'application/json\'})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_listing(self):\n         # Do we get a list with at least one item?\n         response = self.api_session.get(\'/@controlpanels\')\ndiff --git a/src/plone/restapi/tests/test_services_email_notification.py b/src/plone/restapi/tests/test_services_email_notification.py\nindex af96b603..9bd05135 100644\n--- a/src/plone/restapi/tests/test_services_email_notification.py\n+++ b/src/plone/restapi/tests/test_services_email_notification.py\n@@ -21,7 +21,7 @@\n     PLONE5 = True\n \n \n-@unittest.skipIf(not PLONE5, \'email notification not implemented for Plone < 5.\') # noqa\n+@unittest.skipIf(not PLONE5, \'email notification not implemented for Plone < 5.\')  # noqa\n class EmailNotificationEndpoint(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n@@ -46,6 +46,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_email_notification(self):\n         response = self.api_session.post(\n             \'/@email-notification\',\n@@ -55,7 +58,7 @@ def test_email_notification(self):\n             })\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 204)\n+        self.assertEqual(response.status_code, 204)\n         self.assertTrue(\'Subject: [No Subject]\' in\n                         self.mailhost.messages[0])\n         self.assertTrue(\'To: info@plone.org\' in\n@@ -76,7 +79,7 @@ def test_email_notification_all_parameters(self):\n             })\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 204)\n+        self.assertEqual(response.status_code, 204)\n         self.assertTrue(\'=?utf-8?q?This_is_the_subject\' in\n                         self.mailhost.messages[0])\n         self.assertTrue(\'To: info@plone.org\' in\ndiff --git a/src/plone/restapi/tests/test_services_email_send.py b/src/plone/restapi/tests/test_services_email_send.py\nindex 29c31090..9fe77368 100644\n--- a/src/plone/restapi/tests/test_services_email_send.py\n+++ b/src/plone/restapi/tests/test_services_email_send.py\n@@ -46,6 +46,10 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+        self.anon_api_session.close()\n+\n     def test_email_send(self):\n         response = self.api_session.post(\n             \'/@email-send\',\n@@ -56,7 +60,7 @@ def test_email_send(self):\n             })\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 204)\n+        self.assertEqual(response.status_code, 204)\n         self.assertTrue(\'Subject: =?utf-8?q?A_portal_user_via_Plone_site?=\' in\n                         self.mailhost.messages[0])\n         self.assertTrue(\'From: info@plone.org\' in\n@@ -78,7 +82,7 @@ def test_email_send_all_parameters(self):\n             })\n         transaction.commit()\n \n-        self.assertEquals(response.status_code, 204)\n+        self.assertEqual(response.status_code, 204)\n         self.assertTrue(\'=?utf-8?q?This_is_the_subject\' in\n                         self.mailhost.messages[0])\n         self.assertTrue(\'From: info@plone.org\' in\n@@ -101,4 +105,4 @@ def test_email_send_anonymous(self):\n                 \'subject\': \'This is the subject.\'\n             })\n \n-        self.assertEquals(response.status_code, 401)\n+        self.assertEqual(response.status_code, 401)\ndiff --git a/src/plone/restapi/tests/test_services_groups.py b/src/plone/restapi/tests/test_services_groups.py\nindex 59ebff50..d4735d86 100644\n--- a/src/plone/restapi/tests/test_services_groups.py\n+++ b/src/plone/restapi/tests/test_services_groups.py\n@@ -38,6 +38,9 @@ def setUp(self):\n                             description=properties[\'description\'])\n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_list_groups(self):\n         response = self.api_session.get(\'/@groups\')\n \n@@ -59,6 +62,8 @@ def test_list_groups(self):\n         self.assertEqual(\'Plone Team\', ptgroup.get(\'title\'))\n         self.assertEqual(\'We are Plone\', ptgroup.get(\'description\'))\n \n+        self.assertEqual(ptgroup.get(\'roles\'), [\'Authenticated\'])\n+\n         # We don\'t want the group members listed in the overview as there\n         # might be loads.\n         self.assertTrue(\ndiff --git a/src/plone/restapi/tests/test_services_history.py b/src/plone/restapi/tests/test_services_history.py\nindex e3856e85..0d262098 100644\n--- a/src/plone/restapi/tests/test_services_history.py\n+++ b/src/plone/restapi/tests/test_services_history.py\n@@ -9,6 +9,7 @@\n \n import unittest\n import transaction\n+import six\n \n \n class TestHistoryEndpoint(unittest.TestCase):\n@@ -39,6 +40,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_types(self):\n         # Check if we have all history types in our test setup\n         response = self.api_session.get(self.endpoint_url)\n@@ -79,11 +83,11 @@ def test_get_datastructure(self):\n             self.assertIn(item[\'type\'], [\'versioning\', \'workflow\'])\n \n             if item[\'type\'] == \'versioning\':\n-                self.assertEqual(set(item.keys()), set(history_keys))\n+                self.assertEqual(set(item), set(history_keys))\n             else:\n-                self.assertEqual(set(item.keys()), set(workflow_keys))\n+                self.assertEqual(set(item), set(workflow_keys))\n \n-            self.assertEqual(set(item[\'actor\'].keys()), set(actor_keys))\n+            self.assertEqual(set(item[\'actor\']), set(actor_keys))\n \n             self.assertIsNotNone(item[\'action\'])\n \n@@ -103,7 +107,7 @@ def test_time_field(self):\n         response = self.api_session.get(url)\n \n         for item in response.json():\n-            self.assertTrue(isinstance(item[\'time\'], basestring))\n+            self.assertTrue(isinstance(item[\'time\'], six.string_types))\n \n     def test_get_historical_link(self):\n         # The @id field should link to @history/version.\n@@ -116,7 +120,7 @@ def test_get_historical_link(self):\n                     item[\'@id\'].endswith(\'@history/\' + str(item[\'version\']))\n                 )\n             else:\n-                self.assertNotIn(\'@id\', item.keys())\n+                self.assertNotIn(\'@id\', list(item))\n \n     def test_explicit_current(self):\n         # Does version=current get the current version\n@@ -164,6 +168,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_actions_are_translated(self):\n         url = self.doc.absolute_url() + \'/@history\'\n         response = self.api_session.get(url)\ndiff --git a/src/plone/restapi/tests/test_services_navigation.py b/src/plone/restapi/tests/test_services_navigation.py\nindex 4a25f850..e7c08903 100644\n--- a/src/plone/restapi/tests/test_services_navigation.py\n+++ b/src/plone/restapi/tests/test_services_navigation.py\n@@ -55,6 +55,9 @@ def setUp(self):\n             title=u\'A document\')\n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_navigation_with_no_params_gets_only_top_level(self):\n         response = self.api_session.get(\'/folder/@navigation\')\n \ndiff --git a/src/plone/restapi/tests/test_services_principals.py b/src/plone/restapi/tests/test_services_principals.py\nindex b1482a4c..2aaaf608 100644\n--- a/src/plone/restapi/tests/test_services_principals.py\n+++ b/src/plone/restapi/tests/test_services_principals.py\n@@ -52,6 +52,9 @@ def setUp(self):\n                             description=properties[\'description\'])\n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_principals(self):\n         response = self.api_session.get(\n             \'/@principals\',\n@@ -63,8 +66,8 @@ def test_get_principals(self):\n \n         response = response.json()\n         self.assertEqual(2, len(response))\n-        self.assertEquals(1, len(response[\'users\']))\n-        self.assertEquals(\'noam\', response[\'users\'][0][\'id\'])\n+        self.assertEqual(1, len(response[\'users\']))\n+        self.assertEqual(\'noam\', response[\'users\'][0][\'id\'])\n \n         response = self.api_session.get(\n             \'/@principals\',\n@@ -76,8 +79,8 @@ def test_get_principals(self):\n \n         response = response.json()\n         self.assertEqual(2, len(response))\n-        self.assertEquals(1, len(response[\'groups\']))\n-        self.assertEquals(\'ploneteam\', response[\'groups\'][0][\'id\'])\n+        self.assertEqual(1, len(response[\'groups\']))\n+        self.assertEqual(\'ploneteam\', response[\'groups\'][0][\'id\'])\n \n     def test_get_principals_response_both(self):\n         self.user = api.user.create(\n@@ -96,7 +99,7 @@ def test_get_principals_response_both(self):\n \n         response = response.json()\n         self.assertEqual(2, len(response))\n-        self.assertEquals(1, len(response[\'users\']))\n-        self.assertEquals(1, len(response[\'groups\']))\n-        self.assertEquals(\'plone.user\', response[\'users\'][0][\'id\'])\n-        self.assertEquals(\'ploneteam\', response[\'groups\'][0][\'id\'])\n+        self.assertEqual(1, len(response[\'users\']))\n+        self.assertEqual(1, len(response[\'groups\']))\n+        self.assertEqual(\'plone.user\', response[\'users\'][0][\'id\'])\n+        self.assertEqual(\'ploneteam\', response[\'groups\'][0][\'id\'])\ndiff --git a/src/plone/restapi/tests/test_services_tiles.py b/src/plone/restapi/tests/test_services_tiles.py\nindex 74f96bac..7e6adf17 100644\n--- a/src/plone/restapi/tests/test_services_tiles.py\n+++ b/src/plone/restapi/tests/test_services_tiles.py\n@@ -75,29 +75,32 @@ def setUp(self):\n         provideAdapter(SampleTile, (Interface, Interface),\n                        IBasicTile, name=u\'sample.tile\')\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_available_tiles(self):\n         response = self.api_session.get(\'/@tiles\')\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        self.assertEquals(len(response), 1)\n-        self.assertEquals(\n+        self.assertEqual(len(response), 1)\n+        self.assertEqual(\n             response[0][\'@id\'],\n             self.portal_url + u\'/@tiles/sample.tile\')\n-        self.assertEquals(response[0][\'title\'], u\'Sample tile\')\n-        self.assertEquals(\n+        self.assertEqual(response[0][\'title\'], u\'Sample tile\')\n+        self.assertEqual(\n             response[0][\'description\'], u\'A tile used for testing\')\n-        self.assertEquals(response[0][\'icon\'], \'testicon\')\n+        self.assertEqual(response[0][\'icon\'], \'testicon\')\n \n     def test_get_tile(self):\n         response = self.api_session.get(\'/@tiles/sample.tile\')\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        self.assertEquals(response[\'title\'], u\'Sample tile\')\n-        self.assertEquals(\n+        self.assertEqual(response[\'title\'], u\'Sample tile\')\n+        self.assertEqual(\n             response[\'properties\'][\'title\'][\'title\'], u\'Title\')\n-        self.assertEquals(\n+        self.assertEqual(\n             response[\'properties\'][\'title\'][\'type\'], u\'string\')\n \n     def test_patch_tiles_list(self):\n@@ -115,7 +118,7 @@ def test_patch_tiles_list(self):\n         response = self.api_session.get(\'/doc\')\n         response = response.json()\n \n-        self.assertEquals(\n+        self.assertEqual(\n             response[\'tiles\'],\n             {\n                 \'uuid1\': {\'@type\': \'title\'},\n@@ -137,7 +140,7 @@ def test_patch_tiles_layout(self):\n         response = self.api_session.get(\'/doc\')\n         response = response.json()\n \n-        self.assertEquals(\n+        self.assertEqual(\n             response[\'tiles_layout\'],\n             {\n                 "items": ["#uuid1", "#uuid2"]\ndiff --git a/src/plone/restapi/tests/test_services_types.py b/src/plone/restapi/tests/test_services_types.py\nindex ec7c37cd..bb83e4f1 100644\n--- a/src/plone/restapi/tests/test_services_types.py\n+++ b/src/plone/restapi/tests/test_services_types.py\n@@ -26,6 +26,9 @@ def setUp(self):\n         self.api_session.headers.update({\'Accept\': \'application/json\'})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_types(self):\n         response = self.api_session.get(\n             \'{}/@types\'.format(self.portal.absolute_url())\n@@ -41,7 +44,7 @@ def test_get_types(self):\n         )\n         for item in response.json():\n             self.assertEqual(\n-                sorted(item.keys()),\n+                sorted(item),\n                 sorted([\'@id\', \'title\', \'addable\'])\n             )\n \n@@ -112,6 +115,11 @@ def test_file_type(self):\n         self.assertIn(\n             \'file.data\', response[\'properties\'][\'file\'][\'properties\'])\n \n+    def test_event_type(self):\n+        response = self.api_session.get(\'/@types/Event\')\n+        response = response.json()\n+        self.assertIn(\'title\', response[\'properties\'][\'start\'])\n+\n     def test_addable_types_for_non_manager_user(self):\n         user = api.user.create(\n             email=\'noam.chomsky@example.com\',\n@@ -157,14 +165,14 @@ def test_addable_types_for_non_manager_user(self):\n         response = self.api_session.get(\'/folder_cant_add/@types\')\n         response = response.json()\n \n-        self.assertEquals(\n+        self.assertEqual(\n             len([a for a in response if a[\'addable\']]), 0)\n \n         # and in the root Plone site there\'s no addable types\n         response = self.api_session.get(\'/@types\')\n         response = response.json()\n \n-        self.assertEquals(\n+        self.assertEqual(\n             len([a for a in response if a[\'addable\']]), 0)\n \n \n@@ -184,6 +192,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_types_translated(self):\n         response = self.api_session.get(\n             \'{}/@types\'.format(self.portal.absolute_url())\n@@ -191,7 +202,7 @@ def test_get_types_translated(self):\n \n         self.assertEqual(response.status_code, 200)\n \n-        self.assertItemsEqual([\n+        self.assertEqual({\n             u\'Archivo\',\n             u\'Carpeta\',\n             u\'Colecci\xc3\xb3n\',\n@@ -200,5 +211,5 @@ def test_get_types_translated(self):\n             u\'Evento\',\n             u\'Imagen\',\n             u\'Noticia\',\n-            u\'P\xc3\xa1gina\'],\n-            [item[\'title\'] for item in response.json()])\n+            u\'P\xc3\xa1gina\'},\n+            set(item[\'title\'] for item in response.json()))\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex 228ddae6..92097918 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -67,6 +67,10 @@ def setUp(self):\n         )\n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+        self.anon_api_session.close()\n+\n     def test_list_users(self):\n         response = self.api_session.get(\'/@users\')\n \n@@ -95,6 +99,7 @@ def test_list_users_without_being_manager(self):\n \n         response = noam_api_session.get(\'/@users\')\n         self.assertEqual(response.status_code, 401)\n+        noam_api_session.close()\n \n     def test_list_users_as_anonymous(self):\n \n@@ -292,6 +297,28 @@ def test_add_anon_no_roles(self):\n         fields = [x[\'field\'] for x in errors]\n         self.assertEqual([\'roles\'], fields)\n \n+    def test_add_user_with_uuid_as_userid_enabled(self):\n+        # enable use_email_as_login\n+        security_settings = getAdapter(self.portal, ISecuritySchema)\n+        security_settings.use_email_as_login = True\n+        security_settings.use_uuid_as_userid = True\n+        transaction.commit()\n+        response = self.api_session.post(\n+            \'/@users\',\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": "secret"\n+            },\n+        )\n+        transaction.commit()\n+\n+        self.assertEqual(201, response.status_code)\n+        user_id = response.json()[\'id\']\n+        user = api.user.get(userid=user_id)\n+        self.assertTrue(user)\n+        self.assertEqual(\'howard.zinn@example.com\', user.getUserName())\n+        self.assertEqual(\'howard.zinn@example.com\', user.getProperty(\'email\'))\n+\n     def test_get_user(self):\n         response = self.api_session.get(\'/@users/noam\')\n \n@@ -321,6 +348,7 @@ def test_get_other_user_info_when_logged_in(self):\n \n         response = noam_api_session.get(\'/@users/otheruser\')\n         self.assertEqual(response.status_code, 401)\n+        noam_api_session.close()\n \n     def test_get_search_user_with_filter(self):\n         response = self.api_session.post(\n@@ -384,6 +412,7 @@ def test_get_search_user_with_filter_as_unauthorized_user(self):\n \n         response = noam_api_session.get(\'/@users\', params={\'query\': \'howa\'})\n         self.assertEqual(response.status_code, 401)\n+        noam_api_session.close()\n \n     def test_get_non_existing_user(self):\n         response = self.api_session.get(\'/@users/non-existing-user\')\n@@ -597,6 +626,107 @@ def test_reset_with_token(self):\n                                                     {})\n         self.assertTrue(authed)\n \n+    def test_reset_with_uuid_as_userid_and_login_email_using_id(self):\n+        # enable use_email_as_login\n+        security_settings = getAdapter(self.portal, ISecuritySchema)\n+        security_settings.use_email_as_login = True\n+        security_settings.use_uuid_as_userid = True\n+        transaction.commit()\n+\n+        response = self.api_session.post(\n+            \'/@users\',\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": "secret"\n+            },\n+        )\n+        transaction.commit()\n+\n+        self.assertEqual(201, response.status_code)\n+        user_id = response.json()[\'id\']\n+        user = api.user.get(userid=user_id)\n+        self.assertTrue(user)\n+\n+        reset_tool = getToolByName(self.portal, \'portal_password_reset\')\n+        reset_info = reset_tool.requestReset(user.id)\n+        token = reset_info[\'randomstring\']\n+        transaction.commit()\n+\n+        payload = {\'reset_token\': token,\n+                   \'new_password\': \'new_password\'}\n+        response = self.api_session.post(\n+            \'/@users/{}/reset-password\'.format(user.id),\n+            json=payload)\n+\n+        self.assertEqual(response.status_code, 200)\n+\n+    def test_reset_with_uuid_as_userid_and_login_email_using_mail(self):\n+        # enable use_email_as_login\n+        security_settings = getAdapter(self.portal, ISecuritySchema)\n+        security_settings.use_email_as_login = True\n+        security_settings.use_uuid_as_userid = True\n+        transaction.commit()\n+\n+        response = self.api_session.post(\n+            \'/@users\',\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": "secret"\n+            },\n+        )\n+        transaction.commit()\n+\n+        self.assertEqual(201, response.status_code)\n+        user_id = response.json()[\'id\']\n+        user = api.user.get(userid=user_id)\n+        self.assertTrue(user)\n+\n+        reset_tool = getToolByName(self.portal, \'portal_password_reset\')\n+        reset_info = reset_tool.requestReset(user.id)\n+        token = reset_info[\'randomstring\']\n+        transaction.commit()\n+\n+        payload = {\'reset_token\': token,\n+                   \'new_password\': \'new_password\'}\n+        response = self.api_session.post(\n+            \'/@users/{}/reset-password\'.format(user.getUserName()),\n+            json=payload)\n+\n+        self.assertEqual(response.status_code, 200)\n+\n+    def test_reset_and_login_email_using_mail(self):\n+        # enable use_email_as_login\n+        security_settings = getAdapter(self.portal, ISecuritySchema)\n+        security_settings.use_email_as_login = True\n+        transaction.commit()\n+\n+        response = self.api_session.post(\n+            \'/@users\',\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": "secret"\n+            },\n+        )\n+        transaction.commit()\n+\n+        self.assertEqual(201, response.status_code)\n+        user_id = response.json()[\'id\']\n+        user = api.user.get(userid=user_id)\n+        self.assertTrue(user)\n+\n+        reset_tool = getToolByName(self.portal, \'portal_password_reset\')\n+        reset_info = reset_tool.requestReset(user.id)\n+        token = reset_info[\'randomstring\']\n+        transaction.commit()\n+\n+        payload = {\'reset_token\': token,\n+                   \'new_password\': \'new_password\'}\n+        response = self.api_session.post(\n+            \'/@users/{}/reset-password\'.format(user.getUserName()),\n+            json=payload)\n+\n+        self.assertEqual(response.status_code, 200)\n+\n     def test_delete_user(self):\n         response = self.api_session.delete(\'/@users/noam\')\n         transaction.commit()\n@@ -727,7 +857,7 @@ def test_anonymous_with_enable_user_sets_only_member_role(self):\n \n         response = response.json()\n         self.assertIn(\'Member\', response[\'roles\'])\n-        self.assertEquals(1, len(response[\'roles\']))\n+        self.assertEqual(1, len(response[\'roles\']))\n \n     def test_add_user_no_roles_sets_member_as_sensible_default(self):\n         response = self.api_session.post(\n@@ -745,4 +875,4 @@ def test_add_user_no_roles_sets_member_as_sensible_default(self):\n         response = response.json()\n \n         self.assertIn(\'Member\', response[\'roles\'])\n-        self.assertEquals(1, len(response[\'roles\']))\n+        self.assertEqual(1, len(response[\'roles\']))\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex d5e63207..0fc9386f 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -132,10 +132,10 @@ def test_get_all_vocabularies(self):\n         response = response.json()\n         self.assertTrue(len(response) > 0)\n         self.assertTrue(\n-            \'@id\' in response[0].keys()\n+            \'@id\' in list(response[0])\n         )\n         self.assertTrue(\n-            \'title\' in response[0].keys()\n+            \'title\' in list(response[0])\n         )\n         self.assertEqual(\n             [\n@@ -184,6 +184,7 @@ def test_context_vocabulary(self):\n             })\n \n     def tearDown(self):\n+        self.api_session.close()\n         gsm = getGlobalSiteManager()\n         gsm.unregisterUtility(provided=IVocabularyFactory,\n                               name=\'plone.restapi.tests.test_vocabulary\')\ndiff --git a/src/plone/restapi/tests/test_setup.py b/src/plone/restapi/tests/test_setup.py\nindex f10c677d..20719007 100644\n--- a/src/plone/restapi/tests/test_setup.py\n+++ b/src/plone/restapi/tests/test_setup.py\n@@ -8,6 +8,13 @@\n from plone.restapi import PROJECT_NAME\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n+try:\n+    from Products.CMFPlone.utils import get_installer\n+except ImportError:  # Plone < 5.1\n+    HAS_INSTALLER = False\n+else:\n+    HAS_INSTALLER = True\n+\n \n class TestInstall(unittest.TestCase):\n \n@@ -16,15 +23,20 @@ class TestInstall(unittest.TestCase):\n     def setUp(self):\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n-        self.qi_tool = getToolByName(self.portal, \'portal_quickinstaller\')\n \n     def test_product_is_installed(self):\n         """ Validate that our products GS profile has been run and the product\n             installed\n         """\n-        installed = [p[\'id\'] for p in self.qi_tool.listInstalledProducts()]\n-        self.assertTrue(PROJECT_NAME in installed,\n-                        \'package appears not to have been installed\')\n+        if HAS_INSTALLER:\n+            qi = get_installer(self.portal)\n+            installed = qi.is_product_installed(PROJECT_NAME)\n+        else:\n+            qi_tool = getToolByName(self.portal, \'portal_quickinstaller\')\n+            installed = PROJECT_NAME in [\n+                p[\'id\'] for p in qi_tool.listInstalledProducts()]\n+        self.assertTrue(\n+            installed, \'package appears not to have been installed\')\n \n \n class TestUninstall(unittest.TestCase):\n@@ -34,13 +46,19 @@ class TestUninstall(unittest.TestCase):\n     def setUp(self):\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n-        self.qi_tool = getToolByName(self.portal, \'portal_quickinstaller\')\n \n-        with api.env.adopt_roles([\'Manager\']):\n-            self.qi_tool.uninstallProducts(products=[PROJECT_NAME])\n+        if HAS_INSTALLER:\n+            qi = get_installer(self.portal)\n+            qi.uninstall_product(PROJECT_NAME)\n+            self.installed = qi.is_product_installed(PROJECT_NAME)\n+        else:\n+            qi_tool = getToolByName(self.portal, \'portal_quickinstaller\')\n+            with api.env.adopt_roles([\'Manager\']):\n+                qi_tool.uninstallProducts(products=[PROJECT_NAME])\n+            self.installed = qi_tool.isProductInstalled(PROJECT_NAME)\n \n     def test_uninstalled(self):\n-        self.assertFalse(self.qi_tool.isProductInstalled(PROJECT_NAME))\n+        self.assertFalse(self.installed)\n \n     def test_addon_layer_removed(self):\n         layers = [l.getName() for l in registered_layers()]\ndiff --git a/src/plone/restapi/tests/test_site_deserializer.py b/src/plone/restapi/tests/test_site_deserializer.py\nindex 4374a46b..4b7a81f0 100644\n--- a/src/plone/restapi/tests/test_site_deserializer.py\n+++ b/src/plone/restapi/tests/test_site_deserializer.py\n@@ -2,8 +2,10 @@\n from plone.restapi.interfaces import IDeserializeFromJson\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from plone.restapi.tests.mixin_ordering import OrderingMixin\n+from six.moves import range\n from zope.component import getMultiAdapter\n \n+import json\n import unittest\n \n \n@@ -34,6 +36,45 @@ def deserialize(self, body=\'{}\', validate_all=False, context=None):\n \n     def test_set_layout(self):\n         current_layout = self.portal.getLayout()\n-        self.assertNotEquals(current_layout, "my_new_layout")\n+        self.assertNotEqual(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n-        self.assertEquals(\'my_new_layout\', self.portal.getLayout())\n+        self.assertEqual(\'my_new_layout\', self.portal.getLayout())\n+\n+\n+class TestSiteRootDeserializer(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n+\n+    def deserialize(self, body=\'{}\', validate_all=False, context=None):\n+        context = context or self.portal\n+        self.request[\'BODY\'] = body\n+        deserializer = getMultiAdapter((context, self.request),\n+                                       IDeserializeFromJson)\n+        return deserializer(validate_all=validate_all)\n+\n+    def test_opt_in_tiles_deserializer(self):\n+        tiles = {\n+            "0358abe2-b4f1-463d-a279-a63ea80daf19": {\n+                "@type": "description"\n+            },\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {\n+                "@type": "title"\n+            }\n+        }\n+        tiles_layout = {\n+            "items": [\n+                "07c273fc-8bfc-4e7d-a327-d513e5a945bb",\n+                "0358abe2-b4f1-463d-a279-a63ea80daf19"\n+            ]\n+        }\n+\n+        self.deserialize(\n+            body=\'{{"tiles": {}, "tiles_layout": {}}}\'.format(\n+                json.dumps(tiles), json.dumps(tiles_layout)))\n+\n+        self.assertEqual(tiles, json.loads(self.portal.tiles))\n+        self.assertEqual(tiles_layout, json.loads(self.portal.tiles_layout))\ndiff --git a/src/plone/restapi/tests/test_site_serializer.py b/src/plone/restapi/tests/test_site_serializer.py\nindex 02903ce7..8d0cb15f 100644\n--- a/src/plone/restapi/tests/test_site_serializer.py\n+++ b/src/plone/restapi/tests/test_site_serializer.py\n@@ -34,4 +34,4 @@ def test_serializer_includes_title(self):\n     def test_get_is_folderish(self):\n         obj = self.serialize()\n         self.assertIn(\'is_folderish\', obj)\n-        self.assertEquals(True, obj[\'is_folderish\'])\n+        self.assertEqual(True, obj[\'is_folderish\'])\ndiff --git a/src/plone/restapi/tests/test_translations.py b/src/plone/restapi/tests/test_translations.py\nindex 29ae5da7..eccd3025 100644\n--- a/src/plone/restapi/tests/test_translations.py\n+++ b/src/plone/restapi/tests/test_translations.py\n@@ -31,9 +31,9 @@ def setUp(self):\n         alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=\'Test document\')\n+            self.portal[\'en\'], \'Document\', title=u\'Test document\')\n         self.es_content = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=\'Test document\')\n+            self.portal[\'es\'], \'Document\', title=u\'Test document\')\n         ITranslationManager(self.en_content).register_translation(\n             \'es\', self.es_content)\n \n@@ -71,9 +71,9 @@ def setUp(self):\n         alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=\'Test document\')\n+            self.portal[\'en\'], \'Document\', title=u\'Test document\')\n         self.es_content = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=\'Test document\')\n+            self.portal[\'es\'], \'Document\', title=u\'Test document\')\n         transaction.commit()\n \n     def test_translation_linking_succeeds(self):\n@@ -138,9 +138,9 @@ def setUp(self):\n         alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=\'Test document\')\n+            self.portal[\'en\'], \'Document\', title=u\'Test document\')\n         self.es_content = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=\'Test document\')\n+            self.portal[\'es\'], \'Document\', title=u\'Test document\')\n         ITranslationManager(self.en_content).register_translation(\n             \'es\', self.es_content)\n         transaction.commit()\n@@ -159,7 +159,7 @@ def test_translation_unlinking_succeeds(self):\n         manager = ITranslationManager(self.en_content)\n         self.assertNotIn(\n             ILanguage(self.es_content).get_language(),\n-            manager.get_translations().keys())\n+            list(manager.get_translations()))\n \n     def test_calling_endpoint_without_language_gives_400(self):\n         response = requests.delete(\ndiff --git a/src/plone/restapi/tests/test_tus.py b/src/plone/restapi/tests/test_tus.py\nindex dfb12dbd..8a2eb839 100644\n--- a/src/plone/restapi/tests/test_tus.py\n+++ b/src/plone/restapi/tests/test_tus.py\n@@ -1,24 +1,29 @@\n # -*- coding: utf-8 -*-\n-from DateTime import DateTime\n-from StringIO import StringIO\n from base64 import b64encode\n+from DateTime import DateTime\n+from OFS.interfaces import IObjectWillBeAddedEvent\n from plone import api\n+from plone.app.testing import login\n+from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n-from plone.app.testing import login\n-from plone.app.testing import setRoles\n from plone.rest.cors import CORSPolicy\n from plone.rest.interfaces import ICORSPolicy\n+from plone.restapi import HAS_AT\n from plone.restapi.services.content.tus import TUSUpload\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n+from six import BytesIO\n from zope.component import getGlobalSiteManager\n from zope.component import provideAdapter\n from zope.interface import Interface\n+from zope.lifecycleevent.interfaces import IObjectAddedEvent\n+from zope.lifecycleevent.interfaces import IObjectCreatedEvent\n+from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n from zope.publisher.interfaces.browser import IBrowserRequest\n \n import os\n@@ -27,7 +32,7 @@\n import transaction\n import unittest\n \n-UPLOAD_DATA = \'abcdefgh\'\n+UPLOAD_DATA = b\'abcdefgh\'\n UPLOAD_MIMETYPE = \'text/plain\'\n UPLOAD_FILENAME = \'test.txt\'\n UPLOAD_LENGTH = len(UPLOAD_DATA)\n@@ -36,6 +41,22 @@\n UPLOAD_PDF_FILENAME = \'file.pdf\'\n \n \n+def _base64_str(s):\n+    if not isinstance(s, bytes):\n+        s = s.encode(\'utf-8\')\n+    s = b64encode(s)\n+    if not isinstance(s, str):\n+        s = s.decode(\'utf-8\')\n+    return s\n+\n+\n+def _prepare_metadata(filename, content_type):\n+    return \'filename {},content-type {}\'.format(\n+        _base64_str(filename),\n+        _base64_str(content_type),\n+    )\n+\n+\n class TestTUS(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n@@ -108,9 +129,7 @@ def test_tus_post_initialization(self):\n         upload.cleanup()\n \n     def test_tus_post_initialization_with_metadata(self):\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME),\n-            b64encode(UPLOAD_MIMETYPE))\n+        metadata = _prepare_metadata(UPLOAD_FILENAME, UPLOAD_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -245,7 +264,7 @@ def test_tus_patch_unfinished_upload_returns_expires_header(self):\n             headers={\'Tus-Resumable\': \'1.0.0\',\n                      \'Content-Type\': \'application/offset+octet-stream\',\n                      \'Upload-Offset\': \'0\'},\n-            data=StringIO(\'abcdefghijkl\'))\n+            data=BytesIO(b\'abcdefghijkl\'))\n         self.assertEqual(204, response.status_code)\n         self.assertIn(\'Upload-Expires\', response.headers)\n         tus.cleanup()\n@@ -260,14 +279,14 @@ def test_tus_patch_non_primary_field(self):\n             headers={\'Tus-Resumable\': \'1.0.0\',\n                      \'Content-Type\': \'application/offset+octet-stream\',\n                      \'Upload-Offset\': \'0\'},\n-            data=StringIO(\'abcdefghijkl\'))\n+            data=BytesIO(b\'abcdefghijkl\'))\n \n         self.assertEqual(204, response.status_code)\n         transaction.commit()\n         self.assertEqual(1, len(self.folder.objectIds()))\n         id_ = self.folder.objectIds()[0]\n         self.assertEqual(\n-            \'abcdefghijkl\', self.folder[id_].test_namedblobfile_field.data)\n+            b\'abcdefghijkl\', self.folder[id_].test_namedblobfile_field.data)\n         tus.cleanup()\n \n     def test_patch_in_create_mode_without_add_permission_raises_401(self):\n@@ -279,7 +298,7 @@ def test_patch_in_create_mode_without_add_permission_raises_401(self):\n             headers={\'Tus-Resumable\': \'1.0.0\',\n                      \'Content-Type\': \'application/offset+octet-stream\',\n                      \'Upload-Offset\': \'0\'},\n-            data=StringIO(\'abcdefghijkl\'))\n+            data=BytesIO(b\'abcdefghijkl\'))\n         self.assertEqual(401, response.status_code)\n         tus.cleanup()\n \n@@ -292,7 +311,7 @@ def test_patch_in_replace_mode_without_modify_permission_raises_401(self):\n             headers={\'Tus-Resumable\': \'1.0.0\',\n                      \'Content-Type\': \'application/offset+octet-stream\',\n                      \'Upload-Offset\': \'0\'},\n-            data=StringIO(\'abcdefghijkl\'))\n+            data=BytesIO(b\'abcdefghijkl\'))\n         self.assertEqual(401, response.status_code)\n         tus.cleanup()\n \n@@ -301,9 +320,7 @@ def test_tus_can_upload_pdf_file(self):\n         pdf_file_path = os.path.join(os.path.dirname(__file__),\n                                      UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_PDF_FILENAME),\n-            b64encode(UPLOAD_PDF_MIMETYPE))\n+        metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -314,13 +331,15 @@ def test_tus_can_upload_pdf_file(self):\n         location = response.headers[\'Location\']\n \n         # upload the data with PATCH\n-        pdf_file = open(pdf_file_path, \'rb\')\n-        response = self.api_session.patch(\n-            location,\n-            headers={\'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\',\n-                     \'Tus-Resumable\': \'1.0.0\'},\n-            data=pdf_file)\n+        with open(pdf_file_path, \'rb\') as pdf_file:\n+            response = self.api_session.patch(\n+                location,\n+                headers={\n+                    \'Content-Type\': \'application/offset+octet-stream\',\n+                    \'Upload-Offset\': \'0\',\n+                    \'Tus-Resumable\': \'1.0.0\'\n+                },\n+                data=pdf_file)\n         self.assertEqual(response.status_code, 204)\n \n         transaction.commit()\n@@ -328,9 +347,7 @@ def test_tus_can_upload_pdf_file(self):\n \n     def test_tus_can_upload_text_file(self):\n         # initialize the upload with POST\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME),\n-            b64encode(UPLOAD_MIMETYPE))\n+        metadata = _prepare_metadata(UPLOAD_FILENAME, UPLOAD_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -346,7 +363,7 @@ def test_tus_can_upload_text_file(self):\n             headers={\'Content-Type\': \'application/offset+octet-stream\',\n                      \'Upload-Offset\': \'0\',\n                      \'Tus-Resumable\': \'1.0.0\'},\n-            data=StringIO(UPLOAD_DATA))\n+            data=BytesIO(UPLOAD_DATA))\n         self.assertEqual(response.status_code, 204)\n \n     def test_tus_can_replace_pdf_file(self):\n@@ -360,9 +377,7 @@ def test_tus_can_replace_pdf_file(self):\n         pdf_file_path = os.path.join(os.path.dirname(__file__),\n                                      UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_PDF_FILENAME),\n-            b64encode(UPLOAD_PDF_MIMETYPE))\n+        metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n             \'{}/@tus-replace\'.format(self.file.absolute_url()),\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -373,20 +388,131 @@ def test_tus_can_replace_pdf_file(self):\n         location = response.headers[\'Location\']\n \n         # upload the data with PATCH\n-        pdf_file = open(pdf_file_path, \'rb\')\n-        response = self.api_session.patch(\n-            location,\n-            headers={\'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\',\n-                     \'Tus-Resumable\': \'1.0.0\'},\n-            data=pdf_file)\n+        with open(pdf_file_path, \'rb\') as pdf_file:\n+            response = self.api_session.patch(\n+                location,\n+                headers={\n+                    \'Content-Type\': \'application/offset+octet-stream\',\n+                    \'Upload-Offset\': \'0\',\n+                    \'Tus-Resumable\': \'1.0.0\'\n+                },\n+                data=pdf_file)\n         self.assertEqual(response.status_code, 204)\n \n         transaction.commit()\n         self.assertEqual(UPLOAD_PDF_FILENAME, self.file.file.filename)\n         self.assertEqual(pdf_file_size, self.file.file.size)\n \n+    def test_create_with_tus_fires_proper_events(self):\n+        sm = getGlobalSiteManager()\n+        fired_events = []\n+\n+        def record_event(event):\n+            fired_events.append(event.__class__.__name__)\n+\n+        sm.registerHandler(record_event, (IObjectCreatedEvent,))\n+        sm.registerHandler(record_event, (IObjectWillBeAddedEvent,))\n+        sm.registerHandler(record_event, (IObjectAddedEvent,))\n+        sm.registerHandler(record_event, (IObjectModifiedEvent,))\n+\n+        # initialize the upload with POST\n+        pdf_file_path = os.path.join(os.path.dirname(__file__),\n+                                     UPLOAD_PDF_FILENAME)\n+        pdf_file_size = os.path.getsize(pdf_file_path)\n+        metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n+        response = self.api_session.post(\n+            self.upload_url,\n+            headers={\'Tus-Resumable\': \'1.0.0\',\n+                     \'Upload-Length\': str(pdf_file_size),\n+                     \'Upload-Metadata\': metadata}\n+        )\n+        self.assertEqual(response.status_code, 201)\n+        location = response.headers[\'Location\']\n+\n+        # upload the data with PATCH\n+        with open(pdf_file_path, \'rb\') as pdf_file:\n+            response = self.api_session.patch(\n+                location,\n+                headers={\n+                    \'Content-Type\': \'application/offset+octet-stream\',\n+                    \'Upload-Offset\': \'0\',\n+                    \'Tus-Resumable\': \'1.0.0\'\n+                },\n+                data=pdf_file)\n+        self.assertEqual(response.status_code, 204)\n+\n+        self.assertEqual(\n+            fired_events,\n+            [\n+                \'ObjectCreatedEvent\',\n+                \'ObjectWillBeAddedEvent\',\n+                \'ObjectAddedEvent\',\n+                \'ContainerModifiedEvent\',\n+            ])\n+\n+        sm.unregisterHandler(record_event, (IObjectCreatedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectWillBeAddedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectAddedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectModifiedEvent,))\n+\n+    def test_replace_with_tus_fires_proper_events(self):\n+        # Create a test file\n+        self.file = api.content.create(container=self.portal,\n+                                       type=\'File\',\n+                                       id=\'testfile\',\n+                                       title=\'Testfile\')\n+        transaction.commit()\n+\n+        sm = getGlobalSiteManager()\n+        fired_events = []\n+\n+        def record_event(event):\n+            fired_events.append(event.__class__.__name__)\n+\n+        sm.registerHandler(record_event, (IObjectCreatedEvent,))\n+        sm.registerHandler(record_event, (IObjectWillBeAddedEvent,))\n+        sm.registerHandler(record_event, (IObjectAddedEvent,))\n+        sm.registerHandler(record_event, (IObjectModifiedEvent,))\n+\n+        # initialize the upload with POST\n+        pdf_file_path = os.path.join(os.path.dirname(__file__),\n+                                     UPLOAD_PDF_FILENAME)\n+        pdf_file_size = os.path.getsize(pdf_file_path)\n+        metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n+        response = self.api_session.post(\n+            \'{}/@tus-replace\'.format(self.file.absolute_url()),\n+            headers={\'Tus-Resumable\': \'1.0.0\',\n+                     \'Upload-Length\': str(pdf_file_size),\n+                     \'Upload-Metadata\': metadata}\n+        )\n+        self.assertEqual(response.status_code, 201)\n+        location = response.headers[\'Location\']\n+\n+        # upload the data with PATCH\n+        with open(pdf_file_path, \'rb\') as pdf_file:\n+            response = self.api_session.patch(\n+                location,\n+                headers={\n+                    \'Content-Type\': \'application/offset+octet-stream\',\n+                    \'Upload-Offset\': \'0\',\n+                    \'Tus-Resumable\': \'1.0.0\'\n+                },\n+                data=pdf_file)\n+        self.assertEqual(response.status_code, 204)\n+\n+        self.assertEqual(\n+            fired_events,\n+            [\n+                \'ObjectModifiedEvent\',\n+            ])\n+\n+        sm.unregisterHandler(record_event, (IObjectCreatedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectWillBeAddedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectAddedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectModifiedEvent,))\n+\n     def tearDown(self):\n+        self.api_session.close()\n         client_home = os.environ.get(\'CLIENT_HOME\')\n         tmp_dir = os.path.join(client_home, \'tus-uploads\')\n         if os.path.isdir(tmp_dir):\n@@ -458,6 +584,7 @@ def test_cors_preflight_for_head_contains_tus_headers(self):\n         self.assertIn(\'Tus-Extension\', response.headers)\n \n     def tearDown(self):\n+        self.api_session.close()\n         gsm = getGlobalSiteManager()\n         gsm.unregisterAdapter(\n             CORSTestPolicy, (Interface, IBrowserRequest), ICORSPolicy)\n@@ -500,29 +627,29 @@ def test_offset_returns_zero_if_file_doesnt_exist(self):\n \n     def test_offset_returns_size_of_current_file(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(StringIO(\'0123456789\'))\n+        tus.write(BytesIO(b\'0123456789\'))\n         self.assertEqual(10, tus.offset())\n         tus.cleanup()\n \n     def test_write_creates_new_file(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(StringIO(\'0123456789\'))\n+        tus.write(BytesIO(b\'0123456789\'))\n         self.assertTrue(os.path.isfile(tus.filepath))\n         tus.cleanup()\n \n     def test_write_appends_to_file_at_given_offset(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(StringIO(\'0123456789\'))\n-        tus.write(StringIO(\'abc\'), 10)\n+        tus.write(BytesIO(b\'0123456789\'))\n+        tus.write(BytesIO(b\'abc\'), 10)\n         self.assertEqual(13, tus.offset())\n         with open(tus.filepath, \'rb\') as f:\n             data = f.read()\n-        self.assertEqual(\'0123456789abc\', data)\n+        self.assertEqual(b\'0123456789abc\', data)\n         tus.cleanup()\n \n     def test_write_sets_finished_flag(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 10})\n-        tus.write(StringIO(\'0123456789\'))\n+        tus.write(BytesIO(b\'0123456789\'))\n         self.assertTrue(tus.finished)\n         tus.cleanup()\n \n@@ -533,13 +660,13 @@ def test_metadata_returns_empty_dict_if_no_metadata_has_been_set(self):\n \n     def test_expires_returns_expiration_time_of_current_upload(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(StringIO(\'0123456789\'))\n+        tus.write(BytesIO(b\'0123456789\'))\n         self.assertGreater(DateTime(tus.expires()), DateTime())\n         tus.cleanup()\n \n     def test_cleanup_removes_upload_file(self):\n         tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(StringIO(\'0123456789\'))\n+        tus.write(BytesIO(b\'0123456789\'))\n         tus.cleanup()\n         self.assertFalse(os.path.exists(tus.filepath))\n \n@@ -577,6 +704,8 @@ class TestTUSWithAT(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.portal = self.layer[\'portal\']\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         login(self.portal, TEST_USER_NAME)\n@@ -592,14 +721,15 @@ def setUp(self):\n         self.api_session.headers.update({\'Accept\': \'application/json\'})\n         self.api_session.auth = (TEST_USER_NAME, TEST_USER_PASSWORD)\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_tus_can_upload_pdf_file(self):\n         # initialize the upload with POST\n         pdf_file_path = os.path.join(os.path.dirname(__file__),\n                                      UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_PDF_FILENAME),\n-            b64encode(UPLOAD_PDF_MIMETYPE))\n+        metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n             headers={\'Tus-Resumable\': \'1.0.0\',\n@@ -610,13 +740,15 @@ def test_tus_can_upload_pdf_file(self):\n         location = response.headers[\'Location\']\n \n         # upload the data with PATCH\n-        pdf_file = open(pdf_file_path, \'rb\')\n-        response = self.api_session.patch(\n-            location,\n-            headers={\'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\',\n-                     \'Tus-Resumable\': \'1.0.0\'},\n-            data=pdf_file)\n+        with open(pdf_file_path, \'rb\') as pdf_file:\n+            response = self.api_session.patch(\n+                location,\n+                headers={\n+                    \'Content-Type\': \'application/offset+octet-stream\',\n+                    \'Upload-Offset\': \'0\',\n+                    \'Tus-Resumable\': \'1.0.0\'\n+                },\n+                data=pdf_file)\n         self.assertEqual(response.status_code, 204)\n \n         transaction.commit()\ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex a869a545..b5880727 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -18,6 +18,7 @@\n from plone.restapi.types.utils import get_jsonschema_for_fti\n from plone.restapi.types.utils import get_jsonschema_for_portal_type\n from plone.restapi.types.utils import get_jsonschema_properties\n+from z3c.form.browser.text import TextWidget\n \n \n class IDummySchema(model.Schema):\n@@ -58,8 +59,14 @@ class ITaggedValuesSchema(model.Schema):\n         description=u"",\n     )\n \n-    another_field = schema.TextLine(title=u"Tagged Values widget params")\n-    form.widget(\'another_field\', a_param=\'some_value\')\n+    parametrized_widget_field = schema.TextLine(\n+        title=u"Parametrized widget field")\n+    form.widget(\'parametrized_widget_field\',\n+                a_param=\'some_value\', defaultFactory=lambda: \'Foo\')\n+\n+    not_parametrized_widget_field = schema.TextLine(\n+        title=u"No parametrized widget field")\n+    form.widget(not_parametrized_widget_field=TextWidget)\n \n \n class TestJsonSchemaUtils(TestCase):\n@@ -97,9 +104,9 @@ def test_get_jsonschema_for_fti(self):\n         )\n         self.assertEqual(jsonschema[\'title\'], \'Page\')\n         self.assertEqual(jsonschema[\'type\'], \'object\')\n-        self.assertIn(\'title\', jsonschema[\'properties\'].keys())\n+        self.assertIn(\'title\', list(jsonschema[\'properties\']))\n         self.assertIn(\'title\', jsonschema[\'required\'])\n-        self.assertEquals(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n+        self.assertEqual(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n         self.assertIn(\'title\', jsonschema[\'fieldsets\'][0][\'fields\'])\n         self.assertIn(\'layouts\', jsonschema)\n \n@@ -109,7 +116,7 @@ def test_get_jsonschema_for_fti(self):\n             request,\n             excluded_fields=[\'title\']\n         )\n-        self.assertNotIn(\'title\', jsonschema[\'properties\'].keys())\n+        self.assertNotIn(\'title\', list(jsonschema[\'properties\']))\n \n     def test_get_jsonschema_for_fti_non_dx(self):\n         """Make sure FTIs without lookupSchema are supported.\n@@ -130,14 +137,14 @@ def test_get_jsonschema_for_portal_type(self):\n         )\n         self.assertEqual(jsonschema[\'title\'], \'Page\')\n         self.assertEqual(jsonschema[\'type\'], \'object\')\n-        self.assertIn(\'title\', jsonschema[\'properties\'].keys())\n+        self.assertIn(\'title\', list(jsonschema[\'properties\']))\n         self.assertIn(\'title\', jsonschema[\'required\'])\n-        self.assertEquals(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n+        self.assertEqual(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n         self.assertIn(\'title\', jsonschema[\'fieldsets\'][0][\'fields\'])\n \n         jsonschema = get_jsonschema_for_portal_type(\n             \'Document\', portal, request, excluded_fields=[\'title\'])\n-        self.assertNotIn(\'title\', jsonschema[\'properties\'].keys())\n+        self.assertNotIn(\'title\', list(jsonschema[\'properties\']))\n \n \n class TestTaggedValuesJsonSchemaUtils(TestCase):\n@@ -186,6 +193,32 @@ def test_get_jsonschema_with_widget_params(self):\n                 \'widgetOptions\'][\'a_param\']\n         )\n \n+    def test_do_not_fail_with_non_parametrized_widget(self):\n+        ttool = getToolByName(self.portal, \'portal_types\')\n+        jsonschema = get_jsonschema_for_fti(\n+            ttool[\'TaggedDocument\'],\n+            self.portal,\n+            self.request\n+        )\n+        self.assertEqual(\n+            u\'No parametrized widget field\',\n+            jsonschema[\'properties\'][\'not_parametrized_widget_field\'][\'title\']\n+        )\n+\n+    def test_resolve_callable_widget_params(self):\n+        ttool = getToolByName(self.portal, \'portal_types\')\n+        jsonschema = get_jsonschema_for_fti(\n+            ttool[\'TaggedDocument\'],\n+            self.portal,\n+            self.request\n+        )\n+\n+        self.assertEqual(\n+            u\'Foo\',\n+            jsonschema[\'properties\'][\'parametrized_widget_field\'].get(\n+                \'defaultFactory\')\n+        )\n+\n \n class TestJsonSchemaProviders(TestCase):\n \ndiff --git a/src/plone/restapi/tests/test_workflow.py b/src/plone/restapi/tests/test_workflow.py\nindex 9d1524ce..0f4d0558 100644\n--- a/src/plone/restapi/tests/test_workflow.py\n+++ b/src/plone/restapi/tests/test_workflow.py\n@@ -79,6 +79,14 @@ def test_expanded_workflow_info_in_content_serialization(self):\n         self.assertIn(\'transitions\', obj[\'@components\'][\'workflow\'])\n         self.assertIn(\'history\', obj[\'@components\'][\'workflow\'])\n \n+    def test_workflow_info_empty_on_siteroot(self):\n+        wfinfo = getMultiAdapter((self.portal, self.request),\n+                                 name=u\'GET_application_json_@workflow\')\n+        obj = wfinfo.reply()\n+\n+        self.assertEquals(obj[\'transitions\'], [])\n+        self.assertEquals(obj[\'history\'], [])\n+\n \n class TestWorkflowTransition(TestCase):\n \n@@ -98,8 +106,9 @@ def traverse(self, path=\'/plone\', accept=\'application/json\',\n         request.environ[\'PATH_TRANSLATED\'] = path\n         request.environ[\'HTTP_ACCEPT\'] = accept\n         request.environ[\'REQUEST_METHOD\'] = method\n+        auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         request._auth = \'Basic %s\' % b64encode(\n-            \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD))\n+            auth.encode(\'utf8\')).decode(\'utf8\')\n         notify(PubStart(request))\n         return request.traverse(path)\n \ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex 8c47a821..af2e2747 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -16,6 +16,7 @@\n from collections import OrderedDict\n from copy import copy\n from plone.autoform.form import AutoExtensibleForm\n+from plone.autoform.interfaces import IParameterizedWidget\n from plone.autoform.interfaces import WIDGETS_KEY\n from plone.dexterity.utils import getAdditionalSchemata\n from plone.restapi.serializer.converters import IJsonCompatible\n@@ -65,7 +66,7 @@ def get_fieldsets(context, request, schema, additional_schemata=None):\n     fieldsets = [{\n         \'id\': \'default\',\n         \'title\': u\'Default\',\n-        \'fields\': form.fields.values(),\n+        \'fields\': list(form.fields.values()),\n     }]\n \n     # Additional fieldsets (AKA z3c.form groups)\n@@ -73,7 +74,7 @@ def get_fieldsets(context, request, schema, additional_schemata=None):\n         fieldset = {\n             \'id\': group.__name__,\n             \'title\': translate(group.label, context=getRequest()),\n-            \'fields\': group.fields.values(),\n+            \'fields\': list(group.fields.values()),\n         }\n         fieldsets.append(fieldset)\n \n@@ -134,7 +135,7 @@ def get_widget_params(schemas):\n         tagged_values = mergedTaggedValueDict(schema, WIDGETS_KEY)\n         for field_name in schema:\n             widget = tagged_values.get(field_name)\n-            if widget and widget.params:\n+            if IParameterizedWidget.providedBy(widget) and widget.params:\n                 params[field_name] = {}\n                 for k, v in widget.params.items():\n                     if callable(v):\ndiff --git a/test-no-sphinx-warnings.in b/test-no-sphinx-warnings.in\nindex 8dfb0aac..ba7c0a7f 100644\n--- a/test-no-sphinx-warnings.in\n+++ b/test-no-sphinx-warnings.in\n@@ -3,6 +3,11 @@\n # CI test that should fail if there are warnings or even errors when building\n # the Sphinx docs.\n \n+if [ "$PLONE_VERSION" = "5.2.x" ]; then\n+    echo "Skipping checks for sphinx warnings for 5.2.x"\n+    exit 0\n+fi\n+\n set -euo pipefail\n \n BUILD_LOG="sphinx_build.log"\ndiff --git a/test-no-uncommitted-doc-changes.in b/test-no-uncommitted-doc-changes.in\nindex 878f2f80..9d8838dc 100644\n--- a/test-no-uncommitted-doc-changes.in\n+++ b/test-no-uncommitted-doc-changes.in\n@@ -13,7 +13,7 @@ function red {\n     echo "$RED $1 $RESET"\n }\n \n-if [ "$PLONE_VERSION" = "4.3.x" ] || [ "$PLONE_VERSION" = "5.0.x" ]; then\n+if [ "$PLONE_VERSION" = "4.3.x" ] || [ "$PLONE_VERSION" = "5.0.x" ] || [ "$PLONE_VERSION" = "5.2.x" ]; then\n     # request/response dumps have known differences for Plone 5\n     # => skip, we can\'t have the Plone 5 build fail because of those\n     echo "Skipping checks for undocumented changes for Plone 4 and 5.0.x"\ndiff --git a/versions.cfg b/versions.cfg\nindex f9083016..6df104e5 100644\n--- a/versions.cfg\n+++ b/versions.cfg\n@@ -1,7 +1,7 @@\n [versions]\n \n # plone.rest\n-plone.rest = 1.1.1\n+plone.rest = 1.4.0\n \n # Build\n setuptools =\n@@ -9,7 +9,7 @@ zc.buildout =\n zc.recipe.egg = 2.0.3\n \n # Code-analysis\n-plone.recipe.codeanalysis = 3.0.0a0\n+plone.recipe.codeanalysis = 3.0.1\n coverage = 3.7.1\n pep8 = 1.7.1\n flake8 = 3.5.0\n@@ -27,9 +27,11 @@ Jinja2 = 2.10\n Babel = 2.5.1\n \n # Release\n-zest.releaser = 6.14.0\n-twine = 1.10.0\n+zest.releaser = 6.17.0\n+twine = 1.11.0\n requests = 2.18.4\n+towncrier = 19.2.0\n+zestreleaser.towncrier = 1.1.0\n \n # Tests\n collective.xmltestreport = 1.3.4\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-07T17:51:56+02:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/7c12cf0259947f780b60c7110fe0a5c6b34a68f0

Merge branch 'master' into filtered-batched-vocabs

* master: (28 commits)
  Back to development: 3.8.2
  Preparing release 3.8.1
  made code-analysis happy :-|
  Add missing changelog.
  Hide performance, testing, and tiles profile.
  Clean up changelog.
  Back to development: 3.8.1
  Preparing release 3.8.0
  Added Python 2/3 specific setup code for #676
  added
  Python 3 fix for #676
  Fix tests in py3 and P5.2
  Fix StringIO on py3. Add documentation and missing changelog
  Add support for add/update user portraits (@user endpoint)
  Update CONTRIBUTORS.rst
  Update plone-5.2.x.cfg
  Back to development: 3.7.6
  Preparing release 3.7.5
  Amend changelog entry for p.a.controlpanel fix.
  Better both clauses be exclusive
  ...

Files changed:
A src/plone/restapi/tests/http-examples/users_update_portrait.req
A src/plone/restapi/tests/http-examples/users_update_portrait.resp
A src/plone/restapi/tests/http-examples/users_update_portrait_get.req
A src/plone/restapi/tests/http-examples/users_update_portrait_get.resp
A src/plone/restapi/tests/http-examples/users_update_portrait_scale.req
A src/plone/restapi/tests/http-examples/users_update_portrait_scale.resp
M CHANGES.rst
M CONTRIBUTORS.rst
M Makefile
M docs/source/users.rst
M plone-5.2.x.cfg
M requirements.txt
M setup.py
M src/plone/restapi/services/controlpanels/configure.zcml
M src/plone/restapi/services/multilingual/configure.zcml
M src/plone/restapi/services/users/update.py
M src/plone/restapi/services/workflow/transition.py
M src/plone/restapi/setuphandlers.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_services_users.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex cdfbdf04..cc6edace 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -49,11 +49,50 @@ Bugfixes:\n \n .. towncrier release notes start\n \n-3.7.3 (2019-03-08)\n+3.8.1 (2019-03-21)\n+------------------\n+\n+Bug fixes:\n+\n+- Fixed Python 3 incompatiblity with workflow service (#676)\n+  [ajung]\n+\n+- Hide performance, testing, and tiles profile. (#700)\n+  [Timo]\n+\n+\n+3.8.0 (2019-03-21)\n+------------------\n+\n+New features:\n+\n+- Add support for add/update user portraits (@user endpoint)\n+  [sneridagh] (#701)\n+\n+\n+3.7.5 (2019-03-14)\n ------------------\n \n Bug fixes:\n \n+- Do not depend on the deprecated plone.app.controlpanel package.\n+  [sneridagh] (#696)\n+\n+\n+3.7.4 (2019-03-13)\n+------------------\n+\n+Bug fixes:\n+\n+- Fix a problem on ZCML loading depending on how the policy package is named,\n+  related to the load of permissions in control panels and multilingual.\n+  [sneridagh] (#526)\n+\n+\n+3.7.3 (2019-03-08)\n+------------------\n+\n+Bug fixes:\n \n - Use environment-markers instead of python-logic to specify dependencies for py2.\n   [pbauer] (#688)\n@@ -64,7 +103,6 @@ Bug fixes:\n \n Bug fixes:\n \n-\n - Fix TUS upload events `#689 <https://github.com/plone/plone.restapi/issues/689>`_.\n   [buchi] (#689)\n \ndiff --git a/CONTRIBUTORS.rst b/CONTRIBUTORS.rst\nindex fb6b2a36..c86593a7 100644\n--- a/CONTRIBUTORS.rst\n+++ b/CONTRIBUTORS.rst\n@@ -2,15 +2,15 @@\n     place names and roles of the people who contribute to this package\n     in this file, one to a line, like so:\n \n-- Timo Stollenwerk, kitconcept GmbH, Original Author\n-- Thomas Buchberger, 4teamwork\n-- Lukas Graf, 4teamwork\n-- V\xc3\xadctor Fern\xc3\xa1ndez de Alba, kitconcept GmbH\n+- Timo Stollenwerk, Original Author\n+- Thomas Buchberger\n+- Lukas Graf\n+- V\xc3\xadctor Fern\xc3\xa1ndez de Alba\n - Paul Roeland\n-- Mikel Larreategi, codesyntax\n+- Mikel Larreategi\n - Eric Brehault\n - Andreas Zeidler\n-- Carsten Senger, kitconcept GmbH\n+- Carsten Senger\n - Tom Gross\n - Roel Bruggink\n - Yann Fouillat, alias Gagaro\ndiff --git a/Makefile b/Makefile\nindex 9966e6bf..42574ec8 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -30,6 +30,9 @@ bin/python bin/pip:\n test-performance:\n \tjmeter -n -t performance.jmx -l jmeter.jtl\n \n+release:\n+\tbin/fullrelease\n+\n clean:\n \tgit clean -Xdf\n \ndiff --git a/docs/source/users.rst b/docs/source/users.rst\nindex c4a2a689..92211c20 100644\n--- a/docs/source/users.rst\n+++ b/docs/source/users.rst\n@@ -137,6 +137,23 @@ A successful response to a PATCH request will be indicated by a :term:`204 No Co\n \n Any user is able to update their own properties and password (if allowed) by using the same request.\n \n+The user portrait/avatar can also be updated using the same serialization as the file one:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_update_portrait.req\n+\n+A successful response to a PATCH request will be indicated by a :term:`204 No Content` response.\n+Then asking for the user the portrait URL should be on the response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_update_portrait_get.resp\n+   :language: http\n+\n+Adding the portrait via the @user endpoint does not scale it since it\'s assumed that the frontend will take care of it (resizing/cropping).\n+If you still want that Plone to take care of the scaling using the default Plone behavior for portraits, you have to add the ``scale`` attribute to the request:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_update_portrait_scale.req\n+\n Delete User\n -----------\n \ndiff --git a/plone-5.2.x.cfg b/plone-5.2.x.cfg\nindex 622ec121..94ef5e62 100644\n--- a/plone-5.2.x.cfg\n+++ b/plone-5.2.x.cfg\n@@ -1,7 +1,7 @@\n [buildout]\n extends =\n     base.cfg\n-    http://dist.plone.org/release/5.2a2/versions.cfg\n+    http://dist.plone.org/release/5.2rc1/versions.cfg\n find-links += http://dist.plone.org/thirdparty/\n versions=versions\n \ndiff --git a/requirements.txt b/requirements.txt\nindex ad0b8d39..c266c908 100644\n--- a/requirements.txt\n+++ b/requirements.txt\n@@ -1,3 +1,3 @@\n # https://github.com/plone/buildout.coredev/blob/5.2/requirements.txt\n-setuptools==40.6.3\n-zc.buildout==2.12.2\n+setuptools==40.8.0\n+zc.buildout==2.13.1\ndiff --git a/setup.py b/setup.py\nindex ac900d51..c974478d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n \n import sys\n \n-version = \'3.7.4-dev.0\'\n+version = \'3.8.2.dev0\'\n \n long_description = (\n     open(\'README.rst\').read() + \'\\n\' +\ndiff --git a/src/plone/restapi/services/controlpanels/configure.zcml b/src/plone/restapi/services/controlpanels/configure.zcml\nindex cef57d10..718ea565 100644\n--- a/src/plone/restapi/services/controlpanels/configure.zcml\n+++ b/src/plone/restapi/services/controlpanels/configure.zcml\n@@ -1,6 +1,17 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:plone="http://namespaces.plone.org/plone">\n+    xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml">\n+\n+  <include\n+    zcml:condition="not-installed plone.app.controlpanel"\n+    package="Products.CMFPlone.controlpanel"\n+    file="permissions.zcml" />\n+\n+  <include\n+    zcml:condition="installed plone.app.controlpanel"\n+    package="plone.app.controlpanel"\n+    file="permissions.zcml" />\n \n   <plone:service\n     method="GET"\ndiff --git a/src/plone/restapi/services/multilingual/configure.zcml b/src/plone/restapi/services/multilingual/configure.zcml\nindex 2c6dae1b..11fb18e1 100644\n--- a/src/plone/restapi/services/multilingual/configure.zcml\n+++ b/src/plone/restapi/services/multilingual/configure.zcml\n@@ -3,6 +3,8 @@\n     xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml">\n \n+    <include package="plone.app.multilingual" file="permissions.zcml"/>\n+\n     <adapter factory=".pam.Translations" name="translations"/>\n \n     <plone:service\ndiff --git a/src/plone/restapi/services/users/update.py b/src/plone/restapi/services/users/update.py\nindex 41c50e13..42f46cd5 100644\n--- a/src/plone/restapi/services/users/update.py\n+++ b/src/plone/restapi/services/users/update.py\n@@ -1,17 +1,22 @@\n # -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n+from OFS.Image import Image\n from plone.restapi.services import Service\n from Products.CMFCore.permissions import SetOwnPassword\n-from Products.CMFPlone.utils import set_own_login_name\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.utils import set_own_login_name\n+from Products.PlonePAS.utils import scale_image\n+from zope.component import getAdapter\n from zope.component.hooks import getSite\n from zope.interface import alsoProvides\n from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n-from zope.component import getAdapter\n \n+import codecs\n import json\n import plone\n+import six\n+\n \n try:  # pragma: no cover\n     from Products.CMFPlone.interfaces import ISecuritySchema\n@@ -67,6 +72,8 @@ def reply(self):\n                 elif key == \'username\':\n                     set_own_login_name(user, value)\n                 else:\n+                    if key == \'portrait\' and value.get(\'data\'):\n+                        self.set_member_portrait(user, value)\n                     user.setMemberProperties(mapping={key: value})\n \n             roles = user_settings_to_update.get(\'roles\', {})\n@@ -92,6 +99,8 @@ def reply(self):\n                    self.can_set_own_password:\n                     self._change_user_password(user, value)\n                 else:\n+                    if key == \'portrait\' and value.get(\'data\'):\n+                        self.set_member_portrait(user, value)\n                     user.setMemberProperties(mapping={key: value})\n \n         else:\n@@ -133,3 +142,33 @@ def _is_anonymous(self):\n         portal = getSite()\n         portal_membership = getToolByName(portal, \'portal_membership\')\n         return portal_membership.isAnonymousUser()\n+\n+    def set_member_portrait(self, user, portrait):\n+        portal = getSite()\n+        portal_membership = getToolByName(portal, \'portal_membership\')\n+        safe_id = portal_membership._getSafeMemberId(user.getId())\n+        content_type = \'application/octet-stream\'\n+        filename = None\n+\n+        content_type = portrait.get(\'content-type\', content_type)\n+        filename = portrait.get(\'filename\', filename)\n+        data = portrait.get(\'data\')\n+        if isinstance(data, six.text_type):\n+            data = data.encode(\'utf-8\')\n+        if \'encoding\' in portrait:\n+            data = codecs.decode(data, portrait[\'encoding\'])\n+        if isinstance(data, six.text_type):\n+            data = data.encode(\'utf-8\')\n+\n+        if portrait.get(\'scale\', False):\n+            # Only scale if the scale (default Plone behavior) boolean is set\n+            # This should be handled by the core in the future\n+            scaled, mimetype = scale_image(six.BytesIO(data))\n+        else:\n+            # Normally, the scale and cropping is going to be handled in the\n+            # frontend\n+            scaled = data\n+\n+        portrait = Image(id=safe_id, file=scaled, title=\'\')\n+        membertool = getToolByName(self, \'portal_memberdata\')\n+        membertool._setPortrait(portrait, safe_id)\ndiff --git a/src/plone/restapi/services/workflow/transition.py b/src/plone/restapi/services/workflow/transition.py\nindex fc09edb2..945122c2 100644\n--- a/src/plone/restapi/services/workflow/transition.py\n+++ b/src/plone/restapi/services/workflow/transition.py\n@@ -1,4 +1,7 @@\n # -*- coding: utf-8 -*-\n+\n+import six\n+\n from plone.restapi.deserializer import json_body\n from plone.restapi.interfaces import IDeserializeFromJson\n from plone.restapi.serializer.converters import json_compatible\n@@ -78,10 +81,16 @@ def reply(self):\n \n         history = self.wftool.getInfoFor(self.context, "review_history")\n         action = history[-1]\n-        action[\'title\'] = self.context.translate(\n-            self.wftool.getTitleForStateOnType(\n-                action[\'review_state\'],\n-                self.context.portal_type).decode(\'utf8\'))\n+        if six.PY2:\n+            action[\'title\'] = self.context.translate(\n+                self.wftool.getTitleForStateOnType(\n+                    action[\'review_state\'],\n+                    self.context.portal_type).decode(\'utf8\'))\n+        else:\n+            action[\'title\'] = self.context.translate(\n+                self.wftool.getTitleForStateOnType(\n+                    action[\'review_state\'],\n+                    self.context.portal_type))\n \n         return json_compatible(action)\n \ndiff --git a/src/plone/restapi/setuphandlers.py b/src/plone/restapi/setuphandlers.py\nindex 3b6ef6f9..73a41d2b 100644\n--- a/src/plone/restapi/setuphandlers.py\n+++ b/src/plone/restapi/setuphandlers.py\n@@ -14,6 +14,9 @@ class HiddenProfiles(object):\n     def getNonInstallableProfiles(self):  # pragma: no cover\n         """Do not show on Plone\'s list of installable profiles."""\n         return [\n+            u\'plone.restapi:performance\',\n+            u\'plone.restapi:testing\',\n+            u\'plone.restapi:tiles\',\n             u\'plone.restapi:uninstall\',\n         ]\n \ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 160526cb..d2f984d5 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n # pylint: disable=E1002\n # E1002: Use of super on an old style class\n+\n from plone import api\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.i18n.locales.interfaces import IContentLanguages\n@@ -35,6 +36,7 @@\n import pkg_resources\n import re\n import requests\n+import six\n \n \n PLONE_VERSION = pkg_resources.parse_version(api.env.plone_version())\n@@ -186,7 +188,10 @@ def setUpPloneSite(self, portal):\n         quickInstallProduct(portal, \'collective.MockMailHost\')\n         applyProfile(portal, \'collective.MockMailHost:default\')\n         states = portal.portal_workflow[\'simple_publication_workflow\'].states\n-        states[\'published\'].title = u\'Published with accent \xc3\xa9\'.encode(\'utf8\')\n+        if six.PY2:  # issue 676\n+            states[\'published\'].title = u\'Published with accent \xc3\xa9\'.encode(\'utf8\')  # noqa: E501\n+        else:\n+            states[\'published\'].title = u\'Published with accent \xc3\xa9\'  # noqa: E501\n \n \n PLONE_RESTAPI_DX_FIXTURE = PloneRestApiDXLayer()\n@@ -240,7 +245,10 @@ def setUpPloneSite(self, portal):\n         set_available_languages()\n         enable_request_language_negotiation(portal)\n         states = portal.portal_workflow[\'simple_publication_workflow\'].states\n-        states[\'published\'].title = u\'Published with accent \xc3\xa9\'.encode(\'utf8\')\n+        if six.PY2:  # issue 676\n+            states[\'published\'].title = u\'Published with accent \xc3\xa9\'.encode(\'utf8\')  # noqa: E501\n+        else:\n+            states[\'published\'].title = u\'Published with accent \xc3\xa9\'  # noqa: E501\n \n \n PLONE_RESTAPI_DX_PAM_FIXTURE = PloneRestApiDXPAMLayer()\n@@ -301,7 +309,10 @@ def setUpPloneSite(self, portal):\n             enable_request_language_negotiation(portal)\n             portal.portal_workflow.setDefaultChain(\'simple_publication_workflow\')  # noqa: E501\n             states = portal.portal_workflow[\'simple_publication_workflow\'].states  # noqa: E501\n-            states[\'published\'].title = u\'Published with accent \xc3\xa9\'.encode(\'utf8\')  # noqa: E501\n+            if six.PY2:  # issue 676\n+                states[\'published\'].title = u\'Published with accent \xc3\xa9\'.encode(\'utf8\')  # noqa: E501\n+            else:\n+                states[\'published\'].title = u\'Published with accent \xc3\xa9\'  # noqa: E501\n \n     PLONE_RESTAPI_AT_FIXTURE = PloneRestApiATLayer()\n     PLONE_RESTAPI_AT_INTEGRATION_TESTING = IntegrationTesting(\ndiff --git a/src/plone/restapi/tests/http-examples/users_update_portrait.req b/src/plone/restapi/tests/http-examples/users_update_portrait.req\nnew file mode 100644\nindex 00000000..ffbf93b9\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_update_portrait.req\n@@ -0,0 +1,13 @@\n+PATCH /plone/@users/noam HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "portrait": {\n+        "content-type": "image/png",\n+        "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+        "encoding": "base64",\n+        "filename": "image.png"\n+    }\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_update_portrait.resp b/src/plone/restapi/tests/http-examples/users_update_portrait.resp\nnew file mode 100644\nindex 00000000..0074ded3\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_update_portrait.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/users_update_portrait_get.req b/src/plone/restapi/tests/http-examples/users_update_portrait_get.req\nnew file mode 100644\nindex 00000000..244906ea\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_update_portrait_get.req\n@@ -0,0 +1,13 @@\n+GET /plone/@users/noam HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "portrait": {\n+        "content-type": "image/png",\n+        "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+        "encoding": "base64",\n+        "filename": "image.png"\n+    }\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_update_portrait_get.resp b/src/plone/restapi/tests/http-examples/users_update_portrait_get.resp\nnew file mode 100644\nindex 00000000..e159773a\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_update_portrait_get.resp\n@@ -0,0 +1,17 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@users/noam", \n+  "description": null, \n+  "email": "noam.chomsky@example.com", \n+  "fullname": null, \n+  "home_page": null, \n+  "id": "noam", \n+  "location": null, \n+  "portrait": "http://localhost:55001/plone/portal_memberdata/portraits/noam", \n+  "roles": [\n+    "Member"\n+  ], \n+  "username": "noam"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_update_portrait_scale.req b/src/plone/restapi/tests/http-examples/users_update_portrait_scale.req\nnew file mode 100644\nindex 00000000..9781e060\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_update_portrait_scale.req\n@@ -0,0 +1,14 @@\n+PATCH /plone/@users/noam HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "portrait": {\n+        "content-type": "image/png",\n+        "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+        "encoding": "base64",\n+        "filename": "image.png",\n+        "scale": true\n+    }\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_update_portrait_scale.resp b/src/plone/restapi/tests/http-examples/users_update_portrait_scale.resp\nnew file mode 100644\nindex 00000000..0074ded3\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_update_portrait_scale.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex a075ad11..31d0b3fd 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -847,6 +847,49 @@ def test_documentation_users_update(self):\n         )\n         save_request_and_response_for_docs(\'users_update\', response)\n \n+    def test_documentation_users_update_portrait(self):\n+        payload = {\n+            \'portrait\': {\n+                \'filename\': \'image.png\',\n+                \'encoding\': \'base64\',\n+                \'data\': \'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n+                \'content-type\': \'image/png\'\n+            }\n+        }\n+        api.user.create(\n+            email=\'noam.chomsky@example.com\',\n+            username=\'noam\'\n+        )\n+        transaction.commit()\n+        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+        transaction.commit()\n+\n+        response_get = self.api_session.get(\'/@users/noam\', json=payload)\n+\n+        save_request_and_response_for_docs(\'users_update_portrait\', response)\n+        save_request_and_response_for_docs(\n+            \'users_update_portrait_get\', response_get)\n+\n+    def test_documentation_users_update_portrait_with_scale(self):\n+        payload = {\n+            \'portrait\': {\n+                \'filename\': \'image.png\',\n+                \'encoding\': \'base64\',\n+                \'data\': \'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n+                \'content-type\': \'image/png\',\n+                \'scale\': True\n+            }\n+        }\n+        api.user.create(\n+            email=\'noam.chomsky@example.com\',\n+            username=\'noam\'\n+        )\n+        transaction.commit()\n+        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+\n+        save_request_and_response_for_docs(\n+            \'users_update_portrait_scale\', response)\n+\n     def test_documentation_users_delete(self):\n         properties = {\n             \'email\': \'noam.chomsky@example.com\',\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex 92097918..191fb186 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -492,6 +492,69 @@ def test_update_user_password(self):\n             old_password_hashes[\'noam\'], new_password_hashes[\'noam\']\n         )\n \n+    def test_update_portrait(self):\n+        payload = {\n+            \'portrait\': {\n+                \'filename\': \'image.png\',\n+                \'encoding\': \'base64\',\n+                \'data\': u\'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n+                \'content-type\': \'image/png\'\n+            }\n+        }\n+        self.api_session.auth = (\'noam\', \'password\')\n+        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+\n+        self.assertEqual(response.status_code, 204)\n+        transaction.commit()\n+\n+        user = self.api_session.get(\'/@users/noam\').json()\n+        self.assertTrue(\n+            user.get(\'portrait\').endswith(\n+                \'plone/portal_memberdata/portraits/noam\'),\n+        )\n+\n+    def test_update_portrait_with_default_plone_scaling(self):\n+        payload = {\n+            \'portrait\': {\n+                \'filename\': \'image.png\',\n+                \'encoding\': \'base64\',\n+                \'data\': u\'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n+                \'content-type\': \'image/png\',\n+                \'scale\': True\n+            }\n+        }\n+        self.api_session.auth = (\'noam\', \'password\')\n+        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+\n+        self.assertEqual(response.status_code, 204)\n+        transaction.commit()\n+\n+        user = self.api_session.get(\'/@users/noam\').json()\n+        self.assertTrue(\n+            user.get(\'portrait\').endswith(\n+                \'plone/portal_memberdata/portraits/noam\'),\n+        )\n+\n+    def test_update_portrait_by_manager(self):\n+        payload = {\n+            \'portrait\': {\n+                \'filename\': \'image.png\',\n+                \'encoding\': \'base64\',\n+                \'data\': u\'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n+                \'content-type\': \'image/png\'\n+            }\n+        }\n+        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+\n+        self.assertEqual(response.status_code, 204)\n+        transaction.commit()\n+\n+        user = self.api_session.get(\'/@users/noam\').json()\n+        self.assertTrue(\n+            user.get(\'portrait\').endswith(\n+                \'plone/portal_memberdata/portraits/noam\'),\n+        )\n+\n     def test_anonymous_user_can_not_update_existing_user(self):\n         payload = {\n             \'fullname\': \'Noam A. Chomsky\',\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-20T11:13:01+02:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/04fee70d2e2508b2dbaafa58253f58bdd4119e44

Fix two remaining tests

Files changed:
M src/plone/restapi/tests/test_types.py

b"diff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex b5880727..93b631f8 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -189,7 +189,7 @@ def test_get_jsonschema_with_widget_params(self):\n         )\n         self.assertEqual(\n             'some_value',\n-            jsonschema['properties']['another_field'][\n+            jsonschema['properties']['parametrized_widget_field'][\n                 'widgetOptions']['a_param']\n         )\n \n@@ -215,8 +215,8 @@ def test_resolve_callable_widget_params(self):\n \n         self.assertEqual(\n             u'Foo',\n-            jsonschema['properties']['parametrized_widget_field'].get(\n-                'defaultFactory')\n+            jsonschema['properties']['parametrized_widget_field'][\n+                'widgetOptions'].get('defaultFactory')\n         )\n \n \n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-20T12:35:00+02:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/5915022269f609dffba8d8c26328983491d964dd

Fix vocabularies in Jenkins for random ports

Files changed:
M src/plone/restapi/tests/test_services_vocabularies.py

b"diff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 0fc9386f..d5b96767 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -63,7 +63,7 @@ def test_get_vocabulary(self):\n         self.assertEqual(\n             response,\n             {\n-                u'@id': u'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary',  # noqa\n+                u'@id': self.portal_url + u'/@vocabularies/plone.restapi.tests.test_vocabulary',  # noqa\n                 u'items': [\n                     {u'title': u'Title 1', u'token': u'token1'},\n                     {u'title': u'Title 2', u'token': u'token2'},\n@@ -82,12 +82,12 @@ def test_get_vocabulary_batched(self):\n         self.assertEqual(\n             response,\n             {\n-                u'@id': u'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary',  # noqa\n+                u'@id': self.portal_url + u'/@vocabularies/plone.restapi.tests.test_vocabulary',  # noqa\n                 u'batching': {\n-                    u'@id': u'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary?b_size=1',  # noqa\n-                    u'first': u'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=0&b_size=1',  # noqa\n-                    u'last': u'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1',  # noqa\n-                    u'next': u'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1',  # noqa\n+                    u'@id': self.portal_url + u'/@vocabularies/plone.restapi.tests.test_vocabulary?b_size=1',  # noqa\n+                    u'first': self.portal_url + u'/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=0&b_size=1',  # noqa\n+                    u'last': self.portal_url + u'/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1',  # noqa\n+                    u'next': self.portal_url + u'/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1',  # noqa\n                 },\n                 u'items': [\n                     {u'title': u'Title 1', u'token': u'token1'},\n@@ -106,7 +106,7 @@ def test_get_vocabulary_filtered(self):\n         self.assertEqual(\n             response,\n             {\n-                u'@id': u'http://localhost:55001/plone/@vocabularies/plone.restapi.tests.test_vocabulary?q=2',  # noqa\n+                u'@id': self.portal_url + u'/@vocabularies/plone.restapi.tests.test_vocabulary?q=2',  # noqa\n                 u'items': [\n                     {\n                         u'title': u'Title 2',\n@@ -174,7 +174,7 @@ def test_context_vocabulary(self):\n         self.assertEqual(\n             response.json(),\n             {\n-                u'@id': u'http://localhost:55001/plone/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary',  # noqa\n+                u'@id': self.portal_url + u'/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary',  # noqa\n                 u'items': [\n                     {u'title': u'testdoc', u'token': u'id'},\n                     {u'title': u'Document 1', u'token': u'title'},\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-20T19:49:44+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.restapi/commit/df19cfb1e89eca570fed94d49e726f66d76432d0

Fix Plone 4.3 build by looking up portal via getSite().

Files changed:
M src/plone/restapi/types/utils.py

b"diff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex af2e2747..8243778c 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -26,6 +26,7 @@\n from z3c.form import form as z3c_form\n from zope.component import getMultiAdapter\n from zope.component import queryMultiAdapter\n+from zope.component.hooks import getSite\n from zope.globalrequest import getRequest\n from zope.i18n import translate\n \n@@ -207,9 +208,7 @@ def get_vocabulary_url(vocab_name, context, request):\n     try:\n         context_url = context.absolute_url()\n     except AttributeError:\n-        portal = getMultiAdapter(\n-            (context, request),\n-            name='plone_portal_state').portal()\n+        portal = getSite()\n         context_url = portal.absolute_url()\n     return '{}/@vocabularies/{}'.format(\n         context_url,\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-20T20:59:05+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.restapi/commit/5d76b41b49541fea1fa2467bb710824bcfd0dc17

Rename q -&gt; query on vocabularies endpoint.

Files changed:
M docs/source/vocabularies.rst
M src/plone/restapi/serializer/vocabularies.py
M src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req
M src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_services_vocabularies.py

b'diff --git a/docs/source/vocabularies.rst b/docs/source/vocabularies.rst\nindex c8f22b0c..1cb046ef 100644\n--- a/docs/source/vocabularies.rst\n+++ b/docs/source/vocabularies.rst\n@@ -46,7 +46,7 @@ The token is what should be sent to the server to retrieve the value of the term\n .. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get.resp\n    :language: http\n \n-Vocabulary terms can be filtered using a ``q`` parameter\n+Vocabulary terms can be filtered using a ``query`` parameter\n to return only terms with a title that contains the specified text\n (case insensitive).\n \ndiff --git a/src/plone/restapi/serializer/vocabularies.py b/src/plone/restapi/serializer/vocabularies.py\nindex 31e6f4ca..8e5fd135 100644\n--- a/src/plone/restapi/serializer/vocabularies.py\n+++ b/src/plone/restapi/serializer/vocabularies.py\n@@ -20,7 +20,7 @@ def __init__(self, context, request):\n \n     def __call__(self, vocabulary_id):\n         vocabulary = self.context\n-        query = self.request.form.get(\'q\', \'\')\n+        query = self.request.form.get(\'query\', \'\')\n \n         terms = []\n         for term in vocabulary:\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req\nindex 0b04c25a..21e9d33f 100644\n--- a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req\n@@ -1,3 +1,3 @@\n-GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?q=doc HTTP/1.1\n+GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?query=doc HTTP/1.1\n Accept: application/json\n Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\nindex e609c514..b14a80bc 100644\n--- a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\n@@ -2,7 +2,7 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?q=doc", \n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?query=doc", \n   "items": [\n     {\n       "title": "DX Test Document", \ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 31d0b3fd..6ff513cc 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1127,7 +1127,7 @@ def test_documentation_vocabularies_get(self):\n     def test_documentation_vocabularies_get_filtered(self):\n         response = self.api_session.get(\n             \'/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?\'\n-            \'q=doc\'\n+            \'query=doc\'\n         )\n         save_request_and_response_for_docs(\n             \'vocabularies_get_filtered\', response)\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex d5b96767..33301b01 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -98,7 +98,7 @@ def test_get_vocabulary_batched(self):\n \n     def test_get_vocabulary_filtered(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.restapi.tests.test_vocabulary?q=2\'\n+            \'/@vocabularies/plone.restapi.tests.test_vocabulary?query=2\'\n         )\n \n         self.assertEqual(200, response.status_code)\n@@ -106,7 +106,7 @@ def test_get_vocabulary_filtered(self):\n         self.assertEqual(\n             response,\n             {\n-                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?q=2\',  # noqa\n+                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?query=2\',  # noqa\n                 u\'items\': [\n                     {\n                         u\'title\': u\'Title 2\',\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-20T22:06:53+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.restapi/commit/1ca7411dd879499830c44fbff07a8c853f61b6cb

Make vocabularies attribute use a JSON-LD hypermedia link.

Files changed:
M src/plone/restapi/tests/http-examples/controlpanels_get_item.resp
M src/plone/restapi/tests/http-examples/registry_get_list.resp
M src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp
M src/plone/restapi/tests/http-examples/types_document.resp
M src/plone/restapi/tests/test_types.py
M src/plone/restapi/types/adapters.py

b'diff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\nindex c3bd8d37..aee68a51 100644\n--- a/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n@@ -52,7 +52,9 @@ Content-Type: application/json\n         "description": "Select the default wysiwyg editor. Users will be able to choose their own or select to use the site default.", \n         "title": "Default editor", \n         "type": "string", \n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AvailableEditors"\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AvailableEditors"\n+        }\n       }, \n       "enable_link_integrity_checks": {\n         "default": true, \ndiff --git a/src/plone/restapi/tests/http-examples/registry_get_list.resp b/src/plone/restapi/tests/http-examples/registry_get_list.resp\nindex 43fcc7c9..5d13bb43 100644\n--- a/src/plone/restapi/tests/http-examples/registry_get_list.resp\n+++ b/src/plone/restapi/tests/http-examples/registry_get_list.resp\n@@ -191,7 +191,9 @@ Content-Type: application/json\n             "description": "", \n             "title": "", \n             "type": "string", \n-            "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SyndicatableFeedItems"\n+            "vocabulary": {\n+              "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SyndicatableFeedItems"\n+            }\n           }, \n           "title": "Site RSS", \n           "type": "array", \n@@ -343,7 +345,9 @@ Content-Type: application/json\n             "description": "", \n             "title": "", \n             "type": "string", \n-            "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AllowableContentTypes"\n+            "vocabulary": {\n+              "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AllowableContentTypes"\n+            }\n           }, \n           "title": "Alternative formats", \n           "type": "array", \n@@ -399,7 +403,9 @@ Content-Type: application/json\n           "description": "Use this setting to enable or disable Captcha validation for comments. Install plone.formwidget.captcha, plone.formwidget.recaptcha, collective.akismet, or collective.z3cform.norobots if there are no options available.", \n           "title": "Captcha", \n           "type": "string", \n-          "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.CaptchaVocabulary"\n+          "vocabulary": {\n+            "@id": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.CaptchaVocabulary"\n+          }\n         }\n       }, \n       "value": "disabled"\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\nindex e1c9b2f1..6e7f14d6 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n@@ -145,7 +145,9 @@ Content-Type: application/json+schema\n       "description": "", \n       "title": "Idioma", \n       "type": "string", \n-      "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SupportedContentLanguages"\n+      "vocabulary": {\n+        "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SupportedContentLanguages"\n+      }\n     }, \n     "nextPreviousEnabled": {\n       "default": false, \n@@ -161,7 +163,9 @@ Content-Type: application/json+schema\n         "description": "", \n         "title": "Related", \n         "type": "string", \n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        }\n       }, \n       "title": "Contenido relacionado", \n       "type": "array", \ndiff --git a/src/plone/restapi/tests/http-examples/types_document.resp b/src/plone/restapi/tests/http-examples/types_document.resp\nindex 969f4e51..f632aff3 100644\n--- a/src/plone/restapi/tests/http-examples/types_document.resp\n+++ b/src/plone/restapi/tests/http-examples/types_document.resp\n@@ -148,7 +148,9 @@ Content-Type: application/json+schema\n       "description": "", \n       "title": "Language", \n       "type": "string", \n-      "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SupportedContentLanguages"\n+      "vocabulary": {\n+        "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SupportedContentLanguages"\n+      }\n     }, \n     "relatedItems": {\n       "additionalItems": true, \n@@ -158,7 +160,9 @@ Content-Type: application/json+schema\n         "description": "", \n         "title": "Related", \n         "type": "string", \n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        }\n       }, \n       "title": "Related Items", \n       "type": "array", \ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex 93b631f8..c637e071 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -410,7 +410,7 @@ def test_choice_named_vocab(self):\n                 \'type\': \'string\',\n                 \'title\': u\'My field\',\n                 \'description\': u\'My great field\',\n-                \'vocabulary\': u\'http://nohost/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes\'  # noqa\n+                \'vocabulary\': { \'@id\': u\'http://nohost/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes\' }  # noqa\n             },\n             adapter.get_schema()\n         )\ndiff --git a/src/plone/restapi/types/adapters.py b/src/plone/restapi/types/adapters.py\nindex 2ff8fa60..14202d49 100644\n--- a/src/plone/restapi/types/adapters.py\n+++ b/src/plone/restapi/types/adapters.py\n@@ -260,8 +260,13 @@ def additional(self):\n         vocab_name = getattr(self.field, \'vocabularyName\', None)\n         if vocab_name:\n             return {\n-                \'vocabulary\': get_vocabulary_url(\n-                    vocab_name, self.context, self.request)\n+                \'vocabulary\': {\n+                    \'@id\': get_vocabulary_url(\n+                        vocab_name,\n+                        self.context,\n+                        self.request\n+                    )\n+                }\n             }\n \n         # Maybe we have an unnamed vocabulary or source.\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-21T07:10:41+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/b52c6d45585707d6090018c3eaea4e42a6d9bf19

Merge pull request #713 from plone/filtered-batched-vocabs-query

Rename q -&gt; query on vocabularies endpoint.

Files changed:
M docs/source/vocabularies.rst
M src/plone/restapi/serializer/vocabularies.py
M src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req
M src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_services_vocabularies.py

b'diff --git a/docs/source/vocabularies.rst b/docs/source/vocabularies.rst\nindex c8f22b0c..1cb046ef 100644\n--- a/docs/source/vocabularies.rst\n+++ b/docs/source/vocabularies.rst\n@@ -46,7 +46,7 @@ The token is what should be sent to the server to retrieve the value of the term\n .. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get.resp\n    :language: http\n \n-Vocabulary terms can be filtered using a ``q`` parameter\n+Vocabulary terms can be filtered using a ``query`` parameter\n to return only terms with a title that contains the specified text\n (case insensitive).\n \ndiff --git a/src/plone/restapi/serializer/vocabularies.py b/src/plone/restapi/serializer/vocabularies.py\nindex 31e6f4ca..8e5fd135 100644\n--- a/src/plone/restapi/serializer/vocabularies.py\n+++ b/src/plone/restapi/serializer/vocabularies.py\n@@ -20,7 +20,7 @@ def __init__(self, context, request):\n \n     def __call__(self, vocabulary_id):\n         vocabulary = self.context\n-        query = self.request.form.get(\'q\', \'\')\n+        query = self.request.form.get(\'query\', \'\')\n \n         terms = []\n         for term in vocabulary:\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req\nindex 0b04c25a..21e9d33f 100644\n--- a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req\n@@ -1,3 +1,3 @@\n-GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?q=doc HTTP/1.1\n+GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?query=doc HTTP/1.1\n Accept: application/json\n Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\nindex e609c514..b14a80bc 100644\n--- a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\n@@ -2,7 +2,7 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?q=doc", \n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?query=doc", \n   "items": [\n     {\n       "title": "DX Test Document", \ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 31d0b3fd..6ff513cc 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1127,7 +1127,7 @@ def test_documentation_vocabularies_get(self):\n     def test_documentation_vocabularies_get_filtered(self):\n         response = self.api_session.get(\n             \'/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?\'\n-            \'q=doc\'\n+            \'query=doc\'\n         )\n         save_request_and_response_for_docs(\n             \'vocabularies_get_filtered\', response)\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex d5b96767..33301b01 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -98,7 +98,7 @@ def test_get_vocabulary_batched(self):\n \n     def test_get_vocabulary_filtered(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.restapi.tests.test_vocabulary?q=2\'\n+            \'/@vocabularies/plone.restapi.tests.test_vocabulary?query=2\'\n         )\n \n         self.assertEqual(200, response.status_code)\n@@ -106,7 +106,7 @@ def test_get_vocabulary_filtered(self):\n         self.assertEqual(\n             response,\n             {\n-                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?q=2\',  # noqa\n+                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?query=2\',  # noqa\n                 u\'items\': [\n                     {\n                         u\'title\': u\'Title 2\',\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-21T09:20:51+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.restapi/commit/d6f98f79e9adf00b9d936039a0b6a47233786e31

Commit first draft of p.restapi 4.x upgrade guide.

Files changed:
M docs/source/upgrade-guide.rst

b'diff --git a/docs/source/upgrade-guide.rst b/docs/source/upgrade-guide.rst\nindex 709d94bb..33dd7509 100644\n--- a/docs/source/upgrade-guide.rst\n+++ b/docs/source/upgrade-guide.rst\n@@ -4,6 +4,134 @@ Upgrade Guide\n This upgrade guide lists all breaking changes in plone.restapi and explains the necessary steps that are needed to upgrade to the lastest version.\n \n \n+Upgrading to plone.restapi 4.x\n+------------------------------\n+\n+Vocabularies\n+^^^^^^^^^^^^\n+\n+Choice fields using named vocabularies are now serialized\n+with a ``vocabulary`` property giving the URL of the ``@vocabularies``\n+endpoint for the vocabulary instead of including ``choices``,\n+``enum`` and ``enumNames`` inline.\n+\n+Old Response::\n+\n+    "choices": [\n+        [\n+            "de",\n+            "Deutsch"\n+        ],\n+        [\n+            "en",\n+            "English"\n+        ],\n+    ],\n+    "enum": [\n+      "de",\n+      "en",\n+    ],\n+    "enumNames": [\n+      "Deutsch",\n+      "English",\n+    ],\n+\n+New response::\n+\n+    "vocabulary": {\n+        "@id": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.CaptchaVocabulary"\n+    },\n+\n+  - Serialize widget parameters into a ``widgetOptions`` object\n+    instead of adding them to the top level of the schema property.\n+\n+Old response::\n+\n+      "vocabulary": "plone.app.vocabularies.Users"\n+\n+New response::\n+\n+      "widgetOptions": {\n+        "pattern_options": {\n+          "recentlyUsed": true\n+        },\n+        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+      }\n+\n+Vocabularies Subjects Field\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+The ``subjects`` field is now serialized as an ``array``\n+of ``string`` items using the ``plone.app.vocabularies.Keywords`` vocabulary.\n+\n+Old response::\n+\n+    "subjects": {\n+      "choices": [],\n+      "enum": [],\n+      "enumNames": [],\n+    }\n+    "type": "string"\n+\n+New response::\n+\n+    "additionalItems": true,\n+    "type": "array",\n+    "uniqueItems": true,\n+    "widgetOptions": {\n+        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+    }\n+    "items": {\n+      "description": "",\n+      "title": "",\n+      "type": "string"\n+    },\n+\n+Vocabularies Endpoint\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+The vocabularies endpoint does no longer returns an ``@id`` for terms.\n+\n+The results are batched, and terms are now listed as ``items`` instead of ``terms`` to match other batched responses.\n+\n+Batch size is 25 by default but can be overridden using the ``b_size`` parameter.\n+\n+Old response::\n+\n+{\n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n+  "terms": [\n+    {\n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Collection",\n+      "title": "Collection",\n+      "token": "Collection"\n+    },\n+    ...\n+  ]\n+}\n+\n+New response::\n+\n+{\n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n+  "items": [\n+      {\n+        "title": "Collection",\n+        "token": "Collection"\n+      },\n+      ...\n+  ],\n+  "items_total": 12\n+}\n+\n+\n+New Features:\n+\n+- ``@vocabularies`` service: Use ``query`` parameter to filter terms by title\n+  (case-insensitive).\n+  [davisagli]\n+\n+\n Upgrading to plone.restapi 3.x\n ------------------------------\n \n@@ -12,7 +140,7 @@ Image scales\n \n Image download URLs and image scale URLs are created using the UID based url formats. This allows Plone to create different URLs when the image changes and thus ensuring caches are updated.\n \n-Old Response:: \n+Old Response::\n \n      {\n        "icon": {\n@@ -43,7 +171,7 @@ New Response::\n        },\n       ...\n       }\n-     \n+\n \n @sharing endpoint\n ^^^^^^^^^^^^^^^^^\n@@ -56,7 +184,7 @@ Old Response::\n \n   HTTP/1.1 200 OK\n   Content-Type: application/json\n-  \n+\n   {\n     "available_roles": [\n       "Contributor",\n@@ -75,7 +203,7 @@ New Response::\n \n   HTTP/1.1 200 OK\n   Content-Type: application/json\n-  \n+\n   {\n     "available_roles": [\n       {\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-21T10:49:54+02:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/39217dccfc3f07bfee8fb892aa1e21cffc8e10bf

Add query by token and translation of the returned title to the vocab endpoint

Files changed:
M src/plone/restapi/serializer/vocabularies.py
M src/plone/restapi/tests/test_services_vocabularies.py

b"diff --git a/src/plone/restapi/serializer/vocabularies.py b/src/plone/restapi/serializer/vocabularies.py\nindex 8e5fd135..d4e3593e 100644\n--- a/src/plone/restapi/serializer/vocabularies.py\n+++ b/src/plone/restapi/serializer/vocabularies.py\n@@ -3,6 +3,7 @@\n from plone.restapi.interfaces import ISerializeToJson\n from zope.component import adapter\n from zope.component import getMultiAdapter\n+from zope.i18n import translate\n from zope.interface import implementer\n from zope.interface import Interface\n from zope.schema.interfaces import ITitledTokenizedTerm\n@@ -21,12 +22,19 @@ def __init__(self, context, request):\n     def __call__(self, vocabulary_id):\n         vocabulary = self.context\n         query = self.request.form.get('query', '')\n+        token = self.request.form.get('token', '')\n \n         terms = []\n         for term in vocabulary:\n-            if query.lower() not in term.title.lower():\n-                continue\n-            terms.append(term)\n+            if token:\n+                # Ignore any query param\n+                if token.lower() not in term.token.lower():\n+                    continue\n+                terms.append(term)\n+            else:\n+                if query.lower() not in term.title.lower():\n+                    continue\n+                terms.append(term)\n \n         batch = HypermediaBatch(self.request, terms)\n \n@@ -61,5 +69,5 @@ def __call__(self):\n         title = term.title if ITitledTokenizedTerm.providedBy(term) else token\n         return {\n             'token': token,\n-            'title': title\n+            'title': translate(title, context=self.request)\n         }\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 33301b01..9cc9eacc 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -117,6 +117,69 @@ def test_get_vocabulary_filtered(self):\n             }\n         )\n \n+    def test_get_vocabulary_filtered_by_token(self):\n+        response = self.api_session.get(\n+            '/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1'\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        response = response.json()\n+        self.assertEqual(\n+            response,\n+            {\n+                u'@id': self.portal_url + u'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1',  # noqa\n+                u'items': [\n+                    {\n+                        u'title': u'Title 1',\n+                        u'token': u'token1',\n+                    }\n+                ],\n+                u'items_total': 1,\n+            }\n+        )\n+\n+    def test_get_vocabulary_filtered_by_token_ignore_query(self):\n+        response = self.api_session.get(\n+            '/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&query=Title' # noqa\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        response = response.json()\n+        self.assertEqual(\n+            response,\n+            {\n+                u'@id': self.portal_url + u'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&query=Title',  # noqa\n+                u'items': [\n+                    {\n+                        u'title': u'Title 1',\n+                        u'token': u'token1',\n+                    }\n+                ],\n+                u'items_total': 1,\n+            }\n+        )\n+\n+    def test_get_corner_case_vocabulary_filtered_by_token(self):\n+        response = self.api_session.get(\n+            '/@vocabularies/plone.app.vocabularies.Weekdays?token=0'\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        response = response.json()\n+        self.assertEqual(\n+            response,\n+            {\n+                u'@id': self.portal_url + u'/@vocabularies/plone.app.vocabularies.Weekdays?token=0',  # noqa\n+                u'items': [\n+                    {\n+                        'title': 'Monday',\n+                        'token': '0'\n+                    }\n+                ],\n+                u'items_total': 1,\n+            }\n+        )\n+\n     def test_get_unknown_vocabulary(self):\n         response = self.api_session.get(\n             '/@vocabularies/unknown.vocabulary')\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-21T18:46:36+02:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/1cdce3e3b59f38ac6f2250105e35e005331fc3c8

Add missing JSON LD link for vocabulary inside the widgetOptions field.

Files changed:
M src/plone/restapi/types/adapters.py

b"diff --git a/src/plone/restapi/types/adapters.py b/src/plone/restapi/types/adapters.py\nindex 2ff8fa60..78c65985 100644\n--- a/src/plone/restapi/types/adapters.py\n+++ b/src/plone/restapi/types/adapters.py\n@@ -92,8 +92,9 @@ def get_widget_params(self):\n         params = all_params.get(self.field.getName(), {})\n         if 'vocabulary' in params:\n             vocab_name = params['vocabulary']\n-            params['vocabulary'] = get_vocabulary_url(\n-                vocab_name, self.context, self.request)\n+            params['vocabulary'] = {\n+                    '@id': get_vocabulary_url(\n+                        vocab_name, self.context, self.request)}\n         return params\n \n \n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-21T18:56:01+02:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/7b0768ad4cd9e1a96b31fe23f62cec0c59138273

Include response test files

Files changed:
M src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp
M src/plone/restapi/tests/http-examples/types_document.resp

b'diff --git a/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\nindex e1c9b2f1..0307bb74 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n@@ -92,7 +92,9 @@ Content-Type: application/json+schema\n       "type": "array", \n       "uniqueItems": true, \n       "widgetOptions": {\n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        }\n       }\n     }, \n     "creators": {\n@@ -107,7 +109,9 @@ Content-Type: application/json+schema\n       "type": "array", \n       "uniqueItems": true, \n       "widgetOptions": {\n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        }\n       }\n     }, \n     "description": {\n@@ -170,7 +174,9 @@ Content-Type: application/json+schema\n         "pattern_options": {\n           "recentlyUsed": true\n         }, \n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        }\n       }\n     }, \n     "rights": {\n@@ -192,7 +198,9 @@ Content-Type: application/json+schema\n       "type": "array", \n       "uniqueItems": true, \n       "widgetOptions": {\n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+        }\n       }\n     }, \n     "title": {\ndiff --git a/src/plone/restapi/tests/http-examples/types_document.resp b/src/plone/restapi/tests/http-examples/types_document.resp\nindex 969f4e51..f2740b95 100644\n--- a/src/plone/restapi/tests/http-examples/types_document.resp\n+++ b/src/plone/restapi/tests/http-examples/types_document.resp\n@@ -95,7 +95,9 @@ Content-Type: application/json+schema\n       "type": "array", \n       "uniqueItems": true, \n       "widgetOptions": {\n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        }\n       }\n     }, \n     "creators": {\n@@ -110,7 +112,9 @@ Content-Type: application/json+schema\n       "type": "array", \n       "uniqueItems": true, \n       "widgetOptions": {\n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        }\n       }\n     }, \n     "description": {\n@@ -167,7 +171,9 @@ Content-Type: application/json+schema\n         "pattern_options": {\n           "recentlyUsed": true\n         }, \n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        }\n       }\n     }, \n     "rights": {\n@@ -189,7 +195,9 @@ Content-Type: application/json+schema\n       "type": "array", \n       "uniqueItems": true, \n       "widgetOptions": {\n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+        }\n       }\n     }, \n     "table_of_contents": {\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-22T12:06:59+02:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/c7d4f413bfc96d4c41a66fbc95973c4c4d8ac2de

Suggestions for the upgrade guide

Files changed:
M docs/source/upgrade-guide.rst

b'diff --git a/docs/source/upgrade-guide.rst b/docs/source/upgrade-guide.rst\nindex 33dd7509..d9a0604c 100644\n--- a/docs/source/upgrade-guide.rst\n+++ b/docs/source/upgrade-guide.rst\n@@ -10,7 +10,7 @@ Upgrading to plone.restapi 4.x\n Vocabularies\n ^^^^^^^^^^^^\n \n-Choice fields using named vocabularies are now serialized\n+Choice and List fields using named vocabularies are now serialized\n with a ``vocabulary`` property giving the URL of the ``@vocabularies``\n endpoint for the vocabulary instead of including ``choices``,\n ``enum`` and ``enumNames`` inline.\n@@ -55,11 +55,11 @@ New response::\n         "pattern_options": {\n           "recentlyUsed": true\n         },\n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        "vocabulary": { "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users" }\n       }\n \n-Vocabularies Subjects Field\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+Example: Vocabularies Subjects Field\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n The ``subjects`` field is now serialized as an ``array``\n of ``string`` items using the ``plone.app.vocabularies.Keywords`` vocabulary.\n@@ -79,14 +79,137 @@ New response::\n     "type": "array",\n     "uniqueItems": true,\n     "widgetOptions": {\n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n-    }\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+      }\n+    },\n     "items": {\n       "description": "",\n       "title": "",\n       "type": "string"\n     },\n \n+Example: Available Time Zones Field (vocabulary in ``items``)\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Old response::\n+\n+    "available_timezones": {\n+      "additionalItems": true,\n+      "default": [],\n+      "description": "The timezones, which should be available for the portal. Can be set for users and events",\n+      "items": {\n+        "choices": [\n+          [\n+            "Africa/Abidjan",\n+            "Africa/Abidjan"\n+          ],\n+          [\n+            "Africa/Accra",\n+            "Africa/Accra"\n+          ],\n+          ...\n+        "enum": [\n+          ...\n+        ],\n+        "enumNames": [\n+          ...\n+        ]\n+      },\n+      title: "Available timezones",\n+      type: "array",\n+      uniqueItems: true,\n+    }\n+\n+New response::\n+\n+    "available_timezones": {\n+      "additionalItems": true,\n+      "default": [],\n+      "description": "The timezones, which should be available for the portal. Can be set for users and events",\n+      "items": {\n+        "description": "",\n+        "title": "",\n+        "type": "string",\n+        "vocabulary": {\n+          "@id": "http://localhost:8080/Plone/@vocabularies/plone.app.vocabularies.Timezones"\n+        }\n+      },\n+      "title": "Available timezones",\n+      "type": "array",\n+      "uniqueItems": true\n+    },\n+\n+Example: Weekday Field (vocabulary in main property)\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Old response::\n+\n+    "first_weekday": {\n+      "choices": [\n+        [\n+          "0",\n+          "Monday"\n+        ],\n+        [\n+          "1",\n+          "Tuesday"\n+        ],\n+        [\n+          "2",\n+          "Wednesday"\n+        ],\n+        [\n+          "3",\n+          "Thursday"\n+        ],\n+        [\n+          "4",\n+          "Friday"\n+        ],\n+        [\n+          "5",\n+          "Saturday"\n+        ],\n+        [\n+          "6",\n+          "Sunday"\n+        ]\n+      ],\n+      "description": "First day in the week.",\n+      "enum": [\n+        "0",\n+        "1",\n+        "2",\n+        "3",\n+        "4",\n+        "5",\n+        "6"\n+      ],\n+      "enumNames": [\n+        "Monday",\n+        "Tuesday",\n+        "Wednesday",\n+        "Thursday",\n+        "Friday",\n+        "Saturday",\n+        "Sunday"\n+      ],\n+      "title": "First weekday",\n+      "type": "string"\n+    },\n+\n+New response::\n+\n+    "first_weekday": {\n+      "description": "First day in the week.",\n+      "title": "First weekday",\n+      "type": "string",\n+      "vocabulary": {\n+        "@id": "http://localhost:8080/Plone/@vocabularies/plone.app.vocabularies.Weekdays"\n+      }\n+    },\n+\n Vocabularies Endpoint\n ^^^^^^^^^^^^^^^^^^^^^\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-22T17:14:29+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/187c60ebe9f665395d113781965f26bed744cea3

Merge pull request #717 from plone/completevocabupgradeguide

Suggestions for the upgrade guide

Files changed:
M docs/source/upgrade-guide.rst

b'diff --git a/docs/source/upgrade-guide.rst b/docs/source/upgrade-guide.rst\nindex 33dd7509..d9a0604c 100644\n--- a/docs/source/upgrade-guide.rst\n+++ b/docs/source/upgrade-guide.rst\n@@ -10,7 +10,7 @@ Upgrading to plone.restapi 4.x\n Vocabularies\n ^^^^^^^^^^^^\n \n-Choice fields using named vocabularies are now serialized\n+Choice and List fields using named vocabularies are now serialized\n with a ``vocabulary`` property giving the URL of the ``@vocabularies``\n endpoint for the vocabulary instead of including ``choices``,\n ``enum`` and ``enumNames`` inline.\n@@ -55,11 +55,11 @@ New response::\n         "pattern_options": {\n           "recentlyUsed": true\n         },\n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        "vocabulary": { "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users" }\n       }\n \n-Vocabularies Subjects Field\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+Example: Vocabularies Subjects Field\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n The ``subjects`` field is now serialized as an ``array``\n of ``string`` items using the ``plone.app.vocabularies.Keywords`` vocabulary.\n@@ -79,14 +79,137 @@ New response::\n     "type": "array",\n     "uniqueItems": true,\n     "widgetOptions": {\n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n-    }\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+      }\n+    },\n     "items": {\n       "description": "",\n       "title": "",\n       "type": "string"\n     },\n \n+Example: Available Time Zones Field (vocabulary in ``items``)\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Old response::\n+\n+    "available_timezones": {\n+      "additionalItems": true,\n+      "default": [],\n+      "description": "The timezones, which should be available for the portal. Can be set for users and events",\n+      "items": {\n+        "choices": [\n+          [\n+            "Africa/Abidjan",\n+            "Africa/Abidjan"\n+          ],\n+          [\n+            "Africa/Accra",\n+            "Africa/Accra"\n+          ],\n+          ...\n+        "enum": [\n+          ...\n+        ],\n+        "enumNames": [\n+          ...\n+        ]\n+      },\n+      title: "Available timezones",\n+      type: "array",\n+      uniqueItems: true,\n+    }\n+\n+New response::\n+\n+    "available_timezones": {\n+      "additionalItems": true,\n+      "default": [],\n+      "description": "The timezones, which should be available for the portal. Can be set for users and events",\n+      "items": {\n+        "description": "",\n+        "title": "",\n+        "type": "string",\n+        "vocabulary": {\n+          "@id": "http://localhost:8080/Plone/@vocabularies/plone.app.vocabularies.Timezones"\n+        }\n+      },\n+      "title": "Available timezones",\n+      "type": "array",\n+      "uniqueItems": true\n+    },\n+\n+Example: Weekday Field (vocabulary in main property)\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Old response::\n+\n+    "first_weekday": {\n+      "choices": [\n+        [\n+          "0",\n+          "Monday"\n+        ],\n+        [\n+          "1",\n+          "Tuesday"\n+        ],\n+        [\n+          "2",\n+          "Wednesday"\n+        ],\n+        [\n+          "3",\n+          "Thursday"\n+        ],\n+        [\n+          "4",\n+          "Friday"\n+        ],\n+        [\n+          "5",\n+          "Saturday"\n+        ],\n+        [\n+          "6",\n+          "Sunday"\n+        ]\n+      ],\n+      "description": "First day in the week.",\n+      "enum": [\n+        "0",\n+        "1",\n+        "2",\n+        "3",\n+        "4",\n+        "5",\n+        "6"\n+      ],\n+      "enumNames": [\n+        "Monday",\n+        "Tuesday",\n+        "Wednesday",\n+        "Thursday",\n+        "Friday",\n+        "Saturday",\n+        "Sunday"\n+      ],\n+      "title": "First weekday",\n+      "type": "string"\n+    },\n+\n+New response::\n+\n+    "first_weekday": {\n+      "description": "First day in the week.",\n+      "title": "First weekday",\n+      "type": "string",\n+      "vocabulary": {\n+        "@id": "http://localhost:8080/Plone/@vocabularies/plone.app.vocabularies.Weekdays"\n+      }\n+    },\n+\n Vocabularies Endpoint\n ^^^^^^^^^^^^^^^^^^^^^\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-22T17:15:35+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/c21e193876ae68e625560ae982d901cf301ccad0

Merge pull request #716 from plone/filterbytoken

Add query by token and translation of the returned title to the vocab…

Files changed:
M src/plone/restapi/serializer/vocabularies.py
M src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp
M src/plone/restapi/tests/http-examples/types_document.resp
M src/plone/restapi/tests/test_services_vocabularies.py
M src/plone/restapi/types/adapters.py

b'diff --git a/src/plone/restapi/serializer/vocabularies.py b/src/plone/restapi/serializer/vocabularies.py\nindex 8e5fd135..d4e3593e 100644\n--- a/src/plone/restapi/serializer/vocabularies.py\n+++ b/src/plone/restapi/serializer/vocabularies.py\n@@ -3,6 +3,7 @@\n from plone.restapi.interfaces import ISerializeToJson\n from zope.component import adapter\n from zope.component import getMultiAdapter\n+from zope.i18n import translate\n from zope.interface import implementer\n from zope.interface import Interface\n from zope.schema.interfaces import ITitledTokenizedTerm\n@@ -21,12 +22,19 @@ def __init__(self, context, request):\n     def __call__(self, vocabulary_id):\n         vocabulary = self.context\n         query = self.request.form.get(\'query\', \'\')\n+        token = self.request.form.get(\'token\', \'\')\n \n         terms = []\n         for term in vocabulary:\n-            if query.lower() not in term.title.lower():\n-                continue\n-            terms.append(term)\n+            if token:\n+                # Ignore any query param\n+                if token.lower() not in term.token.lower():\n+                    continue\n+                terms.append(term)\n+            else:\n+                if query.lower() not in term.title.lower():\n+                    continue\n+                terms.append(term)\n \n         batch = HypermediaBatch(self.request, terms)\n \n@@ -61,5 +69,5 @@ def __call__(self):\n         title = term.title if ITitledTokenizedTerm.providedBy(term) else token\n         return {\n             \'token\': token,\n-            \'title\': title\n+            \'title\': translate(title, context=self.request)\n         }\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\nindex e1c9b2f1..0307bb74 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n@@ -92,7 +92,9 @@ Content-Type: application/json+schema\n       "type": "array", \n       "uniqueItems": true, \n       "widgetOptions": {\n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        }\n       }\n     }, \n     "creators": {\n@@ -107,7 +109,9 @@ Content-Type: application/json+schema\n       "type": "array", \n       "uniqueItems": true, \n       "widgetOptions": {\n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        }\n       }\n     }, \n     "description": {\n@@ -170,7 +174,9 @@ Content-Type: application/json+schema\n         "pattern_options": {\n           "recentlyUsed": true\n         }, \n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        }\n       }\n     }, \n     "rights": {\n@@ -192,7 +198,9 @@ Content-Type: application/json+schema\n       "type": "array", \n       "uniqueItems": true, \n       "widgetOptions": {\n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+        }\n       }\n     }, \n     "title": {\ndiff --git a/src/plone/restapi/tests/http-examples/types_document.resp b/src/plone/restapi/tests/http-examples/types_document.resp\nindex 969f4e51..f2740b95 100644\n--- a/src/plone/restapi/tests/http-examples/types_document.resp\n+++ b/src/plone/restapi/tests/http-examples/types_document.resp\n@@ -95,7 +95,9 @@ Content-Type: application/json+schema\n       "type": "array", \n       "uniqueItems": true, \n       "widgetOptions": {\n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        }\n       }\n     }, \n     "creators": {\n@@ -110,7 +112,9 @@ Content-Type: application/json+schema\n       "type": "array", \n       "uniqueItems": true, \n       "widgetOptions": {\n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        }\n       }\n     }, \n     "description": {\n@@ -167,7 +171,9 @@ Content-Type: application/json+schema\n         "pattern_options": {\n           "recentlyUsed": true\n         }, \n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        }\n       }\n     }, \n     "rights": {\n@@ -189,7 +195,9 @@ Content-Type: application/json+schema\n       "type": "array", \n       "uniqueItems": true, \n       "widgetOptions": {\n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+        }\n       }\n     }, \n     "table_of_contents": {\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 33301b01..9cc9eacc 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -117,6 +117,69 @@ def test_get_vocabulary_filtered(self):\n             }\n         )\n \n+    def test_get_vocabulary_filtered_by_token(self):\n+        response = self.api_session.get(\n+            \'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1\'\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        response = response.json()\n+        self.assertEqual(\n+            response,\n+            {\n+                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1\',  # noqa\n+                u\'items\': [\n+                    {\n+                        u\'title\': u\'Title 1\',\n+                        u\'token\': u\'token1\',\n+                    }\n+                ],\n+                u\'items_total\': 1,\n+            }\n+        )\n+\n+    def test_get_vocabulary_filtered_by_token_ignore_query(self):\n+        response = self.api_session.get(\n+            \'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&query=Title\' # noqa\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        response = response.json()\n+        self.assertEqual(\n+            response,\n+            {\n+                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&query=Title\',  # noqa\n+                u\'items\': [\n+                    {\n+                        u\'title\': u\'Title 1\',\n+                        u\'token\': u\'token1\',\n+                    }\n+                ],\n+                u\'items_total\': 1,\n+            }\n+        )\n+\n+    def test_get_corner_case_vocabulary_filtered_by_token(self):\n+        response = self.api_session.get(\n+            \'/@vocabularies/plone.app.vocabularies.Weekdays?token=0\'\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        response = response.json()\n+        self.assertEqual(\n+            response,\n+            {\n+                u\'@id\': self.portal_url + u\'/@vocabularies/plone.app.vocabularies.Weekdays?token=0\',  # noqa\n+                u\'items\': [\n+                    {\n+                        \'title\': \'Monday\',\n+                        \'token\': \'0\'\n+                    }\n+                ],\n+                u\'items_total\': 1,\n+            }\n+        )\n+\n     def test_get_unknown_vocabulary(self):\n         response = self.api_session.get(\n             \'/@vocabularies/unknown.vocabulary\')\ndiff --git a/src/plone/restapi/types/adapters.py b/src/plone/restapi/types/adapters.py\nindex 2ff8fa60..78c65985 100644\n--- a/src/plone/restapi/types/adapters.py\n+++ b/src/plone/restapi/types/adapters.py\n@@ -92,8 +92,9 @@ def get_widget_params(self):\n         params = all_params.get(self.field.getName(), {})\n         if \'vocabulary\' in params:\n             vocab_name = params[\'vocabulary\']\n-            params[\'vocabulary\'] = get_vocabulary_url(\n-                vocab_name, self.context, self.request)\n+            params[\'vocabulary\'] = {\n+                    \'@id\': get_vocabulary_url(\n+                        vocab_name, self.context, self.request)}\n         return params\n \n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-22T17:28:47+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/3d7f76fa570681308c5c356b56eaa71b0a09c07b

Merge pull request #715 from plone/filtered-batched-vocabs-upgrade-guide

Commit first draft of p.restapi 4.x upgrade guide.

Files changed:
M docs/source/upgrade-guide.rst

b'diff --git a/docs/source/upgrade-guide.rst b/docs/source/upgrade-guide.rst\nindex 709d94bb..d9a0604c 100644\n--- a/docs/source/upgrade-guide.rst\n+++ b/docs/source/upgrade-guide.rst\n@@ -4,6 +4,257 @@ Upgrade Guide\n This upgrade guide lists all breaking changes in plone.restapi and explains the necessary steps that are needed to upgrade to the lastest version.\n \n \n+Upgrading to plone.restapi 4.x\n+------------------------------\n+\n+Vocabularies\n+^^^^^^^^^^^^\n+\n+Choice and List fields using named vocabularies are now serialized\n+with a ``vocabulary`` property giving the URL of the ``@vocabularies``\n+endpoint for the vocabulary instead of including ``choices``,\n+``enum`` and ``enumNames`` inline.\n+\n+Old Response::\n+\n+    "choices": [\n+        [\n+            "de",\n+            "Deutsch"\n+        ],\n+        [\n+            "en",\n+            "English"\n+        ],\n+    ],\n+    "enum": [\n+      "de",\n+      "en",\n+    ],\n+    "enumNames": [\n+      "Deutsch",\n+      "English",\n+    ],\n+\n+New response::\n+\n+    "vocabulary": {\n+        "@id": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.CaptchaVocabulary"\n+    },\n+\n+  - Serialize widget parameters into a ``widgetOptions`` object\n+    instead of adding them to the top level of the schema property.\n+\n+Old response::\n+\n+      "vocabulary": "plone.app.vocabularies.Users"\n+\n+New response::\n+\n+      "widgetOptions": {\n+        "pattern_options": {\n+          "recentlyUsed": true\n+        },\n+        "vocabulary": { "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users" }\n+      }\n+\n+Example: Vocabularies Subjects Field\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+The ``subjects`` field is now serialized as an ``array``\n+of ``string`` items using the ``plone.app.vocabularies.Keywords`` vocabulary.\n+\n+Old response::\n+\n+    "subjects": {\n+      "choices": [],\n+      "enum": [],\n+      "enumNames": [],\n+    }\n+    "type": "string"\n+\n+New response::\n+\n+    "additionalItems": true,\n+    "type": "array",\n+    "uniqueItems": true,\n+    "widgetOptions": {\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+      }\n+    },\n+    "items": {\n+      "description": "",\n+      "title": "",\n+      "type": "string"\n+    },\n+\n+Example: Available Time Zones Field (vocabulary in ``items``)\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Old response::\n+\n+    "available_timezones": {\n+      "additionalItems": true,\n+      "default": [],\n+      "description": "The timezones, which should be available for the portal. Can be set for users and events",\n+      "items": {\n+        "choices": [\n+          [\n+            "Africa/Abidjan",\n+            "Africa/Abidjan"\n+          ],\n+          [\n+            "Africa/Accra",\n+            "Africa/Accra"\n+          ],\n+          ...\n+        "enum": [\n+          ...\n+        ],\n+        "enumNames": [\n+          ...\n+        ]\n+      },\n+      title: "Available timezones",\n+      type: "array",\n+      uniqueItems: true,\n+    }\n+\n+New response::\n+\n+    "available_timezones": {\n+      "additionalItems": true,\n+      "default": [],\n+      "description": "The timezones, which should be available for the portal. Can be set for users and events",\n+      "items": {\n+        "description": "",\n+        "title": "",\n+        "type": "string",\n+        "vocabulary": {\n+          "@id": "http://localhost:8080/Plone/@vocabularies/plone.app.vocabularies.Timezones"\n+        }\n+      },\n+      "title": "Available timezones",\n+      "type": "array",\n+      "uniqueItems": true\n+    },\n+\n+Example: Weekday Field (vocabulary in main property)\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Old response::\n+\n+    "first_weekday": {\n+      "choices": [\n+        [\n+          "0",\n+          "Monday"\n+        ],\n+        [\n+          "1",\n+          "Tuesday"\n+        ],\n+        [\n+          "2",\n+          "Wednesday"\n+        ],\n+        [\n+          "3",\n+          "Thursday"\n+        ],\n+        [\n+          "4",\n+          "Friday"\n+        ],\n+        [\n+          "5",\n+          "Saturday"\n+        ],\n+        [\n+          "6",\n+          "Sunday"\n+        ]\n+      ],\n+      "description": "First day in the week.",\n+      "enum": [\n+        "0",\n+        "1",\n+        "2",\n+        "3",\n+        "4",\n+        "5",\n+        "6"\n+      ],\n+      "enumNames": [\n+        "Monday",\n+        "Tuesday",\n+        "Wednesday",\n+        "Thursday",\n+        "Friday",\n+        "Saturday",\n+        "Sunday"\n+      ],\n+      "title": "First weekday",\n+      "type": "string"\n+    },\n+\n+New response::\n+\n+    "first_weekday": {\n+      "description": "First day in the week.",\n+      "title": "First weekday",\n+      "type": "string",\n+      "vocabulary": {\n+        "@id": "http://localhost:8080/Plone/@vocabularies/plone.app.vocabularies.Weekdays"\n+      }\n+    },\n+\n+Vocabularies Endpoint\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+The vocabularies endpoint does no longer returns an ``@id`` for terms.\n+\n+The results are batched, and terms are now listed as ``items`` instead of ``terms`` to match other batched responses.\n+\n+Batch size is 25 by default but can be overridden using the ``b_size`` parameter.\n+\n+Old response::\n+\n+{\n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n+  "terms": [\n+    {\n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Collection",\n+      "title": "Collection",\n+      "token": "Collection"\n+    },\n+    ...\n+  ]\n+}\n+\n+New response::\n+\n+{\n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n+  "items": [\n+      {\n+        "title": "Collection",\n+        "token": "Collection"\n+      },\n+      ...\n+  ],\n+  "items_total": 12\n+}\n+\n+\n+New Features:\n+\n+- ``@vocabularies`` service: Use ``query`` parameter to filter terms by title\n+  (case-insensitive).\n+  [davisagli]\n+\n+\n Upgrading to plone.restapi 3.x\n ------------------------------\n \n@@ -12,7 +263,7 @@ Image scales\n \n Image download URLs and image scale URLs are created using the UID based url formats. This allows Plone to create different URLs when the image changes and thus ensuring caches are updated.\n \n-Old Response:: \n+Old Response::\n \n      {\n        "icon": {\n@@ -43,7 +294,7 @@ New Response::\n        },\n       ...\n       }\n-     \n+\n \n @sharing endpoint\n ^^^^^^^^^^^^^^^^^\n@@ -56,7 +307,7 @@ Old Response::\n \n   HTTP/1.1 200 OK\n   Content-Type: application/json\n-  \n+\n   {\n     "available_roles": [\n       "Contributor",\n@@ -75,7 +326,7 @@ New Response::\n \n   HTTP/1.1 200 OK\n   Content-Type: application/json\n-  \n+\n   {\n     "available_roles": [\n       {\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-22T17:37:15+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/8bb2e5627e518826b4ea2899eaaf1bdec5ba1ee7

Merge pull request #714 from plone/filtered-batched-vocabs-json-ld

Filtered batched vocabs json ld

Files changed:
M src/plone/restapi/tests/http-examples/controlpanels_get_item.resp
M src/plone/restapi/tests/http-examples/registry_get_list.resp
M src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp
M src/plone/restapi/tests/http-examples/types_document.resp
M src/plone/restapi/tests/test_types.py
M src/plone/restapi/types/adapters.py

b'diff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\nindex c3bd8d37..aee68a51 100644\n--- a/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n@@ -52,7 +52,9 @@ Content-Type: application/json\n         "description": "Select the default wysiwyg editor. Users will be able to choose their own or select to use the site default.", \n         "title": "Default editor", \n         "type": "string", \n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AvailableEditors"\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AvailableEditors"\n+        }\n       }, \n       "enable_link_integrity_checks": {\n         "default": true, \ndiff --git a/src/plone/restapi/tests/http-examples/registry_get_list.resp b/src/plone/restapi/tests/http-examples/registry_get_list.resp\nindex 43fcc7c9..5d13bb43 100644\n--- a/src/plone/restapi/tests/http-examples/registry_get_list.resp\n+++ b/src/plone/restapi/tests/http-examples/registry_get_list.resp\n@@ -191,7 +191,9 @@ Content-Type: application/json\n             "description": "", \n             "title": "", \n             "type": "string", \n-            "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SyndicatableFeedItems"\n+            "vocabulary": {\n+              "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SyndicatableFeedItems"\n+            }\n           }, \n           "title": "Site RSS", \n           "type": "array", \n@@ -343,7 +345,9 @@ Content-Type: application/json\n             "description": "", \n             "title": "", \n             "type": "string", \n-            "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AllowableContentTypes"\n+            "vocabulary": {\n+              "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AllowableContentTypes"\n+            }\n           }, \n           "title": "Alternative formats", \n           "type": "array", \n@@ -399,7 +403,9 @@ Content-Type: application/json\n           "description": "Use this setting to enable or disable Captcha validation for comments. Install plone.formwidget.captcha, plone.formwidget.recaptcha, collective.akismet, or collective.z3cform.norobots if there are no options available.", \n           "title": "Captcha", \n           "type": "string", \n-          "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.CaptchaVocabulary"\n+          "vocabulary": {\n+            "@id": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.CaptchaVocabulary"\n+          }\n         }\n       }, \n       "value": "disabled"\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\nindex 0307bb74..977df0c5 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n@@ -149,7 +149,9 @@ Content-Type: application/json+schema\n       "description": "", \n       "title": "Idioma", \n       "type": "string", \n-      "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SupportedContentLanguages"\n+      "vocabulary": {\n+        "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SupportedContentLanguages"\n+      }\n     }, \n     "nextPreviousEnabled": {\n       "default": false, \n@@ -165,7 +167,9 @@ Content-Type: application/json+schema\n         "description": "", \n         "title": "Related", \n         "type": "string", \n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        }\n       }, \n       "title": "Contenido relacionado", \n       "type": "array", \ndiff --git a/src/plone/restapi/tests/http-examples/types_document.resp b/src/plone/restapi/tests/http-examples/types_document.resp\nindex f2740b95..3d58d183 100644\n--- a/src/plone/restapi/tests/http-examples/types_document.resp\n+++ b/src/plone/restapi/tests/http-examples/types_document.resp\n@@ -152,7 +152,9 @@ Content-Type: application/json+schema\n       "description": "", \n       "title": "Language", \n       "type": "string", \n-      "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SupportedContentLanguages"\n+      "vocabulary": {\n+        "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SupportedContentLanguages"\n+      }\n     }, \n     "relatedItems": {\n       "additionalItems": true, \n@@ -162,7 +164,9 @@ Content-Type: application/json+schema\n         "description": "", \n         "title": "Related", \n         "type": "string", \n-        "vocabulary": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        }\n       }, \n       "title": "Related Items", \n       "type": "array", \ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex 93b631f8..c637e071 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -410,7 +410,7 @@ def test_choice_named_vocab(self):\n                 \'type\': \'string\',\n                 \'title\': u\'My field\',\n                 \'description\': u\'My great field\',\n-                \'vocabulary\': u\'http://nohost/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes\'  # noqa\n+                \'vocabulary\': { \'@id\': u\'http://nohost/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes\' }  # noqa\n             },\n             adapter.get_schema()\n         )\ndiff --git a/src/plone/restapi/types/adapters.py b/src/plone/restapi/types/adapters.py\nindex 78c65985..677c3aa6 100644\n--- a/src/plone/restapi/types/adapters.py\n+++ b/src/plone/restapi/types/adapters.py\n@@ -261,8 +261,13 @@ def additional(self):\n         vocab_name = getattr(self.field, \'vocabularyName\', None)\n         if vocab_name:\n             return {\n-                \'vocabulary\': get_vocabulary_url(\n-                    vocab_name, self.context, self.request)\n+                \'vocabulary\': {\n+                    \'@id\': get_vocabulary_url(\n+                        vocab_name,\n+                        self.context,\n+                        self.request\n+                    )\n+                }\n             }\n \n         # Maybe we have an unnamed vocabulary or source.\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-22T17:48:03+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.restapi/commit/e22e4fd276fb1a297307720581fb9bf82fe18fd4

Rename vocabularies endpoint param 'query' to 'title'.

Files changed:
M src/plone/restapi/serializer/vocabularies.py
M src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req
M src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_services_vocabularies.py

b'diff --git a/src/plone/restapi/serializer/vocabularies.py b/src/plone/restapi/serializer/vocabularies.py\nindex d4e3593e..d1598d7e 100644\n--- a/src/plone/restapi/serializer/vocabularies.py\n+++ b/src/plone/restapi/serializer/vocabularies.py\n@@ -21,18 +21,18 @@ def __init__(self, context, request):\n \n     def __call__(self, vocabulary_id):\n         vocabulary = self.context\n-        query = self.request.form.get(\'query\', \'\')\n+        title = self.request.form.get(\'title\', \'\')\n         token = self.request.form.get(\'token\', \'\')\n \n         terms = []\n         for term in vocabulary:\n             if token:\n-                # Ignore any query param\n+                # Ignore any title param\n                 if token.lower() not in term.token.lower():\n                     continue\n                 terms.append(term)\n             else:\n-                if query.lower() not in term.title.lower():\n+                if title.lower() not in term.title.lower():\n                     continue\n                 terms.append(term)\n \ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req\nindex 21e9d33f..a46aae2d 100644\n--- a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req\n@@ -1,3 +1,3 @@\n-GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?query=doc HTTP/1.1\n+GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?title=doc HTTP/1.1\n Accept: application/json\n Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\nindex b14a80bc..52ec2577 100644\n--- a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\n@@ -2,7 +2,7 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?query=doc", \n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?title=doc", \n   "items": [\n     {\n       "title": "DX Test Document", \ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 6ff513cc..070d584a 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1127,7 +1127,7 @@ def test_documentation_vocabularies_get(self):\n     def test_documentation_vocabularies_get_filtered(self):\n         response = self.api_session.get(\n             \'/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?\'\n-            \'query=doc\'\n+            \'title=doc\'\n         )\n         save_request_and_response_for_docs(\n             \'vocabularies_get_filtered\', response)\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 9cc9eacc..92748858 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -98,7 +98,7 @@ def test_get_vocabulary_batched(self):\n \n     def test_get_vocabulary_filtered(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.restapi.tests.test_vocabulary?query=2\'\n+            \'/@vocabularies/plone.restapi.tests.test_vocabulary?title=2\'\n         )\n \n         self.assertEqual(200, response.status_code)\n@@ -106,7 +106,7 @@ def test_get_vocabulary_filtered(self):\n         self.assertEqual(\n             response,\n             {\n-                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?query=2\',  # noqa\n+                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?title=2\',  # noqa\n                 u\'items\': [\n                     {\n                         u\'title\': u\'Title 2\',\n@@ -138,9 +138,9 @@ def test_get_vocabulary_filtered_by_token(self):\n             }\n         )\n \n-    def test_get_vocabulary_filtered_by_token_ignore_query(self):\n+    def test_get_vocabulary_filtered_by_token_ignore_title(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&query=Title\' # noqa\n+            \'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&title=Title\'  # noqa\n         )\n \n         self.assertEqual(200, response.status_code)\n@@ -148,7 +148,7 @@ def test_get_vocabulary_filtered_by_token_ignore_query(self):\n         self.assertEqual(\n             response,\n             {\n-                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&query=Title\',  # noqa\n+                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&title=Title\',  # noqa\n                 u\'items\': [\n                     {\n                         u\'title\': u\'Title 1\',\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-22T18:56:02+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.restapi/commit/493bd23f35fab58b7e4b2ef3bfe6a4295698d872

Fix indentation in upgrade-guide.rst.

Files changed:
M docs/source/upgrade-guide.rst

b'diff --git a/docs/source/upgrade-guide.rst b/docs/source/upgrade-guide.rst\nindex d9a0604c..70724dc6 100644\n--- a/docs/source/upgrade-guide.rst\n+++ b/docs/source/upgrade-guide.rst\n@@ -221,31 +221,31 @@ Batch size is 25 by default but can be overridden using the ``b_size`` parameter\n \n Old response::\n \n-{\n-  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n-  "terms": [\n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Collection",\n-      "title": "Collection",\n-      "token": "Collection"\n-    },\n-    ...\n-  ]\n-}\n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n+      "terms": [\n+        {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Collection",\n+          "title": "Collection",\n+          "token": "Collection"\n+        },\n+        ...\n+      ]\n+    }\n \n New response::\n \n-{\n-  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n-  "items": [\n-      {\n-        "title": "Collection",\n-        "token": "Collection"\n-      },\n-      ...\n-  ],\n-  "items_total": 12\n-}\n+    {\n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n+      "items": [\n+          {\n+            "title": "Collection",\n+            "token": "Collection"\n+          },\n+          ...\n+      ],\n+      "items_total": 12\n+    }\n \n \n New Features:\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-22T19:00:30+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/7f21868d151f132b041e148b81f1c48eed7e5631

Merge pull request #718 from plone/filtered-batched-vocabs-query-to-title

Rename vocabularies endpoint param 'query' to 'title'.

Files changed:
M src/plone/restapi/serializer/vocabularies.py
M src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req
M src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_services_vocabularies.py

b'diff --git a/src/plone/restapi/serializer/vocabularies.py b/src/plone/restapi/serializer/vocabularies.py\nindex d4e3593e..d1598d7e 100644\n--- a/src/plone/restapi/serializer/vocabularies.py\n+++ b/src/plone/restapi/serializer/vocabularies.py\n@@ -21,18 +21,18 @@ def __init__(self, context, request):\n \n     def __call__(self, vocabulary_id):\n         vocabulary = self.context\n-        query = self.request.form.get(\'query\', \'\')\n+        title = self.request.form.get(\'title\', \'\')\n         token = self.request.form.get(\'token\', \'\')\n \n         terms = []\n         for term in vocabulary:\n             if token:\n-                # Ignore any query param\n+                # Ignore any title param\n                 if token.lower() not in term.token.lower():\n                     continue\n                 terms.append(term)\n             else:\n-                if query.lower() not in term.title.lower():\n+                if title.lower() not in term.title.lower():\n                     continue\n                 terms.append(term)\n \ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req\nindex 21e9d33f..a46aae2d 100644\n--- a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req\n@@ -1,3 +1,3 @@\n-GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?query=doc HTTP/1.1\n+GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?title=doc HTTP/1.1\n Accept: application/json\n Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\nindex b14a80bc..52ec2577 100644\n--- a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\n@@ -2,7 +2,7 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?query=doc", \n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?title=doc", \n   "items": [\n     {\n       "title": "DX Test Document", \ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 6ff513cc..070d584a 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1127,7 +1127,7 @@ def test_documentation_vocabularies_get(self):\n     def test_documentation_vocabularies_get_filtered(self):\n         response = self.api_session.get(\n             \'/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?\'\n-            \'query=doc\'\n+            \'title=doc\'\n         )\n         save_request_and_response_for_docs(\n             \'vocabularies_get_filtered\', response)\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 9cc9eacc..92748858 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -98,7 +98,7 @@ def test_get_vocabulary_batched(self):\n \n     def test_get_vocabulary_filtered(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.restapi.tests.test_vocabulary?query=2\'\n+            \'/@vocabularies/plone.restapi.tests.test_vocabulary?title=2\'\n         )\n \n         self.assertEqual(200, response.status_code)\n@@ -106,7 +106,7 @@ def test_get_vocabulary_filtered(self):\n         self.assertEqual(\n             response,\n             {\n-                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?query=2\',  # noqa\n+                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?title=2\',  # noqa\n                 u\'items\': [\n                     {\n                         u\'title\': u\'Title 2\',\n@@ -138,9 +138,9 @@ def test_get_vocabulary_filtered_by_token(self):\n             }\n         )\n \n-    def test_get_vocabulary_filtered_by_token_ignore_query(self):\n+    def test_get_vocabulary_filtered_by_token_ignore_title(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&query=Title\' # noqa\n+            \'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&title=Title\'  # noqa\n         )\n \n         self.assertEqual(200, response.status_code)\n@@ -148,7 +148,7 @@ def test_get_vocabulary_filtered_by_token_ignore_query(self):\n         self.assertEqual(\n             response,\n             {\n-                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&query=Title\',  # noqa\n+                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&title=Title\',  # noqa\n                 u\'items\': [\n                     {\n                         u\'title\': u\'Title 1\',\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-22T19:07:54+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.restapi/commit/5742222a348facdc7635a67d2bbfe4adb7d5a170

Merge branch 'filtered-batched-vocabs' of github.com:plone/plone.restapi into filtered-batched-vocabs

Files changed:
M src/plone/restapi/serializer/vocabularies.py
M src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req
M src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_services_vocabularies.py

b'diff --git a/src/plone/restapi/serializer/vocabularies.py b/src/plone/restapi/serializer/vocabularies.py\nindex d4e3593e..d1598d7e 100644\n--- a/src/plone/restapi/serializer/vocabularies.py\n+++ b/src/plone/restapi/serializer/vocabularies.py\n@@ -21,18 +21,18 @@ def __init__(self, context, request):\n \n     def __call__(self, vocabulary_id):\n         vocabulary = self.context\n-        query = self.request.form.get(\'query\', \'\')\n+        title = self.request.form.get(\'title\', \'\')\n         token = self.request.form.get(\'token\', \'\')\n \n         terms = []\n         for term in vocabulary:\n             if token:\n-                # Ignore any query param\n+                # Ignore any title param\n                 if token.lower() not in term.token.lower():\n                     continue\n                 terms.append(term)\n             else:\n-                if query.lower() not in term.title.lower():\n+                if title.lower() not in term.title.lower():\n                     continue\n                 terms.append(term)\n \ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req\nindex 21e9d33f..a46aae2d 100644\n--- a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req\n@@ -1,3 +1,3 @@\n-GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?query=doc HTTP/1.1\n+GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?title=doc HTTP/1.1\n Accept: application/json\n Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\nindex b14a80bc..52ec2577 100644\n--- a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\n@@ -2,7 +2,7 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?query=doc", \n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?title=doc", \n   "items": [\n     {\n       "title": "DX Test Document", \ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 6ff513cc..070d584a 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1127,7 +1127,7 @@ def test_documentation_vocabularies_get(self):\n     def test_documentation_vocabularies_get_filtered(self):\n         response = self.api_session.get(\n             \'/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?\'\n-            \'query=doc\'\n+            \'title=doc\'\n         )\n         save_request_and_response_for_docs(\n             \'vocabularies_get_filtered\', response)\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 9cc9eacc..92748858 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -98,7 +98,7 @@ def test_get_vocabulary_batched(self):\n \n     def test_get_vocabulary_filtered(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.restapi.tests.test_vocabulary?query=2\'\n+            \'/@vocabularies/plone.restapi.tests.test_vocabulary?title=2\'\n         )\n \n         self.assertEqual(200, response.status_code)\n@@ -106,7 +106,7 @@ def test_get_vocabulary_filtered(self):\n         self.assertEqual(\n             response,\n             {\n-                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?query=2\',  # noqa\n+                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?title=2\',  # noqa\n                 u\'items\': [\n                     {\n                         u\'title\': u\'Title 2\',\n@@ -138,9 +138,9 @@ def test_get_vocabulary_filtered_by_token(self):\n             }\n         )\n \n-    def test_get_vocabulary_filtered_by_token_ignore_query(self):\n+    def test_get_vocabulary_filtered_by_token_ignore_title(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&query=Title\' # noqa\n+            \'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&title=Title\'  # noqa\n         )\n \n         self.assertEqual(200, response.status_code)\n@@ -148,7 +148,7 @@ def test_get_vocabulary_filtered_by_token_ignore_query(self):\n         self.assertEqual(\n             response,\n             {\n-                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&query=Title\',  # noqa\n+                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&title=Title\',  # noqa\n                 u\'items\': [\n                     {\n                         u\'title\': u\'Title 1\',\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-22T19:14:10+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.restapi/commit/27e366f9601bf5194b1b51dee7976fd8c4baf71d

Improve vocabularies docs.

Files changed:
A src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.req
A src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.resp
A src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.req
A src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.resp
M docs/source/vocabularies.rst
M src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_services_vocabularies.py

b'diff --git a/docs/source/vocabularies.rst b/docs/source/vocabularies.rst\nindex 1cb046ef..7c4f3645 100644\n--- a/docs/source/vocabularies.rst\n+++ b/docs/source/vocabularies.rst\n@@ -1,11 +1,9 @@\n Vocabularies\n ============\n \n-Vocabularies are utilities containing a list of values grouped by interest or\n-different Plone features. For example,\n-``plone.app.vocabularies.ReallyUserFriendlyTypes`` will return all the content\n-types registered in Plone. The vocabularies return a list of objects with the\n-items ``@id``, ``title`` and ``token``.\n+Vocabularies are utilities containing a list of values grouped by interest or different Plone features.\n+For example, ``plone.app.vocabularies.ReallyUserFriendlyTypes`` will return all the content types registered in Plone.\n+The vocabularies return a list of objects with the items ``@id``, ``title`` and ``token``.\n \n .. note::\n \tThese docs are generated by code tests, therefore you will see some \'test\' contenttypes appear here.\n@@ -13,13 +11,12 @@ items ``@id``, ``title`` and ``token``.\n Get all vocabularies\n --------------------\n \n-To get a list of all the available content types, you can query using a GET to the @vocabulary endpoint:\n+To retrieve a list of all the available vocabularies, send a GET request to the @vocabularies endpoint:\n \n ..  http:example:: curl httpie python-requests\n     :request: ../../src/plone/restapi/tests/http-examples/vocabularies.req\n \n-The response will include a list with all the dotted names of the available\n-vocabularies in Plone.\n+The response will include a list with the URL (``@id``) the dotted names (``title``) of all the available vocabularies in Plone:\n \n .. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies.resp\n    :language: http\n@@ -27,10 +24,8 @@ vocabularies in Plone.\n Get a vocabulary\n ----------------\n \n-To get a particular vocabulary, use the ``/@vocabularies`` endpoint\n-with the name of the vocabulary, e.g.\n-``/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes``. The\n-endpoint can be used with the site root and content objects.\n+To get a particular vocabulary, use the ``@vocabularies`` endpoint with the name of the vocabulary, e.g. ``/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes``.\n+The endpoint can be used with the site root and content objects.\n \n ..  http:example:: curl httpie python-requests\n     :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get.req\n@@ -46,12 +41,25 @@ The token is what should be sent to the server to retrieve the value of the term\n .. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get.resp\n    :language: http\n \n-Vocabulary terms can be filtered using a ``query`` parameter\n-to return only terms with a title that contains the specified text\n-(case insensitive).\n+Filter Vocabularies\n+^^^^^^^^^^^^^^^^^^^\n \n-.. http:example:: curl httpie python-requests\n-    :request: _json/vocabularies_get_filtered.req\n+Vocabulary terms can be filtered using the ``title`` or ``token`` parameter.\n \n-.. literalinclude:: _json/vocabularies_get_filtered.resp\n+Use the ``title`` paramenter to filter vocabulary terms by title.\n+E.g. search for all terms that contain the string ``doc`` in the title:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.req\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.resp\n+   :language: http\n+\n+Use the ``token`` paramenter to filter vocabulary terms by token.\n+E.g. search for all terms that contain the string ``doc`` in the token:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.req\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.resp\n    :language: http\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\nindex 52ec2577..f9de1ebd 100644\n--- a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\n@@ -4,14 +4,54 @@ Content-Type: application/json\n {\n   "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?title=doc", \n   "items": [\n+    {\n+      "title": "Collection", \n+      "token": "Collection"\n+    }, \n+    {\n+      "title": "Comment", \n+      "token": "Discussion Item"\n+    }, \n     {\n       "title": "DX Test Document", \n       "token": "DXTestDocument"\n     }, \n+    {\n+      "title": "Event", \n+      "token": "Event"\n+    }, \n+    {\n+      "title": "File", \n+      "token": "File"\n+    }, \n+    {\n+      "title": "Folder", \n+      "token": "Folder"\n+    }, \n+    {\n+      "title": "Image", \n+      "token": "Image"\n+    }, \n+    {\n+      "title": "Link", \n+      "token": "Link"\n+    }, \n+    {\n+      "title": "News Item", \n+      "token": "News Item"\n+    }, \n+    {\n+      "title": "Page", \n+      "token": "Document"\n+    }, \n     {\n       "title": "Test Document", \n       "token": "ATTestDocument"\n+    }, \n+    {\n+      "title": "Test Folder", \n+      "token": "ATTestFolder"\n     }\n   ], \n-  "items_total": 2\n+  "items_total": 12\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.req b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.req\nnew file mode 100644\nindex 00000000..a46aae2d\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.req\n@@ -0,0 +1,3 @@\n+GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?title=doc HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.resp b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.resp\nnew file mode 100644\nindex 00000000..52ec2577\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.resp\n@@ -0,0 +1,17 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?title=doc", \n+  "items": [\n+    {\n+      "title": "DX Test Document", \n+      "token": "DXTestDocument"\n+    }, \n+    {\n+      "title": "Test Document", \n+      "token": "ATTestDocument"\n+    }\n+  ], \n+  "items_total": 2\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.req b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.req\nnew file mode 100644\nindex 00000000..c3101157\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.req\n@@ -0,0 +1,3 @@\n+GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?token=doc HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.resp b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.resp\nnew file mode 100644\nindex 00000000..cf7b13cd\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.resp\n@@ -0,0 +1,21 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?token=doc", \n+  "items": [\n+    {\n+      "title": "DX Test Document", \n+      "token": "DXTestDocument"\n+    }, \n+    {\n+      "title": "Page", \n+      "token": "Document"\n+    }, \n+    {\n+      "title": "Test Document", \n+      "token": "ATTestDocument"\n+    }\n+  ], \n+  "items_total": 3\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 070d584a..61aafe68 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1124,13 +1124,21 @@ def test_documentation_vocabularies_get(self):\n         )\n         save_request_and_response_for_docs(\'vocabularies_get\', response)\n \n-    def test_documentation_vocabularies_get_filtered(self):\n+    def test_documentation_vocabularies_get_filtered_by_title(self):\n         response = self.api_session.get(\n             \'/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?\'\n             \'title=doc\'\n         )\n         save_request_and_response_for_docs(\n-            \'vocabularies_get_filtered\', response)\n+            \'vocabularies_get_filtered_by_title\', response)\n+\n+    def test_documentation_vocabularies_get_filtered_by_token(self):\n+        response = self.api_session.get(\n+            \'/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?\'\n+            \'token=doc\'\n+        )\n+        save_request_and_response_for_docs(\n+            \'vocabularies_get_filtered_by_token\', response)\n \n     def test_documentation_sharing_folder_get(self):\n         self.portal.invokeFactory(\'Folder\', id=\'folder\')\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 92748858..199a9e02 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -140,7 +140,7 @@ def test_get_vocabulary_filtered_by_token(self):\n \n     def test_get_vocabulary_filtered_by_token_ignore_title(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&title=Title\'  # noqa\n+            \'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&title=Title\'  # noqanges\n         )\n \n         self.assertEqual(200, response.status_code)\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-22T19:47:21+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.restapi/commit/618d76674ec9648c999d384522c595a7dd4f4e51

Return 400 when title and token are provided on vocabularies endpoint.

Files changed:
M docs/source/vocabularies.rst
M src/plone/restapi/serializer/vocabularies.py
M src/plone/restapi/tests/test_services_vocabularies.py

b"diff --git a/docs/source/vocabularies.rst b/docs/source/vocabularies.rst\nindex 7c4f3645..e7c194fb 100644\n--- a/docs/source/vocabularies.rst\n+++ b/docs/source/vocabularies.rst\n@@ -63,3 +63,7 @@ E.g. search for all terms that contain the string ``doc`` in the token:\n \n .. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.resp\n    :language: http\n+\n+.. note::\n+    You must not filter by title and token at the same time.\n+    The API returns a 400 response code if you do so.\ndiff --git a/src/plone/restapi/serializer/vocabularies.py b/src/plone/restapi/serializer/vocabularies.py\nindex d1598d7e..c891fa15 100644\n--- a/src/plone/restapi/serializer/vocabularies.py\n+++ b/src/plone/restapi/serializer/vocabularies.py\n@@ -26,8 +26,14 @@ def __call__(self, vocabulary_id):\n \n         terms = []\n         for term in vocabulary:\n+            if title and token:\n+                self.request.response.setStatus(400)\n+                return dict(error=dict(\n+                    type='Invalid parameters',\n+                    message='You can not filter by title and token at the same time.')  # noqa\n+                )\n+\n             if token:\n-                # Ignore any title param\n                 if token.lower() not in term.token.lower():\n                     continue\n                 terms.append(term)\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 199a9e02..f4f4e114 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -96,7 +96,7 @@ def test_get_vocabulary_batched(self):\n             }\n         )\n \n-    def test_get_vocabulary_filtered(self):\n+    def test_get_vocabulary_filtered_by_title(self):\n         response = self.api_session.get(\n             '/@vocabularies/plone.restapi.tests.test_vocabulary?title=2'\n         )\n@@ -138,24 +138,18 @@ def test_get_vocabulary_filtered_by_token(self):\n             }\n         )\n \n-    def test_get_vocabulary_filtered_by_token_ignore_title(self):\n+    def test_get_vocabulary_filtered_by_title_and_token_returns_error(self):\n         response = self.api_session.get(\n-            '/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&title=Title'  # noqanges\n+            '/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&title=Title'  # noqa\n         )\n \n-        self.assertEqual(200, response.status_code)\n+        self.assertEqual(400, response.status_code)\n         response = response.json()\n         self.assertEqual(\n-            response,\n+            response.get('error'),\n             {\n-                u'@id': self.portal_url + u'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&title=Title',  # noqa\n-                u'items': [\n-                    {\n-                        u'title': u'Title 1',\n-                        u'token': u'token1',\n-                    }\n-                ],\n-                u'items_total': 1,\n+                u'message': u'You can not filter by title and token at the same time.',  # noqa\n+                u'type': u'Invalid parameters'\n             }\n         )\n \n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-22T20:23:50+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/a9b575398d4c698d94056e12f18a7e90690fff71

Merge pull request #719 from plone/filtered-batched-vocabs-no-title-and-token

Return 400 when title and token are provided on vocabularies endpoint.

Files changed:
M docs/source/vocabularies.rst
M src/plone/restapi/serializer/vocabularies.py
M src/plone/restapi/tests/test_services_vocabularies.py

b"diff --git a/docs/source/vocabularies.rst b/docs/source/vocabularies.rst\nindex 7c4f3645..e7c194fb 100644\n--- a/docs/source/vocabularies.rst\n+++ b/docs/source/vocabularies.rst\n@@ -63,3 +63,7 @@ E.g. search for all terms that contain the string ``doc`` in the token:\n \n .. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.resp\n    :language: http\n+\n+.. note::\n+    You must not filter by title and token at the same time.\n+    The API returns a 400 response code if you do so.\ndiff --git a/src/plone/restapi/serializer/vocabularies.py b/src/plone/restapi/serializer/vocabularies.py\nindex d1598d7e..c891fa15 100644\n--- a/src/plone/restapi/serializer/vocabularies.py\n+++ b/src/plone/restapi/serializer/vocabularies.py\n@@ -26,8 +26,14 @@ def __call__(self, vocabulary_id):\n \n         terms = []\n         for term in vocabulary:\n+            if title and token:\n+                self.request.response.setStatus(400)\n+                return dict(error=dict(\n+                    type='Invalid parameters',\n+                    message='You can not filter by title and token at the same time.')  # noqa\n+                )\n+\n             if token:\n-                # Ignore any title param\n                 if token.lower() not in term.token.lower():\n                     continue\n                 terms.append(term)\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 199a9e02..f4f4e114 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -96,7 +96,7 @@ def test_get_vocabulary_batched(self):\n             }\n         )\n \n-    def test_get_vocabulary_filtered(self):\n+    def test_get_vocabulary_filtered_by_title(self):\n         response = self.api_session.get(\n             '/@vocabularies/plone.restapi.tests.test_vocabulary?title=2'\n         )\n@@ -138,24 +138,18 @@ def test_get_vocabulary_filtered_by_token(self):\n             }\n         )\n \n-    def test_get_vocabulary_filtered_by_token_ignore_title(self):\n+    def test_get_vocabulary_filtered_by_title_and_token_returns_error(self):\n         response = self.api_session.get(\n-            '/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&title=Title'  # noqanges\n+            '/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&title=Title'  # noqa\n         )\n \n-        self.assertEqual(200, response.status_code)\n+        self.assertEqual(400, response.status_code)\n         response = response.json()\n         self.assertEqual(\n-            response,\n+            response.get('error'),\n             {\n-                u'@id': self.portal_url + u'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&title=Title',  # noqa\n-                u'items': [\n-                    {\n-                        u'title': u'Title 1',\n-                        u'token': u'token1',\n-                    }\n-                ],\n-                u'items_total': 1,\n+                u'message': u'You can not filter by title and token at the same time.',  # noqa\n+                u'type': u'Invalid parameters'\n             }\n         )\n \n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-24T10:43:12+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/59e15dfa70fda42b8db34aea3bfc2dd2cc8e9263

Merge pull request #550 from plone/filtered-batched-vocabs

Filtering and batching for @vocabularies

Files changed:
A docs/source/_json/vocabularies_get_filtered.req
A docs/source/_json/vocabularies_get_filtered.resp
A src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req
A src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp
A src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.req
A src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.resp
A src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.req
A src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.resp
M CHANGES.rst
M docs/source/upgrade-guide.rst
M docs/source/vocabularies.rst
M src/plone/restapi/serializer/catalog.py
M src/plone/restapi/serializer/vocabularies.py
M src/plone/restapi/tests/http-examples/controlpanels_get_item.resp
M src/plone/restapi/tests/http-examples/registry_get_list.resp
M src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp
M src/plone/restapi/tests/http-examples/types_document.resp
M src/plone/restapi/tests/http-examples/vocabularies_get.resp
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_services_vocabularies.py
M src/plone/restapi/tests/test_types.py
M src/plone/restapi/types/adapters.py
M src/plone/restapi/types/configure.zcml
M src/plone/restapi/types/utils.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 6a15771e..d7687e82 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,6 +1,47 @@\n Changelog\n =========\n \n+3.0.0 (unreleased)\n+------------------\n+\n+Breaking Changes:\n+\n+- `@vocabularies` service:\n+  \n+  - No longer returns an ``@id`` for terms.\n+  - Results are batched, and terms are now listed as ``items``\n+    instead of ``terms`` to match other batched responses.\n+    Batch size is 25 by default but can be overridden\n+    using the ``b_size`` parameter.\n+\n+  [davisagli]\n+\n+- `@types` service:\n+\n+  - Choice fields using named vocabularies are now serialized\n+    with a ``vocabulary`` property giving the URL of the ``@vocabularies``\n+    endpoint for the vocabulary instead of including ``choices``,\n+    ``enum`` and ``enumNames`` inline.\n+  - The ``subjects`` field is now serialized as an ``array``\n+    of ``string`` items using the ``plone.app.vocabularies.Keywords`` vocabulary.\n+    [davisagli]\n+  - Serialize widget parameters into a ``widgetOptions`` object\n+    instead of adding them to the top level of the schema property.\n+\n+  [davisagli]\n+\n+New Features:\n+\n+- ``@vocabularies`` service: Use ``q`` parameter to filter terms by title\n+  (case-insensitive).\n+  [davisagli]\n+\n+Bugfixes:\n+\n+- Avoid calculating batch links for catalog results twice.\n+  [davisagli]\n+\n+\n .. You should *NOT* be adding new change log entries to this file.\n    You should create a file in the news directory instead.\n    For helpful instructions, please see:\ndiff --git a/docs/source/_json/vocabularies_get_filtered.req b/docs/source/_json/vocabularies_get_filtered.req\nnew file mode 100644\nindex 00000000..0b04c25a\n--- /dev/null\n+++ b/docs/source/_json/vocabularies_get_filtered.req\n@@ -0,0 +1,3 @@\n+GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?q=doc HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/docs/source/_json/vocabularies_get_filtered.resp b/docs/source/_json/vocabularies_get_filtered.resp\nnew file mode 100644\nindex 00000000..e609c514\n--- /dev/null\n+++ b/docs/source/_json/vocabularies_get_filtered.resp\n@@ -0,0 +1,17 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?q=doc", \n+  "items": [\n+    {\n+      "title": "DX Test Document", \n+      "token": "DXTestDocument"\n+    }, \n+    {\n+      "title": "Test Document", \n+      "token": "ATTestDocument"\n+    }\n+  ], \n+  "items_total": 2\n+}\n\\ No newline at end of file\ndiff --git a/docs/source/upgrade-guide.rst b/docs/source/upgrade-guide.rst\nindex 709d94bb..70724dc6 100644\n--- a/docs/source/upgrade-guide.rst\n+++ b/docs/source/upgrade-guide.rst\n@@ -4,6 +4,257 @@ Upgrade Guide\n This upgrade guide lists all breaking changes in plone.restapi and explains the necessary steps that are needed to upgrade to the lastest version.\n \n \n+Upgrading to plone.restapi 4.x\n+------------------------------\n+\n+Vocabularies\n+^^^^^^^^^^^^\n+\n+Choice and List fields using named vocabularies are now serialized\n+with a ``vocabulary`` property giving the URL of the ``@vocabularies``\n+endpoint for the vocabulary instead of including ``choices``,\n+``enum`` and ``enumNames`` inline.\n+\n+Old Response::\n+\n+    "choices": [\n+        [\n+            "de",\n+            "Deutsch"\n+        ],\n+        [\n+            "en",\n+            "English"\n+        ],\n+    ],\n+    "enum": [\n+      "de",\n+      "en",\n+    ],\n+    "enumNames": [\n+      "Deutsch",\n+      "English",\n+    ],\n+\n+New response::\n+\n+    "vocabulary": {\n+        "@id": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.CaptchaVocabulary"\n+    },\n+\n+  - Serialize widget parameters into a ``widgetOptions`` object\n+    instead of adding them to the top level of the schema property.\n+\n+Old response::\n+\n+      "vocabulary": "plone.app.vocabularies.Users"\n+\n+New response::\n+\n+      "widgetOptions": {\n+        "pattern_options": {\n+          "recentlyUsed": true\n+        },\n+        "vocabulary": { "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users" }\n+      }\n+\n+Example: Vocabularies Subjects Field\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+The ``subjects`` field is now serialized as an ``array``\n+of ``string`` items using the ``plone.app.vocabularies.Keywords`` vocabulary.\n+\n+Old response::\n+\n+    "subjects": {\n+      "choices": [],\n+      "enum": [],\n+      "enumNames": [],\n+    }\n+    "type": "string"\n+\n+New response::\n+\n+    "additionalItems": true,\n+    "type": "array",\n+    "uniqueItems": true,\n+    "widgetOptions": {\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+      }\n+    },\n+    "items": {\n+      "description": "",\n+      "title": "",\n+      "type": "string"\n+    },\n+\n+Example: Available Time Zones Field (vocabulary in ``items``)\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Old response::\n+\n+    "available_timezones": {\n+      "additionalItems": true,\n+      "default": [],\n+      "description": "The timezones, which should be available for the portal. Can be set for users and events",\n+      "items": {\n+        "choices": [\n+          [\n+            "Africa/Abidjan",\n+            "Africa/Abidjan"\n+          ],\n+          [\n+            "Africa/Accra",\n+            "Africa/Accra"\n+          ],\n+          ...\n+        "enum": [\n+          ...\n+        ],\n+        "enumNames": [\n+          ...\n+        ]\n+      },\n+      title: "Available timezones",\n+      type: "array",\n+      uniqueItems: true,\n+    }\n+\n+New response::\n+\n+    "available_timezones": {\n+      "additionalItems": true,\n+      "default": [],\n+      "description": "The timezones, which should be available for the portal. Can be set for users and events",\n+      "items": {\n+        "description": "",\n+        "title": "",\n+        "type": "string",\n+        "vocabulary": {\n+          "@id": "http://localhost:8080/Plone/@vocabularies/plone.app.vocabularies.Timezones"\n+        }\n+      },\n+      "title": "Available timezones",\n+      "type": "array",\n+      "uniqueItems": true\n+    },\n+\n+Example: Weekday Field (vocabulary in main property)\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Old response::\n+\n+    "first_weekday": {\n+      "choices": [\n+        [\n+          "0",\n+          "Monday"\n+        ],\n+        [\n+          "1",\n+          "Tuesday"\n+        ],\n+        [\n+          "2",\n+          "Wednesday"\n+        ],\n+        [\n+          "3",\n+          "Thursday"\n+        ],\n+        [\n+          "4",\n+          "Friday"\n+        ],\n+        [\n+          "5",\n+          "Saturday"\n+        ],\n+        [\n+          "6",\n+          "Sunday"\n+        ]\n+      ],\n+      "description": "First day in the week.",\n+      "enum": [\n+        "0",\n+        "1",\n+        "2",\n+        "3",\n+        "4",\n+        "5",\n+        "6"\n+      ],\n+      "enumNames": [\n+        "Monday",\n+        "Tuesday",\n+        "Wednesday",\n+        "Thursday",\n+        "Friday",\n+        "Saturday",\n+        "Sunday"\n+      ],\n+      "title": "First weekday",\n+      "type": "string"\n+    },\n+\n+New response::\n+\n+    "first_weekday": {\n+      "description": "First day in the week.",\n+      "title": "First weekday",\n+      "type": "string",\n+      "vocabulary": {\n+        "@id": "http://localhost:8080/Plone/@vocabularies/plone.app.vocabularies.Weekdays"\n+      }\n+    },\n+\n+Vocabularies Endpoint\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+The vocabularies endpoint does no longer returns an ``@id`` for terms.\n+\n+The results are batched, and terms are now listed as ``items`` instead of ``terms`` to match other batched responses.\n+\n+Batch size is 25 by default but can be overridden using the ``b_size`` parameter.\n+\n+Old response::\n+\n+    {\n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n+      "terms": [\n+        {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Collection",\n+          "title": "Collection",\n+          "token": "Collection"\n+        },\n+        ...\n+      ]\n+    }\n+\n+New response::\n+\n+    {\n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n+      "items": [\n+          {\n+            "title": "Collection",\n+            "token": "Collection"\n+          },\n+          ...\n+      ],\n+      "items_total": 12\n+    }\n+\n+\n+New Features:\n+\n+- ``@vocabularies`` service: Use ``query`` parameter to filter terms by title\n+  (case-insensitive).\n+  [davisagli]\n+\n+\n Upgrading to plone.restapi 3.x\n ------------------------------\n \n@@ -12,7 +263,7 @@ Image scales\n \n Image download URLs and image scale URLs are created using the UID based url formats. This allows Plone to create different URLs when the image changes and thus ensuring caches are updated.\n \n-Old Response:: \n+Old Response::\n \n      {\n        "icon": {\n@@ -43,7 +294,7 @@ New Response::\n        },\n       ...\n       }\n-     \n+\n \n @sharing endpoint\n ^^^^^^^^^^^^^^^^^\n@@ -56,7 +307,7 @@ Old Response::\n \n   HTTP/1.1 200 OK\n   Content-Type: application/json\n-  \n+\n   {\n     "available_roles": [\n       "Contributor",\n@@ -75,7 +326,7 @@ New Response::\n \n   HTTP/1.1 200 OK\n   Content-Type: application/json\n-  \n+\n   {\n     "available_roles": [\n       {\ndiff --git a/docs/source/vocabularies.rst b/docs/source/vocabularies.rst\nindex 64d09a42..e7c194fb 100644\n--- a/docs/source/vocabularies.rst\n+++ b/docs/source/vocabularies.rst\n@@ -1,11 +1,9 @@\n Vocabularies\n ============\n \n-Vocabularies are utilities containing a list of values grouped by interest or\n-different Plone features. For example,\n-``plone.app.vocabularies.ReallyUserFriendlyTypes`` will return all the content\n-types registered in Plone. The vocabularies return a list of objects with the\n-items ``@id``, ``title`` and ``token``.\n+Vocabularies are utilities containing a list of values grouped by interest or different Plone features.\n+For example, ``plone.app.vocabularies.ReallyUserFriendlyTypes`` will return all the content types registered in Plone.\n+The vocabularies return a list of objects with the items ``@id``, ``title`` and ``token``.\n \n .. note::\n \tThese docs are generated by code tests, therefore you will see some \'test\' contenttypes appear here.\n@@ -13,13 +11,12 @@ items ``@id``, ``title`` and ``token``.\n Get all vocabularies\n --------------------\n \n-To get a list of all the available content types, you can query using a GET to the @vocabulary endpoint:\n+To retrieve a list of all the available vocabularies, send a GET request to the @vocabularies endpoint:\n \n ..  http:example:: curl httpie python-requests\n     :request: ../../src/plone/restapi/tests/http-examples/vocabularies.req\n \n-The response will include a list with all the dotted names of the available\n-vocabularies in Plone.\n+The response will include a list with the URL (``@id``) the dotted names (``title``) of all the available vocabularies in Plone:\n \n .. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies.resp\n    :language: http\n@@ -27,16 +24,46 @@ vocabularies in Plone.\n Get a vocabulary\n ----------------\n \n-To get a particular vocabulary, ``/@vocabularies`` endpoint\n-with the name of the vocabulary, e.g.\n-``/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes``. The\n-endpoint can be used with the site root and content objects. The right way is\n-depending on the implementation of the vocabulary.\n+To get a particular vocabulary, use the ``@vocabularies`` endpoint with the name of the vocabulary, e.g. ``/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes``.\n+The endpoint can be used with the site root and content objects.\n \n ..  http:example:: curl httpie python-requests\n     :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get.req\n \n-The server will respond with a list of terms. The title is pureley for display purposes. The token is what should be send to the server to retrive the value of the term.\n+The server will respond with a list of terms. The title is purely for display purposes.\n+The token is what should be sent to the server to retrieve the value of the term.\n+\n+.. note::\n+    Vocabulary terms will be **batched** if the size of the\n+    resultset exceeds the batch size. See :doc:`/batching` for more\n+    details on how to work with batched results.\n \n .. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get.resp\n    :language: http\n+\n+Filter Vocabularies\n+^^^^^^^^^^^^^^^^^^^\n+\n+Vocabulary terms can be filtered using the ``title`` or ``token`` parameter.\n+\n+Use the ``title`` paramenter to filter vocabulary terms by title.\n+E.g. search for all terms that contain the string ``doc`` in the title:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.req\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.resp\n+   :language: http\n+\n+Use the ``token`` paramenter to filter vocabulary terms by token.\n+E.g. search for all terms that contain the string ``doc`` in the token:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.req\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.resp\n+   :language: http\n+\n+.. note::\n+    You must not filter by title and token at the same time.\n+    The API returns a 400 response code if you do so.\ndiff --git a/src/plone/restapi/serializer/catalog.py b/src/plone/restapi/serializer/catalog.py\nindex da599fe4..e1ec1ec8 100644\n--- a/src/plone/restapi/serializer/catalog.py\n+++ b/src/plone/restapi/serializer/catalog.py\n@@ -77,8 +77,9 @@ def __call__(self, metadata_fields=(), fullobjects=False):\n         results = {}\n         results[\'@id\'] = batch.canonical_url\n         results[\'items_total\'] = batch.items_total\n-        if batch.links:\n-            results[\'batching\'] = batch.links\n+        links = batch.links\n+        if links:\n+            results[\'batching\'] = links\n \n         results[\'items\'] = []\n         for brain in batch:\ndiff --git a/src/plone/restapi/serializer/vocabularies.py b/src/plone/restapi/serializer/vocabularies.py\nindex abf26d2b..c891fa15 100644\n--- a/src/plone/restapi/serializer/vocabularies.py\n+++ b/src/plone/restapi/serializer/vocabularies.py\n@@ -1,7 +1,9 @@\n # -*- coding: utf-8 -*-\n+from plone.restapi.batching import HypermediaBatch\n from plone.restapi.interfaces import ISerializeToJson\n from zope.component import adapter\n from zope.component import getMultiAdapter\n+from zope.i18n import translate\n from zope.interface import implementer\n from zope.interface import Interface\n from zope.schema.interfaces import ITitledTokenizedTerm\n@@ -19,16 +21,44 @@ def __init__(self, context, request):\n \n     def __call__(self, vocabulary_id):\n         vocabulary = self.context\n-        serialized_terms = []\n+        title = self.request.form.get(\'title\', \'\')\n+        token = self.request.form.get(\'token\', \'\')\n+\n+        terms = []\n         for term in vocabulary:\n+            if title and token:\n+                self.request.response.setStatus(400)\n+                return dict(error=dict(\n+                    type=\'Invalid parameters\',\n+                    message=\'You can not filter by title and token at the same time.\')  # noqa\n+                )\n+\n+            if token:\n+                if token.lower() not in term.token.lower():\n+                    continue\n+                terms.append(term)\n+            else:\n+                if title.lower() not in term.title.lower():\n+                    continue\n+                terms.append(term)\n+\n+        batch = HypermediaBatch(self.request, terms)\n+\n+        serialized_terms = []\n+        for term in batch:\n             serializer = getMultiAdapter((term, self.request),\n                                          interface=ISerializeToJson)\n-            serialized_terms.append(serializer(vocabulary_id))\n+            serialized_terms.append(serializer())\n \n-        return {\n-            \'@id\': vocabulary_id,\n-            \'terms\': serialized_terms\n+        result = {\n+            \'@id\': batch.canonical_url,\n+            \'items\': serialized_terms,\n+            \'items_total\': batch.items_total,\n         }\n+        links = batch.links\n+        if links:\n+            result[\'batching\'] = links\n+        return result\n \n \n @implementer(ISerializeToJson)\n@@ -39,12 +69,11 @@ def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n-    def __call__(self, vocabulary_id):\n+    def __call__(self):\n         term = self.context\n         token = term.token\n         title = term.title if ITitledTokenizedTerm.providedBy(term) else token\n         return {\n-            \'@id\': \'{}/{}\'.format(vocabulary_id, token),\n             \'token\': token,\n-            \'title\': title\n+            \'title\': translate(title, context=self.request)\n         }\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\nindex 47ca1799..aee68a51 100644\n--- a/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n@@ -48,28 +48,13 @@ Content-Type: application/json\n         "uniqueItems": false\n       }, \n       "default_editor": {\n-        "choices": [\n-          [\n-            "TinyMCE", \n-            "TinyMCE"\n-          ], \n-          [\n-            "None", \n-            "None"\n-          ]\n-        ], \n         "default": "TinyMCE", \n         "description": "Select the default wysiwyg editor. Users will be able to choose their own or select to use the site default.", \n-        "enum": [\n-          "TinyMCE", \n-          "None"\n-        ], \n-        "enumNames": [\n-          "TinyMCE", \n-          "None"\n-        ], \n         "title": "Default editor", \n-        "type": "string"\n+        "type": "string", \n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AvailableEditors"\n+        }\n       }, \n       "enable_link_integrity_checks": {\n         "default": true, \ndiff --git a/src/plone/restapi/tests/http-examples/registry_get_list.resp b/src/plone/restapi/tests/http-examples/registry_get_list.resp\nindex f2bb5f51..5d13bb43 100644\n--- a/src/plone/restapi/tests/http-examples/registry_get_list.resp\n+++ b/src/plone/restapi/tests/http-examples/registry_get_list.resp\n@@ -188,12 +188,12 @@ Content-Type: application/json\n           ], \n           "description": "Paths to folders and collections to link to at the portal root.", \n           "items": {\n-            "choices": [], \n             "description": "", \n-            "enum": [], \n-            "enumNames": [], \n             "title": "", \n-            "type": "string"\n+            "type": "string", \n+            "vocabulary": {\n+              "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SyndicatableFeedItems"\n+            }\n           }, \n           "title": "Site RSS", \n           "type": "array", \n@@ -342,75 +342,12 @@ Content-Type: application/json\n           ], \n           "description": "Select which formats are available for users as alternative to the default format. Note that if new formats are installed, they will be enabled for text fields by default unless explicitly turned off here or by the relevant installer.", \n           "items": {\n-            "choices": [\n-              [\n-                "text/html", \n-                "text/html"\n-              ], \n-              [\n-                "text/plain", \n-                "text/plain"\n-              ], \n-              [\n-                "text/plain-pre", \n-                "text/plain-pre"\n-              ], \n-              [\n-                "text/restructured", \n-                "text/restructured"\n-              ], \n-              [\n-                "text/structured", \n-                "text/structured"\n-              ], \n-              [\n-                "text/x-python", \n-                "text/x-python"\n-              ], \n-              [\n-                "text/x-rst", \n-                "text/x-rst"\n-              ], \n-              [\n-                "text/x-web-intelligent", \n-                "text/x-web-intelligent"\n-              ], \n-              [\n-                "text/x-web-markdown", \n-                "text/x-web-markdown"\n-              ], \n-              [\n-                "text/x-web-textile", \n-                "text/x-web-textile"\n-              ]\n-            ], \n             "description": "", \n-            "enum": [\n-              "text/html", \n-              "text/plain", \n-              "text/plain-pre", \n-              "text/restructured", \n-              "text/structured", \n-              "text/x-python", \n-              "text/x-rst", \n-              "text/x-web-intelligent", \n-              "text/x-web-markdown", \n-              "text/x-web-textile"\n-            ], \n-            "enumNames": [\n-              "text/html", \n-              "text/plain", \n-              "text/plain-pre", \n-              "text/restructured", \n-              "text/structured", \n-              "text/x-python", \n-              "text/x-rst", \n-              "text/x-web-intelligent", \n-              "text/x-web-markdown", \n-              "text/x-web-textile"\n-            ], \n             "title": "", \n-            "type": "string"\n+            "type": "string", \n+            "vocabulary": {\n+              "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AllowableContentTypes"\n+            }\n           }, \n           "title": "Alternative formats", \n           "type": "array", \n@@ -462,22 +399,13 @@ Content-Type: application/json\n       "name": "plone.app.discussion.interfaces.IDiscussionSettings.captcha", \n       "schema": {\n         "properties": {\n-          "choices": [\n-            [\n-              "disabled", \n-              "Disabled"\n-            ]\n-          ], \n           "default": "disabled", \n           "description": "Use this setting to enable or disable Captcha validation for comments. Install plone.formwidget.captcha, plone.formwidget.recaptcha, collective.akismet, or collective.z3cform.norobots if there are no options available.", \n-          "enum": [\n-            "disabled"\n-          ], \n-          "enumNames": [\n-            "Disabled"\n-          ], \n           "title": "Captcha", \n-          "type": "string"\n+          "type": "string", \n+          "vocabulary": {\n+            "@id": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.CaptchaVocabulary"\n+          }\n         }\n       }, \n       "value": "disabled"\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\nindex a6ce8d8c..977df0c5 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n@@ -91,7 +91,11 @@ Content-Type: application/json+schema\n       "title": "Colaboradores", \n       "type": "array", \n       "uniqueItems": true, \n-      "vocabulary": "plone.app.vocabularies.Users"\n+      "widgetOptions": {\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        }\n+      }\n     }, \n     "creators": {\n       "additionalItems": true, \n@@ -104,7 +108,11 @@ Content-Type: application/json+schema\n       "title": "Creadores", \n       "type": "array", \n       "uniqueItems": true, \n-      "vocabulary": "plone.app.vocabularies.Users"\n+      "widgetOptions": {\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        }\n+      }\n     }, \n     "description": {\n       "description": "Usado en listados de elementos y resultados de b\\u00fasquedas.", \n@@ -137,40 +145,13 @@ Content-Type: application/json+schema\n       "type": "string"\n     }, \n     "language": {\n-      "choices": [\n-        [\n-          "de", \n-          "Deutsch"\n-        ], \n-        [\n-          "en", \n-          "English"\n-        ], \n-        [\n-          "es", \n-          "Espa\\u00f1ol"\n-        ], \n-        [\n-          "fr", \n-          "Fran\\u00e7ais"\n-        ]\n-      ], \n       "default": "en", \n       "description": "", \n-      "enum": [\n-        "de", \n-        "en", \n-        "es", \n-        "fr"\n-      ], \n-      "enumNames": [\n-        "Deutsch", \n-        "English", \n-        "Espa\\u00f1ol", \n-        "Fran\\u00e7ais"\n-      ], \n       "title": "Idioma", \n-      "type": "string"\n+      "type": "string", \n+      "vocabulary": {\n+        "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SupportedContentLanguages"\n+      }\n     }, \n     "nextPreviousEnabled": {\n       "default": false, \n@@ -185,15 +166,22 @@ Content-Type: application/json+schema\n       "items": {\n         "description": "", \n         "title": "Related", \n-        "type": "string"\n-      }, \n-      "pattern_options": {\n-        "recentlyUsed": true\n+        "type": "string", \n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        }\n       }, \n       "title": "Contenido relacionado", \n       "type": "array", \n       "uniqueItems": true, \n-      "vocabulary": "plone.app.vocabularies.Catalog"\n+      "widgetOptions": {\n+        "pattern_options": {\n+          "recentlyUsed": true\n+        }, \n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        }\n+      }\n     }, \n     "rights": {\n       "description": "Declaraci\\u00f3n de copyright o informaci\\u00f3n de otros derechos sobre este elemento.", \n@@ -203,13 +191,21 @@ Content-Type: application/json+schema\n       "widget": "textarea"\n     }, \n     "subjects": {\n-      "choices": [], \n+      "additionalItems": true, \n       "description": "Las etiquetas suelen utilizarse para la organizaci\\u00f3n a medida del contenido.", \n-      "enum": [], \n-      "enumNames": [], \n+      "items": {\n+        "description": "", \n+        "title": "", \n+        "type": "string"\n+      }, \n       "title": "Etiquetas", \n-      "type": "string", \n-      "vocabulary": "plone.app.vocabularies.Keywords"\n+      "type": "array", \n+      "uniqueItems": true, \n+      "widgetOptions": {\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+        }\n+      }\n     }, \n     "title": {\n       "description": "", \ndiff --git a/src/plone/restapi/tests/http-examples/types_document.resp b/src/plone/restapi/tests/http-examples/types_document.resp\nindex c16c6fb4..3d58d183 100644\n--- a/src/plone/restapi/tests/http-examples/types_document.resp\n+++ b/src/plone/restapi/tests/http-examples/types_document.resp\n@@ -94,7 +94,11 @@ Content-Type: application/json+schema\n       "title": "Contributors", \n       "type": "array", \n       "uniqueItems": true, \n-      "vocabulary": "plone.app.vocabularies.Users"\n+      "widgetOptions": {\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        }\n+      }\n     }, \n     "creators": {\n       "additionalItems": true, \n@@ -107,7 +111,11 @@ Content-Type: application/json+schema\n       "title": "Creators", \n       "type": "array", \n       "uniqueItems": true, \n-      "vocabulary": "plone.app.vocabularies.Users"\n+      "widgetOptions": {\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        }\n+      }\n     }, \n     "description": {\n       "description": "Used in item listings and search results.", \n@@ -140,40 +148,13 @@ Content-Type: application/json+schema\n       "type": "string"\n     }, \n     "language": {\n-      "choices": [\n-        [\n-          "de", \n-          "Deutsch"\n-        ], \n-        [\n-          "en", \n-          "English"\n-        ], \n-        [\n-          "es", \n-          "Espa\\u00f1ol"\n-        ], \n-        [\n-          "fr", \n-          "Fran\\u00e7ais"\n-        ]\n-      ], \n       "default": "en", \n       "description": "", \n-      "enum": [\n-        "de", \n-        "en", \n-        "es", \n-        "fr"\n-      ], \n-      "enumNames": [\n-        "Deutsch", \n-        "English", \n-        "Espa\\u00f1ol", \n-        "Fran\\u00e7ais"\n-      ], \n       "title": "Language", \n-      "type": "string"\n+      "type": "string", \n+      "vocabulary": {\n+        "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SupportedContentLanguages"\n+      }\n     }, \n     "relatedItems": {\n       "additionalItems": true, \n@@ -182,15 +163,22 @@ Content-Type: application/json+schema\n       "items": {\n         "description": "", \n         "title": "Related", \n-        "type": "string"\n-      }, \n-      "pattern_options": {\n-        "recentlyUsed": true\n+        "type": "string", \n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        }\n       }, \n       "title": "Related Items", \n       "type": "array", \n       "uniqueItems": true, \n-      "vocabulary": "plone.app.vocabularies.Catalog"\n+      "widgetOptions": {\n+        "pattern_options": {\n+          "recentlyUsed": true\n+        }, \n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        }\n+      }\n     }, \n     "rights": {\n       "description": "Copyright statement or other rights information on this item.", \n@@ -200,13 +188,21 @@ Content-Type: application/json+schema\n       "widget": "textarea"\n     }, \n     "subjects": {\n-      "choices": [], \n+      "additionalItems": true, \n       "description": "Tags are commonly used for ad-hoc organization of content.", \n-      "enum": [], \n-      "enumNames": [], \n+      "items": {\n+        "description": "", \n+        "title": "", \n+        "type": "string"\n+      }, \n       "title": "Tags", \n-      "type": "string", \n-      "vocabulary": "plone.app.vocabularies.Keywords"\n+      "type": "array", \n+      "uniqueItems": true, \n+      "widgetOptions": {\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+        }\n+      }\n     }, \n     "table_of_contents": {\n       "description": "If selected, this will show a table of contents at the top of the page.", \ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get.resp b/src/plone/restapi/tests/http-examples/vocabularies_get.resp\nindex 06ecfc17..3720bfcc 100644\n--- a/src/plone/restapi/tests/http-examples/vocabularies_get.resp\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get.resp\n@@ -3,66 +3,55 @@ Content-Type: application/json\n \n {\n   "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes", \n-  "terms": [\n+  "items": [\n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Collection", \n       "title": "Collection", \n       "token": "Collection"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Discussion Item", \n       "title": "Comment", \n       "token": "Discussion Item"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/DXTestDocument", \n       "title": "DX Test Document", \n       "token": "DXTestDocument"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Event", \n       "title": "Event", \n       "token": "Event"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/File", \n       "title": "File", \n       "token": "File"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Folder", \n       "title": "Folder", \n       "token": "Folder"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Image", \n       "title": "Image", \n       "token": "Image"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Link", \n       "title": "Link", \n       "token": "Link"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/News Item", \n       "title": "News Item", \n       "token": "News Item"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Document", \n       "title": "Page", \n       "token": "Document"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/ATTestDocument", \n       "title": "Test Document", \n       "token": "ATTestDocument"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/ATTestFolder", \n       "title": "Test Folder", \n       "token": "ATTestFolder"\n     }\n-  ]\n+  ], \n+  "items_total": 12\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req\nnew file mode 100644\nindex 00000000..a46aae2d\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req\n@@ -0,0 +1,3 @@\n+GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?title=doc HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\nnew file mode 100644\nindex 00000000..f9de1ebd\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\n@@ -0,0 +1,57 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?title=doc", \n+  "items": [\n+    {\n+      "title": "Collection", \n+      "token": "Collection"\n+    }, \n+    {\n+      "title": "Comment", \n+      "token": "Discussion Item"\n+    }, \n+    {\n+      "title": "DX Test Document", \n+      "token": "DXTestDocument"\n+    }, \n+    {\n+      "title": "Event", \n+      "token": "Event"\n+    }, \n+    {\n+      "title": "File", \n+      "token": "File"\n+    }, \n+    {\n+      "title": "Folder", \n+      "token": "Folder"\n+    }, \n+    {\n+      "title": "Image", \n+      "token": "Image"\n+    }, \n+    {\n+      "title": "Link", \n+      "token": "Link"\n+    }, \n+    {\n+      "title": "News Item", \n+      "token": "News Item"\n+    }, \n+    {\n+      "title": "Page", \n+      "token": "Document"\n+    }, \n+    {\n+      "title": "Test Document", \n+      "token": "ATTestDocument"\n+    }, \n+    {\n+      "title": "Test Folder", \n+      "token": "ATTestFolder"\n+    }\n+  ], \n+  "items_total": 12\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.req b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.req\nnew file mode 100644\nindex 00000000..a46aae2d\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.req\n@@ -0,0 +1,3 @@\n+GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?title=doc HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.resp b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.resp\nnew file mode 100644\nindex 00000000..52ec2577\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.resp\n@@ -0,0 +1,17 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?title=doc", \n+  "items": [\n+    {\n+      "title": "DX Test Document", \n+      "token": "DXTestDocument"\n+    }, \n+    {\n+      "title": "Test Document", \n+      "token": "ATTestDocument"\n+    }\n+  ], \n+  "items_total": 2\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.req b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.req\nnew file mode 100644\nindex 00000000..c3101157\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.req\n@@ -0,0 +1,3 @@\n+GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?token=doc HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.resp b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.resp\nnew file mode 100644\nindex 00000000..cf7b13cd\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.resp\n@@ -0,0 +1,21 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?token=doc", \n+  "items": [\n+    {\n+      "title": "DX Test Document", \n+      "token": "DXTestDocument"\n+    }, \n+    {\n+      "title": "Page", \n+      "token": "Document"\n+    }, \n+    {\n+      "title": "Test Document", \n+      "token": "ATTestDocument"\n+    }\n+  ], \n+  "items_total": 3\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 9b6d9bfb..61aafe68 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1124,6 +1124,22 @@ def test_documentation_vocabularies_get(self):\n         )\n         save_request_and_response_for_docs(\'vocabularies_get\', response)\n \n+    def test_documentation_vocabularies_get_filtered_by_title(self):\n+        response = self.api_session.get(\n+            \'/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?\'\n+            \'title=doc\'\n+        )\n+        save_request_and_response_for_docs(\n+            \'vocabularies_get_filtered_by_title\', response)\n+\n+    def test_documentation_vocabularies_get_filtered_by_token(self):\n+        response = self.api_session.get(\n+            \'/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?\'\n+            \'token=doc\'\n+        )\n+        save_request_and_response_for_docs(\n+            \'vocabularies_get_filtered_by_token\', response)\n+\n     def test_documentation_sharing_folder_get(self):\n         self.portal.invokeFactory(\'Folder\', id=\'folder\')\n         transaction.commit()\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 25b6cf65..f4f4e114 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -62,14 +62,117 @@ def test_get_vocabulary(self):\n         response = response.json()\n         self.assertEqual(\n             response,\n-            {u\'@id\': self.portal_url + u\'/@vocabularies/\'\'plone.restapi.tests.test_vocabulary\',  # noqa\n-             u\'terms\': [\n-                 {u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary/token1\',  # noqa\n-                  u\'title\': u\'Title 1\',\n-                  u\'token\': u\'token1\'},\n-                 {u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary/token2\',  # noqa\n-                  u\'title\': u\'Title 2\',\n-                  u\'token\': u\'token2\'}]})\n+            {\n+                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary\',  # noqa\n+                u\'items\': [\n+                    {u\'title\': u\'Title 1\', u\'token\': u\'token1\'},\n+                    {u\'title\': u\'Title 2\', u\'token\': u\'token2\'},\n+                ],\n+                u\'items_total\': 2,\n+            }\n+        )\n+\n+    def test_get_vocabulary_batched(self):\n+        response = self.api_session.get(\n+            \'/@vocabularies/plone.restapi.tests.test_vocabulary?b_size=1\'\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        response = response.json()\n+        self.assertEqual(\n+            response,\n+            {\n+                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary\',  # noqa\n+                u\'batching\': {\n+                    u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?b_size=1\',  # noqa\n+                    u\'first\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=0&b_size=1\',  # noqa\n+                    u\'last\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1\',  # noqa\n+                    u\'next\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1\',  # noqa\n+                },\n+                u\'items\': [\n+                    {u\'title\': u\'Title 1\', u\'token\': u\'token1\'},\n+                ],\n+                u\'items_total\': 2,\n+            }\n+        )\n+\n+    def test_get_vocabulary_filtered_by_title(self):\n+        response = self.api_session.get(\n+            \'/@vocabularies/plone.restapi.tests.test_vocabulary?title=2\'\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        response = response.json()\n+        self.assertEqual(\n+            response,\n+            {\n+                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?title=2\',  # noqa\n+                u\'items\': [\n+                    {\n+                        u\'title\': u\'Title 2\',\n+                        u\'token\': u\'token2\',\n+                    }\n+                ],\n+                u\'items_total\': 1,\n+            }\n+        )\n+\n+    def test_get_vocabulary_filtered_by_token(self):\n+        response = self.api_session.get(\n+            \'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1\'\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        response = response.json()\n+        self.assertEqual(\n+            response,\n+            {\n+                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1\',  # noqa\n+                u\'items\': [\n+                    {\n+                        u\'title\': u\'Title 1\',\n+                        u\'token\': u\'token1\',\n+                    }\n+                ],\n+                u\'items_total\': 1,\n+            }\n+        )\n+\n+    def test_get_vocabulary_filtered_by_title_and_token_returns_error(self):\n+        response = self.api_session.get(\n+            \'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&title=Title\'  # noqa\n+        )\n+\n+        self.assertEqual(400, response.status_code)\n+        response = response.json()\n+        self.assertEqual(\n+            response.get(\'error\'),\n+            {\n+                u\'message\': u\'You can not filter by title and token at the same time.\',  # noqa\n+                u\'type\': u\'Invalid parameters\'\n+            }\n+        )\n+\n+    def test_get_corner_case_vocabulary_filtered_by_token(self):\n+        response = self.api_session.get(\n+            \'/@vocabularies/plone.app.vocabularies.Weekdays?token=0\'\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        response = response.json()\n+        self.assertEqual(\n+            response,\n+            {\n+                u\'@id\': self.portal_url + u\'/@vocabularies/plone.app.vocabularies.Weekdays?token=0\',  # noqa\n+                u\'items\': [\n+                    {\n+                        \'title\': \'Monday\',\n+                        \'token\': \'0\'\n+                    }\n+                ],\n+                u\'items_total\': 1,\n+            }\n+        )\n \n     def test_get_unknown_vocabulary(self):\n         response = self.api_session.get(\n@@ -129,13 +232,12 @@ def test_context_vocabulary(self):\n             response.json(),\n             {\n                 u\'@id\': self.portal_url + u\'/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary\',  # noqa\n-                u\'terms\': [\n-                    {u\'@id\': self.portal_url + u\'/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary/id\',  # noqa\n-                     u\'title\': u\'testdoc\',\n-                     u\'token\': u\'id\'},\n-                    {u\'@id\': self.portal_url + u\'/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary/title\',  # noqa\n-                     u\'title\': u\'Document 1\',\n-                     u\'token\': u\'title\'}]\n+                u\'items\': [\n+                    {u\'title\': u\'testdoc\', u\'token\': u\'id\'},\n+                    {u\'title\': u\'Document 1\', u\'token\': u\'title\'},\n+                ],\n+                u\'items_total\': 2,\n+\n             })\n \n     def tearDown(self):\ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex 8c3a8d87..c637e071 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -189,7 +189,8 @@ def test_get_jsonschema_with_widget_params(self):\n         )\n         self.assertEqual(\n             \'some_value\',\n-            jsonschema[\'properties\'][\'parametrized_widget_field\'][\'a_param\']\n+            jsonschema[\'properties\'][\'parametrized_widget_field\'][\n+                \'widgetOptions\'][\'a_param\']\n         )\n \n     def test_do_not_fail_with_non_parametrized_widget(self):\n@@ -214,8 +215,8 @@ def test_resolve_callable_widget_params(self):\n \n         self.assertEqual(\n             u\'Foo\',\n-            jsonschema[\'properties\'][\'parametrized_widget_field\'].get(\n-                \'defaultFactory\')\n+            jsonschema[\'properties\'][\'parametrized_widget_field\'][\n+                \'widgetOptions\'].get(\'defaultFactory\')\n         )\n \n \n@@ -395,6 +396,25 @@ def test_choice(self):\n             adapter.get_schema()\n         )\n \n+    def test_choice_named_vocab(self):\n+        field = schema.Choice(\n+            title=u\'My field\',\n+            description=u\'My great field\',\n+            vocabulary=\'plone.app.vocabularies.ReallyUserFriendlyTypes\',\n+        )\n+        adapter = getMultiAdapter((field, self.portal, self.request),\n+                                  IJsonSchemaProvider)\n+\n+        self.assertEqual(\n+            {\n+                \'type\': \'string\',\n+                \'title\': u\'My field\',\n+                \'description\': u\'My great field\',\n+                \'vocabulary\': { \'@id\': u\'http://nohost/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes\' }  # noqa\n+            },\n+            adapter.get_schema()\n+        )\n+\n     def test_choice_source_vocab(self):\n         field = schema.Choice(\n             title=u\'My field\',\n@@ -600,7 +620,7 @@ def test_date(self):\n                 \'title\': u\'My field\',\n                 \'description\': u\'My great field\',\n                 \'default\': date(2016, 1, 1),\n-                \'widget\': u\'date\',\n+                \'widget\': u\'date\'\n             },\n             adapter.get_schema()\n         )\ndiff --git a/src/plone/restapi/types/adapters.py b/src/plone/restapi/types/adapters.py\nindex 657fa46a..677c3aa6 100644\n--- a/src/plone/restapi/types/adapters.py\n+++ b/src/plone/restapi/types/adapters.py\n@@ -1,12 +1,9 @@\n # -*- coding: utf-8 -*-\n """JsonSchema providers."""\n-from plone.autoform.interfaces import WIDGETS_KEY\n-\n from plone.app.textfield.interfaces import IRichText\n from plone.schema import IJSONField\n from zope.component import adapter\n from zope.component import getMultiAdapter\n-from zope.component import getUtility\n from zope.i18n import translate\n from zope.interface import implementer\n from zope.interface import Interface\n@@ -30,11 +27,11 @@\n from zope.schema.interfaces import IText\n from zope.schema.interfaces import ITextLine\n from zope.schema.interfaces import ITuple\n-from zope.schema.interfaces import IVocabularyFactory\n \n from plone.restapi.types.interfaces import IJsonSchemaProvider\n-from plone.restapi.types.utils import get_fieldsets, get_tagged_values\n+from plone.restapi.types.utils import get_fieldsets, get_widget_params\n from plone.restapi.types.utils import get_jsonschema_properties\n+from plone.restapi.types.utils import get_vocabulary_url\n \n \n @adapter(IField, Interface, Interface)\n@@ -74,6 +71,10 @@ def get_schema(self):\n         if widget:\n             schema[\'widget\'] = widget\n \n+        widget_options = self.get_widget_params()\n+        if widget_options:\n+            schema[\'widgetOptions\'] = widget_options\n+\n         if self.field.default is not None:\n             schema[\'default\'] = self.field.default\n \n@@ -86,6 +87,16 @@ def get_type(self):\n     def get_widget(self):\n         return None\n \n+    def get_widget_params(self):\n+        all_params = get_widget_params([self.field.interface])\n+        params = all_params.get(self.field.getName(), {})\n+        if \'vocabulary\' in params:\n+            vocab_name = params[\'vocabulary\']\n+            params[\'vocabulary\'] = {\n+                    \'@id\': get_vocabulary_url(\n+                        vocab_name, self.context, self.request)}\n+        return params\n+\n \n @adapter(IBytes, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n@@ -232,7 +243,6 @@ def additional(self):\n @adapter(ITuple, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class TupleJsonSchemaProvider(SetJsonSchemaProvider):\n-\n     pass\n \n \n@@ -248,30 +258,30 @@ def get_type(self):\n         return \'string\'\n \n     def additional(self):\n-        # choices and enumNames are v5 proposals, for now we implement both\n-        choices = []\n-        enum = []\n-        enum_names = []\n-        vocabulary = None\n-\n-        if getattr(self.field, \'vocabularyName\', None):\n-            vocabulary = getUtility(\n-                IVocabularyFactory,\n-                name=self.field.vocabularyName)(self.context)\n-        elif getattr(self.field, \'vocabulary\', None):\n-            vocabulary = self.field.vocabulary\n-        else:\n-            tagged = get_tagged_values([self.field.interface], WIDGETS_KEY)\n-            tagged_field_values = tagged.get(self.field.getName(), {})\n-            vocab_name = tagged_field_values.get(\'vocabulary\', None)\n-            if vocab_name:\n-                vocab_fac = getUtility(IVocabularyFactory, name=vocab_name)\n-                vocabulary = vocab_fac(self.context)\n+        vocab_name = getattr(self.field, \'vocabularyName\', None)\n+        if vocab_name:\n+            return {\n+                \'vocabulary\': {\n+                    \'@id\': get_vocabulary_url(\n+                        vocab_name,\n+                        self.context,\n+                        self.request\n+                    )\n+                }\n+            }\n \n+        # Maybe we have an unnamed vocabulary or source.\n+\n+        vocabulary = getattr(self.field, \'vocabulary\', None)\n         if IContextSourceBinder.providedBy(vocabulary):\n             vocabulary = vocabulary(self.context)\n \n         if hasattr(vocabulary, \'__iter__\') and self.should_render_choices:\n+            # choices and enumNames are v5 proposals, for now we implement both\n+            choices = []\n+            enum = []\n+            enum_names = []\n+\n             for term in vocabulary:\n                 title = translate(term.title, context=self.request)\n                 choices.append((term.token, title))\ndiff --git a/src/plone/restapi/types/configure.zcml b/src/plone/restapi/types/configure.zcml\nindex d099575a..bfb356b2 100644\n--- a/src/plone/restapi/types/configure.zcml\n+++ b/src/plone/restapi/types/configure.zcml\n@@ -19,7 +19,6 @@\n         zcml:condition="installed z3c.relationfield"\n         factory=".z3crelationadapter.ChoiceslessRelationListSchemaProvider"\n         name="IRelatedItems.relatedItems" />\n-    <adapter factory=".adapters.SubjectsFieldJsonSchemaProvider" name="IDublinCore.subjects" />\n     <adapter factory=".adapters.SetJsonSchemaProvider" />\n     <adapter factory=".adapters.TupleJsonSchemaProvider" />\n     <adapter factory=".adapters.ChoiceJsonSchemaProvider" />\ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex e2bc597a..8243778c 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -19,13 +19,14 @@\n from plone.autoform.interfaces import IParameterizedWidget\n from plone.autoform.interfaces import WIDGETS_KEY\n from plone.dexterity.utils import getAdditionalSchemata\n-from plone.restapi.serializer.converters import json_compatible\n+from plone.restapi.serializer.converters import IJsonCompatible\n from plone.restapi.types.interfaces import IJsonSchemaProvider\n from Products.CMFCore.utils import getToolByName\n from plone.supermodel.utils import mergedTaggedValueDict\n from z3c.form import form as z3c_form\n from zope.component import getMultiAdapter\n from zope.component import queryMultiAdapter\n+from zope.component.hooks import getSite\n from zope.globalrequest import getRequest\n from zope.i18n import translate\n \n@@ -95,7 +96,7 @@ def get_fieldset_infos(fieldsets):\n \n \n def get_jsonschema_properties(context, request, fieldsets, prefix=\'\',\n-                              excluded_fields=None, tagged_values={}):\n+                              excluded_fields=None):\n     """Build a JSON schema \'properties\' list, based on a list of fieldset\n     dicts as returned by `get_fieldsets()`.\n     """\n@@ -124,27 +125,23 @@ def get_jsonschema_properties(context, request, fieldsets, prefix=\'\',\n \n             properties[fieldname] = adapter.get_schema()\n \n-            for key, value in tagged_values.get(fieldname, {}).items():\n-                if key in properties[fieldname]:\n-                    continue\n-                properties[fieldname][key] = value\n-\n     return properties\n \n \n-def get_tagged_values(schemas, key):\n+def get_widget_params(schemas):\n     params = {}\n     for schema in schemas:\n         if not schema:\n             continue\n-        tagged_values = mergedTaggedValueDict(schema, key)\n+        tagged_values = mergedTaggedValueDict(schema, WIDGETS_KEY)\n         for field_name in schema:\n             widget = tagged_values.get(field_name)\n             if IParameterizedWidget.providedBy(widget) and widget.params:\n-                params[field_name] = widget.params.copy()\n-                for k, v in params[field_name].items():\n+                params[field_name] = {}\n+                for k, v in widget.params.items():\n                     if callable(v):\n-                        params[field_name][k] = v()\n+                        v = v()\n+                    params[field_name][k] = v\n     return params\n \n \n@@ -168,16 +165,12 @@ def get_jsonschema_for_fti(fti, context, request, excluded_fields=None):\n             context, request, schema, additional_schemata\n         )\n \n-    # Mangle the properties a bit to add widgets hints\n-    schemas = (schema,) + additional_schemata\n-\n     # Build JSON schema properties\n     properties = get_jsonschema_properties(\n         context,\n         request,\n         fieldsets,\n         excluded_fields=excluded_fields,\n-        tagged_values=get_tagged_values(schemas, WIDGETS_KEY)\n     )\n \n     # Determine required fields\n@@ -194,7 +187,7 @@ def get_jsonschema_for_fti(fti, context, request, excluded_fields=None):\n     return {\n         \'type\': \'object\',\n         \'title\': translate(fti.Title(), context=getRequest()),\n-        \'properties\': json_compatible(properties),\n+        \'properties\': IJsonCompatible(properties),\n         \'required\': required,\n         \'fieldsets\': get_fieldset_infos(fieldsets),\n         \'layouts\': getattr(fti, \'view_methods\', []),\n@@ -209,3 +202,15 @@ def get_jsonschema_for_portal_type(portal_type, context, request,\n     fti = ttool[portal_type]\n     return get_jsonschema_for_fti(\n         fti, context, request, excluded_fields=excluded_fields)\n+\n+\n+def get_vocabulary_url(vocab_name, context, request):\n+    try:\n+        context_url = context.absolute_url()\n+    except AttributeError:\n+        portal = getSite()\n+        context_url = portal.absolute_url()\n+    return \'{}/@vocabularies/{}\'.format(\n+        context_url,\n+        vocab_name,\n+    )\n'

