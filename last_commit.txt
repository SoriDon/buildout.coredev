Repository: plone.locking


Branch: refs/heads/master
Date: 2023-04-13T11:07:46+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.locking/commit/c77101a76b2c14e3465c680f386ff0fcf0e1a1e6

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/234bb1d6.internal
A tox.ini
M pyproject.toml
M setup.cfg
D bootstrap.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..87cb9ff\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "234bb1d6"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex ed57894..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,178 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-tmpeggs = tempfile.mkdtemp()\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep \n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n-\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-\n-\n-options, args = parser.parse_args()\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    if options.allow_site_packages:\n-        import setuptools\n-        import pkg_resources\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions \n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'. \n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-cmd = [sys.executable, \'-c\',\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-requirement = \'zc.buildout\'\n-version = options.version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        for part in parsed_version:\n-            if (part[:1] == \'*\') and (part not in _final_parts):\n-                return False\n-        return True\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/news/234bb1d6.internal b/news/234bb1d6.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/234bb1d6.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..0dad625 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,62 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\', \'ExtensionClass\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\', \'six\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 4642dab..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,9 +1,23 @@\n-[check-manifest]\n-ignore =\n-    bootstrap.py\n-    buildout.cfg\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n \n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n \n-[bdist_wheel]\n-universal = 1\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..598016d\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.locking {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.locking {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

Repository: plone.locking


Branch: refs/heads/master
Date: 2023-04-13T11:08:59+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.locking/commit/eb86f1d03b921dacdd1149336e2d9c96b4f201bd

pyupgrade, black

Files changed:
M plone/__init__.py
M plone/locking/browser/info.pt
M plone/locking/browser/info.py
M plone/locking/browser/locking.py
M plone/locking/configure.zcml
M plone/locking/events.py
M plone/locking/interfaces.py
M plone/locking/lockable.py
M plone/locking/testing.py
M plone/locking/tests/test_functional.py
M plone/locking/tests/test_views.py
M setup.py
D buildout.cfg

b'diff --git a/buildout.cfg b/buildout.cfg\ndeleted file mode 100644\nindex 2975139..0000000\n--- a/buildout.cfg\n+++ /dev/null\n@@ -1,7 +0,0 @@\n-[buildout]\n-extends = https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-5.x.cfg\n-package-name = plone.locking\n-package-extras = [test]\n-\n-[versions]\n-plone.locking =\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad10..05f0beb 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,6 +1,7 @@\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/locking/browser/info.pt b/plone/locking/browser/info.pt\nindex ea92939..55b32f2 100644\n--- a/plone/locking/browser/info.pt\n+++ b/plone/locking/browser/info.pt\n@@ -1,45 +1,60 @@\n <div id="plone-lock-status"\n+     tal:define="\n+       locked view/info/is_locked_for_current_user;\n+       stealable view/lock_is_stealable;\n+       lock_details view/lock_info;\n+       icons python:context.restrictedTraverse(\'@@iconresolver\');\n+     "\n      i18n:domain="plone"\n-     tal:define="locked view/info/is_locked_for_current_user;\n-                 stealable view/lock_is_stealable;\n-                 lock_details view/lock_info;\n-                 icons python:context.restrictedTraverse(\'@@iconresolver\')">\n+>\n   <tal:block condition="locked">\n     <div class="portalMessage info alert alert-info">\n-    <tal:icon tal:replace="structure python:icons.tag(\'lock-fill\', tag_alt=\'locked\', tag_class=\'mb-1 me-2\')" />\n+      <tal:icon tal:replace="structure python:icons.tag(\'lock-fill\', tag_alt=\'locked\', tag_class=\'mb-1 me-2\')" />\n       <strong i18n:translate="label_locked">Locked</strong>\n-        <tal:author-page\n-            tal:condition="lock_details/author_page"\n-            i18n:translate="description_webdav_locked_by_author_on_time">\n+      <tal:author-page tal:condition="lock_details/author_page"\n+                       i18n:translate="description_webdav_locked_by_author_on_time"\n+      >\n           This item was locked by\n-          <a i18n:name="author"\n-             tal:content="lock_details/fullname"\n-             tal:attributes="href lock_details/author_page" />\n-          <span i18n:name="time"\n-                tal:content="lock_details/time_difference" /> ago.\n-        </tal:author-page>\n-        <tal:no-author-page\n-            tal:condition="not:lock_details/author_page"\n-            i18n:translate="description_webdav_locked_by_author_on_time">\n+        <a tal:content="lock_details/fullname"\n+           tal:attributes="\n+             href lock_details/author_page;\n+           "\n+           i18n:name="author"\n+        ></a>\n+        <span tal:content="lock_details/time_difference"\n+              i18n:name="time"\n+        ></span>\n+         ago.\n+      </tal:author-page>\n+      <tal:no-author-page tal:condition="not:lock_details/author_page"\n+                          i18n:translate="description_webdav_locked_by_author_on_time"\n+      >\n           This item was locked by\n-          <span i18n:name="author"\n-                tal:content="lock_details/fullname" />\n-          <span i18n:name="time"\n-                tal:content="lock_details/time_difference" /> ago.\n-        </tal:no-author-page>\n-        <form tal:condition="stealable"\n-              tal:attributes="action string:${context/absolute_url}/@@plone_lock_operations/force_unlock"\n-              method="POST">\n-          <span i18n:translate="description_webdav_locked_steal">\n+        <span tal:content="lock_details/fullname"\n+              i18n:name="author"\n+        ></span>\n+        <span tal:content="lock_details/time_difference"\n+              i18n:name="time"\n+        ></span>\n+         ago.\n+      </tal:no-author-page>\n+      <form method="POST"\n+            tal:condition="stealable"\n+            tal:attributes="\n+              action string:${context/absolute_url}/@@plone_lock_operations/force_unlock;\n+            "\n+      >\n+        <span i18n:translate="description_webdav_locked_steal">\n             If you are certain this user has abandoned the object,\n             you may\n-            <input type="submit"\n-                   value="Unlock"\n-                   i18n:name="unlock_button"\n-                   i18n:attributes="value" />\n+          <input type="submit"\n+                 value="Unlock"\n+                 i18n:attributes="value"\n+                 i18n:name="unlock_button"\n+          />\n             the object. You will then be able to edit it.\n-          </span>\n-        </form>\n+        </span>\n+      </form>\n     </div>\n   </tal:block>\n </div>\ndiff --git a/plone/locking/browser/info.py b/plone/locking/browser/info.py\nindex 89d6504..5965856 100644\n--- a/plone/locking/browser/info.py\n+++ b/plone/locking/browser/info.py\n@@ -1,10 +1,8 @@\n-from zope.interface import implementer\n-from zope.component import getMultiAdapter\n-\n-from zope.viewlet.interfaces import IViewlet\n-\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from zope.component import getMultiAdapter\n+from zope.interface import implementer\n+from zope.viewlet.interfaces import IViewlet\n \n \n @implementer(IViewlet)\n@@ -15,10 +13,10 @@ class LockInfoViewlet(BrowserView):\n     an implementation of the info box in a single place.\n     """\n \n-    template = ViewPageTemplateFile(\'info.pt\')\n+    template = ViewPageTemplateFile("info.pt")\n \n     def __init__(self, context, request, view, manager):\n-        super(LockInfoViewlet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.__parent__ = view\n         self.context = context\n         self.request = request\ndiff --git a/plone/locking/browser/locking.py b/plone/locking/browser/locking.py\nindex 6453bdc..f7c5861 100644\n--- a/plone/locking/browser/locking.py\n+++ b/plone/locking/browser/locking.py\n@@ -1,7 +1,6 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n-from DateTime import DateTime\n from datetime import timedelta\n+from DateTime import DateTime\n from plone.locking.interfaces import ILockable\n from plone.locking.interfaces import IRefreshableLockable\n from plone.registry.interfaces import IRegistry\n@@ -11,22 +10,19 @@\n from zope.i18nmessageid import MessageFactory\n \n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\n \n \n class LockingOperations(BrowserView):\n-    """Lock acquisition and stealing operations\n-    """\n+    """Lock acquisition and stealing operations"""\n \n     def redirect(self):\n-        """Redirect to the context view if needed\n-        """\n+        """Redirect to the context view if needed"""\n         url = self.context.absolute_url()\n         registry = getUtility(IRegistry)\n-        types_use_view = registry.get(\n-            \'plone.types_use_view_action_in_listings\', [])\n+        types_use_view = registry.get("plone.types_use_view_action_in_listings", [])\n         if self.context.portal_type in types_use_view:\n-            url += \'/view\'\n+            url += "/view"\n         self.request.RESPONSE.redirect(url)\n \n     def force_unlock(self, redirect=True):\n@@ -41,8 +37,7 @@ def force_unlock(self, redirect=True):\n             self.redirect()\n \n     def create_lock(self, redirect=True):\n-        """Lock the object if it is unlocked\n-        """\n+        """Lock the object if it is unlocked"""\n         lockable = IRefreshableLockable(self.context, None)\n         if lockable is not None:\n             lockable.lock()\n@@ -50,8 +45,7 @@ def create_lock(self, redirect=True):\n             self.redirect()\n \n     def safe_unlock(self, redirect=True):\n-        """Unlock the object if the current user has the lock\n-        """\n+        """Unlock the object if the current user has the lock"""\n         lockable = ILockable(self.context)\n         if lockable.can_safely_unlock():\n             lockable.unlock()\n@@ -59,8 +53,7 @@ def safe_unlock(self, redirect=True):\n             self.redirect()\n \n     def refresh_lock(self, redirect=True):\n-        """Reset the lock start time\n-        """\n+        """Reset the lock start time"""\n         lockable = IRefreshableLockable(self.context, None)\n         if lockable is not None:\n             lockable.refresh_lock()\n@@ -69,8 +62,7 @@ def refresh_lock(self, redirect=True):\n \n \n class LockingInformation(BrowserView):\n-    """Lock information\n-    """\n+    """Lock information"""\n \n     def is_locked(self):\n         lockable = ILockable(aq_inner(self.context))\n@@ -87,8 +79,7 @@ def is_locked_for_current_user(self):\n         # return lockable.locked() and not lockable.can_safely_unlock()\n \n     def lock_is_stealable(self):\n-        """Find out if the lock is stealable\n-        """\n+        """Find out if the lock is stealable"""\n         lockable = ILockable(self.context)\n         return lockable.stealable()\n \n@@ -103,37 +94,36 @@ def lock_info(self):\n         acquired.\n         """\n \n-        portal_membership = getToolByName(self.context, \'portal_membership\')\n-        portal_url = getToolByName(self.context, \'portal_url\')\n+        portal_membership = getToolByName(self.context, "portal_membership")\n+        portal_url = getToolByName(self.context, "portal_url")\n         lockable = ILockable(aq_inner(self.context))\n         url = portal_url()\n         for info in lockable.lock_info():\n-            creator = info[\'creator\']\n-            time = info[\'time\']\n-            token = info[\'token\']\n-            lock_type = info[\'type\']\n+            creator = info["creator"]\n+            time = info["time"]\n+            token = info["token"]\n+            lock_type = info["type"]\n             # Get the fullname, but remember that the creator may not\n             # be a member, but only Authenticated or even anonymous.\n             # Same for the author_page\n-            fullname = \'\'\n-            author_page = \'\'\n+            fullname = ""\n+            author_page = ""\n             member = portal_membership.getMemberById(creator)\n             if member:\n-                fullname = member.getProperty(\'fullname\', \'\')\n-                author_page = "%s/author/%s" % (url, creator)\n-            if fullname == \'\':\n-                fullname = creator or _(\'label_an_anonymous_user\',\n-                                        u\'an anonymous user\')\n+                fullname = member.getProperty("fullname", "")\n+                author_page = f"{url}/author/{creator}"\n+            if fullname == "":\n+                fullname = creator or _("label_an_anonymous_user", "an anonymous user")\n             time_difference = self._getNiceTimeDifference(time)\n \n             return {\n-                \'creator\': creator,\n-                \'fullname\': fullname,\n-                \'author_page\': author_page,\n-                \'time\': time,\n-                \'time_difference\': time_difference,\n-                \'token\': token,\n-                \'type\': lock_type,\n+                "creator": creator,\n+                "fullname": fullname,\n+                "author_page": author_page,\n+                "time": time,\n+                "time_difference": time_difference,\n+                "token": token,\n+                "type": lock_type,\n             }\n \n     def _getNiceTimeDifference(self, baseTime):\n@@ -144,22 +134,26 @@ def _getNiceTimeDifference(self, baseTime):\n         hours = delta.seconds // 3600\n         minutes = (delta.seconds - (hours * 3600)) // 60\n \n-        dateString = u""\n+        dateString = ""\n         if days == 0:\n             if hours == 0:\n                 if delta.seconds < 120:\n-                    dateString = _(u"1 minute")\n+                    dateString = _("1 minute")\n                 else:\n-                    dateString = _(u"$m minutes", mapping={\'m\': minutes})\n+                    dateString = _("$m minutes", mapping={"m": minutes})\n             elif hours == 1:\n-                dateString = _(u"$h hour and $m minutes", mapping={\'h\': hours, \'m\': minutes})  # noqa\n+                dateString = _(\n+                    "$h hour and $m minutes", mapping={"h": hours, "m": minutes}\n+                )  # noqa\n             else:\n-                dateString = _(u"$h hours and $m minutes", mapping={\'h\': hours, \'m\': minutes})  # noqa\n+                dateString = _(\n+                    "$h hours and $m minutes", mapping={"h": hours, "m": minutes}\n+                )  # noqa\n         else:\n             if days == 1:\n-                dateString = _(u"$d day and $h hours", mapping={\'d\': days, \'h\': hours})\n+                dateString = _("$d day and $h hours", mapping={"d": days, "h": hours})\n             else:\n-                dateString = _(u"$d days and $h hours", mapping={\'d\': days, \'h\': hours})\n+                dateString = _("$d days and $h hours", mapping={"d": days, "h": hours})\n         return dateString\n \n \ndiff --git a/plone/locking/configure.zcml b/plone/locking/configure.zcml\nindex 9c8ed2c..92ab9af 100644\n--- a/plone/locking/configure.zcml\n+++ b/plone/locking/configure.zcml\n@@ -1,33 +1,37 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:browser="http://namespaces.zope.org/browser">\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    >\n \n-    <adapter factory=".lockable.TTWLockable" />\n+  <adapter factory=".lockable.TTWLockable" />\n \n-    <include package="Products.CMFCore" file="configure.zcml" />\n+  <include\n+      package="Products.CMFCore"\n+      file="configure.zcml"\n+      />\n \n-    <browser:page\n-        for=".interfaces.ITTWLockable"\n-        name="plone_lock_operations"\n-        class=".browser.locking.LockingOperations"\n-        permission="cmf.ModifyPortalContent"\n-        allowed_attributes="create_lock safe_unlock force_unlock refresh_lock"\n-        />\n+  <browser:page\n+      name="plone_lock_operations"\n+      for=".interfaces.ITTWLockable"\n+      class=".browser.locking.LockingOperations"\n+      allowed_attributes="create_lock safe_unlock force_unlock refresh_lock"\n+      permission="cmf.ModifyPortalContent"\n+      />\n \n-    <browser:page\n-        for=".interfaces.ITTWLockable"\n-        name="plone_lock_info"\n-        class=".browser.locking.LockingInformation"\n-        permission="zope2.View"\n-        allowed_attributes="is_locked is_locked_for_current_user lock_is_stealable lock_info"\n-        />\n+  <browser:page\n+      name="plone_lock_info"\n+      for=".interfaces.ITTWLockable"\n+      class=".browser.locking.LockingInformation"\n+      allowed_attributes="is_locked is_locked_for_current_user lock_is_stealable lock_info"\n+      permission="zope2.View"\n+      />\n \n-    <browser:page\n-        for="*"\n-        name="plone_lock_info"\n-        class=".browser.locking.LockingInformationFallback"\n-        permission="zope2.View"\n-        allowed_attributes="is_locked is_locked_for_current_user lock_is_stealable lock_info"\n-        />\n+  <browser:page\n+      name="plone_lock_info"\n+      for="*"\n+      class=".browser.locking.LockingInformationFallback"\n+      allowed_attributes="is_locked is_locked_for_current_user lock_is_stealable lock_info"\n+      permission="zope2.View"\n+      />\n \n </configure>\ndiff --git a/plone/locking/events.py b/plone/locking/events.py\nindex 0a956e1..08843a5 100644\n--- a/plone/locking/events.py\n+++ b/plone/locking/events.py\n@@ -1,19 +1,19 @@\n from plone.locking.interfaces import ILockable\n \n+\n # These event handlers are not connected by default, but can be used for\n # a particular object event (used e.g. in Archetypes)\n \n+\n def lockOnEditBegins(obj, event):\n-    """Lock the object when a user start working on the object\n-    """\n+    """Lock the object when a user start working on the object"""\n     lockable = ILockable(obj)\n     if not lockable.locked():\n         lockable.lock()\n \n \n def unlockAfterModification(obj, event):\n-    """Release the DAV lock after save\n-    """\n+    """Release the DAV lock after save"""\n     lockable = ILockable(obj)\n     if lockable.can_safely_unlock():\n         lockable.unlock()\ndiff --git a/plone/locking/interfaces.py b/plone/locking/interfaces.py\nindex 4824e39..dbaf7e8 100644\n--- a/plone/locking/interfaces.py\n+++ b/plone/locking/interfaces.py\n@@ -1,54 +1,61 @@\n-from zope.interface import implementer, Interface, Attribute\n+from zope import schema\n from zope.annotation.interfaces import IAttributeAnnotatable\n+from zope.interface import Attribute\n+from zope.interface import implementer\n+from zope.interface import Interface\n \n-from zope import schema\n \n # Lock types, including the default\n \n # Timeouts are expressed in minutes\n DEFAULT_TIMEOUT = 10\n-MAX_TIMEOUT = ((2 ** 32) - 1) // 60\n+MAX_TIMEOUT = ((2**32) - 1) // 60\n \n \n class ILockType(Interface):\n-    """Representation of a type of lock\n-    """\n+    """Representation of a type of lock"""\n \n-    __name__ = schema.TextLine(title=u"Name",\n-                               description=u"The unique name of the lock type")\n+    __name__ = schema.TextLine(\n+        title="Name", description="The unique name of the lock type"\n+    )\n \n-    stealable = schema.Bool(title=u"Stealable",\n-                            description=u"Whether this type of lock is stealable")\n-    user_unlockable = schema.Bool(title=u"User unlockable",\n-                                  description=u"Whether this type of lock should be unlockable immediately")\n-    timeout = schema.Int(title=u"lock timeout",\n-                         description=u"Locking timeout in minutes")\n+    stealable = schema.Bool(\n+        title="Stealable", description="Whether this type of lock is stealable"\n+    )\n+    user_unlockable = schema.Bool(\n+        title="User unlockable",\n+        description="Whether this type of lock should be unlockable immediately",\n+    )\n+    timeout = schema.Int(title="lock timeout", description="Locking timeout in minutes")\n \n \n @implementer(ILockType)\n-class LockType(object):\n-\n+class LockType:\n     def __init__(self, name, stealable, user_unlockable, timeout=DEFAULT_TIMEOUT):\n         self.__name__ = name\n         self.stealable = stealable\n         self.user_unlockable = user_unlockable\n         self.timeout = timeout\n \n-STEALABLE_LOCK = LockType(u"plone.locking.stealable", stealable=True, user_unlockable=True)\n+\n+STEALABLE_LOCK = LockType(\n+    "plone.locking.stealable", stealable=True, user_unlockable=True\n+)\n \n # Marker interfaces\n \n+\n class ITTWLockable(IAttributeAnnotatable):\n-    """Marker interface for objects that are lockable through-the-web\n-    """\n+    """Marker interface for objects that are lockable through-the-web"""\n \n \n class INonStealableLock(Interface):\n-    """Mark an object with this interface to make locks be non-stealable.\n-    """\n+    """Mark an object with this interface to make locks be non-stealable."""\n+\n \n # Functionality\n \n+\n class ILockable(Interface):\n     """A component that is lockable.\n \n@@ -57,7 +64,7 @@ class ILockable(Interface):\n     that can be stolen (unless the object is marked with INonStealableLock).\n \n     Most operations take the type as a parameter and operate on the lock token\n-    assocaited with a particular type.\n+    associated with a particular type.\n     """\n \n     def lock(lock_type=STEALABLE_LOCK, children=False):\n@@ -75,12 +82,10 @@ def unlock(lock_type=STEALABLE_LOCK, stealable_only=True):\n         """\n \n     def clear_locks():\n-        """Clear all locks on the object\n-        """\n+        """Clear all locks on the object"""\n \n     def locked():\n-        """True if the object is locked with any lock.\n-        """\n+        """True if the object is locked with any lock."""\n \n     def can_safely_unlock(lock_type=STEALABLE_LOCK):\n         """Determine if the current user can safely attempt to unlock the\n@@ -120,17 +125,18 @@ def lock_info():\n \n \n class IRefreshableLockable(ILockable):\n-    """ A component that is lockable and whose locks can be refreshed.\n-    """\n+    """A component that is lockable and whose locks can be refreshed."""\n \n     def refresh_lock(lock_type=STEALABLE_LOCK):\n-        """Refresh the lock so it expires later.\n-        """\n+        """Refresh the lock so it expires later."""\n+\n \n # Configuration\n \n+\n class ILockSettings(Interface):\n-    """A component that looks up configuration settings for lock behavior.\n-    """\n-    lock_on_ttw_edit = Attribute(\'A property that reveals whether \'\n-                                 \'through-the-web locking is enabled.\')\n+    """A component that looks up configuration settings for lock behavior."""\n+\n+    lock_on_ttw_edit = Attribute(\n+        "A property that reveals whether " "through-the-web locking is enabled."\n+    )\ndiff --git a/plone/locking/lockable.py b/plone/locking/lockable.py\nindex 98c3f0a..963ff92 100644\n--- a/plone/locking/lockable.py\n+++ b/plone/locking/lockable.py\n@@ -1,42 +1,42 @@\n-from zope.interface import implementer\n-from zope.component import adapter, queryAdapter\n-\n+from AccessControl import getSecurityManager\n from persistent.dict import PersistentDict\n-\n from zope.annotation.interfaces import IAnnotations\n+from zope.component import adapter\n from zope.component import getUtility\n+from zope.component import queryAdapter\n+from zope.interface import implementer\n+\n \n-from AccessControl import getSecurityManager\n try:\n     from OFS.LockItem import LockItem\n except ImportError:\n     # Zope2\n     from webdav.LockItem import LockItem\n \n-from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import IEditingSchema\n-\n-from plone.locking.interfaces import IRefreshableLockable\n+from plone.locking.interfaces import ILockSettings\n from plone.locking.interfaces import INonStealableLock\n+from plone.locking.interfaces import IRefreshableLockable\n from plone.locking.interfaces import ITTWLockable\n from plone.locking.interfaces import STEALABLE_LOCK\n-from plone.locking.interfaces import ILockSettings\n+from plone.registry.interfaces import IRegistry\n+from Products.CMFPlone.interfaces import IEditingSchema\n+\n \n try:\n     from plone.protect.auto import safeWrite\n except ImportError:\n+\n     def safeWrite(*args):\n         pass\n \n \n-ANNOTATION_KEY = \'plone.locking\'\n+ANNOTATION_KEY = "plone.locking"\n \n \n @adapter(ITTWLockable)\n @implementer(IRefreshableLockable)\n-class TTWLockable(object):\n-    """An object that is being locked through-the-web\n-    """\n+class TTWLockable:\n+    """An object that is being locked through-the-web"""\n \n     def __init__(self, context):\n         self.context = context\n@@ -46,14 +46,13 @@ def lock(self, lock_type=STEALABLE_LOCK, children=False):\n         settings = queryAdapter(self.context, ILockSettings)\n         if settings is None:\n             registry = getUtility(IRegistry)\n-            settings = registry.forInterface(IEditingSchema,\n-                                             prefix=\'plone\')\n+            settings = registry.forInterface(IEditingSchema, prefix="plone")\n         if settings is not None and settings.lock_on_ttw_edit is False:\n             return\n \n         if not self.locked():\n             user = getSecurityManager().getUser()\n-            depth = children and \'infinity\' or 0\n+            depth = children and "infinity" or 0\n             timeout = int(lock_type.timeout * 60)\n             lock = LockItem(user, depth=depth, timeout=timeout)\n             token = lock.getLockToken()\n@@ -71,18 +70,17 @@ def refresh_lock(self, lock_type=STEALABLE_LOCK):\n \n         key = self._locks().get(lock_type.__name__, None)\n         if key:\n-            lock = self.context.wl_getLock(key[\'token\'])\n+            lock = self.context.wl_getLock(key["token"])\n             lock.refresh()\n \n     def unlock(self, lock_type=STEALABLE_LOCK, stealable_only=True):\n         if not self.locked():\n             return\n \n-        if not lock_type.stealable or not stealable_only \\\n-           or self.stealable(lock_type):\n+        if not lock_type.stealable or not stealable_only or self.stealable(lock_type):\n             key = self._locks().get(lock_type.__name__, None)\n             if key:\n-                self.context.wl_delLock(key[\'token\'])\n+                self.context.wl_delLock(key["token"])\n                 del self._locks()[lock_type.__name__]\n \n     def clear_locks(self):\n@@ -99,19 +97,21 @@ def can_safely_unlock(self, lock_type=STEALABLE_LOCK):\n         if not lock_type.user_unlockable:\n             return False\n \n-        info = self.lock_info()\n+        lock_info = self.lock_info()\n         # There is no lock, so return True\n-        if len(info) == 0:\n+        if len(lock_info) == 0:\n             return True\n \n         userid = getSecurityManager().getUser().getId() or None\n-        for l in info:\n+        for info in lock_info:\n             # There is another lock of a different type\n-            if not hasattr(l[\'type\'], \'__name__\') or \\\n-               l[\'type\'].__name__ != lock_type.__name__:\n+            if (\n+                not hasattr(info["type"], "__name__")\n+                or info["type"].__name__ != lock_type.__name__\n+            ):\n                 return False\n             # The lock is in fact held by the current user\n-            if l[\'creator\'] == userid:\n+            if info["creator"] == userid:\n                 return True\n         return False\n \n@@ -120,9 +120,11 @@ def stealable(self, lock_type=STEALABLE_LOCK):\n         if not lock_type.stealable:\n             return False\n         # Can\'t steal locks of a different type\n-        for l in self.lock_info():\n-            if not hasattr(l[\'type\'], \'__name__\') or \\\n-               l[\'type\'].__name__ != lock_type.__name__:\n+        for info in self.lock_info():\n+            if (\n+                not hasattr(info["type"], "__name__")\n+                or info["type"].__name__ != lock_type.__name__\n+            ):\n                 return False\n         # The lock type is stealable, and the object is not marked as\n         # non-stelaable, so return True\n@@ -134,7 +136,7 @@ def stealable(self, lock_type=STEALABLE_LOCK):\n \n     def lock_info(self):\n         info = []\n-        rtokens = dict([(v[\'token\'], v[\'type\']) for v in self._locks(False).values()])\n+        rtokens = {v["token"]: v["type"] for v in self._locks(False).values()}\n         jar = self.context._p_jar\n         if jar is not None:\n             isReadOnly = jar.isReadOnly()\n@@ -150,12 +152,14 @@ def lock_info(self):\n             # creator can be None when locked by an anonymous user\n             if creator is not None:\n                 creator = creator[1]\n-            info.append({\n-                \'creator\': creator,\n-                \'time\': lock.getModifiedTime(),\n-                \'token\': token,\n-                \'type\': rtokens.get(token, None),\n-            })\n+            info.append(\n+                {\n+                    "creator": creator,\n+                    "time": lock.getModifiedTime(),\n+                    "token": token,\n+                    "type": rtokens.get(token, None),\n+                }\n+            )\n         return info\n \n     def _locks(self, create=True):\ndiff --git a/plone/locking/testing.py b/plone/locking/testing.py\nindex 425e7ff..6564ae6 100644\n--- a/plone/locking/testing.py\n+++ b/plone/locking/testing.py\n@@ -1,6 +1,4 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n-from plone.app.testing import applyProfile\n from plone.app.testing import PloneSandboxLayer\n from plone.app.testing.layers import FunctionalTesting\n from plone.app.testing.layers import IntegrationTesting\n@@ -13,6 +11,7 @@ class PloneLockingLayer(PloneSandboxLayer):\n \n     def setUpZope(self, app, configurationContext):\n         import plone.locking\n+\n         self.loadZCML(package=plone.locking)\n \n \n@@ -20,16 +19,14 @@ def setUpZope(self, app, configurationContext):\n \n PLONE_LOCKING_INTEGRATION_TESTING = IntegrationTesting(\n     bases=(PLONE_LOCKING_FIXTURE,),\n-    name=\'PloneLockingLayer:Integration\',\n+    name="PloneLockingLayer:Integration",\n )\n \n PLONE_LOCKING_FUNCTIONAL_TESTING = FunctionalTesting(\n     bases=(PLONE_LOCKING_FIXTURE,),\n-    name=\'PloneLockingLayer:Functional\',\n+    name="PloneLockingLayer:Functional",\n )\n \n optionflags = (\n-    doctest.REPORT_ONLY_FIRST_FAILURE\n-    | doctest.ELLIPSIS\n-    | doctest.NORMALIZE_WHITESPACE\n+    doctest.REPORT_ONLY_FIRST_FAILURE | doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n )\ndiff --git a/plone/locking/tests/test_functional.py b/plone/locking/tests/test_functional.py\nindex b3481ed..1f21bd3 100644\n--- a/plone/locking/tests/test_functional.py\n+++ b/plone/locking/tests/test_functional.py\n@@ -1,9 +1,8 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n-from plone.locking.testing import PLONE_LOCKING_FUNCTIONAL_TESTING\n from plone.locking.testing import optionflags\n+from plone.locking.testing import PLONE_LOCKING_FUNCTIONAL_TESTING\n from plone.testing import layered\n from Products.CMFCore.utils import getToolByName\n \n@@ -12,16 +11,28 @@\n \n \n def setup(doctest):\n-    portal = doctest.globs[\'layer\'][\'portal\']\n-    portal_membership = getToolByName(portal, \'portal_membership\')\n-    portal_membership.addMember(\'member1\', \'secret\', (\'Member\', ), [])\n-    portal_membership.addMember(\'member2\', \'secret\', (\'Member\', ), [])\n+    portal = doctest.globs["layer"]["portal"]\n+    portal_membership = getToolByName(portal, "portal_membership")\n+    portal_membership.addMember("member1", "secret", ("Member",), [])\n+    portal_membership.addMember("member2", "secret", ("Member",), [])\n \n     logout()\n-    login(portal, \'member1\')\n-    setRoles(portal, \'member1\', [\'Manager\', ])\n-    portal.invokeFactory(\'Document\', \'doc\')\n-    setRoles(portal, \'member1\', [\'Member\', ])\n+    login(portal, "member1")\n+    setRoles(\n+        portal,\n+        "member1",\n+        [\n+            "Manager",\n+        ],\n+    )\n+    portal.invokeFactory("Document", "doc")\n+    setRoles(\n+        portal,\n+        "member1",\n+        [\n+            "Member",\n+        ],\n+    )\n \n \n def test_suite():\n@@ -29,8 +40,8 @@ def test_suite():\n     suite.addTest(\n         layered(\n             doctest.DocFileSuite(\n-                \'tests/locking.rst\',\n-                package=\'plone.locking\',\n+                "tests/locking.rst",\n+                package="plone.locking",\n                 optionflags=optionflags,\n                 setUp=setup,\n             ),\ndiff --git a/plone/locking/tests/test_views.py b/plone/locking/tests/test_views.py\nindex 412c3b0..eb81765 100644\n--- a/plone/locking/tests/test_views.py\n+++ b/plone/locking/tests/test_views.py\n@@ -1,17 +1,15 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.dexterity.interfaces import IDexterityFTI\n from plone.locking.browser.locking import LockingInformation\n from plone.locking.browser.locking import LockingInformationFallback\n from plone.locking.testing import PLONE_LOCKING_INTEGRATION_TESTING\n-from plone.dexterity.interfaces import IDexterityFTI\n from zope.component import queryUtility\n \n import unittest\n \n \n class TestLockInfoViewWithoutLocking(unittest.TestCase):\n-\n     layer = PLONE_LOCKING_INTEGRATION_TESTING\n \n     view = "@@plone_lock_info"\ndiff --git a/setup.py b/setup.py\nindex 63957dd..e205956 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,55 +1,57 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n \n-version = \'3.0.0.dev0\'\n \n-setup(name=\'plone.locking\',\n-      version=version,\n-      description="webdav locking support",\n-      long_description=open("README.rst").read() + "\\n" +\n-                       open("CHANGES.rst").read(),\n-      classifiers=[\n-          "Development Status :: 5 - Production/Stable",\n-          "Environment :: Web Environment",\n-          "Framework :: Plone",\n-          "Framework :: Plone :: 6.0",\n-          "Framework :: Plone :: Core",\n-          "Framework :: Zope :: 5",\n-          "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n-          "Operating System :: OS Independent",\n-          "Programming Language :: Python",\n-          "Programming Language :: Python :: 3.8",\n-          "Programming Language :: Python :: 3.9",\n-          "Programming Language :: Python :: 3.10",\n-          "Programming Language :: Python :: 3.11",\n-        ],\n-      keywords=\'locking webdav plone\',\n-      author=\'Plone Foundation\',\n-      author_email=\'plone-developers@lists.sourceforge.net\',\n-      url=\'https://pypi.org/project/plone.locking\',\n-      license=\'GPL version 2\',\n-      packages=find_packages(),\n-      namespace_packages=[\'plone\'],\n-      include_package_data=True,\n-      zip_safe=False,\n-      python_requires=">=3.8",\n-      extras_require=dict(\n+version = "3.0.0.dev0"\n+\n+setup(\n+    name="plone.locking",\n+    version=version,\n+    description="webdav locking support",\n+    long_description=open("README.rst").read() + "\\n" + open("CHANGES.rst").read(),\n+    classifiers=[\n+        "Development Status :: 5 - Production/Stable",\n+        "Environment :: Web Environment",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 6.0",\n+        "Framework :: Plone :: Core",\n+        "Framework :: Zope :: 5",\n+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n+        "Operating System :: OS Independent",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n+    ],\n+    keywords="locking webdav plone",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.locking",\n+    license="GPL version 2",\n+    packages=find_packages(),\n+    namespace_packages=["plone"],\n+    include_package_data=True,\n+    zip_safe=False,\n+    python_requires=">=3.8",\n+    extras_require=dict(\n         test=[\n-            \'plone.app.contenttypes\',\n-            \'plone.app.testing\',\n+            "plone.app.contenttypes",\n+            "plone.app.testing",\n         ]\n-      ),\n-      install_requires=[\n-        \'setuptools\',\n-        \'zope.annotation\',\n-        \'zope.component\',\n-        \'zope.i18nmessageid\',\n-        \'zope.interface\',\n-        \'zope.schema\',\n-        \'zope.viewlet\',\n-        \'Acquisition\',\n-        \'DateTime\',\n-        \'Products.CMFCore\',\n-        \'ZODB\',\n-        \'Zope\',\n-      ],\n-      )\n+    ),\n+    install_requires=[\n+        "setuptools",\n+        "zope.annotation",\n+        "zope.component",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n+        "zope.schema",\n+        "zope.viewlet",\n+        "Acquisition",\n+        "DateTime",\n+        "Products.CMFCore",\n+        "ZODB",\n+        "Zope",\n+    ],\n+)\n'

Repository: plone.locking


Branch: refs/heads/master
Date: 2023-04-13T14:34:40+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.locking/commit/48ff1b9650eeea22348bee4979a49c8ed9e2e1d0

Merge pull request #21 from plone/config-with-default-template-aea0bcd8

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/234bb1d6.internal
A tox.ini
M plone/__init__.py
M plone/locking/browser/info.pt
M plone/locking/browser/info.py
M plone/locking/browser/locking.py
M plone/locking/configure.zcml
M plone/locking/events.py
M plone/locking/interfaces.py
M plone/locking/lockable.py
M plone/locking/testing.py
M plone/locking/tests/test_functional.py
M plone/locking/tests/test_views.py
M pyproject.toml
M setup.cfg
M setup.py
D bootstrap.py
D buildout.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..87cb9ff\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "234bb1d6"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex ed57894..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,178 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-tmpeggs = tempfile.mkdtemp()\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep \n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n-\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-\n-\n-options, args = parser.parse_args()\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    if options.allow_site_packages:\n-        import setuptools\n-        import pkg_resources\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions \n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'. \n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-cmd = [sys.executable, \'-c\',\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-requirement = \'zc.buildout\'\n-version = options.version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        for part in parsed_version:\n-            if (part[:1] == \'*\') and (part not in _final_parts):\n-                return False\n-        return True\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/buildout.cfg b/buildout.cfg\ndeleted file mode 100644\nindex 2975139..0000000\n--- a/buildout.cfg\n+++ /dev/null\n@@ -1,7 +0,0 @@\n-[buildout]\n-extends = https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-5.x.cfg\n-package-name = plone.locking\n-package-extras = [test]\n-\n-[versions]\n-plone.locking =\ndiff --git a/news/234bb1d6.internal b/news/234bb1d6.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/234bb1d6.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad10..05f0beb 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,6 +1,7 @@\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/locking/browser/info.pt b/plone/locking/browser/info.pt\nindex ea92939..55b32f2 100644\n--- a/plone/locking/browser/info.pt\n+++ b/plone/locking/browser/info.pt\n@@ -1,45 +1,60 @@\n <div id="plone-lock-status"\n+     tal:define="\n+       locked view/info/is_locked_for_current_user;\n+       stealable view/lock_is_stealable;\n+       lock_details view/lock_info;\n+       icons python:context.restrictedTraverse(\'@@iconresolver\');\n+     "\n      i18n:domain="plone"\n-     tal:define="locked view/info/is_locked_for_current_user;\n-                 stealable view/lock_is_stealable;\n-                 lock_details view/lock_info;\n-                 icons python:context.restrictedTraverse(\'@@iconresolver\')">\n+>\n   <tal:block condition="locked">\n     <div class="portalMessage info alert alert-info">\n-    <tal:icon tal:replace="structure python:icons.tag(\'lock-fill\', tag_alt=\'locked\', tag_class=\'mb-1 me-2\')" />\n+      <tal:icon tal:replace="structure python:icons.tag(\'lock-fill\', tag_alt=\'locked\', tag_class=\'mb-1 me-2\')" />\n       <strong i18n:translate="label_locked">Locked</strong>\n-        <tal:author-page\n-            tal:condition="lock_details/author_page"\n-            i18n:translate="description_webdav_locked_by_author_on_time">\n+      <tal:author-page tal:condition="lock_details/author_page"\n+                       i18n:translate="description_webdav_locked_by_author_on_time"\n+      >\n           This item was locked by\n-          <a i18n:name="author"\n-             tal:content="lock_details/fullname"\n-             tal:attributes="href lock_details/author_page" />\n-          <span i18n:name="time"\n-                tal:content="lock_details/time_difference" /> ago.\n-        </tal:author-page>\n-        <tal:no-author-page\n-            tal:condition="not:lock_details/author_page"\n-            i18n:translate="description_webdav_locked_by_author_on_time">\n+        <a tal:content="lock_details/fullname"\n+           tal:attributes="\n+             href lock_details/author_page;\n+           "\n+           i18n:name="author"\n+        ></a>\n+        <span tal:content="lock_details/time_difference"\n+              i18n:name="time"\n+        ></span>\n+         ago.\n+      </tal:author-page>\n+      <tal:no-author-page tal:condition="not:lock_details/author_page"\n+                          i18n:translate="description_webdav_locked_by_author_on_time"\n+      >\n           This item was locked by\n-          <span i18n:name="author"\n-                tal:content="lock_details/fullname" />\n-          <span i18n:name="time"\n-                tal:content="lock_details/time_difference" /> ago.\n-        </tal:no-author-page>\n-        <form tal:condition="stealable"\n-              tal:attributes="action string:${context/absolute_url}/@@plone_lock_operations/force_unlock"\n-              method="POST">\n-          <span i18n:translate="description_webdav_locked_steal">\n+        <span tal:content="lock_details/fullname"\n+              i18n:name="author"\n+        ></span>\n+        <span tal:content="lock_details/time_difference"\n+              i18n:name="time"\n+        ></span>\n+         ago.\n+      </tal:no-author-page>\n+      <form method="POST"\n+            tal:condition="stealable"\n+            tal:attributes="\n+              action string:${context/absolute_url}/@@plone_lock_operations/force_unlock;\n+            "\n+      >\n+        <span i18n:translate="description_webdav_locked_steal">\n             If you are certain this user has abandoned the object,\n             you may\n-            <input type="submit"\n-                   value="Unlock"\n-                   i18n:name="unlock_button"\n-                   i18n:attributes="value" />\n+          <input type="submit"\n+                 value="Unlock"\n+                 i18n:attributes="value"\n+                 i18n:name="unlock_button"\n+          />\n             the object. You will then be able to edit it.\n-          </span>\n-        </form>\n+        </span>\n+      </form>\n     </div>\n   </tal:block>\n </div>\ndiff --git a/plone/locking/browser/info.py b/plone/locking/browser/info.py\nindex 89d6504..5965856 100644\n--- a/plone/locking/browser/info.py\n+++ b/plone/locking/browser/info.py\n@@ -1,10 +1,8 @@\n-from zope.interface import implementer\n-from zope.component import getMultiAdapter\n-\n-from zope.viewlet.interfaces import IViewlet\n-\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from zope.component import getMultiAdapter\n+from zope.interface import implementer\n+from zope.viewlet.interfaces import IViewlet\n \n \n @implementer(IViewlet)\n@@ -15,10 +13,10 @@ class LockInfoViewlet(BrowserView):\n     an implementation of the info box in a single place.\n     """\n \n-    template = ViewPageTemplateFile(\'info.pt\')\n+    template = ViewPageTemplateFile("info.pt")\n \n     def __init__(self, context, request, view, manager):\n-        super(LockInfoViewlet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.__parent__ = view\n         self.context = context\n         self.request = request\ndiff --git a/plone/locking/browser/locking.py b/plone/locking/browser/locking.py\nindex 6453bdc..f7c5861 100644\n--- a/plone/locking/browser/locking.py\n+++ b/plone/locking/browser/locking.py\n@@ -1,7 +1,6 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n-from DateTime import DateTime\n from datetime import timedelta\n+from DateTime import DateTime\n from plone.locking.interfaces import ILockable\n from plone.locking.interfaces import IRefreshableLockable\n from plone.registry.interfaces import IRegistry\n@@ -11,22 +10,19 @@\n from zope.i18nmessageid import MessageFactory\n \n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\n \n \n class LockingOperations(BrowserView):\n-    """Lock acquisition and stealing operations\n-    """\n+    """Lock acquisition and stealing operations"""\n \n     def redirect(self):\n-        """Redirect to the context view if needed\n-        """\n+        """Redirect to the context view if needed"""\n         url = self.context.absolute_url()\n         registry = getUtility(IRegistry)\n-        types_use_view = registry.get(\n-            \'plone.types_use_view_action_in_listings\', [])\n+        types_use_view = registry.get("plone.types_use_view_action_in_listings", [])\n         if self.context.portal_type in types_use_view:\n-            url += \'/view\'\n+            url += "/view"\n         self.request.RESPONSE.redirect(url)\n \n     def force_unlock(self, redirect=True):\n@@ -41,8 +37,7 @@ def force_unlock(self, redirect=True):\n             self.redirect()\n \n     def create_lock(self, redirect=True):\n-        """Lock the object if it is unlocked\n-        """\n+        """Lock the object if it is unlocked"""\n         lockable = IRefreshableLockable(self.context, None)\n         if lockable is not None:\n             lockable.lock()\n@@ -50,8 +45,7 @@ def create_lock(self, redirect=True):\n             self.redirect()\n \n     def safe_unlock(self, redirect=True):\n-        """Unlock the object if the current user has the lock\n-        """\n+        """Unlock the object if the current user has the lock"""\n         lockable = ILockable(self.context)\n         if lockable.can_safely_unlock():\n             lockable.unlock()\n@@ -59,8 +53,7 @@ def safe_unlock(self, redirect=True):\n             self.redirect()\n \n     def refresh_lock(self, redirect=True):\n-        """Reset the lock start time\n-        """\n+        """Reset the lock start time"""\n         lockable = IRefreshableLockable(self.context, None)\n         if lockable is not None:\n             lockable.refresh_lock()\n@@ -69,8 +62,7 @@ def refresh_lock(self, redirect=True):\n \n \n class LockingInformation(BrowserView):\n-    """Lock information\n-    """\n+    """Lock information"""\n \n     def is_locked(self):\n         lockable = ILockable(aq_inner(self.context))\n@@ -87,8 +79,7 @@ def is_locked_for_current_user(self):\n         # return lockable.locked() and not lockable.can_safely_unlock()\n \n     def lock_is_stealable(self):\n-        """Find out if the lock is stealable\n-        """\n+        """Find out if the lock is stealable"""\n         lockable = ILockable(self.context)\n         return lockable.stealable()\n \n@@ -103,37 +94,36 @@ def lock_info(self):\n         acquired.\n         """\n \n-        portal_membership = getToolByName(self.context, \'portal_membership\')\n-        portal_url = getToolByName(self.context, \'portal_url\')\n+        portal_membership = getToolByName(self.context, "portal_membership")\n+        portal_url = getToolByName(self.context, "portal_url")\n         lockable = ILockable(aq_inner(self.context))\n         url = portal_url()\n         for info in lockable.lock_info():\n-            creator = info[\'creator\']\n-            time = info[\'time\']\n-            token = info[\'token\']\n-            lock_type = info[\'type\']\n+            creator = info["creator"]\n+            time = info["time"]\n+            token = info["token"]\n+            lock_type = info["type"]\n             # Get the fullname, but remember that the creator may not\n             # be a member, but only Authenticated or even anonymous.\n             # Same for the author_page\n-            fullname = \'\'\n-            author_page = \'\'\n+            fullname = ""\n+            author_page = ""\n             member = portal_membership.getMemberById(creator)\n             if member:\n-                fullname = member.getProperty(\'fullname\', \'\')\n-                author_page = "%s/author/%s" % (url, creator)\n-            if fullname == \'\':\n-                fullname = creator or _(\'label_an_anonymous_user\',\n-                                        u\'an anonymous user\')\n+                fullname = member.getProperty("fullname", "")\n+                author_page = f"{url}/author/{creator}"\n+            if fullname == "":\n+                fullname = creator or _("label_an_anonymous_user", "an anonymous user")\n             time_difference = self._getNiceTimeDifference(time)\n \n             return {\n-                \'creator\': creator,\n-                \'fullname\': fullname,\n-                \'author_page\': author_page,\n-                \'time\': time,\n-                \'time_difference\': time_difference,\n-                \'token\': token,\n-                \'type\': lock_type,\n+                "creator": creator,\n+                "fullname": fullname,\n+                "author_page": author_page,\n+                "time": time,\n+                "time_difference": time_difference,\n+                "token": token,\n+                "type": lock_type,\n             }\n \n     def _getNiceTimeDifference(self, baseTime):\n@@ -144,22 +134,26 @@ def _getNiceTimeDifference(self, baseTime):\n         hours = delta.seconds // 3600\n         minutes = (delta.seconds - (hours * 3600)) // 60\n \n-        dateString = u""\n+        dateString = ""\n         if days == 0:\n             if hours == 0:\n                 if delta.seconds < 120:\n-                    dateString = _(u"1 minute")\n+                    dateString = _("1 minute")\n                 else:\n-                    dateString = _(u"$m minutes", mapping={\'m\': minutes})\n+                    dateString = _("$m minutes", mapping={"m": minutes})\n             elif hours == 1:\n-                dateString = _(u"$h hour and $m minutes", mapping={\'h\': hours, \'m\': minutes})  # noqa\n+                dateString = _(\n+                    "$h hour and $m minutes", mapping={"h": hours, "m": minutes}\n+                )  # noqa\n             else:\n-                dateString = _(u"$h hours and $m minutes", mapping={\'h\': hours, \'m\': minutes})  # noqa\n+                dateString = _(\n+                    "$h hours and $m minutes", mapping={"h": hours, "m": minutes}\n+                )  # noqa\n         else:\n             if days == 1:\n-                dateString = _(u"$d day and $h hours", mapping={\'d\': days, \'h\': hours})\n+                dateString = _("$d day and $h hours", mapping={"d": days, "h": hours})\n             else:\n-                dateString = _(u"$d days and $h hours", mapping={\'d\': days, \'h\': hours})\n+                dateString = _("$d days and $h hours", mapping={"d": days, "h": hours})\n         return dateString\n \n \ndiff --git a/plone/locking/configure.zcml b/plone/locking/configure.zcml\nindex 9c8ed2c..92ab9af 100644\n--- a/plone/locking/configure.zcml\n+++ b/plone/locking/configure.zcml\n@@ -1,33 +1,37 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:browser="http://namespaces.zope.org/browser">\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    >\n \n-    <adapter factory=".lockable.TTWLockable" />\n+  <adapter factory=".lockable.TTWLockable" />\n \n-    <include package="Products.CMFCore" file="configure.zcml" />\n+  <include\n+      package="Products.CMFCore"\n+      file="configure.zcml"\n+      />\n \n-    <browser:page\n-        for=".interfaces.ITTWLockable"\n-        name="plone_lock_operations"\n-        class=".browser.locking.LockingOperations"\n-        permission="cmf.ModifyPortalContent"\n-        allowed_attributes="create_lock safe_unlock force_unlock refresh_lock"\n-        />\n+  <browser:page\n+      name="plone_lock_operations"\n+      for=".interfaces.ITTWLockable"\n+      class=".browser.locking.LockingOperations"\n+      allowed_attributes="create_lock safe_unlock force_unlock refresh_lock"\n+      permission="cmf.ModifyPortalContent"\n+      />\n \n-    <browser:page\n-        for=".interfaces.ITTWLockable"\n-        name="plone_lock_info"\n-        class=".browser.locking.LockingInformation"\n-        permission="zope2.View"\n-        allowed_attributes="is_locked is_locked_for_current_user lock_is_stealable lock_info"\n-        />\n+  <browser:page\n+      name="plone_lock_info"\n+      for=".interfaces.ITTWLockable"\n+      class=".browser.locking.LockingInformation"\n+      allowed_attributes="is_locked is_locked_for_current_user lock_is_stealable lock_info"\n+      permission="zope2.View"\n+      />\n \n-    <browser:page\n-        for="*"\n-        name="plone_lock_info"\n-        class=".browser.locking.LockingInformationFallback"\n-        permission="zope2.View"\n-        allowed_attributes="is_locked is_locked_for_current_user lock_is_stealable lock_info"\n-        />\n+  <browser:page\n+      name="plone_lock_info"\n+      for="*"\n+      class=".browser.locking.LockingInformationFallback"\n+      allowed_attributes="is_locked is_locked_for_current_user lock_is_stealable lock_info"\n+      permission="zope2.View"\n+      />\n \n </configure>\ndiff --git a/plone/locking/events.py b/plone/locking/events.py\nindex 0a956e1..08843a5 100644\n--- a/plone/locking/events.py\n+++ b/plone/locking/events.py\n@@ -1,19 +1,19 @@\n from plone.locking.interfaces import ILockable\n \n+\n # These event handlers are not connected by default, but can be used for\n # a particular object event (used e.g. in Archetypes)\n \n+\n def lockOnEditBegins(obj, event):\n-    """Lock the object when a user start working on the object\n-    """\n+    """Lock the object when a user start working on the object"""\n     lockable = ILockable(obj)\n     if not lockable.locked():\n         lockable.lock()\n \n \n def unlockAfterModification(obj, event):\n-    """Release the DAV lock after save\n-    """\n+    """Release the DAV lock after save"""\n     lockable = ILockable(obj)\n     if lockable.can_safely_unlock():\n         lockable.unlock()\ndiff --git a/plone/locking/interfaces.py b/plone/locking/interfaces.py\nindex 4824e39..dbaf7e8 100644\n--- a/plone/locking/interfaces.py\n+++ b/plone/locking/interfaces.py\n@@ -1,54 +1,61 @@\n-from zope.interface import implementer, Interface, Attribute\n+from zope import schema\n from zope.annotation.interfaces import IAttributeAnnotatable\n+from zope.interface import Attribute\n+from zope.interface import implementer\n+from zope.interface import Interface\n \n-from zope import schema\n \n # Lock types, including the default\n \n # Timeouts are expressed in minutes\n DEFAULT_TIMEOUT = 10\n-MAX_TIMEOUT = ((2 ** 32) - 1) // 60\n+MAX_TIMEOUT = ((2**32) - 1) // 60\n \n \n class ILockType(Interface):\n-    """Representation of a type of lock\n-    """\n+    """Representation of a type of lock"""\n \n-    __name__ = schema.TextLine(title=u"Name",\n-                               description=u"The unique name of the lock type")\n+    __name__ = schema.TextLine(\n+        title="Name", description="The unique name of the lock type"\n+    )\n \n-    stealable = schema.Bool(title=u"Stealable",\n-                            description=u"Whether this type of lock is stealable")\n-    user_unlockable = schema.Bool(title=u"User unlockable",\n-                                  description=u"Whether this type of lock should be unlockable immediately")\n-    timeout = schema.Int(title=u"lock timeout",\n-                         description=u"Locking timeout in minutes")\n+    stealable = schema.Bool(\n+        title="Stealable", description="Whether this type of lock is stealable"\n+    )\n+    user_unlockable = schema.Bool(\n+        title="User unlockable",\n+        description="Whether this type of lock should be unlockable immediately",\n+    )\n+    timeout = schema.Int(title="lock timeout", description="Locking timeout in minutes")\n \n \n @implementer(ILockType)\n-class LockType(object):\n-\n+class LockType:\n     def __init__(self, name, stealable, user_unlockable, timeout=DEFAULT_TIMEOUT):\n         self.__name__ = name\n         self.stealable = stealable\n         self.user_unlockable = user_unlockable\n         self.timeout = timeout\n \n-STEALABLE_LOCK = LockType(u"plone.locking.stealable", stealable=True, user_unlockable=True)\n+\n+STEALABLE_LOCK = LockType(\n+    "plone.locking.stealable", stealable=True, user_unlockable=True\n+)\n \n # Marker interfaces\n \n+\n class ITTWLockable(IAttributeAnnotatable):\n-    """Marker interface for objects that are lockable through-the-web\n-    """\n+    """Marker interface for objects that are lockable through-the-web"""\n \n \n class INonStealableLock(Interface):\n-    """Mark an object with this interface to make locks be non-stealable.\n-    """\n+    """Mark an object with this interface to make locks be non-stealable."""\n+\n \n # Functionality\n \n+\n class ILockable(Interface):\n     """A component that is lockable.\n \n@@ -57,7 +64,7 @@ class ILockable(Interface):\n     that can be stolen (unless the object is marked with INonStealableLock).\n \n     Most operations take the type as a parameter and operate on the lock token\n-    assocaited with a particular type.\n+    associated with a particular type.\n     """\n \n     def lock(lock_type=STEALABLE_LOCK, children=False):\n@@ -75,12 +82,10 @@ def unlock(lock_type=STEALABLE_LOCK, stealable_only=True):\n         """\n \n     def clear_locks():\n-        """Clear all locks on the object\n-        """\n+        """Clear all locks on the object"""\n \n     def locked():\n-        """True if the object is locked with any lock.\n-        """\n+        """True if the object is locked with any lock."""\n \n     def can_safely_unlock(lock_type=STEALABLE_LOCK):\n         """Determine if the current user can safely attempt to unlock the\n@@ -120,17 +125,18 @@ def lock_info():\n \n \n class IRefreshableLockable(ILockable):\n-    """ A component that is lockable and whose locks can be refreshed.\n-    """\n+    """A component that is lockable and whose locks can be refreshed."""\n \n     def refresh_lock(lock_type=STEALABLE_LOCK):\n-        """Refresh the lock so it expires later.\n-        """\n+        """Refresh the lock so it expires later."""\n+\n \n # Configuration\n \n+\n class ILockSettings(Interface):\n-    """A component that looks up configuration settings for lock behavior.\n-    """\n-    lock_on_ttw_edit = Attribute(\'A property that reveals whether \'\n-                                 \'through-the-web locking is enabled.\')\n+    """A component that looks up configuration settings for lock behavior."""\n+\n+    lock_on_ttw_edit = Attribute(\n+        "A property that reveals whether " "through-the-web locking is enabled."\n+    )\ndiff --git a/plone/locking/lockable.py b/plone/locking/lockable.py\nindex 98c3f0a..963ff92 100644\n--- a/plone/locking/lockable.py\n+++ b/plone/locking/lockable.py\n@@ -1,42 +1,42 @@\n-from zope.interface import implementer\n-from zope.component import adapter, queryAdapter\n-\n+from AccessControl import getSecurityManager\n from persistent.dict import PersistentDict\n-\n from zope.annotation.interfaces import IAnnotations\n+from zope.component import adapter\n from zope.component import getUtility\n+from zope.component import queryAdapter\n+from zope.interface import implementer\n+\n \n-from AccessControl import getSecurityManager\n try:\n     from OFS.LockItem import LockItem\n except ImportError:\n     # Zope2\n     from webdav.LockItem import LockItem\n \n-from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import IEditingSchema\n-\n-from plone.locking.interfaces import IRefreshableLockable\n+from plone.locking.interfaces import ILockSettings\n from plone.locking.interfaces import INonStealableLock\n+from plone.locking.interfaces import IRefreshableLockable\n from plone.locking.interfaces import ITTWLockable\n from plone.locking.interfaces import STEALABLE_LOCK\n-from plone.locking.interfaces import ILockSettings\n+from plone.registry.interfaces import IRegistry\n+from Products.CMFPlone.interfaces import IEditingSchema\n+\n \n try:\n     from plone.protect.auto import safeWrite\n except ImportError:\n+\n     def safeWrite(*args):\n         pass\n \n \n-ANNOTATION_KEY = \'plone.locking\'\n+ANNOTATION_KEY = "plone.locking"\n \n \n @adapter(ITTWLockable)\n @implementer(IRefreshableLockable)\n-class TTWLockable(object):\n-    """An object that is being locked through-the-web\n-    """\n+class TTWLockable:\n+    """An object that is being locked through-the-web"""\n \n     def __init__(self, context):\n         self.context = context\n@@ -46,14 +46,13 @@ def lock(self, lock_type=STEALABLE_LOCK, children=False):\n         settings = queryAdapter(self.context, ILockSettings)\n         if settings is None:\n             registry = getUtility(IRegistry)\n-            settings = registry.forInterface(IEditingSchema,\n-                                             prefix=\'plone\')\n+            settings = registry.forInterface(IEditingSchema, prefix="plone")\n         if settings is not None and settings.lock_on_ttw_edit is False:\n             return\n \n         if not self.locked():\n             user = getSecurityManager().getUser()\n-            depth = children and \'infinity\' or 0\n+            depth = children and "infinity" or 0\n             timeout = int(lock_type.timeout * 60)\n             lock = LockItem(user, depth=depth, timeout=timeout)\n             token = lock.getLockToken()\n@@ -71,18 +70,17 @@ def refresh_lock(self, lock_type=STEALABLE_LOCK):\n \n         key = self._locks().get(lock_type.__name__, None)\n         if key:\n-            lock = self.context.wl_getLock(key[\'token\'])\n+            lock = self.context.wl_getLock(key["token"])\n             lock.refresh()\n \n     def unlock(self, lock_type=STEALABLE_LOCK, stealable_only=True):\n         if not self.locked():\n             return\n \n-        if not lock_type.stealable or not stealable_only \\\n-           or self.stealable(lock_type):\n+        if not lock_type.stealable or not stealable_only or self.stealable(lock_type):\n             key = self._locks().get(lock_type.__name__, None)\n             if key:\n-                self.context.wl_delLock(key[\'token\'])\n+                self.context.wl_delLock(key["token"])\n                 del self._locks()[lock_type.__name__]\n \n     def clear_locks(self):\n@@ -99,19 +97,21 @@ def can_safely_unlock(self, lock_type=STEALABLE_LOCK):\n         if not lock_type.user_unlockable:\n             return False\n \n-        info = self.lock_info()\n+        lock_info = self.lock_info()\n         # There is no lock, so return True\n-        if len(info) == 0:\n+        if len(lock_info) == 0:\n             return True\n \n         userid = getSecurityManager().getUser().getId() or None\n-        for l in info:\n+        for info in lock_info:\n             # There is another lock of a different type\n-            if not hasattr(l[\'type\'], \'__name__\') or \\\n-               l[\'type\'].__name__ != lock_type.__name__:\n+            if (\n+                not hasattr(info["type"], "__name__")\n+                or info["type"].__name__ != lock_type.__name__\n+            ):\n                 return False\n             # The lock is in fact held by the current user\n-            if l[\'creator\'] == userid:\n+            if info["creator"] == userid:\n                 return True\n         return False\n \n@@ -120,9 +120,11 @@ def stealable(self, lock_type=STEALABLE_LOCK):\n         if not lock_type.stealable:\n             return False\n         # Can\'t steal locks of a different type\n-        for l in self.lock_info():\n-            if not hasattr(l[\'type\'], \'__name__\') or \\\n-               l[\'type\'].__name__ != lock_type.__name__:\n+        for info in self.lock_info():\n+            if (\n+                not hasattr(info["type"], "__name__")\n+                or info["type"].__name__ != lock_type.__name__\n+            ):\n                 return False\n         # The lock type is stealable, and the object is not marked as\n         # non-stelaable, so return True\n@@ -134,7 +136,7 @@ def stealable(self, lock_type=STEALABLE_LOCK):\n \n     def lock_info(self):\n         info = []\n-        rtokens = dict([(v[\'token\'], v[\'type\']) for v in self._locks(False).values()])\n+        rtokens = {v["token"]: v["type"] for v in self._locks(False).values()}\n         jar = self.context._p_jar\n         if jar is not None:\n             isReadOnly = jar.isReadOnly()\n@@ -150,12 +152,14 @@ def lock_info(self):\n             # creator can be None when locked by an anonymous user\n             if creator is not None:\n                 creator = creator[1]\n-            info.append({\n-                \'creator\': creator,\n-                \'time\': lock.getModifiedTime(),\n-                \'token\': token,\n-                \'type\': rtokens.get(token, None),\n-            })\n+            info.append(\n+                {\n+                    "creator": creator,\n+                    "time": lock.getModifiedTime(),\n+                    "token": token,\n+                    "type": rtokens.get(token, None),\n+                }\n+            )\n         return info\n \n     def _locks(self, create=True):\ndiff --git a/plone/locking/testing.py b/plone/locking/testing.py\nindex 425e7ff..6564ae6 100644\n--- a/plone/locking/testing.py\n+++ b/plone/locking/testing.py\n@@ -1,6 +1,4 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n-from plone.app.testing import applyProfile\n from plone.app.testing import PloneSandboxLayer\n from plone.app.testing.layers import FunctionalTesting\n from plone.app.testing.layers import IntegrationTesting\n@@ -13,6 +11,7 @@ class PloneLockingLayer(PloneSandboxLayer):\n \n     def setUpZope(self, app, configurationContext):\n         import plone.locking\n+\n         self.loadZCML(package=plone.locking)\n \n \n@@ -20,16 +19,14 @@ def setUpZope(self, app, configurationContext):\n \n PLONE_LOCKING_INTEGRATION_TESTING = IntegrationTesting(\n     bases=(PLONE_LOCKING_FIXTURE,),\n-    name=\'PloneLockingLayer:Integration\',\n+    name="PloneLockingLayer:Integration",\n )\n \n PLONE_LOCKING_FUNCTIONAL_TESTING = FunctionalTesting(\n     bases=(PLONE_LOCKING_FIXTURE,),\n-    name=\'PloneLockingLayer:Functional\',\n+    name="PloneLockingLayer:Functional",\n )\n \n optionflags = (\n-    doctest.REPORT_ONLY_FIRST_FAILURE\n-    | doctest.ELLIPSIS\n-    | doctest.NORMALIZE_WHITESPACE\n+    doctest.REPORT_ONLY_FIRST_FAILURE | doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n )\ndiff --git a/plone/locking/tests/test_functional.py b/plone/locking/tests/test_functional.py\nindex b3481ed..1f21bd3 100644\n--- a/plone/locking/tests/test_functional.py\n+++ b/plone/locking/tests/test_functional.py\n@@ -1,9 +1,8 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n-from plone.locking.testing import PLONE_LOCKING_FUNCTIONAL_TESTING\n from plone.locking.testing import optionflags\n+from plone.locking.testing import PLONE_LOCKING_FUNCTIONAL_TESTING\n from plone.testing import layered\n from Products.CMFCore.utils import getToolByName\n \n@@ -12,16 +11,28 @@\n \n \n def setup(doctest):\n-    portal = doctest.globs[\'layer\'][\'portal\']\n-    portal_membership = getToolByName(portal, \'portal_membership\')\n-    portal_membership.addMember(\'member1\', \'secret\', (\'Member\', ), [])\n-    portal_membership.addMember(\'member2\', \'secret\', (\'Member\', ), [])\n+    portal = doctest.globs["layer"]["portal"]\n+    portal_membership = getToolByName(portal, "portal_membership")\n+    portal_membership.addMember("member1", "secret", ("Member",), [])\n+    portal_membership.addMember("member2", "secret", ("Member",), [])\n \n     logout()\n-    login(portal, \'member1\')\n-    setRoles(portal, \'member1\', [\'Manager\', ])\n-    portal.invokeFactory(\'Document\', \'doc\')\n-    setRoles(portal, \'member1\', [\'Member\', ])\n+    login(portal, "member1")\n+    setRoles(\n+        portal,\n+        "member1",\n+        [\n+            "Manager",\n+        ],\n+    )\n+    portal.invokeFactory("Document", "doc")\n+    setRoles(\n+        portal,\n+        "member1",\n+        [\n+            "Member",\n+        ],\n+    )\n \n \n def test_suite():\n@@ -29,8 +40,8 @@ def test_suite():\n     suite.addTest(\n         layered(\n             doctest.DocFileSuite(\n-                \'tests/locking.rst\',\n-                package=\'plone.locking\',\n+                "tests/locking.rst",\n+                package="plone.locking",\n                 optionflags=optionflags,\n                 setUp=setup,\n             ),\ndiff --git a/plone/locking/tests/test_views.py b/plone/locking/tests/test_views.py\nindex 412c3b0..eb81765 100644\n--- a/plone/locking/tests/test_views.py\n+++ b/plone/locking/tests/test_views.py\n@@ -1,17 +1,15 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.dexterity.interfaces import IDexterityFTI\n from plone.locking.browser.locking import LockingInformation\n from plone.locking.browser.locking import LockingInformationFallback\n from plone.locking.testing import PLONE_LOCKING_INTEGRATION_TESTING\n-from plone.dexterity.interfaces import IDexterityFTI\n from zope.component import queryUtility\n \n import unittest\n \n \n class TestLockInfoViewWithoutLocking(unittest.TestCase):\n-\n     layer = PLONE_LOCKING_INTEGRATION_TESTING\n \n     view = "@@plone_lock_info"\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..0dad625 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,62 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\', \'ExtensionClass\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\', \'six\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 4642dab..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,9 +1,23 @@\n-[check-manifest]\n-ignore =\n-    bootstrap.py\n-    buildout.cfg\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n \n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n \n-[bdist_wheel]\n-universal = 1\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex 63957dd..e205956 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,55 +1,57 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n \n-version = \'3.0.0.dev0\'\n \n-setup(name=\'plone.locking\',\n-      version=version,\n-      description="webdav locking support",\n-      long_description=open("README.rst").read() + "\\n" +\n-                       open("CHANGES.rst").read(),\n-      classifiers=[\n-          "Development Status :: 5 - Production/Stable",\n-          "Environment :: Web Environment",\n-          "Framework :: Plone",\n-          "Framework :: Plone :: 6.0",\n-          "Framework :: Plone :: Core",\n-          "Framework :: Zope :: 5",\n-          "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n-          "Operating System :: OS Independent",\n-          "Programming Language :: Python",\n-          "Programming Language :: Python :: 3.8",\n-          "Programming Language :: Python :: 3.9",\n-          "Programming Language :: Python :: 3.10",\n-          "Programming Language :: Python :: 3.11",\n-        ],\n-      keywords=\'locking webdav plone\',\n-      author=\'Plone Foundation\',\n-      author_email=\'plone-developers@lists.sourceforge.net\',\n-      url=\'https://pypi.org/project/plone.locking\',\n-      license=\'GPL version 2\',\n-      packages=find_packages(),\n-      namespace_packages=[\'plone\'],\n-      include_package_data=True,\n-      zip_safe=False,\n-      python_requires=">=3.8",\n-      extras_require=dict(\n+version = "3.0.0.dev0"\n+\n+setup(\n+    name="plone.locking",\n+    version=version,\n+    description="webdav locking support",\n+    long_description=open("README.rst").read() + "\\n" + open("CHANGES.rst").read(),\n+    classifiers=[\n+        "Development Status :: 5 - Production/Stable",\n+        "Environment :: Web Environment",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 6.0",\n+        "Framework :: Plone :: Core",\n+        "Framework :: Zope :: 5",\n+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n+        "Operating System :: OS Independent",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n+    ],\n+    keywords="locking webdav plone",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.locking",\n+    license="GPL version 2",\n+    packages=find_packages(),\n+    namespace_packages=["plone"],\n+    include_package_data=True,\n+    zip_safe=False,\n+    python_requires=">=3.8",\n+    extras_require=dict(\n         test=[\n-            \'plone.app.contenttypes\',\n-            \'plone.app.testing\',\n+            "plone.app.contenttypes",\n+            "plone.app.testing",\n         ]\n-      ),\n-      install_requires=[\n-        \'setuptools\',\n-        \'zope.annotation\',\n-        \'zope.component\',\n-        \'zope.i18nmessageid\',\n-        \'zope.interface\',\n-        \'zope.schema\',\n-        \'zope.viewlet\',\n-        \'Acquisition\',\n-        \'DateTime\',\n-        \'Products.CMFCore\',\n-        \'ZODB\',\n-        \'Zope\',\n-      ],\n-      )\n+    ),\n+    install_requires=[\n+        "setuptools",\n+        "zope.annotation",\n+        "zope.component",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n+        "zope.schema",\n+        "zope.viewlet",\n+        "Acquisition",\n+        "DateTime",\n+        "Products.CMFCore",\n+        "ZODB",\n+        "Zope",\n+    ],\n+)\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..598016d\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.locking {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.locking {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

