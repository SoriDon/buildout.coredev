Repository: mockup


Branch: refs/heads/master
Date: 2016-11-07T15:31:24-06:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/mockup/commit/d602242f02264d068490fe135587ff66d4d9748e

fix for #706

introduce new utility method `removeHTML` and implement it to the
select2 pattern. add tests for html manipulation and select2 values.

Files changed:
M CHANGES.rst
M mockup/js/utils.js
M mockup/patterns/select2/pattern.js
M mockup/tests/pattern-select2-test.js
M mockup/tests/utils-test.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 98a51b1..c4ca825 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -105,6 +105,10 @@ Fixes:
 - Use github fork of grunt-sed and remove unused task.
   [gforcada]
 
+- Fixes issue when HTML escaping select2 values. Now removing HTML completely and leave the input unescaped.
+  [petschki]
+
+
 2.3.0 (2016-08-19)
 ------------------
 
diff --git a/mockup/js/utils.js b/mockup/js/utils.js
index 1db4dca..6540e56 100644
--- a/mockup/js/utils.js
+++ b/mockup/js/utils.js
@@ -333,9 +333,14 @@ define([
     return $('<div/>').text(val).html();
   };
 
+  var removeHTML = function(val) {
+    return val.replace(/<[^>]+>/ig, "");
+  };
+
   return {
     bool: bool,
     escapeHTML: escapeHTML,
+    removeHTML: removeHTML,
     featureSupport: featureSupport,
     generateId: generateId,
     getAuthenticator: getAuthenticator,
diff --git a/mockup/patterns/select2/pattern.js b/mockup/patterns/select2/pattern.js
index 46e962b..173bb9d 100644
--- a/mockup/patterns/select2/pattern.js
+++ b/mockup/patterns/select2/pattern.js
@@ -116,7 +116,7 @@ define([
             if (seldefaults[this]) {
               text = seldefaults[this];
             }
-            data.push({id: utils.escapeHTML(this), text: utils.escapeHTML(text)});
+            data.push({id: utils.removeHTML(this), text: utils.removeHTML(text)});
           });
           callback(data);
         };
@@ -227,7 +227,7 @@ define([
           self.options.initSelection = function ($el, callback) {
             var data = [], value = $el.val();
             $(value.split(self.options.separator)).each(function () {
-              var val = utils.escapeHTML(this);
+              var val = utils.removeHTML(this);
               data.push({id: val, text: val});
             });
             callback(data);
@@ -256,7 +256,7 @@ define([
 
               var haveResult = queryTerm === '' || $.inArray(queryTerm, dataIds) >= 0;
               if (self.options.allowNewItems && !haveResult) {
-                queryTerm = utils.escapeHTML(queryTerm);
+                queryTerm = utils.removeHTML(queryTerm);
                 results.push({id: queryTerm, text: queryTerm});
               }
 
diff --git a/mockup/tests/pattern-select2-test.js b/mockup/tests/pattern-select2-test.js
index b810de8..730ce32 100644
--- a/mockup/tests/pattern-select2-test.js
+++ b/mockup/tests/pattern-select2-test.js
@@ -145,6 +145,46 @@ define([
       expect($results.first().text()).to.be.equal('AAA');
     });
 
+    it('remove html input', function() {
+      $('<input type="hidden" class="pat-select2"' +
+        '    data-pat-select2="placeholder:Search for a Value;' +
+        '                     vocabularyUrl: /select2-ajax.json;' +
+        '                     width:20em" />'
+      ).appendTo('body');
+      var pattern = $('.pat-select2').patternSelect2();
+
+      var $input = $('.select2-input');
+      $input.click().val('<img src="logo.png" />Evil logo');
+      var keyup = $.Event('keyup-change');
+      $input.trigger(keyup);
+      this.clock.tick(1000);
+
+      var $results = $('li.select2-result-selectable');
+      expect($results.size()).to.equal(4);
+      expect($results.first().hasClass('select2-highlighted')).to.be.equal(true);
+      expect($results.first().text()).to.be.equal('Evil logo');
+    });
+
+    it('do not html-escape input', function() {
+      $('<input type="hidden" class="pat-select2"' +
+        '    data-pat-select2="placeholder:Search for a Value;' +
+        '                     vocabularyUrl: /select2-ajax.json;' +
+        '                     width:20em" />'
+      ).appendTo('body');
+      var pattern = $('.pat-select2').patternSelect2();
+
+      var $input = $('.select2-input');
+      $input.click().val('this < that & those');
+      var keyup = $.Event('keyup-change');
+      $input.trigger(keyup);
+      this.clock.tick(1000);
+
+      var $results = $('li.select2-result-selectable');
+      expect($results.size()).to.equal(4);
+      expect($results.first().hasClass('select2-highlighted')).to.be.equal(true);
+      expect($results.first().text()).to.be.equal('this < that & those');
+    });
+
     it('sets up orderable tags', function() {
       var $el = $(
         '<div>' +
diff --git a/mockup/tests/utils-test.js b/mockup/tests/utils-test.js
index 5704398..f99e0e7 100644
--- a/mockup/tests/utils-test.js
+++ b/mockup/tests/utils-test.js
@@ -176,7 +176,7 @@ define([
         expect(loading.$el.is(':visible')).to.equal(true);
       });
       it('hide loader', function() {
-        var loading = new utils.Loading(); 
+        var loading = new utils.Loading();
         loading.show();
         loading.hide();
         expect(loading.$el.is(':visible')).to.equal(false);
@@ -211,6 +211,19 @@ define([
 
     });
 
+    describe('HTML manupulation', function() {
+
+      it('escaping', function() {
+        var escaped = utils.escapeHTML('<img src="logo.png" />');
+        expect(escaped).to.equal('&lt;img src="logo.png" /&gt;');
+      });
+
+      it('removing', function() {
+        var clean = utils.removeHTML('<p>Paragraph</p>');
+        expect(clean).to.equal('Paragraph');
+      });
+
+    });
 
   });
 


Repository: mockup


Branch: refs/heads/master
Date: 2016-11-07T15:33:05-06:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/6c98e9ea713298227e00d3461cf3c687278fe0aa

Merge pull request #722 from plone/petschki_fix_706

fix for #706

Files changed:
M CHANGES.rst
M mockup/js/utils.js
M mockup/patterns/select2/pattern.js
M mockup/tests/pattern-select2-test.js
M mockup/tests/utils-test.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 98a51b1..c4ca825 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -105,6 +105,10 @@ Fixes:
 - Use github fork of grunt-sed and remove unused task.
   [gforcada]
 
+- Fixes issue when HTML escaping select2 values. Now removing HTML completely and leave the input unescaped.
+  [petschki]
+
+
 2.3.0 (2016-08-19)
 ------------------
 
diff --git a/mockup/js/utils.js b/mockup/js/utils.js
index 1db4dca..6540e56 100644
--- a/mockup/js/utils.js
+++ b/mockup/js/utils.js
@@ -333,9 +333,14 @@ define([
     return $('<div/>').text(val).html();
   };
 
+  var removeHTML = function(val) {
+    return val.replace(/<[^>]+>/ig, "");
+  };
+
   return {
     bool: bool,
     escapeHTML: escapeHTML,
+    removeHTML: removeHTML,
     featureSupport: featureSupport,
     generateId: generateId,
     getAuthenticator: getAuthenticator,
diff --git a/mockup/patterns/select2/pattern.js b/mockup/patterns/select2/pattern.js
index 46e962b..173bb9d 100644
--- a/mockup/patterns/select2/pattern.js
+++ b/mockup/patterns/select2/pattern.js
@@ -116,7 +116,7 @@ define([
             if (seldefaults[this]) {
               text = seldefaults[this];
             }
-            data.push({id: utils.escapeHTML(this), text: utils.escapeHTML(text)});
+            data.push({id: utils.removeHTML(this), text: utils.removeHTML(text)});
           });
           callback(data);
         };
@@ -227,7 +227,7 @@ define([
           self.options.initSelection = function ($el, callback) {
             var data = [], value = $el.val();
             $(value.split(self.options.separator)).each(function () {
-              var val = utils.escapeHTML(this);
+              var val = utils.removeHTML(this);
               data.push({id: val, text: val});
             });
             callback(data);
@@ -256,7 +256,7 @@ define([
 
               var haveResult = queryTerm === '' || $.inArray(queryTerm, dataIds) >= 0;
               if (self.options.allowNewItems && !haveResult) {
-                queryTerm = utils.escapeHTML(queryTerm);
+                queryTerm = utils.removeHTML(queryTerm);
                 results.push({id: queryTerm, text: queryTerm});
               }
 
diff --git a/mockup/tests/pattern-select2-test.js b/mockup/tests/pattern-select2-test.js
index b810de8..730ce32 100644
--- a/mockup/tests/pattern-select2-test.js
+++ b/mockup/tests/pattern-select2-test.js
@@ -145,6 +145,46 @@ define([
       expect($results.first().text()).to.be.equal('AAA');
     });
 
+    it('remove html input', function() {
+      $('<input type="hidden" class="pat-select2"' +
+        '    data-pat-select2="placeholder:Search for a Value;' +
+        '                     vocabularyUrl: /select2-ajax.json;' +
+        '                     width:20em" />'
+      ).appendTo('body');
+      var pattern = $('.pat-select2').patternSelect2();
+
+      var $input = $('.select2-input');
+      $input.click().val('<img src="logo.png" />Evil logo');
+      var keyup = $.Event('keyup-change');
+      $input.trigger(keyup);
+      this.clock.tick(1000);
+
+      var $results = $('li.select2-result-selectable');
+      expect($results.size()).to.equal(4);
+      expect($results.first().hasClass('select2-highlighted')).to.be.equal(true);
+      expect($results.first().text()).to.be.equal('Evil logo');
+    });
+
+    it('do not html-escape input', function() {
+      $('<input type="hidden" class="pat-select2"' +
+        '    data-pat-select2="placeholder:Search for a Value;' +
+        '                     vocabularyUrl: /select2-ajax.json;' +
+        '                     width:20em" />'
+      ).appendTo('body');
+      var pattern = $('.pat-select2').patternSelect2();
+
+      var $input = $('.select2-input');
+      $input.click().val('this < that & those');
+      var keyup = $.Event('keyup-change');
+      $input.trigger(keyup);
+      this.clock.tick(1000);
+
+      var $results = $('li.select2-result-selectable');
+      expect($results.size()).to.equal(4);
+      expect($results.first().hasClass('select2-highlighted')).to.be.equal(true);
+      expect($results.first().text()).to.be.equal('this < that & those');
+    });
+
     it('sets up orderable tags', function() {
       var $el = $(
         '<div>' +
diff --git a/mockup/tests/utils-test.js b/mockup/tests/utils-test.js
index 5704398..f99e0e7 100644
--- a/mockup/tests/utils-test.js
+++ b/mockup/tests/utils-test.js
@@ -176,7 +176,7 @@ define([
         expect(loading.$el.is(':visible')).to.equal(true);
       });
       it('hide loader', function() {
-        var loading = new utils.Loading(); 
+        var loading = new utils.Loading();
         loading.show();
         loading.hide();
         expect(loading.$el.is(':visible')).to.equal(false);
@@ -211,6 +211,19 @@ define([
 
     });
 
+    describe('HTML manupulation', function() {
+
+      it('escaping', function() {
+        var escaped = utils.escapeHTML('<img src="logo.png" />');
+        expect(escaped).to.equal('&lt;img src="logo.png" /&gt;');
+      });
+
+      it('removing', function() {
+        var clean = utils.removeHTML('<p>Paragraph</p>');
+        expect(clean).to.equal('Paragraph');
+      });
+
+    });
 
   });
 


