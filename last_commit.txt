Repository: plone.mocktestcase


Branch: refs/heads/master
Date: 2016-10-04T23:41:34+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.mocktestcase/commit/7830e4db38e43e3f52993b8ec003d4dadeb7b74b

first whitespace cleanup

Files changed:
M plone/mocktestcase/__init__.py
M plone/mocktestcase/dummy.py
M plone/mocktestcase/testcase.py

diff --git a/plone/mocktestcase/__init__.py b/plone/mocktestcase/__init__.py
index 39b4faf..6ef0da4 100644
--- a/plone/mocktestcase/__init__.py
+++ b/plone/mocktestcase/__init__.py
@@ -1 +1 @@
-from plone.mocktestcase.testcase import MockTestCase
\ No newline at end of file
+from plone.mocktestcase.testcase import MockTestCase
diff --git a/plone/mocktestcase/dummy.py b/plone/mocktestcase/dummy.py
index 12f415c..ced5861 100644
--- a/plone/mocktestcase/dummy.py
+++ b/plone/mocktestcase/dummy.py
@@ -2,6 +2,6 @@
 class Dummy(object):
     """Dummy object with arbitrary attributes
     """
-    
+
     def __init__(self, **kw):
-        self.__dict__.update(kw)
\ No newline at end of file
+        self.__dict__.update(kw)
diff --git a/plone/mocktestcase/testcase.py b/plone/mocktestcase/testcase.py
index e6d1278..51199b5 100644
--- a/plone/mocktestcase/testcase.py
+++ b/plone/mocktestcase/testcase.py
@@ -9,68 +9,68 @@ class MockTestCase(mocker.MockerTestCase):
     """Base class for mocker-based mock tests. There are convenience methods
     to make mock testing easier.
     """
-    
+
     _getToolByName_mock = None
-    
+
     # Ensure that we tear down the CA after each test method
 
     def tearDown(self):
         super(MockTestCase, self).tearDown()
         zope.component.testing.tearDown(self)
         self._getToolByName_mock = None
-    
+
     # For the lazy
-    
+
     def replay(self):
         self.mocker.replay()
-    
+
     # Helper to create a dummy object with a particular __dict__
-    
+
     def create_dummy(self, **kw):
         return dummy.Dummy(**kw)
-    
+
     # Help register mock components. The tear-down method will
     # wipe the registry each time.
-    
+
     def mock_utility(self, mock, provides, name=u""):
-        """Register the mock as a utility providing the given interface 
+        """Register the mock as a utility providing the given interface
         """
         zope.component.provideUtility(provides=provides, component=mock, name=name)
-    
+
     def mock_adapter(self, mock, provides, adapts, name=u""):
-        """Register the mock as an adapter providing the given interface 
+        """Register the mock as an adapter providing the given interface
         and adapting the given interface(s)
         """
         zope.component.provideAdapter(factory=mock, adapts=adapts, provides=provides, name=name)
-    
+
     def mock_subscription_adapter(self, mock, provides, adapts):
-        """Register the mock as a utility providing the given interface 
+        """Register the mock as a utility providing the given interface
         """
         zope.component.provideSubscriptionAdapter(factory=mock, provides=provides, adapts=adapts)
-    
+
     def mock_handler(self, mock, adapts):
-        """Register the mock as a utility providing the given interface 
+        """Register the mock as a utility providing the given interface
         """
         zope.component.provideHandler(factory=mock, adapts=adapts)
-    
+
     def mock_tool(self, mock, name):
         """Register a mock tool that will be returned when getToolByName()
         is called.
         """
-        
+
         if self._getToolByName_mock is None:
             self._getToolByName_mock = self.mocker.replace('Products.CMFCore.utils.getToolByName')
         self.expect(self._getToolByName_mock(mocker.ANY, name)).result(mock)
-    
+
     # Matcher functions
-    
+
     def match_provides(self, interface):
         """A function parameter matches that checks whether the given
         interface is provided by the function argument, e.g.
 
             some_mock = self.mocker.mock()
             some_mock.foo(self.match_provides(IFoo))
-        
+
         This will ensure that foo() is called on some_mock with an object
         that provides IFoo.
         """
@@ -82,8 +82,8 @@ def match_type(self, type):
 
             some_mock = self.mocker.mock()
             some_mock.foo(self.match_isinstance(basestring))
-        
+
         This will ensure that foo() is called on some_mock with an object
         that is a string
         """
-        return mocker.MATCH(lambda x: isinstance(x, type))
\ No newline at end of file
+        return mocker.MATCH(lambda x: isinstance(x, type))


Repository: plone.mocktestcase


Branch: refs/heads/master
Date: 2016-10-04T23:41:59+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.mocktestcase/commit/20e616b1d73d63963cccd319fab50481b1942483

utf8headers

Files changed:
M plone/__init__.py
M plone/mocktestcase/__init__.py
M plone/mocktestcase/dummy.py
M plone/mocktestcase/testcase.py
M setup.py

diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..85880ef 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
 try:
     __import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/mocktestcase/__init__.py b/plone/mocktestcase/__init__.py
index 6ef0da4..c76fe6b 100644
--- a/plone/mocktestcase/__init__.py
+++ b/plone/mocktestcase/__init__.py
@@ -1 +1,2 @@
+# -*- coding: utf-8 -*-
 from plone.mocktestcase.testcase import MockTestCase
diff --git a/plone/mocktestcase/dummy.py b/plone/mocktestcase/dummy.py
index ced5861..c3cef3d 100644
--- a/plone/mocktestcase/dummy.py
+++ b/plone/mocktestcase/dummy.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 
 class Dummy(object):
     """Dummy object with arbitrary attributes
diff --git a/plone/mocktestcase/testcase.py b/plone/mocktestcase/testcase.py
index 51199b5..81382ff 100644
--- a/plone/mocktestcase/testcase.py
+++ b/plone/mocktestcase/testcase.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 import mocker
 
 import zope.component
diff --git a/setup.py b/setup.py
index f187426..4395c19 100644
--- a/setup.py
+++ b/setup.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from setuptools import setup, find_packages
 import os
 


Repository: plone.mocktestcase


Branch: refs/heads/master
Date: 2016-10-04T23:43:40+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.mocktestcase/commit/74483a424990ec28485adfefacaf0b1aadc3f61b

isort

Files changed:
M plone/mocktestcase/dummy.py
M plone/mocktestcase/testcase.py
M setup.cfg
M setup.py

diff --git a/plone/mocktestcase/dummy.py b/plone/mocktestcase/dummy.py
index c3cef3d..4298c2e 100644
--- a/plone/mocktestcase/dummy.py
+++ b/plone/mocktestcase/dummy.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 
+
 class Dummy(object):
     """Dummy object with arbitrary attributes
     """
diff --git a/plone/mocktestcase/testcase.py b/plone/mocktestcase/testcase.py
index 81382ff..7a7aeca 100644
--- a/plone/mocktestcase/testcase.py
+++ b/plone/mocktestcase/testcase.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
-import mocker
+from plone.mocktestcase import dummy
 
+import mocker
 import zope.component
 import zope.component.testing
 
-from plone.mocktestcase import dummy
 
 class MockTestCase(mocker.MockerTestCase):
     """Base class for mocker-based mock tests. There are convenience methods
@@ -36,18 +36,21 @@ def create_dummy(self, **kw):
     def mock_utility(self, mock, provides, name=u""):
         """Register the mock as a utility providing the given interface
         """
-        zope.component.provideUtility(provides=provides, component=mock, name=name)
+        zope.component.provideUtility(
+            provides=provides, component=mock, name=name)
 
     def mock_adapter(self, mock, provides, adapts, name=u""):
         """Register the mock as an adapter providing the given interface
         and adapting the given interface(s)
         """
-        zope.component.provideAdapter(factory=mock, adapts=adapts, provides=provides, name=name)
+        zope.component.provideAdapter(
+            factory=mock, adapts=adapts, provides=provides, name=name)
 
     def mock_subscription_adapter(self, mock, provides, adapts):
         """Register the mock as a utility providing the given interface
         """
-        zope.component.provideSubscriptionAdapter(factory=mock, provides=provides, adapts=adapts)
+        zope.component.provideSubscriptionAdapter(
+            factory=mock, provides=provides, adapts=adapts)
 
     def mock_handler(self, mock, adapts):
         """Register the mock as a utility providing the given interface
@@ -60,7 +63,8 @@ def mock_tool(self, mock, name):
         """
 
         if self._getToolByName_mock is None:
-            self._getToolByName_mock = self.mocker.replace('Products.CMFCore.utils.getToolByName')
+            self._getToolByName_mock = self.mocker.replace(
+                'Products.CMFCore.utils.getToolByName')
         self.expect(self._getToolByName_mock(mocker.ANY, name)).result(mock)
 
     # Matcher functions
diff --git a/setup.cfg b/setup.cfg
index 01bb954..d4f9944 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -1,3 +1,12 @@
-[egg_info]
-tag_build = dev
-tag_svn_revision = true
+[check-manifest]
+ignore =
+    *.cfg
+    bootstrap.sh
+    bootstrap.py
+
+[isort]
+force_alphabetical_sort=True
+force_single_line=True
+lines_after_imports=2
+line_length=200
+not_skip=__init__.py
diff --git a/setup.py b/setup.py
index 4395c19..67bc746 100644
--- a/setup.py
+++ b/setup.py
@@ -8,13 +8,14 @@
       version=version,
       description="Mock unit test case based on ``mocker``",
       long_description=open("README.txt").read() + "\n" +
-                       open(os.path.join("docs", "HISTORY.txt")).read(),
-      # Get more strings from http://www.python.org/pypi?%3Aaction=list_classifiers
+      open(os.path.join("docs", "HISTORY.txt")).read(),
+      # Get more strings from
+      # http://www.python.org/pypi?%3Aaction=list_classifiers
       classifiers=[
-        "Framework :: Plone",
-        "Programming Language :: Python",
-        "Topic :: Software Development :: Libraries :: Python Modules",
-        ],
+          "Framework :: Plone",
+          "Programming Language :: Python",
+          "Topic :: Software Development :: Libraries :: Python Modules",
+      ],
       keywords='',
       author='Martin Aspeli',
       author_email='optilude@gmail.com',


Repository: plone.mocktestcase


Branch: refs/heads/master
Date: 2016-10-04T23:44:44+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.mocktestcase/commit/75001098ecf1166251e8ec21271784ac502ea1b4

gitignore added

Files changed:
A .gitignore

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..be792e4
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,28 @@
+/develop-eggs
+/eggs
+/fake-eggs
+/bin
+/parts
+/downloads
+/var
+/build
+/dist
+/local
+/local.cfg
+.coverage
+/*.egg-info
+/.installed.cfg
+*.pyc
+/.Python
+/include
+/lib
+/.project
+/.pydevproject
+/.mr.developer.cfg
+/src/plone*
+/src/collective*
+*.mo
+docs/Makefile
+docs/make.bat
+docs/doctrees
+docs/html


