Repository: plone.app.vocabularies


Branch: refs/heads/master
Date: 2023-03-17T22:20:01+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.vocabularies/commit/3e61969fd9086c1549005694fd4c3ae6ff67c5ec

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/b2d5d4a5.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..d4a62f1\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "b2d5d4a5"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..582f8ac\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.2\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/b2d5d4a5.internal b/news/b2d5d4a5.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/b2d5d4a5.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9eb73f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex aabcd01..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,8 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n \n-[isort]\n-profile = black\n-force_alphabetical_sort=True\n-force_single_line=True\n-lines_after_imports=2\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..3448e70\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,50 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s plone.app.vocabularies\n+extras =\n+    test\n'

Repository: plone.app.vocabularies


Branch: refs/heads/master
Date: 2023-03-17T22:21:01+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.vocabularies/commit/90ce014ef6c247e6c5dc0a0bd99a0ddf01651764

chore: isort

Files changed:
M plone/app/vocabularies/images.py

b'diff --git a/plone/app/vocabularies/images.py b/plone/app/vocabularies/images.py\nindex 0bc9c7d..4feea9a 100644\n--- a/plone/app/vocabularies/images.py\n+++ b/plone/app/vocabularies/images.py\n@@ -6,6 +6,7 @@\n from zope.schema.vocabulary import SimpleTerm\n from zope.schema.vocabulary import SimpleVocabulary\n \n+\n PMF = MessageFactory("plone")\n \n \n'

Repository: plone.app.vocabularies


Branch: refs/heads/master
Date: 2023-03-17T22:21:17+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.vocabularies/commit/7c3a931a1f3acf597d987591592d7d6e72cd3d8d

chore: black

Files changed:
M plone/app/vocabularies/tests/base.py
M plone/app/vocabularies/tests/test_editors.py
M plone/app/vocabularies/tests/test_subjects_under_context.py
M plone/app/vocabularies/workflow.py

b'diff --git a/plone/app/vocabularies/tests/base.py b/plone/app/vocabularies/tests/base.py\nindex 8bef5ca..d1b5eaa 100644\n--- a/plone/app/vocabularies/tests/base.py\n+++ b/plone/app/vocabularies/tests/base.py\n@@ -29,7 +29,6 @@ def absolute_url(self, relative=False):\n \n \n class DummyUrlTool:\n-\n     name = "portal_url"\n \n     def __init__(self, context):\n@@ -70,7 +69,6 @@ def getHeader(self, value):\n \n \n class Request(dict):\n-\n     debug = False\n     response = Response()\n \n@@ -79,7 +77,6 @@ def __init__(self, form=None):\n \n \n class Brain:\n-\n     Title = "BrainTitle"\n     is_folderish = True\n \ndiff --git a/plone/app/vocabularies/tests/test_editors.py b/plone/app/vocabularies/tests/test_editors.py\nindex e011dc4..046f39c 100644\n--- a/plone/app/vocabularies/tests/test_editors.py\n+++ b/plone/app/vocabularies/tests/test_editors.py\n@@ -6,7 +6,6 @@\n \n \n class AvailableEditorsTest(unittest.TestCase):\n-\n     layer = PAVocabularies_INTEGRATION_TESTING\n \n     def setUp(self):\ndiff --git a/plone/app/vocabularies/tests/test_subjects_under_context.py b/plone/app/vocabularies/tests/test_subjects_under_context.py\nindex 81f2227..daa0571 100644\n--- a/plone/app/vocabularies/tests/test_subjects_under_context.py\n+++ b/plone/app/vocabularies/tests/test_subjects_under_context.py\n@@ -7,7 +7,6 @@\n \n \n class TestKeywordsUnderContext(unittest.TestCase):\n-\n     layer = PAVocabularies_INTEGRATION_TESTING\n \n     def setUp(self):\ndiff --git a/plone/app/vocabularies/workflow.py b/plone/app/vocabularies/workflow.py\nindex b05bfe7..e63a180 100644\n--- a/plone/app/vocabularies/workflow.py\n+++ b/plone/app/vocabularies/workflow.py\n@@ -205,9 +205,7 @@ def __call__(self, context):\n             transition_folder = getattr(wf, "transitions", None)\n             wf_name = wf.title or wf.id\n             if transition_folder is not None:\n-\n                 for transition in transition_folder.values():\n-\n                     # zope.i18nmessageid will choke\n                     # if undecoded UTF-8 bytestrings slip through\n                     # which we may encounter on international sites\n'

Repository: plone.app.vocabularies


Branch: refs/heads/master
Date: 2023-03-17T22:21:44+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.vocabularies/commit/7a109cbafc49949fd341b7e13c93278f7f3919c3

chore: zpretty

Files changed:
M plone/app/vocabularies/configure.zcml
M plone/app/vocabularies/searchabletextsource.pt

b'diff --git a/plone/app/vocabularies/configure.zcml b/plone/app/vocabularies/configure.zcml\nindex db77f4d..cad71f7 100644\n--- a/plone/app/vocabularies/configure.zcml\n+++ b/plone/app/vocabularies/configure.zcml\n@@ -1,214 +1,216 @@\n <configure\n-  xmlns="http://namespaces.zope.org/zope"\n-  xmlns:zcml="http://namespaces.zope.org/zcml">\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    >\n \n   <utility\n-    component=".language.AvailableContentLanguageVocabularyFactory"\n-    name="plone.app.vocabularies.AvailableContentLanguages"\n-    />\n+      name="plone.app.vocabularies.AvailableContentLanguages"\n+      component=".language.AvailableContentLanguageVocabularyFactory"\n+      />\n \n   <utility\n-    component=".language.SupportedContentLanguageVocabularyFactory"\n-    name="plone.app.vocabularies.SupportedContentLanguages"\n-    />\n+      name="plone.app.vocabularies.SupportedContentLanguages"\n+      component=".language.SupportedContentLanguageVocabularyFactory"\n+      />\n \n   <utility\n-    component=".security.RolesVocabularyFactory"\n-    name="plone.app.vocabularies.Roles"\n-    />\n+      name="plone.app.vocabularies.Roles"\n+      component=".security.RolesVocabularyFactory"\n+      />\n \n   <utility\n-    component=".security.PermissionsVocabularyFactory"\n-    name="plone.app.vocabularies.Permissions"\n-    />\n+      name="plone.app.vocabularies.Permissions"\n+      component=".security.PermissionsVocabularyFactory"\n+      />\n \n   <utility\n-    component=".types.AllowedContentTypesVocabularyFactory"\n-    name="plone.app.vocabularies.AllowedContentTypes"\n-    />\n+      name="plone.app.vocabularies.AllowedContentTypes"\n+      component=".types.AllowedContentTypesVocabularyFactory"\n+      />\n \n   <utility\n-    component=".types.AllowableContentTypesVocabularyFactory"\n-    name="plone.app.vocabularies.AllowableContentTypes"\n-    />\n+      name="plone.app.vocabularies.AllowableContentTypes"\n+      component=".types.AllowableContentTypesVocabularyFactory"\n+      />\n \n   <utility\n-    component=".types.PortalTypesVocabularyFactory"\n-    name="plone.app.vocabularies.PortalTypes"\n-    />\n+      name="plone.app.vocabularies.PortalTypes"\n+      component=".types.PortalTypesVocabularyFactory"\n+      />\n \n   <utility\n-    component=".types.ReallyUserFriendlyTypesVocabularyFactory"\n-    name="plone.app.vocabularies.ReallyUserFriendlyTypes"\n-    />\n+      name="plone.app.vocabularies.ReallyUserFriendlyTypes"\n+      component=".types.ReallyUserFriendlyTypesVocabularyFactory"\n+      />\n \n   <utility\n-    component=".types.UserFriendlyTypesVocabularyFactory"\n-    name="plone.app.vocabularies.UserFriendlyTypes"\n-    />\n+      name="plone.app.vocabularies.UserFriendlyTypes"\n+      component=".types.UserFriendlyTypesVocabularyFactory"\n+      />\n \n   <utility\n-    component=".skins.SkinsVocabularyFactory"\n-    name="plone.app.vocabularies.Skins"\n-    />\n+      name="plone.app.vocabularies.Skins"\n+      component=".skins.SkinsVocabularyFactory"\n+      />\n \n   <utility\n-    component=".workflow.WorkflowsVocabularyFactory"\n-    name="plone.app.vocabularies.Workflows"\n-    />\n+      name="plone.app.vocabularies.Workflows"\n+      component=".workflow.WorkflowsVocabularyFactory"\n+      />\n \n   <utility\n-    component=".workflow.WorkflowStatesVocabularyFactory"\n-    name="plone.app.vocabularies.WorkflowStates"\n-    />\n+      name="plone.app.vocabularies.WorkflowStates"\n+      component=".workflow.WorkflowStatesVocabularyFactory"\n+      />\n \n   <utility\n-    component=".workflow.WorkflowTransitionsVocabularyFactory"\n-    name="plone.app.vocabularies.WorkflowTransitions"\n-    />\n+      name="plone.app.vocabularies.WorkflowTransitions"\n+      component=".workflow.WorkflowTransitionsVocabularyFactory"\n+      />\n \n   <utility\n-    component=".editors.AvailableEditorsVocabularyFactory"\n-    name="plone.app.vocabularies.AvailableEditors"\n-    />\n+      name="plone.app.vocabularies.AvailableEditors"\n+      component=".editors.AvailableEditorsVocabularyFactory"\n+      />\n \n   <utility\n-    component=".catalog.KeywordsVocabularyFactory"\n-    name="plone.app.vocabularies.Keywords"\n-    />\n+      name="plone.app.vocabularies.Keywords"\n+      component=".catalog.KeywordsVocabularyFactory"\n+      />\n \n   <utility\n-    component=".syndication.SyndicationFeedTypesVocabularyFactory"\n-    name="plone.app.vocabularies.SyndicationFeedTypes"\n-    />\n+      name="plone.app.vocabularies.SyndicationFeedTypes"\n+      component=".syndication.SyndicationFeedTypesVocabularyFactory"\n+      />\n \n   <utility\n-    component=".syndication.SyndicatableFeedItemsFactory"\n-    name="plone.app.vocabularies.SyndicatableFeedItems"\n-    />\n+      name="plone.app.vocabularies.SyndicatableFeedItems"\n+      component=".syndication.SyndicatableFeedItemsFactory"\n+      />\n \n   <utility\n-    factory=".principals.UsersFactory"\n-    name="plone.app.vocabularies.Users"\n-    />\n+      factory=".principals.UsersFactory"\n+      name="plone.app.vocabularies.Users"\n+      />\n   <utility\n-    factory=".principals.GroupsFactory"\n-    name="plone.app.vocabularies.Groups"\n-    />\n+      factory=".principals.GroupsFactory"\n+      name="plone.app.vocabularies.Groups"\n+      />\n   <utility\n-    factory=".principals.PrincipalsFactory"\n-    name="plone.app.vocabularies.Principals"\n-    />\n+      factory=".principals.PrincipalsFactory"\n+      name="plone.app.vocabularies.Principals"\n+      />\n \n   <utility\n-    factory=".catalog.CatalogVocabularyFactory"\n-    name="plone.app.vocabularies.Catalog"\n-    />\n+      factory=".catalog.CatalogVocabularyFactory"\n+      name="plone.app.vocabularies.Catalog"\n+      />\n \n   <utility\n-    component=".actions.ActionCategoriesVocabularyFactory"\n-    name="plone.app.vocabularies.Actions"\n-    />\n+      name="plone.app.vocabularies.Actions"\n+      component=".actions.ActionCategoriesVocabularyFactory"\n+      />\n \n   <utility\n-    component=".actions.PortalActionCategoriesVocabularyFactory"\n-    name="plone.app.vocabularies.PortalActionCategories"\n-    />\n+      name="plone.app.vocabularies.PortalActionCategories"\n+      component=".actions.PortalActionCategoriesVocabularyFactory"\n+      />\n \n   <utility\n-    component=".datetimerelated.TimezonesFactory"\n-    name="plone.app.vocabularies.Timezones"\n-    />\n+      name="plone.app.vocabularies.Timezones"\n+      component=".datetimerelated.TimezonesFactory"\n+      />\n \n   <utility\n-    component=".datetimerelated.CommonTimezonesFactory"\n-    name="plone.app.vocabularies.CommonTimezones"\n-    />\n+      name="plone.app.vocabularies.CommonTimezones"\n+      component=".datetimerelated.CommonTimezonesFactory"\n+      />\n \n   <utility\n-    zcml:condition="installed plone.app.event"\n-    component=".datetimerelated.AvailableTimezonesFactory"\n-    name="plone.app.vocabularies.AvailableTimezones"\n-    />\n+      name="plone.app.vocabularies.AvailableTimezones"\n+      component=".datetimerelated.AvailableTimezonesFactory"\n+      zcml:condition="installed plone.app.event"\n+      />\n \n   <utility\n-    component=".datetimerelated.WeekdaysFactory"\n-    name="plone.app.vocabularies.Weekdays"\n-    />\n+      name="plone.app.vocabularies.Weekdays"\n+      component=".datetimerelated.WeekdaysFactory"\n+      />\n \n   <utility\n-    component=".datetimerelated.WeekdaysAbbrFactory"\n-    name="plone.app.vocabularies.WeekdaysAbbr"\n-    />\n+      name="plone.app.vocabularies.WeekdaysAbbr"\n+      component=".datetimerelated.WeekdaysAbbrFactory"\n+      />\n \n   <utility\n-    component=".datetimerelated.WeekdaysShortFactory"\n-    name="plone.app.vocabularies.WeekdaysShort"\n-    />\n+      name="plone.app.vocabularies.WeekdaysShort"\n+      component=".datetimerelated.WeekdaysShortFactory"\n+      />\n \n   <utility\n-    component=".datetimerelated.MonthFactory"\n-    name="plone.app.vocabularies.Month"\n-    />\n+      name="plone.app.vocabularies.Month"\n+      component=".datetimerelated.MonthFactory"\n+      />\n \n   <utility\n-    component=".datetimerelated.MonthAbbrFactory"\n-    name="plone.app.vocabularies.MonthAbbr"\n-    />\n+      name="plone.app.vocabularies.MonthAbbr"\n+      component=".datetimerelated.MonthAbbrFactory"\n+      />\n \n   <utility\n-    component=".images.ScalesVocabulary"\n-    name="plone.app.vocabularies.ImagesScales"\n-    />\n+      name="plone.app.vocabularies.ImagesScales"\n+      component=".images.ScalesVocabulary"\n+      />\n \n   <utility\n+      name="plone.app.vocabularies.MetadataFields"\n       component=".metadatafields.MetaDataFieldsVocabularyFactory"\n-      name="plone.app.vocabularies.MetadataFields" />\n+      />\n \n   <!-- All source implementations will be deprecated -->\n   <adapter\n-      for=".catalog.SearchableTextSource\n-           zope.publisher.interfaces.browser.IBrowserRequest"\n       factory=".catalog.QuerySearchableTextSourceView"\n       provides="zope.browser.interfaces.ITerms"\n+      for=".catalog.SearchableTextSource\n+           zope.publisher.interfaces.browser.IBrowserRequest"\n       />\n \n   <adapter\n-      zcml:condition="installed zope.formlib"\n-      for=".catalog.SearchableTextSource\n-           zope.publisher.interfaces.browser.IBrowserRequest"\n       factory=".catalog.QuerySearchableTextSourceView"\n       provides="zope.formlib.interfaces.ISourceQueryView"\n+      for=".catalog.SearchableTextSource\n+           zope.publisher.interfaces.browser.IBrowserRequest"\n+      zcml:condition="installed zope.formlib"\n       />\n \n   <adapter\n-      for=".users.UsersSource\n-           zope.publisher.interfaces.browser.IBrowserRequest"\n       factory=".users.UsersSourceQueryView"\n       provides="zope.browser.interfaces.ITerms"\n+      for=".users.UsersSource\n+           zope.publisher.interfaces.browser.IBrowserRequest"\n       />\n \n   <adapter\n-      zcml:condition="installed zope.formlib"\n-      for=".users.UsersSource\n-           zope.publisher.interfaces.browser.IBrowserRequest"\n       factory=".users.UsersSourceQueryView"\n       provides="zope.formlib.interfaces.ISourceQueryView"\n+      for=".users.UsersSource\n+           zope.publisher.interfaces.browser.IBrowserRequest"\n+      zcml:condition="installed zope.formlib"\n       />\n \n   <adapter\n-      for=".groups.GroupsSource\n-           zope.publisher.interfaces.browser.IBrowserRequest"\n       factory=".groups.GroupsSourceQueryView"\n       provides="zope.browser.interfaces.ITerms"\n+      for=".groups.GroupsSource\n+           zope.publisher.interfaces.browser.IBrowserRequest"\n       />\n \n   <adapter\n-      zcml:condition="installed zope.formlib"\n-      for=".groups.GroupsSource\n-           zope.publisher.interfaces.browser.IBrowserRequest"\n       factory=".groups.GroupsSourceQueryView"\n       provides="zope.formlib.interfaces.ISourceQueryView"\n+      for=".groups.GroupsSource\n+           zope.publisher.interfaces.browser.IBrowserRequest"\n+      zcml:condition="installed zope.formlib"\n       />\n \n </configure>\ndiff --git a/plone/app/vocabularies/searchabletextsource.pt b/plone/app/vocabularies/searchabletextsource.pt\nindex 15a2564..0bbecf3 100644\n--- a/plone/app/vocabularies/searchabletextsource.pt\n+++ b/plone/app/vocabularies/searchabletextsource.pt\n@@ -1,15 +1,25 @@\n <div class="row"\n-     i18n:domain="plone">\n+     i18n:domain="plone"\n+>\n   <div class="field"\n-       tal:define="name python:options.get(\'name\')">\n-    <input type="text"\n-           name="name.query"\n+       tal:define="\n+         name python:options.get(\'name\');\n+       "\n+  >\n+    <input name="name.query"\n+           type="text"\n            value=""\n-           tal:attributes="name string:${name}.query" />\n-    <input type="submit"\n-           name="name.search"\n+           tal:attributes="\n+             name string:${name}.query;\n+           "\n+    />\n+    <input name="name.search"\n+           type="submit"\n            value="Search"\n+           tal:attributes="\n+             name string:${name}.search;\n+           "\n            i18n:attributes="value label_search"\n-           tal:attributes="name string:${name}.search" />\n+    />\n   </div>\n </div>\n'

Repository: plone.app.vocabularies


Branch: refs/heads/master
Date: 2023-03-17T22:25:26+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.vocabularies/commit/c7f223786853c78071ae42a96fc086d6644e8a6c

feat: configure codespell

Files changed:
M pyproject.toml

b'diff --git a/pyproject.toml b/pyproject.toml\nindex 9eb73f3..5e4e850 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -60,3 +60,6 @@ Zope = [\n   \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n ]\n python-dateutil = [\'dateutil\']\n+\n+[tool.codespell]\n+ignore-words-list = "noone"\n'

Repository: plone.app.vocabularies


Branch: refs/heads/master
Date: 2023-03-17T22:25:36+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.vocabularies/commit/083dc0deddfa686801a6b672ab21771dece415f2

feat: codespell

Files changed:
M README.rst
M plone/app/vocabularies/catalog.py
M plone/app/vocabularies/principals.py

b'diff --git a/README.rst b/README.rst\nindex 07061fb..7fa74d9 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -162,7 +162,7 @@ Date/Time Related\n    same as above but with 2 character abbreviations.\n \n ``plone.app.vocabularies.Month``\n-   same as above but with month names starting with zero in january.\n+   same as above but with month names starting with zero in January.\n \n ``plone.app.vocabularies.MonthAbbr``\n    same as above but with 3 character abbreviations.\n@@ -171,7 +171,7 @@ Images\n ------\n \n ``plone.app.vocabularies.ImagesScales``\n-   All image scales which are avaiable on Plone site.\n+   All image scales which are available on Plone site.\n \n \n API/ Tools\n@@ -187,7 +187,7 @@ API/ Tools\n \n ``plone.app.vocabularies.terms.safe_simpleterm_from_value`` (function)\n     Create a ``SimpleTerm`` from a *dirty* or *untrusted* value.\n-    Token is encoded carefully and Title converted to unicode.\n+    Token is encoded carefully and Title converted to Unicode.\n \n ``plone.app.vocabularies.terms.safe_simplevocabulary_from_values`` (function)\n     Create a ``SimpleVocabulary`` from a iterable (list) of *dirty* or *untrusted* values.\ndiff --git a/plone/app/vocabularies/catalog.py b/plone/app/vocabularies/catalog.py\nindex ed19dec..0384b35 100644\n--- a/plone/app/vocabularies/catalog.py\n+++ b/plone/app/vocabularies/catalog.py\n@@ -57,7 +57,7 @@ def parse_query(query, path_prefix=""):\n     {\'SearchableText\': \'foo* AND bar*\'}\n \n     We also filter out some special characters. They are handled like\n-    spaces and seperate words from each other.\n+    spaces and separate words from each other.\n \n     >>> parse_query(\'foo +bar some-thing\')\n     {\'SearchableText\': \'foo* AND bar* AND some* AND thing*\'}\ndiff --git a/plone/app/vocabularies/principals.py b/plone/app/vocabularies/principals.py\nindex 8aee569..7458dd7 100644\n--- a/plone/app/vocabularies/principals.py\n+++ b/plone/app/vocabularies/principals.py\n@@ -205,10 +205,10 @@ def use_principal_triple(self, principal_triple):\n             (user:johndoe, user__johndoe, \'John Doe\') or\n             (group:editors, group__editors, \'Editors\').\n \n-        returns wether the triple shall be included in the vocabulary or not\n+        returns whether the triple shall be included in the vocabulary or not\n         (bool).\n \n-        Meant to be overriden in subclasses for post-filtering result.\n+        Meant to be overridden in subclasses for post-filtering result.\n         """\n         return True\n \n'

Repository: plone.app.vocabularies


Branch: refs/heads/master
Date: 2023-03-17T22:31:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.vocabularies/commit/f07eb96057afc380d551ccddad6a446b9aba06b3

feat: flake8

Files changed:
M plone/app/vocabularies/__init__.py
M plone/app/vocabularies/catalog.py
M plone/app/vocabularies/language.py
M plone/app/vocabularies/metadatafields.py
M plone/app/vocabularies/syndication.py

b'diff --git a/plone/app/vocabularies/__init__.py b/plone/app/vocabularies/__init__.py\nindex d718a96..f153ac9 100644\n--- a/plone/app/vocabularies/__init__.py\n+++ b/plone/app/vocabularies/__init__.py\n@@ -1,17 +1,11 @@\n from plone.app.vocabularies.interfaces import IPermissiveVocabulary\n from plone.app.vocabularies.interfaces import ISlicableVocabulary\n+from urllib import parse\n from zope.interface import directlyProvides\n from zope.interface import implementer\n from zope.schema.vocabulary import SimpleTerm\n from zope.schema.vocabulary import SimpleVocabulary\n \n-import urllib\n-\n-\n-_token_parse_py3 = getattr(urllib, "parse", None)\n-_token_parse_py27 = lambda token: urllib.unquote_plus(token).decode("utf8")\n-parse = _token_parse_py3.unquote if _token_parse_py3 else _token_parse_py27\n-\n \n @implementer(ISlicableVocabulary)\n class SlicableVocabulary:\ndiff --git a/plone/app/vocabularies/catalog.py b/plone/app/vocabularies/catalog.py\nindex 0384b35..b4de71e 100644\n--- a/plone/app/vocabularies/catalog.py\n+++ b/plone/app/vocabularies/catalog.py\n@@ -119,7 +119,6 @@ def parse_query(query, path_prefix=""):\n @provider(IContextSourceBinder)\n class SearchableTextSource:\n     """\n-    >>> from plone.app.vocabularies.tests.base import Brain\n     >>> from plone.app.vocabularies.tests.base import DummyCatalog\n     >>> from plone.app.vocabularies.tests.base import create_context\n     >>> from plone.app.vocabularies.tests.base import DummyTool\n@@ -229,7 +228,6 @@ class SearchableTextSourceBinder:\n       >>> binder.query == query\n       True\n \n-      >>> from plone.app.vocabularies.tests.base import Brain\n       >>> from plone.app.vocabularies.tests.base import create_context\n       >>> from plone.app.vocabularies.tests.base import DummyTool\n \n@@ -729,7 +727,6 @@ def my_vocab_factory(context):\n \n     Here are some doctests::\n \n-      >>> from plone.app.vocabularies.tests.base import Brain\n       >>> from plone.app.vocabularies.tests.base import DummyCatalog\n       >>> from plone.app.vocabularies.tests.base import create_context\n       >>> from plone.app.vocabularies.tests.base import DummyTool\ndiff --git a/plone/app/vocabularies/language.py b/plone/app/vocabularies/language.py\nindex c5c387d..2bb2235 100644\n--- a/plone/app/vocabularies/language.py\n+++ b/plone/app/vocabularies/language.py\n@@ -47,7 +47,7 @@ def __call__(self, context):\n         ltool = getToolByName(site, "portal_languages", None)\n         if ltool is not None:\n             languages = ltool.getAvailableLanguages()\n-            items = [(l, languages[l].get("native", l)) for l in languages]\n+            items = [(lang, languages[lang].get("native", lang)) for lang in languages]\n             items.sort(key=itemgetter(1))\n             items = [SimpleTerm(i[0], i[0], i[1]) for i in items]\n         return SimpleVocabulary(items)\n@@ -100,7 +100,9 @@ def __call__(self, context):\n         if ltool is not None:\n             items = ltool.listSupportedLanguages()\n             all_langs = ltool.getAvailableLanguages()\n-            items = [(l[0], all_langs[l[0]].get("native", l[1])) for l in items]\n+            items = [\n+                (lang[0], all_langs[lang[0]].get("native", lang[1])) for lang in items\n+            ]\n             items.sort(key=itemgetter(1))\n             items = [\n                 SimpleTerm(i[0], i[0], all_langs.get(i[0], {}).get("native", i[1]))\ndiff --git a/plone/app/vocabularies/metadatafields.py b/plone/app/vocabularies/metadatafields.py\nindex fc29cdf..2ef09d3 100644\n--- a/plone/app/vocabularies/metadatafields.py\n+++ b/plone/app/vocabularies/metadatafields.py\n@@ -35,7 +35,6 @@ class MetaDataFieldsVocabulary:\n \n     >>> from zope.component import queryUtility\n     >>> from plone.app.vocabularies.tests.base import DummyCatalog\n-    >>> from plone.app.vocabularies.tests.base import DummyTool\n     >>> from plone.app.vocabularies.tests.base import create_context\n \n     >>> context = create_context()\ndiff --git a/plone/app/vocabularies/syndication.py b/plone/app/vocabularies/syndication.py\nindex 5849a6b..6e6c48f 100644\n--- a/plone/app/vocabularies/syndication.py\n+++ b/plone/app/vocabularies/syndication.py\n@@ -1,10 +1,8 @@\n-from plone.base import MessageFactory as _\n from plone.base.interfaces import ISiteSyndicationSettings\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from zope.component import getUtility\n from zope.component.hooks import getSite\n-from zope.i18nmessageid import MessageFactory\n from zope.interface import implementer\n from zope.schema.interfaces import IVocabularyFactory\n from zope.schema.vocabulary import SimpleTerm\n'

Repository: plone.app.vocabularies


Branch: refs/heads/master
Date: 2023-03-17T22:59:58+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.vocabularies/commit/a8e8a5257a519195c544603d75b713b6d3f49f1e

feat: adapt test to zptlint

Files changed:
M plone/app/vocabularies/catalog.py
M plone/app/vocabularies/groups.py
M plone/app/vocabularies/users.py

b'diff --git a/plone/app/vocabularies/catalog.py b/plone/app/vocabularies/catalog.py\nindex b4de71e..692fd90 100644\n--- a/plone/app/vocabularies/catalog.py\n+++ b/plone/app/vocabularies/catalog.py\n@@ -306,10 +306,10 @@ class QuerySearchableTextSourceView:\n     <plone.app.vocabularies.terms.BrowsableTerm object at ...>\n \n     >>> template = view.render(name=\'t\')\n-    >>> u\'<input type="text" name="t.query" value="" />\' in template\n+    >>> u\'<input name="t.query" type="text" value="" />\' in template\n     True\n \n-    >>> u\'<input type="submit" name="t.search" value="Search" />\' in template\n+    >>> u\'<input name="t.search" type="submit" value="Search" />\' in template\n     True\n \n     >>> request = Request(form={\'t.search\' : True, \'t.query\' : \'value\'})\ndiff --git a/plone/app/vocabularies/groups.py b/plone/app/vocabularies/groups.py\nindex 3c7cfdd..f4f2cef 100644\n--- a/plone/app/vocabularies/groups.py\n+++ b/plone/app/vocabularies/groups.py\n@@ -133,10 +133,10 @@ class GroupsSourceQueryView:\n \n     >>> template = view.render(name=\'t\')\n \n-    >>> u\'<input type="text" name="t.query" value="" />\' in template\n+    >>> u\'<input name="t.query" type="text" value="" />\' in template\n     True\n \n-    >>> u\'<input type="submit" name="t.search" value="Search" />\' in template\n+    >>> u\'<input name="t.search" type="submit" value="Search" />\' in template\n     True\n \n     >>> request = Request(form={\'t.search\' : True, \'t.query\' : \'value\'})\ndiff --git a/plone/app/vocabularies/users.py b/plone/app/vocabularies/users.py\nindex 5bee2b8..ae44e52 100644\n--- a/plone/app/vocabularies/users.py\n+++ b/plone/app/vocabularies/users.py\n@@ -138,10 +138,10 @@ class UsersSourceQueryView:\n \n     >>> template = view.render(name=\'t\')\n \n-    >>> u\'<input type="text" name="t.query" value="" />\' in template\n+    >>> u\'<input name="t.query" type="text" value="" />\' in template\n     True\n \n-    >>> u\'<input type="submit" name="t.search" value="Search" />\' in template\n+    >>> u\'<input name="t.search" type="submit" value="Search" />\' in template\n     True\n \n     >>> request = Request(form={\'t.search\' : True, \'t.query\' : \'value\'})\n'

Repository: plone.app.vocabularies


Branch: refs/heads/master
Date: 2023-03-17T23:00:16+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.vocabularies/commit/8a25a560ad44ff80bbf562f2063e79c86e8a6aeb

fix: adapt deprecation warning

Files changed:
M plone/app/vocabularies/catalog.py
M plone/app/vocabularies/groups.py
M plone/app/vocabularies/users.py

b'diff --git a/plone/app/vocabularies/catalog.py b/plone/app/vocabularies/catalog.py\nindex 692fd90..5d39d8a 100644\n--- a/plone/app/vocabularies/catalog.py\n+++ b/plone/app/vocabularies/catalog.py\n@@ -333,7 +333,7 @@ class QuerySearchableTextSourceView:\n     def __init__(self, context, request):\n         msg = (\n             "QuerySearchableTextSourceView is deprecated and will be "\n-            "removed on Plone 6"\n+            "removed on Plone 7"\n         )\n         warnings.warn(msg, DeprecationWarning)\n         self.context = context\ndiff --git a/plone/app/vocabularies/groups.py b/plone/app/vocabularies/groups.py\nindex f4f2cef..8561b25 100644\n--- a/plone/app/vocabularies/groups.py\n+++ b/plone/app/vocabularies/groups.py\n@@ -148,7 +148,7 @@ class GroupsSourceQueryView:\n     template = ViewPageTemplateFile("searchabletextsource.pt")\n \n     def __init__(self, context, request):\n-        msg = "GroupsSourceQueryView is deprecated and will be removed on " "Plone 6"\n+        msg = "GroupsSourceQueryView is deprecated and will be removed on Plone 7"\n         warnings.warn(msg, DeprecationWarning)\n         self.context = context\n         self.request = request\ndiff --git a/plone/app/vocabularies/users.py b/plone/app/vocabularies/users.py\nindex ae44e52..83dc2c9 100644\n--- a/plone/app/vocabularies/users.py\n+++ b/plone/app/vocabularies/users.py\n@@ -153,7 +153,7 @@ class UsersSourceQueryView:\n     template = ViewPageTemplateFile("searchabletextsource.pt")\n \n     def __init__(self, context, request):\n-        msg = "UsersSourceQueryView is deprecated and will be removed on " "Plone 6"\n+        msg = "UsersSourceQueryView is deprecated and will be removed on Plone 7"\n         warnings.warn(msg, DeprecationWarning)\n         self.context = context\n         self.request = request\n'

Repository: plone.app.vocabularies


Branch: refs/heads/master
Date: 2023-03-17T23:00:25+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.vocabularies/commit/c18f961181f76769109f143d3ad614a3b64bab8b

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 2704f86..da923c9 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -46,10 +46,8 @@\n     ],\n     extras_require=dict(\n         test=[\n-            "mock",\n             "plone.app.testing",\n             "zope.configuration",\n-            "zope.testing",\n         ]\n     ),\n )\n'

Repository: plone.app.vocabularies


Branch: refs/heads/master
Date: 2023-03-17T23:28:13+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.vocabularies/commit/8c7ac7b865d4d2c0251f15be71a0a44943ebd826

feat: configue z3c.dependencychecker

Files changed:
M pyproject.toml

b'diff --git a/pyproject.toml b/pyproject.toml\nindex 5e4e850..389918d 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -60,6 +60,8 @@ Zope = [\n   \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n ]\n python-dateutil = [\'dateutil\']\n+\'Products.ZCatalog\' = [\'Products.ZCTextIndex\', \'Products.PluginIndexes\']\n+ignore-packages = [\'zope.formlib\']\n \n [tool.codespell]\n ignore-words-list = "noone"\n'

Repository: plone.app.vocabularies


Branch: refs/heads/master
Date: 2023-03-17T23:28:22+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.vocabularies/commit/8255c993e02b3c954f0e1bfcc70e1bc7b6ce2712

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex da923c9..39676e8 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -37,16 +37,25 @@\n     zip_safe=False,\n     python_requires=">=3.8",\n     install_requires=[\n+        "BTrees",\n+        "Products.ZCatalog",\n         "plone.app.querystring",\n         "plone.base",\n+        "plone.app.layout",\n+        "plone.memoize",\n+        "plone.namedfile",\n+        "plone.registry",\n+        "plone.uuid",\n         "pytz",\n         "setuptools",\n-        "zope.deprecation",\n+        "z3c.formwidget.query",\n+        "zope.browser",\n         "zope.globalrequest",\n     ],\n     extras_require=dict(\n         test=[\n             "plone.app.testing",\n+            "Products.ExtendedPathIndex",\n             "zope.configuration",\n         ]\n     ),\n'

Repository: plone.app.vocabularies


Branch: refs/heads/master
Date: 2023-03-18T21:16:28+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.vocabularies/commit/32a38fc6fb7224d5580730708b8d57242bd62b1d

Merge pull request #73 from plone/config-with-default-template-75709b94

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/b2d5d4a5.internal
A tox.ini
M README.rst
M plone/app/vocabularies/__init__.py
M plone/app/vocabularies/catalog.py
M plone/app/vocabularies/configure.zcml
M plone/app/vocabularies/groups.py
M plone/app/vocabularies/images.py
M plone/app/vocabularies/language.py
M plone/app/vocabularies/metadatafields.py
M plone/app/vocabularies/principals.py
M plone/app/vocabularies/searchabletextsource.pt
M plone/app/vocabularies/syndication.py
M plone/app/vocabularies/tests/base.py
M plone/app/vocabularies/tests/test_editors.py
M plone/app/vocabularies/tests/test_subjects_under_context.py
M plone/app/vocabularies/users.py
M plone/app/vocabularies/workflow.py
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..d4a62f1\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "b2d5d4a5"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..582f8ac\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.2\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/README.rst b/README.rst\nindex 07061fb..7fa74d9 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -162,7 +162,7 @@ Date/Time Related\n    same as above but with 2 character abbreviations.\n \n ``plone.app.vocabularies.Month``\n-   same as above but with month names starting with zero in january.\n+   same as above but with month names starting with zero in January.\n \n ``plone.app.vocabularies.MonthAbbr``\n    same as above but with 3 character abbreviations.\n@@ -171,7 +171,7 @@ Images\n ------\n \n ``plone.app.vocabularies.ImagesScales``\n-   All image scales which are avaiable on Plone site.\n+   All image scales which are available on Plone site.\n \n \n API/ Tools\n@@ -187,7 +187,7 @@ API/ Tools\n \n ``plone.app.vocabularies.terms.safe_simpleterm_from_value`` (function)\n     Create a ``SimpleTerm`` from a *dirty* or *untrusted* value.\n-    Token is encoded carefully and Title converted to unicode.\n+    Token is encoded carefully and Title converted to Unicode.\n \n ``plone.app.vocabularies.terms.safe_simplevocabulary_from_values`` (function)\n     Create a ``SimpleVocabulary`` from a iterable (list) of *dirty* or *untrusted* values.\ndiff --git a/news/b2d5d4a5.internal b/news/b2d5d4a5.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/b2d5d4a5.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/app/vocabularies/__init__.py b/plone/app/vocabularies/__init__.py\nindex d718a96..f153ac9 100644\n--- a/plone/app/vocabularies/__init__.py\n+++ b/plone/app/vocabularies/__init__.py\n@@ -1,17 +1,11 @@\n from plone.app.vocabularies.interfaces import IPermissiveVocabulary\n from plone.app.vocabularies.interfaces import ISlicableVocabulary\n+from urllib import parse\n from zope.interface import directlyProvides\n from zope.interface import implementer\n from zope.schema.vocabulary import SimpleTerm\n from zope.schema.vocabulary import SimpleVocabulary\n \n-import urllib\n-\n-\n-_token_parse_py3 = getattr(urllib, "parse", None)\n-_token_parse_py27 = lambda token: urllib.unquote_plus(token).decode("utf8")\n-parse = _token_parse_py3.unquote if _token_parse_py3 else _token_parse_py27\n-\n \n @implementer(ISlicableVocabulary)\n class SlicableVocabulary:\ndiff --git a/plone/app/vocabularies/catalog.py b/plone/app/vocabularies/catalog.py\nindex ed19dec..5d39d8a 100644\n--- a/plone/app/vocabularies/catalog.py\n+++ b/plone/app/vocabularies/catalog.py\n@@ -57,7 +57,7 @@ def parse_query(query, path_prefix=""):\n     {\'SearchableText\': \'foo* AND bar*\'}\n \n     We also filter out some special characters. They are handled like\n-    spaces and seperate words from each other.\n+    spaces and separate words from each other.\n \n     >>> parse_query(\'foo +bar some-thing\')\n     {\'SearchableText\': \'foo* AND bar* AND some* AND thing*\'}\n@@ -119,7 +119,6 @@ def parse_query(query, path_prefix=""):\n @provider(IContextSourceBinder)\n class SearchableTextSource:\n     """\n-    >>> from plone.app.vocabularies.tests.base import Brain\n     >>> from plone.app.vocabularies.tests.base import DummyCatalog\n     >>> from plone.app.vocabularies.tests.base import create_context\n     >>> from plone.app.vocabularies.tests.base import DummyTool\n@@ -229,7 +228,6 @@ class SearchableTextSourceBinder:\n       >>> binder.query == query\n       True\n \n-      >>> from plone.app.vocabularies.tests.base import Brain\n       >>> from plone.app.vocabularies.tests.base import create_context\n       >>> from plone.app.vocabularies.tests.base import DummyTool\n \n@@ -308,10 +306,10 @@ class QuerySearchableTextSourceView:\n     <plone.app.vocabularies.terms.BrowsableTerm object at ...>\n \n     >>> template = view.render(name=\'t\')\n-    >>> u\'<input type="text" name="t.query" value="" />\' in template\n+    >>> u\'<input name="t.query" type="text" value="" />\' in template\n     True\n \n-    >>> u\'<input type="submit" name="t.search" value="Search" />\' in template\n+    >>> u\'<input name="t.search" type="submit" value="Search" />\' in template\n     True\n \n     >>> request = Request(form={\'t.search\' : True, \'t.query\' : \'value\'})\n@@ -335,7 +333,7 @@ class QuerySearchableTextSourceView:\n     def __init__(self, context, request):\n         msg = (\n             "QuerySearchableTextSourceView is deprecated and will be "\n-            "removed on Plone 6"\n+            "removed on Plone 7"\n         )\n         warnings.warn(msg, DeprecationWarning)\n         self.context = context\n@@ -729,7 +727,6 @@ def my_vocab_factory(context):\n \n     Here are some doctests::\n \n-      >>> from plone.app.vocabularies.tests.base import Brain\n       >>> from plone.app.vocabularies.tests.base import DummyCatalog\n       >>> from plone.app.vocabularies.tests.base import create_context\n       >>> from plone.app.vocabularies.tests.base import DummyTool\ndiff --git a/plone/app/vocabularies/configure.zcml b/plone/app/vocabularies/configure.zcml\nindex db77f4d..cad71f7 100644\n--- a/plone/app/vocabularies/configure.zcml\n+++ b/plone/app/vocabularies/configure.zcml\n@@ -1,214 +1,216 @@\n <configure\n-  xmlns="http://namespaces.zope.org/zope"\n-  xmlns:zcml="http://namespaces.zope.org/zcml">\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    >\n \n   <utility\n-    component=".language.AvailableContentLanguageVocabularyFactory"\n-    name="plone.app.vocabularies.AvailableContentLanguages"\n-    />\n+      name="plone.app.vocabularies.AvailableContentLanguages"\n+      component=".language.AvailableContentLanguageVocabularyFactory"\n+      />\n \n   <utility\n-    component=".language.SupportedContentLanguageVocabularyFactory"\n-    name="plone.app.vocabularies.SupportedContentLanguages"\n-    />\n+      name="plone.app.vocabularies.SupportedContentLanguages"\n+      component=".language.SupportedContentLanguageVocabularyFactory"\n+      />\n \n   <utility\n-    component=".security.RolesVocabularyFactory"\n-    name="plone.app.vocabularies.Roles"\n-    />\n+      name="plone.app.vocabularies.Roles"\n+      component=".security.RolesVocabularyFactory"\n+      />\n \n   <utility\n-    component=".security.PermissionsVocabularyFactory"\n-    name="plone.app.vocabularies.Permissions"\n-    />\n+      name="plone.app.vocabularies.Permissions"\n+      component=".security.PermissionsVocabularyFactory"\n+      />\n \n   <utility\n-    component=".types.AllowedContentTypesVocabularyFactory"\n-    name="plone.app.vocabularies.AllowedContentTypes"\n-    />\n+      name="plone.app.vocabularies.AllowedContentTypes"\n+      component=".types.AllowedContentTypesVocabularyFactory"\n+      />\n \n   <utility\n-    component=".types.AllowableContentTypesVocabularyFactory"\n-    name="plone.app.vocabularies.AllowableContentTypes"\n-    />\n+      name="plone.app.vocabularies.AllowableContentTypes"\n+      component=".types.AllowableContentTypesVocabularyFactory"\n+      />\n \n   <utility\n-    component=".types.PortalTypesVocabularyFactory"\n-    name="plone.app.vocabularies.PortalTypes"\n-    />\n+      name="plone.app.vocabularies.PortalTypes"\n+      component=".types.PortalTypesVocabularyFactory"\n+      />\n \n   <utility\n-    component=".types.ReallyUserFriendlyTypesVocabularyFactory"\n-    name="plone.app.vocabularies.ReallyUserFriendlyTypes"\n-    />\n+      name="plone.app.vocabularies.ReallyUserFriendlyTypes"\n+      component=".types.ReallyUserFriendlyTypesVocabularyFactory"\n+      />\n \n   <utility\n-    component=".types.UserFriendlyTypesVocabularyFactory"\n-    name="plone.app.vocabularies.UserFriendlyTypes"\n-    />\n+      name="plone.app.vocabularies.UserFriendlyTypes"\n+      component=".types.UserFriendlyTypesVocabularyFactory"\n+      />\n \n   <utility\n-    component=".skins.SkinsVocabularyFactory"\n-    name="plone.app.vocabularies.Skins"\n-    />\n+      name="plone.app.vocabularies.Skins"\n+      component=".skins.SkinsVocabularyFactory"\n+      />\n \n   <utility\n-    component=".workflow.WorkflowsVocabularyFactory"\n-    name="plone.app.vocabularies.Workflows"\n-    />\n+      name="plone.app.vocabularies.Workflows"\n+      component=".workflow.WorkflowsVocabularyFactory"\n+      />\n \n   <utility\n-    component=".workflow.WorkflowStatesVocabularyFactory"\n-    name="plone.app.vocabularies.WorkflowStates"\n-    />\n+      name="plone.app.vocabularies.WorkflowStates"\n+      component=".workflow.WorkflowStatesVocabularyFactory"\n+      />\n \n   <utility\n-    component=".workflow.WorkflowTransitionsVocabularyFactory"\n-    name="plone.app.vocabularies.WorkflowTransitions"\n-    />\n+      name="plone.app.vocabularies.WorkflowTransitions"\n+      component=".workflow.WorkflowTransitionsVocabularyFactory"\n+      />\n \n   <utility\n-    component=".editors.AvailableEditorsVocabularyFactory"\n-    name="plone.app.vocabularies.AvailableEditors"\n-    />\n+      name="plone.app.vocabularies.AvailableEditors"\n+      component=".editors.AvailableEditorsVocabularyFactory"\n+      />\n \n   <utility\n-    component=".catalog.KeywordsVocabularyFactory"\n-    name="plone.app.vocabularies.Keywords"\n-    />\n+      name="plone.app.vocabularies.Keywords"\n+      component=".catalog.KeywordsVocabularyFactory"\n+      />\n \n   <utility\n-    component=".syndication.SyndicationFeedTypesVocabularyFactory"\n-    name="plone.app.vocabularies.SyndicationFeedTypes"\n-    />\n+      name="plone.app.vocabularies.SyndicationFeedTypes"\n+      component=".syndication.SyndicationFeedTypesVocabularyFactory"\n+      />\n \n   <utility\n-    component=".syndication.SyndicatableFeedItemsFactory"\n-    name="plone.app.vocabularies.SyndicatableFeedItems"\n-    />\n+      name="plone.app.vocabularies.SyndicatableFeedItems"\n+      component=".syndication.SyndicatableFeedItemsFactory"\n+      />\n \n   <utility\n-    factory=".principals.UsersFactory"\n-    name="plone.app.vocabularies.Users"\n-    />\n+      factory=".principals.UsersFactory"\n+      name="plone.app.vocabularies.Users"\n+      />\n   <utility\n-    factory=".principals.GroupsFactory"\n-    name="plone.app.vocabularies.Groups"\n-    />\n+      factory=".principals.GroupsFactory"\n+      name="plone.app.vocabularies.Groups"\n+      />\n   <utility\n-    factory=".principals.PrincipalsFactory"\n-    name="plone.app.vocabularies.Principals"\n-    />\n+      factory=".principals.PrincipalsFactory"\n+      name="plone.app.vocabularies.Principals"\n+      />\n \n   <utility\n-    factory=".catalog.CatalogVocabularyFactory"\n-    name="plone.app.vocabularies.Catalog"\n-    />\n+      factory=".catalog.CatalogVocabularyFactory"\n+      name="plone.app.vocabularies.Catalog"\n+      />\n \n   <utility\n-    component=".actions.ActionCategoriesVocabularyFactory"\n-    name="plone.app.vocabularies.Actions"\n-    />\n+      name="plone.app.vocabularies.Actions"\n+      component=".actions.ActionCategoriesVocabularyFactory"\n+      />\n \n   <utility\n-    component=".actions.PortalActionCategoriesVocabularyFactory"\n-    name="plone.app.vocabularies.PortalActionCategories"\n-    />\n+      name="plone.app.vocabularies.PortalActionCategories"\n+      component=".actions.PortalActionCategoriesVocabularyFactory"\n+      />\n \n   <utility\n-    component=".datetimerelated.TimezonesFactory"\n-    name="plone.app.vocabularies.Timezones"\n-    />\n+      name="plone.app.vocabularies.Timezones"\n+      component=".datetimerelated.TimezonesFactory"\n+      />\n \n   <utility\n-    component=".datetimerelated.CommonTimezonesFactory"\n-    name="plone.app.vocabularies.CommonTimezones"\n-    />\n+      name="plone.app.vocabularies.CommonTimezones"\n+      component=".datetimerelated.CommonTimezonesFactory"\n+      />\n \n   <utility\n-    zcml:condition="installed plone.app.event"\n-    component=".datetimerelated.AvailableTimezonesFactory"\n-    name="plone.app.vocabularies.AvailableTimezones"\n-    />\n+      name="plone.app.vocabularies.AvailableTimezones"\n+      component=".datetimerelated.AvailableTimezonesFactory"\n+      zcml:condition="installed plone.app.event"\n+      />\n \n   <utility\n-    component=".datetimerelated.WeekdaysFactory"\n-    name="plone.app.vocabularies.Weekdays"\n-    />\n+      name="plone.app.vocabularies.Weekdays"\n+      component=".datetimerelated.WeekdaysFactory"\n+      />\n \n   <utility\n-    component=".datetimerelated.WeekdaysAbbrFactory"\n-    name="plone.app.vocabularies.WeekdaysAbbr"\n-    />\n+      name="plone.app.vocabularies.WeekdaysAbbr"\n+      component=".datetimerelated.WeekdaysAbbrFactory"\n+      />\n \n   <utility\n-    component=".datetimerelated.WeekdaysShortFactory"\n-    name="plone.app.vocabularies.WeekdaysShort"\n-    />\n+      name="plone.app.vocabularies.WeekdaysShort"\n+      component=".datetimerelated.WeekdaysShortFactory"\n+      />\n \n   <utility\n-    component=".datetimerelated.MonthFactory"\n-    name="plone.app.vocabularies.Month"\n-    />\n+      name="plone.app.vocabularies.Month"\n+      component=".datetimerelated.MonthFactory"\n+      />\n \n   <utility\n-    component=".datetimerelated.MonthAbbrFactory"\n-    name="plone.app.vocabularies.MonthAbbr"\n-    />\n+      name="plone.app.vocabularies.MonthAbbr"\n+      component=".datetimerelated.MonthAbbrFactory"\n+      />\n \n   <utility\n-    component=".images.ScalesVocabulary"\n-    name="plone.app.vocabularies.ImagesScales"\n-    />\n+      name="plone.app.vocabularies.ImagesScales"\n+      component=".images.ScalesVocabulary"\n+      />\n \n   <utility\n+      name="plone.app.vocabularies.MetadataFields"\n       component=".metadatafields.MetaDataFieldsVocabularyFactory"\n-      name="plone.app.vocabularies.MetadataFields" />\n+      />\n \n   <!-- All source implementations will be deprecated -->\n   <adapter\n-      for=".catalog.SearchableTextSource\n-           zope.publisher.interfaces.browser.IBrowserRequest"\n       factory=".catalog.QuerySearchableTextSourceView"\n       provides="zope.browser.interfaces.ITerms"\n+      for=".catalog.SearchableTextSource\n+           zope.publisher.interfaces.browser.IBrowserRequest"\n       />\n \n   <adapter\n-      zcml:condition="installed zope.formlib"\n-      for=".catalog.SearchableTextSource\n-           zope.publisher.interfaces.browser.IBrowserRequest"\n       factory=".catalog.QuerySearchableTextSourceView"\n       provides="zope.formlib.interfaces.ISourceQueryView"\n+      for=".catalog.SearchableTextSource\n+           zope.publisher.interfaces.browser.IBrowserRequest"\n+      zcml:condition="installed zope.formlib"\n       />\n \n   <adapter\n-      for=".users.UsersSource\n-           zope.publisher.interfaces.browser.IBrowserRequest"\n       factory=".users.UsersSourceQueryView"\n       provides="zope.browser.interfaces.ITerms"\n+      for=".users.UsersSource\n+           zope.publisher.interfaces.browser.IBrowserRequest"\n       />\n \n   <adapter\n-      zcml:condition="installed zope.formlib"\n-      for=".users.UsersSource\n-           zope.publisher.interfaces.browser.IBrowserRequest"\n       factory=".users.UsersSourceQueryView"\n       provides="zope.formlib.interfaces.ISourceQueryView"\n+      for=".users.UsersSource\n+           zope.publisher.interfaces.browser.IBrowserRequest"\n+      zcml:condition="installed zope.formlib"\n       />\n \n   <adapter\n-      for=".groups.GroupsSource\n-           zope.publisher.interfaces.browser.IBrowserRequest"\n       factory=".groups.GroupsSourceQueryView"\n       provides="zope.browser.interfaces.ITerms"\n+      for=".groups.GroupsSource\n+           zope.publisher.interfaces.browser.IBrowserRequest"\n       />\n \n   <adapter\n-      zcml:condition="installed zope.formlib"\n-      for=".groups.GroupsSource\n-           zope.publisher.interfaces.browser.IBrowserRequest"\n       factory=".groups.GroupsSourceQueryView"\n       provides="zope.formlib.interfaces.ISourceQueryView"\n+      for=".groups.GroupsSource\n+           zope.publisher.interfaces.browser.IBrowserRequest"\n+      zcml:condition="installed zope.formlib"\n       />\n \n </configure>\ndiff --git a/plone/app/vocabularies/groups.py b/plone/app/vocabularies/groups.py\nindex 3c7cfdd..8561b25 100644\n--- a/plone/app/vocabularies/groups.py\n+++ b/plone/app/vocabularies/groups.py\n@@ -133,10 +133,10 @@ class GroupsSourceQueryView:\n \n     >>> template = view.render(name=\'t\')\n \n-    >>> u\'<input type="text" name="t.query" value="" />\' in template\n+    >>> u\'<input name="t.query" type="text" value="" />\' in template\n     True\n \n-    >>> u\'<input type="submit" name="t.search" value="Search" />\' in template\n+    >>> u\'<input name="t.search" type="submit" value="Search" />\' in template\n     True\n \n     >>> request = Request(form={\'t.search\' : True, \'t.query\' : \'value\'})\n@@ -148,7 +148,7 @@ class GroupsSourceQueryView:\n     template = ViewPageTemplateFile("searchabletextsource.pt")\n \n     def __init__(self, context, request):\n-        msg = "GroupsSourceQueryView is deprecated and will be removed on " "Plone 6"\n+        msg = "GroupsSourceQueryView is deprecated and will be removed on Plone 7"\n         warnings.warn(msg, DeprecationWarning)\n         self.context = context\n         self.request = request\ndiff --git a/plone/app/vocabularies/images.py b/plone/app/vocabularies/images.py\nindex 0bc9c7d..4feea9a 100644\n--- a/plone/app/vocabularies/images.py\n+++ b/plone/app/vocabularies/images.py\n@@ -6,6 +6,7 @@\n from zope.schema.vocabulary import SimpleTerm\n from zope.schema.vocabulary import SimpleVocabulary\n \n+\n PMF = MessageFactory("plone")\n \n \ndiff --git a/plone/app/vocabularies/language.py b/plone/app/vocabularies/language.py\nindex c5c387d..2bb2235 100644\n--- a/plone/app/vocabularies/language.py\n+++ b/plone/app/vocabularies/language.py\n@@ -47,7 +47,7 @@ def __call__(self, context):\n         ltool = getToolByName(site, "portal_languages", None)\n         if ltool is not None:\n             languages = ltool.getAvailableLanguages()\n-            items = [(l, languages[l].get("native", l)) for l in languages]\n+            items = [(lang, languages[lang].get("native", lang)) for lang in languages]\n             items.sort(key=itemgetter(1))\n             items = [SimpleTerm(i[0], i[0], i[1]) for i in items]\n         return SimpleVocabulary(items)\n@@ -100,7 +100,9 @@ def __call__(self, context):\n         if ltool is not None:\n             items = ltool.listSupportedLanguages()\n             all_langs = ltool.getAvailableLanguages()\n-            items = [(l[0], all_langs[l[0]].get("native", l[1])) for l in items]\n+            items = [\n+                (lang[0], all_langs[lang[0]].get("native", lang[1])) for lang in items\n+            ]\n             items.sort(key=itemgetter(1))\n             items = [\n                 SimpleTerm(i[0], i[0], all_langs.get(i[0], {}).get("native", i[1]))\ndiff --git a/plone/app/vocabularies/metadatafields.py b/plone/app/vocabularies/metadatafields.py\nindex fc29cdf..2ef09d3 100644\n--- a/plone/app/vocabularies/metadatafields.py\n+++ b/plone/app/vocabularies/metadatafields.py\n@@ -35,7 +35,6 @@ class MetaDataFieldsVocabulary:\n \n     >>> from zope.component import queryUtility\n     >>> from plone.app.vocabularies.tests.base import DummyCatalog\n-    >>> from plone.app.vocabularies.tests.base import DummyTool\n     >>> from plone.app.vocabularies.tests.base import create_context\n \n     >>> context = create_context()\ndiff --git a/plone/app/vocabularies/principals.py b/plone/app/vocabularies/principals.py\nindex 8aee569..7458dd7 100644\n--- a/plone/app/vocabularies/principals.py\n+++ b/plone/app/vocabularies/principals.py\n@@ -205,10 +205,10 @@ def use_principal_triple(self, principal_triple):\n             (user:johndoe, user__johndoe, \'John Doe\') or\n             (group:editors, group__editors, \'Editors\').\n \n-        returns wether the triple shall be included in the vocabulary or not\n+        returns whether the triple shall be included in the vocabulary or not\n         (bool).\n \n-        Meant to be overriden in subclasses for post-filtering result.\n+        Meant to be overridden in subclasses for post-filtering result.\n         """\n         return True\n \ndiff --git a/plone/app/vocabularies/searchabletextsource.pt b/plone/app/vocabularies/searchabletextsource.pt\nindex 15a2564..0bbecf3 100644\n--- a/plone/app/vocabularies/searchabletextsource.pt\n+++ b/plone/app/vocabularies/searchabletextsource.pt\n@@ -1,15 +1,25 @@\n <div class="row"\n-     i18n:domain="plone">\n+     i18n:domain="plone"\n+>\n   <div class="field"\n-       tal:define="name python:options.get(\'name\')">\n-    <input type="text"\n-           name="name.query"\n+       tal:define="\n+         name python:options.get(\'name\');\n+       "\n+  >\n+    <input name="name.query"\n+           type="text"\n            value=""\n-           tal:attributes="name string:${name}.query" />\n-    <input type="submit"\n-           name="name.search"\n+           tal:attributes="\n+             name string:${name}.query;\n+           "\n+    />\n+    <input name="name.search"\n+           type="submit"\n            value="Search"\n+           tal:attributes="\n+             name string:${name}.search;\n+           "\n            i18n:attributes="value label_search"\n-           tal:attributes="name string:${name}.search" />\n+    />\n   </div>\n </div>\ndiff --git a/plone/app/vocabularies/syndication.py b/plone/app/vocabularies/syndication.py\nindex 5849a6b..6e6c48f 100644\n--- a/plone/app/vocabularies/syndication.py\n+++ b/plone/app/vocabularies/syndication.py\n@@ -1,10 +1,8 @@\n-from plone.base import MessageFactory as _\n from plone.base.interfaces import ISiteSyndicationSettings\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from zope.component import getUtility\n from zope.component.hooks import getSite\n-from zope.i18nmessageid import MessageFactory\n from zope.interface import implementer\n from zope.schema.interfaces import IVocabularyFactory\n from zope.schema.vocabulary import SimpleTerm\ndiff --git a/plone/app/vocabularies/tests/base.py b/plone/app/vocabularies/tests/base.py\nindex 8bef5ca..d1b5eaa 100644\n--- a/plone/app/vocabularies/tests/base.py\n+++ b/plone/app/vocabularies/tests/base.py\n@@ -29,7 +29,6 @@ def absolute_url(self, relative=False):\n \n \n class DummyUrlTool:\n-\n     name = "portal_url"\n \n     def __init__(self, context):\n@@ -70,7 +69,6 @@ def getHeader(self, value):\n \n \n class Request(dict):\n-\n     debug = False\n     response = Response()\n \n@@ -79,7 +77,6 @@ def __init__(self, form=None):\n \n \n class Brain:\n-\n     Title = "BrainTitle"\n     is_folderish = True\n \ndiff --git a/plone/app/vocabularies/tests/test_editors.py b/plone/app/vocabularies/tests/test_editors.py\nindex e011dc4..046f39c 100644\n--- a/plone/app/vocabularies/tests/test_editors.py\n+++ b/plone/app/vocabularies/tests/test_editors.py\n@@ -6,7 +6,6 @@\n \n \n class AvailableEditorsTest(unittest.TestCase):\n-\n     layer = PAVocabularies_INTEGRATION_TESTING\n \n     def setUp(self):\ndiff --git a/plone/app/vocabularies/tests/test_subjects_under_context.py b/plone/app/vocabularies/tests/test_subjects_under_context.py\nindex 81f2227..daa0571 100644\n--- a/plone/app/vocabularies/tests/test_subjects_under_context.py\n+++ b/plone/app/vocabularies/tests/test_subjects_under_context.py\n@@ -7,7 +7,6 @@\n \n \n class TestKeywordsUnderContext(unittest.TestCase):\n-\n     layer = PAVocabularies_INTEGRATION_TESTING\n \n     def setUp(self):\ndiff --git a/plone/app/vocabularies/users.py b/plone/app/vocabularies/users.py\nindex 5bee2b8..83dc2c9 100644\n--- a/plone/app/vocabularies/users.py\n+++ b/plone/app/vocabularies/users.py\n@@ -138,10 +138,10 @@ class UsersSourceQueryView:\n \n     >>> template = view.render(name=\'t\')\n \n-    >>> u\'<input type="text" name="t.query" value="" />\' in template\n+    >>> u\'<input name="t.query" type="text" value="" />\' in template\n     True\n \n-    >>> u\'<input type="submit" name="t.search" value="Search" />\' in template\n+    >>> u\'<input name="t.search" type="submit" value="Search" />\' in template\n     True\n \n     >>> request = Request(form={\'t.search\' : True, \'t.query\' : \'value\'})\n@@ -153,7 +153,7 @@ class UsersSourceQueryView:\n     template = ViewPageTemplateFile("searchabletextsource.pt")\n \n     def __init__(self, context, request):\n-        msg = "UsersSourceQueryView is deprecated and will be removed on " "Plone 6"\n+        msg = "UsersSourceQueryView is deprecated and will be removed on Plone 7"\n         warnings.warn(msg, DeprecationWarning)\n         self.context = context\n         self.request = request\ndiff --git a/plone/app/vocabularies/workflow.py b/plone/app/vocabularies/workflow.py\nindex b05bfe7..e63a180 100644\n--- a/plone/app/vocabularies/workflow.py\n+++ b/plone/app/vocabularies/workflow.py\n@@ -205,9 +205,7 @@ def __call__(self, context):\n             transition_folder = getattr(wf, "transitions", None)\n             wf_name = wf.title or wf.id\n             if transition_folder is not None:\n-\n                 for transition in transition_folder.values():\n-\n                     # zope.i18nmessageid will choke\n                     # if undecoded UTF-8 bytestrings slip through\n                     # which we may encounter on international sites\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..389918d 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,48 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\n+\'Products.ZCatalog\' = [\'Products.ZCTextIndex\', \'Products.PluginIndexes\']\n+ignore-packages = [\'zope.formlib\']\n+\n+[tool.codespell]\n+ignore-words-list = "noone"\ndiff --git a/setup.cfg b/setup.cfg\nindex aabcd01..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,8 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n \n-[isort]\n-profile = black\n-force_alphabetical_sort=True\n-force_single_line=True\n-lines_after_imports=2\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex 2704f86..39676e8 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -37,19 +37,26 @@\n     zip_safe=False,\n     python_requires=">=3.8",\n     install_requires=[\n+        "BTrees",\n+        "Products.ZCatalog",\n         "plone.app.querystring",\n         "plone.base",\n+        "plone.app.layout",\n+        "plone.memoize",\n+        "plone.namedfile",\n+        "plone.registry",\n+        "plone.uuid",\n         "pytz",\n         "setuptools",\n-        "zope.deprecation",\n+        "z3c.formwidget.query",\n+        "zope.browser",\n         "zope.globalrequest",\n     ],\n     extras_require=dict(\n         test=[\n-            "mock",\n             "plone.app.testing",\n+            "Products.ExtendedPathIndex",\n             "zope.configuration",\n-            "zope.testing",\n         ]\n     ),\n )\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..3448e70\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,50 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s plone.app.vocabularies\n+extras =\n+    test\n'

