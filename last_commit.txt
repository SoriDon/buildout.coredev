Repository: plone.autoform


Branch: refs/heads/master
Date: 2016-05-05T15:22:14+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.autoform/commit/a4253b6f6317c6bb42fef1ca3825213db9f376e6

more happyness for Jenkins CI reporting about code analysis - use single quotes

Files changed:
M plone/autoform/tests/test_supermodel_handler.py
M plone/autoform/tests/test_utils.py

diff --git a/plone/autoform/tests/test_supermodel_handler.py b/plone/autoform/tests/test_supermodel_handler.py
index 6f520ea..18412b8 100644
--- a/plone/autoform/tests/test_supermodel_handler.py
+++ b/plone/autoform/tests/test_supermodel_handler.py
@@ -38,19 +38,19 @@ class TestFormSchema(unittest.TestCase):
     def test_read(self):
         field_node = etree.Element('field')
         field_node.set(
-            ns("widget", self.namespace),
-            "z3c.form.browser.password.PasswordFieldWidget"
+            ns('widget', self.namespace),
+            'z3c.form.browser.password.PasswordFieldWidget'
         )
-        field_node.set(ns("mode", self.namespace), "hidden")
-        field_node.set(ns("omitted", self.namespace), "true")
-        field_node.set(ns("before", self.namespace), "somefield")
+        field_node.set(ns('mode', self.namespace), 'hidden')
+        field_node.set(ns('omitted', self.namespace), 'true')
+        field_node.set(ns('before', self.namespace), 'somefield')
         field_node.set(
-            ns("validator", self.namespace),
-            "plone.autoform.tests.test_utils.TestValidator"
+            ns('validator', self.namespace),
+            'plone.autoform.tests.test_utils.TestValidator'
         )
 
         class IDummy(Interface):
-            dummy = zope.schema.TextLine(title=u"dummy")
+            dummy = zope.schema.TextLine(title=u'dummy')
 
         handler = FormSchema()
         handler.read(field_node, IDummy, IDummy['dummy'])
@@ -81,20 +81,20 @@ class IDummy(Interface):
     def test_read_multiple(self):
         field_node1 = etree.Element('field')
         field_node1.set(
-            ns("widget", self.namespace),
-            "z3c.form.browser.password.PasswordFieldWidget"
+            ns('widget', self.namespace),
+            'z3c.form.browser.password.PasswordFieldWidget'
         )
-        field_node1.set(ns("mode", self.namespace), "hidden")
-        field_node1.set(ns("omitted", self.namespace), "true")
-        field_node1.set(ns("before", self.namespace), "somefield")
+        field_node1.set(ns('mode', self.namespace), 'hidden')
+        field_node1.set(ns('omitted', self.namespace), 'true')
+        field_node1.set(ns('before', self.namespace), 'somefield')
 
         field_node2 = etree.Element('field')
-        field_node2.set(ns("mode", self.namespace), "display")
-        field_node2.set(ns("omitted", self.namespace), "yes")
+        field_node2.set(ns('mode', self.namespace), 'display')
+        field_node2.set(ns('omitted', self.namespace), 'yes')
 
         class IDummy(Interface):
-            dummy1 = zope.schema.TextLine(title=u"dummy1")
-            dummy2 = zope.schema.TextLine(title=u"dummy2")
+            dummy1 = zope.schema.TextLine(title=u'dummy1')
+            dummy2 = zope.schema.TextLine(title=u'dummy2')
 
         handler = FormSchema()
         handler.read(field_node1, IDummy, IDummy['dummy1'])
@@ -122,7 +122,7 @@ def test_read_no_data(self):
         field_node = etree.Element('field')
 
         class IDummy(Interface):
-            dummy = zope.schema.TextLine(title=u"dummy1")
+            dummy = zope.schema.TextLine(title=u'dummy1')
 
         handler = FormSchema()
         handler.read(field_node, IDummy, IDummy['dummy'])
@@ -135,29 +135,29 @@ class IDummy(Interface):
     def test_read_values_with_interfaces(self):
         field_node1 = etree.Element('field')
         field_node1.set(
-            ns("mode", self.namespace),
-            "z3c.form.interfaces.IForm:hidden"
+            ns('mode', self.namespace),
+            'z3c.form.interfaces.IForm:hidden'
         )
         field_node1.set(
-            ns("omitted", self.namespace),
-            "z3c.form.interfaces.IForm:true"
+            ns('omitted', self.namespace),
+            'z3c.form.interfaces.IForm:true'
         )
 
         field_node2 = etree.Element('field')
         field_node2.set(
-            ns("mode", self.namespace),
-            "z3c.form.interfaces.IForm:hidden "
-            "z3c.form.interfaces.IEditForm:display"
+            ns('mode', self.namespace),
+            'z3c.form.interfaces.IForm:hidden '
+            'z3c.form.interfaces.IEditForm:display'
         )
         field_node2.set(
-            ns("omitted", self.namespace),
-            "z3c.form.interfaces.IForm:true "
-            "z3c.form.interfaces.IEditForm:false"
+            ns('omitted', self.namespace),
+            'z3c.form.interfaces.IForm:true '
+            'z3c.form.interfaces.IEditForm:false'
         )
 
         class IDummy(Interface):
-            dummy1 = zope.schema.TextLine(title=u"dummy1")
-            dummy2 = zope.schema.TextLine(title=u"dummy2")
+            dummy1 = zope.schema.TextLine(title=u'dummy1')
+            dummy2 = zope.schema.TextLine(title=u'dummy2')
 
         handler = FormSchema()
         handler.read(field_node1, IDummy, IDummy['dummy1'])
@@ -232,7 +232,7 @@ def test_write(self):
         field_node = etree.Element('field')
 
         class IDummy(Interface):
-            dummy = zope.schema.TextLine(title=u"dummy1")
+            dummy = zope.schema.TextLine(title=u'dummy1')
 
         IDummy.setTaggedValue(WIDGETS_KEY, {'dummy': 'SomeWidget'})
         IDummy.setTaggedValue(OMITTED_KEY, [(Interface, 'dummy', 'true')])
@@ -243,19 +243,19 @@ class IDummy(Interface):
         handler.write(field_node, IDummy, IDummy['dummy'])
 
         widget_node = field_node.find(ns('widget', self.namespace))
-        self.assertEqual("SomeWidget", widget_node.get('type'))
-        self.assertEqual("true", field_node.get(ns("omitted", self.namespace)))
-        self.assertEqual("hidden", field_node.get(ns("mode", self.namespace)))
+        self.assertEqual('SomeWidget', widget_node.get('type'))
+        self.assertEqual('true', field_node.get(ns('omitted', self.namespace)))
+        self.assertEqual('hidden', field_node.get(ns('mode', self.namespace)))
         self.assertEqual(
-            "somefield",
-            field_node.get(ns("before", self.namespace))
+            'somefield',
+            field_node.get(ns('before', self.namespace))
         )
 
     def test_write_partial(self):
         field_node = etree.Element('field')
 
         class IDummy(Interface):
-            dummy = zope.schema.TextLine(title=u"dummy1")
+            dummy = zope.schema.TextLine(title=u'dummy1')
 
         IDummy.setTaggedValue(WIDGETS_KEY, {'dummy': 'SomeWidget'})
         IDummy.setTaggedValue(OMITTED_KEY, [(Interface, 'dummy2', 'true')])
@@ -269,32 +269,32 @@ class IDummy(Interface):
         handler.write(field_node, IDummy, IDummy['dummy'])
 
         widget_node = field_node.find(ns('widget', self.namespace))
-        self.assertEqual("SomeWidget", widget_node.get('type'))
-        self.assertEqual(None, field_node.get(ns("omitted", self.namespace)))
-        self.assertEqual("display", field_node.get(ns("mode", self.namespace)))
-        self.assertEqual(None, field_node.get(ns("before", self.namespace)))
+        self.assertEqual('SomeWidget', widget_node.get('type'))
+        self.assertEqual(None, field_node.get(ns('omitted', self.namespace)))
+        self.assertEqual('display', field_node.get(ns('mode', self.namespace)))
+        self.assertEqual(None, field_node.get(ns('before', self.namespace)))
 
     def test_write_no_data(self):
         field_node = etree.Element('field')
 
         class IDummy(Interface):
-            dummy = zope.schema.TextLine(title=u"dummy1")
+            dummy = zope.schema.TextLine(title=u'dummy1')
 
         handler = FormSchema()
         handler.write(field_node, IDummy, IDummy['dummy'])
 
-        self.assertEqual(None, field_node.find(ns("widget", self.namespace)))
-        self.assertEqual(None, field_node.get(ns("omitted", self.namespace)))
-        self.assertEqual(None, field_node.get(ns("mode", self.namespace)))
-        self.assertEqual(None, field_node.get(ns("before", self.namespace)))
+        self.assertEqual(None, field_node.find(ns('widget', self.namespace)))
+        self.assertEqual(None, field_node.get(ns('omitted', self.namespace)))
+        self.assertEqual(None, field_node.get(ns('mode', self.namespace)))
+        self.assertEqual(None, field_node.get(ns('before', self.namespace)))
 
     def test_write_values_with_interfaces(self):
         field_node1 = etree.Element('field')
         field_node2 = etree.Element('field')
 
         class IDummy(Interface):
-            dummy1 = zope.schema.TextLine(title=u"dummy1")
-            dummy2 = zope.schema.TextLine(title=u"dummy2")
+            dummy1 = zope.schema.TextLine(title=u'dummy1')
+            dummy2 = zope.schema.TextLine(title=u'dummy2')
 
         modes_values = [
             (IForm, u'dummy1', 'hidden'),
@@ -314,23 +314,23 @@ class IDummy(Interface):
         handler.write(field_node2, IDummy, IDummy['dummy2'])
 
         self.assertEqual(
-            "z3c.form.interfaces.IForm:hidden",
-            field_node1.get(ns("mode", self.namespace))
+            'z3c.form.interfaces.IForm:hidden',
+            field_node1.get(ns('mode', self.namespace))
         )
         self.assertEqual(
-            "z3c.form.interfaces.IForm:true",
-            field_node1.get(ns("omitted", self.namespace))
+            'z3c.form.interfaces.IForm:true',
+            field_node1.get(ns('omitted', self.namespace))
         )
 
         self.assertEqual(
-            "z3c.form.interfaces.IForm:hidden "
-            "z3c.form.interfaces.IEditForm:display",
-            field_node2.get(ns("mode", self.namespace))
+            'z3c.form.interfaces.IForm:hidden '
+            'z3c.form.interfaces.IEditForm:display',
+            field_node2.get(ns('mode', self.namespace))
         )
         self.assertEqual(
-            "z3c.form.interfaces.IForm:true "
-            "z3c.form.interfaces.IEditForm:false",
-            field_node2.get(ns("omitted", self.namespace))
+            'z3c.form.interfaces.IForm:true '
+            'z3c.form.interfaces.IEditForm:false',
+            field_node2.get(ns('omitted', self.namespace))
         )
 
     def test_write_parameterized_widget_string(self):
@@ -348,8 +348,8 @@ class IDummy(Interface):
         self.assertEqual(
             etree.tostring(fieldNode),
             '<field><ns0:widget'
-            ' xmlns:ns0="http://namespaces.plone.org/supermodel/form"'
-            ' type="foo"/></field>'
+            ' xmlns:ns0='http://namespaces.plone.org/supermodel/form''
+            ' type='foo'/></field>'
         )
 
     def test_write_parameterized_widget_default(self):
@@ -384,9 +384,9 @@ class IDummy(Interface):
         self.assertEqual(
             etree.tostring(fieldNode),
             '<field><ns0:widget'
-            ' xmlns:ns0="http://namespaces.plone.org/supermodel/form"'
-            ' type="plone.autoform.tests.test_supermodel_handler.'
-            'DummyWidget">'
+            ' xmlns:ns0='http://namespaces.plone.org/supermodel/form''
+            ' type='plone.autoform.tests.test_supermodel_handler.'
+            'DummyWidget'>'
             '<klass>custom</klass>'
             '</ns0:widget></field>')
 
@@ -405,7 +405,7 @@ class IDummy(Interface):
         self.assertEqual(
             etree.tostring(fieldNode),
             '<field><ns0:widget'
-            ' xmlns:ns0="http://namespaces.plone.org/supermodel/form">'
+            ' xmlns:ns0='http://namespaces.plone.org/supermodel/form'>'
             '<klass>custom</klass></ns0:widget></field>')
 
 
@@ -415,11 +415,11 @@ class TestSecuritySchema(unittest.TestCase):
 
     def test_read(self):
         field_node = etree.Element('field')
-        field_node.set(ns("read-permission", self.namespace), "dummy.Read")
-        field_node.set(ns("write-permission", self.namespace), "dummy.Write")
+        field_node.set(ns('read-permission', self.namespace), 'dummy.Read')
+        field_node.set(ns('write-permission', self.namespace), 'dummy.Write')
 
         class IDummy(Interface):
-            dummy = zope.schema.TextLine(title=u"dummy")
+            dummy = zope.schema.TextLine(title=u'dummy')
 
         handler = SecuritySchema()
         handler.read(field_node, IDummy, IDummy['dummy'])
@@ -437,7 +437,7 @@ def test_read_no_permissions(self):
         field_node = etree.Element('field')
 
         class IDummy(Interface):
-            dummy = zope.schema.TextLine(title=u"dummy")
+            dummy = zope.schema.TextLine(title=u'dummy')
 
         handler = SecuritySchema()
         handler.read(field_node, IDummy, IDummy['dummy'])
@@ -449,7 +449,7 @@ def test_write(self):
         field_node = etree.Element('field')
 
         class IDummy(Interface):
-            dummy = zope.schema.TextLine(title=u"dummy")
+            dummy = zope.schema.TextLine(title=u'dummy')
 
         IDummy.setTaggedValue(READ_PERMISSIONS_KEY, {u'dummy': 'dummy.Read'})
         IDummy.setTaggedValue(WRITE_PERMISSIONS_KEY, {u'dummy': 'dummy.Write'})
@@ -458,19 +458,19 @@ class IDummy(Interface):
         handler.write(field_node, IDummy, IDummy['dummy'])
 
         self.assertEqual(
-            "dummy.Read",
-            field_node.get(ns("read-permission", self.namespace))
+            'dummy.Read',
+            field_node.get(ns('read-permission', self.namespace))
         )
         self.assertEqual(
-            "dummy.Write",
-            field_node.get(ns("write-permission", self.namespace))
+            'dummy.Write',
+            field_node.get(ns('write-permission', self.namespace))
         )
 
     def test_write_no_permissions(self):
         field_node = etree.Element('field')
 
         class IDummy(Interface):
-            dummy = zope.schema.TextLine(title=u"dummy")
+            dummy = zope.schema.TextLine(title=u'dummy')
 
         IDummy.setTaggedValue(READ_PERMISSIONS_KEY, {u'dummy': None})
 
@@ -479,29 +479,29 @@ class IDummy(Interface):
 
         self.assertEqual(
             None,
-            field_node.get(ns("read-permission", self.namespace))
+            field_node.get(ns('read-permission', self.namespace))
         )
         self.assertEqual(
             None,
-            field_node.get(ns("write-permission", self.namespace))
+            field_node.get(ns('write-permission', self.namespace))
         )
 
     def test_write_no_metadata(self):
         field_node = etree.Element('field')
 
         class IDummy(Interface):
-            dummy = zope.schema.TextLine(title=u"dummy")
+            dummy = zope.schema.TextLine(title=u'dummy')
 
         handler = SecuritySchema()
         handler.write(field_node, IDummy, IDummy['dummy'])
 
         self.assertEqual(
             None,
-            field_node.get(ns("read-permission", self.namespace))
+            field_node.get(ns('read-permission', self.namespace))
         )
         self.assertEqual(
             None,
-            field_node.get(ns("write-permission", self.namespace))
+            field_node.get(ns('write-permission', self.namespace))
         )
 
 
diff --git a/plone/autoform/tests/test_utils.py b/plone/autoform/tests/test_utils.py
index 436edf2..c449a39 100644
--- a/plone/autoform/tests/test_utils.py
+++ b/plone/autoform/tests/test_utils.py
@@ -20,7 +20,7 @@ class TestValidator(SimpleFieldValidator):
 
     def validate(self, value):
         super(TestValidator, self).validate(value)
-        raise Invalid("Test")
+        raise Invalid('Test')
 
 
 class TestUtils(unittest.TestCase):


