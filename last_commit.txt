Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-05-07T12:25:30+02:00
Author: Thomas Buchberger (buchi) <t.buchberger@4teamwork.ch>
Commit: https://github.com/plone/plone.restapi/commit/63871722047c36b2ee923148fee6ebc92172cf67

Return the token and the title of vocabulary terms in serialization

Files changed:
A news/726.breaking
M docs/source/upgrade-guide.rst
M news/691.breaking
M src/plone/restapi/deserializer/dxfields.py
M src/plone/restapi/serializer/dxfields.py
M src/plone/restapi/tests/http-examples/collection.resp
M src/plone/restapi/tests/http-examples/controlpanels_get_item.resp
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_dxfield_serializer.py

b'diff --git a/docs/source/upgrade-guide.rst b/docs/source/upgrade-guide.rst\nindex 4d3973b1..173141c2 100644\n--- a/docs/source/upgrade-guide.rst\n+++ b/docs/source/upgrade-guide.rst\n@@ -11,10 +11,9 @@ Serialization and Deserialization of fields with vocabularies\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n The serialization of fields with vocabularies (e.g. ``Choice``) now returns the\n-token of the vocabulary term instead of the stored value. For text values this\n-should not make much a difference as the token and the value are usually the\n-same. However if the term\'s value is not equal to it\'s token it may be neccessary\n-to adopt the client implementation.\n+`token` and the `title` of the vocabulary term instead of the stored value.\n+This is allows displaying the term (title) without additionally querying the\n+vocabulary. However it\'s necessary to adopt existing client implementations.\n \n Example:\n \n@@ -31,19 +30,23 @@ The date and time controlpanel previously returned a number for the\n     ...\n   }\n \n-Now it returns a string::\n+Now it returns an object with a token and a title::\n \n   {\n     "@id": "http://localhost:55001/plone/@controlpanels/date-and-time",\n     "data": {\n         ...\n-        "first_weekday": "0",\n+        "first_weekday": {\n+            "title": "Monday",\n+            "token": "0"\n+        },\n         ...\n     }\n     ...\n   }\n \n-Deserialization now also expects the token, but still works using the value.\n+Deserialization accepts objects that contain a token, but also just the token\n+or the value.\n However it\'s highly recommended to always use the token as vocabulary terms\n may contain values that are not JSON serializable.\n \ndiff --git a/news/691.breaking b/news/691.breaking\nindex 51b72235..df0280e5 100644\n--- a/news/691.breaking\n+++ b/news/691.breaking\n@@ -1,4 +1,3 @@\n Use tokens for serialization/deserialization of vocabulary terms.\n-This may break clients if the serialization of a term\'s value is not equal to the token.\n [buchi]\n \ndiff --git a/news/726.breaking b/news/726.breaking\nnew file mode 100644\nindex 00000000..f90484ce\n--- /dev/null\n+++ b/news/726.breaking\n@@ -0,0 +1,3 @@\n+Return the token and the title of vocabulary terms in serialization.\n+See upgrade guide for more information.\n+[buchi]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/deserializer/dxfields.py b/src/plone/restapi/deserializer/dxfields.py\nindex 81897723..077b9064 100644\n--- a/src/plone/restapi/deserializer/dxfields.py\n+++ b/src/plone/restapi/deserializer/dxfields.py\n@@ -122,6 +122,8 @@ def __call__(self, value):\n class ChoiceFieldDeserializer(DefaultFieldDeserializer):\n \n     def __call__(self, value):\n+        if isinstance(value, dict) and \'token\' in value:\n+            value = value[\'token\']\n         if IVocabularyTokenized.providedBy(self.field.vocabulary):\n             try:\n                 value = self.field.vocabulary.getTermByToken(value).value\n@@ -146,6 +148,8 @@ def __call__(self, value):\n                 IFieldDeserializer)\n \n             for i, v in enumerate(value):\n+                if isinstance(v, dict) and \'token\' in v:\n+                    v = v[\'token\']\n                 value[i] = deserializer(v)\n \n         value = self.field._type(value)\ndiff --git a/src/plone/restapi/serializer/dxfields.py b/src/plone/restapi/serializer/dxfields.py\nindex 33954ab1..bc3a5ded 100644\n--- a/src/plone/restapi/serializer/dxfields.py\n+++ b/src/plone/restapi/serializer/dxfields.py\n@@ -47,7 +47,7 @@ def __call__(self):\n                 and IVocabularyTokenized.providedBy(self.field.vocabulary)):\n             try:\n                 term = self.field.vocabulary.getTerm(value)\n-                value = term.token\n+                value = {\'token\': term.token, \'title\': term.title}\n             # Some fields (e.g. language) have a default value that is not in\n             # vocabulary\n             except LookupError:\n@@ -67,8 +67,11 @@ def __call__(self):\n         value_type = self.field.value_type\n         if (value is not None and IChoice.providedBy(value_type)\n                 and IVocabularyTokenized.providedBy(value_type.vocabulary)):\n-            value = self.field._type([value_type.vocabulary.getTerm(v).token\n-                                      for v in value])\n+            values = []\n+            for v in value:\n+                term = value_type.vocabulary.getTerm(v)\n+                values.append({u\'token\': term.token, u\'title\': term.title})\n+            value = self.field._type(values)\n         return json_compatible(value)\n \n \ndiff --git a/src/plone/restapi/tests/http-examples/collection.resp b/src/plone/restapi/tests/http-examples/collection.resp\nindex 86c6c4ce..7421a1c3 100644\n--- a/src/plone/restapi/tests/http-examples/collection.resp\n+++ b/src/plone/restapi/tests/http-examples/collection.resp\n@@ -26,10 +26,22 @@ Content-Type: application/json\n     "test_user_1_"\n   ], \n   "customViewFields": [\n-    "Title", \n-    "Creator", \n-    "Type", \n-    "ModificationDate"\n+    {\n+      "title": "Title", \n+      "token": "Title"\n+    }, \n+    {\n+      "title": "Creator", \n+      "token": "Creator"\n+    }, \n+    {\n+      "title": "Type", \n+      "token": "Type"\n+    }, \n+    {\n+      "title": "ModificationDate", \n+      "token": "ModificationDate"\n+    }\n   ], \n   "description": "This is a collection with two documents", \n   "effective": null, \ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\nindex aee68a51..ea53e507 100644\n--- a/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n@@ -8,7 +8,10 @@ Content-Type: application/json\n       "TinyMCE", \n       "None"\n     ], \n-    "default_editor": "TinyMCE", \n+    "default_editor": {\n+      "title": "TinyMCE", \n+      "token": "TinyMCE"\n+    }, \n     "enable_link_integrity_checks": true, \n     "ext_editor": false, \n     "lock_on_ttw_edit": true, \ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex 8c4c998b..d493b6a4 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -103,6 +103,12 @@ def test_choice_deserialization_from_value_returns_vocabulary_value(self):\n         self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'value1\', value)\n \n+    def test_choice_deserialization_from_term_returns_vocabulary_value(self):\n+        value = self.deserialize(\'test_choice_field_with_vocabulary\',\n+                                 {u\'token\': u\'token1\', u\'title\': u\'title1\'})\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n+        self.assertEqual(u\'value1\', value)\n+\n     def test_date_deserialization_returns_date(self):\n         value = self.deserialize(\'test_date_field\', u\'2015-12-20\')\n         self.assertTrue(isinstance(value, date))\n@@ -197,6 +203,13 @@ def test_list_deserialization_from_values_returns_list_of_values(self):\n         self.assertTrue(isinstance(value, list), \'Not a <list>\')\n         self.assertEqual([u\'value1\', u\'value3\'], value)\n \n+    def test_list_deserialization_from_terms_returns_list_of_values(self):\n+        value = self.deserialize(\'test_list_field_with_choice_with_vocabulary\',\n+                                 [{u\'token\': u\'token1\', u\'title\': u\'title1\'},\n+                                  {u\'token\': u\'token3\', u\'title\': u\'title3\'}])\n+        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n+        self.assertEqual([u\'value1\', u\'value3\'], value)\n+\n     def test_set_deserialization_returns_set(self):\n         value = self.deserialize(\'test_set_field\', [1, 2, 3])\n         self.assertTrue(isinstance(value, set), \'Not a <set>\')\ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex 2e6c57c5..39da5413 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -90,15 +90,15 @@ def test_bytesline_field_serialization_returns_unicode(self):\n         self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'\\xe4\\xf6\\xfc\', value)\n \n-    def test_choice_field_serialization_returns_vocabulary_item(self):\n+    def test_choice_field_serialization_returns_vocabulary_term(self):\n         value = self.serialize(\'test_choice_field\', u\'foo\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'foo\', value)\n+        self.assertTrue(isinstance(value, dict))\n+        self.assertEqual({u\'token\': u\'foo\', u\'title\': None}, value)\n \n-    def test_choice_field_serialization_returns_vocabulary_token(self):\n+    def test_choice_field_with_vocabulary_serialization_returns_vocabulary_term(self):  # noqa\n         value = self.serialize(\'test_choice_field_with_vocabulary\', u\'value1\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'token1\', value)\n+        self.assertTrue(isinstance(value, dict))\n+        self.assertEqual({u\'token\': u\'token1\', u\'title\': u\'title1\'}, value)\n \n     def test_date_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_date_field\', date(2015, 7, 15))\n@@ -142,12 +142,17 @@ def test_list_field_serialization_returns_list(self):\n         self.assertTrue(isinstance(value, list), \'Not a <list>\')\n         self.assertEqual([1, u\'two\', 3], value)\n \n-    def test_list_field_with_vocabulary_choice_serialization_returns_tokens(\n+    def test_list_field_with_vocabulary_choice_serialization_returns_terms(\n             self):\n         value = self.serialize(\'test_list_field_with_choice_with_vocabulary\',\n                                [u\'value1\', u\'value3\'])\n         self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertEqual([u\'token1\', u\'token3\'], value)\n+        self.assertEqual(\n+            [\n+                {u\'token\': u\'token1\', u\'title\': u\'title1\'},\n+                {u\'token\': u\'token3\', u\'title\': u\'title3\'},\n+            ],\n+            value)\n \n     def test_set_field_serialization_returns_list(self):\n         value = self.serialize(\'test_set_field\', set([\'a\', \'b\', \'c\']))\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-05-07T16:01:09+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/d19a9df218bc5d83805b8f6755e86e2b8ce72855

Merge pull request #727 from plone/vocabulary-term-title-in-serialization

Return the token and the title of vocabulary terms in serialization

Files changed:
A news/726.breaking
M docs/source/upgrade-guide.rst
M news/691.breaking
M src/plone/restapi/deserializer/dxfields.py
M src/plone/restapi/serializer/dxfields.py
M src/plone/restapi/tests/http-examples/collection.resp
M src/plone/restapi/tests/http-examples/controlpanels_get_item.resp
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_dxfield_serializer.py

b'diff --git a/docs/source/upgrade-guide.rst b/docs/source/upgrade-guide.rst\nindex 4d3973b1..173141c2 100644\n--- a/docs/source/upgrade-guide.rst\n+++ b/docs/source/upgrade-guide.rst\n@@ -11,10 +11,9 @@ Serialization and Deserialization of fields with vocabularies\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n The serialization of fields with vocabularies (e.g. ``Choice``) now returns the\n-token of the vocabulary term instead of the stored value. For text values this\n-should not make much a difference as the token and the value are usually the\n-same. However if the term\'s value is not equal to it\'s token it may be neccessary\n-to adopt the client implementation.\n+`token` and the `title` of the vocabulary term instead of the stored value.\n+This is allows displaying the term (title) without additionally querying the\n+vocabulary. However it\'s necessary to adopt existing client implementations.\n \n Example:\n \n@@ -31,19 +30,23 @@ The date and time controlpanel previously returned a number for the\n     ...\n   }\n \n-Now it returns a string::\n+Now it returns an object with a token and a title::\n \n   {\n     "@id": "http://localhost:55001/plone/@controlpanels/date-and-time",\n     "data": {\n         ...\n-        "first_weekday": "0",\n+        "first_weekday": {\n+            "title": "Monday",\n+            "token": "0"\n+        },\n         ...\n     }\n     ...\n   }\n \n-Deserialization now also expects the token, but still works using the value.\n+Deserialization accepts objects that contain a token, but also just the token\n+or the value.\n However it\'s highly recommended to always use the token as vocabulary terms\n may contain values that are not JSON serializable.\n \ndiff --git a/news/691.breaking b/news/691.breaking\nindex 51b72235..df0280e5 100644\n--- a/news/691.breaking\n+++ b/news/691.breaking\n@@ -1,4 +1,3 @@\n Use tokens for serialization/deserialization of vocabulary terms.\n-This may break clients if the serialization of a term\'s value is not equal to the token.\n [buchi]\n \ndiff --git a/news/726.breaking b/news/726.breaking\nnew file mode 100644\nindex 00000000..f90484ce\n--- /dev/null\n+++ b/news/726.breaking\n@@ -0,0 +1,3 @@\n+Return the token and the title of vocabulary terms in serialization.\n+See upgrade guide for more information.\n+[buchi]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/deserializer/dxfields.py b/src/plone/restapi/deserializer/dxfields.py\nindex 81897723..077b9064 100644\n--- a/src/plone/restapi/deserializer/dxfields.py\n+++ b/src/plone/restapi/deserializer/dxfields.py\n@@ -122,6 +122,8 @@ def __call__(self, value):\n class ChoiceFieldDeserializer(DefaultFieldDeserializer):\n \n     def __call__(self, value):\n+        if isinstance(value, dict) and \'token\' in value:\n+            value = value[\'token\']\n         if IVocabularyTokenized.providedBy(self.field.vocabulary):\n             try:\n                 value = self.field.vocabulary.getTermByToken(value).value\n@@ -146,6 +148,8 @@ def __call__(self, value):\n                 IFieldDeserializer)\n \n             for i, v in enumerate(value):\n+                if isinstance(v, dict) and \'token\' in v:\n+                    v = v[\'token\']\n                 value[i] = deserializer(v)\n \n         value = self.field._type(value)\ndiff --git a/src/plone/restapi/serializer/dxfields.py b/src/plone/restapi/serializer/dxfields.py\nindex 33954ab1..bc3a5ded 100644\n--- a/src/plone/restapi/serializer/dxfields.py\n+++ b/src/plone/restapi/serializer/dxfields.py\n@@ -47,7 +47,7 @@ def __call__(self):\n                 and IVocabularyTokenized.providedBy(self.field.vocabulary)):\n             try:\n                 term = self.field.vocabulary.getTerm(value)\n-                value = term.token\n+                value = {\'token\': term.token, \'title\': term.title}\n             # Some fields (e.g. language) have a default value that is not in\n             # vocabulary\n             except LookupError:\n@@ -67,8 +67,11 @@ def __call__(self):\n         value_type = self.field.value_type\n         if (value is not None and IChoice.providedBy(value_type)\n                 and IVocabularyTokenized.providedBy(value_type.vocabulary)):\n-            value = self.field._type([value_type.vocabulary.getTerm(v).token\n-                                      for v in value])\n+            values = []\n+            for v in value:\n+                term = value_type.vocabulary.getTerm(v)\n+                values.append({u\'token\': term.token, u\'title\': term.title})\n+            value = self.field._type(values)\n         return json_compatible(value)\n \n \ndiff --git a/src/plone/restapi/tests/http-examples/collection.resp b/src/plone/restapi/tests/http-examples/collection.resp\nindex 86c6c4ce..7421a1c3 100644\n--- a/src/plone/restapi/tests/http-examples/collection.resp\n+++ b/src/plone/restapi/tests/http-examples/collection.resp\n@@ -26,10 +26,22 @@ Content-Type: application/json\n     "test_user_1_"\n   ], \n   "customViewFields": [\n-    "Title", \n-    "Creator", \n-    "Type", \n-    "ModificationDate"\n+    {\n+      "title": "Title", \n+      "token": "Title"\n+    }, \n+    {\n+      "title": "Creator", \n+      "token": "Creator"\n+    }, \n+    {\n+      "title": "Type", \n+      "token": "Type"\n+    }, \n+    {\n+      "title": "ModificationDate", \n+      "token": "ModificationDate"\n+    }\n   ], \n   "description": "This is a collection with two documents", \n   "effective": null, \ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\nindex aee68a51..ea53e507 100644\n--- a/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n@@ -8,7 +8,10 @@ Content-Type: application/json\n       "TinyMCE", \n       "None"\n     ], \n-    "default_editor": "TinyMCE", \n+    "default_editor": {\n+      "title": "TinyMCE", \n+      "token": "TinyMCE"\n+    }, \n     "enable_link_integrity_checks": true, \n     "ext_editor": false, \n     "lock_on_ttw_edit": true, \ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex 8c4c998b..d493b6a4 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -103,6 +103,12 @@ def test_choice_deserialization_from_value_returns_vocabulary_value(self):\n         self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'value1\', value)\n \n+    def test_choice_deserialization_from_term_returns_vocabulary_value(self):\n+        value = self.deserialize(\'test_choice_field_with_vocabulary\',\n+                                 {u\'token\': u\'token1\', u\'title\': u\'title1\'})\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n+        self.assertEqual(u\'value1\', value)\n+\n     def test_date_deserialization_returns_date(self):\n         value = self.deserialize(\'test_date_field\', u\'2015-12-20\')\n         self.assertTrue(isinstance(value, date))\n@@ -197,6 +203,13 @@ def test_list_deserialization_from_values_returns_list_of_values(self):\n         self.assertTrue(isinstance(value, list), \'Not a <list>\')\n         self.assertEqual([u\'value1\', u\'value3\'], value)\n \n+    def test_list_deserialization_from_terms_returns_list_of_values(self):\n+        value = self.deserialize(\'test_list_field_with_choice_with_vocabulary\',\n+                                 [{u\'token\': u\'token1\', u\'title\': u\'title1\'},\n+                                  {u\'token\': u\'token3\', u\'title\': u\'title3\'}])\n+        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n+        self.assertEqual([u\'value1\', u\'value3\'], value)\n+\n     def test_set_deserialization_returns_set(self):\n         value = self.deserialize(\'test_set_field\', [1, 2, 3])\n         self.assertTrue(isinstance(value, set), \'Not a <set>\')\ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex 2e6c57c5..39da5413 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -90,15 +90,15 @@ def test_bytesline_field_serialization_returns_unicode(self):\n         self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'\\xe4\\xf6\\xfc\', value)\n \n-    def test_choice_field_serialization_returns_vocabulary_item(self):\n+    def test_choice_field_serialization_returns_vocabulary_term(self):\n         value = self.serialize(\'test_choice_field\', u\'foo\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'foo\', value)\n+        self.assertTrue(isinstance(value, dict))\n+        self.assertEqual({u\'token\': u\'foo\', u\'title\': None}, value)\n \n-    def test_choice_field_serialization_returns_vocabulary_token(self):\n+    def test_choice_field_with_vocabulary_serialization_returns_vocabulary_term(self):  # noqa\n         value = self.serialize(\'test_choice_field_with_vocabulary\', u\'value1\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'token1\', value)\n+        self.assertTrue(isinstance(value, dict))\n+        self.assertEqual({u\'token\': u\'token1\', u\'title\': u\'title1\'}, value)\n \n     def test_date_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_date_field\', date(2015, 7, 15))\n@@ -142,12 +142,17 @@ def test_list_field_serialization_returns_list(self):\n         self.assertTrue(isinstance(value, list), \'Not a <list>\')\n         self.assertEqual([1, u\'two\', 3], value)\n \n-    def test_list_field_with_vocabulary_choice_serialization_returns_tokens(\n+    def test_list_field_with_vocabulary_choice_serialization_returns_terms(\n             self):\n         value = self.serialize(\'test_list_field_with_choice_with_vocabulary\',\n                                [u\'value1\', u\'value3\'])\n         self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertEqual([u\'token1\', u\'token3\'], value)\n+        self.assertEqual(\n+            [\n+                {u\'token\': u\'token1\', u\'title\': u\'title1\'},\n+                {u\'token\': u\'token3\', u\'title\': u\'title3\'},\n+            ],\n+            value)\n \n     def test_set_field_serialization_returns_list(self):\n         value = self.serialize(\'test_set_field\', set([\'a\', \'b\', \'c\']))\n'

