Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2017-02-21T22:28:03+01:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/e063d7365162f72803b86e3ccbd61e845397a394

Process index operations prior to a catalog search

That's the minimal patching that collective.indexing was performing
into Products.CMFPlone.

Part of PLIP #1343.

Files changed:
M Products/CMFPlone/CatalogTool.py

diff --git a/Products/CMFPlone/CatalogTool.py b/Products/CMFPlone/CatalogTool.py
index 502329e..998dea1 100644
--- a/Products/CMFPlone/CatalogTool.py
+++ b/Products/CMFPlone/CatalogTool.py
@@ -40,6 +40,7 @@
 from zope.interface import implementer
 from zope.interface import providedBy
 
+from Products.CMFCore.indexing import processQueue
 
 logger = logging.getLogger('Plone')
 
@@ -375,6 +376,7 @@ def _increment_counter(self):
 
     @security.private
     def getCounter(self):
+        processQueue()
         return self._counter is not None and self._counter() or 0
 
     @security.protected(SearchZCatalog)
@@ -388,6 +390,7 @@ def searchResults(self, REQUEST=None, **kw):
         # effectiveRange checking entirely even for those without portal
         # wide AccessInactivePortalContent permission.
 
+        processQueue()
         kw = kw.copy()
         show_inactive = kw.get('show_inactive', False)
         if isinstance(REQUEST, dict) and not show_inactive:


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2017-02-21T22:28:03+01:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/7d27646962b70d5f9855e66190ca94e9288d4796

Flush indexing operations on some tests

As indexing now is defered at the transaction boundaries instead of
being done right away, some tests need to be adapted to it.

Part of PLIP #1343.

Files changed:
M Products/CMFPlone/tests/testCatalogTool.py

diff --git a/Products/CMFPlone/tests/testCatalogTool.py b/Products/CMFPlone/tests/testCatalogTool.py
index b65ef71..a3bb1ab 100644
--- a/Products/CMFPlone/tests/testCatalogTool.py
+++ b/Products/CMFPlone/tests/testCatalogTool.py
@@ -9,6 +9,7 @@
 from plone.uuid.interfaces import IAttributeUUID
 from plone.uuid.interfaces import IUUID
 from Products.CMFCore.permissions import AccessInactivePortalContent
+from Products.CMFCore.indexing import processQueue
 from Products.CMFPlone.CatalogTool import CatalogTool
 from Products.CMFPlone.CatalogTool import is_folderish
 from Products.CMFPlone.tests import dummy
@@ -154,6 +155,7 @@ def afterSetUp(self):
         self.folder.invokeFactory('Document', id='doc',
                                   title='Foo', description='Bar')
         self.catalog.unindexObject(self.folder.doc)
+        processQueue()
 
     def assertResults(self, result, expect):
         # Verifies ids of catalog results against expected ids
@@ -214,6 +216,7 @@ def testReindexObjectUpdatesMetadata(self):
     def testReindexObjectSkipsMetadata(self):
         # Reindexing should not update metadata when update_metadata=0
         self.catalog.indexObject(self.folder.doc)
+        processQueue()
         self.folder.doc.setTitle('Fred')
         self.folder.doc.setDescription('BamBam')
         self.catalog.reindexObject(self.folder.doc, update_metadata=0)
@@ -226,6 +229,7 @@ def testReindexObjectSkipsMetadata(self):
     def testReindexTitleOnly(self):
         # Reindexing should only index the Title
         self.catalog.indexObject(self.folder.doc)
+        processQueue()
         self.folder.doc.setTitle('Fred')
         self.folder.doc.setDescription('BamBam')
         self.catalog.reindexObject(self.folder.doc, idxs=['Title'])
@@ -249,6 +253,7 @@ def testReindexTitleOnlyUpdatesMetadata(self):
     def testReindexTitleOnlySkipsMetadata(self):
         # Reindexing Title should not update metadata when update_metadata=0
         self.catalog.indexObject(self.folder.doc)
+        processQueue()
         self.folder.doc.setTitle('Fred')
         self.folder.doc.setDescription('BamBam')
         self.catalog.reindexObject(self.folder.doc, idxs=['Title'],
@@ -267,6 +272,7 @@ def testIndexTitleOnly(self):
         # by searchResults()!?
         #
         self.catalog.indexObject(self.folder.doc, idxs=['Title'])
+        processQueue()
         # The document is cataloged
         path = self.catalog._CatalogTool__url(self.folder.doc)
         self.assertTrue(path in self.catalog._catalog.paths.values())
@@ -282,6 +288,7 @@ def testIndexIdOnly(self):
         # of index type.
         #
         self.catalog.indexObject(self.folder.doc, idxs=['getId'])
+        processQueue()
         # The document is cataloged
         path = self.catalog._CatalogTool__url(self.folder.doc)
         self.assertTrue(path in self.catalog._catalog.paths.values())


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2017-02-21T22:29:39+01:00
Author: Gil Forcada (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/b3eac9fd0fe48cba539d7ead7960b1c55155efb3

Update CHANGES

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index da52020..231d7bf 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,9 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Adapt code and tests to the new indexing operations queueing.
+  Part of PLIP 1343: https://github.com/plone/Products.CMFPlone/issues/1343
+  [gforcada]
 
 Bug fixes:
 


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2017-02-21T22:30:16+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/2c3c961f48b9ff0cefe2ccff3539755139307bef

Merge pull request #1595 from plone/merge-collective-indexing

Merge collective indexing

Files changed:
M CHANGES.rst
M Products/CMFPlone/CatalogTool.py
M Products/CMFPlone/tests/testCatalogTool.py

diff --git a/CHANGES.rst b/CHANGES.rst
index da52020..231d7bf 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,9 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Adapt code and tests to the new indexing operations queueing.
+  Part of PLIP 1343: https://github.com/plone/Products.CMFPlone/issues/1343
+  [gforcada]
 
 Bug fixes:
 
diff --git a/Products/CMFPlone/CatalogTool.py b/Products/CMFPlone/CatalogTool.py
index 502329e..998dea1 100644
--- a/Products/CMFPlone/CatalogTool.py
+++ b/Products/CMFPlone/CatalogTool.py
@@ -40,6 +40,7 @@
 from zope.interface import implementer
 from zope.interface import providedBy
 
+from Products.CMFCore.indexing import processQueue
 
 logger = logging.getLogger('Plone')
 
@@ -375,6 +376,7 @@ def _increment_counter(self):
 
     @security.private
     def getCounter(self):
+        processQueue()
         return self._counter is not None and self._counter() or 0
 
     @security.protected(SearchZCatalog)
@@ -388,6 +390,7 @@ def searchResults(self, REQUEST=None, **kw):
         # effectiveRange checking entirely even for those without portal
         # wide AccessInactivePortalContent permission.
 
+        processQueue()
         kw = kw.copy()
         show_inactive = kw.get('show_inactive', False)
         if isinstance(REQUEST, dict) and not show_inactive:
diff --git a/Products/CMFPlone/tests/testCatalogTool.py b/Products/CMFPlone/tests/testCatalogTool.py
index b65ef71..a3bb1ab 100644
--- a/Products/CMFPlone/tests/testCatalogTool.py
+++ b/Products/CMFPlone/tests/testCatalogTool.py
@@ -9,6 +9,7 @@
 from plone.uuid.interfaces import IAttributeUUID
 from plone.uuid.interfaces import IUUID
 from Products.CMFCore.permissions import AccessInactivePortalContent
+from Products.CMFCore.indexing import processQueue
 from Products.CMFPlone.CatalogTool import CatalogTool
 from Products.CMFPlone.CatalogTool import is_folderish
 from Products.CMFPlone.tests import dummy
@@ -154,6 +155,7 @@ def afterSetUp(self):
         self.folder.invokeFactory('Document', id='doc',
                                   title='Foo', description='Bar')
         self.catalog.unindexObject(self.folder.doc)
+        processQueue()
 
     def assertResults(self, result, expect):
         # Verifies ids of catalog results against expected ids
@@ -214,6 +216,7 @@ def testReindexObjectUpdatesMetadata(self):
     def testReindexObjectSkipsMetadata(self):
         # Reindexing should not update metadata when update_metadata=0
         self.catalog.indexObject(self.folder.doc)
+        processQueue()
         self.folder.doc.setTitle('Fred')
         self.folder.doc.setDescription('BamBam')
         self.catalog.reindexObject(self.folder.doc, update_metadata=0)
@@ -226,6 +229,7 @@ def testReindexObjectSkipsMetadata(self):
     def testReindexTitleOnly(self):
         # Reindexing should only index the Title
         self.catalog.indexObject(self.folder.doc)
+        processQueue()
         self.folder.doc.setTitle('Fred')
         self.folder.doc.setDescription('BamBam')
         self.catalog.reindexObject(self.folder.doc, idxs=['Title'])
@@ -249,6 +253,7 @@ def testReindexTitleOnlyUpdatesMetadata(self):
     def testReindexTitleOnlySkipsMetadata(self):
         # Reindexing Title should not update metadata when update_metadata=0
         self.catalog.indexObject(self.folder.doc)
+        processQueue()
         self.folder.doc.setTitle('Fred')
         self.folder.doc.setDescription('BamBam')
         self.catalog.reindexObject(self.folder.doc, idxs=['Title'],
@@ -267,6 +272,7 @@ def testIndexTitleOnly(self):
         # by searchResults()!?
         #
         self.catalog.indexObject(self.folder.doc, idxs=['Title'])
+        processQueue()
         # The document is cataloged
         path = self.catalog._CatalogTool__url(self.folder.doc)
         self.assertTrue(path in self.catalog._catalog.paths.values())
@@ -282,6 +288,7 @@ def testIndexIdOnly(self):
         # of index type.
         #
         self.catalog.indexObject(self.folder.doc, idxs=['getId'])
+        processQueue()
         # The document is cataloged
         path = self.catalog._CatalogTool__url(self.folder.doc)
         self.assertTrue(path in self.catalog._catalog.paths.values())


