Repository: five.intid


Branch: refs/heads/master
Date: 2019-05-13T16:00:51+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/five.intid/commit/e69796eaaa7a9c64aee3fc3acc4017e176c3eb70

Workaround to fix the path of moved objects

Files changed:
M five/intid/README.rst
M five/intid/intid.py
M five/intid/keyreference.py

b"diff --git a/five/intid/README.rst b/five/intid/README.rst\nindex f5914b7..c7ad47c 100644\n--- a/five/intid/README.rst\n+++ b/five/intid/README.rst\n@@ -150,6 +150,8 @@ Renaming an object should not break the rewrapping of the object:\n     >>> moved = intid.getObject(ob_id)\n     >>> moved\n     <SimpleContent at /test_folder_1_/mycont_new>\n+    >>> [x.path for x in intid.ids]\n+    ['/test_folder_1_/mycont_new']\n \n Nor should moving it:\n \n@@ -361,4 +363,3 @@ Creating items whith a circular containment\n     ...\n     TypeError: ('Could not adapt', <SimpleItem at c>,\n     <InterfaceClass zope.keyreference.interfaces.IKeyReference>)\n-\ndiff --git a/five/intid/intid.py b/five/intid/intid.py\nindex 768a364..1ada637 100644\n--- a/five/intid/intid.py\n+++ b/five/intid/intid.py\n@@ -154,6 +154,9 @@ def moveIntIdSubscriber(ob, event):\n     for utility in utilities:\n         try:\n             uid = utility.getId(ob)\n+            # XXX this is a temporary workaround\n+            utility.refs.pop(uid, None)\n+            utility.ids.pop(key, None)\n             utility.refs[uid] = key\n             utility.ids[key] = uid\n         except KeyError:\ndiff --git a/five/intid/keyreference.py b/five/intid/keyreference.py\nindex 57199a1..46e9f02 100644\n--- a/five/intid/keyreference.py\n+++ b/five/intid/keyreference.py\n@@ -132,11 +132,13 @@ def __call__(self):\n         return self.wrapped_object\n \n     def __hash__(self):\n+        # XXX Maybe we should consider to use also other fields for the hash\n         return hash((self.dbname,\n                      self.object._p_oid,\n                      ))\n \n     def __cmp__(self, other):\n+        # XXX This makes no sense on Python 3\n         if self.key_type_id == other.key_type_id:\n             return cmp((self.dbname, self.oid), (other.dbname, other.oid))\n         return cmp(self.key_type_id, other.key_type_id)\n"

Repository: five.intid


Branch: refs/heads/master
Date: 2019-05-13T16:13:53+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/five.intid/commit/c66e77c823413f343054e42d14bdc56dd416b31d

Add a towncrier entry

Files changed:
A news/8.fixed

b'diff --git a/news/8.fixed b/news/8.fixed\nnew file mode 100644\nindex 0000000..9fbed21\n--- /dev/null\n+++ b/news/8.fixed\n@@ -0,0 +1 @@\n+Properly update the persistent objects stored in the initid utility btrees [ale-rt]\n'

Repository: five.intid


Branch: refs/heads/master
Date: 2019-05-21T09:14:05+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/five.intid/commit/ad9f77fc3e779f85b0ca7ec15bd07fb6b8fb3233

Merge pull request #8 from plone/workaround-to-fix-moved-objects

Workaround to fix the path of moved objects

Files changed:
A news/8.fixed
M five/intid/README.rst
M five/intid/intid.py
M five/intid/keyreference.py

b"diff --git a/five/intid/README.rst b/five/intid/README.rst\nindex f5914b7..c7ad47c 100644\n--- a/five/intid/README.rst\n+++ b/five/intid/README.rst\n@@ -150,6 +150,8 @@ Renaming an object should not break the rewrapping of the object:\n     >>> moved = intid.getObject(ob_id)\n     >>> moved\n     <SimpleContent at /test_folder_1_/mycont_new>\n+    >>> [x.path for x in intid.ids]\n+    ['/test_folder_1_/mycont_new']\n \n Nor should moving it:\n \n@@ -361,4 +363,3 @@ Creating items whith a circular containment\n     ...\n     TypeError: ('Could not adapt', <SimpleItem at c>,\n     <InterfaceClass zope.keyreference.interfaces.IKeyReference>)\n-\ndiff --git a/five/intid/intid.py b/five/intid/intid.py\nindex 768a364..1ada637 100644\n--- a/five/intid/intid.py\n+++ b/five/intid/intid.py\n@@ -154,6 +154,9 @@ def moveIntIdSubscriber(ob, event):\n     for utility in utilities:\n         try:\n             uid = utility.getId(ob)\n+            # XXX this is a temporary workaround\n+            utility.refs.pop(uid, None)\n+            utility.ids.pop(key, None)\n             utility.refs[uid] = key\n             utility.ids[key] = uid\n         except KeyError:\ndiff --git a/five/intid/keyreference.py b/five/intid/keyreference.py\nindex 57199a1..46e9f02 100644\n--- a/five/intid/keyreference.py\n+++ b/five/intid/keyreference.py\n@@ -132,11 +132,13 @@ def __call__(self):\n         return self.wrapped_object\n \n     def __hash__(self):\n+        # XXX Maybe we should consider to use also other fields for the hash\n         return hash((self.dbname,\n                      self.object._p_oid,\n                      ))\n \n     def __cmp__(self, other):\n+        # XXX This makes no sense on Python 3\n         if self.key_type_id == other.key_type_id:\n             return cmp((self.dbname, self.oid), (other.dbname, other.oid))\n         return cmp(self.key_type_id, other.key_type_id)\ndiff --git a/news/8.fixed b/news/8.fixed\nnew file mode 100644\nindex 0000000..9fbed21\n--- /dev/null\n+++ b/news/8.fixed\n@@ -0,0 +1 @@\n+Properly update the persistent objects stored in the initid utility btrees [ale-rt]\n"

