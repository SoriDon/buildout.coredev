Repository: Products.CMFFormController


Branch: refs/heads/master
Date: 2018-03-21T22:23:16+01:00
Author: Ruda Porto Filgueiras (rudaporto) <rudazz@gmail.com>
Commit: https://github.com/plone/Products.CMFFormController/commit/3892f2c1315dae8bbe5de081526d11e599928035

Python 2 / 3 compatible imports.

Files changed:
M Products/CMFFormController/Actions/BaseFormAction.py
M Products/CMFFormController/Actions/TraverseTo.py
M Products/CMFFormController/Actions/TraverseToAction.py

diff --git a/Products/CMFFormController/Actions/BaseFormAction.py b/Products/CMFFormController/Actions/BaseFormAction.py
index f8d899a..e9ffd9f 100644
--- a/Products/CMFFormController/Actions/BaseFormAction.py
+++ b/Products/CMFFormController/Actions/BaseFormAction.py
@@ -19,6 +19,14 @@
     # Zope <=2.12
     from AccessControl.Role import RoleManager
 
+# python 2 / 3 compatibility
+import six
+
+if six.PY3:
+    from urlparse import parse as urlparse
+else:
+    import urlparse
+
 
 @implementer(IFormAction,)
 class BaseFormAction(RoleManager):
@@ -90,7 +98,6 @@ def getArg(self, controller_state):
     def combineArgs(self, url, kwargs):
         """Utility method that takes a URL, parses its existing query string,
         and combines the resulting dict with kwargs"""
-        import urlparse
         import cgi
 
         # parse the existing URL
@@ -124,9 +131,6 @@ def updateQuery(self, url, kwargs):
         url encodes
         and updates the query string using the values in kwargs"""
         d = self.combineArgs(url, kwargs)
-
-        import urlparse
-
         # parse the existing URL
         parsed_url = list(urlparse.urlparse(url))
 
diff --git a/Products/CMFFormController/Actions/TraverseTo.py b/Products/CMFFormController/Actions/TraverseTo.py
index 1892d44..2be279f 100644
--- a/Products/CMFFormController/Actions/TraverseTo.py
+++ b/Products/CMFFormController/Actions/TraverseTo.py
@@ -3,7 +3,15 @@
 from Products.CMFFormController.FormController import registerFormAction
 from ZPublisher.Publish import call_object, missing_name, dont_publish_class
 from ZPublisher.mapply import mapply
-import urlparse
+
+# python 2 / 3 compatibility
+import six
+
+if six.PY3:
+    from urlparse import parse as urlparse
+else:
+    import urlparse
+
 
 def factory(arg):
     """Create a new traverse-to action"""
diff --git a/Products/CMFFormController/Actions/TraverseToAction.py b/Products/CMFFormController/Actions/TraverseToAction.py
index 9c8eaa6..8696969 100644
--- a/Products/CMFFormController/Actions/TraverseToAction.py
+++ b/Products/CMFFormController/Actions/TraverseToAction.py
@@ -3,7 +3,15 @@
 
 from Products.CMFCore.utils import getToolByName
 from Products.CMFFormController.FormController import registerFormAction
-from urlparse import urlsplit
+
+# python 2 / 3 compatibility
+import six
+
+if six.PY3:
+    from urlparse.parse import urlsplit
+else:
+    from urlparse import urlsplit
+
 
 def factory(arg):
     """Create a new traverse-to-action action"""


Repository: Products.CMFFormController


Branch: refs/heads/master
Date: 2018-03-21T22:23:16+01:00
Author: Ruda Porto Filgueiras (rudaporto) <rudazz@gmail.com>
Commit: https://github.com/plone/Products.CMFFormController/commit/7513061d983b37b6e5198a14e7bf51df23a587dc

Fix six imports and also organize imports using sort.

Files changed:
M Products/CMFFormController/Actions/BaseFormAction.py
M Products/CMFFormController/Actions/TraverseTo.py
M Products/CMFFormController/Actions/TraverseToAction.py

diff --git a/Products/CMFFormController/Actions/BaseFormAction.py b/Products/CMFFormController/Actions/BaseFormAction.py
index e9ffd9f..c697207 100644
--- a/Products/CMFFormController/Actions/BaseFormAction.py
+++ b/Products/CMFFormController/Actions/BaseFormAction.py
@@ -1,16 +1,15 @@
-from zope.tales.tales import CompilerError
-from zope.interface import implementer
-
 from AccessControl import ClassSecurityInfo
 from Acquisition import aq_base, aq_parent, aq_inner
+from IFormAction import IFormAction
 from Products.CMFCore.Expression import Expression
-from Products.PageTemplates.Expressions import getEngine
-from Products.PageTemplates.Expressions import SecureModuleImporter
-
 from Products.CMFCore.utils import getToolByName
 from Products.CMFFormController.config import URL_ENCODING
 from Products.CMFFormController.utils import log
-from IFormAction import IFormAction
+from Products.PageTemplates.Expressions import SecureModuleImporter
+from Products.PageTemplates.Expressions import getEngine#
+from six.moves.urllib.parse import urlparse
+from zope.interface import implementer
+from zope.tales.tales import CompilerError
 from ZTUtils.Zope import make_query
 
 try:
@@ -19,14 +18,6 @@
     # Zope <=2.12
     from AccessControl.Role import RoleManager
 
-# python 2 / 3 compatibility
-import six
-
-if six.PY3:
-    from urlparse import parse as urlparse
-else:
-    import urlparse
-
 
 @implementer(IFormAction,)
 class BaseFormAction(RoleManager):
diff --git a/Products/CMFFormController/Actions/TraverseTo.py b/Products/CMFFormController/Actions/TraverseTo.py
index 2be279f..1b15f11 100644
--- a/Products/CMFFormController/Actions/TraverseTo.py
+++ b/Products/CMFFormController/Actions/TraverseTo.py
@@ -1,17 +1,9 @@
 from BaseFormAction import BaseFormAction
-
 from Products.CMFFormController.FormController import registerFormAction
+from six.moves.urllib.parse import urlparse
 from ZPublisher.Publish import call_object, missing_name, dont_publish_class
 from ZPublisher.mapply import mapply
 
-# python 2 / 3 compatibility
-import six
-
-if six.PY3:
-    from urlparse import parse as urlparse
-else:
-    import urlparse
-
 
 def factory(arg):
     """Create a new traverse-to action"""
diff --git a/Products/CMFFormController/Actions/TraverseToAction.py b/Products/CMFFormController/Actions/TraverseToAction.py
index 8696969..32b73df 100644
--- a/Products/CMFFormController/Actions/TraverseToAction.py
+++ b/Products/CMFFormController/Actions/TraverseToAction.py
@@ -1,16 +1,9 @@
 from BaseFormAction import BaseFormAction
-import TraverseTo
-
 from Products.CMFCore.utils import getToolByName
 from Products.CMFFormController.FormController import registerFormAction
+from six.moves.urllib.parse import urlsplit
 
-# python 2 / 3 compatibility
-import six
-
-if six.PY3:
-    from urlparse.parse import urlsplit
-else:
-    from urlparse import urlsplit
+import TraverseTo
 
 
 def factory(arg):


Repository: Products.CMFFormController


Branch: refs/heads/master
Date: 2018-03-21T22:23:16+01:00
Author: Ruda Porto Filgueiras (rudaporto) <rudazz@gmail.com>
Commit: https://github.com/plone/Products.CMFFormController/commit/8b8c1ca18901c139b7289616a70a2d22573d8f29

Updating CHANGELOG.

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 85842bc..f5a1802 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -21,6 +21,9 @@ Bug fixes:
 - Migrate breaking tests to plone.app.testing (Fix https://github.com/plone/Products.CMFPlone/issues/2195)
   [pbauer]
 
+- Fix imports to be compatible with python 2 and 3 using six
+  [rudaporto]
+
 
 3.1.3 (2016-09-07)
 ------------------


Repository: Products.CMFFormController


Branch: refs/heads/master
Date: 2018-03-21T22:23:16+01:00
Author: Davi Lima (davilima6) <davilima6@gmail.com>
Commit: https://github.com/plone/Products.CMFFormController/commit/0e39bcc1a6f3e536b821b9f5a909ac9f2f85aec7

Normalise changelog

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index f5a1802..7f08463 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -6,7 +6,8 @@ Changelog
 
 Breaking changes:
 
-- Always use __code__ and __defaults__, to match changes in CMFCore and publisher, like modern Python.
+- Always use __code__ and __defaults__, to match changes in CMFCore and
+  publisher, like modern Python.
   [MatthewWilkes]
 
 New features:
@@ -18,7 +19,8 @@ Bug fixes:
 - Fix import from Globals that was removed in Zope4
   [pbauer]
 
-- Migrate breaking tests to plone.app.testing (Fix https://github.com/plone/Products.CMFPlone/issues/2195)
+- Migrate breaking tests to plone.app.testing (Fix
+  https://github.com/plone/Products.CMFPlone/issues/2195)
   [pbauer]
 
 - Fix imports to be compatible with python 2 and 3 using six
@@ -34,13 +36,13 @@ Bug fixes:
   refuses to redirect to unknown external sites.  Added
   ``external_redirect_to`` action in case someone *does* need to
   redirect to an external site.  This option is also there in the
-  hotfix.  [maurits]
+  hotfix.
+  [maurits]
 
 
 3.1.2 (2016-08-31)
 ------------------
 
-
 Bug fixes:
 
 - Move patch from plone.protect 3.x to Actions.RedirectTo so it allows ATContentTypes add forms to append auth token.
@@ -62,7 +64,8 @@ Bug fixes:
 
 New:
 
-- Added uninstall profile.  Needs Products.GenericSetup 1.8.3.  [maurits]
+- Added uninstall profile. Needs Products.GenericSetup 1.8.3.
+  [maurits]
 
 
 3.0.6 (2016-04-09)
@@ -70,20 +73,23 @@ New:
 
 Fixes:
 
-- Minor package cleanup.  [maurits]
+- Minor package cleanup.
+  [maurits]
 
 
 3.0.5 (2015-06-05)
 ------------------
 
 - Additional check in BaseControllerPageTemplate when we try to delete an entry
-  from the request, that has already been deleted [cekk]
+  from the request, that has already been deleted
+  [cekk]
 
 
 3.0.4 (2015-03-08)
 ------------------
 
-- Reduce verbosity of _read_action_metadata and _read_validator_metadata when there are no default action or default validator assigned.
+- Reduce verbosity of _read_action_metadata and _read_validator_metadata when
+  there are no default action or default validator assigned.
   [ericof]
 
 - Ported to plone.app.testing
@@ -100,23 +106,27 @@ Fixes:
 - ControllerState.py: Don't use list as default parameter value.
   [kleist]
 
+
 3.0.2 - 2011-04-03
 ------------------
 
 - Update RoleManager imports to avoid deprecation warning on Zope 2.13.
   [davisagli]
 
+
 3.0.1 - 2010-10-27
 ------------------
 
 - Fixed template with chameleon incompatibility.
   [swampmonkey]
 
+
 3.0 - 2010-07-18
 ----------------
 
 - No changes.
 
+
 3.0a1 - 2009-11-13
 ------------------
 
@@ -143,12 +153,14 @@ Fixes:
 - Purged old Zope 2 Interface interfaces for Zope 2.12 compatibility.
   [elro]
 
+
 2.1.2 - 2008-03-26
 ------------------
 
 - Added metadata.xml to GenericSetup profile.
   [hannosch]
 
+
 2.1.1 - 2007-10-07
 ------------------
 
@@ -162,12 +174,14 @@ Fixes:
 - Made tests pass without Plone being installed.
   [hannosch]
 
+
 2.1 - 2007-08-09
 ----------------
 
 - No changes.
   [hannosch]
 
+
 2.1rc1 - 2007-07-09
 -------------------
 
@@ -175,6 +189,7 @@ Fixes:
   which is not available in utilities.
   [wichert]
 
+
 2.1b4 - 2007-05-05
 ------------------
 
@@ -182,12 +197,14 @@ Fixes:
   environments.
   [hannosch]
 
+
 2.1b3 - 2007-05-01
 ------------------
 
 - Back to getToolByName we go.
   [wichert]
 
+
 2.1b2 - 2007-03-23
 ------------------
 
@@ -202,6 +219,7 @@ Fixes:
 - Replaced getToolByName by getUtility calls.
   [hannosch]
 
+
 2.1b1 - 2007-03-05
 ------------------
 
@@ -215,6 +233,7 @@ Fixes:
 - Removed all occurrences of portal_status_message.
   [hannosch]
 
+
 2.0.7 - 2006-01-27
 ------------------
 
@@ -228,6 +247,7 @@ Fixes:
   button or any content-type.
   [deo]
 
+
 2.0.6 - 2006-11-04
 ------------------
 
@@ -237,6 +257,7 @@ Fixes:
 - Converted log functions to use the logging package instead of zLOG.
   [hannosch]
 
+
 2.0.5 - 2006-09-08
 ------------------
 
@@ -254,6 +275,7 @@ Fixes:
 - Cleaned up test infrastructure, removed custom testrunner.
   [hannosch]
 
+
 2.0.4 - 2006-06-17
 ------------------
 
@@ -261,6 +283,7 @@ Fixes:
   actual physical paths, which are necessary.
   [alecm]
 
+
 2.0.3 - 2006-06-09
 ------------------
 
@@ -269,6 +292,7 @@ Fixes:
   error prone.
   [alecm]
 
+
 2.0.2 - 2006-05-15
 ------------------
 
@@ -289,6 +313,7 @@ Fixes:
 - Update tests to comply with PloneTestCase 0.8 API.
   [hannosch]
 
+
 2.0.1 - 2006-03-28
 ------------------
 
@@ -304,6 +329,7 @@ Fixes:
 - Shut down DeprecationWarning for product_name of ToolInit.
   [hannosch]
 
+
 2.0 - 2006-02-25
 ----------------
 
@@ -327,6 +353,7 @@ Fixes:
   format_stx and expandPath
   [hannosch]
 
+
 1.0.7 - 2005-12-18
 ------------------
 
@@ -336,6 +363,7 @@ Fixes:
 - Made tests compatible with Zope 2.9 (transaction module)
   [hannosch]
 
+
 1.0.6 - 2005-10-09
 ------------------
 


Repository: Products.CMFFormController


Branch: refs/heads/master
Date: 2018-03-21T22:23:16+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFFormController/commit/d4e0f0d707219eb37b09e70b92ddad54c1088934

fix imports and syntax for python3

Files changed:
M Products/CMFFormController/Actions/BaseFormAction.py
M Products/CMFFormController/Actions/RedirectTo.py
M Products/CMFFormController/Actions/RedirectToAction.py
M Products/CMFFormController/Actions/TraverseTo.py
M Products/CMFFormController/Actions/TraverseToAction.py
M Products/CMFFormController/BaseControllerPageTemplate.py
M Products/CMFFormController/ControllerBase.py
M Products/CMFFormController/ControllerPageTemplate.py
M Products/CMFFormController/ControllerPageTemplateFile.py
M Products/CMFFormController/ControllerPythonScript.py
M Products/CMFFormController/ControllerState.py
M Products/CMFFormController/ControllerValidator.py
M Products/CMFFormController/FSControllerBase.py
M Products/CMFFormController/FSControllerPageTemplate.py
M Products/CMFFormController/FSControllerPythonScript.py
M Products/CMFFormController/FSControllerValidator.py
M Products/CMFFormController/FormAction.py
M Products/CMFFormController/FormController.py
M Products/CMFFormController/FormValidator.py
M Products/CMFFormController/Script.py
M Products/CMFFormController/__init__.py
M Products/CMFFormController/exportimport/__init__.py
M Products/CMFFormController/utils.py

diff --git a/Products/CMFFormController/Actions/BaseFormAction.py b/Products/CMFFormController/Actions/BaseFormAction.py
index c697207..92dadd2 100644
--- a/Products/CMFFormController/Actions/BaseFormAction.py
+++ b/Products/CMFFormController/Actions/BaseFormAction.py
@@ -1,17 +1,19 @@
+from .IFormAction import IFormAction
 from AccessControl import ClassSecurityInfo
 from Acquisition import aq_base, aq_parent, aq_inner
-from IFormAction import IFormAction
 from Products.CMFCore.Expression import Expression
 from Products.CMFCore.utils import getToolByName
 from Products.CMFFormController.config import URL_ENCODING
 from Products.CMFFormController.utils import log
+from Products.PageTemplates.Expressions import getEngine
 from Products.PageTemplates.Expressions import SecureModuleImporter
-from Products.PageTemplates.Expressions import getEngine#
 from six.moves.urllib.parse import urlparse
 from zope.interface import implementer
 from zope.tales.tales import CompilerError
 from ZTUtils.Zope import make_query
 
+import six
+
 try:
     from OFS.role import RoleManager
 except ImportError:
@@ -35,13 +37,11 @@ def __init__(self, arg=None):
             try:
                 self.expression = Expression(arg)
             except:
-                raise CompilerError, 'Bad action expression %s' % str(arg)
-
+                raise CompilerError('Bad action expression %s' % str(arg))
 
     def __call__(self, controller_state):
         raise NotImplementedError
 
-
     def getArg(self, controller_state):
         """Generate an expression context for the TALES expression used as
         the argument to the action and evaluate the expression."""
@@ -85,7 +85,6 @@ def getArg(self, controller_state):
         exprContext = getEngine().getContext(data)
         return self.expression(exprContext)
 
-
     def combineArgs(self, url, kwargs):
         """Utility method that takes a URL, parses its existing query string,
         and combines the resulting dict with kwargs"""
@@ -99,7 +98,7 @@ def combineArgs(self, url, kwargs):
         d = cgi.parse_qs(qs, 1)
         # update with stuff from kwargs
         for k, v in kwargs.items():
-            if isinstance(v, unicode):
+            if isinstance(v, six.text_type):
                 v = v.encode(URL_ENCODING)
             d[k] = [v] # put in a list to be consistent with parse_qs
         # parse_qs behaves a little unexpectedly -- all query string args
@@ -116,7 +115,6 @@ def combineArgs(self, url, kwargs):
                 dnew[k] = v
         return dnew
 
-
     def updateQuery(self, url, kwargs):
         """Utility method that takes a URL, parses its existing query string,
         url encodes
@@ -136,4 +134,3 @@ def updateQuery(self, url, kwargs):
         parsed_url[4] = make_query(**d)
         # rebuild the URL
         return urlparse.urlunparse(parsed_url)
-
diff --git a/Products/CMFFormController/Actions/RedirectTo.py b/Products/CMFFormController/Actions/RedirectTo.py
index e48bd1a..84a7ab3 100644
--- a/Products/CMFFormController/Actions/RedirectTo.py
+++ b/Products/CMFFormController/Actions/RedirectTo.py
@@ -1,8 +1,8 @@
-from BaseFormAction import BaseFormAction
+from .BaseFormAction import BaseFormAction
 from Products.CMFCore.utils import getToolByName
 from Products.CMFFormController.FormController import registerFormAction
-from urlparse import urljoin
-from urlparse import urlparse
+from six.moves.urllib.parse import urljoin
+from six.moves.urllib.parse import urlparse
 
 
 def factory(arg):
diff --git a/Products/CMFFormController/Actions/RedirectToAction.py b/Products/CMFFormController/Actions/RedirectToAction.py
index 27dc092..d04433f 100644
--- a/Products/CMFFormController/Actions/RedirectToAction.py
+++ b/Products/CMFFormController/Actions/RedirectToAction.py
@@ -1,8 +1,9 @@
-from BaseFormAction import BaseFormAction
-import RedirectTo
-
+from . import RedirectTo
+from .BaseFormAction import BaseFormAction
 from Products.CMFCore.utils import getToolByName
 from Products.CMFFormController.FormController import registerFormAction
+from six.moves import reduce
+
 
 def factory(arg):
     """Create a new redirect-to-action action"""
@@ -41,7 +42,7 @@ def __call__(self, controller_state):
 
         # (note: action_url may now be an emptry string, but still valid)
         if not haveAction:
-            raise ValueError, 'No %s action found for %s' % (action, controller_state.getContext().getId())
+            raise ValueError('No %s action found for %s' % (action, controller_state.getContext().getId()))
 
         # XXX: Is there a better way to check this?
         if not action_url.startswith('string:'):
diff --git a/Products/CMFFormController/Actions/TraverseTo.py b/Products/CMFFormController/Actions/TraverseTo.py
index 1b15f11..41a2daf 100644
--- a/Products/CMFFormController/Actions/TraverseTo.py
+++ b/Products/CMFFormController/Actions/TraverseTo.py
@@ -1,8 +1,8 @@
-from BaseFormAction import BaseFormAction
+from .BaseFormAction import BaseFormAction
 from Products.CMFFormController.FormController import registerFormAction
 from six.moves.urllib.parse import urlparse
-from ZPublisher.Publish import call_object, missing_name, dont_publish_class
 from ZPublisher.mapply import mapply
+from ZPublisher.WSGIPublisher import call_object, missing_name, dont_publish_class
 
 
 def factory(arg):
@@ -16,7 +16,7 @@ def __call__(self, controller_state):
         # see if this is a relative url or an absolute
         if len(urlparse.urlparse(url)[1]) != 0:
             # host specified, so url is absolute.  No good for traversal.
-            raise ValueError, 'Can\'t traverse to absolute url %s' % str(url)
+            raise ValueError('Can\'t traverse to absolute url %s' % str(url))
 
         url_path = urlparse.urlparse(url)[2]
         # combine args from query string with args from the controller state
@@ -32,7 +32,7 @@ def __call__(self, controller_state):
         context = controller_state.getContext()
         obj = context.restrictedTraverse(url_path, default=None)
         if obj is None:
-            raise ValueError, 'Unable to find %s\n' % str(url_path)
+            raise ValueError('Unable to find %s\n' % str(url_path))
         return mapply(obj, REQUEST.args, REQUEST,
                                call_object, 1, missing_name, dont_publish_class,
                                REQUEST, bind=1)
diff --git a/Products/CMFFormController/Actions/TraverseToAction.py b/Products/CMFFormController/Actions/TraverseToAction.py
index 32b73df..226df91 100644
--- a/Products/CMFFormController/Actions/TraverseToAction.py
+++ b/Products/CMFFormController/Actions/TraverseToAction.py
@@ -1,10 +1,10 @@
-from BaseFormAction import BaseFormAction
+from . import TraverseTo
+from .BaseFormAction import BaseFormAction
 from Products.CMFCore.utils import getToolByName
 from Products.CMFFormController.FormController import registerFormAction
+from six.moves import reduce
 from six.moves.urllib.parse import urlsplit
 
-import TraverseTo
-
 
 def factory(arg):
     """Create a new traverse-to-action action"""
@@ -54,7 +54,7 @@ def __call__(self, controller_state):
             else:
                 action_url = url_parts[2]
         else:
-            raise ValueError, 'No %s action found for %s' % (action, controller_state.getContext().getId())
+            raise ValueError('No %s action found for %s' % (action, controller_state.getContext().getId()))
 
         # If we have CMF 1.5, the actual action_url may be hidden behind a method
         # alias. Attempt to resolve this
diff --git a/Products/CMFFormController/BaseControllerPageTemplate.py b/Products/CMFFormController/BaseControllerPageTemplate.py
index 34fea5c..222a4c5 100644
--- a/Products/CMFFormController/BaseControllerPageTemplate.py
+++ b/Products/CMFFormController/BaseControllerPageTemplate.py
@@ -1,8 +1,9 @@
+from .ControllerBase import ControllerBase
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from Products.CMFCore.permissions import View
 from Products.CMFCore.utils import getToolByName
-from ControllerBase import ControllerBase
+
 
 class BaseControllerPageTemplate(ControllerBase):
 
diff --git a/Products/CMFFormController/ControllerBase.py b/Products/CMFFormController/ControllerBase.py
index 74dc733..13622a3 100644
--- a/Products/CMFFormController/ControllerBase.py
+++ b/Products/CMFFormController/ControllerBase.py
@@ -1,16 +1,17 @@
-import logging
-import os
+from .FormAction import FormAction, FormActionContainer
+from .FormValidator import FormValidator, FormValidatorContainer
+from .globalVars import ANY_CONTEXT, ANY_BUTTON
+from .utils import log
+from AccessControl import ClassSecurityInfo
 from Acquisition import aq_base, aq_inner
 from App.class_init import InitializeClass
-from AccessControl import ClassSecurityInfo
-from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+from Products.CMFCore.FSMetadata import FSMetadata, CMFConfigParser
 from Products.CMFCore.permissions import View, ManagePortal
 from Products.CMFCore.utils import getToolByName
-from Products.CMFCore.FSMetadata import FSMetadata, CMFConfigParser
-from FormAction import FormAction, FormActionContainer
-from FormValidator import FormValidator, FormValidatorContainer
-from globalVars import ANY_CONTEXT, ANY_BUTTON
-from utils import log
+from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+import logging
+import os
+
 
 class ControllerBase:
     """Common functions for objects controlled by portal_form_controller"""
@@ -225,8 +226,8 @@ def getNext(self, controller_state, REQUEST):
                     if next_action is None:
                         metadata_actions = [str(a) for a in self.actions.getFiltered(object_id=id)]
                         zmi_actions = [str(a) for a in controller.actions.getFiltered(object_id=id)]
-                        raise ValueError, 'No next action found for %s.%s.%s.%s\nMetadata actions:\n%s\n\nZMI actions:\n%s\n' % \
-                            (id, status, context_type, button, '\n'.join(metadata_actions), '\n'.join(zmi_actions))
+                        raise ValueError('No next action found for %s.%s.%s.%s\nMetadata actions:\n%s\n\nZMI actions:\n%s\n' %
+                                                (id, status, context_type, button, '\n'.join(metadata_actions), '\n'.join(zmi_actions)))
 
         REQUEST.set('controller_state', controller_state)
         return next_action.getAction()(controller_state)
@@ -299,7 +300,7 @@ def _read_action_metadata(self, id, filepath):
                 while len(component) < 4:
                     component.append('')
                 if component[0] != 'action':
-                    raise ValueError, '%s: Format for .metadata actions is action.STATUS.CONTEXT_TYPE.BUTTON = ACTION_TYPE:ACTION_ARG (not %s)' % (filepath, k)
+                    raise ValueError('%s: Format for .metadata actions is action.STATUS.CONTEXT_TYPE.BUTTON = ACTION_TYPE:ACTION_ARG (not %s)' % (filepath, k))
                 act = v.split(':',1)
                 while len(act) < 2:
                     act.append('')
@@ -308,7 +309,7 @@ def _read_action_metadata(self, id, filepath):
                 self.actions.set(FormAction(id, component[1], component[2], component[3], act[0], act[1]))
 
                 status_key = str(component[1])+'.'+str(context_type)
-                if _buttons_for_status.has_key(status_key):
+                if status_key in _buttons_for_status:
                     _buttons_for_status[status_key].append(component[3])
                 else:
                     _buttons_for_status[status_key] = [component[3]]
@@ -343,13 +344,13 @@ def _read_validator_metadata(self, id, filepath):
                 while len(component) < 3:
                     component.append('')
                 if component[0] != 'validators':
-                    raise ValueError, '%s: Format for .metadata validators is validators.CONTEXT_TYPE.BUTTON = LIST (not %s)' % (filepath, k)
+                    raise ValueError('%s: Format for .metadata validators is validators.CONTEXT_TYPE.BUTTON = LIST (not %s)' % (filepath, k))
 
                 context_type = component[1]
                 self.validators.set(FormValidator(id, component[1], component[2], v))
 
                 status_key = str(context_type)
-                if _buttons_for_status.has_key(status_key):
+                if status_key in _buttons_for_status:
                     _buttons_for_status[status_key].append(component[2])
                 else:
                     _buttons_for_status[status_key] = [component[2]]
diff --git a/Products/CMFFormController/ControllerPageTemplate.py b/Products/CMFFormController/ControllerPageTemplate.py
index 6008c4c..b57047d 100644
--- a/Products/CMFFormController/ControllerPageTemplate.py
+++ b/Products/CMFFormController/ControllerPageTemplate.py
@@ -1,15 +1,16 @@
-import os
+from .BaseControllerPageTemplate import BaseControllerPageTemplate
+from .FormAction import FormActionContainer
+from .FormValidator import FormValidatorContainer
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from App.Common import package_home
+from Products.CMFCore.permissions import View
 from Products.PageTemplates.PageTemplateFile import PageTemplateFile
 from Products.PageTemplates.ZopePageTemplate import ZopePageTemplate as BaseClass
-from Products.CMFCore.permissions import View
-from BaseControllerPageTemplate import BaseControllerPageTemplate
-from FormAction import FormActionContainer
-from FormValidator import FormValidatorContainer
+from six.moves.urllib.parse import quote
+
+import os
 
-from urllib import quote
 
 # ###########################################################################
 # Product registration and Add support
diff --git a/Products/CMFFormController/ControllerPageTemplateFile.py b/Products/CMFFormController/ControllerPageTemplateFile.py
index db2f4fc..07f8c88 100644
--- a/Products/CMFFormController/ControllerPageTemplateFile.py
+++ b/Products/CMFFormController/ControllerPageTemplateFile.py
@@ -15,15 +15,16 @@
    filesystem.
 """
 
-import os
 from AccessControl import ClassSecurityInfo
+from BaseControllerPageTemplate import BaseControllerPageTemplate
+from FSControllerBase import FSControllerBase
 from Products.CMFCore.permissions import View
 from Products.PageTemplates.PageTemplateFile import PageTemplateFile as BaseClass
 from Products.PageTemplates.TALES import CompilerError
-from BaseControllerPageTemplate import BaseControllerPageTemplate
-from FSControllerBase import FSControllerBase
 from utils import log, logException
 
+import os
+
 
 class ControllerPageTemplateFile(BaseClass, BaseControllerPageTemplate, FSControllerBase):
     """Wrapper for Controller Page Template"""
@@ -52,7 +53,7 @@ def __init__(self, filename, _prefix=None, **kw):
             self._read_action_metadata(self.getId(), self.filepath)
             self._read_validator_metadata(self.getId(), self.filepath)
             return retval
-        except (ValueError, CompilerError), e:
+        except (ValueError, CompilerError) as e:
             log(summary='metadata error', text='file = %s' % self.filepath)
             raise
 
diff --git a/Products/CMFFormController/ControllerPythonScript.py b/Products/CMFFormController/ControllerPythonScript.py
index 09cd9db..e930488 100644
--- a/Products/CMFFormController/ControllerPythonScript.py
+++ b/Products/CMFFormController/ControllerPythonScript.py
@@ -18,25 +18,26 @@
 Python code.
 """
 
-import os, re
+from .ControllerBase import ControllerBase
+from .ControllerState import ControllerState
+from .FormAction import FormActionContainer
+from .FormValidator import FormValidatorContainer
+from .interfaces import IControllerPythonScript
+from .Script import PythonScript as BaseClass
 from App.Common import package_home
-import AccessControl
-from OFS.SimpleItem import SimpleItem
-from urllib import quote
-from Shared.DC.Scripts.Script import BindingsUI
-from OFS.History import Historical
 from OFS.Cache import Cacheable
-from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+from OFS.History import Historical
+from OFS.SimpleItem import SimpleItem
 from Products.CMFCore.utils import getToolByName
-from Script import PythonScript as BaseClass
-from ControllerBase import ControllerBase
-from ControllerState import ControllerState
-from FormAction import FormActionContainer
-from FormValidator import FormValidatorContainer
-from interfaces import IControllerPythonScript
-
+from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+from Shared.DC.Scripts.Script import BindingsUI
+from six.moves.urllib.parse import quote
 from zope.interface import implementer
 
+import AccessControl
+import os
+import re
+
 # Track the Python bytecode version
 import imp
 Python_magic = imp.get_magic()
diff --git a/Products/CMFFormController/ControllerState.py b/Products/CMFFormController/ControllerState.py
index cfa4ac6..e34097a 100644
--- a/Products/CMFFormController/ControllerState.py
+++ b/Products/CMFFormController/ControllerState.py
@@ -1,8 +1,10 @@
+from .FormAction import FormAction
+from .globalVars import ANY_CONTEXT, ANY_BUTTON
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from Products.CMFCore.utils import getToolByName
-from FormAction import FormAction
-from globalVars import ANY_CONTEXT, ANY_BUTTON
+
+import six
 
 try:
     from OFS.role import RoleManager
@@ -129,7 +131,7 @@ def getErrors(self):
         err = {}
         for k,v in self.errors.items():
             # make allowances for old-style string errors
-            if isinstance(v, basestring):
+            if isinstance(v, six.string_types):
                 err[k] = v
             else:
                 err[k] = v[0]
@@ -140,7 +142,7 @@ def getI18NErrors(self):
         err = {}
         for k,v in self.errors.items():
             # make allowances for old-style string errors
-            if isinstance(v, basestring):
+            if isinstance(v, six.string_types):
                 err[k] = (v, None)
             else:
                 err[k] = v
@@ -152,7 +154,7 @@ def setErrors(self, errors):
         self.errors = {}
         # make allowances for old-style errors
         for k,v in errors.items():
-            if isinstance(v, basestring):
+            if isinstance(v, six.string_types):
                 self.errors[k] = (v, None)
             else:
                 self.errors[k] = v
@@ -212,7 +214,7 @@ def setNextAction(self, action):
                 args = None
         controller = getToolByName(self.getContext(), 'portal_form_controller')
         if not action_type in controller.validActionTypes():
-            raise KeyError, 'Unknown action type %s\n' % action_type
+            raise KeyError('Unknown action type %s\n' % action_type)
         self.next_action = FormAction(self.getId(), self.getStatus(), ANY_CONTEXT, ANY_BUTTON, action_type, args, controller)
 
     # indicate that a validator has been executed
@@ -221,7 +223,7 @@ def _addValidator(self, validator):
 
     # remove a validator from the list of already-executed validators
     def clearValidator(self, validator):
-        if self._validators.has_key(validator):
+        if validator in self._validators:
             del self._validators[validator]
 
     # clear the list of already-executed validators
@@ -235,7 +237,7 @@ def hasValidated(self, validators=None):
         elif not isinstance(validators, list):
             validators = [validators]
         for v in validators:
-            if not self._validators.has_key(v):
+            if not v in self._validators:
                 return 0
         return 1
 
diff --git a/Products/CMFFormController/ControllerValidator.py b/Products/CMFFormController/ControllerValidator.py
index 80db611..49a3945 100644
--- a/Products/CMFFormController/ControllerValidator.py
+++ b/Products/CMFFormController/ControllerValidator.py
@@ -18,22 +18,22 @@
 Python code.
 """
 
-import os
+from .ControllerBase import ControllerBase
+from .interfaces import IControllerValidator
+from .Script import PythonScript as BaseClass
 from App.Common import package_home
-import AccessControl
-from Products.PageTemplates.PageTemplateFile import PageTemplateFile
-from OFS.SimpleItem import SimpleItem
-from urllib import quote
-from Shared.DC.Scripts.Script import BindingsUI
-from OFS.History import Historical
 from OFS.Cache import Cacheable
+from OFS.History import Historical
+from OFS.SimpleItem import SimpleItem
 from Products.CMFCore.utils import getToolByName
-from Script import PythonScript as BaseClass
-from ControllerBase import ControllerBase
-from interfaces import IControllerValidator
-
+from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+from Shared.DC.Scripts.Script import BindingsUI
+from six.moves.urllib.parse import quote
 from zope.interface import implementer
 
+import AccessControl
+import os
+
 # Track the Python bytecode version
 import imp
 Python_magic = imp.get_magic()
diff --git a/Products/CMFFormController/FSControllerBase.py b/Products/CMFFormController/FSControllerBase.py
index de37115..8ae44aa 100644
--- a/Products/CMFFormController/FSControllerBase.py
+++ b/Products/CMFFormController/FSControllerBase.py
@@ -11,12 +11,14 @@
 #
 ##########################################################################
 
-import os
+from .ControllerBase import ControllerBase
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from App.config import getConfiguration
 from Products.CMFCore.FSMetadata import FSMetadata
-from ControllerBase import ControllerBase
+
+import os
+
 
 class FSControllerBase(ControllerBase):
     """Common functions for filesystem objects controlled by portal_form_controller"""
diff --git a/Products/CMFFormController/FSControllerPageTemplate.py b/Products/CMFFormController/FSControllerPageTemplate.py
index f0fdec7..73926a6 100644
--- a/Products/CMFFormController/FSControllerPageTemplate.py
+++ b/Products/CMFFormController/FSControllerPageTemplate.py
@@ -14,21 +14,22 @@
 """ Customizable validated page templates that come from the filesystem.
 """
 
-import copy
-from zope.tales.tales import CompilerError
-
-import Acquisition
-from App.class_init import InitializeClass
+from .BaseControllerPageTemplate import BaseControllerPageTemplate
+from .ControllerPageTemplate import ControllerPageTemplate
+from .FSControllerBase import FSControllerBase
+from .utils import log, logException
 from AccessControl import ClassSecurityInfo
+from App.class_init import InitializeClass
 from OFS.Cache import Cacheable
-from Products.PageTemplates.ZopePageTemplate import Src
 from Products.CMFCore.DirectoryView import registerFileExtension, registerMetaType
-from Products.CMFCore.permissions import View
 from Products.CMFCore.FSPageTemplate import FSPageTemplate as BaseClass
-from BaseControllerPageTemplate import BaseControllerPageTemplate
-from ControllerPageTemplate import ControllerPageTemplate
-from FSControllerBase import FSControllerBase
-from utils import log, logException
+from Products.CMFCore.permissions import View
+from Products.PageTemplates.ZopePageTemplate import Src
+from zope.tales.tales import CompilerError
+
+import Acquisition
+import copy
+
 
 class FSControllerPageTemplate(FSControllerBase, BaseClass, BaseControllerPageTemplate):
     """Wrapper for Controller Page Template"""
@@ -52,7 +53,7 @@ def __init__(self, id, filepath, fullname=None, properties=None):
         try:
             self._read_action_metadata(self.getId(), filepath)
             self._read_validator_metadata(self.getId(), filepath)
-        except (ValueError, CompilerError), e:
+        except (ValueError, CompilerError) as e:
             log(summary='metadata error', text='file = %s' % filepath)
             raise
 
diff --git a/Products/CMFFormController/FSControllerPythonScript.py b/Products/CMFFormController/FSControllerPythonScript.py
index cd322e4..61417e5 100644
--- a/Products/CMFFormController/FSControllerPythonScript.py
+++ b/Products/CMFFormController/FSControllerPythonScript.py
@@ -14,24 +14,24 @@
 """ Customizable controlled python scripts that come from the filesystem.
 """
 
-import copy
-from zope.tales.tales import CompilerError
-
-import Acquisition
+from .ControllerPythonScript import ControllerPythonScript
+from .ControllerState import ControllerState
+from .FSControllerBase import FSControllerBase
+from .interfaces import IControllerPythonScript
+from .Script import FSPythonScript as BaseClass
+from .utils import log, logException
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from OFS.Cache import Cacheable
 from Products.CMFCore.DirectoryView import registerFileExtension, registerMetaType
 from Products.CMFCore.permissions import View
 from Products.CMFCore.utils import getToolByName
-from Script import FSPythonScript as BaseClass
-from ControllerPythonScript import ControllerPythonScript
-from ControllerState import ControllerState
-from FSControllerBase import FSControllerBase
-from utils import log, logException
-from interfaces import IControllerPythonScript
-
 from zope.interface import implementer
+from zope.tales.tales import CompilerError
+
+import Acquisition
+import copy
+
 
 @implementer(IControllerPythonScript)
 class FSControllerPythonScript (FSControllerBase, BaseClass):
@@ -60,7 +60,7 @@ def __init__(self, id, filepath, fullname=None, properties=None):
         try:
             self._read_action_metadata(self.getId(), filepath)
             self._read_validator_metadata(self.getId(), self.filepath)
-        except (ValueError, CompilerError), e:
+        except (ValueError, CompilerError) as e:
             log(summary='metadata error', text='file = %s' % filepath)
             raise
 
diff --git a/Products/CMFFormController/FSControllerValidator.py b/Products/CMFFormController/FSControllerValidator.py
index 205ddd4..09f2abc 100644
--- a/Products/CMFFormController/FSControllerValidator.py
+++ b/Products/CMFFormController/FSControllerValidator.py
@@ -14,20 +14,20 @@
 """ Customizable controlled python scripts that come from the filesystem.
 """
 
+from .ControllerBase import ControllerBase
+from .ControllerValidator import ControllerValidator
+from .interfaces import IControllerValidator
+from .Script import FSPythonScript as BaseClass
+from .utils import logException
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from OFS.Cache import Cacheable
 from Products.CMFCore.DirectoryView import registerFileExtension, registerMetaType
 from Products.CMFCore.permissions import View
 from Products.CMFCore.utils import getToolByName
-from Script import FSPythonScript as BaseClass
-from ControllerValidator import ControllerValidator
-from ControllerBase import ControllerBase
-from utils import logException
-from interfaces import IControllerValidator
-
 from zope.interface import implementer
 
+
 @implementer(IControllerValidator)
 class FSControllerValidator (BaseClass, ControllerBase):
     """FSControllerValidators act like Controller Python Scripts but are not
diff --git a/Products/CMFFormController/FormAction.py b/Products/CMFFormController/FormAction.py
index d0d8777..d06eb87 100644
--- a/Products/CMFFormController/FormAction.py
+++ b/Products/CMFFormController/FormAction.py
@@ -1,13 +1,14 @@
+from .globalVars import ANY_CONTEXT, ANY_BUTTON
+from .Key import Key
 from AccessControl import ClassSecurityInfo
+from Acquisition import aq_base
 from App.class_init import InitializeClass
 from OFS.SimpleItem import SimpleItem
 from Products.CMFCore.utils import getToolByName
-from Key import Key
-from globalVars import ANY_CONTEXT, ANY_BUTTON
-from Acquisition import aq_base
 
 _marker = []
 
+
 class FormActionType(SimpleItem):
 
     security = ClassSecurityInfo()
@@ -40,11 +41,11 @@ def __init__(self, object_id, status, context_type, button, controller=None):
         if controller:
             s = controller._checkId(object_id)
             if s:
-                raise ValueError, 'Illegal template id: %s' % s
+                raise ValueError('Illegal template id: %s' % s)
 
         status = status.strip()
         if not status:
-            raise ValueError, 'Illegal status %s' % (status)
+            raise ValueError('Illegal status %s' % (status))
 
         if not context_type:
             context_type = ANY_CONTEXT
@@ -85,8 +86,8 @@ def __init__(self, object_id, status, context_type, button,
         self.action_type = action_type
         self.action_arg = action_arg
 
-        if not form_action_types.has_key(action_type):
-            raise ValueError, 'Illegal action type %s for %s' % (action_type, object_id)
+        if not action_type in form_action_types:
+            raise ValueError('Illegal action type %s for %s' % (action_type, object_id))
         if action_arg is not None:
             action_arg = action_arg.strip()
         self.action = form_action_types[action_type].getFactory()(action_arg)
diff --git a/Products/CMFFormController/FormController.py b/Products/CMFFormController/FormController.py
index 638497f..49ed718 100644
--- a/Products/CMFFormController/FormController.py
+++ b/Products/CMFFormController/FormController.py
@@ -1,28 +1,31 @@
 from __future__ import nested_scopes
-import os
-from zope.interface import implementer
-from zope.structuredtext import stx2html
 
+from .FormAction import FormActionType, FormActionKey, FormAction, FormActionContainer
+from .FormValidator import FormValidatorKey, FormValidator, FormValidatorContainer
+from .ValidationError import ValidationError
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from App.Common import package_home
 from OFS.ObjectManager import bad_id
-from ZPublisher.Publish import call_object, missing_name, dont_publish_class
-from ZPublisher.mapply import mapply
-from Products.CMFFormController import GLOBALS as fc_globals
-from Products.CMFCore.utils import getToolByName, UniqueObject, SimpleItemWithProperties
 from Products.CMFCore.permissions import ManagePortal
-from Products.PageTemplates.PageTemplateFile import PageTemplateFile
-
+from Products.CMFCore.utils import getToolByName, UniqueObject, SimpleItemWithProperties
+from Products.CMFFormController import GLOBALS as fc_globals
 from Products.CMFFormController.ControllerState import ControllerState
 from Products.CMFFormController.interfaces import IFormControllerTool
-from FormAction import FormActionType, FormActionKey, FormAction, FormActionContainer
-from FormValidator import FormValidatorKey, FormValidator, FormValidatorContainer
-from ValidationError import ValidationError
+from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+from zope.interface import implementer
+from zope.structuredtext import stx2html
+from ZPublisher.mapply import mapply
+from ZPublisher.WSGIPublisher import call_object
+from ZPublisher.WSGIPublisher import dont_publish_class
+from ZPublisher.WSGIPublisher import missing_name
+
+import os
 
 _marker = []
 form_action_types = {}
 
+
 def registerFormAction(id, factory, description=''):
     form_action_types[id] = FormActionType(id, factory, description)
 
@@ -330,14 +333,14 @@ def getState(self, obj, is_validator):
             controller_state.set(id=id, context=obj.__parent__)
         else:
             if controller_state is None:
-                raise ValueError, 'No controller state available.  ' + \
+                raise ValueError('No controller state available.  ' + \
                     'This commonly occurs when a ControllerValidator (.vpy) ' + \
                     'script is invoked via the validation mechanism in the ' + \
                     'portal_form tool.  If you are using a package designed to ' + \
                     'be used with portal_form, you are probably inadvertently ' + \
                     'invoking a validator designed for use with CMFFormController (e.g. validate_id).  ' + \
                     'If you are using a package designed to be used with CMFFormController, you probably ' + \
-                    'have a "portal_form" in your URL that needs to be removed.'
+                    'have a "portal_form" in your URL that needs to be removed.')
         controller_state._setValidating(is_validator)
         # Pass environment along, with care so we don't override
         # existing variables.
@@ -374,28 +377,28 @@ def validate(self, controller_state, REQUEST, validators, argdict=None):
                 # make sure validator exists
                 obj = context.restrictedTraverse(v, default=None)
                 if obj is None:
-                    raise ValueError, 'Unable to find validator %s\n' % str(v)
+                    raise ValueError('Unable to find validator %s\n' % str(v))
                 if not getattr(obj, 'is_validator', 1):
-                    raise ValueError, '%s is not a CMFFormController validator' % str(v)
+                    raise ValueError('%s is not a CMFFormController validator' % str(v))
                 REQUEST = controller_state.getContext().REQUEST
                 controller_state = mapply(obj, args, kwargs,
                                           call_object, 1, missing_name, dont_publish_class,
                                           REQUEST, bind=1)
                 if controller_state is None or getattr(controller_state, '__class__', None) != ControllerState:
-                    raise ValueError, 'Validator %s did not return the state object' % str(v)
+                    raise ValueError('Validator %s did not return the state object' % str(v))
                 controller_state._addValidator(v)
-            except ValidationError, e:
+            except ValidationError as e:
                 # if a validator raises a ValidatorException, execution of
                 # validators is halted and the controller_state is set to
                 # the controller_state embedded in the exception
                 controller_state = e.controller_state
                 state_class = getattr(controller_state, '__class__', None)
                 if state_class != ControllerState:
-                    raise Exception, 'Bad ValidationError state (type = %s)' % str(state_class)
+                    raise Exception('Bad ValidationError state (type = %s)' % str(state_class))
                 break
             state_class = getattr(controller_state, '__class__', None)
             if state_class != ControllerState:
-                raise Exception, 'Bad validator return type from validator %s (%s)' % (str(v), str(state_class))
+                raise Exception('Bad validator return type from validator %s (%s)' % (str(v), str(state_class)))
             REQUEST.set('controller_state', controller_state)
 
         REQUEST.set('controller_state', controller_state)
@@ -443,9 +446,9 @@ def fn(obj, dict):
         catalog = getToolByName(self, 'portal_catalog')
         result = catalog.ZopeFindAndApply(portal, obj_metatypes=meta_types, search_sub=1, result=[])
         for (path, r) in result:
-            if action_dict.has_key(r.getId()):
+            if r.getId() in action_dict:
                 del action_dict[r.getId()]
-            if validator_dict.has_key(r.getId()):
+            if r.getId() in validator_dict:
                 del validator_dict[r.getId()]
 
         n_actions = 0
diff --git a/Products/CMFFormController/FormValidator.py b/Products/CMFFormController/FormValidator.py
index b7fc1a6..91a2c31 100644
--- a/Products/CMFFormController/FormValidator.py
+++ b/Products/CMFFormController/FormValidator.py
@@ -1,13 +1,16 @@
+from .globalVars import ANY_CONTEXT, ANY_BUTTON
+from .Key import Key
 from AccessControl import ClassSecurityInfo
+from Acquisition import aq_base
 from App.class_init import InitializeClass
 from OFS.SimpleItem import SimpleItem
 from Products.CMFCore.utils import getToolByName
-from Key import Key
-from globalVars import ANY_CONTEXT, ANY_BUTTON
-from Acquisition import aq_base
+
+import six
 
 _marker = []
 
+
 class FormValidatorKey(Key):
 
     security = ClassSecurityInfo()
@@ -20,7 +23,7 @@ def __init__(self, object_id, context_type, button, controller=None):
             for p in path_elements:
                 s = controller._checkId(p)
                 if s:
-                    raise ValueError, 'Illegal template id: %s' % s
+                    raise ValueError('Illegal template id: %s' % s)
 
         if not context_type:
             context_type = ANY_CONTEXT
@@ -52,7 +55,7 @@ class FormValidator(SimpleItem):
     def __init__(self, object_id, context_type, button, validators, controller=None):
         self.key = FormValidatorKey(object_id, context_type, button, controller)
 
-        if isinstance(validators, basestring):
+        if isinstance(validators, six.string_types):
             validators = validators.split(',')
         validators = [v.strip() for v in validators if v]
         if controller:
@@ -61,7 +64,7 @@ def __init__(self, object_id, context_type, button, validators, controller=None)
                 for p in path_elements:
                     s = controller._checkId(p)
                     if s:
-                        raise ValueError, 'Illegal template id: %s' % s
+                        raise ValueError('Illegal template id: %s' % s)
         self.validators = validators
 
     def __copy__(self):
diff --git a/Products/CMFFormController/Script.py b/Products/CMFFormController/Script.py
index 0b75acf..779e331 100644
--- a/Products/CMFFormController/Script.py
+++ b/Products/CMFFormController/Script.py
@@ -12,15 +12,15 @@
 # THIS FILE CONTAINS MODIFIED CODE FROM ZOPE 2.6.2
 ##############################################################################
 
-import logging
-import re
-
 from App.class_init import InitializeClass
-from Shared.DC.Scripts.Bindings import NameAssignments as BaseNameAssignments
-from Products.PythonScripts.PythonScript import PythonScript as BasePythonScript
 from Products.CMFCore.FSPythonScript import FSPythonScript as BaseFSPythonScript
+from Products.PythonScripts.PythonScript import PythonScript as BasePythonScript
+from Shared.DC.Scripts.Bindings import NameAssignments as BaseNameAssignments
 from ZODB.POSException import ConflictError
 
+import logging
+import re
+
 logger = logging.getLogger('CMFFormController')
 
 defaultBindings = {'name_context': 'context',
@@ -99,7 +99,7 @@ def write(self, text):
                 k, v = line[2:].split('=', 1)
                 k = k.strip().lower()
                 v = v.strip()
-                if not mdata.has_key(k):
+                if not k in mdata:
                     raise SyntaxError('Unrecognized header line "%s" in file %s' % (line, self._filepath))
                 if v == mdata[k]:
                     # Unchanged value
diff --git a/Products/CMFFormController/__init__.py b/Products/CMFFormController/__init__.py
index 5577eec..1f4a4c2 100644
--- a/Products/CMFFormController/__init__.py
+++ b/Products/CMFFormController/__init__.py
@@ -2,12 +2,12 @@
 
 from Products.CMFCore.utils import registerIcon, ToolInit
 
-from config import *
-import ControllerPageTemplate, FSControllerPageTemplate
-import ControllerPythonScript, FSControllerPythonScript
-import ControllerValidator, FSControllerValidator
-import FormController
-from Actions import RedirectTo, TraverseTo, RedirectToAction, TraverseToAction
+from .config import *
+from . import ControllerPageTemplate, FSControllerPageTemplate
+from . import ControllerPythonScript, FSControllerPythonScript
+from . import ControllerValidator, FSControllerValidator
+from . import FormController
+from .Actions import RedirectTo, TraverseTo, RedirectToAction, TraverseToAction
 
 GLOBALS = globals()
 
diff --git a/Products/CMFFormController/exportimport/__init__.py b/Products/CMFFormController/exportimport/__init__.py
index aea57b6..1a0ce99 100644
--- a/Products/CMFFormController/exportimport/__init__.py
+++ b/Products/CMFFormController/exportimport/__init__.py
@@ -1,5 +1,5 @@
 # XXX refactor the form controller from CMFSetup-style to GenericSetup
-from formcontroller import importCMFFormController
-from formcontroller import exportCMFFormController
-from formcontroller import CMFFormControllerExportConfigurator
-from formcontroller import CMFFormControllerImportConfigurator
+from .formcontroller import importCMFFormController
+from .formcontroller import exportCMFFormController
+from .formcontroller import CMFFormControllerExportConfigurator
+from .formcontroller import CMFFormControllerImportConfigurator
diff --git a/Products/CMFFormController/utils.py b/Products/CMFFormController/utils.py
index a354b24..ba4e689 100644
--- a/Products/CMFFormController/utils.py
+++ b/Products/CMFFormController/utils.py
@@ -1,12 +1,15 @@
 import logging
+import six
 import sys
 import traceback
 
 logger = logging.getLogger('CMFFormController')
 
+
 def log(summary='', text='', log_level=logging.INFO):
     logger.log(log_level, '%s \n%s' % (summary, text))
 
+
 # Enable scripts to get the string value of an exception
 # even if the thrown exception is a string and not a
 # subclass of Exception.
@@ -15,10 +18,11 @@ def exceptionString():
                             # (otherwise will generate a circular reference)
     if s[0] == None:
         return None
-    if isinstance(s[0], basestring):
+    if isinstance(s[0], six.string_types):
         return s[0]
     return str(s[1])
 
+
 # provide a way of dumping an exception to the log even if we
 # catch it and otherwise ignore it
 def logException():


Repository: Products.CMFFormController


Branch: refs/heads/master
Date: 2018-03-21T22:23:16+01:00
Author: Davi Lima (davilima6) <davilima6@gmail.com>
Commit: https://github.com/plone/Products.CMFFormController/commit/1563f9932f1a25c59a6285c496ad0c935781a6e2

More Python 2 / 3 compatibility adjustments

Files changed:
M Products/CMFFormController/ControllerState.py

diff --git a/Products/CMFFormController/ControllerState.py b/Products/CMFFormController/ControllerState.py
index e34097a..656466e 100644
--- a/Products/CMFFormController/ControllerState.py
+++ b/Products/CMFFormController/ControllerState.py
@@ -59,22 +59,22 @@ def __init__(self, id=None, context=None, button=None, status='success', \
 
     def set(self, **kwargs):
         """Set state object properties"""
-        if kwargs.has_key('id'):
+        if 'id' in kwargs:
             self.setId(kwargs['id'])
             del kwargs['id']
-        if kwargs.has_key('button'):
+        if 'button' in kwargs:
             self.setButton(kwargs['button'])
             del kwargs['button']
-        if kwargs.has_key('status'):
+        if 'status' in kwargs:
             self.setStatus(kwargs['status'])
             del kwargs['status']
-        if kwargs.has_key('errors'):
+        if 'errors' in kwargs:
             self.setErrors(kwargs['errors'])
             del kwargs['errors']
-        if kwargs.has_key('context'):
+        if 'context' in kwargs:
             self.setContext(kwargs['context'])
             del kwargs['context']
-        if kwargs.has_key('next_action'):
+        if 'next_action' in kwargs:
             self.setNextAction(kwargs['next_action'])
             del kwargs['next_action']
         self.kwargs.update(kwargs)


Repository: Products.CMFFormController


Branch: refs/heads/master
Date: 2018-03-21T22:23:24+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFFormController/commit/def5a4a56df4949a826c7b84361570d06c42a487

fix relative import

Files changed:
M Products/CMFFormController/FormAction.py

diff --git a/Products/CMFFormController/FormAction.py b/Products/CMFFormController/FormAction.py
index d06eb87..0549b46 100644
--- a/Products/CMFFormController/FormAction.py
+++ b/Products/CMFFormController/FormAction.py
@@ -79,7 +79,7 @@ class FormAction(SimpleItem):
 
     def __init__(self, object_id, status, context_type, button,
                  action_type, action_arg, controller=None):
-        from FormController import form_action_types
+        from .FormController import form_action_types
 
         self.key = FormActionKey(object_id, status, context_type, button,
                                  controller)


Repository: Products.CMFFormController


Branch: refs/heads/master
Date: 2018-03-31T00:23:53+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFFormController/commit/06442d954d9e36747bdec34e8f9252e2917f0540

fix more imports

Files changed:
M Products/CMFFormController/Actions/BaseFormAction.py
M Products/CMFFormController/Actions/TraverseTo.py

diff --git a/Products/CMFFormController/Actions/BaseFormAction.py b/Products/CMFFormController/Actions/BaseFormAction.py
index 92dadd2..3595fe7 100644
--- a/Products/CMFFormController/Actions/BaseFormAction.py
+++ b/Products/CMFFormController/Actions/BaseFormAction.py
@@ -8,6 +8,7 @@
 from Products.PageTemplates.Expressions import getEngine
 from Products.PageTemplates.Expressions import SecureModuleImporter
 from six.moves.urllib.parse import urlparse
+from six.moves.urllib.parse import urlunparse
 from zope.interface import implementer
 from zope.tales.tales import CompilerError
 from ZTUtils.Zope import make_query
@@ -91,7 +92,7 @@ def combineArgs(self, url, kwargs):
         import cgi
 
         # parse the existing URL
-        parsed_url = list(urlparse.urlparse(url))
+        parsed_url = list(urlparse(url))
         # get the existing query string
         qs = parsed_url[4]
         # parse the query into a dict
@@ -100,7 +101,7 @@ def combineArgs(self, url, kwargs):
         for k, v in kwargs.items():
             if isinstance(v, six.text_type):
                 v = v.encode(URL_ENCODING)
-            d[k] = [v] # put in a list to be consistent with parse_qs
+            d[k] = [v]  # put in a list to be consistent with parse_qs
         # parse_qs behaves a little unexpectedly -- all query string args
         # are represented as lists.  I think the reason is so that you get
         # consistent behavior for things like http://myurl?a=1&a=2&a=3
@@ -121,7 +122,7 @@ def updateQuery(self, url, kwargs):
         and updates the query string using the values in kwargs"""
         d = self.combineArgs(url, kwargs)
         # parse the existing URL
-        parsed_url = list(urlparse.urlparse(url))
+        parsed_url = list(urlparse(url))
 
         # re-encode the string
         # We use ZTUtils.make_query here because it
@@ -133,4 +134,4 @@ def updateQuery(self, url, kwargs):
         # destination urls.
         parsed_url[4] = make_query(**d)
         # rebuild the URL
-        return urlparse.urlunparse(parsed_url)
+        return urlunparse(parsed_url)
diff --git a/Products/CMFFormController/Actions/TraverseTo.py b/Products/CMFFormController/Actions/TraverseTo.py
index 41a2daf..d482f91 100644
--- a/Products/CMFFormController/Actions/TraverseTo.py
+++ b/Products/CMFFormController/Actions/TraverseTo.py
@@ -14,11 +14,11 @@ class TraverseTo(BaseFormAction):
     def __call__(self, controller_state):
         url = self.getArg(controller_state)
         # see if this is a relative url or an absolute
-        if len(urlparse.urlparse(url)[1]) != 0:
+        if len(urlparse(url)[1]) != 0:
             # host specified, so url is absolute.  No good for traversal.
             raise ValueError('Can\'t traverse to absolute url %s' % str(url))
 
-        url_path = urlparse.urlparse(url)[2]
+        url_path = urlparse(url)[2]
         # combine args from query string with args from the controller state
         # (args in the state supercede those in the query string)
         args = self.combineArgs(url, controller_state.kwargs)


Repository: Products.CMFFormController


Branch: refs/heads/master
Date: 2018-05-06T11:29:02+02:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/Products.CMFFormController/commit/b33105de7889493757452eb52927f1fea1ce6d39

Merge pull request #13 from plone/py3_imports

Python 2 / 3 compatible imports.

Files changed:
M CHANGES.rst
M Products/CMFFormController/Actions/BaseFormAction.py
M Products/CMFFormController/Actions/RedirectTo.py
M Products/CMFFormController/Actions/RedirectToAction.py
M Products/CMFFormController/Actions/TraverseTo.py
M Products/CMFFormController/Actions/TraverseToAction.py
M Products/CMFFormController/BaseControllerPageTemplate.py
M Products/CMFFormController/ControllerBase.py
M Products/CMFFormController/ControllerPageTemplate.py
M Products/CMFFormController/ControllerPageTemplateFile.py
M Products/CMFFormController/ControllerPythonScript.py
M Products/CMFFormController/ControllerState.py
M Products/CMFFormController/ControllerValidator.py
M Products/CMFFormController/FSControllerBase.py
M Products/CMFFormController/FSControllerPageTemplate.py
M Products/CMFFormController/FSControllerPythonScript.py
M Products/CMFFormController/FSControllerValidator.py
M Products/CMFFormController/FormAction.py
M Products/CMFFormController/FormController.py
M Products/CMFFormController/FormValidator.py
M Products/CMFFormController/Script.py
M Products/CMFFormController/__init__.py
M Products/CMFFormController/exportimport/__init__.py
M Products/CMFFormController/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 85842bc..7f08463 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -6,7 +6,8 @@ Changelog
 
 Breaking changes:
 
-- Always use __code__ and __defaults__, to match changes in CMFCore and publisher, like modern Python.
+- Always use __code__ and __defaults__, to match changes in CMFCore and
+  publisher, like modern Python.
   [MatthewWilkes]
 
 New features:
@@ -18,9 +19,13 @@ Bug fixes:
 - Fix import from Globals that was removed in Zope4
   [pbauer]
 
-- Migrate breaking tests to plone.app.testing (Fix https://github.com/plone/Products.CMFPlone/issues/2195)
+- Migrate breaking tests to plone.app.testing (Fix
+  https://github.com/plone/Products.CMFPlone/issues/2195)
   [pbauer]
 
+- Fix imports to be compatible with python 2 and 3 using six
+  [rudaporto]
+
 
 3.1.3 (2016-09-07)
 ------------------
@@ -31,13 +36,13 @@ Bug fixes:
   refuses to redirect to unknown external sites.  Added
   ``external_redirect_to`` action in case someone *does* need to
   redirect to an external site.  This option is also there in the
-  hotfix.  [maurits]
+  hotfix.
+  [maurits]
 
 
 3.1.2 (2016-08-31)
 ------------------
 
-
 Bug fixes:
 
 - Move patch from plone.protect 3.x to Actions.RedirectTo so it allows ATContentTypes add forms to append auth token.
@@ -59,7 +64,8 @@ Bug fixes:
 
 New:
 
-- Added uninstall profile.  Needs Products.GenericSetup 1.8.3.  [maurits]
+- Added uninstall profile. Needs Products.GenericSetup 1.8.3.
+  [maurits]
 
 
 3.0.6 (2016-04-09)
@@ -67,20 +73,23 @@ New:
 
 Fixes:
 
-- Minor package cleanup.  [maurits]
+- Minor package cleanup.
+  [maurits]
 
 
 3.0.5 (2015-06-05)
 ------------------
 
 - Additional check in BaseControllerPageTemplate when we try to delete an entry
-  from the request, that has already been deleted [cekk]
+  from the request, that has already been deleted
+  [cekk]
 
 
 3.0.4 (2015-03-08)
 ------------------
 
-- Reduce verbosity of _read_action_metadata and _read_validator_metadata when there are no default action or default validator assigned.
+- Reduce verbosity of _read_action_metadata and _read_validator_metadata when
+  there are no default action or default validator assigned.
   [ericof]
 
 - Ported to plone.app.testing
@@ -97,23 +106,27 @@ Fixes:
 - ControllerState.py: Don't use list as default parameter value.
   [kleist]
 
+
 3.0.2 - 2011-04-03
 ------------------
 
 - Update RoleManager imports to avoid deprecation warning on Zope 2.13.
   [davisagli]
 
+
 3.0.1 - 2010-10-27
 ------------------
 
 - Fixed template with chameleon incompatibility.
   [swampmonkey]
 
+
 3.0 - 2010-07-18
 ----------------
 
 - No changes.
 
+
 3.0a1 - 2009-11-13
 ------------------
 
@@ -140,12 +153,14 @@ Fixes:
 - Purged old Zope 2 Interface interfaces for Zope 2.12 compatibility.
   [elro]
 
+
 2.1.2 - 2008-03-26
 ------------------
 
 - Added metadata.xml to GenericSetup profile.
   [hannosch]
 
+
 2.1.1 - 2007-10-07
 ------------------
 
@@ -159,12 +174,14 @@ Fixes:
 - Made tests pass without Plone being installed.
   [hannosch]
 
+
 2.1 - 2007-08-09
 ----------------
 
 - No changes.
   [hannosch]
 
+
 2.1rc1 - 2007-07-09
 -------------------
 
@@ -172,6 +189,7 @@ Fixes:
   which is not available in utilities.
   [wichert]
 
+
 2.1b4 - 2007-05-05
 ------------------
 
@@ -179,12 +197,14 @@ Fixes:
   environments.
   [hannosch]
 
+
 2.1b3 - 2007-05-01
 ------------------
 
 - Back to getToolByName we go.
   [wichert]
 
+
 2.1b2 - 2007-03-23
 ------------------
 
@@ -199,6 +219,7 @@ Fixes:
 - Replaced getToolByName by getUtility calls.
   [hannosch]
 
+
 2.1b1 - 2007-03-05
 ------------------
 
@@ -212,6 +233,7 @@ Fixes:
 - Removed all occurrences of portal_status_message.
   [hannosch]
 
+
 2.0.7 - 2006-01-27
 ------------------
 
@@ -225,6 +247,7 @@ Fixes:
   button or any content-type.
   [deo]
 
+
 2.0.6 - 2006-11-04
 ------------------
 
@@ -234,6 +257,7 @@ Fixes:
 - Converted log functions to use the logging package instead of zLOG.
   [hannosch]
 
+
 2.0.5 - 2006-09-08
 ------------------
 
@@ -251,6 +275,7 @@ Fixes:
 - Cleaned up test infrastructure, removed custom testrunner.
   [hannosch]
 
+
 2.0.4 - 2006-06-17
 ------------------
 
@@ -258,6 +283,7 @@ Fixes:
   actual physical paths, which are necessary.
   [alecm]
 
+
 2.0.3 - 2006-06-09
 ------------------
 
@@ -266,6 +292,7 @@ Fixes:
   error prone.
   [alecm]
 
+
 2.0.2 - 2006-05-15
 ------------------
 
@@ -286,6 +313,7 @@ Fixes:
 - Update tests to comply with PloneTestCase 0.8 API.
   [hannosch]
 
+
 2.0.1 - 2006-03-28
 ------------------
 
@@ -301,6 +329,7 @@ Fixes:
 - Shut down DeprecationWarning for product_name of ToolInit.
   [hannosch]
 
+
 2.0 - 2006-02-25
 ----------------
 
@@ -324,6 +353,7 @@ Fixes:
   format_stx and expandPath
   [hannosch]
 
+
 1.0.7 - 2005-12-18
 ------------------
 
@@ -333,6 +363,7 @@ Fixes:
 - Made tests compatible with Zope 2.9 (transaction module)
   [hannosch]
 
+
 1.0.6 - 2005-10-09
 ------------------
 
diff --git a/Products/CMFFormController/Actions/BaseFormAction.py b/Products/CMFFormController/Actions/BaseFormAction.py
index f8d899a..3595fe7 100644
--- a/Products/CMFFormController/Actions/BaseFormAction.py
+++ b/Products/CMFFormController/Actions/BaseFormAction.py
@@ -1,18 +1,20 @@
-from zope.tales.tales import CompilerError
-from zope.interface import implementer
-
+from .IFormAction import IFormAction
 from AccessControl import ClassSecurityInfo
 from Acquisition import aq_base, aq_parent, aq_inner
 from Products.CMFCore.Expression import Expression
-from Products.PageTemplates.Expressions import getEngine
-from Products.PageTemplates.Expressions import SecureModuleImporter
-
 from Products.CMFCore.utils import getToolByName
 from Products.CMFFormController.config import URL_ENCODING
 from Products.CMFFormController.utils import log
-from IFormAction import IFormAction
+from Products.PageTemplates.Expressions import getEngine
+from Products.PageTemplates.Expressions import SecureModuleImporter
+from six.moves.urllib.parse import urlparse
+from six.moves.urllib.parse import urlunparse
+from zope.interface import implementer
+from zope.tales.tales import CompilerError
 from ZTUtils.Zope import make_query
 
+import six
+
 try:
     from OFS.role import RoleManager
 except ImportError:
@@ -36,13 +38,11 @@ def __init__(self, arg=None):
             try:
                 self.expression = Expression(arg)
             except:
-                raise CompilerError, 'Bad action expression %s' % str(arg)
-
+                raise CompilerError('Bad action expression %s' % str(arg))
 
     def __call__(self, controller_state):
         raise NotImplementedError
 
-
     def getArg(self, controller_state):
         """Generate an expression context for the TALES expression used as
         the argument to the action and evaluate the expression."""
@@ -86,24 +86,22 @@ def getArg(self, controller_state):
         exprContext = getEngine().getContext(data)
         return self.expression(exprContext)
 
-
     def combineArgs(self, url, kwargs):
         """Utility method that takes a URL, parses its existing query string,
         and combines the resulting dict with kwargs"""
-        import urlparse
         import cgi
 
         # parse the existing URL
-        parsed_url = list(urlparse.urlparse(url))
+        parsed_url = list(urlparse(url))
         # get the existing query string
         qs = parsed_url[4]
         # parse the query into a dict
         d = cgi.parse_qs(qs, 1)
         # update with stuff from kwargs
         for k, v in kwargs.items():
-            if isinstance(v, unicode):
+            if isinstance(v, six.text_type):
                 v = v.encode(URL_ENCODING)
-            d[k] = [v] # put in a list to be consistent with parse_qs
+            d[k] = [v]  # put in a list to be consistent with parse_qs
         # parse_qs behaves a little unexpectedly -- all query string args
         # are represented as lists.  I think the reason is so that you get
         # consistent behavior for things like http://myurl?a=1&a=2&a=3
@@ -118,17 +116,13 @@ def combineArgs(self, url, kwargs):
                 dnew[k] = v
         return dnew
 
-
     def updateQuery(self, url, kwargs):
         """Utility method that takes a URL, parses its existing query string,
         url encodes
         and updates the query string using the values in kwargs"""
         d = self.combineArgs(url, kwargs)
-
-        import urlparse
-
         # parse the existing URL
-        parsed_url = list(urlparse.urlparse(url))
+        parsed_url = list(urlparse(url))
 
         # re-encode the string
         # We use ZTUtils.make_query here because it
@@ -140,5 +134,4 @@ def updateQuery(self, url, kwargs):
         # destination urls.
         parsed_url[4] = make_query(**d)
         # rebuild the URL
-        return urlparse.urlunparse(parsed_url)
-
+        return urlunparse(parsed_url)
diff --git a/Products/CMFFormController/Actions/RedirectTo.py b/Products/CMFFormController/Actions/RedirectTo.py
index e48bd1a..84a7ab3 100644
--- a/Products/CMFFormController/Actions/RedirectTo.py
+++ b/Products/CMFFormController/Actions/RedirectTo.py
@@ -1,8 +1,8 @@
-from BaseFormAction import BaseFormAction
+from .BaseFormAction import BaseFormAction
 from Products.CMFCore.utils import getToolByName
 from Products.CMFFormController.FormController import registerFormAction
-from urlparse import urljoin
-from urlparse import urlparse
+from six.moves.urllib.parse import urljoin
+from six.moves.urllib.parse import urlparse
 
 
 def factory(arg):
diff --git a/Products/CMFFormController/Actions/RedirectToAction.py b/Products/CMFFormController/Actions/RedirectToAction.py
index 27dc092..d04433f 100644
--- a/Products/CMFFormController/Actions/RedirectToAction.py
+++ b/Products/CMFFormController/Actions/RedirectToAction.py
@@ -1,8 +1,9 @@
-from BaseFormAction import BaseFormAction
-import RedirectTo
-
+from . import RedirectTo
+from .BaseFormAction import BaseFormAction
 from Products.CMFCore.utils import getToolByName
 from Products.CMFFormController.FormController import registerFormAction
+from six.moves import reduce
+
 
 def factory(arg):
     """Create a new redirect-to-action action"""
@@ -41,7 +42,7 @@ def __call__(self, controller_state):
 
         # (note: action_url may now be an emptry string, but still valid)
         if not haveAction:
-            raise ValueError, 'No %s action found for %s' % (action, controller_state.getContext().getId())
+            raise ValueError('No %s action found for %s' % (action, controller_state.getContext().getId()))
 
         # XXX: Is there a better way to check this?
         if not action_url.startswith('string:'):
diff --git a/Products/CMFFormController/Actions/TraverseTo.py b/Products/CMFFormController/Actions/TraverseTo.py
index 1892d44..d482f91 100644
--- a/Products/CMFFormController/Actions/TraverseTo.py
+++ b/Products/CMFFormController/Actions/TraverseTo.py
@@ -1,9 +1,9 @@
-from BaseFormAction import BaseFormAction
-
+from .BaseFormAction import BaseFormAction
 from Products.CMFFormController.FormController import registerFormAction
-from ZPublisher.Publish import call_object, missing_name, dont_publish_class
+from six.moves.urllib.parse import urlparse
 from ZPublisher.mapply import mapply
-import urlparse
+from ZPublisher.WSGIPublisher import call_object, missing_name, dont_publish_class
+
 
 def factory(arg):
     """Create a new traverse-to action"""
@@ -14,11 +14,11 @@ class TraverseTo(BaseFormAction):
     def __call__(self, controller_state):
         url = self.getArg(controller_state)
         # see if this is a relative url or an absolute
-        if len(urlparse.urlparse(url)[1]) != 0:
+        if len(urlparse(url)[1]) != 0:
             # host specified, so url is absolute.  No good for traversal.
-            raise ValueError, 'Can\'t traverse to absolute url %s' % str(url)
+            raise ValueError('Can\'t traverse to absolute url %s' % str(url))
 
-        url_path = urlparse.urlparse(url)[2]
+        url_path = urlparse(url)[2]
         # combine args from query string with args from the controller state
         # (args in the state supercede those in the query string)
         args = self.combineArgs(url, controller_state.kwargs)
@@ -32,7 +32,7 @@ def __call__(self, controller_state):
         context = controller_state.getContext()
         obj = context.restrictedTraverse(url_path, default=None)
         if obj is None:
-            raise ValueError, 'Unable to find %s\n' % str(url_path)
+            raise ValueError('Unable to find %s\n' % str(url_path))
         return mapply(obj, REQUEST.args, REQUEST,
                                call_object, 1, missing_name, dont_publish_class,
                                REQUEST, bind=1)
diff --git a/Products/CMFFormController/Actions/TraverseToAction.py b/Products/CMFFormController/Actions/TraverseToAction.py
index 9c8eaa6..226df91 100644
--- a/Products/CMFFormController/Actions/TraverseToAction.py
+++ b/Products/CMFFormController/Actions/TraverseToAction.py
@@ -1,9 +1,10 @@
-from BaseFormAction import BaseFormAction
-import TraverseTo
-
+from . import TraverseTo
+from .BaseFormAction import BaseFormAction
 from Products.CMFCore.utils import getToolByName
 from Products.CMFFormController.FormController import registerFormAction
-from urlparse import urlsplit
+from six.moves import reduce
+from six.moves.urllib.parse import urlsplit
+
 
 def factory(arg):
     """Create a new traverse-to-action action"""
@@ -53,7 +54,7 @@ def __call__(self, controller_state):
             else:
                 action_url = url_parts[2]
         else:
-            raise ValueError, 'No %s action found for %s' % (action, controller_state.getContext().getId())
+            raise ValueError('No %s action found for %s' % (action, controller_state.getContext().getId()))
 
         # If we have CMF 1.5, the actual action_url may be hidden behind a method
         # alias. Attempt to resolve this
diff --git a/Products/CMFFormController/BaseControllerPageTemplate.py b/Products/CMFFormController/BaseControllerPageTemplate.py
index 34fea5c..222a4c5 100644
--- a/Products/CMFFormController/BaseControllerPageTemplate.py
+++ b/Products/CMFFormController/BaseControllerPageTemplate.py
@@ -1,8 +1,9 @@
+from .ControllerBase import ControllerBase
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from Products.CMFCore.permissions import View
 from Products.CMFCore.utils import getToolByName
-from ControllerBase import ControllerBase
+
 
 class BaseControllerPageTemplate(ControllerBase):
 
diff --git a/Products/CMFFormController/ControllerBase.py b/Products/CMFFormController/ControllerBase.py
index 74dc733..13622a3 100644
--- a/Products/CMFFormController/ControllerBase.py
+++ b/Products/CMFFormController/ControllerBase.py
@@ -1,16 +1,17 @@
-import logging
-import os
+from .FormAction import FormAction, FormActionContainer
+from .FormValidator import FormValidator, FormValidatorContainer
+from .globalVars import ANY_CONTEXT, ANY_BUTTON
+from .utils import log
+from AccessControl import ClassSecurityInfo
 from Acquisition import aq_base, aq_inner
 from App.class_init import InitializeClass
-from AccessControl import ClassSecurityInfo
-from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+from Products.CMFCore.FSMetadata import FSMetadata, CMFConfigParser
 from Products.CMFCore.permissions import View, ManagePortal
 from Products.CMFCore.utils import getToolByName
-from Products.CMFCore.FSMetadata import FSMetadata, CMFConfigParser
-from FormAction import FormAction, FormActionContainer
-from FormValidator import FormValidator, FormValidatorContainer
-from globalVars import ANY_CONTEXT, ANY_BUTTON
-from utils import log
+from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+import logging
+import os
+
 
 class ControllerBase:
     """Common functions for objects controlled by portal_form_controller"""
@@ -225,8 +226,8 @@ def getNext(self, controller_state, REQUEST):
                     if next_action is None:
                         metadata_actions = [str(a) for a in self.actions.getFiltered(object_id=id)]
                         zmi_actions = [str(a) for a in controller.actions.getFiltered(object_id=id)]
-                        raise ValueError, 'No next action found for %s.%s.%s.%s\nMetadata actions:\n%s\n\nZMI actions:\n%s\n' % \
-                            (id, status, context_type, button, '\n'.join(metadata_actions), '\n'.join(zmi_actions))
+                        raise ValueError('No next action found for %s.%s.%s.%s\nMetadata actions:\n%s\n\nZMI actions:\n%s\n' %
+                                                (id, status, context_type, button, '\n'.join(metadata_actions), '\n'.join(zmi_actions)))
 
         REQUEST.set('controller_state', controller_state)
         return next_action.getAction()(controller_state)
@@ -299,7 +300,7 @@ def _read_action_metadata(self, id, filepath):
                 while len(component) < 4:
                     component.append('')
                 if component[0] != 'action':
-                    raise ValueError, '%s: Format for .metadata actions is action.STATUS.CONTEXT_TYPE.BUTTON = ACTION_TYPE:ACTION_ARG (not %s)' % (filepath, k)
+                    raise ValueError('%s: Format for .metadata actions is action.STATUS.CONTEXT_TYPE.BUTTON = ACTION_TYPE:ACTION_ARG (not %s)' % (filepath, k))
                 act = v.split(':',1)
                 while len(act) < 2:
                     act.append('')
@@ -308,7 +309,7 @@ def _read_action_metadata(self, id, filepath):
                 self.actions.set(FormAction(id, component[1], component[2], component[3], act[0], act[1]))
 
                 status_key = str(component[1])+'.'+str(context_type)
-                if _buttons_for_status.has_key(status_key):
+                if status_key in _buttons_for_status:
                     _buttons_for_status[status_key].append(component[3])
                 else:
                     _buttons_for_status[status_key] = [component[3]]
@@ -343,13 +344,13 @@ def _read_validator_metadata(self, id, filepath):
                 while len(component) < 3:
                     component.append('')
                 if component[0] != 'validators':
-                    raise ValueError, '%s: Format for .metadata validators is validators.CONTEXT_TYPE.BUTTON = LIST (not %s)' % (filepath, k)
+                    raise ValueError('%s: Format for .metadata validators is validators.CONTEXT_TYPE.BUTTON = LIST (not %s)' % (filepath, k))
 
                 context_type = component[1]
                 self.validators.set(FormValidator(id, component[1], component[2], v))
 
                 status_key = str(context_type)
-                if _buttons_for_status.has_key(status_key):
+                if status_key in _buttons_for_status:
                     _buttons_for_status[status_key].append(component[2])
                 else:
                     _buttons_for_status[status_key] = [component[2]]
diff --git a/Products/CMFFormController/ControllerPageTemplate.py b/Products/CMFFormController/ControllerPageTemplate.py
index 6008c4c..b57047d 100644
--- a/Products/CMFFormController/ControllerPageTemplate.py
+++ b/Products/CMFFormController/ControllerPageTemplate.py
@@ -1,15 +1,16 @@
-import os
+from .BaseControllerPageTemplate import BaseControllerPageTemplate
+from .FormAction import FormActionContainer
+from .FormValidator import FormValidatorContainer
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from App.Common import package_home
+from Products.CMFCore.permissions import View
 from Products.PageTemplates.PageTemplateFile import PageTemplateFile
 from Products.PageTemplates.ZopePageTemplate import ZopePageTemplate as BaseClass
-from Products.CMFCore.permissions import View
-from BaseControllerPageTemplate import BaseControllerPageTemplate
-from FormAction import FormActionContainer
-from FormValidator import FormValidatorContainer
+from six.moves.urllib.parse import quote
+
+import os
 
-from urllib import quote
 
 # ###########################################################################
 # Product registration and Add support
diff --git a/Products/CMFFormController/ControllerPageTemplateFile.py b/Products/CMFFormController/ControllerPageTemplateFile.py
index db2f4fc..07f8c88 100644
--- a/Products/CMFFormController/ControllerPageTemplateFile.py
+++ b/Products/CMFFormController/ControllerPageTemplateFile.py
@@ -15,15 +15,16 @@
    filesystem.
 """
 
-import os
 from AccessControl import ClassSecurityInfo
+from BaseControllerPageTemplate import BaseControllerPageTemplate
+from FSControllerBase import FSControllerBase
 from Products.CMFCore.permissions import View
 from Products.PageTemplates.PageTemplateFile import PageTemplateFile as BaseClass
 from Products.PageTemplates.TALES import CompilerError
-from BaseControllerPageTemplate import BaseControllerPageTemplate
-from FSControllerBase import FSControllerBase
 from utils import log, logException
 
+import os
+
 
 class ControllerPageTemplateFile(BaseClass, BaseControllerPageTemplate, FSControllerBase):
     """Wrapper for Controller Page Template"""
@@ -52,7 +53,7 @@ def __init__(self, filename, _prefix=None, **kw):
             self._read_action_metadata(self.getId(), self.filepath)
             self._read_validator_metadata(self.getId(), self.filepath)
             return retval
-        except (ValueError, CompilerError), e:
+        except (ValueError, CompilerError) as e:
             log(summary='metadata error', text='file = %s' % self.filepath)
             raise
 
diff --git a/Products/CMFFormController/ControllerPythonScript.py b/Products/CMFFormController/ControllerPythonScript.py
index 09cd9db..e930488 100644
--- a/Products/CMFFormController/ControllerPythonScript.py
+++ b/Products/CMFFormController/ControllerPythonScript.py
@@ -18,25 +18,26 @@
 Python code.
 """
 
-import os, re
+from .ControllerBase import ControllerBase
+from .ControllerState import ControllerState
+from .FormAction import FormActionContainer
+from .FormValidator import FormValidatorContainer
+from .interfaces import IControllerPythonScript
+from .Script import PythonScript as BaseClass
 from App.Common import package_home
-import AccessControl
-from OFS.SimpleItem import SimpleItem
-from urllib import quote
-from Shared.DC.Scripts.Script import BindingsUI
-from OFS.History import Historical
 from OFS.Cache import Cacheable
-from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+from OFS.History import Historical
+from OFS.SimpleItem import SimpleItem
 from Products.CMFCore.utils import getToolByName
-from Script import PythonScript as BaseClass
-from ControllerBase import ControllerBase
-from ControllerState import ControllerState
-from FormAction import FormActionContainer
-from FormValidator import FormValidatorContainer
-from interfaces import IControllerPythonScript
-
+from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+from Shared.DC.Scripts.Script import BindingsUI
+from six.moves.urllib.parse import quote
 from zope.interface import implementer
 
+import AccessControl
+import os
+import re
+
 # Track the Python bytecode version
 import imp
 Python_magic = imp.get_magic()
diff --git a/Products/CMFFormController/ControllerState.py b/Products/CMFFormController/ControllerState.py
index cfa4ac6..656466e 100644
--- a/Products/CMFFormController/ControllerState.py
+++ b/Products/CMFFormController/ControllerState.py
@@ -1,8 +1,10 @@
+from .FormAction import FormAction
+from .globalVars import ANY_CONTEXT, ANY_BUTTON
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from Products.CMFCore.utils import getToolByName
-from FormAction import FormAction
-from globalVars import ANY_CONTEXT, ANY_BUTTON
+
+import six
 
 try:
     from OFS.role import RoleManager
@@ -57,22 +59,22 @@ def __init__(self, id=None, context=None, button=None, status='success', \
 
     def set(self, **kwargs):
         """Set state object properties"""
-        if kwargs.has_key('id'):
+        if 'id' in kwargs:
             self.setId(kwargs['id'])
             del kwargs['id']
-        if kwargs.has_key('button'):
+        if 'button' in kwargs:
             self.setButton(kwargs['button'])
             del kwargs['button']
-        if kwargs.has_key('status'):
+        if 'status' in kwargs:
             self.setStatus(kwargs['status'])
             del kwargs['status']
-        if kwargs.has_key('errors'):
+        if 'errors' in kwargs:
             self.setErrors(kwargs['errors'])
             del kwargs['errors']
-        if kwargs.has_key('context'):
+        if 'context' in kwargs:
             self.setContext(kwargs['context'])
             del kwargs['context']
-        if kwargs.has_key('next_action'):
+        if 'next_action' in kwargs:
             self.setNextAction(kwargs['next_action'])
             del kwargs['next_action']
         self.kwargs.update(kwargs)
@@ -129,7 +131,7 @@ def getErrors(self):
         err = {}
         for k,v in self.errors.items():
             # make allowances for old-style string errors
-            if isinstance(v, basestring):
+            if isinstance(v, six.string_types):
                 err[k] = v
             else:
                 err[k] = v[0]
@@ -140,7 +142,7 @@ def getI18NErrors(self):
         err = {}
         for k,v in self.errors.items():
             # make allowances for old-style string errors
-            if isinstance(v, basestring):
+            if isinstance(v, six.string_types):
                 err[k] = (v, None)
             else:
                 err[k] = v
@@ -152,7 +154,7 @@ def setErrors(self, errors):
         self.errors = {}
         # make allowances for old-style errors
         for k,v in errors.items():
-            if isinstance(v, basestring):
+            if isinstance(v, six.string_types):
                 self.errors[k] = (v, None)
             else:
                 self.errors[k] = v
@@ -212,7 +214,7 @@ def setNextAction(self, action):
                 args = None
         controller = getToolByName(self.getContext(), 'portal_form_controller')
         if not action_type in controller.validActionTypes():
-            raise KeyError, 'Unknown action type %s\n' % action_type
+            raise KeyError('Unknown action type %s\n' % action_type)
         self.next_action = FormAction(self.getId(), self.getStatus(), ANY_CONTEXT, ANY_BUTTON, action_type, args, controller)
 
     # indicate that a validator has been executed
@@ -221,7 +223,7 @@ def _addValidator(self, validator):
 
     # remove a validator from the list of already-executed validators
     def clearValidator(self, validator):
-        if self._validators.has_key(validator):
+        if validator in self._validators:
             del self._validators[validator]
 
     # clear the list of already-executed validators
@@ -235,7 +237,7 @@ def hasValidated(self, validators=None):
         elif not isinstance(validators, list):
             validators = [validators]
         for v in validators:
-            if not self._validators.has_key(v):
+            if not v in self._validators:
                 return 0
         return 1
 
diff --git a/Products/CMFFormController/ControllerValidator.py b/Products/CMFFormController/ControllerValidator.py
index 80db611..49a3945 100644
--- a/Products/CMFFormController/ControllerValidator.py
+++ b/Products/CMFFormController/ControllerValidator.py
@@ -18,22 +18,22 @@
 Python code.
 """
 
-import os
+from .ControllerBase import ControllerBase
+from .interfaces import IControllerValidator
+from .Script import PythonScript as BaseClass
 from App.Common import package_home
-import AccessControl
-from Products.PageTemplates.PageTemplateFile import PageTemplateFile
-from OFS.SimpleItem import SimpleItem
-from urllib import quote
-from Shared.DC.Scripts.Script import BindingsUI
-from OFS.History import Historical
 from OFS.Cache import Cacheable
+from OFS.History import Historical
+from OFS.SimpleItem import SimpleItem
 from Products.CMFCore.utils import getToolByName
-from Script import PythonScript as BaseClass
-from ControllerBase import ControllerBase
-from interfaces import IControllerValidator
-
+from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+from Shared.DC.Scripts.Script import BindingsUI
+from six.moves.urllib.parse import quote
 from zope.interface import implementer
 
+import AccessControl
+import os
+
 # Track the Python bytecode version
 import imp
 Python_magic = imp.get_magic()
diff --git a/Products/CMFFormController/FSControllerBase.py b/Products/CMFFormController/FSControllerBase.py
index de37115..8ae44aa 100644
--- a/Products/CMFFormController/FSControllerBase.py
+++ b/Products/CMFFormController/FSControllerBase.py
@@ -11,12 +11,14 @@
 #
 ##########################################################################
 
-import os
+from .ControllerBase import ControllerBase
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from App.config import getConfiguration
 from Products.CMFCore.FSMetadata import FSMetadata
-from ControllerBase import ControllerBase
+
+import os
+
 
 class FSControllerBase(ControllerBase):
     """Common functions for filesystem objects controlled by portal_form_controller"""
diff --git a/Products/CMFFormController/FSControllerPageTemplate.py b/Products/CMFFormController/FSControllerPageTemplate.py
index f0fdec7..73926a6 100644
--- a/Products/CMFFormController/FSControllerPageTemplate.py
+++ b/Products/CMFFormController/FSControllerPageTemplate.py
@@ -14,21 +14,22 @@
 """ Customizable validated page templates that come from the filesystem.
 """
 
-import copy
-from zope.tales.tales import CompilerError
-
-import Acquisition
-from App.class_init import InitializeClass
+from .BaseControllerPageTemplate import BaseControllerPageTemplate
+from .ControllerPageTemplate import ControllerPageTemplate
+from .FSControllerBase import FSControllerBase
+from .utils import log, logException
 from AccessControl import ClassSecurityInfo
+from App.class_init import InitializeClass
 from OFS.Cache import Cacheable
-from Products.PageTemplates.ZopePageTemplate import Src
 from Products.CMFCore.DirectoryView import registerFileExtension, registerMetaType
-from Products.CMFCore.permissions import View
 from Products.CMFCore.FSPageTemplate import FSPageTemplate as BaseClass
-from BaseControllerPageTemplate import BaseControllerPageTemplate
-from ControllerPageTemplate import ControllerPageTemplate
-from FSControllerBase import FSControllerBase
-from utils import log, logException
+from Products.CMFCore.permissions import View
+from Products.PageTemplates.ZopePageTemplate import Src
+from zope.tales.tales import CompilerError
+
+import Acquisition
+import copy
+
 
 class FSControllerPageTemplate(FSControllerBase, BaseClass, BaseControllerPageTemplate):
     """Wrapper for Controller Page Template"""
@@ -52,7 +53,7 @@ def __init__(self, id, filepath, fullname=None, properties=None):
         try:
             self._read_action_metadata(self.getId(), filepath)
             self._read_validator_metadata(self.getId(), filepath)
-        except (ValueError, CompilerError), e:
+        except (ValueError, CompilerError) as e:
             log(summary='metadata error', text='file = %s' % filepath)
             raise
 
diff --git a/Products/CMFFormController/FSControllerPythonScript.py b/Products/CMFFormController/FSControllerPythonScript.py
index cd322e4..61417e5 100644
--- a/Products/CMFFormController/FSControllerPythonScript.py
+++ b/Products/CMFFormController/FSControllerPythonScript.py
@@ -14,24 +14,24 @@
 """ Customizable controlled python scripts that come from the filesystem.
 """
 
-import copy
-from zope.tales.tales import CompilerError
-
-import Acquisition
+from .ControllerPythonScript import ControllerPythonScript
+from .ControllerState import ControllerState
+from .FSControllerBase import FSControllerBase
+from .interfaces import IControllerPythonScript
+from .Script import FSPythonScript as BaseClass
+from .utils import log, logException
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from OFS.Cache import Cacheable
 from Products.CMFCore.DirectoryView import registerFileExtension, registerMetaType
 from Products.CMFCore.permissions import View
 from Products.CMFCore.utils import getToolByName
-from Script import FSPythonScript as BaseClass
-from ControllerPythonScript import ControllerPythonScript
-from ControllerState import ControllerState
-from FSControllerBase import FSControllerBase
-from utils import log, logException
-from interfaces import IControllerPythonScript
-
 from zope.interface import implementer
+from zope.tales.tales import CompilerError
+
+import Acquisition
+import copy
+
 
 @implementer(IControllerPythonScript)
 class FSControllerPythonScript (FSControllerBase, BaseClass):
@@ -60,7 +60,7 @@ def __init__(self, id, filepath, fullname=None, properties=None):
         try:
             self._read_action_metadata(self.getId(), filepath)
             self._read_validator_metadata(self.getId(), self.filepath)
-        except (ValueError, CompilerError), e:
+        except (ValueError, CompilerError) as e:
             log(summary='metadata error', text='file = %s' % filepath)
             raise
 
diff --git a/Products/CMFFormController/FSControllerValidator.py b/Products/CMFFormController/FSControllerValidator.py
index 205ddd4..09f2abc 100644
--- a/Products/CMFFormController/FSControllerValidator.py
+++ b/Products/CMFFormController/FSControllerValidator.py
@@ -14,20 +14,20 @@
 """ Customizable controlled python scripts that come from the filesystem.
 """
 
+from .ControllerBase import ControllerBase
+from .ControllerValidator import ControllerValidator
+from .interfaces import IControllerValidator
+from .Script import FSPythonScript as BaseClass
+from .utils import logException
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from OFS.Cache import Cacheable
 from Products.CMFCore.DirectoryView import registerFileExtension, registerMetaType
 from Products.CMFCore.permissions import View
 from Products.CMFCore.utils import getToolByName
-from Script import FSPythonScript as BaseClass
-from ControllerValidator import ControllerValidator
-from ControllerBase import ControllerBase
-from utils import logException
-from interfaces import IControllerValidator
-
 from zope.interface import implementer
 
+
 @implementer(IControllerValidator)
 class FSControllerValidator (BaseClass, ControllerBase):
     """FSControllerValidators act like Controller Python Scripts but are not
diff --git a/Products/CMFFormController/FormAction.py b/Products/CMFFormController/FormAction.py
index d0d8777..0549b46 100644
--- a/Products/CMFFormController/FormAction.py
+++ b/Products/CMFFormController/FormAction.py
@@ -1,13 +1,14 @@
+from .globalVars import ANY_CONTEXT, ANY_BUTTON
+from .Key import Key
 from AccessControl import ClassSecurityInfo
+from Acquisition import aq_base
 from App.class_init import InitializeClass
 from OFS.SimpleItem import SimpleItem
 from Products.CMFCore.utils import getToolByName
-from Key import Key
-from globalVars import ANY_CONTEXT, ANY_BUTTON
-from Acquisition import aq_base
 
 _marker = []
 
+
 class FormActionType(SimpleItem):
 
     security = ClassSecurityInfo()
@@ -40,11 +41,11 @@ def __init__(self, object_id, status, context_type, button, controller=None):
         if controller:
             s = controller._checkId(object_id)
             if s:
-                raise ValueError, 'Illegal template id: %s' % s
+                raise ValueError('Illegal template id: %s' % s)
 
         status = status.strip()
         if not status:
-            raise ValueError, 'Illegal status %s' % (status)
+            raise ValueError('Illegal status %s' % (status))
 
         if not context_type:
             context_type = ANY_CONTEXT
@@ -78,15 +79,15 @@ class FormAction(SimpleItem):
 
     def __init__(self, object_id, status, context_type, button,
                  action_type, action_arg, controller=None):
-        from FormController import form_action_types
+        from .FormController import form_action_types
 
         self.key = FormActionKey(object_id, status, context_type, button,
                                  controller)
         self.action_type = action_type
         self.action_arg = action_arg
 
-        if not form_action_types.has_key(action_type):
-            raise ValueError, 'Illegal action type %s for %s' % (action_type, object_id)
+        if not action_type in form_action_types:
+            raise ValueError('Illegal action type %s for %s' % (action_type, object_id))
         if action_arg is not None:
             action_arg = action_arg.strip()
         self.action = form_action_types[action_type].getFactory()(action_arg)
diff --git a/Products/CMFFormController/FormController.py b/Products/CMFFormController/FormController.py
index 638497f..49ed718 100644
--- a/Products/CMFFormController/FormController.py
+++ b/Products/CMFFormController/FormController.py
@@ -1,28 +1,31 @@
 from __future__ import nested_scopes
-import os
-from zope.interface import implementer
-from zope.structuredtext import stx2html
 
+from .FormAction import FormActionType, FormActionKey, FormAction, FormActionContainer
+from .FormValidator import FormValidatorKey, FormValidator, FormValidatorContainer
+from .ValidationError import ValidationError
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from App.Common import package_home
 from OFS.ObjectManager import bad_id
-from ZPublisher.Publish import call_object, missing_name, dont_publish_class
-from ZPublisher.mapply import mapply
-from Products.CMFFormController import GLOBALS as fc_globals
-from Products.CMFCore.utils import getToolByName, UniqueObject, SimpleItemWithProperties
 from Products.CMFCore.permissions import ManagePortal
-from Products.PageTemplates.PageTemplateFile import PageTemplateFile
-
+from Products.CMFCore.utils import getToolByName, UniqueObject, SimpleItemWithProperties
+from Products.CMFFormController import GLOBALS as fc_globals
 from Products.CMFFormController.ControllerState import ControllerState
 from Products.CMFFormController.interfaces import IFormControllerTool
-from FormAction import FormActionType, FormActionKey, FormAction, FormActionContainer
-from FormValidator import FormValidatorKey, FormValidator, FormValidatorContainer
-from ValidationError import ValidationError
+from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+from zope.interface import implementer
+from zope.structuredtext import stx2html
+from ZPublisher.mapply import mapply
+from ZPublisher.WSGIPublisher import call_object
+from ZPublisher.WSGIPublisher import dont_publish_class
+from ZPublisher.WSGIPublisher import missing_name
+
+import os
 
 _marker = []
 form_action_types = {}
 
+
 def registerFormAction(id, factory, description=''):
     form_action_types[id] = FormActionType(id, factory, description)
 
@@ -330,14 +333,14 @@ def getState(self, obj, is_validator):
             controller_state.set(id=id, context=obj.__parent__)
         else:
             if controller_state is None:
-                raise ValueError, 'No controller state available.  ' + \
+                raise ValueError('No controller state available.  ' + \
                     'This commonly occurs when a ControllerValidator (.vpy) ' + \
                     'script is invoked via the validation mechanism in the ' + \
                     'portal_form tool.  If you are using a package designed to ' + \
                     'be used with portal_form, you are probably inadvertently ' + \
                     'invoking a validator designed for use with CMFFormController (e.g. validate_id).  ' + \
                     'If you are using a package designed to be used with CMFFormController, you probably ' + \
-                    'have a "portal_form" in your URL that needs to be removed.'
+                    'have a "portal_form" in your URL that needs to be removed.')
         controller_state._setValidating(is_validator)
         # Pass environment along, with care so we don't override
         # existing variables.
@@ -374,28 +377,28 @@ def validate(self, controller_state, REQUEST, validators, argdict=None):
                 # make sure validator exists
                 obj = context.restrictedTraverse(v, default=None)
                 if obj is None:
-                    raise ValueError, 'Unable to find validator %s\n' % str(v)
+                    raise ValueError('Unable to find validator %s\n' % str(v))
                 if not getattr(obj, 'is_validator', 1):
-                    raise ValueError, '%s is not a CMFFormController validator' % str(v)
+                    raise ValueError('%s is not a CMFFormController validator' % str(v))
                 REQUEST = controller_state.getContext().REQUEST
                 controller_state = mapply(obj, args, kwargs,
                                           call_object, 1, missing_name, dont_publish_class,
                                           REQUEST, bind=1)
                 if controller_state is None or getattr(controller_state, '__class__', None) != ControllerState:
-                    raise ValueError, 'Validator %s did not return the state object' % str(v)
+                    raise ValueError('Validator %s did not return the state object' % str(v))
                 controller_state._addValidator(v)
-            except ValidationError, e:
+            except ValidationError as e:
                 # if a validator raises a ValidatorException, execution of
                 # validators is halted and the controller_state is set to
                 # the controller_state embedded in the exception
                 controller_state = e.controller_state
                 state_class = getattr(controller_state, '__class__', None)
                 if state_class != ControllerState:
-                    raise Exception, 'Bad ValidationError state (type = %s)' % str(state_class)
+                    raise Exception('Bad ValidationError state (type = %s)' % str(state_class))
                 break
             state_class = getattr(controller_state, '__class__', None)
             if state_class != ControllerState:
-                raise Exception, 'Bad validator return type from validator %s (%s)' % (str(v), str(state_class))
+                raise Exception('Bad validator return type from validator %s (%s)' % (str(v), str(state_class)))
             REQUEST.set('controller_state', controller_state)
 
         REQUEST.set('controller_state', controller_state)
@@ -443,9 +446,9 @@ def fn(obj, dict):
         catalog = getToolByName(self, 'portal_catalog')
         result = catalog.ZopeFindAndApply(portal, obj_metatypes=meta_types, search_sub=1, result=[])
         for (path, r) in result:
-            if action_dict.has_key(r.getId()):
+            if r.getId() in action_dict:
                 del action_dict[r.getId()]
-            if validator_dict.has_key(r.getId()):
+            if r.getId() in validator_dict:
                 del validator_dict[r.getId()]
 
         n_actions = 0
diff --git a/Products/CMFFormController/FormValidator.py b/Products/CMFFormController/FormValidator.py
index b7fc1a6..91a2c31 100644
--- a/Products/CMFFormController/FormValidator.py
+++ b/Products/CMFFormController/FormValidator.py
@@ -1,13 +1,16 @@
+from .globalVars import ANY_CONTEXT, ANY_BUTTON
+from .Key import Key
 from AccessControl import ClassSecurityInfo
+from Acquisition import aq_base
 from App.class_init import InitializeClass
 from OFS.SimpleItem import SimpleItem
 from Products.CMFCore.utils import getToolByName
-from Key import Key
-from globalVars import ANY_CONTEXT, ANY_BUTTON
-from Acquisition import aq_base
+
+import six
 
 _marker = []
 
+
 class FormValidatorKey(Key):
 
     security = ClassSecurityInfo()
@@ -20,7 +23,7 @@ def __init__(self, object_id, context_type, button, controller=None):
             for p in path_elements:
                 s = controller._checkId(p)
                 if s:
-                    raise ValueError, 'Illegal template id: %s' % s
+                    raise ValueError('Illegal template id: %s' % s)
 
         if not context_type:
             context_type = ANY_CONTEXT
@@ -52,7 +55,7 @@ class FormValidator(SimpleItem):
     def __init__(self, object_id, context_type, button, validators, controller=None):
         self.key = FormValidatorKey(object_id, context_type, button, controller)
 
-        if isinstance(validators, basestring):
+        if isinstance(validators, six.string_types):
             validators = validators.split(',')
         validators = [v.strip() for v in validators if v]
         if controller:
@@ -61,7 +64,7 @@ def __init__(self, object_id, context_type, button, validators, controller=None)
                 for p in path_elements:
                     s = controller._checkId(p)
                     if s:
-                        raise ValueError, 'Illegal template id: %s' % s
+                        raise ValueError('Illegal template id: %s' % s)
         self.validators = validators
 
     def __copy__(self):
diff --git a/Products/CMFFormController/Script.py b/Products/CMFFormController/Script.py
index 0b75acf..779e331 100644
--- a/Products/CMFFormController/Script.py
+++ b/Products/CMFFormController/Script.py
@@ -12,15 +12,15 @@
 # THIS FILE CONTAINS MODIFIED CODE FROM ZOPE 2.6.2
 ##############################################################################
 
-import logging
-import re
-
 from App.class_init import InitializeClass
-from Shared.DC.Scripts.Bindings import NameAssignments as BaseNameAssignments
-from Products.PythonScripts.PythonScript import PythonScript as BasePythonScript
 from Products.CMFCore.FSPythonScript import FSPythonScript as BaseFSPythonScript
+from Products.PythonScripts.PythonScript import PythonScript as BasePythonScript
+from Shared.DC.Scripts.Bindings import NameAssignments as BaseNameAssignments
 from ZODB.POSException import ConflictError
 
+import logging
+import re
+
 logger = logging.getLogger('CMFFormController')
 
 defaultBindings = {'name_context': 'context',
@@ -99,7 +99,7 @@ def write(self, text):
                 k, v = line[2:].split('=', 1)
                 k = k.strip().lower()
                 v = v.strip()
-                if not mdata.has_key(k):
+                if not k in mdata:
                     raise SyntaxError('Unrecognized header line "%s" in file %s' % (line, self._filepath))
                 if v == mdata[k]:
                     # Unchanged value
diff --git a/Products/CMFFormController/__init__.py b/Products/CMFFormController/__init__.py
index 5577eec..1f4a4c2 100644
--- a/Products/CMFFormController/__init__.py
+++ b/Products/CMFFormController/__init__.py
@@ -2,12 +2,12 @@
 
 from Products.CMFCore.utils import registerIcon, ToolInit
 
-from config import *
-import ControllerPageTemplate, FSControllerPageTemplate
-import ControllerPythonScript, FSControllerPythonScript
-import ControllerValidator, FSControllerValidator
-import FormController
-from Actions import RedirectTo, TraverseTo, RedirectToAction, TraverseToAction
+from .config import *
+from . import ControllerPageTemplate, FSControllerPageTemplate
+from . import ControllerPythonScript, FSControllerPythonScript
+from . import ControllerValidator, FSControllerValidator
+from . import FormController
+from .Actions import RedirectTo, TraverseTo, RedirectToAction, TraverseToAction
 
 GLOBALS = globals()
 
diff --git a/Products/CMFFormController/exportimport/__init__.py b/Products/CMFFormController/exportimport/__init__.py
index aea57b6..1a0ce99 100644
--- a/Products/CMFFormController/exportimport/__init__.py
+++ b/Products/CMFFormController/exportimport/__init__.py
@@ -1,5 +1,5 @@
 # XXX refactor the form controller from CMFSetup-style to GenericSetup
-from formcontroller import importCMFFormController
-from formcontroller import exportCMFFormController
-from formcontroller import CMFFormControllerExportConfigurator
-from formcontroller import CMFFormControllerImportConfigurator
+from .formcontroller import importCMFFormController
+from .formcontroller import exportCMFFormController
+from .formcontroller import CMFFormControllerExportConfigurator
+from .formcontroller import CMFFormControllerImportConfigurator
diff --git a/Products/CMFFormController/utils.py b/Products/CMFFormController/utils.py
index a354b24..ba4e689 100644
--- a/Products/CMFFormController/utils.py
+++ b/Products/CMFFormController/utils.py
@@ -1,12 +1,15 @@
 import logging
+import six
 import sys
 import traceback
 
 logger = logging.getLogger('CMFFormController')
 
+
 def log(summary='', text='', log_level=logging.INFO):
     logger.log(log_level, '%s \n%s' % (summary, text))
 
+
 # Enable scripts to get the string value of an exception
 # even if the thrown exception is a string and not a
 # subclass of Exception.
@@ -15,10 +18,11 @@ def exceptionString():
                             # (otherwise will generate a circular reference)
     if s[0] == None:
         return None
-    if isinstance(s[0], basestring):
+    if isinstance(s[0], six.string_types):
         return s[0]
     return str(s[1])
 
+
 # provide a way of dumping an exception to the log even if we
 # catch it and otherwise ignore it
 def logException():


