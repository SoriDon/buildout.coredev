Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-04-09T22:55:05+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/eec3fe501ef4122acd1c7df25236043dc86e39ed

Remove PloneFolder, dead code.

Files changed:
A news/3492.breaking
M Products/CMFPlone/PloneTool.py
M Products/CMFPlone/__init__.py
M Products/CMFPlone/tests/testBrowserDefault.py
M Products/CMFPlone/tests/testInterfaces.py
M Products/CMFPlone/tests/testNavTree.py
D Products/CMFPlone/PloneFolder.py
D Products/CMFPlone/tests/testPloneFolder.py

b'diff --git a/Products/CMFPlone/PloneFolder.py b/Products/CMFPlone/PloneFolder.py\ndeleted file mode 100644\nindex fb7624ea54..0000000000\n--- a/Products/CMFPlone/PloneFolder.py\n+++ /dev/null\n@@ -1,292 +0,0 @@\n-from AccessControl import ClassSecurityInfo\n-from AccessControl import Permissions\n-from AccessControl import Unauthorized\n-from AccessControl.class_init import InitializeClass\n-from Acquisition import aq_base\n-from Acquisition import aq_inner\n-from Acquisition import aq_parent\n-from ComputedAttribute import ComputedAttribute\n-from OFS.Folder import Folder\n-from OFS.ObjectManager import REPLACEABLE\n-from OFS.OrderSupport import OrderSupport\n-from plone.memoize import view\n-from Products.CMFCore.CMFCatalogAware import CatalogAware\n-from Products.CMFCore.CMFCatalogAware import OpaqueItemManager\n-from Products.CMFCore.CMFCatalogAware import WorkflowAware\n-from Products.CMFCore.permissions import AccessContentsInformation\n-from Products.CMFCore.permissions import AddPortalContent\n-from Products.CMFCore.permissions import AddPortalFolders\n-from Products.CMFCore.permissions import ListFolderContents\n-from Products.CMFCore.permissions import ModifyPortalContent\n-from Products.CMFCore.PortalFolder import PortalFolderBase\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import bbb\n-from Products.CMFPlone.DublinCore import DefaultDublinCoreImpl\n-from zExceptions import NotFound\n-from zope.interface import implementer\n-\n-import warnings\n-\n-\n-if bbb.HAS_ZSERVER:\n-    from webdav.NullResource import NullResource\n-    from webdav.interfaces import IWriteLock\n-else:\n-    from OFS.interfaces import IWriteLock\n-    NullResource = bbb.NullResource\n-\n-\n-class ReplaceableWrapper:\n-    """A wrapper around an object to make it replaceable."""\n-\n-    def __init__(self, ob):\n-        warnings.warn(\n-            \'ReplaceableWrapper is deprecated. Planned removal in Plone 6.0\',\n-            DeprecationWarning,\n-        )\n-        self.__ob = ob\n-\n-    def __getattr__(self, name):\n-        if name == \'__replaceable__\':\n-            return REPLACEABLE\n-        return getattr(self.__ob, name)\n-\n-\n-class OrderedContainer(Folder, OrderSupport):\n-    """Folder with subobject ordering support."""\n-\n-    security = ClassSecurityInfo()\n-\n-    security.declareProtected(ModifyPortalContent, \'moveObject\')\n-\n-    def moveObject(self, id, position):\n-        obj_idx = self.getObjectPosition(id)\n-        if obj_idx == position:\n-            return None\n-        elif position < 0:\n-            position = 0\n-\n-        metadata = list(self._objects)\n-        obj_meta = metadata.pop(obj_idx)\n-        metadata.insert(position, obj_meta)\n-        self._objects = tuple(metadata)\n-\n-    security.declarePrivate(\'getIdsSubset\')\n-\n-    def getIdsSubset(self, objs):\n-        # Get the ids of only cmf objects (used for moveObjectsByDelta).\n-        ttool = getToolByName(self, \'portal_types\')\n-        cmf_meta_types = [ti.Metatype() for ti in ttool.listTypeInfo()]\n-        return [obj[\'id\'] for obj in objs\n-                if obj[\'meta_type\'] in cmf_meta_types]\n-\n-    # BBB\n-    getCMFObjectsSubsetIds = getIdsSubset\n-\n-    security.declareProtected(ModifyPortalContent, \'getObjectPosition\')\n-\n-    def getObjectPosition(self, id):\n-        try:\n-            pos = OrderSupport.getObjectPosition(self, id)\n-        except ValueError:\n-            raise NotFound(\'Object %s was not found\' % str(id))\n-\n-        return pos\n-\n-    def manage_renameObject(self, id, new_id, REQUEST=None):\n-        """Rename a particular sub-object."""\n-        objidx = self.getObjectPosition(id)\n-        method = OrderedContainer.inheritedAttribute(\'manage_renameObject\')\n-        result = method(self, id, new_id, REQUEST)\n-        self.moveObject(new_id, objidx)\n-        putils = getToolByName(self, \'plone_utils\')\n-        putils.reindexOnReorder(self)\n-        return result\n-\n-InitializeClass(OrderedContainer)\n-\n-\n-@implementer(IWriteLock)\n-class BasePloneFolder(CatalogAware, WorkflowAware, OpaqueItemManager,\n-                      PortalFolderBase, DefaultDublinCoreImpl):\n-    """Implements basic Plone folder functionality except ordering support.\n-    """\n-\n-    security = ClassSecurityInfo()\n-\n-    manage_options = Folder.manage_options + \\\n-        WorkflowAware.manage_options\n-\n-    # Fix permissions set by CopySupport.py\n-    __ac_permissions__ = (\n-        (\'Modify portal content\',\n-         (\'manage_cutObjects\', \'manage_pasteObjects\',\n-          \'manage_renameForm\', \'manage_renameObject\',\n-          \'manage_renameObjects\', )),\n-    )\n-\n-    security.declareProtected(Permissions.copy_or_move, \'manage_copyObjects\')\n-\n-    def __init__(self, id, title=\'\'):\n-        DefaultDublinCoreImpl.__init__(self)\n-        self.id = id\n-        self.title = title\n-\n-    def __call__(self):\n-        """Invokes the default view."""\n-        ti = self.getTypeInfo()\n-        method_id = ti and ti.queryMethodId(\'(Default)\', context=self)\n-        if method_id:\n-            method = getattr(self, method_id)\n-            # XXX view is not defined!\n-            if getattr(aq_base(view), \'isDocTemp\', 0):\n-                return method(self, self.REQUEST, self.REQUEST[\'RESPONSE\'])\n-            else:\n-                return method()\n-        else:\n-            raise NotFound(\'Cannot find default view for "%s"\' %\n-                           \'/\'.join(self.getPhysicalPath()))\n-\n-    security.declareProtected(Permissions.view, \'view\')\n-    view = __call__\n-\n-    def index_html(self):\n-        """ Acquire if not present. """\n-        request = getattr(self, \'REQUEST\', None)\n-        if (\n-            request is not None\n-            and \'REQUEST_METHOD\' in request\n-            and request.maybe_webdav_client\n-        ):\n-            method = request[\'REQUEST_METHOD\']\n-            if bbb.HAS_ZSERVER and method in (\'PUT\', ):\n-                # Very likely a WebDAV client trying to create something\n-                result = NullResource(self, \'index_html\')\n-                setattr(result, \'__replaceable__\', REPLACEABLE)\n-                return result\n-            elif method not in (\'GET\', \'HEAD\', \'POST\'):\n-                raise AttributeError(\'index_html\')\n-        # Acquire from skin.\n-        _target = self.__getattr__(\'index_html\')\n-        result = aq_base(_target).__of__(self)\n-        setattr(result, \'__replaceable__\', REPLACEABLE)\n-        return result\n-\n-    index_html = ComputedAttribute(index_html, 1)\n-\n-    security.declareProtected(AddPortalFolders, \'manage_addPloneFolder\')\n-\n-    def manage_addPloneFolder(self, id, title=\'\', REQUEST=None):\n-        """Adds a new PloneFolder."""\n-        ob = PloneFolder(id, title)\n-        self._setObject(id, ob)\n-        if REQUEST is not None:\n-            # TODO HARDCODED FIXME!\n-            return self.folder_contents(self, REQUEST)\n-\n-    manage_addFolder = manage_addPloneFolder\n-    manage_renameObject = PortalFolderBase.manage_renameObject\n-\n-    security.declareProtected(Permissions.delete_objects, \'manage_delObjects\')\n-\n-    def manage_delObjects(self, ids=None, REQUEST=None):\n-        """We need to enforce security."""\n-        if ids is None:\n-            ids = []\n-        mt = getToolByName(self, \'portal_membership\')\n-        if isinstance(ids, str):\n-            ids = [ids]\n-        for id in ids:\n-            item = self._getOb(id)\n-            if not mt.checkPermission(Permissions.delete_objects, item):\n-                raise Unauthorized(\n-                    "Do not have permissions to remove this object")\n-        return PortalFolderBase.manage_delObjects(self, ids, REQUEST=REQUEST)\n-\n-    def __browser_default__(self, request):\n-        """Set default so we can return whatever we want instead\n-        of index_html."""\n-        return getToolByName(self, \'plone_utils\').browserDefault(self)\n-\n-    security.declarePublic(\'contentValues\')\n-\n-    def contentValues(self, filter=None, sort_on=None, reverse=0):\n-        # Able to sort on field.\n-        values = PortalFolderBase.contentValues(self, filter=filter)\n-        if sort_on is not None:\n-            values.sort(lambda x, y,\n-                        sort_on=sort_on: safe_cmp(getattr(x, sort_on),\n-                                                  getattr(y, sort_on)))\n-        if reverse:\n-            values.reverse()\n-\n-        return values\n-\n-    security.declareProtected(ListFolderContents, \'listFolderContents\')\n-\n-    def listFolderContents(self, contentFilter=None,\n-                           suppressHiddenFiles=0):\n-        # Optionally you can suppress "hidden" files, or files that\n-        # begin with \'.\'\n-        contents = PortalFolderBase.listFolderContents(self,\n-                                                       contentFilter=contentFilter)\n-        if suppressHiddenFiles:\n-            contents = [obj for obj in contents if obj.getId()[:1] != \'.\']\n-        return contents\n-\n-    security.declareProtected(AccessContentsInformation,\n-                              \'folderlistingFolderContents\')\n-\n-    def folderlistingFolderContents(self, contentFilter=None,\n-                                    suppressHiddenFiles=0):\n-        # Calls listFolderContents in protected only by ACI so that\n-        # folder_listing can work without the List folder contents permission.\n-        return self.listFolderContents(contentFilter, suppressHiddenFiles)\n-\n-    # Override CMFCore\'s invokeFactory to return the id returned by the\n-    # factory in case the factory modifies the id\n-    security.declareProtected(AddPortalContent, \'invokeFactory\')\n-\n-    def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kw):\n-        # Invokes the portal_types tool.\n-        pt = getToolByName(self, \'portal_types\')\n-        myType = pt.getTypeInfo(self)\n-        if myType is not None:\n-            if not myType.allowType(type_name):\n-                raise ValueError(\'Disallowed subobject type: %s\' % type_name)\n-        args = (type_name, self, id, RESPONSE) + args\n-        new_id = pt.constructContent(*args, **kw)\n-        if new_id is None or new_id == \'\':\n-            new_id = id\n-        return new_id\n-\n-\n-InitializeClass(BasePloneFolder)\n-\n-\n-class PloneFolder(BasePloneFolder, OrderedContainer):\n-    """A Plone Folder."""\n-    meta_type = \'Plone Folder\'\n-    security = ClassSecurityInfo()\n-\n-    manage_renameObject = OrderedContainer.manage_renameObject\n-    security.declareProtected(Permissions.copy_or_move, \'manage_copyObjects\')\n-\n-InitializeClass(PloneFolder)\n-\n-\n-def safe_cmp(x, y):\n-    if callable(x):\n-        x = x()\n-    if callable(y):\n-        y = y()\n-    return cmp(x, y)\n-\n-\n-def addPloneFolder(self, id, title=\'\', description=\'\', REQUEST=None):\n-    """Adds a Plone Folder."""\n-    sf = PloneFolder(id, title=title)\n-    sf.description = description\n-    self._setObject(id, sf)\n-    if REQUEST is not None:\n-        REQUEST[\'RESPONSE\'].redirect(sf.absolute_url() + \'/manage_main\')\ndiff --git a/Products/CMFPlone/PloneTool.py b/Products/CMFPlone/PloneTool.py\nindex 5123a27af5..87f6c09683 100644\n--- a/Products/CMFPlone/PloneTool.py\n+++ b/Products/CMFPlone/PloneTool.py\n@@ -37,7 +37,6 @@\n from Products.CMFPlone.log import log_deprecated\n from Products.CMFPlone.log import log_exc\n from Products.CMFPlone.PloneBaseTool import PloneBaseTool\n-from Products.CMFPlone.PloneFolder import ReplaceableWrapper\n from Products.CMFPlone.utils import base_hasattr\n from Products.CMFPlone.utils import safe_hasattr\n from Products.CMFPlone.utils import transaction_note\n@@ -617,7 +616,7 @@ def browserDefault(self, obj):\n         # 7. If nothing else is found, fall back on the object\'s \'view\' action.\n         # 8. If this is not found, raise an AttributeError\n \n-        # WebDAV in Zope is odd it takes the incoming verb eg: PROPFIND\n+        # 0. WebDAV in Zope is odd it takes the incoming verb eg: PROPFIND\n         # and then requests that object, for example for: /, with verb PROPFIND\n         # means acquire PROPFIND from the folder and call it\n         # its all very odd and WebDAV\'y\n@@ -630,20 +629,9 @@ def browserDefault(self, obj):\n         #\n         # 1. Get an attribute or contained object index_html\n         #\n-\n-        # Note: The base PloneFolder, as well as ATCT\'s ATCTOrderedFolder\n-        # defines a method index_html() which returns a ReplaceableWrapper.\n-        # This is needed for WebDAV to work properly, and to avoid implicit\n-        # acquisition of index_html\'s, which are generally on-object only.\n-        # For the purposes of determining a default page, we don\'t want to\n-        # use this index_html(), nor the ComputedAttribute which defines it.\n-\n-        if not isinstance(getattr(obj, \'index_html\', None),\n-                          ReplaceableWrapper):\n-            index_obj = getattr(aq_base(obj), \'index_html\', None)\n-            if index_obj is not None \\\n-                    and not isinstance(index_obj, ComputedAttribute):\n-                return obj, [\'index_html\']\n+        index_obj = getattr(aq_base(obj), \'index_html\', None)\n+        if index_obj is not None and not isinstance(index_obj, ComputedAttribute):\n+            return obj, [\'index_html\']\n \n         #\n         # 2. Look for a default_page managed by an IBrowserDefault-implementing\ndiff --git a/Products/CMFPlone/__init__.py b/Products/CMFPlone/__init__.py\nindex e3778648fb..592d2e4264 100644\n--- a/Products/CMFPlone/__init__.py\n+++ b/Products/CMFPlone/__init__.py\n@@ -131,14 +131,6 @@ def initialize(context):\n     # pipeline registry\n     from Products.CMFPlone import UnicodeSplitter  # noqa\n \n-    # Plone content\n-\n-    # Usage of PloneFolder is discouraged.\n-    from Products.CMFPlone import PloneFolder\n-\n-    contentClasses = (PloneFolder.PloneFolder, )\n-    contentConstructors = (PloneFolder.addPloneFolder, )\n-\n     # CMFCore tools\n     from Products.CMFCore import CachingPolicyManager\n \n@@ -182,12 +174,6 @@ def initialize(context):\n         icon=\'tool.gif\',\n     ).initialize(context)\n \n-    ContentInit(\n-        \'Plone Content\',\n-        content_types=contentClasses,\n-        permission=ADD_CONTENT_PERMISSION,\n-        extra_constructors=contentConstructors,\n-    ).initialize(context)\n \n     from AccessControl.Permissions import view_management_screens\n     from Products.CMFPlone.Portal import PloneSite\ndiff --git a/Products/CMFPlone/tests/testBrowserDefault.py b/Products/CMFPlone/tests/testBrowserDefault.py\nindex 19810f91b5..ace5f9a80e 100644\n--- a/Products/CMFPlone/tests/testBrowserDefault.py\n+++ b/Products/CMFPlone/tests/testBrowserDefault.py\n@@ -10,7 +10,6 @@\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n from Products.CMFPlone.utils import _createObjectByType\n from plone.base.utils import safe_text\n-from Products.CMFPlone.PloneFolder import ReplaceableWrapper\n from zope.component import getUtility\n \n import difflib\n@@ -166,7 +165,7 @@ def testBrowserDefaultMixinFileDumpsContent(self):\n         data = self.portal.file.file.data\n         self.assertEqual(self.browser.contents.encode(\'utf8\'), data)\n \n-    # Ensure index_html acquisition and replaceablewrapper\n+    # Ensure index_html acquisition\n \n     def testIndexHtmlNotAcquired(self):\n         self.portal.folder.invokeFactory(\'Document\', \'index_html\')\n@@ -177,12 +176,6 @@ def testIndexHtmlNotAcquired(self):\n             (self.portal.folder.subfolder, [layout])\n         )\n \n-    def testIndexHtmlReplaceableWrapper(self):\n-        self.portal.document.index_html = ReplaceableWrapper(None)\n-        layout = self.portal.document.getLayout()\n-        self.assertEqual(self.putils.browserDefault(self.portal.document),\n-                         (self.portal.document, [layout]))\n-\n     # Test behaviour of __call__\n \n     def testCallDocumentGivesTemplate(self):\ndiff --git a/Products/CMFPlone/tests/testInterfaces.py b/Products/CMFPlone/tests/testInterfaces.py\nindex e8ffa50302..833ef3b456 100644\n--- a/Products/CMFPlone/tests/testInterfaces.py\n+++ b/Products/CMFPlone/tests/testInterfaces.py\n@@ -4,9 +4,6 @@\n from Products.CMFPlone.MigrationTool import MigrationTool\n from Products.CMFPlone.PloneControlPanel import PloneConfiglet\n from Products.CMFPlone.PloneControlPanel import PloneControlPanel\n-from Products.CMFPlone.PloneFolder import BasePloneFolder\n-from Products.CMFPlone.PloneFolder import OrderedContainer\n-from Products.CMFPlone.PloneFolder import PloneFolder\n from Products.CMFPlone.PloneTool import PloneTool\n from Products.CMFPlone.Portal import PloneSite\n from Products.CMFPlone.PropertiesTool import PropertiesTool\n@@ -261,7 +258,6 @@ def _testStuff(self):\n     (CatalogTool, ()),\n     (MigrationTool, ()),\n     (PloneControlPanel, ()), (PloneConfiglet, ()),\n-    (OrderedContainer, ()), (BasePloneFolder, ()), (PloneFolder, ()),\n     (PloneTool, ()),\n     (PloneSite, ()),\n     (PropertiesTool, ()), (SimpleItemWithProperties, ()),\ndiff --git a/Products/CMFPlone/tests/testNavTree.py b/Products/CMFPlone/tests/testNavTree.py\nindex 6851386e1f..efd469252c 100644\n--- a/Products/CMFPlone/tests/testNavTree.py\n+++ b/Products/CMFPlone/tests/testNavTree.py\n@@ -1,26 +1,21 @@\n-from Products.CMFPlone.tests import PloneTestCase\n-\n-from Products.CMFCore.utils import getToolByName\n-\n from plone.app.layout.navigation.interfaces import INavigationRoot\n-\n-from plone.app.layout.navigation.navtree import NavtreeStrategyBase\n from plone.app.layout.navigation.navtree import buildFolderTree\n+from plone.app.layout.navigation.navtree import NavtreeStrategyBase\n from plone.app.layout.navigation.root import getNavigationRoot\n-\n+from plone.base.interfaces import INonStructuralFolder\n+from Products.CMFCore.CMFCatalogAware import CatalogAware\n+from Products.CMFCore.PortalFolder import PortalFolderBase\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.tests import PloneTestCase\n from zope.interface import directlyProvides\n from zope.interface import implementer\n \n \n-from Products.CMFPlone.PloneFolder import PloneFolder\n-from plone.base.interfaces import INonStructuralFolder\n-\n default_user = PloneTestCase.default_user\n \n \n-\n @implementer(INonStructuralFolder)\n-class DummyNonStructuralFolder(PloneFolder):\n+class DummyNonStructuralFolder(CatalogAware, PortalFolderBase):\n     pass\n \n \ndiff --git a/Products/CMFPlone/tests/testPloneFolder.py b/Products/CMFPlone/tests/testPloneFolder.py\ndeleted file mode 100644\nindex 757b6129f6..0000000000\n--- a/Products/CMFPlone/tests/testPloneFolder.py\n+++ /dev/null\n@@ -1,176 +0,0 @@\n-from Products.CMFPlone.tests import PloneTestCase\n-from Products.CMFPlone.tests import dummy\n-\n-from Products.CMFPlone.utils import _createObjectByType\n-\n-from zExceptions import Unauthorized\n-from Products.CMFCore.permissions import DeleteObjects\n-\n-from zExceptions import BadRequest\n-from zExceptions.unauthorized import Unauthorized as zUnauthorized\n-\n-\n-class TestPloneFolder(PloneTestCase.PloneTestCase):\n-\n-    def afterSetUp(self):\n-        # Create a bunch of subfolders\n-        self.folder.invokeFactory(\'Folder\', id=\'sub1\')\n-        self.folder.invokeFactory(\'Folder\', id=\'sub2\')\n-        self.folder.invokeFactory(\'Folder\', id=\'sub3\')\n-\n-    def testGetObjectPosition(self):\n-        self.assertEqual(self.folder.getObjectPosition(\'sub1\'), 0)\n-\n-    def testGetObjectPositionRaisesError(self):\n-        self.assertRaises(ValueError, self.folder.getObjectPosition, \'foobar\')\n-\n-    def testSortOrder(self):\n-        self.assertEqual(self.folder.objectIds(),\n-                         [\'sub1\', \'sub2\', \'sub3\'])\n-\n-    def testCanViewManagementScreen(self):\n-        # Make sure the ZMI management screen works\n-        self.folder.manage_main()\n-\n-\n-class TestCheckIdAvailable(PloneTestCase.PloneTestCase):\n-    # PortalFolder.checkIdAvailable() did not properly catch\n-    # zExceptions.BadRequest.\n-    # Fixed in CMFCore.PortalFolder, not Plone.\n-\n-    def testSetObjectRaisesBadRequest(self):\n-        # _setObject() should raise zExceptions.BadRequest\n-        # on duplicate id.\n-        self.folder._setObject(\'foo\', dummy.Item())\n-        try:\n-            self.folder._setObject(\'foo\', dummy.Item())\n-        except BadRequest:\n-            pass\n-\n-    def testCheckIdRaisesBadRequest(self):\n-        # _checkId() should raise zExceptions.BadRequest\n-        # on duplicate id.\n-        self.folder._setObject(\'foo\', dummy.Item())\n-        try:\n-            self.folder._checkId(\'foo\')\n-        except BadRequest:\n-            pass\n-\n-    def testCheckIdAvailableCatchesBadRequest(self):\n-        # checkIdAvailable() should catch zExceptions.BadRequest\n-        self.folder._setObject(\'foo\', dummy.Item())\n-        self.assertFalse(self.folder.checkIdAvailable(\'foo\'))\n-\n-\n-class TestFolderListing(PloneTestCase.PloneTestCase):\n-    # Tests for http://dev.plone.org/plone/ticket/3512\n-\n-    def afterSetUp(self):\n-        self.workflow = self.portal.portal_workflow\n-        # Create some objects to list\n-        self.folder.invokeFactory(\'Folder\', id=\'sub1\')\n-        self.folder.invokeFactory(\'Folder\', id=\'sub2\')\n-        self.folder.invokeFactory(\'Document\', id=\'doc1\')\n-        self.folder.invokeFactory(\'Document\', id=\'doc2\')\n-        self.setupAuthenticator()\n-\n-    def _contentIds(self, folder):\n-        return [ob.getId() for ob in folder.listFolderContents()]\n-\n-    def testListFolderContentsOmitsPrivateObjects(self):\n-        self.workflow.doActionFor(self.folder.doc1, \'hide\')\n-        self.logout()\n-        self.assertEqual(self._contentIds(self.folder),\n-                         [\'sub1\', \'sub2\', \'doc2\'])\n-\n-    def testListFolderContentsOmitsPrivateFolders(self):\n-        self.workflow.doActionFor(self.folder.sub1, \'hide\')\n-        self.logout()\n-        self.assertEqual(self._contentIds(self.folder),\n-                         [\'sub2\', \'doc1\', \'doc2\'])\n-\n-    def testBugReport(self):\n-        # Perform the steps-to-reproduce in the collector issue:\n-\n-        # 2)\n-        self.folder.invokeFactory(\'Folder\', id=\'A\')\n-        self.workflow.doActionFor(self.folder.A, \'publish\')\n-\n-        self.logout()\n-        self.assertEqual(self._contentIds(self.folder.A), [])\n-\n-        # 3)\n-        self.login()\n-        self.folder.A.invokeFactory(\'Document\', id=\'B\')\n-        self.folder.A.B.manage_permission(\'View\', [\'Manager\', \'Reviewer\'],\n-                                          acquire=0)\n-\n-        self.logout()\n-        self.assertEqual(self._contentIds(self.folder.A), [])\n-\n-        # 4)\n-        self.login()\n-        self.folder.A.invokeFactory(\'Folder\', id=\'C\')\n-        self.folder.A.C.manage_permission(\'View\', [\'Manager\', \'Reviewer\'],\n-                                          acquire=0)\n-\n-        # Here comes the reported bug:\n-        self.logout()\n-        self.assertEqual(self._contentIds(self.folder.A), [\'C\'])\n-\n-        # 4a)\n-        # BUT: removing \'View\' is simply not enough!\n-        # When using the workflow all is fine:\n-        self.login()\n-        self.workflow.doActionFor(self.folder.A.C, \'hide\')\n-\n-        self.logout()\n-        self.assertEqual(self._contentIds(self.folder.A), [])\n-\n-\n-class TestManageDelObjects(PloneTestCase.PloneTestCase):\n-    # manage_delObjects should check \'Delete objects\'\n-    # permission on contained items.\n-\n-    def afterSetUp(self):\n-        # Create a bunch of folders\n-        self.folder.invokeFactory(\'Folder\', id=\'sub1\')\n-        self.sub1 = self.folder.sub1\n-        self.sub1.invokeFactory(\'Folder\', id=\'sub2\')\n-        self.sub2 = self.sub1.sub2\n-\n-    def testManageDelObjects(self):\n-        # Should be able to delete sub1\n-        self.folder.manage_delObjects(\'sub1\')\n-        self.assertFalse(\'sub1\' in self.folder.objectIds())\n-\n-    def testManageDelObjectsIfSub1Denied(self):\n-        # Should NOT be able to delete sub1 due to permission checks in\n-        # Archetypes.BaseFolder.manage_delObjects().\n-        self.sub1.manage_permission(DeleteObjects, [\'Manager\'], acquire=0)\n-        self.assertRaises(zUnauthorized, self.folder.manage_delObjects, \'sub1\')\n-\n-    def testManageDelObjectsIfSub2Denied(self):\n-        # We are able to delete sub1 if sub2 is denied\n-        # -> the check is only 1 level deep!\n-        self.sub2.manage_permission(DeleteObjects, [\'Manager\'], acquire=0)\n-        self.folder.manage_delObjects(\'sub1\')\n-        self.assertFalse(\'sub1\' in self.folder.objectIds())\n-\n-\n-class TestManageDelObjectsInPortal(PloneTestCase.PloneTestCase):\n-\n-    def afterSetUp(self):\n-        _createObjectByType(\'Folder\', self.portal, id=\'sub1\')\n-        self.sub1 = self.portal.sub1\n-\n-    def testManageDelObjects(self):\n-        # Should be able to delete sub1\n-        self.portal.manage_delObjects(\'sub1\')\n-        self.assertFalse(\'sub1\' in self.portal.objectIds())\n-\n-    def testManageDelObjectsIfSub1Denied(self):\n-        # Should be able to delete sub1 as the portal does not implement\n-        # additional permission checks.\n-        self.sub1.manage_permission(DeleteObjects, [\'Manager\'], acquire=0)\n-        self.assertRaises(zUnauthorized, self.portal.manage_delObjects, \'sub1\')\ndiff --git a/news/3492.breaking b/news/3492.breaking\nnew file mode 100644\nindex 0000000000..ed0636aaf2\n--- /dev/null\n+++ b/news/3492.breaking\n@@ -0,0 +1,3 @@\n+`PloneFolder` was once used with early Archetypes. \n+This code is dead now and got removed.\n+[jensens]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-04-10T21:55:51+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/fc0eaf1bb98676b9029a897750620e9198740db8

Merge pull request #3492 from plone/rm-plonefolder

Remove  PloneFolder, dead code.

Files changed:
A news/3492.breaking
M Products/CMFPlone/PloneTool.py
M Products/CMFPlone/__init__.py
M Products/CMFPlone/tests/testBrowserDefault.py
M Products/CMFPlone/tests/testInterfaces.py
M Products/CMFPlone/tests/testNavTree.py
D Products/CMFPlone/PloneFolder.py
D Products/CMFPlone/tests/testPloneFolder.py

b'diff --git a/Products/CMFPlone/PloneFolder.py b/Products/CMFPlone/PloneFolder.py\ndeleted file mode 100644\nindex fb7624ea54..0000000000\n--- a/Products/CMFPlone/PloneFolder.py\n+++ /dev/null\n@@ -1,292 +0,0 @@\n-from AccessControl import ClassSecurityInfo\n-from AccessControl import Permissions\n-from AccessControl import Unauthorized\n-from AccessControl.class_init import InitializeClass\n-from Acquisition import aq_base\n-from Acquisition import aq_inner\n-from Acquisition import aq_parent\n-from ComputedAttribute import ComputedAttribute\n-from OFS.Folder import Folder\n-from OFS.ObjectManager import REPLACEABLE\n-from OFS.OrderSupport import OrderSupport\n-from plone.memoize import view\n-from Products.CMFCore.CMFCatalogAware import CatalogAware\n-from Products.CMFCore.CMFCatalogAware import OpaqueItemManager\n-from Products.CMFCore.CMFCatalogAware import WorkflowAware\n-from Products.CMFCore.permissions import AccessContentsInformation\n-from Products.CMFCore.permissions import AddPortalContent\n-from Products.CMFCore.permissions import AddPortalFolders\n-from Products.CMFCore.permissions import ListFolderContents\n-from Products.CMFCore.permissions import ModifyPortalContent\n-from Products.CMFCore.PortalFolder import PortalFolderBase\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import bbb\n-from Products.CMFPlone.DublinCore import DefaultDublinCoreImpl\n-from zExceptions import NotFound\n-from zope.interface import implementer\n-\n-import warnings\n-\n-\n-if bbb.HAS_ZSERVER:\n-    from webdav.NullResource import NullResource\n-    from webdav.interfaces import IWriteLock\n-else:\n-    from OFS.interfaces import IWriteLock\n-    NullResource = bbb.NullResource\n-\n-\n-class ReplaceableWrapper:\n-    """A wrapper around an object to make it replaceable."""\n-\n-    def __init__(self, ob):\n-        warnings.warn(\n-            \'ReplaceableWrapper is deprecated. Planned removal in Plone 6.0\',\n-            DeprecationWarning,\n-        )\n-        self.__ob = ob\n-\n-    def __getattr__(self, name):\n-        if name == \'__replaceable__\':\n-            return REPLACEABLE\n-        return getattr(self.__ob, name)\n-\n-\n-class OrderedContainer(Folder, OrderSupport):\n-    """Folder with subobject ordering support."""\n-\n-    security = ClassSecurityInfo()\n-\n-    security.declareProtected(ModifyPortalContent, \'moveObject\')\n-\n-    def moveObject(self, id, position):\n-        obj_idx = self.getObjectPosition(id)\n-        if obj_idx == position:\n-            return None\n-        elif position < 0:\n-            position = 0\n-\n-        metadata = list(self._objects)\n-        obj_meta = metadata.pop(obj_idx)\n-        metadata.insert(position, obj_meta)\n-        self._objects = tuple(metadata)\n-\n-    security.declarePrivate(\'getIdsSubset\')\n-\n-    def getIdsSubset(self, objs):\n-        # Get the ids of only cmf objects (used for moveObjectsByDelta).\n-        ttool = getToolByName(self, \'portal_types\')\n-        cmf_meta_types = [ti.Metatype() for ti in ttool.listTypeInfo()]\n-        return [obj[\'id\'] for obj in objs\n-                if obj[\'meta_type\'] in cmf_meta_types]\n-\n-    # BBB\n-    getCMFObjectsSubsetIds = getIdsSubset\n-\n-    security.declareProtected(ModifyPortalContent, \'getObjectPosition\')\n-\n-    def getObjectPosition(self, id):\n-        try:\n-            pos = OrderSupport.getObjectPosition(self, id)\n-        except ValueError:\n-            raise NotFound(\'Object %s was not found\' % str(id))\n-\n-        return pos\n-\n-    def manage_renameObject(self, id, new_id, REQUEST=None):\n-        """Rename a particular sub-object."""\n-        objidx = self.getObjectPosition(id)\n-        method = OrderedContainer.inheritedAttribute(\'manage_renameObject\')\n-        result = method(self, id, new_id, REQUEST)\n-        self.moveObject(new_id, objidx)\n-        putils = getToolByName(self, \'plone_utils\')\n-        putils.reindexOnReorder(self)\n-        return result\n-\n-InitializeClass(OrderedContainer)\n-\n-\n-@implementer(IWriteLock)\n-class BasePloneFolder(CatalogAware, WorkflowAware, OpaqueItemManager,\n-                      PortalFolderBase, DefaultDublinCoreImpl):\n-    """Implements basic Plone folder functionality except ordering support.\n-    """\n-\n-    security = ClassSecurityInfo()\n-\n-    manage_options = Folder.manage_options + \\\n-        WorkflowAware.manage_options\n-\n-    # Fix permissions set by CopySupport.py\n-    __ac_permissions__ = (\n-        (\'Modify portal content\',\n-         (\'manage_cutObjects\', \'manage_pasteObjects\',\n-          \'manage_renameForm\', \'manage_renameObject\',\n-          \'manage_renameObjects\', )),\n-    )\n-\n-    security.declareProtected(Permissions.copy_or_move, \'manage_copyObjects\')\n-\n-    def __init__(self, id, title=\'\'):\n-        DefaultDublinCoreImpl.__init__(self)\n-        self.id = id\n-        self.title = title\n-\n-    def __call__(self):\n-        """Invokes the default view."""\n-        ti = self.getTypeInfo()\n-        method_id = ti and ti.queryMethodId(\'(Default)\', context=self)\n-        if method_id:\n-            method = getattr(self, method_id)\n-            # XXX view is not defined!\n-            if getattr(aq_base(view), \'isDocTemp\', 0):\n-                return method(self, self.REQUEST, self.REQUEST[\'RESPONSE\'])\n-            else:\n-                return method()\n-        else:\n-            raise NotFound(\'Cannot find default view for "%s"\' %\n-                           \'/\'.join(self.getPhysicalPath()))\n-\n-    security.declareProtected(Permissions.view, \'view\')\n-    view = __call__\n-\n-    def index_html(self):\n-        """ Acquire if not present. """\n-        request = getattr(self, \'REQUEST\', None)\n-        if (\n-            request is not None\n-            and \'REQUEST_METHOD\' in request\n-            and request.maybe_webdav_client\n-        ):\n-            method = request[\'REQUEST_METHOD\']\n-            if bbb.HAS_ZSERVER and method in (\'PUT\', ):\n-                # Very likely a WebDAV client trying to create something\n-                result = NullResource(self, \'index_html\')\n-                setattr(result, \'__replaceable__\', REPLACEABLE)\n-                return result\n-            elif method not in (\'GET\', \'HEAD\', \'POST\'):\n-                raise AttributeError(\'index_html\')\n-        # Acquire from skin.\n-        _target = self.__getattr__(\'index_html\')\n-        result = aq_base(_target).__of__(self)\n-        setattr(result, \'__replaceable__\', REPLACEABLE)\n-        return result\n-\n-    index_html = ComputedAttribute(index_html, 1)\n-\n-    security.declareProtected(AddPortalFolders, \'manage_addPloneFolder\')\n-\n-    def manage_addPloneFolder(self, id, title=\'\', REQUEST=None):\n-        """Adds a new PloneFolder."""\n-        ob = PloneFolder(id, title)\n-        self._setObject(id, ob)\n-        if REQUEST is not None:\n-            # TODO HARDCODED FIXME!\n-            return self.folder_contents(self, REQUEST)\n-\n-    manage_addFolder = manage_addPloneFolder\n-    manage_renameObject = PortalFolderBase.manage_renameObject\n-\n-    security.declareProtected(Permissions.delete_objects, \'manage_delObjects\')\n-\n-    def manage_delObjects(self, ids=None, REQUEST=None):\n-        """We need to enforce security."""\n-        if ids is None:\n-            ids = []\n-        mt = getToolByName(self, \'portal_membership\')\n-        if isinstance(ids, str):\n-            ids = [ids]\n-        for id in ids:\n-            item = self._getOb(id)\n-            if not mt.checkPermission(Permissions.delete_objects, item):\n-                raise Unauthorized(\n-                    "Do not have permissions to remove this object")\n-        return PortalFolderBase.manage_delObjects(self, ids, REQUEST=REQUEST)\n-\n-    def __browser_default__(self, request):\n-        """Set default so we can return whatever we want instead\n-        of index_html."""\n-        return getToolByName(self, \'plone_utils\').browserDefault(self)\n-\n-    security.declarePublic(\'contentValues\')\n-\n-    def contentValues(self, filter=None, sort_on=None, reverse=0):\n-        # Able to sort on field.\n-        values = PortalFolderBase.contentValues(self, filter=filter)\n-        if sort_on is not None:\n-            values.sort(lambda x, y,\n-                        sort_on=sort_on: safe_cmp(getattr(x, sort_on),\n-                                                  getattr(y, sort_on)))\n-        if reverse:\n-            values.reverse()\n-\n-        return values\n-\n-    security.declareProtected(ListFolderContents, \'listFolderContents\')\n-\n-    def listFolderContents(self, contentFilter=None,\n-                           suppressHiddenFiles=0):\n-        # Optionally you can suppress "hidden" files, or files that\n-        # begin with \'.\'\n-        contents = PortalFolderBase.listFolderContents(self,\n-                                                       contentFilter=contentFilter)\n-        if suppressHiddenFiles:\n-            contents = [obj for obj in contents if obj.getId()[:1] != \'.\']\n-        return contents\n-\n-    security.declareProtected(AccessContentsInformation,\n-                              \'folderlistingFolderContents\')\n-\n-    def folderlistingFolderContents(self, contentFilter=None,\n-                                    suppressHiddenFiles=0):\n-        # Calls listFolderContents in protected only by ACI so that\n-        # folder_listing can work without the List folder contents permission.\n-        return self.listFolderContents(contentFilter, suppressHiddenFiles)\n-\n-    # Override CMFCore\'s invokeFactory to return the id returned by the\n-    # factory in case the factory modifies the id\n-    security.declareProtected(AddPortalContent, \'invokeFactory\')\n-\n-    def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kw):\n-        # Invokes the portal_types tool.\n-        pt = getToolByName(self, \'portal_types\')\n-        myType = pt.getTypeInfo(self)\n-        if myType is not None:\n-            if not myType.allowType(type_name):\n-                raise ValueError(\'Disallowed subobject type: %s\' % type_name)\n-        args = (type_name, self, id, RESPONSE) + args\n-        new_id = pt.constructContent(*args, **kw)\n-        if new_id is None or new_id == \'\':\n-            new_id = id\n-        return new_id\n-\n-\n-InitializeClass(BasePloneFolder)\n-\n-\n-class PloneFolder(BasePloneFolder, OrderedContainer):\n-    """A Plone Folder."""\n-    meta_type = \'Plone Folder\'\n-    security = ClassSecurityInfo()\n-\n-    manage_renameObject = OrderedContainer.manage_renameObject\n-    security.declareProtected(Permissions.copy_or_move, \'manage_copyObjects\')\n-\n-InitializeClass(PloneFolder)\n-\n-\n-def safe_cmp(x, y):\n-    if callable(x):\n-        x = x()\n-    if callable(y):\n-        y = y()\n-    return cmp(x, y)\n-\n-\n-def addPloneFolder(self, id, title=\'\', description=\'\', REQUEST=None):\n-    """Adds a Plone Folder."""\n-    sf = PloneFolder(id, title=title)\n-    sf.description = description\n-    self._setObject(id, sf)\n-    if REQUEST is not None:\n-        REQUEST[\'RESPONSE\'].redirect(sf.absolute_url() + \'/manage_main\')\ndiff --git a/Products/CMFPlone/PloneTool.py b/Products/CMFPlone/PloneTool.py\nindex 5123a27af5..87f6c09683 100644\n--- a/Products/CMFPlone/PloneTool.py\n+++ b/Products/CMFPlone/PloneTool.py\n@@ -37,7 +37,6 @@\n from Products.CMFPlone.log import log_deprecated\n from Products.CMFPlone.log import log_exc\n from Products.CMFPlone.PloneBaseTool import PloneBaseTool\n-from Products.CMFPlone.PloneFolder import ReplaceableWrapper\n from Products.CMFPlone.utils import base_hasattr\n from Products.CMFPlone.utils import safe_hasattr\n from Products.CMFPlone.utils import transaction_note\n@@ -617,7 +616,7 @@ def browserDefault(self, obj):\n         # 7. If nothing else is found, fall back on the object\'s \'view\' action.\n         # 8. If this is not found, raise an AttributeError\n \n-        # WebDAV in Zope is odd it takes the incoming verb eg: PROPFIND\n+        # 0. WebDAV in Zope is odd it takes the incoming verb eg: PROPFIND\n         # and then requests that object, for example for: /, with verb PROPFIND\n         # means acquire PROPFIND from the folder and call it\n         # its all very odd and WebDAV\'y\n@@ -630,20 +629,9 @@ def browserDefault(self, obj):\n         #\n         # 1. Get an attribute or contained object index_html\n         #\n-\n-        # Note: The base PloneFolder, as well as ATCT\'s ATCTOrderedFolder\n-        # defines a method index_html() which returns a ReplaceableWrapper.\n-        # This is needed for WebDAV to work properly, and to avoid implicit\n-        # acquisition of index_html\'s, which are generally on-object only.\n-        # For the purposes of determining a default page, we don\'t want to\n-        # use this index_html(), nor the ComputedAttribute which defines it.\n-\n-        if not isinstance(getattr(obj, \'index_html\', None),\n-                          ReplaceableWrapper):\n-            index_obj = getattr(aq_base(obj), \'index_html\', None)\n-            if index_obj is not None \\\n-                    and not isinstance(index_obj, ComputedAttribute):\n-                return obj, [\'index_html\']\n+        index_obj = getattr(aq_base(obj), \'index_html\', None)\n+        if index_obj is not None and not isinstance(index_obj, ComputedAttribute):\n+            return obj, [\'index_html\']\n \n         #\n         # 2. Look for a default_page managed by an IBrowserDefault-implementing\ndiff --git a/Products/CMFPlone/__init__.py b/Products/CMFPlone/__init__.py\nindex e3778648fb..592d2e4264 100644\n--- a/Products/CMFPlone/__init__.py\n+++ b/Products/CMFPlone/__init__.py\n@@ -131,14 +131,6 @@ def initialize(context):\n     # pipeline registry\n     from Products.CMFPlone import UnicodeSplitter  # noqa\n \n-    # Plone content\n-\n-    # Usage of PloneFolder is discouraged.\n-    from Products.CMFPlone import PloneFolder\n-\n-    contentClasses = (PloneFolder.PloneFolder, )\n-    contentConstructors = (PloneFolder.addPloneFolder, )\n-\n     # CMFCore tools\n     from Products.CMFCore import CachingPolicyManager\n \n@@ -182,12 +174,6 @@ def initialize(context):\n         icon=\'tool.gif\',\n     ).initialize(context)\n \n-    ContentInit(\n-        \'Plone Content\',\n-        content_types=contentClasses,\n-        permission=ADD_CONTENT_PERMISSION,\n-        extra_constructors=contentConstructors,\n-    ).initialize(context)\n \n     from AccessControl.Permissions import view_management_screens\n     from Products.CMFPlone.Portal import PloneSite\ndiff --git a/Products/CMFPlone/tests/testBrowserDefault.py b/Products/CMFPlone/tests/testBrowserDefault.py\nindex 19810f91b5..ace5f9a80e 100644\n--- a/Products/CMFPlone/tests/testBrowserDefault.py\n+++ b/Products/CMFPlone/tests/testBrowserDefault.py\n@@ -10,7 +10,6 @@\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n from Products.CMFPlone.utils import _createObjectByType\n from plone.base.utils import safe_text\n-from Products.CMFPlone.PloneFolder import ReplaceableWrapper\n from zope.component import getUtility\n \n import difflib\n@@ -166,7 +165,7 @@ def testBrowserDefaultMixinFileDumpsContent(self):\n         data = self.portal.file.file.data\n         self.assertEqual(self.browser.contents.encode(\'utf8\'), data)\n \n-    # Ensure index_html acquisition and replaceablewrapper\n+    # Ensure index_html acquisition\n \n     def testIndexHtmlNotAcquired(self):\n         self.portal.folder.invokeFactory(\'Document\', \'index_html\')\n@@ -177,12 +176,6 @@ def testIndexHtmlNotAcquired(self):\n             (self.portal.folder.subfolder, [layout])\n         )\n \n-    def testIndexHtmlReplaceableWrapper(self):\n-        self.portal.document.index_html = ReplaceableWrapper(None)\n-        layout = self.portal.document.getLayout()\n-        self.assertEqual(self.putils.browserDefault(self.portal.document),\n-                         (self.portal.document, [layout]))\n-\n     # Test behaviour of __call__\n \n     def testCallDocumentGivesTemplate(self):\ndiff --git a/Products/CMFPlone/tests/testInterfaces.py b/Products/CMFPlone/tests/testInterfaces.py\nindex e8ffa50302..833ef3b456 100644\n--- a/Products/CMFPlone/tests/testInterfaces.py\n+++ b/Products/CMFPlone/tests/testInterfaces.py\n@@ -4,9 +4,6 @@\n from Products.CMFPlone.MigrationTool import MigrationTool\n from Products.CMFPlone.PloneControlPanel import PloneConfiglet\n from Products.CMFPlone.PloneControlPanel import PloneControlPanel\n-from Products.CMFPlone.PloneFolder import BasePloneFolder\n-from Products.CMFPlone.PloneFolder import OrderedContainer\n-from Products.CMFPlone.PloneFolder import PloneFolder\n from Products.CMFPlone.PloneTool import PloneTool\n from Products.CMFPlone.Portal import PloneSite\n from Products.CMFPlone.PropertiesTool import PropertiesTool\n@@ -261,7 +258,6 @@ def _testStuff(self):\n     (CatalogTool, ()),\n     (MigrationTool, ()),\n     (PloneControlPanel, ()), (PloneConfiglet, ()),\n-    (OrderedContainer, ()), (BasePloneFolder, ()), (PloneFolder, ()),\n     (PloneTool, ()),\n     (PloneSite, ()),\n     (PropertiesTool, ()), (SimpleItemWithProperties, ()),\ndiff --git a/Products/CMFPlone/tests/testNavTree.py b/Products/CMFPlone/tests/testNavTree.py\nindex 6851386e1f..efd469252c 100644\n--- a/Products/CMFPlone/tests/testNavTree.py\n+++ b/Products/CMFPlone/tests/testNavTree.py\n@@ -1,26 +1,21 @@\n-from Products.CMFPlone.tests import PloneTestCase\n-\n-from Products.CMFCore.utils import getToolByName\n-\n from plone.app.layout.navigation.interfaces import INavigationRoot\n-\n-from plone.app.layout.navigation.navtree import NavtreeStrategyBase\n from plone.app.layout.navigation.navtree import buildFolderTree\n+from plone.app.layout.navigation.navtree import NavtreeStrategyBase\n from plone.app.layout.navigation.root import getNavigationRoot\n-\n+from plone.base.interfaces import INonStructuralFolder\n+from Products.CMFCore.CMFCatalogAware import CatalogAware\n+from Products.CMFCore.PortalFolder import PortalFolderBase\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.tests import PloneTestCase\n from zope.interface import directlyProvides\n from zope.interface import implementer\n \n \n-from Products.CMFPlone.PloneFolder import PloneFolder\n-from plone.base.interfaces import INonStructuralFolder\n-\n default_user = PloneTestCase.default_user\n \n \n-\n @implementer(INonStructuralFolder)\n-class DummyNonStructuralFolder(PloneFolder):\n+class DummyNonStructuralFolder(CatalogAware, PortalFolderBase):\n     pass\n \n \ndiff --git a/Products/CMFPlone/tests/testPloneFolder.py b/Products/CMFPlone/tests/testPloneFolder.py\ndeleted file mode 100644\nindex 757b6129f6..0000000000\n--- a/Products/CMFPlone/tests/testPloneFolder.py\n+++ /dev/null\n@@ -1,176 +0,0 @@\n-from Products.CMFPlone.tests import PloneTestCase\n-from Products.CMFPlone.tests import dummy\n-\n-from Products.CMFPlone.utils import _createObjectByType\n-\n-from zExceptions import Unauthorized\n-from Products.CMFCore.permissions import DeleteObjects\n-\n-from zExceptions import BadRequest\n-from zExceptions.unauthorized import Unauthorized as zUnauthorized\n-\n-\n-class TestPloneFolder(PloneTestCase.PloneTestCase):\n-\n-    def afterSetUp(self):\n-        # Create a bunch of subfolders\n-        self.folder.invokeFactory(\'Folder\', id=\'sub1\')\n-        self.folder.invokeFactory(\'Folder\', id=\'sub2\')\n-        self.folder.invokeFactory(\'Folder\', id=\'sub3\')\n-\n-    def testGetObjectPosition(self):\n-        self.assertEqual(self.folder.getObjectPosition(\'sub1\'), 0)\n-\n-    def testGetObjectPositionRaisesError(self):\n-        self.assertRaises(ValueError, self.folder.getObjectPosition, \'foobar\')\n-\n-    def testSortOrder(self):\n-        self.assertEqual(self.folder.objectIds(),\n-                         [\'sub1\', \'sub2\', \'sub3\'])\n-\n-    def testCanViewManagementScreen(self):\n-        # Make sure the ZMI management screen works\n-        self.folder.manage_main()\n-\n-\n-class TestCheckIdAvailable(PloneTestCase.PloneTestCase):\n-    # PortalFolder.checkIdAvailable() did not properly catch\n-    # zExceptions.BadRequest.\n-    # Fixed in CMFCore.PortalFolder, not Plone.\n-\n-    def testSetObjectRaisesBadRequest(self):\n-        # _setObject() should raise zExceptions.BadRequest\n-        # on duplicate id.\n-        self.folder._setObject(\'foo\', dummy.Item())\n-        try:\n-            self.folder._setObject(\'foo\', dummy.Item())\n-        except BadRequest:\n-            pass\n-\n-    def testCheckIdRaisesBadRequest(self):\n-        # _checkId() should raise zExceptions.BadRequest\n-        # on duplicate id.\n-        self.folder._setObject(\'foo\', dummy.Item())\n-        try:\n-            self.folder._checkId(\'foo\')\n-        except BadRequest:\n-            pass\n-\n-    def testCheckIdAvailableCatchesBadRequest(self):\n-        # checkIdAvailable() should catch zExceptions.BadRequest\n-        self.folder._setObject(\'foo\', dummy.Item())\n-        self.assertFalse(self.folder.checkIdAvailable(\'foo\'))\n-\n-\n-class TestFolderListing(PloneTestCase.PloneTestCase):\n-    # Tests for http://dev.plone.org/plone/ticket/3512\n-\n-    def afterSetUp(self):\n-        self.workflow = self.portal.portal_workflow\n-        # Create some objects to list\n-        self.folder.invokeFactory(\'Folder\', id=\'sub1\')\n-        self.folder.invokeFactory(\'Folder\', id=\'sub2\')\n-        self.folder.invokeFactory(\'Document\', id=\'doc1\')\n-        self.folder.invokeFactory(\'Document\', id=\'doc2\')\n-        self.setupAuthenticator()\n-\n-    def _contentIds(self, folder):\n-        return [ob.getId() for ob in folder.listFolderContents()]\n-\n-    def testListFolderContentsOmitsPrivateObjects(self):\n-        self.workflow.doActionFor(self.folder.doc1, \'hide\')\n-        self.logout()\n-        self.assertEqual(self._contentIds(self.folder),\n-                         [\'sub1\', \'sub2\', \'doc2\'])\n-\n-    def testListFolderContentsOmitsPrivateFolders(self):\n-        self.workflow.doActionFor(self.folder.sub1, \'hide\')\n-        self.logout()\n-        self.assertEqual(self._contentIds(self.folder),\n-                         [\'sub2\', \'doc1\', \'doc2\'])\n-\n-    def testBugReport(self):\n-        # Perform the steps-to-reproduce in the collector issue:\n-\n-        # 2)\n-        self.folder.invokeFactory(\'Folder\', id=\'A\')\n-        self.workflow.doActionFor(self.folder.A, \'publish\')\n-\n-        self.logout()\n-        self.assertEqual(self._contentIds(self.folder.A), [])\n-\n-        # 3)\n-        self.login()\n-        self.folder.A.invokeFactory(\'Document\', id=\'B\')\n-        self.folder.A.B.manage_permission(\'View\', [\'Manager\', \'Reviewer\'],\n-                                          acquire=0)\n-\n-        self.logout()\n-        self.assertEqual(self._contentIds(self.folder.A), [])\n-\n-        # 4)\n-        self.login()\n-        self.folder.A.invokeFactory(\'Folder\', id=\'C\')\n-        self.folder.A.C.manage_permission(\'View\', [\'Manager\', \'Reviewer\'],\n-                                          acquire=0)\n-\n-        # Here comes the reported bug:\n-        self.logout()\n-        self.assertEqual(self._contentIds(self.folder.A), [\'C\'])\n-\n-        # 4a)\n-        # BUT: removing \'View\' is simply not enough!\n-        # When using the workflow all is fine:\n-        self.login()\n-        self.workflow.doActionFor(self.folder.A.C, \'hide\')\n-\n-        self.logout()\n-        self.assertEqual(self._contentIds(self.folder.A), [])\n-\n-\n-class TestManageDelObjects(PloneTestCase.PloneTestCase):\n-    # manage_delObjects should check \'Delete objects\'\n-    # permission on contained items.\n-\n-    def afterSetUp(self):\n-        # Create a bunch of folders\n-        self.folder.invokeFactory(\'Folder\', id=\'sub1\')\n-        self.sub1 = self.folder.sub1\n-        self.sub1.invokeFactory(\'Folder\', id=\'sub2\')\n-        self.sub2 = self.sub1.sub2\n-\n-    def testManageDelObjects(self):\n-        # Should be able to delete sub1\n-        self.folder.manage_delObjects(\'sub1\')\n-        self.assertFalse(\'sub1\' in self.folder.objectIds())\n-\n-    def testManageDelObjectsIfSub1Denied(self):\n-        # Should NOT be able to delete sub1 due to permission checks in\n-        # Archetypes.BaseFolder.manage_delObjects().\n-        self.sub1.manage_permission(DeleteObjects, [\'Manager\'], acquire=0)\n-        self.assertRaises(zUnauthorized, self.folder.manage_delObjects, \'sub1\')\n-\n-    def testManageDelObjectsIfSub2Denied(self):\n-        # We are able to delete sub1 if sub2 is denied\n-        # -> the check is only 1 level deep!\n-        self.sub2.manage_permission(DeleteObjects, [\'Manager\'], acquire=0)\n-        self.folder.manage_delObjects(\'sub1\')\n-        self.assertFalse(\'sub1\' in self.folder.objectIds())\n-\n-\n-class TestManageDelObjectsInPortal(PloneTestCase.PloneTestCase):\n-\n-    def afterSetUp(self):\n-        _createObjectByType(\'Folder\', self.portal, id=\'sub1\')\n-        self.sub1 = self.portal.sub1\n-\n-    def testManageDelObjects(self):\n-        # Should be able to delete sub1\n-        self.portal.manage_delObjects(\'sub1\')\n-        self.assertFalse(\'sub1\' in self.portal.objectIds())\n-\n-    def testManageDelObjectsIfSub1Denied(self):\n-        # Should be able to delete sub1 as the portal does not implement\n-        # additional permission checks.\n-        self.sub1.manage_permission(DeleteObjects, [\'Manager\'], acquire=0)\n-        self.assertRaises(zUnauthorized, self.portal.manage_delObjects, \'sub1\')\ndiff --git a/news/3492.breaking b/news/3492.breaking\nnew file mode 100644\nindex 0000000000..ed0636aaf2\n--- /dev/null\n+++ b/news/3492.breaking\n@@ -0,0 +1,3 @@\n+`PloneFolder` was once used with early Archetypes. \n+This code is dead now and got removed.\n+[jensens]\n'

