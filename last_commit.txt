Repository: plone.app.registry


Branch: refs/heads/master
Date: 2021-05-12T23:40:22+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.registry/commit/fdbb54247426526fd6174059056cdba0c6b3e0f1

Add JSONField Handler

- for plone.registry.field.JSONField
- add component JSONFieldHandler
- add Tests for Import and Export JSONField
- add towncrier message

Files changed:
A news/48.feature
M plone/app/registry/exportimport/fields.py
M plone/app/registry/exportimport/handlers.zcml
M plone/app/registry/tests/test_exportimport.py

b'diff --git a/news/48.feature b/news/48.feature\nnew file mode 100644\nindex 0000000..d132c31\n--- /dev/null\n+++ b/news/48.feature\n@@ -0,0 +1,5 @@\n+Add JSONField Handler for plone.registry.field.JSONField\n+- add component JSONFieldHandler\n+- add Tests for Import and Export JSONField\n+- add towncrier message\n+[1letter]\n\\ No newline at end of file\ndiff --git a/plone/app/registry/exportimport/fields.py b/plone/app/registry/exportimport/fields.py\nindex 6e4a27f..4632c0f 100644\n--- a/plone/app/registry/exportimport/fields.py\n+++ b/plone/app/registry/exportimport/fields.py\n@@ -7,17 +7,18 @@\n \n class PersistentFieldHandler(BaseHandler):\n     filteredAttributes = BaseHandler.filteredAttributes.copy()\n-    filteredAttributes.update({\'interfaceName\': \'rw\', \'fieldName\': \'rw\'})\n+    filteredAttributes.update({"interfaceName": "rw", "fieldName": "rw"})\n \n \n class PersistentDictHandler(DictHandler):\n     filteredAttributes = DictHandler.filteredAttributes.copy()\n-    filteredAttributes.update({\'interfaceName\': \'rw\', \'fieldName\': \'rw\'})\n+    filteredAttributes.update({"interfaceName": "rw", "fieldName": "rw"})\n \n \n class PersistentChoiceHandler(ChoiceHandler):\n     filteredAttributes = ChoiceHandler.filteredAttributes.copy()\n-    filteredAttributes.update({\'interfaceName\': \'rw\', \'fieldName\': \'rw\'})\n+    filteredAttributes.update({"interfaceName": "rw", "fieldName": "rw"})\n+\n \n # Field import/export handlers\n \n@@ -52,3 +53,5 @@ class PersistentChoiceHandler(ChoiceHandler):\n DictHandler = PersistentDictHandler(field.Dict)\n \n ChoiceHandler = PersistentChoiceHandler(field.Choice)\n+\n+JSONFieldHandler = PersistentFieldHandler(field.JSONField)\ndiff --git a/plone/app/registry/exportimport/handlers.zcml b/plone/app/registry/exportimport/handlers.zcml\nindex a3d9e7a..adf6c7e 100644\n--- a/plone/app/registry/exportimport/handlers.zcml\n+++ b/plone/app/registry/exportimport/handlers.zcml\n@@ -5,90 +5,71 @@\n   <!-- plone.supermodel field handlers -->\n   <utility\n       component=".fields.BytesHandler"\n-      name="plone.registry.field.Bytes"\n-  />\n+      name="plone.registry.field.Bytes" />\n   <utility\n       component=".fields.BytesLineHandler"\n-      name="plone.registry.field.BytesLine"\n-  />\n+      name="plone.registry.field.BytesLine" />\n   <utility\n       component=".fields.ASCIIHandler"\n-      name="plone.registry.field.ASCII"\n-  />\n+      name="plone.registry.field.ASCII" />\n   <utility\n       component=".fields.ASCIILineHandler"\n-      name="plone.registry.field.ASCIILine"\n-  />\n+      name="plone.registry.field.ASCIILine" />\n   <utility\n       component=".fields.TextHandler"\n-      name="plone.registry.field.Text"\n-  />\n+      name="plone.registry.field.Text" />\n   <utility\n       component=".fields.TextLineHandler"\n-      name="plone.registry.field.TextLine"\n-  />\n+      name="plone.registry.field.TextLine" />\n   <utility\n       component=".fields.BoolHandler"\n-      name="plone.registry.field.Bool"\n-  />\n+      name="plone.registry.field.Bool" />\n   <utility\n       component=".fields.IntHandler"\n-      name="plone.registry.field.Int"\n-  />\n+      name="plone.registry.field.Int" />\n   <utility\n       component=".fields.FloatHandler"\n-      name="plone.registry.field.Float"\n-  />\n+      name="plone.registry.field.Float" />\n   <utility\n       component=".fields.TupleHandler"\n-      name="plone.registry.field.Tuple"\n-  />\n+      name="plone.registry.field.Tuple" />\n   <utility\n       component=".fields.ListHandler"\n-      name="plone.registry.field.List"\n-  />\n+      name="plone.registry.field.List" />\n   <utility\n       component=".fields.SetHandler"\n-      name="plone.registry.field.Set"\n-  />\n+      name="plone.registry.field.Set" />\n   <utility\n       component=".fields.FrozenSetHandler"\n-      name="plone.registry.field.FrozenSet"\n-  />\n+      name="plone.registry.field.FrozenSet" />\n   <utility\n       component=".fields.PasswordHandler"\n-      name="plone.registry.field.Password"\n-  />\n+      name="plone.registry.field.Password" />\n   <utility\n       component=".fields.DictHandler"\n-      name="plone.registry.field.Dict"\n-  />\n+      name="plone.registry.field.Dict" />\n   <utility\n       component=".fields.DatetimeHandler"\n-      name="plone.registry.field.Datetime"\n-  />\n+      name="plone.registry.field.Datetime" />\n   <utility\n       component=".fields.DateHandler"\n-      name="plone.registry.field.Date"\n-  />\n+      name="plone.registry.field.Date" />\n   <utility\n       component=".fields.SourceTextHandler"\n-      name="plone.registry.field.SourceText"\n-  />\n+      name="plone.registry.field.SourceText" />\n   <utility\n       component=".fields.URIHandler"\n-      name="plone.registry.field.URI"\n-  />\n+      name="plone.registry.field.URI" />\n   <utility\n       component=".fields.IdHandler"\n-      name="plone.registry.field.Id"\n-  />\n+      name="plone.registry.field.Id" />\n   <utility\n       component=".fields.DottedNameHandler"\n-      name="plone.registry.field.DottedName"\n-  />\n+      name="plone.registry.field.DottedName" />\n   <utility\n       component=".fields.ChoiceHandler"\n-      name="plone.registry.field.Choice"\n-  />\n+      name="plone.registry.field.Choice" />\n+  <utility\n+      component=".fields.JSONFieldHandler"\n+      name="plone.registry.field.JSONField" />\n </configure>\ndiff --git a/plone/app/registry/tests/test_exportimport.py b/plone/app/registry/tests/test_exportimport.py\nindex 8a97391..76ab24b 100644\n--- a/plone/app/registry/tests/test_exportimport.py\n+++ b/plone/app/registry/tests/test_exportimport.py\n@@ -14,7 +14,9 @@\n from plone.registry.interfaces import IRegistry\n from plone.supermodel.utils import prettyXML\n from plone.testing import zca\n-from Products.GenericSetup.tests.common import DummyImportContext as BaseDummyImportContext\n+from Products.GenericSetup.tests.common import (\n+    DummyImportContext as BaseDummyImportContext,\n+)\n from Products.GenericSetup.tests.common import DummyExportContext\n from zope.component import provideUtility\n from zope.configuration import xmlconfig\n@@ -50,12 +52,13 @@ class ExportImportTest(unittest.TestCase):\n     layer = zca.UNIT_TESTING\n \n     def setUp(self):\n-        self.site = ObjectManager(\'plone\')\n-        self.registry = Registry(\'portal_registry\')\n+        self.site = ObjectManager("plone")\n+        self.registry = Registry("portal_registry")\n         provideUtility(provides=IRegistry, component=self.registry)\n         context = xmlconfig.string(configuration, execute=True)\n         try:\n             import Zope2.App.zcml\n+\n             self._context = Zope2.App.zcml._context\n             Zope2.App.zcml._context = context\n         except ImportError:\n@@ -64,6 +67,7 @@ def setUp(self):\n     def tearDown(self):\n         try:\n             import Zope2.App.zcml\n+\n             Zope2.App.zcml._context = self._context\n         except ImportError:\n             pass\n@@ -88,16 +92,16 @@ def assertXmlEquals(self, expected, actual):\n \n \n class TestImport(ExportImportTest):\n-\n     def test_empty_import_no_purge(self):\n \n         xml = "<registry/>"\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n@@ -106,11 +110,12 @@ def test_import_purge(self):\n \n         xml = "<registry/>"\n         context = DummyImportContext(self.site, purge=True)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n         importRegistry(context)\n \n         self.assertEqual(0, len(self.registry.records))\n@@ -122,21 +127,18 @@ def test_import_records(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n         importRegistry(context)\n \n         self.assertEqual(3, len(self.registry.records))\n \n-        self.assertIn(\n-            \'plone.app.registry.tests.data.ITestSettings.name\', self.registry\n-        )\n-        self.assertIn(\n-            \'plone.app.registry.tests.data.ITestSettings.age\', self.registry\n-        )\n+        self.assertIn("plone.app.registry.tests.data.ITestSettings.name", self.registry)\n+        self.assertIn("plone.app.registry.tests.data.ITestSettings.age", self.registry)\n \n     def test_import_records_disallowed(self):\n         xml = """\\\n@@ -145,11 +147,12 @@ def test_import_records_disallowed(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n \n         try:\n             importRegistry(context)\n@@ -167,22 +170,21 @@ def test_import_records_omit(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n         importRegistry(context)\n \n         self.assertEqual(3, len(self.registry.records))\n \n         self.assertIn(\n-            \'plone.app.registry.tests.data.ITestSettingsDisallowed.name\',\n-            self.registry\n+            "plone.app.registry.tests.data.ITestSettingsDisallowed.name", self.registry\n         )\n         self.assertIn(\n-            \'plone.app.registry.tests.data.ITestSettingsDisallowed.age\',\n-            self.registry\n+            "plone.app.registry.tests.data.ITestSettingsDisallowed.age", self.registry\n         )\n \n     def test_import_records_remove(self):\n@@ -192,7 +194,7 @@ def test_import_records_remove(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n@@ -203,7 +205,7 @@ def test_import_records_remove(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': delete_xml}\n+        context._files = {"registry.xml": delete_xml}\n \n         importRegistry(context)\n \n@@ -216,7 +218,7 @@ def test_import_records_delete_deprecated(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n@@ -227,7 +229,7 @@ def test_import_records_delete_deprecated(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': delete_xml}\n+        context._files = {"registry.xml": delete_xml}\n \n         importRegistry(context)\n \n@@ -240,7 +242,7 @@ def test_import_records_remove_with_omit(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n@@ -253,17 +255,15 @@ def test_import_records_remove_with_omit(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': delete_xml}\n+        context._files = {"registry.xml": delete_xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n \n-        self.assertIn(\n-            \'plone.app.registry.tests.data.ITestSettings.name\', self.registry\n-        )\n+        self.assertIn("plone.app.registry.tests.data.ITestSettings.name", self.registry)\n         self.assertNotIn(\n-            \'plone.app.registry.tests.data.ITestSettings.age\', self.registry\n+            "plone.app.registry.tests.data.ITestSettings.age", self.registry\n         )\n \n     def test_import_records_remove_with_value(self):\n@@ -273,7 +273,7 @@ def test_import_records_remove_with_value(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n@@ -286,7 +286,7 @@ def test_import_records_remove_with_value(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': delete_xml}\n+        context._files = {"registry.xml": delete_xml}\n \n         self.assertRaises(ValueError, importRegistry, context)\n \n@@ -299,18 +299,14 @@ def test_import_records_with_prefix(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(2, len(self.registry.records))\n \n-        self.assertIn(\n-            \'plone.app.registry.tests.data.SomethingElse.name\', self.registry\n-        )\n-        self.assertIn(\n-            \'plone.app.registry.tests.data.SomethingElse.age\', self.registry\n-        )\n+        self.assertIn("plone.app.registry.tests.data.SomethingElse.name", self.registry)\n+        self.assertIn("plone.app.registry.tests.data.SomethingElse.age", self.registry)\n \n     def test_import_records_with_values(self):\n         xml = """\\\n@@ -322,26 +318,20 @@ def test_import_records_with_values(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(2, len(self.registry.records))\n \n-        self.assertIn(\n-            \'plone.app.registry.tests.data.SomethingElse.name\', self.registry\n-        )\n-        self.assertIn(\n-            \'plone.app.registry.tests.data.SomethingElse.age\', self.registry\n-        )\n+        self.assertIn("plone.app.registry.tests.data.SomethingElse.name", self.registry)\n+        self.assertIn("plone.app.registry.tests.data.SomethingElse.age", self.registry)\n \n         self.assertEqual(\n-            self.registry[\'plone.app.registry.tests.data.SomethingElse.name\'],\n-            \'Magic\'\n+            self.registry["plone.app.registry.tests.data.SomethingElse.name"], "Magic"\n         )\n         self.assertEqual(\n-            self.registry[\'plone.app.registry.tests.data.SomethingElse.age\'],\n-            42\n+            self.registry["plone.app.registry.tests.data.SomethingElse.age"], 42\n         )\n \n     def test_import_records_nonexistant_interface(self):\n@@ -351,7 +341,7 @@ def test_import_records_nonexistant_interface(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         self.assertRaises(ImportError, importRegistry, context)\n \n@@ -363,7 +353,7 @@ def test_import_records_nonexistant_interface_condition_not_installed(self):  #\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         self.assertRaises(ImportError, importRegistry, context)\n \n@@ -376,22 +366,19 @@ def test_import_value_only(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.export.simple\'].field.title\n-        )\n-        self.assertEqual(\n-            u"Imported value",\n-            self.registry[\'test.export.simple\']\n+            u"Simple record", self.registry.records["test.export.simple"].field.title\n         )\n+        self.assertEqual(u"Imported value", self.registry["test.export.simple"])\n \n     def test_import_value_only_condition_installed(self):\n         xml = """\\\n@@ -403,22 +390,19 @@ def test_import_value_only_condition_installed(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.export.simple\'].field.title\n-        )\n-        self.assertEqual(\n-            u"Sample value",\n-            self.registry[\'test.export.simple\']\n+            u"Simple record", self.registry.records["test.export.simple"].field.title\n         )\n+        self.assertEqual(u"Sample value", self.registry["test.export.simple"])\n \n     def test_import_value_only_condition_have(self):\n         xml = """\\\n@@ -430,22 +414,19 @@ def test_import_value_only_condition_have(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.export.simple\'].field.title\n-        )\n-        self.assertEqual(\n-            u"Imported value",\n-            self.registry[\'test.export.simple\']\n+            u"Simple record", self.registry.records["test.export.simple"].field.title\n         )\n+        self.assertEqual(u"Imported value", self.registry["test.export.simple"])\n \n     def test_import_value_only_condition_not_have(self):\n         xml = """\\\n@@ -457,22 +438,19 @@ def test_import_value_only_condition_not_have(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.export.simple\'].field.title\n-        )\n-        self.assertEqual(\n-            u"Sample value",\n-            self.registry[\'test.export.simple\']\n+            u"Simple record", self.registry.records["test.export.simple"].field.title\n         )\n+        self.assertEqual(u"Sample value", self.registry["test.export.simple"])\n \n     def test_import_interface_and_value(self):\n         xml = """\\\n@@ -483,18 +461,22 @@ def test_import_interface_and_value(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n             u"Age",\n-            self.registry.records[\'plone.app.registry.tests.data.ITestSettingsDisallowed.age\'].field.title  # noqa\n+            self.registry.records[\n+                "plone.app.registry.tests.data.ITestSettingsDisallowed.age"\n+            ].field.title,  # noqa\n         )\n         self.assertEqual(\n             2,\n-            self.registry[\'plone.app.registry.tests.data.ITestSettingsDisallowed.age\']  # noqa\n+            self.registry[\n+                "plone.app.registry.tests.data.ITestSettingsDisallowed.age"\n+            ],  # noqa\n         )\n \n     def test_import_interface_with_differnet_name(self):\n@@ -506,16 +488,15 @@ def test_import_interface_with_differnet_name(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Age",\n-            self.registry.records[\'plone.registry.oops\'].field.title\n+            u"Age", self.registry.records["plone.registry.oops"].field.title\n         )\n-        self.assertEqual(2, self.registry[\'plone.registry.oops\'])\n+        self.assertEqual(2, self.registry["plone.registry.oops"])\n \n     def test_import_interface_no_value(self):\n         xml = """\\\n@@ -524,18 +505,22 @@ def test_import_interface_no_value(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n             u"Name",\n-            self.registry.records[\'plone.app.registry.tests.data.ITestSettingsDisallowed.name\'].field.title  # noqa\n+            self.registry.records[\n+                "plone.app.registry.tests.data.ITestSettingsDisallowed.name"\n+            ].field.title,  # noqa\n         )\n         self.assertEqual(\n             u"Mr. Registry",\n-            self.registry[\'plone.app.registry.tests.data.ITestSettingsDisallowed.name\']  # noqa\n+            self.registry[\n+                "plone.app.registry.tests.data.ITestSettingsDisallowed.name"\n+            ],  # noqa\n         )\n \n     def test_import_field_only(self):\n@@ -550,28 +535,23 @@ def test_import_field_only(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertTrue(\n             isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.TextLine)\n-        )\n-        self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.registry.field\'].field.title\n+                self.registry.records["test.registry.field"].field, field.TextLine\n+            )\n         )\n         self.assertEqual(\n-            u"value",\n-            self.registry.records[\'test.registry.field\'].field.__name__\n+            u"Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual(\n-            u"N/A",\n-            self.registry[\'test.registry.field\']\n+            u"value", self.registry.records["test.registry.field"].field.__name__\n         )\n+        self.assertEqual(u"N/A", self.registry["test.registry.field"])\n \n     def test_import_field_ref(self):\n         xml = """\\\n@@ -583,30 +563,33 @@ def test_import_field_ref(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.registry.field\'] = Record(\n-                field.TextLine(title=u"Simple record", default=u"N/A"),\n-                value=u"Sample value")\n+        self.registry.records["test.registry.field"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n \n         importRegistry(context)\n \n         self.assertEqual(2, len(self.registry.records))\n         self.assertTrue(\n             IFieldRef.providedBy(\n-                self.registry.records[\'test.registry.field.override\'].field)\n+                self.registry.records["test.registry.field.override"].field\n             )\n+        )\n         self.assertEqual(\n             u"Simple record",\n-            self.registry.records[\'test.registry.field.override\'].field.title\n+            self.registry.records["test.registry.field.override"].field.title,\n         )\n         self.assertEqual(\n             u"value",\n-            self.registry.records[\'test.registry.field.override\'].field.__name__  # noqa\n+            self.registry.records[\n+                "test.registry.field.override"\n+            ].field.__name__,  # noqa\n         )\n         self.assertEqual(\n-            u"Another value",\n-            self.registry[\'test.registry.field.override\']\n+            u"Another value", self.registry["test.registry.field.override"]\n         )\n \n     def test_import_field_and_interface(self):\n@@ -621,25 +604,20 @@ def test_import_field_and_interface(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertTrue(\n             isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.ASCIILine\n+                self.registry.records["test.registry.field"].field, field.ASCIILine\n             )\n         )\n         self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.registry.field\'].field.title\n-        )\n-        self.assertEqual(\n-            "N/A",\n-            self.registry[\'test.registry.field\']\n+            u"Simple record", self.registry.records["test.registry.field"].field.title\n         )\n+        self.assertEqual("N/A", self.registry["test.registry.field"])\n \n     def test_import_overwrite_field_with_field(self):\n         xml = """\\\n@@ -653,29 +631,25 @@ def test_import_overwrite_field_with_field(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Old value")\n+        self.registry.records["test.registry.field"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"), value=u"Old value"\n+        )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertTrue(\n             isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.ASCIILine)\n-        )\n-        self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.registry.field\'].field.title\n+                self.registry.records["test.registry.field"].field, field.ASCIILine\n+            )\n         )\n         self.assertEqual(\n-            "Nada",\n-            self.registry[\'test.registry.field\']\n+            u"Simple record", self.registry.records["test.registry.field"].field.title\n         )\n+        self.assertEqual("Nada", self.registry["test.registry.field"])\n \n     def test_import_overwrite_field_with_interface(self):\n         xml = """\\\n@@ -684,30 +658,23 @@ def test_import_overwrite_field_with_interface(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Old value")\n+        self.registry.records["test.registry.field"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"), value=u"Old value"\n+        )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertTrue(\n-            isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.Int\n-            )\n-        )\n-        self.assertEqual(\n-            u"Age",\n-            self.registry.records[\'test.registry.field\'].field.title\n+            isinstance(self.registry.records["test.registry.field"].field, field.Int)\n         )\n         self.assertEqual(\n-            None,\n-            self.registry[\'test.registry.field\']\n+            u"Age", self.registry.records["test.registry.field"].field.title\n         )\n+        self.assertEqual(None, self.registry["test.registry.field"])\n \n     def test_import_collection_field(self):\n         xml = """\\\n@@ -727,30 +694,25 @@ def test_import_collection_field(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Old value")\n+        self.registry.records["test.registry.field"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"), value=u"Old value"\n+        )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertTrue(\n             isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.FrozenSet\n+                self.registry.records["test.registry.field"].field, field.FrozenSet\n             )\n         )\n         self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.registry.field\'].field.title\n-        )\n-        self.assertEqual(\n-            frozenset([1, 3]),\n-            self.registry[\'test.registry.field\']\n+            u"Simple record", self.registry.records["test.registry.field"].field.title\n         )\n+        self.assertEqual(frozenset([1, 3]), self.registry["test.registry.field"])\n \n     def test_import_collection_value(self):\n         xml = """\\\n@@ -764,34 +726,24 @@ def test_import_collection_value(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = Record(\n-            field.Set(\n-                title=u"Simple record",\n-                value_type=field.Int(title=u"Val")\n-            ),\n-            value=set([1])\n+        self.registry.records["test.registry.field"] = Record(\n+            field.Set(title=u"Simple record", value_type=field.Int(title=u"Val")),\n+            value=set([1]),\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertTrue(\n-            isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.Set\n-            )\n-        )\n-        self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.registry.field\'].field.title\n+            isinstance(self.registry.records["test.registry.field"].field, field.Set)\n         )\n         self.assertEqual(\n-            frozenset([4, 6]),\n-            self.registry[\'test.registry.field\']\n+            u"Simple record", self.registry.records["test.registry.field"].field.title\n         )\n+        self.assertEqual(frozenset([4, 6]), self.registry["test.registry.field"])\n \n     def test_import_collection_nopurge(self):\n         xml = """\\\n@@ -805,34 +757,24 @@ def test_import_collection_nopurge(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = Record(\n-            field.Set(\n-                title=u"Simple record",\n-                value_type=field.Int(title=u"Val")\n-            ),\n-            value=set([1])\n+        self.registry.records["test.registry.field"] = Record(\n+            field.Set(title=u"Simple record", value_type=field.Int(title=u"Val")),\n+            value=set([1]),\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertTrue(\n-            isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.Set\n-            )\n+            isinstance(self.registry.records["test.registry.field"].field, field.Set)\n         )\n         self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.registry.field\'].field.title\n-        )\n-        self.assertEqual(\n-            frozenset([1, 4, 6]),\n-            self.registry[\'test.registry.field\']\n+            u"Simple record", self.registry.records["test.registry.field"].field.title\n         )\n+        self.assertEqual(frozenset([1, 4, 6]), self.registry["test.registry.field"])\n \n     def test_import_collection_list_append(self):\n         xml = """\\\n@@ -846,21 +788,18 @@ def test_import_collection_list_append(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = Record(\n-            field.List(\n-                title=u"Simple record",\n-                value_type=field.Int(title=u"Val")\n-            ),\n-            value=[2, 4]\n+        self.registry.records["test.registry.field"] = Record(\n+            field.List(title=u"Simple record", value_type=field.Int(title=u"Val")),\n+            value=[2, 4],\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n-        self.assertEqual([2, 4, 6], self.registry[\'test.registry.field\'])\n+        self.assertEqual([2, 4, 6], self.registry["test.registry.field"])\n \n     def test_import_collection_tuple_append(self):\n         xml = """\\\n@@ -874,23 +813,29 @@ def test_import_collection_tuple_append(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = Record(\n+        self.registry.records["test.registry.field"] = Record(\n             field.Tuple(\n-                title=u"Simple record",\n-                value_type=field.TextLine(title=u"Val")\n+                title=u"Simple record", value_type=field.TextLine(title=u"Val")\n+            ),\n+            value=(\n+                u"a",\n+                u"b",\n             ),\n-            value=(u"a", u"b", )\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            (u"a", u"b", u"c", ),\n-            self.registry[\'test.registry.field\']\n+            (\n+                u"a",\n+                u"b",\n+                u"c",\n+            ),\n+            self.registry["test.registry.field"],\n         )\n \n     def test_import_collection_set_append(self):\n@@ -905,21 +850,18 @@ def test_import_collection_set_append(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = Record(\n-            field.Set(\n-                title=u"Simple record",\n-                value_type=field.Int(title=u"Val")\n-            ),\n-            value=set([2, 4])\n+        self.registry.records["test.registry.field"] = Record(\n+            field.Set(title=u"Simple record", value_type=field.Int(title=u"Val")),\n+            value=set([2, 4]),\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n-        self.assertEqual(set([2, 4, 6]), self.registry[\'test.registry.field\'])\n+        self.assertEqual(set([2, 4, 6]), self.registry["test.registry.field"])\n \n     def test_import_collection_frozenset_append(self):\n         xml = """\\\n@@ -933,24 +875,18 @@ def test_import_collection_frozenset_append(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = Record(\n-            field.FrozenSet(\n-                title=u"Simple record",\n-                value_type=field.Int(title=u"Val")\n-            ),\n-            value=frozenset([2, 4])\n+        self.registry.records["test.registry.field"] = Record(\n+            field.FrozenSet(title=u"Simple record", value_type=field.Int(title=u"Val")),\n+            value=frozenset([2, 4]),\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n-        self.assertEqual(\n-            frozenset([2, 4, 6]),\n-            self.registry[\'test.registry.field\']\n-        )\n+        self.assertEqual(frozenset([2, 4, 6]), self.registry["test.registry.field"])\n \n     def test_import_dict_field(self):\n         xml = """\\\n@@ -973,30 +909,23 @@ def test_import_dict_field(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Old value")\n+        self.registry.records["test.registry.field"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"), value=u"Old value"\n+        )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertTrue(\n-            isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.Dict\n-            )\n-        )\n-        self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.registry.field\'].field.title\n+            isinstance(self.registry.records["test.registry.field"].field, field.Dict)\n         )\n         self.assertEqual(\n-            {\'a\': 1, \'b\': 3},\n-            self.registry[\'test.registry.field\']\n+            u"Simple record", self.registry.records["test.registry.field"].field.title\n         )\n+        self.assertEqual({"a": 1, "b": 3}, self.registry["test.registry.field"])\n \n     def test_import_dict_value(self):\n         xml = """\\\n@@ -1010,32 +939,28 @@ def test_import_dict_value(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = \\\n-            Record(field.Dict(title=u"Simple record",\n-                              key_type=field.ASCIILine(title=u"Key"),\n-                              value_type=field.Int(title=u"Val")),\n-                   value={\'a\': 1})\n+        self.registry.records["test.registry.field"] = Record(\n+            field.Dict(\n+                title=u"Simple record",\n+                key_type=field.ASCIILine(title=u"Key"),\n+                value_type=field.Int(title=u"Val"),\n+            ),\n+            value={"a": 1},\n+        )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertTrue(\n-            isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.Dict\n-            )\n-        )\n-        self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.registry.field\'].field.title\n+            isinstance(self.registry.records["test.registry.field"].field, field.Dict)\n         )\n         self.assertEqual(\n-            {\'x\': 4, \'y\': 6},\n-            self.registry[\'test.registry.field\']\n+            u"Simple record", self.registry.records["test.registry.field"].field.title\n         )\n+        self.assertEqual({"x": 4, "y": 6}, self.registry["test.registry.field"])\n \n     def test_import_dict_nopurge(self):\n         xml = """\\\n@@ -1049,32 +974,28 @@ def test_import_dict_nopurge(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = \\\n-            Record(field.Dict(title=u"Simple record",\n-                              key_type=field.ASCIILine(title=u"Key"),\n-                              value_type=field.Int(title=u"Val")),\n-                   value={\'a\': 1})\n+        self.registry.records["test.registry.field"] = Record(\n+            field.Dict(\n+                title=u"Simple record",\n+                key_type=field.ASCIILine(title=u"Key"),\n+                value_type=field.Int(title=u"Val"),\n+            ),\n+            value={"a": 1},\n+        )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertTrue(\n-            isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.Dict\n-            )\n+            isinstance(self.registry.records["test.registry.field"].field, field.Dict)\n         )\n         self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.registry.field\'].field.title\n-        )\n-        self.assertEqual(\n-            {\'a\': 1, \'x\': 4, \'y\': 6},\n-            self.registry[\'test.registry.field\']\n+            u"Simple record", self.registry.records["test.registry.field"].field.title\n         )\n+        self.assertEqual({"a": 1, "x": 4, "y": 6}, self.registry["test.registry.field"])\n \n     def test_import_choice_field(self):\n         xml = """\\\n@@ -1091,33 +1012,30 @@ def test_import_choice_field(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Old value")\n+        self.registry.records["test.registry.field"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"), value=u"Old value"\n+        )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertTrue(\n-            isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.Choice\n-            )\n+            isinstance(self.registry.records["test.registry.field"].field, field.Choice)\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records[\'test.registry.field\'].\n-            field.title\n+            u"Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual(\n-            [u\'One\', u\'Two\'],\n-            [t.value for t in self.registry.records[\'test.registry.field\'].field.vocabulary]  # noqa\n-        )\n-        self.assertEqual(\n-            None, self.registry[\'test.registry.field\']\n+            [u"One", u"Two"],\n+            [\n+                t.value\n+                for t in self.registry.records["test.registry.field"].field.vocabulary\n+            ],  # noqa\n         )\n+        self.assertEqual(None, self.registry["test.registry.field"])\n \n     def test_import_with_comments(self):\n         xml = """\\\n@@ -1138,7 +1056,7 @@ def test_import_with_comments(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n@@ -1146,36 +1064,24 @@ def test_import_with_comments(self):\n \n         self.assertTrue(\n             isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.TextLine\n+                self.registry.records["test.registry.field"].field, field.TextLine\n             )\n         )\n         self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.registry.field\'].field.title\n-        )\n-        self.assertEqual(\n-            u"value",\n-            self.registry.records[\'test.registry.field\'].field.__name__\n+            u"Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual(\n-            u"N/A",\n-            self.registry[\'test.registry.field\']\n+            u"value", self.registry.records["test.registry.field"].field.__name__\n         )\n+        self.assertEqual(u"N/A", self.registry["test.registry.field"])\n \n-        self.assertIn(\n-            \'plone.app.registry.tests.data.SomethingElse.name\', self.registry\n-        )\n-        self.assertIn(\n-            \'plone.app.registry.tests.data.SomethingElse.age\', self.registry\n-        )\n+        self.assertIn("plone.app.registry.tests.data.SomethingElse.name", self.registry)\n+        self.assertIn("plone.app.registry.tests.data.SomethingElse.age", self.registry)\n         self.assertEqual(\n-            self.registry[\'plone.app.registry.tests.data.SomethingElse.name\'],\n-            \'Magic\'\n+            self.registry["plone.app.registry.tests.data.SomethingElse.name"], "Magic"\n         )\n         self.assertEqual(\n-            self.registry[\'plone.app.registry.tests.data.SomethingElse.age\'],\n-            42\n+            self.registry["plone.app.registry.tests.data.SomethingElse.age"], 42\n         )\n \n     def test_remove(self):\n@@ -1185,11 +1091,12 @@ def test_remove(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n         importRegistry(context)\n \n         self.assertEqual(0, len(self.registry.records))\n@@ -1201,11 +1108,12 @@ def test_delete_deprecated(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n         importRegistry(context)\n \n         self.assertEqual(0, len(self.registry.records))\n@@ -1217,22 +1125,19 @@ def test_delete_not_found(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.export.simple\'].field.title\n-        )\n-        self.assertEqual(\n-            u"Sample value",\n-            self.registry[\'test.export.simple\']\n+            u"Simple record", self.registry.records["test.export.simple"].field.title\n         )\n+        self.assertEqual(u"Sample value", self.registry["test.export.simple"])\n \n     def test_import_folder(self):\n         xml1 = """\\\n@@ -1267,14 +1172,14 @@ def test_import_folder(self):\n """\n         context = DummyImportContext(self.site, purge=False)\n         context._files = {\n-            \'registry.xml\': xml1,\n-            \'registry/foo2.xml\': xml2,\n-            \'registry/foo3.xml\': xml3\n+            "registry.xml": xml1,\n+            "registry/foo2.xml": xml2,\n+            "registry/foo3.xml": xml3,\n         }\n         context._directories = {\n-            \'registry\': [\n-                \'foo2.xml\',\n-                \'foo3.xml\',\n+            "registry": [\n+                "foo2.xml",\n+                "foo3.xml",\n             ]\n         }\n         importRegistry(context)\n@@ -1282,35 +1187,88 @@ def test_import_folder(self):\n         self.assertEqual(3, len(self.registry.records))\n \n         for idx in range(1, 4):\n-            fieldname = \'test.registry.foobar%i\' % idx\n+            fieldname = "test.registry.foobar%i" % idx\n             self.assertTrue(\n-                isinstance(\n-                    self.registry.records[fieldname].field,\n-                    field.TextLine)\n+                isinstance(self.registry.records[fieldname].field, field.TextLine)\n             )\n             self.assertEqual(\n-                u"Simple record",\n-                self.registry.records[fieldname].field.title\n+                u"Simple record", self.registry.records[fieldname].field.title\n             )\n-            self.assertEqual(\n-                u"value",\n-                self.registry.records[fieldname].field.__name__\n+            self.assertEqual(u"value", self.registry.records[fieldname].field.__name__)\n+            self.assertEqual(u"N/A", self.registry[fieldname])\n+\n+    def test_import_jsonfield_only(self):\n+        xml = """\\\n+<registry>\n+    <record name="test.registry.field">\n+        <field type="plone.registry.field.JSONField">\n+          <default>{}</default>\n+          <title>JSON record</title>\n+        </field>\n+    </record>\n+</registry>\n+"""\n+        context = DummyImportContext(self.site, purge=False)\n+        context._files = {"registry.xml": xml}\n+\n+        importRegistry(context)\n+\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n+            isinstance(\n+                self.registry.records["test.registry.field"].field, field.JSONField\n             )\n-            self.assertEqual(\n-                u"N/A",\n-                self.registry[fieldname]\n+        )\n+        self.assertEqual(\n+            u"JSON record", self.registry.records["test.registry.field"].field.title\n+        )\n+        self.assertDictEqual({}, self.registry["test.registry.field"])\n+\n+    def test_import_jsonfield_with_value(self):\n+        xml = """\\\n+<registry>\n+    <record name="test.registry.field">\n+        <field type="plone.registry.field.JSONField">\n+          <default>{}</default>\n+          <title>JSON record</title>\n+        </field>\n+        <value>{"items":[{"color":"red","value":"one"},{"color":"r\xc3\xb6d","value":"two"}]}</value>\n+    </record>\n+</registry>\n+"""\n+        context = DummyImportContext(self.site, purge=False)\n+        context._files = {"registry.xml": xml}\n+\n+        importRegistry(context)\n+\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n+            isinstance(\n+                self.registry.records["test.registry.field"].field, field.JSONField\n             )\n+        )\n+        self.assertEqual(\n+            u"JSON record", self.registry.records["test.registry.field"].field.title\n+        )\n+        self.assertDictEqual(\n+            {\n+                "items": [\n+                    {"color": "red", "value": "one"},\n+                    {"color": "r\xc3\xb6d", "value": "two"},\n+                ]\n+            },\n+            self.registry["test.registry.field"],\n+        )\n \n \n class TestExport(ExportImportTest):\n-\n     def test_export_empty(self):\n \n         xml = """<registry />"""\n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual("registry.xml", context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_simple(self):\n@@ -1326,14 +1284,15 @@ def test_export_simple(self):\n   </record>\n </registry>"""\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n \n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual("registry.xml", context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_with_interface(self):\n@@ -1362,16 +1321,17 @@ def test_export_with_interface(self):\n   </record>\n </registry>"""\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n \n         self.registry.registerInterface(data.ITestSettings)\n \n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual("registry.xml", context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_field_ref(self):\n@@ -1391,18 +1351,19 @@ def test_export_field_ref(self):\n   </record>\n </registry>"""\n \n-        self.registry.records[\'test.export.simple\'] = refRecord = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = refRecord = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n \n-        self.registry.records[\'test.export.simple.override\'] = \\\n-            Record(FieldRef(refRecord.__name__, refRecord.field),\n-                   value=u"Another value")\n+        self.registry.records["test.export.simple.override"] = Record(\n+            FieldRef(refRecord.__name__, refRecord.field), value=u"Another value"\n+        )\n \n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual("registry.xml", context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_with_collection(self):\n@@ -1421,18 +1382,15 @@ def test_export_with_collection(self):\n     </value>\n   </record>\n </registry>"""\n-        self.registry.records[\'test.export.simple\'] = Record(\n-            field.List(\n-                title=u"Simple record",\n-                value_type=field.Int(title=u"Val")\n-            ),\n-            value=[2]\n+        self.registry.records["test.export.simple"] = Record(\n+            field.List(title=u"Simple record", value_type=field.Int(title=u"Val")),\n+            value=[2],\n         )\n \n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual("registry.xml", context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_with_dict(self):\n@@ -1456,16 +1414,20 @@ def test_export_with_dict(self):\n   </record>\n </registry>"""\n \n-        self.registry.records[\'test.export.dict\'] = \\\n-            Record(field.Dict(title=u"Dict", default={},\n-                              key_type=field.ASCIILine(title=u"Key"),\n-                              value_type=field.Int(title=u"Value")),\n-                   value={\'a\': 1})\n+        self.registry.records["test.export.dict"] = Record(\n+            field.Dict(\n+                title=u"Dict",\n+                default={},\n+                key_type=field.ASCIILine(title=u"Key"),\n+                value_type=field.Int(title=u"Value"),\n+            ),\n+            value={"a": 1},\n+        )\n \n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual("registry.xml", context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_with_choice(self):\n@@ -1481,14 +1443,14 @@ def test_export_with_choice(self):\n   </record>\n </registry>"""\n \n-        self.registry.records[\'test.export.choice\'] = Record(\n+        self.registry.records["test.export.choice"] = Record(\n             field.Choice(title=u"Simple record", vocabulary=u"dummy.vocab")\n         )\n \n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual("registry.xml", context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_with_missing_schema_does_not_error(self):\n@@ -1504,22 +1466,53 @@ def test_export_with_missing_schema_does_not_error(self):\n   </record>\n </registry>"""\n \n-        self.registry.records[\'test.export.simple\'] = Record(\n+        self.registry.records["test.export.simple"] = Record(\n             field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value"\n+            value=u"Sample value",\n         )\n \n         # Note: These are nominally read-only!\n-        self.registry.records[\'test.export.simple\'].field.interfaceName = \'non.existant.ISchema\'  # noqa\n-        self.registry.records[\'test.export.simple\'].field.fieldName = \'blah\'\n+        self.registry.records[\n+            "test.export.simple"\n+        ].field.interfaceName = "non.existant.ISchema"  # noqa\n+        self.registry.records["test.export.simple"].field.fieldName = "blah"\n+\n+        alsoProvides(self.registry.records["test.export.simple"], IInterfaceAwareRecord)\n+\n+        context = DummyExportContext(self.site)\n+        exportRegistry(context)\n+\n+        self.assertEqual("registry.xml", context._wrote[0][0])\n+        self.assertXmlEquals(xml, context._wrote[0][1])\n \n-        alsoProvides(\n-            self.registry.records[\'test.export.simple\'],\n-            IInterfaceAwareRecord\n+    def test_export_with_jsonfield(self):\n+\n+        xml = """\\\n+<registry>\n+  <record name="test.export.field">\n+    <field type="plone.registry.field.JSONField">\n+      <default>{}</default>\n+      <title>Dict</title>\n+    </field>\n+    <value>{\'items\': [{\'color\': \'red\', \'value\': \'one\'}, {\'color\': \'r\xc3\xb6d\', \'value\': \'two\'}]}</value>\n+  </record>\n+</registry>"""\n+\n+        self.registry.records["test.export.field"] = Record(\n+            field.JSONField(\n+                title=u"Dict",\n+                default={},\n+            ),\n+            value={\n+                "items": [\n+                    {"color": "red", "value": "one"},\n+                    {"color": "r\xc3\xb6d", "value": "two"},\n+                ]\n+            },\n         )\n \n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual("registry.xml", context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n'

Repository: plone.app.registry


Branch: refs/heads/master
Date: 2021-05-12T23:41:32+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.registry/commit/6d2483a16927eba5c742b6cfc685e77d674f9fff

Housekeeping

Files changed:
M news/48.feature

b'diff --git a/news/48.feature b/news/48.feature\nindex d132c31..06834c6 100644\n--- a/news/48.feature\n+++ b/news/48.feature\n@@ -2,4 +2,4 @@ Add JSONField Handler for plone.registry.field.JSONField\n - add component JSONFieldHandler\n - add Tests for Import and Export JSONField\n - add towncrier message\n-[1letter]\n\\ No newline at end of file\n+[1letter]\n'

Repository: plone.app.registry


Branch: refs/heads/master
Date: 2021-07-11T11:20:55+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.registry/commit/bd68641eb5482fd7634a7cb0f062fd6188711630

Merge pull request #49 from plone/1letter/JSONField

Add JSONField Handler for plone.registry.field.JSONField

Files changed:
A news/48.feature
M plone/app/registry/exportimport/fields.py
M plone/app/registry/exportimport/handlers.zcml
M plone/app/registry/tests/test_exportimport.py

b'diff --git a/news/48.feature b/news/48.feature\nnew file mode 100644\nindex 0000000..06834c6\n--- /dev/null\n+++ b/news/48.feature\n@@ -0,0 +1,5 @@\n+Add JSONField Handler for plone.registry.field.JSONField\n+- add component JSONFieldHandler\n+- add Tests for Import and Export JSONField\n+- add towncrier message\n+[1letter]\ndiff --git a/plone/app/registry/exportimport/fields.py b/plone/app/registry/exportimport/fields.py\nindex 6e4a27f..4632c0f 100644\n--- a/plone/app/registry/exportimport/fields.py\n+++ b/plone/app/registry/exportimport/fields.py\n@@ -7,17 +7,18 @@\n \n class PersistentFieldHandler(BaseHandler):\n     filteredAttributes = BaseHandler.filteredAttributes.copy()\n-    filteredAttributes.update({\'interfaceName\': \'rw\', \'fieldName\': \'rw\'})\n+    filteredAttributes.update({"interfaceName": "rw", "fieldName": "rw"})\n \n \n class PersistentDictHandler(DictHandler):\n     filteredAttributes = DictHandler.filteredAttributes.copy()\n-    filteredAttributes.update({\'interfaceName\': \'rw\', \'fieldName\': \'rw\'})\n+    filteredAttributes.update({"interfaceName": "rw", "fieldName": "rw"})\n \n \n class PersistentChoiceHandler(ChoiceHandler):\n     filteredAttributes = ChoiceHandler.filteredAttributes.copy()\n-    filteredAttributes.update({\'interfaceName\': \'rw\', \'fieldName\': \'rw\'})\n+    filteredAttributes.update({"interfaceName": "rw", "fieldName": "rw"})\n+\n \n # Field import/export handlers\n \n@@ -52,3 +53,5 @@ class PersistentChoiceHandler(ChoiceHandler):\n DictHandler = PersistentDictHandler(field.Dict)\n \n ChoiceHandler = PersistentChoiceHandler(field.Choice)\n+\n+JSONFieldHandler = PersistentFieldHandler(field.JSONField)\ndiff --git a/plone/app/registry/exportimport/handlers.zcml b/plone/app/registry/exportimport/handlers.zcml\nindex a3d9e7a..adf6c7e 100644\n--- a/plone/app/registry/exportimport/handlers.zcml\n+++ b/plone/app/registry/exportimport/handlers.zcml\n@@ -5,90 +5,71 @@\n   <!-- plone.supermodel field handlers -->\n   <utility\n       component=".fields.BytesHandler"\n-      name="plone.registry.field.Bytes"\n-  />\n+      name="plone.registry.field.Bytes" />\n   <utility\n       component=".fields.BytesLineHandler"\n-      name="plone.registry.field.BytesLine"\n-  />\n+      name="plone.registry.field.BytesLine" />\n   <utility\n       component=".fields.ASCIIHandler"\n-      name="plone.registry.field.ASCII"\n-  />\n+      name="plone.registry.field.ASCII" />\n   <utility\n       component=".fields.ASCIILineHandler"\n-      name="plone.registry.field.ASCIILine"\n-  />\n+      name="plone.registry.field.ASCIILine" />\n   <utility\n       component=".fields.TextHandler"\n-      name="plone.registry.field.Text"\n-  />\n+      name="plone.registry.field.Text" />\n   <utility\n       component=".fields.TextLineHandler"\n-      name="plone.registry.field.TextLine"\n-  />\n+      name="plone.registry.field.TextLine" />\n   <utility\n       component=".fields.BoolHandler"\n-      name="plone.registry.field.Bool"\n-  />\n+      name="plone.registry.field.Bool" />\n   <utility\n       component=".fields.IntHandler"\n-      name="plone.registry.field.Int"\n-  />\n+      name="plone.registry.field.Int" />\n   <utility\n       component=".fields.FloatHandler"\n-      name="plone.registry.field.Float"\n-  />\n+      name="plone.registry.field.Float" />\n   <utility\n       component=".fields.TupleHandler"\n-      name="plone.registry.field.Tuple"\n-  />\n+      name="plone.registry.field.Tuple" />\n   <utility\n       component=".fields.ListHandler"\n-      name="plone.registry.field.List"\n-  />\n+      name="plone.registry.field.List" />\n   <utility\n       component=".fields.SetHandler"\n-      name="plone.registry.field.Set"\n-  />\n+      name="plone.registry.field.Set" />\n   <utility\n       component=".fields.FrozenSetHandler"\n-      name="plone.registry.field.FrozenSet"\n-  />\n+      name="plone.registry.field.FrozenSet" />\n   <utility\n       component=".fields.PasswordHandler"\n-      name="plone.registry.field.Password"\n-  />\n+      name="plone.registry.field.Password" />\n   <utility\n       component=".fields.DictHandler"\n-      name="plone.registry.field.Dict"\n-  />\n+      name="plone.registry.field.Dict" />\n   <utility\n       component=".fields.DatetimeHandler"\n-      name="plone.registry.field.Datetime"\n-  />\n+      name="plone.registry.field.Datetime" />\n   <utility\n       component=".fields.DateHandler"\n-      name="plone.registry.field.Date"\n-  />\n+      name="plone.registry.field.Date" />\n   <utility\n       component=".fields.SourceTextHandler"\n-      name="plone.registry.field.SourceText"\n-  />\n+      name="plone.registry.field.SourceText" />\n   <utility\n       component=".fields.URIHandler"\n-      name="plone.registry.field.URI"\n-  />\n+      name="plone.registry.field.URI" />\n   <utility\n       component=".fields.IdHandler"\n-      name="plone.registry.field.Id"\n-  />\n+      name="plone.registry.field.Id" />\n   <utility\n       component=".fields.DottedNameHandler"\n-      name="plone.registry.field.DottedName"\n-  />\n+      name="plone.registry.field.DottedName" />\n   <utility\n       component=".fields.ChoiceHandler"\n-      name="plone.registry.field.Choice"\n-  />\n+      name="plone.registry.field.Choice" />\n+  <utility\n+      component=".fields.JSONFieldHandler"\n+      name="plone.registry.field.JSONField" />\n </configure>\ndiff --git a/plone/app/registry/tests/test_exportimport.py b/plone/app/registry/tests/test_exportimport.py\nindex 8a97391..76ab24b 100644\n--- a/plone/app/registry/tests/test_exportimport.py\n+++ b/plone/app/registry/tests/test_exportimport.py\n@@ -14,7 +14,9 @@\n from plone.registry.interfaces import IRegistry\n from plone.supermodel.utils import prettyXML\n from plone.testing import zca\n-from Products.GenericSetup.tests.common import DummyImportContext as BaseDummyImportContext\n+from Products.GenericSetup.tests.common import (\n+    DummyImportContext as BaseDummyImportContext,\n+)\n from Products.GenericSetup.tests.common import DummyExportContext\n from zope.component import provideUtility\n from zope.configuration import xmlconfig\n@@ -50,12 +52,13 @@ class ExportImportTest(unittest.TestCase):\n     layer = zca.UNIT_TESTING\n \n     def setUp(self):\n-        self.site = ObjectManager(\'plone\')\n-        self.registry = Registry(\'portal_registry\')\n+        self.site = ObjectManager("plone")\n+        self.registry = Registry("portal_registry")\n         provideUtility(provides=IRegistry, component=self.registry)\n         context = xmlconfig.string(configuration, execute=True)\n         try:\n             import Zope2.App.zcml\n+\n             self._context = Zope2.App.zcml._context\n             Zope2.App.zcml._context = context\n         except ImportError:\n@@ -64,6 +67,7 @@ def setUp(self):\n     def tearDown(self):\n         try:\n             import Zope2.App.zcml\n+\n             Zope2.App.zcml._context = self._context\n         except ImportError:\n             pass\n@@ -88,16 +92,16 @@ def assertXmlEquals(self, expected, actual):\n \n \n class TestImport(ExportImportTest):\n-\n     def test_empty_import_no_purge(self):\n \n         xml = "<registry/>"\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n@@ -106,11 +110,12 @@ def test_import_purge(self):\n \n         xml = "<registry/>"\n         context = DummyImportContext(self.site, purge=True)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n         importRegistry(context)\n \n         self.assertEqual(0, len(self.registry.records))\n@@ -122,21 +127,18 @@ def test_import_records(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n         importRegistry(context)\n \n         self.assertEqual(3, len(self.registry.records))\n \n-        self.assertIn(\n-            \'plone.app.registry.tests.data.ITestSettings.name\', self.registry\n-        )\n-        self.assertIn(\n-            \'plone.app.registry.tests.data.ITestSettings.age\', self.registry\n-        )\n+        self.assertIn("plone.app.registry.tests.data.ITestSettings.name", self.registry)\n+        self.assertIn("plone.app.registry.tests.data.ITestSettings.age", self.registry)\n \n     def test_import_records_disallowed(self):\n         xml = """\\\n@@ -145,11 +147,12 @@ def test_import_records_disallowed(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n \n         try:\n             importRegistry(context)\n@@ -167,22 +170,21 @@ def test_import_records_omit(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n         importRegistry(context)\n \n         self.assertEqual(3, len(self.registry.records))\n \n         self.assertIn(\n-            \'plone.app.registry.tests.data.ITestSettingsDisallowed.name\',\n-            self.registry\n+            "plone.app.registry.tests.data.ITestSettingsDisallowed.name", self.registry\n         )\n         self.assertIn(\n-            \'plone.app.registry.tests.data.ITestSettingsDisallowed.age\',\n-            self.registry\n+            "plone.app.registry.tests.data.ITestSettingsDisallowed.age", self.registry\n         )\n \n     def test_import_records_remove(self):\n@@ -192,7 +194,7 @@ def test_import_records_remove(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n@@ -203,7 +205,7 @@ def test_import_records_remove(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': delete_xml}\n+        context._files = {"registry.xml": delete_xml}\n \n         importRegistry(context)\n \n@@ -216,7 +218,7 @@ def test_import_records_delete_deprecated(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n@@ -227,7 +229,7 @@ def test_import_records_delete_deprecated(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': delete_xml}\n+        context._files = {"registry.xml": delete_xml}\n \n         importRegistry(context)\n \n@@ -240,7 +242,7 @@ def test_import_records_remove_with_omit(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n@@ -253,17 +255,15 @@ def test_import_records_remove_with_omit(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': delete_xml}\n+        context._files = {"registry.xml": delete_xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n \n-        self.assertIn(\n-            \'plone.app.registry.tests.data.ITestSettings.name\', self.registry\n-        )\n+        self.assertIn("plone.app.registry.tests.data.ITestSettings.name", self.registry)\n         self.assertNotIn(\n-            \'plone.app.registry.tests.data.ITestSettings.age\', self.registry\n+            "plone.app.registry.tests.data.ITestSettings.age", self.registry\n         )\n \n     def test_import_records_remove_with_value(self):\n@@ -273,7 +273,7 @@ def test_import_records_remove_with_value(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n@@ -286,7 +286,7 @@ def test_import_records_remove_with_value(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': delete_xml}\n+        context._files = {"registry.xml": delete_xml}\n \n         self.assertRaises(ValueError, importRegistry, context)\n \n@@ -299,18 +299,14 @@ def test_import_records_with_prefix(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(2, len(self.registry.records))\n \n-        self.assertIn(\n-            \'plone.app.registry.tests.data.SomethingElse.name\', self.registry\n-        )\n-        self.assertIn(\n-            \'plone.app.registry.tests.data.SomethingElse.age\', self.registry\n-        )\n+        self.assertIn("plone.app.registry.tests.data.SomethingElse.name", self.registry)\n+        self.assertIn("plone.app.registry.tests.data.SomethingElse.age", self.registry)\n \n     def test_import_records_with_values(self):\n         xml = """\\\n@@ -322,26 +318,20 @@ def test_import_records_with_values(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(2, len(self.registry.records))\n \n-        self.assertIn(\n-            \'plone.app.registry.tests.data.SomethingElse.name\', self.registry\n-        )\n-        self.assertIn(\n-            \'plone.app.registry.tests.data.SomethingElse.age\', self.registry\n-        )\n+        self.assertIn("plone.app.registry.tests.data.SomethingElse.name", self.registry)\n+        self.assertIn("plone.app.registry.tests.data.SomethingElse.age", self.registry)\n \n         self.assertEqual(\n-            self.registry[\'plone.app.registry.tests.data.SomethingElse.name\'],\n-            \'Magic\'\n+            self.registry["plone.app.registry.tests.data.SomethingElse.name"], "Magic"\n         )\n         self.assertEqual(\n-            self.registry[\'plone.app.registry.tests.data.SomethingElse.age\'],\n-            42\n+            self.registry["plone.app.registry.tests.data.SomethingElse.age"], 42\n         )\n \n     def test_import_records_nonexistant_interface(self):\n@@ -351,7 +341,7 @@ def test_import_records_nonexistant_interface(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         self.assertRaises(ImportError, importRegistry, context)\n \n@@ -363,7 +353,7 @@ def test_import_records_nonexistant_interface_condition_not_installed(self):  #\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         self.assertRaises(ImportError, importRegistry, context)\n \n@@ -376,22 +366,19 @@ def test_import_value_only(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.export.simple\'].field.title\n-        )\n-        self.assertEqual(\n-            u"Imported value",\n-            self.registry[\'test.export.simple\']\n+            u"Simple record", self.registry.records["test.export.simple"].field.title\n         )\n+        self.assertEqual(u"Imported value", self.registry["test.export.simple"])\n \n     def test_import_value_only_condition_installed(self):\n         xml = """\\\n@@ -403,22 +390,19 @@ def test_import_value_only_condition_installed(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.export.simple\'].field.title\n-        )\n-        self.assertEqual(\n-            u"Sample value",\n-            self.registry[\'test.export.simple\']\n+            u"Simple record", self.registry.records["test.export.simple"].field.title\n         )\n+        self.assertEqual(u"Sample value", self.registry["test.export.simple"])\n \n     def test_import_value_only_condition_have(self):\n         xml = """\\\n@@ -430,22 +414,19 @@ def test_import_value_only_condition_have(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.export.simple\'].field.title\n-        )\n-        self.assertEqual(\n-            u"Imported value",\n-            self.registry[\'test.export.simple\']\n+            u"Simple record", self.registry.records["test.export.simple"].field.title\n         )\n+        self.assertEqual(u"Imported value", self.registry["test.export.simple"])\n \n     def test_import_value_only_condition_not_have(self):\n         xml = """\\\n@@ -457,22 +438,19 @@ def test_import_value_only_condition_not_have(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.export.simple\'].field.title\n-        )\n-        self.assertEqual(\n-            u"Sample value",\n-            self.registry[\'test.export.simple\']\n+            u"Simple record", self.registry.records["test.export.simple"].field.title\n         )\n+        self.assertEqual(u"Sample value", self.registry["test.export.simple"])\n \n     def test_import_interface_and_value(self):\n         xml = """\\\n@@ -483,18 +461,22 @@ def test_import_interface_and_value(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n             u"Age",\n-            self.registry.records[\'plone.app.registry.tests.data.ITestSettingsDisallowed.age\'].field.title  # noqa\n+            self.registry.records[\n+                "plone.app.registry.tests.data.ITestSettingsDisallowed.age"\n+            ].field.title,  # noqa\n         )\n         self.assertEqual(\n             2,\n-            self.registry[\'plone.app.registry.tests.data.ITestSettingsDisallowed.age\']  # noqa\n+            self.registry[\n+                "plone.app.registry.tests.data.ITestSettingsDisallowed.age"\n+            ],  # noqa\n         )\n \n     def test_import_interface_with_differnet_name(self):\n@@ -506,16 +488,15 @@ def test_import_interface_with_differnet_name(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Age",\n-            self.registry.records[\'plone.registry.oops\'].field.title\n+            u"Age", self.registry.records["plone.registry.oops"].field.title\n         )\n-        self.assertEqual(2, self.registry[\'plone.registry.oops\'])\n+        self.assertEqual(2, self.registry["plone.registry.oops"])\n \n     def test_import_interface_no_value(self):\n         xml = """\\\n@@ -524,18 +505,22 @@ def test_import_interface_no_value(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n             u"Name",\n-            self.registry.records[\'plone.app.registry.tests.data.ITestSettingsDisallowed.name\'].field.title  # noqa\n+            self.registry.records[\n+                "plone.app.registry.tests.data.ITestSettingsDisallowed.name"\n+            ].field.title,  # noqa\n         )\n         self.assertEqual(\n             u"Mr. Registry",\n-            self.registry[\'plone.app.registry.tests.data.ITestSettingsDisallowed.name\']  # noqa\n+            self.registry[\n+                "plone.app.registry.tests.data.ITestSettingsDisallowed.name"\n+            ],  # noqa\n         )\n \n     def test_import_field_only(self):\n@@ -550,28 +535,23 @@ def test_import_field_only(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertTrue(\n             isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.TextLine)\n-        )\n-        self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.registry.field\'].field.title\n+                self.registry.records["test.registry.field"].field, field.TextLine\n+            )\n         )\n         self.assertEqual(\n-            u"value",\n-            self.registry.records[\'test.registry.field\'].field.__name__\n+            u"Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual(\n-            u"N/A",\n-            self.registry[\'test.registry.field\']\n+            u"value", self.registry.records["test.registry.field"].field.__name__\n         )\n+        self.assertEqual(u"N/A", self.registry["test.registry.field"])\n \n     def test_import_field_ref(self):\n         xml = """\\\n@@ -583,30 +563,33 @@ def test_import_field_ref(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.registry.field\'] = Record(\n-                field.TextLine(title=u"Simple record", default=u"N/A"),\n-                value=u"Sample value")\n+        self.registry.records["test.registry.field"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n \n         importRegistry(context)\n \n         self.assertEqual(2, len(self.registry.records))\n         self.assertTrue(\n             IFieldRef.providedBy(\n-                self.registry.records[\'test.registry.field.override\'].field)\n+                self.registry.records["test.registry.field.override"].field\n             )\n+        )\n         self.assertEqual(\n             u"Simple record",\n-            self.registry.records[\'test.registry.field.override\'].field.title\n+            self.registry.records["test.registry.field.override"].field.title,\n         )\n         self.assertEqual(\n             u"value",\n-            self.registry.records[\'test.registry.field.override\'].field.__name__  # noqa\n+            self.registry.records[\n+                "test.registry.field.override"\n+            ].field.__name__,  # noqa\n         )\n         self.assertEqual(\n-            u"Another value",\n-            self.registry[\'test.registry.field.override\']\n+            u"Another value", self.registry["test.registry.field.override"]\n         )\n \n     def test_import_field_and_interface(self):\n@@ -621,25 +604,20 @@ def test_import_field_and_interface(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertTrue(\n             isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.ASCIILine\n+                self.registry.records["test.registry.field"].field, field.ASCIILine\n             )\n         )\n         self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.registry.field\'].field.title\n-        )\n-        self.assertEqual(\n-            "N/A",\n-            self.registry[\'test.registry.field\']\n+            u"Simple record", self.registry.records["test.registry.field"].field.title\n         )\n+        self.assertEqual("N/A", self.registry["test.registry.field"])\n \n     def test_import_overwrite_field_with_field(self):\n         xml = """\\\n@@ -653,29 +631,25 @@ def test_import_overwrite_field_with_field(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Old value")\n+        self.registry.records["test.registry.field"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"), value=u"Old value"\n+        )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertTrue(\n             isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.ASCIILine)\n-        )\n-        self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.registry.field\'].field.title\n+                self.registry.records["test.registry.field"].field, field.ASCIILine\n+            )\n         )\n         self.assertEqual(\n-            "Nada",\n-            self.registry[\'test.registry.field\']\n+            u"Simple record", self.registry.records["test.registry.field"].field.title\n         )\n+        self.assertEqual("Nada", self.registry["test.registry.field"])\n \n     def test_import_overwrite_field_with_interface(self):\n         xml = """\\\n@@ -684,30 +658,23 @@ def test_import_overwrite_field_with_interface(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Old value")\n+        self.registry.records["test.registry.field"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"), value=u"Old value"\n+        )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertTrue(\n-            isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.Int\n-            )\n-        )\n-        self.assertEqual(\n-            u"Age",\n-            self.registry.records[\'test.registry.field\'].field.title\n+            isinstance(self.registry.records["test.registry.field"].field, field.Int)\n         )\n         self.assertEqual(\n-            None,\n-            self.registry[\'test.registry.field\']\n+            u"Age", self.registry.records["test.registry.field"].field.title\n         )\n+        self.assertEqual(None, self.registry["test.registry.field"])\n \n     def test_import_collection_field(self):\n         xml = """\\\n@@ -727,30 +694,25 @@ def test_import_collection_field(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Old value")\n+        self.registry.records["test.registry.field"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"), value=u"Old value"\n+        )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertTrue(\n             isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.FrozenSet\n+                self.registry.records["test.registry.field"].field, field.FrozenSet\n             )\n         )\n         self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.registry.field\'].field.title\n-        )\n-        self.assertEqual(\n-            frozenset([1, 3]),\n-            self.registry[\'test.registry.field\']\n+            u"Simple record", self.registry.records["test.registry.field"].field.title\n         )\n+        self.assertEqual(frozenset([1, 3]), self.registry["test.registry.field"])\n \n     def test_import_collection_value(self):\n         xml = """\\\n@@ -764,34 +726,24 @@ def test_import_collection_value(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = Record(\n-            field.Set(\n-                title=u"Simple record",\n-                value_type=field.Int(title=u"Val")\n-            ),\n-            value=set([1])\n+        self.registry.records["test.registry.field"] = Record(\n+            field.Set(title=u"Simple record", value_type=field.Int(title=u"Val")),\n+            value=set([1]),\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertTrue(\n-            isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.Set\n-            )\n-        )\n-        self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.registry.field\'].field.title\n+            isinstance(self.registry.records["test.registry.field"].field, field.Set)\n         )\n         self.assertEqual(\n-            frozenset([4, 6]),\n-            self.registry[\'test.registry.field\']\n+            u"Simple record", self.registry.records["test.registry.field"].field.title\n         )\n+        self.assertEqual(frozenset([4, 6]), self.registry["test.registry.field"])\n \n     def test_import_collection_nopurge(self):\n         xml = """\\\n@@ -805,34 +757,24 @@ def test_import_collection_nopurge(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = Record(\n-            field.Set(\n-                title=u"Simple record",\n-                value_type=field.Int(title=u"Val")\n-            ),\n-            value=set([1])\n+        self.registry.records["test.registry.field"] = Record(\n+            field.Set(title=u"Simple record", value_type=field.Int(title=u"Val")),\n+            value=set([1]),\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertTrue(\n-            isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.Set\n-            )\n+            isinstance(self.registry.records["test.registry.field"].field, field.Set)\n         )\n         self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.registry.field\'].field.title\n-        )\n-        self.assertEqual(\n-            frozenset([1, 4, 6]),\n-            self.registry[\'test.registry.field\']\n+            u"Simple record", self.registry.records["test.registry.field"].field.title\n         )\n+        self.assertEqual(frozenset([1, 4, 6]), self.registry["test.registry.field"])\n \n     def test_import_collection_list_append(self):\n         xml = """\\\n@@ -846,21 +788,18 @@ def test_import_collection_list_append(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = Record(\n-            field.List(\n-                title=u"Simple record",\n-                value_type=field.Int(title=u"Val")\n-            ),\n-            value=[2, 4]\n+        self.registry.records["test.registry.field"] = Record(\n+            field.List(title=u"Simple record", value_type=field.Int(title=u"Val")),\n+            value=[2, 4],\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n-        self.assertEqual([2, 4, 6], self.registry[\'test.registry.field\'])\n+        self.assertEqual([2, 4, 6], self.registry["test.registry.field"])\n \n     def test_import_collection_tuple_append(self):\n         xml = """\\\n@@ -874,23 +813,29 @@ def test_import_collection_tuple_append(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = Record(\n+        self.registry.records["test.registry.field"] = Record(\n             field.Tuple(\n-                title=u"Simple record",\n-                value_type=field.TextLine(title=u"Val")\n+                title=u"Simple record", value_type=field.TextLine(title=u"Val")\n+            ),\n+            value=(\n+                u"a",\n+                u"b",\n             ),\n-            value=(u"a", u"b", )\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            (u"a", u"b", u"c", ),\n-            self.registry[\'test.registry.field\']\n+            (\n+                u"a",\n+                u"b",\n+                u"c",\n+            ),\n+            self.registry["test.registry.field"],\n         )\n \n     def test_import_collection_set_append(self):\n@@ -905,21 +850,18 @@ def test_import_collection_set_append(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = Record(\n-            field.Set(\n-                title=u"Simple record",\n-                value_type=field.Int(title=u"Val")\n-            ),\n-            value=set([2, 4])\n+        self.registry.records["test.registry.field"] = Record(\n+            field.Set(title=u"Simple record", value_type=field.Int(title=u"Val")),\n+            value=set([2, 4]),\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n-        self.assertEqual(set([2, 4, 6]), self.registry[\'test.registry.field\'])\n+        self.assertEqual(set([2, 4, 6]), self.registry["test.registry.field"])\n \n     def test_import_collection_frozenset_append(self):\n         xml = """\\\n@@ -933,24 +875,18 @@ def test_import_collection_frozenset_append(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = Record(\n-            field.FrozenSet(\n-                title=u"Simple record",\n-                value_type=field.Int(title=u"Val")\n-            ),\n-            value=frozenset([2, 4])\n+        self.registry.records["test.registry.field"] = Record(\n+            field.FrozenSet(title=u"Simple record", value_type=field.Int(title=u"Val")),\n+            value=frozenset([2, 4]),\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n-        self.assertEqual(\n-            frozenset([2, 4, 6]),\n-            self.registry[\'test.registry.field\']\n-        )\n+        self.assertEqual(frozenset([2, 4, 6]), self.registry["test.registry.field"])\n \n     def test_import_dict_field(self):\n         xml = """\\\n@@ -973,30 +909,23 @@ def test_import_dict_field(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Old value")\n+        self.registry.records["test.registry.field"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"), value=u"Old value"\n+        )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertTrue(\n-            isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.Dict\n-            )\n-        )\n-        self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.registry.field\'].field.title\n+            isinstance(self.registry.records["test.registry.field"].field, field.Dict)\n         )\n         self.assertEqual(\n-            {\'a\': 1, \'b\': 3},\n-            self.registry[\'test.registry.field\']\n+            u"Simple record", self.registry.records["test.registry.field"].field.title\n         )\n+        self.assertEqual({"a": 1, "b": 3}, self.registry["test.registry.field"])\n \n     def test_import_dict_value(self):\n         xml = """\\\n@@ -1010,32 +939,28 @@ def test_import_dict_value(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = \\\n-            Record(field.Dict(title=u"Simple record",\n-                              key_type=field.ASCIILine(title=u"Key"),\n-                              value_type=field.Int(title=u"Val")),\n-                   value={\'a\': 1})\n+        self.registry.records["test.registry.field"] = Record(\n+            field.Dict(\n+                title=u"Simple record",\n+                key_type=field.ASCIILine(title=u"Key"),\n+                value_type=field.Int(title=u"Val"),\n+            ),\n+            value={"a": 1},\n+        )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertTrue(\n-            isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.Dict\n-            )\n-        )\n-        self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.registry.field\'].field.title\n+            isinstance(self.registry.records["test.registry.field"].field, field.Dict)\n         )\n         self.assertEqual(\n-            {\'x\': 4, \'y\': 6},\n-            self.registry[\'test.registry.field\']\n+            u"Simple record", self.registry.records["test.registry.field"].field.title\n         )\n+        self.assertEqual({"x": 4, "y": 6}, self.registry["test.registry.field"])\n \n     def test_import_dict_nopurge(self):\n         xml = """\\\n@@ -1049,32 +974,28 @@ def test_import_dict_nopurge(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = \\\n-            Record(field.Dict(title=u"Simple record",\n-                              key_type=field.ASCIILine(title=u"Key"),\n-                              value_type=field.Int(title=u"Val")),\n-                   value={\'a\': 1})\n+        self.registry.records["test.registry.field"] = Record(\n+            field.Dict(\n+                title=u"Simple record",\n+                key_type=field.ASCIILine(title=u"Key"),\n+                value_type=field.Int(title=u"Val"),\n+            ),\n+            value={"a": 1},\n+        )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertTrue(\n-            isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.Dict\n-            )\n+            isinstance(self.registry.records["test.registry.field"].field, field.Dict)\n         )\n         self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.registry.field\'].field.title\n-        )\n-        self.assertEqual(\n-            {\'a\': 1, \'x\': 4, \'y\': 6},\n-            self.registry[\'test.registry.field\']\n+            u"Simple record", self.registry.records["test.registry.field"].field.title\n         )\n+        self.assertEqual({"a": 1, "x": 4, "y": 6}, self.registry["test.registry.field"])\n \n     def test_import_choice_field(self):\n         xml = """\\\n@@ -1091,33 +1012,30 @@ def test_import_choice_field(self):\n </registry>\n """\n \n-        self.registry.records[\'test.registry.field\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Old value")\n+        self.registry.records["test.registry.field"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"), value=u"Old value"\n+        )\n \n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertTrue(\n-            isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.Choice\n-            )\n+            isinstance(self.registry.records["test.registry.field"].field, field.Choice)\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records[\'test.registry.field\'].\n-            field.title\n+            u"Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual(\n-            [u\'One\', u\'Two\'],\n-            [t.value for t in self.registry.records[\'test.registry.field\'].field.vocabulary]  # noqa\n-        )\n-        self.assertEqual(\n-            None, self.registry[\'test.registry.field\']\n+            [u"One", u"Two"],\n+            [\n+                t.value\n+                for t in self.registry.records["test.registry.field"].field.vocabulary\n+            ],  # noqa\n         )\n+        self.assertEqual(None, self.registry["test.registry.field"])\n \n     def test_import_with_comments(self):\n         xml = """\\\n@@ -1138,7 +1056,7 @@ def test_import_with_comments(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n         importRegistry(context)\n \n@@ -1146,36 +1064,24 @@ def test_import_with_comments(self):\n \n         self.assertTrue(\n             isinstance(\n-                self.registry.records[\'test.registry.field\'].field,\n-                field.TextLine\n+                self.registry.records["test.registry.field"].field, field.TextLine\n             )\n         )\n         self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.registry.field\'].field.title\n-        )\n-        self.assertEqual(\n-            u"value",\n-            self.registry.records[\'test.registry.field\'].field.__name__\n+            u"Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual(\n-            u"N/A",\n-            self.registry[\'test.registry.field\']\n+            u"value", self.registry.records["test.registry.field"].field.__name__\n         )\n+        self.assertEqual(u"N/A", self.registry["test.registry.field"])\n \n-        self.assertIn(\n-            \'plone.app.registry.tests.data.SomethingElse.name\', self.registry\n-        )\n-        self.assertIn(\n-            \'plone.app.registry.tests.data.SomethingElse.age\', self.registry\n-        )\n+        self.assertIn("plone.app.registry.tests.data.SomethingElse.name", self.registry)\n+        self.assertIn("plone.app.registry.tests.data.SomethingElse.age", self.registry)\n         self.assertEqual(\n-            self.registry[\'plone.app.registry.tests.data.SomethingElse.name\'],\n-            \'Magic\'\n+            self.registry["plone.app.registry.tests.data.SomethingElse.name"], "Magic"\n         )\n         self.assertEqual(\n-            self.registry[\'plone.app.registry.tests.data.SomethingElse.age\'],\n-            42\n+            self.registry["plone.app.registry.tests.data.SomethingElse.age"], 42\n         )\n \n     def test_remove(self):\n@@ -1185,11 +1091,12 @@ def test_remove(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n         importRegistry(context)\n \n         self.assertEqual(0, len(self.registry.records))\n@@ -1201,11 +1108,12 @@ def test_delete_deprecated(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n         importRegistry(context)\n \n         self.assertEqual(0, len(self.registry.records))\n@@ -1217,22 +1125,19 @@ def test_delete_not_found(self):\n </registry>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'registry.xml\': xml}\n+        context._files = {"registry.xml": xml}\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Simple record",\n-            self.registry.records[\'test.export.simple\'].field.title\n-        )\n-        self.assertEqual(\n-            u"Sample value",\n-            self.registry[\'test.export.simple\']\n+            u"Simple record", self.registry.records["test.export.simple"].field.title\n         )\n+        self.assertEqual(u"Sample value", self.registry["test.export.simple"])\n \n     def test_import_folder(self):\n         xml1 = """\\\n@@ -1267,14 +1172,14 @@ def test_import_folder(self):\n """\n         context = DummyImportContext(self.site, purge=False)\n         context._files = {\n-            \'registry.xml\': xml1,\n-            \'registry/foo2.xml\': xml2,\n-            \'registry/foo3.xml\': xml3\n+            "registry.xml": xml1,\n+            "registry/foo2.xml": xml2,\n+            "registry/foo3.xml": xml3,\n         }\n         context._directories = {\n-            \'registry\': [\n-                \'foo2.xml\',\n-                \'foo3.xml\',\n+            "registry": [\n+                "foo2.xml",\n+                "foo3.xml",\n             ]\n         }\n         importRegistry(context)\n@@ -1282,35 +1187,88 @@ def test_import_folder(self):\n         self.assertEqual(3, len(self.registry.records))\n \n         for idx in range(1, 4):\n-            fieldname = \'test.registry.foobar%i\' % idx\n+            fieldname = "test.registry.foobar%i" % idx\n             self.assertTrue(\n-                isinstance(\n-                    self.registry.records[fieldname].field,\n-                    field.TextLine)\n+                isinstance(self.registry.records[fieldname].field, field.TextLine)\n             )\n             self.assertEqual(\n-                u"Simple record",\n-                self.registry.records[fieldname].field.title\n+                u"Simple record", self.registry.records[fieldname].field.title\n             )\n-            self.assertEqual(\n-                u"value",\n-                self.registry.records[fieldname].field.__name__\n+            self.assertEqual(u"value", self.registry.records[fieldname].field.__name__)\n+            self.assertEqual(u"N/A", self.registry[fieldname])\n+\n+    def test_import_jsonfield_only(self):\n+        xml = """\\\n+<registry>\n+    <record name="test.registry.field">\n+        <field type="plone.registry.field.JSONField">\n+          <default>{}</default>\n+          <title>JSON record</title>\n+        </field>\n+    </record>\n+</registry>\n+"""\n+        context = DummyImportContext(self.site, purge=False)\n+        context._files = {"registry.xml": xml}\n+\n+        importRegistry(context)\n+\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n+            isinstance(\n+                self.registry.records["test.registry.field"].field, field.JSONField\n             )\n-            self.assertEqual(\n-                u"N/A",\n-                self.registry[fieldname]\n+        )\n+        self.assertEqual(\n+            u"JSON record", self.registry.records["test.registry.field"].field.title\n+        )\n+        self.assertDictEqual({}, self.registry["test.registry.field"])\n+\n+    def test_import_jsonfield_with_value(self):\n+        xml = """\\\n+<registry>\n+    <record name="test.registry.field">\n+        <field type="plone.registry.field.JSONField">\n+          <default>{}</default>\n+          <title>JSON record</title>\n+        </field>\n+        <value>{"items":[{"color":"red","value":"one"},{"color":"r\xc3\xb6d","value":"two"}]}</value>\n+    </record>\n+</registry>\n+"""\n+        context = DummyImportContext(self.site, purge=False)\n+        context._files = {"registry.xml": xml}\n+\n+        importRegistry(context)\n+\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n+            isinstance(\n+                self.registry.records["test.registry.field"].field, field.JSONField\n             )\n+        )\n+        self.assertEqual(\n+            u"JSON record", self.registry.records["test.registry.field"].field.title\n+        )\n+        self.assertDictEqual(\n+            {\n+                "items": [\n+                    {"color": "red", "value": "one"},\n+                    {"color": "r\xc3\xb6d", "value": "two"},\n+                ]\n+            },\n+            self.registry["test.registry.field"],\n+        )\n \n \n class TestExport(ExportImportTest):\n-\n     def test_export_empty(self):\n \n         xml = """<registry />"""\n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual("registry.xml", context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_simple(self):\n@@ -1326,14 +1284,15 @@ def test_export_simple(self):\n   </record>\n </registry>"""\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n \n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual("registry.xml", context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_with_interface(self):\n@@ -1362,16 +1321,17 @@ def test_export_with_interface(self):\n   </record>\n </registry>"""\n \n-        self.registry.records[\'test.export.simple\'] = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n \n         self.registry.registerInterface(data.ITestSettings)\n \n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual("registry.xml", context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_field_ref(self):\n@@ -1391,18 +1351,19 @@ def test_export_field_ref(self):\n   </record>\n </registry>"""\n \n-        self.registry.records[\'test.export.simple\'] = refRecord = \\\n-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),\n-                   value=u"Sample value")\n+        self.registry.records["test.export.simple"] = refRecord = Record(\n+            field.TextLine(title=u"Simple record", default=u"N/A"),\n+            value=u"Sample value",\n+        )\n \n-        self.registry.records[\'test.export.simple.override\'] = \\\n-            Record(FieldRef(refRecord.__name__, refRecord.field),\n-                   value=u"Another value")\n+        self.registry.records["test.export.simple.override"] = Record(\n+            FieldRef(refRecord.__name__, refRecord.field), value=u"Another value"\n+        )\n \n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual("registry.xml", context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_with_collection(self):\n@@ -1421,18 +1382,15 @@ def test_export_with_collection(self):\n     </value>\n   </record>\n </registry>"""\n-        self.registry.records[\'test.export.simple\'] = Record(\n-            field.List(\n-                title=u"Simple record",\n-                value_type=field.Int(title=u"Val")\n-            ),\n-            value=[2]\n+        self.registry.records["test.export.simple"] = Record(\n+            field.List(title=u"Simple record", value_type=field.Int(title=u"Val")),\n+            value=[2],\n         )\n \n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual("registry.xml", context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_with_dict(self):\n@@ -1456,16 +1414,20 @@ def test_export_with_dict(self):\n   </record>\n </registry>"""\n \n-        self.registry.records[\'test.export.dict\'] = \\\n-            Record(field.Dict(title=u"Dict", default={},\n-                              key_type=field.ASCIILine(title=u"Key"),\n-                              value_type=field.Int(title=u"Value")),\n-                   value={\'a\': 1})\n+        self.registry.records["test.export.dict"] = Record(\n+            field.Dict(\n+                title=u"Dict",\n+                default={},\n+                key_type=field.ASCIILine(title=u"Key"),\n+                value_type=field.Int(title=u"Value"),\n+            ),\n+            value={"a": 1},\n+        )\n \n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual("registry.xml", context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_with_choice(self):\n@@ -1481,14 +1443,14 @@ def test_export_with_choice(self):\n   </record>\n </registry>"""\n \n-        self.registry.records[\'test.export.choice\'] = Record(\n+        self.registry.records["test.export.choice"] = Record(\n             field.Choice(title=u"Simple record", vocabulary=u"dummy.vocab")\n         )\n \n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual("registry.xml", context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_with_missing_schema_does_not_error(self):\n@@ -1504,22 +1466,53 @@ def test_export_with_missing_schema_does_not_error(self):\n   </record>\n </registry>"""\n \n-        self.registry.records[\'test.export.simple\'] = Record(\n+        self.registry.records["test.export.simple"] = Record(\n             field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value"\n+            value=u"Sample value",\n         )\n \n         # Note: These are nominally read-only!\n-        self.registry.records[\'test.export.simple\'].field.interfaceName = \'non.existant.ISchema\'  # noqa\n-        self.registry.records[\'test.export.simple\'].field.fieldName = \'blah\'\n+        self.registry.records[\n+            "test.export.simple"\n+        ].field.interfaceName = "non.existant.ISchema"  # noqa\n+        self.registry.records["test.export.simple"].field.fieldName = "blah"\n+\n+        alsoProvides(self.registry.records["test.export.simple"], IInterfaceAwareRecord)\n+\n+        context = DummyExportContext(self.site)\n+        exportRegistry(context)\n+\n+        self.assertEqual("registry.xml", context._wrote[0][0])\n+        self.assertXmlEquals(xml, context._wrote[0][1])\n \n-        alsoProvides(\n-            self.registry.records[\'test.export.simple\'],\n-            IInterfaceAwareRecord\n+    def test_export_with_jsonfield(self):\n+\n+        xml = """\\\n+<registry>\n+  <record name="test.export.field">\n+    <field type="plone.registry.field.JSONField">\n+      <default>{}</default>\n+      <title>Dict</title>\n+    </field>\n+    <value>{\'items\': [{\'color\': \'red\', \'value\': \'one\'}, {\'color\': \'r\xc3\xb6d\', \'value\': \'two\'}]}</value>\n+  </record>\n+</registry>"""\n+\n+        self.registry.records["test.export.field"] = Record(\n+            field.JSONField(\n+                title=u"Dict",\n+                default={},\n+            ),\n+            value={\n+                "items": [\n+                    {"color": "red", "value": "one"},\n+                    {"color": "r\xc3\xb6d", "value": "two"},\n+                ]\n+            },\n         )\n \n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual("registry.xml", context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n'

