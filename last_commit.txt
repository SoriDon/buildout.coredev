Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-10-04T19:37:01+02:00
Author: Manuel Reinhardt (reinhardt) <reinhardt@syslab.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/1fd2b8171287e38e0ae1c7091b7ec288b5051539

Removed isExpired.py skin script. #1801 (#2566)

Files changed:
M CHANGES.rst
M Products/CMFPlone/tests/testContentPublishing.py
D Products/CMFPlone/skins/plone_scripts/isExpired.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 523a85adc..079efb77f 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -20,6 +20,9 @@ Breaking changes:\n   \n - Removed getObjectsFromPathList.py skin script. #1801\n   [reinhardt]\n+\n+- Removed isExpired.py skin script. #1801\n+  [reinhardt]\n   \n - Removed redirectToReferrer.py skin script. #1801\n   [tlotze]\ndiff --git a/Products/CMFPlone/skins/plone_scripts/isExpired.py b/Products/CMFPlone/skins/plone_scripts/isExpired.py\ndeleted file mode 100644\nindex 9e68f7df3..000000000\n--- a/Products/CMFPlone/skins/plone_scripts/isExpired.py\n+++ /dev/null\n@@ -1,15 +0,0 @@\n-## Script (Python) "isExpired"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=content=None\n-##title=Find out if the object is expired\n-\n-from Products.CMFPlone.utils import isExpired\n-\n-if not content:\n-    content = context\n-\n-return isExpired(content)\ndiff --git a/Products/CMFPlone/tests/testContentPublishing.py b/Products/CMFPlone/tests/testContentPublishing.py\nindex 30838929a..aedf3afe0 100644\n--- a/Products/CMFPlone/tests/testContentPublishing.py\n+++ b/Products/CMFPlone/tests/testContentPublishing.py\n@@ -3,6 +3,7 @@\n # code inspired by Ween\n \n from Products.CMFPlone.tests.PloneTestCase import PloneTestCase\n+from Products.CMFPlone.utils import isExpired\n \n text = """I lick my brain in silence\n Rather squeeze my head instead\n@@ -119,7 +120,7 @@ def testPublishingSubobjectsAndExpireThem(self):\n                   self.folder.f1.f2):\n             self.assertEqual(self.workflow.getInfoFor(o, \'review_state\'),\n                              \'published\')\n-            self.assertTrue(self.portal.isExpired(o))\n+            self.assertTrue(isExpired(o))\n \n     def testPublishingWithoutSubobjects(self):\n         self.setRoles([\'Manager\'])  # Make sure we can publish directly\n@@ -180,7 +181,7 @@ def testPublishingDefaultPageWhenFolderCannotBePublished(self):\n             self.workflow.getInfoFor(self.folder.d1, \'review_state\'),\n             \'published\')\n \n-    # test setting effective/expiration date and isExpired script\n+    # test setting effective/expiration date and isExpired method\n \n     def testIsExpiredWithExplicitExpiredContent(self):\n         self.setRoles([\'Manager\'])\n@@ -188,24 +189,10 @@ def testIsExpiredWithExplicitExpiredContent(self):\n         self.folder.d1.content_status_modify(workflow_action=\'publish\',\n                                              effective_date=\'1/1/2001\',\n                                              expiration_date=\'1/2/2001\')\n-        self.assertTrue(self.portal.isExpired(self.folder.d1))\n-\n-    def testIsExpiredWithImplicitExpiredContent(self):\n-        self.setRoles([\'Manager\'])\n-        self.folder.invokeFactory(\'Document\', id=\'d1\', title=\'Doc 1\')\n-        self.folder.d1.content_status_modify(workflow_action=\'publish\',\n-                                             effective_date=\'1/1/2001\',\n-                                             expiration_date=\'1/2/2001\')\n-        self.assertTrue(self.folder.d1.isExpired())\n+        self.assertTrue(isExpired(self.folder.d1))\n \n     def testIsExpiredWithExplicitNonExpiredContent(self):\n         self.setRoles([\'Manager\'])\n         self.folder.invokeFactory(\'Document\', id=\'d1\', title=\'Doc 1\')\n         self.folder.d1.content_status_modify(workflow_action=\'publish\')\n-        self.assertFalse(self.portal.isExpired(self.folder.d1))\n-\n-    def testIsExpiredWithImplicitNonExpiredContent(self):\n-        self.setRoles([\'Manager\'])\n-        self.folder.invokeFactory(\'Document\', id=\'d1\', title=\'Doc 1\')\n-        self.folder.d1.content_status_modify(workflow_action=\'publish\')\n-        self.assertFalse(self.folder.d1.isExpired())\n+        self.assertFalse(isExpired(self.folder.d1))\n'

