Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-04-10T23:45:14+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/0048854f4a56803bfcfd27524603c828f7089142

remove the unused DefautDublincoreImpl

Files changed:
A news/3493.breaking
D Products/CMFPlone/DublinCore.py

b'diff --git a/Products/CMFPlone/DublinCore.py b/Products/CMFPlone/DublinCore.py\ndeleted file mode 100644\nindex 1cb153139a..0000000000\n--- a/Products/CMFPlone/DublinCore.py\n+++ /dev/null\n@@ -1,477 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2001 Zope Foundation and Contributors.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-""" Dublin Core support for content types. """\n-\n-from AccessControl.class_init import InitializeClass\n-from AccessControl.SecurityInfo import ClassSecurityInfo\n-from AccessControl.SecurityManagement import getSecurityManager\n-from Acquisition import aq_base\n-from App.special_dtml import DTMLFile\n-from DateTime.DateTime import DateTime\n-from OFS.PropertyManager import PropertyManager\n-from plone.base.permissions import ModifyPortalContent\n-from plone.base.permissions import View\n-from Products.CMFCore.interfaces import ICatalogableDublinCore\n-from Products.CMFCore.interfaces import IDublinCore\n-from Products.CMFCore.interfaces import IMutableDublinCore\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import WWW_DIR\n-from zope.interface import implementer\n-\n-\n-_marker = []\n-\n-# For http://www.zope.org/Collectors/CMF/325\n-# We only really need this once, at startup.\n-_zone = DateTime().timezone()\n-\n-\n-def seq_strip(seq, stripper=lambda x: x.strip()):\n-    """ Strip a sequence of strings.\n-    """\n-    if isinstance(seq, list):\n-        return map(stripper, seq)\n-\n-    if isinstance(seq, tuple):\n-        return tuple(map(stripper, seq))\n-\n-    raise ValueError("{} of unsupported sequencetype {}".format(seq, type(seq)))\n-\n-\n-def tuplize(valueName, value, splitter=lambda x: x.split()):\n-\n-    if isinstance(value, tuple):\n-        return seq_strip(value)\n-\n-    if isinstance(value, list):\n-        return seq_strip(tuple(value))\n-\n-    if isinstance(value, str):\n-        return seq_strip(tuple(splitter(value)))\n-\n-    raise ValueError("%s of unsupported type" % valueName)\n-\n-\n-@implementer(IDublinCore, ICatalogableDublinCore, IMutableDublinCore)\n-class DefaultDublinCoreImpl(PropertyManager):\n-\n-    """ Mix-in class which provides Dublin Core methods.\n-    """\n-\n-    security = ClassSecurityInfo()\n-\n-    def __init__(self, title=\'\', subject=(), description=\'\', contributors=(), effective_date=None, expiration_date=None, format=\'text/html\', language=\'\', rights=\'\'\n-                 ):\n-        now = DateTime()\n-        self.creation_date = now\n-        self.modification_date = now\n-        self.creators = ()\n-        self._editMetadata(title, subject, description, contributors, effective_date, expiration_date, format, language, rights\n-                           )\n-\n-    #\n-    #  Set-modification-date-related methods.\n-    #  In DefaultDublinCoreImpl for lack of a better place.\n-    #\n-\n-    # Class variable default for an upgrade.\n-    modification_date = None\n-\n-    security.declarePrivate(\'notifyModified\')\n-\n-    def notifyModified(self):\n-        # Take appropriate action after the resource has been modified.\n-        # Update creators and modification_date.\n-        self.addCreator()\n-        self.setModificationDate()\n-\n-    security.declareProtected(ModifyPortalContent, \'addCreator\')\n-\n-    def addCreator(self, creator=None):\n-        # Add creator to Dublin Core creators.\n-        if creator is None:\n-            user = getSecurityManager().getUser()\n-            creator = user and user.getId()\n-\n-        # call self.listCreators() to make sure self.creators exists\n-        if creator and not creator in self.listCreators():\n-            self.creators = self.creators + (creator, )\n-\n-    security.declareProtected(ModifyPortalContent, \'setModificationDate\')\n-\n-    def setModificationDate(self, modification_date=None):\n-        # Set the date when the resource was last modified.\n-        # When called without an argument, sets the date to now.\n-        if modification_date is None:\n-            self.modification_date = DateTime()\n-        else:\n-            self.modification_date = self._datify(modification_date)\n-\n-    #\n-    #  DublinCore interface query methods\n-    #\n-    security.declareProtected(View, \'Title\')\n-\n-    def Title(self):\n-        # Dublin Core Title element - resource name.\n-        return self.title\n-\n-    security.declareProtected(View, \'listCreators\')\n-\n-    def listCreators(self):\n-        # List Dublin Core Creator elements - resource authors.\n-        if not hasattr(aq_base(self), \'creators\'):\n-            # for content created with CMF versions before 1.5\n-            owner_tuple = self.getOwnerTuple()\n-            if owner_tuple:\n-                self.creators = (owner_tuple[1],)\n-            else:\n-                self.creators = ()\n-        return self.creators\n-\n-    security.declareProtected(View, \'Creator\')\n-\n-    def Creator(self):\n-        # Dublin Core Creator element - resource author.\n-        creators = self.listCreators()\n-        return creators and creators[0] or \'\'\n-\n-    security.declareProtected(View, \'Subject\')\n-\n-    def Subject(self):\n-        # Dublin Core Subject element - resource keywords.\n-        return getattr(self, \'subject\', ())  # compensate for *old* content\n-\n-    security.declareProtected(View, \'Description\')\n-\n-    def Description(self):\n-        # Dublin Core Description element - resource summary.\n-        return self.description\n-\n-    security.declareProtected(View, \'Publisher\')\n-\n-    def Publisher(self):\n-        # Dublin Core Publisher element - resource publisher.\n-        tool = getToolByName(self, \'portal_metadata\', None)\n-\n-        if tool is not None:\n-            return tool.getPublisher()\n-\n-        return \'No publisher\'\n-\n-    security.declareProtected(View, \'listContributors\')\n-\n-    def listContributors(self):\n-        # Dublin Core Contributor elements - resource collaborators.\n-        return self.contributors\n-\n-    security.declareProtected(View, \'Contributors\')\n-\n-    def Contributors(self):\n-        # Deprecated alias of listContributors.\n-        return self.listContributors()\n-\n-    security.declareProtected(View, \'Date\')\n-\n-    def Date(self, zone=None):\n-        # Dublin Core Date element - default date.\n-        if zone is None:\n-            zone = _zone\n-        # Return effective_date if set, modification date otherwise\n-        date = getattr(self, \'effective_date\', None)\n-        if date is None:\n-            date = self.modified()\n-        return date.toZone(zone).ISO()\n-\n-    security.declareProtected(View, \'CreationDate\')\n-\n-    def CreationDate(self, zone=None):\n-        # Dublin Core Date element - date resource created.\n-        if zone is None:\n-            zone = _zone\n-        # return unknown if never set properly\n-        if self.creation_date:\n-            return self.creation_date.toZone(zone).ISO()\n-        else:\n-            return \'Unknown\'\n-\n-    security.declareProtected(View, \'EffectiveDate\')\n-\n-    def EffectiveDate(self, zone=None):\n-        # Dublin Core Date element - date resource becomes effective.\n-        if zone is None:\n-            zone = _zone\n-        ed = getattr(self, \'effective_date\', None)\n-        return ed and ed.toZone(zone).ISO() or \'None\'\n-\n-    security.declareProtected(View, \'ExpirationDate\')\n-\n-    def ExpirationDate(self, zone=None):\n-        # Dublin Core Date element - date resource expires.\n-        if zone is None:\n-            zone = _zone\n-        ed = getattr(self, \'expiration_date\', None)\n-        return ed and ed.toZone(zone).ISO() or \'None\'\n-\n-    security.declareProtected(View, \'ModificationDate\')\n-\n-    def ModificationDate(self, zone=None):\n-        # Dublin Core Date element - date resource last modified.\n-        if zone is None:\n-            zone = _zone\n-        return self.modified().toZone(zone).ISO()\n-\n-    security.declareProtected(View, \'Type\')\n-\n-    def Type(self):\n-        # Dublin Core Type element - resource type.\n-        ti = self.getTypeInfo()\n-        return ti is not None and ti.Title() or \'Unknown\'\n-\n-    security.declareProtected(View, \'Format\')\n-\n-    def Format(self):\n-        # Dublin Core Format element - resource format.\n-        return self.format\n-\n-    security.declareProtected(View, \'Identifier\')\n-\n-    def Identifier(self):\n-        # Dublin Core Identifier element - resource ID.\n-        # XXX: fixme using \'portal_metadata\' (we need to prepend the\n-        #      right prefix to self.getPhysicalPath().\n-        return self.absolute_url()\n-\n-    security.declareProtected(View, \'Language\')\n-\n-    def Language(self):\n-        # Dublin Core Language element - resource language.\n-        return self.language\n-\n-    security.declareProtected(View, \'Rights\')\n-\n-    def Rights(self):\n-        # Dublin Core Rights element - resource copyright.\n-        return self.rights\n-\n-    #\n-    #  DublinCore utility methods\n-    #\n-    def content_type(self):\n-        """ WebDAV needs this to do the Right Thing (TM).\n-        """\n-        return self.Format()\n-\n-    __FLOOR_DATE = DateTime(1970, 0)  # always effective\n-\n-    security.declareProtected(View, \'isEffective\')\n-\n-    def isEffective(self, date):\n-        # Is the date within the resource\'s effective range?\n-        pastEffective = (self.effective_date is None\n-                         or self.effective_date <= date)\n-        beforeExpiration = (self.expiration_date is None\n-                            or self.expiration_date >= date)\n-        return pastEffective and beforeExpiration\n-\n-    #\n-    #  CatalogableDublinCore methods\n-    #\n-    security.declareProtected(View, \'created\')\n-\n-    def created(self):\n-        # Dublin Core Date element - date resource created.\n-        # allow for non-existent creation_date, existed always\n-        date = getattr(self, \'creation_date\', None)\n-        return date is None and self.__FLOOR_DATE or date\n-\n-    security.declareProtected(View, \'effective\')\n-\n-    def effective(self):\n-        # Dublin Core Date element - date resource becomes effective.\n-        marker = []\n-        date = getattr(self, \'effective_date\', marker)\n-        if date is marker:\n-            date = getattr(self, \'creation_date\', None)\n-        return date is None and self.__FLOOR_DATE or date\n-\n-    __CEILING_DATE = DateTime(2500, 0)  # never expires\n-\n-    security.declareProtected(View, \'expires\')\n-\n-    def expires(self):\n-        # Dublin Core Date element - date resource expires.\n-        date = getattr(self, \'expiration_date\', None)\n-        return date is None and self.__CEILING_DATE or date\n-\n-    security.declareProtected(View, \'modified\')\n-\n-    def modified(self):\n-        # Dublin Core Date element - date resource last modified.\n-        date = self.modification_date\n-        if date is None:\n-            # Upgrade.\n-            date = DateTime(self._p_mtime)\n-            self.modification_date = date\n-        return date\n-\n-    security.declareProtected(View, \'getMetadataHeaders\')\n-\n-    def getMetadataHeaders(self):\n-        # Return RFC-822-style headers.\n-        hdrlist = []\n-        hdrlist.append((\'Title\', self.Title()))\n-        hdrlist.append((\'Subject\', \', \'.join(self.Subject())))\n-        hdrlist.append((\'Publisher\', self.Publisher()))\n-        hdrlist.append((\'Description\', self.Description()))\n-        hdrlist.append((\'Contributors\', \'; \'.join(self.Contributors())))\n-        hdrlist.append((\'Effective_date\', self.EffectiveDate()))\n-        hdrlist.append((\'Expiration_date\', self.ExpirationDate()))\n-        hdrlist.append((\'Type\', self.Type()))\n-        hdrlist.append((\'Format\', self.Format()))\n-        hdrlist.append((\'Language\', self.Language()))\n-        hdrlist.append((\'Rights\', self.Rights()))\n-        return hdrlist\n-\n-    #\n-    #  MutableDublinCore methods\n-    #\n-    security.declarePrivate(\'_datify\')\n-\n-    def _datify(self, attrib):\n-        if attrib == \'None\':\n-            attrib = None\n-        elif not isinstance(attrib, DateTime):\n-            if attrib is not None:\n-                attrib = DateTime(attrib)\n-        return attrib\n-\n-    security.declareProtected(ModifyPortalContent, \'setTitle\')\n-\n-    def setTitle(self, title):\n-        # Set Dublin Core Title element - resource name.\n-        self.title = title\n-\n-    security.declareProtected(ModifyPortalContent, \'setCreators\')\n-\n-    def setCreators(self, creators):\n-        # Set Dublin Core Creator elements - resource authors.\n-        self.creators = tuplize(\'creators\', creators)\n-\n-    security.declareProtected(ModifyPortalContent, \'setSubject\')\n-\n-    def setSubject(self, subject):\n-        # Set Dublin Core Subject element - resource keywords.\n-        self.subject = tuplize(\'subject\', subject)\n-\n-    security.declareProtected(ModifyPortalContent, \'setDescription\')\n-\n-    def setDescription(self, description):\n-        # Set Dublin Core Description element - resource summary.\n-        self.description = description\n-\n-    security.declareProtected(ModifyPortalContent, \'setContributors\')\n-\n-    def setContributors(self, contributors):\n-        # Set Dublin Core Contributor elements - resource collaborators.\n-        semi_split = lambda s: map(lambda x: x.strip(), s.split(\';\'))\n-        self.contributors = tuplize(\'contributors\', contributors, semi_split)\n-\n-    security.declareProtected(ModifyPortalContent, \'setEffectiveDate\')\n-\n-    def setEffectiveDate(self, effective_date):\n-        # Set Dublin Core Date element - date resource becomes effective.\n-        self.effective_date = self._datify(effective_date)\n-\n-    security.declareProtected(ModifyPortalContent, \'setExpirationDate\')\n-\n-    def setExpirationDate(self, expiration_date):\n-        # Set Dublin Core Date element - date resource expires.\n-        self.expiration_date = self._datify(expiration_date)\n-\n-    security.declareProtected(ModifyPortalContent, \'setFormat\')\n-\n-    def setFormat(self, format):\n-        # Set Dublin Core Format element - resource format.\n-        self.format = format\n-\n-    security.declareProtected(ModifyPortalContent, \'setLanguage\')\n-\n-    def setLanguage(self, language):\n-        # Set Dublin Core Language element - resource language.\n-        self.language = language\n-\n-    security.declareProtected(ModifyPortalContent, \'setRights\')\n-\n-    def setRights(self, rights):\n-        # Set Dublin Core Rights element - resource copyright.\n-        self.rights = rights\n-\n-    #\n-    #  Management tab methods\n-    #\n-\n-    security.declarePrivate(\'_editMetadata\')\n-\n-    def _editMetadata(self, title=_marker, subject=_marker, description=_marker, contributors=_marker, effective_date=_marker, expiration_date=_marker, format=_marker, language=_marker, rights=_marker\n-                      ):\n-        # Update the editable metadata for this resource.\n-        if title is not _marker:\n-            self.setTitle(title)\n-        if subject is not _marker:\n-            self.setSubject(subject)\n-        if description is not _marker:\n-            self.setDescription(description)\n-        if contributors is not _marker:\n-            self.setContributors(contributors)\n-        if effective_date is not _marker:\n-            self.setEffectiveDate(effective_date)\n-        if expiration_date is not _marker:\n-            self.setExpirationDate(expiration_date)\n-        if format is not _marker:\n-            self.setFormat(format)\n-        if language is not _marker:\n-            self.setLanguage(language)\n-        if rights is not _marker:\n-            self.setRights(rights)\n-\n-    security.declareProtected(ModifyPortalContent, \'manage_metadata\')\n-    manage_metadata = DTMLFile(\'zmi_metadata\', WWW_DIR)\n-\n-    security.declareProtected(ModifyPortalContent, \'manage_editMetadata\')\n-\n-    def manage_editMetadata(self, title, subject, description, contributors, effective_date, expiration_date, format, language, rights, REQUEST\n-                            ):\n-        """ Update metadata from the ZMI.\n-        """\n-        self._editMetadata(title, subject, description, contributors, effective_date, expiration_date, format, language, rights\n-                           )\n-        REQUEST[\'RESPONSE\'].redirect(self.absolute_url()\n-                                     + \'/manage_metadata\'\n-                                     + \'?manage_tabs_message=Metadata+updated.\')\n-\n-    security.declareProtected(ModifyPortalContent, \'editMetadata\')\n-\n-    def editMetadata(self, title=\'\', subject=(), description=\'\', contributors=(), effective_date=None, expiration_date=None, format=\'text/html\', language=\'en-US\', rights=\'\'\n-                     ):\n-        # Need to add check for webDAV locked resource for TTW methods.\n-        # As per bug #69, we can\'t assume they use the webdav\n-        # locking interface, and fail gracefully if they don\'t.\n-        if hasattr(self, \'failIfLocked\'):\n-            self.failIfLocked()\n-\n-        self._editMetadata(title=title, subject=subject, description=description, contributors=contributors, effective_date=effective_date, expiration_date=expiration_date, format=format, language=language, rights=rights\n-                           )\n-        self.reindexObject()\n-\n-InitializeClass(DefaultDublinCoreImpl)\ndiff --git a/news/3493.breaking b/news/3493.breaking\nnew file mode 100644\nindex 0000000000..783040481b\n--- /dev/null\n+++ b/news/3493.breaking\n@@ -0,0 +1,3 @@\n+`DublicCore` was once used with Archetypes. \n+This code is dead now and got removed.\n+[jensens]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-04-11T11:50:35+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/9438067badd134a92acc1d5432527e14d4359e4d

Merge branch 'master' into rm-defaultdublincoreimpl

Files changed:
A Products/CMFPlone/tests/robot/plone-logo.png
A news/3495.feature
M Products/CMFPlone/browser/search.py
M Products/CMFPlone/browser/templates/search.pt
M Products/CMFPlone/tests/robot/test_livesearch.robot

b'diff --git a/Products/CMFPlone/browser/search.py b/Products/CMFPlone/browser/search.py\nindex 8e396ed2ed..c44596fe4c 100644\n--- a/Products/CMFPlone/browser/search.py\n+++ b/Products/CMFPlone/browser/search.py\n@@ -231,6 +231,16 @@ def navroot_url(self):\n             self._navroot_url = state.navigation_root_url()\n         return self._navroot_url\n \n+    @property\n+    def show_images(self):\n+        registry = queryUtility(IRegistry)\n+        return registry.get(\'plone.search_show_images\')\n+\n+    @property\n+    def search_image_scale(self):\n+        registry = queryUtility(IRegistry)\n+        return registry.get(\'plone.search_image_scale\')\n+\n \n class AjaxSearch(Search):\n \ndiff --git a/Products/CMFPlone/browser/templates/search.pt b/Products/CMFPlone/browser/templates/search.pt\nindex ef4d271e8d..31f2004a97 100644\n--- a/Products/CMFPlone/browser/templates/search.pt\n+++ b/Products/CMFPlone/browser/templates/search.pt\n@@ -75,30 +75,19 @@\n           </h1>\n         </div>\n \n-        <div class="my-3" id="rss-subscription" i18n:domain="plone"\n-            tal:condition="context/@@syndication-util/search_rss_enabled">\n-          <a class="nav-link"\n-             href="${context/@@plone_context_state/object_url}/search_rss?${request/QUERY_STRING}">\n-              <img tal:replace="structure python:icons.tag(\'rss-fill\')" />\n-              <span i18n:translate="title_subscribe_rss_feed">\n-                Subscribe to an always-updated RSS feed.\n-              </span>\n-          </a>\n-        </div>\n+        <div class="d-flex mb-2">\n \n-        <ul class="nav nav-tabs">\n-\n-          <li class="nav-item">\n-            <a class="nav-link active" aria-current="page" href="#">\n-              <span i18n:translate="batch_x_items_matching_your_criteria" i18n:domain="plone" id="results-count" >\n-                <span i18n:name="number" id="search-results-number" class="badge bg-primary"\n+          <div class="flex-fill">\n+            <a class="nav-link active ps-2" aria-current="page" href="#">\n+              <span i18n:translate="batch_x_items_matching_your_criteria" class="d-flex" i18n:domain="plone" id="results-count" >\n+                <span i18n:name="number" id="search-results-number" class="badge bg-primary me-2 d-flex justify-content-center align-items-center"\n                       tal:content="batch/sequence_length|string:0">234</span>\n                   items matching your search terms.\n               </span>\n             </a>\n-          </li>\n+          </div>\n \n-          <li class="nav-item dropdown ms-auto" id="search-filter">\n+          <div class="nav-item dropdown" id="search-filter">\n             <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false" id="search-filter-toggle" i18n:translate="narrow_search_options">\n               Filter the results\n             </a>\n@@ -174,9 +163,9 @@\n                 </div>\n               </div>\n             </div>\n-          </li>\n+          </div>\n \n-          <li class="nav-item dropdown">\n+          <div class="nav-item dropdown">\n             <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false" i18n:translate="sort_by">Sort by</a>\n             <ul class="dropdown-menu dropdown-menu-md-end" id="sorting-options">\n               <li tal:repeat="item view/sort_options">\n@@ -185,16 +174,18 @@\n                    tal:content="item/title">sort option</a>\n               </li>\n             </ul>\n-          </li>\n+          </div>\n \n-        </ul>\n+        </div>\n \n         <div id="search-results-wrapper">\n \n           <metal:searchresults define-macro="search_results">\n \n             <div id="search-results"\n-                 tal:define="navigation_root_url context/@@plone_portal_state/navigation_root_url;"\n+                 tal:define="navigation_root_url context/@@plone_portal_state/navigation_root_url;\n+                             show_images python:view.show_images;\n+                             search_image_scale python:view.search_image_scale;"\n                  data-default-sort="${python:request.get(\'sort_on\') or view.default_sort_on}">\n \n               <metal:noresults tal:condition="not: batch">\n@@ -208,96 +199,107 @@\n                                          allowAnonymousViewAbout python:context.portal_registry[\'plone.allow_anon_views_about\'];\n                                          show_about python:not isAnon or allowAnonymousViewAbout;\n                                          image_scale portal/@@image_scale">\n-                <ol class="searchResults" start="${python:request.get(\'b_start\', 0) + 1}">\n+                <ol class="searchResults list-group list-group-numbered" start="${python:request.get(\'b_start\', 0) + 1}">\n                   <tal:results repeat="item batch">\n-                    <li tal:define="hasIcon item/getIcon" class="my-3 pb-3 border-bottom">\n-                      <span class="result-title">\n-                        <img class="thumb-icon"\n-                             tal:condition="hasIcon"\n-                             tal:replace="structure python: image_scale.tag(item, \'image\', scale=\'icon\', css_class=\'thumb-icon\')">\n-                        <a href="${python:(item_url + \'/view\') if item_type in use_view_action else item_url}"\n-                           class="state-${item/review_state}"\n-                           tal:define="item_url item/getURL;\n-                                       item_type item/PortalType"\n-                           tal:content="python:item.getDataOrigin().pretty_title_or_id()" />\n-                      </span>\n-\n-                      <small class="text-muted" i18n:domain="plone"\n-                            tal:condition="show_about">\n-                        <span class="documentAuthor"\n-                              i18n:translate="label_by_author">\n-                          by\n-                          <tal:block tal:condition="item/Creator"\n-                                     tal:define="author python:context.portal_membership.getMemberInfo(item.Creator())">\n-                            <a href="${navigation_root_url}/author/${item/Creator}"\n-                               tal:content="python:author and author[\'fullname\'] or item.Creator()"\n-                               tal:omit-tag="not:item/Creator"\n-                               i18n:name="author">\n-                                Bob Dobalina\n-                            </a>\n-                          </tal:block>\n-                        </span>\n-                        <span tal:define="publication_date item/EffectiveDate;\n-                                          modification_date item/ModificationDate">\n-\n-                          <span class="documentPublished" tal:condition="python: publication_date != \'None\'">\n-                            &mdash;\n-                            <span i18n:translate="box_published">\n-                              published\n+                    <li tal:define="hasIcon item/getIcon" class="list-group-item list-group-item-action d-flex justify-content-between align-items-start  fs-4">\n+                      <div class="ms-2 me-auto">\n+                        <div class="result-title">\n+                          <a href="${python:(item_url + \'/view\') if item_type in use_view_action else item_url}"\n+                            class="state-${item/review_state}"\n+                            tal:define="item_url item/getURL;\n+                                        item_type item/PortalType">\n+                                        <span tal:replace="python:item.getDataOrigin().pretty_title_or_id()"></span>\n+                          </a>\n+                        </div>\n+\n+                        <small class="text-muted small fs-6" i18n:domain="plone"\n+                              tal:condition="show_about">\n+                          <span class="documentAuthor"\n+                                i18n:translate="label_by_author">\n+                            by\n+                            <tal:block tal:condition="item/Creator"\n+                                      tal:define="author python:context.portal_membership.getMemberInfo(item.Creator())">\n+                              <a href="${navigation_root_url}/author/${item/Creator}"\n+                                tal:content="python:author and author[\'fullname\'] or item.Creator()"\n+                                tal:omit-tag="not:item/Creator"\n+                                i18n:name="author">\n+                                  Bob Dobalina\n+                              </a>\n+                            </tal:block>\n+                          </span>\n+                          <span tal:define="publication_date item/EffectiveDate;\n+                                            modification_date item/ModificationDate">\n+\n+                            <span class="documentPublished" tal:condition="python: publication_date != \'None\'">\n+                              &mdash;\n+                              <span i18n:translate="box_published">\n+                                published\n+                              </span>\n+                              <span tal:replace="python:toLocalizedTime(publication_date, long_format=0)">\n+                                August 16, 2001 at 23:35:59\n+                              </span>\n                             </span>\n-                            <span tal:replace="python:toLocalizedTime(publication_date, long_format=0)">\n-                              August 16, 2001 at 23:35:59\n+\n+                            <span class="documentModified" tal:condition="python: modification_date != publication_date">\n+                              &mdash;\n+                              <span i18n:translate="box_last_modified">\n+                                last modified\n+                              </span>\n+                              <span tal:replace="python:toLocalizedTime(modification_date, long_format=1)">\n+                                August 16, 2001 at 23:35:59\n+                              </span>\n                             </span>\n                           </span>\n-\n-                          <span class="documentModified" tal:condition="python: modification_date != publication_date">\n+                          <span tal:define="categories item/Subject|nothing"\n+                                tal:condition="categories">\n                             &mdash;\n-                            <span i18n:translate="box_last_modified">\n-                              last modified\n-                            </span>\n-                            <span tal:replace="python:toLocalizedTime(modification_date, long_format=1)">\n-                              August 16, 2001 at 23:35:59\n+                            <tal:filedunder i18n:translate="">filed under:</tal:filedunder>\n+                            <span tal:repeat="category categories">\n+                              <a href="${navigation_root_url}/@@search?Subject%3Alist=${category}" class="link-category" rel="tag"\n+                                tal:content="category">\n+                                Category\n+                              </a><tal:separator condition="not: repeat/category/end">,</tal:separator>\n                             </span>\n                           </span>\n-                        </span>\n-                        <span tal:define="categories item/Subject|nothing"\n-                              tal:condition="categories">\n-                          &mdash;\n-                          <tal:filedunder i18n:translate="">filed under:</tal:filedunder>\n-                          <span tal:repeat="category categories">\n-                            <a href="${navigation_root_url}/@@search?Subject%3Alist=${category}" class="link-category" rel="tag"\n-                               tal:content="category">\n-                              Category\n-                            </a><tal:separator condition="not: repeat/category/end">,</tal:separator>\n+                        </small>\n+\n+                        <div class="croppedDescription mt-2 mb-2 fs-5 fw-light"\n+                          tal:condition="item/CroppedDescription" tal:content="item/CroppedDescription">\n+                          Cropped description\n+                        </div>\n+\n+                        <cite class="d-block small text-muted fs-6"\n+                              tal:define="breadcrumbs python: view.breadcrumbs(item);\n+                                          is_rtl context/@@plone_portal_state/is_rtl;"\n+                              tal:condition=\'breadcrumbs\'>\n+                          <span i18n:translate="text_searchitem_location">\n+                            Located in\n+                          </span>\n+                          <span dir="${python:\'rtl\' if is_rtl else \'ltr\'}"\n+                                tal:repeat="crumb breadcrumbs">\n+                            <tal:item tal:define="is_last repeat/crumb/end;\n+                                                  url crumb/absolute_url;\n+                                                  title crumb/Title">\n+                              <a href="${url}" tal:omit-tag="not: url" tal:content="title">crumb</a>\n+                              <span class="breadcrumbSeparator" tal:condition="not: is_last">\n+                                <tal:ltr condition="not: is_rtl">/</tal:ltr>\n+                                <tal:rtl condition="is_rtl">/</tal:rtl>\n+                              </span>\n+                            </tal:item>\n                           </span>\n-                        </span>\n-                      </small>\n+                        </cite>\n \n-                      <div class="croppedDescription"\n-                         tal:condition="item/CroppedDescription" tal:content="item/CroppedDescription">\n-                        Cropped description\n                       </div>\n \n-                      <cite class="d-block small text-muted"\n-                            tal:define="breadcrumbs python: view.breadcrumbs(item);\n-                                        is_rtl context/@@plone_portal_state/is_rtl;"\n-                            tal:condition=\'breadcrumbs\'>\n-                        <span i18n:translate="text_searchitem_location">\n-                          Located in\n-                        </span>\n-                        <span dir="${python:\'rtl\' if is_rtl else \'ltr\'}"\n-                              tal:repeat="crumb breadcrumbs">\n-                          <tal:item tal:define="is_last repeat/crumb/end;\n-                                                url crumb/absolute_url;\n-                                                title crumb/Title">\n-                            <a href="${url}" tal:omit-tag="not: url" tal:content="title">crumb</a>\n-                            <span class="breadcrumbSeparator" tal:condition="not: is_last">\n-                              <tal:ltr condition="not: is_rtl">/</tal:ltr>\n-                              <tal:rtl condition="is_rtl">/</tal:rtl>\n-                            </span>\n-                          </tal:item>\n-                        </span>\n-                      </cite>\n+                      <a href="${python:(item_url + \'/view\') if item_type in use_view_action else item_url}"\n+                          class="state-${item/review_state}"\n+                          tal:define="item_url item/getURL;\n+                                    item_type item/PortalType">\n+                          <img class="thumb-icon"\n+                            tal:condition="python: show_images and hasIcon"\n+                            tal:replace="structure python: image_scale.tag(item, \'image\', scale=search_image_scale, css_class=\'thumb-icon\')">\n+                      </a>\n+\n                     </li>\n                   </tal:results>\n                 </ol>\n@@ -309,6 +311,17 @@\n \n         </div>\n \n+        <div class="my-3" id="rss-subscription" i18n:domain="plone"\n+            tal:condition="context/@@syndication-util/search_rss_enabled">\n+          <a class="mx-2 text-decoration-none -flex  align-items-center"\n+             href="${context/@@plone_context_state/object_url}/search_rss?${request/QUERY_STRING}">\n+              <img tal:replace="structure python:icons.tag(\'rss-fill\')" />\n+              <span i18n:translate="title_subscribe_rss_feed" class="ms-1">\n+                Subscribe to an always-updated RSS feed.\n+              </span>\n+          </a>\n+        </div>\n+\n     </form>\n   </div>\n \ndiff --git a/Products/CMFPlone/tests/robot/plone-logo.png b/Products/CMFPlone/tests/robot/plone-logo.png\nnew file mode 100644\nindex 0000000000..4c109bab8d\nBinary files /dev/null and b/Products/CMFPlone/tests/robot/plone-logo.png differ\ndiff --git a/Products/CMFPlone/tests/robot/test_livesearch.robot b/Products/CMFPlone/tests/robot/test_livesearch.robot\nindex 5fa969e01c..0cbbb8280d 100644\n--- a/Products/CMFPlone/tests/robot/test_livesearch.robot\n+++ b/Products/CMFPlone/tests/robot/test_livesearch.robot\n@@ -6,6 +6,8 @@ Resource  plone/app/robotframework/selenium.robot\n \n Library  Remote  ${PLONE_URL}/RobotRemote\n \n+Variables  Products/CMFPlone/tests/robot/variables.py\n+\n Resource  keywords.robot\n \n Test Setup  Run keywords  Plone Test Setup\n@@ -14,58 +16,69 @@ Test Teardown  Run keywords  Plone Test Teardown\n \n *** Test cases ***************************************************************\n \n+\n Scenario: Simple Livesearch\n-    Pass Execution  Disabled until livesearch pattern is integrated\n     Given a logged-in site administrator\n       and a document  Welcome to Plone\n      When I search for  Welcome\n      Then the livesearch results should contain  Welcome to Plone\n-      and there should be \'2\' livesearch results\n+      and expected livesearch results  1\n \n-Scenario: Livesearch for documents\n-    Pass Execution  Disabled until livesearch pattern is integrated\n+Scenario: Livesearch with image results\n     Given a logged-in site administrator\n-      and a document  My document\n-     When I search for  My document\n-     Then the livesearch results should contain  My document\n-      and there should be \'2\' livesearch results\n+      and a news item  My News with Image\n+     When I search for  My News\n+     Then the livesearch results should contain  My News with Image\n+      and expected livesearch results  1\n+      and Page should contain image  css=.livesearch-results li.search-result .col.img img\n \n-Scenario: Livesearch for folder\n-    Pass Execution  Disabled until livesearch pattern is integrated\n-    Given a logged-in site administrator\n-      and a folder  My folder\n-     When I search for  My folder\n-     Then the livesearch results should contain  My folder\n-      and there should be \'2\' livesearch results\n-\n-Scenario: Livesearch in current folder only\n-    Pass Execution  Disabled until livesearch pattern is integrated\n-    Given a logged-in site administrator\n-      and a folder with a document \'Inside Document\'\n-      and a document  Outside Document\n-     When I search the currentfolder only for  Inside Document\n-     Then the livesearch results should contain  Inside Document\n-      and the livesearch results should not contain  Outside Document\n-      and there should be \'2\' livesearch results\n+     When I disable images in results in search controlpanel\n+      and I search for  My News\n+     Then Page should not contain image  css=.livesearch-results li.search-result .col.img img\n \n \n *** Keywords *****************************************************************\n \n+a document\n+    [Arguments]  ${title}\n+    Create content  type=Document  id=doc  title=${title}\n+\n+a news item\n+    [Arguments]  ${title}\n+    Go to  ${PLONE_URL}/++add++News Item\n+    Wait until page contains  Add News Item\n+    Input text  name=form.widgets.IDublinCore.title  ${title}\n+    Choose File  name=form.widgets.ILeadImageBehavior.image  ${PATH_TO_TEST_FILES}/plone-logo.png\n+    Click Button  Save\n+    Wait until page contains  Item created  error=Image could not be created.\n+\n I search for\n     [Arguments]  ${searchtext}\n     Input text  css=input#searchGadget  ${searchtext}\n-    Focus  css=input#searchGadget\n+    Set Focus To Element  css=input#searchGadget\n \n I search the currentfolder only for\n     [Arguments]  ${searchtext}\n     Select checkbox  id=searchbox_currentfolder_only\n     Input text  css=input#searchGadget  ${searchtext}\n-    Focus  css=input#searchGadget\n+    Set Focus To Element  css=input#searchGadget\n \n the livesearch results should contain\n     [Arguments]  ${text}\n-    Wait until keyword succeeds  5s  1s  Element should contain  css=#LSResult .LSRow a  ${text}\n+    Wait until keyword succeeds  5s  1s  Element should contain  css=.livesearch-results li a .heading  ${text}\n \n the livesearch results should not contain\n     [Arguments]  ${text}\n-    Wait until keyword succeeds  5s  1s  Page should not contain  css=#LSResult .LSRow a  ${text}\n+    Wait until keyword succeeds  5s  1s  Page should not contain  css=.livesearch-results li a .heading  ${text}\n+\n+expected livesearch results\n+    [Arguments]  ${num}\n+    ${count} =  Get Element Count  css=.livesearch-results li.search-result\n+    Should Be Equal as Numbers  ${count}  ${num}\n+\n+I disable images in results in search controlpanel\n+    Go to  ${PLONE_URL}/@@search-controlpanel\n+    Wait until page contains  Search Settings\n+    Unselect Checkbox  form.widgets.search_show_images:list\n+    Click Button  Save\n+    Wait until page contains  Changes saved\ndiff --git a/news/3495.feature b/news/3495.feature\nnew file mode 100644\nindex 0000000000..f5f0505020\n--- /dev/null\n+++ b/news/3495.feature\n@@ -0,0 +1,2 @@\n+Add support for images in default search page.\n+[agitator]\n\\ No newline at end of file\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-04-11T11:52:20+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/a8b588e453699c7b5dba3c47ead5d881276884f1

fix typo

Files changed:
M news/3493.breaking

b'diff --git a/news/3493.breaking b/news/3493.breaking\nindex 783040481b..3962b0397c 100644\n--- a/news/3493.breaking\n+++ b/news/3493.breaking\n@@ -1,3 +1,3 @@\n-`DublicCore` was once used with Archetypes. \n+`DublinCore.py` was once used with Archetypes. \n This code is dead now and got removed.\n [jensens]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-04-11T15:09:27+02:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/730ad5e7f9ebdf8cb1c76bbe07e38f31b1807310

Merge pull request #3493 from plone/rm-defaultdublincoreimpl

Remove the unused DefautDublincoreImpl

Files changed:
A news/3493.breaking
D Products/CMFPlone/DublinCore.py

b'diff --git a/Products/CMFPlone/DublinCore.py b/Products/CMFPlone/DublinCore.py\ndeleted file mode 100644\nindex 1cb153139a..0000000000\n--- a/Products/CMFPlone/DublinCore.py\n+++ /dev/null\n@@ -1,477 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2001 Zope Foundation and Contributors.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-""" Dublin Core support for content types. """\n-\n-from AccessControl.class_init import InitializeClass\n-from AccessControl.SecurityInfo import ClassSecurityInfo\n-from AccessControl.SecurityManagement import getSecurityManager\n-from Acquisition import aq_base\n-from App.special_dtml import DTMLFile\n-from DateTime.DateTime import DateTime\n-from OFS.PropertyManager import PropertyManager\n-from plone.base.permissions import ModifyPortalContent\n-from plone.base.permissions import View\n-from Products.CMFCore.interfaces import ICatalogableDublinCore\n-from Products.CMFCore.interfaces import IDublinCore\n-from Products.CMFCore.interfaces import IMutableDublinCore\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import WWW_DIR\n-from zope.interface import implementer\n-\n-\n-_marker = []\n-\n-# For http://www.zope.org/Collectors/CMF/325\n-# We only really need this once, at startup.\n-_zone = DateTime().timezone()\n-\n-\n-def seq_strip(seq, stripper=lambda x: x.strip()):\n-    """ Strip a sequence of strings.\n-    """\n-    if isinstance(seq, list):\n-        return map(stripper, seq)\n-\n-    if isinstance(seq, tuple):\n-        return tuple(map(stripper, seq))\n-\n-    raise ValueError("{} of unsupported sequencetype {}".format(seq, type(seq)))\n-\n-\n-def tuplize(valueName, value, splitter=lambda x: x.split()):\n-\n-    if isinstance(value, tuple):\n-        return seq_strip(value)\n-\n-    if isinstance(value, list):\n-        return seq_strip(tuple(value))\n-\n-    if isinstance(value, str):\n-        return seq_strip(tuple(splitter(value)))\n-\n-    raise ValueError("%s of unsupported type" % valueName)\n-\n-\n-@implementer(IDublinCore, ICatalogableDublinCore, IMutableDublinCore)\n-class DefaultDublinCoreImpl(PropertyManager):\n-\n-    """ Mix-in class which provides Dublin Core methods.\n-    """\n-\n-    security = ClassSecurityInfo()\n-\n-    def __init__(self, title=\'\', subject=(), description=\'\', contributors=(), effective_date=None, expiration_date=None, format=\'text/html\', language=\'\', rights=\'\'\n-                 ):\n-        now = DateTime()\n-        self.creation_date = now\n-        self.modification_date = now\n-        self.creators = ()\n-        self._editMetadata(title, subject, description, contributors, effective_date, expiration_date, format, language, rights\n-                           )\n-\n-    #\n-    #  Set-modification-date-related methods.\n-    #  In DefaultDublinCoreImpl for lack of a better place.\n-    #\n-\n-    # Class variable default for an upgrade.\n-    modification_date = None\n-\n-    security.declarePrivate(\'notifyModified\')\n-\n-    def notifyModified(self):\n-        # Take appropriate action after the resource has been modified.\n-        # Update creators and modification_date.\n-        self.addCreator()\n-        self.setModificationDate()\n-\n-    security.declareProtected(ModifyPortalContent, \'addCreator\')\n-\n-    def addCreator(self, creator=None):\n-        # Add creator to Dublin Core creators.\n-        if creator is None:\n-            user = getSecurityManager().getUser()\n-            creator = user and user.getId()\n-\n-        # call self.listCreators() to make sure self.creators exists\n-        if creator and not creator in self.listCreators():\n-            self.creators = self.creators + (creator, )\n-\n-    security.declareProtected(ModifyPortalContent, \'setModificationDate\')\n-\n-    def setModificationDate(self, modification_date=None):\n-        # Set the date when the resource was last modified.\n-        # When called without an argument, sets the date to now.\n-        if modification_date is None:\n-            self.modification_date = DateTime()\n-        else:\n-            self.modification_date = self._datify(modification_date)\n-\n-    #\n-    #  DublinCore interface query methods\n-    #\n-    security.declareProtected(View, \'Title\')\n-\n-    def Title(self):\n-        # Dublin Core Title element - resource name.\n-        return self.title\n-\n-    security.declareProtected(View, \'listCreators\')\n-\n-    def listCreators(self):\n-        # List Dublin Core Creator elements - resource authors.\n-        if not hasattr(aq_base(self), \'creators\'):\n-            # for content created with CMF versions before 1.5\n-            owner_tuple = self.getOwnerTuple()\n-            if owner_tuple:\n-                self.creators = (owner_tuple[1],)\n-            else:\n-                self.creators = ()\n-        return self.creators\n-\n-    security.declareProtected(View, \'Creator\')\n-\n-    def Creator(self):\n-        # Dublin Core Creator element - resource author.\n-        creators = self.listCreators()\n-        return creators and creators[0] or \'\'\n-\n-    security.declareProtected(View, \'Subject\')\n-\n-    def Subject(self):\n-        # Dublin Core Subject element - resource keywords.\n-        return getattr(self, \'subject\', ())  # compensate for *old* content\n-\n-    security.declareProtected(View, \'Description\')\n-\n-    def Description(self):\n-        # Dublin Core Description element - resource summary.\n-        return self.description\n-\n-    security.declareProtected(View, \'Publisher\')\n-\n-    def Publisher(self):\n-        # Dublin Core Publisher element - resource publisher.\n-        tool = getToolByName(self, \'portal_metadata\', None)\n-\n-        if tool is not None:\n-            return tool.getPublisher()\n-\n-        return \'No publisher\'\n-\n-    security.declareProtected(View, \'listContributors\')\n-\n-    def listContributors(self):\n-        # Dublin Core Contributor elements - resource collaborators.\n-        return self.contributors\n-\n-    security.declareProtected(View, \'Contributors\')\n-\n-    def Contributors(self):\n-        # Deprecated alias of listContributors.\n-        return self.listContributors()\n-\n-    security.declareProtected(View, \'Date\')\n-\n-    def Date(self, zone=None):\n-        # Dublin Core Date element - default date.\n-        if zone is None:\n-            zone = _zone\n-        # Return effective_date if set, modification date otherwise\n-        date = getattr(self, \'effective_date\', None)\n-        if date is None:\n-            date = self.modified()\n-        return date.toZone(zone).ISO()\n-\n-    security.declareProtected(View, \'CreationDate\')\n-\n-    def CreationDate(self, zone=None):\n-        # Dublin Core Date element - date resource created.\n-        if zone is None:\n-            zone = _zone\n-        # return unknown if never set properly\n-        if self.creation_date:\n-            return self.creation_date.toZone(zone).ISO()\n-        else:\n-            return \'Unknown\'\n-\n-    security.declareProtected(View, \'EffectiveDate\')\n-\n-    def EffectiveDate(self, zone=None):\n-        # Dublin Core Date element - date resource becomes effective.\n-        if zone is None:\n-            zone = _zone\n-        ed = getattr(self, \'effective_date\', None)\n-        return ed and ed.toZone(zone).ISO() or \'None\'\n-\n-    security.declareProtected(View, \'ExpirationDate\')\n-\n-    def ExpirationDate(self, zone=None):\n-        # Dublin Core Date element - date resource expires.\n-        if zone is None:\n-            zone = _zone\n-        ed = getattr(self, \'expiration_date\', None)\n-        return ed and ed.toZone(zone).ISO() or \'None\'\n-\n-    security.declareProtected(View, \'ModificationDate\')\n-\n-    def ModificationDate(self, zone=None):\n-        # Dublin Core Date element - date resource last modified.\n-        if zone is None:\n-            zone = _zone\n-        return self.modified().toZone(zone).ISO()\n-\n-    security.declareProtected(View, \'Type\')\n-\n-    def Type(self):\n-        # Dublin Core Type element - resource type.\n-        ti = self.getTypeInfo()\n-        return ti is not None and ti.Title() or \'Unknown\'\n-\n-    security.declareProtected(View, \'Format\')\n-\n-    def Format(self):\n-        # Dublin Core Format element - resource format.\n-        return self.format\n-\n-    security.declareProtected(View, \'Identifier\')\n-\n-    def Identifier(self):\n-        # Dublin Core Identifier element - resource ID.\n-        # XXX: fixme using \'portal_metadata\' (we need to prepend the\n-        #      right prefix to self.getPhysicalPath().\n-        return self.absolute_url()\n-\n-    security.declareProtected(View, \'Language\')\n-\n-    def Language(self):\n-        # Dublin Core Language element - resource language.\n-        return self.language\n-\n-    security.declareProtected(View, \'Rights\')\n-\n-    def Rights(self):\n-        # Dublin Core Rights element - resource copyright.\n-        return self.rights\n-\n-    #\n-    #  DublinCore utility methods\n-    #\n-    def content_type(self):\n-        """ WebDAV needs this to do the Right Thing (TM).\n-        """\n-        return self.Format()\n-\n-    __FLOOR_DATE = DateTime(1970, 0)  # always effective\n-\n-    security.declareProtected(View, \'isEffective\')\n-\n-    def isEffective(self, date):\n-        # Is the date within the resource\'s effective range?\n-        pastEffective = (self.effective_date is None\n-                         or self.effective_date <= date)\n-        beforeExpiration = (self.expiration_date is None\n-                            or self.expiration_date >= date)\n-        return pastEffective and beforeExpiration\n-\n-    #\n-    #  CatalogableDublinCore methods\n-    #\n-    security.declareProtected(View, \'created\')\n-\n-    def created(self):\n-        # Dublin Core Date element - date resource created.\n-        # allow for non-existent creation_date, existed always\n-        date = getattr(self, \'creation_date\', None)\n-        return date is None and self.__FLOOR_DATE or date\n-\n-    security.declareProtected(View, \'effective\')\n-\n-    def effective(self):\n-        # Dublin Core Date element - date resource becomes effective.\n-        marker = []\n-        date = getattr(self, \'effective_date\', marker)\n-        if date is marker:\n-            date = getattr(self, \'creation_date\', None)\n-        return date is None and self.__FLOOR_DATE or date\n-\n-    __CEILING_DATE = DateTime(2500, 0)  # never expires\n-\n-    security.declareProtected(View, \'expires\')\n-\n-    def expires(self):\n-        # Dublin Core Date element - date resource expires.\n-        date = getattr(self, \'expiration_date\', None)\n-        return date is None and self.__CEILING_DATE or date\n-\n-    security.declareProtected(View, \'modified\')\n-\n-    def modified(self):\n-        # Dublin Core Date element - date resource last modified.\n-        date = self.modification_date\n-        if date is None:\n-            # Upgrade.\n-            date = DateTime(self._p_mtime)\n-            self.modification_date = date\n-        return date\n-\n-    security.declareProtected(View, \'getMetadataHeaders\')\n-\n-    def getMetadataHeaders(self):\n-        # Return RFC-822-style headers.\n-        hdrlist = []\n-        hdrlist.append((\'Title\', self.Title()))\n-        hdrlist.append((\'Subject\', \', \'.join(self.Subject())))\n-        hdrlist.append((\'Publisher\', self.Publisher()))\n-        hdrlist.append((\'Description\', self.Description()))\n-        hdrlist.append((\'Contributors\', \'; \'.join(self.Contributors())))\n-        hdrlist.append((\'Effective_date\', self.EffectiveDate()))\n-        hdrlist.append((\'Expiration_date\', self.ExpirationDate()))\n-        hdrlist.append((\'Type\', self.Type()))\n-        hdrlist.append((\'Format\', self.Format()))\n-        hdrlist.append((\'Language\', self.Language()))\n-        hdrlist.append((\'Rights\', self.Rights()))\n-        return hdrlist\n-\n-    #\n-    #  MutableDublinCore methods\n-    #\n-    security.declarePrivate(\'_datify\')\n-\n-    def _datify(self, attrib):\n-        if attrib == \'None\':\n-            attrib = None\n-        elif not isinstance(attrib, DateTime):\n-            if attrib is not None:\n-                attrib = DateTime(attrib)\n-        return attrib\n-\n-    security.declareProtected(ModifyPortalContent, \'setTitle\')\n-\n-    def setTitle(self, title):\n-        # Set Dublin Core Title element - resource name.\n-        self.title = title\n-\n-    security.declareProtected(ModifyPortalContent, \'setCreators\')\n-\n-    def setCreators(self, creators):\n-        # Set Dublin Core Creator elements - resource authors.\n-        self.creators = tuplize(\'creators\', creators)\n-\n-    security.declareProtected(ModifyPortalContent, \'setSubject\')\n-\n-    def setSubject(self, subject):\n-        # Set Dublin Core Subject element - resource keywords.\n-        self.subject = tuplize(\'subject\', subject)\n-\n-    security.declareProtected(ModifyPortalContent, \'setDescription\')\n-\n-    def setDescription(self, description):\n-        # Set Dublin Core Description element - resource summary.\n-        self.description = description\n-\n-    security.declareProtected(ModifyPortalContent, \'setContributors\')\n-\n-    def setContributors(self, contributors):\n-        # Set Dublin Core Contributor elements - resource collaborators.\n-        semi_split = lambda s: map(lambda x: x.strip(), s.split(\';\'))\n-        self.contributors = tuplize(\'contributors\', contributors, semi_split)\n-\n-    security.declareProtected(ModifyPortalContent, \'setEffectiveDate\')\n-\n-    def setEffectiveDate(self, effective_date):\n-        # Set Dublin Core Date element - date resource becomes effective.\n-        self.effective_date = self._datify(effective_date)\n-\n-    security.declareProtected(ModifyPortalContent, \'setExpirationDate\')\n-\n-    def setExpirationDate(self, expiration_date):\n-        # Set Dublin Core Date element - date resource expires.\n-        self.expiration_date = self._datify(expiration_date)\n-\n-    security.declareProtected(ModifyPortalContent, \'setFormat\')\n-\n-    def setFormat(self, format):\n-        # Set Dublin Core Format element - resource format.\n-        self.format = format\n-\n-    security.declareProtected(ModifyPortalContent, \'setLanguage\')\n-\n-    def setLanguage(self, language):\n-        # Set Dublin Core Language element - resource language.\n-        self.language = language\n-\n-    security.declareProtected(ModifyPortalContent, \'setRights\')\n-\n-    def setRights(self, rights):\n-        # Set Dublin Core Rights element - resource copyright.\n-        self.rights = rights\n-\n-    #\n-    #  Management tab methods\n-    #\n-\n-    security.declarePrivate(\'_editMetadata\')\n-\n-    def _editMetadata(self, title=_marker, subject=_marker, description=_marker, contributors=_marker, effective_date=_marker, expiration_date=_marker, format=_marker, language=_marker, rights=_marker\n-                      ):\n-        # Update the editable metadata for this resource.\n-        if title is not _marker:\n-            self.setTitle(title)\n-        if subject is not _marker:\n-            self.setSubject(subject)\n-        if description is not _marker:\n-            self.setDescription(description)\n-        if contributors is not _marker:\n-            self.setContributors(contributors)\n-        if effective_date is not _marker:\n-            self.setEffectiveDate(effective_date)\n-        if expiration_date is not _marker:\n-            self.setExpirationDate(expiration_date)\n-        if format is not _marker:\n-            self.setFormat(format)\n-        if language is not _marker:\n-            self.setLanguage(language)\n-        if rights is not _marker:\n-            self.setRights(rights)\n-\n-    security.declareProtected(ModifyPortalContent, \'manage_metadata\')\n-    manage_metadata = DTMLFile(\'zmi_metadata\', WWW_DIR)\n-\n-    security.declareProtected(ModifyPortalContent, \'manage_editMetadata\')\n-\n-    def manage_editMetadata(self, title, subject, description, contributors, effective_date, expiration_date, format, language, rights, REQUEST\n-                            ):\n-        """ Update metadata from the ZMI.\n-        """\n-        self._editMetadata(title, subject, description, contributors, effective_date, expiration_date, format, language, rights\n-                           )\n-        REQUEST[\'RESPONSE\'].redirect(self.absolute_url()\n-                                     + \'/manage_metadata\'\n-                                     + \'?manage_tabs_message=Metadata+updated.\')\n-\n-    security.declareProtected(ModifyPortalContent, \'editMetadata\')\n-\n-    def editMetadata(self, title=\'\', subject=(), description=\'\', contributors=(), effective_date=None, expiration_date=None, format=\'text/html\', language=\'en-US\', rights=\'\'\n-                     ):\n-        # Need to add check for webDAV locked resource for TTW methods.\n-        # As per bug #69, we can\'t assume they use the webdav\n-        # locking interface, and fail gracefully if they don\'t.\n-        if hasattr(self, \'failIfLocked\'):\n-            self.failIfLocked()\n-\n-        self._editMetadata(title=title, subject=subject, description=description, contributors=contributors, effective_date=effective_date, expiration_date=expiration_date, format=format, language=language, rights=rights\n-                           )\n-        self.reindexObject()\n-\n-InitializeClass(DefaultDublinCoreImpl)\ndiff --git a/news/3493.breaking b/news/3493.breaking\nnew file mode 100644\nindex 0000000000..3962b0397c\n--- /dev/null\n+++ b/news/3493.breaking\n@@ -0,0 +1,3 @@\n+`DublinCore.py` was once used with Archetypes. \n+This code is dead now and got removed.\n+[jensens]\n'

