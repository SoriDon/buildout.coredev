Repository: plone.app.widgets


Branch: refs/heads/master
Date: 2017-05-22T14:54:00+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.widgets/commit/2639986aff05a09d8fa1c9080d240c98782eedcf

Related items widget options changes
- Let the browsing/searching start path be the current context if its folderish or a level up.
- Include the ``contextPath`` option to exclude the current context from selection.
- Include the ``favorites`` option with the current context and the navigation root to quickly jump to these paths.
- Clean up obsolete options.
Fixes https://github.com/plone/Products.CMFPlone/issues/1974

Files changed:
M CHANGES.rst
M plone/app/widgets/tests/test_utils.py
M plone/app/widgets/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 65c5746..d36fa8c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,13 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Related items widget options changes:
+  - Let the browsing/searching start path be the current context if its folderish or a level up.
+  - Include the ``contextPath`` option to exclude the current context from selection.
+  - Include the ``favorites`` option with the current context and the navigation root to quickly jump to these paths.
+  - Clean up obsolete options.
+    Fixes https://github.com/plone/Products.CMFPlone/issues/1974
+    [thet]
 
 Bug fixes:
 
diff --git a/plone/app/widgets/tests/test_utils.py b/plone/app/widgets/tests/test_utils.py
index 6228607..106d753 100644
--- a/plone/app/widgets/tests/test_utils.py
+++ b/plone/app/widgets/tests/test_utils.py
@@ -1,11 +1,11 @@
 from mock import Mock
 from mock import patch
+from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
+from plone.app.widgets.testing import PLONEAPPWIDGETS_INTEGRATION_TESTING
+from plone.app.widgets.utils import get_relateditems_options
 
-try:
-    import unittest2 as unittest
-except ImportError:  # pragma: nocover
-    import unittest  # pragma: nocover
-    assert unittest  # pragma: nocover
+import unittest
 
 
 class MockTool(Mock):
@@ -47,3 +47,230 @@ def test__first_weekday(self):
         # restore original state
         utils.HAS_PAE = orig_HAS_PAE
         reload(utils)
+
+
+class TestRelatedItemsOptions(unittest.TestCase):
+    layer = PLONEAPPWIDGETS_INTEGRATION_TESTING
+
+    def setUp(self):
+        setRoles(self.layer['portal'], TEST_USER_ID, ['Contributor'])
+
+    def test__base_relateditems_options(self):
+        """Test related items options on root:
+        All URLs and paths equal root url and path,
+        no favorites
+        """
+
+        portal = self.layer['portal']
+        options = get_relateditems_options(
+            portal,
+            None,
+            '#!@',
+            'test_vocab',
+            '@@vocab',
+            'testfield'
+        )
+
+        # vocab is correctly set
+        self.assertTrue(
+            '@@vocab?name=test_vocab&field=testfield'
+            in options['vocabularyUrl']
+        )
+
+        # rootUrl contains something
+        self.assertTrue(
+            bool(options['rootUrl'])
+        )
+
+        root_path = context_path = '/'.join(portal.getPhysicalPath())
+        root_url = context_url = portal.absolute_url()
+
+        # context_path contains something, otherwise this test is meaningless
+        self.assertTrue(bool(context_path))
+        # context_url contains something, otherwise this test is meaningless
+        self.assertTrue(bool(context_url))
+
+        self.assertEquals(
+            options['rootUrl'],
+            root_url
+        )
+
+        self.assertEquals(
+            options['rootPath'],
+            root_path
+        )
+
+        self.assertEquals(
+            options['vocabularyUrl'],
+            root_url + '/@@vocab?name=test_vocab&field=testfield'
+        )
+
+        self.assertEquals(
+            options['basePath'],
+            context_path
+        )
+
+        self.assertEquals(
+            options['contextPath'],
+            context_path
+        )
+
+        self.assertEquals(
+            options['separator'],
+            '#!@'
+        )
+
+        self.assertTrue(
+            'favorites' not in options
+        )
+
+    def test__subfolder_relateditems_options(self):
+        """Test related items options on subfolder:
+        Vocab called on root, start path is folder, have favorites.
+        """
+
+        portal = self.layer['portal']
+        portal.invokeFactory('Folder', 'sub')
+        sub = portal.sub
+        options = get_relateditems_options(
+            sub,
+            None,
+            '#!@',
+            'test_vocab',
+            '@@vocab',
+            'testfield'
+        )
+
+        # vocab is correctly set
+        self.assertTrue(
+            '@@vocab?name=test_vocab&field=testfield'
+            in options['vocabularyUrl']
+        )
+
+        # rootUrl contains something
+        self.assertTrue(
+            bool(options['rootUrl'])
+        )
+
+        root_path = '/'.join(portal.getPhysicalPath())
+        root_url = portal.absolute_url()
+        context_path = '/'.join(sub.getPhysicalPath())
+        context_url = sub.absolute_url()
+
+        # context_path contains something, otherwise this test is meaningless
+        self.assertTrue(bool(context_path))
+        # context_url contains something, otherwise this test is meaningless
+        self.assertTrue(bool(context_url))
+
+        self.assertEquals(
+            options['rootUrl'],
+            root_url
+        )
+
+        self.assertEquals(
+            options['rootPath'],
+            root_path
+        )
+
+        self.assertEquals(
+            options['vocabularyUrl'],
+            root_url + '/@@vocab?name=test_vocab&field=testfield'
+        )
+
+        self.assertEquals(
+            options['basePath'],
+            context_path
+        )
+
+        self.assertEquals(
+            options['contextPath'],
+            context_path
+        )
+
+        self.assertEquals(
+            options['separator'],
+            '#!@'
+        )
+
+        self.assertEquals(
+            len(options['favorites']),
+            2
+        )
+
+        self.assertEquals(
+            sorted(options['favorites'][0].keys()),
+            ['path', 'title']
+        )
+
+    def test__subdocument_relateditems_options(self):
+        """Test related items options on subdoc:
+        Vocab called on root, start path is root as document is not folderish,
+        no favorites.
+        """
+
+        portal = self.layer['portal']
+        portal.invokeFactory('Document', 'sub')
+        sub = portal.sub
+        options = get_relateditems_options(
+            sub,
+            None,
+            '#!@',
+            'test_vocab',
+            '@@vocab',
+            'testfield'
+        )
+
+        # vocab is correctly set
+        self.assertTrue(
+            '@@vocab?name=test_vocab&field=testfield'
+            in options['vocabularyUrl']
+        )
+
+        # rootUrl contains something
+        self.assertTrue(
+            bool(options['rootUrl'])
+        )
+
+        root_path = '/'.join(portal.getPhysicalPath())
+        root_url = portal.absolute_url()
+        context_path = '/'.join(sub.getPhysicalPath())
+        context_url = sub.absolute_url()
+
+        # context_path contains something, otherwise this test is meaningless
+        self.assertTrue(bool(context_path))
+        # context_url contains something, otherwise this test is meaningless
+        self.assertTrue(bool(context_url))
+
+        self.assertEquals(
+            options['rootUrl'],
+            root_url
+        )
+
+        self.assertEquals(
+            options['rootPath'],
+            root_path
+        )
+
+        self.assertEquals(
+            options['vocabularyUrl'],
+            root_url + '/@@vocab?name=test_vocab&field=testfield'
+        )
+
+        self.assertEquals(
+            options['basePath'],
+            root_path
+        )
+
+        self.assertEquals(
+            options['contextPath'],
+            context_path
+        )
+
+        self.assertEquals(
+            options['separator'],
+            '#!@'
+        )
+
+        self.assertTrue(
+            'favorites' not in options
+        )
diff --git a/plone/app/widgets/utils.py b/plone/app/widgets/utils.py
index 37b4248..7c830a6 100644
--- a/plone/app/widgets/utils.py
+++ b/plone/app/widgets/utils.py
@@ -1,7 +1,9 @@
 # -*- coding: utf-8 -*-
 
 from Acquisition import aq_base
+from Acquisition import aq_parent
 from datetime import datetime
+from OFS.interfaces import IFolder
 from plone.app.layout.navigation.root import getNavigationRootObject
 from Products.CMFCore.interfaces import ISiteRoot
 from Products.CMFCore.utils import getToolByName
@@ -122,29 +124,53 @@ def get_ajaxselect_options(context, value, separator, vocabulary_name,
 
 def get_relateditems_options(context, value, separator, vocabulary_name,
                              vocabulary_view, field_name=None):
+
     if IForm.providedBy(context):
         context = context.context
+
     request = getRequest()
     site = get_top_site_from_url(context, request)
-    options = get_ajaxselect_options(site, value, separator,
-                                     vocabulary_name, vocabulary_view,
-                                     field_name)
-    msgstr = translate(_(u'Search'), context=request)
-    options.setdefault('searchText', msgstr)
-    msgstr = translate(_(u'Entire site'), context=request)
-    options.setdefault('searchAllText', msgstr)
-    msgstr = translate(_('tabs_home',
-                       default=u'Home'),
-                       context=request)
-    options.setdefault('homeText', msgstr)
-    options.setdefault('folderTypes', ['Folder'])
-    options.setdefault('sort_on', 'sortable_title')
-    options.setdefault('sort_order', 'ascending')
+    options = get_ajaxselect_options(
+        site,
+        value,
+        separator,
+        vocabulary_name,
+        vocabulary_view,
+        field_name
+    )
 
     nav_root = getNavigationRootObject(context, site)
-    options['basePath'] = '/'.join(nav_root.getPhysicalPath()) if nav_root else '/'  # noqa
+
+    # basePath - start to search/browse in here.
+    base_path_context = context
+    if not IFolder.providedBy(base_path_context):
+        base_path_context = aq_parent(base_path_context)
+    if not base_path_context:
+        base_path_context = nav_root
+    options['basePath'] = '/'.join(base_path_context.getPhysicalPath())
+
+    # rootPath - Only display breadcrumb elements deeper than this path.
     options['rootPath'] = '/'.join(site.getPhysicalPath()) if site else '/'
+
+    # rootUrl: Visible URL up to the rootPath. This is prepended to the
+    # currentPath to generate submission URLs.
     options['rootUrl'] = site.absolute_url() if site else ''
+
+    # contextPath - current edited object. Will not be available to select.
+    options['contextPath'] = '/'.join(context.getPhysicalPath())
+
+    if base_path_context != nav_root:
+        options['favorites'] = [
+            {
+                # 'title': _(u'Current Content'),
+                'title': u'Aktueller Inhalt',
+                'path': '/'.join(base_path_context.getPhysicalPath())
+            }, {
+                'title': _(u'Start Page'),
+                'path': '/'.join(nav_root.getPhysicalPath())
+            }
+        ]
+
     return options
 
 


Repository: plone.app.widgets


Branch: refs/heads/master
Date: 2017-05-23T13:06:49+02:00
Author: agitator (agitator) <agitator@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.widgets/commit/b0fa4b4d3345fb5e5f06e7380a2c13782cc5a24c

Merge pull request #159 from plone/thet-relateditemsoptions

Related items widget options changes

Files changed:
M CHANGES.rst
M plone/app/widgets/tests/test_utils.py
M plone/app/widgets/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 65c5746..d36fa8c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,13 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Related items widget options changes:
+  - Let the browsing/searching start path be the current context if its folderish or a level up.
+  - Include the ``contextPath`` option to exclude the current context from selection.
+  - Include the ``favorites`` option with the current context and the navigation root to quickly jump to these paths.
+  - Clean up obsolete options.
+    Fixes https://github.com/plone/Products.CMFPlone/issues/1974
+    [thet]
 
 Bug fixes:
 
diff --git a/plone/app/widgets/tests/test_utils.py b/plone/app/widgets/tests/test_utils.py
index 6228607..106d753 100644
--- a/plone/app/widgets/tests/test_utils.py
+++ b/plone/app/widgets/tests/test_utils.py
@@ -1,11 +1,11 @@
 from mock import Mock
 from mock import patch
+from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
+from plone.app.widgets.testing import PLONEAPPWIDGETS_INTEGRATION_TESTING
+from plone.app.widgets.utils import get_relateditems_options
 
-try:
-    import unittest2 as unittest
-except ImportError:  # pragma: nocover
-    import unittest  # pragma: nocover
-    assert unittest  # pragma: nocover
+import unittest
 
 
 class MockTool(Mock):
@@ -47,3 +47,230 @@ def test__first_weekday(self):
         # restore original state
         utils.HAS_PAE = orig_HAS_PAE
         reload(utils)
+
+
+class TestRelatedItemsOptions(unittest.TestCase):
+    layer = PLONEAPPWIDGETS_INTEGRATION_TESTING
+
+    def setUp(self):
+        setRoles(self.layer['portal'], TEST_USER_ID, ['Contributor'])
+
+    def test__base_relateditems_options(self):
+        """Test related items options on root:
+        All URLs and paths equal root url and path,
+        no favorites
+        """
+
+        portal = self.layer['portal']
+        options = get_relateditems_options(
+            portal,
+            None,
+            '#!@',
+            'test_vocab',
+            '@@vocab',
+            'testfield'
+        )
+
+        # vocab is correctly set
+        self.assertTrue(
+            '@@vocab?name=test_vocab&field=testfield'
+            in options['vocabularyUrl']
+        )
+
+        # rootUrl contains something
+        self.assertTrue(
+            bool(options['rootUrl'])
+        )
+
+        root_path = context_path = '/'.join(portal.getPhysicalPath())
+        root_url = context_url = portal.absolute_url()
+
+        # context_path contains something, otherwise this test is meaningless
+        self.assertTrue(bool(context_path))
+        # context_url contains something, otherwise this test is meaningless
+        self.assertTrue(bool(context_url))
+
+        self.assertEquals(
+            options['rootUrl'],
+            root_url
+        )
+
+        self.assertEquals(
+            options['rootPath'],
+            root_path
+        )
+
+        self.assertEquals(
+            options['vocabularyUrl'],
+            root_url + '/@@vocab?name=test_vocab&field=testfield'
+        )
+
+        self.assertEquals(
+            options['basePath'],
+            context_path
+        )
+
+        self.assertEquals(
+            options['contextPath'],
+            context_path
+        )
+
+        self.assertEquals(
+            options['separator'],
+            '#!@'
+        )
+
+        self.assertTrue(
+            'favorites' not in options
+        )
+
+    def test__subfolder_relateditems_options(self):
+        """Test related items options on subfolder:
+        Vocab called on root, start path is folder, have favorites.
+        """
+
+        portal = self.layer['portal']
+        portal.invokeFactory('Folder', 'sub')
+        sub = portal.sub
+        options = get_relateditems_options(
+            sub,
+            None,
+            '#!@',
+            'test_vocab',
+            '@@vocab',
+            'testfield'
+        )
+
+        # vocab is correctly set
+        self.assertTrue(
+            '@@vocab?name=test_vocab&field=testfield'
+            in options['vocabularyUrl']
+        )
+
+        # rootUrl contains something
+        self.assertTrue(
+            bool(options['rootUrl'])
+        )
+
+        root_path = '/'.join(portal.getPhysicalPath())
+        root_url = portal.absolute_url()
+        context_path = '/'.join(sub.getPhysicalPath())
+        context_url = sub.absolute_url()
+
+        # context_path contains something, otherwise this test is meaningless
+        self.assertTrue(bool(context_path))
+        # context_url contains something, otherwise this test is meaningless
+        self.assertTrue(bool(context_url))
+
+        self.assertEquals(
+            options['rootUrl'],
+            root_url
+        )
+
+        self.assertEquals(
+            options['rootPath'],
+            root_path
+        )
+
+        self.assertEquals(
+            options['vocabularyUrl'],
+            root_url + '/@@vocab?name=test_vocab&field=testfield'
+        )
+
+        self.assertEquals(
+            options['basePath'],
+            context_path
+        )
+
+        self.assertEquals(
+            options['contextPath'],
+            context_path
+        )
+
+        self.assertEquals(
+            options['separator'],
+            '#!@'
+        )
+
+        self.assertEquals(
+            len(options['favorites']),
+            2
+        )
+
+        self.assertEquals(
+            sorted(options['favorites'][0].keys()),
+            ['path', 'title']
+        )
+
+    def test__subdocument_relateditems_options(self):
+        """Test related items options on subdoc:
+        Vocab called on root, start path is root as document is not folderish,
+        no favorites.
+        """
+
+        portal = self.layer['portal']
+        portal.invokeFactory('Document', 'sub')
+        sub = portal.sub
+        options = get_relateditems_options(
+            sub,
+            None,
+            '#!@',
+            'test_vocab',
+            '@@vocab',
+            'testfield'
+        )
+
+        # vocab is correctly set
+        self.assertTrue(
+            '@@vocab?name=test_vocab&field=testfield'
+            in options['vocabularyUrl']
+        )
+
+        # rootUrl contains something
+        self.assertTrue(
+            bool(options['rootUrl'])
+        )
+
+        root_path = '/'.join(portal.getPhysicalPath())
+        root_url = portal.absolute_url()
+        context_path = '/'.join(sub.getPhysicalPath())
+        context_url = sub.absolute_url()
+
+        # context_path contains something, otherwise this test is meaningless
+        self.assertTrue(bool(context_path))
+        # context_url contains something, otherwise this test is meaningless
+        self.assertTrue(bool(context_url))
+
+        self.assertEquals(
+            options['rootUrl'],
+            root_url
+        )
+
+        self.assertEquals(
+            options['rootPath'],
+            root_path
+        )
+
+        self.assertEquals(
+            options['vocabularyUrl'],
+            root_url + '/@@vocab?name=test_vocab&field=testfield'
+        )
+
+        self.assertEquals(
+            options['basePath'],
+            root_path
+        )
+
+        self.assertEquals(
+            options['contextPath'],
+            context_path
+        )
+
+        self.assertEquals(
+            options['separator'],
+            '#!@'
+        )
+
+        self.assertTrue(
+            'favorites' not in options
+        )
diff --git a/plone/app/widgets/utils.py b/plone/app/widgets/utils.py
index 37b4248..7c830a6 100644
--- a/plone/app/widgets/utils.py
+++ b/plone/app/widgets/utils.py
@@ -1,7 +1,9 @@
 # -*- coding: utf-8 -*-
 
 from Acquisition import aq_base
+from Acquisition import aq_parent
 from datetime import datetime
+from OFS.interfaces import IFolder
 from plone.app.layout.navigation.root import getNavigationRootObject
 from Products.CMFCore.interfaces import ISiteRoot
 from Products.CMFCore.utils import getToolByName
@@ -122,29 +124,53 @@ def get_ajaxselect_options(context, value, separator, vocabulary_name,
 
 def get_relateditems_options(context, value, separator, vocabulary_name,
                              vocabulary_view, field_name=None):
+
     if IForm.providedBy(context):
         context = context.context
+
     request = getRequest()
     site = get_top_site_from_url(context, request)
-    options = get_ajaxselect_options(site, value, separator,
-                                     vocabulary_name, vocabulary_view,
-                                     field_name)
-    msgstr = translate(_(u'Search'), context=request)
-    options.setdefault('searchText', msgstr)
-    msgstr = translate(_(u'Entire site'), context=request)
-    options.setdefault('searchAllText', msgstr)
-    msgstr = translate(_('tabs_home',
-                       default=u'Home'),
-                       context=request)
-    options.setdefault('homeText', msgstr)
-    options.setdefault('folderTypes', ['Folder'])
-    options.setdefault('sort_on', 'sortable_title')
-    options.setdefault('sort_order', 'ascending')
+    options = get_ajaxselect_options(
+        site,
+        value,
+        separator,
+        vocabulary_name,
+        vocabulary_view,
+        field_name
+    )
 
     nav_root = getNavigationRootObject(context, site)
-    options['basePath'] = '/'.join(nav_root.getPhysicalPath()) if nav_root else '/'  # noqa
+
+    # basePath - start to search/browse in here.
+    base_path_context = context
+    if not IFolder.providedBy(base_path_context):
+        base_path_context = aq_parent(base_path_context)
+    if not base_path_context:
+        base_path_context = nav_root
+    options['basePath'] = '/'.join(base_path_context.getPhysicalPath())
+
+    # rootPath - Only display breadcrumb elements deeper than this path.
     options['rootPath'] = '/'.join(site.getPhysicalPath()) if site else '/'
+
+    # rootUrl: Visible URL up to the rootPath. This is prepended to the
+    # currentPath to generate submission URLs.
     options['rootUrl'] = site.absolute_url() if site else ''
+
+    # contextPath - current edited object. Will not be available to select.
+    options['contextPath'] = '/'.join(context.getPhysicalPath())
+
+    if base_path_context != nav_root:
+        options['favorites'] = [
+            {
+                # 'title': _(u'Current Content'),
+                'title': u'Aktueller Inhalt',
+                'path': '/'.join(base_path_context.getPhysicalPath())
+            }, {
+                'title': _(u'Start Page'),
+                'path': '/'.join(nav_root.getPhysicalPath())
+            }
+        ]
+
     return options
 
 


