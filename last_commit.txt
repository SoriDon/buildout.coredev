Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-01-25T15:50:39+01:00
Author: Víctor Fernández de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/fe26c67a384cbb2fd52bab0a97b875ce95917f64

Enhance @addons endpoint to return a list of upgradeable addons (#1320)

* Enhance @addons endpoint to return a list of upgradeable addons

* Remove redundant expression

Files changed:
A news/1319.feature
M docs/source/addons.rst
M src/plone/restapi/services/addons/get.py
M src/plone/restapi/tests/test_addons.py

b'diff --git a/docs/source/addons.rst b/docs/source/addons.rst\nindex 37e4024f4..8e0931c33 100644\n--- a/docs/source/addons.rst\n+++ b/docs/source/addons.rst\n@@ -46,6 +46,8 @@ The following fields are returned:\n - is_installed: is the add-on installed?\n - has_uninstall_profile: does the add-on have an uninstall profile\n \n+The querystring parameter ``upgradeable`` is available in case you want to query only the\n+addons that have an upgrade step pending.\n \n Installing an addon\n -------------------\ndiff --git a/news/1319.feature b/news/1319.feature\nnew file mode 100644\nindex 000000000..234e83fe9\n--- /dev/null\n+++ b/news/1319.feature\n@@ -0,0 +1,2 @@\n+Enhance @addons endpoint to return a list of upgradeable addons.\n+[sneridagh]\ndiff --git a/src/plone/restapi/services/addons/get.py b/src/plone/restapi/services/addons/get.py\nindex 1cc00fe53..89793a3a6 100644\n--- a/src/plone/restapi/services/addons/get.py\n+++ b/src/plone/restapi/services/addons/get.py\n@@ -10,6 +10,7 @@ def __init__(self, context, request):\n         super().__init__(context, request)\n         self.params = []\n         self.addons = Addons(context, request)\n+        self.query = self.request.form.copy()\n \n     def publishTraverse(self, request, name):\n         # Consume any path segments after /@addons as parameters\n@@ -31,6 +32,17 @@ def reply(self):\n         addons_data = []\n         for addon in all_addons.values():\n             addons_data.append(self.addons.serializeAddon(addon))\n+\n+        if len(self.query) > 0 and len(self.params) == 0:\n+            upgradeables = self.query.get("upgradeable", "")\n+            if upgradeables:\n+                addons_data = [\n+                    addon\n+                    for addon in addons_data\n+                    if addon.get("upgrade_info", False)\n+                    and addon["upgrade_info"].get("available", False)\n+                ]\n+\n         result["items"] = addons_data\n         self.request.response.setStatus(200)\n         return result\ndiff --git a/src/plone/restapi/tests/test_addons.py b/src/plone/restapi/tests/test_addons.py\nindex 9fd449e7e..78ab4fa2e 100644\n--- a/src/plone/restapi/tests/test_addons.py\n+++ b/src/plone/restapi/tests/test_addons.py\n@@ -175,3 +175,28 @@ def test_upgrade_addon_with_representation(self):\n         session = [a for a in result["items"] if a["id"] == "plone.restapi"]\n         self.assertEqual(len(session), 1)\n         self.assertEqual(last_version, session[0]["upgrade_info"])\n+\n+    def test_get_only_upgradeables(self):\n+        def _get_upgrade_info(self):\n+            response = self.api_session.get("/@addons/plone.restapi")\n+            result = response.json()\n+            return result["upgrade_info"]\n+\n+        # Set need upgrade state\n+        self.ps.setLastVersionForProfile("plone.restapi:default", "0002")\n+        transaction.commit()\n+        self.assertEqual(\n+            {\n+                "available": True,\n+                "hasProfile": True,\n+                "installedVersion": "0002",\n+                "newVersion": "0006",\n+                "required": True,\n+            },\n+            _get_upgrade_info(self),\n+        )\n+\n+        response = self.api_session.get("/@addons?upgradeable=1")\n+\n+        self.assertEqual(1, len(response.json()["items"]))\n+        self.assertEqual("plone.restapi", response.json()["items"][0]["id"])\n'

