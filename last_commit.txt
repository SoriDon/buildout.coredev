Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-03-18T01:25:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/9b6d112bbe263fc24a257b492e5240cf68f25d2d

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/80cf330f.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 00000000..b4158b89\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 00000000..697a54cb\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "80cf330f"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 00000000..582f8acd\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.2\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/80cf330f.internal b/news/80cf330f.internal\nnew file mode 100644\nindex 00000000..c08f5399\n--- /dev/null\n+++ b/news/80cf330f.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615de..9eb73f3c 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 526aeb28..0da8f8fb 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 00000000..8f11bbd0\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,50 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s plone.app.theming\n+extras =\n+    test\n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-03-18T01:26:00+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/a812cb0cbad96c3866a9722ce37efafafafad8d4

chore: isort

Files changed:
M src/plone/app/theming/browser/controlpanel.py
M src/plone/app/theming/browser/custom_css.py
M src/plone/app/theming/tests/test_exportimport.py
M src/plone/app/theming/tests/test_utils.py
M src/plone/app/theming/transform.py
M src/plone/app/theming/utils.py

b'diff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py\nindex 6c0ac4a..b80f2c7 100644\n--- a/src/plone/app/theming/browser/controlpanel.py\n+++ b/src/plone/app/theming/browser/controlpanel.py\n@@ -14,12 +14,12 @@\n from plone.app.theming.utils import getOrCreatePersistentResourceDirectory\n from plone.app.theming.utils import getZODBThemes\n from plone.app.theming.utils import theming_policy\n+from plone.base.interfaces import ILinkSchema\n+from plone.base.utils import safe_text\n from plone.memoize.instance import memoize\n from plone.registry.interfaces import IRegistry\n from plone.resource.utils import queryResourceDirectory\n from Products.CMFCore.utils import getToolByName\n-from plone.base.utils import safe_text\n-from plone.base.interfaces import ILinkSchema\n from Products.statusmessages.interfaces import IStatusMessage\n from zope.component import getMultiAdapter\n from zope.component import getUtility\ndiff --git a/src/plone/app/theming/browser/custom_css.py b/src/plone/app/theming/browser/custom_css.py\nindex 1e99dc1..9122568 100644\n--- a/src/plone/app/theming/browser/custom_css.py\n+++ b/src/plone/app/theming/browser/custom_css.py\n@@ -7,6 +7,7 @@\n import time\n import wsgiref\n \n+\n class CustomCSSView(BrowserView):\n     """\n     Renders custom CSS stored in registry\ndiff --git a/src/plone/app/theming/tests/test_exportimport.py b/src/plone/app/theming/tests/test_exportimport.py\nindex 10ee8bb..5feee09 100644\n--- a/src/plone/app/theming/tests/test_exportimport.py\n+++ b/src/plone/app/theming/tests/test_exportimport.py\n@@ -8,12 +8,10 @@ class TestExportImport(unittest.TestCase):\n     layer = THEMING_INTEGRATION_TESTING\n \n     def test_import_filesystem(self):\n-        from zope.component import getUtility\n-\n-        from plone.registry.interfaces import IRegistry\n-\n-        from plone.app.theming.interfaces import IThemeSettings\n         from plone.app.theming.exportimport.handler import importTheme\n+        from plone.app.theming.interfaces import IThemeSettings\n+        from plone.registry.interfaces import IRegistry\n+        from zope.component import getUtility\n \n         class FauxContext:\n \n@@ -43,12 +41,10 @@ def readDataFile(self, name):\n         )\n \n     def test_import_no_file(self):\n-        from zope.component import getUtility\n-\n-        from plone.registry.interfaces import IRegistry\n-\n-        from plone.app.theming.interfaces import IThemeSettings\n         from plone.app.theming.exportimport.handler import importTheme\n+        from plone.app.theming.interfaces import IThemeSettings\n+        from plone.registry.interfaces import IRegistry\n+        from zope.component import getUtility\n \n         class FauxContext:\n \n@@ -88,12 +84,10 @@ def readDataFile(self, name):\n         self.assertRaises(ValueError, importTheme, FauxContext())\n \n     def test_import_enable(self):\n-        from zope.component import getUtility\n-\n-        from plone.registry.interfaces import IRegistry\n-\n-        from plone.app.theming.interfaces import IThemeSettings\n         from plone.app.theming.exportimport.handler import importTheme\n+        from plone.app.theming.interfaces import IThemeSettings\n+        from plone.registry.interfaces import IRegistry\n+        from zope.component import getUtility\n \n         class FauxContext:\n \n@@ -113,12 +107,10 @@ def readDataFile(self, name):\n         self.assertEqual(settings.enabled, True)\n \n     def test_import_disable(self):\n-        from zope.component import getUtility\n-\n-        from plone.registry.interfaces import IRegistry\n-\n-        from plone.app.theming.interfaces import IThemeSettings\n         from plone.app.theming.exportimport.handler import importTheme\n+        from plone.app.theming.interfaces import IThemeSettings\n+        from plone.registry.interfaces import IRegistry\n+        from zope.component import getUtility\n \n         class FauxContext:\n \ndiff --git a/src/plone/app/theming/tests/test_utils.py b/src/plone/app/theming/tests/test_utils.py\nindex a5ec632..49b4995 100644\n--- a/src/plone/app/theming/tests/test_utils.py\n+++ b/src/plone/app/theming/tests/test_utils.py\n@@ -1,10 +1,10 @@\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.theming.testing import THEMING_FUNCTIONAL_TESTING\n from plone.app.theming.testing import THEMING_INTEGRATION_TESTING\n from plone.app.theming.utils import applyTheme\n from plone.app.theming.utils import extractThemeInfo\n from plone.app.theming.utils import getTheme\n-from plone.app.testing import SITE_OWNER_NAME\n-from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.testing.zope import Browser\n \n import os.path\n@@ -38,15 +38,19 @@ class TestIntegration(unittest.TestCase):\n     layer = THEMING_INTEGRATION_TESTING\n \n     def test_getOrCreatePersistentResourceDirectory_new(self):\n-        from plone.app.theming.utils import getOrCreatePersistentResourceDirectory  # noqa\n+        from plone.app.theming.utils import (  # noqa\n+            getOrCreatePersistentResourceDirectory,\n+        )\n \n         d = getOrCreatePersistentResourceDirectory()\n         self.assertEqual(d.__name__, "theme")\n \n     def test_getOrCreatePersistentResourceDirectory_exists(self):\n-        from zope.component import getUtility\n+        from plone.app.theming.utils import (  # noqa\n+            getOrCreatePersistentResourceDirectory,\n+        )\n         from plone.resource.interfaces import IResourceDirectory\n-        from plone.app.theming.utils import getOrCreatePersistentResourceDirectory  # noqa\n+        from zope.component import getUtility\n \n         persistentDirectory = getUtility(IResourceDirectory, name="persistent")\n         persistentDirectory.makeDirectory("theme")\n@@ -81,10 +85,13 @@ def test_getAvailableThemes(self):\n         self.assertEqual(theme.doctype, "<!DOCTYPE html>")\n \n     def test_getZODBThemes(self):\n-        import zipfile\n-        import os.path\n-        from plone.app.theming.utils import getOrCreatePersistentResourceDirectory  # noqa\n+        from plone.app.theming.utils import (  # noqa\n+            getOrCreatePersistentResourceDirectory,\n+        )\n         from plone.app.theming.utils import getZODBThemes\n+\n+        import os.path\n+        import zipfile\n         path = os.path.join(\n             os.path.dirname(__file__), \'zipfiles\', \'default_rules.zip\')\n         with open(path, \'rb\') as fp:\n@@ -108,13 +115,11 @@ def test_getZODBThemes(self):\n             )\n \n     def test_applyTheme(self):\n-        from zope.component import getUtility\n-\n-        from plone.registry.interfaces import IRegistry\n-\n         from plone.app.theming.interfaces import IThemeSettings\n-        from plone.app.theming.utils import getAvailableThemes\n         from plone.app.theming.utils import applyTheme\n+        from plone.app.theming.utils import getAvailableThemes\n+        from plone.registry.interfaces import IRegistry\n+        from zope.component import getUtility\n \n         theme = None\n         for t in getAvailableThemes():\n@@ -135,12 +140,10 @@ def test_applyTheme(self):\n         self.assertEqual(settings.doctype, theme.doctype)\n \n     def test_applyTheme_None(self):\n-        from zope.component import getUtility\n-\n-        from plone.registry.interfaces import IRegistry\n-\n         from plone.app.theming.interfaces import IThemeSettings\n         from plone.app.theming.utils import applyTheme\n+        from plone.registry.interfaces import IRegistry\n+        from zope.component import getUtility\n \n         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)\n \n@@ -155,12 +158,10 @@ def test_applyTheme_None(self):\n         self.assertEqual(settings.parameterExpressions, {})\n \n     def test_isThemeEnabled(self):\n-        from zope.component import getUtility\n-\n-        from plone.registry.interfaces import IRegistry\n-\n         from plone.app.theming.interfaces import IThemeSettings\n         from plone.app.theming.utils import isThemeEnabled\n+        from plone.registry.interfaces import IRegistry\n+        from zope.component import getUtility\n \n         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)\n         settings.enabled = True\n@@ -171,12 +172,10 @@ def test_isThemeEnabled(self):\n         self.assertTrue(isThemeEnabled(request, settings))\n \n     def test_isThemeEnabled_blacklist(self):\n-        from zope.component import getUtility\n-\n-        from plone.registry.interfaces import IRegistry\n-\n         from plone.app.theming.interfaces import IThemeSettings\n         from plone.app.theming.utils import isThemeEnabled\n+        from plone.registry.interfaces import IRegistry\n+        from zope.component import getUtility\n \n         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)\n         settings.enabled = True\n@@ -193,11 +192,11 @@ def test_isThemeEnabled_blacklist(self):\n         self.assertFalse(isThemeEnabled(request, settings))\n \n     def test_createThemeFromTemplate(self):\n+        from plone.app.theming.interfaces import RULE_FILENAME\n+        from plone.app.theming.interfaces import THEME_RESOURCE_NAME\n         from plone.app.theming.utils import createThemeFromTemplate\n         from plone.app.theming.utils import getAvailableThemes\n         from plone.app.theming.utils import getTheme\n-        from plone.app.theming.interfaces import THEME_RESOURCE_NAME\n-        from plone.app.theming.interfaces import RULE_FILENAME\n         title = "copy of test theme"\n         description = "test theme creation"\n         themeName = createThemeFromTemplate(title, description,\n@@ -216,11 +215,11 @@ def test_createThemeFromTemplate(self):\n         self.assertEqual(theme.rules, expected_rules)\n \n     def test_createThemeFromTemplate_custom_prefix(self):\n+        from plone.app.theming.interfaces import RULE_FILENAME\n+        from plone.app.theming.interfaces import THEME_RESOURCE_NAME\n         from plone.app.theming.utils import createThemeFromTemplate\n         from plone.app.theming.utils import getAvailableThemes\n         from plone.app.theming.utils import getTheme\n-        from plone.app.theming.interfaces import THEME_RESOURCE_NAME\n-        from plone.app.theming.interfaces import RULE_FILENAME\n         title = "copy of test theme with custom prefix"\n         description = "test theme creation"\n         themeName = createThemeFromTemplate(title, description,\n@@ -264,11 +263,11 @@ def test_createThemeFromTemplate_custom_prefix(self):\n         self.assertEqual(theme.production_js, expected_prod_js)\n \n     def test_createThemeFromTemplate_rel_path(self):\n+        from plone.app.theming.interfaces import RULE_FILENAME\n+        from plone.app.theming.interfaces import THEME_RESOURCE_NAME\n         from plone.app.theming.utils import createThemeFromTemplate\n         from plone.app.theming.utils import getAvailableThemes\n         from plone.app.theming.utils import getTheme\n-        from plone.app.theming.interfaces import THEME_RESOURCE_NAME\n-        from plone.app.theming.interfaces import RULE_FILENAME\n         title = "copy of test theme with custom prefix"\n         description = "test theme creation"\n         themeName = createThemeFromTemplate(title, description,\ndiff --git a/src/plone/app/theming/transform.py b/src/plone/app/theming/transform.py\nindex 0caf069..72a0f35 100644\n--- a/src/plone/app/theming/transform.py\n+++ b/src/plone/app/theming/transform.py\n@@ -192,6 +192,7 @@ def transformIterable(self, result, encoding):\n \n         if runtrace:\n             from diazo.runtrace import generate_debug_html\n+\n             # Add debug information to end of body\n             body = result.tree.xpath(\'/html/body\')[0]\n             debug_url = findContext(\ndiff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py\nindex 9abb15a..a760b0a 100644\n--- a/src/plone/app/theming/utils.py\n+++ b/src/plone/app/theming/utils.py\n@@ -12,6 +12,8 @@\n from plone.app.theming.plugins.utils import getPlugins\n from plone.app.theming.plugins.utils import getPluginSettings\n from plone.app.theming.theme import Theme\n+from plone.base.utils import safe_bytes\n+from plone.base.utils import safe_text\n from plone.i18n.normalizer.interfaces import IURLNormalizer\n from plone.resource.interfaces import IResourceDirectory\n from plone.resource.manifest import extractManifestFromZipFile\n@@ -25,8 +27,6 @@\n from plone.subrequest import subrequest\n from Products.CMFCore.interfaces import IContentish\n from Products.CMFCore.interfaces import ISiteRoot\n-from plone.base.utils import safe_bytes\n-from plone.base.utils import safe_text\n from Products.PageTemplates.Expressions import getEngine\n from urllib.parse import urlsplit\n from zope.component import getUtility\n@@ -39,7 +39,6 @@\n import pkg_resources\n \n \n-\n LOGGER = logging.getLogger(\'plone.app.theming\')\n \n \n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-03-18T01:26:27+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/6f04543a41414c97c9acde4bc0251ede6c4ea41f

chore: black

Files changed:
M setup.py
M src/plone/__init__.py
M src/plone/app/__init__.py
M src/plone/app/theming/__init__.py
M src/plone/app/theming/browser/controlpanel.py
M src/plone/app/theming/browser/custom_css.py
M src/plone/app/theming/browser/help.py
M src/plone/app/theming/browser/themefile.py
M src/plone/app/theming/events.py
M src/plone/app/theming/exportimport/handler.py
M src/plone/app/theming/header.py
M src/plone/app/theming/interfaces.py
M src/plone/app/theming/plugins/__init__.py
M src/plone/app/theming/plugins/hooks.py
M src/plone/app/theming/plugins/utils.py
M src/plone/app/theming/policy.py
M src/plone/app/theming/testing.py
M src/plone/app/theming/tests/test_controlpanel.py
M src/plone/app/theming/tests/test_exportimport.py
M src/plone/app/theming/tests/test_policy.py
M src/plone/app/theming/tests/test_transform.py
M src/plone/app/theming/tests/test_utils.py
M src/plone/app/theming/theme.py
M src/plone/app/theming/transform.py
M src/plone/app/theming/traversal.py
M src/plone/app/theming/upgrade.py
M src/plone/app/theming/utils.py
M src/plone/app/theming/zmi.py

b'diff --git a/setup.py b/setup.py\nindex 454759c..60b3585 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -4,26 +4,20 @@\n import os\n \n \n-version = \'5.0.2.dev0\'\n+version = "5.0.2.dev0"\n \n longdescription = open("README.rst").read()\n longdescription += "\\n\\n"\n longdescription += open(\n     os.path.join(\n-        "src",\n-        "plone",\n-        "app",\n-        "theming",\n-        "browser",\n-        "resources",\n-        "userguide.rst"\n+        "src", "plone", "app", "theming", "browser", "resources", "userguide.rst"\n     )\n ).read()\n longdescription += "\\n\\n"\n longdescription += open("CHANGES.rst").read()\n \n setup(\n-    name=\'plone.app.theming\',\n+    name="plone.app.theming",\n     version=version,\n     description="Integrates the Diazo theming engine with Plone",\n     long_description=longdescription,\n@@ -40,37 +34,37 @@\n         "Programming Language :: Python :: 3.11",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n     ],\n-    keywords=\'plone diazo xdv deliverance theme transform xslt\',\n-    author=\'Martin Aspeli and Laurence Rowe\',\n-    author_email=\'optilude@gmail.com\',\n-    url=\'https://pypi.org/project/plone.app.theming\',\n-    license=\'GPL\',\n-    packages=find_packages(\'src\'),\n-    package_dir={\'\': \'src\'},\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    keywords="plone diazo xdv deliverance theme transform xslt",\n+    author="Martin Aspeli and Laurence Rowe",\n+    author_email="optilude@gmail.com",\n+    url="https://pypi.org/project/plone.app.theming",\n+    license="GPL",\n+    packages=find_packages("src"),\n+    package_dir={"": "src"},\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     python_requires=">=3.8",\n     install_requires=[\n-        \'diazo>=1.0.3\',\n-        \'docutils\',\n-        \'lxml>=2.2.4\',\n-        \'plone.app.registry>=1.0\',\n-        \'plone.resourceeditor>=2.0.0\',\n-        \'plone.staticresources\',\n-        \'plone.subrequest\',\n-        \'plone.transformchain\',\n-        \'python-dateutil\',\n-        \'repoze.xmliter>=0.3\',\n-        \'roman\',\n-        \'setuptools\',\n-        \'zope.traversing\',\n+        "diazo>=1.0.3",\n+        "docutils",\n+        "lxml>=2.2.4",\n+        "plone.app.registry>=1.0",\n+        "plone.resourceeditor>=2.0.0",\n+        "plone.staticresources",\n+        "plone.subrequest",\n+        "plone.transformchain",\n+        "python-dateutil",\n+        "repoze.xmliter>=0.3",\n+        "roman",\n+        "setuptools",\n+        "zope.traversing",\n     ],\n     extras_require={\n-        \'test\': [\'plone.app.testing\'],\n+        "test": ["plone.app.testing"],\n     },\n     entry_points="""\n     [z3c.autoinclude.plugin]\n     target = plone\n     """,\n-    )\n+)\ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/app/__init__.py b/src/plone/app/__init__.py\nindex de40ea7..5284146 100644\n--- a/src/plone/app/__init__.py\n+++ b/src/plone/app/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/app/theming/__init__.py b/src/plone/app/theming/__init__.py\nindex 694ea02..bd59046 100644\n--- a/src/plone/app/theming/__init__.py\n+++ b/src/plone/app/theming/__init__.py\n@@ -1,3 +1,3 @@\n # make this a namespace packages (plone.app.theming.plugins is an\n # extensible python namespace\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py\nindex b80f2c7..0066bd9 100644\n--- a/src/plone/app/theming/browser/controlpanel.py\n+++ b/src/plone/app/theming/browser/controlpanel.py\n@@ -31,7 +31,7 @@\n import zipfile\n \n \n-logger = logging.getLogger(\'plone.app.theming\')\n+logger = logging.getLogger("plone.app.theming")\n \n \n def authorize(context, request):\n@@ -41,7 +41,6 @@ def authorize(context, request):\n \n \n class ThemingControlpanel(BrowserView):\n-\n     @property\n     def site_url(self):\n         """Return the absolute URL to the current site, which is likely not\n@@ -51,39 +50,36 @@ def site_url(self):\n \n     @property\n     def hostname_blacklist(self):\n-        hostname_blacklist = self.request.get(\'hostnameBlacklist\', [])\n+        hostname_blacklist = self.request.get("hostnameBlacklist", [])\n         return [safe_text(host) for host in hostname_blacklist]\n \n     def __call__(self):\n-        self.pskin = getToolByName(self.context, \'portal_skins\')\n+        self.pskin = getToolByName(self.context, "portal_skins")\n         if self.update():\n             return self.index()\n-        return \'\'\n+        return ""\n \n     def _setup(self):\n         registry = getUtility(IRegistry)\n         self.theme_settings = registry.forInterface(IThemeSettings, False)\n-        self.link_settings = registry.forInterface(ILinkSchema,\n-                                                   prefix="plone",\n-                                                   check=False)\n+        self.link_settings = registry.forInterface(\n+            ILinkSchema, prefix="plone", check=False\n+        )\n         self.zodbThemes = getZODBThemes()\n         self.availableThemes = getAvailableThemes()\n         self.selectedTheme = self.getSelectedTheme(\n             self.availableThemes,\n             self.theme_settings.currentTheme,\n-            self.theme_settings.rules\n+            self.theme_settings.rules,\n         )\n-        self.overlay = \'\'\n+        self.overlay = ""\n \n         self.skinsVocabulary = getUtility(\n-            IVocabularyFactory,\n-            name=\'plone.app.vocabularies.Skins\'\n-        )(\n-            self.context\n-        )\n+            IVocabularyFactory, name="plone.app.vocabularies.Skins"\n+        )(self.context)\n \n         # Set response header to make sure control panel is never themed\n-        self.request.response.setHeader(\'X-Theme-Disabled\', \'1\')\n+        self.request.response.setHeader("X-Theme-Disabled", "1")\n \n     def redirect(self, url):\n         self.request.response.redirect(url)\n@@ -94,8 +90,7 @@ def get_mark_special_links(self):\n     def set_mark_special_links(self, value):\n         self.link_settings.mark_special_links = value\n \n-    mark_special_links = property(get_mark_special_links,\n-                                  set_mark_special_links)\n+    mark_special_links = property(get_mark_special_links, set_mark_special_links)\n \n     def get_ext_links_open_new_window(self):\n         return self.link_settings.external_links_open_new_window\n@@ -103,8 +98,9 @@ def get_ext_links_open_new_window(self):\n     def set_ext_links_open_new_window(self, value):\n         self.link_settings.external_links_open_new_window = value\n \n-    ext_links_open_new_window = property(get_ext_links_open_new_window,\n-                                         set_ext_links_open_new_window)\n+    ext_links_open_new_window = property(\n+        get_ext_links_open_new_window, set_ext_links_open_new_window\n+    )\n \n     def update(self):\n         # XXX: complexity too high: refactoring needed\n@@ -112,27 +108,22 @@ def update(self):\n         self.errors = {}\n         form = self.request.form\n \n-        if \'form.button.Cancel\' in form:\n+        if "form.button.Cancel" in form:\n             IStatusMessage(self.request).add(_("Changes cancelled"))\n             self.redirect(f"{self.site_url}/@@overview-controlpanel")\n             return False\n \n-        if \'form.button.Enable\' in form:\n+        if "form.button.Enable" in form:\n             self.authorize()\n \n-            themeSelection = form.get(\'themeName\', None)\n+            themeSelection = form.get("themeName", None)\n \n             if themeSelection:\n-                themeData = self.getThemeData(\n-                    self.availableThemes,\n-                    themeSelection\n-                )\n+                themeData = self.getThemeData(self.availableThemes, themeSelection)\n                 applyTheme(themeData)\n                 self.theme_settings.enabled = True\n \n-            IStatusMessage(\n-                self.request\n-            ).add(\n+            IStatusMessage(self.request).add(\n                 _(\n                     "Theme enabled. Note that this control panel page is "\n                     "never themed."\n@@ -141,13 +132,13 @@ def update(self):\n             self._setup()\n             return True\n \n-        if \'form.button.InvalidateCache\' in form:\n+        if "form.button.InvalidateCache" in form:\n             self.authorize()\n             policy = theming_policy()\n             policy.invalidateCache()\n             return True\n \n-        if \'form.button.Disable\' in form:\n+        if "form.button.Disable" in form:\n             self.authorize()\n \n             applyTheme(None)\n@@ -157,38 +148,38 @@ def update(self):\n             self._setup()\n             return True\n \n-        if \'form.button.AdvancedSave\' in form:\n+        if "form.button.AdvancedSave" in form:\n             self.authorize()\n \n-            self.theme_settings.readNetwork = form.get(\'readNetwork\', False)\n+            self.theme_settings.readNetwork = form.get("readNetwork", False)\n \n-            themeEnabled = form.get(\'themeEnabled\', False)\n-            rules = form.get(\'rules\', None)\n-            prefix = form.get(\'absolutePrefix\', None)\n-            doctype = str(form.get(\'doctype\', ""))\n+            themeEnabled = form.get("themeEnabled", False)\n+            rules = form.get("rules", None)\n+            prefix = form.get("absolutePrefix", None)\n+            doctype = str(form.get("doctype", ""))\n \n             parameterExpressions = {}\n-            parameterExpressionsList = form.get(\'parameterExpressions\', [])\n+            parameterExpressionsList = form.get("parameterExpressions", [])\n \n             for line in parameterExpressionsList:\n                 try:\n-                    name, expression = line.split(\'=\', 1)\n+                    name, expression = line.split("=", 1)\n                     name = str(name.strip())\n                     expression = str(expression.strip())\n                     parameterExpressions[name] = expression\n                 except ValueError:\n                     message = _(\n-                        \'error_invalid_parameter_expressions\',\n+                        "error_invalid_parameter_expressions",\n                         default="Please ensure you enter one expression per "\n-                                "line, in the format <name> = <expression>."\n+                        "line, in the format <name> = <expression>.",\n                     )\n-                    self.errors[\'parameterExpressions\'] = message\n+                    self.errors["parameterExpressions"] = message\n \n-            themeBase = form.get(\'themeBase\', None)\n-            markSpecialLinks = form.get(\'markSpecialLinks\', None)\n-            extLinksOpenInNewWindow = form.get(\'extLinksOpenInNewWindow\', None)\n+            themeBase = form.get("themeBase", None)\n+            markSpecialLinks = form.get("markSpecialLinks", None)\n+            extLinksOpenInNewWindow = form.get("extLinksOpenInNewWindow", None)\n \n-            custom_css = form.get(\'custom_css\', b\'\')\n+            custom_css = form.get("custom_css", b"")\n \n             if not self.errors:\n                 # Trigger onDisabled() on plugins if theme was active\n@@ -218,18 +209,16 @@ def update(self):\n                 self._setup()\n                 return True\n             else:\n-                IStatusMessage(self.request).add(\n-                    _("There were errors"), \'error\'\n-                )\n-                self.redirectToFieldset(\'advanced\')\n+                IStatusMessage(self.request).add(_("There were errors"), "error")\n+                self.redirectToFieldset("advanced")\n                 return False\n \n-        if \'form.button.Import\' in form:\n+        if "form.button.Import" in form:\n             self.authorize()\n \n-            enableNewTheme = form.get(\'enableNewTheme\', False)\n-            replaceExisting = form.get(\'replaceExisting\', False)\n-            themeArchive = form.get(\'themeArchive\', None)\n+            enableNewTheme = form.get("enableNewTheme", False)\n+            replaceExisting = form.get("replaceExisting", False)\n+            themeArchive = form.get("themeArchive", None)\n \n             themeZip = None\n             performImport = False\n@@ -238,34 +227,31 @@ def update(self):\n                 themeZip = zipfile.ZipFile(themeArchive)\n             except (zipfile.BadZipfile, zipfile.LargeZipFile):\n                 logger.exception("Could not read zip file")\n-                self.errors[\'themeArchive\'] = _(\n-                    \'error_invalid_zip\',\n-                    default="The uploaded file is not a valid Zip archive"\n+                self.errors["themeArchive"] = _(\n+                    "error_invalid_zip",\n+                    default="The uploaded file is not a valid Zip archive",\n                 )\n \n             if themeZip:\n-\n                 try:\n                     themeData = extractThemeInfo(themeZip, checkRules=False)\n                 except (ValueError, KeyError) as e:\n                     logger.warn(str(e))\n-                    self.errors[\'themeArchive\'] = _(\n-                        \'error_no_rules_file\',\n-                        "The uploaded file does not contain a valid theme "\n-                        "archive."\n+                    self.errors["themeArchive"] = _(\n+                        "error_no_rules_file",\n+                        "The uploaded file does not contain a valid theme " "archive.",\n                     )\n                 else:\n-\n                     themeContainer = getOrCreatePersistentResourceDirectory()\n                     themeExists = themeData.__name__ in themeContainer\n \n                     if themeExists:\n                         if not replaceExisting:\n-                            self.errors[\'themeArchive\'] = _(\n-                                \'error_already_installed\',\n+                            self.errors["themeArchive"] = _(\n+                                "error_already_installed",\n                                 "This theme is already installed. Select "\n                                 "\'Replace existing theme\' and re-upload to "\n-                                "replace it."\n+                                "replace it.",\n                             )\n                         else:\n                             del themeContainer[themeData.__name__]\n@@ -277,8 +263,7 @@ def update(self):\n                 themeContainer.importZip(themeZip)\n \n                 themeDirectory = queryResourceDirectory(\n-                    THEME_RESOURCE_NAME,\n-                    themeData.__name__\n+                    THEME_RESOURCE_NAME, themeData.__name__\n                 )\n                 if themeDirectory is not None:\n                     # If we don\'t have a rules file, use the template\n@@ -288,12 +273,11 @@ def update(self):\n                         RULE_FILENAME,\n                     ) and not themeDirectory.isFile(RULE_FILENAME):\n                         templateThemeDirectory = queryResourceDirectory(\n-                            THEME_RESOURCE_NAME,\n-                            TEMPLATE_THEME\n+                            THEME_RESOURCE_NAME, TEMPLATE_THEME\n                         )\n                         themeDirectory.writeFile(\n                             RULE_FILENAME,\n-                            templateThemeDirectory.readFile(RULE_FILENAME)\n+                            templateThemeDirectory.readFile(RULE_FILENAME),\n                         )\n \n                         if not themeDirectory.isFile(DEFAULT_THEME_FILENAME):\n@@ -304,7 +288,7 @@ def update(self):\n                                     "found. Update rules.xml to reference "\n                                     "the current theme file."\n                                 ),\n-                                \'warning\',\n+                                "warning",\n                             )\n \n                     plugins = getPlugins()\n@@ -312,9 +296,7 @@ def update(self):\n                     if pluginSettings is not None:\n                         for name, plugin in plugins:\n                             plugin.onCreated(\n-                                themeData.__name__,\n-                                pluginSettings[name],\n-                                pluginSettings\n+                                themeData.__name__, pluginSettings[name], pluginSettings\n                             )\n \n                 if enableNewTheme:\n@@ -329,24 +311,21 @@ def update(self):\n                 )\n                 return False\n             else:\n-                IStatusMessage(self.request).add(\n-                    _("There were errors"),\n-                    "error"\n-                )\n+                IStatusMessage(self.request).add(_("There were errors"), "error")\n \n-                self.renderOverlay(\'upload\')\n+                self.renderOverlay("upload")\n                 return True\n \n-        if \'form.button.DeleteSelected\' in form:\n+        if "form.button.DeleteSelected" in form:\n             self.authorize()\n \n-            toDelete = form.get(\'themes\', [])\n+            toDelete = form.get("themes", [])\n             themeDirectory = getOrCreatePersistentResourceDirectory()\n \n             for theme in toDelete:\n                 del themeDirectory[theme]\n \n-            IStatusMessage(self.request).add(_("Theme deleted"), \'info\')\n+            IStatusMessage(self.request).add(_("Theme deleted"), "info")\n \n             self._setup()\n             return True\n@@ -390,14 +369,23 @@ def themeList(self):\n             override = False\n \n             # Is there more than one theme with the same name?\n-            if len([x for x in self.availableThemes if x.__name__ == theme.__name__]) > 1:\n+            if (\n+                len([x for x in self.availableThemes if x.__name__ == theme.__name__])\n+                > 1\n+            ):\n                 # Then we make sure we\'re using the TTW version, not the filesystem version.\n                 try:\n-                    theme = list(filter(lambda x: x.__name__ == theme.__name__, self.zodbThemes))[0]\n+                    theme = list(\n+                        filter(lambda x: x.__name__ == theme.__name__, self.zodbThemes)\n+                    )[0]\n                     override = True\n                 # Or when TTW is not available, the first available filesystem version.\n                 except IndexError:\n-                    theme = list(filter(lambda x: x.__name__ == theme.__name__, self.availableThemes))[0]\n+                    theme = list(\n+                        filter(\n+                            lambda x: x.__name__ == theme.__name__, self.availableThemes\n+                        )\n+                    )[0]\n \n             previewUrl = "++resource++plone.app.theming/defaultPreview.png"\n             if theme.preview:\n@@ -407,13 +395,13 @@ def themeList(self):\n                 )\n \n             theme_data = {\n-                \'name\': theme.__name__,\n-                \'title\': theme.title,\n-                \'description\': theme.description,\n-                \'override\': override,\n-                \'editable\': theme.__name__ in zodbNames,\n-                \'preview\': f"{self.site_url}/{previewUrl}",\n-                \'selected\': theme.__name__ == self.selectedTheme,\n+                "name": theme.__name__,\n+                "title": theme.title,\n+                "description": theme.description,\n+                "override": override,\n+                "editable": theme.__name__ in zodbNames,\n+                "preview": f"{self.site_url}/{previewUrl}",\n+                "selected": theme.__name__ == self.selectedTheme,\n             }\n             if theme.__name__ == self.selectedTheme:\n                 active_theme = theme_data\n@@ -422,7 +410,7 @@ def themeList(self):\n \n             complete.append(theme.__name__)\n \n-        themes.sort(key=lambda x: x[\'title\'])\n+        themes.sort(key=lambda x: x["title"])\n         if active_theme:\n             themes.insert(0, active_theme)\n \n@@ -430,11 +418,7 @@ def themeList(self):\n \n     def redirectToFieldset(self, fieldset):\n         self.redirect(\n-            "{}/{}#fieldsetlegend-{}".format(\n-                self.site_url,\n-                self.__name__,\n-                fieldset\n-            )\n+            "{}/{}#fieldsetlegend-{}".format(self.site_url, self.__name__, fieldset)\n         )\n \n     def renderOverlay(self, overlay):\ndiff --git a/src/plone/app/theming/browser/custom_css.py b/src/plone/app/theming/browser/custom_css.py\nindex 9122568..135da81 100644\n--- a/src/plone/app/theming/browser/custom_css.py\n+++ b/src/plone/app/theming/browser/custom_css.py\n@@ -17,8 +17,8 @@ def __call__(self):\n         registry = getUtility(IRegistry)\n         theme_settings = registry.forInterface(IThemeSettings, False)\n         self.request.response.setHeader(\n-            \'Content-Type\',\n-            \'text/css; charset=utf-8\',\n+            "Content-Type",\n+            "text/css; charset=utf-8",\n         )\n         dt = theme_settings.custom_css_timestamp\n         # If the datetime object is timezone-naive, it is assumed to be local time.\n@@ -26,7 +26,7 @@ def __call__(self):\n             dt = dt.astimezone(dateutil.tz.tzlocal())\n         # Format a Python datetime object as an RFC1123 date.\n         self.request.response.setHeader(\n-            \'Last-Modified\',\n+            "Last-Modified",\n             wsgiref.handlers.format_date_time(time.mktime(dt.timetuple())),\n         )\n         return theme_settings.custom_css\ndiff --git a/src/plone/app/theming/browser/help.py b/src/plone/app/theming/browser/help.py\nindex 7536c8b..992f35e 100644\n--- a/src/plone/app/theming/browser/help.py\n+++ b/src/plone/app/theming/browser/help.py\n@@ -5,15 +5,10 @@\n \n \n class Help(BrowserView):\n-\n     def __call__(self):\n         rstSource = pkg_resources.resource_string(\n-            \'plone.app.theming.browser\',\n-            \'resources/userguide.rst\'\n-        )\n-        parts = docutils.core.publish_parts(\n-            source=rstSource,\n-            writer_name=\'html\'\n+            "plone.app.theming.browser", "resources/userguide.rst"\n         )\n-        html = parts[\'body_pre_docinfo\'] + parts[\'fragment\']\n+        parts = docutils.core.publish_parts(source=rstSource, writer_name="html")\n+        html = parts["body_pre_docinfo"] + parts["fragment"]\n         return f"""<div class="content">{html:s}</div>"""\ndiff --git a/src/plone/app/theming/browser/themefile.py b/src/plone/app/theming/browser/themefile.py\nindex ac1f6a6..6d8f0a9 100644\n--- a/src/plone/app/theming/browser/themefile.py\n+++ b/src/plone/app/theming/browser/themefile.py\n@@ -13,16 +13,16 @@ def __call__(self):\n         filedata = self.request.form.get("file", None)\n \n         if filedata is None:\n-            return json.dumps({\'failure\':\'error\'})\n-        \n+            return json.dumps({"failure": "error"})\n+\n         directory = PersistentResourceDirectory(self.context)\n-        name = filedata.filename.encode(\'utf-8\')\n+        name = filedata.filename.encode("utf-8")\n         data = filedata.read()\n \n         try:\n             directory.writeFile(name, data)\n-            self.request.response.setHeader(\'Content-Type\', \'application/json\')\n+            self.request.response.setHeader("Content-Type", "application/json")\n         except:\n-            return json.dumps({\'failure\':\'error\'})\n+            return json.dumps({"failure": "error"})\n \n-        return json.dumps({\'success\':\'create\'})\n+        return json.dumps({"success": "create"})\ndiff --git a/src/plone/app/theming/events.py b/src/plone/app/theming/events.py\nindex 27d09b4..b28041f 100644\n--- a/src/plone/app/theming/events.py\n+++ b/src/plone/app/theming/events.py\n@@ -4,6 +4,5 @@\n \n @implementer(IThemeAppliedEvent)\n class ThemeAppliedEvent:\n-\n     def __init__(self, theme):\n         self.theme = theme\ndiff --git a/src/plone/app/theming/exportimport/handler.py b/src/plone/app/theming/exportimport/handler.py\nindex 834d0c5..726c446 100644\n--- a/src/plone/app/theming/exportimport/handler.py\n+++ b/src/plone/app/theming/exportimport/handler.py\n@@ -11,11 +11,11 @@ def importTheme(context):\n     and enable the theme.\n     """\n \n-    data = context.readDataFile(\'theme.xml\')\n+    data = context.readDataFile("theme.xml")\n     if not data:\n         return\n \n-    logger = context.getLogger(\'plone.app.theming.exportimport\')\n+    logger = context.getLogger("plone.app.theming.exportimport")\n \n     tree = etree.fromstring(data)\n \n@@ -35,7 +35,7 @@ def importTheme(context):\n             raise ValueError(f"Theme {themeName:s} is not available")\n \n         applyTheme(themeInfo)\n-        logger.info(f\'Theme {themeName:s} applied\')\n+        logger.info(f"Theme {themeName:s} applied")\n \n     # enable/disable theme\n     themeEnabled = tree.find("enabled")\n@@ -45,13 +45,25 @@ def importTheme(context):\n     settings = getUtility(IRegistry).forInterface(IThemeSettings, False)\n \n     themeEnabled = themeEnabled.text.strip().lower()\n-    if themeEnabled in ("y", "yes", "true", "t", "1", "on",):\n+    if themeEnabled in (\n+        "y",\n+        "yes",\n+        "true",\n+        "t",\n+        "1",\n+        "on",\n+    ):\n         settings.enabled = True\n-        logger.info(\'Theme enabled\')\n-    elif themeEnabled in ("n", "no", "false", "f", "0", "off",):\n+        logger.info("Theme enabled")\n+    elif themeEnabled in (\n+        "n",\n+        "no",\n+        "false",\n+        "f",\n+        "0",\n+        "off",\n+    ):\n         settings.enabled = False\n-        logger.info(\'Theme disabled\')\n+        logger.info("Theme disabled")\n     else:\n-        raise ValueError(\n-            f"{themeEnabled:s} is not a valid value for <enabled />"\n-        )\n+        raise ValueError(f"{themeEnabled:s} is not a valid value for <enabled />")\ndiff --git a/src/plone/app/theming/header.py b/src/plone/app/theming/header.py\nindex edd4fd9..54e3bf2 100644\n--- a/src/plone/app/theming/header.py\n+++ b/src/plone/app/theming/header.py\n@@ -11,4 +11,4 @@ def setHeader(object, event):\n     request = event.request\n \n     if isThemeEnabled(request):\n-        request.environ[\'HTTP_X_THEME_ENABLED\'] = True\n+        request.environ["HTTP_X_THEME_ENABLED"] = True\ndiff --git a/src/plone/app/theming/interfaces.py b/src/plone/app/theming/interfaces.py\nindex 7a95ac2..5611ddb 100644\n--- a/src/plone/app/theming/interfaces.py\n+++ b/src/plone/app/theming/interfaces.py\n@@ -8,30 +8,41 @@\n \n _ = MessageFactory("plone")\n \n-THEME_RESOURCE_NAME = \'theme\'\n-RULE_FILENAME = \'rules.xml\'\n-DEFAULT_THEME_FILENAME = \'index.html\'\n-TEMPLATE_THEME = \'template\'\n+THEME_RESOURCE_NAME = "theme"\n+RULE_FILENAME = "rules.xml"\n+DEFAULT_THEME_FILENAME = "index.html"\n+TEMPLATE_THEME = "template"\n \n MANIFEST_FORMAT = ManifestFormat(\n     THEME_RESOURCE_NAME,\n-    keys=[\'title\', \'description\', \'rules\', \'prefix\', \'doctype\', \'preview\',\n-          \'enabled-bundles\', \'disabled-bundles\',\n-          \'development-css\', \'production-css\',\n-          \'tinymce-content-css\', \'tinymce-styles-css\',\n-          \'development-js\', \'production-js\'],\n-    parameterSections=[\'parameters\'],\n+    keys=[\n+        "title",\n+        "description",\n+        "rules",\n+        "prefix",\n+        "doctype",\n+        "preview",\n+        "enabled-bundles",\n+        "disabled-bundles",\n+        "development-css",\n+        "production-css",\n+        "tinymce-content-css",\n+        "tinymce-styles-css",\n+        "development-js",\n+        "production-js",\n+    ],\n+    parameterSections=["parameters"],\n )\n \n-THEME_EXTENSIONS = frozenset([\'html\', \'htm\'])\n+THEME_EXTENSIONS = frozenset(["html", "htm"])\n+\n \n def get_default_custom_css_timestamp():\n     return datetime.now()\n \n \n class ITheme(Interface):\n-    """A theme, loaded from a resource directory\n-    """\n+    """A theme, loaded from a resource directory"""\n \n     __name__ = schema.TextLine(\n         title=_("Name"),\n@@ -76,69 +87,65 @@ class ITheme(Interface):\n \n \n class IThemeSettings(Interface):\n-    """Transformation settings\n-    """\n+    """Transformation settings"""\n \n     enabled = schema.Bool(\n-        title=_(\'enabled\', "Enabled"),\n+        title=_("enabled", "Enabled"),\n         description=_(\n-            \'enable_theme_globally\',\n+            "enable_theme_globally",\n             "Use this option to enable or disable the theme globally. "\n             "Note that the options will also affect whether the theme "\n-            "is used when this option is enabled."\n+            "is used when this option is enabled.",\n         ),\n         required=True,\n         default=False,\n     )\n \n     currentTheme = schema.TextLine(\n-        title=_(\'current_theme\', "Current theme"),\n+        title=_("current_theme", "Current theme"),\n         description=_(\n-            \'current_theme_description\',\n-            "The name of the current theme, i.e. the one applied most "\n-            "recently."),\n+            "current_theme_description",\n+            "The name of the current theme, i.e. the one applied most " "recently.",\n+        ),\n         required=True,\n     )\n \n     rules = schema.TextLine(\n-        title=_(\'rules_file\', "Rules file"),\n-        description=_(\n-            \'rules_file_path\',\n-            "File path to the rules file"\n-        ),\n+        title=_("rules_file", "Rules file"),\n+        description=_("rules_file_path", "File path to the rules file"),\n         required=False,\n     )\n \n     absolutePrefix = schema.TextLine(\n-        title=_(\'absolute_url_prefix\', "Absolute URL prefix"),\n+        title=_("absolute_url_prefix", "Absolute URL prefix"),\n         description=_(\n-            \'convert_relative_url\',\n+            "convert_relative_url",\n             "Convert relative URLs in the theme file to absolute paths "\n-            "using this prefix."\n+            "using this prefix.",\n         ),\n         required=False,\n     )\n \n     readNetwork = schema.Bool(\n-        title=_(\'readNetwork\', "Read network"),\n+        title=_("readNetwork", "Read network"),\n         description=_(\n-            \'network_urls_allowed\',\n+            "network_urls_allowed",\n             "If enabled, network (http, https) urls are allowed in "\n-            "the rules file and this config."\n+            "the rules file and this config.",\n         ),\n         required=True,\n         default=False,\n     )\n \n     hostnameBlacklist = schema.List(\n-        title=_(\'hostname_blacklist\', "Unthemed host names"),\n+        title=_("hostname_blacklist", "Unthemed host names"),\n         description=_(\n-            \'hostname_blacklist_description\',\n+            "hostname_blacklist_description",\n             "If there are hostnames that you do not want to be themed, you "\n             "can list them here. This is useful during theme development, "\n             "so that you can compare the themed and unthemed sites. In some "\n             "cases, you may also want to provided an unthemed host alias for "\n-            "content administrators to be able to use \'plain\' Plone."\n+            "content administrators to be able to use \'plain\' Plone.",\n         ),\n         value_type=schema.TextLine(),\n         required=False,\n@@ -146,15 +153,15 @@ class IThemeSettings(Interface):\n     )\n \n     parameterExpressions = schema.Dict(\n-        title=_(\'parameter_expressions\', "Parameter expressions"),\n+        title=_("parameter_expressions", "Parameter expressions"),\n         description=_(\n-            \'parameter_expressions_description\',\n+            "parameter_expressions_description",\n             "You can define parameters here, which will be passed to the "\n             "compiled theme. In your rules file, you can refer to a "\n             "parameter by $name. Parameters are defined using TALES "\n             "expressions, which should evaluate to a string, a number, a "\n             "boolean or None. Available variables are `context`, `request`, "\n-            "`portal`, `portal_state`,  and `context_state`."\n+            "`portal`, `portal_state`,  and `context_state`.",\n         ),\n         key_type=schema.ASCIILine(),\n         value_type=schema.ASCIILine(),\n@@ -163,12 +170,12 @@ class IThemeSettings(Interface):\n     )\n \n     doctype = schema.ASCIILine(\n-        title=_(\'doctype\', "Doctype"),\n+        title=_("doctype", "Doctype"),\n         description=_(\n-            \'doctype_description\',\n-            \'You can specify a Doctype string which will be set on the \'\n+            "doctype_description",\n+            "You can specify a Doctype string which will be set on the "\n             \'for example "<!DOCTYPE html>". If left blank the default XHTML \'\n-            \'1.0 transitional Doctype or that set in the Diazo theme is used.\'\n+            "1.0 transitional Doctype or that set in the Diazo theme is used.",\n         ),\n         required=False,\n         default="",\n@@ -176,18 +183,18 @@ class IThemeSettings(Interface):\n \n     custom_css = schema.SourceText(\n         title=_(\n-            \'label_custom_css\',\n-            \'Custom CSS\',\n+            "label_custom_css",\n+            "Custom CSS",\n         ),\n         description=_(\n-            \'help_custom_css\',\n-            \'Define your own custom CSS in the field below. This is a good \'\n-            \'place for quick customizations of things like colors and the \'\n-            \'toolbar. Definitions here will override previously defined CSS \'\n-            \'of Plone. Please use this only for small customizations, as it \'\n-            \'is hard to keep track of changes here. For bigger changes you most \'\n-            \'likely want to customize a full theme and make your changes \'\n-            \'there.\',\n+            "help_custom_css",\n+            "Define your own custom CSS in the field below. This is a good "\n+            "place for quick customizations of things like colors and the "\n+            "toolbar. Definitions here will override previously defined CSS "\n+            "of Plone. Please use this only for small customizations, as it "\n+            "is hard to keep track of changes here. For bigger changes you most "\n+            "likely want to customize a full theme and make your changes "\n+            "there.",\n         ),\n         default="",\n         required=False,\n@@ -195,11 +202,11 @@ class IThemeSettings(Interface):\n \n     custom_css_timestamp = schema.Datetime(\n         title=_(\n-            \'Custom CSS Timestamp\',\n+            "Custom CSS Timestamp",\n         ),\n         description=_(\n-            \'Time stamp when the custom CSS was changed. \'\n-            \'Used to generate custom.css with timestamp in URL.\',\n+            "Time stamp when the custom CSS was changed. "\n+            "Used to generate custom.css with timestamp in URL.",\n         ),\n         defaultFactory=get_default_custom_css_timestamp,\n         required=False,\n@@ -207,8 +214,7 @@ class IThemeSettings(Interface):\n \n \n class IThemingLayer(Interface):\n-    """Browser layer used to indicate that plone.app.theming is installed\n-    """\n+    """Browser layer used to indicate that plone.app.theming is installed"""\n \n \n class IThemePlugin(Interface):\n@@ -260,12 +266,11 @@ def onDisabled(theme, settings, dependenciesSettings):\n         """\n \n     def onRequest(request, theme, settings, dependenciesSettings):\n-        """Called upon traversal into the site when a theme is enabled\n-        """\n+        """Called upon traversal into the site when a theme is enabled"""\n \n \n class IThemeAppliedEvent(Interface):\n-    theme = Attribute(\'theme that is getting applied\')\n+    theme = Attribute("theme that is getting applied")\n \n \n class INoRequest(Interface):\n@@ -294,8 +299,7 @@ def getCacheKey(theme=None):\n         """Managing the cache is a policy decision."""\n \n     def invalidateCache():\n-        """When our settings are changed, invalidate the cache on all zeo clients.\n-        """\n+        """When our settings are changed, invalidate the cache on all zeo clients."""\n \n     def get_theme():\n         """Returns the current theme object, cached."""\ndiff --git a/src/plone/app/theming/plugins/__init__.py b/src/plone/app/theming/plugins/__init__.py\nindex de40ea7..5284146 100644\n--- a/src/plone/app/theming/plugins/__init__.py\n+++ b/src/plone/app/theming/plugins/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/app/theming/plugins/hooks.py b/src/plone/app/theming/plugins/hooks.py\nindex 46c81fc..9300f05 100644\n--- a/src/plone/app/theming/plugins/hooks.py\n+++ b/src/plone/app/theming/plugins/hooks.py\n@@ -7,8 +7,7 @@\n \n \n def onStartup(event):\n-    """Call onDiscovery() on each plugin for each theme on startup\n-    """\n+    """Call onDiscovery() on each plugin for each theme on startup"""\n     plugins = getPlugins()\n \n     for themeDirectory in iterDirectoriesOfType(THEME_RESOURCE_NAME):\n@@ -16,15 +15,12 @@ def onStartup(event):\n \n         for name, plugin in plugins:\n             plugin.onDiscovery(\n-                themeDirectory.__name__,\n-                pluginSettings[name],\n-                pluginSettings\n+                themeDirectory.__name__, pluginSettings[name], pluginSettings\n             )\n \n \n def onRequest(object, event):\n-    """Call onRequest() on each plugin for the eanbled theme on each request\n-    """\n+    """Call onRequest() on each plugin for the eanbled theme on each request"""\n \n     request = event.request\n     policy = theming_policy(request)\ndiff --git a/src/plone/app/theming/plugins/utils.py b/src/plone/app/theming/plugins/utils.py\nindex d4ad152..b032d36 100644\n--- a/src/plone/app/theming/plugins/utils.py\n+++ b/src/plone/app/theming/plugins/utils.py\n@@ -15,8 +15,7 @@ def pluginSettingsCacheKey(fun, themeDirectory, plugins=None):\n \n \n def sortDependencies(plugins):\n-    """Topological sort\n-    """\n+    """Topological sort"""\n     queue = []\n     waiting = {}  # (n,p) -> [remaining deps]\n \n@@ -39,19 +38,21 @@ def sortDependencies(plugins):\n                 del waiting[(nw, pw)]\n \n     if waiting:\n-        raise ValueError(\n-            f"Could not resolve dependencies for: {waiting:s}"\n-        )\n+        raise ValueError(f"Could not resolve dependencies for: {waiting:s}")\n \n \n @cache(pluginsCacheKey)\n def getPlugins():\n-    """Get all registered plugins topologically sorted\n-    """\n+    """Get all registered plugins topologically sorted"""\n     plugins = []\n \n     for name, plugin in getUtilitiesFor(IThemePlugin):\n-        plugins.append((name, plugin,))\n+        plugins.append(\n+            (\n+                name,\n+                plugin,\n+            )\n+        )\n \n     return list(sortDependencies(plugins))\n \n@@ -88,7 +89,6 @@ def getPluginSettings(themeDirectory, plugins=None):\n     pluginSettings = {}\n     for name, plugin in plugins:\n         pluginSettings[name] = manifestContents.get(\n-            f"{THEME_RESOURCE_NAME:s}:{name:s}",\n-            {}\n+            f"{THEME_RESOURCE_NAME:s}:{name:s}", {}\n         )\n     return pluginSettings\ndiff --git a/src/plone/app/theming/policy.py b/src/plone/app/theming/policy.py\nindex 89d7eed..d837ff2 100644\n--- a/src/plone/app/theming/policy.py\n+++ b/src/plone/app/theming/policy.py\n@@ -24,7 +24,6 @@ def invalidateCache(settings, event):\n \n @implementer(IThemingPolicy)\n class ThemingPolicy:\n-\n     def __init__(self, request):\n         """Adapt IRequest.\n         Do not call this class directly, always use a\n@@ -73,13 +72,12 @@ def isThemeEnabled(self, settings=None):\n         debug_mode = getConfiguration().debug_mode\n \n         # Disable theming if the response sets a header\n-        if self.request.response.getHeader(\'X-Theme-Disabled\'):\n+        if self.request.response.getHeader("X-Theme-Disabled"):\n             return False\n \n         # Check for diazo.off request parameter\n-        true_vals = (\'1\', \'y\', \'yes\', \'t\', \'true\')\n-        if (debug_mode and self.request.get(\n-                \'diazo.off\', \'\').lower() in true_vals):\n+        true_vals = ("1", "y", "yes", "t", "true")\n+        if debug_mode and self.request.get("diazo.off", "").lower() in true_vals:\n             return False\n \n         if not settings:\n@@ -87,13 +85,13 @@ def isThemeEnabled(self, settings=None):\n         if settings is None or not settings.enabled:\n             return False\n \n-        server_url = self.request.get(\'SERVER_URL\')\n-        proto, host = server_url.split(\'://\', 1)\n+        server_url = self.request.get("SERVER_URL")\n+        proto, host = server_url.split("://", 1)\n         host = host.lower()\n-        serverPort = self.request.get(\'SERVER_PORT\')\n+        serverPort = self.request.get("SERVER_PORT")\n \n         for hostname in settings.hostnameBlacklist or ():\n-            if host == hostname or host == \':\'.join((hostname, serverPort)):\n+            if host == hostname or host == ":".join((hostname, serverPort)):\n                 return False\n \n         return True\n@@ -105,8 +103,9 @@ def getCache(self, theme=None):\n         cache = caches.get(key)\n         if cache is None:\n             logger.debug(\n-                \'initializing local cache on thread %s for %s\',\n-                threading.current_thread().ident, key\n+                "initializing local cache on thread %s for %s",\n+                threading.current_thread().ident,\n+                key,\n             )\n             cache = caches[key] = ThemeCache()\n         return cache\n@@ -118,20 +117,19 @@ def getCacheKey(self, theme=None):\n         return key\n \n     def getCacheStorage(self):\n-        if not hasattr(_local_cache, \'themedata\'):\n+        if not hasattr(_local_cache, "themedata"):\n             self._reset_local_cache()\n-        if self._get_shared_invalidation() > _local_cache.themedata[\'mtime\']:\n+        if self._get_shared_invalidation() > _local_cache.themedata["mtime"]:\n             logger.debug(\n-                \'shared invalidation requires local cache reset on %s\',\n-                threading.current_thread().ident\n+                "shared invalidation requires local cache reset on %s",\n+                threading.current_thread().ident,\n             )\n             self._reset_local_cache()\n         return _local_cache.themedata\n \n     def invalidateCache(self):\n-        """When our settings are changed, invalidate the cache on all zeo clients\n-        """\n-        logger.info(\'invalidating cache across all threads and processes\')\n+        """When our settings are changed, invalidate the cache on all zeo clients"""\n+        logger.info("invalidating cache across all threads and processes")\n         self._reset_local_cache()\n         self._set_shared_invalidation()\n \n@@ -140,23 +138,22 @@ def _reset_local_cache(self):\n         Invalidate only the local thread cache\n         Removes actual theme data, leaving only mtime\n         """\n-        _local_cache.themedata = {\'mtime\': time.time()}\n+        _local_cache.themedata = {"mtime": time.time()}\n         logger.debug(\n-            \'local cache invalidated on thread %s\',\n-            threading.current_thread().ident\n+            "local cache invalidated on thread %s", threading.current_thread().ident\n         )\n \n     def _set_shared_invalidation(self):\n         """Signal to other threads and processes they should invalidate their\n         theme caches."""\n         registry = queryUtility(IRegistry)\n-        setattr(registry, \'_theme_cache_mtime\', time.time())\n+        setattr(registry, "_theme_cache_mtime", time.time())\n         registry._p_changed = True\n-        logger.debug(\'shared cache invalidation marker updated\')\n+        logger.debug("shared cache invalidation marker updated")\n \n     def _get_shared_invalidation(self):\n         registry = queryUtility(IRegistry)\n-        return getattr(registry, \'_theme_cache_mtime\', 0)\n+        return getattr(registry, "_theme_cache_mtime", 0)\n \n     def get_theme(self):\n         """Managing the theme cache is a plone.app.theming policy\n@@ -176,8 +173,7 @@ def set_theme(self, themeName, themeObj):\n \n \n class ThemeCache:\n-    """Simple cache for the transform and theme\n-    """\n+    """Simple cache for the transform and theme"""\n \n     def __init__(self):\n         self.transform = None\ndiff --git a/src/plone/app/theming/testing.py b/src/plone/app/theming/testing.py\nindex 9b230cf..7ab095c 100644\n--- a/src/plone/app/theming/testing.py\n+++ b/src/plone/app/theming/testing.py\n@@ -12,27 +12,25 @@ class Theming(PloneSandboxLayer):\n     def setUpZope(self, app, configurationContext):\n         # load ZCML\n         import plone.app.theming.tests\n+\n         xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.app.theming.tests,\n-            context=configurationContext\n+            "configure.zcml", plone.app.theming.tests, context=configurationContext\n         )\n \n         # Run the startup hook\n         from plone.app.theming.plugins.hooks import onStartup\n+\n         onStartup(None)\n \n     def setUpPloneSite(self, portal):\n         # install into the Plone site\n-        applyProfile(portal, \'plone.app.theming:default\')\n+        applyProfile(portal, "plone.app.theming:default")\n \n \n THEMING_FIXTURE = Theming()\n THEMING_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(THEMING_FIXTURE,),\n-    name="Theming:Integration"\n+    bases=(THEMING_FIXTURE,), name="Theming:Integration"\n )\n THEMING_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(THEMING_FIXTURE,),\n-    name="Theming:Functional"\n+    bases=(THEMING_FIXTURE,), name="Theming:Functional"\n )\ndiff --git a/src/plone/app/theming/tests/test_controlpanel.py b/src/plone/app/theming/tests/test_controlpanel.py\nindex be30e89..c56ab85 100644\n--- a/src/plone/app/theming/tests/test_controlpanel.py\n+++ b/src/plone/app/theming/tests/test_controlpanel.py\n@@ -9,34 +9,30 @@\n \n \n class TestControlPanel(unittest.TestCase):\n-\n     layer = THEMING_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        portal = self.layer[\'portal\']\n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+        portal = self.layer["portal"]\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n         import transaction\n+\n         transaction.commit()\n \n         self.portal = portal\n-        self.browser = Browser(self.layer[\'app\'])\n+        self.browser = Browser(self.layer["app"])\n \n         handleErrors = self.browser.handleErrors\n         try:\n             self.browser.handleErrors = False\n-            self.browser.open(portal.absolute_url() + \'/login_form\')\n-            self.browser.getControl(name=\'__ac_name\').value = TEST_USER_NAME\n-            self.browser.getControl(\n-                name=\'__ac_password\'\n-            ).value = TEST_USER_PASSWORD\n-            self.browser.getControl(\'Log in\').click()\n+            self.browser.open(portal.absolute_url() + "/login_form")\n+            self.browser.getControl(name="__ac_name").value = TEST_USER_NAME\n+            self.browser.getControl(name="__ac_password").value = TEST_USER_PASSWORD\n+            self.browser.getControl("Log in").click()\n         finally:\n             self.browser.handleErrors = handleErrors\n \n     def goto_controlpanel(self):\n-        self.browser.open(\n-            self.portal.absolute_url() + \'/@@theming-controlpanel\'\n-        )\n+        self.browser.open(self.portal.absolute_url() + "/@@theming-controlpanel")\n \n     def test_save_advanced(self):\n         # Simply saving the advanced panel without changes could already give a WrongType error.\n@@ -49,6 +45,7 @@ def test_save_advanced(self):\n \n     def test_create_theme(self):\n         pass\n+\n     #     self.goto_controlpanel()\n     #     self.browser.getControl(name=\'title\').value = \'Foobar\'\n     #     self.browser.getControl(name=\'description\').value = \'foobar desc\'\n@@ -60,23 +57,19 @@ def test_create_theme(self):\n     #     self.assertTrue(\'foobar\' in [t.__name__ for t in getZODBThemes()])\n     #     self.assertTrue(getTheme(\'foobar\') is not None)\n \n-\n     def test_upload_theme_file_nodata(self):\n-        self.browser.addHeader(\'Accept\', \'application/json\')\n+        self.browser.addHeader("Accept", "application/json")\n         self.browser.post(\n-            self.portal.absolute_url() + \'/portal_resources/themeFileUpload\',\n-            \'\',\n-        )\n-        self.assertIn(\'Status: 200\', str(self.browser.headers))\n-        self.assertIn(\n-            \'{"failure": "error"}\',\n-            str(self.browser.contents)\n+            self.portal.absolute_url() + "/portal_resources/themeFileUpload",\n+            "",\n         )\n+        self.assertIn("Status: 200", str(self.browser.headers))\n+        self.assertIn(\'{"failure": "error"}\', str(self.browser.contents))\n \n     def test_upload_theme_file_withdata(self):\n-        self.browser.addHeader(\'Accept\', \'application/json\')\n+        self.browser.addHeader("Accept", "application/json")\n         self.browser.post(\n-            self.portal.absolute_url() + \'/portal_resources/themeFileUpload\',\n+            self.portal.absolute_url() + "/portal_resources/themeFileUpload",\n             """\n ---blah---\n Content-Disposition: form-data; name="file"; filename="Screen Shot 2018-02-16 at 3.08.15 pm.png"\n@@ -85,12 +78,11 @@ def test_upload_theme_file_withdata(self):\n \n ---blah---\n             """,\n-# Bug in testbrowser prevents this working\n-#            content_type=\'multipart/form-data; boundary=---blah---\'\n-\n+            # Bug in testbrowser prevents this working\n+            #            content_type=\'multipart/form-data; boundary=---blah---\'\n         )\n-        self.assertIn(\'Status: 200\', str(self.browser.headers))\n+        self.assertIn("Status: 200", str(self.browser.headers))\n         self.assertIn(\n-            \'{"failure": "error"}\', # TODO: Should be {\'success\':\'create\'}\n-            str(self.browser.contents)\n+            \'{"failure": "error"}\',  # TODO: Should be {\'success\':\'create\'}\n+            str(self.browser.contents),\n         )\ndiff --git a/src/plone/app/theming/tests/test_exportimport.py b/src/plone/app/theming/tests/test_exportimport.py\nindex 5feee09..d04a6ec 100644\n--- a/src/plone/app/theming/tests/test_exportimport.py\n+++ b/src/plone/app/theming/tests/test_exportimport.py\n@@ -4,7 +4,6 @@\n \n \n class TestExportImport(unittest.TestCase):\n-\n     layer = THEMING_INTEGRATION_TESTING\n \n     def test_import_filesystem(self):\n@@ -14,30 +13,23 @@ def test_import_filesystem(self):\n         from zope.component import getUtility\n \n         class FauxContext:\n-\n             def getLogger(self, name):\n                 import logging\n+\n                 return logging.getLogger(name)\n \n             def readDataFile(self, name):\n-                assert name == \'theme.xml\'\n+                assert name == "theme.xml"\n                 return "<theme><name>plone.app.theming.tests</name></theme>"\n \n         importTheme(FauxContext())\n \n         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)\n \n+        self.assertEqual(settings.rules, "/++theme++plone.app.theming.tests/rules.xml")\n+        self.assertEqual(settings.absolutePrefix, "/++theme++plone.app.theming.tests")\n         self.assertEqual(\n-            settings.rules,\n-            \'/++theme++plone.app.theming.tests/rules.xml\'\n-        )\n-        self.assertEqual(\n-            settings.absolutePrefix,\n-            \'/++theme++plone.app.theming.tests\'\n-        )\n-        self.assertEqual(\n-            settings.parameterExpressions,\n-            {\'foo\': "python:request.get(\'bar\')"}\n+            settings.parameterExpressions, {"foo": "python:request.get(\'bar\')"}\n         )\n \n     def test_import_no_file(self):\n@@ -47,13 +39,13 @@ def test_import_no_file(self):\n         from zope.component import getUtility\n \n         class FauxContext:\n-\n             def getLogger(self, name):\n                 import logging\n+\n                 return logging.getLogger(name)\n \n             def readDataFile(self, name):\n-                assert name == \'theme.xml\'\n+                assert name == "theme.xml"\n                 return None\n \n         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)\n@@ -72,13 +64,13 @@ def test_import_not_found(self):\n         from plone.app.theming.exportimport.handler import importTheme\n \n         class FauxContext:\n-\n             def getLogger(self, name):\n                 import logging\n+\n                 return logging.getLogger(name)\n \n             def readDataFile(self, name):\n-                assert name == \'theme.xml\'\n+                assert name == "theme.xml"\n                 return "<theme><name>invalid-theme-name</name></theme>"\n \n         self.assertRaises(ValueError, importTheme, FauxContext())\n@@ -90,13 +82,13 @@ def test_import_enable(self):\n         from zope.component import getUtility\n \n         class FauxContext:\n-\n             def getLogger(self, name):\n                 import logging\n+\n                 return logging.getLogger(name)\n \n             def readDataFile(self, name):\n-                assert name == \'theme.xml\'\n+                assert name == "theme.xml"\n                 return "<theme><enabled>true</enabled></theme>"\n \n         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)\n@@ -113,13 +105,13 @@ def test_import_disable(self):\n         from zope.component import getUtility\n \n         class FauxContext:\n-\n             def getLogger(self, name):\n                 import logging\n+\n                 return logging.getLogger(name)\n \n             def readDataFile(self, name):\n-                assert name == \'theme.xml\'\n+                assert name == "theme.xml"\n                 return "<theme><enabled>false</enabled></theme>"\n \n         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)\ndiff --git a/src/plone/app/theming/tests/test_policy.py b/src/plone/app/theming/tests/test_policy.py\nindex 324b3ba..188cc13 100644\n--- a/src/plone/app/theming/tests/test_policy.py\n+++ b/src/plone/app/theming/tests/test_policy.py\n@@ -10,100 +10,98 @@\n \n \n class TestFunctional(unittest.TestCase):\n-\n     layer = THEMING_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         policy = theming_policy(request)\n         # avoid cache pollution from other tests\n         policy.invalidateCache()\n \n     def tearDown(self):\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         policy = theming_policy(request)\n         # clear local thread caches\n         policy.invalidateCache()\n \n     def test_getSettings(self):\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         policy = theming_policy(request)\n         settings = policy.getSettings()\n-        self.assertEqual(settings.currentTheme,\n-                         \'barceloneta\')\n-        self.assertEqual(settings.rules,\n-                         \'/++theme++barceloneta/rules.xml\')\n+        self.assertEqual(settings.currentTheme, "barceloneta")\n+        self.assertEqual(settings.rules, "/++theme++barceloneta/rules.xml")\n \n     def test_getCurrentTheme(self):\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         policy = theming_policy(request)\n-        self.assertEqual(policy.getCurrentTheme(),\n-                         \'barceloneta\')\n+        self.assertEqual(policy.getCurrentTheme(), "barceloneta")\n \n     def test_isThemeEnabled(self):\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         policy = theming_policy(request)\n         self.assertTrue(policy.isThemeEnabled())\n \n     def test_isThemeEnabled_blacklist(self):\n-        request = self.layer[\'request\']\n-        request.set(\'BASE1\', \'http://nohost/path/to/site\')\n+        request = self.layer["request"]\n+        request.set("BASE1", "http://nohost/path/to/site")\n         policy = theming_policy(request)\n         settings = policy.getSettings()\n         # Should pay no attention to BASE1 and only use SERVER_URL\n-        settings.hostnameBlacklist.append(\'nohost\')\n+        settings.hostnameBlacklist.append("nohost")\n         self.assertFalse(policy.isThemeEnabled())\n \n     def test_getCache(self):\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         policy = theming_policy(request)\n         cache = policy.getCache()\n         self.assertEqual(cache.themeObj, None)\n \n     def test_getCacheKey(self):\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         policy = theming_policy(request)\n-        self.assertEqual(policy.getCacheKey(),\n-                         \'http://nohost/plone::barceloneta\')\n+        self.assertEqual(policy.getCacheKey(), "http://nohost/plone::barceloneta")\n \n     def test_getCacheStorage(self):\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         policy = theming_policy(request)\n-        self.assertEqual(list(policy.getCacheStorage().keys()), [\'mtime\'])\n+        self.assertEqual(list(policy.getCacheStorage().keys()), ["mtime"])\n         cache = policy.getCache()\n         storage = policy.getCacheStorage()\n         self.assertEqual(\n-            [(k, v) for (k, v) in storage.items() if k != \'mtime\'],\n-            [(\'http://nohost/plone::barceloneta\', cache)])\n+            [(k, v) for (k, v) in storage.items() if k != "mtime"],\n+            [("http://nohost/plone::barceloneta", cache)],\n+        )\n \n     def test_caching(self):\n         """roundtrip"""\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         policy = theming_policy(request)\n         theme = policy.get_theme()\n         cache = policy.getCache()\n         storage = policy.getCacheStorage()\n         self.assertEqual(\n-            [(k, v) for (k, v) in storage.items() if k != \'mtime\'],\n-            [(\'http://nohost/plone::barceloneta\', cache)])\n+            [(k, v) for (k, v) in storage.items() if k != "mtime"],\n+            [("http://nohost/plone::barceloneta", cache)],\n+        )\n         self.assertEqual(cache.themeObj, theme)\n-        policy.set_theme(\'barceloneta\', \'faketheme\')\n-        self.assertEqual(policy.get_theme(), \'faketheme\')\n+        policy.set_theme("barceloneta", "faketheme")\n+        self.assertEqual(policy.get_theme(), "faketheme")\n         policy.invalidateCache()\n-        self.assertEqual(list(policy.getCacheStorage().keys()), [\'mtime\'])\n+        self.assertEqual(list(policy.getCacheStorage().keys()), ["mtime"])\n         theme2 = policy.get_theme()\n         # different objects but both are barceloneta\n         self.assertEqual(theme.title, theme2.title)\n \n     def test_invalidateCache_locally(self):\n         """Poor man\'s IPC - verify within same thread"""\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         policy = theming_policy(request)\n         cache = policy.getCache()\n         storage = policy.getCacheStorage()\n         self.assertEqual(\n-            [(k, v) for (k, v) in storage.items() if k != \'mtime\'],\n-            [(\'http://nohost/plone::barceloneta\', cache)])\n+            [(k, v) for (k, v) in storage.items() if k != "mtime"],\n+            [("http://nohost/plone::barceloneta", cache)],\n+        )\n         shared_mtime_1 = policy._get_shared_invalidation()\n         policy.invalidateCache()\n         shared_mtime_2 = policy._get_shared_invalidation()\n@@ -111,22 +109,23 @@ def test_invalidateCache_locally(self):\n \n     def test_invalidateCache_threaded(self):\n         """Poor man\'s IPC - verify in other thread"""\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         policy = theming_policy(request)\n         cache = policy.getCache()\n         storage = policy.getCacheStorage()\n         self.assertEqual(\n-            [(k, v) for (k, v) in storage.items() if k != \'mtime\'],\n-            [(\'http://nohost/plone::barceloneta\', cache)])\n+            [(k, v) for (k, v) in storage.items() if k != "mtime"],\n+            [("http://nohost/plone::barceloneta", cache)],\n+        )\n         shared_mtime_1 = policy._get_shared_invalidation()\n \n         def invalidate(registry):\n-            setattr(registry, \'_theme_cache_mtime\', time.time())\n+            setattr(registry, "_theme_cache_mtime", time.time())\n             registry._p_modified = True\n             transaction.commit()\n \n         registry = queryUtility(IRegistry)\n-        t = threading.Thread(target=invalidate, args=(registry, ))\n+        t = threading.Thread(target=invalidate, args=(registry,))\n         t.start()\n         t.join(5.0)\n \ndiff --git a/src/plone/app/theming/tests/test_transform.py b/src/plone/app/theming/tests/test_transform.py\nindex 65ad719..61373f1 100644\n--- a/src/plone/app/theming/tests/test_transform.py\n+++ b/src/plone/app/theming/tests/test_transform.py\n@@ -27,7 +27,6 @@\n \n \n class TestCase(unittest.TestCase):\n-\n     layer = THEMING_FUNCTIONAL_TESTING\n \n     def setUp(self):\n@@ -37,12 +36,12 @@ def setUp(self):\n         self.settings = getUtility(IRegistry).forInterface(IThemeSettings)\n \n         self.settings.enabled = False\n-        self.settings.rules = \'python://plone.app.theming/tests/rules.xml\'\n+        self.settings.rules = "python://plone.app.theming/tests/rules.xml"\n         self.settings.parameterExpressions = {\n-            \'stringParam\': \'string:string param value\',\n-            \'boolParam\': \'python:False\',\n-            \'contextParam\': \'context/absolute_url | string:no context\',\n-            \'requestParam\': \'request/useother | string:off\',\n+            "stringParam": "string:string param value",\n+            "boolParam": "python:False",\n+            "contextParam": "context/absolute_url | string:no context",\n+            "requestParam": "request/useother | string:off",\n         }\n \n         transaction.commit()\n@@ -56,8 +55,8 @@ def evaluate(self, context, expression):\n         return expr(ec)\n \n     def test_no_effect_if_not_enabled(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         browser = Browser(app)\n         browser.open(portal.absolute_url())\n@@ -72,8 +71,8 @@ def test_no_effect_if_not_enabled(self):\n         self.assertFalse("This is the theme" in browser.contents)\n \n     def test_theme_enabled(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n         transaction.commit()\n@@ -91,10 +90,9 @@ def test_theme_enabled(self):\n         self.assertTrue("This is the theme" in browser.contents)\n \n     def test_develop_theme(self):\n-        \'\'\' Check if the rules are developed\n-        \'\'\'\n+        """Check if the rules are developed"""\n         # First we check the status of our environment variables\n-        var_name = \'DIAZO_ALWAYS_CACHE_RULES\'\n+        var_name = "DIAZO_ALWAYS_CACHE_RULES"\n         env_had_var = var_name in environ\n         # and clean it up\n         env_var_backup = environ.pop(var_name, None)\n@@ -105,11 +103,11 @@ def test_develop_theme(self):\n         self.assertTrue(transform.develop_theme())\n \n         # But we can anyway force the cache\n-        environ[var_name] = \'true\'\n+        environ[var_name] = "true"\n         self.assertFalse(transform.develop_theme())\n \n         # If we require to debug.diazo the variable will be ignored\n-        transform = ThemeTransform(None, {\'diazo.debug\': \'1\'})\n+        transform = ThemeTransform(None, {"diazo.debug": "1"})\n         self.assertTrue(transform.develop_theme())\n \n         # Then we reset our env variables before leaving\n@@ -119,25 +117,17 @@ def test_develop_theme(self):\n             del environ[var_name]\n \n     def test_theme_enabled_resource_directory(self):\n-\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n-        theme = getTheme(\'plone.app.theming.tests\')\n+        theme = getTheme("plone.app.theming.tests")\n         applyTheme(theme)\n         self.assertEqual(\n-            self.settings.rules,\n-            \'/++theme++plone.app.theming.tests/rules.xml\'\n-        )\n-        self.assertEqual(\n-            self.settings.currentTheme,\n-            "plone.app.theming.tests"\n-        )\n-        self.assertEqual(\n-            self.settings.doctype,\n-            "<!DOCTYPE html>"\n+            self.settings.rules, "/++theme++plone.app.theming.tests/rules.xml"\n         )\n+        self.assertEqual(self.settings.currentTheme, "plone.app.theming.tests")\n+        self.assertEqual(self.settings.doctype, "<!DOCTYPE html>")\n         transaction.commit()\n \n         browser = Browser(app)\n@@ -156,14 +146,14 @@ def test_theme_enabled_resource_directory(self):\n         self.assertTrue(re.match(r"<!DOCTYPE html>\\s+<html", browser.contents))\n \n     def test_theme_enabled_query_string_off_switch(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n         transaction.commit()\n \n         browser = Browser(app)\n-        browser.open(portal.absolute_url() + \'?diazo.off=1\')\n+        browser.open(portal.absolute_url() + "?diazo.off=1")\n \n         # Title - pulled in with rules.xml\n         self.assertTrue(portal.title in browser.contents)\n@@ -175,8 +165,8 @@ def test_theme_enabled_query_string_off_switch(self):\n         self.assertFalse("This is the theme" in browser.contents)\n \n     def test_theme_enabled_query_string_off_switch_production_mode(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         getConfiguration().debug_mode = False\n \n@@ -184,7 +174,7 @@ def test_theme_enabled_query_string_off_switch_production_mode(self):\n         transaction.commit()\n \n         browser = Browser(app)\n-        browser.open(portal.absolute_url() + \'?diazo.off=1\')\n+        browser.open(portal.absolute_url() + "?diazo.off=1")\n \n         # Title - pulled in with rules.xml\n         self.assertTrue(portal.title in browser.contents)\n@@ -196,14 +186,14 @@ def test_theme_enabled_query_string_off_switch_production_mode(self):\n         self.assertTrue("This is the theme" in browser.contents)\n \n     def test_theme_enabled_header_off(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n         transaction.commit()\n \n         browser = Browser(app)\n-        browser.open(portal.absolute_url() + \'/@@header-disabled\')\n+        browser.open(portal.absolute_url() + "/@@header-disabled")\n \n         self.assertTrue("Theme disabled" in browser.contents)\n \n@@ -214,25 +204,23 @@ def test_python_resolver(self):\n         # The rules contain a python:// link, so we need a python resolver.\n         parser = etree.HTMLParser()\n         parser.resolvers.add(PythonResolver())\n-        theme = resolvePythonURL(\n-            \'python://plone.app.theming.tests/theme.html\'\n-        )\n-        rules = resolvePythonURL(\'python://plone.app.theming/tests/rules.xml\')\n+        theme = resolvePythonURL("python://plone.app.theming.tests/theme.html")\n+        rules = resolvePythonURL("python://plone.app.theming/tests/rules.xml")\n         compile_theme(rules, theme, parser=parser)\n \n     def test_theme_stored_in_plone_site(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         # We\'ll upload the theme files to the Plone site root\n         here = os.path.split(__file__)[0]\n-        with open(os.path.join(here, \'localrules.xml\')) as rules_contents:\n-            portal.manage_addDTMLMethod(\'rules.xml\', file=rules_contents)\n-        with open(os.path.join(here, \'theme.html\')) as theme_contents:\n-            portal.manage_addDTMLMethod(\'theme.html\', file=theme_contents)\n+        with open(os.path.join(here, "localrules.xml")) as rules_contents:\n+            portal.manage_addDTMLMethod("rules.xml", file=rules_contents)\n+        with open(os.path.join(here, "theme.html")) as theme_contents:\n+            portal.manage_addDTMLMethod("theme.html", file=theme_contents)\n \n         # These paths should be relative to the Plone site root\n-        self.settings.rules = \'/rules.xml\'\n+        self.settings.rules = "/rules.xml"\n         self.settings.enabled = True\n \n         transaction.commit()\n@@ -250,28 +238,29 @@ def test_theme_stored_in_plone_site(self):\n         self.assertTrue("This is the theme" in browser.contents)\n \n     def test_theme_stored_in_plone_site_works_with_virtual_host(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         # We\'ll upload the theme files to the Plone site root\n         here = os.path.split(__file__)[0]\n-        with open(os.path.join(here, \'localrules.xml\')) as rules_contents:\n-            portal.manage_addDTMLMethod(\'rules.xml\', file=rules_contents)\n-        with open(os.path.join(here, \'theme.html\')) as theme_contents:\n-            portal.manage_addDTMLMethod(\'theme.html\', file=theme_contents)\n+        with open(os.path.join(here, "localrules.xml")) as rules_contents:\n+            portal.manage_addDTMLMethod("rules.xml", file=rules_contents)\n+        with open(os.path.join(here, "theme.html")) as theme_contents:\n+            portal.manage_addDTMLMethod("theme.html", file=theme_contents)\n \n         # These paths should be relative to the Plone site root\n-        self.settings.rules = \'/rules.xml\'\n+        self.settings.rules = "/rules.xml"\n         self.settings.enabled = True\n \n         from Products.SiteAccess import VirtualHostMonster\n-        VirtualHostMonster.manage_addVirtualHostMonster(app, \'virtual_hosting\')\n+\n+        VirtualHostMonster.manage_addVirtualHostMonster(app, "virtual_hosting")\n \n         transaction.commit()\n \n         portalURL = portal.absolute_url()\n-        prefix = \'/\'.join(portalURL.split(\'/\')[:-1])\n-        suffix = portalURL.split(\'/\')[-1]\n+        prefix = "/".join(portalURL.split("/")[:-1])\n+        suffix = portalURL.split("/")[-1]\n \n         vhostURL = (\n             "{:s}/VirtualHostBase/http/example.org:80/{:s}/VirtualHostRoot"\n@@ -291,8 +280,8 @@ def test_theme_stored_in_plone_site_works_with_virtual_host(self):\n         self.assertTrue("This is the theme" in browser.contents)\n \n     def test_absolutePrefix_disabled(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n         self.settings.absolutePrefix = None\n@@ -305,11 +294,11 @@ def test_absolutePrefix_disabled(self):\n         self.assertTrue(\'<img src="relative.jpg" />\' in browser.contents)\n \n     def test_absolutePrefix_enabled_uri(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n-        self.settings.absolutePrefix = \'http://example.com\'\n+        self.settings.absolutePrefix = "http://example.com"\n \n         transaction.commit()\n \n@@ -322,11 +311,11 @@ def test_absolutePrefix_enabled_uri(self):\n         )\n \n     def test_absolutePrefix_enabled_path(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n-        self.settings.absolutePrefix = \'/foo\'\n+        self.settings.absolutePrefix = "/foo"\n \n         transaction.commit()\n \n@@ -334,25 +323,24 @@ def test_absolutePrefix_enabled_path(self):\n         browser.open(portal.absolute_url())\n \n         self.assertFalse(\'<img src="relative.jpg" />\' in browser.contents)\n-        self.assertTrue(\n-            \'<img src="/plone/foo/relative.jpg" />\' in browser.contents\n-        )\n+        self.assertTrue(\'<img src="/plone/foo/relative.jpg" />\' in browser.contents)\n \n     def test_absolutePrefix_enabled_path_vhosting(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         from Products.SiteAccess import VirtualHostMonster\n-        VirtualHostMonster.manage_addVirtualHostMonster(app, \'virtual_hosting\')\n+\n+        VirtualHostMonster.manage_addVirtualHostMonster(app, "virtual_hosting")\n \n         transaction.commit()\n \n         self.settings.enabled = True\n-        self.settings.absolutePrefix = \'/foo\'\n+        self.settings.absolutePrefix = "/foo"\n \n         portalURL = portal.absolute_url()\n-        prefix = \'/\'.join(portalURL.split(\'/\')[:-1])\n-        suffix = portalURL.split(\'/\')[-1]\n+        prefix = "/".join(portalURL.split("/")[:-1])\n+        suffix = portalURL.split("/")[-1]\n \n         vhostURL = (\n             "{:s}/VirtualHostBase/http/example.org:80/{:s}/VirtualHostRoot"\n@@ -366,13 +354,12 @@ def test_absolutePrefix_enabled_path_vhosting(self):\n \n         self.assertFalse(\'<img src="relative.jpg" />\' in browser.contents)\n         self.assertTrue(\n-            \'<img src="/fizz/buzz/fizzbuzz/foo/relative.jpg" />\'\n-            in browser.contents\n+            \'<img src="/fizz/buzz/fizzbuzz/foo/relative.jpg" />\' in browser.contents\n         )\n \n     def test_theme_installed_invalid_config(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n         self.settings.rules = "invalid"\n@@ -392,15 +379,15 @@ def test_theme_installed_invalid_config(self):\n         self.assertFalse("This is the theme" in browser.contents)\n \n     def test_non_html_content(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n \n         transaction.commit()\n \n         browser = Browser(app)\n-        browser.open(portal.absolute_url() + \'/document_icon.png\')\n+        browser.open(portal.absolute_url() + "/document_icon.png")\n         # The theme\n         self.assertFalse(b"This is the theme" in browser.contents)\n \n@@ -523,14 +510,14 @@ def test_non_html_content(self):\n     #     self.assertTrue("This is the theme" in browser.contents)\n \n     def test_theme_different_path(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n-        setRoles(portal, TEST_USER_ID, (\'Manager\',))\n-        portal.invokeFactory(\'Folder\', \'news\', title="News")\n+        setRoles(portal, TEST_USER_ID, ("Manager",))\n+        portal.invokeFactory("Folder", "news", title="News")\n         wftool = getToolByName(portal, "portal_workflow")\n-        wftool.doActionFor(portal.news, action=\'publish\')\n-        setRoles(portal, TEST_USER_ID, (\'Member\',))\n+        wftool.doActionFor(portal.news, action="publish")\n+        setRoles(portal, TEST_USER_ID, ("Member",))\n \n         self.settings.enabled = True\n \n@@ -548,7 +535,7 @@ def test_theme_different_path(self):\n         # The theme\n         self.assertTrue("This is the theme" in browser.contents)\n \n-        browser.open(portal[\'news\'].absolute_url())\n+        browser.open(portal["news"].absolute_url())\n \n         # Title - pulled in with rules.xml\n         self.assertTrue("News" in browser.contents)\n@@ -560,16 +547,16 @@ def test_theme_different_path(self):\n         self.assertTrue("This is the other theme" in browser.contents)\n \n     def test_theme_params(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n-        self.settings.rules = \'python://plone.app.theming/tests/paramrules.xml\'  # noqa\n+        self.settings.rules = "python://plone.app.theming/tests/paramrules.xml"  # noqa\n         self.settings.parameterExpressions = {\n-            \'stringParam\': \'string:string param value\',\n-            \'boolParam\': \'python:False\',\n-            \'contextParam\': \'context/absolute_url | string:no context\',\n-            \'requestParam\': \'request/someParam | string:off\',\n+            "stringParam": "string:string param value",\n+            "boolParam": "python:False",\n+            "contextParam": "context/absolute_url | string:no context",\n+            "requestParam": "request/someParam | string:off",\n         }\n \n         transaction.commit()\n@@ -587,41 +574,36 @@ def test_theme_params(self):\n         self.assertTrue("This is the theme" in browser.contents)\n \n         # Value of string param\n-        self.assertTrue(\'string param value\' in browser.contents)\n+        self.assertTrue("string param value" in browser.contents)\n \n         # Would be here if bool param was false\n-        self.assertFalse(\'<script>bool param on</script>\' in browser.contents)\n+        self.assertFalse("<script>bool param on</script>" in browser.contents)\n \n         # Not present in this request\n-        self.assertFalse(\n-            \'<script>request param on</script>\' in browser.contents\n-        )\n+        self.assertFalse("<script>request param on</script>" in browser.contents)\n \n         # Context was available for parameter expressions\n         self.assertTrue(\n-            \'<script id="contextParam">http://nohost/plone</script>\'\n-            in browser.contents\n+            \'<script id="contextParam">http://nohost/plone</script>\' in browser.contents\n         )\n \n         # ... but present with the request param on\n-        browser.open(portal.absolute_url() + \'?someParam=on\')\n-        self.assertTrue(\n-            \'<script>request param on</script>\' in browser.contents\n-        )\n+        browser.open(portal.absolute_url() + "?someParam=on")\n+        self.assertTrue("<script>request param on</script>" in browser.contents)\n \n     def test_theme_for_404(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n \n         transaction.commit()\n \n         browser = Browser(app)\n-        browser.addHeader(\'Accept\', \'text/html\')\n+        browser.addHeader("Accept", "text/html")\n         error = None\n         try:\n-            browser.open(f\'{portal.absolute_url():s}/404_page\')\n+            browser.open(f"{portal.absolute_url():s}/404_page")\n         except HTTPError as e:\n             error = e\n         self.assertEqual(error.code, 404)\n@@ -630,25 +612,25 @@ def test_theme_for_404(self):\n         self.assertTrue("This is the theme" in browser.contents)\n \n     def test_theme_params_on_404(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n-        self.settings.rules = \'python://plone.app.theming/tests/paramrules.xml\'  # noqa\n+        self.settings.rules = "python://plone.app.theming/tests/paramrules.xml"  # noqa\n         self.settings.parameterExpressions = {\n-            \'stringParam\': \'string:string param value\',\n-            \'boolParam\': \'python:False\',\n-            \'contextParam\': \'context/absolute_url | string:no context\',\n-            \'requestParam\': \'request/someParam | string:off\',\n+            "stringParam": "string:string param value",\n+            "boolParam": "python:False",\n+            "contextParam": "context/absolute_url | string:no context",\n+            "requestParam": "request/someParam | string:off",\n         }\n \n         transaction.commit()\n \n         browser = Browser(app)\n-        browser.addHeader(\'Accept\', \'text/html\')\n+        browser.addHeader("Accept", "text/html")\n         error = None\n         try:\n-            browser.open(f\'{portal.absolute_url():s}/404_page\')\n+            browser.open(f"{portal.absolute_url():s}/404_page")\n         except HTTPError as e:\n             error = e\n         self.assertEqual(error.code, 404)\n@@ -663,42 +645,39 @@ def test_theme_params_on_404(self):\n         self.assertTrue("This is the theme" in browser.contents)\n \n         # Value of string param\n-        self.assertTrue(\'string param value\' in browser.contents)\n+        self.assertTrue("string param value" in browser.contents)\n \n         # Would be here if bool param was false\n-        self.assertFalse(\'<script>bool param on</script>\' in browser.contents)\n+        self.assertFalse("<script>bool param on</script>" in browser.contents)\n \n         # Not present in this request\n-        self.assertFalse(\n-            \'<script>request param on</script>\' in browser.contents\n-        )\n+        self.assertFalse("<script>request param on</script>" in browser.contents)\n \n         # Context is the last found parent\n         self.assertTrue(\n-            \'<script id="contextParam">http://nohost/plone</script>\'\n-            in browser.contents\n+            \'<script id="contextParam">http://nohost/plone</script>\' in browser.contents\n         )\n \n     def test_navroot_params_on_404_widget_in_path(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n-        setRoles(portal, TEST_USER_ID, [\'Contributor\'])\n-        portal.invokeFactory(\'Folder\', \'subfolder\')\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n+        setRoles(portal, TEST_USER_ID, ["Contributor"])\n+        portal.invokeFactory("Folder", "subfolder")\n \n         self.settings.enabled = True\n         self.settings.parameterExpressions = {\n-            \'navigation_root_id\': \'python:portal_state.navigation_root().getId()\'  # noqa\n+            "navigation_root_id": "python:portal_state.navigation_root().getId()"  # noqa\n         }\n \n         transaction.commit()\n \n         browser = Browser(app)\n-        browser.addHeader(\'Accept\', \'text/html\')\n+        browser.addHeader("Accept", "text/html")\n         error = None\n         try:\n             browser.open(\n-                \'{:s}/widget/oauth_login/info.txt\'.format(\n-                    portal[\'subfolder\'].absolute_url()\n+                "{:s}/widget/oauth_login/info.txt".format(\n+                    portal["subfolder"].absolute_url()\n                 )\n             )\n         except HTTPError as e:\n@@ -759,29 +738,29 @@ def test_navroot_params_on_404_widget_in_path(self):\n     #     self.assertTrue("This is the theme" in browser.contents)\n \n     def test_includes(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n-        setRoles(portal, TEST_USER_ID, (\'Manager\',))\n+        setRoles(portal, TEST_USER_ID, ("Manager",))\n \n         # Create some test content in the portal root\n         here = os.path.split(__file__)[0]\n-        with open(os.path.join(here, \'one.html\')) as one:\n-            portal.manage_addDTMLMethod(\'alpha\', file=one)\n-        with open(os.path.join(here, \'two.html\')) as two:\n-            portal.manage_addDTMLMethod(\'beta\', file=two)\n+        with open(os.path.join(here, "one.html")) as one:\n+            portal.manage_addDTMLMethod("alpha", file=one)\n+        with open(os.path.join(here, "two.html")) as two:\n+            portal.manage_addDTMLMethod("beta", file=two)\n \n         # Create some different content in a subfolder\n-        portal.invokeFactory(\'Folder\', \'subfolder\')\n-        portal.portal_workflow.doActionFor(portal.subfolder, \'publish\')\n+        portal.invokeFactory("Folder", "subfolder")\n+        portal.portal_workflow.doActionFor(portal.subfolder, "publish")\n \n-        with open(os.path.join(here, \'one.html\')) as one:\n-            portal[\'subfolder\'].manage_addDTMLMethod(\'beta\', file=one)\n-        with open(os.path.join(here, \'two.html\')) as two:\n-            portal[\'subfolder\'].manage_addDTMLMethod(\'alpha\', file=two)\n+        with open(os.path.join(here, "one.html")) as one:\n+            portal["subfolder"].manage_addDTMLMethod("beta", file=one)\n+        with open(os.path.join(here, "two.html")) as two:\n+            portal["subfolder"].manage_addDTMLMethod("alpha", file=two)\n \n         # Set up transformation\n-        self.settings.rules = \'python://plone.app.theming/tests/includes.xml\'\n+        self.settings.rules = "python://plone.app.theming/tests/includes.xml"\n         self.settings.enabled = True\n \n         transaction.commit()\n@@ -798,7 +777,7 @@ def test_includes(self):\n \n         # In the subfolder, we\'ve reversed alpha and beta. We should now get\n         # \'one\' twice, since we still get alpha from the site root.\n-        browser.open(portal[\'subfolder\'].absolute_url())\n+        browser.open(portal["subfolder"].absolute_url())\n         self.assertTrue(\'<div id="alpha">Number one</div>\' in browser.contents)\n         self.assertTrue(\'<div id="beta">Number one</div>\' in browser.contents)\n \n@@ -811,18 +790,18 @@ def test_include_non_ascii(self):\n         # u\'Actualit\\xe9s\'\n         # \'Actualit&#195;&#169;s\'\n \n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n-        setRoles(portal, TEST_USER_ID, (\'Manager\',))\n+        setRoles(portal, TEST_USER_ID, ("Manager",))\n \n         # Create some test content in the portal root\n         here = os.path.split(__file__)[0]\n-        with open(os.path.join(here, \'french.html\'), "rb") as french:\n-            portal.manage_addDTMLMethod(\'french\', file=french)\n+        with open(os.path.join(here, "french.html"), "rb") as french:\n+            portal.manage_addDTMLMethod("french", file=french)\n \n         # Set up transformation\n-        self.settings.rules = \'python://plone.app.theming/tests/nonascii.xml\'\n+        self.settings.rules = "python://plone.app.theming/tests/nonascii.xml"\n         self.settings.enabled = True\n \n         transaction.commit()\n@@ -838,12 +817,11 @@ def test_include_non_ascii(self):\n         self.assertIn(\'<div id="content">Actualit\\xe9s</div>\', browser.contents)\n \n     def test_css_js_includes(self):\n-\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n-        self.settings.rules = \'/++theme++plone.app.theming.tests/css-js.xml\'\n+        self.settings.rules = "/++theme++plone.app.theming.tests/css-js.xml"\n         transaction.commit()\n \n         browser = Browser(app)\n@@ -851,42 +829,41 @@ def test_css_js_includes(self):\n \n         # CSS - pulled in with rules\n         self.assertTrue(\n-            \'\'\'<style type="text/css">/* A CSS file */\\n</style>\'\'\'\n-            in browser.contents)\n+            """<style type="text/css">/* A CSS file */\\n</style>""" in browser.contents\n+        )\n \n         # JS pulled in with rules\n         self.assertTrue(\n-            \'\'\'<script type="text/javascript">/* A JS file */\\n</script>\'\'\'\n-            in browser.contents)\n+            """<script type="text/javascript">/* A JS file */\\n</script>"""\n+            in browser.contents\n+        )\n \n     def test_non_ascii_includes(self):\n-\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n-        self.settings.rules = \'/++theme++plone.app.theming.tests/nonascii.xml\'\n+        self.settings.rules = "/++theme++plone.app.theming.tests/nonascii.xml"\n         transaction.commit()\n \n         browser = Browser(app)\n         browser.open(portal.absolute_url())\n \n         # browser.contents is always string.  On Py 2 this means bytes, on Py 3 text.\n-        self.assertIn(\'<div>N\\xfamero uno</div>\', browser.contents)\n-\n+        self.assertIn("<div>N\\xfamero uno</div>", browser.contents)\n \n     def test_theme_enabled_query_string_debug_switch(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n         transaction.commit()\n \n         browser = Browser(app)\n-        browser.open(portal.absolute_url() + \'?diazo.debug=1\')\n+        browser.open(portal.absolute_url() + "?diazo.debug=1")\n \n         # Title - pulled in with rules.xml\n         self.assertTrue(portal.title in browser.contents)\n \n         # The theme\n-        self.assertTrue("id=\\"diazo-debug-iframe\\"" in browser.contents)\n+        self.assertTrue(\'id="diazo-debug-iframe"\' in browser.contents)\ndiff --git a/src/plone/app/theming/tests/test_utils.py b/src/plone/app/theming/tests/test_utils.py\nindex 49b4995..7baa55b 100644\n--- a/src/plone/app/theming/tests/test_utils.py\n+++ b/src/plone/app/theming/tests/test_utils.py\n@@ -34,7 +34,6 @@\n \n \n class TestIntegration(unittest.TestCase):\n-\n     layer = THEMING_INTEGRATION_TESTING\n \n     def test_getOrCreatePersistentResourceDirectory_new(self):\n@@ -65,22 +64,15 @@ def test_getAvailableThemes(self):\n         themes = getAvailableThemes()\n \n         self.assertTrue(len(themes) >= 3)\n-        theme = getTheme(\'plone.app.theming.tests\')\n+        theme = getTheme("plone.app.theming.tests")\n         self.assertTrue(theme is not None)\n-        self.assertEqual(theme.__name__, \'plone.app.theming.tests\')\n-        self.assertEqual(theme.title, \'Test theme\')\n-        self.assertEqual(theme.description, \'A theme for testing\')\n-        self.assertEqual(\n-            theme.rules,\n-            \'/++theme++plone.app.theming.tests/rules.xml\'\n-        )\n+        self.assertEqual(theme.__name__, "plone.app.theming.tests")\n+        self.assertEqual(theme.title, "Test theme")\n+        self.assertEqual(theme.description, "A theme for testing")\n+        self.assertEqual(theme.rules, "/++theme++plone.app.theming.tests/rules.xml")\n+        self.assertEqual(theme.absolutePrefix, "/++theme++plone.app.theming.tests")\n         self.assertEqual(\n-            theme.absolutePrefix,\n-            \'/++theme++plone.app.theming.tests\'\n-        )\n-        self.assertEqual(\n-            theme.parameterExpressions,\n-            {\'foo\': "python:request.get(\'bar\')"}\n+            theme.parameterExpressions, {"foo": "python:request.get(\'bar\')"}\n         )\n         self.assertEqual(theme.doctype, "<!DOCTYPE html>")\n \n@@ -92,9 +84,9 @@ def test_getZODBThemes(self):\n \n         import os.path\n         import zipfile\n-        path = os.path.join(\n-            os.path.dirname(__file__), \'zipfiles\', \'default_rules.zip\')\n-        with open(path, \'rb\') as fp:\n+\n+        path = os.path.join(os.path.dirname(__file__), "zipfiles", "default_rules.zip")\n+        with open(path, "rb") as fp:\n             zf = zipfile.ZipFile(fp)\n \n             themeContainer = getOrCreatePersistentResourceDirectory()\n@@ -104,15 +96,9 @@ def test_getZODBThemes(self):\n \n             self.assertEqual(len(zodbThemes), 1)\n \n-            self.assertEqual(zodbThemes[0].__name__, \'default_rules\')\n-            self.assertEqual(\n-                zodbThemes[0].rules,\n-                \'/++theme++default_rules/rules.xml\'\n-            )\n-            self.assertEqual(\n-                zodbThemes[0].absolutePrefix,\n-                \'/++theme++default_rules\'\n-            )\n+            self.assertEqual(zodbThemes[0].__name__, "default_rules")\n+            self.assertEqual(zodbThemes[0].rules, "/++theme++default_rules/rules.xml")\n+            self.assertEqual(zodbThemes[0].absolutePrefix, "/++theme++default_rules")\n \n     def test_applyTheme(self):\n         from plone.app.theming.interfaces import IThemeSettings\n@@ -133,10 +119,7 @@ def test_applyTheme(self):\n \n         self.assertEqual(settings.rules, theme.rules)\n         self.assertEqual(settings.absolutePrefix, theme.absolutePrefix)\n-        self.assertEqual(\n-            settings.parameterExpressions,\n-            theme.parameterExpressions\n-        )\n+        self.assertEqual(settings.parameterExpressions, theme.parameterExpressions)\n         self.assertEqual(settings.doctype, theme.doctype)\n \n     def test_applyTheme_None(self):\n@@ -167,7 +150,7 @@ def test_isThemeEnabled(self):\n         settings.enabled = True\n         settings.rules = "/++theme++foo/rules.xml"\n \n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n \n         self.assertTrue(isThemeEnabled(request, settings))\n \n@@ -181,14 +164,14 @@ def test_isThemeEnabled_blacklist(self):\n         settings.enabled = True\n         settings.rules = "/++theme++foo/rules.xml"\n \n-        request = self.layer[\'request\']\n-        request.set(\'BASE1\', \'http://nohost/path/to/site\')\n+        request = self.layer["request"]\n+        request.set("BASE1", "http://nohost/path/to/site")\n \n         self.assertTrue(isThemeEnabled(request, settings))\n-        self.assertEqual(request.get(\'SERVER_URL\'), \'http://nohost\')\n+        self.assertEqual(request.get("SERVER_URL"), "http://nohost")\n \n         # Should pay no attention to BASE1 and only use SERVER_URL\n-        settings.hostnameBlacklist.append(\'nohost\')\n+        settings.hostnameBlacklist.append("nohost")\n         self.assertFalse(isThemeEnabled(request, settings))\n \n     def test_createThemeFromTemplate(self):\n@@ -197,21 +180,24 @@ def test_createThemeFromTemplate(self):\n         from plone.app.theming.utils import createThemeFromTemplate\n         from plone.app.theming.utils import getAvailableThemes\n         from plone.app.theming.utils import getTheme\n+\n         title = "copy of test theme"\n         description = "test theme creation"\n-        themeName = createThemeFromTemplate(title, description,\n-                                            baseOn="plone.app.theming.tests")\n+        themeName = createThemeFromTemplate(\n+            title, description, baseOn="plone.app.theming.tests"\n+        )\n         titles = [theme.title for theme in getAvailableThemes()]\n         self.assertTrue(title in titles)\n \n         theme = getTheme(themeName)\n-        expected_prefix = "/++{}++{}".format(THEME_RESOURCE_NAME,\n-                                          title.replace(" ", "-"))\n+        expected_prefix = "/++{}++{}".format(\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n         self.assertEqual(theme.absolutePrefix, expected_prefix)\n \n-        expected_rules = "/++{}++{}/{}".format(THEME_RESOURCE_NAME,\n-                                            title.replace(" ", "-"),\n-                                            RULE_FILENAME)\n+        expected_rules = "/++{}++{}/{}".format(\n+            THEME_RESOURCE_NAME, title.replace(" ", "-"), RULE_FILENAME\n+        )\n         self.assertEqual(theme.rules, expected_rules)\n \n     def test_createThemeFromTemplate_custom_prefix(self):\n@@ -220,35 +206,40 @@ def test_createThemeFromTemplate_custom_prefix(self):\n         from plone.app.theming.utils import createThemeFromTemplate\n         from plone.app.theming.utils import getAvailableThemes\n         from plone.app.theming.utils import getTheme\n+\n         title = "copy of test theme with custom prefix"\n         description = "test theme creation"\n-        themeName = createThemeFromTemplate(title, description,\n-                                            baseOn="secondary-theme")\n+        themeName = createThemeFromTemplate(\n+            title, description, baseOn="secondary-theme"\n+        )\n         titles = [theme.title for theme in getAvailableThemes()]\n         self.assertTrue(title in titles)\n \n         theme = getTheme(themeName)\n-        expected_prefix = "/++{}++{}".format(THEME_RESOURCE_NAME,\n-                                          title.replace(" ", "-"))\n+        expected_prefix = "/++{}++{}".format(\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n         self.assertEqual(theme.absolutePrefix, expected_prefix)\n \n-        expected_rules = "/++{}++{}/{}".format(THEME_RESOURCE_NAME,\n-                                            title.replace(" ", "-"),\n-                                            RULE_FILENAME)\n+        expected_rules = "/++{}++{}/{}".format(\n+            THEME_RESOURCE_NAME, title.replace(" ", "-"), RULE_FILENAME\n+        )\n         self.assertEqual(theme.rules, expected_rules)\n \n-        self.assertEqual(theme.enabled_bundles, [\'plone\'])\n-        self.assertEqual(theme.disabled_bundles, [\'foobar\'])\n+        self.assertEqual(theme.enabled_bundles, ["plone"])\n+        self.assertEqual(theme.disabled_bundles, ["foobar"])\n \n         expected_dev_css = "/++{}++{}/css/barceloneta.css".format(\n-            THEME_RESOURCE_NAME, title.replace(" ", "-"))\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n         expected_prod_css = "/++{}++{}/css/barceloneta.min.css".format(\n-            THEME_RESOURCE_NAME, title.replace(" ", "-"))\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n         expected_tinymce_content_css = "/++{}++{}/css/barceloneta.min.css".format(\n-            THEME_RESOURCE_NAME, title.replace(" ", "-"))\n-        expected_tinymce_styles_css = (\n-            "/++{}++{}/css/custom-format-styles.css".format(\n-                THEME_RESOURCE_NAME, title.replace(" ", "-"))\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n+        expected_tinymce_styles_css = "/++{}++{}/css/custom-format-styles.css".format(\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n         )\n         self.assertEqual(theme.development_css, expected_dev_css)\n         self.assertEqual(theme.production_css, expected_prod_css)\n@@ -256,9 +247,11 @@ def test_createThemeFromTemplate_custom_prefix(self):\n         self.assertEqual(theme.tinymce_styles_css, expected_tinymce_styles_css)\n \n         expected_dev_js = "/++{}++{}/script.js".format(\n-            THEME_RESOURCE_NAME, title.replace(" ", "-"))\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n         expected_prod_js = "/++{}++{}/script.min.js".format(\n-            THEME_RESOURCE_NAME, title.replace(" ", "-"))\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n         self.assertEqual(theme.development_js, expected_dev_js)\n         self.assertEqual(theme.production_js, expected_prod_js)\n \n@@ -268,35 +261,38 @@ def test_createThemeFromTemplate_rel_path(self):\n         from plone.app.theming.utils import createThemeFromTemplate\n         from plone.app.theming.utils import getAvailableThemes\n         from plone.app.theming.utils import getTheme\n+\n         title = "copy of test theme with custom prefix"\n         description = "test theme creation"\n-        themeName = createThemeFromTemplate(title, description,\n-                                            baseOn="another-theme")\n+        themeName = createThemeFromTemplate(title, description, baseOn="another-theme")\n         titles = [theme.title for theme in getAvailableThemes()]\n         self.assertTrue(title in titles)\n \n         theme = getTheme(themeName)\n-        expected_prefix = "/++{}++{}".format(THEME_RESOURCE_NAME,\n-                                          title.replace(" ", "-"))\n+        expected_prefix = "/++{}++{}".format(\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n         self.assertEqual(theme.absolutePrefix, expected_prefix)\n \n-        expected_rules = "/++{}++{}/{}".format(THEME_RESOURCE_NAME,\n-                                           title.replace(" ", "-"),\n-                                           RULE_FILENAME)\n+        expected_rules = "/++{}++{}/{}".format(\n+            THEME_RESOURCE_NAME, title.replace(" ", "-"), RULE_FILENAME\n+        )\n         self.assertEqual(theme.rules, expected_rules)\n \n-        self.assertEqual(theme.enabled_bundles, [\'plone\'])\n-        self.assertEqual(theme.disabled_bundles, [\'foobar\'])\n+        self.assertEqual(theme.enabled_bundles, ["plone"])\n+        self.assertEqual(theme.disabled_bundles, ["foobar"])\n \n         expected_dev_css = "++{}++{}/css/barceloneta.css".format(\n-            THEME_RESOURCE_NAME, title.replace(" ", "-"))\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n         expected_prod_css = "++{}++{}/css/barceloneta.min.css".format(\n-            THEME_RESOURCE_NAME, title.replace(" ", "-"))\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n         expected_tinymce_content_css = "++{}++{}/css/barceloneta.min.css".format(\n-            THEME_RESOURCE_NAME, title.replace(" ", "-"))\n-        expected_tinymce_styles_css = (\n-            "++{}++{}/css/custom-format-styles.css".format(\n-                THEME_RESOURCE_NAME, title.replace(" ", "-"))\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n+        expected_tinymce_styles_css = "++{}++{}/css/custom-format-styles.css".format(\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n         )\n         self.assertEqual(theme.development_css, expected_dev_css)\n         self.assertEqual(theme.production_css, expected_prod_css)\n@@ -304,157 +300,138 @@ def test_createThemeFromTemplate_rel_path(self):\n         self.assertEqual(theme.tinymce_styles_css, expected_tinymce_styles_css)\n \n         expected_dev_js = "++{}++{}/script.js".format(\n-            THEME_RESOURCE_NAME, title.replace(" ", "-"))\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n         expected_prod_js = "++{}++{}/script.min.js".format(\n-            THEME_RESOURCE_NAME, title.replace(" ", "-"))\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n         self.assertEqual(theme.development_js, expected_dev_js)\n         self.assertEqual(theme.production_js, expected_prod_js)\n \n     def test_createThemeFromTemplate_ja_str_title(self):\n         from plone.app.theming.utils import createThemeFromTemplate\n+\n         title = "copy of test theme by \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e"\n         description = "test theme by \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e"\n         try:\n-            createThemeFromTemplate(title, description,\n-                                            baseOn="another-theme")\n+            createThemeFromTemplate(title, description, baseOn="another-theme")\n         except UnicodeEncodeError:\n             self.fail(msg="Unicode Encode Error")\n \n     def test_createThemeFromTemplate_ja_unicode_title(self):\n         from plone.app.theming.utils import createThemeFromTemplate\n+\n         title = "copy of test theme by \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e"\n         description = "test theme by \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e"\n         try:\n-            createThemeFromTemplate(title, description,\n-                                            baseOn="another-theme")\n+            createThemeFromTemplate(title, description, baseOn="another-theme")\n         except UnicodeEncodeError:\n             self.fail(msg="Unicode Encode Error")\n \n \n class TestUnit(unittest.TestCase):\n-\n     def _open_zipfile(self, filename):\n-        \'\'\' Helper that opens a zip file in our test directory\n-        \'\'\'\n-        path = os.path.join(os.path.dirname(__file__), \'zipfiles\', filename)\n-        return open(path, \'rb\')\n+        """Helper that opens a zip file in our test directory"""\n+        path = os.path.join(os.path.dirname(__file__), "zipfiles", filename)\n+        return open(path, "rb")\n \n     def test_extractThemeInfo_default_rules(self):\n-        with self._open_zipfile(\'default_rules.zip\') as fp:\n+        with self._open_zipfile("default_rules.zip") as fp:\n             zf = zipfile.ZipFile(fp)\n \n             theme = extractThemeInfo(zf)\n \n-            self.assertEqual(theme.__name__, \'default_rules\')\n-            self.assertEqual(theme.rules, \'/++theme++default_rules/rules.xml\')\n-            self.assertEqual(theme.absolutePrefix, \'/++theme++default_rules\')\n+            self.assertEqual(theme.__name__, "default_rules")\n+            self.assertEqual(theme.rules, "/++theme++default_rules/rules.xml")\n+            self.assertEqual(theme.absolutePrefix, "/++theme++default_rules")\n \n     def test_extractThemeInfo_manifest_rules(self):\n-        with self._open_zipfile(\'manifest_rules.zip\') as fp:\n+        with self._open_zipfile("manifest_rules.zip") as fp:\n             zf = zipfile.ZipFile(fp)\n \n             theme = extractThemeInfo(zf)\n \n-            self.assertEqual(theme.__name__, \'manifest_rules\')\n-            self.assertEqual(theme.rules, \'other.xml\')\n-            self.assertEqual(theme.absolutePrefix, \'/++theme++manifest_rules\')\n-            self.assertEqual(theme.title, \'Test theme\')\n+            self.assertEqual(theme.__name__, "manifest_rules")\n+            self.assertEqual(theme.rules, "other.xml")\n+            self.assertEqual(theme.absolutePrefix, "/++theme++manifest_rules")\n+            self.assertEqual(theme.title, "Test theme")\n \n     def test_extractThemeInfo_manifest_prefix(self):\n-        with self._open_zipfile(\'manifest_prefix.zip\') as fp:\n+        with self._open_zipfile("manifest_prefix.zip") as fp:\n             zf = zipfile.ZipFile(fp)\n \n             theme = extractThemeInfo(zf)\n \n-            self.assertEqual(theme.__name__, \'manifest_prefix\')\n-            self.assertEqual(\n-                theme.rules,\n-                \'/++theme++manifest_prefix/rules.xml\'\n-            )\n-            self.assertEqual(theme.absolutePrefix, \'/foo\')\n-            self.assertEqual(theme.title,  \'Test theme\')\n+            self.assertEqual(theme.__name__, "manifest_prefix")\n+            self.assertEqual(theme.rules, "/++theme++manifest_prefix/rules.xml")\n+            self.assertEqual(theme.absolutePrefix, "/foo")\n+            self.assertEqual(theme.title, "Test theme")\n \n     def test_extractThemeInfo_manifest_default_rules(self):\n-        with self._open_zipfile(\'manifest_default_rules.zip\') as fp:\n+        with self._open_zipfile("manifest_default_rules.zip") as fp:\n             zf = zipfile.ZipFile(fp)\n \n             theme = extractThemeInfo(zf)\n \n-            self.assertEqual(theme.__name__, \'manifest_default_rules\')\n-            self.assertEqual(\n-                theme.rules,\n-                \'/++theme++manifest_default_rules/rules.xml\'\n-            )\n-            self.assertEqual(\n-                theme.absolutePrefix,\n-                \'/++theme++manifest_default_rules\'\n-            )\n-            self.assertEqual(theme.title,  \'Test theme\')\n+            self.assertEqual(theme.__name__, "manifest_default_rules")\n+            self.assertEqual(theme.rules, "/++theme++manifest_default_rules/rules.xml")\n+            self.assertEqual(theme.absolutePrefix, "/++theme++manifest_default_rules")\n+            self.assertEqual(theme.title, "Test theme")\n \n     def test_extractThemeInfo_manifest_preview(self):\n-        with self._open_zipfile(\'manifest_preview.zip\') as fp:\n+        with self._open_zipfile("manifest_preview.zip") as fp:\n             zf = zipfile.ZipFile(fp)\n \n             theme = extractThemeInfo(zf)\n \n-            self.assertEqual(theme.__name__, \'manifest_preview\')\n-            self.assertEqual(\n-                theme.rules,\n-                \'/++theme++manifest_preview/rules.xml\'\n-            )\n-            self.assertEqual(\n-                theme.absolutePrefix,\n-                \'/++theme++manifest_preview\'\n-            )\n-            self.assertEqual(theme.title,  \'Test theme\')\n-            self.assertEqual(theme.preview,  \'preview.png\')\n+            self.assertEqual(theme.__name__, "manifest_preview")\n+            self.assertEqual(theme.rules, "/++theme++manifest_preview/rules.xml")\n+            self.assertEqual(theme.absolutePrefix, "/++theme++manifest_preview")\n+            self.assertEqual(theme.title, "Test theme")\n+            self.assertEqual(theme.preview, "preview.png")\n \n     def test_extractThemeInfo_manifest_default_rules_override(self):\n-        with self._open_zipfile(\'manifest_default_rules_override.zip\') as fp:\n+        with self._open_zipfile("manifest_default_rules_override.zip") as fp:\n             zf = zipfile.ZipFile(fp)\n \n             theme = extractThemeInfo(zf)\n \n-            self.assertEqual(theme.__name__, \'manifest_default_rules_override\')\n-            self.assertEqual(theme.rules, \'other.xml\')\n+            self.assertEqual(theme.__name__, "manifest_default_rules_override")\n+            self.assertEqual(theme.rules, "other.xml")\n             self.assertEqual(\n-                theme.absolutePrefix,\n-                \'/++theme++manifest_default_rules_override\'\n+                theme.absolutePrefix, "/++theme++manifest_default_rules_override"\n             )\n-            self.assertEqual(theme.title,  \'Test theme\')\n+            self.assertEqual(theme.title, "Test theme")\n \n     def test_extractThemeInfo_nodir(self):\n-        with self._open_zipfile(\'nodir.zip\') as fp:\n+        with self._open_zipfile("nodir.zip") as fp:\n             zf = zipfile.ZipFile(fp)\n             self.assertRaises(ValueError, extractThemeInfo, zf)\n \n     def test_extractThemeInfo_multiple_dir(self):\n-        with self._open_zipfile(\'multiple_dir.zip\') as fp:\n+        with self._open_zipfile("multiple_dir.zip") as fp:\n             zf = zipfile.ZipFile(fp)\n             self.assertRaises(ValueError, extractThemeInfo, zf)\n \n     def test_extractThemeInfo_ignores_dotfiles_resource_forks(self):\n-        with self._open_zipfile(\'ignores_dotfiles_resource_forks.zip\') as fp:\n+        with self._open_zipfile("ignores_dotfiles_resource_forks.zip") as fp:\n             zf = zipfile.ZipFile(fp)\n \n             theme = extractThemeInfo(zf)\n \n-            self.assertEqual(theme.__name__, \'default_rules\')\n-            self.assertEqual(theme.rules, \'/++theme++default_rules/rules.xml\')\n-            self.assertEqual(theme.absolutePrefix, \'/++theme++default_rules\')\n+            self.assertEqual(theme.__name__, "default_rules")\n+            self.assertEqual(theme.rules, "/++theme++default_rules/rules.xml")\n+            self.assertEqual(theme.absolutePrefix, "/++theme++default_rules")\n \n     def test_extractThemeInfo_with_subdirectories(self):\n-        with self._open_zipfile(\'subdirectories.zip\') as fp:\n+        with self._open_zipfile("subdirectories.zip") as fp:\n             zf = zipfile.ZipFile(fp)\n \n             theme = extractThemeInfo(zf)\n \n-            self.assertEqual(theme.__name__, \'subdirectories\')\n-            self.assertEqual(\n-                theme.rules,\n-                \'/++theme++subdirectories/rules.xml\'\n-            )\n-            self.assertEqual(theme.absolutePrefix, \'/++theme++subdirectories\')\n+            self.assertEqual(theme.__name__, "subdirectories")\n+            self.assertEqual(theme.rules, "/++theme++subdirectories/rules.xml")\n+            self.assertEqual(theme.absolutePrefix, "/++theme++subdirectories")\n \n \n class TestAttackVector(unittest.TestCase):\n@@ -562,9 +539,7 @@ def test_theme_python_protocol(self):\n         # Since our example rules file is in a Python package,\n         # we can use the python resolver to access it.\n         # I don\'t think we can avoid this.\n-        self.new_theme(\n-            "python://plone.app.theming/tests/" + PACKAGE_THEME_FILENAME\n-        )\n+        self.new_theme("python://plone.app.theming/tests/" + PACKAGE_THEME_FILENAME)\n         with open(PACKAGE_THEME) as myfile:\n             contents = myfile.read()\n         browser = self.get_anon_browser()\ndiff --git a/src/plone/app/theming/theme.py b/src/plone/app/theming/theme.py\nindex f18be8e..14e7cff 100644\n--- a/src/plone/app/theming/theme.py\n+++ b/src/plone/app/theming/theme.py\n@@ -4,8 +4,7 @@\n \n @implementer(ITheme)\n class Theme:\n-    """A theme, loaded from a resource directory\n-    """\n+    """A theme, loaded from a resource directory"""\n \n     def __init__(\n         self,\n@@ -19,14 +18,13 @@ def __init__(\n         preview=None,\n         enabled_bundles=[],\n         disabled_bundles=[],\n-        development_css=\'\',\n-        development_js=\'\',\n-        production_css=\'\',\n-        production_js=\'\',\n-        tinymce_content_css=\'\',\n-        tinymce_styles_css=\'\'\n+        development_css="",\n+        development_js="",\n+        production_css="",\n+        production_js="",\n+        tinymce_content_css="",\n+        tinymce_styles_css="",\n     ):\n-\n         self.__name__ = name\n         self.rules = rules\n         self.title = title\ndiff --git a/src/plone/app/theming/transform.py b/src/plone/app/theming/transform.py\nindex 72a0f35..eb388d5 100644\n--- a/src/plone/app/theming/transform.py\n+++ b/src/plone/app/theming/transform.py\n@@ -20,7 +20,7 @@\n # Disable theming of ZMI\n patch_zmi()\n \n-LOGGER = logging.getLogger(\'plone.app.theming\')\n+LOGGER = logging.getLogger("plone.app.theming")\n \n \n @implementer(ITransform)\n@@ -37,24 +37,24 @@ def __init__(self, published, request):\n         self.request = request\n \n     def debug_theme(self):\n-        \'\'\' Check if the theme should be debugged\n+        """Check if the theme should be debugged\n         We will debug the theme\n         when we have a truish diazo.debug parameter in the request\n-        \'\'\'\n+        """\n         if not getConfiguration().debug_mode:\n             return False\n-        diazo_debug = self.request.get(\'diazo.debug\', \'\').lower()\n-        return diazo_debug in (\'1\', \'y\', \'yes\', \'t\', \'true\')\n+        diazo_debug = self.request.get("diazo.debug", "").lower()\n+        return diazo_debug in ("1", "y", "yes", "t", "true")\n \n     def develop_theme(self):\n-        \'\'\' Check if the theme should be recompiled\n+        """Check if the theme should be recompiled\n         every time the transform is applied\n-        \'\'\'\n+        """\n         if not getConfiguration().debug_mode:\n             return False\n         if self.debug_theme():\n             return True\n-        if environ.get(\'DIAZO_ALWAYS_CACHE_RULES\'):\n+        if environ.get("DIAZO_ALWAYS_CACHE_RULES"):\n             return False\n         return True\n \n@@ -93,7 +93,7 @@ def setupTransform(self, runtrace=False):\n                 absolutePrefix,\n                 readNetwork,\n                 parameterExpressions,\n-                runtrace=runtrace\n+                runtrace=runtrace,\n             )\n             if transform is None:\n                 return None\n@@ -107,13 +107,16 @@ def getSettings(self):\n         return theming_policy(self.request).getSettings()\n \n     def parseTree(self, result):\n-        contentType = self.request.response.getHeader(\'Content-Type\')\n-        if contentType is None or not contentType.startswith(\'text/html\'):\n+        contentType = self.request.response.getHeader("Content-Type")\n+        if contentType is None or not contentType.startswith("text/html"):\n             return None\n \n-        contentEncoding = self.request.response.getHeader(\'Content-Encoding\')\n-        if contentEncoding \\\n-           and contentEncoding in (\'zip\', \'deflate\', \'compress\',):\n+        contentEncoding = self.request.response.getHeader("Content-Encoding")\n+        if contentEncoding and contentEncoding in (\n+            "zip",\n+            "deflate",\n+            "compress",\n+        ):\n             return None\n \n         try:\n@@ -138,8 +141,7 @@ def transformUnicode(self, result, encoding):\n         return self.transformIterable([result], encoding)\n \n     def transformIterable(self, result, encoding):\n-        """Apply the transform if required\n-        """\n+        """Apply the transform if required"""\n         # Obtain settings. Do nothing if not found\n         policy = theming_policy(self.request)\n         if not policy.isThemeEnabled():\n@@ -160,8 +162,8 @@ def transformIterable(self, result, encoding):\n \n             if settings.doctype:\n                 result.doctype = settings.doctype\n-                if not result.doctype.endswith(\'\\n\'):\n-                    result.doctype += \'\\n\'\n+                if not result.doctype.endswith("\\n"):\n+                    result.doctype += "\\n"\n \n             transform = self.setupTransform(runtrace=runtrace)\n             if transform is None:\n@@ -173,10 +175,7 @@ def transformIterable(self, result, encoding):\n \n             parameterExpressions = settings.parameterExpressions or {}\n             params = prepareThemeParameters(\n-                findContext(self.request),\n-                self.request,\n-                parameterExpressions,\n-                cache\n+                findContext(self.request), self.request, parameterExpressions, cache\n             )\n \n             transformed = transform(result.tree, **params)\n@@ -185,7 +184,7 @@ def transformIterable(self, result, encoding):\n                 # Transformed worked, swap content with result\n                 result.tree = transformed\n         except etree.LxmlError as e:\n-            if not(debug_mode):\n+            if not (debug_mode):\n                 raise\n             error_log = e.error_log\n             runtrace = True\n@@ -194,17 +193,17 @@ def transformIterable(self, result, encoding):\n             from diazo.runtrace import generate_debug_html\n \n             # Add debug information to end of body\n-            body = result.tree.xpath(\'/html/body\')[0]\n-            debug_url = findContext(\n-                self.request\n-            ).portal_url() + \'/++resource++diazo-debug\'\n+            body = result.tree.xpath("/html/body")[0]\n+            debug_url = (\n+                findContext(self.request).portal_url() + "/++resource++diazo-debug"\n+            )\n             body.insert(\n                 -1,\n                 generate_debug_html(\n                     debug_url,\n                     rules=settings.rules,\n-                    rules_parser=getParser(\'rules\', settings.readNetwork),\n+                    rules_parser=getParser("rules", settings.readNetwork),\n                     error_log=error_log,\n-                )\n+                ),\n             )\n         return result\ndiff --git a/src/plone/app/theming/traversal.py b/src/plone/app/theming/traversal.py\nindex bf76f6a..4655818 100644\n--- a/src/plone/app/theming/traversal.py\n+++ b/src/plone/app/theming/traversal.py\n@@ -22,7 +22,7 @@ def current_theme(self):\n         return theming_policy(self.request).getCurrentTheme()\n \n     def traverse(self, name, remaining):\n-        if name == \'\':\n+        if name == "":\n             name = self.current_theme()\n \n         # Note: also fixes possible unicode problems\ndiff --git a/src/plone/app/theming/upgrade.py b/src/plone/app/theming/upgrade.py\nindex c136e2e..616eb64 100644\n--- a/src/plone/app/theming/upgrade.py\n+++ b/src/plone/app/theming/upgrade.py\n@@ -6,14 +6,10 @@\n \n def update_registry(context, logger=None):\n     # Run the registry.xml step as that may have defined new attributes\n-    setup = getToolByName(context, \'portal_setup\')\n-    setup.runImportStepFromProfile(PROFILE_ID, \'plone.app.registry\')\n+    setup = getToolByName(context, "portal_setup")\n+    setup.runImportStepFromProfile(PROFILE_ID, "plone.app.registry")\n \n \n def update_controlpanel(context, logger=None):\n-    setup = getToolByName(context, \'portal_setup\')\n-    setup.runImportStepFromProfile(\n-        PROFILE_ID,\n-        \'controlpanel\',\n-        run_dependencies=False\n-    )\n+    setup = getToolByName(context, "portal_setup")\n+    setup.runImportStepFromProfile(PROFILE_ID, "controlpanel", run_dependencies=False)\ndiff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py\nindex a760b0a..563a05c 100644\n--- a/src/plone/app/theming/utils.py\n+++ b/src/plone/app/theming/utils.py\n@@ -39,7 +39,7 @@\n import pkg_resources\n \n \n-LOGGER = logging.getLogger(\'plone.app.theming\')\n+LOGGER = logging.getLogger("plone.app.theming")\n \n \n @implementer(INoRequest)\n@@ -64,8 +64,9 @@ class FailingFileProtocolResolver(etree.Resolver):\n     Note: an earlier version only checked for "file://", not "file:",\n     and did not catch relative paths.\n     """\n+\n     def resolve(self, system_url, public_id, context):\n-        if system_url.startswith(\'file:\') and system_url != \'file:///__diazo__\':\n+        if system_url.startswith("file:") and system_url != "file:///__diazo__":\n             # The error will be caught by lxml and we only see this in the traceback:\n             # XIncludeError: could not load <system_url>, and no fallback was found\n             raise ValueError("File protocol access not allowed: \'%s\'" % system_url)\n@@ -103,6 +104,7 @@ class FailingFileSystemResolver(etree.Resolver):\n     our resolver should return nothing.\n     Then the InternalResolver or other resolvers can have a go.\n     """\n+\n     def resolve(self, system_url, public_id, context):\n         if system_url and os.path.exists(system_url):\n             # The error will be caught by lxml and we only see this in the traceback:\n@@ -111,19 +113,18 @@ def resolve(self, system_url, public_id, context):\n \n \n class NetworkResolver(etree.Resolver):\n-    """Resolver for network urls\n-    """\n+    """Resolver for network urls"""\n+\n     def resolve(self, system_url, public_id, context):\n-        if \'://\' in system_url and system_url != \'file:///__diazo__\':\n+        if "://" in system_url and system_url != "file:///__diazo__":\n             return self.resolve_filename(system_url, context)\n \n \n class PythonResolver(etree.Resolver):\n-    """Resolver for python:// paths\n-    """\n+    """Resolver for python:// paths"""\n \n     def resolve(self, system_url, public_id, context):\n-        if not system_url.lower().startswith(\'python://\'):\n+        if not system_url.lower().startswith("python://"):\n             return None\n         filename = resolvePythonURL(system_url)\n         return self.resolve_filename(filename, context)\n@@ -133,9 +134,9 @@ def resolvePythonURL(url):\n     """Resolve the python resource url to it\'s path\n     This can resolve python://dotted.package.name/file/path URLs to paths.\n     """\n-    assert url.lower().startswith(\'python://\')\n+    assert url.lower().startswith("python://")\n     spec = url[9:]\n-    package, resource_name = spec.split(\'/\', 1)\n+    package, resource_name = spec.split("/", 1)\n     return pkg_resources.resource_filename(package, resource_name)\n \n \n@@ -151,89 +152,84 @@ def resolve(self, system_url, public_id, context):\n             return None\n \n         # Ignore URLs with a scheme\n-        if \'://\' in system_url:\n+        if "://" in system_url:\n             return None\n \n         # Ignore the special \'diazo:\' resolvers\n-        if system_url.startswith(\'diazo:\'):\n+        if system_url.startswith("diazo:"):\n             return None\n \n         context = findContext(request)\n-        portalState = queryMultiAdapter(\n-            (context, request), name="plone_portal_state")\n+        portalState = queryMultiAdapter((context, request), name="plone_portal_state")\n \n         if portalState is None:\n             root = None\n         else:\n             root = portalState.navigation_root()\n \n-        if not system_url.startswith(\'/\'):  # only for relative urls\n+        if not system_url.startswith("/"):  # only for relative urls\n             root_path = root.getPhysicalPath()\n-            context_path = context.getPhysicalPath()[len(root_path):]\n+            context_path = context.getPhysicalPath()[len(root_path) :]\n             if len(context_path) == 0:\n-                system_url = \'/\' + system_url\n+                system_url = "/" + system_url\n             else:\n-                system_url = \'/{:s}/{:s}\'.format(\n-                    \'/\'.join(context_path),\n-                    system_url\n-                )\n+                system_url = "/{:s}/{:s}".format("/".join(context_path), system_url)\n \n         response = subrequest(system_url, root=root)\n         if response.status != 200:\n             LOGGER.error(f"Couldn\'t resolve {system_url:s}")\n             return None\n         result = response.getBody()\n-        content_type = response.headers.get(\'content-type\')\n+        content_type = response.headers.get("content-type")\n         encoding = None\n-        if content_type is not None and \';\' in content_type:\n-            content_type, encoding = content_type.split(\';\', 1)\n+        if content_type is not None and ";" in content_type:\n+            content_type, encoding = content_type.split(";", 1)\n         if encoding is None:\n-            encoding = \'utf-8\'\n+            encoding = "utf-8"\n         else:\n             # e.g. charset=utf-8\n-            encoding = encoding.split(\'=\', 1)[1].strip()\n+            encoding = encoding.split("=", 1)[1].strip()\n         result = result.decode(encoding)\n-        if content_type == \'text/html\':\n+        if content_type == "text/html":\n             # Note: at first the xmlcharrefreplace was only done on Python 2,\n             # but Python 3 needs it as well, but only for html.\n             # See https://github.com/plone/Products.CMFPlone/issues/3068\n-            result = result.encode(\'ascii\', \'xmlcharrefreplace\')\n-\n-        if content_type in (\'text/javascript\', \'application/x-javascript\'):\n-            result = \'\'.join([\n-                \'<html><body><script type="text/javascript">\',\n-                result,\n-                \'</script></body></html>\',\n-                ])\n-        elif content_type == \'text/css\':\n-            result = \'\'.join([\n-                \'<html><body><style type="text/css">\',\n-                result,\n-                \'</style></body></html>\',\n-                ])\n+            result = result.encode("ascii", "xmlcharrefreplace")\n+\n+        if content_type in ("text/javascript", "application/x-javascript"):\n+            result = "".join(\n+                [\n+                    \'<html><body><script type="text/javascript">\',\n+                    result,\n+                    "</script></body></html>",\n+                ]\n+            )\n+        elif content_type == "text/css":\n+            result = "".join(\n+                [\n+                    \'<html><body><style type="text/css">\',\n+                    result,\n+                    "</style></body></html>",\n+                ]\n+            )\n \n         return self.resolve_string(result, context)\n \n \n def getPortal():\n-    """Return the portal object\n-    """\n+    """Return the portal object"""\n     request = getRequest()\n     context = findContext(request)\n-    portalState = queryMultiAdapter(\n-        (context, request),\n-        name="plone_portal_state"\n-    )\n+    portalState = queryMultiAdapter((context, request), name="plone_portal_state")\n     if portalState is None:\n         return None\n     return portalState.portal()\n \n \n def findContext(request):\n-    """Find the context from the request\n-    """\n-    published = request.get(\'PUBLISHED\', None)\n-    context = getattr(published, \'__parent__\', None)\n+    """Find the context from the request"""\n+    published = request.get("PUBLISHED", None)\n+    context = getattr(published, "__parent__", None)\n     if context is not None:\n         return context\n \n@@ -245,17 +241,16 @@ def findContext(request):\n \n \n def findPathContext(path):\n-    """Find context given by physical path\n-    """\n+    """Find context given by physical path"""\n     portal = getPortal()\n \n-    if path in (None, \'\', \'/\'):\n+    if path in (None, "", "/"):\n         return portal\n \n-    seq = path.strip(\'/\').split(\'/\')\n+    seq = path.strip("/").split("/")\n     while seq:\n         try:\n-            obj = portal.restrictedTraverse(\'/\'.join(seq))\n+            obj = portal.restrictedTraverse("/".join(seq))\n         except:\n             seq.pop()\n         else:\n@@ -266,15 +261,14 @@ def findPathContext(path):\n \n \n def expandAbsolutePrefix(prefix):\n-    """Prepend the Plone site URL to the prefix if it starts with /\n-    """\n-    if not prefix or not prefix.startswith(\'/\'):\n+    """Prepend the Plone site URL to the prefix if it starts with /"""\n+    if not prefix or not prefix.startswith("/"):\n         return prefix\n     portal = getPortal()\n     if portal is None:\n-        return \'\'\n+        return ""\n     path = portal.absolute_url_path()\n-    if path and path.endswith(\'/\'):\n+    if path and path.endswith("/"):\n         path = path[:-1]\n     return path + prefix\n \n@@ -296,18 +290,16 @@ def createExpressionContext(context, request):\n     expressions.\n     """\n \n-    contextState = queryMultiAdapter(\n-        (context, request), name="plone_context_state")\n-    portalState = queryMultiAdapter(\n-        (context, request), name="plone_portal_state")\n+    contextState = queryMultiAdapter((context, request), name="plone_context_state")\n+    portalState = queryMultiAdapter((context, request), name="plone_portal_state")\n \n     data = {\n-        \'context\': context,\n-        \'request\': request,\n-        \'portal\': portalState.portal(),\n-        \'context_state\': contextState,\n-        \'portal_state\': portalState,\n-        \'nothing\': None,\n+        "context": context,\n+        "request": request,\n+        "portal": portalState.portal(),\n+        "context_state": contextState,\n+        "portal_state": portalState,\n+        "nothing": None,\n     }\n \n     return getEngine().getContext(data)\n@@ -324,8 +316,7 @@ def isValidThemeDirectory(directory):\n     """Determine if the given plone.resource directory is a valid theme\n     directory\n     """\n-    return directory.isFile(MANIFEST_FILENAME) \\\n-        or directory.isFile(RULE_FILENAME)\n+    return directory.isFile(MANIFEST_FILENAME) or directory.isFile(RULE_FILENAME)\n \n \n def extractThemeInfo(zipfile, checkRules=True):\n@@ -335,19 +326,14 @@ def extractThemeInfo(zipfile, checkRules=True):\n     Set checkRules=False to disable the rules check.\n     """\n \n-    name, manifest = extractManifestFromZipFile(\n-        zipfile,\n-        MANIFEST_FORMAT\n-    )\n+    name, manifest = extractManifestFromZipFile(zipfile, MANIFEST_FORMAT)\n     if not manifest:\n         manifest = {}\n-    rules = manifest.get(\'rules\', None)\n+    rules = manifest.get("rules", None)\n     if rules is None:\n         if checkRules:\n             try:\n-                zipfile.getinfo(\n-                    f"{name:s}/{RULE_FILENAME:s}"\n-                )\n+                zipfile.getinfo(f"{name:s}/{RULE_FILENAME:s}")\n             except KeyError:\n                 raise ValueError("Could not find theme name and rules file")\n     return getTheme(name, manifest)\n@@ -356,45 +342,42 @@ def extractThemeInfo(zipfile, checkRules=True):\n def getTheme(name, manifest=None, resources=None):\n     if manifest is None:\n         if resources is None:\n-            resources = getAllResources(\n-                MANIFEST_FORMAT,\n-                filter=isValidThemeDirectory\n-            )\n+            resources = getAllResources(MANIFEST_FORMAT, filter=isValidThemeDirectory)\n         if name not in resources:\n             return None\n         manifest = resources[name] or {}\n \n-    title = manifest.get(\'title\', None)\n+    title = manifest.get("title", None)\n     if title is None:\n-        title = name.capitalize().replace(\'-\', \' \').replace(\'.\', \' \')\n-    description = manifest.get(\'description\', None)\n-    rules = manifest.get(\'rules\', None)\n+        title = name.capitalize().replace("-", " ").replace(".", " ")\n+    description = manifest.get("description", None)\n+    rules = manifest.get("rules", None)\n     if rules is None:\n         rules = "/++{:s}++{:s}/{:s}".format(\n             THEME_RESOURCE_NAME,\n             name,\n             RULE_FILENAME,\n         )\n-    prefix = manifest.get(\'prefix\', None)\n+    prefix = manifest.get("prefix", None)\n     if prefix is None:\n         prefix = f"/++{THEME_RESOURCE_NAME:s}++{name:s}"\n-    params = manifest.get(\'parameters\', None) or {}\n-    doctype = manifest.get(\'doctype\', None) or ""\n-    preview = manifest.get(\'preview\', None)\n-    enabled_bundles = manifest.get(\'enabled-bundles\', None) or \'\'\n-    enabled_bundles = enabled_bundles.split(\',\') if enabled_bundles else []\n-    disabled_bundles = manifest.get(\'disabled-bundles\', None) or \'\'\n-    disabled_bundles = disabled_bundles.split(\',\') if disabled_bundles else []\n-    development_css = manifest.get(\'development-css\', None) or \'\'\n-    development_js = manifest.get(\'development-js\', None) or \'\'\n-    production_css = manifest.get(\'production-css\', None) or \'\'\n-    production_js = manifest.get(\'production-js\', None) or \'\'\n-    tinymce_content_css = manifest.get(\'tinymce-content-css\', None) or \'\'\n-    tinymce_styles_css = manifest.get(\'tinymce-styles-css\', None) or \'\'\n+    params = manifest.get("parameters", None) or {}\n+    doctype = manifest.get("doctype", None) or ""\n+    preview = manifest.get("preview", None)\n+    enabled_bundles = manifest.get("enabled-bundles", None) or ""\n+    enabled_bundles = enabled_bundles.split(",") if enabled_bundles else []\n+    disabled_bundles = manifest.get("disabled-bundles", None) or ""\n+    disabled_bundles = disabled_bundles.split(",") if disabled_bundles else []\n+    development_css = manifest.get("development-css", None) or ""\n+    development_js = manifest.get("development-js", None) or ""\n+    production_css = manifest.get("production-css", None) or ""\n+    production_js = manifest.get("production-js", None) or ""\n+    tinymce_content_css = manifest.get("tinymce-content-css", None) or ""\n+    tinymce_styles_css = manifest.get("tinymce-styles-css", None) or ""\n     if isinstance(rules, bytes):\n-        rules = rules.decode(\'utf-8\')\n+        rules = rules.decode("utf-8")\n     if isinstance(prefix, bytes):\n-        prefix = prefix.decode(\'utf-8\')\n+        prefix = prefix.decode("utf-8")\n     return Theme(\n         name,\n         rules,\n@@ -411,38 +394,39 @@ def getTheme(name, manifest=None, resources=None):\n         production_css=production_css,\n         production_js=production_js,\n         tinymce_content_css=tinymce_content_css,\n-        tinymce_styles_css=tinymce_styles_css\n+        tinymce_styles_css=tinymce_styles_css,\n     )\n \n \n def getAvailableThemes():\n-    """Get a list of all ITheme\'s available in resource directories.\n-    """\n+    """Get a list of all ITheme\'s available in resource directories."""\n     resources = getThemeResources(MANIFEST_FORMAT, filter=isValidThemeDirectory)\n     themes = []\n     for theme in resources:\n-        themes.append(getTheme(theme[\'name\'], theme))\n+        themes.append(getTheme(theme["name"], theme))\n \n     themes.sort(key=lambda x: safe_text(x.title))\n     return themes\n \n-def getThemeResources(format, defaults=None, filter=None, manifestFilename=MANIFEST_FILENAME):\n \n+def getThemeResources(\n+    format, defaults=None, filter=None, manifestFilename=MANIFEST_FILENAME\n+):\n     resources = []\n \n-    for directory in iterDirectoriesOfType(format.resourceType, filter_duplicates=False):\n-\n+    for directory in iterDirectoriesOfType(\n+        format.resourceType, filter_duplicates=False\n+    ):\n         if filter is not None and not filter(directory):\n             continue\n \n         name = directory.__name__\n \n         if directory.isFile(manifestFilename):\n-\n             manifest = directory.openFile(manifestFilename)\n             try:\n                 theme = getManifest(manifest, format, defaults)\n-                theme[\'name\'] = name\n+                theme["name"] = name\n                 resources.append(theme)\n             except:\n                 LOGGER.exception("Unable to read manifest for theme directory %s", name)\n@@ -453,8 +437,7 @@ def getThemeResources(format, defaults=None, filter=None, manifestFilename=MANIF\n \n \n def getThemeFromResourceDirectory(resourceDirectory):\n-    """Return a Theme object from a resource directory\n-    """\n+    """Return a Theme object from a resource directory"""\n     name = resourceDirectory.__name__\n     if resourceDirectory.isFile(MANIFEST_FILENAME):\n         with resourceDirectory.openFile(MANIFEST_FILENAME) as manifest_fp:\n@@ -466,8 +449,7 @@ def getThemeFromResourceDirectory(resourceDirectory):\n \n \n def getZODBThemes():\n-    """Get a list of ITheme\'s stored in the ZODB.\n-    """\n+    """Get a list of ITheme\'s stored in the ZODB."""\n \n     resources = getZODBResources(MANIFEST_FORMAT, filter=isValidThemeDirectory)\n     themes = []\n@@ -479,20 +461,17 @@ def getZODBThemes():\n \n \n def getCurrentTheme():\n-    """Get the name of the currently enabled theme\n-    """\n+    """Get the name of the currently enabled theme"""\n     return theming_policy().getCurrentTheme()\n \n \n def isThemeEnabled(request, settings=None):\n-    """Determine if a theme is enabled for the given request\n-    """\n+    """Determine if a theme is enabled for the given request"""\n     return theming_policy(request).isThemeEnabled(settings)\n \n \n def applyTheme(theme):\n-    """Apply an ITheme\n-    """\n+    """Apply an ITheme"""\n     # on write, force using default policy\n     policy = IThemingPolicy(NoRequest())\n     settings = policy.getSettings()\n@@ -503,14 +482,12 @@ def applyTheme(theme):\n     currentTheme = policy.getCurrentTheme()\n \n     if currentTheme is not None:\n-        themeDirectory = queryResourceDirectory(\n-            THEME_RESOURCE_NAME, currentTheme)\n+        themeDirectory = queryResourceDirectory(THEME_RESOURCE_NAME, currentTheme)\n         if themeDirectory is not None:\n             plugins = getPlugins()\n             pluginSettings = getPluginSettings(themeDirectory, plugins)\n \n     if theme is None:\n-\n         settings.currentTheme = None\n         settings.rules = None\n         settings.absolutePrefix = None\n@@ -519,19 +496,17 @@ def applyTheme(theme):\n \n         if pluginSettings is not None:\n             for name, plugin in plugins:\n-                plugin.onDisabled(currentTheme, pluginSettings[name],\n-                                  pluginSettings)\n+                plugin.onDisabled(currentTheme, pluginSettings[name], pluginSettings)\n \n     else:\n-\n         if not isinstance(theme.rules, str):\n-            theme.rules = theme.rules.decode(\'utf-8\')\n+            theme.rules = theme.rules.decode("utf-8")\n \n         if not isinstance(theme.absolutePrefix, str):\n-            theme.absolutePrefix = theme.absolutePrefix.decode(\'utf-8\')\n+            theme.absolutePrefix = theme.absolutePrefix.decode("utf-8")\n \n         if not isinstance(theme.__name__, str):\n-            theme.__name__ = theme.__name__.decode(\'utf-8\')\n+            theme.__name__ = theme.__name__.decode("utf-8")\n \n         settings.currentTheme = theme.__name__\n         settings.rules = theme.rules\n@@ -541,24 +516,21 @@ def applyTheme(theme):\n \n         if pluginSettings is not None:\n             for name, plugin in plugins:\n-                plugin.onDisabled(currentTheme, pluginSettings[name],\n-                                  pluginSettings)\n+                plugin.onDisabled(currentTheme, pluginSettings[name], pluginSettings)\n \n         currentTheme = settings.currentTheme\n-        themeDirectory = queryResourceDirectory(\n-            THEME_RESOURCE_NAME, currentTheme)\n+        themeDirectory = queryResourceDirectory(THEME_RESOURCE_NAME, currentTheme)\n         if themeDirectory is not None:\n             plugins = getPlugins()\n             pluginSettings = getPluginSettings(themeDirectory, plugins)\n \n         if pluginSettings is not None:\n             for name, plugin in plugins:\n-                plugin.onEnabled(currentTheme, pluginSettings[name],\n-                                 pluginSettings)\n+                plugin.onEnabled(currentTheme, pluginSettings[name], pluginSettings)\n         policy.set_theme(currentTheme, theme)\n \n \n-def createThemeFromTemplate(title, description, baseOn=\'template\'):\n+def createThemeFromTemplate(title, description, baseOn="template"):\n     """Create a new theme from the given title and description based on\n     another theme resource directory\n     """\n@@ -587,36 +559,41 @@ def createThemeFromTemplate(title, description, baseOn=\'template\'):\n             fp.close()\n         manifest.read_string(safe_text(data))\n \n-    if not manifest.has_section(\'theme\'):\n-        manifest.add_section(\'theme\')\n+    if not manifest.has_section("theme"):\n+        manifest.add_section("theme")\n \n-    manifest.set(\'theme\', \'title\', title)\n-    manifest.set(\'theme\', \'description\', description)\n+    manifest.set("theme", "title", title)\n+    manifest.set("theme", "description", description)\n \n-    if manifest.has_option(\'theme\', \'prefix\'):\n+    if manifest.has_option("theme", "prefix"):\n         prefix = f"/++{THEME_RESOURCE_NAME}++{themeName}"\n-        manifest.set(\'theme\', \'prefix\', prefix)\n-\n-    if manifest.has_option(\'theme\', \'rules\'):\n-        rule = manifest.get(\'theme\', \'rules\')\n-        rule_file_name = rule.split(\'/\')[-1]  # extract real rules file name\n-        rules = "/++{}++{}/{}".format(THEME_RESOURCE_NAME, themeName,\n-                                   rule_file_name)\n-        manifest.set(\'theme\', \'rules\', rules)\n-\n-    paths_to_fix = [\'development-css\', \'production-css\', \'tinymce-content-css\',\n-                    \'tinymce-styles-css\', \'development-js\', \'production-js\']\n+        manifest.set("theme", "prefix", prefix)\n+\n+    if manifest.has_option("theme", "rules"):\n+        rule = manifest.get("theme", "rules")\n+        rule_file_name = rule.split("/")[-1]  # extract real rules file name\n+        rules = "/++{}++{}/{}".format(THEME_RESOURCE_NAME, themeName, rule_file_name)\n+        manifest.set("theme", "rules", rules)\n+\n+    paths_to_fix = [\n+        "development-css",\n+        "production-css",\n+        "tinymce-content-css",\n+        "tinymce-styles-css",\n+        "development-js",\n+        "production-js",\n+    ]\n     for var_path in paths_to_fix:\n-        if not manifest.has_option(\'theme\', var_path):\n+        if not manifest.has_option("theme", var_path):\n             continue\n-        val = manifest.get(\'theme\', var_path)\n+        val = manifest.get("theme", var_path)\n         if not val:\n             continue\n-        template_prefix = f\'++{THEME_RESOURCE_NAME}++{baseOn}/\'\n+        template_prefix = f"++{THEME_RESOURCE_NAME}++{baseOn}/"\n         if template_prefix in val:\n             # okay, fix\n-            val = val.replace(template_prefix, f\'++{THEME_RESOURCE_NAME}++{themeName}/\')\n-            manifest.set(\'theme\', var_path, val)\n+            val = val.replace(template_prefix, f"++{THEME_RESOURCE_NAME}++{themeName}/")\n+            manifest.set("theme", var_path, val)\n \n     # plone.resource uses OFS.File which is a BytesIO objects\n     # but configparser can only deal with text (StringIO).\n@@ -633,14 +610,13 @@ def createThemeFromTemplate(title, description, baseOn=\'template\'):\n \n \n def getParser(type, readNetwork):\n-    """Set up a parser for either rules, theme or compiler\n-    """\n+    """Set up a parser for either rules, theme or compiler"""\n \n-    if type == \'rules\':\n+    if type == "rules":\n         parser = etree.XMLParser(recover=False, resolve_entities=False, remove_pis=True)\n-    elif type == \'theme\':\n+    elif type == "theme":\n         parser = etree.HTMLParser()\n-    elif type == \'compiler\':\n+    elif type == "compiler":\n         parser = etree.XMLParser(resolve_entities=False, remove_pis=True)\n     # Note: the order in which resolvers are called, seems random.\n     # They end up in a set.\n@@ -658,10 +634,9 @@ def compileThemeTransform(\n     absolutePrefix=None,\n     readNetwork=False,\n     parameterExpressions=None,\n-    runtrace=False\n+    runtrace=False,\n ):\n-    """Prepare the theme transform by compiling the rules with the given options\n-    """\n+    """Prepare the theme transform by compiling the rules with the given options"""\n \n     if parameterExpressions is None:\n         parameterExpressions = {}\n@@ -671,21 +646,21 @@ def compileThemeTransform(\n         write_file=False,\n         create_dir=False,\n         read_network=readNetwork,\n-        write_network=False\n+        write_network=False,\n     )\n \n     if absolutePrefix:\n         absolutePrefix = expandAbsolutePrefix(absolutePrefix)\n-    params = {\'url\', \'base\', \'path\', \'scheme\', \'host\'}\n+    params = {"url", "base", "path", "scheme", "host"}\n     params.update(parameterExpressions.keys())\n-    xslParams = {k: \'\' for k in params}\n+    xslParams = {k: "" for k in params}\n \n     compiledTheme = compile_theme(\n         rules,\n         absolute_prefix=absolutePrefix,\n-        parser=getParser(\'theme\', readNetwork),\n-        rules_parser=getParser(\'rules\', readNetwork),\n-        compiler_parser=getParser(\'compiler\', readNetwork),\n+        parser=getParser("theme", readNetwork),\n+        rules_parser=getParser("rules", readNetwork),\n+        compiler_parser=getParser("compiler", readNetwork),\n         read_network=readNetwork,\n         access_control=accessControl,\n         update=True,\n@@ -703,15 +678,14 @@ def compileThemeTransform(\n \n \n def prepareThemeParameters(context, request, parameterExpressions, cache=None):\n-    """Prepare and return a dict of parameter expression values.\n-    """\n+    """Prepare and return a dict of parameter expression values."""\n \n     # Find real or virtual path - PATH_INFO has VHM elements in it\n-    url = request.get(\'ACTUAL_URL\', \'\')\n+    url = request.get("ACTUAL_URL", "")\n \n     # Find the host name\n-    base = request.get(\'BASE1\', \'\')\n-    path = url[len(base):]\n+    base = request.get("BASE1", "")\n+    path = url[len(base) :]\n     parts = urlsplit(base.lower())\n \n     params = dict(\ndiff --git a/src/plone/app/theming/zmi.py b/src/plone/app/theming/zmi.py\nindex 1973ff6..6b4eeb2 100644\n--- a/src/plone/app/theming/zmi.py\n+++ b/src/plone/app/theming/zmi.py\n@@ -4,23 +4,24 @@\n import logging\n \n \n-LOGGER = logging.getLogger(\'plone.app.theming\')\n+LOGGER = logging.getLogger("plone.app.theming")\n \n \n class NoThemeDTMLFile(DTMLFile):\n-    \'\'\'DTMLFile that automatically sets the X-Theme-Disabled header\'\'\'\n+    """DTMLFile that automatically sets the X-Theme-Disabled header"""\n \n     def _exec(self, bound_data, args, kw):\n         request = getRequest()\n         if request is not None:\n-            request.response.setHeader(\'X-Theme-Disabled\', \'1\')\n+            request.response.setHeader("X-Theme-Disabled", "1")\n         return DTMLFile._exec(self, bound_data, args, kw)\n \n+\n # Most ZMI pages include \'manage_page_header\'\n NO_THEME_DTML = [\n-    \'manage\',\n-    \'manage_page_header\',\n-    \'manage_top_frame\',\n+    "manage",\n+    "manage_page_header",\n+    "manage_top_frame",\n ]\n \n \n@@ -28,16 +29,18 @@ def disable_theming(func):\n     def wrapped(self, *args, **kw):\n         request = getRequest()\n         if request is not None:\n-            request.response.setHeader(\'X-Theme-Disabled\', \'1\')\n+            request.response.setHeader("X-Theme-Disabled", "1")\n         return func(self, *args, **kw)\n+\n     return func\n \n \n def patch_zmi():\n     from App.Management import Navigation\n+\n     for name in NO_THEME_DTML:\n         dtml = getattr(Navigation, name, None)\n         if dtml and isinstance(dtml, DTMLFile):\n             dtml.__class__ = NoThemeDTMLFile\n \n-    LOGGER.debug(\'Patched Zope Management Interface to disable theming.\')\n+    LOGGER.debug("Patched Zope Management Interface to disable theming.")\n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-03-18T01:26:41+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/5fec319d69d93417ed47edb62b8d872373362158

chore: pyupgrade

Files changed:
M src/plone/app/theming/browser/controlpanel.py
M src/plone/app/theming/utils.py

b'diff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py\nindex 0066bd9..1355b17 100644\n--- a/src/plone/app/theming/browser/controlpanel.py\n+++ b/src/plone/app/theming/browser/controlpanel.py\n@@ -418,7 +418,7 @@ def themeList(self):\n \n     def redirectToFieldset(self, fieldset):\n         self.redirect(\n-            "{}/{}#fieldsetlegend-{}".format(self.site_url, self.__name__, fieldset)\n+            f"{self.site_url}/{self.__name__}#fieldsetlegend-{fieldset}"\n         )\n \n     def renderOverlay(self, overlay):\ndiff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py\nindex 563a05c..43cd247 100644\n--- a/src/plone/app/theming/utils.py\n+++ b/src/plone/app/theming/utils.py\n@@ -572,7 +572,7 @@ def createThemeFromTemplate(title, description, baseOn="template"):\n     if manifest.has_option("theme", "rules"):\n         rule = manifest.get("theme", "rules")\n         rule_file_name = rule.split("/")[-1]  # extract real rules file name\n-        rules = "/++{}++{}/{}".format(THEME_RESOURCE_NAME, themeName, rule_file_name)\n+        rules = f"/++{THEME_RESOURCE_NAME}++{themeName}/{rule_file_name}"\n         manifest.set("theme", "rules", rules)\n \n     paths_to_fix = [\n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-03-18T01:26:57+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/59839c0039ae5c0f64a04581aeabc6ba1e7c8936

chore: black

Files changed:
M src/plone/app/theming/browser/controlpanel.py

b'diff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py\nindex 1355b17..35d33d4 100644\n--- a/src/plone/app/theming/browser/controlpanel.py\n+++ b/src/plone/app/theming/browser/controlpanel.py\n@@ -417,9 +417,7 @@ def themeList(self):\n         return themes\n \n     def redirectToFieldset(self, fieldset):\n-        self.redirect(\n-            f"{self.site_url}/{self.__name__}#fieldsetlegend-{fieldset}"\n-        )\n+        self.redirect(f"{self.site_url}/{self.__name__}#fieldsetlegend-{fieldset}")\n \n     def renderOverlay(self, overlay):\n         self.overlay = overlay\n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-03-18T01:27:24+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/e2603c48d9f4186cf410d34ec86b5cca01dd5eb3

chore: zpretty ZCML/XML

Files changed:
M resources/theme/theme1/rules.xml
M src/plone/app/theming/browser/configure.zcml
M src/plone/app/theming/configure.zcml
M src/plone/app/theming/exportimport/configure.zcml
M src/plone/app/theming/plugins/configure.zcml
M src/plone/app/theming/profiles/default/browserlayer.xml
M src/plone/app/theming/profiles/default/controlpanel.xml
M src/plone/app/theming/profiles/default/metadata.xml
M src/plone/app/theming/profiles/default/registry.xml
M src/plone/app/theming/tests/another-theme/rules.xml
M src/plone/app/theming/tests/configure.zcml
M src/plone/app/theming/tests/includes.xml
M src/plone/app/theming/tests/localrules.xml
M src/plone/app/theming/tests/nonascii.xml
M src/plone/app/theming/tests/otherrules.xml
M src/plone/app/theming/tests/paramrules.xml
M src/plone/app/theming/tests/resources/css-js.xml
M src/plone/app/theming/tests/resources/nonascii.xml
M src/plone/app/theming/tests/resources/overridesrules.xml
M src/plone/app/theming/tests/resources/rules.xml
M src/plone/app/theming/tests/rules.xml
M src/plone/app/theming/tests/secondary-theme/rules.xml
M src/plone/app/theming/themes.zcml
M src/plone/app/theming/themes/template/rules.xml

b'diff --git a/resources/theme/theme1/rules.xml b/resources/theme/theme1/rules.xml\nindex 8496a6c0..d72ed30a 100644\n--- a/resources/theme/theme1/rules.xml\n+++ b/resources/theme/theme1/rules.xml\n@@ -1,24 +1,36 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules\n-    xmlns="http://namespaces.plone.org/diazo"\n-    xmlns:css="http://namespaces.plone.org/diazo/css"\n-    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+       xmlns:xsl="http://www.w3.org/1999/XSL/Transform"\n+>\n \n-    <rules css:if-content="#visual-portal-wrapper">\n+  <rules css:if-content="#visual-portal-wrapper">\n \n-        <theme href="theme.html" />\n-        <theme href="othertheme.html" if-path="news"/>\n+    <theme href="theme.html" />\n+    <theme href="othertheme.html"\n+           if-path="news"\n+    />\n \n-        <replace css:content=\'html head title\' css:theme=\'html head title\' />\n-        <replace css:content=\'h1.documentFirstHeading\' css:theme=\'#pageTitle\' if="not($ajax_load)" />\n-        <after content=\'/html/head/link\' theme-children=\'/html/head\' />\n+    <replace css:content="html head title"\n+             css:theme="html head title"\n+    />\n+    <replace css:content="h1.documentFirstHeading"\n+             css:theme="#pageTitle"\n+             if="not($ajax_load)"\n+    />\n+    <after content="/html/head/link"\n+           theme-children="/html/head"\n+    />\n \n-        <replace css:content="#portal-colophon" css:theme="#footer" />\n+    <replace css:content="#portal-colophon"\n+             css:theme="#footer"\n+    />\n \n-        <replace css:theme="p">\n-            The value of frobble is <xsl:value-of select="$frobble" />\n-        </replace>\n+    <replace css:theme="p">\n+            The value of frobble is\n+      <xsl:value-of select="$frobble" />\n+    </replace>\n \n-    </rules>\n+  </rules>\n \n </rules>\ndiff --git a/src/plone/app/theming/browser/configure.zcml b/src/plone/app/theming/browser/configure.zcml\nindex 799374ad..928a583f 100644\n--- a/src/plone/app/theming/browser/configure.zcml\n+++ b/src/plone/app/theming/browser/configure.zcml\n@@ -2,47 +2,51 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n     xmlns:i18n="http://namespaces.zope.org/i18n"\n-    i18n_domain="plone">\n-\n-    <include package="Products.CMFPlone.controlpanel" file="permissions.zcml" />\n-\n-    <browser:resource\n-        name="plone.app.theming.gif"\n-        image="icon.gif"\n-        />\n-\n-    <browser:resourceDirectory\n-        name="plone.app.theming"\n-        directory="resources"\n-        />\n-\n-    <browser:page\n-        name="theming-controlpanel"\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n-        class=".controlpanel.ThemingControlpanel"\n-        template="controlpanel.pt"\n-        permission="plone.app.controlpanel.Themes"\n-        />\n-\n-    <browser:page\n-        name="theming-controlpanel-help"\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n-        class=".help.Help"\n-        permission="zope2.View"\n-        />\n-\n-\t<browser:page\n-        name="themeFileUpload"\n-        for="*"\n-        class=".themefile.FileUploadView"\n-        permission="plone.app.controlpanel.Themes"\n-        />\n-\n-    <browser:page\n-        name="custom.css"\n-        for="*"\n-        class=".custom_css.CustomCSSView"\n-        permission="zope.Public"\n-        />\n+    i18n_domain="plone"\n+    >\n+\n+  <include\n+      package="Products.CMFPlone.controlpanel"\n+      file="permissions.zcml"\n+      />\n+\n+  <browser:resource\n+      name="plone.app.theming.gif"\n+      image="icon.gif"\n+      />\n+\n+  <browser:resourceDirectory\n+      name="plone.app.theming"\n+      directory="resources"\n+      />\n+\n+  <browser:page\n+      name="theming-controlpanel"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      class=".controlpanel.ThemingControlpanel"\n+      template="controlpanel.pt"\n+      permission="plone.app.controlpanel.Themes"\n+      />\n+\n+  <browser:page\n+      name="theming-controlpanel-help"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      class=".help.Help"\n+      permission="zope2.View"\n+      />\n+\n+  <browser:page\n+      name="themeFileUpload"\n+      for="*"\n+      class=".themefile.FileUploadView"\n+      permission="plone.app.controlpanel.Themes"\n+      />\n+\n+  <browser:page\n+      name="custom.css"\n+      for="*"\n+      class=".custom_css.CustomCSSView"\n+      permission="zope.Public"\n+      />\n \n </configure>\ndiff --git a/src/plone/app/theming/configure.zcml b/src/plone/app/theming/configure.zcml\nindex c3f46bca..fe91bfbf 100644\n--- a/src/plone/app/theming/configure.zcml\n+++ b/src/plone/app/theming/configure.zcml\n@@ -1,90 +1,95 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:gs="http://namespaces.zope.org/genericsetup"\n-    xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:i18n="http://namespaces.zope.org/i18n"\n     xmlns:plone="http://namespaces.plone.org/plone"\n-    i18n_domain="plone">\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    i18n_domain="plone"\n+    >\n \n-    <include package="plone.resource" />\n-    <include package="plone.staticresources" />\n-    <include package="plone.resourceeditor" />\n-    <include package="plone.transformchain" />\n-    <include package="plone.app.registry" />\n-    <include package="diazo" file="diazo-debug.zcml" />\n+  <include package="plone.resource" />\n+  <include package="plone.staticresources" />\n+  <include package="plone.resourceeditor" />\n+  <include package="plone.transformchain" />\n+  <include package="plone.app.registry" />\n+  <include\n+      package="diazo"\n+      file="diazo-debug.zcml"\n+      />\n \n-    <include package=".browser" />\n-    <include package=".exportimport" />\n-    <include package=".plugins" />\n+  <include package=".browser" />\n+  <include package=".exportimport" />\n+  <include package=".plugins" />\n \n-    <gs:registerProfile\n-        name="default"\n-        title="Diazo theme support"\n-        description="Installs a control panel to allow on-the-fly theming with Diazo"\n-        directory="profiles/default"\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        />\n+  <gs:registerProfile\n+      name="default"\n+      title="Diazo theme support"\n+      description="Installs a control panel to allow on-the-fly theming with Diazo"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      directory="profiles/default"\n+      />\n \n-    <gs:upgradeStep\n-        title="Combine Theming control panels"\n-        source="1000"\n-        destination="1001"\n-        handler=".upgrade.update_controlpanel"\n-        sortkey="2"\n-        profile="plone.app.theming:default"\n-        />\n+  <gs:upgradeStep\n+      title="Combine Theming control panels"\n+      profile="plone.app.theming:default"\n+      source="1000"\n+      destination="1001"\n+      handler=".upgrade.update_controlpanel"\n+      sortkey="2"\n+      />\n \n-    <gs:upgradeStep\n-        title="Update registry"\n-        source="1001"\n-        destination="1002"\n-        handler=".upgrade.update_registry"\n-        profile="plone.app.theming:default"\n-        />\n+  <gs:upgradeStep\n+      title="Update registry"\n+      profile="plone.app.theming:default"\n+      source="1001"\n+      destination="1002"\n+      handler=".upgrade.update_registry"\n+      />\n \n-    <!-- Transform order 8850 - apply theme transform -->\n-    <adapter\n-        name="plone.app.theming.transform"\n-        factory=".transform.ThemeTransform"\n-        />\n+  <!-- Transform order 8850 - apply theme transform -->\n+  <adapter\n+      factory=".transform.ThemeTransform"\n+      name="plone.app.theming.transform"\n+      />\n \n-    <subscriber\n-        for=".interfaces.IThemeSettings\n-              plone.registry.interfaces.IRecordModifiedEvent"\n-        handler=".policy.invalidateCache"\n-        />\n+  <subscriber\n+      for=".interfaces.IThemeSettings\n+           plone.registry.interfaces.IRecordModifiedEvent"\n+      handler=".policy.invalidateCache"\n+      />\n \n-    <!-- policy adapter\n+  <!-- policy adapter\n          You can plug in a custom adapter by registering it for your own layer\n          eg for="your.product.interfaces.IThemeSwitcher".  -->\n-    <adapter\n-        factory=".policy.ThemingPolicy"\n-        for="zope.publisher.interfaces.IRequest"\n-        />\n-    <!-- fallback default policy adapter\n+  <adapter\n+      factory=".policy.ThemingPolicy"\n+      for="zope.publisher.interfaces.IRequest"\n+      />\n+  <!-- fallback default policy adapter\n          Do not override this, it is used by applyTheme -->\n-    <adapter\n-        factory=".policy.ThemingPolicy"\n-        for="plone.app.theming.interfaces.INoRequest"\n-        />\n+  <adapter\n+      factory=".policy.ThemingPolicy"\n+      for="plone.app.theming.interfaces.INoRequest"\n+      />\n \n-    <!-- Set X-Theme-Enabled header in the request if theming is enabled -->\n-    <subscriber\n-        for="Products.CMFCore.interfaces.ISiteRoot\n-             zope.traversing.interfaces.IBeforeTraverseEvent"\n-        handler=".header.setHeader"\n-        />\n+  <!-- Set X-Theme-Enabled header in the request if theming is enabled -->\n+  <subscriber\n+      for="Products.CMFCore.interfaces.ISiteRoot\n+           zope.traversing.interfaces.IBeforeTraverseEvent"\n+      handler=".header.setHeader"\n+      />\n \n-    <!-- Resource traverser -->\n-    <adapter\n-        name="theme"\n-        for="* zope.publisher.interfaces.IRequest"\n-        provides="zope.traversing.interfaces.ITraversable"\n-        factory=".traversal.ThemeTraverser"\n-        />\n+  <!-- Resource traverser -->\n+  <adapter\n+      factory=".traversal.ThemeTraverser"\n+      provides="zope.traversing.interfaces.ITraversable"\n+      for="*\n+           zope.publisher.interfaces.IRequest"\n+      name="theme"\n+      />\n \n-    <!-- Themes -->\n-    <include file="themes.zcml" />\n+  <!-- Themes -->\n+  <include file="themes.zcml" />\n \n </configure>\ndiff --git a/src/plone/app/theming/exportimport/configure.zcml b/src/plone/app/theming/exportimport/configure.zcml\nindex 25a87702..3deff48d 100644\n--- a/src/plone/app/theming/exportimport/configure.zcml\n+++ b/src/plone/app/theming/exportimport/configure.zcml\n@@ -1,14 +1,16 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:gs="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone.app.theming">\n+    i18n_domain="plone.app.theming"\n+    >\n \n-    <gs:importStep\n-        name="plone.app.theming"\n-        title="Apply Diazo theme"\n-        description="Applies a theme configured in a theme.xml file"\n-        handler=".handler.importTheme">\n-            <gs:depends name="toolset" />\n-    </gs:importStep>\n+  <gs:importStep\n+      name="plone.app.theming"\n+      title="Apply Diazo theme"\n+      description="Applies a theme configured in a theme.xml file"\n+      handler=".handler.importTheme"\n+      >\n+    <gs:depends name="toolset" />\n+  </gs:importStep>\n \n </configure>\ndiff --git a/src/plone/app/theming/plugins/configure.zcml b/src/plone/app/theming/plugins/configure.zcml\nindex e5ca530d..8c815265 100644\n--- a/src/plone/app/theming/plugins/configure.zcml\n+++ b/src/plone/app/theming/plugins/configure.zcml\n@@ -1,18 +1,19 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:i18n="http://namespaces.zope.org/i18n"\n-    i18n_domain="plone">\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    i18n_domain="plone"\n+    >\n \n-    <subscriber\n-        for="Products.CMFCore.interfaces.ISiteRoot\n-             zope.traversing.interfaces.IBeforeTraverseEvent"\n-        handler=".hooks.onRequest"\n-        />\n+  <subscriber\n+      for="Products.CMFCore.interfaces.ISiteRoot\n+           zope.traversing.interfaces.IBeforeTraverseEvent"\n+      handler=".hooks.onRequest"\n+      />\n \n-    <subscriber\n-        for="zope.processlifetime.DatabaseOpenedWithRoot"\n-        handler=".hooks.onStartup"\n-        />\n+  <subscriber\n+      for="zope.processlifetime.DatabaseOpenedWithRoot"\n+      handler=".hooks.onStartup"\n+      />\n \n </configure>\ndiff --git a/src/plone/app/theming/profiles/default/browserlayer.xml b/src/plone/app/theming/profiles/default/browserlayer.xml\nindex 32cfcdf4..c3835719 100644\n--- a/src/plone/app/theming/profiles/default/browserlayer.xml\n+++ b/src/plone/app/theming/profiles/default/browserlayer.xml\n@@ -1,6 +1,6 @@\n+<?xml version="1.0" encoding="utf-8"?>\n <layers>\n-    <layer\n-        name="plone.app.theming"\n-        interface="plone.app.theming.interfaces.IThemingLayer"\n-        />\n+  <layer interface="plone.app.theming.interfaces.IThemingLayer"\n+         name="plone.app.theming"\n+  />\n </layers>\ndiff --git a/src/plone/app/theming/profiles/default/controlpanel.xml b/src/plone/app/theming/profiles/default/controlpanel.xml\nindex 4e7c09a3..5fa0dc86 100644\n--- a/src/plone/app/theming/profiles/default/controlpanel.xml\n+++ b/src/plone/app/theming/profiles/default/controlpanel.xml\n@@ -1,34 +1,34 @@\n-<?xml version="1.0"?>\n-<object\n-    name="portal_controlpanel"\n-    xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-    i18n:domain="plone"\n-    purge="False">\n+<?xml version="1.0" encoding="utf-8"?>\n+<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+        name="portal_controlpanel"\n+        purge="False"\n+        i18n:domain="plone"\n+>\n \n-    <configlet\n-        title="Theming"\n-        action_id="plone.app.theming"\n-        appId="plone.app.theming"\n-        category="plone-general"\n-        condition_expr=""\n-        url_expr="string:${portal_url}/@@theming-controlpanel"\n-        icon_expr="string:display"\n-        visible="True"\n-        i18n:attributes="title">\n-            <permission>Plone Site Setup: Themes</permission>\n-    </configlet>\n+  <configlet action_id="plone.app.theming"\n+             appId="plone.app.theming"\n+             category="plone-general"\n+             condition_expr=""\n+             icon_expr="string:display"\n+             title="Theming"\n+             url_expr="string:${portal_url}/@@theming-controlpanel"\n+             visible="True"\n+             i18n:attributes="title"\n+  >\n+    <permission>Plone Site Setup: Themes</permission>\n+  </configlet>\n \n-    <configlet\n-        title="Themes"\n-        action_id="PortalSkin"\n-        appId="PortalSkin"\n-        category="Plone"\n-        condition_expr=""\n-        icon_expr="string:$portal_url/skins_icon.png"\n-        url_expr="string:${portal_url}/@@skins-controlpanel"\n-        visible="False"\n-        i18n:attributes="title">\n-        <permission>Plone Site Setup: Themes</permission>\n-    </configlet>\n+  <configlet action_id="PortalSkin"\n+             appId="PortalSkin"\n+             category="Plone"\n+             condition_expr=""\n+             icon_expr="string:$portal_url/skins_icon.png"\n+             title="Themes"\n+             url_expr="string:${portal_url}/@@skins-controlpanel"\n+             visible="False"\n+             i18n:attributes="title"\n+  >\n+    <permission>Plone Site Setup: Themes</permission>\n+  </configlet>\n \n </object>\ndiff --git a/src/plone/app/theming/profiles/default/metadata.xml b/src/plone/app/theming/profiles/default/metadata.xml\nindex f2861267..09b65faa 100644\n--- a/src/plone/app/theming/profiles/default/metadata.xml\n+++ b/src/plone/app/theming/profiles/default/metadata.xml\n@@ -1,6 +1,7 @@\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n-    <version>1002</version>\n-    <dependencies>\n-        <dependency>profile-plone.app.registry:default</dependency>\n-    </dependencies>\n+  <version>1002</version>\n+  <dependencies>\n+    <dependency>profile-plone.app.registry:default</dependency>\n+  </dependencies>\n </metadata>\ndiff --git a/src/plone/app/theming/profiles/default/registry.xml b/src/plone/app/theming/profiles/default/registry.xml\nindex a9dd5cff..e9bfa265 100644\n--- a/src/plone/app/theming/profiles/default/registry.xml\n+++ b/src/plone/app/theming/profiles/default/registry.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <registry>\n-    <records interface="plone.app.theming.interfaces.IThemeSettings" />\n+  <records interface="plone.app.theming.interfaces.IThemeSettings" />\n </registry>\ndiff --git a/src/plone/app/theming/tests/another-theme/rules.xml b/src/plone/app/theming/tests/another-theme/rules.xml\nindex 78ae654f..749fb9e9 100644\n--- a/src/plone/app/theming/tests/another-theme/rules.xml\n+++ b/src/plone/app/theming/tests/another-theme/rules.xml\n@@ -1,7 +1,7 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules\n-    xmlns="http://namespaces.plone.org/diazo"\n-    xmlns:css="http://namespaces.plone.org/diazo/css"\n-    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+       xmlns:xsl="http://www.w3.org/1999/XSL/Transform"\n+>\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/configure.zcml b/src/plone/app/theming/tests/configure.zcml\nindex db95820a..54c940f3 100644\n--- a/src/plone/app/theming/tests/configure.zcml\n+++ b/src/plone/app/theming/tests/configure.zcml\n@@ -1,19 +1,31 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    xmlns:plone="http://namespaces.plone.org/plone">\n+    xmlns:plone="http://namespaces.plone.org/plone"\n+    >\n \n-    <include package="plone.app.theming"/>\n+  <include package="plone.app.theming" />\n \n-    <plone:static directory="resources" type="theme" />\n-    <plone:static directory="secondary-theme" name="secondary-theme" type="theme" />\n-    <plone:static directory="another-theme" name="another-theme" type="theme" />\n+  <plone:static\n+      directory="resources"\n+      type="theme"\n+      />\n+  <plone:static\n+      directory="secondary-theme"\n+      name="secondary-theme"\n+      type="theme"\n+      />\n+  <plone:static\n+      directory="another-theme"\n+      name="another-theme"\n+      type="theme"\n+      />\n \n-    <browser:page\n-        for="*"\n-        name="header-disabled"\n-        template="notheme.pt"\n-        permission="zope.Public"\n-        />\n+  <browser:page\n+      name="header-disabled"\n+      for="*"\n+      template="notheme.pt"\n+      permission="zope.Public"\n+      />\n \n-</configure>\n\\ No newline at end of file\n+</configure>\ndiff --git a/src/plone/app/theming/tests/includes.xml b/src/plone/app/theming/tests/includes.xml\nindex ac740772..b9b90c64 100644\n--- a/src/plone/app/theming/tests/includes.xml\n+++ b/src/plone/app/theming/tests/includes.xml\n@@ -1,9 +1,17 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules xmlns="http://namespaces.plone.org/diazo" xmlns:css="http://namespaces.plone.org/diazo/css">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+>\n \n-    <theme href="python://plone.app.theming.tests/includes.html" />\n+  <theme href="python://plone.app.theming.tests/includes.html" />\n \n-    <replace content=\'//*[@id="content"]/text()\' css:theme-children=\'#alpha\' href="/alpha" />\n-    <replace content=\'//*[@id="content"]/text()\' css:theme-children=\'#beta\' href="./beta" />\n+  <replace content=\'//*[@id="content"]/text()\'\n+           css:theme-children="#alpha"\n+           href="/alpha"\n+  />\n+  <replace content=\'//*[@id="content"]/text()\'\n+           css:theme-children="#beta"\n+           href="./beta"\n+  />\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/localrules.xml b/src/plone/app/theming/tests/localrules.xml\nindex bb680154..1e9ca66b 100644\n--- a/src/plone/app/theming/tests/localrules.xml\n+++ b/src/plone/app/theming/tests/localrules.xml\n@@ -1,10 +1,18 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules xmlns="http://namespaces.plone.org/diazo" xmlns:css="http://namespaces.plone.org/diazo/css">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+>\n \n-    <theme href="/theme.html" />\n+  <theme href="/theme.html" />\n \n-    <replace content=\'/html/head/title\' theme=\'/html/head/title\' />\n-    <replace content=\'//h1[class=documentFirstHeading]\' theme=\'/html/body/h1\' />\n-    <after content=\'/html/head/link\' theme-children=\'/html/head\' />\n+  <replace content="/html/head/title"\n+           theme="/html/head/title"\n+  />\n+  <replace content="//h1[class=documentFirstHeading]"\n+           theme="/html/body/h1"\n+  />\n+  <after content="/html/head/link"\n+         theme-children="/html/head"\n+  />\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/nonascii.xml b/src/plone/app/theming/tests/nonascii.xml\nindex b441d324..3d02144b 100644\n--- a/src/plone/app/theming/tests/nonascii.xml\n+++ b/src/plone/app/theming/tests/nonascii.xml\n@@ -1,8 +1,13 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules xmlns="http://namespaces.plone.org/diazo" xmlns:css="http://namespaces.plone.org/diazo/css">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+>\n \n-    <theme href="python://plone.app.theming.tests/french.html" />\n+  <theme href="python://plone.app.theming.tests/french.html" />\n \n-    <replace content=\'//*[@id="content"]/text()\' css:theme-children=\'#content\' href="/french" />\n+  <replace content=\'//*[@id="content"]/text()\'\n+           css:theme-children="#content"\n+           href="/french"\n+  />\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/otherrules.xml b/src/plone/app/theming/tests/otherrules.xml\nindex e13ab58c..0ac448fb 100644\n--- a/src/plone/app/theming/tests/otherrules.xml\n+++ b/src/plone/app/theming/tests/otherrules.xml\n@@ -1,10 +1,18 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules xmlns="http://namespaces.plone.org/diazo" xmlns:css="http://namespaces.plone.org/diazo/css">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+>\n \n-    <theme href="othertheme.html" />\n+  <theme href="othertheme.html" />\n \n-    <replace content=\'/html/head/title\' theme=\'/html/head/title\' />\n-    <replace content=\'//h1[class=documentFirstHeading]\' theme=\'/html/body/h1\' />\n-    <after content=\'/html/head/link\' theme-children=\'/html/head\' />\n+  <replace content="/html/head/title"\n+           theme="/html/head/title"\n+  />\n+  <replace content="//h1[class=documentFirstHeading]"\n+           theme="/html/body/h1"\n+  />\n+  <after content="/html/head/link"\n+         theme-children="/html/head"\n+  />\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/paramrules.xml b/src/plone/app/theming/tests/paramrules.xml\nindex d4cbfc55..211d7d3b 100644\n--- a/src/plone/app/theming/tests/paramrules.xml\n+++ b/src/plone/app/theming/tests/paramrules.xml\n@@ -1,27 +1,39 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules\n-    xmlns="http://namespaces.plone.org/diazo"\n-    xmlns:css="http://namespaces.plone.org/diazo/css"\n-    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+       xmlns:xsl="http://www.w3.org/1999/XSL/Transform"\n+>\n \n-    <theme href="python://plone.app.theming/tests/theme.html" />\n-    <theme href="python://plone.app.theming/tests/othertheme.html" if-path="news"/>\n+  <theme href="python://plone.app.theming/tests/theme.html" />\n+  <theme href="python://plone.app.theming/tests/othertheme.html"\n+         if-path="news"\n+  />\n \n-    <replace content=\'/html/head/title\' theme=\'/html/head/title\' />\n-    <replace content=\'//h1[class=documentFirstHeading]\' theme=\'/html/body/h1\' />\n-    <after content=\'/html/head/link\' theme-children=\'/html/head\' />\n+  <replace content="/html/head/title"\n+           theme="/html/head/title"\n+  />\n+  <replace content="//h1[class=documentFirstHeading]"\n+           theme="/html/body/h1"\n+  />\n+  <after content="/html/head/link"\n+         theme-children="/html/head"\n+  />\n \n-    <after theme-children="/html/head">\n-        <script><xsl:value-of select="$stringParam" /></script>\n-    </after>\n-    <after theme-children="/html/head" if="$boolParam">\n-        <script>bool param on</script>\n-    </after>\n-    <after theme-children="/html/head" if="$requestParam = \'on\'">\n-        <script>request param on</script>\n-    </after>\n-    <after theme-children="/html/head">\n-        <script id="contextParam"><xsl:value-of select="$contextParam" /></script>\n-    </after>\n+  <after theme-children="/html/head">\n+    <script><xsl:value-of select="$stringParam" /></script>\n+  </after>\n+  <after if="$boolParam"\n+         theme-children="/html/head"\n+  >\n+    <script>bool param on</script>\n+  </after>\n+  <after if="$requestParam = \'on\'"\n+         theme-children="/html/head"\n+  >\n+    <script>request param on</script>\n+  </after>\n+  <after theme-children="/html/head">\n+    <script id="contextParam"><xsl:value-of select="$contextParam" /></script>\n+  </after>\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/resources/css-js.xml b/src/plone/app/theming/tests/resources/css-js.xml\nindex d0227cfb..c5f44142 100644\n--- a/src/plone/app/theming/tests/resources/css-js.xml\n+++ b/src/plone/app/theming/tests/resources/css-js.xml\n@@ -1,9 +1,17 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules xmlns="http://namespaces.plone.org/diazo" xmlns:css="http://namespaces.plone.org/diazo/css">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+>\n \n-    <theme href="theme.html" />\n+  <theme href="theme.html" />\n \n-    <after theme-children=\'/html/head\' content=\'/html/body/style\' href=\'/++theme++plone.app.theming.tests/resource.css\' />\n-    <after theme-children=\'/html/head\' content=\'/html/body/script\' href=\'/++theme++plone.app.theming.tests/resource.js\' />\n+  <after content="/html/body/style"\n+         href="/++theme++plone.app.theming.tests/resource.css"\n+         theme-children="/html/head"\n+  />\n+  <after content="/html/body/script"\n+         href="/++theme++plone.app.theming.tests/resource.js"\n+         theme-children="/html/head"\n+  />\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/resources/nonascii.xml b/src/plone/app/theming/tests/resources/nonascii.xml\nindex d576018a..dd83da18 100644\n--- a/src/plone/app/theming/tests/resources/nonascii.xml\n+++ b/src/plone/app/theming/tests/resources/nonascii.xml\n@@ -1,8 +1,13 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules xmlns="http://namespaces.plone.org/diazo" xmlns:css="http://namespaces.plone.org/diazo/css">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+>\n \n-    <theme href="theme.html" />\n+  <theme href="theme.html" />\n \n-    <replace theme-children=\'/html/body\' content-children=\'/html/body\' href=\'/++theme++plone.app.theming.tests/nonascii.html\' />\n+  <replace content-children="/html/body"\n+           href="/++theme++plone.app.theming.tests/nonascii.html"\n+           theme-children="/html/body"\n+  />\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/resources/overridesrules.xml b/src/plone/app/theming/tests/resources/overridesrules.xml\nindex 9648d0c4..0b91b723 100644\n--- a/src/plone/app/theming/tests/resources/overridesrules.xml\n+++ b/src/plone/app/theming/tests/resources/overridesrules.xml\n@@ -1,15 +1,25 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules\n-    xmlns="http://namespaces.plone.org/diazo"\n-    xmlns:css="http://namespaces.plone.org/diazo/css"\n-    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+       xmlns:xsl="http://www.w3.org/1999/XSL/Transform"\n+>\n \n-    <theme href="overridestheme.html" css:if-content="#visual-portal-wrapper" />\n+  <theme css:if-content="#visual-portal-wrapper"\n+         href="overridestheme.html"\n+  />\n \n-    <replace content=\'/html/head/title\' theme=\'/html/head/title\' />\n-    <replace content=\'//h1[class=documentFirstHeading]\' theme=\'/html/body/h1\' />\n-    <after content=\'/html/head/link\' theme-children=\'/html/head\' />\n+  <replace content="/html/head/title"\n+           theme="/html/head/title"\n+  />\n+  <replace content="//h1[class=documentFirstHeading]"\n+           theme="/html/body/h1"\n+  />\n+  <after content="/html/head/link"\n+         theme-children="/html/head"\n+  />\n \n-    <replace css:theme="#footer" css:content="#portal-colophon" />\n+  <replace css:content="#portal-colophon"\n+           css:theme="#footer"\n+  />\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/resources/rules.xml b/src/plone/app/theming/tests/resources/rules.xml\nindex e6ffca4a..2eefb93e 100644\n--- a/src/plone/app/theming/tests/resources/rules.xml\n+++ b/src/plone/app/theming/tests/resources/rules.xml\n@@ -1,18 +1,26 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules\n-    xmlns="http://namespaces.plone.org/diazo"\n-    xmlns:css="http://namespaces.plone.org/diazo/css"\n-    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+       xmlns:xsl="http://www.w3.org/1999/XSL/Transform"\n+>\n \n-    <rules css:if-content="#visual-portal-wrapper">\n+  <rules css:if-content="#visual-portal-wrapper">\n \n-        <theme href="othertheme.html" if-path="news"/>\n-        <theme href="theme.html" />\n+    <theme href="othertheme.html"\n+           if-path="news"\n+    />\n+    <theme href="theme.html" />\n \n-        <replace content=\'/html/head/title\' theme=\'/html/head/title\' />\n-        <replace content=\'//h1[class=documentFirstHeading]\' theme=\'/html/body/h1\' />\n-        <after content=\'/html/head/link\' theme-children=\'/html/head\' />\n+    <replace content="/html/head/title"\n+             theme="/html/head/title"\n+    />\n+    <replace content="//h1[class=documentFirstHeading]"\n+             theme="/html/body/h1"\n+    />\n+    <after content="/html/head/link"\n+           theme-children="/html/head"\n+    />\n \n-    </rules>\n+  </rules>\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/rules.xml b/src/plone/app/theming/tests/rules.xml\nindex 641c15a4..2baf18f9 100644\n--- a/src/plone/app/theming/tests/rules.xml\n+++ b/src/plone/app/theming/tests/rules.xml\n@@ -1,18 +1,26 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules\n-    xmlns="http://namespaces.plone.org/diazo"\n-    xmlns:css="http://namespaces.plone.org/diazo/css"\n-    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+       xmlns:xsl="http://www.w3.org/1999/XSL/Transform"\n+>\n \n-    <rules css:if-content="#visual-portal-wrapper">\n+  <rules css:if-content="#visual-portal-wrapper">\n \n-        <theme href="python://plone.app.theming/tests/othertheme.html" if-path="news"/>\n-        <theme href="python://plone.app.theming/tests/theme.html" />\n+    <theme href="python://plone.app.theming/tests/othertheme.html"\n+           if-path="news"\n+    />\n+    <theme href="python://plone.app.theming/tests/theme.html" />\n \n-        <replace content=\'/html/head/title\' theme=\'/html/head/title\' />\n-        <replace content=\'//h1[class=documentFirstHeading]\' theme=\'/html/body/h1\' />\n-        <after content=\'/html/head/link\' theme-children=\'/html/head\' />\n+    <replace content="/html/head/title"\n+             theme="/html/head/title"\n+    />\n+    <replace content="//h1[class=documentFirstHeading]"\n+             theme="/html/body/h1"\n+    />\n+    <after content="/html/head/link"\n+           theme-children="/html/head"\n+    />\n \n-    </rules>\n+  </rules>\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/secondary-theme/rules.xml b/src/plone/app/theming/tests/secondary-theme/rules.xml\nindex 78ae654f..749fb9e9 100644\n--- a/src/plone/app/theming/tests/secondary-theme/rules.xml\n+++ b/src/plone/app/theming/tests/secondary-theme/rules.xml\n@@ -1,7 +1,7 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules\n-    xmlns="http://namespaces.plone.org/diazo"\n-    xmlns:css="http://namespaces.plone.org/diazo/css"\n-    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+       xmlns:xsl="http://www.w3.org/1999/XSL/Transform"\n+>\n \n </rules>\ndiff --git a/src/plone/app/theming/themes.zcml b/src/plone/app/theming/themes.zcml\nindex bdadcf59..929b2102 100644\n--- a/src/plone/app/theming/themes.zcml\n+++ b/src/plone/app/theming/themes.zcml\n@@ -1,11 +1,12 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:plone="http://namespaces.plone.org/plone">\n+    xmlns:plone="http://namespaces.plone.org/plone"\n+    >\n \n-    <plone:static\n-        type="theme"\n-        name="template"\n-        directory="themes/template"\n-        />\n+  <plone:static\n+      directory="themes/template"\n+      name="template"\n+      type="theme"\n+      />\n \n </configure>\ndiff --git a/src/plone/app/theming/themes/template/rules.xml b/src/plone/app/theming/themes/template/rules.xml\nindex 0e8da005..8f57b7e1 100644\n--- a/src/plone/app/theming/themes/template/rules.xml\n+++ b/src/plone/app/theming/themes/template/rules.xml\n@@ -1,32 +1,42 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules\n-    xmlns="http://namespaces.plone.org/diazo"\n-    xmlns:css="http://namespaces.plone.org/diazo/css"\n-    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n-\n-    <!-- Apply the following rules to standard Plone pages -->\n-    <rules css:if-content="#visual-portal-wrapper">\n-\n-        <theme href="index.html" />\n-\n-        <!-- Replace title with Plone\'s page title  -->\n-        <replace css:theme="html head title" css:content="html head title" />\n-\n-        <!-- Copy base tag from Plone -->\n-        <before css:theme-children="html head" css:content="html head base" />\n-\n-        <!-- Copy link, style, meta tags from Plone head -->\n-        <after css:theme-children="html head"\n-               content="/html/head/link | /html/head/style | /html/head/meta" />\n-\n-        <!-- merge classes from Plone body with theme body -->\n-        <merge attributes="class" css:theme="body" css:content="body" />\n-\n-        <!-- Copy script tags from Plone head to end of body -->\n-        <after css:theme-children="html body" css:content="html head script" />\n-\n-        <!-- Insert your own rules here -->\n-\n-    </rules>\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+       xmlns:xsl="http://www.w3.org/1999/XSL/Transform"\n+>\n+\n+  <!-- Apply the following rules to standard Plone pages -->\n+  <rules css:if-content="#visual-portal-wrapper">\n+\n+    <theme href="index.html" />\n+\n+    <!-- Replace title with Plone\'s page title  -->\n+    <replace css:content="html head title"\n+             css:theme="html head title"\n+    />\n+\n+    <!-- Copy base tag from Plone -->\n+    <before css:content="html head base"\n+            css:theme-children="html head"\n+    />\n+\n+    <!-- Copy link, style, meta tags from Plone head -->\n+    <after content="/html/head/link | /html/head/style | /html/head/meta"\n+           css:theme-children="html head"\n+    />\n+\n+    <!-- merge classes from Plone body with theme body -->\n+    <merge attributes="class"\n+           css:content="body"\n+           css:theme="body"\n+    />\n+\n+    <!-- Copy script tags from Plone head to end of body -->\n+    <after css:content="html head script"\n+           css:theme-children="html body"\n+    />\n+\n+    <!-- Insert your own rules here -->\n+\n+  </rules>\n \n </rules>\n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-03-18T01:27:56+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/f4613b912a633fa6773014270a240e4ada8896fb

chore: zpretty PT

Files changed:
M resources/theme/theme1/othertheme.html
M resources/theme/theme1/overrides/plone.app.layout.viewlets.colophon.pt
M resources/theme/theme1/theme.html
M resources/theme/theme1/views/class-view.pt
M resources/theme/theme1/views/context-view.pt
M resources/theme/theme1/views/name-view.pt
M resources/theme/theme1/views/permission-view.pt
M resources/theme/theme1/views/test-view.pt
M src/plone/app/theming/browser/controlpanel.pt
M src/plone/app/theming/browser/theme-error.pt
M src/plone/app/theming/tests/french.html
M src/plone/app/theming/tests/includes.html
M src/plone/app/theming/tests/nonascii.html
M src/plone/app/theming/tests/notheme.pt
M src/plone/app/theming/tests/one.html
M src/plone/app/theming/tests/othertheme.html
M src/plone/app/theming/tests/resources/nonascii.html
M src/plone/app/theming/tests/resources/othertheme.html
M src/plone/app/theming/tests/resources/overridestheme.html
M src/plone/app/theming/tests/resources/theme.html
M src/plone/app/theming/tests/theme.html
M src/plone/app/theming/tests/two.html
M src/plone/app/theming/themes/template/index.html

b'diff --git a/resources/theme/theme1/othertheme.html b/resources/theme/theme1/othertheme.html\nindex 24c9a41c..db7304e2 100644\n--- a/resources/theme/theme1/othertheme.html\n+++ b/resources/theme/theme1/othertheme.html\n@@ -1,9 +1,9 @@\n <html>\n-<head>\n+  <head>\n     <title>Title</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n     <h1 id="pageTitle">Page title</h1>\n     <p>This is the other theme.</p>\n-</body>\n-</html>\n\\ No newline at end of file\n+  </body>\n+</html>\ndiff --git a/resources/theme/theme1/overrides/plone.app.layout.viewlets.colophon.pt b/resources/theme/theme1/overrides/plone.app.layout.viewlets.colophon.pt\nindex 218c3491..3fb1ed84 100644\n--- a/resources/theme/theme1/overrides/plone.app.layout.viewlets.colophon.pt\n+++ b/resources/theme/theme1/overrides/plone.app.layout.viewlets.colophon.pt\n@@ -1,19 +1,22 @@\n <div id="portal-colophon"\n      metal:define-macro="colophon"\n-     i18n:domain="plone">\n-<metal:slot define-slot="colophon" />\n-<div class="colophonWrapper">\n-<ul>\n-  <li>\n-    <a href="http://plone.com" target="_blank"\n-       title="This site was built using the Plone Open Source CMS/WCM."\n-       i18n:attributes="title title_built_with_plone;"\n-       i18n:translate="label_powered_by_plone">\n-      Powered by Plone &amp; Python</a>\n-  </li>\n-  <li>\n+     i18n:domain="plone"\n+>\n+  <metal:slot define-slot="colophon" />\n+  <div class="colophonWrapper">\n+    <ul>\n+      <li>\n+        <a href="http://plone.com"\n+           target="_blank"\n+           title="This site was built using the Plone Open Source CMS/WCM."\n+           i18n:attributes="title title_built_with_plone;"\n+           i18n:translate="label_powered_by_plone"\n+        >\n+          Powered by Plone &amp; Python</a>\n+      </li>\n+      <li>\n     and Diazo\n-  </li>\n-</ul>\n-</div>\n+      </li>\n+    </ul>\n+  </div>\n </div>\ndiff --git a/resources/theme/theme1/theme.html b/resources/theme/theme1/theme.html\nindex 0aca0c50..4c31f86d 100644\n--- a/resources/theme/theme1/theme.html\n+++ b/resources/theme/theme1/theme.html\n@@ -1,10 +1,10 @@\n <html>\n-<head>\n+  <head>\n     <title>Title</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n     <h1 id="pageTitle">Page title</h1>\n     <p>This is the theme.</p>\n     <img src="relative.jpg" />\n     <div id="footer">footer</div>\n-</body>\n+  </body></html>\ndiff --git a/resources/theme/theme1/views/class-view.pt b/resources/theme/theme1/views/class-view.pt\nindex 27b978aa..e048588d 100644\n--- a/resources/theme/theme1/views/class-view.pt\n+++ b/resources/theme/theme1/views/class-view.pt\n@@ -1,95 +1,121 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+<html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       lang="en"\n       metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n \n-<head>\n+  <head>\n     <metal:block fill-slot="top_slot"\n-                 tal:define="dummy python:request.set(\'disable_border\',1);\n-                             disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n-                             disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);" />\n-</head>\n+                 tal:define="\n+                   dummy python:request.set(\'disable_border\',1);\n+                   disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n+                   disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);\n+                 "\n+    />\n+  </head>\n \n-<body>\n+  <body>\n \n-<tal:comment replace="nothing">\n+    <tal:comment replace="nothing">\n     Please note that this template fills the "content" slot instead of the\n     "main" slot, this is done so we can provide stuff like the content\n     tabs. This also means that we have to supply things that are normally\n     present from main_template.\n-</tal:comment>\n+    </tal:comment>\n \n-<metal:main fill-slot="content">\n-    <tal:main-macro metal:define-macro="main"\n-                    tal:define="memberinfo context/portal_membership/getMemberInfo;\n-                                member context/@@plone_portal_state/member;\n-                                name python:memberinfo[\'fullname\'] or member.getId() or member.getId();\n-                                portal_url context/portal_url">\n+    <metal:main fill-slot="content">\n+      <tal:main-macro metal:define-macro="main"\n+                      tal:define="\n+                        memberinfo context/portal_membership/getMemberInfo;\n+                        member context/@@plone_portal_state/member;\n+                        name python:memberinfo[\'fullname\'] or member.getId() or member.getId();\n+                        portal_url context/portal_url;\n+                      "\n+      >\n \n \n \n-        <div id="edit-bar" tal:condition="view/can_edit">\n-            <h5 class="hiddenStructure">Views</h5>\n+        <div id="edit-bar"\n+             tal:condition="view/can_edit"\n+        >\n+          <h5 class="hiddenStructure">Views</h5>\n \n-            <ul id="content-views"\n-                class="contentViews">\n-              <li class="selected">\n-                <a href=""\n-                   tal:attributes="href string:${context/@@plone_portal_state/navigation_root_url}/dashboard"\n-                   i18n:translate="label_dashboard">Dashboard</a>\n-              </li>\n-              <li>\n-                <a href=""\n-                   tal:attributes="href string:${context/@@plone_portal_state/navigation_root_url}/@@manage-dashboard"\n-                   i18n:translate="label_edit">Edit</a>\n-              </li>\n-            </ul>\n+          <ul class="contentViews"\n+              id="content-views"\n+          >\n+            <li class="selected">\n+              <a href=""\n+                 tal:attributes="\n+                   href string:${context/@@plone_portal_state/navigation_root_url}/dashboard;\n+                 "\n+                 i18n:translate="label_dashboard"\n+              >Dashboard</a>\n+            </li>\n+            <li>\n+              <a href=""\n+                 tal:attributes="\n+                   href string:${context/@@plone_portal_state/navigation_root_url}/@@manage-dashboard;\n+                 "\n+                 i18n:translate="label_edit"\n+              >Edit</a>\n+            </li>\n+          </ul>\n \n-            <div class="contentActions" tal:condition="view/can_edit">\n+          <div class="contentActions"\n+               tal:condition="view/can_edit"\n+          >\n               &nbsp;\n-            </div>\n+          </div>\n         </div>\n \n         <div metal:use-macro="context/global_statusmessage/macros/portal_message">\n             Portal status message\n         </div>\n-        <dl tal:condition="python:view.empty() and view.can_edit()"\n-            class="portalMessage info visualClear" id="dashboard-info-message">\n-            <dt i18n:translate="">Info</dt>\n-            <dd i18n:translate="info_empty_dashboard">\n+        <dl class="portalMessage info visualClear"\n+            id="dashboard-info-message"\n+            tal:condition="python:view.empty() and view.can_edit()"\n+        >\n+          <dt i18n:translate="">Info</dt>\n+          <dd i18n:translate="info_empty_dashboard">\n                 Your dashboard is currently empty. Click the\n-                <em>edit</em> tab to assign some personal\n+            <em>edit</em>\n+             tab to assign some personal\n                 portlets.\n-            </dd>\n+          </dd>\n         </dl>\n \n         <div id="content">\n \n-            <h1 class="documentFirstHeading">\n+          <h1 class="documentFirstHeading">\n                 Diazo w0z 3r3\n-            </h1>\n+          </h1>\n \n-            <div id="content-core">\n-                <div id="dashboard">\n-                    <div class="visualClear"><!-- --></div>\n-                    <div id="dashboard-portlets1"\n-                      tal:content="structure provider:plone.dashboard1" />\n-                    <div id="dashboard-portlets2"\n-                      tal:content="structure provider:plone.dashboard2" />\n-                    <div id="dashboard-portlets3"\n-                      tal:content="structure provider:plone.dashboard3" />\n-                    <div id="dashboard-portlets4"\n-                      tal:content="structure provider:plone.dashboard4" />\n-                </div>\n-                <div class="visualClear"><!-- --></div>\n+          <div id="content-core">\n+            <div id="dashboard">\n+              <div class="visualClear"><!-- --></div>\n+              <div id="dashboard-portlets1"\n+                   tal:content="structure provider:plone.dashboard1"\n+              ></div>\n+              <div id="dashboard-portlets2"\n+                   tal:content="structure provider:plone.dashboard2"\n+              ></div>\n+              <div id="dashboard-portlets3"\n+                   tal:content="structure provider:plone.dashboard3"\n+              ></div>\n+              <div id="dashboard-portlets4"\n+                   tal:content="structure provider:plone.dashboard4"\n+              ></div>\n             </div>\n+            <div class="visualClear"><!-- --></div>\n+          </div>\n         </div>\n \n-    </tal:main-macro>\n-</metal:main>\n+      </tal:main-macro>\n+    </metal:main>\n \n-</body>\n+  </body>\n </html>\ndiff --git a/resources/theme/theme1/views/context-view.pt b/resources/theme/theme1/views/context-view.pt\nindex 0d60a019..6a41c8dc 100644\n--- a/resources/theme/theme1/views/context-view.pt\n+++ b/resources/theme/theme1/views/context-view.pt\n@@ -1,6 +1,6 @@\n <html>\n-<body>\n+  <body>\n     <h1>Context view</h1>\n     <div tal:content="context/Title | nothing">title here</div>\n-</body>\n-</html>\n\\ No newline at end of file\n+  </body>\n+</html>\ndiff --git a/resources/theme/theme1/views/name-view.pt b/resources/theme/theme1/views/name-view.pt\nindex e4ebb1af..3f413c81 100644\n--- a/resources/theme/theme1/views/name-view.pt\n+++ b/resources/theme/theme1/views/name-view.pt\n@@ -1,6 +1,6 @@\n <html>\n-<body>\n+  <body>\n     <h1>Name view</h1>\n     <div tal:content="context/Title | nothing">title here</div>\n-</body>\n-</html>\n\\ No newline at end of file\n+  </body>\n+</html>\ndiff --git a/resources/theme/theme1/views/permission-view.pt b/resources/theme/theme1/views/permission-view.pt\nindex fff37719..1cdd15cb 100644\n--- a/resources/theme/theme1/views/permission-view.pt\n+++ b/resources/theme/theme1/views/permission-view.pt\n@@ -1,6 +1,6 @@\n <html>\n-<body>\n+  <body>\n     <h1>Permission view</h1>\n     <div tal:content="context/Title | nothing">title here</div>\n-</body>\n-</html>\n\\ No newline at end of file\n+  </body>\n+</html>\ndiff --git a/resources/theme/theme1/views/test-view.pt b/resources/theme/theme1/views/test-view.pt\nindex 7931fc1d..55238aef 100644\n--- a/resources/theme/theme1/views/test-view.pt\n+++ b/resources/theme/theme1/views/test-view.pt\n@@ -1,6 +1,6 @@\n <html>\n-<body>\n+  <body>\n     <h1>Test view</h1>\n     <div tal:content="context/Title | nothing">title here</div>\n-</body>\n-</html>\n\\ No newline at end of file\n+  </body>\n+</html>\ndiff --git a/src/plone/app/theming/browser/controlpanel.pt b/src/plone/app/theming/browser/controlpanel.pt\nindex 09326437..736c6c6a 100644\n--- a/src/plone/app/theming/browser/controlpanel.pt\n+++ b/src/plone/app/theming/browser/controlpanel.pt\n@@ -1,68 +1,86 @@\n <tal:doctype tal:replace="structure string:&lt;!DOCTYPE html&gt;" />\n \n <html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      tal:define="\n+        portal_state context/@@plone_portal_state;\n+        plone_view context/@@plone;\n+        plone_layout context/@@plone_layout;\n+        lang portal_state/language;\n+        view nocall:view | nocall: plone_view;\n+        portal_url portal_state/portal_url;\n+        ajax_load python:False;\n+        dummy python: request.set(\'disable_toolbar\', True);\n+        site_url view/site_url;\n+      "\n+      tal:attributes="\n+        lang lang;\n+      "\n       i18n:domain="plone"\n-      tal:define="portal_state context/@@plone_portal_state;\n-          plone_view context/@@plone;\n-          plone_layout context/@@plone_layout;\n-          lang portal_state/language;\n-          view nocall:view | nocall: plone_view;\n-          portal_url portal_state/portal_url;\n-          ajax_load python:False;\n-          dummy python: request.set(\'disable_toolbar\', True);\n-          site_url view/site_url"\n-      tal:attributes="lang lang;">\n-\n-    <metal:cache tal:replace="structure provider:plone.httpheaders" />\n+>\n+\n+  <metal:cache tal:replace="structure provider:plone.httpheaders" />\n \n   <head>\n     <meta charset="utf-8" />\n \n-    <div tal:replace="structure provider:plone.htmlhead" />\n+    <div tal:replace="structure provider:plone.htmlhead"></div>\n     <link tal:replace="structure provider:plone.htmlhead.links" />\n-    <link\n-        rel="stylesheet"\n-        type="text/css"\n-        tal:attributes="href string:${context/portal_url}/++theme++barceloneta/css/barceloneta.min.css"\n-        />\n-    <link\n-        rel="stylesheet"\n-        type="text/css"\n-        tal:attributes="href string:${context/portal_url}/++resource++plone.app.theming/controlpanel.css"\n-        />\n+    <link rel="stylesheet"\n+          type="text/css"\n+          tal:attributes="\n+            href string:${context/portal_url}/++theme++barceloneta/css/barceloneta.min.css;\n+          "\n+    />\n+    <link rel="stylesheet"\n+          type="text/css"\n+          tal:attributes="\n+            href string:${context/portal_url}/++resource++plone.app.theming/controlpanel.css;\n+          "\n+    />\n \n     <tal:comment replace="nothing">\n         Various slots where you can insert elements in the header from a template.\n     </tal:comment>\n \n-    <div tal:replace="structure provider:plone.scripts" />\n+    <div tal:replace="structure provider:plone.scripts"></div>\n \n-    <meta name="generator" content="Plone - http://plone.org" />\n+    <meta name="generator"\n+          content="Plone - http://plone.org"\n+    />\n \n   </head>\n \n-  <body tal:define="isRTL portal_state/is_rtl;\n-                    sl python:plone_layout.have_portlets(\'plone.leftcolumn\', view);\n-                    sr python:plone_layout.have_portlets(\'plone.rightcolumn\', view);\n-                    body_class python:plone_layout.bodyClass(template, view);"\n-        tal:attributes="class body_class;\n-                        dir python:isRTL and \'rtl\' or \'ltr\';\n-                        python:plone_view.patterns_settings()"\n-        id="visual-portal-wrapper">\n-\n-    <div tal:replace="structure provider:plone.toolbar" />\n+  <body id="visual-portal-wrapper"\n+        tal:define="\n+          isRTL portal_state/is_rtl;\n+          sl python:plone_layout.have_portlets(\'plone.leftcolumn\', view);\n+          sr python:plone_layout.have_portlets(\'plone.rightcolumn\', view);\n+          body_class python:plone_layout.bodyClass(template, view);\n+        "\n+        tal:attributes="\n+          class body_class;\n+          dir python:isRTL and \'rtl\' or \'ltr\';\n+          python:plone_view.patterns_settings();\n+        "\n+  >\n+\n+    <div tal:replace="structure provider:plone.toolbar"></div>\n \n     <aside id="global_statusmessage">\n-      <div class="portalMessage info" role="status">\n+      <div class="portalMessage info"\n+           role="status"\n+      >\n         <strong i18n:translate="">Note</strong>\n-        <span tal:omit-tag="" i18n:translate="description_notheme_controlpanel">\n+        <span tal:omit-tag=""\n+              i18n:translate="description_notheme_controlpanel"\n+        >\n           Please note that this control panel page will never be themed.\n         </span>\n       </div>\n-      <tal:message tal:content="structure provider:plone.globalstatusmessage"/>\n+      <tal:message tal:content="structure provider:plone.globalstatusmessage" />\n     </aside>\n \n \n@@ -73,305 +91,444 @@\n         <article id="content">\n \n           <header>\n-            <div id="viewlet-above-content-title" tal:content="structure provider:plone.abovecontenttitle" />\n+            <div id="viewlet-above-content-title"\n+                 tal:content="structure provider:plone.abovecontenttitle"\n+            ></div>\n             <h1 class="documentFirstHeading"\n-                i18n:translate="heading_theme_settings">Theme settings</h1>\n-\n-            <a id="setup-link" class="link-parent"\n-                tal:attributes="href string:$site_url/@@overview-controlpanel"\n-                i18n:translate="">\n+                i18n:translate="heading_theme_settings"\n+            >Theme settings</h1>\n+\n+            <a class="link-parent"\n+               id="setup-link"\n+               tal:attributes="\n+                 href string:$site_url/@@overview-controlpanel;\n+               "\n+               i18n:translate=""\n+            >\n               Site Setup\n             </a>\n           </header>\n \n           <section id="content-core">\n \n-<div id="themeControlPanel" class="pat-autotoc autotabs"\n-    data-pat-autotoc="section:section;levels:h2;">\n+            <div class="pat-autotoc autotabs"\n+                 id="themeControlPanel"\n+                 data-pat-autotoc="section:section;levels:h2;"\n+            >\n \n-    <section>\n-        <h2 i18n:translate="">Themes</h2>\n+              <section>\n+                <h2 i18n:translate="">Themes</h2>\n \n-        <p i18n:translate="description_basic_settings">\n+                <p i18n:translate="description_basic_settings">\n             Use the buttons to create or upload a new Diazo theme,\n             or select an existing theme from a the list below.\n-        </p>\n+                </p>\n \n-        <div class="m-1">\n-            <!-- <a href="#overlay-new-theme" class="btn btn-large btn-primary pat-plone-modal"\n+                <div class="m-1">\n+                  <!-- <a href="#overlay-new-theme" class="btn btn-large btn-primary pat-plone-modal"\n                 data-pat-plone-modal="width: 80%"\n                 i18n:translate="">New theme</a> -->\n \n-            <a href="#overlay-upload" class="btn btn-large btn-primary pat-plone-modal"\n-                data-pat-plone-modal="width: 80%"\n-                i18n:translate="">Upload Zip file</a>\n-\n-            <a tal:attributes="href string:$site_url/test_rendering#top"\n-                class="btn btn-large btn-primary"\n-                target="_blank"\n-                i18n:translate="">Test Styles</a>\n-\n-            <a tal:attributes="href string:$site_url/@@theming-controlpanel-help"\n-                class="btn btn-large btn-primary pat-plone-modal"\n-                data-pat-plone-modal="\n+                  <a class="btn btn-large btn-primary pat-plone-modal"\n+                     href="#overlay-upload"\n+                     data-pat-plone-modal="width: 80%"\n+                     i18n:translate=""\n+                  >Upload Zip file</a>\n+\n+                  <a class="btn btn-large btn-primary"\n+                     target="_blank"\n+                     tal:attributes="\n+                       href string:$site_url/test_rendering#top;\n+                     "\n+                     i18n:translate=""\n+                  >Test Styles</a>\n+\n+                  <a class="btn btn-large btn-primary pat-plone-modal"\n+                     data-pat-plone-modal="\n                     width: 85%;\n                     loadLinksWithinModal: true;\n                     content: .content"\n-                i18n:translate="">Help</a>\n-        </div>\n+                     tal:attributes="\n+                       href string:$site_url/@@theming-controlpanel-help;\n+                     "\n+                     i18n:translate=""\n+                  >Help</a>\n+                </div>\n \n-        <div id="themesList">\n+                <div id="themesList">\n \n-            <div class="themeEntry"\n-                tal:repeat="theme view/themeList"\n-                tal:attributes="class python:theme[\'selected\'] and \'themeEntry activeThemeEntry\' or \'themeEntry\';\n-                                id string:themeEntry-${theme/name};\n-                                data-theme theme/name;\n-                                data-theme-title theme/title;">\n+                  <div class="themeEntry"\n+                       tal:repeat="theme view/themeList"\n+                       tal:attributes="\n+                         class python:theme[\'selected\'] and \'themeEntry activeThemeEntry\' or \'themeEntry\';\n+                         id string:themeEntry-${theme/name};\n+                         data-theme theme/name;\n+                         data-theme-title theme/title;\n+                       "\n+                  >\n \n-                <div clas="themeEntryDetail">\n+                    <div clas="themeEntryDetail">\n \n-                    <span class="themeEntryTitle">\n+                      <span class="themeEntryTitle">\n                         <span tal:replace="theme/title">Title</span>\n-                        <span class="warning" tal:condition="theme/override" i18n:translate="">(this theme overrides a filesystem theme)</span>\n-                        <span\n-                            tal:condition="theme/selected"\n-                            class="themeActive"\n-                            i18n:translate="">(active)</span>\n-                    </span>\n-\n-                    <div class="themeEntryWrapper">\n+                        <span class="warning"\n+                              tal:condition="theme/override"\n+                              i18n:translate=""\n+                        >(this theme overrides a filesystem theme)</span>\n+                        <span class="themeActive"\n+                              tal:condition="theme/selected"\n+                              i18n:translate=""\n+                        >(active)</span>\n+                      </span>\n+\n+                      <div class="themeEntryWrapper">\n \n                         <div class="previewImageContainer">\n-                            <img tal:attributes="src theme/preview" />\n+                          <img tal:attributes="\n+                                 src theme/preview;\n+                               " />\n                         </div>\n \n-                        <div class="themeDescription" tal:content="theme/description" />\n+                        <div class="themeDescription"\n+                             tal:content="theme/description"\n+                        ></div>\n \n                         <div class="themeEntryControls">\n \n-                            <form method="post" tal:attributes="action request/URL">\n-                                <input tal:replace="structure context/@@authenticator/authenticator" />\n-                                <input type="hidden" name="themeName" tal:attributes="value theme/name" />\n-                                <button\n+                          <form method="post"\n+                                tal:attributes="\n+                                  action request/URL;\n+                                "\n+                          >\n+                            <input tal:replace="structure context/@@authenticator/authenticator" />\n+                            <input name="themeName"\n+                                   type="hidden"\n+                                   tal:attributes="\n+                                     value theme/name;\n+                                   "\n+                            />\n+                            <button class="btn btn-outline-primary btn-light btn-sm"\n+                                    name="form.button.Enable"\n+                                    type="submit"\n                                     tal:condition="not:theme/selected"\n                                     i18n:translate=""\n-                                    class="btn btn-outline-primary btn-light btn-sm"\n+                            >Activate</button>\n+                            <button class="btn btn-outline-primary btn-light btn-sm"\n+                                    name="form.button.Enable"\n                                     type="submit"\n-                                    name="form.button.Enable">Activate</button>\n-                                <button\n                                     tal:condition="theme/selected"\n                                     i18n:translate=""\n-                                    class="btn btn-outline-primary btn-light btn-sm"\n+                            >Update</button>\n+                            <button class="btn btn-outline-primary btn-light btn-sm"\n+                                    name="form.button.Disable"\n                                     type="submit"\n-                                    name="form.button.Enable">Update</button>\n-                                <button\n                                     tal:condition="theme/selected"\n                                     i18n:translate=""\n-                                    class="btn btn-outline-primary btn-light btn-sm"\n+                            >Deactivate</button>\n+                            <button class="btn btn-outline-primary btn-light btn-sm"\n+                                    name="form.button.InvalidateCache"\n                                     type="submit"\n-                                    name="form.button.Disable">Deactivate</button>\n-                                <button\n                                     tal:condition="theme/selected"\n                                     i18n:translate=""\n-                                    class="btn btn-outline-primary btn-light btn-sm"\n-                                    type="submit"\n-                                    name="form.button.InvalidateCache">Clear Cache</button>\n-                            </form>\n-\n-                            <form method="get" target="_blank" tal:attributes="action string:${context/absolute_url}/++theme++${theme/name}/@@download-zip">\n-                                <button i18n:translate=""\n-                                    class="btn btn-outline-primary btn-light btn-sm">Download</button>\n-                            </form>\n-\n-                            <a href="#" class="btn btn-danger pat-plone-modal"\n-                                tal:condition="theme/editable"\n-                                tal:attributes="href string:#modal-delete-${theme/name}"\n-                                i18n:translate="">Delete</a>\n-                                <!-- Delete confirmation overlay -->\n-                            <div class="plone-modal"\n-                                style="display:none"\n-                                tal:attributes="id string:modal-delete-${theme/name}"\n-                                tal:condition="theme/editable">\n-                                <h1 class="documentFirstHeading" i18n:translate="theming_controlpanel_delete_confirm">\n-                                    Are you sure you want to delete <span\n-                                        tal:content="string:${theme/name}"\n-                                        i18n:name="theme_name"></span>\n-                                </h1>\n-\n-                                <p class="documentDescription" i18n:translate="theming_controlpanel_delete_confirm_description">\n+                            >Clear Cache</button>\n+                          </form>\n+\n+                          <form method="get"\n+                                target="_blank"\n+                                tal:attributes="\n+                                  action string:${context/absolute_url}/++theme++${theme/name}/@@download-zip;\n+                                "\n+                          >\n+                            <button class="btn btn-outline-primary btn-light btn-sm"\n+                                    i18n:translate=""\n+                            >Download</button>\n+                          </form>\n+\n+                          <a class="btn btn-danger pat-plone-modal"\n+                             href="#"\n+                             tal:condition="theme/editable"\n+                             tal:attributes="\n+                               href string:#modal-delete-${theme/name};\n+                             "\n+                             i18n:translate=""\n+                          >Delete</a>\n+                          <!-- Delete confirmation overlay -->\n+                          <div class="plone-modal"\n+                               style="display:none"\n+                               tal:condition="theme/editable"\n+                               tal:attributes="\n+                                 id string:modal-delete-${theme/name};\n+                               "\n+                          >\n+                            <h1 class="documentFirstHeading"\n+                                i18n:translate="theming_controlpanel_delete_confirm"\n+                            >\n+                                    Are you sure you want to delete\n+                              <span tal:content="string:${theme/name}"\n+                                    i18n:name="theme_name"\n+                              ></span>\n+                            </h1>\n+\n+                            <p class="documentDescription"\n+                               i18n:translate="theming_controlpanel_delete_confirm_description"\n+                            >\n                                     This operation cannot be undone. Note that filesystem themes\n                                     cannot be deleted from within Plone.\n-                                </p>\n-\n-                                <form name="delete" method="post" tal:attributes="action request/URL">\n-                                    <input tal:replace="structure context/@@authenticator/authenticator" />\n-                                    <input type="hidden" name="themes:list"\n-                                        id="deleteConfirmTheme"\n-                                        tal:attributes="value string:${theme/name}" />\n-                                    <div class="btn-group">\n-                                        <input\n-                                            type="submit"\n-                                            name="form.button.DeleteSelected"\n-                                            class="btn btn-danger save"\n-                                            value="Delete"\n-                                            i18n:attributes="value"\n-                                            />\n-                                        <input\n-                                            type="submit"\n-                                            class="btn btn-primary cancel"\n-                                            name="form.button.Cancel"\n-                                            value="Cancel"\n-                                            i18n:attributes="value"\n-                                            />\n-                                    </div>\n-                                </form>\n-                            </div>\n+                            </p>\n+\n+                            <form method="post"\n+                                  name="delete"\n+                                  tal:attributes="\n+                                    action request/URL;\n+                                  "\n+                            >\n+                              <input tal:replace="structure context/@@authenticator/authenticator" />\n+                              <input id="deleteConfirmTheme"\n+                                     name="themes:list"\n+                                     type="hidden"\n+                                     tal:attributes="\n+                                       value string:${theme/name};\n+                                     "\n+                              />\n+                              <div class="btn-group">\n+                                <input class="btn btn-danger save"\n+                                       name="form.button.DeleteSelected"\n+                                       type="submit"\n+                                       value="Delete"\n+                                       i18n:attributes="value"\n+                                />\n+                                <input class="btn btn-primary cancel"\n+                                       name="form.button.Cancel"\n+                                       type="submit"\n+                                       value="Cancel"\n+                                       i18n:attributes="value"\n+                                />\n+                              </div>\n+                            </form>\n+                          </div>\n \n                         </div>\n \n-                    </div>\n-\n-                 </div>\n-            </div>\n+                      </div>\n \n-            <div class="visualClear"><!-- --></div>\n-\n-        </div>\n-    </section>\n-    <section>\n-        <h2 i18n:translate="">Advanced settings</h2>\n-\n-        <form\n-            name="advanced"\n-            method="post"\n-            class="pat-formunloadalert"\n-            tal:attributes="action request/URL"\n-            tal:define="errors view/errors">\n+                    </div>\n+                  </div>\n \n-            <div class="pat-autotoc autotabs"\n-                data-pat-autotoc="section:fieldset;levels:legend;">\n-                <fieldset>\n-                    <legend i18n:translate="">Theme details</legend>\n+                  <div class="visualClear"><!-- --></div>\n \n-                    <p i18n:translate="description_advanced">\n+                </div>\n+              </section>\n+              <section>\n+                <h2 i18n:translate="">Advanced settings</h2>\n+\n+                <form class="pat-formunloadalert"\n+                      method="post"\n+                      name="advanced"\n+                      tal:define="\n+                        errors view/errors;\n+                      "\n+                      tal:attributes="\n+                        action request/URL;\n+                      "\n+                >\n+\n+                  <div class="pat-autotoc autotabs"\n+                       data-pat-autotoc="section:fieldset;levels:legend;"\n+                  >\n+                    <fieldset>\n+                      <legend i18n:translate="">Theme details</legend>\n+\n+                      <p i18n:translate="description_advanced">\n                        Use the fields below to configure the Diazo theme\n                        manually. Usually, these settings are applied by\n-                       enabling a theme from the <strong>Themes</strong>\n+                       enabling a theme from the\n+                        <strong>Themes</strong>\n                        tab.\n-                    </p>\n-\n-                    <div\n-                        class="field"\n-                        tal:define="selected python:request.get(\'themeEnabled\', view.theme_settings.enabled)">\n-\n-                        <input type="hidden" value="" name="themeEnabled:boolean:default" />\n-                        <input type="checkbox" value="1" name="themeEnabled:boolean" id="themeEnabled"\n-                            tal:attributes="checked python:\'themeEnabled\' if selected else None"\n-                            />\n-                        <label for="themeEnabled" i18n:translate="label_theme_enabled">Theme enabled</label>\n-                        <div class="formHelp" i18n:translate="help_theme_enabled">\n+                      </p>\n+\n+                      <div class="field"\n+                           tal:define="\n+                             selected python:request.get(\'themeEnabled\', view.theme_settings.enabled);\n+                           "\n+                      >\n+\n+                        <input name="themeEnabled:boolean:default"\n+                               type="hidden"\n+                               value=""\n+                        />\n+                        <input id="themeEnabled"\n+                               name="themeEnabled:boolean"\n+                               type="checkbox"\n+                               value="1"\n+                               tal:attributes="\n+                                 checked python:\'themeEnabled\' if selected else None;\n+                               "\n+                        />\n+                        <label for="themeEnabled"\n+                               i18n:translate="label_theme_enabled"\n+                        >Theme enabled</label>\n+                        <div class="formHelp"\n+                             i18n:translate="help_theme_enabled"\n+                        >\n                             If enabled the currently configured Diazo theme (if any)\n                             will be applied.\n                         </div>\n \n-                    </div>\n-\n-                    <div\n-                        tal:define="error errors/rules | nothing;\n-                                    rules python:request.get(\'rules\', view.theme_settings.rules)"\n-                        tal:attributes="class python:\'field error\' if error else \'field\'">\n-\n-                        <label for="rules" i18n:translate="label_rules">Rules file</label>\n-                        <div class="formHelp" i18n:translate="help_rules">\n+                      </div>\n+\n+                      <div tal:define="\n+                             error errors/rules | nothing;\n+                             rules python:request.get(\'rules\', view.theme_settings.rules);\n+                           "\n+                           tal:attributes="\n+                             class python:\'field error\' if error else \'field\';\n+                           "\n+                      >\n+\n+                        <label for="rules"\n+                               i18n:translate="label_rules"\n+                        >Rules file</label>\n+                        <div class="formHelp"\n+                             i18n:translate="help_rules"\n+                        >\n                             Enter a path or URL for the theme rules file.\n                         </div>\n \n-                        <div class="errorMessage" tal:content="error" tal:condition="error" />\n-\n-                        <input\n-                            name="rules"\n-                            id="rules"\n-                            type="text"\n-                            size="50"\n-                            tal:attributes="value rules"\n-                            />\n-\n-                    </div>\n-\n-                    <div\n-                        tal:define="error errors/absolutePrefix | nothing;\n-                                    absolutePrefix python:request.get(\'absolutePrefix\', view.theme_settings.absolutePrefix)"\n-                        tal:attributes="class python:\'field error\' if error else \'field\'">\n-\n-                        <label for="absolutePrefix" i18n:translate="label_absolute_prefix">Absolute path prefix</label>\n-                        <div class="formHelp" i18n:translate="help_absolute_prefix">\n+                        <div class="errorMessage"\n+                             tal:condition="error"\n+                             tal:content="error"\n+                        ></div>\n+\n+                        <input id="rules"\n+                               name="rules"\n+                               size="50"\n+                               type="text"\n+                               tal:attributes="\n+                                 value rules;\n+                               "\n+                        />\n+\n+                      </div>\n+\n+                      <div tal:define="\n+                             error errors/absolutePrefix | nothing;\n+                             absolutePrefix python:request.get(\'absolutePrefix\', view.theme_settings.absolutePrefix);\n+                           "\n+                           tal:attributes="\n+                             class python:\'field error\' if error else \'field\';\n+                           "\n+                      >\n+\n+                        <label for="absolutePrefix"\n+                               i18n:translate="label_absolute_prefix"\n+                        >Absolute path prefix</label>\n+                        <div class="formHelp"\n+                             i18n:translate="help_absolute_prefix"\n+                        >\n                             If your theme uses relative paths for images, stylesheets\n                             or other resources, you can enter a prefix here to make\n                             sure these resources will work regardless of which page\n                             Plone is rendering.\n                         </div>\n \n-                        <div class="errorMessage" tal:content="error" tal:condition="error" />\n-\n-                        <input\n-                            name="absolutePrefix"\n-                            id="absolutePrefix"\n-                            type="text"\n-                            size="50"\n-                            tal:attributes="value absolutePrefix"\n-                            />\n-\n-                    </div>\n-\n-                    <div\n-                        tal:define="error errors/doctype | nothing;\n-                                    doctype python:request.get(\'doctype\', view.theme_settings.doctype)"\n-                        tal:attributes="class python:\'field error\' if error else \'field\'">\n-\n-                        <label for="doctype" i18n:translate="label_doctype">Doctype</label>\n-                        <div class="formHelp" i18n:translate="help_doctype">\n+                        <div class="errorMessage"\n+                             tal:condition="error"\n+                             tal:content="error"\n+                        ></div>\n+\n+                        <input id="absolutePrefix"\n+                               name="absolutePrefix"\n+                               size="50"\n+                               type="text"\n+                               tal:attributes="\n+                                 value absolutePrefix;\n+                               "\n+                        />\n+\n+                      </div>\n+\n+                      <div tal:define="\n+                             error errors/doctype | nothing;\n+                             doctype python:request.get(\'doctype\', view.theme_settings.doctype);\n+                           "\n+                           tal:attributes="\n+                             class python:\'field error\' if error else \'field\';\n+                           "\n+                      >\n+\n+                        <label for="doctype"\n+                               i18n:translate="label_doctype"\n+                        >Doctype</label>\n+                        <div class="formHelp"\n+                             i18n:translate="help_doctype"\n+                        >\n                             You can specify a Doctype string which will be set on\n                             the output, for example "&lt;!DOCTYPE html&gt;". If left\n                             blank the default XHTML 1.0 transistional Doctype or\n                             that set in the Diazo theme is used.\n                         </div>\n \n-                        <div class="errorMessage" tal:content="error" tal:condition="error" />\n-\n-                        <input\n-                            name="doctype"\n-                            id="doctype"\n-                            type="text"\n-                            size="50"\n-                            tal:attributes="value doctype"\n-                            />\n-\n-                    </div>\n-\n-                    <div\n-                        class="field"\n-                        tal:define="selected python:request.get(\'readNetwork\', view.theme_settings.readNetwork)">\n-\n-                        <input type="hidden" value="" name="readNetwork:boolean:default" />\n-                        <input type="checkbox" value="1" name="readNetwork:boolean" id="readNetwork"\n-                            tal:attributes="checked python:\'readNetwork\' if selected else None"\n-                            />\n-                        <label for="readNetwork" i18n:translate="label_read_network">Read network</label>\n-                        <div class="formHelp" i18n:translate="help_read_network">\n+                        <div class="errorMessage"\n+                             tal:condition="error"\n+                             tal:content="error"\n+                        ></div>\n+\n+                        <input id="doctype"\n+                               name="doctype"\n+                               size="50"\n+                               type="text"\n+                               tal:attributes="\n+                                 value doctype;\n+                               "\n+                        />\n+\n+                      </div>\n+\n+                      <div class="field"\n+                           tal:define="\n+                             selected python:request.get(\'readNetwork\', view.theme_settings.readNetwork);\n+                           "\n+                      >\n+\n+                        <input name="readNetwork:boolean:default"\n+                               type="hidden"\n+                               value=""\n+                        />\n+                        <input id="readNetwork"\n+                               name="readNetwork:boolean"\n+                               type="checkbox"\n+                               value="1"\n+                               tal:attributes="\n+                                 checked python:\'readNetwork\' if selected else None;\n+                               "\n+                        />\n+                        <label for="readNetwork"\n+                               i18n:translate="label_read_network"\n+                        >Read network</label>\n+                        <div class="formHelp"\n+                             i18n:translate="help_read_network"\n+                        >\n                             Allow rules and themes to be read from remote servers.\n                         </div>\n \n-                    </div>\n-\n-                    <div\n-                        tal:define="error errors/hostnameBlacklist | nothing;\n-                                    hostnameBlacklist view/theme_settings/hostnameBlacklist | python:[];\n-                                    hostnameBlacklist python: view.hostname_blacklist or hostnameBlacklist"\n-                        tal:attributes="class python:\'field error\' if error else \'field\'">\n-\n-                        <label for="hostnameBlacklist" i18n:translate="label_hostname_blacklist">Unthemed host names</label>\n-                        <div class="formHelp" i18n:translate="help_hostname_blacklist">\n+                      </div>\n+\n+                      <div tal:define="\n+                             error errors/hostnameBlacklist | nothing;\n+                             hostnameBlacklist view/theme_settings/hostnameBlacklist | python:[];\n+                             hostnameBlacklist python: view.hostname_blacklist or hostnameBlacklist;\n+                           "\n+                           tal:attributes="\n+                             class python:\'field error\' if error else \'field\';\n+                           "\n+                      >\n+\n+                        <label for="hostnameBlacklist"\n+                               i18n:translate="label_hostname_blacklist"\n+                        >Unthemed host names</label>\n+                        <div class="formHelp"\n+                             i18n:translate="help_hostname_blacklist"\n+                        >\n                             If there are hostnames that you do not want to be\n                             themed, you can list them here, one per line. This is\n                             useful during theme development, so that you can\n@@ -381,271 +538,390 @@\n                             Plone.\n                         </div>\n \n-                        <div class="errorMessage" tal:content="error" tal:condition="error" />\n-\n-                        <textarea\n-                            name="hostnameBlacklist:lines"\n-                            id="hostnameBlacklist"\n-                            rows="5"\n-                            cols="50"\n-                            tal:content="python: \'\\n\'.join(hostnameBlacklist)"\n-                            ></textarea>\n-\n-                    </div>\n-\n-                    <div\n-                        tal:define="error errors/parameterExpressions | nothing;\n-                                    parameterExpressions python:view.theme_settings.parameterExpressions or {};\n-                                    parameterExpressions python:[\'%s = %s\' % (k,v) for k,v in parameterExpressions.items()];\n-                                    parameterExpressions python:request.get(\'parameterExpressions\', parameterExpressions)"\n-                        tal:attributes="class python:\'field error\' if error else \'field\'">\n-\n-                        <label for="parameterExpressions" i18n:translate="label_parameter_expressions">Parameter expressions</label>\n-                        <div class="formHelp" i18n:translate="help_parameter_expressions">\n+                        <div class="errorMessage"\n+                             tal:condition="error"\n+                             tal:content="error"\n+                        ></div>\n+\n+                        <textarea id="hostnameBlacklist"\n+                                  cols="50"\n+                                  name="hostnameBlacklist:lines"\n+                                  rows="5"\n+                                  tal:content="python: \'\\n\'.join(hostnameBlacklist)"\n+                        ></textarea>\n+\n+                      </div>\n+\n+                      <div tal:define="\n+                             error errors/parameterExpressions | nothing;\n+                             parameterExpressions python:view.theme_settings.parameterExpressions or {};\n+                             parameterExpressions python:[\'%s = %s\' % (k,v) for k,v in parameterExpressions.items()];\n+                             parameterExpressions python:request.get(\'parameterExpressions\', parameterExpressions);\n+                           "\n+                           tal:attributes="\n+                             class python:\'field error\' if error else \'field\';\n+                           "\n+                      >\n+\n+                        <label for="parameterExpressions"\n+                               i18n:translate="label_parameter_expressions"\n+                        >Parameter expressions</label>\n+                        <div class="formHelp"\n+                             i18n:translate="help_parameter_expressions"\n+                        >\n                             You can define parameters that will be passed\n                             to the compiled theme here. In your rules file, you can\n-                            refer to a parameter by <code>$name</code>. Parameters\n+                            refer to a parameter by\n+                          <code>$name</code>. Parameters\n                             are defined using TALES expressions, which should\n                             evaluate to a string, a number, a boolean or None.\n-                            Available variables are <code>context</code>,\n-                            <code>request</code>, <code>portal</code>,\n-                            <code>portal_state</code>, and\n-                            <code>context_state</code>. Define one variable\n-                            per line, in the format <code>name = expression</code>.\n+                            Available variables are\n+                          <code>context</code>,\n+                          <code>request</code>,\n+                          <code>portal</code>,\n+                          <code>portal_state</code>, and\n+                          <code>context_state</code>. Define one variable\n+                            per line, in the format\n+                          <code>name = expression</code>.\n                         </div>\n \n-                        <div class="errorMessage" tal:content="error" tal:condition="error" />\n+                        <div class="errorMessage"\n+                             tal:condition="error"\n+                             tal:content="error"\n+                        ></div>\n \n-                        <textarea\n-                            name="parameterExpressions:lines"\n-                            id="parameterExpressions"\n-                            rows="8"\n-                            cols="50"\n-                            tal:content="python:\'\\n\'.join(parameterExpressions)"\n-                            ></textarea>\n-                    </div>\n+                        <textarea id="parameterExpressions"\n+                                  cols="50"\n+                                  name="parameterExpressions:lines"\n+                                  rows="8"\n+                                  tal:content="python:\'\\n\'.join(parameterExpressions)"\n+                        ></textarea>\n+                      </div>\n \n-                </fieldset>\n-                <fieldset>\n-                    <legend i18n:translate="">Theme base</legend>\n+                    </fieldset>\n+                    <fieldset>\n+                      <legend i18n:translate="">Theme base</legend>\n \n-                    <p i18n:translate="description_advanced_base">\n+                      <p i18n:translate="description_advanced_base">\n                        The settings below control the presentation of the\n-                       <em>content</em> produced by Plone before a Diazo theme\n+                        <em>content</em>\n+                         produced by Plone before a Diazo theme\n                        is applied. Note that these settings will have an effect\n                        even if no Diazo theme is currently enabled.\n-                    </p>\n+                      </p>\n \n-                    <div\n-                        class="field"\n-                        tal:define="selected python:request.get(\'themeBase\', view.pskin.getDefaultSkin())">\n+                      <div class="field"\n+                           tal:define="\n+                             selected python:request.get(\'themeBase\', view.pskin.getDefaultSkin());\n+                           "\n+                      >\n \n-                        <label for="themeBase" i18n:translate="label_theme_base">Theme base</label>\n+                        <label for="themeBase"\n+                               i18n:translate="label_theme_base"\n+                        >Theme base</label>\n \n-                        <div class="formHelp" i18n:translate="help_theme_base">\n+                        <div class="formHelp"\n+                             i18n:translate="help_theme_base"\n+                        >\n                             The theme base defines a collection of templates and other\n                             resources that makes up the raw content to which a theme is\n                             applied. Most Diazo themes will assume the default theme base,\n                             so only change this if you know what you are doing.\n                         </div>\n \n-                        <select size="1" name="themeBase" id="themeBase">\n-                            <option\n-                                tal:repeat="skin view/skinsVocabulary"\n-                                tal:attributes="value skin/value;\n-                                                selected python:skin.value == selected and \'selected\' or None"\n-                                tal:content="skin/title"\n-                                />\n+                        <select id="themeBase"\n+                                name="themeBase"\n+                                size="1"\n+                        >\n+                          <option tal:repeat="skin view/skinsVocabulary"\n+                                  tal:content="skin/title"\n+                                  tal:attributes="\n+                                    value skin/value;\n+                                    selected python:skin.value == selected and \'selected\' or None;\n+                                  "\n+                          ></option>\n                         </select>\n \n-                    </div>\n-\n-                    <div\n-                        class="field"\n-                        tal:define="selected python:request.get(\'markSpecialLinks\', view.mark_special_links)">\n-\n-                        <input type="hidden" value="" name="markSpecialLinks:boolean:default" />\n-                        <input type="checkbox" value="1" name="markSpecialLinks:boolean" id="markSpecialLinks"\n-                            tal:attributes="checked python:\'markSpecialLinks\' if selected else None"\n-                            />\n-                        <label for="markSpecialLinks" i18n:translate="label_mark_special_links">Mark special links</label>\n-                        <div class="formHelp" i18n:translate="help_mark_special_links">\n+                      </div>\n+\n+                      <div class="field"\n+                           tal:define="\n+                             selected python:request.get(\'markSpecialLinks\', view.mark_special_links);\n+                           "\n+                      >\n+\n+                        <input name="markSpecialLinks:boolean:default"\n+                               type="hidden"\n+                               value=""\n+                        />\n+                        <input id="markSpecialLinks"\n+                               name="markSpecialLinks:boolean"\n+                               type="checkbox"\n+                               value="1"\n+                               tal:attributes="\n+                                 checked python:\'markSpecialLinks\' if selected else None;\n+                               "\n+                        />\n+                        <label for="markSpecialLinks"\n+                               i18n:translate="label_mark_special_links"\n+                        >Mark special links</label>\n+                        <div class="formHelp"\n+                             i18n:translate="help_mark_special_links"\n+                        >\n                             If enabled all external links will be marked with link type specific icons.\n                         </div>\n \n-                    </div>\n-\n-                    <div\n-                        class="field"\n-                        tal:define="selected python:request.get(\'extLinksOpenInNewWindow\', view.ext_links_open_new_window)">\n-\n-                        <input type="hidden" value="" name="extLinksOpenInNewWindow:boolean:default" />\n-                        <input type="checkbox" value="1" name="extLinksOpenInNewWindow:boolean" id="extLinksOpenInNewWindow"\n-                            tal:attributes="checked python:\'extLinksOpenInNewWindow\' if selected else None"\n-                            />\n-                        <label for="extLinksOpenInNewWindow" i18n:translate="label_ext_links_open_new_window">External links open in new window</label>\n-                        <div class="formHelp" i18n:translate="help_ext_links_open_new_window">\n+                      </div>\n+\n+                      <div class="field"\n+                           tal:define="\n+                             selected python:request.get(\'extLinksOpenInNewWindow\', view.ext_links_open_new_window);\n+                           "\n+                      >\n+\n+                        <input name="extLinksOpenInNewWindow:boolean:default"\n+                               type="hidden"\n+                               value=""\n+                        />\n+                        <input id="extLinksOpenInNewWindow"\n+                               name="extLinksOpenInNewWindow:boolean"\n+                               type="checkbox"\n+                               value="1"\n+                               tal:attributes="\n+                                 checked python:\'extLinksOpenInNewWindow\' if selected else None;\n+                               "\n+                        />\n+                        <label for="extLinksOpenInNewWindow"\n+                               i18n:translate="label_ext_links_open_new_window"\n+                        >External links open in new window</label>\n+                        <div class="formHelp"\n+                             i18n:translate="help_ext_links_open_new_window"\n+                        >\n                             If enabled all external links in the content region open in a new window.\n                         </div>\n \n-                    </div>\n-\n-                </fieldset>\n-                <fieldset>\n-                    <legend i18n:translate="">Custom Styles</legend>\n-\n-                    <div\n-                        tal:define="error errors/custom_css | nothing;\n-                                    custom_css view/theme_settings/custom_css | python: \'\';\n-                                    custom_css python:request.get(\'custom_css\', custom_css)"\n-                        tal:attributes="class python:\'field error\' if error else \'field\'">\n-\n-                        <label for="custom_css" i18n:translate="label_custom_css">Custom CSS</label>\n-                        <div class="formHelp" i18n:translate="help_custom_css">\n+                      </div>\n+\n+                    </fieldset>\n+                    <fieldset>\n+                      <legend i18n:translate="">Custom Styles</legend>\n+\n+                      <div tal:define="\n+                             error errors/custom_css | nothing;\n+                             custom_css view/theme_settings/custom_css | python: \'\';\n+                             custom_css python:request.get(\'custom_css\', custom_css);\n+                           "\n+                           tal:attributes="\n+                             class python:\'field error\' if error else \'field\';\n+                           "\n+                      >\n+\n+                        <label for="custom_css"\n+                               i18n:translate="label_custom_css"\n+                        >Custom CSS</label>\n+                        <div class="formHelp"\n+                             i18n:translate="help_custom_css"\n+                        >\n                             Define your own custom CSS in the field below. This is a good place for quick customizations of things like colors and the toolbar. Definitions here will override previously defined CSS of Plone. Please use this only for small customizations, as it is hard to keep track of changes here. For bigger changes you most likely want to customize a full theme and make your changes there.\n                         </div>\n                         <div class="theming_doc_link">\n-                            <p><a href="https://docs.plone.org/adapt-and-extend/theming" target="_blank" i18n:translate="label_theming_doc_link">Theming documentation</a></p>\n+                          <p><a href="https://docs.plone.org/adapt-and-extend/theming"\n+                               target="_blank"\n+                               i18n:translate="label_theming_doc_link"\n+                            >Theming documentation</a></p>\n                         </div>\n \n-                        <div class="errorMessage" tal:content="error" tal:condition="error" />\n-\n-                        <textarea\n-                            name="custom_css"\n-                            id="custom_css"\n-                            rows="40"\n-                            cols="160"\n-                            placeholder="Put your plain css..."\n-                            i18n:attributes="placeholder"\n-                            tal:content="custom_css"\n-                            class="pat-code-editor"\n-                            data-pat-code-editor="language: css; theme: tomorrow"\n-                            ></textarea>\n-\n-                    </div>\n-                </fieldset>\n-            </div>\n-\n-\n-            <div class="btn-group">\n-                <input\n-                    type="submit"\n-                    name="form.button.AdvancedSave"\n-                    class="btn btn-success save"\n-                    value="Save"\n-                    i18n:attributes="value" />\n-\n-                <input\n-                    type="submit"\n-                    name="form.button.Cancel"\n-                    class="btn btn-primary cancel"\n-                    value="Cancel"\n-                    i18n:attributes="value" />\n-            </div>\n+                        <div class="errorMessage"\n+                             tal:condition="error"\n+                             tal:content="error"\n+                        ></div>\n+\n+                        <textarea class="pat-code-editor"\n+                                  id="custom_css"\n+                                  cols="160"\n+                                  name="custom_css"\n+                                  placeholder="Put your plain css..."\n+                                  rows="40"\n+                                  data-pat-code-editor="language: css; theme: tomorrow"\n+                                  tal:content="custom_css"\n+                                  i18n:attributes="placeholder"\n+                        ></textarea>\n+\n+                      </div>\n+                    </fieldset>\n+                  </div>\n+\n+\n+                  <div class="btn-group">\n+                    <input class="btn btn-success save"\n+                           name="form.button.AdvancedSave"\n+                           type="submit"\n+                           value="Save"\n+                           i18n:attributes="value"\n+                    />\n \n-            <input tal:replace="structure context/@@authenticator/authenticator" />\n+                    <input class="btn btn-primary cancel"\n+                           name="form.button.Cancel"\n+                           type="submit"\n+                           value="Cancel"\n+                           i18n:attributes="value"\n+                    />\n+                  </div>\n \n+                  <input tal:replace="structure context/@@authenticator/authenticator" />\n \n \n-        </form>\n \n-    </section>\n+                </form>\n \n-</div>\n+              </section>\n \n-<!-- Upload overlay -->\n-<div id="overlay-upload" class="modal">\n-    <div>\n-        <h1 class="documentFirstHeading" i18n:translate="theming_controlpanel_upload">Upload theme</h1>\n+            </div>\n \n-        <p class="documentDescription" i18n:translate="description_import">\n+            <!-- Upload overlay -->\n+            <div class="modal"\n+                 id="overlay-upload"\n+            >\n+              <div>\n+                <h1 class="documentFirstHeading"\n+                    i18n:translate="theming_controlpanel_upload"\n+                >Upload theme</h1>\n+\n+                <p class="documentDescription"\n+                   i18n:translate="description_import"\n+                >\n            You can import a Zip file containing an existing theme.\n            This should contain a single top level directory, which will be used as\n-           the theme identifier. If no Diazo <code>rules.xml</code> or\n-           <code>manifest.cfg</code> file is found in this directory, a\n-           default <code>rules.xml</code> file will be created.\n-        </p>\n-\n-        <form\n-            name="import"\n-            method="post"\n-            enctype="multipart/form-data"\n-            class="pat-formunloadalert"\n-            tal:attributes="action request/URL"\n-            tal:define="errors view/errors">\n-\n-            <div\n-                class="field"\n-                tal:define="error errors/themeArchive | nothing"\n-                tal:attributes="class python:\'field error\' if error else \'field\'">\n-\n-                <div class="formHelp" i18n:translate="help_theme_archive">\n+           the theme identifier. If no Diazo\n+                  <code>rules.xml</code>\n+                   or\n+                  <code>manifest.cfg</code>\n+                   file is found in this directory, a\n+           default\n+                  <code>rules.xml</code>\n+                   file will be created.\n+                </p>\n+\n+                <form class="pat-formunloadalert"\n+                      enctype="multipart/form-data"\n+                      method="post"\n+                      name="import"\n+                      tal:define="\n+                        errors view/errors;\n+                      "\n+                      tal:attributes="\n+                        action request/URL;\n+                      "\n+                >\n+\n+                  <div class="field"\n+                       tal:define="\n+                         error errors/themeArchive | nothing;\n+                       "\n+                       tal:attributes="\n+                         class python:\'field error\' if error else \'field\';\n+                       "\n+                  >\n+\n+                    <div class="formHelp"\n+                         i18n:translate="help_theme_archive"\n+                    >\n                     Select a file to upload.\n-                </div>\n+                    </div>\n \n-                <div class="errorMessage" tal:content="error" tal:condition="error" />\n+                    <div class="errorMessage"\n+                         tal:condition="error"\n+                         tal:content="error"\n+                    ></div>\n \n-                <input\n-                    type="file"\n-                    name="themeArchive"\n-                    id="themeArchive"\n+                    <input id="themeArchive"\n+                           name="themeArchive"\n+                           type="file"\n                     />\n \n-            </div>\n+                  </div>\n \n-            <div\n-                class="field"\n-                tal:define="selected python:request.get(\'enableNewTheme\', False)">\n-                <input type="hidden" value="" name="enableNewTheme:boolean:default" />\n-                <input type="checkbox" value="1" name="enableNewTheme:boolean" id="enableNewTheme"\n-                    tal:attributes="checked python:\'enableNewTheme\' if selected else None"\n+                  <div class="field"\n+                       tal:define="\n+                         selected python:request.get(\'enableNewTheme\', False);\n+                       "\n+                  >\n+                    <input name="enableNewTheme:boolean:default"\n+                           type="hidden"\n+                           value=""\n                     />\n-                <label for="enableNewTheme" i18n:translate="label_enable_new_theme">Immediately enable new theme</label>\n-                <div class="formHelp" i18n:translate="help_enable_new_theme">\n+                    <input id="enableNewTheme"\n+                           name="enableNewTheme:boolean"\n+                           type="checkbox"\n+                           value="1"\n+                           tal:attributes="\n+                             checked python:\'enableNewTheme\' if selected else None;\n+                           "\n+                    />\n+                    <label for="enableNewTheme"\n+                           i18n:translate="label_enable_new_theme"\n+                    >Immediately enable new theme</label>\n+                    <div class="formHelp"\n+                         i18n:translate="help_enable_new_theme"\n+                    >\n                     Select this option to enable the newly uploaded theme\n                     immediately.\n-                </div>\n-            </div>\n-\n-            <div\n-                class="field"\n-                tal:define="selected python:request.get(\'replaceExisting\', False)">\n-                <input type="hidden" value="" name="replaceExisting:boolean:default" />\n-                <input type="checkbox" value="1" name="replaceExisting:boolean" id="replaceExisting"\n-                    tal:attributes="checked python:\'replaceExisting\' if selected else None"\n+                    </div>\n+                  </div>\n+\n+                  <div class="field"\n+                       tal:define="\n+                         selected python:request.get(\'replaceExisting\', False);\n+                       "\n+                  >\n+                    <input name="replaceExisting:boolean:default"\n+                           type="hidden"\n+                           value=""\n+                    />\n+                    <input id="replaceExisting"\n+                           name="replaceExisting:boolean"\n+                           type="checkbox"\n+                           value="1"\n+                           tal:attributes="\n+                             checked python:\'replaceExisting\' if selected else None;\n+                           "\n                     />\n-                <label for="replaceExisting" i18n:translate="label_replace_existing">Replace existing theme</label>\n-                <div class="formHelp" i18n:translate="help_replace_existing">\n+                    <label for="replaceExisting"\n+                           i18n:translate="label_replace_existing"\n+                    >Replace existing theme</label>\n+                    <div class="formHelp"\n+                         i18n:translate="help_replace_existing"\n+                    >\n                     Select this option to replace any existing theme that\n                     may have been uploaded previously.\n-                </div>\n-            </div>\n+                    </div>\n+                  </div>\n+\n+                  <div class="btn-group">\n+                    <input class="btn btn-success save"\n+                           name="form.button.Import"\n+                           type="submit"\n+                           value="Import"\n+                           i18n:attributes="value"\n+                    />\n \n-            <div class="btn-group">\n-                <input\n-                    type="submit"\n-                    name="form.button.Import"\n-                    class="btn btn-success save"\n-                    value="Import"\n-                    i18n:attributes="value" />\n-\n-                <input\n-                    type="submit"\n-                    name="form.button.Cancel"\n-                    class="btn btn-primary cancel"\n-                    value="Cancel"\n-                    i18n:attributes="value" />\n-            </div>\n+                    <input class="btn btn-primary cancel"\n+                           name="form.button.Cancel"\n+                           type="submit"\n+                           value="Cancel"\n+                           i18n:attributes="value"\n+                    />\n+                  </div>\n \n-            <input tal:replace="structure context/@@authenticator/authenticator" />\n+                  <input tal:replace="structure context/@@authenticator/authenticator" />\n \n-        </form>\n+                </form>\n \n-    </div>\n-</div>\n+              </div>\n+            </div>\n \n \n-    </section>\n+          </section>\n         </article>\n       </div>\n     </article>\ndiff --git a/src/plone/app/theming/browser/theme-error.pt b/src/plone/app/theming/browser/theme-error.pt\nindex 45d06199..2121811b 100644\n--- a/src/plone/app/theming/browser/theme-error.pt\n+++ b/src/plone/app/theming/browser/theme-error.pt\n@@ -1,16 +1,18 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+<html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-    lang="en"\n-    i18n:domain="plone">\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      lang="en"\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n \n-    <head>\n-    </head>\n-    <body>\n-        <h1 i18n:translate="">Invalid rules</h1>\n-        <p i18n:translate="">An error occurred trying to parse the rules file:</p>\n-        <pre tal:content="options/error"></pre>\n-    </body>\n+  <head>\n+  </head>\n+  <body>\n+    <h1 i18n:translate="">Invalid rules</h1>\n+    <p i18n:translate="">An error occurred trying to parse the rules file:</p>\n+    <pre tal:content="options/error"></pre>\n+  </body>\n \n </html>\ndiff --git a/src/plone/app/theming/tests/french.html b/src/plone/app/theming/tests/french.html\nindex 4a9fe72e..a6e9e28f 100644\n--- a/src/plone/app/theming/tests/french.html\n+++ b/src/plone/app/theming/tests/french.html\n@@ -1,9 +1,9 @@\n <html>\n-<head>\n+  <head>\n     <!-- With a charset, the error in test_include_non_ascii does not happen. -->\n     <!-- <meta charset="utf-8"/> -->\n     <title>Title</title>\n-</head>\n-<body>\n-    <div id="content">Actualit\xc3\xa9s</div>\n-</body>\n+  </head>\n+  <body>\n+    <div id="content">Actualit&eacute;s</div>\n+  </body></html>\ndiff --git a/src/plone/app/theming/tests/includes.html b/src/plone/app/theming/tests/includes.html\nindex a18f3dd7..c9e6bfcc 100644\n--- a/src/plone/app/theming/tests/includes.html\n+++ b/src/plone/app/theming/tests/includes.html\n@@ -1,8 +1,8 @@\n <html>\n-<head>\n+  <head>\n     <title>Title</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n     <div id="alpha">(placeholder)</div>\n     <div id="beta">(placeholder)</div>\n-</body>\n+  </body></html>\ndiff --git a/src/plone/app/theming/tests/nonascii.html b/src/plone/app/theming/tests/nonascii.html\nindex 7fd37713..c2d286ee 100644\n--- a/src/plone/app/theming/tests/nonascii.html\n+++ b/src/plone/app/theming/tests/nonascii.html\n@@ -1,7 +1,7 @@\n <html>\n-<head>\n+  <head>\n     <title>Title</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n     <div id="content">(placeholder)</div>\n-</body>\n+  </body></html>\ndiff --git a/src/plone/app/theming/tests/notheme.pt b/src/plone/app/theming/tests/notheme.pt\nindex f85e554a..418b51cb 100644\n--- a/src/plone/app/theming/tests/notheme.pt\n+++ b/src/plone/app/theming/tests/notheme.pt\n@@ -1,6 +1,8 @@\n-<html tal:define="dummy python:request.response.setHeader(\'x-theme-disabled\', \'True\')">\n-<head><title>No theme</title></head>\n-<body>\n+<html tal:define="\n+        dummy python:request.response.setHeader(\'x-theme-disabled\', \'True\');\n+      ">\n+  <head><title>No theme</title></head>\n+  <body>\n     <h1>Theme disabled</h1>\n-</body>\n+  </body>\n </html>\ndiff --git a/src/plone/app/theming/tests/one.html b/src/plone/app/theming/tests/one.html\nindex efdc1e10..bfc8ea1a 100644\n--- a/src/plone/app/theming/tests/one.html\n+++ b/src/plone/app/theming/tests/one.html\n@@ -1,7 +1,7 @@\n <html>\n-<head>\n+  <head>\n     <title>Title</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n     <div id="content">Number one</div>\n-</body>\n+  </body></html>\ndiff --git a/src/plone/app/theming/tests/othertheme.html b/src/plone/app/theming/tests/othertheme.html\nindex 24c9a41c..db7304e2 100644\n--- a/src/plone/app/theming/tests/othertheme.html\n+++ b/src/plone/app/theming/tests/othertheme.html\n@@ -1,9 +1,9 @@\n <html>\n-<head>\n+  <head>\n     <title>Title</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n     <h1 id="pageTitle">Page title</h1>\n     <p>This is the other theme.</p>\n-</body>\n-</html>\n\\ No newline at end of file\n+  </body>\n+</html>\ndiff --git a/src/plone/app/theming/tests/resources/nonascii.html b/src/plone/app/theming/tests/resources/nonascii.html\nindex 2453852b..2b2908eb 100644\n--- a/src/plone/app/theming/tests/resources/nonascii.html\n+++ b/src/plone/app/theming/tests/resources/nonascii.html\n@@ -1,3 +1,3 @@\n <body>\n-    <div>N\xc3\xbamero uno</div>\n-</body>\n\\ No newline at end of file\n+  <div>N&uacute;mero uno</div>\n+</body>\ndiff --git a/src/plone/app/theming/tests/resources/othertheme.html b/src/plone/app/theming/tests/resources/othertheme.html\nindex 24c9a41c..db7304e2 100644\n--- a/src/plone/app/theming/tests/resources/othertheme.html\n+++ b/src/plone/app/theming/tests/resources/othertheme.html\n@@ -1,9 +1,9 @@\n <html>\n-<head>\n+  <head>\n     <title>Title</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n     <h1 id="pageTitle">Page title</h1>\n     <p>This is the other theme.</p>\n-</body>\n-</html>\n\\ No newline at end of file\n+  </body>\n+</html>\ndiff --git a/src/plone/app/theming/tests/resources/overridestheme.html b/src/plone/app/theming/tests/resources/overridestheme.html\nindex 6c774628..5088a108 100644\n--- a/src/plone/app/theming/tests/resources/overridestheme.html\n+++ b/src/plone/app/theming/tests/resources/overridestheme.html\n@@ -1,10 +1,10 @@\n <html>\n-<head>\n+  <head>\n     <title>Title</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n     <h1 id="pageTitle">Page title</h1>\n     <p>This is the theme.</p>\n     <img src="relative.jpg" />\n     <div id="footer">Theme footer</div>\n-</body>\n+  </body></html>\ndiff --git a/src/plone/app/theming/tests/resources/theme.html b/src/plone/app/theming/tests/resources/theme.html\nindex 03c0b1c7..f2350c96 100644\n--- a/src/plone/app/theming/tests/resources/theme.html\n+++ b/src/plone/app/theming/tests/resources/theme.html\n@@ -1,9 +1,9 @@\n <html>\n-<head>\n+  <head>\n     <title>Title</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n     <h1 id="pageTitle">Page title</h1>\n     <p>This is the theme.</p>\n     <img src="relative.jpg" />\n-</body>\n+  </body></html>\ndiff --git a/src/plone/app/theming/tests/theme.html b/src/plone/app/theming/tests/theme.html\nindex 03c0b1c7..f2350c96 100644\n--- a/src/plone/app/theming/tests/theme.html\n+++ b/src/plone/app/theming/tests/theme.html\n@@ -1,9 +1,9 @@\n <html>\n-<head>\n+  <head>\n     <title>Title</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n     <h1 id="pageTitle">Page title</h1>\n     <p>This is the theme.</p>\n     <img src="relative.jpg" />\n-</body>\n+  </body></html>\ndiff --git a/src/plone/app/theming/tests/two.html b/src/plone/app/theming/tests/two.html\nindex bd004256..df515116 100644\n--- a/src/plone/app/theming/tests/two.html\n+++ b/src/plone/app/theming/tests/two.html\n@@ -1,7 +1,7 @@\n <html>\n-<head>\n+  <head>\n     <title>Title</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n     <div id="content">Number two</div>\n-</body>\n+  </body></html>\ndiff --git a/src/plone/app/theming/themes/template/index.html b/src/plone/app/theming/themes/template/index.html\nindex f32e76ce..9be04211 100644\n--- a/src/plone/app/theming/themes/template/index.html\n+++ b/src/plone/app/theming/themes/template/index.html\n@@ -1,11 +1,11 @@\n <!DOCTYPE html>\n <html>\n-<head>\n+  <head>\n     <title>Theme template</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n \n     <p>Replace this template with your own theme</p>\n \n-</body>\n-</html>\n\\ No newline at end of file\n+  </body>\n+</html>\n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-03-18T01:29:37+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/b5d9bf0e70a7c41872f3c162299bcd174a25b00e

feat: flake8

Files changed:
M src/plone/app/theming/browser/themefile.py
M src/plone/app/theming/tests/test_transform.py
M src/plone/app/theming/utils.py

b'diff --git a/src/plone/app/theming/browser/themefile.py b/src/plone/app/theming/browser/themefile.py\nindex 6d8f0a9..41c1218 100644\n--- a/src/plone/app/theming/browser/themefile.py\n+++ b/src/plone/app/theming/browser/themefile.py\n@@ -22,7 +22,7 @@ def __call__(self):\n         try:\n             directory.writeFile(name, data)\n             self.request.response.setHeader("Content-Type", "application/json")\n-        except:\n+        except Exception:\n             return json.dumps({"failure": "error"})\n \n         return json.dumps({"success": "create"})\ndiff --git a/src/plone/app/theming/tests/test_transform.py b/src/plone/app/theming/tests/test_transform.py\nindex 61373f1..f472d8b 100644\n--- a/src/plone/app/theming/tests/test_transform.py\n+++ b/src/plone/app/theming/tests/test_transform.py\n@@ -9,7 +9,6 @@\n from plone.app.theming.transform import ThemeTransform\n from plone.app.theming.utils import applyTheme\n from plone.app.theming.utils import getTheme\n-from plone.app.theming.utils import InternalResolver\n from plone.app.theming.utils import PythonResolver\n from plone.app.theming.utils import resolvePythonURL\n from plone.registry.interfaces import IRegistry\ndiff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py\nindex 43cd247..27a9198 100644\n--- a/src/plone/app/theming/utils.py\n+++ b/src/plone/app/theming/utils.py\n@@ -251,7 +251,7 @@ def findPathContext(path):\n     while seq:\n         try:\n             obj = portal.restrictedTraverse("/".join(seq))\n-        except:\n+        except Exception:\n             seq.pop()\n         else:\n             if IContentish.providedBy(obj):\n@@ -428,7 +428,7 @@ def getThemeResources(\n                 theme = getManifest(manifest, format, defaults)\n                 theme["name"] = name\n                 resources.append(theme)\n-            except:\n+            except Exception:\n                 LOGGER.exception("Unable to read manifest for theme directory %s", name)\n             finally:\n                 manifest.close()\n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-03-18T01:35:45+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/bd793f0e1fe27ae2fae3548af2619a61835cf398

feat: codespell

Files changed:
M CHANGES.rst
M docs/index.rst
M src/plone/app/theming/browser/resources/userguide.rst
M src/plone/app/theming/tests/test_transform.py
M src/plone/app/theming/traversal.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 54978204..e24ff66e 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -157,7 +157,7 @@ Bug fixes:\n \n - Fixes #187: Invalid dependency on plone.app.caching\n   [jensens] (#187)\n-- Cleanup: Remove meanwhile unused test fixture code refering to ``plone.app.caching``.\n+- Cleanup: Remove meanwhile unused test fixture code referring to ``plone.app.caching``.\n   Removed class and fixtures: ``ThemingWithCaching``, ``THEMINGWITHCACHING_FIXTURE``, ``THEMINGWITHCACHING_TESTING``.\n   Those were nowhere used active in Plone nor outside in Github.\n   [jensens] (#188)\n@@ -315,7 +315,7 @@ New features:\n \n Bug fixes:\n \n-- Explizit load permissions for controlpanel.\n+- Explicit load permissions for controlpanel.\n   [jensens]\n \n - Fix tests for merged plone.login.\n@@ -433,7 +433,7 @@ Fixes:\n   [staeff]\n \n - Fix issue where theming control panel errored when a packaged\n-  theme was overidden with a global resource directory theme\n+  theme was overridden with a global resource directory theme\n   [datakurre]\n \n 1.3.0 (2016-06-07)\n@@ -447,7 +447,7 @@ New:\n \n Fixes:\n \n-- Small fixes to documentaion\n+- Small fixes to documentation\n   [ale-rt]\n \n 1.2.19 (2016-03-31)\n@@ -486,7 +486,7 @@ Fixes:\n - Rebuild resources so they work with latest mockup/patternslib\n   integration changes.  [vangheem]\n \n-- Removed github dependancies in thememapper.  [Gagaro]\n+- Removed github dependencies in thememapper.  [Gagaro]\n \n \n 1.2.16 (2015-11-26)\n@@ -615,7 +615,7 @@ Fixes:\n - removed irrelevant theme renaming code\n   [schwartz]\n \n-- Filesystem themes are now correctly overridden. TTW themes can no longer be overriden\n+- Filesystem themes are now correctly overridden. TTW themes can no longer be overridden\n   [schwartz]\n \n - re-added manifest check\ndiff --git a/docs/index.rst b/docs/index.rst\nindex 03b77f7c..9c873611 100644\n--- a/docs/index.rst\n+++ b/docs/index.rst\n@@ -239,7 +239,7 @@ Advanced settings\n \n The *Theming* control panel also contains a tab named *Advanced settings*.\n \n-The *Advanced setings* tab is divided into two areas.\n+The *Advanced settings* tab is divided into two areas.\n The first, *Theme details*, contains the underlying settings that are modified when a theme is applied from the *Themes* control panel.\n These are:\n \n@@ -350,7 +350,7 @@ You can preview or enable the theme through the *Themes* control panel, and then\n \n    Notice the declaration of the ``plone`` namespace at the root ``<configure />`` element.\n    Place the theme files and the ``rules.xml`` file into the ``theme`` directory.\n-   Your theme is immediately available due to the existance of this ``theme`` type ``plone.resource`` directory,\n+   Your theme is immediately available due to the existence of this ``theme`` type ``plone.resource`` directory,\n    if it contains a ``manifest.cfg`` (see below) and a ``rules.xml`` file.\n \n    If you want your theme automatically enabled upon installation of your Python package,\ndiff --git a/src/plone/app/theming/browser/resources/userguide.rst b/src/plone/app/theming/browser/resources/userguide.rst\nindex fe2a9119..7ba38767 100644\n--- a/src/plone/app/theming/browser/resources/userguide.rst\n+++ b/src/plone/app/theming/browser/resources/userguide.rst\n@@ -281,7 +281,7 @@ Advanced settings\n The *Theming* control panel also contains a tab named *Advanced settings*. Here\n be dragons.\n \n-The *Advanced setings* tab is divided into two areas. The first, *Theme\n+The *Advanced settings* tab is divided into two areas. The first, *Theme\n details*, contains the underlying settings that are modified when a theme is\n applied from the *Themes* control panel. These are:\n \ndiff --git a/src/plone/app/theming/tests/test_transform.py b/src/plone/app/theming/tests/test_transform.py\nindex f472d8b9..ddb57c9d 100644\n--- a/src/plone/app/theming/tests/test_transform.py\n+++ b/src/plone/app/theming/tests/test_transform.py\n@@ -425,7 +425,7 @@ def test_non_html_content(self):\n     #     # The theme\n     #     self.assertTrue("This is the other theme" in browser.contents)\n     #\n-    #     # Now invalide the cache by touching the settings utility\n+    #     # Now invalidate the cache by touching the settings utility\n     #\n     #     self.settings.enabled = False\n     #     self.settings.enabled = True\ndiff --git a/src/plone/app/theming/traversal.py b/src/plone/app/theming/traversal.py\nindex 46558185..6923887c 100644\n--- a/src/plone/app/theming/traversal.py\n+++ b/src/plone/app/theming/traversal.py\n@@ -9,7 +9,7 @@\n class ThemeTraverser(ResourceTraverser):\n     """The theme traverser.\n \n-    Allows traveral to /++theme++<name> using ``plone.resource`` to fetch\n+    Allows traversal to /++theme++<name> using ``plone.resource`` to fetch\n     things stored either on the filesystem or in the ZODB.\n     """\n \n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-03-18T01:36:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/0a5f967bfb2548a446dfe9a414c7c52d1b21444c

fix(tox): adjust test path

Files changed:
M tox.ini

b'diff --git a/tox.ini b/tox.ini\nindex 8f11bbd..8c36310 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -45,6 +45,6 @@ deps =\n     zope.testrunner\n     -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands =\n-    zope-testrunner --test-path={toxinidir} -s plone.app.theming\n+    zope-testrunner --test-path={toxinidir}/src -s plone.app.theming\n extras =\n     test\n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-03-18T01:43:05+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/3bbceb5d1689a2561b49ac821e86133221b1ee0a

feat: reduce CMFPlone usage

Files changed:
M src/plone/app/theming/browser/configure.zcml
M src/plone/app/theming/configure.zcml

b'diff --git a/src/plone/app/theming/browser/configure.zcml b/src/plone/app/theming/browser/configure.zcml\nindex 928a583..1d6d14f 100644\n--- a/src/plone/app/theming/browser/configure.zcml\n+++ b/src/plone/app/theming/browser/configure.zcml\n@@ -22,7 +22,7 @@\n \n   <browser:page\n       name="theming-controlpanel"\n-      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      for="plone.base.interfaces.IPloneSiteRoot"\n       class=".controlpanel.ThemingControlpanel"\n       template="controlpanel.pt"\n       permission="plone.app.controlpanel.Themes"\n@@ -30,7 +30,7 @@\n \n   <browser:page\n       name="theming-controlpanel-help"\n-      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      for="plone.base.interfaces.IPloneSiteRoot"\n       class=".help.Help"\n       permission="zope2.View"\n       />\ndiff --git a/src/plone/app/theming/configure.zcml b/src/plone/app/theming/configure.zcml\nindex fe91bfb..c63301d 100644\n--- a/src/plone/app/theming/configure.zcml\n+++ b/src/plone/app/theming/configure.zcml\n@@ -26,7 +26,7 @@\n       title="Diazo theme support"\n       description="Installs a control panel to allow on-the-fly theming with Diazo"\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n-      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      for="plone.base.interfaces.IPloneSiteRoot"\n       directory="profiles/default"\n       />\n \n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-03-18T01:49:46+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/968ef14b18d1f821e314ae38523e3dcfa3b8fbbd

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 60b3585..a0e9c14 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -50,18 +50,30 @@\n         "docutils",\n         "lxml>=2.2.4",\n         "plone.app.registry>=1.0",\n+        "plone.base",\n+        "plone.i18n",\n+        "plone.memoize",\n+        "plone.registry",\n+        "plone.resource",\n         "plone.resourceeditor>=2.0.0",\n         "plone.staticresources",\n         "plone.subrequest",\n         "plone.transformchain",\n         "python-dateutil",\n+        "Products.CMFPlone",\n+        "Products.GenericSetup",\n+        "Products.statusmessages",\n         "repoze.xmliter>=0.3",\n-        "roman",\n         "setuptools",\n+        "zope.processlifetime",\n         "zope.traversing",\n     ],\n     extras_require={\n-        "test": ["plone.app.testing"],\n+        "test": [\n+            "plone.app.testing",\n+            "plone.app.contenttypes[test]",\n+            "plone.testing",\n+        ],\n     },\n     entry_points="""\n     [z3c.autoinclude.plugin]\n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-03-21T16:41:19+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.theming/commit/86da4771bf1808c62cb5a02289145951d38771fe

Move permission id=plone.app.controlpanel.Themes title=Plone Site Setup: Themes to this package.

Files changed:
A news/permission-move.bugfix
M setup.py
M src/plone/app/theming/browser/configure.zcml

b'diff --git a/news/permission-move.bugfix b/news/permission-move.bugfix\nnew file mode 100644\nindex 0000000..900e9f2\n--- /dev/null\n+++ b/news/permission-move.bugfix\n@@ -0,0 +1,3 @@\n+Fixes circular dependency on ZCML level to `Products.CMFPlone`:\n+Move permission id=`plone.app.controlpanel.Themes` title=`Plone Site Setup: Themes` to this package.\n+[jensens]\n\\ No newline at end of file\ndiff --git a/setup.py b/setup.py\nindex a0e9c14..27b4573 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -60,7 +60,6 @@\n         "plone.subrequest",\n         "plone.transformchain",\n         "python-dateutil",\n-        "Products.CMFPlone",\n         "Products.GenericSetup",\n         "Products.statusmessages",\n         "repoze.xmliter>=0.3",\ndiff --git a/src/plone/app/theming/browser/configure.zcml b/src/plone/app/theming/browser/configure.zcml\nindex 1d6d14f..3792fe2 100644\n--- a/src/plone/app/theming/browser/configure.zcml\n+++ b/src/plone/app/theming/browser/configure.zcml\n@@ -5,10 +5,10 @@\n     i18n_domain="plone"\n     >\n \n-  <include\n-      package="Products.CMFPlone.controlpanel"\n-      file="permissions.zcml"\n-      />\n+  <permission\n+    id="plone.app.controlpanel.Themes"\n+    title="Plone Site Setup: Themes"\n+    />\n \n   <browser:resource\n       name="plone.app.theming.gif"\n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-03-21T15:42:59Z
Author: pre-commit-ci[bot] (pre-commit-ci[bot]) <66853113+pre-commit-ci[bot]@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.theming/commit/700281db2e08148100ce8e9842c1f9ca5bcf2aec

[pre-commit.ci] auto fixes from pre-commit.com hooks

for more information, see https://pre-commit.ci

Files changed:
M src/plone/app/theming/browser/configure.zcml

b'diff --git a/src/plone/app/theming/browser/configure.zcml b/src/plone/app/theming/browser/configure.zcml\nindex 3792fe2..b239189 100644\n--- a/src/plone/app/theming/browser/configure.zcml\n+++ b/src/plone/app/theming/browser/configure.zcml\n@@ -6,9 +6,9 @@\n     >\n \n   <permission\n-    id="plone.app.controlpanel.Themes"\n-    title="Plone Site Setup: Themes"\n-    />\n+      id="plone.app.controlpanel.Themes"\n+      title="Plone Site Setup: Themes"\n+      />\n \n   <browser:resource\n       name="plone.app.theming.gif"\n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-03-21T20:33:13+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.theming/commit/e0d581d5e3a94586680d4e33c2f0dcfdb5a55710

Merge pull request #217 from plone/config-with-default-template-d32d2925

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/80cf330f.internal
A news/permission-move.bugfix
A tox.ini
M CHANGES.rst
M docs/index.rst
M pyproject.toml
M resources/theme/theme1/othertheme.html
M resources/theme/theme1/overrides/plone.app.layout.viewlets.colophon.pt
M resources/theme/theme1/rules.xml
M resources/theme/theme1/theme.html
M resources/theme/theme1/views/class-view.pt
M resources/theme/theme1/views/context-view.pt
M resources/theme/theme1/views/name-view.pt
M resources/theme/theme1/views/permission-view.pt
M resources/theme/theme1/views/test-view.pt
M setup.cfg
M setup.py
M src/plone/__init__.py
M src/plone/app/__init__.py
M src/plone/app/theming/__init__.py
M src/plone/app/theming/browser/configure.zcml
M src/plone/app/theming/browser/controlpanel.pt
M src/plone/app/theming/browser/controlpanel.py
M src/plone/app/theming/browser/custom_css.py
M src/plone/app/theming/browser/help.py
M src/plone/app/theming/browser/resources/userguide.rst
M src/plone/app/theming/browser/theme-error.pt
M src/plone/app/theming/browser/themefile.py
M src/plone/app/theming/configure.zcml
M src/plone/app/theming/events.py
M src/plone/app/theming/exportimport/configure.zcml
M src/plone/app/theming/exportimport/handler.py
M src/plone/app/theming/header.py
M src/plone/app/theming/interfaces.py
M src/plone/app/theming/plugins/__init__.py
M src/plone/app/theming/plugins/configure.zcml
M src/plone/app/theming/plugins/hooks.py
M src/plone/app/theming/plugins/utils.py
M src/plone/app/theming/policy.py
M src/plone/app/theming/profiles/default/browserlayer.xml
M src/plone/app/theming/profiles/default/controlpanel.xml
M src/plone/app/theming/profiles/default/metadata.xml
M src/plone/app/theming/profiles/default/registry.xml
M src/plone/app/theming/testing.py
M src/plone/app/theming/tests/another-theme/rules.xml
M src/plone/app/theming/tests/configure.zcml
M src/plone/app/theming/tests/french.html
M src/plone/app/theming/tests/includes.html
M src/plone/app/theming/tests/includes.xml
M src/plone/app/theming/tests/localrules.xml
M src/plone/app/theming/tests/nonascii.html
M src/plone/app/theming/tests/nonascii.xml
M src/plone/app/theming/tests/notheme.pt
M src/plone/app/theming/tests/one.html
M src/plone/app/theming/tests/otherrules.xml
M src/plone/app/theming/tests/othertheme.html
M src/plone/app/theming/tests/paramrules.xml
M src/plone/app/theming/tests/resources/css-js.xml
M src/plone/app/theming/tests/resources/nonascii.html
M src/plone/app/theming/tests/resources/nonascii.xml
M src/plone/app/theming/tests/resources/othertheme.html
M src/plone/app/theming/tests/resources/overridesrules.xml
M src/plone/app/theming/tests/resources/overridestheme.html
M src/plone/app/theming/tests/resources/rules.xml
M src/plone/app/theming/tests/resources/theme.html
M src/plone/app/theming/tests/rules.xml
M src/plone/app/theming/tests/secondary-theme/rules.xml
M src/plone/app/theming/tests/test_controlpanel.py
M src/plone/app/theming/tests/test_exportimport.py
M src/plone/app/theming/tests/test_policy.py
M src/plone/app/theming/tests/test_transform.py
M src/plone/app/theming/tests/test_utils.py
M src/plone/app/theming/tests/theme.html
M src/plone/app/theming/tests/two.html
M src/plone/app/theming/theme.py
M src/plone/app/theming/themes.zcml
M src/plone/app/theming/themes/template/index.html
M src/plone/app/theming/themes/template/rules.xml
M src/plone/app/theming/transform.py
M src/plone/app/theming/traversal.py
M src/plone/app/theming/upgrade.py
M src/plone/app/theming/utils.py
M src/plone/app/theming/zmi.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 00000000..b4158b89\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 00000000..697a54cb\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "80cf330f"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 00000000..582f8acd\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.2\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 54978204..e24ff66e 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -157,7 +157,7 @@ Bug fixes:\n \n - Fixes #187: Invalid dependency on plone.app.caching\n   [jensens] (#187)\n-- Cleanup: Remove meanwhile unused test fixture code refering to ``plone.app.caching``.\n+- Cleanup: Remove meanwhile unused test fixture code referring to ``plone.app.caching``.\n   Removed class and fixtures: ``ThemingWithCaching``, ``THEMINGWITHCACHING_FIXTURE``, ``THEMINGWITHCACHING_TESTING``.\n   Those were nowhere used active in Plone nor outside in Github.\n   [jensens] (#188)\n@@ -315,7 +315,7 @@ New features:\n \n Bug fixes:\n \n-- Explizit load permissions for controlpanel.\n+- Explicit load permissions for controlpanel.\n   [jensens]\n \n - Fix tests for merged plone.login.\n@@ -433,7 +433,7 @@ Fixes:\n   [staeff]\n \n - Fix issue where theming control panel errored when a packaged\n-  theme was overidden with a global resource directory theme\n+  theme was overridden with a global resource directory theme\n   [datakurre]\n \n 1.3.0 (2016-06-07)\n@@ -447,7 +447,7 @@ New:\n \n Fixes:\n \n-- Small fixes to documentaion\n+- Small fixes to documentation\n   [ale-rt]\n \n 1.2.19 (2016-03-31)\n@@ -486,7 +486,7 @@ Fixes:\n - Rebuild resources so they work with latest mockup/patternslib\n   integration changes.  [vangheem]\n \n-- Removed github dependancies in thememapper.  [Gagaro]\n+- Removed github dependencies in thememapper.  [Gagaro]\n \n \n 1.2.16 (2015-11-26)\n@@ -615,7 +615,7 @@ Fixes:\n - removed irrelevant theme renaming code\n   [schwartz]\n \n-- Filesystem themes are now correctly overridden. TTW themes can no longer be overriden\n+- Filesystem themes are now correctly overridden. TTW themes can no longer be overridden\n   [schwartz]\n \n - re-added manifest check\ndiff --git a/docs/index.rst b/docs/index.rst\nindex 03b77f7c..9c873611 100644\n--- a/docs/index.rst\n+++ b/docs/index.rst\n@@ -239,7 +239,7 @@ Advanced settings\n \n The *Theming* control panel also contains a tab named *Advanced settings*.\n \n-The *Advanced setings* tab is divided into two areas.\n+The *Advanced settings* tab is divided into two areas.\n The first, *Theme details*, contains the underlying settings that are modified when a theme is applied from the *Themes* control panel.\n These are:\n \n@@ -350,7 +350,7 @@ You can preview or enable the theme through the *Themes* control panel, and then\n \n    Notice the declaration of the ``plone`` namespace at the root ``<configure />`` element.\n    Place the theme files and the ``rules.xml`` file into the ``theme`` directory.\n-   Your theme is immediately available due to the existance of this ``theme`` type ``plone.resource`` directory,\n+   Your theme is immediately available due to the existence of this ``theme`` type ``plone.resource`` directory,\n    if it contains a ``manifest.cfg`` (see below) and a ``rules.xml`` file.\n \n    If you want your theme automatically enabled upon installation of your Python package,\ndiff --git a/news/80cf330f.internal b/news/80cf330f.internal\nnew file mode 100644\nindex 00000000..c08f5399\n--- /dev/null\n+++ b/news/80cf330f.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/news/permission-move.bugfix b/news/permission-move.bugfix\nnew file mode 100644\nindex 00000000..900e9f2f\n--- /dev/null\n+++ b/news/permission-move.bugfix\n@@ -0,0 +1,3 @@\n+Fixes circular dependency on ZCML level to `Products.CMFPlone`:\n+Move permission id=`plone.app.controlpanel.Themes` title=`Plone Site Setup: Themes` to this package.\n+[jensens]\n\\ No newline at end of file\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615de..9eb73f3c 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/resources/theme/theme1/othertheme.html b/resources/theme/theme1/othertheme.html\nindex 24c9a41c..db7304e2 100644\n--- a/resources/theme/theme1/othertheme.html\n+++ b/resources/theme/theme1/othertheme.html\n@@ -1,9 +1,9 @@\n <html>\n-<head>\n+  <head>\n     <title>Title</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n     <h1 id="pageTitle">Page title</h1>\n     <p>This is the other theme.</p>\n-</body>\n-</html>\n\\ No newline at end of file\n+  </body>\n+</html>\ndiff --git a/resources/theme/theme1/overrides/plone.app.layout.viewlets.colophon.pt b/resources/theme/theme1/overrides/plone.app.layout.viewlets.colophon.pt\nindex 218c3491..3fb1ed84 100644\n--- a/resources/theme/theme1/overrides/plone.app.layout.viewlets.colophon.pt\n+++ b/resources/theme/theme1/overrides/plone.app.layout.viewlets.colophon.pt\n@@ -1,19 +1,22 @@\n <div id="portal-colophon"\n      metal:define-macro="colophon"\n-     i18n:domain="plone">\n-<metal:slot define-slot="colophon" />\n-<div class="colophonWrapper">\n-<ul>\n-  <li>\n-    <a href="http://plone.com" target="_blank"\n-       title="This site was built using the Plone Open Source CMS/WCM."\n-       i18n:attributes="title title_built_with_plone;"\n-       i18n:translate="label_powered_by_plone">\n-      Powered by Plone &amp; Python</a>\n-  </li>\n-  <li>\n+     i18n:domain="plone"\n+>\n+  <metal:slot define-slot="colophon" />\n+  <div class="colophonWrapper">\n+    <ul>\n+      <li>\n+        <a href="http://plone.com"\n+           target="_blank"\n+           title="This site was built using the Plone Open Source CMS/WCM."\n+           i18n:attributes="title title_built_with_plone;"\n+           i18n:translate="label_powered_by_plone"\n+        >\n+          Powered by Plone &amp; Python</a>\n+      </li>\n+      <li>\n     and Diazo\n-  </li>\n-</ul>\n-</div>\n+      </li>\n+    </ul>\n+  </div>\n </div>\ndiff --git a/resources/theme/theme1/rules.xml b/resources/theme/theme1/rules.xml\nindex 8496a6c0..d72ed30a 100644\n--- a/resources/theme/theme1/rules.xml\n+++ b/resources/theme/theme1/rules.xml\n@@ -1,24 +1,36 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules\n-    xmlns="http://namespaces.plone.org/diazo"\n-    xmlns:css="http://namespaces.plone.org/diazo/css"\n-    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+       xmlns:xsl="http://www.w3.org/1999/XSL/Transform"\n+>\n \n-    <rules css:if-content="#visual-portal-wrapper">\n+  <rules css:if-content="#visual-portal-wrapper">\n \n-        <theme href="theme.html" />\n-        <theme href="othertheme.html" if-path="news"/>\n+    <theme href="theme.html" />\n+    <theme href="othertheme.html"\n+           if-path="news"\n+    />\n \n-        <replace css:content=\'html head title\' css:theme=\'html head title\' />\n-        <replace css:content=\'h1.documentFirstHeading\' css:theme=\'#pageTitle\' if="not($ajax_load)" />\n-        <after content=\'/html/head/link\' theme-children=\'/html/head\' />\n+    <replace css:content="html head title"\n+             css:theme="html head title"\n+    />\n+    <replace css:content="h1.documentFirstHeading"\n+             css:theme="#pageTitle"\n+             if="not($ajax_load)"\n+    />\n+    <after content="/html/head/link"\n+           theme-children="/html/head"\n+    />\n \n-        <replace css:content="#portal-colophon" css:theme="#footer" />\n+    <replace css:content="#portal-colophon"\n+             css:theme="#footer"\n+    />\n \n-        <replace css:theme="p">\n-            The value of frobble is <xsl:value-of select="$frobble" />\n-        </replace>\n+    <replace css:theme="p">\n+            The value of frobble is\n+      <xsl:value-of select="$frobble" />\n+    </replace>\n \n-    </rules>\n+  </rules>\n \n </rules>\ndiff --git a/resources/theme/theme1/theme.html b/resources/theme/theme1/theme.html\nindex 0aca0c50..4c31f86d 100644\n--- a/resources/theme/theme1/theme.html\n+++ b/resources/theme/theme1/theme.html\n@@ -1,10 +1,10 @@\n <html>\n-<head>\n+  <head>\n     <title>Title</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n     <h1 id="pageTitle">Page title</h1>\n     <p>This is the theme.</p>\n     <img src="relative.jpg" />\n     <div id="footer">footer</div>\n-</body>\n+  </body></html>\ndiff --git a/resources/theme/theme1/views/class-view.pt b/resources/theme/theme1/views/class-view.pt\nindex 27b978aa..e048588d 100644\n--- a/resources/theme/theme1/views/class-view.pt\n+++ b/resources/theme/theme1/views/class-view.pt\n@@ -1,95 +1,121 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+<html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       lang="en"\n       metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n \n-<head>\n+  <head>\n     <metal:block fill-slot="top_slot"\n-                 tal:define="dummy python:request.set(\'disable_border\',1);\n-                             disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n-                             disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);" />\n-</head>\n+                 tal:define="\n+                   dummy python:request.set(\'disable_border\',1);\n+                   disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n+                   disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);\n+                 "\n+    />\n+  </head>\n \n-<body>\n+  <body>\n \n-<tal:comment replace="nothing">\n+    <tal:comment replace="nothing">\n     Please note that this template fills the "content" slot instead of the\n     "main" slot, this is done so we can provide stuff like the content\n     tabs. This also means that we have to supply things that are normally\n     present from main_template.\n-</tal:comment>\n+    </tal:comment>\n \n-<metal:main fill-slot="content">\n-    <tal:main-macro metal:define-macro="main"\n-                    tal:define="memberinfo context/portal_membership/getMemberInfo;\n-                                member context/@@plone_portal_state/member;\n-                                name python:memberinfo[\'fullname\'] or member.getId() or member.getId();\n-                                portal_url context/portal_url">\n+    <metal:main fill-slot="content">\n+      <tal:main-macro metal:define-macro="main"\n+                      tal:define="\n+                        memberinfo context/portal_membership/getMemberInfo;\n+                        member context/@@plone_portal_state/member;\n+                        name python:memberinfo[\'fullname\'] or member.getId() or member.getId();\n+                        portal_url context/portal_url;\n+                      "\n+      >\n \n \n \n-        <div id="edit-bar" tal:condition="view/can_edit">\n-            <h5 class="hiddenStructure">Views</h5>\n+        <div id="edit-bar"\n+             tal:condition="view/can_edit"\n+        >\n+          <h5 class="hiddenStructure">Views</h5>\n \n-            <ul id="content-views"\n-                class="contentViews">\n-              <li class="selected">\n-                <a href=""\n-                   tal:attributes="href string:${context/@@plone_portal_state/navigation_root_url}/dashboard"\n-                   i18n:translate="label_dashboard">Dashboard</a>\n-              </li>\n-              <li>\n-                <a href=""\n-                   tal:attributes="href string:${context/@@plone_portal_state/navigation_root_url}/@@manage-dashboard"\n-                   i18n:translate="label_edit">Edit</a>\n-              </li>\n-            </ul>\n+          <ul class="contentViews"\n+              id="content-views"\n+          >\n+            <li class="selected">\n+              <a href=""\n+                 tal:attributes="\n+                   href string:${context/@@plone_portal_state/navigation_root_url}/dashboard;\n+                 "\n+                 i18n:translate="label_dashboard"\n+              >Dashboard</a>\n+            </li>\n+            <li>\n+              <a href=""\n+                 tal:attributes="\n+                   href string:${context/@@plone_portal_state/navigation_root_url}/@@manage-dashboard;\n+                 "\n+                 i18n:translate="label_edit"\n+              >Edit</a>\n+            </li>\n+          </ul>\n \n-            <div class="contentActions" tal:condition="view/can_edit">\n+          <div class="contentActions"\n+               tal:condition="view/can_edit"\n+          >\n               &nbsp;\n-            </div>\n+          </div>\n         </div>\n \n         <div metal:use-macro="context/global_statusmessage/macros/portal_message">\n             Portal status message\n         </div>\n-        <dl tal:condition="python:view.empty() and view.can_edit()"\n-            class="portalMessage info visualClear" id="dashboard-info-message">\n-            <dt i18n:translate="">Info</dt>\n-            <dd i18n:translate="info_empty_dashboard">\n+        <dl class="portalMessage info visualClear"\n+            id="dashboard-info-message"\n+            tal:condition="python:view.empty() and view.can_edit()"\n+        >\n+          <dt i18n:translate="">Info</dt>\n+          <dd i18n:translate="info_empty_dashboard">\n                 Your dashboard is currently empty. Click the\n-                <em>edit</em> tab to assign some personal\n+            <em>edit</em>\n+             tab to assign some personal\n                 portlets.\n-            </dd>\n+          </dd>\n         </dl>\n \n         <div id="content">\n \n-            <h1 class="documentFirstHeading">\n+          <h1 class="documentFirstHeading">\n                 Diazo w0z 3r3\n-            </h1>\n+          </h1>\n \n-            <div id="content-core">\n-                <div id="dashboard">\n-                    <div class="visualClear"><!-- --></div>\n-                    <div id="dashboard-portlets1"\n-                      tal:content="structure provider:plone.dashboard1" />\n-                    <div id="dashboard-portlets2"\n-                      tal:content="structure provider:plone.dashboard2" />\n-                    <div id="dashboard-portlets3"\n-                      tal:content="structure provider:plone.dashboard3" />\n-                    <div id="dashboard-portlets4"\n-                      tal:content="structure provider:plone.dashboard4" />\n-                </div>\n-                <div class="visualClear"><!-- --></div>\n+          <div id="content-core">\n+            <div id="dashboard">\n+              <div class="visualClear"><!-- --></div>\n+              <div id="dashboard-portlets1"\n+                   tal:content="structure provider:plone.dashboard1"\n+              ></div>\n+              <div id="dashboard-portlets2"\n+                   tal:content="structure provider:plone.dashboard2"\n+              ></div>\n+              <div id="dashboard-portlets3"\n+                   tal:content="structure provider:plone.dashboard3"\n+              ></div>\n+              <div id="dashboard-portlets4"\n+                   tal:content="structure provider:plone.dashboard4"\n+              ></div>\n             </div>\n+            <div class="visualClear"><!-- --></div>\n+          </div>\n         </div>\n \n-    </tal:main-macro>\n-</metal:main>\n+      </tal:main-macro>\n+    </metal:main>\n \n-</body>\n+  </body>\n </html>\ndiff --git a/resources/theme/theme1/views/context-view.pt b/resources/theme/theme1/views/context-view.pt\nindex 0d60a019..6a41c8dc 100644\n--- a/resources/theme/theme1/views/context-view.pt\n+++ b/resources/theme/theme1/views/context-view.pt\n@@ -1,6 +1,6 @@\n <html>\n-<body>\n+  <body>\n     <h1>Context view</h1>\n     <div tal:content="context/Title | nothing">title here</div>\n-</body>\n-</html>\n\\ No newline at end of file\n+  </body>\n+</html>\ndiff --git a/resources/theme/theme1/views/name-view.pt b/resources/theme/theme1/views/name-view.pt\nindex e4ebb1af..3f413c81 100644\n--- a/resources/theme/theme1/views/name-view.pt\n+++ b/resources/theme/theme1/views/name-view.pt\n@@ -1,6 +1,6 @@\n <html>\n-<body>\n+  <body>\n     <h1>Name view</h1>\n     <div tal:content="context/Title | nothing">title here</div>\n-</body>\n-</html>\n\\ No newline at end of file\n+  </body>\n+</html>\ndiff --git a/resources/theme/theme1/views/permission-view.pt b/resources/theme/theme1/views/permission-view.pt\nindex fff37719..1cdd15cb 100644\n--- a/resources/theme/theme1/views/permission-view.pt\n+++ b/resources/theme/theme1/views/permission-view.pt\n@@ -1,6 +1,6 @@\n <html>\n-<body>\n+  <body>\n     <h1>Permission view</h1>\n     <div tal:content="context/Title | nothing">title here</div>\n-</body>\n-</html>\n\\ No newline at end of file\n+  </body>\n+</html>\ndiff --git a/resources/theme/theme1/views/test-view.pt b/resources/theme/theme1/views/test-view.pt\nindex 7931fc1d..55238aef 100644\n--- a/resources/theme/theme1/views/test-view.pt\n+++ b/resources/theme/theme1/views/test-view.pt\n@@ -1,6 +1,6 @@\n <html>\n-<body>\n+  <body>\n     <h1>Test view</h1>\n     <div tal:content="context/Title | nothing">title here</div>\n-</body>\n-</html>\n\\ No newline at end of file\n+  </body>\n+</html>\ndiff --git a/setup.cfg b/setup.cfg\nindex 526aeb28..0da8f8fb 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex 454759c5..27b45737 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -4,26 +4,20 @@\n import os\n \n \n-version = \'5.0.2.dev0\'\n+version = "5.0.2.dev0"\n \n longdescription = open("README.rst").read()\n longdescription += "\\n\\n"\n longdescription += open(\n     os.path.join(\n-        "src",\n-        "plone",\n-        "app",\n-        "theming",\n-        "browser",\n-        "resources",\n-        "userguide.rst"\n+        "src", "plone", "app", "theming", "browser", "resources", "userguide.rst"\n     )\n ).read()\n longdescription += "\\n\\n"\n longdescription += open("CHANGES.rst").read()\n \n setup(\n-    name=\'plone.app.theming\',\n+    name="plone.app.theming",\n     version=version,\n     description="Integrates the Diazo theming engine with Plone",\n     long_description=longdescription,\n@@ -40,37 +34,48 @@\n         "Programming Language :: Python :: 3.11",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n     ],\n-    keywords=\'plone diazo xdv deliverance theme transform xslt\',\n-    author=\'Martin Aspeli and Laurence Rowe\',\n-    author_email=\'optilude@gmail.com\',\n-    url=\'https://pypi.org/project/plone.app.theming\',\n-    license=\'GPL\',\n-    packages=find_packages(\'src\'),\n-    package_dir={\'\': \'src\'},\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    keywords="plone diazo xdv deliverance theme transform xslt",\n+    author="Martin Aspeli and Laurence Rowe",\n+    author_email="optilude@gmail.com",\n+    url="https://pypi.org/project/plone.app.theming",\n+    license="GPL",\n+    packages=find_packages("src"),\n+    package_dir={"": "src"},\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     python_requires=">=3.8",\n     install_requires=[\n-        \'diazo>=1.0.3\',\n-        \'docutils\',\n-        \'lxml>=2.2.4\',\n-        \'plone.app.registry>=1.0\',\n-        \'plone.resourceeditor>=2.0.0\',\n-        \'plone.staticresources\',\n-        \'plone.subrequest\',\n-        \'plone.transformchain\',\n-        \'python-dateutil\',\n-        \'repoze.xmliter>=0.3\',\n-        \'roman\',\n-        \'setuptools\',\n-        \'zope.traversing\',\n+        "diazo>=1.0.3",\n+        "docutils",\n+        "lxml>=2.2.4",\n+        "plone.app.registry>=1.0",\n+        "plone.base",\n+        "plone.i18n",\n+        "plone.memoize",\n+        "plone.registry",\n+        "plone.resource",\n+        "plone.resourceeditor>=2.0.0",\n+        "plone.staticresources",\n+        "plone.subrequest",\n+        "plone.transformchain",\n+        "python-dateutil",\n+        "Products.GenericSetup",\n+        "Products.statusmessages",\n+        "repoze.xmliter>=0.3",\n+        "setuptools",\n+        "zope.processlifetime",\n+        "zope.traversing",\n     ],\n     extras_require={\n-        \'test\': [\'plone.app.testing\'],\n+        "test": [\n+            "plone.app.testing",\n+            "plone.app.contenttypes[test]",\n+            "plone.testing",\n+        ],\n     },\n     entry_points="""\n     [z3c.autoinclude.plugin]\n     target = plone\n     """,\n-    )\n+)\ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex de40ea7c..5284146e 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/app/__init__.py b/src/plone/app/__init__.py\nindex de40ea7c..5284146e 100644\n--- a/src/plone/app/__init__.py\n+++ b/src/plone/app/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/app/theming/__init__.py b/src/plone/app/theming/__init__.py\nindex 694ea023..bd59046b 100644\n--- a/src/plone/app/theming/__init__.py\n+++ b/src/plone/app/theming/__init__.py\n@@ -1,3 +1,3 @@\n # make this a namespace packages (plone.app.theming.plugins is an\n # extensible python namespace\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/app/theming/browser/configure.zcml b/src/plone/app/theming/browser/configure.zcml\nindex 799374ad..b2391895 100644\n--- a/src/plone/app/theming/browser/configure.zcml\n+++ b/src/plone/app/theming/browser/configure.zcml\n@@ -2,47 +2,51 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n     xmlns:i18n="http://namespaces.zope.org/i18n"\n-    i18n_domain="plone">\n-\n-    <include package="Products.CMFPlone.controlpanel" file="permissions.zcml" />\n-\n-    <browser:resource\n-        name="plone.app.theming.gif"\n-        image="icon.gif"\n-        />\n-\n-    <browser:resourceDirectory\n-        name="plone.app.theming"\n-        directory="resources"\n-        />\n-\n-    <browser:page\n-        name="theming-controlpanel"\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n-        class=".controlpanel.ThemingControlpanel"\n-        template="controlpanel.pt"\n-        permission="plone.app.controlpanel.Themes"\n-        />\n-\n-    <browser:page\n-        name="theming-controlpanel-help"\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n-        class=".help.Help"\n-        permission="zope2.View"\n-        />\n-\n-\t<browser:page\n-        name="themeFileUpload"\n-        for="*"\n-        class=".themefile.FileUploadView"\n-        permission="plone.app.controlpanel.Themes"\n-        />\n-\n-    <browser:page\n-        name="custom.css"\n-        for="*"\n-        class=".custom_css.CustomCSSView"\n-        permission="zope.Public"\n-        />\n+    i18n_domain="plone"\n+    >\n+\n+  <permission\n+      id="plone.app.controlpanel.Themes"\n+      title="Plone Site Setup: Themes"\n+      />\n+\n+  <browser:resource\n+      name="plone.app.theming.gif"\n+      image="icon.gif"\n+      />\n+\n+  <browser:resourceDirectory\n+      name="plone.app.theming"\n+      directory="resources"\n+      />\n+\n+  <browser:page\n+      name="theming-controlpanel"\n+      for="plone.base.interfaces.IPloneSiteRoot"\n+      class=".controlpanel.ThemingControlpanel"\n+      template="controlpanel.pt"\n+      permission="plone.app.controlpanel.Themes"\n+      />\n+\n+  <browser:page\n+      name="theming-controlpanel-help"\n+      for="plone.base.interfaces.IPloneSiteRoot"\n+      class=".help.Help"\n+      permission="zope2.View"\n+      />\n+\n+  <browser:page\n+      name="themeFileUpload"\n+      for="*"\n+      class=".themefile.FileUploadView"\n+      permission="plone.app.controlpanel.Themes"\n+      />\n+\n+  <browser:page\n+      name="custom.css"\n+      for="*"\n+      class=".custom_css.CustomCSSView"\n+      permission="zope.Public"\n+      />\n \n </configure>\ndiff --git a/src/plone/app/theming/browser/controlpanel.pt b/src/plone/app/theming/browser/controlpanel.pt\nindex 09326437..736c6c6a 100644\n--- a/src/plone/app/theming/browser/controlpanel.pt\n+++ b/src/plone/app/theming/browser/controlpanel.pt\n@@ -1,68 +1,86 @@\n <tal:doctype tal:replace="structure string:&lt;!DOCTYPE html&gt;" />\n \n <html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      tal:define="\n+        portal_state context/@@plone_portal_state;\n+        plone_view context/@@plone;\n+        plone_layout context/@@plone_layout;\n+        lang portal_state/language;\n+        view nocall:view | nocall: plone_view;\n+        portal_url portal_state/portal_url;\n+        ajax_load python:False;\n+        dummy python: request.set(\'disable_toolbar\', True);\n+        site_url view/site_url;\n+      "\n+      tal:attributes="\n+        lang lang;\n+      "\n       i18n:domain="plone"\n-      tal:define="portal_state context/@@plone_portal_state;\n-          plone_view context/@@plone;\n-          plone_layout context/@@plone_layout;\n-          lang portal_state/language;\n-          view nocall:view | nocall: plone_view;\n-          portal_url portal_state/portal_url;\n-          ajax_load python:False;\n-          dummy python: request.set(\'disable_toolbar\', True);\n-          site_url view/site_url"\n-      tal:attributes="lang lang;">\n-\n-    <metal:cache tal:replace="structure provider:plone.httpheaders" />\n+>\n+\n+  <metal:cache tal:replace="structure provider:plone.httpheaders" />\n \n   <head>\n     <meta charset="utf-8" />\n \n-    <div tal:replace="structure provider:plone.htmlhead" />\n+    <div tal:replace="structure provider:plone.htmlhead"></div>\n     <link tal:replace="structure provider:plone.htmlhead.links" />\n-    <link\n-        rel="stylesheet"\n-        type="text/css"\n-        tal:attributes="href string:${context/portal_url}/++theme++barceloneta/css/barceloneta.min.css"\n-        />\n-    <link\n-        rel="stylesheet"\n-        type="text/css"\n-        tal:attributes="href string:${context/portal_url}/++resource++plone.app.theming/controlpanel.css"\n-        />\n+    <link rel="stylesheet"\n+          type="text/css"\n+          tal:attributes="\n+            href string:${context/portal_url}/++theme++barceloneta/css/barceloneta.min.css;\n+          "\n+    />\n+    <link rel="stylesheet"\n+          type="text/css"\n+          tal:attributes="\n+            href string:${context/portal_url}/++resource++plone.app.theming/controlpanel.css;\n+          "\n+    />\n \n     <tal:comment replace="nothing">\n         Various slots where you can insert elements in the header from a template.\n     </tal:comment>\n \n-    <div tal:replace="structure provider:plone.scripts" />\n+    <div tal:replace="structure provider:plone.scripts"></div>\n \n-    <meta name="generator" content="Plone - http://plone.org" />\n+    <meta name="generator"\n+          content="Plone - http://plone.org"\n+    />\n \n   </head>\n \n-  <body tal:define="isRTL portal_state/is_rtl;\n-                    sl python:plone_layout.have_portlets(\'plone.leftcolumn\', view);\n-                    sr python:plone_layout.have_portlets(\'plone.rightcolumn\', view);\n-                    body_class python:plone_layout.bodyClass(template, view);"\n-        tal:attributes="class body_class;\n-                        dir python:isRTL and \'rtl\' or \'ltr\';\n-                        python:plone_view.patterns_settings()"\n-        id="visual-portal-wrapper">\n-\n-    <div tal:replace="structure provider:plone.toolbar" />\n+  <body id="visual-portal-wrapper"\n+        tal:define="\n+          isRTL portal_state/is_rtl;\n+          sl python:plone_layout.have_portlets(\'plone.leftcolumn\', view);\n+          sr python:plone_layout.have_portlets(\'plone.rightcolumn\', view);\n+          body_class python:plone_layout.bodyClass(template, view);\n+        "\n+        tal:attributes="\n+          class body_class;\n+          dir python:isRTL and \'rtl\' or \'ltr\';\n+          python:plone_view.patterns_settings();\n+        "\n+  >\n+\n+    <div tal:replace="structure provider:plone.toolbar"></div>\n \n     <aside id="global_statusmessage">\n-      <div class="portalMessage info" role="status">\n+      <div class="portalMessage info"\n+           role="status"\n+      >\n         <strong i18n:translate="">Note</strong>\n-        <span tal:omit-tag="" i18n:translate="description_notheme_controlpanel">\n+        <span tal:omit-tag=""\n+              i18n:translate="description_notheme_controlpanel"\n+        >\n           Please note that this control panel page will never be themed.\n         </span>\n       </div>\n-      <tal:message tal:content="structure provider:plone.globalstatusmessage"/>\n+      <tal:message tal:content="structure provider:plone.globalstatusmessage" />\n     </aside>\n \n \n@@ -73,305 +91,444 @@\n         <article id="content">\n \n           <header>\n-            <div id="viewlet-above-content-title" tal:content="structure provider:plone.abovecontenttitle" />\n+            <div id="viewlet-above-content-title"\n+                 tal:content="structure provider:plone.abovecontenttitle"\n+            ></div>\n             <h1 class="documentFirstHeading"\n-                i18n:translate="heading_theme_settings">Theme settings</h1>\n-\n-            <a id="setup-link" class="link-parent"\n-                tal:attributes="href string:$site_url/@@overview-controlpanel"\n-                i18n:translate="">\n+                i18n:translate="heading_theme_settings"\n+            >Theme settings</h1>\n+\n+            <a class="link-parent"\n+               id="setup-link"\n+               tal:attributes="\n+                 href string:$site_url/@@overview-controlpanel;\n+               "\n+               i18n:translate=""\n+            >\n               Site Setup\n             </a>\n           </header>\n \n           <section id="content-core">\n \n-<div id="themeControlPanel" class="pat-autotoc autotabs"\n-    data-pat-autotoc="section:section;levels:h2;">\n+            <div class="pat-autotoc autotabs"\n+                 id="themeControlPanel"\n+                 data-pat-autotoc="section:section;levels:h2;"\n+            >\n \n-    <section>\n-        <h2 i18n:translate="">Themes</h2>\n+              <section>\n+                <h2 i18n:translate="">Themes</h2>\n \n-        <p i18n:translate="description_basic_settings">\n+                <p i18n:translate="description_basic_settings">\n             Use the buttons to create or upload a new Diazo theme,\n             or select an existing theme from a the list below.\n-        </p>\n+                </p>\n \n-        <div class="m-1">\n-            <!-- <a href="#overlay-new-theme" class="btn btn-large btn-primary pat-plone-modal"\n+                <div class="m-1">\n+                  <!-- <a href="#overlay-new-theme" class="btn btn-large btn-primary pat-plone-modal"\n                 data-pat-plone-modal="width: 80%"\n                 i18n:translate="">New theme</a> -->\n \n-            <a href="#overlay-upload" class="btn btn-large btn-primary pat-plone-modal"\n-                data-pat-plone-modal="width: 80%"\n-                i18n:translate="">Upload Zip file</a>\n-\n-            <a tal:attributes="href string:$site_url/test_rendering#top"\n-                class="btn btn-large btn-primary"\n-                target="_blank"\n-                i18n:translate="">Test Styles</a>\n-\n-            <a tal:attributes="href string:$site_url/@@theming-controlpanel-help"\n-                class="btn btn-large btn-primary pat-plone-modal"\n-                data-pat-plone-modal="\n+                  <a class="btn btn-large btn-primary pat-plone-modal"\n+                     href="#overlay-upload"\n+                     data-pat-plone-modal="width: 80%"\n+                     i18n:translate=""\n+                  >Upload Zip file</a>\n+\n+                  <a class="btn btn-large btn-primary"\n+                     target="_blank"\n+                     tal:attributes="\n+                       href string:$site_url/test_rendering#top;\n+                     "\n+                     i18n:translate=""\n+                  >Test Styles</a>\n+\n+                  <a class="btn btn-large btn-primary pat-plone-modal"\n+                     data-pat-plone-modal="\n                     width: 85%;\n                     loadLinksWithinModal: true;\n                     content: .content"\n-                i18n:translate="">Help</a>\n-        </div>\n+                     tal:attributes="\n+                       href string:$site_url/@@theming-controlpanel-help;\n+                     "\n+                     i18n:translate=""\n+                  >Help</a>\n+                </div>\n \n-        <div id="themesList">\n+                <div id="themesList">\n \n-            <div class="themeEntry"\n-                tal:repeat="theme view/themeList"\n-                tal:attributes="class python:theme[\'selected\'] and \'themeEntry activeThemeEntry\' or \'themeEntry\';\n-                                id string:themeEntry-${theme/name};\n-                                data-theme theme/name;\n-                                data-theme-title theme/title;">\n+                  <div class="themeEntry"\n+                       tal:repeat="theme view/themeList"\n+                       tal:attributes="\n+                         class python:theme[\'selected\'] and \'themeEntry activeThemeEntry\' or \'themeEntry\';\n+                         id string:themeEntry-${theme/name};\n+                         data-theme theme/name;\n+                         data-theme-title theme/title;\n+                       "\n+                  >\n \n-                <div clas="themeEntryDetail">\n+                    <div clas="themeEntryDetail">\n \n-                    <span class="themeEntryTitle">\n+                      <span class="themeEntryTitle">\n                         <span tal:replace="theme/title">Title</span>\n-                        <span class="warning" tal:condition="theme/override" i18n:translate="">(this theme overrides a filesystem theme)</span>\n-                        <span\n-                            tal:condition="theme/selected"\n-                            class="themeActive"\n-                            i18n:translate="">(active)</span>\n-                    </span>\n-\n-                    <div class="themeEntryWrapper">\n+                        <span class="warning"\n+                              tal:condition="theme/override"\n+                              i18n:translate=""\n+                        >(this theme overrides a filesystem theme)</span>\n+                        <span class="themeActive"\n+                              tal:condition="theme/selected"\n+                              i18n:translate=""\n+                        >(active)</span>\n+                      </span>\n+\n+                      <div class="themeEntryWrapper">\n \n                         <div class="previewImageContainer">\n-                            <img tal:attributes="src theme/preview" />\n+                          <img tal:attributes="\n+                                 src theme/preview;\n+                               " />\n                         </div>\n \n-                        <div class="themeDescription" tal:content="theme/description" />\n+                        <div class="themeDescription"\n+                             tal:content="theme/description"\n+                        ></div>\n \n                         <div class="themeEntryControls">\n \n-                            <form method="post" tal:attributes="action request/URL">\n-                                <input tal:replace="structure context/@@authenticator/authenticator" />\n-                                <input type="hidden" name="themeName" tal:attributes="value theme/name" />\n-                                <button\n+                          <form method="post"\n+                                tal:attributes="\n+                                  action request/URL;\n+                                "\n+                          >\n+                            <input tal:replace="structure context/@@authenticator/authenticator" />\n+                            <input name="themeName"\n+                                   type="hidden"\n+                                   tal:attributes="\n+                                     value theme/name;\n+                                   "\n+                            />\n+                            <button class="btn btn-outline-primary btn-light btn-sm"\n+                                    name="form.button.Enable"\n+                                    type="submit"\n                                     tal:condition="not:theme/selected"\n                                     i18n:translate=""\n-                                    class="btn btn-outline-primary btn-light btn-sm"\n+                            >Activate</button>\n+                            <button class="btn btn-outline-primary btn-light btn-sm"\n+                                    name="form.button.Enable"\n                                     type="submit"\n-                                    name="form.button.Enable">Activate</button>\n-                                <button\n                                     tal:condition="theme/selected"\n                                     i18n:translate=""\n-                                    class="btn btn-outline-primary btn-light btn-sm"\n+                            >Update</button>\n+                            <button class="btn btn-outline-primary btn-light btn-sm"\n+                                    name="form.button.Disable"\n                                     type="submit"\n-                                    name="form.button.Enable">Update</button>\n-                                <button\n                                     tal:condition="theme/selected"\n                                     i18n:translate=""\n-                                    class="btn btn-outline-primary btn-light btn-sm"\n+                            >Deactivate</button>\n+                            <button class="btn btn-outline-primary btn-light btn-sm"\n+                                    name="form.button.InvalidateCache"\n                                     type="submit"\n-                                    name="form.button.Disable">Deactivate</button>\n-                                <button\n                                     tal:condition="theme/selected"\n                                     i18n:translate=""\n-                                    class="btn btn-outline-primary btn-light btn-sm"\n-                                    type="submit"\n-                                    name="form.button.InvalidateCache">Clear Cache</button>\n-                            </form>\n-\n-                            <form method="get" target="_blank" tal:attributes="action string:${context/absolute_url}/++theme++${theme/name}/@@download-zip">\n-                                <button i18n:translate=""\n-                                    class="btn btn-outline-primary btn-light btn-sm">Download</button>\n-                            </form>\n-\n-                            <a href="#" class="btn btn-danger pat-plone-modal"\n-                                tal:condition="theme/editable"\n-                                tal:attributes="href string:#modal-delete-${theme/name}"\n-                                i18n:translate="">Delete</a>\n-                                <!-- Delete confirmation overlay -->\n-                            <div class="plone-modal"\n-                                style="display:none"\n-                                tal:attributes="id string:modal-delete-${theme/name}"\n-                                tal:condition="theme/editable">\n-                                <h1 class="documentFirstHeading" i18n:translate="theming_controlpanel_delete_confirm">\n-                                    Are you sure you want to delete <span\n-                                        tal:content="string:${theme/name}"\n-                                        i18n:name="theme_name"></span>\n-                                </h1>\n-\n-                                <p class="documentDescription" i18n:translate="theming_controlpanel_delete_confirm_description">\n+                            >Clear Cache</button>\n+                          </form>\n+\n+                          <form method="get"\n+                                target="_blank"\n+                                tal:attributes="\n+                                  action string:${context/absolute_url}/++theme++${theme/name}/@@download-zip;\n+                                "\n+                          >\n+                            <button class="btn btn-outline-primary btn-light btn-sm"\n+                                    i18n:translate=""\n+                            >Download</button>\n+                          </form>\n+\n+                          <a class="btn btn-danger pat-plone-modal"\n+                             href="#"\n+                             tal:condition="theme/editable"\n+                             tal:attributes="\n+                               href string:#modal-delete-${theme/name};\n+                             "\n+                             i18n:translate=""\n+                          >Delete</a>\n+                          <!-- Delete confirmation overlay -->\n+                          <div class="plone-modal"\n+                               style="display:none"\n+                               tal:condition="theme/editable"\n+                               tal:attributes="\n+                                 id string:modal-delete-${theme/name};\n+                               "\n+                          >\n+                            <h1 class="documentFirstHeading"\n+                                i18n:translate="theming_controlpanel_delete_confirm"\n+                            >\n+                                    Are you sure you want to delete\n+                              <span tal:content="string:${theme/name}"\n+                                    i18n:name="theme_name"\n+                              ></span>\n+                            </h1>\n+\n+                            <p class="documentDescription"\n+                               i18n:translate="theming_controlpanel_delete_confirm_description"\n+                            >\n                                     This operation cannot be undone. Note that filesystem themes\n                                     cannot be deleted from within Plone.\n-                                </p>\n-\n-                                <form name="delete" method="post" tal:attributes="action request/URL">\n-                                    <input tal:replace="structure context/@@authenticator/authenticator" />\n-                                    <input type="hidden" name="themes:list"\n-                                        id="deleteConfirmTheme"\n-                                        tal:attributes="value string:${theme/name}" />\n-                                    <div class="btn-group">\n-                                        <input\n-                                            type="submit"\n-                                            name="form.button.DeleteSelected"\n-                                            class="btn btn-danger save"\n-                                            value="Delete"\n-                                            i18n:attributes="value"\n-                                            />\n-                                        <input\n-                                            type="submit"\n-                                            class="btn btn-primary cancel"\n-                                            name="form.button.Cancel"\n-                                            value="Cancel"\n-                                            i18n:attributes="value"\n-                                            />\n-                                    </div>\n-                                </form>\n-                            </div>\n+                            </p>\n+\n+                            <form method="post"\n+                                  name="delete"\n+                                  tal:attributes="\n+                                    action request/URL;\n+                                  "\n+                            >\n+                              <input tal:replace="structure context/@@authenticator/authenticator" />\n+                              <input id="deleteConfirmTheme"\n+                                     name="themes:list"\n+                                     type="hidden"\n+                                     tal:attributes="\n+                                       value string:${theme/name};\n+                                     "\n+                              />\n+                              <div class="btn-group">\n+                                <input class="btn btn-danger save"\n+                                       name="form.button.DeleteSelected"\n+                                       type="submit"\n+                                       value="Delete"\n+                                       i18n:attributes="value"\n+                                />\n+                                <input class="btn btn-primary cancel"\n+                                       name="form.button.Cancel"\n+                                       type="submit"\n+                                       value="Cancel"\n+                                       i18n:attributes="value"\n+                                />\n+                              </div>\n+                            </form>\n+                          </div>\n \n                         </div>\n \n-                    </div>\n-\n-                 </div>\n-            </div>\n+                      </div>\n \n-            <div class="visualClear"><!-- --></div>\n-\n-        </div>\n-    </section>\n-    <section>\n-        <h2 i18n:translate="">Advanced settings</h2>\n-\n-        <form\n-            name="advanced"\n-            method="post"\n-            class="pat-formunloadalert"\n-            tal:attributes="action request/URL"\n-            tal:define="errors view/errors">\n+                    </div>\n+                  </div>\n \n-            <div class="pat-autotoc autotabs"\n-                data-pat-autotoc="section:fieldset;levels:legend;">\n-                <fieldset>\n-                    <legend i18n:translate="">Theme details</legend>\n+                  <div class="visualClear"><!-- --></div>\n \n-                    <p i18n:translate="description_advanced">\n+                </div>\n+              </section>\n+              <section>\n+                <h2 i18n:translate="">Advanced settings</h2>\n+\n+                <form class="pat-formunloadalert"\n+                      method="post"\n+                      name="advanced"\n+                      tal:define="\n+                        errors view/errors;\n+                      "\n+                      tal:attributes="\n+                        action request/URL;\n+                      "\n+                >\n+\n+                  <div class="pat-autotoc autotabs"\n+                       data-pat-autotoc="section:fieldset;levels:legend;"\n+                  >\n+                    <fieldset>\n+                      <legend i18n:translate="">Theme details</legend>\n+\n+                      <p i18n:translate="description_advanced">\n                        Use the fields below to configure the Diazo theme\n                        manually. Usually, these settings are applied by\n-                       enabling a theme from the <strong>Themes</strong>\n+                       enabling a theme from the\n+                        <strong>Themes</strong>\n                        tab.\n-                    </p>\n-\n-                    <div\n-                        class="field"\n-                        tal:define="selected python:request.get(\'themeEnabled\', view.theme_settings.enabled)">\n-\n-                        <input type="hidden" value="" name="themeEnabled:boolean:default" />\n-                        <input type="checkbox" value="1" name="themeEnabled:boolean" id="themeEnabled"\n-                            tal:attributes="checked python:\'themeEnabled\' if selected else None"\n-                            />\n-                        <label for="themeEnabled" i18n:translate="label_theme_enabled">Theme enabled</label>\n-                        <div class="formHelp" i18n:translate="help_theme_enabled">\n+                      </p>\n+\n+                      <div class="field"\n+                           tal:define="\n+                             selected python:request.get(\'themeEnabled\', view.theme_settings.enabled);\n+                           "\n+                      >\n+\n+                        <input name="themeEnabled:boolean:default"\n+                               type="hidden"\n+                               value=""\n+                        />\n+                        <input id="themeEnabled"\n+                               name="themeEnabled:boolean"\n+                               type="checkbox"\n+                               value="1"\n+                               tal:attributes="\n+                                 checked python:\'themeEnabled\' if selected else None;\n+                               "\n+                        />\n+                        <label for="themeEnabled"\n+                               i18n:translate="label_theme_enabled"\n+                        >Theme enabled</label>\n+                        <div class="formHelp"\n+                             i18n:translate="help_theme_enabled"\n+                        >\n                             If enabled the currently configured Diazo theme (if any)\n                             will be applied.\n                         </div>\n \n-                    </div>\n-\n-                    <div\n-                        tal:define="error errors/rules | nothing;\n-                                    rules python:request.get(\'rules\', view.theme_settings.rules)"\n-                        tal:attributes="class python:\'field error\' if error else \'field\'">\n-\n-                        <label for="rules" i18n:translate="label_rules">Rules file</label>\n-                        <div class="formHelp" i18n:translate="help_rules">\n+                      </div>\n+\n+                      <div tal:define="\n+                             error errors/rules | nothing;\n+                             rules python:request.get(\'rules\', view.theme_settings.rules);\n+                           "\n+                           tal:attributes="\n+                             class python:\'field error\' if error else \'field\';\n+                           "\n+                      >\n+\n+                        <label for="rules"\n+                               i18n:translate="label_rules"\n+                        >Rules file</label>\n+                        <div class="formHelp"\n+                             i18n:translate="help_rules"\n+                        >\n                             Enter a path or URL for the theme rules file.\n                         </div>\n \n-                        <div class="errorMessage" tal:content="error" tal:condition="error" />\n-\n-                        <input\n-                            name="rules"\n-                            id="rules"\n-                            type="text"\n-                            size="50"\n-                            tal:attributes="value rules"\n-                            />\n-\n-                    </div>\n-\n-                    <div\n-                        tal:define="error errors/absolutePrefix | nothing;\n-                                    absolutePrefix python:request.get(\'absolutePrefix\', view.theme_settings.absolutePrefix)"\n-                        tal:attributes="class python:\'field error\' if error else \'field\'">\n-\n-                        <label for="absolutePrefix" i18n:translate="label_absolute_prefix">Absolute path prefix</label>\n-                        <div class="formHelp" i18n:translate="help_absolute_prefix">\n+                        <div class="errorMessage"\n+                             tal:condition="error"\n+                             tal:content="error"\n+                        ></div>\n+\n+                        <input id="rules"\n+                               name="rules"\n+                               size="50"\n+                               type="text"\n+                               tal:attributes="\n+                                 value rules;\n+                               "\n+                        />\n+\n+                      </div>\n+\n+                      <div tal:define="\n+                             error errors/absolutePrefix | nothing;\n+                             absolutePrefix python:request.get(\'absolutePrefix\', view.theme_settings.absolutePrefix);\n+                           "\n+                           tal:attributes="\n+                             class python:\'field error\' if error else \'field\';\n+                           "\n+                      >\n+\n+                        <label for="absolutePrefix"\n+                               i18n:translate="label_absolute_prefix"\n+                        >Absolute path prefix</label>\n+                        <div class="formHelp"\n+                             i18n:translate="help_absolute_prefix"\n+                        >\n                             If your theme uses relative paths for images, stylesheets\n                             or other resources, you can enter a prefix here to make\n                             sure these resources will work regardless of which page\n                             Plone is rendering.\n                         </div>\n \n-                        <div class="errorMessage" tal:content="error" tal:condition="error" />\n-\n-                        <input\n-                            name="absolutePrefix"\n-                            id="absolutePrefix"\n-                            type="text"\n-                            size="50"\n-                            tal:attributes="value absolutePrefix"\n-                            />\n-\n-                    </div>\n-\n-                    <div\n-                        tal:define="error errors/doctype | nothing;\n-                                    doctype python:request.get(\'doctype\', view.theme_settings.doctype)"\n-                        tal:attributes="class python:\'field error\' if error else \'field\'">\n-\n-                        <label for="doctype" i18n:translate="label_doctype">Doctype</label>\n-                        <div class="formHelp" i18n:translate="help_doctype">\n+                        <div class="errorMessage"\n+                             tal:condition="error"\n+                             tal:content="error"\n+                        ></div>\n+\n+                        <input id="absolutePrefix"\n+                               name="absolutePrefix"\n+                               size="50"\n+                               type="text"\n+                               tal:attributes="\n+                                 value absolutePrefix;\n+                               "\n+                        />\n+\n+                      </div>\n+\n+                      <div tal:define="\n+                             error errors/doctype | nothing;\n+                             doctype python:request.get(\'doctype\', view.theme_settings.doctype);\n+                           "\n+                           tal:attributes="\n+                             class python:\'field error\' if error else \'field\';\n+                           "\n+                      >\n+\n+                        <label for="doctype"\n+                               i18n:translate="label_doctype"\n+                        >Doctype</label>\n+                        <div class="formHelp"\n+                             i18n:translate="help_doctype"\n+                        >\n                             You can specify a Doctype string which will be set on\n                             the output, for example "&lt;!DOCTYPE html&gt;". If left\n                             blank the default XHTML 1.0 transistional Doctype or\n                             that set in the Diazo theme is used.\n                         </div>\n \n-                        <div class="errorMessage" tal:content="error" tal:condition="error" />\n-\n-                        <input\n-                            name="doctype"\n-                            id="doctype"\n-                            type="text"\n-                            size="50"\n-                            tal:attributes="value doctype"\n-                            />\n-\n-                    </div>\n-\n-                    <div\n-                        class="field"\n-                        tal:define="selected python:request.get(\'readNetwork\', view.theme_settings.readNetwork)">\n-\n-                        <input type="hidden" value="" name="readNetwork:boolean:default" />\n-                        <input type="checkbox" value="1" name="readNetwork:boolean" id="readNetwork"\n-                            tal:attributes="checked python:\'readNetwork\' if selected else None"\n-                            />\n-                        <label for="readNetwork" i18n:translate="label_read_network">Read network</label>\n-                        <div class="formHelp" i18n:translate="help_read_network">\n+                        <div class="errorMessage"\n+                             tal:condition="error"\n+                             tal:content="error"\n+                        ></div>\n+\n+                        <input id="doctype"\n+                               name="doctype"\n+                               size="50"\n+                               type="text"\n+                               tal:attributes="\n+                                 value doctype;\n+                               "\n+                        />\n+\n+                      </div>\n+\n+                      <div class="field"\n+                           tal:define="\n+                             selected python:request.get(\'readNetwork\', view.theme_settings.readNetwork);\n+                           "\n+                      >\n+\n+                        <input name="readNetwork:boolean:default"\n+                               type="hidden"\n+                               value=""\n+                        />\n+                        <input id="readNetwork"\n+                               name="readNetwork:boolean"\n+                               type="checkbox"\n+                               value="1"\n+                               tal:attributes="\n+                                 checked python:\'readNetwork\' if selected else None;\n+                               "\n+                        />\n+                        <label for="readNetwork"\n+                               i18n:translate="label_read_network"\n+                        >Read network</label>\n+                        <div class="formHelp"\n+                             i18n:translate="help_read_network"\n+                        >\n                             Allow rules and themes to be read from remote servers.\n                         </div>\n \n-                    </div>\n-\n-                    <div\n-                        tal:define="error errors/hostnameBlacklist | nothing;\n-                                    hostnameBlacklist view/theme_settings/hostnameBlacklist | python:[];\n-                                    hostnameBlacklist python: view.hostname_blacklist or hostnameBlacklist"\n-                        tal:attributes="class python:\'field error\' if error else \'field\'">\n-\n-                        <label for="hostnameBlacklist" i18n:translate="label_hostname_blacklist">Unthemed host names</label>\n-                        <div class="formHelp" i18n:translate="help_hostname_blacklist">\n+                      </div>\n+\n+                      <div tal:define="\n+                             error errors/hostnameBlacklist | nothing;\n+                             hostnameBlacklist view/theme_settings/hostnameBlacklist | python:[];\n+                             hostnameBlacklist python: view.hostname_blacklist or hostnameBlacklist;\n+                           "\n+                           tal:attributes="\n+                             class python:\'field error\' if error else \'field\';\n+                           "\n+                      >\n+\n+                        <label for="hostnameBlacklist"\n+                               i18n:translate="label_hostname_blacklist"\n+                        >Unthemed host names</label>\n+                        <div class="formHelp"\n+                             i18n:translate="help_hostname_blacklist"\n+                        >\n                             If there are hostnames that you do not want to be\n                             themed, you can list them here, one per line. This is\n                             useful during theme development, so that you can\n@@ -381,271 +538,390 @@\n                             Plone.\n                         </div>\n \n-                        <div class="errorMessage" tal:content="error" tal:condition="error" />\n-\n-                        <textarea\n-                            name="hostnameBlacklist:lines"\n-                            id="hostnameBlacklist"\n-                            rows="5"\n-                            cols="50"\n-                            tal:content="python: \'\\n\'.join(hostnameBlacklist)"\n-                            ></textarea>\n-\n-                    </div>\n-\n-                    <div\n-                        tal:define="error errors/parameterExpressions | nothing;\n-                                    parameterExpressions python:view.theme_settings.parameterExpressions or {};\n-                                    parameterExpressions python:[\'%s = %s\' % (k,v) for k,v in parameterExpressions.items()];\n-                                    parameterExpressions python:request.get(\'parameterExpressions\', parameterExpressions)"\n-                        tal:attributes="class python:\'field error\' if error else \'field\'">\n-\n-                        <label for="parameterExpressions" i18n:translate="label_parameter_expressions">Parameter expressions</label>\n-                        <div class="formHelp" i18n:translate="help_parameter_expressions">\n+                        <div class="errorMessage"\n+                             tal:condition="error"\n+                             tal:content="error"\n+                        ></div>\n+\n+                        <textarea id="hostnameBlacklist"\n+                                  cols="50"\n+                                  name="hostnameBlacklist:lines"\n+                                  rows="5"\n+                                  tal:content="python: \'\\n\'.join(hostnameBlacklist)"\n+                        ></textarea>\n+\n+                      </div>\n+\n+                      <div tal:define="\n+                             error errors/parameterExpressions | nothing;\n+                             parameterExpressions python:view.theme_settings.parameterExpressions or {};\n+                             parameterExpressions python:[\'%s = %s\' % (k,v) for k,v in parameterExpressions.items()];\n+                             parameterExpressions python:request.get(\'parameterExpressions\', parameterExpressions);\n+                           "\n+                           tal:attributes="\n+                             class python:\'field error\' if error else \'field\';\n+                           "\n+                      >\n+\n+                        <label for="parameterExpressions"\n+                               i18n:translate="label_parameter_expressions"\n+                        >Parameter expressions</label>\n+                        <div class="formHelp"\n+                             i18n:translate="help_parameter_expressions"\n+                        >\n                             You can define parameters that will be passed\n                             to the compiled theme here. In your rules file, you can\n-                            refer to a parameter by <code>$name</code>. Parameters\n+                            refer to a parameter by\n+                          <code>$name</code>. Parameters\n                             are defined using TALES expressions, which should\n                             evaluate to a string, a number, a boolean or None.\n-                            Available variables are <code>context</code>,\n-                            <code>request</code>, <code>portal</code>,\n-                            <code>portal_state</code>, and\n-                            <code>context_state</code>. Define one variable\n-                            per line, in the format <code>name = expression</code>.\n+                            Available variables are\n+                          <code>context</code>,\n+                          <code>request</code>,\n+                          <code>portal</code>,\n+                          <code>portal_state</code>, and\n+                          <code>context_state</code>. Define one variable\n+                            per line, in the format\n+                          <code>name = expression</code>.\n                         </div>\n \n-                        <div class="errorMessage" tal:content="error" tal:condition="error" />\n+                        <div class="errorMessage"\n+                             tal:condition="error"\n+                             tal:content="error"\n+                        ></div>\n \n-                        <textarea\n-                            name="parameterExpressions:lines"\n-                            id="parameterExpressions"\n-                            rows="8"\n-                            cols="50"\n-                            tal:content="python:\'\\n\'.join(parameterExpressions)"\n-                            ></textarea>\n-                    </div>\n+                        <textarea id="parameterExpressions"\n+                                  cols="50"\n+                                  name="parameterExpressions:lines"\n+                                  rows="8"\n+                                  tal:content="python:\'\\n\'.join(parameterExpressions)"\n+                        ></textarea>\n+                      </div>\n \n-                </fieldset>\n-                <fieldset>\n-                    <legend i18n:translate="">Theme base</legend>\n+                    </fieldset>\n+                    <fieldset>\n+                      <legend i18n:translate="">Theme base</legend>\n \n-                    <p i18n:translate="description_advanced_base">\n+                      <p i18n:translate="description_advanced_base">\n                        The settings below control the presentation of the\n-                       <em>content</em> produced by Plone before a Diazo theme\n+                        <em>content</em>\n+                         produced by Plone before a Diazo theme\n                        is applied. Note that these settings will have an effect\n                        even if no Diazo theme is currently enabled.\n-                    </p>\n+                      </p>\n \n-                    <div\n-                        class="field"\n-                        tal:define="selected python:request.get(\'themeBase\', view.pskin.getDefaultSkin())">\n+                      <div class="field"\n+                           tal:define="\n+                             selected python:request.get(\'themeBase\', view.pskin.getDefaultSkin());\n+                           "\n+                      >\n \n-                        <label for="themeBase" i18n:translate="label_theme_base">Theme base</label>\n+                        <label for="themeBase"\n+                               i18n:translate="label_theme_base"\n+                        >Theme base</label>\n \n-                        <div class="formHelp" i18n:translate="help_theme_base">\n+                        <div class="formHelp"\n+                             i18n:translate="help_theme_base"\n+                        >\n                             The theme base defines a collection of templates and other\n                             resources that makes up the raw content to which a theme is\n                             applied. Most Diazo themes will assume the default theme base,\n                             so only change this if you know what you are doing.\n                         </div>\n \n-                        <select size="1" name="themeBase" id="themeBase">\n-                            <option\n-                                tal:repeat="skin view/skinsVocabulary"\n-                                tal:attributes="value skin/value;\n-                                                selected python:skin.value == selected and \'selected\' or None"\n-                                tal:content="skin/title"\n-                                />\n+                        <select id="themeBase"\n+                                name="themeBase"\n+                                size="1"\n+                        >\n+                          <option tal:repeat="skin view/skinsVocabulary"\n+                                  tal:content="skin/title"\n+                                  tal:attributes="\n+                                    value skin/value;\n+                                    selected python:skin.value == selected and \'selected\' or None;\n+                                  "\n+                          ></option>\n                         </select>\n \n-                    </div>\n-\n-                    <div\n-                        class="field"\n-                        tal:define="selected python:request.get(\'markSpecialLinks\', view.mark_special_links)">\n-\n-                        <input type="hidden" value="" name="markSpecialLinks:boolean:default" />\n-                        <input type="checkbox" value="1" name="markSpecialLinks:boolean" id="markSpecialLinks"\n-                            tal:attributes="checked python:\'markSpecialLinks\' if selected else None"\n-                            />\n-                        <label for="markSpecialLinks" i18n:translate="label_mark_special_links">Mark special links</label>\n-                        <div class="formHelp" i18n:translate="help_mark_special_links">\n+                      </div>\n+\n+                      <div class="field"\n+                           tal:define="\n+                             selected python:request.get(\'markSpecialLinks\', view.mark_special_links);\n+                           "\n+                      >\n+\n+                        <input name="markSpecialLinks:boolean:default"\n+                               type="hidden"\n+                               value=""\n+                        />\n+                        <input id="markSpecialLinks"\n+                               name="markSpecialLinks:boolean"\n+                               type="checkbox"\n+                               value="1"\n+                               tal:attributes="\n+                                 checked python:\'markSpecialLinks\' if selected else None;\n+                               "\n+                        />\n+                        <label for="markSpecialLinks"\n+                               i18n:translate="label_mark_special_links"\n+                        >Mark special links</label>\n+                        <div class="formHelp"\n+                             i18n:translate="help_mark_special_links"\n+                        >\n                             If enabled all external links will be marked with link type specific icons.\n                         </div>\n \n-                    </div>\n-\n-                    <div\n-                        class="field"\n-                        tal:define="selected python:request.get(\'extLinksOpenInNewWindow\', view.ext_links_open_new_window)">\n-\n-                        <input type="hidden" value="" name="extLinksOpenInNewWindow:boolean:default" />\n-                        <input type="checkbox" value="1" name="extLinksOpenInNewWindow:boolean" id="extLinksOpenInNewWindow"\n-                            tal:attributes="checked python:\'extLinksOpenInNewWindow\' if selected else None"\n-                            />\n-                        <label for="extLinksOpenInNewWindow" i18n:translate="label_ext_links_open_new_window">External links open in new window</label>\n-                        <div class="formHelp" i18n:translate="help_ext_links_open_new_window">\n+                      </div>\n+\n+                      <div class="field"\n+                           tal:define="\n+                             selected python:request.get(\'extLinksOpenInNewWindow\', view.ext_links_open_new_window);\n+                           "\n+                      >\n+\n+                        <input name="extLinksOpenInNewWindow:boolean:default"\n+                               type="hidden"\n+                               value=""\n+                        />\n+                        <input id="extLinksOpenInNewWindow"\n+                               name="extLinksOpenInNewWindow:boolean"\n+                               type="checkbox"\n+                               value="1"\n+                               tal:attributes="\n+                                 checked python:\'extLinksOpenInNewWindow\' if selected else None;\n+                               "\n+                        />\n+                        <label for="extLinksOpenInNewWindow"\n+                               i18n:translate="label_ext_links_open_new_window"\n+                        >External links open in new window</label>\n+                        <div class="formHelp"\n+                             i18n:translate="help_ext_links_open_new_window"\n+                        >\n                             If enabled all external links in the content region open in a new window.\n                         </div>\n \n-                    </div>\n-\n-                </fieldset>\n-                <fieldset>\n-                    <legend i18n:translate="">Custom Styles</legend>\n-\n-                    <div\n-                        tal:define="error errors/custom_css | nothing;\n-                                    custom_css view/theme_settings/custom_css | python: \'\';\n-                                    custom_css python:request.get(\'custom_css\', custom_css)"\n-                        tal:attributes="class python:\'field error\' if error else \'field\'">\n-\n-                        <label for="custom_css" i18n:translate="label_custom_css">Custom CSS</label>\n-                        <div class="formHelp" i18n:translate="help_custom_css">\n+                      </div>\n+\n+                    </fieldset>\n+                    <fieldset>\n+                      <legend i18n:translate="">Custom Styles</legend>\n+\n+                      <div tal:define="\n+                             error errors/custom_css | nothing;\n+                             custom_css view/theme_settings/custom_css | python: \'\';\n+                             custom_css python:request.get(\'custom_css\', custom_css);\n+                           "\n+                           tal:attributes="\n+                             class python:\'field error\' if error else \'field\';\n+                           "\n+                      >\n+\n+                        <label for="custom_css"\n+                               i18n:translate="label_custom_css"\n+                        >Custom CSS</label>\n+                        <div class="formHelp"\n+                             i18n:translate="help_custom_css"\n+                        >\n                             Define your own custom CSS in the field below. This is a good place for quick customizations of things like colors and the toolbar. Definitions here will override previously defined CSS of Plone. Please use this only for small customizations, as it is hard to keep track of changes here. For bigger changes you most likely want to customize a full theme and make your changes there.\n                         </div>\n                         <div class="theming_doc_link">\n-                            <p><a href="https://docs.plone.org/adapt-and-extend/theming" target="_blank" i18n:translate="label_theming_doc_link">Theming documentation</a></p>\n+                          <p><a href="https://docs.plone.org/adapt-and-extend/theming"\n+                               target="_blank"\n+                               i18n:translate="label_theming_doc_link"\n+                            >Theming documentation</a></p>\n                         </div>\n \n-                        <div class="errorMessage" tal:content="error" tal:condition="error" />\n-\n-                        <textarea\n-                            name="custom_css"\n-                            id="custom_css"\n-                            rows="40"\n-                            cols="160"\n-                            placeholder="Put your plain css..."\n-                            i18n:attributes="placeholder"\n-                            tal:content="custom_css"\n-                            class="pat-code-editor"\n-                            data-pat-code-editor="language: css; theme: tomorrow"\n-                            ></textarea>\n-\n-                    </div>\n-                </fieldset>\n-            </div>\n-\n-\n-            <div class="btn-group">\n-                <input\n-                    type="submit"\n-                    name="form.button.AdvancedSave"\n-                    class="btn btn-success save"\n-                    value="Save"\n-                    i18n:attributes="value" />\n-\n-                <input\n-                    type="submit"\n-                    name="form.button.Cancel"\n-                    class="btn btn-primary cancel"\n-                    value="Cancel"\n-                    i18n:attributes="value" />\n-            </div>\n+                        <div class="errorMessage"\n+                             tal:condition="error"\n+                             tal:content="error"\n+                        ></div>\n+\n+                        <textarea class="pat-code-editor"\n+                                  id="custom_css"\n+                                  cols="160"\n+                                  name="custom_css"\n+                                  placeholder="Put your plain css..."\n+                                  rows="40"\n+                                  data-pat-code-editor="language: css; theme: tomorrow"\n+                                  tal:content="custom_css"\n+                                  i18n:attributes="placeholder"\n+                        ></textarea>\n+\n+                      </div>\n+                    </fieldset>\n+                  </div>\n+\n+\n+                  <div class="btn-group">\n+                    <input class="btn btn-success save"\n+                           name="form.button.AdvancedSave"\n+                           type="submit"\n+                           value="Save"\n+                           i18n:attributes="value"\n+                    />\n \n-            <input tal:replace="structure context/@@authenticator/authenticator" />\n+                    <input class="btn btn-primary cancel"\n+                           name="form.button.Cancel"\n+                           type="submit"\n+                           value="Cancel"\n+                           i18n:attributes="value"\n+                    />\n+                  </div>\n \n+                  <input tal:replace="structure context/@@authenticator/authenticator" />\n \n \n-        </form>\n \n-    </section>\n+                </form>\n \n-</div>\n+              </section>\n \n-<!-- Upload overlay -->\n-<div id="overlay-upload" class="modal">\n-    <div>\n-        <h1 class="documentFirstHeading" i18n:translate="theming_controlpanel_upload">Upload theme</h1>\n+            </div>\n \n-        <p class="documentDescription" i18n:translate="description_import">\n+            <!-- Upload overlay -->\n+            <div class="modal"\n+                 id="overlay-upload"\n+            >\n+              <div>\n+                <h1 class="documentFirstHeading"\n+                    i18n:translate="theming_controlpanel_upload"\n+                >Upload theme</h1>\n+\n+                <p class="documentDescription"\n+                   i18n:translate="description_import"\n+                >\n            You can import a Zip file containing an existing theme.\n            This should contain a single top level directory, which will be used as\n-           the theme identifier. If no Diazo <code>rules.xml</code> or\n-           <code>manifest.cfg</code> file is found in this directory, a\n-           default <code>rules.xml</code> file will be created.\n-        </p>\n-\n-        <form\n-            name="import"\n-            method="post"\n-            enctype="multipart/form-data"\n-            class="pat-formunloadalert"\n-            tal:attributes="action request/URL"\n-            tal:define="errors view/errors">\n-\n-            <div\n-                class="field"\n-                tal:define="error errors/themeArchive | nothing"\n-                tal:attributes="class python:\'field error\' if error else \'field\'">\n-\n-                <div class="formHelp" i18n:translate="help_theme_archive">\n+           the theme identifier. If no Diazo\n+                  <code>rules.xml</code>\n+                   or\n+                  <code>manifest.cfg</code>\n+                   file is found in this directory, a\n+           default\n+                  <code>rules.xml</code>\n+                   file will be created.\n+                </p>\n+\n+                <form class="pat-formunloadalert"\n+                      enctype="multipart/form-data"\n+                      method="post"\n+                      name="import"\n+                      tal:define="\n+                        errors view/errors;\n+                      "\n+                      tal:attributes="\n+                        action request/URL;\n+                      "\n+                >\n+\n+                  <div class="field"\n+                       tal:define="\n+                         error errors/themeArchive | nothing;\n+                       "\n+                       tal:attributes="\n+                         class python:\'field error\' if error else \'field\';\n+                       "\n+                  >\n+\n+                    <div class="formHelp"\n+                         i18n:translate="help_theme_archive"\n+                    >\n                     Select a file to upload.\n-                </div>\n+                    </div>\n \n-                <div class="errorMessage" tal:content="error" tal:condition="error" />\n+                    <div class="errorMessage"\n+                         tal:condition="error"\n+                         tal:content="error"\n+                    ></div>\n \n-                <input\n-                    type="file"\n-                    name="themeArchive"\n-                    id="themeArchive"\n+                    <input id="themeArchive"\n+                           name="themeArchive"\n+                           type="file"\n                     />\n \n-            </div>\n+                  </div>\n \n-            <div\n-                class="field"\n-                tal:define="selected python:request.get(\'enableNewTheme\', False)">\n-                <input type="hidden" value="" name="enableNewTheme:boolean:default" />\n-                <input type="checkbox" value="1" name="enableNewTheme:boolean" id="enableNewTheme"\n-                    tal:attributes="checked python:\'enableNewTheme\' if selected else None"\n+                  <div class="field"\n+                       tal:define="\n+                         selected python:request.get(\'enableNewTheme\', False);\n+                       "\n+                  >\n+                    <input name="enableNewTheme:boolean:default"\n+                           type="hidden"\n+                           value=""\n                     />\n-                <label for="enableNewTheme" i18n:translate="label_enable_new_theme">Immediately enable new theme</label>\n-                <div class="formHelp" i18n:translate="help_enable_new_theme">\n+                    <input id="enableNewTheme"\n+                           name="enableNewTheme:boolean"\n+                           type="checkbox"\n+                           value="1"\n+                           tal:attributes="\n+                             checked python:\'enableNewTheme\' if selected else None;\n+                           "\n+                    />\n+                    <label for="enableNewTheme"\n+                           i18n:translate="label_enable_new_theme"\n+                    >Immediately enable new theme</label>\n+                    <div class="formHelp"\n+                         i18n:translate="help_enable_new_theme"\n+                    >\n                     Select this option to enable the newly uploaded theme\n                     immediately.\n-                </div>\n-            </div>\n-\n-            <div\n-                class="field"\n-                tal:define="selected python:request.get(\'replaceExisting\', False)">\n-                <input type="hidden" value="" name="replaceExisting:boolean:default" />\n-                <input type="checkbox" value="1" name="replaceExisting:boolean" id="replaceExisting"\n-                    tal:attributes="checked python:\'replaceExisting\' if selected else None"\n+                    </div>\n+                  </div>\n+\n+                  <div class="field"\n+                       tal:define="\n+                         selected python:request.get(\'replaceExisting\', False);\n+                       "\n+                  >\n+                    <input name="replaceExisting:boolean:default"\n+                           type="hidden"\n+                           value=""\n+                    />\n+                    <input id="replaceExisting"\n+                           name="replaceExisting:boolean"\n+                           type="checkbox"\n+                           value="1"\n+                           tal:attributes="\n+                             checked python:\'replaceExisting\' if selected else None;\n+                           "\n                     />\n-                <label for="replaceExisting" i18n:translate="label_replace_existing">Replace existing theme</label>\n-                <div class="formHelp" i18n:translate="help_replace_existing">\n+                    <label for="replaceExisting"\n+                           i18n:translate="label_replace_existing"\n+                    >Replace existing theme</label>\n+                    <div class="formHelp"\n+                         i18n:translate="help_replace_existing"\n+                    >\n                     Select this option to replace any existing theme that\n                     may have been uploaded previously.\n-                </div>\n-            </div>\n+                    </div>\n+                  </div>\n+\n+                  <div class="btn-group">\n+                    <input class="btn btn-success save"\n+                           name="form.button.Import"\n+                           type="submit"\n+                           value="Import"\n+                           i18n:attributes="value"\n+                    />\n \n-            <div class="btn-group">\n-                <input\n-                    type="submit"\n-                    name="form.button.Import"\n-                    class="btn btn-success save"\n-                    value="Import"\n-                    i18n:attributes="value" />\n-\n-                <input\n-                    type="submit"\n-                    name="form.button.Cancel"\n-                    class="btn btn-primary cancel"\n-                    value="Cancel"\n-                    i18n:attributes="value" />\n-            </div>\n+                    <input class="btn btn-primary cancel"\n+                           name="form.button.Cancel"\n+                           type="submit"\n+                           value="Cancel"\n+                           i18n:attributes="value"\n+                    />\n+                  </div>\n \n-            <input tal:replace="structure context/@@authenticator/authenticator" />\n+                  <input tal:replace="structure context/@@authenticator/authenticator" />\n \n-        </form>\n+                </form>\n \n-    </div>\n-</div>\n+              </div>\n+            </div>\n \n \n-    </section>\n+          </section>\n         </article>\n       </div>\n     </article>\ndiff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py\nindex 6c0ac4a8..35d33d4b 100644\n--- a/src/plone/app/theming/browser/controlpanel.py\n+++ b/src/plone/app/theming/browser/controlpanel.py\n@@ -14,12 +14,12 @@\n from plone.app.theming.utils import getOrCreatePersistentResourceDirectory\n from plone.app.theming.utils import getZODBThemes\n from plone.app.theming.utils import theming_policy\n+from plone.base.interfaces import ILinkSchema\n+from plone.base.utils import safe_text\n from plone.memoize.instance import memoize\n from plone.registry.interfaces import IRegistry\n from plone.resource.utils import queryResourceDirectory\n from Products.CMFCore.utils import getToolByName\n-from plone.base.utils import safe_text\n-from plone.base.interfaces import ILinkSchema\n from Products.statusmessages.interfaces import IStatusMessage\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n@@ -31,7 +31,7 @@\n import zipfile\n \n \n-logger = logging.getLogger(\'plone.app.theming\')\n+logger = logging.getLogger("plone.app.theming")\n \n \n def authorize(context, request):\n@@ -41,7 +41,6 @@ def authorize(context, request):\n \n \n class ThemingControlpanel(BrowserView):\n-\n     @property\n     def site_url(self):\n         """Return the absolute URL to the current site, which is likely not\n@@ -51,39 +50,36 @@ def site_url(self):\n \n     @property\n     def hostname_blacklist(self):\n-        hostname_blacklist = self.request.get(\'hostnameBlacklist\', [])\n+        hostname_blacklist = self.request.get("hostnameBlacklist", [])\n         return [safe_text(host) for host in hostname_blacklist]\n \n     def __call__(self):\n-        self.pskin = getToolByName(self.context, \'portal_skins\')\n+        self.pskin = getToolByName(self.context, "portal_skins")\n         if self.update():\n             return self.index()\n-        return \'\'\n+        return ""\n \n     def _setup(self):\n         registry = getUtility(IRegistry)\n         self.theme_settings = registry.forInterface(IThemeSettings, False)\n-        self.link_settings = registry.forInterface(ILinkSchema,\n-                                                   prefix="plone",\n-                                                   check=False)\n+        self.link_settings = registry.forInterface(\n+            ILinkSchema, prefix="plone", check=False\n+        )\n         self.zodbThemes = getZODBThemes()\n         self.availableThemes = getAvailableThemes()\n         self.selectedTheme = self.getSelectedTheme(\n             self.availableThemes,\n             self.theme_settings.currentTheme,\n-            self.theme_settings.rules\n+            self.theme_settings.rules,\n         )\n-        self.overlay = \'\'\n+        self.overlay = ""\n \n         self.skinsVocabulary = getUtility(\n-            IVocabularyFactory,\n-            name=\'plone.app.vocabularies.Skins\'\n-        )(\n-            self.context\n-        )\n+            IVocabularyFactory, name="plone.app.vocabularies.Skins"\n+        )(self.context)\n \n         # Set response header to make sure control panel is never themed\n-        self.request.response.setHeader(\'X-Theme-Disabled\', \'1\')\n+        self.request.response.setHeader("X-Theme-Disabled", "1")\n \n     def redirect(self, url):\n         self.request.response.redirect(url)\n@@ -94,8 +90,7 @@ def get_mark_special_links(self):\n     def set_mark_special_links(self, value):\n         self.link_settings.mark_special_links = value\n \n-    mark_special_links = property(get_mark_special_links,\n-                                  set_mark_special_links)\n+    mark_special_links = property(get_mark_special_links, set_mark_special_links)\n \n     def get_ext_links_open_new_window(self):\n         return self.link_settings.external_links_open_new_window\n@@ -103,8 +98,9 @@ def get_ext_links_open_new_window(self):\n     def set_ext_links_open_new_window(self, value):\n         self.link_settings.external_links_open_new_window = value\n \n-    ext_links_open_new_window = property(get_ext_links_open_new_window,\n-                                         set_ext_links_open_new_window)\n+    ext_links_open_new_window = property(\n+        get_ext_links_open_new_window, set_ext_links_open_new_window\n+    )\n \n     def update(self):\n         # XXX: complexity too high: refactoring needed\n@@ -112,27 +108,22 @@ def update(self):\n         self.errors = {}\n         form = self.request.form\n \n-        if \'form.button.Cancel\' in form:\n+        if "form.button.Cancel" in form:\n             IStatusMessage(self.request).add(_("Changes cancelled"))\n             self.redirect(f"{self.site_url}/@@overview-controlpanel")\n             return False\n \n-        if \'form.button.Enable\' in form:\n+        if "form.button.Enable" in form:\n             self.authorize()\n \n-            themeSelection = form.get(\'themeName\', None)\n+            themeSelection = form.get("themeName", None)\n \n             if themeSelection:\n-                themeData = self.getThemeData(\n-                    self.availableThemes,\n-                    themeSelection\n-                )\n+                themeData = self.getThemeData(self.availableThemes, themeSelection)\n                 applyTheme(themeData)\n                 self.theme_settings.enabled = True\n \n-            IStatusMessage(\n-                self.request\n-            ).add(\n+            IStatusMessage(self.request).add(\n                 _(\n                     "Theme enabled. Note that this control panel page is "\n                     "never themed."\n@@ -141,13 +132,13 @@ def update(self):\n             self._setup()\n             return True\n \n-        if \'form.button.InvalidateCache\' in form:\n+        if "form.button.InvalidateCache" in form:\n             self.authorize()\n             policy = theming_policy()\n             policy.invalidateCache()\n             return True\n \n-        if \'form.button.Disable\' in form:\n+        if "form.button.Disable" in form:\n             self.authorize()\n \n             applyTheme(None)\n@@ -157,38 +148,38 @@ def update(self):\n             self._setup()\n             return True\n \n-        if \'form.button.AdvancedSave\' in form:\n+        if "form.button.AdvancedSave" in form:\n             self.authorize()\n \n-            self.theme_settings.readNetwork = form.get(\'readNetwork\', False)\n+            self.theme_settings.readNetwork = form.get("readNetwork", False)\n \n-            themeEnabled = form.get(\'themeEnabled\', False)\n-            rules = form.get(\'rules\', None)\n-            prefix = form.get(\'absolutePrefix\', None)\n-            doctype = str(form.get(\'doctype\', ""))\n+            themeEnabled = form.get("themeEnabled", False)\n+            rules = form.get("rules", None)\n+            prefix = form.get("absolutePrefix", None)\n+            doctype = str(form.get("doctype", ""))\n \n             parameterExpressions = {}\n-            parameterExpressionsList = form.get(\'parameterExpressions\', [])\n+            parameterExpressionsList = form.get("parameterExpressions", [])\n \n             for line in parameterExpressionsList:\n                 try:\n-                    name, expression = line.split(\'=\', 1)\n+                    name, expression = line.split("=", 1)\n                     name = str(name.strip())\n                     expression = str(expression.strip())\n                     parameterExpressions[name] = expression\n                 except ValueError:\n                     message = _(\n-                        \'error_invalid_parameter_expressions\',\n+                        "error_invalid_parameter_expressions",\n                         default="Please ensure you enter one expression per "\n-                                "line, in the format <name> = <expression>."\n+                        "line, in the format <name> = <expression>.",\n                     )\n-                    self.errors[\'parameterExpressions\'] = message\n+                    self.errors["parameterExpressions"] = message\n \n-            themeBase = form.get(\'themeBase\', None)\n-            markSpecialLinks = form.get(\'markSpecialLinks\', None)\n-            extLinksOpenInNewWindow = form.get(\'extLinksOpenInNewWindow\', None)\n+            themeBase = form.get("themeBase", None)\n+            markSpecialLinks = form.get("markSpecialLinks", None)\n+            extLinksOpenInNewWindow = form.get("extLinksOpenInNewWindow", None)\n \n-            custom_css = form.get(\'custom_css\', b\'\')\n+            custom_css = form.get("custom_css", b"")\n \n             if not self.errors:\n                 # Trigger onDisabled() on plugins if theme was active\n@@ -218,18 +209,16 @@ def update(self):\n                 self._setup()\n                 return True\n             else:\n-                IStatusMessage(self.request).add(\n-                    _("There were errors"), \'error\'\n-                )\n-                self.redirectToFieldset(\'advanced\')\n+                IStatusMessage(self.request).add(_("There were errors"), "error")\n+                self.redirectToFieldset("advanced")\n                 return False\n \n-        if \'form.button.Import\' in form:\n+        if "form.button.Import" in form:\n             self.authorize()\n \n-            enableNewTheme = form.get(\'enableNewTheme\', False)\n-            replaceExisting = form.get(\'replaceExisting\', False)\n-            themeArchive = form.get(\'themeArchive\', None)\n+            enableNewTheme = form.get("enableNewTheme", False)\n+            replaceExisting = form.get("replaceExisting", False)\n+            themeArchive = form.get("themeArchive", None)\n \n             themeZip = None\n             performImport = False\n@@ -238,34 +227,31 @@ def update(self):\n                 themeZip = zipfile.ZipFile(themeArchive)\n             except (zipfile.BadZipfile, zipfile.LargeZipFile):\n                 logger.exception("Could not read zip file")\n-                self.errors[\'themeArchive\'] = _(\n-                    \'error_invalid_zip\',\n-                    default="The uploaded file is not a valid Zip archive"\n+                self.errors["themeArchive"] = _(\n+                    "error_invalid_zip",\n+                    default="The uploaded file is not a valid Zip archive",\n                 )\n \n             if themeZip:\n-\n                 try:\n                     themeData = extractThemeInfo(themeZip, checkRules=False)\n                 except (ValueError, KeyError) as e:\n                     logger.warn(str(e))\n-                    self.errors[\'themeArchive\'] = _(\n-                        \'error_no_rules_file\',\n-                        "The uploaded file does not contain a valid theme "\n-                        "archive."\n+                    self.errors["themeArchive"] = _(\n+                        "error_no_rules_file",\n+                        "The uploaded file does not contain a valid theme " "archive.",\n                     )\n                 else:\n-\n                     themeContainer = getOrCreatePersistentResourceDirectory()\n                     themeExists = themeData.__name__ in themeContainer\n \n                     if themeExists:\n                         if not replaceExisting:\n-                            self.errors[\'themeArchive\'] = _(\n-                                \'error_already_installed\',\n+                            self.errors["themeArchive"] = _(\n+                                "error_already_installed",\n                                 "This theme is already installed. Select "\n                                 "\'Replace existing theme\' and re-upload to "\n-                                "replace it."\n+                                "replace it.",\n                             )\n                         else:\n                             del themeContainer[themeData.__name__]\n@@ -277,8 +263,7 @@ def update(self):\n                 themeContainer.importZip(themeZip)\n \n                 themeDirectory = queryResourceDirectory(\n-                    THEME_RESOURCE_NAME,\n-                    themeData.__name__\n+                    THEME_RESOURCE_NAME, themeData.__name__\n                 )\n                 if themeDirectory is not None:\n                     # If we don\'t have a rules file, use the template\n@@ -288,12 +273,11 @@ def update(self):\n                         RULE_FILENAME,\n                     ) and not themeDirectory.isFile(RULE_FILENAME):\n                         templateThemeDirectory = queryResourceDirectory(\n-                            THEME_RESOURCE_NAME,\n-                            TEMPLATE_THEME\n+                            THEME_RESOURCE_NAME, TEMPLATE_THEME\n                         )\n                         themeDirectory.writeFile(\n                             RULE_FILENAME,\n-                            templateThemeDirectory.readFile(RULE_FILENAME)\n+                            templateThemeDirectory.readFile(RULE_FILENAME),\n                         )\n \n                         if not themeDirectory.isFile(DEFAULT_THEME_FILENAME):\n@@ -304,7 +288,7 @@ def update(self):\n                                     "found. Update rules.xml to reference "\n                                     "the current theme file."\n                                 ),\n-                                \'warning\',\n+                                "warning",\n                             )\n \n                     plugins = getPlugins()\n@@ -312,9 +296,7 @@ def update(self):\n                     if pluginSettings is not None:\n                         for name, plugin in plugins:\n                             plugin.onCreated(\n-                                themeData.__name__,\n-                                pluginSettings[name],\n-                                pluginSettings\n+                                themeData.__name__, pluginSettings[name], pluginSettings\n                             )\n \n                 if enableNewTheme:\n@@ -329,24 +311,21 @@ def update(self):\n                 )\n                 return False\n             else:\n-                IStatusMessage(self.request).add(\n-                    _("There were errors"),\n-                    "error"\n-                )\n+                IStatusMessage(self.request).add(_("There were errors"), "error")\n \n-                self.renderOverlay(\'upload\')\n+                self.renderOverlay("upload")\n                 return True\n \n-        if \'form.button.DeleteSelected\' in form:\n+        if "form.button.DeleteSelected" in form:\n             self.authorize()\n \n-            toDelete = form.get(\'themes\', [])\n+            toDelete = form.get("themes", [])\n             themeDirectory = getOrCreatePersistentResourceDirectory()\n \n             for theme in toDelete:\n                 del themeDirectory[theme]\n \n-            IStatusMessage(self.request).add(_("Theme deleted"), \'info\')\n+            IStatusMessage(self.request).add(_("Theme deleted"), "info")\n \n             self._setup()\n             return True\n@@ -390,14 +369,23 @@ def themeList(self):\n             override = False\n \n             # Is there more than one theme with the same name?\n-            if len([x for x in self.availableThemes if x.__name__ == theme.__name__]) > 1:\n+            if (\n+                len([x for x in self.availableThemes if x.__name__ == theme.__name__])\n+                > 1\n+            ):\n                 # Then we make sure we\'re using the TTW version, not the filesystem version.\n                 try:\n-                    theme = list(filter(lambda x: x.__name__ == theme.__name__, self.zodbThemes))[0]\n+                    theme = list(\n+                        filter(lambda x: x.__name__ == theme.__name__, self.zodbThemes)\n+                    )[0]\n                     override = True\n                 # Or when TTW is not available, the first available filesystem version.\n                 except IndexError:\n-                    theme = list(filter(lambda x: x.__name__ == theme.__name__, self.availableThemes))[0]\n+                    theme = list(\n+                        filter(\n+                            lambda x: x.__name__ == theme.__name__, self.availableThemes\n+                        )\n+                    )[0]\n \n             previewUrl = "++resource++plone.app.theming/defaultPreview.png"\n             if theme.preview:\n@@ -407,13 +395,13 @@ def themeList(self):\n                 )\n \n             theme_data = {\n-                \'name\': theme.__name__,\n-                \'title\': theme.title,\n-                \'description\': theme.description,\n-                \'override\': override,\n-                \'editable\': theme.__name__ in zodbNames,\n-                \'preview\': f"{self.site_url}/{previewUrl}",\n-                \'selected\': theme.__name__ == self.selectedTheme,\n+                "name": theme.__name__,\n+                "title": theme.title,\n+                "description": theme.description,\n+                "override": override,\n+                "editable": theme.__name__ in zodbNames,\n+                "preview": f"{self.site_url}/{previewUrl}",\n+                "selected": theme.__name__ == self.selectedTheme,\n             }\n             if theme.__name__ == self.selectedTheme:\n                 active_theme = theme_data\n@@ -422,20 +410,14 @@ def themeList(self):\n \n             complete.append(theme.__name__)\n \n-        themes.sort(key=lambda x: x[\'title\'])\n+        themes.sort(key=lambda x: x["title"])\n         if active_theme:\n             themes.insert(0, active_theme)\n \n         return themes\n \n     def redirectToFieldset(self, fieldset):\n-        self.redirect(\n-            "{}/{}#fieldsetlegend-{}".format(\n-                self.site_url,\n-                self.__name__,\n-                fieldset\n-            )\n-        )\n+        self.redirect(f"{self.site_url}/{self.__name__}#fieldsetlegend-{fieldset}")\n \n     def renderOverlay(self, overlay):\n         self.overlay = overlay\ndiff --git a/src/plone/app/theming/browser/custom_css.py b/src/plone/app/theming/browser/custom_css.py\nindex 1e99dc1b..135da816 100644\n--- a/src/plone/app/theming/browser/custom_css.py\n+++ b/src/plone/app/theming/browser/custom_css.py\n@@ -7,6 +7,7 @@\n import time\n import wsgiref\n \n+\n class CustomCSSView(BrowserView):\n     """\n     Renders custom CSS stored in registry\n@@ -16,8 +17,8 @@ def __call__(self):\n         registry = getUtility(IRegistry)\n         theme_settings = registry.forInterface(IThemeSettings, False)\n         self.request.response.setHeader(\n-            \'Content-Type\',\n-            \'text/css; charset=utf-8\',\n+            "Content-Type",\n+            "text/css; charset=utf-8",\n         )\n         dt = theme_settings.custom_css_timestamp\n         # If the datetime object is timezone-naive, it is assumed to be local time.\n@@ -25,7 +26,7 @@ def __call__(self):\n             dt = dt.astimezone(dateutil.tz.tzlocal())\n         # Format a Python datetime object as an RFC1123 date.\n         self.request.response.setHeader(\n-            \'Last-Modified\',\n+            "Last-Modified",\n             wsgiref.handlers.format_date_time(time.mktime(dt.timetuple())),\n         )\n         return theme_settings.custom_css\ndiff --git a/src/plone/app/theming/browser/help.py b/src/plone/app/theming/browser/help.py\nindex 7536c8ba..992f35e8 100644\n--- a/src/plone/app/theming/browser/help.py\n+++ b/src/plone/app/theming/browser/help.py\n@@ -5,15 +5,10 @@\n \n \n class Help(BrowserView):\n-\n     def __call__(self):\n         rstSource = pkg_resources.resource_string(\n-            \'plone.app.theming.browser\',\n-            \'resources/userguide.rst\'\n-        )\n-        parts = docutils.core.publish_parts(\n-            source=rstSource,\n-            writer_name=\'html\'\n+            "plone.app.theming.browser", "resources/userguide.rst"\n         )\n-        html = parts[\'body_pre_docinfo\'] + parts[\'fragment\']\n+        parts = docutils.core.publish_parts(source=rstSource, writer_name="html")\n+        html = parts["body_pre_docinfo"] + parts["fragment"]\n         return f"""<div class="content">{html:s}</div>"""\ndiff --git a/src/plone/app/theming/browser/resources/userguide.rst b/src/plone/app/theming/browser/resources/userguide.rst\nindex fe2a9119..7ba38767 100644\n--- a/src/plone/app/theming/browser/resources/userguide.rst\n+++ b/src/plone/app/theming/browser/resources/userguide.rst\n@@ -281,7 +281,7 @@ Advanced settings\n The *Theming* control panel also contains a tab named *Advanced settings*. Here\n be dragons.\n \n-The *Advanced setings* tab is divided into two areas. The first, *Theme\n+The *Advanced settings* tab is divided into two areas. The first, *Theme\n details*, contains the underlying settings that are modified when a theme is\n applied from the *Themes* control panel. These are:\n \ndiff --git a/src/plone/app/theming/browser/theme-error.pt b/src/plone/app/theming/browser/theme-error.pt\nindex 45d06199..2121811b 100644\n--- a/src/plone/app/theming/browser/theme-error.pt\n+++ b/src/plone/app/theming/browser/theme-error.pt\n@@ -1,16 +1,18 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+<html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-    lang="en"\n-    i18n:domain="plone">\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      lang="en"\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n \n-    <head>\n-    </head>\n-    <body>\n-        <h1 i18n:translate="">Invalid rules</h1>\n-        <p i18n:translate="">An error occurred trying to parse the rules file:</p>\n-        <pre tal:content="options/error"></pre>\n-    </body>\n+  <head>\n+  </head>\n+  <body>\n+    <h1 i18n:translate="">Invalid rules</h1>\n+    <p i18n:translate="">An error occurred trying to parse the rules file:</p>\n+    <pre tal:content="options/error"></pre>\n+  </body>\n \n </html>\ndiff --git a/src/plone/app/theming/browser/themefile.py b/src/plone/app/theming/browser/themefile.py\nindex ac1f6a62..41c1218c 100644\n--- a/src/plone/app/theming/browser/themefile.py\n+++ b/src/plone/app/theming/browser/themefile.py\n@@ -13,16 +13,16 @@ def __call__(self):\n         filedata = self.request.form.get("file", None)\n \n         if filedata is None:\n-            return json.dumps({\'failure\':\'error\'})\n-        \n+            return json.dumps({"failure": "error"})\n+\n         directory = PersistentResourceDirectory(self.context)\n-        name = filedata.filename.encode(\'utf-8\')\n+        name = filedata.filename.encode("utf-8")\n         data = filedata.read()\n \n         try:\n             directory.writeFile(name, data)\n-            self.request.response.setHeader(\'Content-Type\', \'application/json\')\n-        except:\n-            return json.dumps({\'failure\':\'error\'})\n+            self.request.response.setHeader("Content-Type", "application/json")\n+        except Exception:\n+            return json.dumps({"failure": "error"})\n \n-        return json.dumps({\'success\':\'create\'})\n+        return json.dumps({"success": "create"})\ndiff --git a/src/plone/app/theming/configure.zcml b/src/plone/app/theming/configure.zcml\nindex c3f46bca..c63301d4 100644\n--- a/src/plone/app/theming/configure.zcml\n+++ b/src/plone/app/theming/configure.zcml\n@@ -1,90 +1,95 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:gs="http://namespaces.zope.org/genericsetup"\n-    xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:i18n="http://namespaces.zope.org/i18n"\n     xmlns:plone="http://namespaces.plone.org/plone"\n-    i18n_domain="plone">\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    i18n_domain="plone"\n+    >\n \n-    <include package="plone.resource" />\n-    <include package="plone.staticresources" />\n-    <include package="plone.resourceeditor" />\n-    <include package="plone.transformchain" />\n-    <include package="plone.app.registry" />\n-    <include package="diazo" file="diazo-debug.zcml" />\n+  <include package="plone.resource" />\n+  <include package="plone.staticresources" />\n+  <include package="plone.resourceeditor" />\n+  <include package="plone.transformchain" />\n+  <include package="plone.app.registry" />\n+  <include\n+      package="diazo"\n+      file="diazo-debug.zcml"\n+      />\n \n-    <include package=".browser" />\n-    <include package=".exportimport" />\n-    <include package=".plugins" />\n+  <include package=".browser" />\n+  <include package=".exportimport" />\n+  <include package=".plugins" />\n \n-    <gs:registerProfile\n-        name="default"\n-        title="Diazo theme support"\n-        description="Installs a control panel to allow on-the-fly theming with Diazo"\n-        directory="profiles/default"\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        />\n+  <gs:registerProfile\n+      name="default"\n+      title="Diazo theme support"\n+      description="Installs a control panel to allow on-the-fly theming with Diazo"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      for="plone.base.interfaces.IPloneSiteRoot"\n+      directory="profiles/default"\n+      />\n \n-    <gs:upgradeStep\n-        title="Combine Theming control panels"\n-        source="1000"\n-        destination="1001"\n-        handler=".upgrade.update_controlpanel"\n-        sortkey="2"\n-        profile="plone.app.theming:default"\n-        />\n+  <gs:upgradeStep\n+      title="Combine Theming control panels"\n+      profile="plone.app.theming:default"\n+      source="1000"\n+      destination="1001"\n+      handler=".upgrade.update_controlpanel"\n+      sortkey="2"\n+      />\n \n-    <gs:upgradeStep\n-        title="Update registry"\n-        source="1001"\n-        destination="1002"\n-        handler=".upgrade.update_registry"\n-        profile="plone.app.theming:default"\n-        />\n+  <gs:upgradeStep\n+      title="Update registry"\n+      profile="plone.app.theming:default"\n+      source="1001"\n+      destination="1002"\n+      handler=".upgrade.update_registry"\n+      />\n \n-    <!-- Transform order 8850 - apply theme transform -->\n-    <adapter\n-        name="plone.app.theming.transform"\n-        factory=".transform.ThemeTransform"\n-        />\n+  <!-- Transform order 8850 - apply theme transform -->\n+  <adapter\n+      factory=".transform.ThemeTransform"\n+      name="plone.app.theming.transform"\n+      />\n \n-    <subscriber\n-        for=".interfaces.IThemeSettings\n-              plone.registry.interfaces.IRecordModifiedEvent"\n-        handler=".policy.invalidateCache"\n-        />\n+  <subscriber\n+      for=".interfaces.IThemeSettings\n+           plone.registry.interfaces.IRecordModifiedEvent"\n+      handler=".policy.invalidateCache"\n+      />\n \n-    <!-- policy adapter\n+  <!-- policy adapter\n          You can plug in a custom adapter by registering it for your own layer\n          eg for="your.product.interfaces.IThemeSwitcher".  -->\n-    <adapter\n-        factory=".policy.ThemingPolicy"\n-        for="zope.publisher.interfaces.IRequest"\n-        />\n-    <!-- fallback default policy adapter\n+  <adapter\n+      factory=".policy.ThemingPolicy"\n+      for="zope.publisher.interfaces.IRequest"\n+      />\n+  <!-- fallback default policy adapter\n          Do not override this, it is used by applyTheme -->\n-    <adapter\n-        factory=".policy.ThemingPolicy"\n-        for="plone.app.theming.interfaces.INoRequest"\n-        />\n+  <adapter\n+      factory=".policy.ThemingPolicy"\n+      for="plone.app.theming.interfaces.INoRequest"\n+      />\n \n-    <!-- Set X-Theme-Enabled header in the request if theming is enabled -->\n-    <subscriber\n-        for="Products.CMFCore.interfaces.ISiteRoot\n-             zope.traversing.interfaces.IBeforeTraverseEvent"\n-        handler=".header.setHeader"\n-        />\n+  <!-- Set X-Theme-Enabled header in the request if theming is enabled -->\n+  <subscriber\n+      for="Products.CMFCore.interfaces.ISiteRoot\n+           zope.traversing.interfaces.IBeforeTraverseEvent"\n+      handler=".header.setHeader"\n+      />\n \n-    <!-- Resource traverser -->\n-    <adapter\n-        name="theme"\n-        for="* zope.publisher.interfaces.IRequest"\n-        provides="zope.traversing.interfaces.ITraversable"\n-        factory=".traversal.ThemeTraverser"\n-        />\n+  <!-- Resource traverser -->\n+  <adapter\n+      factory=".traversal.ThemeTraverser"\n+      provides="zope.traversing.interfaces.ITraversable"\n+      for="*\n+           zope.publisher.interfaces.IRequest"\n+      name="theme"\n+      />\n \n-    <!-- Themes -->\n-    <include file="themes.zcml" />\n+  <!-- Themes -->\n+  <include file="themes.zcml" />\n \n </configure>\ndiff --git a/src/plone/app/theming/events.py b/src/plone/app/theming/events.py\nindex 27d09b42..b28041f1 100644\n--- a/src/plone/app/theming/events.py\n+++ b/src/plone/app/theming/events.py\n@@ -4,6 +4,5 @@\n \n @implementer(IThemeAppliedEvent)\n class ThemeAppliedEvent:\n-\n     def __init__(self, theme):\n         self.theme = theme\ndiff --git a/src/plone/app/theming/exportimport/configure.zcml b/src/plone/app/theming/exportimport/configure.zcml\nindex 25a87702..3deff48d 100644\n--- a/src/plone/app/theming/exportimport/configure.zcml\n+++ b/src/plone/app/theming/exportimport/configure.zcml\n@@ -1,14 +1,16 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:gs="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone.app.theming">\n+    i18n_domain="plone.app.theming"\n+    >\n \n-    <gs:importStep\n-        name="plone.app.theming"\n-        title="Apply Diazo theme"\n-        description="Applies a theme configured in a theme.xml file"\n-        handler=".handler.importTheme">\n-            <gs:depends name="toolset" />\n-    </gs:importStep>\n+  <gs:importStep\n+      name="plone.app.theming"\n+      title="Apply Diazo theme"\n+      description="Applies a theme configured in a theme.xml file"\n+      handler=".handler.importTheme"\n+      >\n+    <gs:depends name="toolset" />\n+  </gs:importStep>\n \n </configure>\ndiff --git a/src/plone/app/theming/exportimport/handler.py b/src/plone/app/theming/exportimport/handler.py\nindex 834d0c50..726c4469 100644\n--- a/src/plone/app/theming/exportimport/handler.py\n+++ b/src/plone/app/theming/exportimport/handler.py\n@@ -11,11 +11,11 @@ def importTheme(context):\n     and enable the theme.\n     """\n \n-    data = context.readDataFile(\'theme.xml\')\n+    data = context.readDataFile("theme.xml")\n     if not data:\n         return\n \n-    logger = context.getLogger(\'plone.app.theming.exportimport\')\n+    logger = context.getLogger("plone.app.theming.exportimport")\n \n     tree = etree.fromstring(data)\n \n@@ -35,7 +35,7 @@ def importTheme(context):\n             raise ValueError(f"Theme {themeName:s} is not available")\n \n         applyTheme(themeInfo)\n-        logger.info(f\'Theme {themeName:s} applied\')\n+        logger.info(f"Theme {themeName:s} applied")\n \n     # enable/disable theme\n     themeEnabled = tree.find("enabled")\n@@ -45,13 +45,25 @@ def importTheme(context):\n     settings = getUtility(IRegistry).forInterface(IThemeSettings, False)\n \n     themeEnabled = themeEnabled.text.strip().lower()\n-    if themeEnabled in ("y", "yes", "true", "t", "1", "on",):\n+    if themeEnabled in (\n+        "y",\n+        "yes",\n+        "true",\n+        "t",\n+        "1",\n+        "on",\n+    ):\n         settings.enabled = True\n-        logger.info(\'Theme enabled\')\n-    elif themeEnabled in ("n", "no", "false", "f", "0", "off",):\n+        logger.info("Theme enabled")\n+    elif themeEnabled in (\n+        "n",\n+        "no",\n+        "false",\n+        "f",\n+        "0",\n+        "off",\n+    ):\n         settings.enabled = False\n-        logger.info(\'Theme disabled\')\n+        logger.info("Theme disabled")\n     else:\n-        raise ValueError(\n-            f"{themeEnabled:s} is not a valid value for <enabled />"\n-        )\n+        raise ValueError(f"{themeEnabled:s} is not a valid value for <enabled />")\ndiff --git a/src/plone/app/theming/header.py b/src/plone/app/theming/header.py\nindex edd4fd9e..54e3bf25 100644\n--- a/src/plone/app/theming/header.py\n+++ b/src/plone/app/theming/header.py\n@@ -11,4 +11,4 @@ def setHeader(object, event):\n     request = event.request\n \n     if isThemeEnabled(request):\n-        request.environ[\'HTTP_X_THEME_ENABLED\'] = True\n+        request.environ["HTTP_X_THEME_ENABLED"] = True\ndiff --git a/src/plone/app/theming/interfaces.py b/src/plone/app/theming/interfaces.py\nindex 7a95ac2b..5611ddbc 100644\n--- a/src/plone/app/theming/interfaces.py\n+++ b/src/plone/app/theming/interfaces.py\n@@ -8,30 +8,41 @@\n \n _ = MessageFactory("plone")\n \n-THEME_RESOURCE_NAME = \'theme\'\n-RULE_FILENAME = \'rules.xml\'\n-DEFAULT_THEME_FILENAME = \'index.html\'\n-TEMPLATE_THEME = \'template\'\n+THEME_RESOURCE_NAME = "theme"\n+RULE_FILENAME = "rules.xml"\n+DEFAULT_THEME_FILENAME = "index.html"\n+TEMPLATE_THEME = "template"\n \n MANIFEST_FORMAT = ManifestFormat(\n     THEME_RESOURCE_NAME,\n-    keys=[\'title\', \'description\', \'rules\', \'prefix\', \'doctype\', \'preview\',\n-          \'enabled-bundles\', \'disabled-bundles\',\n-          \'development-css\', \'production-css\',\n-          \'tinymce-content-css\', \'tinymce-styles-css\',\n-          \'development-js\', \'production-js\'],\n-    parameterSections=[\'parameters\'],\n+    keys=[\n+        "title",\n+        "description",\n+        "rules",\n+        "prefix",\n+        "doctype",\n+        "preview",\n+        "enabled-bundles",\n+        "disabled-bundles",\n+        "development-css",\n+        "production-css",\n+        "tinymce-content-css",\n+        "tinymce-styles-css",\n+        "development-js",\n+        "production-js",\n+    ],\n+    parameterSections=["parameters"],\n )\n \n-THEME_EXTENSIONS = frozenset([\'html\', \'htm\'])\n+THEME_EXTENSIONS = frozenset(["html", "htm"])\n+\n \n def get_default_custom_css_timestamp():\n     return datetime.now()\n \n \n class ITheme(Interface):\n-    """A theme, loaded from a resource directory\n-    """\n+    """A theme, loaded from a resource directory"""\n \n     __name__ = schema.TextLine(\n         title=_("Name"),\n@@ -76,69 +87,65 @@ class ITheme(Interface):\n \n \n class IThemeSettings(Interface):\n-    """Transformation settings\n-    """\n+    """Transformation settings"""\n \n     enabled = schema.Bool(\n-        title=_(\'enabled\', "Enabled"),\n+        title=_("enabled", "Enabled"),\n         description=_(\n-            \'enable_theme_globally\',\n+            "enable_theme_globally",\n             "Use this option to enable or disable the theme globally. "\n             "Note that the options will also affect whether the theme "\n-            "is used when this option is enabled."\n+            "is used when this option is enabled.",\n         ),\n         required=True,\n         default=False,\n     )\n \n     currentTheme = schema.TextLine(\n-        title=_(\'current_theme\', "Current theme"),\n+        title=_("current_theme", "Current theme"),\n         description=_(\n-            \'current_theme_description\',\n-            "The name of the current theme, i.e. the one applied most "\n-            "recently."),\n+            "current_theme_description",\n+            "The name of the current theme, i.e. the one applied most " "recently.",\n+        ),\n         required=True,\n     )\n \n     rules = schema.TextLine(\n-        title=_(\'rules_file\', "Rules file"),\n-        description=_(\n-            \'rules_file_path\',\n-            "File path to the rules file"\n-        ),\n+        title=_("rules_file", "Rules file"),\n+        description=_("rules_file_path", "File path to the rules file"),\n         required=False,\n     )\n \n     absolutePrefix = schema.TextLine(\n-        title=_(\'absolute_url_prefix\', "Absolute URL prefix"),\n+        title=_("absolute_url_prefix", "Absolute URL prefix"),\n         description=_(\n-            \'convert_relative_url\',\n+            "convert_relative_url",\n             "Convert relative URLs in the theme file to absolute paths "\n-            "using this prefix."\n+            "using this prefix.",\n         ),\n         required=False,\n     )\n \n     readNetwork = schema.Bool(\n-        title=_(\'readNetwork\', "Read network"),\n+        title=_("readNetwork", "Read network"),\n         description=_(\n-            \'network_urls_allowed\',\n+            "network_urls_allowed",\n             "If enabled, network (http, https) urls are allowed in "\n-            "the rules file and this config."\n+            "the rules file and this config.",\n         ),\n         required=True,\n         default=False,\n     )\n \n     hostnameBlacklist = schema.List(\n-        title=_(\'hostname_blacklist\', "Unthemed host names"),\n+        title=_("hostname_blacklist", "Unthemed host names"),\n         description=_(\n-            \'hostname_blacklist_description\',\n+            "hostname_blacklist_description",\n             "If there are hostnames that you do not want to be themed, you "\n             "can list them here. This is useful during theme development, "\n             "so that you can compare the themed and unthemed sites. In some "\n             "cases, you may also want to provided an unthemed host alias for "\n-            "content administrators to be able to use \'plain\' Plone."\n+            "content administrators to be able to use \'plain\' Plone.",\n         ),\n         value_type=schema.TextLine(),\n         required=False,\n@@ -146,15 +153,15 @@ class IThemeSettings(Interface):\n     )\n \n     parameterExpressions = schema.Dict(\n-        title=_(\'parameter_expressions\', "Parameter expressions"),\n+        title=_("parameter_expressions", "Parameter expressions"),\n         description=_(\n-            \'parameter_expressions_description\',\n+            "parameter_expressions_description",\n             "You can define parameters here, which will be passed to the "\n             "compiled theme. In your rules file, you can refer to a "\n             "parameter by $name. Parameters are defined using TALES "\n             "expressions, which should evaluate to a string, a number, a "\n             "boolean or None. Available variables are `context`, `request`, "\n-            "`portal`, `portal_state`,  and `context_state`."\n+            "`portal`, `portal_state`,  and `context_state`.",\n         ),\n         key_type=schema.ASCIILine(),\n         value_type=schema.ASCIILine(),\n@@ -163,12 +170,12 @@ class IThemeSettings(Interface):\n     )\n \n     doctype = schema.ASCIILine(\n-        title=_(\'doctype\', "Doctype"),\n+        title=_("doctype", "Doctype"),\n         description=_(\n-            \'doctype_description\',\n-            \'You can specify a Doctype string which will be set on the \'\n+            "doctype_description",\n+            "You can specify a Doctype string which will be set on the "\n             \'for example "<!DOCTYPE html>". If left blank the default XHTML \'\n-            \'1.0 transitional Doctype or that set in the Diazo theme is used.\'\n+            "1.0 transitional Doctype or that set in the Diazo theme is used.",\n         ),\n         required=False,\n         default="",\n@@ -176,18 +183,18 @@ class IThemeSettings(Interface):\n \n     custom_css = schema.SourceText(\n         title=_(\n-            \'label_custom_css\',\n-            \'Custom CSS\',\n+            "label_custom_css",\n+            "Custom CSS",\n         ),\n         description=_(\n-            \'help_custom_css\',\n-            \'Define your own custom CSS in the field below. This is a good \'\n-            \'place for quick customizations of things like colors and the \'\n-            \'toolbar. Definitions here will override previously defined CSS \'\n-            \'of Plone. Please use this only for small customizations, as it \'\n-            \'is hard to keep track of changes here. For bigger changes you most \'\n-            \'likely want to customize a full theme and make your changes \'\n-            \'there.\',\n+            "help_custom_css",\n+            "Define your own custom CSS in the field below. This is a good "\n+            "place for quick customizations of things like colors and the "\n+            "toolbar. Definitions here will override previously defined CSS "\n+            "of Plone. Please use this only for small customizations, as it "\n+            "is hard to keep track of changes here. For bigger changes you most "\n+            "likely want to customize a full theme and make your changes "\n+            "there.",\n         ),\n         default="",\n         required=False,\n@@ -195,11 +202,11 @@ class IThemeSettings(Interface):\n \n     custom_css_timestamp = schema.Datetime(\n         title=_(\n-            \'Custom CSS Timestamp\',\n+            "Custom CSS Timestamp",\n         ),\n         description=_(\n-            \'Time stamp when the custom CSS was changed. \'\n-            \'Used to generate custom.css with timestamp in URL.\',\n+            "Time stamp when the custom CSS was changed. "\n+            "Used to generate custom.css with timestamp in URL.",\n         ),\n         defaultFactory=get_default_custom_css_timestamp,\n         required=False,\n@@ -207,8 +214,7 @@ class IThemeSettings(Interface):\n \n \n class IThemingLayer(Interface):\n-    """Browser layer used to indicate that plone.app.theming is installed\n-    """\n+    """Browser layer used to indicate that plone.app.theming is installed"""\n \n \n class IThemePlugin(Interface):\n@@ -260,12 +266,11 @@ def onDisabled(theme, settings, dependenciesSettings):\n         """\n \n     def onRequest(request, theme, settings, dependenciesSettings):\n-        """Called upon traversal into the site when a theme is enabled\n-        """\n+        """Called upon traversal into the site when a theme is enabled"""\n \n \n class IThemeAppliedEvent(Interface):\n-    theme = Attribute(\'theme that is getting applied\')\n+    theme = Attribute("theme that is getting applied")\n \n \n class INoRequest(Interface):\n@@ -294,8 +299,7 @@ def getCacheKey(theme=None):\n         """Managing the cache is a policy decision."""\n \n     def invalidateCache():\n-        """When our settings are changed, invalidate the cache on all zeo clients.\n-        """\n+        """When our settings are changed, invalidate the cache on all zeo clients."""\n \n     def get_theme():\n         """Returns the current theme object, cached."""\ndiff --git a/src/plone/app/theming/plugins/__init__.py b/src/plone/app/theming/plugins/__init__.py\nindex de40ea7c..5284146e 100644\n--- a/src/plone/app/theming/plugins/__init__.py\n+++ b/src/plone/app/theming/plugins/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/app/theming/plugins/configure.zcml b/src/plone/app/theming/plugins/configure.zcml\nindex e5ca530d..8c815265 100644\n--- a/src/plone/app/theming/plugins/configure.zcml\n+++ b/src/plone/app/theming/plugins/configure.zcml\n@@ -1,18 +1,19 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:i18n="http://namespaces.zope.org/i18n"\n-    i18n_domain="plone">\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    i18n_domain="plone"\n+    >\n \n-    <subscriber\n-        for="Products.CMFCore.interfaces.ISiteRoot\n-             zope.traversing.interfaces.IBeforeTraverseEvent"\n-        handler=".hooks.onRequest"\n-        />\n+  <subscriber\n+      for="Products.CMFCore.interfaces.ISiteRoot\n+           zope.traversing.interfaces.IBeforeTraverseEvent"\n+      handler=".hooks.onRequest"\n+      />\n \n-    <subscriber\n-        for="zope.processlifetime.DatabaseOpenedWithRoot"\n-        handler=".hooks.onStartup"\n-        />\n+  <subscriber\n+      for="zope.processlifetime.DatabaseOpenedWithRoot"\n+      handler=".hooks.onStartup"\n+      />\n \n </configure>\ndiff --git a/src/plone/app/theming/plugins/hooks.py b/src/plone/app/theming/plugins/hooks.py\nindex 46c81fc9..9300f059 100644\n--- a/src/plone/app/theming/plugins/hooks.py\n+++ b/src/plone/app/theming/plugins/hooks.py\n@@ -7,8 +7,7 @@\n \n \n def onStartup(event):\n-    """Call onDiscovery() on each plugin for each theme on startup\n-    """\n+    """Call onDiscovery() on each plugin for each theme on startup"""\n     plugins = getPlugins()\n \n     for themeDirectory in iterDirectoriesOfType(THEME_RESOURCE_NAME):\n@@ -16,15 +15,12 @@ def onStartup(event):\n \n         for name, plugin in plugins:\n             plugin.onDiscovery(\n-                themeDirectory.__name__,\n-                pluginSettings[name],\n-                pluginSettings\n+                themeDirectory.__name__, pluginSettings[name], pluginSettings\n             )\n \n \n def onRequest(object, event):\n-    """Call onRequest() on each plugin for the eanbled theme on each request\n-    """\n+    """Call onRequest() on each plugin for the eanbled theme on each request"""\n \n     request = event.request\n     policy = theming_policy(request)\ndiff --git a/src/plone/app/theming/plugins/utils.py b/src/plone/app/theming/plugins/utils.py\nindex d4ad1523..b032d362 100644\n--- a/src/plone/app/theming/plugins/utils.py\n+++ b/src/plone/app/theming/plugins/utils.py\n@@ -15,8 +15,7 @@ def pluginSettingsCacheKey(fun, themeDirectory, plugins=None):\n \n \n def sortDependencies(plugins):\n-    """Topological sort\n-    """\n+    """Topological sort"""\n     queue = []\n     waiting = {}  # (n,p) -> [remaining deps]\n \n@@ -39,19 +38,21 @@ def sortDependencies(plugins):\n                 del waiting[(nw, pw)]\n \n     if waiting:\n-        raise ValueError(\n-            f"Could not resolve dependencies for: {waiting:s}"\n-        )\n+        raise ValueError(f"Could not resolve dependencies for: {waiting:s}")\n \n \n @cache(pluginsCacheKey)\n def getPlugins():\n-    """Get all registered plugins topologically sorted\n-    """\n+    """Get all registered plugins topologically sorted"""\n     plugins = []\n \n     for name, plugin in getUtilitiesFor(IThemePlugin):\n-        plugins.append((name, plugin,))\n+        plugins.append(\n+            (\n+                name,\n+                plugin,\n+            )\n+        )\n \n     return list(sortDependencies(plugins))\n \n@@ -88,7 +89,6 @@ def getPluginSettings(themeDirectory, plugins=None):\n     pluginSettings = {}\n     for name, plugin in plugins:\n         pluginSettings[name] = manifestContents.get(\n-            f"{THEME_RESOURCE_NAME:s}:{name:s}",\n-            {}\n+            f"{THEME_RESOURCE_NAME:s}:{name:s}", {}\n         )\n     return pluginSettings\ndiff --git a/src/plone/app/theming/policy.py b/src/plone/app/theming/policy.py\nindex 89d7eedc..d837ff22 100644\n--- a/src/plone/app/theming/policy.py\n+++ b/src/plone/app/theming/policy.py\n@@ -24,7 +24,6 @@ def invalidateCache(settings, event):\n \n @implementer(IThemingPolicy)\n class ThemingPolicy:\n-\n     def __init__(self, request):\n         """Adapt IRequest.\n         Do not call this class directly, always use a\n@@ -73,13 +72,12 @@ def isThemeEnabled(self, settings=None):\n         debug_mode = getConfiguration().debug_mode\n \n         # Disable theming if the response sets a header\n-        if self.request.response.getHeader(\'X-Theme-Disabled\'):\n+        if self.request.response.getHeader("X-Theme-Disabled"):\n             return False\n \n         # Check for diazo.off request parameter\n-        true_vals = (\'1\', \'y\', \'yes\', \'t\', \'true\')\n-        if (debug_mode and self.request.get(\n-                \'diazo.off\', \'\').lower() in true_vals):\n+        true_vals = ("1", "y", "yes", "t", "true")\n+        if debug_mode and self.request.get("diazo.off", "").lower() in true_vals:\n             return False\n \n         if not settings:\n@@ -87,13 +85,13 @@ def isThemeEnabled(self, settings=None):\n         if settings is None or not settings.enabled:\n             return False\n \n-        server_url = self.request.get(\'SERVER_URL\')\n-        proto, host = server_url.split(\'://\', 1)\n+        server_url = self.request.get("SERVER_URL")\n+        proto, host = server_url.split("://", 1)\n         host = host.lower()\n-        serverPort = self.request.get(\'SERVER_PORT\')\n+        serverPort = self.request.get("SERVER_PORT")\n \n         for hostname in settings.hostnameBlacklist or ():\n-            if host == hostname or host == \':\'.join((hostname, serverPort)):\n+            if host == hostname or host == ":".join((hostname, serverPort)):\n                 return False\n \n         return True\n@@ -105,8 +103,9 @@ def getCache(self, theme=None):\n         cache = caches.get(key)\n         if cache is None:\n             logger.debug(\n-                \'initializing local cache on thread %s for %s\',\n-                threading.current_thread().ident, key\n+                "initializing local cache on thread %s for %s",\n+                threading.current_thread().ident,\n+                key,\n             )\n             cache = caches[key] = ThemeCache()\n         return cache\n@@ -118,20 +117,19 @@ def getCacheKey(self, theme=None):\n         return key\n \n     def getCacheStorage(self):\n-        if not hasattr(_local_cache, \'themedata\'):\n+        if not hasattr(_local_cache, "themedata"):\n             self._reset_local_cache()\n-        if self._get_shared_invalidation() > _local_cache.themedata[\'mtime\']:\n+        if self._get_shared_invalidation() > _local_cache.themedata["mtime"]:\n             logger.debug(\n-                \'shared invalidation requires local cache reset on %s\',\n-                threading.current_thread().ident\n+                "shared invalidation requires local cache reset on %s",\n+                threading.current_thread().ident,\n             )\n             self._reset_local_cache()\n         return _local_cache.themedata\n \n     def invalidateCache(self):\n-        """When our settings are changed, invalidate the cache on all zeo clients\n-        """\n-        logger.info(\'invalidating cache across all threads and processes\')\n+        """When our settings are changed, invalidate the cache on all zeo clients"""\n+        logger.info("invalidating cache across all threads and processes")\n         self._reset_local_cache()\n         self._set_shared_invalidation()\n \n@@ -140,23 +138,22 @@ def _reset_local_cache(self):\n         Invalidate only the local thread cache\n         Removes actual theme data, leaving only mtime\n         """\n-        _local_cache.themedata = {\'mtime\': time.time()}\n+        _local_cache.themedata = {"mtime": time.time()}\n         logger.debug(\n-            \'local cache invalidated on thread %s\',\n-            threading.current_thread().ident\n+            "local cache invalidated on thread %s", threading.current_thread().ident\n         )\n \n     def _set_shared_invalidation(self):\n         """Signal to other threads and processes they should invalidate their\n         theme caches."""\n         registry = queryUtility(IRegistry)\n-        setattr(registry, \'_theme_cache_mtime\', time.time())\n+        setattr(registry, "_theme_cache_mtime", time.time())\n         registry._p_changed = True\n-        logger.debug(\'shared cache invalidation marker updated\')\n+        logger.debug("shared cache invalidation marker updated")\n \n     def _get_shared_invalidation(self):\n         registry = queryUtility(IRegistry)\n-        return getattr(registry, \'_theme_cache_mtime\', 0)\n+        return getattr(registry, "_theme_cache_mtime", 0)\n \n     def get_theme(self):\n         """Managing the theme cache is a plone.app.theming policy\n@@ -176,8 +173,7 @@ def set_theme(self, themeName, themeObj):\n \n \n class ThemeCache:\n-    """Simple cache for the transform and theme\n-    """\n+    """Simple cache for the transform and theme"""\n \n     def __init__(self):\n         self.transform = None\ndiff --git a/src/plone/app/theming/profiles/default/browserlayer.xml b/src/plone/app/theming/profiles/default/browserlayer.xml\nindex 32cfcdf4..c3835719 100644\n--- a/src/plone/app/theming/profiles/default/browserlayer.xml\n+++ b/src/plone/app/theming/profiles/default/browserlayer.xml\n@@ -1,6 +1,6 @@\n+<?xml version="1.0" encoding="utf-8"?>\n <layers>\n-    <layer\n-        name="plone.app.theming"\n-        interface="plone.app.theming.interfaces.IThemingLayer"\n-        />\n+  <layer interface="plone.app.theming.interfaces.IThemingLayer"\n+         name="plone.app.theming"\n+  />\n </layers>\ndiff --git a/src/plone/app/theming/profiles/default/controlpanel.xml b/src/plone/app/theming/profiles/default/controlpanel.xml\nindex 4e7c09a3..5fa0dc86 100644\n--- a/src/plone/app/theming/profiles/default/controlpanel.xml\n+++ b/src/plone/app/theming/profiles/default/controlpanel.xml\n@@ -1,34 +1,34 @@\n-<?xml version="1.0"?>\n-<object\n-    name="portal_controlpanel"\n-    xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-    i18n:domain="plone"\n-    purge="False">\n+<?xml version="1.0" encoding="utf-8"?>\n+<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+        name="portal_controlpanel"\n+        purge="False"\n+        i18n:domain="plone"\n+>\n \n-    <configlet\n-        title="Theming"\n-        action_id="plone.app.theming"\n-        appId="plone.app.theming"\n-        category="plone-general"\n-        condition_expr=""\n-        url_expr="string:${portal_url}/@@theming-controlpanel"\n-        icon_expr="string:display"\n-        visible="True"\n-        i18n:attributes="title">\n-            <permission>Plone Site Setup: Themes</permission>\n-    </configlet>\n+  <configlet action_id="plone.app.theming"\n+             appId="plone.app.theming"\n+             category="plone-general"\n+             condition_expr=""\n+             icon_expr="string:display"\n+             title="Theming"\n+             url_expr="string:${portal_url}/@@theming-controlpanel"\n+             visible="True"\n+             i18n:attributes="title"\n+  >\n+    <permission>Plone Site Setup: Themes</permission>\n+  </configlet>\n \n-    <configlet\n-        title="Themes"\n-        action_id="PortalSkin"\n-        appId="PortalSkin"\n-        category="Plone"\n-        condition_expr=""\n-        icon_expr="string:$portal_url/skins_icon.png"\n-        url_expr="string:${portal_url}/@@skins-controlpanel"\n-        visible="False"\n-        i18n:attributes="title">\n-        <permission>Plone Site Setup: Themes</permission>\n-    </configlet>\n+  <configlet action_id="PortalSkin"\n+             appId="PortalSkin"\n+             category="Plone"\n+             condition_expr=""\n+             icon_expr="string:$portal_url/skins_icon.png"\n+             title="Themes"\n+             url_expr="string:${portal_url}/@@skins-controlpanel"\n+             visible="False"\n+             i18n:attributes="title"\n+  >\n+    <permission>Plone Site Setup: Themes</permission>\n+  </configlet>\n \n </object>\ndiff --git a/src/plone/app/theming/profiles/default/metadata.xml b/src/plone/app/theming/profiles/default/metadata.xml\nindex f2861267..09b65faa 100644\n--- a/src/plone/app/theming/profiles/default/metadata.xml\n+++ b/src/plone/app/theming/profiles/default/metadata.xml\n@@ -1,6 +1,7 @@\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n-    <version>1002</version>\n-    <dependencies>\n-        <dependency>profile-plone.app.registry:default</dependency>\n-    </dependencies>\n+  <version>1002</version>\n+  <dependencies>\n+    <dependency>profile-plone.app.registry:default</dependency>\n+  </dependencies>\n </metadata>\ndiff --git a/src/plone/app/theming/profiles/default/registry.xml b/src/plone/app/theming/profiles/default/registry.xml\nindex a9dd5cff..e9bfa265 100644\n--- a/src/plone/app/theming/profiles/default/registry.xml\n+++ b/src/plone/app/theming/profiles/default/registry.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <registry>\n-    <records interface="plone.app.theming.interfaces.IThemeSettings" />\n+  <records interface="plone.app.theming.interfaces.IThemeSettings" />\n </registry>\ndiff --git a/src/plone/app/theming/testing.py b/src/plone/app/theming/testing.py\nindex 9b230cff..7ab095c1 100644\n--- a/src/plone/app/theming/testing.py\n+++ b/src/plone/app/theming/testing.py\n@@ -12,27 +12,25 @@ class Theming(PloneSandboxLayer):\n     def setUpZope(self, app, configurationContext):\n         # load ZCML\n         import plone.app.theming.tests\n+\n         xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.app.theming.tests,\n-            context=configurationContext\n+            "configure.zcml", plone.app.theming.tests, context=configurationContext\n         )\n \n         # Run the startup hook\n         from plone.app.theming.plugins.hooks import onStartup\n+\n         onStartup(None)\n \n     def setUpPloneSite(self, portal):\n         # install into the Plone site\n-        applyProfile(portal, \'plone.app.theming:default\')\n+        applyProfile(portal, "plone.app.theming:default")\n \n \n THEMING_FIXTURE = Theming()\n THEMING_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(THEMING_FIXTURE,),\n-    name="Theming:Integration"\n+    bases=(THEMING_FIXTURE,), name="Theming:Integration"\n )\n THEMING_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(THEMING_FIXTURE,),\n-    name="Theming:Functional"\n+    bases=(THEMING_FIXTURE,), name="Theming:Functional"\n )\ndiff --git a/src/plone/app/theming/tests/another-theme/rules.xml b/src/plone/app/theming/tests/another-theme/rules.xml\nindex 78ae654f..749fb9e9 100644\n--- a/src/plone/app/theming/tests/another-theme/rules.xml\n+++ b/src/plone/app/theming/tests/another-theme/rules.xml\n@@ -1,7 +1,7 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules\n-    xmlns="http://namespaces.plone.org/diazo"\n-    xmlns:css="http://namespaces.plone.org/diazo/css"\n-    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+       xmlns:xsl="http://www.w3.org/1999/XSL/Transform"\n+>\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/configure.zcml b/src/plone/app/theming/tests/configure.zcml\nindex db95820a..54c940f3 100644\n--- a/src/plone/app/theming/tests/configure.zcml\n+++ b/src/plone/app/theming/tests/configure.zcml\n@@ -1,19 +1,31 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    xmlns:plone="http://namespaces.plone.org/plone">\n+    xmlns:plone="http://namespaces.plone.org/plone"\n+    >\n \n-    <include package="plone.app.theming"/>\n+  <include package="plone.app.theming" />\n \n-    <plone:static directory="resources" type="theme" />\n-    <plone:static directory="secondary-theme" name="secondary-theme" type="theme" />\n-    <plone:static directory="another-theme" name="another-theme" type="theme" />\n+  <plone:static\n+      directory="resources"\n+      type="theme"\n+      />\n+  <plone:static\n+      directory="secondary-theme"\n+      name="secondary-theme"\n+      type="theme"\n+      />\n+  <plone:static\n+      directory="another-theme"\n+      name="another-theme"\n+      type="theme"\n+      />\n \n-    <browser:page\n-        for="*"\n-        name="header-disabled"\n-        template="notheme.pt"\n-        permission="zope.Public"\n-        />\n+  <browser:page\n+      name="header-disabled"\n+      for="*"\n+      template="notheme.pt"\n+      permission="zope.Public"\n+      />\n \n-</configure>\n\\ No newline at end of file\n+</configure>\ndiff --git a/src/plone/app/theming/tests/french.html b/src/plone/app/theming/tests/french.html\nindex 4a9fe72e..a6e9e28f 100644\n--- a/src/plone/app/theming/tests/french.html\n+++ b/src/plone/app/theming/tests/french.html\n@@ -1,9 +1,9 @@\n <html>\n-<head>\n+  <head>\n     <!-- With a charset, the error in test_include_non_ascii does not happen. -->\n     <!-- <meta charset="utf-8"/> -->\n     <title>Title</title>\n-</head>\n-<body>\n-    <div id="content">Actualit\xc3\xa9s</div>\n-</body>\n+  </head>\n+  <body>\n+    <div id="content">Actualit&eacute;s</div>\n+  </body></html>\ndiff --git a/src/plone/app/theming/tests/includes.html b/src/plone/app/theming/tests/includes.html\nindex a18f3dd7..c9e6bfcc 100644\n--- a/src/plone/app/theming/tests/includes.html\n+++ b/src/plone/app/theming/tests/includes.html\n@@ -1,8 +1,8 @@\n <html>\n-<head>\n+  <head>\n     <title>Title</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n     <div id="alpha">(placeholder)</div>\n     <div id="beta">(placeholder)</div>\n-</body>\n+  </body></html>\ndiff --git a/src/plone/app/theming/tests/includes.xml b/src/plone/app/theming/tests/includes.xml\nindex ac740772..b9b90c64 100644\n--- a/src/plone/app/theming/tests/includes.xml\n+++ b/src/plone/app/theming/tests/includes.xml\n@@ -1,9 +1,17 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules xmlns="http://namespaces.plone.org/diazo" xmlns:css="http://namespaces.plone.org/diazo/css">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+>\n \n-    <theme href="python://plone.app.theming.tests/includes.html" />\n+  <theme href="python://plone.app.theming.tests/includes.html" />\n \n-    <replace content=\'//*[@id="content"]/text()\' css:theme-children=\'#alpha\' href="/alpha" />\n-    <replace content=\'//*[@id="content"]/text()\' css:theme-children=\'#beta\' href="./beta" />\n+  <replace content=\'//*[@id="content"]/text()\'\n+           css:theme-children="#alpha"\n+           href="/alpha"\n+  />\n+  <replace content=\'//*[@id="content"]/text()\'\n+           css:theme-children="#beta"\n+           href="./beta"\n+  />\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/localrules.xml b/src/plone/app/theming/tests/localrules.xml\nindex bb680154..1e9ca66b 100644\n--- a/src/plone/app/theming/tests/localrules.xml\n+++ b/src/plone/app/theming/tests/localrules.xml\n@@ -1,10 +1,18 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules xmlns="http://namespaces.plone.org/diazo" xmlns:css="http://namespaces.plone.org/diazo/css">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+>\n \n-    <theme href="/theme.html" />\n+  <theme href="/theme.html" />\n \n-    <replace content=\'/html/head/title\' theme=\'/html/head/title\' />\n-    <replace content=\'//h1[class=documentFirstHeading]\' theme=\'/html/body/h1\' />\n-    <after content=\'/html/head/link\' theme-children=\'/html/head\' />\n+  <replace content="/html/head/title"\n+           theme="/html/head/title"\n+  />\n+  <replace content="//h1[class=documentFirstHeading]"\n+           theme="/html/body/h1"\n+  />\n+  <after content="/html/head/link"\n+         theme-children="/html/head"\n+  />\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/nonascii.html b/src/plone/app/theming/tests/nonascii.html\nindex 7fd37713..c2d286ee 100644\n--- a/src/plone/app/theming/tests/nonascii.html\n+++ b/src/plone/app/theming/tests/nonascii.html\n@@ -1,7 +1,7 @@\n <html>\n-<head>\n+  <head>\n     <title>Title</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n     <div id="content">(placeholder)</div>\n-</body>\n+  </body></html>\ndiff --git a/src/plone/app/theming/tests/nonascii.xml b/src/plone/app/theming/tests/nonascii.xml\nindex b441d324..3d02144b 100644\n--- a/src/plone/app/theming/tests/nonascii.xml\n+++ b/src/plone/app/theming/tests/nonascii.xml\n@@ -1,8 +1,13 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules xmlns="http://namespaces.plone.org/diazo" xmlns:css="http://namespaces.plone.org/diazo/css">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+>\n \n-    <theme href="python://plone.app.theming.tests/french.html" />\n+  <theme href="python://plone.app.theming.tests/french.html" />\n \n-    <replace content=\'//*[@id="content"]/text()\' css:theme-children=\'#content\' href="/french" />\n+  <replace content=\'//*[@id="content"]/text()\'\n+           css:theme-children="#content"\n+           href="/french"\n+  />\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/notheme.pt b/src/plone/app/theming/tests/notheme.pt\nindex f85e554a..418b51cb 100644\n--- a/src/plone/app/theming/tests/notheme.pt\n+++ b/src/plone/app/theming/tests/notheme.pt\n@@ -1,6 +1,8 @@\n-<html tal:define="dummy python:request.response.setHeader(\'x-theme-disabled\', \'True\')">\n-<head><title>No theme</title></head>\n-<body>\n+<html tal:define="\n+        dummy python:request.response.setHeader(\'x-theme-disabled\', \'True\');\n+      ">\n+  <head><title>No theme</title></head>\n+  <body>\n     <h1>Theme disabled</h1>\n-</body>\n+  </body>\n </html>\ndiff --git a/src/plone/app/theming/tests/one.html b/src/plone/app/theming/tests/one.html\nindex efdc1e10..bfc8ea1a 100644\n--- a/src/plone/app/theming/tests/one.html\n+++ b/src/plone/app/theming/tests/one.html\n@@ -1,7 +1,7 @@\n <html>\n-<head>\n+  <head>\n     <title>Title</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n     <div id="content">Number one</div>\n-</body>\n+  </body></html>\ndiff --git a/src/plone/app/theming/tests/otherrules.xml b/src/plone/app/theming/tests/otherrules.xml\nindex e13ab58c..0ac448fb 100644\n--- a/src/plone/app/theming/tests/otherrules.xml\n+++ b/src/plone/app/theming/tests/otherrules.xml\n@@ -1,10 +1,18 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules xmlns="http://namespaces.plone.org/diazo" xmlns:css="http://namespaces.plone.org/diazo/css">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+>\n \n-    <theme href="othertheme.html" />\n+  <theme href="othertheme.html" />\n \n-    <replace content=\'/html/head/title\' theme=\'/html/head/title\' />\n-    <replace content=\'//h1[class=documentFirstHeading]\' theme=\'/html/body/h1\' />\n-    <after content=\'/html/head/link\' theme-children=\'/html/head\' />\n+  <replace content="/html/head/title"\n+           theme="/html/head/title"\n+  />\n+  <replace content="//h1[class=documentFirstHeading]"\n+           theme="/html/body/h1"\n+  />\n+  <after content="/html/head/link"\n+         theme-children="/html/head"\n+  />\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/othertheme.html b/src/plone/app/theming/tests/othertheme.html\nindex 24c9a41c..db7304e2 100644\n--- a/src/plone/app/theming/tests/othertheme.html\n+++ b/src/plone/app/theming/tests/othertheme.html\n@@ -1,9 +1,9 @@\n <html>\n-<head>\n+  <head>\n     <title>Title</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n     <h1 id="pageTitle">Page title</h1>\n     <p>This is the other theme.</p>\n-</body>\n-</html>\n\\ No newline at end of file\n+  </body>\n+</html>\ndiff --git a/src/plone/app/theming/tests/paramrules.xml b/src/plone/app/theming/tests/paramrules.xml\nindex d4cbfc55..211d7d3b 100644\n--- a/src/plone/app/theming/tests/paramrules.xml\n+++ b/src/plone/app/theming/tests/paramrules.xml\n@@ -1,27 +1,39 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules\n-    xmlns="http://namespaces.plone.org/diazo"\n-    xmlns:css="http://namespaces.plone.org/diazo/css"\n-    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+       xmlns:xsl="http://www.w3.org/1999/XSL/Transform"\n+>\n \n-    <theme href="python://plone.app.theming/tests/theme.html" />\n-    <theme href="python://plone.app.theming/tests/othertheme.html" if-path="news"/>\n+  <theme href="python://plone.app.theming/tests/theme.html" />\n+  <theme href="python://plone.app.theming/tests/othertheme.html"\n+         if-path="news"\n+  />\n \n-    <replace content=\'/html/head/title\' theme=\'/html/head/title\' />\n-    <replace content=\'//h1[class=documentFirstHeading]\' theme=\'/html/body/h1\' />\n-    <after content=\'/html/head/link\' theme-children=\'/html/head\' />\n+  <replace content="/html/head/title"\n+           theme="/html/head/title"\n+  />\n+  <replace content="//h1[class=documentFirstHeading]"\n+           theme="/html/body/h1"\n+  />\n+  <after content="/html/head/link"\n+         theme-children="/html/head"\n+  />\n \n-    <after theme-children="/html/head">\n-        <script><xsl:value-of select="$stringParam" /></script>\n-    </after>\n-    <after theme-children="/html/head" if="$boolParam">\n-        <script>bool param on</script>\n-    </after>\n-    <after theme-children="/html/head" if="$requestParam = \'on\'">\n-        <script>request param on</script>\n-    </after>\n-    <after theme-children="/html/head">\n-        <script id="contextParam"><xsl:value-of select="$contextParam" /></script>\n-    </after>\n+  <after theme-children="/html/head">\n+    <script><xsl:value-of select="$stringParam" /></script>\n+  </after>\n+  <after if="$boolParam"\n+         theme-children="/html/head"\n+  >\n+    <script>bool param on</script>\n+  </after>\n+  <after if="$requestParam = \'on\'"\n+         theme-children="/html/head"\n+  >\n+    <script>request param on</script>\n+  </after>\n+  <after theme-children="/html/head">\n+    <script id="contextParam"><xsl:value-of select="$contextParam" /></script>\n+  </after>\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/resources/css-js.xml b/src/plone/app/theming/tests/resources/css-js.xml\nindex d0227cfb..c5f44142 100644\n--- a/src/plone/app/theming/tests/resources/css-js.xml\n+++ b/src/plone/app/theming/tests/resources/css-js.xml\n@@ -1,9 +1,17 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules xmlns="http://namespaces.plone.org/diazo" xmlns:css="http://namespaces.plone.org/diazo/css">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+>\n \n-    <theme href="theme.html" />\n+  <theme href="theme.html" />\n \n-    <after theme-children=\'/html/head\' content=\'/html/body/style\' href=\'/++theme++plone.app.theming.tests/resource.css\' />\n-    <after theme-children=\'/html/head\' content=\'/html/body/script\' href=\'/++theme++plone.app.theming.tests/resource.js\' />\n+  <after content="/html/body/style"\n+         href="/++theme++plone.app.theming.tests/resource.css"\n+         theme-children="/html/head"\n+  />\n+  <after content="/html/body/script"\n+         href="/++theme++plone.app.theming.tests/resource.js"\n+         theme-children="/html/head"\n+  />\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/resources/nonascii.html b/src/plone/app/theming/tests/resources/nonascii.html\nindex 2453852b..2b2908eb 100644\n--- a/src/plone/app/theming/tests/resources/nonascii.html\n+++ b/src/plone/app/theming/tests/resources/nonascii.html\n@@ -1,3 +1,3 @@\n <body>\n-    <div>N\xc3\xbamero uno</div>\n-</body>\n\\ No newline at end of file\n+  <div>N&uacute;mero uno</div>\n+</body>\ndiff --git a/src/plone/app/theming/tests/resources/nonascii.xml b/src/plone/app/theming/tests/resources/nonascii.xml\nindex d576018a..dd83da18 100644\n--- a/src/plone/app/theming/tests/resources/nonascii.xml\n+++ b/src/plone/app/theming/tests/resources/nonascii.xml\n@@ -1,8 +1,13 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules xmlns="http://namespaces.plone.org/diazo" xmlns:css="http://namespaces.plone.org/diazo/css">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+>\n \n-    <theme href="theme.html" />\n+  <theme href="theme.html" />\n \n-    <replace theme-children=\'/html/body\' content-children=\'/html/body\' href=\'/++theme++plone.app.theming.tests/nonascii.html\' />\n+  <replace content-children="/html/body"\n+           href="/++theme++plone.app.theming.tests/nonascii.html"\n+           theme-children="/html/body"\n+  />\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/resources/othertheme.html b/src/plone/app/theming/tests/resources/othertheme.html\nindex 24c9a41c..db7304e2 100644\n--- a/src/plone/app/theming/tests/resources/othertheme.html\n+++ b/src/plone/app/theming/tests/resources/othertheme.html\n@@ -1,9 +1,9 @@\n <html>\n-<head>\n+  <head>\n     <title>Title</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n     <h1 id="pageTitle">Page title</h1>\n     <p>This is the other theme.</p>\n-</body>\n-</html>\n\\ No newline at end of file\n+  </body>\n+</html>\ndiff --git a/src/plone/app/theming/tests/resources/overridesrules.xml b/src/plone/app/theming/tests/resources/overridesrules.xml\nindex 9648d0c4..0b91b723 100644\n--- a/src/plone/app/theming/tests/resources/overridesrules.xml\n+++ b/src/plone/app/theming/tests/resources/overridesrules.xml\n@@ -1,15 +1,25 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules\n-    xmlns="http://namespaces.plone.org/diazo"\n-    xmlns:css="http://namespaces.plone.org/diazo/css"\n-    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+       xmlns:xsl="http://www.w3.org/1999/XSL/Transform"\n+>\n \n-    <theme href="overridestheme.html" css:if-content="#visual-portal-wrapper" />\n+  <theme css:if-content="#visual-portal-wrapper"\n+         href="overridestheme.html"\n+  />\n \n-    <replace content=\'/html/head/title\' theme=\'/html/head/title\' />\n-    <replace content=\'//h1[class=documentFirstHeading]\' theme=\'/html/body/h1\' />\n-    <after content=\'/html/head/link\' theme-children=\'/html/head\' />\n+  <replace content="/html/head/title"\n+           theme="/html/head/title"\n+  />\n+  <replace content="//h1[class=documentFirstHeading]"\n+           theme="/html/body/h1"\n+  />\n+  <after content="/html/head/link"\n+         theme-children="/html/head"\n+  />\n \n-    <replace css:theme="#footer" css:content="#portal-colophon" />\n+  <replace css:content="#portal-colophon"\n+           css:theme="#footer"\n+  />\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/resources/overridestheme.html b/src/plone/app/theming/tests/resources/overridestheme.html\nindex 6c774628..5088a108 100644\n--- a/src/plone/app/theming/tests/resources/overridestheme.html\n+++ b/src/plone/app/theming/tests/resources/overridestheme.html\n@@ -1,10 +1,10 @@\n <html>\n-<head>\n+  <head>\n     <title>Title</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n     <h1 id="pageTitle">Page title</h1>\n     <p>This is the theme.</p>\n     <img src="relative.jpg" />\n     <div id="footer">Theme footer</div>\n-</body>\n+  </body></html>\ndiff --git a/src/plone/app/theming/tests/resources/rules.xml b/src/plone/app/theming/tests/resources/rules.xml\nindex e6ffca4a..2eefb93e 100644\n--- a/src/plone/app/theming/tests/resources/rules.xml\n+++ b/src/plone/app/theming/tests/resources/rules.xml\n@@ -1,18 +1,26 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules\n-    xmlns="http://namespaces.plone.org/diazo"\n-    xmlns:css="http://namespaces.plone.org/diazo/css"\n-    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+       xmlns:xsl="http://www.w3.org/1999/XSL/Transform"\n+>\n \n-    <rules css:if-content="#visual-portal-wrapper">\n+  <rules css:if-content="#visual-portal-wrapper">\n \n-        <theme href="othertheme.html" if-path="news"/>\n-        <theme href="theme.html" />\n+    <theme href="othertheme.html"\n+           if-path="news"\n+    />\n+    <theme href="theme.html" />\n \n-        <replace content=\'/html/head/title\' theme=\'/html/head/title\' />\n-        <replace content=\'//h1[class=documentFirstHeading]\' theme=\'/html/body/h1\' />\n-        <after content=\'/html/head/link\' theme-children=\'/html/head\' />\n+    <replace content="/html/head/title"\n+             theme="/html/head/title"\n+    />\n+    <replace content="//h1[class=documentFirstHeading]"\n+             theme="/html/body/h1"\n+    />\n+    <after content="/html/head/link"\n+           theme-children="/html/head"\n+    />\n \n-    </rules>\n+  </rules>\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/resources/theme.html b/src/plone/app/theming/tests/resources/theme.html\nindex 03c0b1c7..f2350c96 100644\n--- a/src/plone/app/theming/tests/resources/theme.html\n+++ b/src/plone/app/theming/tests/resources/theme.html\n@@ -1,9 +1,9 @@\n <html>\n-<head>\n+  <head>\n     <title>Title</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n     <h1 id="pageTitle">Page title</h1>\n     <p>This is the theme.</p>\n     <img src="relative.jpg" />\n-</body>\n+  </body></html>\ndiff --git a/src/plone/app/theming/tests/rules.xml b/src/plone/app/theming/tests/rules.xml\nindex 641c15a4..2baf18f9 100644\n--- a/src/plone/app/theming/tests/rules.xml\n+++ b/src/plone/app/theming/tests/rules.xml\n@@ -1,18 +1,26 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules\n-    xmlns="http://namespaces.plone.org/diazo"\n-    xmlns:css="http://namespaces.plone.org/diazo/css"\n-    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+       xmlns:xsl="http://www.w3.org/1999/XSL/Transform"\n+>\n \n-    <rules css:if-content="#visual-portal-wrapper">\n+  <rules css:if-content="#visual-portal-wrapper">\n \n-        <theme href="python://plone.app.theming/tests/othertheme.html" if-path="news"/>\n-        <theme href="python://plone.app.theming/tests/theme.html" />\n+    <theme href="python://plone.app.theming/tests/othertheme.html"\n+           if-path="news"\n+    />\n+    <theme href="python://plone.app.theming/tests/theme.html" />\n \n-        <replace content=\'/html/head/title\' theme=\'/html/head/title\' />\n-        <replace content=\'//h1[class=documentFirstHeading]\' theme=\'/html/body/h1\' />\n-        <after content=\'/html/head/link\' theme-children=\'/html/head\' />\n+    <replace content="/html/head/title"\n+             theme="/html/head/title"\n+    />\n+    <replace content="//h1[class=documentFirstHeading]"\n+             theme="/html/body/h1"\n+    />\n+    <after content="/html/head/link"\n+           theme-children="/html/head"\n+    />\n \n-    </rules>\n+  </rules>\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/secondary-theme/rules.xml b/src/plone/app/theming/tests/secondary-theme/rules.xml\nindex 78ae654f..749fb9e9 100644\n--- a/src/plone/app/theming/tests/secondary-theme/rules.xml\n+++ b/src/plone/app/theming/tests/secondary-theme/rules.xml\n@@ -1,7 +1,7 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules\n-    xmlns="http://namespaces.plone.org/diazo"\n-    xmlns:css="http://namespaces.plone.org/diazo/css"\n-    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+       xmlns:xsl="http://www.w3.org/1999/XSL/Transform"\n+>\n \n </rules>\ndiff --git a/src/plone/app/theming/tests/test_controlpanel.py b/src/plone/app/theming/tests/test_controlpanel.py\nindex be30e893..c56ab854 100644\n--- a/src/plone/app/theming/tests/test_controlpanel.py\n+++ b/src/plone/app/theming/tests/test_controlpanel.py\n@@ -9,34 +9,30 @@\n \n \n class TestControlPanel(unittest.TestCase):\n-\n     layer = THEMING_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        portal = self.layer[\'portal\']\n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+        portal = self.layer["portal"]\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n         import transaction\n+\n         transaction.commit()\n \n         self.portal = portal\n-        self.browser = Browser(self.layer[\'app\'])\n+        self.browser = Browser(self.layer["app"])\n \n         handleErrors = self.browser.handleErrors\n         try:\n             self.browser.handleErrors = False\n-            self.browser.open(portal.absolute_url() + \'/login_form\')\n-            self.browser.getControl(name=\'__ac_name\').value = TEST_USER_NAME\n-            self.browser.getControl(\n-                name=\'__ac_password\'\n-            ).value = TEST_USER_PASSWORD\n-            self.browser.getControl(\'Log in\').click()\n+            self.browser.open(portal.absolute_url() + "/login_form")\n+            self.browser.getControl(name="__ac_name").value = TEST_USER_NAME\n+            self.browser.getControl(name="__ac_password").value = TEST_USER_PASSWORD\n+            self.browser.getControl("Log in").click()\n         finally:\n             self.browser.handleErrors = handleErrors\n \n     def goto_controlpanel(self):\n-        self.browser.open(\n-            self.portal.absolute_url() + \'/@@theming-controlpanel\'\n-        )\n+        self.browser.open(self.portal.absolute_url() + "/@@theming-controlpanel")\n \n     def test_save_advanced(self):\n         # Simply saving the advanced panel without changes could already give a WrongType error.\n@@ -49,6 +45,7 @@ def test_save_advanced(self):\n \n     def test_create_theme(self):\n         pass\n+\n     #     self.goto_controlpanel()\n     #     self.browser.getControl(name=\'title\').value = \'Foobar\'\n     #     self.browser.getControl(name=\'description\').value = \'foobar desc\'\n@@ -60,23 +57,19 @@ def test_create_theme(self):\n     #     self.assertTrue(\'foobar\' in [t.__name__ for t in getZODBThemes()])\n     #     self.assertTrue(getTheme(\'foobar\') is not None)\n \n-\n     def test_upload_theme_file_nodata(self):\n-        self.browser.addHeader(\'Accept\', \'application/json\')\n+        self.browser.addHeader("Accept", "application/json")\n         self.browser.post(\n-            self.portal.absolute_url() + \'/portal_resources/themeFileUpload\',\n-            \'\',\n-        )\n-        self.assertIn(\'Status: 200\', str(self.browser.headers))\n-        self.assertIn(\n-            \'{"failure": "error"}\',\n-            str(self.browser.contents)\n+            self.portal.absolute_url() + "/portal_resources/themeFileUpload",\n+            "",\n         )\n+        self.assertIn("Status: 200", str(self.browser.headers))\n+        self.assertIn(\'{"failure": "error"}\', str(self.browser.contents))\n \n     def test_upload_theme_file_withdata(self):\n-        self.browser.addHeader(\'Accept\', \'application/json\')\n+        self.browser.addHeader("Accept", "application/json")\n         self.browser.post(\n-            self.portal.absolute_url() + \'/portal_resources/themeFileUpload\',\n+            self.portal.absolute_url() + "/portal_resources/themeFileUpload",\n             """\n ---blah---\n Content-Disposition: form-data; name="file"; filename="Screen Shot 2018-02-16 at 3.08.15 pm.png"\n@@ -85,12 +78,11 @@ def test_upload_theme_file_withdata(self):\n \n ---blah---\n             """,\n-# Bug in testbrowser prevents this working\n-#            content_type=\'multipart/form-data; boundary=---blah---\'\n-\n+            # Bug in testbrowser prevents this working\n+            #            content_type=\'multipart/form-data; boundary=---blah---\'\n         )\n-        self.assertIn(\'Status: 200\', str(self.browser.headers))\n+        self.assertIn("Status: 200", str(self.browser.headers))\n         self.assertIn(\n-            \'{"failure": "error"}\', # TODO: Should be {\'success\':\'create\'}\n-            str(self.browser.contents)\n+            \'{"failure": "error"}\',  # TODO: Should be {\'success\':\'create\'}\n+            str(self.browser.contents),\n         )\ndiff --git a/src/plone/app/theming/tests/test_exportimport.py b/src/plone/app/theming/tests/test_exportimport.py\nindex 10ee8bb3..d04a6ec9 100644\n--- a/src/plone/app/theming/tests/test_exportimport.py\n+++ b/src/plone/app/theming/tests/test_exportimport.py\n@@ -4,60 +4,48 @@\n \n \n class TestExportImport(unittest.TestCase):\n-\n     layer = THEMING_INTEGRATION_TESTING\n \n     def test_import_filesystem(self):\n-        from zope.component import getUtility\n-\n-        from plone.registry.interfaces import IRegistry\n-\n-        from plone.app.theming.interfaces import IThemeSettings\n         from plone.app.theming.exportimport.handler import importTheme\n+        from plone.app.theming.interfaces import IThemeSettings\n+        from plone.registry.interfaces import IRegistry\n+        from zope.component import getUtility\n \n         class FauxContext:\n-\n             def getLogger(self, name):\n                 import logging\n+\n                 return logging.getLogger(name)\n \n             def readDataFile(self, name):\n-                assert name == \'theme.xml\'\n+                assert name == "theme.xml"\n                 return "<theme><name>plone.app.theming.tests</name></theme>"\n \n         importTheme(FauxContext())\n \n         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)\n \n+        self.assertEqual(settings.rules, "/++theme++plone.app.theming.tests/rules.xml")\n+        self.assertEqual(settings.absolutePrefix, "/++theme++plone.app.theming.tests")\n         self.assertEqual(\n-            settings.rules,\n-            \'/++theme++plone.app.theming.tests/rules.xml\'\n-        )\n-        self.assertEqual(\n-            settings.absolutePrefix,\n-            \'/++theme++plone.app.theming.tests\'\n-        )\n-        self.assertEqual(\n-            settings.parameterExpressions,\n-            {\'foo\': "python:request.get(\'bar\')"}\n+            settings.parameterExpressions, {"foo": "python:request.get(\'bar\')"}\n         )\n \n     def test_import_no_file(self):\n-        from zope.component import getUtility\n-\n-        from plone.registry.interfaces import IRegistry\n-\n-        from plone.app.theming.interfaces import IThemeSettings\n         from plone.app.theming.exportimport.handler import importTheme\n+        from plone.app.theming.interfaces import IThemeSettings\n+        from plone.registry.interfaces import IRegistry\n+        from zope.component import getUtility\n \n         class FauxContext:\n-\n             def getLogger(self, name):\n                 import logging\n+\n                 return logging.getLogger(name)\n \n             def readDataFile(self, name):\n-                assert name == \'theme.xml\'\n+                assert name == "theme.xml"\n                 return None\n \n         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)\n@@ -76,33 +64,31 @@ def test_import_not_found(self):\n         from plone.app.theming.exportimport.handler import importTheme\n \n         class FauxContext:\n-\n             def getLogger(self, name):\n                 import logging\n+\n                 return logging.getLogger(name)\n \n             def readDataFile(self, name):\n-                assert name == \'theme.xml\'\n+                assert name == "theme.xml"\n                 return "<theme><name>invalid-theme-name</name></theme>"\n \n         self.assertRaises(ValueError, importTheme, FauxContext())\n \n     def test_import_enable(self):\n-        from zope.component import getUtility\n-\n-        from plone.registry.interfaces import IRegistry\n-\n-        from plone.app.theming.interfaces import IThemeSettings\n         from plone.app.theming.exportimport.handler import importTheme\n+        from plone.app.theming.interfaces import IThemeSettings\n+        from plone.registry.interfaces import IRegistry\n+        from zope.component import getUtility\n \n         class FauxContext:\n-\n             def getLogger(self, name):\n                 import logging\n+\n                 return logging.getLogger(name)\n \n             def readDataFile(self, name):\n-                assert name == \'theme.xml\'\n+                assert name == "theme.xml"\n                 return "<theme><enabled>true</enabled></theme>"\n \n         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)\n@@ -113,21 +99,19 @@ def readDataFile(self, name):\n         self.assertEqual(settings.enabled, True)\n \n     def test_import_disable(self):\n-        from zope.component import getUtility\n-\n-        from plone.registry.interfaces import IRegistry\n-\n-        from plone.app.theming.interfaces import IThemeSettings\n         from plone.app.theming.exportimport.handler import importTheme\n+        from plone.app.theming.interfaces import IThemeSettings\n+        from plone.registry.interfaces import IRegistry\n+        from zope.component import getUtility\n \n         class FauxContext:\n-\n             def getLogger(self, name):\n                 import logging\n+\n                 return logging.getLogger(name)\n \n             def readDataFile(self, name):\n-                assert name == \'theme.xml\'\n+                assert name == "theme.xml"\n                 return "<theme><enabled>false</enabled></theme>"\n \n         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)\ndiff --git a/src/plone/app/theming/tests/test_policy.py b/src/plone/app/theming/tests/test_policy.py\nindex 324b3baf..188cc13e 100644\n--- a/src/plone/app/theming/tests/test_policy.py\n+++ b/src/plone/app/theming/tests/test_policy.py\n@@ -10,100 +10,98 @@\n \n \n class TestFunctional(unittest.TestCase):\n-\n     layer = THEMING_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         policy = theming_policy(request)\n         # avoid cache pollution from other tests\n         policy.invalidateCache()\n \n     def tearDown(self):\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         policy = theming_policy(request)\n         # clear local thread caches\n         policy.invalidateCache()\n \n     def test_getSettings(self):\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         policy = theming_policy(request)\n         settings = policy.getSettings()\n-        self.assertEqual(settings.currentTheme,\n-                         \'barceloneta\')\n-        self.assertEqual(settings.rules,\n-                         \'/++theme++barceloneta/rules.xml\')\n+        self.assertEqual(settings.currentTheme, "barceloneta")\n+        self.assertEqual(settings.rules, "/++theme++barceloneta/rules.xml")\n \n     def test_getCurrentTheme(self):\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         policy = theming_policy(request)\n-        self.assertEqual(policy.getCurrentTheme(),\n-                         \'barceloneta\')\n+        self.assertEqual(policy.getCurrentTheme(), "barceloneta")\n \n     def test_isThemeEnabled(self):\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         policy = theming_policy(request)\n         self.assertTrue(policy.isThemeEnabled())\n \n     def test_isThemeEnabled_blacklist(self):\n-        request = self.layer[\'request\']\n-        request.set(\'BASE1\', \'http://nohost/path/to/site\')\n+        request = self.layer["request"]\n+        request.set("BASE1", "http://nohost/path/to/site")\n         policy = theming_policy(request)\n         settings = policy.getSettings()\n         # Should pay no attention to BASE1 and only use SERVER_URL\n-        settings.hostnameBlacklist.append(\'nohost\')\n+        settings.hostnameBlacklist.append("nohost")\n         self.assertFalse(policy.isThemeEnabled())\n \n     def test_getCache(self):\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         policy = theming_policy(request)\n         cache = policy.getCache()\n         self.assertEqual(cache.themeObj, None)\n \n     def test_getCacheKey(self):\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         policy = theming_policy(request)\n-        self.assertEqual(policy.getCacheKey(),\n-                         \'http://nohost/plone::barceloneta\')\n+        self.assertEqual(policy.getCacheKey(), "http://nohost/plone::barceloneta")\n \n     def test_getCacheStorage(self):\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         policy = theming_policy(request)\n-        self.assertEqual(list(policy.getCacheStorage().keys()), [\'mtime\'])\n+        self.assertEqual(list(policy.getCacheStorage().keys()), ["mtime"])\n         cache = policy.getCache()\n         storage = policy.getCacheStorage()\n         self.assertEqual(\n-            [(k, v) for (k, v) in storage.items() if k != \'mtime\'],\n-            [(\'http://nohost/plone::barceloneta\', cache)])\n+            [(k, v) for (k, v) in storage.items() if k != "mtime"],\n+            [("http://nohost/plone::barceloneta", cache)],\n+        )\n \n     def test_caching(self):\n         """roundtrip"""\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         policy = theming_policy(request)\n         theme = policy.get_theme()\n         cache = policy.getCache()\n         storage = policy.getCacheStorage()\n         self.assertEqual(\n-            [(k, v) for (k, v) in storage.items() if k != \'mtime\'],\n-            [(\'http://nohost/plone::barceloneta\', cache)])\n+            [(k, v) for (k, v) in storage.items() if k != "mtime"],\n+            [("http://nohost/plone::barceloneta", cache)],\n+        )\n         self.assertEqual(cache.themeObj, theme)\n-        policy.set_theme(\'barceloneta\', \'faketheme\')\n-        self.assertEqual(policy.get_theme(), \'faketheme\')\n+        policy.set_theme("barceloneta", "faketheme")\n+        self.assertEqual(policy.get_theme(), "faketheme")\n         policy.invalidateCache()\n-        self.assertEqual(list(policy.getCacheStorage().keys()), [\'mtime\'])\n+        self.assertEqual(list(policy.getCacheStorage().keys()), ["mtime"])\n         theme2 = policy.get_theme()\n         # different objects but both are barceloneta\n         self.assertEqual(theme.title, theme2.title)\n \n     def test_invalidateCache_locally(self):\n         """Poor man\'s IPC - verify within same thread"""\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         policy = theming_policy(request)\n         cache = policy.getCache()\n         storage = policy.getCacheStorage()\n         self.assertEqual(\n-            [(k, v) for (k, v) in storage.items() if k != \'mtime\'],\n-            [(\'http://nohost/plone::barceloneta\', cache)])\n+            [(k, v) for (k, v) in storage.items() if k != "mtime"],\n+            [("http://nohost/plone::barceloneta", cache)],\n+        )\n         shared_mtime_1 = policy._get_shared_invalidation()\n         policy.invalidateCache()\n         shared_mtime_2 = policy._get_shared_invalidation()\n@@ -111,22 +109,23 @@ def test_invalidateCache_locally(self):\n \n     def test_invalidateCache_threaded(self):\n         """Poor man\'s IPC - verify in other thread"""\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         policy = theming_policy(request)\n         cache = policy.getCache()\n         storage = policy.getCacheStorage()\n         self.assertEqual(\n-            [(k, v) for (k, v) in storage.items() if k != \'mtime\'],\n-            [(\'http://nohost/plone::barceloneta\', cache)])\n+            [(k, v) for (k, v) in storage.items() if k != "mtime"],\n+            [("http://nohost/plone::barceloneta", cache)],\n+        )\n         shared_mtime_1 = policy._get_shared_invalidation()\n \n         def invalidate(registry):\n-            setattr(registry, \'_theme_cache_mtime\', time.time())\n+            setattr(registry, "_theme_cache_mtime", time.time())\n             registry._p_modified = True\n             transaction.commit()\n \n         registry = queryUtility(IRegistry)\n-        t = threading.Thread(target=invalidate, args=(registry, ))\n+        t = threading.Thread(target=invalidate, args=(registry,))\n         t.start()\n         t.join(5.0)\n \ndiff --git a/src/plone/app/theming/tests/test_transform.py b/src/plone/app/theming/tests/test_transform.py\nindex 65ad719e..ddb57c9d 100644\n--- a/src/plone/app/theming/tests/test_transform.py\n+++ b/src/plone/app/theming/tests/test_transform.py\n@@ -9,7 +9,6 @@\n from plone.app.theming.transform import ThemeTransform\n from plone.app.theming.utils import applyTheme\n from plone.app.theming.utils import getTheme\n-from plone.app.theming.utils import InternalResolver\n from plone.app.theming.utils import PythonResolver\n from plone.app.theming.utils import resolvePythonURL\n from plone.registry.interfaces import IRegistry\n@@ -27,7 +26,6 @@\n \n \n class TestCase(unittest.TestCase):\n-\n     layer = THEMING_FUNCTIONAL_TESTING\n \n     def setUp(self):\n@@ -37,12 +35,12 @@ def setUp(self):\n         self.settings = getUtility(IRegistry).forInterface(IThemeSettings)\n \n         self.settings.enabled = False\n-        self.settings.rules = \'python://plone.app.theming/tests/rules.xml\'\n+        self.settings.rules = "python://plone.app.theming/tests/rules.xml"\n         self.settings.parameterExpressions = {\n-            \'stringParam\': \'string:string param value\',\n-            \'boolParam\': \'python:False\',\n-            \'contextParam\': \'context/absolute_url | string:no context\',\n-            \'requestParam\': \'request/useother | string:off\',\n+            "stringParam": "string:string param value",\n+            "boolParam": "python:False",\n+            "contextParam": "context/absolute_url | string:no context",\n+            "requestParam": "request/useother | string:off",\n         }\n \n         transaction.commit()\n@@ -56,8 +54,8 @@ def evaluate(self, context, expression):\n         return expr(ec)\n \n     def test_no_effect_if_not_enabled(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         browser = Browser(app)\n         browser.open(portal.absolute_url())\n@@ -72,8 +70,8 @@ def test_no_effect_if_not_enabled(self):\n         self.assertFalse("This is the theme" in browser.contents)\n \n     def test_theme_enabled(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n         transaction.commit()\n@@ -91,10 +89,9 @@ def test_theme_enabled(self):\n         self.assertTrue("This is the theme" in browser.contents)\n \n     def test_develop_theme(self):\n-        \'\'\' Check if the rules are developed\n-        \'\'\'\n+        """Check if the rules are developed"""\n         # First we check the status of our environment variables\n-        var_name = \'DIAZO_ALWAYS_CACHE_RULES\'\n+        var_name = "DIAZO_ALWAYS_CACHE_RULES"\n         env_had_var = var_name in environ\n         # and clean it up\n         env_var_backup = environ.pop(var_name, None)\n@@ -105,11 +102,11 @@ def test_develop_theme(self):\n         self.assertTrue(transform.develop_theme())\n \n         # But we can anyway force the cache\n-        environ[var_name] = \'true\'\n+        environ[var_name] = "true"\n         self.assertFalse(transform.develop_theme())\n \n         # If we require to debug.diazo the variable will be ignored\n-        transform = ThemeTransform(None, {\'diazo.debug\': \'1\'})\n+        transform = ThemeTransform(None, {"diazo.debug": "1"})\n         self.assertTrue(transform.develop_theme())\n \n         # Then we reset our env variables before leaving\n@@ -119,25 +116,17 @@ def test_develop_theme(self):\n             del environ[var_name]\n \n     def test_theme_enabled_resource_directory(self):\n-\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n-        theme = getTheme(\'plone.app.theming.tests\')\n+        theme = getTheme("plone.app.theming.tests")\n         applyTheme(theme)\n         self.assertEqual(\n-            self.settings.rules,\n-            \'/++theme++plone.app.theming.tests/rules.xml\'\n-        )\n-        self.assertEqual(\n-            self.settings.currentTheme,\n-            "plone.app.theming.tests"\n-        )\n-        self.assertEqual(\n-            self.settings.doctype,\n-            "<!DOCTYPE html>"\n+            self.settings.rules, "/++theme++plone.app.theming.tests/rules.xml"\n         )\n+        self.assertEqual(self.settings.currentTheme, "plone.app.theming.tests")\n+        self.assertEqual(self.settings.doctype, "<!DOCTYPE html>")\n         transaction.commit()\n \n         browser = Browser(app)\n@@ -156,14 +145,14 @@ def test_theme_enabled_resource_directory(self):\n         self.assertTrue(re.match(r"<!DOCTYPE html>\\s+<html", browser.contents))\n \n     def test_theme_enabled_query_string_off_switch(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n         transaction.commit()\n \n         browser = Browser(app)\n-        browser.open(portal.absolute_url() + \'?diazo.off=1\')\n+        browser.open(portal.absolute_url() + "?diazo.off=1")\n \n         # Title - pulled in with rules.xml\n         self.assertTrue(portal.title in browser.contents)\n@@ -175,8 +164,8 @@ def test_theme_enabled_query_string_off_switch(self):\n         self.assertFalse("This is the theme" in browser.contents)\n \n     def test_theme_enabled_query_string_off_switch_production_mode(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         getConfiguration().debug_mode = False\n \n@@ -184,7 +173,7 @@ def test_theme_enabled_query_string_off_switch_production_mode(self):\n         transaction.commit()\n \n         browser = Browser(app)\n-        browser.open(portal.absolute_url() + \'?diazo.off=1\')\n+        browser.open(portal.absolute_url() + "?diazo.off=1")\n \n         # Title - pulled in with rules.xml\n         self.assertTrue(portal.title in browser.contents)\n@@ -196,14 +185,14 @@ def test_theme_enabled_query_string_off_switch_production_mode(self):\n         self.assertTrue("This is the theme" in browser.contents)\n \n     def test_theme_enabled_header_off(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n         transaction.commit()\n \n         browser = Browser(app)\n-        browser.open(portal.absolute_url() + \'/@@header-disabled\')\n+        browser.open(portal.absolute_url() + "/@@header-disabled")\n \n         self.assertTrue("Theme disabled" in browser.contents)\n \n@@ -214,25 +203,23 @@ def test_python_resolver(self):\n         # The rules contain a python:// link, so we need a python resolver.\n         parser = etree.HTMLParser()\n         parser.resolvers.add(PythonResolver())\n-        theme = resolvePythonURL(\n-            \'python://plone.app.theming.tests/theme.html\'\n-        )\n-        rules = resolvePythonURL(\'python://plone.app.theming/tests/rules.xml\')\n+        theme = resolvePythonURL("python://plone.app.theming.tests/theme.html")\n+        rules = resolvePythonURL("python://plone.app.theming/tests/rules.xml")\n         compile_theme(rules, theme, parser=parser)\n \n     def test_theme_stored_in_plone_site(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         # We\'ll upload the theme files to the Plone site root\n         here = os.path.split(__file__)[0]\n-        with open(os.path.join(here, \'localrules.xml\')) as rules_contents:\n-            portal.manage_addDTMLMethod(\'rules.xml\', file=rules_contents)\n-        with open(os.path.join(here, \'theme.html\')) as theme_contents:\n-            portal.manage_addDTMLMethod(\'theme.html\', file=theme_contents)\n+        with open(os.path.join(here, "localrules.xml")) as rules_contents:\n+            portal.manage_addDTMLMethod("rules.xml", file=rules_contents)\n+        with open(os.path.join(here, "theme.html")) as theme_contents:\n+            portal.manage_addDTMLMethod("theme.html", file=theme_contents)\n \n         # These paths should be relative to the Plone site root\n-        self.settings.rules = \'/rules.xml\'\n+        self.settings.rules = "/rules.xml"\n         self.settings.enabled = True\n \n         transaction.commit()\n@@ -250,28 +237,29 @@ def test_theme_stored_in_plone_site(self):\n         self.assertTrue("This is the theme" in browser.contents)\n \n     def test_theme_stored_in_plone_site_works_with_virtual_host(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         # We\'ll upload the theme files to the Plone site root\n         here = os.path.split(__file__)[0]\n-        with open(os.path.join(here, \'localrules.xml\')) as rules_contents:\n-            portal.manage_addDTMLMethod(\'rules.xml\', file=rules_contents)\n-        with open(os.path.join(here, \'theme.html\')) as theme_contents:\n-            portal.manage_addDTMLMethod(\'theme.html\', file=theme_contents)\n+        with open(os.path.join(here, "localrules.xml")) as rules_contents:\n+            portal.manage_addDTMLMethod("rules.xml", file=rules_contents)\n+        with open(os.path.join(here, "theme.html")) as theme_contents:\n+            portal.manage_addDTMLMethod("theme.html", file=theme_contents)\n \n         # These paths should be relative to the Plone site root\n-        self.settings.rules = \'/rules.xml\'\n+        self.settings.rules = "/rules.xml"\n         self.settings.enabled = True\n \n         from Products.SiteAccess import VirtualHostMonster\n-        VirtualHostMonster.manage_addVirtualHostMonster(app, \'virtual_hosting\')\n+\n+        VirtualHostMonster.manage_addVirtualHostMonster(app, "virtual_hosting")\n \n         transaction.commit()\n \n         portalURL = portal.absolute_url()\n-        prefix = \'/\'.join(portalURL.split(\'/\')[:-1])\n-        suffix = portalURL.split(\'/\')[-1]\n+        prefix = "/".join(portalURL.split("/")[:-1])\n+        suffix = portalURL.split("/")[-1]\n \n         vhostURL = (\n             "{:s}/VirtualHostBase/http/example.org:80/{:s}/VirtualHostRoot"\n@@ -291,8 +279,8 @@ def test_theme_stored_in_plone_site_works_with_virtual_host(self):\n         self.assertTrue("This is the theme" in browser.contents)\n \n     def test_absolutePrefix_disabled(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n         self.settings.absolutePrefix = None\n@@ -305,11 +293,11 @@ def test_absolutePrefix_disabled(self):\n         self.assertTrue(\'<img src="relative.jpg" />\' in browser.contents)\n \n     def test_absolutePrefix_enabled_uri(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n-        self.settings.absolutePrefix = \'http://example.com\'\n+        self.settings.absolutePrefix = "http://example.com"\n \n         transaction.commit()\n \n@@ -322,11 +310,11 @@ def test_absolutePrefix_enabled_uri(self):\n         )\n \n     def test_absolutePrefix_enabled_path(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n-        self.settings.absolutePrefix = \'/foo\'\n+        self.settings.absolutePrefix = "/foo"\n \n         transaction.commit()\n \n@@ -334,25 +322,24 @@ def test_absolutePrefix_enabled_path(self):\n         browser.open(portal.absolute_url())\n \n         self.assertFalse(\'<img src="relative.jpg" />\' in browser.contents)\n-        self.assertTrue(\n-            \'<img src="/plone/foo/relative.jpg" />\' in browser.contents\n-        )\n+        self.assertTrue(\'<img src="/plone/foo/relative.jpg" />\' in browser.contents)\n \n     def test_absolutePrefix_enabled_path_vhosting(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         from Products.SiteAccess import VirtualHostMonster\n-        VirtualHostMonster.manage_addVirtualHostMonster(app, \'virtual_hosting\')\n+\n+        VirtualHostMonster.manage_addVirtualHostMonster(app, "virtual_hosting")\n \n         transaction.commit()\n \n         self.settings.enabled = True\n-        self.settings.absolutePrefix = \'/foo\'\n+        self.settings.absolutePrefix = "/foo"\n \n         portalURL = portal.absolute_url()\n-        prefix = \'/\'.join(portalURL.split(\'/\')[:-1])\n-        suffix = portalURL.split(\'/\')[-1]\n+        prefix = "/".join(portalURL.split("/")[:-1])\n+        suffix = portalURL.split("/")[-1]\n \n         vhostURL = (\n             "{:s}/VirtualHostBase/http/example.org:80/{:s}/VirtualHostRoot"\n@@ -366,13 +353,12 @@ def test_absolutePrefix_enabled_path_vhosting(self):\n \n         self.assertFalse(\'<img src="relative.jpg" />\' in browser.contents)\n         self.assertTrue(\n-            \'<img src="/fizz/buzz/fizzbuzz/foo/relative.jpg" />\'\n-            in browser.contents\n+            \'<img src="/fizz/buzz/fizzbuzz/foo/relative.jpg" />\' in browser.contents\n         )\n \n     def test_theme_installed_invalid_config(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n         self.settings.rules = "invalid"\n@@ -392,15 +378,15 @@ def test_theme_installed_invalid_config(self):\n         self.assertFalse("This is the theme" in browser.contents)\n \n     def test_non_html_content(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n \n         transaction.commit()\n \n         browser = Browser(app)\n-        browser.open(portal.absolute_url() + \'/document_icon.png\')\n+        browser.open(portal.absolute_url() + "/document_icon.png")\n         # The theme\n         self.assertFalse(b"This is the theme" in browser.contents)\n \n@@ -439,7 +425,7 @@ def test_non_html_content(self):\n     #     # The theme\n     #     self.assertTrue("This is the other theme" in browser.contents)\n     #\n-    #     # Now invalide the cache by touching the settings utility\n+    #     # Now invalidate the cache by touching the settings utility\n     #\n     #     self.settings.enabled = False\n     #     self.settings.enabled = True\n@@ -523,14 +509,14 @@ def test_non_html_content(self):\n     #     self.assertTrue("This is the theme" in browser.contents)\n \n     def test_theme_different_path(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n-        setRoles(portal, TEST_USER_ID, (\'Manager\',))\n-        portal.invokeFactory(\'Folder\', \'news\', title="News")\n+        setRoles(portal, TEST_USER_ID, ("Manager",))\n+        portal.invokeFactory("Folder", "news", title="News")\n         wftool = getToolByName(portal, "portal_workflow")\n-        wftool.doActionFor(portal.news, action=\'publish\')\n-        setRoles(portal, TEST_USER_ID, (\'Member\',))\n+        wftool.doActionFor(portal.news, action="publish")\n+        setRoles(portal, TEST_USER_ID, ("Member",))\n \n         self.settings.enabled = True\n \n@@ -548,7 +534,7 @@ def test_theme_different_path(self):\n         # The theme\n         self.assertTrue("This is the theme" in browser.contents)\n \n-        browser.open(portal[\'news\'].absolute_url())\n+        browser.open(portal["news"].absolute_url())\n \n         # Title - pulled in with rules.xml\n         self.assertTrue("News" in browser.contents)\n@@ -560,16 +546,16 @@ def test_theme_different_path(self):\n         self.assertTrue("This is the other theme" in browser.contents)\n \n     def test_theme_params(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n-        self.settings.rules = \'python://plone.app.theming/tests/paramrules.xml\'  # noqa\n+        self.settings.rules = "python://plone.app.theming/tests/paramrules.xml"  # noqa\n         self.settings.parameterExpressions = {\n-            \'stringParam\': \'string:string param value\',\n-            \'boolParam\': \'python:False\',\n-            \'contextParam\': \'context/absolute_url | string:no context\',\n-            \'requestParam\': \'request/someParam | string:off\',\n+            "stringParam": "string:string param value",\n+            "boolParam": "python:False",\n+            "contextParam": "context/absolute_url | string:no context",\n+            "requestParam": "request/someParam | string:off",\n         }\n \n         transaction.commit()\n@@ -587,41 +573,36 @@ def test_theme_params(self):\n         self.assertTrue("This is the theme" in browser.contents)\n \n         # Value of string param\n-        self.assertTrue(\'string param value\' in browser.contents)\n+        self.assertTrue("string param value" in browser.contents)\n \n         # Would be here if bool param was false\n-        self.assertFalse(\'<script>bool param on</script>\' in browser.contents)\n+        self.assertFalse("<script>bool param on</script>" in browser.contents)\n \n         # Not present in this request\n-        self.assertFalse(\n-            \'<script>request param on</script>\' in browser.contents\n-        )\n+        self.assertFalse("<script>request param on</script>" in browser.contents)\n \n         # Context was available for parameter expressions\n         self.assertTrue(\n-            \'<script id="contextParam">http://nohost/plone</script>\'\n-            in browser.contents\n+            \'<script id="contextParam">http://nohost/plone</script>\' in browser.contents\n         )\n \n         # ... but present with the request param on\n-        browser.open(portal.absolute_url() + \'?someParam=on\')\n-        self.assertTrue(\n-            \'<script>request param on</script>\' in browser.contents\n-        )\n+        browser.open(portal.absolute_url() + "?someParam=on")\n+        self.assertTrue("<script>request param on</script>" in browser.contents)\n \n     def test_theme_for_404(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n \n         transaction.commit()\n \n         browser = Browser(app)\n-        browser.addHeader(\'Accept\', \'text/html\')\n+        browser.addHeader("Accept", "text/html")\n         error = None\n         try:\n-            browser.open(f\'{portal.absolute_url():s}/404_page\')\n+            browser.open(f"{portal.absolute_url():s}/404_page")\n         except HTTPError as e:\n             error = e\n         self.assertEqual(error.code, 404)\n@@ -630,25 +611,25 @@ def test_theme_for_404(self):\n         self.assertTrue("This is the theme" in browser.contents)\n \n     def test_theme_params_on_404(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n-        self.settings.rules = \'python://plone.app.theming/tests/paramrules.xml\'  # noqa\n+        self.settings.rules = "python://plone.app.theming/tests/paramrules.xml"  # noqa\n         self.settings.parameterExpressions = {\n-            \'stringParam\': \'string:string param value\',\n-            \'boolParam\': \'python:False\',\n-            \'contextParam\': \'context/absolute_url | string:no context\',\n-            \'requestParam\': \'request/someParam | string:off\',\n+            "stringParam": "string:string param value",\n+            "boolParam": "python:False",\n+            "contextParam": "context/absolute_url | string:no context",\n+            "requestParam": "request/someParam | string:off",\n         }\n \n         transaction.commit()\n \n         browser = Browser(app)\n-        browser.addHeader(\'Accept\', \'text/html\')\n+        browser.addHeader("Accept", "text/html")\n         error = None\n         try:\n-            browser.open(f\'{portal.absolute_url():s}/404_page\')\n+            browser.open(f"{portal.absolute_url():s}/404_page")\n         except HTTPError as e:\n             error = e\n         self.assertEqual(error.code, 404)\n@@ -663,42 +644,39 @@ def test_theme_params_on_404(self):\n         self.assertTrue("This is the theme" in browser.contents)\n \n         # Value of string param\n-        self.assertTrue(\'string param value\' in browser.contents)\n+        self.assertTrue("string param value" in browser.contents)\n \n         # Would be here if bool param was false\n-        self.assertFalse(\'<script>bool param on</script>\' in browser.contents)\n+        self.assertFalse("<script>bool param on</script>" in browser.contents)\n \n         # Not present in this request\n-        self.assertFalse(\n-            \'<script>request param on</script>\' in browser.contents\n-        )\n+        self.assertFalse("<script>request param on</script>" in browser.contents)\n \n         # Context is the last found parent\n         self.assertTrue(\n-            \'<script id="contextParam">http://nohost/plone</script>\'\n-            in browser.contents\n+            \'<script id="contextParam">http://nohost/plone</script>\' in browser.contents\n         )\n \n     def test_navroot_params_on_404_widget_in_path(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n-        setRoles(portal, TEST_USER_ID, [\'Contributor\'])\n-        portal.invokeFactory(\'Folder\', \'subfolder\')\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n+        setRoles(portal, TEST_USER_ID, ["Contributor"])\n+        portal.invokeFactory("Folder", "subfolder")\n \n         self.settings.enabled = True\n         self.settings.parameterExpressions = {\n-            \'navigation_root_id\': \'python:portal_state.navigation_root().getId()\'  # noqa\n+            "navigation_root_id": "python:portal_state.navigation_root().getId()"  # noqa\n         }\n \n         transaction.commit()\n \n         browser = Browser(app)\n-        browser.addHeader(\'Accept\', \'text/html\')\n+        browser.addHeader("Accept", "text/html")\n         error = None\n         try:\n             browser.open(\n-                \'{:s}/widget/oauth_login/info.txt\'.format(\n-                    portal[\'subfolder\'].absolute_url()\n+                "{:s}/widget/oauth_login/info.txt".format(\n+                    portal["subfolder"].absolute_url()\n                 )\n             )\n         except HTTPError as e:\n@@ -759,29 +737,29 @@ def test_navroot_params_on_404_widget_in_path(self):\n     #     self.assertTrue("This is the theme" in browser.contents)\n \n     def test_includes(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n-        setRoles(portal, TEST_USER_ID, (\'Manager\',))\n+        setRoles(portal, TEST_USER_ID, ("Manager",))\n \n         # Create some test content in the portal root\n         here = os.path.split(__file__)[0]\n-        with open(os.path.join(here, \'one.html\')) as one:\n-            portal.manage_addDTMLMethod(\'alpha\', file=one)\n-        with open(os.path.join(here, \'two.html\')) as two:\n-            portal.manage_addDTMLMethod(\'beta\', file=two)\n+        with open(os.path.join(here, "one.html")) as one:\n+            portal.manage_addDTMLMethod("alpha", file=one)\n+        with open(os.path.join(here, "two.html")) as two:\n+            portal.manage_addDTMLMethod("beta", file=two)\n \n         # Create some different content in a subfolder\n-        portal.invokeFactory(\'Folder\', \'subfolder\')\n-        portal.portal_workflow.doActionFor(portal.subfolder, \'publish\')\n+        portal.invokeFactory("Folder", "subfolder")\n+        portal.portal_workflow.doActionFor(portal.subfolder, "publish")\n \n-        with open(os.path.join(here, \'one.html\')) as one:\n-            portal[\'subfolder\'].manage_addDTMLMethod(\'beta\', file=one)\n-        with open(os.path.join(here, \'two.html\')) as two:\n-            portal[\'subfolder\'].manage_addDTMLMethod(\'alpha\', file=two)\n+        with open(os.path.join(here, "one.html")) as one:\n+            portal["subfolder"].manage_addDTMLMethod("beta", file=one)\n+        with open(os.path.join(here, "two.html")) as two:\n+            portal["subfolder"].manage_addDTMLMethod("alpha", file=two)\n \n         # Set up transformation\n-        self.settings.rules = \'python://plone.app.theming/tests/includes.xml\'\n+        self.settings.rules = "python://plone.app.theming/tests/includes.xml"\n         self.settings.enabled = True\n \n         transaction.commit()\n@@ -798,7 +776,7 @@ def test_includes(self):\n \n         # In the subfolder, we\'ve reversed alpha and beta. We should now get\n         # \'one\' twice, since we still get alpha from the site root.\n-        browser.open(portal[\'subfolder\'].absolute_url())\n+        browser.open(portal["subfolder"].absolute_url())\n         self.assertTrue(\'<div id="alpha">Number one</div>\' in browser.contents)\n         self.assertTrue(\'<div id="beta">Number one</div>\' in browser.contents)\n \n@@ -811,18 +789,18 @@ def test_include_non_ascii(self):\n         # u\'Actualit\\xe9s\'\n         # \'Actualit&#195;&#169;s\'\n \n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n-        setRoles(portal, TEST_USER_ID, (\'Manager\',))\n+        setRoles(portal, TEST_USER_ID, ("Manager",))\n \n         # Create some test content in the portal root\n         here = os.path.split(__file__)[0]\n-        with open(os.path.join(here, \'french.html\'), "rb") as french:\n-            portal.manage_addDTMLMethod(\'french\', file=french)\n+        with open(os.path.join(here, "french.html"), "rb") as french:\n+            portal.manage_addDTMLMethod("french", file=french)\n \n         # Set up transformation\n-        self.settings.rules = \'python://plone.app.theming/tests/nonascii.xml\'\n+        self.settings.rules = "python://plone.app.theming/tests/nonascii.xml"\n         self.settings.enabled = True\n \n         transaction.commit()\n@@ -838,12 +816,11 @@ def test_include_non_ascii(self):\n         self.assertIn(\'<div id="content">Actualit\\xe9s</div>\', browser.contents)\n \n     def test_css_js_includes(self):\n-\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n-        self.settings.rules = \'/++theme++plone.app.theming.tests/css-js.xml\'\n+        self.settings.rules = "/++theme++plone.app.theming.tests/css-js.xml"\n         transaction.commit()\n \n         browser = Browser(app)\n@@ -851,42 +828,41 @@ def test_css_js_includes(self):\n \n         # CSS - pulled in with rules\n         self.assertTrue(\n-            \'\'\'<style type="text/css">/* A CSS file */\\n</style>\'\'\'\n-            in browser.contents)\n+            """<style type="text/css">/* A CSS file */\\n</style>""" in browser.contents\n+        )\n \n         # JS pulled in with rules\n         self.assertTrue(\n-            \'\'\'<script type="text/javascript">/* A JS file */\\n</script>\'\'\'\n-            in browser.contents)\n+            """<script type="text/javascript">/* A JS file */\\n</script>"""\n+            in browser.contents\n+        )\n \n     def test_non_ascii_includes(self):\n-\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n-        self.settings.rules = \'/++theme++plone.app.theming.tests/nonascii.xml\'\n+        self.settings.rules = "/++theme++plone.app.theming.tests/nonascii.xml"\n         transaction.commit()\n \n         browser = Browser(app)\n         browser.open(portal.absolute_url())\n \n         # browser.contents is always string.  On Py 2 this means bytes, on Py 3 text.\n-        self.assertIn(\'<div>N\\xfamero uno</div>\', browser.contents)\n-\n+        self.assertIn("<div>N\\xfamero uno</div>", browser.contents)\n \n     def test_theme_enabled_query_string_debug_switch(self):\n-        app = self.layer[\'app\']\n-        portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        portal = self.layer["portal"]\n \n         self.settings.enabled = True\n         transaction.commit()\n \n         browser = Browser(app)\n-        browser.open(portal.absolute_url() + \'?diazo.debug=1\')\n+        browser.open(portal.absolute_url() + "?diazo.debug=1")\n \n         # Title - pulled in with rules.xml\n         self.assertTrue(portal.title in browser.contents)\n \n         # The theme\n-        self.assertTrue("id=\\"diazo-debug-iframe\\"" in browser.contents)\n+        self.assertTrue(\'id="diazo-debug-iframe"\' in browser.contents)\ndiff --git a/src/plone/app/theming/tests/test_utils.py b/src/plone/app/theming/tests/test_utils.py\nindex a5ec6320..7baa55bf 100644\n--- a/src/plone/app/theming/tests/test_utils.py\n+++ b/src/plone/app/theming/tests/test_utils.py\n@@ -1,10 +1,10 @@\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.theming.testing import THEMING_FUNCTIONAL_TESTING\n from plone.app.theming.testing import THEMING_INTEGRATION_TESTING\n from plone.app.theming.utils import applyTheme\n from plone.app.theming.utils import extractThemeInfo\n from plone.app.theming.utils import getTheme\n-from plone.app.testing import SITE_OWNER_NAME\n-from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.testing.zope import Browser\n \n import os.path\n@@ -34,19 +34,22 @@\n \n \n class TestIntegration(unittest.TestCase):\n-\n     layer = THEMING_INTEGRATION_TESTING\n \n     def test_getOrCreatePersistentResourceDirectory_new(self):\n-        from plone.app.theming.utils import getOrCreatePersistentResourceDirectory  # noqa\n+        from plone.app.theming.utils import (  # noqa\n+            getOrCreatePersistentResourceDirectory,\n+        )\n \n         d = getOrCreatePersistentResourceDirectory()\n         self.assertEqual(d.__name__, "theme")\n \n     def test_getOrCreatePersistentResourceDirectory_exists(self):\n-        from zope.component import getUtility\n+        from plone.app.theming.utils import (  # noqa\n+            getOrCreatePersistentResourceDirectory,\n+        )\n         from plone.resource.interfaces import IResourceDirectory\n-        from plone.app.theming.utils import getOrCreatePersistentResourceDirectory  # noqa\n+        from zope.component import getUtility\n \n         persistentDirectory = getUtility(IResourceDirectory, name="persistent")\n         persistentDirectory.makeDirectory("theme")\n@@ -61,33 +64,29 @@ def test_getAvailableThemes(self):\n         themes = getAvailableThemes()\n \n         self.assertTrue(len(themes) >= 3)\n-        theme = getTheme(\'plone.app.theming.tests\')\n+        theme = getTheme("plone.app.theming.tests")\n         self.assertTrue(theme is not None)\n-        self.assertEqual(theme.__name__, \'plone.app.theming.tests\')\n-        self.assertEqual(theme.title, \'Test theme\')\n-        self.assertEqual(theme.description, \'A theme for testing\')\n-        self.assertEqual(\n-            theme.rules,\n-            \'/++theme++plone.app.theming.tests/rules.xml\'\n-        )\n-        self.assertEqual(\n-            theme.absolutePrefix,\n-            \'/++theme++plone.app.theming.tests\'\n-        )\n+        self.assertEqual(theme.__name__, "plone.app.theming.tests")\n+        self.assertEqual(theme.title, "Test theme")\n+        self.assertEqual(theme.description, "A theme for testing")\n+        self.assertEqual(theme.rules, "/++theme++plone.app.theming.tests/rules.xml")\n+        self.assertEqual(theme.absolutePrefix, "/++theme++plone.app.theming.tests")\n         self.assertEqual(\n-            theme.parameterExpressions,\n-            {\'foo\': "python:request.get(\'bar\')"}\n+            theme.parameterExpressions, {"foo": "python:request.get(\'bar\')"}\n         )\n         self.assertEqual(theme.doctype, "<!DOCTYPE html>")\n \n     def test_getZODBThemes(self):\n-        import zipfile\n-        import os.path\n-        from plone.app.theming.utils import getOrCreatePersistentResourceDirectory  # noqa\n+        from plone.app.theming.utils import (  # noqa\n+            getOrCreatePersistentResourceDirectory,\n+        )\n         from plone.app.theming.utils import getZODBThemes\n-        path = os.path.join(\n-            os.path.dirname(__file__), \'zipfiles\', \'default_rules.zip\')\n-        with open(path, \'rb\') as fp:\n+\n+        import os.path\n+        import zipfile\n+\n+        path = os.path.join(os.path.dirname(__file__), "zipfiles", "default_rules.zip")\n+        with open(path, "rb") as fp:\n             zf = zipfile.ZipFile(fp)\n \n             themeContainer = getOrCreatePersistentResourceDirectory()\n@@ -97,24 +96,16 @@ def test_getZODBThemes(self):\n \n             self.assertEqual(len(zodbThemes), 1)\n \n-            self.assertEqual(zodbThemes[0].__name__, \'default_rules\')\n-            self.assertEqual(\n-                zodbThemes[0].rules,\n-                \'/++theme++default_rules/rules.xml\'\n-            )\n-            self.assertEqual(\n-                zodbThemes[0].absolutePrefix,\n-                \'/++theme++default_rules\'\n-            )\n+            self.assertEqual(zodbThemes[0].__name__, "default_rules")\n+            self.assertEqual(zodbThemes[0].rules, "/++theme++default_rules/rules.xml")\n+            self.assertEqual(zodbThemes[0].absolutePrefix, "/++theme++default_rules")\n \n     def test_applyTheme(self):\n-        from zope.component import getUtility\n-\n-        from plone.registry.interfaces import IRegistry\n-\n         from plone.app.theming.interfaces import IThemeSettings\n-        from plone.app.theming.utils import getAvailableThemes\n         from plone.app.theming.utils import applyTheme\n+        from plone.app.theming.utils import getAvailableThemes\n+        from plone.registry.interfaces import IRegistry\n+        from zope.component import getUtility\n \n         theme = None\n         for t in getAvailableThemes():\n@@ -128,19 +119,14 @@ def test_applyTheme(self):\n \n         self.assertEqual(settings.rules, theme.rules)\n         self.assertEqual(settings.absolutePrefix, theme.absolutePrefix)\n-        self.assertEqual(\n-            settings.parameterExpressions,\n-            theme.parameterExpressions\n-        )\n+        self.assertEqual(settings.parameterExpressions, theme.parameterExpressions)\n         self.assertEqual(settings.doctype, theme.doctype)\n \n     def test_applyTheme_None(self):\n-        from zope.component import getUtility\n-\n-        from plone.registry.interfaces import IRegistry\n-\n         from plone.app.theming.interfaces import IThemeSettings\n         from plone.app.theming.utils import applyTheme\n+        from plone.registry.interfaces import IRegistry\n+        from zope.component import getUtility\n \n         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)\n \n@@ -155,101 +141,105 @@ def test_applyTheme_None(self):\n         self.assertEqual(settings.parameterExpressions, {})\n \n     def test_isThemeEnabled(self):\n-        from zope.component import getUtility\n-\n-        from plone.registry.interfaces import IRegistry\n-\n         from plone.app.theming.interfaces import IThemeSettings\n         from plone.app.theming.utils import isThemeEnabled\n+        from plone.registry.interfaces import IRegistry\n+        from zope.component import getUtility\n \n         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)\n         settings.enabled = True\n         settings.rules = "/++theme++foo/rules.xml"\n \n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n \n         self.assertTrue(isThemeEnabled(request, settings))\n \n     def test_isThemeEnabled_blacklist(self):\n-        from zope.component import getUtility\n-\n-        from plone.registry.interfaces import IRegistry\n-\n         from plone.app.theming.interfaces import IThemeSettings\n         from plone.app.theming.utils import isThemeEnabled\n+        from plone.registry.interfaces import IRegistry\n+        from zope.component import getUtility\n \n         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)\n         settings.enabled = True\n         settings.rules = "/++theme++foo/rules.xml"\n \n-        request = self.layer[\'request\']\n-        request.set(\'BASE1\', \'http://nohost/path/to/site\')\n+        request = self.layer["request"]\n+        request.set("BASE1", "http://nohost/path/to/site")\n \n         self.assertTrue(isThemeEnabled(request, settings))\n-        self.assertEqual(request.get(\'SERVER_URL\'), \'http://nohost\')\n+        self.assertEqual(request.get("SERVER_URL"), "http://nohost")\n \n         # Should pay no attention to BASE1 and only use SERVER_URL\n-        settings.hostnameBlacklist.append(\'nohost\')\n+        settings.hostnameBlacklist.append("nohost")\n         self.assertFalse(isThemeEnabled(request, settings))\n \n     def test_createThemeFromTemplate(self):\n+        from plone.app.theming.interfaces import RULE_FILENAME\n+        from plone.app.theming.interfaces import THEME_RESOURCE_NAME\n         from plone.app.theming.utils import createThemeFromTemplate\n         from plone.app.theming.utils import getAvailableThemes\n         from plone.app.theming.utils import getTheme\n-        from plone.app.theming.interfaces import THEME_RESOURCE_NAME\n-        from plone.app.theming.interfaces import RULE_FILENAME\n+\n         title = "copy of test theme"\n         description = "test theme creation"\n-        themeName = createThemeFromTemplate(title, description,\n-                                            baseOn="plone.app.theming.tests")\n+        themeName = createThemeFromTemplate(\n+            title, description, baseOn="plone.app.theming.tests"\n+        )\n         titles = [theme.title for theme in getAvailableThemes()]\n         self.assertTrue(title in titles)\n \n         theme = getTheme(themeName)\n-        expected_prefix = "/++{}++{}".format(THEME_RESOURCE_NAME,\n-                                          title.replace(" ", "-"))\n+        expected_prefix = "/++{}++{}".format(\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n         self.assertEqual(theme.absolutePrefix, expected_prefix)\n \n-        expected_rules = "/++{}++{}/{}".format(THEME_RESOURCE_NAME,\n-                                            title.replace(" ", "-"),\n-                                            RULE_FILENAME)\n+        expected_rules = "/++{}++{}/{}".format(\n+            THEME_RESOURCE_NAME, title.replace(" ", "-"), RULE_FILENAME\n+        )\n         self.assertEqual(theme.rules, expected_rules)\n \n     def test_createThemeFromTemplate_custom_prefix(self):\n+        from plone.app.theming.interfaces import RULE_FILENAME\n+        from plone.app.theming.interfaces import THEME_RESOURCE_NAME\n         from plone.app.theming.utils import createThemeFromTemplate\n         from plone.app.theming.utils import getAvailableThemes\n         from plone.app.theming.utils import getTheme\n-        from plone.app.theming.interfaces import THEME_RESOURCE_NAME\n-        from plone.app.theming.interfaces import RULE_FILENAME\n+\n         title = "copy of test theme with custom prefix"\n         description = "test theme creation"\n-        themeName = createThemeFromTemplate(title, description,\n-                                            baseOn="secondary-theme")\n+        themeName = createThemeFromTemplate(\n+            title, description, baseOn="secondary-theme"\n+        )\n         titles = [theme.title for theme in getAvailableThemes()]\n         self.assertTrue(title in titles)\n \n         theme = getTheme(themeName)\n-        expected_prefix = "/++{}++{}".format(THEME_RESOURCE_NAME,\n-                                          title.replace(" ", "-"))\n+        expected_prefix = "/++{}++{}".format(\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n         self.assertEqual(theme.absolutePrefix, expected_prefix)\n \n-        expected_rules = "/++{}++{}/{}".format(THEME_RESOURCE_NAME,\n-                                            title.replace(" ", "-"),\n-                                            RULE_FILENAME)\n+        expected_rules = "/++{}++{}/{}".format(\n+            THEME_RESOURCE_NAME, title.replace(" ", "-"), RULE_FILENAME\n+        )\n         self.assertEqual(theme.rules, expected_rules)\n \n-        self.assertEqual(theme.enabled_bundles, [\'plone\'])\n-        self.assertEqual(theme.disabled_bundles, [\'foobar\'])\n+        self.assertEqual(theme.enabled_bundles, ["plone"])\n+        self.assertEqual(theme.disabled_bundles, ["foobar"])\n \n         expected_dev_css = "/++{}++{}/css/barceloneta.css".format(\n-            THEME_RESOURCE_NAME, title.replace(" ", "-"))\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n         expected_prod_css = "/++{}++{}/css/barceloneta.min.css".format(\n-            THEME_RESOURCE_NAME, title.replace(" ", "-"))\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n         expected_tinymce_content_css = "/++{}++{}/css/barceloneta.min.css".format(\n-            THEME_RESOURCE_NAME, title.replace(" ", "-"))\n-        expected_tinymce_styles_css = (\n-            "/++{}++{}/css/custom-format-styles.css".format(\n-                THEME_RESOURCE_NAME, title.replace(" ", "-"))\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n+        expected_tinymce_styles_css = "/++{}++{}/css/custom-format-styles.css".format(\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n         )\n         self.assertEqual(theme.development_css, expected_dev_css)\n         self.assertEqual(theme.production_css, expected_prod_css)\n@@ -257,47 +247,52 @@ def test_createThemeFromTemplate_custom_prefix(self):\n         self.assertEqual(theme.tinymce_styles_css, expected_tinymce_styles_css)\n \n         expected_dev_js = "/++{}++{}/script.js".format(\n-            THEME_RESOURCE_NAME, title.replace(" ", "-"))\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n         expected_prod_js = "/++{}++{}/script.min.js".format(\n-            THEME_RESOURCE_NAME, title.replace(" ", "-"))\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n         self.assertEqual(theme.development_js, expected_dev_js)\n         self.assertEqual(theme.production_js, expected_prod_js)\n \n     def test_createThemeFromTemplate_rel_path(self):\n+        from plone.app.theming.interfaces import RULE_FILENAME\n+        from plone.app.theming.interfaces import THEME_RESOURCE_NAME\n         from plone.app.theming.utils import createThemeFromTemplate\n         from plone.app.theming.utils import getAvailableThemes\n         from plone.app.theming.utils import getTheme\n-        from plone.app.theming.interfaces import THEME_RESOURCE_NAME\n-        from plone.app.theming.interfaces import RULE_FILENAME\n+\n         title = "copy of test theme with custom prefix"\n         description = "test theme creation"\n-        themeName = createThemeFromTemplate(title, description,\n-                                            baseOn="another-theme")\n+        themeName = createThemeFromTemplate(title, description, baseOn="another-theme")\n         titles = [theme.title for theme in getAvailableThemes()]\n         self.assertTrue(title in titles)\n \n         theme = getTheme(themeName)\n-        expected_prefix = "/++{}++{}".format(THEME_RESOURCE_NAME,\n-                                          title.replace(" ", "-"))\n+        expected_prefix = "/++{}++{}".format(\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n         self.assertEqual(theme.absolutePrefix, expected_prefix)\n \n-        expected_rules = "/++{}++{}/{}".format(THEME_RESOURCE_NAME,\n-                                           title.replace(" ", "-"),\n-                                           RULE_FILENAME)\n+        expected_rules = "/++{}++{}/{}".format(\n+            THEME_RESOURCE_NAME, title.replace(" ", "-"), RULE_FILENAME\n+        )\n         self.assertEqual(theme.rules, expected_rules)\n \n-        self.assertEqual(theme.enabled_bundles, [\'plone\'])\n-        self.assertEqual(theme.disabled_bundles, [\'foobar\'])\n+        self.assertEqual(theme.enabled_bundles, ["plone"])\n+        self.assertEqual(theme.disabled_bundles, ["foobar"])\n \n         expected_dev_css = "++{}++{}/css/barceloneta.css".format(\n-            THEME_RESOURCE_NAME, title.replace(" ", "-"))\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n         expected_prod_css = "++{}++{}/css/barceloneta.min.css".format(\n-            THEME_RESOURCE_NAME, title.replace(" ", "-"))\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n         expected_tinymce_content_css = "++{}++{}/css/barceloneta.min.css".format(\n-            THEME_RESOURCE_NAME, title.replace(" ", "-"))\n-        expected_tinymce_styles_css = (\n-            "++{}++{}/css/custom-format-styles.css".format(\n-                THEME_RESOURCE_NAME, title.replace(" ", "-"))\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n+        expected_tinymce_styles_css = "++{}++{}/css/custom-format-styles.css".format(\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n         )\n         self.assertEqual(theme.development_css, expected_dev_css)\n         self.assertEqual(theme.production_css, expected_prod_css)\n@@ -305,157 +300,138 @@ def test_createThemeFromTemplate_rel_path(self):\n         self.assertEqual(theme.tinymce_styles_css, expected_tinymce_styles_css)\n \n         expected_dev_js = "++{}++{}/script.js".format(\n-            THEME_RESOURCE_NAME, title.replace(" ", "-"))\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n         expected_prod_js = "++{}++{}/script.min.js".format(\n-            THEME_RESOURCE_NAME, title.replace(" ", "-"))\n+            THEME_RESOURCE_NAME, title.replace(" ", "-")\n+        )\n         self.assertEqual(theme.development_js, expected_dev_js)\n         self.assertEqual(theme.production_js, expected_prod_js)\n \n     def test_createThemeFromTemplate_ja_str_title(self):\n         from plone.app.theming.utils import createThemeFromTemplate\n+\n         title = "copy of test theme by \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e"\n         description = "test theme by \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e"\n         try:\n-            createThemeFromTemplate(title, description,\n-                                            baseOn="another-theme")\n+            createThemeFromTemplate(title, description, baseOn="another-theme")\n         except UnicodeEncodeError:\n             self.fail(msg="Unicode Encode Error")\n \n     def test_createThemeFromTemplate_ja_unicode_title(self):\n         from plone.app.theming.utils import createThemeFromTemplate\n+\n         title = "copy of test theme by \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e"\n         description = "test theme by \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e"\n         try:\n-            createThemeFromTemplate(title, description,\n-                                            baseOn="another-theme")\n+            createThemeFromTemplate(title, description, baseOn="another-theme")\n         except UnicodeEncodeError:\n             self.fail(msg="Unicode Encode Error")\n \n \n class TestUnit(unittest.TestCase):\n-\n     def _open_zipfile(self, filename):\n-        \'\'\' Helper that opens a zip file in our test directory\n-        \'\'\'\n-        path = os.path.join(os.path.dirname(__file__), \'zipfiles\', filename)\n-        return open(path, \'rb\')\n+        """Helper that opens a zip file in our test directory"""\n+        path = os.path.join(os.path.dirname(__file__), "zipfiles", filename)\n+        return open(path, "rb")\n \n     def test_extractThemeInfo_default_rules(self):\n-        with self._open_zipfile(\'default_rules.zip\') as fp:\n+        with self._open_zipfile("default_rules.zip") as fp:\n             zf = zipfile.ZipFile(fp)\n \n             theme = extractThemeInfo(zf)\n \n-            self.assertEqual(theme.__name__, \'default_rules\')\n-            self.assertEqual(theme.rules, \'/++theme++default_rules/rules.xml\')\n-            self.assertEqual(theme.absolutePrefix, \'/++theme++default_rules\')\n+            self.assertEqual(theme.__name__, "default_rules")\n+            self.assertEqual(theme.rules, "/++theme++default_rules/rules.xml")\n+            self.assertEqual(theme.absolutePrefix, "/++theme++default_rules")\n \n     def test_extractThemeInfo_manifest_rules(self):\n-        with self._open_zipfile(\'manifest_rules.zip\') as fp:\n+        with self._open_zipfile("manifest_rules.zip") as fp:\n             zf = zipfile.ZipFile(fp)\n \n             theme = extractThemeInfo(zf)\n \n-            self.assertEqual(theme.__name__, \'manifest_rules\')\n-            self.assertEqual(theme.rules, \'other.xml\')\n-            self.assertEqual(theme.absolutePrefix, \'/++theme++manifest_rules\')\n-            self.assertEqual(theme.title, \'Test theme\')\n+            self.assertEqual(theme.__name__, "manifest_rules")\n+            self.assertEqual(theme.rules, "other.xml")\n+            self.assertEqual(theme.absolutePrefix, "/++theme++manifest_rules")\n+            self.assertEqual(theme.title, "Test theme")\n \n     def test_extractThemeInfo_manifest_prefix(self):\n-        with self._open_zipfile(\'manifest_prefix.zip\') as fp:\n+        with self._open_zipfile("manifest_prefix.zip") as fp:\n             zf = zipfile.ZipFile(fp)\n \n             theme = extractThemeInfo(zf)\n \n-            self.assertEqual(theme.__name__, \'manifest_prefix\')\n-            self.assertEqual(\n-                theme.rules,\n-                \'/++theme++manifest_prefix/rules.xml\'\n-            )\n-            self.assertEqual(theme.absolutePrefix, \'/foo\')\n-            self.assertEqual(theme.title,  \'Test theme\')\n+            self.assertEqual(theme.__name__, "manifest_prefix")\n+            self.assertEqual(theme.rules, "/++theme++manifest_prefix/rules.xml")\n+            self.assertEqual(theme.absolutePrefix, "/foo")\n+            self.assertEqual(theme.title, "Test theme")\n \n     def test_extractThemeInfo_manifest_default_rules(self):\n-        with self._open_zipfile(\'manifest_default_rules.zip\') as fp:\n+        with self._open_zipfile("manifest_default_rules.zip") as fp:\n             zf = zipfile.ZipFile(fp)\n \n             theme = extractThemeInfo(zf)\n \n-            self.assertEqual(theme.__name__, \'manifest_default_rules\')\n-            self.assertEqual(\n-                theme.rules,\n-                \'/++theme++manifest_default_rules/rules.xml\'\n-            )\n-            self.assertEqual(\n-                theme.absolutePrefix,\n-                \'/++theme++manifest_default_rules\'\n-            )\n-            self.assertEqual(theme.title,  \'Test theme\')\n+            self.assertEqual(theme.__name__, "manifest_default_rules")\n+            self.assertEqual(theme.rules, "/++theme++manifest_default_rules/rules.xml")\n+            self.assertEqual(theme.absolutePrefix, "/++theme++manifest_default_rules")\n+            self.assertEqual(theme.title, "Test theme")\n \n     def test_extractThemeInfo_manifest_preview(self):\n-        with self._open_zipfile(\'manifest_preview.zip\') as fp:\n+        with self._open_zipfile("manifest_preview.zip") as fp:\n             zf = zipfile.ZipFile(fp)\n \n             theme = extractThemeInfo(zf)\n \n-            self.assertEqual(theme.__name__, \'manifest_preview\')\n-            self.assertEqual(\n-                theme.rules,\n-                \'/++theme++manifest_preview/rules.xml\'\n-            )\n-            self.assertEqual(\n-                theme.absolutePrefix,\n-                \'/++theme++manifest_preview\'\n-            )\n-            self.assertEqual(theme.title,  \'Test theme\')\n-            self.assertEqual(theme.preview,  \'preview.png\')\n+            self.assertEqual(theme.__name__, "manifest_preview")\n+            self.assertEqual(theme.rules, "/++theme++manifest_preview/rules.xml")\n+            self.assertEqual(theme.absolutePrefix, "/++theme++manifest_preview")\n+            self.assertEqual(theme.title, "Test theme")\n+            self.assertEqual(theme.preview, "preview.png")\n \n     def test_extractThemeInfo_manifest_default_rules_override(self):\n-        with self._open_zipfile(\'manifest_default_rules_override.zip\') as fp:\n+        with self._open_zipfile("manifest_default_rules_override.zip") as fp:\n             zf = zipfile.ZipFile(fp)\n \n             theme = extractThemeInfo(zf)\n \n-            self.assertEqual(theme.__name__, \'manifest_default_rules_override\')\n-            self.assertEqual(theme.rules, \'other.xml\')\n+            self.assertEqual(theme.__name__, "manifest_default_rules_override")\n+            self.assertEqual(theme.rules, "other.xml")\n             self.assertEqual(\n-                theme.absolutePrefix,\n-                \'/++theme++manifest_default_rules_override\'\n+                theme.absolutePrefix, "/++theme++manifest_default_rules_override"\n             )\n-            self.assertEqual(theme.title,  \'Test theme\')\n+            self.assertEqual(theme.title, "Test theme")\n \n     def test_extractThemeInfo_nodir(self):\n-        with self._open_zipfile(\'nodir.zip\') as fp:\n+        with self._open_zipfile("nodir.zip") as fp:\n             zf = zipfile.ZipFile(fp)\n             self.assertRaises(ValueError, extractThemeInfo, zf)\n \n     def test_extractThemeInfo_multiple_dir(self):\n-        with self._open_zipfile(\'multiple_dir.zip\') as fp:\n+        with self._open_zipfile("multiple_dir.zip") as fp:\n             zf = zipfile.ZipFile(fp)\n             self.assertRaises(ValueError, extractThemeInfo, zf)\n \n     def test_extractThemeInfo_ignores_dotfiles_resource_forks(self):\n-        with self._open_zipfile(\'ignores_dotfiles_resource_forks.zip\') as fp:\n+        with self._open_zipfile("ignores_dotfiles_resource_forks.zip") as fp:\n             zf = zipfile.ZipFile(fp)\n \n             theme = extractThemeInfo(zf)\n \n-            self.assertEqual(theme.__name__, \'default_rules\')\n-            self.assertEqual(theme.rules, \'/++theme++default_rules/rules.xml\')\n-            self.assertEqual(theme.absolutePrefix, \'/++theme++default_rules\')\n+            self.assertEqual(theme.__name__, "default_rules")\n+            self.assertEqual(theme.rules, "/++theme++default_rules/rules.xml")\n+            self.assertEqual(theme.absolutePrefix, "/++theme++default_rules")\n \n     def test_extractThemeInfo_with_subdirectories(self):\n-        with self._open_zipfile(\'subdirectories.zip\') as fp:\n+        with self._open_zipfile("subdirectories.zip") as fp:\n             zf = zipfile.ZipFile(fp)\n \n             theme = extractThemeInfo(zf)\n \n-            self.assertEqual(theme.__name__, \'subdirectories\')\n-            self.assertEqual(\n-                theme.rules,\n-                \'/++theme++subdirectories/rules.xml\'\n-            )\n-            self.assertEqual(theme.absolutePrefix, \'/++theme++subdirectories\')\n+            self.assertEqual(theme.__name__, "subdirectories")\n+            self.assertEqual(theme.rules, "/++theme++subdirectories/rules.xml")\n+            self.assertEqual(theme.absolutePrefix, "/++theme++subdirectories")\n \n \n class TestAttackVector(unittest.TestCase):\n@@ -563,9 +539,7 @@ def test_theme_python_protocol(self):\n         # Since our example rules file is in a Python package,\n         # we can use the python resolver to access it.\n         # I don\'t think we can avoid this.\n-        self.new_theme(\n-            "python://plone.app.theming/tests/" + PACKAGE_THEME_FILENAME\n-        )\n+        self.new_theme("python://plone.app.theming/tests/" + PACKAGE_THEME_FILENAME)\n         with open(PACKAGE_THEME) as myfile:\n             contents = myfile.read()\n         browser = self.get_anon_browser()\ndiff --git a/src/plone/app/theming/tests/theme.html b/src/plone/app/theming/tests/theme.html\nindex 03c0b1c7..f2350c96 100644\n--- a/src/plone/app/theming/tests/theme.html\n+++ b/src/plone/app/theming/tests/theme.html\n@@ -1,9 +1,9 @@\n <html>\n-<head>\n+  <head>\n     <title>Title</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n     <h1 id="pageTitle">Page title</h1>\n     <p>This is the theme.</p>\n     <img src="relative.jpg" />\n-</body>\n+  </body></html>\ndiff --git a/src/plone/app/theming/tests/two.html b/src/plone/app/theming/tests/two.html\nindex bd004256..df515116 100644\n--- a/src/plone/app/theming/tests/two.html\n+++ b/src/plone/app/theming/tests/two.html\n@@ -1,7 +1,7 @@\n <html>\n-<head>\n+  <head>\n     <title>Title</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n     <div id="content">Number two</div>\n-</body>\n+  </body></html>\ndiff --git a/src/plone/app/theming/theme.py b/src/plone/app/theming/theme.py\nindex f18be8e4..14e7cff3 100644\n--- a/src/plone/app/theming/theme.py\n+++ b/src/plone/app/theming/theme.py\n@@ -4,8 +4,7 @@\n \n @implementer(ITheme)\n class Theme:\n-    """A theme, loaded from a resource directory\n-    """\n+    """A theme, loaded from a resource directory"""\n \n     def __init__(\n         self,\n@@ -19,14 +18,13 @@ def __init__(\n         preview=None,\n         enabled_bundles=[],\n         disabled_bundles=[],\n-        development_css=\'\',\n-        development_js=\'\',\n-        production_css=\'\',\n-        production_js=\'\',\n-        tinymce_content_css=\'\',\n-        tinymce_styles_css=\'\'\n+        development_css="",\n+        development_js="",\n+        production_css="",\n+        production_js="",\n+        tinymce_content_css="",\n+        tinymce_styles_css="",\n     ):\n-\n         self.__name__ = name\n         self.rules = rules\n         self.title = title\ndiff --git a/src/plone/app/theming/themes.zcml b/src/plone/app/theming/themes.zcml\nindex bdadcf59..929b2102 100644\n--- a/src/plone/app/theming/themes.zcml\n+++ b/src/plone/app/theming/themes.zcml\n@@ -1,11 +1,12 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:plone="http://namespaces.plone.org/plone">\n+    xmlns:plone="http://namespaces.plone.org/plone"\n+    >\n \n-    <plone:static\n-        type="theme"\n-        name="template"\n-        directory="themes/template"\n-        />\n+  <plone:static\n+      directory="themes/template"\n+      name="template"\n+      type="theme"\n+      />\n \n </configure>\ndiff --git a/src/plone/app/theming/themes/template/index.html b/src/plone/app/theming/themes/template/index.html\nindex f32e76ce..9be04211 100644\n--- a/src/plone/app/theming/themes/template/index.html\n+++ b/src/plone/app/theming/themes/template/index.html\n@@ -1,11 +1,11 @@\n <!DOCTYPE html>\n <html>\n-<head>\n+  <head>\n     <title>Theme template</title>\n-</head>\n-<body>\n+  </head>\n+  <body>\n \n     <p>Replace this template with your own theme</p>\n \n-</body>\n-</html>\n\\ No newline at end of file\n+  </body>\n+</html>\ndiff --git a/src/plone/app/theming/themes/template/rules.xml b/src/plone/app/theming/themes/template/rules.xml\nindex 0e8da005..8f57b7e1 100644\n--- a/src/plone/app/theming/themes/template/rules.xml\n+++ b/src/plone/app/theming/themes/template/rules.xml\n@@ -1,32 +1,42 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<rules\n-    xmlns="http://namespaces.plone.org/diazo"\n-    xmlns:css="http://namespaces.plone.org/diazo/css"\n-    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n-\n-    <!-- Apply the following rules to standard Plone pages -->\n-    <rules css:if-content="#visual-portal-wrapper">\n-\n-        <theme href="index.html" />\n-\n-        <!-- Replace title with Plone\'s page title  -->\n-        <replace css:theme="html head title" css:content="html head title" />\n-\n-        <!-- Copy base tag from Plone -->\n-        <before css:theme-children="html head" css:content="html head base" />\n-\n-        <!-- Copy link, style, meta tags from Plone head -->\n-        <after css:theme-children="html head"\n-               content="/html/head/link | /html/head/style | /html/head/meta" />\n-\n-        <!-- merge classes from Plone body with theme body -->\n-        <merge attributes="class" css:theme="body" css:content="body" />\n-\n-        <!-- Copy script tags from Plone head to end of body -->\n-        <after css:theme-children="html body" css:content="html head script" />\n-\n-        <!-- Insert your own rules here -->\n-\n-    </rules>\n+<?xml version="1.0" encoding="utf-8"?>\n+<rules xmlns="http://namespaces.plone.org/diazo"\n+       xmlns:css="http://namespaces.plone.org/diazo/css"\n+       xmlns:xsl="http://www.w3.org/1999/XSL/Transform"\n+>\n+\n+  <!-- Apply the following rules to standard Plone pages -->\n+  <rules css:if-content="#visual-portal-wrapper">\n+\n+    <theme href="index.html" />\n+\n+    <!-- Replace title with Plone\'s page title  -->\n+    <replace css:content="html head title"\n+             css:theme="html head title"\n+    />\n+\n+    <!-- Copy base tag from Plone -->\n+    <before css:content="html head base"\n+            css:theme-children="html head"\n+    />\n+\n+    <!-- Copy link, style, meta tags from Plone head -->\n+    <after content="/html/head/link | /html/head/style | /html/head/meta"\n+           css:theme-children="html head"\n+    />\n+\n+    <!-- merge classes from Plone body with theme body -->\n+    <merge attributes="class"\n+           css:content="body"\n+           css:theme="body"\n+    />\n+\n+    <!-- Copy script tags from Plone head to end of body -->\n+    <after css:content="html head script"\n+           css:theme-children="html body"\n+    />\n+\n+    <!-- Insert your own rules here -->\n+\n+  </rules>\n \n </rules>\ndiff --git a/src/plone/app/theming/transform.py b/src/plone/app/theming/transform.py\nindex 0caf0690..eb388d5c 100644\n--- a/src/plone/app/theming/transform.py\n+++ b/src/plone/app/theming/transform.py\n@@ -20,7 +20,7 @@\n # Disable theming of ZMI\n patch_zmi()\n \n-LOGGER = logging.getLogger(\'plone.app.theming\')\n+LOGGER = logging.getLogger("plone.app.theming")\n \n \n @implementer(ITransform)\n@@ -37,24 +37,24 @@ def __init__(self, published, request):\n         self.request = request\n \n     def debug_theme(self):\n-        \'\'\' Check if the theme should be debugged\n+        """Check if the theme should be debugged\n         We will debug the theme\n         when we have a truish diazo.debug parameter in the request\n-        \'\'\'\n+        """\n         if not getConfiguration().debug_mode:\n             return False\n-        diazo_debug = self.request.get(\'diazo.debug\', \'\').lower()\n-        return diazo_debug in (\'1\', \'y\', \'yes\', \'t\', \'true\')\n+        diazo_debug = self.request.get("diazo.debug", "").lower()\n+        return diazo_debug in ("1", "y", "yes", "t", "true")\n \n     def develop_theme(self):\n-        \'\'\' Check if the theme should be recompiled\n+        """Check if the theme should be recompiled\n         every time the transform is applied\n-        \'\'\'\n+        """\n         if not getConfiguration().debug_mode:\n             return False\n         if self.debug_theme():\n             return True\n-        if environ.get(\'DIAZO_ALWAYS_CACHE_RULES\'):\n+        if environ.get("DIAZO_ALWAYS_CACHE_RULES"):\n             return False\n         return True\n \n@@ -93,7 +93,7 @@ def setupTransform(self, runtrace=False):\n                 absolutePrefix,\n                 readNetwork,\n                 parameterExpressions,\n-                runtrace=runtrace\n+                runtrace=runtrace,\n             )\n             if transform is None:\n                 return None\n@@ -107,13 +107,16 @@ def getSettings(self):\n         return theming_policy(self.request).getSettings()\n \n     def parseTree(self, result):\n-        contentType = self.request.response.getHeader(\'Content-Type\')\n-        if contentType is None or not contentType.startswith(\'text/html\'):\n+        contentType = self.request.response.getHeader("Content-Type")\n+        if contentType is None or not contentType.startswith("text/html"):\n             return None\n \n-        contentEncoding = self.request.response.getHeader(\'Content-Encoding\')\n-        if contentEncoding \\\n-           and contentEncoding in (\'zip\', \'deflate\', \'compress\',):\n+        contentEncoding = self.request.response.getHeader("Content-Encoding")\n+        if contentEncoding and contentEncoding in (\n+            "zip",\n+            "deflate",\n+            "compress",\n+        ):\n             return None\n \n         try:\n@@ -138,8 +141,7 @@ def transformUnicode(self, result, encoding):\n         return self.transformIterable([result], encoding)\n \n     def transformIterable(self, result, encoding):\n-        """Apply the transform if required\n-        """\n+        """Apply the transform if required"""\n         # Obtain settings. Do nothing if not found\n         policy = theming_policy(self.request)\n         if not policy.isThemeEnabled():\n@@ -160,8 +162,8 @@ def transformIterable(self, result, encoding):\n \n             if settings.doctype:\n                 result.doctype = settings.doctype\n-                if not result.doctype.endswith(\'\\n\'):\n-                    result.doctype += \'\\n\'\n+                if not result.doctype.endswith("\\n"):\n+                    result.doctype += "\\n"\n \n             transform = self.setupTransform(runtrace=runtrace)\n             if transform is None:\n@@ -173,10 +175,7 @@ def transformIterable(self, result, encoding):\n \n             parameterExpressions = settings.parameterExpressions or {}\n             params = prepareThemeParameters(\n-                findContext(self.request),\n-                self.request,\n-                parameterExpressions,\n-                cache\n+                findContext(self.request), self.request, parameterExpressions, cache\n             )\n \n             transformed = transform(result.tree, **params)\n@@ -185,25 +184,26 @@ def transformIterable(self, result, encoding):\n                 # Transformed worked, swap content with result\n                 result.tree = transformed\n         except etree.LxmlError as e:\n-            if not(debug_mode):\n+            if not (debug_mode):\n                 raise\n             error_log = e.error_log\n             runtrace = True\n \n         if runtrace:\n             from diazo.runtrace import generate_debug_html\n+\n             # Add debug information to end of body\n-            body = result.tree.xpath(\'/html/body\')[0]\n-            debug_url = findContext(\n-                self.request\n-            ).portal_url() + \'/++resource++diazo-debug\'\n+            body = result.tree.xpath("/html/body")[0]\n+            debug_url = (\n+                findContext(self.request).portal_url() + "/++resource++diazo-debug"\n+            )\n             body.insert(\n                 -1,\n                 generate_debug_html(\n                     debug_url,\n                     rules=settings.rules,\n-                    rules_parser=getParser(\'rules\', settings.readNetwork),\n+                    rules_parser=getParser("rules", settings.readNetwork),\n                     error_log=error_log,\n-                )\n+                ),\n             )\n         return result\ndiff --git a/src/plone/app/theming/traversal.py b/src/plone/app/theming/traversal.py\nindex bf76f6a5..6923887c 100644\n--- a/src/plone/app/theming/traversal.py\n+++ b/src/plone/app/theming/traversal.py\n@@ -9,7 +9,7 @@\n class ThemeTraverser(ResourceTraverser):\n     """The theme traverser.\n \n-    Allows traveral to /++theme++<name> using ``plone.resource`` to fetch\n+    Allows traversal to /++theme++<name> using ``plone.resource`` to fetch\n     things stored either on the filesystem or in the ZODB.\n     """\n \n@@ -22,7 +22,7 @@ def current_theme(self):\n         return theming_policy(self.request).getCurrentTheme()\n \n     def traverse(self, name, remaining):\n-        if name == \'\':\n+        if name == "":\n             name = self.current_theme()\n \n         # Note: also fixes possible unicode problems\ndiff --git a/src/plone/app/theming/upgrade.py b/src/plone/app/theming/upgrade.py\nindex c136e2e0..616eb64a 100644\n--- a/src/plone/app/theming/upgrade.py\n+++ b/src/plone/app/theming/upgrade.py\n@@ -6,14 +6,10 @@\n \n def update_registry(context, logger=None):\n     # Run the registry.xml step as that may have defined new attributes\n-    setup = getToolByName(context, \'portal_setup\')\n-    setup.runImportStepFromProfile(PROFILE_ID, \'plone.app.registry\')\n+    setup = getToolByName(context, "portal_setup")\n+    setup.runImportStepFromProfile(PROFILE_ID, "plone.app.registry")\n \n \n def update_controlpanel(context, logger=None):\n-    setup = getToolByName(context, \'portal_setup\')\n-    setup.runImportStepFromProfile(\n-        PROFILE_ID,\n-        \'controlpanel\',\n-        run_dependencies=False\n-    )\n+    setup = getToolByName(context, "portal_setup")\n+    setup.runImportStepFromProfile(PROFILE_ID, "controlpanel", run_dependencies=False)\ndiff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py\nindex 9abb15a5..27a9198d 100644\n--- a/src/plone/app/theming/utils.py\n+++ b/src/plone/app/theming/utils.py\n@@ -12,6 +12,8 @@\n from plone.app.theming.plugins.utils import getPlugins\n from plone.app.theming.plugins.utils import getPluginSettings\n from plone.app.theming.theme import Theme\n+from plone.base.utils import safe_bytes\n+from plone.base.utils import safe_text\n from plone.i18n.normalizer.interfaces import IURLNormalizer\n from plone.resource.interfaces import IResourceDirectory\n from plone.resource.manifest import extractManifestFromZipFile\n@@ -25,8 +27,6 @@\n from plone.subrequest import subrequest\n from Products.CMFCore.interfaces import IContentish\n from Products.CMFCore.interfaces import ISiteRoot\n-from plone.base.utils import safe_bytes\n-from plone.base.utils import safe_text\n from Products.PageTemplates.Expressions import getEngine\n from urllib.parse import urlsplit\n from zope.component import getUtility\n@@ -39,8 +39,7 @@\n import pkg_resources\n \n \n-\n-LOGGER = logging.getLogger(\'plone.app.theming\')\n+LOGGER = logging.getLogger("plone.app.theming")\n \n \n @implementer(INoRequest)\n@@ -65,8 +64,9 @@ class FailingFileProtocolResolver(etree.Resolver):\n     Note: an earlier version only checked for "file://", not "file:",\n     and did not catch relative paths.\n     """\n+\n     def resolve(self, system_url, public_id, context):\n-        if system_url.startswith(\'file:\') and system_url != \'file:///__diazo__\':\n+        if system_url.startswith("file:") and system_url != "file:///__diazo__":\n             # The error will be caught by lxml and we only see this in the traceback:\n             # XIncludeError: could not load <system_url>, and no fallback was found\n             raise ValueError("File protocol access not allowed: \'%s\'" % system_url)\n@@ -104,6 +104,7 @@ class FailingFileSystemResolver(etree.Resolver):\n     our resolver should return nothing.\n     Then the InternalResolver or other resolvers can have a go.\n     """\n+\n     def resolve(self, system_url, public_id, context):\n         if system_url and os.path.exists(system_url):\n             # The error will be caught by lxml and we only see this in the traceback:\n@@ -112,19 +113,18 @@ def resolve(self, system_url, public_id, context):\n \n \n class NetworkResolver(etree.Resolver):\n-    """Resolver for network urls\n-    """\n+    """Resolver for network urls"""\n+\n     def resolve(self, system_url, public_id, context):\n-        if \'://\' in system_url and system_url != \'file:///__diazo__\':\n+        if "://" in system_url and system_url != "file:///__diazo__":\n             return self.resolve_filename(system_url, context)\n \n \n class PythonResolver(etree.Resolver):\n-    """Resolver for python:// paths\n-    """\n+    """Resolver for python:// paths"""\n \n     def resolve(self, system_url, public_id, context):\n-        if not system_url.lower().startswith(\'python://\'):\n+        if not system_url.lower().startswith("python://"):\n             return None\n         filename = resolvePythonURL(system_url)\n         return self.resolve_filename(filename, context)\n@@ -134,9 +134,9 @@ def resolvePythonURL(url):\n     """Resolve the python resource url to it\'s path\n     This can resolve python://dotted.package.name/file/path URLs to paths.\n     """\n-    assert url.lower().startswith(\'python://\')\n+    assert url.lower().startswith("python://")\n     spec = url[9:]\n-    package, resource_name = spec.split(\'/\', 1)\n+    package, resource_name = spec.split("/", 1)\n     return pkg_resources.resource_filename(package, resource_name)\n \n \n@@ -152,89 +152,84 @@ def resolve(self, system_url, public_id, context):\n             return None\n \n         # Ignore URLs with a scheme\n-        if \'://\' in system_url:\n+        if "://" in system_url:\n             return None\n \n         # Ignore the special \'diazo:\' resolvers\n-        if system_url.startswith(\'diazo:\'):\n+        if system_url.startswith("diazo:"):\n             return None\n \n         context = findContext(request)\n-        portalState = queryMultiAdapter(\n-            (context, request), name="plone_portal_state")\n+        portalState = queryMultiAdapter((context, request), name="plone_portal_state")\n \n         if portalState is None:\n             root = None\n         else:\n             root = portalState.navigation_root()\n \n-        if not system_url.startswith(\'/\'):  # only for relative urls\n+        if not system_url.startswith("/"):  # only for relative urls\n             root_path = root.getPhysicalPath()\n-            context_path = context.getPhysicalPath()[len(root_path):]\n+            context_path = context.getPhysicalPath()[len(root_path) :]\n             if len(context_path) == 0:\n-                system_url = \'/\' + system_url\n+                system_url = "/" + system_url\n             else:\n-                system_url = \'/{:s}/{:s}\'.format(\n-                    \'/\'.join(context_path),\n-                    system_url\n-                )\n+                system_url = "/{:s}/{:s}".format("/".join(context_path), system_url)\n \n         response = subrequest(system_url, root=root)\n         if response.status != 200:\n             LOGGER.error(f"Couldn\'t resolve {system_url:s}")\n             return None\n         result = response.getBody()\n-        content_type = response.headers.get(\'content-type\')\n+        content_type = response.headers.get("content-type")\n         encoding = None\n-        if content_type is not None and \';\' in content_type:\n-            content_type, encoding = content_type.split(\';\', 1)\n+        if content_type is not None and ";" in content_type:\n+            content_type, encoding = content_type.split(";", 1)\n         if encoding is None:\n-            encoding = \'utf-8\'\n+            encoding = "utf-8"\n         else:\n             # e.g. charset=utf-8\n-            encoding = encoding.split(\'=\', 1)[1].strip()\n+            encoding = encoding.split("=", 1)[1].strip()\n         result = result.decode(encoding)\n-        if content_type == \'text/html\':\n+        if content_type == "text/html":\n             # Note: at first the xmlcharrefreplace was only done on Python 2,\n             # but Python 3 needs it as well, but only for html.\n             # See https://github.com/plone/Products.CMFPlone/issues/3068\n-            result = result.encode(\'ascii\', \'xmlcharrefreplace\')\n-\n-        if content_type in (\'text/javascript\', \'application/x-javascript\'):\n-            result = \'\'.join([\n-                \'<html><body><script type="text/javascript">\',\n-                result,\n-                \'</script></body></html>\',\n-                ])\n-        elif content_type == \'text/css\':\n-            result = \'\'.join([\n-                \'<html><body><style type="text/css">\',\n-                result,\n-                \'</style></body></html>\',\n-                ])\n+            result = result.encode("ascii", "xmlcharrefreplace")\n+\n+        if content_type in ("text/javascript", "application/x-javascript"):\n+            result = "".join(\n+                [\n+                    \'<html><body><script type="text/javascript">\',\n+                    result,\n+                    "</script></body></html>",\n+                ]\n+            )\n+        elif content_type == "text/css":\n+            result = "".join(\n+                [\n+                    \'<html><body><style type="text/css">\',\n+                    result,\n+                    "</style></body></html>",\n+                ]\n+            )\n \n         return self.resolve_string(result, context)\n \n \n def getPortal():\n-    """Return the portal object\n-    """\n+    """Return the portal object"""\n     request = getRequest()\n     context = findContext(request)\n-    portalState = queryMultiAdapter(\n-        (context, request),\n-        name="plone_portal_state"\n-    )\n+    portalState = queryMultiAdapter((context, request), name="plone_portal_state")\n     if portalState is None:\n         return None\n     return portalState.portal()\n \n \n def findContext(request):\n-    """Find the context from the request\n-    """\n-    published = request.get(\'PUBLISHED\', None)\n-    context = getattr(published, \'__parent__\', None)\n+    """Find the context from the request"""\n+    published = request.get("PUBLISHED", None)\n+    context = getattr(published, "__parent__", None)\n     if context is not None:\n         return context\n \n@@ -246,18 +241,17 @@ def findContext(request):\n \n \n def findPathContext(path):\n-    """Find context given by physical path\n-    """\n+    """Find context given by physical path"""\n     portal = getPortal()\n \n-    if path in (None, \'\', \'/\'):\n+    if path in (None, "", "/"):\n         return portal\n \n-    seq = path.strip(\'/\').split(\'/\')\n+    seq = path.strip("/").split("/")\n     while seq:\n         try:\n-            obj = portal.restrictedTraverse(\'/\'.join(seq))\n-        except:\n+            obj = portal.restrictedTraverse("/".join(seq))\n+        except Exception:\n             seq.pop()\n         else:\n             if IContentish.providedBy(obj):\n@@ -267,15 +261,14 @@ def findPathContext(path):\n \n \n def expandAbsolutePrefix(prefix):\n-    """Prepend the Plone site URL to the prefix if it starts with /\n-    """\n-    if not prefix or not prefix.startswith(\'/\'):\n+    """Prepend the Plone site URL to the prefix if it starts with /"""\n+    if not prefix or not prefix.startswith("/"):\n         return prefix\n     portal = getPortal()\n     if portal is None:\n-        return \'\'\n+        return ""\n     path = portal.absolute_url_path()\n-    if path and path.endswith(\'/\'):\n+    if path and path.endswith("/"):\n         path = path[:-1]\n     return path + prefix\n \n@@ -297,18 +290,16 @@ def createExpressionContext(context, request):\n     expressions.\n     """\n \n-    contextState = queryMultiAdapter(\n-        (context, request), name="plone_context_state")\n-    portalState = queryMultiAdapter(\n-        (context, request), name="plone_portal_state")\n+    contextState = queryMultiAdapter((context, request), name="plone_context_state")\n+    portalState = queryMultiAdapter((context, request), name="plone_portal_state")\n \n     data = {\n-        \'context\': context,\n-        \'request\': request,\n-        \'portal\': portalState.portal(),\n-        \'context_state\': contextState,\n-        \'portal_state\': portalState,\n-        \'nothing\': None,\n+        "context": context,\n+        "request": request,\n+        "portal": portalState.portal(),\n+        "context_state": contextState,\n+        "portal_state": portalState,\n+        "nothing": None,\n     }\n \n     return getEngine().getContext(data)\n@@ -325,8 +316,7 @@ def isValidThemeDirectory(directory):\n     """Determine if the given plone.resource directory is a valid theme\n     directory\n     """\n-    return directory.isFile(MANIFEST_FILENAME) \\\n-        or directory.isFile(RULE_FILENAME)\n+    return directory.isFile(MANIFEST_FILENAME) or directory.isFile(RULE_FILENAME)\n \n \n def extractThemeInfo(zipfile, checkRules=True):\n@@ -336,19 +326,14 @@ def extractThemeInfo(zipfile, checkRules=True):\n     Set checkRules=False to disable the rules check.\n     """\n \n-    name, manifest = extractManifestFromZipFile(\n-        zipfile,\n-        MANIFEST_FORMAT\n-    )\n+    name, manifest = extractManifestFromZipFile(zipfile, MANIFEST_FORMAT)\n     if not manifest:\n         manifest = {}\n-    rules = manifest.get(\'rules\', None)\n+    rules = manifest.get("rules", None)\n     if rules is None:\n         if checkRules:\n             try:\n-                zipfile.getinfo(\n-                    f"{name:s}/{RULE_FILENAME:s}"\n-                )\n+                zipfile.getinfo(f"{name:s}/{RULE_FILENAME:s}")\n             except KeyError:\n                 raise ValueError("Could not find theme name and rules file")\n     return getTheme(name, manifest)\n@@ -357,45 +342,42 @@ def extractThemeInfo(zipfile, checkRules=True):\n def getTheme(name, manifest=None, resources=None):\n     if manifest is None:\n         if resources is None:\n-            resources = getAllResources(\n-                MANIFEST_FORMAT,\n-                filter=isValidThemeDirectory\n-            )\n+            resources = getAllResources(MANIFEST_FORMAT, filter=isValidThemeDirectory)\n         if name not in resources:\n             return None\n         manifest = resources[name] or {}\n \n-    title = manifest.get(\'title\', None)\n+    title = manifest.get("title", None)\n     if title is None:\n-        title = name.capitalize().replace(\'-\', \' \').replace(\'.\', \' \')\n-    description = manifest.get(\'description\', None)\n-    rules = manifest.get(\'rules\', None)\n+        title = name.capitalize().replace("-", " ").replace(".", " ")\n+    description = manifest.get("description", None)\n+    rules = manifest.get("rules", None)\n     if rules is None:\n         rules = "/++{:s}++{:s}/{:s}".format(\n             THEME_RESOURCE_NAME,\n             name,\n             RULE_FILENAME,\n         )\n-    prefix = manifest.get(\'prefix\', None)\n+    prefix = manifest.get("prefix", None)\n     if prefix is None:\n         prefix = f"/++{THEME_RESOURCE_NAME:s}++{name:s}"\n-    params = manifest.get(\'parameters\', None) or {}\n-    doctype = manifest.get(\'doctype\', None) or ""\n-    preview = manifest.get(\'preview\', None)\n-    enabled_bundles = manifest.get(\'enabled-bundles\', None) or \'\'\n-    enabled_bundles = enabled_bundles.split(\',\') if enabled_bundles else []\n-    disabled_bundles = manifest.get(\'disabled-bundles\', None) or \'\'\n-    disabled_bundles = disabled_bundles.split(\',\') if disabled_bundles else []\n-    development_css = manifest.get(\'development-css\', None) or \'\'\n-    development_js = manifest.get(\'development-js\', None) or \'\'\n-    production_css = manifest.get(\'production-css\', None) or \'\'\n-    production_js = manifest.get(\'production-js\', None) or \'\'\n-    tinymce_content_css = manifest.get(\'tinymce-content-css\', None) or \'\'\n-    tinymce_styles_css = manifest.get(\'tinymce-styles-css\', None) or \'\'\n+    params = manifest.get("parameters", None) or {}\n+    doctype = manifest.get("doctype", None) or ""\n+    preview = manifest.get("preview", None)\n+    enabled_bundles = manifest.get("enabled-bundles", None) or ""\n+    enabled_bundles = enabled_bundles.split(",") if enabled_bundles else []\n+    disabled_bundles = manifest.get("disabled-bundles", None) or ""\n+    disabled_bundles = disabled_bundles.split(",") if disabled_bundles else []\n+    development_css = manifest.get("development-css", None) or ""\n+    development_js = manifest.get("development-js", None) or ""\n+    production_css = manifest.get("production-css", None) or ""\n+    production_js = manifest.get("production-js", None) or ""\n+    tinymce_content_css = manifest.get("tinymce-content-css", None) or ""\n+    tinymce_styles_css = manifest.get("tinymce-styles-css", None) or ""\n     if isinstance(rules, bytes):\n-        rules = rules.decode(\'utf-8\')\n+        rules = rules.decode("utf-8")\n     if isinstance(prefix, bytes):\n-        prefix = prefix.decode(\'utf-8\')\n+        prefix = prefix.decode("utf-8")\n     return Theme(\n         name,\n         rules,\n@@ -412,40 +394,41 @@ def getTheme(name, manifest=None, resources=None):\n         production_css=production_css,\n         production_js=production_js,\n         tinymce_content_css=tinymce_content_css,\n-        tinymce_styles_css=tinymce_styles_css\n+        tinymce_styles_css=tinymce_styles_css,\n     )\n \n \n def getAvailableThemes():\n-    """Get a list of all ITheme\'s available in resource directories.\n-    """\n+    """Get a list of all ITheme\'s available in resource directories."""\n     resources = getThemeResources(MANIFEST_FORMAT, filter=isValidThemeDirectory)\n     themes = []\n     for theme in resources:\n-        themes.append(getTheme(theme[\'name\'], theme))\n+        themes.append(getTheme(theme["name"], theme))\n \n     themes.sort(key=lambda x: safe_text(x.title))\n     return themes\n \n-def getThemeResources(format, defaults=None, filter=None, manifestFilename=MANIFEST_FILENAME):\n \n+def getThemeResources(\n+    format, defaults=None, filter=None, manifestFilename=MANIFEST_FILENAME\n+):\n     resources = []\n \n-    for directory in iterDirectoriesOfType(format.resourceType, filter_duplicates=False):\n-\n+    for directory in iterDirectoriesOfType(\n+        format.resourceType, filter_duplicates=False\n+    ):\n         if filter is not None and not filter(directory):\n             continue\n \n         name = directory.__name__\n \n         if directory.isFile(manifestFilename):\n-\n             manifest = directory.openFile(manifestFilename)\n             try:\n                 theme = getManifest(manifest, format, defaults)\n-                theme[\'name\'] = name\n+                theme["name"] = name\n                 resources.append(theme)\n-            except:\n+            except Exception:\n                 LOGGER.exception("Unable to read manifest for theme directory %s", name)\n             finally:\n                 manifest.close()\n@@ -454,8 +437,7 @@ def getThemeResources(format, defaults=None, filter=None, manifestFilename=MANIF\n \n \n def getThemeFromResourceDirectory(resourceDirectory):\n-    """Return a Theme object from a resource directory\n-    """\n+    """Return a Theme object from a resource directory"""\n     name = resourceDirectory.__name__\n     if resourceDirectory.isFile(MANIFEST_FILENAME):\n         with resourceDirectory.openFile(MANIFEST_FILENAME) as manifest_fp:\n@@ -467,8 +449,7 @@ def getThemeFromResourceDirectory(resourceDirectory):\n \n \n def getZODBThemes():\n-    """Get a list of ITheme\'s stored in the ZODB.\n-    """\n+    """Get a list of ITheme\'s stored in the ZODB."""\n \n     resources = getZODBResources(MANIFEST_FORMAT, filter=isValidThemeDirectory)\n     themes = []\n@@ -480,20 +461,17 @@ def getZODBThemes():\n \n \n def getCurrentTheme():\n-    """Get the name of the currently enabled theme\n-    """\n+    """Get the name of the currently enabled theme"""\n     return theming_policy().getCurrentTheme()\n \n \n def isThemeEnabled(request, settings=None):\n-    """Determine if a theme is enabled for the given request\n-    """\n+    """Determine if a theme is enabled for the given request"""\n     return theming_policy(request).isThemeEnabled(settings)\n \n \n def applyTheme(theme):\n-    """Apply an ITheme\n-    """\n+    """Apply an ITheme"""\n     # on write, force using default policy\n     policy = IThemingPolicy(NoRequest())\n     settings = policy.getSettings()\n@@ -504,14 +482,12 @@ def applyTheme(theme):\n     currentTheme = policy.getCurrentTheme()\n \n     if currentTheme is not None:\n-        themeDirectory = queryResourceDirectory(\n-            THEME_RESOURCE_NAME, currentTheme)\n+        themeDirectory = queryResourceDirectory(THEME_RESOURCE_NAME, currentTheme)\n         if themeDirectory is not None:\n             plugins = getPlugins()\n             pluginSettings = getPluginSettings(themeDirectory, plugins)\n \n     if theme is None:\n-\n         settings.currentTheme = None\n         settings.rules = None\n         settings.absolutePrefix = None\n@@ -520,19 +496,17 @@ def applyTheme(theme):\n \n         if pluginSettings is not None:\n             for name, plugin in plugins:\n-                plugin.onDisabled(currentTheme, pluginSettings[name],\n-                                  pluginSettings)\n+                plugin.onDisabled(currentTheme, pluginSettings[name], pluginSettings)\n \n     else:\n-\n         if not isinstance(theme.rules, str):\n-            theme.rules = theme.rules.decode(\'utf-8\')\n+            theme.rules = theme.rules.decode("utf-8")\n \n         if not isinstance(theme.absolutePrefix, str):\n-            theme.absolutePrefix = theme.absolutePrefix.decode(\'utf-8\')\n+            theme.absolutePrefix = theme.absolutePrefix.decode("utf-8")\n \n         if not isinstance(theme.__name__, str):\n-            theme.__name__ = theme.__name__.decode(\'utf-8\')\n+            theme.__name__ = theme.__name__.decode("utf-8")\n \n         settings.currentTheme = theme.__name__\n         settings.rules = theme.rules\n@@ -542,24 +516,21 @@ def applyTheme(theme):\n \n         if pluginSettings is not None:\n             for name, plugin in plugins:\n-                plugin.onDisabled(currentTheme, pluginSettings[name],\n-                                  pluginSettings)\n+                plugin.onDisabled(currentTheme, pluginSettings[name], pluginSettings)\n \n         currentTheme = settings.currentTheme\n-        themeDirectory = queryResourceDirectory(\n-            THEME_RESOURCE_NAME, currentTheme)\n+        themeDirectory = queryResourceDirectory(THEME_RESOURCE_NAME, currentTheme)\n         if themeDirectory is not None:\n             plugins = getPlugins()\n             pluginSettings = getPluginSettings(themeDirectory, plugins)\n \n         if pluginSettings is not None:\n             for name, plugin in plugins:\n-                plugin.onEnabled(currentTheme, pluginSettings[name],\n-                                 pluginSettings)\n+                plugin.onEnabled(currentTheme, pluginSettings[name], pluginSettings)\n         policy.set_theme(currentTheme, theme)\n \n \n-def createThemeFromTemplate(title, description, baseOn=\'template\'):\n+def createThemeFromTemplate(title, description, baseOn="template"):\n     """Create a new theme from the given title and description based on\n     another theme resource directory\n     """\n@@ -588,36 +559,41 @@ def createThemeFromTemplate(title, description, baseOn=\'template\'):\n             fp.close()\n         manifest.read_string(safe_text(data))\n \n-    if not manifest.has_section(\'theme\'):\n-        manifest.add_section(\'theme\')\n+    if not manifest.has_section("theme"):\n+        manifest.add_section("theme")\n \n-    manifest.set(\'theme\', \'title\', title)\n-    manifest.set(\'theme\', \'description\', description)\n+    manifest.set("theme", "title", title)\n+    manifest.set("theme", "description", description)\n \n-    if manifest.has_option(\'theme\', \'prefix\'):\n+    if manifest.has_option("theme", "prefix"):\n         prefix = f"/++{THEME_RESOURCE_NAME}++{themeName}"\n-        manifest.set(\'theme\', \'prefix\', prefix)\n-\n-    if manifest.has_option(\'theme\', \'rules\'):\n-        rule = manifest.get(\'theme\', \'rules\')\n-        rule_file_name = rule.split(\'/\')[-1]  # extract real rules file name\n-        rules = "/++{}++{}/{}".format(THEME_RESOURCE_NAME, themeName,\n-                                   rule_file_name)\n-        manifest.set(\'theme\', \'rules\', rules)\n-\n-    paths_to_fix = [\'development-css\', \'production-css\', \'tinymce-content-css\',\n-                    \'tinymce-styles-css\', \'development-js\', \'production-js\']\n+        manifest.set("theme", "prefix", prefix)\n+\n+    if manifest.has_option("theme", "rules"):\n+        rule = manifest.get("theme", "rules")\n+        rule_file_name = rule.split("/")[-1]  # extract real rules file name\n+        rules = f"/++{THEME_RESOURCE_NAME}++{themeName}/{rule_file_name}"\n+        manifest.set("theme", "rules", rules)\n+\n+    paths_to_fix = [\n+        "development-css",\n+        "production-css",\n+        "tinymce-content-css",\n+        "tinymce-styles-css",\n+        "development-js",\n+        "production-js",\n+    ]\n     for var_path in paths_to_fix:\n-        if not manifest.has_option(\'theme\', var_path):\n+        if not manifest.has_option("theme", var_path):\n             continue\n-        val = manifest.get(\'theme\', var_path)\n+        val = manifest.get("theme", var_path)\n         if not val:\n             continue\n-        template_prefix = f\'++{THEME_RESOURCE_NAME}++{baseOn}/\'\n+        template_prefix = f"++{THEME_RESOURCE_NAME}++{baseOn}/"\n         if template_prefix in val:\n             # okay, fix\n-            val = val.replace(template_prefix, f\'++{THEME_RESOURCE_NAME}++{themeName}/\')\n-            manifest.set(\'theme\', var_path, val)\n+            val = val.replace(template_prefix, f"++{THEME_RESOURCE_NAME}++{themeName}/")\n+            manifest.set("theme", var_path, val)\n \n     # plone.resource uses OFS.File which is a BytesIO objects\n     # but configparser can only deal with text (StringIO).\n@@ -634,14 +610,13 @@ def createThemeFromTemplate(title, description, baseOn=\'template\'):\n \n \n def getParser(type, readNetwork):\n-    """Set up a parser for either rules, theme or compiler\n-    """\n+    """Set up a parser for either rules, theme or compiler"""\n \n-    if type == \'rules\':\n+    if type == "rules":\n         parser = etree.XMLParser(recover=False, resolve_entities=False, remove_pis=True)\n-    elif type == \'theme\':\n+    elif type == "theme":\n         parser = etree.HTMLParser()\n-    elif type == \'compiler\':\n+    elif type == "compiler":\n         parser = etree.XMLParser(resolve_entities=False, remove_pis=True)\n     # Note: the order in which resolvers are called, seems random.\n     # They end up in a set.\n@@ -659,10 +634,9 @@ def compileThemeTransform(\n     absolutePrefix=None,\n     readNetwork=False,\n     parameterExpressions=None,\n-    runtrace=False\n+    runtrace=False,\n ):\n-    """Prepare the theme transform by compiling the rules with the given options\n-    """\n+    """Prepare the theme transform by compiling the rules with the given options"""\n \n     if parameterExpressions is None:\n         parameterExpressions = {}\n@@ -672,21 +646,21 @@ def compileThemeTransform(\n         write_file=False,\n         create_dir=False,\n         read_network=readNetwork,\n-        write_network=False\n+        write_network=False,\n     )\n \n     if absolutePrefix:\n         absolutePrefix = expandAbsolutePrefix(absolutePrefix)\n-    params = {\'url\', \'base\', \'path\', \'scheme\', \'host\'}\n+    params = {"url", "base", "path", "scheme", "host"}\n     params.update(parameterExpressions.keys())\n-    xslParams = {k: \'\' for k in params}\n+    xslParams = {k: "" for k in params}\n \n     compiledTheme = compile_theme(\n         rules,\n         absolute_prefix=absolutePrefix,\n-        parser=getParser(\'theme\', readNetwork),\n-        rules_parser=getParser(\'rules\', readNetwork),\n-        compiler_parser=getParser(\'compiler\', readNetwork),\n+        parser=getParser("theme", readNetwork),\n+        rules_parser=getParser("rules", readNetwork),\n+        compiler_parser=getParser("compiler", readNetwork),\n         read_network=readNetwork,\n         access_control=accessControl,\n         update=True,\n@@ -704,15 +678,14 @@ def compileThemeTransform(\n \n \n def prepareThemeParameters(context, request, parameterExpressions, cache=None):\n-    """Prepare and return a dict of parameter expression values.\n-    """\n+    """Prepare and return a dict of parameter expression values."""\n \n     # Find real or virtual path - PATH_INFO has VHM elements in it\n-    url = request.get(\'ACTUAL_URL\', \'\')\n+    url = request.get("ACTUAL_URL", "")\n \n     # Find the host name\n-    base = request.get(\'BASE1\', \'\')\n-    path = url[len(base):]\n+    base = request.get("BASE1", "")\n+    path = url[len(base) :]\n     parts = urlsplit(base.lower())\n \n     params = dict(\ndiff --git a/src/plone/app/theming/zmi.py b/src/plone/app/theming/zmi.py\nindex 1973ff63..6b4eeb2f 100644\n--- a/src/plone/app/theming/zmi.py\n+++ b/src/plone/app/theming/zmi.py\n@@ -4,23 +4,24 @@\n import logging\n \n \n-LOGGER = logging.getLogger(\'plone.app.theming\')\n+LOGGER = logging.getLogger("plone.app.theming")\n \n \n class NoThemeDTMLFile(DTMLFile):\n-    \'\'\'DTMLFile that automatically sets the X-Theme-Disabled header\'\'\'\n+    """DTMLFile that automatically sets the X-Theme-Disabled header"""\n \n     def _exec(self, bound_data, args, kw):\n         request = getRequest()\n         if request is not None:\n-            request.response.setHeader(\'X-Theme-Disabled\', \'1\')\n+            request.response.setHeader("X-Theme-Disabled", "1")\n         return DTMLFile._exec(self, bound_data, args, kw)\n \n+\n # Most ZMI pages include \'manage_page_header\'\n NO_THEME_DTML = [\n-    \'manage\',\n-    \'manage_page_header\',\n-    \'manage_top_frame\',\n+    "manage",\n+    "manage_page_header",\n+    "manage_top_frame",\n ]\n \n \n@@ -28,16 +29,18 @@ def disable_theming(func):\n     def wrapped(self, *args, **kw):\n         request = getRequest()\n         if request is not None:\n-            request.response.setHeader(\'X-Theme-Disabled\', \'1\')\n+            request.response.setHeader("X-Theme-Disabled", "1")\n         return func(self, *args, **kw)\n+\n     return func\n \n \n def patch_zmi():\n     from App.Management import Navigation\n+\n     for name in NO_THEME_DTML:\n         dtml = getattr(Navigation, name, None)\n         if dtml and isinstance(dtml, DTMLFile):\n             dtml.__class__ = NoThemeDTMLFile\n \n-    LOGGER.debug(\'Patched Zope Management Interface to disable theming.\')\n+    LOGGER.debug("Patched Zope Management Interface to disable theming.")\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 00000000..8c36310f\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,50 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir}/src -s plone.app.theming\n+extras =\n+    test\n'

