Repository: plone.base


Branch: refs/heads/main
Date: 2022-06-02T12:12:44+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.base/commit/6105b21d9d9485c306082b9510993e9d8929de47

Renamed test_l18nl10n.py to test_i18nl10n.py.

So i18n (internationalization) version l18n.

Files changed:
A src/plone/base/tests/test_i18nl10n.py
D src/plone/base/tests/test_l18nl10n.py

b'diff --git a/src/plone/base/tests/test_l18nl10n.py b/src/plone/base/tests/test_i18nl10n.py\nsimilarity index 100%\nrename from src/plone/base/tests/test_l18nl10n.py\nrename to src/plone/base/tests/test_i18nl10n.py\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2022-06-02T14:21:43+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.base/commit/1b4ff45101006605580dfd9acaafced2211357bd

Add tests for utranslate and ulocalized_time.

I copied, adapted and extended tests from CMFPlone.tests.testTranslationServiceTool.

Files changed:
M src/plone/base/tests/test_i18nl10n.py

b'diff --git a/src/plone/base/tests/test_i18nl10n.py b/src/plone/base/tests/test_i18nl10n.py\nindex 8be6582..4d3aec4 100644\n--- a/src/plone/base/tests/test_i18nl10n.py\n+++ b/src/plone/base/tests/test_i18nl10n.py\n@@ -1,8 +1,37 @@\n """ Unit tests for plone.base.i18nl10n module. """\n+from contextlib import contextmanager\n+from unittest.mock import patch\n+from zope.publisher.browser import TestRequest\n \n+import datetime\n+import DateTime\n+import locale\n import unittest\n \n \n+class DummyContext:\n+    """Dummy context with only a REQUEST.\n+\n+    The ulocalized_time method needs a context, for example the Plone portal,\n+    but it is only used to get the request:\n+\n+    request = aq_acquire(context, "REQUEST")\n+    """\n+\n+    def __init__(self):\n+        self.REQUEST = TestRequest()\n+\n+\n+@contextmanager\n+def patch_formatstring(value=None):\n+    import plone.base.i18nl10n\n+\n+    with patch.object(\n+        plone.base.i18nl10n, "get_formatstring_from_registry", return_value=value\n+    ):\n+        yield\n+\n+\n class BasicI18nl10nTests(unittest.TestCase):\n     def test_regexp_dt_format_string_regexp(self):\n         from plone.base.i18nl10n import _dt_format_string_regexp\n@@ -24,3 +53,182 @@ def test_regexp_interp_regex(self):\n             _interp_regex.findall(locales_string),\n             ["${H}", "${M}"],\n         )\n+\n+    def test_utranslate(self):\n+        from plone.base.i18nl10n import utranslate\n+\n+        request = TestRequest()\n+\n+        # Test string value\n+        value = utranslate("domain", "foo", context=request)\n+        self.assertEqual(value, "foo")\n+\n+        # Test empty string\n+        value = utranslate("domain", "", context=request)\n+        self.assertEqual(value, "")\n+\n+        # Test empty domain\n+        value = utranslate("", "foo", context=request)\n+        self.assertEqual(value, "foo")\n+\n+        # Test default is None\n+        value = utranslate("domain", "foo", context=request, default=None)\n+        self.assertEqual(value, "foo")\n+\n+        # Test default is other\n+        value = utranslate("domain", "foo", context=request, default="other")\n+        self.assertEqual(value, "other")\n+\n+        # Test a target language.\n+        value = utranslate("domain", "foo", context=request, target_language="nl")\n+        self.assertEqual(value, "foo")\n+\n+    def test_ulocalized_time_fallbacks(self):\n+        """Test the fallbacks in the ulocalized_time method.\n+\n+        The ulocalized_time method uses one of three formats, based on the arguments:\n+\n+        if time_only:\n+            msgid = "time_format"  # fallback: %H:%M\n+        elif long_format:\n+            msgid = "date_format_long"  # fallback: %Y-%m-%d %H:%M\n+        else:\n+            msgid = "date_format_short"  # fallback: %Y-%m-%d\n+\n+        The ulocalized_time method looks this msgid up in a po file to see which format\n+        to use when calling \'strftime\'.  In these unit tests, no translations are\n+        available, so the hardcoded fallbacks are used.\n+\n+        Default Plone site has a few records with which you can override this.\n+        See get_formatstring_from_registry.  In plain unit tests this call fails,\n+        because no registry has been set up.\n+\n+        Easiest way for us to test this, is then by mocking/patching this function.\n+        To test the fallbacks, we only have to use None as return value.\n+        """\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+        with patch_formatstring():\n+            # We test all combinations of long_format and time_only,\n+            # although not all make sense (both true).\n+            self.assertEqual(\n+                ulocalized_time(\n+                    "Mar 9, 1997 1:45pm",\n+                    long_format=True,\n+                    time_only=False,\n+                    context=context,\n+                ),\n+                "1997-03-09 13:45",\n+            )\n+            self.assertEqual(\n+                ulocalized_time(\n+                    "Mar 9, 1997 1:45pm",\n+                    long_format=False,\n+                    time_only=False,\n+                    context=context,\n+                ),\n+                "1997-03-09",\n+            )\n+            self.assertEqual(\n+                ulocalized_time(\n+                    "Mar 9, 1997 1:45pm",\n+                    long_format=False,\n+                    time_only=True,\n+                    context=context,\n+                ),\n+                "13:45",\n+            )\n+            self.assertEqual(\n+                ulocalized_time(\n+                    "Mar 9, 1997 1:45pm",\n+                    long_format=False,\n+                    time_only=True,\n+                    context=context,\n+                ),\n+                "13:45",\n+            )\n+\n+    def test_ulocalized_time_formats(self):\n+        """Test different formats in the ulocalized_time method.\n+\n+        See notes in ulocalized_time_fallbacks.  Best way to check non-default formats,\n+        is to patch get_formatstring_from_registry.  This results in ignoring the\n+        time_only and long_format options, so we do not pass them here.\n+        """\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+        with patch_formatstring("%H:%M %d-%m-%Y"):\n+            self.assertEqual(\n+                ulocalized_time(\n+                    "Mar 9, 1997 1:45pm",\n+                    context=context,\n+                ),\n+                "13:45 09-03-1997",\n+            )\n+        with patch_formatstring("German: %Y.%m.%d"):\n+            self.assertEqual(\n+                ulocalized_time(\n+                    "Mar 9, 1997 1:45pm",\n+                    context=context,\n+                ),\n+                "German: 1997.03.09",\n+            )\n+\n+    def test_ulocalized_time_no_context(self):\n+        # Without context, we fall back to ISO8601.\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        self.assertEqual(\n+            ulocalized_time("Mar 9, 1997 1:45pm", context=None), "1997-03-09T13:45:00"\n+        )\n+\n+    def test_ulocalized_time_none(self):\n+        # Test passing None.\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+\n+        # with patch_formatstring("%Y-%m-%d %H:%M"):\n+        with patch_formatstring():\n+            self.assertEqual(\n+                ulocalized_time(\n+                    "Mar 9, 1997 1:45pm",\n+                    time_only=None,\n+                    context=context,\n+                ),\n+                "1997-03-09",\n+            )\n+            self.assertEqual(\n+                ulocalized_time(\n+                    "Mar 9, 1997 1:45pm",\n+                    time_only=None,\n+                    domain=None,\n+                    context=context,\n+                ),\n+                "1997-03-09",\n+            )\n+\n+    def test_ulocalized_time_fetch_error(self):\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        # You should pass a DateTime, although the code does try to convert.\n+        # If this fails, get get None back.  Apparently in an old bug, an error\n+        # got passed like this:\n+        self.assertEqual(ulocalized_time("(Missing.Value,), {}"), None)\n+        self.assertEqual(ulocalized_time("Hello world"), None)\n+        self.assertEqual(ulocalized_time([]), None)\n+\n+    def test_ulocalized_time_conversion(self):\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        # You should pass a DateTime, but when the argument is accepted by DateTime,\n+        # conversion automatically happens.  When it depends on the time of day,\n+        # or on the time zone, we cannot compare the full result.\n+        now = DateTime.DateTime()\n+        day = now.strftime("%Y-%m-%d")\n+        self.assertTrue(ulocalized_time(None).startswith(day))\n+        self.assertTrue(ulocalized_time(datetime.datetime.now()).startswith(day))\n+        self.assertTrue(ulocalized_time(86400).startswith("1970-01"))\n+        self.assertEqual(ulocalized_time("Jan 27 1976"), "1976-01-27T00:00:00")\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2022-06-02T19:04:12+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.base/commit/9987c857b113d5d30b13ad96b5861ffaabb17193

Test translations, especially days of the week and month names.

Files changed:
M src/plone/base/tests/test_i18nl10n.py

b'diff --git a/src/plone/base/tests/test_i18nl10n.py b/src/plone/base/tests/test_i18nl10n.py\nindex 4d3aec4..0bd9532 100644\n--- a/src/plone/base/tests/test_i18nl10n.py\n+++ b/src/plone/base/tests/test_i18nl10n.py\n@@ -1,5 +1,6 @@\n """ Unit tests for plone.base.i18nl10n module. """\n from contextlib import contextmanager\n+from unittest.mock import MagicMock\n from unittest.mock import patch\n from zope.publisher.browser import TestRequest\n \n@@ -32,6 +33,56 @@ def patch_formatstring(value=None):\n         yield\n \n \n+# Mock translations\n+TRANSLATIONS = {\n+    "de": {\n+        "date_format_short": "DE: ${d}.${m}.${Y}",\n+    },\n+    "nl": {\n+        "date_format_short": "NL: ${a} ${d} ${b} ${Y}",\n+        "date_format_long": "NL: ${A} ${d} ${B} ${Y}",\n+        "weekday_sun": "zondag",\n+        "weekday_sun_abbr": "zo",\n+        "month_mar": "maart",\n+        "month_mar_abbr": "mrt",\n+    },\n+}\n+\n+\n+def mock_translate(msgid, *args, **kwargs):\n+    from zope.i18n import translate\n+\n+    target_language = kwargs.get("target_language")\n+    default = kwargs.get("default")\n+    override = False\n+    if target_language:\n+        try:\n+            override = TRANSLATIONS[target_language][msgid]\n+        except Exception:\n+            pass\n+        # Even if the TRANSLATIONS lookup worked, we may still need to call the\n+        # original translate function.  This depends on the keyword arguments having\n+        # a mapping and/or a default.\n+        if override:\n+            orig_msgid = msgid\n+            msgid = override\n+    standard = translate(msgid, *args, **kwargs)\n+    if standard == default and override:\n+        # Example: original msgid is "weekday_sun", just like the default,\n+        # and this is the standard answer.  But override is "zondag".\n+        # The override should win then.\n+        return override\n+    return standard\n+\n+\n+@contextmanager\n+def patch_translate():\n+    import plone.base.i18nl10n\n+\n+    with patch.object(plone.base.i18nl10n, "translate", wraps=mock_translate):\n+        yield\n+\n+\n class BasicI18nl10nTests(unittest.TestCase):\n     def test_regexp_dt_format_string_regexp(self):\n         from plone.base.i18nl10n import _dt_format_string_regexp\n@@ -175,6 +226,98 @@ def test_ulocalized_time_formats(self):\n                 ),\n                 "German: 1997.03.09",\n             )\n+        # Use week days and month names.\n+        with patch_formatstring("%A %B %d %Y"):\n+            self.assertEqual(\n+                ulocalized_time(\n+                    "Mar 9, 1997 1:45pm",\n+                    context=context,\n+                ),\n+                "Sunday March 09 1997",\n+            )\n+        with patch_formatstring("%a %b %d %Y"):\n+            self.assertEqual(\n+                ulocalized_time(\n+                    "Mar 9, 1997 1:45pm",\n+                    context=context,\n+                ),\n+                "Sun Mar 09 1997",\n+            )\n+\n+    def test_ulocalized_time_translate_no_language_format(self):\n+        """Test translations in the ulocalized_time method.\n+\n+        This is mostly about translating week days and month names.\n+        But also about using a different format for a language.\n+\n+        For this test, nothing was changed.\n+        A few other tests follow, where we did overrides.\n+        """\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+        with patch_formatstring():\n+            with patch_translate():\n+                # French gets the default.\n+                self.assertEqual(\n+                    ulocalized_time(\n+                        "Mar 9, 1997 1:45pm",\n+                        context=context,\n+                        target_language="fr",\n+                    ),\n+                    "1997-03-09",\n+                )\n+\n+    def test_ulocalized_time_translate_language_format(self):\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+        with patch_formatstring():\n+            with patch_translate():\n+                # For German we have mocked a different date_format_short.\n+                self.assertEqual(\n+                    ulocalized_time(\n+                        "Mar 9, 1997 1:45pm",\n+                        context=context,\n+                        target_language="de",\n+                    ),\n+                    "DE: 09.03.1997",\n+                )\n+\n+    def test_ulocalized_time_translate_weekdays_month_names_short(self):\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+        with patch_formatstring():\n+            with patch_translate():\n+                # For Dutch we have mocked a different date_format_short,\n+                # using abbreviations for week days and month names.\n+                self.assertEqual(\n+                    ulocalized_time(\n+                        "Mar 9, 1997 1:45pm",\n+                        context=context,\n+                        target_language="nl",\n+                    ),\n+                    "NL: zo 09 mrt 1997",\n+                )\n+\n+    def test_ulocalized_time_translate_weekdays_month_names_long(self):\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+        with patch_formatstring():\n+            with patch_translate():\n+                # For Dutch we have mocked a different date_format_long,\n+                # using week days and month names.\n+                self.assertEqual(\n+                    ulocalized_time(\n+                        "Mar 9, 1997 1:45pm",\n+                        long_format=True,\n+                        context=context,\n+                        target_language="nl",\n+                    ),\n+                    "NL: zondag 09 maart 1997",\n+                )\n \n     def test_ulocalized_time_no_context(self):\n         # Without context, we fall back to ISO8601.\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2022-06-03T01:30:44+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.base/commit/ad8bd663f2fa40118632c8036fef7dd30c00f9c0

Support dollar signs in registry override for date formats.

Then it uses the correct language in multilingual sites.
Fixes https://github.com/plone/Products.CMFPlone/issues/3550

Files changed:
A news/3550.bugfix
M src/plone/base/i18nl10n.py
M src/plone/base/tests/test_i18nl10n.py

b'diff --git a/news/3550.bugfix b/news/3550.bugfix\nnew file mode 100644\nindex 0000000..f9dc1b2\n--- /dev/null\n+++ b/news/3550.bugfix\n@@ -0,0 +1,3 @@\n+Support dollar signs in registry override for date formats.\n+Then it uses the correct language in multilingual sites.\n+[maurits]\ndiff --git a/src/plone/base/i18nl10n.py b/src/plone/base/i18nl10n.py\nindex 9b3182c..9d7a017 100644\n--- a/src/plone/base/i18nl10n.py\n+++ b/src/plone/base/i18nl10n.py\n@@ -25,7 +25,7 @@\n     r"(?<!\\$)(\\$(?:[%(n)s]|{[%(n)s]}))" % ({"n": _all_regexp_set})\n )\n # regexp to detect if this is a strftime format string\n-_dt_format_string_regexp = re.compile(fr"\\%([{_all_regexp_set}])")\n+_dt_format_string_regexp = re.compile(rf"\\%([{_all_regexp_set}])")\n \n # those are from DateTime.DateTime, but we must not rely on its internal\n # structures, so here a copy:\n@@ -223,7 +223,10 @@ def ulocalized_time(\n \n     if formatstring is not None:\n         if _dt_format_string_regexp.findall(formatstring):\n-            # classic strftime formatting, no i18n/l10n\n+            # This is classic strftime formatting with percentages instead of dollars,\n+            # e.g. %Y instead of ${Y} for the year.  This means we cannot do further\n+            # i18n/l10n for translating week days or month names.  Python will do\n+            # translation using the current locale.\n             return time.strftime(formatstring)\n     else:\n         # 2. the normal case: translation machinery,\n@@ -278,7 +281,9 @@ def ulocalized_time(\n         )\n \n     # translate the time string\n-    return translate(msgid, domain, mapping, request, target_language=target_language)\n+    return translate(\n+        formatstring, domain, mapping, request, target_language=target_language\n+    )\n \n \n def _numbertoenglishname(number, format=None, attr="_days"):\ndiff --git a/src/plone/base/tests/test_i18nl10n.py b/src/plone/base/tests/test_i18nl10n.py\nindex 0bd9532..a707cf6 100644\n--- a/src/plone/base/tests/test_i18nl10n.py\n+++ b/src/plone/base/tests/test_i18nl10n.py\n@@ -46,6 +46,15 @@ def patch_formatstring(value=None):\n         "month_mar": "maart",\n         "month_mar_abbr": "mrt",\n     },\n+    None: {\n+        "date_format_short": "${b} ${d}, ${Y}",\n+        "date_format_long": "${b} ${d}, ${Y} ${I}:${M} ${p}",\n+        "time_format": "${I}:${M} ${p}",\n+        "weekday_sun": "Sunday",\n+        "weekday_sun_abbr": "Su",\n+        "month_mar": "March",\n+        "month_mar_abbr": "Mar",\n+    },\n }\n \n \n@@ -55,17 +64,17 @@ def mock_translate(msgid, *args, **kwargs):\n     target_language = kwargs.get("target_language")\n     default = kwargs.get("default")\n     override = False\n-    if target_language:\n-        try:\n-            override = TRANSLATIONS[target_language][msgid]\n-        except Exception:\n-            pass\n-        # Even if the TRANSLATIONS lookup worked, we may still need to call the\n-        # original translate function.  This depends on the keyword arguments having\n-        # a mapping and/or a default.\n-        if override:\n-            orig_msgid = msgid\n-            msgid = override\n+    # Note: we have translations for target_language=None .\n+    try:\n+        override = TRANSLATIONS[target_language][msgid]\n+    except Exception:\n+        pass\n+    # Even if the TRANSLATIONS lookup worked, we may still need to call the\n+    # original translate function.  This depends on the keyword arguments having\n+    # a mapping and/or a default.\n+    if override:\n+        orig_msgid = msgid\n+        msgid = override\n     standard = translate(msgid, *args, **kwargs)\n     if standard == default and override:\n         # Example: original msgid is "weekday_sun", just like the default,\n@@ -83,6 +92,17 @@ def patch_translate():\n         yield\n \n \n+@contextmanager\n+def use_locale(value=None):\n+    orig = locale.getlocale(locale.LC_TIME)[0] or "C"\n+    try:\n+        worked = locale.setlocale(locale.LC_TIME, value)\n+    except locale.Error:\n+        worked = False\n+    yield worked\n+    locale.setlocale(locale.LC_TIME, orig)\n+\n+\n class BasicI18nl10nTests(unittest.TestCase):\n     def test_regexp_dt_format_string_regexp(self):\n         from plone.base.i18nl10n import _dt_format_string_regexp\n@@ -319,6 +339,75 @@ def test_ulocalized_time_translate_weekdays_month_names_long(self):\n                     "NL: zondag 09 maart 1997",\n                 )\n \n+    def test_ulocalized_time_dollar_classic_format_english(self):\n+        # When the format is a classic strftime format as you would use in standard\n+        # Python, the week days and month names are not translated.\n+        # Python will do translation using the current locale.\n+        # In these tests, it is useless to pass a target_language.\n+\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+        with patch_formatstring("%A %B %d %Y"):\n+            # Default is English, which needs no translation.\n+            # Do not assume that English is the locale on the system though.\n+            with use_locale("C") as available:\n+                if not available:\n+                    self.skipTest("English (C) locale not available")\n+                self.assertEqual(\n+                    ulocalized_time(\n+                        "Mar 9, 1997 1:45pm",\n+                        context=context,\n+                    ),\n+                    "Sunday March 09 1997",\n+                )\n+\n+    def test_ulocalized_time_dollar_classic_format_dutch(self):\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+        with patch_formatstring("%A %B %d %Y"):\n+            # But how about Dutch?  This can only be tested if we have the this locale\n+            # and set it here.\n+            with use_locale("nl_NL") as available:\n+                if not available:\n+                    self.skipTest("Dutch (nl_NL) locale not available")\n+                self.assertEqual(\n+                    ulocalized_time(\n+                        "Mar 9, 1997 1:45pm",\n+                        context=context,\n+                    ),\n+                    "zondag maart 09 1997",\n+                )\n+\n+    def test_ulocalized_time_dollar_format_translates_weekdays_month_names_long(self):\n+        # When the format is taken from the registry instead of from po files,\n+        # the week days and month names should still be translated.\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+        with patch_formatstring("${A} ${B} ${d} ${Y}"):\n+            with patch_translate():\n+                # English should be no trouble, because it needs no translation.\n+                self.assertEqual(\n+                    ulocalized_time(\n+                        "Mar 9, 1997 1:45pm",\n+                        context=context,\n+                        # target_language="en",\n+                    ),\n+                    "Sunday March 09 1997",\n+                )\n+                # But how about Dutch?  In the tests we have Dutch translations for\n+                # Sunday and March, and they should be used.\n+                self.assertEqual(\n+                    ulocalized_time(\n+                        "Mar 9, 1997 1:45pm",\n+                        context=context,\n+                        target_language="nl",\n+                    ),\n+                    "zondag maart 09 1997",\n+                )\n+\n     def test_ulocalized_time_no_context(self):\n         # Without context, we fall back to ISO8601.\n         from plone.base.i18nl10n import ulocalized_time\n@@ -333,7 +422,6 @@ def test_ulocalized_time_none(self):\n \n         context = DummyContext()\n \n-        # with patch_formatstring("%Y-%m-%d %H:%M"):\n         with patch_formatstring():\n             self.assertEqual(\n                 ulocalized_time(\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2022-06-03T01:31:13+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.base/commit/9796a4fb4e28662691024a60d26dbd5137726336

ulocalized_time: accept a string argument to long_format.

For example: `${a} ${d} hello guys ${b} ${Y}`.
Taken over from `experimental.ulocalized_time &lt;https://pypi.org/project/experimental.ulocalized_time/&gt;`_.

Fixes https://github.com/plone/Products.CMFPlone/issues/3549

Files changed:
A news/3549.feature
M src/plone/base/i18nl10n.py
M src/plone/base/tests/test_i18nl10n.py

b'diff --git a/news/3549.feature b/news/3549.feature\nnew file mode 100644\nindex 0000000..254aba7\n--- /dev/null\n+++ b/news/3549.feature\n@@ -0,0 +1,4 @@\n+``ulocalized_time``: accept a string argument to long_format.\n+For example: ``${a} ${d} hello guys ${b} ${Y}``.\n+Taken over from `experimental.ulocalized_time <https://pypi.org/project/experimental.ulocalized_time/>`_.\n+[maurits]\ndiff --git a/src/plone/base/i18nl10n.py b/src/plone/base/i18nl10n.py\nindex 9d7a017..e8adf5f 100644\n--- a/src/plone/base/i18nl10n.py\n+++ b/src/plone/base/i18nl10n.py\n@@ -217,9 +217,14 @@ def ulocalized_time(\n     if request is None:\n         request = aq_acquire(context, "REQUEST")\n \n-    # 1. if our Enabled flag in the configuration registry is set,\n-    # the format string there should override the translation machinery\n-    formatstring = get_formatstring_from_registry(msgid)\n+    if long_format and isinstance(long_format, str):\n+        # 0. If a format is explicitly passed in the long_format argument, this wins.\n+        #    Hopefully something like this: "${a} ${d} ${b} ${Y}""\n+        formatstring = long_format\n+    else:\n+        # 1. if our Enabled flag in the configuration registry is set,\n+        # the format string there should override the translation machinery\n+        formatstring = get_formatstring_from_registry(msgid)\n \n     if formatstring is not None:\n         if _dt_format_string_regexp.findall(formatstring):\ndiff --git a/src/plone/base/tests/test_i18nl10n.py b/src/plone/base/tests/test_i18nl10n.py\nindex a707cf6..5681fdc 100644\n--- a/src/plone/base/tests/test_i18nl10n.py\n+++ b/src/plone/base/tests/test_i18nl10n.py\n@@ -408,6 +408,45 @@ def test_ulocalized_time_dollar_format_translates_weekdays_month_names_long(self\n                     "zondag maart 09 1997",\n                 )\n \n+    def test_ulocalized_time_explicit_long_format_dollar(self):\n+        # We took over a change from experimental.ulocalized_time:\n+        # allow passing an explicit long_format.\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+        with patch_formatstring():\n+            with patch_translate():\n+                self.assertEqual(\n+                    ulocalized_time(\n+                        "Mar 9, 1997 1:45pm",\n+                        long_format="NL: ${A} go ${d} crazy ${B} ${Y}!",\n+                        context=context,\n+                        target_language="nl",\n+                    ),\n+                    "NL: zondag go 09 crazy maart 1997!",\n+                )\n+\n+    def test_ulocalized_time_explicit_long_format_classic(self):\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+        with patch_formatstring():\n+            with patch_translate():\n+                # You should not use %, but it can work.\n+                with use_locale("nl_NL") as available:\n+                    if not available:\n+                        self.skipTest("Dutch (nl_NL) locale not available")\n+                    self.assertEqual(\n+                        ulocalized_time(\n+                            "Mar 9, 1997 1:45pm",\n+                            long_format="NL: %A go %d crazy %B %Y!",\n+                            context=context,\n+                            # this is ignored:\n+                            target_language="de",\n+                        ),\n+                        "NL: zondag go 09 crazy maart 1997!",\n+                    )\n+\n     def test_ulocalized_time_no_context(self):\n         # Without context, we fall back to ISO8601.\n         from plone.base.i18nl10n import ulocalized_time\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2022-06-13T23:22:39+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.base/commit/1246301cb05b4f67efa3ed54f790de4dd4db9cff

Merge pull request #11 from plone/maurits-merge-experimental-ulocalized_time

Merge experimental ulocalized time

Files changed:
A news/3549.feature
A news/3550.bugfix
A src/plone/base/tests/test_i18nl10n.py
M src/plone/base/i18nl10n.py
D src/plone/base/tests/test_l18nl10n.py

b'diff --git a/news/3549.feature b/news/3549.feature\nnew file mode 100644\nindex 0000000..254aba7\n--- /dev/null\n+++ b/news/3549.feature\n@@ -0,0 +1,4 @@\n+``ulocalized_time``: accept a string argument to long_format.\n+For example: ``${a} ${d} hello guys ${b} ${Y}``.\n+Taken over from `experimental.ulocalized_time <https://pypi.org/project/experimental.ulocalized_time/>`_.\n+[maurits]\ndiff --git a/news/3550.bugfix b/news/3550.bugfix\nnew file mode 100644\nindex 0000000..f9dc1b2\n--- /dev/null\n+++ b/news/3550.bugfix\n@@ -0,0 +1,3 @@\n+Support dollar signs in registry override for date formats.\n+Then it uses the correct language in multilingual sites.\n+[maurits]\ndiff --git a/src/plone/base/i18nl10n.py b/src/plone/base/i18nl10n.py\nindex 9b3182c..e8adf5f 100644\n--- a/src/plone/base/i18nl10n.py\n+++ b/src/plone/base/i18nl10n.py\n@@ -25,7 +25,7 @@\n     r"(?<!\\$)(\\$(?:[%(n)s]|{[%(n)s]}))" % ({"n": _all_regexp_set})\n )\n # regexp to detect if this is a strftime format string\n-_dt_format_string_regexp = re.compile(fr"\\%([{_all_regexp_set}])")\n+_dt_format_string_regexp = re.compile(rf"\\%([{_all_regexp_set}])")\n \n # those are from DateTime.DateTime, but we must not rely on its internal\n # structures, so here a copy:\n@@ -217,13 +217,21 @@ def ulocalized_time(\n     if request is None:\n         request = aq_acquire(context, "REQUEST")\n \n-    # 1. if our Enabled flag in the configuration registry is set,\n-    # the format string there should override the translation machinery\n-    formatstring = get_formatstring_from_registry(msgid)\n+    if long_format and isinstance(long_format, str):\n+        # 0. If a format is explicitly passed in the long_format argument, this wins.\n+        #    Hopefully something like this: "${a} ${d} ${b} ${Y}""\n+        formatstring = long_format\n+    else:\n+        # 1. if our Enabled flag in the configuration registry is set,\n+        # the format string there should override the translation machinery\n+        formatstring = get_formatstring_from_registry(msgid)\n \n     if formatstring is not None:\n         if _dt_format_string_regexp.findall(formatstring):\n-            # classic strftime formatting, no i18n/l10n\n+            # This is classic strftime formatting with percentages instead of dollars,\n+            # e.g. %Y instead of ${Y} for the year.  This means we cannot do further\n+            # i18n/l10n for translating week days or month names.  Python will do\n+            # translation using the current locale.\n             return time.strftime(formatstring)\n     else:\n         # 2. the normal case: translation machinery,\n@@ -278,7 +286,9 @@ def ulocalized_time(\n         )\n \n     # translate the time string\n-    return translate(msgid, domain, mapping, request, target_language=target_language)\n+    return translate(\n+        formatstring, domain, mapping, request, target_language=target_language\n+    )\n \n \n def _numbertoenglishname(number, format=None, attr="_days"):\ndiff --git a/src/plone/base/tests/test_i18nl10n.py b/src/plone/base/tests/test_i18nl10n.py\nnew file mode 100644\nindex 0000000..5681fdc\n--- /dev/null\n+++ b/src/plone/base/tests/test_i18nl10n.py\n@@ -0,0 +1,504 @@\n+""" Unit tests for plone.base.i18nl10n module. """\n+from contextlib import contextmanager\n+from unittest.mock import MagicMock\n+from unittest.mock import patch\n+from zope.publisher.browser import TestRequest\n+\n+import datetime\n+import DateTime\n+import locale\n+import unittest\n+\n+\n+class DummyContext:\n+    """Dummy context with only a REQUEST.\n+\n+    The ulocalized_time method needs a context, for example the Plone portal,\n+    but it is only used to get the request:\n+\n+    request = aq_acquire(context, "REQUEST")\n+    """\n+\n+    def __init__(self):\n+        self.REQUEST = TestRequest()\n+\n+\n+@contextmanager\n+def patch_formatstring(value=None):\n+    import plone.base.i18nl10n\n+\n+    with patch.object(\n+        plone.base.i18nl10n, "get_formatstring_from_registry", return_value=value\n+    ):\n+        yield\n+\n+\n+# Mock translations\n+TRANSLATIONS = {\n+    "de": {\n+        "date_format_short": "DE: ${d}.${m}.${Y}",\n+    },\n+    "nl": {\n+        "date_format_short": "NL: ${a} ${d} ${b} ${Y}",\n+        "date_format_long": "NL: ${A} ${d} ${B} ${Y}",\n+        "weekday_sun": "zondag",\n+        "weekday_sun_abbr": "zo",\n+        "month_mar": "maart",\n+        "month_mar_abbr": "mrt",\n+    },\n+    None: {\n+        "date_format_short": "${b} ${d}, ${Y}",\n+        "date_format_long": "${b} ${d}, ${Y} ${I}:${M} ${p}",\n+        "time_format": "${I}:${M} ${p}",\n+        "weekday_sun": "Sunday",\n+        "weekday_sun_abbr": "Su",\n+        "month_mar": "March",\n+        "month_mar_abbr": "Mar",\n+    },\n+}\n+\n+\n+def mock_translate(msgid, *args, **kwargs):\n+    from zope.i18n import translate\n+\n+    target_language = kwargs.get("target_language")\n+    default = kwargs.get("default")\n+    override = False\n+    # Note: we have translations for target_language=None .\n+    try:\n+        override = TRANSLATIONS[target_language][msgid]\n+    except Exception:\n+        pass\n+    # Even if the TRANSLATIONS lookup worked, we may still need to call the\n+    # original translate function.  This depends on the keyword arguments having\n+    # a mapping and/or a default.\n+    if override:\n+        orig_msgid = msgid\n+        msgid = override\n+    standard = translate(msgid, *args, **kwargs)\n+    if standard == default and override:\n+        # Example: original msgid is "weekday_sun", just like the default,\n+        # and this is the standard answer.  But override is "zondag".\n+        # The override should win then.\n+        return override\n+    return standard\n+\n+\n+@contextmanager\n+def patch_translate():\n+    import plone.base.i18nl10n\n+\n+    with patch.object(plone.base.i18nl10n, "translate", wraps=mock_translate):\n+        yield\n+\n+\n+@contextmanager\n+def use_locale(value=None):\n+    orig = locale.getlocale(locale.LC_TIME)[0] or "C"\n+    try:\n+        worked = locale.setlocale(locale.LC_TIME, value)\n+    except locale.Error:\n+        worked = False\n+    yield worked\n+    locale.setlocale(locale.LC_TIME, orig)\n+\n+\n+class BasicI18nl10nTests(unittest.TestCase):\n+    def test_regexp_dt_format_string_regexp(self):\n+        from plone.base.i18nl10n import _dt_format_string_regexp\n+\n+        dt_string = "%Y-%m-%d %H:%M"\n+        locales_string = "${H}:${M}"\n+\n+        # test for strftime format string\n+        self.assertTrue(bool(_dt_format_string_regexp.findall(dt_string)))\n+        self.assertFalse(bool(_dt_format_string_regexp.findall(locales_string)))\n+\n+    def test_regexp_interp_regex(self):\n+        from plone.base.i18nl10n import _interp_regex\n+\n+        locales_string = "${H}:${M}"\n+\n+        # test for locale string elements:\n+        self.assertEqual(\n+            _interp_regex.findall(locales_string),\n+            ["${H}", "${M}"],\n+        )\n+\n+    def test_utranslate(self):\n+        from plone.base.i18nl10n import utranslate\n+\n+        request = TestRequest()\n+\n+        # Test string value\n+        value = utranslate("domain", "foo", context=request)\n+        self.assertEqual(value, "foo")\n+\n+        # Test empty string\n+        value = utranslate("domain", "", context=request)\n+        self.assertEqual(value, "")\n+\n+        # Test empty domain\n+        value = utranslate("", "foo", context=request)\n+        self.assertEqual(value, "foo")\n+\n+        # Test default is None\n+        value = utranslate("domain", "foo", context=request, default=None)\n+        self.assertEqual(value, "foo")\n+\n+        # Test default is other\n+        value = utranslate("domain", "foo", context=request, default="other")\n+        self.assertEqual(value, "other")\n+\n+        # Test a target language.\n+        value = utranslate("domain", "foo", context=request, target_language="nl")\n+        self.assertEqual(value, "foo")\n+\n+    def test_ulocalized_time_fallbacks(self):\n+        """Test the fallbacks in the ulocalized_time method.\n+\n+        The ulocalized_time method uses one of three formats, based on the arguments:\n+\n+        if time_only:\n+            msgid = "time_format"  # fallback: %H:%M\n+        elif long_format:\n+            msgid = "date_format_long"  # fallback: %Y-%m-%d %H:%M\n+        else:\n+            msgid = "date_format_short"  # fallback: %Y-%m-%d\n+\n+        The ulocalized_time method looks this msgid up in a po file to see which format\n+        to use when calling \'strftime\'.  In these unit tests, no translations are\n+        available, so the hardcoded fallbacks are used.\n+\n+        Default Plone site has a few records with which you can override this.\n+        See get_formatstring_from_registry.  In plain unit tests this call fails,\n+        because no registry has been set up.\n+\n+        Easiest way for us to test this, is then by mocking/patching this function.\n+        To test the fallbacks, we only have to use None as return value.\n+        """\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+        with patch_formatstring():\n+            # We test all combinations of long_format and time_only,\n+            # although not all make sense (both true).\n+            self.assertEqual(\n+                ulocalized_time(\n+                    "Mar 9, 1997 1:45pm",\n+                    long_format=True,\n+                    time_only=False,\n+                    context=context,\n+                ),\n+                "1997-03-09 13:45",\n+            )\n+            self.assertEqual(\n+                ulocalized_time(\n+                    "Mar 9, 1997 1:45pm",\n+                    long_format=False,\n+                    time_only=False,\n+                    context=context,\n+                ),\n+                "1997-03-09",\n+            )\n+            self.assertEqual(\n+                ulocalized_time(\n+                    "Mar 9, 1997 1:45pm",\n+                    long_format=False,\n+                    time_only=True,\n+                    context=context,\n+                ),\n+                "13:45",\n+            )\n+            self.assertEqual(\n+                ulocalized_time(\n+                    "Mar 9, 1997 1:45pm",\n+                    long_format=False,\n+                    time_only=True,\n+                    context=context,\n+                ),\n+                "13:45",\n+            )\n+\n+    def test_ulocalized_time_formats(self):\n+        """Test different formats in the ulocalized_time method.\n+\n+        See notes in ulocalized_time_fallbacks.  Best way to check non-default formats,\n+        is to patch get_formatstring_from_registry.  This results in ignoring the\n+        time_only and long_format options, so we do not pass them here.\n+        """\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+        with patch_formatstring("%H:%M %d-%m-%Y"):\n+            self.assertEqual(\n+                ulocalized_time(\n+                    "Mar 9, 1997 1:45pm",\n+                    context=context,\n+                ),\n+                "13:45 09-03-1997",\n+            )\n+        with patch_formatstring("German: %Y.%m.%d"):\n+            self.assertEqual(\n+                ulocalized_time(\n+                    "Mar 9, 1997 1:45pm",\n+                    context=context,\n+                ),\n+                "German: 1997.03.09",\n+            )\n+        # Use week days and month names.\n+        with patch_formatstring("%A %B %d %Y"):\n+            self.assertEqual(\n+                ulocalized_time(\n+                    "Mar 9, 1997 1:45pm",\n+                    context=context,\n+                ),\n+                "Sunday March 09 1997",\n+            )\n+        with patch_formatstring("%a %b %d %Y"):\n+            self.assertEqual(\n+                ulocalized_time(\n+                    "Mar 9, 1997 1:45pm",\n+                    context=context,\n+                ),\n+                "Sun Mar 09 1997",\n+            )\n+\n+    def test_ulocalized_time_translate_no_language_format(self):\n+        """Test translations in the ulocalized_time method.\n+\n+        This is mostly about translating week days and month names.\n+        But also about using a different format for a language.\n+\n+        For this test, nothing was changed.\n+        A few other tests follow, where we did overrides.\n+        """\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+        with patch_formatstring():\n+            with patch_translate():\n+                # French gets the default.\n+                self.assertEqual(\n+                    ulocalized_time(\n+                        "Mar 9, 1997 1:45pm",\n+                        context=context,\n+                        target_language="fr",\n+                    ),\n+                    "1997-03-09",\n+                )\n+\n+    def test_ulocalized_time_translate_language_format(self):\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+        with patch_formatstring():\n+            with patch_translate():\n+                # For German we have mocked a different date_format_short.\n+                self.assertEqual(\n+                    ulocalized_time(\n+                        "Mar 9, 1997 1:45pm",\n+                        context=context,\n+                        target_language="de",\n+                    ),\n+                    "DE: 09.03.1997",\n+                )\n+\n+    def test_ulocalized_time_translate_weekdays_month_names_short(self):\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+        with patch_formatstring():\n+            with patch_translate():\n+                # For Dutch we have mocked a different date_format_short,\n+                # using abbreviations for week days and month names.\n+                self.assertEqual(\n+                    ulocalized_time(\n+                        "Mar 9, 1997 1:45pm",\n+                        context=context,\n+                        target_language="nl",\n+                    ),\n+                    "NL: zo 09 mrt 1997",\n+                )\n+\n+    def test_ulocalized_time_translate_weekdays_month_names_long(self):\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+        with patch_formatstring():\n+            with patch_translate():\n+                # For Dutch we have mocked a different date_format_long,\n+                # using week days and month names.\n+                self.assertEqual(\n+                    ulocalized_time(\n+                        "Mar 9, 1997 1:45pm",\n+                        long_format=True,\n+                        context=context,\n+                        target_language="nl",\n+                    ),\n+                    "NL: zondag 09 maart 1997",\n+                )\n+\n+    def test_ulocalized_time_dollar_classic_format_english(self):\n+        # When the format is a classic strftime format as you would use in standard\n+        # Python, the week days and month names are not translated.\n+        # Python will do translation using the current locale.\n+        # In these tests, it is useless to pass a target_language.\n+\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+        with patch_formatstring("%A %B %d %Y"):\n+            # Default is English, which needs no translation.\n+            # Do not assume that English is the locale on the system though.\n+            with use_locale("C") as available:\n+                if not available:\n+                    self.skipTest("English (C) locale not available")\n+                self.assertEqual(\n+                    ulocalized_time(\n+                        "Mar 9, 1997 1:45pm",\n+                        context=context,\n+                    ),\n+                    "Sunday March 09 1997",\n+                )\n+\n+    def test_ulocalized_time_dollar_classic_format_dutch(self):\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+        with patch_formatstring("%A %B %d %Y"):\n+            # But how about Dutch?  This can only be tested if we have the this locale\n+            # and set it here.\n+            with use_locale("nl_NL") as available:\n+                if not available:\n+                    self.skipTest("Dutch (nl_NL) locale not available")\n+                self.assertEqual(\n+                    ulocalized_time(\n+                        "Mar 9, 1997 1:45pm",\n+                        context=context,\n+                    ),\n+                    "zondag maart 09 1997",\n+                )\n+\n+    def test_ulocalized_time_dollar_format_translates_weekdays_month_names_long(self):\n+        # When the format is taken from the registry instead of from po files,\n+        # the week days and month names should still be translated.\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+        with patch_formatstring("${A} ${B} ${d} ${Y}"):\n+            with patch_translate():\n+                # English should be no trouble, because it needs no translation.\n+                self.assertEqual(\n+                    ulocalized_time(\n+                        "Mar 9, 1997 1:45pm",\n+                        context=context,\n+                        # target_language="en",\n+                    ),\n+                    "Sunday March 09 1997",\n+                )\n+                # But how about Dutch?  In the tests we have Dutch translations for\n+                # Sunday and March, and they should be used.\n+                self.assertEqual(\n+                    ulocalized_time(\n+                        "Mar 9, 1997 1:45pm",\n+                        context=context,\n+                        target_language="nl",\n+                    ),\n+                    "zondag maart 09 1997",\n+                )\n+\n+    def test_ulocalized_time_explicit_long_format_dollar(self):\n+        # We took over a change from experimental.ulocalized_time:\n+        # allow passing an explicit long_format.\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+        with patch_formatstring():\n+            with patch_translate():\n+                self.assertEqual(\n+                    ulocalized_time(\n+                        "Mar 9, 1997 1:45pm",\n+                        long_format="NL: ${A} go ${d} crazy ${B} ${Y}!",\n+                        context=context,\n+                        target_language="nl",\n+                    ),\n+                    "NL: zondag go 09 crazy maart 1997!",\n+                )\n+\n+    def test_ulocalized_time_explicit_long_format_classic(self):\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+        with patch_formatstring():\n+            with patch_translate():\n+                # You should not use %, but it can work.\n+                with use_locale("nl_NL") as available:\n+                    if not available:\n+                        self.skipTest("Dutch (nl_NL) locale not available")\n+                    self.assertEqual(\n+                        ulocalized_time(\n+                            "Mar 9, 1997 1:45pm",\n+                            long_format="NL: %A go %d crazy %B %Y!",\n+                            context=context,\n+                            # this is ignored:\n+                            target_language="de",\n+                        ),\n+                        "NL: zondag go 09 crazy maart 1997!",\n+                    )\n+\n+    def test_ulocalized_time_no_context(self):\n+        # Without context, we fall back to ISO8601.\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        self.assertEqual(\n+            ulocalized_time("Mar 9, 1997 1:45pm", context=None), "1997-03-09T13:45:00"\n+        )\n+\n+    def test_ulocalized_time_none(self):\n+        # Test passing None.\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        context = DummyContext()\n+\n+        with patch_formatstring():\n+            self.assertEqual(\n+                ulocalized_time(\n+                    "Mar 9, 1997 1:45pm",\n+                    time_only=None,\n+                    context=context,\n+                ),\n+                "1997-03-09",\n+            )\n+            self.assertEqual(\n+                ulocalized_time(\n+                    "Mar 9, 1997 1:45pm",\n+                    time_only=None,\n+                    domain=None,\n+                    context=context,\n+                ),\n+                "1997-03-09",\n+            )\n+\n+    def test_ulocalized_time_fetch_error(self):\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        # You should pass a DateTime, although the code does try to convert.\n+        # If this fails, get get None back.  Apparently in an old bug, an error\n+        # got passed like this:\n+        self.assertEqual(ulocalized_time("(Missing.Value,), {}"), None)\n+        self.assertEqual(ulocalized_time("Hello world"), None)\n+        self.assertEqual(ulocalized_time([]), None)\n+\n+    def test_ulocalized_time_conversion(self):\n+        from plone.base.i18nl10n import ulocalized_time\n+\n+        # You should pass a DateTime, but when the argument is accepted by DateTime,\n+        # conversion automatically happens.  When it depends on the time of day,\n+        # or on the time zone, we cannot compare the full result.\n+        now = DateTime.DateTime()\n+        day = now.strftime("%Y-%m-%d")\n+        self.assertTrue(ulocalized_time(None).startswith(day))\n+        self.assertTrue(ulocalized_time(datetime.datetime.now()).startswith(day))\n+        self.assertTrue(ulocalized_time(86400).startswith("1970-01"))\n+        self.assertEqual(ulocalized_time("Jan 27 1976"), "1976-01-27T00:00:00")\ndiff --git a/src/plone/base/tests/test_l18nl10n.py b/src/plone/base/tests/test_l18nl10n.py\ndeleted file mode 100644\nindex 8be6582..0000000\n--- a/src/plone/base/tests/test_l18nl10n.py\n+++ /dev/null\n@@ -1,26 +0,0 @@\n-""" Unit tests for plone.base.i18nl10n module. """\n-\n-import unittest\n-\n-\n-class BasicI18nl10nTests(unittest.TestCase):\n-    def test_regexp_dt_format_string_regexp(self):\n-        from plone.base.i18nl10n import _dt_format_string_regexp\n-\n-        dt_string = "%Y-%m-%d %H:%M"\n-        locales_string = "${H}:${M}"\n-\n-        # test for strftime format string\n-        self.assertTrue(bool(_dt_format_string_regexp.findall(dt_string)))\n-        self.assertFalse(bool(_dt_format_string_regexp.findall(locales_string)))\n-\n-    def test_regexp_interp_regex(self):\n-        from plone.base.i18nl10n import _interp_regex\n-\n-        locales_string = "${H}:${M}"\n-\n-        # test for locale string elements:\n-        self.assertEqual(\n-            _interp_regex.findall(locales_string),\n-            ["${H}", "${M}"],\n-        )\n'

