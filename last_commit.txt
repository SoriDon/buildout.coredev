Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-10-31T10:48:36+01:00
Author: Andrea Cecchi (cekk) <andrea.cecchi85@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/d19d6556c610badd6ab103c35a95aad73aa9898a

Enable usage of metadata_fields also for querystringsearch endpoint (#1253)

* Enable usage of metadata_fields also for querystringsearch endpoint

* add test

* add changelog

Files changed:
A news/1253.feature
M src/plone/restapi/serializer/summary.py
M src/plone/restapi/tests/test_services_querystringsearch.py

b'diff --git a/news/1253.feature b/news/1253.feature\nnew file mode 100644\nindex 000000000..6e498f5b6\n--- /dev/null\n+++ b/news/1253.feature\n@@ -0,0 +1 @@\n+Enable usage of metadata_fields also for POST calls [cekk]\ndiff --git a/src/plone/restapi/serializer/summary.py b/src/plone/restapi/serializer/summary.py\nindex 52768ef7a..47ea757c1 100644\n--- a/src/plone/restapi/serializer/summary.py\n+++ b/src/plone/restapi/serializer/summary.py\n@@ -1,4 +1,5 @@\n from plone.app.contentlisting.interfaces import IContentListingObject\n+from plone.restapi.deserializer import json_body\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.restapi.serializer.converters import json_compatible\n from Products.CMFCore.utils import getToolByName\n@@ -69,7 +70,11 @@ def __call__(self):\n         return summary\n \n     def metadata_fields(self):\n-        additional_metadata_fields = self.request.form.get("metadata_fields", [])\n+        query = self.request.form\n+        if not query:\n+            # maybe its a POST request\n+            query = json_body(self.request)\n+        additional_metadata_fields = query.get("metadata_fields", [])\n         if not isinstance(additional_metadata_fields, list):\n             additional_metadata_fields = [additional_metadata_fields]\n         additional_metadata_fields = set(additional_metadata_fields)\ndiff --git a/src/plone/restapi/tests/test_services_querystringsearch.py b/src/plone/restapi/tests/test_services_querystringsearch.py\nindex 83df6426b..0373ab07d 100644\n--- a/src/plone/restapi/tests/test_services_querystringsearch.py\n+++ b/src/plone/restapi/tests/test_services_querystringsearch.py\n@@ -74,6 +74,41 @@ def test_querystringsearch_fullobjects(self):\n         self.assertEqual(response.json()["items_total"], 1)\n         self.assertEqual(len(response.json()["items"]), 1)\n \n+    def test_querystringsearch_metadata_fields(self):\n+        response = self.api_session.post(\n+            "/@querystring-search",\n+            json={\n+                "query": [\n+                    {\n+                        "i": "portal_type",\n+                        "o": "plone.app.querystring.operation.selection.is",\n+                        "v": ["Document"],\n+                    }\n+                ],\n+            },\n+        )\n+\n+        self.assertEqual(response.status_code, 200)\n+        self.assertIn("items", response.json())\n+        self.assertIn("items_total", response.json())\n+        self.assertNotIn("effective", response.json()["items"][0])\n+\n+        response = self.api_session.post(\n+            "/@querystring-search",\n+            json={\n+                "query": [\n+                    {\n+                        "i": "portal_type",\n+                        "o": "plone.app.querystring.operation.selection.is",\n+                        "v": ["Document"],\n+                    }\n+                ],\n+                "metadata_fields": ["effective"],\n+            },\n+        )\n+\n+        self.assertIn("effective", response.json()["items"][0])\n+\n     def test_querystringsearch_complex(self):\n \n         for a in range(1, 10):\n'

