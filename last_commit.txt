Repository: plone.app.contentrules


Branch: refs/heads/master
Date: 2022-05-01T01:39:01+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentrules/commit/f2c97d21d89c9133b120c8e33f60039fc1de1bf4

isort

Files changed:
M bootstrap.py
M plone/app/contentrules/actions/logger.py
M plone/app/contentrules/actions/mail.py
M plone/app/contentrules/browser/assignments.py
M plone/app/contentrules/browser/elements.py
M plone/app/contentrules/conditions/fileextension.py
M plone/app/contentrules/conditions/portaltype.py
M plone/app/contentrules/exportimport/rules.py
M plone/app/contentrules/tests/base.py
M plone/app/contentrules/tests/dummy.py
M plone/app/contentrules/tests/test_action_copy.py
M plone/app/contentrules/tests/test_action_delete.py
M plone/app/contentrules/tests/test_action_logger.py
M plone/app/contentrules/tests/test_action_mail.py
M plone/app/contentrules/tests/test_action_move.py
M plone/app/contentrules/tests/test_action_workflow.py
M plone/app/contentrules/tests/test_condition_group.py
M plone/app/contentrules/tests/test_condition_portal_type.py
M plone/app/contentrules/tests/test_condition_role.py
M plone/app/contentrules/tests/test_condition_tales_expression.py
M plone/app/contentrules/tests/test_condition_wfstate.py
M plone/app/contentrules/tests/test_condition_wftransition.py
M plone/app/contentrules/tests/test_configuration.py
M plone/app/contentrules/tests/test_rule_assignment_mapping.py
M plone/app/contentrules/tests/test_traversal.py
M setup.cfg
M setup.py

b'diff --git a/bootstrap.py b/bootstrap.py\nindex ed57894..78dd81f 100644\n--- a/bootstrap.py\n+++ b/bootstrap.py\n@@ -18,12 +18,13 @@\n use the -c option to specify an alternate configuration file.\n """\n \n+from optparse import OptionParser\n+\n import os\n import shutil\n import sys\n import tempfile\n \n-from optparse import OptionParser\n \n tmpeggs = tempfile.mkdtemp()\n \n@@ -82,6 +83,7 @@\n     # this will remove them from the path to ensure that incompatible versions \n     # of setuptools are not in the path\n     import site\n+\n     # inside a virtualenv, there is no \'getsitepackages\'. \n     # We can\'t remove these reliably\n     if hasattr(site, \'getsitepackages\'):\n@@ -90,8 +92,9 @@\n \n setup_args = dict(to_dir=tmpeggs, download_delay=0)\n ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n import pkg_resources\n+import setuptools\n+\n \n # This does not (always?) update the default working set.  We will\n # do it.\n@@ -156,6 +159,8 @@ def _final_version(parsed_version):\n cmd.append(requirement)\n \n import subprocess\n+\n+\n if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n     raise Exception(\n         "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n@@ -167,6 +172,7 @@ def _final_version(parsed_version):\n ws.require(requirement)\n import zc.buildout.buildout\n \n+\n if not [a for a in args if \'=\' not in a]:\n     args.append(\'bootstrap\')\n \ndiff --git a/plone/app/contentrules/actions/logger.py b/plone/app/contentrules/actions/logger.py\nindex dc23218..e7f8e55 100644\n--- a/plone/app/contentrules/actions/logger.py\n+++ b/plone/app/contentrules/actions/logger.py\n@@ -9,9 +9,9 @@\n from Products.CMFCore.utils import getToolByName\n from zope import schema\n from zope.component import adapter\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n from zope.interface import Interface\n+from zope.interface.interfaces import IObjectEvent\n \n import logging\n \ndiff --git a/plone/app/contentrules/actions/mail.py b/plone/app/contentrules/actions/mail.py\nindex d4d6468..45490af 100644\n--- a/plone/app/contentrules/actions/mail.py\n+++ b/plone/app/contentrules/actions/mail.py\n@@ -18,10 +18,10 @@\n from zope import schema\n from zope.component import adapter\n from zope.component import getUtility\n-from zope.interface.interfaces import ComponentLookupError\n from zope.globalrequest import getRequest\n from zope.interface import implementer\n from zope.interface import Interface\n+from zope.interface.interfaces import ComponentLookupError\n \n import logging\n import six\ndiff --git a/plone/app/contentrules/browser/assignments.py b/plone/app/contentrules/browser/assignments.py\nindex 3d30673..f28d560 100644\n--- a/plone/app/contentrules/browser/assignments.py\n+++ b/plone/app/contentrules/browser/assignments.py\n@@ -1,8 +1,8 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules import api\n+from plone.app.contentrules import PloneMessageFactory as _\n from plone.contentrules.engine.interfaces import IRuleAssignmentManager\n from plone.contentrules.engine.interfaces import IRuleStorage\n from plone.memoize.instance import memoize\ndiff --git a/plone/app/contentrules/browser/elements.py b/plone/app/contentrules/browser/elements.py\nindex 97879c6..6841092 100644\n--- a/plone/app/contentrules/browser/elements.py\n+++ b/plone/app/contentrules/browser/elements.py\n@@ -1,8 +1,8 @@\n # -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from Acquisition import aq_inner\n-from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules import api\n+from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.rule import get_assignments\n from plone.contentrules.engine import utils\n from plone.contentrules.rule.interfaces import IRuleAction\ndiff --git a/plone/app/contentrules/conditions/fileextension.py b/plone/app/contentrules/conditions/fileextension.py\nindex a15b7e6..7f94a83 100644\n--- a/plone/app/contentrules/conditions/fileextension.py\n+++ b/plone/app/contentrules/conditions/fileextension.py\n@@ -4,6 +4,7 @@\n from plone.app.contentrules.browser.formhelper import AddForm\n from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper\n from plone.app.contentrules.browser.formhelper import EditForm\n+from plone.app.contenttypes.interfaces import IFile\n from plone.contentrules.rule.interfaces import IExecutable\n from plone.contentrules.rule.interfaces import IRuleElementData\n from z3c.form import form\n@@ -11,7 +12,8 @@\n from zope.component import adapter\n from zope.interface import implementer\n from zope.interface import Interface\n-from plone.app.contenttypes.interfaces import IFile\n+\n+\n try:\n     from Products.ATContentTypes.interfaces import IFileContent\n except ImportError:\ndiff --git a/plone/app/contentrules/conditions/portaltype.py b/plone/app/contentrules/conditions/portaltype.py\nindex 3919821..41ed5ca 100644\n--- a/plone/app/contentrules/conditions/portaltype.py\n+++ b/plone/app/contentrules/conditions/portaltype.py\n@@ -13,10 +13,10 @@\n from z3c.form import form\n from zope import schema\n from zope.component import adapter\n+from zope.component.hooks import getSite\n from zope.i18n import translate\n from zope.interface import implementer\n from zope.interface import Interface\n-from zope.component.hooks import getSite\n \n \n class IPortalTypeCondition(Interface):\ndiff --git a/plone/app/contentrules/exportimport/rules.py b/plone/app/contentrules/exportimport/rules.py\nindex 6dda435..9b93e42 100644\n--- a/plone/app/contentrules/exportimport/rules.py\n+++ b/plone/app/contentrules/exportimport/rules.py\n@@ -1,7 +1,10 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_base\n+from lxml import etree\n from plone.app.contentrules import api\n-from plone.app.contentrules.exportimport.interfaces import IRuleElementExportImportHandler  # noqa\n+from plone.app.contentrules.exportimport.interfaces import (  # noqa\n+    IRuleElementExportImportHandler,\n+)\n from plone.app.contentrules.rule import get_assignments\n from plone.app.contentrules.rule import Rule\n from plone.contentrules.engine.interfaces import IRuleAssignmentManager\n@@ -10,12 +13,15 @@\n from plone.contentrules.rule.interfaces import IRuleCondition\n from plone.contentrules.rule.interfaces import IRuleElement\n from plone.contentrules.rule.interfaces import IRuleElementData\n+from plone.supermodel.utils import elementToValue\n+from plone.supermodel.utils import valueToElement\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.GenericSetup.interfaces import IBody\n from Products.GenericSetup.interfaces import ISetupEnviron\n from Products.GenericSetup.utils import _getDottedName\n from Products.GenericSetup.utils import _resolveDottedName\n from Products.GenericSetup.utils import XMLAdapterBase\n+from xml.dom import minidom\n from zope.component import adapter\n from zope.component import getUtility\n from zope.component import queryMultiAdapter\n@@ -26,10 +32,6 @@\n from zope.schema.interfaces import ICollection\n from zope.schema.interfaces import IField\n from zope.schema.interfaces import IFromUnicode\n-from plone.supermodel.utils import elementToValue, valueToElement\n-from lxml import etree\n-from xml.dom import minidom\n-\n \n import six\n \ndiff --git a/plone/app/contentrules/tests/base.py b/plone/app/contentrules/tests/base.py\nindex 4bd5bf3..6c122ce 100644\n--- a/plone/app/contentrules/tests/base.py\n+++ b/plone/app/contentrules/tests/base.py\n@@ -1,7 +1,9 @@\n # -*- coding: utf-8 -*-\n """Base class for integration tests, based on plone.app.testing\n """\n-from plone.app.contentrules.testing import PLONE_APP_CONTENTRULES_INTEGRATION_TESTING  # noqa: E501\n+from plone.app.contentrules.testing import (  # noqa: E501\n+    PLONE_APP_CONTENTRULES_INTEGRATION_TESTING,\n+)\n from plone.app.testing import login\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\ndiff --git a/plone/app/contentrules/tests/dummy.py b/plone/app/contentrules/tests/dummy.py\nindex cc658c0..45fab66 100644\n--- a/plone/app/contentrules/tests/dummy.py\n+++ b/plone/app/contentrules/tests/dummy.py\n@@ -2,8 +2,8 @@\n from OFS.SimpleItem import SimpleItem\n from plone.contentrules.rule.interfaces import IRuleElementData\n from plone.uuid.interfaces import IAttributeUUID\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import IObjectEvent\n \n \n @implementer(IRuleElementData)\ndiff --git a/plone/app/contentrules/tests/test_action_copy.py b/plone/app/contentrules/tests/test_action_copy.py\nindex 4714258..c4502e7 100644\n--- a/plone/app/contentrules/tests/test_action_copy.py\n+++ b/plone/app/contentrules/tests/test_action_copy.py\n@@ -10,8 +10,8 @@\n from plone.contentrules.rule.interfaces import IRuleAction\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import IObjectEvent\n \n \n @implementer(IObjectEvent)\ndiff --git a/plone/app/contentrules/tests/test_action_delete.py b/plone/app/contentrules/tests/test_action_delete.py\nindex 1eb8e45..d76e76b 100644\n--- a/plone/app/contentrules/tests/test_action_delete.py\n+++ b/plone/app/contentrules/tests/test_action_delete.py\n@@ -2,17 +2,17 @@\n from plone.app.contentrules.actions.delete import DeleteAction\n from plone.app.contentrules.rule import Rule\n from plone.app.contentrules.tests.base import ContentRulesTestCase\n+from plone.app.testing import login\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n from plone.contentrules.engine.interfaces import IRuleStorage\n from plone.contentrules.rule.interfaces import IExecutable\n from plone.contentrules.rule.interfaces import IRuleAction\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n-from plone.app.testing import login\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n-from plone.app.testing import setRoles\n+from zope.interface.interfaces import IObjectEvent\n \n \n @implementer(IObjectEvent)\ndiff --git a/plone/app/contentrules/tests/test_action_logger.py b/plone/app/contentrules/tests/test_action_logger.py\nindex e98cd23..051f70d 100644\n--- a/plone/app/contentrules/tests/test_action_logger.py\n+++ b/plone/app/contentrules/tests/test_action_logger.py\n@@ -10,9 +10,9 @@\n from plone.contentrules.rule.interfaces import IRuleAction\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n from zope.interface import Interface\n+from zope.interface.interfaces import IObjectEvent\n \n \n @implementer(Interface)\ndiff --git a/plone/app/contentrules/tests/test_action_mail.py b/plone/app/contentrules/tests/test_action_mail.py\nindex b67acb1..ff7f8fd 100644\n--- a/plone/app/contentrules/tests/test_action_mail.py\n+++ b/plone/app/contentrules/tests/test_action_mail.py\n@@ -17,11 +17,12 @@\n from zope.component import getMultiAdapter\n from zope.component import getSiteManager\n from zope.component import getUtility\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import IObjectEvent\n \n import unittest\n \n+\n try:\n     # Python 3\n     from email import message_from_bytes\ndiff --git a/plone/app/contentrules/tests/test_action_move.py b/plone/app/contentrules/tests/test_action_move.py\nindex c39caf1..c8f2aee 100644\n--- a/plone/app/contentrules/tests/test_action_move.py\n+++ b/plone/app/contentrules/tests/test_action_move.py\n@@ -10,8 +10,8 @@\n from plone.contentrules.rule.interfaces import IRuleAction\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import IObjectEvent\n \n \n @implementer(IObjectEvent)\ndiff --git a/plone/app/contentrules/tests/test_action_workflow.py b/plone/app/contentrules/tests/test_action_workflow.py\nindex b4859b3..3f2ca3d 100644\n--- a/plone/app/contentrules/tests/test_action_workflow.py\n+++ b/plone/app/contentrules/tests/test_action_workflow.py\n@@ -8,8 +8,8 @@\n from plone.contentrules.rule.interfaces import IRuleAction\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import IObjectEvent\n \n \n @implementer(IObjectEvent)\ndiff --git a/plone/app/contentrules/tests/test_condition_group.py b/plone/app/contentrules/tests/test_condition_group.py\nindex 2145750..63b06a1 100644\n--- a/plone/app/contentrules/tests/test_condition_group.py\n+++ b/plone/app/contentrules/tests/test_condition_group.py\n@@ -8,8 +8,8 @@\n from plone.contentrules.rule.interfaces import IRuleCondition\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import IObjectEvent\n \n \n @implementer(IObjectEvent)\ndiff --git a/plone/app/contentrules/tests/test_condition_portal_type.py b/plone/app/contentrules/tests/test_condition_portal_type.py\nindex 3bdfedf..7f81ad0 100644\n--- a/plone/app/contentrules/tests/test_condition_portal_type.py\n+++ b/plone/app/contentrules/tests/test_condition_portal_type.py\n@@ -9,8 +9,8 @@\n from Products.CMFCore.interfaces import ITypesTool\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import IObjectEvent\n \n \n @implementer(IObjectEvent)\ndiff --git a/plone/app/contentrules/tests/test_condition_role.py b/plone/app/contentrules/tests/test_condition_role.py\nindex 252cf80..a7661a5 100644\n--- a/plone/app/contentrules/tests/test_condition_role.py\n+++ b/plone/app/contentrules/tests/test_condition_role.py\n@@ -8,8 +8,8 @@\n from plone.contentrules.rule.interfaces import IRuleCondition\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import IObjectEvent\n \n \n @implementer(IObjectEvent)\ndiff --git a/plone/app/contentrules/tests/test_condition_tales_expression.py b/plone/app/contentrules/tests/test_condition_tales_expression.py\nindex 201330b..e7738f1 100644\n--- a/plone/app/contentrules/tests/test_condition_tales_expression.py\n+++ b/plone/app/contentrules/tests/test_condition_tales_expression.py\n@@ -1,6 +1,10 @@\n # -*- coding: utf-8 -*-\n-from plone.app.contentrules.conditions.talesexpression import TalesExpressionCondition  # noqa\n-from plone.app.contentrules.conditions.talesexpression import TalesExpressionEditFormView  # noqa\n+from plone.app.contentrules.conditions.talesexpression import (  # noqa\n+    TalesExpressionCondition,\n+)\n+from plone.app.contentrules.conditions.talesexpression import (  # noqa\n+    TalesExpressionEditFormView,\n+)\n from plone.app.contentrules.rule import Rule\n from plone.app.contentrules.tests.base import ContentRulesTestCase\n from plone.contentrules.engine.interfaces import IRuleStorage\n@@ -8,8 +12,8 @@\n from plone.contentrules.rule.interfaces import IRuleCondition\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import IObjectEvent\n \n \n @implementer(IObjectEvent)\ndiff --git a/plone/app/contentrules/tests/test_condition_wfstate.py b/plone/app/contentrules/tests/test_condition_wfstate.py\nindex 710d25d..f1302d0 100644\n--- a/plone/app/contentrules/tests/test_condition_wfstate.py\n+++ b/plone/app/contentrules/tests/test_condition_wfstate.py\n@@ -8,8 +8,8 @@\n from plone.contentrules.rule.interfaces import IRuleCondition\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import IObjectEvent\n \n \n @implementer(IObjectEvent)\ndiff --git a/plone/app/contentrules/tests/test_condition_wftransition.py b/plone/app/contentrules/tests/test_condition_wftransition.py\nindex 4de5dfb..13c04f9 100644\n--- a/plone/app/contentrules/tests/test_condition_wftransition.py\n+++ b/plone/app/contentrules/tests/test_condition_wftransition.py\n@@ -1,6 +1,10 @@\n # -*- coding: utf-8 -*-\n-from plone.app.contentrules.conditions.wftransition import WorkflowTransitionCondition  # noqa\n-from plone.app.contentrules.conditions.wftransition import WorkflowTransitionEditFormView  # noqa\n+from plone.app.contentrules.conditions.wftransition import (  # noqa\n+    WorkflowTransitionCondition,\n+)\n+from plone.app.contentrules.conditions.wftransition import (  # noqa\n+    WorkflowTransitionEditFormView,\n+)\n from plone.app.contentrules.rule import Rule\n from plone.app.contentrules.tests.base import ContentRulesTestCase\n from plone.contentrules.engine.interfaces import IRuleStorage\ndiff --git a/plone/app/contentrules/tests/test_configuration.py b/plone/app/contentrules/tests/test_configuration.py\nindex 885cd7a..43d0f5a 100644\n--- a/plone/app/contentrules/tests/test_configuration.py\n+++ b/plone/app/contentrules/tests/test_configuration.py\n@@ -1,5 +1,7 @@\n # -*- coding: utf-8 -*-\n-from plone.app.contentrules.testing import PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING  # noqa: E501\n+from plone.app.contentrules.testing import (  # noqa: E501\n+    PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING,\n+)\n from plone.app.testing import applyProfile\n from plone.app.testing import login\n from plone.app.testing import setRoles\ndiff --git a/plone/app/contentrules/tests/test_rule_assignment_mapping.py b/plone/app/contentrules/tests/test_rule_assignment_mapping.py\nindex 5f563b4..0b90bbe 100644\n--- a/plone/app/contentrules/tests/test_rule_assignment_mapping.py\n+++ b/plone/app/contentrules/tests/test_rule_assignment_mapping.py\n@@ -3,7 +3,9 @@\n from plone.app.contentrules.rule import get_assignments\n from plone.app.contentrules.rule import insert_assignment\n from plone.app.contentrules.rule import Rule\n-from plone.app.contentrules.testing import PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING  # noqa: E501\n+from plone.app.contentrules.testing import (  # noqa: E501\n+    PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING,\n+)\n from plone.app.contentrules.tests.base import ContentRulesTestCase\n from plone.app.testing import login\n from plone.app.testing import setRoles\ndiff --git a/plone/app/contentrules/tests/test_traversal.py b/plone/app/contentrules/tests/test_traversal.py\nindex 26b1c49..a3c224b 100644\n--- a/plone/app/contentrules/tests/test_traversal.py\n+++ b/plone/app/contentrules/tests/test_traversal.py\n@@ -1,8 +1,8 @@\n # -*- coding: utf-8 -*-\n-from Acquisition import aq_base\n-from Acquisition import aq_parent\n from .dummy import DummyAction\n from .dummy import DummyCondition\n+from Acquisition import aq_base\n+from Acquisition import aq_parent\n from plone.app.contentrules.rule import Rule\n from plone.app.contentrules.tests.base import ContentRulesTestCase\n from plone.contentrules.engine.interfaces import IRuleStorage\ndiff --git a/setup.cfg b/setup.cfg\nindex 190e1a2..6b378d8 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -8,3 +8,10 @@ universal = 1\n \n [zest.releaser]\n create-wheel = yes\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\ndiff --git a/setup.py b/setup.py\nindex eb8dbc9..ca6a8f9 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,5 +1,7 @@\n # -*- coding: utf-8 -*-\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n+\n \n version = \'5.0.0a5.dev0\'\n \n'

Repository: plone.app.contentrules


Branch: refs/heads/master
Date: 2022-05-01T01:39:10+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentrules/commit/95e35d7d5e1e862f4d88d3b8104f1b6271d84d57

black

Files changed:
M bootstrap.py
M plone/__init__.py
M plone/app/__init__.py
M plone/app/contentrules/__init__.py
M plone/app/contentrules/actions/__init__.py
M plone/app/contentrules/actions/copy.py
M plone/app/contentrules/actions/delete.py
M plone/app/contentrules/actions/logger.py
M plone/app/contentrules/actions/mail.py
M plone/app/contentrules/actions/move.py
M plone/app/contentrules/actions/notify.py
M plone/app/contentrules/actions/versioning.py
M plone/app/contentrules/actions/workflow.py
M plone/app/contentrules/api.py
M plone/app/contentrules/browser/adding.py
M plone/app/contentrules/browser/assignments.py
M plone/app/contentrules/browser/controlpanel.py
M plone/app/contentrules/browser/elements.py
M plone/app/contentrules/browser/formhelper.py
M plone/app/contentrules/browser/info.py
M plone/app/contentrules/browser/interfaces.py
M plone/app/contentrules/browser/navigation.py
M plone/app/contentrules/browser/rule.py
M plone/app/contentrules/browser/traversal.py
M plone/app/contentrules/conditions/fileextension.py
M plone/app/contentrules/conditions/group.py
M plone/app/contentrules/conditions/portaltype.py
M plone/app/contentrules/conditions/role.py
M plone/app/contentrules/conditions/talesexpression.py
M plone/app/contentrules/conditions/wfstate.py
M plone/app/contentrules/conditions/wftransition.py
M plone/app/contentrules/exportimport/rules.py
M plone/app/contentrules/handlers.py
M plone/app/contentrules/namechooser.py
M plone/app/contentrules/rule.py
M plone/app/contentrules/testing.py
M plone/app/contentrules/tests/base.py
M plone/app/contentrules/tests/dummy.py
M plone/app/contentrules/tests/test_action_copy.py
M plone/app/contentrules/tests/test_action_delete.py
M plone/app/contentrules/tests/test_action_logger.py
M plone/app/contentrules/tests/test_action_mail.py
M plone/app/contentrules/tests/test_action_modify.py
M plone/app/contentrules/tests/test_action_move.py
M plone/app/contentrules/tests/test_action_notify.py
M plone/app/contentrules/tests/test_action_versioning.py
M plone/app/contentrules/tests/test_action_workflow.py
M plone/app/contentrules/tests/test_browser.py
M plone/app/contentrules/tests/test_cascading_rule.py
M plone/app/contentrules/tests/test_condition_group.py
M plone/app/contentrules/tests/test_condition_portal_type.py
M plone/app/contentrules/tests/test_condition_role.py
M plone/app/contentrules/tests/test_condition_tales_expression.py
M plone/app/contentrules/tests/test_condition_wfstate.py
M plone/app/contentrules/tests/test_condition_wftransition.py
M plone/app/contentrules/tests/test_configuration.py
M plone/app/contentrules/tests/test_events.py
M plone/app/contentrules/tests/test_handlers.py
M plone/app/contentrules/tests/test_rule_assignment_mapping.py
M plone/app/contentrules/tests/test_rule_management_views.py
M plone/app/contentrules/tests/test_setup.py
M plone/app/contentrules/tests/test_traversal.py
M plone/app/contentrules/tests/utils.py
M setup.py

b'diff --git a/bootstrap.py b/bootstrap.py\nindex 78dd81f..f9cd227 100644\n--- a/bootstrap.py\n+++ b/bootstrap.py\n@@ -28,7 +28,7 @@\n \n tmpeggs = tempfile.mkdtemp()\n \n-usage = \'\'\'\\\n+usage = """\\\n [DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n \n Bootstraps a buildout-based project.\n@@ -38,28 +38,40 @@\n \n Note that by using --find-links to point to local resources, you can keep \n this script from going over the network.\n-\'\'\'\n+"""\n \n parser = OptionParser(usage=usage)\n parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n \n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n+parser.add_option(\n+    "-t",\n+    "--accept-buildout-test-releases",\n+    dest="accept_buildout_test_releases",\n+    action="store_true",\n+    default=False,\n+    help=(\n+        "Normally, if you do not specify a --version, the "\n+        "bootstrap script and buildout gets the newest "\n+        "*final* versions of zc.buildout and its recipes and "\n+        "extensions for you.  If you use this flag, "\n+        "bootstrap and buildout will get the newest releases "\n+        "even if they are alphas or betas."\n+    ),\n+)\n+parser.add_option(\n+    "-c",\n+    "--config-file",\n+    help=("Specify the path to the buildout configuration " "file to be used."),\n+)\n+parser.add_option(\n+    "-f", "--find-links", help=("Specify a URL to search for buildout releases")\n+)\n+parser.add_option(\n+    "--allow-site-packages",\n+    action="store_true",\n+    default=False,\n+    help=("Let bootstrap.py use existing site packages"),\n+)\n \n \n options, args = parser.parse_args()\n@@ -76,22 +88,22 @@\n     from urllib2 import urlopen\n \n ez = {}\n-exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n+exec(urlopen("https://bootstrap.pypa.io/ez_setup.py").read(), ez)\n \n if not options.allow_site_packages:\n     # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions \n+    # this will remove them from the path to ensure that incompatible versions\n     # of setuptools are not in the path\n     import site\n \n-    # inside a virtualenv, there is no \'getsitepackages\'. \n+    # inside a virtualenv, there is no \'getsitepackages\'.\n     # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n+    if hasattr(site, "getsitepackages"):\n         for sitepackage_path in site.getsitepackages():\n             sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n \n setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-ez[\'use_setuptools\'](**setup_args)\n+ez["use_setuptools"](**setup_args)\n import pkg_resources\n import setuptools\n \n@@ -107,36 +119,43 @@\n \n ws = pkg_resources.working_set\n \n-cmd = [sys.executable, \'-c\',\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n+cmd = [\n+    sys.executable,\n+    "-c",\n+    "from setuptools.command.easy_install import main; main()",\n+    "-mZqNxd",\n+    tmpeggs,\n+]\n \n find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n+    "bootstrap-testing-find-links",\n+    options.find_links\n+    or (\n+        "http://downloads.buildout.org/"\n+        if options.accept_buildout_test_releases\n+        else None\n+    ),\n+)\n if find_links:\n-    cmd.extend([\'-f\', find_links])\n+    cmd.extend(["-f", find_links])\n \n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n+setuptools_path = ws.find(pkg_resources.Requirement.parse("setuptools")).location\n \n-requirement = \'zc.buildout\'\n+requirement = "zc.buildout"\n version = options.version\n if version is None and not options.accept_buildout_test_releases:\n     # Figure out the most recent final version of zc.buildout.\n     import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n+\n+    _final_parts = "*final-", "*final"\n \n     def _final_version(parsed_version):\n         for part in parsed_version:\n-            if (part[:1] == \'*\') and (part not in _final_parts):\n+            if (part[:1] == "*") and (part not in _final_parts):\n                 return False\n         return True\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n+\n+    index = setuptools.package_index.PackageIndex(search_path=[setuptools_path])\n     if find_links:\n         index.add_find_links((find_links,))\n     req = pkg_resources.Requirement.parse(requirement)\n@@ -155,15 +174,14 @@ def _final_version(parsed_version):\n             best.sort()\n             version = best[-1].version\n if version:\n-    requirement = \'==\'.join((requirement, version))\n+    requirement = "==".join((requirement, version))\n cmd.append(requirement)\n \n import subprocess\n \n \n if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n+    raise Exception("Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n \n ######################################################################\n # Import and run buildout\n@@ -173,12 +191,12 @@ def _final_version(parsed_version):\n import zc.buildout.buildout\n \n \n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n+if not [a for a in args if "=" not in a]:\n+    args.append("bootstrap")\n \n # if -c was provided, we push it back into args for buildout\' main function\n if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n+    args[0:0] = ["-c", options.config_file]\n \n zc.buildout.buildout.main(args)\n shutil.rmtree(tmpeggs)\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..03d08ff 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af..03d08ff 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/contentrules/__init__.py b/plone/app/contentrules/__init__.py\nindex 056463f..5009377 100644\n--- a/plone/app/contentrules/__init__.py\n+++ b/plone/app/contentrules/__init__.py\n@@ -3,4 +3,4 @@\n from zope.i18nmessageid import MessageFactory\n \n \n-PloneMessageFactory = MessageFactory(\'plone\')\n+PloneMessageFactory = MessageFactory("plone")\ndiff --git a/plone/app/contentrules/actions/__init__.py b/plone/app/contentrules/actions/__init__.py\nindex 9089cfe..7527d8f 100644\n--- a/plone/app/contentrules/actions/__init__.py\n+++ b/plone/app/contentrules/actions/__init__.py\n@@ -16,26 +16,26 @@ class ContentWrapper(object):\n     """\n \n     def __init__(self, content):\n-        self.__dict__[\'content\'] = content\n+        self.__dict__["content"] = content\n \n     @property\n     def target_folder(self):\n         content = self.content\n \n-        if content.target_folder and content.target_folder[0] == \'/\':\n+        if content.target_folder and content.target_folder[0] == "/":\n             # need to convert to uuid\n             site = getSite()\n-            site_path = \'/\'.join(site.getPhysicalPath())\n-            path = os.path.join(site_path, content.target_folder.lstrip(\'/\'))\n+            site_path = "/".join(site.getPhysicalPath())\n+            path = os.path.join(site_path, content.target_folder.lstrip("/"))\n             target = site.restrictedTraverse(path, None)\n             if target is not None:\n                 return IUUID(target, None)\n \n     def __getattr__(self, name, default=None):\n-        return getattr(self.__dict__[\'content\'], name, default)\n+        return getattr(self.__dict__["content"], name, default)\n \n     def __setattr__(self, name, value):\n-        setattr(self.__dict__[\'content\'], name, value)\n+        setattr(self.__dict__["content"], name, value)\n \n \n class ActionAddForm(AddForm):\n@@ -47,17 +47,16 @@ def create(self, data):\n         is what the z3c form widget uses, to paths.\n         """\n         a = self.Type()\n-        if data.get(\'target_folder\', None):\n+        if data.get("target_folder", None):\n             site = getSite()\n-            site_path = \'/\'.join(site.getPhysicalPath())\n-            path = uuidToPhysicalPath(data[\'target_folder\'])\n+            site_path = "/".join(site.getPhysicalPath())\n+            path = uuidToPhysicalPath(data["target_folder"])\n             if path:\n-                data[\'target_folder\'] = path[len(site_path):]\n+                data["target_folder"] = path[len(site_path) :]\n         form.applyChanges(self, a, data)\n         return a\n \n \n class ActionEditForm(EditForm):\n-\n     def getContent(self):\n         return ContentWrapper(super(ActionEditForm, self).getContent())\ndiff --git a/plone/app/contentrules/actions/copy.py b/plone/app/contentrules/actions/copy.py\nindex 4157a09..f60b67f 100644\n--- a/plone/app/contentrules/actions/copy.py\n+++ b/plone/app/contentrules/actions/copy.py\n@@ -30,8 +30,8 @@ class ICopyAction(Interface):\n     """\n \n     target_folder = schema.Choice(\n-        title=_(u\'Target folder\'),\n-        description=_(u\'As a path relative to the portal root.\'),\n+        title=_(u"Target folder"),\n+        description=_(u"As a path relative to the portal root."),\n         required=True,\n         source=CatalogSource(is_folderish=True),\n     )\n@@ -39,23 +39,20 @@ class ICopyAction(Interface):\n \n @implementer(ICopyAction, IRuleElementData)\n class CopyAction(SimpleItem):\n-    """The actual persistent implementation of the action element.\n-    """\n+    """The actual persistent implementation of the action element."""\n \n-    target_folder = \'\'\n-    element = \'plone.actions.Copy\'\n+    target_folder = ""\n+    element = "plone.actions.Copy"\n \n     @property\n     def summary(self):\n-        return _(u\'Copy to folder ${folder}.\',\n-                 mapping=dict(folder=self.target_folder))\n+        return _(u"Copy to folder ${folder}.", mapping=dict(folder=self.target_folder))\n \n \n @adapter(Interface, ICopyAction, Interface)\n @implementer(IExecutable)\n class CopyActionExecutor(object):\n-    """The executor for this action.\n-    """\n+    """The executor for this action."""\n \n     def __init__(self, context, element, event):\n         self.context = context\n@@ -63,14 +60,14 @@ def __init__(self, context, element, event):\n         self.event = event\n \n     def __call__(self):\n-        portal_url = getToolByName(self.context, \'portal_url\', None)\n+        portal_url = getToolByName(self.context, "portal_url", None)\n         if portal_url is None:\n             return False\n \n         obj = self.event.object\n \n         path = self.element.target_folder\n-        if len(path) > 1 and path[0] == \'/\':\n+        if len(path) > 1 and path[0] == "/":\n             path = path[1:]\n         target = portal_url.getPortalObject().unrestrictedTraverse(\n             str(path),\n@@ -80,10 +77,7 @@ def __call__(self):\n         if target is None:\n             self.error(\n                 obj,\n-                _(\n-                    u\'Target folder ${target} does not exist.\',\n-                    mapping={\'target\': path}\n-                )\n+                _(u"Target folder ${target} does not exist.", mapping={"target": path}),\n             )\n             return False\n \n@@ -110,43 +104,45 @@ def __call__(self):\n \n         obj._postCopy(target, op=0)\n \n-        OFS.subscribers.compatibilityCall(\'manage_afterClone\', obj, obj)\n+        OFS.subscribers.compatibilityCall("manage_afterClone", obj, obj)\n \n         notify(ObjectClonedEvent(obj))\n \n         return True\n \n     def error(self, obj, error):\n-        request = getattr(self.context, \'REQUEST\', None)\n+        request = getattr(self.context, "REQUEST", None)\n         if request is not None:\n             title = utils.pretty_title_or_id(obj, obj)\n             message = _(\n-                u\'Unable to copy ${name} as part of content rule \'\n+                u"Unable to copy ${name} as part of content rule "\n                 u"\'copy\' action: ${error}",\n-                mapping={\'name\': title, \'error\': error}\n+                mapping={"name": title, "error": error},\n             )\n-            IStatusMessage(request).addStatusMessage(message, type=\'error\')\n+            IStatusMessage(request).addStatusMessage(message, type="error")\n \n     def generate_id(self, target, old_id):\n-        taken = getattr(aq_base(target), \'has_key\', None)\n+        taken = getattr(aq_base(target), "has_key", None)\n         if taken is None:\n             item_ids = set(target.objectIds())\n \n-            def taken(x): return x in item_ids\n+            def taken(x):\n+                return x in item_ids\n+\n         if not taken(old_id):\n             return old_id\n         idx = 1\n-        while taken(\'{0}.{1}\'.format(old_id, idx)):\n+        while taken("{0}.{1}".format(old_id, idx)):\n             idx += 1\n-        return \'{0}.{1}\'.format(old_id, idx)\n+        return "{0}.{1}".format(old_id, idx)\n \n \n class CopyAddForm(ActionAddForm):\n-    """An add form for move-to-folder actions.\n-    """\n+    """An add form for move-to-folder actions."""\n+\n     schema = ICopyAction\n-    label = _(u\'Add Copy Action\')\n-    description = _(u\'A copy action can copy an object to a different folder.\')\n+    label = _(u"Add Copy Action")\n+    description = _(u"A copy action can copy an object to a different folder.")\n     Type = CopyAction\n \n \n@@ -159,10 +155,11 @@ class CopyEditForm(ActionEditForm):\n \n     z3c.form does all the magic here.\n     """\n+\n     schema = ICopyAction\n-    label = _(u\'Edit Copy Action\')\n-    description = _(u\'A copy action can copy an object to a different folder.\')\n-    form_name = _(u\'Configure element\')\n+    label = _(u"Edit Copy Action")\n+    description = _(u"A copy action can copy an object to a different folder.")\n+    form_name = _(u"Configure element")\n \n \n class CopyEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/actions/delete.py b/plone/app/contentrules/actions/delete.py\nindex 4193b5b..f92d262 100644\n--- a/plone/app/contentrules/actions/delete.py\n+++ b/plone/app/contentrules/actions/delete.py\n@@ -17,24 +17,21 @@\n \n \n class IDeleteAction(Interface):\n-    """Interface for the configurable aspects of a delete action.\n-    """\n+    """Interface for the configurable aspects of a delete action."""\n \n \n @implementer(IDeleteAction, IRuleElementData)\n class DeleteAction(SimpleItem):\n-    """The actual persistent implementation of the action element.\n-    """\n+    """The actual persistent implementation of the action element."""\n \n-    element = \'plone.actions.Delete\'\n-    summary = _(u\'Delete object\')\n+    element = "plone.actions.Delete"\n+    summary = _(u"Delete object")\n \n \n @adapter(Interface, IDeleteAction, Interface)\n @implementer(IExecutable)\n class DeleteActionExecutor(object):\n-    """The executor for this action.\n-    """\n+    """The executor for this action."""\n \n     def __init__(self, context, element, event):\n         self.context = context\n@@ -58,17 +55,18 @@ def __call__(self):\n         return True\n \n     def error(self, obj, error):\n-        request = getattr(self.context, \'REQUEST\', None)\n+        request = getattr(self.context, "REQUEST", None)\n         if request is not None:\n             title = utils.pretty_title_or_id(obj, obj)\n-            message = _(u"Unable to remove ${name} as part of content rule \'delete\' action: ${error}",  # noqa\n-                          mapping={\'name\': title, \'error\': error})\n-            IStatusMessage(request).addStatusMessage(message, type=\'error\')\n+            message = _(\n+                u"Unable to remove ${name} as part of content rule \'delete\' action: ${error}",  # noqa\n+                mapping={"name": title, "error": error},\n+            )\n+            IStatusMessage(request).addStatusMessage(message, type="error")\n \n \n class DeleteAddForm(NullAddForm):\n-    """A degenerate "add form" for delete actions.\n-    """\n+    """A degenerate "add form" for delete actions."""\n \n     def create(self):\n         return DeleteAction()\ndiff --git a/plone/app/contentrules/actions/logger.py b/plone/app/contentrules/actions/logger.py\nindex e7f8e55..2dad4ae 100644\n--- a/plone/app/contentrules/actions/logger.py\n+++ b/plone/app/contentrules/actions/logger.py\n@@ -16,11 +16,9 @@\n import logging\n \n \n-logger = logging.getLogger(\'plone.contentrules.logger\')\n+logger = logging.getLogger("plone.contentrules.logger")\n handler = logging.StreamHandler()\n-formatter = logging.Formatter(\n-    \'%(asctime)s - %(name)s - %(levelname)s -  %(message)s\'\n-)\n+formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s -  %(message)s")\n handler.setFormatter(formatter)\n logger.addHandler(handler)\n \n@@ -31,23 +29,20 @@ class ILoggerAction(Interface):\n     This is also used to create add and edit forms, below.\n     """\n \n-    targetLogger = schema.ASCIILine(title=_(u\'Logger name\'),\n-                                    default=\'Plone\')\n+    targetLogger = schema.ASCIILine(title=_(u"Logger name"), default="Plone")\n \n-    loggingLevel = schema.Int(title=_(u\'Logging level\'),\n-                              default=20)  # INFO\n+    loggingLevel = schema.Int(title=_(u"Logging level"), default=20)  # INFO\n \n     message = schema.TextLine(\n-        title=_(u\'Message\'),\n+        title=_(u"Message"),\n         description=_(\n-            \'help_contentrules_logger_message\',\n-            default=u\'&e = the triggering event, \'\n-                    u\'&c = the context, &u = the user\',\n+            "help_contentrules_logger_message",\n+            default=u"&e = the triggering event, " u"&c = the context, &u = the user",\n         ),\n         default=_(\n-            \'text_contentrules_logger_message\',\n-            default=u\'Caught &e at &c by &u\',\n-        )\n+            "text_contentrules_logger_message",\n+            default=u"Caught &e at &c by &u",\n+        ),\n     )\n \n \n@@ -58,15 +53,15 @@ class LoggerAction(SimpleItem):\n     Note that we must mix in Explicit to keep Zope 2 security happy.\n     """\n \n-    targetLogger = \'\'\n-    loggingLevel = \'\'\n-    message = \'\'\n+    targetLogger = ""\n+    loggingLevel = ""\n+    message = ""\n \n-    element = \'plone.actions.Logger\'\n+    element = "plone.actions.Logger"\n \n     @property\n     def summary(self):\n-        return _(u\'Log message ${message}\', mapping=dict(message=self.message))\n+        return _(u"Log message ${message}", mapping=dict(message=self.message))\n \n \n @adapter(Interface, ILoggerAction, Interface)\n@@ -84,24 +79,23 @@ def __init__(self, context, element, event):\n \n     def processedMessage(self):\n         processedMessage = self.element.message\n-        if \'&e\' in processedMessage:\n+        if "&e" in processedMessage:\n             event_class = self.event.__class__\n             processedMessage = processedMessage.replace(\n-                \'&e\',\n-                \'{0}.{1}\'.format(\n+                "&e",\n+                "{0}.{1}".format(\n                     event_class.__module__,\n                     event_class.__name__,\n-                )\n+                ),\n             )\n \n-        if \'&c\' in processedMessage and IObjectEvent.providedBy(self.event):\n-            processedMessage = processedMessage.replace(\n-                \'&c\', repr(self.event.object))\n+        if "&c" in processedMessage and IObjectEvent.providedBy(self.event):\n+            processedMessage = processedMessage.replace("&c", repr(self.event.object))\n \n-        if \'&u\' in processedMessage:\n-            mtool = getToolByName(self.context, \'portal_membership\')\n+        if "&u" in processedMessage:\n+            mtool = getToolByName(self.context, "portal_membership")\n             member = mtool.getAuthenticatedMember().getUserName()\n-            processedMessage = processedMessage.replace(\'&u\', member)\n+            processedMessage = processedMessage.replace("&u", member)\n \n         return processedMessage\n \n@@ -112,12 +106,12 @@ def __call__(self):\n \n \n class LoggerAddForm(ActionAddForm):\n-    """An add form for logger rule actions.\n-    """\n+    """An add form for logger rule actions."""\n+\n     schema = ILoggerAction\n-    label = _(u\'Add Logger Action\')\n-    description = _(u\'A logger action can output a message to the system log.\')\n-    form_name = _(u\'Configure element\')\n+    label = _(u"Add Logger Action")\n+    description = _(u"A logger action can output a message to the system log.")\n+    form_name = _(u"Configure element")\n     Type = LoggerAction\n \n \n@@ -130,10 +124,11 @@ class LoggerEditForm(ActionEditForm):\n \n     z3c.form does all the magic here.\n     """\n+\n     schema = ILoggerAction\n-    label = _(u\'Edit Logger Action\')\n-    description = _(u\'A logger action can output a message to the system log.\')\n-    form_name = _(u\'Configure element\')\n+    label = _(u"Edit Logger Action")\n+    description = _(u"A logger action can output a message to the system log.")\n+    form_name = _(u"Configure element")\n \n \n class LoggerEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/actions/mail.py b/plone/app/contentrules/actions/mail.py\nindex 45490af..2f249d0 100644\n--- a/plone/app/contentrules/actions/mail.py\n+++ b/plone/app/contentrules/actions/mail.py\n@@ -27,41 +27,39 @@\n import six\n \n \n-logger = logging.getLogger(\'plone.contentrules\')\n+logger = logging.getLogger("plone.contentrules")\n \n \n class IMailAction(Interface):\n-    """Definition of the configuration available for a mail action\n-    """\n+    """Definition of the configuration available for a mail action"""\n+\n     subject = schema.TextLine(\n-        title=_(u\'Subject\'),\n-        description=_(u\'Subject of the message\'),\n-        required=True\n+        title=_(u"Subject"), description=_(u"Subject of the message"), required=True\n     )\n     source = schema.TextLine(\n-        title=_(u\'Email source\'),\n+        title=_(u"Email source"),\n         description=_(\n-            \'The email address that sends the email. If no email is provided \'\n-            \'here, it will use the portal from address.\'\n+            "The email address that sends the email. If no email is provided "\n+            "here, it will use the portal from address."\n         ),\n-        required=False\n+        required=False,\n     )\n     recipients = schema.TextLine(\n-        title=_(u\'Email recipients\'),\n+        title=_(u"Email recipients"),\n         description=_(\n-            \'The email where you want to send this message. To send it to \'\n-            \'different email addresses, just separate them with ,\'\n+            "The email where you want to send this message. To send it to "\n+            "different email addresses, just separate them with ,"\n         ),\n-        required=True\n+        required=True,\n     )\n     exclude_actor = schema.Bool(\n-        title=_(u\'Exclude actor from recipients\'),\n-        description=_(\'Do not send the email to the user that did the action.\')\n+        title=_(u"Exclude actor from recipients"),\n+        description=_("Do not send the email to the user that did the action."),\n     )\n     message = schema.Text(\n-        title=_(u\'Message\'),\n-        description=_(u\'The message that you want to mail.\'),\n-        required=True\n+        title=_(u"Message"),\n+        description=_(u"The message that you want to mail."),\n+        required=True,\n     )\n \n \n@@ -71,39 +69,38 @@ class MailAction(SimpleItem):\n     The implementation of the action defined before\n     """\n \n-    subject = u\'\'\n-    source = u\'\'\n-    recipients = u\'\'\n-    message = u\'\'\n+    subject = u""\n+    source = u""\n+    recipients = u""\n+    message = u""\n     exclude_actor = False\n \n-    element = \'plone.actions.Mail\'\n+    element = "plone.actions.Mail"\n \n     @property\n     def summary(self):\n-        return _(u\'Email report to ${recipients}\',\n-                 mapping=dict(recipients=self.recipients))\n+        return _(\n+            u"Email report to ${recipients}", mapping=dict(recipients=self.recipients)\n+        )\n \n \n @implementer(IExecutable)\n @adapter(Interface, IMailAction, Interface)\n class MailActionExecutor(object):\n-    """The executor for this action.\n-    """\n+    """The executor for this action."""\n \n     def __init__(self, context, element, event):\n         self.context = context\n         self.element = element\n         self.event = event\n         registry = getUtility(IRegistry)\n-        self.mail_settings = registry.forInterface(IMailSchema,\n-                                                   prefix=\'plone\')\n+        self.mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n \n     def __call__(self):\n-        mailhost = getToolByName(aq_inner(self.context), \'MailHost\')\n+        mailhost = getToolByName(aq_inner(self.context), "MailHost")\n         if not mailhost:\n             raise ComponentLookupError(\n-                \'You must have a Mailhost utility to execute this action\'\n+                "You must have a Mailhost utility to execute this action"\n             )\n \n         email_charset = self.mail_settings.email_charset\n@@ -124,39 +121,35 @@ def __call__(self):\n                 if request:\n                     messages = IStatusMessage(request)\n                     msg = _(\n-                        u\'Error sending email from content rule. You must \'\n-                        u\'provide a source address for mail \'\n-                        u\'actions or enter an email in the portal properties\'\n+                        u"Error sending email from content rule. You must "\n+                        u"provide a source address for mail "\n+                        u"actions or enter an email in the portal properties"\n                     )\n-                    messages.add(msg, type=u\'error\')\n+                    messages.add(msg, type=u"error")\n                 return False\n \n             from_name = self.mail_settings.email_from_name.strip(\'"\')\n             if six.PY2 and isinstance(from_name, six.text_type):\n-                from_name = from_name.encode(\'utf8\')\n+                from_name = from_name.encode("utf8")\n             source = \'"{0}" <{1}>\'.format(from_name, from_address)\n \n         recip_string = interpolator(self.element.recipients)\n         if recip_string:  # check recipient is not None or empty string\n-            recipients = set([\n-                str(mail.strip()) for mail in recip_string.split(\',\')\n-                if mail.strip()\n-            ])\n+            recipients = set(\n+                [str(mail.strip()) for mail in recip_string.split(",") if mail.strip()]\n+            )\n         else:\n             recipients = set()\n \n         if self.element.exclude_actor:\n-            mtool = getToolByName(aq_inner(self.context), \'portal_membership\')\n-            actor_email = mtool.getAuthenticatedMember().getProperty(\n-                \'email\',\n-                \'\'\n-            )\n+            mtool = getToolByName(aq_inner(self.context), "portal_membership")\n+            actor_email = mtool.getAuthenticatedMember().getProperty("email", "")\n             if actor_email in recipients:\n                 recipients.remove(actor_email)\n \n         # prepend interpolated message with \\n to avoid interpretation\n         # of first line as header\n-        message = u\'\\n{0}\'.format(interpolator(self.element.message))\n+        message = u"\\n{0}".format(interpolator(self.element.message))\n \n         subject = interpolator(self.element.subject)\n \n@@ -168,12 +161,17 @@ def __call__(self):\n                 # AlecM thinks this wouldn\'t be a problem if mail queuing was\n                 # always on -- but it isn\'t. (stevem)\n                 # so we test if queue is not on to set immediate\n-                mailhost.send(message, email_recipient, source,\n-                              subject=subject, charset=email_charset,\n-                              immediate=not mailhost.smtp_queue)\n+                mailhost.send(\n+                    message,\n+                    email_recipient,\n+                    source,\n+                    subject=subject,\n+                    charset=email_charset,\n+                    immediate=not mailhost.smtp_queue,\n+                )\n             except (MailHostError, SMTPException):\n                 logger.exception(\n-                    \'mail error: Attempt to send mail in content rule failed\'\n+                    "mail error: Attempt to send mail in content rule failed"\n                 )\n \n         return True\n@@ -183,13 +181,14 @@ class MailAddForm(ActionAddForm):\n     """\n     An add form for the mail action\n     """\n+\n     schema = IMailAction\n-    label = _(u\'Add Mail Action\')\n-    description = _(u\'A mail action can mail different recipient.\')\n-    form_name = _(u\'Configure element\')\n+    label = _(u"Add Mail Action")\n+    description = _(u"A mail action can mail different recipient.")\n+    form_name = _(u"Configure element")\n     Type = MailAction\n     # custom template will allow us to add help text\n-    template = ViewPageTemplateFile(\'templates/mail.pt\')\n+    template = ViewPageTemplateFile("templates/mail.pt")\n \n \n class MailAddFormView(ContentRuleFormWrapper):\n@@ -200,13 +199,14 @@ class MailEditForm(ActionEditForm):\n     """\n     An edit form for the mail action\n     """\n+\n     schema = IMailAction\n-    label = _(u\'Edit Mail Action\')\n-    description = _(u\'A mail action can mail different recipient.\')\n-    form_name = _(u\'Configure element\')\n+    label = _(u"Edit Mail Action")\n+    description = _(u"A mail action can mail different recipient.")\n+    form_name = _(u"Configure element")\n \n     # custom template will allow us to add help text\n-    template = ViewPageTemplateFile(\'templates/mail.pt\')\n+    template = ViewPageTemplateFile("templates/mail.pt")\n \n \n class MailEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/actions/move.py b/plone/app/contentrules/actions/move.py\nindex c343331..039a002 100644\n--- a/plone/app/contentrules/actions/move.py\n+++ b/plone/app/contentrules/actions/move.py\n@@ -32,8 +32,8 @@ class IMoveAction(Interface):\n     """\n \n     target_folder = schema.Choice(\n-        title=_(u\'Target folder\'),\n-        description=_(u\'As a path relative to the portal root.\'),\n+        title=_(u"Target folder"),\n+        description=_(u"As a path relative to the portal root."),\n         required=True,\n         source=CatalogSource(is_folderish=True),\n     )\n@@ -41,25 +41,20 @@ class IMoveAction(Interface):\n \n @implementer(IMoveAction, IRuleElementData)\n class MoveAction(SimpleItem):\n-    """The actual persistent implementation of the action element.\n-    """\n+    """The actual persistent implementation of the action element."""\n \n-    target_folder = \'\'\n-    element = \'plone.actions.Move\'\n+    target_folder = ""\n+    element = "plone.actions.Move"\n \n     @property\n     def summary(self):\n-        return _(\n-            u\'Move to folder ${folder}\',\n-            mapping=dict(folder=self.target_folder)\n-        )\n+        return _(u"Move to folder ${folder}", mapping=dict(folder=self.target_folder))\n \n \n @adapter(Interface, IMoveAction, Interface)\n @implementer(IExecutable)\n class MoveActionExecutor(object):\n-    """The executor for this action.\n-    """\n+    """The executor for this action."""\n \n     def __init__(self, context, element, event):\n         self.context = context\n@@ -67,7 +62,7 @@ def __init__(self, context, element, event):\n         self.event = event\n \n     def __call__(self):\n-        portal_url = getToolByName(self.context, \'portal_url\', None)\n+        portal_url = getToolByName(self.context, "portal_url", None)\n         if portal_url is None:\n             return False\n \n@@ -75,7 +70,7 @@ def __call__(self):\n         parent = aq_parent(aq_inner(obj))\n \n         path = self.element.target_folder\n-        if len(path) > 1 and path[0] == \'/\':\n+        if len(path) > 1 and path[0] == "/":\n             path = path[1:]\n         target = portal_url.getPortalObject().unrestrictedTraverse(\n             str(path),\n@@ -86,9 +81,9 @@ def __call__(self):\n             self.error(\n                 obj,\n                 _(\n-                    u\'Target folder ${target} does not exist.\',\n-                    mapping={\'target\': path},\n-                )\n+                    u"Target folder ${target} does not exist.",\n+                    mapping={"target": path},\n+                ),\n             )\n             return False\n \n@@ -135,37 +130,39 @@ def __call__(self):\n         return True\n \n     def error(self, obj, error):\n-        request = getattr(self.context, \'REQUEST\', None)\n+        request = getattr(self.context, "REQUEST", None)\n         if request is not None:\n             title = utils.pretty_title_or_id(obj, obj)\n             message = _(\n-                u\'Unable to move ${name} as part of content rule \'\n+                u"Unable to move ${name} as part of content rule "\n                 u"\'move\' action: ${error}",\n-                mapping={\'name\': title, \'error\': error}\n+                mapping={"name": title, "error": error},\n             )\n-            IStatusMessage(request).addStatusMessage(message, type=\'error\')\n+            IStatusMessage(request).addStatusMessage(message, type="error")\n \n     def generate_id(self, target, old_id):\n-        taken = getattr(aq_base(target), \'has_key\', None)\n+        taken = getattr(aq_base(target), "has_key", None)\n         if taken is None:\n             item_ids = set(target.objectIds())\n \n-            def taken(x): return x in item_ids\n+            def taken(x):\n+                return x in item_ids\n+\n         if not taken(old_id):\n             return old_id\n         idx = 1\n-        while taken(\'{0}.{1}\'.format(old_id, idx)):\n+        while taken("{0}.{1}".format(old_id, idx)):\n             idx += 1\n-        return \'{0}.{1}\'.format(old_id, idx)\n+        return "{0}.{1}".format(old_id, idx)\n \n \n class MoveAddForm(ActionAddForm):\n-    """An add form for move-to-folder actions.\n-    """\n+    """An add form for move-to-folder actions."""\n+\n     schema = IMoveAction\n-    label = _(u\'Add Move Action\')\n-    description = _(u\'A move action can move an object to a different folder.\')\n-    form_name = _(u\'Configure element\')\n+    label = _(u"Add Move Action")\n+    description = _(u"A move action can move an object to a different folder.")\n+    form_name = _(u"Configure element")\n     Type = MoveAction\n \n \n@@ -178,10 +175,11 @@ class MoveEditForm(ActionEditForm):\n \n     z3c.form does all the magic here.\n     """\n+\n     schema = IMoveAction\n-    label = _(u\'Edit Move Action\')\n-    description = _(u\'A move action can move an object to a different folder.\')\n-    form_name = _(u\'Configure element\')\n+    label = _(u"Edit Move Action")\n+    description = _(u"A move action can move an object to a different folder.")\n+    form_name = _(u"Configure element")\n \n \n class MoveEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/actions/notify.py b/plone/app/contentrules/actions/notify.py\nindex 3dcd87f..8a59517 100644\n--- a/plone/app/contentrules/actions/notify.py\n+++ b/plone/app/contentrules/actions/notify.py\n@@ -20,34 +20,33 @@ class INotifyAction(Interface):\n     """\n \n     message = schema.TextLine(\n-        title=_(u\'Message\'),\n-        description=_(u\'The message to send to the user.\'),\n+        title=_(u"Message"),\n+        description=_(u"The message to send to the user."),\n         required=True,\n     )\n \n     message_type = schema.Choice(\n-        title=_(u\'Message type\'),\n-        description=_(u\'Select the type of message to display.\'),\n-        values=(\'info\', \'warning\', \'error\'),\n+        title=_(u"Message type"),\n+        description=_(u"Select the type of message to display."),\n+        values=("info", "warning", "error"),\n         required=True,\n-        default=\'info\',\n+        default="info",\n     )\n \n \n @implementer(INotifyAction, IRuleElementData)\n class NotifyAction(SimpleItem):\n-    """The actual persistent implementation of the notify action element.\n-    """\n+    """The actual persistent implementation of the notify action element."""\n \n-    message = \'\'\n-    message_type = \'\'\n+    message = ""\n+    message_type = ""\n \n-    element = \'plone.actions.Notify\'\n+    element = "plone.actions.Notify"\n \n     @property\n     def summary(self):\n         return _(\n-            u\'Notify with message ${message}\',\n+            u"Notify with message ${message}",\n             mapping=dict(message=self.message),\n         )\n \n@@ -74,12 +73,12 @@ def __call__(self):\n \n \n class NotifyAddForm(ActionAddForm):\n-    """An add form for notify rule actions.\n-    """\n+    """An add form for notify rule actions."""\n+\n     schema = INotifyAction\n-    label = _(u\'Add Notify Action\')\n-    description = _(u\'A notify action can show a message to the user.\')\n-    form_name = _(u\'Configure element\')\n+    label = _(u"Add Notify Action")\n+    description = _(u"A notify action can show a message to the user.")\n+    form_name = _(u"Configure element")\n     Type = NotifyAction\n \n \n@@ -92,10 +91,11 @@ class NotifyEditForm(ActionEditForm):\n \n     z3c.form does all the magic here.\n     """\n+\n     schema = INotifyAction\n-    label = _(u\'Edit Notify Action\')\n-    description = _(u\'A notify action can show a message to the user.\')\n-    form_name = _(u\'Configure element\')\n+    label = _(u"Edit Notify Action")\n+    description = _(u"A notify action can show a message to the user.")\n+    form_name = _(u"Configure element")\n \n \n class NotifyEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/actions/versioning.py b/plone/app/contentrules/actions/versioning.py\nindex c255571..47d8abb 100644\n--- a/plone/app/contentrules/actions/versioning.py\n+++ b/plone/app/contentrules/actions/versioning.py\n@@ -20,26 +20,26 @@ class IVersioningAction(Interface):\n     """\n \n     comment = schema.TextLine(\n-        title=_(u\'Comment\'),\n+        title=_(u"Comment"),\n         description=_(\n-            u\'The comment added to the history while versioning the content.\'),\n+            u"The comment added to the history while versioning the content."\n+        ),\n         required=False,\n     )\n \n \n @implementer(IVersioningAction, IRuleElementData)\n class VersioningAction(SimpleItem):\n-    """The actual persistent implementation of the versioning action element.\n-    """\n+    """The actual persistent implementation of the versioning action element."""\n \n-    comment = \'\'\n+    comment = ""\n \n-    element = \'plone.actions.Versioning\'\n+    element = "plone.actions.Versioning"\n \n     @property\n     def summary(self):\n         return _(\n-            u\'Versioning with comment ${comment}\',\n+            u"Versioning with comment ${comment}",\n             mapping=dict(comment=self.comment),\n         )\n \n@@ -59,19 +59,21 @@ def __init__(self, context, element, event):\n \n     def __call__(self):\n         comment = _(self.element.comment)\n-        pr = getToolByName(self.context, \'portal_repository\')\n+        pr = getToolByName(self.context, "portal_repository")\n         pr.save(obj=self.event.object, comment=comment)\n         return True\n \n \n class VersioningAddForm(ActionAddForm):\n-    """An add form for versioning rule actions.\n-    """\n+    """An add form for versioning rule actions."""\n+\n     schema = IVersioningAction\n-    label = _(u\'Add Versioning Action\')\n-    description = _(u\'A versioning action will store a version of a content \'\n-                    u\'no matter versioning is enabled for it or not.\')\n-    form_name = _(u\'Configure element\')\n+    label = _(u"Add Versioning Action")\n+    description = _(\n+        u"A versioning action will store a version of a content "\n+        u"no matter versioning is enabled for it or not."\n+    )\n+    form_name = _(u"Configure element")\n     Type = VersioningAction\n \n \n@@ -84,11 +86,14 @@ class VersioningEditForm(ActionEditForm):\n \n     z3c.form does all the magic here.\n     """\n+\n     schema = IVersioningAction\n-    label = _(u\'Edit Versioning Action\')\n-    description = _(u\'A versioning action will store a version of a content \'\n-                    u\'no matter versioning is enabled for it or not.\')\n-    form_name = _(u\'Configure element\')\n+    label = _(u"Edit Versioning Action")\n+    description = _(\n+        u"A versioning action will store a version of a content "\n+        u"no matter versioning is enabled for it or not."\n+    )\n+    form_name = _(u"Configure element")\n \n \n class VersioningEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/actions/workflow.py b/plone/app/contentrules/actions/workflow.py\nindex 9f75eb9..aba6f04 100644\n--- a/plone/app/contentrules/actions/workflow.py\n+++ b/plone/app/contentrules/actions/workflow.py\n@@ -23,25 +23,24 @@ class IWorkflowAction(Interface):\n     """\n \n     transition = schema.Choice(\n-        title=_(u\'Transition\'),\n-        description=_(u\'Select the workflow transition to attempt\'),\n+        title=_(u"Transition"),\n+        description=_(u"Select the workflow transition to attempt"),\n         required=True,\n-        vocabulary=\'plone.app.vocabularies.WorkflowTransitions\',\n+        vocabulary="plone.app.vocabularies.WorkflowTransitions",\n     )\n \n \n @implementer(IWorkflowAction, IRuleElementData)\n class WorkflowAction(SimpleItem):\n-    """The actual persistent implementation of the action element.\n-    """\n+    """The actual persistent implementation of the action element."""\n \n-    transition = \'\'\n-    element = \'plone.actions.Workflow\'\n+    transition = ""\n+    element = "plone.actions.Workflow"\n \n     @property\n     def summary(self):\n         return _(\n-            u\'Execute transition ${transition}\',\n+            u"Execute transition ${transition}",\n             mapping=dict(transition=self.transition),\n         )\n \n@@ -49,8 +48,7 @@ def summary(self):\n @adapter(Interface, IWorkflowAction, Interface)\n @implementer(IExecutable)\n class WorkflowActionExecutor(object):\n-    """The executor for this action.\n-    """\n+    """The executor for this action."""\n \n     def __init__(self, context, element, event):\n         self.context = context\n@@ -58,7 +56,7 @@ def __init__(self, context, element, event):\n         self.event = event\n \n     def __call__(self):\n-        portal_workflow = getToolByName(self.context, \'portal_workflow\', None)\n+        portal_workflow = getToolByName(self.context, "portal_workflow", None)\n         if portal_workflow is None:\n             return False\n \n@@ -75,24 +73,24 @@ def __call__(self):\n         return True\n \n     def error(self, obj, error):\n-        request = getattr(self.context, \'REQUEST\', None)\n+        request = getattr(self.context, "REQUEST", None)\n         if request is not None:\n             title = utils.safe_unicode(utils.pretty_title_or_id(obj, obj))\n             error = utils.safe_unicode(error)\n             message = _(\n                 u"Unable to change state of ${name} as part of content rule \'workflow\' action: ${error}",  # noqa\n-                mapping={\'name\': title, \'error\': error})\n-            IStatusMessage(request).addStatusMessage(message, type=\'error\')\n+                mapping={"name": title, "error": error},\n+            )\n+            IStatusMessage(request).addStatusMessage(message, type="error")\n \n \n class WorkflowAddForm(ActionAddForm):\n-    """An add form for workflow actions.\n-    """\n+    """An add form for workflow actions."""\n+\n     schema = IWorkflowAction\n-    label = _(u\'Add Workflow Action\')\n-    description = _(\n-        u\'A workflow action triggers a workflow transition on an object.\')\n-    form_name = _(u\'Configure element\')\n+    label = _(u"Add Workflow Action")\n+    description = _(u"A workflow action triggers a workflow transition on an object.")\n+    form_name = _(u"Configure element")\n     Type = WorkflowAction\n \n \n@@ -101,13 +99,12 @@ class WorkflowAddFormView(ContentRuleFormWrapper):\n \n \n class WorkflowEditForm(ActionEditForm):\n-    """An edit form for workflow rule actions.\n-    """\n+    """An edit form for workflow rule actions."""\n+\n     schema = IWorkflowAction\n-    label = _(u\'Edit Workflow Action\')\n-    description = _(\n-        u\'A workflow action triggers a workflow transition on an object.\')\n-    form_name = _(u\'Configure element\')\n+    label = _(u"Edit Workflow Action")\n+    description = _(u"A workflow action triggers a workflow transition on an object.")\n+    form_name = _(u"Configure element")\n \n \n class WorkflowEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/api.py b/plone/app/contentrules/api.py\nindex 7fd8cd4..6cc4217 100644\n--- a/plone/app/contentrules/api.py\n+++ b/plone/app/contentrules/api.py\n@@ -7,8 +7,7 @@\n from zope.component import queryUtility\n \n \n-def assign_rule(container, rule_id, enabled=True, bubbles=True,\n-                insert_before=None):\n+def assign_rule(container, rule_id, enabled=True, bubbles=True, insert_before=None):\n     """Assign\n        @param string rule_id\n        rule to\n@@ -32,13 +31,13 @@ def assign_rule(container, rule_id, enabled=True, bubbles=True,\n \n     assignable[rule_id].enabled = bool(enabled)\n     assignable[rule_id].bubbles = bool(bubbles)\n-    path = \'/\'.join(container.getPhysicalPath())\n+    path = "/".join(container.getPhysicalPath())\n     insert_assignment(storage[rule_id], path)\n \n     if insert_before:\n         position = None\n         keys = list(assignable.keys())\n-        if insert_before == \'*\':\n+        if insert_before == "*":\n             position = 0\n         elif insert_before in keys:\n             position = keys.index(insert_before)\n@@ -51,13 +50,13 @@ def assign_rule(container, rule_id, enabled=True, bubbles=True,\n \n def unassign_rule(container, rule_id):\n     """Remove\n-       @param string rule_id\n-       rule from\n-       @param object container\n+    @param string rule_id\n+    rule from\n+    @param object container\n     """\n     assignable = IRuleAssignmentManager(container)\n     storage = queryUtility(IRuleStorage)\n-    path = \'/\'.join(container.getPhysicalPath())\n+    path = "/".join(container.getPhysicalPath())\n     del assignable[rule_id]\n     get_assignments(storage[rule_id]).remove(path)\n \ndiff --git a/plone/app/contentrules/browser/adding.py b/plone/app/contentrules/browser/adding.py\nindex 79dc4c0..3d8b066 100644\n--- a/plone/app/contentrules/browser/adding.py\n+++ b/plone/app/contentrules/browser/adding.py\n@@ -26,28 +26,33 @@ class RuleAdding(SimpleItem, BrowserView):\n \n     # This is necessary so that context.absolute_url() works properly on the\n     # add form, which in turn fixes the <base /> URL\n-    id = \'+rule\'\n+    id = "+rule"\n \n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def add(self, content):\n-        """Add the rule to the context\n-        """\n+        """Add the rule to the context"""\n         storage = getUtility(IRuleStorage)\n         chooser = INameChooser(storage)\n         name = chooser.chooseName(None, content)\n         self._chosen_name = name\n         storage[name] = content\n-        IStatusMessage(self.request).add(_(\n-            u\'New content rule created. \'\n-            u\'Please add conditions and actions at the bottom of the page.\'),\n-            type=u\'info\')\n+        IStatusMessage(self.request).add(\n+            _(\n+                u"New content rule created. "\n+                u"Please add conditions and actions at the bottom of the page."\n+            ),\n+            type=u"info",\n+        )\n \n     def renderAddButton(self):\n-        warn(\'The renderAddButton method is deprecated, use nameAllowed\',\n-             DeprecationWarning, 2)\n+        warn(\n+            "The renderAddButton method is deprecated, use nameAllowed",\n+            DeprecationWarning,\n+            2,\n+        )\n \n     def namesAccepted(self):\n         return False\n@@ -79,13 +84,19 @@ def __init__(self, context, request):\n         self.request = request\n \n     def nextURL(self):\n-        url = str(getMultiAdapter(\n-            (aq_parent(self.context), self.request), name=u\'absolute_url\'))\n-        return url + \'/@@manage-content-rules\'\n+        url = str(\n+            getMultiAdapter(\n+                (aq_parent(self.context), self.request), name=u"absolute_url"\n+            )\n+        )\n+        return url + "/@@manage-content-rules"\n \n     def renderAddButton(self):\n-        warn(\'The renderAddButton method is deprecated, use nameAllowed\',\n-             DeprecationWarning, 2)\n+        warn(\n+            "The renderAddButton method is deprecated, use nameAllowed",\n+            DeprecationWarning,\n+            2,\n+        )\n \n     def namesAccepted(self):\n         return False\n@@ -108,11 +119,10 @@ class RuleConditionAdding(RuleElementAdding):\n \n     # This is necessary so that context.absolute_url() works properly on the\n     # add form, which in turn fixes the <base /> URL\n-    id = \'+condition\'\n+    id = "+condition"\n \n     def add(self, content):\n-        """Add the rule element to the context rule\n-        """\n+        """Add the rule element to the context rule"""\n         rule = aq_base(aq_inner(self.context))\n         rule.conditions.append(content)\n \n@@ -122,10 +132,9 @@ class RuleActionAdding(RuleElementAdding):\n \n     # This is necessary so that context.absolute_url() works properly on the\n     # add form, which in turn fixes the <base /> URL\n-    id = \'+action\'\n+    id = "+action"\n \n     def add(self, content):\n-        """Add the rule element to the context rule\n-        """\n+        """Add the rule element to the context rule"""\n         rule = aq_base(aq_inner(self.context))\n         rule.actions.append(content)\ndiff --git a/plone/app/contentrules/browser/assignments.py b/plone/app/contentrules/browser/assignments.py\nindex f28d560..b7270d4 100644\n--- a/plone/app/contentrules/browser/assignments.py\n+++ b/plone/app/contentrules/browser/assignments.py\n@@ -16,10 +16,9 @@\n \n \n class ManageAssignments(BrowserView):\n-    """Manage contextual rule assignments\n-    """\n+    """Manage contextual rule assignments"""\n \n-    template = ViewPageTemplateFile(\'templates/manage-assignments.pt\')\n+    template = ViewPageTemplateFile("templates/manage-assignments.pt")\n \n     def __call__(self):\n         context = aq_inner(self.context)\n@@ -27,58 +26,57 @@ def __call__(self):\n         form = request.form\n         status = IStatusMessage(self.request)\n \n-        operation = request.get(\'operation\', None)\n+        operation = request.get("operation", None)\n \n-        if operation == \'move_up\':\n+        if operation == "move_up":\n             assignable = IRuleAssignmentManager(context)\n-            rule_id = request.get(\'rule_id\')\n+            rule_id = request.get("rule_id")\n             keys = list(assignable.keys())\n             idx = keys.index(rule_id)\n             del keys[idx]\n             keys.insert(idx - 1, rule_id)\n             assignable.updateOrder(keys)\n-        elif operation == \'move_down\':\n+        elif operation == "move_down":\n             assignable = IRuleAssignmentManager(context)\n-            rule_id = request.get(\'rule_id\')\n+            rule_id = request.get("rule_id")\n             keys = list(assignable.keys())\n             idx = keys.index(rule_id)\n             del keys[idx]\n             keys.insert(idx + 1, rule_id)\n             assignable.updateOrder(keys)\n-        elif \'form.button.AddAssignment\' in form:\n-            rule_id = form.get(\'rule_id\')\n+        elif "form.button.AddAssignment" in form:\n+            rule_id = form.get("rule_id")\n             api.assign_rule(self.context, rule_id)\n-        elif \'form.button.Delete\' in form:\n-            rule_ids = form.get(\'rule_ids\', ())\n+        elif "form.button.Delete" in form:\n+            rule_ids = form.get("rule_ids", ())\n             for r in rule_ids:\n                 api.unassign_rule(self.context, r)\n \n-            status.addStatusMessage(_(u\'Assignments deleted.\'), type=\'info\')\n-        elif \'form.button.Enable\' in form:\n-            rule_ids = form.get(\'rule_ids\', ())\n+            status.addStatusMessage(_(u"Assignments deleted."), type="info")\n+        elif "form.button.Enable" in form:\n+            rule_ids = form.get("rule_ids", ())\n             for r in rule_ids:\n                 api.edit_rule_assignment(context, r, enabled=True)\n \n-            status.addStatusMessage(_(u\'Assignments enabled.\'), type=\'info\')\n-        elif \'form.button.Disable\' in form:\n-            rule_ids = form.get(\'rule_ids\', ())\n+            status.addStatusMessage(_(u"Assignments enabled."), type="info")\n+        elif "form.button.Disable" in form:\n+            rule_ids = form.get("rule_ids", ())\n             for r in rule_ids:\n                 api.edit_rule_assignment(context, r, enabled=False)\n \n-            status.addStatusMessage(_(u\'Assignments disabled.\'), type=\'info\')\n-        elif \'form.button.Bubble\' in form:\n-            rule_ids = form.get(\'rule_ids\', ())\n+            status.addStatusMessage(_(u"Assignments disabled."), type="info")\n+        elif "form.button.Bubble" in form:\n+            rule_ids = form.get("rule_ids", ())\n             for r in rule_ids:\n-                api.edit_rule_assignment(\n-                    context, r, bubbles=True, enabled=True)\n+                api.edit_rule_assignment(context, r, bubbles=True, enabled=True)\n \n-            status.addStatusMessage(_(u\'Changes saved.\'), type=\'info\')\n-        elif \'form.button.NoBubble\' in form:\n-            rule_ids = form.get(\'rule_ids\', ())\n+            status.addStatusMessage(_(u"Changes saved."), type="info")\n+        elif "form.button.NoBubble" in form:\n+            rule_ids = form.get("rule_ids", ())\n             for r in rule_ids:\n                 api.edit_rule_assignment(context, r, bubbles=False)\n \n-            status.addStatusMessage(_(u\'Changes saved.\'), type=\'info\')\n+            status.addStatusMessage(_(u"Changes saved."), type="info")\n \n         return self.template()\n \n@@ -88,7 +86,7 @@ def globally_enabled(self):\n \n     @memoize\n     def view_url(self):\n-        return self.context.absolute_url() + \'/@@manage-content-rules\'\n+        return self.context.absolute_url() + "/@@manage-content-rules"\n \n     @memoize\n     def type_name(self):\n@@ -103,7 +101,7 @@ def acquired_rules(self):\n         if ISiteRoot.providedBy(self.context):\n             return []\n \n-        in_use = set([r[\'id\'] for r in self.assigned_rules()])\n+        in_use = set([r["id"] for r in self.assigned_rules()])\n \n         storage = getUtility(IRuleStorage)\n         events = self._events()\n@@ -118,17 +116,19 @@ def acquired_rules(self):\n                     if key not in in_use and assignment.bubbles:\n                         rule = storage.get(key, None)\n                         if rule is not None:\n-                            url = \'{0}/@@manage-content-rules\'.format(\n+                            url = "{0}/@@manage-content-rules".format(\n                                 context.absolute_url(),\n                             )\n-                            assignments.append(dict(\n-                                id=key,\n-                                title=rule.title,\n-                                description=rule.description,\n-                                trigger=events.get(rule.event, \'Unknown\'),\n-                                url=url,\n-                                enabled=(assignment.enabled and rule.enabled),\n-                            ))\n+                            assignments.append(\n+                                dict(\n+                                    id=key,\n+                                    title=rule.title,\n+                                    description=rule.description,\n+                                    trigger=events.get(rule.event, "Unknown"),\n+                                    url=url,\n+                                    enabled=(assignment.enabled and rule.enabled),\n+                                )\n+                            )\n             if ISiteRoot.providedBy(context):\n                 context = None\n             else:\n@@ -146,40 +146,44 @@ def assigned_rules(self):\n         for key, assignment in assignable.items():\n             rule = storage.get(key, None)\n             if rule is not None:\n-                assignments.append(dict(id=key,\n-                                        title=rule.title,\n-                                        description=rule.description,\n-                                        trigger=events.get(\n-                                            rule.event,\n-                                            \'Unknown\'\n-                                        ),\n-                                        url=self._rule_url(key),\n-                                        bubbles=assignment.bubbles,\n-                                        enabled=assignment.enabled,\n-                                        global_enabled=rule.enabled, ))\n+                assignments.append(\n+                    dict(\n+                        id=key,\n+                        title=rule.title,\n+                        description=rule.description,\n+                        trigger=events.get(rule.event, "Unknown"),\n+                        url=self._rule_url(key),\n+                        bubbles=assignment.bubbles,\n+                        enabled=assignment.enabled,\n+                        global_enabled=rule.enabled,\n+                    )\n+                )\n         return assignments\n \n     def has_rules(self):\n         return len(self.assigned_rules()) > 0 or len(self.acquired_rules()) > 0\n \n     def assignable_rules(self):\n-        in_use = set([r[\'id\'] for r in self.assigned_rules()])\n+        in_use = set([r["id"] for r in self.assigned_rules()])\n         assignable = []\n         for key, rule in getUtility(IRuleStorage).items():\n             if key not in in_use:\n-                assignable.append(dict(id=key,\n-                                       title=rule.title,\n-                                       description=rule.description, ))\n+                assignable.append(\n+                    dict(\n+                        id=key,\n+                        title=rule.title,\n+                        description=rule.description,\n+                    )\n+                )\n         return assignable\n \n     @memoize\n     def _events(self):\n-        eventsFactory = getUtility(\n-            IVocabularyFactory, name=\'plone.contentrules.events\')\n+        eventsFactory = getUtility(IVocabularyFactory, name="plone.contentrules.events")\n         return dict([(e.value, e.token) for e in eventsFactory(self.context)])\n \n     def _rule_url(self, key):\n-        return \'{0}/++rule++{1}/@@manage-elements\'.format(\n+        return "{0}/++rule++{1}/@@manage-elements".format(\n             self._portal_url(),\n             key,\n         )\n@@ -187,5 +191,6 @@ def _rule_url(self, key):\n     @memoize\n     def _portal_url(self):\n         portal_state = getMultiAdapter(\n-            (self.context, self.request), name=\'plone_portal_state\')\n+            (self.context, self.request), name="plone_portal_state"\n+        )\n         return portal_state.portal_url()\ndiff --git a/plone/app/contentrules/browser/controlpanel.py b/plone/app/contentrules/browser/controlpanel.py\nindex 39be77e..6696272 100644\n--- a/plone/app/contentrules/browser/controlpanel.py\n+++ b/plone/app/contentrules/browser/controlpanel.py\n@@ -16,27 +16,27 @@\n \n \n def get_trigger_class(trigger):\n-    return \'trigger-{0}\'.format(trigger.__identifier__.split(\'.\')[-1].lower())\n+    return "trigger-{0}".format(trigger.__identifier__.split(".")[-1].lower())\n \n \n @implementer(IContentRulesControlPanel)\n class ContentRulesControlPanel(BrowserView):\n-    """Manage rules in a the global rules container\n-    """\n-    template = ViewPageTemplateFile(\'templates/controlpanel.pt\')\n+    """Manage rules in a the global rules container"""\n+\n+    template = ViewPageTemplateFile("templates/controlpanel.pt")\n \n     def __call__(self):\n         form = self.request.form\n-        if form.get(\'rule-id\', False):\n-            if form.get(\'form.button.EnableRule\', None) is not None:\n+        if form.get("rule-id", False):\n+            if form.get("form.button.EnableRule", None) is not None:\n                 self.enable_rule()\n-            elif form.get(\'form.button.DisableRule\', None) is not None:\n+            elif form.get("form.button.DisableRule", None) is not None:\n                 self.disable_rule()\n-            elif form.get(\'form.button.DeleteRule\', None) is not None:\n+            elif form.get("form.button.DeleteRule", None) is not None:\n                 self.delete_rule()\n \n-        if form.get(\'global_disable\', None) is not None:\n-            if form[\'global_disable\']:\n+        if form.get("global_disable", None) is not None:\n+            if form["global_disable"]:\n                 msg = self.globally_disable()\n             else:\n                 msg = self.globally_enable()\n@@ -46,8 +46,9 @@ def __call__(self):\n         return self.template()\n \n     def authorize(self):\n-        authenticator = getMultiAdapter((self.context, self.request),\n-                                        name=u\'authenticator\')\n+        authenticator = getMultiAdapter(\n+            (self.context, self.request), name=u"authenticator"\n+        )\n         if not authenticator.verify():\n             raise Unauthorized\n \n@@ -62,26 +63,28 @@ def registeredRules(self):\n         info = []\n         for r in rules:\n             trigger_class = get_trigger_class(r.event)\n-            enabled_class = r.enabled and \'state-enabled\' or \'state-disabled\'\n+            enabled_class = r.enabled and "state-enabled" or "state-disabled"\n             assigned = len(get_assignments(r)) > 0\n \n-            assigned_class = \'assignment-unassigned\'\n+            assigned_class = "assignment-unassigned"\n             if assigned:\n-                assigned_class = \'assignment-assigned\'\n-\n-            info.append({\n-                \'id\': r.__name__,\n-                \'title\': r.title,\n-                \'description\': r.description,\n-                \'enabled\': r.enabled,\n-                \'assigned\': assigned,\n-                \'trigger\': events[r.event],\n-                \'row_class\': \'{0} {1} {2}\'.format(\n-                    trigger_class,\n-                    enabled_class,\n-                    assigned_class,\n-                )\n-            })\n+                assigned_class = "assignment-assigned"\n+\n+            info.append(\n+                {\n+                    "id": r.__name__,\n+                    "title": r.title,\n+                    "description": r.description,\n+                    "enabled": r.enabled,\n+                    "assigned": assigned,\n+                    "trigger": events[r.event],\n+                    "row_class": "{0} {1} {2}".format(\n+                        trigger_class,\n+                        enabled_class,\n+                        assigned_class,\n+                    ),\n+                }\n+            )\n \n         return info\n \n@@ -96,22 +99,20 @@ def ruleTypesToShow(self):\n             else:\n                 continue\n \n-            eventname = translate(\n-                event.token, context=self.request, domain=\'plone\')\n-            selector.append({\'id\': get_trigger_class(event.value),\n-                             \'title\': eventname})\n+            eventname = translate(event.token, context=self.request, domain="plone")\n+            selector.append({"id": get_trigger_class(event.value), "title": eventname})\n \n         return selector\n \n     def statesToShow(self):\n         return (\n             {\n-                \'id\': \'state-enabled\',\n-                \'title\': _(u\'label_rule_enabled\', default=u\'Enabled\'),\n+                "id": "state-enabled",\n+                "title": _(u"label_rule_enabled", default=u"Enabled"),\n             },\n             {\n-                \'id\': \'state-disabled\',\n-                \'title\': _(u\'label_rule_disabled\', default=u\'Disabled\'),\n+                "id": "state-disabled",\n+                "title": _(u"label_rule_disabled", default=u"Disabled"),\n             },\n         )\n \n@@ -121,41 +122,42 @@ def _getRules(self):\n \n     @memoize\n     def _events(self):\n-        eventsFactory = getUtility(\n-            IVocabularyFactory, name=\'plone.contentrules.events\')\n+        eventsFactory = getUtility(IVocabularyFactory, name="plone.contentrules.events")\n         return eventsFactory(self.context)\n \n     def delete_rule(self):\n         self.authorize()\n-        rule_id = self.request[\'rule-id\']\n+        rule_id = self.request["rule-id"]\n         storage = getUtility(IRuleStorage)\n         del storage[rule_id]\n-        return \'ok\'\n+        return "ok"\n \n     def enable_rule(self):\n         self.authorize()\n         storage = getUtility(IRuleStorage)\n-        rule_id = self.request[\'rule-id\']\n+        rule_id = self.request["rule-id"]\n         storage[rule_id].enabled = True\n-        return \'ok\'\n+        return "ok"\n \n     def disable_rule(self):\n         self.authorize()\n         storage = getUtility(IRuleStorage)\n-        rule_id = self.request[\'rule-id\']\n+        rule_id = self.request["rule-id"]\n         storage[rule_id].enabled = False\n-        return \'ok\'\n+        return "ok"\n \n     def globally_disable(self):\n         self.authorize()\n         storage = getUtility(IRuleStorage)\n         storage.active = False\n-        return translate(_(\'Content rules has been globally disabled\'),\n-                         context=self.request)\n+        return translate(\n+            _("Content rules has been globally disabled"), context=self.request\n+        )\n \n     def globally_enable(self):\n         self.authorize()\n         storage = getUtility(IRuleStorage)\n         storage.active = True\n-        return translate(_(\'Content rules has been globally enabled\'),\n-                         context=self.request)\n+        return translate(\n+            _("Content rules has been globally enabled"), context=self.request\n+        )\ndiff --git a/plone/app/contentrules/browser/elements.py b/plone/app/contentrules/browser/elements.py\nindex 6841092..711d74c 100644\n--- a/plone/app/contentrules/browser/elements.py\n+++ b/plone/app/contentrules/browser/elements.py\n@@ -21,63 +21,61 @@\n \n \n class ManageElements(BrowserView):\n-    """Manage elements in a rule\n-    """\n+    """Manage elements in a rule"""\n \n-    template = ViewPageTemplateFile(\'templates/manage-elements.pt\')\n+    template = ViewPageTemplateFile("templates/manage-elements.pt")\n \n     def __call__(self):\n         redirect = False\n         form = self.request.form\n-        idx = form.get(\'element_id\', 0)\n+        idx = form.get("element_id", 0)\n \n         rule = aq_inner(self.context)\n         status = IStatusMessage(self.request)\n \n-        if \'form.button.Save\' in form:\n+        if "form.button.Save" in form:\n             self.authorize()\n-            rule.title = form.get(\'title\', rule.title)\n-            rule.description = form.get(\'description\', rule.description)\n-            rule.stop = bool(form.get(\'stopExecuting\', False))\n-            rule.cascading = bool(form.get(\'cascading\', False))\n-            rule.enabled = bool(form.get(\'enabled\', False))\n-            status.addStatusMessage(_(u\'Changes saved.\'), type=\'info\')\n-        elif \'form.button.EditCondition\' in form:\n-            editview = self.conditions()[idx][\'editview\']\n+            rule.title = form.get("title", rule.title)\n+            rule.description = form.get("description", rule.description)\n+            rule.stop = bool(form.get("stopExecuting", False))\n+            rule.cascading = bool(form.get("cascading", False))\n+            rule.enabled = bool(form.get("enabled", False))\n+            status.addStatusMessage(_("Changes saved."), type="info")\n+        elif "form.button.EditCondition" in form:\n+            editview = self.conditions()[idx]["editview"]\n             self.request.response.redirect(editview)\n             redirect = True\n-        elif \'form.button.DeleteCondition\' in form:\n+        elif "form.button.DeleteCondition" in form:\n             self.authorize()\n             del rule.conditions[idx]\n-            status.addStatusMessage(_(u\'Condition deleted.\'), type=\'info\')\n-        elif \'form.button.MoveConditionUp\' in form:\n+            status.addStatusMessage(_("Condition deleted."), type="info")\n+        elif "form.button.MoveConditionUp" in form:\n             self._move_up(rule.conditions, idx)\n-            status.addStatusMessage(_(u\'Condition moved up.\'), type=\'info\')\n-        elif \'form.button.MoveConditionDown\' in form:\n+            status.addStatusMessage(_("Condition moved up."), type="info")\n+        elif "form.button.MoveConditionDown" in form:\n             self._move_down(rule.conditions, idx)\n-            status.addStatusMessage(_(u\'Condition moved down.\'), type=\'info\')\n-        elif \'form.button.EditAction\' in form:\n-            editview = self.actions()[idx][\'editview\']\n+            status.addStatusMessage(_("Condition moved down."), type="info")\n+        elif "form.button.EditAction" in form:\n+            editview = self.actions()[idx]["editview"]\n             self.request.response.redirect(editview)\n             redirect = True\n-        elif \'form.button.DeleteAction\' in form:\n+        elif "form.button.DeleteAction" in form:\n             self.authorize()\n             del rule.actions[idx]\n-            status.addStatusMessage(_(u\'Action deleted.\'), type=\'info\')\n-        elif \'form.button.MoveActionUp\' in form:\n+            status.addStatusMessage(_("Action deleted."), type="info")\n+        elif "form.button.MoveActionUp" in form:\n             self._move_up(rule.actions, idx)\n-            status.addStatusMessage(_(u\'Action moved up.\'), type=\'info\')\n-        elif \'form.button.MoveActionDown\' in form:\n+            status.addStatusMessage(_("Action moved up."), type="info")\n+        elif "form.button.MoveActionDown" in form:\n             self._move_down(rule.actions, idx)\n-            status.addStatusMessage(_(u\'Action moved down.\'), type=\'info\')\n-        elif \'form.button.ApplyOnWholeSite\' in form:\n+            status.addStatusMessage(_("Action moved down."), type="info")\n+        elif "form.button.ApplyOnWholeSite" in form:\n             self.globally_assign()\n             IStatusMessage(self.request).add(\n-                _(u\'The rule has been enabled on site root \'\n-                  u\'and all its subfolders\')\n+                _("The rule has been enabled on site root " "and all its subfolders")\n             )\n \n-        self.view_url = self.base_url + \'/@@manage-elements\'\n+        self.view_url = self.base_url + "/@@manage-elements"\n         self.rule_title = self.context.title\n         self.rule_description = self.context.description\n         self.rule_stop = self.context.stop\n@@ -88,8 +86,9 @@ def __call__(self):\n             return self.template()\n \n     def authorize(self):\n-        authenticator = getMultiAdapter((self.context, self.request),\n-                                        name=u\'authenticator\')\n+        authenticator = getMultiAdapter(\n+            (self.context, self.request), name="authenticator"\n+        )\n         if not authenticator.verify():\n             raise Unauthorized\n \n@@ -98,13 +97,12 @@ def base_url(self):\n         return aq_inner(self.context).absolute_url()\n \n     def rule_event(self):\n-        eventsFactory = getUtility(IVocabularyFactory,\n-                                   name=\'plone.contentrules.events\')\n+        eventsFactory = getUtility(IVocabularyFactory, name="plone.contentrules.events")\n         for e in eventsFactory(self.context):\n             if e.value == self.context.event:\n-                return translate(e.token, context=self.request, domain=\'plone\')\n+                return translate(e.token, context=self.request, domain="plone")\n \n-        return \'Unknown event\'  # should not happen\n+        return "Unknown event"  # should not happen\n \n     @memoize\n     def actions(self):\n@@ -112,7 +110,7 @@ def actions(self):\n         for name, utility in getUtilitiesFor(IRuleAction):\n             actions[name] = utility\n \n-        return self._populate_info(self.context.actions, actions, \'action\')\n+        return self._populate_info(self.context.actions, actions, "action")\n \n     @memoize\n     def conditions(self):\n@@ -120,18 +118,20 @@ def conditions(self):\n         for name, utility in getUtilitiesFor(IRuleCondition):\n             conditions[name] = utility\n \n-        return self._populate_info(self.context.conditions,\n-                                   conditions, \'condition\')\n+        return self._populate_info(self.context.conditions, conditions, "condition")\n \n     def addable_conditions(self):\n         rule = aq_inner(self.context)\n \n         info = []\n         for element in utils.allAvailableConditions(rule.event):\n-            info.append({\n-                \'title\': element.title,\n-                \'description\': element.description,\n-                \'addview\': element.addview})\n+            info.append(\n+                {\n+                    "title": element.title,\n+                    "description": element.description,\n+                    "addview": element.addview,\n+                }\n+            )\n \n         return info\n \n@@ -140,10 +140,13 @@ def addable_actions(self):\n \n         info = []\n         for element in utils.allAvailableActions(rule.event):\n-            info.append({\n-                \'title\': element.title,\n-                \'description\': element.description,\n-                \'addview\': element.addview})\n+            info.append(\n+                {\n+                    "title": element.title,\n+                    "description": element.description,\n+                    "addview": element.addview,\n+                }\n+            )\n \n         return info\n \n@@ -151,28 +154,33 @@ def assignments(self):\n         rule = aq_inner(self.context)\n         paths = set(get_assignments(rule))\n \n-        site = getToolByName(rule, \'portal_url\').getPortalObject()\n-        site_path = \'/\'.join(site.getPhysicalPath())\n+        site = getToolByName(rule, "portal_url").getPortalObject()\n+        site_path = "/".join(site.getPhysicalPath())\n \n         info = []\n         if site_path in paths:\n             paths.remove(site_path)\n-            info.append({\n-                \'url\': site.absolute_url(),\n-                \'title\': site.title_or_id(),\n-                \'description\': site.Description(),\n-                \'icon\': \'plone-home\'\n-                })\n-\n-        catalog = getToolByName(rule, \'portal_catalog\')\n-        for a in catalog(path=dict(query=list(paths), depth=0),\n-                         sort_on=\'sortable_title\'):\n-            info.append({\n-                \'url\': a.getURL(),\n-                \'title\': a.Title or a.getId,\n-                \'description\': a.Description,\n-                \'icon\': f\'contenttype/{a.portal_type.lower()}\'\n-                })\n+            info.append(\n+                {\n+                    "url": site.absolute_url(),\n+                    "title": site.title_or_id(),\n+                    "description": site.Description(),\n+                    "icon": "plone-home",\n+                }\n+            )\n+\n+        catalog = getToolByName(rule, "portal_catalog")\n+        for a in catalog(\n+            path=dict(query=list(paths), depth=0), sort_on="sortable_title"\n+        ):\n+            info.append(\n+                {\n+                    "url": a.getURL(),\n+                    "title": a.Title or a.getId,\n+                    "description": a.Description,\n+                    "icon": f"contenttype/{a.portal_type.lower()}",\n+                }\n+            )\n \n         return info\n \n@@ -195,21 +203,24 @@ def _populate_info(self, elements, meta, namespace):\n \n             editview = None\n             if descriptor.editview:\n-                editview = \'{0}/++{1}++{2}/{3}\'.format(\n+                editview = "{0}/++{1}++{2}/{3}".format(\n                     base_url,\n                     namespace,\n                     idx,\n                     descriptor.editview,\n                 )\n \n-            info.append({\n-                \'title\': descriptor.title,\n-                \'description\': descriptor.description,\n-                \'summary\': data.summary,\n-                \'editview\': editview,\n-                \'first\': (idx == 0),\n-                \'last\': (idx == last),\n-                \'idx\': idx})\n+            info.append(\n+                {\n+                    "title": descriptor.title,\n+                    "description": descriptor.description,\n+                    "summary": data.summary,\n+                    "editview": editview,\n+                    "first": (idx == 0),\n+                    "last": (idx == last),\n+                    "idx": idx,\n+                }\n+            )\n         return info\n \n     def _move_up(self, elements, idx):\n@@ -226,5 +237,5 @@ def _move_down(self, elements, idx):\n \n     def globally_assign(self):\n         self.authorize()\n-        portal = getToolByName(self.context, \'portal_url\').getPortalObject()\n+        portal = getToolByName(self.context, "portal_url").getPortalObject()\n         api.assign_rule(portal, self.context.__name__)\ndiff --git a/plone/app/contentrules/browser/formhelper.py b/plone/app/contentrules/browser/formhelper.py\nindex 8e321b4..a64471a 100644\n--- a/plone/app/contentrules/browser/formhelper.py\n+++ b/plone/app/contentrules/browser/formhelper.py\n@@ -36,20 +36,20 @@ def create(self, data):\n         def create(self):\n             return MyAssignment()\n     """\n+\n     ignoreContext = True\n \n     def updateActions(self):\n         super(AddForm, self).updateActions()\n-        self.actions[\'save\'].addClass(\'btn btn-primary\')\n-        self.actions[\'cancel\'].addClass(\'btn btn-secondary\')\n+        self.actions["save"].addClass("btn btn-primary")\n+        self.actions["cancel"].addClass("btn btn-secondary")\n \n     def nextURL(self):\n         rule = aq_parent(aq_inner(self.context))\n         context = aq_parent(aq_inner(rule))\n-        url = str(getMultiAdapter(\n-            (context, self.request), name=u\'absolute_url\'))\n-        focus = self.context.id.strip(\'+\')\n-        return \'{0}/++rule++{1}/@@manage-elements#{2}\'.format(\n+        url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))\n+        focus = self.context.id.strip("+")\n+        return "{0}/++rule++{1}/@@manage-elements#{2}".format(\n             url,\n             rule.__name__,\n             focus,\n@@ -58,7 +58,7 @@ def nextURL(self):\n     def add(self, content):\n         self.context.add(content)\n \n-    @button.buttonAndHandler(_(u\'label_save\', default=u\'Save\'), name=\'save\')\n+    @button.buttonAndHandler(_(u"label_save", default=u"Save"), name="save")\n     def handle_save_action(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -71,14 +71,14 @@ def handle_save_action(self, action):\n             self.request.response.redirect(self.nextURL())\n \n     @button.buttonAndHandler(\n-        _(u\'label_cancel\', default=u\'Cancel\'),\n-        name=\'cancel\',\n+        _(u"label_cancel", default=u"Cancel"),\n+        name="cancel",\n     )\n     def handle_cancel_action(self, action):\n         nextURL = self.nextURL()\n         if nextURL:\n             self.request.response.redirect(self.nextURL())\n-        return \'\'\n+        return ""\n \n \n class NullAddForm(BrowserView):\n@@ -97,30 +97,28 @@ def __call__(self):\n         nextURL = self.nextURL()\n         if nextURL:\n             self.request.response.redirect(self.nextURL())\n-        return \'\'\n+        return ""\n \n     def nextURL(self):\n         rule = aq_parent(aq_inner(self.context))\n         context = aq_parent(aq_inner(rule))\n-        url = str(getMultiAdapter(\n-            (context, self.request), name=u\'absolute_url\'))\n-        return \'{0}/++rule++{1}/@@manage-elements\'.format(url, rule.__name__)\n+        url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))\n+        return "{0}/++rule++{1}/@@manage-elements".format(url, rule.__name__)\n \n     def create(self):\n-        raise NotImplementedError(\'concrete classes must implement create()\')\n+        raise NotImplementedError("concrete classes must implement create()")\n \n \n @implementer(IContentRulesForm)\n class EditForm(AutoExtensibleForm, form.EditForm):\n-    """An edit form for rule elements.\n-    """\n+    """An edit form for rule elements."""\n \n     def updateActions(self):\n         super(EditForm, self).updateActions()\n-        self.actions[\'save\'].addClass(\'btn btn-primary\')\n-        self.actions[\'cancel\'].addClass(\'btn btn-secondary\')\n+        self.actions["save"].addClass("btn btn-primary")\n+        self.actions["cancel"].addClass("btn btn-secondary")\n \n-    @button.buttonAndHandler(_(u\'label_save\', default=u\'Save\'), name=\'save\')\n+    @button.buttonAndHandler(_(u"label_save", default=u"Save"), name="save")\n     def handle_save_action(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -130,26 +128,25 @@ def handle_save_action(self, action):\n         nextURL = self.nextURL()\n         if nextURL:\n             self.request.response.redirect(self.nextURL())\n-        return \'\'\n+        return ""\n \n     @button.buttonAndHandler(\n-        _(u\'label_cancel\', default=u\'Cancel\'),\n-        name=\'cancel\',\n+        _(u"label_cancel", default=u"Cancel"),\n+        name="cancel",\n     )\n     def handle_cancel_action(self, action):\n         nextURL = self.nextURL()\n         if nextURL:\n             self.request.response.redirect(self.nextURL())\n-        return \'\'\n+        return ""\n \n     def nextURL(self):\n         element = aq_inner(self.context)\n         rule = aq_parent(element)\n         context = aq_parent(rule)\n-        url = str(getMultiAdapter(\n-            (context, self.request), name=u\'absolute_url\'))\n-        focus = self.context.id.strip(\'+\')\n-        return \'{0}/++rule++{1}/@@manage-elements#{2}\'.format(\n+        url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))\n+        focus = self.context.id.strip("+")\n+        return "{0}/++rule++{1}/@@manage-elements#{2}".format(\n             url,\n             rule.__name__,\n             focus,\n@@ -158,4 +155,4 @@ def nextURL(self):\n \n class ContentRuleFormWrapper(layout.FormWrapper):\n \n-    index = ViewPageTemplateFile(\'templates/contentrules-pageform.pt\')\n+    index = ViewPageTemplateFile("templates/contentrules-pageform.pt")\ndiff --git a/plone/app/contentrules/browser/info.py b/plone/app/contentrules/browser/info.py\nindex 9026c8e..4d1717f 100644\n--- a/plone/app/contentrules/browser/info.py\n+++ b/plone/app/contentrules/browser/info.py\n@@ -7,17 +7,15 @@\n \n \n class ContentRulesInfo(BrowserView):\n-\n     def show_rules_tab(self):\n-        """Whether or not the rules tab should be shown\n-        """\n+        """Whether or not the rules tab should be shown"""\n \n         if not IRuleAssignable.providedBy(self.context):\n             return False\n \n         check_permission = getSecurityManager().checkPermission\n         can_manage_rules = check_permission(\n-            \'Content rules: Manage rules\',\n+            "Content rules: Manage rules",\n             self.context,\n         )\n         if not can_manage_rules:\ndiff --git a/plone/app/contentrules/browser/interfaces.py b/plone/app/contentrules/browser/interfaces.py\nindex 4d60466..0fc520d 100644\n--- a/plone/app/contentrules/browser/interfaces.py\n+++ b/plone/app/contentrules/browser/interfaces.py\n@@ -4,17 +4,14 @@\n \n \n class IContentRulesInfo(Interface):\n-    """Site-wide information about content rules\n-    """\n+    """Site-wide information about content rules"""\n \n     def show_rules_tab():\n-        """Determine whether or not the rules tab should be shown.\n-        """\n+        """Determine whether or not the rules tab should be shown."""\n \n \n class IContentRulesControlPanel(Interface):\n-    """Marker interface for rules control panel view\n-    """\n+    """Marker interface for rules control panel view"""\n \n     def globally_disabled():\n         """Wether content rules are globally disabled or not"""\n@@ -43,5 +40,4 @@ class IRuleActionAdding(IRuleElementAdding):\n \n \n class IContentRulesForm(Interface):\n-    """Marker interface for forms that need content rules layout\n-    """\n+    """Marker interface for forms that need content rules layout"""\ndiff --git a/plone/app/contentrules/browser/navigation.py b/plone/app/contentrules/browser/navigation.py\nindex 6238959..a6f1c83 100644\n--- a/plone/app/contentrules/browser/navigation.py\n+++ b/plone/app/contentrules/browser/navigation.py\n@@ -5,21 +5,20 @@\n \n \n class RuleBreadcrumbs(PhysicalNavigationBreadcrumbs):\n-\n     def breadcrumbs(self):\n-        portal_url = getToolByName(self.context, \'portal_url\')()\n+        portal_url = getToolByName(self.context, "portal_url")()\n         return (\n             {\n-                \'absolute_url\': \'{0}/@@rules-controlpanel\'.format(portal_url),\n-                \'Title\': _(\n-                    \'title_manage_contentrules\',\n-                    default=u\'Content Rules\',\n+                "absolute_url": "{0}/@@rules-controlpanel".format(portal_url),\n+                "Title": _(\n+                    "title_manage_contentrules",\n+                    default=u"Content Rules",\n                 ),\n             },\n             {\n-                \'absolute_url\': \'{0}/@@manage-elements\'.format(\n+                "absolute_url": "{0}/@@manage-elements".format(\n                     self.context.absolute_url(),\n                 ),\n-                \'Title\': self.context.title or self.context.id,\n+                "Title": self.context.title or self.context.id,\n             },\n         )\ndiff --git a/plone/app/contentrules/browser/rule.py b/plone/app/contentrules/browser/rule.py\nindex 89d800d..adad190 100644\n--- a/plone/app/contentrules/browser/rule.py\n+++ b/plone/app/contentrules/browser/rule.py\n@@ -13,25 +13,26 @@\n \n \n class RuleAddForm(AddForm):\n-    """An add form for rules.\n-    """\n+    """An add form for rules."""\n+\n     schema = IRuleConfiguration\n     ignoreContext = True\n-    label = _(u\'Add Rule\')\n-    description = _(u\'Add a new rule. Once complete, you can manage the \'\n-                    u"rule\'s actions and conditions separately.")\n+    label = _(u"Add Rule")\n+    description = _(\n+        u"Add a new rule. Once complete, you can manage the "\n+        u"rule\'s actions and conditions separately."\n+    )\n \n     def nextURL(self):\n         context = aq_parent(aq_inner(self.context))\n-        url = str(getMultiAdapter(\n-            (context, self.request), name=u\'absolute_url\'))\n-        if base_hasattr(self.context, \'_chosen_name\'):\n-            return \'{0}/++rule++{1}/@@manage-elements\'.format(\n+        url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))\n+        if base_hasattr(self.context, "_chosen_name"):\n+            return "{0}/++rule++{1}/@@manage-elements".format(\n                 url,\n                 self.context._chosen_name,\n             )\n         else:\n-            return \'{0}/@@rules-controlpanel\'.format(url)\n+            return "{0}/@@rules-controlpanel".format(url)\n \n     def create(self, data):\n         rule = Rule()\n@@ -44,17 +45,16 @@ class RuleAddFormView(ContentRuleFormWrapper):\n \n \n class RuleEditForm(EditForm):\n-    """An edit form for rules.\n-    """\n+    """An edit form for rules."""\n+\n     schema = IRuleConfiguration\n-    label = _(u\'Edit Rule\')\n-    description = _(u\'Edit an existing rule.\')\n+    label = _(u"Edit Rule")\n+    description = _(u"Edit an existing rule.")\n \n     def nextURL(self):\n         context = aq_parent(aq_inner(self.context))\n-        url = str(getMultiAdapter(\n-            (context, self.request), name=u\'absolute_url\'))\n-        return url + \'/@@rules-controlpanel\'\n+        url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))\n+        return url + "/@@rules-controlpanel"\n \n \n class RuleEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/browser/traversal.py b/plone/app/contentrules/browser/traversal.py\nindex 3fdc208..f638ec1 100644\n--- a/plone/app/contentrules/browser/traversal.py\n+++ b/plone/app/contentrules/browser/traversal.py\n@@ -42,7 +42,7 @@ def __init__(self, context, request=None):\n \n     def traverse(self, name, ignore):\n         condition = self.context.conditions[int(name)]\n-        traversal_id = \'++condition++{0}\'.format(name)\n+        traversal_id = "++condition++{0}".format(name)\n         if condition.id != traversal_id:\n             condition.__name__ = condition.id = traversal_id\n         return condition\n@@ -63,7 +63,7 @@ def __init__(self, context, request=None):\n \n     def traverse(self, name, ignore):\n         action = self.context.actions[int(name)]\n-        traversal_id = \'++action++{0}\'.format(name)\n+        traversal_id = "++action++{0}".format(name)\n         if action.id != traversal_id:\n             action.__name__ = action.id = traversal_id\n         return action\ndiff --git a/plone/app/contentrules/conditions/fileextension.py b/plone/app/contentrules/conditions/fileextension.py\nindex 7f94a83..cec8851 100644\n--- a/plone/app/contentrules/conditions/fileextension.py\n+++ b/plone/app/contentrules/conditions/fileextension.py\n@@ -27,9 +27,9 @@ class IFileExtensionCondition(Interface):\n     """\n \n     file_extension = schema.TextLine(\n-        title=_(u\'File extension\'),\n-        description=_(u\'The file extension to check for\'),\n-        required=True\n+        title=_(u"File extension"),\n+        description=_(u"The file extension to check for"),\n+        required=True,\n     )\n \n \n@@ -40,15 +40,12 @@ class FileExtensionCondition(SimpleItem):\n     Note that we must mix in Explicit to keep Zope 2 security happy.\n     """\n \n-    file_extension = u\'\'\n-    element = \'plone.conditions.FileExtension\'\n+    file_extension = u""\n+    element = "plone.conditions.FileExtension"\n \n     @property\n     def summary(self):\n-        return _(\n-            u\'File extension is ${ext}\',\n-            mapping=dict(ext=self.file_extension)\n-        )\n+        return _(u"File extension is ${ext}", mapping=dict(ext=self.file_extension))\n \n \n @implementer(IExecutable)\n@@ -68,33 +65,33 @@ def __call__(self):\n         obj = self.event.object\n \n         if IFile.providedBy(obj):\n-            base_unit = getattr(obj, \'file\', None)\n-            name = getattr(base_unit, \'filename\', None)\n+            base_unit = getattr(obj, "file", None)\n+            name = getattr(base_unit, "filename", None)\n         elif IFileContent is None:\n             return False\n         elif not IFileContent.providedBy(obj):\n             return False\n         else:\n             base_unit = obj.getFile()\n-            get_filename = getattr(base_unit, \'getFilename\', None)\n+            get_filename = getattr(base_unit, "getFilename", None)\n             if not get_filename:\n                 return False\n             name = get_filename()\n \n-        extension = name[name.rfind(\'.\') + 1:]\n+        extension = name[name.rfind(".") + 1 :]\n         return extension == self.element.file_extension\n \n \n class FileExtensionAddForm(AddForm):\n-    """An add form for file extension rule conditions.\n-    """\n+    """An add form for file extension rule conditions."""\n+\n     schema = IFileExtensionCondition\n-    label = _(u\'Add File Extension Condition\')\n+    label = _(u"Add File Extension Condition")\n     description = _(\n-        u\'A file extension condition can restrict a rule from \'\n-        u\'executing unless the target is a File with a particular extension.\'\n+        u"A file extension condition can restrict a rule from "\n+        u"executing unless the target is a File with a particular extension."\n     )\n-    form_name = _(u\'Configure element\')\n+    form_name = _(u"Configure element")\n \n     def create(self, data):\n         c = FileExtensionCondition()\n@@ -111,13 +108,14 @@ class FileExtensionEditForm(EditForm):\n \n     z3c.form does all the magic here.\n     """\n+\n     schema = IFileExtensionCondition\n-    label = _(u\'Edit File Extension Condition\')\n+    label = _(u"Edit File Extension Condition")\n     description = _(\n-        u\'A file extension condition can restrict a rule from \'\n-        u\'executing unless the target is a File with a particular extension.\'\n+        u"A file extension condition can restrict a rule from "\n+        u"executing unless the target is a File with a particular extension."\n     )\n-    form_name = _(u\'Configure element\')\n+    form_name = _(u"Configure element")\n \n \n class FileExtensionEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/conditions/group.py b/plone/app/contentrules/conditions/group.py\nindex 8b6f554..63d231e 100644\n--- a/plone/app/contentrules/conditions/group.py\n+++ b/plone/app/contentrules/conditions/group.py\n@@ -21,10 +21,10 @@ class IGroupCondition(Interface):\n     """\n \n     group_names = schema.Set(\n-        title=_(u\'Group name\'),\n-        description=_(u\'The name of the group.\'),\n+        title=_(u"Group name"),\n+        description=_(u"The name of the group."),\n         required=True,\n-        value_type=schema.Choice(vocabulary=\'plone.app.vocabularies.Groups\')\n+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.Groups"),\n     )\n \n \n@@ -36,13 +36,12 @@ class GroupCondition(SimpleItem):\n     """\n \n     group_names = []\n-    element = \'plone.conditions.Group\'\n+    element = "plone.conditions.Group"\n \n     @property\n     def summary(self):\n         return _(\n-            u\'Groups are: ${names}\',\n-            mapping=dict(names=\', \'.join(self.group_names))\n+            u"Groups are: ${names}", mapping=dict(names=", ".join(self.group_names))\n         )\n \n \n@@ -60,14 +59,12 @@ def __init__(self, context, element, event):\n         self.event = event\n \n     def __call__(self):\n-        portal_membership = getToolByName(\n-            self.context, \'portal_membership\', None)\n-        portal_groups = getToolByName(self.context, \'portal_groups\', None)\n+        portal_membership = getToolByName(self.context, "portal_membership", None)\n+        portal_groups = getToolByName(self.context, "portal_groups", None)\n         if portal_groups is None or portal_groups is None:\n             return False\n         member = portal_membership.getAuthenticatedMember()\n-        groupIds = [g.getId()\n-                    for g in portal_groups.getGroupsByUserId(member.getId())]\n+        groupIds = [g.getId() for g in portal_groups.getGroupsByUserId(member.getId())]\n         for g in self.element.group_names:\n             if g in groupIds:\n                 return True\n@@ -75,15 +72,15 @@ def __call__(self):\n \n \n class GroupAddForm(AddForm):\n-    """An add form for group rule conditions.\n-    """\n+    """An add form for group rule conditions."""\n+\n     schema = IGroupCondition\n-    label = _(u\'Add Group Condition\')\n+    label = _(u"Add Group Condition")\n     description = _(\n-        u\'A group condition can prevent a rule from executing \'\n-        u\'unless the current user is a member of a particular group.\'\n+        u"A group condition can prevent a rule from executing "\n+        u"unless the current user is a member of a particular group."\n     )\n-    form_name = _(u\'Configure element\')\n+    form_name = _(u"Configure element")\n \n     def create(self, data):\n         c = GroupCondition()\n@@ -96,15 +93,15 @@ class GroupAddFormView(ContentRuleFormWrapper):\n \n \n class GroupEditForm(EditForm):\n-    """An edit form for group conditions\n-    """\n+    """An edit form for group conditions"""\n+\n     schema = IGroupCondition\n-    label = _(u\'Edit Group Condition\')\n+    label = _(u"Edit Group Condition")\n     description = _(\n-        u\'A group condition can prevent a rule from executing \'\n-        u\'unless the current user is a member of a particular group.\'\n+        u"A group condition can prevent a rule from executing "\n+        u"unless the current user is a member of a particular group."\n     )\n-    form_name = _(u\'Configure element\')\n+    form_name = _(u"Configure element")\n \n \n class GroupEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/conditions/portaltype.py b/plone/app/contentrules/conditions/portaltype.py\nindex 41ed5ca..6547de6 100644\n--- a/plone/app/contentrules/conditions/portaltype.py\n+++ b/plone/app/contentrules/conditions/portaltype.py\n@@ -26,12 +26,12 @@ class IPortalTypeCondition(Interface):\n     """\n \n     check_types = schema.Set(\n-        title=_(u\'Content type\'),\n-        description=_(u\'The content type to check for.\'),\n+        title=_(u"Content type"),\n+        description=_(u"The content type to check for."),\n         required=True,\n         value_type=schema.Choice(\n-            vocabulary=\'plone.app.vocabularies.ReallyUserFriendlyTypes\'\n-        )\n+            vocabulary="plone.app.vocabularies.ReallyUserFriendlyTypes"\n+        ),\n     )\n \n \n@@ -43,22 +43,19 @@ class PortalTypeCondition(SimpleItem):\n     """\n \n     check_types = []\n-    element = \'plone.conditions.PortalType\'\n+    element = "plone.conditions.PortalType"\n \n     @property\n     def summary(self):\n         portal = getSite()\n-        portal_types = getToolByName(portal, \'portal_types\')\n+        portal_types = getToolByName(portal, "portal_types")\n         titles = []\n         for name in self.check_types:\n             fti = getattr(portal_types, name, None)\n             if fti is not None:\n                 title = translate(fti.Title(), context=portal.REQUEST)\n                 titles.append(title)\n-        return _(\n-            u\'Content types are: ${names}\',\n-            mapping=dict(names=\', \'.join(titles))\n-        )\n+        return _(u"Content types are: ${names}", mapping=dict(names=", ".join(titles)))\n \n \n @implementer(IExecutable)\n@@ -76,7 +73,7 @@ def __init__(self, context, element, event):\n \n     def __call__(self):\n         obj = aq_inner(self.event.object)\n-        if not hasattr(aq_base(obj), \'getTypeInfo\'):\n+        if not hasattr(aq_base(obj), "getTypeInfo"):\n             return False\n         elif ITypesTool.providedBy(obj):\n             # types tool have a getTypeInfo method\n@@ -89,15 +86,15 @@ def __call__(self):\n \n \n class PortalTypeAddForm(AddForm):\n-    """An add form for portal type conditions.\n-    """\n+    """An add form for portal type conditions."""\n+\n     schema = IPortalTypeCondition\n-    label = _(u\'Add Content Type Condition\')\n+    label = _(u"Add Content Type Condition")\n     description = _(\n-        u\'A portal type condition makes the rule apply only to \'\n-        u\'certain content types.\'\n+        u"A portal type condition makes the rule apply only to "\n+        u"certain content types."\n     )\n-    form_name = _(u\'Configure element\')\n+    form_name = _(u"Configure element")\n \n     def create(self, data):\n         c = PortalTypeCondition()\n@@ -110,15 +107,15 @@ class PortalTypeAddFormView(ContentRuleFormWrapper):\n \n \n class PortalTypeEditForm(EditForm):\n-    """An edit form for portal type conditions\n-    """\n+    """An edit form for portal type conditions"""\n+\n     schema = IPortalTypeCondition\n-    label = _(u\'Edit Content Type Condition\')\n+    label = _(u"Edit Content Type Condition")\n     description = _(\n-        u\'A portal type condition makes the rule apply only to certain \'\n-        u\'content types.\'\n+        u"A portal type condition makes the rule apply only to certain "\n+        u"content types."\n     )\n-    form_name = _(u\'Configure element\')\n+    form_name = _(u"Configure element")\n \n \n class PortalTypeEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/conditions/role.py b/plone/app/contentrules/conditions/role.py\nindex a95ceac..a4b50c1 100644\n--- a/plone/app/contentrules/conditions/role.py\n+++ b/plone/app/contentrules/conditions/role.py\n@@ -22,10 +22,10 @@ class IRoleCondition(Interface):\n     """\n \n     role_names = schema.Set(\n-        title=_(u\'Roles\'),\n-        description=_(u\'The roles to check for.\'),\n+        title=_(u"Roles"),\n+        description=_(u"The roles to check for."),\n         required=True,\n-        value_type=schema.Choice(vocabulary=\'plone.app.vocabularies.Roles\')\n+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.Roles"),\n     )\n \n \n@@ -37,14 +37,11 @@ class RoleCondition(SimpleItem):\n     """\n \n     role_names = []\n-    element = \'plone.conditions.Role\'\n+    element = "plone.conditions.Role"\n \n     @property\n     def summary(self):\n-        return _(\n-            u\'Roles are: ${names}\',\n-            mapping=dict(names=\', \'.join(self.role_names))\n-        )\n+        return _(u"Roles are: ${names}", mapping=dict(names=", ".join(self.role_names)))\n \n \n @implementer(IExecutable)\n@@ -61,13 +58,11 @@ def __init__(self, context, element, event):\n         self.event = event\n \n     def __call__(self):\n-        portal_membership = getToolByName(\n-            self.context, \'portal_membership\', None)\n+        portal_membership = getToolByName(self.context, "portal_membership", None)\n         if portal_membership is None:\n             return False\n         member = portal_membership.getAuthenticatedMember()\n-        roles_in_context = member.getRolesInContext(\n-            aq_inner(self.event.object))\n+        roles_in_context = member.getRolesInContext(aq_inner(self.event.object))\n         for r in self.element.role_names:\n             if r in roles_in_context:\n                 return True\n@@ -75,15 +70,15 @@ def __call__(self):\n \n \n class RoleAddForm(AddForm):\n-    """An add form for role rule conditions.\n-    """\n+    """An add form for role rule conditions."""\n+\n     schema = IRoleCondition\n-    label = _(u\'Add Role Condition\')\n+    label = _(u"Add Role Condition")\n     description = _(\n-        u\'A role condition can prevent rules from executing unless \'\n-        u\'the current user has a particular role.\'\n+        u"A role condition can prevent rules from executing unless "\n+        u"the current user has a particular role."\n     )\n-    form_name = _(u\'Configure element\')\n+    form_name = _(u"Configure element")\n \n     def create(self, data):\n         c = RoleCondition()\n@@ -96,15 +91,15 @@ class RoleAddFormView(ContentRuleFormWrapper):\n \n \n class RoleEditForm(EditForm):\n-    """An edit form for role conditions\n-    """\n+    """An edit form for role conditions"""\n+\n     schema = IRoleCondition\n-    label = _(u\'Add Role Condition\')\n+    label = _(u"Add Role Condition")\n     description = _(\n-        u\'A role condition can prevent rules from executing unless \'\n-        u\'the current user has a particular role.\'\n+        u"A role condition can prevent rules from executing unless "\n+        u"the current user has a particular role."\n     )\n-    form_name = _(u\'Configure element\')\n+    form_name = _(u"Configure element")\n \n \n class RoleEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/conditions/talesexpression.py b/plone/app/contentrules/conditions/talesexpression.py\nindex 1a351b0..fdf4190 100644\n--- a/plone/app/contentrules/conditions/talesexpression.py\n+++ b/plone/app/contentrules/conditions/talesexpression.py\n@@ -23,9 +23,10 @@ class ITalesExpressionCondition(Interface):\n     """\n \n     tales_expression = schema.TextLine(\n-        title=_(u\'TALES expression\'),\n-        description=_(u\'The TALES expression to check.\'),\n-        required=True)\n+        title=_(u"TALES expression"),\n+        description=_(u"The TALES expression to check."),\n+        required=True,\n+    )\n \n \n @implementer(ITalesExpressionCondition, IRuleElementData)\n@@ -34,13 +35,15 @@ class TalesExpressionCondition(SimpleItem):\n     element.\n     """\n \n-    tales_expression = \'\'\n-    element = \'plone.conditions.TalesExpression\'\n+    tales_expression = ""\n+    element = "plone.conditions.TalesExpression"\n \n     @property\n     def summary(self):\n-        return _(u\'TALES expression is: ${tales_expression}\',\n-                 mapping={\'tales_expression\': self.tales_expression})\n+        return _(\n+            u"TALES expression is: ${tales_expression}",\n+            mapping={"tales_expression": self.tales_expression},\n+        )\n \n \n @implementer(IExecutable)\n@@ -59,22 +62,24 @@ def __init__(self, context, element, event):\n     def __call__(self):\n         object = self.event.object\n         folder = self.context\n-        portal = getToolByName(folder, \'portal_url\').getPortalObject()\n+        portal = getToolByName(folder, "portal_url").getPortalObject()\n         expression = self.element.tales_expression\n         ec = createExprContext(folder, portal, object)\n         # Workaround CMFCore/PageTemplates issue with unicode missing context\n-        ec.contexts[\'context\'] = ec.contexts[\'here\']\n+        ec.contexts["context"] = ec.contexts["here"]\n         return bool(Expression(expression)(ec))\n \n \n class TalesExpressionAddForm(AddForm):\n-    """An add form for tales expression condition.\n-    """\n+    """An add form for tales expression condition."""\n+\n     schema = ITalesExpressionCondition\n-    label = _(u\'Add TALES Expression Condition\')\n-    description = _(u\'A TALES expression condition makes the rule apply \'\n-                    u\'only if TALES expression is not False in context.\')\n-    form_name = _(u\'Configure element\')\n+    label = _(u"Add TALES Expression Condition")\n+    description = _(\n+        u"A TALES expression condition makes the rule apply "\n+        u"only if TALES expression is not False in context."\n+    )\n+    form_name = _(u"Configure element")\n \n     def create(self, data):\n         c = TalesExpressionCondition()\n@@ -87,13 +92,15 @@ class TalesExpressionAddFormView(ContentRuleFormWrapper):\n \n \n class TalesExpressionEditForm(EditForm):\n-    """An edit form for TALES expression condition\n-    """\n+    """An edit form for TALES expression condition"""\n+\n     schema = ITalesExpressionCondition\n-    label = _(u\'Edit TALES Expression Condition\')\n-    description = _(u\'A TALES expression condition makes the rule apply \'\n-                    u\'only if TALES expression is not False in context.\')\n-    form_name = _(u\'Configure element\')\n+    label = _(u"Edit TALES Expression Condition")\n+    description = _(\n+        u"A TALES expression condition makes the rule apply "\n+        u"only if TALES expression is not False in context."\n+    )\n+    form_name = _(u"Configure element")\n \n \n class TalesExpressionEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/conditions/wfstate.py b/plone/app/contentrules/conditions/wfstate.py\nindex 5f2042a..e7ee6cf 100644\n--- a/plone/app/contentrules/conditions/wfstate.py\n+++ b/plone/app/contentrules/conditions/wfstate.py\n@@ -21,12 +21,10 @@ class IWorkflowStateCondition(Interface):\n     """\n \n     wf_states = schema.Set(\n-        title=_(u\'Workflow state\'),\n-        description=_(u\'The workflow states to check for.\'),\n+        title=_(u"Workflow state"),\n+        description=_(u"The workflow states to check for."),\n         required=True,\n-        value_type=schema.Choice(\n-            vocabulary=\'plone.app.vocabularies.WorkflowStates\'\n-        )\n+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowStates"),\n     )\n \n \n@@ -37,21 +35,20 @@ class WorkflowStateCondition(SimpleItem):\n     """\n \n     wf_states = []\n-    element = \'plone.conditions.WorkflowState\'\n+    element = "plone.conditions.WorkflowState"\n \n     @property\n     def summary(self):\n         return _(\n-            u\'Workflow states are: ${states}\',\n-            mapping=dict(states=\', \'.join(self.wf_states))\n+            u"Workflow states are: ${states}",\n+            mapping=dict(states=", ".join(self.wf_states)),\n         )\n \n \n @implementer(IExecutable)\n @adapter(Interface, IWorkflowStateCondition, Interface)\n class WorkflowStateConditionExecutor(object):\n-    """The executor for this condition.\n-    """\n+    """The executor for this condition."""\n \n     def __init__(self, context, element, event):\n         self.context = context\n@@ -59,24 +56,25 @@ def __init__(self, context, element, event):\n         self.event = event\n \n     def __call__(self):\n-        portal_workflow = getToolByName(self.context, \'portal_workflow\', None)\n+        portal_workflow = getToolByName(self.context, "portal_workflow", None)\n         if portal_workflow is None:\n             return False\n-        state = portal_workflow.getInfoFor(\n-            self.event.object, \'review_state\', None)\n+        state = portal_workflow.getInfoFor(self.event.object, "review_state", None)\n         if state is None:\n             return False\n         return state in self.element.wf_states\n \n \n class WorkflowStateAddForm(AddForm):\n-    """An add form for workflow state conditions.\n-    """\n+    """An add form for workflow state conditions."""\n+\n     schema = IWorkflowStateCondition\n-    label = _(u\'Add Workflow State Condition\')\n-    description = _(u\'A workflow state condition can restrict rules to \'\n-                    u\'objects in particular workflow states\')\n-    form_name = _(u\'Configure element\')\n+    label = _(u"Add Workflow State Condition")\n+    description = _(\n+        u"A workflow state condition can restrict rules to "\n+        u"objects in particular workflow states"\n+    )\n+    form_name = _(u"Configure element")\n \n     def create(self, data):\n         c = WorkflowStateCondition()\n@@ -93,11 +91,14 @@ class WorkflowStateEditForm(EditForm):\n \n     z3c.form does all the magic here.\n     """\n+\n     schema = IWorkflowStateCondition\n-    label = _(u\'Edit Workflow State Condition\')\n-    description = _(u\'A workflow state condition can restrict rules to \'\n-                    u\'objects in particular workflow states\')\n-    form_name = _(u\'Configure element\')\n+    label = _(u"Edit Workflow State Condition")\n+    description = _(\n+        u"A workflow state condition can restrict rules to "\n+        u"objects in particular workflow states"\n+    )\n+    form_name = _(u"Configure element")\n \n \n class WorkflowStateEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/conditions/wftransition.py b/plone/app/contentrules/conditions/wftransition.py\nindex a1b914c..c905433 100644\n--- a/plone/app/contentrules/conditions/wftransition.py\n+++ b/plone/app/contentrules/conditions/wftransition.py\n@@ -21,12 +21,12 @@ class IWorkflowTransitionCondition(Interface):\n     """\n \n     wf_transitions = schema.Set(\n-        title=_(u\'Workflow transition\'),\n-        description=_(u\'The workflow transitions to check for.\'),\n+        title=_(u"Workflow transition"),\n+        description=_(u"The workflow transitions to check for."),\n         required=True,\n         value_type=schema.Choice(\n-            vocabulary=\'plone.app.vocabularies.WorkflowTransitions\'\n-        )\n+            vocabulary="plone.app.vocabularies.WorkflowTransitions"\n+        ),\n     )\n \n \n@@ -37,19 +37,20 @@ class WorkflowTransitionCondition(SimpleItem):\n     """\n \n     wf_transitions = []\n-    element = \'plone.conditions.WorkflowTransition\'\n+    element = "plone.conditions.WorkflowTransition"\n \n     @property\n     def summary(self):\n-        return _(u\'Workflow transitions are: ${transitions}\',\n-                 mapping=dict(transitions=\', \'.join(self.wf_transitions)))\n+        return _(\n+            u"Workflow transitions are: ${transitions}",\n+            mapping=dict(transitions=", ".join(self.wf_transitions)),\n+        )\n \n \n @implementer(IExecutable)\n @adapter(Interface, IWorkflowTransitionCondition, IActionSucceededEvent)\n class WorkflowTransitionConditionExecutor(object):\n-    """The executor for this condition.\n-    """\n+    """The executor for this condition."""\n \n     def __init__(self, context, element, event):\n         self.context = context\n@@ -61,13 +62,15 @@ def __call__(self):\n \n \n class WorkflowTransitionAddForm(AddForm):\n-    """An add form for workflow transition conditions.\n-    """\n+    """An add form for workflow transition conditions."""\n+\n     schema = IWorkflowTransitionCondition\n-    label = _(u\'Add Workflow Transition Condition\')\n-    description = _(u\'A workflow transition condition can restrict rules to \'\n-                    u\'execute only after a certain transition.\')\n-    form_name = _(u\'Configure element\')\n+    label = _(u"Add Workflow Transition Condition")\n+    description = _(\n+        u"A workflow transition condition can restrict rules to "\n+        u"execute only after a certain transition."\n+    )\n+    form_name = _(u"Configure element")\n \n     def create(self, data):\n         c = WorkflowTransitionCondition()\n@@ -84,11 +87,14 @@ class WorkflowTransitionEditForm(EditForm):\n \n     z3c.form does all the magic here.\n     """\n+\n     schema = IWorkflowTransitionCondition\n-    label = _(u\'Edit Workflow Transition Condition\')\n-    description = _(u\'A workflow transition condition can restrict rules to \'\n-                    u\'execute only after a certain transition.\')\n-    form_name = _(u\'Configure element\')\n+    label = _(u"Edit Workflow Transition Condition")\n+    description = _(\n+        u"A workflow transition condition can restrict rules to "\n+        u"execute only after a certain transition."\n+    )\n+    form_name = _(u"Configure element")\n \n \n class WorkflowTransitionEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/exportimport/rules.py b/plone/app/contentrules/exportimport/rules.py\nindex 9b93e42..3d33b5a 100644\n--- a/plone/app/contentrules/exportimport/rules.py\n+++ b/plone/app/contentrules/exportimport/rules.py\n@@ -39,14 +39,13 @@\n def as_bool(string, default=False):\n     if string is None or not str(string):\n         return default\n-    return string.lower() == \'true\'\n+    return string.lower() == "true"\n \n \n @adapter(Interface)\n @implementer(IRuleElementExportImportHandler)\n class PropertyRuleElementExportImportHandler(object):\n-    """Import portlet assignment settings based on zope.schema properties\n-    """\n+    """Import portlet assignment settings based on zope.schema properties"""\n \n     def __init__(self, element):\n         data = IRuleElementData(element)\n@@ -59,7 +58,7 @@ def import_element(self, node):\n             return\n \n         for child in node.childNodes:\n-            if child.nodeName == \'property\':\n+            if child.nodeName == "property":\n                 self.import_node(self.descriptor.schema, child)\n \n     def export_element(self, doc, node):\n@@ -74,12 +73,12 @@ def export_element(self, doc, node):\n \n             child = self.export_field(doc, field)\n             node.appendChild(child)\n+\n     # Helper methods\n \n     def import_node(self, interface, child):\n-        """Import a single <property /> node\n-        """\n-        property_name = child.getAttribute(\'name\')\n+        """Import a single <property /> node"""\n+        property_name = child.getAttribute("name")\n \n         field = interface.get(property_name, None)\n         if field is None:\n@@ -95,20 +94,19 @@ def import_node(self, interface, child):\n         field.set(self.element, value)\n \n     def export_field(self, doc, field):\n-        """Turn a zope.schema field into a node and return it\n-        """\n+        """Turn a zope.schema field into a node and return it"""\n \n         field = field.bind(self.element)\n         value = field.get(self.element)\n \n-        child = doc.createElement(\'property\')\n-        child.setAttribute(\'name\', field.__name__)\n+        child = doc.createElement("property")\n+        child.setAttribute("name", field.__name__)\n \n         # supermodel gives us an etree node but GS uses minidom so we need to convert it\n         node = valueToElement(field, value)\n         if node.text:\n             child.appendChild(doc.createTextNode(six.text_type(node.text)))\n-        # Assumes there are not other text nodes and we can throw away the parent node    \n+        # Assumes there are not other text nodes and we can throw away the parent node\n         for node in node.iterchildren():\n             xml = etree.tostring(node, encoding="utf8")\n             child.appendChild(minidom.parseString(xml).firstChild)\n@@ -118,33 +116,29 @@ def export_field(self, doc, field):\n @adapter(ISiteRoot, ISetupEnviron)\n @implementer(IBody)\n class RulesXMLAdapter(XMLAdapterBase):\n-    """In- and exporter for a local portlet configuration\n-    """\n+    """In- and exporter for a local portlet configuration"""\n \n-    name = \'contentrules\'\n-    _LOGGER_ID = \'contentrules\'\n+    name = "contentrules"\n+    _LOGGER_ID = "contentrules"\n \n     def _exportNode(self):\n-        """Export rules\n-        """\n-        node = self._doc.createElement(\'contentrules\')\n+        """Export rules"""\n+        node = self._doc.createElement("contentrules")\n         child = self._extractRules()\n         if child is not None:\n             node.appendChild(child)\n-        self._logger.info(\'Content rules exported\')\n+        self._logger.info("Content rules exported")\n         return node\n \n     def _importNode(self, node):\n-        """Import rules\n-        """\n+        """Import rules"""\n         if self.environ.shouldPurge():\n             self._purgeRules()\n         self._initRules(node)\n-        self._logger.info(\'Content rules imported\')\n+        self._logger.info("Content rules imported")\n \n     def _purgeRules(self):\n-        """Purge all registered rules\n-        """\n+        """Purge all registered rules"""\n         storage = queryUtility(IRuleStorage)\n         if storage is not None:\n             # If we delete a rule, assignments will be removed as well\n@@ -152,8 +146,7 @@ def _purgeRules(self):\n                 del storage[k]\n \n     def _initRules(self, node):\n-        """Import rules from the given node\n-        """\n+        """Import rules from the given node"""\n \n         site = self.environ.getSite()\n         storage = queryUtility(IRuleStorage)\n@@ -161,10 +154,10 @@ def _initRules(self, node):\n             return\n \n         for child in node.childNodes:\n-            if child.nodeName == \'rule\':\n+            if child.nodeName == "rule":\n \n                 rule = None\n-                name = child.getAttribute(\'name\')\n+                name = child.getAttribute("name")\n                 if name:\n                     rule = storage.get(name, None)\n \n@@ -182,30 +175,29 @@ def _initRules(self, node):\n                     del rule.conditions[:]\n                     del rule.actions[:]\n \n-                rule.title = child.getAttribute(\'title\')\n-                rule.description = child.getAttribute(\'description\')\n-                event_name = child.getAttribute(\'event\')\n+                rule.title = child.getAttribute("title")\n+                rule.description = child.getAttribute("description")\n+                event_name = child.getAttribute("event")\n                 rule.event = _resolveDottedName(event_name)\n                 if not rule.event:\n-                    raise ImportError(\'Can not import {0}\'.format(event_name))\n+                    raise ImportError("Can not import {0}".format(event_name))\n \n-                rule.enabled = as_bool(child.getAttribute(\'enabled\'), True)\n-                rule.stop = as_bool(child.getAttribute(\'stop-after\'))\n-                rule.cascading = as_bool(child.getAttribute(\'cascading\'))\n+                rule.enabled = as_bool(child.getAttribute("enabled"), True)\n+                rule.stop = as_bool(child.getAttribute("stop-after"))\n+                rule.cascading = as_bool(child.getAttribute("cascading"))\n                 # Aq-wrap to enable complex setters for elements below\n                 # to work\n \n                 rule = rule.__of__(site)\n \n                 for rule_config_node in child.childNodes:\n-                    if rule_config_node.nodeName == \'conditions\':\n+                    if rule_config_node.nodeName == "conditions":\n                         for condition_node in rule_config_node.childNodes:\n-                            if not condition_node.nodeName == \'condition\':\n+                            if not condition_node.nodeName == "condition":\n                                 continue\n \n-                            type_ = condition_node.getAttribute(\'type\')\n-                            element_type = getUtility(\n-                                IRuleCondition, name=type_)\n+                            type_ = condition_node.getAttribute("type")\n+                            element_type = getUtility(IRuleCondition, name=type_)\n                             if element_type.factory is None:\n                                 continue\n \n@@ -214,18 +206,17 @@ def _initRules(self, node):\n                             # Aq-wrap in case of complex setters\n                             condition = condition.__of__(rule)\n \n-                            handler = IRuleElementExportImportHandler(\n-                                condition)\n+                            handler = IRuleElementExportImportHandler(condition)\n                             handler.import_element(condition_node)\n \n                             rule.conditions.append(aq_base(condition))\n \n-                    elif rule_config_node.nodeName == \'actions\':\n+                    elif rule_config_node.nodeName == "actions":\n                         for action_node in rule_config_node.childNodes:\n-                            if not action_node.nodeName == \'action\':\n+                            if not action_node.nodeName == "action":\n                                 continue\n \n-                            type_ = action_node.getAttribute(\'type\')\n+                            type_ = action_node.getAttribute("type")\n                             element_type = getUtility(IRuleAction, name=type_)\n                             if element_type.factory is None:\n                                 continue\n@@ -240,9 +231,9 @@ def _initRules(self, node):\n \n                             rule.actions.append(aq_base(action))\n \n-            elif child.nodeName == \'assignment\':\n-                location = child.getAttribute(\'location\')\n-                if location.startswith(\'/\'):\n+            elif child.nodeName == "assignment":\n+                location = child.getAttribute("location")\n+                if location.startswith("/"):\n                     location = location[1:]\n \n                 try:\n@@ -250,17 +241,17 @@ def _initRules(self, node):\n                 except KeyError:\n                     continue\n \n-                name = child.getAttribute(\'name\')\n-                api.assign_rule(container, name,\n-                                enabled=as_bool(child.getAttribute(\'enabled\')),\n-                                bubbles=as_bool(child.getAttribute(\'bubbles\')),\n-                                insert_before=child.getAttribute(\n-                                    \'insert-before\'),\n-                                )\n+                name = child.getAttribute("name")\n+                api.assign_rule(\n+                    container,\n+                    name,\n+                    enabled=as_bool(child.getAttribute("enabled")),\n+                    bubbles=as_bool(child.getAttribute("bubbles")),\n+                    insert_before=child.getAttribute("insert-before"),\n+                )\n \n     def _extractRules(self):\n-        """Extract rules to a document fragment\n-        """\n+        """Extract rules to a document fragment"""\n \n         site = self.environ.getSite()\n         storage = queryUtility(IRuleStorage)\n@@ -271,15 +262,15 @@ def _extractRules(self):\n         assignment_paths = set()\n \n         for name, rule in sorted(storage.items()):\n-            rule_node = self._doc.createElement(\'rule\')\n-\n-            rule_node.setAttribute(\'name\', name)\n-            rule_node.setAttribute(\'title\', rule.title)\n-            rule_node.setAttribute(\'description\', rule.description)\n-            rule_node.setAttribute(\'event\', _getDottedName(rule.event))\n-            rule_node.setAttribute(\'enabled\', str(rule.enabled))\n-            rule_node.setAttribute(\'stop-after\', str(rule.stop))\n-            rule_node.setAttribute(\'cascading\', str(rule.cascading))\n+            rule_node = self._doc.createElement("rule")\n+\n+            rule_node.setAttribute("name", name)\n+            rule_node.setAttribute("title", rule.title)\n+            rule_node.setAttribute("description", rule.description)\n+            rule_node.setAttribute("event", _getDottedName(rule.event))\n+            rule_node.setAttribute("enabled", str(rule.enabled))\n+            rule_node.setAttribute("stop-after", str(rule.stop))\n+            rule_node.setAttribute("cascading", str(rule.cascading))\n             # Aq-wrap so that exporting fields with clever getters or\n             # vocabularies will work. We also aq-wrap conditions and\n             # actions below.\n@@ -287,13 +278,13 @@ def _extractRules(self):\n             rule = rule.__of__(site)\n \n             # Add conditions\n-            conditions_node = self._doc.createElement(\'conditions\')\n+            conditions_node = self._doc.createElement("conditions")\n             for condition in rule.conditions:\n                 condition_data = IRuleElementData(condition)\n                 condition = condition.__of__(rule)\n \n-                condition_node = self._doc.createElement(\'condition\')\n-                condition_node.setAttribute(\'type\', condition_data.element)\n+                condition_node = self._doc.createElement("condition")\n+                condition_node.setAttribute("type", condition_data.element)\n \n                 handler = IRuleElementExportImportHandler(condition)\n                 handler.export_element(self._doc, condition_node)\n@@ -301,13 +292,13 @@ def _extractRules(self):\n             rule_node.appendChild(conditions_node)\n \n             # Add actions\n-            actions_node = self._doc.createElement(\'actions\')\n+            actions_node = self._doc.createElement("actions")\n             for action in rule.actions:\n                 action_data = IRuleElementData(action)\n                 action = action.__of__(rule)\n \n-                action_node = self._doc.createElement(\'action\')\n-                action_node.setAttribute(\'type\', action_data.element)\n+                action_node = self._doc.createElement("action")\n+                action_node.setAttribute("type", action_data.element)\n \n                 handler = IRuleElementExportImportHandler(action)\n                 handler.export_element(self._doc, action_node)\n@@ -319,7 +310,7 @@ def _extractRules(self):\n         # Export assignments last - this is necessary to ensure they\n         # are orderd properly\n \n-        site_path_length = len(\'/\'.join(site.getPhysicalPath()))\n+        site_path_length = len("/".join(site.getPhysicalPath()))\n         for path in sorted(assignment_paths):\n             try:\n                 container = site.unrestrictedTraverse(path)\n@@ -332,26 +323,22 @@ def _extractRules(self):\n \n             location = path[site_path_length:]\n             for name, assignment in sorted(assignable.items()):\n-                assignment_node = self._doc.createElement(\'assignment\')\n-                assignment_node.setAttribute(\'location\', location)\n-                assignment_node.setAttribute(\'name\', name)\n-                assignment_node.setAttribute(\n-                    \'enabled\', str(assignment.enabled))\n-                assignment_node.setAttribute(\n-                    \'bubbles\', str(assignment.bubbles))\n+                assignment_node = self._doc.createElement("assignment")\n+                assignment_node.setAttribute("location", location)\n+                assignment_node.setAttribute("name", name)\n+                assignment_node.setAttribute("enabled", str(assignment.enabled))\n+                assignment_node.setAttribute("bubbles", str(assignment.bubbles))\n                 fragment.appendChild(assignment_node)\n \n         return fragment\n \n \n def importRules(context):\n-    """Import content rules\n-    """\n+    """Import content rules"""\n     site = context.getSite()\n-    importer = queryMultiAdapter((site, context), IBody,\n-                                 name=u\'plone.contentrules\')\n+    importer = queryMultiAdapter((site, context), IBody, name=u"plone.contentrules")\n     if importer is not None:\n-        filename = \'{0}{1}\'.format(importer.name, importer.suffix)\n+        filename = "{0}{1}".format(importer.name, importer.suffix)\n         body = context.readDataFile(filename)\n         if body is not None:\n             importer.filename = filename  # for error reporting\n@@ -359,17 +346,15 @@ def importRules(context):\n \n \n def exportRules(context):\n-    """Export content rules\n-    """\n+    """Export content rules"""\n     site = context.getSite()\n-    exporter = queryMultiAdapter((site, context), IBody,\n-                                 name=u\'plone.contentrules\')\n+    exporter = queryMultiAdapter((site, context), IBody, name=u"plone.contentrules")\n     if exporter is not None:\n-        filename = \'{0}{1}\'.format(exporter.name, exporter.suffix)\n+        filename = "{0}{1}".format(exporter.name, exporter.suffix)\n         body = exporter.body\n         # make sure it\'s encoded as earlier version of GS didn\'t do this\n         if isinstance(body, six.text_type):\n-            encoding = context.getEncoding() or \'utf-8\'\n+            encoding = context.getEncoding() or "utf-8"\n             body = body.encode(encoding)\n         if body is not None:\n             context.writeDataFile(filename, body, exporter.mime_type)\ndiff --git a/plone/app/contentrules/handlers.py b/plone/app/contentrules/handlers.py\nindex b105cb0..0ed70c6 100644\n--- a/plone/app/contentrules/handlers.py\n+++ b/plone/app/contentrules/handlers.py\n@@ -24,14 +24,14 @@ def _get_uid(context):\n         return uid\n \n     try:\n-        return \'/\'.join(context.getPhysicalPath())\n+        return "/".join(context.getPhysicalPath())\n     except AttributeError:\n         pass\n \n     try:\n         return context.id\n     except AttributeError:\n-        return \'\'\n+        return ""\n \n \n class DuplicateRuleFilter(object):\n@@ -48,12 +48,20 @@ def reset(self):\n         self.cascade = False\n \n     def __call__(self, context, rule, event):\n-        exec_context = getattr(event, \'object\', context)\n+        exec_context = getattr(event, "object", context)\n         uid = _get_uid(exec_context)\n-        if (uid, rule.__name__, ) in self.executed:\n+        if (\n+            uid,\n+            rule.__name__,\n+        ) in self.executed:\n             return False\n         else:\n-            self.executed.add((uid, rule.__name__, ))\n+            self.executed.add(\n+                (\n+                    uid,\n+                    rule.__name__,\n+                )\n+            )\n             return True\n \n \n@@ -62,20 +70,18 @@ def __call__(self, context, rule, event):\n \n \n def init():\n-    if not hasattr(_status, \'rule_filter\'):\n+    if not hasattr(_status, "rule_filter"):\n         _status.rule_filter = DuplicateRuleFilter()\n \n \n def close(event):\n-    """Close the event processing when the request ends\n-    """\n-    if hasattr(_status, \'rule_filter\'):\n+    """Close the event processing when the request ends"""\n+    if hasattr(_status, "rule_filter"):\n         _status.rule_filter.reset()\n \n \n def execute(context, event):\n-    """Execute all rules relative to the context, and bubble as appropriate.\n-    """\n+    """Execute all rules relative to the context, and bubble as appropriate."""\n     # Do nothing if there is no rule storage or it is not active\n     storage = queryUtility(IRuleStorage)\n     if storage is None or not storage.active:\n@@ -123,17 +129,17 @@ def execute(context, event):\n     # execute rules again\n     rule_filter.in_progress = False\n \n+\n # Event handlers\n def execute_rules(event):\n-    """ When an action is invoked on an object,\n-        execute rules assigned to its parent.\n-        Base action executor handler """\n+    """When an action is invoked on an object,\n+    execute rules assigned to its parent.\n+    Base action executor handler"""\n     execute(aq_parent(aq_inner(event.object)), event)\n \n \n def added(event):\n-    """When an object is added, execute rules assigned to its new parent.\n-    """\n+    """When an object is added, execute rules assigned to its new parent."""\n     obj = event.object\n \n     if IContentish.providedBy(obj) or IComment.providedBy(obj):\n@@ -144,7 +150,7 @@ def added(event):\n \n def removed(event):\n     """When an IObjectRemovedEvent was received, execute rules assigned to its\n-     previous parent.\n+    previous parent.\n     """\n     obj = event.object\n     if not (IContentish.providedBy(obj) or IComment.providedBy(obj)):\n@@ -154,8 +160,7 @@ def removed(event):\n \n \n def modified(event):\n-    """When an object is modified, execute rules assigned to its parent\n-    """\n+    """When an object is modified, execute rules assigned to its parent"""\n \n     obj = event.object\n     if not (IContentish.providedBy(obj) or IComment.providedBy(obj)):\n@@ -175,8 +180,7 @@ def modified(event):\n \n \n def copied(event):\n-    """When an object is copied, execute rules assigned to its parent\n-    """\n+    """When an object is copied, execute rules assigned to its parent"""\n     obj = event.object\n     if not (IContentish.providedBy(obj) or IComment.providedBy(obj)):\n         return\n@@ -197,18 +201,15 @@ def execute_user_rules(event):\n \n \n def user_created(event):\n-    """When a user has been created, execute rules assigned to the Plonesite.\n-    """\n+    """When a user has been created, execute rules assigned to the Plonesite."""\n     execute_user_rules(event)\n \n \n def user_logged_in(event):\n-    """When a user is logged in, execute rules assigned to the Plonesite.\n-    """\n+    """When a user is logged in, execute rules assigned to the Plonesite."""\n     execute_user_rules(event)\n \n \n def user_logged_out(event):\n-    """When a user is logged out, execute rules assigned to the Plonesite.\n-    """\n+    """When a user is logged out, execute rules assigned to the Plonesite."""\n     execute_user_rules(event)\ndiff --git a/plone/app/contentrules/namechooser.py b/plone/app/contentrules/namechooser.py\nindex 00ce7b6..1ac1ccf 100644\n--- a/plone/app/contentrules/namechooser.py\n+++ b/plone/app/contentrules/namechooser.py\n@@ -9,8 +9,7 @@\n \n @implementer(INameChooser)\n class RuleNameChooser(NameChooser):\n-    """A name chooser for content rules.\n-    """\n+    """A name chooser for content rules."""\n \n     def __init__(self, context):\n         self.context = context\n@@ -22,10 +21,10 @@ def chooseName(self, name, object):\n             name = object.__class__.__name__.lower()\n \n         i = 1\n-        new_name = \'{0}-{1}\'.format(name, i)\n+        new_name = "{0}-{1}".format(name, i)\n         while new_name in container and i <= ATTEMPTS:\n             i += 1\n-            new_name = \'{0}-{1}\'.format(name, i)\n+            new_name = "{0}-{1}".format(name, i)\n \n         self.checkName(new_name, object)\n         return new_name\ndiff --git a/plone/app/contentrules/rule.py b/plone/app/contentrules/rule.py\nindex ce79112..a6e9b8e 100644\n--- a/plone/app/contentrules/rule.py\n+++ b/plone/app/contentrules/rule.py\n@@ -11,7 +11,7 @@\n from zope.component import queryUtility\n \n \n-ANNOTATION_KEY = \'plone.app.contentrules.ruleassignments\'\n+ANNOTATION_KEY = "plone.app.contentrules.ruleassignments"\n \n \n class Rule(SimpleItem, BaseRule):\n@@ -19,11 +19,11 @@ class Rule(SimpleItem, BaseRule):\n     identical.\n     """\n \n-    __name__ = u\'\'\n+    __name__ = u""\n \n     @property\n     def id(self):\n-        return \'++rule++{0}\'.format(self.__name__)\n+        return "++rule++{0}".format(self.__name__)\n \n \n def get_assignments(rule):\n@@ -59,8 +59,7 @@ def rule_removed(rule, event):\n \n def container_moved(container, event):\n \n-    if event.oldParent is None or event.newParent is None or \\\n-            event.oldName is None:\n+    if event.oldParent is None or event.newParent is None or event.oldName is None:\n         return\n \n     assignable = IRuleAssignmentManager(container, None)\n@@ -69,15 +68,15 @@ def container_moved(container, event):\n     if assignable is None or storage is None:\n         return\n \n-    old_path = \'{0}/{1}\'.format(\n-        \'/\'.join(event.oldParent.getPhysicalPath()),\n+    old_path = "{0}/{1}".format(\n+        "/".join(event.oldParent.getPhysicalPath()),\n         event.oldName,\n     )\n-    new_path = \'/\'.join(container.getPhysicalPath())\n+    new_path = "/".join(container.getPhysicalPath())\n \n     if aq_base(event.object) is not aq_base(container):\n-        new_path_of_moved = \'/\'.join(event.object.getPhysicalPath())\n-        old_path = old_path + new_path[len(new_path_of_moved):]\n+        new_path_of_moved = "/".join(event.object.getPhysicalPath())\n+        old_path = old_path + new_path[len(new_path_of_moved) :]\n \n     for rule_name in assignable.keys():\n         rule = storage.get(rule_name, None)\n@@ -96,7 +95,7 @@ def container_removed(container, event):\n     if assignable is None or storage is None:\n         return\n \n-    path = \'/\'.join(container.getPhysicalPath())\n+    path = "/".join(container.getPhysicalPath())\n     for rule_name in assignable.keys():\n         rule = storage.get(rule_name, None)\n         if rule is not None:\ndiff --git a/plone/app/contentrules/testing.py b/plone/app/contentrules/testing.py\nindex 30ebfca..f6a05b7 100644\n--- a/plone/app/contentrules/testing.py\n+++ b/plone/app/contentrules/testing.py\n@@ -13,7 +13,7 @@ class PloneAppContentrulesLayer(PloneSandboxLayer):\n     defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n-        self.loadZCML(\'testing.zcml\', package=plone.app.contentrules.tests)\n+        self.loadZCML("testing.zcml", package=plone.app.contentrules.tests)\n \n \n PLONE_APP_CONTENTRULES_FIXTURE = PloneAppContentrulesLayer()\n@@ -21,11 +21,11 @@ def setUpZope(self, app, configurationContext):\n \n PLONE_APP_CONTENTRULES_INTEGRATION_TESTING = IntegrationTesting(\n     bases=(PLONE_APP_CONTENTRULES_FIXTURE, MOCK_MAILHOST_FIXTURE),\n-    name=\'PloneAppContentrulesLayer:IntegrationTesting\',\n+    name="PloneAppContentrulesLayer:IntegrationTesting",\n )\n \n \n PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING = FunctionalTesting(\n     bases=(PLONE_APP_CONTENTRULES_FIXTURE,),\n-    name=\'PloneAppContentrulesLayer:FunctionalTesting\',\n+    name="PloneAppContentrulesLayer:FunctionalTesting",\n )\ndiff --git a/plone/app/contentrules/tests/base.py b/plone/app/contentrules/tests/base.py\nindex 6c122ce..d2fd9f0 100644\n--- a/plone/app/contentrules/tests/base.py\n+++ b/plone/app/contentrules/tests/base.py\n@@ -22,19 +22,18 @@ class ContentRulesTestCase(unittest.TestCase):\n     layer = PLONE_APP_CONTENTRULES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'f1\')\n-        self.folder = self.portal[\'f1\']\n-        self.folder.invokeFactory(\'Document\', \'d1\')\n-        self.portal.invokeFactory(\'Folder\', \'target\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "f1")\n+        self.folder = self.portal["f1"]\n+        self.folder.invokeFactory("Document", "d1")\n+        self.portal.invokeFactory("Folder", "target")\n \n     def addAuthToRequest(self):\n-        portal = self.layer[\'portal\']\n-        request = self.layer[\'request\']\n-        authenticator = getMultiAdapter(\n-            (portal, request), name=u\'authenticator\')\n+        portal = self.layer["portal"]\n+        request = self.layer["request"]\n+        authenticator = getMultiAdapter((portal, request), name=u"authenticator")\n         auth = authenticator.authenticator().split(\'value="\')[1].rstrip(\'"/>\')\n-        request.form[\'_authenticator\'] = auth\n+        request.form["_authenticator"] = auth\ndiff --git a/plone/app/contentrules/tests/dummy.py b/plone/app/contentrules/tests/dummy.py\nindex 45fab66..d8408ea 100644\n--- a/plone/app/contentrules/tests/dummy.py\n+++ b/plone/app/contentrules/tests/dummy.py\n@@ -8,26 +8,24 @@\n \n @implementer(IRuleElementData)\n class DummyCondition(SimpleItem):\n-    element = \'dummy.condition\'\n-    summary = \'Dummy condition\'\n+    element = "dummy.condition"\n+    summary = "Dummy condition"\n \n \n @implementer(IRuleElementData)\n class DummyAction(SimpleItem):\n-    element = \'dummy.action\'\n-    summary = \'Dummy action\'\n+    element = "dummy.action"\n+    summary = "Dummy action"\n \n \n @implementer(IObjectEvent)\n class DummyEvent(object):\n-\n     def __init__(self, object):\n         self.object = object\n \n \n class DummyRule(object):\n-\n-    def __init__(self, name=\'dummy\'):\n+    def __init__(self, name="dummy"):\n         self.__name__ = name\n \n \ndiff --git a/plone/app/contentrules/tests/test_action_copy.py b/plone/app/contentrules/tests/test_action_copy.py\nindex c4502e7..6ff6fea 100644\n--- a/plone/app/contentrules/tests/test_action_copy.py\n+++ b/plone/app/contentrules/tests/test_action_copy.py\n@@ -16,96 +16,91 @@\n \n @implementer(IObjectEvent)\n class DummyEvent(object):\n-\n     def __init__(self, object):\n         self.object = object\n \n \n class TestCopyAction(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Copy\')\n-        self.assertEqual(\'plone.actions.Copy\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleAction, name="plone.actions.Copy")\n+        self.assertEqual("plone.actions.Copy", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(IObjectEvent, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Copy\')\n+        element = getUtility(IRuleAction, name="plone.actions.Copy")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage[u"foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter((rule, self.portal.REQUEST), name=\'+action\')\n-        addview = getMultiAdapter(\n-            (adding, self.portal.REQUEST), name=element.addview)\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+action")\n+        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)\n \n         addview.form_instance.update()\n         action = addview.form_instance.create(\n-            data={\'target_folder\': \'/target\', })\n+            data={\n+                "target_folder": "/target",\n+            }\n+        )\n         addview.form_instance.add(action)\n \n         e = rule.actions[0]\n         self.assertTrue(isinstance(e, CopyAction))\n-        self.assertEqual(\'/target\', e.target_folder)\n+        self.assertEqual("/target", e.target_folder)\n \n     def testInvokeEditView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Copy\')\n+        element = getUtility(IRuleAction, name="plone.actions.Copy")\n         e = CopyAction()\n-        editview = getMultiAdapter(\n-            (e, self.folder.REQUEST), name=element.editview)\n+        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)\n         self.assertTrue(isinstance(editview, CopyEditFormView))\n \n     def testExecute(self):\n         e = CopyAction()\n-        e.target_folder = \'/target\'\n+        e.target_folder = "/target"\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         self.assertEqual(True, ex())\n \n-        self.assertTrue(\'d1\' in self.folder.objectIds())\n-        self.assertTrue(\'d1\' in self.portal.target.objectIds())\n+        self.assertTrue("d1" in self.folder.objectIds())\n+        self.assertTrue("d1" in self.portal.target.objectIds())\n \n     def testExecuteWithError(self):\n         e = CopyAction()\n-        e.target_folder = \'/dummy\'\n+        e.target_folder = "/dummy"\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         self.assertEqual(False, ex())\n \n-        self.assertTrue(\'d1\' in self.folder.objectIds())\n-        self.assertFalse(\'d1\' in self.portal.target.objectIds())\n+        self.assertTrue("d1" in self.folder.objectIds())\n+        self.assertFalse("d1" in self.portal.target.objectIds())\n \n     def testExecuteWithoutPermissionsOnTarget(self):\n-        setRoles(self.portal, TEST_USER_ID, (\'Member\', ))\n+        setRoles(self.portal, TEST_USER_ID, ("Member",))\n \n         e = CopyAction()\n-        e.target_folder = \'/target\'\n+        e.target_folder = "/target"\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         self.assertEqual(True, ex())\n \n-        self.assertTrue(\'d1\' in self.folder.objectIds())\n-        self.assertTrue(\'d1\' in self.portal.target.objectIds())\n+        self.assertTrue("d1" in self.folder.objectIds())\n+        self.assertTrue("d1" in self.portal.target.objectIds())\n \n     def testExecuteWithNamingConflict(self):\n-        setRoles(self.portal, TEST_USER_ID, (\'Manager\', ))\n-        self.portal.target.invokeFactory(\'Document\', \'d1\')\n-        setRoles(self.portal, TEST_USER_ID, (\'Member\', ))\n+        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n+        self.portal.target.invokeFactory("Document", "d1")\n+        setRoles(self.portal, TEST_USER_ID, ("Member",))\n \n         e = CopyAction()\n-        e.target_folder = \'/target\'\n+        e.target_folder = "/target"\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         self.assertEqual(True, ex())\n \n-        self.assertTrue(\'d1\' in self.folder.objectIds())\n-        self.assertTrue(\'d1\' in self.portal.target.objectIds())\n-        self.assertTrue(\'d1.1\' in self.portal.target.objectIds())\n+        self.assertTrue("d1" in self.folder.objectIds())\n+        self.assertTrue("d1" in self.portal.target.objectIds())\n+        self.assertTrue("d1.1" in self.portal.target.objectIds())\n \n     def testExecuteWithNamingConflictDoesNotStupidlyAcquireHasKey(self):\n         # self.folder is an ATBTreeFolder and so has a has_key.\n@@ -113,16 +108,17 @@ def testExecuteWithNamingConflictDoesNotStupidlyAcquireHasKey(self):\n         # Let\'s make sure we don\'t accidentally acquire has_key and use\n         # this for the check for unique id.\n \n-        self.folder.invokeFactory(\'Folder\', \'target\')\n-        self.folder.target.invokeFactory(\'Document\', \'d1\')\n+        self.folder.invokeFactory("Folder", "target")\n+        self.folder.target.invokeFactory("Document", "d1")\n \n         e = CopyAction()\n-        e.target_folder = \'/f1/target\'\n+        e.target_folder = "/f1/target"\n \n         ex = getMultiAdapter(\n-            (self.folder.target, e, DummyEvent(self.folder.d1)), IExecutable)\n+            (self.folder.target, e, DummyEvent(self.folder.d1)), IExecutable\n+        )\n         self.assertEqual(True, ex())\n \n-        self.assertTrue(\'d1\' in self.folder.objectIds())\n-        self.assertTrue(\'d1\' in self.folder.target.objectIds())\n-        self.assertTrue(\'d1.1\' in self.folder.target.objectIds())\n+        self.assertTrue("d1" in self.folder.objectIds())\n+        self.assertTrue("d1" in self.folder.target.objectIds())\n+        self.assertTrue("d1.1" in self.folder.target.objectIds())\ndiff --git a/plone/app/contentrules/tests/test_action_delete.py b/plone/app/contentrules/tests/test_action_delete.py\nindex d76e76b..f3478cd 100644\n--- a/plone/app/contentrules/tests/test_action_delete.py\n+++ b/plone/app/contentrules/tests/test_action_delete.py\n@@ -17,30 +17,30 @@\n \n @implementer(IObjectEvent)\n class DummyEvent(object):\n-\n     def __init__(self, object):\n         self.object = object\n \n \n class TestDeleteAction(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Delete\')\n-        self.assertEqual(\'plone.actions.Delete\', element.addview)\n+        element = getUtility(IRuleAction, name="plone.actions.Delete")\n+        self.assertEqual("plone.actions.Delete", element.addview)\n         self.assertEqual(None, element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(IObjectEvent, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Delete\')\n+        element = getUtility(IRuleAction, name="plone.actions.Delete")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage[u"foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n         adding = getMultiAdapter(\n-            (rule.__of__(self.portal), self.portal.REQUEST), name=\'+action\')\n+            (rule.__of__(self.portal), self.portal.REQUEST), name="+action"\n+        )\n         addview = getMultiAdapter(\n-            (adding.__of__(rule), self.portal.REQUEST), name=element.addview)\n+            (adding.__of__(rule), self.portal.REQUEST), name=element.addview\n+        )\n         addview()\n \n         e = rule.actions[0]\n@@ -49,8 +49,7 @@ def testInvokeAddView(self):\n     def testExecute(self):\n         e = DeleteAction()\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         self.assertEqual(True, ex())\n \n-        self.assertFalse(\'d1\' in self.folder.objectIds())\n+        self.assertFalse("d1" in self.folder.objectIds())\ndiff --git a/plone/app/contentrules/tests/test_action_logger.py b/plone/app/contentrules/tests/test_action_logger.py\nindex 051f70d..e89fd03 100644\n--- a/plone/app/contentrules/tests/test_action_logger.py\n+++ b/plone/app/contentrules/tests/test_action_logger.py\n@@ -22,80 +22,78 @@ class DummyEvent(object):\n \n @implementer(IObjectEvent)\n class DummyObjectEvent(object):\n-\n     def __init__(self, obj):\n         self.object = obj\n \n \n class TestLoggerAction(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Logger\')\n-        self.assertEqual(\'plone.actions.Logger\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleAction, name="plone.actions.Logger")\n+        self.assertEqual("plone.actions.Logger", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(None, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Logger\')\n+        element = getUtility(IRuleAction, name="plone.actions.Logger")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage[u"foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter((rule, self.portal.REQUEST), name=\'+action\')\n-        addview = getMultiAdapter(\n-            (adding, self.portal.REQUEST), name=element.addview)\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+action")\n+        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)\n \n         addview.form_instance.update()\n         content = addview.form_instance.create(\n-            data={\'targetLogger\': \'foo\', \'loggingLevel\': 10, \'message\': \'bar\'})\n+            data={"targetLogger": "foo", "loggingLevel": 10, "message": "bar"}\n+        )\n         addview.form_instance.add(content)\n \n         e = rule.actions[0]\n         self.assertTrue(isinstance(e, LoggerAction))\n-        self.assertEqual(\'foo\', e.targetLogger)\n+        self.assertEqual("foo", e.targetLogger)\n         self.assertEqual(10, e.loggingLevel)\n-        self.assertEqual(\'bar\', e.message)\n+        self.assertEqual("bar", e.message)\n \n     def testInvokeEditView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Logger\')\n+        element = getUtility(IRuleAction, name="plone.actions.Logger")\n         e = LoggerAction()\n-        editview = getMultiAdapter(\n-            (e, self.folder.REQUEST), name=element.editview)\n+        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)\n         self.assertTrue(isinstance(editview, LoggerEditFormView))\n \n     def testProcessedMessage(self):\n         e = LoggerAction()\n-        e.targetLogger = \'testing\'\n+        e.targetLogger = "testing"\n         e.loggingLevel = 0\n-        e.message = \'Test log event\'\n+        e.message = "Test log event"\n         ex = getMultiAdapter(\n-            (self.folder, e, DummyObjectEvent(self.folder)), IExecutable)\n-        self.assertEqual(\'Test log event\', ex.processedMessage())\n+            (self.folder, e, DummyObjectEvent(self.folder)), IExecutable\n+        )\n+        self.assertEqual("Test log event", ex.processedMessage())\n \n-        e.message = \'Test log event : &c\'\n+        e.message = "Test log event : &c"\n         self.assertEqual(\n-            \'Test log event : <Folder at /plone/f1>\',\n+            "Test log event : <Folder at /plone/f1>",\n             ex.processedMessage(),\n         )\n \n-        e.message = \'Test log event : &e\'\n+        e.message = "Test log event : &e"\n         self.assertEqual(\n-            \'Test log event : \'\n-            \'plone.app.contentrules.tests.test_action_logger.DummyObjectEvent\',\n+            "Test log event : "\n+            "plone.app.contentrules.tests.test_action_logger.DummyObjectEvent",\n             ex.processedMessage(),\n         )\n \n-        e.message = \'Test log event : &u\'\n+        e.message = "Test log event : &u"\n         self.assertEqual(\n-            \'Test log event : {0}\'.format(TEST_USER_NAME),\n+            "Test log event : {0}".format(TEST_USER_NAME),\n             ex.processedMessage(),\n         )\n \n     def testExecute(self):\n         e = LoggerAction()\n-        e.targetLogger = \'testing\'\n+        e.targetLogger = "testing"\n         e.loggingLevel = 0\n-        e.message = \'Test log event\'\n+        e.message = "Test log event"\n         ex = getMultiAdapter((self.folder, e, DummyEvent()), IExecutable)\n         self.assertTrue(ex())\ndiff --git a/plone/app/contentrules/tests/test_action_mail.py b/plone/app/contentrules/tests/test_action_mail.py\nindex ff7f8fd..1375ad5 100644\n--- a/plone/app/contentrules/tests/test_action_mail.py\n+++ b/plone/app/contentrules/tests/test_action_mail.py\n@@ -33,215 +33,200 @@\n \n @implementer(IObjectEvent)\n class DummyEvent(object):\n-\n     def __init__(self, object):\n         self.object = object\n \n \n class TestMailAction(ContentRulesTestCase):\n-\n     def setUp(self):\n         super(TestMailAction, self).setUp()\n-        self.folder[\'d1\'].setTitle(u\'W\xc3\xa4lkommen\')\n+        self.folder["d1"].setTitle(u"W\xc3\xa4lkommen")\n \n         users = (\n-            (\'userone\', \'User One\', \'user@one.com\', (\'Manager\', \'Member\')),\n-            (\'usertwo\', \'User Two\', \'user@two.com\', (\'Reviewer\', \'Member\')),\n-            (\'userthree\', \'User Three\', \'user@three.com\', (\'Owner\', \'Member\')),\n-            (\'userfour\', \'User Four\', \'user@four.com\', (\'Member\', )),\n+            ("userone", "User One", "user@one.com", ("Manager", "Member")),\n+            ("usertwo", "User Two", "user@two.com", ("Reviewer", "Member")),\n+            ("userthree", "User Three", "user@three.com", ("Owner", "Member")),\n+            ("userfour", "User Four", "user@four.com", ("Member",)),\n         )\n         for id, fname, email, roles in users:\n-            self.portal.portal_membership.addMember(id, \'secret\', roles, [])\n+            self.portal.portal_membership.addMember(id, "secret", roles, [])\n             member = self.portal.portal_membership.getMemberById(id)\n-            member.setMemberProperties({\'fullname\': fname, \'email\': email})\n+            member.setMemberProperties({"fullname": fname, "email": email})\n         # XXX: remove the manager role that was set in the base class\n         setRoles(self.portal, TEST_USER_ID, [])\n \n     def testRegistered(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Mail\')\n-        self.assertEqual(\'plone.actions.Mail\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleAction, name="plone.actions.Mail")\n+        self.assertEqual("plone.actions.Mail", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n \n     def testInvokeAddView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Mail\')\n+        element = getUtility(IRuleAction, name="plone.actions.Mail")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage[u"foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter((rule, self.portal.REQUEST), name=\'+action\')\n-        addview = getMultiAdapter((adding, self.portal.REQUEST),\n-                                  name=element.addview)\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+action")\n+        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)\n         self.assertTrue(isinstance(addview, MailAddFormView))\n \n         addview.form_instance.update()\n         output = addview.form_instance()\n-        self.assertIn(\'<h1>Substitutions</h1>\', output)\n+        self.assertIn("<h1>Substitutions</h1>", output)\n         content = addview.form_instance.create(\n             data={\n-                \'subject\': \'My Subject\',\n-                \'source\': \'foo@bar.be\',\n-                \'recipients\': \'foo@bar.be,bar@foo.be\',\n-                \'message\': \'Hey, Oh!\',\n+                "subject": "My Subject",\n+                "source": "foo@bar.be",\n+                "recipients": "foo@bar.be,bar@foo.be",\n+                "message": "Hey, Oh!",\n             }\n         )\n         addview.form_instance.add(content)\n \n         e = rule.actions[0]\n         self.assertTrue(isinstance(e, MailAction))\n-        self.assertEqual(\'My Subject\', e.subject)\n-        self.assertEqual(\'foo@bar.be\', e.source)\n-        self.assertEqual(\'foo@bar.be,bar@foo.be\', e.recipients)\n-        self.assertEqual(\'Hey, Oh!\', e.message)\n+        self.assertEqual("My Subject", e.subject)\n+        self.assertEqual("foo@bar.be", e.source)\n+        self.assertEqual("foo@bar.be,bar@foo.be", e.recipients)\n+        self.assertEqual("Hey, Oh!", e.message)\n \n     def testInvokeEditView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Mail\')\n+        element = getUtility(IRuleAction, name="plone.actions.Mail")\n         e = MailAction()\n-        editview = getMultiAdapter((e, self.folder.REQUEST),\n-                                   name=element.editview)\n+        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)\n         self.assertTrue(isinstance(editview, MailEditFormView))\n \n     def testExecute(self):\n         # this avoids sending mail as currentuser@foobar.com\n         self.portal.portal_membership.getAuthenticatedMember().setProperties(\n-            email=\'currentuser@foobar.com\')\n+            email="currentuser@foobar.com"\n+        )\n         e = MailAction()\n-        e.source = \'$user_email\'\n-        e.recipients = \'bar@foo.be, bar@foo.be, $reviewer_emails, \' \\\n-                       \'$manager_emails, $member_emails\'\n+        e.source = "$user_email"\n+        e.recipients = (\n+            "bar@foo.be, bar@foo.be, $reviewer_emails, "\n+            "$manager_emails, $member_emails"\n+        )\n         e.message = u"P\xc3\xa4ge \'${title}\' created in ${url} !"\n-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)),\n-                             IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         ex()\n         sent_mails = {}\n         for mail_sent in self.portal.MailHost.messages:\n             mail_sent_msg = message_from_bytes(mail_sent)\n-            sent_mails[mail_sent_msg.get(\'To\')] = mail_sent_msg\n+            sent_mails[mail_sent_msg.get("To")] = mail_sent_msg\n \n-        mailSent = sent_mails[\'bar@foo.be\']\n-        self.assertEqual(\'text/plain; charset="utf-8"\',\n-                         mailSent.get(\'Content-Type\'))\n-        self.assertEqual(\'currentuser@foobar.com\', mailSent.get(\'From\'))\n+        mailSent = sent_mails["bar@foo.be"]\n+        self.assertEqual(\'text/plain; charset="utf-8"\', mailSent.get("Content-Type"))\n+        self.assertEqual("currentuser@foobar.com", mailSent.get("From"))\n         # The output message should be a utf-8 encoded string\n         self.assertEqual(\n             u"P\xc3\xa4ge \'W\xc3\xa4lkommen\' created in http://nohost/plone/f1/d1 !",\n-            mailSent.get_payload(decode=True).decode(\'utf8\'))\n+            mailSent.get_payload(decode=True).decode("utf8"),\n+        )\n \n         # check interpolation of $reviewer_emails\n-        self.assertTrue(\'user@two.com\' in sent_mails)\n+        self.assertTrue("user@two.com" in sent_mails)\n \n         # check interpolation of $manager_emails\n-        self.assertTrue(\'user@one.com\' in sent_mails)\n+        self.assertTrue("user@one.com" in sent_mails)\n \n         # check interpolation of $member_emails\n         emails = [\n-            \'bar@foo.be\',\n-            \'user@one.com\',\n-            \'user@two.com\',\n-            \'user@three.com\',\n-            \'user@four.com\',\n+            "bar@foo.be",\n+            "user@one.com",\n+            "user@two.com",\n+            "user@three.com",\n+            "user@four.com",\n         ]\n-        self.assertEqual(\n-            set(emails),\n-            set(sent_mails.keys()))\n+        self.assertEqual(set(emails), set(sent_mails.keys()))\n \n     def testExecuteNoSource(self):\n         e = MailAction()\n-        e.recipients = \'bar@foo.be,foo@bar.be\'\n-        e.message = \'Document created !\'\n-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)),\n-                             IExecutable)\n+        e.recipients = "bar@foo.be,foo@bar.be"\n+        e.message = "Document created !"\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         # this no longer errors since it breaks usability\n         self.assertTrue(ex)\n         # and will return False for the unsent message\n         # (happens when no sender address can be computed)\n         registry = getUtility(IRegistry)\n-        mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n+        mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n         mail_settings.email_from_address = ""\n         self.assertEqual(ex(), False)\n \n         # if we provide a site mail address the message sends correctly\n-        mail_settings.email_from_address = \'manager@portal.be\'\n-        mail_settings.email_from_name = u\'plone@rulez\'\n+        mail_settings.email_from_address = "manager@portal.be"\n+        mail_settings.email_from_name = u"plone@rulez"\n         ex()\n         self.assertEqual(len(self.portal.MailHost.messages), 2)\n         mailSent = message_from_bytes(self.portal.MailHost.messages[0])\n-        self.assertEqual(\'text/plain; charset="utf-8"\',\n-                         mailSent.get(\'Content-Type\'))\n-        self.assertIn(mailSent.get(\'To\'), [\'bar@foo.be\', \'foo@bar.be\'])\n-        self.assertEqual(\'"plone@rulez" <manager@portal.be>\',\n-                         mailSent.get(\'From\'))\n-        self.assertEqual(\'Document created !\',\n-                         mailSent.get_payload())\n+        self.assertEqual(\'text/plain; charset="utf-8"\', mailSent.get("Content-Type"))\n+        self.assertIn(mailSent.get("To"), ["bar@foo.be", "foo@bar.be"])\n+        self.assertEqual(\'"plone@rulez" <manager@portal.be>\', mailSent.get("From"))\n+        self.assertEqual("Document created !", mailSent.get_payload())\n \n     def testExecuteMultiRecipients(self):\n         e = MailAction()\n-        e.source = \'foo@bar.be\'\n-        e.recipients = \'bar@foo.be,foo@bar.be\'\n-        e.message = \'Document created !\'\n-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)),\n-                             IExecutable)\n+        e.source = "foo@bar.be"\n+        e.recipients = "bar@foo.be,foo@bar.be"\n+        e.message = "Document created !"\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         ex()\n         self.assertEqual(len(self.portal.MailHost.messages), 2)\n         # in py3 the order of mails is non-determininistic\n         # because sending iterates over a set of recipients\n         for msg in self.portal.MailHost.messages:\n-            if b\'bar@foo.be\' in msg:\n+            if b"bar@foo.be" in msg:\n                 mailSent1 = message_from_bytes(msg)\n             else:\n                 mailSent2 = message_from_bytes(msg)\n-        self.assertEqual(\'text/plain; charset="utf-8"\',\n-                         mailSent1.get(\'Content-Type\'))\n-        self.assertEqual(\'bar@foo.be\', mailSent1.get(\'To\'))\n-        self.assertEqual(\'foo@bar.be\', mailSent1.get(\'From\'))\n-        self.assertEqual(\'Document created !\',\n-                         mailSent1.get_payload())\n-        self.assertEqual(\'text/plain; charset="utf-8"\',\n-                         mailSent2.get(\'Content-Type\'))\n-        self.assertEqual(\'foo@bar.be\', mailSent2.get(\'To\'))\n-        self.assertEqual(\'foo@bar.be\', mailSent2.get(\'From\'))\n-        self.assertEqual(\'Document created !\',\n-                         mailSent2.get_payload())\n+        self.assertEqual(\'text/plain; charset="utf-8"\', mailSent1.get("Content-Type"))\n+        self.assertEqual("bar@foo.be", mailSent1.get("To"))\n+        self.assertEqual("foo@bar.be", mailSent1.get("From"))\n+        self.assertEqual("Document created !", mailSent1.get_payload())\n+        self.assertEqual(\'text/plain; charset="utf-8"\', mailSent2.get("Content-Type"))\n+        self.assertEqual("foo@bar.be", mailSent2.get("To"))\n+        self.assertEqual("foo@bar.be", mailSent2.get("From"))\n+        self.assertEqual("Document created !", mailSent2.get_payload())\n \n     def testExecuteExcludeActor(self):\n         self.portal.portal_membership.getAuthenticatedMember().setProperties(\n-            email=\'currentuser@foobar.com\')\n+            email="currentuser@foobar.com"\n+        )\n         e = MailAction()\n-        e.source = \'$user_email\'\n+        e.source = "$user_email"\n         e.exclude_actor = True\n-        e.recipients = \'bar@foo.be, currentuser@foobar.com\'\n-        e.message = u\'A dummy event just happened !!!!!\'\n-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)),\n-                             IExecutable)\n+        e.recipients = "bar@foo.be, currentuser@foobar.com"\n+        e.message = u"A dummy event just happened !!!!!"\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         ex()\n         self.assertEqual(len(self.portal.MailHost.messages), 1)\n \n         mailSent = message_from_bytes(self.portal.MailHost.messages[0])\n-        self.assertEqual(\'bar@foo.be\', mailSent.get(\'To\'))\n+        self.assertEqual("bar@foo.be", mailSent.get("To"))\n \n     def testExecuteNoRecipients(self):\n         # no recipient\n         e = MailAction()\n-        e.source = \'foo@bar.be\'\n-        e.recipients = \'\'\n-        e.message = \'Document created !\'\n-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)),\n-                             IExecutable)\n+        e.source = "foo@bar.be"\n+        e.recipients = ""\n+        e.message = "Document created !"\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         ex()\n         self.assertEqual(len(self.portal.MailHost.messages), 0)\n \n-    @unittest.skip(\n-        \'Monkey patching does not work well with mocking. Needs fixing.\'\n-    )\n+    @unittest.skip("Monkey patching does not work well with mocking. Needs fixing.")\n     def testExecuteBadMailHost(self):\n         # Our goal is that mailing errors should not cause exceptions\n         self.portal.portal_membership.getAuthenticatedMember().setProperties(\n-            email=\'currentuser@foobar.com\')\n+            email="currentuser@foobar.com"\n+        )\n         e = MailAction()\n-        e.source = \'$user_email\'\n-        e.recipients = \'bar@foo.be, $reviewer_emails, $manager_emails, \' \\\n-                       \'$member_emails\'\n+        e.source = "$user_email"\n+        e.recipients = (\n+            "bar@foo.be, $reviewer_emails, $manager_emails, " "$member_emails"\n+        )\n         e.message = u"P\xc3\x83\xc2\xa4ge \'${title}\' created in ${url} !"\n-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)),\n-                             IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         ex()\ndiff --git a/plone/app/contentrules/tests/test_action_modify.py b/plone/app/contentrules/tests/test_action_modify.py\nindex 0deb751..8cffcd6 100644\n--- a/plone/app/contentrules/tests/test_action_modify.py\n+++ b/plone/app/contentrules/tests/test_action_modify.py\n@@ -6,12 +6,10 @@\n \n \n class TestModifyAction(TestCase):\n-\n     def setUp(self):\n         self.called = False\n \n         def register_call(testcase):\n-\n             def inner_register_call(event):\n                 testcase.called = True\n \n@@ -28,6 +26,7 @@ def testIgnoreAddedEvents(self):\n         class Content(object):\n             __parent__ = None\n             __name__ = None\n+\n         handlers.modified(ObjectAddedEvent(Content()))\n         self.assertFalse(self.called)\n \n@@ -35,5 +34,6 @@ def testIgnoreDeletedEvents(self):\n         class Content(object):\n             __parent__ = None\n             __name__ = None\n+\n         handlers.modified(ObjectRemovedEvent(Content()))\n         self.assertFalse(self.called)\ndiff --git a/plone/app/contentrules/tests/test_action_move.py b/plone/app/contentrules/tests/test_action_move.py\nindex c8f2aee..6858e76 100644\n--- a/plone/app/contentrules/tests/test_action_move.py\n+++ b/plone/app/contentrules/tests/test_action_move.py\n@@ -16,109 +16,104 @@\n \n @implementer(IObjectEvent)\n class DummyEvent(object):\n-\n     def __init__(self, object):\n         self.object = object\n \n \n class TestMoveAction(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Move\')\n-        self.assertEqual(\'plone.actions.Move\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleAction, name="plone.actions.Move")\n+        self.assertEqual("plone.actions.Move", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(IObjectEvent, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Move\')\n+        element = getUtility(IRuleAction, name="plone.actions.Move")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage[u"foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter((rule, self.portal.REQUEST), name=\'+action\')\n-        addview = getMultiAdapter(\n-            (adding, self.portal.REQUEST), name=element.addview)\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+action")\n+        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)\n \n         addview.form_instance.update()\n         content = addview.form_instance.create(\n-            data={\'target_folder\': \'/target\', })\n+            data={\n+                "target_folder": "/target",\n+            }\n+        )\n         addview.form_instance.add(content)\n \n         e = rule.actions[0]\n         self.assertTrue(isinstance(e, MoveAction))\n-        self.assertEqual(\'/target\', e.target_folder)\n+        self.assertEqual("/target", e.target_folder)\n \n     def testInvokeEditView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Move\')\n+        element = getUtility(IRuleAction, name="plone.actions.Move")\n         e = MoveAction()\n-        editview = getMultiAdapter(\n-            (e, self.folder.REQUEST), name=element.editview)\n+        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)\n         self.assertTrue(isinstance(editview, MoveEditFormView))\n \n     def testExecute(self):\n         e = MoveAction()\n-        e.target_folder = \'/target\'\n+        e.target_folder = "/target"\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         self.assertEqual(True, ex())\n \n-        self.assertFalse(\'d1\' in self.folder.objectIds())\n-        self.assertTrue(\'d1\' in self.portal.target.objectIds())\n+        self.assertFalse("d1" in self.folder.objectIds())\n+        self.assertTrue("d1" in self.portal.target.objectIds())\n \n         # test catalog is ok\n-        brains = self.portal.portal_catalog(id=\'d1\')\n+        brains = self.portal.portal_catalog(id="d1")\n         self.assertEqual(len(brains), 1)\n-        self.assertEqual(brains[0].getPath(), \'/plone/target/d1\')\n+        self.assertEqual(brains[0].getPath(), "/plone/target/d1")\n \n     def testExecuteWithError(self):\n         e = MoveAction()\n-        e.target_folder = \'/dummy\'\n+        e.target_folder = "/dummy"\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         self.assertEqual(False, ex())\n \n-        self.assertTrue(\'d1\' in self.folder.objectIds())\n-        self.assertFalse(\'d1\' in self.portal.target.objectIds())\n+        self.assertTrue("d1" in self.folder.objectIds())\n+        self.assertFalse("d1" in self.portal.target.objectIds())\n \n     def testExecuteWithoutPermissionsOnTarget(self):\n-        setRoles(self.portal, TEST_USER_ID, (\'Member\', ))\n+        setRoles(self.portal, TEST_USER_ID, ("Member",))\n \n         e = MoveAction()\n-        e.target_folder = \'/target\'\n+        e.target_folder = "/target"\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         self.assertEqual(True, ex())\n \n-        self.assertFalse(\'d1\' in self.folder.objectIds())\n-        self.assertTrue(\'d1\' in self.portal.target.objectIds())\n+        self.assertFalse("d1" in self.folder.objectIds())\n+        self.assertTrue("d1" in self.portal.target.objectIds())\n \n     def testExecuteWithNamingConflict(self):\n-        setRoles(self.portal, TEST_USER_ID, (\'Manager\', ))\n-        self.portal.target.invokeFactory(\'Document\', \'d1\')\n-        setRoles(self.portal, TEST_USER_ID, (\'Member\', ))\n+        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n+        self.portal.target.invokeFactory("Document", "d1")\n+        setRoles(self.portal, TEST_USER_ID, ("Member",))\n \n         e = MoveAction()\n-        e.target_folder = \'/target\'\n+        e.target_folder = "/target"\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         self.assertEqual(True, ex())\n \n-        self.assertFalse(\'d1\' in self.folder.objectIds())\n-        self.assertTrue(\'d1\' in self.portal.target.objectIds())\n-        self.assertTrue(\'d1.1\' in self.portal.target.objectIds())\n+        self.assertFalse("d1" in self.folder.objectIds())\n+        self.assertTrue("d1" in self.portal.target.objectIds())\n+        self.assertTrue("d1.1" in self.portal.target.objectIds())\n \n     def testExecuteWithSameSourceAndTargetFolder(self):\n-        setRoles(self.portal, TEST_USER_ID, (\'Manager\', ))\n-        self.portal.target.invokeFactory(\'Document\', \'d1\')\n-        setRoles(self.portal, TEST_USER_ID, (\'Member\', ))\n+        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n+        self.portal.target.invokeFactory("Document", "d1")\n+        setRoles(self.portal, TEST_USER_ID, ("Member",))\n \n         e = MoveAction()\n-        e.target_folder = \'/target\'\n+        e.target_folder = "/target"\n \n         ex = getMultiAdapter(\n             (self.portal.target, e, DummyEvent(self.portal.target.d1)),\n@@ -126,7 +121,7 @@ def testExecuteWithSameSourceAndTargetFolder(self):\n         )\n         self.assertEqual(True, ex())\n \n-        self.assertEqual([\'d1\'], list(self.portal.target.objectIds()))\n+        self.assertEqual(["d1"], list(self.portal.target.objectIds()))\n \n     def testExecuteWithNamingConflictDoesNotStupidlyAcquireHasKey(self):\n         # self.folder is an ATBTreeFolder and so has a has_key.\n@@ -134,16 +129,17 @@ def testExecuteWithNamingConflictDoesNotStupidlyAcquireHasKey(self):\n         # Let\'s make sure we don\'t accidentally acquire has_key and use\n         # this for the check for unique id.\n \n-        self.folder.invokeFactory(\'Folder\', \'target\')\n-        self.folder.target.invokeFactory(\'Document\', \'d1\')\n+        self.folder.invokeFactory("Folder", "target")\n+        self.folder.target.invokeFactory("Document", "d1")\n \n         e = MoveAction()\n-        e.target_folder = \'/f1/target\'\n+        e.target_folder = "/f1/target"\n \n         ex = getMultiAdapter(\n-            (self.folder.target, e, DummyEvent(self.folder.d1)), IExecutable)\n+            (self.folder.target, e, DummyEvent(self.folder.d1)), IExecutable\n+        )\n         self.assertEqual(True, ex())\n \n-        self.assertFalse(\'d1\' in self.folder.objectIds())\n-        self.assertTrue(\'d1\' in self.folder.target.objectIds())\n-        self.assertTrue(\'d1.1\' in self.folder.target.objectIds())\n+        self.assertFalse("d1" in self.folder.objectIds())\n+        self.assertTrue("d1" in self.folder.target.objectIds())\n+        self.assertTrue("d1.1" in self.folder.target.objectIds())\ndiff --git a/plone/app/contentrules/tests/test_action_notify.py b/plone/app/contentrules/tests/test_action_notify.py\nindex 03fa951..3299f56 100644\n--- a/plone/app/contentrules/tests/test_action_notify.py\n+++ b/plone/app/contentrules/tests/test_action_notify.py\n@@ -20,49 +20,49 @@ class DummyEvent(object):\n \n \n class TestNotifyAction(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Notify\')\n-        self.assertEqual(\'plone.actions.Notify\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleAction, name="plone.actions.Notify")\n+        self.assertEqual("plone.actions.Notify", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(None, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Notify\')\n+        element = getUtility(IRuleAction, name="plone.actions.Notify")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage[u"foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter((rule, self.request), name=\'+action\')\n+        adding = getMultiAdapter((rule, self.request), name="+action")\n         addview = getMultiAdapter((adding, self.request), name=element.addview)\n \n         addview.form_instance.update()\n-        content = addview.form_instance.create(data={\'message\': \'Hello world\',\n-                                                     \'message_type\': \'info\'})\n+        content = addview.form_instance.create(\n+            data={"message": "Hello world", "message_type": "info"}\n+        )\n         addview.form_instance.add(content)\n \n         e = rule.actions[0]\n         self.assertTrue(isinstance(e, NotifyAction))\n-        self.assertEqual(\'Hello world\', e.message)\n-        self.assertEqual(\'info\', e.message_type)\n+        self.assertEqual("Hello world", e.message)\n+        self.assertEqual("info", e.message_type)\n \n     def testInvokeEditView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Notify\')\n+        element = getUtility(IRuleAction, name="plone.actions.Notify")\n         e = NotifyAction()\n         editview = getMultiAdapter((e, self.request), name=element.editview)\n         self.assertTrue(isinstance(editview, NotifyEditFormView))\n \n     def testExecute(self):\n         e = NotifyAction()\n-        e.message = \'Hello world\'\n-        e.message_type = \'info\'\n+        e.message = "Hello world"\n+        e.message_type = "info"\n \n         ex = getMultiAdapter((self.folder, e, DummyEvent()), IExecutable)\n         self.assertEqual(True, ex())\n \n         new_cookies = self.request.RESPONSE.cookies[STATUSMESSAGEKEY]\n-        messages = _decodeCookieValue(new_cookies[\'value\'])\n+        messages = _decodeCookieValue(new_cookies["value"])\n         self.assertEqual(1, len(messages))\n-        self.assertEqual(\'Hello world\', messages[0].message)\n-        self.assertEqual(\'info\', messages[0].type)\n+        self.assertEqual("Hello world", messages[0].message)\n+        self.assertEqual("info", messages[0].type)\ndiff --git a/plone/app/contentrules/tests/test_action_versioning.py b/plone/app/contentrules/tests/test_action_versioning.py\nindex 2e522c3..d463f88 100644\n--- a/plone/app/contentrules/tests/test_action_versioning.py\n+++ b/plone/app/contentrules/tests/test_action_versioning.py\n@@ -14,49 +14,46 @@\n \n @implementer(Interface)\n class DummyEvent(object):\n-\n     def __init__(self, object):\n         self.object = object\n \n \n class TestVersioningAction(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Versioning\')\n-        self.assertEqual(\'plone.actions.Versioning\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleAction, name="plone.actions.Versioning")\n+        self.assertEqual("plone.actions.Versioning", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(None, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Versioning\')\n+        element = getUtility(IRuleAction, name="plone.actions.Versioning")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage[u"foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter((rule, self.request), name=\'+action\')\n+        adding = getMultiAdapter((rule, self.request), name="+action")\n         addview = getMultiAdapter((adding, self.request), name=element.addview)\n \n         addview.form_instance.update()\n-        content = addview.form_instance.create(data={\'comment\': \'Hello world\'})\n+        content = addview.form_instance.create(data={"comment": "Hello world"})\n         addview.form_instance.add(content)\n \n         e = rule.actions[0]\n         self.assertTrue(isinstance(e, VersioningAction))\n-        self.assertEqual(\'Hello world\', e.comment)\n+        self.assertEqual("Hello world", e.comment)\n \n     def testInvokeEditView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Versioning\')\n+        element = getUtility(IRuleAction, name="plone.actions.Versioning")\n         e = VersioningAction()\n         editview = getMultiAdapter((e, self.request), name=element.editview)\n         self.assertTrue(isinstance(editview, VersioningEditFormView))\n \n     def testExecute(self):\n         e = VersioningAction()\n-        e.comment = \'Hello world\'\n+        e.comment = "Hello world"\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder)), IExecutable)\n         # not version for now\n         pr = self.portal.portal_repository\n         self.assertEqual(pr.getHistoryMetadata(self.folder), [])\n@@ -64,8 +61,10 @@ def testExecute(self):\n         # action will create first version\n         self.assertEqual(True, ex())\n         self.assertEqual(\n-            pr.getHistoryMetadata(self.folder).getLength(countPurged=False), 1)\n+            pr.getHistoryMetadata(self.folder).getLength(countPurged=False), 1\n+        )\n         # calling action again will create a second version\n         ex()\n         self.assertEqual(\n-            pr.getHistoryMetadata(self.folder).getLength(countPurged=False), 2)\n+            pr.getHistoryMetadata(self.folder).getLength(countPurged=False), 2\n+        )\ndiff --git a/plone/app/contentrules/tests/test_action_workflow.py b/plone/app/contentrules/tests/test_action_workflow.py\nindex 3f2ca3d..7650dc4 100644\n--- a/plone/app/contentrules/tests/test_action_workflow.py\n+++ b/plone/app/contentrules/tests/test_action_workflow.py\n@@ -14,77 +14,75 @@\n \n @implementer(IObjectEvent)\n class DummyEvent(object):\n-\n     def __init__(self, object):\n         self.object = object\n \n \n class TestWorkflowAction(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Workflow\')\n-        self.assertEqual(\'plone.actions.Workflow\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleAction, name="plone.actions.Workflow")\n+        self.assertEqual("plone.actions.Workflow", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(IObjectEvent, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Workflow\')\n+        element = getUtility(IRuleAction, name="plone.actions.Workflow")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage[u"foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter((rule, self.portal.REQUEST), name=\'+action\')\n-        addview = getMultiAdapter(\n-            (adding, self.portal.REQUEST), name=element.addview)\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+action")\n+        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)\n \n         addview.form_instance.update()\n         content = addview.form_instance.create(\n-            data={\'transition\': \'publish\', })\n+            data={\n+                "transition": "publish",\n+            }\n+        )\n         addview.form_instance.add(content)\n \n         e = rule.actions[0]\n         self.assertTrue(isinstance(e, WorkflowAction))\n-        self.assertEqual(\'publish\', e.transition)\n+        self.assertEqual("publish", e.transition)\n \n     def testInvokeEditView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Workflow\')\n+        element = getUtility(IRuleAction, name="plone.actions.Workflow")\n         e = WorkflowAction()\n-        editview = getMultiAdapter(\n-            (e, self.folder.REQUEST), name=element.editview)\n+        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)\n         self.assertTrue(isinstance(editview, WorkflowEditFormView))\n \n     def testExecute(self):\n         e = WorkflowAction()\n-        e.transition = \'publish\'\n+        e.transition = "publish"\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         self.assertEqual(True, ex())\n \n         self.assertEqual(\n-            \'published\',\n+            "published",\n             self.portal.portal_workflow.getInfoFor(\n                 self.folder.d1,\n-                \'review_state\',\n-            )\n+                "review_state",\n+            ),\n         )\n \n     def testExecuteWithError(self):\n         e = WorkflowAction()\n-        e.transition = \'foobar\'\n+        e.transition = "foobar"\n \n         old_state = self.portal.portal_workflow.getInfoFor(\n-            self.folder.d1, \'review_state\')\n+            self.folder.d1, "review_state"\n+        )\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         self.assertEqual(False, ex())\n \n         self.assertEqual(\n             old_state,\n             self.portal.portal_workflow.getInfoFor(\n                 self.folder.d1,\n-                \'review_state\',\n-            )\n+                "review_state",\n+            ),\n         )\ndiff --git a/plone/app/contentrules/tests/test_browser.py b/plone/app/contentrules/tests/test_browser.py\nindex d9e0dda..32e2067 100644\n--- a/plone/app/contentrules/tests/test_browser.py\n+++ b/plone/app/contentrules/tests/test_browser.py\n@@ -6,16 +6,18 @@\n import unittest\n \n \n-optionflags = (doctest.NORMALIZE_WHITESPACE |\n-               doctest.ELLIPSIS |\n-               doctest.REPORT_NDIFF)\n+optionflags = doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS | doctest.REPORT_NDIFF\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    for doc in [\'assignment.txt\', \'simplepublish.txt\', \'multipublish.txt\']:\n-        suite.addTest(layered(\n-            doctest.DocFileSuite(doc, package=\'plone.app.contentrules.tests\',\n-                                 optionflags=optionflags),\n-            layer=PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING))\n+    for doc in ["assignment.txt", "simplepublish.txt", "multipublish.txt"]:\n+        suite.addTest(\n+            layered(\n+                doctest.DocFileSuite(\n+                    doc, package="plone.app.contentrules.tests", optionflags=optionflags\n+                ),\n+                layer=PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING,\n+            )\n+        )\n     return suite\ndiff --git a/plone/app/contentrules/tests/test_cascading_rule.py b/plone/app/contentrules/tests/test_cascading_rule.py\nindex b006440..8f42e60 100644\n--- a/plone/app/contentrules/tests/test_cascading_rule.py\n+++ b/plone/app/contentrules/tests/test_cascading_rule.py\n@@ -16,28 +16,28 @@ class TestCascadingRule(unittest.TestCase):\n     layer = PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'news\')\n-        self.portal.invokeFactory(\'Folder\', \'events\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "news")\n+        self.portal.invokeFactory("Folder", "events")\n \n-        applyProfile(self.portal, \'plone.app.contentrules:testing\')\n-        edit_rule_assignment(self.portal, \'test4\', bubbles=1, enabled=1)\n-        edit_rule_assignment(self.portal, \'test5\', bubbles=1, enabled=1)\n+        applyProfile(self.portal, "plone.app.contentrules:testing")\n+        edit_rule_assignment(self.portal, "test4", bubbles=1, enabled=1)\n+        edit_rule_assignment(self.portal, "test5", bubbles=1, enabled=1)\n \n     def test_cascading_rule(self):\n         # check that test2 rule and test4 rule are executed\n         # test2 rule publishes the event in news folder\n         # test4 rule moves it in events folder when it is published\n \n-        createContentInContainer(self.portal.news, \'Event\', id=\'my-event\')\n-        self.assertFalse(\'my-event\' in self.portal.news)\n-        self.assertTrue(\'my-event\' in self.portal.events)\n+        createContentInContainer(self.portal.news, "Event", id="my-event")\n+        self.assertFalse("my-event" in self.portal.news)\n+        self.assertTrue("my-event" in self.portal.events)\n \n         wtool = self.portal.portal_workflow\n         self.assertEqual(\n-            wtool.getInfoFor(self.portal.events[\'my-event\'], \'review_state\'),\n-            \'published\',\n+            wtool.getInfoFor(self.portal.events["my-event"], "review_state"),\n+            "published",\n         )\ndiff --git a/plone/app/contentrules/tests/test_condition_group.py b/plone/app/contentrules/tests/test_condition_group.py\nindex 63b06a1..68c6242 100644\n--- a/plone/app/contentrules/tests/test_condition_group.py\n+++ b/plone/app/contentrules/tests/test_condition_group.py\n@@ -14,59 +14,50 @@\n \n @implementer(IObjectEvent)\n class DummyEvent(object):\n-\n     def __init__(self, obj):\n         self.object = obj\n \n \n class TestGroupCondition(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(IRuleCondition, name=\'plone.conditions.Group\')\n-        self.assertEqual(\'plone.conditions.Group\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleCondition, name="plone.conditions.Group")\n+        self.assertEqual("plone.conditions.Group", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(None, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(IRuleCondition, name=\'plone.conditions.Group\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.Group")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage[u"foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter(\n-            (rule, self.portal.REQUEST), name=\'+condition\')\n-        addview = getMultiAdapter(\n-            (adding, self.portal.REQUEST), name=element.addview)\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+condition")\n+        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)\n \n         addview.form_instance.update()\n-        content = addview.form_instance.create(\n-            data={\'group_names\': [\'Manager\']})\n+        content = addview.form_instance.create(data={"group_names": ["Manager"]})\n         addview.form_instance.add(content)\n \n         e = rule.conditions[0]\n         self.assertTrue(isinstance(e, GroupCondition))\n-        self.assertEqual([\'Manager\'], e.group_names)\n+        self.assertEqual(["Manager"], e.group_names)\n \n     def testInvokeEditView(self):\n-        element = getUtility(IRuleCondition, name=\'plone.conditions.Group\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.Group")\n         e = GroupCondition()\n-        editview = getMultiAdapter(\n-            (e, self.folder.REQUEST), name=element.editview)\n+        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)\n         self.assertTrue(isinstance(editview, GroupEditFormView))\n \n     def testExecute(self):\n         e = GroupCondition()\n-        e.group_names = [\'Administrators\', \'Reviewers\']\n+        e.group_names = ["Administrators", "Reviewers"]\n \n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.folder)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)\n         self.assertFalse(ex())\n \n-        group = self.portal.portal_groups.getGroupById(\'Administrators\')\n-        group.addMember(\n-            self.portal.portal_membership.getAuthenticatedMember().getId())\n+        group = self.portal.portal_groups.getGroupById("Administrators")\n+        group.addMember(self.portal.portal_membership.getAuthenticatedMember().getId())\n \n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.portal)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.portal)), IExecutable)\n         self.assertTrue(ex())\ndiff --git a/plone/app/contentrules/tests/test_condition_portal_type.py b/plone/app/contentrules/tests/test_condition_portal_type.py\nindex 7f81ad0..256ad98 100644\n--- a/plone/app/contentrules/tests/test_condition_portal_type.py\n+++ b/plone/app/contentrules/tests/test_condition_portal_type.py\n@@ -15,64 +15,54 @@\n \n @implementer(IObjectEvent)\n class DummyEvent(object):\n-\n     def __init__(self, obj):\n         self.object = obj\n \n \n class TestPortalTypeCondition(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.PortalType\')\n-        self.assertEqual(\'plone.conditions.PortalType\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleCondition, name="plone.conditions.PortalType")\n+        self.assertEqual("plone.conditions.PortalType", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(IObjectEvent, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.PortalType\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.PortalType")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage[u"foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter(\n-            (rule, self.portal.REQUEST), name=\'+condition\')\n-        addview = getMultiAdapter(\n-            (adding, self.portal.REQUEST), name=element.addview)\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+condition")\n+        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)\n \n         addview.form_instance.update()\n         content = addview.form_instance.create(\n-            data={\'check_types\': [\'Folder\', \'Image\']})\n+            data={"check_types": ["Folder", "Image"]}\n+        )\n         addview.form_instance.add(content)\n \n         e = rule.conditions[0]\n         self.assertTrue(isinstance(e, PortalTypeCondition))\n-        self.assertEqual([\'Folder\', \'Image\'], e.check_types)\n+        self.assertEqual(["Folder", "Image"], e.check_types)\n \n     def testInvokeEditView(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.PortalType\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.PortalType")\n         e = PortalTypeCondition()\n-        editview = getMultiAdapter(\n-            (e, self.folder.REQUEST), name=element.editview)\n+        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)\n         self.assertTrue(isinstance(editview, PortalTypeEditFormView))\n \n     def testExecute(self):\n         e = PortalTypeCondition()\n-        e.check_types = [\'Folder\', \'Image\']\n+        e.check_types = ["Folder", "Image"]\n \n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.folder)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)\n         self.assertTrue(ex())\n \n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.portal)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.portal)), IExecutable)\n         self.assertFalse(ex())\n \n         self.folder.portal_types = None\n         self.portal.getSiteManager().unregisterUtility(provided=ITypesTool)\n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.folder)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)\n         self.assertFalse(ex())\ndiff --git a/plone/app/contentrules/tests/test_condition_role.py b/plone/app/contentrules/tests/test_condition_role.py\nindex a7661a5..37f44a3 100644\n--- a/plone/app/contentrules/tests/test_condition_role.py\n+++ b/plone/app/contentrules/tests/test_condition_role.py\n@@ -14,57 +14,51 @@\n \n @implementer(IObjectEvent)\n class DummyEvent(object):\n-\n     def __init__(self, obj):\n         self.object = obj\n \n \n class TestRoleCondition(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(IRuleCondition, name=\'plone.conditions.Role\')\n-        self.assertEqual(\'plone.conditions.Role\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleCondition, name="plone.conditions.Role")\n+        self.assertEqual("plone.conditions.Role", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(None, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(IRuleCondition, name=\'plone.conditions.Role\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.Role")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage[u"foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter(\n-            (rule, self.portal.REQUEST), name=\'+condition\')\n-        addview = getMultiAdapter(\n-            (adding, self.portal.REQUEST), name=element.addview)\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+condition")\n+        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)\n \n         addview.form_instance.update()\n         content = addview.form_instance.create(\n-            data={\'role_names\': [\'Manager\', \'Member\']})\n+            data={"role_names": ["Manager", "Member"]}\n+        )\n         addview.form_instance.add(content)\n \n         e = rule.conditions[0]\n         self.assertTrue(isinstance(e, RoleCondition))\n-        self.assertEqual([\'Manager\', \'Member\'], e.role_names)\n+        self.assertEqual(["Manager", "Member"], e.role_names)\n \n     def testInvokeEditView(self):\n-        element = getUtility(IRuleCondition, name=\'plone.conditions.Role\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.Role")\n         e = RoleCondition()\n-        editview = getMultiAdapter(\n-            (e, self.folder.REQUEST), name=element.editview)\n+        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)\n         self.assertTrue(isinstance(editview, RoleEditFormView))\n \n     def testExecute(self):\n         e = RoleCondition()\n-        e.role_names = [\'Manager\', \'Member\']\n+        e.role_names = ["Manager", "Member"]\n \n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.folder)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)\n         self.assertTrue(ex())\n \n-        e.role_names = [\'Reviewer\']\n+        e.role_names = ["Reviewer"]\n \n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.portal)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.portal)), IExecutable)\n         self.assertFalse(ex())\ndiff --git a/plone/app/contentrules/tests/test_condition_tales_expression.py b/plone/app/contentrules/tests/test_condition_tales_expression.py\nindex e7738f1..2487aec 100644\n--- a/plone/app/contentrules/tests/test_condition_tales_expression.py\n+++ b/plone/app/contentrules/tests/test_condition_tales_expression.py\n@@ -18,70 +18,58 @@\n \n @implementer(IObjectEvent)\n class DummyEvent(object):\n-\n     def __init__(self, obj):\n         self.object = obj\n \n \n class TestTalesExpressionCondition(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.TalesExpression\')\n-        self.assertEqual(\'plone.conditions.TalesExpression\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleCondition, name="plone.conditions.TalesExpression")\n+        self.assertEqual("plone.conditions.TalesExpression", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n \n     def testInvokeAddView(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.TalesExpression\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.TalesExpression")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage[u"foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter(\n-            (rule, self.portal.REQUEST), name=\'+condition\')\n-        addview = getMultiAdapter(\n-            (adding, self.portal.REQUEST), name=element.addview)\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+condition")\n+        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)\n \n         addview.form_instance.update()\n         content = addview.form_instance.create(\n-            data={\'tales_expression\': \'python:"plone" in object.Subject()\'})\n+            data={"tales_expression": \'python:"plone" in object.Subject()\'}\n+        )\n         addview.form_instance.add(content)\n \n         e = rule.conditions[0]\n         self.assertTrue(isinstance(e, TalesExpressionCondition))\n-        self.assertEqual(\'python:"plone" in object.Subject()\',\n-                         e.tales_expression)\n+        self.assertEqual(\'python:"plone" in object.Subject()\', e.tales_expression)\n \n     def testInvokeEditView(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.TalesExpression\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.TalesExpression")\n         e = TalesExpressionCondition()\n-        editview = getMultiAdapter(\n-            (e, self.folder.REQUEST), name=element.editview)\n+        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)\n         self.assertTrue(isinstance(editview, TalesExpressionEditFormView))\n \n     def testExecute(self):\n         e = TalesExpressionCondition()\n         e.tales_expression = \'python:"plone" in object.Subject()\'\n \n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.folder)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)\n         self.assertEqual(False, ex())\n \n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.portal)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.portal)), IExecutable)\n         self.assertEqual(False, ex())\n \n-        self.folder.setSubject((\'plone\', \'contentrules\'))\n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.folder)), IExecutable)\n+        self.folder.setSubject(("plone", "contentrules"))\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)\n         self.assertEqual(True, ex())\n \n     def testExecuteUnicodeString(self):\n         e = TalesExpressionCondition()\n-        e.tales_expression = u\'string:${portal_url}\'\n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.folder)), IExecutable)\n+        e.tales_expression = u"string:${portal_url}"\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)\n         self.assertEqual(True, ex())\ndiff --git a/plone/app/contentrules/tests/test_condition_wfstate.py b/plone/app/contentrules/tests/test_condition_wfstate.py\nindex f1302d0..181b3b7 100644\n--- a/plone/app/contentrules/tests/test_condition_wfstate.py\n+++ b/plone/app/contentrules/tests/test_condition_wfstate.py\n@@ -14,64 +14,54 @@\n \n @implementer(IObjectEvent)\n class DummyEvent(object):\n-\n     def __init__(self, obj):\n         self.object = obj\n \n \n class TestWorkflowStateCondition(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.WorkflowState\')\n-        self.assertEqual(\'plone.conditions.WorkflowState\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleCondition, name="plone.conditions.WorkflowState")\n+        self.assertEqual("plone.conditions.WorkflowState", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(IObjectEvent, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.WorkflowState\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.WorkflowState")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage[u"foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter(\n-            (rule, self.portal.REQUEST), name=\'+condition\')\n-        addview = getMultiAdapter(\n-            (adding, self.portal.REQUEST), name=element.addview)\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+condition")\n+        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)\n \n         addview.form_instance.update()\n         content = addview.form_instance.create(\n-            data={\'wf_states\': [\'visible\', \'published\']})\n+            data={"wf_states": ["visible", "published"]}\n+        )\n         addview.form_instance.add(content)\n \n         e = rule.conditions[0]\n         self.assertTrue(isinstance(e, WorkflowStateCondition))\n-        self.assertEqual([\'visible\', \'published\'], e.wf_states)\n+        self.assertEqual(["visible", "published"], e.wf_states)\n \n     def testInvokeEditView(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.WorkflowState\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.WorkflowState")\n         e = WorkflowStateCondition()\n-        editview = getMultiAdapter(\n-            (e, self.folder.REQUEST), name=element.editview)\n+        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)\n         self.assertTrue(isinstance(editview, WorkflowStateEditFormView))\n \n     def testExecute(self):\n         e = WorkflowStateCondition()\n-        e.wf_states = [\'visible\', \'private\']\n+        e.wf_states = ["visible", "private"]\n \n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.folder)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)\n         self.assertTrue(ex())\n \n-        self.portal.portal_workflow.doActionFor(self.folder, \'publish\')\n+        self.portal.portal_workflow.doActionFor(self.folder, "publish")\n \n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.folder)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)\n         self.assertFalse(ex())\n \n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.portal)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.portal)), IExecutable)\n         self.assertFalse(ex())\ndiff --git a/plone/app/contentrules/tests/test_condition_wftransition.py b/plone/app/contentrules/tests/test_condition_wftransition.py\nindex 13c04f9..ace23fb 100644\n--- a/plone/app/contentrules/tests/test_condition_wftransition.py\n+++ b/plone/app/contentrules/tests/test_condition_wftransition.py\n@@ -17,48 +17,41 @@\n \n \n class TestWorkflowTransitionCondition(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.WorkflowTransition\')\n-        self.assertEqual(\n-            \'plone.conditions.WorkflowTransition\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleCondition, name="plone.conditions.WorkflowTransition")\n+        self.assertEqual("plone.conditions.WorkflowTransition", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(IActionSucceededEvent, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.WorkflowTransition\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.WorkflowTransition")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage[u"foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter(\n-            (rule, self.portal.REQUEST), name=\'+condition\')\n-        addview = getMultiAdapter(\n-            (adding, self.portal.REQUEST), name=element.addview)\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+condition")\n+        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)\n \n         addview.form_instance.update()\n         content = addview.form_instance.create(\n-            data={\'wf_transitions\': [\'publish\', \'hide\']})\n+            data={"wf_transitions": ["publish", "hide"]}\n+        )\n         addview.form_instance.add(content)\n \n         e = rule.conditions[0]\n         self.assertTrue(isinstance(e, WorkflowTransitionCondition))\n-        self.assertEqual([\'publish\', \'hide\'], e.wf_transitions)\n+        self.assertEqual(["publish", "hide"], e.wf_transitions)\n \n     def testInvokeEditView(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.WorkflowTransition\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.WorkflowTransition")\n         e = WorkflowTransitionCondition()\n-        editview = getMultiAdapter(\n-            (e, self.folder.REQUEST), name=element.editview)\n+        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)\n         self.assertTrue(isinstance(editview, WorkflowTransitionEditFormView))\n \n     def testExecute(self):\n         e = WorkflowTransitionCondition()\n-        e.wf_transitions = [\'publish\', \'hide\']\n+        e.wf_transitions = ["publish", "hide"]\n \n         ex = getMultiAdapter(\n             (\n@@ -66,10 +59,10 @@ def testExecute(self):\n                 e,\n                 ActionSucceededEvent(\n                     self.folder,\n-                    \'dummy_workflow\',\n-                    \'publish\',\n+                    "dummy_workflow",\n+                    "publish",\n                     None,\n-                )\n+                ),\n             ),\n             IExecutable,\n         )\n@@ -81,10 +74,10 @@ def testExecute(self):\n                 e,\n                 ActionSucceededEvent(\n                     self.folder,\n-                    \'dummy_workflow\',\n-                    \'retract\',\n+                    "dummy_workflow",\n+                    "retract",\n                     None,\n-                )\n+                ),\n             ),\n             IExecutable,\n         )\n@@ -96,10 +89,10 @@ def testExecute(self):\n                 e,\n                 ActionSucceededEvent(\n                     self.folder,\n-                    \'dummy_workflow\',\n-                    \'hide\',\n+                    "dummy_workflow",\n+                    "hide",\n                     None,\n-                )\n+                ),\n             ),\n             IExecutable,\n         )\ndiff --git a/plone/app/contentrules/tests/test_configuration.py b/plone/app/contentrules/tests/test_configuration.py\nindex 43d0f5a..630e4da 100644\n--- a/plone/app/contentrules/tests/test_configuration.py\n+++ b/plone/app/contentrules/tests/test_configuration.py\n@@ -24,72 +24,71 @@ class TestGenericSetup(unittest.TestCase):\n     layer = PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'news\')\n-        self.portal.invokeFactory(\'Folder\', \'events\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "news")\n+        self.portal.invokeFactory("Folder", "events")\n         self.storage = getUtility(IRuleStorage)\n-        applyProfile(self.portal, \'plone.app.contentrules:testing\')\n+        applyProfile(self.portal, "plone.app.contentrules:testing")\n \n     def testRuleInstalled(self):\n-        self.assertTrue(\'test1\' in self.storage)\n-        self.assertTrue(\'test2\' in self.storage)\n+        self.assertTrue("test1" in self.storage)\n+        self.assertTrue("test2" in self.storage)\n \n     def testRulesConfigured(self):\n-        rule1 = self.storage[\'test1\']\n-        self.assertEqual(\'Test rule 1\', rule1.title)\n-        self.assertEqual(\'A test rule\', rule1.description)\n+        rule1 = self.storage["test1"]\n+        self.assertEqual("Test rule 1", rule1.title)\n+        self.assertEqual("A test rule", rule1.description)\n         self.assertEqual(IObjectModifiedEvent, rule1.event)\n         self.assertEqual(True, rule1.enabled)\n         self.assertEqual(False, rule1.stop)\n \n         self.assertEqual(2, len(rule1.conditions))\n-        self.assertEqual(\'plone.conditions.PortalType\',\n-                         rule1.conditions[0].element)\n-        self.assertEqual(set([\'Document\', \'News Item\']),\n-                         set(rule1.conditions[0].check_types))\n-        self.assertEqual(\'plone.conditions.Role\', rule1.conditions[1].element)\n-        self.assertEqual([\'Manager\'], list(rule1.conditions[1].role_names))\n+        self.assertEqual("plone.conditions.PortalType", rule1.conditions[0].element)\n+        self.assertEqual(\n+            set(["Document", "News Item"]), set(rule1.conditions[0].check_types)\n+        )\n+        self.assertEqual("plone.conditions.Role", rule1.conditions[1].element)\n+        self.assertEqual(["Manager"], list(rule1.conditions[1].role_names))\n \n         self.assertEqual(1, len(rule1.actions))\n-        self.assertEqual(\'plone.actions.Notify\', rule1.actions[0].element)\n-        self.assertEqual(u\'A message: Hej d\\xe5\', rule1.actions[0].message)\n-        self.assertEqual(\'info\', rule1.actions[0].message_type)\n+        self.assertEqual("plone.actions.Notify", rule1.actions[0].element)\n+        self.assertEqual(u"A message: Hej d\\xe5", rule1.actions[0].message)\n+        self.assertEqual("info", rule1.actions[0].message_type)\n \n-        rule2 = self.storage[\'test2\']\n-        self.assertEqual(\'Test rule 2\', rule2.title)\n-        self.assertEqual(\'Another test rule\', rule2.description)\n+        rule2 = self.storage["test2"]\n+        self.assertEqual("Test rule 2", rule2.title)\n+        self.assertEqual("Another test rule", rule2.description)\n         self.assertEqual(IObjectModifiedEvent, rule2.event)\n         self.assertEqual(False, rule2.enabled)\n         self.assertEqual(True, rule2.stop)\n \n         self.assertEqual(1, len(rule2.conditions))\n-        self.assertEqual(\'plone.conditions.PortalType\',\n-                         rule2.conditions[0].element)\n-        self.assertEqual([\'Event\'], list(rule2.conditions[0].check_types))\n+        self.assertEqual("plone.conditions.PortalType", rule2.conditions[0].element)\n+        self.assertEqual(["Event"], list(rule2.conditions[0].check_types))\n \n         self.assertEqual(1, len(rule2.actions))\n-        self.assertEqual(\'plone.actions.Workflow\', rule2.actions[0].element)\n-        self.assertEqual(\'publish\', rule2.actions[0].transition)\n+        self.assertEqual("plone.actions.Workflow", rule2.actions[0].element)\n+        self.assertEqual("publish", rule2.actions[0].transition)\n \n     def testRuleAssigned(self):\n         assignable = IRuleAssignmentManager(self.portal.news)\n         self.assertEqual(3, len(assignable))\n \n-        self.assertEqual(True, assignable[\'test1\'].enabled)\n-        self.assertEqual(False, assignable[\'test1\'].bubbles)\n+        self.assertEqual(True, assignable["test1"].enabled)\n+        self.assertEqual(False, assignable["test1"].bubbles)\n \n-        self.assertEqual(False, assignable[\'test2\'].enabled)\n-        self.assertEqual(True, assignable[\'test2\'].bubbles)\n+        self.assertEqual(False, assignable["test2"].enabled)\n+        self.assertEqual(True, assignable["test2"].bubbles)\n \n-        self.assertEqual(False, assignable[\'test3\'].enabled)\n-        self.assertEqual(False, assignable[\'test3\'].bubbles)\n+        self.assertEqual(False, assignable["test3"].enabled)\n+        self.assertEqual(False, assignable["test3"].bubbles)\n \n     def testAssignmentOrdering(self):\n         assignable = IRuleAssignmentManager(self.portal.news)\n-        self.assertEqual(set([u\'test3\', u\'test2\', u\'test1\']), set(assignable.keys()))\n+        self.assertEqual(set([u"test3", u"test2", u"test1"]), set(assignable.keys()))\n \n     def testImportTwice(self):\n         # Ensure rules, actions/conditions and assignments are not duplicated\n@@ -97,7 +96,8 @@ def testImportTwice(self):\n         portal_setup = self.portal.portal_setup\n         time.sleep(1)  # avoid timestamp colission\n         portal_setup.runAllImportStepsFromProfile(\n-            \'profile-plone.app.contentrules:testing\')\n+            "profile-plone.app.contentrules:testing"\n+        )\n \n         # We should get the same results as before\n         self.testRuleInstalled()\n@@ -108,19 +108,20 @@ def testExport(self):\n         self.maxDiff = None\n         site = self.portal\n         context = TarballExportContext(self.portal.portal_setup)\n-        exporter = getMultiAdapter(\n-            (site, context), IBody, name=u\'plone.contentrules\')\n+        exporter = getMultiAdapter((site, context), IBody, name=u"plone.contentrules")\n \n-        body = exporter.body.decode(\'utf8\')\n+        body = exporter.body.decode("utf8")\n \n         # There is a bug in supermodel such that Set fields can be exported in a random order\n-        body = body.replace("""\n+        body = body.replace(\n+            """\n      <element>News Item</element>\n      <element>Document</element>\n-""","""\n+""",\n+            """\n      <element>Document</element>\n      <element>News Item</element>\n-"""\n+""",\n         )\n \n         expected = u"""<?xml version="1.0" encoding="utf-8"?>\n@@ -219,5 +220,5 @@ def testExport(self):\n  <assignment name="test3" bubbles="False" enabled="False" location="/news"/>\n </contentrules>\n """\n-     \n+\n         self.assertEqual(expected.strip(), body.strip())\ndiff --git a/plone/app/contentrules/tests/test_events.py b/plone/app/contentrules/tests/test_events.py\nindex 0d20093..d5d8572 100644\n--- a/plone/app/contentrules/tests/test_events.py\n+++ b/plone/app/contentrules/tests/test_events.py\n@@ -3,7 +3,6 @@\n \n \n class TestEvents(ContentRulesTestCase):\n-\n     def testEventHandlerExecutesRules(self):\n         # XXX Test missing\n         pass\ndiff --git a/plone/app/contentrules/tests/test_handlers.py b/plone/app/contentrules/tests/test_handlers.py\nindex fce4c5f..8de1841 100644\n--- a/plone/app/contentrules/tests/test_handlers.py\n+++ b/plone/app/contentrules/tests/test_handlers.py\n@@ -7,7 +7,6 @@\n \n \n class TestDuplicateRuleFilter(ContentRulesTestCase):\n-\n     def setUp(self):\n         super(TestDuplicateRuleFilter, self).setUp()\n         self.context = self.folder\n@@ -28,7 +27,7 @@ def test_call_two_events_in_same_context(self):\n         # they are not filtered\n         to_execute = self.rulefilter(self.context, self.rule, self.event)\n         self.assertTrue(to_execute)\n-        self.portal.invokeFactory(\'Folder\', \'folder2\')\n+        self.portal.invokeFactory("Folder", "folder2")\n         event2 = dummy.DummyEvent(self.portal.folder2)\n         to_execute = self.rulefilter(self.context, self.rule, event2)\n         self.assertTrue(to_execute)\n@@ -45,12 +44,14 @@ def test_delayed_events(self):\n         # The tests no use dexterity so we skip it:\n         return\n \n-        self.portal.invokeFactory(\'Folder\', \'folder2\')\n+        self.portal.invokeFactory("Folder", "folder2")\n         event1 = dummy.DummyEvent(self.folder)\n         event2 = dummy.DummyEvent(self.portal.folder2)\n         from plone.app.contentrules.handlers import _status\n+\n         _status.delayed_events = {}\n         handlers.added(event1)\n         handlers.added(event2)\n         from plone.app.contentrules.handlers import _status\n+\n         self.assertEqual(len(_status.delayed_events), 2)\ndiff --git a/plone/app/contentrules/tests/test_rule_assignment_mapping.py b/plone/app/contentrules/tests/test_rule_assignment_mapping.py\nindex 0b90bbe..8c22f6a 100644\n--- a/plone/app/contentrules/tests/test_rule_assignment_mapping.py\n+++ b/plone/app/contentrules/tests/test_rule_assignment_mapping.py\n@@ -25,122 +25,124 @@ class TestRuleAssignmentMapping(unittest.TestCase):\n     layer = PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'f1\')\n-        self.folder = self.portal[\'f1\']\n-        self.folder.invokeFactory(\'Document\', \'d1\')\n-        self.portal.invokeFactory(\'Folder\', \'target\')\n-        self.folder.invokeFactory(\'Folder\', \'f1\')\n-        self.folder.f1.invokeFactory(\'Folder\', \'f11\')\n-        self.folder.f1.invokeFactory(\'Folder\', \'f12\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "f1")\n+        self.folder = self.portal["f1"]\n+        self.folder.invokeFactory("Document", "d1")\n+        self.portal.invokeFactory("Folder", "target")\n+        self.folder.invokeFactory("Folder", "f1")\n+        self.folder.f1.invokeFactory("Folder", "f11")\n+        self.folder.f1.invokeFactory("Folder", "f12")\n \n         self.storage = getUtility(IRuleStorage)\n-        self.storage[\'r1\'] = Rule()\n-        self.storage[\'r2\'] = Rule()\n-        self.storage[\'r3\'] = Rule()\n+        self.storage["r1"] = Rule()\n+        self.storage["r2"] = Rule()\n+        self.storage["r3"] = Rule()\n \n         self.f11a = IRuleAssignmentManager(self.folder.f1.f11)\n-        self.f11a[\'r1\'] = RuleAssignment(\'r1\', bubbles=True)\n-        insert_assignment(self.storage[\'r1\'],\n-                          \'/\'.join(self.folder.f1.f11.getPhysicalPath()))\n+        self.f11a["r1"] = RuleAssignment("r1", bubbles=True)\n+        insert_assignment(\n+            self.storage["r1"], "/".join(self.folder.f1.f11.getPhysicalPath())\n+        )\n \n         self.f12a = IRuleAssignmentManager(self.folder.f1.f12)\n-        self.f12a[\'r1\'] = RuleAssignment(\'r1\', bubbles=True)\n-        insert_assignment(self.storage[\'r1\'],\n-                          \'/\'.join(self.folder.f1.f12.getPhysicalPath()))\n+        self.f12a["r1"] = RuleAssignment("r1", bubbles=True)\n+        insert_assignment(\n+            self.storage["r1"], "/".join(self.folder.f1.f12.getPhysicalPath())\n+        )\n \n-        self.f12a[\'r2\'] = RuleAssignment(\'r2\', bubbles=True)\n-        insert_assignment(self.storage[\'r2\'],\n-                          \'/\'.join(self.folder.f1.f12.getPhysicalPath()))\n+        self.f12a["r2"] = RuleAssignment("r2", bubbles=True)\n+        insert_assignment(\n+            self.storage["r2"], "/".join(self.folder.f1.f12.getPhysicalPath())\n+        )\n \n     def testRuleRemoved(self):\n-        self.assertTrue(\'r1\' in self.f11a)\n-        self.assertTrue(\'r1\' in self.f12a)\n+        self.assertTrue("r1" in self.f11a)\n+        self.assertTrue("r1" in self.f12a)\n \n-        del self.storage[\'r1\']\n+        del self.storage["r1"]\n \n-        self.assertFalse(\'r1\' in self.f11a)\n-        self.assertFalse(\'r1\' in self.f12a)\n+        self.assertFalse("r1" in self.f11a)\n+        self.assertFalse("r1" in self.f12a)\n \n     def testContainerMoved(self):\n-        f12path = \'/\'.join(self.folder.f1.f12.getPhysicalPath())\n-        self.assertTrue(f12path in get_assignments(self.storage[\'r1\']))\n-        self.assertTrue(f12path in get_assignments(self.storage[\'r2\']))\n+        f12path = "/".join(self.folder.f1.f12.getPhysicalPath())\n+        self.assertTrue(f12path in get_assignments(self.storage["r1"]))\n+        self.assertTrue(f12path in get_assignments(self.storage["r2"]))\n \n         transaction.savepoint(1)\n-        self.folder.f1.manage_renameObject(\'f12\', \'f12a\')\n-        f12apath = \'/\'.join(self.folder.f1.f12a.getPhysicalPath())\n+        self.folder.f1.manage_renameObject("f12", "f12a")\n+        f12apath = "/".join(self.folder.f1.f12a.getPhysicalPath())\n \n-        self.assertFalse(f12path in get_assignments(self.storage[\'r1\']))\n-        self.assertFalse(f12path in get_assignments(self.storage[\'r2\']))\n+        self.assertFalse(f12path in get_assignments(self.storage["r1"]))\n+        self.assertFalse(f12path in get_assignments(self.storage["r2"]))\n \n-        self.assertTrue(f12apath in get_assignments(self.storage[\'r1\']))\n-        self.assertTrue(f12apath in get_assignments(self.storage[\'r1\']))\n+        self.assertTrue(f12apath in get_assignments(self.storage["r1"]))\n+        self.assertTrue(f12apath in get_assignments(self.storage["r1"]))\n \n     def testParentOfContainerMoved(self):\n-        f12path = \'/\'.join(self.folder.f1.f12.getPhysicalPath())\n-        self.assertTrue(f12path in get_assignments(self.storage[\'r1\']))\n-        self.assertTrue(f12path in get_assignments(self.storage[\'r2\']))\n+        f12path = "/".join(self.folder.f1.f12.getPhysicalPath())\n+        self.assertTrue(f12path in get_assignments(self.storage["r1"]))\n+        self.assertTrue(f12path in get_assignments(self.storage["r2"]))\n \n         transaction.savepoint(1)\n-        self.folder.manage_renameObject(\'f1\', \'f1a\')\n-        f12apath = \'/\'.join(self.folder.f1a.f12.getPhysicalPath())\n+        self.folder.manage_renameObject("f1", "f1a")\n+        f12apath = "/".join(self.folder.f1a.f12.getPhysicalPath())\n \n-        self.assertFalse(f12path in get_assignments(self.storage[\'r1\']))\n-        self.assertFalse(f12path in get_assignments(self.storage[\'r2\']))\n+        self.assertFalse(f12path in get_assignments(self.storage["r1"]))\n+        self.assertFalse(f12path in get_assignments(self.storage["r2"]))\n \n-        self.assertTrue(f12apath in get_assignments(self.storage[\'r1\']))\n-        self.assertTrue(f12apath in get_assignments(self.storage[\'r1\']))\n+        self.assertTrue(f12apath in get_assignments(self.storage["r1"]))\n+        self.assertTrue(f12apath in get_assignments(self.storage["r1"]))\n \n     def testContainerRemoved(self):\n-        f12path = \'/\'.join(self.folder.f1.f12.getPhysicalPath())\n-        self.assertTrue(f12path in get_assignments(self.storage[\'r1\']))\n-        self.assertTrue(f12path in get_assignments(self.storage[\'r2\']))\n+        f12path = "/".join(self.folder.f1.f12.getPhysicalPath())\n+        self.assertTrue(f12path in get_assignments(self.storage["r1"]))\n+        self.assertTrue(f12path in get_assignments(self.storage["r2"]))\n \n         transaction.savepoint(1)\n-        self.folder._delObject(\'f1\')\n+        self.folder._delObject("f1")\n \n-        self.assertFalse(f12path in get_assignments(self.storage[\'r1\']))\n-        self.assertFalse(f12path in get_assignments(self.storage[\'r2\']))\n+        self.assertFalse(f12path in get_assignments(self.storage["r1"]))\n+        self.assertFalse(f12path in get_assignments(self.storage["r2"]))\n \n     def testRuleAssignmentRemovedAPI(self):\n-        self.assertTrue(\'r1\' in self.f11a)\n-        self.assertTrue(\'r1\' in self.f12a)\n+        self.assertTrue("r1" in self.f11a)\n+        self.assertTrue("r1" in self.f12a)\n \n-        api.unassign_rule(self.folder.f1.f11, \'r1\')\n+        api.unassign_rule(self.folder.f1.f11, "r1")\n \n-        self.assertFalse(\'r1\' in self.f11a)\n-        self.assertTrue(\'r1\' in self.f12a)\n+        self.assertFalse("r1" in self.f11a)\n+        self.assertTrue("r1" in self.f12a)\n \n     def testRuleAssignmentEditedAPI(self):\n-        self.assertTrue(self.f11a[\'r1\'].bubbles)\n-        self.assertTrue(self.f11a[\'r1\'].enabled)\n+        self.assertTrue(self.f11a["r1"].bubbles)\n+        self.assertTrue(self.f11a["r1"].enabled)\n \n-        api.edit_rule_assignment(self.folder.f1.f11, \'r1\',\n-                                 bubbles=False, enabled=False)\n+        api.edit_rule_assignment(self.folder.f1.f11, "r1", bubbles=False, enabled=False)\n \n-        self.assertFalse(self.f11a[\'r1\'].bubbles)\n-        self.assertFalse(self.f11a[\'r1\'].enabled)\n+        self.assertFalse(self.f11a["r1"].bubbles)\n+        self.assertFalse(self.f11a["r1"].enabled)\n \n-        api.edit_rule_assignment(self.folder.f1.f11, \'r1\',\n-                                 bubbles=True, enabled=True)\n+        api.edit_rule_assignment(self.folder.f1.f11, "r1", bubbles=True, enabled=True)\n \n-        self.assertTrue(self.f11a[\'r1\'].bubbles)\n-        self.assertTrue(self.f11a[\'r1\'].enabled)\n+        self.assertTrue(self.f11a["r1"].bubbles)\n+        self.assertTrue(self.f11a["r1"].enabled)\n \n     def testRuleAssignmentAddedAPI(self):\n-        api.assign_rule(self.folder.f1.f11, \'r2\', enabled=True, bubbles=True)\n-        self.assertTrue(\'r2\' in self.f11a)\n-        self.assertTrue(self.f11a[\'r2\'].enabled)\n-        self.assertTrue(self.f11a[\'r2\'].bubbles)\n-\n-        api.assign_rule(self.folder.f1.f11, \'r3\', enabled=True, bubbles=False,\n-                        insert_before=\'r2\')\n-        self.assertTrue(\'r3\' in self.f11a)\n-        self.assertTrue(self.f11a[\'r3\'].enabled)\n-        self.assertFalse(self.f11a[\'r3\'].bubbles)\n-\n-        self.assertEqual(self.f11a.keys(), [\'r1\', \'r3\', \'r2\'])\n+        api.assign_rule(self.folder.f1.f11, "r2", enabled=True, bubbles=True)\n+        self.assertTrue("r2" in self.f11a)\n+        self.assertTrue(self.f11a["r2"].enabled)\n+        self.assertTrue(self.f11a["r2"].bubbles)\n+\n+        api.assign_rule(\n+            self.folder.f1.f11, "r3", enabled=True, bubbles=False, insert_before="r2"\n+        )\n+        self.assertTrue("r3" in self.f11a)\n+        self.assertTrue(self.f11a["r3"].enabled)\n+        self.assertFalse(self.f11a["r3"].bubbles)\n+\n+        self.assertEqual(self.f11a.keys(), ["r1", "r3", "r2"])\ndiff --git a/plone/app/contentrules/tests/test_rule_management_views.py b/plone/app/contentrules/tests/test_rule_management_views.py\nindex 1f12657..ad26402 100644\n--- a/plone/app/contentrules/tests/test_rule_management_views.py\n+++ b/plone/app/contentrules/tests/test_rule_management_views.py\n@@ -12,17 +12,15 @@\n \n class DummyModifiedRule(Rule):\n \n-    title = \'My test rule\'\n-    description = \'Test my rule\'\n+    title = "My test rule"\n+    description = "Test my rule"\n     event = IObjectModifiedEvent\n     enabled = True\n \n \n class TestRuleManagementViews(ContentRulesTestCase):\n-\n     def testRuleAdding(self):\n-        adding = getMultiAdapter(\n-            (self.portal, self.portal.REQUEST), name=\'+rule\')\n+        adding = getMultiAdapter((self.portal, self.portal.REQUEST), name="+rule")\n         storage = getUtility(IRuleStorage)\n         self.assertEqual(0, len(storage))\n         r = Rule()\n@@ -31,39 +29,40 @@ def testRuleAdding(self):\n         self.assertTrue(list(storage.values())[0] is r)\n \n     def testRuleAddView(self):\n-        adding = getMultiAdapter(\n-            (self.portal, self.portal.REQUEST), name=\'+rule\')\n+        adding = getMultiAdapter((self.portal, self.portal.REQUEST), name="+rule")\n         addview = getMultiAdapter(\n-            (adding, self.portal.REQUEST), name=\'plone.ContentRule\')\n+            (adding, self.portal.REQUEST), name="plone.ContentRule"\n+        )\n         storage = getUtility(IRuleStorage)\n         self.assertEqual(0, len(storage))\n         addview.form_instance.update()\n-        content = addview.form_instance.create({\'title\': \'foo\', \'description\': \'bar\', \'event\': None})  # noqa\n+        content = addview.form_instance.create(\n+            {"title": "foo", "description": "bar", "event": None}\n+        )  # noqa\n         addview.form_instance.add(content)\n         self.assertEqual(1, len(storage))\n-        self.assertEqual(\'foo\', list(storage.values())[0].title)\n+        self.assertEqual("foo", list(storage.values())[0].title)\n \n     def testRuleEditView(self):\n         r = Rule()\n-        editview = getMultiAdapter((r, self.portal.REQUEST), name=\'edit\')\n+        editview = getMultiAdapter((r, self.portal.REQUEST), name="edit")\n         self.assertTrue(isinstance(editview, RuleEditFormView))\n \n \n class TestRuleElementManagementViews(ContentRulesTestCase):\n-\n     def afterSetUp(self):\n-        self.setRoles((\'Manager\', ))\n+        self.setRoles(("Manager",))\n \n     def testRuleStopModification(self):\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n+        storage[u"foo"] = Rule()\n \n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n-        view = rule.restrictedTraverse(\'manage-elements\')\n-        view.template = lambda: \'No template thanks\'\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n+        view = rule.restrictedTraverse("manage-elements")\n+        view.template = lambda: "No template thanks"\n \n-        self.portal.REQUEST.form[\'stopExecuting\'] = \'on\'\n-        self.portal.REQUEST.form[\'form.button.Save\'] = True\n+        self.portal.REQUEST.form["stopExecuting"] = "on"\n+        self.portal.REQUEST.form["form.button.Save"] = True\n         self.addAuthToRequest()\n \n         self.assertEqual(False, rule.stop)\n@@ -72,10 +71,9 @@ def testRuleStopModification(self):\n \n     def testRuleConditionAdding(self):\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n-        adding = getMultiAdapter(\n-            (rule, self.portal.REQUEST), name=\'+condition\')\n+        storage[u"foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+condition")\n         d = DummyCondition()\n         self.assertEqual(0, len(rule.conditions))\n         adding.add(d)\n@@ -84,9 +82,9 @@ def testRuleConditionAdding(self):\n \n     def testRuleActionAdding(self):\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n-        adding = getMultiAdapter((rule, self.portal.REQUEST), name=\'+action\')\n+        storage[u"foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+action")\n         d = DummyAction()\n         self.assertEqual(0, len(rule.actions))\n         adding.add(d)\n@@ -96,49 +94,48 @@ def testRuleActionAdding(self):\n     def testRulesControlPanel(self):\n         portal = self.portal\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = DummyModifiedRule()\n-        controlpanel = portal.restrictedTraverse(\'@@rules-controlpanel\')\n+        storage[u"foo"] = DummyModifiedRule()\n+        controlpanel = portal.restrictedTraverse("@@rules-controlpanel")\n         registered_rules = controlpanel.registeredRules()\n         self.assertEqual(1, len(registered_rules))\n         registered_rule = registered_rules[0]\n         self.assertEqual(\n-            registered_rule[\'row_class\'],\n-            \'trigger-iobjectmodifiedevent state-enabled assignment-unassigned\',\n+            registered_rule["row_class"],\n+            "trigger-iobjectmodifiedevent state-enabled assignment-unassigned",\n         )\n-        self.assertEqual(registered_rule[\'trigger\'],\n-                         \'Object modified\')\n-        self.assertTrue(registered_rule[\'enabled\'])\n-        self.assertFalse(registered_rule[\'assigned\'])\n+        self.assertEqual(registered_rule["trigger"], "Object modified")\n+        self.assertTrue(registered_rule["enabled"])\n+        self.assertFalse(registered_rule["assigned"])\n \n         rule_types = controlpanel.ruleTypesToShow()\n-        rule_types_ids = [r[\'id\'] for r in rule_types]\n-        self.assertTrue(\'trigger-iobjectmodifiedevent\' in rule_types_ids)\n-        self.assertFalse(\'trigger-iobjectaddedevent\' in rule_types_ids)\n+        rule_types_ids = [r["id"] for r in rule_types]\n+        self.assertTrue("trigger-iobjectmodifiedevent" in rule_types_ids)\n+        self.assertFalse("trigger-iobjectaddedevent" in rule_types_ids)\n \n         rule_states = controlpanel.statesToShow()\n-        rule_states_ids = [r[\'id\'] for r in rule_states]\n-        self.assertTrue(\'state-enabled\' in rule_states_ids)\n-        self.assertTrue(\'state-disabled\' in rule_states_ids)\n+        rule_states_ids = [r["id"] for r in rule_states]\n+        self.assertTrue("state-enabled" in rule_states_ids)\n+        self.assertTrue("state-disabled" in rule_states_ids)\n \n         # enable rule\n-        portal.REQUEST[\'rule-id\'] = \'foo\'\n+        portal.REQUEST["rule-id"] = "foo"\n         self.addAuthToRequest()\n-        portal.restrictedTraverse(\'@@contentrule-disable\').disable_rule()\n+        portal.restrictedTraverse("@@contentrule-disable").disable_rule()\n         registered_rules = controlpanel.registeredRules()\n-        self.assertFalse(registered_rules[0][\'enabled\'])\n+        self.assertFalse(registered_rules[0]["enabled"])\n \n-        portal.restrictedTraverse(\'@@contentrule-enable\').enable_rule()\n+        portal.restrictedTraverse("@@contentrule-enable").enable_rule()\n         registered_rules = controlpanel.registeredRules()\n-        self.assertTrue(registered_rules[0][\'enabled\'])\n+        self.assertTrue(registered_rules[0]["enabled"])\n \n         # works without ajax\n-        portal.REQUEST.form[\'rule-id\'] = \'foo\'\n-        portal.REQUEST.form[\'form.button.DisableRule\'] = \'1\'\n-        portal.restrictedTraverse(\'@@rules-controlpanel\')()\n+        portal.REQUEST.form["rule-id"] = "foo"\n+        portal.REQUEST.form["form.button.DisableRule"] = "1"\n+        portal.restrictedTraverse("@@rules-controlpanel")()\n         registered_rules = controlpanel.registeredRules()\n-        self.assertFalse(registered_rules[0][\'enabled\'])\n+        self.assertFalse(registered_rules[0]["enabled"])\n \n-        portal.restrictedTraverse(\'@@contentrule-delete\').delete_rule()\n+        portal.restrictedTraverse("@@contentrule-delete").delete_rule()\n         registered_rules = controlpanel.registeredRules()\n         self.assertEqual(0, len(registered_rules))\n \n@@ -147,16 +144,13 @@ def testChangeGloballyEnable(self):\n         portal = self.portal\n         self.addAuthToRequest()\n \n-        portal.restrictedTraverse(\n-            \'@@contentrule-globally-enable\').globally_enable()\n+        portal.restrictedTraverse("@@contentrule-globally-enable").globally_enable()\n         self.assertTrue(storage.active)\n \n-        portal.restrictedTraverse(\n-            \'@@contentrule-globally-disable\').globally_disable()\n+        portal.restrictedTraverse("@@contentrule-globally-disable").globally_disable()\n         self.assertFalse(storage.active)\n \n-        portal.restrictedTraverse(\n-            \'@@contentrule-globally-enable\').globally_enable()\n+        portal.restrictedTraverse("@@contentrule-globally-enable").globally_enable()\n         self.assertTrue(storage.active)\n \n         # without ajax\ndiff --git a/plone/app/contentrules/tests/test_setup.py b/plone/app/contentrules/tests/test_setup.py\nindex 241f8cb..8fc5479 100644\n--- a/plone/app/contentrules/tests/test_setup.py\n+++ b/plone/app/contentrules/tests/test_setup.py\n@@ -8,7 +8,6 @@\n \n \n class TestProductInstall(ContentRulesTestCase):\n-\n     def testRuleContainerInterfaces(self):\n         self.assertTrue(IRuleAssignable.providedBy(self.folder))\n         self.assertTrue(IRuleAssignable.providedBy(self.portal))\ndiff --git a/plone/app/contentrules/tests/test_traversal.py b/plone/app/contentrules/tests/test_traversal.py\nindex a3c224b..00a6721 100644\n--- a/plone/app/contentrules/tests/test_traversal.py\n+++ b/plone/app/contentrules/tests/test_traversal.py\n@@ -10,57 +10,56 @@\n \n \n class TestTraversal(ContentRulesTestCase):\n-\n     def testTraverseToRule(self):\n         r = Rule()\n         storage = getUtility(IRuleStorage)\n-        storage[u\'r1\'] = r\n-        traversed = self.portal.restrictedTraverse(\'++rule++r1\')\n+        storage[u"r1"] = r\n+        traversed = self.portal.restrictedTraverse("++rule++r1")\n         self.assertTrue(aq_parent(traversed) is self.portal)\n         self.assertTrue(aq_base(traversed) is r)\n \n     def testTraverseToRuleCondition(self):\n         r = Rule()\n         e1 = DummyCondition()\n-        e1.x = \'x\'\n+        e1.x = "x"\n \n         e2 = DummyCondition()\n-        e2.x = \'y\'\n+        e2.x = "y"\n \n         r.conditions.append(e1)\n         r.conditions.append(e2)\n         storage = getUtility(IRuleStorage)\n-        storage[u\'r1\'] = r\n+        storage[u"r1"] = r\n \n-        tr = self.portal.restrictedTraverse(\'++rule++r1\')\n-        te1 = tr.restrictedTraverse(\'++condition++0\')\n-        te2 = tr.restrictedTraverse(\'++condition++1\')\n+        tr = self.portal.restrictedTraverse("++rule++r1")\n+        te1 = tr.restrictedTraverse("++condition++0")\n+        te2 = tr.restrictedTraverse("++condition++1")\n \n         self.assertTrue(aq_parent(te1) is tr)\n-        self.assertEqual(\'x\', te1.x)\n+        self.assertEqual("x", te1.x)\n \n         self.assertTrue(aq_parent(te2) is tr)\n-        self.assertEqual(\'y\', te2.x)\n+        self.assertEqual("y", te2.x)\n \n     def testTraverseToRuleAction(self):\n         r = Rule()\n         e1 = DummyAction()\n-        e1.x = \'x\'\n+        e1.x = "x"\n \n         e2 = DummyAction()\n-        e2.x = \'y\'\n+        e2.x = "y"\n \n         r.actions.append(e1)\n         r.actions.append(e2)\n         storage = getUtility(IRuleStorage)\n-        storage[u\'r1\'] = r\n+        storage[u"r1"] = r\n \n-        tr = self.portal.restrictedTraverse(\'++rule++r1\')\n-        te1 = tr.restrictedTraverse(\'++action++0\')\n-        te2 = tr.restrictedTraverse(\'++action++1\')\n+        tr = self.portal.restrictedTraverse("++rule++r1")\n+        te1 = tr.restrictedTraverse("++action++0")\n+        te2 = tr.restrictedTraverse("++action++1")\n \n         self.assertTrue(aq_parent(te1) is tr)\n-        self.assertEqual(\'x\', te1.x)\n+        self.assertEqual("x", te1.x)\n \n         self.assertTrue(aq_parent(te2) is tr)\n-        self.assertEqual(\'y\', te2.x)\n+        self.assertEqual("y", te2.x)\ndiff --git a/plone/app/contentrules/tests/utils.py b/plone/app/contentrules/tests/utils.py\nindex 2917409..e28157b 100644\n--- a/plone/app/contentrules/tests/utils.py\n+++ b/plone/app/contentrules/tests/utils.py\n@@ -3,6 +3,6 @@\n \n \n # Standard options for DocTests\n-optionflags = (doctest.ELLIPSIS |\n-               doctest.NORMALIZE_WHITESPACE |\n-               doctest.REPORT_ONLY_FIRST_FAILURE)\n+optionflags = (\n+    doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE\n+)\ndiff --git a/setup.py b/setup.py\nindex ca6a8f9..5b99d9b 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,14 +3,13 @@\n from setuptools import setup\n \n \n-version = \'5.0.0a5.dev0\'\n+version = "5.0.0a5.dev0"\n \n setup(\n-    name=\'plone.app.contentrules\',\n+    name="plone.app.contentrules",\n     version=version,\n     description="Plone integration for plone.contentrules",\n-    long_description=(open("README.rst").read() + "\\n\\n" +\n-                      open("CHANGES.rst").read()),\n+    long_description=(open("README.rst").read() + "\\n\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n@@ -25,44 +24,44 @@\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'plone automatic content rules\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.contentrules\',\n-    license=\'GPL version 2\',\n+    keywords="plone automatic content rules",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.contentrules",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n-    extras_require={\'test\': [\'plone.app.testing\', \'plone.app.contenttypes[test]\']},\n+    extras_require={"test": ["plone.app.testing", "plone.app.contenttypes[test]"]},\n     install_requires=[\n-        \'setuptools\',\n-        \'six\',\n-        \'plone.contentrules\',\n-        \'plone.memoize\',\n-        \'plone.stringinterp\',\n-        \'plone.uuid\',\n-        \'plone.autoform\',\n-        \'plone.app.z3cform\',\n-        \'plone.app.vocabularies\',\n-        \'transaction\',\n-        \'zope.annotation\',\n-        \'zope.browser\',\n-        \'zope.component\',\n-        \'zope.container\',\n-        \'zope.event\',\n-        \'zope.i18nmessageid\',\n-        \'zope.interface\',\n-        \'zope.lifecycleevent\',\n-        \'zope.publisher >= 3.11.0\',\n-        \'zope.schema\',\n-        \'zope.site\',\n-        \'zope.traversing\',\n-        \'Acquisition\',\n-        \'Products.CMFCore\',\n-        \'Products.GenericSetup >= 2.0\',\n-        \'Products.statusmessages\',\n-        \'ZODB\',\n-        \'Zope\',\n+        "setuptools",\n+        "six",\n+        "plone.contentrules",\n+        "plone.memoize",\n+        "plone.stringinterp",\n+        "plone.uuid",\n+        "plone.autoform",\n+        "plone.app.z3cform",\n+        "plone.app.vocabularies",\n+        "transaction",\n+        "zope.annotation",\n+        "zope.browser",\n+        "zope.component",\n+        "zope.container",\n+        "zope.event",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n+        "zope.lifecycleevent",\n+        "zope.publisher >= 3.11.0",\n+        "zope.schema",\n+        "zope.site",\n+        "zope.traversing",\n+        "Acquisition",\n+        "Products.CMFCore",\n+        "Products.GenericSetup >= 2.0",\n+        "Products.statusmessages",\n+        "ZODB",\n+        "Zope",\n     ],\n )\n'

Repository: plone.app.contentrules


Branch: refs/heads/master
Date: 2022-05-01T01:39:36+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentrules/commit/4d3e8e28eb4c8a1d0cfed36d9f4543338c94f470

find  -name "*.py" -exec pyupgrade  --py3-only --py37-plus {} +

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/contentrules/__init__.py
M plone/app/contentrules/actions/__init__.py
M plone/app/contentrules/actions/copy.py
M plone/app/contentrules/actions/delete.py
M plone/app/contentrules/actions/logger.py
M plone/app/contentrules/actions/mail.py
M plone/app/contentrules/actions/move.py
M plone/app/contentrules/actions/notify.py
M plone/app/contentrules/actions/versioning.py
M plone/app/contentrules/actions/workflow.py
M plone/app/contentrules/api.py
M plone/app/contentrules/browser/__init__.py
M plone/app/contentrules/browser/adding.py
M plone/app/contentrules/browser/assignments.py
M plone/app/contentrules/browser/controlpanel.py
M plone/app/contentrules/browser/elements.py
M plone/app/contentrules/browser/formhelper.py
M plone/app/contentrules/browser/info.py
M plone/app/contentrules/browser/interfaces.py
M plone/app/contentrules/browser/navigation.py
M plone/app/contentrules/browser/rule.py
M plone/app/contentrules/browser/traversal.py
M plone/app/contentrules/conditions/__init__.py
M plone/app/contentrules/conditions/fileextension.py
M plone/app/contentrules/conditions/group.py
M plone/app/contentrules/conditions/portaltype.py
M plone/app/contentrules/conditions/role.py
M plone/app/contentrules/conditions/talesexpression.py
M plone/app/contentrules/conditions/wfstate.py
M plone/app/contentrules/conditions/wftransition.py
M plone/app/contentrules/exportimport/__init__.py
M plone/app/contentrules/exportimport/interfaces.py
M plone/app/contentrules/exportimport/rules.py
M plone/app/contentrules/handlers.py
M plone/app/contentrules/namechooser.py
M plone/app/contentrules/rule.py
M plone/app/contentrules/testing.py
M plone/app/contentrules/tests/base.py
M plone/app/contentrules/tests/dummy.py
M plone/app/contentrules/tests/test_action_copy.py
M plone/app/contentrules/tests/test_action_delete.py
M plone/app/contentrules/tests/test_action_logger.py
M plone/app/contentrules/tests/test_action_mail.py
M plone/app/contentrules/tests/test_action_modify.py
M plone/app/contentrules/tests/test_action_move.py
M plone/app/contentrules/tests/test_action_notify.py
M plone/app/contentrules/tests/test_action_versioning.py
M plone/app/contentrules/tests/test_action_workflow.py
M plone/app/contentrules/tests/test_browser.py
M plone/app/contentrules/tests/test_cascading_rule.py
M plone/app/contentrules/tests/test_condition_group.py
M plone/app/contentrules/tests/test_condition_portal_type.py
M plone/app/contentrules/tests/test_condition_role.py
M plone/app/contentrules/tests/test_condition_tales_expression.py
M plone/app/contentrules/tests/test_condition_wfstate.py
M plone/app/contentrules/tests/test_condition_wftransition.py
M plone/app/contentrules/tests/test_configuration.py
M plone/app/contentrules/tests/test_events.py
M plone/app/contentrules/tests/test_handlers.py
M plone/app/contentrules/tests/test_rule_assignment_mapping.py
M plone/app/contentrules/tests/test_rule_management_views.py
M plone/app/contentrules/tests/test_setup.py
M plone/app/contentrules/tests/test_traversal.py
M plone/app/contentrules/tests/utils.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 03d08ff..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 03d08ff..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/contentrules/__init__.py b/plone/app/contentrules/__init__.py\nindex 5009377..8543404 100644\n--- a/plone/app/contentrules/__init__.py\n+++ b/plone/app/contentrules/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Import PloneMessageFactory to create messages in the plone domain\n from zope.i18nmessageid import MessageFactory\n \ndiff --git a/plone/app/contentrules/actions/__init__.py b/plone/app/contentrules/actions/__init__.py\nindex 7527d8f..7693358 100644\n--- a/plone/app/contentrules/actions/__init__.py\n+++ b/plone/app/contentrules/actions/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.browser.formhelper import AddForm\n from plone.app.contentrules.browser.formhelper import EditForm\n from plone.app.uuid.utils import uuidToPhysicalPath\n@@ -9,7 +8,7 @@\n import os\n \n \n-class ContentWrapper(object):\n+class ContentWrapper:\n     """\n     The sole purpose of this is to transform target_folder\n     values from UUID to path, which all of content rules expects\n@@ -59,4 +58,4 @@ def create(self, data):\n \n class ActionEditForm(EditForm):\n     def getContent(self):\n-        return ContentWrapper(super(ActionEditForm, self).getContent())\n+        return ContentWrapper(super().getContent())\ndiff --git a/plone/app/contentrules/actions/copy.py b/plone/app/contentrules/actions/copy.py\nindex f60b67f..eff4972 100644\n--- a/plone/app/contentrules/actions/copy.py\n+++ b/plone/app/contentrules/actions/copy.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from OFS.event import ObjectClonedEvent\n from OFS.SimpleItem import SimpleItem\n@@ -30,8 +29,8 @@ class ICopyAction(Interface):\n     """\n \n     target_folder = schema.Choice(\n-        title=_(u"Target folder"),\n-        description=_(u"As a path relative to the portal root."),\n+        title=_("Target folder"),\n+        description=_("As a path relative to the portal root."),\n         required=True,\n         source=CatalogSource(is_folderish=True),\n     )\n@@ -46,12 +45,12 @@ class CopyAction(SimpleItem):\n \n     @property\n     def summary(self):\n-        return _(u"Copy to folder ${folder}.", mapping=dict(folder=self.target_folder))\n+        return _("Copy to folder ${folder}.", mapping=dict(folder=self.target_folder))\n \n \n @adapter(Interface, ICopyAction, Interface)\n @implementer(IExecutable)\n-class CopyActionExecutor(object):\n+class CopyActionExecutor:\n     """The executor for this action."""\n \n     def __init__(self, context, element, event):\n@@ -77,7 +76,7 @@ def __call__(self):\n         if target is None:\n             self.error(\n                 obj,\n-                _(u"Target folder ${target} does not exist.", mapping={"target": path}),\n+                _("Target folder ${target} does not exist.", mapping={"target": path}),\n             )\n             return False\n \n@@ -115,8 +114,8 @@ def error(self, obj, error):\n         if request is not None:\n             title = utils.pretty_title_or_id(obj, obj)\n             message = _(\n-                u"Unable to copy ${name} as part of content rule "\n-                u"\'copy\' action: ${error}",\n+                "Unable to copy ${name} as part of content rule "\n+                "\'copy\' action: ${error}",\n                 mapping={"name": title, "error": error},\n             )\n             IStatusMessage(request).addStatusMessage(message, type="error")\n@@ -132,17 +131,17 @@ def taken(x):\n         if not taken(old_id):\n             return old_id\n         idx = 1\n-        while taken("{0}.{1}".format(old_id, idx)):\n+        while taken(f"{old_id}.{idx}"):\n             idx += 1\n-        return "{0}.{1}".format(old_id, idx)\n+        return f"{old_id}.{idx}"\n \n \n class CopyAddForm(ActionAddForm):\n     """An add form for move-to-folder actions."""\n \n     schema = ICopyAction\n-    label = _(u"Add Copy Action")\n-    description = _(u"A copy action can copy an object to a different folder.")\n+    label = _("Add Copy Action")\n+    description = _("A copy action can copy an object to a different folder.")\n     Type = CopyAction\n \n \n@@ -157,9 +156,9 @@ class CopyEditForm(ActionEditForm):\n     """\n \n     schema = ICopyAction\n-    label = _(u"Edit Copy Action")\n-    description = _(u"A copy action can copy an object to a different folder.")\n-    form_name = _(u"Configure element")\n+    label = _("Edit Copy Action")\n+    description = _("A copy action can copy an object to a different folder.")\n+    form_name = _("Configure element")\n \n \n class CopyEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/actions/delete.py b/plone/app/contentrules/actions/delete.py\nindex f92d262..6468cd9 100644\n--- a/plone/app/contentrules/actions/delete.py\n+++ b/plone/app/contentrules/actions/delete.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from OFS.SimpleItem import SimpleItem\n@@ -25,12 +24,12 @@ class DeleteAction(SimpleItem):\n     """The actual persistent implementation of the action element."""\n \n     element = "plone.actions.Delete"\n-    summary = _(u"Delete object")\n+    summary = _("Delete object")\n \n \n @adapter(Interface, IDeleteAction, Interface)\n @implementer(IExecutable)\n-class DeleteActionExecutor(object):\n+class DeleteActionExecutor:\n     """The executor for this action."""\n \n     def __init__(self, context, element, event):\n@@ -59,7 +58,7 @@ def error(self, obj, error):\n         if request is not None:\n             title = utils.pretty_title_or_id(obj, obj)\n             message = _(\n-                u"Unable to remove ${name} as part of content rule \'delete\' action: ${error}",  # noqa\n+                "Unable to remove ${name} as part of content rule \'delete\' action: ${error}",  # noqa\n                 mapping={"name": title, "error": error},\n             )\n             IStatusMessage(request).addStatusMessage(message, type="error")\ndiff --git a/plone/app/contentrules/actions/logger.py b/plone/app/contentrules/actions/logger.py\nindex 2dad4ae..d52d70b 100644\n--- a/plone/app/contentrules/actions/logger.py\n+++ b/plone/app/contentrules/actions/logger.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.actions import ActionAddForm\n@@ -29,19 +28,19 @@ class ILoggerAction(Interface):\n     This is also used to create add and edit forms, below.\n     """\n \n-    targetLogger = schema.ASCIILine(title=_(u"Logger name"), default="Plone")\n+    targetLogger = schema.ASCIILine(title=_("Logger name"), default="Plone")\n \n-    loggingLevel = schema.Int(title=_(u"Logging level"), default=20)  # INFO\n+    loggingLevel = schema.Int(title=_("Logging level"), default=20)  # INFO\n \n     message = schema.TextLine(\n-        title=_(u"Message"),\n+        title=_("Message"),\n         description=_(\n             "help_contentrules_logger_message",\n-            default=u"&e = the triggering event, " u"&c = the context, &u = the user",\n+            default="&e = the triggering event, " "&c = the context, &u = the user",\n         ),\n         default=_(\n             "text_contentrules_logger_message",\n-            default=u"Caught &e at &c by &u",\n+            default="Caught &e at &c by &u",\n         ),\n     )\n \n@@ -61,12 +60,12 @@ class LoggerAction(SimpleItem):\n \n     @property\n     def summary(self):\n-        return _(u"Log message ${message}", mapping=dict(message=self.message))\n+        return _("Log message ${message}", mapping=dict(message=self.message))\n \n \n @adapter(Interface, ILoggerAction, Interface)\n @implementer(IExecutable)\n-class LoggerActionExecutor(object):\n+class LoggerActionExecutor:\n     """The executor for this action.\n \n     This is registered as an adapter in configure.zcml\n@@ -83,7 +82,7 @@ def processedMessage(self):\n             event_class = self.event.__class__\n             processedMessage = processedMessage.replace(\n                 "&e",\n-                "{0}.{1}".format(\n+                "{}.{}".format(\n                     event_class.__module__,\n                     event_class.__name__,\n                 ),\n@@ -109,9 +108,9 @@ class LoggerAddForm(ActionAddForm):\n     """An add form for logger rule actions."""\n \n     schema = ILoggerAction\n-    label = _(u"Add Logger Action")\n-    description = _(u"A logger action can output a message to the system log.")\n-    form_name = _(u"Configure element")\n+    label = _("Add Logger Action")\n+    description = _("A logger action can output a message to the system log.")\n+    form_name = _("Configure element")\n     Type = LoggerAction\n \n \n@@ -126,9 +125,9 @@ class LoggerEditForm(ActionEditForm):\n     """\n \n     schema = ILoggerAction\n-    label = _(u"Edit Logger Action")\n-    description = _(u"A logger action can output a message to the system log.")\n-    form_name = _(u"Configure element")\n+    label = _("Edit Logger Action")\n+    description = _("A logger action can output a message to the system log.")\n+    form_name = _("Configure element")\n \n \n class LoggerEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/actions/mail.py b/plone/app/contentrules/actions/mail.py\nindex 2f249d0..3831d1c 100644\n--- a/plone/app/contentrules/actions/mail.py\n+++ b/plone/app/contentrules/actions/mail.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n@@ -34,10 +33,10 @@ class IMailAction(Interface):\n     """Definition of the configuration available for a mail action"""\n \n     subject = schema.TextLine(\n-        title=_(u"Subject"), description=_(u"Subject of the message"), required=True\n+        title=_("Subject"), description=_("Subject of the message"), required=True\n     )\n     source = schema.TextLine(\n-        title=_(u"Email source"),\n+        title=_("Email source"),\n         description=_(\n             "The email address that sends the email. If no email is provided "\n             "here, it will use the portal from address."\n@@ -45,7 +44,7 @@ class IMailAction(Interface):\n         required=False,\n     )\n     recipients = schema.TextLine(\n-        title=_(u"Email recipients"),\n+        title=_("Email recipients"),\n         description=_(\n             "The email where you want to send this message. To send it to "\n             "different email addresses, just separate them with ,"\n@@ -53,12 +52,12 @@ class IMailAction(Interface):\n         required=True,\n     )\n     exclude_actor = schema.Bool(\n-        title=_(u"Exclude actor from recipients"),\n+        title=_("Exclude actor from recipients"),\n         description=_("Do not send the email to the user that did the action."),\n     )\n     message = schema.Text(\n-        title=_(u"Message"),\n-        description=_(u"The message that you want to mail."),\n+        title=_("Message"),\n+        description=_("The message that you want to mail."),\n         required=True,\n     )\n \n@@ -69,10 +68,10 @@ class MailAction(SimpleItem):\n     The implementation of the action defined before\n     """\n \n-    subject = u""\n-    source = u""\n-    recipients = u""\n-    message = u""\n+    subject = ""\n+    source = ""\n+    recipients = ""\n+    message = ""\n     exclude_actor = False\n \n     element = "plone.actions.Mail"\n@@ -80,13 +79,13 @@ class MailAction(SimpleItem):\n     @property\n     def summary(self):\n         return _(\n-            u"Email report to ${recipients}", mapping=dict(recipients=self.recipients)\n+            "Email report to ${recipients}", mapping=dict(recipients=self.recipients)\n         )\n \n \n @implementer(IExecutable)\n @adapter(Interface, IMailAction, Interface)\n-class MailActionExecutor(object):\n+class MailActionExecutor:\n     """The executor for this action."""\n \n     def __init__(self, context, element, event):\n@@ -121,23 +120,23 @@ def __call__(self):\n                 if request:\n                     messages = IStatusMessage(request)\n                     msg = _(\n-                        u"Error sending email from content rule. You must "\n-                        u"provide a source address for mail "\n-                        u"actions or enter an email in the portal properties"\n+                        "Error sending email from content rule. You must "\n+                        "provide a source address for mail "\n+                        "actions or enter an email in the portal properties"\n                     )\n-                    messages.add(msg, type=u"error")\n+                    messages.add(msg, type="error")\n                 return False\n \n             from_name = self.mail_settings.email_from_name.strip(\'"\')\n-            if six.PY2 and isinstance(from_name, six.text_type):\n+            if six.PY2 and isinstance(from_name, str):\n                 from_name = from_name.encode("utf8")\n-            source = \'"{0}" <{1}>\'.format(from_name, from_address)\n+            source = f\'"{from_name}" <{from_address}>\'\n \n         recip_string = interpolator(self.element.recipients)\n         if recip_string:  # check recipient is not None or empty string\n-            recipients = set(\n-                [str(mail.strip()) for mail in recip_string.split(",") if mail.strip()]\n-            )\n+            recipients = {\n+                str(mail.strip()) for mail in recip_string.split(",") if mail.strip()\n+            }\n         else:\n             recipients = set()\n \n@@ -149,7 +148,7 @@ def __call__(self):\n \n         # prepend interpolated message with \\n to avoid interpretation\n         # of first line as header\n-        message = u"\\n{0}".format(interpolator(self.element.message))\n+        message = f"\\n{interpolator(self.element.message)}"\n \n         subject = interpolator(self.element.subject)\n \n@@ -183,9 +182,9 @@ class MailAddForm(ActionAddForm):\n     """\n \n     schema = IMailAction\n-    label = _(u"Add Mail Action")\n-    description = _(u"A mail action can mail different recipient.")\n-    form_name = _(u"Configure element")\n+    label = _("Add Mail Action")\n+    description = _("A mail action can mail different recipient.")\n+    form_name = _("Configure element")\n     Type = MailAction\n     # custom template will allow us to add help text\n     template = ViewPageTemplateFile("templates/mail.pt")\n@@ -201,9 +200,9 @@ class MailEditForm(ActionEditForm):\n     """\n \n     schema = IMailAction\n-    label = _(u"Edit Mail Action")\n-    description = _(u"A mail action can mail different recipient.")\n-    form_name = _(u"Configure element")\n+    label = _("Edit Mail Action")\n+    description = _("A mail action can mail different recipient.")\n+    form_name = _("Configure element")\n \n     # custom template will allow us to add help text\n     template = ViewPageTemplateFile("templates/mail.pt")\ndiff --git a/plone/app/contentrules/actions/move.py b/plone/app/contentrules/actions/move.py\nindex 039a002..0a99bf0 100644\n--- a/plone/app/contentrules/actions/move.py\n+++ b/plone/app/contentrules/actions/move.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n@@ -32,8 +31,8 @@ class IMoveAction(Interface):\n     """\n \n     target_folder = schema.Choice(\n-        title=_(u"Target folder"),\n-        description=_(u"As a path relative to the portal root."),\n+        title=_("Target folder"),\n+        description=_("As a path relative to the portal root."),\n         required=True,\n         source=CatalogSource(is_folderish=True),\n     )\n@@ -48,12 +47,12 @@ class MoveAction(SimpleItem):\n \n     @property\n     def summary(self):\n-        return _(u"Move to folder ${folder}", mapping=dict(folder=self.target_folder))\n+        return _("Move to folder ${folder}", mapping=dict(folder=self.target_folder))\n \n \n @adapter(Interface, IMoveAction, Interface)\n @implementer(IExecutable)\n-class MoveActionExecutor(object):\n+class MoveActionExecutor:\n     """The executor for this action."""\n \n     def __init__(self, context, element, event):\n@@ -81,7 +80,7 @@ def __call__(self):\n             self.error(\n                 obj,\n                 _(\n-                    u"Target folder ${target} does not exist.",\n+                    "Target folder ${target} does not exist.",\n                     mapping={"target": path},\n                 ),\n             )\n@@ -134,8 +133,8 @@ def error(self, obj, error):\n         if request is not None:\n             title = utils.pretty_title_or_id(obj, obj)\n             message = _(\n-                u"Unable to move ${name} as part of content rule "\n-                u"\'move\' action: ${error}",\n+                "Unable to move ${name} as part of content rule "\n+                "\'move\' action: ${error}",\n                 mapping={"name": title, "error": error},\n             )\n             IStatusMessage(request).addStatusMessage(message, type="error")\n@@ -151,18 +150,18 @@ def taken(x):\n         if not taken(old_id):\n             return old_id\n         idx = 1\n-        while taken("{0}.{1}".format(old_id, idx)):\n+        while taken(f"{old_id}.{idx}"):\n             idx += 1\n-        return "{0}.{1}".format(old_id, idx)\n+        return f"{old_id}.{idx}"\n \n \n class MoveAddForm(ActionAddForm):\n     """An add form for move-to-folder actions."""\n \n     schema = IMoveAction\n-    label = _(u"Add Move Action")\n-    description = _(u"A move action can move an object to a different folder.")\n-    form_name = _(u"Configure element")\n+    label = _("Add Move Action")\n+    description = _("A move action can move an object to a different folder.")\n+    form_name = _("Configure element")\n     Type = MoveAction\n \n \n@@ -177,9 +176,9 @@ class MoveEditForm(ActionEditForm):\n     """\n \n     schema = IMoveAction\n-    label = _(u"Edit Move Action")\n-    description = _(u"A move action can move an object to a different folder.")\n-    form_name = _(u"Configure element")\n+    label = _("Edit Move Action")\n+    description = _("A move action can move an object to a different folder.")\n+    form_name = _("Configure element")\n \n \n class MoveEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/actions/notify.py b/plone/app/contentrules/actions/notify.py\nindex 8a59517..a03cd64 100644\n--- a/plone/app/contentrules/actions/notify.py\n+++ b/plone/app/contentrules/actions/notify.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.actions import ActionAddForm\n@@ -20,14 +19,14 @@ class INotifyAction(Interface):\n     """\n \n     message = schema.TextLine(\n-        title=_(u"Message"),\n-        description=_(u"The message to send to the user."),\n+        title=_("Message"),\n+        description=_("The message to send to the user."),\n         required=True,\n     )\n \n     message_type = schema.Choice(\n-        title=_(u"Message type"),\n-        description=_(u"Select the type of message to display."),\n+        title=_("Message type"),\n+        description=_("Select the type of message to display."),\n         values=("info", "warning", "error"),\n         required=True,\n         default="info",\n@@ -46,14 +45,14 @@ class NotifyAction(SimpleItem):\n     @property\n     def summary(self):\n         return _(\n-            u"Notify with message ${message}",\n+            "Notify with message ${message}",\n             mapping=dict(message=self.message),\n         )\n \n \n @adapter(Interface, INotifyAction, Interface)\n @implementer(IExecutable)\n-class NotifyActionExecutor(object):\n+class NotifyActionExecutor:\n     """The executor for this action.\n \n     This is registered as an adapter in configure.zcml\n@@ -76,9 +75,9 @@ class NotifyAddForm(ActionAddForm):\n     """An add form for notify rule actions."""\n \n     schema = INotifyAction\n-    label = _(u"Add Notify Action")\n-    description = _(u"A notify action can show a message to the user.")\n-    form_name = _(u"Configure element")\n+    label = _("Add Notify Action")\n+    description = _("A notify action can show a message to the user.")\n+    form_name = _("Configure element")\n     Type = NotifyAction\n \n \n@@ -93,9 +92,9 @@ class NotifyEditForm(ActionEditForm):\n     """\n \n     schema = INotifyAction\n-    label = _(u"Edit Notify Action")\n-    description = _(u"A notify action can show a message to the user.")\n-    form_name = _(u"Configure element")\n+    label = _("Edit Notify Action")\n+    description = _("A notify action can show a message to the user.")\n+    form_name = _("Configure element")\n \n \n class NotifyEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/actions/versioning.py b/plone/app/contentrules/actions/versioning.py\nindex 47d8abb..817c674 100644\n--- a/plone/app/contentrules/actions/versioning.py\n+++ b/plone/app/contentrules/actions/versioning.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.actions import ActionAddForm\n@@ -20,10 +19,8 @@ class IVersioningAction(Interface):\n     """\n \n     comment = schema.TextLine(\n-        title=_(u"Comment"),\n-        description=_(\n-            u"The comment added to the history while versioning the content."\n-        ),\n+        title=_("Comment"),\n+        description=_("The comment added to the history while versioning the content."),\n         required=False,\n     )\n \n@@ -39,14 +36,14 @@ class VersioningAction(SimpleItem):\n     @property\n     def summary(self):\n         return _(\n-            u"Versioning with comment ${comment}",\n+            "Versioning with comment ${comment}",\n             mapping=dict(comment=self.comment),\n         )\n \n \n @adapter(Interface, IVersioningAction, Interface)\n @implementer(IExecutable)\n-class VersioningActionExecutor(object):\n+class VersioningActionExecutor:\n     """The executor for this action.\n \n     This is registered as an adapter in configure.zcml\n@@ -68,12 +65,12 @@ class VersioningAddForm(ActionAddForm):\n     """An add form for versioning rule actions."""\n \n     schema = IVersioningAction\n-    label = _(u"Add Versioning Action")\n+    label = _("Add Versioning Action")\n     description = _(\n-        u"A versioning action will store a version of a content "\n-        u"no matter versioning is enabled for it or not."\n+        "A versioning action will store a version of a content "\n+        "no matter versioning is enabled for it or not."\n     )\n-    form_name = _(u"Configure element")\n+    form_name = _("Configure element")\n     Type = VersioningAction\n \n \n@@ -88,12 +85,12 @@ class VersioningEditForm(ActionEditForm):\n     """\n \n     schema = IVersioningAction\n-    label = _(u"Edit Versioning Action")\n+    label = _("Edit Versioning Action")\n     description = _(\n-        u"A versioning action will store a version of a content "\n-        u"no matter versioning is enabled for it or not."\n+        "A versioning action will store a version of a content "\n+        "no matter versioning is enabled for it or not."\n     )\n-    form_name = _(u"Configure element")\n+    form_name = _("Configure element")\n \n \n class VersioningEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/actions/workflow.py b/plone/app/contentrules/actions/workflow.py\nindex aba6f04..a69a8d2 100644\n--- a/plone/app/contentrules/actions/workflow.py\n+++ b/plone/app/contentrules/actions/workflow.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.actions import ActionAddForm\n@@ -23,8 +22,8 @@ class IWorkflowAction(Interface):\n     """\n \n     transition = schema.Choice(\n-        title=_(u"Transition"),\n-        description=_(u"Select the workflow transition to attempt"),\n+        title=_("Transition"),\n+        description=_("Select the workflow transition to attempt"),\n         required=True,\n         vocabulary="plone.app.vocabularies.WorkflowTransitions",\n     )\n@@ -40,14 +39,14 @@ class WorkflowAction(SimpleItem):\n     @property\n     def summary(self):\n         return _(\n-            u"Execute transition ${transition}",\n+            "Execute transition ${transition}",\n             mapping=dict(transition=self.transition),\n         )\n \n \n @adapter(Interface, IWorkflowAction, Interface)\n @implementer(IExecutable)\n-class WorkflowActionExecutor(object):\n+class WorkflowActionExecutor:\n     """The executor for this action."""\n \n     def __init__(self, context, element, event):\n@@ -78,7 +77,7 @@ def error(self, obj, error):\n             title = utils.safe_unicode(utils.pretty_title_or_id(obj, obj))\n             error = utils.safe_unicode(error)\n             message = _(\n-                u"Unable to change state of ${name} as part of content rule \'workflow\' action: ${error}",  # noqa\n+                "Unable to change state of ${name} as part of content rule \'workflow\' action: ${error}",  # noqa\n                 mapping={"name": title, "error": error},\n             )\n             IStatusMessage(request).addStatusMessage(message, type="error")\n@@ -88,9 +87,9 @@ class WorkflowAddForm(ActionAddForm):\n     """An add form for workflow actions."""\n \n     schema = IWorkflowAction\n-    label = _(u"Add Workflow Action")\n-    description = _(u"A workflow action triggers a workflow transition on an object.")\n-    form_name = _(u"Configure element")\n+    label = _("Add Workflow Action")\n+    description = _("A workflow action triggers a workflow transition on an object.")\n+    form_name = _("Configure element")\n     Type = WorkflowAction\n \n \n@@ -102,9 +101,9 @@ class WorkflowEditForm(ActionEditForm):\n     """An edit form for workflow rule actions."""\n \n     schema = IWorkflowAction\n-    label = _(u"Edit Workflow Action")\n-    description = _(u"A workflow action triggers a workflow transition on an object.")\n-    form_name = _(u"Configure element")\n+    label = _("Edit Workflow Action")\n+    description = _("A workflow action triggers a workflow transition on an object.")\n+    form_name = _("Configure element")\n \n \n class WorkflowEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/api.py b/plone/app/contentrules/api.py\nindex 6cc4217..754fc18 100644\n--- a/plone/app/contentrules/api.py\n+++ b/plone/app/contentrules/api.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.rule import get_assignments\n from plone.app.contentrules.rule import insert_assignment\n from plone.contentrules.engine.assignments import RuleAssignment\ndiff --git a/plone/app/contentrules/browser/__init__.py b/plone/app/contentrules/browser/__init__.py\nindex ec51c5a..792d600 100644\n--- a/plone/app/contentrules/browser/__init__.py\n+++ b/plone/app/contentrules/browser/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/plone/app/contentrules/browser/adding.py b/plone/app/contentrules/browser/adding.py\nindex 3d8b066..febf16c 100644\n--- a/plone/app/contentrules/browser/adding.py\n+++ b/plone/app/contentrules/browser/adding.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n@@ -41,10 +40,10 @@ def add(self, content):\n         storage[name] = content\n         IStatusMessage(self.request).add(\n             _(\n-                u"New content rule created. "\n-                u"Please add conditions and actions at the bottom of the page."\n+                "New content rule created. "\n+                "Please add conditions and actions at the bottom of the page."\n             ),\n-            type=u"info",\n+            type="info",\n         )\n \n     def renderAddButton(self):\n@@ -86,7 +85,7 @@ def __init__(self, context, request):\n     def nextURL(self):\n         url = str(\n             getMultiAdapter(\n-                (aq_parent(self.context), self.request), name=u"absolute_url"\n+                (aq_parent(self.context), self.request), name="absolute_url"\n             )\n         )\n         return url + "/@@manage-content-rules"\ndiff --git a/plone/app/contentrules/browser/assignments.py b/plone/app/contentrules/browser/assignments.py\nindex b7270d4..ec50215 100644\n--- a/plone/app/contentrules/browser/assignments.py\n+++ b/plone/app/contentrules/browser/assignments.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from plone.app.contentrules import api\n@@ -52,31 +51,31 @@ def __call__(self):\n             for r in rule_ids:\n                 api.unassign_rule(self.context, r)\n \n-            status.addStatusMessage(_(u"Assignments deleted."), type="info")\n+            status.addStatusMessage(_("Assignments deleted."), type="info")\n         elif "form.button.Enable" in form:\n             rule_ids = form.get("rule_ids", ())\n             for r in rule_ids:\n                 api.edit_rule_assignment(context, r, enabled=True)\n \n-            status.addStatusMessage(_(u"Assignments enabled."), type="info")\n+            status.addStatusMessage(_("Assignments enabled."), type="info")\n         elif "form.button.Disable" in form:\n             rule_ids = form.get("rule_ids", ())\n             for r in rule_ids:\n                 api.edit_rule_assignment(context, r, enabled=False)\n \n-            status.addStatusMessage(_(u"Assignments disabled."), type="info")\n+            status.addStatusMessage(_("Assignments disabled."), type="info")\n         elif "form.button.Bubble" in form:\n             rule_ids = form.get("rule_ids", ())\n             for r in rule_ids:\n                 api.edit_rule_assignment(context, r, bubbles=True, enabled=True)\n \n-            status.addStatusMessage(_(u"Changes saved."), type="info")\n+            status.addStatusMessage(_("Changes saved."), type="info")\n         elif "form.button.NoBubble" in form:\n             rule_ids = form.get("rule_ids", ())\n             for r in rule_ids:\n                 api.edit_rule_assignment(context, r, bubbles=False)\n \n-            status.addStatusMessage(_(u"Changes saved."), type="info")\n+            status.addStatusMessage(_("Changes saved."), type="info")\n \n         return self.template()\n \n@@ -101,7 +100,7 @@ def acquired_rules(self):\n         if ISiteRoot.providedBy(self.context):\n             return []\n \n-        in_use = set([r["id"] for r in self.assigned_rules()])\n+        in_use = {r["id"] for r in self.assigned_rules()}\n \n         storage = getUtility(IRuleStorage)\n         events = self._events()\n@@ -116,7 +115,7 @@ def acquired_rules(self):\n                     if key not in in_use and assignment.bubbles:\n                         rule = storage.get(key, None)\n                         if rule is not None:\n-                            url = "{0}/@@manage-content-rules".format(\n+                            url = "{}/@@manage-content-rules".format(\n                                 context.absolute_url(),\n                             )\n                             assignments.append(\n@@ -164,7 +163,7 @@ def has_rules(self):\n         return len(self.assigned_rules()) > 0 or len(self.acquired_rules()) > 0\n \n     def assignable_rules(self):\n-        in_use = set([r["id"] for r in self.assigned_rules()])\n+        in_use = {r["id"] for r in self.assigned_rules()}\n         assignable = []\n         for key, rule in getUtility(IRuleStorage).items():\n             if key not in in_use:\n@@ -180,10 +179,10 @@ def assignable_rules(self):\n     @memoize\n     def _events(self):\n         eventsFactory = getUtility(IVocabularyFactory, name="plone.contentrules.events")\n-        return dict([(e.value, e.token) for e in eventsFactory(self.context)])\n+        return {e.value: e.token for e in eventsFactory(self.context)}\n \n     def _rule_url(self, key):\n-        return "{0}/++rule++{1}/@@manage-elements".format(\n+        return "{}/++rule++{}/@@manage-elements".format(\n             self._portal_url(),\n             key,\n         )\ndiff --git a/plone/app/contentrules/browser/controlpanel.py b/plone/app/contentrules/browser/controlpanel.py\nindex 6696272..dafce05 100644\n--- a/plone/app/contentrules/browser/controlpanel.py\n+++ b/plone/app/contentrules/browser/controlpanel.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.browser.interfaces import IContentRulesControlPanel\n@@ -16,7 +15,7 @@\n \n \n def get_trigger_class(trigger):\n-    return "trigger-{0}".format(trigger.__identifier__.split(".")[-1].lower())\n+    return "trigger-{}".format(trigger.__identifier__.split(".")[-1].lower())\n \n \n @implementer(IContentRulesControlPanel)\n@@ -47,7 +46,7 @@ def __call__(self):\n \n     def authorize(self):\n         authenticator = getMultiAdapter(\n-            (self.context, self.request), name=u"authenticator"\n+            (self.context, self.request), name="authenticator"\n         )\n         if not authenticator.verify():\n             raise Unauthorized\n@@ -59,7 +58,7 @@ def globally_disabled(self):\n     def registeredRules(self):\n         rules = self._getRules()\n \n-        events = dict([(e.value, e.token) for e in self._events()])\n+        events = {e.value: e.token for e in self._events()}\n         info = []\n         for r in rules:\n             trigger_class = get_trigger_class(r.event)\n@@ -78,7 +77,7 @@ def registeredRules(self):\n                     "enabled": r.enabled,\n                     "assigned": assigned,\n                     "trigger": events[r.event],\n-                    "row_class": "{0} {1} {2}".format(\n+                    "row_class": "{} {} {}".format(\n                         trigger_class,\n                         enabled_class,\n                         assigned_class,\n@@ -108,11 +107,11 @@ def statesToShow(self):\n         return (\n             {\n                 "id": "state-enabled",\n-                "title": _(u"label_rule_enabled", default=u"Enabled"),\n+                "title": _("label_rule_enabled", default="Enabled"),\n             },\n             {\n                 "id": "state-disabled",\n-                "title": _(u"label_rule_disabled", default=u"Disabled"),\n+                "title": _("label_rule_disabled", default="Disabled"),\n             },\n         )\n \ndiff --git a/plone/app/contentrules/browser/elements.py b/plone/app/contentrules/browser/elements.py\nindex 711d74c..eb06937 100644\n--- a/plone/app/contentrules/browser/elements.py\n+++ b/plone/app/contentrules/browser/elements.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from Acquisition import aq_inner\n from plone.app.contentrules import api\n@@ -203,7 +202,7 @@ def _populate_info(self, elements, meta, namespace):\n \n             editview = None\n             if descriptor.editview:\n-                editview = "{0}/++{1}++{2}/{3}".format(\n+                editview = "{}/++{}++{}/{}".format(\n                     base_url,\n                     namespace,\n                     idx,\ndiff --git a/plone/app/contentrules/browser/formhelper.py b/plone/app/contentrules/browser/formhelper.py\nindex a64471a..7dafd6f 100644\n--- a/plone/app/contentrules/browser/formhelper.py\n+++ b/plone/app/contentrules/browser/formhelper.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from plone.app.contentrules import PloneMessageFactory as _\n@@ -40,16 +39,16 @@ def create(self):\n     ignoreContext = True\n \n     def updateActions(self):\n-        super(AddForm, self).updateActions()\n+        super().updateActions()\n         self.actions["save"].addClass("btn btn-primary")\n         self.actions["cancel"].addClass("btn btn-secondary")\n \n     def nextURL(self):\n         rule = aq_parent(aq_inner(self.context))\n         context = aq_parent(aq_inner(rule))\n-        url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))\n+        url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n         focus = self.context.id.strip("+")\n-        return "{0}/++rule++{1}/@@manage-elements#{2}".format(\n+        return "{}/++rule++{}/@@manage-elements#{}".format(\n             url,\n             rule.__name__,\n             focus,\n@@ -58,7 +57,7 @@ def nextURL(self):\n     def add(self, content):\n         self.context.add(content)\n \n-    @button.buttonAndHandler(_(u"label_save", default=u"Save"), name="save")\n+    @button.buttonAndHandler(_("label_save", default="Save"), name="save")\n     def handle_save_action(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -71,7 +70,7 @@ def handle_save_action(self, action):\n             self.request.response.redirect(self.nextURL())\n \n     @button.buttonAndHandler(\n-        _(u"label_cancel", default=u"Cancel"),\n+        _("label_cancel", default="Cancel"),\n         name="cancel",\n     )\n     def handle_cancel_action(self, action):\n@@ -102,8 +101,8 @@ def __call__(self):\n     def nextURL(self):\n         rule = aq_parent(aq_inner(self.context))\n         context = aq_parent(aq_inner(rule))\n-        url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))\n-        return "{0}/++rule++{1}/@@manage-elements".format(url, rule.__name__)\n+        url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n+        return f"{url}/++rule++{rule.__name__}/@@manage-elements"\n \n     def create(self):\n         raise NotImplementedError("concrete classes must implement create()")\n@@ -114,11 +113,11 @@ class EditForm(AutoExtensibleForm, form.EditForm):\n     """An edit form for rule elements."""\n \n     def updateActions(self):\n-        super(EditForm, self).updateActions()\n+        super().updateActions()\n         self.actions["save"].addClass("btn btn-primary")\n         self.actions["cancel"].addClass("btn btn-secondary")\n \n-    @button.buttonAndHandler(_(u"label_save", default=u"Save"), name="save")\n+    @button.buttonAndHandler(_("label_save", default="Save"), name="save")\n     def handle_save_action(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -131,7 +130,7 @@ def handle_save_action(self, action):\n         return ""\n \n     @button.buttonAndHandler(\n-        _(u"label_cancel", default=u"Cancel"),\n+        _("label_cancel", default="Cancel"),\n         name="cancel",\n     )\n     def handle_cancel_action(self, action):\n@@ -144,9 +143,9 @@ def nextURL(self):\n         element = aq_inner(self.context)\n         rule = aq_parent(element)\n         context = aq_parent(rule)\n-        url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))\n+        url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n         focus = self.context.id.strip("+")\n-        return "{0}/++rule++{1}/@@manage-elements#{2}".format(\n+        return "{}/++rule++{}/@@manage-elements#{}".format(\n             url,\n             rule.__name__,\n             focus,\ndiff --git a/plone/app/contentrules/browser/info.py b/plone/app/contentrules/browser/info.py\nindex 4d1717f..2b2f2ea 100644\n--- a/plone/app/contentrules/browser/info.py\n+++ b/plone/app/contentrules/browser/info.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from plone.contentrules.engine.interfaces import IRuleAssignable\n from plone.contentrules.engine.interfaces import IRuleStorage\ndiff --git a/plone/app/contentrules/browser/interfaces.py b/plone/app/contentrules/browser/interfaces.py\nindex 0fc520d..a59d47d 100644\n--- a/plone/app/contentrules/browser/interfaces.py\n+++ b/plone/app/contentrules/browser/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.browser.interfaces import IAdding\n from zope.interface import Interface\n \ndiff --git a/plone/app/contentrules/browser/navigation.py b/plone/app/contentrules/browser/navigation.py\nindex a6f1c83..4bb7bda 100644\n--- a/plone/app/contentrules/browser/navigation.py\n+++ b/plone/app/contentrules/browser/navigation.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules import PloneMessageFactory as _\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.browser.navigation import PhysicalNavigationBreadcrumbs\n@@ -9,14 +8,14 @@ def breadcrumbs(self):\n         portal_url = getToolByName(self.context, "portal_url")()\n         return (\n             {\n-                "absolute_url": "{0}/@@rules-controlpanel".format(portal_url),\n+                "absolute_url": f"{portal_url}/@@rules-controlpanel",\n                 "Title": _(\n                     "title_manage_contentrules",\n-                    default=u"Content Rules",\n+                    default="Content Rules",\n                 ),\n             },\n             {\n-                "absolute_url": "{0}/@@manage-elements".format(\n+                "absolute_url": "{}/@@manage-elements".format(\n                     self.context.absolute_url(),\n                 ),\n                 "Title": self.context.title or self.context.id,\ndiff --git a/plone/app/contentrules/browser/rule.py b/plone/app/contentrules/browser/rule.py\nindex adad190..3ce42ed 100644\n--- a/plone/app/contentrules/browser/rule.py\n+++ b/plone/app/contentrules/browser/rule.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from plone.app.contentrules import PloneMessageFactory as _\n@@ -17,22 +16,22 @@ class RuleAddForm(AddForm):\n \n     schema = IRuleConfiguration\n     ignoreContext = True\n-    label = _(u"Add Rule")\n+    label = _("Add Rule")\n     description = _(\n-        u"Add a new rule. Once complete, you can manage the "\n-        u"rule\'s actions and conditions separately."\n+        "Add a new rule. Once complete, you can manage the "\n+        "rule\'s actions and conditions separately."\n     )\n \n     def nextURL(self):\n         context = aq_parent(aq_inner(self.context))\n-        url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))\n+        url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n         if base_hasattr(self.context, "_chosen_name"):\n-            return "{0}/++rule++{1}/@@manage-elements".format(\n+            return "{}/++rule++{}/@@manage-elements".format(\n                 url,\n                 self.context._chosen_name,\n             )\n         else:\n-            return "{0}/@@rules-controlpanel".format(url)\n+            return f"{url}/@@rules-controlpanel"\n \n     def create(self, data):\n         rule = Rule()\n@@ -48,12 +47,12 @@ class RuleEditForm(EditForm):\n     """An edit form for rules."""\n \n     schema = IRuleConfiguration\n-    label = _(u"Edit Rule")\n-    description = _(u"Edit an existing rule.")\n+    label = _("Edit Rule")\n+    description = _("Edit an existing rule.")\n \n     def nextURL(self):\n         context = aq_parent(aq_inner(self.context))\n-        url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))\n+        url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n         return url + "/@@rules-controlpanel"\n \n \ndiff --git a/plone/app/contentrules/browser/traversal.py b/plone/app/contentrules/browser/traversal.py\nindex f638ec1..70416f9 100644\n--- a/plone/app/contentrules/browser/traversal.py\n+++ b/plone/app/contentrules/browser/traversal.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.contentrules.engine.interfaces import IRuleStorage\n from plone.contentrules.rule.interfaces import IRule\n from Products.CMFCore.interfaces import ISiteRoot\n@@ -11,7 +10,7 @@\n \n @adapter(ISiteRoot, IBrowserRequest)\n @implementer(ITraversable)\n-class RuleNamespace(object):\n+class RuleNamespace:\n     """Used to traverse to a rule.\n \n     Traversing to portal/++rule++foo will retrieve the rule with id \'foo\'\n@@ -29,7 +28,7 @@ def traverse(self, name, ignore):\n \n @adapter(IRule, IBrowserRequest)\n @implementer(ITraversable)\n-class RuleConditionNamespace(object):\n+class RuleConditionNamespace:\n     """Used to traverse to a rule condition\n \n     Traversing to portal/++rule++foo/++condition++1 will retrieve the second\n@@ -42,7 +41,7 @@ def __init__(self, context, request=None):\n \n     def traverse(self, name, ignore):\n         condition = self.context.conditions[int(name)]\n-        traversal_id = "++condition++{0}".format(name)\n+        traversal_id = f"++condition++{name}"\n         if condition.id != traversal_id:\n             condition.__name__ = condition.id = traversal_id\n         return condition\n@@ -50,7 +49,7 @@ def traverse(self, name, ignore):\n \n @adapter(IRule, IBrowserRequest)\n @implementer(ITraversable)\n-class RuleActionNamespace(object):\n+class RuleActionNamespace:\n     """Used to traverse to a rule condition\n \n     Traversing to portal/++rule++foo/++action++1 will retrieve the second\n@@ -63,7 +62,7 @@ def __init__(self, context, request=None):\n \n     def traverse(self, name, ignore):\n         action = self.context.actions[int(name)]\n-        traversal_id = "++action++{0}".format(name)\n+        traversal_id = f"++action++{name}"\n         if action.id != traversal_id:\n             action.__name__ = action.id = traversal_id\n         return action\ndiff --git a/plone/app/contentrules/conditions/__init__.py b/plone/app/contentrules/conditions/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/app/contentrules/conditions/__init__.py\n+++ b/plone/app/contentrules/conditions/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/contentrules/conditions/fileextension.py b/plone/app/contentrules/conditions/fileextension.py\nindex cec8851..6627240 100644\n--- a/plone/app/contentrules/conditions/fileextension.py\n+++ b/plone/app/contentrules/conditions/fileextension.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.browser.formhelper import AddForm\n@@ -27,8 +26,8 @@ class IFileExtensionCondition(Interface):\n     """\n \n     file_extension = schema.TextLine(\n-        title=_(u"File extension"),\n-        description=_(u"The file extension to check for"),\n+        title=_("File extension"),\n+        description=_("The file extension to check for"),\n         required=True,\n     )\n \n@@ -40,17 +39,17 @@ class FileExtensionCondition(SimpleItem):\n     Note that we must mix in Explicit to keep Zope 2 security happy.\n     """\n \n-    file_extension = u""\n+    file_extension = ""\n     element = "plone.conditions.FileExtension"\n \n     @property\n     def summary(self):\n-        return _(u"File extension is ${ext}", mapping=dict(ext=self.file_extension))\n+        return _("File extension is ${ext}", mapping=dict(ext=self.file_extension))\n \n \n @implementer(IExecutable)\n @adapter(Interface, IFileExtensionCondition, Interface)\n-class FileExtensionConditionExecutor(object):\n+class FileExtensionConditionExecutor:\n     """The executor for this condition.\n \n     This is registered as an adapter in configure.zcml\n@@ -86,12 +85,12 @@ class FileExtensionAddForm(AddForm):\n     """An add form for file extension rule conditions."""\n \n     schema = IFileExtensionCondition\n-    label = _(u"Add File Extension Condition")\n+    label = _("Add File Extension Condition")\n     description = _(\n-        u"A file extension condition can restrict a rule from "\n-        u"executing unless the target is a File with a particular extension."\n+        "A file extension condition can restrict a rule from "\n+        "executing unless the target is a File with a particular extension."\n     )\n-    form_name = _(u"Configure element")\n+    form_name = _("Configure element")\n \n     def create(self, data):\n         c = FileExtensionCondition()\n@@ -110,12 +109,12 @@ class FileExtensionEditForm(EditForm):\n     """\n \n     schema = IFileExtensionCondition\n-    label = _(u"Edit File Extension Condition")\n+    label = _("Edit File Extension Condition")\n     description = _(\n-        u"A file extension condition can restrict a rule from "\n-        u"executing unless the target is a File with a particular extension."\n+        "A file extension condition can restrict a rule from "\n+        "executing unless the target is a File with a particular extension."\n     )\n-    form_name = _(u"Configure element")\n+    form_name = _("Configure element")\n \n \n class FileExtensionEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/conditions/group.py b/plone/app/contentrules/conditions/group.py\nindex 63d231e..b897f31 100644\n--- a/plone/app/contentrules/conditions/group.py\n+++ b/plone/app/contentrules/conditions/group.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.browser.formhelper import AddForm\n@@ -21,8 +20,8 @@ class IGroupCondition(Interface):\n     """\n \n     group_names = schema.Set(\n-        title=_(u"Group name"),\n-        description=_(u"The name of the group."),\n+        title=_("Group name"),\n+        description=_("The name of the group."),\n         required=True,\n         value_type=schema.Choice(vocabulary="plone.app.vocabularies.Groups"),\n     )\n@@ -41,13 +40,13 @@ class GroupCondition(SimpleItem):\n     @property\n     def summary(self):\n         return _(\n-            u"Groups are: ${names}", mapping=dict(names=", ".join(self.group_names))\n+            "Groups are: ${names}", mapping=dict(names=", ".join(self.group_names))\n         )\n \n \n @implementer(IExecutable)\n @adapter(Interface, IGroupCondition, Interface)\n-class GroupConditionExecutor(object):\n+class GroupConditionExecutor:\n     """The executor for this condition.\n \n     This is registered as an adapter in configure.zcml\n@@ -75,12 +74,12 @@ class GroupAddForm(AddForm):\n     """An add form for group rule conditions."""\n \n     schema = IGroupCondition\n-    label = _(u"Add Group Condition")\n+    label = _("Add Group Condition")\n     description = _(\n-        u"A group condition can prevent a rule from executing "\n-        u"unless the current user is a member of a particular group."\n+        "A group condition can prevent a rule from executing "\n+        "unless the current user is a member of a particular group."\n     )\n-    form_name = _(u"Configure element")\n+    form_name = _("Configure element")\n \n     def create(self, data):\n         c = GroupCondition()\n@@ -96,12 +95,12 @@ class GroupEditForm(EditForm):\n     """An edit form for group conditions"""\n \n     schema = IGroupCondition\n-    label = _(u"Edit Group Condition")\n+    label = _("Edit Group Condition")\n     description = _(\n-        u"A group condition can prevent a rule from executing "\n-        u"unless the current user is a member of a particular group."\n+        "A group condition can prevent a rule from executing "\n+        "unless the current user is a member of a particular group."\n     )\n-    form_name = _(u"Configure element")\n+    form_name = _("Configure element")\n \n \n class GroupEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/conditions/portaltype.py b/plone/app/contentrules/conditions/portaltype.py\nindex 6547de6..81d1f7e 100644\n--- a/plone/app/contentrules/conditions/portaltype.py\n+++ b/plone/app/contentrules/conditions/portaltype.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from OFS.SimpleItem import SimpleItem\n@@ -26,8 +25,8 @@ class IPortalTypeCondition(Interface):\n     """\n \n     check_types = schema.Set(\n-        title=_(u"Content type"),\n-        description=_(u"The content type to check for."),\n+        title=_("Content type"),\n+        description=_("The content type to check for."),\n         required=True,\n         value_type=schema.Choice(\n             vocabulary="plone.app.vocabularies.ReallyUserFriendlyTypes"\n@@ -55,12 +54,12 @@ def summary(self):\n             if fti is not None:\n                 title = translate(fti.Title(), context=portal.REQUEST)\n                 titles.append(title)\n-        return _(u"Content types are: ${names}", mapping=dict(names=", ".join(titles)))\n+        return _("Content types are: ${names}", mapping=dict(names=", ".join(titles)))\n \n \n @implementer(IExecutable)\n @adapter(Interface, IPortalTypeCondition, Interface)\n-class PortalTypeConditionExecutor(object):\n+class PortalTypeConditionExecutor:\n     """The executor for this condition.\n \n     This is registered as an adapter in configure.zcml\n@@ -89,12 +88,11 @@ class PortalTypeAddForm(AddForm):\n     """An add form for portal type conditions."""\n \n     schema = IPortalTypeCondition\n-    label = _(u"Add Content Type Condition")\n+    label = _("Add Content Type Condition")\n     description = _(\n-        u"A portal type condition makes the rule apply only to "\n-        u"certain content types."\n+        "A portal type condition makes the rule apply only to " "certain content types."\n     )\n-    form_name = _(u"Configure element")\n+    form_name = _("Configure element")\n \n     def create(self, data):\n         c = PortalTypeCondition()\n@@ -110,12 +108,11 @@ class PortalTypeEditForm(EditForm):\n     """An edit form for portal type conditions"""\n \n     schema = IPortalTypeCondition\n-    label = _(u"Edit Content Type Condition")\n+    label = _("Edit Content Type Condition")\n     description = _(\n-        u"A portal type condition makes the rule apply only to certain "\n-        u"content types."\n+        "A portal type condition makes the rule apply only to certain " "content types."\n     )\n-    form_name = _(u"Configure element")\n+    form_name = _("Configure element")\n \n \n class PortalTypeEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/conditions/role.py b/plone/app/contentrules/conditions/role.py\nindex a4b50c1..7967310 100644\n--- a/plone/app/contentrules/conditions/role.py\n+++ b/plone/app/contentrules/conditions/role.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n@@ -22,8 +21,8 @@ class IRoleCondition(Interface):\n     """\n \n     role_names = schema.Set(\n-        title=_(u"Roles"),\n-        description=_(u"The roles to check for."),\n+        title=_("Roles"),\n+        description=_("The roles to check for."),\n         required=True,\n         value_type=schema.Choice(vocabulary="plone.app.vocabularies.Roles"),\n     )\n@@ -41,12 +40,12 @@ class RoleCondition(SimpleItem):\n \n     @property\n     def summary(self):\n-        return _(u"Roles are: ${names}", mapping=dict(names=", ".join(self.role_names)))\n+        return _("Roles are: ${names}", mapping=dict(names=", ".join(self.role_names)))\n \n \n @implementer(IExecutable)\n @adapter(Interface, IRoleCondition, Interface)\n-class RoleConditionExecutor(object):\n+class RoleConditionExecutor:\n     """The executor for this condition.\n \n     This is registered as an adapter in configure.zcml\n@@ -73,12 +72,12 @@ class RoleAddForm(AddForm):\n     """An add form for role rule conditions."""\n \n     schema = IRoleCondition\n-    label = _(u"Add Role Condition")\n+    label = _("Add Role Condition")\n     description = _(\n-        u"A role condition can prevent rules from executing unless "\n-        u"the current user has a particular role."\n+        "A role condition can prevent rules from executing unless "\n+        "the current user has a particular role."\n     )\n-    form_name = _(u"Configure element")\n+    form_name = _("Configure element")\n \n     def create(self, data):\n         c = RoleCondition()\n@@ -94,12 +93,12 @@ class RoleEditForm(EditForm):\n     """An edit form for role conditions"""\n \n     schema = IRoleCondition\n-    label = _(u"Add Role Condition")\n+    label = _("Add Role Condition")\n     description = _(\n-        u"A role condition can prevent rules from executing unless "\n-        u"the current user has a particular role."\n+        "A role condition can prevent rules from executing unless "\n+        "the current user has a particular role."\n     )\n-    form_name = _(u"Configure element")\n+    form_name = _("Configure element")\n \n \n class RoleEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/conditions/talesexpression.py b/plone/app/contentrules/conditions/talesexpression.py\nindex fdf4190..e23344e 100644\n--- a/plone/app/contentrules/conditions/talesexpression.py\n+++ b/plone/app/contentrules/conditions/talesexpression.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.browser.formhelper import AddForm\n@@ -23,8 +22,8 @@ class ITalesExpressionCondition(Interface):\n     """\n \n     tales_expression = schema.TextLine(\n-        title=_(u"TALES expression"),\n-        description=_(u"The TALES expression to check."),\n+        title=_("TALES expression"),\n+        description=_("The TALES expression to check."),\n         required=True,\n     )\n \n@@ -41,14 +40,14 @@ class TalesExpressionCondition(SimpleItem):\n     @property\n     def summary(self):\n         return _(\n-            u"TALES expression is: ${tales_expression}",\n+            "TALES expression is: ${tales_expression}",\n             mapping={"tales_expression": self.tales_expression},\n         )\n \n \n @implementer(IExecutable)\n @adapter(Interface, ITalesExpressionCondition, Interface)\n-class TalesExpressionConditionExecutor(object):\n+class TalesExpressionConditionExecutor:\n     """The executor for this condition.\n \n     This is registered as an adapter in configure.zcml\n@@ -74,12 +73,12 @@ class TalesExpressionAddForm(AddForm):\n     """An add form for tales expression condition."""\n \n     schema = ITalesExpressionCondition\n-    label = _(u"Add TALES Expression Condition")\n+    label = _("Add TALES Expression Condition")\n     description = _(\n-        u"A TALES expression condition makes the rule apply "\n-        u"only if TALES expression is not False in context."\n+        "A TALES expression condition makes the rule apply "\n+        "only if TALES expression is not False in context."\n     )\n-    form_name = _(u"Configure element")\n+    form_name = _("Configure element")\n \n     def create(self, data):\n         c = TalesExpressionCondition()\n@@ -95,12 +94,12 @@ class TalesExpressionEditForm(EditForm):\n     """An edit form for TALES expression condition"""\n \n     schema = ITalesExpressionCondition\n-    label = _(u"Edit TALES Expression Condition")\n+    label = _("Edit TALES Expression Condition")\n     description = _(\n-        u"A TALES expression condition makes the rule apply "\n-        u"only if TALES expression is not False in context."\n+        "A TALES expression condition makes the rule apply "\n+        "only if TALES expression is not False in context."\n     )\n-    form_name = _(u"Configure element")\n+    form_name = _("Configure element")\n \n \n class TalesExpressionEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/conditions/wfstate.py b/plone/app/contentrules/conditions/wfstate.py\nindex e7ee6cf..8cc960c 100644\n--- a/plone/app/contentrules/conditions/wfstate.py\n+++ b/plone/app/contentrules/conditions/wfstate.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.browser.formhelper import AddForm\n@@ -21,8 +20,8 @@ class IWorkflowStateCondition(Interface):\n     """\n \n     wf_states = schema.Set(\n-        title=_(u"Workflow state"),\n-        description=_(u"The workflow states to check for."),\n+        title=_("Workflow state"),\n+        description=_("The workflow states to check for."),\n         required=True,\n         value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowStates"),\n     )\n@@ -40,14 +39,14 @@ class WorkflowStateCondition(SimpleItem):\n     @property\n     def summary(self):\n         return _(\n-            u"Workflow states are: ${states}",\n+            "Workflow states are: ${states}",\n             mapping=dict(states=", ".join(self.wf_states)),\n         )\n \n \n @implementer(IExecutable)\n @adapter(Interface, IWorkflowStateCondition, Interface)\n-class WorkflowStateConditionExecutor(object):\n+class WorkflowStateConditionExecutor:\n     """The executor for this condition."""\n \n     def __init__(self, context, element, event):\n@@ -69,12 +68,12 @@ class WorkflowStateAddForm(AddForm):\n     """An add form for workflow state conditions."""\n \n     schema = IWorkflowStateCondition\n-    label = _(u"Add Workflow State Condition")\n+    label = _("Add Workflow State Condition")\n     description = _(\n-        u"A workflow state condition can restrict rules to "\n-        u"objects in particular workflow states"\n+        "A workflow state condition can restrict rules to "\n+        "objects in particular workflow states"\n     )\n-    form_name = _(u"Configure element")\n+    form_name = _("Configure element")\n \n     def create(self, data):\n         c = WorkflowStateCondition()\n@@ -93,12 +92,12 @@ class WorkflowStateEditForm(EditForm):\n     """\n \n     schema = IWorkflowStateCondition\n-    label = _(u"Edit Workflow State Condition")\n+    label = _("Edit Workflow State Condition")\n     description = _(\n-        u"A workflow state condition can restrict rules to "\n-        u"objects in particular workflow states"\n+        "A workflow state condition can restrict rules to "\n+        "objects in particular workflow states"\n     )\n-    form_name = _(u"Configure element")\n+    form_name = _("Configure element")\n \n \n class WorkflowStateEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/conditions/wftransition.py b/plone/app/contentrules/conditions/wftransition.py\nindex c905433..ff82a58 100644\n--- a/plone/app/contentrules/conditions/wftransition.py\n+++ b/plone/app/contentrules/conditions/wftransition.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.browser.formhelper import AddForm\n@@ -21,8 +20,8 @@ class IWorkflowTransitionCondition(Interface):\n     """\n \n     wf_transitions = schema.Set(\n-        title=_(u"Workflow transition"),\n-        description=_(u"The workflow transitions to check for."),\n+        title=_("Workflow transition"),\n+        description=_("The workflow transitions to check for."),\n         required=True,\n         value_type=schema.Choice(\n             vocabulary="plone.app.vocabularies.WorkflowTransitions"\n@@ -42,14 +41,14 @@ class WorkflowTransitionCondition(SimpleItem):\n     @property\n     def summary(self):\n         return _(\n-            u"Workflow transitions are: ${transitions}",\n+            "Workflow transitions are: ${transitions}",\n             mapping=dict(transitions=", ".join(self.wf_transitions)),\n         )\n \n \n @implementer(IExecutable)\n @adapter(Interface, IWorkflowTransitionCondition, IActionSucceededEvent)\n-class WorkflowTransitionConditionExecutor(object):\n+class WorkflowTransitionConditionExecutor:\n     """The executor for this condition."""\n \n     def __init__(self, context, element, event):\n@@ -65,12 +64,12 @@ class WorkflowTransitionAddForm(AddForm):\n     """An add form for workflow transition conditions."""\n \n     schema = IWorkflowTransitionCondition\n-    label = _(u"Add Workflow Transition Condition")\n+    label = _("Add Workflow Transition Condition")\n     description = _(\n-        u"A workflow transition condition can restrict rules to "\n-        u"execute only after a certain transition."\n+        "A workflow transition condition can restrict rules to "\n+        "execute only after a certain transition."\n     )\n-    form_name = _(u"Configure element")\n+    form_name = _("Configure element")\n \n     def create(self, data):\n         c = WorkflowTransitionCondition()\n@@ -89,12 +88,12 @@ class WorkflowTransitionEditForm(EditForm):\n     """\n \n     schema = IWorkflowTransitionCondition\n-    label = _(u"Edit Workflow Transition Condition")\n+    label = _("Edit Workflow Transition Condition")\n     description = _(\n-        u"A workflow transition condition can restrict rules to "\n-        u"execute only after a certain transition."\n+        "A workflow transition condition can restrict rules to "\n+        "execute only after a certain transition."\n     )\n-    form_name = _(u"Configure element")\n+    form_name = _("Configure element")\n \n \n class WorkflowTransitionEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/exportimport/__init__.py b/plone/app/contentrules/exportimport/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/app/contentrules/exportimport/__init__.py\n+++ b/plone/app/contentrules/exportimport/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/contentrules/exportimport/interfaces.py b/plone/app/contentrules/exportimport/interfaces.py\nindex e04dba8..bd74ed8 100644\n--- a/plone/app/contentrules/exportimport/interfaces.py\n+++ b/plone/app/contentrules/exportimport/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \ndiff --git a/plone/app/contentrules/exportimport/rules.py b/plone/app/contentrules/exportimport/rules.py\nindex 3d33b5a..c42d3c2 100644\n--- a/plone/app/contentrules/exportimport/rules.py\n+++ b/plone/app/contentrules/exportimport/rules.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from lxml import etree\n from plone.app.contentrules import api\n@@ -44,7 +43,7 @@ def as_bool(string, default=False):\n \n @adapter(Interface)\n @implementer(IRuleElementExportImportHandler)\n-class PropertyRuleElementExportImportHandler(object):\n+class PropertyRuleElementExportImportHandler:\n     """Import portlet assignment settings based on zope.schema properties"""\n \n     def __init__(self, element):\n@@ -105,7 +104,7 @@ def export_field(self, doc, field):\n         # supermodel gives us an etree node but GS uses minidom so we need to convert it\n         node = valueToElement(field, value)\n         if node.text:\n-            child.appendChild(doc.createTextNode(six.text_type(node.text)))\n+            child.appendChild(doc.createTextNode(str(node.text)))\n         # Assumes there are not other text nodes and we can throw away the parent node\n         for node in node.iterchildren():\n             xml = etree.tostring(node, encoding="utf8")\n@@ -180,7 +179,7 @@ def _initRules(self, node):\n                 event_name = child.getAttribute("event")\n                 rule.event = _resolveDottedName(event_name)\n                 if not rule.event:\n-                    raise ImportError("Can not import {0}".format(event_name))\n+                    raise ImportError(f"Can not import {event_name}")\n \n                 rule.enabled = as_bool(child.getAttribute("enabled"), True)\n                 rule.stop = as_bool(child.getAttribute("stop-after"))\n@@ -336,9 +335,9 @@ def _extractRules(self):\n def importRules(context):\n     """Import content rules"""\n     site = context.getSite()\n-    importer = queryMultiAdapter((site, context), IBody, name=u"plone.contentrules")\n+    importer = queryMultiAdapter((site, context), IBody, name="plone.contentrules")\n     if importer is not None:\n-        filename = "{0}{1}".format(importer.name, importer.suffix)\n+        filename = f"{importer.name}{importer.suffix}"\n         body = context.readDataFile(filename)\n         if body is not None:\n             importer.filename = filename  # for error reporting\n@@ -348,12 +347,12 @@ def importRules(context):\n def exportRules(context):\n     """Export content rules"""\n     site = context.getSite()\n-    exporter = queryMultiAdapter((site, context), IBody, name=u"plone.contentrules")\n+    exporter = queryMultiAdapter((site, context), IBody, name="plone.contentrules")\n     if exporter is not None:\n-        filename = "{0}{1}".format(exporter.name, exporter.suffix)\n+        filename = f"{exporter.name}{exporter.suffix}"\n         body = exporter.body\n         # make sure it\'s encoded as earlier version of GS didn\'t do this\n-        if isinstance(body, six.text_type):\n+        if isinstance(body, str):\n             encoding = context.getEncoding() or "utf-8"\n             body = body.encode(encoding)\n         if body is not None:\ndiff --git a/plone/app/contentrules/handlers.py b/plone/app/contentrules/handlers.py\nindex 0ed70c6..b9b62ec 100644\n--- a/plone/app/contentrules/handlers.py\n+++ b/plone/app/contentrules/handlers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from plone.app.discussion.interfaces import IComment\n@@ -34,7 +33,7 @@ def _get_uid(context):\n         return ""\n \n \n-class DuplicateRuleFilter(object):\n+class DuplicateRuleFilter:\n     """A filter which can prevent rules from being executed more than once\n     regardless of context.\n     """\ndiff --git a/plone/app/contentrules/namechooser.py b/plone/app/contentrules/namechooser.py\nindex 1ac1ccf..f85bfb6 100644\n--- a/plone/app/contentrules/namechooser.py\n+++ b/plone/app/contentrules/namechooser.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.container.contained import NameChooser\n from zope.container.interfaces import INameChooser\n from zope.interface import implementer\n@@ -21,10 +20,10 @@ def chooseName(self, name, object):\n             name = object.__class__.__name__.lower()\n \n         i = 1\n-        new_name = "{0}-{1}".format(name, i)\n+        new_name = f"{name}-{i}"\n         while new_name in container and i <= ATTEMPTS:\n             i += 1\n-            new_name = "{0}-{1}".format(name, i)\n+            new_name = f"{name}-{i}"\n \n         self.checkName(new_name, object)\n         return new_name\ndiff --git a/plone/app/contentrules/rule.py b/plone/app/contentrules/rule.py\nindex a6e9b8e..a7a652b 100644\n--- a/plone/app/contentrules/rule.py\n+++ b/plone/app/contentrules/rule.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from BTrees.OOBTree import OOSet\n from OFS.SimpleItem import SimpleItem\n@@ -19,11 +18,11 @@ class Rule(SimpleItem, BaseRule):\n     identical.\n     """\n \n-    __name__ = u""\n+    __name__ = ""\n \n     @property\n     def id(self):\n-        return "++rule++{0}".format(self.__name__)\n+        return f"++rule++{self.__name__}"\n \n \n def get_assignments(rule):\n@@ -68,7 +67,7 @@ def container_moved(container, event):\n     if assignable is None or storage is None:\n         return\n \n-    old_path = "{0}/{1}".format(\n+    old_path = "{}/{}".format(\n         "/".join(event.oldParent.getPhysicalPath()),\n         event.oldName,\n     )\ndiff --git a/plone/app/contentrules/testing.py b/plone/app/contentrules/testing.py\nindex f6a05b7..1839443 100644\n--- a/plone/app/contentrules/testing.py\n+++ b/plone/app/contentrules/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\ndiff --git a/plone/app/contentrules/tests/base.py b/plone/app/contentrules/tests/base.py\nindex d2fd9f0..f75529e 100644\n--- a/plone/app/contentrules/tests/base.py\n+++ b/plone/app/contentrules/tests/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Base class for integration tests, based on plone.app.testing\n """\n from plone.app.contentrules.testing import (  # noqa: E501\n@@ -34,6 +33,6 @@ def setUp(self):\n     def addAuthToRequest(self):\n         portal = self.layer["portal"]\n         request = self.layer["request"]\n-        authenticator = getMultiAdapter((portal, request), name=u"authenticator")\n+        authenticator = getMultiAdapter((portal, request), name="authenticator")\n         auth = authenticator.authenticator().split(\'value="\')[1].rstrip(\'"/>\')\n         request.form["_authenticator"] = auth\ndiff --git a/plone/app/contentrules/tests/dummy.py b/plone/app/contentrules/tests/dummy.py\nindex d8408ea..41e0d23 100644\n--- a/plone/app/contentrules/tests/dummy.py\n+++ b/plone/app/contentrules/tests/dummy.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.contentrules.rule.interfaces import IRuleElementData\n from plone.uuid.interfaces import IAttributeUUID\n@@ -19,16 +18,16 @@ class DummyAction(SimpleItem):\n \n \n @implementer(IObjectEvent)\n-class DummyEvent(object):\n+class DummyEvent:\n     def __init__(self, object):\n         self.object = object\n \n \n-class DummyRule(object):\n+class DummyRule:\n     def __init__(self, name="dummy"):\n         self.__name__ = name\n \n \n @implementer(IAttributeUUID)\n-class DummyNonArchetypesContext(object):\n+class DummyNonArchetypesContext:\n     pass\ndiff --git a/plone/app/contentrules/tests/test_action_copy.py b/plone/app/contentrules/tests/test_action_copy.py\nindex 6ff6fea..2bac17a 100644\n--- a/plone/app/contentrules/tests/test_action_copy.py\n+++ b/plone/app/contentrules/tests/test_action_copy.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.actions.copy import CopyAction\n from plone.app.contentrules.actions.copy import CopyEditFormView\n from plone.app.contentrules.rule import Rule\n@@ -15,7 +14,7 @@\n \n \n @implementer(IObjectEvent)\n-class DummyEvent(object):\n+class DummyEvent:\n     def __init__(self, object):\n         self.object = object\n \n@@ -31,7 +30,7 @@ def testRegistered(self):\n     def testInvokeAddView(self):\n         element = getUtility(IRuleAction, name="plone.actions.Copy")\n         storage = getUtility(IRuleStorage)\n-        storage[u"foo"] = Rule()\n+        storage["foo"] = Rule()\n         rule = self.portal.restrictedTraverse("++rule++foo")\n \n         adding = getMultiAdapter((rule, self.portal.REQUEST), name="+action")\ndiff --git a/plone/app/contentrules/tests/test_action_delete.py b/plone/app/contentrules/tests/test_action_delete.py\nindex f3478cd..b4275ad 100644\n--- a/plone/app/contentrules/tests/test_action_delete.py\n+++ b/plone/app/contentrules/tests/test_action_delete.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.actions.delete import DeleteAction\n from plone.app.contentrules.rule import Rule\n from plone.app.contentrules.tests.base import ContentRulesTestCase\n@@ -16,7 +15,7 @@\n \n \n @implementer(IObjectEvent)\n-class DummyEvent(object):\n+class DummyEvent:\n     def __init__(self, object):\n         self.object = object\n \n@@ -32,7 +31,7 @@ def testRegistered(self):\n     def testInvokeAddView(self):\n         element = getUtility(IRuleAction, name="plone.actions.Delete")\n         storage = getUtility(IRuleStorage)\n-        storage[u"foo"] = Rule()\n+        storage["foo"] = Rule()\n         rule = self.portal.restrictedTraverse("++rule++foo")\n \n         adding = getMultiAdapter(\ndiff --git a/plone/app/contentrules/tests/test_action_logger.py b/plone/app/contentrules/tests/test_action_logger.py\nindex e89fd03..7de104d 100644\n--- a/plone/app/contentrules/tests/test_action_logger.py\n+++ b/plone/app/contentrules/tests/test_action_logger.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.actions.logger import LoggerAction\n from plone.app.contentrules.actions.logger import LoggerEditFormView\n from plone.app.contentrules.rule import Rule\n@@ -16,12 +15,12 @@\n \n \n @implementer(Interface)\n-class DummyEvent(object):\n+class DummyEvent:\n     pass\n \n \n @implementer(IObjectEvent)\n-class DummyObjectEvent(object):\n+class DummyObjectEvent:\n     def __init__(self, obj):\n         self.object = obj\n \n@@ -37,7 +36,7 @@ def testRegistered(self):\n     def testInvokeAddView(self):\n         element = getUtility(IRuleAction, name="plone.actions.Logger")\n         storage = getUtility(IRuleStorage)\n-        storage[u"foo"] = Rule()\n+        storage["foo"] = Rule()\n         rule = self.portal.restrictedTraverse("++rule++foo")\n \n         adding = getMultiAdapter((rule, self.portal.REQUEST), name="+action")\n@@ -86,7 +85,7 @@ def testProcessedMessage(self):\n \n         e.message = "Test log event : &u"\n         self.assertEqual(\n-            "Test log event : {0}".format(TEST_USER_NAME),\n+            f"Test log event : {TEST_USER_NAME}",\n             ex.processedMessage(),\n         )\n \ndiff --git a/plone/app/contentrules/tests/test_action_mail.py b/plone/app/contentrules/tests/test_action_mail.py\nindex 1375ad5..32c83d3 100644\n--- a/plone/app/contentrules/tests/test_action_mail.py\n+++ b/plone/app/contentrules/tests/test_action_mail.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.app.contentrules.actions.mail import MailAction\n from plone.app.contentrules.actions.mail import MailAddFormView\n@@ -32,15 +31,15 @@\n \n \n @implementer(IObjectEvent)\n-class DummyEvent(object):\n+class DummyEvent:\n     def __init__(self, object):\n         self.object = object\n \n \n class TestMailAction(ContentRulesTestCase):\n     def setUp(self):\n-        super(TestMailAction, self).setUp()\n-        self.folder["d1"].setTitle(u"W\xc3\xa4lkommen")\n+        super().setUp()\n+        self.folder["d1"].setTitle("W\xc3\xa4lkommen")\n \n         users = (\n             ("userone", "User One", "user@one.com", ("Manager", "Member")),\n@@ -64,7 +63,7 @@ def testRegistered(self):\n     def testInvokeAddView(self):\n         element = getUtility(IRuleAction, name="plone.actions.Mail")\n         storage = getUtility(IRuleStorage)\n-        storage[u"foo"] = Rule()\n+        storage["foo"] = Rule()\n         rule = self.portal.restrictedTraverse("++rule++foo")\n \n         adding = getMultiAdapter((rule, self.portal.REQUEST), name="+action")\n@@ -108,7 +107,7 @@ def testExecute(self):\n             "bar@foo.be, bar@foo.be, $reviewer_emails, "\n             "$manager_emails, $member_emails"\n         )\n-        e.message = u"P\xc3\xa4ge \'${title}\' created in ${url} !"\n+        e.message = "P\xc3\xa4ge \'${title}\' created in ${url} !"\n         ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         ex()\n         sent_mails = {}\n@@ -121,7 +120,7 @@ def testExecute(self):\n         self.assertEqual("currentuser@foobar.com", mailSent.get("From"))\n         # The output message should be a utf-8 encoded string\n         self.assertEqual(\n-            u"P\xc3\xa4ge \'W\xc3\xa4lkommen\' created in http://nohost/plone/f1/d1 !",\n+            "P\xc3\xa4ge \'W\xc3\xa4lkommen\' created in http://nohost/plone/f1/d1 !",\n             mailSent.get_payload(decode=True).decode("utf8"),\n         )\n \n@@ -157,7 +156,7 @@ def testExecuteNoSource(self):\n \n         # if we provide a site mail address the message sends correctly\n         mail_settings.email_from_address = "manager@portal.be"\n-        mail_settings.email_from_name = u"plone@rulez"\n+        mail_settings.email_from_name = "plone@rulez"\n         ex()\n         self.assertEqual(len(self.portal.MailHost.messages), 2)\n         mailSent = message_from_bytes(self.portal.MailHost.messages[0])\n@@ -198,7 +197,7 @@ def testExecuteExcludeActor(self):\n         e.source = "$user_email"\n         e.exclude_actor = True\n         e.recipients = "bar@foo.be, currentuser@foobar.com"\n-        e.message = u"A dummy event just happened !!!!!"\n+        e.message = "A dummy event just happened !!!!!"\n         ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         ex()\n         self.assertEqual(len(self.portal.MailHost.messages), 1)\n@@ -227,6 +226,6 @@ def testExecuteBadMailHost(self):\n         e.recipients = (\n             "bar@foo.be, $reviewer_emails, $manager_emails, " "$member_emails"\n         )\n-        e.message = u"P\xc3\x83\xc2\xa4ge \'${title}\' created in ${url} !"\n+        e.message = "P\xc3\x83\xc2\xa4ge \'${title}\' created in ${url} !"\n         ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         ex()\ndiff --git a/plone/app/contentrules/tests/test_action_modify.py b/plone/app/contentrules/tests/test_action_modify.py\nindex 8cffcd6..4b10d58 100644\n--- a/plone/app/contentrules/tests/test_action_modify.py\n+++ b/plone/app/contentrules/tests/test_action_modify.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules import handlers\n from unittest import TestCase\n from zope.lifecycleevent import ObjectAddedEvent\n@@ -23,7 +22,7 @@ def tearDown(self):\n         self.called = False\n \n     def testIgnoreAddedEvents(self):\n-        class Content(object):\n+        class Content:\n             __parent__ = None\n             __name__ = None\n \n@@ -31,7 +30,7 @@ class Content(object):\n         self.assertFalse(self.called)\n \n     def testIgnoreDeletedEvents(self):\n-        class Content(object):\n+        class Content:\n             __parent__ = None\n             __name__ = None\n \ndiff --git a/plone/app/contentrules/tests/test_action_move.py b/plone/app/contentrules/tests/test_action_move.py\nindex 6858e76..654933c 100644\n--- a/plone/app/contentrules/tests/test_action_move.py\n+++ b/plone/app/contentrules/tests/test_action_move.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.actions.move import MoveAction\n from plone.app.contentrules.actions.move import MoveEditFormView\n from plone.app.contentrules.rule import Rule\n@@ -15,7 +14,7 @@\n \n \n @implementer(IObjectEvent)\n-class DummyEvent(object):\n+class DummyEvent:\n     def __init__(self, object):\n         self.object = object\n \n@@ -31,7 +30,7 @@ def testRegistered(self):\n     def testInvokeAddView(self):\n         element = getUtility(IRuleAction, name="plone.actions.Move")\n         storage = getUtility(IRuleStorage)\n-        storage[u"foo"] = Rule()\n+        storage["foo"] = Rule()\n         rule = self.portal.restrictedTraverse("++rule++foo")\n \n         adding = getMultiAdapter((rule, self.portal.REQUEST), name="+action")\ndiff --git a/plone/app/contentrules/tests/test_action_notify.py b/plone/app/contentrules/tests/test_action_notify.py\nindex 3299f56..32e1456 100644\n--- a/plone/app/contentrules/tests/test_action_notify.py\n+++ b/plone/app/contentrules/tests/test_action_notify.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.actions.notify import NotifyAction\n from plone.app.contentrules.actions.notify import NotifyEditFormView\n from plone.app.contentrules.rule import Rule\n@@ -15,7 +14,7 @@\n \n \n @implementer(Interface)\n-class DummyEvent(object):\n+class DummyEvent:\n     pass\n \n \n@@ -30,7 +29,7 @@ def testRegistered(self):\n     def testInvokeAddView(self):\n         element = getUtility(IRuleAction, name="plone.actions.Notify")\n         storage = getUtility(IRuleStorage)\n-        storage[u"foo"] = Rule()\n+        storage["foo"] = Rule()\n         rule = self.portal.restrictedTraverse("++rule++foo")\n \n         adding = getMultiAdapter((rule, self.request), name="+action")\ndiff --git a/plone/app/contentrules/tests/test_action_versioning.py b/plone/app/contentrules/tests/test_action_versioning.py\nindex d463f88..d8557bf 100644\n--- a/plone/app/contentrules/tests/test_action_versioning.py\n+++ b/plone/app/contentrules/tests/test_action_versioning.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.actions.versioning import VersioningAction\n from plone.app.contentrules.actions.versioning import VersioningEditFormView\n from plone.app.contentrules.rule import Rule\n@@ -13,7 +12,7 @@\n \n \n @implementer(Interface)\n-class DummyEvent(object):\n+class DummyEvent:\n     def __init__(self, object):\n         self.object = object\n \n@@ -29,7 +28,7 @@ def testRegistered(self):\n     def testInvokeAddView(self):\n         element = getUtility(IRuleAction, name="plone.actions.Versioning")\n         storage = getUtility(IRuleStorage)\n-        storage[u"foo"] = Rule()\n+        storage["foo"] = Rule()\n         rule = self.portal.restrictedTraverse("++rule++foo")\n \n         adding = getMultiAdapter((rule, self.request), name="+action")\ndiff --git a/plone/app/contentrules/tests/test_action_workflow.py b/plone/app/contentrules/tests/test_action_workflow.py\nindex 7650dc4..dfa10b8 100644\n--- a/plone/app/contentrules/tests/test_action_workflow.py\n+++ b/plone/app/contentrules/tests/test_action_workflow.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.actions.workflow import WorkflowAction\n from plone.app.contentrules.actions.workflow import WorkflowEditFormView\n from plone.app.contentrules.rule import Rule\n@@ -13,7 +12,7 @@\n \n \n @implementer(IObjectEvent)\n-class DummyEvent(object):\n+class DummyEvent:\n     def __init__(self, object):\n         self.object = object\n \n@@ -29,7 +28,7 @@ def testRegistered(self):\n     def testInvokeAddView(self):\n         element = getUtility(IRuleAction, name="plone.actions.Workflow")\n         storage = getUtility(IRuleStorage)\n-        storage[u"foo"] = Rule()\n+        storage["foo"] = Rule()\n         rule = self.portal.restrictedTraverse("++rule++foo")\n \n         adding = getMultiAdapter((rule, self.portal.REQUEST), name="+action")\ndiff --git a/plone/app/contentrules/tests/test_browser.py b/plone/app/contentrules/tests/test_browser.py\nindex 32e2067..f87ef42 100644\n--- a/plone/app/contentrules/tests/test_browser.py\n+++ b/plone/app/contentrules/tests/test_browser.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.testing import PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING\n from plone.testing import layered\n \ndiff --git a/plone/app/contentrules/tests/test_cascading_rule.py b/plone/app/contentrules/tests/test_cascading_rule.py\nindex 8f42e60..efeac84 100644\n--- a/plone/app/contentrules/tests/test_cascading_rule.py\n+++ b/plone/app/contentrules/tests/test_cascading_rule.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.api import edit_rule_assignment\n from plone.app.contentrules.testing import PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING\n from plone.app.testing import applyProfile\ndiff --git a/plone/app/contentrules/tests/test_condition_group.py b/plone/app/contentrules/tests/test_condition_group.py\nindex 68c6242..27cbde7 100644\n--- a/plone/app/contentrules/tests/test_condition_group.py\n+++ b/plone/app/contentrules/tests/test_condition_group.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.conditions.group import GroupCondition\n from plone.app.contentrules.conditions.group import GroupEditFormView\n from plone.app.contentrules.rule import Rule\n@@ -13,7 +12,7 @@\n \n \n @implementer(IObjectEvent)\n-class DummyEvent(object):\n+class DummyEvent:\n     def __init__(self, obj):\n         self.object = obj\n \n@@ -29,7 +28,7 @@ def testRegistered(self):\n     def testInvokeAddView(self):\n         element = getUtility(IRuleCondition, name="plone.conditions.Group")\n         storage = getUtility(IRuleStorage)\n-        storage[u"foo"] = Rule()\n+        storage["foo"] = Rule()\n         rule = self.portal.restrictedTraverse("++rule++foo")\n \n         adding = getMultiAdapter((rule, self.portal.REQUEST), name="+condition")\ndiff --git a/plone/app/contentrules/tests/test_condition_portal_type.py b/plone/app/contentrules/tests/test_condition_portal_type.py\nindex 256ad98..87f1cc8 100644\n--- a/plone/app/contentrules/tests/test_condition_portal_type.py\n+++ b/plone/app/contentrules/tests/test_condition_portal_type.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.conditions.portaltype import PortalTypeCondition\n from plone.app.contentrules.conditions.portaltype import PortalTypeEditFormView\n from plone.app.contentrules.rule import Rule\n@@ -14,7 +13,7 @@\n \n \n @implementer(IObjectEvent)\n-class DummyEvent(object):\n+class DummyEvent:\n     def __init__(self, obj):\n         self.object = obj\n \n@@ -30,7 +29,7 @@ def testRegistered(self):\n     def testInvokeAddView(self):\n         element = getUtility(IRuleCondition, name="plone.conditions.PortalType")\n         storage = getUtility(IRuleStorage)\n-        storage[u"foo"] = Rule()\n+        storage["foo"] = Rule()\n         rule = self.portal.restrictedTraverse("++rule++foo")\n \n         adding = getMultiAdapter((rule, self.portal.REQUEST), name="+condition")\ndiff --git a/plone/app/contentrules/tests/test_condition_role.py b/plone/app/contentrules/tests/test_condition_role.py\nindex 37f44a3..94850ce 100644\n--- a/plone/app/contentrules/tests/test_condition_role.py\n+++ b/plone/app/contentrules/tests/test_condition_role.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.conditions.role import RoleCondition\n from plone.app.contentrules.conditions.role import RoleEditFormView\n from plone.app.contentrules.rule import Rule\n@@ -13,7 +12,7 @@\n \n \n @implementer(IObjectEvent)\n-class DummyEvent(object):\n+class DummyEvent:\n     def __init__(self, obj):\n         self.object = obj\n \n@@ -29,7 +28,7 @@ def testRegistered(self):\n     def testInvokeAddView(self):\n         element = getUtility(IRuleCondition, name="plone.conditions.Role")\n         storage = getUtility(IRuleStorage)\n-        storage[u"foo"] = Rule()\n+        storage["foo"] = Rule()\n         rule = self.portal.restrictedTraverse("++rule++foo")\n \n         adding = getMultiAdapter((rule, self.portal.REQUEST), name="+condition")\ndiff --git a/plone/app/contentrules/tests/test_condition_tales_expression.py b/plone/app/contentrules/tests/test_condition_tales_expression.py\nindex 2487aec..af207c4 100644\n--- a/plone/app/contentrules/tests/test_condition_tales_expression.py\n+++ b/plone/app/contentrules/tests/test_condition_tales_expression.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.conditions.talesexpression import (  # noqa\n     TalesExpressionCondition,\n )\n@@ -17,7 +16,7 @@\n \n \n @implementer(IObjectEvent)\n-class DummyEvent(object):\n+class DummyEvent:\n     def __init__(self, obj):\n         self.object = obj\n \n@@ -32,7 +31,7 @@ def testRegistered(self):\n     def testInvokeAddView(self):\n         element = getUtility(IRuleCondition, name="plone.conditions.TalesExpression")\n         storage = getUtility(IRuleStorage)\n-        storage[u"foo"] = Rule()\n+        storage["foo"] = Rule()\n         rule = self.portal.restrictedTraverse("++rule++foo")\n \n         adding = getMultiAdapter((rule, self.portal.REQUEST), name="+condition")\n@@ -70,6 +69,6 @@ def testExecute(self):\n \n     def testExecuteUnicodeString(self):\n         e = TalesExpressionCondition()\n-        e.tales_expression = u"string:${portal_url}"\n+        e.tales_expression = "string:${portal_url}"\n         ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)\n         self.assertEqual(True, ex())\ndiff --git a/plone/app/contentrules/tests/test_condition_wfstate.py b/plone/app/contentrules/tests/test_condition_wfstate.py\nindex 181b3b7..1970de9 100644\n--- a/plone/app/contentrules/tests/test_condition_wfstate.py\n+++ b/plone/app/contentrules/tests/test_condition_wfstate.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.conditions.wfstate import WorkflowStateCondition\n from plone.app.contentrules.conditions.wfstate import WorkflowStateEditFormView\n from plone.app.contentrules.rule import Rule\n@@ -13,7 +12,7 @@\n \n \n @implementer(IObjectEvent)\n-class DummyEvent(object):\n+class DummyEvent:\n     def __init__(self, obj):\n         self.object = obj\n \n@@ -29,7 +28,7 @@ def testRegistered(self):\n     def testInvokeAddView(self):\n         element = getUtility(IRuleCondition, name="plone.conditions.WorkflowState")\n         storage = getUtility(IRuleStorage)\n-        storage[u"foo"] = Rule()\n+        storage["foo"] = Rule()\n         rule = self.portal.restrictedTraverse("++rule++foo")\n \n         adding = getMultiAdapter((rule, self.portal.REQUEST), name="+condition")\ndiff --git a/plone/app/contentrules/tests/test_condition_wftransition.py b/plone/app/contentrules/tests/test_condition_wftransition.py\nindex ace23fb..d83316d 100644\n--- a/plone/app/contentrules/tests/test_condition_wftransition.py\n+++ b/plone/app/contentrules/tests/test_condition_wftransition.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.conditions.wftransition import (  # noqa\n     WorkflowTransitionCondition,\n )\n@@ -27,7 +26,7 @@ def testRegistered(self):\n     def testInvokeAddView(self):\n         element = getUtility(IRuleCondition, name="plone.conditions.WorkflowTransition")\n         storage = getUtility(IRuleStorage)\n-        storage[u"foo"] = Rule()\n+        storage["foo"] = Rule()\n         rule = self.portal.restrictedTraverse("++rule++foo")\n \n         adding = getMultiAdapter((rule, self.portal.REQUEST), name="+condition")\ndiff --git a/plone/app/contentrules/tests/test_configuration.py b/plone/app/contentrules/tests/test_configuration.py\nindex 630e4da..5e0d50b 100644\n--- a/plone/app/contentrules/tests/test_configuration.py\n+++ b/plone/app/contentrules/tests/test_configuration.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.testing import (  # noqa: E501\n     PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING,\n )\n@@ -48,14 +47,14 @@ def testRulesConfigured(self):\n         self.assertEqual(2, len(rule1.conditions))\n         self.assertEqual("plone.conditions.PortalType", rule1.conditions[0].element)\n         self.assertEqual(\n-            set(["Document", "News Item"]), set(rule1.conditions[0].check_types)\n+            {"Document", "News Item"}, set(rule1.conditions[0].check_types)\n         )\n         self.assertEqual("plone.conditions.Role", rule1.conditions[1].element)\n         self.assertEqual(["Manager"], list(rule1.conditions[1].role_names))\n \n         self.assertEqual(1, len(rule1.actions))\n         self.assertEqual("plone.actions.Notify", rule1.actions[0].element)\n-        self.assertEqual(u"A message: Hej d\\xe5", rule1.actions[0].message)\n+        self.assertEqual("A message: Hej d\\xe5", rule1.actions[0].message)\n         self.assertEqual("info", rule1.actions[0].message_type)\n \n         rule2 = self.storage["test2"]\n@@ -88,7 +87,7 @@ def testRuleAssigned(self):\n \n     def testAssignmentOrdering(self):\n         assignable = IRuleAssignmentManager(self.portal.news)\n-        self.assertEqual(set([u"test3", u"test2", u"test1"]), set(assignable.keys()))\n+        self.assertEqual({"test3", "test2", "test1"}, set(assignable.keys()))\n \n     def testImportTwice(self):\n         # Ensure rules, actions/conditions and assignments are not duplicated\n@@ -108,7 +107,7 @@ def testExport(self):\n         self.maxDiff = None\n         site = self.portal\n         context = TarballExportContext(self.portal.portal_setup)\n-        exporter = getMultiAdapter((site, context), IBody, name=u"plone.contentrules")\n+        exporter = getMultiAdapter((site, context), IBody, name="plone.contentrules")\n \n         body = exporter.body.decode("utf8")\n \n@@ -124,7 +123,7 @@ def testExport(self):\n """,\n         )\n \n-        expected = u"""<?xml version="1.0" encoding="utf-8"?>\n+        expected = """<?xml version="1.0" encoding="utf-8"?>\n <contentrules>\n  <rule name="test1" title="Test rule 1" cascading="False"\n     description="A test rule" enabled="True"\ndiff --git a/plone/app/contentrules/tests/test_events.py b/plone/app/contentrules/tests/test_events.py\nindex d5d8572..374f632 100644\n--- a/plone/app/contentrules/tests/test_events.py\n+++ b/plone/app/contentrules/tests/test_events.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.tests.base import ContentRulesTestCase\n \n \ndiff --git a/plone/app/contentrules/tests/test_handlers.py b/plone/app/contentrules/tests/test_handlers.py\nindex 8de1841..7058b6c 100644\n--- a/plone/app/contentrules/tests/test_handlers.py\n+++ b/plone/app/contentrules/tests/test_handlers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules import handlers\n from plone.app.contentrules.tests import dummy\n from plone.app.contentrules.tests.base import ContentRulesTestCase\n@@ -8,7 +7,7 @@\n \n class TestDuplicateRuleFilter(ContentRulesTestCase):\n     def setUp(self):\n-        super(TestDuplicateRuleFilter, self).setUp()\n+        super().setUp()\n         self.context = self.folder\n         self.event = dummy.DummyEvent(self.context)\n         self.rulefilter = handlers.DuplicateRuleFilter()\ndiff --git a/plone/app/contentrules/tests/test_rule_assignment_mapping.py b/plone/app/contentrules/tests/test_rule_assignment_mapping.py\nindex 8c22f6a..4b62a7c 100644\n--- a/plone/app/contentrules/tests/test_rule_assignment_mapping.py\n+++ b/plone/app/contentrules/tests/test_rule_assignment_mapping.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules import api\n from plone.app.contentrules.rule import get_assignments\n from plone.app.contentrules.rule import insert_assignment\ndiff --git a/plone/app/contentrules/tests/test_rule_management_views.py b/plone/app/contentrules/tests/test_rule_management_views.py\nindex ad26402..f96137f 100644\n--- a/plone/app/contentrules/tests/test_rule_management_views.py\n+++ b/plone/app/contentrules/tests/test_rule_management_views.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .dummy import DummyAction\n from .dummy import DummyCondition\n from plone.app.contentrules.browser.rule import RuleEditFormView\n@@ -55,7 +54,7 @@ def afterSetUp(self):\n \n     def testRuleStopModification(self):\n         storage = getUtility(IRuleStorage)\n-        storage[u"foo"] = Rule()\n+        storage["foo"] = Rule()\n \n         rule = self.portal.restrictedTraverse("++rule++foo")\n         view = rule.restrictedTraverse("manage-elements")\n@@ -71,7 +70,7 @@ def testRuleStopModification(self):\n \n     def testRuleConditionAdding(self):\n         storage = getUtility(IRuleStorage)\n-        storage[u"foo"] = Rule()\n+        storage["foo"] = Rule()\n         rule = self.portal.restrictedTraverse("++rule++foo")\n         adding = getMultiAdapter((rule, self.portal.REQUEST), name="+condition")\n         d = DummyCondition()\n@@ -82,7 +81,7 @@ def testRuleConditionAdding(self):\n \n     def testRuleActionAdding(self):\n         storage = getUtility(IRuleStorage)\n-        storage[u"foo"] = Rule()\n+        storage["foo"] = Rule()\n         rule = self.portal.restrictedTraverse("++rule++foo")\n         adding = getMultiAdapter((rule, self.portal.REQUEST), name="+action")\n         d = DummyAction()\n@@ -94,7 +93,7 @@ def testRuleActionAdding(self):\n     def testRulesControlPanel(self):\n         portal = self.portal\n         storage = getUtility(IRuleStorage)\n-        storage[u"foo"] = DummyModifiedRule()\n+        storage["foo"] = DummyModifiedRule()\n         controlpanel = portal.restrictedTraverse("@@rules-controlpanel")\n         registered_rules = controlpanel.registeredRules()\n         self.assertEqual(1, len(registered_rules))\ndiff --git a/plone/app/contentrules/tests/test_setup.py b/plone/app/contentrules/tests/test_setup.py\nindex 8fc5479..ca4db2f 100644\n--- a/plone/app/contentrules/tests/test_setup.py\n+++ b/plone/app/contentrules/tests/test_setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.tests.base import ContentRulesTestCase\n from plone.contentrules.engine.interfaces import IRuleAssignable\n from plone.contentrules.rule.interfaces import IRuleEventType\ndiff --git a/plone/app/contentrules/tests/test_traversal.py b/plone/app/contentrules/tests/test_traversal.py\nindex 00a6721..ad16a73 100644\n--- a/plone/app/contentrules/tests/test_traversal.py\n+++ b/plone/app/contentrules/tests/test_traversal.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .dummy import DummyAction\n from .dummy import DummyCondition\n from Acquisition import aq_base\n@@ -13,7 +12,7 @@ class TestTraversal(ContentRulesTestCase):\n     def testTraverseToRule(self):\n         r = Rule()\n         storage = getUtility(IRuleStorage)\n-        storage[u"r1"] = r\n+        storage["r1"] = r\n         traversed = self.portal.restrictedTraverse("++rule++r1")\n         self.assertTrue(aq_parent(traversed) is self.portal)\n         self.assertTrue(aq_base(traversed) is r)\n@@ -29,7 +28,7 @@ def testTraverseToRuleCondition(self):\n         r.conditions.append(e1)\n         r.conditions.append(e2)\n         storage = getUtility(IRuleStorage)\n-        storage[u"r1"] = r\n+        storage["r1"] = r\n \n         tr = self.portal.restrictedTraverse("++rule++r1")\n         te1 = tr.restrictedTraverse("++condition++0")\n@@ -52,7 +51,7 @@ def testTraverseToRuleAction(self):\n         r.actions.append(e1)\n         r.actions.append(e2)\n         storage = getUtility(IRuleStorage)\n-        storage[u"r1"] = r\n+        storage["r1"] = r\n \n         tr = self.portal.restrictedTraverse("++rule++r1")\n         te1 = tr.restrictedTraverse("++action++0")\ndiff --git a/plone/app/contentrules/tests/utils.py b/plone/app/contentrules/tests/utils.py\nindex e28157b..deac197 100644\n--- a/plone/app/contentrules/tests/utils.py\n+++ b/plone/app/contentrules/tests/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n import doctest\n \n \ndiff --git a/setup.py b/setup.py\nindex 5b99d9b..94b53d1 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n'

Repository: plone.app.contentrules


Branch: refs/heads/master
Date: 2022-05-01T01:41:35+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentrules/commit/af42deb4dddf817768543b02f89dd8922b04da43

remove six usage

Files changed:
M plone/app/contentrules/actions/mail.py
M plone/app/contentrules/exportimport/rules.py
M setup.py

b'diff --git a/plone/app/contentrules/actions/mail.py b/plone/app/contentrules/actions/mail.py\nindex 3831d1c..5b8efe7 100644\n--- a/plone/app/contentrules/actions/mail.py\n+++ b/plone/app/contentrules/actions/mail.py\n@@ -23,7 +23,6 @@\n from zope.interface.interfaces import ComponentLookupError\n \n import logging\n-import six\n \n \n logger = logging.getLogger("plone.contentrules")\n@@ -128,8 +127,6 @@ def __call__(self):\n                 return False\n \n             from_name = self.mail_settings.email_from_name.strip(\'"\')\n-            if six.PY2 and isinstance(from_name, str):\n-                from_name = from_name.encode("utf8")\n             source = f\'"{from_name}" <{from_address}>\'\n \n         recip_string = interpolator(self.element.recipients)\ndiff --git a/plone/app/contentrules/exportimport/rules.py b/plone/app/contentrules/exportimport/rules.py\nindex c42d3c2..c34ac83 100644\n--- a/plone/app/contentrules/exportimport/rules.py\n+++ b/plone/app/contentrules/exportimport/rules.py\n@@ -1,7 +1,7 @@\n from Acquisition import aq_base\n from lxml import etree\n from plone.app.contentrules import api\n-from plone.app.contentrules.exportimport.interfaces import (  # noqa\n+from plone.app.contentrules.exportimport.interfaces import (\n     IRuleElementExportImportHandler,\n )\n from plone.app.contentrules.rule import get_assignments\n@@ -32,8 +32,6 @@\n from zope.schema.interfaces import IField\n from zope.schema.interfaces import IFromUnicode\n \n-import six\n-\n \n def as_bool(string, default=False):\n     if string is None or not str(string):\ndiff --git a/setup.py b/setup.py\nindex 94b53d1..50f3072 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -35,7 +35,6 @@\n     extras_require={"test": ["plone.app.testing", "plone.app.contenttypes[test]"]},\n     install_requires=[\n         "setuptools",\n-        "six",\n         "plone.contentrules",\n         "plone.memoize",\n         "plone.stringinterp",\n'

Repository: plone.app.contentrules


Branch: refs/heads/master
Date: 2022-05-01T02:07:36+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentrules/commit/1308db7e9bdf301ae6dcde16cd576fe7c0afeedb

use plone.base and get rid of Archetypes code

Files changed:
M plone/app/contentrules/actions/copy.py
M plone/app/contentrules/actions/delete.py
M plone/app/contentrules/actions/mail.py
M plone/app/contentrules/actions/move.py
M plone/app/contentrules/actions/workflow.py
M plone/app/contentrules/browser/configure.zcml
M plone/app/contentrules/browser/rule.py
M plone/app/contentrules/conditions/fileextension.py
M plone/app/contentrules/configure.zcml
M plone/app/contentrules/tests/test_action_mail.py
M plone/app/contentrules/tests/test_handlers.py

b'diff --git a/plone/app/contentrules/actions/copy.py b/plone/app/contentrules/actions/copy.py\nindex eff4972..8f00f62 100644\n--- a/plone/app/contentrules/actions/copy.py\n+++ b/plone/app/contentrules/actions/copy.py\n@@ -6,10 +6,10 @@\n from plone.app.contentrules.actions import ActionEditForm\n from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper\n from plone.app.vocabularies.catalog import CatalogSource\n+from plone.base.utils import pretty_title_or_id\n from plone.contentrules.rule.interfaces import IExecutable\n from plone.contentrules.rule.interfaces import IRuleElementData\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import utils\n from Products.statusmessages.interfaces import IStatusMessage\n from ZODB.POSException import ConflictError\n from zope import schema\n@@ -112,7 +112,7 @@ def __call__(self):\n     def error(self, obj, error):\n         request = getattr(self.context, "REQUEST", None)\n         if request is not None:\n-            title = utils.pretty_title_or_id(obj, obj)\n+            title = pretty_title_or_id(obj, obj)\n             message = _(\n                 "Unable to copy ${name} as part of content rule "\n                 "\'copy\' action: ${error}",\ndiff --git a/plone/app/contentrules/actions/delete.py b/plone/app/contentrules/actions/delete.py\nindex 6468cd9..25c8ec9 100644\n--- a/plone/app/contentrules/actions/delete.py\n+++ b/plone/app/contentrules/actions/delete.py\n@@ -3,9 +3,9 @@\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.browser.formhelper import NullAddForm\n+from plone.base.utils import pretty_title_or_id\n from plone.contentrules.rule.interfaces import IExecutable\n from plone.contentrules.rule.interfaces import IRuleElementData\n-from Products.CMFPlone import utils\n from Products.statusmessages.interfaces import IStatusMessage\n from ZODB.POSException import ConflictError\n from zope.component import adapter\n@@ -56,7 +56,7 @@ def __call__(self):\n     def error(self, obj, error):\n         request = getattr(self.context, "REQUEST", None)\n         if request is not None:\n-            title = utils.pretty_title_or_id(obj, obj)\n+            title = pretty_title_or_id(obj, obj)\n             message = _(\n                 "Unable to remove ${name} as part of content rule \'delete\' action: ${error}",  # noqa\n                 mapping={"name": title, "error": error},\ndiff --git a/plone/app/contentrules/actions/mail.py b/plone/app/contentrules/actions/mail.py\nindex 5b8efe7..92211f5 100644\n--- a/plone/app/contentrules/actions/mail.py\n+++ b/plone/app/contentrules/actions/mail.py\n@@ -4,12 +4,12 @@\n from plone.app.contentrules.actions import ActionAddForm\n from plone.app.contentrules.actions import ActionEditForm\n from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper\n+from plone.base.interfaces.controlpanel import IMailSchema\n from plone.contentrules.rule.interfaces import IExecutable\n from plone.contentrules.rule.interfaces import IRuleElementData\n from plone.registry.interfaces import IRegistry\n from plone.stringinterp.interfaces import IStringInterpolator\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.MailHost.MailHost import MailHostError\n from Products.statusmessages.interfaces import IStatusMessage\ndiff --git a/plone/app/contentrules/actions/move.py b/plone/app/contentrules/actions/move.py\nindex 0a99bf0..ae54d72 100644\n--- a/plone/app/contentrules/actions/move.py\n+++ b/plone/app/contentrules/actions/move.py\n@@ -9,10 +9,10 @@\n from plone.app.contentrules.actions import ActionEditForm\n from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper\n from plone.app.vocabularies.catalog import CatalogSource\n+from plone.base.utils import pretty_title_or_id\n from plone.contentrules.rule.interfaces import IExecutable\n from plone.contentrules.rule.interfaces import IRuleElementData\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import utils\n from Products.statusmessages.interfaces import IStatusMessage\n from ZODB.POSException import ConflictError\n from zope import schema\n@@ -131,7 +131,7 @@ def __call__(self):\n     def error(self, obj, error):\n         request = getattr(self.context, "REQUEST", None)\n         if request is not None:\n-            title = utils.pretty_title_or_id(obj, obj)\n+            title = pretty_title_or_id(obj, obj)\n             message = _(\n                 "Unable to move ${name} as part of content rule "\n                 "\'move\' action: ${error}",\ndiff --git a/plone/app/contentrules/actions/workflow.py b/plone/app/contentrules/actions/workflow.py\nindex a69a8d2..211e42a 100644\n--- a/plone/app/contentrules/actions/workflow.py\n+++ b/plone/app/contentrules/actions/workflow.py\n@@ -3,10 +3,11 @@\n from plone.app.contentrules.actions import ActionAddForm\n from plone.app.contentrules.actions import ActionEditForm\n from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper\n+from plone.base.utils import pretty_title_or_id\n+from plone.base.utils import safe_text\n from plone.contentrules.rule.interfaces import IExecutable\n from plone.contentrules.rule.interfaces import IRuleElementData\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import utils\n from Products.statusmessages.interfaces import IStatusMessage\n from ZODB.POSException import ConflictError\n from zope import schema\n@@ -74,8 +75,8 @@ def __call__(self):\n     def error(self, obj, error):\n         request = getattr(self.context, "REQUEST", None)\n         if request is not None:\n-            title = utils.safe_unicode(utils.pretty_title_or_id(obj, obj))\n-            error = utils.safe_unicode(error)\n+            title = safe_text(pretty_title_or_id(obj, obj))\n+            error = safe_text(error)\n             message = _(\n                 "Unable to change state of ${name} as part of content rule \'workflow\' action: ${error}",  # noqa\n                 mapping={"name": title, "error": error},\ndiff --git a/plone/app/contentrules/browser/configure.zcml b/plone/app/contentrules/browser/configure.zcml\nindex a97da0b..3f59775 100644\n--- a/plone/app/contentrules/browser/configure.zcml\n+++ b/plone/app/contentrules/browser/configure.zcml\n@@ -94,7 +94,7 @@\n       />\n \n     <browser:page\n-      for="Products.CMFPlone.interfaces.siteroot.IPloneSiteRoot"\n+      for="plone.base.interfaces.siteroot.IPloneSiteRoot"\n       name="contentrule-enable"\n       class=".controlpanel.ContentRulesControlPanel"\n       attribute="enable_rule"\n@@ -102,7 +102,7 @@\n     />\n \n     <browser:page\n-      for="Products.CMFPlone.interfaces.siteroot.IPloneSiteRoot"\n+      for="plone.base.interfaces.siteroot.IPloneSiteRoot"\n       name="contentrule-disable"\n       class=".controlpanel.ContentRulesControlPanel"\n       attribute="disable_rule"\n@@ -110,7 +110,7 @@\n     />\n \n     <browser:page\n-      for="Products.CMFPlone.interfaces.siteroot.IPloneSiteRoot"\n+      for="plone.base.interfaces.siteroot.IPloneSiteRoot"\n       name="contentrule-delete"\n       class=".controlpanel.ContentRulesControlPanel"\n       attribute="delete_rule"\n@@ -118,7 +118,7 @@\n     />\n \n     <browser:page\n-      for="Products.CMFPlone.interfaces.siteroot.IPloneSiteRoot"\n+      for="plone.base.interfaces.siteroot.IPloneSiteRoot"\n       name="contentrule-globally-enable"\n       class=".controlpanel.ContentRulesControlPanel"\n       attribute="globally_enable"\n@@ -126,7 +126,7 @@\n     />\n \n     <browser:page\n-      for="Products.CMFPlone.interfaces.siteroot.IPloneSiteRoot"\n+      for="plone.base.interfaces.siteroot.IPloneSiteRoot"\n       name="contentrule-globally-disable"\n       class=".controlpanel.ContentRulesControlPanel"\n       attribute="globally_disable"\ndiff --git a/plone/app/contentrules/browser/rule.py b/plone/app/contentrules/browser/rule.py\nindex 3ce42ed..caaa6f1 100644\n--- a/plone/app/contentrules/browser/rule.py\n+++ b/plone/app/contentrules/browser/rule.py\n@@ -5,8 +5,8 @@\n from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper\n from plone.app.contentrules.browser.formhelper import EditForm\n from plone.app.contentrules.rule import Rule\n+from plone.base.utils import base_hasattr\n from plone.contentrules.rule.interfaces import IRuleConfiguration\n-from Products.CMFPlone.utils import base_hasattr\n from z3c.form.form import applyChanges\n from zope.component import getMultiAdapter\n \ndiff --git a/plone/app/contentrules/conditions/fileextension.py b/plone/app/contentrules/conditions/fileextension.py\nindex 6627240..81f7356 100644\n--- a/plone/app/contentrules/conditions/fileextension.py\n+++ b/plone/app/contentrules/conditions/fileextension.py\n@@ -13,12 +13,6 @@\n from zope.interface import Interface\n \n \n-try:\n-    from Products.ATContentTypes.interfaces import IFileContent\n-except ImportError:\n-    IFileContent = None\n-\n-\n class IFileExtensionCondition(Interface):\n     """Interface for the configurable aspects of a portal type condition.\n \n@@ -66,10 +60,6 @@ def __call__(self):\n         if IFile.providedBy(obj):\n             base_unit = getattr(obj, "file", None)\n             name = getattr(base_unit, "filename", None)\n-        elif IFileContent is None:\n-            return False\n-        elif not IFileContent.providedBy(obj):\n-            return False\n         else:\n             base_unit = obj.getFile()\n             get_filename = getattr(base_unit, "getFilename", None)\ndiff --git a/plone/app/contentrules/configure.zcml b/plone/app/contentrules/configure.zcml\nindex 1262ffc..eca3cbe 100644\n--- a/plone/app/contentrules/configure.zcml\n+++ b/plone/app/contentrules/configure.zcml\n@@ -27,18 +27,6 @@\n         <implements interface="plone.contentrules.engine.interfaces.IRuleAssignable" />\n     </class>\n \n-    <configure zcml:condition="installed Products.ATContentTypes">\n-\n-      <class class="Products.ATContentTypes.content.folder.ATFolder">\n-          <implements interface="plone.contentrules.engine.interfaces.IRuleAssignable" />\n-      </class>\n-\n-      <class class="Products.ATContentTypes.content.folder.ATBTreeFolder">\n-          <implements interface="plone.contentrules.engine.interfaces.IRuleAssignable" />\n-      </class>\n-\n-    </configure>\n-\n     <!-- Let rules be annotatable - used to keep track of rule-to-assignment mappings -->\n \n     <class class="plone.app.contentrules.rule.Rule">\ndiff --git a/plone/app/contentrules/tests/test_action_mail.py b/plone/app/contentrules/tests/test_action_mail.py\nindex 32c83d3..f42ec2f 100644\n--- a/plone/app/contentrules/tests/test_action_mail.py\n+++ b/plone/app/contentrules/tests/test_action_mail.py\n@@ -1,4 +1,5 @@\n from Acquisition import aq_base\n+from email import message_from_bytes\n from plone.app.contentrules.actions.mail import MailAction\n from plone.app.contentrules.actions.mail import MailAddFormView\n from plone.app.contentrules.actions.mail import MailEditFormView\n@@ -6,12 +7,11 @@\n from plone.app.contentrules.tests.base import ContentRulesTestCase\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.base.interfaces.controlpanel import IMailSchema\n from plone.contentrules.engine.interfaces import IRuleStorage\n from plone.contentrules.rule.interfaces import IExecutable\n from plone.contentrules.rule.interfaces import IRuleAction\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n-from Products.CMFPlone.tests.utils import MockMailHost\n from Products.MailHost.interfaces import IMailHost\n from zope.component import getMultiAdapter\n from zope.component import getSiteManager\n@@ -22,14 +22,6 @@\n import unittest\n \n \n-try:\n-    # Python 3\n-    from email import message_from_bytes\n-except ImportError:\n-    # Python 2\n-    from email import message_from_string as message_from_bytes\n-\n-\n @implementer(IObjectEvent)\n class DummyEvent:\n     def __init__(self, object):\ndiff --git a/plone/app/contentrules/tests/test_handlers.py b/plone/app/contentrules/tests/test_handlers.py\nindex 7058b6c..678d9bc 100644\n--- a/plone/app/contentrules/tests/test_handlers.py\n+++ b/plone/app/contentrules/tests/test_handlers.py\n@@ -36,21 +36,3 @@ def test_call_uuidaware(self):\n         self.assertTrue(to_execute)\n         to_execute = self.rulefilter(self.uuidaware, self.rule, self.event)\n         self.assertTrue(not to_execute)\n-\n-    def test_delayed_events(self):\n-        # many events can be delayed\n-        # But this was only true for Archetypes content.\n-        # The tests no use dexterity so we skip it:\n-        return\n-\n-        self.portal.invokeFactory("Folder", "folder2")\n-        event1 = dummy.DummyEvent(self.folder)\n-        event2 = dummy.DummyEvent(self.portal.folder2)\n-        from plone.app.contentrules.handlers import _status\n-\n-        _status.delayed_events = {}\n-        handlers.added(event1)\n-        handlers.added(event2)\n-        from plone.app.contentrules.handlers import _status\n-\n-        self.assertEqual(len(_status.delayed_events), 2)\n'

Repository: plone.app.contentrules


Branch: refs/heads/master
Date: 2022-05-01T02:09:37+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentrules/commit/5a55db2136f7ac2a7fc1ff25ffea14bae634da9b

add newsfile

Files changed:
A news/71.breaking

b'diff --git a/news/71.breaking b/news/71.breaking\nnew file mode 100644\nindex 0000000..e600182\n--- /dev/null\n+++ b/news/71.breaking\n@@ -0,0 +1,2 @@\n+Code style, use plone.base and remove Archetypes bbb code.\n+[jensens]\n'

Repository: plone.app.contentrules


Branch: refs/heads/master
Date: 2022-05-03T15:07:17+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contentrules/commit/a32472996b095c59682bf210c6cbc5ca533d777f

Merge pull request #71 from plone/plone-base-overhaul

Plone base overhaul

Files changed:
A news/71.breaking
M bootstrap.py
M plone/__init__.py
M plone/app/__init__.py
M plone/app/contentrules/__init__.py
M plone/app/contentrules/actions/__init__.py
M plone/app/contentrules/actions/copy.py
M plone/app/contentrules/actions/delete.py
M plone/app/contentrules/actions/logger.py
M plone/app/contentrules/actions/mail.py
M plone/app/contentrules/actions/move.py
M plone/app/contentrules/actions/notify.py
M plone/app/contentrules/actions/versioning.py
M plone/app/contentrules/actions/workflow.py
M plone/app/contentrules/api.py
M plone/app/contentrules/browser/__init__.py
M plone/app/contentrules/browser/adding.py
M plone/app/contentrules/browser/assignments.py
M plone/app/contentrules/browser/configure.zcml
M plone/app/contentrules/browser/controlpanel.py
M plone/app/contentrules/browser/elements.py
M plone/app/contentrules/browser/formhelper.py
M plone/app/contentrules/browser/info.py
M plone/app/contentrules/browser/interfaces.py
M plone/app/contentrules/browser/navigation.py
M plone/app/contentrules/browser/rule.py
M plone/app/contentrules/browser/traversal.py
M plone/app/contentrules/conditions/__init__.py
M plone/app/contentrules/conditions/fileextension.py
M plone/app/contentrules/conditions/group.py
M plone/app/contentrules/conditions/portaltype.py
M plone/app/contentrules/conditions/role.py
M plone/app/contentrules/conditions/talesexpression.py
M plone/app/contentrules/conditions/wfstate.py
M plone/app/contentrules/conditions/wftransition.py
M plone/app/contentrules/configure.zcml
M plone/app/contentrules/exportimport/__init__.py
M plone/app/contentrules/exportimport/interfaces.py
M plone/app/contentrules/exportimport/rules.py
M plone/app/contentrules/handlers.py
M plone/app/contentrules/namechooser.py
M plone/app/contentrules/rule.py
M plone/app/contentrules/testing.py
M plone/app/contentrules/tests/base.py
M plone/app/contentrules/tests/dummy.py
M plone/app/contentrules/tests/test_action_copy.py
M plone/app/contentrules/tests/test_action_delete.py
M plone/app/contentrules/tests/test_action_logger.py
M plone/app/contentrules/tests/test_action_mail.py
M plone/app/contentrules/tests/test_action_modify.py
M plone/app/contentrules/tests/test_action_move.py
M plone/app/contentrules/tests/test_action_notify.py
M plone/app/contentrules/tests/test_action_versioning.py
M plone/app/contentrules/tests/test_action_workflow.py
M plone/app/contentrules/tests/test_browser.py
M plone/app/contentrules/tests/test_cascading_rule.py
M plone/app/contentrules/tests/test_condition_group.py
M plone/app/contentrules/tests/test_condition_portal_type.py
M plone/app/contentrules/tests/test_condition_role.py
M plone/app/contentrules/tests/test_condition_tales_expression.py
M plone/app/contentrules/tests/test_condition_wfstate.py
M plone/app/contentrules/tests/test_condition_wftransition.py
M plone/app/contentrules/tests/test_configuration.py
M plone/app/contentrules/tests/test_events.py
M plone/app/contentrules/tests/test_handlers.py
M plone/app/contentrules/tests/test_rule_assignment_mapping.py
M plone/app/contentrules/tests/test_rule_management_views.py
M plone/app/contentrules/tests/test_setup.py
M plone/app/contentrules/tests/test_traversal.py
M plone/app/contentrules/tests/utils.py
M setup.cfg
M setup.py

b'diff --git a/bootstrap.py b/bootstrap.py\nindex ed57894..f9cd227 100644\n--- a/bootstrap.py\n+++ b/bootstrap.py\n@@ -18,16 +18,17 @@\n use the -c option to specify an alternate configuration file.\n """\n \n+from optparse import OptionParser\n+\n import os\n import shutil\n import sys\n import tempfile\n \n-from optparse import OptionParser\n \n tmpeggs = tempfile.mkdtemp()\n \n-usage = \'\'\'\\\n+usage = """\\\n [DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n \n Bootstraps a buildout-based project.\n@@ -37,28 +38,40 @@\n \n Note that by using --find-links to point to local resources, you can keep \n this script from going over the network.\n-\'\'\'\n+"""\n \n parser = OptionParser(usage=usage)\n parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n \n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n+parser.add_option(\n+    "-t",\n+    "--accept-buildout-test-releases",\n+    dest="accept_buildout_test_releases",\n+    action="store_true",\n+    default=False,\n+    help=(\n+        "Normally, if you do not specify a --version, the "\n+        "bootstrap script and buildout gets the newest "\n+        "*final* versions of zc.buildout and its recipes and "\n+        "extensions for you.  If you use this flag, "\n+        "bootstrap and buildout will get the newest releases "\n+        "even if they are alphas or betas."\n+    ),\n+)\n+parser.add_option(\n+    "-c",\n+    "--config-file",\n+    help=("Specify the path to the buildout configuration " "file to be used."),\n+)\n+parser.add_option(\n+    "-f", "--find-links", help=("Specify a URL to search for buildout releases")\n+)\n+parser.add_option(\n+    "--allow-site-packages",\n+    action="store_true",\n+    default=False,\n+    help=("Let bootstrap.py use existing site packages"),\n+)\n \n \n options, args = parser.parse_args()\n@@ -75,23 +88,25 @@\n     from urllib2 import urlopen\n \n ez = {}\n-exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n+exec(urlopen("https://bootstrap.pypa.io/ez_setup.py").read(), ez)\n \n if not options.allow_site_packages:\n     # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions \n+    # this will remove them from the path to ensure that incompatible versions\n     # of setuptools are not in the path\n     import site\n-    # inside a virtualenv, there is no \'getsitepackages\'. \n+\n+    # inside a virtualenv, there is no \'getsitepackages\'.\n     # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n+    if hasattr(site, "getsitepackages"):\n         for sitepackage_path in site.getsitepackages():\n             sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n \n setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n+ez["use_setuptools"](**setup_args)\n import pkg_resources\n+import setuptools\n+\n \n # This does not (always?) update the default working set.  We will\n # do it.\n@@ -104,36 +119,43 @@\n \n ws = pkg_resources.working_set\n \n-cmd = [sys.executable, \'-c\',\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n+cmd = [\n+    sys.executable,\n+    "-c",\n+    "from setuptools.command.easy_install import main; main()",\n+    "-mZqNxd",\n+    tmpeggs,\n+]\n \n find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n+    "bootstrap-testing-find-links",\n+    options.find_links\n+    or (\n+        "http://downloads.buildout.org/"\n+        if options.accept_buildout_test_releases\n+        else None\n+    ),\n+)\n if find_links:\n-    cmd.extend([\'-f\', find_links])\n+    cmd.extend(["-f", find_links])\n \n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n+setuptools_path = ws.find(pkg_resources.Requirement.parse("setuptools")).location\n \n-requirement = \'zc.buildout\'\n+requirement = "zc.buildout"\n version = options.version\n if version is None and not options.accept_buildout_test_releases:\n     # Figure out the most recent final version of zc.buildout.\n     import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n+\n+    _final_parts = "*final-", "*final"\n \n     def _final_version(parsed_version):\n         for part in parsed_version:\n-            if (part[:1] == \'*\') and (part not in _final_parts):\n+            if (part[:1] == "*") and (part not in _final_parts):\n                 return False\n         return True\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n+\n+    index = setuptools.package_index.PackageIndex(search_path=[setuptools_path])\n     if find_links:\n         index.add_find_links((find_links,))\n     req = pkg_resources.Requirement.parse(requirement)\n@@ -152,13 +174,14 @@ def _final_version(parsed_version):\n             best.sort()\n             version = best[-1].version\n if version:\n-    requirement = \'==\'.join((requirement, version))\n+    requirement = "==".join((requirement, version))\n cmd.append(requirement)\n \n import subprocess\n+\n+\n if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n+    raise Exception("Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n \n ######################################################################\n # Import and run buildout\n@@ -167,12 +190,13 @@ def _final_version(parsed_version):\n ws.require(requirement)\n import zc.buildout.buildout\n \n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n+\n+if not [a for a in args if "=" not in a]:\n+    args.append("bootstrap")\n \n # if -c was provided, we push it back into args for buildout\' main function\n if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n+    args[0:0] = ["-c", options.config_file]\n \n zc.buildout.buildout.main(args)\n shutil.rmtree(tmpeggs)\ndiff --git a/news/71.breaking b/news/71.breaking\nnew file mode 100644\nindex 0000000..e600182\n--- /dev/null\n+++ b/news/71.breaking\n@@ -0,0 +1,2 @@\n+Code style, use plone.base and remove Archetypes bbb code.\n+[jensens]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/contentrules/__init__.py b/plone/app/contentrules/__init__.py\nindex 056463f..8543404 100644\n--- a/plone/app/contentrules/__init__.py\n+++ b/plone/app/contentrules/__init__.py\n@@ -1,6 +1,5 @@\n-# -*- coding: utf-8 -*-\n # Import PloneMessageFactory to create messages in the plone domain\n from zope.i18nmessageid import MessageFactory\n \n \n-PloneMessageFactory = MessageFactory(\'plone\')\n+PloneMessageFactory = MessageFactory("plone")\ndiff --git a/plone/app/contentrules/actions/__init__.py b/plone/app/contentrules/actions/__init__.py\nindex 9089cfe..7693358 100644\n--- a/plone/app/contentrules/actions/__init__.py\n+++ b/plone/app/contentrules/actions/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.browser.formhelper import AddForm\n from plone.app.contentrules.browser.formhelper import EditForm\n from plone.app.uuid.utils import uuidToPhysicalPath\n@@ -9,33 +8,33 @@\n import os\n \n \n-class ContentWrapper(object):\n+class ContentWrapper:\n     """\n     The sole purpose of this is to transform target_folder\n     values from UUID to path, which all of content rules expects\n     """\n \n     def __init__(self, content):\n-        self.__dict__[\'content\'] = content\n+        self.__dict__["content"] = content\n \n     @property\n     def target_folder(self):\n         content = self.content\n \n-        if content.target_folder and content.target_folder[0] == \'/\':\n+        if content.target_folder and content.target_folder[0] == "/":\n             # need to convert to uuid\n             site = getSite()\n-            site_path = \'/\'.join(site.getPhysicalPath())\n-            path = os.path.join(site_path, content.target_folder.lstrip(\'/\'))\n+            site_path = "/".join(site.getPhysicalPath())\n+            path = os.path.join(site_path, content.target_folder.lstrip("/"))\n             target = site.restrictedTraverse(path, None)\n             if target is not None:\n                 return IUUID(target, None)\n \n     def __getattr__(self, name, default=None):\n-        return getattr(self.__dict__[\'content\'], name, default)\n+        return getattr(self.__dict__["content"], name, default)\n \n     def __setattr__(self, name, value):\n-        setattr(self.__dict__[\'content\'], name, value)\n+        setattr(self.__dict__["content"], name, value)\n \n \n class ActionAddForm(AddForm):\n@@ -47,17 +46,16 @@ def create(self, data):\n         is what the z3c form widget uses, to paths.\n         """\n         a = self.Type()\n-        if data.get(\'target_folder\', None):\n+        if data.get("target_folder", None):\n             site = getSite()\n-            site_path = \'/\'.join(site.getPhysicalPath())\n-            path = uuidToPhysicalPath(data[\'target_folder\'])\n+            site_path = "/".join(site.getPhysicalPath())\n+            path = uuidToPhysicalPath(data["target_folder"])\n             if path:\n-                data[\'target_folder\'] = path[len(site_path):]\n+                data["target_folder"] = path[len(site_path) :]\n         form.applyChanges(self, a, data)\n         return a\n \n \n class ActionEditForm(EditForm):\n-\n     def getContent(self):\n-        return ContentWrapper(super(ActionEditForm, self).getContent())\n+        return ContentWrapper(super().getContent())\ndiff --git a/plone/app/contentrules/actions/copy.py b/plone/app/contentrules/actions/copy.py\nindex 4157a09..8f00f62 100644\n--- a/plone/app/contentrules/actions/copy.py\n+++ b/plone/app/contentrules/actions/copy.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from OFS.event import ObjectClonedEvent\n from OFS.SimpleItem import SimpleItem\n@@ -7,10 +6,10 @@\n from plone.app.contentrules.actions import ActionEditForm\n from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper\n from plone.app.vocabularies.catalog import CatalogSource\n+from plone.base.utils import pretty_title_or_id\n from plone.contentrules.rule.interfaces import IExecutable\n from plone.contentrules.rule.interfaces import IRuleElementData\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import utils\n from Products.statusmessages.interfaces import IStatusMessage\n from ZODB.POSException import ConflictError\n from zope import schema\n@@ -30,8 +29,8 @@ class ICopyAction(Interface):\n     """\n \n     target_folder = schema.Choice(\n-        title=_(u\'Target folder\'),\n-        description=_(u\'As a path relative to the portal root.\'),\n+        title=_("Target folder"),\n+        description=_("As a path relative to the portal root."),\n         required=True,\n         source=CatalogSource(is_folderish=True),\n     )\n@@ -39,23 +38,20 @@ class ICopyAction(Interface):\n \n @implementer(ICopyAction, IRuleElementData)\n class CopyAction(SimpleItem):\n-    """The actual persistent implementation of the action element.\n-    """\n+    """The actual persistent implementation of the action element."""\n \n-    target_folder = \'\'\n-    element = \'plone.actions.Copy\'\n+    target_folder = ""\n+    element = "plone.actions.Copy"\n \n     @property\n     def summary(self):\n-        return _(u\'Copy to folder ${folder}.\',\n-                 mapping=dict(folder=self.target_folder))\n+        return _("Copy to folder ${folder}.", mapping=dict(folder=self.target_folder))\n \n \n @adapter(Interface, ICopyAction, Interface)\n @implementer(IExecutable)\n-class CopyActionExecutor(object):\n-    """The executor for this action.\n-    """\n+class CopyActionExecutor:\n+    """The executor for this action."""\n \n     def __init__(self, context, element, event):\n         self.context = context\n@@ -63,14 +59,14 @@ def __init__(self, context, element, event):\n         self.event = event\n \n     def __call__(self):\n-        portal_url = getToolByName(self.context, \'portal_url\', None)\n+        portal_url = getToolByName(self.context, "portal_url", None)\n         if portal_url is None:\n             return False\n \n         obj = self.event.object\n \n         path = self.element.target_folder\n-        if len(path) > 1 and path[0] == \'/\':\n+        if len(path) > 1 and path[0] == "/":\n             path = path[1:]\n         target = portal_url.getPortalObject().unrestrictedTraverse(\n             str(path),\n@@ -80,10 +76,7 @@ def __call__(self):\n         if target is None:\n             self.error(\n                 obj,\n-                _(\n-                    u\'Target folder ${target} does not exist.\',\n-                    mapping={\'target\': path}\n-                )\n+                _("Target folder ${target} does not exist.", mapping={"target": path}),\n             )\n             return False\n \n@@ -110,43 +103,45 @@ def __call__(self):\n \n         obj._postCopy(target, op=0)\n \n-        OFS.subscribers.compatibilityCall(\'manage_afterClone\', obj, obj)\n+        OFS.subscribers.compatibilityCall("manage_afterClone", obj, obj)\n \n         notify(ObjectClonedEvent(obj))\n \n         return True\n \n     def error(self, obj, error):\n-        request = getattr(self.context, \'REQUEST\', None)\n+        request = getattr(self.context, "REQUEST", None)\n         if request is not None:\n-            title = utils.pretty_title_or_id(obj, obj)\n+            title = pretty_title_or_id(obj, obj)\n             message = _(\n-                u\'Unable to copy ${name} as part of content rule \'\n-                u"\'copy\' action: ${error}",\n-                mapping={\'name\': title, \'error\': error}\n+                "Unable to copy ${name} as part of content rule "\n+                "\'copy\' action: ${error}",\n+                mapping={"name": title, "error": error},\n             )\n-            IStatusMessage(request).addStatusMessage(message, type=\'error\')\n+            IStatusMessage(request).addStatusMessage(message, type="error")\n \n     def generate_id(self, target, old_id):\n-        taken = getattr(aq_base(target), \'has_key\', None)\n+        taken = getattr(aq_base(target), "has_key", None)\n         if taken is None:\n             item_ids = set(target.objectIds())\n \n-            def taken(x): return x in item_ids\n+            def taken(x):\n+                return x in item_ids\n+\n         if not taken(old_id):\n             return old_id\n         idx = 1\n-        while taken(\'{0}.{1}\'.format(old_id, idx)):\n+        while taken(f"{old_id}.{idx}"):\n             idx += 1\n-        return \'{0}.{1}\'.format(old_id, idx)\n+        return f"{old_id}.{idx}"\n \n \n class CopyAddForm(ActionAddForm):\n-    """An add form for move-to-folder actions.\n-    """\n+    """An add form for move-to-folder actions."""\n+\n     schema = ICopyAction\n-    label = _(u\'Add Copy Action\')\n-    description = _(u\'A copy action can copy an object to a different folder.\')\n+    label = _("Add Copy Action")\n+    description = _("A copy action can copy an object to a different folder.")\n     Type = CopyAction\n \n \n@@ -159,10 +154,11 @@ class CopyEditForm(ActionEditForm):\n \n     z3c.form does all the magic here.\n     """\n+\n     schema = ICopyAction\n-    label = _(u\'Edit Copy Action\')\n-    description = _(u\'A copy action can copy an object to a different folder.\')\n-    form_name = _(u\'Configure element\')\n+    label = _("Edit Copy Action")\n+    description = _("A copy action can copy an object to a different folder.")\n+    form_name = _("Configure element")\n \n \n class CopyEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/actions/delete.py b/plone/app/contentrules/actions/delete.py\nindex 4193b5b..25c8ec9 100644\n--- a/plone/app/contentrules/actions/delete.py\n+++ b/plone/app/contentrules/actions/delete.py\n@@ -1,12 +1,11 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.browser.formhelper import NullAddForm\n+from plone.base.utils import pretty_title_or_id\n from plone.contentrules.rule.interfaces import IExecutable\n from plone.contentrules.rule.interfaces import IRuleElementData\n-from Products.CMFPlone import utils\n from Products.statusmessages.interfaces import IStatusMessage\n from ZODB.POSException import ConflictError\n from zope.component import adapter\n@@ -17,24 +16,21 @@\n \n \n class IDeleteAction(Interface):\n-    """Interface for the configurable aspects of a delete action.\n-    """\n+    """Interface for the configurable aspects of a delete action."""\n \n \n @implementer(IDeleteAction, IRuleElementData)\n class DeleteAction(SimpleItem):\n-    """The actual persistent implementation of the action element.\n-    """\n+    """The actual persistent implementation of the action element."""\n \n-    element = \'plone.actions.Delete\'\n-    summary = _(u\'Delete object\')\n+    element = "plone.actions.Delete"\n+    summary = _("Delete object")\n \n \n @adapter(Interface, IDeleteAction, Interface)\n @implementer(IExecutable)\n-class DeleteActionExecutor(object):\n-    """The executor for this action.\n-    """\n+class DeleteActionExecutor:\n+    """The executor for this action."""\n \n     def __init__(self, context, element, event):\n         self.context = context\n@@ -58,17 +54,18 @@ def __call__(self):\n         return True\n \n     def error(self, obj, error):\n-        request = getattr(self.context, \'REQUEST\', None)\n+        request = getattr(self.context, "REQUEST", None)\n         if request is not None:\n-            title = utils.pretty_title_or_id(obj, obj)\n-            message = _(u"Unable to remove ${name} as part of content rule \'delete\' action: ${error}",  # noqa\n-                          mapping={\'name\': title, \'error\': error})\n-            IStatusMessage(request).addStatusMessage(message, type=\'error\')\n+            title = pretty_title_or_id(obj, obj)\n+            message = _(\n+                "Unable to remove ${name} as part of content rule \'delete\' action: ${error}",  # noqa\n+                mapping={"name": title, "error": error},\n+            )\n+            IStatusMessage(request).addStatusMessage(message, type="error")\n \n \n class DeleteAddForm(NullAddForm):\n-    """A degenerate "add form" for delete actions.\n-    """\n+    """A degenerate "add form" for delete actions."""\n \n     def create(self):\n         return DeleteAction()\ndiff --git a/plone/app/contentrules/actions/logger.py b/plone/app/contentrules/actions/logger.py\nindex dc23218..d52d70b 100644\n--- a/plone/app/contentrules/actions/logger.py\n+++ b/plone/app/contentrules/actions/logger.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.actions import ActionAddForm\n@@ -9,18 +8,16 @@\n from Products.CMFCore.utils import getToolByName\n from zope import schema\n from zope.component import adapter\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n from zope.interface import Interface\n+from zope.interface.interfaces import IObjectEvent\n \n import logging\n \n \n-logger = logging.getLogger(\'plone.contentrules.logger\')\n+logger = logging.getLogger("plone.contentrules.logger")\n handler = logging.StreamHandler()\n-formatter = logging.Formatter(\n-    \'%(asctime)s - %(name)s - %(levelname)s -  %(message)s\'\n-)\n+formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s -  %(message)s")\n handler.setFormatter(formatter)\n logger.addHandler(handler)\n \n@@ -31,23 +28,20 @@ class ILoggerAction(Interface):\n     This is also used to create add and edit forms, below.\n     """\n \n-    targetLogger = schema.ASCIILine(title=_(u\'Logger name\'),\n-                                    default=\'Plone\')\n+    targetLogger = schema.ASCIILine(title=_("Logger name"), default="Plone")\n \n-    loggingLevel = schema.Int(title=_(u\'Logging level\'),\n-                              default=20)  # INFO\n+    loggingLevel = schema.Int(title=_("Logging level"), default=20)  # INFO\n \n     message = schema.TextLine(\n-        title=_(u\'Message\'),\n+        title=_("Message"),\n         description=_(\n-            \'help_contentrules_logger_message\',\n-            default=u\'&e = the triggering event, \'\n-                    u\'&c = the context, &u = the user\',\n+            "help_contentrules_logger_message",\n+            default="&e = the triggering event, " "&c = the context, &u = the user",\n         ),\n         default=_(\n-            \'text_contentrules_logger_message\',\n-            default=u\'Caught &e at &c by &u\',\n-        )\n+            "text_contentrules_logger_message",\n+            default="Caught &e at &c by &u",\n+        ),\n     )\n \n \n@@ -58,20 +52,20 @@ class LoggerAction(SimpleItem):\n     Note that we must mix in Explicit to keep Zope 2 security happy.\n     """\n \n-    targetLogger = \'\'\n-    loggingLevel = \'\'\n-    message = \'\'\n+    targetLogger = ""\n+    loggingLevel = ""\n+    message = ""\n \n-    element = \'plone.actions.Logger\'\n+    element = "plone.actions.Logger"\n \n     @property\n     def summary(self):\n-        return _(u\'Log message ${message}\', mapping=dict(message=self.message))\n+        return _("Log message ${message}", mapping=dict(message=self.message))\n \n \n @adapter(Interface, ILoggerAction, Interface)\n @implementer(IExecutable)\n-class LoggerActionExecutor(object):\n+class LoggerActionExecutor:\n     """The executor for this action.\n \n     This is registered as an adapter in configure.zcml\n@@ -84,24 +78,23 @@ def __init__(self, context, element, event):\n \n     def processedMessage(self):\n         processedMessage = self.element.message\n-        if \'&e\' in processedMessage:\n+        if "&e" in processedMessage:\n             event_class = self.event.__class__\n             processedMessage = processedMessage.replace(\n-                \'&e\',\n-                \'{0}.{1}\'.format(\n+                "&e",\n+                "{}.{}".format(\n                     event_class.__module__,\n                     event_class.__name__,\n-                )\n+                ),\n             )\n \n-        if \'&c\' in processedMessage and IObjectEvent.providedBy(self.event):\n-            processedMessage = processedMessage.replace(\n-                \'&c\', repr(self.event.object))\n+        if "&c" in processedMessage and IObjectEvent.providedBy(self.event):\n+            processedMessage = processedMessage.replace("&c", repr(self.event.object))\n \n-        if \'&u\' in processedMessage:\n-            mtool = getToolByName(self.context, \'portal_membership\')\n+        if "&u" in processedMessage:\n+            mtool = getToolByName(self.context, "portal_membership")\n             member = mtool.getAuthenticatedMember().getUserName()\n-            processedMessage = processedMessage.replace(\'&u\', member)\n+            processedMessage = processedMessage.replace("&u", member)\n \n         return processedMessage\n \n@@ -112,12 +105,12 @@ def __call__(self):\n \n \n class LoggerAddForm(ActionAddForm):\n-    """An add form for logger rule actions.\n-    """\n+    """An add form for logger rule actions."""\n+\n     schema = ILoggerAction\n-    label = _(u\'Add Logger Action\')\n-    description = _(u\'A logger action can output a message to the system log.\')\n-    form_name = _(u\'Configure element\')\n+    label = _("Add Logger Action")\n+    description = _("A logger action can output a message to the system log.")\n+    form_name = _("Configure element")\n     Type = LoggerAction\n \n \n@@ -130,10 +123,11 @@ class LoggerEditForm(ActionEditForm):\n \n     z3c.form does all the magic here.\n     """\n+\n     schema = ILoggerAction\n-    label = _(u\'Edit Logger Action\')\n-    description = _(u\'A logger action can output a message to the system log.\')\n-    form_name = _(u\'Configure element\')\n+    label = _("Edit Logger Action")\n+    description = _("A logger action can output a message to the system log.")\n+    form_name = _("Configure element")\n \n \n class LoggerEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/actions/mail.py b/plone/app/contentrules/actions/mail.py\nindex d4d6468..92211f5 100644\n--- a/plone/app/contentrules/actions/mail.py\n+++ b/plone/app/contentrules/actions/mail.py\n@@ -1,16 +1,15 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.actions import ActionAddForm\n from plone.app.contentrules.actions import ActionEditForm\n from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper\n+from plone.base.interfaces.controlpanel import IMailSchema\n from plone.contentrules.rule.interfaces import IExecutable\n from plone.contentrules.rule.interfaces import IRuleElementData\n from plone.registry.interfaces import IRegistry\n from plone.stringinterp.interfaces import IStringInterpolator\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.MailHost.MailHost import MailHostError\n from Products.statusmessages.interfaces import IStatusMessage\n@@ -18,50 +17,47 @@\n from zope import schema\n from zope.component import adapter\n from zope.component import getUtility\n-from zope.interface.interfaces import ComponentLookupError\n from zope.globalrequest import getRequest\n from zope.interface import implementer\n from zope.interface import Interface\n+from zope.interface.interfaces import ComponentLookupError\n \n import logging\n-import six\n \n \n-logger = logging.getLogger(\'plone.contentrules\')\n+logger = logging.getLogger("plone.contentrules")\n \n \n class IMailAction(Interface):\n-    """Definition of the configuration available for a mail action\n-    """\n+    """Definition of the configuration available for a mail action"""\n+\n     subject = schema.TextLine(\n-        title=_(u\'Subject\'),\n-        description=_(u\'Subject of the message\'),\n-        required=True\n+        title=_("Subject"), description=_("Subject of the message"), required=True\n     )\n     source = schema.TextLine(\n-        title=_(u\'Email source\'),\n+        title=_("Email source"),\n         description=_(\n-            \'The email address that sends the email. If no email is provided \'\n-            \'here, it will use the portal from address.\'\n+            "The email address that sends the email. If no email is provided "\n+            "here, it will use the portal from address."\n         ),\n-        required=False\n+        required=False,\n     )\n     recipients = schema.TextLine(\n-        title=_(u\'Email recipients\'),\n+        title=_("Email recipients"),\n         description=_(\n-            \'The email where you want to send this message. To send it to \'\n-            \'different email addresses, just separate them with ,\'\n+            "The email where you want to send this message. To send it to "\n+            "different email addresses, just separate them with ,"\n         ),\n-        required=True\n+        required=True,\n     )\n     exclude_actor = schema.Bool(\n-        title=_(u\'Exclude actor from recipients\'),\n-        description=_(\'Do not send the email to the user that did the action.\')\n+        title=_("Exclude actor from recipients"),\n+        description=_("Do not send the email to the user that did the action."),\n     )\n     message = schema.Text(\n-        title=_(u\'Message\'),\n-        description=_(u\'The message that you want to mail.\'),\n-        required=True\n+        title=_("Message"),\n+        description=_("The message that you want to mail."),\n+        required=True,\n     )\n \n \n@@ -71,39 +67,38 @@ class MailAction(SimpleItem):\n     The implementation of the action defined before\n     """\n \n-    subject = u\'\'\n-    source = u\'\'\n-    recipients = u\'\'\n-    message = u\'\'\n+    subject = ""\n+    source = ""\n+    recipients = ""\n+    message = ""\n     exclude_actor = False\n \n-    element = \'plone.actions.Mail\'\n+    element = "plone.actions.Mail"\n \n     @property\n     def summary(self):\n-        return _(u\'Email report to ${recipients}\',\n-                 mapping=dict(recipients=self.recipients))\n+        return _(\n+            "Email report to ${recipients}", mapping=dict(recipients=self.recipients)\n+        )\n \n \n @implementer(IExecutable)\n @adapter(Interface, IMailAction, Interface)\n-class MailActionExecutor(object):\n-    """The executor for this action.\n-    """\n+class MailActionExecutor:\n+    """The executor for this action."""\n \n     def __init__(self, context, element, event):\n         self.context = context\n         self.element = element\n         self.event = event\n         registry = getUtility(IRegistry)\n-        self.mail_settings = registry.forInterface(IMailSchema,\n-                                                   prefix=\'plone\')\n+        self.mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n \n     def __call__(self):\n-        mailhost = getToolByName(aq_inner(self.context), \'MailHost\')\n+        mailhost = getToolByName(aq_inner(self.context), "MailHost")\n         if not mailhost:\n             raise ComponentLookupError(\n-                \'You must have a Mailhost utility to execute this action\'\n+                "You must have a Mailhost utility to execute this action"\n             )\n \n         email_charset = self.mail_settings.email_charset\n@@ -124,39 +119,33 @@ def __call__(self):\n                 if request:\n                     messages = IStatusMessage(request)\n                     msg = _(\n-                        u\'Error sending email from content rule. You must \'\n-                        u\'provide a source address for mail \'\n-                        u\'actions or enter an email in the portal properties\'\n+                        "Error sending email from content rule. You must "\n+                        "provide a source address for mail "\n+                        "actions or enter an email in the portal properties"\n                     )\n-                    messages.add(msg, type=u\'error\')\n+                    messages.add(msg, type="error")\n                 return False\n \n             from_name = self.mail_settings.email_from_name.strip(\'"\')\n-            if six.PY2 and isinstance(from_name, six.text_type):\n-                from_name = from_name.encode(\'utf8\')\n-            source = \'"{0}" <{1}>\'.format(from_name, from_address)\n+            source = f\'"{from_name}" <{from_address}>\'\n \n         recip_string = interpolator(self.element.recipients)\n         if recip_string:  # check recipient is not None or empty string\n-            recipients = set([\n-                str(mail.strip()) for mail in recip_string.split(\',\')\n-                if mail.strip()\n-            ])\n+            recipients = {\n+                str(mail.strip()) for mail in recip_string.split(",") if mail.strip()\n+            }\n         else:\n             recipients = set()\n \n         if self.element.exclude_actor:\n-            mtool = getToolByName(aq_inner(self.context), \'portal_membership\')\n-            actor_email = mtool.getAuthenticatedMember().getProperty(\n-                \'email\',\n-                \'\'\n-            )\n+            mtool = getToolByName(aq_inner(self.context), "portal_membership")\n+            actor_email = mtool.getAuthenticatedMember().getProperty("email", "")\n             if actor_email in recipients:\n                 recipients.remove(actor_email)\n \n         # prepend interpolated message with \\n to avoid interpretation\n         # of first line as header\n-        message = u\'\\n{0}\'.format(interpolator(self.element.message))\n+        message = f"\\n{interpolator(self.element.message)}"\n \n         subject = interpolator(self.element.subject)\n \n@@ -168,12 +157,17 @@ def __call__(self):\n                 # AlecM thinks this wouldn\'t be a problem if mail queuing was\n                 # always on -- but it isn\'t. (stevem)\n                 # so we test if queue is not on to set immediate\n-                mailhost.send(message, email_recipient, source,\n-                              subject=subject, charset=email_charset,\n-                              immediate=not mailhost.smtp_queue)\n+                mailhost.send(\n+                    message,\n+                    email_recipient,\n+                    source,\n+                    subject=subject,\n+                    charset=email_charset,\n+                    immediate=not mailhost.smtp_queue,\n+                )\n             except (MailHostError, SMTPException):\n                 logger.exception(\n-                    \'mail error: Attempt to send mail in content rule failed\'\n+                    "mail error: Attempt to send mail in content rule failed"\n                 )\n \n         return True\n@@ -183,13 +177,14 @@ class MailAddForm(ActionAddForm):\n     """\n     An add form for the mail action\n     """\n+\n     schema = IMailAction\n-    label = _(u\'Add Mail Action\')\n-    description = _(u\'A mail action can mail different recipient.\')\n-    form_name = _(u\'Configure element\')\n+    label = _("Add Mail Action")\n+    description = _("A mail action can mail different recipient.")\n+    form_name = _("Configure element")\n     Type = MailAction\n     # custom template will allow us to add help text\n-    template = ViewPageTemplateFile(\'templates/mail.pt\')\n+    template = ViewPageTemplateFile("templates/mail.pt")\n \n \n class MailAddFormView(ContentRuleFormWrapper):\n@@ -200,13 +195,14 @@ class MailEditForm(ActionEditForm):\n     """\n     An edit form for the mail action\n     """\n+\n     schema = IMailAction\n-    label = _(u\'Edit Mail Action\')\n-    description = _(u\'A mail action can mail different recipient.\')\n-    form_name = _(u\'Configure element\')\n+    label = _("Edit Mail Action")\n+    description = _("A mail action can mail different recipient.")\n+    form_name = _("Configure element")\n \n     # custom template will allow us to add help text\n-    template = ViewPageTemplateFile(\'templates/mail.pt\')\n+    template = ViewPageTemplateFile("templates/mail.pt")\n \n \n class MailEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/actions/move.py b/plone/app/contentrules/actions/move.py\nindex c343331..ae54d72 100644\n--- a/plone/app/contentrules/actions/move.py\n+++ b/plone/app/contentrules/actions/move.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n@@ -10,10 +9,10 @@\n from plone.app.contentrules.actions import ActionEditForm\n from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper\n from plone.app.vocabularies.catalog import CatalogSource\n+from plone.base.utils import pretty_title_or_id\n from plone.contentrules.rule.interfaces import IExecutable\n from plone.contentrules.rule.interfaces import IRuleElementData\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import utils\n from Products.statusmessages.interfaces import IStatusMessage\n from ZODB.POSException import ConflictError\n from zope import schema\n@@ -32,8 +31,8 @@ class IMoveAction(Interface):\n     """\n \n     target_folder = schema.Choice(\n-        title=_(u\'Target folder\'),\n-        description=_(u\'As a path relative to the portal root.\'),\n+        title=_("Target folder"),\n+        description=_("As a path relative to the portal root."),\n         required=True,\n         source=CatalogSource(is_folderish=True),\n     )\n@@ -41,25 +40,20 @@ class IMoveAction(Interface):\n \n @implementer(IMoveAction, IRuleElementData)\n class MoveAction(SimpleItem):\n-    """The actual persistent implementation of the action element.\n-    """\n+    """The actual persistent implementation of the action element."""\n \n-    target_folder = \'\'\n-    element = \'plone.actions.Move\'\n+    target_folder = ""\n+    element = "plone.actions.Move"\n \n     @property\n     def summary(self):\n-        return _(\n-            u\'Move to folder ${folder}\',\n-            mapping=dict(folder=self.target_folder)\n-        )\n+        return _("Move to folder ${folder}", mapping=dict(folder=self.target_folder))\n \n \n @adapter(Interface, IMoveAction, Interface)\n @implementer(IExecutable)\n-class MoveActionExecutor(object):\n-    """The executor for this action.\n-    """\n+class MoveActionExecutor:\n+    """The executor for this action."""\n \n     def __init__(self, context, element, event):\n         self.context = context\n@@ -67,7 +61,7 @@ def __init__(self, context, element, event):\n         self.event = event\n \n     def __call__(self):\n-        portal_url = getToolByName(self.context, \'portal_url\', None)\n+        portal_url = getToolByName(self.context, "portal_url", None)\n         if portal_url is None:\n             return False\n \n@@ -75,7 +69,7 @@ def __call__(self):\n         parent = aq_parent(aq_inner(obj))\n \n         path = self.element.target_folder\n-        if len(path) > 1 and path[0] == \'/\':\n+        if len(path) > 1 and path[0] == "/":\n             path = path[1:]\n         target = portal_url.getPortalObject().unrestrictedTraverse(\n             str(path),\n@@ -86,9 +80,9 @@ def __call__(self):\n             self.error(\n                 obj,\n                 _(\n-                    u\'Target folder ${target} does not exist.\',\n-                    mapping={\'target\': path},\n-                )\n+                    "Target folder ${target} does not exist.",\n+                    mapping={"target": path},\n+                ),\n             )\n             return False\n \n@@ -135,37 +129,39 @@ def __call__(self):\n         return True\n \n     def error(self, obj, error):\n-        request = getattr(self.context, \'REQUEST\', None)\n+        request = getattr(self.context, "REQUEST", None)\n         if request is not None:\n-            title = utils.pretty_title_or_id(obj, obj)\n+            title = pretty_title_or_id(obj, obj)\n             message = _(\n-                u\'Unable to move ${name} as part of content rule \'\n-                u"\'move\' action: ${error}",\n-                mapping={\'name\': title, \'error\': error}\n+                "Unable to move ${name} as part of content rule "\n+                "\'move\' action: ${error}",\n+                mapping={"name": title, "error": error},\n             )\n-            IStatusMessage(request).addStatusMessage(message, type=\'error\')\n+            IStatusMessage(request).addStatusMessage(message, type="error")\n \n     def generate_id(self, target, old_id):\n-        taken = getattr(aq_base(target), \'has_key\', None)\n+        taken = getattr(aq_base(target), "has_key", None)\n         if taken is None:\n             item_ids = set(target.objectIds())\n \n-            def taken(x): return x in item_ids\n+            def taken(x):\n+                return x in item_ids\n+\n         if not taken(old_id):\n             return old_id\n         idx = 1\n-        while taken(\'{0}.{1}\'.format(old_id, idx)):\n+        while taken(f"{old_id}.{idx}"):\n             idx += 1\n-        return \'{0}.{1}\'.format(old_id, idx)\n+        return f"{old_id}.{idx}"\n \n \n class MoveAddForm(ActionAddForm):\n-    """An add form for move-to-folder actions.\n-    """\n+    """An add form for move-to-folder actions."""\n+\n     schema = IMoveAction\n-    label = _(u\'Add Move Action\')\n-    description = _(u\'A move action can move an object to a different folder.\')\n-    form_name = _(u\'Configure element\')\n+    label = _("Add Move Action")\n+    description = _("A move action can move an object to a different folder.")\n+    form_name = _("Configure element")\n     Type = MoveAction\n \n \n@@ -178,10 +174,11 @@ class MoveEditForm(ActionEditForm):\n \n     z3c.form does all the magic here.\n     """\n+\n     schema = IMoveAction\n-    label = _(u\'Edit Move Action\')\n-    description = _(u\'A move action can move an object to a different folder.\')\n-    form_name = _(u\'Configure element\')\n+    label = _("Edit Move Action")\n+    description = _("A move action can move an object to a different folder.")\n+    form_name = _("Configure element")\n \n \n class MoveEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/actions/notify.py b/plone/app/contentrules/actions/notify.py\nindex 3dcd87f..a03cd64 100644\n--- a/plone/app/contentrules/actions/notify.py\n+++ b/plone/app/contentrules/actions/notify.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.actions import ActionAddForm\n@@ -20,41 +19,40 @@ class INotifyAction(Interface):\n     """\n \n     message = schema.TextLine(\n-        title=_(u\'Message\'),\n-        description=_(u\'The message to send to the user.\'),\n+        title=_("Message"),\n+        description=_("The message to send to the user."),\n         required=True,\n     )\n \n     message_type = schema.Choice(\n-        title=_(u\'Message type\'),\n-        description=_(u\'Select the type of message to display.\'),\n-        values=(\'info\', \'warning\', \'error\'),\n+        title=_("Message type"),\n+        description=_("Select the type of message to display."),\n+        values=("info", "warning", "error"),\n         required=True,\n-        default=\'info\',\n+        default="info",\n     )\n \n \n @implementer(INotifyAction, IRuleElementData)\n class NotifyAction(SimpleItem):\n-    """The actual persistent implementation of the notify action element.\n-    """\n+    """The actual persistent implementation of the notify action element."""\n \n-    message = \'\'\n-    message_type = \'\'\n+    message = ""\n+    message_type = ""\n \n-    element = \'plone.actions.Notify\'\n+    element = "plone.actions.Notify"\n \n     @property\n     def summary(self):\n         return _(\n-            u\'Notify with message ${message}\',\n+            "Notify with message ${message}",\n             mapping=dict(message=self.message),\n         )\n \n \n @adapter(Interface, INotifyAction, Interface)\n @implementer(IExecutable)\n-class NotifyActionExecutor(object):\n+class NotifyActionExecutor:\n     """The executor for this action.\n \n     This is registered as an adapter in configure.zcml\n@@ -74,12 +72,12 @@ def __call__(self):\n \n \n class NotifyAddForm(ActionAddForm):\n-    """An add form for notify rule actions.\n-    """\n+    """An add form for notify rule actions."""\n+\n     schema = INotifyAction\n-    label = _(u\'Add Notify Action\')\n-    description = _(u\'A notify action can show a message to the user.\')\n-    form_name = _(u\'Configure element\')\n+    label = _("Add Notify Action")\n+    description = _("A notify action can show a message to the user.")\n+    form_name = _("Configure element")\n     Type = NotifyAction\n \n \n@@ -92,10 +90,11 @@ class NotifyEditForm(ActionEditForm):\n \n     z3c.form does all the magic here.\n     """\n+\n     schema = INotifyAction\n-    label = _(u\'Edit Notify Action\')\n-    description = _(u\'A notify action can show a message to the user.\')\n-    form_name = _(u\'Configure element\')\n+    label = _("Edit Notify Action")\n+    description = _("A notify action can show a message to the user.")\n+    form_name = _("Configure element")\n \n \n class NotifyEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/actions/versioning.py b/plone/app/contentrules/actions/versioning.py\nindex c255571..817c674 100644\n--- a/plone/app/contentrules/actions/versioning.py\n+++ b/plone/app/contentrules/actions/versioning.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.actions import ActionAddForm\n@@ -20,33 +19,31 @@ class IVersioningAction(Interface):\n     """\n \n     comment = schema.TextLine(\n-        title=_(u\'Comment\'),\n-        description=_(\n-            u\'The comment added to the history while versioning the content.\'),\n+        title=_("Comment"),\n+        description=_("The comment added to the history while versioning the content."),\n         required=False,\n     )\n \n \n @implementer(IVersioningAction, IRuleElementData)\n class VersioningAction(SimpleItem):\n-    """The actual persistent implementation of the versioning action element.\n-    """\n+    """The actual persistent implementation of the versioning action element."""\n \n-    comment = \'\'\n+    comment = ""\n \n-    element = \'plone.actions.Versioning\'\n+    element = "plone.actions.Versioning"\n \n     @property\n     def summary(self):\n         return _(\n-            u\'Versioning with comment ${comment}\',\n+            "Versioning with comment ${comment}",\n             mapping=dict(comment=self.comment),\n         )\n \n \n @adapter(Interface, IVersioningAction, Interface)\n @implementer(IExecutable)\n-class VersioningActionExecutor(object):\n+class VersioningActionExecutor:\n     """The executor for this action.\n \n     This is registered as an adapter in configure.zcml\n@@ -59,19 +56,21 @@ def __init__(self, context, element, event):\n \n     def __call__(self):\n         comment = _(self.element.comment)\n-        pr = getToolByName(self.context, \'portal_repository\')\n+        pr = getToolByName(self.context, "portal_repository")\n         pr.save(obj=self.event.object, comment=comment)\n         return True\n \n \n class VersioningAddForm(ActionAddForm):\n-    """An add form for versioning rule actions.\n-    """\n+    """An add form for versioning rule actions."""\n+\n     schema = IVersioningAction\n-    label = _(u\'Add Versioning Action\')\n-    description = _(u\'A versioning action will store a version of a content \'\n-                    u\'no matter versioning is enabled for it or not.\')\n-    form_name = _(u\'Configure element\')\n+    label = _("Add Versioning Action")\n+    description = _(\n+        "A versioning action will store a version of a content "\n+        "no matter versioning is enabled for it or not."\n+    )\n+    form_name = _("Configure element")\n     Type = VersioningAction\n \n \n@@ -84,11 +83,14 @@ class VersioningEditForm(ActionEditForm):\n \n     z3c.form does all the magic here.\n     """\n+\n     schema = IVersioningAction\n-    label = _(u\'Edit Versioning Action\')\n-    description = _(u\'A versioning action will store a version of a content \'\n-                    u\'no matter versioning is enabled for it or not.\')\n-    form_name = _(u\'Configure element\')\n+    label = _("Edit Versioning Action")\n+    description = _(\n+        "A versioning action will store a version of a content "\n+        "no matter versioning is enabled for it or not."\n+    )\n+    form_name = _("Configure element")\n \n \n class VersioningEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/actions/workflow.py b/plone/app/contentrules/actions/workflow.py\nindex 9f75eb9..211e42a 100644\n--- a/plone/app/contentrules/actions/workflow.py\n+++ b/plone/app/contentrules/actions/workflow.py\n@@ -1,13 +1,13 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.actions import ActionAddForm\n from plone.app.contentrules.actions import ActionEditForm\n from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper\n+from plone.base.utils import pretty_title_or_id\n+from plone.base.utils import safe_text\n from plone.contentrules.rule.interfaces import IExecutable\n from plone.contentrules.rule.interfaces import IRuleElementData\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import utils\n from Products.statusmessages.interfaces import IStatusMessage\n from ZODB.POSException import ConflictError\n from zope import schema\n@@ -23,34 +23,32 @@ class IWorkflowAction(Interface):\n     """\n \n     transition = schema.Choice(\n-        title=_(u\'Transition\'),\n-        description=_(u\'Select the workflow transition to attempt\'),\n+        title=_("Transition"),\n+        description=_("Select the workflow transition to attempt"),\n         required=True,\n-        vocabulary=\'plone.app.vocabularies.WorkflowTransitions\',\n+        vocabulary="plone.app.vocabularies.WorkflowTransitions",\n     )\n \n \n @implementer(IWorkflowAction, IRuleElementData)\n class WorkflowAction(SimpleItem):\n-    """The actual persistent implementation of the action element.\n-    """\n+    """The actual persistent implementation of the action element."""\n \n-    transition = \'\'\n-    element = \'plone.actions.Workflow\'\n+    transition = ""\n+    element = "plone.actions.Workflow"\n \n     @property\n     def summary(self):\n         return _(\n-            u\'Execute transition ${transition}\',\n+            "Execute transition ${transition}",\n             mapping=dict(transition=self.transition),\n         )\n \n \n @adapter(Interface, IWorkflowAction, Interface)\n @implementer(IExecutable)\n-class WorkflowActionExecutor(object):\n-    """The executor for this action.\n-    """\n+class WorkflowActionExecutor:\n+    """The executor for this action."""\n \n     def __init__(self, context, element, event):\n         self.context = context\n@@ -58,7 +56,7 @@ def __init__(self, context, element, event):\n         self.event = event\n \n     def __call__(self):\n-        portal_workflow = getToolByName(self.context, \'portal_workflow\', None)\n+        portal_workflow = getToolByName(self.context, "portal_workflow", None)\n         if portal_workflow is None:\n             return False\n \n@@ -75,24 +73,24 @@ def __call__(self):\n         return True\n \n     def error(self, obj, error):\n-        request = getattr(self.context, \'REQUEST\', None)\n+        request = getattr(self.context, "REQUEST", None)\n         if request is not None:\n-            title = utils.safe_unicode(utils.pretty_title_or_id(obj, obj))\n-            error = utils.safe_unicode(error)\n+            title = safe_text(pretty_title_or_id(obj, obj))\n+            error = safe_text(error)\n             message = _(\n-                u"Unable to change state of ${name} as part of content rule \'workflow\' action: ${error}",  # noqa\n-                mapping={\'name\': title, \'error\': error})\n-            IStatusMessage(request).addStatusMessage(message, type=\'error\')\n+                "Unable to change state of ${name} as part of content rule \'workflow\' action: ${error}",  # noqa\n+                mapping={"name": title, "error": error},\n+            )\n+            IStatusMessage(request).addStatusMessage(message, type="error")\n \n \n class WorkflowAddForm(ActionAddForm):\n-    """An add form for workflow actions.\n-    """\n+    """An add form for workflow actions."""\n+\n     schema = IWorkflowAction\n-    label = _(u\'Add Workflow Action\')\n-    description = _(\n-        u\'A workflow action triggers a workflow transition on an object.\')\n-    form_name = _(u\'Configure element\')\n+    label = _("Add Workflow Action")\n+    description = _("A workflow action triggers a workflow transition on an object.")\n+    form_name = _("Configure element")\n     Type = WorkflowAction\n \n \n@@ -101,13 +99,12 @@ class WorkflowAddFormView(ContentRuleFormWrapper):\n \n \n class WorkflowEditForm(ActionEditForm):\n-    """An edit form for workflow rule actions.\n-    """\n+    """An edit form for workflow rule actions."""\n+\n     schema = IWorkflowAction\n-    label = _(u\'Edit Workflow Action\')\n-    description = _(\n-        u\'A workflow action triggers a workflow transition on an object.\')\n-    form_name = _(u\'Configure element\')\n+    label = _("Edit Workflow Action")\n+    description = _("A workflow action triggers a workflow transition on an object.")\n+    form_name = _("Configure element")\n \n \n class WorkflowEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/api.py b/plone/app/contentrules/api.py\nindex 7fd8cd4..754fc18 100644\n--- a/plone/app/contentrules/api.py\n+++ b/plone/app/contentrules/api.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.rule import get_assignments\n from plone.app.contentrules.rule import insert_assignment\n from plone.contentrules.engine.assignments import RuleAssignment\n@@ -7,8 +6,7 @@\n from zope.component import queryUtility\n \n \n-def assign_rule(container, rule_id, enabled=True, bubbles=True,\n-                insert_before=None):\n+def assign_rule(container, rule_id, enabled=True, bubbles=True, insert_before=None):\n     """Assign\n        @param string rule_id\n        rule to\n@@ -32,13 +30,13 @@ def assign_rule(container, rule_id, enabled=True, bubbles=True,\n \n     assignable[rule_id].enabled = bool(enabled)\n     assignable[rule_id].bubbles = bool(bubbles)\n-    path = \'/\'.join(container.getPhysicalPath())\n+    path = "/".join(container.getPhysicalPath())\n     insert_assignment(storage[rule_id], path)\n \n     if insert_before:\n         position = None\n         keys = list(assignable.keys())\n-        if insert_before == \'*\':\n+        if insert_before == "*":\n             position = 0\n         elif insert_before in keys:\n             position = keys.index(insert_before)\n@@ -51,13 +49,13 @@ def assign_rule(container, rule_id, enabled=True, bubbles=True,\n \n def unassign_rule(container, rule_id):\n     """Remove\n-       @param string rule_id\n-       rule from\n-       @param object container\n+    @param string rule_id\n+    rule from\n+    @param object container\n     """\n     assignable = IRuleAssignmentManager(container)\n     storage = queryUtility(IRuleStorage)\n-    path = \'/\'.join(container.getPhysicalPath())\n+    path = "/".join(container.getPhysicalPath())\n     del assignable[rule_id]\n     get_assignments(storage[rule_id]).remove(path)\n \ndiff --git a/plone/app/contentrules/browser/__init__.py b/plone/app/contentrules/browser/__init__.py\nindex ec51c5a..792d600 100644\n--- a/plone/app/contentrules/browser/__init__.py\n+++ b/plone/app/contentrules/browser/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/plone/app/contentrules/browser/adding.py b/plone/app/contentrules/browser/adding.py\nindex 79dc4c0..febf16c 100644\n--- a/plone/app/contentrules/browser/adding.py\n+++ b/plone/app/contentrules/browser/adding.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n@@ -26,28 +25,33 @@ class RuleAdding(SimpleItem, BrowserView):\n \n     # This is necessary so that context.absolute_url() works properly on the\n     # add form, which in turn fixes the <base /> URL\n-    id = \'+rule\'\n+    id = "+rule"\n \n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def add(self, content):\n-        """Add the rule to the context\n-        """\n+        """Add the rule to the context"""\n         storage = getUtility(IRuleStorage)\n         chooser = INameChooser(storage)\n         name = chooser.chooseName(None, content)\n         self._chosen_name = name\n         storage[name] = content\n-        IStatusMessage(self.request).add(_(\n-            u\'New content rule created. \'\n-            u\'Please add conditions and actions at the bottom of the page.\'),\n-            type=u\'info\')\n+        IStatusMessage(self.request).add(\n+            _(\n+                "New content rule created. "\n+                "Please add conditions and actions at the bottom of the page."\n+            ),\n+            type="info",\n+        )\n \n     def renderAddButton(self):\n-        warn(\'The renderAddButton method is deprecated, use nameAllowed\',\n-             DeprecationWarning, 2)\n+        warn(\n+            "The renderAddButton method is deprecated, use nameAllowed",\n+            DeprecationWarning,\n+            2,\n+        )\n \n     def namesAccepted(self):\n         return False\n@@ -79,13 +83,19 @@ def __init__(self, context, request):\n         self.request = request\n \n     def nextURL(self):\n-        url = str(getMultiAdapter(\n-            (aq_parent(self.context), self.request), name=u\'absolute_url\'))\n-        return url + \'/@@manage-content-rules\'\n+        url = str(\n+            getMultiAdapter(\n+                (aq_parent(self.context), self.request), name="absolute_url"\n+            )\n+        )\n+        return url + "/@@manage-content-rules"\n \n     def renderAddButton(self):\n-        warn(\'The renderAddButton method is deprecated, use nameAllowed\',\n-             DeprecationWarning, 2)\n+        warn(\n+            "The renderAddButton method is deprecated, use nameAllowed",\n+            DeprecationWarning,\n+            2,\n+        )\n \n     def namesAccepted(self):\n         return False\n@@ -108,11 +118,10 @@ class RuleConditionAdding(RuleElementAdding):\n \n     # This is necessary so that context.absolute_url() works properly on the\n     # add form, which in turn fixes the <base /> URL\n-    id = \'+condition\'\n+    id = "+condition"\n \n     def add(self, content):\n-        """Add the rule element to the context rule\n-        """\n+        """Add the rule element to the context rule"""\n         rule = aq_base(aq_inner(self.context))\n         rule.conditions.append(content)\n \n@@ -122,10 +131,9 @@ class RuleActionAdding(RuleElementAdding):\n \n     # This is necessary so that context.absolute_url() works properly on the\n     # add form, which in turn fixes the <base /> URL\n-    id = \'+action\'\n+    id = "+action"\n \n     def add(self, content):\n-        """Add the rule element to the context rule\n-        """\n+        """Add the rule element to the context rule"""\n         rule = aq_base(aq_inner(self.context))\n         rule.actions.append(content)\ndiff --git a/plone/app/contentrules/browser/assignments.py b/plone/app/contentrules/browser/assignments.py\nindex 3d30673..ec50215 100644\n--- a/plone/app/contentrules/browser/assignments.py\n+++ b/plone/app/contentrules/browser/assignments.py\n@@ -1,8 +1,7 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules import api\n+from plone.app.contentrules import PloneMessageFactory as _\n from plone.contentrules.engine.interfaces import IRuleAssignmentManager\n from plone.contentrules.engine.interfaces import IRuleStorage\n from plone.memoize.instance import memoize\n@@ -16,10 +15,9 @@\n \n \n class ManageAssignments(BrowserView):\n-    """Manage contextual rule assignments\n-    """\n+    """Manage contextual rule assignments"""\n \n-    template = ViewPageTemplateFile(\'templates/manage-assignments.pt\')\n+    template = ViewPageTemplateFile("templates/manage-assignments.pt")\n \n     def __call__(self):\n         context = aq_inner(self.context)\n@@ -27,58 +25,57 @@ def __call__(self):\n         form = request.form\n         status = IStatusMessage(self.request)\n \n-        operation = request.get(\'operation\', None)\n+        operation = request.get("operation", None)\n \n-        if operation == \'move_up\':\n+        if operation == "move_up":\n             assignable = IRuleAssignmentManager(context)\n-            rule_id = request.get(\'rule_id\')\n+            rule_id = request.get("rule_id")\n             keys = list(assignable.keys())\n             idx = keys.index(rule_id)\n             del keys[idx]\n             keys.insert(idx - 1, rule_id)\n             assignable.updateOrder(keys)\n-        elif operation == \'move_down\':\n+        elif operation == "move_down":\n             assignable = IRuleAssignmentManager(context)\n-            rule_id = request.get(\'rule_id\')\n+            rule_id = request.get("rule_id")\n             keys = list(assignable.keys())\n             idx = keys.index(rule_id)\n             del keys[idx]\n             keys.insert(idx + 1, rule_id)\n             assignable.updateOrder(keys)\n-        elif \'form.button.AddAssignment\' in form:\n-            rule_id = form.get(\'rule_id\')\n+        elif "form.button.AddAssignment" in form:\n+            rule_id = form.get("rule_id")\n             api.assign_rule(self.context, rule_id)\n-        elif \'form.button.Delete\' in form:\n-            rule_ids = form.get(\'rule_ids\', ())\n+        elif "form.button.Delete" in form:\n+            rule_ids = form.get("rule_ids", ())\n             for r in rule_ids:\n                 api.unassign_rule(self.context, r)\n \n-            status.addStatusMessage(_(u\'Assignments deleted.\'), type=\'info\')\n-        elif \'form.button.Enable\' in form:\n-            rule_ids = form.get(\'rule_ids\', ())\n+            status.addStatusMessage(_("Assignments deleted."), type="info")\n+        elif "form.button.Enable" in form:\n+            rule_ids = form.get("rule_ids", ())\n             for r in rule_ids:\n                 api.edit_rule_assignment(context, r, enabled=True)\n \n-            status.addStatusMessage(_(u\'Assignments enabled.\'), type=\'info\')\n-        elif \'form.button.Disable\' in form:\n-            rule_ids = form.get(\'rule_ids\', ())\n+            status.addStatusMessage(_("Assignments enabled."), type="info")\n+        elif "form.button.Disable" in form:\n+            rule_ids = form.get("rule_ids", ())\n             for r in rule_ids:\n                 api.edit_rule_assignment(context, r, enabled=False)\n \n-            status.addStatusMessage(_(u\'Assignments disabled.\'), type=\'info\')\n-        elif \'form.button.Bubble\' in form:\n-            rule_ids = form.get(\'rule_ids\', ())\n+            status.addStatusMessage(_("Assignments disabled."), type="info")\n+        elif "form.button.Bubble" in form:\n+            rule_ids = form.get("rule_ids", ())\n             for r in rule_ids:\n-                api.edit_rule_assignment(\n-                    context, r, bubbles=True, enabled=True)\n+                api.edit_rule_assignment(context, r, bubbles=True, enabled=True)\n \n-            status.addStatusMessage(_(u\'Changes saved.\'), type=\'info\')\n-        elif \'form.button.NoBubble\' in form:\n-            rule_ids = form.get(\'rule_ids\', ())\n+            status.addStatusMessage(_("Changes saved."), type="info")\n+        elif "form.button.NoBubble" in form:\n+            rule_ids = form.get("rule_ids", ())\n             for r in rule_ids:\n                 api.edit_rule_assignment(context, r, bubbles=False)\n \n-            status.addStatusMessage(_(u\'Changes saved.\'), type=\'info\')\n+            status.addStatusMessage(_("Changes saved."), type="info")\n \n         return self.template()\n \n@@ -88,7 +85,7 @@ def globally_enabled(self):\n \n     @memoize\n     def view_url(self):\n-        return self.context.absolute_url() + \'/@@manage-content-rules\'\n+        return self.context.absolute_url() + "/@@manage-content-rules"\n \n     @memoize\n     def type_name(self):\n@@ -103,7 +100,7 @@ def acquired_rules(self):\n         if ISiteRoot.providedBy(self.context):\n             return []\n \n-        in_use = set([r[\'id\'] for r in self.assigned_rules()])\n+        in_use = {r["id"] for r in self.assigned_rules()}\n \n         storage = getUtility(IRuleStorage)\n         events = self._events()\n@@ -118,17 +115,19 @@ def acquired_rules(self):\n                     if key not in in_use and assignment.bubbles:\n                         rule = storage.get(key, None)\n                         if rule is not None:\n-                            url = \'{0}/@@manage-content-rules\'.format(\n+                            url = "{}/@@manage-content-rules".format(\n                                 context.absolute_url(),\n                             )\n-                            assignments.append(dict(\n-                                id=key,\n-                                title=rule.title,\n-                                description=rule.description,\n-                                trigger=events.get(rule.event, \'Unknown\'),\n-                                url=url,\n-                                enabled=(assignment.enabled and rule.enabled),\n-                            ))\n+                            assignments.append(\n+                                dict(\n+                                    id=key,\n+                                    title=rule.title,\n+                                    description=rule.description,\n+                                    trigger=events.get(rule.event, "Unknown"),\n+                                    url=url,\n+                                    enabled=(assignment.enabled and rule.enabled),\n+                                )\n+                            )\n             if ISiteRoot.providedBy(context):\n                 context = None\n             else:\n@@ -146,40 +145,44 @@ def assigned_rules(self):\n         for key, assignment in assignable.items():\n             rule = storage.get(key, None)\n             if rule is not None:\n-                assignments.append(dict(id=key,\n-                                        title=rule.title,\n-                                        description=rule.description,\n-                                        trigger=events.get(\n-                                            rule.event,\n-                                            \'Unknown\'\n-                                        ),\n-                                        url=self._rule_url(key),\n-                                        bubbles=assignment.bubbles,\n-                                        enabled=assignment.enabled,\n-                                        global_enabled=rule.enabled, ))\n+                assignments.append(\n+                    dict(\n+                        id=key,\n+                        title=rule.title,\n+                        description=rule.description,\n+                        trigger=events.get(rule.event, "Unknown"),\n+                        url=self._rule_url(key),\n+                        bubbles=assignment.bubbles,\n+                        enabled=assignment.enabled,\n+                        global_enabled=rule.enabled,\n+                    )\n+                )\n         return assignments\n \n     def has_rules(self):\n         return len(self.assigned_rules()) > 0 or len(self.acquired_rules()) > 0\n \n     def assignable_rules(self):\n-        in_use = set([r[\'id\'] for r in self.assigned_rules()])\n+        in_use = {r["id"] for r in self.assigned_rules()}\n         assignable = []\n         for key, rule in getUtility(IRuleStorage).items():\n             if key not in in_use:\n-                assignable.append(dict(id=key,\n-                                       title=rule.title,\n-                                       description=rule.description, ))\n+                assignable.append(\n+                    dict(\n+                        id=key,\n+                        title=rule.title,\n+                        description=rule.description,\n+                    )\n+                )\n         return assignable\n \n     @memoize\n     def _events(self):\n-        eventsFactory = getUtility(\n-            IVocabularyFactory, name=\'plone.contentrules.events\')\n-        return dict([(e.value, e.token) for e in eventsFactory(self.context)])\n+        eventsFactory = getUtility(IVocabularyFactory, name="plone.contentrules.events")\n+        return {e.value: e.token for e in eventsFactory(self.context)}\n \n     def _rule_url(self, key):\n-        return \'{0}/++rule++{1}/@@manage-elements\'.format(\n+        return "{}/++rule++{}/@@manage-elements".format(\n             self._portal_url(),\n             key,\n         )\n@@ -187,5 +190,6 @@ def _rule_url(self, key):\n     @memoize\n     def _portal_url(self):\n         portal_state = getMultiAdapter(\n-            (self.context, self.request), name=\'plone_portal_state\')\n+            (self.context, self.request), name="plone_portal_state"\n+        )\n         return portal_state.portal_url()\ndiff --git a/plone/app/contentrules/browser/configure.zcml b/plone/app/contentrules/browser/configure.zcml\nindex a97da0b..3f59775 100644\n--- a/plone/app/contentrules/browser/configure.zcml\n+++ b/plone/app/contentrules/browser/configure.zcml\n@@ -94,7 +94,7 @@\n       />\n \n     <browser:page\n-      for="Products.CMFPlone.interfaces.siteroot.IPloneSiteRoot"\n+      for="plone.base.interfaces.siteroot.IPloneSiteRoot"\n       name="contentrule-enable"\n       class=".controlpanel.ContentRulesControlPanel"\n       attribute="enable_rule"\n@@ -102,7 +102,7 @@\n     />\n \n     <browser:page\n-      for="Products.CMFPlone.interfaces.siteroot.IPloneSiteRoot"\n+      for="plone.base.interfaces.siteroot.IPloneSiteRoot"\n       name="contentrule-disable"\n       class=".controlpanel.ContentRulesControlPanel"\n       attribute="disable_rule"\n@@ -110,7 +110,7 @@\n     />\n \n     <browser:page\n-      for="Products.CMFPlone.interfaces.siteroot.IPloneSiteRoot"\n+      for="plone.base.interfaces.siteroot.IPloneSiteRoot"\n       name="contentrule-delete"\n       class=".controlpanel.ContentRulesControlPanel"\n       attribute="delete_rule"\n@@ -118,7 +118,7 @@\n     />\n \n     <browser:page\n-      for="Products.CMFPlone.interfaces.siteroot.IPloneSiteRoot"\n+      for="plone.base.interfaces.siteroot.IPloneSiteRoot"\n       name="contentrule-globally-enable"\n       class=".controlpanel.ContentRulesControlPanel"\n       attribute="globally_enable"\n@@ -126,7 +126,7 @@\n     />\n \n     <browser:page\n-      for="Products.CMFPlone.interfaces.siteroot.IPloneSiteRoot"\n+      for="plone.base.interfaces.siteroot.IPloneSiteRoot"\n       name="contentrule-globally-disable"\n       class=".controlpanel.ContentRulesControlPanel"\n       attribute="globally_disable"\ndiff --git a/plone/app/contentrules/browser/controlpanel.py b/plone/app/contentrules/browser/controlpanel.py\nindex 39be77e..dafce05 100644\n--- a/plone/app/contentrules/browser/controlpanel.py\n+++ b/plone/app/contentrules/browser/controlpanel.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.browser.interfaces import IContentRulesControlPanel\n@@ -16,27 +15,27 @@\n \n \n def get_trigger_class(trigger):\n-    return \'trigger-{0}\'.format(trigger.__identifier__.split(\'.\')[-1].lower())\n+    return "trigger-{}".format(trigger.__identifier__.split(".")[-1].lower())\n \n \n @implementer(IContentRulesControlPanel)\n class ContentRulesControlPanel(BrowserView):\n-    """Manage rules in a the global rules container\n-    """\n-    template = ViewPageTemplateFile(\'templates/controlpanel.pt\')\n+    """Manage rules in a the global rules container"""\n+\n+    template = ViewPageTemplateFile("templates/controlpanel.pt")\n \n     def __call__(self):\n         form = self.request.form\n-        if form.get(\'rule-id\', False):\n-            if form.get(\'form.button.EnableRule\', None) is not None:\n+        if form.get("rule-id", False):\n+            if form.get("form.button.EnableRule", None) is not None:\n                 self.enable_rule()\n-            elif form.get(\'form.button.DisableRule\', None) is not None:\n+            elif form.get("form.button.DisableRule", None) is not None:\n                 self.disable_rule()\n-            elif form.get(\'form.button.DeleteRule\', None) is not None:\n+            elif form.get("form.button.DeleteRule", None) is not None:\n                 self.delete_rule()\n \n-        if form.get(\'global_disable\', None) is not None:\n-            if form[\'global_disable\']:\n+        if form.get("global_disable", None) is not None:\n+            if form["global_disable"]:\n                 msg = self.globally_disable()\n             else:\n                 msg = self.globally_enable()\n@@ -46,8 +45,9 @@ def __call__(self):\n         return self.template()\n \n     def authorize(self):\n-        authenticator = getMultiAdapter((self.context, self.request),\n-                                        name=u\'authenticator\')\n+        authenticator = getMultiAdapter(\n+            (self.context, self.request), name="authenticator"\n+        )\n         if not authenticator.verify():\n             raise Unauthorized\n \n@@ -58,30 +58,32 @@ def globally_disabled(self):\n     def registeredRules(self):\n         rules = self._getRules()\n \n-        events = dict([(e.value, e.token) for e in self._events()])\n+        events = {e.value: e.token for e in self._events()}\n         info = []\n         for r in rules:\n             trigger_class = get_trigger_class(r.event)\n-            enabled_class = r.enabled and \'state-enabled\' or \'state-disabled\'\n+            enabled_class = r.enabled and "state-enabled" or "state-disabled"\n             assigned = len(get_assignments(r)) > 0\n \n-            assigned_class = \'assignment-unassigned\'\n+            assigned_class = "assignment-unassigned"\n             if assigned:\n-                assigned_class = \'assignment-assigned\'\n-\n-            info.append({\n-                \'id\': r.__name__,\n-                \'title\': r.title,\n-                \'description\': r.description,\n-                \'enabled\': r.enabled,\n-                \'assigned\': assigned,\n-                \'trigger\': events[r.event],\n-                \'row_class\': \'{0} {1} {2}\'.format(\n-                    trigger_class,\n-                    enabled_class,\n-                    assigned_class,\n-                )\n-            })\n+                assigned_class = "assignment-assigned"\n+\n+            info.append(\n+                {\n+                    "id": r.__name__,\n+                    "title": r.title,\n+                    "description": r.description,\n+                    "enabled": r.enabled,\n+                    "assigned": assigned,\n+                    "trigger": events[r.event],\n+                    "row_class": "{} {} {}".format(\n+                        trigger_class,\n+                        enabled_class,\n+                        assigned_class,\n+                    ),\n+                }\n+            )\n \n         return info\n \n@@ -96,22 +98,20 @@ def ruleTypesToShow(self):\n             else:\n                 continue\n \n-            eventname = translate(\n-                event.token, context=self.request, domain=\'plone\')\n-            selector.append({\'id\': get_trigger_class(event.value),\n-                             \'title\': eventname})\n+            eventname = translate(event.token, context=self.request, domain="plone")\n+            selector.append({"id": get_trigger_class(event.value), "title": eventname})\n \n         return selector\n \n     def statesToShow(self):\n         return (\n             {\n-                \'id\': \'state-enabled\',\n-                \'title\': _(u\'label_rule_enabled\', default=u\'Enabled\'),\n+                "id": "state-enabled",\n+                "title": _("label_rule_enabled", default="Enabled"),\n             },\n             {\n-                \'id\': \'state-disabled\',\n-                \'title\': _(u\'label_rule_disabled\', default=u\'Disabled\'),\n+                "id": "state-disabled",\n+                "title": _("label_rule_disabled", default="Disabled"),\n             },\n         )\n \n@@ -121,41 +121,42 @@ def _getRules(self):\n \n     @memoize\n     def _events(self):\n-        eventsFactory = getUtility(\n-            IVocabularyFactory, name=\'plone.contentrules.events\')\n+        eventsFactory = getUtility(IVocabularyFactory, name="plone.contentrules.events")\n         return eventsFactory(self.context)\n \n     def delete_rule(self):\n         self.authorize()\n-        rule_id = self.request[\'rule-id\']\n+        rule_id = self.request["rule-id"]\n         storage = getUtility(IRuleStorage)\n         del storage[rule_id]\n-        return \'ok\'\n+        return "ok"\n \n     def enable_rule(self):\n         self.authorize()\n         storage = getUtility(IRuleStorage)\n-        rule_id = self.request[\'rule-id\']\n+        rule_id = self.request["rule-id"]\n         storage[rule_id].enabled = True\n-        return \'ok\'\n+        return "ok"\n \n     def disable_rule(self):\n         self.authorize()\n         storage = getUtility(IRuleStorage)\n-        rule_id = self.request[\'rule-id\']\n+        rule_id = self.request["rule-id"]\n         storage[rule_id].enabled = False\n-        return \'ok\'\n+        return "ok"\n \n     def globally_disable(self):\n         self.authorize()\n         storage = getUtility(IRuleStorage)\n         storage.active = False\n-        return translate(_(\'Content rules has been globally disabled\'),\n-                         context=self.request)\n+        return translate(\n+            _("Content rules has been globally disabled"), context=self.request\n+        )\n \n     def globally_enable(self):\n         self.authorize()\n         storage = getUtility(IRuleStorage)\n         storage.active = True\n-        return translate(_(\'Content rules has been globally enabled\'),\n-                         context=self.request)\n+        return translate(\n+            _("Content rules has been globally enabled"), context=self.request\n+        )\ndiff --git a/plone/app/contentrules/browser/elements.py b/plone/app/contentrules/browser/elements.py\nindex 97879c6..eb06937 100644\n--- a/plone/app/contentrules/browser/elements.py\n+++ b/plone/app/contentrules/browser/elements.py\n@@ -1,8 +1,7 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from Acquisition import aq_inner\n-from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules import api\n+from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.rule import get_assignments\n from plone.contentrules.engine import utils\n from plone.contentrules.rule.interfaces import IRuleAction\n@@ -21,63 +20,61 @@\n \n \n class ManageElements(BrowserView):\n-    """Manage elements in a rule\n-    """\n+    """Manage elements in a rule"""\n \n-    template = ViewPageTemplateFile(\'templates/manage-elements.pt\')\n+    template = ViewPageTemplateFile("templates/manage-elements.pt")\n \n     def __call__(self):\n         redirect = False\n         form = self.request.form\n-        idx = form.get(\'element_id\', 0)\n+        idx = form.get("element_id", 0)\n \n         rule = aq_inner(self.context)\n         status = IStatusMessage(self.request)\n \n-        if \'form.button.Save\' in form:\n+        if "form.button.Save" in form:\n             self.authorize()\n-            rule.title = form.get(\'title\', rule.title)\n-            rule.description = form.get(\'description\', rule.description)\n-            rule.stop = bool(form.get(\'stopExecuting\', False))\n-            rule.cascading = bool(form.get(\'cascading\', False))\n-            rule.enabled = bool(form.get(\'enabled\', False))\n-            status.addStatusMessage(_(u\'Changes saved.\'), type=\'info\')\n-        elif \'form.button.EditCondition\' in form:\n-            editview = self.conditions()[idx][\'editview\']\n+            rule.title = form.get("title", rule.title)\n+            rule.description = form.get("description", rule.description)\n+            rule.stop = bool(form.get("stopExecuting", False))\n+            rule.cascading = bool(form.get("cascading", False))\n+            rule.enabled = bool(form.get("enabled", False))\n+            status.addStatusMessage(_("Changes saved."), type="info")\n+        elif "form.button.EditCondition" in form:\n+            editview = self.conditions()[idx]["editview"]\n             self.request.response.redirect(editview)\n             redirect = True\n-        elif \'form.button.DeleteCondition\' in form:\n+        elif "form.button.DeleteCondition" in form:\n             self.authorize()\n             del rule.conditions[idx]\n-            status.addStatusMessage(_(u\'Condition deleted.\'), type=\'info\')\n-        elif \'form.button.MoveConditionUp\' in form:\n+            status.addStatusMessage(_("Condition deleted."), type="info")\n+        elif "form.button.MoveConditionUp" in form:\n             self._move_up(rule.conditions, idx)\n-            status.addStatusMessage(_(u\'Condition moved up.\'), type=\'info\')\n-        elif \'form.button.MoveConditionDown\' in form:\n+            status.addStatusMessage(_("Condition moved up."), type="info")\n+        elif "form.button.MoveConditionDown" in form:\n             self._move_down(rule.conditions, idx)\n-            status.addStatusMessage(_(u\'Condition moved down.\'), type=\'info\')\n-        elif \'form.button.EditAction\' in form:\n-            editview = self.actions()[idx][\'editview\']\n+            status.addStatusMessage(_("Condition moved down."), type="info")\n+        elif "form.button.EditAction" in form:\n+            editview = self.actions()[idx]["editview"]\n             self.request.response.redirect(editview)\n             redirect = True\n-        elif \'form.button.DeleteAction\' in form:\n+        elif "form.button.DeleteAction" in form:\n             self.authorize()\n             del rule.actions[idx]\n-            status.addStatusMessage(_(u\'Action deleted.\'), type=\'info\')\n-        elif \'form.button.MoveActionUp\' in form:\n+            status.addStatusMessage(_("Action deleted."), type="info")\n+        elif "form.button.MoveActionUp" in form:\n             self._move_up(rule.actions, idx)\n-            status.addStatusMessage(_(u\'Action moved up.\'), type=\'info\')\n-        elif \'form.button.MoveActionDown\' in form:\n+            status.addStatusMessage(_("Action moved up."), type="info")\n+        elif "form.button.MoveActionDown" in form:\n             self._move_down(rule.actions, idx)\n-            status.addStatusMessage(_(u\'Action moved down.\'), type=\'info\')\n-        elif \'form.button.ApplyOnWholeSite\' in form:\n+            status.addStatusMessage(_("Action moved down."), type="info")\n+        elif "form.button.ApplyOnWholeSite" in form:\n             self.globally_assign()\n             IStatusMessage(self.request).add(\n-                _(u\'The rule has been enabled on site root \'\n-                  u\'and all its subfolders\')\n+                _("The rule has been enabled on site root " "and all its subfolders")\n             )\n \n-        self.view_url = self.base_url + \'/@@manage-elements\'\n+        self.view_url = self.base_url + "/@@manage-elements"\n         self.rule_title = self.context.title\n         self.rule_description = self.context.description\n         self.rule_stop = self.context.stop\n@@ -88,8 +85,9 @@ def __call__(self):\n             return self.template()\n \n     def authorize(self):\n-        authenticator = getMultiAdapter((self.context, self.request),\n-                                        name=u\'authenticator\')\n+        authenticator = getMultiAdapter(\n+            (self.context, self.request), name="authenticator"\n+        )\n         if not authenticator.verify():\n             raise Unauthorized\n \n@@ -98,13 +96,12 @@ def base_url(self):\n         return aq_inner(self.context).absolute_url()\n \n     def rule_event(self):\n-        eventsFactory = getUtility(IVocabularyFactory,\n-                                   name=\'plone.contentrules.events\')\n+        eventsFactory = getUtility(IVocabularyFactory, name="plone.contentrules.events")\n         for e in eventsFactory(self.context):\n             if e.value == self.context.event:\n-                return translate(e.token, context=self.request, domain=\'plone\')\n+                return translate(e.token, context=self.request, domain="plone")\n \n-        return \'Unknown event\'  # should not happen\n+        return "Unknown event"  # should not happen\n \n     @memoize\n     def actions(self):\n@@ -112,7 +109,7 @@ def actions(self):\n         for name, utility in getUtilitiesFor(IRuleAction):\n             actions[name] = utility\n \n-        return self._populate_info(self.context.actions, actions, \'action\')\n+        return self._populate_info(self.context.actions, actions, "action")\n \n     @memoize\n     def conditions(self):\n@@ -120,18 +117,20 @@ def conditions(self):\n         for name, utility in getUtilitiesFor(IRuleCondition):\n             conditions[name] = utility\n \n-        return self._populate_info(self.context.conditions,\n-                                   conditions, \'condition\')\n+        return self._populate_info(self.context.conditions, conditions, "condition")\n \n     def addable_conditions(self):\n         rule = aq_inner(self.context)\n \n         info = []\n         for element in utils.allAvailableConditions(rule.event):\n-            info.append({\n-                \'title\': element.title,\n-                \'description\': element.description,\n-                \'addview\': element.addview})\n+            info.append(\n+                {\n+                    "title": element.title,\n+                    "description": element.description,\n+                    "addview": element.addview,\n+                }\n+            )\n \n         return info\n \n@@ -140,10 +139,13 @@ def addable_actions(self):\n \n         info = []\n         for element in utils.allAvailableActions(rule.event):\n-            info.append({\n-                \'title\': element.title,\n-                \'description\': element.description,\n-                \'addview\': element.addview})\n+            info.append(\n+                {\n+                    "title": element.title,\n+                    "description": element.description,\n+                    "addview": element.addview,\n+                }\n+            )\n \n         return info\n \n@@ -151,28 +153,33 @@ def assignments(self):\n         rule = aq_inner(self.context)\n         paths = set(get_assignments(rule))\n \n-        site = getToolByName(rule, \'portal_url\').getPortalObject()\n-        site_path = \'/\'.join(site.getPhysicalPath())\n+        site = getToolByName(rule, "portal_url").getPortalObject()\n+        site_path = "/".join(site.getPhysicalPath())\n \n         info = []\n         if site_path in paths:\n             paths.remove(site_path)\n-            info.append({\n-                \'url\': site.absolute_url(),\n-                \'title\': site.title_or_id(),\n-                \'description\': site.Description(),\n-                \'icon\': \'plone-home\'\n-                })\n-\n-        catalog = getToolByName(rule, \'portal_catalog\')\n-        for a in catalog(path=dict(query=list(paths), depth=0),\n-                         sort_on=\'sortable_title\'):\n-            info.append({\n-                \'url\': a.getURL(),\n-                \'title\': a.Title or a.getId,\n-                \'description\': a.Description,\n-                \'icon\': f\'contenttype/{a.portal_type.lower()}\'\n-                })\n+            info.append(\n+                {\n+                    "url": site.absolute_url(),\n+                    "title": site.title_or_id(),\n+                    "description": site.Description(),\n+                    "icon": "plone-home",\n+                }\n+            )\n+\n+        catalog = getToolByName(rule, "portal_catalog")\n+        for a in catalog(\n+            path=dict(query=list(paths), depth=0), sort_on="sortable_title"\n+        ):\n+            info.append(\n+                {\n+                    "url": a.getURL(),\n+                    "title": a.Title or a.getId,\n+                    "description": a.Description,\n+                    "icon": f"contenttype/{a.portal_type.lower()}",\n+                }\n+            )\n \n         return info\n \n@@ -195,21 +202,24 @@ def _populate_info(self, elements, meta, namespace):\n \n             editview = None\n             if descriptor.editview:\n-                editview = \'{0}/++{1}++{2}/{3}\'.format(\n+                editview = "{}/++{}++{}/{}".format(\n                     base_url,\n                     namespace,\n                     idx,\n                     descriptor.editview,\n                 )\n \n-            info.append({\n-                \'title\': descriptor.title,\n-                \'description\': descriptor.description,\n-                \'summary\': data.summary,\n-                \'editview\': editview,\n-                \'first\': (idx == 0),\n-                \'last\': (idx == last),\n-                \'idx\': idx})\n+            info.append(\n+                {\n+                    "title": descriptor.title,\n+                    "description": descriptor.description,\n+                    "summary": data.summary,\n+                    "editview": editview,\n+                    "first": (idx == 0),\n+                    "last": (idx == last),\n+                    "idx": idx,\n+                }\n+            )\n         return info\n \n     def _move_up(self, elements, idx):\n@@ -226,5 +236,5 @@ def _move_down(self, elements, idx):\n \n     def globally_assign(self):\n         self.authorize()\n-        portal = getToolByName(self.context, \'portal_url\').getPortalObject()\n+        portal = getToolByName(self.context, "portal_url").getPortalObject()\n         api.assign_rule(portal, self.context.__name__)\ndiff --git a/plone/app/contentrules/browser/formhelper.py b/plone/app/contentrules/browser/formhelper.py\nindex 8e321b4..7dafd6f 100644\n--- a/plone/app/contentrules/browser/formhelper.py\n+++ b/plone/app/contentrules/browser/formhelper.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from plone.app.contentrules import PloneMessageFactory as _\n@@ -36,20 +35,20 @@ def create(self, data):\n         def create(self):\n             return MyAssignment()\n     """\n+\n     ignoreContext = True\n \n     def updateActions(self):\n-        super(AddForm, self).updateActions()\n-        self.actions[\'save\'].addClass(\'btn btn-primary\')\n-        self.actions[\'cancel\'].addClass(\'btn btn-secondary\')\n+        super().updateActions()\n+        self.actions["save"].addClass("btn btn-primary")\n+        self.actions["cancel"].addClass("btn btn-secondary")\n \n     def nextURL(self):\n         rule = aq_parent(aq_inner(self.context))\n         context = aq_parent(aq_inner(rule))\n-        url = str(getMultiAdapter(\n-            (context, self.request), name=u\'absolute_url\'))\n-        focus = self.context.id.strip(\'+\')\n-        return \'{0}/++rule++{1}/@@manage-elements#{2}\'.format(\n+        url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n+        focus = self.context.id.strip("+")\n+        return "{}/++rule++{}/@@manage-elements#{}".format(\n             url,\n             rule.__name__,\n             focus,\n@@ -58,7 +57,7 @@ def nextURL(self):\n     def add(self, content):\n         self.context.add(content)\n \n-    @button.buttonAndHandler(_(u\'label_save\', default=u\'Save\'), name=\'save\')\n+    @button.buttonAndHandler(_("label_save", default="Save"), name="save")\n     def handle_save_action(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -71,14 +70,14 @@ def handle_save_action(self, action):\n             self.request.response.redirect(self.nextURL())\n \n     @button.buttonAndHandler(\n-        _(u\'label_cancel\', default=u\'Cancel\'),\n-        name=\'cancel\',\n+        _("label_cancel", default="Cancel"),\n+        name="cancel",\n     )\n     def handle_cancel_action(self, action):\n         nextURL = self.nextURL()\n         if nextURL:\n             self.request.response.redirect(self.nextURL())\n-        return \'\'\n+        return ""\n \n \n class NullAddForm(BrowserView):\n@@ -97,30 +96,28 @@ def __call__(self):\n         nextURL = self.nextURL()\n         if nextURL:\n             self.request.response.redirect(self.nextURL())\n-        return \'\'\n+        return ""\n \n     def nextURL(self):\n         rule = aq_parent(aq_inner(self.context))\n         context = aq_parent(aq_inner(rule))\n-        url = str(getMultiAdapter(\n-            (context, self.request), name=u\'absolute_url\'))\n-        return \'{0}/++rule++{1}/@@manage-elements\'.format(url, rule.__name__)\n+        url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n+        return f"{url}/++rule++{rule.__name__}/@@manage-elements"\n \n     def create(self):\n-        raise NotImplementedError(\'concrete classes must implement create()\')\n+        raise NotImplementedError("concrete classes must implement create()")\n \n \n @implementer(IContentRulesForm)\n class EditForm(AutoExtensibleForm, form.EditForm):\n-    """An edit form for rule elements.\n-    """\n+    """An edit form for rule elements."""\n \n     def updateActions(self):\n-        super(EditForm, self).updateActions()\n-        self.actions[\'save\'].addClass(\'btn btn-primary\')\n-        self.actions[\'cancel\'].addClass(\'btn btn-secondary\')\n+        super().updateActions()\n+        self.actions["save"].addClass("btn btn-primary")\n+        self.actions["cancel"].addClass("btn btn-secondary")\n \n-    @button.buttonAndHandler(_(u\'label_save\', default=u\'Save\'), name=\'save\')\n+    @button.buttonAndHandler(_("label_save", default="Save"), name="save")\n     def handle_save_action(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -130,26 +127,25 @@ def handle_save_action(self, action):\n         nextURL = self.nextURL()\n         if nextURL:\n             self.request.response.redirect(self.nextURL())\n-        return \'\'\n+        return ""\n \n     @button.buttonAndHandler(\n-        _(u\'label_cancel\', default=u\'Cancel\'),\n-        name=\'cancel\',\n+        _("label_cancel", default="Cancel"),\n+        name="cancel",\n     )\n     def handle_cancel_action(self, action):\n         nextURL = self.nextURL()\n         if nextURL:\n             self.request.response.redirect(self.nextURL())\n-        return \'\'\n+        return ""\n \n     def nextURL(self):\n         element = aq_inner(self.context)\n         rule = aq_parent(element)\n         context = aq_parent(rule)\n-        url = str(getMultiAdapter(\n-            (context, self.request), name=u\'absolute_url\'))\n-        focus = self.context.id.strip(\'+\')\n-        return \'{0}/++rule++{1}/@@manage-elements#{2}\'.format(\n+        url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n+        focus = self.context.id.strip("+")\n+        return "{}/++rule++{}/@@manage-elements#{}".format(\n             url,\n             rule.__name__,\n             focus,\n@@ -158,4 +154,4 @@ def nextURL(self):\n \n class ContentRuleFormWrapper(layout.FormWrapper):\n \n-    index = ViewPageTemplateFile(\'templates/contentrules-pageform.pt\')\n+    index = ViewPageTemplateFile("templates/contentrules-pageform.pt")\ndiff --git a/plone/app/contentrules/browser/info.py b/plone/app/contentrules/browser/info.py\nindex 9026c8e..2b2f2ea 100644\n--- a/plone/app/contentrules/browser/info.py\n+++ b/plone/app/contentrules/browser/info.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from plone.contentrules.engine.interfaces import IRuleAssignable\n from plone.contentrules.engine.interfaces import IRuleStorage\n@@ -7,17 +6,15 @@\n \n \n class ContentRulesInfo(BrowserView):\n-\n     def show_rules_tab(self):\n-        """Whether or not the rules tab should be shown\n-        """\n+        """Whether or not the rules tab should be shown"""\n \n         if not IRuleAssignable.providedBy(self.context):\n             return False\n \n         check_permission = getSecurityManager().checkPermission\n         can_manage_rules = check_permission(\n-            \'Content rules: Manage rules\',\n+            "Content rules: Manage rules",\n             self.context,\n         )\n         if not can_manage_rules:\ndiff --git a/plone/app/contentrules/browser/interfaces.py b/plone/app/contentrules/browser/interfaces.py\nindex 4d60466..a59d47d 100644\n--- a/plone/app/contentrules/browser/interfaces.py\n+++ b/plone/app/contentrules/browser/interfaces.py\n@@ -1,20 +1,16 @@\n-# -*- coding: utf-8 -*-\n from zope.browser.interfaces import IAdding\n from zope.interface import Interface\n \n \n class IContentRulesInfo(Interface):\n-    """Site-wide information about content rules\n-    """\n+    """Site-wide information about content rules"""\n \n     def show_rules_tab():\n-        """Determine whether or not the rules tab should be shown.\n-        """\n+        """Determine whether or not the rules tab should be shown."""\n \n \n class IContentRulesControlPanel(Interface):\n-    """Marker interface for rules control panel view\n-    """\n+    """Marker interface for rules control panel view"""\n \n     def globally_disabled():\n         """Wether content rules are globally disabled or not"""\n@@ -43,5 +39,4 @@ class IRuleActionAdding(IRuleElementAdding):\n \n \n class IContentRulesForm(Interface):\n-    """Marker interface for forms that need content rules layout\n-    """\n+    """Marker interface for forms that need content rules layout"""\ndiff --git a/plone/app/contentrules/browser/navigation.py b/plone/app/contentrules/browser/navigation.py\nindex 6238959..4bb7bda 100644\n--- a/plone/app/contentrules/browser/navigation.py\n+++ b/plone/app/contentrules/browser/navigation.py\n@@ -1,25 +1,23 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules import PloneMessageFactory as _\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.browser.navigation import PhysicalNavigationBreadcrumbs\n \n \n class RuleBreadcrumbs(PhysicalNavigationBreadcrumbs):\n-\n     def breadcrumbs(self):\n-        portal_url = getToolByName(self.context, \'portal_url\')()\n+        portal_url = getToolByName(self.context, "portal_url")()\n         return (\n             {\n-                \'absolute_url\': \'{0}/@@rules-controlpanel\'.format(portal_url),\n-                \'Title\': _(\n-                    \'title_manage_contentrules\',\n-                    default=u\'Content Rules\',\n+                "absolute_url": f"{portal_url}/@@rules-controlpanel",\n+                "Title": _(\n+                    "title_manage_contentrules",\n+                    default="Content Rules",\n                 ),\n             },\n             {\n-                \'absolute_url\': \'{0}/@@manage-elements\'.format(\n+                "absolute_url": "{}/@@manage-elements".format(\n                     self.context.absolute_url(),\n                 ),\n-                \'Title\': self.context.title or self.context.id,\n+                "Title": self.context.title or self.context.id,\n             },\n         )\ndiff --git a/plone/app/contentrules/browser/rule.py b/plone/app/contentrules/browser/rule.py\nindex 89d800d..caaa6f1 100644\n--- a/plone/app/contentrules/browser/rule.py\n+++ b/plone/app/contentrules/browser/rule.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from plone.app.contentrules import PloneMessageFactory as _\n@@ -6,32 +5,33 @@\n from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper\n from plone.app.contentrules.browser.formhelper import EditForm\n from plone.app.contentrules.rule import Rule\n+from plone.base.utils import base_hasattr\n from plone.contentrules.rule.interfaces import IRuleConfiguration\n-from Products.CMFPlone.utils import base_hasattr\n from z3c.form.form import applyChanges\n from zope.component import getMultiAdapter\n \n \n class RuleAddForm(AddForm):\n-    """An add form for rules.\n-    """\n+    """An add form for rules."""\n+\n     schema = IRuleConfiguration\n     ignoreContext = True\n-    label = _(u\'Add Rule\')\n-    description = _(u\'Add a new rule. Once complete, you can manage the \'\n-                    u"rule\'s actions and conditions separately.")\n+    label = _("Add Rule")\n+    description = _(\n+        "Add a new rule. Once complete, you can manage the "\n+        "rule\'s actions and conditions separately."\n+    )\n \n     def nextURL(self):\n         context = aq_parent(aq_inner(self.context))\n-        url = str(getMultiAdapter(\n-            (context, self.request), name=u\'absolute_url\'))\n-        if base_hasattr(self.context, \'_chosen_name\'):\n-            return \'{0}/++rule++{1}/@@manage-elements\'.format(\n+        url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n+        if base_hasattr(self.context, "_chosen_name"):\n+            return "{}/++rule++{}/@@manage-elements".format(\n                 url,\n                 self.context._chosen_name,\n             )\n         else:\n-            return \'{0}/@@rules-controlpanel\'.format(url)\n+            return f"{url}/@@rules-controlpanel"\n \n     def create(self, data):\n         rule = Rule()\n@@ -44,17 +44,16 @@ class RuleAddFormView(ContentRuleFormWrapper):\n \n \n class RuleEditForm(EditForm):\n-    """An edit form for rules.\n-    """\n+    """An edit form for rules."""\n+\n     schema = IRuleConfiguration\n-    label = _(u\'Edit Rule\')\n-    description = _(u\'Edit an existing rule.\')\n+    label = _("Edit Rule")\n+    description = _("Edit an existing rule.")\n \n     def nextURL(self):\n         context = aq_parent(aq_inner(self.context))\n-        url = str(getMultiAdapter(\n-            (context, self.request), name=u\'absolute_url\'))\n-        return url + \'/@@rules-controlpanel\'\n+        url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n+        return url + "/@@rules-controlpanel"\n \n \n class RuleEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/browser/traversal.py b/plone/app/contentrules/browser/traversal.py\nindex 3fdc208..70416f9 100644\n--- a/plone/app/contentrules/browser/traversal.py\n+++ b/plone/app/contentrules/browser/traversal.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.contentrules.engine.interfaces import IRuleStorage\n from plone.contentrules.rule.interfaces import IRule\n from Products.CMFCore.interfaces import ISiteRoot\n@@ -11,7 +10,7 @@\n \n @adapter(ISiteRoot, IBrowserRequest)\n @implementer(ITraversable)\n-class RuleNamespace(object):\n+class RuleNamespace:\n     """Used to traverse to a rule.\n \n     Traversing to portal/++rule++foo will retrieve the rule with id \'foo\'\n@@ -29,7 +28,7 @@ def traverse(self, name, ignore):\n \n @adapter(IRule, IBrowserRequest)\n @implementer(ITraversable)\n-class RuleConditionNamespace(object):\n+class RuleConditionNamespace:\n     """Used to traverse to a rule condition\n \n     Traversing to portal/++rule++foo/++condition++1 will retrieve the second\n@@ -42,7 +41,7 @@ def __init__(self, context, request=None):\n \n     def traverse(self, name, ignore):\n         condition = self.context.conditions[int(name)]\n-        traversal_id = \'++condition++{0}\'.format(name)\n+        traversal_id = f"++condition++{name}"\n         if condition.id != traversal_id:\n             condition.__name__ = condition.id = traversal_id\n         return condition\n@@ -50,7 +49,7 @@ def traverse(self, name, ignore):\n \n @adapter(IRule, IBrowserRequest)\n @implementer(ITraversable)\n-class RuleActionNamespace(object):\n+class RuleActionNamespace:\n     """Used to traverse to a rule condition\n \n     Traversing to portal/++rule++foo/++action++1 will retrieve the second\n@@ -63,7 +62,7 @@ def __init__(self, context, request=None):\n \n     def traverse(self, name, ignore):\n         action = self.context.actions[int(name)]\n-        traversal_id = \'++action++{0}\'.format(name)\n+        traversal_id = f"++action++{name}"\n         if action.id != traversal_id:\n             action.__name__ = action.id = traversal_id\n         return action\ndiff --git a/plone/app/contentrules/conditions/__init__.py b/plone/app/contentrules/conditions/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/app/contentrules/conditions/__init__.py\n+++ b/plone/app/contentrules/conditions/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/contentrules/conditions/fileextension.py b/plone/app/contentrules/conditions/fileextension.py\nindex a15b7e6..81f7356 100644\n--- a/plone/app/contentrules/conditions/fileextension.py\n+++ b/plone/app/contentrules/conditions/fileextension.py\n@@ -1,9 +1,9 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.browser.formhelper import AddForm\n from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper\n from plone.app.contentrules.browser.formhelper import EditForm\n+from plone.app.contenttypes.interfaces import IFile\n from plone.contentrules.rule.interfaces import IExecutable\n from plone.contentrules.rule.interfaces import IRuleElementData\n from z3c.form import form\n@@ -11,11 +11,6 @@\n from zope.component import adapter\n from zope.interface import implementer\n from zope.interface import Interface\n-from plone.app.contenttypes.interfaces import IFile\n-try:\n-    from Products.ATContentTypes.interfaces import IFileContent\n-except ImportError:\n-    IFileContent = None\n \n \n class IFileExtensionCondition(Interface):\n@@ -25,9 +20,9 @@ class IFileExtensionCondition(Interface):\n     """\n \n     file_extension = schema.TextLine(\n-        title=_(u\'File extension\'),\n-        description=_(u\'The file extension to check for\'),\n-        required=True\n+        title=_("File extension"),\n+        description=_("The file extension to check for"),\n+        required=True,\n     )\n \n \n@@ -38,20 +33,17 @@ class FileExtensionCondition(SimpleItem):\n     Note that we must mix in Explicit to keep Zope 2 security happy.\n     """\n \n-    file_extension = u\'\'\n-    element = \'plone.conditions.FileExtension\'\n+    file_extension = ""\n+    element = "plone.conditions.FileExtension"\n \n     @property\n     def summary(self):\n-        return _(\n-            u\'File extension is ${ext}\',\n-            mapping=dict(ext=self.file_extension)\n-        )\n+        return _("File extension is ${ext}", mapping=dict(ext=self.file_extension))\n \n \n @implementer(IExecutable)\n @adapter(Interface, IFileExtensionCondition, Interface)\n-class FileExtensionConditionExecutor(object):\n+class FileExtensionConditionExecutor:\n     """The executor for this condition.\n \n     This is registered as an adapter in configure.zcml\n@@ -66,33 +58,29 @@ def __call__(self):\n         obj = self.event.object\n \n         if IFile.providedBy(obj):\n-            base_unit = getattr(obj, \'file\', None)\n-            name = getattr(base_unit, \'filename\', None)\n-        elif IFileContent is None:\n-            return False\n-        elif not IFileContent.providedBy(obj):\n-            return False\n+            base_unit = getattr(obj, "file", None)\n+            name = getattr(base_unit, "filename", None)\n         else:\n             base_unit = obj.getFile()\n-            get_filename = getattr(base_unit, \'getFilename\', None)\n+            get_filename = getattr(base_unit, "getFilename", None)\n             if not get_filename:\n                 return False\n             name = get_filename()\n \n-        extension = name[name.rfind(\'.\') + 1:]\n+        extension = name[name.rfind(".") + 1 :]\n         return extension == self.element.file_extension\n \n \n class FileExtensionAddForm(AddForm):\n-    """An add form for file extension rule conditions.\n-    """\n+    """An add form for file extension rule conditions."""\n+\n     schema = IFileExtensionCondition\n-    label = _(u\'Add File Extension Condition\')\n+    label = _("Add File Extension Condition")\n     description = _(\n-        u\'A file extension condition can restrict a rule from \'\n-        u\'executing unless the target is a File with a particular extension.\'\n+        "A file extension condition can restrict a rule from "\n+        "executing unless the target is a File with a particular extension."\n     )\n-    form_name = _(u\'Configure element\')\n+    form_name = _("Configure element")\n \n     def create(self, data):\n         c = FileExtensionCondition()\n@@ -109,13 +97,14 @@ class FileExtensionEditForm(EditForm):\n \n     z3c.form does all the magic here.\n     """\n+\n     schema = IFileExtensionCondition\n-    label = _(u\'Edit File Extension Condition\')\n+    label = _("Edit File Extension Condition")\n     description = _(\n-        u\'A file extension condition can restrict a rule from \'\n-        u\'executing unless the target is a File with a particular extension.\'\n+        "A file extension condition can restrict a rule from "\n+        "executing unless the target is a File with a particular extension."\n     )\n-    form_name = _(u\'Configure element\')\n+    form_name = _("Configure element")\n \n \n class FileExtensionEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/conditions/group.py b/plone/app/contentrules/conditions/group.py\nindex 8b6f554..b897f31 100644\n--- a/plone/app/contentrules/conditions/group.py\n+++ b/plone/app/contentrules/conditions/group.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.browser.formhelper import AddForm\n@@ -21,10 +20,10 @@ class IGroupCondition(Interface):\n     """\n \n     group_names = schema.Set(\n-        title=_(u\'Group name\'),\n-        description=_(u\'The name of the group.\'),\n+        title=_("Group name"),\n+        description=_("The name of the group."),\n         required=True,\n-        value_type=schema.Choice(vocabulary=\'plone.app.vocabularies.Groups\')\n+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.Groups"),\n     )\n \n \n@@ -36,19 +35,18 @@ class GroupCondition(SimpleItem):\n     """\n \n     group_names = []\n-    element = \'plone.conditions.Group\'\n+    element = "plone.conditions.Group"\n \n     @property\n     def summary(self):\n         return _(\n-            u\'Groups are: ${names}\',\n-            mapping=dict(names=\', \'.join(self.group_names))\n+            "Groups are: ${names}", mapping=dict(names=", ".join(self.group_names))\n         )\n \n \n @implementer(IExecutable)\n @adapter(Interface, IGroupCondition, Interface)\n-class GroupConditionExecutor(object):\n+class GroupConditionExecutor:\n     """The executor for this condition.\n \n     This is registered as an adapter in configure.zcml\n@@ -60,14 +58,12 @@ def __init__(self, context, element, event):\n         self.event = event\n \n     def __call__(self):\n-        portal_membership = getToolByName(\n-            self.context, \'portal_membership\', None)\n-        portal_groups = getToolByName(self.context, \'portal_groups\', None)\n+        portal_membership = getToolByName(self.context, "portal_membership", None)\n+        portal_groups = getToolByName(self.context, "portal_groups", None)\n         if portal_groups is None or portal_groups is None:\n             return False\n         member = portal_membership.getAuthenticatedMember()\n-        groupIds = [g.getId()\n-                    for g in portal_groups.getGroupsByUserId(member.getId())]\n+        groupIds = [g.getId() for g in portal_groups.getGroupsByUserId(member.getId())]\n         for g in self.element.group_names:\n             if g in groupIds:\n                 return True\n@@ -75,15 +71,15 @@ def __call__(self):\n \n \n class GroupAddForm(AddForm):\n-    """An add form for group rule conditions.\n-    """\n+    """An add form for group rule conditions."""\n+\n     schema = IGroupCondition\n-    label = _(u\'Add Group Condition\')\n+    label = _("Add Group Condition")\n     description = _(\n-        u\'A group condition can prevent a rule from executing \'\n-        u\'unless the current user is a member of a particular group.\'\n+        "A group condition can prevent a rule from executing "\n+        "unless the current user is a member of a particular group."\n     )\n-    form_name = _(u\'Configure element\')\n+    form_name = _("Configure element")\n \n     def create(self, data):\n         c = GroupCondition()\n@@ -96,15 +92,15 @@ class GroupAddFormView(ContentRuleFormWrapper):\n \n \n class GroupEditForm(EditForm):\n-    """An edit form for group conditions\n-    """\n+    """An edit form for group conditions"""\n+\n     schema = IGroupCondition\n-    label = _(u\'Edit Group Condition\')\n+    label = _("Edit Group Condition")\n     description = _(\n-        u\'A group condition can prevent a rule from executing \'\n-        u\'unless the current user is a member of a particular group.\'\n+        "A group condition can prevent a rule from executing "\n+        "unless the current user is a member of a particular group."\n     )\n-    form_name = _(u\'Configure element\')\n+    form_name = _("Configure element")\n \n \n class GroupEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/conditions/portaltype.py b/plone/app/contentrules/conditions/portaltype.py\nindex 3919821..81d1f7e 100644\n--- a/plone/app/contentrules/conditions/portaltype.py\n+++ b/plone/app/contentrules/conditions/portaltype.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from OFS.SimpleItem import SimpleItem\n@@ -13,10 +12,10 @@\n from z3c.form import form\n from zope import schema\n from zope.component import adapter\n+from zope.component.hooks import getSite\n from zope.i18n import translate\n from zope.interface import implementer\n from zope.interface import Interface\n-from zope.component.hooks import getSite\n \n \n class IPortalTypeCondition(Interface):\n@@ -26,12 +25,12 @@ class IPortalTypeCondition(Interface):\n     """\n \n     check_types = schema.Set(\n-        title=_(u\'Content type\'),\n-        description=_(u\'The content type to check for.\'),\n+        title=_("Content type"),\n+        description=_("The content type to check for."),\n         required=True,\n         value_type=schema.Choice(\n-            vocabulary=\'plone.app.vocabularies.ReallyUserFriendlyTypes\'\n-        )\n+            vocabulary="plone.app.vocabularies.ReallyUserFriendlyTypes"\n+        ),\n     )\n \n \n@@ -43,27 +42,24 @@ class PortalTypeCondition(SimpleItem):\n     """\n \n     check_types = []\n-    element = \'plone.conditions.PortalType\'\n+    element = "plone.conditions.PortalType"\n \n     @property\n     def summary(self):\n         portal = getSite()\n-        portal_types = getToolByName(portal, \'portal_types\')\n+        portal_types = getToolByName(portal, "portal_types")\n         titles = []\n         for name in self.check_types:\n             fti = getattr(portal_types, name, None)\n             if fti is not None:\n                 title = translate(fti.Title(), context=portal.REQUEST)\n                 titles.append(title)\n-        return _(\n-            u\'Content types are: ${names}\',\n-            mapping=dict(names=\', \'.join(titles))\n-        )\n+        return _("Content types are: ${names}", mapping=dict(names=", ".join(titles)))\n \n \n @implementer(IExecutable)\n @adapter(Interface, IPortalTypeCondition, Interface)\n-class PortalTypeConditionExecutor(object):\n+class PortalTypeConditionExecutor:\n     """The executor for this condition.\n \n     This is registered as an adapter in configure.zcml\n@@ -76,7 +72,7 @@ def __init__(self, context, element, event):\n \n     def __call__(self):\n         obj = aq_inner(self.event.object)\n-        if not hasattr(aq_base(obj), \'getTypeInfo\'):\n+        if not hasattr(aq_base(obj), "getTypeInfo"):\n             return False\n         elif ITypesTool.providedBy(obj):\n             # types tool have a getTypeInfo method\n@@ -89,15 +85,14 @@ def __call__(self):\n \n \n class PortalTypeAddForm(AddForm):\n-    """An add form for portal type conditions.\n-    """\n+    """An add form for portal type conditions."""\n+\n     schema = IPortalTypeCondition\n-    label = _(u\'Add Content Type Condition\')\n+    label = _("Add Content Type Condition")\n     description = _(\n-        u\'A portal type condition makes the rule apply only to \'\n-        u\'certain content types.\'\n+        "A portal type condition makes the rule apply only to " "certain content types."\n     )\n-    form_name = _(u\'Configure element\')\n+    form_name = _("Configure element")\n \n     def create(self, data):\n         c = PortalTypeCondition()\n@@ -110,15 +105,14 @@ class PortalTypeAddFormView(ContentRuleFormWrapper):\n \n \n class PortalTypeEditForm(EditForm):\n-    """An edit form for portal type conditions\n-    """\n+    """An edit form for portal type conditions"""\n+\n     schema = IPortalTypeCondition\n-    label = _(u\'Edit Content Type Condition\')\n+    label = _("Edit Content Type Condition")\n     description = _(\n-        u\'A portal type condition makes the rule apply only to certain \'\n-        u\'content types.\'\n+        "A portal type condition makes the rule apply only to certain " "content types."\n     )\n-    form_name = _(u\'Configure element\')\n+    form_name = _("Configure element")\n \n \n class PortalTypeEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/conditions/role.py b/plone/app/contentrules/conditions/role.py\nindex a95ceac..7967310 100644\n--- a/plone/app/contentrules/conditions/role.py\n+++ b/plone/app/contentrules/conditions/role.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n@@ -22,10 +21,10 @@ class IRoleCondition(Interface):\n     """\n \n     role_names = schema.Set(\n-        title=_(u\'Roles\'),\n-        description=_(u\'The roles to check for.\'),\n+        title=_("Roles"),\n+        description=_("The roles to check for."),\n         required=True,\n-        value_type=schema.Choice(vocabulary=\'plone.app.vocabularies.Roles\')\n+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.Roles"),\n     )\n \n \n@@ -37,19 +36,16 @@ class RoleCondition(SimpleItem):\n     """\n \n     role_names = []\n-    element = \'plone.conditions.Role\'\n+    element = "plone.conditions.Role"\n \n     @property\n     def summary(self):\n-        return _(\n-            u\'Roles are: ${names}\',\n-            mapping=dict(names=\', \'.join(self.role_names))\n-        )\n+        return _("Roles are: ${names}", mapping=dict(names=", ".join(self.role_names)))\n \n \n @implementer(IExecutable)\n @adapter(Interface, IRoleCondition, Interface)\n-class RoleConditionExecutor(object):\n+class RoleConditionExecutor:\n     """The executor for this condition.\n \n     This is registered as an adapter in configure.zcml\n@@ -61,13 +57,11 @@ def __init__(self, context, element, event):\n         self.event = event\n \n     def __call__(self):\n-        portal_membership = getToolByName(\n-            self.context, \'portal_membership\', None)\n+        portal_membership = getToolByName(self.context, "portal_membership", None)\n         if portal_membership is None:\n             return False\n         member = portal_membership.getAuthenticatedMember()\n-        roles_in_context = member.getRolesInContext(\n-            aq_inner(self.event.object))\n+        roles_in_context = member.getRolesInContext(aq_inner(self.event.object))\n         for r in self.element.role_names:\n             if r in roles_in_context:\n                 return True\n@@ -75,15 +69,15 @@ def __call__(self):\n \n \n class RoleAddForm(AddForm):\n-    """An add form for role rule conditions.\n-    """\n+    """An add form for role rule conditions."""\n+\n     schema = IRoleCondition\n-    label = _(u\'Add Role Condition\')\n+    label = _("Add Role Condition")\n     description = _(\n-        u\'A role condition can prevent rules from executing unless \'\n-        u\'the current user has a particular role.\'\n+        "A role condition can prevent rules from executing unless "\n+        "the current user has a particular role."\n     )\n-    form_name = _(u\'Configure element\')\n+    form_name = _("Configure element")\n \n     def create(self, data):\n         c = RoleCondition()\n@@ -96,15 +90,15 @@ class RoleAddFormView(ContentRuleFormWrapper):\n \n \n class RoleEditForm(EditForm):\n-    """An edit form for role conditions\n-    """\n+    """An edit form for role conditions"""\n+\n     schema = IRoleCondition\n-    label = _(u\'Add Role Condition\')\n+    label = _("Add Role Condition")\n     description = _(\n-        u\'A role condition can prevent rules from executing unless \'\n-        u\'the current user has a particular role.\'\n+        "A role condition can prevent rules from executing unless "\n+        "the current user has a particular role."\n     )\n-    form_name = _(u\'Configure element\')\n+    form_name = _("Configure element")\n \n \n class RoleEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/conditions/talesexpression.py b/plone/app/contentrules/conditions/talesexpression.py\nindex 1a351b0..e23344e 100644\n--- a/plone/app/contentrules/conditions/talesexpression.py\n+++ b/plone/app/contentrules/conditions/talesexpression.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.browser.formhelper import AddForm\n@@ -23,9 +22,10 @@ class ITalesExpressionCondition(Interface):\n     """\n \n     tales_expression = schema.TextLine(\n-        title=_(u\'TALES expression\'),\n-        description=_(u\'The TALES expression to check.\'),\n-        required=True)\n+        title=_("TALES expression"),\n+        description=_("The TALES expression to check."),\n+        required=True,\n+    )\n \n \n @implementer(ITalesExpressionCondition, IRuleElementData)\n@@ -34,18 +34,20 @@ class TalesExpressionCondition(SimpleItem):\n     element.\n     """\n \n-    tales_expression = \'\'\n-    element = \'plone.conditions.TalesExpression\'\n+    tales_expression = ""\n+    element = "plone.conditions.TalesExpression"\n \n     @property\n     def summary(self):\n-        return _(u\'TALES expression is: ${tales_expression}\',\n-                 mapping={\'tales_expression\': self.tales_expression})\n+        return _(\n+            "TALES expression is: ${tales_expression}",\n+            mapping={"tales_expression": self.tales_expression},\n+        )\n \n \n @implementer(IExecutable)\n @adapter(Interface, ITalesExpressionCondition, Interface)\n-class TalesExpressionConditionExecutor(object):\n+class TalesExpressionConditionExecutor:\n     """The executor for this condition.\n \n     This is registered as an adapter in configure.zcml\n@@ -59,22 +61,24 @@ def __init__(self, context, element, event):\n     def __call__(self):\n         object = self.event.object\n         folder = self.context\n-        portal = getToolByName(folder, \'portal_url\').getPortalObject()\n+        portal = getToolByName(folder, "portal_url").getPortalObject()\n         expression = self.element.tales_expression\n         ec = createExprContext(folder, portal, object)\n         # Workaround CMFCore/PageTemplates issue with unicode missing context\n-        ec.contexts[\'context\'] = ec.contexts[\'here\']\n+        ec.contexts["context"] = ec.contexts["here"]\n         return bool(Expression(expression)(ec))\n \n \n class TalesExpressionAddForm(AddForm):\n-    """An add form for tales expression condition.\n-    """\n+    """An add form for tales expression condition."""\n+\n     schema = ITalesExpressionCondition\n-    label = _(u\'Add TALES Expression Condition\')\n-    description = _(u\'A TALES expression condition makes the rule apply \'\n-                    u\'only if TALES expression is not False in context.\')\n-    form_name = _(u\'Configure element\')\n+    label = _("Add TALES Expression Condition")\n+    description = _(\n+        "A TALES expression condition makes the rule apply "\n+        "only if TALES expression is not False in context."\n+    )\n+    form_name = _("Configure element")\n \n     def create(self, data):\n         c = TalesExpressionCondition()\n@@ -87,13 +91,15 @@ class TalesExpressionAddFormView(ContentRuleFormWrapper):\n \n \n class TalesExpressionEditForm(EditForm):\n-    """An edit form for TALES expression condition\n-    """\n+    """An edit form for TALES expression condition"""\n+\n     schema = ITalesExpressionCondition\n-    label = _(u\'Edit TALES Expression Condition\')\n-    description = _(u\'A TALES expression condition makes the rule apply \'\n-                    u\'only if TALES expression is not False in context.\')\n-    form_name = _(u\'Configure element\')\n+    label = _("Edit TALES Expression Condition")\n+    description = _(\n+        "A TALES expression condition makes the rule apply "\n+        "only if TALES expression is not False in context."\n+    )\n+    form_name = _("Configure element")\n \n \n class TalesExpressionEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/conditions/wfstate.py b/plone/app/contentrules/conditions/wfstate.py\nindex 5f2042a..8cc960c 100644\n--- a/plone/app/contentrules/conditions/wfstate.py\n+++ b/plone/app/contentrules/conditions/wfstate.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.browser.formhelper import AddForm\n@@ -21,12 +20,10 @@ class IWorkflowStateCondition(Interface):\n     """\n \n     wf_states = schema.Set(\n-        title=_(u\'Workflow state\'),\n-        description=_(u\'The workflow states to check for.\'),\n+        title=_("Workflow state"),\n+        description=_("The workflow states to check for."),\n         required=True,\n-        value_type=schema.Choice(\n-            vocabulary=\'plone.app.vocabularies.WorkflowStates\'\n-        )\n+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowStates"),\n     )\n \n \n@@ -37,21 +34,20 @@ class WorkflowStateCondition(SimpleItem):\n     """\n \n     wf_states = []\n-    element = \'plone.conditions.WorkflowState\'\n+    element = "plone.conditions.WorkflowState"\n \n     @property\n     def summary(self):\n         return _(\n-            u\'Workflow states are: ${states}\',\n-            mapping=dict(states=\', \'.join(self.wf_states))\n+            "Workflow states are: ${states}",\n+            mapping=dict(states=", ".join(self.wf_states)),\n         )\n \n \n @implementer(IExecutable)\n @adapter(Interface, IWorkflowStateCondition, Interface)\n-class WorkflowStateConditionExecutor(object):\n-    """The executor for this condition.\n-    """\n+class WorkflowStateConditionExecutor:\n+    """The executor for this condition."""\n \n     def __init__(self, context, element, event):\n         self.context = context\n@@ -59,24 +55,25 @@ def __init__(self, context, element, event):\n         self.event = event\n \n     def __call__(self):\n-        portal_workflow = getToolByName(self.context, \'portal_workflow\', None)\n+        portal_workflow = getToolByName(self.context, "portal_workflow", None)\n         if portal_workflow is None:\n             return False\n-        state = portal_workflow.getInfoFor(\n-            self.event.object, \'review_state\', None)\n+        state = portal_workflow.getInfoFor(self.event.object, "review_state", None)\n         if state is None:\n             return False\n         return state in self.element.wf_states\n \n \n class WorkflowStateAddForm(AddForm):\n-    """An add form for workflow state conditions.\n-    """\n+    """An add form for workflow state conditions."""\n+\n     schema = IWorkflowStateCondition\n-    label = _(u\'Add Workflow State Condition\')\n-    description = _(u\'A workflow state condition can restrict rules to \'\n-                    u\'objects in particular workflow states\')\n-    form_name = _(u\'Configure element\')\n+    label = _("Add Workflow State Condition")\n+    description = _(\n+        "A workflow state condition can restrict rules to "\n+        "objects in particular workflow states"\n+    )\n+    form_name = _("Configure element")\n \n     def create(self, data):\n         c = WorkflowStateCondition()\n@@ -93,11 +90,14 @@ class WorkflowStateEditForm(EditForm):\n \n     z3c.form does all the magic here.\n     """\n+\n     schema = IWorkflowStateCondition\n-    label = _(u\'Edit Workflow State Condition\')\n-    description = _(u\'A workflow state condition can restrict rules to \'\n-                    u\'objects in particular workflow states\')\n-    form_name = _(u\'Configure element\')\n+    label = _("Edit Workflow State Condition")\n+    description = _(\n+        "A workflow state condition can restrict rules to "\n+        "objects in particular workflow states"\n+    )\n+    form_name = _("Configure element")\n \n \n class WorkflowStateEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/conditions/wftransition.py b/plone/app/contentrules/conditions/wftransition.py\nindex a1b914c..ff82a58 100644\n--- a/plone/app/contentrules/conditions/wftransition.py\n+++ b/plone/app/contentrules/conditions/wftransition.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.contentrules import PloneMessageFactory as _\n from plone.app.contentrules.browser.formhelper import AddForm\n@@ -21,12 +20,12 @@ class IWorkflowTransitionCondition(Interface):\n     """\n \n     wf_transitions = schema.Set(\n-        title=_(u\'Workflow transition\'),\n-        description=_(u\'The workflow transitions to check for.\'),\n+        title=_("Workflow transition"),\n+        description=_("The workflow transitions to check for."),\n         required=True,\n         value_type=schema.Choice(\n-            vocabulary=\'plone.app.vocabularies.WorkflowTransitions\'\n-        )\n+            vocabulary="plone.app.vocabularies.WorkflowTransitions"\n+        ),\n     )\n \n \n@@ -37,19 +36,20 @@ class WorkflowTransitionCondition(SimpleItem):\n     """\n \n     wf_transitions = []\n-    element = \'plone.conditions.WorkflowTransition\'\n+    element = "plone.conditions.WorkflowTransition"\n \n     @property\n     def summary(self):\n-        return _(u\'Workflow transitions are: ${transitions}\',\n-                 mapping=dict(transitions=\', \'.join(self.wf_transitions)))\n+        return _(\n+            "Workflow transitions are: ${transitions}",\n+            mapping=dict(transitions=", ".join(self.wf_transitions)),\n+        )\n \n \n @implementer(IExecutable)\n @adapter(Interface, IWorkflowTransitionCondition, IActionSucceededEvent)\n-class WorkflowTransitionConditionExecutor(object):\n-    """The executor for this condition.\n-    """\n+class WorkflowTransitionConditionExecutor:\n+    """The executor for this condition."""\n \n     def __init__(self, context, element, event):\n         self.context = context\n@@ -61,13 +61,15 @@ def __call__(self):\n \n \n class WorkflowTransitionAddForm(AddForm):\n-    """An add form for workflow transition conditions.\n-    """\n+    """An add form for workflow transition conditions."""\n+\n     schema = IWorkflowTransitionCondition\n-    label = _(u\'Add Workflow Transition Condition\')\n-    description = _(u\'A workflow transition condition can restrict rules to \'\n-                    u\'execute only after a certain transition.\')\n-    form_name = _(u\'Configure element\')\n+    label = _("Add Workflow Transition Condition")\n+    description = _(\n+        "A workflow transition condition can restrict rules to "\n+        "execute only after a certain transition."\n+    )\n+    form_name = _("Configure element")\n \n     def create(self, data):\n         c = WorkflowTransitionCondition()\n@@ -84,11 +86,14 @@ class WorkflowTransitionEditForm(EditForm):\n \n     z3c.form does all the magic here.\n     """\n+\n     schema = IWorkflowTransitionCondition\n-    label = _(u\'Edit Workflow Transition Condition\')\n-    description = _(u\'A workflow transition condition can restrict rules to \'\n-                    u\'execute only after a certain transition.\')\n-    form_name = _(u\'Configure element\')\n+    label = _("Edit Workflow Transition Condition")\n+    description = _(\n+        "A workflow transition condition can restrict rules to "\n+        "execute only after a certain transition."\n+    )\n+    form_name = _("Configure element")\n \n \n class WorkflowTransitionEditFormView(ContentRuleFormWrapper):\ndiff --git a/plone/app/contentrules/configure.zcml b/plone/app/contentrules/configure.zcml\nindex 1262ffc..eca3cbe 100644\n--- a/plone/app/contentrules/configure.zcml\n+++ b/plone/app/contentrules/configure.zcml\n@@ -27,18 +27,6 @@\n         <implements interface="plone.contentrules.engine.interfaces.IRuleAssignable" />\n     </class>\n \n-    <configure zcml:condition="installed Products.ATContentTypes">\n-\n-      <class class="Products.ATContentTypes.content.folder.ATFolder">\n-          <implements interface="plone.contentrules.engine.interfaces.IRuleAssignable" />\n-      </class>\n-\n-      <class class="Products.ATContentTypes.content.folder.ATBTreeFolder">\n-          <implements interface="plone.contentrules.engine.interfaces.IRuleAssignable" />\n-      </class>\n-\n-    </configure>\n-\n     <!-- Let rules be annotatable - used to keep track of rule-to-assignment mappings -->\n \n     <class class="plone.app.contentrules.rule.Rule">\ndiff --git a/plone/app/contentrules/exportimport/__init__.py b/plone/app/contentrules/exportimport/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/app/contentrules/exportimport/__init__.py\n+++ b/plone/app/contentrules/exportimport/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/contentrules/exportimport/interfaces.py b/plone/app/contentrules/exportimport/interfaces.py\nindex e04dba8..bd74ed8 100644\n--- a/plone/app/contentrules/exportimport/interfaces.py\n+++ b/plone/app/contentrules/exportimport/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \ndiff --git a/plone/app/contentrules/exportimport/rules.py b/plone/app/contentrules/exportimport/rules.py\nindex 6dda435..c34ac83 100644\n--- a/plone/app/contentrules/exportimport/rules.py\n+++ b/plone/app/contentrules/exportimport/rules.py\n@@ -1,7 +1,9 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n+from lxml import etree\n from plone.app.contentrules import api\n-from plone.app.contentrules.exportimport.interfaces import IRuleElementExportImportHandler  # noqa\n+from plone.app.contentrules.exportimport.interfaces import (\n+    IRuleElementExportImportHandler,\n+)\n from plone.app.contentrules.rule import get_assignments\n from plone.app.contentrules.rule import Rule\n from plone.contentrules.engine.interfaces import IRuleAssignmentManager\n@@ -10,12 +12,15 @@\n from plone.contentrules.rule.interfaces import IRuleCondition\n from plone.contentrules.rule.interfaces import IRuleElement\n from plone.contentrules.rule.interfaces import IRuleElementData\n+from plone.supermodel.utils import elementToValue\n+from plone.supermodel.utils import valueToElement\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.GenericSetup.interfaces import IBody\n from Products.GenericSetup.interfaces import ISetupEnviron\n from Products.GenericSetup.utils import _getDottedName\n from Products.GenericSetup.utils import _resolveDottedName\n from Products.GenericSetup.utils import XMLAdapterBase\n+from xml.dom import minidom\n from zope.component import adapter\n from zope.component import getUtility\n from zope.component import queryMultiAdapter\n@@ -26,25 +31,18 @@\n from zope.schema.interfaces import ICollection\n from zope.schema.interfaces import IField\n from zope.schema.interfaces import IFromUnicode\n-from plone.supermodel.utils import elementToValue, valueToElement\n-from lxml import etree\n-from xml.dom import minidom\n-\n-\n-import six\n \n \n def as_bool(string, default=False):\n     if string is None or not str(string):\n         return default\n-    return string.lower() == \'true\'\n+    return string.lower() == "true"\n \n \n @adapter(Interface)\n @implementer(IRuleElementExportImportHandler)\n-class PropertyRuleElementExportImportHandler(object):\n-    """Import portlet assignment settings based on zope.schema properties\n-    """\n+class PropertyRuleElementExportImportHandler:\n+    """Import portlet assignment settings based on zope.schema properties"""\n \n     def __init__(self, element):\n         data = IRuleElementData(element)\n@@ -57,7 +55,7 @@ def import_element(self, node):\n             return\n \n         for child in node.childNodes:\n-            if child.nodeName == \'property\':\n+            if child.nodeName == "property":\n                 self.import_node(self.descriptor.schema, child)\n \n     def export_element(self, doc, node):\n@@ -72,12 +70,12 @@ def export_element(self, doc, node):\n \n             child = self.export_field(doc, field)\n             node.appendChild(child)\n+\n     # Helper methods\n \n     def import_node(self, interface, child):\n-        """Import a single <property /> node\n-        """\n-        property_name = child.getAttribute(\'name\')\n+        """Import a single <property /> node"""\n+        property_name = child.getAttribute("name")\n \n         field = interface.get(property_name, None)\n         if field is None:\n@@ -93,20 +91,19 @@ def import_node(self, interface, child):\n         field.set(self.element, value)\n \n     def export_field(self, doc, field):\n-        """Turn a zope.schema field into a node and return it\n-        """\n+        """Turn a zope.schema field into a node and return it"""\n \n         field = field.bind(self.element)\n         value = field.get(self.element)\n \n-        child = doc.createElement(\'property\')\n-        child.setAttribute(\'name\', field.__name__)\n+        child = doc.createElement("property")\n+        child.setAttribute("name", field.__name__)\n \n         # supermodel gives us an etree node but GS uses minidom so we need to convert it\n         node = valueToElement(field, value)\n         if node.text:\n-            child.appendChild(doc.createTextNode(six.text_type(node.text)))\n-        # Assumes there are not other text nodes and we can throw away the parent node    \n+            child.appendChild(doc.createTextNode(str(node.text)))\n+        # Assumes there are not other text nodes and we can throw away the parent node\n         for node in node.iterchildren():\n             xml = etree.tostring(node, encoding="utf8")\n             child.appendChild(minidom.parseString(xml).firstChild)\n@@ -116,33 +113,29 @@ def export_field(self, doc, field):\n @adapter(ISiteRoot, ISetupEnviron)\n @implementer(IBody)\n class RulesXMLAdapter(XMLAdapterBase):\n-    """In- and exporter for a local portlet configuration\n-    """\n+    """In- and exporter for a local portlet configuration"""\n \n-    name = \'contentrules\'\n-    _LOGGER_ID = \'contentrules\'\n+    name = "contentrules"\n+    _LOGGER_ID = "contentrules"\n \n     def _exportNode(self):\n-        """Export rules\n-        """\n-        node = self._doc.createElement(\'contentrules\')\n+        """Export rules"""\n+        node = self._doc.createElement("contentrules")\n         child = self._extractRules()\n         if child is not None:\n             node.appendChild(child)\n-        self._logger.info(\'Content rules exported\')\n+        self._logger.info("Content rules exported")\n         return node\n \n     def _importNode(self, node):\n-        """Import rules\n-        """\n+        """Import rules"""\n         if self.environ.shouldPurge():\n             self._purgeRules()\n         self._initRules(node)\n-        self._logger.info(\'Content rules imported\')\n+        self._logger.info("Content rules imported")\n \n     def _purgeRules(self):\n-        """Purge all registered rules\n-        """\n+        """Purge all registered rules"""\n         storage = queryUtility(IRuleStorage)\n         if storage is not None:\n             # If we delete a rule, assignments will be removed as well\n@@ -150,8 +143,7 @@ def _purgeRules(self):\n                 del storage[k]\n \n     def _initRules(self, node):\n-        """Import rules from the given node\n-        """\n+        """Import rules from the given node"""\n \n         site = self.environ.getSite()\n         storage = queryUtility(IRuleStorage)\n@@ -159,10 +151,10 @@ def _initRules(self, node):\n             return\n \n         for child in node.childNodes:\n-            if child.nodeName == \'rule\':\n+            if child.nodeName == "rule":\n \n                 rule = None\n-                name = child.getAttribute(\'name\')\n+                name = child.getAttribute("name")\n                 if name:\n                     rule = storage.get(name, None)\n \n@@ -180,30 +172,29 @@ def _initRules(self, node):\n                     del rule.conditions[:]\n                     del rule.actions[:]\n \n-                rule.title = child.getAttribute(\'title\')\n-                rule.description = child.getAttribute(\'description\')\n-                event_name = child.getAttribute(\'event\')\n+                rule.title = child.getAttribute("title")\n+                rule.description = child.getAttribute("description")\n+                event_name = child.getAttribute("event")\n                 rule.event = _resolveDottedName(event_name)\n                 if not rule.event:\n-                    raise ImportError(\'Can not import {0}\'.format(event_name))\n+                    raise ImportError(f"Can not import {event_name}")\n \n-                rule.enabled = as_bool(child.getAttribute(\'enabled\'), True)\n-                rule.stop = as_bool(child.getAttribute(\'stop-after\'))\n-                rule.cascading = as_bool(child.getAttribute(\'cascading\'))\n+                rule.enabled = as_bool(child.getAttribute("enabled"), True)\n+                rule.stop = as_bool(child.getAttribute("stop-after"))\n+                rule.cascading = as_bool(child.getAttribute("cascading"))\n                 # Aq-wrap to enable complex setters for elements below\n                 # to work\n \n                 rule = rule.__of__(site)\n \n                 for rule_config_node in child.childNodes:\n-                    if rule_config_node.nodeName == \'conditions\':\n+                    if rule_config_node.nodeName == "conditions":\n                         for condition_node in rule_config_node.childNodes:\n-                            if not condition_node.nodeName == \'condition\':\n+                            if not condition_node.nodeName == "condition":\n                                 continue\n \n-                            type_ = condition_node.getAttribute(\'type\')\n-                            element_type = getUtility(\n-                                IRuleCondition, name=type_)\n+                            type_ = condition_node.getAttribute("type")\n+                            element_type = getUtility(IRuleCondition, name=type_)\n                             if element_type.factory is None:\n                                 continue\n \n@@ -212,18 +203,17 @@ def _initRules(self, node):\n                             # Aq-wrap in case of complex setters\n                             condition = condition.__of__(rule)\n \n-                            handler = IRuleElementExportImportHandler(\n-                                condition)\n+                            handler = IRuleElementExportImportHandler(condition)\n                             handler.import_element(condition_node)\n \n                             rule.conditions.append(aq_base(condition))\n \n-                    elif rule_config_node.nodeName == \'actions\':\n+                    elif rule_config_node.nodeName == "actions":\n                         for action_node in rule_config_node.childNodes:\n-                            if not action_node.nodeName == \'action\':\n+                            if not action_node.nodeName == "action":\n                                 continue\n \n-                            type_ = action_node.getAttribute(\'type\')\n+                            type_ = action_node.getAttribute("type")\n                             element_type = getUtility(IRuleAction, name=type_)\n                             if element_type.factory is None:\n                                 continue\n@@ -238,9 +228,9 @@ def _initRules(self, node):\n \n                             rule.actions.append(aq_base(action))\n \n-            elif child.nodeName == \'assignment\':\n-                location = child.getAttribute(\'location\')\n-                if location.startswith(\'/\'):\n+            elif child.nodeName == "assignment":\n+                location = child.getAttribute("location")\n+                if location.startswith("/"):\n                     location = location[1:]\n \n                 try:\n@@ -248,17 +238,17 @@ def _initRules(self, node):\n                 except KeyError:\n                     continue\n \n-                name = child.getAttribute(\'name\')\n-                api.assign_rule(container, name,\n-                                enabled=as_bool(child.getAttribute(\'enabled\')),\n-                                bubbles=as_bool(child.getAttribute(\'bubbles\')),\n-                                insert_before=child.getAttribute(\n-                                    \'insert-before\'),\n-                                )\n+                name = child.getAttribute("name")\n+                api.assign_rule(\n+                    container,\n+                    name,\n+                    enabled=as_bool(child.getAttribute("enabled")),\n+                    bubbles=as_bool(child.getAttribute("bubbles")),\n+                    insert_before=child.getAttribute("insert-before"),\n+                )\n \n     def _extractRules(self):\n-        """Extract rules to a document fragment\n-        """\n+        """Extract rules to a document fragment"""\n \n         site = self.environ.getSite()\n         storage = queryUtility(IRuleStorage)\n@@ -269,15 +259,15 @@ def _extractRules(self):\n         assignment_paths = set()\n \n         for name, rule in sorted(storage.items()):\n-            rule_node = self._doc.createElement(\'rule\')\n-\n-            rule_node.setAttribute(\'name\', name)\n-            rule_node.setAttribute(\'title\', rule.title)\n-            rule_node.setAttribute(\'description\', rule.description)\n-            rule_node.setAttribute(\'event\', _getDottedName(rule.event))\n-            rule_node.setAttribute(\'enabled\', str(rule.enabled))\n-            rule_node.setAttribute(\'stop-after\', str(rule.stop))\n-            rule_node.setAttribute(\'cascading\', str(rule.cascading))\n+            rule_node = self._doc.createElement("rule")\n+\n+            rule_node.setAttribute("name", name)\n+            rule_node.setAttribute("title", rule.title)\n+            rule_node.setAttribute("description", rule.description)\n+            rule_node.setAttribute("event", _getDottedName(rule.event))\n+            rule_node.setAttribute("enabled", str(rule.enabled))\n+            rule_node.setAttribute("stop-after", str(rule.stop))\n+            rule_node.setAttribute("cascading", str(rule.cascading))\n             # Aq-wrap so that exporting fields with clever getters or\n             # vocabularies will work. We also aq-wrap conditions and\n             # actions below.\n@@ -285,13 +275,13 @@ def _extractRules(self):\n             rule = rule.__of__(site)\n \n             # Add conditions\n-            conditions_node = self._doc.createElement(\'conditions\')\n+            conditions_node = self._doc.createElement("conditions")\n             for condition in rule.conditions:\n                 condition_data = IRuleElementData(condition)\n                 condition = condition.__of__(rule)\n \n-                condition_node = self._doc.createElement(\'condition\')\n-                condition_node.setAttribute(\'type\', condition_data.element)\n+                condition_node = self._doc.createElement("condition")\n+                condition_node.setAttribute("type", condition_data.element)\n \n                 handler = IRuleElementExportImportHandler(condition)\n                 handler.export_element(self._doc, condition_node)\n@@ -299,13 +289,13 @@ def _extractRules(self):\n             rule_node.appendChild(conditions_node)\n \n             # Add actions\n-            actions_node = self._doc.createElement(\'actions\')\n+            actions_node = self._doc.createElement("actions")\n             for action in rule.actions:\n                 action_data = IRuleElementData(action)\n                 action = action.__of__(rule)\n \n-                action_node = self._doc.createElement(\'action\')\n-                action_node.setAttribute(\'type\', action_data.element)\n+                action_node = self._doc.createElement("action")\n+                action_node.setAttribute("type", action_data.element)\n \n                 handler = IRuleElementExportImportHandler(action)\n                 handler.export_element(self._doc, action_node)\n@@ -317,7 +307,7 @@ def _extractRules(self):\n         # Export assignments last - this is necessary to ensure they\n         # are orderd properly\n \n-        site_path_length = len(\'/\'.join(site.getPhysicalPath()))\n+        site_path_length = len("/".join(site.getPhysicalPath()))\n         for path in sorted(assignment_paths):\n             try:\n                 container = site.unrestrictedTraverse(path)\n@@ -330,26 +320,22 @@ def _extractRules(self):\n \n             location = path[site_path_length:]\n             for name, assignment in sorted(assignable.items()):\n-                assignment_node = self._doc.createElement(\'assignment\')\n-                assignment_node.setAttribute(\'location\', location)\n-                assignment_node.setAttribute(\'name\', name)\n-                assignment_node.setAttribute(\n-                    \'enabled\', str(assignment.enabled))\n-                assignment_node.setAttribute(\n-                    \'bubbles\', str(assignment.bubbles))\n+                assignment_node = self._doc.createElement("assignment")\n+                assignment_node.setAttribute("location", location)\n+                assignment_node.setAttribute("name", name)\n+                assignment_node.setAttribute("enabled", str(assignment.enabled))\n+                assignment_node.setAttribute("bubbles", str(assignment.bubbles))\n                 fragment.appendChild(assignment_node)\n \n         return fragment\n \n \n def importRules(context):\n-    """Import content rules\n-    """\n+    """Import content rules"""\n     site = context.getSite()\n-    importer = queryMultiAdapter((site, context), IBody,\n-                                 name=u\'plone.contentrules\')\n+    importer = queryMultiAdapter((site, context), IBody, name="plone.contentrules")\n     if importer is not None:\n-        filename = \'{0}{1}\'.format(importer.name, importer.suffix)\n+        filename = f"{importer.name}{importer.suffix}"\n         body = context.readDataFile(filename)\n         if body is not None:\n             importer.filename = filename  # for error reporting\n@@ -357,17 +343,15 @@ def importRules(context):\n \n \n def exportRules(context):\n-    """Export content rules\n-    """\n+    """Export content rules"""\n     site = context.getSite()\n-    exporter = queryMultiAdapter((site, context), IBody,\n-                                 name=u\'plone.contentrules\')\n+    exporter = queryMultiAdapter((site, context), IBody, name="plone.contentrules")\n     if exporter is not None:\n-        filename = \'{0}{1}\'.format(exporter.name, exporter.suffix)\n+        filename = f"{exporter.name}{exporter.suffix}"\n         body = exporter.body\n         # make sure it\'s encoded as earlier version of GS didn\'t do this\n-        if isinstance(body, six.text_type):\n-            encoding = context.getEncoding() or \'utf-8\'\n+        if isinstance(body, str):\n+            encoding = context.getEncoding() or "utf-8"\n             body = body.encode(encoding)\n         if body is not None:\n             context.writeDataFile(filename, body, exporter.mime_type)\ndiff --git a/plone/app/contentrules/handlers.py b/plone/app/contentrules/handlers.py\nindex b105cb0..b9b62ec 100644\n--- a/plone/app/contentrules/handlers.py\n+++ b/plone/app/contentrules/handlers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from plone.app.discussion.interfaces import IComment\n@@ -24,17 +23,17 @@ def _get_uid(context):\n         return uid\n \n     try:\n-        return \'/\'.join(context.getPhysicalPath())\n+        return "/".join(context.getPhysicalPath())\n     except AttributeError:\n         pass\n \n     try:\n         return context.id\n     except AttributeError:\n-        return \'\'\n+        return ""\n \n \n-class DuplicateRuleFilter(object):\n+class DuplicateRuleFilter:\n     """A filter which can prevent rules from being executed more than once\n     regardless of context.\n     """\n@@ -48,12 +47,20 @@ def reset(self):\n         self.cascade = False\n \n     def __call__(self, context, rule, event):\n-        exec_context = getattr(event, \'object\', context)\n+        exec_context = getattr(event, "object", context)\n         uid = _get_uid(exec_context)\n-        if (uid, rule.__name__, ) in self.executed:\n+        if (\n+            uid,\n+            rule.__name__,\n+        ) in self.executed:\n             return False\n         else:\n-            self.executed.add((uid, rule.__name__, ))\n+            self.executed.add(\n+                (\n+                    uid,\n+                    rule.__name__,\n+                )\n+            )\n             return True\n \n \n@@ -62,20 +69,18 @@ def __call__(self, context, rule, event):\n \n \n def init():\n-    if not hasattr(_status, \'rule_filter\'):\n+    if not hasattr(_status, "rule_filter"):\n         _status.rule_filter = DuplicateRuleFilter()\n \n \n def close(event):\n-    """Close the event processing when the request ends\n-    """\n-    if hasattr(_status, \'rule_filter\'):\n+    """Close the event processing when the request ends"""\n+    if hasattr(_status, "rule_filter"):\n         _status.rule_filter.reset()\n \n \n def execute(context, event):\n-    """Execute all rules relative to the context, and bubble as appropriate.\n-    """\n+    """Execute all rules relative to the context, and bubble as appropriate."""\n     # Do nothing if there is no rule storage or it is not active\n     storage = queryUtility(IRuleStorage)\n     if storage is None or not storage.active:\n@@ -123,17 +128,17 @@ def execute(context, event):\n     # execute rules again\n     rule_filter.in_progress = False\n \n+\n # Event handlers\n def execute_rules(event):\n-    """ When an action is invoked on an object,\n-        execute rules assigned to its parent.\n-        Base action executor handler """\n+    """When an action is invoked on an object,\n+    execute rules assigned to its parent.\n+    Base action executor handler"""\n     execute(aq_parent(aq_inner(event.object)), event)\n \n \n def added(event):\n-    """When an object is added, execute rules assigned to its new parent.\n-    """\n+    """When an object is added, execute rules assigned to its new parent."""\n     obj = event.object\n \n     if IContentish.providedBy(obj) or IComment.providedBy(obj):\n@@ -144,7 +149,7 @@ def added(event):\n \n def removed(event):\n     """When an IObjectRemovedEvent was received, execute rules assigned to its\n-     previous parent.\n+    previous parent.\n     """\n     obj = event.object\n     if not (IContentish.providedBy(obj) or IComment.providedBy(obj)):\n@@ -154,8 +159,7 @@ def removed(event):\n \n \n def modified(event):\n-    """When an object is modified, execute rules assigned to its parent\n-    """\n+    """When an object is modified, execute rules assigned to its parent"""\n \n     obj = event.object\n     if not (IContentish.providedBy(obj) or IComment.providedBy(obj)):\n@@ -175,8 +179,7 @@ def modified(event):\n \n \n def copied(event):\n-    """When an object is copied, execute rules assigned to its parent\n-    """\n+    """When an object is copied, execute rules assigned to its parent"""\n     obj = event.object\n     if not (IContentish.providedBy(obj) or IComment.providedBy(obj)):\n         return\n@@ -197,18 +200,15 @@ def execute_user_rules(event):\n \n \n def user_created(event):\n-    """When a user has been created, execute rules assigned to the Plonesite.\n-    """\n+    """When a user has been created, execute rules assigned to the Plonesite."""\n     execute_user_rules(event)\n \n \n def user_logged_in(event):\n-    """When a user is logged in, execute rules assigned to the Plonesite.\n-    """\n+    """When a user is logged in, execute rules assigned to the Plonesite."""\n     execute_user_rules(event)\n \n \n def user_logged_out(event):\n-    """When a user is logged out, execute rules assigned to the Plonesite.\n-    """\n+    """When a user is logged out, execute rules assigned to the Plonesite."""\n     execute_user_rules(event)\ndiff --git a/plone/app/contentrules/namechooser.py b/plone/app/contentrules/namechooser.py\nindex 00ce7b6..f85bfb6 100644\n--- a/plone/app/contentrules/namechooser.py\n+++ b/plone/app/contentrules/namechooser.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.container.contained import NameChooser\n from zope.container.interfaces import INameChooser\n from zope.interface import implementer\n@@ -9,8 +8,7 @@\n \n @implementer(INameChooser)\n class RuleNameChooser(NameChooser):\n-    """A name chooser for content rules.\n-    """\n+    """A name chooser for content rules."""\n \n     def __init__(self, context):\n         self.context = context\n@@ -22,10 +20,10 @@ def chooseName(self, name, object):\n             name = object.__class__.__name__.lower()\n \n         i = 1\n-        new_name = \'{0}-{1}\'.format(name, i)\n+        new_name = f"{name}-{i}"\n         while new_name in container and i <= ATTEMPTS:\n             i += 1\n-            new_name = \'{0}-{1}\'.format(name, i)\n+            new_name = f"{name}-{i}"\n \n         self.checkName(new_name, object)\n         return new_name\ndiff --git a/plone/app/contentrules/rule.py b/plone/app/contentrules/rule.py\nindex ce79112..a7a652b 100644\n--- a/plone/app/contentrules/rule.py\n+++ b/plone/app/contentrules/rule.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from BTrees.OOBTree import OOSet\n from OFS.SimpleItem import SimpleItem\n@@ -11,7 +10,7 @@\n from zope.component import queryUtility\n \n \n-ANNOTATION_KEY = \'plone.app.contentrules.ruleassignments\'\n+ANNOTATION_KEY = "plone.app.contentrules.ruleassignments"\n \n \n class Rule(SimpleItem, BaseRule):\n@@ -19,11 +18,11 @@ class Rule(SimpleItem, BaseRule):\n     identical.\n     """\n \n-    __name__ = u\'\'\n+    __name__ = ""\n \n     @property\n     def id(self):\n-        return \'++rule++{0}\'.format(self.__name__)\n+        return f"++rule++{self.__name__}"\n \n \n def get_assignments(rule):\n@@ -59,8 +58,7 @@ def rule_removed(rule, event):\n \n def container_moved(container, event):\n \n-    if event.oldParent is None or event.newParent is None or \\\n-            event.oldName is None:\n+    if event.oldParent is None or event.newParent is None or event.oldName is None:\n         return\n \n     assignable = IRuleAssignmentManager(container, None)\n@@ -69,15 +67,15 @@ def container_moved(container, event):\n     if assignable is None or storage is None:\n         return\n \n-    old_path = \'{0}/{1}\'.format(\n-        \'/\'.join(event.oldParent.getPhysicalPath()),\n+    old_path = "{}/{}".format(\n+        "/".join(event.oldParent.getPhysicalPath()),\n         event.oldName,\n     )\n-    new_path = \'/\'.join(container.getPhysicalPath())\n+    new_path = "/".join(container.getPhysicalPath())\n \n     if aq_base(event.object) is not aq_base(container):\n-        new_path_of_moved = \'/\'.join(event.object.getPhysicalPath())\n-        old_path = old_path + new_path[len(new_path_of_moved):]\n+        new_path_of_moved = "/".join(event.object.getPhysicalPath())\n+        old_path = old_path + new_path[len(new_path_of_moved) :]\n \n     for rule_name in assignable.keys():\n         rule = storage.get(rule_name, None)\n@@ -96,7 +94,7 @@ def container_removed(container, event):\n     if assignable is None or storage is None:\n         return\n \n-    path = \'/\'.join(container.getPhysicalPath())\n+    path = "/".join(container.getPhysicalPath())\n     for rule_name in assignable.keys():\n         rule = storage.get(rule_name, None)\n         if rule is not None:\ndiff --git a/plone/app/contentrules/testing.py b/plone/app/contentrules/testing.py\nindex 30ebfca..1839443 100644\n--- a/plone/app/contentrules/testing.py\n+++ b/plone/app/contentrules/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n@@ -13,7 +12,7 @@ class PloneAppContentrulesLayer(PloneSandboxLayer):\n     defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n-        self.loadZCML(\'testing.zcml\', package=plone.app.contentrules.tests)\n+        self.loadZCML("testing.zcml", package=plone.app.contentrules.tests)\n \n \n PLONE_APP_CONTENTRULES_FIXTURE = PloneAppContentrulesLayer()\n@@ -21,11 +20,11 @@ def setUpZope(self, app, configurationContext):\n \n PLONE_APP_CONTENTRULES_INTEGRATION_TESTING = IntegrationTesting(\n     bases=(PLONE_APP_CONTENTRULES_FIXTURE, MOCK_MAILHOST_FIXTURE),\n-    name=\'PloneAppContentrulesLayer:IntegrationTesting\',\n+    name="PloneAppContentrulesLayer:IntegrationTesting",\n )\n \n \n PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING = FunctionalTesting(\n     bases=(PLONE_APP_CONTENTRULES_FIXTURE,),\n-    name=\'PloneAppContentrulesLayer:FunctionalTesting\',\n+    name="PloneAppContentrulesLayer:FunctionalTesting",\n )\ndiff --git a/plone/app/contentrules/tests/base.py b/plone/app/contentrules/tests/base.py\nindex 4bd5bf3..f75529e 100644\n--- a/plone/app/contentrules/tests/base.py\n+++ b/plone/app/contentrules/tests/base.py\n@@ -1,7 +1,8 @@\n-# -*- coding: utf-8 -*-\n """Base class for integration tests, based on plone.app.testing\n """\n-from plone.app.contentrules.testing import PLONE_APP_CONTENTRULES_INTEGRATION_TESTING  # noqa: E501\n+from plone.app.contentrules.testing import (  # noqa: E501\n+    PLONE_APP_CONTENTRULES_INTEGRATION_TESTING,\n+)\n from plone.app.testing import login\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n@@ -20,19 +21,18 @@ class ContentRulesTestCase(unittest.TestCase):\n     layer = PLONE_APP_CONTENTRULES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'f1\')\n-        self.folder = self.portal[\'f1\']\n-        self.folder.invokeFactory(\'Document\', \'d1\')\n-        self.portal.invokeFactory(\'Folder\', \'target\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "f1")\n+        self.folder = self.portal["f1"]\n+        self.folder.invokeFactory("Document", "d1")\n+        self.portal.invokeFactory("Folder", "target")\n \n     def addAuthToRequest(self):\n-        portal = self.layer[\'portal\']\n-        request = self.layer[\'request\']\n-        authenticator = getMultiAdapter(\n-            (portal, request), name=u\'authenticator\')\n+        portal = self.layer["portal"]\n+        request = self.layer["request"]\n+        authenticator = getMultiAdapter((portal, request), name="authenticator")\n         auth = authenticator.authenticator().split(\'value="\')[1].rstrip(\'"/>\')\n-        request.form[\'_authenticator\'] = auth\n+        request.form["_authenticator"] = auth\ndiff --git a/plone/app/contentrules/tests/dummy.py b/plone/app/contentrules/tests/dummy.py\nindex cc658c0..41e0d23 100644\n--- a/plone/app/contentrules/tests/dummy.py\n+++ b/plone/app/contentrules/tests/dummy.py\n@@ -1,36 +1,33 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.contentrules.rule.interfaces import IRuleElementData\n from plone.uuid.interfaces import IAttributeUUID\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import IObjectEvent\n \n \n @implementer(IRuleElementData)\n class DummyCondition(SimpleItem):\n-    element = \'dummy.condition\'\n-    summary = \'Dummy condition\'\n+    element = "dummy.condition"\n+    summary = "Dummy condition"\n \n \n @implementer(IRuleElementData)\n class DummyAction(SimpleItem):\n-    element = \'dummy.action\'\n-    summary = \'Dummy action\'\n+    element = "dummy.action"\n+    summary = "Dummy action"\n \n \n @implementer(IObjectEvent)\n-class DummyEvent(object):\n-\n+class DummyEvent:\n     def __init__(self, object):\n         self.object = object\n \n \n-class DummyRule(object):\n-\n-    def __init__(self, name=\'dummy\'):\n+class DummyRule:\n+    def __init__(self, name="dummy"):\n         self.__name__ = name\n \n \n @implementer(IAttributeUUID)\n-class DummyNonArchetypesContext(object):\n+class DummyNonArchetypesContext:\n     pass\ndiff --git a/plone/app/contentrules/tests/test_action_copy.py b/plone/app/contentrules/tests/test_action_copy.py\nindex 4714258..2bac17a 100644\n--- a/plone/app/contentrules/tests/test_action_copy.py\n+++ b/plone/app/contentrules/tests/test_action_copy.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.actions.copy import CopyAction\n from plone.app.contentrules.actions.copy import CopyEditFormView\n from plone.app.contentrules.rule import Rule\n@@ -10,102 +9,97 @@\n from plone.contentrules.rule.interfaces import IRuleAction\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import IObjectEvent\n \n \n @implementer(IObjectEvent)\n-class DummyEvent(object):\n-\n+class DummyEvent:\n     def __init__(self, object):\n         self.object = object\n \n \n class TestCopyAction(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Copy\')\n-        self.assertEqual(\'plone.actions.Copy\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleAction, name="plone.actions.Copy")\n+        self.assertEqual("plone.actions.Copy", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(IObjectEvent, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Copy\')\n+        element = getUtility(IRuleAction, name="plone.actions.Copy")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage["foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter((rule, self.portal.REQUEST), name=\'+action\')\n-        addview = getMultiAdapter(\n-            (adding, self.portal.REQUEST), name=element.addview)\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+action")\n+        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)\n \n         addview.form_instance.update()\n         action = addview.form_instance.create(\n-            data={\'target_folder\': \'/target\', })\n+            data={\n+                "target_folder": "/target",\n+            }\n+        )\n         addview.form_instance.add(action)\n \n         e = rule.actions[0]\n         self.assertTrue(isinstance(e, CopyAction))\n-        self.assertEqual(\'/target\', e.target_folder)\n+        self.assertEqual("/target", e.target_folder)\n \n     def testInvokeEditView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Copy\')\n+        element = getUtility(IRuleAction, name="plone.actions.Copy")\n         e = CopyAction()\n-        editview = getMultiAdapter(\n-            (e, self.folder.REQUEST), name=element.editview)\n+        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)\n         self.assertTrue(isinstance(editview, CopyEditFormView))\n \n     def testExecute(self):\n         e = CopyAction()\n-        e.target_folder = \'/target\'\n+        e.target_folder = "/target"\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         self.assertEqual(True, ex())\n \n-        self.assertTrue(\'d1\' in self.folder.objectIds())\n-        self.assertTrue(\'d1\' in self.portal.target.objectIds())\n+        self.assertTrue("d1" in self.folder.objectIds())\n+        self.assertTrue("d1" in self.portal.target.objectIds())\n \n     def testExecuteWithError(self):\n         e = CopyAction()\n-        e.target_folder = \'/dummy\'\n+        e.target_folder = "/dummy"\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         self.assertEqual(False, ex())\n \n-        self.assertTrue(\'d1\' in self.folder.objectIds())\n-        self.assertFalse(\'d1\' in self.portal.target.objectIds())\n+        self.assertTrue("d1" in self.folder.objectIds())\n+        self.assertFalse("d1" in self.portal.target.objectIds())\n \n     def testExecuteWithoutPermissionsOnTarget(self):\n-        setRoles(self.portal, TEST_USER_ID, (\'Member\', ))\n+        setRoles(self.portal, TEST_USER_ID, ("Member",))\n \n         e = CopyAction()\n-        e.target_folder = \'/target\'\n+        e.target_folder = "/target"\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         self.assertEqual(True, ex())\n \n-        self.assertTrue(\'d1\' in self.folder.objectIds())\n-        self.assertTrue(\'d1\' in self.portal.target.objectIds())\n+        self.assertTrue("d1" in self.folder.objectIds())\n+        self.assertTrue("d1" in self.portal.target.objectIds())\n \n     def testExecuteWithNamingConflict(self):\n-        setRoles(self.portal, TEST_USER_ID, (\'Manager\', ))\n-        self.portal.target.invokeFactory(\'Document\', \'d1\')\n-        setRoles(self.portal, TEST_USER_ID, (\'Member\', ))\n+        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n+        self.portal.target.invokeFactory("Document", "d1")\n+        setRoles(self.portal, TEST_USER_ID, ("Member",))\n \n         e = CopyAction()\n-        e.target_folder = \'/target\'\n+        e.target_folder = "/target"\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         self.assertEqual(True, ex())\n \n-        self.assertTrue(\'d1\' in self.folder.objectIds())\n-        self.assertTrue(\'d1\' in self.portal.target.objectIds())\n-        self.assertTrue(\'d1.1\' in self.portal.target.objectIds())\n+        self.assertTrue("d1" in self.folder.objectIds())\n+        self.assertTrue("d1" in self.portal.target.objectIds())\n+        self.assertTrue("d1.1" in self.portal.target.objectIds())\n \n     def testExecuteWithNamingConflictDoesNotStupidlyAcquireHasKey(self):\n         # self.folder is an ATBTreeFolder and so has a has_key.\n@@ -113,16 +107,17 @@ def testExecuteWithNamingConflictDoesNotStupidlyAcquireHasKey(self):\n         # Let\'s make sure we don\'t accidentally acquire has_key and use\n         # this for the check for unique id.\n \n-        self.folder.invokeFactory(\'Folder\', \'target\')\n-        self.folder.target.invokeFactory(\'Document\', \'d1\')\n+        self.folder.invokeFactory("Folder", "target")\n+        self.folder.target.invokeFactory("Document", "d1")\n \n         e = CopyAction()\n-        e.target_folder = \'/f1/target\'\n+        e.target_folder = "/f1/target"\n \n         ex = getMultiAdapter(\n-            (self.folder.target, e, DummyEvent(self.folder.d1)), IExecutable)\n+            (self.folder.target, e, DummyEvent(self.folder.d1)), IExecutable\n+        )\n         self.assertEqual(True, ex())\n \n-        self.assertTrue(\'d1\' in self.folder.objectIds())\n-        self.assertTrue(\'d1\' in self.folder.target.objectIds())\n-        self.assertTrue(\'d1.1\' in self.folder.target.objectIds())\n+        self.assertTrue("d1" in self.folder.objectIds())\n+        self.assertTrue("d1" in self.folder.target.objectIds())\n+        self.assertTrue("d1.1" in self.folder.target.objectIds())\ndiff --git a/plone/app/contentrules/tests/test_action_delete.py b/plone/app/contentrules/tests/test_action_delete.py\nindex 1eb8e45..b4275ad 100644\n--- a/plone/app/contentrules/tests/test_action_delete.py\n+++ b/plone/app/contentrules/tests/test_action_delete.py\n@@ -1,46 +1,45 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.actions.delete import DeleteAction\n from plone.app.contentrules.rule import Rule\n from plone.app.contentrules.tests.base import ContentRulesTestCase\n+from plone.app.testing import login\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n from plone.contentrules.engine.interfaces import IRuleStorage\n from plone.contentrules.rule.interfaces import IExecutable\n from plone.contentrules.rule.interfaces import IRuleAction\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n-from plone.app.testing import login\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n-from plone.app.testing import setRoles\n+from zope.interface.interfaces import IObjectEvent\n \n \n @implementer(IObjectEvent)\n-class DummyEvent(object):\n-\n+class DummyEvent:\n     def __init__(self, object):\n         self.object = object\n \n \n class TestDeleteAction(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Delete\')\n-        self.assertEqual(\'plone.actions.Delete\', element.addview)\n+        element = getUtility(IRuleAction, name="plone.actions.Delete")\n+        self.assertEqual("plone.actions.Delete", element.addview)\n         self.assertEqual(None, element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(IObjectEvent, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Delete\')\n+        element = getUtility(IRuleAction, name="plone.actions.Delete")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage["foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n         adding = getMultiAdapter(\n-            (rule.__of__(self.portal), self.portal.REQUEST), name=\'+action\')\n+            (rule.__of__(self.portal), self.portal.REQUEST), name="+action"\n+        )\n         addview = getMultiAdapter(\n-            (adding.__of__(rule), self.portal.REQUEST), name=element.addview)\n+            (adding.__of__(rule), self.portal.REQUEST), name=element.addview\n+        )\n         addview()\n \n         e = rule.actions[0]\n@@ -49,8 +48,7 @@ def testInvokeAddView(self):\n     def testExecute(self):\n         e = DeleteAction()\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         self.assertEqual(True, ex())\n \n-        self.assertFalse(\'d1\' in self.folder.objectIds())\n+        self.assertFalse("d1" in self.folder.objectIds())\ndiff --git a/plone/app/contentrules/tests/test_action_logger.py b/plone/app/contentrules/tests/test_action_logger.py\nindex e98cd23..7de104d 100644\n--- a/plone/app/contentrules/tests/test_action_logger.py\n+++ b/plone/app/contentrules/tests/test_action_logger.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.actions.logger import LoggerAction\n from plone.app.contentrules.actions.logger import LoggerEditFormView\n from plone.app.contentrules.rule import Rule\n@@ -10,92 +9,90 @@\n from plone.contentrules.rule.interfaces import IRuleAction\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n from zope.interface import Interface\n+from zope.interface.interfaces import IObjectEvent\n \n \n @implementer(Interface)\n-class DummyEvent(object):\n+class DummyEvent:\n     pass\n \n \n @implementer(IObjectEvent)\n-class DummyObjectEvent(object):\n-\n+class DummyObjectEvent:\n     def __init__(self, obj):\n         self.object = obj\n \n \n class TestLoggerAction(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Logger\')\n-        self.assertEqual(\'plone.actions.Logger\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleAction, name="plone.actions.Logger")\n+        self.assertEqual("plone.actions.Logger", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(None, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Logger\')\n+        element = getUtility(IRuleAction, name="plone.actions.Logger")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage["foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter((rule, self.portal.REQUEST), name=\'+action\')\n-        addview = getMultiAdapter(\n-            (adding, self.portal.REQUEST), name=element.addview)\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+action")\n+        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)\n \n         addview.form_instance.update()\n         content = addview.form_instance.create(\n-            data={\'targetLogger\': \'foo\', \'loggingLevel\': 10, \'message\': \'bar\'})\n+            data={"targetLogger": "foo", "loggingLevel": 10, "message": "bar"}\n+        )\n         addview.form_instance.add(content)\n \n         e = rule.actions[0]\n         self.assertTrue(isinstance(e, LoggerAction))\n-        self.assertEqual(\'foo\', e.targetLogger)\n+        self.assertEqual("foo", e.targetLogger)\n         self.assertEqual(10, e.loggingLevel)\n-        self.assertEqual(\'bar\', e.message)\n+        self.assertEqual("bar", e.message)\n \n     def testInvokeEditView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Logger\')\n+        element = getUtility(IRuleAction, name="plone.actions.Logger")\n         e = LoggerAction()\n-        editview = getMultiAdapter(\n-            (e, self.folder.REQUEST), name=element.editview)\n+        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)\n         self.assertTrue(isinstance(editview, LoggerEditFormView))\n \n     def testProcessedMessage(self):\n         e = LoggerAction()\n-        e.targetLogger = \'testing\'\n+        e.targetLogger = "testing"\n         e.loggingLevel = 0\n-        e.message = \'Test log event\'\n+        e.message = "Test log event"\n         ex = getMultiAdapter(\n-            (self.folder, e, DummyObjectEvent(self.folder)), IExecutable)\n-        self.assertEqual(\'Test log event\', ex.processedMessage())\n+            (self.folder, e, DummyObjectEvent(self.folder)), IExecutable\n+        )\n+        self.assertEqual("Test log event", ex.processedMessage())\n \n-        e.message = \'Test log event : &c\'\n+        e.message = "Test log event : &c"\n         self.assertEqual(\n-            \'Test log event : <Folder at /plone/f1>\',\n+            "Test log event : <Folder at /plone/f1>",\n             ex.processedMessage(),\n         )\n \n-        e.message = \'Test log event : &e\'\n+        e.message = "Test log event : &e"\n         self.assertEqual(\n-            \'Test log event : \'\n-            \'plone.app.contentrules.tests.test_action_logger.DummyObjectEvent\',\n+            "Test log event : "\n+            "plone.app.contentrules.tests.test_action_logger.DummyObjectEvent",\n             ex.processedMessage(),\n         )\n \n-        e.message = \'Test log event : &u\'\n+        e.message = "Test log event : &u"\n         self.assertEqual(\n-            \'Test log event : {0}\'.format(TEST_USER_NAME),\n+            f"Test log event : {TEST_USER_NAME}",\n             ex.processedMessage(),\n         )\n \n     def testExecute(self):\n         e = LoggerAction()\n-        e.targetLogger = \'testing\'\n+        e.targetLogger = "testing"\n         e.loggingLevel = 0\n-        e.message = \'Test log event\'\n+        e.message = "Test log event"\n         ex = getMultiAdapter((self.folder, e, DummyEvent()), IExecutable)\n         self.assertTrue(ex())\ndiff --git a/plone/app/contentrules/tests/test_action_mail.py b/plone/app/contentrules/tests/test_action_mail.py\nindex b67acb1..f42ec2f 100644\n--- a/plone/app/contentrules/tests/test_action_mail.py\n+++ b/plone/app/contentrules/tests/test_action_mail.py\n@@ -1,5 +1,5 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n+from email import message_from_bytes\n from plone.app.contentrules.actions.mail import MailAction\n from plone.app.contentrules.actions.mail import MailAddFormView\n from plone.app.contentrules.actions.mail import MailEditFormView\n@@ -7,240 +7,217 @@\n from plone.app.contentrules.tests.base import ContentRulesTestCase\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.base.interfaces.controlpanel import IMailSchema\n from plone.contentrules.engine.interfaces import IRuleStorage\n from plone.contentrules.rule.interfaces import IExecutable\n from plone.contentrules.rule.interfaces import IRuleAction\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n-from Products.CMFPlone.tests.utils import MockMailHost\n from Products.MailHost.interfaces import IMailHost\n from zope.component import getMultiAdapter\n from zope.component import getSiteManager\n from zope.component import getUtility\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import IObjectEvent\n \n import unittest\n \n-try:\n-    # Python 3\n-    from email import message_from_bytes\n-except ImportError:\n-    # Python 2\n-    from email import message_from_string as message_from_bytes\n-\n \n @implementer(IObjectEvent)\n-class DummyEvent(object):\n-\n+class DummyEvent:\n     def __init__(self, object):\n         self.object = object\n \n \n class TestMailAction(ContentRulesTestCase):\n-\n     def setUp(self):\n-        super(TestMailAction, self).setUp()\n-        self.folder[\'d1\'].setTitle(u\'W\xc3\xa4lkommen\')\n+        super().setUp()\n+        self.folder["d1"].setTitle("W\xc3\xa4lkommen")\n \n         users = (\n-            (\'userone\', \'User One\', \'user@one.com\', (\'Manager\', \'Member\')),\n-            (\'usertwo\', \'User Two\', \'user@two.com\', (\'Reviewer\', \'Member\')),\n-            (\'userthree\', \'User Three\', \'user@three.com\', (\'Owner\', \'Member\')),\n-            (\'userfour\', \'User Four\', \'user@four.com\', (\'Member\', )),\n+            ("userone", "User One", "user@one.com", ("Manager", "Member")),\n+            ("usertwo", "User Two", "user@two.com", ("Reviewer", "Member")),\n+            ("userthree", "User Three", "user@three.com", ("Owner", "Member")),\n+            ("userfour", "User Four", "user@four.com", ("Member",)),\n         )\n         for id, fname, email, roles in users:\n-            self.portal.portal_membership.addMember(id, \'secret\', roles, [])\n+            self.portal.portal_membership.addMember(id, "secret", roles, [])\n             member = self.portal.portal_membership.getMemberById(id)\n-            member.setMemberProperties({\'fullname\': fname, \'email\': email})\n+            member.setMemberProperties({"fullname": fname, "email": email})\n         # XXX: remove the manager role that was set in the base class\n         setRoles(self.portal, TEST_USER_ID, [])\n \n     def testRegistered(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Mail\')\n-        self.assertEqual(\'plone.actions.Mail\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleAction, name="plone.actions.Mail")\n+        self.assertEqual("plone.actions.Mail", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n \n     def testInvokeAddView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Mail\')\n+        element = getUtility(IRuleAction, name="plone.actions.Mail")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage["foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter((rule, self.portal.REQUEST), name=\'+action\')\n-        addview = getMultiAdapter((adding, self.portal.REQUEST),\n-                                  name=element.addview)\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+action")\n+        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)\n         self.assertTrue(isinstance(addview, MailAddFormView))\n \n         addview.form_instance.update()\n         output = addview.form_instance()\n-        self.assertIn(\'<h1>Substitutions</h1>\', output)\n+        self.assertIn("<h1>Substitutions</h1>", output)\n         content = addview.form_instance.create(\n             data={\n-                \'subject\': \'My Subject\',\n-                \'source\': \'foo@bar.be\',\n-                \'recipients\': \'foo@bar.be,bar@foo.be\',\n-                \'message\': \'Hey, Oh!\',\n+                "subject": "My Subject",\n+                "source": "foo@bar.be",\n+                "recipients": "foo@bar.be,bar@foo.be",\n+                "message": "Hey, Oh!",\n             }\n         )\n         addview.form_instance.add(content)\n \n         e = rule.actions[0]\n         self.assertTrue(isinstance(e, MailAction))\n-        self.assertEqual(\'My Subject\', e.subject)\n-        self.assertEqual(\'foo@bar.be\', e.source)\n-        self.assertEqual(\'foo@bar.be,bar@foo.be\', e.recipients)\n-        self.assertEqual(\'Hey, Oh!\', e.message)\n+        self.assertEqual("My Subject", e.subject)\n+        self.assertEqual("foo@bar.be", e.source)\n+        self.assertEqual("foo@bar.be,bar@foo.be", e.recipients)\n+        self.assertEqual("Hey, Oh!", e.message)\n \n     def testInvokeEditView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Mail\')\n+        element = getUtility(IRuleAction, name="plone.actions.Mail")\n         e = MailAction()\n-        editview = getMultiAdapter((e, self.folder.REQUEST),\n-                                   name=element.editview)\n+        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)\n         self.assertTrue(isinstance(editview, MailEditFormView))\n \n     def testExecute(self):\n         # this avoids sending mail as currentuser@foobar.com\n         self.portal.portal_membership.getAuthenticatedMember().setProperties(\n-            email=\'currentuser@foobar.com\')\n+            email="currentuser@foobar.com"\n+        )\n         e = MailAction()\n-        e.source = \'$user_email\'\n-        e.recipients = \'bar@foo.be, bar@foo.be, $reviewer_emails, \' \\\n-                       \'$manager_emails, $member_emails\'\n-        e.message = u"P\xc3\xa4ge \'${title}\' created in ${url} !"\n-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)),\n-                             IExecutable)\n+        e.source = "$user_email"\n+        e.recipients = (\n+            "bar@foo.be, bar@foo.be, $reviewer_emails, "\n+            "$manager_emails, $member_emails"\n+        )\n+        e.message = "P\xc3\xa4ge \'${title}\' created in ${url} !"\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         ex()\n         sent_mails = {}\n         for mail_sent in self.portal.MailHost.messages:\n             mail_sent_msg = message_from_bytes(mail_sent)\n-            sent_mails[mail_sent_msg.get(\'To\')] = mail_sent_msg\n+            sent_mails[mail_sent_msg.get("To")] = mail_sent_msg\n \n-        mailSent = sent_mails[\'bar@foo.be\']\n-        self.assertEqual(\'text/plain; charset="utf-8"\',\n-                         mailSent.get(\'Content-Type\'))\n-        self.assertEqual(\'currentuser@foobar.com\', mailSent.get(\'From\'))\n+        mailSent = sent_mails["bar@foo.be"]\n+        self.assertEqual(\'text/plain; charset="utf-8"\', mailSent.get("Content-Type"))\n+        self.assertEqual("currentuser@foobar.com", mailSent.get("From"))\n         # The output message should be a utf-8 encoded string\n         self.assertEqual(\n-            u"P\xc3\xa4ge \'W\xc3\xa4lkommen\' created in http://nohost/plone/f1/d1 !",\n-            mailSent.get_payload(decode=True).decode(\'utf8\'))\n+            "P\xc3\xa4ge \'W\xc3\xa4lkommen\' created in http://nohost/plone/f1/d1 !",\n+            mailSent.get_payload(decode=True).decode("utf8"),\n+        )\n \n         # check interpolation of $reviewer_emails\n-        self.assertTrue(\'user@two.com\' in sent_mails)\n+        self.assertTrue("user@two.com" in sent_mails)\n \n         # check interpolation of $manager_emails\n-        self.assertTrue(\'user@one.com\' in sent_mails)\n+        self.assertTrue("user@one.com" in sent_mails)\n \n         # check interpolation of $member_emails\n         emails = [\n-            \'bar@foo.be\',\n-            \'user@one.com\',\n-            \'user@two.com\',\n-            \'user@three.com\',\n-            \'user@four.com\',\n+            "bar@foo.be",\n+            "user@one.com",\n+            "user@two.com",\n+            "user@three.com",\n+            "user@four.com",\n         ]\n-        self.assertEqual(\n-            set(emails),\n-            set(sent_mails.keys()))\n+        self.assertEqual(set(emails), set(sent_mails.keys()))\n \n     def testExecuteNoSource(self):\n         e = MailAction()\n-        e.recipients = \'bar@foo.be,foo@bar.be\'\n-        e.message = \'Document created !\'\n-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)),\n-                             IExecutable)\n+        e.recipients = "bar@foo.be,foo@bar.be"\n+        e.message = "Document created !"\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         # this no longer errors since it breaks usability\n         self.assertTrue(ex)\n         # and will return False for the unsent message\n         # (happens when no sender address can be computed)\n         registry = getUtility(IRegistry)\n-        mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n+        mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n         mail_settings.email_from_address = ""\n         self.assertEqual(ex(), False)\n \n         # if we provide a site mail address the message sends correctly\n-        mail_settings.email_from_address = \'manager@portal.be\'\n-        mail_settings.email_from_name = u\'plone@rulez\'\n+        mail_settings.email_from_address = "manager@portal.be"\n+        mail_settings.email_from_name = "plone@rulez"\n         ex()\n         self.assertEqual(len(self.portal.MailHost.messages), 2)\n         mailSent = message_from_bytes(self.portal.MailHost.messages[0])\n-        self.assertEqual(\'text/plain; charset="utf-8"\',\n-                         mailSent.get(\'Content-Type\'))\n-        self.assertIn(mailSent.get(\'To\'), [\'bar@foo.be\', \'foo@bar.be\'])\n-        self.assertEqual(\'"plone@rulez" <manager@portal.be>\',\n-                         mailSent.get(\'From\'))\n-        self.assertEqual(\'Document created !\',\n-                         mailSent.get_payload())\n+        self.assertEqual(\'text/plain; charset="utf-8"\', mailSent.get("Content-Type"))\n+        self.assertIn(mailSent.get("To"), ["bar@foo.be", "foo@bar.be"])\n+        self.assertEqual(\'"plone@rulez" <manager@portal.be>\', mailSent.get("From"))\n+        self.assertEqual("Document created !", mailSent.get_payload())\n \n     def testExecuteMultiRecipients(self):\n         e = MailAction()\n-        e.source = \'foo@bar.be\'\n-        e.recipients = \'bar@foo.be,foo@bar.be\'\n-        e.message = \'Document created !\'\n-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)),\n-                             IExecutable)\n+        e.source = "foo@bar.be"\n+        e.recipients = "bar@foo.be,foo@bar.be"\n+        e.message = "Document created !"\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         ex()\n         self.assertEqual(len(self.portal.MailHost.messages), 2)\n         # in py3 the order of mails is non-determininistic\n         # because sending iterates over a set of recipients\n         for msg in self.portal.MailHost.messages:\n-            if b\'bar@foo.be\' in msg:\n+            if b"bar@foo.be" in msg:\n                 mailSent1 = message_from_bytes(msg)\n             else:\n                 mailSent2 = message_from_bytes(msg)\n-        self.assertEqual(\'text/plain; charset="utf-8"\',\n-                         mailSent1.get(\'Content-Type\'))\n-        self.assertEqual(\'bar@foo.be\', mailSent1.get(\'To\'))\n-        self.assertEqual(\'foo@bar.be\', mailSent1.get(\'From\'))\n-        self.assertEqual(\'Document created !\',\n-                         mailSent1.get_payload())\n-        self.assertEqual(\'text/plain; charset="utf-8"\',\n-                         mailSent2.get(\'Content-Type\'))\n-        self.assertEqual(\'foo@bar.be\', mailSent2.get(\'To\'))\n-        self.assertEqual(\'foo@bar.be\', mailSent2.get(\'From\'))\n-        self.assertEqual(\'Document created !\',\n-                         mailSent2.get_payload())\n+        self.assertEqual(\'text/plain; charset="utf-8"\', mailSent1.get("Content-Type"))\n+        self.assertEqual("bar@foo.be", mailSent1.get("To"))\n+        self.assertEqual("foo@bar.be", mailSent1.get("From"))\n+        self.assertEqual("Document created !", mailSent1.get_payload())\n+        self.assertEqual(\'text/plain; charset="utf-8"\', mailSent2.get("Content-Type"))\n+        self.assertEqual("foo@bar.be", mailSent2.get("To"))\n+        self.assertEqual("foo@bar.be", mailSent2.get("From"))\n+        self.assertEqual("Document created !", mailSent2.get_payload())\n \n     def testExecuteExcludeActor(self):\n         self.portal.portal_membership.getAuthenticatedMember().setProperties(\n-            email=\'currentuser@foobar.com\')\n+            email="currentuser@foobar.com"\n+        )\n         e = MailAction()\n-        e.source = \'$user_email\'\n+        e.source = "$user_email"\n         e.exclude_actor = True\n-        e.recipients = \'bar@foo.be, currentuser@foobar.com\'\n-        e.message = u\'A dummy event just happened !!!!!\'\n-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)),\n-                             IExecutable)\n+        e.recipients = "bar@foo.be, currentuser@foobar.com"\n+        e.message = "A dummy event just happened !!!!!"\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         ex()\n         self.assertEqual(len(self.portal.MailHost.messages), 1)\n \n         mailSent = message_from_bytes(self.portal.MailHost.messages[0])\n-        self.assertEqual(\'bar@foo.be\', mailSent.get(\'To\'))\n+        self.assertEqual("bar@foo.be", mailSent.get("To"))\n \n     def testExecuteNoRecipients(self):\n         # no recipient\n         e = MailAction()\n-        e.source = \'foo@bar.be\'\n-        e.recipients = \'\'\n-        e.message = \'Document created !\'\n-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)),\n-                             IExecutable)\n+        e.source = "foo@bar.be"\n+        e.recipients = ""\n+        e.message = "Document created !"\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         ex()\n         self.assertEqual(len(self.portal.MailHost.messages), 0)\n \n-    @unittest.skip(\n-        \'Monkey patching does not work well with mocking. Needs fixing.\'\n-    )\n+    @unittest.skip("Monkey patching does not work well with mocking. Needs fixing.")\n     def testExecuteBadMailHost(self):\n         # Our goal is that mailing errors should not cause exceptions\n         self.portal.portal_membership.getAuthenticatedMember().setProperties(\n-            email=\'currentuser@foobar.com\')\n+            email="currentuser@foobar.com"\n+        )\n         e = MailAction()\n-        e.source = \'$user_email\'\n-        e.recipients = \'bar@foo.be, $reviewer_emails, $manager_emails, \' \\\n-                       \'$member_emails\'\n-        e.message = u"P\xc3\x83\xc2\xa4ge \'${title}\' created in ${url} !"\n-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)),\n-                             IExecutable)\n+        e.source = "$user_email"\n+        e.recipients = (\n+            "bar@foo.be, $reviewer_emails, $manager_emails, " "$member_emails"\n+        )\n+        e.message = "P\xc3\x83\xc2\xa4ge \'${title}\' created in ${url} !"\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         ex()\ndiff --git a/plone/app/contentrules/tests/test_action_modify.py b/plone/app/contentrules/tests/test_action_modify.py\nindex 0deb751..4b10d58 100644\n--- a/plone/app/contentrules/tests/test_action_modify.py\n+++ b/plone/app/contentrules/tests/test_action_modify.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules import handlers\n from unittest import TestCase\n from zope.lifecycleevent import ObjectAddedEvent\n@@ -6,12 +5,10 @@\n \n \n class TestModifyAction(TestCase):\n-\n     def setUp(self):\n         self.called = False\n \n         def register_call(testcase):\n-\n             def inner_register_call(event):\n                 testcase.called = True\n \n@@ -25,15 +22,17 @@ def tearDown(self):\n         self.called = False\n \n     def testIgnoreAddedEvents(self):\n-        class Content(object):\n+        class Content:\n             __parent__ = None\n             __name__ = None\n+\n         handlers.modified(ObjectAddedEvent(Content()))\n         self.assertFalse(self.called)\n \n     def testIgnoreDeletedEvents(self):\n-        class Content(object):\n+        class Content:\n             __parent__ = None\n             __name__ = None\n+\n         handlers.modified(ObjectRemovedEvent(Content()))\n         self.assertFalse(self.called)\ndiff --git a/plone/app/contentrules/tests/test_action_move.py b/plone/app/contentrules/tests/test_action_move.py\nindex c39caf1..654933c 100644\n--- a/plone/app/contentrules/tests/test_action_move.py\n+++ b/plone/app/contentrules/tests/test_action_move.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.actions.move import MoveAction\n from plone.app.contentrules.actions.move import MoveEditFormView\n from plone.app.contentrules.rule import Rule\n@@ -10,115 +9,110 @@\n from plone.contentrules.rule.interfaces import IRuleAction\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import IObjectEvent\n \n \n @implementer(IObjectEvent)\n-class DummyEvent(object):\n-\n+class DummyEvent:\n     def __init__(self, object):\n         self.object = object\n \n \n class TestMoveAction(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Move\')\n-        self.assertEqual(\'plone.actions.Move\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleAction, name="plone.actions.Move")\n+        self.assertEqual("plone.actions.Move", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(IObjectEvent, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Move\')\n+        element = getUtility(IRuleAction, name="plone.actions.Move")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage["foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter((rule, self.portal.REQUEST), name=\'+action\')\n-        addview = getMultiAdapter(\n-            (adding, self.portal.REQUEST), name=element.addview)\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+action")\n+        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)\n \n         addview.form_instance.update()\n         content = addview.form_instance.create(\n-            data={\'target_folder\': \'/target\', })\n+            data={\n+                "target_folder": "/target",\n+            }\n+        )\n         addview.form_instance.add(content)\n \n         e = rule.actions[0]\n         self.assertTrue(isinstance(e, MoveAction))\n-        self.assertEqual(\'/target\', e.target_folder)\n+        self.assertEqual("/target", e.target_folder)\n \n     def testInvokeEditView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Move\')\n+        element = getUtility(IRuleAction, name="plone.actions.Move")\n         e = MoveAction()\n-        editview = getMultiAdapter(\n-            (e, self.folder.REQUEST), name=element.editview)\n+        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)\n         self.assertTrue(isinstance(editview, MoveEditFormView))\n \n     def testExecute(self):\n         e = MoveAction()\n-        e.target_folder = \'/target\'\n+        e.target_folder = "/target"\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         self.assertEqual(True, ex())\n \n-        self.assertFalse(\'d1\' in self.folder.objectIds())\n-        self.assertTrue(\'d1\' in self.portal.target.objectIds())\n+        self.assertFalse("d1" in self.folder.objectIds())\n+        self.assertTrue("d1" in self.portal.target.objectIds())\n \n         # test catalog is ok\n-        brains = self.portal.portal_catalog(id=\'d1\')\n+        brains = self.portal.portal_catalog(id="d1")\n         self.assertEqual(len(brains), 1)\n-        self.assertEqual(brains[0].getPath(), \'/plone/target/d1\')\n+        self.assertEqual(brains[0].getPath(), "/plone/target/d1")\n \n     def testExecuteWithError(self):\n         e = MoveAction()\n-        e.target_folder = \'/dummy\'\n+        e.target_folder = "/dummy"\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         self.assertEqual(False, ex())\n \n-        self.assertTrue(\'d1\' in self.folder.objectIds())\n-        self.assertFalse(\'d1\' in self.portal.target.objectIds())\n+        self.assertTrue("d1" in self.folder.objectIds())\n+        self.assertFalse("d1" in self.portal.target.objectIds())\n \n     def testExecuteWithoutPermissionsOnTarget(self):\n-        setRoles(self.portal, TEST_USER_ID, (\'Member\', ))\n+        setRoles(self.portal, TEST_USER_ID, ("Member",))\n \n         e = MoveAction()\n-        e.target_folder = \'/target\'\n+        e.target_folder = "/target"\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         self.assertEqual(True, ex())\n \n-        self.assertFalse(\'d1\' in self.folder.objectIds())\n-        self.assertTrue(\'d1\' in self.portal.target.objectIds())\n+        self.assertFalse("d1" in self.folder.objectIds())\n+        self.assertTrue("d1" in self.portal.target.objectIds())\n \n     def testExecuteWithNamingConflict(self):\n-        setRoles(self.portal, TEST_USER_ID, (\'Manager\', ))\n-        self.portal.target.invokeFactory(\'Document\', \'d1\')\n-        setRoles(self.portal, TEST_USER_ID, (\'Member\', ))\n+        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n+        self.portal.target.invokeFactory("Document", "d1")\n+        setRoles(self.portal, TEST_USER_ID, ("Member",))\n \n         e = MoveAction()\n-        e.target_folder = \'/target\'\n+        e.target_folder = "/target"\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         self.assertEqual(True, ex())\n \n-        self.assertFalse(\'d1\' in self.folder.objectIds())\n-        self.assertTrue(\'d1\' in self.portal.target.objectIds())\n-        self.assertTrue(\'d1.1\' in self.portal.target.objectIds())\n+        self.assertFalse("d1" in self.folder.objectIds())\n+        self.assertTrue("d1" in self.portal.target.objectIds())\n+        self.assertTrue("d1.1" in self.portal.target.objectIds())\n \n     def testExecuteWithSameSourceAndTargetFolder(self):\n-        setRoles(self.portal, TEST_USER_ID, (\'Manager\', ))\n-        self.portal.target.invokeFactory(\'Document\', \'d1\')\n-        setRoles(self.portal, TEST_USER_ID, (\'Member\', ))\n+        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n+        self.portal.target.invokeFactory("Document", "d1")\n+        setRoles(self.portal, TEST_USER_ID, ("Member",))\n \n         e = MoveAction()\n-        e.target_folder = \'/target\'\n+        e.target_folder = "/target"\n \n         ex = getMultiAdapter(\n             (self.portal.target, e, DummyEvent(self.portal.target.d1)),\n@@ -126,7 +120,7 @@ def testExecuteWithSameSourceAndTargetFolder(self):\n         )\n         self.assertEqual(True, ex())\n \n-        self.assertEqual([\'d1\'], list(self.portal.target.objectIds()))\n+        self.assertEqual(["d1"], list(self.portal.target.objectIds()))\n \n     def testExecuteWithNamingConflictDoesNotStupidlyAcquireHasKey(self):\n         # self.folder is an ATBTreeFolder and so has a has_key.\n@@ -134,16 +128,17 @@ def testExecuteWithNamingConflictDoesNotStupidlyAcquireHasKey(self):\n         # Let\'s make sure we don\'t accidentally acquire has_key and use\n         # this for the check for unique id.\n \n-        self.folder.invokeFactory(\'Folder\', \'target\')\n-        self.folder.target.invokeFactory(\'Document\', \'d1\')\n+        self.folder.invokeFactory("Folder", "target")\n+        self.folder.target.invokeFactory("Document", "d1")\n \n         e = MoveAction()\n-        e.target_folder = \'/f1/target\'\n+        e.target_folder = "/f1/target"\n \n         ex = getMultiAdapter(\n-            (self.folder.target, e, DummyEvent(self.folder.d1)), IExecutable)\n+            (self.folder.target, e, DummyEvent(self.folder.d1)), IExecutable\n+        )\n         self.assertEqual(True, ex())\n \n-        self.assertFalse(\'d1\' in self.folder.objectIds())\n-        self.assertTrue(\'d1\' in self.folder.target.objectIds())\n-        self.assertTrue(\'d1.1\' in self.folder.target.objectIds())\n+        self.assertFalse("d1" in self.folder.objectIds())\n+        self.assertTrue("d1" in self.folder.target.objectIds())\n+        self.assertTrue("d1.1" in self.folder.target.objectIds())\ndiff --git a/plone/app/contentrules/tests/test_action_notify.py b/plone/app/contentrules/tests/test_action_notify.py\nindex 03fa951..32e1456 100644\n--- a/plone/app/contentrules/tests/test_action_notify.py\n+++ b/plone/app/contentrules/tests/test_action_notify.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.actions.notify import NotifyAction\n from plone.app.contentrules.actions.notify import NotifyEditFormView\n from plone.app.contentrules.rule import Rule\n@@ -15,54 +14,54 @@\n \n \n @implementer(Interface)\n-class DummyEvent(object):\n+class DummyEvent:\n     pass\n \n \n class TestNotifyAction(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Notify\')\n-        self.assertEqual(\'plone.actions.Notify\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleAction, name="plone.actions.Notify")\n+        self.assertEqual("plone.actions.Notify", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(None, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Notify\')\n+        element = getUtility(IRuleAction, name="plone.actions.Notify")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage["foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter((rule, self.request), name=\'+action\')\n+        adding = getMultiAdapter((rule, self.request), name="+action")\n         addview = getMultiAdapter((adding, self.request), name=element.addview)\n \n         addview.form_instance.update()\n-        content = addview.form_instance.create(data={\'message\': \'Hello world\',\n-                                                     \'message_type\': \'info\'})\n+        content = addview.form_instance.create(\n+            data={"message": "Hello world", "message_type": "info"}\n+        )\n         addview.form_instance.add(content)\n \n         e = rule.actions[0]\n         self.assertTrue(isinstance(e, NotifyAction))\n-        self.assertEqual(\'Hello world\', e.message)\n-        self.assertEqual(\'info\', e.message_type)\n+        self.assertEqual("Hello world", e.message)\n+        self.assertEqual("info", e.message_type)\n \n     def testInvokeEditView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Notify\')\n+        element = getUtility(IRuleAction, name="plone.actions.Notify")\n         e = NotifyAction()\n         editview = getMultiAdapter((e, self.request), name=element.editview)\n         self.assertTrue(isinstance(editview, NotifyEditFormView))\n \n     def testExecute(self):\n         e = NotifyAction()\n-        e.message = \'Hello world\'\n-        e.message_type = \'info\'\n+        e.message = "Hello world"\n+        e.message_type = "info"\n \n         ex = getMultiAdapter((self.folder, e, DummyEvent()), IExecutable)\n         self.assertEqual(True, ex())\n \n         new_cookies = self.request.RESPONSE.cookies[STATUSMESSAGEKEY]\n-        messages = _decodeCookieValue(new_cookies[\'value\'])\n+        messages = _decodeCookieValue(new_cookies["value"])\n         self.assertEqual(1, len(messages))\n-        self.assertEqual(\'Hello world\', messages[0].message)\n-        self.assertEqual(\'info\', messages[0].type)\n+        self.assertEqual("Hello world", messages[0].message)\n+        self.assertEqual("info", messages[0].type)\ndiff --git a/plone/app/contentrules/tests/test_action_versioning.py b/plone/app/contentrules/tests/test_action_versioning.py\nindex 2e522c3..d8557bf 100644\n--- a/plone/app/contentrules/tests/test_action_versioning.py\n+++ b/plone/app/contentrules/tests/test_action_versioning.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.actions.versioning import VersioningAction\n from plone.app.contentrules.actions.versioning import VersioningEditFormView\n from plone.app.contentrules.rule import Rule\n@@ -13,50 +12,47 @@\n \n \n @implementer(Interface)\n-class DummyEvent(object):\n-\n+class DummyEvent:\n     def __init__(self, object):\n         self.object = object\n \n \n class TestVersioningAction(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Versioning\')\n-        self.assertEqual(\'plone.actions.Versioning\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleAction, name="plone.actions.Versioning")\n+        self.assertEqual("plone.actions.Versioning", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(None, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Versioning\')\n+        element = getUtility(IRuleAction, name="plone.actions.Versioning")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage["foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter((rule, self.request), name=\'+action\')\n+        adding = getMultiAdapter((rule, self.request), name="+action")\n         addview = getMultiAdapter((adding, self.request), name=element.addview)\n \n         addview.form_instance.update()\n-        content = addview.form_instance.create(data={\'comment\': \'Hello world\'})\n+        content = addview.form_instance.create(data={"comment": "Hello world"})\n         addview.form_instance.add(content)\n \n         e = rule.actions[0]\n         self.assertTrue(isinstance(e, VersioningAction))\n-        self.assertEqual(\'Hello world\', e.comment)\n+        self.assertEqual("Hello world", e.comment)\n \n     def testInvokeEditView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Versioning\')\n+        element = getUtility(IRuleAction, name="plone.actions.Versioning")\n         e = VersioningAction()\n         editview = getMultiAdapter((e, self.request), name=element.editview)\n         self.assertTrue(isinstance(editview, VersioningEditFormView))\n \n     def testExecute(self):\n         e = VersioningAction()\n-        e.comment = \'Hello world\'\n+        e.comment = "Hello world"\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder)), IExecutable)\n         # not version for now\n         pr = self.portal.portal_repository\n         self.assertEqual(pr.getHistoryMetadata(self.folder), [])\n@@ -64,8 +60,10 @@ def testExecute(self):\n         # action will create first version\n         self.assertEqual(True, ex())\n         self.assertEqual(\n-            pr.getHistoryMetadata(self.folder).getLength(countPurged=False), 1)\n+            pr.getHistoryMetadata(self.folder).getLength(countPurged=False), 1\n+        )\n         # calling action again will create a second version\n         ex()\n         self.assertEqual(\n-            pr.getHistoryMetadata(self.folder).getLength(countPurged=False), 2)\n+            pr.getHistoryMetadata(self.folder).getLength(countPurged=False), 2\n+        )\ndiff --git a/plone/app/contentrules/tests/test_action_workflow.py b/plone/app/contentrules/tests/test_action_workflow.py\nindex b4859b3..dfa10b8 100644\n--- a/plone/app/contentrules/tests/test_action_workflow.py\n+++ b/plone/app/contentrules/tests/test_action_workflow.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.actions.workflow import WorkflowAction\n from plone.app.contentrules.actions.workflow import WorkflowEditFormView\n from plone.app.contentrules.rule import Rule\n@@ -8,83 +7,81 @@\n from plone.contentrules.rule.interfaces import IRuleAction\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import IObjectEvent\n \n \n @implementer(IObjectEvent)\n-class DummyEvent(object):\n-\n+class DummyEvent:\n     def __init__(self, object):\n         self.object = object\n \n \n class TestWorkflowAction(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Workflow\')\n-        self.assertEqual(\'plone.actions.Workflow\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleAction, name="plone.actions.Workflow")\n+        self.assertEqual("plone.actions.Workflow", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(IObjectEvent, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Workflow\')\n+        element = getUtility(IRuleAction, name="plone.actions.Workflow")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage["foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter((rule, self.portal.REQUEST), name=\'+action\')\n-        addview = getMultiAdapter(\n-            (adding, self.portal.REQUEST), name=element.addview)\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+action")\n+        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)\n \n         addview.form_instance.update()\n         content = addview.form_instance.create(\n-            data={\'transition\': \'publish\', })\n+            data={\n+                "transition": "publish",\n+            }\n+        )\n         addview.form_instance.add(content)\n \n         e = rule.actions[0]\n         self.assertTrue(isinstance(e, WorkflowAction))\n-        self.assertEqual(\'publish\', e.transition)\n+        self.assertEqual("publish", e.transition)\n \n     def testInvokeEditView(self):\n-        element = getUtility(IRuleAction, name=\'plone.actions.Workflow\')\n+        element = getUtility(IRuleAction, name="plone.actions.Workflow")\n         e = WorkflowAction()\n-        editview = getMultiAdapter(\n-            (e, self.folder.REQUEST), name=element.editview)\n+        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)\n         self.assertTrue(isinstance(editview, WorkflowEditFormView))\n \n     def testExecute(self):\n         e = WorkflowAction()\n-        e.transition = \'publish\'\n+        e.transition = "publish"\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         self.assertEqual(True, ex())\n \n         self.assertEqual(\n-            \'published\',\n+            "published",\n             self.portal.portal_workflow.getInfoFor(\n                 self.folder.d1,\n-                \'review_state\',\n-            )\n+                "review_state",\n+            ),\n         )\n \n     def testExecuteWithError(self):\n         e = WorkflowAction()\n-        e.transition = \'foobar\'\n+        e.transition = "foobar"\n \n         old_state = self.portal.portal_workflow.getInfoFor(\n-            self.folder.d1, \'review_state\')\n+            self.folder.d1, "review_state"\n+        )\n \n-        ex = getMultiAdapter(\n-            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n+        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)\n         self.assertEqual(False, ex())\n \n         self.assertEqual(\n             old_state,\n             self.portal.portal_workflow.getInfoFor(\n                 self.folder.d1,\n-                \'review_state\',\n-            )\n+                "review_state",\n+            ),\n         )\ndiff --git a/plone/app/contentrules/tests/test_browser.py b/plone/app/contentrules/tests/test_browser.py\nindex d9e0dda..f87ef42 100644\n--- a/plone/app/contentrules/tests/test_browser.py\n+++ b/plone/app/contentrules/tests/test_browser.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.testing import PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING\n from plone.testing import layered\n \n@@ -6,16 +5,18 @@\n import unittest\n \n \n-optionflags = (doctest.NORMALIZE_WHITESPACE |\n-               doctest.ELLIPSIS |\n-               doctest.REPORT_NDIFF)\n+optionflags = doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS | doctest.REPORT_NDIFF\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    for doc in [\'assignment.txt\', \'simplepublish.txt\', \'multipublish.txt\']:\n-        suite.addTest(layered(\n-            doctest.DocFileSuite(doc, package=\'plone.app.contentrules.tests\',\n-                                 optionflags=optionflags),\n-            layer=PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING))\n+    for doc in ["assignment.txt", "simplepublish.txt", "multipublish.txt"]:\n+        suite.addTest(\n+            layered(\n+                doctest.DocFileSuite(\n+                    doc, package="plone.app.contentrules.tests", optionflags=optionflags\n+                ),\n+                layer=PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING,\n+            )\n+        )\n     return suite\ndiff --git a/plone/app/contentrules/tests/test_cascading_rule.py b/plone/app/contentrules/tests/test_cascading_rule.py\nindex b006440..efeac84 100644\n--- a/plone/app/contentrules/tests/test_cascading_rule.py\n+++ b/plone/app/contentrules/tests/test_cascading_rule.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.api import edit_rule_assignment\n from plone.app.contentrules.testing import PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING\n from plone.app.testing import applyProfile\n@@ -16,28 +15,28 @@ class TestCascadingRule(unittest.TestCase):\n     layer = PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'news\')\n-        self.portal.invokeFactory(\'Folder\', \'events\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "news")\n+        self.portal.invokeFactory("Folder", "events")\n \n-        applyProfile(self.portal, \'plone.app.contentrules:testing\')\n-        edit_rule_assignment(self.portal, \'test4\', bubbles=1, enabled=1)\n-        edit_rule_assignment(self.portal, \'test5\', bubbles=1, enabled=1)\n+        applyProfile(self.portal, "plone.app.contentrules:testing")\n+        edit_rule_assignment(self.portal, "test4", bubbles=1, enabled=1)\n+        edit_rule_assignment(self.portal, "test5", bubbles=1, enabled=1)\n \n     def test_cascading_rule(self):\n         # check that test2 rule and test4 rule are executed\n         # test2 rule publishes the event in news folder\n         # test4 rule moves it in events folder when it is published\n \n-        createContentInContainer(self.portal.news, \'Event\', id=\'my-event\')\n-        self.assertFalse(\'my-event\' in self.portal.news)\n-        self.assertTrue(\'my-event\' in self.portal.events)\n+        createContentInContainer(self.portal.news, "Event", id="my-event")\n+        self.assertFalse("my-event" in self.portal.news)\n+        self.assertTrue("my-event" in self.portal.events)\n \n         wtool = self.portal.portal_workflow\n         self.assertEqual(\n-            wtool.getInfoFor(self.portal.events[\'my-event\'], \'review_state\'),\n-            \'published\',\n+            wtool.getInfoFor(self.portal.events["my-event"], "review_state"),\n+            "published",\n         )\ndiff --git a/plone/app/contentrules/tests/test_condition_group.py b/plone/app/contentrules/tests/test_condition_group.py\nindex 2145750..27cbde7 100644\n--- a/plone/app/contentrules/tests/test_condition_group.py\n+++ b/plone/app/contentrules/tests/test_condition_group.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.conditions.group import GroupCondition\n from plone.app.contentrules.conditions.group import GroupEditFormView\n from plone.app.contentrules.rule import Rule\n@@ -8,65 +7,56 @@\n from plone.contentrules.rule.interfaces import IRuleCondition\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import IObjectEvent\n \n \n @implementer(IObjectEvent)\n-class DummyEvent(object):\n-\n+class DummyEvent:\n     def __init__(self, obj):\n         self.object = obj\n \n \n class TestGroupCondition(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(IRuleCondition, name=\'plone.conditions.Group\')\n-        self.assertEqual(\'plone.conditions.Group\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleCondition, name="plone.conditions.Group")\n+        self.assertEqual("plone.conditions.Group", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(None, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(IRuleCondition, name=\'plone.conditions.Group\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.Group")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage["foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter(\n-            (rule, self.portal.REQUEST), name=\'+condition\')\n-        addview = getMultiAdapter(\n-            (adding, self.portal.REQUEST), name=element.addview)\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+condition")\n+        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)\n \n         addview.form_instance.update()\n-        content = addview.form_instance.create(\n-            data={\'group_names\': [\'Manager\']})\n+        content = addview.form_instance.create(data={"group_names": ["Manager"]})\n         addview.form_instance.add(content)\n \n         e = rule.conditions[0]\n         self.assertTrue(isinstance(e, GroupCondition))\n-        self.assertEqual([\'Manager\'], e.group_names)\n+        self.assertEqual(["Manager"], e.group_names)\n \n     def testInvokeEditView(self):\n-        element = getUtility(IRuleCondition, name=\'plone.conditions.Group\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.Group")\n         e = GroupCondition()\n-        editview = getMultiAdapter(\n-            (e, self.folder.REQUEST), name=element.editview)\n+        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)\n         self.assertTrue(isinstance(editview, GroupEditFormView))\n \n     def testExecute(self):\n         e = GroupCondition()\n-        e.group_names = [\'Administrators\', \'Reviewers\']\n+        e.group_names = ["Administrators", "Reviewers"]\n \n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.folder)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)\n         self.assertFalse(ex())\n \n-        group = self.portal.portal_groups.getGroupById(\'Administrators\')\n-        group.addMember(\n-            self.portal.portal_membership.getAuthenticatedMember().getId())\n+        group = self.portal.portal_groups.getGroupById("Administrators")\n+        group.addMember(self.portal.portal_membership.getAuthenticatedMember().getId())\n \n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.portal)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.portal)), IExecutable)\n         self.assertTrue(ex())\ndiff --git a/plone/app/contentrules/tests/test_condition_portal_type.py b/plone/app/contentrules/tests/test_condition_portal_type.py\nindex 3bdfedf..87f1cc8 100644\n--- a/plone/app/contentrules/tests/test_condition_portal_type.py\n+++ b/plone/app/contentrules/tests/test_condition_portal_type.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.conditions.portaltype import PortalTypeCondition\n from plone.app.contentrules.conditions.portaltype import PortalTypeEditFormView\n from plone.app.contentrules.rule import Rule\n@@ -9,70 +8,60 @@\n from Products.CMFCore.interfaces import ITypesTool\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import IObjectEvent\n \n \n @implementer(IObjectEvent)\n-class DummyEvent(object):\n-\n+class DummyEvent:\n     def __init__(self, obj):\n         self.object = obj\n \n \n class TestPortalTypeCondition(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.PortalType\')\n-        self.assertEqual(\'plone.conditions.PortalType\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleCondition, name="plone.conditions.PortalType")\n+        self.assertEqual("plone.conditions.PortalType", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(IObjectEvent, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.PortalType\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.PortalType")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage["foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter(\n-            (rule, self.portal.REQUEST), name=\'+condition\')\n-        addview = getMultiAdapter(\n-            (adding, self.portal.REQUEST), name=element.addview)\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+condition")\n+        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)\n \n         addview.form_instance.update()\n         content = addview.form_instance.create(\n-            data={\'check_types\': [\'Folder\', \'Image\']})\n+            data={"check_types": ["Folder", "Image"]}\n+        )\n         addview.form_instance.add(content)\n \n         e = rule.conditions[0]\n         self.assertTrue(isinstance(e, PortalTypeCondition))\n-        self.assertEqual([\'Folder\', \'Image\'], e.check_types)\n+        self.assertEqual(["Folder", "Image"], e.check_types)\n \n     def testInvokeEditView(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.PortalType\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.PortalType")\n         e = PortalTypeCondition()\n-        editview = getMultiAdapter(\n-            (e, self.folder.REQUEST), name=element.editview)\n+        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)\n         self.assertTrue(isinstance(editview, PortalTypeEditFormView))\n \n     def testExecute(self):\n         e = PortalTypeCondition()\n-        e.check_types = [\'Folder\', \'Image\']\n+        e.check_types = ["Folder", "Image"]\n \n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.folder)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)\n         self.assertTrue(ex())\n \n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.portal)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.portal)), IExecutable)\n         self.assertFalse(ex())\n \n         self.folder.portal_types = None\n         self.portal.getSiteManager().unregisterUtility(provided=ITypesTool)\n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.folder)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)\n         self.assertFalse(ex())\ndiff --git a/plone/app/contentrules/tests/test_condition_role.py b/plone/app/contentrules/tests/test_condition_role.py\nindex 252cf80..94850ce 100644\n--- a/plone/app/contentrules/tests/test_condition_role.py\n+++ b/plone/app/contentrules/tests/test_condition_role.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.conditions.role import RoleCondition\n from plone.app.contentrules.conditions.role import RoleEditFormView\n from plone.app.contentrules.rule import Rule\n@@ -8,63 +7,57 @@\n from plone.contentrules.rule.interfaces import IRuleCondition\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import IObjectEvent\n \n \n @implementer(IObjectEvent)\n-class DummyEvent(object):\n-\n+class DummyEvent:\n     def __init__(self, obj):\n         self.object = obj\n \n \n class TestRoleCondition(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(IRuleCondition, name=\'plone.conditions.Role\')\n-        self.assertEqual(\'plone.conditions.Role\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleCondition, name="plone.conditions.Role")\n+        self.assertEqual("plone.conditions.Role", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(None, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(IRuleCondition, name=\'plone.conditions.Role\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.Role")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage["foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter(\n-            (rule, self.portal.REQUEST), name=\'+condition\')\n-        addview = getMultiAdapter(\n-            (adding, self.portal.REQUEST), name=element.addview)\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+condition")\n+        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)\n \n         addview.form_instance.update()\n         content = addview.form_instance.create(\n-            data={\'role_names\': [\'Manager\', \'Member\']})\n+            data={"role_names": ["Manager", "Member"]}\n+        )\n         addview.form_instance.add(content)\n \n         e = rule.conditions[0]\n         self.assertTrue(isinstance(e, RoleCondition))\n-        self.assertEqual([\'Manager\', \'Member\'], e.role_names)\n+        self.assertEqual(["Manager", "Member"], e.role_names)\n \n     def testInvokeEditView(self):\n-        element = getUtility(IRuleCondition, name=\'plone.conditions.Role\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.Role")\n         e = RoleCondition()\n-        editview = getMultiAdapter(\n-            (e, self.folder.REQUEST), name=element.editview)\n+        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)\n         self.assertTrue(isinstance(editview, RoleEditFormView))\n \n     def testExecute(self):\n         e = RoleCondition()\n-        e.role_names = [\'Manager\', \'Member\']\n+        e.role_names = ["Manager", "Member"]\n \n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.folder)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)\n         self.assertTrue(ex())\n \n-        e.role_names = [\'Reviewer\']\n+        e.role_names = ["Reviewer"]\n \n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.portal)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.portal)), IExecutable)\n         self.assertFalse(ex())\ndiff --git a/plone/app/contentrules/tests/test_condition_tales_expression.py b/plone/app/contentrules/tests/test_condition_tales_expression.py\nindex 201330b..af207c4 100644\n--- a/plone/app/contentrules/tests/test_condition_tales_expression.py\n+++ b/plone/app/contentrules/tests/test_condition_tales_expression.py\n@@ -1,6 +1,9 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.contentrules.conditions.talesexpression import TalesExpressionCondition  # noqa\n-from plone.app.contentrules.conditions.talesexpression import TalesExpressionEditFormView  # noqa\n+from plone.app.contentrules.conditions.talesexpression import (  # noqa\n+    TalesExpressionCondition,\n+)\n+from plone.app.contentrules.conditions.talesexpression import (  # noqa\n+    TalesExpressionEditFormView,\n+)\n from plone.app.contentrules.rule import Rule\n from plone.app.contentrules.tests.base import ContentRulesTestCase\n from plone.contentrules.engine.interfaces import IRuleStorage\n@@ -8,76 +11,64 @@\n from plone.contentrules.rule.interfaces import IRuleCondition\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import IObjectEvent\n \n \n @implementer(IObjectEvent)\n-class DummyEvent(object):\n-\n+class DummyEvent:\n     def __init__(self, obj):\n         self.object = obj\n \n \n class TestTalesExpressionCondition(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.TalesExpression\')\n-        self.assertEqual(\'plone.conditions.TalesExpression\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleCondition, name="plone.conditions.TalesExpression")\n+        self.assertEqual("plone.conditions.TalesExpression", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n \n     def testInvokeAddView(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.TalesExpression\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.TalesExpression")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage["foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter(\n-            (rule, self.portal.REQUEST), name=\'+condition\')\n-        addview = getMultiAdapter(\n-            (adding, self.portal.REQUEST), name=element.addview)\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+condition")\n+        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)\n \n         addview.form_instance.update()\n         content = addview.form_instance.create(\n-            data={\'tales_expression\': \'python:"plone" in object.Subject()\'})\n+            data={"tales_expression": \'python:"plone" in object.Subject()\'}\n+        )\n         addview.form_instance.add(content)\n \n         e = rule.conditions[0]\n         self.assertTrue(isinstance(e, TalesExpressionCondition))\n-        self.assertEqual(\'python:"plone" in object.Subject()\',\n-                         e.tales_expression)\n+        self.assertEqual(\'python:"plone" in object.Subject()\', e.tales_expression)\n \n     def testInvokeEditView(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.TalesExpression\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.TalesExpression")\n         e = TalesExpressionCondition()\n-        editview = getMultiAdapter(\n-            (e, self.folder.REQUEST), name=element.editview)\n+        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)\n         self.assertTrue(isinstance(editview, TalesExpressionEditFormView))\n \n     def testExecute(self):\n         e = TalesExpressionCondition()\n         e.tales_expression = \'python:"plone" in object.Subject()\'\n \n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.folder)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)\n         self.assertEqual(False, ex())\n \n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.portal)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.portal)), IExecutable)\n         self.assertEqual(False, ex())\n \n-        self.folder.setSubject((\'plone\', \'contentrules\'))\n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.folder)), IExecutable)\n+        self.folder.setSubject(("plone", "contentrules"))\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)\n         self.assertEqual(True, ex())\n \n     def testExecuteUnicodeString(self):\n         e = TalesExpressionCondition()\n-        e.tales_expression = u\'string:${portal_url}\'\n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.folder)), IExecutable)\n+        e.tales_expression = "string:${portal_url}"\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)\n         self.assertEqual(True, ex())\ndiff --git a/plone/app/contentrules/tests/test_condition_wfstate.py b/plone/app/contentrules/tests/test_condition_wfstate.py\nindex 710d25d..1970de9 100644\n--- a/plone/app/contentrules/tests/test_condition_wfstate.py\n+++ b/plone/app/contentrules/tests/test_condition_wfstate.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.conditions.wfstate import WorkflowStateCondition\n from plone.app.contentrules.conditions.wfstate import WorkflowStateEditFormView\n from plone.app.contentrules.rule import Rule\n@@ -8,70 +7,60 @@\n from plone.contentrules.rule.interfaces import IRuleCondition\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.interface.interfaces import IObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import IObjectEvent\n \n \n @implementer(IObjectEvent)\n-class DummyEvent(object):\n-\n+class DummyEvent:\n     def __init__(self, obj):\n         self.object = obj\n \n \n class TestWorkflowStateCondition(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.WorkflowState\')\n-        self.assertEqual(\'plone.conditions.WorkflowState\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleCondition, name="plone.conditions.WorkflowState")\n+        self.assertEqual("plone.conditions.WorkflowState", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(IObjectEvent, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.WorkflowState\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.WorkflowState")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage["foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter(\n-            (rule, self.portal.REQUEST), name=\'+condition\')\n-        addview = getMultiAdapter(\n-            (adding, self.portal.REQUEST), name=element.addview)\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+condition")\n+        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)\n \n         addview.form_instance.update()\n         content = addview.form_instance.create(\n-            data={\'wf_states\': [\'visible\', \'published\']})\n+            data={"wf_states": ["visible", "published"]}\n+        )\n         addview.form_instance.add(content)\n \n         e = rule.conditions[0]\n         self.assertTrue(isinstance(e, WorkflowStateCondition))\n-        self.assertEqual([\'visible\', \'published\'], e.wf_states)\n+        self.assertEqual(["visible", "published"], e.wf_states)\n \n     def testInvokeEditView(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.WorkflowState\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.WorkflowState")\n         e = WorkflowStateCondition()\n-        editview = getMultiAdapter(\n-            (e, self.folder.REQUEST), name=element.editview)\n+        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)\n         self.assertTrue(isinstance(editview, WorkflowStateEditFormView))\n \n     def testExecute(self):\n         e = WorkflowStateCondition()\n-        e.wf_states = [\'visible\', \'private\']\n+        e.wf_states = ["visible", "private"]\n \n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.folder)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)\n         self.assertTrue(ex())\n \n-        self.portal.portal_workflow.doActionFor(self.folder, \'publish\')\n+        self.portal.portal_workflow.doActionFor(self.folder, "publish")\n \n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.folder)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)\n         self.assertFalse(ex())\n \n-        ex = getMultiAdapter(\n-            (self.portal, e, DummyEvent(self.portal)), IExecutable)\n+        ex = getMultiAdapter((self.portal, e, DummyEvent(self.portal)), IExecutable)\n         self.assertFalse(ex())\ndiff --git a/plone/app/contentrules/tests/test_condition_wftransition.py b/plone/app/contentrules/tests/test_condition_wftransition.py\nindex 4de5dfb..d83316d 100644\n--- a/plone/app/contentrules/tests/test_condition_wftransition.py\n+++ b/plone/app/contentrules/tests/test_condition_wftransition.py\n@@ -1,6 +1,9 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.contentrules.conditions.wftransition import WorkflowTransitionCondition  # noqa\n-from plone.app.contentrules.conditions.wftransition import WorkflowTransitionEditFormView  # noqa\n+from plone.app.contentrules.conditions.wftransition import (  # noqa\n+    WorkflowTransitionCondition,\n+)\n+from plone.app.contentrules.conditions.wftransition import (  # noqa\n+    WorkflowTransitionEditFormView,\n+)\n from plone.app.contentrules.rule import Rule\n from plone.app.contentrules.tests.base import ContentRulesTestCase\n from plone.contentrules.engine.interfaces import IRuleStorage\n@@ -13,48 +16,41 @@\n \n \n class TestWorkflowTransitionCondition(ContentRulesTestCase):\n-\n     def testRegistered(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.WorkflowTransition\')\n-        self.assertEqual(\n-            \'plone.conditions.WorkflowTransition\', element.addview)\n-        self.assertEqual(\'edit\', element.editview)\n+        element = getUtility(IRuleCondition, name="plone.conditions.WorkflowTransition")\n+        self.assertEqual("plone.conditions.WorkflowTransition", element.addview)\n+        self.assertEqual("edit", element.editview)\n         self.assertEqual(None, element.for_)\n         self.assertEqual(IActionSucceededEvent, element.event)\n \n     def testInvokeAddView(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.WorkflowTransition\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.WorkflowTransition")\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+        storage["foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n \n-        adding = getMultiAdapter(\n-            (rule, self.portal.REQUEST), name=\'+condition\')\n-        addview = getMultiAdapter(\n-            (adding, self.portal.REQUEST), name=element.addview)\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+condition")\n+        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)\n \n         addview.form_instance.update()\n         content = addview.form_instance.create(\n-            data={\'wf_transitions\': [\'publish\', \'hide\']})\n+            data={"wf_transitions": ["publish", "hide"]}\n+        )\n         addview.form_instance.add(content)\n \n         e = rule.conditions[0]\n         self.assertTrue(isinstance(e, WorkflowTransitionCondition))\n-        self.assertEqual([\'publish\', \'hide\'], e.wf_transitions)\n+        self.assertEqual(["publish", "hide"], e.wf_transitions)\n \n     def testInvokeEditView(self):\n-        element = getUtility(\n-            IRuleCondition, name=\'plone.conditions.WorkflowTransition\')\n+        element = getUtility(IRuleCondition, name="plone.conditions.WorkflowTransition")\n         e = WorkflowTransitionCondition()\n-        editview = getMultiAdapter(\n-            (e, self.folder.REQUEST), name=element.editview)\n+        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)\n         self.assertTrue(isinstance(editview, WorkflowTransitionEditFormView))\n \n     def testExecute(self):\n         e = WorkflowTransitionCondition()\n-        e.wf_transitions = [\'publish\', \'hide\']\n+        e.wf_transitions = ["publish", "hide"]\n \n         ex = getMultiAdapter(\n             (\n@@ -62,10 +58,10 @@ def testExecute(self):\n                 e,\n                 ActionSucceededEvent(\n                     self.folder,\n-                    \'dummy_workflow\',\n-                    \'publish\',\n+                    "dummy_workflow",\n+                    "publish",\n                     None,\n-                )\n+                ),\n             ),\n             IExecutable,\n         )\n@@ -77,10 +73,10 @@ def testExecute(self):\n                 e,\n                 ActionSucceededEvent(\n                     self.folder,\n-                    \'dummy_workflow\',\n-                    \'retract\',\n+                    "dummy_workflow",\n+                    "retract",\n                     None,\n-                )\n+                ),\n             ),\n             IExecutable,\n         )\n@@ -92,10 +88,10 @@ def testExecute(self):\n                 e,\n                 ActionSucceededEvent(\n                     self.folder,\n-                    \'dummy_workflow\',\n-                    \'hide\',\n+                    "dummy_workflow",\n+                    "hide",\n                     None,\n-                )\n+                ),\n             ),\n             IExecutable,\n         )\ndiff --git a/plone/app/contentrules/tests/test_configuration.py b/plone/app/contentrules/tests/test_configuration.py\nindex 885cd7a..5e0d50b 100644\n--- a/plone/app/contentrules/tests/test_configuration.py\n+++ b/plone/app/contentrules/tests/test_configuration.py\n@@ -1,5 +1,6 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.contentrules.testing import PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING  # noqa: E501\n+from plone.app.contentrules.testing import (  # noqa: E501\n+    PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING,\n+)\n from plone.app.testing import applyProfile\n from plone.app.testing import login\n from plone.app.testing import setRoles\n@@ -22,72 +23,71 @@ class TestGenericSetup(unittest.TestCase):\n     layer = PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'news\')\n-        self.portal.invokeFactory(\'Folder\', \'events\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "news")\n+        self.portal.invokeFactory("Folder", "events")\n         self.storage = getUtility(IRuleStorage)\n-        applyProfile(self.portal, \'plone.app.contentrules:testing\')\n+        applyProfile(self.portal, "plone.app.contentrules:testing")\n \n     def testRuleInstalled(self):\n-        self.assertTrue(\'test1\' in self.storage)\n-        self.assertTrue(\'test2\' in self.storage)\n+        self.assertTrue("test1" in self.storage)\n+        self.assertTrue("test2" in self.storage)\n \n     def testRulesConfigured(self):\n-        rule1 = self.storage[\'test1\']\n-        self.assertEqual(\'Test rule 1\', rule1.title)\n-        self.assertEqual(\'A test rule\', rule1.description)\n+        rule1 = self.storage["test1"]\n+        self.assertEqual("Test rule 1", rule1.title)\n+        self.assertEqual("A test rule", rule1.description)\n         self.assertEqual(IObjectModifiedEvent, rule1.event)\n         self.assertEqual(True, rule1.enabled)\n         self.assertEqual(False, rule1.stop)\n \n         self.assertEqual(2, len(rule1.conditions))\n-        self.assertEqual(\'plone.conditions.PortalType\',\n-                         rule1.conditions[0].element)\n-        self.assertEqual(set([\'Document\', \'News Item\']),\n-                         set(rule1.conditions[0].check_types))\n-        self.assertEqual(\'plone.conditions.Role\', rule1.conditions[1].element)\n-        self.assertEqual([\'Manager\'], list(rule1.conditions[1].role_names))\n+        self.assertEqual("plone.conditions.PortalType", rule1.conditions[0].element)\n+        self.assertEqual(\n+            {"Document", "News Item"}, set(rule1.conditions[0].check_types)\n+        )\n+        self.assertEqual("plone.conditions.Role", rule1.conditions[1].element)\n+        self.assertEqual(["Manager"], list(rule1.conditions[1].role_names))\n \n         self.assertEqual(1, len(rule1.actions))\n-        self.assertEqual(\'plone.actions.Notify\', rule1.actions[0].element)\n-        self.assertEqual(u\'A message: Hej d\\xe5\', rule1.actions[0].message)\n-        self.assertEqual(\'info\', rule1.actions[0].message_type)\n+        self.assertEqual("plone.actions.Notify", rule1.actions[0].element)\n+        self.assertEqual("A message: Hej d\\xe5", rule1.actions[0].message)\n+        self.assertEqual("info", rule1.actions[0].message_type)\n \n-        rule2 = self.storage[\'test2\']\n-        self.assertEqual(\'Test rule 2\', rule2.title)\n-        self.assertEqual(\'Another test rule\', rule2.description)\n+        rule2 = self.storage["test2"]\n+        self.assertEqual("Test rule 2", rule2.title)\n+        self.assertEqual("Another test rule", rule2.description)\n         self.assertEqual(IObjectModifiedEvent, rule2.event)\n         self.assertEqual(False, rule2.enabled)\n         self.assertEqual(True, rule2.stop)\n \n         self.assertEqual(1, len(rule2.conditions))\n-        self.assertEqual(\'plone.conditions.PortalType\',\n-                         rule2.conditions[0].element)\n-        self.assertEqual([\'Event\'], list(rule2.conditions[0].check_types))\n+        self.assertEqual("plone.conditions.PortalType", rule2.conditions[0].element)\n+        self.assertEqual(["Event"], list(rule2.conditions[0].check_types))\n \n         self.assertEqual(1, len(rule2.actions))\n-        self.assertEqual(\'plone.actions.Workflow\', rule2.actions[0].element)\n-        self.assertEqual(\'publish\', rule2.actions[0].transition)\n+        self.assertEqual("plone.actions.Workflow", rule2.actions[0].element)\n+        self.assertEqual("publish", rule2.actions[0].transition)\n \n     def testRuleAssigned(self):\n         assignable = IRuleAssignmentManager(self.portal.news)\n         self.assertEqual(3, len(assignable))\n \n-        self.assertEqual(True, assignable[\'test1\'].enabled)\n-        self.assertEqual(False, assignable[\'test1\'].bubbles)\n+        self.assertEqual(True, assignable["test1"].enabled)\n+        self.assertEqual(False, assignable["test1"].bubbles)\n \n-        self.assertEqual(False, assignable[\'test2\'].enabled)\n-        self.assertEqual(True, assignable[\'test2\'].bubbles)\n+        self.assertEqual(False, assignable["test2"].enabled)\n+        self.assertEqual(True, assignable["test2"].bubbles)\n \n-        self.assertEqual(False, assignable[\'test3\'].enabled)\n-        self.assertEqual(False, assignable[\'test3\'].bubbles)\n+        self.assertEqual(False, assignable["test3"].enabled)\n+        self.assertEqual(False, assignable["test3"].bubbles)\n \n     def testAssignmentOrdering(self):\n         assignable = IRuleAssignmentManager(self.portal.news)\n-        self.assertEqual(set([u\'test3\', u\'test2\', u\'test1\']), set(assignable.keys()))\n+        self.assertEqual({"test3", "test2", "test1"}, set(assignable.keys()))\n \n     def testImportTwice(self):\n         # Ensure rules, actions/conditions and assignments are not duplicated\n@@ -95,7 +95,8 @@ def testImportTwice(self):\n         portal_setup = self.portal.portal_setup\n         time.sleep(1)  # avoid timestamp colission\n         portal_setup.runAllImportStepsFromProfile(\n-            \'profile-plone.app.contentrules:testing\')\n+            "profile-plone.app.contentrules:testing"\n+        )\n \n         # We should get the same results as before\n         self.testRuleInstalled()\n@@ -106,22 +107,23 @@ def testExport(self):\n         self.maxDiff = None\n         site = self.portal\n         context = TarballExportContext(self.portal.portal_setup)\n-        exporter = getMultiAdapter(\n-            (site, context), IBody, name=u\'plone.contentrules\')\n+        exporter = getMultiAdapter((site, context), IBody, name="plone.contentrules")\n \n-        body = exporter.body.decode(\'utf8\')\n+        body = exporter.body.decode("utf8")\n \n         # There is a bug in supermodel such that Set fields can be exported in a random order\n-        body = body.replace("""\n+        body = body.replace(\n+            """\n      <element>News Item</element>\n      <element>Document</element>\n-""","""\n+""",\n+            """\n      <element>Document</element>\n      <element>News Item</element>\n-"""\n+""",\n         )\n \n-        expected = u"""<?xml version="1.0" encoding="utf-8"?>\n+        expected = """<?xml version="1.0" encoding="utf-8"?>\n <contentrules>\n  <rule name="test1" title="Test rule 1" cascading="False"\n     description="A test rule" enabled="True"\n@@ -217,5 +219,5 @@ def testExport(self):\n  <assignment name="test3" bubbles="False" enabled="False" location="/news"/>\n </contentrules>\n """\n-     \n+\n         self.assertEqual(expected.strip(), body.strip())\ndiff --git a/plone/app/contentrules/tests/test_events.py b/plone/app/contentrules/tests/test_events.py\nindex 0d20093..374f632 100644\n--- a/plone/app/contentrules/tests/test_events.py\n+++ b/plone/app/contentrules/tests/test_events.py\n@@ -1,9 +1,7 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.tests.base import ContentRulesTestCase\n \n \n class TestEvents(ContentRulesTestCase):\n-\n     def testEventHandlerExecutesRules(self):\n         # XXX Test missing\n         pass\ndiff --git a/plone/app/contentrules/tests/test_handlers.py b/plone/app/contentrules/tests/test_handlers.py\nindex fce4c5f..678d9bc 100644\n--- a/plone/app/contentrules/tests/test_handlers.py\n+++ b/plone/app/contentrules/tests/test_handlers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules import handlers\n from plone.app.contentrules.tests import dummy\n from plone.app.contentrules.tests.base import ContentRulesTestCase\n@@ -7,9 +6,8 @@\n \n \n class TestDuplicateRuleFilter(ContentRulesTestCase):\n-\n     def setUp(self):\n-        super(TestDuplicateRuleFilter, self).setUp()\n+        super().setUp()\n         self.context = self.folder\n         self.event = dummy.DummyEvent(self.context)\n         self.rulefilter = handlers.DuplicateRuleFilter()\n@@ -28,7 +26,7 @@ def test_call_two_events_in_same_context(self):\n         # they are not filtered\n         to_execute = self.rulefilter(self.context, self.rule, self.event)\n         self.assertTrue(to_execute)\n-        self.portal.invokeFactory(\'Folder\', \'folder2\')\n+        self.portal.invokeFactory("Folder", "folder2")\n         event2 = dummy.DummyEvent(self.portal.folder2)\n         to_execute = self.rulefilter(self.context, self.rule, event2)\n         self.assertTrue(to_execute)\n@@ -38,19 +36,3 @@ def test_call_uuidaware(self):\n         self.assertTrue(to_execute)\n         to_execute = self.rulefilter(self.uuidaware, self.rule, self.event)\n         self.assertTrue(not to_execute)\n-\n-    def test_delayed_events(self):\n-        # many events can be delayed\n-        # But this was only true for Archetypes content.\n-        # The tests no use dexterity so we skip it:\n-        return\n-\n-        self.portal.invokeFactory(\'Folder\', \'folder2\')\n-        event1 = dummy.DummyEvent(self.folder)\n-        event2 = dummy.DummyEvent(self.portal.folder2)\n-        from plone.app.contentrules.handlers import _status\n-        _status.delayed_events = {}\n-        handlers.added(event1)\n-        handlers.added(event2)\n-        from plone.app.contentrules.handlers import _status\n-        self.assertEqual(len(_status.delayed_events), 2)\ndiff --git a/plone/app/contentrules/tests/test_rule_assignment_mapping.py b/plone/app/contentrules/tests/test_rule_assignment_mapping.py\nindex 5f563b4..4b62a7c 100644\n--- a/plone/app/contentrules/tests/test_rule_assignment_mapping.py\n+++ b/plone/app/contentrules/tests/test_rule_assignment_mapping.py\n@@ -1,9 +1,10 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules import api\n from plone.app.contentrules.rule import get_assignments\n from plone.app.contentrules.rule import insert_assignment\n from plone.app.contentrules.rule import Rule\n-from plone.app.contentrules.testing import PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING  # noqa: E501\n+from plone.app.contentrules.testing import (  # noqa: E501\n+    PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING,\n+)\n from plone.app.contentrules.tests.base import ContentRulesTestCase\n from plone.app.testing import login\n from plone.app.testing import setRoles\n@@ -23,122 +24,124 @@ class TestRuleAssignmentMapping(unittest.TestCase):\n     layer = PLONE_APP_CONTENTRULES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'f1\')\n-        self.folder = self.portal[\'f1\']\n-        self.folder.invokeFactory(\'Document\', \'d1\')\n-        self.portal.invokeFactory(\'Folder\', \'target\')\n-        self.folder.invokeFactory(\'Folder\', \'f1\')\n-        self.folder.f1.invokeFactory(\'Folder\', \'f11\')\n-        self.folder.f1.invokeFactory(\'Folder\', \'f12\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "f1")\n+        self.folder = self.portal["f1"]\n+        self.folder.invokeFactory("Document", "d1")\n+        self.portal.invokeFactory("Folder", "target")\n+        self.folder.invokeFactory("Folder", "f1")\n+        self.folder.f1.invokeFactory("Folder", "f11")\n+        self.folder.f1.invokeFactory("Folder", "f12")\n \n         self.storage = getUtility(IRuleStorage)\n-        self.storage[\'r1\'] = Rule()\n-        self.storage[\'r2\'] = Rule()\n-        self.storage[\'r3\'] = Rule()\n+        self.storage["r1"] = Rule()\n+        self.storage["r2"] = Rule()\n+        self.storage["r3"] = Rule()\n \n         self.f11a = IRuleAssignmentManager(self.folder.f1.f11)\n-        self.f11a[\'r1\'] = RuleAssignment(\'r1\', bubbles=True)\n-        insert_assignment(self.storage[\'r1\'],\n-                          \'/\'.join(self.folder.f1.f11.getPhysicalPath()))\n+        self.f11a["r1"] = RuleAssignment("r1", bubbles=True)\n+        insert_assignment(\n+            self.storage["r1"], "/".join(self.folder.f1.f11.getPhysicalPath())\n+        )\n \n         self.f12a = IRuleAssignmentManager(self.folder.f1.f12)\n-        self.f12a[\'r1\'] = RuleAssignment(\'r1\', bubbles=True)\n-        insert_assignment(self.storage[\'r1\'],\n-                          \'/\'.join(self.folder.f1.f12.getPhysicalPath()))\n+        self.f12a["r1"] = RuleAssignment("r1", bubbles=True)\n+        insert_assignment(\n+            self.storage["r1"], "/".join(self.folder.f1.f12.getPhysicalPath())\n+        )\n \n-        self.f12a[\'r2\'] = RuleAssignment(\'r2\', bubbles=True)\n-        insert_assignment(self.storage[\'r2\'],\n-                          \'/\'.join(self.folder.f1.f12.getPhysicalPath()))\n+        self.f12a["r2"] = RuleAssignment("r2", bubbles=True)\n+        insert_assignment(\n+            self.storage["r2"], "/".join(self.folder.f1.f12.getPhysicalPath())\n+        )\n \n     def testRuleRemoved(self):\n-        self.assertTrue(\'r1\' in self.f11a)\n-        self.assertTrue(\'r1\' in self.f12a)\n+        self.assertTrue("r1" in self.f11a)\n+        self.assertTrue("r1" in self.f12a)\n \n-        del self.storage[\'r1\']\n+        del self.storage["r1"]\n \n-        self.assertFalse(\'r1\' in self.f11a)\n-        self.assertFalse(\'r1\' in self.f12a)\n+        self.assertFalse("r1" in self.f11a)\n+        self.assertFalse("r1" in self.f12a)\n \n     def testContainerMoved(self):\n-        f12path = \'/\'.join(self.folder.f1.f12.getPhysicalPath())\n-        self.assertTrue(f12path in get_assignments(self.storage[\'r1\']))\n-        self.assertTrue(f12path in get_assignments(self.storage[\'r2\']))\n+        f12path = "/".join(self.folder.f1.f12.getPhysicalPath())\n+        self.assertTrue(f12path in get_assignments(self.storage["r1"]))\n+        self.assertTrue(f12path in get_assignments(self.storage["r2"]))\n \n         transaction.savepoint(1)\n-        self.folder.f1.manage_renameObject(\'f12\', \'f12a\')\n-        f12apath = \'/\'.join(self.folder.f1.f12a.getPhysicalPath())\n+        self.folder.f1.manage_renameObject("f12", "f12a")\n+        f12apath = "/".join(self.folder.f1.f12a.getPhysicalPath())\n \n-        self.assertFalse(f12path in get_assignments(self.storage[\'r1\']))\n-        self.assertFalse(f12path in get_assignments(self.storage[\'r2\']))\n+        self.assertFalse(f12path in get_assignments(self.storage["r1"]))\n+        self.assertFalse(f12path in get_assignments(self.storage["r2"]))\n \n-        self.assertTrue(f12apath in get_assignments(self.storage[\'r1\']))\n-        self.assertTrue(f12apath in get_assignments(self.storage[\'r1\']))\n+        self.assertTrue(f12apath in get_assignments(self.storage["r1"]))\n+        self.assertTrue(f12apath in get_assignments(self.storage["r1"]))\n \n     def testParentOfContainerMoved(self):\n-        f12path = \'/\'.join(self.folder.f1.f12.getPhysicalPath())\n-        self.assertTrue(f12path in get_assignments(self.storage[\'r1\']))\n-        self.assertTrue(f12path in get_assignments(self.storage[\'r2\']))\n+        f12path = "/".join(self.folder.f1.f12.getPhysicalPath())\n+        self.assertTrue(f12path in get_assignments(self.storage["r1"]))\n+        self.assertTrue(f12path in get_assignments(self.storage["r2"]))\n \n         transaction.savepoint(1)\n-        self.folder.manage_renameObject(\'f1\', \'f1a\')\n-        f12apath = \'/\'.join(self.folder.f1a.f12.getPhysicalPath())\n+        self.folder.manage_renameObject("f1", "f1a")\n+        f12apath = "/".join(self.folder.f1a.f12.getPhysicalPath())\n \n-        self.assertFalse(f12path in get_assignments(self.storage[\'r1\']))\n-        self.assertFalse(f12path in get_assignments(self.storage[\'r2\']))\n+        self.assertFalse(f12path in get_assignments(self.storage["r1"]))\n+        self.assertFalse(f12path in get_assignments(self.storage["r2"]))\n \n-        self.assertTrue(f12apath in get_assignments(self.storage[\'r1\']))\n-        self.assertTrue(f12apath in get_assignments(self.storage[\'r1\']))\n+        self.assertTrue(f12apath in get_assignments(self.storage["r1"]))\n+        self.assertTrue(f12apath in get_assignments(self.storage["r1"]))\n \n     def testContainerRemoved(self):\n-        f12path = \'/\'.join(self.folder.f1.f12.getPhysicalPath())\n-        self.assertTrue(f12path in get_assignments(self.storage[\'r1\']))\n-        self.assertTrue(f12path in get_assignments(self.storage[\'r2\']))\n+        f12path = "/".join(self.folder.f1.f12.getPhysicalPath())\n+        self.assertTrue(f12path in get_assignments(self.storage["r1"]))\n+        self.assertTrue(f12path in get_assignments(self.storage["r2"]))\n \n         transaction.savepoint(1)\n-        self.folder._delObject(\'f1\')\n+        self.folder._delObject("f1")\n \n-        self.assertFalse(f12path in get_assignments(self.storage[\'r1\']))\n-        self.assertFalse(f12path in get_assignments(self.storage[\'r2\']))\n+        self.assertFalse(f12path in get_assignments(self.storage["r1"]))\n+        self.assertFalse(f12path in get_assignments(self.storage["r2"]))\n \n     def testRuleAssignmentRemovedAPI(self):\n-        self.assertTrue(\'r1\' in self.f11a)\n-        self.assertTrue(\'r1\' in self.f12a)\n+        self.assertTrue("r1" in self.f11a)\n+        self.assertTrue("r1" in self.f12a)\n \n-        api.unassign_rule(self.folder.f1.f11, \'r1\')\n+        api.unassign_rule(self.folder.f1.f11, "r1")\n \n-        self.assertFalse(\'r1\' in self.f11a)\n-        self.assertTrue(\'r1\' in self.f12a)\n+        self.assertFalse("r1" in self.f11a)\n+        self.assertTrue("r1" in self.f12a)\n \n     def testRuleAssignmentEditedAPI(self):\n-        self.assertTrue(self.f11a[\'r1\'].bubbles)\n-        self.assertTrue(self.f11a[\'r1\'].enabled)\n+        self.assertTrue(self.f11a["r1"].bubbles)\n+        self.assertTrue(self.f11a["r1"].enabled)\n \n-        api.edit_rule_assignment(self.folder.f1.f11, \'r1\',\n-                                 bubbles=False, enabled=False)\n+        api.edit_rule_assignment(self.folder.f1.f11, "r1", bubbles=False, enabled=False)\n \n-        self.assertFalse(self.f11a[\'r1\'].bubbles)\n-        self.assertFalse(self.f11a[\'r1\'].enabled)\n+        self.assertFalse(self.f11a["r1"].bubbles)\n+        self.assertFalse(self.f11a["r1"].enabled)\n \n-        api.edit_rule_assignment(self.folder.f1.f11, \'r1\',\n-                                 bubbles=True, enabled=True)\n+        api.edit_rule_assignment(self.folder.f1.f11, "r1", bubbles=True, enabled=True)\n \n-        self.assertTrue(self.f11a[\'r1\'].bubbles)\n-        self.assertTrue(self.f11a[\'r1\'].enabled)\n+        self.assertTrue(self.f11a["r1"].bubbles)\n+        self.assertTrue(self.f11a["r1"].enabled)\n \n     def testRuleAssignmentAddedAPI(self):\n-        api.assign_rule(self.folder.f1.f11, \'r2\', enabled=True, bubbles=True)\n-        self.assertTrue(\'r2\' in self.f11a)\n-        self.assertTrue(self.f11a[\'r2\'].enabled)\n-        self.assertTrue(self.f11a[\'r2\'].bubbles)\n-\n-        api.assign_rule(self.folder.f1.f11, \'r3\', enabled=True, bubbles=False,\n-                        insert_before=\'r2\')\n-        self.assertTrue(\'r3\' in self.f11a)\n-        self.assertTrue(self.f11a[\'r3\'].enabled)\n-        self.assertFalse(self.f11a[\'r3\'].bubbles)\n-\n-        self.assertEqual(self.f11a.keys(), [\'r1\', \'r3\', \'r2\'])\n+        api.assign_rule(self.folder.f1.f11, "r2", enabled=True, bubbles=True)\n+        self.assertTrue("r2" in self.f11a)\n+        self.assertTrue(self.f11a["r2"].enabled)\n+        self.assertTrue(self.f11a["r2"].bubbles)\n+\n+        api.assign_rule(\n+            self.folder.f1.f11, "r3", enabled=True, bubbles=False, insert_before="r2"\n+        )\n+        self.assertTrue("r3" in self.f11a)\n+        self.assertTrue(self.f11a["r3"].enabled)\n+        self.assertFalse(self.f11a["r3"].bubbles)\n+\n+        self.assertEqual(self.f11a.keys(), ["r1", "r3", "r2"])\ndiff --git a/plone/app/contentrules/tests/test_rule_management_views.py b/plone/app/contentrules/tests/test_rule_management_views.py\nindex 1f12657..f96137f 100644\n--- a/plone/app/contentrules/tests/test_rule_management_views.py\n+++ b/plone/app/contentrules/tests/test_rule_management_views.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .dummy import DummyAction\n from .dummy import DummyCondition\n from plone.app.contentrules.browser.rule import RuleEditFormView\n@@ -12,17 +11,15 @@\n \n class DummyModifiedRule(Rule):\n \n-    title = \'My test rule\'\n-    description = \'Test my rule\'\n+    title = "My test rule"\n+    description = "Test my rule"\n     event = IObjectModifiedEvent\n     enabled = True\n \n \n class TestRuleManagementViews(ContentRulesTestCase):\n-\n     def testRuleAdding(self):\n-        adding = getMultiAdapter(\n-            (self.portal, self.portal.REQUEST), name=\'+rule\')\n+        adding = getMultiAdapter((self.portal, self.portal.REQUEST), name="+rule")\n         storage = getUtility(IRuleStorage)\n         self.assertEqual(0, len(storage))\n         r = Rule()\n@@ -31,39 +28,40 @@ def testRuleAdding(self):\n         self.assertTrue(list(storage.values())[0] is r)\n \n     def testRuleAddView(self):\n-        adding = getMultiAdapter(\n-            (self.portal, self.portal.REQUEST), name=\'+rule\')\n+        adding = getMultiAdapter((self.portal, self.portal.REQUEST), name="+rule")\n         addview = getMultiAdapter(\n-            (adding, self.portal.REQUEST), name=\'plone.ContentRule\')\n+            (adding, self.portal.REQUEST), name="plone.ContentRule"\n+        )\n         storage = getUtility(IRuleStorage)\n         self.assertEqual(0, len(storage))\n         addview.form_instance.update()\n-        content = addview.form_instance.create({\'title\': \'foo\', \'description\': \'bar\', \'event\': None})  # noqa\n+        content = addview.form_instance.create(\n+            {"title": "foo", "description": "bar", "event": None}\n+        )  # noqa\n         addview.form_instance.add(content)\n         self.assertEqual(1, len(storage))\n-        self.assertEqual(\'foo\', list(storage.values())[0].title)\n+        self.assertEqual("foo", list(storage.values())[0].title)\n \n     def testRuleEditView(self):\n         r = Rule()\n-        editview = getMultiAdapter((r, self.portal.REQUEST), name=\'edit\')\n+        editview = getMultiAdapter((r, self.portal.REQUEST), name="edit")\n         self.assertTrue(isinstance(editview, RuleEditFormView))\n \n \n class TestRuleElementManagementViews(ContentRulesTestCase):\n-\n     def afterSetUp(self):\n-        self.setRoles((\'Manager\', ))\n+        self.setRoles(("Manager",))\n \n     def testRuleStopModification(self):\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n+        storage["foo"] = Rule()\n \n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n-        view = rule.restrictedTraverse(\'manage-elements\')\n-        view.template = lambda: \'No template thanks\'\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n+        view = rule.restrictedTraverse("manage-elements")\n+        view.template = lambda: "No template thanks"\n \n-        self.portal.REQUEST.form[\'stopExecuting\'] = \'on\'\n-        self.portal.REQUEST.form[\'form.button.Save\'] = True\n+        self.portal.REQUEST.form["stopExecuting"] = "on"\n+        self.portal.REQUEST.form["form.button.Save"] = True\n         self.addAuthToRequest()\n \n         self.assertEqual(False, rule.stop)\n@@ -72,10 +70,9 @@ def testRuleStopModification(self):\n \n     def testRuleConditionAdding(self):\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n-        adding = getMultiAdapter(\n-            (rule, self.portal.REQUEST), name=\'+condition\')\n+        storage["foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+condition")\n         d = DummyCondition()\n         self.assertEqual(0, len(rule.conditions))\n         adding.add(d)\n@@ -84,9 +81,9 @@ def testRuleConditionAdding(self):\n \n     def testRuleActionAdding(self):\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = Rule()\n-        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n-        adding = getMultiAdapter((rule, self.portal.REQUEST), name=\'+action\')\n+        storage["foo"] = Rule()\n+        rule = self.portal.restrictedTraverse("++rule++foo")\n+        adding = getMultiAdapter((rule, self.portal.REQUEST), name="+action")\n         d = DummyAction()\n         self.assertEqual(0, len(rule.actions))\n         adding.add(d)\n@@ -96,49 +93,48 @@ def testRuleActionAdding(self):\n     def testRulesControlPanel(self):\n         portal = self.portal\n         storage = getUtility(IRuleStorage)\n-        storage[u\'foo\'] = DummyModifiedRule()\n-        controlpanel = portal.restrictedTraverse(\'@@rules-controlpanel\')\n+        storage["foo"] = DummyModifiedRule()\n+        controlpanel = portal.restrictedTraverse("@@rules-controlpanel")\n         registered_rules = controlpanel.registeredRules()\n         self.assertEqual(1, len(registered_rules))\n         registered_rule = registered_rules[0]\n         self.assertEqual(\n-            registered_rule[\'row_class\'],\n-            \'trigger-iobjectmodifiedevent state-enabled assignment-unassigned\',\n+            registered_rule["row_class"],\n+            "trigger-iobjectmodifiedevent state-enabled assignment-unassigned",\n         )\n-        self.assertEqual(registered_rule[\'trigger\'],\n-                         \'Object modified\')\n-        self.assertTrue(registered_rule[\'enabled\'])\n-        self.assertFalse(registered_rule[\'assigned\'])\n+        self.assertEqual(registered_rule["trigger"], "Object modified")\n+        self.assertTrue(registered_rule["enabled"])\n+        self.assertFalse(registered_rule["assigned"])\n \n         rule_types = controlpanel.ruleTypesToShow()\n-        rule_types_ids = [r[\'id\'] for r in rule_types]\n-        self.assertTrue(\'trigger-iobjectmodifiedevent\' in rule_types_ids)\n-        self.assertFalse(\'trigger-iobjectaddedevent\' in rule_types_ids)\n+        rule_types_ids = [r["id"] for r in rule_types]\n+        self.assertTrue("trigger-iobjectmodifiedevent" in rule_types_ids)\n+        self.assertFalse("trigger-iobjectaddedevent" in rule_types_ids)\n \n         rule_states = controlpanel.statesToShow()\n-        rule_states_ids = [r[\'id\'] for r in rule_states]\n-        self.assertTrue(\'state-enabled\' in rule_states_ids)\n-        self.assertTrue(\'state-disabled\' in rule_states_ids)\n+        rule_states_ids = [r["id"] for r in rule_states]\n+        self.assertTrue("state-enabled" in rule_states_ids)\n+        self.assertTrue("state-disabled" in rule_states_ids)\n \n         # enable rule\n-        portal.REQUEST[\'rule-id\'] = \'foo\'\n+        portal.REQUEST["rule-id"] = "foo"\n         self.addAuthToRequest()\n-        portal.restrictedTraverse(\'@@contentrule-disable\').disable_rule()\n+        portal.restrictedTraverse("@@contentrule-disable").disable_rule()\n         registered_rules = controlpanel.registeredRules()\n-        self.assertFalse(registered_rules[0][\'enabled\'])\n+        self.assertFalse(registered_rules[0]["enabled"])\n \n-        portal.restrictedTraverse(\'@@contentrule-enable\').enable_rule()\n+        portal.restrictedTraverse("@@contentrule-enable").enable_rule()\n         registered_rules = controlpanel.registeredRules()\n-        self.assertTrue(registered_rules[0][\'enabled\'])\n+        self.assertTrue(registered_rules[0]["enabled"])\n \n         # works without ajax\n-        portal.REQUEST.form[\'rule-id\'] = \'foo\'\n-        portal.REQUEST.form[\'form.button.DisableRule\'] = \'1\'\n-        portal.restrictedTraverse(\'@@rules-controlpanel\')()\n+        portal.REQUEST.form["rule-id"] = "foo"\n+        portal.REQUEST.form["form.button.DisableRule"] = "1"\n+        portal.restrictedTraverse("@@rules-controlpanel")()\n         registered_rules = controlpanel.registeredRules()\n-        self.assertFalse(registered_rules[0][\'enabled\'])\n+        self.assertFalse(registered_rules[0]["enabled"])\n \n-        portal.restrictedTraverse(\'@@contentrule-delete\').delete_rule()\n+        portal.restrictedTraverse("@@contentrule-delete").delete_rule()\n         registered_rules = controlpanel.registeredRules()\n         self.assertEqual(0, len(registered_rules))\n \n@@ -147,16 +143,13 @@ def testChangeGloballyEnable(self):\n         portal = self.portal\n         self.addAuthToRequest()\n \n-        portal.restrictedTraverse(\n-            \'@@contentrule-globally-enable\').globally_enable()\n+        portal.restrictedTraverse("@@contentrule-globally-enable").globally_enable()\n         self.assertTrue(storage.active)\n \n-        portal.restrictedTraverse(\n-            \'@@contentrule-globally-disable\').globally_disable()\n+        portal.restrictedTraverse("@@contentrule-globally-disable").globally_disable()\n         self.assertFalse(storage.active)\n \n-        portal.restrictedTraverse(\n-            \'@@contentrule-globally-enable\').globally_enable()\n+        portal.restrictedTraverse("@@contentrule-globally-enable").globally_enable()\n         self.assertTrue(storage.active)\n \n         # without ajax\ndiff --git a/plone/app/contentrules/tests/test_setup.py b/plone/app/contentrules/tests/test_setup.py\nindex 241f8cb..ca4db2f 100644\n--- a/plone/app/contentrules/tests/test_setup.py\n+++ b/plone/app/contentrules/tests/test_setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentrules.tests.base import ContentRulesTestCase\n from plone.contentrules.engine.interfaces import IRuleAssignable\n from plone.contentrules.rule.interfaces import IRuleEventType\n@@ -8,7 +7,6 @@\n \n \n class TestProductInstall(ContentRulesTestCase):\n-\n     def testRuleContainerInterfaces(self):\n         self.assertTrue(IRuleAssignable.providedBy(self.folder))\n         self.assertTrue(IRuleAssignable.providedBy(self.portal))\ndiff --git a/plone/app/contentrules/tests/test_traversal.py b/plone/app/contentrules/tests/test_traversal.py\nindex 26b1c49..ad16a73 100644\n--- a/plone/app/contentrules/tests/test_traversal.py\n+++ b/plone/app/contentrules/tests/test_traversal.py\n@@ -1,8 +1,7 @@\n-# -*- coding: utf-8 -*-\n-from Acquisition import aq_base\n-from Acquisition import aq_parent\n from .dummy import DummyAction\n from .dummy import DummyCondition\n+from Acquisition import aq_base\n+from Acquisition import aq_parent\n from plone.app.contentrules.rule import Rule\n from plone.app.contentrules.tests.base import ContentRulesTestCase\n from plone.contentrules.engine.interfaces import IRuleStorage\n@@ -10,57 +9,56 @@\n \n \n class TestTraversal(ContentRulesTestCase):\n-\n     def testTraverseToRule(self):\n         r = Rule()\n         storage = getUtility(IRuleStorage)\n-        storage[u\'r1\'] = r\n-        traversed = self.portal.restrictedTraverse(\'++rule++r1\')\n+        storage["r1"] = r\n+        traversed = self.portal.restrictedTraverse("++rule++r1")\n         self.assertTrue(aq_parent(traversed) is self.portal)\n         self.assertTrue(aq_base(traversed) is r)\n \n     def testTraverseToRuleCondition(self):\n         r = Rule()\n         e1 = DummyCondition()\n-        e1.x = \'x\'\n+        e1.x = "x"\n \n         e2 = DummyCondition()\n-        e2.x = \'y\'\n+        e2.x = "y"\n \n         r.conditions.append(e1)\n         r.conditions.append(e2)\n         storage = getUtility(IRuleStorage)\n-        storage[u\'r1\'] = r\n+        storage["r1"] = r\n \n-        tr = self.portal.restrictedTraverse(\'++rule++r1\')\n-        te1 = tr.restrictedTraverse(\'++condition++0\')\n-        te2 = tr.restrictedTraverse(\'++condition++1\')\n+        tr = self.portal.restrictedTraverse("++rule++r1")\n+        te1 = tr.restrictedTraverse("++condition++0")\n+        te2 = tr.restrictedTraverse("++condition++1")\n \n         self.assertTrue(aq_parent(te1) is tr)\n-        self.assertEqual(\'x\', te1.x)\n+        self.assertEqual("x", te1.x)\n \n         self.assertTrue(aq_parent(te2) is tr)\n-        self.assertEqual(\'y\', te2.x)\n+        self.assertEqual("y", te2.x)\n \n     def testTraverseToRuleAction(self):\n         r = Rule()\n         e1 = DummyAction()\n-        e1.x = \'x\'\n+        e1.x = "x"\n \n         e2 = DummyAction()\n-        e2.x = \'y\'\n+        e2.x = "y"\n \n         r.actions.append(e1)\n         r.actions.append(e2)\n         storage = getUtility(IRuleStorage)\n-        storage[u\'r1\'] = r\n+        storage["r1"] = r\n \n-        tr = self.portal.restrictedTraverse(\'++rule++r1\')\n-        te1 = tr.restrictedTraverse(\'++action++0\')\n-        te2 = tr.restrictedTraverse(\'++action++1\')\n+        tr = self.portal.restrictedTraverse("++rule++r1")\n+        te1 = tr.restrictedTraverse("++action++0")\n+        te2 = tr.restrictedTraverse("++action++1")\n \n         self.assertTrue(aq_parent(te1) is tr)\n-        self.assertEqual(\'x\', te1.x)\n+        self.assertEqual("x", te1.x)\n \n         self.assertTrue(aq_parent(te2) is tr)\n-        self.assertEqual(\'y\', te2.x)\n+        self.assertEqual("y", te2.x)\ndiff --git a/plone/app/contentrules/tests/utils.py b/plone/app/contentrules/tests/utils.py\nindex 2917409..deac197 100644\n--- a/plone/app/contentrules/tests/utils.py\n+++ b/plone/app/contentrules/tests/utils.py\n@@ -1,8 +1,7 @@\n-# -*- coding: utf-8 -*-\n import doctest\n \n \n # Standard options for DocTests\n-optionflags = (doctest.ELLIPSIS |\n-               doctest.NORMALIZE_WHITESPACE |\n-               doctest.REPORT_ONLY_FIRST_FAILURE)\n+optionflags = (\n+    doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE\n+)\ndiff --git a/setup.cfg b/setup.cfg\nindex 190e1a2..6b378d8 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -8,3 +8,10 @@ universal = 1\n \n [zest.releaser]\n create-wheel = yes\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\ndiff --git a/setup.py b/setup.py\nindex eb8dbc9..50f3072 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,14 +1,14 @@\n-# -*- coding: utf-8 -*-\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n \n-version = \'5.0.0a5.dev0\'\n+\n+version = "5.0.0a5.dev0"\n \n setup(\n-    name=\'plone.app.contentrules\',\n+    name="plone.app.contentrules",\n     version=version,\n     description="Plone integration for plone.contentrules",\n-    long_description=(open("README.rst").read() + "\\n\\n" +\n-                      open("CHANGES.rst").read()),\n+    long_description=(open("README.rst").read() + "\\n\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n@@ -23,44 +23,43 @@\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'plone automatic content rules\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.contentrules\',\n-    license=\'GPL version 2\',\n+    keywords="plone automatic content rules",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.contentrules",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n-    extras_require={\'test\': [\'plone.app.testing\', \'plone.app.contenttypes[test]\']},\n+    extras_require={"test": ["plone.app.testing", "plone.app.contenttypes[test]"]},\n     install_requires=[\n-        \'setuptools\',\n-        \'six\',\n-        \'plone.contentrules\',\n-        \'plone.memoize\',\n-        \'plone.stringinterp\',\n-        \'plone.uuid\',\n-        \'plone.autoform\',\n-        \'plone.app.z3cform\',\n-        \'plone.app.vocabularies\',\n-        \'transaction\',\n-        \'zope.annotation\',\n-        \'zope.browser\',\n-        \'zope.component\',\n-        \'zope.container\',\n-        \'zope.event\',\n-        \'zope.i18nmessageid\',\n-        \'zope.interface\',\n-        \'zope.lifecycleevent\',\n-        \'zope.publisher >= 3.11.0\',\n-        \'zope.schema\',\n-        \'zope.site\',\n-        \'zope.traversing\',\n-        \'Acquisition\',\n-        \'Products.CMFCore\',\n-        \'Products.GenericSetup >= 2.0\',\n-        \'Products.statusmessages\',\n-        \'ZODB\',\n-        \'Zope\',\n+        "setuptools",\n+        "plone.contentrules",\n+        "plone.memoize",\n+        "plone.stringinterp",\n+        "plone.uuid",\n+        "plone.autoform",\n+        "plone.app.z3cform",\n+        "plone.app.vocabularies",\n+        "transaction",\n+        "zope.annotation",\n+        "zope.browser",\n+        "zope.component",\n+        "zope.container",\n+        "zope.event",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n+        "zope.lifecycleevent",\n+        "zope.publisher >= 3.11.0",\n+        "zope.schema",\n+        "zope.site",\n+        "zope.traversing",\n+        "Acquisition",\n+        "Products.CMFCore",\n+        "Products.GenericSetup >= 2.0",\n+        "Products.statusmessages",\n+        "ZODB",\n+        "Zope",\n     ],\n )\n'

