Repository: plone.volto


Branch: refs/heads/main
Date: 2022-04-08T11:50:57+02:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.volto/commit/930bc5a46b8514943d320913159191fb24a6f381

Add better implementation of the PLONE6 check (cosmetic)

Files changed:
M CHANGES.rst
M src/plone/volto/setuphandlers.py
M src/plone/volto/tests/test_setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 28b2100..1dc2b12 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,7 +4,8 @@ Changelog\n 4.0.0a5 (unreleased)\n --------------------\n \n-- Nothing changed yet.\n+- Add better implementation of the PLONE6 check (cosmetic)\n+  [sneridagh]\n \n \n 4.0.0a4 (2022-04-08)\ndiff --git a/src/plone/volto/setuphandlers.py b/src/plone/volto/setuphandlers.py\nindex 6210f41..552bc52 100644\n--- a/src/plone/volto/setuphandlers.py\n+++ b/src/plone/volto/setuphandlers.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from importlib import import_module\n from plone import api\n from plone.app.multilingual.browser.setup import SetupMultilingualSite\n from plone.app.multilingual.setuphandlers import enable_translatable_behavior\n@@ -17,14 +18,7 @@\n import transaction\n \n \n-try:\n-    from Products.CMFPlone.factory import PLONE60MARKER\n-\n-    PLONE60MARKER  # pyflakes\n-except ImportError:\n-    PLONE_6 = False\n-else:\n-    PLONE_6 = True\n+PLONE_6 = getattr(import_module("Products.CMFPlone.factory"), "PLONE60MARKER", False)\n \n logger = logging.getLogger("plone.volto")\n \ndiff --git a/src/plone/volto/tests/test_setup.py b/src/plone/volto/tests/test_setup.py\nindex bc4d0aa..8c4aede 100644\n--- a/src/plone/volto/tests/test_setup.py\n+++ b/src/plone/volto/tests/test_setup.py\n@@ -1,7 +1,9 @@\n # -*- coding: utf-8 -*-\n """Setup tests for this package."""\n-from plone.volto.testing import PLONE_VOLTO_CORE_INTEGRATION_TESTING  # noqa\n+from importlib import import_module\n from plone import api\n+from plone.volto.testing import PLONE_VOLTO_CORE_INTEGRATION_TESTING  # noqa\n+\n \n try:\n     from Products.CMFPlone.utils import get_installer\n@@ -12,14 +14,8 @@\n \n import unittest\n \n-try:\n-    from Products.CMFPlone.factory import PLONE60MARKER\n \n-    PLONE60MARKER  # pyflakes\n-except ImportError:\n-    PLONE_6 = False\n-else:\n-    PLONE_6 = True\n+PLONE_6 = getattr(import_module("Products.CMFPlone.factory"), "PLONE60MARKER", False)\n \n \n class TestSetup(unittest.TestCase):\n@@ -44,8 +40,8 @@ def test_product_installed(self):\n \n     def test_browserlayer(self):\n         """Test that IPloneVoltoCoreLayer is registered."""\n-        from plone.volto.interfaces import IPloneVoltoCoreLayer\n         from plone.browserlayer import utils\n+        from plone.volto.interfaces import IPloneVoltoCoreLayer\n \n         self.assertIn(IPloneVoltoCoreLayer, utils.registered_layers())\n \n@@ -90,7 +86,7 @@ def test_product_uninstalled(self):\n \n     def test_browserlayer_removed(self):\n         """Test that IPloneVoltoCoreLayer is removed."""\n-        from plone.volto.interfaces import IPloneVoltoCoreLayer\n         from plone.browserlayer import utils\n+        from plone.volto.interfaces import IPloneVoltoCoreLayer\n \n         self.assertNotIn(IPloneVoltoCoreLayer, utils.registered_layers())\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2022-05-06T12:09:15+02:00
Author: Víctor Fernández de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.volto/commit/2959048b6f6d819f37c7d9b9919c94f021e4135f

Merge branch 'main' into betterPLONE6check

Files changed:
A news/.gitkeep
A news/47.feature
A news/51.bugfix
A pyproject.toml
A src/plone/volto/browser/migrate_richtext.pt
A src/plone/volto/browser/migrate_richtext.py
A src/plone/volto/scripts/migrate_richtext.py
M .github/workflows/black.yml
M .github/workflows/flake8.yml
M .gitignore
M CHANGES.rst
M Makefile
M plone-6.0.x.cfg
M src/plone/volto/browser/configure.zcml

b'diff --git a/.github/workflows/black.yml b/.github/workflows/black.yml\nindex 9b23c02..76a84b6 100644\n--- a/.github/workflows/black.yml\n+++ b/.github/workflows/black.yml\n@@ -1,3 +1,4 @@\n+\n name: Black\n on: [push]\n jobs:\n@@ -25,7 +26,6 @@ jobs:\n           key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n           restore-keys: |\n             ${{ runner.os }}-pip-\n-\n       # install black\n       - name: install black\n         run: pip install black\ndiff --git a/.github/workflows/flake8.yml b/.github/workflows/flake8.yml\nindex 97c7dfa..ee3985d 100644\n--- a/.github/workflows/flake8.yml\n+++ b/.github/workflows/flake8.yml\n@@ -25,11 +25,10 @@ jobs:\n           key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n           restore-keys: |\n             ${{ runner.os }}-pip-\n-\n       # install flake8\n       - name: install flake8\n-        run: pip install flake8\n+        run: pip install flakeheaven\n \n       # run black\n       - name: run flake8\n-        run: flake8 src/ setup.py\n+        run: flakeheaven lint src/ setup.py\ndiff --git a/.gitignore b/.gitignore\nindex 84b425a..1292b60 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -11,6 +11,7 @@ bin/\n buildout-cache/\n develop-eggs/\n eggs/\n+etc/\n htmlcov/\n include/\n lib/\n@@ -36,3 +37,4 @@ report.html\n !.travis.yml\n pyvenv.cfg\n extras\n+inituser\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 1dc2b12..17dafb4 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,12 +1,12 @@\n Changelog\n =========\n \n-4.0.0a5 (unreleased)\n---------------------\n-\n-- Add better implementation of the PLONE6 check (cosmetic)\n-  [sneridagh]\n+.. You should *NOT* be adding new change log entries to this file.\n+   You should create a file in the news directory instead.\n+   For helpful instructions, please see:\n+   https://github.com/plone/plone.releaser/blob/master/ADD-A-NEWS-ITEM.rst\n \n+.. towncrier release notes start\n \n 4.0.0a4 (2022-04-08)\n --------------------\ndiff --git a/Makefile b/Makefile\nindex 46483d7..a5d9718 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -1,9 +1,12 @@\n-# keep in sync with: https://github.com/kitconcept/buildout/edit/master/Makefile\n-# update by running \'make update\'\n-SHELL := /bin/bash\n-CURRENT_DIR:=$(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))\n-\n-version = 3\n+### Defensive settings for make:\n+#     https://tech.davis-hansson.com/p/make/\n+SHELL:=bash\n+.ONESHELL:\n+.SHELLFLAGS:=-xeu -o pipefail -O inherit_errexit -c\n+.SILENT:\n+.DELETE_ON_ERROR:\n+MAKEFLAGS+=--warn-undefined-variables\n+MAKEFLAGS+=--no-builtin-rules\n \n # We like colors\n # From: https://coderwall.com/p/izxssa/colored-makefile-for-golang-projects\n@@ -12,7 +15,12 @@ GREEN=`tput setaf 2`\n RESET=`tput sgr0`\n YELLOW=`tput setaf 3`\n \n-all: .installed.cfg\n+PLONE5=5.2.7\n+PLONE6=6.0.0a4\n+\n+PACKAGE_NAME=plone.volto\n+PACKAGE_PATH=src/\n+CHECK_PATH=setup.py $(PACKAGE_PATH)\n \n # Add the following \'help\' target to your Makefile\n # And add help text after each target name starting with \'\\#\\#\'\n@@ -20,72 +28,73 @@ all: .installed.cfg\n help: ## This help message\n \t@grep -E \'^[a-zA-Z_-]+:.*?## .*$$\' $(MAKEFILE_LIST) | sort | awk \'BEGIN {FS = ":.*?## "}; {printf "\\033[36m%-30s\\033[0m %s\\n", $$1, $$2}\'\n \n-.PHONY: Update Makefile and Buildout\n-update: ## Update Make and Buildout\n-\twget -O Makefile https://raw.githubusercontent.com/kitconcept/buildout/master/Makefile\n-\twget -O requirements.txt https://raw.githubusercontent.com/kitconcept/buildout/master/requirements.txt\n-\twget -O plone-4.3.x.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/plone-4.3.x.cfg\n-\twget -O plone-5.1.x.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/plone-5.1.x.cfg\n-\twget -O plone-5.2.x.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/plone-5.2.x.cfg\n-\twget -O travis.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/travis.cfg\n-\twget -O versions.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/versions.cfg\n-\n-.installed.cfg: bin/buildout *.cfg\n-\tbin/buildout\n-\n-bin/buildout: bin/pip\n-\tbin/pip install --upgrade pip\n-\tbin/pip install -r requirements.txt\n-\t@touch -c $@\n-\n-bin/python bin/pip:\n-\tpython$(version) -m venv . || virtualenv --clear --python=python$(version) .\n-\n-\n-.PHONY: Build Plone 5.2\n-build: .installed.cfg  ## Build Plone 5.2\n-\tbin/pip install --upgrade pip\n-\tbin/pip install -r requirements.txt\n-\tbin/buildout\n-\n-.PHONY: Build Plone 6.0\n-build-plone-6.0:  bin/pip ## Build Plone 6.0\n-\tbin/pip install --upgrade pip\n-\tbin/pip install -r https://dist.plone.org/release/6.0.0a2/requirements.txt\n-\tbin/buildout -c plone-6.0.x.cfg\n-\n-.PHONY: Test\n-test:  ## Test\n-\tbin/test\n-\n-.PHONY: Test Performance\n-test-performance:\n-\tjmeter -n -t performance.jmx -l jmeter.jtl\n-\n-.PHONY: Code Analysis\n-code-analysis:  ## Code Analysis\n-\tbin/code-analysis\n-\tif [ -f "bin/black" ]; then bin/black src/ --check ; fi\n-\n-.PHONY: Black\n-black:  ## Black\n-\tbin/code-analysis\n-\tif [ -f "bin/black" ]; then bin/black src/ ; fi\n-\n-.PHONY: Build Docs\n-docs:  ## Build Docs\n-\tbin/sphinxbuilder\n-\n-.PHONY: Test Release\n-test-release:  ## Run Pyroma and Check Manifest\n-\tbin/pyroma -n 10 -d .\n-\n-.PHONY: Release\n-release:  ## Release\n-\tbin/fullrelease\n-\n-.PHONY: Clean\n-clean:  ## Clean\n-\tgit clean -Xdf\n-\n-.PHONY: all clean\n+bin/pip:\n+\t@echo "$(GREEN)==> Setup Virtual Env$(RESET)"\n+\tpython3 -m venv .\n+\tbin/pip install -U pip wheel\n+\n+bin/black:\n+\tbin/pip install black\n+\n+bin/isort:\n+\tbin/pip install isort\n+\n+bin/flakeheaven:\n+\tbin/pip install flakeheaven\n+\n+.PHONY: build-plone-5.2\n+build-plone-5.2: bin/pip ## Build Plone 5.2\n+\t@echo "$(GREEN)==> Build with Plone 5.2$(RESET)"\n+\tbin/pip install Plone plone.app.testing -c https://dist.plone.org/release/$(PLONE5)/constraints.txt\n+\tbin/pip install -e ".[test]"\n+\tbin/mkwsgiinstance -d . -u admin:admin\n+\n+.PHONY: build-plone-6.0\n+build-plone-6.0: bin/pip ## Build Plone 6.0\n+\t@echo "$(GREEN)==> Build with Plone 6.0$(RESET)"\n+\tbin/pip install Plone plone.app.testing -c https://dist.plone.org/release/$(PLONE6)/constraints.txt\n+\tbin/pip install -e ".[test]"\n+\tbin/mkwsgiinstance -d . -u admin:admin\n+\n+.PHONY: build\n+build: build-plone-6.0 ## Build Plone 6.0\n+\n+.PHONY: clean\n+clean: ## Remove old virtualenv and creates a new one\n+\t@echo "$(RED)==> Cleaning environment and build$(RESET)"\n+\trm -rf bin lib lib64 include share etc var inituser pyvenv.cfg .installed.cfg\n+\n+.PHONY: black\n+black: bin/black ## Format codebase\n+\t./bin/black $(CHECK_PATH)\n+\n+.PHONY: isort\n+isort: bin/isort ## Format imports in the codebase\n+\t./bin/isort $(CHECK_PATH)\n+\n+.PHONY: format\n+format: black isort ## Format the codebase according to our standards\n+\n+.PHONY: lint\n+lint: lint-isort lint-black lint-flake8 ## check style with flake8\n+\n+.PHONY: lint-flake8\n+lint-flake8: bin/flakeheaven ## validate black formating\n+\t./bin/flakeheaven lint $(CHECK_PATH)\n+\n+\n+.PHONY: lint-black\n+lint-black: bin/black ## validate black formating\n+\t./bin/black --check --diff $(CHECK_PATH)\n+\n+.PHONY: lint-isort\n+lint-isort: bin/isort ## validate using isort\n+\t./bin/isort --check-only $(CHECK_PATH)\n+\n+.PHONY: test\n+test: ## run tests\n+\tPYTHONWARNINGS=ignore ./bin/zope-testrunner --auto-color --auto-progress --test-path $(PACKAGE_PATH)\n+\n+.PHONY: start\n+start: ## Start a Plone instance on localhost:8080\n+\tPYTHONWARNINGS=ignore ./bin/runwsgi etc/zope.ini\ndiff --git a/news/.gitkeep b/news/.gitkeep\nnew file mode 100644\nindex 0000000..8b13789\n--- /dev/null\n+++ b/news/.gitkeep\n@@ -0,0 +1 @@\n+\ndiff --git a/news/47.feature b/news/47.feature\nnew file mode 100644\nindex 0000000..0ab89fb\n--- /dev/null\n+++ b/news/47.feature\n@@ -0,0 +1,2 @@\n+- Add form @@migrate_to_slate to migrate html-richtext to slate blocks\n+  [pbauer]\ndiff --git a/news/51.bugfix b/news/51.bugfix\nnew file mode 100644\nindex 0000000..a7f2e9e\n--- /dev/null\n+++ b/news/51.bugfix\n@@ -0,0 +1,2 @@\n+Update test to 6.0.0a4 and new pip practices\n+[sneridagh]\ndiff --git a/plone-6.0.x.cfg b/plone-6.0.x.cfg\nindex 351f975..114b86f 100644\n--- a/plone-6.0.x.cfg\n+++ b/plone-6.0.x.cfg\n@@ -1,11 +1,8 @@\n [buildout]\n extends =\n-    https://dist.plone.org/release/6.0.0a2/versions.cfg\n+    https://dist.plone.org/release/6.0.0a4/versions.cfg\n     base.cfg\n \n-find-links += https://dist.plone.org/release/6.0.0a2/\n-\n-\n [instance]\n recipe = plone.recipe.zope2instance\n zodb-temporary-storage = off\n@@ -16,4 +13,4 @@ black = 21.7b0\n \n # cffi 1.14.3 fails on apple m1\n # cffi 1.14.4 fails with "ModuleNotFoundError: No module named \'_cffi_backend\'"\n-cffi = 1.14.6\n\\ No newline at end of file\n+cffi = 1.14.6\ndiff --git a/pyproject.toml b/pyproject.toml\nnew file mode 100644\nindex 0000000..05b615d\n--- /dev/null\n+++ b/pyproject.toml\n@@ -0,0 +1,20 @@\n+[tool.towncrier]\n+filename = "CHANGES.rst"\n+directory = "news/"\n+title_format = "{version} ({project_date})"\n+underlines = ["-", ""]\n+\n+[[tool.towncrier.type]]\n+directory = "breaking"\n+name = "Breaking changes:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "feature"\n+name = "New features:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "bugfix"\n+name = "Bug fixes:"\n+showcontent = true\ndiff --git a/src/plone/volto/browser/configure.zcml b/src/plone/volto/browser/configure.zcml\nindex 2654c2f..4f1b949 100644\n--- a/src/plone/volto/browser/configure.zcml\n+++ b/src/plone/volto/browser/configure.zcml\n@@ -26,4 +26,12 @@\n       zcml:condition="have plone-5"\n       />\n \n+  <browser:page\n+      name="migrate_richtext"\n+      for="zope.interface.Interface"\n+      class=".migrate_richtext.MigrateRichTextToSlate"\n+      template="migrate_richtext.pt"\n+      permission="cmf.ManagePortal"\n+      />\n+\n </configure>\ndiff --git a/src/plone/volto/browser/migrate_richtext.pt b/src/plone/volto/browser/migrate_richtext.pt\nnew file mode 100644\nindex 0000000..15af615\n--- /dev/null\n+++ b/src/plone/volto/browser/migrate_richtext.pt\n@@ -0,0 +1,70 @@\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      i18n:domain="plone"\n+      metal:use-macro="context/main_template/macros/master">\n+\n+<div metal:fill-slot="main">\n+    <tal:main-macro metal:define-macro="main">\n+\n+      <h1 class="documentFirstHeading">Migrate Richtext to Slate Block</h1>\n+\n+      <p class="documentDescription">Migrate text from RichText-fields to text in the Volto Editor</p>\n+\n+        <form id="migrate_richtext" action="@@migrate_richtext" tal:attributes="action request/URL" method="post" enctype="multipart/form-data">\n+\n+            <div class="field mb-3">\n+              <label for="portal_types" class="form-label">\n+                <span i18n:translate="">Content Types to handle</span>\n+              </label>\n+              <tal:types tal:repeat="ptype python: view.portal_types_info">\n+                <div class="form-check">\n+                  <input type="checkbox"\n+                         name="portal_types"\n+                         class="form-check-input"\n+                         tal:attributes="value ptype/value; id ptype/value;\n+                                         checked python: ptype[\'value\'] in view.portal_types">\n+                  <label class="form-check-label"\n+                         tal:attributes="for ptype/value"\n+                         tal:content="string:${ptype/title} - ${ptype/value} (${ptype/number})"></label>\n+                </div>\n+              </tal:types>\n+            </div>\n+\n+            <div class="field mb-3">\n+              <label for="service_url" class="form-label">\n+                URL of blocks-conversion-tool. The migration requires a service to run. See https://github.com/plone/blocks-conversion-tool for details.\n+              </label>\n+              <input class="form-control" type="text" name="service_url" id="service_url" value=""\n+                     tal:attributes="value python:view.service_url">\n+            </div>\n+\n+            <div class="form-check">\n+                <input\n+                    class="form-check-input"\n+                    type="checkbox"\n+                    name="purge_richtext:boolean"\n+                    id="purge_richtext"\n+                    tal:attributes="checked python:view.purge_richtext"\n+                    />\n+              <label class="form-check-label" for="purge_richtext">\n+                Purge Richtext-fields after migrating to Slate\n+              </label>\n+            </div>\n+\n+\n+            <div class="formControls" class="form-group">\n+                <input type="hidden" name="form.submitted" value="1"/>\n+\n+                <button class="btn btn-primary submit-widget button-field context"\n+                        type="submit" name="submit" value="export">Migrate\n+                </button>\n+            </div>\n+\n+        </form>\n+\n+    </tal:main-macro>\n+</div>\n+\n+</html>\ndiff --git a/src/plone/volto/browser/migrate_richtext.py b/src/plone/volto/browser/migrate_richtext.py\nnew file mode 100644\nindex 0000000..701a38d\n--- /dev/null\n+++ b/src/plone/volto/browser/migrate_richtext.py\n@@ -0,0 +1,141 @@\n+from logging import getLogger\n+from operator import itemgetter\n+from plone import api\n+from plone.app.textfield.value import RichTextValue\n+from Products.Five import BrowserView\n+from uuid import uuid4\n+from zope.i18n import translate\n+\n+import requests\n+import transaction\n+\n+logger = getLogger(__name__)\n+\n+\n+class MigrateRichTextToSlate(BrowserView):\n+    """Form to trigger migrating html from Richxtext fields to slate."""\n+\n+    def __call__(self):\n+        request = self.request\n+        self.service_url = request.get("service_url", "http://localhost:5000/html")\n+        self.purge_richtext = request.get("purge_richtext", False)\n+        self.portal_types = request.get("portal_types", [])\n+        self.portal_types_info = self.types_with_blocks()\n+\n+        if not self.request.form.get("form.submitted", False):\n+            return self.index()\n+\n+        results = migrate_richtext_to_slate(\n+            portal_types=self.portal_types,\n+            service_url=self.service_url,\n+            purge_richtext=self.purge_richtext,\n+        )\n+        api.portal.show_message(\n+            "Migrated {} items from richtext to slate".format(results),\n+            request=self.request,\n+        )\n+        return self.index()\n+\n+    def types_with_blocks(self):\n+        """A list with info on all content types with existing items."""\n+        catalog = api.portal.get_tool("portal_catalog")\n+        portal_types = api.portal.get_tool("portal_types")\n+        results = []\n+        for fti in portal_types.listTypeInfo():\n+            behaviors = getattr(fti, "behaviors", [])\n+            if "volto.blocks" not in behaviors:\n+                continue\n+            number = len(catalog.unrestrictedSearchResults(portal_type=fti.id))\n+            if number >= 1:\n+                results.append(\n+                    {\n+                        "number": number,\n+                        "value": fti.id,\n+                        "title": translate(\n+                            fti.title, domain="plone", context=self.request\n+                        ),\n+                    }\n+                )\n+        return sorted(results, key=itemgetter("title"))\n+\n+\n+def migrate_richtext_to_slate(\n+    portal_types=None, service_url="http://localhost:5000/html", purge_richtext=False\n+):\n+    if portal_types is None:\n+        portal_types = types_with_blocks()\n+    elif isinstance(portal_types, str):\n+        portal_types = [portal_types]\n+    fieldname = "text"\n+    headers = {\n+        "Accept": "application/json",\n+        "Content-Type": "application/json",\n+    }\n+    results = 0\n+    for portal_type in portal_types:\n+        for index, brain in enumerate(\n+            api.content.find(portal_type=portal_type, sort_on="path"), start=1\n+        ):\n+            obj = brain.getObject()\n+            text = getattr(obj.aq_base, fieldname, None)\n+            if not text:\n+                continue\n+            if isinstance(text, RichTextValue):\n+                text = text.raw\n+            if not text.strip():\n+                continue\n+\n+            # use https://github.com/plone/blocks-conversion-tool\n+            r = requests.post(service_url, headers=headers, json={"html": text})\n+            r.raise_for_status()\n+            slate_data = r.json()\n+            slate_data = slate_data["data"]\n+\n+            blocks = {}\n+            uuids = []\n+\n+            # add title\n+            uuid = str(uuid4())\n+            blocks[uuid] = {"@type": "title"}\n+            uuids.append(uuid)\n+\n+            # add description\n+            if obj.description:\n+                uuid = str(uuid4())\n+                blocks[uuid] = {"@type": "description"}\n+                uuids.append(uuid)\n+\n+            # add slate blocks\n+            for block in slate_data:\n+                uuid = str(uuid4())\n+                uuids.append(uuid)\n+                blocks[uuid] = block\n+\n+            obj.blocks = blocks\n+            obj.blocks_layout = {"items": uuids}\n+            obj._p_changed = True\n+\n+            if purge_richtext:\n+                setattr(obj, fieldname, None)\n+\n+            obj.reindexObject(idxs=["SearchableText"])\n+            results += 1\n+            logger.debug(f"Migrated richtext to slate for: {obj.absolute_url()}")\n+\n+            if not index % 1000:\n+                logger.info(f"Commiting after {index} items...")\n+                transaction.commit()\n+        msg = f"Migrated {index} {portal_type} to slate"\n+        logger.info(msg)\n+    return results\n+\n+\n+def types_with_blocks():\n+    """A list of content types with volto.blocks behavior"""\n+    portal_types = api.portal.get_tool("portal_types")\n+    results = []\n+    for fti in portal_types.listTypeInfo():\n+        behaviors = getattr(fti, "behaviors", [])\n+        if "volto.blocks" in behaviors:\n+            results.append(fti.id)\n+    return results\ndiff --git a/src/plone/volto/scripts/migrate_richtext.py b/src/plone/volto/scripts/migrate_richtext.py\nnew file mode 100644\nindex 0000000..aa6fc46\n--- /dev/null\n+++ b/src/plone/volto/scripts/migrate_richtext.py\n@@ -0,0 +1,21 @@\n+"""\n+bin/instance -O Plone run scripts/migrate-richtext.py\n+    Migrate all richtexts to slate blocks.\n+    Requires a instance of https://github.com/plone/blocks-conversion-tool to run\n+    on http://localhost:5000/html (the default)\n+    For more control use the form @@migrate_richtext\n+\n+"""\n+from plone import api\n+from plone.volto.browser.migrate_richtext import migrate_richtext_to_slate\n+\n+\n+if __name__ == "__main__":\n+    portal_types = api.portal.get_tool("portal_types")\n+    portal_types = []\n+    for fti in portal_types.listTypeInfo():\n+        behaviors = getattr(fti, "behaviors", [])\n+        if "volto.blocks" in behaviors:\n+            portal_types.append(fti.id)\n+\n+    migrate_richtext_to_slate(portal_types=portal_types)\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2022-05-06T12:12:02+02:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.volto/commit/a033485b063f7b93cb51c7bff7873675d0f23c65

Changelog

Files changed:
A news/59.feature

b'diff --git a/news/59.feature b/news/59.feature\nnew file mode 100644\nindex 0000000..41fa38b\n--- /dev/null\n+++ b/news/59.feature\n@@ -0,0 +1,2 @@\n+- Add better implementation of the PLONE6 check (cosmetic)\n+   [sneridagh]\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2022-07-28T10:34:53+02:00
Author: Víctor Fernández de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.volto/commit/6aa434e38320655bb34065e7a5ce1efa14542105

Merge branch 'main' into betterPLONE6check

Files changed:
A .github/workflows/code-analysis.yml
A news/77.feature
A src/plone/volto/browser/migrate_to_volto.pt
A src/plone/volto/browser/migrate_to_volto.py
A src/plone/volto/profiles/default/types/Folder.xml
A src/plone/volto/tests/test_migrate_to_volto.py
A src/plone/volto/tests/test_summary_serialization.py
M .github/workflows/tests.yml
M CHANGES.rst
M Makefile
M base.cfg
M pyproject.toml
M setup.cfg
M setup.py
M src/plone/volto/behaviors/headtitle.py
M src/plone/volto/behaviors/navtitle.py
M src/plone/volto/behaviors/preview.py
M src/plone/volto/blocksuuidfixer.py
M src/plone/volto/browser/configure.zcml
M src/plone/volto/browser/migrate_richtext.pt
M src/plone/volto/browser/migrate_richtext.py
M src/plone/volto/configure.zcml
M src/plone/volto/content.py
M src/plone/volto/controlpanel.py
M src/plone/volto/coresandbox/example.py
M src/plone/volto/default_homepage/default.py
M src/plone/volto/default_homepage/demo.py
M src/plone/volto/patches.py
M src/plone/volto/profiles.zcml
M src/plone/volto/profiles/coresandbox/diff_tool.xml
M src/plone/volto/profiles/coresandbox/metadata.xml
M src/plone/volto/profiles/coresandbox/repositorytool.xml
M src/plone/volto/profiles/coresandbox/types.xml
M src/plone/volto/profiles/coresandbox/types/example.xml
M src/plone/volto/profiles/default/browserlayer.xml
M src/plone/volto/profiles/default/catalog.xml
M src/plone/volto/profiles/default/controlpanel.xml
M src/plone/volto/profiles/default/registry.xml
M src/plone/volto/profiles/default/types/Collection.xml
M src/plone/volto/profiles/default/types/Document.xml
M src/plone/volto/profiles/default/types/Event.xml
M src/plone/volto/profiles/default/types/LRF.xml
M src/plone/volto/profiles/default/types/News_Item.xml
M src/plone/volto/profiles/demo/metadata.xml
M src/plone/volto/profiles/demo/rolemap.xml
M src/plone/volto/profiles/homepage/metadata.xml
M src/plone/volto/profiles/multilingual/metadata.xml
M src/plone/volto/profiles/multilingual/registry.xml
M src/plone/volto/profiles/richtext/metadata.xml
M src/plone/volto/profiles/richtext/types.xml
M src/plone/volto/profiles/richtext/types/Document.xml
M src/plone/volto/profiles/uninstall/browserlayer.xml
M src/plone/volto/scripts/add_image_field_metadata.py
M src/plone/volto/scripts/auditblocks.py
M src/plone/volto/scripts/searchscalesinimageblocks.py
M src/plone/volto/scripts/utils.py
M src/plone/volto/setuphandlers.py
M src/plone/volto/summary.py
M src/plone/volto/testing.py
M src/plone/volto/tests/test_coresandbox.py
M src/plone/volto/tests/test_transforms.py
M src/plone/volto/tests/test_upgrades.py
M src/plone/volto/transforms.py
M src/plone/volto/vocabularies/subject.py
M versions.cfg
D .github/workflows/black.yml
D .github/workflows/flake8.yml
D .github/workflows/pyroma.yml
D .github/workflows/zpretty.yml
D news/47.feature
D news/51.bugfix
D src/plone/volto/profiles/default/types.xml

b'diff --git a/.github/workflows/black.yml b/.github/workflows/black.yml\ndeleted file mode 100644\nindex 76a84b6..0000000\n--- a/.github/workflows/black.yml\n+++ /dev/null\n@@ -1,35 +0,0 @@\n-\n-name: Black\n-on: [push]\n-jobs:\n-  build:\n-    runs-on: ubuntu-latest\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        python-version: [3.8]\n-\n-    steps:\n-      # git checkout\n-      - uses: actions/checkout@v2\n-\n-      # python setup\n-      - name: Set up Python ${{ matrix.python-version }}\n-        uses: actions/setup-python@v1\n-        with:\n-          python-version: ${{ matrix.python-version }}\n-\n-      # python cache\n-      - uses: actions/cache@v1\n-        with:\n-          path: ~/.cache/pip\n-          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n-          restore-keys: |\n-            ${{ runner.os }}-pip-\n-      # install black\n-      - name: install black\n-        run: pip install black\n-\n-      # run black\n-      - name: run black\n-        run: black src/ --check --diff\ndiff --git a/.github/workflows/code-analysis.yml b/.github/workflows/code-analysis.yml\nnew file mode 100644\nindex 0000000..f121eaa\n--- /dev/null\n+++ b/.github/workflows/code-analysis.yml\n@@ -0,0 +1,80 @@\n+name: Code Analysis\n+on:\n+  push:\n+\n+jobs:\n+  black:\n+    name: Black\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+      - name: Checkout codebase\n+        uses: actions/checkout@v2\n+\n+      - name: Run check\n+        uses: plone/code-analysis-action@v1\n+        with:\n+          check: \'black\'\n+          path: |\n+            src\n+            setup.py\n+\n+  flake8:\n+    name: flake8\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+      - name: Checkout codebase\n+        uses: actions/checkout@v2\n+\n+      - name: Run check\n+        uses: plone/code-analysis-action@v1\n+        with:\n+          check: \'flake8\'\n+          path: |\n+            src\n+            setup.py\n+\n+  isort:\n+    runs-on: ubuntu-latest\n+    steps:\n+      - name: Checkout codebase\n+        uses: actions/checkout@v2\n+\n+      - name: Run check\n+        uses: plone/code-analysis-action@v1\n+        with:\n+          check: \'isort\'\n+          path: |\n+            src\n+            setup.py\n+\n+  pyroma:\n+    name: pyroma\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+      - name: Checkout codebase\n+        uses: actions/checkout@v2\n+\n+      - name: Run check\n+        uses: plone/code-analysis-action@v1\n+        with:\n+          check: \'pyroma\'\n+          path: |\n+            ./\n+\n+  zpretty:\n+    name: zpretty\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+      - name: Checkout codebase\n+        uses: actions/checkout@v2\n+\n+      - name: Run check\n+        uses: plone/code-analysis-action@v1\n+        with:\n+          check: \'zpretty\'\n+          path: |\n+            src\ndiff --git a/.github/workflows/flake8.yml b/.github/workflows/flake8.yml\ndeleted file mode 100644\nindex ee3985d..0000000\n--- a/.github/workflows/flake8.yml\n+++ /dev/null\n@@ -1,34 +0,0 @@\n-name: Flake8\n-on: [push]\n-jobs:\n-  build:\n-    runs-on: ubuntu-latest\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        python-version: [3.8]\n-\n-    steps:\n-      # git checkout\n-      - uses: actions/checkout@v2\n-\n-      # python setup\n-      - name: Set up Python ${{ matrix.python-version }}\n-        uses: actions/setup-python@v1\n-        with:\n-          python-version: ${{ matrix.python-version }}\n-\n-      # python cache\n-      - uses: actions/cache@v1\n-        with:\n-          path: ~/.cache/pip\n-          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n-          restore-keys: |\n-            ${{ runner.os }}-pip-\n-      # install flake8\n-      - name: install flake8\n-        run: pip install flakeheaven\n-\n-      # run black\n-      - name: run flake8\n-        run: flakeheaven lint src/ setup.py\ndiff --git a/.github/workflows/pyroma.yml b/.github/workflows/pyroma.yml\ndeleted file mode 100644\nindex bbad3c2..0000000\n--- a/.github/workflows/pyroma.yml\n+++ /dev/null\n@@ -1,35 +0,0 @@\n-name: Pyroma\n-on: [push]\n-jobs:\n-  build:\n-    runs-on: ubuntu-latest\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        python-version: [3.8]\n-\n-    steps:\n-      # git checkout\n-      - uses: actions/checkout@v2\n-\n-      # python setup\n-      - name: Set up Python ${{ matrix.python-version }}\n-        uses: actions/setup-python@v1\n-        with:\n-          python-version: ${{ matrix.python-version }}\n-\n-      # python cache\n-      - uses: actions/cache@v1\n-        with:\n-          path: ~/.cache/pip\n-          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n-          restore-keys: |\n-            ${{ runner.os }}-pip-\n-\n-      # install pyroma\n-      - name: install pyroma\n-        run: pip install pyroma\n-\n-      # run pyroma\n-      - name: run pyroma\n-        run: pyroma -n 10 -d .\ndiff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nindex a024e3c..819a166 100644\n--- a/.github/workflows/tests.yml\n+++ b/.github/workflows/tests.yml\n@@ -7,7 +7,7 @@ jobs:\n       fail-fast: false\n       matrix:\n         python: [3.7, 3.8, 3.9]\n-        plone: ["6.0.0a2", "5.2-latest"]\n+        plone: ["6.0.0a6", "5.2-latest"]\n         exclude:\n           - plone: "5.2-latest"\n             python: 3.9\n@@ -26,7 +26,7 @@ jobs:\n       # Install plone.volto with test extras\n       - name: Install plone.volto\n         run: |\n-          pip install ".[test]" --use-deprecated legacy-resolver\n+          pip install ".[test]"\n \n       # test\n       - name: test\ndiff --git a/.github/workflows/zpretty.yml b/.github/workflows/zpretty.yml\ndeleted file mode 100644\nindex 180f0e9..0000000\n--- a/.github/workflows/zpretty.yml\n+++ /dev/null\n@@ -1,40 +0,0 @@\n-name: zpretty\n-on: [push]\n-jobs:\n-  build:\n-    runs-on: ubuntu-latest\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        python-version: [3.8]\n-\n-    steps:\n-      # git checkout\n-      - uses: actions/checkout@v2\n-\n-      # python setup\n-      - name: Set up Python ${{ matrix.python-version }}\n-        uses: actions/setup-python@v1\n-        with:\n-          python-version: ${{ matrix.python-version }}\n-\n-      # python cache\n-      - uses: actions/cache@v1\n-        with:\n-          path: ~/.cache/pip\n-          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n-          restore-keys: |\n-            ${{ runner.os }}-pip-\n-\n-      # install zpretty\n-      - name: install zpretty\n-        run: pip install zpretty\n-\n-      # run zpretty\n-      - name: run zpretty\n-        run: find src -name \'*.zcml\' | xargs zpretty -i\n-\n-      # XXX: this doesn\'t work on gh actions (https://github.com/plone/plone.restapi/pull/1119/checks?check_run_id=2686474411)\n-      # run git diff\n-      - name: run git diff\n-        run: git diff --exit-code\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 17dafb4..eb1e206 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,13 +8,65 @@ Changelog\n \n .. towncrier release notes start\n \n+4.0.0a7 (2022-07-22)\n+--------------------\n+\n+New features:\n+\n+\n+- Use new metadata utility for adding the ``image_scales`` to the default serialization.\n+  [ericof] (#74)\n+\n+\n+Bug fixes:\n+\n+\n+- Use plone/code-analysis-action on GitHub Actions and plone/code-quality Docker image and versions to format code.\n+  [ericof] (#68)\n+- Fix the handler for resolving UIDs in nested blocks to avoid trying to resolve them twice. This also makes it possible to use deserialization and serialization transforms that intentionally run before the resolveuid transform in the context of nested blocks.\n+  [davisagli] (#76)\n+\n+\n+4.0.0a6 (2022-06-25)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Re-release 4.0.0a5/4.0.0a5.dev0\n+  [tisto] (#72)\n+\n+\n+4.0.0a5 (2022-06-25)\n+--------------------\n+\n+New features:\n+\n+\n+- Add form ``@@migrate_richtext`` to migrate ``html-richtext`` to slate blocks or draftjs blocks\n+  [pbauer] (#47)\n+- Add ``@@migrate_to_volto`` to prepare existing sites for Volto.\n+  [pbauer] (#55)\n+\n+\n+Bug fixes:\n+\n+\n+- Update test to 6.0.0a4 and new pip practices.\n+  [sneridagh] (#51)\n+- Conditional custom ``IImageScaleFactory`` adapter for Plone < 6 (svg are now handled in `plone.namedfile <https://github.com/plone/plone.namedfile/commit/b4f80204759703aa812d1db35589cd92e89ea108>`_).\n+  [cekk] (#60)\n+- Fixed code quality configuration.\n+  Removed unused imports and variables and sorted the imports.\n+  [maurits] (#71)\n+\n+\n 4.0.0a4 (2022-04-08)\n --------------------\n \n - Fix deprecated import of isDefaultPage\n   [pbauer]\n \n-\n 4.0.0a3 (2022-02-04)\n --------------------\n \ndiff --git a/Makefile b/Makefile\nindex a5d9718..dafb4f7 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -16,12 +16,17 @@ RESET=`tput sgr0`\n YELLOW=`tput setaf 3`\n \n PLONE5=5.2.7\n-PLONE6=6.0.0a4\n+PLONE6=6.0.0a6\n+\n+CODE_QUALITY_VERSION=1.0.1\n+LINT=docker run --rm -v "$(PWD)":/github/workspace plone/code-quality:${CODE_QUALITY_VERSION} check\n \n PACKAGE_NAME=plone.volto\n PACKAGE_PATH=src/\n CHECK_PATH=setup.py $(PACKAGE_PATH)\n \n+all: build\n+\n # Add the following \'help\' target to your Makefile\n # And add help text after each target name starting with \'\\#\\#\'\n .PHONY: help\n@@ -33,27 +38,25 @@ bin/pip:\n \tpython3 -m venv .\n \tbin/pip install -U pip wheel\n \n-bin/black:\n-\tbin/pip install black\n-\n-bin/isort:\n-\tbin/pip install isort\n-\n-bin/flakeheaven:\n-\tbin/pip install flakeheaven\n+bin/black bin/isort bin/pyroma bin/zpretty: bin/pip\n+\t@echo "$(GREEN)==> Install Code Quality tools$(RESET)"\n+\tbin/pip install -r https://raw.githubusercontent.com/plone/code-quality/v$(CODE_QUALITY_VERSION)/requirements.txt\n+\t@echo "$(GREEN)==> Install pre-commit hook$(RESET)"\n+\techo -e \'#!/usr/bin/env bash\\nmake lint\' > .git/hooks/pre-commit && chmod ug+x .git/hooks/pre-commit\n \n .PHONY: build-plone-5.2\n-build-plone-5.2: bin/pip ## Build Plone 5.2\n+build-plone-5.2: bin/pip bin/black ## Build Plone 5.2\n \t@echo "$(GREEN)==> Build with Plone 5.2$(RESET)"\n \tbin/pip install Plone plone.app.testing -c https://dist.plone.org/release/$(PLONE5)/constraints.txt\n \tbin/pip install -e ".[test]"\n \tbin/mkwsgiinstance -d . -u admin:admin\n \n .PHONY: build-plone-6.0\n-build-plone-6.0: bin/pip ## Build Plone 6.0\n+build-plone-6.0: bin/pip bin/black ## Build Plone 6.0\n \t@echo "$(GREEN)==> Build with Plone 6.0$(RESET)"\n \tbin/pip install Plone plone.app.testing -c https://dist.plone.org/release/$(PLONE6)/constraints.txt\n \tbin/pip install -e ".[test]"\n+\tbin/pip install zest.releaser[recommended]\n \tbin/mkwsgiinstance -d . -u admin:admin\n \n .PHONY: build\n@@ -66,30 +69,41 @@ clean: ## Remove old virtualenv and creates a new one\n \n .PHONY: black\n black: bin/black ## Format codebase\n-\t./bin/black $(CHECK_PATH)\n+\tbin/black $(CHECK_PATH)\n \n .PHONY: isort\n isort: bin/isort ## Format imports in the codebase\n-\t./bin/isort $(CHECK_PATH)\n+\tbin/isort $(CHECK_PATH)\n+\n+zpretty: bin/zpretty ## Format xml and zcml with zpretty\n+\tfind "${PACKAGE_PATH}" -name \'*.xml\' | xargs bin/zpretty -x -i\n+\tfind "${PACKAGE_PATH}" -name \'*.zcml\' | xargs bin/zpretty -z -i\n \n .PHONY: format\n-format: black isort ## Format the codebase according to our standards\n+format: black isort zpretty ## Format the codebase according to our standards\n \n .PHONY: lint\n-lint: lint-isort lint-black lint-flake8 ## check style with flake8\n+lint: lint-isort lint-black lint-flake8 lint-zpretty ## check code style\n+\n+.PHONY: lint-black\n+lint-black: ## validate black formating\n+\t$(LINT) black "$(CHECK_PATH)"\n \n .PHONY: lint-flake8\n-lint-flake8: bin/flakeheaven ## validate black formating\n-\t./bin/flakeheaven lint $(CHECK_PATH)\n+lint-flake8: ## validate black formating\n+\t$(LINT) flake8 "$(CHECK_PATH)"\n \n+.PHONY: lint-isort\n+lint-isort: ## validate using isort\n+\t$(LINT) isort "$(CHECK_PATH)"\n \n-.PHONY: lint-black\n-lint-black: bin/black ## validate black formating\n-\t./bin/black --check --diff $(CHECK_PATH)\n+.PHONY: lint-pyroma\n+lint-pyroma: ## validate using pyroma\n+\t$(LINT) .\n \n-.PHONY: lint-isort\n-lint-isort: bin/isort ## validate using isort\n-\t./bin/isort --check-only $(CHECK_PATH)\n+.PHONY: lint-zpretty\n+lint-zpretty: ## validate ZCML/XML using zpretty\n+\t$(LINT) zpretty "$(PACKAGE_PATH)"\n \n .PHONY: test\n test: ## run tests\n@@ -98,3 +112,7 @@ test: ## run tests\n .PHONY: start\n start: ## Start a Plone instance on localhost:8080\n \tPYTHONWARNINGS=ignore ./bin/runwsgi etc/zope.ini\n+\n+.PHONY: release\n+release: ## Make a release\n+\t./bin/fullrelease\ndiff --git a/base.cfg b/base.cfg\nindex 8482906..1e72208 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -3,7 +3,7 @@ index = https://pypi.org/simple/\n parts =\n     instance\n     plonesite\n-    code-analysis\n+    # code-analysis (Move to Makefile)\n     dependencies\n     zpretty\n     test\ndiff --git a/news/47.feature b/news/47.feature\ndeleted file mode 100644\nindex 0ab89fb..0000000\n--- a/news/47.feature\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-- Add form @@migrate_to_slate to migrate html-richtext to slate blocks\n-  [pbauer]\ndiff --git a/news/51.bugfix b/news/51.bugfix\ndeleted file mode 100644\nindex a7f2e9e..0000000\n--- a/news/51.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Update test to 6.0.0a4 and new pip practices\n-[sneridagh]\ndiff --git a/news/77.feature b/news/77.feature\nnew file mode 100644\nindex 0000000..d00ef42\n--- /dev/null\n+++ b/news/77.feature\n@@ -0,0 +1,3 @@\n+Use slate as default text block in default contents for ``default-homepage`` and\n+``multilingual`` profile.\n+[sneridagh]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..abae265 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -18,3 +18,15 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[tool.flakeheaven.plugins]\n+# Disable some checks.\n+# - E501 line too long\n+#   flake8 is already testing this, with max-line-length=100000 in .flake8,\n+#   so pycodestyle should not test it.\n+# - W503 line break before binary operator\n+#   Outdated recommendation, see https://www.flake8rules.com/rules/W503.html\n+mccabe = ["+*"]\n+pycodestyle = ["+*", "-E501", "-W503"]\n+pyflakes = ["+*"]\n+pylint = ["+*"]\ndiff --git a/setup.cfg b/setup.cfg\nindex 285fc29..473fa2d 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -7,9 +7,10 @@ ignore =\n     bootstrap-buildout.py\n \n [isort]\n+# black compatible Plone isort rules:\n # for details see\n-# http://docs.plone.org/develop/styleguide/python.html#grouping-and-sorting\n+# https://github.com/plone/Products.CMFPlone/issues/3497\n+profile = black\n force_alphabetical_sort = True\n force_single_line = True\n lines_after_imports = 2\n-line_length = 200\ndiff --git a/setup.py b/setup.py\nindex 20eca67..9e2bd0a 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,6 +3,7 @@\n \n from setuptools import find_packages\n from setuptools import setup\n+\n import sys\n \n \n@@ -24,7 +25,7 @@ def readfile(name):\n \n setup(\n     name="plone.volto",\n-    version="4.0.0a5.dev0",\n+    version="4.0.0a8.dev0",\n     description="Volto integration add-on for Plone",\n     long_description=long_description,\n     # Get more from https://pypi.org/classifiers/\n@@ -67,6 +68,7 @@ def readfile(name):\n             "plone.app.contenttypes",\n             "plone.app.robotframework[debug]",\n             "collective.MockMailHost",\n+            "responses",\n         ]\n     },\n     entry_points="""\ndiff --git a/src/plone/volto/behaviors/headtitle.py b/src/plone/volto/behaviors/headtitle.py\nindex 8610f3d..472ff29 100644\n--- a/src/plone/volto/behaviors/headtitle.py\n+++ b/src/plone/volto/behaviors/headtitle.py\n@@ -1,9 +1,9 @@\n # -*- coding: utf-8 -*-\n-from plone.volto import _\n from plone.autoform.interfaces import IFormFieldProvider\n from plone.supermodel import model\n-from zope.interface import provider\n+from plone.volto import _\n from zope import schema\n+from zope.interface import provider\n \n \n @provider(IFormFieldProvider)\ndiff --git a/src/plone/volto/behaviors/navtitle.py b/src/plone/volto/behaviors/navtitle.py\nindex c4f9346..f7392af 100644\n--- a/src/plone/volto/behaviors/navtitle.py\n+++ b/src/plone/volto/behaviors/navtitle.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n-from plone.volto import _\n from plone.autoform.interfaces import IFormFieldProvider\n from plone.supermodel import model\n+from plone.volto import _\n from zope.interface import provider\n from zope.schema import TextLine\n \ndiff --git a/src/plone/volto/behaviors/preview.py b/src/plone/volto/behaviors/preview.py\nindex 3f002be..705b23d 100644\n--- a/src/plone/volto/behaviors/preview.py\n+++ b/src/plone/volto/behaviors/preview.py\n@@ -1,8 +1,8 @@\n # -*- coding: utf-8 -*-\n-from plone.volto import _\n from plone.autoform.interfaces import IFormFieldProvider\n from plone.namedfile import field as namedfile\n from plone.supermodel import model\n+from plone.volto import _\n from zope.interface import provider\n from zope.schema import TextLine\n \ndiff --git a/src/plone/volto/blocksuuidfixer.py b/src/plone/volto/blocksuuidfixer.py\nindex 605a641..0507173 100644\n--- a/src/plone/volto/blocksuuidfixer.py\n+++ b/src/plone/volto/blocksuuidfixer.py\n@@ -1,8 +1,8 @@\n-from Products.Five.browser import BrowserView\n from plone import api\n+from plone.protect.interfaces import IDisableCSRFProtection\n from plone.restapi.behaviors import IBlocks\n+from Products.Five.browser import BrowserView\n from zope.interface import alsoProvides\n-from plone.protect.interfaces import IDisableCSRFProtection\n \n import uuid\n \ndiff --git a/src/plone/volto/browser/configure.zcml b/src/plone/volto/browser/configure.zcml\nindex 4f1b949..a10733e 100644\n--- a/src/plone/volto/browser/configure.zcml\n+++ b/src/plone/volto/browser/configure.zcml\n@@ -29,9 +29,19 @@\n   <browser:page\n       name="migrate_richtext"\n       for="zope.interface.Interface"\n-      class=".migrate_richtext.MigrateRichTextToSlate"\n+      class=".migrate_richtext.MigrateRichTextToVoltoBlocks"\n       template="migrate_richtext.pt"\n       permission="cmf.ManagePortal"\n+      zcml:condition="have plone-60"\n+      />\n+\n+  <browser:page\n+      name="migrate_to_volto"\n+      for="zope.interface.Interface"\n+      class=".migrate_to_volto.MigrateToVolto"\n+      template="migrate_to_volto.pt"\n+      permission="cmf.ManagePortal"\n+      zcml:condition="have plone-60"\n       />\n \n </configure>\ndiff --git a/src/plone/volto/browser/migrate_richtext.pt b/src/plone/volto/browser/migrate_richtext.pt\nindex 15af615..260c053 100644\n--- a/src/plone/volto/browser/migrate_richtext.pt\n+++ b/src/plone/volto/browser/migrate_richtext.pt\n@@ -40,6 +40,21 @@\n                      tal:attributes="value python:view.service_url">\n             </div>\n \n+            <div class="field mb-3">\n+              <div class="form-check">\n+                <input class="form-check-input" type="radio" name="slate:int" value="1" id="slate" checked="checked">\n+                <label for="slate" class="form-check-label"  i18n:translate="">\n+                  Convert to Slate (default)\n+                </label>\n+              </div>\n+              <div class="form-check">\n+                <input class="form-check-input" type="radio" name="slate:int" value="0" id="draftjs">\n+                <label for="draftjs" class="form-check-label" i18n:translate="">\n+                  Convert to draftjs (a old format used until Volto 15)\n+                </label>\n+              </div>\n+            </div>\n+\n             <div class="form-check">\n                 <input\n                     class="form-check-input"\ndiff --git a/src/plone/volto/browser/migrate_richtext.py b/src/plone/volto/browser/migrate_richtext.py\nindex 701a38d..2753d9f 100644\n--- a/src/plone/volto/browser/migrate_richtext.py\n+++ b/src/plone/volto/browser/migrate_richtext.py\n@@ -1,6 +1,7 @@\n from logging import getLogger\n from operator import itemgetter\n from plone import api\n+from plone.app.contenttypes.behaviors.leadimage import ILeadImage\n from plone.app.textfield.value import RichTextValue\n from Products.Five import BrowserView\n from uuid import uuid4\n@@ -9,10 +10,11 @@\n import requests\n import transaction\n \n+\n logger = getLogger(__name__)\n \n \n-class MigrateRichTextToSlate(BrowserView):\n+class MigrateRichTextToVoltoBlocks(BrowserView):\n     """Form to trigger migrating html from Richxtext fields to slate."""\n \n     def __call__(self):\n@@ -21,17 +23,19 @@ def __call__(self):\n         self.purge_richtext = request.get("purge_richtext", False)\n         self.portal_types = request.get("portal_types", [])\n         self.portal_types_info = self.types_with_blocks()\n+        self.slate = request.get("slate", True)\n \n         if not self.request.form.get("form.submitted", False):\n             return self.index()\n \n-        results = migrate_richtext_to_slate(\n+        results = migrate_richtext_to_blocks(\n             portal_types=self.portal_types,\n             service_url=self.service_url,\n             purge_richtext=self.purge_richtext,\n+            slate=self.slate,\n         )\n         api.portal.show_message(\n-            "Migrated {} items from richtext to slate".format(results),\n+            "Migrated {} items from richtext to blocks".format(results),\n             request=self.request,\n         )\n         return self.index()\n@@ -59,18 +63,17 @@ def types_with_blocks(self):\n         return sorted(results, key=itemgetter("title"))\n \n \n-def migrate_richtext_to_slate(\n-    portal_types=None, service_url="http://localhost:5000/html", purge_richtext=False\n+def migrate_richtext_to_blocks(\n+    portal_types=None,\n+    service_url="http://localhost:5000/html",\n+    fieldname="text",\n+    purge_richtext=False,\n+    slate=True,\n ):\n     if portal_types is None:\n         portal_types = types_with_blocks()\n     elif isinstance(portal_types, str):\n         portal_types = [portal_types]\n-    fieldname = "text"\n-    headers = {\n-        "Accept": "application/json",\n-        "Content-Type": "application/json",\n-    }\n     results = 0\n     for portal_type in portal_types:\n         for index, brain in enumerate(\n@@ -82,37 +85,38 @@ def migrate_richtext_to_slate(\n                 continue\n             if isinstance(text, RichTextValue):\n                 text = text.raw\n-            if not text.strip():\n+            if not text or not text.strip():\n                 continue\n \n-            # use https://github.com/plone/blocks-conversion-tool\n-            r = requests.post(service_url, headers=headers, json={"html": text})\n-            r.raise_for_status()\n-            slate_data = r.json()\n-            slate_data = slate_data["data"]\n-\n             blocks = {}\n-            uuids = []\n+            blocks_layout = {"items": []}\n \n-            # add title\n+            # add title block\n             uuid = str(uuid4())\n             blocks[uuid] = {"@type": "title"}\n-            uuids.append(uuid)\n+            blocks_layout["items"].append(uuid)\n \n-            # add description\n+            # add description block\n             if obj.description:\n                 uuid = str(uuid4())\n                 blocks[uuid] = {"@type": "description"}\n-                uuids.append(uuid)\n+                blocks_layout["items"].append(uuid)\n \n-            # add slate blocks\n-            for block in slate_data:\n+            if ILeadImage(obj, None) and ILeadImage(obj).image:\n                 uuid = str(uuid4())\n-                uuids.append(uuid)\n-                blocks[uuid] = block\n+                obj.blocks_layout["items"].append(uuid)\n+                obj.blocks[uuid] = {"@type": "leadimage"}\n+\n+            text_blocks, text_uuids = get_blocks_from_richtext(\n+                text,\n+                service_url=service_url,\n+                slate=slate,\n+            )\n+            blocks.update(text_blocks)\n+            blocks_layout["items"] += text_uuids\n \n             obj.blocks = blocks\n-            obj.blocks_layout = {"items": uuids}\n+            obj.blocks_layout = blocks_layout\n             obj._p_changed = True\n \n             if purge_richtext:\n@@ -120,16 +124,42 @@ def migrate_richtext_to_slate(\n \n             obj.reindexObject(idxs=["SearchableText"])\n             results += 1\n-            logger.debug(f"Migrated richtext to slate for: {obj.absolute_url()}")\n+            logger.debug(f"Migrated richtext to blocks for: {obj.absolute_url()}")\n \n             if not index % 1000:\n                 logger.info(f"Commiting after {index} items...")\n                 transaction.commit()\n-        msg = f"Migrated {index} {portal_type} to slate"\n+        msg = f"Migrated {index} {portal_type} to blocks"\n         logger.info(msg)\n     return results\n \n \n+def get_blocks_from_richtext(\n+    text,\n+    service_url="http://localhost:5000/html",\n+    slate=True,\n+):\n+    headers = {\n+        "Accept": "application/json",\n+        "Content-Type": "application/json",\n+    }\n+    payload = {"html": text}\n+    if not slate:\n+        payload["converter"] = "draftjs"\n+    r = requests.post(service_url, headers=headers, json=payload)\n+    r.raise_for_status()\n+    slate_data = r.json()\n+    slate_data = slate_data["data"]\n+    blocks = {}\n+    uuids = []\n+    # generate slate blocks\n+    for block in slate_data:\n+        uuid = str(uuid4())\n+        uuids.append(uuid)\n+        blocks[uuid] = block\n+    return blocks, uuids\n+\n+\n def types_with_blocks():\n     """A list of content types with volto.blocks behavior"""\n     portal_types = api.portal.get_tool("portal_types")\ndiff --git a/src/plone/volto/browser/migrate_to_volto.pt b/src/plone/volto/browser/migrate_to_volto.pt\nnew file mode 100644\nindex 0000000..d6f57bd\n--- /dev/null\n+++ b/src/plone/volto/browser/migrate_to_volto.pt\n@@ -0,0 +1,118 @@\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      i18n:domain="plone"\n+      metal:use-macro="context/main_template/macros/master">\n+\n+<div metal:fill-slot="main">\n+<tal:main-macro metal:define-macro="main">\n+\n+    <h1 class="documentFirstHeading" i18n:translate="">Migrate to Volto</h1>\n+\n+    <p class="lead" i18n:translate="">Here you can prepare this site for Volto.</p>\n+\n+    <h3 i18n:translate="">What is Volto?</h3>\n+    <p i18n:translate="">Volto is a React-based frontend for Plone. It is the default UI for Plone 6.</p>\n+\n+    <h3 i18n:translate="">What will happen?</h3>\n+    <p i18n:translate="">When you click on "Migrate to Volto" the following things will happen:</p>\n+    <ol>\n+        <li i18n:translate="">Install the package <code>plone.volto</code> and <code>plone.restapi</code>.</li>\n+        <li i18n:translate="">The html of Richtext-Fields (previously edited using TinyMCE) is converted into Volto blocks so you can edit it in Volto.</li>\n+        <li i18n:translate="">Pages, News Items and Events are made folderish. That means they can contain other content like Images or Pages.</li>\n+        <li i18n:translate="">Default Pages of Folders are merged with the Folderish Pages that replace the Folder whereever that is possible.\n+            This works well with Pages and Collections where the text and/or query are added to the folderish page that repalces the Folder.</li>\n+        <li i18n:translate="">Collections are migrated to Pages with Listing Blocks configured like the Collection.</li>\n+        <li i18n:translate="">A migrated site will still work in Plone Classic but behave different. Editors can only work with the Data using Volto.</li>\n+    </ol>\n+\n+    <form id="migrate_to_volto" action="@@migrate_to_volto" tal:attributes="action request/URL" method="post" enctype="multipart/form-data">\n+\n+        <div class="formControls form-group">\n+            <input type="hidden" name="form.submitted" value="1"/>\n+            <button class="btn btn-primary submit-widget button-field context"\n+                    type="submit" name="submit" value="export">Migrate to Volto\n+            </button>\n+        </div>\n+\n+        <h3 i18n:translate="" class="mt-5">Requirements</h3>\n+        <ul>\n+            <li i18n:translate="">\n+            To migrate Richtext to Volto Blocks you need to have <code>blocks-conversion-tool</code> running on a accessible url.\n+            The easiest way to have that running on your machine is: <code>docker run -it -p 5000:5000 plone/blocks-conversion-tool:latest</code>.\n+            More for options read <a href="https://github.com/plone/blocks-conversion-tool">https://github.com/plone/blocks-conversion-tool</a>.\n+            </li>\n+        </ul>\n+\n+        <h3 i18n:translate="">Advanced settings</h3>\n+        <p i18n:translate="">\n+        It is recommendet to use the default settings but here you can disable some of the migration-steps.\n+        </p>\n+\n+        <div class="form-check mb-3">\n+            <input\n+                class="form-check-input"\n+                type="checkbox"\n+                name="migrate_folders:boolean"\n+                id="migrate_folders"\n+                tal:attributes="checked python:view.migrate_folders"\n+                />\n+            <label class="form-check-label" for="migrate_folders">\n+            Migrate Folders to Folderish Pages\n+            </label>\n+        </div>\n+\n+        <div class="form-check mb-3 ms-4">\n+            <input\n+                class="form-check-input"\n+                type="checkbox"\n+                name="migrate_default_pages:boolean"\n+                id="migrate_default_pages"\n+                tal:attributes="checked python:view.migrate_default_pages"\n+                />\n+            <label class="form-check-label" for="migrate_default_pages">\n+            Migrate default Pages into the Folderish Pages if possible\n+            </label>\n+            <div class="form-text" i18n:translate="">\n+            Collections and Pages that are the default-page of a Folder will be applied on the migrated Folderish Page.\n+            For Collections that means adding a listing block with the same query.\n+            This only happens if you also you migrate Folders to Folderish Pages.\n+            </div>\n+        </div>\n+\n+        <div class="form-check mb-3">\n+            <input\n+                class="form-check-input"\n+                type="checkbox"\n+                name="purge_richtext:boolean"\n+                id="purge_richtext"\n+                tal:attributes="checked python:view.purge_richtext"\n+                />\n+            <label class="form-check-label" for="purge_richtext">\n+            Purge old Richtext-fields after migrating to Volto blocks\n+            </label>\n+            <div class="form-text" i18n:translate="">\n+            The RichtextValue objects will be removed from the migrated objects. The old fields (from the behavior plone.volto) are no longer available.\n+            </div>\n+\n+        </div>\n+\n+        <div class="field mb-3">\n+            <label for="service_url" class="form-label">\n+            URL of blocks-conversion-tool.\n+            </label>\n+            <input class="form-control" type="text" name="service_url" id="service_url" value=""\n+                    tal:attributes="value python:view.service_url">\n+            <div class="form-text" i18n:translate="">\n+            The migration requires a service to run. See https://github.com/plone/blocks-conversion-tool for details.\n+            </div>\n+\n+        </div>\n+\n+    </form>\n+\n+</tal:main-macro>\n+</div>\n+\n+</html>\ndiff --git a/src/plone/volto/browser/migrate_to_volto.py b/src/plone/volto/browser/migrate_to_volto.py\nnew file mode 100644\nindex 0000000..9e64ee5\n--- /dev/null\n+++ b/src/plone/volto/browser/migrate_to_volto.py\n@@ -0,0 +1,341 @@\n+from Acquisition import aq_base\n+from logging import getLogger\n+from plone import api\n+from plone.app.contenttypes.behaviors.collection import ICollection\n+from plone.app.linkintegrity.utils import referencedRelationship\n+from plone.app.redirector.interfaces import IRedirectionStorage\n+from plone.app.textfield.value import RichTextValue\n+from plone.dexterity.interfaces import IDexterityFTI\n+from plone.volto.browser.migrate_richtext import get_blocks_from_richtext\n+from plone.volto.browser.migrate_richtext import migrate_richtext_to_blocks\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.relationhelper import restore_relations\n+from Products.CMFPlone.utils import get_installer\n+from Products.Five import BrowserView\n+from uuid import uuid4\n+from zope.component import getUtility\n+from zope.lifecycleevent import modified\n+\n+\n+try:\n+    from plone.app.contenttypes.utils import migrate_base_class_to_new_class\n+except ImportError:\n+    # BBB: Plone 5\n+    from plone.app.contenttypes.migration.dxmigration import (\n+        migrate_base_class_to_new_class,\n+    )\n+\n+logger = getLogger(__name__)\n+\n+\n+class MigrateToVolto(BrowserView):\n+    """Basically a configurable upgrade-step to prepare a existing site for Volto."""\n+\n+    def __call__(self):\n+        request = self.request\n+        self.service_url = request.get("service_url", "http://localhost:5000/html")\n+        self.migrate_folders = request.get("migrate_folders", True)\n+        self.migrate_default_pages = request.get("migrate_default_pages", True)\n+        self.purge_richtext = request.get("purge_richtext", True)\n+        # We still use draftjs at the moment\n+        self.slate = request.get("slate", False)\n+\n+        if not self.request.form.get("form.submitted", False):\n+            return self.index()\n+\n+        # 1. Install plone volto to enable plone.blocks behavior and change klass on fti\n+        self.install_plone_volto()\n+\n+        # 2. Migrate to Slate\n+        self.convert_richtext()\n+\n+        # 3. Migrate existing content where fti.klass != obj.__class__\n+        self.migrate_to_folderish()\n+\n+        if self.migrate_folders:\n+            self.do_migrate_folders()\n+\n+        self.migrate_collections()\n+\n+        api.portal.show_message("Finished migration to Volto!", self.request)\n+        self.request.response.redirect(self.context.absolute_url())\n+\n+    def install_plone_volto(self):\n+        installer = get_installer(self.context, self.request)\n+        installer.install_product("plone.volto")\n+\n+    def migrate_to_folderish(self):\n+        """Migrate default itemish content to folderish"""\n+        folderish_types = [\n+            "Document",\n+            "Event",\n+            "News Item",\n+        ]\n+        catalog = getToolByName(self.context, "portal_catalog")\n+        for portal_type in folderish_types:\n+            for brain in catalog(portal_type=portal_type, sort_on="path"):\n+                obj = brain.getObject()\n+                relations = export_relations(obj)\n+                migrate_base_class_to_new_class(obj, migrate_to_folderish=True)\n+                modified(obj)\n+                if relations:\n+                    restore_relations(all_relations=relations)\n+\n+    def do_migrate_folders(self):\n+        """Migrate Folders to FolderisDocument."""\n+        catalog = getToolByName(self.context, "portal_catalog")\n+        for brain in catalog(portal_type="Folder", sort_on="path"):\n+            obj = brain.getObject()\n+            obj = make_document(obj, slate=self.slate)\n+            migrated_default_page = False\n+            if self.migrate_default_pages:\n+                migrated_default_page = self.do_migrate_default_page(obj)\n+            if not migrated_default_page:\n+                uuid, block = generate_listing_block(obj)\n+                obj.blocks[uuid] = block\n+                obj.blocks_layout["items"].append(uuid)\n+                obj._p_changed = True\n+\n+    def migrate_collections(self):\n+        """Migrate Collections to FolderisDocument with Listing Blocks\n+        Collections that are default pages are already removed when this runs.\n+        """\n+        catalog = getToolByName(self.context, "portal_catalog")\n+        for brain in catalog(portal_type="Collection", sort_on="path"):\n+            obj = brain.getObject()\n+            obj = make_document(obj, slate=self.slate)\n+\n+    def do_migrate_default_page(self, obj):\n+        """This assumes the obj is already a FolderishDocument"""\n+        default_page = None\n+        if "index_html" in obj:\n+            # 1. Check for a index_html item in it\n+            default_page = "index_html"\n+        else:\n+            # 2. Check attribute \'default_page\'\n+            default_page = getattr(aq_base(obj), "default_page", [])\n+\n+        if not default_page or default_page not in obj:\n+            return\n+\n+        default_page_obj = obj.get(default_page)\n+        default_page_type = default_page_obj.portal_type\n+        blocks = {}\n+        blocks_layout = {"items": []}\n+\n+        if default_page_type in ["Collection", "Document"]:\n+            # richtext was already migrated in the first step\n+            # we reuse all blocks (except for title and description?)\n+            blocks = default_page_obj.blocks or blocks\n+            blocks_layout = default_page_obj.blocks_layout or blocks_layout\n+\n+            if default_page_type == "Collection":\n+                uuid, block = generate_listing_block_from_collection(default_page_obj)\n+                blocks[uuid] = block\n+                blocks_layout["items"].append(uuid)\n+\n+            # set title and description of the default page\n+            # the blocks for that are already there\n+            obj.title = default_page_obj.title\n+            obj.description = default_page_obj.description\n+\n+            marker = object()\n+            for fieldname in [\n+                "subject",\n+                "rights",\n+                "creators",\n+                "contributors",\n+                "allow_discussion",\n+            ]:\n+                value = getattr(default_page_obj.aq_base, fieldname, marker)\n+                if value is not marker:\n+                    setattr(obj.aq_base, fieldname, value)\n+\n+            relations = export_relations(default_page_obj)\n+            default_page_uid = default_page_obj.UID()\n+            old_path = "/".join(default_page_obj.getPhysicalPath())\n+            new_path = "/".join(obj.getPhysicalPath())\n+\n+            # Delete the default page\n+            obj.manage_delObjects(default_page)\n+\n+            # Add redirect from dropped default-page to container\n+            storage = getUtility(IRedirectionStorage)\n+            storage.add(old_path, new_path)\n+\n+            # rewrite relations to point to parent\n+            fixed_relations = []\n+            obj_uid = obj.UID()\n+            for rel in relations:\n+                if default_page_uid == rel["from_uuid"]:\n+                    rel["from_uuid"] = obj_uid\n+                    fixed_relations.append(rel)\n+                if default_page_uid == rel["to_uuid"]:\n+                    rel["to_uuid"] = obj_uid\n+                    fixed_relations.append(rel)\n+            if fixed_relations:\n+                restore_relations(all_relations=fixed_relations)\n+\n+        else:\n+            # We keep the default page in the new FolderishDocument\n+            # and only show a default listing block\n+            uuid, block = generate_listing_block(obj)\n+            blocks[uuid] = block\n+            blocks_layout["items"].append(uuid)\n+\n+        obj.blocks = blocks\n+        obj.blocks_layout = blocks_layout\n+        obj._p_changed = True\n+        obj.reindexObject(idxs=["SearchableText"])\n+        return True\n+\n+    def convert_richtext(self):\n+        """Get richtext for all content that has it and set as blocks."""\n+        migrate_richtext_to_blocks(\n+            service_url=self.service_url,\n+            purge_richtext=self.purge_richtext,\n+            slate=self.slate,\n+        )\n+\n+    def installed_addons(self):\n+        results = []\n+        installer = get_installer(self.context, self.request)\n+        for profile_id in installer.get_install_profiles():\n+            if installer.is_profile_installed(profile_id):\n+                results.append(profile_id)\n+        return results\n+\n+\n+def generate_listing_block(obj):\n+    # List content of this container\n+    uuid = str(uuid4())\n+    block = {\n+        "@type": "listing",\n+        "query": [],\n+        "variation": "default",\n+        "block": uuid,\n+    }\n+    return uuid, block\n+\n+\n+def generate_listing_block_from_collection(obj):\n+    """Transform collection query and setting to listing block."""\n+    collection = ICollection(obj)\n+    uuid = str(uuid4())\n+    qs = {"query": collection.query}\n+    if collection.item_count:\n+        qs["b_size"] = collection.item_count\n+    if collection.limit:\n+        qs["limit"] = collection.limit\n+    if collection.sort_on:\n+        qs["sort_on"] = collection.sort_on\n+    qs["sort_order_boolean"] = True if collection.sort_reversed else False\n+\n+    # Set layout of collection to listing block\n+    # TODO: What about event_listing, tabular_view and full_view?\n+    variation_mapping = {\n+        "listing_view": "default",\n+        "summary_view": "summary",\n+        "album_view": "imageGallery",\n+    }\n+    variation = variation_mapping.get(obj.getLayout, "default")\n+    block = {\n+        "@type": "listing",\n+        "querystring": qs,\n+        "variation": variation,\n+        "block": uuid,\n+    }\n+    return uuid, block\n+\n+\n+def make_document(obj, slate=True):\n+    """Convert any item to a FolderishDocument"""\n+    blocks = {}\n+    blocks_layout = {"items": []}\n+\n+    # set title\n+    obj.title = obj.title\n+    uuid = str(uuid4())\n+    blocks[uuid] = {"@type": "title"}\n+    blocks_layout["items"].insert(0, uuid)\n+\n+    # set description\n+    if obj.description:\n+        uuid = str(uuid4())\n+        blocks[uuid] = {"@type": "description"}\n+        blocks_layout["items"].insert(1, uuid)\n+\n+    fti = getUtility(IDexterityFTI, name=obj.portal_type)\n+    # When volto.blocks is there was alrady done by migrate_richtext\n+    # This happens with Collections\n+    if "volto.blocks" not in fti.behaviors:\n+        text = getattr(obj.aq_base, "text", None)\n+        if isinstance(text, RichTextValue):\n+            text = text.raw\n+        if text and text.strip():\n+            # We have Richtext. Get the block-data for it\n+            text_blocks, uuids = get_blocks_from_richtext(text, slate=slate)\n+            if uuids:\n+                blocks.update(text_blocks)\n+                blocks_layout["items"] += uuids\n+\n+    if obj.portal_type == "Collection":\n+        uuid, block = generate_listing_block_from_collection(obj)\n+        blocks[uuid] = block\n+        blocks_layout["items"].append(uuid)\n+\n+    relations = export_relations(obj)\n+    migrate_base_class_to_new_class(\n+        obj,\n+        new_class_name="plone.volto.content.FolderishDocument",\n+    )\n+    # Drop any custom layout because Documents display blocks!\n+    if getattr(obj.aq_base, "layout", None) is not None:\n+        del obj.layout\n+\n+    obj.portal_type = "Document"\n+    # Invalidate cache to find the behaviors\n+    del obj._v__providedBy__\n+\n+    if not obj.blocks:\n+        obj.blocks = blocks\n+    else:\n+        obj.blocks.update(blocks)\n+\n+    if not obj.blocks_layout["items"]:\n+        obj.blocks_layout = blocks_layout\n+    else:\n+        obj.blocks_layout["items"] += blocks_layout\n+\n+    modified(obj)\n+    if relations:\n+        restore_relations(all_relations=relations)\n+    return obj\n+\n+\n+def export_relations(obj):\n+    results = []\n+    for rel in api.relation.get(target=obj, unrestricted=True):\n+        if rel.from_attribute == referencedRelationship:\n+            # drop linkintegrity\n+            continue\n+        results.append(\n+            {\n+                "from_uuid": rel.from_object.UID(),\n+                "to_uuid": rel.to_object.UID(),\n+                "from_attribute": rel.from_attribute,\n+            }\n+        )\n+\n+    for rel in api.relation.get(source=obj, unrestricted=True):\n+        if rel.from_attribute == referencedRelationship:\n+            # drop linkintegrity\n+            continue\n+        results.append(\n+            {\n+                "from_uuid": rel.from_object.UID(),\n+                "to_uuid": rel.to_object.UID(),\n+                "from_attribute": rel.from_attribute,\n+            }\n+        )\n+    return results\ndiff --git a/src/plone/volto/configure.zcml b/src/plone/volto/configure.zcml\nindex b2d065f..6916c53 100644\n--- a/src/plone/volto/configure.zcml\n+++ b/src/plone/volto/configure.zcml\n@@ -42,6 +42,7 @@\n   <adapter\n       factory=".scaling.VoltoImageScalingFactory"\n       for="plone.app.contenttypes.interfaces.IImage"\n+      zcml:condition="not-have plone-60"\n       />\n \n   <adapter\n@@ -75,6 +76,22 @@\n         factory=".transforms.NestedResolveUIDSerializerRoot"\n         provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"\n         />\n+    <subscriber\n+        factory=".transforms.PreviewImageResolveUIDDeserializer"\n+        provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"\n+        />\n+    <subscriber\n+        factory=".transforms.PreviewImageResolveUIDDeserializerRoot"\n+        provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"\n+        />\n+    <subscriber\n+        factory=".transforms.PreviewImageResolveUIDSerializer"\n+        provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"\n+        />\n+    <subscriber\n+        factory=".transforms.PreviewImageResolveUIDSerializerRoot"\n+        provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"\n+        />\n   </configure>\n \n </configure>\ndiff --git a/src/plone/volto/content.py b/src/plone/volto/content.py\nindex 2e67e18..0756a2b 100644\n--- a/src/plone/volto/content.py\n+++ b/src/plone/volto/content.py\n@@ -1,11 +1,11 @@\n # -*- coding: utf-8 -*-\n-from plone.volto.interfaces import IFolderishDocument\n-from plone.volto.interfaces import IFolderishEvent\n-from plone.volto.interfaces import IFolderishNewsItem\n from plone.app.contenttypes.interfaces import IDocument\n from plone.app.contenttypes.interfaces import IEvent\n from plone.app.contenttypes.interfaces import INewsItem\n from plone.dexterity.content import Container\n+from plone.volto.interfaces import IFolderishDocument\n+from plone.volto.interfaces import IFolderishEvent\n+from plone.volto.interfaces import IFolderishNewsItem\n from zope.interface import implementer\n \n \ndiff --git a/src/plone/volto/controlpanel.py b/src/plone/volto/controlpanel.py\nindex 1b51adf..77007fd 100644\n--- a/src/plone/volto/controlpanel.py\n+++ b/src/plone/volto/controlpanel.py\n@@ -1,8 +1,8 @@\n # -*- coding: UTF-8 -*-\n-from plone.volto.interfaces import IVoltoSettings\n from plone.app.registry.browser.controlpanel import ControlPanelFormWrapper\n from plone.app.registry.browser.controlpanel import RegistryEditForm\n from plone.restapi.controlpanels import RegistryConfigletPanel\n+from plone.volto.interfaces import IVoltoSettings\n from zope.component import adapter\n from zope.interface import Interface\n \ndiff --git a/src/plone/volto/coresandbox/example.py b/src/plone/volto/coresandbox/example.py\nindex 51b5e6d..7b9524f 100644\n--- a/src/plone/volto/coresandbox/example.py\n+++ b/src/plone/volto/coresandbox/example.py\n@@ -7,7 +7,6 @@\n from plone.app.z3cform.widget import SelectFieldWidget\n from plone.autoform import directives\n from plone.dexterity.content import Container\n-\n from plone.namedfile.field import NamedBlobFile\n from plone.namedfile.field import NamedBlobImage\n from plone.schema import Email\n@@ -18,16 +17,14 @@\n from plone.supermodel import model\n from plone.supermodel.directives import fieldset\n from plone.supermodel.directives import primary\n-\n from z3c.form.browser.checkbox import CheckBoxFieldWidget\n from z3c.form.browser.radio import RadioFieldWidget\n-\n from z3c.relationfield.schema import RelationChoice\n from z3c.relationfield.schema import RelationList\n from zope import schema\n+from zope.i18nmessageid import MessageFactory\n from zope.interface import implementer\n \n-from zope.i18nmessageid import MessageFactory\n \n _ = PloneMessageFactory = MessageFactory("plone")\n \ndiff --git a/src/plone/volto/default_homepage/default.py b/src/plone/volto/default_homepage/default.py\nindex dba86e9..5f3166f 100644\n--- a/src/plone/volto/default_homepage/default.py\n+++ b/src/plone/volto/default_homepage/default.py\n@@ -1,5 +1,6 @@\n from datetime import datetime\n \n+\n default_home = {\n     "draftJS": {\n         "title": "Welcome to Volto!",\ndiff --git a/src/plone/volto/default_homepage/demo.py b/src/plone/volto/default_homepage/demo.py\nindex bc7ff09..34922e0 100644\n--- a/src/plone/volto/default_homepage/demo.py\n+++ b/src/plone/volto/default_homepage/demo.py\n@@ -1,5 +1,6 @@\n from datetime import datetime\n \n+\n demo_home_page = {\n     "draftJS": {\n         "title": "Welcome to Plone 6!",\ndiff --git a/src/plone/volto/patches.py b/src/plone/volto/patches.py\nindex 24ba8c7..86128ad 100644\n--- a/src/plone/volto/patches.py\n+++ b/src/plone/volto/patches.py\n@@ -1,10 +1,10 @@\n from plone.app.upgrade.utils import alias_module\n-from plone.volto import logger\n+from plone.registry.interfaces import IRegistry\n+from plone.rest.interfaces import IAPIRequest\n from plone.volto import content\n from plone.volto import interfaces\n+from plone.volto import logger\n from plone.volto.interfaces import IVoltoSettings\n-from plone.registry.interfaces import IRegistry\n-from plone.rest.interfaces import IAPIRequest\n from Products.SiteErrorLog.SiteErrorLog import _rate_restrict_burst\n from Products.SiteErrorLog.SiteErrorLog import _rate_restrict_period\n from Products.SiteErrorLog.SiteErrorLog import _rate_restrict_pool\ndiff --git a/src/plone/volto/profiles.zcml b/src/plone/volto/profiles.zcml\nindex b5c8ef3..60e759f 100644\n--- a/src/plone/volto/profiles.zcml\n+++ b/src/plone/volto/profiles.zcml\n@@ -29,7 +29,7 @@\n       description="Creates a default page for the site"\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n       directory="profiles/homepage"\n-      post_handler=".setuphandlers.create_default_homepage_draftjs"\n+      post_handler=".setuphandlers.create_default_homepage"\n       />\n \n   <genericsetup:registerProfile\ndiff --git a/src/plone/volto/profiles/coresandbox/diff_tool.xml b/src/plone/volto/profiles/coresandbox/diff_tool.xml\nindex fd83ec9..1245eee 100644\n--- a/src/plone/volto/profiles/coresandbox/diff_tool.xml\n+++ b/src/plone/volto/profiles/coresandbox/diff_tool.xml\n@@ -2,7 +2,9 @@\n <object>\n   <difftypes>\n     <type portal_type="example">\n-      <field name="any" difftype="Compound Diff for Dexterity types"/>\n+      <field difftype="Compound Diff for Dexterity types"\n+             name="any"\n+      />\n     </type>\n   </difftypes>\n-</object>\n\\ No newline at end of file\n+</object>\ndiff --git a/src/plone/volto/profiles/coresandbox/metadata.xml b/src/plone/volto/profiles/coresandbox/metadata.xml\nindex cae22a3..27e17a3 100644\n--- a/src/plone/volto/profiles/coresandbox/metadata.xml\n+++ b/src/plone/volto/profiles/coresandbox/metadata.xml\n@@ -1,6 +1,6 @@\n <metadata>\n- <version>1000</version>\n- <dependencies>\n-   <dependency>profile-plone.volto:default</dependency>\n- </dependencies>\n+  <version>1000</version>\n+  <dependencies>\n+    <dependency>profile-plone.volto:default</dependency>\n+  </dependencies>\n </metadata>\ndiff --git a/src/plone/volto/profiles/coresandbox/repositorytool.xml b/src/plone/volto/profiles/coresandbox/repositorytool.xml\nindex 5889d93..1799d9b 100644\n--- a/src/plone/volto/profiles/coresandbox/repositorytool.xml\n+++ b/src/plone/volto/profiles/coresandbox/repositorytool.xml\n@@ -2,9 +2,8 @@\n <repositorytool>\n   <policymap>\n     <type name="example">\n-      <policy name="at_edit_autoversion"/>\n-      <policy name="version_on_revert"/>\n+      <policy name="at_edit_autoversion" />\n+      <policy name="version_on_revert" />\n     </type>\n   </policymap>\n </repositorytool>\n-\ndiff --git a/src/plone/volto/profiles/coresandbox/types.xml b/src/plone/volto/profiles/coresandbox/types.xml\nindex d7f2fba..fd3127e 100644\n--- a/src/plone/volto/profiles/coresandbox/types.xml\n+++ b/src/plone/volto/profiles/coresandbox/types.xml\n@@ -1,4 +1,8 @@\n <?xml version="1.0"?>\n-<object name="portal_types" meta_type="Plone Types Tool">\n- <object name="example" meta_type="Dexterity FTI"/>\n+<object meta_type="Plone Types Tool"\n+        name="portal_types"\n+>\n+  <object meta_type="Dexterity FTI"\n+          name="example"\n+  />\n </object>\ndiff --git a/src/plone/volto/profiles/coresandbox/types/example.xml b/src/plone/volto/profiles/coresandbox/types/example.xml\nindex 630ea2b..df795b2 100644\n--- a/src/plone/volto/profiles/coresandbox/types/example.xml\n+++ b/src/plone/volto/profiles/coresandbox/types/example.xml\n@@ -1,49 +1,78 @@\n <?xml version="1.0"?>\n-<object name="example" meta_type="Dexterity FTI" i18n:domain="plone"\n-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n- <property name="title" i18n:translate="">Example</property>\n- <property name="description" i18n:translate=""></property>\n- <property name="icon_expr"></property>\n- <property name="factory">example</property>\n- <property name="add_view_expr">string:${folder_url}/++add++example</property>\n- <property name="link_target"></property>\n- <property name="immediate_view">view</property>\n- <property name="global_allow">True</property>\n- <property name="filter_content_types">False</property>\n- <property name="allowed_content_types" />\n- <property name="allow_discussion">False</property>\n- <property name="default_view">view</property>\n- <property name="view_methods">\n-  <element value="view"/>\n- </property>\n- <property name="default_view_fallback">False</property>\n- <property name="add_permission">cmf.AddPortalContent</property>\n- <property name="klass">plone.volto.coresandbox.example.Example</property>\n- <property name="schema">plone.volto.coresandbox.example.IExample</property>\n- <property name="behaviors">\n-  <element value="plone.namefromtitle" />\n-  <element value="plone.allowdiscussion" />\n-  <element value="plone.excludefromnavigation" />\n-  <element value="plone.shortname" />\n-  <element value="plone.versioning" />\n-  <element value="plone.tableofcontents" />\n-  <element value="plone.locking" />\n- </property>\n- <property name="model_source"></property>\n- <property name="model_file"></property>\n- <property name="schema_policy">dexterity</property>\n- <alias from="(Default)" to="(dynamic view)"/>\n- <alias from="edit" to="@@edit"/>\n- <alias from="sharing" to="@@sharing"/>\n- <alias from="view" to="(selected layout)"/>\n- <action title="View" action_id="view" category="object" condition_expr=""\n-    description="" icon_expr="" link_target="" url_expr="string:${object_url}"\n-    visible="True">\n-  <permission value="View"/>\n- </action>\n- <action title="Edit" action_id="edit" category="object" condition_expr=""\n-    description="" icon_expr="" link_target=""\n-    url_expr="string:${object_url}/edit" visible="True">\n-  <permission value="Modify portal content"/>\n- </action>\n+<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+        meta_type="Dexterity FTI"\n+        name="example"\n+        i18n:domain="plone"\n+>\n+  <property name="title"\n+            i18n:translate=""\n+  >Example</property>\n+  <property name="description"\n+            i18n:translate=""\n+  />\n+  <property name="icon_expr" />\n+  <property name="factory">example</property>\n+  <property name="add_view_expr">string:${folder_url}/++add++example</property>\n+  <property name="link_target" />\n+  <property name="immediate_view">view</property>\n+  <property name="global_allow">True</property>\n+  <property name="filter_content_types">False</property>\n+  <property name="allowed_content_types" />\n+  <property name="allow_discussion">False</property>\n+  <property name="default_view">view</property>\n+  <property name="view_methods">\n+    <element value="view" />\n+  </property>\n+  <property name="default_view_fallback">False</property>\n+  <property name="add_permission">cmf.AddPortalContent</property>\n+  <property name="klass">plone.volto.coresandbox.example.Example</property>\n+  <property name="schema">plone.volto.coresandbox.example.IExample</property>\n+  <property name="behaviors">\n+    <element value="plone.namefromtitle" />\n+    <element value="plone.allowdiscussion" />\n+    <element value="plone.excludefromnavigation" />\n+    <element value="plone.shortname" />\n+    <element value="plone.versioning" />\n+    <element value="plone.tableofcontents" />\n+    <element value="plone.locking" />\n+  </property>\n+  <property name="model_source" />\n+  <property name="model_file" />\n+  <property name="schema_policy">dexterity</property>\n+  <alias from="(Default)"\n+         to="(dynamic view)"\n+  />\n+  <alias from="edit"\n+         to="@@edit"\n+  />\n+  <alias from="sharing"\n+         to="@@sharing"\n+  />\n+  <alias from="view"\n+         to="(selected layout)"\n+  />\n+  <action action_id="view"\n+          category="object"\n+          condition_expr=""\n+          description=""\n+          icon_expr=""\n+          link_target=""\n+          title="View"\n+          url_expr="string:${object_url}"\n+          visible="True"\n+  >\n+    <permission value="View" />\n+  </action>\n+  <action action_id="edit"\n+          category="object"\n+          condition_expr=""\n+          description=""\n+          icon_expr=""\n+          link_target=""\n+          title="Edit"\n+          url_expr="string:${object_url}/edit"\n+          visible="True"\n+  >\n+    <permission value="Modify portal content" />\n+  </action>\n </object>\ndiff --git a/src/plone/volto/profiles/default/browserlayer.xml b/src/plone/volto/profiles/default/browserlayer.xml\nindex a148165..950e873 100644\n--- a/src/plone/volto/profiles/default/browserlayer.xml\n+++ b/src/plone/volto/profiles/default/browserlayer.xml\n@@ -1,7 +1,6 @@\n <?xml version="1.0" encoding="UTF-8"?>\n <layers>\n-  <layer\n-      name="plone.volto"\n-      interface="plone.volto.interfaces.IPloneVoltoCoreLayer"\n-      />\n+  <layer interface="plone.volto.interfaces.IPloneVoltoCoreLayer"\n+         name="plone.volto"\n+  />\n </layers>\ndiff --git a/src/plone/volto/profiles/default/catalog.xml b/src/plone/volto/profiles/default/catalog.xml\nindex 5394562..4c0e009 100644\n--- a/src/plone/volto/profiles/default/catalog.xml\n+++ b/src/plone/volto/profiles/default/catalog.xml\n@@ -2,6 +2,6 @@\n <object name="portal_catalog">\n   <column value="nav_title" />\n   <column value="head_title" />\n-  <column value="hasPreviewImage"/>\n-  <column value="image_field"/>\n+  <column value="hasPreviewImage" />\n+  <column value="image_field" />\n </object>\ndiff --git a/src/plone/volto/profiles/default/controlpanel.xml b/src/plone/volto/profiles/default/controlpanel.xml\nindex f58682c..42f1a79 100644\n--- a/src/plone/volto/profiles/default/controlpanel.xml\n+++ b/src/plone/volto/profiles/default/controlpanel.xml\n@@ -1,11 +1,19 @@\n <?xml version="1.0"?>\n-<object name="portal_controlpanel" meta_type="Plone Control Panel Tool"\n-    xmlns:i18n="http://xml.zope.org/namespaces/i18n" i18n:domain="plone">\n- <configlet title="Volto Settings" action_id="VoltoSettings" appId="VoltoSettings"\n-    category="plone-general" condition_expr=""\n-    icon_expr="string:$portal_url/product_icon.png"\n-    url_expr="string:${portal_url}/volto_settings"\n-    visible="True" i18n:attributes="title">\n-  <permission>Manage portal</permission>\n- </configlet>\n+<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+        meta_type="Plone Control Panel Tool"\n+        name="portal_controlpanel"\n+        i18n:domain="plone"\n+>\n+  <configlet action_id="VoltoSettings"\n+             appId="VoltoSettings"\n+             category="plone-general"\n+             condition_expr=""\n+             icon_expr="string:$portal_url/product_icon.png"\n+             title="Volto Settings"\n+             url_expr="string:${portal_url}/volto_settings"\n+             visible="True"\n+             i18n:attributes="title"\n+  >\n+    <permission>Manage portal</permission>\n+  </configlet>\n </object>\ndiff --git a/src/plone/volto/profiles/default/registry.xml b/src/plone/volto/profiles/default/registry.xml\nindex 08e8f7f..5136090 100644\n--- a/src/plone/volto/profiles/default/registry.xml\n+++ b/src/plone/volto/profiles/default/registry.xml\n@@ -1,43 +1,51 @@\n <?xml version=\'1.0\' encoding=\'UTF-8\'?>\n <registry>\n-  <records interface="Products.CMFPlone.interfaces.controlpanel.INavigationSchema" prefix="plone">\n+  <records interface="Products.CMFPlone.interfaces.controlpanel.INavigationSchema"\n+           prefix="plone"\n+  >\n     <value key="nonfolderish_tabs">False</value>\n   </records>\n \n   <!-- This is for the elements in the root, not show the current item in navigation-->\n-  <record name="plone.show_excluded_items" interface="Products.CMFPlone.interfaces.controlpanel.INavigationSchema" field="show_excluded_items">\n+  <record field="show_excluded_items"\n+          interface="Products.CMFPlone.interfaces.controlpanel.INavigationSchema"\n+          name="plone.show_excluded_items"\n+  >\n     <value>False</value>\n   </record>\n \n-  <records interface="plone.volto.interfaces.IVoltoSettings" prefix="volto">\n+  <records interface="plone.volto.interfaces.IVoltoSettings"\n+           prefix="volto"\n+  >\n   </records>\n \n-  <record \n-    name="plone.types_use_view_action_in_listings"\n-    interface="Products.CMFPlone.interfaces.controlpanel.ITypesSchema"\n-    field="types_use_view_action_in_listings"\n-    purge="true">\n-    <value></value>\n+  <record field="types_use_view_action_in_listings"\n+          interface="Products.CMFPlone.interfaces.controlpanel.ITypesSchema"\n+          name="plone.types_use_view_action_in_listings"\n+          purge="true"\n+  >\n+    <value />\n   </record>\n \n   <!-- Allowed sizes -->\n-  <record \n-    name="plone.allowed_sizes" \n-    interface="Products.CMFPlone.interfaces.controlpanel.IImagingSchema" \n-    field="allowed_sizes"\n-    purge="True"> <!-- Purge the existing ones! -->\n-      <value>\n-        <element>icon 32:32</element>\n-        <element>tile 64:64</element>\n-        <element>thumb 128:128</element>\n-        <element>mini 200:65536</element>\n-        <element>preview 400:65536</element>\n-        <element>teaser 600:65536</element>\n-        <element>large 800:65536</element>\n-        <element>larger 1000:65536</element>\n-        <element>great 1200:65536</element>\n-        <element>huge 1600:65536</element>      \n-      </value>\n+  <record field="allowed_sizes"\n+          interface="Products.CMFPlone.interfaces.controlpanel.IImagingSchema"\n+          name="plone.allowed_sizes"\n+          purge="True"\n+  >\n+    <!-- Purge the existing ones! -->\n+    <value>\n+      <element>icon 32:32</element>\n+      <element>tile 64:64</element>\n+      <element>thumb 128:128</element>\n+      <element>mini 200:65536</element>\n+      <element>preview 400:65536</element>\n+      <element>teaser 600:65536</element>\n+      <element>large 800:65536</element>\n+      <element>larger 1000:65536</element>\n+      <element>great 1200:65536</element>\n+      <element>huge 1600:65536</element>\n+    </value>\n   </record>\n \n </registry>\ndiff --git a/src/plone/volto/profiles/default/types.xml b/src/plone/volto/profiles/default/types.xml\ndeleted file mode 100644\nindex 7c70ee9..0000000\n--- a/src/plone/volto/profiles/default/types.xml\n+++ /dev/null\n@@ -1,9 +0,0 @@\n-<?xml version="1.0"?>\n-<object name="portal_types" meta_type="Plone Types Tool">\n-  <object name="Plone Site" />\n-  <object meta_type="Dexterity FTI" name="LRF" />\n-  <object meta_type="Dexterity FTI" name="Document" />\n-  <object meta_type="Dexterity FTI" name="Event" />\n-  <object meta_type="Dexterity FTI" name="News Item" />\n-  <object meta_type="Dexterity FTI" name="Collection" />\n-</object>\ndiff --git a/src/plone/volto/profiles/default/types/Collection.xml b/src/plone/volto/profiles/default/types/Collection.xml\nindex c7299d5..76189b2 100644\n--- a/src/plone/volto/profiles/default/types/Collection.xml\n+++ b/src/plone/volto/profiles/default/types/Collection.xml\n@@ -1,6 +1,9 @@\n <?xml version="1.0"?>\n-<object name="Collection" meta_type="Dexterity FTI" i18n:domain="plone"\n-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n+<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+        meta_type="Dexterity FTI"\n+        name="Collection"\n+        i18n:domain="plone"\n+>\n \n   <!-- Collections in Volto are disabled by default -->\n   <property name="global_allow">False</property>\ndiff --git a/src/plone/volto/profiles/default/types/Document.xml b/src/plone/volto/profiles/default/types/Document.xml\nindex 9fd8222..d7dec6e 100644\n--- a/src/plone/volto/profiles/default/types/Document.xml\n+++ b/src/plone/volto/profiles/default/types/Document.xml\n@@ -1,16 +1,16 @@\n <?xml version="1.0"?>\n-<object\n-    i18n:domain="plone"\n-    meta_type="Dexterity FTI"\n-    name="Document"\n-    xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n+<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+        meta_type="Dexterity FTI"\n+        name="Document"\n+        i18n:domain="plone"\n+>\n \n   <property name="filter_content_types">False</property>\n   <property name="klass">plone.volto.content.FolderishDocument</property>\n \n   <!-- Enabled behaviors -->\n   <property name="behaviors">\n-    <element value="plone.constraintypes"/>\n+    <element value="plone.constraintypes" />\n     <element value="plone.namefromtitle" />\n     <element value="plone.allowdiscussion" />\n     <element value="plone.excludefromnavigation" />\ndiff --git a/src/plone/volto/profiles/default/types/Event.xml b/src/plone/volto/profiles/default/types/Event.xml\nindex 54317cd..719ed05 100644\n--- a/src/plone/volto/profiles/default/types/Event.xml\n+++ b/src/plone/volto/profiles/default/types/Event.xml\n@@ -1,10 +1,15 @@\n <?xml version="1.0"?>\n-<object name="Event" meta_type="Dexterity FTI" i18n:domain="plone"\n-    xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n+<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+        meta_type="Dexterity FTI"\n+        name="Event"\n+        i18n:domain="plone"\n+>\n   <property name="filter_content_types">False</property>\n   <property name="klass">plone.volto.content.FolderishEvent</property>\n-  <property name="behaviors" purge="false">\n-    <element value="plone.constraintypes"/>\n+  <property name="behaviors"\n+            purge="false"\n+  >\n+    <element value="plone.constraintypes" />\n     <element value="volto.blocks" />\n     <element value="volto.preview_image" />\n   </property>\ndiff --git a/src/plone/volto/profiles/default/types/Folder.xml b/src/plone/volto/profiles/default/types/Folder.xml\nnew file mode 100644\nindex 0000000..bb845aa\n--- /dev/null\n+++ b/src/plone/volto/profiles/default/types/Folder.xml\n@@ -0,0 +1,11 @@\n+<?xml version="1.0"?>\n+<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+        meta_type="Dexterity FTI"\n+        name="Folder"\n+        i18n:domain="plone"\n+>\n+\n+  <!-- Folders in Volto are disabled by default -->\n+  <property name="global_allow">False</property>\n+\n+</object>\ndiff --git a/src/plone/volto/profiles/default/types/LRF.xml b/src/plone/volto/profiles/default/types/LRF.xml\nindex 4046b4c..424e8cf 100644\n--- a/src/plone/volto/profiles/default/types/LRF.xml\n+++ b/src/plone/volto/profiles/default/types/LRF.xml\n@@ -1,17 +1,22 @@\n <?xml version="1.0"?>\n-<object name="LRF" meta_type="Dexterity FTI" i18n:domain="plone"\n-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n+<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+        meta_type="Dexterity FTI"\n+        name="LRF"\n+        i18n:domain="plone"\n+>\n \n- <property name="global_allow">False</property>\n+  <property name="global_allow">False</property>\n \n- <property name="behaviors" purge="false">\n-  <element value="plone.dublincore"/>\n-  <element value="plone.namefromtitle"/>\n-  <element value="plone.constraintypes"/>\n-  <element value="plone.translatable" />\n-  <element value="plone.excludefromnavigation"/>\n-  <element value="plone.navigationroot"/>\n-  <element value="volto.blocks" />\n- </property>\n+  <property name="behaviors"\n+            purge="false"\n+  >\n+    <element value="plone.dublincore" />\n+    <element value="plone.namefromtitle" />\n+    <element value="plone.constraintypes" />\n+    <element value="plone.translatable" />\n+    <element value="plone.excludefromnavigation" />\n+    <element value="plone.navigationroot" />\n+    <element value="volto.blocks" />\n+  </property>\n \n </object>\ndiff --git a/src/plone/volto/profiles/default/types/News_Item.xml b/src/plone/volto/profiles/default/types/News_Item.xml\nindex 66066c3..5b3d6e3 100644\n--- a/src/plone/volto/profiles/default/types/News_Item.xml\n+++ b/src/plone/volto/profiles/default/types/News_Item.xml\n@@ -1,10 +1,15 @@\n <?xml version="1.0"?>\n-<object name="News Item" meta_type="Dexterity FTI" i18n:domain="plone"\n-    xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n+<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+        meta_type="Dexterity FTI"\n+        name="News Item"\n+        i18n:domain="plone"\n+>\n   <property name="filter_content_types">False</property>\n   <property name="klass">plone.volto.content.FolderishNewsItem</property>\n-  <property name="behaviors" purge="false">\n-    <element value="plone.constraintypes"/>\n+  <property name="behaviors"\n+            purge="false"\n+  >\n+    <element value="plone.constraintypes" />\n     <element value="volto.blocks" />\n   </property>\n </object>\ndiff --git a/src/plone/volto/profiles/demo/metadata.xml b/src/plone/volto/profiles/demo/metadata.xml\nindex 6b94925..27e17a3 100644\n--- a/src/plone/volto/profiles/demo/metadata.xml\n+++ b/src/plone/volto/profiles/demo/metadata.xml\n@@ -1,6 +1,6 @@\n <metadata>\n- <version>1000</version>\n- <dependencies>\n-  <dependency>profile-plone.volto:default</dependency>\n- </dependencies>\n+  <version>1000</version>\n+  <dependencies>\n+    <dependency>profile-plone.volto:default</dependency>\n+  </dependencies>\n </metadata>\ndiff --git a/src/plone/volto/profiles/demo/rolemap.xml b/src/plone/volto/profiles/demo/rolemap.xml\nindex 8ae156d..4ce6e3e 100644\n--- a/src/plone/volto/profiles/demo/rolemap.xml\n+++ b/src/plone/volto/profiles/demo/rolemap.xml\n@@ -1,10 +1,12 @@\n <rolemap>\n   <permissions>\n-    <permission name="Plone Site Setup: Overview" acquire="True">\n-      <role name="Anonymous"/>\n-      <role name="Member"/>\n-      <role name="Site Administrator"/>\n-      <role name="Manager"/>\n+    <permission acquire="True"\n+                name="Plone Site Setup: Overview"\n+    >\n+      <role name="Anonymous" />\n+      <role name="Member" />\n+      <role name="Site Administrator" />\n+      <role name="Manager" />\n     </permission>\n   </permissions>\n </rolemap>\ndiff --git a/src/plone/volto/profiles/homepage/metadata.xml b/src/plone/volto/profiles/homepage/metadata.xml\nindex 6b94925..27e17a3 100644\n--- a/src/plone/volto/profiles/homepage/metadata.xml\n+++ b/src/plone/volto/profiles/homepage/metadata.xml\n@@ -1,6 +1,6 @@\n <metadata>\n- <version>1000</version>\n- <dependencies>\n-  <dependency>profile-plone.volto:default</dependency>\n- </dependencies>\n+  <version>1000</version>\n+  <dependencies>\n+    <dependency>profile-plone.volto:default</dependency>\n+  </dependencies>\n </metadata>\ndiff --git a/src/plone/volto/profiles/multilingual/metadata.xml b/src/plone/volto/profiles/multilingual/metadata.xml\nindex d6396c1..ffa492f 100644\n--- a/src/plone/volto/profiles/multilingual/metadata.xml\n+++ b/src/plone/volto/profiles/multilingual/metadata.xml\n@@ -1,7 +1,7 @@\n <metadata>\n- <version>1000</version>\n- <dependencies>\n-   <dependency>profile-plone.volto:default</dependency>\n-   <dependency>profile-plone.app.multilingual:default</dependency>\n- </dependencies>\n+  <version>1000</version>\n+  <dependencies>\n+    <dependency>profile-plone.volto:default</dependency>\n+    <dependency>profile-plone.app.multilingual:default</dependency>\n+  </dependencies>\n </metadata>\ndiff --git a/src/plone/volto/profiles/multilingual/registry.xml b/src/plone/volto/profiles/multilingual/registry.xml\nindex 229cf6a..fdb0995 100644\n--- a/src/plone/volto/profiles/multilingual/registry.xml\n+++ b/src/plone/volto/profiles/multilingual/registry.xml\n@@ -1,10 +1,16 @@\n <?xml version=\'1.0\' encoding=\'UTF-8\'?>\n <registry>\n-  <record name="plone.default_language" interface="Products.CMFPlone.interfaces.controlpanel.ILanguageSchema" field="default_language">\n+  <record field="default_language"\n+          interface="Products.CMFPlone.interfaces.controlpanel.ILanguageSchema"\n+          name="plone.default_language"\n+  >\n     <value>en</value>\n   </record>\n   <!-- Set language to it/en -->\n-  <record name="plone.available_languages" interface="Products.CMFPlone.interfaces.controlpanel.ILanguageSchema" field="available_languages">\n+  <record field="available_languages"\n+          interface="Products.CMFPlone.interfaces.controlpanel.ILanguageSchema"\n+          name="plone.available_languages"\n+  >\n     <value>\n       <element>it</element>\n       <element>en</element>\ndiff --git a/src/plone/volto/profiles/richtext/metadata.xml b/src/plone/volto/profiles/richtext/metadata.xml\nindex 6b94925..27e17a3 100644\n--- a/src/plone/volto/profiles/richtext/metadata.xml\n+++ b/src/plone/volto/profiles/richtext/metadata.xml\n@@ -1,6 +1,6 @@\n <metadata>\n- <version>1000</version>\n- <dependencies>\n-  <dependency>profile-plone.volto:default</dependency>\n- </dependencies>\n+  <version>1000</version>\n+  <dependencies>\n+    <dependency>profile-plone.volto:default</dependency>\n+  </dependencies>\n </metadata>\ndiff --git a/src/plone/volto/profiles/richtext/types.xml b/src/plone/volto/profiles/richtext/types.xml\nindex 131bc1b..885235a 100644\n--- a/src/plone/volto/profiles/richtext/types.xml\n+++ b/src/plone/volto/profiles/richtext/types.xml\n@@ -1,4 +1,8 @@\n <?xml version="1.0"?>\n-<object name="portal_types" meta_type="Plone Types Tool">\n-  <object meta_type="Dexterity FTI" name="Document" />\n+<object meta_type="Plone Types Tool"\n+        name="portal_types"\n+>\n+  <object meta_type="Dexterity FTI"\n+          name="Document"\n+  />\n </object>\ndiff --git a/src/plone/volto/profiles/richtext/types/Document.xml b/src/plone/volto/profiles/richtext/types/Document.xml\nindex c679ce7..ec0a4f8 100644\n--- a/src/plone/volto/profiles/richtext/types/Document.xml\n+++ b/src/plone/volto/profiles/richtext/types/Document.xml\n@@ -1,12 +1,14 @@\n <?xml version="1.0"?>\n-<object\n-    i18n:domain="plone"\n-    meta_type="Dexterity FTI"\n-    name="Document"\n-    xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n+<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+        meta_type="Dexterity FTI"\n+        name="Document"\n+        i18n:domain="plone"\n+>\n \n   <!-- Enabled behaviors -->\n-  <property name="behaviors" purge="false">\n+  <property name="behaviors"\n+            purge="false"\n+  >\n     <element value="plone.richtext" />\n   </property>\n \ndiff --git a/src/plone/volto/profiles/uninstall/browserlayer.xml b/src/plone/volto/profiles/uninstall/browserlayer.xml\nindex 6f400a1..70d1c96 100644\n--- a/src/plone/volto/profiles/uninstall/browserlayer.xml\n+++ b/src/plone/volto/profiles/uninstall/browserlayer.xml\n@@ -1,7 +1,6 @@\n <?xml version="1.0" encoding="UTF-8"?>\n <layers>\n-  <layer\n-      name="plone.volto"\n-      remove="true"\n-      />\n+  <layer name="plone.volto"\n+         remove="true"\n+  />\n </layers>\ndiff --git a/src/plone/volto/scripts/add_image_field_metadata.py b/src/plone/volto/scripts/add_image_field_metadata.py\nindex bf4c032..ce2a860 100644\n--- a/src/plone/volto/scripts/add_image_field_metadata.py\n+++ b/src/plone/volto/scripts/add_image_field_metadata.py\n@@ -5,6 +5,7 @@\n from plone.app.contenttypes.behaviors.leadimage import ILeadImageBehavior\n from plone.volto.behaviors.preview import IPreview\n from plone.volto.scripts.utils import print_info\n+\n import transaction\n \n \ndiff --git a/src/plone/volto/scripts/auditblocks.py b/src/plone/volto/scripts/auditblocks.py\nindex efcc63a..d2c1d5c 100644\n--- a/src/plone/volto/scripts/auditblocks.py\n+++ b/src/plone/volto/scripts/auditblocks.py\n@@ -3,9 +3,9 @@\n     This script audits the blocks that you have in a site. If an optional block_name is\n     defined, then it returns where is that block defined.\n """\n+from collections import Counter\n from plone import api\n from plone.restapi.behaviors import IBlocks\n-from collections import Counter\n \n import sys\n \ndiff --git a/src/plone/volto/scripts/searchscalesinimageblocks.py b/src/plone/volto/scripts/searchscalesinimageblocks.py\nindex e298b80..1d7302c 100644\n--- a/src/plone/volto/scripts/searchscalesinimageblocks.py\n+++ b/src/plone/volto/scripts/searchscalesinimageblocks.py\n@@ -6,14 +6,15 @@\n     newservername can be empty to remove the server name\n """\n \n+from copy import deepcopy\n from plone import api\n from plone.restapi.behaviors import IBlocks\n-from copy import deepcopy\n \n import os\n import sys\n import transaction\n \n+\n PATH = "/Plone"\n \n # Make other scripts in this folder available\ndiff --git a/src/plone/volto/scripts/utils.py b/src/plone/volto/scripts/utils.py\nindex 6db0842..fa21829 100644\n--- a/src/plone/volto/scripts/utils.py\n+++ b/src/plone/volto/scripts/utils.py\n@@ -1,5 +1,5 @@\n-import logging\n import csv\n+import logging\n \n \n logger = logging.getLogger("plone.volto.scripts")\ndiff --git a/src/plone/volto/setuphandlers.py b/src/plone/volto/setuphandlers.py\nindex 552bc52..929fa8a 100644\n--- a/src/plone/volto/setuphandlers.py\n+++ b/src/plone/volto/setuphandlers.py\n@@ -34,7 +34,9 @@\n class HiddenProfiles(object):\n     def getNonInstallableProfiles(self):\n         """Hide uninstall profile from site-creation and quickinstaller"""\n-        return ["plone.volto:uninstall"]\n+        return [\n+            "plone.volto:uninstall",\n+        ]\n \n \n def post_install(context):\n@@ -62,7 +64,7 @@ def post_install_coresandbox(context):\n def post_install_multilingual(context):\n     """Post install script for multilingual fixture"""\n     enable_pam(context)\n-    create_default_homepage(context, block_type="draftJS")\n+    create_default_homepage(context)\n \n \n def enable_pam(portal):\ndiff --git a/src/plone/volto/summary.py b/src/plone/volto/summary.py\nindex 8b314e9..b2e5dda 100644\n--- a/src/plone/volto/summary.py\n+++ b/src/plone/volto/summary.py\n@@ -7,4 +7,5 @@ class JSONSummarySerializerMetadata:\n     def default_metadata_fields(self):\n         return {\n             "image_field",\n+            "image_scales",\n         }\ndiff --git a/src/plone/volto/testing.py b/src/plone/volto/testing.py\nindex 8565585..1e39aa6 100644\n--- a/src/plone/volto/testing.py\n+++ b/src/plone/volto/testing.py\n@@ -101,3 +101,37 @@ def setUpPloneSite(self, portal):\n     ),\n     name="PloneVoltoCoreSandboxLayer:AcceptanceTesting",\n )\n+\n+\n+class PloneVoltoMigrationLayer(PloneSandboxLayer):\n+\n+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n+\n+    def setUpZope(self, app, configurationContext):\n+        # Load any other ZCML that is required for your tests.\n+        # The z3c.autoinclude feature is disabled in the Plone fixture base\n+        # layer.\n+        self.loadZCML(package=plone.volto)\n+\n+    def setUpPloneSite(self, portal):\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n+        login(portal, TEST_USER_NAME)\n+        api.content.create(\n+            type="Document", id="front-page", title="Welcome", container=portal\n+        )\n+        logout()\n+\n+\n+PLONE_VOLTO_MIGRATION_FIXTURE = PloneVoltoMigrationLayer()\n+\n+\n+PLONE_VOLTO_MIGRATION_INTEGRATION_TESTING = IntegrationTesting(\n+    bases=(PLONE_VOLTO_MIGRATION_FIXTURE,),\n+    name="PloneVoltoMigrationLayer:IntegrationTesting",\n+)\n+\n+\n+PLONE_VOLTO_MIGRATION_FUNCTIONAL_TESTING = FunctionalTesting(\n+    bases=(PLONE_VOLTO_MIGRATION_FIXTURE, z2.ZSERVER_FIXTURE),\n+    name="PloneVoltoMigrationLayer:FunctionalTesting",\n+)\ndiff --git a/src/plone/volto/tests/test_coresandbox.py b/src/plone/volto/tests/test_coresandbox.py\nindex 2dd4143..4194e4a 100644\n--- a/src/plone/volto/tests/test_coresandbox.py\n+++ b/src/plone/volto/tests/test_coresandbox.py\n@@ -1,12 +1,11 @@\n # -*- coding: utf-8 -*-\n-from plone.volto.testing import PLONE_VOLTO_CORESANDBOX_FUNCTIONAL_TESTING\n-\n # from plone import api\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n from plone.restapi.testing import RelativeSession\n+from plone.volto.testing import PLONE_VOLTO_CORESANDBOX_FUNCTIONAL_TESTING\n \n # import transaction\n import unittest\ndiff --git a/src/plone/volto/tests/test_migrate_to_volto.py b/src/plone/volto/tests/test_migrate_to_volto.py\nnew file mode 100644\nindex 0000000..259d860\n--- /dev/null\n+++ b/src/plone/volto/tests/test_migrate_to_volto.py\n@@ -0,0 +1,293 @@\n+from Acquisition import aq_base\n+from plone import api\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.textfield.value import RichTextValue\n+from plone.volto.content import FolderishDocument\n+from plone.volto.content import FolderishEvent\n+from plone.volto.content import FolderishNewsItem\n+from plone.volto.testing import PLONE_VOLTO_MIGRATION_FUNCTIONAL_TESTING\n+from Products.CMFPlone.utils import get_installer\n+\n+import json\n+import responses\n+import unittest\n+\n+\n+try:\n+    from Products.CMFPlone.factory import PLONE60MARKER\n+\n+    PLONE60MARKER  # pyflakes\n+except ImportError:\n+    PLONE_6 = False\n+else:\n+    PLONE_6 = True\n+\n+\n+@unittest.skipIf(\n+    not PLONE_6,\n+    "This test is only intended to run for Plone 6",\n+)\n+class TestMigrateToVolto(unittest.TestCase):\n+\n+    layer = PLONE_VOLTO_MIGRATION_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal_url = self.portal.absolute_url()\n+\n+    def test_form_renders(self):\n+        view = self.portal.restrictedTraverse("@@migrate_to_volto")\n+        html = view()\n+        self.assertIn("Migrate to Volto", html)\n+\n+    def test_plonevolto_is_installed(self):\n+        installer = get_installer(self.portal, self.request)\n+        self.assertFalse(installer.is_product_installed("plone.volto"))\n+\n+        view = self.portal.restrictedTraverse("@@migrate_to_volto")\n+        self.request.form["form.submitted"] = True\n+        view()\n+\n+        self.assertTrue(installer.is_product_installed("plone.volto"))\n+\n+    def test_items_are_migrated_to_folderish(self):\n+        doc = api.content.create(\n+            container=self.portal,\n+            type="Document",\n+            id="doc",\n+            title="Document",\n+        )\n+        news = api.content.create(\n+            container=self.portal,\n+            type="News Item",\n+            id="news",\n+            title="News Item",\n+        )\n+        doc = api.content.create(\n+            container=self.portal,\n+            type="Event",\n+            id="event",\n+            title="Event",\n+        )\n+\n+        view = self.portal.restrictedTraverse("@@migrate_to_volto")\n+        self.request.form["form.submitted"] = True\n+        view()\n+\n+        doc = self.portal["doc"]\n+        self.assertEqual(doc.portal_type, "Document")\n+        self.assertTrue(aq_base(doc).isPrincipiaFolderish)\n+        self.assertEqual(doc.__class__, FolderishDocument)\n+\n+        news = self.portal["news"]\n+        self.assertEqual(news.portal_type, "News Item")\n+        self.assertTrue(aq_base(news).isPrincipiaFolderish)\n+        self.assertEqual(news.__class__, FolderishNewsItem)\n+\n+        event = self.portal["event"]\n+        self.assertEqual(event.portal_type, "Event")\n+        self.assertTrue(aq_base(event).isPrincipiaFolderish)\n+        self.assertEqual(event.__class__, FolderishEvent)\n+\n+        # Test that doc renders without error.\n+        doc.__call__()\n+        # We can add content\n+        news_in_doc = api.content.create(\n+            container=doc,\n+            type="News Item",\n+            id="news-in-doc",\n+            title="News in Doc",\n+        )\n+        self.assertEqual(news_in_doc.__class__, FolderishNewsItem)\n+\n+    def test_folders_are_migrated(self):\n+        api.content.create(\n+            container=self.portal,\n+            type="Folder",\n+            id="folder1",\n+            title="Folder 1",\n+        )\n+        self.assertEqual(self.portal["folder1"].portal_type, "Folder")\n+\n+        view = self.portal.restrictedTraverse("@@migrate_to_volto")\n+        self.request.form["form.submitted"] = True\n+        view()\n+\n+        doc = self.portal["folder1"]\n+        self.assertEqual(doc.portal_type, "Document")\n+        self.assertTrue(aq_base(doc).isPrincipiaFolderish)\n+        self.assertEqual(doc.__class__, FolderishDocument)\n+\n+    def test_collections_are_migrated(self):\n+        collection = api.content.create(\n+            container=self.portal,\n+            type="Collection",\n+            id="collection",\n+            title="Collection",\n+        )\n+        collection.query = [\n+            {\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.selection.any",\n+                "v": ["Document"],\n+            }\n+        ]\n+        collection.sort_on = "effective"\n+        collection.sort_reversed = False\n+        collection.limit = 100\n+        collection.item_count = 10\n+        self.assertEqual(self.portal["collection"].portal_type, "Collection")\n+\n+        view = self.portal.restrictedTraverse("@@migrate_to_volto")\n+        self.request.form["form.submitted"] = True\n+        view()\n+\n+        collection = self.portal["collection"]\n+        self.assertEqual(collection.portal_type, "Document")\n+        aq_base(collection).isPrincipiaFolderish\n+        self.assertTrue(aq_base(collection).isPrincipiaFolderish)\n+        self.assertEqual(collection.__class__, FolderishDocument)\n+\n+        listing = collection.blocks[collection.blocks_layout["items"][1]]\n+        self.assertEqual(listing["@type"], "listing")\n+        self.assertEqual(\n+            listing["querystring"],\n+            {\n+                "b_size": 10,\n+                "limit": 100,\n+                "query": [\n+                    {\n+                        "i": "portal_type",\n+                        "o": "plone.app.querystring.operation.selection.any",\n+                        "v": ["Document"],\n+                    }\n+                ],\n+                "sort_on": "effective",\n+                "sort_order_boolean": False,\n+            },\n+        )\n+\n+    def test_default_pages_are_migrated(self):\n+        folder = api.content.create(\n+            container=self.portal,\n+            type="Folder",\n+            id="folder",\n+            title="Folder",\n+        )\n+        api.content.create(\n+            container=folder,\n+            type="Document",\n+            id="doc",\n+            title="Document",\n+            description="This is a default page",\n+        )\n+        folder.setDefaultPage("doc")\n+\n+        view = self.portal.restrictedTraverse("@@migrate_to_volto")\n+        self.request.form["form.submitted"] = True\n+        view()\n+\n+        folder = self.portal["folder"]\n+        self.assertEqual(folder.portal_type, "Document")\n+        self.assertIsNone(getattr(folder, "default_page", None))\n+        self.assertEqual(folder.title, "Document")\n+        self.assertEqual(folder.description, "This is a default page")\n+\n+    def test_default_page_collections_are_migrated(self):\n+        folder = api.content.create(\n+            container=self.portal,\n+            type="Folder",\n+            id="folder",\n+            title="Folder",\n+        )\n+        api.content.create(\n+            container=folder,\n+            type="Collection",\n+            id="collection",\n+            title="Collection",\n+            description="This is a default collection",\n+        )\n+        folder.setDefaultPage("collection")\n+        self.assertIn("collection", folder.keys())\n+\n+        view = self.portal.restrictedTraverse("@@migrate_to_volto")\n+        self.request.form["form.submitted"] = True\n+        view()\n+\n+        folder = self.portal["folder"]\n+        self.assertEqual(folder.portal_type, "Document")\n+        self.assertIsNone(getattr(folder, "default_page", None))\n+        self.assertNotIn("collection", folder.keys())\n+        self.assertEqual(folder.title, "Collection")\n+        self.assertEqual(folder.description, "This is a default collection")\n+\n+    def test_default_page_news_are_not_migrated(self):\n+        folder = api.content.create(\n+            container=self.portal,\n+            type="Folder",\n+            id="folder",\n+            title="Folder",\n+            description="This of the folder",\n+        )\n+        api.content.create(\n+            container=folder,\n+            type="News Item",\n+            id="news",\n+            title="News Item",\n+            description="This is a default news item",\n+        )\n+        folder.setDefaultPage("news")\n+        self.assertIn("news", folder.keys())\n+\n+        view = self.portal.restrictedTraverse("@@migrate_to_volto")\n+        self.request.form["form.submitted"] = True\n+        view()\n+\n+        folder = self.portal["folder"]\n+        self.assertEqual(folder.portal_type, "Document")\n+        # the default_page attr is not removed\n+        self.assertEqual(folder.default_page, "news")\n+        self.assertEqual(folder.title, "Folder")\n+        self.assertEqual(folder.description, "This of the folder")\n+\n+        self.assertIn("news", folder.keys())\n+        self.assertEqual(folder["news"].portal_type, "News Item")\n+        self.assertEqual(folder["news"].title, "News Item")\n+        self.assertEqual(folder["news"].description, "This is a default news item")\n+\n+    @responses.activate\n+    def test_richtext_is_migrated(self):\n+        # Mock response of blocks-conversion-tool for slate\n+        html = "<p>I am <a href=\'https://www.plone.org\'>html</a> text</p>"\n+        result = json.loads(\n+            """{"data":[{"@type":"slate","value":[{"type":"p","children":[{"text":"I am "},{"type":"link","data":{"url":"https://www.plone.org","title":null,"target":null},"children":[{"text":"html"}]},{"text":" text"}]}],"plaintext":"I am html text"}]}"""\n+        )\n+        responses.add(\n+            responses.POST,\n+            url="http://localhost:5000/html",\n+            json=result,\n+        )\n+\n+        doc = api.content.create(\n+            container=self.portal,\n+            type="Document",\n+            id="doc",\n+            title="Document",\n+            text=RichTextValue(html, "text/plain", "text/html"),\n+        )\n+        self.assertTrue(isinstance(doc.text, RichTextValue))\n+\n+        view = self.portal.restrictedTraverse("@@migrate_to_volto")\n+        self.request.form["form.submitted"] = True\n+        self.request.form["slate"] = True\n+        view()\n+\n+        doc = self.portal["doc"]\n+        self.assertIsNone(doc.text)\n+        uuid = doc.blocks_layout["items"][1]\n+        block = doc.blocks[uuid]\n+        self.assertEqual(block["plaintext"], "I am html text")\ndiff --git a/src/plone/volto/tests/test_summary_serialization.py b/src/plone/volto/tests/test_summary_serialization.py\nnew file mode 100644\nindex 0000000..3eae4a9\n--- /dev/null\n+++ b/src/plone/volto/tests/test_summary_serialization.py\n@@ -0,0 +1,45 @@\n+from plone.dexterity.utils import createContentInContainer\n+from plone.restapi.interfaces import ISerializeToJsonSummary\n+from plone.volto.testing import PLONE_VOLTO_CORE_INTEGRATION_TESTING  # noqa\n+from Products.CMFCore.utils import getToolByName\n+from zope.component import getMultiAdapter\n+\n+import unittest\n+\n+\n+class TestSummarySerialization(unittest.TestCase):\n+\n+    layer = PLONE_VOLTO_CORE_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n+        self.doc1 = createContentInContainer(\n+            self.portal,\n+            "Document",\n+            id="doc1",\n+            title="Lorem Ipsum",\n+            description="Description",\n+        )\n+\n+    def test_brain_summary_contains_default_metadata_fields(self):\n+        brain = self.catalog(UID=self.doc1.UID())[0]\n+        summary = getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n+        self.assertIn("image_field", summary)\n+        self.assertIn("image_scales", summary)\n+\n+    def test_brain_summary_does_not_fail_if_column_not_there(self):\n+        # First remove the image_field column, if it exists\n+        column = "image_field"\n+        column_exists = column in self.catalog.schema()\n+        if column_exists:\n+            self.catalog.delColumn(column)\n+        try:\n+            brain = self.catalog(UID=self.doc1.UID())[0]\n+            summary = getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n+            self.assertIn("image_field", summary)\n+        finally:\n+            if column_exists:\n+                self.catalog.addColumn(column)\ndiff --git a/src/plone/volto/tests/test_transforms.py b/src/plone/volto/tests/test_transforms.py\nindex ebd9d6f..f79baf2 100644\n--- a/src/plone/volto/tests/test_transforms.py\n+++ b/src/plone/volto/tests/test_transforms.py\n@@ -1,14 +1,14 @@\n # -*- coding: utf-8 -*-\n \n from plone.dexterity.interfaces import IDexterityFTI\n+from plone.dexterity.utils import iterSchemata\n from plone.restapi.interfaces import IDeserializeFromJson\n-from plone.volto.testing import PLONE_VOLTO_CORE_INTEGRATION_TESTING  # noqa\n+from plone.restapi.interfaces import IFieldSerializer\n from plone.uuid.interfaces import IUUID\n+from plone.volto.testing import PLONE_VOLTO_CORE_INTEGRATION_TESTING  # noqa\n+from z3c.form.interfaces import IDataManager\n from zope.component import getMultiAdapter\n from zope.component import queryUtility\n-from plone.dexterity.utils import iterSchemata\n-from plone.restapi.interfaces import IFieldSerializer\n-from z3c.form.interfaces import IDataManager\n \n import json\n import unittest\n@@ -57,16 +57,26 @@ def test_deserialize_nested_fields_resolveuid(self):\n             blocks={\n                 "123": {\n                     "@type": "teaserGrid",\n-                    "columns": [{"href": self.portal.doc1.absolute_url()}],\n+                    "columns": [\n+                        {\n+                            "href": self.portal.doc1.absolute_url(),\n+                            "preview_image": self.image.absolute_url(),\n+                        }\n+                    ],\n                 }\n             }\n         )\n         doc_uid = IUUID(self.portal.doc1)\n+        image_uid = IUUID(self.image)\n \n         self.assertEqual(\n             self.portal.doc1.blocks["123"]["columns"][0]["href"],\n             "../resolveuid/{}".format(doc_uid),\n         )\n+        self.assertEqual(\n+            self.portal.doc1.blocks["123"]["columns"][0]["preview_image"],\n+            "../resolveuid/{}".format(image_uid),\n+        )\n \n     def test_deserialize_nested_fields_arrayed_resolveuid(self):\n         self.deserialize(\n@@ -102,12 +112,18 @@ def test_deserialize_nested_fields_arrayed_object_browser_resolveuid(self):\n \n     def test_serialize_nested_fields_resolveuid(self):\n         doc_uid = IUUID(self.portal.doc1)\n+        image_uid = IUUID(self.image)\n         value = self.serialize(\n             context=self.portal.doc1,\n             blocks={\n                 "123": {\n                     "@type": "teaserGrid",\n-                    "columns": [{"href": "../resolveuid/{}".format(doc_uid)}],\n+                    "columns": [\n+                        {\n+                            "href": "../resolveuid/{}".format(doc_uid),\n+                            "preview_image": "../resolveuid/{}".format(image_uid),\n+                        }\n+                    ],\n                 }\n             },\n         )\n@@ -115,6 +131,9 @@ def test_serialize_nested_fields_resolveuid(self):\n         self.assertEqual(\n             value["123"]["columns"][0]["href"], self.portal.doc1.absolute_url()\n         )\n+        self.assertEqual(\n+            value["123"]["columns"][0]["preview_image"], self.image.absolute_url()\n+        )\n \n     def test_serialize_nested_fields_arrayed_resolveuid(self):\n         doc_uid = IUUID(self.portal.doc1)\ndiff --git a/src/plone/volto/tests/test_upgrades.py b/src/plone/volto/tests/test_upgrades.py\nindex 75dfb24..5ddf714 100644\n--- a/src/plone/volto/tests/test_upgrades.py\n+++ b/src/plone/volto/tests/test_upgrades.py\n@@ -1,14 +1,14 @@\n # -*- coding: utf-8 -*-\n \n from plone.dexterity.interfaces import IDexterityFTI\n+from plone.dexterity.utils import iterSchemata\n from plone.restapi.interfaces import IDeserializeFromJson\n+from plone.restapi.interfaces import IFieldSerializer\n from plone.volto.testing import PLONE_VOLTO_CORE_INTEGRATION_TESTING  # noqa\n+from plone.volto.upgrades import from12to13_migrate_listings\n+from z3c.form.interfaces import IDataManager\n from zope.component import getMultiAdapter\n from zope.component import queryUtility\n-from plone.dexterity.utils import iterSchemata\n-from plone.restapi.interfaces import IFieldSerializer\n-from z3c.form.interfaces import IDataManager\n-from plone.volto.upgrades import from12to13_migrate_listings\n \n import json\n import unittest\ndiff --git a/src/plone/volto/transforms.py b/src/plone/volto/transforms.py\nindex 565f4e0..4a48077 100644\n--- a/src/plone/volto/transforms.py\n+++ b/src/plone/volto/transforms.py\n@@ -1,15 +1,13 @@\n-from copy import deepcopy\n from plone.restapi.behaviors import IBlocks\n-from plone.restapi.deserializer.blocks import path2uid\n+from plone.restapi.deserializer.blocks import ResolveUIDDeserializerBase\n from plone.restapi.interfaces import IBlockFieldDeserializationTransformer\n from plone.restapi.interfaces import IBlockFieldSerializationTransformer\n-from plone.restapi.serializer.blocks import uid_to_url\n+from plone.restapi.serializer.blocks import ResolveUIDSerializerBase\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n-from six import string_types\n from zope.component import adapter\n+from zope.component import subscribers\n from zope.interface import implementer\n from zope.publisher.interfaces.browser import IBrowserRequest\n-from zope.component import subscribers\n \n \n class NestedResolveUIDDeserializerBase(object):\n@@ -44,42 +42,12 @@ def _transform(self, block):\n         return block\n \n     def __call__(self, block):\n-        for column_name in ["columns", "hrefList", "slides"]:\n-            column_field = block.get(column_name, [])\n-            if block.get(column_name, False):\n-                for index, item in enumerate(column_field):\n-                    for field in ["url", "href", "preview_image"]:\n-                        link = item.get(field, "")\n-                        if link and isinstance(link, string_types):\n-                            block[column_name][index][field] = path2uid(\n-                                context=self.context, link=link\n-                            )\n-                        elif link and isinstance(link, list):\n-                            # Detect if it has an object inside with an "@id" key (object_widget)\n-                            if (\n-                                len(link) > 0\n-                                and isinstance(link[0], dict)\n-                                and "@id" in link[0]\n-                            ):\n-                                result = []\n-                                for itemlink in link:\n-                                    item_clone = deepcopy(itemlink)\n-                                    item_clone["@id"] = path2uid(\n-                                        context=self.context, link=item_clone["@id"]\n-                                    )\n-                                    result.append(item_clone)\n-\n-                                block[column_name][index][field] = result\n-                            else:\n-                                block[column_name][index][field] = [\n-                                    path2uid(context=self.context, link=linkitem)\n-                                    for linkitem in link\n-                                ]\n-\n-                    # Support for applying transforms to the subblocks in volto-blocks-grid\n-                    # TODO: It\'s the upper code needed any longer?\n-                    self._transform(item)\n-\n+        for nested_name in ["columns", "hrefList", "slides"]:\n+            nested_blocks = block.get(nested_name, [])\n+            if not isinstance(nested_blocks, list):\n+                continue\n+            for nested_block in nested_blocks:\n+                self._transform(nested_block)\n         return block\n \n \n@@ -120,41 +88,14 @@ def _transform(self, block):\n \n         return block\n \n-    def __call__(self, value):\n-        for column_name in ["columns", "hrefList", "slides"]:\n-            column_field = value.get(column_name, [])\n-            if value.get(column_name, False):\n-                for index, item in enumerate(column_field):\n-                    for field in ["url", "href", "preview_image"]:\n-                        if field in item.keys():\n-                            link = item.get(field, "")\n-                            if isinstance(link, string_types):\n-                                value[column_name][index][field] = uid_to_url(link)\n-                            elif isinstance(link, list):\n-                                if (\n-                                    len(link) > 0\n-                                    and isinstance(link[0], dict)\n-                                    and "@id" in link[0]\n-                                ):\n-                                    result = []\n-                                    for itemlink in link:\n-                                        item_clone = deepcopy(itemlink)\n-                                        item_clone["@id"] = uid_to_url(\n-                                            item_clone["@id"]\n-                                        )\n-                                        result.append(item_clone)\n-\n-                                    value[column_name][index][field] = result\n-                                else:\n-                                    value[column_name][index][field] = [\n-                                        uid_to_url(linkitem) for linkitem in link\n-                                    ]\n-\n-                    # Support for applying transforms to the subblocks in volto-blocks-grid\n-                    # TODO: It\'s the upper code needed any longer?\n-                    self._transform(item)\n-\n-        return value\n+    def __call__(self, block):\n+        for nested_name in ["columns", "hrefList", "slides"]:\n+            nested_blocks = block.get(nested_name, [])\n+            if not isinstance(nested_blocks, list):\n+                continue\n+            for nested_block in nested_blocks:\n+                self._transform(nested_block)\n+        return block\n \n \n @adapter(IBlocks, IBrowserRequest)\n@@ -167,3 +108,35 @@ class NestedResolveUIDSerializer(NestedResolveUIDSerializerBase):\n @implementer(IBlockFieldDeserializationTransformer)\n class NestedResolveUIDSerializerRoot(NestedResolveUIDSerializerBase):\n     """Deserializer for site root"""\n+\n+\n+@adapter(IBlocks, IBrowserRequest)\n+@implementer(IBlockFieldDeserializationTransformer)\n+class PreviewImageResolveUIDDeserializer(ResolveUIDDeserializerBase):\n+    """Deserializer for resolveuid in preview_image field"""\n+\n+    fields = ["preview_image"]\n+\n+\n+@adapter(IPloneSiteRoot, IBrowserRequest)\n+@implementer(IBlockFieldDeserializationTransformer)\n+class PreviewImageResolveUIDDeserializerRoot(ResolveUIDDeserializerBase):\n+    """Deserializer for resolveuid in preview_image field on site root"""\n+\n+    fields = ["preview_image"]\n+\n+\n+@adapter(IBlocks, IBrowserRequest)\n+@implementer(IBlockFieldSerializationTransformer)\n+class PreviewImageResolveUIDSerializer(ResolveUIDSerializerBase):\n+    """Serializer for resolveuid in preview_image field"""\n+\n+    fields = ["preview_image"]\n+\n+\n+@adapter(IPloneSiteRoot, IBrowserRequest)\n+@implementer(IBlockFieldSerializationTransformer)\n+class PreviewImageResolveUIDSerializerRoot(ResolveUIDSerializerBase):\n+    """Serializer for resolveuid in preview_image field on site root"""\n+\n+    fields = ["preview_image"]\ndiff --git a/src/plone/volto/vocabularies/subject.py b/src/plone/volto/vocabularies/subject.py\nindex 862e892..543b6af 100644\n--- a/src/plone/volto/vocabularies/subject.py\n+++ b/src/plone/volto/vocabularies/subject.py\n@@ -1,17 +1,16 @@\n+from BTrees.IIBTree import intersection\n+from plone.app.layout.navigation.root import getNavigationRootObject\n+from plone.app.vocabularies.terms import safe_encode\n+from plone.registry.interfaces import IRegistry\n+from Products.CMFCore.utils import getToolByName\n from zope.component import queryUtility\n+from zope.component.hooks import getSite\n from zope.interface import directlyProvides\n from zope.interface import implementer\n from zope.schema.interfaces import ITitledTokenizedTerm\n from zope.schema.interfaces import ITokenizedTerm\n from zope.schema.interfaces import IVocabularyFactory\n from zope.schema.vocabulary import SimpleVocabulary\n-from plone.app.layout.navigation.root import getNavigationRootObject\n-from plone.app.vocabularies.terms import safe_encode\n-from plone.registry.interfaces import IRegistry\n-from zope.component.hooks import getSite\n-\n-from BTrees.IIBTree import intersection\n-from Products.CMFCore.utils import getToolByName\n \n \n @implementer(ITokenizedTerm)\ndiff --git a/versions.cfg b/versions.cfg\nindex c346a2e..c748dfc 100644\n--- a/versions.cfg\n+++ b/versions.cfg\n@@ -37,3 +37,6 @@ sphinxcontrib-httpdomain = 1.5.0\n sphinx-rtd-theme = 0.2.4\n Jinja2 = 2.10\n Babel = 2.5.1\n+\n+# Test requirement\n+responses = 0.20.0\n\\ No newline at end of file\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2022-07-28T10:41:41+02:00
Author: Víctor Fernández de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.volto/commit/6d3a770786dd590a22dd434ebf15c81f8b40ef0e

Merge pull request #50 from plone/betterPLONE6check

Add better implementation of the PLONE6 check (cosmetic)

Files changed:
A news/59.feature
M src/plone/volto/setuphandlers.py
M src/plone/volto/tests/test_setup.py

b'diff --git a/news/59.feature b/news/59.feature\nnew file mode 100644\nindex 0000000..41fa38b\n--- /dev/null\n+++ b/news/59.feature\n@@ -0,0 +1,2 @@\n+- Add better implementation of the PLONE6 check (cosmetic)\n+   [sneridagh]\ndiff --git a/src/plone/volto/setuphandlers.py b/src/plone/volto/setuphandlers.py\nindex 20504a4..929fa8a 100644\n--- a/src/plone/volto/setuphandlers.py\n+++ b/src/plone/volto/setuphandlers.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from importlib import import_module\n from plone import api\n from plone.app.multilingual.browser.setup import SetupMultilingualSite\n from plone.app.multilingual.setuphandlers import enable_translatable_behavior\n@@ -17,14 +18,7 @@\n import transaction\n \n \n-try:\n-    from Products.CMFPlone.factory import PLONE60MARKER\n-\n-    PLONE60MARKER  # pyflakes\n-except ImportError:\n-    PLONE_6 = False\n-else:\n-    PLONE_6 = True\n+PLONE_6 = getattr(import_module("Products.CMFPlone.factory"), "PLONE60MARKER", False)\n \n logger = logging.getLogger("plone.volto")\n \ndiff --git a/src/plone/volto/tests/test_setup.py b/src/plone/volto/tests/test_setup.py\nindex 73e692f..8c4aede 100644\n--- a/src/plone/volto/tests/test_setup.py\n+++ b/src/plone/volto/tests/test_setup.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n """Setup tests for this package."""\n+from importlib import import_module\n from plone import api\n from plone.volto.testing import PLONE_VOLTO_CORE_INTEGRATION_TESTING  # noqa\n \n@@ -14,14 +15,7 @@\n import unittest\n \n \n-try:\n-    from Products.CMFPlone.factory import PLONE60MARKER\n-\n-    PLONE60MARKER  # pyflakes\n-except ImportError:\n-    PLONE_6 = False\n-else:\n-    PLONE_6 = True\n+PLONE_6 = getattr(import_module("Products.CMFPlone.factory"), "PLONE60MARKER", False)\n \n \n class TestSetup(unittest.TestCase):\n'

