Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-04-12T22:11:32+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/2b324c6c25683a6a807861c9866faca6d8ce992f

pyupgrade --py37-plus

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/upgrade/__init__.py
M plone/app/upgrade/bbb_qi/InstalledProduct.py
M plone/app/upgrade/bbb_qi/QuickInstallerTool.py
M plone/app/upgrade/bbb_qi/__init__.py
M plone/app/upgrade/bbb_qi/interfaces/__init__.py
M plone/app/upgrade/bbb_qi/interfaces/installable.py
M plone/app/upgrade/bbb_qi/interfaces/portal_quickinstaller.py
M plone/app/upgrade/tests/__init__.py
M plone/app/upgrade/tests/base.py
M plone/app/upgrade/tests/test_utils.py
M plone/app/upgrade/utils.py
M plone/app/upgrade/v52/__init__.py
M plone/app/upgrade/v52/alphas.py
M plone/app/upgrade/v52/betas.py
M plone/app/upgrade/v52/final.py
M plone/app/upgrade/v52/tests.py
M plone/app/upgrade/v60/__init__.py
M plone/app/upgrade/v60/alphas.py
M plone/app/upgrade/v60/tests.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af4..de40ea7c 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af4..de40ea7c 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/app/upgrade/__init__.py b/plone/app/upgrade/__init__.py\nindex de75665f..d7355247 100644\n--- a/plone/app/upgrade/__init__.py\n+++ b/plone/app/upgrade/__init__.py\n@@ -14,7 +14,7 @@\n     alias_module(\'Products.CMFPlone.QuickInstallerTool\', bbb_qi)\n \n \n-class HiddenProducts(object):\n+class HiddenProducts:\n     """This hides the upgrade profiles from the quick installer tool."""\n \n     def getNonInstallableProducts(self):\ndiff --git a/plone/app/upgrade/bbb_qi/InstalledProduct.py b/plone/app/upgrade/bbb_qi/InstalledProduct.py\nindex 148a6f03..397a17e6 100644\n--- a/plone/app/upgrade/bbb_qi/InstalledProduct.py\n+++ b/plone/app/upgrade/bbb_qi/InstalledProduct.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n # from Products.CMFQuickInstallerTool.interfaces.portal_quickinstaller import IInstalledProduct  # noqa\n # from zope.interface import implementer\ndiff --git a/plone/app/upgrade/bbb_qi/QuickInstallerTool.py b/plone/app/upgrade/bbb_qi/QuickInstallerTool.py\nindex dac4c160..8038a62b 100644\n--- a/plone/app/upgrade/bbb_qi/QuickInstallerTool.py\n+++ b/plone/app/upgrade/bbb_qi/QuickInstallerTool.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.ObjectManager import ObjectManager\n from OFS.SimpleItem import SimpleItem\n from Products.CMFCore.utils import UniqueObject\n@@ -8,7 +7,7 @@\n \n \n # @implementer(INonInstallable)\n-class HiddenProducts(object):\n+class HiddenProducts:\n \n     def getNonInstallableProducts(self):\n         # We can\'t really install ourselves: that would be weird.\ndiff --git a/plone/app/upgrade/bbb_qi/__init__.py b/plone/app/upgrade/bbb_qi/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/upgrade/bbb_qi/__init__.py\n+++ b/plone/app/upgrade/bbb_qi/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/upgrade/bbb_qi/interfaces/__init__.py b/plone/app/upgrade/bbb_qi/interfaces/__init__.py\nindex 68dfbe9a..ca97d74d 100644\n--- a/plone/app/upgrade/bbb_qi/interfaces/__init__.py\n+++ b/plone/app/upgrade/bbb_qi/interfaces/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .installable import INonInstallable\n from .portal_quickinstaller import IQuickInstallerTool\n \ndiff --git a/plone/app/upgrade/bbb_qi/interfaces/installable.py b/plone/app/upgrade/bbb_qi/interfaces/installable.py\nindex 6a485c45..ab8a2679 100644\n--- a/plone/app/upgrade/bbb_qi/interfaces/installable.py\n+++ b/plone/app/upgrade/bbb_qi/interfaces/installable.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \ndiff --git a/plone/app/upgrade/bbb_qi/interfaces/portal_quickinstaller.py b/plone/app/upgrade/bbb_qi/interfaces/portal_quickinstaller.py\nindex fdbda6bd..53a23ec0 100644\n--- a/plone/app/upgrade/bbb_qi/interfaces/portal_quickinstaller.py\n+++ b/plone/app/upgrade/bbb_qi/interfaces/portal_quickinstaller.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \ndiff --git a/plone/app/upgrade/tests/__init__.py b/plone/app/upgrade/tests/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/upgrade/tests/__init__.py\n+++ b/plone/app/upgrade/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/upgrade/tests/base.py b/plone/app/upgrade/tests/base.py\nindex 438d31ad..cf226d63 100644\n--- a/plone/app/upgrade/tests/base.py\n+++ b/plone/app/upgrade/tests/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from os.path import abspath\n from os.path import dirname\n from os.path import join\ndiff --git a/plone/app/upgrade/tests/test_utils.py b/plone/app/upgrade/tests/test_utils.py\nindex ac9506d0..55ee73cd 100644\n--- a/plone/app/upgrade/tests/test_utils.py\n+++ b/plone/app/upgrade/tests/test_utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.upgrade import utils\n from plone.app.upgrade.tests.base import MigrationTest\n from Products.CMFCore.utils import getToolByName\n@@ -27,13 +26,13 @@ def layers_in_selection(selection_name):\n         self.assertEqual(\n             len(skins.keys()),\n             len(existing),\n-            msg=\'Skink difference is: {0}\'.format(list(difference)))\n+            msg=f\'Skink difference is: {list(difference)}\')\n         difference = set(layers_in_selection(selection)) ^ set(\n             existing_layers_in_selection)\n         self.assertEqual(\n             len(layers_in_selection(selection)),\n             len(existing_layers_in_selection),\n-            msg=\'Layer difference is: {0}\'.format(list(difference)))\n+            msg=f\'Layer difference is: {list(difference)}\')\n \n         # A second cleanup should also do nothing.  We used to rename\n         # plone_styles to classic_styles on the first run, which would get\n@@ -55,7 +54,7 @@ def layers_in_selection(selection_name):\n         registerDirectory(skin_name, globals(), subdirs=1)\n         # Add the DirectoryView object to portal_skins.\n         directory_info = DirectoryView(\n-            skin_name, reg_key=\'plone.app.upgrade.tests:{0}\'.format(skin_name))\n+            skin_name, reg_key=f\'plone.app.upgrade.tests:{skin_name}\')\n         skins._setObject(skin_name, directory_info)\n \n         # Add its sub skins to a skin selection.\ndiff --git a/plone/app/upgrade/utils.py b/plone/app/upgrade/utils.py\nindex 41c4ea08..0b650799 100644\n--- a/plone/app/upgrade/utils.py\n+++ b/plone/app/upgrade/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.base.utils import get_installer\n from Products.CMFCore.DirectoryView import _dirreg\n@@ -71,7 +70,7 @@ def saveCloneActions(actionprovider):\n         # Stumbled across ancient dictionary actions\n         if not base_hasattr(actionprovider, \'_convertActions\'):\n             return False, (\n-                "Can\'t convert actions of {0}! Jumping to next "\n+                "Can\'t convert actions of {}! Jumping to next "\n                 \'action.\'.format(actionprovider.getId()), logging.ERROR)\n         else:\n             actionprovider._convertActions()\n@@ -234,7 +233,7 @@ def unregisterSteps(context, import_steps=None, export_steps=None):\n     registry = context.getImportStepRegistry()\n     persistent_steps = registry.listSteps()\n     zcml_steps = _import_step_registry.listSteps()\n-    duplicated = set([s for s in persistent_steps if s in zcml_steps])\n+    duplicated = {s for s in persistent_steps if s in zcml_steps}\n     remove = duplicated.union(import_steps)\n     for step in remove:\n         if step in registry._registered:\n@@ -242,7 +241,7 @@ def unregisterSteps(context, import_steps=None, export_steps=None):\n     registry = context.getExportStepRegistry()\n     persistent_steps = registry.listSteps()\n     zcml_steps = _export_step_registry.listSteps()\n-    duplicated = set([s for s in persistent_steps if s in zcml_steps])\n+    duplicated = {s for s in persistent_steps if s in zcml_steps}\n     remove = duplicated.union(export_steps)\n     for step in remove:\n         if step in registry._registered:\ndiff --git a/plone/app/upgrade/v52/__init__.py b/plone/app/upgrade/v52/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/upgrade/v52/__init__.py\n+++ b/plone/app/upgrade/v52/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/upgrade/v52/alphas.py b/plone/app/upgrade/v52/alphas.py\nindex b5af78d1..6a36c3e6 100644\n--- a/plone/app/upgrade/v52/alphas.py\n+++ b/plone/app/upgrade/v52/alphas.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from BTrees.OOBTree import OOBTree\n from plone.app.upgrade.utils import cleanUpSkinsTool\n from plone.app.upgrade.utils import loadMigrationProfile\n@@ -20,8 +19,8 @@ def cleanup_resources():\n     record = \'plone.bundles/plone-legacy.resources\'\n     resources = registry.records[record]\n \n-    if u\'jquery-highlightsearchterms\' in resources.value:\n-        resources.value.remove(u\'jquery-highlightsearchterms\')\n+    if \'jquery-highlightsearchterms\' in resources.value:\n+        resources.value.remove(\'jquery-highlightsearchterms\')\n \n \n def migrate_gopipindex(context):\n@@ -49,10 +48,10 @@ def rebuild_memberdata(context):\n     for member in ms_tool.searchForMembers():\n         try:\n             md = MemberData(member, md_tool)\n-            logger.info(u\'Updated memberdata for {}\'.format(member))\n+            logger.info(f\'Updated memberdata for {member}\')\n         # If we can\'t create a MemberData record for this member, skip it\n         except Exception as e:\n-            logger.info(u\'Skip broken memberdata for {}: {}\'.format(member, e))\n+            logger.info(f\'Skip broken memberdata for {member}: {e}\')\n             continue\n         md_tool.registerMemberData(md._md, md.getId())\n \ndiff --git a/plone/app/upgrade/v52/betas.py b/plone/app/upgrade/v52/betas.py\nindex b80a0c28..baa8e83c 100644\n--- a/plone/app/upgrade/v52/betas.py\n+++ b/plone/app/upgrade/v52/betas.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.upgrade.utils import cleanUpToolRegistry\n from plone.app.upgrade.utils import loadMigrationProfile\n from plone.base.utils import get_installer\ndiff --git a/plone/app/upgrade/v52/final.py b/plone/app/upgrade/v52/final.py\nindex 0b52c623..aa9908f4 100644\n--- a/plone/app/upgrade/v52/final.py\n+++ b/plone/app/upgrade/v52/final.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.Permissions import view\n from plone.app.upgrade.utils import loadMigrationProfile\n from plone.base.utils import get_installer\n@@ -78,7 +77,7 @@ def move_dotted_to_named_behaviors(context):\n                 )\n         fti.behaviors = tuple(behaviors)\n         logger.info(\n-            u\'Converted dotted behaviors of {ct} to named behaviors.\'.format(\n+            \'Converted dotted behaviors of {ct} to named behaviors.\'.format(\n                 ct=safe_unicode(fti.title),\n             ),\n         )\n@@ -120,7 +119,7 @@ def change_interface_on_lang_registry_records(context):\n         if record is _marker:\n             continue\n         logger.info(\n-            "Change registry key \'{0}\' to new interface.".format(old_key)\n+            f"Change registry key \'{old_key}\' to new interface."\n         )\n         record.field.interfaceName = NEW_PREFIX\n \ndiff --git a/plone/app/upgrade/v52/tests.py b/plone/app/upgrade/v52/tests.py\nindex 296a1532..d8f46282 100644\n--- a/plone/app/upgrade/v52/tests.py\n+++ b/plone/app/upgrade/v52/tests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from DateTime import DateTime\n from pkg_resources import get_distribution\n from pkg_resources import parse_version\n@@ -106,7 +105,7 @@ def test_current_site_logo(self):\n         self.assertIsInstance(record.field, field.Bytes)\n         self.assertIsNone(record.value)\n         with self.assertRaises(WrongType):\n-            record.value = u"abc"\n+            record.value = "abc"\n         record.value = b"ABC"\n         self.assertEqual(record.value, b"ABC")\n         # Migrating does nothing.\n@@ -191,7 +190,7 @@ class ITest(Interface):\n             testfield = schema.ASCII()\n \n         self.registry.registerInterface(ITest)\n-        record_name = "{}.testfield".format(ITest.__identifier__)\n+        record_name = f"{ITest.__identifier__}.testfield"\n         record = self.registry.records[record_name]\n         record.value = "native string"\n         self.assertIsInstance(record.field, field.ASCII)\ndiff --git a/plone/app/upgrade/v60/__init__.py b/plone/app/upgrade/v60/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/upgrade/v60/__init__.py\n+++ b/plone/app/upgrade/v60/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/upgrade/v60/alphas.py b/plone/app/upgrade/v60/alphas.py\nindex 8fcff6ce..f5c27c48 100644\n--- a/plone/app/upgrade/v60/alphas.py\n+++ b/plone/app/upgrade/v60/alphas.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.upgrade.utils import loadMigrationProfile\n from plone.base.utils import get_installer\n from plone.dexterity.fti import DexterityFTI\n@@ -177,11 +176,11 @@ def cleanup_resources_and_bundles_in_registry(context=None):\n         for removed_key in removed_keys:\n             if key.startswith(removed_key):\n                 to_delete.append(key)\n-                logger.debug(u"Removed record {}".format(key))\n+                logger.debug(f"Removed record {key}")\n                 break\n     for key in to_delete:\n         del registry.records[key]\n-    logger.info(u"Removed {} records from registry".format(len(to_delete)))\n+    logger.info(f"Removed {len(to_delete)} records from registry")\n \n     # make sure they are all gone\n     try:\n@@ -218,7 +217,7 @@ def cleanup_resources_and_bundles_in_registry(context=None):\n     for name in removed_bundles:\n         if name in bundles:\n             del bundles[name]\n-            logger.info(u"Removed bundle {}".format(name))\n+            logger.info(f"Removed bundle {name}")\n \n     # Remove deprecated bundle fields\n     removed_fields = [\n@@ -236,10 +235,10 @@ def cleanup_resources_and_bundles_in_registry(context=None):\n         for removed_field in removed_fields:\n             if key.startswith("plone.bundles/") and key.endswith(removed_field):\n                 to_delete.append(key)\n-                logger.debug(u"Removed record {}".format(key))\n+                logger.debug(f"Removed record {key}")\n     for key in to_delete:\n         del registry.records[key]\n-    logger.info(u"Removed {} deprecated bundle attributes from registry".format(len(to_delete)))\n+    logger.info(f"Removed {len(to_delete)} deprecated bundle attributes from registry")\n \n     # local default controlpanel icons\n     loadMigrationProfile(context, "profile-Products.CMFPlone:plone", steps=["controlpanel"])\ndiff --git a/plone/app/upgrade/v60/tests.py b/plone/app/upgrade/v60/tests.py\nindex a54e4c20..78ca73e5 100644\n--- a/plone/app/upgrade/v60/tests.py\n+++ b/plone/app/upgrade/v60/tests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import PLONE_INTEGRATION_TESTING\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-04-12T22:11:41+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/45572889ba57938636fadae7c9d41bd6d8966bfa

isort5

Files changed:
M plone/app/upgrade/bbb_qi/InstalledProduct.py
M plone/app/upgrade/bbb_qi/QuickInstallerTool.py
M plone/app/upgrade/tests/test_upgrade.py
M plone/app/upgrade/tests/test_utils.py
M plone/app/upgrade/v52/betas.py
M plone/app/upgrade/v52/tests.py

b"diff --git a/plone/app/upgrade/bbb_qi/InstalledProduct.py b/plone/app/upgrade/bbb_qi/InstalledProduct.py\nindex 397a17e6..2933a1fd 100644\n--- a/plone/app/upgrade/bbb_qi/InstalledProduct.py\n+++ b/plone/app/upgrade/bbb_qi/InstalledProduct.py\n@@ -1,4 +1,6 @@\n from OFS.SimpleItem import SimpleItem\n+\n+\n # from Products.CMFQuickInstallerTool.interfaces.portal_quickinstaller import IInstalledProduct  # noqa\n # from zope.interface import implementer\n \ndiff --git a/plone/app/upgrade/bbb_qi/QuickInstallerTool.py b/plone/app/upgrade/bbb_qi/QuickInstallerTool.py\nindex 8038a62b..a6ba7afd 100644\n--- a/plone/app/upgrade/bbb_qi/QuickInstallerTool.py\n+++ b/plone/app/upgrade/bbb_qi/QuickInstallerTool.py\n@@ -1,6 +1,8 @@\n from OFS.ObjectManager import ObjectManager\n from OFS.SimpleItem import SimpleItem\n from Products.CMFCore.utils import UniqueObject\n+\n+\n # from Products.CMFQuickInstallerTool.interfaces import INonInstallable\n # from Products.CMFQuickInstallerTool.interfaces import IQuickInstallerTool\n # from zope.interface import implementer\ndiff --git a/plone/app/upgrade/tests/test_upgrade.py b/plone/app/upgrade/tests/test_upgrade.py\nindex 25d5bbb8..4f5b3f21 100644\n--- a/plone/app/upgrade/tests/test_upgrade.py\n+++ b/plone/app/upgrade/tests/test_upgrade.py\n@@ -2,7 +2,6 @@\n from plone.app.upgrade.utils import version_match\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.factory import _DEFAULT_PROFILE\n-\n from unittest import mock\n \n \n@@ -71,7 +70,8 @@ def testDoUpgrades(self):\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestUpgrade))\n     return suite\ndiff --git a/plone/app/upgrade/tests/test_utils.py b/plone/app/upgrade/tests/test_utils.py\nindex 55ee73cd..0361adcb 100644\n--- a/plone/app/upgrade/tests/test_utils.py\n+++ b/plone/app/upgrade/tests/test_utils.py\n@@ -75,7 +75,8 @@ def layers_in_selection(selection_name):\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestUtils))\n     return suite\ndiff --git a/plone/app/upgrade/v52/betas.py b/plone/app/upgrade/v52/betas.py\nindex baa8e83c..7bd04289 100644\n--- a/plone/app/upgrade/v52/betas.py\n+++ b/plone/app/upgrade/v52/betas.py\n@@ -9,6 +9,7 @@\n from zope.intid.interfaces import IIntIds\n from zope.intid.interfaces import IntIdMissingError\n from zope.intid.interfaces import ObjectMissingError\n+\n import logging\n import sys\n \ndiff --git a/plone/app/upgrade/v52/tests.py b/plone/app/upgrade/v52/tests.py\nindex d8f46282..d089e207 100644\n--- a/plone/app/upgrade/v52/tests.py\n+++ b/plone/app/upgrade/v52/tests.py\n@@ -154,8 +154,8 @@ def test_site_logo_text(self):\n     def test_migrate_record_from_ascii_to_bytes_with_prefix(self):\n         # This is the more general fixer from ASCII to Bytes.\n         from plone.app.upgrade.v52.final import migrate_record_from_ascii_to_bytes\n-        from zope.interface import Interface\n         from zope import schema\n+        from zope.interface import Interface\n \n         class ITest(Interface):\n             testfield = schema.ASCII()\n@@ -183,8 +183,8 @@ class ITest(Interface):\n     def test_migrate_record_from_ascii_to_bytes_without_prefix(self):\n         # This is the more general fixer from ASCII to Bytes.\n         from plone.app.upgrade.v52.final import migrate_record_from_ascii_to_bytes\n-        from zope.interface import Interface\n         from zope import schema\n+        from zope.interface import Interface\n \n         class ITest(Interface):\n             testfield = schema.ASCII()\n@@ -224,8 +224,9 @@ def setUp(self):\n         self.settings = registry.forInterface(IMarkupSchema, prefix='plone')\n \n     def test_migrate_markup_settings(self):\n-        from plone.app.upgrade.v52.final import \\\n-            move_markdown_transform_settings_to_registry\n+        from plone.app.upgrade.v52.final import (\n+            move_markdown_transform_settings_to_registry,\n+        )\n         self.pt.markdown_to_html._config['enabled_extensions'] = [\n             'markdown.extensions.fenced_code',\n             'markdown.extensions.nl2br',\n"

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-04-12T22:11:58+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/1783975b6ad9db73e390a840de6ee18b9c298990

black

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/upgrade/__init__.py
M plone/app/upgrade/bbb_qi/QuickInstallerTool.py
M plone/app/upgrade/bbb_qi/interfaces/__init__.py
M plone/app/upgrade/bbb_qi/interfaces/installable.py
M plone/app/upgrade/bbb_qi/interfaces/portal_quickinstaller.py
M plone/app/upgrade/tests/base.py
M plone/app/upgrade/tests/test_upgrade.py
M plone/app/upgrade/tests/test_utils.py
M plone/app/upgrade/utils.py
M plone/app/upgrade/v52/alphas.py
M plone/app/upgrade/v52/betas.py
M plone/app/upgrade/v52/final.py
M plone/app/upgrade/v52/tests.py
M plone/app/upgrade/v60/alphas.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7c..5284146e 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex de40ea7c..5284146e 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/upgrade/__init__.py b/plone/app/upgrade/__init__.py\nindex d7355247..35612617 100644\n--- a/plone/app/upgrade/__init__.py\n+++ b/plone/app/upgrade/__init__.py\n@@ -4,14 +4,14 @@\n \n \n try:\n-    pkg_resources.get_distribution(\'Products.CMFQuickInstallerTool\')\n+    pkg_resources.get_distribution("Products.CMFQuickInstallerTool")\n except pkg_resources.DistributionNotFound:\n     # The alias module helps when migrating to Plone 6.0.0a1.\n     # Remove when we no longer support upgrading from Plone 5.2.\n     from . import bbb_qi\n \n-    alias_module(\'Products.CMFQuickInstallerTool\', bbb_qi)\n-    alias_module(\'Products.CMFPlone.QuickInstallerTool\', bbb_qi)\n+    alias_module("Products.CMFQuickInstallerTool", bbb_qi)\n+    alias_module("Products.CMFPlone.QuickInstallerTool", bbb_qi)\n \n \n class HiddenProducts:\n@@ -19,8 +19,8 @@ class HiddenProducts:\n \n     def getNonInstallableProducts(self):\n         return [\n-            \'plone.app.upgrade.v52\',\n-            \'plone.app.upgrade.v60\',\n+            "plone.app.upgrade.v52",\n+            "plone.app.upgrade.v60",\n         ]\n \n     def getNonInstallableProfiles(self):\ndiff --git a/plone/app/upgrade/bbb_qi/QuickInstallerTool.py b/plone/app/upgrade/bbb_qi/QuickInstallerTool.py\nindex a6ba7afd..bc45d546 100644\n--- a/plone/app/upgrade/bbb_qi/QuickInstallerTool.py\n+++ b/plone/app/upgrade/bbb_qi/QuickInstallerTool.py\n@@ -10,15 +10,14 @@\n \n # @implementer(INonInstallable)\n class HiddenProducts:\n-\n     def getNonInstallableProducts(self):\n         # We can\'t really install ourselves: that would be weird.\n         # So hide ourselves from ourselves.\n-        return [\'CMFQuickInstallerTool\', \'Products.CMFQuickInstallerTool\']\n+        return ["CMFQuickInstallerTool", "Products.CMFQuickInstallerTool"]\n \n \n # @implementer(IQuickInstallerTool)\n class QuickInstallerTool(UniqueObject, ObjectManager, SimpleItem):\n \n-    meta_type = \'CMF QuickInstaller Tool\'\n-    id = \'portal_quickinstaller\'\n+    meta_type = "CMF QuickInstaller Tool"\n+    id = "portal_quickinstaller"\ndiff --git a/plone/app/upgrade/bbb_qi/interfaces/__init__.py b/plone/app/upgrade/bbb_qi/interfaces/__init__.py\nindex ca97d74d..6b79b0b7 100644\n--- a/plone/app/upgrade/bbb_qi/interfaces/__init__.py\n+++ b/plone/app/upgrade/bbb_qi/interfaces/__init__.py\n@@ -2,5 +2,5 @@\n from .portal_quickinstaller import IQuickInstallerTool\n \n \n-INonInstallable   # pyflakes\n-IQuickInstallerTool   # pyflakes\n+INonInstallable  # pyflakes\n+IQuickInstallerTool  # pyflakes\ndiff --git a/plone/app/upgrade/bbb_qi/interfaces/installable.py b/plone/app/upgrade/bbb_qi/interfaces/installable.py\nindex ab8a2679..ad1e159f 100644\n--- a/plone/app/upgrade/bbb_qi/interfaces/installable.py\n+++ b/plone/app/upgrade/bbb_qi/interfaces/installable.py\n@@ -2,8 +2,7 @@\n \n \n class INonInstallable(Interface):\n-\n     def getNonInstallableProducts():\n         """Returns a list of products that should not be available for\n-           installation.\n+        installation.\n         """\ndiff --git a/plone/app/upgrade/bbb_qi/interfaces/portal_quickinstaller.py b/plone/app/upgrade/bbb_qi/interfaces/portal_quickinstaller.py\nindex 53a23ec0..633038e4 100644\n--- a/plone/app/upgrade/bbb_qi/interfaces/portal_quickinstaller.py\n+++ b/plone/app/upgrade/bbb_qi/interfaces/portal_quickinstaller.py\n@@ -4,5 +4,6 @@\n class IQuickInstallerTool(Interface):\n     pass\n \n+\n class IInstalledProduct(Interface):\n     pass\ndiff --git a/plone/app/upgrade/tests/base.py b/plone/app/upgrade/tests/base.py\nindex cf226d63..3f1cab37 100644\n--- a/plone/app/upgrade/tests/base.py\n+++ b/plone/app/upgrade/tests/base.py\n@@ -31,8 +31,8 @@ class UpgradeTestCaseFixture(PloneSandboxLayer):\n \n UPGRADE_TEST_CASE_FIXTURE = UpgradeTestCaseFixture()\n UPGRADE_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PTC_FIXTURE, UPGRADE_TEST_CASE_FIXTURE),\n-    name=\'UpgradeTestCase:Functional\')\n+    bases=(PTC_FIXTURE, UPGRADE_TEST_CASE_FIXTURE), name="UpgradeTestCase:Functional"\n+)\n \n \n class MigrationTest(PloneTestCase):\n@@ -43,53 +43,54 @@ def removeActionFromTool(\n         self,\n         action_id,\n         category=None,\n-        action_provider=\'portal_actions\',\n+        action_provider="portal_actions",\n     ):\n         # Removes an action from portal_actions\n         tool = getToolByName(self.portal, action_provider)\n         if category is None:\n-            if action_id in tool.objectIds() and \\\n-               IActionInfo.providedBy(tool._getOb(action_id)):\n+            if action_id in tool.objectIds() and IActionInfo.providedBy(\n+                tool._getOb(action_id)\n+            ):\n                 tool._delOb(action_id)\n         elif (\n-            category in tool.objectIds() and\n-            IActionCategory.providedBy(tool._getOb(category)) and\n-            action_id in tool.objectIds() and\n-            IActionInfo.providedBy(tool._getOb(action_id))\n+            category in tool.objectIds()\n+            and IActionCategory.providedBy(tool._getOb(category))\n+            and action_id in tool.objectIds()\n+            and IActionInfo.providedBy(tool._getOb(action_id))\n         ):\n             tool._delOb(action_id)\n \n     def removeSiteProperty(self, property_id):\n         # Removes a site property from portal_properties\n-        tool = getToolByName(self.portal, \'portal_properties\')\n-        sheet = getattr(tool, \'site_properties\')\n+        tool = getToolByName(self.portal, "portal_properties")\n+        sheet = getattr(tool, "site_properties")\n         if sheet.hasProperty(property_id):\n             sheet.manage_delProperties([property_id])\n \n     def addSiteProperty(self, property_id):\n         # adds a site property to portal_properties\n-        tool = getToolByName(self.portal, \'portal_properties\')\n-        sheet = getattr(tool, \'site_properties\')\n+        tool = getToolByName(self.portal, "portal_properties")\n+        sheet = getattr(tool, "site_properties")\n         if not sheet.hasProperty(property_id):\n-            sheet.manage_addProperty(property_id, [], \'lines\')\n+            sheet.manage_addProperty(property_id, [], "lines")\n \n     def removeNavTreeProperty(self, property_id):\n         # Removes a navtree property from portal_properties\n-        tool = getToolByName(self.portal, \'portal_properties\')\n-        sheet = getattr(tool, \'navtree_properties\')\n+        tool = getToolByName(self.portal, "portal_properties")\n+        sheet = getattr(tool, "navtree_properties")\n         if sheet.hasProperty(property_id):\n             sheet.manage_delProperties([property_id])\n \n     def addNavTreeProperty(self, property_id):\n         # adds a navtree property to portal_properties\n-        tool = getToolByName(self.portal, \'portal_properties\')\n-        sheet = getattr(tool, \'navtree_properties\')\n+        tool = getToolByName(self.portal, "portal_properties")\n+        sheet = getattr(tool, "navtree_properties")\n         if not sheet.hasProperty(property_id):\n-            sheet.manage_addProperty(property_id, [], \'lines\')\n+            sheet.manage_addProperty(property_id, [], "lines")\n \n     def removeMemberdataProperty(self, property_id):\n         # Removes a memberdata property from portal_memberdata\n-        tool = getToolByName(self.portal, \'portal_memberdata\')\n+        tool = getToolByName(self.portal, "portal_memberdata")\n         if tool.hasProperty(property_id):\n             tool.manage_delProperties([property_id])\n \n@@ -99,33 +100,33 @@ def uninstallProduct(self, product_name):\n         if installer.is_product_installed(product_name):\n             installer.uninstall_product(product_name)\n \n-    def addSkinLayer(self, layer, skin=\'Plone Default\', pos=None):\n+    def addSkinLayer(self, layer, skin="Plone Default", pos=None):\n         # Adds a skin layer at pos. If pos is None, the layer is appended\n-        skins = getToolByName(self.portal, \'portal_skins\')\n+        skins = getToolByName(self.portal, "portal_skins")\n         path = skins.getSkinPath(skin)\n-        path = [x.strip() for x in path.split(\',\')]\n+        path = [x.strip() for x in path.split(",")]\n         if layer in path:\n             path.remove(layer)\n         if pos is None:\n             path.append(layer)\n         else:\n             path.insert(pos, layer)\n-        skins.addSkinSelection(skin, \',\'.join(path))\n+        skins.addSkinSelection(skin, ",".join(path))\n \n-    def removeSkinLayer(self, layer, skin=\'Plone Default\'):\n+    def removeSkinLayer(self, layer, skin="Plone Default"):\n         # Removes a skin layer from skin\n-        skins = getToolByName(self.portal, \'portal_skins\')\n+        skins = getToolByName(self.portal, "portal_skins")\n         path = skins.getSkinPath(skin)\n-        path = [x.strip() for x in path.split(\',\')]\n+        path = [x.strip() for x in path.split(",")]\n         if layer in path:\n             path.remove(layer)\n-            skins.addSkinSelection(skin, \',\'.join(path))\n+            skins.addSkinSelection(skin, ",".join(path))\n \n \n class FunctionalUpgradeTestCase(PloneTestCase):\n \n     _setup_fixture = 0\n-    site_id = \'test\'\n+    site_id = "test"\n \n     def afterSetUp(self):\n         self.loginAsPortalOwner()\n@@ -139,14 +140,14 @@ def beforeTearDown(self):\n         transaction.commit()\n \n     def importFile(self, context, name):\n-        path = join(abspath(dirname(context)), \'data\', name)\n+        path = join(abspath(dirname(context)), "data", name)\n         with warnings.catch_warnings():\n             self.app._importObjectFromFile(path, verify=0)\n \n     def migrate(self):\n         oldsite = getattr(self.app, self.site_id)\n         mig = oldsite.portal_migration\n-        components = getattr(oldsite, \'_components\', None)\n+        components = getattr(oldsite, "_components", None)\n         if components is not None:\n             setSite(oldsite)\n         result = mig.upgrade(swallow_errors=False)\n@@ -158,5 +159,5 @@ def export(self):\n         stool = oldsite.portal_setup\n         upgraded_export = stool.runAllExportSteps()\n \n-        upgraded = TarballImportContext(stool, upgraded_export[\'tarball\'])\n+        upgraded = TarballImportContext(stool, upgraded_export["tarball"])\n         return stool.compareConfigurations(upgraded, self.expected)\ndiff --git a/plone/app/upgrade/tests/test_upgrade.py b/plone/app/upgrade/tests/test_upgrade.py\nindex 4f5b3f21..bd12ec05 100644\n--- a/plone/app/upgrade/tests/test_upgrade.py\n+++ b/plone/app/upgrade/tests/test_upgrade.py\n@@ -6,9 +6,8 @@\n \n \n class TestUpgrade(MigrationTest):\n-\n     def afterSetUp(self):\n-        self.setup = getToolByName(self.portal, \'portal_setup\')\n+        self.setup = getToolByName(self.portal, "portal_setup")\n \n     def testListUpgradeSteps(self):\n         # There should be no upgrade steps from the current version\n@@ -18,49 +17,49 @@ def testListUpgradeSteps(self):\n     def testProfileVersion(self):\n         # The profile version for the base profile should be the same\n         # as the file system version and the instance version\n-        self.setup = getToolByName(self.portal, \'portal_setup\')\n+        self.setup = getToolByName(self.portal, "portal_setup")\n \n         current = self.setup.getVersionForProfile(_DEFAULT_PROFILE)\n-        current = tuple(current.split(\'.\'))\n+        current = tuple(current.split("."))\n         last = self.setup.getLastVersionForProfile(_DEFAULT_PROFILE)\n         self.assertEqual(last, current)\n \n-    @mock.patch(\'plone.app.upgrade.utils.plone_version\', \'5.0b1\')\n+    @mock.patch("plone.app.upgrade.utils.plone_version", "5.0b1")\n     def testVersionMatch(self):\n-        self.assertFalse(version_match(\'2.5\'))\n-        self.assertFalse(version_match(\'3.1b1\'))\n-        self.assertFalse(version_match(\'5.2.b1\'))\n-        self.assertTrue(version_match(\'5.0a3.dev0\'))\n-        self.assertTrue(version_match(\'5.0b1.dev0\'))\n-        self.assertTrue(version_match(\'5.0b3\'))\n-        self.assertTrue(version_match(\'5.0\'))\n+        self.assertFalse(version_match("2.5"))\n+        self.assertFalse(version_match("3.1b1"))\n+        self.assertFalse(version_match("5.2.b1"))\n+        self.assertTrue(version_match("5.0a3.dev0"))\n+        self.assertTrue(version_match("5.0b1.dev0"))\n+        self.assertTrue(version_match("5.0b3"))\n+        self.assertTrue(version_match("5.0"))\n \n     def testDoUpgrades(self):\n-        self.setRoles([\'Manager\'])\n+        self.setRoles(["Manager"])\n \n         # Python 3 is only supported on 5.2+.\n         # This means you can not upgrade from 5.1 or earlier.\n-        start_profile = \'5200\'\n+        start_profile = "5200"\n         self.setup.setLastVersionForProfile(_DEFAULT_PROFILE, start_profile)\n         upgrades = self.setup.listUpgrades(_DEFAULT_PROFILE)\n         self.assertTrue(len(upgrades) > 0)\n \n         request = self.portal.REQUEST\n-        request.form[\'profile_id\'] = _DEFAULT_PROFILE\n+        request.form["profile_id"] = _DEFAULT_PROFILE\n \n         steps = []\n         for u in upgrades:\n             if isinstance(u, list):\n-                steps.extend([s[\'id\'] for s in u])\n+                steps.extend([s["id"] for s in u])\n             else:\n-                steps.append(u[\'id\'])\n+                steps.append(u["id"])\n \n-        request.form[\'upgrades\'] = steps\n+        request.form["upgrades"] = steps\n         self.setup.manage_doUpgrades(request=request)\n \n         # And we have reached our current profile version\n         current = self.setup.getVersionForProfile(_DEFAULT_PROFILE)\n-        current = tuple(current.split(\'.\'))\n+        current = tuple(current.split("."))\n         last = self.setup.getLastVersionForProfile(_DEFAULT_PROFILE)\n         self.assertEqual(last, current)\n \n@@ -72,6 +71,7 @@ def testDoUpgrades(self):\n def test_suite():\n     from unittest import makeSuite\n     from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestUpgrade))\n     return suite\ndiff --git a/plone/app/upgrade/tests/test_utils.py b/plone/app/upgrade/tests/test_utils.py\nindex 0361adcb..cc63e605 100644\n--- a/plone/app/upgrade/tests/test_utils.py\n+++ b/plone/app/upgrade/tests/test_utils.py\n@@ -4,19 +4,19 @@\n \n \n class TestUtils(MigrationTest):\n-\n     def testCleanUpSkinsTool(self):\n         # This removes no longer existing layers from the skins tool and the\n         # skin selections.\n         from Products.CMFCore.DirectoryView import DirectoryView\n         from Products.CMFCore.DirectoryView import registerDirectory\n-        self.setRoles([\'Manager\'])\n-        skins = getToolByName(self.portal, \'portal_skins\')\n+\n+        self.setRoles(["Manager"])\n+        skins = getToolByName(self.portal, "portal_skins")\n         existing = skins.keys()\n-        selection = \'Plone Default\'\n+        selection = "Plone Default"\n \n         def layers_in_selection(selection_name):\n-            return skins.getSkinPath(selection_name).split(\',\')\n+            return skins.getSkinPath(selection_name).split(",")\n \n         existing_layers_in_selection = layers_in_selection(selection)\n \n@@ -26,13 +26,16 @@ def layers_in_selection(selection_name):\n         self.assertEqual(\n             len(skins.keys()),\n             len(existing),\n-            msg=f\'Skink difference is: {list(difference)}\')\n+            msg=f"Skink difference is: {list(difference)}",\n+        )\n         difference = set(layers_in_selection(selection)) ^ set(\n-            existing_layers_in_selection)\n+            existing_layers_in_selection\n+        )\n         self.assertEqual(\n             len(layers_in_selection(selection)),\n             len(existing_layers_in_selection),\n-            msg=f\'Layer difference is: {list(difference)}\')\n+            msg=f"Layer difference is: {list(difference)}",\n+        )\n \n         # A second cleanup should also do nothing.  We used to rename\n         # plone_styles to classic_styles on the first run, which would get\n@@ -40,8 +43,9 @@ def layers_in_selection(selection_name):\n         # is not available.\n         utils.cleanUpSkinsTool(self.portal)\n         self.assertEqual(len(skins.keys()), len(existing))\n-        self.assertEqual(len(layers_in_selection(selection)),\n-                         len(existing_layers_in_selection))\n+        self.assertEqual(\n+            len(layers_in_selection(selection)), len(existing_layers_in_selection)\n+        )\n \n         # Register some test skins layers.  Note: the current module name is\n         # taken from globals()[\'__name__\'], which is how registerDirectory\n@@ -49,34 +53,38 @@ def layers_in_selection(selection_name):\n         # to register any layer that is outside of the current directory or in\n         # a \'skins\' sub directory.  There is just too much crazyness in the\n         # api.  Better try to load some zcml in that case.\n-        skin_name = \'skin_test\'\n+        skin_name = "skin_test"\n         # Make it available for Zope.  This is what you would do in zcml.\n         registerDirectory(skin_name, globals(), subdirs=1)\n         # Add the DirectoryView object to portal_skins.\n         directory_info = DirectoryView(\n-            skin_name, reg_key=f\'plone.app.upgrade.tests:{skin_name}\')\n+            skin_name, reg_key=f"plone.app.upgrade.tests:{skin_name}"\n+        )\n         skins._setObject(skin_name, directory_info)\n \n         # Add its sub skins to a skin selection.\n-        self.addSkinLayer(\'skin_test/sub1\', skin=selection)\n-        self.addSkinLayer(\'skin_test/sub1/subsub1\', skin=selection)\n-        self.addSkinLayer(\'skin_test/sub2\', skin=selection)\n+        self.addSkinLayer("skin_test/sub1", skin=selection)\n+        self.addSkinLayer("skin_test/sub1/subsub1", skin=selection)\n+        self.addSkinLayer("skin_test/sub2", skin=selection)\n \n         # Did that work?\n         self.assertEqual(len(skins.keys()), len(existing) + 1)\n-        self.assertEqual(len(layers_in_selection(selection)),\n-                         len(existing_layers_in_selection) + 3)\n+        self.assertEqual(\n+            len(layers_in_selection(selection)), len(existing_layers_in_selection) + 3\n+        )\n \n         # Clean it up again.  Nothing should be removed.\n         utils.cleanUpSkinsTool(self.portal)\n         self.assertEqual(len(skins.keys()), len(existing) + 1)\n-        self.assertEqual(len(layers_in_selection(selection)),\n-                         len(existing_layers_in_selection) + 3)\n+        self.assertEqual(\n+            len(layers_in_selection(selection)), len(existing_layers_in_selection) + 3\n+        )\n \n \n def test_suite():\n     from unittest import makeSuite\n     from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestUtils))\n     return suite\ndiff --git a/plone/app/upgrade/utils.py b/plone/app/upgrade/utils.py\nindex 0b650799..db5255aa 100644\n--- a/plone/app/upgrade/utils.py\n+++ b/plone/app/upgrade/utils.py\n@@ -18,13 +18,13 @@\n \n _marker = []\n \n-logger = logging.getLogger(\'plone.app.upgrade\')\n+logger = logging.getLogger("plone.app.upgrade")\n \n-plone_version = pkg_resources.get_distribution(\'Products.CMFPlone\').version\n+plone_version = pkg_resources.get_distribution("Products.CMFPlone").version\n \n \n def version_match(target):\n-    """ Given, our versioning scheme is always major.minorANYTHING, where major\n+    """Given, our versioning scheme is always major.minorANYTHING, where major\n     and minor are single-digit numbers, we can compare versions as follows.\n     pkg_resources.parse_version is not compatible with our versioning scheme\n     (like \'5.0b1\') and also not compatible with the semver.org proposal\n@@ -35,12 +35,12 @@ def version_match(target):\n \n \n def null_upgrade_step(tool):\n-    """ This is a null upgrade, use it when nothing happens """\n+    """This is a null upgrade, use it when nothing happens"""\n     pass\n \n \n-def safeEditProperty(obj, key, value, data_type=\'string\'):\n-    """ An add or edit function, surprisingly useful :) """\n+def safeEditProperty(obj, key, value, data_type="string"):\n+    """An add or edit function, surprisingly useful :)"""\n     if obj.hasProperty(key):\n         obj._updateProperty(key, value)\n     else:\n@@ -60,7 +60,7 @@ def addLinesToProperty(obj, key, values):\n     else:\n         if not isinstance(values, list):\n             values = [values]\n-        obj._setProperty(key, values, \'lines\')\n+        obj._setProperty(key, values, "lines")\n \n \n def saveCloneActions(actionprovider):\n@@ -68,10 +68,12 @@ def saveCloneActions(actionprovider):\n         return True, actionprovider._cloneActions()\n     except AttributeError:\n         # Stumbled across ancient dictionary actions\n-        if not base_hasattr(actionprovider, \'_convertActions\'):\n+        if not base_hasattr(actionprovider, "_convertActions"):\n             return False, (\n                 "Can\'t convert actions of {}! Jumping to next "\n-                \'action.\'.format(actionprovider.getId()), logging.ERROR)\n+                "action.".format(actionprovider.getId()),\n+                logging.ERROR,\n+            )\n         else:\n             actionprovider._convertActions()\n             return True, actionprovider._cloneActions()\n@@ -85,10 +87,10 @@ def testSkinLayer(skinsTool, layer):\n     """\n     # code adapted from CMFCore.SkinsContainer.getSkinByPath\n     ob = aq_base(skinsTool)\n-    for name in layer.strip().split(\'/\'):\n+    for name in layer.strip().split("/"):\n         if not name:\n             continue\n-        if name.startswith(\'_\'):\n+        if name.startswith("_"):\n             return 0\n         ob = getattr(ob, name, None)\n         if ob is None:\n@@ -98,14 +100,14 @@ def testSkinLayer(skinsTool, layer):\n \n def cleanupSkinPath(portal, skinName, test=1):\n     """Remove invalid skin layers from skins"""\n-    skinstool = getToolByName(portal, \'portal_skins\')\n+    skinstool = getToolByName(portal, "portal_skins")\n     selections = skinstool._getSelections()\n-    old_path = selections[skinName].split(\',\')\n+    old_path = selections[skinName].split(",")\n     new_path = []\n     for layer in old_path:\n         if layer and testSkinLayer(skinstool, layer):\n             new_path.append(layer)\n-    skinstool.addSkinSelection(skinName, \',\'.join(new_path), test=test)\n+    skinstool.addSkinSelection(skinName, ",".join(new_path), test=test)\n \n \n def cleanUpSkinsTool(context):\n@@ -117,17 +119,17 @@ def cleanUpSkinsTool(context):\n \n     - Remove invalid skin layers from all skin selections.\n     """\n-    skins = getToolByName(context, \'portal_skins\')\n+    skins = getToolByName(context, "portal_skins")\n     # Remove directory views for directories missing on the filesystem\n     for name in skins.keys():\n         directory_view = skins.get(name)\n-        reg_key = getattr(directory_view, \'_dirpath\', None)\n+        reg_key = getattr(directory_view, "_dirpath", None)\n         if not reg_key:\n             # not a directory view, but a persistent folder\n             continue\n         try:\n             # Removed in CMF 2.3\n-            if getattr(_dirreg, \'getCurrentKeyFormat\', None):\n+            if getattr(_dirreg, "getCurrentKeyFormat", None):\n                 reg_key = _dirreg.getCurrentKeyFormat(reg_key)\n             _dirreg.getDirectoryInfo(reg_key)\n         except ValueError:\n@@ -138,19 +140,22 @@ def cleanUpSkinsTool(context):\n     # Remove no longer existing entries from skin selections\n     for layer, paths in skins.selections.items():\n         new_paths = []\n-        for name in paths.split(\',\'):\n+        for name in paths.split(","):\n             if name in existing:\n                 new_paths.append(name)\n-            elif \'/\' in name and testSkinLayer(skins, name):\n+            elif "/" in name and testSkinLayer(skins, name):\n                 new_paths.append(name)\n             else:\n-                logger.info(\'Removed no longer existing path %s \'\n-                            \'from skin selection %s.\', name, layer)\n-        skins.selections[layer] = \',\'.join(new_paths)\n+                logger.info(\n+                    "Removed no longer existing path %s " "from skin selection %s.",\n+                    name,\n+                    layer,\n+                )\n+        skins.selections[layer] = ",".join(new_paths)\n \n \n def cleanUpToolRegistry(context):\n-    portal = getToolByName(context, \'portal_url\').getPortalObject()\n+    portal = getToolByName(context, "portal_url").getPortalObject()\n     toolset = context.getToolsetRegistry()\n     required = toolset._required.copy()\n     existing = portal.keys()\n@@ -162,7 +167,7 @@ def cleanUpToolRegistry(context):\n             changed = True\n     if changed:\n         toolset._required = required\n-        logger.info(\'Cleaned up the toolset registry.\')\n+        logger.info("Cleaned up the toolset registry.")\n \n \n def installOrReinstallProduct(portal, product_name, out=None, hidden=False):\n@@ -174,36 +179,35 @@ def installOrReinstallProduct(portal, product_name, out=None, hidden=False):\n     installer = get_installer(portal)\n     if not installer.is_product_installed(product_name):\n         installer.install_product(product_name, allow_hidden=True)\n-        logger.info(\'Installed %s\', product_name)\n+        logger.info("Installed %s", product_name)\n     else:\n         installer.upgrade_product(product_name)\n-        logger.info(\'Upgraded %s\', product_name)\n+        logger.info("Upgraded %s", product_name)\n     # Refresh skins\n     portal.clearCurrentSkin()\n-    if getattr(portal, \'REQUEST\', None):\n+    if getattr(portal, "REQUEST", None):\n         portal.setupCurrentSkin(portal.REQUEST)\n \n \n def loadMigrationProfile(context, profile, steps=_marker):\n     if not ISetupTool.providedBy(context):\n-        context = getToolByName(context, \'portal_setup\')\n+        context = getToolByName(context, "portal_setup")\n     if steps is _marker:\n         context.runAllImportStepsFromProfile(profile, purge_old=False)\n     else:\n         for step in steps:\n-            context.runImportStepFromProfile(profile,\n-                                             step,\n-                                             run_dependencies=False,\n-                                             purge_old=False)\n+            context.runImportStepFromProfile(\n+                profile, step, run_dependencies=False, purge_old=False\n+            )\n \n \n def alias_module(name, target):\n-    parts = name.split(\'.\')\n+    parts = name.split(".")\n     i = 0\n     module = None\n     while i < len(parts) - 1:\n         i += 1\n-        module_name = \'.\'.join(parts[:i])\n+        module_name = ".".join(parts[:i])\n         try:\n             __import__(module_name)\n         except ImportError:\n@@ -215,7 +219,7 @@ def alias_module(name, target):\n \n     setattr(module, parts[-1], target)\n     # also make sure sys.modules is updated\n-    sys.modules[module_name + \'.\' + parts[-1]] = target\n+    sys.modules[module_name + "." + parts[-1]] = target\n \n \n def unregisterSteps(context, import_steps=None, export_steps=None):\n@@ -250,7 +254,7 @@ def unregisterSteps(context, import_steps=None, export_steps=None):\n \n \n def _types_with_empty_icons(context, typesToUpdate):\n-    ttool = getToolByName(context, \'portal_types\')\n+    ttool = getToolByName(context, "portal_types")\n     empty_icons = []\n     for name in typesToUpdate.keys():\n         fti = ttool.get(name)\n@@ -265,14 +269,14 @@ def _update_icon_in_single_brain(brain, typesToUpdate, getIconPos, metadata):\n     # if the old icon is a standard icon, we assume no customization\n     # has taken place and we can simply empty the getIcon metadata\n     # without loading the object\n-    new_value = \'\'\n+    new_value = ""\n     old_icons = typesToUpdate[brain.portal_type]\n     brain_icon = brain.getIcon\n     if brain_icon not in old_icons:\n         # Otherwise we need to ask the object\n-        new_value = \'\'\n+        new_value = ""\n         obj = brain.getObject()\n-        method = getattr(aq_base(obj), \'getIcon\', None)\n+        method = getattr(aq_base(obj), "getIcon", None)\n         if method is not None:\n             try:\n                 new_value = obj.getIcon\n@@ -281,7 +285,7 @@ def _update_icon_in_single_brain(brain, typesToUpdate, getIconPos, metadata):\n             except ConflictError:\n                 raise\n             except Exception:\n-                new_value = \'\'\n+                new_value = ""\n     if brain_icon != new_value:\n         rid = brain.getRID()\n         record = metadata[rid]\n@@ -302,22 +306,22 @@ def updateIconsInBrains(context, typesToUpdate=None):\n     main use case.\n     """\n     if not typesToUpdate:\n-        logger.warn(\'No typesToUpdate given for updateIconsInBrains.\')\n+        logger.warn("No typesToUpdate given for updateIconsInBrains.")\n         return\n \n-    catalog = getToolByName(context, \'portal_catalog\')\n-    logger.info(\'Updating `getIcon` metadata.\')\n+    catalog = getToolByName(context, "portal_catalog")\n+    logger.info("Updating `getIcon` metadata.")\n     search = catalog.unrestrictedSearchResults\n-    _catalog = getattr(catalog, \'_catalog\', None)\n+    _catalog = getattr(catalog, "_catalog", None)\n     getIconPos = None\n     if _catalog is not None:\n         metadata = _catalog.data\n-        getIconPos = _catalog.schema.get(\'getIcon\', None)\n+        getIconPos = _catalog.schema.get("getIcon", None)\n     empty_icons = _types_with_empty_icons(context, typesToUpdate)\n-    brains = search(portal_type=empty_icons, sort_on=\'path\')\n+    brains = search(portal_type=empty_icons, sort_on="path")\n     num_objects = len(brains)\n     pghandler = ZLogHandler(1000)\n-    pghandler.init(\'Updating getIcon metadata\', num_objects)\n+    pghandler.init("Updating getIcon metadata", num_objects)\n     i = 0\n     for brain in brains:\n         pghandler.report(i)\n@@ -325,8 +329,7 @@ def updateIconsInBrains(context, typesToUpdate=None):\n         if not brain_icon:\n             continue\n         if getIconPos is not None:\n-            _update_icon_in_single_brain(\n-                brain, typesToUpdate, getIconPos, metadata)\n+            _update_icon_in_single_brain(brain, typesToUpdate, getIconPos, metadata)\n         else:\n             # If we don\'t have a standard catalog tool, fall back to the\n             # official API\n@@ -336,15 +339,14 @@ def updateIconsInBrains(context, typesToUpdate=None):\n             # SearchableText\n             brain_path = brain.getPath()\n             try:\n-                catalog.catalog_object(\n-                    obj, brain_path, [\'id\'], True, pghandler)\n+                catalog.catalog_object(obj, brain_path, ["id"], True, pghandler)\n             except ConflictError:\n                 raise\n             except Exception:\n                 pass\n         i += 1\n     pghandler.finish()\n-    logger.info(\'Updated `getIcon` metadata.\')\n+    logger.info("Updated `getIcon` metadata.")\n \n \n def get_property(context, property_name, default_value=None):\ndiff --git a/plone/app/upgrade/v52/alphas.py b/plone/app/upgrade/v52/alphas.py\nindex 6a36c3e6..b048a88f 100644\n--- a/plone/app/upgrade/v52/alphas.py\n+++ b/plone/app/upgrade/v52/alphas.py\n@@ -11,24 +11,24 @@\n import logging\n \n \n-logger = logging.getLogger(\'plone.app.upgrade\')\n+logger = logging.getLogger("plone.app.upgrade")\n \n \n def cleanup_resources():\n     registry = getUtility(IRegistry)\n-    record = \'plone.bundles/plone-legacy.resources\'\n+    record = "plone.bundles/plone-legacy.resources"\n     resources = registry.records[record]\n \n-    if \'jquery-highlightsearchterms\' in resources.value:\n-        resources.value.remove(\'jquery-highlightsearchterms\')\n+    if "jquery-highlightsearchterms" in resources.value:\n+        resources.value.remove("jquery-highlightsearchterms")\n \n \n def migrate_gopipindex(context):\n     # GopipIndex class has moved from p.a.folder to p.folder\n     # just remove and reinstall the index\n-    catalog = getToolByName(context, \'portal_catalog\')\n-    catalog.manage_delIndex(\'getObjPositionInParent\')\n-    manage_addGopipIndex(catalog, \'getObjPositionInParent\')\n+    catalog = getToolByName(context, "portal_catalog")\n+    catalog.manage_delIndex("getObjPositionInParent")\n+    manage_addGopipIndex(catalog, "getObjPositionInParent")\n \n \n def rebuild_memberdata(context):\n@@ -38,20 +38,21 @@ def rebuild_memberdata(context):\n     # with new MemberData records that we get by creating them via a lookup of\n     # all members in portal_membership.\n     logger.info(\n-        \'Rebuilding member data information. This step can take a while if \'\n-        \'your site has many users.\')\n-    md_tool = getToolByName(context, \'portal_memberdata\')\n-    ms_tool = getToolByName(context, \'portal_membership\')\n+        "Rebuilding member data information. This step can take a while if "\n+        "your site has many users."\n+    )\n+    md_tool = getToolByName(context, "portal_memberdata")\n+    ms_tool = getToolByName(context, "portal_membership")\n     # We cannot access data in _members any more, therefore purge it\n     md_tool._members = OOBTree()\n     # Iterate over all existing members and add their data to the tool again\n     for member in ms_tool.searchForMembers():\n         try:\n             md = MemberData(member, md_tool)\n-            logger.info(f\'Updated memberdata for {member}\')\n+            logger.info(f"Updated memberdata for {member}")\n         # If we can\'t create a MemberData record for this member, skip it\n         except Exception as e:\n-            logger.info(f\'Skip broken memberdata for {member}: {e}\')\n+            logger.info(f"Skip broken memberdata for {member}: {e}")\n             continue\n         md_tool.registerMemberData(md._md, md.getId())\n \n@@ -60,12 +61,10 @@ def fix_core_behaviors_in_ftis(context):\n     # The behaviors for IRichText and ILeadImage have been renamed.\n     # All FTIs that use them must be updated accordingly\n     # See plone/plone.app.contenttypes#480\n-    types_tool = getToolByName(context, \'portal_types\')\n+    types_tool = getToolByName(context, "portal_types")\n     to_replace = {\n-        \'plone.app.contenttypes.behaviors.richtext.IRichText\':\n-            \'plone.app.contenttypes.behaviors.richtext.IRichTextBehavior\',\n-        \'plone.app.contenttypes.behaviors.leadimage.ILeadImage\':\n-            \'plone.app.contenttypes.behaviors.leadimage.ILeadImageBehavior\',\n+        "plone.app.contenttypes.behaviors.richtext.IRichText": "plone.app.contenttypes.behaviors.richtext.IRichTextBehavior",\n+        "plone.app.contenttypes.behaviors.leadimage.ILeadImage": "plone.app.contenttypes.behaviors.leadimage.ILeadImageBehavior",\n     }\n     ftis = types_tool.listTypeInfo()\n     for fti in ftis:\n@@ -85,8 +84,8 @@ def fix_core_behaviors_in_ftis(context):\n \n \n def to52alpha1(context):\n-    loadMigrationProfile(context, \'profile-plone.app.upgrade.v52:to52alpha1\')\n-    portal = getToolByName(context, \'portal_url\').getPortalObject()\n+    loadMigrationProfile(context, "profile-plone.app.upgrade.v52:to52alpha1")\n+    portal = getToolByName(context, "portal_url").getPortalObject()\n \n     cleanUpSkinsTool(portal)\n \ndiff --git a/plone/app/upgrade/v52/betas.py b/plone/app/upgrade/v52/betas.py\nindex 7bd04289..dd55b126 100644\n--- a/plone/app/upgrade/v52/betas.py\n+++ b/plone/app/upgrade/v52/betas.py\n@@ -14,34 +14,33 @@\n import sys\n \n \n-logger = logging.getLogger(\'plone.app.upgrade\')\n+logger = logging.getLogger("plone.app.upgrade")\n \n \n def add_exclude_from_nav_index(context):\n-    """Add exclude_from_nav index to the portal_catalog.\n-    """\n-    name = \'exclude_from_nav\'\n-    meta_type = \'BooleanIndex\'\n-    catalog = getToolByName(context, \'portal_catalog\')\n+    """Add exclude_from_nav index to the portal_catalog."""\n+    name = "exclude_from_nav"\n+    meta_type = "BooleanIndex"\n+    catalog = getToolByName(context, "portal_catalog")\n     indexes = catalog.indexes()\n     indexables = []\n     if name not in indexes:\n         catalog.addIndex(name, meta_type)\n         indexables.append(name)\n-        logger.info(\'Added %s for field %s.\', meta_type, name)\n+        logger.info("Added %s for field %s.", meta_type, name)\n     if len(indexables) > 0:\n-        logger.info(\'Indexing new indexes %s.\', \', \'.join(indexables))\n+        logger.info("Indexing new indexes %s.", ", ".join(indexables))\n         catalog.manage_reindexIndex(ids=indexables)\n \n \n def remove_legacy_resource_registries(context):\n     """Remove portal_css and portal_javascripts."""\n-    portal_url = getToolByName(context, \'portal_url\')\n+    portal_url = getToolByName(context, "portal_url")\n     portal = portal_url.getPortalObject()\n \n     tools_to_remove = [\n-        \'portal_css\',\n-        \'portal_javascripts\',\n+        "portal_css",\n+        "portal_javascripts",\n     ]\n \n     # remove obsolete tools\n@@ -54,13 +53,10 @@ def remove_legacy_resource_registries(context):\n \n \n def remove_interface_indexes_from_relations_catalog():\n-    """ remove unused interface indexes from relations catalog """\n-    logger.info(\'Removing unused interface indexes from relations catalog.\')\n+    """remove unused interface indexes from relations catalog"""\n+    logger.info("Removing unused interface indexes from relations catalog.")\n     catalog = component.queryUtility(ICatalog)\n-    indexes_to_remove = [\n-        \'from_interfaces_flattened\',\n-        \'to_interfaces_flattened\'\n-    ]\n+    indexes_to_remove = ["from_interfaces_flattened", "to_interfaces_flattened"]\n     for index_to_remove in indexes_to_remove:\n         if index_to_remove in catalog._name_TO_mapping:\n             catalog.removeValueIndex(index_to_remove)\n@@ -73,7 +69,7 @@ def remove_interface_indexes_from_relations_catalog():\n         try:\n             relation = catalog.resolveRelationToken(token)\n         except ObjectMissingError:\n-            logger.warning(\'Removed token with missing object.\')\n+            logger.warning("Removed token with missing object.")\n             catalog._relTokens.remove(token)\n             continue\n \n@@ -82,7 +78,7 @@ def remove_interface_indexes_from_relations_catalog():\n         catalog.unindex_doc(token)\n         empty += 1\n     if empty:\n-        logger.warning(\'Removed %s empty relations.\', empty)\n+        logger.warning("Removed %s empty relations.", empty)\n \n     # Get rid of broken relations, where intid no longer exists.\n     # Those broken need to be removed for a later zodbupdate.\n@@ -105,37 +101,40 @@ def remove_interface_indexes_from_relations_catalog():\n         try:\n             catalog.index(rel)\n         except IntIdMissingError:\n-            logger.warning(\'Broken relation removed.\')\n+            logger.warning("Broken relation removed.")\n     if added_rel_intids:\n-        logger.info(\'Registered %s extra relations in the intid utility.\', added_rel_intids)\n+        logger.info(\n+            "Registered %s extra relations in the intid utility.", added_rel_intids\n+        )\n \n \n class IResourceRegistriesSettings(Interface):\n-    """fake/mock interface to be able to remove non existing dotted path\n-    """\n+    """fake/mock interface to be able to remove non existing dotted path"""\n+\n     pass\n \n \n-FAKE_RR_PATH = "Products.ResourceRegistries.interfaces.settings." \\\n-               "IResourceRegistriesSettings"\n+FAKE_RR_PATH = (\n+    "Products.ResourceRegistries.interfaces.settings." "IResourceRegistriesSettings"\n+)\n \n \n def to52beta1(context):\n     # fake the old ResourceRegistries interface:\n-    fake_mods = FAKE_RR_PATH.split(\'.\')[:-1]\n+    fake_mods = FAKE_RR_PATH.split(".")[:-1]\n     parent = sys.modules[fake_mods[0]]\n     for idx in range(1, len(fake_mods)):\n-        mod_name = \'.\'.join(fake_mods[:idx + 1])\n+        mod_name = ".".join(fake_mods[: idx + 1])\n         mod_inst = ModuleType(mod_name)\n         if parent:\n             setattr(parent, fake_mods[idx], mod_inst)\n         sys.modules[mod_name] = parent = mod_inst\n     sys.modules[FAKE_RR_PATH] = IResourceRegistriesSettings\n-    setattr(parent, \'IResourceRegistriesSettings\', IResourceRegistriesSettings)\n+    setattr(parent, "IResourceRegistriesSettings", IResourceRegistriesSettings)\n     sys.modules[FAKE_RR_PATH]\n-    loadMigrationProfile(context, \'profile-plone.app.upgrade.v52:to52beta1\')\n+    loadMigrationProfile(context, "profile-plone.app.upgrade.v52:to52beta1")\n     for idx in range(1, len(fake_mods)):\n-        mod_name = \'.\'.join(fake_mods[:idx + 1])\n+        mod_name = ".".join(fake_mods[: idx + 1])\n         del sys.modules[mod_name]\n     del sys.modules[FAKE_RR_PATH]\n     delattr(sys.modules[fake_mods[0]], fake_mods[1])\n@@ -144,13 +143,13 @@ def to52beta1(context):\n     remove_interface_indexes_from_relations_catalog()\n     # Make sure plone.staticresources is installed\n     installer = get_installer(context)\n-    if not installer.is_product_installed(\'plone.staticresources\'):\n-        installer.install_product(\'plone.staticresources\')\n+    if not installer.is_product_installed("plone.staticresources"):\n+        installer.install_product("plone.staticresources")\n \n \n def to52rc1(context):\n-    loadMigrationProfile(context, \'profile-plone.app.upgrade.v52:to52rc1\')\n+    loadMigrationProfile(context, "profile-plone.app.upgrade.v52:to52rc1")\n     # Make sure plone.staticresources is installed\n     installer = get_installer(context)\n-    if not installer.is_product_installed(\'plone.staticresources\'):\n-        installer.install_product(\'plone.staticresources\')\n+    if not installer.is_product_installed("plone.staticresources"):\n+        installer.install_product("plone.staticresources")\ndiff --git a/plone/app/upgrade/v52/final.py b/plone/app/upgrade/v52/final.py\nindex aa9908f4..4f63d23f 100644\n--- a/plone/app/upgrade/v52/final.py\n+++ b/plone/app/upgrade/v52/final.py\n@@ -13,7 +13,7 @@\n import logging\n \n \n-logger = logging.getLogger(\'plone.app.upgrade\')\n+logger = logging.getLogger("plone.app.upgrade")\n \n \n def rebuild_redirections(context):\n@@ -24,18 +24,17 @@ def rebuild_redirections(context):\n     from plone.app.redirector.interfaces import IRedirectionStorage\n \n     storage = getUtility(IRedirectionStorage)\n-    if not hasattr(storage, \'_rebuild\'):\n+    if not hasattr(storage, "_rebuild"):\n         logger.warning(\n-            \'Not rebuilding redirections: \'\n-            \'IRedirectionStorage misses the _rebuild method. \'\n+            "Not rebuilding redirections: "\n+            "IRedirectionStorage misses the _rebuild method. "\n         )\n         return\n     logger.info(\n-        \'Starting rebuild of redirections to \'\n-        \'add date and manual information.\'\n+        "Starting rebuild of redirections to " "add date and manual information."\n     )\n     storage._rebuild()\n-    logger.info(\'Done rebuilding redirections.\')\n+    logger.info("Done rebuilding redirections.")\n \n \n def move_dotted_to_named_behaviors(context):\n@@ -43,7 +42,7 @@ def move_dotted_to_named_behaviors(context):\n     from plone.behavior.registration import lookup_behavior_registration\n     from plone.dexterity.interfaces import IDexterityFTI\n \n-    ptt = getToolByName(context, \'portal_types\')\n+    ptt = getToolByName(context, "portal_types")\n \n     ftis = [fti for fti in ptt.objectValues() if IDexterityFTI.providedBy(fti)]\n \n@@ -71,22 +70,22 @@ def move_dotted_to_named_behaviors(context):\n                 behaviors.append(behavior)\n                 logger.info(\n                     \'"{dotted}" has no name registered. \'\n-                    \'kept it dotted.\'.format(\n+                    "kept it dotted.".format(\n                         dotted=behavior,\n                     ),\n                 )\n         fti.behaviors = tuple(behaviors)\n         logger.info(\n-            \'Converted dotted behaviors of {ct} to named behaviors.\'.format(\n+            "Converted dotted behaviors of {ct} to named behaviors.".format(\n                 ct=safe_unicode(fti.title),\n             ),\n         )\n \n-    logger.info(\'Done moving dotted to named behaviors.\')\n+    logger.info("Done moving dotted to named behaviors.")\n     # Make sure plone.staticresources is installed\n     installer = get_installer(context)\n-    if not installer.is_product_installed(\'plone.staticresources\'):\n-        installer.install_product(\'plone.staticresources\')\n+    if not installer.is_product_installed("plone.staticresources"):\n+        installer.install_product("plone.staticresources")\n \n \n KEYS_TO_CHANGE = [\n@@ -118,38 +117,35 @@ def change_interface_on_lang_registry_records(context):\n         record = registry.records.get(old_key, _marker)\n         if record is _marker:\n             continue\n-        logger.info(\n-            f"Change registry key \'{old_key}\' to new interface."\n-        )\n+        logger.info(f"Change registry key \'{old_key}\' to new interface.")\n         record.field.interfaceName = NEW_PREFIX\n \n \n def to521(context):\n     """5.2.0 -> 5.2.1"""\n-    loadMigrationProfile(context, \'profile-plone.app.upgrade.v52:to521\')\n+    loadMigrationProfile(context, "profile-plone.app.upgrade.v52:to521")\n     # Make sure plone.staticresources is installed\n     installer = get_installer(context)\n-    if not installer.is_product_installed(\'plone.staticresources\'):\n-        installer.install_product(\'plone.staticresources\')\n+    if not installer.is_product_installed("plone.staticresources"):\n+        installer.install_product("plone.staticresources")\n \n \n def to522(context):\n     """5.2.1 -> 5.2.2"""\n-    loadMigrationProfile(context, \'profile-plone.app.upgrade.v52:to522\')\n+    loadMigrationProfile(context, "profile-plone.app.upgrade.v52:to522")\n \n \n def move_markdown_transform_settings_to_registry(context):\n-    """Move markdown settings from portal_transforms to Plone registry.\n-    """\n+    """Move markdown settings from portal_transforms to Plone registry."""\n     registry = getUtility(IRegistry)\n     try:\n-        settings = registry.forInterface(IMarkupSchema, prefix=\'plone\')\n+        settings = registry.forInterface(IMarkupSchema, prefix="plone")\n     except KeyError:\n         # Catch case where markdown_extensions is not yet registered\n-        registry.registerInterface(IMarkupSchema, prefix=\'plone\')\n-        settings = registry.forInterface(IMarkupSchema, prefix=\'plone\')\n-    pt = getToolByName(context, \'portal_transforms\')\n-    extensions = pt.markdown_to_html._config.get(\'enabled_extensions\') or []\n+        registry.registerInterface(IMarkupSchema, prefix="plone")\n+        settings = registry.forInterface(IMarkupSchema, prefix="plone")\n+    pt = getToolByName(context, "portal_transforms")\n+    extensions = pt.markdown_to_html._config.get("enabled_extensions") or []\n     extensions = [safe_unicode(ext) for ext in extensions]\n     settings.markdown_extensions = extensions\n \n@@ -181,7 +177,7 @@ def migrate_record_from_ascii_to_bytes(field_name, iface, prefix=None):\n     if prefix is None:\n         prefix = iface.__identifier__\n     if not prefix.endswith("."):\n-        prefix += \'.\'\n+        prefix += "."\n     if not field_name.startswith(prefix):\n         field_name = prefix + field_name\n     registry = getUtility(IRegistry)\n@@ -211,7 +207,10 @@ def migrate_record_from_ascii_to_bytes(field_name, iface, prefix=None):\n     registry.registerInterface(iface, prefix=prefix)\n     if original_value is None:\n         # Nothing left to do.\n-        logger.info("Replaced empty %s ASCII (native string) field with Bytes field.", field_name)\n+        logger.info(\n+            "Replaced empty %s ASCII (native string) field with Bytes field.",\n+            field_name,\n+        )\n         return\n     new_record = registry.records[field_name]\n     if isinstance(original_value, str):\n@@ -237,8 +236,8 @@ def migrate_site_logo_from_ascii_to_bytes(context):\n \n \n def _recursive_strict_permission(obj):\n-    obj.manage_permission(view, (\'Manager\', \'Owner\'), 0)\n-    if base_hasattr(obj, \'objectValues\'):\n+    obj.manage_permission(view, ("Manager", "Owner"), 0)\n+    if base_hasattr(obj, "objectValues"):\n         for child in obj.objectValues():\n             _recursive_strict_permission(child)\n \ndiff --git a/plone/app/upgrade/v52/tests.py b/plone/app/upgrade/v52/tests.py\nindex d089e207..9dfa2962 100644\n--- a/plone/app/upgrade/v52/tests.py\n+++ b/plone/app/upgrade/v52/tests.py\n@@ -16,12 +16,12 @@ class UpgradeMemberData51to52Test(unittest.TestCase):\n     layer = PLONE_INTEGRATION_TESTING\n \n     def test_rebuild_member_data(self):\n-        portal = self.layer[\'portal\']\n+        portal = self.layer["portal"]\n         from plone.app.upgrade.v52.alphas import rebuild_memberdata\n \n         rebuild_memberdata(portal)\n-        tool = getToolByName(portal, \'portal_memberdata\')\n-        self.assertIn(\'test_user_1_\', tool._members.keys())\n+        tool = getToolByName(portal, "portal_memberdata")\n+        self.assertIn("test_user_1_", tool._members.keys())\n \n \n class Various52Test(unittest.TestCase):\n@@ -37,13 +37,13 @@ def test_rebuild_redirections(self):\n \n         storage = getUtility(IRedirectionStorage)\n         # add old-style redirect directly in internal structure:\n-        old = \'/plone/old\'\n-        new = \'/plone/new\'\n+        old = "/plone/old"\n+        new = "/plone/new"\n         storage._paths[old] = new\n         # get_full mocks a new-style redirect,\n         # though with None instead of a DateTime, and manual always True.\n         self.assertTupleEqual(storage.get_full(old), (new, None, True))\n-        portal = self.layer[\'portal\']\n+        portal = self.layer["portal"]\n         # Run the rebuild, and keep track of time before and after.\n         time1 = DateTime()\n         rebuild_redirections(portal.portal_setup)\n@@ -90,10 +90,11 @@ class SiteLogoTest(unittest.TestCase):\n     Ah, no problem after all: zope.schema.ASCII/Bytes may be the same,\n     but plone.registry.fields.ASCII/Bytes are always different.\n     """\n+\n     layer = PLONE_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.registry = getUtility(IRegistry)\n \n     def test_current_site_logo(self):\n@@ -101,7 +102,7 @@ def test_current_site_logo(self):\n         from plone.app.upgrade.v52.final import migrate_site_logo_from_ascii_to_bytes\n         from zope.schema.interfaces import WrongType\n \n-        record = self.registry.records[\'plone.site_logo\']\n+        record = self.registry.records["plone.site_logo"]\n         self.assertIsInstance(record.field, field.Bytes)\n         self.assertIsNone(record.value)\n         with self.assertRaises(WrongType):\n@@ -110,7 +111,7 @@ def test_current_site_logo(self):\n         self.assertEqual(record.value, b"ABC")\n         # Migrating does nothing.\n         migrate_site_logo_from_ascii_to_bytes(self.portal)\n-        record = self.registry.records[\'plone.site_logo\']\n+        record = self.registry.records["plone.site_logo"]\n         self.assertIsInstance(record.field, field.Bytes)\n         self.assertIsInstance(record.value, bytes)\n         self.assertEqual(record.value, b"ABC")\n@@ -119,34 +120,34 @@ def test_missing_site_logo_record(self):\n         # Test that the migration adds the record if for some reason it is missing.\n         from plone.app.upgrade.v52.final import migrate_site_logo_from_ascii_to_bytes\n \n-        del self.registry.records[\'plone.site_logo\']\n+        del self.registry.records["plone.site_logo"]\n         migrate_site_logo_from_ascii_to_bytes(self.portal)\n-        record = self.registry.records[\'plone.site_logo\']\n+        record = self.registry.records["plone.site_logo"]\n         self.assertIsInstance(record.field, field.Bytes)\n         self.assertIsNone(record.value)\n \n     def test_site_logo_empty(self):\n         from plone.app.upgrade.v52.final import migrate_site_logo_from_ascii_to_bytes\n \n-        del self.registry.records[\'plone.site_logo\']\n+        del self.registry.records["plone.site_logo"]\n         record_51 = Record(field.ASCII())\n-        self.registry.records[\'plone.site_logo\'] = record_51\n+        self.registry.records["plone.site_logo"] = record_51\n         # Migrate.\n         migrate_site_logo_from_ascii_to_bytes(self.portal)\n-        record = self.registry.records[\'plone.site_logo\']\n+        record = self.registry.records["plone.site_logo"]\n         self.assertIsInstance(record.field, field.Bytes)\n         self.assertIsNone(record.value)\n \n     def test_site_logo_text(self):\n         from plone.app.upgrade.v52.final import migrate_site_logo_from_ascii_to_bytes\n \n-        del self.registry.records[\'plone.site_logo\']\n+        del self.registry.records["plone.site_logo"]\n         record_51 = Record(field.ASCII())\n         record_51.value = "native string"\n-        self.registry.records[\'plone.site_logo\'] = record_51\n+        self.registry.records["plone.site_logo"] = record_51\n         # Migrate.\n         migrate_site_logo_from_ascii_to_bytes(self.portal)\n-        record = self.registry.records[\'plone.site_logo\']\n+        record = self.registry.records["plone.site_logo"]\n         self.assertIsInstance(record.field, field.Bytes)\n         self.assertIsInstance(record.value, bytes)\n         self.assertEqual(record.value, b"native string")\n@@ -217,37 +218,38 @@ class UpgradePortalTransforms521to522Test(unittest.TestCase):\n     layer = PLONE_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.pt = self.portal.portal_transforms\n         registry = getUtility(IRegistry)\n-        self.settings = registry.forInterface(IMarkupSchema, prefix=\'plone\')\n+        self.settings = registry.forInterface(IMarkupSchema, prefix="plone")\n \n     def test_migrate_markup_settings(self):\n         from plone.app.upgrade.v52.final import (\n             move_markdown_transform_settings_to_registry,\n         )\n-        self.pt.markdown_to_html._config[\'enabled_extensions\'] = [\n-            \'markdown.extensions.fenced_code\',\n-            \'markdown.extensions.nl2br\',\n-            \'markdown.extensions.extra\',\n+\n+        self.pt.markdown_to_html._config["enabled_extensions"] = [\n+            "markdown.extensions.fenced_code",\n+            "markdown.extensions.nl2br",\n+            "markdown.extensions.extra",\n         ]\n         move_markdown_transform_settings_to_registry(self.portal)\n-        if getattr(self.settings, \'markdown_extensions\', None):\n+        if getattr(self.settings, "markdown_extensions", None):\n             self.assertEqual(\n                 self.settings.markdown_extensions,\n                 [\n-                    \'markdown.extensions.fenced_code\',\n-                    \'markdown.extensions.nl2br\',\n-                    \'markdown.extensions.extra\',\n-                ]\n+                    "markdown.extensions.fenced_code",\n+                    "markdown.extensions.nl2br",\n+                    "markdown.extensions.extra",\n+                ],\n             )\n \n \n def test_suite():\n     # Skip these tests on Plone < 5.2a1\n-    plone_version = get_distribution(\'Products.CMFPlone\').version\n-    if not parse_version(plone_version) >= parse_version(\'5.2a1\'):\n+    plone_version = get_distribution("Products.CMFPlone").version\n+    if not parse_version(plone_version) >= parse_version("5.2a1"):\n         return unittest.TestSuite()\n \n     suite = unittest.TestSuite()\ndiff --git a/plone/app/upgrade/v60/alphas.py b/plone/app/upgrade/v60/alphas.py\nindex f5c27c48..7445b984 100644\n--- a/plone/app/upgrade/v60/alphas.py\n+++ b/plone/app/upgrade/v60/alphas.py\n@@ -146,8 +146,7 @@ def fix_unicode_properties(context):\n \n \n def cleanup_resources_and_bundles_in_registry(context=None):\n-    """Fix registry for es6 resources and new resource registry.\n-    """\n+    """Fix registry for es6 resources and new resource registry."""\n     registry = getUtility(IRegistry)\n \n     # We need to upgrade staticresources first.\n@@ -157,7 +156,9 @@ def cleanup_resources_and_bundles_in_registry(context=None):\n     # Also reregister the newly defined plone.session bundle if it is installed.\n     installer = get_installer(context)\n     if installer.is_profile_installed("plone.session:default"):\n-        loadMigrationProfile(context, "profile-plone.session:default", steps=["plone.app.registry"])\n+        loadMigrationProfile(\n+            context, "profile-plone.session:default", steps=["plone.app.registry"]\n+        )\n \n     # Remove obsolete records from the registry\n     removed_keys = [\n@@ -185,10 +186,11 @@ def cleanup_resources_and_bundles_in_registry(context=None):\n     # make sure they are all gone\n     try:\n         from Products.CMFPlone.interfaces import IResourceRegistry\n+\n         records = registry.collectionOfInterface(\n             IResourceRegistry, prefix="plone.resources", check=False\n         )\n-        assert(len(records) == 0)\n+        assert len(records) == 0\n     except ImportError:\n         # the interface may be removed at some point\n         pass\n@@ -241,15 +243,25 @@ def cleanup_resources_and_bundles_in_registry(context=None):\n     logger.info(f"Removed {len(to_delete)} deprecated bundle attributes from registry")\n \n     # local default controlpanel icons\n-    loadMigrationProfile(context, "profile-Products.CMFPlone:plone", steps=["controlpanel"])\n+    loadMigrationProfile(\n+        context, "profile-Products.CMFPlone:plone", steps=["controlpanel"]\n+    )\n     if installer.is_profile_installed("plone.app.theming:default"):\n-        loadMigrationProfile(context, "profile-plone.app.theming:default", steps=["controlpanel"])\n+        loadMigrationProfile(\n+            context, "profile-plone.app.theming:default", steps=["controlpanel"]\n+        )\n     if installer.is_profile_installed("plone.app.registry:default"):\n-        loadMigrationProfile(context, "profile-plone.app.registry:default", steps=["controlpanel"])\n+        loadMigrationProfile(\n+            context, "profile-plone.app.registry:default", steps=["controlpanel"]\n+        )\n     if installer.is_profile_installed("plone.app.caching:default"):\n-        loadMigrationProfile(context, "profile-plone.app.caching:default", steps=["controlpanel"])\n+        loadMigrationProfile(\n+            context, "profile-plone.app.caching:default", steps=["controlpanel"]\n+        )\n     if installer.is_profile_installed("Products.CMFPlacefulWorkflow:base"):\n-        loadMigrationProfile(context, "profile-Products.CMFPlacefulWorkflow:base", steps=["controlpanel"])\n+        loadMigrationProfile(\n+            context, "profile-Products.CMFPlacefulWorkflow:base", steps=["controlpanel"]\n+        )\n \n \n def add_new_image_scales(context):\ndiff --git a/setup.py b/setup.py\nindex 65bb05b0..a5bdb44f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,14 +2,13 @@\n from setuptools import setup\n \n \n-version = \'3.0.0a5.dev0\'\n+version = "3.0.0a5.dev0"\n \n setup(\n-    name=\'plone.app.upgrade\',\n+    name="plone.app.upgrade",\n     version=version,\n     description="Upgrade machinery for Plone.",\n-    long_description=(open("README.rst").read() + "\\n" +\n-                      open("CHANGES.rst").read()),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 6 - Mature",\n         "Environment :: Web Environment",\n@@ -24,40 +23,40 @@\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'Plone upgrade migration\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.upgrade/\',\n-    license=\'GPL version 2\',\n+    keywords="Plone upgrade migration",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.upgrade/",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require=dict(\n         test=[\n-            \'plone.app.testing\',\n-            \'plone.app.redirector\',\n+            "plone.app.testing",\n+            "plone.app.redirector",\n         ]\n     ),\n     install_requires=[\n-        \'setuptools\',\n-        \'plone.base\',\n-        \'plone.registry\',\n-        \'plone.folder\',\n-        \'plone.uuid\',\n-        \'transaction\',\n-        \'zope.component\',\n-        \'zope.interface\',\n-        \'Acquisition\',\n-        \'Products.CMFPlone>=6.0.0a1\',\n-        \'Products.CMFCore\',\n-        \'Products.CMFEditions\',\n-        \'Products.GenericSetup\',\n-        \'Products.PlonePAS\',\n-        \'Products.ZCatalog\',\n-        \'ZODB\',\n-        \'Zope>=5.5\',\n-        \'plone.app.theming\',\n+        "setuptools",\n+        "plone.base",\n+        "plone.registry",\n+        "plone.folder",\n+        "plone.uuid",\n+        "transaction",\n+        "zope.component",\n+        "zope.interface",\n+        "Acquisition",\n+        "Products.CMFPlone>=6.0.0a1",\n+        "Products.CMFCore",\n+        "Products.CMFEditions",\n+        "Products.GenericSetup",\n+        "Products.PlonePAS",\n+        "Products.ZCatalog",\n+        "ZODB",\n+        "Zope>=5.5",\n+        "plone.app.theming",\n     ],\n     entry_points="""\n     [z3c.autoinclude.plugin]\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-04-12T22:21:28+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/37ed0dcf00e9c3cc4ac93b8c473320d5fcfa5722

Removed 2.0.31 and earlier from CHANGES.rst.

2.0.32 was the first release with upgrades for Plone 6.

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 4155a59a..44b30fad 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -265,1934 +265,4 @@ Bug fixes:\n - add upgrade steps for HTMLFilter defaults.\n   [petschki] (#233)\n \n-\n-2.0.31 (2019-12-15)\n--------------------\n-\n-Bug fixes:\n-\n-\n-- Make sure plone.staticresources is installed to fix issues with site migrated from 5.0 or 5.1 to 5.2.1.\n-  Fixes https://github.com/plone/Products.CMFPlone/issues/2996\n-  [pbauer] (#223)\n-\n-\n-2.0.30 (2019-12-13)\n--------------------\n-\n-Bug fixes:\n-\n-\n-- Fixed error when upgrading relations.\n-  [maurits] (#220)\n-\n-\n-2.0.29 (2019-12-02)\n--------------------\n-\n-Bug fixes:\n-\n-\n-- Add Collection to the default_page_types setting\n-  [erral] (#216)\n-\n-\n-2.0.28 (2019-09-03)\n--------------------\n-\n-Bug fixes:\n-\n-\n-- Add empty upgrade step for Plone 5.1.6 \n-  [esteele] (#214)\n-\n-\n-2.0.27 (2019-07-10)\n--------------------\n-\n-Bug fixes:\n-\n-\n-- Add upgrade step for Plone 5.2 final\n-  [esteele] (#213)\n-\n-\n-2.0.26 (2019-06-27)\n--------------------\n-\n-Bug fixes:\n-\n-\n-- Add empty upgrade step for Plone 5.2rc5\n-  [esteele] (#212)\n-\n-\n-2.0.25 (2019-06-19)\n--------------------\n-\n-New features:\n-\n-\n-- Upgrade step for optional async loading\n-  [agitator] (#208)\n-- In registry move all interface prefixes for ``ILanguageSchema`` from old place in Products.CMFPlone to plone.i18n.\n-  [jensens] (#210)\n-\n-\n-Bug fixes:\n-\n-\n-- Fix upgrades from Plone 4.3 to 5.2.\n-  [pbauer] (#207)\n-- Reload ISecuritySchema to create plone.autologin_after_password_reset key for Plone 5.2.\n-  [jensens, agitator, maurits] (#2440)\n-\n-\n-2.0.24 (2019-05-04)\n--------------------\n-\n-New features:\n-\n-\n-- Added upgrade step to initialize the date and manual information for redirects.\n-  [maurits] (#2799)\n-\n-\n-Bug fixes:\n-\n-\n-- Fix changing bucket size while reindexing relation catalog.\n-  [jensens] (#201)\n-- Add alias for webdav.LockItem.LockItem. Fixes https://github.com/plone/Products.CMFPlone/issues/2800\n-  [pbauer] (#203)\n-- Moved dotted named behaviors to named behaviors.\n-  [iham] (#204)\n-\n-\n-2.0.23 (2019-03-21)\n--------------------\n-\n-Bug fixes:\n-\n-\n-- Add upgrade steps for PLIP 1653. [thet] (#184)\n-- Add upgrade profile for Plone 5.2beta2\n-  [davilima6]\n-\n-  Add upgrade step for loading Moments.js without locales, which are now lazy loaded\n-  [davilima6] (#199)\n-- Fix changing bucket size while reindexing relation catalog.\n-  [jensens] (#201)\n-\n-\n-2.0.22 (2019-03-04)\n--------------------\n-\n-Bug fixes:\n-\n-\n-- Fixed permission error while removing old resource registries. [maurits]\n-  (#197)\n-- Add bbb for CSSRegistryTool and JSRegistryTool to fix upgrade from 5.0 to 5.2\n-  (#200)\n-\n-\n-2.0.21 (2019-02-13)\n--------------------\n-\n-New features:\n-\n-\n-- Added URL Management controlpanel and object_button action. [maurits] (#1486)\n-\n-\n-Bug fixes:\n-\n-\n-- Tolerate lack of legacy resource registry [ksuess] (#183)\n-- Add missing upgrade step for CMFEditions [MrTango] (#188)\n-- Provide upgrade step that purges and rebuild the _members data structure in\n-  portal_memberdata [pysailor] (#190)\n-- Update all FTIs that use the RichText or LeadImage behaviors (#192)\n-- Add alias for GopipIndex to fix migrations to 5.2 (#193)\n-- Remove interface indexes from relation catalog [jmevissen] (#195)\n-\n-\n-2.0.20 (2018-12-30)\n--------------------\n-\n-Bug fixes:\n-\n-\n-- Plone 5.1.5: Update resource registry ``last_compilation`` date. [thet]\n-  (#186)\n-\n-\n-2.0.19 (2018-12-10)\n--------------------\n-\n-Bug fixes:\n-\n-\n-- migrate GopipIndex which has moved from p.a.folder to p.folder [petschki]\n-  (#177)\n-- Do not break if archetypes related code is not available [ale-rt, pbauer]\n-  (#178)\n-- tolerate lack of legacy resource registry [ksuess] (#182)\n-\n-\n-2.0.16 (2018-10-01)\n--------------------\n-\n-New features:\n-\n-\n-- Add upgrade steps for Datatables on Plone 5.1.4. [frapell] (#168)\n-- Add upgrade step removing the jquery-highlightsearchterms resource and the\n-  plone_ecmascript skin layer, on Plone 5.2 and 5.1.4 [sunew] (#170)\n-- Update bundle dates after recompilation in CMFPlone. [sunew] (#171)\n-- Added upgrade for TinyMCE 4.7.13 on Plone 5.0.10. [obct537] (#174)\n-\n-\n-Bug fixes:\n-\n-\n-- Update resources for plone.app.event. [agitator] (#166)\n-- Prepare for Python 2 / 3 compatibility [ale-rt, pbauer, tlotze] (#173)\n-- make `plone.app.folder` import conditional, because the package is gone in\n-  Plone >= 5.2 [petschki] (#175)\n-- fix tests in Plone >= 5.2 and python 3. As discussed with jensens and\n-  mauritsvanrees we start migration tests beginning from 4.0 final due to\n-  portal_factory property errors. [petschki] (#176)\n-\n-\n-2.0.15 (2018-06-21)\n--------------------\n-\n-New features:\n-\n-- Merge plone.login and remove skins folder plone_login.\n-  [jensens]\n-\n-Bug fixes:\n-\n-- Made several functions less complex by splitting them.  [maurits]\n-\n-- Improved code quality.  [maurits]\n-\n-\n-2.0.14 (2018-04-09)\n--------------------\n-\n-Bug fixes:\n-\n-- Fix i18n domain for some portal_actions that were on plone.app.event domain.\n-  Fixes https://github.com/plone/plone.app.event/pull/204\n-  [gforcada]\n-\n-\n-2.0.13 (2018-04-08)\n--------------------\n-\n-Bug fixes:\n-\n-- Change in TinyMCE css location so bundles can be built without errors\n-  Fixes `issue 2359 <https://github.com/plone/Products.CMFPlone/issues/2359>`_.\n-  [frapell]\n-\n-\n-2.0.12 (2018-03-10)\n--------------------\n-\n-Bug fixes:\n-\n-- Rename retina_scales to highpixeldensity_scales.\n-  Fixes `issue 2331 <https://github.com/plone/Products.CMFPlone/issues/2331>`_.\n-  [maurits]\n-\n-- Hide our \'products\' from installation for both CMFQuickInstallerTool and CMFPlone.\n-  [maurits]\n-\n-\n-2.0.11 (2018-02-05)\n--------------------\n-\n-Bug fixes:\n-\n-- Removed hard dependency on ``CMFQuickInstallerTool``.\n-  And marked the v52 module as non installable.  [maurits]\n-\n-- Import ``setupPasswordPolicyPlugin`` from canonical place in ``PlonePAS``.\n-  [maurits]\n-\n-- Log progress and ignore bad catalog entries while updating catalog metadata.\n-  [davisagli]\n-\n-- Disable CSRF protection when replacing keyring.\n-  This fixes running specific upgrade steps via the portal_setup UI.\n-  [davisagli]\n-\n-- Avoid triggering an unnecessary migration of user logins\n-  when the use_email_as_login setting is migrated to portal_registry.\n-  [davisagli]\n-\n-\n-2.0.10 (2017-12-13)\n--------------------\n-\n-Bug fixes:\n-\n-- Unregister import_steps that were moved to post_handlers.\n-  Fixes https://github.com/plone/Products.CMFPlone/issues/2238\n-  [pbauer]\n-\n-\n-2.0.9 (2017-11-26)\n-------------------\n-\n-New features:\n-\n-- Add upgrade step for 5.2 to register tools as utilities.\n-  Run it before testing the zexp-import.\n-  [pbauer]\n-\n-Bug fixes:\n-\n-- Fixed WrongType exception when migrating installed Iterate to 5.0.\n-  [maurits]\n-\n-- Adapt to changes in CMF 2.4 (getCurrentKeyFormat removed) and Zope 4 (not Products in Control Panel).\n-  [pbauer]\n-\n-- Register upgrades for Plone 5.2\n-  [pbauer]\n-\n-- Fix installation of IUserGroupsSettingsSchema into registry for Plone 5.0rc1.\n-  [davisagli]\n-\n-- Avoid swallowing errors during registry setting upgrades.\n-  [davisagli]\n-\n-2.0.8 (2017-09-25)\n-------------------\n-\n-Bug fixes:\n-\n-- Fix deletion of registry records in ``remove_duplicate_iterate_settings``\n-  from the ``5108`` upgrade.\n-  [thet]\n-\n-- Register Plone 5.1 upgrade steps.\n-  [thet]\n-\n-- Register settings for safe_html-Transform when migrating from 5107 to 5108\n-  [pbauer]\n-\n-- Use str() when migrating checkout_workflow_policy since the field is ASCII.\n-  See discussion at https://github.com/plone/plone.app.iterate/pull/53\n-  [pbauer]\n-\n-- Use safe_unicode to migrate some settings. Fixes https://github.com/plone/plone.app.upgrade/issues/104\n-  [pbauer]\n-\n-2.0.7 (2017-09-10)\n-------------------\n-\n-New features:\n-\n-- Add jqtree-contextmenu to the resource registry for Plone 5.0 and 5.1\n-  [b4oshany]\n-\n-- Add js-shortcuts to the resource registry for Plone 5.0 and 5.1\n-  [b4oshany]\n-\n-Bug fixes:\n-\n-- Recover missing dashboard (user actions)\n-  https://github.com/plone/Products.CMFPlone/issues/1132\n-  [fgrcon]\n-\n-- Register settings for safe_html-Transform before linkintegrity-migration in 5.0rc1\n-  Fixes https://github.com/plone/Products.CMFPlone/issues/2129\n-  [pbauer]\n-\n-- Fix migration if safe_html-Settings to not drop tags without a closing tag.\n-  Fixes https://github.com/plone/Products.CMFPlone/issues/2088\n-  [pbauer]\n-\n-- Cleanup duplicate iterate settings. See also https://github.com/plone/plone.app.iterate/pull/47\n-  [pbauer]\n-\n-\n-2.0.6 (2017-08-05)\n-------------------\n-\n-New features:\n-\n-- Added ``Show Toolbar`` permission.\n-  [agitator]\n-\n-Bug fixes:\n-\n-- Fix #84 - usage of aq_base\n-  [jensens]\n-\n-\n-2.0.5 (2017-07-03)\n-------------------\n-\n-Bug fixes:\n-\n-- Plone 5.1: Fixup timezone record fields, as old interface\n-  plone.app.event.bbb.interfaces.IDateAndTimeSchema is gone since\n-  plone.app.event 3.0.2.\n-  [thet]\n-\n-- Fix upgrade step for ISocialMediaSchema\n-  [MrTango]\n-\n-\n-2.0.4 (2017-06-04)\n-------------------\n-\n-New features:\n-\n-- New Options for thumb- and icon-handling in site control panel\n-  https://github.com/plone/Products.CMFPlone/issues/1734\n-  upgradesteps to 5.1b4\n-  [fgrcon]\n-\n-- TinyMCE 4.5.6 update.\n-  [thet]\n-\n-- Update registry for Plone 5.1 to integrate ``mockup-patterns-structureupdater``.\n-  [thet]\n-\n-Bug fixes:\n-\n-- Register ``ISiteSyndicationSettings`` again.\n-  This interface was updated in 5.0rc3.\n-  On older sites, this would cause an error on the ``syndication-controlpanel``:\n-  KeyError: \'Interface `Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings` defines a field `render_body`, for which there is no record.\n-  [maurits]\n-\n-- Catch warning the pythonic way.\n-  Makes it work with latest CMFCore.\n-  [jensens]\n-\n-- Fix and ``AttributeError`` for the Plone 5.1 beta 4 upgrade.\n-  [thet]\n-\n-\n-2.0.3 (2017-04-18)\n-------------------\n-\n-New features:\n-\n-- Add Plone 5.1 beta 4 upgrade profile.\n-  [thet]\n-\n-- new metadata catalog column mime_type\n-  https://github.com/plone/Products.CMFPlone/issues/1995\n-  [fgrcon]\n-\n-Bug fixes:\n-\n-- Do not convert/fail on None while update_social_media_fields\n-  [agitator]\n-\n-- Fixed ImportError when ``Products.ATContentTypes`` is not available.\n-  This happens when you only have the ``Products.CMFPlone`` egg\n-  and not the ``Plone`` egg.  [maurits]\n-\n-- Fixed title and description of plone.resource.maxage.\n-  This had the title and description from shared maxage,\n-  due to a wrong reference.\n-  See https://github.com/plone/Products.CMFPlone/issues/1989\n-  [maurits]\n-\n-- Removed "change portal events"\n-  [kakshay21]\n-\n-2.0.2 (2017-04-03)\n-------------------\n-\n-New features:\n-\n-- Add image scaling options to image handling controlpanel\n-  when migrating to 5.1b3.\n-  [didrix]\n-\n-Bug fixes:\n-\n-- Update ``twitter_username``, ``facebook_app_id`` and ``facebook_username`` field values as they are now declared as ``ASCIILine`` instead of ``TextLine``.\n-  [hvelarde]\n-\n-\n-2.0.1 (2017-03-09)\n-------------------\n-\n-Bug fixes:\n-\n-- Adapt tests to the new indexing operations queueing.\n-  Part of PLIP 1343: https://github.com/plone/Products.CMFPlone/issues/1343\n-  [gforcada]\n-\n-- Fix registration of upgrade-step to Plone 5.1a1\n-  [pbauer]\n-\n-2.0.0 (2017-02-20)\n-------------------\n-\n-Breaking changes:\n-\n-- Remove really old upgrade steps (everything up to v40).\n-  [gforcada]\n-\n-New features:\n-\n-- New mockup releases for Plone 5.0 and 5.1.\n-  [thet]\n-\n-- Remove jquery.cookie from plone-logged-in bundle\'s stub_js_modules.\n-  The toolbar, which has a dependency on jquery.cookie,\n-  was moved from the plone bundle to plone-logged-in in CMPlone 5.1a2.\n-  [thet]\n-\n-- Products.MimetypesRegistry has no longer a skins layer, remove it.\n-  [jensens]\n-\n-- Add sort_on field to search controlpanel.\n-  [rodfersou]\n-\n-- Support sites without ``portal_quickinstaller``.\n-  We use ``get_installer`` in Plone 5.1 migrations.\n-  In earlier version we will keep using the ``portal_quickinstaller``,\n-  because ``get_installer`` is not available.\n-  In shared utility and base code, we try to import get_installer,\n-  and fall back on the previous implementation.\n-  See `PLIP 1340 <https://github.com/plone/Products.CMFPlone/issues/1340>`_.\n-  [maurits]\n-\n-- Add new Mockup 2.4.0 relateditems resource url.\n-  Add new optional relateditems upload resource.\n-  [thet]\n-\n-- Update ``last_compilation`` to deliver new bundles.\n-  [thet]\n-\n-- Move PasswordResetTool to CMFPlone.\n-  *Note: Pending password resets are deleted.*\n-  [tomgross]\n-\n-- Adopt to changes in Zope4\n-  [pbauer]\n-\n-Bug fixes:\n-\n-- Remove displayContentsTab from action expressions in 5.1.\n-  Fixes https://github.com/plone/Products.CMFPlone/issues/1935.\n-  [maurits]\n-\n-- Fix move_pw_reset_tool upgrade step\n-  [agitator]\n-\n-- Install plone.app.caching in 5.0 alpha if available.\n-  When it is already installed, upgrade it.\n-  [maurits]\n-\n-- Install plone.app.theming in 5.0 alpha.\n-  When it is already installed, upgrade it.\n-  [maurits]\n-\n-- Fixed AttributeError ``use_content_negotiation`` when migrating old language tool.\n-  Not all versions have the same properties available.\n-  Now we only take over existing properties.\n-  5.0 beta.\n-  [maurits]\n-\n-- Fixed ConstraintNotSatisfied when default_editor is not allowed.\n-  5.0 alpha.\n-  [maurits]\n-\n-- Enabled update from latest 4.3 profile revision.\n-  Otherwise we would skip a few upgrade steps when migrating to\n-  Plone 5.  [maurits]\n-\n-- Don\'t remove sub skin layers when cleaning ``portal_skins``.\n-  Created ``utils.cleanUpSkinsTool`` method which has generally useful\n-  code for cleaning up the skins.\n-  Fixes `issue 87 <https://github.com/plone/plone.app.upgrade/issues/87>`_.\n-  [maurits]\n-\n-- Install plone.resource in Plone 5.0 alpha 3.  Fixes possible\n-  ``TypeError: argument of type \'NoneType\' is not iterable`` when\n-  migrating from Plone 4.3 for a site that did not have plone.resource\n-  or diazo installed yet.\n-  Fixes `issue 1756 <https://github.com/plone/Products.CMFPlone/issues/1756>`_. [maurits]\n-\n-- Be sure smtp_port is an integer.\n-  [ale-rt]\n-\n-- Fix upgrade step for PasswordResetTool if there was never da different value than the default was set.\n-  [jensens]\n-\n-- Check whether avoiding exception in RealUpgradeLayer setup avoids polluting test environment.\n-  [davisagli]\n-\n-- avoid error in layer teardown\n-  [davisagli]\n-\n-1.3.27 (2016-08-16)\n--------------------\n-\n-Bug fixes:\n-\n-- Add empty upgrade step for 4.3.11.\n-  [esteele]\n-\n-- Add empty upgrade step for 5.0.6.\n-  [esteele]\n-\n-\n-1.3.26 (2016-08-15)\n--------------------\n-\n-Bug fixes:\n-\n-- Remove deprecated ``mockup-registry`` and ``mockup-parser`` resources.\n-  [thet]\n-\n-- Update ``last_compilation`` to deliver new bundles.\n-  [thet]\n-\n-- Add missing ``jquery.browser`` dependency which is needed by patternslib.\n-  [thet]\n-\n-- Use zope.interface decorator.\n-  [gforcada]\n-\n-1.3.25 (2016-06-21)\n--------------------\n-\n-New:\n-\n-- Adds controlpanel setting to enable navigation root bound keyword vocabularies.\n-  [jensens]\n-\n-- Update to 5.1a2 upgrade step to allow upgrades from Plone 5.1a1.\n-  [jensens]\n-\n-\n-1.3.24 (2016-03-31)\n--------------------\n-\n-New:\n-\n-- Add actions controlpanel when migrating to 5.1a1.\n-  [esteele]\n-\n-- Add null upgrade step for 5.0.3 to 5.0.4\n-  [esteele]\n-\n-\n-1.3.23 (2016-03-31)\n--------------------\n-\n-Fixes:\n-\n-- Update 5.0a1 upgrade step to allow upgrades from Plone 5.0.3.\n-  [esteele]\n-\n-\n-1.3.22 (2016-03-29)\n--------------------\n-\n-New:\n-\n-- Registry upgrades for Plone 5.1 (less variables).\n-  [jensens]\n-\n-\n-1.3.21 (2016-02-24)\n--------------------\n-\n-New:\n-\n-- Registry upgrades for Plone 5.0.3\n-  [vangheem]\n-\n-- Hidden the v50 module from the installable products, just like our\n-  other modules.  [maurits]\n-\n-Fixes:\n-\n-- Use `unsetLastVersionForProfile` from GenericSetup 1.8.1 and\n-  higher.  [maurits]\n-\n-- Fix ``cleanUpProductRegistry`` to not break when ``Control_Panel`` cannot be found.\n-  Fixes test failures with Zope 4.\n-  [thet]\n-\n-\n-1.3.20 (2016-01-08)\n--------------------\n-\n-Fixes:\n-\n-- Run missing upgrade-step of plone.app.querystring when upgrading to 5.0.2.\n-  [pbauer]\n-\n-\n-1.3.19 (2015-12-17)\n--------------------\n-\n-New:\n-\n-- reapply profile for site-controlpanel\n-  plone/Products.CMFPlone#124\n-  [fgrcon]\n-\n-- extended step to501 to recreate metadata for getIcon, see\n-  plone/Products.CMFPlone#1226, #58, #60, #61\n-  [fgrcon, gagaro, jensens]\n-\n-- Removed fake kupu tool and related settings and resources.\n-  [maurits]\n-\n-- Cleanup the skins tool.\n-  [maurits]\n-\n-- Cleanup uninstalled products.  Remove uninstalled products from QI\n-  and mark their installed profile version as unknown.\n-  [maurits]\n-\n-- If non installable profiles (really: hidden profiles) have been\n-  installed in GS, mark their products as installed in the QI.  This\n-  does not work when also that *product* is marked as non installable,\n-  because in normal operation (outside of plone.app.upgrade) this does\n-  not happen either.\n-  [maurits]\n-\n-- Unmark installed profiles that are no longer available.\n-  [maurits]\n-\n-Fixes:\n-\n-- Fixed removal of Large Plone Folder when migrating from Plone 3.\n-  [maurits]\n-\n-\n-1.3.18 (2015-09-27)\n--------------------\n-\n-- Add migration for ILinkSchema\n-  [vangheem]\n-\n-- Add migration for TinyMCE settings\n-  [vangheem]\n-\n-- Fix migration of typesUseViewActionInListings to registry.\n-  [pbauer]\n-\n-- Fix incorrect interate import.\n-  [alecm]\n-\n-\n-1.3.17 (2015-09-22)\n--------------------\n-\n-- Fix issues with missing registry-entries when upgrading 5.0rc2 -> 5.0rc3.\n-  [pbauer]\n-\n-\n-1.3.16 (2015-09-20)\n--------------------\n-\n-- Plone 4.3: upgrade TinyMCE correctly.  Update sunburst theme profile\n-  version when applying its upgrade step.  Update CMFEditions.  Update\n-  plone.app.jquery.\n-  This fixes\n-  https://github.com/plone/Products.CMFPlone/issues/812\n-  [maurits]\n-\n-- Portal properties calendar_starting_year and calendar_future_years_available\n-  were moved to registry.\n-  [pbauer]\n-\n-- Remove unused invalid_ids portal property\n-  [esteele]\n-\n-\n-1.3.15 (2015-09-11)\n--------------------\n-\n-- Fix migration of types_not_searched to registry.\n-  Fixes https://github.com/plone/plone.app.contenttypes/issues/268\n-  [pbauer]\n-\n-- Remove site properties that have been migrated to the registry.\n-  [esteele]\n-\n-\n-1.3.14 (2015-09-08)\n--------------------\n-\n-- Remove no-longer-used properties from portal_properties\n-  [esteele]\n-\n-- Remove plone_forms skins folder for 5.0 rc1\n-  [esteele]\n-\n-- Install plone.app.linkintegrity and migrate linkintegrity-relations.\n-  [pbauer]\n-\n-\n-1.3.13 (2015-08-23)\n--------------------\n-\n-- Unregister removed collection.css.\n-  [pbauer]\n-\n-- 5.0 beta: do not set ``url_expr`` on configlet.  This must be done\n-  with ``setActionExpression``.\n-  Fixes https://github.com/plone/Products.CMFPlone/issues/814\n-  [maurits]\n-\n-- Turn @@tinymce-controlpanel ``content_css`` field into a list\n-  [ebrehault]\n-\n-\n-1.3.12 (2015-07-23)\n--------------------\n-\n-- Fix for 5.0b2 -> 5.0b3 upgrade step that removed permissions from most of\n-  the control panel configlets. This fixes:\n-  https://github.com/plone/Products.CMFPlone/issues/745\n-  [sneridagh, timo]\n-\n-\n-1.3.11 (2015-07-20)\n--------------------\n-\n-- upgrade plone buttons to not have so many things open in modals\n-  [vangheem]\n-\n-- uninstall mockup-pattern-accessibility pattern registration\n-  [vangheem]\n-\n-- add Products.CMFPlacefulWorkflow as dep as __init__ requires this\n-  [maartenkling]\n-\n-- add social media control panel upgrade\n-  [vangheem]\n-\n-- upgrades for plone 5 tinymce configuration and social tags config\n-  [vangheem]\n-\n-- add step for updated dropzone resource location\n-  [vangheem]\n-\n-- remove plone.app.jquery dependency\n-  [vangheem]\n-\n-- Add jquerytools removal upgrade\n-  [vangheem]\n-\n-- Plone 5: upgrade manage portlets js\n-  [vangheem]\n-\n-- Remove hard dependency on CMFDefault\n-  [tomgross]\n-\n-- Update the category configlet of all the configlets in order to provide a way\n-  to categorize properly each configlet [sneridagh]\n-\n-- Updated links for the renamed \'Types\' control panel [sneridagh]\n-\n-\n-1.3.10 (2015-05-13)\n--------------------\n-\n-- Plone 4.3: Enable NewsML feed syndication\n-  [tcurvelo]\n-\n-- Plone 5: Migrate imagine control panel settings to the configuration\n-  registry\n-  [vangheem]\n-\n-- Plone 5: Solve CMFPlacefulWorkflow __iro__ problem because\n-  of moving their paths when upgrading\n-  [bloodbare]\n-\n-\n-1.3.9 (2015-03-26)\n-------------------\n-\n-- LanguageTool/plone.app.multilingual migration\n-  [bloodbare]\n-\n-- Update tests after removal of ``allowAnonymousViewAbout`` and\n-  ``validate_email`` properties in CMFPlone.\n-  [jcerjak]\n-\n-- Do not run tests not suited for the current Plone version\n-  (implemented for 4.0 and below)\n-  [jensens]\n-\n-- Add upgrade step for the security control panel.\n-  [jcerjak]\n-\n-- Add upgrade step for mail control panel. Refs PLIP 10359.\n-  [jcerjak, khink]\n-\n-- Add upgrade steps for markup control panel.\n-  [thet]\n-\n-\n-1.3.8 (2014-11-01)\n-------------------\n-\n-- Add upgrade steps for editing, maintenance, navigation, search,\n-  and site control panels.\n-  [tisto]\n-\n-\n-1.3.7 (2014-10-22)\n-------------------\n-\n-- Add upgrade-profile for vs5002 and update rolemap.xml to include\n-  "Mail forgotten password"-permission also to Managers.\n-  [ida]\n-\n-- Added upgrade step for plone.app.querystring which adds new operations and\n-  fields\n-  [ichim-david]\n-\n-- Plone 5 upgrade: Respect previous installed plone.app.event when migrating\n-  first_weekday setting.\n-  [thet]\n-\n-- #12286 Need (Plone 4.0 upgrade) migration step for hidden static text\n-  portlets\n-  [anthonygerrard]\n-\n-- provide upgrade step for plone.protect\n-  [vangheem]\n-\n-\n-1.3.6 (2014-03-02)\n-------------------\n-\n-- Migrate theme settings, install Barceloneta.\n-  [davisagli]\n-\n-- Migrate Members folder default view\n-  [davisagli]\n-\n-\n-1.3.5 (2014-02-19)\n-------------------\n-\n-- Be sure the improved syndication settings introduced in the 4.3 series\n-  are applied on upgrade.\n-  [gbastien]\n-\n-- Avoid failure at lexicon upgrade (4.3rc1)\n-  when we have an integrity error into the ZCTextIndex.\n-  [thomasdesvenain]\n-\n-- Install plone.app.event and remove portal_calendar when upgarding to Plone 5.\n-  [davisagli]\n-\n-- Remove portal_interface when upgrading to Plone 5.\n-  [ale-rt]\n-\n-- Remove portal_actionicons, portal_discussion, and portal_undo when\n-  upgrading to Plone 5.\n-  [davisagli]\n-\n-- Add condition to the upgrade step to add scaling-quality 4.3-final.\n-  plone.app.imaging no longer has the imaging_properties (moved to CMFPlone)\n-  so they are not there in plone5-tests.\n-  [pbauer]\n-\n-- Add conditional install of plonetheme.classic in upgrade step 4.0a1. Since\n-  plonetheme.classic will be removed in Plone 5, we can not be sure that it\n-  is always installed.\n-  [timo]\n-\n-- Replace deprecated test assert statements.\n-  [timo]\n-\n-- Add undeclared Products.TinyMCE dependency.\n-  [timo]\n-\n-- Add use_uuid_as_userid site property in Plone 5.\n-  Part of PLIP 13419.\n-  [maurits]\n-\n-- Use lowercase for email login in Plone 5.\n-  Part of PLIP 13419.\n-  [maurits]\n-\n-- Remove persistent kss_mimetype import step.\n-  [maurits]\n-\n-- Fix name of Plone 5 zcml conditional feature to plone-5.\n-  [thet]\n-\n-- Don\'t fail on out of date catalog when upgrading syndication for 4.3\n-  [tomgross]\n-\n-- Add Default Plone Password Policy to Plone\'s acl_users.\n-  [gbastien]\n-\n-1.3.4 (2013-08-14)\n-------------------\n-\n-- Replace basic infrastructure for 4.4 series with same for 5.0 series.\n-  [davisagli]\n-\n-- Upgrade TinyMCE: Remove space from style to prevent bogus class.\n-  [maurits]\n-\n-\n-1.3.3 (2013-06-13)\n-------------------\n-\n-- Add upgrade step to set image scaling quality (p.a.imaging 1.0.8).\n-  [khink]\n-\n-- Upgrade broken \'added\' content rules.\n-  [thomasdesvenain]\n-\n-- handle syndication upgrade when folder is not syndication enabled but\n-  has syndication information.\n-  [vangheem]\n-\n-\n-1.3.2 (2013-05-30)\n-------------------\n-\n-- Nothing changed yet.\n-\n-\n-1.3.1 (2013-04-13)\n-------------------\n-\n-- Fix upgrade-step upgradeSyndication for Dexterity\n-  [pbauer]\n-\n-\n-1.3 (2013-04-06)\n-----------------\n-\n-- Add basic upgrade infrastructure for the Plone 4.4 series.\n-  [davisagli]\n-\n-- Do not import Products.kupu. Fixes https://dev.plone.org/ticket/13480\n-  [danjacka]\n-\n-\n-1.3rc1 (2013-03-05)\n--------------------\n-\n-- add step for rc1 to upgrade catalog correctly\n-  [vangheem]\n-\n-- Avoid hard dependency on ATContentTypes.\n-  [davisagli]\n-\n-\n-1.3b2 (2013-01-17)\n-------------------\n-\n-- Run plonetheme.sunburst 1.4 upgrade.\n-  [esteele]\n-\n-- Add upgrade step for plone.app.discussion.\n-  [toutpt]\n-\n-\n-1.3b1 (2013-01-01)\n-------------------\n-\n-- Make sure the syndication upgrade step unregisters the old tool\n-  as a utility.\n-  [davisagli]\n-\n-- Add upgrade for version 4.3b1 to make sure TinyMCE is upgraded.\n-  [davisagli]\n-\n-- In the UID index migration, if there are items whose key is None,\n-  skip them instead of complaining about there being multiple items.\n-  [davisagli]\n-\n-\n-1.3a2 (2012-10-18)\n-------------------\n-\n-- Add upgrade step to remove KSS.\n-  [vangheem, davisagli]\n-\n-- Remove old upgrades that depended on KSS being present.\n-  [davisagli]\n-\n-- Make sure registry settings for syndication and ResourceRegisties bundles\n-  are set up for Plone 4.3.\n-  [vangheem, davisagli]\n-\n-- Make plone.app.theming upgrade steps only run when plone.app.theming is\n-  installed (i.e. not for a plain Products.CMFPlone site.)\n-  [elro]\n-\n-1.3a1 (2012-08-31)\n-------------------\n-\n-- Added Plone 4.3 upgrade step to apply plone.app.jquery 1.5 upgrade step.\n-  [esteele]\n-\n-- Added Plone 4.3 upgrade step to re-install plone.app.theming (Diazo theme\n-  support) if installed previously. This will upgrade the control panel to the\n-  new unified one.\n-  [optilude]\n-\n-- Added Plone 4.3 upgrade step to make sure TinyMCE 1.3 upgrade steps are run.\n-  [davisagli]\n-\n-- Added upgrade step for new sortable_title logic.\n-  [hannosch]\n-\n-- Add \'displayPublicationDateInByline\' property to site properties sheet.\n-  Required for PLIP #8699.\n-  [vipod]\n-\n-- Remove the plone_deprecated skin layer from all skins in Plone 4.3.\n-  [davisagli]\n-\n-- Provide kupu tool module alias, so upgrade steps can read data from it.\n-  [hannosch]\n-\n-- Remove kupu from the test dependencies.\n-  [hannosch]\n-\n-- Make the RAM cache utility upgrade work without zope.app.cache.\n-  [davisagli]\n-\n-- Fix an issue in an old upgrade step when used with current\n-  ResourceRegistries.\n-  [davisagli]\n-\n-- Add Member role to View dashboard permission\n-  [gaudenz]\n-\n-- Install plone.app.search when upgrading.\n-  [esteele]\n-\n-- Plone 4.1.5 upgrade step added that makes sure that plone.app.discussion\n-  has been properly installed.\n-  [timo]\n-\n-1.2.5 (2013-03-05)\n-------------------\n-\n-- Add upgrade profile for Plone 4.2.5\n-  [esteele]\n-\n-\n-1.2.4 (2013-01-17)\n-------------------\n-\n-- Add upgrade profile for Plone 4.2.4\n-  [esteele]\n-\n-- Add missing to_423 folder.\n-  [esteele]\n-\n-\n-1.2.3 (2012-12-15)\n-------------------\n-\n-- Add upgrade profile for Plone 4.2.3\n-  [esteele]\n-\n-- In the UID index migration, if there are items whose key is None,\n-  skip them instead of complaining about there being multiple items.\n-  [davisagli]\n-\n-\n-1.2.2 (2012-10-15)\n-------------------\n-\n-- Add upgrade step to make sure the registry record for ResourceRegistries\n-  bundles is installed.\n-  [davisagli]\n-\n-\n-1.2.1 (2012-08-11)\n-------------------\n-\n-- Add upgrade profile for Plone 4.2.1\n-  [esteele]\n-\n-\n-1.2 (2012-06-29)\n-----------------\n-\n-- Add upgrade step to install the CMFEditions component registry bases\n-  modifier.\n-  [rossp]\n-\n-\n-1.2rc2 (2012-05-31)\n--------------------\n-\n-- Add profile for Plone 4.2rc2\n-  [esteele]\n-\n-\n-1.2rc1 (2012-05-07)\n--------------------\n-\n-- Fix an issue in an old upgrade step when used with current\n-  ResourceRegistries.\n-  [davisagli]\n-\n-- Add Member role to View dashboard permission\n-  [gaudenz]\n-\n-- Install plone.app.search when upgrading.\n-  [esteele]\n-\n-- Plone 4.1.5 upgrade step added that makes sure that plone.app.discussion\n-  has been properly installed.\n-  [timo]\n-\n-\n-1.2b2 (2012-02-09)\n-------------------\n-\n-- Fix adding Site Administrator roles for when\n-  custom workflows might not have the permission_roles\n-  for states set.\n-  [vangheem]\n-\n-\n-1.2b1 (2011-12-05)\n-------------------\n-\n-- Avoid 4020->4100 rules being overpassed from a 4022 version.\n-  [tdesvenain]\n-\n-- Add upgrade step to re-enable the getObjPositionInParent index in the\n-  portal_atcttool.\n-  [davisagli]\n-\n-- Add upgrade step to add Site Administrator to allowRolesToAddKeywords.\n-  [esteele]\n-\n-1.2a2 - 2011-08-25\n-------------------\n-\n-- Release 1.2a2\n-  [esteele]\n-\n-\n-1.2a1 - 2011-08-08\n-------------------\n-\n-- Removed input-label.js from portal_javascript in the 4.2 alpha profile.\n-  [spliter]\n-\n-\n-1.1.7 (2012-06-27)\n-------------------\n-\n-- Add Plone 4.1.6 upgrade step.\n-  [esteele]\n-\n-\n-1.1.6 (2012-04-18)\n-------------------\n-\n-- Add Plone 4.1.5 upgrade step.\n-  [esteele]\n-\n-\n-1.1.5 (2012-02-08)\n-------------------\n-\n-- Fix adding Site Administrator roles for when\n-  custom workflows might not have the permission_roles\n-  for states set.\n-  [vangheem]\n-\n-\n-1.1.4 (2011-11-28)\n-------------------\n-\n-- Avoid 4020->4100 rules being overpassed from a 4022 version.\n-  [tdesvenain]\n-\n-\n-1.1.3 (2011-10-08)\n-------------------\n-\n-- Add upgrade step to re-enable the getObjPositionInParent index in the\n-  portal_atcttool.\n-  [davisagli]\n-\n-\n-1.1.2 (2011-09-22)\n-------------------\n-\n-- Add missing upgrade steps from recent versions of Plone 4.0.x.\n-  [davisagli]\n-\n-\n-1.1.1 (2011-09-21)\n-------------------\n-\n-- Fix v41.alphas.convert_to_uuidindex() to truly ignore acquired\n-  UID values in the index instead of accidentally treating them\n-  as duplicates, due to a bug in path comparison. Fixes for\n-  cases where multiple items without UID() method are contained\n-  in a folder with a UID in a site being upgraded to 4.1:\n-  http://dev.plone.org/plone/ticket/12185\n-\n-- Add upgrade step to fix ZCTextIndex OkapiIndex instances with an\n-  incorrect _totaldoclen\n-  [davisagli]\n-\n-- Migrate type icons from content_icon to icon_expr for all FTIs.\n-  Closes http://dev.plone.org/plone/ticket/12046.\n-  [thomasdesvenain, vincentfretin]\n-\n-\n-1.1 - 2011-07-12\n-----------------\n-\n-- Fix misnamed metadata.xml files in the 4.1 profiles.\n-  [esteele]\n-\n-- Add new upgrade step to add missing UUIDs to Collection-criteria.\n-  Fixes http://dev.plone.org/plone/ticket/11904.\n-  [WouterVH]\n-\n-\n-1.1rc3 - 2011-06-02\n--------------------\n-\n-- In actions.xml, use object_url for the object_buttons.\n-  Fixes http://dev.plone.org/plone/ticket/11733.\n-  [WouterVH]\n-\n-- Actually register the `update_controlpanel_permissions` and\n-  `update_role_mappings` upgrade steps.\n-  [hannosch]\n-\n-\n-1.1rc2 - 2011-05-21\n--------------------\n-\n-- Release 1.1rc2.\n-  [esteele]\n-\n-\n-1.1rc1 - 2011-05-20\n--------------------\n-\n-- Adjusted boolean index conversion to new variable index value support\n-  introduced in ZCatalog 2.13.14.\n-  [hannosch]\n-\n-- Added upgrade step to respect the new blacklisted interface list.\n-  [hannosch]\n-\n-- Added upgrade step to fix the cataloged ids of interfaces in the\n-  `object_provides` index. Closes http://dev.plone.org/plone/ticket/11032.\n-  [hannosch]\n-\n-- Added new upgrade step to optimize date range index and respect the new\n-  floor and ceiling date settings.\n-  [hannosch]\n-\n-- Removed `v40.alphas.optimizeDateRangeIndexes` upgrade step, as it is\n-  superseded by the `v41.alphas.optimize_rangeindex` code and would do an\n-  upgrade that the second step reverted anyways.\n-  [hannosch]\n-\n-- Add MANIFEST.in.\n-  [WouterVH]\n-\n-- Remove unexistant GenericSetup step dependency on plonepas-content.\n-  [kiorky]\n-\n-\n-1.1b2 - 2011-04-06\n-------------------\n-\n-- Added a 4.1b2 profile.\n-  [esteele]\n-\n-\n-1.1b1 - 2011-03-02\n-------------------\n-\n-- Fix handling of BTrees sets when converting the UUIDIndex.\n-  [rossp]\n-\n-- Optimize `DateIndex._unindex` internals.\n-  [hannosch]\n-\n-\n-1.1a3 - 2011-02-14\n-------------------\n-\n-- Upgrade `UID` index to new UUIDIndex.\n-  [hannosch]\n-\n-- Upgrade `is_default_page` and `is_folderish` to new boolean index.\n-  [hannosch]\n-\n-- Upgrade index internals for field, key and range indexes.\n-  [hannosch]\n-\n-- Added 4.1a3 profile.\n-  [esteele]\n-\n-\n-1.1a2 - 2011-02-10\n-------------------\n-\n-- Added 4.1a2 steps.\n-  [esteele]\n-\n-\n-1.1a1 - 2011-01-18\n-------------------\n-\n-- Add CMFPlacefulWorkflow, kupu, iterate and p.a.openid to test dependencies\n-  as the test site zexps contain their objects.\n-  [elro]\n-\n-- Make CMFPlacefulWorkflow, kupu and iterate optional during CMFPlone tests.\n-  [elro]\n-\n-- Depend on ``Products.CMFPlone`` instead of ``Plone``.\n-  [elro]\n-\n-- Added upgrade step to install plone.outputfilters.\n-  [davisagli]\n-\n-- Added properties / actions for Single Sign On login form.\n-  [elro]\n-\n-- Added upgrade steps to add the Site Administrator role and Site Administrators\n-  group and update control panel permissions on upgrading to Plone 4.1a1.\n-  [davisagli]\n-\n-- Added infrastructure for upgrades to Plone 4.1.\n-  [davisagli]\n-\n-\n-1.0.4 - 2011-02-26\n-------------------\n-\n-- Add empty profile for 4.0.3-4.0.4 upgrade.\n-  [esteele]\n-\n-\n-1.0.3 - 2011-01-18\n-------------------\n-\n-- Add empty profile for 4.0.2-4.0.3 upgrade.\n-  [esteele]\n-\n-\n-1.0.2 - 2010-11-15\n-------------------\n-\n-- During the blob migration of files and images, disable link\n-  integrity checking, as it can lead to problems, even though no\n-  content is permanently removed.\n-  Fixes http://dev.plone.org/plone/ticket/10992\n-  and   http://dev.plone.org/plone/ticket/11167\n-  [maurits]\n-\n-\n-1.0.1 - 2010-09-28\n-------------------\n-\n-- Add empty profile for 4.0-4.0.1 upgrade.\n-  [esteele]\n-\n-- Avoid relying on the ``Control_Panel/Products`` section, as it is no longer\n-  used. This closes http://dev.plone.org/plone/ticket/10824.\n-  [hannosch]\n-\n-\n-1.0 - 2010-08-28\n-----------------\n-\n-- Add empty profile for rc1-final upgrade.\n-  [esteele]\n-\n-\n-1.0rc1 - 2010-08-05\n--------------------\n-\n-- Update personal preferences action to its new URL.\n-  [davisagli]\n-\n-- Added `padding-left` to the safe_html style whitelist. This refs\n-  http://dev.plone.org/plone/ticket/10557.\n-  [hannosch]\n-\n-- Update license to GPL version 2 only.\n-  [hannosch]\n-\n-\n-1.0b5 - 2010-07-07\n-------------------\n-\n-- Added upgrade step to remove the ``sunburst_js`` skin layer.\n-  [hannosch]\n-\n-- Upgrade step for removing IE8.js from Sunburst.\n-  [spliter]\n-\n-- Merged the ``recompilePythonScripts`` upgrade step with the unified folder\n-  upgrade step. This avoids an extra complete traversal of the entire site.\n-  [hannosch]\n-\n-- Rewrote the ``updateIconMetadata`` upgrade step for speed.\n-  [hannosch]\n-\n-- Moved the code to remove old persistent Interface records into the\n-  recompilePythonScripts step. This step actually covers all objects.\n-  [hannosch]\n-\n-- Optimized the ``optimizeDateRangeIndexes`` upgrade step to take advantage of\n-  knowledge about index internals instead of a brute force reindexIndex call.\n-  [hannosch]\n-\n-- Optimized the "update getIcon metadata" upgrade step and added a progress\n-  handler to it.\n-  [hannosch]\n-\n-- Enhance the unregisterOldSteps upgrade step, by removing all persistent\n-  steps for which a ZCML steps exists.\n-  [hannosch]\n-\n-- Take a savepoint before starting the unified folder upgrade. This lets us\n-  fail fast if there\'s problems pickling anything.\n-  [hannosch]\n-\n-- Also catch TypeError\'s in the action icons upgrade.\n-  [hannosch]\n-\n-- Added optional CacheFu uninstallation step. This will remove CacheFu tools\n-  if they are detected to be broken.\n-  [hannosch]\n-\n-- Removing action links from Events, since they are in the template (and were\n-  never supposed to have actions in the first place). This fixes\n-  http://dev.plone.org/plone/ticket/10540.\n-  [limi]\n-\n-- Re-add the File and Image FTI icon expressions.\n-  [davisagli]\n-\n-- Add missing upgrade steps for control panels and site properties.\n-  Fixes http://dev.plone.org/plone/ticket/10360\n-  [davisagli]\n-\n-- Modify the restoreTheme upgrade step to improve handling of themes when\n-  upgrading from Plone 3. Now if the skin was "Plone Default", it will be\n-  set to "Plone Classic Theme" if the layers were uncustomized.  If the\n-  layers were customized, the layers and viewlet settings will be copied to\n-  a new skin called "Old Plone 3 Custom Theme", and then "Plone Default"\n-  will be reset to its typical configuration in a fresh Plone 4 site.\n-  This closes http://dev.plone.org/plone/ticket/10399\n-  [davisagli]\n-\n-\n-1.0b4 - 2010-06-03\n-------------------\n-\n-- Add ++resource++plone.app.jquerytools.form.js to jsregistry to accomodate\n-  new jQuery Forms plug in.\n-  http://dev.plone.org/plone/ticket/10603\n-  [smcmahon]\n-\n-- Add upgrade step to convert all files and images to blobs. This closes\n-  http://dev.plone.org/plone/ticket/10366.\n-  [hannosch]\n-\n-- Upgrade the standard File and Image FTI\'s to use blobs. This refs\n-  http://dev.plone.org/plone/ticket/10366.\n-  [hannosch]\n-\n-- Add upgrade step to remove the Large Plone Folder type for Plone 4.0rc1\n-  (there is another step which already turns Large Plone Folders into\n-  unordered regular Folders). Removed references to Large Plone Folder from\n-  old upgrade steps.\n-  [davisagli]\n-\n-\n-1.0b3 - 2010-05-03\n-------------------\n-\n-- Added an automated upgrade step to remove old persistent Zope2 Interface\n-  records. This refs http://dev.plone.org/plone/ticket/10446.\n-  [dunlapm, hannosch]\n-\n-\n-1.0b2 - 2010-04-09\n-------------------\n-\n-- Add an upgrade step to update the getIcon metadata column for core types so\n-  that our new CSS sprited icons can be used.\n-  [esteele]\n-\n-- Update the safe_html transform with the new config params, migrating existing\n-  config from Kupu.\n-  [elro]\n-\n-- Added upgrade step for viewlet changes in Plone 4.0b2.\n-  [davisagli]\n-\n-\n-1.0b1 - 2010-03-08\n-------------------\n-\n-- Update the Plone 4 action icons upgrade step to avoid storing icon\n-  expressions as unicode when possible.\n-  [davisagli]\n-\n-- Add step to update viewlet order and hidden managers for the Sunburst theme\n-  to reflect recent changes.\n-  [davisagli]\n-\n-- Add upgrade step to move added recursive_groups plugin to the bottom of the\n-  IGroupsPlugin list.\n-  [esteele]\n-\n-- Added upgrade step to profile version 4007.\n-  [hannosch]\n-\n-\n-1.0a5 - 2010-02-19\n-------------------\n-\n-- Migrate `getObjPositionInParent` to stub index capable of sorting search\n-  results according to their position in the container, a.k.a. "nogopip".\n-  [witsch]\n-\n-- In migration to 4.0a5, hide the plone.path_bar viewlet from the\n-  plone.portaltop manager for the Sunburst Theme.\n-  [davisagli]\n-\n-- Add new editing control panel.\n-  [hannosch]\n-\n-- Removed the no longer needed history viewlet. This refs\n-  http://dev.plone.org/plone/ticket/10102.\n-  [hannosch]\n-\n-- Added upgrade step to update folderish types to add the \'All content\'\n-  folder_full_view. Include IE fixes and disabling of base2 js.\n-  [elro]\n-\n-- Add upgrade step to cleanup plonetheme.classic CSS resources upon\n-  migration. Make plonetheme.classic visible in the QI.\n-  Refs http://dev.plone.org/plone/ticket/9988.\n-  [dukebody]\n-\n-- Added upgrade step to optimize the internal data structures of date range\n-  indexes as introduced in Zope 2.12.2.\n-  [hannosch]\n-\n-- Changed the cleanUpProductRegistry upgrade step to remove all entries from the\n-  persistent registry and run it again for existing alpha sites.\n-  [hannosch]\n-\n-\n-1.0a4 - 2010-02-01\n-------------------\n-\n-- Fix theme upgrades by making sure that plone_styles gets updated to\n-  classic_styles even when it already exists in the skins tool.\n-  [davisagli]\n-\n-- Add upgrade step to create, but not install, a recursive groups PAS plugin.\n-  [esteele]\n-\n-- Update the `portal_type` of former "Large Folder" content to "Folder".\n-  Refs http://dev.plone.org/plone/ticket/9791.\n-  [witsch]\n-\n-- Make sure the step registry gets cleaned up before the toolset-fixing\n-  profile gets imported, when upgrading to 4.x.\n-  [davisagli]\n-\n-- Add upgrade to pull iefixes from ResourceRegistries.\n-  Refs http://dev.plone.org/plone/ticket/9278.\n-  [dukebody]\n-\n-- Add missing upgrades from Plone 3.3.2 to 3.3.3 to 3.3.4 to 4.0a1.\n-  [davisagli]\n-\n-- Call the portal_metadata DCMI upgrade step from CMFDefault when upgrading\n-  to Plone 4.0b1.\n-  [davisagli]\n-\n-- Enable the diff export in functional upgrade tests, we do a complete\n-  GenericSetup export of all upgraded sites now.\n-  [hannosch]\n-\n-- Remove the hint of doing an export/import comparison for the full upgrades.\n-  These have varying add-ons installed depending on the original site and its\n-  quite hard to get the same add-ons installed again in a new site.\n-  [hannosch]\n-\n-- Added functional upgrade tests based on an actual zexp export of each major\n-  version of Plone. Each one is imported and upgraded. A diff of the upgraded\n-  configuration vs the one of a completely new site is generated. Thanks to\n-  CMF for the inspiration. This closes http://dev.plone.org/plone/ticket/721.\n-  [hannosch]\n-\n-- Declared missing dependencies.\n-  [hannosch]\n-\n-\n-1.0a3 - 2009-12-16\n-------------------\n-\n-- Updated all profile versions in the Plone 4 series to new simple integer\n-  based numbers.\n-  [hannosch]\n-\n-- Updated to match the new profile version for Plone.\n-  [hannosch]\n-\n-- Extended the unregisterOldSteps upgrade step to remove persistent step\n-  registrations now done via ZCML.\n-  [hannosch]\n-\n-- Fixed a reference of jquery.js in the Plone 3.0 upgrade steps. The file was\n-  only introduced in Plone 3.1.\n-  [hannosch]\n-\n-- Moved the join action URL expression update to the 4.0a2-4.0a3 step, since\n-  it never got wired up for a1-a2.\n-  [davisagli]\n-\n-- Removed references to content_icon, which is deprecated in CMFCore 2.2.0\n-  beta 1.\n-  [davisagli]\n-\n-\n-1.0a2 - 2009-12-02\n-------------------\n-\n-- Provide join_form_fields to user_registration_fields migration.\n-  [esteele]\n-\n-- Recompile all persistent Python Scripts during the upgrade.\n-  [hannosch]\n-\n-- Simplify installation of new dependencies and include ``plone.app.imaging``.\n-  [hannosch]\n-\n-- Run the steps found in the ``Products.CMFPlone:dependencies`` profile.\n-  [hannosch]\n-\n-- Remove ``calendarpopup.js`` from portal_javascripts.\n-  [hannosch]\n-\n-- Preserve the default theme after an upgrade instead of making sunburst the\n-  new default. Also ensure the classic_styles layer isn\'t part of sunburst.\n-  [hannosch]\n-\n-- The plone_styles layer is automatically renamed to classic_styles.\n-  [hannosch]\n-\n-- Let the mailhost upgrade step replace broken objects with a fresh standard\n-  mailhost. It\'s likely our new one has the features of the custom product.\n-  [hannosch]\n-\n-- Clean up Zope\'s product registry to deal with removed products and internal\n-  changes to the HelpSys catalogs.\n-  [hannosch]\n-\n-- Deal with more removed import steps and remove them from the registry.\n-  [hannosch]\n-\n-- Cleanup the skins tools and remove broken directory views as well as cleaning\n-  up the skin selections to avoid references to no longer existing directories.\n-  [hannosch]\n-\n-- Remove entries from the toolset registry pointing to no longer existing\n-  tools. This can happen when add-ons have been uninstalled.\n-  [hannosch]\n-\n-- When upgrading to Plone 4.0a1, be sure to update the toolset with new class\n-  locations before importing any other profiles, which might otherwise fail\n-  in the toolset step. Be sure to update the locations for the tools which\n-  moved from CMFPlone to PlonePAS, for upgrades from very old sites.\n-  [davisagli]\n-\n-\n-1.0a1 - 2009-11-17\n-------------------\n-\n-- Added Products.contentmigration as a dependency.\n-  [hannosch]\n-\n-- Fixed removeal of highlightsearchterms.js.\n-  [naro]\n-\n-- Added plonetheme.classic and plonetheme.sunburst as dependencies.\n-  [naro]\n-\n-- Add migration for unified folders.\n-  [witsch]\n-\n-- Replace highlightsearchterms.js with jquery.highlightsearchterms.js\n-  [mj]\n-\n-- Add new default modifiers from CMFEditions on upgrade.\n-  [alecm]\n-\n-- Adjust the sarissa.js condition on upgrading to Plone 4, so that it doesn\'t\n-  break if kupu is absent.\n-  [davisagli]\n-\n-- Make sure the TinyMCE profile and default_editor property get installed when\n-  upgrading to Plone 4 (kupu remains the default editor for upgraded sites).\n-  [davisagli]\n-\n-- Aded Migration for SecureMailHost removal\n-  [alecm]\n-\n-- Added step to remove the plone_various step from the persistent import\n-  step registry.\n-  [davisagli]\n-\n-- Added upgrade step to remove outdated actions and properties from both the\n-  Plone Site and TempFolder FTI.\n-  [hannosch]\n-\n-- Adjusted setupReferencebrowser upgrade step to proper new-style.\n-  [hannosch]\n-\n-- Added property use_email_as_login=False to the site properties in the\n-  Plone 4 alpha migration. Refs http://dev.plone.org/plone/ticket/9214.\n-  [maurits]\n-\n-- Added update of resources to use the authenticated flag instead of a full\n-  expression where possible, in the Plone 4 alpha migration.\n-  [davisagli]\n-\n-- Added renaming of Categories to Tags in the portal_atct tool indices in the\n-  Plone 4 alpha migration.\n-  [davisagli]\n-\n-- Added updating of the actor variable expression for several workflows in the\n-  Plone 4 alpha migration. This helps fix\n-  http://dev.plone.org/plone/ticket/7398.\n-  [davisagli]\n-\n-- Added removal of action for AT graphviz reference visualization from\n-  all content types in the Plone 4 alpha migration.\n-  [davisagli]\n-\n-- Made the action icons migration switch from GIF to PNG where possible,\n-  and correctly handle actions in the document_actions category.\n-  [davisagli]\n-\n-- Added link to upgrade instructions for sites upgraded from Plone < 2.5\n-  (technically, sites using GroupUserFolder)\n-  [davisagli]\n-\n-- Added a INonInstallable utility to hide this package\'s profiles from the\n-  quick installer.\n-  [davisagli]\n-\n-- Fixed a couple profiles that were not registered for IMigratingPloneSiteRoot.\n-  [davisagli]\n-\n-- Added Plone 4 migration step to add icon_expr to FTIs.\n-  [davisagli]\n-\n-- Revert the migration steps for getting rid of the external editor.\n-  [davisagli]\n-\n-- Adjusted action icon migration to handle the configlet icons properly.\n-  [davisagli]\n-\n-- Re-added missing configlet migrations.\n-  [davisagli]\n-\n-- Adjust migration for installing CMFDiffTool to reflect the fact that this is\n-  now configured in CMFPlone.\n-  [davisagli]\n-\n-- Re-add portal_controlpanel to the list of special action providers for the\n-  migrateOldActions function.\n-  [davisagli]\n-\n-- Corrected the migrateActionIcons function to use the correct API for setting\n-  the new icon_expr, so that the icon_expr_object also gets set correctly.\n-  [davisagli]\n-\n-- Adjusted the addMissingWorkflows action to reflect additional variables\n-  returned by the WorkflowDefinitionConfigurator in current DCWorkflow.\n-  [davisagli]\n-\n-- Moved the cleanDefaultCharset action to the 3.0a2-3.0b1 migration; it is a\n-  prerequisite for that step\'s properties.xml import.\n-  [davisagli]\n-\n-- Adjusted the 2.5-3.0a1 step to correct the toolset registry class metadata\n-  for the tools which are located in PlonePAS as of Plone 3.\n-  [davisagli]\n-\n-- Added migration to make sure we\'re using an IRAMCache utility from\n-  zope.ramcache instead of zope.app.cache\n-  [davisagli]\n-\n-- Merged changeset 27805 from 3.3 branch migrations for 3.3rc3 to\n-  3.3rc4 (fix cooked expressions in css registry).\n-  [maurits]\n-\n-- Added the z3c.autoinclude entry point so this package is automatically loaded\n-  on Plone 3.3 and above.\n-  [hannosch]\n-\n-- Import the `replace_local_role_manager` method from borg.localrole.\n-  [hannosch]\n-\n-- Merge changeset 24257 from 3.2 branch migrations for 3.2 to 3.2.1\n-  [calvinhp]\n-\n-- Fixed deprecation warnings for use of Globals.\n-  [hannosch]\n-\n-- Specified package dependencies.\n-  [hannosch]\n-\n-- Updated method calls to PlonePAS. They lost the out argument.\n-  [hannosch]\n-\n-- Adjusted enableZope3Site function to match the new CMF21 upgrade step.\n-  [hannosch]\n-\n-- Removed safeGetMemberDataTool method, which wasn\'t used anywhere.\n-  [hannosch]\n-\n-- Initial implementation.\n-  [hannosch]\n+For 2.0.31 and earlier changes, see the `2.x branch <https://github.com/plone/plone.app.upgrade/blob/2.x/CHANGES.rst>`_.\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-04-12T22:21:28+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/b01a0953a531b961a7a1456f055827d2798f5f92

Update version compatibility info in readme.

Files changed:
M README.rst

b'diff --git a/README.rst b/README.rst\nindex 2f449f1e..9b970cf3 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -1,9 +1,11 @@\n Overview\n ========\n+\n This package contains the upgrade machinery to upgrade a Plone site to a newer version.\n \n Version compatibility\n ---------------------\n-To update to Plone 4.x please use plone.app.upgrade versions up to 1.3.x.\n \n-To update to Plone 5.x and up, use plone.app.upgrade versions 2.x and up.\n+- To update to Plone 4.x please use plone.app.upgrade versions up to 1.3.x.\n+- To update to Plone 5.x, use plone.app.upgrade version 2.x.\n+- To update to Plone 6.x, use plone.app.upgrade version 3.x.\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-04-12T22:23:56+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/b79fe1847335c3c850a37ca004eb7eec61ebab09

Add news snippet

Files changed:
A news/287.bugfix

b'diff --git a/news/287.bugfix b/news/287.bugfix\nnew file mode 100644\nindex 00000000..b80a4e1c\n--- /dev/null\n+++ b/news/287.bugfix\n@@ -0,0 +1 @@\n+Cleanup: pyupgrade, isort, black.  [maurits]\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-04-13T10:20:39+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.upgrade/commit/367a7e836f49130f325893ea9b94d33869eca627

Merge pull request #287 from plone/maurits-isort-black

Cleanup: pyupgrade, isort, black

Files changed:
A news/287.bugfix
M CHANGES.rst
M README.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/upgrade/__init__.py
M plone/app/upgrade/bbb_qi/InstalledProduct.py
M plone/app/upgrade/bbb_qi/QuickInstallerTool.py
M plone/app/upgrade/bbb_qi/__init__.py
M plone/app/upgrade/bbb_qi/interfaces/__init__.py
M plone/app/upgrade/bbb_qi/interfaces/installable.py
M plone/app/upgrade/bbb_qi/interfaces/portal_quickinstaller.py
M plone/app/upgrade/tests/__init__.py
M plone/app/upgrade/tests/base.py
M plone/app/upgrade/tests/test_upgrade.py
M plone/app/upgrade/tests/test_utils.py
M plone/app/upgrade/utils.py
M plone/app/upgrade/v52/__init__.py
M plone/app/upgrade/v52/alphas.py
M plone/app/upgrade/v52/betas.py
M plone/app/upgrade/v52/final.py
M plone/app/upgrade/v52/tests.py
M plone/app/upgrade/v60/__init__.py
M plone/app/upgrade/v60/alphas.py
M plone/app/upgrade/v60/tests.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 4155a59a..44b30fad 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -265,1934 +265,4 @@ Bug fixes:\n - add upgrade steps for HTMLFilter defaults.\n   [petschki] (#233)\n \n-\n-2.0.31 (2019-12-15)\n--------------------\n-\n-Bug fixes:\n-\n-\n-- Make sure plone.staticresources is installed to fix issues with site migrated from 5.0 or 5.1 to 5.2.1.\n-  Fixes https://github.com/plone/Products.CMFPlone/issues/2996\n-  [pbauer] (#223)\n-\n-\n-2.0.30 (2019-12-13)\n--------------------\n-\n-Bug fixes:\n-\n-\n-- Fixed error when upgrading relations.\n-  [maurits] (#220)\n-\n-\n-2.0.29 (2019-12-02)\n--------------------\n-\n-Bug fixes:\n-\n-\n-- Add Collection to the default_page_types setting\n-  [erral] (#216)\n-\n-\n-2.0.28 (2019-09-03)\n--------------------\n-\n-Bug fixes:\n-\n-\n-- Add empty upgrade step for Plone 5.1.6 \n-  [esteele] (#214)\n-\n-\n-2.0.27 (2019-07-10)\n--------------------\n-\n-Bug fixes:\n-\n-\n-- Add upgrade step for Plone 5.2 final\n-  [esteele] (#213)\n-\n-\n-2.0.26 (2019-06-27)\n--------------------\n-\n-Bug fixes:\n-\n-\n-- Add empty upgrade step for Plone 5.2rc5\n-  [esteele] (#212)\n-\n-\n-2.0.25 (2019-06-19)\n--------------------\n-\n-New features:\n-\n-\n-- Upgrade step for optional async loading\n-  [agitator] (#208)\n-- In registry move all interface prefixes for ``ILanguageSchema`` from old place in Products.CMFPlone to plone.i18n.\n-  [jensens] (#210)\n-\n-\n-Bug fixes:\n-\n-\n-- Fix upgrades from Plone 4.3 to 5.2.\n-  [pbauer] (#207)\n-- Reload ISecuritySchema to create plone.autologin_after_password_reset key for Plone 5.2.\n-  [jensens, agitator, maurits] (#2440)\n-\n-\n-2.0.24 (2019-05-04)\n--------------------\n-\n-New features:\n-\n-\n-- Added upgrade step to initialize the date and manual information for redirects.\n-  [maurits] (#2799)\n-\n-\n-Bug fixes:\n-\n-\n-- Fix changing bucket size while reindexing relation catalog.\n-  [jensens] (#201)\n-- Add alias for webdav.LockItem.LockItem. Fixes https://github.com/plone/Products.CMFPlone/issues/2800\n-  [pbauer] (#203)\n-- Moved dotted named behaviors to named behaviors.\n-  [iham] (#204)\n-\n-\n-2.0.23 (2019-03-21)\n--------------------\n-\n-Bug fixes:\n-\n-\n-- Add upgrade steps for PLIP 1653. [thet] (#184)\n-- Add upgrade profile for Plone 5.2beta2\n-  [davilima6]\n-\n-  Add upgrade step for loading Moments.js without locales, which are now lazy loaded\n-  [davilima6] (#199)\n-- Fix changing bucket size while reindexing relation catalog.\n-  [jensens] (#201)\n-\n-\n-2.0.22 (2019-03-04)\n--------------------\n-\n-Bug fixes:\n-\n-\n-- Fixed permission error while removing old resource registries. [maurits]\n-  (#197)\n-- Add bbb for CSSRegistryTool and JSRegistryTool to fix upgrade from 5.0 to 5.2\n-  (#200)\n-\n-\n-2.0.21 (2019-02-13)\n--------------------\n-\n-New features:\n-\n-\n-- Added URL Management controlpanel and object_button action. [maurits] (#1486)\n-\n-\n-Bug fixes:\n-\n-\n-- Tolerate lack of legacy resource registry [ksuess] (#183)\n-- Add missing upgrade step for CMFEditions [MrTango] (#188)\n-- Provide upgrade step that purges and rebuild the _members data structure in\n-  portal_memberdata [pysailor] (#190)\n-- Update all FTIs that use the RichText or LeadImage behaviors (#192)\n-- Add alias for GopipIndex to fix migrations to 5.2 (#193)\n-- Remove interface indexes from relation catalog [jmevissen] (#195)\n-\n-\n-2.0.20 (2018-12-30)\n--------------------\n-\n-Bug fixes:\n-\n-\n-- Plone 5.1.5: Update resource registry ``last_compilation`` date. [thet]\n-  (#186)\n-\n-\n-2.0.19 (2018-12-10)\n--------------------\n-\n-Bug fixes:\n-\n-\n-- migrate GopipIndex which has moved from p.a.folder to p.folder [petschki]\n-  (#177)\n-- Do not break if archetypes related code is not available [ale-rt, pbauer]\n-  (#178)\n-- tolerate lack of legacy resource registry [ksuess] (#182)\n-\n-\n-2.0.16 (2018-10-01)\n--------------------\n-\n-New features:\n-\n-\n-- Add upgrade steps for Datatables on Plone 5.1.4. [frapell] (#168)\n-- Add upgrade step removing the jquery-highlightsearchterms resource and the\n-  plone_ecmascript skin layer, on Plone 5.2 and 5.1.4 [sunew] (#170)\n-- Update bundle dates after recompilation in CMFPlone. [sunew] (#171)\n-- Added upgrade for TinyMCE 4.7.13 on Plone 5.0.10. [obct537] (#174)\n-\n-\n-Bug fixes:\n-\n-\n-- Update resources for plone.app.event. [agitator] (#166)\n-- Prepare for Python 2 / 3 compatibility [ale-rt, pbauer, tlotze] (#173)\n-- make `plone.app.folder` import conditional, because the package is gone in\n-  Plone >= 5.2 [petschki] (#175)\n-- fix tests in Plone >= 5.2 and python 3. As discussed with jensens and\n-  mauritsvanrees we start migration tests beginning from 4.0 final due to\n-  portal_factory property errors. [petschki] (#176)\n-\n-\n-2.0.15 (2018-06-21)\n--------------------\n-\n-New features:\n-\n-- Merge plone.login and remove skins folder plone_login.\n-  [jensens]\n-\n-Bug fixes:\n-\n-- Made several functions less complex by splitting them.  [maurits]\n-\n-- Improved code quality.  [maurits]\n-\n-\n-2.0.14 (2018-04-09)\n--------------------\n-\n-Bug fixes:\n-\n-- Fix i18n domain for some portal_actions that were on plone.app.event domain.\n-  Fixes https://github.com/plone/plone.app.event/pull/204\n-  [gforcada]\n-\n-\n-2.0.13 (2018-04-08)\n--------------------\n-\n-Bug fixes:\n-\n-- Change in TinyMCE css location so bundles can be built without errors\n-  Fixes `issue 2359 <https://github.com/plone/Products.CMFPlone/issues/2359>`_.\n-  [frapell]\n-\n-\n-2.0.12 (2018-03-10)\n--------------------\n-\n-Bug fixes:\n-\n-- Rename retina_scales to highpixeldensity_scales.\n-  Fixes `issue 2331 <https://github.com/plone/Products.CMFPlone/issues/2331>`_.\n-  [maurits]\n-\n-- Hide our \'products\' from installation for both CMFQuickInstallerTool and CMFPlone.\n-  [maurits]\n-\n-\n-2.0.11 (2018-02-05)\n--------------------\n-\n-Bug fixes:\n-\n-- Removed hard dependency on ``CMFQuickInstallerTool``.\n-  And marked the v52 module as non installable.  [maurits]\n-\n-- Import ``setupPasswordPolicyPlugin`` from canonical place in ``PlonePAS``.\n-  [maurits]\n-\n-- Log progress and ignore bad catalog entries while updating catalog metadata.\n-  [davisagli]\n-\n-- Disable CSRF protection when replacing keyring.\n-  This fixes running specific upgrade steps via the portal_setup UI.\n-  [davisagli]\n-\n-- Avoid triggering an unnecessary migration of user logins\n-  when the use_email_as_login setting is migrated to portal_registry.\n-  [davisagli]\n-\n-\n-2.0.10 (2017-12-13)\n--------------------\n-\n-Bug fixes:\n-\n-- Unregister import_steps that were moved to post_handlers.\n-  Fixes https://github.com/plone/Products.CMFPlone/issues/2238\n-  [pbauer]\n-\n-\n-2.0.9 (2017-11-26)\n-------------------\n-\n-New features:\n-\n-- Add upgrade step for 5.2 to register tools as utilities.\n-  Run it before testing the zexp-import.\n-  [pbauer]\n-\n-Bug fixes:\n-\n-- Fixed WrongType exception when migrating installed Iterate to 5.0.\n-  [maurits]\n-\n-- Adapt to changes in CMF 2.4 (getCurrentKeyFormat removed) and Zope 4 (not Products in Control Panel).\n-  [pbauer]\n-\n-- Register upgrades for Plone 5.2\n-  [pbauer]\n-\n-- Fix installation of IUserGroupsSettingsSchema into registry for Plone 5.0rc1.\n-  [davisagli]\n-\n-- Avoid swallowing errors during registry setting upgrades.\n-  [davisagli]\n-\n-2.0.8 (2017-09-25)\n-------------------\n-\n-Bug fixes:\n-\n-- Fix deletion of registry records in ``remove_duplicate_iterate_settings``\n-  from the ``5108`` upgrade.\n-  [thet]\n-\n-- Register Plone 5.1 upgrade steps.\n-  [thet]\n-\n-- Register settings for safe_html-Transform when migrating from 5107 to 5108\n-  [pbauer]\n-\n-- Use str() when migrating checkout_workflow_policy since the field is ASCII.\n-  See discussion at https://github.com/plone/plone.app.iterate/pull/53\n-  [pbauer]\n-\n-- Use safe_unicode to migrate some settings. Fixes https://github.com/plone/plone.app.upgrade/issues/104\n-  [pbauer]\n-\n-2.0.7 (2017-09-10)\n-------------------\n-\n-New features:\n-\n-- Add jqtree-contextmenu to the resource registry for Plone 5.0 and 5.1\n-  [b4oshany]\n-\n-- Add js-shortcuts to the resource registry for Plone 5.0 and 5.1\n-  [b4oshany]\n-\n-Bug fixes:\n-\n-- Recover missing dashboard (user actions)\n-  https://github.com/plone/Products.CMFPlone/issues/1132\n-  [fgrcon]\n-\n-- Register settings for safe_html-Transform before linkintegrity-migration in 5.0rc1\n-  Fixes https://github.com/plone/Products.CMFPlone/issues/2129\n-  [pbauer]\n-\n-- Fix migration if safe_html-Settings to not drop tags without a closing tag.\n-  Fixes https://github.com/plone/Products.CMFPlone/issues/2088\n-  [pbauer]\n-\n-- Cleanup duplicate iterate settings. See also https://github.com/plone/plone.app.iterate/pull/47\n-  [pbauer]\n-\n-\n-2.0.6 (2017-08-05)\n-------------------\n-\n-New features:\n-\n-- Added ``Show Toolbar`` permission.\n-  [agitator]\n-\n-Bug fixes:\n-\n-- Fix #84 - usage of aq_base\n-  [jensens]\n-\n-\n-2.0.5 (2017-07-03)\n-------------------\n-\n-Bug fixes:\n-\n-- Plone 5.1: Fixup timezone record fields, as old interface\n-  plone.app.event.bbb.interfaces.IDateAndTimeSchema is gone since\n-  plone.app.event 3.0.2.\n-  [thet]\n-\n-- Fix upgrade step for ISocialMediaSchema\n-  [MrTango]\n-\n-\n-2.0.4 (2017-06-04)\n-------------------\n-\n-New features:\n-\n-- New Options for thumb- and icon-handling in site control panel\n-  https://github.com/plone/Products.CMFPlone/issues/1734\n-  upgradesteps to 5.1b4\n-  [fgrcon]\n-\n-- TinyMCE 4.5.6 update.\n-  [thet]\n-\n-- Update registry for Plone 5.1 to integrate ``mockup-patterns-structureupdater``.\n-  [thet]\n-\n-Bug fixes:\n-\n-- Register ``ISiteSyndicationSettings`` again.\n-  This interface was updated in 5.0rc3.\n-  On older sites, this would cause an error on the ``syndication-controlpanel``:\n-  KeyError: \'Interface `Products.CMFPlone.interfaces.syndication.ISiteSyndicationSettings` defines a field `render_body`, for which there is no record.\n-  [maurits]\n-\n-- Catch warning the pythonic way.\n-  Makes it work with latest CMFCore.\n-  [jensens]\n-\n-- Fix and ``AttributeError`` for the Plone 5.1 beta 4 upgrade.\n-  [thet]\n-\n-\n-2.0.3 (2017-04-18)\n-------------------\n-\n-New features:\n-\n-- Add Plone 5.1 beta 4 upgrade profile.\n-  [thet]\n-\n-- new metadata catalog column mime_type\n-  https://github.com/plone/Products.CMFPlone/issues/1995\n-  [fgrcon]\n-\n-Bug fixes:\n-\n-- Do not convert/fail on None while update_social_media_fields\n-  [agitator]\n-\n-- Fixed ImportError when ``Products.ATContentTypes`` is not available.\n-  This happens when you only have the ``Products.CMFPlone`` egg\n-  and not the ``Plone`` egg.  [maurits]\n-\n-- Fixed title and description of plone.resource.maxage.\n-  This had the title and description from shared maxage,\n-  due to a wrong reference.\n-  See https://github.com/plone/Products.CMFPlone/issues/1989\n-  [maurits]\n-\n-- Removed "change portal events"\n-  [kakshay21]\n-\n-2.0.2 (2017-04-03)\n-------------------\n-\n-New features:\n-\n-- Add image scaling options to image handling controlpanel\n-  when migrating to 5.1b3.\n-  [didrix]\n-\n-Bug fixes:\n-\n-- Update ``twitter_username``, ``facebook_app_id`` and ``facebook_username`` field values as they are now declared as ``ASCIILine`` instead of ``TextLine``.\n-  [hvelarde]\n-\n-\n-2.0.1 (2017-03-09)\n-------------------\n-\n-Bug fixes:\n-\n-- Adapt tests to the new indexing operations queueing.\n-  Part of PLIP 1343: https://github.com/plone/Products.CMFPlone/issues/1343\n-  [gforcada]\n-\n-- Fix registration of upgrade-step to Plone 5.1a1\n-  [pbauer]\n-\n-2.0.0 (2017-02-20)\n-------------------\n-\n-Breaking changes:\n-\n-- Remove really old upgrade steps (everything up to v40).\n-  [gforcada]\n-\n-New features:\n-\n-- New mockup releases for Plone 5.0 and 5.1.\n-  [thet]\n-\n-- Remove jquery.cookie from plone-logged-in bundle\'s stub_js_modules.\n-  The toolbar, which has a dependency on jquery.cookie,\n-  was moved from the plone bundle to plone-logged-in in CMPlone 5.1a2.\n-  [thet]\n-\n-- Products.MimetypesRegistry has no longer a skins layer, remove it.\n-  [jensens]\n-\n-- Add sort_on field to search controlpanel.\n-  [rodfersou]\n-\n-- Support sites without ``portal_quickinstaller``.\n-  We use ``get_installer`` in Plone 5.1 migrations.\n-  In earlier version we will keep using the ``portal_quickinstaller``,\n-  because ``get_installer`` is not available.\n-  In shared utility and base code, we try to import get_installer,\n-  and fall back on the previous implementation.\n-  See `PLIP 1340 <https://github.com/plone/Products.CMFPlone/issues/1340>`_.\n-  [maurits]\n-\n-- Add new Mockup 2.4.0 relateditems resource url.\n-  Add new optional relateditems upload resource.\n-  [thet]\n-\n-- Update ``last_compilation`` to deliver new bundles.\n-  [thet]\n-\n-- Move PasswordResetTool to CMFPlone.\n-  *Note: Pending password resets are deleted.*\n-  [tomgross]\n-\n-- Adopt to changes in Zope4\n-  [pbauer]\n-\n-Bug fixes:\n-\n-- Remove displayContentsTab from action expressions in 5.1.\n-  Fixes https://github.com/plone/Products.CMFPlone/issues/1935.\n-  [maurits]\n-\n-- Fix move_pw_reset_tool upgrade step\n-  [agitator]\n-\n-- Install plone.app.caching in 5.0 alpha if available.\n-  When it is already installed, upgrade it.\n-  [maurits]\n-\n-- Install plone.app.theming in 5.0 alpha.\n-  When it is already installed, upgrade it.\n-  [maurits]\n-\n-- Fixed AttributeError ``use_content_negotiation`` when migrating old language tool.\n-  Not all versions have the same properties available.\n-  Now we only take over existing properties.\n-  5.0 beta.\n-  [maurits]\n-\n-- Fixed ConstraintNotSatisfied when default_editor is not allowed.\n-  5.0 alpha.\n-  [maurits]\n-\n-- Enabled update from latest 4.3 profile revision.\n-  Otherwise we would skip a few upgrade steps when migrating to\n-  Plone 5.  [maurits]\n-\n-- Don\'t remove sub skin layers when cleaning ``portal_skins``.\n-  Created ``utils.cleanUpSkinsTool`` method which has generally useful\n-  code for cleaning up the skins.\n-  Fixes `issue 87 <https://github.com/plone/plone.app.upgrade/issues/87>`_.\n-  [maurits]\n-\n-- Install plone.resource in Plone 5.0 alpha 3.  Fixes possible\n-  ``TypeError: argument of type \'NoneType\' is not iterable`` when\n-  migrating from Plone 4.3 for a site that did not have plone.resource\n-  or diazo installed yet.\n-  Fixes `issue 1756 <https://github.com/plone/Products.CMFPlone/issues/1756>`_. [maurits]\n-\n-- Be sure smtp_port is an integer.\n-  [ale-rt]\n-\n-- Fix upgrade step for PasswordResetTool if there was never da different value than the default was set.\n-  [jensens]\n-\n-- Check whether avoiding exception in RealUpgradeLayer setup avoids polluting test environment.\n-  [davisagli]\n-\n-- avoid error in layer teardown\n-  [davisagli]\n-\n-1.3.27 (2016-08-16)\n--------------------\n-\n-Bug fixes:\n-\n-- Add empty upgrade step for 4.3.11.\n-  [esteele]\n-\n-- Add empty upgrade step for 5.0.6.\n-  [esteele]\n-\n-\n-1.3.26 (2016-08-15)\n--------------------\n-\n-Bug fixes:\n-\n-- Remove deprecated ``mockup-registry`` and ``mockup-parser`` resources.\n-  [thet]\n-\n-- Update ``last_compilation`` to deliver new bundles.\n-  [thet]\n-\n-- Add missing ``jquery.browser`` dependency which is needed by patternslib.\n-  [thet]\n-\n-- Use zope.interface decorator.\n-  [gforcada]\n-\n-1.3.25 (2016-06-21)\n--------------------\n-\n-New:\n-\n-- Adds controlpanel setting to enable navigation root bound keyword vocabularies.\n-  [jensens]\n-\n-- Update to 5.1a2 upgrade step to allow upgrades from Plone 5.1a1.\n-  [jensens]\n-\n-\n-1.3.24 (2016-03-31)\n--------------------\n-\n-New:\n-\n-- Add actions controlpanel when migrating to 5.1a1.\n-  [esteele]\n-\n-- Add null upgrade step for 5.0.3 to 5.0.4\n-  [esteele]\n-\n-\n-1.3.23 (2016-03-31)\n--------------------\n-\n-Fixes:\n-\n-- Update 5.0a1 upgrade step to allow upgrades from Plone 5.0.3.\n-  [esteele]\n-\n-\n-1.3.22 (2016-03-29)\n--------------------\n-\n-New:\n-\n-- Registry upgrades for Plone 5.1 (less variables).\n-  [jensens]\n-\n-\n-1.3.21 (2016-02-24)\n--------------------\n-\n-New:\n-\n-- Registry upgrades for Plone 5.0.3\n-  [vangheem]\n-\n-- Hidden the v50 module from the installable products, just like our\n-  other modules.  [maurits]\n-\n-Fixes:\n-\n-- Use `unsetLastVersionForProfile` from GenericSetup 1.8.1 and\n-  higher.  [maurits]\n-\n-- Fix ``cleanUpProductRegistry`` to not break when ``Control_Panel`` cannot be found.\n-  Fixes test failures with Zope 4.\n-  [thet]\n-\n-\n-1.3.20 (2016-01-08)\n--------------------\n-\n-Fixes:\n-\n-- Run missing upgrade-step of plone.app.querystring when upgrading to 5.0.2.\n-  [pbauer]\n-\n-\n-1.3.19 (2015-12-17)\n--------------------\n-\n-New:\n-\n-- reapply profile for site-controlpanel\n-  plone/Products.CMFPlone#124\n-  [fgrcon]\n-\n-- extended step to501 to recreate metadata for getIcon, see\n-  plone/Products.CMFPlone#1226, #58, #60, #61\n-  [fgrcon, gagaro, jensens]\n-\n-- Removed fake kupu tool and related settings and resources.\n-  [maurits]\n-\n-- Cleanup the skins tool.\n-  [maurits]\n-\n-- Cleanup uninstalled products.  Remove uninstalled products from QI\n-  and mark their installed profile version as unknown.\n-  [maurits]\n-\n-- If non installable profiles (really: hidden profiles) have been\n-  installed in GS, mark their products as installed in the QI.  This\n-  does not work when also that *product* is marked as non installable,\n-  because in normal operation (outside of plone.app.upgrade) this does\n-  not happen either.\n-  [maurits]\n-\n-- Unmark installed profiles that are no longer available.\n-  [maurits]\n-\n-Fixes:\n-\n-- Fixed removal of Large Plone Folder when migrating from Plone 3.\n-  [maurits]\n-\n-\n-1.3.18 (2015-09-27)\n--------------------\n-\n-- Add migration for ILinkSchema\n-  [vangheem]\n-\n-- Add migration for TinyMCE settings\n-  [vangheem]\n-\n-- Fix migration of typesUseViewActionInListings to registry.\n-  [pbauer]\n-\n-- Fix incorrect interate import.\n-  [alecm]\n-\n-\n-1.3.17 (2015-09-22)\n--------------------\n-\n-- Fix issues with missing registry-entries when upgrading 5.0rc2 -> 5.0rc3.\n-  [pbauer]\n-\n-\n-1.3.16 (2015-09-20)\n--------------------\n-\n-- Plone 4.3: upgrade TinyMCE correctly.  Update sunburst theme profile\n-  version when applying its upgrade step.  Update CMFEditions.  Update\n-  plone.app.jquery.\n-  This fixes\n-  https://github.com/plone/Products.CMFPlone/issues/812\n-  [maurits]\n-\n-- Portal properties calendar_starting_year and calendar_future_years_available\n-  were moved to registry.\n-  [pbauer]\n-\n-- Remove unused invalid_ids portal property\n-  [esteele]\n-\n-\n-1.3.15 (2015-09-11)\n--------------------\n-\n-- Fix migration of types_not_searched to registry.\n-  Fixes https://github.com/plone/plone.app.contenttypes/issues/268\n-  [pbauer]\n-\n-- Remove site properties that have been migrated to the registry.\n-  [esteele]\n-\n-\n-1.3.14 (2015-09-08)\n--------------------\n-\n-- Remove no-longer-used properties from portal_properties\n-  [esteele]\n-\n-- Remove plone_forms skins folder for 5.0 rc1\n-  [esteele]\n-\n-- Install plone.app.linkintegrity and migrate linkintegrity-relations.\n-  [pbauer]\n-\n-\n-1.3.13 (2015-08-23)\n--------------------\n-\n-- Unregister removed collection.css.\n-  [pbauer]\n-\n-- 5.0 beta: do not set ``url_expr`` on configlet.  This must be done\n-  with ``setActionExpression``.\n-  Fixes https://github.com/plone/Products.CMFPlone/issues/814\n-  [maurits]\n-\n-- Turn @@tinymce-controlpanel ``content_css`` field into a list\n-  [ebrehault]\n-\n-\n-1.3.12 (2015-07-23)\n--------------------\n-\n-- Fix for 5.0b2 -> 5.0b3 upgrade step that removed permissions from most of\n-  the control panel configlets. This fixes:\n-  https://github.com/plone/Products.CMFPlone/issues/745\n-  [sneridagh, timo]\n-\n-\n-1.3.11 (2015-07-20)\n--------------------\n-\n-- upgrade plone buttons to not have so many things open in modals\n-  [vangheem]\n-\n-- uninstall mockup-pattern-accessibility pattern registration\n-  [vangheem]\n-\n-- add Products.CMFPlacefulWorkflow as dep as __init__ requires this\n-  [maartenkling]\n-\n-- add social media control panel upgrade\n-  [vangheem]\n-\n-- upgrades for plone 5 tinymce configuration and social tags config\n-  [vangheem]\n-\n-- add step for updated dropzone resource location\n-  [vangheem]\n-\n-- remove plone.app.jquery dependency\n-  [vangheem]\n-\n-- Add jquerytools removal upgrade\n-  [vangheem]\n-\n-- Plone 5: upgrade manage portlets js\n-  [vangheem]\n-\n-- Remove hard dependency on CMFDefault\n-  [tomgross]\n-\n-- Update the category configlet of all the configlets in order to provide a way\n-  to categorize properly each configlet [sneridagh]\n-\n-- Updated links for the renamed \'Types\' control panel [sneridagh]\n-\n-\n-1.3.10 (2015-05-13)\n--------------------\n-\n-- Plone 4.3: Enable NewsML feed syndication\n-  [tcurvelo]\n-\n-- Plone 5: Migrate imagine control panel settings to the configuration\n-  registry\n-  [vangheem]\n-\n-- Plone 5: Solve CMFPlacefulWorkflow __iro__ problem because\n-  of moving their paths when upgrading\n-  [bloodbare]\n-\n-\n-1.3.9 (2015-03-26)\n-------------------\n-\n-- LanguageTool/plone.app.multilingual migration\n-  [bloodbare]\n-\n-- Update tests after removal of ``allowAnonymousViewAbout`` and\n-  ``validate_email`` properties in CMFPlone.\n-  [jcerjak]\n-\n-- Do not run tests not suited for the current Plone version\n-  (implemented for 4.0 and below)\n-  [jensens]\n-\n-- Add upgrade step for the security control panel.\n-  [jcerjak]\n-\n-- Add upgrade step for mail control panel. Refs PLIP 10359.\n-  [jcerjak, khink]\n-\n-- Add upgrade steps for markup control panel.\n-  [thet]\n-\n-\n-1.3.8 (2014-11-01)\n-------------------\n-\n-- Add upgrade steps for editing, maintenance, navigation, search,\n-  and site control panels.\n-  [tisto]\n-\n-\n-1.3.7 (2014-10-22)\n-------------------\n-\n-- Add upgrade-profile for vs5002 and update rolemap.xml to include\n-  "Mail forgotten password"-permission also to Managers.\n-  [ida]\n-\n-- Added upgrade step for plone.app.querystring which adds new operations and\n-  fields\n-  [ichim-david]\n-\n-- Plone 5 upgrade: Respect previous installed plone.app.event when migrating\n-  first_weekday setting.\n-  [thet]\n-\n-- #12286 Need (Plone 4.0 upgrade) migration step for hidden static text\n-  portlets\n-  [anthonygerrard]\n-\n-- provide upgrade step for plone.protect\n-  [vangheem]\n-\n-\n-1.3.6 (2014-03-02)\n-------------------\n-\n-- Migrate theme settings, install Barceloneta.\n-  [davisagli]\n-\n-- Migrate Members folder default view\n-  [davisagli]\n-\n-\n-1.3.5 (2014-02-19)\n-------------------\n-\n-- Be sure the improved syndication settings introduced in the 4.3 series\n-  are applied on upgrade.\n-  [gbastien]\n-\n-- Avoid failure at lexicon upgrade (4.3rc1)\n-  when we have an integrity error into the ZCTextIndex.\n-  [thomasdesvenain]\n-\n-- Install plone.app.event and remove portal_calendar when upgarding to Plone 5.\n-  [davisagli]\n-\n-- Remove portal_interface when upgrading to Plone 5.\n-  [ale-rt]\n-\n-- Remove portal_actionicons, portal_discussion, and portal_undo when\n-  upgrading to Plone 5.\n-  [davisagli]\n-\n-- Add condition to the upgrade step to add scaling-quality 4.3-final.\n-  plone.app.imaging no longer has the imaging_properties (moved to CMFPlone)\n-  so they are not there in plone5-tests.\n-  [pbauer]\n-\n-- Add conditional install of plonetheme.classic in upgrade step 4.0a1. Since\n-  plonetheme.classic will be removed in Plone 5, we can not be sure that it\n-  is always installed.\n-  [timo]\n-\n-- Replace deprecated test assert statements.\n-  [timo]\n-\n-- Add undeclared Products.TinyMCE dependency.\n-  [timo]\n-\n-- Add use_uuid_as_userid site property in Plone 5.\n-  Part of PLIP 13419.\n-  [maurits]\n-\n-- Use lowercase for email login in Plone 5.\n-  Part of PLIP 13419.\n-  [maurits]\n-\n-- Remove persistent kss_mimetype import step.\n-  [maurits]\n-\n-- Fix name of Plone 5 zcml conditional feature to plone-5.\n-  [thet]\n-\n-- Don\'t fail on out of date catalog when upgrading syndication for 4.3\n-  [tomgross]\n-\n-- Add Default Plone Password Policy to Plone\'s acl_users.\n-  [gbastien]\n-\n-1.3.4 (2013-08-14)\n-------------------\n-\n-- Replace basic infrastructure for 4.4 series with same for 5.0 series.\n-  [davisagli]\n-\n-- Upgrade TinyMCE: Remove space from style to prevent bogus class.\n-  [maurits]\n-\n-\n-1.3.3 (2013-06-13)\n-------------------\n-\n-- Add upgrade step to set image scaling quality (p.a.imaging 1.0.8).\n-  [khink]\n-\n-- Upgrade broken \'added\' content rules.\n-  [thomasdesvenain]\n-\n-- handle syndication upgrade when folder is not syndication enabled but\n-  has syndication information.\n-  [vangheem]\n-\n-\n-1.3.2 (2013-05-30)\n-------------------\n-\n-- Nothing changed yet.\n-\n-\n-1.3.1 (2013-04-13)\n-------------------\n-\n-- Fix upgrade-step upgradeSyndication for Dexterity\n-  [pbauer]\n-\n-\n-1.3 (2013-04-06)\n-----------------\n-\n-- Add basic upgrade infrastructure for the Plone 4.4 series.\n-  [davisagli]\n-\n-- Do not import Products.kupu. Fixes https://dev.plone.org/ticket/13480\n-  [danjacka]\n-\n-\n-1.3rc1 (2013-03-05)\n--------------------\n-\n-- add step for rc1 to upgrade catalog correctly\n-  [vangheem]\n-\n-- Avoid hard dependency on ATContentTypes.\n-  [davisagli]\n-\n-\n-1.3b2 (2013-01-17)\n-------------------\n-\n-- Run plonetheme.sunburst 1.4 upgrade.\n-  [esteele]\n-\n-- Add upgrade step for plone.app.discussion.\n-  [toutpt]\n-\n-\n-1.3b1 (2013-01-01)\n-------------------\n-\n-- Make sure the syndication upgrade step unregisters the old tool\n-  as a utility.\n-  [davisagli]\n-\n-- Add upgrade for version 4.3b1 to make sure TinyMCE is upgraded.\n-  [davisagli]\n-\n-- In the UID index migration, if there are items whose key is None,\n-  skip them instead of complaining about there being multiple items.\n-  [davisagli]\n-\n-\n-1.3a2 (2012-10-18)\n-------------------\n-\n-- Add upgrade step to remove KSS.\n-  [vangheem, davisagli]\n-\n-- Remove old upgrades that depended on KSS being present.\n-  [davisagli]\n-\n-- Make sure registry settings for syndication and ResourceRegisties bundles\n-  are set up for Plone 4.3.\n-  [vangheem, davisagli]\n-\n-- Make plone.app.theming upgrade steps only run when plone.app.theming is\n-  installed (i.e. not for a plain Products.CMFPlone site.)\n-  [elro]\n-\n-1.3a1 (2012-08-31)\n-------------------\n-\n-- Added Plone 4.3 upgrade step to apply plone.app.jquery 1.5 upgrade step.\n-  [esteele]\n-\n-- Added Plone 4.3 upgrade step to re-install plone.app.theming (Diazo theme\n-  support) if installed previously. This will upgrade the control panel to the\n-  new unified one.\n-  [optilude]\n-\n-- Added Plone 4.3 upgrade step to make sure TinyMCE 1.3 upgrade steps are run.\n-  [davisagli]\n-\n-- Added upgrade step for new sortable_title logic.\n-  [hannosch]\n-\n-- Add \'displayPublicationDateInByline\' property to site properties sheet.\n-  Required for PLIP #8699.\n-  [vipod]\n-\n-- Remove the plone_deprecated skin layer from all skins in Plone 4.3.\n-  [davisagli]\n-\n-- Provide kupu tool module alias, so upgrade steps can read data from it.\n-  [hannosch]\n-\n-- Remove kupu from the test dependencies.\n-  [hannosch]\n-\n-- Make the RAM cache utility upgrade work without zope.app.cache.\n-  [davisagli]\n-\n-- Fix an issue in an old upgrade step when used with current\n-  ResourceRegistries.\n-  [davisagli]\n-\n-- Add Member role to View dashboard permission\n-  [gaudenz]\n-\n-- Install plone.app.search when upgrading.\n-  [esteele]\n-\n-- Plone 4.1.5 upgrade step added that makes sure that plone.app.discussion\n-  has been properly installed.\n-  [timo]\n-\n-1.2.5 (2013-03-05)\n-------------------\n-\n-- Add upgrade profile for Plone 4.2.5\n-  [esteele]\n-\n-\n-1.2.4 (2013-01-17)\n-------------------\n-\n-- Add upgrade profile for Plone 4.2.4\n-  [esteele]\n-\n-- Add missing to_423 folder.\n-  [esteele]\n-\n-\n-1.2.3 (2012-12-15)\n-------------------\n-\n-- Add upgrade profile for Plone 4.2.3\n-  [esteele]\n-\n-- In the UID index migration, if there are items whose key is None,\n-  skip them instead of complaining about there being multiple items.\n-  [davisagli]\n-\n-\n-1.2.2 (2012-10-15)\n-------------------\n-\n-- Add upgrade step to make sure the registry record for ResourceRegistries\n-  bundles is installed.\n-  [davisagli]\n-\n-\n-1.2.1 (2012-08-11)\n-------------------\n-\n-- Add upgrade profile for Plone 4.2.1\n-  [esteele]\n-\n-\n-1.2 (2012-06-29)\n-----------------\n-\n-- Add upgrade step to install the CMFEditions component registry bases\n-  modifier.\n-  [rossp]\n-\n-\n-1.2rc2 (2012-05-31)\n--------------------\n-\n-- Add profile for Plone 4.2rc2\n-  [esteele]\n-\n-\n-1.2rc1 (2012-05-07)\n--------------------\n-\n-- Fix an issue in an old upgrade step when used with current\n-  ResourceRegistries.\n-  [davisagli]\n-\n-- Add Member role to View dashboard permission\n-  [gaudenz]\n-\n-- Install plone.app.search when upgrading.\n-  [esteele]\n-\n-- Plone 4.1.5 upgrade step added that makes sure that plone.app.discussion\n-  has been properly installed.\n-  [timo]\n-\n-\n-1.2b2 (2012-02-09)\n-------------------\n-\n-- Fix adding Site Administrator roles for when\n-  custom workflows might not have the permission_roles\n-  for states set.\n-  [vangheem]\n-\n-\n-1.2b1 (2011-12-05)\n-------------------\n-\n-- Avoid 4020->4100 rules being overpassed from a 4022 version.\n-  [tdesvenain]\n-\n-- Add upgrade step to re-enable the getObjPositionInParent index in the\n-  portal_atcttool.\n-  [davisagli]\n-\n-- Add upgrade step to add Site Administrator to allowRolesToAddKeywords.\n-  [esteele]\n-\n-1.2a2 - 2011-08-25\n-------------------\n-\n-- Release 1.2a2\n-  [esteele]\n-\n-\n-1.2a1 - 2011-08-08\n-------------------\n-\n-- Removed input-label.js from portal_javascript in the 4.2 alpha profile.\n-  [spliter]\n-\n-\n-1.1.7 (2012-06-27)\n-------------------\n-\n-- Add Plone 4.1.6 upgrade step.\n-  [esteele]\n-\n-\n-1.1.6 (2012-04-18)\n-------------------\n-\n-- Add Plone 4.1.5 upgrade step.\n-  [esteele]\n-\n-\n-1.1.5 (2012-02-08)\n-------------------\n-\n-- Fix adding Site Administrator roles for when\n-  custom workflows might not have the permission_roles\n-  for states set.\n-  [vangheem]\n-\n-\n-1.1.4 (2011-11-28)\n-------------------\n-\n-- Avoid 4020->4100 rules being overpassed from a 4022 version.\n-  [tdesvenain]\n-\n-\n-1.1.3 (2011-10-08)\n-------------------\n-\n-- Add upgrade step to re-enable the getObjPositionInParent index in the\n-  portal_atcttool.\n-  [davisagli]\n-\n-\n-1.1.2 (2011-09-22)\n-------------------\n-\n-- Add missing upgrade steps from recent versions of Plone 4.0.x.\n-  [davisagli]\n-\n-\n-1.1.1 (2011-09-21)\n-------------------\n-\n-- Fix v41.alphas.convert_to_uuidindex() to truly ignore acquired\n-  UID values in the index instead of accidentally treating them\n-  as duplicates, due to a bug in path comparison. Fixes for\n-  cases where multiple items without UID() method are contained\n-  in a folder with a UID in a site being upgraded to 4.1:\n-  http://dev.plone.org/plone/ticket/12185\n-\n-- Add upgrade step to fix ZCTextIndex OkapiIndex instances with an\n-  incorrect _totaldoclen\n-  [davisagli]\n-\n-- Migrate type icons from content_icon to icon_expr for all FTIs.\n-  Closes http://dev.plone.org/plone/ticket/12046.\n-  [thomasdesvenain, vincentfretin]\n-\n-\n-1.1 - 2011-07-12\n-----------------\n-\n-- Fix misnamed metadata.xml files in the 4.1 profiles.\n-  [esteele]\n-\n-- Add new upgrade step to add missing UUIDs to Collection-criteria.\n-  Fixes http://dev.plone.org/plone/ticket/11904.\n-  [WouterVH]\n-\n-\n-1.1rc3 - 2011-06-02\n--------------------\n-\n-- In actions.xml, use object_url for the object_buttons.\n-  Fixes http://dev.plone.org/plone/ticket/11733.\n-  [WouterVH]\n-\n-- Actually register the `update_controlpanel_permissions` and\n-  `update_role_mappings` upgrade steps.\n-  [hannosch]\n-\n-\n-1.1rc2 - 2011-05-21\n--------------------\n-\n-- Release 1.1rc2.\n-  [esteele]\n-\n-\n-1.1rc1 - 2011-05-20\n--------------------\n-\n-- Adjusted boolean index conversion to new variable index value support\n-  introduced in ZCatalog 2.13.14.\n-  [hannosch]\n-\n-- Added upgrade step to respect the new blacklisted interface list.\n-  [hannosch]\n-\n-- Added upgrade step to fix the cataloged ids of interfaces in the\n-  `object_provides` index. Closes http://dev.plone.org/plone/ticket/11032.\n-  [hannosch]\n-\n-- Added new upgrade step to optimize date range index and respect the new\n-  floor and ceiling date settings.\n-  [hannosch]\n-\n-- Removed `v40.alphas.optimizeDateRangeIndexes` upgrade step, as it is\n-  superseded by the `v41.alphas.optimize_rangeindex` code and would do an\n-  upgrade that the second step reverted anyways.\n-  [hannosch]\n-\n-- Add MANIFEST.in.\n-  [WouterVH]\n-\n-- Remove unexistant GenericSetup step dependency on plonepas-content.\n-  [kiorky]\n-\n-\n-1.1b2 - 2011-04-06\n-------------------\n-\n-- Added a 4.1b2 profile.\n-  [esteele]\n-\n-\n-1.1b1 - 2011-03-02\n-------------------\n-\n-- Fix handling of BTrees sets when converting the UUIDIndex.\n-  [rossp]\n-\n-- Optimize `DateIndex._unindex` internals.\n-  [hannosch]\n-\n-\n-1.1a3 - 2011-02-14\n-------------------\n-\n-- Upgrade `UID` index to new UUIDIndex.\n-  [hannosch]\n-\n-- Upgrade `is_default_page` and `is_folderish` to new boolean index.\n-  [hannosch]\n-\n-- Upgrade index internals for field, key and range indexes.\n-  [hannosch]\n-\n-- Added 4.1a3 profile.\n-  [esteele]\n-\n-\n-1.1a2 - 2011-02-10\n-------------------\n-\n-- Added 4.1a2 steps.\n-  [esteele]\n-\n-\n-1.1a1 - 2011-01-18\n-------------------\n-\n-- Add CMFPlacefulWorkflow, kupu, iterate and p.a.openid to test dependencies\n-  as the test site zexps contain their objects.\n-  [elro]\n-\n-- Make CMFPlacefulWorkflow, kupu and iterate optional during CMFPlone tests.\n-  [elro]\n-\n-- Depend on ``Products.CMFPlone`` instead of ``Plone``.\n-  [elro]\n-\n-- Added upgrade step to install plone.outputfilters.\n-  [davisagli]\n-\n-- Added properties / actions for Single Sign On login form.\n-  [elro]\n-\n-- Added upgrade steps to add the Site Administrator role and Site Administrators\n-  group and update control panel permissions on upgrading to Plone 4.1a1.\n-  [davisagli]\n-\n-- Added infrastructure for upgrades to Plone 4.1.\n-  [davisagli]\n-\n-\n-1.0.4 - 2011-02-26\n-------------------\n-\n-- Add empty profile for 4.0.3-4.0.4 upgrade.\n-  [esteele]\n-\n-\n-1.0.3 - 2011-01-18\n-------------------\n-\n-- Add empty profile for 4.0.2-4.0.3 upgrade.\n-  [esteele]\n-\n-\n-1.0.2 - 2010-11-15\n-------------------\n-\n-- During the blob migration of files and images, disable link\n-  integrity checking, as it can lead to problems, even though no\n-  content is permanently removed.\n-  Fixes http://dev.plone.org/plone/ticket/10992\n-  and   http://dev.plone.org/plone/ticket/11167\n-  [maurits]\n-\n-\n-1.0.1 - 2010-09-28\n-------------------\n-\n-- Add empty profile for 4.0-4.0.1 upgrade.\n-  [esteele]\n-\n-- Avoid relying on the ``Control_Panel/Products`` section, as it is no longer\n-  used. This closes http://dev.plone.org/plone/ticket/10824.\n-  [hannosch]\n-\n-\n-1.0 - 2010-08-28\n-----------------\n-\n-- Add empty profile for rc1-final upgrade.\n-  [esteele]\n-\n-\n-1.0rc1 - 2010-08-05\n--------------------\n-\n-- Update personal preferences action to its new URL.\n-  [davisagli]\n-\n-- Added `padding-left` to the safe_html style whitelist. This refs\n-  http://dev.plone.org/plone/ticket/10557.\n-  [hannosch]\n-\n-- Update license to GPL version 2 only.\n-  [hannosch]\n-\n-\n-1.0b5 - 2010-07-07\n-------------------\n-\n-- Added upgrade step to remove the ``sunburst_js`` skin layer.\n-  [hannosch]\n-\n-- Upgrade step for removing IE8.js from Sunburst.\n-  [spliter]\n-\n-- Merged the ``recompilePythonScripts`` upgrade step with the unified folder\n-  upgrade step. This avoids an extra complete traversal of the entire site.\n-  [hannosch]\n-\n-- Rewrote the ``updateIconMetadata`` upgrade step for speed.\n-  [hannosch]\n-\n-- Moved the code to remove old persistent Interface records into the\n-  recompilePythonScripts step. This step actually covers all objects.\n-  [hannosch]\n-\n-- Optimized the ``optimizeDateRangeIndexes`` upgrade step to take advantage of\n-  knowledge about index internals instead of a brute force reindexIndex call.\n-  [hannosch]\n-\n-- Optimized the "update getIcon metadata" upgrade step and added a progress\n-  handler to it.\n-  [hannosch]\n-\n-- Enhance the unregisterOldSteps upgrade step, by removing all persistent\n-  steps for which a ZCML steps exists.\n-  [hannosch]\n-\n-- Take a savepoint before starting the unified folder upgrade. This lets us\n-  fail fast if there\'s problems pickling anything.\n-  [hannosch]\n-\n-- Also catch TypeError\'s in the action icons upgrade.\n-  [hannosch]\n-\n-- Added optional CacheFu uninstallation step. This will remove CacheFu tools\n-  if they are detected to be broken.\n-  [hannosch]\n-\n-- Removing action links from Events, since they are in the template (and were\n-  never supposed to have actions in the first place). This fixes\n-  http://dev.plone.org/plone/ticket/10540.\n-  [limi]\n-\n-- Re-add the File and Image FTI icon expressions.\n-  [davisagli]\n-\n-- Add missing upgrade steps for control panels and site properties.\n-  Fixes http://dev.plone.org/plone/ticket/10360\n-  [davisagli]\n-\n-- Modify the restoreTheme upgrade step to improve handling of themes when\n-  upgrading from Plone 3. Now if the skin was "Plone Default", it will be\n-  set to "Plone Classic Theme" if the layers were uncustomized.  If the\n-  layers were customized, the layers and viewlet settings will be copied to\n-  a new skin called "Old Plone 3 Custom Theme", and then "Plone Default"\n-  will be reset to its typical configuration in a fresh Plone 4 site.\n-  This closes http://dev.plone.org/plone/ticket/10399\n-  [davisagli]\n-\n-\n-1.0b4 - 2010-06-03\n-------------------\n-\n-- Add ++resource++plone.app.jquerytools.form.js to jsregistry to accomodate\n-  new jQuery Forms plug in.\n-  http://dev.plone.org/plone/ticket/10603\n-  [smcmahon]\n-\n-- Add upgrade step to convert all files and images to blobs. This closes\n-  http://dev.plone.org/plone/ticket/10366.\n-  [hannosch]\n-\n-- Upgrade the standard File and Image FTI\'s to use blobs. This refs\n-  http://dev.plone.org/plone/ticket/10366.\n-  [hannosch]\n-\n-- Add upgrade step to remove the Large Plone Folder type for Plone 4.0rc1\n-  (there is another step which already turns Large Plone Folders into\n-  unordered regular Folders). Removed references to Large Plone Folder from\n-  old upgrade steps.\n-  [davisagli]\n-\n-\n-1.0b3 - 2010-05-03\n-------------------\n-\n-- Added an automated upgrade step to remove old persistent Zope2 Interface\n-  records. This refs http://dev.plone.org/plone/ticket/10446.\n-  [dunlapm, hannosch]\n-\n-\n-1.0b2 - 2010-04-09\n-------------------\n-\n-- Add an upgrade step to update the getIcon metadata column for core types so\n-  that our new CSS sprited icons can be used.\n-  [esteele]\n-\n-- Update the safe_html transform with the new config params, migrating existing\n-  config from Kupu.\n-  [elro]\n-\n-- Added upgrade step for viewlet changes in Plone 4.0b2.\n-  [davisagli]\n-\n-\n-1.0b1 - 2010-03-08\n-------------------\n-\n-- Update the Plone 4 action icons upgrade step to avoid storing icon\n-  expressions as unicode when possible.\n-  [davisagli]\n-\n-- Add step to update viewlet order and hidden managers for the Sunburst theme\n-  to reflect recent changes.\n-  [davisagli]\n-\n-- Add upgrade step to move added recursive_groups plugin to the bottom of the\n-  IGroupsPlugin list.\n-  [esteele]\n-\n-- Added upgrade step to profile version 4007.\n-  [hannosch]\n-\n-\n-1.0a5 - 2010-02-19\n-------------------\n-\n-- Migrate `getObjPositionInParent` to stub index capable of sorting search\n-  results according to their position in the container, a.k.a. "nogopip".\n-  [witsch]\n-\n-- In migration to 4.0a5, hide the plone.path_bar viewlet from the\n-  plone.portaltop manager for the Sunburst Theme.\n-  [davisagli]\n-\n-- Add new editing control panel.\n-  [hannosch]\n-\n-- Removed the no longer needed history viewlet. This refs\n-  http://dev.plone.org/plone/ticket/10102.\n-  [hannosch]\n-\n-- Added upgrade step to update folderish types to add the \'All content\'\n-  folder_full_view. Include IE fixes and disabling of base2 js.\n-  [elro]\n-\n-- Add upgrade step to cleanup plonetheme.classic CSS resources upon\n-  migration. Make plonetheme.classic visible in the QI.\n-  Refs http://dev.plone.org/plone/ticket/9988.\n-  [dukebody]\n-\n-- Added upgrade step to optimize the internal data structures of date range\n-  indexes as introduced in Zope 2.12.2.\n-  [hannosch]\n-\n-- Changed the cleanUpProductRegistry upgrade step to remove all entries from the\n-  persistent registry and run it again for existing alpha sites.\n-  [hannosch]\n-\n-\n-1.0a4 - 2010-02-01\n-------------------\n-\n-- Fix theme upgrades by making sure that plone_styles gets updated to\n-  classic_styles even when it already exists in the skins tool.\n-  [davisagli]\n-\n-- Add upgrade step to create, but not install, a recursive groups PAS plugin.\n-  [esteele]\n-\n-- Update the `portal_type` of former "Large Folder" content to "Folder".\n-  Refs http://dev.plone.org/plone/ticket/9791.\n-  [witsch]\n-\n-- Make sure the step registry gets cleaned up before the toolset-fixing\n-  profile gets imported, when upgrading to 4.x.\n-  [davisagli]\n-\n-- Add upgrade to pull iefixes from ResourceRegistries.\n-  Refs http://dev.plone.org/plone/ticket/9278.\n-  [dukebody]\n-\n-- Add missing upgrades from Plone 3.3.2 to 3.3.3 to 3.3.4 to 4.0a1.\n-  [davisagli]\n-\n-- Call the portal_metadata DCMI upgrade step from CMFDefault when upgrading\n-  to Plone 4.0b1.\n-  [davisagli]\n-\n-- Enable the diff export in functional upgrade tests, we do a complete\n-  GenericSetup export of all upgraded sites now.\n-  [hannosch]\n-\n-- Remove the hint of doing an export/import comparison for the full upgrades.\n-  These have varying add-ons installed depending on the original site and its\n-  quite hard to get the same add-ons installed again in a new site.\n-  [hannosch]\n-\n-- Added functional upgrade tests based on an actual zexp export of each major\n-  version of Plone. Each one is imported and upgraded. A diff of the upgraded\n-  configuration vs the one of a completely new site is generated. Thanks to\n-  CMF for the inspiration. This closes http://dev.plone.org/plone/ticket/721.\n-  [hannosch]\n-\n-- Declared missing dependencies.\n-  [hannosch]\n-\n-\n-1.0a3 - 2009-12-16\n-------------------\n-\n-- Updated all profile versions in the Plone 4 series to new simple integer\n-  based numbers.\n-  [hannosch]\n-\n-- Updated to match the new profile version for Plone.\n-  [hannosch]\n-\n-- Extended the unregisterOldSteps upgrade step to remove persistent step\n-  registrations now done via ZCML.\n-  [hannosch]\n-\n-- Fixed a reference of jquery.js in the Plone 3.0 upgrade steps. The file was\n-  only introduced in Plone 3.1.\n-  [hannosch]\n-\n-- Moved the join action URL expression update to the 4.0a2-4.0a3 step, since\n-  it never got wired up for a1-a2.\n-  [davisagli]\n-\n-- Removed references to content_icon, which is deprecated in CMFCore 2.2.0\n-  beta 1.\n-  [davisagli]\n-\n-\n-1.0a2 - 2009-12-02\n-------------------\n-\n-- Provide join_form_fields to user_registration_fields migration.\n-  [esteele]\n-\n-- Recompile all persistent Python Scripts during the upgrade.\n-  [hannosch]\n-\n-- Simplify installation of new dependencies and include ``plone.app.imaging``.\n-  [hannosch]\n-\n-- Run the steps found in the ``Products.CMFPlone:dependencies`` profile.\n-  [hannosch]\n-\n-- Remove ``calendarpopup.js`` from portal_javascripts.\n-  [hannosch]\n-\n-- Preserve the default theme after an upgrade instead of making sunburst the\n-  new default. Also ensure the classic_styles layer isn\'t part of sunburst.\n-  [hannosch]\n-\n-- The plone_styles layer is automatically renamed to classic_styles.\n-  [hannosch]\n-\n-- Let the mailhost upgrade step replace broken objects with a fresh standard\n-  mailhost. It\'s likely our new one has the features of the custom product.\n-  [hannosch]\n-\n-- Clean up Zope\'s product registry to deal with removed products and internal\n-  changes to the HelpSys catalogs.\n-  [hannosch]\n-\n-- Deal with more removed import steps and remove them from the registry.\n-  [hannosch]\n-\n-- Cleanup the skins tools and remove broken directory views as well as cleaning\n-  up the skin selections to avoid references to no longer existing directories.\n-  [hannosch]\n-\n-- Remove entries from the toolset registry pointing to no longer existing\n-  tools. This can happen when add-ons have been uninstalled.\n-  [hannosch]\n-\n-- When upgrading to Plone 4.0a1, be sure to update the toolset with new class\n-  locations before importing any other profiles, which might otherwise fail\n-  in the toolset step. Be sure to update the locations for the tools which\n-  moved from CMFPlone to PlonePAS, for upgrades from very old sites.\n-  [davisagli]\n-\n-\n-1.0a1 - 2009-11-17\n-------------------\n-\n-- Added Products.contentmigration as a dependency.\n-  [hannosch]\n-\n-- Fixed removeal of highlightsearchterms.js.\n-  [naro]\n-\n-- Added plonetheme.classic and plonetheme.sunburst as dependencies.\n-  [naro]\n-\n-- Add migration for unified folders.\n-  [witsch]\n-\n-- Replace highlightsearchterms.js with jquery.highlightsearchterms.js\n-  [mj]\n-\n-- Add new default modifiers from CMFEditions on upgrade.\n-  [alecm]\n-\n-- Adjust the sarissa.js condition on upgrading to Plone 4, so that it doesn\'t\n-  break if kupu is absent.\n-  [davisagli]\n-\n-- Make sure the TinyMCE profile and default_editor property get installed when\n-  upgrading to Plone 4 (kupu remains the default editor for upgraded sites).\n-  [davisagli]\n-\n-- Aded Migration for SecureMailHost removal\n-  [alecm]\n-\n-- Added step to remove the plone_various step from the persistent import\n-  step registry.\n-  [davisagli]\n-\n-- Added upgrade step to remove outdated actions and properties from both the\n-  Plone Site and TempFolder FTI.\n-  [hannosch]\n-\n-- Adjusted setupReferencebrowser upgrade step to proper new-style.\n-  [hannosch]\n-\n-- Added property use_email_as_login=False to the site properties in the\n-  Plone 4 alpha migration. Refs http://dev.plone.org/plone/ticket/9214.\n-  [maurits]\n-\n-- Added update of resources to use the authenticated flag instead of a full\n-  expression where possible, in the Plone 4 alpha migration.\n-  [davisagli]\n-\n-- Added renaming of Categories to Tags in the portal_atct tool indices in the\n-  Plone 4 alpha migration.\n-  [davisagli]\n-\n-- Added updating of the actor variable expression for several workflows in the\n-  Plone 4 alpha migration. This helps fix\n-  http://dev.plone.org/plone/ticket/7398.\n-  [davisagli]\n-\n-- Added removal of action for AT graphviz reference visualization from\n-  all content types in the Plone 4 alpha migration.\n-  [davisagli]\n-\n-- Made the action icons migration switch from GIF to PNG where possible,\n-  and correctly handle actions in the document_actions category.\n-  [davisagli]\n-\n-- Added link to upgrade instructions for sites upgraded from Plone < 2.5\n-  (technically, sites using GroupUserFolder)\n-  [davisagli]\n-\n-- Added a INonInstallable utility to hide this package\'s profiles from the\n-  quick installer.\n-  [davisagli]\n-\n-- Fixed a couple profiles that were not registered for IMigratingPloneSiteRoot.\n-  [davisagli]\n-\n-- Added Plone 4 migration step to add icon_expr to FTIs.\n-  [davisagli]\n-\n-- Revert the migration steps for getting rid of the external editor.\n-  [davisagli]\n-\n-- Adjusted action icon migration to handle the configlet icons properly.\n-  [davisagli]\n-\n-- Re-added missing configlet migrations.\n-  [davisagli]\n-\n-- Adjust migration for installing CMFDiffTool to reflect the fact that this is\n-  now configured in CMFPlone.\n-  [davisagli]\n-\n-- Re-add portal_controlpanel to the list of special action providers for the\n-  migrateOldActions function.\n-  [davisagli]\n-\n-- Corrected the migrateActionIcons function to use the correct API for setting\n-  the new icon_expr, so that the icon_expr_object also gets set correctly.\n-  [davisagli]\n-\n-- Adjusted the addMissingWorkflows action to reflect additional variables\n-  returned by the WorkflowDefinitionConfigurator in current DCWorkflow.\n-  [davisagli]\n-\n-- Moved the cleanDefaultCharset action to the 3.0a2-3.0b1 migration; it is a\n-  prerequisite for that step\'s properties.xml import.\n-  [davisagli]\n-\n-- Adjusted the 2.5-3.0a1 step to correct the toolset registry class metadata\n-  for the tools which are located in PlonePAS as of Plone 3.\n-  [davisagli]\n-\n-- Added migration to make sure we\'re using an IRAMCache utility from\n-  zope.ramcache instead of zope.app.cache\n-  [davisagli]\n-\n-- Merged changeset 27805 from 3.3 branch migrations for 3.3rc3 to\n-  3.3rc4 (fix cooked expressions in css registry).\n-  [maurits]\n-\n-- Added the z3c.autoinclude entry point so this package is automatically loaded\n-  on Plone 3.3 and above.\n-  [hannosch]\n-\n-- Import the `replace_local_role_manager` method from borg.localrole.\n-  [hannosch]\n-\n-- Merge changeset 24257 from 3.2 branch migrations for 3.2 to 3.2.1\n-  [calvinhp]\n-\n-- Fixed deprecation warnings for use of Globals.\n-  [hannosch]\n-\n-- Specified package dependencies.\n-  [hannosch]\n-\n-- Updated method calls to PlonePAS. They lost the out argument.\n-  [hannosch]\n-\n-- Adjusted enableZope3Site function to match the new CMF21 upgrade step.\n-  [hannosch]\n-\n-- Removed safeGetMemberDataTool method, which wasn\'t used anywhere.\n-  [hannosch]\n-\n-- Initial implementation.\n-  [hannosch]\n+For 2.0.31 and earlier changes, see the `2.x branch <https://github.com/plone/plone.app.upgrade/blob/2.x/CHANGES.rst>`_.\ndiff --git a/README.rst b/README.rst\nindex 2f449f1e..9b970cf3 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -1,9 +1,11 @@\n Overview\n ========\n+\n This package contains the upgrade machinery to upgrade a Plone site to a newer version.\n \n Version compatibility\n ---------------------\n-To update to Plone 4.x please use plone.app.upgrade versions up to 1.3.x.\n \n-To update to Plone 5.x and up, use plone.app.upgrade versions 2.x and up.\n+- To update to Plone 4.x please use plone.app.upgrade versions up to 1.3.x.\n+- To update to Plone 5.x, use plone.app.upgrade version 2.x.\n+- To update to Plone 6.x, use plone.app.upgrade version 3.x.\ndiff --git a/news/287.bugfix b/news/287.bugfix\nnew file mode 100644\nindex 00000000..b80a4e1c\n--- /dev/null\n+++ b/news/287.bugfix\n@@ -0,0 +1 @@\n+Cleanup: pyupgrade, isort, black.  [maurits]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af4..5284146e 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af4..5284146e 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/upgrade/__init__.py b/plone/app/upgrade/__init__.py\nindex de75665f..35612617 100644\n--- a/plone/app/upgrade/__init__.py\n+++ b/plone/app/upgrade/__init__.py\n@@ -4,23 +4,23 @@\n \n \n try:\n-    pkg_resources.get_distribution(\'Products.CMFQuickInstallerTool\')\n+    pkg_resources.get_distribution("Products.CMFQuickInstallerTool")\n except pkg_resources.DistributionNotFound:\n     # The alias module helps when migrating to Plone 6.0.0a1.\n     # Remove when we no longer support upgrading from Plone 5.2.\n     from . import bbb_qi\n \n-    alias_module(\'Products.CMFQuickInstallerTool\', bbb_qi)\n-    alias_module(\'Products.CMFPlone.QuickInstallerTool\', bbb_qi)\n+    alias_module("Products.CMFQuickInstallerTool", bbb_qi)\n+    alias_module("Products.CMFPlone.QuickInstallerTool", bbb_qi)\n \n \n-class HiddenProducts(object):\n+class HiddenProducts:\n     """This hides the upgrade profiles from the quick installer tool."""\n \n     def getNonInstallableProducts(self):\n         return [\n-            \'plone.app.upgrade.v52\',\n-            \'plone.app.upgrade.v60\',\n+            "plone.app.upgrade.v52",\n+            "plone.app.upgrade.v60",\n         ]\n \n     def getNonInstallableProfiles(self):\ndiff --git a/plone/app/upgrade/bbb_qi/InstalledProduct.py b/plone/app/upgrade/bbb_qi/InstalledProduct.py\nindex 148a6f03..2933a1fd 100644\n--- a/plone/app/upgrade/bbb_qi/InstalledProduct.py\n+++ b/plone/app/upgrade/bbb_qi/InstalledProduct.py\n@@ -1,5 +1,6 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n+\n+\n # from Products.CMFQuickInstallerTool.interfaces.portal_quickinstaller import IInstalledProduct  # noqa\n # from zope.interface import implementer\n \ndiff --git a/plone/app/upgrade/bbb_qi/QuickInstallerTool.py b/plone/app/upgrade/bbb_qi/QuickInstallerTool.py\nindex dac4c160..bc45d546 100644\n--- a/plone/app/upgrade/bbb_qi/QuickInstallerTool.py\n+++ b/plone/app/upgrade/bbb_qi/QuickInstallerTool.py\n@@ -1,23 +1,23 @@\n-# -*- coding: utf-8 -*-\n from OFS.ObjectManager import ObjectManager\n from OFS.SimpleItem import SimpleItem\n from Products.CMFCore.utils import UniqueObject\n+\n+\n # from Products.CMFQuickInstallerTool.interfaces import INonInstallable\n # from Products.CMFQuickInstallerTool.interfaces import IQuickInstallerTool\n # from zope.interface import implementer\n \n \n # @implementer(INonInstallable)\n-class HiddenProducts(object):\n-\n+class HiddenProducts:\n     def getNonInstallableProducts(self):\n         # We can\'t really install ourselves: that would be weird.\n         # So hide ourselves from ourselves.\n-        return [\'CMFQuickInstallerTool\', \'Products.CMFQuickInstallerTool\']\n+        return ["CMFQuickInstallerTool", "Products.CMFQuickInstallerTool"]\n \n \n # @implementer(IQuickInstallerTool)\n class QuickInstallerTool(UniqueObject, ObjectManager, SimpleItem):\n \n-    meta_type = \'CMF QuickInstaller Tool\'\n-    id = \'portal_quickinstaller\'\n+    meta_type = "CMF QuickInstaller Tool"\n+    id = "portal_quickinstaller"\ndiff --git a/plone/app/upgrade/bbb_qi/__init__.py b/plone/app/upgrade/bbb_qi/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/upgrade/bbb_qi/__init__.py\n+++ b/plone/app/upgrade/bbb_qi/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/upgrade/bbb_qi/interfaces/__init__.py b/plone/app/upgrade/bbb_qi/interfaces/__init__.py\nindex 68dfbe9a..6b79b0b7 100644\n--- a/plone/app/upgrade/bbb_qi/interfaces/__init__.py\n+++ b/plone/app/upgrade/bbb_qi/interfaces/__init__.py\n@@ -1,7 +1,6 @@\n-# -*- coding: utf-8 -*-\n from .installable import INonInstallable\n from .portal_quickinstaller import IQuickInstallerTool\n \n \n-INonInstallable   # pyflakes\n-IQuickInstallerTool   # pyflakes\n+INonInstallable  # pyflakes\n+IQuickInstallerTool  # pyflakes\ndiff --git a/plone/app/upgrade/bbb_qi/interfaces/installable.py b/plone/app/upgrade/bbb_qi/interfaces/installable.py\nindex 6a485c45..ad1e159f 100644\n--- a/plone/app/upgrade/bbb_qi/interfaces/installable.py\n+++ b/plone/app/upgrade/bbb_qi/interfaces/installable.py\n@@ -1,10 +1,8 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \n class INonInstallable(Interface):\n-\n     def getNonInstallableProducts():\n         """Returns a list of products that should not be available for\n-           installation.\n+        installation.\n         """\ndiff --git a/plone/app/upgrade/bbb_qi/interfaces/portal_quickinstaller.py b/plone/app/upgrade/bbb_qi/interfaces/portal_quickinstaller.py\nindex fdbda6bd..633038e4 100644\n--- a/plone/app/upgrade/bbb_qi/interfaces/portal_quickinstaller.py\n+++ b/plone/app/upgrade/bbb_qi/interfaces/portal_quickinstaller.py\n@@ -1,9 +1,9 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \n class IQuickInstallerTool(Interface):\n     pass\n \n+\n class IInstalledProduct(Interface):\n     pass\ndiff --git a/plone/app/upgrade/tests/__init__.py b/plone/app/upgrade/tests/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/upgrade/tests/__init__.py\n+++ b/plone/app/upgrade/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/upgrade/tests/base.py b/plone/app/upgrade/tests/base.py\nindex 438d31ad..3f1cab37 100644\n--- a/plone/app/upgrade/tests/base.py\n+++ b/plone/app/upgrade/tests/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from os.path import abspath\n from os.path import dirname\n from os.path import join\n@@ -32,8 +31,8 @@ class UpgradeTestCaseFixture(PloneSandboxLayer):\n \n UPGRADE_TEST_CASE_FIXTURE = UpgradeTestCaseFixture()\n UPGRADE_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PTC_FIXTURE, UPGRADE_TEST_CASE_FIXTURE),\n-    name=\'UpgradeTestCase:Functional\')\n+    bases=(PTC_FIXTURE, UPGRADE_TEST_CASE_FIXTURE), name="UpgradeTestCase:Functional"\n+)\n \n \n class MigrationTest(PloneTestCase):\n@@ -44,53 +43,54 @@ def removeActionFromTool(\n         self,\n         action_id,\n         category=None,\n-        action_provider=\'portal_actions\',\n+        action_provider="portal_actions",\n     ):\n         # Removes an action from portal_actions\n         tool = getToolByName(self.portal, action_provider)\n         if category is None:\n-            if action_id in tool.objectIds() and \\\n-               IActionInfo.providedBy(tool._getOb(action_id)):\n+            if action_id in tool.objectIds() and IActionInfo.providedBy(\n+                tool._getOb(action_id)\n+            ):\n                 tool._delOb(action_id)\n         elif (\n-            category in tool.objectIds() and\n-            IActionCategory.providedBy(tool._getOb(category)) and\n-            action_id in tool.objectIds() and\n-            IActionInfo.providedBy(tool._getOb(action_id))\n+            category in tool.objectIds()\n+            and IActionCategory.providedBy(tool._getOb(category))\n+            and action_id in tool.objectIds()\n+            and IActionInfo.providedBy(tool._getOb(action_id))\n         ):\n             tool._delOb(action_id)\n \n     def removeSiteProperty(self, property_id):\n         # Removes a site property from portal_properties\n-        tool = getToolByName(self.portal, \'portal_properties\')\n-        sheet = getattr(tool, \'site_properties\')\n+        tool = getToolByName(self.portal, "portal_properties")\n+        sheet = getattr(tool, "site_properties")\n         if sheet.hasProperty(property_id):\n             sheet.manage_delProperties([property_id])\n \n     def addSiteProperty(self, property_id):\n         # adds a site property to portal_properties\n-        tool = getToolByName(self.portal, \'portal_properties\')\n-        sheet = getattr(tool, \'site_properties\')\n+        tool = getToolByName(self.portal, "portal_properties")\n+        sheet = getattr(tool, "site_properties")\n         if not sheet.hasProperty(property_id):\n-            sheet.manage_addProperty(property_id, [], \'lines\')\n+            sheet.manage_addProperty(property_id, [], "lines")\n \n     def removeNavTreeProperty(self, property_id):\n         # Removes a navtree property from portal_properties\n-        tool = getToolByName(self.portal, \'portal_properties\')\n-        sheet = getattr(tool, \'navtree_properties\')\n+        tool = getToolByName(self.portal, "portal_properties")\n+        sheet = getattr(tool, "navtree_properties")\n         if sheet.hasProperty(property_id):\n             sheet.manage_delProperties([property_id])\n \n     def addNavTreeProperty(self, property_id):\n         # adds a navtree property to portal_properties\n-        tool = getToolByName(self.portal, \'portal_properties\')\n-        sheet = getattr(tool, \'navtree_properties\')\n+        tool = getToolByName(self.portal, "portal_properties")\n+        sheet = getattr(tool, "navtree_properties")\n         if not sheet.hasProperty(property_id):\n-            sheet.manage_addProperty(property_id, [], \'lines\')\n+            sheet.manage_addProperty(property_id, [], "lines")\n \n     def removeMemberdataProperty(self, property_id):\n         # Removes a memberdata property from portal_memberdata\n-        tool = getToolByName(self.portal, \'portal_memberdata\')\n+        tool = getToolByName(self.portal, "portal_memberdata")\n         if tool.hasProperty(property_id):\n             tool.manage_delProperties([property_id])\n \n@@ -100,33 +100,33 @@ def uninstallProduct(self, product_name):\n         if installer.is_product_installed(product_name):\n             installer.uninstall_product(product_name)\n \n-    def addSkinLayer(self, layer, skin=\'Plone Default\', pos=None):\n+    def addSkinLayer(self, layer, skin="Plone Default", pos=None):\n         # Adds a skin layer at pos. If pos is None, the layer is appended\n-        skins = getToolByName(self.portal, \'portal_skins\')\n+        skins = getToolByName(self.portal, "portal_skins")\n         path = skins.getSkinPath(skin)\n-        path = [x.strip() for x in path.split(\',\')]\n+        path = [x.strip() for x in path.split(",")]\n         if layer in path:\n             path.remove(layer)\n         if pos is None:\n             path.append(layer)\n         else:\n             path.insert(pos, layer)\n-        skins.addSkinSelection(skin, \',\'.join(path))\n+        skins.addSkinSelection(skin, ",".join(path))\n \n-    def removeSkinLayer(self, layer, skin=\'Plone Default\'):\n+    def removeSkinLayer(self, layer, skin="Plone Default"):\n         # Removes a skin layer from skin\n-        skins = getToolByName(self.portal, \'portal_skins\')\n+        skins = getToolByName(self.portal, "portal_skins")\n         path = skins.getSkinPath(skin)\n-        path = [x.strip() for x in path.split(\',\')]\n+        path = [x.strip() for x in path.split(",")]\n         if layer in path:\n             path.remove(layer)\n-            skins.addSkinSelection(skin, \',\'.join(path))\n+            skins.addSkinSelection(skin, ",".join(path))\n \n \n class FunctionalUpgradeTestCase(PloneTestCase):\n \n     _setup_fixture = 0\n-    site_id = \'test\'\n+    site_id = "test"\n \n     def afterSetUp(self):\n         self.loginAsPortalOwner()\n@@ -140,14 +140,14 @@ def beforeTearDown(self):\n         transaction.commit()\n \n     def importFile(self, context, name):\n-        path = join(abspath(dirname(context)), \'data\', name)\n+        path = join(abspath(dirname(context)), "data", name)\n         with warnings.catch_warnings():\n             self.app._importObjectFromFile(path, verify=0)\n \n     def migrate(self):\n         oldsite = getattr(self.app, self.site_id)\n         mig = oldsite.portal_migration\n-        components = getattr(oldsite, \'_components\', None)\n+        components = getattr(oldsite, "_components", None)\n         if components is not None:\n             setSite(oldsite)\n         result = mig.upgrade(swallow_errors=False)\n@@ -159,5 +159,5 @@ def export(self):\n         stool = oldsite.portal_setup\n         upgraded_export = stool.runAllExportSteps()\n \n-        upgraded = TarballImportContext(stool, upgraded_export[\'tarball\'])\n+        upgraded = TarballImportContext(stool, upgraded_export["tarball"])\n         return stool.compareConfigurations(upgraded, self.expected)\ndiff --git a/plone/app/upgrade/tests/test_upgrade.py b/plone/app/upgrade/tests/test_upgrade.py\nindex 25d5bbb8..bd12ec05 100644\n--- a/plone/app/upgrade/tests/test_upgrade.py\n+++ b/plone/app/upgrade/tests/test_upgrade.py\n@@ -2,14 +2,12 @@\n from plone.app.upgrade.utils import version_match\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.factory import _DEFAULT_PROFILE\n-\n from unittest import mock\n \n \n class TestUpgrade(MigrationTest):\n-\n     def afterSetUp(self):\n-        self.setup = getToolByName(self.portal, \'portal_setup\')\n+        self.setup = getToolByName(self.portal, "portal_setup")\n \n     def testListUpgradeSteps(self):\n         # There should be no upgrade steps from the current version\n@@ -19,49 +17,49 @@ def testListUpgradeSteps(self):\n     def testProfileVersion(self):\n         # The profile version for the base profile should be the same\n         # as the file system version and the instance version\n-        self.setup = getToolByName(self.portal, \'portal_setup\')\n+        self.setup = getToolByName(self.portal, "portal_setup")\n \n         current = self.setup.getVersionForProfile(_DEFAULT_PROFILE)\n-        current = tuple(current.split(\'.\'))\n+        current = tuple(current.split("."))\n         last = self.setup.getLastVersionForProfile(_DEFAULT_PROFILE)\n         self.assertEqual(last, current)\n \n-    @mock.patch(\'plone.app.upgrade.utils.plone_version\', \'5.0b1\')\n+    @mock.patch("plone.app.upgrade.utils.plone_version", "5.0b1")\n     def testVersionMatch(self):\n-        self.assertFalse(version_match(\'2.5\'))\n-        self.assertFalse(version_match(\'3.1b1\'))\n-        self.assertFalse(version_match(\'5.2.b1\'))\n-        self.assertTrue(version_match(\'5.0a3.dev0\'))\n-        self.assertTrue(version_match(\'5.0b1.dev0\'))\n-        self.assertTrue(version_match(\'5.0b3\'))\n-        self.assertTrue(version_match(\'5.0\'))\n+        self.assertFalse(version_match("2.5"))\n+        self.assertFalse(version_match("3.1b1"))\n+        self.assertFalse(version_match("5.2.b1"))\n+        self.assertTrue(version_match("5.0a3.dev0"))\n+        self.assertTrue(version_match("5.0b1.dev0"))\n+        self.assertTrue(version_match("5.0b3"))\n+        self.assertTrue(version_match("5.0"))\n \n     def testDoUpgrades(self):\n-        self.setRoles([\'Manager\'])\n+        self.setRoles(["Manager"])\n \n         # Python 3 is only supported on 5.2+.\n         # This means you can not upgrade from 5.1 or earlier.\n-        start_profile = \'5200\'\n+        start_profile = "5200"\n         self.setup.setLastVersionForProfile(_DEFAULT_PROFILE, start_profile)\n         upgrades = self.setup.listUpgrades(_DEFAULT_PROFILE)\n         self.assertTrue(len(upgrades) > 0)\n \n         request = self.portal.REQUEST\n-        request.form[\'profile_id\'] = _DEFAULT_PROFILE\n+        request.form["profile_id"] = _DEFAULT_PROFILE\n \n         steps = []\n         for u in upgrades:\n             if isinstance(u, list):\n-                steps.extend([s[\'id\'] for s in u])\n+                steps.extend([s["id"] for s in u])\n             else:\n-                steps.append(u[\'id\'])\n+                steps.append(u["id"])\n \n-        request.form[\'upgrades\'] = steps\n+        request.form["upgrades"] = steps\n         self.setup.manage_doUpgrades(request=request)\n \n         # And we have reached our current profile version\n         current = self.setup.getVersionForProfile(_DEFAULT_PROFILE)\n-        current = tuple(current.split(\'.\'))\n+        current = tuple(current.split("."))\n         last = self.setup.getLastVersionForProfile(_DEFAULT_PROFILE)\n         self.assertEqual(last, current)\n \n@@ -71,7 +69,9 @@ def testDoUpgrades(self):\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestUpgrade))\n     return suite\ndiff --git a/plone/app/upgrade/tests/test_utils.py b/plone/app/upgrade/tests/test_utils.py\nindex ac9506d0..cc63e605 100644\n--- a/plone/app/upgrade/tests/test_utils.py\n+++ b/plone/app/upgrade/tests/test_utils.py\n@@ -1,23 +1,22 @@\n-# -*- coding: utf-8 -*-\n from plone.app.upgrade import utils\n from plone.app.upgrade.tests.base import MigrationTest\n from Products.CMFCore.utils import getToolByName\n \n \n class TestUtils(MigrationTest):\n-\n     def testCleanUpSkinsTool(self):\n         # This removes no longer existing layers from the skins tool and the\n         # skin selections.\n         from Products.CMFCore.DirectoryView import DirectoryView\n         from Products.CMFCore.DirectoryView import registerDirectory\n-        self.setRoles([\'Manager\'])\n-        skins = getToolByName(self.portal, \'portal_skins\')\n+\n+        self.setRoles(["Manager"])\n+        skins = getToolByName(self.portal, "portal_skins")\n         existing = skins.keys()\n-        selection = \'Plone Default\'\n+        selection = "Plone Default"\n \n         def layers_in_selection(selection_name):\n-            return skins.getSkinPath(selection_name).split(\',\')\n+            return skins.getSkinPath(selection_name).split(",")\n \n         existing_layers_in_selection = layers_in_selection(selection)\n \n@@ -27,13 +26,16 @@ def layers_in_selection(selection_name):\n         self.assertEqual(\n             len(skins.keys()),\n             len(existing),\n-            msg=\'Skink difference is: {0}\'.format(list(difference)))\n+            msg=f"Skink difference is: {list(difference)}",\n+        )\n         difference = set(layers_in_selection(selection)) ^ set(\n-            existing_layers_in_selection)\n+            existing_layers_in_selection\n+        )\n         self.assertEqual(\n             len(layers_in_selection(selection)),\n             len(existing_layers_in_selection),\n-            msg=\'Layer difference is: {0}\'.format(list(difference)))\n+            msg=f"Layer difference is: {list(difference)}",\n+        )\n \n         # A second cleanup should also do nothing.  We used to rename\n         # plone_styles to classic_styles on the first run, which would get\n@@ -41,8 +43,9 @@ def layers_in_selection(selection_name):\n         # is not available.\n         utils.cleanUpSkinsTool(self.portal)\n         self.assertEqual(len(skins.keys()), len(existing))\n-        self.assertEqual(len(layers_in_selection(selection)),\n-                         len(existing_layers_in_selection))\n+        self.assertEqual(\n+            len(layers_in_selection(selection)), len(existing_layers_in_selection)\n+        )\n \n         # Register some test skins layers.  Note: the current module name is\n         # taken from globals()[\'__name__\'], which is how registerDirectory\n@@ -50,33 +53,38 @@ def layers_in_selection(selection_name):\n         # to register any layer that is outside of the current directory or in\n         # a \'skins\' sub directory.  There is just too much crazyness in the\n         # api.  Better try to load some zcml in that case.\n-        skin_name = \'skin_test\'\n+        skin_name = "skin_test"\n         # Make it available for Zope.  This is what you would do in zcml.\n         registerDirectory(skin_name, globals(), subdirs=1)\n         # Add the DirectoryView object to portal_skins.\n         directory_info = DirectoryView(\n-            skin_name, reg_key=\'plone.app.upgrade.tests:{0}\'.format(skin_name))\n+            skin_name, reg_key=f"plone.app.upgrade.tests:{skin_name}"\n+        )\n         skins._setObject(skin_name, directory_info)\n \n         # Add its sub skins to a skin selection.\n-        self.addSkinLayer(\'skin_test/sub1\', skin=selection)\n-        self.addSkinLayer(\'skin_test/sub1/subsub1\', skin=selection)\n-        self.addSkinLayer(\'skin_test/sub2\', skin=selection)\n+        self.addSkinLayer("skin_test/sub1", skin=selection)\n+        self.addSkinLayer("skin_test/sub1/subsub1", skin=selection)\n+        self.addSkinLayer("skin_test/sub2", skin=selection)\n \n         # Did that work?\n         self.assertEqual(len(skins.keys()), len(existing) + 1)\n-        self.assertEqual(len(layers_in_selection(selection)),\n-                         len(existing_layers_in_selection) + 3)\n+        self.assertEqual(\n+            len(layers_in_selection(selection)), len(existing_layers_in_selection) + 3\n+        )\n \n         # Clean it up again.  Nothing should be removed.\n         utils.cleanUpSkinsTool(self.portal)\n         self.assertEqual(len(skins.keys()), len(existing) + 1)\n-        self.assertEqual(len(layers_in_selection(selection)),\n-                         len(existing_layers_in_selection) + 3)\n+        self.assertEqual(\n+            len(layers_in_selection(selection)), len(existing_layers_in_selection) + 3\n+        )\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestUtils))\n     return suite\ndiff --git a/plone/app/upgrade/utils.py b/plone/app/upgrade/utils.py\nindex 41c4ea08..db5255aa 100644\n--- a/plone/app/upgrade/utils.py\n+++ b/plone/app/upgrade/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.base.utils import get_installer\n from Products.CMFCore.DirectoryView import _dirreg\n@@ -19,13 +18,13 @@\n \n _marker = []\n \n-logger = logging.getLogger(\'plone.app.upgrade\')\n+logger = logging.getLogger("plone.app.upgrade")\n \n-plone_version = pkg_resources.get_distribution(\'Products.CMFPlone\').version\n+plone_version = pkg_resources.get_distribution("Products.CMFPlone").version\n \n \n def version_match(target):\n-    """ Given, our versioning scheme is always major.minorANYTHING, where major\n+    """Given, our versioning scheme is always major.minorANYTHING, where major\n     and minor are single-digit numbers, we can compare versions as follows.\n     pkg_resources.parse_version is not compatible with our versioning scheme\n     (like \'5.0b1\') and also not compatible with the semver.org proposal\n@@ -36,12 +35,12 @@ def version_match(target):\n \n \n def null_upgrade_step(tool):\n-    """ This is a null upgrade, use it when nothing happens """\n+    """This is a null upgrade, use it when nothing happens"""\n     pass\n \n \n-def safeEditProperty(obj, key, value, data_type=\'string\'):\n-    """ An add or edit function, surprisingly useful :) """\n+def safeEditProperty(obj, key, value, data_type="string"):\n+    """An add or edit function, surprisingly useful :)"""\n     if obj.hasProperty(key):\n         obj._updateProperty(key, value)\n     else:\n@@ -61,7 +60,7 @@ def addLinesToProperty(obj, key, values):\n     else:\n         if not isinstance(values, list):\n             values = [values]\n-        obj._setProperty(key, values, \'lines\')\n+        obj._setProperty(key, values, "lines")\n \n \n def saveCloneActions(actionprovider):\n@@ -69,10 +68,12 @@ def saveCloneActions(actionprovider):\n         return True, actionprovider._cloneActions()\n     except AttributeError:\n         # Stumbled across ancient dictionary actions\n-        if not base_hasattr(actionprovider, \'_convertActions\'):\n+        if not base_hasattr(actionprovider, "_convertActions"):\n             return False, (\n-                "Can\'t convert actions of {0}! Jumping to next "\n-                \'action.\'.format(actionprovider.getId()), logging.ERROR)\n+                "Can\'t convert actions of {}! Jumping to next "\n+                "action.".format(actionprovider.getId()),\n+                logging.ERROR,\n+            )\n         else:\n             actionprovider._convertActions()\n             return True, actionprovider._cloneActions()\n@@ -86,10 +87,10 @@ def testSkinLayer(skinsTool, layer):\n     """\n     # code adapted from CMFCore.SkinsContainer.getSkinByPath\n     ob = aq_base(skinsTool)\n-    for name in layer.strip().split(\'/\'):\n+    for name in layer.strip().split("/"):\n         if not name:\n             continue\n-        if name.startswith(\'_\'):\n+        if name.startswith("_"):\n             return 0\n         ob = getattr(ob, name, None)\n         if ob is None:\n@@ -99,14 +100,14 @@ def testSkinLayer(skinsTool, layer):\n \n def cleanupSkinPath(portal, skinName, test=1):\n     """Remove invalid skin layers from skins"""\n-    skinstool = getToolByName(portal, \'portal_skins\')\n+    skinstool = getToolByName(portal, "portal_skins")\n     selections = skinstool._getSelections()\n-    old_path = selections[skinName].split(\',\')\n+    old_path = selections[skinName].split(",")\n     new_path = []\n     for layer in old_path:\n         if layer and testSkinLayer(skinstool, layer):\n             new_path.append(layer)\n-    skinstool.addSkinSelection(skinName, \',\'.join(new_path), test=test)\n+    skinstool.addSkinSelection(skinName, ",".join(new_path), test=test)\n \n \n def cleanUpSkinsTool(context):\n@@ -118,17 +119,17 @@ def cleanUpSkinsTool(context):\n \n     - Remove invalid skin layers from all skin selections.\n     """\n-    skins = getToolByName(context, \'portal_skins\')\n+    skins = getToolByName(context, "portal_skins")\n     # Remove directory views for directories missing on the filesystem\n     for name in skins.keys():\n         directory_view = skins.get(name)\n-        reg_key = getattr(directory_view, \'_dirpath\', None)\n+        reg_key = getattr(directory_view, "_dirpath", None)\n         if not reg_key:\n             # not a directory view, but a persistent folder\n             continue\n         try:\n             # Removed in CMF 2.3\n-            if getattr(_dirreg, \'getCurrentKeyFormat\', None):\n+            if getattr(_dirreg, "getCurrentKeyFormat", None):\n                 reg_key = _dirreg.getCurrentKeyFormat(reg_key)\n             _dirreg.getDirectoryInfo(reg_key)\n         except ValueError:\n@@ -139,19 +140,22 @@ def cleanUpSkinsTool(context):\n     # Remove no longer existing entries from skin selections\n     for layer, paths in skins.selections.items():\n         new_paths = []\n-        for name in paths.split(\',\'):\n+        for name in paths.split(","):\n             if name in existing:\n                 new_paths.append(name)\n-            elif \'/\' in name and testSkinLayer(skins, name):\n+            elif "/" in name and testSkinLayer(skins, name):\n                 new_paths.append(name)\n             else:\n-                logger.info(\'Removed no longer existing path %s \'\n-                            \'from skin selection %s.\', name, layer)\n-        skins.selections[layer] = \',\'.join(new_paths)\n+                logger.info(\n+                    "Removed no longer existing path %s " "from skin selection %s.",\n+                    name,\n+                    layer,\n+                )\n+        skins.selections[layer] = ",".join(new_paths)\n \n \n def cleanUpToolRegistry(context):\n-    portal = getToolByName(context, \'portal_url\').getPortalObject()\n+    portal = getToolByName(context, "portal_url").getPortalObject()\n     toolset = context.getToolsetRegistry()\n     required = toolset._required.copy()\n     existing = portal.keys()\n@@ -163,7 +167,7 @@ def cleanUpToolRegistry(context):\n             changed = True\n     if changed:\n         toolset._required = required\n-        logger.info(\'Cleaned up the toolset registry.\')\n+        logger.info("Cleaned up the toolset registry.")\n \n \n def installOrReinstallProduct(portal, product_name, out=None, hidden=False):\n@@ -175,36 +179,35 @@ def installOrReinstallProduct(portal, product_name, out=None, hidden=False):\n     installer = get_installer(portal)\n     if not installer.is_product_installed(product_name):\n         installer.install_product(product_name, allow_hidden=True)\n-        logger.info(\'Installed %s\', product_name)\n+        logger.info("Installed %s", product_name)\n     else:\n         installer.upgrade_product(product_name)\n-        logger.info(\'Upgraded %s\', product_name)\n+        logger.info("Upgraded %s", product_name)\n     # Refresh skins\n     portal.clearCurrentSkin()\n-    if getattr(portal, \'REQUEST\', None):\n+    if getattr(portal, "REQUEST", None):\n         portal.setupCurrentSkin(portal.REQUEST)\n \n \n def loadMigrationProfile(context, profile, steps=_marker):\n     if not ISetupTool.providedBy(context):\n-        context = getToolByName(context, \'portal_setup\')\n+        context = getToolByName(context, "portal_setup")\n     if steps is _marker:\n         context.runAllImportStepsFromProfile(profile, purge_old=False)\n     else:\n         for step in steps:\n-            context.runImportStepFromProfile(profile,\n-                                             step,\n-                                             run_dependencies=False,\n-                                             purge_old=False)\n+            context.runImportStepFromProfile(\n+                profile, step, run_dependencies=False, purge_old=False\n+            )\n \n \n def alias_module(name, target):\n-    parts = name.split(\'.\')\n+    parts = name.split(".")\n     i = 0\n     module = None\n     while i < len(parts) - 1:\n         i += 1\n-        module_name = \'.\'.join(parts[:i])\n+        module_name = ".".join(parts[:i])\n         try:\n             __import__(module_name)\n         except ImportError:\n@@ -216,7 +219,7 @@ def alias_module(name, target):\n \n     setattr(module, parts[-1], target)\n     # also make sure sys.modules is updated\n-    sys.modules[module_name + \'.\' + parts[-1]] = target\n+    sys.modules[module_name + "." + parts[-1]] = target\n \n \n def unregisterSteps(context, import_steps=None, export_steps=None):\n@@ -234,7 +237,7 @@ def unregisterSteps(context, import_steps=None, export_steps=None):\n     registry = context.getImportStepRegistry()\n     persistent_steps = registry.listSteps()\n     zcml_steps = _import_step_registry.listSteps()\n-    duplicated = set([s for s in persistent_steps if s in zcml_steps])\n+    duplicated = {s for s in persistent_steps if s in zcml_steps}\n     remove = duplicated.union(import_steps)\n     for step in remove:\n         if step in registry._registered:\n@@ -242,7 +245,7 @@ def unregisterSteps(context, import_steps=None, export_steps=None):\n     registry = context.getExportStepRegistry()\n     persistent_steps = registry.listSteps()\n     zcml_steps = _export_step_registry.listSteps()\n-    duplicated = set([s for s in persistent_steps if s in zcml_steps])\n+    duplicated = {s for s in persistent_steps if s in zcml_steps}\n     remove = duplicated.union(export_steps)\n     for step in remove:\n         if step in registry._registered:\n@@ -251,7 +254,7 @@ def unregisterSteps(context, import_steps=None, export_steps=None):\n \n \n def _types_with_empty_icons(context, typesToUpdate):\n-    ttool = getToolByName(context, \'portal_types\')\n+    ttool = getToolByName(context, "portal_types")\n     empty_icons = []\n     for name in typesToUpdate.keys():\n         fti = ttool.get(name)\n@@ -266,14 +269,14 @@ def _update_icon_in_single_brain(brain, typesToUpdate, getIconPos, metadata):\n     # if the old icon is a standard icon, we assume no customization\n     # has taken place and we can simply empty the getIcon metadata\n     # without loading the object\n-    new_value = \'\'\n+    new_value = ""\n     old_icons = typesToUpdate[brain.portal_type]\n     brain_icon = brain.getIcon\n     if brain_icon not in old_icons:\n         # Otherwise we need to ask the object\n-        new_value = \'\'\n+        new_value = ""\n         obj = brain.getObject()\n-        method = getattr(aq_base(obj), \'getIcon\', None)\n+        method = getattr(aq_base(obj), "getIcon", None)\n         if method is not None:\n             try:\n                 new_value = obj.getIcon\n@@ -282,7 +285,7 @@ def _update_icon_in_single_brain(brain, typesToUpdate, getIconPos, metadata):\n             except ConflictError:\n                 raise\n             except Exception:\n-                new_value = \'\'\n+                new_value = ""\n     if brain_icon != new_value:\n         rid = brain.getRID()\n         record = metadata[rid]\n@@ -303,22 +306,22 @@ def updateIconsInBrains(context, typesToUpdate=None):\n     main use case.\n     """\n     if not typesToUpdate:\n-        logger.warn(\'No typesToUpdate given for updateIconsInBrains.\')\n+        logger.warn("No typesToUpdate given for updateIconsInBrains.")\n         return\n \n-    catalog = getToolByName(context, \'portal_catalog\')\n-    logger.info(\'Updating `getIcon` metadata.\')\n+    catalog = getToolByName(context, "portal_catalog")\n+    logger.info("Updating `getIcon` metadata.")\n     search = catalog.unrestrictedSearchResults\n-    _catalog = getattr(catalog, \'_catalog\', None)\n+    _catalog = getattr(catalog, "_catalog", None)\n     getIconPos = None\n     if _catalog is not None:\n         metadata = _catalog.data\n-        getIconPos = _catalog.schema.get(\'getIcon\', None)\n+        getIconPos = _catalog.schema.get("getIcon", None)\n     empty_icons = _types_with_empty_icons(context, typesToUpdate)\n-    brains = search(portal_type=empty_icons, sort_on=\'path\')\n+    brains = search(portal_type=empty_icons, sort_on="path")\n     num_objects = len(brains)\n     pghandler = ZLogHandler(1000)\n-    pghandler.init(\'Updating getIcon metadata\', num_objects)\n+    pghandler.init("Updating getIcon metadata", num_objects)\n     i = 0\n     for brain in brains:\n         pghandler.report(i)\n@@ -326,8 +329,7 @@ def updateIconsInBrains(context, typesToUpdate=None):\n         if not brain_icon:\n             continue\n         if getIconPos is not None:\n-            _update_icon_in_single_brain(\n-                brain, typesToUpdate, getIconPos, metadata)\n+            _update_icon_in_single_brain(brain, typesToUpdate, getIconPos, metadata)\n         else:\n             # If we don\'t have a standard catalog tool, fall back to the\n             # official API\n@@ -337,15 +339,14 @@ def updateIconsInBrains(context, typesToUpdate=None):\n             # SearchableText\n             brain_path = brain.getPath()\n             try:\n-                catalog.catalog_object(\n-                    obj, brain_path, [\'id\'], True, pghandler)\n+                catalog.catalog_object(obj, brain_path, ["id"], True, pghandler)\n             except ConflictError:\n                 raise\n             except Exception:\n                 pass\n         i += 1\n     pghandler.finish()\n-    logger.info(\'Updated `getIcon` metadata.\')\n+    logger.info("Updated `getIcon` metadata.")\n \n \n def get_property(context, property_name, default_value=None):\ndiff --git a/plone/app/upgrade/v52/__init__.py b/plone/app/upgrade/v52/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/upgrade/v52/__init__.py\n+++ b/plone/app/upgrade/v52/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/upgrade/v52/alphas.py b/plone/app/upgrade/v52/alphas.py\nindex b5af78d1..b048a88f 100644\n--- a/plone/app/upgrade/v52/alphas.py\n+++ b/plone/app/upgrade/v52/alphas.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from BTrees.OOBTree import OOBTree\n from plone.app.upgrade.utils import cleanUpSkinsTool\n from plone.app.upgrade.utils import loadMigrationProfile\n@@ -12,24 +11,24 @@\n import logging\n \n \n-logger = logging.getLogger(\'plone.app.upgrade\')\n+logger = logging.getLogger("plone.app.upgrade")\n \n \n def cleanup_resources():\n     registry = getUtility(IRegistry)\n-    record = \'plone.bundles/plone-legacy.resources\'\n+    record = "plone.bundles/plone-legacy.resources"\n     resources = registry.records[record]\n \n-    if u\'jquery-highlightsearchterms\' in resources.value:\n-        resources.value.remove(u\'jquery-highlightsearchterms\')\n+    if "jquery-highlightsearchterms" in resources.value:\n+        resources.value.remove("jquery-highlightsearchterms")\n \n \n def migrate_gopipindex(context):\n     # GopipIndex class has moved from p.a.folder to p.folder\n     # just remove and reinstall the index\n-    catalog = getToolByName(context, \'portal_catalog\')\n-    catalog.manage_delIndex(\'getObjPositionInParent\')\n-    manage_addGopipIndex(catalog, \'getObjPositionInParent\')\n+    catalog = getToolByName(context, "portal_catalog")\n+    catalog.manage_delIndex("getObjPositionInParent")\n+    manage_addGopipIndex(catalog, "getObjPositionInParent")\n \n \n def rebuild_memberdata(context):\n@@ -39,20 +38,21 @@ def rebuild_memberdata(context):\n     # with new MemberData records that we get by creating them via a lookup of\n     # all members in portal_membership.\n     logger.info(\n-        \'Rebuilding member data information. This step can take a while if \'\n-        \'your site has many users.\')\n-    md_tool = getToolByName(context, \'portal_memberdata\')\n-    ms_tool = getToolByName(context, \'portal_membership\')\n+        "Rebuilding member data information. This step can take a while if "\n+        "your site has many users."\n+    )\n+    md_tool = getToolByName(context, "portal_memberdata")\n+    ms_tool = getToolByName(context, "portal_membership")\n     # We cannot access data in _members any more, therefore purge it\n     md_tool._members = OOBTree()\n     # Iterate over all existing members and add their data to the tool again\n     for member in ms_tool.searchForMembers():\n         try:\n             md = MemberData(member, md_tool)\n-            logger.info(u\'Updated memberdata for {}\'.format(member))\n+            logger.info(f"Updated memberdata for {member}")\n         # If we can\'t create a MemberData record for this member, skip it\n         except Exception as e:\n-            logger.info(u\'Skip broken memberdata for {}: {}\'.format(member, e))\n+            logger.info(f"Skip broken memberdata for {member}: {e}")\n             continue\n         md_tool.registerMemberData(md._md, md.getId())\n \n@@ -61,12 +61,10 @@ def fix_core_behaviors_in_ftis(context):\n     # The behaviors for IRichText and ILeadImage have been renamed.\n     # All FTIs that use them must be updated accordingly\n     # See plone/plone.app.contenttypes#480\n-    types_tool = getToolByName(context, \'portal_types\')\n+    types_tool = getToolByName(context, "portal_types")\n     to_replace = {\n-        \'plone.app.contenttypes.behaviors.richtext.IRichText\':\n-            \'plone.app.contenttypes.behaviors.richtext.IRichTextBehavior\',\n-        \'plone.app.contenttypes.behaviors.leadimage.ILeadImage\':\n-            \'plone.app.contenttypes.behaviors.leadimage.ILeadImageBehavior\',\n+        "plone.app.contenttypes.behaviors.richtext.IRichText": "plone.app.contenttypes.behaviors.richtext.IRichTextBehavior",\n+        "plone.app.contenttypes.behaviors.leadimage.ILeadImage": "plone.app.contenttypes.behaviors.leadimage.ILeadImageBehavior",\n     }\n     ftis = types_tool.listTypeInfo()\n     for fti in ftis:\n@@ -86,8 +84,8 @@ def fix_core_behaviors_in_ftis(context):\n \n \n def to52alpha1(context):\n-    loadMigrationProfile(context, \'profile-plone.app.upgrade.v52:to52alpha1\')\n-    portal = getToolByName(context, \'portal_url\').getPortalObject()\n+    loadMigrationProfile(context, "profile-plone.app.upgrade.v52:to52alpha1")\n+    portal = getToolByName(context, "portal_url").getPortalObject()\n \n     cleanUpSkinsTool(portal)\n \ndiff --git a/plone/app/upgrade/v52/betas.py b/plone/app/upgrade/v52/betas.py\nindex b80a0c28..dd55b126 100644\n--- a/plone/app/upgrade/v52/betas.py\n+++ b/plone/app/upgrade/v52/betas.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.upgrade.utils import cleanUpToolRegistry\n from plone.app.upgrade.utils import loadMigrationProfile\n from plone.base.utils import get_installer\n@@ -10,38 +9,38 @@\n from zope.intid.interfaces import IIntIds\n from zope.intid.interfaces import IntIdMissingError\n from zope.intid.interfaces import ObjectMissingError\n+\n import logging\n import sys\n \n \n-logger = logging.getLogger(\'plone.app.upgrade\')\n+logger = logging.getLogger("plone.app.upgrade")\n \n \n def add_exclude_from_nav_index(context):\n-    """Add exclude_from_nav index to the portal_catalog.\n-    """\n-    name = \'exclude_from_nav\'\n-    meta_type = \'BooleanIndex\'\n-    catalog = getToolByName(context, \'portal_catalog\')\n+    """Add exclude_from_nav index to the portal_catalog."""\n+    name = "exclude_from_nav"\n+    meta_type = "BooleanIndex"\n+    catalog = getToolByName(context, "portal_catalog")\n     indexes = catalog.indexes()\n     indexables = []\n     if name not in indexes:\n         catalog.addIndex(name, meta_type)\n         indexables.append(name)\n-        logger.info(\'Added %s for field %s.\', meta_type, name)\n+        logger.info("Added %s for field %s.", meta_type, name)\n     if len(indexables) > 0:\n-        logger.info(\'Indexing new indexes %s.\', \', \'.join(indexables))\n+        logger.info("Indexing new indexes %s.", ", ".join(indexables))\n         catalog.manage_reindexIndex(ids=indexables)\n \n \n def remove_legacy_resource_registries(context):\n     """Remove portal_css and portal_javascripts."""\n-    portal_url = getToolByName(context, \'portal_url\')\n+    portal_url = getToolByName(context, "portal_url")\n     portal = portal_url.getPortalObject()\n \n     tools_to_remove = [\n-        \'portal_css\',\n-        \'portal_javascripts\',\n+        "portal_css",\n+        "portal_javascripts",\n     ]\n \n     # remove obsolete tools\n@@ -54,13 +53,10 @@ def remove_legacy_resource_registries(context):\n \n \n def remove_interface_indexes_from_relations_catalog():\n-    """ remove unused interface indexes from relations catalog """\n-    logger.info(\'Removing unused interface indexes from relations catalog.\')\n+    """remove unused interface indexes from relations catalog"""\n+    logger.info("Removing unused interface indexes from relations catalog.")\n     catalog = component.queryUtility(ICatalog)\n-    indexes_to_remove = [\n-        \'from_interfaces_flattened\',\n-        \'to_interfaces_flattened\'\n-    ]\n+    indexes_to_remove = ["from_interfaces_flattened", "to_interfaces_flattened"]\n     for index_to_remove in indexes_to_remove:\n         if index_to_remove in catalog._name_TO_mapping:\n             catalog.removeValueIndex(index_to_remove)\n@@ -73,7 +69,7 @@ def remove_interface_indexes_from_relations_catalog():\n         try:\n             relation = catalog.resolveRelationToken(token)\n         except ObjectMissingError:\n-            logger.warning(\'Removed token with missing object.\')\n+            logger.warning("Removed token with missing object.")\n             catalog._relTokens.remove(token)\n             continue\n \n@@ -82,7 +78,7 @@ def remove_interface_indexes_from_relations_catalog():\n         catalog.unindex_doc(token)\n         empty += 1\n     if empty:\n-        logger.warning(\'Removed %s empty relations.\', empty)\n+        logger.warning("Removed %s empty relations.", empty)\n \n     # Get rid of broken relations, where intid no longer exists.\n     # Those broken need to be removed for a later zodbupdate.\n@@ -105,37 +101,40 @@ def remove_interface_indexes_from_relations_catalog():\n         try:\n             catalog.index(rel)\n         except IntIdMissingError:\n-            logger.warning(\'Broken relation removed.\')\n+            logger.warning("Broken relation removed.")\n     if added_rel_intids:\n-        logger.info(\'Registered %s extra relations in the intid utility.\', added_rel_intids)\n+        logger.info(\n+            "Registered %s extra relations in the intid utility.", added_rel_intids\n+        )\n \n \n class IResourceRegistriesSettings(Interface):\n-    """fake/mock interface to be able to remove non existing dotted path\n-    """\n+    """fake/mock interface to be able to remove non existing dotted path"""\n+\n     pass\n \n \n-FAKE_RR_PATH = "Products.ResourceRegistries.interfaces.settings." \\\n-               "IResourceRegistriesSettings"\n+FAKE_RR_PATH = (\n+    "Products.ResourceRegistries.interfaces.settings." "IResourceRegistriesSettings"\n+)\n \n \n def to52beta1(context):\n     # fake the old ResourceRegistries interface:\n-    fake_mods = FAKE_RR_PATH.split(\'.\')[:-1]\n+    fake_mods = FAKE_RR_PATH.split(".")[:-1]\n     parent = sys.modules[fake_mods[0]]\n     for idx in range(1, len(fake_mods)):\n-        mod_name = \'.\'.join(fake_mods[:idx + 1])\n+        mod_name = ".".join(fake_mods[: idx + 1])\n         mod_inst = ModuleType(mod_name)\n         if parent:\n             setattr(parent, fake_mods[idx], mod_inst)\n         sys.modules[mod_name] = parent = mod_inst\n     sys.modules[FAKE_RR_PATH] = IResourceRegistriesSettings\n-    setattr(parent, \'IResourceRegistriesSettings\', IResourceRegistriesSettings)\n+    setattr(parent, "IResourceRegistriesSettings", IResourceRegistriesSettings)\n     sys.modules[FAKE_RR_PATH]\n-    loadMigrationProfile(context, \'profile-plone.app.upgrade.v52:to52beta1\')\n+    loadMigrationProfile(context, "profile-plone.app.upgrade.v52:to52beta1")\n     for idx in range(1, len(fake_mods)):\n-        mod_name = \'.\'.join(fake_mods[:idx + 1])\n+        mod_name = ".".join(fake_mods[: idx + 1])\n         del sys.modules[mod_name]\n     del sys.modules[FAKE_RR_PATH]\n     delattr(sys.modules[fake_mods[0]], fake_mods[1])\n@@ -144,13 +143,13 @@ def to52beta1(context):\n     remove_interface_indexes_from_relations_catalog()\n     # Make sure plone.staticresources is installed\n     installer = get_installer(context)\n-    if not installer.is_product_installed(\'plone.staticresources\'):\n-        installer.install_product(\'plone.staticresources\')\n+    if not installer.is_product_installed("plone.staticresources"):\n+        installer.install_product("plone.staticresources")\n \n \n def to52rc1(context):\n-    loadMigrationProfile(context, \'profile-plone.app.upgrade.v52:to52rc1\')\n+    loadMigrationProfile(context, "profile-plone.app.upgrade.v52:to52rc1")\n     # Make sure plone.staticresources is installed\n     installer = get_installer(context)\n-    if not installer.is_product_installed(\'plone.staticresources\'):\n-        installer.install_product(\'plone.staticresources\')\n+    if not installer.is_product_installed("plone.staticresources"):\n+        installer.install_product("plone.staticresources")\ndiff --git a/plone/app/upgrade/v52/final.py b/plone/app/upgrade/v52/final.py\nindex 0b52c623..4f63d23f 100644\n--- a/plone/app/upgrade/v52/final.py\n+++ b/plone/app/upgrade/v52/final.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.Permissions import view\n from plone.app.upgrade.utils import loadMigrationProfile\n from plone.base.utils import get_installer\n@@ -14,7 +13,7 @@\n import logging\n \n \n-logger = logging.getLogger(\'plone.app.upgrade\')\n+logger = logging.getLogger("plone.app.upgrade")\n \n \n def rebuild_redirections(context):\n@@ -25,18 +24,17 @@ def rebuild_redirections(context):\n     from plone.app.redirector.interfaces import IRedirectionStorage\n \n     storage = getUtility(IRedirectionStorage)\n-    if not hasattr(storage, \'_rebuild\'):\n+    if not hasattr(storage, "_rebuild"):\n         logger.warning(\n-            \'Not rebuilding redirections: \'\n-            \'IRedirectionStorage misses the _rebuild method. \'\n+            "Not rebuilding redirections: "\n+            "IRedirectionStorage misses the _rebuild method. "\n         )\n         return\n     logger.info(\n-        \'Starting rebuild of redirections to \'\n-        \'add date and manual information.\'\n+        "Starting rebuild of redirections to " "add date and manual information."\n     )\n     storage._rebuild()\n-    logger.info(\'Done rebuilding redirections.\')\n+    logger.info("Done rebuilding redirections.")\n \n \n def move_dotted_to_named_behaviors(context):\n@@ -44,7 +42,7 @@ def move_dotted_to_named_behaviors(context):\n     from plone.behavior.registration import lookup_behavior_registration\n     from plone.dexterity.interfaces import IDexterityFTI\n \n-    ptt = getToolByName(context, \'portal_types\')\n+    ptt = getToolByName(context, "portal_types")\n \n     ftis = [fti for fti in ptt.objectValues() if IDexterityFTI.providedBy(fti)]\n \n@@ -72,22 +70,22 @@ def move_dotted_to_named_behaviors(context):\n                 behaviors.append(behavior)\n                 logger.info(\n                     \'"{dotted}" has no name registered. \'\n-                    \'kept it dotted.\'.format(\n+                    "kept it dotted.".format(\n                         dotted=behavior,\n                     ),\n                 )\n         fti.behaviors = tuple(behaviors)\n         logger.info(\n-            u\'Converted dotted behaviors of {ct} to named behaviors.\'.format(\n+            "Converted dotted behaviors of {ct} to named behaviors.".format(\n                 ct=safe_unicode(fti.title),\n             ),\n         )\n \n-    logger.info(\'Done moving dotted to named behaviors.\')\n+    logger.info("Done moving dotted to named behaviors.")\n     # Make sure plone.staticresources is installed\n     installer = get_installer(context)\n-    if not installer.is_product_installed(\'plone.staticresources\'):\n-        installer.install_product(\'plone.staticresources\')\n+    if not installer.is_product_installed("plone.staticresources"):\n+        installer.install_product("plone.staticresources")\n \n \n KEYS_TO_CHANGE = [\n@@ -119,38 +117,35 @@ def change_interface_on_lang_registry_records(context):\n         record = registry.records.get(old_key, _marker)\n         if record is _marker:\n             continue\n-        logger.info(\n-            "Change registry key \'{0}\' to new interface.".format(old_key)\n-        )\n+        logger.info(f"Change registry key \'{old_key}\' to new interface.")\n         record.field.interfaceName = NEW_PREFIX\n \n \n def to521(context):\n     """5.2.0 -> 5.2.1"""\n-    loadMigrationProfile(context, \'profile-plone.app.upgrade.v52:to521\')\n+    loadMigrationProfile(context, "profile-plone.app.upgrade.v52:to521")\n     # Make sure plone.staticresources is installed\n     installer = get_installer(context)\n-    if not installer.is_product_installed(\'plone.staticresources\'):\n-        installer.install_product(\'plone.staticresources\')\n+    if not installer.is_product_installed("plone.staticresources"):\n+        installer.install_product("plone.staticresources")\n \n \n def to522(context):\n     """5.2.1 -> 5.2.2"""\n-    loadMigrationProfile(context, \'profile-plone.app.upgrade.v52:to522\')\n+    loadMigrationProfile(context, "profile-plone.app.upgrade.v52:to522")\n \n \n def move_markdown_transform_settings_to_registry(context):\n-    """Move markdown settings from portal_transforms to Plone registry.\n-    """\n+    """Move markdown settings from portal_transforms to Plone registry."""\n     registry = getUtility(IRegistry)\n     try:\n-        settings = registry.forInterface(IMarkupSchema, prefix=\'plone\')\n+        settings = registry.forInterface(IMarkupSchema, prefix="plone")\n     except KeyError:\n         # Catch case where markdown_extensions is not yet registered\n-        registry.registerInterface(IMarkupSchema, prefix=\'plone\')\n-        settings = registry.forInterface(IMarkupSchema, prefix=\'plone\')\n-    pt = getToolByName(context, \'portal_transforms\')\n-    extensions = pt.markdown_to_html._config.get(\'enabled_extensions\') or []\n+        registry.registerInterface(IMarkupSchema, prefix="plone")\n+        settings = registry.forInterface(IMarkupSchema, prefix="plone")\n+    pt = getToolByName(context, "portal_transforms")\n+    extensions = pt.markdown_to_html._config.get("enabled_extensions") or []\n     extensions = [safe_unicode(ext) for ext in extensions]\n     settings.markdown_extensions = extensions\n \n@@ -182,7 +177,7 @@ def migrate_record_from_ascii_to_bytes(field_name, iface, prefix=None):\n     if prefix is None:\n         prefix = iface.__identifier__\n     if not prefix.endswith("."):\n-        prefix += \'.\'\n+        prefix += "."\n     if not field_name.startswith(prefix):\n         field_name = prefix + field_name\n     registry = getUtility(IRegistry)\n@@ -212,7 +207,10 @@ def migrate_record_from_ascii_to_bytes(field_name, iface, prefix=None):\n     registry.registerInterface(iface, prefix=prefix)\n     if original_value is None:\n         # Nothing left to do.\n-        logger.info("Replaced empty %s ASCII (native string) field with Bytes field.", field_name)\n+        logger.info(\n+            "Replaced empty %s ASCII (native string) field with Bytes field.",\n+            field_name,\n+        )\n         return\n     new_record = registry.records[field_name]\n     if isinstance(original_value, str):\n@@ -238,8 +236,8 @@ def migrate_site_logo_from_ascii_to_bytes(context):\n \n \n def _recursive_strict_permission(obj):\n-    obj.manage_permission(view, (\'Manager\', \'Owner\'), 0)\n-    if base_hasattr(obj, \'objectValues\'):\n+    obj.manage_permission(view, ("Manager", "Owner"), 0)\n+    if base_hasattr(obj, "objectValues"):\n         for child in obj.objectValues():\n             _recursive_strict_permission(child)\n \ndiff --git a/plone/app/upgrade/v52/tests.py b/plone/app/upgrade/v52/tests.py\nindex 296a1532..9dfa2962 100644\n--- a/plone/app/upgrade/v52/tests.py\n+++ b/plone/app/upgrade/v52/tests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from DateTime import DateTime\n from pkg_resources import get_distribution\n from pkg_resources import parse_version\n@@ -17,12 +16,12 @@ class UpgradeMemberData51to52Test(unittest.TestCase):\n     layer = PLONE_INTEGRATION_TESTING\n \n     def test_rebuild_member_data(self):\n-        portal = self.layer[\'portal\']\n+        portal = self.layer["portal"]\n         from plone.app.upgrade.v52.alphas import rebuild_memberdata\n \n         rebuild_memberdata(portal)\n-        tool = getToolByName(portal, \'portal_memberdata\')\n-        self.assertIn(\'test_user_1_\', tool._members.keys())\n+        tool = getToolByName(portal, "portal_memberdata")\n+        self.assertIn("test_user_1_", tool._members.keys())\n \n \n class Various52Test(unittest.TestCase):\n@@ -38,13 +37,13 @@ def test_rebuild_redirections(self):\n \n         storage = getUtility(IRedirectionStorage)\n         # add old-style redirect directly in internal structure:\n-        old = \'/plone/old\'\n-        new = \'/plone/new\'\n+        old = "/plone/old"\n+        new = "/plone/new"\n         storage._paths[old] = new\n         # get_full mocks a new-style redirect,\n         # though with None instead of a DateTime, and manual always True.\n         self.assertTupleEqual(storage.get_full(old), (new, None, True))\n-        portal = self.layer[\'portal\']\n+        portal = self.layer["portal"]\n         # Run the rebuild, and keep track of time before and after.\n         time1 = DateTime()\n         rebuild_redirections(portal.portal_setup)\n@@ -91,10 +90,11 @@ class SiteLogoTest(unittest.TestCase):\n     Ah, no problem after all: zope.schema.ASCII/Bytes may be the same,\n     but plone.registry.fields.ASCII/Bytes are always different.\n     """\n+\n     layer = PLONE_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.registry = getUtility(IRegistry)\n \n     def test_current_site_logo(self):\n@@ -102,16 +102,16 @@ def test_current_site_logo(self):\n         from plone.app.upgrade.v52.final import migrate_site_logo_from_ascii_to_bytes\n         from zope.schema.interfaces import WrongType\n \n-        record = self.registry.records[\'plone.site_logo\']\n+        record = self.registry.records["plone.site_logo"]\n         self.assertIsInstance(record.field, field.Bytes)\n         self.assertIsNone(record.value)\n         with self.assertRaises(WrongType):\n-            record.value = u"abc"\n+            record.value = "abc"\n         record.value = b"ABC"\n         self.assertEqual(record.value, b"ABC")\n         # Migrating does nothing.\n         migrate_site_logo_from_ascii_to_bytes(self.portal)\n-        record = self.registry.records[\'plone.site_logo\']\n+        record = self.registry.records["plone.site_logo"]\n         self.assertIsInstance(record.field, field.Bytes)\n         self.assertIsInstance(record.value, bytes)\n         self.assertEqual(record.value, b"ABC")\n@@ -120,34 +120,34 @@ def test_missing_site_logo_record(self):\n         # Test that the migration adds the record if for some reason it is missing.\n         from plone.app.upgrade.v52.final import migrate_site_logo_from_ascii_to_bytes\n \n-        del self.registry.records[\'plone.site_logo\']\n+        del self.registry.records["plone.site_logo"]\n         migrate_site_logo_from_ascii_to_bytes(self.portal)\n-        record = self.registry.records[\'plone.site_logo\']\n+        record = self.registry.records["plone.site_logo"]\n         self.assertIsInstance(record.field, field.Bytes)\n         self.assertIsNone(record.value)\n \n     def test_site_logo_empty(self):\n         from plone.app.upgrade.v52.final import migrate_site_logo_from_ascii_to_bytes\n \n-        del self.registry.records[\'plone.site_logo\']\n+        del self.registry.records["plone.site_logo"]\n         record_51 = Record(field.ASCII())\n-        self.registry.records[\'plone.site_logo\'] = record_51\n+        self.registry.records["plone.site_logo"] = record_51\n         # Migrate.\n         migrate_site_logo_from_ascii_to_bytes(self.portal)\n-        record = self.registry.records[\'plone.site_logo\']\n+        record = self.registry.records["plone.site_logo"]\n         self.assertIsInstance(record.field, field.Bytes)\n         self.assertIsNone(record.value)\n \n     def test_site_logo_text(self):\n         from plone.app.upgrade.v52.final import migrate_site_logo_from_ascii_to_bytes\n \n-        del self.registry.records[\'plone.site_logo\']\n+        del self.registry.records["plone.site_logo"]\n         record_51 = Record(field.ASCII())\n         record_51.value = "native string"\n-        self.registry.records[\'plone.site_logo\'] = record_51\n+        self.registry.records["plone.site_logo"] = record_51\n         # Migrate.\n         migrate_site_logo_from_ascii_to_bytes(self.portal)\n-        record = self.registry.records[\'plone.site_logo\']\n+        record = self.registry.records["plone.site_logo"]\n         self.assertIsInstance(record.field, field.Bytes)\n         self.assertIsInstance(record.value, bytes)\n         self.assertEqual(record.value, b"native string")\n@@ -155,8 +155,8 @@ def test_site_logo_text(self):\n     def test_migrate_record_from_ascii_to_bytes_with_prefix(self):\n         # This is the more general fixer from ASCII to Bytes.\n         from plone.app.upgrade.v52.final import migrate_record_from_ascii_to_bytes\n-        from zope.interface import Interface\n         from zope import schema\n+        from zope.interface import Interface\n \n         class ITest(Interface):\n             testfield = schema.ASCII()\n@@ -184,14 +184,14 @@ class ITest(Interface):\n     def test_migrate_record_from_ascii_to_bytes_without_prefix(self):\n         # This is the more general fixer from ASCII to Bytes.\n         from plone.app.upgrade.v52.final import migrate_record_from_ascii_to_bytes\n-        from zope.interface import Interface\n         from zope import schema\n+        from zope.interface import Interface\n \n         class ITest(Interface):\n             testfield = schema.ASCII()\n \n         self.registry.registerInterface(ITest)\n-        record_name = "{}.testfield".format(ITest.__identifier__)\n+        record_name = f"{ITest.__identifier__}.testfield"\n         record = self.registry.records[record_name]\n         record.value = "native string"\n         self.assertIsInstance(record.field, field.ASCII)\n@@ -218,36 +218,38 @@ class UpgradePortalTransforms521to522Test(unittest.TestCase):\n     layer = PLONE_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.pt = self.portal.portal_transforms\n         registry = getUtility(IRegistry)\n-        self.settings = registry.forInterface(IMarkupSchema, prefix=\'plone\')\n+        self.settings = registry.forInterface(IMarkupSchema, prefix="plone")\n \n     def test_migrate_markup_settings(self):\n-        from plone.app.upgrade.v52.final import \\\n-            move_markdown_transform_settings_to_registry\n-        self.pt.markdown_to_html._config[\'enabled_extensions\'] = [\n-            \'markdown.extensions.fenced_code\',\n-            \'markdown.extensions.nl2br\',\n-            \'markdown.extensions.extra\',\n+        from plone.app.upgrade.v52.final import (\n+            move_markdown_transform_settings_to_registry,\n+        )\n+\n+        self.pt.markdown_to_html._config["enabled_extensions"] = [\n+            "markdown.extensions.fenced_code",\n+            "markdown.extensions.nl2br",\n+            "markdown.extensions.extra",\n         ]\n         move_markdown_transform_settings_to_registry(self.portal)\n-        if getattr(self.settings, \'markdown_extensions\', None):\n+        if getattr(self.settings, "markdown_extensions", None):\n             self.assertEqual(\n                 self.settings.markdown_extensions,\n                 [\n-                    \'markdown.extensions.fenced_code\',\n-                    \'markdown.extensions.nl2br\',\n-                    \'markdown.extensions.extra\',\n-                ]\n+                    "markdown.extensions.fenced_code",\n+                    "markdown.extensions.nl2br",\n+                    "markdown.extensions.extra",\n+                ],\n             )\n \n \n def test_suite():\n     # Skip these tests on Plone < 5.2a1\n-    plone_version = get_distribution(\'Products.CMFPlone\').version\n-    if not parse_version(plone_version) >= parse_version(\'5.2a1\'):\n+    plone_version = get_distribution("Products.CMFPlone").version\n+    if not parse_version(plone_version) >= parse_version("5.2a1"):\n         return unittest.TestSuite()\n \n     suite = unittest.TestSuite()\ndiff --git a/plone/app/upgrade/v60/__init__.py b/plone/app/upgrade/v60/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/upgrade/v60/__init__.py\n+++ b/plone/app/upgrade/v60/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/upgrade/v60/alphas.py b/plone/app/upgrade/v60/alphas.py\nindex 8fcff6ce..7445b984 100644\n--- a/plone/app/upgrade/v60/alphas.py\n+++ b/plone/app/upgrade/v60/alphas.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.upgrade.utils import loadMigrationProfile\n from plone.base.utils import get_installer\n from plone.dexterity.fti import DexterityFTI\n@@ -147,8 +146,7 @@ def fix_unicode_properties(context):\n \n \n def cleanup_resources_and_bundles_in_registry(context=None):\n-    """Fix registry for es6 resources and new resource registry.\n-    """\n+    """Fix registry for es6 resources and new resource registry."""\n     registry = getUtility(IRegistry)\n \n     # We need to upgrade staticresources first.\n@@ -158,7 +156,9 @@ def cleanup_resources_and_bundles_in_registry(context=None):\n     # Also reregister the newly defined plone.session bundle if it is installed.\n     installer = get_installer(context)\n     if installer.is_profile_installed("plone.session:default"):\n-        loadMigrationProfile(context, "profile-plone.session:default", steps=["plone.app.registry"])\n+        loadMigrationProfile(\n+            context, "profile-plone.session:default", steps=["plone.app.registry"]\n+        )\n \n     # Remove obsolete records from the registry\n     removed_keys = [\n@@ -177,19 +177,20 @@ def cleanup_resources_and_bundles_in_registry(context=None):\n         for removed_key in removed_keys:\n             if key.startswith(removed_key):\n                 to_delete.append(key)\n-                logger.debug(u"Removed record {}".format(key))\n+                logger.debug(f"Removed record {key}")\n                 break\n     for key in to_delete:\n         del registry.records[key]\n-    logger.info(u"Removed {} records from registry".format(len(to_delete)))\n+    logger.info(f"Removed {len(to_delete)} records from registry")\n \n     # make sure they are all gone\n     try:\n         from Products.CMFPlone.interfaces import IResourceRegistry\n+\n         records = registry.collectionOfInterface(\n             IResourceRegistry, prefix="plone.resources", check=False\n         )\n-        assert(len(records) == 0)\n+        assert len(records) == 0\n     except ImportError:\n         # the interface may be removed at some point\n         pass\n@@ -218,7 +219,7 @@ def cleanup_resources_and_bundles_in_registry(context=None):\n     for name in removed_bundles:\n         if name in bundles:\n             del bundles[name]\n-            logger.info(u"Removed bundle {}".format(name))\n+            logger.info(f"Removed bundle {name}")\n \n     # Remove deprecated bundle fields\n     removed_fields = [\n@@ -236,21 +237,31 @@ def cleanup_resources_and_bundles_in_registry(context=None):\n         for removed_field in removed_fields:\n             if key.startswith("plone.bundles/") and key.endswith(removed_field):\n                 to_delete.append(key)\n-                logger.debug(u"Removed record {}".format(key))\n+                logger.debug(f"Removed record {key}")\n     for key in to_delete:\n         del registry.records[key]\n-    logger.info(u"Removed {} deprecated bundle attributes from registry".format(len(to_delete)))\n+    logger.info(f"Removed {len(to_delete)} deprecated bundle attributes from registry")\n \n     # local default controlpanel icons\n-    loadMigrationProfile(context, "profile-Products.CMFPlone:plone", steps=["controlpanel"])\n+    loadMigrationProfile(\n+        context, "profile-Products.CMFPlone:plone", steps=["controlpanel"]\n+    )\n     if installer.is_profile_installed("plone.app.theming:default"):\n-        loadMigrationProfile(context, "profile-plone.app.theming:default", steps=["controlpanel"])\n+        loadMigrationProfile(\n+            context, "profile-plone.app.theming:default", steps=["controlpanel"]\n+        )\n     if installer.is_profile_installed("plone.app.registry:default"):\n-        loadMigrationProfile(context, "profile-plone.app.registry:default", steps=["controlpanel"])\n+        loadMigrationProfile(\n+            context, "profile-plone.app.registry:default", steps=["controlpanel"]\n+        )\n     if installer.is_profile_installed("plone.app.caching:default"):\n-        loadMigrationProfile(context, "profile-plone.app.caching:default", steps=["controlpanel"])\n+        loadMigrationProfile(\n+            context, "profile-plone.app.caching:default", steps=["controlpanel"]\n+        )\n     if installer.is_profile_installed("Products.CMFPlacefulWorkflow:base"):\n-        loadMigrationProfile(context, "profile-Products.CMFPlacefulWorkflow:base", steps=["controlpanel"])\n+        loadMigrationProfile(\n+            context, "profile-Products.CMFPlacefulWorkflow:base", steps=["controlpanel"]\n+        )\n \n \n def add_new_image_scales(context):\ndiff --git a/plone/app/upgrade/v60/tests.py b/plone/app/upgrade/v60/tests.py\nindex a54e4c20..78ca73e5 100644\n--- a/plone/app/upgrade/v60/tests.py\n+++ b/plone/app/upgrade/v60/tests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import PLONE_INTEGRATION_TESTING\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\ndiff --git a/setup.py b/setup.py\nindex 65bb05b0..a5bdb44f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,14 +2,13 @@\n from setuptools import setup\n \n \n-version = \'3.0.0a5.dev0\'\n+version = "3.0.0a5.dev0"\n \n setup(\n-    name=\'plone.app.upgrade\',\n+    name="plone.app.upgrade",\n     version=version,\n     description="Upgrade machinery for Plone.",\n-    long_description=(open("README.rst").read() + "\\n" +\n-                      open("CHANGES.rst").read()),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 6 - Mature",\n         "Environment :: Web Environment",\n@@ -24,40 +23,40 @@\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'Plone upgrade migration\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.upgrade/\',\n-    license=\'GPL version 2\',\n+    keywords="Plone upgrade migration",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.upgrade/",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require=dict(\n         test=[\n-            \'plone.app.testing\',\n-            \'plone.app.redirector\',\n+            "plone.app.testing",\n+            "plone.app.redirector",\n         ]\n     ),\n     install_requires=[\n-        \'setuptools\',\n-        \'plone.base\',\n-        \'plone.registry\',\n-        \'plone.folder\',\n-        \'plone.uuid\',\n-        \'transaction\',\n-        \'zope.component\',\n-        \'zope.interface\',\n-        \'Acquisition\',\n-        \'Products.CMFPlone>=6.0.0a1\',\n-        \'Products.CMFCore\',\n-        \'Products.CMFEditions\',\n-        \'Products.GenericSetup\',\n-        \'Products.PlonePAS\',\n-        \'Products.ZCatalog\',\n-        \'ZODB\',\n-        \'Zope>=5.5\',\n-        \'plone.app.theming\',\n+        "setuptools",\n+        "plone.base",\n+        "plone.registry",\n+        "plone.folder",\n+        "plone.uuid",\n+        "transaction",\n+        "zope.component",\n+        "zope.interface",\n+        "Acquisition",\n+        "Products.CMFPlone>=6.0.0a1",\n+        "Products.CMFCore",\n+        "Products.CMFEditions",\n+        "Products.GenericSetup",\n+        "Products.PlonePAS",\n+        "Products.ZCatalog",\n+        "ZODB",\n+        "Zope>=5.5",\n+        "plone.app.theming",\n     ],\n     entry_points="""\n     [z3c.autoinclude.plugin]\n'

