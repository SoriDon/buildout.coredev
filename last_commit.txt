Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2022-02-13T16:01:07-08:00
Author: Ross Patterson (rpatterson) <me@rpatterson.net>
Commit: https://github.com/plone/Products.PlonePAS/commit/7e6d9d5999621e8988ae38afcef914d3f077b38a

feat(setup): Zope root Basic -&gt; cookie login form

Improve the Zope root ZMI login UX, avoid all the HTTP `Authorization: Basic ...` edge
cases and hassles. Switch the default authentication challenge for the Zope root
`/acl_users` from HTTP `Authorization: Basic ...` to the cookie auth plugins basic login
form.

This should be a much better UX overall and shouldn't cause any fundamental issues.  One
can still use HTTP `Authorization: Basic ...` manually by adding credentials to the URL:

    http://admin:secret@localhost:8080/manage_main

But may cause issues where tests expect the HTTP `Authorization: Basic ...` challenge
response or existing uses where new Zope instances are created as a part of normal
use (SAAS?).

We could also consider adding an upgrade step to make this change to existing
installations but that would be disruptive to any existing installations that require
HTTP `Authorization: Basic ...`.  I can't imagine why that would be, but we should
probably expect those use cases to come out of the woodwork once an upgrade step is
released.

Files changed:
M src/Products/PlonePAS/setuphandlers.py
M src/Products/PlonePAS/tests/test_setup.py

b'diff --git a/src/Products/PlonePAS/setuphandlers.py b/src/Products/PlonePAS/setuphandlers.py\nindex 084ca86b..daabb2f7 100644\n--- a/src/Products/PlonePAS/setuphandlers.py\n+++ b/src/Products/PlonePAS/setuphandlers.py\n@@ -324,9 +324,14 @@ def migrate_root_uf(self):\n     pas = uf.manage_addProduct[\'PluggableAuthService\']\n     plone_pas = uf.manage_addProduct[\'PlonePAS\']\n     # Setup authentication plugins\n-    setupAuthPlugins(parent, pas, plone_pas,\n-                     deactivate_basic_reset=False,\n-                     deactivate_cookie_challenge=True)\n+    setupAuthPlugins(\n+        parent,\n+        pas,\n+        plone_pas,\n+        deactivate_basic_reset=False,\n+        # Switch from HTTP `Authorization: Basic ...` to cookie login form\n+        deactivate_cookie_challenge=False,\n+    )\n \n     # Activate *all* interfaces for user manager. IUserAdder is not\n     # activated for some reason by default.\ndiff --git a/src/Products/PlonePAS/tests/test_setup.py b/src/Products/PlonePAS/tests/test_setup.py\nindex 473f5106..ca502dca 100644\n--- a/src/Products/PlonePAS/tests/test_setup.py\n+++ b/src/Products/PlonePAS/tests/test_setup.py\n@@ -23,11 +23,11 @@ def setUp(self):\n         self.app = self.layer["app"]\n         self.root_acl_users = self.app.acl_users\n \n-    def test_zope_root_default_challenge(self):\n+    def test_zope_root_basic_challenge(self):\n         """\n-        The Zope root `/acl_users` default challenge plugin works.\n+        The Zope root `/acl_users` basic challenge plugin works.\n         """\n-        # Check the Zope root PAS plugin configuration\n+        # Make the basic plugin the default auth challenge\n         self.assertIn(\n             "credentials_basic_auth",\n             self.root_acl_users.objectIds(),\n@@ -39,6 +39,11 @@ def test_zope_root_default_challenge(self):\n             HTTPBasicAuthHelper.HTTPBasicAuthHelper,\n             "Wrong Zope root `/acl_users` basic auth plugin type",\n         )\n+        self.root_acl_users.plugins.movePluginsTop(\n+            plugins_ifaces.IChallengePlugin,\n+            [basic_plugin.id],\n+        )\n+        transaction.commit()\n         challenge_plugins = self.root_acl_users.plugins.listPlugins(\n             plugins_ifaces.IChallengePlugin,\n         )\n@@ -56,14 +61,14 @@ def test_zope_root_default_challenge(self):\n         self.assertEqual(\n             browser.headers["Status"].lower(),\n             "401 unauthorized",\n-            "Wrong Zope root `/acl_users` default challenge response status",\n+            "Wrong Zope root `/acl_users` basic challenge response status",\n         )\n \n-    def test_zope_root_cookie_login(self):\n+    def test_zope_root_default_login(self):\n         """\n-        The Zope root `/acl_users` cookie login works.\n+        The Zope root `/acl_users` default login works.\n         """\n-        # Make the cookie plugin the default auth challenge\n+        # Check the Zope root PAS plugin configuration\n         self.assertIn(\n             "credentials_cookie_auth",\n             self.root_acl_users.objectIds(),\n@@ -75,15 +80,6 @@ def test_zope_root_cookie_login(self):\n             CookieAuthHelper.CookieAuthHelper,\n             "Wrong Zope root `/acl_users` cookie auth plugin type",\n         )\n-        self.root_acl_users.plugins.activatePlugin(\n-            plugins_ifaces.IChallengePlugin,\n-            cookie_plugin.id,\n-        )\n-        self.root_acl_users.plugins.movePluginsTop(\n-            plugins_ifaces.IChallengePlugin,\n-            [cookie_plugin.id],\n-        )\n-        transaction.commit()\n         challenge_plugins = self.root_acl_users.plugins.listPlugins(\n             plugins_ifaces.IChallengePlugin,\n         )\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2022-02-13T16:01:07-08:00
Author: Ross Patterson (rpatterson) <me@rpatterson.net>
Commit: https://github.com/plone/Products.PlonePAS/commit/660343de91afc53a27ae8e77b8df1c795295f0b2

style(lint): Cleanup/ignore common linter errors

These are linters that my editor uses by default because they are common linters, so
might as well fix what we can and ignore the rest.  As much as possible, I placed
ignores that should apply across the code base in the appropriate configuration file
rather than inline comments.

Files changed:
A mypy.ini
M pyproject.toml
M setup.cfg
M src/Products/PlonePAS/interfaces/memberdata.py
M src/Products/PlonePAS/interfaces/membership.py
M src/Products/PlonePAS/patch.py
M src/Products/PlonePAS/plugins/ufactory.py
M src/Products/PlonePAS/sheet.py
M src/Products/PlonePAS/tests/test_setup.py
M src/Products/PlonePAS/tools/membership.py

b'diff --git a/mypy.ini b/mypy.ini\nnew file mode 100644\nindex 00000000..cf6d4202\n--- /dev/null\n+++ b/mypy.ini\n@@ -0,0 +1,45 @@\n+# Couldn\'t get `foo.*` module wildcards to work in `./pyproject.toml`\n+[mypy-ordereddict]\n+ignore_missing_imports = True\n+[mypy-transaction]\n+ignore_missing_imports = True\n+[mypy-zope.*]\n+ignore_missing_imports = True\n+[mypy-ZODB.*]\n+ignore_missing_imports = True\n+[mypy-BTrees.*]\n+ignore_missing_imports = True\n+[mypy-zExceptions.*]\n+ignore_missing_imports = True\n+[mypy-AccessControl.*]\n+ignore_missing_imports = True\n+[mypy-Acquisition.*]\n+ignore_missing_imports = True\n+[mypy-OFS.*]\n+ignore_missing_imports = TRUE\n+[mypy-ZPublisher.*]\n+ignore_missing_imports = True\n+[mypy-App.*]\n+ignore_missing_imports = True\n+[mypy-AuthEncoding.*]\n+ignore_missing_imports = True\n+[mypy-DateTime.*]\n+ignore_missing_imports = True\n+[mypy-Products.*]\n+ignore_missing_imports = True\n+[mypy-plone.*]\n+ignore_missing_imports = True\n+\n+# For some reason installing `types-*` didn\'t work\n+[mypy-six.*]\n+ignore_missing_imports = True\n+[mypy-past.*]\n+ignore_missing_imports = True\n+[mypy-PIL.*]\n+ignore_missing_imports = True\n+\n+# Zope interfaces break MyPy expectations and unfortunately I couldn\'t find a way to\n+# ignore only the specific error MyPy reports:\n+# `./src/Products/PlonePAS/interfaces/capabilities.py:57: error: Method must have at least one argument`\n+[mypy-*.interfaces.*]\n+ignore_errors = True\n\\ No newline at end of file\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615de..c4f4af63 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,8 @@\n+[tool.pylint.\'MESSAGES CONTROL\']\n+disable = [\n+    "wrong-import-order",\n+]\n+\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\ndiff --git a/setup.cfg b/setup.cfg\nindex 06aa277c..cdfdbc2c 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -4,3 +4,11 @@ create-wheel = yes\n # When Python 2-3 compatible:\n [bdist_wheel]\n universal = 1\n+\n+[flake8]\n+# Match Black\'s defaults\n+# https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html#flake8\n+max-line-length = 88\n+extend-ignore = E203\n+aggressive = 3\n+experimental = true\ndiff --git a/src/Products/PlonePAS/interfaces/memberdata.py b/src/Products/PlonePAS/interfaces/memberdata.py\nindex 024c73cc..2eca85fc 100644\n--- a/src/Products/PlonePAS/interfaces/memberdata.py\n+++ b/src/Products/PlonePAS/interfaces/memberdata.py\n@@ -7,4 +7,4 @@ class IMemberDataTool(interfaces.IMemberDataTool):\n     """\n \n \n-__all__ = (IMemberDataTool,)\n+__all__ = ("IMemberDataTool", )\ndiff --git a/src/Products/PlonePAS/interfaces/membership.py b/src/Products/PlonePAS/interfaces/membership.py\nindex 1f8a757a..e36e5265 100644\n--- a/src/Products/PlonePAS/interfaces/membership.py\n+++ b/src/Products/PlonePAS/interfaces/membership.py\n@@ -9,4 +9,4 @@ def getMemberInfo(memberId=None):\n         location, etc\n         """\n \n-__all__ = (IMembershipTool, )\n+__all__ = ("IMembershipTool", )\ndiff --git a/src/Products/PlonePAS/patch.py b/src/Products/PlonePAS/patch.py\nindex c5f24c37..3eaea2fe 100644\n--- a/src/Products/PlonePAS/patch.py\n+++ b/src/Products/PlonePAS/patch.py\n@@ -15,7 +15,7 @@ def call(self, __name__, *args, **kw):\n ADDED = \'__PlonePAS_is_added_method__\'\n ORIG_NAME = \'__PlonePAS_original_method_name__\'\n \n-_marker = dict()\n+_marker = dict()  # type: ignore\n \n \n def isWrapperMethod(meth):\ndiff --git a/src/Products/PlonePAS/plugins/ufactory.py b/src/Products/PlonePAS/plugins/ufactory.py\nindex 9be8b467..107b7e93 100644\n--- a/src/Products/PlonePAS/plugins/ufactory.py\n+++ b/src/Products/PlonePAS/plugins/ufactory.py\n@@ -19,7 +19,7 @@\n try:\n     from collections import OrderedDict\n except ImportError:\n-    from ordereddict import OrderedDict\n+    from ordereddict import OrderedDict  # type: ignore\n \n manage_addPloneUserFactoryForm = DTMLFile(\'../zmi/PloneUserFactoryForm\',\n                                           globals())\ndiff --git a/src/Products/PlonePAS/sheet.py b/src/Products/PlonePAS/sheet.py\nindex 7a83c7e2..bbd2f48c 100644\n--- a/src/Products/PlonePAS/sheet.py\n+++ b/src/Products/PlonePAS/sheet.py\n@@ -8,6 +8,7 @@\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.PlonePAS.interfaces.propertysheets import IMutablePropertySheet\n from Products.PluggableAuthService.UserPropertySheet import UserPropertySheet\n+from past.builtins import long\n from zope.component import getUtility\n from zope.interface import implementer\n \n@@ -42,6 +43,7 @@ def validate(self, property_type, value):\n         inspector = self.tmap[property_type]\n         return inspector(value)\n \n+\n PropertySchema = PropertySchemaTypeMap()\n PropertySchema.addType(\n     \'string\',\ndiff --git a/src/Products/PlonePAS/tests/test_setup.py b/src/Products/PlonePAS/tests/test_setup.py\nindex ca502dca..dc2ef98f 100644\n--- a/src/Products/PlonePAS/tests/test_setup.py\n+++ b/src/Products/PlonePAS/tests/test_setup.py\n@@ -1,4 +1,8 @@\n # -*- coding: utf-8 -*-\n+"""\n+Test set up specific to Plone through thea GenericSetup profile installation.\n+"""\n+\n from plone.app import testing as pa_testing\n from plone.testing import zope\n from zope.component import hooks\n@@ -13,6 +17,9 @@\n \n \n class PortalSetupTest(unittest.TestCase):\n+    """\n+    Test set up specific to Plone through thea GenericSetup profile installation.\n+    """\n \n     layer = testing.PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING\n \n@@ -116,7 +123,9 @@ def test_zope_root_default_login(self):\n         # Submit the login form in the browser\n         login_form = browser.getForm()\n         login_form.getControl(name="__ac_name").value = pa_testing.SITE_OWNER_NAME\n-        login_form.getControl(name="__ac_password").value = pa_testing.TEST_USER_PASSWORD\n+        login_form.getControl(\n+            name="__ac_password"\n+        ).value = pa_testing.TEST_USER_PASSWORD\n         login_form.controls[-1].click()\n         self.assertEqual(\n             browser.headers["Status"].lower(),\ndiff --git a/src/Products/PlonePAS/tools/membership.py b/src/Products/PlonePAS/tools/membership.py\nindex 857a2e00..29c103a3 100644\n--- a/src/Products/PlonePAS/tools/membership.py\n+++ b/src/Products/PlonePAS/tools/membership.py\n@@ -45,7 +45,7 @@\n default_portrait = \'defaultUser.png\'\n logger = logging.getLogger(\'PlonePAS\')\n \n-_marker = dict()\n+_marker = dict()  # type: ignore\n \n \n def _unicodify_structure(value, charset=_marker):\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2022-02-13T16:01:07-08:00
Author: Ross Patterson (rpatterson) <me@rpatterson.net>
Commit: https://github.com/plone/Products.PlonePAS/commit/955a276681e7ba3b19d9c411f00bac5f291db698

refactor(setup): More sensible import step define

Files changed:
M src/Products/PlonePAS/configure.zcml
M src/Products/PlonePAS/profiles.zcml

b'diff --git a/src/Products/PlonePAS/configure.zcml b/src/Products/PlonePAS/configure.zcml\nindex d7c003ae..a6a123e4 100644\n--- a/src/Products/PlonePAS/configure.zcml\n+++ b/src/Products/PlonePAS/configure.zcml\n@@ -2,7 +2,6 @@\n     i18n_domain="plone"\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:five="http://namespaces.zope.org/five"\n-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     xmlns:i18n="http://namespaces.zope.org/i18n">\n \n   <include package=".browser" />\n@@ -10,17 +9,6 @@\n   <include file="profiles.zcml" />\n   <include file="exportimport.zcml" />\n \n-  <genericsetup:importStep\n-      description="Configure PlonePas"\n-      handler="Products.PlonePAS.setuphandlers.setupPlonePAS"\n-      name="plonepas"\n-      title="PlonePAS setup">\n-    <depends name="componentregistry" />\n-    <depends name="controlpanel" />\n-    <depends name="memberdata-properties" />\n-    <depends name="rolemap" />\n-  </genericsetup:importStep>\n-\n   <five:deprecatedManageAddDelete class=".plugins.cookie_handler.ExtendedCookieAuthHelper" />\n   <five:deprecatedManageAddDelete class=".plugins.role.GroupAwareRoleManager" />\n \ndiff --git a/src/Products/PlonePAS/profiles.zcml b/src/Products/PlonePAS/profiles.zcml\nindex 84103954..2b93de24 100644\n--- a/src/Products/PlonePAS/profiles.zcml\n+++ b/src/Products/PlonePAS/profiles.zcml\n@@ -10,5 +10,15 @@\n       description="Extension profile for default PlonePAS setup."\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n       />\n+  <genericsetup:importStep\n+      description="Configure PlonePas"\n+      handler="Products.PlonePAS.setuphandlers.setupPlonePAS"\n+      name="plonepas"\n+      title="PlonePAS setup">\n+    <depends name="componentregistry" />\n+    <depends name="controlpanel" />\n+    <depends name="memberdata-properties" />\n+    <depends name="rolemap" />\n+  </genericsetup:importStep>\n \n </configure>\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2022-02-25T01:24:34-08:00
Author: Ross Patterson (rpatterson) <me@rpatterson.net>
Commit: https://github.com/plone/Products.PlonePAS/commit/13c1766e9bcfc0da8306c7a33e2dd6e828affe10

feat(setup): Zope root cookie login form profile

Move the change of the default Zope root configuration from HTTP Basic auth to the
cookie login form [into a separate GenericSetup upgrade step to make the change
optional](https://github.com/plone/plone.restapi/pull/1304#issuecomment-1004702508).

This reverts commit 132c2c390801ff16393f214c1501252b240cb62a.

Files changed:
A news/zope-root-cookie.feature
A src/Products/PlonePAS/profiles/root-cookie/metadata.xml
A src/Products/PlonePAS/profiles/root-cookie/plone-pas-zope-root-cookie.txt
M src/Products/PlonePAS/profiles.zcml
M src/Products/PlonePAS/setuphandlers.py
M src/Products/PlonePAS/tests/test_setup.py

b'diff --git a/news/zope-root-cookie.feature b/news/zope-root-cookie.feature\nnew file mode 100644\nindex 00000000..b2d8f892\n--- /dev/null\n+++ b/news/zope-root-cookie.feature\n@@ -0,0 +1,4 @@\n+Add separate `GenericSetup` profile to switch the Zope root `/acl_users` to use a simple\n+cookie login form.  Useful when Zope root login and logout need to synchronize\n+authentication state between multiple plugins, which is not possible with HTTP `Basic\n+...` authentication. [rpatterson] (#65)\ndiff --git a/src/Products/PlonePAS/profiles.zcml b/src/Products/PlonePAS/profiles.zcml\nindex 2b93de24..74286bdd 100644\n--- a/src/Products/PlonePAS/profiles.zcml\n+++ b/src/Products/PlonePAS/profiles.zcml\n@@ -21,4 +21,20 @@\n     <depends name="rolemap" />\n   </genericsetup:importStep>\n \n+  <genericsetup:registerProfile\n+      name="root-cookie"\n+      title="Zope Root Cookie Login"\n+      description="Change the Zope root `/acl_users` to use a simple cookie login form\n+\t\t   instead of HTTP `Basic ...` for authentication."\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      />\n+  <genericsetup:importStep\n+      name="zope-root-auth-cookie"\n+      title="Zope Root Cookie Login"\n+      description="Change the Zope root `/acl_users` to use a simple cookie login form\n+\t\t   instead of HTTP `Basic ...` for authentication."\n+      handler=".setuphandlers.set_up_zope_root_cookie_auth">\n+    <depends name="plonepas" />\n+  </genericsetup:importStep>\n+\n </configure>\ndiff --git a/src/Products/PlonePAS/profiles/root-cookie/metadata.xml b/src/Products/PlonePAS/profiles/root-cookie/metadata.xml\nnew file mode 100644\nindex 00000000..cf4492ac\n--- /dev/null\n+++ b/src/Products/PlonePAS/profiles/root-cookie/metadata.xml\n@@ -0,0 +1,4 @@\n+<?xml version="1.0"?>\n+<metadata>\n+  <version>1</version>\n+</metadata>\ndiff --git a/src/Products/PlonePAS/profiles/root-cookie/plone-pas-zope-root-cookie.txt b/src/Products/PlonePAS/profiles/root-cookie/plone-pas-zope-root-cookie.txt\nnew file mode 100644\nindex 00000000..a0844b6c\n--- /dev/null\n+++ b/src/Products/PlonePAS/profiles/root-cookie/plone-pas-zope-root-cookie.txt\n@@ -0,0 +1,2 @@\n+Change the Zope root `/acl_users` to use a simple cookie login form instead of HTTP\n+`Basic ...` for authentication.\ndiff --git a/src/Products/PlonePAS/setuphandlers.py b/src/Products/PlonePAS/setuphandlers.py\nindex daabb2f7..de6315af 100644\n--- a/src/Products/PlonePAS/setuphandlers.py\n+++ b/src/Products/PlonePAS/setuphandlers.py\n@@ -1,4 +1,8 @@\n # -*- coding: utf-8 -*-\n+"""\n+Custom GenericSetup import steps for PAS in Plone.\n+"""\n+\n from Acquisition import aq_base\n from Acquisition import aq_parent\n from Products.CMFCore.utils import getToolByName\n@@ -324,14 +328,9 @@ def migrate_root_uf(self):\n     pas = uf.manage_addProduct[\'PluggableAuthService\']\n     plone_pas = uf.manage_addProduct[\'PlonePAS\']\n     # Setup authentication plugins\n-    setupAuthPlugins(\n-        parent,\n-        pas,\n-        plone_pas,\n-        deactivate_basic_reset=False,\n-        # Switch from HTTP `Authorization: Basic ...` to cookie login form\n-        deactivate_cookie_challenge=False,\n-    )\n+    setupAuthPlugins(parent, pas, plone_pas,\n+                     deactivate_basic_reset=False,\n+                     deactivate_cookie_challenge=True)\n \n     # Activate *all* interfaces for user manager. IUserAdder is not\n     # activated for some reason by default.\n@@ -518,3 +517,42 @@ def setupPlonePAS(context):\n         addRolesToPlugIn(site)\n         setupGroups(site)\n         setLoginFormInCookieAuth(site)\n+\n+\n+def set_up_zope_root_cookie_auth(context):\n+    """\n+    Change the Zope root `/acl_users` to use a simple cookie login form.\n+    """\n+    # Only run step if a flag file is present, IOW not for every profile\n+    if context.readDataFile("plone-pas-zope-root-cookie.txt") is None:\n+        return\n+    portal = context.getSite()\n+    root = portal.getPhysicalRoot()\n+    root_acl_users = getToolByName(root, "acl_users")\n+\n+    # Enable the cookie plugin for all interfaces\n+    activatePluginInterfaces(root, "credentials_cookie_auth")\n+    # Ensure that the cookie login form is used to challenge for authentication\n+    credentials_cookie_auth = root_acl_users._getOb(  # pylint: disable=protected-access\n+        "credentials_cookie_auth",\n+    )\n+    root_acl_users.plugins.movePluginsTop(\n+        IChallengePlugin,\n+        [credentials_cookie_auth.id],\n+    )\n+    # Disable the HTTP `Basic ...` authentication plugin\n+    for plugin_iface in (\n+        IChallengePlugin,\n+        # Apparently, the `HTTPBasicAuthHelper` plugin"s `ICredentialsResetPlugin`\n+        # implementation interferes with deleting/expiring cookies, specifically the\n+        # `__ac` cookie in this case.  I first tried moving that plugin to the top and\n+        # bottom for that interface, but the cookies still remained after logout.  Only\n+        # deactivating it worked.\n+        ICredentialsResetPlugin,\n+    ):\n+        activated_plugin_ids = root_acl_users.plugins.listPluginIds(plugin_iface)\n+        if "credentials_basic_auth" in activated_plugin_ids:\n+            root_acl_users.plugins.deactivatePlugin(\n+                plugin_iface,\n+                "credentials_basic_auth",\n+            )\ndiff --git a/src/Products/PlonePAS/tests/test_setup.py b/src/Products/PlonePAS/tests/test_setup.py\nindex dc2ef98f..ae851272 100644\n--- a/src/Products/PlonePAS/tests/test_setup.py\n+++ b/src/Products/PlonePAS/tests/test_setup.py\n@@ -29,12 +29,13 @@ def setUp(self):\n         """\n         self.app = self.layer["app"]\n         self.root_acl_users = self.app.acl_users\n+        self.portal = self.layer["portal"]\n \n-    def test_zope_root_basic_challenge(self):\n+    def test_zope_root_default_challenge(self):\n         """\n-        The Zope root `/acl_users` basic challenge plugin works.\n+        The Zope root `/acl_users` default challenge plugin works.\n         """\n-        # Make the basic plugin the default auth challenge\n+        # Check the Zope root PAS plugin configuration\n         self.assertIn(\n             "credentials_basic_auth",\n             self.root_acl_users.objectIds(),\n@@ -46,11 +47,6 @@ def test_zope_root_basic_challenge(self):\n             HTTPBasicAuthHelper.HTTPBasicAuthHelper,\n             "Wrong Zope root `/acl_users` basic auth plugin type",\n         )\n-        self.root_acl_users.plugins.movePluginsTop(\n-            plugins_ifaces.IChallengePlugin,\n-            [basic_plugin.id],\n-        )\n-        transaction.commit()\n         challenge_plugins = self.root_acl_users.plugins.listPlugins(\n             plugins_ifaces.IChallengePlugin,\n         )\n@@ -68,14 +64,18 @@ def test_zope_root_basic_challenge(self):\n         self.assertEqual(\n             browser.headers["Status"].lower(),\n             "401 unauthorized",\n-            "Wrong Zope root `/acl_users` basic challenge response status",\n+            "Wrong Zope root `/acl_users` default challenge response status",\n         )\n \n-    def test_zope_root_default_login(self):\n+    def test_zope_root_cookie_login(self):\n         """\n-        The Zope root `/acl_users` default login works.\n+        The Zope root `/acl_users` cookie login works.\n         """\n-        # Check the Zope root PAS plugin configuration\n+        # Install the GenericSetup profile that performs the actual switch\n+        pa_testing.applyProfile(self.portal, \'Products.PlonePAS:root-cookie\')\n+        transaction.commit()\n+\n+        # Make the cookie plugin the default auth challenge\n         self.assertIn(\n             "credentials_cookie_auth",\n             self.root_acl_users.objectIds(),\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2022-02-25T01:24:34-08:00
Author: Ross Patterson (rpatterson) <me@rpatterson.net>
Commit: https://github.com/plone/Products.PlonePAS/commit/1e9cd05d9118e2387501e8925583731d56927d80

fix(setup): Existing broken Zope root cookie

[A previous PR fixed the broken Zope root cookie plugin for new
installs](https://github.com/plone/Products.PlonePAS/pull/65/commits/17deb979ea4a7c6047cee1cd2a2accdbf7046384)
but didn't include an upgrade step for existing Zope instances/ZODBs.  The issue is only
revealed when `IChallengePlugin` is activated for the broken plugins, such as when the
`Products.PlonePAS:root-cookie` profile is installed, and [a `Manager` tries to login
to](https://github.com/plone/Products.PlonePAS/pull/66#issuecomment-1041746695) the
[Zope root ZMI](http://localhost:8080/manage_main).

Add an upgrade step that fixes the issue for existing instances/ZODBs.

Files changed:
A src/Products/PlonePAS/upgrades.py
M src/Products/PlonePAS/profiles.zcml
M src/Products/PlonePAS/profiles/default/metadata.xml

b'diff --git a/src/Products/PlonePAS/profiles.zcml b/src/Products/PlonePAS/profiles.zcml\nindex 74286bdd..e6330eb0 100644\n--- a/src/Products/PlonePAS/profiles.zcml\n+++ b/src/Products/PlonePAS/profiles.zcml\n@@ -20,6 +20,12 @@\n     <depends name="memberdata-properties" />\n     <depends name="rolemap" />\n   </genericsetup:importStep>\n+  <genericsetup:upgradeStep\n+      title="Fix existing broken Zope root `/acl_users` plugins"\n+      profile="Products.PlonePAS:PlonePAS"\n+      source="4"\n+      destination="5"\n+      handler=".upgrades.from4to5_fix_zope_root" />\n \n   <genericsetup:registerProfile\n       name="root-cookie"\ndiff --git a/src/Products/PlonePAS/profiles/default/metadata.xml b/src/Products/PlonePAS/profiles/default/metadata.xml\nindex dab4dc0c..1062ac87 100644\n--- a/src/Products/PlonePAS/profiles/default/metadata.xml\n+++ b/src/Products/PlonePAS/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n <?xml version="1.0"?>\n <metadata>\n-  <version>4</version>\n+  <version>5</version>\n </metadata>\ndiff --git a/src/Products/PlonePAS/upgrades.py b/src/Products/PlonePAS/upgrades.py\nnew file mode 100644\nindex 00000000..d9353256\n--- /dev/null\n+++ b/src/Products/PlonePAS/upgrades.py\n@@ -0,0 +1,59 @@\n+"""\n+Upgrade steps specific to Plone\'s use of PAS.\n+"""\n+\n+from Products.PlonePAS.plugins import cookie_handler\n+from Products.PluggableAuthService.plugins import CookieAuthHelper\n+\n+import logging\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+def from4to5_fix_zope_root(context):\n+    """\n+    Fix broken Zope root `/acl_users/` plugins.\n+    """\n+    root = context.getPhysicalRoot()\n+    pas = root.acl_users.manage_addProduct[\'PluggableAuthService\']\n+    # Identify which interfaces should be considered PAS plugin interfaces\n+    plugin_ifaces = [\n+        plugin_type_info["interface"]\n+        for plugin_type_info in root.acl_users.plugins.listPluginTypeInfo()\n+    ]\n+    broken_meta_type = cookie_handler.ExtendedCookieAuthHelper.meta_type\n+    broken_plugins = root.acl_users.objectValues(broken_meta_type)\n+    for broken_plugin in broken_plugins:\n+        # Collect properties from old/broken plugin\n+        kwargs = dict(\n+            id=broken_plugin.id,\n+            title=broken_plugin.title,\n+            cookie_name=broken_plugin.cookie_name,\n+        )\n+        # Which PAS plugin interfaces has this plugin been activated for\n+        active_ifaces = [\n+            plugin_iface\n+            for plugin_iface in plugin_ifaces\n+            if plugin_iface.providedBy(broken_plugin)\n+            and broken_plugin.id in root.acl_users.plugins.listPluginIds(plugin_iface)\n+        ]\n+        # Delete the old/broken plugin\n+        logger.info(\n+            "Deleting broken %r plugin: %r",\n+            broken_meta_type,\n+            "/".join(broken_plugin.getPhysicalPath()),\n+        )\n+        root.acl_users.manage_delObjects([broken_plugin.id])\n+        # Add the correct plugin\n+        logger.info(\n+            "Adding working %r plugin: %r",\n+            CookieAuthHelper.CookieAuthHelper.meta_type,\n+            "/".join(broken_plugin.getPhysicalPath()),\n+        )\n+        pas.addCookieAuthHelper(**kwargs)\n+        # Restore activated plugin interfaces\n+        for plugin_iface in active_ifaces:\n+            root.acl_users.plugins.activatePlugin(\n+                plugin_iface,\n+                kwargs["id"],\n+            )\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2022-02-25T01:57:21-08:00
Author: Ross Patterson (rpatterson) <me@rpatterson.net>
Commit: https://github.com/plone/Products.PlonePAS/commit/22ba99f7ee9074d6cbbab0ec680eb4582ef4efce

fix(setup): Use new pre/post profile handlers

[Per
feedback](https://github.com/plone/Products.PlonePAS/pull/66#discussion_r808029387), use
the new (to me) `post_handler` feature provided by `GenericSetup` as it is much better
than littering the import step registry with one-off, profile-specific import steps.

Files changed:
M src/Products/PlonePAS/profiles.zcml
M src/Products/PlonePAS/setuphandlers.py

b'diff --git a/src/Products/PlonePAS/profiles.zcml b/src/Products/PlonePAS/profiles.zcml\nindex e6330eb0..a8993a9f 100644\n--- a/src/Products/PlonePAS/profiles.zcml\n+++ b/src/Products/PlonePAS/profiles.zcml\n@@ -33,14 +33,6 @@\n       description="Change the Zope root `/acl_users` to use a simple cookie login form\n \t\t   instead of HTTP `Basic ...` for authentication."\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n-      />\n-  <genericsetup:importStep\n-      name="zope-root-auth-cookie"\n-      title="Zope Root Cookie Login"\n-      description="Change the Zope root `/acl_users` to use a simple cookie login form\n-\t\t   instead of HTTP `Basic ...` for authentication."\n-      handler=".setuphandlers.set_up_zope_root_cookie_auth">\n-    <depends name="plonepas" />\n-  </genericsetup:importStep>\n+      post_handler=".setuphandlers.set_up_zope_root_cookie_auth" />\n \n </configure>\ndiff --git a/src/Products/PlonePAS/setuphandlers.py b/src/Products/PlonePAS/setuphandlers.py\nindex de6315af..94586119 100644\n--- a/src/Products/PlonePAS/setuphandlers.py\n+++ b/src/Products/PlonePAS/setuphandlers.py\n@@ -523,10 +523,7 @@ def set_up_zope_root_cookie_auth(context):\n     """\n     Change the Zope root `/acl_users` to use a simple cookie login form.\n     """\n-    # Only run step if a flag file is present, IOW not for every profile\n-    if context.readDataFile("plone-pas-zope-root-cookie.txt") is None:\n-        return\n-    portal = context.getSite()\n+    portal = aq_parent(context)\n     root = portal.getPhysicalRoot()\n     root_acl_users = getToolByName(root, "acl_users")\n \n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2022-03-08T12:53:01-08:00
Author: Ross Patterson (rpatterson) <me@rpatterson.net>
Commit: https://github.com/plone/Products.PlonePAS/commit/9810cdead931b46029be31fb9566ad9421627b87

style(lint): Backout Python 2 compat lint cleanup

[Per
feedback](https://github.com/plone/Products.PlonePAS/pull/66#discussion_r820449115),
back out the changes that are related to Python 2 compatibility since we no longer
support versions before Python 3.6.  I briefly evaluated actually removing the Python 2
compatibility for these lines, but I note that `six` is still in `install_requires` for
the package/dist dependency metadata so I think there's significant work to be done to
cleanup no longer needed compatibility code and I don't want to hold up this PR.

Files changed:
M src/Products/PlonePAS/plugins/ufactory.py
M src/Products/PlonePAS/sheet.py

b"diff --git a/src/Products/PlonePAS/plugins/ufactory.py b/src/Products/PlonePAS/plugins/ufactory.py\nindex 107b7e93..9be8b467 100644\n--- a/src/Products/PlonePAS/plugins/ufactory.py\n+++ b/src/Products/PlonePAS/plugins/ufactory.py\n@@ -19,7 +19,7 @@\n try:\n     from collections import OrderedDict\n except ImportError:\n-    from ordereddict import OrderedDict  # type: ignore\n+    from ordereddict import OrderedDict\n \n manage_addPloneUserFactoryForm = DTMLFile('../zmi/PloneUserFactoryForm',\n                                           globals())\ndiff --git a/src/Products/PlonePAS/sheet.py b/src/Products/PlonePAS/sheet.py\nindex bbd2f48c..281dca1b 100644\n--- a/src/Products/PlonePAS/sheet.py\n+++ b/src/Products/PlonePAS/sheet.py\n@@ -8,7 +8,6 @@\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.PlonePAS.interfaces.propertysheets import IMutablePropertySheet\n from Products.PluggableAuthService.UserPropertySheet import UserPropertySheet\n-from past.builtins import long\n from zope.component import getUtility\n from zope.interface import implementer\n \n"

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2022-03-09T00:03:21+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.PlonePAS/commit/bd1bcf06324f86d4b77975093758ac3aee13b8d3

Merge pull request #66 from plone/feat-zope-root-cookie-challenge

feat(setup): Zope root cookie login form profile

Files changed:
A mypy.ini
A news/zope-root-cookie.feature
A src/Products/PlonePAS/profiles/root-cookie/metadata.xml
A src/Products/PlonePAS/profiles/root-cookie/plone-pas-zope-root-cookie.txt
A src/Products/PlonePAS/upgrades.py
M pyproject.toml
M setup.cfg
M src/Products/PlonePAS/configure.zcml
M src/Products/PlonePAS/interfaces/memberdata.py
M src/Products/PlonePAS/interfaces/membership.py
M src/Products/PlonePAS/patch.py
M src/Products/PlonePAS/profiles.zcml
M src/Products/PlonePAS/profiles/default/metadata.xml
M src/Products/PlonePAS/setuphandlers.py
M src/Products/PlonePAS/sheet.py
M src/Products/PlonePAS/tests/test_setup.py
M src/Products/PlonePAS/tools/membership.py

b'diff --git a/mypy.ini b/mypy.ini\nnew file mode 100644\nindex 00000000..cf6d4202\n--- /dev/null\n+++ b/mypy.ini\n@@ -0,0 +1,45 @@\n+# Couldn\'t get `foo.*` module wildcards to work in `./pyproject.toml`\n+[mypy-ordereddict]\n+ignore_missing_imports = True\n+[mypy-transaction]\n+ignore_missing_imports = True\n+[mypy-zope.*]\n+ignore_missing_imports = True\n+[mypy-ZODB.*]\n+ignore_missing_imports = True\n+[mypy-BTrees.*]\n+ignore_missing_imports = True\n+[mypy-zExceptions.*]\n+ignore_missing_imports = True\n+[mypy-AccessControl.*]\n+ignore_missing_imports = True\n+[mypy-Acquisition.*]\n+ignore_missing_imports = True\n+[mypy-OFS.*]\n+ignore_missing_imports = TRUE\n+[mypy-ZPublisher.*]\n+ignore_missing_imports = True\n+[mypy-App.*]\n+ignore_missing_imports = True\n+[mypy-AuthEncoding.*]\n+ignore_missing_imports = True\n+[mypy-DateTime.*]\n+ignore_missing_imports = True\n+[mypy-Products.*]\n+ignore_missing_imports = True\n+[mypy-plone.*]\n+ignore_missing_imports = True\n+\n+# For some reason installing `types-*` didn\'t work\n+[mypy-six.*]\n+ignore_missing_imports = True\n+[mypy-past.*]\n+ignore_missing_imports = True\n+[mypy-PIL.*]\n+ignore_missing_imports = True\n+\n+# Zope interfaces break MyPy expectations and unfortunately I couldn\'t find a way to\n+# ignore only the specific error MyPy reports:\n+# `./src/Products/PlonePAS/interfaces/capabilities.py:57: error: Method must have at least one argument`\n+[mypy-*.interfaces.*]\n+ignore_errors = True\n\\ No newline at end of file\ndiff --git a/news/zope-root-cookie.feature b/news/zope-root-cookie.feature\nnew file mode 100644\nindex 00000000..b2d8f892\n--- /dev/null\n+++ b/news/zope-root-cookie.feature\n@@ -0,0 +1,4 @@\n+Add separate `GenericSetup` profile to switch the Zope root `/acl_users` to use a simple\n+cookie login form.  Useful when Zope root login and logout need to synchronize\n+authentication state between multiple plugins, which is not possible with HTTP `Basic\n+...` authentication. [rpatterson] (#65)\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615de..c4f4af63 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,8 @@\n+[tool.pylint.\'MESSAGES CONTROL\']\n+disable = [\n+    "wrong-import-order",\n+]\n+\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\ndiff --git a/setup.cfg b/setup.cfg\nindex 06aa277c..cdfdbc2c 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -4,3 +4,11 @@ create-wheel = yes\n # When Python 2-3 compatible:\n [bdist_wheel]\n universal = 1\n+\n+[flake8]\n+# Match Black\'s defaults\n+# https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html#flake8\n+max-line-length = 88\n+extend-ignore = E203\n+aggressive = 3\n+experimental = true\ndiff --git a/src/Products/PlonePAS/configure.zcml b/src/Products/PlonePAS/configure.zcml\nindex d7c003ae..a6a123e4 100644\n--- a/src/Products/PlonePAS/configure.zcml\n+++ b/src/Products/PlonePAS/configure.zcml\n@@ -2,7 +2,6 @@\n     i18n_domain="plone"\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:five="http://namespaces.zope.org/five"\n-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     xmlns:i18n="http://namespaces.zope.org/i18n">\n \n   <include package=".browser" />\n@@ -10,17 +9,6 @@\n   <include file="profiles.zcml" />\n   <include file="exportimport.zcml" />\n \n-  <genericsetup:importStep\n-      description="Configure PlonePas"\n-      handler="Products.PlonePAS.setuphandlers.setupPlonePAS"\n-      name="plonepas"\n-      title="PlonePAS setup">\n-    <depends name="componentregistry" />\n-    <depends name="controlpanel" />\n-    <depends name="memberdata-properties" />\n-    <depends name="rolemap" />\n-  </genericsetup:importStep>\n-\n   <five:deprecatedManageAddDelete class=".plugins.cookie_handler.ExtendedCookieAuthHelper" />\n   <five:deprecatedManageAddDelete class=".plugins.role.GroupAwareRoleManager" />\n \ndiff --git a/src/Products/PlonePAS/interfaces/memberdata.py b/src/Products/PlonePAS/interfaces/memberdata.py\nindex 024c73cc..2eca85fc 100644\n--- a/src/Products/PlonePAS/interfaces/memberdata.py\n+++ b/src/Products/PlonePAS/interfaces/memberdata.py\n@@ -7,4 +7,4 @@ class IMemberDataTool(interfaces.IMemberDataTool):\n     """\n \n \n-__all__ = (IMemberDataTool,)\n+__all__ = ("IMemberDataTool", )\ndiff --git a/src/Products/PlonePAS/interfaces/membership.py b/src/Products/PlonePAS/interfaces/membership.py\nindex 1f8a757a..e36e5265 100644\n--- a/src/Products/PlonePAS/interfaces/membership.py\n+++ b/src/Products/PlonePAS/interfaces/membership.py\n@@ -9,4 +9,4 @@ def getMemberInfo(memberId=None):\n         location, etc\n         """\n \n-__all__ = (IMembershipTool, )\n+__all__ = ("IMembershipTool", )\ndiff --git a/src/Products/PlonePAS/patch.py b/src/Products/PlonePAS/patch.py\nindex c5f24c37..3eaea2fe 100644\n--- a/src/Products/PlonePAS/patch.py\n+++ b/src/Products/PlonePAS/patch.py\n@@ -15,7 +15,7 @@ def call(self, __name__, *args, **kw):\n ADDED = \'__PlonePAS_is_added_method__\'\n ORIG_NAME = \'__PlonePAS_original_method_name__\'\n \n-_marker = dict()\n+_marker = dict()  # type: ignore\n \n \n def isWrapperMethod(meth):\ndiff --git a/src/Products/PlonePAS/profiles.zcml b/src/Products/PlonePAS/profiles.zcml\nindex 84103954..a8993a9f 100644\n--- a/src/Products/PlonePAS/profiles.zcml\n+++ b/src/Products/PlonePAS/profiles.zcml\n@@ -10,5 +10,29 @@\n       description="Extension profile for default PlonePAS setup."\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n       />\n+  <genericsetup:importStep\n+      description="Configure PlonePas"\n+      handler="Products.PlonePAS.setuphandlers.setupPlonePAS"\n+      name="plonepas"\n+      title="PlonePAS setup">\n+    <depends name="componentregistry" />\n+    <depends name="controlpanel" />\n+    <depends name="memberdata-properties" />\n+    <depends name="rolemap" />\n+  </genericsetup:importStep>\n+  <genericsetup:upgradeStep\n+      title="Fix existing broken Zope root `/acl_users` plugins"\n+      profile="Products.PlonePAS:PlonePAS"\n+      source="4"\n+      destination="5"\n+      handler=".upgrades.from4to5_fix_zope_root" />\n+\n+  <genericsetup:registerProfile\n+      name="root-cookie"\n+      title="Zope Root Cookie Login"\n+      description="Change the Zope root `/acl_users` to use a simple cookie login form\n+\t\t   instead of HTTP `Basic ...` for authentication."\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      post_handler=".setuphandlers.set_up_zope_root_cookie_auth" />\n \n </configure>\ndiff --git a/src/Products/PlonePAS/profiles/default/metadata.xml b/src/Products/PlonePAS/profiles/default/metadata.xml\nindex dab4dc0c..1062ac87 100644\n--- a/src/Products/PlonePAS/profiles/default/metadata.xml\n+++ b/src/Products/PlonePAS/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n <?xml version="1.0"?>\n <metadata>\n-  <version>4</version>\n+  <version>5</version>\n </metadata>\ndiff --git a/src/Products/PlonePAS/profiles/root-cookie/metadata.xml b/src/Products/PlonePAS/profiles/root-cookie/metadata.xml\nnew file mode 100644\nindex 00000000..cf4492ac\n--- /dev/null\n+++ b/src/Products/PlonePAS/profiles/root-cookie/metadata.xml\n@@ -0,0 +1,4 @@\n+<?xml version="1.0"?>\n+<metadata>\n+  <version>1</version>\n+</metadata>\ndiff --git a/src/Products/PlonePAS/profiles/root-cookie/plone-pas-zope-root-cookie.txt b/src/Products/PlonePAS/profiles/root-cookie/plone-pas-zope-root-cookie.txt\nnew file mode 100644\nindex 00000000..a0844b6c\n--- /dev/null\n+++ b/src/Products/PlonePAS/profiles/root-cookie/plone-pas-zope-root-cookie.txt\n@@ -0,0 +1,2 @@\n+Change the Zope root `/acl_users` to use a simple cookie login form instead of HTTP\n+`Basic ...` for authentication.\ndiff --git a/src/Products/PlonePAS/setuphandlers.py b/src/Products/PlonePAS/setuphandlers.py\nindex 084ca86b..94586119 100644\n--- a/src/Products/PlonePAS/setuphandlers.py\n+++ b/src/Products/PlonePAS/setuphandlers.py\n@@ -1,4 +1,8 @@\n # -*- coding: utf-8 -*-\n+"""\n+Custom GenericSetup import steps for PAS in Plone.\n+"""\n+\n from Acquisition import aq_base\n from Acquisition import aq_parent\n from Products.CMFCore.utils import getToolByName\n@@ -513,3 +517,39 @@ def setupPlonePAS(context):\n         addRolesToPlugIn(site)\n         setupGroups(site)\n         setLoginFormInCookieAuth(site)\n+\n+\n+def set_up_zope_root_cookie_auth(context):\n+    """\n+    Change the Zope root `/acl_users` to use a simple cookie login form.\n+    """\n+    portal = aq_parent(context)\n+    root = portal.getPhysicalRoot()\n+    root_acl_users = getToolByName(root, "acl_users")\n+\n+    # Enable the cookie plugin for all interfaces\n+    activatePluginInterfaces(root, "credentials_cookie_auth")\n+    # Ensure that the cookie login form is used to challenge for authentication\n+    credentials_cookie_auth = root_acl_users._getOb(  # pylint: disable=protected-access\n+        "credentials_cookie_auth",\n+    )\n+    root_acl_users.plugins.movePluginsTop(\n+        IChallengePlugin,\n+        [credentials_cookie_auth.id],\n+    )\n+    # Disable the HTTP `Basic ...` authentication plugin\n+    for plugin_iface in (\n+        IChallengePlugin,\n+        # Apparently, the `HTTPBasicAuthHelper` plugin"s `ICredentialsResetPlugin`\n+        # implementation interferes with deleting/expiring cookies, specifically the\n+        # `__ac` cookie in this case.  I first tried moving that plugin to the top and\n+        # bottom for that interface, but the cookies still remained after logout.  Only\n+        # deactivating it worked.\n+        ICredentialsResetPlugin,\n+    ):\n+        activated_plugin_ids = root_acl_users.plugins.listPluginIds(plugin_iface)\n+        if "credentials_basic_auth" in activated_plugin_ids:\n+            root_acl_users.plugins.deactivatePlugin(\n+                plugin_iface,\n+                "credentials_basic_auth",\n+            )\ndiff --git a/src/Products/PlonePAS/sheet.py b/src/Products/PlonePAS/sheet.py\nindex 7a83c7e2..281dca1b 100644\n--- a/src/Products/PlonePAS/sheet.py\n+++ b/src/Products/PlonePAS/sheet.py\n@@ -42,6 +42,7 @@ def validate(self, property_type, value):\n         inspector = self.tmap[property_type]\n         return inspector(value)\n \n+\n PropertySchema = PropertySchemaTypeMap()\n PropertySchema.addType(\n     \'string\',\ndiff --git a/src/Products/PlonePAS/tests/test_setup.py b/src/Products/PlonePAS/tests/test_setup.py\nindex 473f5106..ae851272 100644\n--- a/src/Products/PlonePAS/tests/test_setup.py\n+++ b/src/Products/PlonePAS/tests/test_setup.py\n@@ -1,4 +1,8 @@\n # -*- coding: utf-8 -*-\n+"""\n+Test set up specific to Plone through thea GenericSetup profile installation.\n+"""\n+\n from plone.app import testing as pa_testing\n from plone.testing import zope\n from zope.component import hooks\n@@ -13,6 +17,9 @@\n \n \n class PortalSetupTest(unittest.TestCase):\n+    """\n+    Test set up specific to Plone through thea GenericSetup profile installation.\n+    """\n \n     layer = testing.PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING\n \n@@ -22,6 +29,7 @@ def setUp(self):\n         """\n         self.app = self.layer["app"]\n         self.root_acl_users = self.app.acl_users\n+        self.portal = self.layer["portal"]\n \n     def test_zope_root_default_challenge(self):\n         """\n@@ -63,6 +71,10 @@ def test_zope_root_cookie_login(self):\n         """\n         The Zope root `/acl_users` cookie login works.\n         """\n+        # Install the GenericSetup profile that performs the actual switch\n+        pa_testing.applyProfile(self.portal, \'Products.PlonePAS:root-cookie\')\n+        transaction.commit()\n+\n         # Make the cookie plugin the default auth challenge\n         self.assertIn(\n             "credentials_cookie_auth",\n@@ -75,15 +87,6 @@ def test_zope_root_cookie_login(self):\n             CookieAuthHelper.CookieAuthHelper,\n             "Wrong Zope root `/acl_users` cookie auth plugin type",\n         )\n-        self.root_acl_users.plugins.activatePlugin(\n-            plugins_ifaces.IChallengePlugin,\n-            cookie_plugin.id,\n-        )\n-        self.root_acl_users.plugins.movePluginsTop(\n-            plugins_ifaces.IChallengePlugin,\n-            [cookie_plugin.id],\n-        )\n-        transaction.commit()\n         challenge_plugins = self.root_acl_users.plugins.listPlugins(\n             plugins_ifaces.IChallengePlugin,\n         )\n@@ -120,7 +123,9 @@ def test_zope_root_cookie_login(self):\n         # Submit the login form in the browser\n         login_form = browser.getForm()\n         login_form.getControl(name="__ac_name").value = pa_testing.SITE_OWNER_NAME\n-        login_form.getControl(name="__ac_password").value = pa_testing.TEST_USER_PASSWORD\n+        login_form.getControl(\n+            name="__ac_password"\n+        ).value = pa_testing.TEST_USER_PASSWORD\n         login_form.controls[-1].click()\n         self.assertEqual(\n             browser.headers["Status"].lower(),\ndiff --git a/src/Products/PlonePAS/tools/membership.py b/src/Products/PlonePAS/tools/membership.py\nindex 857a2e00..29c103a3 100644\n--- a/src/Products/PlonePAS/tools/membership.py\n+++ b/src/Products/PlonePAS/tools/membership.py\n@@ -45,7 +45,7 @@\n default_portrait = \'defaultUser.png\'\n logger = logging.getLogger(\'PlonePAS\')\n \n-_marker = dict()\n+_marker = dict()  # type: ignore\n \n \n def _unicodify_structure(value, charset=_marker):\ndiff --git a/src/Products/PlonePAS/upgrades.py b/src/Products/PlonePAS/upgrades.py\nnew file mode 100644\nindex 00000000..d9353256\n--- /dev/null\n+++ b/src/Products/PlonePAS/upgrades.py\n@@ -0,0 +1,59 @@\n+"""\n+Upgrade steps specific to Plone\'s use of PAS.\n+"""\n+\n+from Products.PlonePAS.plugins import cookie_handler\n+from Products.PluggableAuthService.plugins import CookieAuthHelper\n+\n+import logging\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+def from4to5_fix_zope_root(context):\n+    """\n+    Fix broken Zope root `/acl_users/` plugins.\n+    """\n+    root = context.getPhysicalRoot()\n+    pas = root.acl_users.manage_addProduct[\'PluggableAuthService\']\n+    # Identify which interfaces should be considered PAS plugin interfaces\n+    plugin_ifaces = [\n+        plugin_type_info["interface"]\n+        for plugin_type_info in root.acl_users.plugins.listPluginTypeInfo()\n+    ]\n+    broken_meta_type = cookie_handler.ExtendedCookieAuthHelper.meta_type\n+    broken_plugins = root.acl_users.objectValues(broken_meta_type)\n+    for broken_plugin in broken_plugins:\n+        # Collect properties from old/broken plugin\n+        kwargs = dict(\n+            id=broken_plugin.id,\n+            title=broken_plugin.title,\n+            cookie_name=broken_plugin.cookie_name,\n+        )\n+        # Which PAS plugin interfaces has this plugin been activated for\n+        active_ifaces = [\n+            plugin_iface\n+            for plugin_iface in plugin_ifaces\n+            if plugin_iface.providedBy(broken_plugin)\n+            and broken_plugin.id in root.acl_users.plugins.listPluginIds(plugin_iface)\n+        ]\n+        # Delete the old/broken plugin\n+        logger.info(\n+            "Deleting broken %r plugin: %r",\n+            broken_meta_type,\n+            "/".join(broken_plugin.getPhysicalPath()),\n+        )\n+        root.acl_users.manage_delObjects([broken_plugin.id])\n+        # Add the correct plugin\n+        logger.info(\n+            "Adding working %r plugin: %r",\n+            CookieAuthHelper.CookieAuthHelper.meta_type,\n+            "/".join(broken_plugin.getPhysicalPath()),\n+        )\n+        pas.addCookieAuthHelper(**kwargs)\n+        # Restore activated plugin interfaces\n+        for plugin_iface in active_ifaces:\n+            root.acl_users.plugins.activatePlugin(\n+                plugin_iface,\n+                kwargs["id"],\n+            )\n'

