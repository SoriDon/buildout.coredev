Repository: plone.resource


Branch: refs/heads/master
Date: 2023-04-25T00:25:43+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.resource/commit/7d2bf09c2e8c7043aead4079e2cf92d1eb6c0219

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/2a4ba395.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..99342b2\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "2a4ba395"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/2a4ba395.internal b/news/2a4ba395.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/2a4ba395.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..639f77a 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,65 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..0c73f0c\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,76 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies\n+skip_install = true\n+deps =\n+    build\n+    z3c.dependencychecker==2.11\n+commands =\n+    python -m build --sdist --no-isolation\n+    dependencychecker\n+\n+[testenv:dependencies-graph]\n+description = generate a graph out of the package\'s dependencies\n+deps =\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+use_develop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.resource {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+use_develop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.resource {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

Repository: plone.resource


Branch: refs/heads/master
Date: 2023-04-25T00:59:05+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.resource/commit/6657a1bc1aa51fd95d66c2cf84c3754b4d4876fd

feat: configure zpretty

Files changed:
M .pre-commit-config.yaml

b'diff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nindex fdafec1..a997365 100644\n--- a/.pre-commit-config.yaml\n+++ b/.pre-commit-config.yaml\n@@ -22,6 +22,7 @@ repos:\n     rev: 3.0.3\n     hooks:\n     -   id: zpretty\n+        exclude: test.html\n -   repo: https://github.com/PyCQA/flake8\n     rev: 6.0.0\n     hooks:\n'

Repository: plone.resource


Branch: refs/heads/master
Date: 2023-04-25T00:59:05+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.resource/commit/2896e09c719397d26aee8a364516a051bff3fcee

chore: pyupgrade

Files changed:
M plone/__init__.py
M plone/resource/__init__.py
M plone/resource/caching.py
M plone/resource/directory.py
M plone/resource/download.py
M plone/resource/file.py
M plone/resource/interfaces.py
M plone/resource/manifest.py
M plone/resource/testing.py
M plone/resource/tests/test_directory.py
M plone/resource/tests/test_file.py
M plone/resource/tests/test_integration.py
M plone/resource/tests/test_manifest.py
M plone/resource/tests/test_traversal.py
M plone/resource/tests/test_utils.py
M plone/resource/tests/test_zcml.py
M plone/resource/tests/test_zip_download.py
M plone/resource/traversal.py
M plone/resource/utils.py
M plone/resource/zcml.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/resource/__init__.py b/plone/resource/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/resource/__init__.py\n+++ b/plone/resource/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/resource/caching.py b/plone/resource/caching.py\nindex 2cf9182..355f765 100644\n--- a/plone/resource/caching.py\n+++ b/plone/resource/caching.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.caching.interfaces import IRulesetLookup\n from plone.resource.interfaces import IUniqueResourceRequest\n from zope.component import adapter\n@@ -8,7 +7,7 @@\n \n @implementer(IRulesetLookup)\n @adapter(Interface, IUniqueResourceRequest)\n-class UniqueResourceLookup(object):\n+class UniqueResourceLookup:\n     """Unique resource ruleset lookup.\n \n     Returns \'plone.stableResource\' for requests marked with\ndiff --git a/plone/resource/directory.py b/plone/resource/directory.py\nindex 61e4f12..61f9811 100644\n--- a/plone/resource/directory.py\n+++ b/plone/resource/directory.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_parent\n from OFS.Image import File\n@@ -28,7 +27,7 @@\n \n \n @implementer(IWritableResourceDirectory)\n-class PersistentResourceDirectory(object):\n+class PersistentResourceDirectory:\n     """A resource directory stored in the ZODB.\n \n     It is assumed that directories provide IObjectManager\n@@ -45,11 +44,11 @@ def __init__(self, context=None):\n         self.__name__ = context.getId()\n \n     def __repr__(self):\n-        return \'<%s object at %s>\' % (self.__class__.__name__,\n+        return \'<{} object at {}>\'.format(self.__class__.__name__,\n                                       \'/\'.join(self.context.getPhysicalPath()))\n \n     def publishTraverse(self, request, name):\n-        if six.PY2 and isinstance(name, six.text_type):\n+        if six.PY2 and isinstance(name, str):\n             name = name.encode(\'utf-8\')\n \n         context = self.context\n@@ -73,7 +72,7 @@ def __getitem__(self, name):\n         return self.publishTraverse(None, name)\n \n     def __setitem__(self, name, item):\n-        if six.PY2 and isinstance(name, six.text_type):\n+        if six.PY2 and isinstance(name, str):\n             name = name.encode(\'utf-8\')\n \n         if IResourceDirectory.providedBy(item):\n@@ -94,8 +93,8 @@ def readFile(self, path):\n         try:\n             f = self.context.unrestrictedTraverse(path)\n         except Exception as e:\n-            raise IOError(str(e))\n-        if isinstance(f.data, six.binary_type):\n+            raise OSError(str(e))\n+        if isinstance(f.data, bytes):\n             return f.data\n         return f.data.__bytes__()\n \n@@ -132,7 +131,7 @@ def exportZip(self, out):\n \n         def write(dir, prefix, zf):\n             for name in dir.listDirectory():\n-                relativeName = "%s/%s" % (prefix, name,)\n+                relativeName = f"{prefix}/{name}"\n                 if dir.isDirectory(name):\n                     write(dir[name], relativeName, zf)\n                 elif dir.isFile(name):\n@@ -154,7 +153,7 @@ def makeDirectory(self, path):\n             parent = parent[name]\n \n     def writeFile(self, path, data):\n-        if isinstance(data, six.text_type):\n+        if isinstance(data, str):\n             data = data.encode(\'utf8\')\n         basepath = \'/\'.join(path.split(\'/\')[:-1])\n         if basepath:\n@@ -196,7 +195,7 @@ def importZip(self, f):\n \n \n @implementer(IResourceDirectory)\n-class FilesystemResourceDirectory(object):\n+class FilesystemResourceDirectory:\n     """A resource directory based on files in the filesystem.\n     """\n \n@@ -220,7 +219,7 @@ def __parent__(self, value):\n         self._parent = value\n \n     def __repr__(self):\n-        return \'<%s object at %s>\' % (self.__class__.__name__, self.__name__)\n+        return f\'<{self.__class__.__name__} object at {self.__name__}>\'\n \n     def __bytes__(self):\n         if six.PY2:\ndiff --git a/plone/resource/download.py b/plone/resource/download.py\nindex 917b90b..f84dda1 100644\n--- a/plone/resource/download.py\n+++ b/plone/resource/download.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from io import BytesIO\n from zope.publisher.browser import BrowserView\n \ndiff --git a/plone/resource/file.py b/plone/resource/file.py\nindex bdc30be..ffec21f 100644\n--- a/plone/resource/file.py\n+++ b/plone/resource/file.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from datetime import time\n from dateutil.tz import tzlocal\n from email.utils import formatdate\n@@ -28,7 +27,7 @@ def __unicode__(self):\n         return self.read().decode(\'utf-8\')\n \n \n-class FilesystemFile(object):\n+class FilesystemFile:\n     """Representation of a file. When called, it will set response headers\n     and return the file\'s contents\n     """\n@@ -76,7 +75,7 @@ def __call__(self, REQUEST=None, RESPONSE=None):\n \n @implementer(ILastModified)\n @adapter(FilesystemFile)\n-class FileLastModified(object):\n+class FileLastModified:\n     """Determine when a file was last modified, for caching purposes\n     """\n \ndiff --git a/plone/resource/interfaces.py b/plone/resource/interfaces.py\nindex 22778a9..fd03d21 100644\n--- a/plone/resource/interfaces.py\n+++ b/plone/resource/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Attribute\n from zope.interface import Interface\n from zope.lifecycleevent.interfaces import IObjectCreatedEvent\ndiff --git a/plone/resource/manifest.py b/plone/resource/manifest.py\nindex 267194a..f1789fd 100644\n--- a/plone/resource/manifest.py\n+++ b/plone/resource/manifest.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Utilities for working with manifest files.\n \n The manifest is stored in a file ``manifest.cfg`` in the root of a resource\n@@ -51,7 +50,7 @@\n LOGGER = logging.getLogger(\'plone.resource.manifest\')\n \n \n-class ManifestFormat(object):\n+class ManifestFormat:\n     """Describes a manifest format.\n \n     An immutable, threadsafe object.\n@@ -88,13 +87,10 @@ def getManifest(fp, format, defaults=None):\n         defaults = format.defaults\n \n     parser = ConfigParser()\n-    if six.PY2:\n-        parser.readfp(fp)\n-    else:\n-        data = fp.read()\n-        if isinstance(data, six.binary_type):\n-            data = data.decode()\n-        parser.read_string(data)\n+    data = fp.read()\n+    if isinstance(data, bytes):\n+        data = data.decode()\n+    parser.read_string(data)\n \n     results = {}\n     for key in format.keys:\n@@ -104,7 +100,7 @@ def getManifest(fp, format, defaults=None):\n             results[key] = defaults.get(key, None)\n \n     for key in format.parameterSections:\n-        sectionName = "%s:%s" % (format.resourceType, key,)\n+        sectionName = f"{format.resourceType}:{key}"\n         if parser.has_section(sectionName):\n             results[key] = dict(parser.items(sectionName))\n         else:\n@@ -174,7 +170,7 @@ def extractManifestFromZipFile(zipfile, format, defaults=None,\n         if (\n             resourceName is not None and\n             not isDirectory and\n-            path == "%s/%s" % (resourceName, manifestFilename,)\n+            path == f"{resourceName}/{manifestFilename}"\n         ):\n             manifest = zipfile.open(member)\n             try:\n@@ -222,7 +218,7 @@ def getAllResources(format, defaults=None, filter=None,\n                 resources[name] = getManifest(manifest, format, defaults)\n             except:\n                 LOGGER.exception(\n-                    "Unable to read manifest for theme directory {0}".format(\n+                    "Unable to read manifest for theme directory {}".format(\n                         name\n                     )\n                 )\n@@ -273,7 +269,7 @@ def getZODBResources(format, defaults=None, filter=None,\n                 resources[name] = getManifest(manifest, format, defaults)\n             except:\n                 LOGGER.exception(\n-                    "Unable to read manifest for {0} directory {1}".format(\n+                    "Unable to read manifest for {} directory {}".format(\n                         manifest.resourceType, name\n                     )\n                 )\ndiff --git a/plone/resource/testing.py b/plone/resource/testing.py\nindex 0938270..51ec29d 100644\n--- a/plone/resource/testing.py\n+++ b/plone/resource/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import applyProfile\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PLONE_FIXTURE\ndiff --git a/plone/resource/tests/test_directory.py b/plone/resource/tests/test_directory.py\nindex b9c1943..e6b89b1 100644\n--- a/plone/resource/tests/test_directory.py\n+++ b/plone/resource/tests/test_directory.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from io import BytesIO\n from OFS.Image import File\n@@ -194,7 +193,7 @@ def test_setitem_file_unicode(self):\n         f = dir[\'demo\'][\'foo\'][\'test.html\']\n         dir[\'demo\'].makeDirectory(\'bar\')\n \n-        dir[\'demo\'][\'bar\'][u\'test.html\'] = f\n+        dir[\'demo\'][\'bar\'][\'test.html\'] = f\n         self.assertEqual(dir[\'demo\'][\'foo\'].readFile(\'test.html\'),\n                          dir[\'demo\'][\'bar\'].readFile(\'test.html\'),)\n \ndiff --git a/plone/resource/tests/test_file.py b/plone/resource/tests/test_file.py\nindex df48acb..c24c26e 100644\n--- a/plone/resource/tests/test_file.py\n+++ b/plone/resource/tests/test_file.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from dateutil.tz import tzlocal\n from email.utils import formatdate\n from plone.resource.file import FileLastModified\n@@ -63,8 +62,5 @@ def test_raw_read_file(self):\n         f = FilesystemFile(None, request, path, name)\n \n         with IRawReadFile(f) as rf:\n-            if six.PY2:\n-                self.assertTrue(isinstance(rf, file))\n-            else:\n-                self.assertTrue(isinstance(rf, io.IOBase))\n+            self.assertTrue(isinstance(rf, io.IOBase))\n             self.assertEqual(rf.read(), b\'asdf\')\ndiff --git a/plone/resource/tests/test_integration.py b/plone/resource/tests/test_integration.py\nindex 1d14068..0fdb1e0 100644\n--- a/plone/resource/tests/test_integration.py\n+++ b/plone/resource/tests/test_integration.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.resource.interfaces import IResourceDirectory\n from plone.resource.testing import PLONE_RESOURCE_INTEGRATION_TESTING\n \ndiff --git a/plone/resource/tests/test_manifest.py b/plone/resource/tests/test_manifest.py\nindex f03979d..64578c7 100644\n--- a/plone/resource/tests/test_manifest.py\n+++ b/plone/resource/tests/test_manifest.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.resource.directory import FilesystemResourceDirectory\n from plone.resource.directory import PersistentResourceDirectory\n from plone.resource.interfaces import IResourceDirectory\n@@ -112,10 +111,10 @@ def test_get_all_resources(self):\n         app = self.layer[\'app\']\n \n         foo = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'foo\'))\n-        provideUtility(foo, provides=IResourceDirectory, name=u\'++demo++foo\')\n+        provideUtility(foo, provides=IResourceDirectory, name=\'++demo++foo\')\n \n         manifestTest = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'manifest-test\'))\n-        provideUtility(manifestTest, provides=IResourceDirectory, name=u\'++demo++manifest-test\')\n+        provideUtility(manifestTest, provides=IResourceDirectory, name=\'++demo++manifest-test\')\n \n         root = BTreeFolder2(\'portal_resources\')\n         app._setOb(\'portal_resources\', root)\n@@ -123,7 +122,7 @@ def test_get_all_resources(self):\n         root[\'demo\']._setOb(\'bar\', BTreeFolder2(\'bar\'))\n \n         persistentDir = PersistentResourceDirectory(root)\n-        provideUtility(persistentDir, provides=IResourceDirectory, name=u\'persistent\')\n+        provideUtility(persistentDir, provides=IResourceDirectory, name=\'persistent\')\n \n         resources = getAllResources(TEST_FORMAT)\n \n@@ -140,10 +139,10 @@ def test_get_all_resources_filter(self):\n         app = self.layer[\'app\']\n \n         foo = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'foo\'))\n-        provideUtility(foo, provides=IResourceDirectory, name=u\'++demo++foo\')\n+        provideUtility(foo, provides=IResourceDirectory, name=\'++demo++foo\')\n \n         manifestTest = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'manifest-test\'))\n-        provideUtility(manifestTest, provides=IResourceDirectory, name=u\'++demo++manifest-test\')\n+        provideUtility(manifestTest, provides=IResourceDirectory, name=\'++demo++manifest-test\')\n \n         root = BTreeFolder2(\'portal_resources\')\n         app._setOb(\'portal_resources\', root)\n@@ -151,7 +150,7 @@ def test_get_all_resources_filter(self):\n         root[\'demo\']._setOb(\'bar\', BTreeFolder2(\'bar\'))\n \n         persistentDir = PersistentResourceDirectory(root)\n-        provideUtility(persistentDir, provides=IResourceDirectory, name=u\'persistent\')\n+        provideUtility(persistentDir, provides=IResourceDirectory, name=\'persistent\')\n \n         resources = getAllResources(TEST_FORMAT, filter=lambda dir: dir.__name__ != \'foo\')\n \n@@ -167,10 +166,10 @@ def test_get_zodb_resources(self):\n         app = self.layer[\'app\']\n \n         foo = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'foo\'))\n-        provideUtility(foo, provides=IResourceDirectory, name=u\'++demo++foo\')\n+        provideUtility(foo, provides=IResourceDirectory, name=\'++demo++foo\')\n \n         manifestTest = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'manifest-test\'))\n-        provideUtility(manifestTest, provides=IResourceDirectory, name=u\'++demo++manifest-test\')\n+        provideUtility(manifestTest, provides=IResourceDirectory, name=\'++demo++manifest-test\')\n \n         root = BTreeFolder2(\'portal_resources\')\n         app._setOb(\'portal_resources\', root)\n@@ -179,7 +178,7 @@ def test_get_zodb_resources(self):\n         root[\'demo\']._setOb(\'baz\', BTreeFolder2(\'baz\'))\n \n         persistentDir = PersistentResourceDirectory(root)\n-        provideUtility(persistentDir, provides=IResourceDirectory, name=u\'persistent\')\n+        provideUtility(persistentDir, provides=IResourceDirectory, name=\'persistent\')\n \n         resources = getZODBResources(TEST_FORMAT)\n \n@@ -193,10 +192,10 @@ def test_get_zodb_resources_filter(self):\n         app = self.layer[\'app\']\n \n         foo = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'foo\'))\n-        provideUtility(foo, provides=IResourceDirectory, name=u\'++demo++foo\')\n+        provideUtility(foo, provides=IResourceDirectory, name=\'++demo++foo\')\n \n         manifestTest = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'manifest-test\'))\n-        provideUtility(manifestTest, provides=IResourceDirectory, name=u\'++demo++manifest-test\')\n+        provideUtility(manifestTest, provides=IResourceDirectory, name=\'++demo++manifest-test\')\n \n         root = BTreeFolder2(\'portal_resources\')\n         app._setOb(\'portal_resources\', root)\n@@ -205,7 +204,7 @@ def test_get_zodb_resources_filter(self):\n         root[\'demo\']._setOb(\'baz\', BTreeFolder2(\'baz\'))\n \n         persistentDir = PersistentResourceDirectory(root)\n-        provideUtility(persistentDir, provides=IResourceDirectory, name=u\'persistent\')\n+        provideUtility(persistentDir, provides=IResourceDirectory, name=\'persistent\')\n \n         resources = getZODBResources(TEST_FORMAT, filter=lambda dir: dir.__name__ != \'baz\')\n \ndiff --git a/plone/resource/tests/test_traversal.py b/plone/resource/tests/test_traversal.py\nindex 50bb3d8..3233c47 100644\n--- a/plone/resource/tests/test_traversal.py\n+++ b/plone/resource/tests/test_traversal.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.resource.directory import FilesystemResourceDirectory\n from plone.resource.directory import PersistentResourceDirectory\n from plone.resource.file import FilesystemFile\n@@ -32,7 +31,7 @@ def tearDown(self):\n \n     def test_traverse_packaged_type_specific_directory(self):\n         dire = FilesystemResourceDirectory(test_dir_path)\n-        provideUtility(dire, provides=IResourceDirectory, name=u\'++demo++foo\')\n+        provideUtility(dire, provides=IResourceDirectory, name=\'++demo++foo\')\n \n         res = self.app.restrictedTraverse(\'++demo++foo\')\n         self.assertTrue(res.directory.endswith(\'resources\'))\n@@ -47,14 +46,14 @@ def test_traverse_packaged_type_specific_file(self):\n         dire = FilesystemResourceDirectory(\n             os.path.join(test_dir_path, \'demo\', \'foo\')\n         )\n-        provideUtility(dire, provides=IResourceDirectory, name=u\'++demo++foo\')\n+        provideUtility(dire, provides=IResourceDirectory, name=\'++demo++foo\')\n \n         res = self.app.restrictedTraverse(\'++demo++foo/test.html\')\n         self.assertTrue(isinstance(res, FilesystemFile))\n \n     def test_traverse_global_directory(self):\n         dire = FilesystemResourceDirectory(test_dir_path)\n-        provideUtility(dire, provides=IResourceDirectory, name=u\'\')\n+        provideUtility(dire, provides=IResourceDirectory, name=\'\')\n \n         res = self.app.restrictedTraverse(\'++demo++foo\')\n         self.assertTrue(res.directory.endswith(\'resources/demo/foo\'))\n@@ -68,7 +67,7 @@ def test_traverse_persistent_directory(self):\n         root.demo._setOb(\'foo\', BTreeFolder2(\'foo\'))\n \n         dire = PersistentResourceDirectory(root)\n-        provideUtility(dire, provides=IResourceDirectory, name=u\'persistent\')\n+        provideUtility(dire, provides=IResourceDirectory, name=\'persistent\')\n \n         res = self.app.restrictedTraverse(\'++demo++foo\')\n         self.assertEqual(\n@@ -81,7 +80,7 @@ def test_traverse_persistent_directory(self):\n \n     def test_publish_resource(self):\n         dire = FilesystemResourceDirectory(test_dir_path)\n-        provideUtility(dire, provides=IResourceDirectory, name=u\'\')\n+        provideUtility(dire, provides=IResourceDirectory, name=\'\')\n \n         browser = zope.Browser(self.app)\n         browser.handleErrors = False\n@@ -91,7 +90,7 @@ def test_publish_resource(self):\n \n     def test_traverse_unique_resource_marks_request(self):\n         dire = FilesystemResourceDirectory(test_dir_path)\n-        provideUtility(dire, provides=IResourceDirectory, name=u\'\')\n+        provideUtility(dire, provides=IResourceDirectory, name=\'\')\n \n         self.app.restrictedTraverse(\n             \'++demo++foo/++unique++bar/test.html\'\n@@ -100,7 +99,7 @@ def test_traverse_unique_resource_marks_request(self):\n \n     def test_publish_unique_resource(self):\n         dire = FilesystemResourceDirectory(test_dir_path)\n-        provideUtility(dire, provides=IResourceDirectory, name=u\'\')\n+        provideUtility(dire, provides=IResourceDirectory, name=\'\')\n \n         browser = zope.Browser(self.app)\n         browser.handleErrors = False\ndiff --git a/plone/resource/tests/test_utils.py b/plone/resource/tests/test_utils.py\nindex 9b8f000..e8404be 100644\n--- a/plone/resource/tests/test_utils.py\n+++ b/plone/resource/tests/test_utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.resource.directory import FilesystemResourceDirectory\n from plone.resource.directory import PersistentResourceDirectory\n from plone.resource.interfaces import IResourceDirectory\n@@ -25,20 +24,20 @@ def setUp(self):\n         # set up all three types of directory\n         package_dir_path = os.path.join(test_dir_path, \'demo\', \'foo\')\n         self.package_dir = dir = FilesystemResourceDirectory(package_dir_path)\n-        provideUtility(dir, provides=IResourceDirectory, name=u\'++demo++foo\')\n+        provideUtility(dir, provides=IResourceDirectory, name=\'++demo++foo\')\n \n         self.global_dir = dir = FilesystemResourceDirectory(test_dir_path)\n-        provideUtility(dir, provides=IResourceDirectory, name=u\'\')\n+        provideUtility(dir, provides=IResourceDirectory, name=\'\')\n \n         root = BTreeFolder2(\'portal_resources\')\n         self.app._setOb(\'portal_resources\', root)\n         root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n         root.demo._setOb(\'foo\', BTreeFolder2(\'foo\'))\n         self.zodb_dir = dir = PersistentResourceDirectory(root)\n-        provideUtility(dir, provides=IResourceDirectory, name=u\'persistent\')\n+        provideUtility(dir, provides=IResourceDirectory, name=\'persistent\')\n \n         # We don\'t want a false positive for the following.\n-        provideUtility(dir, provides=IResourceDirectory, name=u\'++bogus++foo\')\n+        provideUtility(dir, provides=IResourceDirectory, name=\'++bogus++foo\')\n \n     def tearDown(self):\n         zca.popGlobalRegistry()\ndiff --git a/plone/resource/tests/test_zcml.py b/plone/resource/tests/test_zcml.py\nindex 6d5043e..32ebafc 100644\n--- a/plone/resource/tests/test_zcml.py\n+++ b/plone/resource/tests/test_zcml.py\n@@ -1,9 +1,8 @@\n-# -*- coding: utf-8 -*-\n import os.path\n import unittest\n \n from plone.resource.interfaces import IResourceDirectory\n-from six import StringIO\n+from io import StringIO\n from zope.component import getUtility\n from zope.component.testing import tearDown\n from zope.configuration.exceptions import ConfigurationError\ndiff --git a/plone/resource/tests/test_zip_download.py b/plone/resource/tests/test_zip_download.py\nindex b6fd122..9364823 100644\n--- a/plone/resource/tests/test_zip_download.py\n+++ b/plone/resource/tests/test_zip_download.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from io import BytesIO\n from OFS.Image import File\n from plone.resource.directory import FilesystemResourceDirectory\n@@ -30,7 +29,7 @@ def tearDown(self):\n \n     def test_traverse_packaged_type_specific_directory(self):\n         dir = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'foo\'))\n-        provideUtility(dir, provides=IResourceDirectory, name=u\'++demo++foo\')\n+        provideUtility(dir, provides=IResourceDirectory, name=\'++demo++foo\')\n \n         out = BytesIO()\n         request = self.layer[\'request\']\n@@ -47,7 +46,7 @@ def test_traverse_packaged_type_specific_directory(self):\n \n     def test_traverse_global_directory(self):\n         dir = FilesystemResourceDirectory(test_dir_path)\n-        provideUtility(dir, provides=IResourceDirectory, name=u\'\')\n+        provideUtility(dir, provides=IResourceDirectory, name=\'\')\n \n         out = BytesIO()\n         request = self.layer[\'request\']\n@@ -73,7 +72,7 @@ def test_traverse_persistent_directory(self):\n         )\n \n         dir = PersistentResourceDirectory(root)\n-        provideUtility(dir, provides=IResourceDirectory, name=u\'persistent\')\n+        provideUtility(dir, provides=IResourceDirectory, name=\'persistent\')\n \n         out = BytesIO()\n         request = self.layer[\'request\']\ndiff --git a/plone/resource/traversal.py b/plone/resource/traversal.py\nindex ae99554..fac2731 100644\n--- a/plone/resource/traversal.py\n+++ b/plone/resource/traversal.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.resource.interfaces import IUniqueResourceRequest\n from plone.resource.utils import queryResourceDirectory\n from six.moves import urllib\ndiff --git a/plone/resource/utils.py b/plone/resource/utils.py\nindex 510ca40..6475b8e 100644\n--- a/plone/resource/utils.py\n+++ b/plone/resource/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.resource.interfaces import IResourceDirectory\n from zExceptions import NotFound\n from zope.component import getUtilitiesFor\n@@ -23,7 +22,7 @@ def iterDirectoriesOfType(type, filter_duplicates=True):\n \n     # 1. Persistent resource directory:\n     #    List (persistent resource directory)/$type\n-    res = queryUtility(IResourceDirectory, name=u\'persistent\')\n+    res = queryUtility(IResourceDirectory, name=\'persistent\')\n     if res and res.isDirectory(type):\n         typedir = res[type]\n         for dirname in typedir.listDirectory():\n@@ -34,7 +33,7 @@ def iterDirectoriesOfType(type, filter_duplicates=True):\n \n     # 2. Global resource directory:\n     #    List (global resource directory)/$type\n-    res = queryUtility(IResourceDirectory, name=u\'\')\n+    res = queryUtility(IResourceDirectory, name=\'\')\n     if res and res.isDirectory(type):\n         typedir = res[type]\n         for dirname in typedir.listDirectory():\n@@ -60,7 +59,7 @@ def queryResourceDirectory(type, name):\n \n     # 1. Persistent resource directory:\n     #    Try (persistent resource directory)/$type/$name\n-    res = queryUtility(IResourceDirectory, name=u\'persistent\')\n+    res = queryUtility(IResourceDirectory, name=\'persistent\')\n     if res:\n         try:\n             return res[type][name]\n@@ -69,7 +68,7 @@ def queryResourceDirectory(type, name):\n \n     # 2. Global resource directory:\n     #    Try (global resource directory)/$type/$name\n-    res = queryUtility(IResourceDirectory, name=u\'\')\n+    res = queryUtility(IResourceDirectory, name=\'\')\n     if res:\n         try:\n             return res[type][name]\n@@ -78,7 +77,7 @@ def queryResourceDirectory(type, name):\n \n     # 3. Packaged type-specific resource directory:\n     #    Try (directory named after type + name)\n-    identifier = u\'++%s++%s\' % (type, name)\n+    identifier = f\'++{type}++{name}\'\n     res = queryUtility(IResourceDirectory, name=identifier)\n     if res is not None:\n         return res\ndiff --git a/plone/resource/zcml.py b/plone/resource/zcml.py\nindex d2f802c..c7e6266 100644\n--- a/plone/resource/zcml.py\n+++ b/plone/resource/zcml.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.resource.directory import FilesystemResourceDirectory\n from plone.resource.interfaces import IResourceDirectory\n from zope.component.zcml import handler\n@@ -14,20 +13,20 @@ class IResourceDirectoryDirective(Interface):\n     """\n \n     directory = TextLine(\n-        title=u\'Directory path\',\n-        description=u\'Path relative to the package.\',\n+        title=\'Directory path\',\n+        description=\'Path relative to the package.\',\n         required=True\n         )\n \n     name = TextLine(\n-        title=u\'Name\',\n-        description=u\'Name of the directory. If not specified, the name of \'\n-                    u\'the current package is used.\',\n+        title=\'Name\',\n+        description=\'Name of the directory. If not specified, the name of \'\n+                    \'the current package is used.\',\n         required=False,\n         )\n \n     type = ASCIILine(\n-        title=u\'Resource type\',\n+        title=\'Resource type\',\n         # XXX use a Choice field + vocab\n         # vocabulary = \'plone.resource.vocab.ResourceTypes\',\n         required=False,\n@@ -56,13 +55,13 @@ def registerResourceDirectory(_context, directory, name=None, type=None):\n         raise ConfigurationError(\'Traversing to parent directories \'\n                                  \'via .. is not allowed.\')\n     if not os.path.exists(directory):\n-        raise IOError(\'Directory not found: %s\' % directory)\n+        raise OSError(\'Directory not found: %s\' % directory)\n \n     if name is None and _context.package:\n         name = _context.package.__name__\n \n     if type:\n-        identifier = \'++%s++%s\' % (type, name or \'\')\n+        identifier = \'++{}++{}\'.format(type, name or \'\')\n     else:\n         if _context.package:\n             raise ConfigurationError(\'Resource directories in distributions \'\ndiff --git a/setup.py b/setup.py\nindex a9ad7b9..76d8227 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n'

Repository: plone.resource


Branch: refs/heads/master
Date: 2023-04-25T00:59:05+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.resource/commit/a7e89f625284b184bf67232f75268fd241db2465

chore: isort

Files changed:
M plone/resource/events.py
M plone/resource/manifest.py
M plone/resource/tests/test_traversal.py
M plone/resource/tests/test_zcml.py
M plone/resource/zcml.py

b"diff --git a/plone/resource/events.py b/plone/resource/events.py\nindex b8decb5..19bd77e 100644\n--- a/plone/resource/events.py\n+++ b/plone/resource/events.py\n@@ -1,7 +1,7 @@\n from plone.resource.interfaces import IPloneResourceCreatedEvent\n from plone.resource.interfaces import IPloneResourceModifiedEvent\n-from zope.interface.interfaces import ObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import ObjectEvent\n \n \n @implementer(IPloneResourceCreatedEvent)\ndiff --git a/plone/resource/manifest.py b/plone/resource/manifest.py\nindex f1789fd..fdd35a9 100644\n--- a/plone/resource/manifest.py\n+++ b/plone/resource/manifest.py\n@@ -35,6 +35,7 @@\n import logging\n import six\n \n+\n try:\n     # On Python 2 we must have the SafeConfigParser\n     from ConfigParser import SafeConfigParser as ConfigParser\ndiff --git a/plone/resource/tests/test_traversal.py b/plone/resource/tests/test_traversal.py\nindex 3233c47..f8451d6 100644\n--- a/plone/resource/tests/test_traversal.py\n+++ b/plone/resource/tests/test_traversal.py\n@@ -4,8 +4,8 @@\n from plone.resource.interfaces import IResourceDirectory\n from plone.resource.interfaces import IUniqueResourceRequest\n from plone.resource.testing import DEMO_TRAVERSER_FUNCTIONAL_TESTING\n-from plone.testing import zope\n from plone.testing import zca\n+from plone.testing import zope\n from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2\n from zExceptions import Forbidden\n from zExceptions import NotFound\ndiff --git a/plone/resource/tests/test_zcml.py b/plone/resource/tests/test_zcml.py\nindex 32ebafc..0d88588 100644\n--- a/plone/resource/tests/test_zcml.py\n+++ b/plone/resource/tests/test_zcml.py\n@@ -1,20 +1,22 @@\n-import os.path\n-import unittest\n-\n-from plone.resource.interfaces import IResourceDirectory\n from io import StringIO\n+from plone.resource.interfaces import IResourceDirectory\n from zope.component import getUtility\n from zope.component.testing import tearDown\n from zope.configuration.exceptions import ConfigurationError\n-from zope.configuration.xmlconfig import XMLConfig, xmlconfig\n+from zope.configuration.xmlconfig import XMLConfig\n+from zope.configuration.xmlconfig import xmlconfig\n+\n+import os.path\n+import unittest\n \n \n def clearZCML(test=None):\n     # Copy from ``zope.component.tests.examples``\n-    from zope.configuration.xmlconfig import XMLConfig\n-    import zope.component\n     from zope.component.testing import setUp\n     from zope.component.testing import tearDown\n+    from zope.configuration.xmlconfig import XMLConfig\n+\n+    import zope.component\n     tearDown()\n     setUp()\n     XMLConfig('meta.zcml', zope.component)()\ndiff --git a/plone/resource/zcml.py b/plone/resource/zcml.py\nindex c7e6266..11b27bd 100644\n--- a/plone/resource/zcml.py\n+++ b/plone/resource/zcml.py\n@@ -3,7 +3,8 @@\n from zope.component.zcml import handler\n from zope.configuration.exceptions import ConfigurationError\n from zope.interface import Interface\n-from zope.schema import ASCIILine, TextLine\n+from zope.schema import ASCIILine\n+from zope.schema import TextLine\n \n import os.path\n \n"

Repository: plone.resource


Branch: refs/heads/master
Date: 2023-04-25T00:59:05+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.resource/commit/8a44cede1c5376206905f88dd4787982a15dd691

chore: black

Files changed:
M plone/__init__.py
M plone/resource/caching.py
M plone/resource/directory.py
M plone/resource/download.py
M plone/resource/file.py
M plone/resource/interfaces.py
M plone/resource/manifest.py
M plone/resource/testing.py
M plone/resource/tests/test_directory.py
M plone/resource/tests/test_file.py
M plone/resource/tests/test_integration.py
M plone/resource/tests/test_manifest.py
M plone/resource/tests/test_traversal.py
M plone/resource/tests/test_utils.py
M plone/resource/tests/test_zcml.py
M plone/resource/tests/test_zip_download.py
M plone/resource/traversal.py
M plone/resource/utils.py
M plone/resource/zcml.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/resource/caching.py b/plone/resource/caching.py\nindex 355f765..cc040cd 100644\n--- a/plone/resource/caching.py\n+++ b/plone/resource/caching.py\n@@ -18,4 +18,4 @@ def __init__(self, published, request):\n         pass\n \n     def __call__(self):\n-        return \'plone.stableResource\'\n+        return "plone.stableResource"\ndiff --git a/plone/resource/directory.py b/plone/resource/directory.py\nindex 61f9811..24e69b3 100644\n--- a/plone/resource/directory.py\n+++ b/plone/resource/directory.py\n@@ -22,7 +22,7 @@\n \n \n # filter dot files, Mac resource forks\n-FILTERS = (r\'\\..*\', \'__MACOSX\')\n+FILTERS = (r"\\..*", "__MACOSX")\n FILTERS = [re.compile(pattern) for pattern in FILTERS]\n \n \n@@ -39,17 +39,18 @@ def __init__(self, context=None):\n             # This is also used as a local IResourceDirectory utility,\n             # named u\'persistent\', which wraps the root folder.\n             # This gets pickled, so we can\'t keep the acquisition chain.\n-            context = aq_base(getToolByName(getSite(), \'portal_resources\'))\n+            context = aq_base(getToolByName(getSite(), "portal_resources"))\n         self.context = self.__parent__ = context\n         self.__name__ = context.getId()\n \n     def __repr__(self):\n-        return \'<{} object at {}>\'.format(self.__class__.__name__,\n-                                      \'/\'.join(self.context.getPhysicalPath()))\n+        return "<{} object at {}>".format(\n+            self.__class__.__name__, "/".join(self.context.getPhysicalPath())\n+        )\n \n     def publishTraverse(self, request, name):\n         if six.PY2 and isinstance(name, str):\n-            name = name.encode(\'utf-8\')\n+            name = name.encode("utf-8")\n \n         context = self.context\n         if aq_parent(context) is None:\n@@ -60,9 +61,7 @@ def publishTraverse(self, request, name):\n                 context = context.__of__(site)\n \n         if self.isDirectory(name):\n-            return self.__class__(\n-                context.unrestrictedTraverse(name).__of__(context)\n-            )\n+            return self.__class__(context.unrestrictedTraverse(name).__of__(context))\n         elif self.isFile(name):\n             return context.unrestrictedTraverse(name).__of__(context)\n \n@@ -73,7 +72,7 @@ def __getitem__(self, name):\n \n     def __setitem__(self, name, item):\n         if six.PY2 and isinstance(name, str):\n-            name = name.encode(\'utf-8\')\n+            name = name.encode("utf-8")\n \n         if IResourceDirectory.providedBy(item):\n             item = item.context\n@@ -99,8 +98,11 @@ def readFile(self, path):\n         return f.data.__bytes__()\n \n     def listDirectory(self):\n-        return [n for n in self.context.objectIds()\n-                if not any(filter.match(n) for filter in FILTERS)]\n+        return [\n+            n\n+            for n in self.context.objectIds()\n+            if not any(filter.match(n) for filter in FILTERS)\n+        ]\n \n     def isDirectory(self, path):\n         try:\n@@ -127,7 +129,7 @@ def rename(self, oldName, newName):\n     def exportZip(self, out):\n         prefix = self.__name__\n \n-        zf = zipfile.ZipFile(out, \'w\')\n+        zf = zipfile.ZipFile(out, "w")\n \n         def write(dir, prefix, zf):\n             for name in dir.listDirectory():\n@@ -142,10 +144,10 @@ def write(dir, prefix, zf):\n \n     def makeDirectory(self, path):\n         if six.PY2:\n-            path = path.encode(\'utf-8\')\n+            path = path.encode("utf-8")\n \n         parent = self.context\n-        names = path.strip(\'/\').split(\'/\')\n+        names = path.strip("/").split("/")\n         for name in names:\n             if name not in parent:\n                 f = BTreeFolder2(name)\n@@ -154,16 +156,16 @@ def makeDirectory(self, path):\n \n     def writeFile(self, path, data):\n         if isinstance(data, str):\n-            data = data.encode(\'utf8\')\n-        basepath = \'/\'.join(path.split(\'/\')[:-1])\n+            data = data.encode("utf8")\n+        basepath = "/".join(path.split("/")[:-1])\n         if basepath:\n             self.makeDirectory(basepath)\n-        filename = path.split(\'/\')[-1]\n+        filename = path.split("/")[-1]\n         f = File(filename, filename, data)\n         ct = f.getContentType()\n-        if ct.startswith(\'text/\') or ct == \'application/javascript\':\n+        if ct.startswith("text/") or ct == "application/javascript":\n             # otherwise HTTPResponse.setBody assumes latin1 and mangles things\n-            f.content_type = ct + \'; charset=utf-8\'\n+            f.content_type = ct + "; charset=utf-8"\n         container = self.context.unrestrictedTraverse(basepath)\n         if filename in container:\n             container._delOb(filename)\n@@ -179,15 +181,13 @@ def importZip(self, f):\n             f = zipfile.ZipFile(f)\n         for name in f.namelist():\n             member = f.getinfo(name)\n-            path = member.filename.lstrip(\'/\')\n+            path = member.filename.lstrip("/")\n \n             # test each part of the path against the filters\n-            if any(any(filter.match(n) for filter in FILTERS)\n-                   for n in path.split(\'/\')\n-                   ):\n+            if any(any(filter.match(n) for filter in FILTERS) for n in path.split("/")):\n                 continue\n \n-            if path.endswith(\'/\'):\n+            if path.endswith("/"):\n                 self.makeDirectory(path)\n             else:\n                 data = f.open(member).read()\n@@ -196,8 +196,7 @@ def importZip(self, f):\n \n @implementer(IResourceDirectory)\n class FilesystemResourceDirectory:\n-    """A resource directory based on files in the filesystem.\n-    """\n+    """A resource directory based on files in the filesystem."""\n \n     __allow_access_to_unprotected_subobjects__ = True\n \n@@ -219,7 +218,7 @@ def __parent__(self, value):\n         self._parent = value\n \n     def __repr__(self):\n-        return f\'<{self.__class__.__name__} object at {self.__name__}>\'\n+        return f"<{self.__class__.__name__} object at {self.__name__}>"\n \n     def __bytes__(self):\n         if six.PY2:\n@@ -227,10 +226,10 @@ def __bytes__(self):\n         return repr(self).encode()\n \n     def _resolveSubpath(self, path):\n-        parts = path.split(\'/\')\n+        parts = path.split("/")\n         filepath = os.path.abspath(os.path.join(self.directory, *parts))\n         if not filepath.startswith(self.directory):\n-            raise Forbidden(\'Invalid path resource\')\n+            raise Forbidden("Invalid path resource")\n         return filepath\n \n     def publishTraverse(self, request, name):\n@@ -252,7 +251,7 @@ def __getitem__(self, name):\n \n     def openFile(self, path):\n         filepath = self._resolveSubpath(path)\n-        return open(filepath, \'rb\')\n+        return open(filepath, "rb")\n \n     def readFile(self, path):\n         with self.openFile(path) as f:\n@@ -260,8 +259,7 @@ def readFile(self, path):\n \n     def listDirectory(self):\n         names = os.listdir(self.directory)\n-        return [n for n in names\n-                if not any(filter.match(n) for filter in FILTERS)]\n+        return [n for n in names if not any(filter.match(n) for filter in FILTERS)]\n \n     def isDirectory(self, path):\n         return os.path.isdir(self._resolveSubpath(path))\n@@ -270,21 +268,27 @@ def isFile(self, path):\n         return os.path.isfile(self._resolveSubpath(path))\n \n     def exportZip(self, out):\n-        with zipfile.ZipFile(out, \'w\') as zf:\n-            toStrip = len(self.directory.replace(os.path.sep, \'/\')) + 1\n+        with zipfile.ZipFile(out, "w") as zf:\n+            toStrip = len(self.directory.replace(os.path.sep, "/")) + 1\n \n-            for (dirpath, dirnames, filenames) in os.walk(self.directory):\n-                subpath = dirpath.replace(os.path.sep, \'/\')[toStrip:].strip(\'/\')\n+            for dirpath, dirnames, filenames in os.walk(self.directory):\n+                subpath = dirpath.replace(os.path.sep, "/")[toStrip:].strip("/")\n \n                 for filename in filenames:\n-                    path = \'/\'.join([subpath, filename]).strip(\'/\')\n+                    path = "/".join([subpath, filename]).strip("/")\n \n-                    if any(any(filter.match(n) for filter in FILTERS)\n-                           for n in path.split(\'/\')\n-                           ):\n+                    if any(\n+                        any(filter.match(n) for filter in FILTERS)\n+                        for n in path.split("/")\n+                    ):\n                         continue\n \n                     zf.writestr(\n-                        \'/\'.join([self.__name__, path, ]),\n+                        "/".join(\n+                            [\n+                                self.__name__,\n+                                path,\n+                            ]\n+                        ),\n                         self.readFile(path),\n                     )\ndiff --git a/plone/resource/download.py b/plone/resource/download.py\nindex f84dda1..32250ba 100644\n--- a/plone/resource/download.py\n+++ b/plone/resource/download.py\n@@ -3,7 +3,6 @@\n \n \n class DownloadView(BrowserView):\n-\n     def __call__(self):\n         name = self.context.__name__\n \n@@ -16,10 +15,9 @@ def __call__(self):\n         out = BytesIO()\n         self.context.exportZip(out)\n \n-        response.setHeader(\'Content-Type\', \'application/zip\')\n+        response.setHeader("Content-Type", "application/zip")\n         response.setHeader(\n-            \'Content-Disposition\',\n-            \'attachment; filename="%s.zip"\' % name\n+            "Content-Disposition", \'attachment; filename="%s.zip"\' % name\n         )\n-        response.setHeader(\'Content-Length\', len(out.getvalue()))\n+        response.setHeader("Content-Length", len(out.getvalue()))\n         response.write(out.getvalue())\ndiff --git a/plone/resource/file.py b/plone/resource/file.py\nindex ffec21f..8650573 100644\n--- a/plone/resource/file.py\n+++ b/plone/resource/file.py\n@@ -24,7 +24,7 @@ def __str__(self):\n         return self.read()\n \n     def __unicode__(self):\n-        return self.read().decode(\'utf-8\')\n+        return self.read().decode("utf-8")\n \n \n class FilesystemFile:\n@@ -37,13 +37,11 @@ def __init__(self, parent, request, path, name):\n         self.request = request\n         self.__name__ = name\n         self.__parent__ = parent\n-        self.lastModifiedTimestamp = float(\n-            os.path.getmtime(path)\n-        ) or time.time()\n+        self.lastModifiedTimestamp = float(os.path.getmtime(path)) or time.time()\n \n-    def getContentType(self, default=\'application/octet-stream\'):\n+    def getContentType(self, default="application/octet-stream"):\n         extension = os.path.splitext(self.__name__)[1].lower()\n-        mtr = queryUtility(\'mimetypes_registry\')\n+        mtr = queryUtility("mimetypes_registry")\n         mt = None\n         if mtr:\n             mt = mtr.lookupExtension(extension)\n@@ -53,10 +51,7 @@ def getContentType(self, default=\'application/octet-stream\'):\n \n     def __call__(self, REQUEST=None, RESPONSE=None):\n         contentType = self.getContentType()\n-        lastModifiedHeader = formatdate(\n-            self.lastModifiedTimestamp,\n-            usegmt=True\n-        )\n+        lastModifiedHeader = formatdate(self.lastModifiedTimestamp, usegmt=True)\n \n         request = REQUEST\n         if request is None:\n@@ -66,30 +61,28 @@ def __call__(self, REQUEST=None, RESPONSE=None):\n         if response is None:\n             response = self.request.response\n \n-        response.setHeader(\'Content-Type\', contentType)\n-        response.setHeader(\'Content-Length\', os.path.getsize(self.path))\n-        response.setHeader(\'Last-Modified\', lastModifiedHeader)\n+        response.setHeader("Content-Type", contentType)\n+        response.setHeader("Content-Length", os.path.getsize(self.path))\n+        response.setHeader("Last-Modified", lastModifiedHeader)\n \n-        return ResourceIterator(self.path, \'rb\')\n+        return ResourceIterator(self.path, "rb")\n \n \n @implementer(ILastModified)\n @adapter(FilesystemFile)\n class FileLastModified:\n-    """Determine when a file was last modified, for caching purposes\n-    """\n+    """Determine when a file was last modified, for caching purposes"""\n \n     def __init__(self, context):\n         self.context = context\n \n     def __call__(self):\n         return datetime.datetime.fromtimestamp(\n-            self.context.lastModifiedTimestamp,\n-            tz=tzlocal()\n+            self.context.lastModifiedTimestamp, tz=tzlocal()\n         )\n \n \n @implementer(IRawReadFile)\n @adapter(FilesystemFile)\n def rawReadFile(context):\n-    return open(context.path, \'rb\')\n+    return open(context.path, "rb")\ndiff --git a/plone/resource/interfaces.py b/plone/resource/interfaces.py\nindex fd03d21..cfa420a 100644\n--- a/plone/resource/interfaces.py\n+++ b/plone/resource/interfaces.py\n@@ -19,8 +19,7 @@ def __repr__():\n         """Returns a string identifier of the directory."""\n \n     def __contains__(name):\n-        """Return true if the given file or directory exists\n-        """\n+        """Return true if the given file or directory exists"""\n \n     def __getitem__(name):\n         """Return the file or resource directory with the given name\n@@ -61,7 +60,6 @@ def exportZip(out):\n \n \n class IWritableResourceDirectory(IResourceDirectory):\n-\n     def makeDirectory(path):\n         """Create the given path as a directory. (Returns successfully without\n         doing anything if the directory already exists.)\n@@ -84,16 +82,13 @@ def importZip(file):\n         """\n \n     def __delitem__(name):\n-        """Delete a file or directory inside this directory\n-        """\n+        """Delete a file or directory inside this directory"""\n \n     def __setitem__(name, item):\n-        """Add a file or directory as returned by ``__getitem__()``\n-        """\n+        """Add a file or directory as returned by ``__getitem__()``"""\n \n     def rename(oldName, newName):\n-        """Rename a child file or folder\n-        """\n+        """Rename a child file or folder"""\n \n \n class IUniqueResourceRequest(Interface):\ndiff --git a/plone/resource/manifest.py b/plone/resource/manifest.py\nindex fdd35a9..4511112 100644\n--- a/plone/resource/manifest.py\n+++ b/plone/resource/manifest.py\n@@ -46,9 +46,9 @@\n     from configparser import ConfigParser\n \n \n-MANIFEST_FILENAME = \'manifest.cfg\'\n+MANIFEST_FILENAME = "manifest.cfg"\n \n-LOGGER = logging.getLogger(\'plone.resource.manifest\')\n+LOGGER = logging.getLogger("plone.resource.manifest")\n \n \n class ManifestFormat:\n@@ -70,8 +70,7 @@ class ManifestFormat:\n     ``[theme:parameters]``.\n     """\n \n-    def __init__(self, resourceType, keys, defaults=None,\n-                 parameterSections=None):\n+    def __init__(self, resourceType, keys, defaults=None, parameterSections=None):\n         self.resourceType = resourceType\n         self.keys = keys\n         self.defaults = defaults or {}\n@@ -110,8 +109,9 @@ def getManifest(fp, format, defaults=None):\n     return results\n \n \n-def extractManifestFromZipFile(zipfile, format, defaults=None,\n-                               manifestFilename=MANIFEST_FILENAME):\n+def extractManifestFromZipFile(\n+    zipfile, format, defaults=None, manifestFilename=MANIFEST_FILENAME\n+):\n     """Get a resource name and manifest from the given open\n     ``zipfile.ZipFile`` using the given format. Returns a tuple::\n \n@@ -137,22 +137,17 @@ def extractManifestFromZipFile(zipfile, format, defaults=None,\n \n     for name in zipfile.namelist():\n         member = zipfile.getinfo(name)\n-        path = member.filename.lstrip(\'/\')\n+        path = member.filename.lstrip("/")\n \n         # Skip filtered files (OS X junk and dot files, mainly)\n-        if any(\n-            any(\n-                filter.match(n) for filter in FILTERS\n-            ) for n in path.split(\'/\')\n-        ):\n+        if any(any(filter.match(n) for filter in FILTERS) for n in path.split("/")):\n             continue\n \n-        pathSegments = path.rstrip(\'/\').split(\'/\')\n-        isDirectory = path.endswith(\'/\')\n+        pathSegments = path.rstrip("/").split("/")\n+        isDirectory = path.endswith("/")\n \n         # Is this a new top level directory?\n         if pathSegments[0] != resourceName:\n-\n             # We already thought we had one - abort\n             if resourceName is not None:\n                 raise ValueError("More than one top level directory")\n@@ -163,15 +158,14 @@ def extractManifestFromZipFile(zipfile, format, defaults=None,\n                 resourceName = pathSegments[0]\n             else:\n                 raise ValueError(\n-                    "Found a top level file - expected a single top level "\n-                    "directory"\n+                    "Found a top level file - expected a single top level " "directory"\n                 )\n \n         # Did we find a manifest file?\n         if (\n-            resourceName is not None and\n-            not isDirectory and\n-            path == f"{resourceName}/{manifestFilename}"\n+            resourceName is not None\n+            and not isDirectory\n+            and path == f"{resourceName}/{manifestFilename}"\n         ):\n             manifest = zipfile.open(member)\n             try:\n@@ -185,8 +179,9 @@ def extractManifestFromZipFile(zipfile, format, defaults=None,\n     return (resourceName, manifestDict)\n \n \n-def getAllResources(format, defaults=None, filter=None,\n-                    manifestFilename=MANIFEST_FILENAME):\n+def getAllResources(\n+    format, defaults=None, filter=None, manifestFilename=MANIFEST_FILENAME\n+):\n     """Get a dict of all resources of the resource type indicated by the\n     manifest format. Returns a dict where the keys are the resource ids and\n     the values are manifests. The value may be None if no manifest was found.\n@@ -205,7 +200,6 @@ def getAllResources(format, defaults=None, filter=None,\n     resources = {}\n \n     for directory in iterDirectoriesOfType(format.resourceType):\n-\n         if filter is not None and not filter(directory):\n             continue\n \n@@ -213,15 +207,12 @@ def getAllResources(format, defaults=None, filter=None,\n         resources[name] = None\n \n         if directory.isFile(manifestFilename):\n-\n             manifest = directory.openFile(manifestFilename)\n             try:\n                 resources[name] = getManifest(manifest, format, defaults)\n             except:\n                 LOGGER.exception(\n-                    "Unable to read manifest for theme directory {}".format(\n-                        name\n-                    )\n+                    "Unable to read manifest for theme directory {}".format(name)\n                 )\n             finally:\n                 manifest.close()\n@@ -229,8 +220,9 @@ def getAllResources(format, defaults=None, filter=None,\n     return resources\n \n \n-def getZODBResources(format, defaults=None, filter=None,\n-                     manifestFilename=MANIFEST_FILENAME):\n+def getZODBResources(\n+    format, defaults=None, filter=None, manifestFilename=MANIFEST_FILENAME\n+):\n     """Get a dict of all resources in the ZODB of the resource type indicated\n     by the manifest format. Returns a dict where the keys are the resource\n     ids and the values are manifests. The value may be None if no manifest was\n@@ -256,7 +248,6 @@ def getZODBResources(format, defaults=None, filter=None,\n     resourcesDirectory = persistentDirectory[format.resourceType]\n \n     for name in resourcesDirectory.listDirectory():\n-\n         resourceDir = resourcesDirectory[name]\n \n         if filter is not None and not filter(resourceDir):\ndiff --git a/plone/resource/testing.py b/plone/resource/testing.py\nindex 51ec29d..462f0f6 100644\n--- a/plone/resource/testing.py\n+++ b/plone/resource/testing.py\n@@ -16,22 +16,22 @@ class DemoTraverser(Layer):\n \n     def setUp(self):\n         # Stack a new configuration context\n-        self[\'configurationContext\'] = context = zca.stackConfigurationContext(\n-            self.get(\'configurationContext\')\n+        self["configurationContext"] = context = zca.stackConfigurationContext(\n+            self.get("configurationContext")\n         )\n \n         import plone.resource\n-        xmlconfig.file(\'testing.zcml\', plone.resource, context=context)\n+\n+        xmlconfig.file("testing.zcml", plone.resource, context=context)\n \n     def tearDown(self):\n         # Zap the stacked configuration context\n-        del self[\'configurationContext\']\n+        del self["configurationContext"]\n \n \n DEMO_TRAVERSER_FIXTURE = DemoTraverser()\n DEMO_TRAVERSER_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(DEMO_TRAVERSER_FIXTURE,),\n-    name="plone.resource:DemoTraverserFunctional"\n+    bases=(DEMO_TRAVERSER_FIXTURE,), name="plone.resource:DemoTraverserFunctional"\n )\n \n \n@@ -41,23 +41,19 @@ class PloneResource(PloneSandboxLayer):\n     def setUpZope(self, app, configurationContext):\n         # Load ZCML\n         import plone.resource\n-        xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.resource,\n-            context=configurationContext\n-        )\n+\n+        xmlconfig.file("configure.zcml", plone.resource, context=configurationContext)\n \n     def setUpPloneSite(self, portal):\n         # install into the Plone site\n-        applyProfile(portal, \'plone.resource:default\')\n+        applyProfile(portal, "plone.resource:default")\n \n \n PLONE_RESOURCE_FIXTURE = PloneResource()\n PLONE_RESOURCE_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_RESOURCE_FIXTURE,),\n-    name="plone.resource:Integration"\n+    bases=(PLONE_RESOURCE_FIXTURE,), name="plone.resource:Integration"\n )\n \n \n class DemoTraverser(ResourceTraverser):\n-    name = \'demo\'\n+    name = "demo"\ndiff --git a/plone/resource/tests/test_directory.py b/plone/resource/tests/test_directory.py\nindex e6b89b1..1ed0c66 100644\n--- a/plone/resource/tests/test_directory.py\n+++ b/plone/resource/tests/test_directory.py\n@@ -21,13 +21,12 @@\n \n \n class TestPersistentResourceDirectory(unittest.TestCase):\n-\n     def _makeOne(self):\n-        root = BTreeFolder2(\'portal_resources\')\n-        root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n-        root.demo._setOb(\'foo\', BTreeFolder2(\'foo\'))\n-        file = File(\'test.html\', \'test.html\', BytesIO(b\'asdf\'))\n-        root.demo.foo._setOb(\'test.html\', file)\n+        root = BTreeFolder2("portal_resources")\n+        root._setOb("demo", BTreeFolder2("demo"))\n+        root.demo._setOb("foo", BTreeFolder2("foo"))\n+        file = File("test.html", "test.html", BytesIO(b"asdf"))\n+        root.demo.foo._setOb("test.html", file)\n \n         return PersistentResourceDirectory(root)\n \n@@ -37,10 +36,10 @@ def _assertSameUnwrapped(self, a, b):\n     def test_ctor_implicit_context(self):\n         siteSetUp()\n \n-        site = BTreeFolder2(\'site\')\n+        site = BTreeFolder2("site")\n         createSiteManager(site, setsite=True)\n         root = self._makeOne().context\n-        site._setOb(\'portal_resources\', root)\n+        site._setOb("portal_resources", root)\n \n         try:\n             dir = PersistentResourceDirectory()\n@@ -48,165 +47,169 @@ def test_ctor_implicit_context(self):\n             self.assertTrue(aq_base(root) is dir.context)\n \n             # but re-wrapped during traversal\n-            traversed = dir[\'demo\']\n+            traversed = dir["demo"]\n             self.assertTrue(site in traversed.context.aq_chain)\n         finally:\n             siteTearDown()\n \n     def test_repr(self):\n         dir = self._makeOne()\n-        s = \'<PersistentResourceDirectory object at portal_resources>\'\n+        s = "<PersistentResourceDirectory object at portal_resources>"\n         self.assertEqual(s, repr(dir))\n \n     def test_publishTraverse_directory(self):\n         dir = self._makeOne()\n-        subdir = dir.publishTraverse(None, \'demo\')\n+        subdir = dir.publishTraverse(None, "demo")\n         self._assertSameUnwrapped(subdir.context, dir.context.demo)\n \n     def test_publishTraverse_file(self):\n         dir = self._makeOne()\n-        file = dir.publishTraverse(None, \'demo/foo/test.html\')\n-        self._assertSameUnwrapped(file, dir.context.demo.foo[\'test.html\'])\n+        file = dir.publishTraverse(None, "demo/foo/test.html")\n+        self._assertSameUnwrapped(file, dir.context.demo.foo["test.html"])\n \n     def test_publishTraverse_not_found(self):\n         dir = self._makeOne()\n-        self.assertRaises(NotFound, dir.publishTraverse, None, \'baz\')\n+        self.assertRaises(NotFound, dir.publishTraverse, None, "baz")\n \n     def test_getitem(self):\n         dir = self._makeOne()\n-        self._assertSameUnwrapped(dir[\'demo\'].context, dir.context.demo)\n+        self._assertSameUnwrapped(dir["demo"].context, dir.context.demo)\n \n     def test_openFile(self):\n         dir = self._makeOne()\n-        file = dir.openFile(\'demo/foo/test.html\')\n-        self.assertEqual(b\'asdf\', file.read())\n+        file = dir.openFile("demo/foo/test.html")\n+        self.assertEqual(b"asdf", file.read())\n \n     def test_readFile(self):\n         dir = self._makeOne()\n-        self.assertEqual(b\'asdf\', dir.readFile(\'demo/foo/test.html\'))\n+        self.assertEqual(b"asdf", dir.readFile("demo/foo/test.html"))\n \n     def test_readFile_not_found(self):\n         dir = self._makeOne()\n-        self.assertRaises(IOError, dir.readFile, \'baz\')\n+        self.assertRaises(IOError, dir.readFile, "baz")\n \n     def test_listDirectory(self):\n         dir = self._makeOne()\n-        self.assertEqual([\'demo\'], dir.listDirectory())\n+        self.assertEqual(["demo"], dir.listDirectory())\n \n     def test_listDirectory_filters_by_name(self):\n         dir = self._makeOne()\n-        dir.context._setOb(\'.svn\', BTreeFolder2(\'filtered\'))\n-        self.assertEqual([\'demo\'], dir.listDirectory())\n+        dir.context._setOb(".svn", BTreeFolder2("filtered"))\n+        self.assertEqual(["demo"], dir.listDirectory())\n \n     def test_makeDirectory(self):\n         dir = self._makeOne()\n-        dir.makeDirectory(\'demo/bar\')\n-        newdir = dir[\'demo\'][\'bar\']\n+        dir.makeDirectory("demo/bar")\n+        newdir = dir["demo"]["bar"]\n         self.assertTrue(isinstance(newdir.context, BTreeFolder2))\n \n     def test_makeDirectory_extra_slashes(self):\n         dir = self._makeOne()\n-        dir.makeDirectory(\'/demo/bar/\')\n-        newdir = dir[\'demo\'][\'bar\']\n+        dir.makeDirectory("/demo/bar/")\n+        newdir = dir["demo"]["bar"]\n         self.assertTrue(isinstance(newdir.context, BTreeFolder2))\n \n     def test_writeFile(self):\n         dir = self._makeOne()\n-        dir.writeFile(\'qux\', b\'qux\')\n-        self.assertEqual(b\'qux\', dir.readFile(\'qux\'))\n+        dir.writeFile("qux", b"qux")\n+        self.assertEqual(b"qux", dir.readFile("qux"))\n \n     def test_writeFile_does_not_create_empty_directory(self):\n         dir = self._makeOne()\n-        dir.writeFile(\'qux\', b\'qux\')\n-        self.assertFalse(\'\' in dir)\n-        self.assertTrue(\'qux\' in dir)\n+        dir.writeFile("qux", b"qux")\n+        self.assertFalse("" in dir)\n+        self.assertTrue("qux" in dir)\n \n     def test_writeFile_directory_missing(self):\n         dir = self._makeOne()\n-        dir.writeFile(\'baz/qux\', b\'qux\')\n-        self.assertEqual(b\'qux\', dir.readFile(\'baz/qux\'))\n+        dir.writeFile("baz/qux", b"qux")\n+        self.assertEqual(b"qux", dir.readFile("baz/qux"))\n \n     def test_writeFile_file_already_exists(self):\n         dir = self._makeOne()\n-        dir.writeFile(\'demo/foo/test.html\', b\'changed\')\n-        self.assertEqual(b\'changed\', dir.readFile(\'demo/foo/test.html\'))\n+        dir.writeFile("demo/foo/test.html", b"changed")\n+        self.assertEqual(b"changed", dir.readFile("demo/foo/test.html"))\n \n     def test_importZip(self):\n         dir = self._makeOne()\n         with open(\n-            os.path.join(os.path.dirname(__file__), \'resources.zip\'),\n-            \'rb\',\n+            os.path.join(os.path.dirname(__file__), "resources.zip"),\n+            "rb",\n         ) as f:\n             dir.importZip(f)\n-            self.assertEqual(b\'from zip\', dir.readFile(\'demo/foo/test.html\'))\n+            self.assertEqual(b"from zip", dir.readFile("demo/foo/test.html"))\n \n     def test_importZip_takes_ZipFile(self):\n         dir = self._makeOne()\n         with open(\n-            os.path.join(os.path.dirname(__file__), \'resources.zip\'),\n-            \'rb\',\n+            os.path.join(os.path.dirname(__file__), "resources.zip"),\n+            "rb",\n         ) as f:\n             dir.importZip(f)\n-            self.assertEqual(b\'from zip\', dir.readFile(\'demo/foo/test.html\'))\n+            self.assertEqual(b"from zip", dir.readFile("demo/foo/test.html"))\n \n     def test_importZip_filters_resource_forks(self):\n         dir = self._makeOne()\n         with open(\n-            os.path.join(os.path.dirname(__file__), \'resources.zip\'),\n-            \'rb\',\n+            os.path.join(os.path.dirname(__file__), "resources.zip"),\n+            "rb",\n         ) as f:\n             dir.importZip(f)\n-            self.assertFalse(\'__MACOSX\' in dir.context.objectIds())\n+            self.assertFalse("__MACOSX" in dir.context.objectIds())\n \n     def test_importZip_filters_hidden_directories(self):\n         dir = self._makeOne()\n         with open(\n-            os.path.join(os.path.dirname(__file__), \'resources.zip\'),\n-            \'rb\',\n+            os.path.join(os.path.dirname(__file__), "resources.zip"),\n+            "rb",\n         ) as f:\n             dir.importZip(f)\n-            self.assertFalse(\'.svn\' in dir)\n+            self.assertFalse(".svn" in dir)\n \n     def test_delitem(self):\n         dir = self._makeOne()\n-        dir.makeDirectory(\'demo\')\n-        self.assertTrue(\'demo\' in dir)\n-        del dir[\'demo\']\n-        self.assertFalse(\'demo\' in dir)\n+        dir.makeDirectory("demo")\n+        self.assertTrue("demo" in dir)\n+        del dir["demo"]\n+        self.assertFalse("demo" in dir)\n \n     def test_rename(self):\n         dir = self._makeOne()\n-        dir.rename(\'demo\', \'demo1\')\n-        self.assertEqual([\'demo1\'], dir.listDirectory())\n+        dir.rename("demo", "demo1")\n+        self.assertEqual(["demo1"], dir.listDirectory())\n \n     def test_setitem_file(self):\n         dir = self._makeOne()\n-        f = dir[\'demo\'][\'foo\'][\'test.html\']\n-        dir[\'demo\'].makeDirectory(\'bar\')\n+        f = dir["demo"]["foo"]["test.html"]\n+        dir["demo"].makeDirectory("bar")\n \n-        dir[\'demo\'][\'bar\'][\'test.html\'] = f\n-        self.assertEqual(dir[\'demo\'][\'foo\'].readFile(\'test.html\'),\n-                         dir[\'demo\'][\'bar\'].readFile(\'test.html\'),)\n+        dir["demo"]["bar"]["test.html"] = f\n+        self.assertEqual(\n+            dir["demo"]["foo"].readFile("test.html"),\n+            dir["demo"]["bar"].readFile("test.html"),\n+        )\n \n     def test_setitem_file_unicode(self):\n         dir = self._makeOne()\n-        f = dir[\'demo\'][\'foo\'][\'test.html\']\n-        dir[\'demo\'].makeDirectory(\'bar\')\n+        f = dir["demo"]["foo"]["test.html"]\n+        dir["demo"].makeDirectory("bar")\n \n-        dir[\'demo\'][\'bar\'][\'test.html\'] = f\n-        self.assertEqual(dir[\'demo\'][\'foo\'].readFile(\'test.html\'),\n-                         dir[\'demo\'][\'bar\'].readFile(\'test.html\'),)\n+        dir["demo"]["bar"]["test.html"] = f\n+        self.assertEqual(\n+            dir["demo"]["foo"].readFile("test.html"),\n+            dir["demo"]["bar"].readFile("test.html"),\n+        )\n \n     def test_setitem_directory(self):\n         dir = self._makeOne()\n-        dir[\'demo\'][\'foo\'].makeDirectory(\'d1\')\n+        dir["demo"]["foo"].makeDirectory("d1")\n \n-        d1 = dir[\'demo\'][\'foo\'][\'d1\']\n-        del dir[\'demo\'][\'foo\'][\'d1\']\n+        d1 = dir["demo"]["foo"]["d1"]\n+        del dir["demo"]["foo"]["d1"]\n \n-        dir[\'demo\'][\'foo\'][\'d2\'] = d1\n+        dir["demo"]["foo"]["d2"] = d1\n \n-        self.assertEqual(dir[\'demo\'][\'foo\'][\'d2\'].__name__, \'d2\')\n+        self.assertEqual(dir["demo"]["foo"]["d2"].__name__, "d2")\n \n     def test_events(self):\n         events = []\n@@ -214,88 +217,89 @@ def test_events(self):\n         @adapter(IPloneResourceCreatedEvent)\n         def _handleFileCreated(event):\n             events.append(event)\n+\n         provideHandler(_handleFileCreated)\n \n         @adapter(IPloneResourceModifiedEvent)\n         def _handleFileModified(event):\n             events.append(event)\n+\n         provideHandler(_handleFileModified)\n \n         dir = self._makeOne()\n-        dir.writeFile(\'test\', b\'my test\')\n-        dir.writeFile(\'test\', b\'my test is modified\')\n+        dir.writeFile("test", b"my test")\n+        dir.writeFile("test", b"my test is modified")\n         self.assertTrue(isinstance(events[0], PloneResourceCreatedEvent))\n-        self.assertEqual(events[0].object.data, b\'my test\')\n+        self.assertEqual(events[0].object.data, b"my test")\n         self.assertTrue(isinstance(events[1], PloneResourceModifiedEvent))\n-        self.assertEqual(events[1].object.data, b\'my test is modified\')\n+        self.assertEqual(events[1].object.data, b"my test is modified")\n \n \n class TestFilesystemResourceDirectory(unittest.TestCase):\n-\n     def _makeOne(self, name=None):\n-        path = os.path.join(os.path.dirname(__file__), \'resources\')\n+        path = os.path.join(os.path.dirname(__file__), "resources")\n         return FilesystemResourceDirectory(path, name=name)\n \n     def test_repr_default(self):\n         dir = self._makeOne()\n-        s = \'<FilesystemResourceDirectory object at resources>\'\n+        s = "<FilesystemResourceDirectory object at resources>"\n         self.assertEqual(s, repr(dir))\n \n     def test_repr_other_name(self):\n-        dir = self._makeOne(name=\'something-else\')\n-        s = \'<FilesystemResourceDirectory object at something-else>\'\n+        dir = self._makeOne(name="something-else")\n+        s = "<FilesystemResourceDirectory object at something-else>"\n         # This used to give a ValueError: substring not found\n         self.assertEqual(s, repr(dir))\n \n     def test_publishTraverse_directory(self):\n         dir = self._makeOne()\n-        subdir = dir.publishTraverse(None, \'demo\')\n-        self.assertEqual(subdir.directory, os.path.join(dir.directory, \'demo\'))\n+        subdir = dir.publishTraverse(None, "demo")\n+        self.assertEqual(subdir.directory, os.path.join(dir.directory, "demo"))\n \n     def test_publishTraverse_file(self):\n         dir = self._makeOne()\n-        file = dir.publishTraverse(None, \'demo/foo/test.html\')\n-        subpath = os.path.join(dir.directory, \'demo\', \'foo\', \'test.html\')\n+        file = dir.publishTraverse(None, "demo/foo/test.html")\n+        subpath = os.path.join(dir.directory, "demo", "foo", "test.html")\n         self.assertEqual(file.path, subpath)\n \n     def test_publishTraverse_not_found(self):\n         dir = self._makeOne()\n-        self.assertRaises(NotFound, dir.publishTraverse, None, \'baz\')\n+        self.assertRaises(NotFound, dir.publishTraverse, None, "baz")\n \n     def test_getitem(self):\n         dir = self._makeOne()\n-        subpath = os.path.join(dir.directory, \'demo\')\n-        self.assertEqual(dir[\'demo\'].directory, subpath)\n+        subpath = os.path.join(dir.directory, "demo")\n+        self.assertEqual(dir["demo"].directory, subpath)\n \n     def test_contains(self):\n         dir = self._makeOne()\n-        self.assertTrue(\'demo\' in dir)\n+        self.assertTrue("demo" in dir)\n \n     def test_openFile(self):\n         dir = self._makeOne()\n-        with dir.openFile(\'demo/foo/test.html\') as fp:\n-            self.assertEqual(b\'asdf\', fp.read())\n+        with dir.openFile("demo/foo/test.html") as fp:\n+            self.assertEqual(b"asdf", fp.read())\n \n     def test_readFile(self):\n         dir = self._makeOne()\n-        self.assertEqual(b\'asdf\', dir.readFile(\'demo/foo/test.html\'))\n+        self.assertEqual(b"asdf", dir.readFile("demo/foo/test.html"))\n \n     def test_readFile_not_found(self):\n         dir = self._makeOne()\n-        self.assertRaises(IOError, dir.readFile, \'baz\')\n+        self.assertRaises(IOError, dir.readFile, "baz")\n \n     def test_listDirectory(self):\n         dir = self._makeOne()\n-        self.assertEqual([\'demo\'], dir.listDirectory())\n+        self.assertEqual(["demo"], dir.listDirectory())\n \n     def test_listDirectory_filters_by_name(self):\n         dir = self._makeOne()\n-        name = \'.dummy\'\n+        name = ".dummy"\n         file_path = os.path.join(dir.directory, name)\n         if name not in os.listdir(dir.directory):\n-            with open(file_path, \'w\') as fp:\n+            with open(file_path, "w") as fp:\n                 fp.write("")\n         self.assertTrue(name in os.listdir(dir.directory))\n-        self.assertEqual([\'demo\'], dir.listDirectory())\n+        self.assertEqual(["demo"], dir.listDirectory())\n         # Cleanup created file.\n         os.remove(file_path)\ndiff --git a/plone/resource/tests/test_file.py b/plone/resource/tests/test_file.py\nindex c24c26e..f41297f 100644\n--- a/plone/resource/tests/test_file.py\n+++ b/plone/resource/tests/test_file.py\n@@ -17,29 +17,31 @@\n \n \n class TestFilesystemResourceDirectory(unittest.TestCase):\n-\n     layer = UNIT_TESTING\n \n     def test_render(self):\n-        name = \'test.html\'\n-        path = os.path.join(os.path.dirname(__file__), \'resources\', \'demo\', \'foo\', name)\n+        name = "test.html"\n+        path = os.path.join(os.path.dirname(__file__), "resources", "demo", "foo", name)\n         mtime = os.path.getmtime(path)\n \n         request = TestRequest()\n \n         f = FilesystemFile(None, request, path, name)\n         with f() as iterator:\n-            data = b\'\'.join(iterator)\n-            self.assertEqual(data, b\'asdf\')\n-            self.assertEqual(request.response.getHeader(\'Content-Type\'), \'text/html\')\n-            self.assertEqual(request.response.getHeader(\'Content-Length\'), \'4\')\n-            self.assertEqual(request.response.getHeader(\'Last-Modified\'), formatdate(mtime, usegmt=True))\n+            data = b"".join(iterator)\n+            self.assertEqual(data, b"asdf")\n+            self.assertEqual(request.response.getHeader("Content-Type"), "text/html")\n+            self.assertEqual(request.response.getHeader("Content-Length"), "4")\n+            self.assertEqual(\n+                request.response.getHeader("Last-Modified"),\n+                formatdate(mtime, usegmt=True),\n+            )\n \n     def test_last_modified(self):\n         provideAdapter(FileLastModified)\n \n-        name = \'test.html\'\n-        path = os.path.join(os.path.dirname(__file__), \'resources\', \'demo\', \'foo\', name)\n+        name = "test.html"\n+        path = os.path.join(os.path.dirname(__file__), "resources", "demo", "foo", name)\n         mtime = os.path.getmtime(path)\n \n         request = TestRequest()\n@@ -54,8 +56,8 @@ def test_last_modified(self):\n     def test_raw_read_file(self):\n         provideAdapter(rawReadFile)\n \n-        name = \'test.html\'\n-        path = os.path.join(os.path.dirname(__file__), \'resources\', \'demo\', \'foo\', name)\n+        name = "test.html"\n+        path = os.path.join(os.path.dirname(__file__), "resources", "demo", "foo", name)\n \n         request = TestRequest()\n \n@@ -63,4 +65,4 @@ def test_raw_read_file(self):\n \n         with IRawReadFile(f) as rf:\n             self.assertTrue(isinstance(rf, io.IOBase))\n-            self.assertEqual(rf.read(), b\'asdf\')\n+            self.assertEqual(rf.read(), b"asdf")\ndiff --git a/plone/resource/tests/test_integration.py b/plone/resource/tests/test_integration.py\nindex 0fdb1e0..79311cf 100644\n--- a/plone/resource/tests/test_integration.py\n+++ b/plone/resource/tests/test_integration.py\n@@ -8,18 +8,21 @@ class IntegrationTestCase(unittest.TestCase):\n     layer = PLONE_RESOURCE_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer.get(\'portal\')\n+        self.portal = self.layer.get("portal")\n \n     def test_persistent_directory_installed(self):\n         # directory should be available as the portal_resources tool\n         from Products.CMFCore.utils import getToolByName\n-        tool = getToolByName(self.portal, \'portal_resources\')\n-        self.assertEqual(\'portal_resources\', tool.getId())\n+\n+        tool = getToolByName(self.portal, "portal_resources")\n+        self.assertEqual("portal_resources", tool.getId())\n \n         # wrapper should be available as an IResourceDirectory utility named \'persistent\'\n         from zope.component import getUtility\n-        utility = getUtility(IResourceDirectory, name=\'persistent\')\n+\n+        utility = getUtility(IResourceDirectory, name="persistent")\n \n         # the utility\'s context attribute is the (unwrapped) tool\n         from Acquisition import aq_base\n+\n         self.assertTrue(aq_base(tool) is utility.context)\ndiff --git a/plone/resource/tests/test_manifest.py b/plone/resource/tests/test_manifest.py\nindex 64578c7..5854d78 100644\n--- a/plone/resource/tests/test_manifest.py\n+++ b/plone/resource/tests/test_manifest.py\n@@ -17,10 +17,13 @@\n \n \n base_path = os.path.dirname(__file__)\n-test_dir_path = os.path.join(base_path, \'resources\')\n+test_dir_path = os.path.join(base_path, "resources")\n+\n+TEST_FORMAT = ManifestFormat("demo", ["title", "description", "bar"], {"bar": "baz"})\n+TEST_FORMAT_PARAMS = ManifestFormat(\n+    "demo", ["title", "description", "bar"], {"bar": "baz"}, ["params"]\n+)\n \n-TEST_FORMAT = ManifestFormat(\'demo\', [\'title\', \'description\', \'bar\'], {\'bar\': \'baz\'})\n-TEST_FORMAT_PARAMS = ManifestFormat(\'demo\', [\'title\', \'description\', \'bar\'], {\'bar\': \'baz\'}, [\'params\'])\n \n class TestManifest(unittest.TestCase):\n     layer = DEMO_TRAVERSER_FUNCTIONAL_TESTING\n@@ -32,183 +35,221 @@ def tearDown(self):\n         zca.popGlobalRegistry()\n \n     def test_get_manifest(self):\n-        with open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\')) as fp:\n+        with open(\n+            os.path.join(test_dir_path, "demo", "manifest-test", "manifest.cfg")\n+        ) as fp:\n             manifest = getManifest(fp, TEST_FORMAT)\n-            self.assertEqual(manifest[\'title\'], \'Manifest test\')\n-            self.assertEqual(manifest[\'description\'], None)\n-            self.assertEqual(manifest[\'bar\'], \'baz\')\n+            self.assertEqual(manifest["title"], "Manifest test")\n+            self.assertEqual(manifest["description"], None)\n+            self.assertEqual(manifest["bar"], "baz")\n \n     def test_get_manifest_params(self):\n-        with open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\')) as fp:\n+        with open(\n+            os.path.join(test_dir_path, "demo", "manifest-test", "manifest.cfg")\n+        ) as fp:\n             manifest = getManifest(fp, TEST_FORMAT_PARAMS)\n-            self.assertEqual(manifest[\'title\'], \'Manifest test\')\n-            self.assertEqual(manifest[\'description\'], None)\n-            self.assertEqual(manifest[\'bar\'], \'baz\')\n-            self.assertEqual(manifest[\'params\'], {\'alpha\': \'beta\', \'delta\': \'theta\'})\n+            self.assertEqual(manifest["title"], "Manifest test")\n+            self.assertEqual(manifest["description"], None)\n+            self.assertEqual(manifest["bar"], "baz")\n+            self.assertEqual(manifest["params"], {"alpha": "beta", "delta": "theta"})\n \n     def test_get_manifest_ignores_extra(self):\n-        with open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\')) as fp:\n+        with open(\n+            os.path.join(test_dir_path, "demo", "manifest-test", "manifest.cfg")\n+        ) as fp:\n             manifest = getManifest(fp, TEST_FORMAT)\n-            self.assertFalse(\'baz\' in manifest)\n+            self.assertFalse("baz" in manifest)\n \n     def test_get_manifest_override_defaults(self):\n-        with open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\')) as fp:\n-            manifest = getManifest(fp, TEST_FORMAT, {\'bar\': \'foo\', \'title\': \'foo\'})\n-            self.assertEqual(manifest[\'title\'], \'Manifest test\')\n-            self.assertEqual(manifest[\'bar\'], \'foo\')\n+        with open(\n+            os.path.join(test_dir_path, "demo", "manifest-test", "manifest.cfg")\n+        ) as fp:\n+            manifest = getManifest(fp, TEST_FORMAT, {"bar": "foo", "title": "foo"})\n+            self.assertEqual(manifest["title"], "Manifest test")\n+            self.assertEqual(manifest["bar"], "foo")\n \n     def test_extract_from_zip_file(self):\n-        zf = zipfile.ZipFile(os.path.join(base_path, \'zipfiles\', \'normal.zip\'))\n+        zf = zipfile.ZipFile(os.path.join(base_path, "zipfiles", "normal.zip"))\n         resourceName, manifestDict = extractManifestFromZipFile(zf, TEST_FORMAT)\n \n-        self.assertEqual(resourceName, \'demo1\')\n+        self.assertEqual(resourceName, "demo1")\n         self.assertEqual(\n-                manifestDict,\n-                {\'bar\': \'baz\', \'description\': None, \'title\': \'No top level dir\'}\n-            )\n+            manifestDict,\n+            {"bar": "baz", "description": None, "title": "No top level dir"},\n+        )\n \n     def test_extract_from_zip_file_override_defaults(self):\n-        zf = zipfile.ZipFile(os.path.join(base_path, \'zipfiles\', \'normal.zip\'))\n-        resourceName, manifestDict = extractManifestFromZipFile(zf, TEST_FORMAT,\n-            defaults={\'bar\': \'foo\', \'description\': \'desc\'})\n+        zf = zipfile.ZipFile(os.path.join(base_path, "zipfiles", "normal.zip"))\n+        resourceName, manifestDict = extractManifestFromZipFile(\n+            zf, TEST_FORMAT, defaults={"bar": "foo", "description": "desc"}\n+        )\n \n-        self.assertEqual(resourceName, \'demo1\')\n+        self.assertEqual(resourceName, "demo1")\n         self.assertEqual(\n-                manifestDict,\n-                {\'bar\': \'foo\', \'description\': \'desc\', \'title\': \'No top level dir\'}\n-            )\n+            manifestDict,\n+            {"bar": "foo", "description": "desc", "title": "No top level dir"},\n+        )\n \n     def test_extract_from_zip_file_no_top_level_dir(self):\n-        zf = zipfile.ZipFile(os.path.join(base_path, \'zipfiles\', \'no-top-level-dir.zip\'))\n+        zf = zipfile.ZipFile(\n+            os.path.join(base_path, "zipfiles", "no-top-level-dir.zip")\n+        )\n         self.assertRaises(ValueError, extractManifestFromZipFile, zf, TEST_FORMAT)\n \n     def test_extract_from_zip_file_multiple_top_level_dirs(self):\n-        zf = zipfile.ZipFile(os.path.join(base_path, \'zipfiles\', \'multiple-top-level-dirs.zip\'))\n+        zf = zipfile.ZipFile(\n+            os.path.join(base_path, "zipfiles", "multiple-top-level-dirs.zip")\n+        )\n         self.assertRaises(ValueError, extractManifestFromZipFile, zf, TEST_FORMAT)\n \n     def test_extract_from_zip_file_no_manifest(self):\n-        zf = zipfile.ZipFile(os.path.join(base_path, \'zipfiles\', \'no-manifest.zip\'))\n+        zf = zipfile.ZipFile(os.path.join(base_path, "zipfiles", "no-manifest.zip"))\n         resourceName, manifestDict = extractManifestFromZipFile(zf, TEST_FORMAT)\n \n-        self.assertEqual(resourceName, \'demo1\')\n+        self.assertEqual(resourceName, "demo1")\n         self.assertEqual(manifestDict, None)\n \n     def test_extract_from_zip_file_manifest_name_override(self):\n-        zf = zipfile.ZipFile(os.path.join(base_path, \'zipfiles\', \'manifest-name-override.zip\'))\n+        zf = zipfile.ZipFile(\n+            os.path.join(base_path, "zipfiles", "manifest-name-override.zip")\n+        )\n         resourceName, manifestDict = extractManifestFromZipFile(zf, TEST_FORMAT)\n \n-        self.assertEqual(resourceName, \'demo1\')\n+        self.assertEqual(resourceName, "demo1")\n         self.assertEqual(manifestDict, None)\n \n-        resourceName, manifestDict = extractManifestFromZipFile(zf, TEST_FORMAT, manifestFilename=\'other-manifest.cfg\')\n+        resourceName, manifestDict = extractManifestFromZipFile(\n+            zf, TEST_FORMAT, manifestFilename="other-manifest.cfg"\n+        )\n \n         self.assertEqual(\n-                manifestDict,\n-                {\'bar\': \'baz\', \'description\': None, \'title\': \'No top level dir\'}\n-            )\n+            manifestDict,\n+            {"bar": "baz", "description": None, "title": "No top level dir"},\n+        )\n \n     def test_get_all_resources(self):\n-        app = self.layer[\'app\']\n+        app = self.layer["app"]\n \n-        foo = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'foo\'))\n-        provideUtility(foo, provides=IResourceDirectory, name=\'++demo++foo\')\n+        foo = FilesystemResourceDirectory(os.path.join(test_dir_path, "demo", "foo"))\n+        provideUtility(foo, provides=IResourceDirectory, name="++demo++foo")\n \n-        manifestTest = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'manifest-test\'))\n-        provideUtility(manifestTest, provides=IResourceDirectory, name=\'++demo++manifest-test\')\n+        manifestTest = FilesystemResourceDirectory(\n+            os.path.join(test_dir_path, "demo", "manifest-test")\n+        )\n+        provideUtility(\n+            manifestTest, provides=IResourceDirectory, name="++demo++manifest-test"\n+        )\n \n-        root = BTreeFolder2(\'portal_resources\')\n-        app._setOb(\'portal_resources\', root)\n-        root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n-        root[\'demo\']._setOb(\'bar\', BTreeFolder2(\'bar\'))\n+        root = BTreeFolder2("portal_resources")\n+        app._setOb("portal_resources", root)\n+        root._setOb("demo", BTreeFolder2("demo"))\n+        root["demo"]._setOb("bar", BTreeFolder2("bar"))\n \n         persistentDir = PersistentResourceDirectory(root)\n-        provideUtility(persistentDir, provides=IResourceDirectory, name=\'persistent\')\n+        provideUtility(persistentDir, provides=IResourceDirectory, name="persistent")\n \n         resources = getAllResources(TEST_FORMAT)\n \n         self.assertEqual(\n-                resources,\n-                {\'bar\': None,\n-                 \'foo\': None,\n-                 \'manifest-test\': {\'bar\': \'baz\',\n-                                   \'description\': None,\n-                                   \'title\': \'Manifest test\'}}\n-            )\n+            resources,\n+            {\n+                "bar": None,\n+                "foo": None,\n+                "manifest-test": {\n+                    "bar": "baz",\n+                    "description": None,\n+                    "title": "Manifest test",\n+                },\n+            },\n+        )\n \n     def test_get_all_resources_filter(self):\n-        app = self.layer[\'app\']\n+        app = self.layer["app"]\n \n-        foo = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'foo\'))\n-        provideUtility(foo, provides=IResourceDirectory, name=\'++demo++foo\')\n+        foo = FilesystemResourceDirectory(os.path.join(test_dir_path, "demo", "foo"))\n+        provideUtility(foo, provides=IResourceDirectory, name="++demo++foo")\n \n-        manifestTest = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'manifest-test\'))\n-        provideUtility(manifestTest, provides=IResourceDirectory, name=\'++demo++manifest-test\')\n+        manifestTest = FilesystemResourceDirectory(\n+            os.path.join(test_dir_path, "demo", "manifest-test")\n+        )\n+        provideUtility(\n+            manifestTest, provides=IResourceDirectory, name="++demo++manifest-test"\n+        )\n \n-        root = BTreeFolder2(\'portal_resources\')\n-        app._setOb(\'portal_resources\', root)\n-        root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n-        root[\'demo\']._setOb(\'bar\', BTreeFolder2(\'bar\'))\n+        root = BTreeFolder2("portal_resources")\n+        app._setOb("portal_resources", root)\n+        root._setOb("demo", BTreeFolder2("demo"))\n+        root["demo"]._setOb("bar", BTreeFolder2("bar"))\n \n         persistentDir = PersistentResourceDirectory(root)\n-        provideUtility(persistentDir, provides=IResourceDirectory, name=\'persistent\')\n+        provideUtility(persistentDir, provides=IResourceDirectory, name="persistent")\n \n-        resources = getAllResources(TEST_FORMAT, filter=lambda dir: dir.__name__ != \'foo\')\n+        resources = getAllResources(\n+            TEST_FORMAT, filter=lambda dir: dir.__name__ != "foo"\n+        )\n \n         self.assertEqual(\n-                resources,\n-                {\'bar\': None,\n-                 \'manifest-test\': {\'bar\': \'baz\',\n-                                   \'description\': None,\n-                                   \'title\': \'Manifest test\'}}\n-            )\n+            resources,\n+            {\n+                "bar": None,\n+                "manifest-test": {\n+                    "bar": "baz",\n+                    "description": None,\n+                    "title": "Manifest test",\n+                },\n+            },\n+        )\n \n     def test_get_zodb_resources(self):\n-        app = self.layer[\'app\']\n+        app = self.layer["app"]\n \n-        foo = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'foo\'))\n-        provideUtility(foo, provides=IResourceDirectory, name=\'++demo++foo\')\n+        foo = FilesystemResourceDirectory(os.path.join(test_dir_path, "demo", "foo"))\n+        provideUtility(foo, provides=IResourceDirectory, name="++demo++foo")\n \n-        manifestTest = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'manifest-test\'))\n-        provideUtility(manifestTest, provides=IResourceDirectory, name=\'++demo++manifest-test\')\n+        manifestTest = FilesystemResourceDirectory(\n+            os.path.join(test_dir_path, "demo", "manifest-test")\n+        )\n+        provideUtility(\n+            manifestTest, provides=IResourceDirectory, name="++demo++manifest-test"\n+        )\n \n-        root = BTreeFolder2(\'portal_resources\')\n-        app._setOb(\'portal_resources\', root)\n-        root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n-        root[\'demo\']._setOb(\'bar\', BTreeFolder2(\'bar\'))\n-        root[\'demo\']._setOb(\'baz\', BTreeFolder2(\'baz\'))\n+        root = BTreeFolder2("portal_resources")\n+        app._setOb("portal_resources", root)\n+        root._setOb("demo", BTreeFolder2("demo"))\n+        root["demo"]._setOb("bar", BTreeFolder2("bar"))\n+        root["demo"]._setOb("baz", BTreeFolder2("baz"))\n \n         persistentDir = PersistentResourceDirectory(root)\n-        provideUtility(persistentDir, provides=IResourceDirectory, name=\'persistent\')\n+        provideUtility(persistentDir, provides=IResourceDirectory, name="persistent")\n \n         resources = getZODBResources(TEST_FORMAT)\n \n-        self.assertEqual(\n-                resources,\n-                {\'bar\': None,\n-                 \'baz\': None}\n-            )\n+        self.assertEqual(resources, {"bar": None, "baz": None})\n \n     def test_get_zodb_resources_filter(self):\n-        app = self.layer[\'app\']\n+        app = self.layer["app"]\n \n-        foo = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'foo\'))\n-        provideUtility(foo, provides=IResourceDirectory, name=\'++demo++foo\')\n+        foo = FilesystemResourceDirectory(os.path.join(test_dir_path, "demo", "foo"))\n+        provideUtility(foo, provides=IResourceDirectory, name="++demo++foo")\n \n-        manifestTest = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'manifest-test\'))\n-        provideUtility(manifestTest, provides=IResourceDirectory, name=\'++demo++manifest-test\')\n+        manifestTest = FilesystemResourceDirectory(\n+            os.path.join(test_dir_path, "demo", "manifest-test")\n+        )\n+        provideUtility(\n+            manifestTest, provides=IResourceDirectory, name="++demo++manifest-test"\n+        )\n \n-        root = BTreeFolder2(\'portal_resources\')\n-        app._setOb(\'portal_resources\', root)\n-        root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n-        root[\'demo\']._setOb(\'bar\', BTreeFolder2(\'bar\'))\n-        root[\'demo\']._setOb(\'baz\', BTreeFolder2(\'baz\'))\n+        root = BTreeFolder2("portal_resources")\n+        app._setOb("portal_resources", root)\n+        root._setOb("demo", BTreeFolder2("demo"))\n+        root["demo"]._setOb("bar", BTreeFolder2("bar"))\n+        root["demo"]._setOb("baz", BTreeFolder2("baz"))\n \n         persistentDir = PersistentResourceDirectory(root)\n-        provideUtility(persistentDir, provides=IResourceDirectory, name=\'persistent\')\n+        provideUtility(persistentDir, provides=IResourceDirectory, name="persistent")\n \n-        resources = getZODBResources(TEST_FORMAT, filter=lambda dir: dir.__name__ != \'baz\')\n+        resources = getZODBResources(\n+            TEST_FORMAT, filter=lambda dir: dir.__name__ != "baz"\n+        )\n \n-        self.assertEqual(\n-                resources,\n-                {\'bar\': None}\n-            )\n+        self.assertEqual(resources, {"bar": None})\ndiff --git a/plone/resource/tests/test_traversal.py b/plone/resource/tests/test_traversal.py\nindex f8451d6..d1818b6 100644\n--- a/plone/resource/tests/test_traversal.py\n+++ b/plone/resource/tests/test_traversal.py\n@@ -16,14 +16,14 @@\n \n \n base_path = os.path.dirname(__file__)\n-test_dir_path = os.path.join(base_path, \'resources\')\n+test_dir_path = os.path.join(base_path, "resources")\n \n \n class TraversalTestCase(unittest.TestCase):\n     layer = DEMO_TRAVERSER_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer.get(\'app\')\n+        self.app = self.layer.get("app")\n         zca.pushGlobalRegistry()\n \n     def tearDown(self):\n@@ -31,85 +31,81 @@ def tearDown(self):\n \n     def test_traverse_packaged_type_specific_directory(self):\n         dire = FilesystemResourceDirectory(test_dir_path)\n-        provideUtility(dire, provides=IResourceDirectory, name=\'++demo++foo\')\n+        provideUtility(dire, provides=IResourceDirectory, name="++demo++foo")\n \n-        res = self.app.restrictedTraverse(\'++demo++foo\')\n-        self.assertTrue(res.directory.endswith(\'resources\'))\n+        res = self.app.restrictedTraverse("++demo++foo")\n+        self.assertTrue(res.directory.endswith("resources"))\n \n         self.assertRaises(\n             NotFound,\n             self.app.restrictedTraverse,\n-            \'++demo++asdf\',\n+            "++demo++asdf",\n         )\n \n     def test_traverse_packaged_type_specific_file(self):\n-        dire = FilesystemResourceDirectory(\n-            os.path.join(test_dir_path, \'demo\', \'foo\')\n-        )\n-        provideUtility(dire, provides=IResourceDirectory, name=\'++demo++foo\')\n+        dire = FilesystemResourceDirectory(os.path.join(test_dir_path, "demo", "foo"))\n+        provideUtility(dire, provides=IResourceDirectory, name="++demo++foo")\n \n-        res = self.app.restrictedTraverse(\'++demo++foo/test.html\')\n+        res = self.app.restrictedTraverse("++demo++foo/test.html")\n         self.assertTrue(isinstance(res, FilesystemFile))\n \n     def test_traverse_global_directory(self):\n         dire = FilesystemResourceDirectory(test_dir_path)\n-        provideUtility(dire, provides=IResourceDirectory, name=\'\')\n+        provideUtility(dire, provides=IResourceDirectory, name="")\n \n-        res = self.app.restrictedTraverse(\'++demo++foo\')\n-        self.assertTrue(res.directory.endswith(\'resources/demo/foo\'))\n+        res = self.app.restrictedTraverse("++demo++foo")\n+        self.assertTrue(res.directory.endswith("resources/demo/foo"))\n \n-        self.assertRaises(NotFound, self.app.restrictedTraverse, \'++demo++bar\')\n+        self.assertRaises(NotFound, self.app.restrictedTraverse, "++demo++bar")\n \n     def test_traverse_persistent_directory(self):\n-        root = BTreeFolder2(\'portal_resources\')\n-        self.app._setOb(\'portal_resources\', root)\n-        root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n-        root.demo._setOb(\'foo\', BTreeFolder2(\'foo\'))\n+        root = BTreeFolder2("portal_resources")\n+        self.app._setOb("portal_resources", root)\n+        root._setOb("demo", BTreeFolder2("demo"))\n+        root.demo._setOb("foo", BTreeFolder2("foo"))\n \n         dire = PersistentResourceDirectory(root)\n-        provideUtility(dire, provides=IResourceDirectory, name=\'persistent\')\n+        provideUtility(dire, provides=IResourceDirectory, name="persistent")\n \n-        res = self.app.restrictedTraverse(\'++demo++foo\')\n+        res = self.app.restrictedTraverse("++demo++foo")\n         self.assertEqual(\n-            \'portal_resources/demo/foo\', \'/\'.join(\n+            "portal_resources/demo/foo",\n+            "/".join(\n                 res.context.getPhysicalPath(),\n             ),\n         )\n \n-        self.assertRaises(NotFound, self.app.restrictedTraverse, \'++demo++bar\')\n+        self.assertRaises(NotFound, self.app.restrictedTraverse, "++demo++bar")\n \n     def test_publish_resource(self):\n         dire = FilesystemResourceDirectory(test_dir_path)\n-        provideUtility(dire, provides=IResourceDirectory, name=\'\')\n+        provideUtility(dire, provides=IResourceDirectory, name="")\n \n         browser = zope.Browser(self.app)\n         browser.handleErrors = False\n \n-        browser.open(self.app.absolute_url() + \'/++demo++foo/test.html\')\n-        self.assertEqual(\'asdf\', browser.contents)\n+        browser.open(self.app.absolute_url() + "/++demo++foo/test.html")\n+        self.assertEqual("asdf", browser.contents)\n \n     def test_traverse_unique_resource_marks_request(self):\n         dire = FilesystemResourceDirectory(test_dir_path)\n-        provideUtility(dire, provides=IResourceDirectory, name=\'\')\n+        provideUtility(dire, provides=IResourceDirectory, name="")\n \n-        self.app.restrictedTraverse(\n-            \'++demo++foo/++unique++bar/test.html\'\n-        )\n+        self.app.restrictedTraverse("++demo++foo/++unique++bar/test.html")\n         self.assertTrue(IUniqueResourceRequest.providedBy(self.app.REQUEST))\n \n     def test_publish_unique_resource(self):\n         dire = FilesystemResourceDirectory(test_dir_path)\n-        provideUtility(dire, provides=IResourceDirectory, name=\'\')\n+        provideUtility(dire, provides=IResourceDirectory, name="")\n \n         browser = zope.Browser(self.app)\n         browser.handleErrors = False\n \n-        browser.open(\n-            self.app.absolute_url() + \'/++demo++foo/++unique++bar/test.html\'\n-        )\n-        self.assertEqual(\'asdf\', browser.contents)\n+        browser.open(self.app.absolute_url() + "/++demo++foo/++unique++bar/test.html")\n+        self.assertEqual("asdf", browser.contents)\n \n     def test_forbidden_resource_path_traversal(self):\n         resource_directory = FilesystemResourceDirectory(test_dir_path)\n-        self.assertRaises(Forbidden, resource_directory._resolveSubpath,\n-                          \'../../../../setup.py\')\n+        self.assertRaises(\n+            Forbidden, resource_directory._resolveSubpath, "../../../../setup.py"\n+        )\ndiff --git a/plone/resource/tests/test_utils.py b/plone/resource/tests/test_utils.py\nindex e8404be..57ccfb0 100644\n--- a/plone/resource/tests/test_utils.py\n+++ b/plone/resource/tests/test_utils.py\n@@ -11,55 +11,60 @@\n \n \n base_path = os.path.dirname(__file__)\n-test_dir_path = os.path.join(base_path, \'resources\')\n+test_dir_path = os.path.join(base_path, "resources")\n \n \n class TraversalTestCase(unittest.TestCase):\n     layer = DEMO_TRAVERSER_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer.get(\'app\')\n+        self.app = self.layer.get("app")\n         zca.pushGlobalRegistry()\n \n         # set up all three types of directory\n-        package_dir_path = os.path.join(test_dir_path, \'demo\', \'foo\')\n+        package_dir_path = os.path.join(test_dir_path, "demo", "foo")\n         self.package_dir = dir = FilesystemResourceDirectory(package_dir_path)\n-        provideUtility(dir, provides=IResourceDirectory, name=\'++demo++foo\')\n+        provideUtility(dir, provides=IResourceDirectory, name="++demo++foo")\n \n         self.global_dir = dir = FilesystemResourceDirectory(test_dir_path)\n-        provideUtility(dir, provides=IResourceDirectory, name=\'\')\n+        provideUtility(dir, provides=IResourceDirectory, name="")\n \n-        root = BTreeFolder2(\'portal_resources\')\n-        self.app._setOb(\'portal_resources\', root)\n-        root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n-        root.demo._setOb(\'foo\', BTreeFolder2(\'foo\'))\n+        root = BTreeFolder2("portal_resources")\n+        self.app._setOb("portal_resources", root)\n+        root._setOb("demo", BTreeFolder2("demo"))\n+        root.demo._setOb("foo", BTreeFolder2("foo"))\n         self.zodb_dir = dir = PersistentResourceDirectory(root)\n-        provideUtility(dir, provides=IResourceDirectory, name=\'persistent\')\n+        provideUtility(dir, provides=IResourceDirectory, name="persistent")\n \n         # We don\'t want a false positive for the following.\n-        provideUtility(dir, provides=IResourceDirectory, name=\'++bogus++foo\')\n+        provideUtility(dir, provides=IResourceDirectory, name="++bogus++foo")\n \n     def tearDown(self):\n         zca.popGlobalRegistry()\n \n     def test_iterDirectoriesOfType(self):\n         from plone.resource.utils import iterDirectoriesOfType\n-        dirs = list(iterDirectoriesOfType(\'demo\'))\n+\n+        dirs = list(iterDirectoriesOfType("demo"))\n         self.assertEqual(2, len(dirs))\n-        self.assertTrue(dirs[0].context.aq_base is\n-                        self.zodb_dir[\'demo\'][\'foo\'].context.aq_base)\n-        self.assertTrue(dirs[1].directory ==\n-                        self.global_dir[\'demo\'][\'manifest-test\'].directory)\n+        self.assertTrue(\n+            dirs[0].context.aq_base is self.zodb_dir["demo"]["foo"].context.aq_base\n+        )\n+        self.assertTrue(\n+            dirs[1].directory == self.global_dir["demo"]["manifest-test"].directory\n+        )\n \n     def test_iterDirectoriesOfType_dont_filter_duplicates(self):\n         from plone.resource.utils import iterDirectoriesOfType\n-        dirs = list(iterDirectoriesOfType(\'demo\', filter_duplicates=False))\n+\n+        dirs = list(iterDirectoriesOfType("demo", filter_duplicates=False))\n         self.assertEqual(4, len(dirs))\n-        self.assertTrue(dirs[0].context.aq_base is\n-                        self.zodb_dir[\'demo\'][\'foo\'].context.aq_base)\n+        self.assertTrue(\n+            dirs[0].context.aq_base is self.zodb_dir["demo"]["foo"].context.aq_base\n+        )\n         unordered_entries = [\n-            self.global_dir[\'demo\'][\'foo\'].directory,\n-            self.global_dir[\'demo\'][\'manifest-test\'].directory\n+            self.global_dir["demo"]["foo"].directory,\n+            self.global_dir["demo"]["manifest-test"].directory,\n         ]\n         self.assertIn(dirs[1].directory, unordered_entries)\n         self.assertIn(dirs[2].directory, unordered_entries)\n@@ -70,22 +75,28 @@ def test_cloneDirectory(self):\n         from plone.resource.directory import PersistentResourceDirectory\n         from plone.resource.utils import cloneResourceDirectory\n \n-        root = BTreeFolder2(\'portal_resources\')\n-        root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n-        root[\'demo\']._setOb(\'foo\', BTreeFolder2(\'foo\'))\n-        root[\'demo\']._setOb(\'bar\', BTreeFolder2(\'bar\'))\n+        root = BTreeFolder2("portal_resources")\n+        root._setOb("demo", BTreeFolder2("demo"))\n+        root["demo"]._setOb("foo", BTreeFolder2("foo"))\n+        root["demo"]._setOb("bar", BTreeFolder2("bar"))\n \n-        source = PersistentResourceDirectory(root[\'demo\'][\'foo\'])\n-        target = PersistentResourceDirectory(root[\'demo\'][\'bar\'])\n+        source = PersistentResourceDirectory(root["demo"]["foo"])\n+        target = PersistentResourceDirectory(root["demo"]["bar"])\n \n-        source.writeFile(\'file1.txt\', b\'file1\')\n-        source.writeFile(\'subdir1/file2.txt\', b\'file2\')\n-        source.makeDirectory(\'subdir2\')\n+        source.writeFile("file1.txt", b"file1")\n+        source.writeFile("subdir1/file2.txt", b"file2")\n+        source.makeDirectory("subdir2")\n \n         cloneResourceDirectory(source, target)\n \n         self.assertEqual(source.listDirectory(), target.listDirectory())\n-        self.assertEqual(source[\'subdir1\'].listDirectory(), target[\'subdir1\'].listDirectory())\n-        self.assertEqual(source[\'subdir2\'].listDirectory(), target[\'subdir2\'].listDirectory())\n-        self.assertEqual(source.readFile(\'file1.txt\'), target.readFile(\'file1.txt\'))\n-        self.assertEqual(source.readFile(\'subdir1/file2.txt\'), target.readFile(\'subdir1/file2.txt\'))\n+        self.assertEqual(\n+            source["subdir1"].listDirectory(), target["subdir1"].listDirectory()\n+        )\n+        self.assertEqual(\n+            source["subdir2"].listDirectory(), target["subdir2"].listDirectory()\n+        )\n+        self.assertEqual(source.readFile("file1.txt"), target.readFile("file1.txt"))\n+        self.assertEqual(\n+            source.readFile("subdir1/file2.txt"), target.readFile("subdir1/file2.txt")\n+        )\ndiff --git a/plone/resource/tests/test_zcml.py b/plone/resource/tests/test_zcml.py\nindex 0d88588..1b7e561 100644\n--- a/plone/resource/tests/test_zcml.py\n+++ b/plone/resource/tests/test_zcml.py\n@@ -17,12 +17,13 @@ def clearZCML(test=None):\n     from zope.configuration.xmlconfig import XMLConfig\n \n     import zope.component\n+\n     tearDown()\n     setUp()\n-    XMLConfig(\'meta.zcml\', zope.component)()\n+    XMLConfig("meta.zcml", zope.component)()\n \n \n-def runSnippet(snippet, dist=\'plone.resource.tests\'):\n+def runSnippet(snippet, dist="plone.resource.tests"):\n     template = """\\\n     <configure xmlns="http://namespaces.zope.org/zope"\n                xmlns:plone="http://namespaces.plone.org/plone"\n@@ -30,83 +31,93 @@ def runSnippet(snippet, dist=\'plone.resource.tests\'):\n                %s>\n     %s\n     </configure>"""\n-    dist = \'package="%s"\' % dist if dist else \'\'\n+    dist = \'package="%s"\' % dist if dist else ""\n     xmlconfig(StringIO(template % (dist, snippet)))\n \n \n class ZCMLTestCase(unittest.TestCase):\n-\n     def setUp(self):\n         clearZCML()\n         import plone.resource\n-        XMLConfig(\'meta.zcml\', plone.resource)()\n+\n+        XMLConfig("meta.zcml", plone.resource)()\n \n     def tearDown(self):\n         tearDown()\n \n     def test_dist_with_name_and_type(self):\n-        runSnippet("""\n+        runSnippet(\n+            """\n         <plone:static\n           name="foo"\n           type="theme"\n           directory="resources"\n           />\n-        """)\n+        """\n+        )\n \n-        res = getUtility(IResourceDirectory, name=\'++theme++foo\')\n-        self.assertTrue(res.directory.endswith(os.path.join(\'plone\', \'resource\', \'tests\', \'resources\')))\n+        res = getUtility(IResourceDirectory, name="++theme++foo")\n+        self.assertTrue(\n+            res.directory.endswith(\n+                os.path.join("plone", "resource", "tests", "resources")\n+            )\n+        )\n \n     def test_dist_rejects_with_missing_type(self):\n         # resource directories in distributions must be registered with a type\n-        self.assertRaises(ConfigurationError,\n+        self.assertRaises(\n+            ConfigurationError,\n             runSnippet,\n             """<plone:static\n               name="foo"\n               directory="resources"\n-              />"""\n-            )\n+              />""",\n+        )\n \n     def test_dist_with_type_only(self):\n-        runSnippet("""\n+        runSnippet(\n+            """\n         <plone:static\n           type="theme"\n           directory="resources"\n           />\n-        """)\n+        """\n+        )\n \n-        getUtility(IResourceDirectory, name=\'++theme++plone.resource.tests\')\n+        getUtility(IResourceDirectory, name="++theme++plone.resource.tests")\n \n     def test_dist_rejects_absolute_directory(self):\n-        self.assertRaises(ConfigurationError,\n-            runSnippet,\n-            """<plone:static directory="/" />"""\n-            )\n+        self.assertRaises(\n+            ConfigurationError, runSnippet, """<plone:static directory="/" />"""\n+        )\n \n     def test_global(self):\n-        runSnippet("""\n+        runSnippet(\n+            """\n         <plone:static\n           directory="/"\n           />\n-        """, dist=None)\n+        """,\n+            dist=None,\n+        )\n \n         res = getUtility(IResourceDirectory)\n-        self.assertEqual(\'/\', res.directory)\n+        self.assertEqual("/", res.directory)\n \n     def test_global_rejects_relative_directory(self):\n-        self.assertRaises(ConfigurationError,\n+        self.assertRaises(\n+            ConfigurationError,\n             runSnippet,\n             """<plone:static directory="foobar" />""",\n-            dist=None\n-            )\n+            dist=None,\n+        )\n \n     def test_missing_directory(self):\n-        self.assertRaises(ConfigurationError,\n-            runSnippet,\n-            """<plone:static directory="foobar" />"""\n-            )\n+        self.assertRaises(\n+            ConfigurationError, runSnippet, """<plone:static directory="foobar" />"""\n+        )\n \n     def test_rejects_parent_directory_traversal(self):\n-        self.assertRaises(ConfigurationError,\n-            runSnippet,\n-            """<plone:static directory="../tests" />"""\n-            )\n+        self.assertRaises(\n+            ConfigurationError, runSnippet, """<plone:static directory="../tests" />"""\n+        )\ndiff --git a/plone/resource/tests/test_zip_download.py b/plone/resource/tests/test_zip_download.py\nindex 9364823..7076709 100644\n--- a/plone/resource/tests/test_zip_download.py\n+++ b/plone/resource/tests/test_zip_download.py\n@@ -14,75 +14,75 @@\n \n \n base_path = os.path.dirname(__file__)\n-test_dir_path = os.path.join(base_path, \'resources\')\n+test_dir_path = os.path.join(base_path, "resources")\n \n \n class ZipDownloadTestCase(unittest.TestCase):\n     layer = DEMO_TRAVERSER_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer.get(\'app\')\n+        self.app = self.layer.get("app")\n         zca.pushGlobalRegistry()\n \n     def tearDown(self):\n         zca.popGlobalRegistry()\n \n     def test_traverse_packaged_type_specific_directory(self):\n-        dir = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'foo\'))\n-        provideUtility(dir, provides=IResourceDirectory, name=\'++demo++foo\')\n+        dir = FilesystemResourceDirectory(os.path.join(test_dir_path, "demo", "foo"))\n+        provideUtility(dir, provides=IResourceDirectory, name="++demo++foo")\n \n         out = BytesIO()\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         response = request.response\n         response.stdout = out\n \n-        zipview = self.app.unrestrictedTraverse(\'++demo++foo/@@download-zip\')\n+        zipview = self.app.unrestrictedTraverse("++demo++foo/@@download-zip")\n         zipview()\n \n         zf = zipfile.ZipFile(out)\n \n-        self.assertTrue(\'foo/test.html\' in zf.namelist())\n-        self.assertEqual(b\'asdf\', zf.open(\'foo/test.html\').read())\n+        self.assertTrue("foo/test.html" in zf.namelist())\n+        self.assertEqual(b"asdf", zf.open("foo/test.html").read())\n \n     def test_traverse_global_directory(self):\n         dir = FilesystemResourceDirectory(test_dir_path)\n-        provideUtility(dir, provides=IResourceDirectory, name=\'\')\n+        provideUtility(dir, provides=IResourceDirectory, name="")\n \n         out = BytesIO()\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         response = request.response\n         response.stdout = out\n \n-        zipview = self.app.unrestrictedTraverse(\'++demo++foo/@@download-zip\')\n+        zipview = self.app.unrestrictedTraverse("++demo++foo/@@download-zip")\n         zipview()\n \n         zf = zipfile.ZipFile(out)\n \n-        self.assertTrue(\'foo/test.html\' in zf.namelist())\n-        self.assertEqual(b\'asdf\', zf.open(\'foo/test.html\').read())\n+        self.assertTrue("foo/test.html" in zf.namelist())\n+        self.assertEqual(b"asdf", zf.open("foo/test.html").read())\n \n     def test_traverse_persistent_directory(self):\n-        root = BTreeFolder2(\'portal_resources\')\n-        self.app._setOb(\'portal_resources\', root)\n-        root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n-        root[\'demo\']._setOb(\'foo\', BTreeFolder2(\'foo\'))\n-        root[\'demo\'][\'foo\']._setOb(\n-            \'test.html\',\n-            File(\'test.html\', \'test.html\', b\'asdf\'),\n+        root = BTreeFolder2("portal_resources")\n+        self.app._setOb("portal_resources", root)\n+        root._setOb("demo", BTreeFolder2("demo"))\n+        root["demo"]._setOb("foo", BTreeFolder2("foo"))\n+        root["demo"]["foo"]._setOb(\n+            "test.html",\n+            File("test.html", "test.html", b"asdf"),\n         )\n \n         dir = PersistentResourceDirectory(root)\n-        provideUtility(dir, provides=IResourceDirectory, name=\'persistent\')\n+        provideUtility(dir, provides=IResourceDirectory, name="persistent")\n \n         out = BytesIO()\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         response = request.response\n         response.stdout = out\n \n-        zipview = self.app.unrestrictedTraverse(\'++demo++foo/@@download-zip\')\n+        zipview = self.app.unrestrictedTraverse("++demo++foo/@@download-zip")\n         zipview()\n \n         zf = zipfile.ZipFile(out)\n \n-        self.assertTrue(\'foo/test.html\' in zf.namelist())\n-        self.assertEqual(b\'asdf\', zf.open(\'foo/test.html\').read())\n+        self.assertTrue("foo/test.html" in zf.namelist())\n+        self.assertEqual(b"asdf", zf.open("foo/test.html").read())\ndiff --git a/plone/resource/traversal.py b/plone/resource/traversal.py\nindex fac2731..75a83d7 100644\n--- a/plone/resource/traversal.py\n+++ b/plone/resource/traversal.py\n@@ -7,7 +7,6 @@\n \n \n class ResourceTraverser(SimpleHandler):\n-\n     name = None\n \n     def __init__(self, context, request=None):\ndiff --git a/plone/resource/utils.py b/plone/resource/utils.py\nindex 6475b8e..b861784 100644\n--- a/plone/resource/utils.py\n+++ b/plone/resource/utils.py\n@@ -22,7 +22,7 @@ def iterDirectoriesOfType(type, filter_duplicates=True):\n \n     # 1. Persistent resource directory:\n     #    List (persistent resource directory)/$type\n-    res = queryUtility(IResourceDirectory, name=\'persistent\')\n+    res = queryUtility(IResourceDirectory, name="persistent")\n     if res and res.isDirectory(type):\n         typedir = res[type]\n         for dirname in typedir.listDirectory():\n@@ -33,7 +33,7 @@ def iterDirectoriesOfType(type, filter_duplicates=True):\n \n     # 2. Global resource directory:\n     #    List (global resource directory)/$type\n-    res = queryUtility(IResourceDirectory, name=\'\')\n+    res = queryUtility(IResourceDirectory, name="")\n     if res and res.isDirectory(type):\n         typedir = res[type]\n         for dirname in typedir.listDirectory():\n@@ -45,7 +45,7 @@ def iterDirectoriesOfType(type, filter_duplicates=True):\n \n     # 3. Packaged resource directories:\n     #    Scan the registry\n-    identifier = \'++%s++\' % type\n+    identifier = "++%s++" % type\n     for name, u in getUtilitiesFor(IResourceDirectory):\n         if name.startswith(identifier):\n             if not filter_duplicates or u.__name__ not in found:\n@@ -59,25 +59,31 @@ def queryResourceDirectory(type, name):\n \n     # 1. Persistent resource directory:\n     #    Try (persistent resource directory)/$type/$name\n-    res = queryUtility(IResourceDirectory, name=\'persistent\')\n+    res = queryUtility(IResourceDirectory, name="persistent")\n     if res:\n         try:\n             return res[type][name]\n-        except (KeyError, NotFound,):\n+        except (\n+            KeyError,\n+            NotFound,\n+        ):\n             pass  # pragma: no cover\n \n     # 2. Global resource directory:\n     #    Try (global resource directory)/$type/$name\n-    res = queryUtility(IResourceDirectory, name=\'\')\n+    res = queryUtility(IResourceDirectory, name="")\n     if res:\n         try:\n             return res[type][name]\n-        except (KeyError, NotFound,):\n+        except (\n+            KeyError,\n+            NotFound,\n+        ):\n             pass  # pragma: no cover\n \n     # 3. Packaged type-specific resource directory:\n     #    Try (directory named after type + name)\n-    identifier = f\'++{type}++{name}\'\n+    identifier = f"++{type}++{name}"\n     res = queryUtility(IResourceDirectory, name=identifier)\n     if res is not None:\n         return res\n@@ -100,4 +106,3 @@ def cloneResourceDirectory(source, target):\n                 target.writeFile(name, f)\n             finally:\n                 f.close()\n-\ndiff --git a/plone/resource/zcml.py b/plone/resource/zcml.py\nindex 11b27bd..f408e33 100644\n--- a/plone/resource/zcml.py\n+++ b/plone/resource/zcml.py\n@@ -10,28 +10,27 @@\n \n \n class IResourceDirectoryDirective(Interface):\n-    """Register resource directories with the global registry.\n-    """\n+    """Register resource directories with the global registry."""\n \n     directory = TextLine(\n-        title=\'Directory path\',\n-        description=\'Path relative to the package.\',\n-        required=True\n-        )\n+        title="Directory path",\n+        description="Path relative to the package.",\n+        required=True,\n+    )\n \n     name = TextLine(\n-        title=\'Name\',\n-        description=\'Name of the directory. If not specified, the name of \'\n-                    \'the current package is used.\',\n+        title="Name",\n+        description="Name of the directory. If not specified, the name of "\n+        "the current package is used.",\n         required=False,\n-        )\n+    )\n \n     type = ASCIILine(\n-        title=\'Resource type\',\n+        title="Resource type",\n         # XXX use a Choice field + vocab\n         # vocabulary = \'plone.resource.vocab.ResourceTypes\',\n         required=False,\n-        )\n+    )\n \n \n def registerResourceDirectory(_context, directory, name=None, type=None):\n@@ -43,37 +42,43 @@ def registerResourceDirectory(_context, directory, name=None, type=None):\n     """\n \n     if _context.package and os.path.isabs(directory):\n-        raise ConfigurationError(\'Resource directories in distributions must \'\n-                                 \'be specified as relative paths.\')\n+        raise ConfigurationError(\n+            "Resource directories in distributions must "\n+            "be specified as relative paths."\n+        )\n     elif _context.package:\n         directory = _context.path(directory)\n     elif not _context.package and not os.path.isabs(directory):\n-        raise ConfigurationError(\'Global resource directories must be \'\n-                                 \'specified as absolute paths.\')\n+        raise ConfigurationError(\n+            "Global resource directories must be " "specified as absolute paths."\n+        )\n \n     # TODO: make sure this works in Windows\n-    if \'..\' in directory.split(\'/\'):\n-        raise ConfigurationError(\'Traversing to parent directories \'\n-                                 \'via .. is not allowed.\')\n+    if ".." in directory.split("/"):\n+        raise ConfigurationError(\n+            "Traversing to parent directories " "via .. is not allowed."\n+        )\n     if not os.path.exists(directory):\n-        raise OSError(\'Directory not found: %s\' % directory)\n+        raise OSError("Directory not found: %s" % directory)\n \n     if name is None and _context.package:\n         name = _context.package.__name__\n \n     if type:\n-        identifier = \'++{}++{}\'.format(type, name or \'\')\n+        identifier = "++{}++{}".format(type, name or "")\n     else:\n         if _context.package:\n-            raise ConfigurationError(\'Resource directories in distributions \'\n-                                     \'must have a specified resource type.\')\n-        identifier = name or \'\'\n+            raise ConfigurationError(\n+                "Resource directories in distributions "\n+                "must have a specified resource type."\n+            )\n+        identifier = name or ""\n \n-    directory = os.path.sep.join(directory.split(\'/\'))\n+    directory = os.path.sep.join(directory.split("/"))\n     directory = FilesystemResourceDirectory(directory, name)\n \n     _context.action(\n-        discriminator=(\'plone:static\', identifier),\n+        discriminator=("plone:static", identifier),\n         callable=handler,\n-        args=(\'registerUtility\', directory, IResourceDirectory, identifier),\n-        )\n+        args=("registerUtility", directory, IResourceDirectory, identifier),\n+    )\ndiff --git a/setup.py b/setup.py\nindex 76d8227..eb90a14 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,21 +2,17 @@\n from setuptools import setup\n \n \n-version = \'2.1.5.dev0\'\n+version = "2.1.5.dev0"\n \n test_requires = [\n-    \'plone.app.testing\',\n+    "plone.app.testing",\n ]\n \n setup(\n-    name=\'plone.resource\',\n+    name="plone.resource",\n     version=version,\n     description="Static files for Plone",\n-    long_description=(\n-        open("README.rst").read() +\n-        "\\n" +\n-        open("CHANGES.rst").read()\n-    ),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n@@ -29,32 +25,32 @@\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n     ],\n-    keywords=\'plone resource\',\n-    author=\'David Glick, Plone Foundation\',\n-    author_email=\'davidglick@groundwire.org\',\n-    url=\'https://pypi.org/project/plone.resource\',\n-    license=\'GPL version 2 or later\',\n+    keywords="plone resource",\n+    author="David Glick, Plone Foundation",\n+    author_email="davidglick@groundwire.org",\n+    url="https://pypi.org/project/plone.resource",\n+    license="GPL version 2 or later",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'plone.caching\',\n-        \'python-dateutil\',\n-        \'setuptools\',\n-        \'z3c.caching\',\n-        \'zope.component\',\n-        \'zope.configuration\',\n-        \'zope.filerepresentation\',\n-        \'zope.interface\',\n-        \'zope.publisher\',\n-        \'zope.schema\',\n-        \'zope.traversing\',\n-        \'Zope2\',\n-        \'six\',\n+        "plone.caching",\n+        "python-dateutil",\n+        "setuptools",\n+        "z3c.caching",\n+        "zope.component",\n+        "zope.configuration",\n+        "zope.filerepresentation",\n+        "zope.interface",\n+        "zope.publisher",\n+        "zope.schema",\n+        "zope.traversing",\n+        "Zope2",\n+        "six",\n     ],\n     extras_require={\n-        \'test\': test_requires,\n+        "test": test_requires,\n     },\n     entry_points="""\n     [z3c.autoinclude.plugin]\n'

Repository: plone.resource


Branch: refs/heads/master
Date: 2023-04-25T00:59:05+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.resource/commit/f77e6d049f04591bd8417e4bf8ce771fc95fc917

chore: pyupgrade

Files changed:
M plone/resource/manifest.py

b'diff --git a/plone/resource/manifest.py b/plone/resource/manifest.py\nindex 4511112..7219334 100644\n--- a/plone/resource/manifest.py\n+++ b/plone/resource/manifest.py\n@@ -211,9 +211,7 @@ def getAllResources(\n             try:\n                 resources[name] = getManifest(manifest, format, defaults)\n             except:\n-                LOGGER.exception(\n-                    "Unable to read manifest for theme directory {}".format(name)\n-                )\n+                LOGGER.exception(f"Unable to read manifest for theme directory {name}")\n             finally:\n                 manifest.close()\n \n'

Repository: plone.resource


Branch: refs/heads/master
Date: 2023-04-25T00:59:05+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.resource/commit/d3d8949fdc885b71684e1e76aeb74d9128c657f0

chore: zpretty ZCML/XML

Files changed:
M plone/resource/browser.zcml
M plone/resource/caching.zcml
M plone/resource/configure.zcml
M plone/resource/file.zcml
M plone/resource/meta.zcml
M plone/resource/permissions.zcml
M plone/resource/profiles.zcml
M plone/resource/profiles/default/componentregistry.xml
M plone/resource/profiles/default/metadata.xml
M plone/resource/profiles/default/rolemap.xml
M plone/resource/profiles/default/toolset.xml
M plone/resource/testing.zcml

b'diff --git a/plone/resource/browser.zcml b/plone/resource/browser.zcml\nindex 7ae9c7f..9536bfe 100644\n--- a/plone/resource/browser.zcml\n+++ b/plone/resource/browser.zcml\n@@ -1,21 +1,23 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n   <browser:view\n       name="download-zip"\n       for=".interfaces.IResourceDirectory"\n-      permission="plone.resource.ExportZip"\n       class=".download.DownloadView"\n+      permission="plone.resource.ExportZip"\n       />\n \n   <!-- Unique traverser -->\n   <adapter\n-      name="unique"\n-      for=".interfaces.IResourceDirectory zope.publisher.interfaces.IRequest"\n-      provides="zope.traversing.interfaces.ITraversable"\n       factory=".traversal.UniqueResourceTraverser"\n+      provides="zope.traversing.interfaces.ITraversable"\n+      for=".interfaces.IResourceDirectory\n+           zope.publisher.interfaces.IRequest"\n+      name="unique"\n       />\n \n </configure>\ndiff --git a/plone/resource/caching.zcml b/plone/resource/caching.zcml\nindex 2a31997..73d354e 100644\n--- a/plone/resource/caching.zcml\n+++ b/plone/resource/caching.zcml\n@@ -1,17 +1,21 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:cache="http://namespaces.zope.org/cache"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n-    <include package="z3c.caching" />\n-    <include package="z3c.caching" file="meta.zcml" />\n+  <include package="z3c.caching" />\n+  <include\n+      package="z3c.caching"\n+      file="meta.zcml"\n+      />\n \n-    <cache:ruleset\n-        for=".file.FilesystemFile"\n-        ruleset="plone.resource"\n-        />\n+  <cache:ruleset\n+      for=".file.FilesystemFile"\n+      ruleset="plone.resource"\n+      />\n \n-    <!-- Unique resource ruleset lookup -->\n-    <adapter factory=".caching.UniqueResourceLookup" />\n+  <!-- Unique resource ruleset lookup -->\n+  <adapter factory=".caching.UniqueResourceLookup" />\n \n </configure>\ndiff --git a/plone/resource/configure.zcml b/plone/resource/configure.zcml\nindex 4a1f254..90e9b2a 100644\n--- a/plone/resource/configure.zcml\n+++ b/plone/resource/configure.zcml\n@@ -1,6 +1,7 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n   <include file="meta.zcml" />\n   <include file="permissions.zcml" />\ndiff --git a/plone/resource/file.zcml b/plone/resource/file.zcml\nindex e45e0dc..069ae0f 100644\n--- a/plone/resource/file.zcml\n+++ b/plone/resource/file.zcml\n@@ -1,8 +1,9 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n-    <adapter factory=".file.rawReadFile" />\n-    <adapter factory=".file.FileLastModified" />\n+  <adapter factory=".file.rawReadFile" />\n+  <adapter factory=".file.FileLastModified" />\n \n </configure>\ndiff --git a/plone/resource/meta.zcml b/plone/resource/meta.zcml\nindex 8b79e33..44b1fbc 100644\n--- a/plone/resource/meta.zcml\n+++ b/plone/resource/meta.zcml\n@@ -1,12 +1,13 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:meta="http://namespaces.zope.org/meta">\n+    xmlns:meta="http://namespaces.zope.org/meta"\n+    >\n \n-    <meta:directive\n-        name="static"\n-        namespace="http://namespaces.plone.org/plone"\n-        schema=".zcml.IResourceDirectoryDirective"\n-        handler=".zcml.registerResourceDirectory"\n-        />\n+  <meta:directive\n+      name="static"\n+      handler=".zcml.registerResourceDirectory"\n+      namespace="http://namespaces.plone.org/plone"\n+      schema=".zcml.IResourceDirectoryDirective"\n+      />\n \n </configure>\ndiff --git a/plone/resource/permissions.zcml b/plone/resource/permissions.zcml\nindex c5b3135..b60420a 100644\n--- a/plone/resource/permissions.zcml\n+++ b/plone/resource/permissions.zcml\n@@ -1,6 +1,7 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n   <permission\n       id="plone.resource.ExportZip"\ndiff --git a/plone/resource/profiles.zcml b/plone/resource/profiles.zcml\nindex 19eceb4..e0e92e9 100644\n--- a/plone/resource/profiles.zcml\n+++ b/plone/resource/profiles.zcml\n@@ -1,16 +1,17 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:gs="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n \n   <gs:registerProfile\n       name="default"\n-      directory="profiles/default"\n       title="Static resource storage"\n       description="A folder for storing and serving static resource files"\n-      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      directory="profiles/default"\n       />\n \n-</configure>\n\\ No newline at end of file\n+</configure>\ndiff --git a/plone/resource/profiles/default/componentregistry.xml b/plone/resource/profiles/default/componentregistry.xml\nindex 502ec44..156e9b4 100644\n--- a/plone/resource/profiles/default/componentregistry.xml\n+++ b/plone/resource/profiles/default/componentregistry.xml\n@@ -1,11 +1,10 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <componentregistry>\n-    <adapters/>\n-    <utilities>\n-        <utility\n-            interface="plone.resource.interfaces.IResourceDirectory"\n-            factory="plone.resource.directory.PersistentResourceDirectory"\n-            name="persistent"\n-            />\n-    </utilities>\n+  <adapters />\n+  <utilities>\n+    <utility factory="plone.resource.directory.PersistentResourceDirectory"\n+             interface="plone.resource.interfaces.IResourceDirectory"\n+             name="persistent"\n+    />\n+  </utilities>\n </componentregistry>\ndiff --git a/plone/resource/profiles/default/metadata.xml b/plone/resource/profiles/default/metadata.xml\nindex 7f28c91..08b37b6 100644\n--- a/plone/resource/profiles/default/metadata.xml\n+++ b/plone/resource/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n-    <version>1</version>\n+  <version>1</version>\n </metadata>\ndiff --git a/plone/resource/profiles/default/rolemap.xml b/plone/resource/profiles/default/rolemap.xml\nindex 37aebb8..e18857b 100644\n--- a/plone/resource/profiles/default/rolemap.xml\n+++ b/plone/resource/profiles/default/rolemap.xml\n@@ -1,7 +1,10 @@\n+<?xml version="1.0" encoding="utf-8"?>\n <rolemap>\n-    <permissions>\n-        <permission name="plone.resource: Export ZIP file" acquire="False">\n-            <role name="Manager" />\n-        </permission>\n-    </permissions>\n-</rolemap>\n\\ No newline at end of file\n+  <permissions>\n+    <permission acquire="False"\n+                name="plone.resource: Export ZIP file"\n+    >\n+      <role name="Manager" />\n+    </permission>\n+  </permissions>\n+</rolemap>\ndiff --git a/plone/resource/profiles/default/toolset.xml b/plone/resource/profiles/default/toolset.xml\nindex c1c47ed..f03476d 100644\n--- a/plone/resource/profiles/default/toolset.xml\n+++ b/plone/resource/profiles/default/toolset.xml\n@@ -1,7 +1,6 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <tool-setup>\n-    <required\n-        tool_id="portal_resources"\n-        class="Products.BTreeFolder2.BTreeFolder2.BTreeFolder2"\n-        />\n+  <required class="Products.BTreeFolder2.BTreeFolder2.BTreeFolder2"\n+            tool_id="portal_resources"\n+  />\n </tool-setup>\ndiff --git a/plone/resource/testing.zcml b/plone/resource/testing.zcml\nindex babfad2..ad73a51 100644\n--- a/plone/resource/testing.zcml\n+++ b/plone/resource/testing.zcml\n@@ -1,16 +1,18 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n   <include file="permissions.zcml" />\n   <include file="browser.zcml" />\n \n   <!-- demo traverser -->\n   <adapter\n-      name="demo"\n-      for="* zope.publisher.interfaces.IRequest"\n-      provides="zope.traversing.interfaces.ITraversable"\n       factory=".testing.DemoTraverser"\n+      provides="zope.traversing.interfaces.ITraversable"\n+      for="*\n+           zope.publisher.interfaces.IRequest"\n+      name="demo"\n       />\n \n </configure>\n'

Repository: plone.resource


Branch: refs/heads/master
Date: 2023-04-25T00:59:05+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.resource/commit/aa1b372863a4ac900a4ca5cc7aabc69002cf6fa8

chore: update trove classifiers

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex eb90a14..50e98fe 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -16,14 +16,15 @@\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n+        "Framework :: Zope :: 5",\n         "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n     ],\n     keywords="plone resource",\n     author="David Glick, Plone Foundation",\n'

Repository: plone.resource


Branch: refs/heads/master
Date: 2023-04-25T00:59:05+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.resource/commit/81dbee802bf74fc872d67538f61addfa6af5cc35

feat: pyroma

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 50e98fe..4566f63 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -35,6 +35,7 @@\n     namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=[\n         "plone.caching",\n         "python-dateutil",\n'

Repository: plone.resource


Branch: refs/heads/master
Date: 2023-04-25T00:59:05+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.resource/commit/41ee5d39571410792b9876ed8f1ed840616937e2

fix: codespell

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 15930c7..9aa0c18 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -114,12 +114,12 @@ New features:\n \n New features:\n \n-- Use ``mimetypes_registry`` utility to dertermine mimetype if available.\n+- Use ``mimetypes_registry`` utility to determine mimetype if available.\n   [jensens]\n \n Bug fixes:\n \n-- Remove duplicte import\n+- Remove duplicate import\n   [jensens]\n \n - Add coding headers on python files.\n'

Repository: plone.resource


Branch: refs/heads/master
Date: 2023-04-25T00:59:06+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.resource/commit/870a8d96852e1c8252631340f989a8a3dac07f00

feat: flake8

Files changed:
M plone/resource/directory.py
M plone/resource/manifest.py
M plone/resource/tests/test_directory.py
M plone/resource/tests/test_file.py

b'diff --git a/plone/resource/directory.py b/plone/resource/directory.py\nindex 24e69b3..e233230 100644\n--- a/plone/resource/directory.py\n+++ b/plone/resource/directory.py\n@@ -107,7 +107,7 @@ def listDirectory(self):\n     def isDirectory(self, path):\n         try:\n             obj = self.context.unrestrictedTraverse(path)\n-        except:\n+        except Exception:\n             obj = None\n \n         return IObjectManager.providedBy(obj)\n@@ -115,7 +115,7 @@ def isDirectory(self, path):\n     def isFile(self, path):\n         try:\n             obj = self.context.unrestrictedTraverse(path)\n-        except:\n+        except Exception:\n             obj = None\n \n         return isinstance(obj, File)\ndiff --git a/plone/resource/manifest.py b/plone/resource/manifest.py\nindex 7219334..d18ae69 100644\n--- a/plone/resource/manifest.py\n+++ b/plone/resource/manifest.py\n@@ -33,7 +33,6 @@\n from zope.component import getUtility\n \n import logging\n-import six\n \n \n try:\n@@ -210,7 +209,7 @@ def getAllResources(\n             manifest = directory.openFile(manifestFilename)\n             try:\n                 resources[name] = getManifest(manifest, format, defaults)\n-            except:\n+            except Exception:\n                 LOGGER.exception(f"Unable to read manifest for theme directory {name}")\n             finally:\n                 manifest.close()\n@@ -257,7 +256,7 @@ def getZODBResources(\n             manifest = resourceDir.openFile(MANIFEST_FILENAME)\n             try:\n                 resources[name] = getManifest(manifest, format, defaults)\n-            except:\n+            except Exception:\n                 LOGGER.exception(\n                     "Unable to read manifest for {} directory {}".format(\n                         manifest.resourceType, name\ndiff --git a/plone/resource/tests/test_directory.py b/plone/resource/tests/test_directory.py\nindex 1ed0c66..2d32f4b 100644\n--- a/plone/resource/tests/test_directory.py\n+++ b/plone/resource/tests/test_directory.py\n@@ -9,7 +9,6 @@\n from plone.resource.interfaces import IPloneResourceModifiedEvent\n from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2\n from zExceptions import NotFound\n-from zipfile import ZipFile\n from zope.component import adapter\n from zope.component import provideHandler\n from zope.site.testing import createSiteManager\ndiff --git a/plone/resource/tests/test_file.py b/plone/resource/tests/test_file.py\nindex f41297f..d1c7f0f 100644\n--- a/plone/resource/tests/test_file.py\n+++ b/plone/resource/tests/test_file.py\n@@ -12,7 +12,6 @@\n import datetime\n import io\n import os.path\n-import six\n import unittest\n \n \n'

Repository: plone.resource


Branch: refs/heads/master
Date: 2023-04-25T00:59:06+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.resource/commit/8772e312f2ab2d7b17332be9b25528895d49b4f6

fix: drop a python 2 import fallback

Files changed:
M plone/resource/manifest.py

b'diff --git a/plone/resource/manifest.py b/plone/resource/manifest.py\nindex d18ae69..0881961 100644\n--- a/plone/resource/manifest.py\n+++ b/plone/resource/manifest.py\n@@ -27,6 +27,7 @@\n ``bar``. ``title`` and ``description`` will be ``None`` if not found in the\n manifest. ``bar`` will be ``baz`` if not found.\n """\n+from configparser import ConfigParser\n from plone.resource.directory import FILTERS\n from plone.resource.interfaces import IResourceDirectory\n from plone.resource.utils import iterDirectoriesOfType\n@@ -35,16 +36,6 @@\n import logging\n \n \n-try:\n-    # On Python 2 we must have the SafeConfigParser\n-    from ConfigParser import SafeConfigParser as ConfigParser\n-except ImportError:\n-    # On Python 3 we want the standard ConfigParser,\n-    # to avoid a deprecation warning.\n-    # Note that on Python 2 configparser can come from a backport.\n-    from configparser import ConfigParser\n-\n-\n MANIFEST_FILENAME = "manifest.cfg"\n \n LOGGER = logging.getLogger("plone.resource.manifest")\n'

Repository: plone.resource


Branch: refs/heads/master
Date: 2023-04-25T00:59:06+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.resource/commit/090d4b95a44056ea9e37098963887c5efc04c987

feat: drop six usage

Files changed:
M plone/resource/directory.py
M plone/resource/traversal.py

b'diff --git a/plone/resource/directory.py b/plone/resource/directory.py\nindex e233230..f4f8953 100644\n--- a/plone/resource/directory.py\n+++ b/plone/resource/directory.py\n@@ -15,9 +15,9 @@\n from zope.event import notify\n from zope.interface import implementer\n \n+import io\n import os.path\n import re\n-import six\n import zipfile\n \n \n@@ -49,9 +49,6 @@ def __repr__(self):\n         )\n \n     def publishTraverse(self, request, name):\n-        if six.PY2 and isinstance(name, str):\n-            name = name.encode("utf-8")\n-\n         context = self.context\n         if aq_parent(context) is None:\n             # Re-supply the acquisition chain if this is the root resource\n@@ -71,9 +68,6 @@ def __getitem__(self, name):\n         return self.publishTraverse(None, name)\n \n     def __setitem__(self, name, item):\n-        if six.PY2 and isinstance(name, str):\n-            name = name.encode("utf-8")\n-\n         if IResourceDirectory.providedBy(item):\n             item = item.context\n         self.context[name] = item\n@@ -86,7 +80,7 @@ def __contains__(self, name):\n         return name in self.context\n \n     def openFile(self, path):\n-        return six.BytesIO(self.readFile(path))\n+        return io.BytesIO(self.readFile(path))\n \n     def readFile(self, path):\n         try:\n@@ -143,9 +137,6 @@ def write(dir, prefix, zf):\n         zf.close()\n \n     def makeDirectory(self, path):\n-        if six.PY2:\n-            path = path.encode("utf-8")\n-\n         parent = self.context\n         names = path.strip("/").split("/")\n         for name in names:\n@@ -221,8 +212,6 @@ def __repr__(self):\n         return f"<{self.__class__.__name__} object at {self.__name__}>"\n \n     def __bytes__(self):\n-        if six.PY2:\n-            return repr(self)\n         return repr(self).encode()\n \n     def _resolveSubpath(self, path):\ndiff --git a/plone/resource/traversal.py b/plone/resource/traversal.py\nindex 75a83d7..611bde1 100644\n--- a/plone/resource/traversal.py\n+++ b/plone/resource/traversal.py\n@@ -1,10 +1,11 @@\n from plone.resource.interfaces import IUniqueResourceRequest\n from plone.resource.utils import queryResourceDirectory\n-from six.moves import urllib\n from zExceptions import NotFound\n from zope.interface import alsoProvides\n from zope.traversing.namespace import SimpleHandler\n \n+import urllib\n+\n \n class ResourceTraverser(SimpleHandler):\n     name = None\n'

Repository: plone.resource


Branch: refs/heads/master
Date: 2023-04-25T00:59:06+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.resource/commit/041929930849d4c3900b3a3b5a8ca39c2cd93b5d

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 4566f63..1a4aa80 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -6,6 +6,7 @@\n \n test_requires = [\n     "plone.app.testing",\n+    "plone.testing",\n ]\n \n setup(\n@@ -41,15 +42,10 @@\n         "python-dateutil",\n         "setuptools",\n         "z3c.caching",\n-        "zope.component",\n-        "zope.configuration",\n-        "zope.filerepresentation",\n-        "zope.interface",\n-        "zope.publisher",\n-        "zope.schema",\n-        "zope.traversing",\n-        "Zope2",\n-        "six",\n+        "Zope",\n+        "Products.BTreeFolder2",\n+        "Products.CMFCore",\n+        "Products.GenericSetup",\n     ],\n     extras_require={\n         "test": test_requires,\n'

Repository: plone.resource


Branch: refs/heads/master
Date: 2023-04-25T00:59:06+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.resource/commit/da86e03462cd3136ac196cb244352fbaa7b8c18b

chore: bump version

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 1a4aa80..1b535b4 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n \n \n-version = "2.1.5.dev0"\n+version = "3.0.0.dev0"\n \n test_requires = [\n     "plone.app.testing",\n'

Repository: plone.resource


Branch: refs/heads/master
Date: 2023-04-25T13:52:42+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.resource/commit/c17035ecda5b6970a8b7eceaddb815bdc09c7754

Merge pull request #33 from plone/config-with-default-template-2ded9702

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/2a4ba395.internal
A tox.ini
M CHANGES.rst
M plone/__init__.py
M plone/resource/__init__.py
M plone/resource/browser.zcml
M plone/resource/caching.py
M plone/resource/caching.zcml
M plone/resource/configure.zcml
M plone/resource/directory.py
M plone/resource/download.py
M plone/resource/events.py
M plone/resource/file.py
M plone/resource/file.zcml
M plone/resource/interfaces.py
M plone/resource/manifest.py
M plone/resource/meta.zcml
M plone/resource/permissions.zcml
M plone/resource/profiles.zcml
M plone/resource/profiles/default/componentregistry.xml
M plone/resource/profiles/default/metadata.xml
M plone/resource/profiles/default/rolemap.xml
M plone/resource/profiles/default/toolset.xml
M plone/resource/testing.py
M plone/resource/testing.zcml
M plone/resource/tests/test_directory.py
M plone/resource/tests/test_file.py
M plone/resource/tests/test_integration.py
M plone/resource/tests/test_manifest.py
M plone/resource/tests/test_traversal.py
M plone/resource/tests/test_utils.py
M plone/resource/tests/test_zcml.py
M plone/resource/tests/test_zip_download.py
M plone/resource/traversal.py
M plone/resource/utils.py
M plone/resource/zcml.py
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..99342b2\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "2a4ba395"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..a997365\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,43 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+        exclude: test.html\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 15930c7..9aa0c18 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -114,12 +114,12 @@ New features:\n \n New features:\n \n-- Use ``mimetypes_registry`` utility to dertermine mimetype if available.\n+- Use ``mimetypes_registry`` utility to determine mimetype if available.\n   [jensens]\n \n Bug fixes:\n \n-- Remove duplicte import\n+- Remove duplicate import\n   [jensens]\n \n - Add coding headers on python files.\ndiff --git a/news/2a4ba395.internal b/news/2a4ba395.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/2a4ba395.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/resource/__init__.py b/plone/resource/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/resource/__init__.py\n+++ b/plone/resource/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/resource/browser.zcml b/plone/resource/browser.zcml\nindex 7ae9c7f..9536bfe 100644\n--- a/plone/resource/browser.zcml\n+++ b/plone/resource/browser.zcml\n@@ -1,21 +1,23 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n   <browser:view\n       name="download-zip"\n       for=".interfaces.IResourceDirectory"\n-      permission="plone.resource.ExportZip"\n       class=".download.DownloadView"\n+      permission="plone.resource.ExportZip"\n       />\n \n   <!-- Unique traverser -->\n   <adapter\n-      name="unique"\n-      for=".interfaces.IResourceDirectory zope.publisher.interfaces.IRequest"\n-      provides="zope.traversing.interfaces.ITraversable"\n       factory=".traversal.UniqueResourceTraverser"\n+      provides="zope.traversing.interfaces.ITraversable"\n+      for=".interfaces.IResourceDirectory\n+           zope.publisher.interfaces.IRequest"\n+      name="unique"\n       />\n \n </configure>\ndiff --git a/plone/resource/caching.py b/plone/resource/caching.py\nindex 2cf9182..cc040cd 100644\n--- a/plone/resource/caching.py\n+++ b/plone/resource/caching.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.caching.interfaces import IRulesetLookup\n from plone.resource.interfaces import IUniqueResourceRequest\n from zope.component import adapter\n@@ -8,7 +7,7 @@\n \n @implementer(IRulesetLookup)\n @adapter(Interface, IUniqueResourceRequest)\n-class UniqueResourceLookup(object):\n+class UniqueResourceLookup:\n     """Unique resource ruleset lookup.\n \n     Returns \'plone.stableResource\' for requests marked with\n@@ -19,4 +18,4 @@ def __init__(self, published, request):\n         pass\n \n     def __call__(self):\n-        return \'plone.stableResource\'\n+        return "plone.stableResource"\ndiff --git a/plone/resource/caching.zcml b/plone/resource/caching.zcml\nindex 2a31997..73d354e 100644\n--- a/plone/resource/caching.zcml\n+++ b/plone/resource/caching.zcml\n@@ -1,17 +1,21 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:cache="http://namespaces.zope.org/cache"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n-    <include package="z3c.caching" />\n-    <include package="z3c.caching" file="meta.zcml" />\n+  <include package="z3c.caching" />\n+  <include\n+      package="z3c.caching"\n+      file="meta.zcml"\n+      />\n \n-    <cache:ruleset\n-        for=".file.FilesystemFile"\n-        ruleset="plone.resource"\n-        />\n+  <cache:ruleset\n+      for=".file.FilesystemFile"\n+      ruleset="plone.resource"\n+      />\n \n-    <!-- Unique resource ruleset lookup -->\n-    <adapter factory=".caching.UniqueResourceLookup" />\n+  <!-- Unique resource ruleset lookup -->\n+  <adapter factory=".caching.UniqueResourceLookup" />\n \n </configure>\ndiff --git a/plone/resource/configure.zcml b/plone/resource/configure.zcml\nindex 4a1f254..90e9b2a 100644\n--- a/plone/resource/configure.zcml\n+++ b/plone/resource/configure.zcml\n@@ -1,6 +1,7 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n   <include file="meta.zcml" />\n   <include file="permissions.zcml" />\ndiff --git a/plone/resource/directory.py b/plone/resource/directory.py\nindex 61e4f12..f4f8953 100644\n--- a/plone/resource/directory.py\n+++ b/plone/resource/directory.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_parent\n from OFS.Image import File\n@@ -16,19 +15,19 @@\n from zope.event import notify\n from zope.interface import implementer\n \n+import io\n import os.path\n import re\n-import six\n import zipfile\n \n \n # filter dot files, Mac resource forks\n-FILTERS = (r\'\\..*\', \'__MACOSX\')\n+FILTERS = (r"\\..*", "__MACOSX")\n FILTERS = [re.compile(pattern) for pattern in FILTERS]\n \n \n @implementer(IWritableResourceDirectory)\n-class PersistentResourceDirectory(object):\n+class PersistentResourceDirectory:\n     """A resource directory stored in the ZODB.\n \n     It is assumed that directories provide IObjectManager\n@@ -40,18 +39,16 @@ def __init__(self, context=None):\n             # This is also used as a local IResourceDirectory utility,\n             # named u\'persistent\', which wraps the root folder.\n             # This gets pickled, so we can\'t keep the acquisition chain.\n-            context = aq_base(getToolByName(getSite(), \'portal_resources\'))\n+            context = aq_base(getToolByName(getSite(), "portal_resources"))\n         self.context = self.__parent__ = context\n         self.__name__ = context.getId()\n \n     def __repr__(self):\n-        return \'<%s object at %s>\' % (self.__class__.__name__,\n-                                      \'/\'.join(self.context.getPhysicalPath()))\n+        return "<{} object at {}>".format(\n+            self.__class__.__name__, "/".join(self.context.getPhysicalPath())\n+        )\n \n     def publishTraverse(self, request, name):\n-        if six.PY2 and isinstance(name, six.text_type):\n-            name = name.encode(\'utf-8\')\n-\n         context = self.context\n         if aq_parent(context) is None:\n             # Re-supply the acquisition chain if this is the root resource\n@@ -61,9 +58,7 @@ def publishTraverse(self, request, name):\n                 context = context.__of__(site)\n \n         if self.isDirectory(name):\n-            return self.__class__(\n-                context.unrestrictedTraverse(name).__of__(context)\n-            )\n+            return self.__class__(context.unrestrictedTraverse(name).__of__(context))\n         elif self.isFile(name):\n             return context.unrestrictedTraverse(name).__of__(context)\n \n@@ -73,9 +68,6 @@ def __getitem__(self, name):\n         return self.publishTraverse(None, name)\n \n     def __setitem__(self, name, item):\n-        if six.PY2 and isinstance(name, six.text_type):\n-            name = name.encode(\'utf-8\')\n-\n         if IResourceDirectory.providedBy(item):\n             item = item.context\n         self.context[name] = item\n@@ -88,25 +80,28 @@ def __contains__(self, name):\n         return name in self.context\n \n     def openFile(self, path):\n-        return six.BytesIO(self.readFile(path))\n+        return io.BytesIO(self.readFile(path))\n \n     def readFile(self, path):\n         try:\n             f = self.context.unrestrictedTraverse(path)\n         except Exception as e:\n-            raise IOError(str(e))\n-        if isinstance(f.data, six.binary_type):\n+            raise OSError(str(e))\n+        if isinstance(f.data, bytes):\n             return f.data\n         return f.data.__bytes__()\n \n     def listDirectory(self):\n-        return [n for n in self.context.objectIds()\n-                if not any(filter.match(n) for filter in FILTERS)]\n+        return [\n+            n\n+            for n in self.context.objectIds()\n+            if not any(filter.match(n) for filter in FILTERS)\n+        ]\n \n     def isDirectory(self, path):\n         try:\n             obj = self.context.unrestrictedTraverse(path)\n-        except:\n+        except Exception:\n             obj = None\n \n         return IObjectManager.providedBy(obj)\n@@ -114,7 +109,7 @@ def isDirectory(self, path):\n     def isFile(self, path):\n         try:\n             obj = self.context.unrestrictedTraverse(path)\n-        except:\n+        except Exception:\n             obj = None\n \n         return isinstance(obj, File)\n@@ -128,11 +123,11 @@ def rename(self, oldName, newName):\n     def exportZip(self, out):\n         prefix = self.__name__\n \n-        zf = zipfile.ZipFile(out, \'w\')\n+        zf = zipfile.ZipFile(out, "w")\n \n         def write(dir, prefix, zf):\n             for name in dir.listDirectory():\n-                relativeName = "%s/%s" % (prefix, name,)\n+                relativeName = f"{prefix}/{name}"\n                 if dir.isDirectory(name):\n                     write(dir[name], relativeName, zf)\n                 elif dir.isFile(name):\n@@ -142,11 +137,8 @@ def write(dir, prefix, zf):\n         zf.close()\n \n     def makeDirectory(self, path):\n-        if six.PY2:\n-            path = path.encode(\'utf-8\')\n-\n         parent = self.context\n-        names = path.strip(\'/\').split(\'/\')\n+        names = path.strip("/").split("/")\n         for name in names:\n             if name not in parent:\n                 f = BTreeFolder2(name)\n@@ -154,17 +146,17 @@ def makeDirectory(self, path):\n             parent = parent[name]\n \n     def writeFile(self, path, data):\n-        if isinstance(data, six.text_type):\n-            data = data.encode(\'utf8\')\n-        basepath = \'/\'.join(path.split(\'/\')[:-1])\n+        if isinstance(data, str):\n+            data = data.encode("utf8")\n+        basepath = "/".join(path.split("/")[:-1])\n         if basepath:\n             self.makeDirectory(basepath)\n-        filename = path.split(\'/\')[-1]\n+        filename = path.split("/")[-1]\n         f = File(filename, filename, data)\n         ct = f.getContentType()\n-        if ct.startswith(\'text/\') or ct == \'application/javascript\':\n+        if ct.startswith("text/") or ct == "application/javascript":\n             # otherwise HTTPResponse.setBody assumes latin1 and mangles things\n-            f.content_type = ct + \'; charset=utf-8\'\n+            f.content_type = ct + "; charset=utf-8"\n         container = self.context.unrestrictedTraverse(basepath)\n         if filename in container:\n             container._delOb(filename)\n@@ -180,15 +172,13 @@ def importZip(self, f):\n             f = zipfile.ZipFile(f)\n         for name in f.namelist():\n             member = f.getinfo(name)\n-            path = member.filename.lstrip(\'/\')\n+            path = member.filename.lstrip("/")\n \n             # test each part of the path against the filters\n-            if any(any(filter.match(n) for filter in FILTERS)\n-                   for n in path.split(\'/\')\n-                   ):\n+            if any(any(filter.match(n) for filter in FILTERS) for n in path.split("/")):\n                 continue\n \n-            if path.endswith(\'/\'):\n+            if path.endswith("/"):\n                 self.makeDirectory(path)\n             else:\n                 data = f.open(member).read()\n@@ -196,9 +186,8 @@ def importZip(self, f):\n \n \n @implementer(IResourceDirectory)\n-class FilesystemResourceDirectory(object):\n-    """A resource directory based on files in the filesystem.\n-    """\n+class FilesystemResourceDirectory:\n+    """A resource directory based on files in the filesystem."""\n \n     __allow_access_to_unprotected_subobjects__ = True\n \n@@ -220,18 +209,16 @@ def __parent__(self, value):\n         self._parent = value\n \n     def __repr__(self):\n-        return \'<%s object at %s>\' % (self.__class__.__name__, self.__name__)\n+        return f"<{self.__class__.__name__} object at {self.__name__}>"\n \n     def __bytes__(self):\n-        if six.PY2:\n-            return repr(self)\n         return repr(self).encode()\n \n     def _resolveSubpath(self, path):\n-        parts = path.split(\'/\')\n+        parts = path.split("/")\n         filepath = os.path.abspath(os.path.join(self.directory, *parts))\n         if not filepath.startswith(self.directory):\n-            raise Forbidden(\'Invalid path resource\')\n+            raise Forbidden("Invalid path resource")\n         return filepath\n \n     def publishTraverse(self, request, name):\n@@ -253,7 +240,7 @@ def __getitem__(self, name):\n \n     def openFile(self, path):\n         filepath = self._resolveSubpath(path)\n-        return open(filepath, \'rb\')\n+        return open(filepath, "rb")\n \n     def readFile(self, path):\n         with self.openFile(path) as f:\n@@ -261,8 +248,7 @@ def readFile(self, path):\n \n     def listDirectory(self):\n         names = os.listdir(self.directory)\n-        return [n for n in names\n-                if not any(filter.match(n) for filter in FILTERS)]\n+        return [n for n in names if not any(filter.match(n) for filter in FILTERS)]\n \n     def isDirectory(self, path):\n         return os.path.isdir(self._resolveSubpath(path))\n@@ -271,21 +257,27 @@ def isFile(self, path):\n         return os.path.isfile(self._resolveSubpath(path))\n \n     def exportZip(self, out):\n-        with zipfile.ZipFile(out, \'w\') as zf:\n-            toStrip = len(self.directory.replace(os.path.sep, \'/\')) + 1\n+        with zipfile.ZipFile(out, "w") as zf:\n+            toStrip = len(self.directory.replace(os.path.sep, "/")) + 1\n \n-            for (dirpath, dirnames, filenames) in os.walk(self.directory):\n-                subpath = dirpath.replace(os.path.sep, \'/\')[toStrip:].strip(\'/\')\n+            for dirpath, dirnames, filenames in os.walk(self.directory):\n+                subpath = dirpath.replace(os.path.sep, "/")[toStrip:].strip("/")\n \n                 for filename in filenames:\n-                    path = \'/\'.join([subpath, filename]).strip(\'/\')\n+                    path = "/".join([subpath, filename]).strip("/")\n \n-                    if any(any(filter.match(n) for filter in FILTERS)\n-                           for n in path.split(\'/\')\n-                           ):\n+                    if any(\n+                        any(filter.match(n) for filter in FILTERS)\n+                        for n in path.split("/")\n+                    ):\n                         continue\n \n                     zf.writestr(\n-                        \'/\'.join([self.__name__, path, ]),\n+                        "/".join(\n+                            [\n+                                self.__name__,\n+                                path,\n+                            ]\n+                        ),\n                         self.readFile(path),\n                     )\ndiff --git a/plone/resource/download.py b/plone/resource/download.py\nindex 917b90b..32250ba 100644\n--- a/plone/resource/download.py\n+++ b/plone/resource/download.py\n@@ -1,10 +1,8 @@\n-# -*- coding: utf-8 -*-\n from io import BytesIO\n from zope.publisher.browser import BrowserView\n \n \n class DownloadView(BrowserView):\n-\n     def __call__(self):\n         name = self.context.__name__\n \n@@ -17,10 +15,9 @@ def __call__(self):\n         out = BytesIO()\n         self.context.exportZip(out)\n \n-        response.setHeader(\'Content-Type\', \'application/zip\')\n+        response.setHeader("Content-Type", "application/zip")\n         response.setHeader(\n-            \'Content-Disposition\',\n-            \'attachment; filename="%s.zip"\' % name\n+            "Content-Disposition", \'attachment; filename="%s.zip"\' % name\n         )\n-        response.setHeader(\'Content-Length\', len(out.getvalue()))\n+        response.setHeader("Content-Length", len(out.getvalue()))\n         response.write(out.getvalue())\ndiff --git a/plone/resource/events.py b/plone/resource/events.py\nindex b8decb5..19bd77e 100644\n--- a/plone/resource/events.py\n+++ b/plone/resource/events.py\n@@ -1,7 +1,7 @@\n from plone.resource.interfaces import IPloneResourceCreatedEvent\n from plone.resource.interfaces import IPloneResourceModifiedEvent\n-from zope.interface.interfaces import ObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import ObjectEvent\n \n \n @implementer(IPloneResourceCreatedEvent)\ndiff --git a/plone/resource/file.py b/plone/resource/file.py\nindex bdc30be..8650573 100644\n--- a/plone/resource/file.py\n+++ b/plone/resource/file.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from datetime import time\n from dateutil.tz import tzlocal\n from email.utils import formatdate\n@@ -25,10 +24,10 @@ def __str__(self):\n         return self.read()\n \n     def __unicode__(self):\n-        return self.read().decode(\'utf-8\')\n+        return self.read().decode("utf-8")\n \n \n-class FilesystemFile(object):\n+class FilesystemFile:\n     """Representation of a file. When called, it will set response headers\n     and return the file\'s contents\n     """\n@@ -38,13 +37,11 @@ def __init__(self, parent, request, path, name):\n         self.request = request\n         self.__name__ = name\n         self.__parent__ = parent\n-        self.lastModifiedTimestamp = float(\n-            os.path.getmtime(path)\n-        ) or time.time()\n+        self.lastModifiedTimestamp = float(os.path.getmtime(path)) or time.time()\n \n-    def getContentType(self, default=\'application/octet-stream\'):\n+    def getContentType(self, default="application/octet-stream"):\n         extension = os.path.splitext(self.__name__)[1].lower()\n-        mtr = queryUtility(\'mimetypes_registry\')\n+        mtr = queryUtility("mimetypes_registry")\n         mt = None\n         if mtr:\n             mt = mtr.lookupExtension(extension)\n@@ -54,10 +51,7 @@ def getContentType(self, default=\'application/octet-stream\'):\n \n     def __call__(self, REQUEST=None, RESPONSE=None):\n         contentType = self.getContentType()\n-        lastModifiedHeader = formatdate(\n-            self.lastModifiedTimestamp,\n-            usegmt=True\n-        )\n+        lastModifiedHeader = formatdate(self.lastModifiedTimestamp, usegmt=True)\n \n         request = REQUEST\n         if request is None:\n@@ -67,30 +61,28 @@ def __call__(self, REQUEST=None, RESPONSE=None):\n         if response is None:\n             response = self.request.response\n \n-        response.setHeader(\'Content-Type\', contentType)\n-        response.setHeader(\'Content-Length\', os.path.getsize(self.path))\n-        response.setHeader(\'Last-Modified\', lastModifiedHeader)\n+        response.setHeader("Content-Type", contentType)\n+        response.setHeader("Content-Length", os.path.getsize(self.path))\n+        response.setHeader("Last-Modified", lastModifiedHeader)\n \n-        return ResourceIterator(self.path, \'rb\')\n+        return ResourceIterator(self.path, "rb")\n \n \n @implementer(ILastModified)\n @adapter(FilesystemFile)\n-class FileLastModified(object):\n-    """Determine when a file was last modified, for caching purposes\n-    """\n+class FileLastModified:\n+    """Determine when a file was last modified, for caching purposes"""\n \n     def __init__(self, context):\n         self.context = context\n \n     def __call__(self):\n         return datetime.datetime.fromtimestamp(\n-            self.context.lastModifiedTimestamp,\n-            tz=tzlocal()\n+            self.context.lastModifiedTimestamp, tz=tzlocal()\n         )\n \n \n @implementer(IRawReadFile)\n @adapter(FilesystemFile)\n def rawReadFile(context):\n-    return open(context.path, \'rb\')\n+    return open(context.path, "rb")\ndiff --git a/plone/resource/file.zcml b/plone/resource/file.zcml\nindex e45e0dc..069ae0f 100644\n--- a/plone/resource/file.zcml\n+++ b/plone/resource/file.zcml\n@@ -1,8 +1,9 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n-    <adapter factory=".file.rawReadFile" />\n-    <adapter factory=".file.FileLastModified" />\n+  <adapter factory=".file.rawReadFile" />\n+  <adapter factory=".file.FileLastModified" />\n \n </configure>\ndiff --git a/plone/resource/interfaces.py b/plone/resource/interfaces.py\nindex 22778a9..cfa420a 100644\n--- a/plone/resource/interfaces.py\n+++ b/plone/resource/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Attribute\n from zope.interface import Interface\n from zope.lifecycleevent.interfaces import IObjectCreatedEvent\n@@ -20,8 +19,7 @@ def __repr__():\n         """Returns a string identifier of the directory."""\n \n     def __contains__(name):\n-        """Return true if the given file or directory exists\n-        """\n+        """Return true if the given file or directory exists"""\n \n     def __getitem__(name):\n         """Return the file or resource directory with the given name\n@@ -62,7 +60,6 @@ def exportZip(out):\n \n \n class IWritableResourceDirectory(IResourceDirectory):\n-\n     def makeDirectory(path):\n         """Create the given path as a directory. (Returns successfully without\n         doing anything if the directory already exists.)\n@@ -85,16 +82,13 @@ def importZip(file):\n         """\n \n     def __delitem__(name):\n-        """Delete a file or directory inside this directory\n-        """\n+        """Delete a file or directory inside this directory"""\n \n     def __setitem__(name, item):\n-        """Add a file or directory as returned by ``__getitem__()``\n-        """\n+        """Add a file or directory as returned by ``__getitem__()``"""\n \n     def rename(oldName, newName):\n-        """Rename a child file or folder\n-        """\n+        """Rename a child file or folder"""\n \n \n class IUniqueResourceRequest(Interface):\ndiff --git a/plone/resource/manifest.py b/plone/resource/manifest.py\nindex 267194a..0881961 100644\n--- a/plone/resource/manifest.py\n+++ b/plone/resource/manifest.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Utilities for working with manifest files.\n \n The manifest is stored in a file ``manifest.cfg`` in the root of a resource\n@@ -28,30 +27,21 @@\n ``bar``. ``title`` and ``description`` will be ``None`` if not found in the\n manifest. ``bar`` will be ``baz`` if not found.\n """\n+from configparser import ConfigParser\n from plone.resource.directory import FILTERS\n from plone.resource.interfaces import IResourceDirectory\n from plone.resource.utils import iterDirectoriesOfType\n from zope.component import getUtility\n \n import logging\n-import six\n \n-try:\n-    # On Python 2 we must have the SafeConfigParser\n-    from ConfigParser import SafeConfigParser as ConfigParser\n-except ImportError:\n-    # On Python 3 we want the standard ConfigParser,\n-    # to avoid a deprecation warning.\n-    # Note that on Python 2 configparser can come from a backport.\n-    from configparser import ConfigParser\n \n+MANIFEST_FILENAME = "manifest.cfg"\n \n-MANIFEST_FILENAME = \'manifest.cfg\'\n+LOGGER = logging.getLogger("plone.resource.manifest")\n \n-LOGGER = logging.getLogger(\'plone.resource.manifest\')\n \n-\n-class ManifestFormat(object):\n+class ManifestFormat:\n     """Describes a manifest format.\n \n     An immutable, threadsafe object.\n@@ -70,8 +60,7 @@ class ManifestFormat(object):\n     ``[theme:parameters]``.\n     """\n \n-    def __init__(self, resourceType, keys, defaults=None,\n-                 parameterSections=None):\n+    def __init__(self, resourceType, keys, defaults=None, parameterSections=None):\n         self.resourceType = resourceType\n         self.keys = keys\n         self.defaults = defaults or {}\n@@ -88,13 +77,10 @@ def getManifest(fp, format, defaults=None):\n         defaults = format.defaults\n \n     parser = ConfigParser()\n-    if six.PY2:\n-        parser.readfp(fp)\n-    else:\n-        data = fp.read()\n-        if isinstance(data, six.binary_type):\n-            data = data.decode()\n-        parser.read_string(data)\n+    data = fp.read()\n+    if isinstance(data, bytes):\n+        data = data.decode()\n+    parser.read_string(data)\n \n     results = {}\n     for key in format.keys:\n@@ -104,7 +90,7 @@ def getManifest(fp, format, defaults=None):\n             results[key] = defaults.get(key, None)\n \n     for key in format.parameterSections:\n-        sectionName = "%s:%s" % (format.resourceType, key,)\n+        sectionName = f"{format.resourceType}:{key}"\n         if parser.has_section(sectionName):\n             results[key] = dict(parser.items(sectionName))\n         else:\n@@ -113,8 +99,9 @@ def getManifest(fp, format, defaults=None):\n     return results\n \n \n-def extractManifestFromZipFile(zipfile, format, defaults=None,\n-                               manifestFilename=MANIFEST_FILENAME):\n+def extractManifestFromZipFile(\n+    zipfile, format, defaults=None, manifestFilename=MANIFEST_FILENAME\n+):\n     """Get a resource name and manifest from the given open\n     ``zipfile.ZipFile`` using the given format. Returns a tuple::\n \n@@ -140,22 +127,17 @@ def extractManifestFromZipFile(zipfile, format, defaults=None,\n \n     for name in zipfile.namelist():\n         member = zipfile.getinfo(name)\n-        path = member.filename.lstrip(\'/\')\n+        path = member.filename.lstrip("/")\n \n         # Skip filtered files (OS X junk and dot files, mainly)\n-        if any(\n-            any(\n-                filter.match(n) for filter in FILTERS\n-            ) for n in path.split(\'/\')\n-        ):\n+        if any(any(filter.match(n) for filter in FILTERS) for n in path.split("/")):\n             continue\n \n-        pathSegments = path.rstrip(\'/\').split(\'/\')\n-        isDirectory = path.endswith(\'/\')\n+        pathSegments = path.rstrip("/").split("/")\n+        isDirectory = path.endswith("/")\n \n         # Is this a new top level directory?\n         if pathSegments[0] != resourceName:\n-\n             # We already thought we had one - abort\n             if resourceName is not None:\n                 raise ValueError("More than one top level directory")\n@@ -166,15 +148,14 @@ def extractManifestFromZipFile(zipfile, format, defaults=None,\n                 resourceName = pathSegments[0]\n             else:\n                 raise ValueError(\n-                    "Found a top level file - expected a single top level "\n-                    "directory"\n+                    "Found a top level file - expected a single top level " "directory"\n                 )\n \n         # Did we find a manifest file?\n         if (\n-            resourceName is not None and\n-            not isDirectory and\n-            path == "%s/%s" % (resourceName, manifestFilename,)\n+            resourceName is not None\n+            and not isDirectory\n+            and path == f"{resourceName}/{manifestFilename}"\n         ):\n             manifest = zipfile.open(member)\n             try:\n@@ -188,8 +169,9 @@ def extractManifestFromZipFile(zipfile, format, defaults=None,\n     return (resourceName, manifestDict)\n \n \n-def getAllResources(format, defaults=None, filter=None,\n-                    manifestFilename=MANIFEST_FILENAME):\n+def getAllResources(\n+    format, defaults=None, filter=None, manifestFilename=MANIFEST_FILENAME\n+):\n     """Get a dict of all resources of the resource type indicated by the\n     manifest format. Returns a dict where the keys are the resource ids and\n     the values are manifests. The value may be None if no manifest was found.\n@@ -208,7 +190,6 @@ def getAllResources(format, defaults=None, filter=None,\n     resources = {}\n \n     for directory in iterDirectoriesOfType(format.resourceType):\n-\n         if filter is not None and not filter(directory):\n             continue\n \n@@ -216,24 +197,20 @@ def getAllResources(format, defaults=None, filter=None,\n         resources[name] = None\n \n         if directory.isFile(manifestFilename):\n-\n             manifest = directory.openFile(manifestFilename)\n             try:\n                 resources[name] = getManifest(manifest, format, defaults)\n-            except:\n-                LOGGER.exception(\n-                    "Unable to read manifest for theme directory {0}".format(\n-                        name\n-                    )\n-                )\n+            except Exception:\n+                LOGGER.exception(f"Unable to read manifest for theme directory {name}")\n             finally:\n                 manifest.close()\n \n     return resources\n \n \n-def getZODBResources(format, defaults=None, filter=None,\n-                     manifestFilename=MANIFEST_FILENAME):\n+def getZODBResources(\n+    format, defaults=None, filter=None, manifestFilename=MANIFEST_FILENAME\n+):\n     """Get a dict of all resources in the ZODB of the resource type indicated\n     by the manifest format. Returns a dict where the keys are the resource\n     ids and the values are manifests. The value may be None if no manifest was\n@@ -259,7 +236,6 @@ def getZODBResources(format, defaults=None, filter=None,\n     resourcesDirectory = persistentDirectory[format.resourceType]\n \n     for name in resourcesDirectory.listDirectory():\n-\n         resourceDir = resourcesDirectory[name]\n \n         if filter is not None and not filter(resourceDir):\n@@ -271,9 +247,9 @@ def getZODBResources(format, defaults=None, filter=None,\n             manifest = resourceDir.openFile(MANIFEST_FILENAME)\n             try:\n                 resources[name] = getManifest(manifest, format, defaults)\n-            except:\n+            except Exception:\n                 LOGGER.exception(\n-                    "Unable to read manifest for {0} directory {1}".format(\n+                    "Unable to read manifest for {} directory {}".format(\n                         manifest.resourceType, name\n                     )\n                 )\ndiff --git a/plone/resource/meta.zcml b/plone/resource/meta.zcml\nindex 8b79e33..44b1fbc 100644\n--- a/plone/resource/meta.zcml\n+++ b/plone/resource/meta.zcml\n@@ -1,12 +1,13 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:meta="http://namespaces.zope.org/meta">\n+    xmlns:meta="http://namespaces.zope.org/meta"\n+    >\n \n-    <meta:directive\n-        name="static"\n-        namespace="http://namespaces.plone.org/plone"\n-        schema=".zcml.IResourceDirectoryDirective"\n-        handler=".zcml.registerResourceDirectory"\n-        />\n+  <meta:directive\n+      name="static"\n+      handler=".zcml.registerResourceDirectory"\n+      namespace="http://namespaces.plone.org/plone"\n+      schema=".zcml.IResourceDirectoryDirective"\n+      />\n \n </configure>\ndiff --git a/plone/resource/permissions.zcml b/plone/resource/permissions.zcml\nindex c5b3135..b60420a 100644\n--- a/plone/resource/permissions.zcml\n+++ b/plone/resource/permissions.zcml\n@@ -1,6 +1,7 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n   <permission\n       id="plone.resource.ExportZip"\ndiff --git a/plone/resource/profiles.zcml b/plone/resource/profiles.zcml\nindex 19eceb4..e0e92e9 100644\n--- a/plone/resource/profiles.zcml\n+++ b/plone/resource/profiles.zcml\n@@ -1,16 +1,17 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:gs="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n \n   <gs:registerProfile\n       name="default"\n-      directory="profiles/default"\n       title="Static resource storage"\n       description="A folder for storing and serving static resource files"\n-      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      directory="profiles/default"\n       />\n \n-</configure>\n\\ No newline at end of file\n+</configure>\ndiff --git a/plone/resource/profiles/default/componentregistry.xml b/plone/resource/profiles/default/componentregistry.xml\nindex 502ec44..156e9b4 100644\n--- a/plone/resource/profiles/default/componentregistry.xml\n+++ b/plone/resource/profiles/default/componentregistry.xml\n@@ -1,11 +1,10 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <componentregistry>\n-    <adapters/>\n-    <utilities>\n-        <utility\n-            interface="plone.resource.interfaces.IResourceDirectory"\n-            factory="plone.resource.directory.PersistentResourceDirectory"\n-            name="persistent"\n-            />\n-    </utilities>\n+  <adapters />\n+  <utilities>\n+    <utility factory="plone.resource.directory.PersistentResourceDirectory"\n+             interface="plone.resource.interfaces.IResourceDirectory"\n+             name="persistent"\n+    />\n+  </utilities>\n </componentregistry>\ndiff --git a/plone/resource/profiles/default/metadata.xml b/plone/resource/profiles/default/metadata.xml\nindex 7f28c91..08b37b6 100644\n--- a/plone/resource/profiles/default/metadata.xml\n+++ b/plone/resource/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n-    <version>1</version>\n+  <version>1</version>\n </metadata>\ndiff --git a/plone/resource/profiles/default/rolemap.xml b/plone/resource/profiles/default/rolemap.xml\nindex 37aebb8..e18857b 100644\n--- a/plone/resource/profiles/default/rolemap.xml\n+++ b/plone/resource/profiles/default/rolemap.xml\n@@ -1,7 +1,10 @@\n+<?xml version="1.0" encoding="utf-8"?>\n <rolemap>\n-    <permissions>\n-        <permission name="plone.resource: Export ZIP file" acquire="False">\n-            <role name="Manager" />\n-        </permission>\n-    </permissions>\n-</rolemap>\n\\ No newline at end of file\n+  <permissions>\n+    <permission acquire="False"\n+                name="plone.resource: Export ZIP file"\n+    >\n+      <role name="Manager" />\n+    </permission>\n+  </permissions>\n+</rolemap>\ndiff --git a/plone/resource/profiles/default/toolset.xml b/plone/resource/profiles/default/toolset.xml\nindex c1c47ed..f03476d 100644\n--- a/plone/resource/profiles/default/toolset.xml\n+++ b/plone/resource/profiles/default/toolset.xml\n@@ -1,7 +1,6 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <tool-setup>\n-    <required\n-        tool_id="portal_resources"\n-        class="Products.BTreeFolder2.BTreeFolder2.BTreeFolder2"\n-        />\n+  <required class="Products.BTreeFolder2.BTreeFolder2.BTreeFolder2"\n+            tool_id="portal_resources"\n+  />\n </tool-setup>\ndiff --git a/plone/resource/testing.py b/plone/resource/testing.py\nindex 0938270..462f0f6 100644\n--- a/plone/resource/testing.py\n+++ b/plone/resource/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import applyProfile\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PLONE_FIXTURE\n@@ -17,22 +16,22 @@ class DemoTraverser(Layer):\n \n     def setUp(self):\n         # Stack a new configuration context\n-        self[\'configurationContext\'] = context = zca.stackConfigurationContext(\n-            self.get(\'configurationContext\')\n+        self["configurationContext"] = context = zca.stackConfigurationContext(\n+            self.get("configurationContext")\n         )\n \n         import plone.resource\n-        xmlconfig.file(\'testing.zcml\', plone.resource, context=context)\n+\n+        xmlconfig.file("testing.zcml", plone.resource, context=context)\n \n     def tearDown(self):\n         # Zap the stacked configuration context\n-        del self[\'configurationContext\']\n+        del self["configurationContext"]\n \n \n DEMO_TRAVERSER_FIXTURE = DemoTraverser()\n DEMO_TRAVERSER_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(DEMO_TRAVERSER_FIXTURE,),\n-    name="plone.resource:DemoTraverserFunctional"\n+    bases=(DEMO_TRAVERSER_FIXTURE,), name="plone.resource:DemoTraverserFunctional"\n )\n \n \n@@ -42,23 +41,19 @@ class PloneResource(PloneSandboxLayer):\n     def setUpZope(self, app, configurationContext):\n         # Load ZCML\n         import plone.resource\n-        xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.resource,\n-            context=configurationContext\n-        )\n+\n+        xmlconfig.file("configure.zcml", plone.resource, context=configurationContext)\n \n     def setUpPloneSite(self, portal):\n         # install into the Plone site\n-        applyProfile(portal, \'plone.resource:default\')\n+        applyProfile(portal, "plone.resource:default")\n \n \n PLONE_RESOURCE_FIXTURE = PloneResource()\n PLONE_RESOURCE_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_RESOURCE_FIXTURE,),\n-    name="plone.resource:Integration"\n+    bases=(PLONE_RESOURCE_FIXTURE,), name="plone.resource:Integration"\n )\n \n \n class DemoTraverser(ResourceTraverser):\n-    name = \'demo\'\n+    name = "demo"\ndiff --git a/plone/resource/testing.zcml b/plone/resource/testing.zcml\nindex babfad2..ad73a51 100644\n--- a/plone/resource/testing.zcml\n+++ b/plone/resource/testing.zcml\n@@ -1,16 +1,18 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n   <include file="permissions.zcml" />\n   <include file="browser.zcml" />\n \n   <!-- demo traverser -->\n   <adapter\n-      name="demo"\n-      for="* zope.publisher.interfaces.IRequest"\n-      provides="zope.traversing.interfaces.ITraversable"\n       factory=".testing.DemoTraverser"\n+      provides="zope.traversing.interfaces.ITraversable"\n+      for="*\n+           zope.publisher.interfaces.IRequest"\n+      name="demo"\n       />\n \n </configure>\ndiff --git a/plone/resource/tests/test_directory.py b/plone/resource/tests/test_directory.py\nindex b9c1943..2d32f4b 100644\n--- a/plone/resource/tests/test_directory.py\n+++ b/plone/resource/tests/test_directory.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from io import BytesIO\n from OFS.Image import File\n@@ -10,7 +9,6 @@\n from plone.resource.interfaces import IPloneResourceModifiedEvent\n from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2\n from zExceptions import NotFound\n-from zipfile import ZipFile\n from zope.component import adapter\n from zope.component import provideHandler\n from zope.site.testing import createSiteManager\n@@ -22,13 +20,12 @@\n \n \n class TestPersistentResourceDirectory(unittest.TestCase):\n-\n     def _makeOne(self):\n-        root = BTreeFolder2(\'portal_resources\')\n-        root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n-        root.demo._setOb(\'foo\', BTreeFolder2(\'foo\'))\n-        file = File(\'test.html\', \'test.html\', BytesIO(b\'asdf\'))\n-        root.demo.foo._setOb(\'test.html\', file)\n+        root = BTreeFolder2("portal_resources")\n+        root._setOb("demo", BTreeFolder2("demo"))\n+        root.demo._setOb("foo", BTreeFolder2("foo"))\n+        file = File("test.html", "test.html", BytesIO(b"asdf"))\n+        root.demo.foo._setOb("test.html", file)\n \n         return PersistentResourceDirectory(root)\n \n@@ -38,10 +35,10 @@ def _assertSameUnwrapped(self, a, b):\n     def test_ctor_implicit_context(self):\n         siteSetUp()\n \n-        site = BTreeFolder2(\'site\')\n+        site = BTreeFolder2("site")\n         createSiteManager(site, setsite=True)\n         root = self._makeOne().context\n-        site._setOb(\'portal_resources\', root)\n+        site._setOb("portal_resources", root)\n \n         try:\n             dir = PersistentResourceDirectory()\n@@ -49,165 +46,169 @@ def test_ctor_implicit_context(self):\n             self.assertTrue(aq_base(root) is dir.context)\n \n             # but re-wrapped during traversal\n-            traversed = dir[\'demo\']\n+            traversed = dir["demo"]\n             self.assertTrue(site in traversed.context.aq_chain)\n         finally:\n             siteTearDown()\n \n     def test_repr(self):\n         dir = self._makeOne()\n-        s = \'<PersistentResourceDirectory object at portal_resources>\'\n+        s = "<PersistentResourceDirectory object at portal_resources>"\n         self.assertEqual(s, repr(dir))\n \n     def test_publishTraverse_directory(self):\n         dir = self._makeOne()\n-        subdir = dir.publishTraverse(None, \'demo\')\n+        subdir = dir.publishTraverse(None, "demo")\n         self._assertSameUnwrapped(subdir.context, dir.context.demo)\n \n     def test_publishTraverse_file(self):\n         dir = self._makeOne()\n-        file = dir.publishTraverse(None, \'demo/foo/test.html\')\n-        self._assertSameUnwrapped(file, dir.context.demo.foo[\'test.html\'])\n+        file = dir.publishTraverse(None, "demo/foo/test.html")\n+        self._assertSameUnwrapped(file, dir.context.demo.foo["test.html"])\n \n     def test_publishTraverse_not_found(self):\n         dir = self._makeOne()\n-        self.assertRaises(NotFound, dir.publishTraverse, None, \'baz\')\n+        self.assertRaises(NotFound, dir.publishTraverse, None, "baz")\n \n     def test_getitem(self):\n         dir = self._makeOne()\n-        self._assertSameUnwrapped(dir[\'demo\'].context, dir.context.demo)\n+        self._assertSameUnwrapped(dir["demo"].context, dir.context.demo)\n \n     def test_openFile(self):\n         dir = self._makeOne()\n-        file = dir.openFile(\'demo/foo/test.html\')\n-        self.assertEqual(b\'asdf\', file.read())\n+        file = dir.openFile("demo/foo/test.html")\n+        self.assertEqual(b"asdf", file.read())\n \n     def test_readFile(self):\n         dir = self._makeOne()\n-        self.assertEqual(b\'asdf\', dir.readFile(\'demo/foo/test.html\'))\n+        self.assertEqual(b"asdf", dir.readFile("demo/foo/test.html"))\n \n     def test_readFile_not_found(self):\n         dir = self._makeOne()\n-        self.assertRaises(IOError, dir.readFile, \'baz\')\n+        self.assertRaises(IOError, dir.readFile, "baz")\n \n     def test_listDirectory(self):\n         dir = self._makeOne()\n-        self.assertEqual([\'demo\'], dir.listDirectory())\n+        self.assertEqual(["demo"], dir.listDirectory())\n \n     def test_listDirectory_filters_by_name(self):\n         dir = self._makeOne()\n-        dir.context._setOb(\'.svn\', BTreeFolder2(\'filtered\'))\n-        self.assertEqual([\'demo\'], dir.listDirectory())\n+        dir.context._setOb(".svn", BTreeFolder2("filtered"))\n+        self.assertEqual(["demo"], dir.listDirectory())\n \n     def test_makeDirectory(self):\n         dir = self._makeOne()\n-        dir.makeDirectory(\'demo/bar\')\n-        newdir = dir[\'demo\'][\'bar\']\n+        dir.makeDirectory("demo/bar")\n+        newdir = dir["demo"]["bar"]\n         self.assertTrue(isinstance(newdir.context, BTreeFolder2))\n \n     def test_makeDirectory_extra_slashes(self):\n         dir = self._makeOne()\n-        dir.makeDirectory(\'/demo/bar/\')\n-        newdir = dir[\'demo\'][\'bar\']\n+        dir.makeDirectory("/demo/bar/")\n+        newdir = dir["demo"]["bar"]\n         self.assertTrue(isinstance(newdir.context, BTreeFolder2))\n \n     def test_writeFile(self):\n         dir = self._makeOne()\n-        dir.writeFile(\'qux\', b\'qux\')\n-        self.assertEqual(b\'qux\', dir.readFile(\'qux\'))\n+        dir.writeFile("qux", b"qux")\n+        self.assertEqual(b"qux", dir.readFile("qux"))\n \n     def test_writeFile_does_not_create_empty_directory(self):\n         dir = self._makeOne()\n-        dir.writeFile(\'qux\', b\'qux\')\n-        self.assertFalse(\'\' in dir)\n-        self.assertTrue(\'qux\' in dir)\n+        dir.writeFile("qux", b"qux")\n+        self.assertFalse("" in dir)\n+        self.assertTrue("qux" in dir)\n \n     def test_writeFile_directory_missing(self):\n         dir = self._makeOne()\n-        dir.writeFile(\'baz/qux\', b\'qux\')\n-        self.assertEqual(b\'qux\', dir.readFile(\'baz/qux\'))\n+        dir.writeFile("baz/qux", b"qux")\n+        self.assertEqual(b"qux", dir.readFile("baz/qux"))\n \n     def test_writeFile_file_already_exists(self):\n         dir = self._makeOne()\n-        dir.writeFile(\'demo/foo/test.html\', b\'changed\')\n-        self.assertEqual(b\'changed\', dir.readFile(\'demo/foo/test.html\'))\n+        dir.writeFile("demo/foo/test.html", b"changed")\n+        self.assertEqual(b"changed", dir.readFile("demo/foo/test.html"))\n \n     def test_importZip(self):\n         dir = self._makeOne()\n         with open(\n-            os.path.join(os.path.dirname(__file__), \'resources.zip\'),\n-            \'rb\',\n+            os.path.join(os.path.dirname(__file__), "resources.zip"),\n+            "rb",\n         ) as f:\n             dir.importZip(f)\n-            self.assertEqual(b\'from zip\', dir.readFile(\'demo/foo/test.html\'))\n+            self.assertEqual(b"from zip", dir.readFile("demo/foo/test.html"))\n \n     def test_importZip_takes_ZipFile(self):\n         dir = self._makeOne()\n         with open(\n-            os.path.join(os.path.dirname(__file__), \'resources.zip\'),\n-            \'rb\',\n+            os.path.join(os.path.dirname(__file__), "resources.zip"),\n+            "rb",\n         ) as f:\n             dir.importZip(f)\n-            self.assertEqual(b\'from zip\', dir.readFile(\'demo/foo/test.html\'))\n+            self.assertEqual(b"from zip", dir.readFile("demo/foo/test.html"))\n \n     def test_importZip_filters_resource_forks(self):\n         dir = self._makeOne()\n         with open(\n-            os.path.join(os.path.dirname(__file__), \'resources.zip\'),\n-            \'rb\',\n+            os.path.join(os.path.dirname(__file__), "resources.zip"),\n+            "rb",\n         ) as f:\n             dir.importZip(f)\n-            self.assertFalse(\'__MACOSX\' in dir.context.objectIds())\n+            self.assertFalse("__MACOSX" in dir.context.objectIds())\n \n     def test_importZip_filters_hidden_directories(self):\n         dir = self._makeOne()\n         with open(\n-            os.path.join(os.path.dirname(__file__), \'resources.zip\'),\n-            \'rb\',\n+            os.path.join(os.path.dirname(__file__), "resources.zip"),\n+            "rb",\n         ) as f:\n             dir.importZip(f)\n-            self.assertFalse(\'.svn\' in dir)\n+            self.assertFalse(".svn" in dir)\n \n     def test_delitem(self):\n         dir = self._makeOne()\n-        dir.makeDirectory(\'demo\')\n-        self.assertTrue(\'demo\' in dir)\n-        del dir[\'demo\']\n-        self.assertFalse(\'demo\' in dir)\n+        dir.makeDirectory("demo")\n+        self.assertTrue("demo" in dir)\n+        del dir["demo"]\n+        self.assertFalse("demo" in dir)\n \n     def test_rename(self):\n         dir = self._makeOne()\n-        dir.rename(\'demo\', \'demo1\')\n-        self.assertEqual([\'demo1\'], dir.listDirectory())\n+        dir.rename("demo", "demo1")\n+        self.assertEqual(["demo1"], dir.listDirectory())\n \n     def test_setitem_file(self):\n         dir = self._makeOne()\n-        f = dir[\'demo\'][\'foo\'][\'test.html\']\n-        dir[\'demo\'].makeDirectory(\'bar\')\n+        f = dir["demo"]["foo"]["test.html"]\n+        dir["demo"].makeDirectory("bar")\n \n-        dir[\'demo\'][\'bar\'][\'test.html\'] = f\n-        self.assertEqual(dir[\'demo\'][\'foo\'].readFile(\'test.html\'),\n-                         dir[\'demo\'][\'bar\'].readFile(\'test.html\'),)\n+        dir["demo"]["bar"]["test.html"] = f\n+        self.assertEqual(\n+            dir["demo"]["foo"].readFile("test.html"),\n+            dir["demo"]["bar"].readFile("test.html"),\n+        )\n \n     def test_setitem_file_unicode(self):\n         dir = self._makeOne()\n-        f = dir[\'demo\'][\'foo\'][\'test.html\']\n-        dir[\'demo\'].makeDirectory(\'bar\')\n+        f = dir["demo"]["foo"]["test.html"]\n+        dir["demo"].makeDirectory("bar")\n \n-        dir[\'demo\'][\'bar\'][u\'test.html\'] = f\n-        self.assertEqual(dir[\'demo\'][\'foo\'].readFile(\'test.html\'),\n-                         dir[\'demo\'][\'bar\'].readFile(\'test.html\'),)\n+        dir["demo"]["bar"]["test.html"] = f\n+        self.assertEqual(\n+            dir["demo"]["foo"].readFile("test.html"),\n+            dir["demo"]["bar"].readFile("test.html"),\n+        )\n \n     def test_setitem_directory(self):\n         dir = self._makeOne()\n-        dir[\'demo\'][\'foo\'].makeDirectory(\'d1\')\n+        dir["demo"]["foo"].makeDirectory("d1")\n \n-        d1 = dir[\'demo\'][\'foo\'][\'d1\']\n-        del dir[\'demo\'][\'foo\'][\'d1\']\n+        d1 = dir["demo"]["foo"]["d1"]\n+        del dir["demo"]["foo"]["d1"]\n \n-        dir[\'demo\'][\'foo\'][\'d2\'] = d1\n+        dir["demo"]["foo"]["d2"] = d1\n \n-        self.assertEqual(dir[\'demo\'][\'foo\'][\'d2\'].__name__, \'d2\')\n+        self.assertEqual(dir["demo"]["foo"]["d2"].__name__, "d2")\n \n     def test_events(self):\n         events = []\n@@ -215,88 +216,89 @@ def test_events(self):\n         @adapter(IPloneResourceCreatedEvent)\n         def _handleFileCreated(event):\n             events.append(event)\n+\n         provideHandler(_handleFileCreated)\n \n         @adapter(IPloneResourceModifiedEvent)\n         def _handleFileModified(event):\n             events.append(event)\n+\n         provideHandler(_handleFileModified)\n \n         dir = self._makeOne()\n-        dir.writeFile(\'test\', b\'my test\')\n-        dir.writeFile(\'test\', b\'my test is modified\')\n+        dir.writeFile("test", b"my test")\n+        dir.writeFile("test", b"my test is modified")\n         self.assertTrue(isinstance(events[0], PloneResourceCreatedEvent))\n-        self.assertEqual(events[0].object.data, b\'my test\')\n+        self.assertEqual(events[0].object.data, b"my test")\n         self.assertTrue(isinstance(events[1], PloneResourceModifiedEvent))\n-        self.assertEqual(events[1].object.data, b\'my test is modified\')\n+        self.assertEqual(events[1].object.data, b"my test is modified")\n \n \n class TestFilesystemResourceDirectory(unittest.TestCase):\n-\n     def _makeOne(self, name=None):\n-        path = os.path.join(os.path.dirname(__file__), \'resources\')\n+        path = os.path.join(os.path.dirname(__file__), "resources")\n         return FilesystemResourceDirectory(path, name=name)\n \n     def test_repr_default(self):\n         dir = self._makeOne()\n-        s = \'<FilesystemResourceDirectory object at resources>\'\n+        s = "<FilesystemResourceDirectory object at resources>"\n         self.assertEqual(s, repr(dir))\n \n     def test_repr_other_name(self):\n-        dir = self._makeOne(name=\'something-else\')\n-        s = \'<FilesystemResourceDirectory object at something-else>\'\n+        dir = self._makeOne(name="something-else")\n+        s = "<FilesystemResourceDirectory object at something-else>"\n         # This used to give a ValueError: substring not found\n         self.assertEqual(s, repr(dir))\n \n     def test_publishTraverse_directory(self):\n         dir = self._makeOne()\n-        subdir = dir.publishTraverse(None, \'demo\')\n-        self.assertEqual(subdir.directory, os.path.join(dir.directory, \'demo\'))\n+        subdir = dir.publishTraverse(None, "demo")\n+        self.assertEqual(subdir.directory, os.path.join(dir.directory, "demo"))\n \n     def test_publishTraverse_file(self):\n         dir = self._makeOne()\n-        file = dir.publishTraverse(None, \'demo/foo/test.html\')\n-        subpath = os.path.join(dir.directory, \'demo\', \'foo\', \'test.html\')\n+        file = dir.publishTraverse(None, "demo/foo/test.html")\n+        subpath = os.path.join(dir.directory, "demo", "foo", "test.html")\n         self.assertEqual(file.path, subpath)\n \n     def test_publishTraverse_not_found(self):\n         dir = self._makeOne()\n-        self.assertRaises(NotFound, dir.publishTraverse, None, \'baz\')\n+        self.assertRaises(NotFound, dir.publishTraverse, None, "baz")\n \n     def test_getitem(self):\n         dir = self._makeOne()\n-        subpath = os.path.join(dir.directory, \'demo\')\n-        self.assertEqual(dir[\'demo\'].directory, subpath)\n+        subpath = os.path.join(dir.directory, "demo")\n+        self.assertEqual(dir["demo"].directory, subpath)\n \n     def test_contains(self):\n         dir = self._makeOne()\n-        self.assertTrue(\'demo\' in dir)\n+        self.assertTrue("demo" in dir)\n \n     def test_openFile(self):\n         dir = self._makeOne()\n-        with dir.openFile(\'demo/foo/test.html\') as fp:\n-            self.assertEqual(b\'asdf\', fp.read())\n+        with dir.openFile("demo/foo/test.html") as fp:\n+            self.assertEqual(b"asdf", fp.read())\n \n     def test_readFile(self):\n         dir = self._makeOne()\n-        self.assertEqual(b\'asdf\', dir.readFile(\'demo/foo/test.html\'))\n+        self.assertEqual(b"asdf", dir.readFile("demo/foo/test.html"))\n \n     def test_readFile_not_found(self):\n         dir = self._makeOne()\n-        self.assertRaises(IOError, dir.readFile, \'baz\')\n+        self.assertRaises(IOError, dir.readFile, "baz")\n \n     def test_listDirectory(self):\n         dir = self._makeOne()\n-        self.assertEqual([\'demo\'], dir.listDirectory())\n+        self.assertEqual(["demo"], dir.listDirectory())\n \n     def test_listDirectory_filters_by_name(self):\n         dir = self._makeOne()\n-        name = \'.dummy\'\n+        name = ".dummy"\n         file_path = os.path.join(dir.directory, name)\n         if name not in os.listdir(dir.directory):\n-            with open(file_path, \'w\') as fp:\n+            with open(file_path, "w") as fp:\n                 fp.write("")\n         self.assertTrue(name in os.listdir(dir.directory))\n-        self.assertEqual([\'demo\'], dir.listDirectory())\n+        self.assertEqual(["demo"], dir.listDirectory())\n         # Cleanup created file.\n         os.remove(file_path)\ndiff --git a/plone/resource/tests/test_file.py b/plone/resource/tests/test_file.py\nindex df48acb..d1c7f0f 100644\n--- a/plone/resource/tests/test_file.py\n+++ b/plone/resource/tests/test_file.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from dateutil.tz import tzlocal\n from email.utils import formatdate\n from plone.resource.file import FileLastModified\n@@ -13,34 +12,35 @@\n import datetime\n import io\n import os.path\n-import six\n import unittest\n \n \n class TestFilesystemResourceDirectory(unittest.TestCase):\n-\n     layer = UNIT_TESTING\n \n     def test_render(self):\n-        name = \'test.html\'\n-        path = os.path.join(os.path.dirname(__file__), \'resources\', \'demo\', \'foo\', name)\n+        name = "test.html"\n+        path = os.path.join(os.path.dirname(__file__), "resources", "demo", "foo", name)\n         mtime = os.path.getmtime(path)\n \n         request = TestRequest()\n \n         f = FilesystemFile(None, request, path, name)\n         with f() as iterator:\n-            data = b\'\'.join(iterator)\n-            self.assertEqual(data, b\'asdf\')\n-            self.assertEqual(request.response.getHeader(\'Content-Type\'), \'text/html\')\n-            self.assertEqual(request.response.getHeader(\'Content-Length\'), \'4\')\n-            self.assertEqual(request.response.getHeader(\'Last-Modified\'), formatdate(mtime, usegmt=True))\n+            data = b"".join(iterator)\n+            self.assertEqual(data, b"asdf")\n+            self.assertEqual(request.response.getHeader("Content-Type"), "text/html")\n+            self.assertEqual(request.response.getHeader("Content-Length"), "4")\n+            self.assertEqual(\n+                request.response.getHeader("Last-Modified"),\n+                formatdate(mtime, usegmt=True),\n+            )\n \n     def test_last_modified(self):\n         provideAdapter(FileLastModified)\n \n-        name = \'test.html\'\n-        path = os.path.join(os.path.dirname(__file__), \'resources\', \'demo\', \'foo\', name)\n+        name = "test.html"\n+        path = os.path.join(os.path.dirname(__file__), "resources", "demo", "foo", name)\n         mtime = os.path.getmtime(path)\n \n         request = TestRequest()\n@@ -55,16 +55,13 @@ def test_last_modified(self):\n     def test_raw_read_file(self):\n         provideAdapter(rawReadFile)\n \n-        name = \'test.html\'\n-        path = os.path.join(os.path.dirname(__file__), \'resources\', \'demo\', \'foo\', name)\n+        name = "test.html"\n+        path = os.path.join(os.path.dirname(__file__), "resources", "demo", "foo", name)\n \n         request = TestRequest()\n \n         f = FilesystemFile(None, request, path, name)\n \n         with IRawReadFile(f) as rf:\n-            if six.PY2:\n-                self.assertTrue(isinstance(rf, file))\n-            else:\n-                self.assertTrue(isinstance(rf, io.IOBase))\n-            self.assertEqual(rf.read(), b\'asdf\')\n+            self.assertTrue(isinstance(rf, io.IOBase))\n+            self.assertEqual(rf.read(), b"asdf")\ndiff --git a/plone/resource/tests/test_integration.py b/plone/resource/tests/test_integration.py\nindex 1d14068..79311cf 100644\n--- a/plone/resource/tests/test_integration.py\n+++ b/plone/resource/tests/test_integration.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.resource.interfaces import IResourceDirectory\n from plone.resource.testing import PLONE_RESOURCE_INTEGRATION_TESTING\n \n@@ -9,18 +8,21 @@ class IntegrationTestCase(unittest.TestCase):\n     layer = PLONE_RESOURCE_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer.get(\'portal\')\n+        self.portal = self.layer.get("portal")\n \n     def test_persistent_directory_installed(self):\n         # directory should be available as the portal_resources tool\n         from Products.CMFCore.utils import getToolByName\n-        tool = getToolByName(self.portal, \'portal_resources\')\n-        self.assertEqual(\'portal_resources\', tool.getId())\n+\n+        tool = getToolByName(self.portal, "portal_resources")\n+        self.assertEqual("portal_resources", tool.getId())\n \n         # wrapper should be available as an IResourceDirectory utility named \'persistent\'\n         from zope.component import getUtility\n-        utility = getUtility(IResourceDirectory, name=\'persistent\')\n+\n+        utility = getUtility(IResourceDirectory, name="persistent")\n \n         # the utility\'s context attribute is the (unwrapped) tool\n         from Acquisition import aq_base\n+\n         self.assertTrue(aq_base(tool) is utility.context)\ndiff --git a/plone/resource/tests/test_manifest.py b/plone/resource/tests/test_manifest.py\nindex f03979d..5854d78 100644\n--- a/plone/resource/tests/test_manifest.py\n+++ b/plone/resource/tests/test_manifest.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.resource.directory import FilesystemResourceDirectory\n from plone.resource.directory import PersistentResourceDirectory\n from plone.resource.interfaces import IResourceDirectory\n@@ -18,10 +17,13 @@\n \n \n base_path = os.path.dirname(__file__)\n-test_dir_path = os.path.join(base_path, \'resources\')\n+test_dir_path = os.path.join(base_path, "resources")\n+\n+TEST_FORMAT = ManifestFormat("demo", ["title", "description", "bar"], {"bar": "baz"})\n+TEST_FORMAT_PARAMS = ManifestFormat(\n+    "demo", ["title", "description", "bar"], {"bar": "baz"}, ["params"]\n+)\n \n-TEST_FORMAT = ManifestFormat(\'demo\', [\'title\', \'description\', \'bar\'], {\'bar\': \'baz\'})\n-TEST_FORMAT_PARAMS = ManifestFormat(\'demo\', [\'title\', \'description\', \'bar\'], {\'bar\': \'baz\'}, [\'params\'])\n \n class TestManifest(unittest.TestCase):\n     layer = DEMO_TRAVERSER_FUNCTIONAL_TESTING\n@@ -33,183 +35,221 @@ def tearDown(self):\n         zca.popGlobalRegistry()\n \n     def test_get_manifest(self):\n-        with open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\')) as fp:\n+        with open(\n+            os.path.join(test_dir_path, "demo", "manifest-test", "manifest.cfg")\n+        ) as fp:\n             manifest = getManifest(fp, TEST_FORMAT)\n-            self.assertEqual(manifest[\'title\'], \'Manifest test\')\n-            self.assertEqual(manifest[\'description\'], None)\n-            self.assertEqual(manifest[\'bar\'], \'baz\')\n+            self.assertEqual(manifest["title"], "Manifest test")\n+            self.assertEqual(manifest["description"], None)\n+            self.assertEqual(manifest["bar"], "baz")\n \n     def test_get_manifest_params(self):\n-        with open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\')) as fp:\n+        with open(\n+            os.path.join(test_dir_path, "demo", "manifest-test", "manifest.cfg")\n+        ) as fp:\n             manifest = getManifest(fp, TEST_FORMAT_PARAMS)\n-            self.assertEqual(manifest[\'title\'], \'Manifest test\')\n-            self.assertEqual(manifest[\'description\'], None)\n-            self.assertEqual(manifest[\'bar\'], \'baz\')\n-            self.assertEqual(manifest[\'params\'], {\'alpha\': \'beta\', \'delta\': \'theta\'})\n+            self.assertEqual(manifest["title"], "Manifest test")\n+            self.assertEqual(manifest["description"], None)\n+            self.assertEqual(manifest["bar"], "baz")\n+            self.assertEqual(manifest["params"], {"alpha": "beta", "delta": "theta"})\n \n     def test_get_manifest_ignores_extra(self):\n-        with open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\')) as fp:\n+        with open(\n+            os.path.join(test_dir_path, "demo", "manifest-test", "manifest.cfg")\n+        ) as fp:\n             manifest = getManifest(fp, TEST_FORMAT)\n-            self.assertFalse(\'baz\' in manifest)\n+            self.assertFalse("baz" in manifest)\n \n     def test_get_manifest_override_defaults(self):\n-        with open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\')) as fp:\n-            manifest = getManifest(fp, TEST_FORMAT, {\'bar\': \'foo\', \'title\': \'foo\'})\n-            self.assertEqual(manifest[\'title\'], \'Manifest test\')\n-            self.assertEqual(manifest[\'bar\'], \'foo\')\n+        with open(\n+            os.path.join(test_dir_path, "demo", "manifest-test", "manifest.cfg")\n+        ) as fp:\n+            manifest = getManifest(fp, TEST_FORMAT, {"bar": "foo", "title": "foo"})\n+            self.assertEqual(manifest["title"], "Manifest test")\n+            self.assertEqual(manifest["bar"], "foo")\n \n     def test_extract_from_zip_file(self):\n-        zf = zipfile.ZipFile(os.path.join(base_path, \'zipfiles\', \'normal.zip\'))\n+        zf = zipfile.ZipFile(os.path.join(base_path, "zipfiles", "normal.zip"))\n         resourceName, manifestDict = extractManifestFromZipFile(zf, TEST_FORMAT)\n \n-        self.assertEqual(resourceName, \'demo1\')\n+        self.assertEqual(resourceName, "demo1")\n         self.assertEqual(\n-                manifestDict,\n-                {\'bar\': \'baz\', \'description\': None, \'title\': \'No top level dir\'}\n-            )\n+            manifestDict,\n+            {"bar": "baz", "description": None, "title": "No top level dir"},\n+        )\n \n     def test_extract_from_zip_file_override_defaults(self):\n-        zf = zipfile.ZipFile(os.path.join(base_path, \'zipfiles\', \'normal.zip\'))\n-        resourceName, manifestDict = extractManifestFromZipFile(zf, TEST_FORMAT,\n-            defaults={\'bar\': \'foo\', \'description\': \'desc\'})\n+        zf = zipfile.ZipFile(os.path.join(base_path, "zipfiles", "normal.zip"))\n+        resourceName, manifestDict = extractManifestFromZipFile(\n+            zf, TEST_FORMAT, defaults={"bar": "foo", "description": "desc"}\n+        )\n \n-        self.assertEqual(resourceName, \'demo1\')\n+        self.assertEqual(resourceName, "demo1")\n         self.assertEqual(\n-                manifestDict,\n-                {\'bar\': \'foo\', \'description\': \'desc\', \'title\': \'No top level dir\'}\n-            )\n+            manifestDict,\n+            {"bar": "foo", "description": "desc", "title": "No top level dir"},\n+        )\n \n     def test_extract_from_zip_file_no_top_level_dir(self):\n-        zf = zipfile.ZipFile(os.path.join(base_path, \'zipfiles\', \'no-top-level-dir.zip\'))\n+        zf = zipfile.ZipFile(\n+            os.path.join(base_path, "zipfiles", "no-top-level-dir.zip")\n+        )\n         self.assertRaises(ValueError, extractManifestFromZipFile, zf, TEST_FORMAT)\n \n     def test_extract_from_zip_file_multiple_top_level_dirs(self):\n-        zf = zipfile.ZipFile(os.path.join(base_path, \'zipfiles\', \'multiple-top-level-dirs.zip\'))\n+        zf = zipfile.ZipFile(\n+            os.path.join(base_path, "zipfiles", "multiple-top-level-dirs.zip")\n+        )\n         self.assertRaises(ValueError, extractManifestFromZipFile, zf, TEST_FORMAT)\n \n     def test_extract_from_zip_file_no_manifest(self):\n-        zf = zipfile.ZipFile(os.path.join(base_path, \'zipfiles\', \'no-manifest.zip\'))\n+        zf = zipfile.ZipFile(os.path.join(base_path, "zipfiles", "no-manifest.zip"))\n         resourceName, manifestDict = extractManifestFromZipFile(zf, TEST_FORMAT)\n \n-        self.assertEqual(resourceName, \'demo1\')\n+        self.assertEqual(resourceName, "demo1")\n         self.assertEqual(manifestDict, None)\n \n     def test_extract_from_zip_file_manifest_name_override(self):\n-        zf = zipfile.ZipFile(os.path.join(base_path, \'zipfiles\', \'manifest-name-override.zip\'))\n+        zf = zipfile.ZipFile(\n+            os.path.join(base_path, "zipfiles", "manifest-name-override.zip")\n+        )\n         resourceName, manifestDict = extractManifestFromZipFile(zf, TEST_FORMAT)\n \n-        self.assertEqual(resourceName, \'demo1\')\n+        self.assertEqual(resourceName, "demo1")\n         self.assertEqual(manifestDict, None)\n \n-        resourceName, manifestDict = extractManifestFromZipFile(zf, TEST_FORMAT, manifestFilename=\'other-manifest.cfg\')\n+        resourceName, manifestDict = extractManifestFromZipFile(\n+            zf, TEST_FORMAT, manifestFilename="other-manifest.cfg"\n+        )\n \n         self.assertEqual(\n-                manifestDict,\n-                {\'bar\': \'baz\', \'description\': None, \'title\': \'No top level dir\'}\n-            )\n+            manifestDict,\n+            {"bar": "baz", "description": None, "title": "No top level dir"},\n+        )\n \n     def test_get_all_resources(self):\n-        app = self.layer[\'app\']\n+        app = self.layer["app"]\n \n-        foo = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'foo\'))\n-        provideUtility(foo, provides=IResourceDirectory, name=u\'++demo++foo\')\n+        foo = FilesystemResourceDirectory(os.path.join(test_dir_path, "demo", "foo"))\n+        provideUtility(foo, provides=IResourceDirectory, name="++demo++foo")\n \n-        manifestTest = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'manifest-test\'))\n-        provideUtility(manifestTest, provides=IResourceDirectory, name=u\'++demo++manifest-test\')\n+        manifestTest = FilesystemResourceDirectory(\n+            os.path.join(test_dir_path, "demo", "manifest-test")\n+        )\n+        provideUtility(\n+            manifestTest, provides=IResourceDirectory, name="++demo++manifest-test"\n+        )\n \n-        root = BTreeFolder2(\'portal_resources\')\n-        app._setOb(\'portal_resources\', root)\n-        root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n-        root[\'demo\']._setOb(\'bar\', BTreeFolder2(\'bar\'))\n+        root = BTreeFolder2("portal_resources")\n+        app._setOb("portal_resources", root)\n+        root._setOb("demo", BTreeFolder2("demo"))\n+        root["demo"]._setOb("bar", BTreeFolder2("bar"))\n \n         persistentDir = PersistentResourceDirectory(root)\n-        provideUtility(persistentDir, provides=IResourceDirectory, name=u\'persistent\')\n+        provideUtility(persistentDir, provides=IResourceDirectory, name="persistent")\n \n         resources = getAllResources(TEST_FORMAT)\n \n         self.assertEqual(\n-                resources,\n-                {\'bar\': None,\n-                 \'foo\': None,\n-                 \'manifest-test\': {\'bar\': \'baz\',\n-                                   \'description\': None,\n-                                   \'title\': \'Manifest test\'}}\n-            )\n+            resources,\n+            {\n+                "bar": None,\n+                "foo": None,\n+                "manifest-test": {\n+                    "bar": "baz",\n+                    "description": None,\n+                    "title": "Manifest test",\n+                },\n+            },\n+        )\n \n     def test_get_all_resources_filter(self):\n-        app = self.layer[\'app\']\n+        app = self.layer["app"]\n \n-        foo = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'foo\'))\n-        provideUtility(foo, provides=IResourceDirectory, name=u\'++demo++foo\')\n+        foo = FilesystemResourceDirectory(os.path.join(test_dir_path, "demo", "foo"))\n+        provideUtility(foo, provides=IResourceDirectory, name="++demo++foo")\n \n-        manifestTest = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'manifest-test\'))\n-        provideUtility(manifestTest, provides=IResourceDirectory, name=u\'++demo++manifest-test\')\n+        manifestTest = FilesystemResourceDirectory(\n+            os.path.join(test_dir_path, "demo", "manifest-test")\n+        )\n+        provideUtility(\n+            manifestTest, provides=IResourceDirectory, name="++demo++manifest-test"\n+        )\n \n-        root = BTreeFolder2(\'portal_resources\')\n-        app._setOb(\'portal_resources\', root)\n-        root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n-        root[\'demo\']._setOb(\'bar\', BTreeFolder2(\'bar\'))\n+        root = BTreeFolder2("portal_resources")\n+        app._setOb("portal_resources", root)\n+        root._setOb("demo", BTreeFolder2("demo"))\n+        root["demo"]._setOb("bar", BTreeFolder2("bar"))\n \n         persistentDir = PersistentResourceDirectory(root)\n-        provideUtility(persistentDir, provides=IResourceDirectory, name=u\'persistent\')\n+        provideUtility(persistentDir, provides=IResourceDirectory, name="persistent")\n \n-        resources = getAllResources(TEST_FORMAT, filter=lambda dir: dir.__name__ != \'foo\')\n+        resources = getAllResources(\n+            TEST_FORMAT, filter=lambda dir: dir.__name__ != "foo"\n+        )\n \n         self.assertEqual(\n-                resources,\n-                {\'bar\': None,\n-                 \'manifest-test\': {\'bar\': \'baz\',\n-                                   \'description\': None,\n-                                   \'title\': \'Manifest test\'}}\n-            )\n+            resources,\n+            {\n+                "bar": None,\n+                "manifest-test": {\n+                    "bar": "baz",\n+                    "description": None,\n+                    "title": "Manifest test",\n+                },\n+            },\n+        )\n \n     def test_get_zodb_resources(self):\n-        app = self.layer[\'app\']\n+        app = self.layer["app"]\n \n-        foo = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'foo\'))\n-        provideUtility(foo, provides=IResourceDirectory, name=u\'++demo++foo\')\n+        foo = FilesystemResourceDirectory(os.path.join(test_dir_path, "demo", "foo"))\n+        provideUtility(foo, provides=IResourceDirectory, name="++demo++foo")\n \n-        manifestTest = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'manifest-test\'))\n-        provideUtility(manifestTest, provides=IResourceDirectory, name=u\'++demo++manifest-test\')\n+        manifestTest = FilesystemResourceDirectory(\n+            os.path.join(test_dir_path, "demo", "manifest-test")\n+        )\n+        provideUtility(\n+            manifestTest, provides=IResourceDirectory, name="++demo++manifest-test"\n+        )\n \n-        root = BTreeFolder2(\'portal_resources\')\n-        app._setOb(\'portal_resources\', root)\n-        root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n-        root[\'demo\']._setOb(\'bar\', BTreeFolder2(\'bar\'))\n-        root[\'demo\']._setOb(\'baz\', BTreeFolder2(\'baz\'))\n+        root = BTreeFolder2("portal_resources")\n+        app._setOb("portal_resources", root)\n+        root._setOb("demo", BTreeFolder2("demo"))\n+        root["demo"]._setOb("bar", BTreeFolder2("bar"))\n+        root["demo"]._setOb("baz", BTreeFolder2("baz"))\n \n         persistentDir = PersistentResourceDirectory(root)\n-        provideUtility(persistentDir, provides=IResourceDirectory, name=u\'persistent\')\n+        provideUtility(persistentDir, provides=IResourceDirectory, name="persistent")\n \n         resources = getZODBResources(TEST_FORMAT)\n \n-        self.assertEqual(\n-                resources,\n-                {\'bar\': None,\n-                 \'baz\': None}\n-            )\n+        self.assertEqual(resources, {"bar": None, "baz": None})\n \n     def test_get_zodb_resources_filter(self):\n-        app = self.layer[\'app\']\n+        app = self.layer["app"]\n \n-        foo = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'foo\'))\n-        provideUtility(foo, provides=IResourceDirectory, name=u\'++demo++foo\')\n+        foo = FilesystemResourceDirectory(os.path.join(test_dir_path, "demo", "foo"))\n+        provideUtility(foo, provides=IResourceDirectory, name="++demo++foo")\n \n-        manifestTest = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'manifest-test\'))\n-        provideUtility(manifestTest, provides=IResourceDirectory, name=u\'++demo++manifest-test\')\n+        manifestTest = FilesystemResourceDirectory(\n+            os.path.join(test_dir_path, "demo", "manifest-test")\n+        )\n+        provideUtility(\n+            manifestTest, provides=IResourceDirectory, name="++demo++manifest-test"\n+        )\n \n-        root = BTreeFolder2(\'portal_resources\')\n-        app._setOb(\'portal_resources\', root)\n-        root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n-        root[\'demo\']._setOb(\'bar\', BTreeFolder2(\'bar\'))\n-        root[\'demo\']._setOb(\'baz\', BTreeFolder2(\'baz\'))\n+        root = BTreeFolder2("portal_resources")\n+        app._setOb("portal_resources", root)\n+        root._setOb("demo", BTreeFolder2("demo"))\n+        root["demo"]._setOb("bar", BTreeFolder2("bar"))\n+        root["demo"]._setOb("baz", BTreeFolder2("baz"))\n \n         persistentDir = PersistentResourceDirectory(root)\n-        provideUtility(persistentDir, provides=IResourceDirectory, name=u\'persistent\')\n+        provideUtility(persistentDir, provides=IResourceDirectory, name="persistent")\n \n-        resources = getZODBResources(TEST_FORMAT, filter=lambda dir: dir.__name__ != \'baz\')\n+        resources = getZODBResources(\n+            TEST_FORMAT, filter=lambda dir: dir.__name__ != "baz"\n+        )\n \n-        self.assertEqual(\n-                resources,\n-                {\'bar\': None}\n-            )\n+        self.assertEqual(resources, {"bar": None})\ndiff --git a/plone/resource/tests/test_traversal.py b/plone/resource/tests/test_traversal.py\nindex 50bb3d8..d1818b6 100644\n--- a/plone/resource/tests/test_traversal.py\n+++ b/plone/resource/tests/test_traversal.py\n@@ -1,12 +1,11 @@\n-# -*- coding: utf-8 -*-\n from plone.resource.directory import FilesystemResourceDirectory\n from plone.resource.directory import PersistentResourceDirectory\n from plone.resource.file import FilesystemFile\n from plone.resource.interfaces import IResourceDirectory\n from plone.resource.interfaces import IUniqueResourceRequest\n from plone.resource.testing import DEMO_TRAVERSER_FUNCTIONAL_TESTING\n-from plone.testing import zope\n from plone.testing import zca\n+from plone.testing import zope\n from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2\n from zExceptions import Forbidden\n from zExceptions import NotFound\n@@ -17,14 +16,14 @@\n \n \n base_path = os.path.dirname(__file__)\n-test_dir_path = os.path.join(base_path, \'resources\')\n+test_dir_path = os.path.join(base_path, "resources")\n \n \n class TraversalTestCase(unittest.TestCase):\n     layer = DEMO_TRAVERSER_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer.get(\'app\')\n+        self.app = self.layer.get("app")\n         zca.pushGlobalRegistry()\n \n     def tearDown(self):\n@@ -32,85 +31,81 @@ def tearDown(self):\n \n     def test_traverse_packaged_type_specific_directory(self):\n         dire = FilesystemResourceDirectory(test_dir_path)\n-        provideUtility(dire, provides=IResourceDirectory, name=u\'++demo++foo\')\n+        provideUtility(dire, provides=IResourceDirectory, name="++demo++foo")\n \n-        res = self.app.restrictedTraverse(\'++demo++foo\')\n-        self.assertTrue(res.directory.endswith(\'resources\'))\n+        res = self.app.restrictedTraverse("++demo++foo")\n+        self.assertTrue(res.directory.endswith("resources"))\n \n         self.assertRaises(\n             NotFound,\n             self.app.restrictedTraverse,\n-            \'++demo++asdf\',\n+            "++demo++asdf",\n         )\n \n     def test_traverse_packaged_type_specific_file(self):\n-        dire = FilesystemResourceDirectory(\n-            os.path.join(test_dir_path, \'demo\', \'foo\')\n-        )\n-        provideUtility(dire, provides=IResourceDirectory, name=u\'++demo++foo\')\n+        dire = FilesystemResourceDirectory(os.path.join(test_dir_path, "demo", "foo"))\n+        provideUtility(dire, provides=IResourceDirectory, name="++demo++foo")\n \n-        res = self.app.restrictedTraverse(\'++demo++foo/test.html\')\n+        res = self.app.restrictedTraverse("++demo++foo/test.html")\n         self.assertTrue(isinstance(res, FilesystemFile))\n \n     def test_traverse_global_directory(self):\n         dire = FilesystemResourceDirectory(test_dir_path)\n-        provideUtility(dire, provides=IResourceDirectory, name=u\'\')\n+        provideUtility(dire, provides=IResourceDirectory, name="")\n \n-        res = self.app.restrictedTraverse(\'++demo++foo\')\n-        self.assertTrue(res.directory.endswith(\'resources/demo/foo\'))\n+        res = self.app.restrictedTraverse("++demo++foo")\n+        self.assertTrue(res.directory.endswith("resources/demo/foo"))\n \n-        self.assertRaises(NotFound, self.app.restrictedTraverse, \'++demo++bar\')\n+        self.assertRaises(NotFound, self.app.restrictedTraverse, "++demo++bar")\n \n     def test_traverse_persistent_directory(self):\n-        root = BTreeFolder2(\'portal_resources\')\n-        self.app._setOb(\'portal_resources\', root)\n-        root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n-        root.demo._setOb(\'foo\', BTreeFolder2(\'foo\'))\n+        root = BTreeFolder2("portal_resources")\n+        self.app._setOb("portal_resources", root)\n+        root._setOb("demo", BTreeFolder2("demo"))\n+        root.demo._setOb("foo", BTreeFolder2("foo"))\n \n         dire = PersistentResourceDirectory(root)\n-        provideUtility(dire, provides=IResourceDirectory, name=u\'persistent\')\n+        provideUtility(dire, provides=IResourceDirectory, name="persistent")\n \n-        res = self.app.restrictedTraverse(\'++demo++foo\')\n+        res = self.app.restrictedTraverse("++demo++foo")\n         self.assertEqual(\n-            \'portal_resources/demo/foo\', \'/\'.join(\n+            "portal_resources/demo/foo",\n+            "/".join(\n                 res.context.getPhysicalPath(),\n             ),\n         )\n \n-        self.assertRaises(NotFound, self.app.restrictedTraverse, \'++demo++bar\')\n+        self.assertRaises(NotFound, self.app.restrictedTraverse, "++demo++bar")\n \n     def test_publish_resource(self):\n         dire = FilesystemResourceDirectory(test_dir_path)\n-        provideUtility(dire, provides=IResourceDirectory, name=u\'\')\n+        provideUtility(dire, provides=IResourceDirectory, name="")\n \n         browser = zope.Browser(self.app)\n         browser.handleErrors = False\n \n-        browser.open(self.app.absolute_url() + \'/++demo++foo/test.html\')\n-        self.assertEqual(\'asdf\', browser.contents)\n+        browser.open(self.app.absolute_url() + "/++demo++foo/test.html")\n+        self.assertEqual("asdf", browser.contents)\n \n     def test_traverse_unique_resource_marks_request(self):\n         dire = FilesystemResourceDirectory(test_dir_path)\n-        provideUtility(dire, provides=IResourceDirectory, name=u\'\')\n+        provideUtility(dire, provides=IResourceDirectory, name="")\n \n-        self.app.restrictedTraverse(\n-            \'++demo++foo/++unique++bar/test.html\'\n-        )\n+        self.app.restrictedTraverse("++demo++foo/++unique++bar/test.html")\n         self.assertTrue(IUniqueResourceRequest.providedBy(self.app.REQUEST))\n \n     def test_publish_unique_resource(self):\n         dire = FilesystemResourceDirectory(test_dir_path)\n-        provideUtility(dire, provides=IResourceDirectory, name=u\'\')\n+        provideUtility(dire, provides=IResourceDirectory, name="")\n \n         browser = zope.Browser(self.app)\n         browser.handleErrors = False\n \n-        browser.open(\n-            self.app.absolute_url() + \'/++demo++foo/++unique++bar/test.html\'\n-        )\n-        self.assertEqual(\'asdf\', browser.contents)\n+        browser.open(self.app.absolute_url() + "/++demo++foo/++unique++bar/test.html")\n+        self.assertEqual("asdf", browser.contents)\n \n     def test_forbidden_resource_path_traversal(self):\n         resource_directory = FilesystemResourceDirectory(test_dir_path)\n-        self.assertRaises(Forbidden, resource_directory._resolveSubpath,\n-                          \'../../../../setup.py\')\n+        self.assertRaises(\n+            Forbidden, resource_directory._resolveSubpath, "../../../../setup.py"\n+        )\ndiff --git a/plone/resource/tests/test_utils.py b/plone/resource/tests/test_utils.py\nindex 9b8f000..57ccfb0 100644\n--- a/plone/resource/tests/test_utils.py\n+++ b/plone/resource/tests/test_utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.resource.directory import FilesystemResourceDirectory\n from plone.resource.directory import PersistentResourceDirectory\n from plone.resource.interfaces import IResourceDirectory\n@@ -12,55 +11,60 @@\n \n \n base_path = os.path.dirname(__file__)\n-test_dir_path = os.path.join(base_path, \'resources\')\n+test_dir_path = os.path.join(base_path, "resources")\n \n \n class TraversalTestCase(unittest.TestCase):\n     layer = DEMO_TRAVERSER_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer.get(\'app\')\n+        self.app = self.layer.get("app")\n         zca.pushGlobalRegistry()\n \n         # set up all three types of directory\n-        package_dir_path = os.path.join(test_dir_path, \'demo\', \'foo\')\n+        package_dir_path = os.path.join(test_dir_path, "demo", "foo")\n         self.package_dir = dir = FilesystemResourceDirectory(package_dir_path)\n-        provideUtility(dir, provides=IResourceDirectory, name=u\'++demo++foo\')\n+        provideUtility(dir, provides=IResourceDirectory, name="++demo++foo")\n \n         self.global_dir = dir = FilesystemResourceDirectory(test_dir_path)\n-        provideUtility(dir, provides=IResourceDirectory, name=u\'\')\n+        provideUtility(dir, provides=IResourceDirectory, name="")\n \n-        root = BTreeFolder2(\'portal_resources\')\n-        self.app._setOb(\'portal_resources\', root)\n-        root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n-        root.demo._setOb(\'foo\', BTreeFolder2(\'foo\'))\n+        root = BTreeFolder2("portal_resources")\n+        self.app._setOb("portal_resources", root)\n+        root._setOb("demo", BTreeFolder2("demo"))\n+        root.demo._setOb("foo", BTreeFolder2("foo"))\n         self.zodb_dir = dir = PersistentResourceDirectory(root)\n-        provideUtility(dir, provides=IResourceDirectory, name=u\'persistent\')\n+        provideUtility(dir, provides=IResourceDirectory, name="persistent")\n \n         # We don\'t want a false positive for the following.\n-        provideUtility(dir, provides=IResourceDirectory, name=u\'++bogus++foo\')\n+        provideUtility(dir, provides=IResourceDirectory, name="++bogus++foo")\n \n     def tearDown(self):\n         zca.popGlobalRegistry()\n \n     def test_iterDirectoriesOfType(self):\n         from plone.resource.utils import iterDirectoriesOfType\n-        dirs = list(iterDirectoriesOfType(\'demo\'))\n+\n+        dirs = list(iterDirectoriesOfType("demo"))\n         self.assertEqual(2, len(dirs))\n-        self.assertTrue(dirs[0].context.aq_base is\n-                        self.zodb_dir[\'demo\'][\'foo\'].context.aq_base)\n-        self.assertTrue(dirs[1].directory ==\n-                        self.global_dir[\'demo\'][\'manifest-test\'].directory)\n+        self.assertTrue(\n+            dirs[0].context.aq_base is self.zodb_dir["demo"]["foo"].context.aq_base\n+        )\n+        self.assertTrue(\n+            dirs[1].directory == self.global_dir["demo"]["manifest-test"].directory\n+        )\n \n     def test_iterDirectoriesOfType_dont_filter_duplicates(self):\n         from plone.resource.utils import iterDirectoriesOfType\n-        dirs = list(iterDirectoriesOfType(\'demo\', filter_duplicates=False))\n+\n+        dirs = list(iterDirectoriesOfType("demo", filter_duplicates=False))\n         self.assertEqual(4, len(dirs))\n-        self.assertTrue(dirs[0].context.aq_base is\n-                        self.zodb_dir[\'demo\'][\'foo\'].context.aq_base)\n+        self.assertTrue(\n+            dirs[0].context.aq_base is self.zodb_dir["demo"]["foo"].context.aq_base\n+        )\n         unordered_entries = [\n-            self.global_dir[\'demo\'][\'foo\'].directory,\n-            self.global_dir[\'demo\'][\'manifest-test\'].directory\n+            self.global_dir["demo"]["foo"].directory,\n+            self.global_dir["demo"]["manifest-test"].directory,\n         ]\n         self.assertIn(dirs[1].directory, unordered_entries)\n         self.assertIn(dirs[2].directory, unordered_entries)\n@@ -71,22 +75,28 @@ def test_cloneDirectory(self):\n         from plone.resource.directory import PersistentResourceDirectory\n         from plone.resource.utils import cloneResourceDirectory\n \n-        root = BTreeFolder2(\'portal_resources\')\n-        root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n-        root[\'demo\']._setOb(\'foo\', BTreeFolder2(\'foo\'))\n-        root[\'demo\']._setOb(\'bar\', BTreeFolder2(\'bar\'))\n+        root = BTreeFolder2("portal_resources")\n+        root._setOb("demo", BTreeFolder2("demo"))\n+        root["demo"]._setOb("foo", BTreeFolder2("foo"))\n+        root["demo"]._setOb("bar", BTreeFolder2("bar"))\n \n-        source = PersistentResourceDirectory(root[\'demo\'][\'foo\'])\n-        target = PersistentResourceDirectory(root[\'demo\'][\'bar\'])\n+        source = PersistentResourceDirectory(root["demo"]["foo"])\n+        target = PersistentResourceDirectory(root["demo"]["bar"])\n \n-        source.writeFile(\'file1.txt\', b\'file1\')\n-        source.writeFile(\'subdir1/file2.txt\', b\'file2\')\n-        source.makeDirectory(\'subdir2\')\n+        source.writeFile("file1.txt", b"file1")\n+        source.writeFile("subdir1/file2.txt", b"file2")\n+        source.makeDirectory("subdir2")\n \n         cloneResourceDirectory(source, target)\n \n         self.assertEqual(source.listDirectory(), target.listDirectory())\n-        self.assertEqual(source[\'subdir1\'].listDirectory(), target[\'subdir1\'].listDirectory())\n-        self.assertEqual(source[\'subdir2\'].listDirectory(), target[\'subdir2\'].listDirectory())\n-        self.assertEqual(source.readFile(\'file1.txt\'), target.readFile(\'file1.txt\'))\n-        self.assertEqual(source.readFile(\'subdir1/file2.txt\'), target.readFile(\'subdir1/file2.txt\'))\n+        self.assertEqual(\n+            source["subdir1"].listDirectory(), target["subdir1"].listDirectory()\n+        )\n+        self.assertEqual(\n+            source["subdir2"].listDirectory(), target["subdir2"].listDirectory()\n+        )\n+        self.assertEqual(source.readFile("file1.txt"), target.readFile("file1.txt"))\n+        self.assertEqual(\n+            source.readFile("subdir1/file2.txt"), target.readFile("subdir1/file2.txt")\n+        )\ndiff --git a/plone/resource/tests/test_zcml.py b/plone/resource/tests/test_zcml.py\nindex 6d5043e..1b7e561 100644\n--- a/plone/resource/tests/test_zcml.py\n+++ b/plone/resource/tests/test_zcml.py\n@@ -1,27 +1,29 @@\n-# -*- coding: utf-8 -*-\n-import os.path\n-import unittest\n-\n+from io import StringIO\n from plone.resource.interfaces import IResourceDirectory\n-from six import StringIO\n from zope.component import getUtility\n from zope.component.testing import tearDown\n from zope.configuration.exceptions import ConfigurationError\n-from zope.configuration.xmlconfig import XMLConfig, xmlconfig\n+from zope.configuration.xmlconfig import XMLConfig\n+from zope.configuration.xmlconfig import xmlconfig\n+\n+import os.path\n+import unittest\n \n \n def clearZCML(test=None):\n     # Copy from ``zope.component.tests.examples``\n-    from zope.configuration.xmlconfig import XMLConfig\n-    import zope.component\n     from zope.component.testing import setUp\n     from zope.component.testing import tearDown\n+    from zope.configuration.xmlconfig import XMLConfig\n+\n+    import zope.component\n+\n     tearDown()\n     setUp()\n-    XMLConfig(\'meta.zcml\', zope.component)()\n+    XMLConfig("meta.zcml", zope.component)()\n \n \n-def runSnippet(snippet, dist=\'plone.resource.tests\'):\n+def runSnippet(snippet, dist="plone.resource.tests"):\n     template = """\\\n     <configure xmlns="http://namespaces.zope.org/zope"\n                xmlns:plone="http://namespaces.plone.org/plone"\n@@ -29,83 +31,93 @@ def runSnippet(snippet, dist=\'plone.resource.tests\'):\n                %s>\n     %s\n     </configure>"""\n-    dist = \'package="%s"\' % dist if dist else \'\'\n+    dist = \'package="%s"\' % dist if dist else ""\n     xmlconfig(StringIO(template % (dist, snippet)))\n \n \n class ZCMLTestCase(unittest.TestCase):\n-\n     def setUp(self):\n         clearZCML()\n         import plone.resource\n-        XMLConfig(\'meta.zcml\', plone.resource)()\n+\n+        XMLConfig("meta.zcml", plone.resource)()\n \n     def tearDown(self):\n         tearDown()\n \n     def test_dist_with_name_and_type(self):\n-        runSnippet("""\n+        runSnippet(\n+            """\n         <plone:static\n           name="foo"\n           type="theme"\n           directory="resources"\n           />\n-        """)\n+        """\n+        )\n \n-        res = getUtility(IResourceDirectory, name=\'++theme++foo\')\n-        self.assertTrue(res.directory.endswith(os.path.join(\'plone\', \'resource\', \'tests\', \'resources\')))\n+        res = getUtility(IResourceDirectory, name="++theme++foo")\n+        self.assertTrue(\n+            res.directory.endswith(\n+                os.path.join("plone", "resource", "tests", "resources")\n+            )\n+        )\n \n     def test_dist_rejects_with_missing_type(self):\n         # resource directories in distributions must be registered with a type\n-        self.assertRaises(ConfigurationError,\n+        self.assertRaises(\n+            ConfigurationError,\n             runSnippet,\n             """<plone:static\n               name="foo"\n               directory="resources"\n-              />"""\n-            )\n+              />""",\n+        )\n \n     def test_dist_with_type_only(self):\n-        runSnippet("""\n+        runSnippet(\n+            """\n         <plone:static\n           type="theme"\n           directory="resources"\n           />\n-        """)\n+        """\n+        )\n \n-        getUtility(IResourceDirectory, name=\'++theme++plone.resource.tests\')\n+        getUtility(IResourceDirectory, name="++theme++plone.resource.tests")\n \n     def test_dist_rejects_absolute_directory(self):\n-        self.assertRaises(ConfigurationError,\n-            runSnippet,\n-            """<plone:static directory="/" />"""\n-            )\n+        self.assertRaises(\n+            ConfigurationError, runSnippet, """<plone:static directory="/" />"""\n+        )\n \n     def test_global(self):\n-        runSnippet("""\n+        runSnippet(\n+            """\n         <plone:static\n           directory="/"\n           />\n-        """, dist=None)\n+        """,\n+            dist=None,\n+        )\n \n         res = getUtility(IResourceDirectory)\n-        self.assertEqual(\'/\', res.directory)\n+        self.assertEqual("/", res.directory)\n \n     def test_global_rejects_relative_directory(self):\n-        self.assertRaises(ConfigurationError,\n+        self.assertRaises(\n+            ConfigurationError,\n             runSnippet,\n             """<plone:static directory="foobar" />""",\n-            dist=None\n-            )\n+            dist=None,\n+        )\n \n     def test_missing_directory(self):\n-        self.assertRaises(ConfigurationError,\n-            runSnippet,\n-            """<plone:static directory="foobar" />"""\n-            )\n+        self.assertRaises(\n+            ConfigurationError, runSnippet, """<plone:static directory="foobar" />"""\n+        )\n \n     def test_rejects_parent_directory_traversal(self):\n-        self.assertRaises(ConfigurationError,\n-            runSnippet,\n-            """<plone:static directory="../tests" />"""\n-            )\n+        self.assertRaises(\n+            ConfigurationError, runSnippet, """<plone:static directory="../tests" />"""\n+        )\ndiff --git a/plone/resource/tests/test_zip_download.py b/plone/resource/tests/test_zip_download.py\nindex b6fd122..7076709 100644\n--- a/plone/resource/tests/test_zip_download.py\n+++ b/plone/resource/tests/test_zip_download.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from io import BytesIO\n from OFS.Image import File\n from plone.resource.directory import FilesystemResourceDirectory\n@@ -15,75 +14,75 @@\n \n \n base_path = os.path.dirname(__file__)\n-test_dir_path = os.path.join(base_path, \'resources\')\n+test_dir_path = os.path.join(base_path, "resources")\n \n \n class ZipDownloadTestCase(unittest.TestCase):\n     layer = DEMO_TRAVERSER_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer.get(\'app\')\n+        self.app = self.layer.get("app")\n         zca.pushGlobalRegistry()\n \n     def tearDown(self):\n         zca.popGlobalRegistry()\n \n     def test_traverse_packaged_type_specific_directory(self):\n-        dir = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'foo\'))\n-        provideUtility(dir, provides=IResourceDirectory, name=u\'++demo++foo\')\n+        dir = FilesystemResourceDirectory(os.path.join(test_dir_path, "demo", "foo"))\n+        provideUtility(dir, provides=IResourceDirectory, name="++demo++foo")\n \n         out = BytesIO()\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         response = request.response\n         response.stdout = out\n \n-        zipview = self.app.unrestrictedTraverse(\'++demo++foo/@@download-zip\')\n+        zipview = self.app.unrestrictedTraverse("++demo++foo/@@download-zip")\n         zipview()\n \n         zf = zipfile.ZipFile(out)\n \n-        self.assertTrue(\'foo/test.html\' in zf.namelist())\n-        self.assertEqual(b\'asdf\', zf.open(\'foo/test.html\').read())\n+        self.assertTrue("foo/test.html" in zf.namelist())\n+        self.assertEqual(b"asdf", zf.open("foo/test.html").read())\n \n     def test_traverse_global_directory(self):\n         dir = FilesystemResourceDirectory(test_dir_path)\n-        provideUtility(dir, provides=IResourceDirectory, name=u\'\')\n+        provideUtility(dir, provides=IResourceDirectory, name="")\n \n         out = BytesIO()\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         response = request.response\n         response.stdout = out\n \n-        zipview = self.app.unrestrictedTraverse(\'++demo++foo/@@download-zip\')\n+        zipview = self.app.unrestrictedTraverse("++demo++foo/@@download-zip")\n         zipview()\n \n         zf = zipfile.ZipFile(out)\n \n-        self.assertTrue(\'foo/test.html\' in zf.namelist())\n-        self.assertEqual(b\'asdf\', zf.open(\'foo/test.html\').read())\n+        self.assertTrue("foo/test.html" in zf.namelist())\n+        self.assertEqual(b"asdf", zf.open("foo/test.html").read())\n \n     def test_traverse_persistent_directory(self):\n-        root = BTreeFolder2(\'portal_resources\')\n-        self.app._setOb(\'portal_resources\', root)\n-        root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n-        root[\'demo\']._setOb(\'foo\', BTreeFolder2(\'foo\'))\n-        root[\'demo\'][\'foo\']._setOb(\n-            \'test.html\',\n-            File(\'test.html\', \'test.html\', b\'asdf\'),\n+        root = BTreeFolder2("portal_resources")\n+        self.app._setOb("portal_resources", root)\n+        root._setOb("demo", BTreeFolder2("demo"))\n+        root["demo"]._setOb("foo", BTreeFolder2("foo"))\n+        root["demo"]["foo"]._setOb(\n+            "test.html",\n+            File("test.html", "test.html", b"asdf"),\n         )\n \n         dir = PersistentResourceDirectory(root)\n-        provideUtility(dir, provides=IResourceDirectory, name=u\'persistent\')\n+        provideUtility(dir, provides=IResourceDirectory, name="persistent")\n \n         out = BytesIO()\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         response = request.response\n         response.stdout = out\n \n-        zipview = self.app.unrestrictedTraverse(\'++demo++foo/@@download-zip\')\n+        zipview = self.app.unrestrictedTraverse("++demo++foo/@@download-zip")\n         zipview()\n \n         zf = zipfile.ZipFile(out)\n \n-        self.assertTrue(\'foo/test.html\' in zf.namelist())\n-        self.assertEqual(b\'asdf\', zf.open(\'foo/test.html\').read())\n+        self.assertTrue("foo/test.html" in zf.namelist())\n+        self.assertEqual(b"asdf", zf.open("foo/test.html").read())\ndiff --git a/plone/resource/traversal.py b/plone/resource/traversal.py\nindex ae99554..611bde1 100644\n--- a/plone/resource/traversal.py\n+++ b/plone/resource/traversal.py\n@@ -1,14 +1,13 @@\n-# -*- coding: utf-8 -*-\n from plone.resource.interfaces import IUniqueResourceRequest\n from plone.resource.utils import queryResourceDirectory\n-from six.moves import urllib\n from zExceptions import NotFound\n from zope.interface import alsoProvides\n from zope.traversing.namespace import SimpleHandler\n \n+import urllib\n \n-class ResourceTraverser(SimpleHandler):\n \n+class ResourceTraverser(SimpleHandler):\n     name = None\n \n     def __init__(self, context, request=None):\ndiff --git a/plone/resource/utils.py b/plone/resource/utils.py\nindex 510ca40..b861784 100644\n--- a/plone/resource/utils.py\n+++ b/plone/resource/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.resource.interfaces import IResourceDirectory\n from zExceptions import NotFound\n from zope.component import getUtilitiesFor\n@@ -23,7 +22,7 @@ def iterDirectoriesOfType(type, filter_duplicates=True):\n \n     # 1. Persistent resource directory:\n     #    List (persistent resource directory)/$type\n-    res = queryUtility(IResourceDirectory, name=u\'persistent\')\n+    res = queryUtility(IResourceDirectory, name="persistent")\n     if res and res.isDirectory(type):\n         typedir = res[type]\n         for dirname in typedir.listDirectory():\n@@ -34,7 +33,7 @@ def iterDirectoriesOfType(type, filter_duplicates=True):\n \n     # 2. Global resource directory:\n     #    List (global resource directory)/$type\n-    res = queryUtility(IResourceDirectory, name=u\'\')\n+    res = queryUtility(IResourceDirectory, name="")\n     if res and res.isDirectory(type):\n         typedir = res[type]\n         for dirname in typedir.listDirectory():\n@@ -46,7 +45,7 @@ def iterDirectoriesOfType(type, filter_duplicates=True):\n \n     # 3. Packaged resource directories:\n     #    Scan the registry\n-    identifier = \'++%s++\' % type\n+    identifier = "++%s++" % type\n     for name, u in getUtilitiesFor(IResourceDirectory):\n         if name.startswith(identifier):\n             if not filter_duplicates or u.__name__ not in found:\n@@ -60,25 +59,31 @@ def queryResourceDirectory(type, name):\n \n     # 1. Persistent resource directory:\n     #    Try (persistent resource directory)/$type/$name\n-    res = queryUtility(IResourceDirectory, name=u\'persistent\')\n+    res = queryUtility(IResourceDirectory, name="persistent")\n     if res:\n         try:\n             return res[type][name]\n-        except (KeyError, NotFound,):\n+        except (\n+            KeyError,\n+            NotFound,\n+        ):\n             pass  # pragma: no cover\n \n     # 2. Global resource directory:\n     #    Try (global resource directory)/$type/$name\n-    res = queryUtility(IResourceDirectory, name=u\'\')\n+    res = queryUtility(IResourceDirectory, name="")\n     if res:\n         try:\n             return res[type][name]\n-        except (KeyError, NotFound,):\n+        except (\n+            KeyError,\n+            NotFound,\n+        ):\n             pass  # pragma: no cover\n \n     # 3. Packaged type-specific resource directory:\n     #    Try (directory named after type + name)\n-    identifier = u\'++%s++%s\' % (type, name)\n+    identifier = f"++{type}++{name}"\n     res = queryUtility(IResourceDirectory, name=identifier)\n     if res is not None:\n         return res\n@@ -101,4 +106,3 @@ def cloneResourceDirectory(source, target):\n                 target.writeFile(name, f)\n             finally:\n                 f.close()\n-\ndiff --git a/plone/resource/zcml.py b/plone/resource/zcml.py\nindex d2f802c..f408e33 100644\n--- a/plone/resource/zcml.py\n+++ b/plone/resource/zcml.py\n@@ -1,37 +1,36 @@\n-# -*- coding: utf-8 -*-\n from plone.resource.directory import FilesystemResourceDirectory\n from plone.resource.interfaces import IResourceDirectory\n from zope.component.zcml import handler\n from zope.configuration.exceptions import ConfigurationError\n from zope.interface import Interface\n-from zope.schema import ASCIILine, TextLine\n+from zope.schema import ASCIILine\n+from zope.schema import TextLine\n \n import os.path\n \n \n class IResourceDirectoryDirective(Interface):\n-    """Register resource directories with the global registry.\n-    """\n+    """Register resource directories with the global registry."""\n \n     directory = TextLine(\n-        title=u\'Directory path\',\n-        description=u\'Path relative to the package.\',\n-        required=True\n-        )\n+        title="Directory path",\n+        description="Path relative to the package.",\n+        required=True,\n+    )\n \n     name = TextLine(\n-        title=u\'Name\',\n-        description=u\'Name of the directory. If not specified, the name of \'\n-                    u\'the current package is used.\',\n+        title="Name",\n+        description="Name of the directory. If not specified, the name of "\n+        "the current package is used.",\n         required=False,\n-        )\n+    )\n \n     type = ASCIILine(\n-        title=u\'Resource type\',\n+        title="Resource type",\n         # XXX use a Choice field + vocab\n         # vocabulary = \'plone.resource.vocab.ResourceTypes\',\n         required=False,\n-        )\n+    )\n \n \n def registerResourceDirectory(_context, directory, name=None, type=None):\n@@ -43,37 +42,43 @@ def registerResourceDirectory(_context, directory, name=None, type=None):\n     """\n \n     if _context.package and os.path.isabs(directory):\n-        raise ConfigurationError(\'Resource directories in distributions must \'\n-                                 \'be specified as relative paths.\')\n+        raise ConfigurationError(\n+            "Resource directories in distributions must "\n+            "be specified as relative paths."\n+        )\n     elif _context.package:\n         directory = _context.path(directory)\n     elif not _context.package and not os.path.isabs(directory):\n-        raise ConfigurationError(\'Global resource directories must be \'\n-                                 \'specified as absolute paths.\')\n+        raise ConfigurationError(\n+            "Global resource directories must be " "specified as absolute paths."\n+        )\n \n     # TODO: make sure this works in Windows\n-    if \'..\' in directory.split(\'/\'):\n-        raise ConfigurationError(\'Traversing to parent directories \'\n-                                 \'via .. is not allowed.\')\n+    if ".." in directory.split("/"):\n+        raise ConfigurationError(\n+            "Traversing to parent directories " "via .. is not allowed."\n+        )\n     if not os.path.exists(directory):\n-        raise IOError(\'Directory not found: %s\' % directory)\n+        raise OSError("Directory not found: %s" % directory)\n \n     if name is None and _context.package:\n         name = _context.package.__name__\n \n     if type:\n-        identifier = \'++%s++%s\' % (type, name or \'\')\n+        identifier = "++{}++{}".format(type, name or "")\n     else:\n         if _context.package:\n-            raise ConfigurationError(\'Resource directories in distributions \'\n-                                     \'must have a specified resource type.\')\n-        identifier = name or \'\'\n+            raise ConfigurationError(\n+                "Resource directories in distributions "\n+                "must have a specified resource type."\n+            )\n+        identifier = name or ""\n \n-    directory = os.path.sep.join(directory.split(\'/\'))\n+    directory = os.path.sep.join(directory.split("/"))\n     directory = FilesystemResourceDirectory(directory, name)\n \n     _context.action(\n-        discriminator=(\'plone:static\', identifier),\n+        discriminator=("plone:static", identifier),\n         callable=handler,\n-        args=(\'registerUtility\', directory, IResourceDirectory, identifier),\n-        )\n+        args=("registerUtility", directory, IResourceDirectory, identifier),\n+    )\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..639f77a 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,65 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex a9ad7b9..1b535b4 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,61 +1,54 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n \n-version = \'2.1.5.dev0\'\n+version = "3.0.0.dev0"\n \n test_requires = [\n-    \'plone.app.testing\',\n+    "plone.app.testing",\n+    "plone.testing",\n ]\n \n setup(\n-    name=\'plone.resource\',\n+    name="plone.resource",\n     version=version,\n     description="Static files for Plone",\n-    long_description=(\n-        open("README.rst").read() +\n-        "\\n" +\n-        open("CHANGES.rst").read()\n-    ),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n+        "Framework :: Zope :: 5",\n         "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'plone resource\',\n-    author=\'David Glick, Plone Foundation\',\n-    author_email=\'davidglick@groundwire.org\',\n-    url=\'https://pypi.org/project/plone.resource\',\n-    license=\'GPL version 2 or later\',\n+    keywords="plone resource",\n+    author="David Glick, Plone Foundation",\n+    author_email="davidglick@groundwire.org",\n+    url="https://pypi.org/project/plone.resource",\n+    license="GPL version 2 or later",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=[\n-        \'plone.caching\',\n-        \'python-dateutil\',\n-        \'setuptools\',\n-        \'z3c.caching\',\n-        \'zope.component\',\n-        \'zope.configuration\',\n-        \'zope.filerepresentation\',\n-        \'zope.interface\',\n-        \'zope.publisher\',\n-        \'zope.schema\',\n-        \'zope.traversing\',\n-        \'Zope2\',\n-        \'six\',\n+        "plone.caching",\n+        "python-dateutil",\n+        "setuptools",\n+        "z3c.caching",\n+        "Zope",\n+        "Products.BTreeFolder2",\n+        "Products.CMFCore",\n+        "Products.GenericSetup",\n     ],\n     extras_require={\n-        \'test\': test_requires,\n+        "test": test_requires,\n     },\n     entry_points="""\n     [z3c.autoinclude.plugin]\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..0c73f0c\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,76 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies\n+skip_install = true\n+deps =\n+    build\n+    z3c.dependencychecker==2.11\n+commands =\n+    python -m build --sdist --no-isolation\n+    dependencychecker\n+\n+[testenv:dependencies-graph]\n+description = generate a graph out of the package\'s dependencies\n+deps =\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+use_develop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.resource {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+use_develop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.resource {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

