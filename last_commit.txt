Repository: mockup


Branch: refs/heads/master
Date: 2022-03-31T12:47:34+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/b5595ea1b9749ada58fd3369427869d800f5b3cb

Cleanup.

Files changed:
M src/pat/structure/js/views/table.js

b'diff --git a/src/pat/structure/js/views/table.js b/src/pat/structure/js/views/table.js\nindex 09ce98369..118e55003 100644\n--- a/src/pat/structure/js/views/table.js\n+++ b/src/pat/structure/js/views/table.js\n@@ -86,7 +86,7 @@ export default BaseView.extend({\n         this.$el.html(\n             this.template({\n                 _t: _t,\n-                homeIcon: await utils.resolveIcon(\'house\'),\n+                homeIcon: await utils.resolveIcon("house"),\n                 pathParts: _.filter(\n                     this.app.getCurrentPath().split("/").slice(1),\n                     (val) => {\n'

Repository: mockup


Branch: refs/heads/master
Date: 2022-03-31T12:48:31+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/73ee56f53de385b1583a03c76a7d9877615ba683

maint(pat structure): Slightly simplify code for awaiting table row rendering end.

Files changed:
M src/pat/structure/js/views/table.js

b'diff --git a/src/pat/structure/js/views/table.js b/src/pat/structure/js/views/table.js\nindex 118e55003..8ee848a19 100644\n--- a/src/pat/structure/js/views/table.js\n+++ b/src/pat/structure/js/views/table.js\n@@ -102,6 +102,9 @@ export default BaseView.extend({\n         if (this.collection.length) {\n             const container = this.$("tbody");\n \n+            const collection_length = this.collection.length;\n+            let collection_cnt = 0;\n+\n             this.collection.each(async (result) => {\n                 this.dateColumns.map((col) => {\n                     // empty column instead of displaying "None".\n@@ -121,44 +124,32 @@ export default BaseView.extend({\n                 await view.render();\n                 container.append(view.el);\n \n-                this.el.dispatchEvent(new Event("render_collection"));\n+                // Throw the ``table_row_rendering_finished`` event after all table rows have finished rendering.\n+                collection_cnt++;\n+                if (collection_cnt === collection_length) {\n+                    this.el.dispatchEvent(new Event("table_row_rendering_finished"));\n+                }\n             });\n \n             // NOTE: this is based on the concept of awaiting an event.\n             // See this Stackoverflow answer here:\n             // https://stackoverflow.com/a/44746691/1337474\n-            // For each collection callback above we throw an event "render_collection".\n-            // When the number of thrown "render_collection" events equals the number of collection entries, we throw a "render_collection__finished" event.\n-            // For this "render_collection__finished" event we\'re a-waiting for.\n+            // When the last table row has finished rendering, throw an event.\n+            // For this "table_row_rendering_finished" event we\'re a-waiting for.\n             // And after that we can scan the table.\n-            //\n-            // I agree, this feels weired.\n-            let cnt__render_collection = 0;\n-            events.add_event_listener(\n-                this.el,\n-                "render_collection",\n-                "render_collection__counter__listener",\n-                () => {\n-                    cnt__render_collection++;\n-                    if (cnt__render_collection === this.collection.length) {\n-                        this.el.dispatchEvent(new Event("render_collection__finished"));\n-                    }\n-                }\n-            );\n-            const render_collection__finished = () =>\n+            const table_row_rendering_finished = () =>\n                 new Promise((resolve) =>\n                     events.add_event_listener(\n                         this.el,\n-                        "render_collection__finished",\n-                        "render_collection__finished__listener",\n+                        "table_row_rendering_finished",\n+                        "table_row_rendering_finished__listener",\n                         resolve,\n                         { once: true }\n                     )\n                 );\n \n-            await render_collection__finished();\n-            events.remove_event_listener = (this.el, "render_collection__counter__listener"); // prettier-ignore\n-            events.remove_event_listener = (this.el, "render_collection__finished__listener"); // prettier-ignore\n+            await table_row_rendering_finished();\n+            events.remove_event_listener = (this.el, "table_row_rendering_finished__listener"); // prettier-ignore\n             registry.scan(this.$el);\n         }\n \n'

Repository: mockup


Branch: refs/heads/master
Date: 2022-03-31T14:49:54+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/b6db5fe53ab0bb23d8034713073b9eae9394cd04

Merge pull request #1149 from plone/simplify-structure-tablerow

Simplify structure tablerow

Files changed:
M src/pat/structure/js/views/table.js

b'diff --git a/src/pat/structure/js/views/table.js b/src/pat/structure/js/views/table.js\nindex 09ce98369..8ee848a19 100644\n--- a/src/pat/structure/js/views/table.js\n+++ b/src/pat/structure/js/views/table.js\n@@ -86,7 +86,7 @@ export default BaseView.extend({\n         this.$el.html(\n             this.template({\n                 _t: _t,\n-                homeIcon: await utils.resolveIcon(\'house\'),\n+                homeIcon: await utils.resolveIcon("house"),\n                 pathParts: _.filter(\n                     this.app.getCurrentPath().split("/").slice(1),\n                     (val) => {\n@@ -102,6 +102,9 @@ export default BaseView.extend({\n         if (this.collection.length) {\n             const container = this.$("tbody");\n \n+            const collection_length = this.collection.length;\n+            let collection_cnt = 0;\n+\n             this.collection.each(async (result) => {\n                 this.dateColumns.map((col) => {\n                     // empty column instead of displaying "None".\n@@ -121,44 +124,32 @@ export default BaseView.extend({\n                 await view.render();\n                 container.append(view.el);\n \n-                this.el.dispatchEvent(new Event("render_collection"));\n+                // Throw the ``table_row_rendering_finished`` event after all table rows have finished rendering.\n+                collection_cnt++;\n+                if (collection_cnt === collection_length) {\n+                    this.el.dispatchEvent(new Event("table_row_rendering_finished"));\n+                }\n             });\n \n             // NOTE: this is based on the concept of awaiting an event.\n             // See this Stackoverflow answer here:\n             // https://stackoverflow.com/a/44746691/1337474\n-            // For each collection callback above we throw an event "render_collection".\n-            // When the number of thrown "render_collection" events equals the number of collection entries, we throw a "render_collection__finished" event.\n-            // For this "render_collection__finished" event we\'re a-waiting for.\n+            // When the last table row has finished rendering, throw an event.\n+            // For this "table_row_rendering_finished" event we\'re a-waiting for.\n             // And after that we can scan the table.\n-            //\n-            // I agree, this feels weired.\n-            let cnt__render_collection = 0;\n-            events.add_event_listener(\n-                this.el,\n-                "render_collection",\n-                "render_collection__counter__listener",\n-                () => {\n-                    cnt__render_collection++;\n-                    if (cnt__render_collection === this.collection.length) {\n-                        this.el.dispatchEvent(new Event("render_collection__finished"));\n-                    }\n-                }\n-            );\n-            const render_collection__finished = () =>\n+            const table_row_rendering_finished = () =>\n                 new Promise((resolve) =>\n                     events.add_event_listener(\n                         this.el,\n-                        "render_collection__finished",\n-                        "render_collection__finished__listener",\n+                        "table_row_rendering_finished",\n+                        "table_row_rendering_finished__listener",\n                         resolve,\n                         { once: true }\n                     )\n                 );\n \n-            await render_collection__finished();\n-            events.remove_event_listener = (this.el, "render_collection__counter__listener"); // prettier-ignore\n-            events.remove_event_listener = (this.el, "render_collection__finished__listener"); // prettier-ignore\n+            await table_row_rendering_finished();\n+            events.remove_event_listener = (this.el, "table_row_rendering_finished__listener"); // prettier-ignore\n             registry.scan(this.$el);\n         }\n \n'

