Repository: plone.i18n


Branch: refs/heads/master
Date: 2018-03-21T21:58:57+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.i18n/commit/7e3c9ae950643c860c3969d7806fc116784f6a28

python3 fixes

Files changed:
M plone/i18n/locales/cctld.py
M plone/i18n/locales/countries.py
M plone/i18n/locales/languages.py
M plone/i18n/negotiate/ptsnegotiator.py
M plone/i18n/utility.py

b'diff --git a/plone/i18n/locales/cctld.py b/plone/i18n/locales/cctld.py\nindex 003176d..96b602a 100644\n--- a/plone/i18n/locales/cctld.py\n+++ b/plone/i18n/locales/cctld.py\n@@ -19,7 +19,7 @@ class CcTLDInformation(object):\n     def getAvailableTLDs(self):\n         """Return a sequence of country code top level domains.\n         """\n-        return _tld_to_language.keys()\n+        return list(_tld_to_language.keys())\n \n     def getTLDs(self):\n         """Return a sequence of ccTLDs and their languages.\ndiff --git a/plone/i18n/locales/countries.py b/plone/i18n/locales/countries.py\nindex 01f5075..22e39fe 100644\n--- a/plone/i18n/locales/countries.py\n+++ b/plone/i18n/locales/countries.py\n@@ -14,7 +14,7 @@ class CountryAvailability(object):\n     def getAvailableCountries(self):\n         """Return a sequence of country tags for available countries.\n         """\n-        return _countrylist.keys()\n+        return list(_countrylist.keys())\n \n     def getCountries(self):\n         """Return a sequence of Country objects for available countries.\n@@ -294,4 +294,7 @@ def getCountryListing(self):\n for code in _countrylist:\n     value = _countrylist[code]\n     if u\'name\' in value:\n-        value[u\'name\'] = six.text_type(value[u\'name\'], \'utf-8\')\n+        if six.PY3:\n+            value[u\'name\'] = value[u\'name\']\n+        else:\n+            value[u\'name\'] = unicode(value[u\'name\'], \'utf-8\')\ndiff --git a/plone/i18n/locales/languages.py b/plone/i18n/locales/languages.py\nindex bf797a8..7dc38d4 100644\n--- a/plone/i18n/locales/languages.py\n+++ b/plone/i18n/locales/languages.py\n@@ -15,9 +15,9 @@ class LanguageAvailability(object):\n     def getAvailableLanguages(self, combined=False):\n         """Return a sequence of language tags for available languages.\n         """\n-        languages = _languagelist.keys()\n+        languages = list(_languagelist.keys())\n         if combined:\n-            languages.extend(_combinedlanguagelist.keys())\n+            languages.extend(list(_combinedlanguagelist.keys()))\n         return languages\n \n     def getLanguages(self, combined=False):\n@@ -252,9 +252,15 @@ class MetadataLanguageAvailability(LanguageAvailability):\n for code in _languagelist:\n     value = _languagelist[code]\n     if u\'name\' in value:\n-        value[u\'name\'] = six.text_type(value[u\'name\'], \'utf-8\')\n+        if six.PY3:\n+            value[u\'name\'] = value[u\'name\']\n+        else:\n+            value[u\'name\'] = unicode(value[u\'name\'], \'utf-8\')\n     if u\'native\' in value:\n-        value[u\'native\'] = six.text_type(value[u\'native\'], \'utf-8\')\n+        if six.PY3:\n+            value[u\'native\'] = value[u\'native\']\n+        else:\n+            value[u\'native\'] = unicode(value[u\'native\'], \'utf-8\')\n \n _combinedlanguagelist = {\n u\'ar-ae\' : {u\'name\' : \'Arabic (United Arab Emirates)\',                          u\'flag\' : u\'/++resource++country-flags/ae.gif\'},\n@@ -489,6 +495,12 @@ class MetadataLanguageAvailability(LanguageAvailability):\n for code in _combinedlanguagelist:\n     value = _combinedlanguagelist[code]\n     if u\'name\' in value:\n-        value[u\'name\'] = six.text_type(value[u\'name\'], \'utf-8\')\n+        if six.PY3:\n+            value[u\'name\'] = value[u\'name\']\n+        else:\n+            value[u\'name\'] = unicode(value[u\'name\'], \'utf-8\')\n     if u\'native\' in value:\n-        value[u\'native\'] = six.text_type(value[u\'native\'], \'utf-8\')\n+        if six.PY3:\n+            value[u\'native\'] = value[u\'native\']\n+        else:\n+            value[u\'native\'] = unicode(value[u\'native\'], \'utf-8\')\ndiff --git a/plone/i18n/negotiate/ptsnegotiator.py b/plone/i18n/negotiate/ptsnegotiator.py\nindex 1278fe8..4bb3ac7 100644\n--- a/plone/i18n/negotiate/ptsnegotiator.py\n+++ b/plone/i18n/negotiate/ptsnegotiator.py\n@@ -2,6 +2,8 @@\n from zope.i18n.interfaces import IUserPreferredLanguages\n from zope.interface import implementer\n \n+import operator\n+\n \n # this is the negotiator from old PlacelessTranslationService\n # may be cleaned up in future\n@@ -17,7 +19,7 @@ def getAcceptedHelper(self, request, kind=\'language\'):\n \n def registerLangPrefsMethod(prefs, kind=\'language\'):\n     # check for correct format of prefs\n-    if not  isinstance(prefs, dict):\n+    if not isinstance(prefs, dict):\n         prefs = {\'klass\': prefs, \'priority\': 0}\n     # add chain for kind\n     if kind not in _langPrefsRegistry:\n@@ -29,8 +31,7 @@ def registerLangPrefsMethod(prefs, kind=\'language\'):\n     _langPrefsRegistry[kind].append(prefs)\n     # sort by priority\n     _langPrefsRegistry[kind].sort(\n-        lambda x, y: cmp(y[\'priority\'], x[\'priority\'])\n-    )\n+        key=operator.itemgetter(\'priority\'), reverse=True)\n \n \n def getLangPrefs(env, kind=\'language\'):\n@@ -168,7 +169,7 @@ def getAccepted(self, request, kind=\'language\'):\n             else:\n                 # filter\n                 for filter in self.filters:\n-                    language = filter(language)\n+                    language = list(filter(language))\n                 return (language,)\n         else:\n             return ()\ndiff --git a/plone/i18n/utility.py b/plone/i18n/utility.py\nindex d22214e..4927f81 100644\n--- a/plone/i18n/utility.py\n+++ b/plone/i18n/utility.py\n@@ -215,7 +215,7 @@ def addSupportedLanguage(self, langCode):\n         """Registers a language code as supported."""\n         alist = self.settings.available_languages[:]\n         if (\n-            langCode in self.getAvailableLanguages().keys() and\n+            langCode in list(self.getAvailableLanguages().keys()) and\n             langCode not in alist\n         ):\n             alist.append(langCode)\n@@ -406,7 +406,7 @@ def getRequestLanguages(self, request):\n         langs.reverse()\n \n         # Filter quality string\n-        langs = map(lambda x: x[1], langs)\n+        langs = [x[1] for x in langs]\n \n         return langs\n \n'

Repository: plone.i18n


Branch: refs/heads/master
Date: 2018-03-29T11:55:20+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.i18n/commit/91e4f71ae444e42e1e7727b63291bf377de93008

py3 fix

Files changed:
M plone/i18n/normalizer/base.py

b'diff --git a/plone/i18n/normalizer/base.py b/plone/i18n/normalizer/base.py\nindex 7380ccb..0bc232b 100644\n--- a/plone/i18n/normalizer/base.py\n+++ b/plone/i18n/normalizer/base.py\n@@ -102,4 +102,6 @@ def baseNormalize(text):\n                 # hex string instead of unknown char\n                 res.append("%x" % ordinal)\n \n-    return \'\'.join(res).encode(\'ascii\')\n+    if six.PY2:\n+        return \'\'.join(res).encode(\'ascii\')\n+    return \'\'.join(res)\n'

Repository: plone.i18n


Branch: refs/heads/master
Date: 2018-05-16T10:13:55+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.i18n/commit/aab05c2ca640c0c6b3a89ceaf7433a69e07ba9c6

fix sort of (unused) listAvailableLanguages in py3

Files changed:
M plone/i18n/utility.py

b'diff --git a/plone/i18n/utility.py b/plone/i18n/utility.py\nindex 4927f81..f43b4db 100644\n--- a/plone/i18n/utility.py\n+++ b/plone/i18n/utility.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl import getSecurityManager\n+from operator import itemgetter\n from plone.i18n.interfaces import ILanguageUtility\n from plone.i18n.interfaces import INegotiateLanguage\n from plone.i18n.locales.interfaces import ICcTLDInformation\n@@ -147,8 +148,7 @@ def listAvailableLanguages(self):\n             languages = util.getLanguageListing(combined=True)\n         else:\n             languages = util.getLanguageListing()\n-        languages.sort(lambda x, y: cmp(x[1], y[1]))\n-        return languages\n+        return sorted(languages, key=itemgetter(1))\n \n     def listAvailableLanguageInformation(self):\n         """Returns list of available languages."""\n'

Repository: plone.i18n


Branch: refs/heads/master
Date: 2018-06-22T15:04:21+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.i18n/commit/3ef5e267fac538b321704bc1991d7b9f9b0cade4

fix test in py3 (TODO: Fix py2)

Files changed:
M plone/i18n/normalizer/ja.py
M plone/i18n/normalizer/tests/test_normalizer.py

b'diff --git a/plone/i18n/normalizer/ja.py b/plone/i18n/normalizer/ja.py\nindex 8824488..95e0cba 100644\n--- a/plone/i18n/normalizer/ja.py\n+++ b/plone/i18n/normalizer/ja.py\n@@ -47,14 +47,14 @@ class Normalizer(object):\n     Strings that contain only ASCII characters are returned decoded.\n \n       >>> norm = Normalizer()\n-      >>> text = unicode("test page", \'utf-8\')\n+      >>> text = u"test page"\n       >>> norm.normalize(text)\n-      \'test page\'\n+      b\'test page\'\n \n     Text that contains non-ASCII characters are normalized.\n \n       >>> norm = Normalizer()\n-      >>> text = unicode("\xe3\x83\x86\xe3\x82\xb9\xe3\x83\x88\xe3\x83\x9a\xe3\x83\xbc\xe3\x82\xb8", \'utf-8\')\n+      >>> text = u"\xe3\x83\x86\xe3\x82\xb9\xe3\x83\x88\xe3\x83\x9a\xe3\x83\xbc\xe3\x82\xb8"\n       >>> normalized = norm.normalize(text)\n       >>> all(s in allowed for s in normalized)\n       True\ndiff --git a/plone/i18n/normalizer/tests/test_normalizer.py b/plone/i18n/normalizer/tests/test_normalizer.py\nindex 132393f..d24cda8 100644\n--- a/plone/i18n/normalizer/tests/test_normalizer.py\n+++ b/plone/i18n/normalizer/tests/test_normalizer.py\n@@ -31,7 +31,7 @@ def testIDNormalizer():\n       >>> util.normalize(u">>>here\'!--s yet another!!!")\n       \'here-s-yet-another\'\n \n-      >>> util.normalize(six.text_type("uml\xc3\xa4ut.doc", \'utf-8\'))\n+      >>> util.normalize(u"uml\xc3\xa4ut.doc")\n       \'umlaut-doc\'\n \n       >>> from plone.i18n.normalizer import MAX_LENGTH\n@@ -54,7 +54,7 @@ def testIDNormalizer():\n       >>> len(util.normalize(testString)) <= MAX_LENGTH\n       True\n \n-      >>> util.normalize(six.text_type("rest `n` peace", \'utf-8\'))\n+      >>> util.normalize(u"rest `n` peace")\n       \'rest-n-peace\'\n \n       >>> util.normalize(u"short-hello-version", max_length=10)\n@@ -82,13 +82,13 @@ def testLocaleAwareIDNormalizer():\n       >>> util.normalize(u\'simpleandsafe\', locale=\'de\')\n       \'simpleandsafe\'\n \n-      >>> util.normalize(six.text_type(\'text with uml\xc3\xa4ut\', \'utf-8\'), locale=\'de\')\n+      >>> util.normalize(u\'text with uml\xc3\xa4ut\', locale=\'de\')\n       \'text-with-umlaeut\'\n \n     Make sure we get the de normalizer as there\'s no special one for de-DE\n     registered.\n \n-      >>> util.normalize(six.text_type(\'text with uml\xc3\xa4ut\', \'utf-8\'), locale=\'de-DE\')\n+      >>> util.normalize(u\'text with uml\xc3\xa4ut\', locale=\'de-DE\')\n       \'text-with-umlaeut\'\n \n       >>> util.normalize(u\'simpleandsafe\', locale=\'pt-BR\')\n@@ -106,7 +106,7 @@ def testLocaleAwareIDNormalizer():\n     Make sure we also handle POSIX-format locale identifiers,\n     for backwards-compatibility with an earlier version of plone.i18n.\n \n-      >>> util.normalize(six.text_type(\'text with uml\xc3\xa4ut\', \'utf-8\'), locale=\'de_DE\')\n+      >>> util.normalize(u\'text with uml\xc3\xa4ut\', locale=\'de_DE\')\n       \'text-with-umlaeut\'\n \n     """\n@@ -136,13 +136,13 @@ def testFileNameNormalizer():\n       >>> util.normalize("pseudo_filename,pot,#1.doc")\n       \'pseudo_filename-pot-#1.doc\'\n \n-      >>> util.normalize(six.text_type("uml\xc3\xa4ut.doc", \'utf-8\'))\n+      >>> util.normalize(u"uml\xc3\xa4ut.doc")\n       \'umlaut.doc\'\n \n       >>> len(util.normalize(u\'aa\' * 2000))\n       1023\n \n-      >>> util.normalize(six.text_type("rest `n` peace", \'utf-8\'))\n+      >>> util.normalize(u"rest `n` peace")\n       \'rest -n- peace\'\n \n       >>> util.normalize(u"short-hello-version", max_length=10)\n@@ -165,13 +165,13 @@ def testLocaleAwareFileNameNormalizer():\n       >>> util.normalize(u\'simpleandsafe\', locale=\'de\')\n       \'simpleandsafe\'\n \n-      >>> util.normalize(six.text_type(\'text with uml\xc3\xa4ut\', \'utf-8\'), locale=\'de\')\n+      >>> util.normalize(u\'text with uml\xc3\xa4ut\', locale=\'de\')\n       \'text with umlaeut\'\n \n     Make sure we get the de normalizer as there\'s no special one for de-DE\n     registered.\n \n-      >>> util.normalize(six.text_type(\'text with uml\xc3\xa4ut\', \'utf-8\'), locale=\'de-DE\')\n+      >>> util.normalize(u\'text with uml\xc3\xa4ut\', locale=\'de-DE\')\n       \'text with umlaeut\'\n \n       >>> util.normalize(u\'simpleandsafe\', locale=\'pt-BR\')\n@@ -189,7 +189,7 @@ def testLocaleAwareFileNameNormalizer():\n     Make sure we also handle POSIX-format locale identifiers,\n     for backwards-compatibility with an earlier version of plone.i18n.\n \n-      >>> util.normalize(six.text_type(\'text with uml\xc3\xa4ut\', \'utf-8\'), locale=\'de_DE\')\n+      >>> util.normalize(u\'text with uml\xc3\xa4ut\', locale=\'de_DE\')\n       \'text with umlaeut\'\n \n     """\n@@ -216,7 +216,7 @@ def testURLNormalizer():\n       >>> util.normalize(u"Doe, Joe")\n       \'doe-joe\'\n \n-      >>> util.normalize(six.text_type("uml\xc3\xa4ut.doc", \'utf-8\'))\n+      >>> util.normalize(u"uml\xc3\xa4ut.doc")\n       \'umlaut.doc\'\n \n       >>> util.normalize(\'quote "this"!\')\n@@ -231,7 +231,7 @@ def testURLNormalizer():\n       >>> util.normalize("I\'m a big file.TXT")\n       \'im-a-big-file.txt\'\n \n-      >>> util.normalize(six.text_type("rest `n` peace", \'utf-8\'))\n+      >>> util.normalize(u"rest `n` peace")\n       \'rest-n-peace\'\n \n       >>> len(util.normalize(u\'aa\' * 2000))\n@@ -256,13 +256,13 @@ def testLocaleAwareURLNormalizer():\n       >>> util.normalize(u\'simpleandsafe\', locale=\'de\')\n       \'simpleandsafe\'\n \n-      >>> util.normalize(six.text_type(\'text with uml\xc3\xa4ut\', \'utf-8\'), locale=\'de\')\n+      >>> util.normalize(u\'text with uml\xc3\xa4ut\', locale=\'de\')\n       \'text-with-umlaeut\'\n \n     Make sure we get the de normalizer as there\'s no special one for de-DE\n     registered.\n \n-      >>> util.normalize(six.text_type(\'text with uml\xc3\xa4ut\', \'utf-8\'), locale=\'de-DE\')\n+      >>> util.normalize(u\'text with uml\xc3\xa4ut\', locale=\'de-DE\')\n       \'text-with-umlaeut\'\n \n       >>> util.normalize(u\'simpleandsafe\', locale=\'pt-BR\')\n@@ -277,7 +277,7 @@ def testLocaleAwareURLNormalizer():\n     Make sure we also handle POSIX-format locale identifiers,\n     for backwards-compatibility with an earlier version of plone.i18n.\n \n-      >>> util.normalize(six.text_type(\'text with uml\xc3\xa4ut\', \'utf-8\'), locale=\'de_DE\')\n+      >>> util.normalize(u\'text with uml\xc3\xa4ut\', locale=\'de_DE\')\n       \'text-with-umlaeut\'\n \n     """\n'

Repository: plone.i18n


Branch: refs/heads/master
Date: 2018-09-18T21:54:25+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.i18n/commit/59140ba341118e0b25a035a4b71c7b158d623560

fix tests in py2 by falling back to unicode(x, 'utf-8')

Files changed:
M plone/i18n/normalizer/ja.py
M plone/i18n/normalizer/tests/test_normalizer.py

b'diff --git a/plone/i18n/normalizer/ja.py b/plone/i18n/normalizer/ja.py\nindex 95e0cba..1dc94b1 100644\n--- a/plone/i18n/normalizer/ja.py\n+++ b/plone/i18n/normalizer/ja.py\n@@ -48,8 +48,8 @@ class Normalizer(object):\n \n       >>> norm = Normalizer()\n       >>> text = u"test page"\n-      >>> norm.normalize(text)\n-      b\'test page\'\n+      >>> norm.normalize(text) == b\'test page\'\n+      True\n \n     Text that contains non-ASCII characters are normalized.\n \ndiff --git a/plone/i18n/normalizer/tests/test_normalizer.py b/plone/i18n/normalizer/tests/test_normalizer.py\nindex d24cda8..7873847 100644\n--- a/plone/i18n/normalizer/tests/test_normalizer.py\n+++ b/plone/i18n/normalizer/tests/test_normalizer.py\n@@ -13,6 +13,12 @@\n import unittest\n \n \n+def utf8unicode(value):\n+    if six.PY2:\n+        return unicode(value, \'utf-8\')\n+    return value\n+\n+\n def testIDNormalizer():\n     """\n       >>> util = queryUtility(IIDNormalizer)\n@@ -31,7 +37,7 @@ def testIDNormalizer():\n       >>> util.normalize(u">>>here\'!--s yet another!!!")\n       \'here-s-yet-another\'\n \n-      >>> util.normalize(u"uml\xc3\xa4ut.doc")\n+      >>> util.normalize(utf8unicode("uml\xc3\xa4ut.doc"))\n       \'umlaut-doc\'\n \n       >>> from plone.i18n.normalizer import MAX_LENGTH\n@@ -82,13 +88,13 @@ def testLocaleAwareIDNormalizer():\n       >>> util.normalize(u\'simpleandsafe\', locale=\'de\')\n       \'simpleandsafe\'\n \n-      >>> util.normalize(u\'text with uml\xc3\xa4ut\', locale=\'de\')\n+      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de\')\n       \'text-with-umlaeut\'\n \n     Make sure we get the de normalizer as there\'s no special one for de-DE\n     registered.\n \n-      >>> util.normalize(u\'text with uml\xc3\xa4ut\', locale=\'de-DE\')\n+      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de-DE\')\n       \'text-with-umlaeut\'\n \n       >>> util.normalize(u\'simpleandsafe\', locale=\'pt-BR\')\n@@ -106,7 +112,7 @@ def testLocaleAwareIDNormalizer():\n     Make sure we also handle POSIX-format locale identifiers,\n     for backwards-compatibility with an earlier version of plone.i18n.\n \n-      >>> util.normalize(u\'text with uml\xc3\xa4ut\', locale=\'de_DE\')\n+      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de_DE\')\n       \'text-with-umlaeut\'\n \n     """\n@@ -136,7 +142,7 @@ def testFileNameNormalizer():\n       >>> util.normalize("pseudo_filename,pot,#1.doc")\n       \'pseudo_filename-pot-#1.doc\'\n \n-      >>> util.normalize(u"uml\xc3\xa4ut.doc")\n+      >>> util.normalize(utf8unicode("uml\xc3\xa4ut.doc"))\n       \'umlaut.doc\'\n \n       >>> len(util.normalize(u\'aa\' * 2000))\n@@ -165,13 +171,13 @@ def testLocaleAwareFileNameNormalizer():\n       >>> util.normalize(u\'simpleandsafe\', locale=\'de\')\n       \'simpleandsafe\'\n \n-      >>> util.normalize(u\'text with uml\xc3\xa4ut\', locale=\'de\')\n+      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de\')\n       \'text with umlaeut\'\n \n     Make sure we get the de normalizer as there\'s no special one for de-DE\n     registered.\n \n-      >>> util.normalize(u\'text with uml\xc3\xa4ut\', locale=\'de-DE\')\n+      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de-DE\')\n       \'text with umlaeut\'\n \n       >>> util.normalize(u\'simpleandsafe\', locale=\'pt-BR\')\n@@ -189,7 +195,7 @@ def testLocaleAwareFileNameNormalizer():\n     Make sure we also handle POSIX-format locale identifiers,\n     for backwards-compatibility with an earlier version of plone.i18n.\n \n-      >>> util.normalize(u\'text with uml\xc3\xa4ut\', locale=\'de_DE\')\n+      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de_DE\')\n       \'text with umlaeut\'\n \n     """\n@@ -216,7 +222,7 @@ def testURLNormalizer():\n       >>> util.normalize(u"Doe, Joe")\n       \'doe-joe\'\n \n-      >>> util.normalize(u"uml\xc3\xa4ut.doc")\n+      >>> util.normalize(utf8unicode("uml\xc3\xa4ut.doc"))\n       \'umlaut.doc\'\n \n       >>> util.normalize(\'quote "this"!\')\n@@ -256,13 +262,13 @@ def testLocaleAwareURLNormalizer():\n       >>> util.normalize(u\'simpleandsafe\', locale=\'de\')\n       \'simpleandsafe\'\n \n-      >>> util.normalize(u\'text with uml\xc3\xa4ut\', locale=\'de\')\n+      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de\')\n       \'text-with-umlaeut\'\n \n     Make sure we get the de normalizer as there\'s no special one for de-DE\n     registered.\n \n-      >>> util.normalize(u\'text with uml\xc3\xa4ut\', locale=\'de-DE\')\n+      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de-DE\')\n       \'text-with-umlaeut\'\n \n       >>> util.normalize(u\'simpleandsafe\', locale=\'pt-BR\')\n@@ -277,7 +283,7 @@ def testLocaleAwareURLNormalizer():\n     Make sure we also handle POSIX-format locale identifiers,\n     for backwards-compatibility with an earlier version of plone.i18n.\n \n-      >>> util.normalize(u\'text with uml\xc3\xa4ut\', locale=\'de_DE\')\n+      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de_DE\')\n       \'text-with-umlaeut\'\n \n     """\n'

Repository: plone.i18n


Branch: refs/heads/master
Date: 2018-09-18T21:57:07+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.i18n/commit/046b86f490cfc21cc25d57a41c256ed3ed3331c5

add changenote and classifiers

Files changed:
M CHANGES.rst
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 6327321..51da574 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Fix py3 tests and functionality\n+  [pbauer]\n \n \n 4.0.0 (2018-02-02)\ndiff --git a/setup.py b/setup.py\nindex cfec743..a06233a 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -17,6 +17,8 @@\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n     ],\n     keywords=\'i18n l10n Plone\',\n     author=\'Plone Foundation\',\n'

Repository: plone.i18n


Branch: refs/heads/master
Date: 2018-09-19T09:11:00+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.i18n/commit/a10cc0f8632398068acad733587e8c023290ad27

Merge pull request #23 from plone/python3

Python3

Files changed:
M CHANGES.rst
M plone/i18n/locales/cctld.py
M plone/i18n/locales/countries.py
M plone/i18n/locales/languages.py
M plone/i18n/negotiate/ptsnegotiator.py
M plone/i18n/normalizer/base.py
M plone/i18n/normalizer/ja.py
M plone/i18n/normalizer/tests/test_normalizer.py
M plone/i18n/utility.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 6327321..51da574 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Fix py3 tests and functionality\n+  [pbauer]\n \n \n 4.0.0 (2018-02-02)\ndiff --git a/plone/i18n/locales/cctld.py b/plone/i18n/locales/cctld.py\nindex 003176d..96b602a 100644\n--- a/plone/i18n/locales/cctld.py\n+++ b/plone/i18n/locales/cctld.py\n@@ -19,7 +19,7 @@ class CcTLDInformation(object):\n     def getAvailableTLDs(self):\n         """Return a sequence of country code top level domains.\n         """\n-        return _tld_to_language.keys()\n+        return list(_tld_to_language.keys())\n \n     def getTLDs(self):\n         """Return a sequence of ccTLDs and their languages.\ndiff --git a/plone/i18n/locales/countries.py b/plone/i18n/locales/countries.py\nindex 01f5075..22e39fe 100644\n--- a/plone/i18n/locales/countries.py\n+++ b/plone/i18n/locales/countries.py\n@@ -14,7 +14,7 @@ class CountryAvailability(object):\n     def getAvailableCountries(self):\n         """Return a sequence of country tags for available countries.\n         """\n-        return _countrylist.keys()\n+        return list(_countrylist.keys())\n \n     def getCountries(self):\n         """Return a sequence of Country objects for available countries.\n@@ -294,4 +294,7 @@ def getCountryListing(self):\n for code in _countrylist:\n     value = _countrylist[code]\n     if u\'name\' in value:\n-        value[u\'name\'] = six.text_type(value[u\'name\'], \'utf-8\')\n+        if six.PY3:\n+            value[u\'name\'] = value[u\'name\']\n+        else:\n+            value[u\'name\'] = unicode(value[u\'name\'], \'utf-8\')\ndiff --git a/plone/i18n/locales/languages.py b/plone/i18n/locales/languages.py\nindex bf797a8..7dc38d4 100644\n--- a/plone/i18n/locales/languages.py\n+++ b/plone/i18n/locales/languages.py\n@@ -15,9 +15,9 @@ class LanguageAvailability(object):\n     def getAvailableLanguages(self, combined=False):\n         """Return a sequence of language tags for available languages.\n         """\n-        languages = _languagelist.keys()\n+        languages = list(_languagelist.keys())\n         if combined:\n-            languages.extend(_combinedlanguagelist.keys())\n+            languages.extend(list(_combinedlanguagelist.keys()))\n         return languages\n \n     def getLanguages(self, combined=False):\n@@ -252,9 +252,15 @@ class MetadataLanguageAvailability(LanguageAvailability):\n for code in _languagelist:\n     value = _languagelist[code]\n     if u\'name\' in value:\n-        value[u\'name\'] = six.text_type(value[u\'name\'], \'utf-8\')\n+        if six.PY3:\n+            value[u\'name\'] = value[u\'name\']\n+        else:\n+            value[u\'name\'] = unicode(value[u\'name\'], \'utf-8\')\n     if u\'native\' in value:\n-        value[u\'native\'] = six.text_type(value[u\'native\'], \'utf-8\')\n+        if six.PY3:\n+            value[u\'native\'] = value[u\'native\']\n+        else:\n+            value[u\'native\'] = unicode(value[u\'native\'], \'utf-8\')\n \n _combinedlanguagelist = {\n u\'ar-ae\' : {u\'name\' : \'Arabic (United Arab Emirates)\',                          u\'flag\' : u\'/++resource++country-flags/ae.gif\'},\n@@ -489,6 +495,12 @@ class MetadataLanguageAvailability(LanguageAvailability):\n for code in _combinedlanguagelist:\n     value = _combinedlanguagelist[code]\n     if u\'name\' in value:\n-        value[u\'name\'] = six.text_type(value[u\'name\'], \'utf-8\')\n+        if six.PY3:\n+            value[u\'name\'] = value[u\'name\']\n+        else:\n+            value[u\'name\'] = unicode(value[u\'name\'], \'utf-8\')\n     if u\'native\' in value:\n-        value[u\'native\'] = six.text_type(value[u\'native\'], \'utf-8\')\n+        if six.PY3:\n+            value[u\'native\'] = value[u\'native\']\n+        else:\n+            value[u\'native\'] = unicode(value[u\'native\'], \'utf-8\')\ndiff --git a/plone/i18n/negotiate/ptsnegotiator.py b/plone/i18n/negotiate/ptsnegotiator.py\nindex 1278fe8..4bb3ac7 100644\n--- a/plone/i18n/negotiate/ptsnegotiator.py\n+++ b/plone/i18n/negotiate/ptsnegotiator.py\n@@ -2,6 +2,8 @@\n from zope.i18n.interfaces import IUserPreferredLanguages\n from zope.interface import implementer\n \n+import operator\n+\n \n # this is the negotiator from old PlacelessTranslationService\n # may be cleaned up in future\n@@ -17,7 +19,7 @@ def getAcceptedHelper(self, request, kind=\'language\'):\n \n def registerLangPrefsMethod(prefs, kind=\'language\'):\n     # check for correct format of prefs\n-    if not  isinstance(prefs, dict):\n+    if not isinstance(prefs, dict):\n         prefs = {\'klass\': prefs, \'priority\': 0}\n     # add chain for kind\n     if kind not in _langPrefsRegistry:\n@@ -29,8 +31,7 @@ def registerLangPrefsMethod(prefs, kind=\'language\'):\n     _langPrefsRegistry[kind].append(prefs)\n     # sort by priority\n     _langPrefsRegistry[kind].sort(\n-        lambda x, y: cmp(y[\'priority\'], x[\'priority\'])\n-    )\n+        key=operator.itemgetter(\'priority\'), reverse=True)\n \n \n def getLangPrefs(env, kind=\'language\'):\n@@ -168,7 +169,7 @@ def getAccepted(self, request, kind=\'language\'):\n             else:\n                 # filter\n                 for filter in self.filters:\n-                    language = filter(language)\n+                    language = list(filter(language))\n                 return (language,)\n         else:\n             return ()\ndiff --git a/plone/i18n/normalizer/base.py b/plone/i18n/normalizer/base.py\nindex 7380ccb..0bc232b 100644\n--- a/plone/i18n/normalizer/base.py\n+++ b/plone/i18n/normalizer/base.py\n@@ -102,4 +102,6 @@ def baseNormalize(text):\n                 # hex string instead of unknown char\n                 res.append("%x" % ordinal)\n \n-    return \'\'.join(res).encode(\'ascii\')\n+    if six.PY2:\n+        return \'\'.join(res).encode(\'ascii\')\n+    return \'\'.join(res)\ndiff --git a/plone/i18n/normalizer/ja.py b/plone/i18n/normalizer/ja.py\nindex 8824488..1dc94b1 100644\n--- a/plone/i18n/normalizer/ja.py\n+++ b/plone/i18n/normalizer/ja.py\n@@ -47,14 +47,14 @@ class Normalizer(object):\n     Strings that contain only ASCII characters are returned decoded.\n \n       >>> norm = Normalizer()\n-      >>> text = unicode("test page", \'utf-8\')\n-      >>> norm.normalize(text)\n-      \'test page\'\n+      >>> text = u"test page"\n+      >>> norm.normalize(text) == b\'test page\'\n+      True\n \n     Text that contains non-ASCII characters are normalized.\n \n       >>> norm = Normalizer()\n-      >>> text = unicode("\xe3\x83\x86\xe3\x82\xb9\xe3\x83\x88\xe3\x83\x9a\xe3\x83\xbc\xe3\x82\xb8", \'utf-8\')\n+      >>> text = u"\xe3\x83\x86\xe3\x82\xb9\xe3\x83\x88\xe3\x83\x9a\xe3\x83\xbc\xe3\x82\xb8"\n       >>> normalized = norm.normalize(text)\n       >>> all(s in allowed for s in normalized)\n       True\ndiff --git a/plone/i18n/normalizer/tests/test_normalizer.py b/plone/i18n/normalizer/tests/test_normalizer.py\nindex 132393f..7873847 100644\n--- a/plone/i18n/normalizer/tests/test_normalizer.py\n+++ b/plone/i18n/normalizer/tests/test_normalizer.py\n@@ -13,6 +13,12 @@\n import unittest\n \n \n+def utf8unicode(value):\n+    if six.PY2:\n+        return unicode(value, \'utf-8\')\n+    return value\n+\n+\n def testIDNormalizer():\n     """\n       >>> util = queryUtility(IIDNormalizer)\n@@ -31,7 +37,7 @@ def testIDNormalizer():\n       >>> util.normalize(u">>>here\'!--s yet another!!!")\n       \'here-s-yet-another\'\n \n-      >>> util.normalize(six.text_type("uml\xc3\xa4ut.doc", \'utf-8\'))\n+      >>> util.normalize(utf8unicode("uml\xc3\xa4ut.doc"))\n       \'umlaut-doc\'\n \n       >>> from plone.i18n.normalizer import MAX_LENGTH\n@@ -54,7 +60,7 @@ def testIDNormalizer():\n       >>> len(util.normalize(testString)) <= MAX_LENGTH\n       True\n \n-      >>> util.normalize(six.text_type("rest `n` peace", \'utf-8\'))\n+      >>> util.normalize(u"rest `n` peace")\n       \'rest-n-peace\'\n \n       >>> util.normalize(u"short-hello-version", max_length=10)\n@@ -82,13 +88,13 @@ def testLocaleAwareIDNormalizer():\n       >>> util.normalize(u\'simpleandsafe\', locale=\'de\')\n       \'simpleandsafe\'\n \n-      >>> util.normalize(six.text_type(\'text with uml\xc3\xa4ut\', \'utf-8\'), locale=\'de\')\n+      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de\')\n       \'text-with-umlaeut\'\n \n     Make sure we get the de normalizer as there\'s no special one for de-DE\n     registered.\n \n-      >>> util.normalize(six.text_type(\'text with uml\xc3\xa4ut\', \'utf-8\'), locale=\'de-DE\')\n+      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de-DE\')\n       \'text-with-umlaeut\'\n \n       >>> util.normalize(u\'simpleandsafe\', locale=\'pt-BR\')\n@@ -106,7 +112,7 @@ def testLocaleAwareIDNormalizer():\n     Make sure we also handle POSIX-format locale identifiers,\n     for backwards-compatibility with an earlier version of plone.i18n.\n \n-      >>> util.normalize(six.text_type(\'text with uml\xc3\xa4ut\', \'utf-8\'), locale=\'de_DE\')\n+      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de_DE\')\n       \'text-with-umlaeut\'\n \n     """\n@@ -136,13 +142,13 @@ def testFileNameNormalizer():\n       >>> util.normalize("pseudo_filename,pot,#1.doc")\n       \'pseudo_filename-pot-#1.doc\'\n \n-      >>> util.normalize(six.text_type("uml\xc3\xa4ut.doc", \'utf-8\'))\n+      >>> util.normalize(utf8unicode("uml\xc3\xa4ut.doc"))\n       \'umlaut.doc\'\n \n       >>> len(util.normalize(u\'aa\' * 2000))\n       1023\n \n-      >>> util.normalize(six.text_type("rest `n` peace", \'utf-8\'))\n+      >>> util.normalize(u"rest `n` peace")\n       \'rest -n- peace\'\n \n       >>> util.normalize(u"short-hello-version", max_length=10)\n@@ -165,13 +171,13 @@ def testLocaleAwareFileNameNormalizer():\n       >>> util.normalize(u\'simpleandsafe\', locale=\'de\')\n       \'simpleandsafe\'\n \n-      >>> util.normalize(six.text_type(\'text with uml\xc3\xa4ut\', \'utf-8\'), locale=\'de\')\n+      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de\')\n       \'text with umlaeut\'\n \n     Make sure we get the de normalizer as there\'s no special one for de-DE\n     registered.\n \n-      >>> util.normalize(six.text_type(\'text with uml\xc3\xa4ut\', \'utf-8\'), locale=\'de-DE\')\n+      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de-DE\')\n       \'text with umlaeut\'\n \n       >>> util.normalize(u\'simpleandsafe\', locale=\'pt-BR\')\n@@ -189,7 +195,7 @@ def testLocaleAwareFileNameNormalizer():\n     Make sure we also handle POSIX-format locale identifiers,\n     for backwards-compatibility with an earlier version of plone.i18n.\n \n-      >>> util.normalize(six.text_type(\'text with uml\xc3\xa4ut\', \'utf-8\'), locale=\'de_DE\')\n+      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de_DE\')\n       \'text with umlaeut\'\n \n     """\n@@ -216,7 +222,7 @@ def testURLNormalizer():\n       >>> util.normalize(u"Doe, Joe")\n       \'doe-joe\'\n \n-      >>> util.normalize(six.text_type("uml\xc3\xa4ut.doc", \'utf-8\'))\n+      >>> util.normalize(utf8unicode("uml\xc3\xa4ut.doc"))\n       \'umlaut.doc\'\n \n       >>> util.normalize(\'quote "this"!\')\n@@ -231,7 +237,7 @@ def testURLNormalizer():\n       >>> util.normalize("I\'m a big file.TXT")\n       \'im-a-big-file.txt\'\n \n-      >>> util.normalize(six.text_type("rest `n` peace", \'utf-8\'))\n+      >>> util.normalize(u"rest `n` peace")\n       \'rest-n-peace\'\n \n       >>> len(util.normalize(u\'aa\' * 2000))\n@@ -256,13 +262,13 @@ def testLocaleAwareURLNormalizer():\n       >>> util.normalize(u\'simpleandsafe\', locale=\'de\')\n       \'simpleandsafe\'\n \n-      >>> util.normalize(six.text_type(\'text with uml\xc3\xa4ut\', \'utf-8\'), locale=\'de\')\n+      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de\')\n       \'text-with-umlaeut\'\n \n     Make sure we get the de normalizer as there\'s no special one for de-DE\n     registered.\n \n-      >>> util.normalize(six.text_type(\'text with uml\xc3\xa4ut\', \'utf-8\'), locale=\'de-DE\')\n+      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de-DE\')\n       \'text-with-umlaeut\'\n \n       >>> util.normalize(u\'simpleandsafe\', locale=\'pt-BR\')\n@@ -277,7 +283,7 @@ def testLocaleAwareURLNormalizer():\n     Make sure we also handle POSIX-format locale identifiers,\n     for backwards-compatibility with an earlier version of plone.i18n.\n \n-      >>> util.normalize(six.text_type(\'text with uml\xc3\xa4ut\', \'utf-8\'), locale=\'de_DE\')\n+      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de_DE\')\n       \'text-with-umlaeut\'\n \n     """\ndiff --git a/plone/i18n/utility.py b/plone/i18n/utility.py\nindex d22214e..f43b4db 100644\n--- a/plone/i18n/utility.py\n+++ b/plone/i18n/utility.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl import getSecurityManager\n+from operator import itemgetter\n from plone.i18n.interfaces import ILanguageUtility\n from plone.i18n.interfaces import INegotiateLanguage\n from plone.i18n.locales.interfaces import ICcTLDInformation\n@@ -147,8 +148,7 @@ def listAvailableLanguages(self):\n             languages = util.getLanguageListing(combined=True)\n         else:\n             languages = util.getLanguageListing()\n-        languages.sort(lambda x, y: cmp(x[1], y[1]))\n-        return languages\n+        return sorted(languages, key=itemgetter(1))\n \n     def listAvailableLanguageInformation(self):\n         """Returns list of available languages."""\n@@ -215,7 +215,7 @@ def addSupportedLanguage(self, langCode):\n         """Registers a language code as supported."""\n         alist = self.settings.available_languages[:]\n         if (\n-            langCode in self.getAvailableLanguages().keys() and\n+            langCode in list(self.getAvailableLanguages().keys()) and\n             langCode not in alist\n         ):\n             alist.append(langCode)\n@@ -406,7 +406,7 @@ def getRequestLanguages(self, request):\n         langs.reverse()\n \n         # Filter quality string\n-        langs = map(lambda x: x[1], langs)\n+        langs = [x[1] for x in langs]\n \n         return langs\n \ndiff --git a/setup.py b/setup.py\nindex cfec743..a06233a 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -17,6 +17,8 @@\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n     ],\n     keywords=\'i18n l10n Plone\',\n     author=\'Plone Foundation\',\n'

