Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-07-05T10:47:53+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/0754d812f00055f4b91b1270f115a24314349d69

Eliminate non-pythonic 'return None' usage

Files changed:
A news/1158.bugfix
M src/plone/restapi/batching.py
M src/plone/restapi/deserializer/mixins.py
M src/plone/restapi/imaging.py
M src/plone/restapi/indexers.py
M src/plone/restapi/pas/plugin.py
M src/plone/restapi/serializer/converters.py
M src/plone/restapi/serializer/discussion.py
M src/plone/restapi/serializer/dxfields.py
M src/plone/restapi/services/addons/post.py
M src/plone/restapi/services/auth/login.py
M src/plone/restapi/services/content/tus.py
M src/plone/restapi/services/contextnavigation/get.py
M src/plone/restapi/types/adapters.py

b'diff --git a/news/1158.bugfix b/news/1158.bugfix\nnew file mode 100644\nindex 000000000..9f0cf9601\n--- /dev/null\n+++ b/news/1158.bugfix\n@@ -0,0 +1 @@\n+Eliminate non-pythonic \'return None\' usage. [jensens]\ndiff --git a/src/plone/restapi/batching.py b/src/plone/restapi/batching.py\nindex 2cab0e619..056d1b97b 100644\n--- a/src/plone/restapi/batching.py\n+++ b/src/plone/restapi/batching.py\n@@ -64,7 +64,7 @@ def links(self):\n         """Get a dictionary with batching links."""\n         # Don\'t provide batching links if resultset isn\'t batched\n         if self.items_total <= self.b_size:\n-            return None\n+            return\n \n         links = {}\n \ndiff --git a/src/plone/restapi/deserializer/mixins.py b/src/plone/restapi/deserializer/mixins.py\nindex abdf9cf76..25efadaa4 100644\n--- a/src/plone/restapi/deserializer/mixins.py\n+++ b/src/plone/restapi/deserializer/mixins.py\n@@ -83,8 +83,7 @@ def resortAllItemsInContext(self, sort_on, sort_order):\n     def getOrdering(self):\n         if IPloneSiteRoot.providedBy(self.context):\n             return self.context\n-        elif getattr(self.context, "getOrdering", None):\n+        if getattr(self.context, "getOrdering", None):\n             ordering = self.context.getOrdering()\n-            if not IExplicitOrdering.providedBy(ordering):\n-                return None\n-            return ordering\n+            if IExplicitOrdering.providedBy(ordering):\n+                return ordering\ndiff --git a/src/plone/restapi/imaging.py b/src/plone/restapi/imaging.py\nindex 21306661c..c354ad4a4 100644\n--- a/src/plone/restapi/imaging.py\n+++ b/src/plone/restapi/imaging.py\n@@ -47,11 +47,9 @@ def get_original_image_url(context, fieldname, width, height):\n     scale = images_view.scale(\n         fieldname, width=width, height=height, direction="thumbnail"\n     )\n-    if not scale:\n-        # This might happen for corrupt images.\n-        return None\n-\n-    return scale.url\n+    if scale:\n+        return scale.url\n+    # Corrupt images may not have a scale.\n \n \n def get_actual_scale(dimensions, bbox):\ndiff --git a/src/plone/restapi/indexers.py b/src/plone/restapi/indexers.py\nindex 49148db41..9a9394b49 100644\n--- a/src/plone/restapi/indexers.py\n+++ b/src/plone/restapi/indexers.py\n@@ -96,7 +96,7 @@ def __call__(self, block):\n         block = block or {}\n \n         if block.get("searchableText"):\n-            return None\n+            return\n \n         # BBB compatibility with slate blocks that used the "plaintext" field\n         return (block or {}).get("plaintext", "")\ndiff --git a/src/plone/restapi/pas/plugin.py b/src/plone/restapi/pas/plugin.py\nindex 372716e0b..0dbdb01d4 100644\n--- a/src/plone/restapi/pas/plugin.py\n+++ b/src/plone/restapi/pas/plugin.py\n@@ -101,13 +101,10 @@ def extractCredentials(self, request):\n         creds = {}\n         auth = request._auth\n         if auth is None:\n-            return None\n+            return\n         if auth[:7].lower() == "bearer ":\n             creds["token"] = auth.split()[-1]\n-        else:\n-            return None\n-\n-        return creds\n+            return creds\n \n     security.declarePrivate("authenticateCredentials")\n \n@@ -116,14 +113,14 @@ def authenticateCredentials(self, credentials):\n         # Ignore credentials that are not from our extractor\n         extractor = credentials.get("extractor")\n         if extractor != self.getId():\n-            return None\n+            return\n \n         payload = self._decode_token(credentials["token"])\n         if not payload:\n-            return None\n+            return\n \n         if "sub" not in payload:\n-            return None\n+            return\n \n         userid = payload["sub"]\n         if six.PY2:\n@@ -131,9 +128,9 @@ def authenticateCredentials(self, credentials):\n \n         if self.store_tokens:\n             if userid not in self._tokens:\n-                return None\n+                return\n             if credentials["token"] not in self._tokens[userid]:\n-                return None\n+                return\n \n         return (userid, userid)\n \n@@ -173,7 +170,7 @@ def _jwt_decode(self, token, secret, verify=True):\n         try:\n             return jwt.decode(token, secret, verify=verify, algorithms=["HS256"])\n         except jwt.InvalidTokenError:\n-            return None\n+            pass\n \n     def _signing_secret(self):\n         if self.use_keyring:\ndiff --git a/src/plone/restapi/serializer/converters.py b/src/plone/restapi/serializer/converters.py\nindex b3aaaa4c9..b50be44c5 100644\n--- a/src/plone/restapi/serializer/converters.py\n+++ b/src/plone/restapi/serializer/converters.py\n@@ -204,4 +204,4 @@ def i18n_message_converter(value):\n @adapter(Missing.Value.__class__)\n @implementer(IJsonCompatible)\n def missing_value_converter(value):\n-    return None\n+    pass\ndiff --git a/src/plone/restapi/serializer/discussion.py b/src/plone/restapi/serializer/discussion.py\nindex 345431085..9c1030073 100644\n--- a/src/plone/restapi/serializer/discussion.py\n+++ b/src/plone/restapi/serializer/discussion.py\n@@ -92,9 +92,9 @@ def __call__(self, include_items=True):\n \n     def get_author_image(self, username=None):\n         if username is None:\n-            return None\n+            return\n         portal_membership = getToolByName(self.context, "portal_membership", None)\n         image = portal_membership.getPersonalPortrait(username).absolute_url()\n         if image.endswith("defaultUser.png"):\n-            return None\n+            return\n         return image\ndiff --git a/src/plone/restapi/serializer/dxfields.py b/src/plone/restapi/serializer/dxfields.py\nindex 36b0623cb..0ed491f5e 100644\n--- a/src/plone/restapi/serializer/dxfields.py\n+++ b/src/plone/restapi/serializer/dxfields.py\n@@ -92,7 +92,7 @@ class ImageFieldSerializer(DefaultFieldSerializer):\n     def __call__(self):\n         image = self.field.get(self.context)\n         if not image:\n-            return None\n+            return\n \n         width, height = image.getImageSize()\n \n@@ -116,7 +116,7 @@ class FileFieldSerializer(DefaultFieldSerializer):\n     def __call__(self):\n         namedfile = self.field.get(self.context)\n         if namedfile is None:\n-            return None\n+            return\n \n         url = "/".join((self.context.absolute_url(), "@@download", self.field.__name__))\n         result = {\ndiff --git a/src/plone/restapi/services/addons/post.py b/src/plone/restapi/services/addons/post.py\nindex b8f2ed1b5..a7d4dfd51 100644\n--- a/src/plone/restapi/services/addons/post.py\n+++ b/src/plone/restapi/services/addons/post.py\n@@ -62,6 +62,4 @@ def reply(self):\n \n             self.request.response.setStatus(200)\n             return result\n-        else:\n-            self.request.response.setStatus(204)\n-            return None\n+        self.request.response.setStatus(204)\ndiff --git a/src/plone/restapi/services/auth/login.py b/src/plone/restapi/services/auth/login.py\nindex d37e3c7fc..f96145630 100644\n--- a/src/plone/restapi/services/auth/login.py\n+++ b/src/plone/restapi/services/auth/login.py\n@@ -101,7 +101,6 @@ def _find_userfolder(self, userid):\n \n         if info:\n             return uf\n-        return None\n \n     def check_permission(self):\n-        return\n+        pass\ndiff --git a/src/plone/restapi/services/content/tus.py b/src/plone/restapi/services/content/tus.py\nindex f5bfdc343..3f44dc8de 100644\n--- a/src/plone/restapi/services/content/tus.py\n+++ b/src/plone/restapi/services/content/tus.py\n@@ -142,12 +142,12 @@ def publishTraverse(self, request, name):\n \n     def tus_upload(self):\n         if self.uid is None:\n-            return None\n+            return\n \n         tus_upload = TUSUpload(self.uid)\n         length = tus_upload.length()\n         if length == 0:\n-            return None\n+            return\n \n         return tus_upload\n \ndiff --git a/src/plone/restapi/services/contextnavigation/get.py b/src/plone/restapi/services/contextnavigation/get.py\nindex d2929cf86..79ecf7281 100644\n--- a/src/plone/restapi/services/contextnavigation/get.py\n+++ b/src/plone/restapi/services/contextnavigation/get.py\n@@ -248,7 +248,7 @@ def heading_link_target(self):\n \n         # Root content item gone away or similar issue\n         if not nav_root:\n-            return None\n+            return\n \n         if INavigationRoot.providedBy(nav_root) or ISiteRoot.providedBy(nav_root):\n             # For top level folders go to the sitemap\n@@ -312,7 +312,7 @@ def getNavRoot(self, _marker=None):\n         portal = self.urltool.getPortalObject()\n         rootPath = self.getNavRootPath()\n         if rootPath is None:\n-            return None\n+            return\n \n         if rootPath == self.urltool.getPortalPath():\n             return portal\n@@ -347,13 +347,13 @@ def thumb_scale(self):\n         """\n         if getattr(self.data, "no_thumbs", False):\n             # Individual setting overrides\n-            return None\n+            return\n         thsize = getattr(self.data, "thumb_scale", None)\n         if thsize:\n             return thsize\n \n         if IS_PLONE4:\n-            return None  # no support in Plone 4 to override the thumb scale\n+            return  # no support in Plone 4 to override the thumb scale\n         else:\n             registry = getUtility(IRegistry)\n             settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n@@ -365,7 +365,7 @@ def thumb_scale(self):\n     def getMimeTypeIcon(self, node):\n         try:\n             if not node["normalized_portal_type"] == "file":\n-                return None\n+                return\n             fileo = node["item"].getObject().file\n             portal_url = getNavigationRoot(self.context)\n             mtt = getToolByName(self.context, "mimetypes_registry")\n@@ -373,8 +373,7 @@ def getMimeTypeIcon(self, node):\n                 ctype = mtt.lookup(fileo.contentType)\n                 return os.path.join(portal_url, guess_icon_path(ctype[0]))\n         except AttributeError:\n-            return None\n-        return None\n+            pass\n \n     def render(self):\n         res = {\n@@ -507,7 +506,7 @@ def recurse(self, children, level, bottomLevel):\n \n def get_url(item):\n     if not item:\n-        return None\n+        return\n \n     if hasattr(aq_base(item), "getURL"):\n         # Looks like a brain\n@@ -519,7 +518,7 @@ def get_url(item):\n \n def get_id(item):\n     if not item:\n-        return None\n+        return\n     getId = getattr(item, "getId")\n \n     if not utils.safe_callable(getId):\n@@ -583,15 +582,15 @@ def getRootPath(context, currentFolderOnly, topLevel, root_path):\n     if topLevel > 0:\n         contextPath = "/".join(context.getPhysicalPath())\n         if not contextPath.startswith(rootPath):\n-            return None\n+            return\n         contextSubPathElements = contextPath[len(rootPath) + 1 :]\n         if contextSubPathElements:\n             contextSubPathElements = contextSubPathElements.split("/")\n             if len(contextSubPathElements) < topLevel:\n-                return None\n+                return\n             rootPath = rootPath + "/" + "/".join(contextSubPathElements[:topLevel])\n         else:\n-            return None\n+            return\n \n     return rootPath\n \n@@ -619,7 +618,7 @@ def extract_data(schema, raw_data, prefix):\n \n def get_root(context, root_path):\n     if root_path is None:\n-        return None\n+        return\n \n     urltool = getToolByName(context, "portal_url")\n     portal = urltool.getPortalObject()\ndiff --git a/src/plone/restapi/types/adapters.py b/src/plone/restapi/types/adapters.py\nindex 2352e12e2..69387b73b 100644\n--- a/src/plone/restapi/types/adapters.py\n+++ b/src/plone/restapi/types/adapters.py\n@@ -94,10 +94,10 @@ def get_type(self):\n         raise NotImplementedError\n \n     def get_factory(self):\n-        return None\n+        pass\n \n     def get_widget(self):\n-        return None\n+        pass\n \n     def get_widget_params(self):\n         all_params = get_widget_params([self.field.interface])\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-07-05T15:08:14+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/6c13894afa365669b0825529ae739bf78df003f4

Merge pull request #1158 from plone/eliminate-return-None

Eliminate non-pythonic 'return None' usage

Files changed:
A news/1158.bugfix
M src/plone/restapi/batching.py
M src/plone/restapi/deserializer/mixins.py
M src/plone/restapi/imaging.py
M src/plone/restapi/indexers.py
M src/plone/restapi/pas/plugin.py
M src/plone/restapi/serializer/converters.py
M src/plone/restapi/serializer/discussion.py
M src/plone/restapi/serializer/dxfields.py
M src/plone/restapi/services/addons/post.py
M src/plone/restapi/services/auth/login.py
M src/plone/restapi/services/content/tus.py
M src/plone/restapi/services/contextnavigation/get.py
M src/plone/restapi/types/adapters.py

b'diff --git a/news/1158.bugfix b/news/1158.bugfix\nnew file mode 100644\nindex 000000000..9f0cf9601\n--- /dev/null\n+++ b/news/1158.bugfix\n@@ -0,0 +1 @@\n+Eliminate non-pythonic \'return None\' usage. [jensens]\ndiff --git a/src/plone/restapi/batching.py b/src/plone/restapi/batching.py\nindex cc062bd2e..58c6d1e43 100644\n--- a/src/plone/restapi/batching.py\n+++ b/src/plone/restapi/batching.py\n@@ -63,7 +63,7 @@ def links(self):\n         """Get a dictionary with batching links."""\n         # Don\'t provide batching links if resultset isn\'t batched\n         if self.items_total <= self.b_size:\n-            return None\n+            return\n \n         links = {}\n \ndiff --git a/src/plone/restapi/deserializer/mixins.py b/src/plone/restapi/deserializer/mixins.py\nindex b6e2cbe15..fa07f4e92 100644\n--- a/src/plone/restapi/deserializer/mixins.py\n+++ b/src/plone/restapi/deserializer/mixins.py\n@@ -82,8 +82,7 @@ def resortAllItemsInContext(self, sort_on, sort_order):\n     def getOrdering(self):\n         if IPloneSiteRoot.providedBy(self.context):\n             return self.context\n-        elif getattr(self.context, "getOrdering", None):\n+        if getattr(self.context, "getOrdering", None):\n             ordering = self.context.getOrdering()\n-            if not IExplicitOrdering.providedBy(ordering):\n-                return None\n-            return ordering\n+            if IExplicitOrdering.providedBy(ordering):\n+                return ordering\ndiff --git a/src/plone/restapi/imaging.py b/src/plone/restapi/imaging.py\nindex 0bb435638..68c1a40e8 100644\n--- a/src/plone/restapi/imaging.py\n+++ b/src/plone/restapi/imaging.py\n@@ -46,11 +46,9 @@ def get_original_image_url(context, fieldname, width, height):\n     scale = images_view.scale(\n         fieldname, width=width, height=height, direction="thumbnail"\n     )\n-    if not scale:\n-        # This might happen for corrupt images.\n-        return None\n-\n-    return scale.url\n+    if scale:\n+        return scale.url\n+    # Corrupt images may not have a scale.\n \n \n def get_actual_scale(dimensions, bbox):\ndiff --git a/src/plone/restapi/indexers.py b/src/plone/restapi/indexers.py\nindex d9dbb7e2e..bc0861f0f 100644\n--- a/src/plone/restapi/indexers.py\n+++ b/src/plone/restapi/indexers.py\n@@ -95,7 +95,7 @@ def __call__(self, block):\n         block = block or {}\n \n         if block.get("searchableText"):\n-            return None\n+            return\n \n         # BBB compatibility with slate blocks that used the "plaintext" field\n         return (block or {}).get("plaintext", "")\ndiff --git a/src/plone/restapi/pas/plugin.py b/src/plone/restapi/pas/plugin.py\nindex 4157de3f0..f91188f80 100644\n--- a/src/plone/restapi/pas/plugin.py\n+++ b/src/plone/restapi/pas/plugin.py\n@@ -98,13 +98,10 @@ def extractCredentials(self, request):\n         creds = {}\n         auth = request._auth\n         if auth is None:\n-            return None\n+            return\n         if auth[:7].lower() == "bearer ":\n             creds["token"] = auth.split()[-1]\n-        else:\n-            return None\n-\n-        return creds\n+            return creds\n \n     # IAuthenticationPlugin implementation\n     @security.private\n@@ -112,14 +109,14 @@ def authenticateCredentials(self, credentials):\n         # Ignore credentials that are not from our extractor\n         extractor = credentials.get("extractor")\n         if extractor != self.getId():\n-            return None\n+            return\n \n         payload = self._decode_token(credentials["token"])\n         if not payload:\n-            return None\n+            return\n \n         if "sub" not in payload:\n-            return None\n+            return\n \n         userid = payload["sub"]\n         if six.PY2:\n@@ -127,9 +124,9 @@ def authenticateCredentials(self, credentials):\n \n         if self.store_tokens:\n             if userid not in self._tokens:\n-                return None\n+                return\n             if credentials["token"] not in self._tokens[userid]:\n-                return None\n+                return\n \n         return (userid, userid)\n \n@@ -168,7 +165,7 @@ def _jwt_decode(self, token, secret, verify=True):\n         try:\n             return jwt.decode(token, secret, verify=verify, algorithms=["HS256"])\n         except jwt.InvalidTokenError:\n-            return None\n+            pass\n \n     def _signing_secret(self):\n         if self.use_keyring:\ndiff --git a/src/plone/restapi/serializer/converters.py b/src/plone/restapi/serializer/converters.py\nindex e1652f173..dcc2cc0dc 100644\n--- a/src/plone/restapi/serializer/converters.py\n+++ b/src/plone/restapi/serializer/converters.py\n@@ -203,4 +203,4 @@ def i18n_message_converter(value):\n @adapter(Missing.Value.__class__)\n @implementer(IJsonCompatible)\n def missing_value_converter(value):\n-    return None\n+    pass\ndiff --git a/src/plone/restapi/serializer/discussion.py b/src/plone/restapi/serializer/discussion.py\nindex 2c510524b..2e3ada2e3 100644\n--- a/src/plone/restapi/serializer/discussion.py\n+++ b/src/plone/restapi/serializer/discussion.py\n@@ -91,9 +91,9 @@ def __call__(self, include_items=True):\n \n     def get_author_image(self, username=None):\n         if username is None:\n-            return None\n+            return\n         portal_membership = getToolByName(self.context, "portal_membership", None)\n         image = portal_membership.getPersonalPortrait(username).absolute_url()\n         if image.endswith("defaultUser.png"):\n-            return None\n+            return\n         return image\ndiff --git a/src/plone/restapi/serializer/dxfields.py b/src/plone/restapi/serializer/dxfields.py\nindex 67b21b148..06043fa07 100644\n--- a/src/plone/restapi/serializer/dxfields.py\n+++ b/src/plone/restapi/serializer/dxfields.py\n@@ -90,7 +90,7 @@ class ImageFieldSerializer(DefaultFieldSerializer):\n     def __call__(self):\n         image = self.field.get(self.context)\n         if not image:\n-            return None\n+            return\n \n         width, height = image.getImageSize()\n \n@@ -114,7 +114,7 @@ class FileFieldSerializer(DefaultFieldSerializer):\n     def __call__(self):\n         namedfile = self.field.get(self.context)\n         if namedfile is None:\n-            return None\n+            return\n \n         url = "/".join((self.context.absolute_url(), "@@download", self.field.__name__))\n         result = {\ndiff --git a/src/plone/restapi/services/addons/post.py b/src/plone/restapi/services/addons/post.py\nindex 1ba48100a..06df83e07 100644\n--- a/src/plone/restapi/services/addons/post.py\n+++ b/src/plone/restapi/services/addons/post.py\n@@ -60,6 +60,4 @@ def reply(self):\n \n             self.request.response.setStatus(200)\n             return result\n-        else:\n-            self.request.response.setStatus(204)\n-            return None\n+        self.request.response.setStatus(204)\ndiff --git a/src/plone/restapi/services/auth/login.py b/src/plone/restapi/services/auth/login.py\nindex ed716231c..bab21c8f4 100644\n--- a/src/plone/restapi/services/auth/login.py\n+++ b/src/plone/restapi/services/auth/login.py\n@@ -100,7 +100,6 @@ def _find_userfolder(self, userid):\n \n         if info:\n             return uf\n-        return None\n \n     def check_permission(self):\n-        return\n+        pass\ndiff --git a/src/plone/restapi/services/content/tus.py b/src/plone/restapi/services/content/tus.py\nindex 6cb6255b9..19c2c4a38 100644\n--- a/src/plone/restapi/services/content/tus.py\n+++ b/src/plone/restapi/services/content/tus.py\n@@ -141,12 +141,12 @@ def publishTraverse(self, request, name):\n \n     def tus_upload(self):\n         if self.uid is None:\n-            return None\n+            return\n \n         tus_upload = TUSUpload(self.uid)\n         length = tus_upload.length()\n         if length == 0:\n-            return None\n+            return\n \n         return tus_upload\n \ndiff --git a/src/plone/restapi/services/contextnavigation/get.py b/src/plone/restapi/services/contextnavigation/get.py\nindex c23a236cf..a26de6b2c 100644\n--- a/src/plone/restapi/services/contextnavigation/get.py\n+++ b/src/plone/restapi/services/contextnavigation/get.py\n@@ -246,7 +246,7 @@ def heading_link_target(self):\n \n         # Root content item gone away or similar issue\n         if not nav_root:\n-            return None\n+            return\n \n         if INavigationRoot.providedBy(nav_root) or ISiteRoot.providedBy(nav_root):\n             # For top level folders go to the sitemap\n@@ -310,7 +310,7 @@ def getNavRoot(self, _marker=None):\n         portal = self.urltool.getPortalObject()\n         rootPath = self.getNavRootPath()\n         if rootPath is None:\n-            return None\n+            return\n \n         if rootPath == self.urltool.getPortalPath():\n             return portal\n@@ -345,13 +345,13 @@ def thumb_scale(self):\n         """\n         if getattr(self.data, "no_thumbs", False):\n             # Individual setting overrides\n-            return None\n+            return\n         thsize = getattr(self.data, "thumb_scale", None)\n         if thsize:\n             return thsize\n \n         if IS_PLONE4:\n-            return None  # no support in Plone 4 to override the thumb scale\n+            return  # no support in Plone 4 to override the thumb scale\n         else:\n             registry = getUtility(IRegistry)\n             settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n@@ -363,7 +363,7 @@ def thumb_scale(self):\n     def getMimeTypeIcon(self, node):\n         try:\n             if not node["normalized_portal_type"] == "file":\n-                return None\n+                return\n             fileo = node["item"].getObject().file\n             portal_url = getNavigationRoot(self.context)\n             mtt = getToolByName(self.context, "mimetypes_registry")\n@@ -371,8 +371,7 @@ def getMimeTypeIcon(self, node):\n                 ctype = mtt.lookup(fileo.contentType)\n                 return os.path.join(portal_url, guess_icon_path(ctype[0]))\n         except AttributeError:\n-            return None\n-        return None\n+            pass\n \n     def render(self):\n         res = {\n@@ -505,7 +504,7 @@ def recurse(self, children, level, bottomLevel):\n \n def get_url(item):\n     if not item:\n-        return None\n+        return\n \n     if hasattr(aq_base(item), "getURL"):\n         # Looks like a brain\n@@ -517,7 +516,7 @@ def get_url(item):\n \n def get_id(item):\n     if not item:\n-        return None\n+        return\n     getId = getattr(item, "getId")\n \n     if not utils.safe_callable(getId):\n@@ -581,15 +580,15 @@ def getRootPath(context, currentFolderOnly, topLevel, root_path):\n     if topLevel > 0:\n         contextPath = "/".join(context.getPhysicalPath())\n         if not contextPath.startswith(rootPath):\n-            return None\n+            return\n         contextSubPathElements = contextPath[len(rootPath) + 1 :]\n         if contextSubPathElements:\n             contextSubPathElements = contextSubPathElements.split("/")\n             if len(contextSubPathElements) < topLevel:\n-                return None\n+                return\n             rootPath = rootPath + "/" + "/".join(contextSubPathElements[:topLevel])\n         else:\n-            return None\n+            return\n \n     return rootPath\n \n@@ -617,7 +616,7 @@ def extract_data(schema, raw_data, prefix):\n \n def get_root(context, root_path):\n     if root_path is None:\n-        return None\n+        return\n \n     urltool = getToolByName(context, "portal_url")\n     portal = urltool.getPortalObject()\ndiff --git a/src/plone/restapi/types/adapters.py b/src/plone/restapi/types/adapters.py\nindex 22d8ed483..fd749dff0 100644\n--- a/src/plone/restapi/types/adapters.py\n+++ b/src/plone/restapi/types/adapters.py\n@@ -93,10 +93,10 @@ def get_type(self):\n         raise NotImplementedError\n \n     def get_factory(self):\n-        return None\n+        pass\n \n     def get_widget(self):\n-        return None\n+        pass\n \n     def get_widget_params(self):\n         all_params = get_widget_params([self.field.interface])\n'

