Repository: plone.dexterity


Branch: refs/heads/master
Date: 2023-02-06T09:55:50+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/7a20ebe9b6fb27dc953f42d930b5acf2c4a2516f

Configuring with plone/meta

Files changed:
A .editorconfig
A .github/workflows/linting.yml
A .meta.toml
A lint-requirements.txt
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.github/workflows/linting.yml b/.github/workflows/linting.yml\nnew file mode 100644\nindex 0000000..a2139a8\n--- /dev/null\n+++ b/.github/workflows/linting.yml\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+name: Linting\n+on:\n+  push:\n+    branches: [master]\n+  pull_request:\n+    branches: [master]\n+  workflow_dispatch:\n+\n+jobs:\n+  test:\n+    name: Lint code\n+    runs-on: ${{ matrix.os }}\n+    strategy:\n+      matrix:\n+        python-version: ["3.8"]\n+        os: ["ubuntu-22.04"]\n+    steps:\n+      - uses: actions/checkout@v3\n+      - name: Set up Python\n+        uses: actions/setup-python@v4\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+      - name: Cache packages\n+        uses: actions/cache@v3\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles(\'lint-requirements.txt\', \'tox.ini\') }}\n+          restore-keys: |\n+            ${{ runner.os }}-pip-${{ matrix.python-version }}-\n+            ${{ runner.os }}-pip-\n+      - name: Install dependencies\n+        run: python -m pip install tox\n+      - name: Run formatters\n+        run: tox -e format\n+      # linters\n+      - name: QA\n+        run: tox -e lint\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..a8596fe\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "a9bb3be7"\ndiff --git a/lint-requirements.txt b/lint-requirements.txt\nnew file mode 100644\nindex 0000000..2a91911\n--- /dev/null\n+++ b/lint-requirements.txt\n@@ -0,0 +1,12 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+black==22.12.0\n+check-manifest==0.49\n+codespell==2.2.2\n+flake8==6.0.0\n+isort==5.11.4\n+pipdeptree==2.3.3\n+pyroma==4.1\n+pyupgrade==3.3.1\n+z3c.dependencychecker==2.10\n+zpretty==2.4.1\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 5392512..0f96c85 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -19,25 +21,23 @@ directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n \n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n [tool.isort]\n-profile = "black"\n-force_alphabetical_sort = true\n-force_single_line = true\n-lines_after_imports = 2\n-\n-[tool.flakeheaven.plugins]\n-# Disable some checks.\n-# - E501 line too long\n-#   flake8 is already testing this, with max-line-length=100000 in .flake8,\n-#   so pycodestyle should not test it.\n-# - W503 line break before binary operator\n-#   Outdated recommendation, see https://www.flake8rules.com/rules/W503.html\n-mccabe = ["+*"]\n-pycodestyle = ["+*", "-E501", "-W503"]\n-pyflakes = ["+*"]\n-pylint = ["+*"]\n-\n-[tool.plone-code-analysis]\n-paths = "plone/ setup.py"\n-paths_pyroma = "."\n-paths_zpretty = "plone/"\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\ndiff --git a/setup.cfg b/setup.cfg\nindex 39d5b45..8849fbc 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,41 +1,23 @@\n-# Babel configuration\n-[compile_catalog]\n-domain = plone.dexterity\n-directory = plone/dexterity/locales\n-statistics = true\n-\n-[extract_messages]\n-mapping_file = extract.ini\n-copyright_holder = Plone foundation\n-output_file = plone/dexterity/locales/plone.dexterity.pot\n-msgid_bugs_address = dexterity-development@googlegroups.com\n-width = 80\n-charset = UTF-8\n-sort_output = true\n-\n-[init_catalog]\n-domain = plone.dexterity\n-input_file = plone/dexterity/locales/plone.dexterity.pot\n-output_dir = plone/dexterity/locales\n-\n-[update_catalog]\n-domain = plone.dexterity\n-input_file = plone/dexterity/locales/plone.dexterity.pot\n-output_dir = plone/dexterity/locales\n-previous = true\n-\n-[isort]\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n-line_length = 79\n-not_skip = __init__.py\n-use_parentheses = True\n-multi_line_output = 3\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n \n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n [check-manifest]\n ignore =\n-  Makefile\n+    .editorconfig\n+    .meta.toml\n+    tox.ini\n+    lint-requirements.txt\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..30329c5\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,64 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+\n+[testenv]\n+py_files = git ls-files "*.py"\n+text_files = git ls-files "*.rst" "*.md"\n+xml_files = git ls-files "*.xml"\n+zcml_files = git ls-files "*.zcml"\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat python code\n+skip_install = true\n+deps =\n+    pyupgrade\n+    isort\n+    black\n+    zpretty\n+    -c lint-requirements.txt\n+commands =\n+    sh -c \'{[testenv]py_files} | xargs pyupgrade --py38-plus\'\n+    sh -c \'{[testenv]py_files} | xargs isort\'\n+    sh -c \'{[testenv]py_files} | xargs black\'\n+    sh -c \'{[testenv]xml_files} | xargs zpretty -x -i\'\n+    sh -c \'{[testenv]zcml_files} | xargs zpretty -z -i\'\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    flake8\n+    codespell\n+    tomli  # needed for codespell to read pyproject.toml\n+    check-manifest\n+    pyroma\n+    -c lint-requirements.txt\n+commands =\n+    sh -c \'{[testenv]py_files} | xargs flake8\'\n+    sh -c \'{[testenv]py_files} | xargs codespell\'\n+    sh -c \'{[testenv]text_files} | xargs codespell\'\n+    check-manifest\n+    pyroma -n 10 .\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies\n+deps =\n+    z3c.dependencychecker\n+    -c lint-requirements.txt\n+commands =\n+    dependencychecker\n+\n+[testenv:dependencies-graph]\n+description = generate a graph with the distribution dependencies\n+deps =\n+    pipdeptree\n+    graphviz  # optional dependency of pipdeptree\n+    -c lint-requirements.txt\n+commands =\n+    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel --graph-output svg > dependencies.svg\'\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2023-02-06T09:59:01+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/4f5e217365a4fa24b4e31447cc93a30f59344fdf

chore: tox -e format

They are example code, not tests to run, so flake8 should ignore them.

Files changed:
M plone/dexterity/content.py
M plone/dexterity/exportimport.py
M plone/dexterity/factory.py
M plone/dexterity/schema.py

b'diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 7ed1f04..271f681 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -334,7 +334,7 @@ def __init__(\n         format=_marker,\n         language=_marker,\n         rights=_marker,\n-        **kwargs\n+        **kwargs,\n     ):\n \n         if id is not None:\ndiff --git a/plone/dexterity/exportimport.py b/plone/dexterity/exportimport.py\nindex 70ccdfb..31ea17e 100644\n--- a/plone/dexterity/exportimport.py\n+++ b/plone/dexterity/exportimport.py\n@@ -44,7 +44,7 @@ def export(self, export_context, subdir, root=False):\n         context = self.context\n \n         if not root:\n-            subdir = "{}/{}".format(subdir, context.getId())\n+            subdir = f"{subdir}/{context.getId()}"\n \n         exportable = self.listExportableItems()\n \n@@ -86,7 +86,7 @@ def import_(self, import_context, subdir, root=False):\n         """See IFilesystemImporter."""\n         context = self.context\n         if not root:\n-            subdir = "{}/{}".format(subdir, context.getId())\n+            subdir = f"{subdir}/{context.getId()}"\n \n         data = import_context.readDataFile(".data", subdir)\n         if data is not None:\n@@ -135,9 +135,7 @@ def import_(self, import_context, subdir, root=False):\n                 )\n                 if object is None:\n                     logger = import_context.getLogger("SFWA")\n-                    logger.warning(\n-                        "Couldn\'t make instance: {}/{}".format(subdir, object_id)\n-                    )\n+                    logger.warning(f"Couldn\'t make instance: {subdir}/{object_id}")\n                     continue\n \n             wrapped = context._getOb(object_id)\ndiff --git a/plone/dexterity/factory.py b/plone/dexterity/factory.py\nindex fc87b38..d840af5 100644\n--- a/plone/dexterity/factory.py\n+++ b/plone/dexterity/factory.py\n@@ -57,4 +57,4 @@ def getInterfaces(self):\n         return spec\n \n     def __repr__(self):\n-        return "<{} for {}>".format(self.__class__.__name__, self.portal_type)\n+        return f"<{self.__class__.__name__} for {self.portal_type}>"\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 41a7468..70e9bc0 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -126,14 +126,14 @@ class SchemaCache:\n     You should only use this if you require bare-metal speed. For almost all\n     operations, it\'s safer and easier to do:\n \n-        >>> fti = getUtility(IDexterityFTI, name=portal_type)\n-        >>> schema = fti.lookupSchema()\n+        >> fti = getUtility(IDexterityFTI, name=portal_type)\n+        >> schema = fti.lookupSchema()\n \n     The lookupSchema() call is probably as fast as this cache. However, if\n     you need to avoid the utility lookup, you can use the cache like so:\n \n-        >>> from plone.dexterity.schema import SCHEMA_CACHE\n-        >>> my_schema = SCHEMA_CACHE.get(portal_type)\n+        >> from plone.dexterity.schema import SCHEMA_CACHE\n+        >> my_schema = SCHEMA_CACHE.get(portal_type)\n \n     The cache uses the FTI\'s modification time as its invariant.\n     """\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2023-02-06T14:43:48+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/7f5ac51efc29d3fca30fb62e6189673ad1b1f283

chore: codespell typos

Files changed:
M CHANGES.rst
M plone/dexterity/filerepresentation.py
M plone/dexterity/schema.py
M plone/dexterity/tests/test_fti.py
M plone/dexterity/utils.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 280cdc8..4f0e42b 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -207,7 +207,7 @@ Bug fixes:\n Bug fixes:\n \n \n-- Speedup (~1.6x) parallel thread execution by removing superfluos synchronization [jensens] (#123)\n+- Speedup (~1.6x) parallel thread execution by removing superfluous synchronization [jensens] (#123)\n \n \n 2.9.4 (2019-12-26)\n@@ -243,7 +243,7 @@ Bug fixes:\n - Performance enhancement:\n   Refine pre-filtering of attributes on content ``__getattr__``.\n   Filter out all permissions (ending with ``_Permission``) and some portal-tools.\n-  Also often called aquired functions are skipped.\n+  Also often called acquired functions are skipped.\n   [jensens] (#116)\n - Performance enhancement: avoid a providedBy in ``_default_from_schema``.\n   [jensens] (#117)\n@@ -549,7 +549,7 @@ Fixes:\n   behaviors weren\'t taken into account, or only FTI based behaviors but not\n   those returned by the IBehaviorAssignable adapter. Also the caching was\n   cleaned up. The tests are now better readable (at least I hope so).  In order\n-  to avoid circular imports some methods where moved fro ``utils.py`` to\n+  to avoid circular imports some methods where moved for ``utils.py`` to\n   ``schema.py``.  Deprecations are in place.\n   [jensens]\n \n@@ -612,7 +612,7 @@ Fixes:\n   [toutpt]\n \n - Date index method works even if source field is a dexterity field\n-  wich provides a  datetime python value.\n+  which provides a  datetime python value.\n   Now you can manually add a field with the name of a common Plone metadata field\n   (as effective_date, publication_date, etc.)\n   [tdesvenain]\n@@ -701,7 +701,7 @@ Fixes:\n * Added Finnish translations.\n   [pingviini]\n \n-* Overrride allowedContentTypes and invokeFactory from PortalFolder\n+* Override allowedContentTypes and invokeFactory from PortalFolder\n   to mimic the behavior of Archetypes based folders. This allows the\n   registration of IConstrainTypes adapters to actually have the\n   expected effect.\ndiff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py\nindex 046e71d..abe4306 100644\n--- a/plone/dexterity/filerepresentation.py\n+++ b/plone/dexterity/filerepresentation.py\n@@ -294,7 +294,7 @@ def id(self):\n         return self.__name__\n \n     def getId(self):\n-        # Get id for traveral purposes.\n+        # Get id for traversal purposes.\n         return self.__name__\n \n     @security.protected(permissions.View)\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 70e9bc0..0a87261 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -289,7 +289,7 @@ def invalidate_schema(event):\n         SCHEMA_CACHE.clear()\n \n \n-# here starts the code dealing wih dynamic schemas.\n+# here starts the code dealing with dynamic schemas.\n class SchemaNameEncoder:\n     """Schema name encoding"""\n \ndiff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py\nindex dffa9e2..a0f9d68 100644\n--- a/plone/dexterity/tests/test_fti.py\n+++ b/plone/dexterity/tests/test_fti.py\n@@ -90,7 +90,7 @@ def test_lookupSchema_with_nonexistant_schema(self):\n         from the fti, but the code has been removed.\n         """\n         fti = DexterityFTI("testtype")\n-        fti.schema = "model.wont.be.imported"\n+        fti.schema = "model.will.not.be.imported"\n         portal = self.create_dummy(getPhysicalPath=lambda: ("", "site"))\n         self.mock_utility(portal, ISiteRoot)\n         schemaName = portalTypeToSchemaName(fti.getId())\ndiff --git a/plone/dexterity/utils.py b/plone/dexterity/utils.py\nindex deba0fa..1cccbcb 100644\n--- a/plone/dexterity/utils.py\n+++ b/plone/dexterity/utils.py\n@@ -216,7 +216,7 @@ def datify(in_date):\n def all_merged_tagged_values_dict(ifaces, key):\n     """mergedTaggedValueDict of all interfaces for a given key\n \n-    usally interfaces is a list of schemas\n+    usually interfaces is a list of schemas\n     """\n     info = dict()\n     for iface in ifaces:\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2023-02-06T14:43:48+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/0afb2c7428066f242baaca8b2500b42b086c38b7

chore: ignore Makefile

Files changed:
M MANIFEST.in

b'diff --git a/MANIFEST.in b/MANIFEST.in\nindex fd7011e..f51ca02 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -10,3 +10,4 @@ global-exclude *.pyc\n include pyproject.toml\n recursive-exclude news *\n exclude news\n+exclude Makefile\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2023-02-06T14:43:48+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/591b1fad76b5e34d0bb5b08f9ecc841ca2e84cd0

chore: remove repoze.zope2 import

Files changed:
M plone/dexterity/browser/traversal.py

b'diff --git a/plone/dexterity/browser/traversal.py b/plone/dexterity/browser/traversal.py\nindex fa8f1cd..62d8fc7 100644\n--- a/plone/dexterity/browser/traversal.py\n+++ b/plone/dexterity/browser/traversal.py\n@@ -7,12 +7,7 @@\n from webdav.NullResource import NullResource\n from zope.component import adapter\n from zope.publisher.interfaces.browser import IBrowserRequest\n-\n-\n-try:\n-    from repoze.zope2.publishtraverse import DefaultPublishTraverse\n-except ImportError:\n-    from ZPublisher.BaseRequest import DefaultPublishTraverse\n+from ZPublisher.BaseRequest import DefaultPublishTraverse\n \n \n @adapter(IDexterityContent, IBrowserRequest)\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2023-02-06T14:43:48+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/de3e6e44be728c911c94ce0eddf3248108a04ab7

feat: configure z3c.dependencychecker

Files changed:
M .meta.toml
M pyproject.toml

b'diff --git a/.meta.toml b/.meta.toml\nindex a8596fe..2487084 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -3,3 +3,8 @@\n [meta]\n template = "default"\n commit-id = "a9bb3be7"\n+\n+[dependencies]\n+mappings = [\n+    "Zope = [\'OFS\', \'ZPublisher\', \'webdav\',]",\n+    ]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 0f96c85..fb06e7e 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -41,3 +41,6 @@ profile = "plone"\n \n [tool.black]\n target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\'OFS\', \'ZPublisher\', \'webdav\',]\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2023-02-06T14:45:36+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/726eb8b612f8fb94ead035994cfad82018b7d30f

feat: configure codespell

Unfortunately Zope has this typo on webdav response.

It will be fixed on Zope#1100

Files changed:
M .meta.toml
M pyproject.toml

b'diff --git a/.meta.toml b/.meta.toml\nindex 2487084..52537be 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -8,3 +8,6 @@ commit-id = "a9bb3be7"\n mappings = [\n     "Zope = [\'OFS\', \'ZPublisher\', \'webdav\',]",\n     ]\n+\n+[codespell]\n+additional-ignores = "succeded"\ndiff --git a/pyproject.toml b/pyproject.toml\nindex fb06e7e..dbdcc44 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -42,5 +42,8 @@ profile = "plone"\n [tool.black]\n target-version = ["py38"]\n \n+[tool.codespell]\n+ignore-words-list = "succeded"\n+\n [tool.dependencychecker]\n Zope = [\'OFS\', \'ZPublisher\', \'webdav\',]\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2023-02-06T14:45:37+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/80f905750a267875f6d55038389c916f2db630de

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 1a2208b..7b12b2b 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -58,34 +58,54 @@ def read(filename):\n     zip_safe=False,\n     python_requires=">=3.8",\n     install_requires=[\n+        "AccessControl",\n+        "Acquisition",\n         "DateTime>=4.0.1",\n+        "Products.CMFCore",\n+        "Products.CMFDynamicViewFTI",\n+        "Products.statusmessages",\n+        "Products.GenericSetup",\n+        "Zope",\n+        "persistent",\n         "plone.alterego",\n+        "plone.app.uuid",\n         "plone.autoform>=1.0",\n+        "plone.base",\n         "plone.behavior>=1.0",\n         "plone.folder",\n         "plone.memoize",\n+        "plone.registry",\n         "plone.rfc822",\n         "plone.supermodel>=1.0",\n         "plone.uuid",\n         "plone.z3cform>=0.6.0",\n-        "Products.CMFCore",\n-        "Products.CMFDynamicViewFTI",\n-        "Products.statusmessages",\n+        "z3c.form",\n         "setuptools",\n+        "zExceptions",\n         "zope.annotation",\n         "zope.browser",\n         "zope.component",\n         "zope.container",\n+        "zope.deprecation",\n         "zope.dottedname",\n-        "zope.globalrequest",\n+        "zope.event",\n         "zope.filerepresentation>=3.6.0",\n+        "zope.globalrequest",\n+        "zope.i18nmessageid",\n         "zope.interface",\n         "zope.lifecycleevent",\n         "zope.publisher",\n         "zope.schema",\n         "zope.security",\n         "zope.size",\n-        "Zope",\n     ],\n-    extras_require={"test": ["plone.testing", "Products.CMFPlone"]},\n+    extras_require={\n+        "test": [\n+            "plone.testing",\n+            "zope.configuration",\n+            "plone.app.content",\n+            "plone.i18n",\n+            "pytz",\n+        ]\n+    },\n )\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2023-02-06T14:45:37+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/31e27f7b2d06ac0d3ba9012b0d3296fdd1088c8b

chore: remove code-analysis github workflow

Files changed:
D .github/workflows/code-analysis.yml

b'diff --git a/.github/workflows/code-analysis.yml b/.github/workflows/code-analysis.yml\ndeleted file mode 100644\nindex 8411110..0000000\n--- a/.github/workflows/code-analysis.yml\n+++ /dev/null\n@@ -1,15 +0,0 @@\n-name: Code Analysis\n-on:\n-  push:\n-\n-jobs:\n-  code-analysis:\n-    name: Code analysis\n-    runs-on: ubuntu-latest\n-\n-    steps:\n-      - name: Checkout codebase\n-        uses: actions/checkout@v2\n-\n-      - name: Run all lint checks\n-        uses: plone/code-analysis-action@v2\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2023-02-06T14:45:37+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/f5e9f405a1bd8a5ce1846be2760729c9c9d1273d

Add news entry

Files changed:
A news/1.bugfix

b'diff --git a/news/1.bugfix b/news/1.bugfix\nnew file mode 100644\nindex 00000000..a1797ba0\n--- /dev/null\n+++ b/news/1.bugfix\n@@ -0,0 +1,2 @@\n+Configure packages with plone/meta.\n+[gforcada]\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2023-02-07T09:24:03+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.dexterity/commit/ff8406791af96a136bdefd8229619977cdfb32ca

Merge pull request #172 from plone/config-with-default-template-881fb30c

Config with default template

Files changed:
A .editorconfig
A .github/workflows/linting.yml
A .meta.toml
A lint-requirements.txt
A news/1.bugfix
A tox.ini
M CHANGES.rst
M MANIFEST.in
M plone/dexterity/browser/traversal.py
M plone/dexterity/content.py
M plone/dexterity/exportimport.py
M plone/dexterity/factory.py
M plone/dexterity/filerepresentation.py
M plone/dexterity/schema.py
M plone/dexterity/tests/test_fti.py
M plone/dexterity/utils.py
M pyproject.toml
M setup.cfg
M setup.py
D .github/workflows/code-analysis.yml

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 00000000..b4158b89\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.github/workflows/code-analysis.yml b/.github/workflows/code-analysis.yml\ndeleted file mode 100644\nindex 8411110a..00000000\n--- a/.github/workflows/code-analysis.yml\n+++ /dev/null\n@@ -1,15 +0,0 @@\n-name: Code Analysis\n-on:\n-  push:\n-\n-jobs:\n-  code-analysis:\n-    name: Code analysis\n-    runs-on: ubuntu-latest\n-\n-    steps:\n-      - name: Checkout codebase\n-        uses: actions/checkout@v2\n-\n-      - name: Run all lint checks\n-        uses: plone/code-analysis-action@v2\ndiff --git a/.github/workflows/linting.yml b/.github/workflows/linting.yml\nnew file mode 100644\nindex 00000000..a2139a8b\n--- /dev/null\n+++ b/.github/workflows/linting.yml\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+name: Linting\n+on:\n+  push:\n+    branches: [master]\n+  pull_request:\n+    branches: [master]\n+  workflow_dispatch:\n+\n+jobs:\n+  test:\n+    name: Lint code\n+    runs-on: ${{ matrix.os }}\n+    strategy:\n+      matrix:\n+        python-version: ["3.8"]\n+        os: ["ubuntu-22.04"]\n+    steps:\n+      - uses: actions/checkout@v3\n+      - name: Set up Python\n+        uses: actions/setup-python@v4\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+      - name: Cache packages\n+        uses: actions/cache@v3\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles(\'lint-requirements.txt\', \'tox.ini\') }}\n+          restore-keys: |\n+            ${{ runner.os }}-pip-${{ matrix.python-version }}-\n+            ${{ runner.os }}-pip-\n+      - name: Install dependencies\n+        run: python -m pip install tox\n+      - name: Run formatters\n+        run: tox -e format\n+      # linters\n+      - name: QA\n+        run: tox -e lint\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 00000000..52537be5\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,13 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "a9bb3be7"\n+\n+[dependencies]\n+mappings = [\n+    "Zope = [\'OFS\', \'ZPublisher\', \'webdav\',]",\n+    ]\n+\n+[codespell]\n+additional-ignores = "succeded"\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 280cdc8c..4f0e42bd 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -207,7 +207,7 @@ Bug fixes:\n Bug fixes:\n \n \n-- Speedup (~1.6x) parallel thread execution by removing superfluos synchronization [jensens] (#123)\n+- Speedup (~1.6x) parallel thread execution by removing superfluous synchronization [jensens] (#123)\n \n \n 2.9.4 (2019-12-26)\n@@ -243,7 +243,7 @@ Bug fixes:\n - Performance enhancement:\n   Refine pre-filtering of attributes on content ``__getattr__``.\n   Filter out all permissions (ending with ``_Permission``) and some portal-tools.\n-  Also often called aquired functions are skipped.\n+  Also often called acquired functions are skipped.\n   [jensens] (#116)\n - Performance enhancement: avoid a providedBy in ``_default_from_schema``.\n   [jensens] (#117)\n@@ -549,7 +549,7 @@ Fixes:\n   behaviors weren\'t taken into account, or only FTI based behaviors but not\n   those returned by the IBehaviorAssignable adapter. Also the caching was\n   cleaned up. The tests are now better readable (at least I hope so).  In order\n-  to avoid circular imports some methods where moved fro ``utils.py`` to\n+  to avoid circular imports some methods where moved for ``utils.py`` to\n   ``schema.py``.  Deprecations are in place.\n   [jensens]\n \n@@ -612,7 +612,7 @@ Fixes:\n   [toutpt]\n \n - Date index method works even if source field is a dexterity field\n-  wich provides a  datetime python value.\n+  which provides a  datetime python value.\n   Now you can manually add a field with the name of a common Plone metadata field\n   (as effective_date, publication_date, etc.)\n   [tdesvenain]\n@@ -701,7 +701,7 @@ Fixes:\n * Added Finnish translations.\n   [pingviini]\n \n-* Overrride allowedContentTypes and invokeFactory from PortalFolder\n+* Override allowedContentTypes and invokeFactory from PortalFolder\n   to mimic the behavior of Archetypes based folders. This allows the\n   registration of IConstrainTypes adapters to actually have the\n   expected effect.\ndiff --git a/MANIFEST.in b/MANIFEST.in\nindex fd7011e6..f51ca02c 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -10,3 +10,4 @@ global-exclude *.pyc\n include pyproject.toml\n recursive-exclude news *\n exclude news\n+exclude Makefile\ndiff --git a/lint-requirements.txt b/lint-requirements.txt\nnew file mode 100644\nindex 00000000..2a91911a\n--- /dev/null\n+++ b/lint-requirements.txt\n@@ -0,0 +1,12 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+black==22.12.0\n+check-manifest==0.49\n+codespell==2.2.2\n+flake8==6.0.0\n+isort==5.11.4\n+pipdeptree==2.3.3\n+pyroma==4.1\n+pyupgrade==3.3.1\n+z3c.dependencychecker==2.10\n+zpretty==2.4.1\ndiff --git a/news/1.bugfix b/news/1.bugfix\nnew file mode 100644\nindex 00000000..a1797ba0\n--- /dev/null\n+++ b/news/1.bugfix\n@@ -0,0 +1,2 @@\n+Configure packages with plone/meta.\n+[gforcada]\ndiff --git a/plone/dexterity/browser/traversal.py b/plone/dexterity/browser/traversal.py\nindex fa8f1cd5..62d8fc78 100644\n--- a/plone/dexterity/browser/traversal.py\n+++ b/plone/dexterity/browser/traversal.py\n@@ -7,12 +7,7 @@\n from webdav.NullResource import NullResource\n from zope.component import adapter\n from zope.publisher.interfaces.browser import IBrowserRequest\n-\n-\n-try:\n-    from repoze.zope2.publishtraverse import DefaultPublishTraverse\n-except ImportError:\n-    from ZPublisher.BaseRequest import DefaultPublishTraverse\n+from ZPublisher.BaseRequest import DefaultPublishTraverse\n \n \n @adapter(IDexterityContent, IBrowserRequest)\ndiff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 7ed1f04f..271f681d 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -334,7 +334,7 @@ def __init__(\n         format=_marker,\n         language=_marker,\n         rights=_marker,\n-        **kwargs\n+        **kwargs,\n     ):\n \n         if id is not None:\ndiff --git a/plone/dexterity/exportimport.py b/plone/dexterity/exportimport.py\nindex 70ccdfb3..31ea17eb 100644\n--- a/plone/dexterity/exportimport.py\n+++ b/plone/dexterity/exportimport.py\n@@ -44,7 +44,7 @@ def export(self, export_context, subdir, root=False):\n         context = self.context\n \n         if not root:\n-            subdir = "{}/{}".format(subdir, context.getId())\n+            subdir = f"{subdir}/{context.getId()}"\n \n         exportable = self.listExportableItems()\n \n@@ -86,7 +86,7 @@ def import_(self, import_context, subdir, root=False):\n         """See IFilesystemImporter."""\n         context = self.context\n         if not root:\n-            subdir = "{}/{}".format(subdir, context.getId())\n+            subdir = f"{subdir}/{context.getId()}"\n \n         data = import_context.readDataFile(".data", subdir)\n         if data is not None:\n@@ -135,9 +135,7 @@ def import_(self, import_context, subdir, root=False):\n                 )\n                 if object is None:\n                     logger = import_context.getLogger("SFWA")\n-                    logger.warning(\n-                        "Couldn\'t make instance: {}/{}".format(subdir, object_id)\n-                    )\n+                    logger.warning(f"Couldn\'t make instance: {subdir}/{object_id}")\n                     continue\n \n             wrapped = context._getOb(object_id)\ndiff --git a/plone/dexterity/factory.py b/plone/dexterity/factory.py\nindex fc87b38e..d840af5a 100644\n--- a/plone/dexterity/factory.py\n+++ b/plone/dexterity/factory.py\n@@ -57,4 +57,4 @@ def getInterfaces(self):\n         return spec\n \n     def __repr__(self):\n-        return "<{} for {}>".format(self.__class__.__name__, self.portal_type)\n+        return f"<{self.__class__.__name__} for {self.portal_type}>"\ndiff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py\nindex 046e71d9..abe43067 100644\n--- a/plone/dexterity/filerepresentation.py\n+++ b/plone/dexterity/filerepresentation.py\n@@ -294,7 +294,7 @@ def id(self):\n         return self.__name__\n \n     def getId(self):\n-        # Get id for traveral purposes.\n+        # Get id for traversal purposes.\n         return self.__name__\n \n     @security.protected(permissions.View)\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 41a74689..0a872616 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -126,14 +126,14 @@ class SchemaCache:\n     You should only use this if you require bare-metal speed. For almost all\n     operations, it\'s safer and easier to do:\n \n-        >>> fti = getUtility(IDexterityFTI, name=portal_type)\n-        >>> schema = fti.lookupSchema()\n+        >> fti = getUtility(IDexterityFTI, name=portal_type)\n+        >> schema = fti.lookupSchema()\n \n     The lookupSchema() call is probably as fast as this cache. However, if\n     you need to avoid the utility lookup, you can use the cache like so:\n \n-        >>> from plone.dexterity.schema import SCHEMA_CACHE\n-        >>> my_schema = SCHEMA_CACHE.get(portal_type)\n+        >> from plone.dexterity.schema import SCHEMA_CACHE\n+        >> my_schema = SCHEMA_CACHE.get(portal_type)\n \n     The cache uses the FTI\'s modification time as its invariant.\n     """\n@@ -289,7 +289,7 @@ def invalidate_schema(event):\n         SCHEMA_CACHE.clear()\n \n \n-# here starts the code dealing wih dynamic schemas.\n+# here starts the code dealing with dynamic schemas.\n class SchemaNameEncoder:\n     """Schema name encoding"""\n \ndiff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py\nindex dffa9e22..a0f9d680 100644\n--- a/plone/dexterity/tests/test_fti.py\n+++ b/plone/dexterity/tests/test_fti.py\n@@ -90,7 +90,7 @@ def test_lookupSchema_with_nonexistant_schema(self):\n         from the fti, but the code has been removed.\n         """\n         fti = DexterityFTI("testtype")\n-        fti.schema = "model.wont.be.imported"\n+        fti.schema = "model.will.not.be.imported"\n         portal = self.create_dummy(getPhysicalPath=lambda: ("", "site"))\n         self.mock_utility(portal, ISiteRoot)\n         schemaName = portalTypeToSchemaName(fti.getId())\ndiff --git a/plone/dexterity/utils.py b/plone/dexterity/utils.py\nindex deba0fa3..1cccbcb9 100644\n--- a/plone/dexterity/utils.py\n+++ b/plone/dexterity/utils.py\n@@ -216,7 +216,7 @@ def datify(in_date):\n def all_merged_tagged_values_dict(ifaces, key):\n     """mergedTaggedValueDict of all interfaces for a given key\n \n-    usally interfaces is a list of schemas\n+    usually interfaces is a list of schemas\n     """\n     info = dict()\n     for iface in ifaces:\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 53925129..dbdcc44a 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -19,25 +21,29 @@ directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n \n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n [tool.isort]\n-profile = "black"\n-force_alphabetical_sort = true\n-force_single_line = true\n-lines_after_imports = 2\n-\n-[tool.flakeheaven.plugins]\n-# Disable some checks.\n-# - E501 line too long\n-#   flake8 is already testing this, with max-line-length=100000 in .flake8,\n-#   so pycodestyle should not test it.\n-# - W503 line break before binary operator\n-#   Outdated recommendation, see https://www.flake8rules.com/rules/W503.html\n-mccabe = ["+*"]\n-pycodestyle = ["+*", "-E501", "-W503"]\n-pyflakes = ["+*"]\n-pylint = ["+*"]\n-\n-[tool.plone-code-analysis]\n-paths = "plone/ setup.py"\n-paths_pyroma = "."\n-paths_zpretty = "plone/"\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.codespell]\n+ignore-words-list = "succeded"\n+\n+[tool.dependencychecker]\n+Zope = [\'OFS\', \'ZPublisher\', \'webdav\',]\ndiff --git a/setup.cfg b/setup.cfg\nindex 39d5b457..8849fbc4 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,41 +1,23 @@\n-# Babel configuration\n-[compile_catalog]\n-domain = plone.dexterity\n-directory = plone/dexterity/locales\n-statistics = true\n-\n-[extract_messages]\n-mapping_file = extract.ini\n-copyright_holder = Plone foundation\n-output_file = plone/dexterity/locales/plone.dexterity.pot\n-msgid_bugs_address = dexterity-development@googlegroups.com\n-width = 80\n-charset = UTF-8\n-sort_output = true\n-\n-[init_catalog]\n-domain = plone.dexterity\n-input_file = plone/dexterity/locales/plone.dexterity.pot\n-output_dir = plone/dexterity/locales\n-\n-[update_catalog]\n-domain = plone.dexterity\n-input_file = plone/dexterity/locales/plone.dexterity.pot\n-output_dir = plone/dexterity/locales\n-previous = true\n-\n-[isort]\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n-line_length = 79\n-not_skip = __init__.py\n-use_parentheses = True\n-multi_line_output = 3\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n \n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n [check-manifest]\n ignore =\n-  Makefile\n+    .editorconfig\n+    .meta.toml\n+    tox.ini\n+    lint-requirements.txt\ndiff --git a/setup.py b/setup.py\nindex 1a2208b7..7b12b2b8 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -58,34 +58,54 @@ def read(filename):\n     zip_safe=False,\n     python_requires=">=3.8",\n     install_requires=[\n+        "AccessControl",\n+        "Acquisition",\n         "DateTime>=4.0.1",\n+        "Products.CMFCore",\n+        "Products.CMFDynamicViewFTI",\n+        "Products.statusmessages",\n+        "Products.GenericSetup",\n+        "Zope",\n+        "persistent",\n         "plone.alterego",\n+        "plone.app.uuid",\n         "plone.autoform>=1.0",\n+        "plone.base",\n         "plone.behavior>=1.0",\n         "plone.folder",\n         "plone.memoize",\n+        "plone.registry",\n         "plone.rfc822",\n         "plone.supermodel>=1.0",\n         "plone.uuid",\n         "plone.z3cform>=0.6.0",\n-        "Products.CMFCore",\n-        "Products.CMFDynamicViewFTI",\n-        "Products.statusmessages",\n+        "z3c.form",\n         "setuptools",\n+        "zExceptions",\n         "zope.annotation",\n         "zope.browser",\n         "zope.component",\n         "zope.container",\n+        "zope.deprecation",\n         "zope.dottedname",\n-        "zope.globalrequest",\n+        "zope.event",\n         "zope.filerepresentation>=3.6.0",\n+        "zope.globalrequest",\n+        "zope.i18nmessageid",\n         "zope.interface",\n         "zope.lifecycleevent",\n         "zope.publisher",\n         "zope.schema",\n         "zope.security",\n         "zope.size",\n-        "Zope",\n     ],\n-    extras_require={"test": ["plone.testing", "Products.CMFPlone"]},\n+    extras_require={\n+        "test": [\n+            "plone.testing",\n+            "zope.configuration",\n+            "plone.app.content",\n+            "plone.i18n",\n+            "pytz",\n+        ]\n+    },\n )\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 00000000..30329c53\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,64 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+\n+[testenv]\n+py_files = git ls-files "*.py"\n+text_files = git ls-files "*.rst" "*.md"\n+xml_files = git ls-files "*.xml"\n+zcml_files = git ls-files "*.zcml"\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat python code\n+skip_install = true\n+deps =\n+    pyupgrade\n+    isort\n+    black\n+    zpretty\n+    -c lint-requirements.txt\n+commands =\n+    sh -c \'{[testenv]py_files} | xargs pyupgrade --py38-plus\'\n+    sh -c \'{[testenv]py_files} | xargs isort\'\n+    sh -c \'{[testenv]py_files} | xargs black\'\n+    sh -c \'{[testenv]xml_files} | xargs zpretty -x -i\'\n+    sh -c \'{[testenv]zcml_files} | xargs zpretty -z -i\'\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    flake8\n+    codespell\n+    tomli  # needed for codespell to read pyproject.toml\n+    check-manifest\n+    pyroma\n+    -c lint-requirements.txt\n+commands =\n+    sh -c \'{[testenv]py_files} | xargs flake8\'\n+    sh -c \'{[testenv]py_files} | xargs codespell\'\n+    sh -c \'{[testenv]text_files} | xargs codespell\'\n+    check-manifest\n+    pyroma -n 10 .\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies\n+deps =\n+    z3c.dependencychecker\n+    -c lint-requirements.txt\n+commands =\n+    dependencychecker\n+\n+[testenv:dependencies-graph]\n+description = generate a graph with the distribution dependencies\n+deps =\n+    pipdeptree\n+    graphviz  # optional dependency of pipdeptree\n+    -c lint-requirements.txt\n+commands =\n+    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel --graph-output svg > dependencies.svg\'\n'

