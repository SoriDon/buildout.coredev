Repository: plone.app.iterate


Branch: refs/heads/master
Date: 2016-02-26T18:15:50+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.iterate/commit/95424b705a4604796038c0d215a49b772a5abd87

Revert "Cleanup + Added profile id "default" and deprecated id "plone.app.iterate"."

Files changed:
M CHANGES.rst
M plone/app/iterate/configure.zcml
M plone/app/iterate/testing.py
M setup.py
D plone/app/iterate/setuphandlers.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 5ec2bbc..c2b6c42 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,26 +8,10 @@ New:
 
 - *add item here*
 
-- plone.app.iterate depends on GenericSetup >= 1.8.2
-  for using a post_handler on registerProfile
-  [iham]
-
-- Added naming of default GenericSetup profile as "default".
-  "plone.app.iterate" also exists to keep compatibility.
-  [iham]
-
-- Added deprecation warning to GS profile "plone.app.iterate"
-  [iham]
-
 Fixes:
 
 - *add item here*
 
-- No need to register as Zope2 Product anymore.
-  [iham]
-
-- Some minor pep8 cleanup.
-  [iham]
 
 3.1.4 (2015-11-16)
 ------------------
diff --git a/plone/app/iterate/configure.zcml b/plone/app/iterate/configure.zcml
index 282a5e2..f4b5074 100644
--- a/plone/app/iterate/configure.zcml
+++ b/plone/app/iterate/configure.zcml
@@ -5,92 +5,79 @@
     xmlns:zcml="http://namespaces.zope.org/zcml"
     i18n_domain="plone">
 
-  <include package="zope.annotation" />
-  <include package="Products.CMFCore" file="permissions.zcml" />
+    <include package="zope.annotation" />
+    <include package="Products.CMFCore" file="permissions.zcml" />
 
-  <include package=".subscribers"/>
-  <include package=".browser"/>
+    <include package=".subscribers"/>
+    <include package=".browser"/>
 
-  <includeDependencies package="." />
+    <!-- Set up as a Zope product and register an extension profile -->
+    <five:registerPackage package="." />
 
-  <genericsetup:registerProfile
-    name="default"
-    title="Working Copy Support (Iterate)"
-    directory="profiles/default"
-    description="Adds working copy support (aka. in-place staging) to Plone."
-    provides="Products.GenericSetup.interfaces.EXTENSION"
-    />
-
-  <!--
-    Remove, when CMFPlone no more depends on this profile.
-    Products.CMFPlone/Products/CMFPlone/MigrationTool.py:99:
-    Addon(profile_id=u'plone.app.iterate:plone.app.iterate')
-  -->
-  <genericsetup:registerProfile
-    name="plone.app.iterate"
-    title="Working Copy Support (Iterate)"
-    directory="profiles/default"
-    description="Adds working copy support (aka. in-place staging) to Plone."
-    provides="Products.GenericSetup.interfaces.EXTENSION"
-    post_handler=".setuphandlers.deprecate_profile"
-    />
-
-  <genericsetup:registerProfile
-      name="test"
-      title="plone.app.iterate: Test fixture"
-      directory="profiles/test"
-      description="Extension profile to configure a test fixture"
-      for="Products.CMFPlone.interfaces.ITestCasePloneSiteRoot"
+    <genericsetup:registerProfile
+      name="plone.app.iterate"
+      title="Working Copy Support (Iterate)"
+      directory="profiles/default"
+      description="Adds working copy support (aka. in-place staging) to Plone."
       provides="Products.GenericSetup.interfaces.EXTENSION"
       />
 
-  <genericsetup:upgradeStep
-      source="*"
-      destination="121"
-      title="Reinstall plone.app.iterate"
-      description=""
-      profile="plone.app.iterate:plone.app.iterate"
-      handler="plone.app.iterate.util.upgrade_by_reinstall"
+    <genericsetup:registerProfile
+        name="test"
+        title="plone.app.iterate: Test fixture"
+        directory="profiles/test"
+        description="Extension profile to configure a test fixture"
+        for="Products.CMFPlone.interfaces.ITestCasePloneSiteRoot"
+        provides="Products.GenericSetup.interfaces.EXTENSION"
+        />
+
+    <genericsetup:upgradeStep
+        source="*"
+        destination="121"
+        title="Reinstall plone.app.iterate"
+        description=""
+        profile="plone.app.iterate:plone.app.iterate"
+        handler="plone.app.iterate.util.upgrade_by_reinstall"
+        />
+
+    <!-- Policy and behaviour for basic objects -->
+    <class class="Products.Archetypes.BaseObject.BaseObject">
+        <implements interface=".interfaces.IIterateAware" />
+    </class>
+
+    <adapter factory=".policy.CheckinCheckoutPolicyAdapter" />
+    <adapter factory=".relation.CheckinCheckoutReferenceAdapter"/>
+    <adapter factory=".archiver.ContentArchiver" />
+    <adapter factory=".copier.ContentCopier" />
+
+    <!-- Checkout folder locators -->
+    <adapter
+        factory=".containers.HomeFolderLocator"
+        name="plone.app.iterate.home"
+        />
+
+    <adapter
+        factory=".containers.ParentFolderLocator"
+        name="plone.app.iterate.parent"
+        />
+
+    <!-- Handle deletions of working copies -->
+    <subscriber
+       for=".interfaces.IWorkingCopyRelation
+            zope.lifecycleevent.interfaces.IObjectRemovedEvent"
+       handler=".event.handleDeletion"
+       />
+
+    <permission
+      id="plone.app.iterate.CheckInContent"
+      title="iterate : Check in content"
       />
 
-  <!-- Policy and behavior for basic objects -->
-  <class class="Products.Archetypes.BaseObject.BaseObject">
-      <implements interface=".interfaces.IIterateAware" />
-  </class>
-
-  <adapter factory=".policy.CheckinCheckoutPolicyAdapter" />
-  <adapter factory=".relation.CheckinCheckoutReferenceAdapter"/>
-  <adapter factory=".archiver.ContentArchiver" />
-  <adapter factory=".copier.ContentCopier" />
-
-  <!-- Checkout folder locators -->
-  <adapter
-      factory=".containers.HomeFolderLocator"
-      name="plone.app.iterate.home"
+    <permission
+      id="plone.app.iterate.CheckOutContent"
+      title="iterate : Check out content"
       />
 
-  <adapter
-      factory=".containers.ParentFolderLocator"
-      name="plone.app.iterate.parent"
-      />
-
-  <!-- Handle deletions of working copies -->
-  <subscriber
-     for=".interfaces.IWorkingCopyRelation
-          zope.lifecycleevent.interfaces.IObjectRemovedEvent"
-     handler=".event.handleDeletion"
-     />
-
-  <permission
-    id="plone.app.iterate.CheckInContent"
-    title="iterate : Check in content"
-    />
-
-  <permission
-    id="plone.app.iterate.CheckOutContent"
-    title="iterate : Check out content"
-    />
-
-  <include package=".dexterity" zcml:condition="installed plone.app.relationfield" />
+      <include package=".dexterity" zcml:condition="installed plone.app.relationfield" />
 
 </configure>
diff --git a/plone/app/iterate/setuphandlers.py b/plone/app/iterate/setuphandlers.py
deleted file mode 100644
index 595e04f..0000000
--- a/plone/app/iterate/setuphandlers.py
+++ /dev/null
@@ -1,12 +0,0 @@
-# -*- coding: utf-8 -*-
-"""Deprecation warning for plone.app.iterate:plone.app.iterate profile."""
-
-import warnings
-
-
-def deprecate_profile(tool):
-    """Deprecation profile plone.app.iterate."""
-    warnings.warn(
-        'The profile with id "plone.app.iterate" was renamed to "default".',
-        DeprecationWarning
-        )
diff --git a/plone/app/iterate/testing.py b/plone/app/iterate/testing.py
index 5d6676b..7668d38 100644
--- a/plone/app/iterate/testing.py
+++ b/plone/app/iterate/testing.py
@@ -1,4 +1,3 @@
-"""Testing setup for integration and functional tests."""
 # -*- coding: utf-8 -*-
 from plone.app.contenttypes.testing import PloneAppContenttypes
 from plone.app.testing import PLONE_FIXTURE
@@ -9,39 +8,37 @@
 from plone.testing import z2
 
 
-ADMIN = {
+admin = {
     'id': 'admin',
     'password': 'secret',
     'roles': ['Manager'],
 }
-EDITOR = {
+editor = {
     'id': 'editor',
     'password': 'secret',
     'roles': ['Editor'],
 }
-CONTRIBUTOR = {
+contributor = {
     'id': 'contributor',
     'password': 'secret',
     'roles': ['Contributor'],
 }
-USERS_TO_BE_ADDED = (
-    ADMIN,
-    EDITOR,
-    CONTRIBUTOR,
+users_to_be_added = (
+    admin,
+    editor,
+    contributor,
 )
-USERS_WITH_MEMBER_FOLDER = (
-    EDITOR,
-    CONTRIBUTOR,
+users_with_member_folder = (
+    editor,
+    contributor,
 )
 
 
 class PloneAppIterateLayer(PloneSandboxLayer):
-    """Plone Sandbox Layer for plone.app.iterate."""
 
     defaultBases = (PLONE_FIXTURE,)
 
     def setUpZope(self, app, configurationContext):
-        """Setup Zope with Addons."""
         import Products.ATContentTypes
         self.loadZCML(package=Products.ATContentTypes)
         z2.installProduct(app, 'Products.ATContentTypes')
@@ -53,19 +50,19 @@ def setUpZope(self, app, configurationContext):
 
         import plone.app.iterate
         self.loadZCML(package=plone.app.iterate)
+        z2.installProduct(app, 'plone.app.iterate')
 
     def setUpPloneSite(self, portal):
-        """Setup Plone Site with Addons."""
         # restore default workflow
         applyProfile(portal, 'Products.CMFPlone:testfixture')
 
         # add default content
         applyProfile(portal, 'Products.ATContentTypes:content')
 
-        applyProfile(portal, 'plone.app.iterate:default')
+        applyProfile(portal, 'plone.app.iterate:plone.app.iterate')
         applyProfile(portal, 'plone.app.iterate:test')
 
-        for user in USERS_TO_BE_ADDED:
+        for user in users_to_be_added:
             portal.portal_membership.addMember(
                 user['id'],
                 user['password'],
@@ -73,7 +70,7 @@ def setUpPloneSite(self, portal):
                 [],
             )
 
-        for user in USERS_WITH_MEMBER_FOLDER:
+        for user in users_with_member_folder:
             mtool = portal.portal_membership
             if not mtool.getMemberareaCreationFlag():
                 mtool.setMemberareaCreationFlag()
@@ -114,20 +111,15 @@ def setUpPloneSite(self, portal):
 
 
 class DexPloneAppIterateLayer(PloneAppContenttypes):
-    """Dexterity based Plone Sandbox Layer for plone.app.iterate."""
-
     def setUpZope(self, app, configurationContext):
-        """Setup Zope with Addons."""
-        super(DexPloneAppIterateLayer,
-              self).setUpZope(app, configurationContext)
-
+        super(DexPloneAppIterateLayer, self).setUpZope(app, configurationContext)
         import plone.app.iterate
         self.loadZCML(package=plone.app.iterate)
+        z2.installProduct(app, 'plone.app.iterate')
 
     def setUpPloneSite(self, portal):
-        """Setup Plone Site with Addons."""
         super(DexPloneAppIterateLayer, self).setUpPloneSite(portal)
-        applyProfile(portal, 'plone.app.iterate:default')
+        applyProfile(portal, 'plone.app.iterate:plone.app.iterate')
 
 
 PLONEAPPITERATEDEX_FIXTURE = DexPloneAppIterateLayer()
diff --git a/setup.py b/setup.py
index 8b54414..99db45c 100644
--- a/setup.py
+++ b/setup.py
@@ -1,70 +1,61 @@
-"""Setup plone.app.iterate."""
 from setuptools import setup, find_packages
 
-VERSION = '3.1.5.dev0'
+version = '3.1.5.dev0'
 
-LONG_DESCRIPTION = (
-    open('README.rst').read() +
-    '\n' +
-    open('CHANGES.rst').read() +
-    '\n')
-
-setup(
-    name='plone.app.iterate',
-    version=VERSION,
-    description="check-out/check-in staging for Plone",
-    long_description=LONG_DESCRIPTION,
-    classifiers=[
-        "Environment :: Web Environment",
-        "Framework :: Plone",
-        "Framework :: Plone :: 5.0",
-        "Framework :: Zope2",
-        "License :: OSI Approved :: GNU General Public License (GPL)",
-        "Operating System :: OS Independent",
-        "Programming Language :: Python",
-        "Programming Language :: Python :: 2.7",
-    ],
-    keywords='check-out check-in staging',
-    author='Plone Foundation',
-    author_email='plone-developers@lists.sourceforge.net',
-    url='https://pypi.python.org/pypi/plone.app.iterate',
-    license='GPL version 2',
-    packages=find_packages(exclude=['ez_setup']),
-    namespace_packages=['plone', 'plone.app'],
-    include_package_data=True,
-    zip_safe=False,
-    install_requires=[
-        'setuptools',
-        'Products.GenericSetup>=1.8.2',
-        'plone.locking',
-        'plone.memoize',
-        'zope.annotation',
-        'zope.component',
-        'zope.event',
-        'zope.i18nmessageid',
-        'zope.interface',
-        'zope.lifecycleevent',
-        'zope.schema',
-        'zope.viewlet',
-        'Acquisition',
-        'DateTime',
-        'Products.Archetypes',
-        'Products.CMFCore',
-        'Products.CMFEditions',
-        'Products.CMFPlacefulWorkflow',
-        'Products.DCWorkflow',
-        'Products.statusmessages',
-        'ZODB3',
-        'Zope2',
-    ],
-    extras_require={
-        'test': [
-            'plone.app.testing',
-            'plone.app.contenttypes'
-        ]
-    },
-    entry_points="""
-    [z3c.autoinclude.plugin]
-    target = plone
-    """,
-)
+setup(name='plone.app.iterate',
+      version=version,
+      description="check-out/check-in staging for Plone",
+      long_description=open("README.rst").read() + "\n" + open("CHANGES.rst").read(),
+      classifiers=[
+          "Environment :: Web Environment",
+          "Framework :: Plone",
+          "Framework :: Plone :: 5.0",
+          "Framework :: Zope2",
+          "License :: OSI Approved :: GNU General Public License (GPL)",
+          "Operating System :: OS Independent",
+          "Programming Language :: Python",
+          "Programming Language :: Python :: 2.7",
+      ],
+      keywords='check-out check-in staging',
+      author='Plone Foundation',
+      author_email='plone-developers@lists.sourceforge.net',
+      url='https://pypi.python.org/pypi/plone.app.iterate',
+      license='GPL version 2',
+      packages=find_packages(exclude=['ez_setup']),
+      namespace_packages=['plone', 'plone.app'],
+      include_package_data=True,
+      zip_safe=False,
+      extras_require=dict(
+          test=[
+              'plone.app.testing',
+              'plone.app.contenttypes'
+          ]
+      ),
+      install_requires=[
+          'setuptools',
+          'plone.locking',
+          'plone.memoize',
+          'zope.annotation',
+          'zope.component',
+          'zope.event',
+          'zope.i18nmessageid',
+          'zope.interface',
+          'zope.lifecycleevent',
+          'zope.schema',
+          'zope.viewlet',
+          'Acquisition',
+          'DateTime',
+          'Products.Archetypes',
+          'Products.CMFCore',
+          'Products.CMFEditions',
+          'Products.CMFPlacefulWorkflow',
+          'Products.DCWorkflow',
+          'Products.statusmessages',
+          'ZODB3',
+          'Zope2',
+      ],
+      entry_points='''
+          [z3c.autoinclude.plugin]
+          target = plone
+      ''',
+      )


Repository: plone.app.iterate


Branch: refs/heads/master
Date: 2016-02-26T18:16:29+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.iterate/commit/0a8950a7141b56ec95a071bc872fadd8ab48ebe4

Merge pull request #21 from plone/revert-20-master

Revert "Cleanup + Added profile id "default" and deprecated id "plone.app.iterate"."

Files changed:
M CHANGES.rst
M plone/app/iterate/configure.zcml
M plone/app/iterate/testing.py
M setup.py
D plone/app/iterate/setuphandlers.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 5ec2bbc..c2b6c42 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,26 +8,10 @@ New:
 
 - *add item here*
 
-- plone.app.iterate depends on GenericSetup >= 1.8.2
-  for using a post_handler on registerProfile
-  [iham]
-
-- Added naming of default GenericSetup profile as "default".
-  "plone.app.iterate" also exists to keep compatibility.
-  [iham]
-
-- Added deprecation warning to GS profile "plone.app.iterate"
-  [iham]
-
 Fixes:
 
 - *add item here*
 
-- No need to register as Zope2 Product anymore.
-  [iham]
-
-- Some minor pep8 cleanup.
-  [iham]
 
 3.1.4 (2015-11-16)
 ------------------
diff --git a/plone/app/iterate/configure.zcml b/plone/app/iterate/configure.zcml
index 282a5e2..f4b5074 100644
--- a/plone/app/iterate/configure.zcml
+++ b/plone/app/iterate/configure.zcml
@@ -5,92 +5,79 @@
     xmlns:zcml="http://namespaces.zope.org/zcml"
     i18n_domain="plone">
 
-  <include package="zope.annotation" />
-  <include package="Products.CMFCore" file="permissions.zcml" />
+    <include package="zope.annotation" />
+    <include package="Products.CMFCore" file="permissions.zcml" />
 
-  <include package=".subscribers"/>
-  <include package=".browser"/>
+    <include package=".subscribers"/>
+    <include package=".browser"/>
 
-  <includeDependencies package="." />
+    <!-- Set up as a Zope product and register an extension profile -->
+    <five:registerPackage package="." />
 
-  <genericsetup:registerProfile
-    name="default"
-    title="Working Copy Support (Iterate)"
-    directory="profiles/default"
-    description="Adds working copy support (aka. in-place staging) to Plone."
-    provides="Products.GenericSetup.interfaces.EXTENSION"
-    />
-
-  <!--
-    Remove, when CMFPlone no more depends on this profile.
-    Products.CMFPlone/Products/CMFPlone/MigrationTool.py:99:
-    Addon(profile_id=u'plone.app.iterate:plone.app.iterate')
-  -->
-  <genericsetup:registerProfile
-    name="plone.app.iterate"
-    title="Working Copy Support (Iterate)"
-    directory="profiles/default"
-    description="Adds working copy support (aka. in-place staging) to Plone."
-    provides="Products.GenericSetup.interfaces.EXTENSION"
-    post_handler=".setuphandlers.deprecate_profile"
-    />
-
-  <genericsetup:registerProfile
-      name="test"
-      title="plone.app.iterate: Test fixture"
-      directory="profiles/test"
-      description="Extension profile to configure a test fixture"
-      for="Products.CMFPlone.interfaces.ITestCasePloneSiteRoot"
+    <genericsetup:registerProfile
+      name="plone.app.iterate"
+      title="Working Copy Support (Iterate)"
+      directory="profiles/default"
+      description="Adds working copy support (aka. in-place staging) to Plone."
       provides="Products.GenericSetup.interfaces.EXTENSION"
       />
 
-  <genericsetup:upgradeStep
-      source="*"
-      destination="121"
-      title="Reinstall plone.app.iterate"
-      description=""
-      profile="plone.app.iterate:plone.app.iterate"
-      handler="plone.app.iterate.util.upgrade_by_reinstall"
+    <genericsetup:registerProfile
+        name="test"
+        title="plone.app.iterate: Test fixture"
+        directory="profiles/test"
+        description="Extension profile to configure a test fixture"
+        for="Products.CMFPlone.interfaces.ITestCasePloneSiteRoot"
+        provides="Products.GenericSetup.interfaces.EXTENSION"
+        />
+
+    <genericsetup:upgradeStep
+        source="*"
+        destination="121"
+        title="Reinstall plone.app.iterate"
+        description=""
+        profile="plone.app.iterate:plone.app.iterate"
+        handler="plone.app.iterate.util.upgrade_by_reinstall"
+        />
+
+    <!-- Policy and behaviour for basic objects -->
+    <class class="Products.Archetypes.BaseObject.BaseObject">
+        <implements interface=".interfaces.IIterateAware" />
+    </class>
+
+    <adapter factory=".policy.CheckinCheckoutPolicyAdapter" />
+    <adapter factory=".relation.CheckinCheckoutReferenceAdapter"/>
+    <adapter factory=".archiver.ContentArchiver" />
+    <adapter factory=".copier.ContentCopier" />
+
+    <!-- Checkout folder locators -->
+    <adapter
+        factory=".containers.HomeFolderLocator"
+        name="plone.app.iterate.home"
+        />
+
+    <adapter
+        factory=".containers.ParentFolderLocator"
+        name="plone.app.iterate.parent"
+        />
+
+    <!-- Handle deletions of working copies -->
+    <subscriber
+       for=".interfaces.IWorkingCopyRelation
+            zope.lifecycleevent.interfaces.IObjectRemovedEvent"
+       handler=".event.handleDeletion"
+       />
+
+    <permission
+      id="plone.app.iterate.CheckInContent"
+      title="iterate : Check in content"
       />
 
-  <!-- Policy and behavior for basic objects -->
-  <class class="Products.Archetypes.BaseObject.BaseObject">
-      <implements interface=".interfaces.IIterateAware" />
-  </class>
-
-  <adapter factory=".policy.CheckinCheckoutPolicyAdapter" />
-  <adapter factory=".relation.CheckinCheckoutReferenceAdapter"/>
-  <adapter factory=".archiver.ContentArchiver" />
-  <adapter factory=".copier.ContentCopier" />
-
-  <!-- Checkout folder locators -->
-  <adapter
-      factory=".containers.HomeFolderLocator"
-      name="plone.app.iterate.home"
+    <permission
+      id="plone.app.iterate.CheckOutContent"
+      title="iterate : Check out content"
       />
 
-  <adapter
-      factory=".containers.ParentFolderLocator"
-      name="plone.app.iterate.parent"
-      />
-
-  <!-- Handle deletions of working copies -->
-  <subscriber
-     for=".interfaces.IWorkingCopyRelation
-          zope.lifecycleevent.interfaces.IObjectRemovedEvent"
-     handler=".event.handleDeletion"
-     />
-
-  <permission
-    id="plone.app.iterate.CheckInContent"
-    title="iterate : Check in content"
-    />
-
-  <permission
-    id="plone.app.iterate.CheckOutContent"
-    title="iterate : Check out content"
-    />
-
-  <include package=".dexterity" zcml:condition="installed plone.app.relationfield" />
+      <include package=".dexterity" zcml:condition="installed plone.app.relationfield" />
 
 </configure>
diff --git a/plone/app/iterate/setuphandlers.py b/plone/app/iterate/setuphandlers.py
deleted file mode 100644
index 595e04f..0000000
--- a/plone/app/iterate/setuphandlers.py
+++ /dev/null
@@ -1,12 +0,0 @@
-# -*- coding: utf-8 -*-
-"""Deprecation warning for plone.app.iterate:plone.app.iterate profile."""
-
-import warnings
-
-
-def deprecate_profile(tool):
-    """Deprecation profile plone.app.iterate."""
-    warnings.warn(
-        'The profile with id "plone.app.iterate" was renamed to "default".',
-        DeprecationWarning
-        )
diff --git a/plone/app/iterate/testing.py b/plone/app/iterate/testing.py
index 5d6676b..7668d38 100644
--- a/plone/app/iterate/testing.py
+++ b/plone/app/iterate/testing.py
@@ -1,4 +1,3 @@
-"""Testing setup for integration and functional tests."""
 # -*- coding: utf-8 -*-
 from plone.app.contenttypes.testing import PloneAppContenttypes
 from plone.app.testing import PLONE_FIXTURE
@@ -9,39 +8,37 @@
 from plone.testing import z2
 
 
-ADMIN = {
+admin = {
     'id': 'admin',
     'password': 'secret',
     'roles': ['Manager'],
 }
-EDITOR = {
+editor = {
     'id': 'editor',
     'password': 'secret',
     'roles': ['Editor'],
 }
-CONTRIBUTOR = {
+contributor = {
     'id': 'contributor',
     'password': 'secret',
     'roles': ['Contributor'],
 }
-USERS_TO_BE_ADDED = (
-    ADMIN,
-    EDITOR,
-    CONTRIBUTOR,
+users_to_be_added = (
+    admin,
+    editor,
+    contributor,
 )
-USERS_WITH_MEMBER_FOLDER = (
-    EDITOR,
-    CONTRIBUTOR,
+users_with_member_folder = (
+    editor,
+    contributor,
 )
 
 
 class PloneAppIterateLayer(PloneSandboxLayer):
-    """Plone Sandbox Layer for plone.app.iterate."""
 
     defaultBases = (PLONE_FIXTURE,)
 
     def setUpZope(self, app, configurationContext):
-        """Setup Zope with Addons."""
         import Products.ATContentTypes
         self.loadZCML(package=Products.ATContentTypes)
         z2.installProduct(app, 'Products.ATContentTypes')
@@ -53,19 +50,19 @@ def setUpZope(self, app, configurationContext):
 
         import plone.app.iterate
         self.loadZCML(package=plone.app.iterate)
+        z2.installProduct(app, 'plone.app.iterate')
 
     def setUpPloneSite(self, portal):
-        """Setup Plone Site with Addons."""
         # restore default workflow
         applyProfile(portal, 'Products.CMFPlone:testfixture')
 
         # add default content
         applyProfile(portal, 'Products.ATContentTypes:content')
 
-        applyProfile(portal, 'plone.app.iterate:default')
+        applyProfile(portal, 'plone.app.iterate:plone.app.iterate')
         applyProfile(portal, 'plone.app.iterate:test')
 
-        for user in USERS_TO_BE_ADDED:
+        for user in users_to_be_added:
             portal.portal_membership.addMember(
                 user['id'],
                 user['password'],
@@ -73,7 +70,7 @@ def setUpPloneSite(self, portal):
                 [],
             )
 
-        for user in USERS_WITH_MEMBER_FOLDER:
+        for user in users_with_member_folder:
             mtool = portal.portal_membership
             if not mtool.getMemberareaCreationFlag():
                 mtool.setMemberareaCreationFlag()
@@ -114,20 +111,15 @@ def setUpPloneSite(self, portal):
 
 
 class DexPloneAppIterateLayer(PloneAppContenttypes):
-    """Dexterity based Plone Sandbox Layer for plone.app.iterate."""
-
     def setUpZope(self, app, configurationContext):
-        """Setup Zope with Addons."""
-        super(DexPloneAppIterateLayer,
-              self).setUpZope(app, configurationContext)
-
+        super(DexPloneAppIterateLayer, self).setUpZope(app, configurationContext)
         import plone.app.iterate
         self.loadZCML(package=plone.app.iterate)
+        z2.installProduct(app, 'plone.app.iterate')
 
     def setUpPloneSite(self, portal):
-        """Setup Plone Site with Addons."""
         super(DexPloneAppIterateLayer, self).setUpPloneSite(portal)
-        applyProfile(portal, 'plone.app.iterate:default')
+        applyProfile(portal, 'plone.app.iterate:plone.app.iterate')
 
 
 PLONEAPPITERATEDEX_FIXTURE = DexPloneAppIterateLayer()
diff --git a/setup.py b/setup.py
index 8b54414..99db45c 100644
--- a/setup.py
+++ b/setup.py
@@ -1,70 +1,61 @@
-"""Setup plone.app.iterate."""
 from setuptools import setup, find_packages
 
-VERSION = '3.1.5.dev0'
+version = '3.1.5.dev0'
 
-LONG_DESCRIPTION = (
-    open('README.rst').read() +
-    '\n' +
-    open('CHANGES.rst').read() +
-    '\n')
-
-setup(
-    name='plone.app.iterate',
-    version=VERSION,
-    description="check-out/check-in staging for Plone",
-    long_description=LONG_DESCRIPTION,
-    classifiers=[
-        "Environment :: Web Environment",
-        "Framework :: Plone",
-        "Framework :: Plone :: 5.0",
-        "Framework :: Zope2",
-        "License :: OSI Approved :: GNU General Public License (GPL)",
-        "Operating System :: OS Independent",
-        "Programming Language :: Python",
-        "Programming Language :: Python :: 2.7",
-    ],
-    keywords='check-out check-in staging',
-    author='Plone Foundation',
-    author_email='plone-developers@lists.sourceforge.net',
-    url='https://pypi.python.org/pypi/plone.app.iterate',
-    license='GPL version 2',
-    packages=find_packages(exclude=['ez_setup']),
-    namespace_packages=['plone', 'plone.app'],
-    include_package_data=True,
-    zip_safe=False,
-    install_requires=[
-        'setuptools',
-        'Products.GenericSetup>=1.8.2',
-        'plone.locking',
-        'plone.memoize',
-        'zope.annotation',
-        'zope.component',
-        'zope.event',
-        'zope.i18nmessageid',
-        'zope.interface',
-        'zope.lifecycleevent',
-        'zope.schema',
-        'zope.viewlet',
-        'Acquisition',
-        'DateTime',
-        'Products.Archetypes',
-        'Products.CMFCore',
-        'Products.CMFEditions',
-        'Products.CMFPlacefulWorkflow',
-        'Products.DCWorkflow',
-        'Products.statusmessages',
-        'ZODB3',
-        'Zope2',
-    ],
-    extras_require={
-        'test': [
-            'plone.app.testing',
-            'plone.app.contenttypes'
-        ]
-    },
-    entry_points="""
-    [z3c.autoinclude.plugin]
-    target = plone
-    """,
-)
+setup(name='plone.app.iterate',
+      version=version,
+      description="check-out/check-in staging for Plone",
+      long_description=open("README.rst").read() + "\n" + open("CHANGES.rst").read(),
+      classifiers=[
+          "Environment :: Web Environment",
+          "Framework :: Plone",
+          "Framework :: Plone :: 5.0",
+          "Framework :: Zope2",
+          "License :: OSI Approved :: GNU General Public License (GPL)",
+          "Operating System :: OS Independent",
+          "Programming Language :: Python",
+          "Programming Language :: Python :: 2.7",
+      ],
+      keywords='check-out check-in staging',
+      author='Plone Foundation',
+      author_email='plone-developers@lists.sourceforge.net',
+      url='https://pypi.python.org/pypi/plone.app.iterate',
+      license='GPL version 2',
+      packages=find_packages(exclude=['ez_setup']),
+      namespace_packages=['plone', 'plone.app'],
+      include_package_data=True,
+      zip_safe=False,
+      extras_require=dict(
+          test=[
+              'plone.app.testing',
+              'plone.app.contenttypes'
+          ]
+      ),
+      install_requires=[
+          'setuptools',
+          'plone.locking',
+          'plone.memoize',
+          'zope.annotation',
+          'zope.component',
+          'zope.event',
+          'zope.i18nmessageid',
+          'zope.interface',
+          'zope.lifecycleevent',
+          'zope.schema',
+          'zope.viewlet',
+          'Acquisition',
+          'DateTime',
+          'Products.Archetypes',
+          'Products.CMFCore',
+          'Products.CMFEditions',
+          'Products.CMFPlacefulWorkflow',
+          'Products.DCWorkflow',
+          'Products.statusmessages',
+          'ZODB3',
+          'Zope2',
+      ],
+      entry_points='''
+          [z3c.autoinclude.plugin]
+          target = plone
+      ''',
+      )


