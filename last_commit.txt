Repository: plone.app.content


Branch: refs/heads/master
Date: 2021-08-11T17:20:56+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.content/commit/a4a7b277bd9b50b9755b23ea72d973a657e9b3f2

Black, Isort, pyupgrade

Files changed:
A news/231.bugfix
M plone/__init__.py
M plone/app/__init__.py
M plone/app/content/browser/actions.py
M plone/app/content/browser/adding.py
M plone/app/content/browser/constraintypes.py
M plone/app/content/browser/content_status_history.py
M plone/app/content/browser/content_status_modify.py
M plone/app/content/browser/contents/__init__.py
M plone/app/content/browser/contents/copy.py
M plone/app/content/browser/contents/cut.py
M plone/app/content/browser/contents/defaultpage.py
M plone/app/content/browser/contents/delete.py
M plone/app/content/browser/contents/paste.py
M plone/app/content/browser/contents/properties.py
M plone/app/content/browser/contents/rearrange.py
M plone/app/content/browser/contents/rename.py
M plone/app/content/browser/contents/tags.py
M plone/app/content/browser/contents/workflow.py
M plone/app/content/browser/file.py
M plone/app/content/browser/folder_publish.py
M plone/app/content/browser/folderfactories.py
M plone/app/content/browser/i18n.py
M plone/app/content/browser/interfaces.py
M plone/app/content/browser/query.py
M plone/app/content/browser/reviewlist.py
M plone/app/content/browser/selection.py
M plone/app/content/browser/tableview.py
M plone/app/content/browser/vocabulary.py
M plone/app/content/catalog.py
M plone/app/content/container.py
M plone/app/content/interfaces.py
M plone/app/content/item.py
M plone/app/content/namechooser.py
M plone/app/content/testing.py
M plone/app/content/tests/test_actions.py
M plone/app/content/tests/test_adding.py
M plone/app/content/tests/test_basecontent.py
M plone/app/content/tests/test_content_status_modify.py
M plone/app/content/tests/test_contents.py
M plone/app/content/tests/test_folder.py
M plone/app/content/tests/test_folder_publish.py
M plone/app/content/tests/test_namechooser.py
M plone/app/content/tests/test_namechooser_unit.py
M plone/app/content/tests/test_non_ascii_characters_in_workflow_state.py
M plone/app/content/tests/test_reviewlist.py
M plone/app/content/tests/test_selectdefaultpage.py
M plone/app/content/tests/test_table.py
M plone/app/content/tests/test_widgets.py
M plone/app/content/utils.py
M setup.py

b'diff --git a/news/231.bugfix b/news/231.bugfix\nnew file mode 100644\nindex 0000000..71d5207\n--- /dev/null\n+++ b/news/231.bugfix\n@@ -0,0 +1 @@\n+isort, black bode style and pyupgrade [jensens]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/content/browser/actions.py b/plone/app/content/browser/actions.py\nindex 77d1ebe..a98edb5 100644\n--- a/plone/app/content/browser/actions.py\n+++ b/plone/app/content/browser/actions.py\n@@ -1,6 +1,6 @@\n+import transaction\n from AccessControl import getSecurityManager\n-from Acquisition import aq_inner\n-from Acquisition import aq_parent\n+from Acquisition import aq_inner, aq_parent\n from OFS.CopySupport import CopyError\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n@@ -8,29 +8,24 @@\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n-from ZODB.POSException import ConflictError\n-from z3c.form import button\n-from z3c.form import field\n-from z3c.form import form\n+from z3c.form import button, field, form\n from z3c.form.widget import ComputedWidgetAttribute\n from zExceptions import Unauthorized\n+from ZODB.POSException import ConflictError\n from zope import schema\n-from zope.component import getMultiAdapter\n-from zope.component import queryMultiAdapter\n+from zope.component import getMultiAdapter, queryMultiAdapter\n from zope.container.interfaces import INameChooser\n from zope.event import notify\n from zope.interface import Interface\n from zope.lifecycleevent import ObjectModifiedEvent\n \n-import transaction\n-\n \n class LockingBase(BrowserView):\n-\n     @property\n     def is_locked(self):\n         locking_view = queryMultiAdapter(\n-            (self.context, self.request), name=\'plone_lock_info\')\n+            (self.context, self.request), name="plone_lock_info"\n+        )\n \n         return locking_view and locking_view.is_locked_for_current_user()\n \n@@ -38,36 +33,37 @@ def is_locked(self):\n class DeleteConfirmationForm(form.Form, LockingBase):\n \n     fields = field.Fields()\n-    template = ViewPageTemplateFile(\'templates/delete_confirmation.pt\')\n+    template = ViewPageTemplateFile("templates/delete_confirmation.pt")\n     enableCSRFProtection = True\n \n     def view_url(self):\n-        \'\'\' Facade to the homonymous plone_context_state method\n-        \'\'\'\n+        """Facade to the homonymous plone_context_state method"""\n         context_state = getMultiAdapter(\n-            (self.context, self.request),\n-            name=\'plone_context_state\'\n+            (self.context, self.request), name="plone_context_state"\n         )\n         return context_state.view_url()\n \n     def more_info(self):\n         adapter = queryMultiAdapter(\n-            (self.context, self.request), name=\'delete_confirmation_info\')\n+            (self.context, self.request), name="delete_confirmation_info"\n+        )\n         if adapter:\n             return adapter()\n         return ""\n \n     @property\n     def items_to_delete(self):\n-        catalog = getToolByName(self.context, \'portal_catalog\')\n-        putils = getToolByName(self.context, \'plone_utils\')\n-        results = catalog({\n-            \'path\': \'/\'.join(self.context.getPhysicalPath()),\n-            \'portal_type\': putils.getUserFriendlyTypes(),\n-        })\n+        catalog = getToolByName(self.context, "portal_catalog")\n+        putils = getToolByName(self.context, "plone_utils")\n+        results = catalog(\n+            {\n+                "path": "/".join(self.context.getPhysicalPath()),\n+                "portal_type": putils.getUserFriendlyTypes(),\n+            }\n+        )\n         return len(results)\n \n-    @button.buttonAndHandler(_(\'Delete\'), name=\'Delete\')\n+    @button.buttonAndHandler(_("Delete"), name="Delete")\n     def handle_delete(self, action):\n         title = safe_unicode(self.context.Title())\n         parent = aq_parent(aq_inner(self.context))\n@@ -77,27 +73,26 @@ def handle_delete(self, action):\n         if self.context.aq_chain == self.context.aq_inner.aq_chain:\n             parent.manage_delObjects(self.context.getId())\n             IStatusMessage(self.request).add(\n-                _(\'${title} has been deleted.\', mapping={\'title\': title}))\n+                _("${title} has been deleted.", mapping={"title": title})\n+            )\n         else:\n             IStatusMessage(self.request).add(\n-                _(\'"${title}" has already been deleted\',\n-                  mapping={\'title\': title})\n+                _(\'"${title}" has already been deleted\', mapping={"title": title})\n             )\n \n         self.request.response.redirect(parent.absolute_url())\n \n-    @button.buttonAndHandler(\n-        _(\'label_cancel\', default=\'Cancel\'), name=\'Cancel\')\n+    @button.buttonAndHandler(_("label_cancel", default="Cancel"), name="Cancel")\n     def handle_cancel(self, action):\n         target = self.view_url()\n         return self.request.response.redirect(target)\n \n     def updateActions(self):\n         super().updateActions()\n-        if self.actions and \'Delete\' in self.actions:\n-            self.actions[\'Delete\'].addClass(\'btn-danger\')\n-        if self.actions and \'Cancel\' in self.actions:\n-            self.actions[\'Cancel\'].addClass(\'btn-secondary\')\n+        if self.actions and "Delete" in self.actions:\n+            self.actions["Delete"].addClass("btn-danger")\n+        if self.actions and "Cancel" in self.actions:\n+            self.actions["Cancel"].addClass("btn-secondary")\n \n \n def valid_id(self):\n@@ -108,42 +103,49 @@ def valid_id(self):\n \n class IRenameForm(Interface):\n     new_id = schema.ASCIILine(\n-        title=_(\'label_new_short_name\', default=\'New Short Name\'),\n-        description=_(\'help_short_name_url\', default=\n-                      \'Short name is the part that shows up in the URL \' +\n-                      \'of the item.\'),\n+        title=_("label_new_short_name", default="New Short Name"),\n+        description=_(\n+            "help_short_name_url",\n+            default="Short name is the part that shows up in the URL " + "of the item.",\n+        ),\n         constraint=valid_id,\n     )\n \n     new_title = schema.TextLine(\n-        title=_(\'label_new_title\', default=\'New Title\'),\n+        title=_("label_new_title", default="New Title"),\n     )\n \n+\n default_new_id = ComputedWidgetAttribute(\n-    lambda form: form.context.getId(), field=IRenameForm[\'new_id\'])\n+    lambda form: form.context.getId(), field=IRenameForm["new_id"]\n+)\n \n default_new_title = ComputedWidgetAttribute(\n-    lambda form: form.context.Title(), field=IRenameForm[\'new_title\'])\n+    lambda form: form.context.Title(), field=IRenameForm["new_title"]\n+)\n \n \n class RenameForm(form.Form):\n \n     fields = field.Fields(IRenameForm)\n-    template = ViewPageTemplateFile(\'templates/object_rename.pt\')\n+    template = ViewPageTemplateFile("templates/object_rename.pt")\n     enableCSRFProtection = True\n     ignoreContext = True\n \n-    label = _(\'heading_rename_item\', default=\'Rename item\')\n-    description = _(\'description_rename_item\', default=\n-                    \'Each item has a Short Name and a Title, which you can \' +\n-                    \'change by entering the new details below.\')\n+    label = _("heading_rename_item", default="Rename item")\n+    description = _(\n+        "description_rename_item",\n+        default="Each item has a Short Name and a Title, which you can "\n+        + "change by entering the new details below.",\n+    )\n \n     def view_url(self):\n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=\'plone_context_state\')\n+            (self.context, self.request), name="plone_context_state"\n+        )\n         return context_state.view_url()\n \n-    @button.buttonAndHandler(_(\'Rename\'), name=\'Rename\')\n+    @button.buttonAndHandler(_("Rename"), name="Rename")\n     def handle_rename(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -151,15 +153,19 @@ def handle_rename(self, action):\n \n         parent = aq_parent(aq_inner(self.context))\n         sm = getSecurityManager()\n-        if not sm.checkPermission(\'Copy or Move\', parent):\n-            raise Unauthorized(_(\'Permission denied to rename ${title}.\',\n-                                 mapping={\'title\': self.context.title}))\n+        if not sm.checkPermission("Copy or Move", parent):\n+            raise Unauthorized(\n+                _(\n+                    "Permission denied to rename ${title}.",\n+                    mapping={"title": self.context.title},\n+                )\n+            )\n \n         # Requires cmf.ModifyPortalContent permission\n-        self.context.title = data[\'new_title\']\n+        self.context.title = data["new_title"]\n \n         oldid = self.context.getId()\n-        newid = data[\'new_id\']\n+        newid = data["new_id"]\n         if oldid != newid:\n             newid = INameChooser(parent).chooseName(newid, self.context)\n \n@@ -172,7 +178,14 @@ def handle_rename(self, action):\n             # for 2+3 there are subscribers in Products.CMFDynamicViewFTI\n             # responsible to change (2) or unset (3) the default_page.\n \n-            parent.manage_renameObjects([oldid, ], [str(newid), ])\n+            parent.manage_renameObjects(\n+                [\n+                    oldid,\n+                ],\n+                [\n+                    str(newid),\n+                ],\n+            )\n         else:\n             # Object is not reindex if manage_renameObjects is not called\n             self.context.reindexObject()\n@@ -181,26 +194,27 @@ def handle_rename(self, action):\n         notify(ObjectModifiedEvent(self.context))\n \n         IStatusMessage(self.request).add(\n-            _("Renamed \'${oldid}\' to \'${newid}\'.", mapping={\n-                \'oldid\': oldid, \'newid\': newid}))\n+            _(\n+                "Renamed \'${oldid}\' to \'${newid}\'.",\n+                mapping={"oldid": oldid, "newid": newid},\n+            )\n+        )\n \n         self.request.response.redirect(self.view_url())\n \n-    @button.buttonAndHandler(_(\'label_cancel\', default=\'Cancel\'),\n-                             name=\'Cancel\')\n+    @button.buttonAndHandler(_("label_cancel", default="Cancel"), name="Cancel")\n     def handle_cancel(self, action):\n         self.request.response.redirect(self.view_url())\n \n     def updateActions(self):\n         super().updateActions()\n-        if self.actions and \'Rename\' in self.actions:\n-            self.actions[\'Rename\'].addClass(\'btn-primary\')\n-        if self.actions and \'Cancel\' in self.actions:\n-            self.actions[\'Cancel\'].addClass(\'btn-secondary\')\n+        if self.actions and "Rename" in self.actions:\n+            self.actions["Rename"].addClass("btn-primary")\n+        if self.actions and "Cancel" in self.actions:\n+            self.actions["Cancel"].addClass("btn-secondary")\n \n \n class ObjectCutView(LockingBase):\n-\n     @property\n     def title(self):\n         return self.context.Title()\n@@ -212,17 +226,18 @@ def parent(self):\n     @property\n     def canonical_object_url(self):\n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=\'plone_context_state\')\n+            (self.context, self.request), name="plone_context_state"\n+        )\n         return context_state.canonical_object_url()\n \n     @property\n     def view_url(self):\n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=\'plone_context_state\')\n+            (self.context, self.request), name="plone_context_state"\n+        )\n         return context_state.view_url()\n \n-    def do_redirect(self, url, message=None, message_type=\'info\',\n-                    raise_exception=None):\n+    def do_redirect(self, url, message=None, message_type="info", raise_exception=None):\n         if message is not None:\n             IStatusMessage(self.request).add(message, type=message_type)\n \n@@ -232,29 +247,36 @@ def do_redirect(self, url, message=None, message_type=\'info\',\n \n     def do_action(self):\n         if self.is_locked:\n-            return self.do_redirect(self.view_url,\n-                                    _(\'${title} is locked and cannot be cut.\',\n-                                        mapping={\'title\': self.title, }))\n+            return self.do_redirect(\n+                self.view_url,\n+                _(\n+                    "${title} is locked and cannot be cut.",\n+                    mapping={\n+                        "title": self.title,\n+                    },\n+                ),\n+            )\n \n         try:\n             cp = self.parent.manage_cutObjects(self.context.getId())\n         except CopyError:\n-            return self.do_redirect(self.view_url,\n-                                    _(\'${title} is not moveable.\',\n-                                        mapping={\'title\': self.title}))\n+            return self.do_redirect(\n+                self.view_url,\n+                _("${title} is not moveable.", mapping={"title": self.title}),\n+            )\n         self.request.response.setCookie(\n-            \'__cp\', cp, path=self.request[\'BASEPATH1\'] or \'/\')\n-        self.request[\'__cp\'] = cp\n+            "__cp", cp, path=self.request["BASEPATH1"] or "/"\n+        )\n+        self.request["__cp"] = cp\n \n         return self.do_redirect(\n-            self.view_url,\n-            _(\'${title} cut.\', mapping={\'title\': self.title}),\n-            \'info\'\n+            self.view_url, _("${title} cut.", mapping={"title": self.title}), "info"\n         )\n \n     def __call__(self):\n         authenticator = getMultiAdapter(\n-            (self.context, self.request), name=\'authenticator\')\n+            (self.context, self.request), name="authenticator"\n+        )\n \n         if not authenticator.verify():\n             raise Unauthorized\n@@ -263,66 +285,64 @@ def __call__(self):\n \n \n class ObjectCopyView(ObjectCutView):\n-\n     def do_action(self):\n         try:\n             cp = self.parent.manage_copyObjects(self.context.getId())\n         except CopyError:\n-            return self.do_redirect(self.view_url,\n-                                    _(\'${title} is not copyable.\',\n-                                        mapping={\'title\': self.title}))\n+            return self.do_redirect(\n+                self.view_url,\n+                _("${title} is not copyable.", mapping={"title": self.title}),\n+            )\n         self.request.response.setCookie(\n-            \'__cp\', cp, path=self.request[\'BASEPATH1\'] or \'/\')\n-        self.request[\'__cp\'] = cp\n+            "__cp", cp, path=self.request["BASEPATH1"] or "/"\n+        )\n+        self.request["__cp"] = cp\n \n-        return self.do_redirect(self.view_url,\n-                                _(\'${title} copied.\',\n-                                    mapping={\'title\': self.title}))\n+        return self.do_redirect(\n+            self.view_url, _("${title} copied.", mapping={"title": self.title})\n+        )\n \n \n class ObjectDeleteView(ObjectCutView):\n-\n     def do_action(self):\n         form = DeleteConfirmationForm(self.context, self.request)\n         form.update()\n \n-        button = form.buttons[\'Delete\']\n+        button = form.buttons["Delete"]\n         # delete by clicking the form button in delete_confirmation\n         form.handlers.getHandler(button)(form, button)\n \n \n class ObjectPasteView(ObjectCutView):\n-\n     def do_action(self):\n         if not self.context.cb_dataValid():\n             return self.do_redirect(\n                 self.canonical_object_url,\n-                _(\'Copy or cut one or more items to paste.\'),\n-                \'error\'\n+                _("Copy or cut one or more items to paste."),\n+                "error",\n             )\n         try:\n-            self.context.manage_pasteObjects(self.request[\'__cp\'])\n+            self.context.manage_pasteObjects(self.request["__cp"])\n         except ConflictError:\n             raise\n         except Unauthorized as e:\n             self.do_redirect(\n-                self.canonical_object_url,\n-                _(\'You are not authorized to paste here.\'),\n-                e\n+                self.canonical_object_url, _("You are not authorized to paste here."), e\n             )\n         except CopyError as e:\n             error_string = str(e)\n-            if \'Item Not Found\' in error_string:\n+            if "Item Not Found" in error_string:\n                 return self.do_redirect(\n                     self.canonical_object_url,\n-                    _(\'The item you are trying to paste could not be found. \'\n-                      \'It may have been moved or deleted after you copied or \'\n-                      \'cut it.\'),\n-                    \'error\',\n+                    _(\n+                        "The item you are trying to paste could not be found. "\n+                        "It may have been moved or deleted after you copied or "\n+                        "cut it."\n+                    ),\n+                    "error",\n                 )\n         except Exception as e:\n-            if \'__cp\' in self.request:\n-                self.do_redirect(self.canonical_object_url, e, \'error\', e)\n+            if "__cp" in self.request:\n+                self.do_redirect(self.canonical_object_url, e, "error", e)\n \n-        return self.do_redirect(self.canonical_object_url,\n-                                _(\'Item(s) pasted.\'))\n+        return self.do_redirect(self.canonical_object_url, _("Item(s) pasted."))\ndiff --git a/plone/app/content/browser/adding.py b/plone/app/content/browser/adding.py\nindex 88ad32e..60f0698 100644\n--- a/plone/app/content/browser/adding.py\n+++ b/plone/app/content/browser/adding.py\n@@ -4,18 +4,17 @@\n \n \n class CMFAdding(Implicit, ContentAdding):\n-    """An adding view with a less silly next-url\n-    """\n+    """An adding view with a less silly next-url"""\n \n     # We need to do this to get proper traversal URLs - otherwise, the\n     # <base /> tag is messed up.\n-    id = \'+\'\n+    id = "+"\n \n     def add(self, content):\n         content = super().add(content)\n         # We need to ensure that we finish type construction, not at least\n         # to set the correct permissions based on the workflow\n-        getToolByName(content, \'portal_types\')\n+        getToolByName(content, "portal_types")\n \n         return content\n \ndiff --git a/plone/app/content/browser/constraintypes.py b/plone/app/content/browser/constraintypes.py\nindex 11c5881..319fbfd 100644\n--- a/plone/app/content/browser/constraintypes.py\n+++ b/plone/app/content/browser/constraintypes.py\n@@ -1,21 +1,15 @@\n from plone.autoform.form import AutoExtensibleForm\n-from Products.CMFPlone import PloneMessageFactory as  _\n+from Products.CMFPlone import PloneMessageFactory as _\n from Products.CMFPlone.interfaces import ISelectableConstrainTypes\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from z3c.form import button\n-from z3c.form import form\n+from z3c.form import button, form\n from z3c.form.browser.checkbox import CheckBoxFieldWidget\n from zope.i18nmessageid import MessageFactory\n-from zope.interface import implementer\n-from zope.interface import Interface\n-from zope.interface import invariant\n+from zope.interface import Interface, implementer, invariant\n from zope.interface.exceptions import Invalid\n-from zope.schema import Choice\n-from zope.schema import List\n+from zope.schema import Choice, List\n from zope.schema.interfaces import IVocabularyFactory\n-from zope.schema.vocabulary import SimpleTerm\n-from zope.schema.vocabulary import SimpleVocabulary\n-\n+from zope.schema.vocabulary import SimpleTerm, SimpleVocabulary\n \n # XXX\n # acquire locallyAllowedTypes from parent (default)\n@@ -33,24 +27,22 @@ def ST(key, title):\n \n \n # reuse the translations that we had in atcontenttypes\n-AMF = MessageFactory(\'atcontenttypes\')\n+AMF = MessageFactory("atcontenttypes")\n \n-possible_constrain_types = SimpleVocabulary([\n-    ST(ACQUIRE,\n-       AMF(\'constraintypes_acquire_label\',\n-         default=\'Use parent folder settings\')),\n-    ST(DISABLED,\n-       AMF(\'constraintypes_disable_label\',\n-         default=\'Use portal default\')),\n-    ST(ENABLED,\n-       AMF(\'constraintypes_enable_label\',\n-         default=\'Select manually\'))\n-])\n+possible_constrain_types = SimpleVocabulary(\n+    [\n+        ST(\n+            ACQUIRE,\n+            AMF("constraintypes_acquire_label", default="Use parent folder settings"),\n+        ),\n+        ST(DISABLED, AMF("constraintypes_disable_label", default="Use portal default")),\n+        ST(ENABLED, AMF("constraintypes_enable_label", default="Select manually")),\n+    ]\n+)\n \n \n @implementer(IVocabularyFactory)\n class ValidTypes:\n-\n     def __call__(self, context):\n         constrain_aspect = context.context\n         items = []\n@@ -58,6 +50,7 @@ def __call__(self, context):\n             items.append(SimpleTerm(value=type_.getId(), title=type_.Title()))\n         return SimpleVocabulary(items)\n \n+\n ValidTypesFactory = ValidTypes()\n \n \n@@ -65,36 +58,38 @@ class IConstrainForm(Interface):\n \n     constrain_types_mode = Choice(\n         title=_("label_type_restrictions", default="Type restrictions"),\n-        description=_("help_add_restriction_mode",\n-                        default="Select the restriction policy "\n-                        "in this location"),\n+        description=_(\n+            "help_add_restriction_mode",\n+            default="Select the restriction policy " "in this location",\n+        ),\n         vocabulary=possible_constrain_types,\n         required=False,\n     )\n \n     allowed_types = List(\n         title=_("label_immediately_addable_types", default="Allowed types"),\n-        description=_("help_immediately_addable_types",\n-                        default="Controls what types are addable "\n-                        "in this location"),\n-        value_type=Choice(\n-            source="plone.app.content.ValidAddableTypes"),\n+        description=_(\n+            "help_immediately_addable_types",\n+            default="Controls what types are addable " "in this location",\n+        ),\n+        value_type=Choice(source="plone.app.content.ValidAddableTypes"),\n         required=False,\n     )\n \n     secondary_types = List(\n         title=_("label_locally_allowed_types", default="Secondary types"),\n-        description=_("help_locally_allowed_types", default=""\n-                        "Select which types should be available in the "\n-                        "\'More&hellip;\' submenu <em>instead</em> of in the "\n-                        "main pulldown. "\n-                        "This is useful to indicate that these are not the "\n-                        "preferred types "\n-                        "in this location, but are allowed if you really "\n-                        "need them."\n-                        ),\n-        value_type=Choice(\n-            source="plone.app.content.ValidAddableTypes"),\n+        description=_(\n+            "help_locally_allowed_types",\n+            default=""\n+            "Select which types should be available in the "\n+            "\'More&hellip;\' submenu <em>instead</em> of in the "\n+            "main pulldown. "\n+            "This is useful to indicate that these are not the "\n+            "preferred types "\n+            "in this location, but are allowed if you really "\n+            "need them.",\n+        ),\n+        value_type=Choice(source="plone.app.content.ValidAddableTypes"),\n         required=False,\n     )\n \n@@ -106,15 +101,17 @@ def legal_not_immediately_addable(data):\n                 missing.append(one_allowed)\n         if missing:\n             raise Invalid(\n-                _("You cannot have a type as a secondary type without "\n+                _(\n+                    "You cannot have a type as a secondary type without "\n                     "having it allowed. You have selected ${types}.",\n-                    mapping=dict(types=", ".join(missing))))\n+                    mapping=dict(types=", ".join(missing)),\n+                )\n+            )\n         return True\n \n \n @implementer(IConstrainForm)\n class FormContentAdapter:\n-\n     def __init__(self, context):\n         self.context = ISelectableConstrainTypes(context)\n \n@@ -129,15 +126,20 @@ def allowed_types(self):\n     @property\n     def secondary_types(self):\n         immediately_addable = self.context.getImmediatelyAddableTypes()\n-        return [t for t in self.context.getLocallyAllowedTypes()\n-                if t not in immediately_addable]\n+        return [\n+            t\n+            for t in self.context.getLocallyAllowedTypes()\n+            if t not in immediately_addable\n+        ]\n \n \n class ConstrainsFormView(AutoExtensibleForm, form.EditForm):\n \n     schema = IConstrainForm\n-    label = _("heading_set_content_type_restrictions",\n-                default="Restrict what types of content can be added")\n+    label = _(\n+        "heading_set_content_type_restrictions",\n+        default="Restrict what types of content can be added",\n+    )\n     template = ViewPageTemplateFile("constraintypes.pt")\n \n     def getContent(self):\n@@ -145,40 +147,39 @@ def getContent(self):\n \n     def updateFields(self):\n         super().updateFields()\n-        self.fields[\'allowed_types\'].widgetFactory = CheckBoxFieldWidget\n-        self.fields[\'secondary_types\'].widgetFactory = CheckBoxFieldWidget\n+        self.fields["allowed_types"].widgetFactory = CheckBoxFieldWidget\n+        self.fields["secondary_types"].widgetFactory = CheckBoxFieldWidget\n \n     def updateWidgets(self):\n         super().updateWidgets()\n-        self.widgets[\'allowed_types\'].addClass(\'current_prefer_form\')\n-        self.widgets[\'secondary_types\'].addClass(\'current_allow_form\')\n-        self.widgets[\'constrain_types_mode\'].addClass(\n-            \'constrain_types_mode_form\')\n+        self.widgets["allowed_types"].addClass("current_prefer_form")\n+        self.widgets["secondary_types"].addClass("current_allow_form")\n+        self.widgets["constrain_types_mode"].addClass("constrain_types_mode_form")\n \n     def updateActions(self):\n         super().updateActions()\n-        self.actions[\'save\'].addClass(\'btn btn-primary\')\n+        self.actions["save"].addClass("btn btn-primary")\n \n-    @button.buttonAndHandler(_(\'label_save\', default="Save"), name=\'save\')\n+    @button.buttonAndHandler(_("label_save", default="Save"), name="save")\n     def handleSave(self, action):\n         data, errors = self.extractData()\n         if errors:\n             self.status = self.formErrorsMessage\n             return\n \n-        allowed_types = data[\'allowed_types\']\n+        allowed_types = data["allowed_types"]\n         immediately_addable = [\n-            t for t in allowed_types\n-            if t not in data[\'secondary_types\']]\n+            t for t in allowed_types if t not in data["secondary_types"]\n+        ]\n \n         aspect = ISelectableConstrainTypes(self.context)\n-        aspect.setConstrainTypesMode(data[\'constrain_types_mode\'])\n+        aspect.setConstrainTypesMode(data["constrain_types_mode"])\n         aspect.setLocallyAllowedTypes(allowed_types)\n         aspect.setImmediatelyAddableTypes(immediately_addable)\n         contextURL = self.context.absolute_url()\n         self.request.response.redirect(contextURL)\n \n-    @button.buttonAndHandler(_(\'label_cancel\', default="Cancel"), name=\'cancel\')\n+    @button.buttonAndHandler(_("label_cancel", default="Cancel"), name="cancel")\n     def handleCancel(self, action):\n         contextURL = self.context.absolute_url()\n         self.request.response.redirect(contextURL)\ndiff --git a/plone/app/content/browser/content_status_history.py b/plone/app/content/browser/content_status_history.py\nindex 6be7e6e..db32576 100644\n--- a/plone/app/content/browser/content_status_history.py\n+++ b/plone/app/content/browser/content_status_history.py\n@@ -1,10 +1,8 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.utils import isExpired\n-from Products.CMFPlone.utils import human_readable_size\n+from Products.CMFPlone.utils import human_readable_size, isExpired\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from z3c.form import field\n-from z3c.form import form\n+from z3c.form import field, form\n from zope.interface import Interface\n from zope.publisher.browser import BrowserView\n from zope.schema import Datetime\n@@ -12,8 +10,7 @@\n \n \n class IContentStatusHistoryDates(Interface):\n-    """ Interface for the two dates on content status history view\n-    """\n+    """Interface for the two dates on content status history view"""\n \n     effective_date = Datetime(\n         title=_("label_effective_date", default="Publishing Date"),\n@@ -42,24 +39,20 @@ class ContentStatusHistoryDatesForm(form.Form):\n     ignoreContext = True\n     label = "Content status history dates"\n \n-    effective_date = FieldProperty(\n-        IContentStatusHistoryDates[\'effective_date\']\n-    )\n-    expiration_date = FieldProperty(\n-        IContentStatusHistoryDates[\'expiration_date\']\n-    )\n+    effective_date = FieldProperty(IContentStatusHistoryDates["effective_date"])\n+    expiration_date = FieldProperty(IContentStatusHistoryDates["expiration_date"])\n \n \n class ContentStatusHistoryView(BrowserView):\n \n-    template = ViewPageTemplateFile(\'templates/content_status_history.pt\')\n+    template = ViewPageTemplateFile("templates/content_status_history.pt")\n \n     def __init__(self, context, request):\n         super().__init__(context, request)\n \n         self.dates_form = ContentStatusHistoryDatesForm(context, request)\n         self.dates_form.updateWidgets()\n-        self.plone_utils = getToolByName(context, \'plone_utils\')\n+        self.plone_utils = getToolByName(context, "plone_utils")\n         self.errors = {}\n \n     def __call__(\n@@ -74,45 +67,35 @@ def __call__(\n     ):\n \n         data = self.dates_form.extractData()\n-        if (\n-            self.request.get(\'form.widgets.effective_date-calendar\', None)\n-            and data\n-        ):\n-            effective_date = data[0][\'effective_date\'].strftime(\n-                "%Y-%m-%d %H:%M"\n-            )\n+        if self.request.get("form.widgets.effective_date-calendar", None) and data:\n+            effective_date = data[0]["effective_date"].strftime("%Y-%m-%d %H:%M")\n \n-        if (\n-            self.request.get(\'form.widgets.expiration_date-calendar\', None)\n-            and data\n-        ):\n-            expiration_date = data[0][\'expiration_date\'].strftime(\n-                "%Y-%m-%d %H:%M"\n-            )\n+        if self.request.get("form.widgets.expiration_date-calendar", None) and data:\n+            expiration_date = data[0]["expiration_date"].strftime("%Y-%m-%d %H:%M")\n \n-        if self.request.get(\'form.button.Cancel\', None):\n+        if self.request.get("form.button.Cancel", None):\n             return self.request.RESPONSE.redirect(\n                 "%s/view" % self.context.absolute_url()\n             )\n \n-        if self.request.get(\'form.submitted\', None):\n+        if self.request.get("form.submitted", None):\n             self.validate(workflow_action=workflow_action, paths=paths)\n             if self.errors:\n                 self.plone_utils.addPortalMessage(\n-                    _(\'Please correct the indicated errors.\'), \'error\'\n+                    _("Please correct the indicated errors."), "error"\n                 )\n                 return self.template()\n \n-        if self.request.get(\'form.button.Publish\', None):\n-            return self.context.restrictedTraverse(\'content_status_modify\')(\n+        if self.request.get("form.button.Publish", None):\n+            return self.context.restrictedTraverse("content_status_modify")(\n                 workflow_action=workflow_action,\n                 comment=comment,\n                 effective_date=effective_date,\n                 expiration_date=expiration_date,\n             )\n \n-        if self.request.get(\'form.button.FolderPublish\', None):\n-            self.context.restrictedTraverse(\'folder_publish\')(\n+        if self.request.get("form.button.FolderPublish", None):\n+            self.context.restrictedTraverse("folder_publish")(\n                 workflow_action=workflow_action,\n                 paths=paths,\n                 comment=comment,\n@@ -125,20 +108,18 @@ def __call__(\n \n     def validate(self, workflow_action=None, paths=[]):\n         if workflow_action is None:\n-            self.errors[\'workflow_action\'] = _(\n-                \'You must select a publishing action.\'\n-            )\n+            self.errors["workflow_action"] = _("You must select a publishing action.")\n \n         if not paths:\n-            self.errors[\'paths\'] = _(\'You must select content to change.\')\n+            self.errors["paths"] = _("You must select content to change.")\n             # If there are no paths, it\'s mostly a mistake\n             # Set paths using orgi_paths, otherwise users are getting confused\n-            orig_paths = self.request.get(\'orig_paths\')\n-            self.request.set(\'paths\', orig_paths)\n+            orig_paths = self.request.get("orig_paths")\n+            self.request.set("paths", orig_paths)\n \n     def get_objects_from_path_list(self, paths=[]):\n         contents = []\n-        portal = getToolByName(self.context, \'portal_url\').getPortalObject()\n+        portal = getToolByName(self.context, "portal_url").getPortalObject()\n         for path in paths:\n             obj = portal.restrictedTraverse(str(path), None)\n             if obj is not None:\n@@ -146,8 +127,8 @@ def get_objects_from_path_list(self, paths=[]):\n         return contents\n \n     def redirect_to_referrer(self):\n-        referer = self.request.get(\'HTTP_REFERER\', \'\')\n-        target_url = referer.split(\'?\', 1)[0]\n+        referer = self.request.get("HTTP_REFERER", "")\n+        target_url = referer.split("?", 1)[0]\n         return self.request.RESPONSE.redirect(target_url)\n \n     def isExpired(self, content):\ndiff --git a/plone/app/content/browser/content_status_modify.py b/plone/app/content/browser/content_status_modify.py\nindex cfccae9..80183d7 100644\n--- a/plone/app/content/browser/content_status_modify.py\n+++ b/plone/app/content/browser/content_status_modify.py\n@@ -1,6 +1,5 @@\n from AccessControl import Unauthorized\n-from Acquisition import aq_inner\n-from Acquisition import aq_parent\n+from Acquisition import aq_inner, aq_parent\n from DateTime import DateTime\n from plone.protect import CheckAuthenticator\n from Products.CMFCore.utils import getToolByName\n@@ -98,7 +97,7 @@ def __call__(\n             pass\n \n         # Create the note while we still have access to the original context\n-        note = "Changed status of %s at %s" % (\n+        note = "Changed status of {} at {}".format(\n             context.title_or_id(),\n             context.absolute_url(),\n         )\ndiff --git a/plone/app/content/browser/contents/__init__.py b/plone/app/content/browser/contents/__init__.py\nindex d926be8..596c96f 100644\n--- a/plone/app/content/browser/contents/__init__.py\n+++ b/plone/app/content/browser/contents/__init__.py\n@@ -1,10 +1,5 @@\n from AccessControl import Unauthorized\n from Acquisition import aq_inner\n-from plone.app.content.browser.file import TUS_ENABLED\n-from plone.app.content.browser.interfaces import IFolderContentsView\n-from plone.app.content.interfaces import IStructureAction\n-from plone.app.content.utils import json_dumps\n-from plone.app.content.utils import json_loads\n from plone.app.uuid.utils import uuidToCatalogBrain\n from plone.protect.postonly import check as checkpost\n from plone.registry.interfaces import IRegistry\n@@ -17,18 +12,21 @@\n from Products.Five import BrowserView\n from Products.PortalTransforms.transforms.safe_html import SafeHTML\n from zope.browsermenu.interfaces import IBrowserMenu\n-from zope.component import getMultiAdapter\n-from zope.component import getUtilitiesFor\n-from zope.component import getUtility\n+from zope.component import getMultiAdapter, getUtilitiesFor, getUtility\n from zope.i18n import translate\n from zope.interface import implementer\n from zope.schema.interfaces import IVocabularyFactory\n \n+from plone.app.content.browser.file import TUS_ENABLED\n+from plone.app.content.browser.interfaces import IFolderContentsView\n+from plone.app.content.interfaces import IStructureAction\n+from plone.app.content.utils import json_dumps, json_loads\n+\n \n class ContentsBaseAction(BrowserView):\n \n-    success_msg = _(\'Success\')\n-    failure_msg = _(\'Failure\')\n+    success_msg = _("Success")\n+    failure_msg = _("Failure")\n     required_obj_permission = None\n \n     @property\n@@ -41,20 +39,21 @@ def objectTitle(self, obj):\n         return utils.safe_unicode(title)\n \n     def protect(self):\n-        authenticator = getMultiAdapter((self.context, self.request),\n-                                        name=\'authenticator\')\n+        authenticator = getMultiAdapter(\n+            (self.context, self.request), name="authenticator"\n+        )\n         if not authenticator.verify():\n             raise Unauthorized\n         checkpost(self.request)\n \n     def json(self, data):\n         self.request.response.setHeader(\n-            \'Content-Type\', \'application/json; charset=utf-8\'\n+            "Content-Type", "application/json; charset=utf-8"\n         )\n         return json_dumps(data)\n \n     def get_selection(self):\n-        selection = self.request.form.get(\'selection\', \'[]\')\n+        selection = self.request.form.get("selection", "[]")\n         return json_loads(selection)\n \n     def action(self, obj):\n@@ -72,13 +71,13 @@ def __call__(self, keep_selection_order=False):\n         context = aq_inner(self.context)\n         selection = self.get_selection()\n \n-        parts = str(self.request.form.get(\'folder\', \'\').lstrip(\'/\')).split(\'/\')\n+        parts = str(self.request.form.get("folder", "").lstrip("/")).split("/")\n         if parts:\n-            parent = self.site.unrestrictedTraverse(\'/\'.join(parts[:-1]))\n+            parent = self.site.unrestrictedTraverse("/".join(parts[:-1]))\n             self.dest = parent.restrictedTraverse(parts[-1])\n \n-        self.catalog = getToolByName(context, \'portal_catalog\')\n-        self.mtool = getToolByName(self.context, \'portal_membership\')\n+        self.catalog = getToolByName(context, "portal_catalog")\n+        self.mtool = getToolByName(self.context, "portal_membership")\n \n         brains = []\n         if keep_selection_order:\n@@ -92,17 +91,15 @@ def __call__(self, keep_selection_order=False):\n             # remove everyone so we know if we missed any\n             selection.remove(brain.UID)\n             obj = brain.getObject()\n-            if (\n-                self.required_obj_permission\n-                and not self.mtool.checkPermission(\n-                    self.required_obj_permission,\n-                    obj\n-                )\n+            if self.required_obj_permission and not self.mtool.checkPermission(\n+                self.required_obj_permission, obj\n             ):\n-                self.errors.append(_(\n-                    \'Permission denied for "${title}"\',\n-                    mapping={\'title\': self.objectTitle(obj)}\n-                ))\n+                self.errors.append(\n+                    _(\n+                        \'Permission denied for "${title}"\',\n+                        mapping={"title": self.objectTitle(obj)},\n+                    )\n+                )\n                 continue\n             self.action(obj)\n \n@@ -111,10 +108,9 @@ def __call__(self, keep_selection_order=False):\n \n     def message(self, missing=[]):\n         if len(missing) > 0:\n-            self.errors.append(_(\n-                \'${items} could not be found\',\n-                mapping={\'items\': str(len(missing))}\n-            ))\n+            self.errors.append(\n+                _("${items} could not be found", mapping={"items": str(len(missing))})\n+            )\n         if self.errors:\n             msg = self.failure_msg\n         else:\n@@ -125,20 +121,17 @@ def message(self, missing=[]):\n             translated_errors = [\n                 translate(error, context=self.request) for error in self.errors\n             ]\n-            translated_msg = \'{:s}: {:s}\'.format(\n-                translated_msg,\n-                \'\\n\'.join(translated_errors)\n+            translated_msg = "{:s}: {:s}".format(\n+                translated_msg, "\\n".join(translated_errors)\n             )\n \n-        return self.json({\n-            \'status\': \'warning\' if self.errors else \'success\',\n-            \'msg\': translated_msg\n-        })\n+        return self.json(\n+            {"status": "warning" if self.errors else "success", "msg": translated_msg}\n+        )\n \n \n @implementer(IFolderContentsView)\n class FolderContentsView(BrowserView):\n-\n     def get_actions(self):\n         actions = []\n         for name, Utility in getUtilitiesFor(IStructureAction):\n@@ -149,34 +142,35 @@ def get_actions(self):\n \n     @property\n     def ignored_columns(self):\n-        """Return columns, which should be ignored in folder contents.\n-        """\n+        """Return columns, which should be ignored in folder contents."""\n         # These columns either have alternatives or are probably not useful\n         ignored = [\n-            \'Date\',\n-            \'Title\',\n-            \'author_name\',\n-            \'cmf_uid\',\n-            \'commentators\',\n-            \'created\',\n-            \'effective\',\n-            \'expires\',\n-            \'getIcon\',\n-            \'getMimeIcon\',\n-            \'getId\',\n-            \'getRemoteUrl\',\n-            \'in_response_to\',\n-            \'listCreators\',\n-            \'meta_type\',\n-            \'modified\',\n-            \'portal_type\',\n-            \'sync_uid\'\n+            "Date",\n+            "Title",\n+            "author_name",\n+            "cmf_uid",\n+            "commentators",\n+            "created",\n+            "effective",\n+            "expires",\n+            "getIcon",\n+            "getMimeIcon",\n+            "getId",\n+            "getRemoteUrl",\n+            "in_response_to",\n+            "listCreators",\n+            "meta_type",\n+            "modified",\n+            "portal_type",\n+            "sync_uid",\n         ]\n         return ignored\n \n     def get_columns(self):\n         columns = {}\n-        voc = getUtility(IVocabularyFactory, \'plone.app.vocabularies.MetadataFields\')(self.context)\n+        voc = getUtility(IVocabularyFactory, "plone.app.vocabularies.MetadataFields")(\n+            self.context\n+        )\n         for term in voc:\n             if term.value not in self.ignored_columns:\n                 columns[term.value] = translate(term.title, context=self.request)\n@@ -185,8 +179,7 @@ def get_columns(self):\n \n     def get_thumb_scale(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         if settings.no_thumbs_tables:\n             # thumbs to be supressed\n             return None\n@@ -195,56 +188,55 @@ def get_thumb_scale(self):\n \n     def default_page_types(self):\n         registry = getUtility(IRegistry)\n-        return registry.get(\'plone.default_page_types\', [])\n+        return registry.get("plone.default_page_types", [])\n \n     @property\n     def ignored_indexes(self):\n         ignored = [\n-            \'Date\',\n-            \'Description\',\n-            \'Title\',\n-            \'allowedRolesAndUsers\',\n-            \'author_name\',\n-            \'cmf_uid\',\n-            \'commentators\',\n-            \'effectiveRange\',\n-            \'getId\',\n-            \'getObjectPositionInParent\',\n-            \'getRawRelatedItems\',\n-            \'in_reply_to\',\n-            \'meta_type\',\n-            \'object_provides\',\n-            \'portal_type\',\n-            \'SearchableText\',\n-            \'sync_uid\'\n+            "Date",\n+            "Description",\n+            "Title",\n+            "allowedRolesAndUsers",\n+            "author_name",\n+            "cmf_uid",\n+            "commentators",\n+            "effectiveRange",\n+            "getId",\n+            "getObjectPositionInParent",\n+            "getRawRelatedItems",\n+            "in_reply_to",\n+            "meta_type",\n+            "object_provides",\n+            "portal_type",\n+            "SearchableText",\n+            "sync_uid",\n         ]\n         return ignored\n \n     def get_indexes(self):\n         # Base set of indexes\n         indexes = {\n-            \'created\': translate(_(\'Created on\'), context=self.request),\n-            \'Creator\': translate(_(\'Creator\'), context=self.request),\n-            \'effective\': translate(_(\'Publication date\'), context=self.request),  # noqa\n-            \'end\': translate(_(\'End Date\'), context=self.request),\n-            \'expires\': translate(_(\'Expiration date\'), context=self.request),\n-            \'id\': translate(_(\'ID\'), context=self.request),\n-            \'is_folderish\': translate(_(\'Folder\'), context=self.request),\n-            \'modified\': translate(_(\'Last modified\'), context=self.request),  # noqa\n-            \'review_state\': translate(_(\'Review state\'), context=self.request),\n-            \'sortable_title\': translate(_(\'Title\'), context=self.request),\n-            \'start\': translate(_(\'Start Date\'), context=self.request),\n-            \'Subject\': translate(_(\'Tags\'), context=self.request),\n-            \'total_comments\': translate(_(\'Total comments\'), context=self.request),  # noqa\n-            \'Type\': translate(_(\'Type\'), context=self.request),\n+            "created": translate(_("Created on"), context=self.request),\n+            "Creator": translate(_("Creator"), context=self.request),\n+            "effective": translate(_("Publication date"), context=self.request),  # noqa\n+            "end": translate(_("End Date"), context=self.request),\n+            "expires": translate(_("Expiration date"), context=self.request),\n+            "id": translate(_("ID"), context=self.request),\n+            "is_folderish": translate(_("Folder"), context=self.request),\n+            "modified": translate(_("Last modified"), context=self.request),  # noqa\n+            "review_state": translate(_("Review state"), context=self.request),\n+            "sortable_title": translate(_("Title"), context=self.request),\n+            "start": translate(_("Start Date"), context=self.request),\n+            "Subject": translate(_("Tags"), context=self.request),\n+            "total_comments": translate(\n+                _("Total comments"), context=self.request\n+            ),  # noqa\n+            "Type": translate(_("Type"), context=self.request),\n         }\n         # Filter out ignored\n-        indexes = {\n-            k: v for k, v in indexes.items()\n-            if k not in self.ignored_indexes\n-        }\n+        indexes = {k: v for k, v in indexes.items() if k not in self.ignored_indexes}\n         # Add in extra metadata indexes\n-        catalog = getToolByName(self.context, \'portal_catalog\')\n+        catalog = getToolByName(self.context, "portal_catalog")\n         cat_indexes = [idx for idx in catalog.indexes()]\n         for index in cat_indexes:\n             if index not in indexes and index not in self.ignored_indexes:\n@@ -254,38 +246,42 @@ def get_indexes(self):\n     def get_options(self):\n         site = get_top_site_from_url(self.context, self.request)\n         base_url = site.absolute_url()\n-        base_vocabulary = \'%s/@@getVocabulary?name=\' % base_url\n+        base_vocabulary = "%s/@@getVocabulary?name=" % base_url\n         site_path = site.getPhysicalPath()\n         context_path = self.context.getPhysicalPath()\n         columns = self.get_columns()\n         options = {\n-            \'vocabularyUrl\': \'%splone.app.vocabularies.Catalog\' % (\n-                base_vocabulary),\n-            \'urlStructure\': {\n-                \'base\': base_url,\n-                \'appended\': \'/folder_contents\'\n-            },\n-            \'moveUrl\': \'%s{path}/fc-itemOrder\' % base_url,\n-            \'indexOptionsUrl\': \'%s/@@qsOptions\' % base_url,\n-            \'contextInfoUrl\': \'%s{path}/@@fc-contextInfo\' % base_url,\n-            \'setDefaultPageUrl\': \'%s{path}/@@fc-setDefaultPage\' % base_url,\n-            \'defaultPageTypes\': self.default_page_types(),\n-            \'searchParam\': \'Title\',\n-            \'availableColumns\': columns,\n-            \'attributes\': [\'Title\', \'path\', \'getURL\', \'getIcon\', \'getMimeIcon\', \'portal_type\'] + list(columns.keys()),  # noqa\n-            \'buttons\': self.get_actions(),\n-            \'rearrange\': {\n-                \'properties\': self.get_indexes(),\n-                \'url\': \'%s{path}/@@fc-rearrange\' % base_url\n+            "vocabularyUrl": "%splone.app.vocabularies.Catalog" % (base_vocabulary),\n+            "urlStructure": {"base": base_url, "appended": "/folder_contents"},\n+            "moveUrl": "%s{path}/fc-itemOrder" % base_url,\n+            "indexOptionsUrl": "%s/@@qsOptions" % base_url,\n+            "contextInfoUrl": "%s{path}/@@fc-contextInfo" % base_url,\n+            "setDefaultPageUrl": "%s{path}/@@fc-setDefaultPage" % base_url,\n+            "defaultPageTypes": self.default_page_types(),\n+            "searchParam": "Title",\n+            "availableColumns": columns,\n+            "attributes": [\n+                "Title",\n+                "path",\n+                "getURL",\n+                "getIcon",\n+                "getMimeIcon",\n+                "portal_type",\n+            ]\n+            + list(columns.keys()),  # noqa\n+            "buttons": self.get_actions(),\n+            "rearrange": {\n+                "properties": self.get_indexes(),\n+                "url": "%s{path}/@@fc-rearrange" % base_url,\n             },\n-            \'basePath\': \'/\' + \'/\'.join(context_path[len(site_path):]),\n-            \'upload\': {\n-                \'relativePath\': \'@@fileUpload\',\n-                \'baseUrl\': base_url,\n-                \'initialFolder\': IUUID(self.context, None),\n-                \'useTus\': TUS_ENABLED\n+            "basePath": "/" + "/".join(context_path[len(site_path) :]),\n+            "upload": {\n+                "relativePath": "@@fileUpload",\n+                "baseUrl": base_url,\n+                "initialFolder": IUUID(self.context, None),\n+                "useTus": TUS_ENABLED,\n             },\n-            \'thumb_scale\': self.get_thumb_scale(),\n+            "thumb_scale": self.get_thumb_scale(),\n         }\n         return options\n \n@@ -297,57 +293,65 @@ def __call__(self):\n class ContextInfo(BrowserView):\n \n     attributes = [\n-        \'CreationDate\',\n-        \'Creator\',\n-        \'Description\',\n-        \'EffectiveDate\',\n-        \'end\',\n-        \'exclude_from_nav\',\n-        \'getObjSize\',\n-        \'getURL\',\n-        \'id\',\n-        \'is_folderish\',\n-        \'last_comment_date\',\n-        \'location\',\n-        \'ModificationDate\',\n-        \'path\',\n-        \'portal_type\',\n-        \'review_state\',\n-        \'start\',\n-        \'Subject\',\n-        \'Title\',\n-        \'total_comments\',\n-        \'Type\',\n-        \'UID\',\n+        "CreationDate",\n+        "Creator",\n+        "Description",\n+        "EffectiveDate",\n+        "end",\n+        "exclude_from_nav",\n+        "getObjSize",\n+        "getURL",\n+        "id",\n+        "is_folderish",\n+        "last_comment_date",\n+        "location",\n+        "ModificationDate",\n+        "path",\n+        "portal_type",\n+        "review_state",\n+        "start",\n+        "Subject",\n+        "Title",\n+        "total_comments",\n+        "Type",\n+        "UID",\n     ]\n \n     def __call__(self):\n         factories_menu = getUtility(\n-            IBrowserMenu, name=\'plone_contentmenu_factory\',\n-            context=self.context).getMenuItems(self.context, self.request)\n+            IBrowserMenu, name="plone_contentmenu_factory", context=self.context\n+        ).getMenuItems(self.context, self.request)\n         factories = []\n         for item in factories_menu:\n-            if item.get(\'title\') == \'folder_add_settings\':\n+            if item.get("title") == "folder_add_settings":\n                 continue\n-            title = item.get(\'title\', \'\')\n-            factories.append({\n-                \'id\': item.get(\'id\'),\n-                \'title\': title and translate(title, context=self.request) or \'\',  # noqa\n-                \'action\': item.get(\'action\')\n-                })\n+            title = item.get("title", "")\n+            factories.append(\n+                {\n+                    "id": item.get("id"),\n+                    "title": title\n+                    and translate(title, context=self.request)\n+                    or "",  # noqa\n+                    "action": item.get("action"),\n+                }\n+            )\n \n         context = aq_inner(self.context)\n         transform = SafeHTML()\n         crumbs = []\n         top_site = get_top_site_from_url(self.context, self.request)\n         while not context == top_site:\n-            crumbs.append({\n-                \'id\': context.getId(),\n-                \'title\': transform.scrub_html(utils.pretty_title_or_id(context, context))\n-            })\n+            crumbs.append(\n+                {\n+                    "id": context.getId(),\n+                    "title": transform.scrub_html(\n+                        utils.pretty_title_or_id(context, context)\n+                    ),\n+                }\n+            )\n             context = utils.parent(context)\n \n-        catalog = getToolByName(self.context, \'portal_catalog\')\n+        catalog = getToolByName(self.context, "portal_catalog")\n         try:\n             brains = catalog(UID=IUUID(self.context), show_inactive=True)\n         except TypeError:\n@@ -356,27 +360,29 @@ def __call__(self):\n         if len(brains) > 0:\n             obj = brains[0]\n             # context here should be site root\n-            base_path = \'/\'.join(context.getPhysicalPath())\n+            base_path = "/".join(context.getPhysicalPath())\n             item = {}\n             for attr in self.attributes:\n                 key = attr\n-                if key == \'path\':\n-                    attr = \'getPath\'\n+                if key == "path":\n+                    attr = "getPath"\n                 val = getattr(obj, attr, None)\n                 if callable(val):\n                     val = val()\n-                if key == \'path\':\n-                    val = val[len(base_path):]\n+                if key == "path":\n+                    val = val[len(base_path) :]\n                 if isinstance(val, (bytes, str)):\n                     val = transform.scrub_html(val)\n                 item[key] = val\n \n         self.request.response.setHeader(\n-            \'Content-Type\', \'application/json; charset=utf-8\'\n+            "Content-Type", "application/json; charset=utf-8"\n+        )\n+        return json_dumps(\n+            {\n+                "addButtons": factories,\n+                "defaultPage": self.context.getDefaultPage(),\n+                "breadcrumbs": [c for c in reversed(crumbs)],\n+                "object": item,\n+            }\n         )\n-        return json_dumps({\n-            \'addButtons\': factories,\n-            \'defaultPage\': self.context.getDefaultPage(),\n-            \'breadcrumbs\': [c for c in reversed(crumbs)],\n-            \'object\': item\n-        })\ndiff --git a/plone/app/content/browser/contents/copy.py b/plone/app/content/browser/contents/copy.py\nindex 3c5a3b9..d1684c8 100644\n--- a/plone/app/content/browser/contents/copy.py\n+++ b/plone/app/content/browser/contents/copy.py\n@@ -1,12 +1,12 @@\n-from OFS.CopySupport import _cb_encode\n-from OFS.CopySupport import cookie_path\n+from OFS.CopySupport import _cb_encode, cookie_path\n from OFS.Moniker import Moniker\n-from plone.app.content.browser.contents import ContentsBaseAction\n-from plone.app.content.interfaces import IStructureAction\n from Products.CMFPlone import PloneMessageFactory as _\n from zope.i18n import translate\n from zope.interface import implementer\n \n+from plone.app.content.browser.contents import ContentsBaseAction\n+from plone.app.content.interfaces import IStructureAction\n+\n \n @implementer(IStructureAction)\n class CopyAction:\n@@ -19,16 +19,16 @@ def __init__(self, context, request):\n \n     def get_options(self):\n         return {\n-            \'tooltip\': translate(_(\'Copy\'), context=self.request),\n-            \'id\': \'copy\',\n-            \'icon\': \'duplicate\',\n-            \'url\': self.context.absolute_url() + \'/@@fc-copy\'\n+            "tooltip": translate(_("Copy"), context=self.request),\n+            "id": "copy",\n+            "icon": "duplicate",\n+            "url": self.context.absolute_url() + "/@@fc-copy",\n         }\n \n \n class CopyActionView(ContentsBaseAction):\n-    success_msg = _(\'Successfully copied items\')\n-    failure_msg = _(\'Failed to copy items\')\n+    success_msg = _("Successfully copied items")\n+    failure_msg = _("Failed to copy items")\n \n     def action(self, obj):\n         self.oblist.append(obj)\n@@ -37,16 +37,20 @@ def finish(self):\n         oblist = []\n         for ob in self.oblist:\n             if not ob.cb_isCopyable():\n-                self.errors.append(_(\'${title} cannot be copied.\',\n-                                     mapping={\'title\': self.objectTitle(ob)}))\n+                self.errors.append(\n+                    _(\n+                        "${title} cannot be copied.",\n+                        mapping={"title": self.objectTitle(ob)},\n+                    )\n+                )\n                 continue\n             m = Moniker(ob)\n             oblist.append(m.dump())\n         cp = (0, oblist)\n         cp = _cb_encode(cp)\n         resp = self.request.response\n-        resp.setCookie(\'__cp\', cp, path=\'%s\' % cookie_path(self.request))\n-        self.request[\'__cp\'] = cp\n+        resp.setCookie("__cp", cp, path="%s" % cookie_path(self.request))\n+        self.request["__cp"] = cp\n \n     def __call__(self):\n         self.oblist = []\ndiff --git a/plone/app/content/browser/contents/cut.py b/plone/app/content/browser/contents/cut.py\nindex da3ad7c..2a260fe 100644\n--- a/plone/app/content/browser/contents/cut.py\n+++ b/plone/app/content/browser/contents/cut.py\n@@ -1,12 +1,12 @@\n-from OFS.CopySupport import _cb_encode\n-from OFS.CopySupport import cookie_path\n+from OFS.CopySupport import _cb_encode, cookie_path\n from OFS.Moniker import Moniker\n-from plone.app.content.browser.contents import ContentsBaseAction\n-from plone.app.content.interfaces import IStructureAction\n from Products.CMFPlone import PloneMessageFactory as _\n from zope.i18n import translate\n from zope.interface import implementer\n \n+from plone.app.content.browser.contents import ContentsBaseAction\n+from plone.app.content.interfaces import IStructureAction\n+\n \n @implementer(IStructureAction)\n class CutAction:\n@@ -19,16 +19,16 @@ def __init__(self, context, request):\n \n     def get_options(self):\n         return {\n-            \'tooltip\': translate(_(\'Cut\'), context=self.request),\n-            \'id\': \'cut\',\n-            \'icon\': \'scissors\',\n-            \'url\': self.context.absolute_url() + \'/@@fc-cut\'\n+            "tooltip": translate(_("Cut"), context=self.request),\n+            "id": "cut",\n+            "icon": "scissors",\n+            "url": self.context.absolute_url() + "/@@fc-cut",\n         }\n \n \n class CutActionView(ContentsBaseAction):\n-    success_msg = _(\'Successfully cut items\')\n-    failure_msg = _(\'Failed to cut items\')\n+    success_msg = _("Successfully cut items")\n+    failure_msg = _("Failed to cut items")\n \n     def action(self, obj):\n         self.oblist.append(obj)\n@@ -37,20 +37,28 @@ def finish(self):\n         oblist = []\n         for ob in self.oblist:\n             if ob.wl_isLocked():\n-                self.errors.append(_(\'${title} is being edited and cannot be cut.\',\n-                                     mapping={\'title\': self.objectTitle(ob)}))\n+                self.errors.append(\n+                    _(\n+                        "${title} is being edited and cannot be cut.",\n+                        mapping={"title": self.objectTitle(ob)},\n+                    )\n+                )\n                 continue\n             if not ob.cb_isMoveable():\n-                self.errors.append(_(\'${title} is being edited and cannot be cut.\',\n-                                     mapping={\'title\': self.objectTitle(ob)}))\n+                self.errors.append(\n+                    _(\n+                        "${title} is being edited and cannot be cut.",\n+                        mapping={"title": self.objectTitle(ob)},\n+                    )\n+                )\n                 continue\n             m = Moniker(ob)\n             oblist.append(m.dump())\n         cp = (1, oblist)\n         cp = _cb_encode(cp)\n         resp = self.request.response\n-        resp.setCookie(\'__cp\', cp, path=\'%s\' % cookie_path(self.request))\n-        self.request[\'__cp\'] = cp\n+        resp.setCookie("__cp", cp, path="%s" % cookie_path(self.request))\n+        self.request["__cp"] = cp\n \n     def __call__(self):\n         self.oblist = []\ndiff --git a/plone/app/content/browser/contents/defaultpage.py b/plone/app/content/browser/contents/defaultpage.py\nindex 93828fb..9b4b8ec 100644\n--- a/plone/app/content/browser/contents/defaultpage.py\n+++ b/plone/app/content/browser/contents/defaultpage.py\n@@ -1,20 +1,23 @@\n-from plone.app.content.browser.contents import ContentsBaseAction\n from Products.CMFPlone import PloneMessageFactory as _\n \n+from plone.app.content.browser.contents import ContentsBaseAction\n+\n \n class SetDefaultPageActionView(ContentsBaseAction):\n-    success_msg = _(\'Default page set successfully\')\n-    failure_msg = _(\'Failed to set default page\')\n+    success_msg = _("Default page set successfully")\n+    failure_msg = _("Failed to set default page")\n \n     def __call__(self):\n-        cid = self.request.form.get(\'id\')\n+        cid = self.request.form.get("id")\n         self.errors = []\n \n         if cid not in self.context.objectIds():\n             self.errors.append(\n-                _(\'There is no object with short name \'\n-                  \'${name} in this folder.\',\n-                  mapping={\'name\': cid}))\n+                _(\n+                    "There is no object with short name " "${name} in this folder.",\n+                    mapping={"name": cid},\n+                )\n+            )\n         else:\n             self.context.setDefaultPage(cid)\n         return self.message()\ndiff --git a/plone/app/content/browser/contents/delete.py b/plone/app/content/browser/contents/delete.py\nindex 14a65bf..2fa4cfd 100644\n--- a/plone/app/content/browser/contents/delete.py\n+++ b/plone/app/content/browser/contents/delete.py\n@@ -1,7 +1,7 @@\n+import json\n+\n from AccessControl import Unauthorized\n from AccessControl.Permissions import delete_objects\n-from plone.app.content.browser.contents import ContentsBaseAction\n-from plone.app.content.interfaces import IStructureAction\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n@@ -10,13 +10,14 @@\n from zope.i18n import translate\n from zope.interface import implementer\n \n-import json\n+from plone.app.content.browser.contents import ContentsBaseAction\n+from plone.app.content.interfaces import IStructureAction\n \n \n @implementer(IStructureAction)\n class DeleteAction:\n \n-    template = ViewPageTemplateFile(\'templates/delete.pt\')\n+    template = ViewPageTemplateFile("templates/delete.pt")\n     order = 4\n \n     def __init__(self, context, request):\n@@ -25,41 +26,40 @@ def __init__(self, context, request):\n \n     def get_options(self):\n         return {\n-            \'tooltip\': translate(_(\'Delete\'), context=self.request),\n-            \'id\': \'delete\',\n-            \'icon\': \'trash\',\n-            \'context\': \'danger\',\n-            \'url\': self.context.absolute_url() + \'/@@fc-delete\',\n-            \'form\': {\n-                \'title\': translate(_(\'Delete selected items\'), context=self.request),\n-                \'submitText\': translate(_(\'Yes\'), context=self.request),\n-                \'submitContext\': \'danger\',\n-                \'template\': self.template(),\n-                \'closeText\': translate(_(\'No\'), context=self.request),\n-                \'dataUrl\': self.context.absolute_url() + \'/@@fc-delete\'\n-            }\n+            "tooltip": translate(_("Delete"), context=self.request),\n+            "id": "delete",\n+            "icon": "trash",\n+            "context": "danger",\n+            "url": self.context.absolute_url() + "/@@fc-delete",\n+            "form": {\n+                "title": translate(_("Delete selected items"), context=self.request),\n+                "submitText": translate(_("Yes"), context=self.request),\n+                "submitContext": "danger",\n+                "template": self.template(),\n+                "closeText": translate(_("No"), context=self.request),\n+                "dataUrl": self.context.absolute_url() + "/@@fc-delete",\n+            },\n         }\n \n \n class DeleteActionView(ContentsBaseAction):\n     required_obj_permission = delete_objects\n-    success_msg = _(\'Successfully delete items\')\n-    failure_msg = _(\'Failed to delete items\')\n+    success_msg = _("Successfully delete items")\n+    failure_msg = _("Failed to delete items")\n \n     def __call__(self):\n-        if self.request.form.get(\'render\') == \'yes\':\n-            confirm_view = getMultiAdapter((getSite(), self.request),\n-                                           name=\'delete_confirmation_info\')\n+        if self.request.form.get("render") == "yes":\n+            confirm_view = getMultiAdapter(\n+                (getSite(), self.request), name="delete_confirmation_info"\n+            )\n             selection = self.get_selection()\n-            catalog = getToolByName(self.context, \'portal_catalog\')\n+            catalog = getToolByName(self.context, "portal_catalog")\n             brains = catalog(UID=selection, show_inactive=True)\n             items = [i.getObject() for i in brains]\n             self.request.response.setHeader(\n-                \'Content-Type\', \'application/json; charset=utf-8\'\n+                "Content-Type", "application/json; charset=utf-8"\n             )\n-            return json.dumps({\n-                \'html\': confirm_view(items)\n-            })\n+            return json.dumps({"html": confirm_view(items)})\n         else:\n             return super().__call__()\n \n@@ -68,18 +68,22 @@ def action(self, obj):\n         title = self.objectTitle(obj)\n \n         try:\n-            lock_info = obj.restrictedTraverse(\'@@plone_lock_info\')\n+            lock_info = obj.restrictedTraverse("@@plone_lock_info")\n         except AttributeError:\n             lock_info = None\n \n         if lock_info is not None and lock_info.is_locked():\n-            self.errors.append(_(\'${title} is locked and cannot be deleted.\',\n-                                 mapping={\'title\': title}))\n+            self.errors.append(\n+                _("${title} is locked and cannot be deleted.", mapping={"title": title})\n+            )\n             return\n         else:\n             try:\n                 parent.manage_delObjects(obj.getId())\n             except Unauthorized:\n                 self.errors.append(\n-                    _(\'You are not authorized to delete ${title}.\',\n-                        mapping={\'title\': self.objectTitle(self.dest)}))\n+                    _(\n+                        "You are not authorized to delete ${title}.",\n+                        mapping={"title": self.objectTitle(self.dest)},\n+                    )\n+                )\ndiff --git a/plone/app/content/browser/contents/paste.py b/plone/app/content/browser/contents/paste.py\nindex f5f9d90..01e58a5 100644\n--- a/plone/app/content/browser/contents/paste.py\n+++ b/plone/app/content/browser/contents/paste.py\n@@ -1,11 +1,12 @@\n from AccessControl import Unauthorized\n-from plone.app.content.browser.contents import ContentsBaseAction\n-from plone.app.content.interfaces import IStructureAction\n from Products.CMFPlone import PloneMessageFactory as _\n from ZODB.POSException import ConflictError\n from zope.i18n import translate\n from zope.interface import implementer\n \n+from plone.app.content.browser.contents import ContentsBaseAction\n+from plone.app.content.interfaces import IStructureAction\n+\n \n @implementer(IStructureAction)\n class PasteAction:\n@@ -18,28 +19,28 @@ def __init__(self, context, request):\n \n     def get_options(self):\n         return {\n-            \'tooltip\': translate(_(\'Paste\'), context=self.request),\n-            \'id\': \'paste\',\n-            \'icon\': \'open-file\',\n-            \'url\': self.context.absolute_url() + \'/@@fc-paste\'\n+            "tooltip": translate(_("Paste"), context=self.request),\n+            "id": "paste",\n+            "icon": "open-file",\n+            "url": self.context.absolute_url() + "/@@fc-paste",\n         }\n \n \n class PasteActionView(ContentsBaseAction):\n-    required_obj_permission = \'Copy or Move\'\n-    success_msg = _(\'Successfully pasted items\')\n-    failure_msg = _(\'Failed to paste items\')\n+    required_obj_permission = "Copy or Move"\n+    success_msg = _("Successfully pasted items")\n+    failure_msg = _("Failed to paste items")\n \n     def __call__(self):\n         self.protect()\n         self.errors = []\n \n-        parts = str(self.request.form[\'folder\'].lstrip(\'/\')).split(\'/\')\n-        parent = self.site.unrestrictedTraverse(\'/\'.join(parts[:-1]))\n+        parts = str(self.request.form["folder"].lstrip("/")).split("/")\n+        parent = self.site.unrestrictedTraverse("/".join(parts[:-1]))\n         self.dest = parent.restrictedTraverse(parts[-1])\n \n         try:\n-            self.dest.manage_pasteObjects(self.request[\'__cp\'])\n+            self.dest.manage_pasteObjects(self.request["__cp"])\n         except ConflictError:\n             raise\n         except Unauthorized:\n@@ -47,14 +48,20 @@ def __call__(self):\n             # "You are not allowed to access \'manage_pasteObjects\' in this\n             # context"\n             self.errors.append(\n-                _(\'You are not authorized to paste ${title} here.\',\n-                    mapping={\'title\': self.objectTitle(self.dest)}))\n+                _(\n+                    "You are not authorized to paste ${title} here.",\n+                    mapping={"title": self.objectTitle(self.dest)},\n+                )\n+            )\n         except ValueError as e:\n-            if \'Disallowed subobject type: \' in e.args[0]:\n-                msg_parts = e.args[0].split(\':\')\n+            if "Disallowed subobject type: " in e.args[0]:\n+                msg_parts = e.args[0].split(":")\n                 self.errors.append(\n-                    _(\'Disallowed subobject type "${type}"\',\n-                        mapping={\'type\': msg_parts[1].strip()}))\n+                    _(\n+                        \'Disallowed subobject type "${type}"\',\n+                        mapping={"type": msg_parts[1].strip()},\n+                    )\n+                )\n             else:\n                 raise e\n \ndiff --git a/plone/app/content/browser/contents/properties.py b/plone/app/content/browser/contents/properties.py\nindex 9386948..c70b679 100644\n--- a/plone/app/content/browser/contents/properties.py\n+++ b/plone/app/content/browser/contents/properties.py\n@@ -1,6 +1,6 @@\n+import json\n+\n from DateTime import DateTime\n-from plone.app.content.browser.contents import ContentsBaseAction\n-from plone.app.content.interfaces import IStructureAction\n from plone.app.dexterity.behaviors.metadata import ICategorization\n from plone.app.widgets.utils import get_datetime_options\n from plone.dexterity.interfaces import IDexterityContent\n@@ -14,13 +14,14 @@\n from zope.interface import implementer\n from zope.schema.interfaces import IVocabularyFactory\n \n-import json\n+from plone.app.content.browser.contents import ContentsBaseAction\n+from plone.app.content.interfaces import IStructureAction\n \n \n @implementer(IStructureAction)\n class PropertiesAction:\n \n-    template = ViewPageTemplateFile(\'templates/properties.pt\')\n+    template = ViewPageTemplateFile("templates/properties.pt")\n     order = 8\n \n     def __init__(self, context, request):\n@@ -28,83 +29,85 @@ def __init__(self, context, request):\n         self.request = request\n \n     def get_options(self):\n-        base_vocabulary = \'%s/@@getVocabulary?name=\' % getSite().absolute_url()\n+        base_vocabulary = "%s/@@getVocabulary?name=" % getSite().absolute_url()\n         return {\n-            \'tooltip\': translate(_(\'Properties\'), context=self.request),\n-            \'id\': \'properties\',\n-            \'icon\': \'edit\',\n-            \'url\': self.context.absolute_url() + \'/@@fc-properties\',\n-            \'form\': {\n-                \'title\': translate(_(\'Modify properties on items\'), context=self.request),\n-                \'template\': self.template(\n-                    vocabulary_url=\'%splone.app.vocabularies.Users\' % (\n-                        base_vocabulary),\n-                    pattern_options=json.dumps(get_datetime_options(self.request))\n+            "tooltip": translate(_("Properties"), context=self.request),\n+            "id": "properties",\n+            "icon": "edit",\n+            "url": self.context.absolute_url() + "/@@fc-properties",\n+            "form": {\n+                "title": translate(\n+                    _("Modify properties on items"), context=self.request\n                 ),\n-                \'dataUrl\': self.context.absolute_url() + \'/@@fc-properties\',\n-            }\n+                "template": self.template(\n+                    vocabulary_url="%splone.app.vocabularies.Users" % (base_vocabulary),\n+                    pattern_options=json.dumps(get_datetime_options(self.request)),\n+                ),\n+                "dataUrl": self.context.absolute_url() + "/@@fc-properties",\n+            },\n         }\n \n+\n class PropertiesActionView(ContentsBaseAction):\n-    success_msg = _(\'Successfully updated metadata\')\n-    failure_msg = _(\'Failure updating metadata\')\n-    required_obj_permission = \'Modify portal content\'\n+    success_msg = _("Successfully updated metadata")\n+    failure_msg = _("Failure updating metadata")\n+    required_obj_permission = "Modify portal content"\n \n     def __call__(self):\n \n-        if self.request.form.get(\'render\') == \'yes\':\n+        if self.request.form.get("render") == "yes":\n             lang_factory = getUtility(\n-                IVocabularyFactory,\n-                \'plone.app.vocabularies.SupportedContentLanguages\'\n+                IVocabularyFactory, "plone.app.vocabularies.SupportedContentLanguages"\n             )\n             lang_vocabulary = lang_factory(self.context)\n             languages = [\n+                {"title": term.title, "value": term.value} for term in lang_vocabulary\n+            ]\n+            return self.json(\n                 {\n-                    \'title\': term.title,\n-                    \'value\': term.value\n+                    "languages": [\n+                        {\n+                            "title": translate(\n+                                _("label_no_change", default="No change"),\n+                                context=self.request,\n+                            ),\n+                            "value": "",\n+                        }\n+                    ]\n+                    + languages\n                 }\n-                for term in lang_vocabulary\n-            ]\n-            return self.json({\n-                \'languages\': [{\n-                    \'title\': translate(\n-                        _(\'label_no_change\', default=\'No change\'),\n-                        context=self.request,\n-                    ),\n-                    \'value\': \'\'\n-                }] + languages\n-            })\n-\n-        self.putils = getToolByName(self.context, \'plone_utils\')\n-        self.effectiveDate = self.request.form.get(\'effectiveDate\')\n-        self.expirationDate = self.request.form.get(\'expirationDate\')\n-        self.copyright = self.request.form.get(\'copyright\')\n-        self.contributors = self.request.form.get(\'contributors\')\n+            )\n+\n+        self.putils = getToolByName(self.context, "plone_utils")\n+        self.effectiveDate = self.request.form.get("effectiveDate")\n+        self.expirationDate = self.request.form.get("expirationDate")\n+        self.copyright = self.request.form.get("copyright")\n+        self.contributors = self.request.form.get("contributors")\n         if self.contributors:\n-            self.contributors = self.contributors.split(\',\')\n+            self.contributors = self.contributors.split(",")\n         else:\n             self.contributors = []\n-        self.creators = self.request.form.get(\'creators\', \'\')\n+        self.creators = self.request.form.get("creators", "")\n         if self.creators:\n-            self.creators = self.creators.split(\',\')\n-        self.exclude = self.request.form.get(\'exclude-from-nav\')\n-        self.language = self.request.form.get(\'language\')\n-        self.recurse = self.request.form.get(\'recurse\', \'no\') == \'yes\'\n+            self.creators = self.creators.split(",")\n+        self.exclude = self.request.form.get("exclude-from-nav")\n+        self.language = self.request.form.get("language")\n+        self.recurse = self.request.form.get("recurse", "no") == "yes"\n         return super().__call__()\n \n     def dx_action(self, obj):\n-        if self.effectiveDate and hasattr(obj, \'effective_date\'):\n+        if self.effectiveDate and hasattr(obj, "effective_date"):\n             obj.effective_date = DateTime(self.effectiveDate)\n-        if self.expirationDate and hasattr(obj, \'expiration_date\'):\n+        if self.expirationDate and hasattr(obj, "expiration_date"):\n             obj.expiration_date = DateTime(self.expirationDate)\n-        if self.copyright and hasattr(obj, \'rights\'):\n+        if self.copyright and hasattr(obj, "rights"):\n             obj.rights = self.copyright\n-        if self.contributors and hasattr(obj, \'contributors\'):\n+        if self.contributors and hasattr(obj, "contributors"):\n             obj.contributors = tuple(self.contributors)\n-        if self.creators and hasattr(obj, \'creators\'):\n+        if self.creators and hasattr(obj, "creators"):\n             obj.creators = tuple(self.creators)\n-        if self.exclude and hasattr(obj, \'exclude_from_nav\'):\n-            obj.exclude_from_nav = self.exclude == \'yes\'\n+        if self.exclude and hasattr(obj, "exclude_from_nav"):\n+            obj.exclude_from_nav = self.exclude == "yes"\n \n         behavior_categorization = ICategorization(obj)\n         if self.language and behavior_categorization:\n@@ -138,7 +141,7 @@ def at_action(self, obj):\n                 pass\n         if self.exclude:\n             try:\n-                obj.setExcludeFromNav(self.exclude == \'yes\')\n+                obj.setExcludeFromNav(self.exclude == "yes")\n             except AttributeError:\n                 pass\n         if self.language:\ndiff --git a/plone/app/content/browser/contents/rearrange.py b/plone/app/content/browser/contents/rearrange.py\nindex 453bbf6..7307b79 100644\n--- a/plone/app/content/browser/contents/rearrange.py\n+++ b/plone/app/content/browser/contents/rearrange.py\n@@ -1,14 +1,14 @@\n from OFS.interfaces import IOrderedContainer\n-from plone.app.content.browser.contents import ContentsBaseAction\n-from plone.app.content.utils import json_loads\n from plone.folder.interfaces import IExplicitOrdering\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n \n+from plone.app.content.browser.contents import ContentsBaseAction\n+from plone.app.content.utils import json_loads\n+\n \n class OrderContentsBaseAction(ContentsBaseAction):\n-\n     def getOrdering(self):\n         if IPloneSiteRoot.providedBy(self.context):\n             return self.context\n@@ -28,38 +28,36 @@ def getOrdering(self):\n \n \n class ItemOrderActionView(OrderContentsBaseAction):\n-    success_msg = _(\'Successfully moved item\')\n-    failure_msg = _(\'Error moving item\')\n+    success_msg = _("Successfully moved item")\n+    failure_msg = _("Error moving item")\n \n     def __call__(self):\n         self.errors = []\n         self.protect()\n-        id = self.request.form.get(\'id\')\n+        id = self.request.form.get("id")\n         ordering = self.getOrdering()\n \n         if ordering is None:\n-            self.errors.append(_(\'This folder does not support ordering\'))\n+            self.errors.append(_("This folder does not support ordering"))\n             return self.message()\n \n-        delta = self.request.form[\'delta\']\n+        delta = self.request.form["delta"]\n \n-        if delta == \'top\':\n+        if delta == "top":\n             ordering.moveObjectsToTop([id])\n             return self.message()\n \n-        if delta == \'bottom\':\n+        if delta == "bottom":\n             ordering.moveObjectsToBottom([id])\n             return self.message()\n \n         delta = int(delta)\n-        subset_ids = json_loads(self.request.form.get(\'subsetIds\', \'null\'))\n+        subset_ids = json_loads(self.request.form.get("subsetIds", "null"))\n         if subset_ids:\n-            position_id = [\n-                (ordering.getObjectPosition(i), i) for i in subset_ids\n-            ]\n+            position_id = [(ordering.getObjectPosition(i), i) for i in subset_ids]\n             position_id.sort()\n             if subset_ids != [i for position, i in position_id]:\n-                self.errors.append(_(\'Client/server ordering mismatch\'))\n+                self.errors.append(_("Client/server ordering mismatch"))\n                 return self.message()\n \n         ordering.moveObjectsByDelta([id], delta, subset_ids)\n@@ -67,28 +65,25 @@ def __call__(self):\n \n \n class RearrangeActionView(OrderContentsBaseAction):\n-    success_msg = _(\'Successfully rearranged folder\')\n-    failure_msg = _(\'Can not rearrange folder\')\n+    success_msg = _("Successfully rearranged folder")\n+    failure_msg = _("Can not rearrange folder")\n \n     def __call__(self):\n         self.protect()\n         self.errors = []\n         ordering = self.getOrdering()\n         if ordering:\n-            catalog = getToolByName(self.context, \'portal_catalog\')\n+            catalog = getToolByName(self.context, "portal_catalog")\n             query = {\n-                \'path\': {\n-                    \'query\': \'/\'.join(self.context.getPhysicalPath()),\n-                    \'depth\': 1\n-                },\n-                \'sort_on\': self.request.form.get(\'rearrange_on\'),\n-                \'show_inactive\': True\n+                "path": {"query": "/".join(self.context.getPhysicalPath()), "depth": 1},\n+                "sort_on": self.request.form.get("rearrange_on"),\n+                "show_inactive": True,\n             }\n             brains = catalog(**query)\n-            if self.request.form.get(\'reversed\') == \'true\':\n+            if self.request.form.get("reversed") == "true":\n                 brains = [b for b in reversed(brains)]\n             for idx, brain in enumerate(brains):\n                 ordering.moveObjectToPosition(brain.id, idx)\n         else:\n-            self.errors.append(_(\'Not explicit orderable\'))\n+            self.errors.append(_("Not explicit orderable"))\n         return self.message()\ndiff --git a/plone/app/content/browser/contents/rename.py b/plone/app/content/browser/contents/rename.py\nindex ecef86c..81266a4 100644\n--- a/plone/app/content/browser/contents/rename.py\n+++ b/plone/app/content/browser/contents/rename.py\n@@ -1,8 +1,8 @@\n+import logging\n+\n+import transaction\n from AccessControl import getSecurityManager\n-from Acquisition import aq_inner\n-from Acquisition import aq_parent\n-from plone.app.content.browser.contents import ContentsBaseAction\n-from plone.app.content.interfaces import IStructureAction\n+from Acquisition import aq_inner, aq_parent\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n@@ -14,18 +14,16 @@\n from zope.interface import implementer\n from zope.lifecycleevent import ObjectModifiedEvent\n \n+from plone.app.content.browser.contents import ContentsBaseAction\n+from plone.app.content.interfaces import IStructureAction\n \n-import logging\n-import transaction\n-\n-\n-logger = logging.getLogger(\'plone.app.content\')\n+logger = logging.getLogger("plone.app.content")\n \n \n @implementer(IStructureAction)\n class RenameAction:\n \n-    template = ViewPageTemplateFile(\'templates/rename.pt\')\n+    template = ViewPageTemplateFile("templates/rename.pt")\n     order = 5\n \n     def __init__(self, context, request):\n@@ -34,33 +32,31 @@ def __init__(self, context, request):\n \n     def get_options(self):\n         return {\n-            \'tooltip\': translate(_(\'Rename\'), context=self.request),\n-            \'id\': \'rename\',\n-            \'icon\': \'random\',\n-            \'url\': self.context.absolute_url() + \'/@@fc-rename\',\n-            \'form\': {\n-                \'template\': self.template()\n-            }\n+            "tooltip": translate(_("Rename"), context=self.request),\n+            "id": "rename",\n+            "icon": "random",\n+            "url": self.context.absolute_url() + "/@@fc-rename",\n+            "form": {"template": self.template()},\n         }\n \n \n class RenameActionView(ContentsBaseAction):\n-    success_msg = _(\'Items renamed\')\n-    failure_msg = _(\'Failed to rename all items\')\n+    success_msg = _("Items renamed")\n+    failure_msg = _("Failed to rename all items")\n \n     def __call__(self):\n         self.errors = []\n         self.protect()\n         context = aq_inner(self.context)\n \n-        catalog = getToolByName(context, \'portal_catalog\')\n-        mtool = getToolByName(context, \'portal_membership\')\n+        catalog = getToolByName(context, "portal_catalog")\n+        mtool = getToolByName(context, "portal_membership")\n \n         missing = []\n         for key in self.request.form.keys():\n-            if not key.startswith(\'UID_\'):\n+            if not key.startswith("UID_"):\n                 continue\n-            index = key.split(\'_\')[-1]\n+            index = key.split("_")[-1]\n             uid = self.request.form[key]\n             brains = catalog(UID=uid, show_inactive=True)\n             if len(brains) == 0:\n@@ -68,22 +64,22 @@ def __call__(self):\n                 continue\n             obj = brains[0].getObject()\n             title = self.objectTitle(obj)\n-            if not mtool.checkPermission(\'Copy or Move\', obj):\n-                self.errors.append(_(\'Permission denied to rename ${title}.\',\n-                              mapping={\'title\': title}))\n+            if not mtool.checkPermission("Copy or Move", obj):\n+                self.errors.append(\n+                    _("Permission denied to rename ${title}.", mapping={"title": title})\n+                )\n                 continue\n \n             sp = transaction.savepoint(optimistic=True)\n \n-            newid = self.request.form[\'newid_\' + index]\n-            newtitle = self.request.form[\'newtitle_\' + index]\n+            newid = self.request.form["newid_" + index]\n+            newtitle = self.request.form["newtitle_" + index]\n             try:\n                 obid = obj.getId()\n                 title = obj.Title()\n                 change_title = newtitle and title != newtitle\n                 if change_title:\n-                    getSecurityManager().validate(obj, obj, \'setTitle\',\n-                                                  obj.setTitle)\n+                    getSecurityManager().validate(obj, obj, "setTitle", obj.setTitle)\n                     obj.setTitle(newtitle)\n                     notify(ObjectModifiedEvent(obj))\n                 if newid and obid != newid:\n@@ -92,10 +88,11 @@ def __call__(self):\n                     newid = INameChooser(parent).chooseName(newid, obj)\n                     # Update the default_page on the parent.\n                     context_state = getMultiAdapter(\n-                        (obj, self.request), name=\'plone_context_state\')\n+                        (obj, self.request), name="plone_context_state"\n+                    )\n                     if context_state.is_default_page():\n                         parent.setDefaultPage(newid)\n-                    parent.manage_renameObjects((obid, ), (newid, ))\n+                    parent.manage_renameObjects((obid,), (newid,))\n                 elif change_title:\n                     # the rename will have already triggered a reindex\n                     obj.reindexObject()\n@@ -103,9 +100,13 @@ def __call__(self):\n                 raise\n             except Exception as e:\n                 sp.rollback()\n-                logger.error(\'Error renaming "{title}": "{exception}"\'\n-                    .format(title=title, exception=e))\n-                self.errors.append(_(\'Error renaming ${title}\', mapping={\n-                    \'title\': title}))\n+                logger.error(\n+                    \'Error renaming "{title}": "{exception}"\'.format(\n+                        title=title, exception=e\n+                    )\n+                )\n+                self.errors.append(\n+                    _("Error renaming ${title}", mapping={"title": title})\n+                )\n \n         return self.message(missing)\ndiff --git a/plone/app/content/browser/contents/tags.py b/plone/app/content/browser/contents/tags.py\nindex 82c6fbe..743bab3 100644\n--- a/plone/app/content/browser/contents/tags.py\n+++ b/plone/app/content/browser/contents/tags.py\n@@ -1,16 +1,17 @@\n-from plone.app.content.browser.contents import ContentsBaseAction\n-from plone.app.content.interfaces import IStructureAction\n from Products.CMFPlone import PloneMessageFactory as _\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope.component.hooks import getSite\n from zope.i18n import translate\n from zope.interface import implementer\n \n+from plone.app.content.browser.contents import ContentsBaseAction\n+from plone.app.content.interfaces import IStructureAction\n+\n \n @implementer(IStructureAction)\n class TagsAction:\n \n-    template = ViewPageTemplateFile(\'templates/tags.pt\')\n+    template = ViewPageTemplateFile("templates/tags.pt")\n     order = 6\n \n     def __init__(self, context, request):\n@@ -18,35 +19,35 @@ def __init__(self, context, request):\n         self.request = request\n \n     def get_options(self):\n-        base_vocabulary = \'%s/@@getVocabulary?name=\' % getSite().absolute_url()\n+        base_vocabulary = "%s/@@getVocabulary?name=" % getSite().absolute_url()\n         return {\n-            \'tooltip\': translate(_(\'Tags\'), context=self.request),\n-            \'id\': \'tags\',\n-            \'icon\': \'tags\',\n-            \'url\': self.context.absolute_url() + \'/@@fc-tags\',\n-            \'form\': {\n-                \'template\': self.template(\n-                    vocabulary_url=\'%splone.app.vocabularies.Keywords\' % (\n-                        base_vocabulary)\n+            "tooltip": translate(_("Tags"), context=self.request),\n+            "id": "tags",\n+            "icon": "tags",\n+            "url": self.context.absolute_url() + "/@@fc-tags",\n+            "form": {\n+                "template": self.template(\n+                    vocabulary_url="%splone.app.vocabularies.Keywords"\n+                    % (base_vocabulary)\n                 )\n-            }\n+            },\n         }\n \n \n class TagsActionView(ContentsBaseAction):\n-    required_obj_permission = \'Modify portal content\'\n-    success_msg = _(\'Successfully updated tags on items\')\n-    failure_msg = _(\'Failed to modify tags on items\')\n+    required_obj_permission = "Modify portal content"\n+    success_msg = _("Successfully updated tags on items")\n+    failure_msg = _("Failed to modify tags on items")\n \n     def action(self, obj):\n-        toadd = self.request.form.get(\'toadd\')\n+        toadd = self.request.form.get("toadd")\n         if toadd:\n-            toadd = set(toadd.split(\',\'))\n+            toadd = set(toadd.split(","))\n         else:\n             toadd = set()\n-        toremove = self.request.get(\'toremove\')\n+        toremove = self.request.get("toremove")\n         if toremove:\n-            toremove = set(toremove.split(\',\'))\n+            toremove = set(toremove.split(","))\n         else:\n             toremove = set()\n         tags = set(obj.Subject())\ndiff --git a/plone/app/content/browser/contents/workflow.py b/plone/app/content/browser/contents/workflow.py\nindex f426127..9b62492 100644\n--- a/plone/app/content/browser/contents/workflow.py\n+++ b/plone/app/content/browser/contents/workflow.py\n@@ -1,6 +1,4 @@\n from DateTime import DateTime\n-from plone.app.content.browser.contents import ContentsBaseAction\n-from plone.app.content.interfaces import IStructureAction\n from plone.dexterity.utils import safe_unicode\n from Products.CMFCore.interfaces._content import IFolderish\n from Products.CMFCore.utils import getToolByName\n@@ -10,11 +8,14 @@\n from zope.i18n import translate\n from zope.interface import implementer\n \n+from plone.app.content.browser.contents import ContentsBaseAction\n+from plone.app.content.interfaces import IStructureAction\n+\n \n @implementer(IStructureAction)\n class WorkflowAction:\n \n-    template = ViewPageTemplateFile(\'templates/workflow.pt\')\n+    template = ViewPageTemplateFile("templates/workflow.pt")\n     order = 7\n \n     def __init__(self, context, request):\n@@ -23,61 +24,63 @@ def __init__(self, context, request):\n \n     def get_options(self):\n         return {\n-            \'tooltip\': translate(_(\'State\'), context=self.request),\n-            \'id\': \'workflow\',\n-            \'icon\': \'lock\',\n-            \'url\': self.context.absolute_url() + \'/@@fc-workflow\',\n-            \'form\': {\n-                \'title\': translate(_(\'Change workflow of selected items\'), context=self.request),\n-                \'template\': self.template(),\n-                \'dataUrl\': self.context.absolute_url() + \'/@@fc-workflow\'\n-            }\n+            "tooltip": translate(_("State"), context=self.request),\n+            "id": "workflow",\n+            "icon": "lock",\n+            "url": self.context.absolute_url() + "/@@fc-workflow",\n+            "form": {\n+                "title": translate(\n+                    _("Change workflow of selected items"), context=self.request\n+                ),\n+                "template": self.template(),\n+                "dataUrl": self.context.absolute_url() + "/@@fc-workflow",\n+            },\n         }\n \n \n class WorkflowActionView(ContentsBaseAction):\n-    required_obj_permission = \'Modify portal content\'\n-    success_msg = _(\'Successfully modified items\')\n-    failure_msg = _(\'Failed to modify items\')\n+    required_obj_permission = "Modify portal content"\n+    success_msg = _("Successfully modified items")\n+    failure_msg = _("Failed to modify items")\n \n     def __call__(self):\n-        self.pworkflow = getToolByName(self.context, \'portal_workflow\')\n-        self.putils = getToolByName(self.context, \'plone_utils\')\n-        self.transition_id = self.request.form.get(\'transition\', None)\n-        self.comments = self.request.form.get(\'comments\', \'\')\n-        self.recurse = self.request.form.get(\'recurse\', \'no\') == \'yes\'\n-        if self.request.form.get(\'render\') == \'yes\':\n+        self.pworkflow = getToolByName(self.context, "portal_workflow")\n+        self.putils = getToolByName(self.context, "plone_utils")\n+        self.transition_id = self.request.form.get("transition", None)\n+        self.comments = self.request.form.get("comments", "")\n+        self.recurse = self.request.form.get("recurse", "no") == "yes"\n+        if self.request.form.get("render") == "yes":\n             # asking for render information\n             selection = self.get_selection()\n-            catalog = getToolByName(self.context, \'portal_catalog\')\n+            catalog = getToolByName(self.context, "portal_catalog")\n             brains = catalog(UID=selection, show_inactive=True)\n             transitions = []\n             for brain in brains:\n                 obj = brain.getObject()\n                 for transition in self.pworkflow.getTransitionsFor(obj):\n                     tdata = {\n-                        \'id\': transition[\'id\'],\n-                        \'title\': self.context.translate(\n-                            safe_unicode(transition[\'name\']))\n+                        "id": transition["id"],\n+                        "title": self.context.translate(\n+                            safe_unicode(transition["name"])\n+                        ),\n                     }\n                     if tdata not in transitions:\n                         transitions.append(tdata)\n-            return self.json({\n-                \'transitions\': transitions\n-            })\n+            return self.json({"transitions": transitions})\n         else:\n             return super().__call__()\n \n     def action(self, obj, bypass_recurse=False):\n         transitions = self.pworkflow.getTransitionsFor(obj)\n-        if self.transition_id in [t[\'id\'] for t in transitions]:\n+        if self.transition_id in [t["id"] for t in transitions]:\n             try:\n                 # set effective date if not already set\n-                if obj.EffectiveDate() == \'None\':\n+                if obj.EffectiveDate() == "None":\n                     obj.setEffectiveDate(DateTime())\n \n-                self.pworkflow.doActionFor(obj, self.transition_id,\n-                                           comment=self.comments)\n+                self.pworkflow.doActionFor(\n+                    obj, self.transition_id, comment=self.comments\n+                )\n                 if self.putils.isDefaultPage(obj):\n                     self.action(obj.aq_parent, bypass_recurse=True)\n                 recurse = self.recurse and not bypass_recurse\n@@ -89,5 +92,8 @@ def action(self, obj, bypass_recurse=False):\n                 raise\n             except Exception:\n                 self.errors.append(\n-                    _(\'Could not transition: ${title}\',\n-                      mapping={\'title\': self.objectTitle(obj)}))\n+                    _(\n+                        "Could not transition: ${title}",\n+                        mapping={"title": self.objectTitle(obj)},\n+                    )\n+                )\ndiff --git a/plone/app/content/browser/file.py b/plone/app/content/browser/file.py\nindex a7a7a8d..e384a31 100644\n--- a/plone/app/content/browser/file.py\n+++ b/plone/app/content/browser/file.py\n@@ -1,3 +1,8 @@\n+import json\n+import logging\n+import mimetypes\n+import os\n+\n from AccessControl import getSecurityManager\n from OFS.interfaces import IFolder\n from plone.app.dexterity.interfaces import IDXFileFactory\n@@ -6,17 +11,11 @@\n from Products.CMFPlone.permissions import AddPortalContent\n from Products.Five.browser import BrowserView\n \n-import json\n-import logging\n-import mimetypes\n-import os\n-\n-\n-logger = logging.getLogger(\'plone\')\n+logger = logging.getLogger("plone")\n \n \n def _bool(val):\n-    if val.lower() in (\'t\', \'true\', \'1\', \'on\'):\n+    if val.lower() in ("t", "true", "1", "on"):\n         return True\n     return False\n \n@@ -29,48 +28,54 @@ def _tus_int(val):\n \n \n possible_tus_options = {\n-    \'tmp_file_dir\': str,\n-    \'send_file\': _bool,\n-    \'upload_valid_duration\': _tus_int\n+    "tmp_file_dir": str,\n+    "send_file": _bool,\n+    "upload_valid_duration": _tus_int,\n }\n \n TUS_ENABLED = False\n-if os.environ.get(\'TUS_ENABLED\'):\n+if os.environ.get("TUS_ENABLED"):\n     # tus resumable upload standard, see http://tus.io\n     try:\n         from tus import Tus, Zope2RequestAdapter\n+\n         tus_settings = {}\n         for option, converter in possible_tus_options.items():\n-            name = \'TUS_%s\' % option.upper()\n+            name = "TUS_%s" % option.upper()\n             if name in os.environ:\n                 tus_settings[option] = converter(os.environ[name])\n \n-            tmp_file_dir = tus_settings.get(\'tmp_file_dir\')\n+            tmp_file_dir = tus_settings.get("tmp_file_dir")\n             if tmp_file_dir is None:\n-                logger.warn(\'You are trying to enable tus but no\'\n-                            \'TUS_TMP_FILE_DIR environment setting is set.\')\n-            elif not os.path.exists(tmp_file_dir) or \\\n-                    not os.path.isdir(tmp_file_dir):\n-                logger.warn(\'The TUS_TMP_FILE_DIR does not point to a valid \'\n-                            \'directory.\')\n+                logger.warn(\n+                    "You are trying to enable tus but no"\n+                    "TUS_TMP_FILE_DIR environment setting is set."\n+                )\n+            elif not os.path.exists(tmp_file_dir) or not os.path.isdir(tmp_file_dir):\n+                logger.warn(\n+                    "The TUS_TMP_FILE_DIR does not point to a valid " "directory."\n+                )\n             elif not os.access(tmp_file_dir, os.W_OK):\n-                logger.warn(\'The TUS_TMP_FILE_DIR is not writable\')\n+                logger.warn("The TUS_TMP_FILE_DIR is not writable")\n             else:\n                 TUS_ENABLED = True\n-                logger.info(\'tus file upload support is successfully \'\n-                            \'configured\')\n+                logger.info("tus file upload support is successfully " "configured")\n     except ImportError:\n-        logger.warn(\'TUS_ENABLED is set; however, tus python package is \'\n-                    \'not installed\')\n+        logger.warn(\n+            "TUS_ENABLED is set; however, tus python package is " "not installed"\n+        )\n else:\n     try:\n         import tus\n+\n         tus  # pyflakes\n     except ImportError:\n         pass\n     else:\n-        logger.warn(\'You have the tus python package installed but it is \'\n-                    \'not configured for this plone client\')\n+        logger.warn(\n+            "You have the tus python package installed but it is "\n+            "not configured for this plone client"\n+        )\n \n \n class FileUploadView(BrowserView):\n@@ -87,7 +92,7 @@ def __contains__(self, uid):\n     def __getitem__(self, uid):\n         if self.tus_uid is None:\n             self.tus_uid = uid\n-            self.__doc__ = \'foobar\'  # why is this necessary?\n+            self.__doc__ = "foobar"  # why is this necessary?\n             return self\n         else:\n             raise KeyError\n@@ -111,7 +116,7 @@ def __call__(self):\n                 if not tus.upload_finished:\n                     return\n                 else:\n-                    filename = req.getHeader(\'FILENAME\')\n+                    filename = req.getHeader("FILENAME")\n                     if tus.send_file:\n                         filedata = req._file\n                         filedata.filename = filename\n@@ -119,7 +124,7 @@ def __call__(self):\n                         filepath = req._file.read()\n                         filedata = open(filepath)\n         if not tusrequest:\n-            if req.REQUEST_METHOD != \'POST\':\n+            if req.REQUEST_METHOD != "POST":\n                 return\n             filedata = self.request.form.get("file", None)\n             if filedata is None:\n@@ -130,77 +135,72 @@ def __call__(self):\n         if not filedata:\n             return\n \n-        ctr = getToolByName(self.context, \'content_type_registry\')\n-        type_ = ctr.findTypeName(filename.lower(), content_type, \'\') or \'File\'\n+        ctr = getToolByName(self.context, "content_type_registry")\n+        type_ = ctr.findTypeName(filename.lower(), content_type, "") or "File"\n \n         # Now check that the object is not restricted to be added in the\n         # current context\n-        allowed_ids = [\n-            fti.getId() for fti in self.context.allowedContentTypes()\n-        ]\n+        allowed_ids = [fti.getId() for fti in self.context.allowedContentTypes()]\n         if type_ not in allowed_ids:\n             response = self.request.RESPONSE\n             response.setStatus(403)\n-            if type_ == \'File\':\n+            if type_ == "File":\n                 return "You cannot add a File to this folder, try another one"\n-            if type_ == \'Image\':\n-                return (\n-                    "You cannot add an Image to this folder, "\n-                    "try another one"\n-                )\n+            if type_ == "Image":\n+                return "You cannot add an Image to this folder, " "try another one"\n \n         factory = IDXFileFactory(self.context)\n         obj = factory(filename, content_type, filedata)\n \n-        result = {\n-            "type": \'\',\n-            "size": 0\n-        }\n+        result = {"type": "", "size": 0}\n \n-        if \'File\' in obj.portal_type:\n-            result[\'size\'] = obj.file.getSize()\n-            result[\'type\'] = obj.file.contentType\n-        elif \'Image\' in obj.portal_type:\n-            result[\'size\'] = obj.image.getSize()\n-            result[\'type\'] = obj.image.contentType\n+        if "File" in obj.portal_type:\n+            result["size"] = obj.file.getSize()\n+            result["type"] = obj.file.contentType\n+        elif "Image" in obj.portal_type:\n+            result["size"] = obj.image.getSize()\n+            result["type"] = obj.image.contentType\n \n         if tusrequest:\n             tus.cleanup_file()\n-        result.update({\n-            \'url\': obj.absolute_url(),\n-            \'name\': obj.getId(),\n-            \'UID\': IUUID(obj),\n-            \'filename\': filename\n-        })\n+        result.update(\n+            {\n+                "url": obj.absolute_url(),\n+                "name": obj.getId(),\n+                "UID": IUUID(obj),\n+                "filename": filename,\n+            }\n+        )\n \n         self.request.response.setHeader(\n-            \'Content-Type\', \'application/json; charset=utf-8\'\n+            "Content-Type", "application/json; charset=utf-8"\n         )\n         return json.dumps(result)\n \n \n class AllowUploadView(BrowserView):\n-\n     def __call__(self):\n         """Return JSON structure to indicate if File or Image uploads are\n         allowed in the current container.\n         """\n         self.request.response.setHeader(\n-            \'Content-Type\', \'application/json; charset=utf-8\'\n+            "Content-Type", "application/json; charset=utf-8"\n         )\n         context = self.context\n-        if self.request.form.get(\'path\'):\n-            context = context.restrictedTraverse(self.request.form.get(\'path\'))\n+        if self.request.form.get("path"):\n+            context = context.restrictedTraverse(self.request.form.get("path"))\n \n         allow_images = False\n         allow_files = False\n         if IFolder.providedBy(context):\n             allowed_types = [t.getId() for t in context.allowedContentTypes()]\n-            allow_images = \'Image\' in allowed_types\n-            allow_files = \'File\' in allowed_types\n-\n-        return json.dumps({\n-            \'allowUpload\': allow_images or allow_files,\n-            \'allowImages\': allow_images,\n-            \'allowFiles\': allow_files\n-        })\n+            allow_images = "Image" in allowed_types\n+            allow_files = "File" in allowed_types\n+\n+        return json.dumps(\n+            {\n+                "allowUpload": allow_images or allow_files,\n+                "allowImages": allow_images,\n+                "allowFiles": allow_files,\n+            }\n+        )\ndiff --git a/plone/app/content/browser/folder_publish.py b/plone/app/content/browser/folder_publish.py\nindex 5eba758..a9a8818 100644\n--- a/plone/app/content/browser/folder_publish.py\n+++ b/plone/app/content/browser/folder_publish.py\n@@ -1,5 +1,5 @@\n-from plone.protect import CheckAuthenticator\n-from plone.protect import PostOnly\n+import transaction\n+from plone.protect import CheckAuthenticator, PostOnly\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n from Products.CMFPlone.utils import transaction_note\n@@ -7,8 +7,6 @@\n from zope.component import getMultiAdapter\n from zope.publisher.browser import BrowserView\n \n-import transaction\n-\n \n class FolderPublishView(BrowserView):\n     """Publish objects from a folder.\n@@ -78,7 +76,9 @@ def transition_objects_by_paths(\n             try:\n                 obj = traverse(path, None)\n                 if obj is not None:\n-                    view = getMultiAdapter((obj, self.request), name="content_status_modify")\n+                    view = getMultiAdapter(\n+                        (obj, self.request), name="content_status_modify"\n+                    )\n                     view(\n                         workflow_action,\n                         comment,\n@@ -105,7 +105,9 @@ def transition_objects_by_paths(\n \n     def redirect(self):\n         target = self.request.get("orig_template", "")\n-        if target and not getToolByName(self.context, "portal_url").isURLInPortal(target):\n+        if target and not getToolByName(self.context, "portal_url").isURLInPortal(\n+            target\n+        ):\n             target = ""\n         if not target:\n             target = self.context.absolute_url()\ndiff --git a/plone/app/content/browser/folderfactories.py b/plone/app/content/browser/folderfactories.py\nindex 7cbfaa1..9b82fd8 100644\n--- a/plone/app/content/browser/folderfactories.py\n+++ b/plone/app/content/browser/folderfactories.py\n@@ -1,19 +1,19 @@\n-from Acquisition import aq_inner\n-from Acquisition import aq_parent\n-from Products.CMFCore.Expression import createExprContext\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n-from plone.app.content.browser.interfaces import IFolderContentsView\n+from urllib.parse import quote_plus\n+\n+from Acquisition import aq_inner, aq_parent\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n from plone.memoize.instance import memoize\n from plone.memoize.request import memoize_diy_request\n from plone.protect.authenticator import createToken\n-from urllib.parse import quote_plus\n-from zope.component import getMultiAdapter\n-from zope.component import queryUtility\n+from Products.CMFCore.Expression import createExprContext\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n+from zope.component import getMultiAdapter, queryUtility\n from zope.i18n import translate\n from zope.publisher.browser import BrowserView\n \n+from plone.app.content.browser.interfaces import IFolderContentsView\n+\n \n @memoize_diy_request(arg=0)\n def _allowedTypes(request, context):\n@@ -21,17 +21,16 @@ def _allowedTypes(request, context):\n \n \n class FolderFactoriesView(BrowserView):\n-    """The folder_factories view - show addable types\n-    """\n+    """The folder_factories view - show addable types"""\n \n     def __call__(self):\n-        if \'form.button.Add\' in self.request.form:\n-            urltool = getToolByName(self.context, \'portal_url\')\n-            url = self.request.form.get(\'url\')\n+        if "form.button.Add" in self.request.form:\n+            urltool = getToolByName(self.context, "portal_url")\n+            url = self.request.form.get("url")\n             if not urltool.isURLInPortal(url):\n                 url = self.context.absolute_url()\n             self.request.response.redirect(url)\n-            return \'\'\n+            return ""\n         else:\n             return self.index()\n \n@@ -42,8 +41,9 @@ def can_constrain_types(self):\n     @memoize\n     def add_context(self):\n         context = self.context\n-        context_state = getMultiAdapter((context, self.request),\n-                                        name=\'plone_context_state\')\n+        context_state = getMultiAdapter(\n+            (context, self.request), name="plone_context_state"\n+        )\n         context = aq_inner(context)\n         try:\n             published = self.request.PUBLISHED\n@@ -51,8 +51,7 @@ def add_context(self):\n             published = context\n         if context_state.is_structural_folder():\n             if context_state.is_default_page():\n-                is_folder_contents_view = \\\n-                    IFolderContentsView.providedBy(published)\n+                is_folder_contents_view = IFolderContentsView.providedBy(published)\n                 if is_folder_contents_view or self == published:\n                     # on the folder_contents view and factories view,\n                     # show the actual context object\'s addable types\n@@ -63,6 +62,7 @@ def add_context(self):\n                 return context\n         else:\n             return aq_parent(context)\n+\n     # NOTE: This is also used by plone.app.contentmenu.menu.FactoriesMenu.\n     # The return value is somewhat dictated by the menu infrastructure, so\n     # be careful if you change it\n@@ -80,8 +80,7 @@ def addable_types(self, include=None):\n         results = []\n \n         idnormalizer = queryUtility(IIDNormalizer)\n-        portal_state = getMultiAdapter((context, request),\n-                                       name=\'plone_portal_state\')\n+        portal_state = getMultiAdapter((context, request), name="plone_portal_state")\n \n         addContext = self.add_context()\n         baseUrl = addContext.absolute_url()\n@@ -89,7 +88,7 @@ def addable_types(self, include=None):\n \n         allowedTypes = _allowedTypes(request, addContext)\n \n-        types_tool = getToolByName(context, \'portal_types\')\n+        types_tool = getToolByName(context, "portal_types")\n \n         # Note: we don\'t check \'allowed\' or \'available\' here, because these are\n         # slow. We assume the \'allowedTypes\' list has already performed the\n@@ -98,48 +97,50 @@ def addable_types(self, include=None):\n             object=addContext,\n             check_permissions=False,\n             check_condition=False,\n-            category=\'folder/add\',\n+            category="folder/add",\n         )\n-        addActionsById = {a[\'id\']: a for a in actions}\n+        addActionsById = {a["id"]: a for a in actions}\n \n         expr_context = createExprContext(\n-            aq_parent(addContext), portal_state.portal(), addContext)\n+            aq_parent(addContext), portal_state.portal(), addContext\n+        )\n         for t in allowedTypes:\n             typeId = t.getId()\n             if include is None or typeId in include:\n                 cssId = idnormalizer.normalize(typeId)\n-                cssClass = \'contenttype-%s\' % cssId\n+                cssClass = "contenttype-%s" % cssId\n \n                 url = None\n                 addAction = addActionsById.get(typeId, None)\n                 if addAction is not None:\n-                    url = addAction[\'url\']\n+                    url = addAction["url"]\n \n                 if not url:\n-                    url = \'{}/createObject?type_name={}&_authenticator={}\'.format(\n-                        baseUrl, quote_plus(typeId), token)\n+                    url = "{}/createObject?type_name={}&_authenticator={}".format(\n+                        baseUrl, quote_plus(typeId), token\n+                    )\n \n                 icon = t.getIconExprObject()\n                 if icon:\n                     icon = icon(expr_context)\n \n-                results.append({\n-                    \'id\': typeId,\n-                    \'title\': t.Title(),\n-                    \'description\': t.Description(),\n-                    \'action\': url,\n-                    \'selected\': False,\n-                    \'icon\': icon,\n-                    \'extra\': {\n-                        \'id\': cssId,\n-                        \'separator\': None,\n-                        \'class\': cssClass},\n-                    \'submenu\': None,\n-                })\n+                results.append(\n+                    {\n+                        "id": typeId,\n+                        "title": t.Title(),\n+                        "description": t.Description(),\n+                        "action": url,\n+                        "selected": False,\n+                        "icon": icon,\n+                        "extra": {"id": cssId, "separator": None, "class": cssClass},\n+                        "submenu": None,\n+                    }\n+                )\n \n         # Sort the addable content types based on their translated title\n-        results = [(translate(ctype[\'title\'], context=request), ctype)\n-                   for ctype in results]\n+        results = [\n+            (translate(ctype["title"], context=request), ctype) for ctype in results\n+        ]\n         results.sort()\n         results = [ctype[-1] for ctype in results]\n \ndiff --git a/plone/app/content/browser/i18n.py b/plone/app/content/browser/i18n.py\nindex 3281429..03717cf 100644\n--- a/plone/app/content/browser/i18n.py\n+++ b/plone/app/content/browser/i18n.py\n@@ -1,23 +1,26 @@\n-from Products.Five.browser import BrowserView\n+import json\n+\n from plone.memoize import ram\n+from Products.Five.browser import BrowserView\n from zope.component import queryUtility\n from zope.i18n.interfaces import ITranslationDomain\n-import json\n \n \n def _cache_key(method, self, domain, language):\n-    return (domain, language,)\n+    return (\n+        domain,\n+        language,\n+    )\n \n \n class i18njs(BrowserView):\n-\n     @ram.cache(_cache_key)\n     def _gettext_catalog(self, domain, language):\n         td = queryUtility(ITranslationDomain, domain)\n         if td is None:\n             return\n         if language not in td._catalogs:\n-            baselanguage = language.split(\'-\')[0]\n+            baselanguage = language.split("-")[0]\n             if baselanguage not in td._catalogs:\n                 return\n             else:\n@@ -37,10 +40,10 @@ def __call__(self, domain=None, language=None):\n             catalog = {}\n         else:\n             if language is None:\n-                language = self.request[\'LANGUAGE\']\n+                language = self.request["LANGUAGE"]\n             catalog = self._gettext_catalog(domain, language)\n \n         response = self.request.response\n-        response.setHeader(\'Content-Type\', \'application/json; charset=utf-8\')\n+        response.setHeader("Content-Type", "application/json; charset=utf-8")\n         response.setBody(json.dumps(catalog))\n         return response\ndiff --git a/plone/app/content/browser/interfaces.py b/plone/app/content/browser/interfaces.py\nindex 42539f9..4cdfc35 100644\n--- a/plone/app/content/browser/interfaces.py\n+++ b/plone/app/content/browser/interfaces.py\n@@ -2,17 +2,13 @@\n \n \n class IFolderContentsView(Interface):\n-    """Interface, which provides methods for folder contens\n-    """\n+    """Interface, which provides methods for folder contens"""\n \n     def test(a, b, c):\n-        """A simple replacement of python\'s test.\n-        """\n+        """A simple replacement of python\'s test."""\n \n     def getAllowedTypes():\n-        """Returns allowed types for context.\n-        """\n+        """Returns allowed types for context."""\n \n     def title():\n-        """Returns the title for the template.\n-        """\n+        """Returns the title for the template."""\ndiff --git a/plone/app/content/browser/query.py b/plone/app/content/browser/query.py\nindex 117bf6a..144a4da 100644\n--- a/plone/app/content/browser/query.py\n+++ b/plone/app/content/browser/query.py\n@@ -1,16 +1,16 @@\n-from Products.Five import BrowserView\n+import json\n+\n from plone.app.querystring.interfaces import IQuerystringRegistryReader\n from plone.registry.interfaces import IRegistry\n+from Products.Five import BrowserView\n from zope.component import getUtility\n-import json\n \n \n class QueryStringIndexOptions(BrowserView):\n-\n     def __call__(self):\n         registry = getUtility(IRegistry)\n         config = IQuerystringRegistryReader(registry)()\n         self.request.response.setHeader(\n-            \'Content-Type\', \'application/json; charset=utf-8\'\n+            "Content-Type", "application/json; charset=utf-8"\n         )\n         return json.dumps(config)\ndiff --git a/plone/app/content/browser/reviewlist.py b/plone/app/content/browser/reviewlist.py\nindex 82a0947..d59d06d 100644\n--- a/plone/app/content/browser/reviewlist.py\n+++ b/plone/app/content/browser/reviewlist.py\n@@ -1,30 +1,27 @@\n+from urllib.parse import quote_plus\n+\n from Acquisition import aq_inner\n-from plone.app.content.browser.tableview import Table\n-from plone.app.content.browser.tableview import TableBrowserView\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import human_readable_size\n-from Products.CMFPlone.utils import isExpired\n-from Products.CMFPlone.utils import safe_unicode\n-from urllib.parse import quote_plus\n-from zope.component import getMultiAdapter\n-from zope.component import getUtility\n+from Products.CMFPlone.utils import human_readable_size, isExpired, safe_unicode\n+from zope.component import getMultiAdapter, getUtility\n from zope.i18n import translate\n from zope.publisher.browser import BrowserView\n \n+from plone.app.content.browser.tableview import Table, TableBrowserView\n \n-class FullReviewListView(BrowserView):\n \n+class FullReviewListView(BrowserView):\n     def revlist(self):\n-        portal_membership = getToolByName(self.context, \'portal_membership\')\n-        portal_workflow = getToolByName(self.context, \'portal_workflow\')\n+        portal_membership = getToolByName(self.context, "portal_membership")\n+        portal_workflow = getToolByName(self.context, "portal_workflow")\n         if portal_membership.isAnonymousUser():\n             return []\n \n         return portal_workflow.getWorklistsResults()\n \n     def url(self):\n-        return self.context.absolute_url() + \'/full_review_list\'\n+        return self.context.absolute_url() + "/full_review_list"\n \n     def review_table(self):\n         table = ReviewListTable(self.context, self.request)\n@@ -41,26 +38,23 @@ def __init__(self, context, request, **kwargs):\n         self.request = request\n \n         url = self.context.absolute_url()\n-        view_url = url + \'/full_review_list\'\n-        self.table = Table(request, url, view_url, self.items,\n-                           buttons=self.buttons)\n+        view_url = url + "/full_review_list"\n+        self.table = Table(request, url, view_url, self.items, buttons=self.buttons)\n \n     def render(self):\n         return self.table.render()\n \n     @property\n     def items(self):\n-        plone_utils = getToolByName(self.context, \'plone_utils\')\n-        portal_url = getToolByName(self.context, \'portal_url\')\n-        plone_view = getMultiAdapter((self.context, self.request),\n-                                     name=\'plone\')\n-        portal_workflow = getToolByName(self.context, \'portal_workflow\')\n-        portal_types = getToolByName(self.context, \'portal_types\')\n-        portal_membership = getToolByName(self.context, \'portal_membership\')\n+        plone_utils = getToolByName(self.context, "plone_utils")\n+        portal_url = getToolByName(self.context, "portal_url")\n+        plone_view = getMultiAdapter((self.context, self.request), name="plone")\n+        portal_workflow = getToolByName(self.context, "portal_workflow")\n+        portal_types = getToolByName(self.context, "portal_types")\n+        portal_membership = getToolByName(self.context, "portal_membership")\n \n         registry = getUtility(IRegistry)\n-        use_view_action = registry.get(\n-            \'plone.types_use_view_action_in_listings\', ())\n+        use_view_action = registry.get("plone.types_use_view_action_in_listings", ())\n \n         browser_default = plone_utils.browserDefault(self.context)\n \n@@ -77,66 +71,79 @@ def items(self):\n                 table_row_class = "odd"\n \n             url = obj.absolute_url()\n-            path = \'/\'.join(obj.getPhysicalPath())\n-            type_class = \'contenttype-\' + plone_utils.normalizeString(\n-                obj.portal_type)\n+            path = "/".join(obj.getPhysicalPath())\n+            type_class = "contenttype-" + plone_utils.normalizeString(obj.portal_type)\n \n-            review_state = portal_workflow.getInfoFor(obj, \'review_state\', \'\')\n+            review_state = portal_workflow.getInfoFor(obj, "review_state", "")\n \n-            state_class = \'state-\' + plone_utils.normalizeString(review_state)\n+            state_class = "state-" + plone_utils.normalizeString(review_state)\n             relative_url = portal_url.getRelativeContentURL(obj)\n \n             type_title_msgid = portal_types[obj.portal_type].Title()\n-            url_href_title = \'{}: {}\'.format(translate(type_title_msgid,\n-                                                    context=self.request),\n-                                          safe_unicode(obj.Description()))\n-            getMember = getToolByName(obj, \'portal_membership\').getMemberById\n+            url_href_title = "{}: {}".format(\n+                translate(type_title_msgid, context=self.request),\n+                safe_unicode(obj.Description()),\n+            )\n+            getMember = getToolByName(obj, "portal_membership").getMemberById\n             creator_id = obj.Creator()\n             creator = getMember(creator_id)\n             if creator:\n-                creator_name = creator.getProperty(\'fullname\', \'\') or creator_id\n+                creator_name = creator.getProperty("fullname", "") or creator_id\n             else:\n                 creator_name = creator_id\n-            modified = \'\'.join(map(safe_unicode, [\n-                creator_name, \' - \',\n-                plone_view.toLocalizedTime(obj.ModificationDate(),\n-                                           long_format=1)]))\n+            modified = "".join(\n+                map(\n+                    safe_unicode,\n+                    [\n+                        creator_name,\n+                        " - ",\n+                        plone_view.toLocalizedTime(\n+                            obj.ModificationDate(), long_format=1\n+                        ),\n+                    ],\n+                )\n+            )\n             is_structural_folder = obj.restrictedTraverse(\n-                \'@@plone\').isStructuralFolder()\n+                "@@plone"\n+            ).isStructuralFolder()\n \n             if obj.portal_type in use_view_action:\n-                view_url = url + \'/view\'\n+                view_url = url + "/view"\n             elif is_structural_folder:\n                 view_url = url + "/folder_contents"\n             else:\n                 view_url = url\n \n             is_browser_default = len(browser_default[1]) == 1 and (\n-                obj.id == browser_default[1][0])\n-\n-            results.append(dict(\n-                url=url,\n-                url_href_title=url_href_title,\n-                id=obj.getId(),\n-                quoted_id=quote_plus(obj.getId()),\n-                path=path,\n-                title_or_id=obj.pretty_title_or_id(),\n-                description=obj.Description(),\n-                obj_type=obj.Type,\n-                size=human_readable_size(obj.get_size()),\n-                modified=modified,\n-                type_class=type_class,\n-                wf_state=review_state,\n-                state_title=portal_workflow.getTitleForStateOnType(\n-                    review_state, obj.portal_type),\n-                state_class=state_class,\n-                is_browser_default=is_browser_default,\n-                folderish=is_structural_folder,\n-                relative_url=relative_url,\n-                view_url=view_url,\n-                table_row_class=table_row_class,\n-                is_expired=isExpired(obj)\n-            ))\n+                obj.id == browser_default[1][0]\n+            )\n+\n+            results.append(\n+                dict(\n+                    url=url,\n+                    url_href_title=url_href_title,\n+                    id=obj.getId(),\n+                    quoted_id=quote_plus(obj.getId()),\n+                    path=path,\n+                    title_or_id=obj.pretty_title_or_id(),\n+                    description=obj.Description(),\n+                    obj_type=obj.Type,\n+                    size=human_readable_size(obj.get_size()),\n+                    modified=modified,\n+                    type_class=type_class,\n+                    wf_state=review_state,\n+                    state_title=portal_workflow.getTitleForStateOnType(\n+                        review_state, obj.portal_type\n+                    ),\n+                    state_class=state_class,\n+                    is_browser_default=is_browser_default,\n+                    folderish=is_structural_folder,\n+                    relative_url=relative_url,\n+                    view_url=view_url,\n+                    table_row_class=table_row_class,\n+                    is_expired=isExpired(obj),\n+                )\n+            )\n         return results\n \n     @property\n@@ -145,31 +152,32 @@ def show_sort_column(self):\n \n     def buttons(self):\n         buttons = []\n-        portal_actions = getToolByName(self.context, \'portal_actions\')\n+        portal_actions = getToolByName(self.context, "portal_actions")\n         button_actions = portal_actions.listActionInfos(\n-            object=aq_inner(self.context), categories=(\'folder_buttons\', ))\n+            object=aq_inner(self.context), categories=("folder_buttons",)\n+        )\n \n         # Do not show buttons if there is no data, unless there is data to be\n         # pasted\n         if False:  # not len(self.batch):\n             if self.context.cb_dataValid():\n                 for button in button_actions:\n-                    if button[\'id\'] == \'paste\':\n+                    if button["id"] == "paste":\n                         return [self.setbuttonclass(button)]\n             else:\n                 return []\n \n         for button in button_actions:\n             # Make proper classes for our buttons\n-            if button[\'id\'] != \'paste\' or self.context.cb_dataValid():\n+            if button["id"] != "paste" or self.context.cb_dataValid():\n                 buttons.append(self.setbuttonclass(button))\n         return buttons\n \n     def setbuttonclass(self, button):\n-        if button[\'id\'] == \'paste\':\n-            button[\'cssclass\'] = \'btn btn-secondary\'\n+        if button["id"] == "paste":\n+            button["cssclass"] = "btn btn-secondary"\n         else:\n-            button[\'cssclass\'] = \'btn btn-primary\'\n+            button["cssclass"] = "btn btn-primary"\n         return button\n \n \ndiff --git a/plone/app/content/browser/selection.py b/plone/app/content/browser/selection.py\nindex 5d1dbe4..f25f1c9 100644\n--- a/plone/app/content/browser/selection.py\n+++ b/plone/app/content/browser/selection.py\n@@ -1,15 +1,13 @@\n from Acquisition import aq_inner\n-from zope.component import getUtility\n+from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n from Products.Five.browser import BrowserView\n from Products.statusmessages.interfaces import IStatusMessage\n-from plone.registry.interfaces import IRegistry\n-from zope.component import getMultiAdapter\n+from zope.component import getMultiAdapter, getUtility\n \n \n class DefaultViewSelectionView(BrowserView):\n-\n     def isValidTemplate(self, templateId):\n         return templateId in [a[0] for a in self.vocab]\n \n@@ -27,81 +25,78 @@ def selectedLayout(self):\n         if not self.context_state.is_default_page():\n             return self.context.getLayout()\n         else:\n-            return \'\'\n+            return ""\n \n     def selectViewTemplate(self):\n-        templateId = self.request.get(\'templateId\')\n+        templateId = self.request.get("templateId")\n \n         if self.isValidTemplate(templateId):\n             self.context.setLayout(templateId)\n \n-        self.request.response.redirect(self.context.absolute_url() + \'/view\')\n+        self.request.response.redirect(self.context.absolute_url() + "/view")\n \n     @property\n     def action_url(self):\n-        return \'{:s}/select_default_view\'.format(\n-            self.context_state.object_url())\n+        return "{:s}/select_default_view".format(self.context_state.object_url())\n \n     def __call__(self):\n \n         self.context_state = getMultiAdapter(\n-            (self.context, self.request), name=\'plone_context_state\')\n+            (self.context, self.request), name="plone_context_state"\n+        )\n \n-        templateId = self.request.form.get(\'templateId\', False)\n+        templateId = self.request.form.get("templateId", False)\n         if templateId:\n-            plone_utils = getToolByName(self.context, \'plone_utils\')\n+            plone_utils = getToolByName(self.context, "plone_utils")\n             # Make sure this is a valid template\n             if self.isValidTemplate(templateId):\n                 # Update the template\n                 self.context.setLayout(templateId)\n-                plone_utils.addPortalMessage(\'View changed.\')\n+                plone_utils.addPortalMessage("View changed.")\n             else:\n-                plone_utils.addPortalMessage(\'Invalid view.\', type="error")\n+                plone_utils.addPortalMessage("Invalid view.", type="error")\n                 return self.index()\n \n-        if templateId or self.request.form.get(\'form.buttons.Cancel\', False):\n+        if templateId or self.request.form.get("form.buttons.Cancel", False):\n             # Redirect to view\n-            self.request.response.redirect(\n-                \'%s/view\' % self.context_state.object_url())\n+            self.request.response.redirect("%s/view" % self.context_state.object_url())\n \n         return self.index()\n \n \n class DefaultPageSelectionView(BrowserView):\n-\n     def __call__(self):\n-        if \'form.buttons.Save\' in self.request.form:\n-            if \'objectId\' not in self.request.form:\n-                message = _(\'Please select an item to use.\')\n-                msgtype = \'error\'\n+        if "form.buttons.Save" in self.request.form:\n+            if "objectId" not in self.request.form:\n+                message = _("Please select an item to use.")\n+                msgtype = "error"\n             else:\n-                objectId = self.request.form[\'objectId\']\n+                objectId = self.request.form["objectId"]\n \n                 if objectId not in self.context.objectIds():\n-                    message = _(\'There is no object with short name ${name} \'\n-                                \'in this folder.\',\n-                                mapping={\'name\': objectId})\n-                    msgtype = \'error\'\n+                    message = _(\n+                        "There is no object with short name ${name} " "in this folder.",\n+                        mapping={"name": objectId},\n+                    )\n+                    msgtype = "error"\n                 else:\n                     self.context.setDefaultPage(objectId)\n-                    message = _(\'View changed.\')\n-                    msgtype = \'info\'\n+                    message = _("View changed.")\n+                    msgtype = "info"\n                     self.request.response.redirect(self.context.absolute_url())\n             IStatusMessage(self.request).add(message, msgtype)\n-        elif \'form.buttons.Cancel\' in self.request.form:\n+        elif "form.buttons.Cancel" in self.request.form:\n             self.request.response.redirect(self.context.absolute_url())\n \n         return self.index()\n \n     def get_selectable_items(self):\n-        """ Return brains in this container that can be used as default_pages\n-        """\n+        """Return brains in this container that can be used as default_pages"""\n         context = aq_inner(self.context)\n         registry = getUtility(IRegistry)\n-        view_types = registry.get(\n-            \'plone.types_use_view_action_in_listings\', [])\n-        default_page_types = registry.get(\'plone.default_page_types\', [])\n-        portal_types = getToolByName(self.context, \'portal_types\')\n+        view_types = registry.get("plone.types_use_view_action_in_listings", [])\n+        default_page_types = registry.get("plone.default_page_types", [])\n+        portal_types = getToolByName(self.context, "portal_types")\n \n         results = []\n         for brain in context.getFolderContents():\n@@ -119,8 +114,11 @@ def get_selectable_items(self):\n                 fti = portal_types.get(portal_type)\n                 if not fti:\n                     continue\n-                if fti.filter_content_types and fti.allowed_content_types or \\\n-                        not fti.filter_content_types:\n+                if (\n+                    fti.filter_content_types\n+                    and fti.allowed_content_types\n+                    or not fti.filter_content_types\n+                ):\n                     # Disallow folderish types if you can\'t add any content.\n                     # To override you have to add type to default_page_types\n                     continue\ndiff --git a/plone/app/content/browser/tableview.py b/plone/app/content/browser/tableview.py\nindex a5c70ab..7efb6f9 100644\n--- a/plone/app/content/browser/tableview.py\n+++ b/plone/app/content/browser/tableview.py\n@@ -1,23 +1,24 @@\n+from urllib.parse import quote_plus\n+\n from plone.batching import Batch\n from plone.batching.browser import BatchView\n from plone.memoize import instance\n from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from urllib.parse import quote_plus\n from zope.i18nmessageid import MessageFactory\n from zope.publisher.browser import BrowserView\n from ZTUtils import make_query\n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\n \n \n class TableBatchView(BatchView):\n-\n     def make_link(self, pagenumber):\n         batchlinkparams = self.request.form.copy()\n-        return \'{}?{}\'.format(self.request.ACTUAL_URL,\n-                          make_query(batchlinkparams,\n-                                     {\'pagenumber\': pagenumber}))\n+        return "{}?{}".format(\n+            self.request.ACTUAL_URL,\n+            make_query(batchlinkparams, {"pagenumber": pagenumber}),\n+        )\n \n \n class Table:\n@@ -28,10 +29,20 @@ class Table:\n     info.\n     """\n \n-    def __init__(self, request, base_url, view_url, items,\n-                 show_sort_column=False, buttons=None, pagesize=20,\n-                 show_select_column=True, show_size_column=True,\n-                 show_modified_column=True, show_status_column=True):\n+    def __init__(\n+        self,\n+        request,\n+        base_url,\n+        view_url,\n+        items,\n+        show_sort_column=False,\n+        buttons=None,\n+        pagesize=20,\n+        show_select_column=True,\n+        show_size_column=True,\n+        show_modified_column=True,\n+        show_status_column=True,\n+    ):\n         if buttons is None:\n             buttons = []\n         self.request = request\n@@ -49,22 +60,29 @@ def __init__(self, request, base_url, view_url, items,\n         self.buttons = buttons\n         self.default_page_size = 20\n         self.pagesize = pagesize\n-        self.show_all = request.get(\'show_all\', \'\').lower() == \'true\'\n+        self.show_all = request.get("show_all", "").lower() == "true"\n \n-        selection = request.get(\'select\')\n-        if selection == \'screen\':\n+        selection = request.get("select")\n+        if selection == "screen":\n             self.selectcurrentbatch = True\n-        elif selection == \'all\':\n+        elif selection == "all":\n             self.selectall = True\n \n-        self.pagenumber = int(request.get(\'pagenumber\', 1))\n+        self.pagenumber = int(request.get("pagenumber", 1))\n \n     def msg_select_item(self, item):\n-        title_or_id = (item.get(\'title_or_id\') or item.get(\'title\') or\n-                       item.get(\'Title\') or item.get(\'id\') or item[\'getId\'])\n-        return _(\'checkbox_select_item\',\n-                 default="Select ${title}",\n-                 mapping={\'title\': safe_unicode(title_or_id)})\n+        title_or_id = (\n+            item.get("title_or_id")\n+            or item.get("title")\n+            or item.get("Title")\n+            or item.get("id")\n+            or item["getId"]\n+        )\n+        return _(\n+            "checkbox_select_item",\n+            default="Select ${title}",\n+            mapping={"title": safe_unicode(title_or_id)},\n+        )\n \n     @property\n     def within_batch_size(self):\n@@ -72,10 +90,10 @@ def within_batch_size(self):\n \n     def set_checked(self, item):\n         selected = self.selected(item)\n-        item[\'checked\'] = selected and \'checked\' or None\n-        item[\'table_row_class\'] = item.get(\'table_row_class\', \'\')\n+        item["checked"] = selected and "checked" or None\n+        item["table_row_class"] = item.get("table_row_class", "")\n         if selected:\n-            item[\'table_row_class\'] += \' selected\'\n+            item["table_row_class"] += " selected"\n \n     @property\n     @instance.memoize\n@@ -83,9 +101,9 @@ def batch(self):\n         pagesize = self.pagesize\n         if self.show_all:\n             pagesize = len(self.items)\n-        b = Batch.fromPagenumber(self.items,\n-                                 pagesize=pagesize,\n-                                 pagenumber=self.pagenumber)\n+        b = Batch.fromPagenumber(\n+            self.items, pagesize=pagesize, pagenumber=self.pagenumber\n+        )\n         list(map(self.set_checked, b))\n         return b\n \n@@ -103,12 +121,14 @@ def _get_select_currentbatch(self):\n \n     def _set_select_currentbatch(self, value):\n         self._selectcurrentbatch = value\n-        if self._selectcurrentbatch and self.show_all or (\n-                len(self.items) <= self.pagesize):\n+        if (\n+            self._selectcurrentbatch\n+            and self.show_all\n+            or (len(self.items) <= self.pagesize)\n+        ):\n             self.selectall = True\n \n-    selectcurrentbatch = property(_get_select_currentbatch,\n-                                  _set_select_currentbatch)\n+    selectcurrentbatch = property(_get_select_currentbatch, _set_select_currentbatch)\n \n     def _get_select_all(self):\n         return self._select_all\n@@ -125,29 +145,29 @@ def show_select_all_items(self):\n         return self.selectcurrentbatch and not self.selectall\n \n     def get_nosort_class(self):\n-        """\n-        """\n+        """ """\n         return "nosort"\n \n     @property\n     def selectall_url(self):\n-        return self.selectnone_url + \'&select=all\'\n+        return self.selectnone_url + "&select=all"\n \n     @property\n     def selectscreen_url(self):\n-        return self.selectnone_url + \'&select=screen\'\n+        return self.selectnone_url + "&select=screen"\n \n     @property\n     def selectnone_url(self):\n-        base = self.view_url + \'?pagenumber={}&pagesize={}\'.format(\n-            self.pagenumber, self.pagesize)\n+        base = self.view_url + "?pagenumber={}&pagesize={}".format(\n+            self.pagenumber, self.pagesize\n+        )\n         if self.show_all:\n-            base += \'&show_all=true\'\n+            base += "&show_all=true"\n         return base\n \n     @property\n     def show_all_url(self):\n-        return self.view_url + \'?show_all=true\'\n+        return self.view_url + "?show_all=true"\n \n     def selected(self, item):\n         if self.selectcurrentbatch:\n@@ -156,24 +176,26 @@ def selected(self, item):\n \n     @property\n     def viewname(self):\n-        return self.view_url.split(\'?\')[0].split(\'/\')[-1]\n+        return self.view_url.split("?")[0].split("/")[-1]\n \n     def quote_plus(self, string):\n         return quote_plus(string)\n \n \n class TableBrowserView(BrowserView):\n-    \'\'\'Base class which can be used from a AJAX view\n+    """Base class which can be used from a AJAX view\n \n     Subclasses only need to set the table property to a different\n-    class.\'\'\'\n+    class."""\n \n     table = None\n \n-    def update_table(self, pagenumber=\'1\', sort_on=\'getObjPositionInParent\',\n-                     show_all=False):\n-        self.request.set(\'sort_on\', sort_on)\n-        self.request.set(\'pagenumber\', pagenumber)\n-        table = self.table(self.context, self.request,\n-                           contentFilter={\'sort_on\': sort_on})\n+    def update_table(\n+        self, pagenumber="1", sort_on="getObjPositionInParent", show_all=False\n+    ):\n+        self.request.set("sort_on", sort_on)\n+        self.request.set("pagenumber", pagenumber)\n+        table = self.table(\n+            self.context, self.request, contentFilter={"sort_on": sort_on}\n+        )\n         return table.render()\ndiff --git a/plone/app/content/browser/vocabulary.py b/plone/app/content/browser/vocabulary.py\nindex 1ec75b1..b559e31 100644\n--- a/plone/app/content/browser/vocabulary.py\n+++ b/plone/app/content/browser/vocabulary.py\n@@ -1,8 +1,10 @@\n+import inspect\n+import itertools\n+from logging import getLogger\n+from types import FunctionType\n+\n from AccessControl import getSecurityManager\n from Acquisition import aq_base\n-from logging import getLogger\n-from plone.app.content.utils import json_dumps\n-from plone.app.content.utils import json_loads\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.layout.navigation.root import getNavigationRoot\n from plone.app.querystring import queryparser\n@@ -14,105 +16,97 @@\n from Products.CMFPlone import PloneMessageFactory as _\n from Products.CMFPlone.utils import safe_unicode\n from Products.Five import BrowserView\n-from Products.MimetypesRegistry.MimeTypeItem import guess_icon_path\n-from Products.MimetypesRegistry.MimeTypeItem import PREFIX\n+from Products.MimetypesRegistry.MimeTypeItem import PREFIX, guess_icon_path\n from Products.PortalTransforms.transforms.safe_html import SafeHTML\n-from types import FunctionType\n-from z3c.form.interfaces import IAddForm\n-from z3c.form.interfaces import ISubForm\n-from zope.component import getUtility\n-from zope.component import queryAdapter\n-from zope.component import queryUtility\n+from z3c.form.interfaces import IAddForm, ISubForm\n+from zope.component import getUtility, queryAdapter, queryUtility\n from zope.deprecation import deprecated\n from zope.i18n import translate\n-from zope.schema.interfaces import ICollection\n-from zope.schema.interfaces import IVocabularyFactory\n+from zope.schema.interfaces import ICollection, IVocabularyFactory\n from zope.security.interfaces import IPermission\n \n-import inspect\n-import itertools\n-\n+from plone.app.content.utils import json_dumps, json_loads\n \n logger = getLogger(__name__)\n \n MAX_BATCH_SIZE = 500  # prevent overloading server\n \n-DEFAULT_PERMISSION = \'View\'\n-DEFAULT_PERMISSION_SECURE = \'Modify portal content\'\n+DEFAULT_PERMISSION = "View"\n+DEFAULT_PERMISSION_SECURE = "Modify portal content"\n PERMISSIONS = {\n-    \'plone.app.vocabularies.Catalog\': \'View\',\n-    \'plone.app.vocabularies.Keywords\': \'Modify portal content\',\n-    \'plone.app.vocabularies.SyndicatableFeedItems\': \'Modify portal content\',\n-    \'plone.app.vocabularies.Users\': \'Modify portal content\',\n-    \'plone.app.multilingual.RootCatalog\': \'View\',\n+    "plone.app.vocabularies.Catalog": "View",\n+    "plone.app.vocabularies.Keywords": "Modify portal content",\n+    "plone.app.vocabularies.SyndicatableFeedItems": "Modify portal content",\n+    "plone.app.vocabularies.Users": "Modify portal content",\n+    "plone.app.multilingual.RootCatalog": "View",\n }\n TRANSLATED_IGNORED = [\n-    \'author_name\',\n-    \'cmf_uid\',\n-    \'commentators\',\n-    \'created\',\n-    \'CreationDate\',\n-    \'Creator\',\n-    \'Date\',\n-    \'Description\',\n-    \'effective\',\n-    \'EffectiveDate\',\n-    \'end\',\n-    \'exclude_from_nav\',\n-    \'ExpirationDate\',\n-    \'expires\',\n-    \'getIcon\',\n-    \'getMimeIcon\',\n-    \'getId\',\n-    \'getObjSize\',\n-    \'getRemoteUrl\',\n-    \'getURL\',\n-    \'id\',\n-    \'in_response_to\',\n-    \'is_folderish\',\n-    \'last_comment_date\',\n-    \'listCreators\',\n-    \'location\',\n-    \'meta_type\',\n-    \'ModificationDate\',\n-    \'modified\',\n-    \'path\',\n-    \'portal_type\',\n-    \'review_state\',\n-    \'start\',\n-    \'Subject\',\n-    \'sync_uid\',\n-    \'Title\',\n-    \'total_comments\'\n-    \'UID\',\n+    "author_name",\n+    "cmf_uid",\n+    "commentators",\n+    "created",\n+    "CreationDate",\n+    "Creator",\n+    "Date",\n+    "Description",\n+    "effective",\n+    "EffectiveDate",\n+    "end",\n+    "exclude_from_nav",\n+    "ExpirationDate",\n+    "expires",\n+    "getIcon",\n+    "getMimeIcon",\n+    "getId",\n+    "getObjSize",\n+    "getRemoteUrl",\n+    "getURL",\n+    "id",\n+    "in_response_to",\n+    "is_folderish",\n+    "last_comment_date",\n+    "listCreators",\n+    "location",\n+    "meta_type",\n+    "ModificationDate",\n+    "modified",\n+    "path",\n+    "portal_type",\n+    "review_state",\n+    "start",\n+    "Subject",\n+    "sync_uid",\n+    "Title",\n+    "total_comments" "UID",\n ]\n \n _permissions = PERMISSIONS\n-deprecated(\'_permissions\', \'Use PERMISSIONS variable instead.\')\n+deprecated("_permissions", "Use PERMISSIONS variable instead.")\n \n \n def _parseJSON(s):\n     # XXX this should be changed to a try loads except return s\n     if isinstance(s, str):\n         s = s.strip()\n-        if (s.startswith(\'{\') and s.endswith(\'}\')) or \\\n-                (s.startswith(\'[\') and s.endswith(\']\')):  # detect if json\n+        if (s.startswith("{") and s.endswith("}")) or (\n+            s.startswith("[") and s.endswith("]")\n+        ):  # detect if json\n             return json_loads(s)\n     return s\n \n \n _unsafe_metadata = [\n-    \'author_name\',\n-    \'commentors\',\n-    \'Creator\',\n-    \'listCreators\',\n+    "author_name",\n+    "commentors",\n+    "Creator",\n+    "listCreators",\n ]\n _safe_callable_metadata = [\n-    \'getIcon\',\n-    \'getPath\',\n-    \'getURL\',\n-    \'is_folderish\',\n-    \'review_state\',\n+    "getIcon",\n+    "getPath",\n+    "getURL",\n+    "is_folderish",\n+    "review_state",\n ]\n \n \n@@ -121,7 +115,6 @@ class VocabLookupException(Exception):\n \n \n class BaseVocabularyView(BrowserView):\n-\n     def get_translated_ignored(self):\n         return TRANSLATED_IGNORED\n \n@@ -148,22 +141,22 @@ def __call__(self):\n         """\n         context = self.get_context()\n         self.request.response.setHeader(\n-            \'Content-Type\', \'application/json; charset=utf-8\'\n+            "Content-Type", "application/json; charset=utf-8"\n         )\n \n         try:\n             vocabulary = self.get_vocabulary()\n         except VocabLookupException as e:\n-            return json_dumps({\'error\': e.args[0]})\n+            return json_dumps({"error": e.args[0]})\n \n         results_are_brains = False\n-        if hasattr(vocabulary, \'search_catalog\'):\n+        if hasattr(vocabulary, "search_catalog"):\n             query = self.parsed_query()\n             results = vocabulary.search_catalog(query)\n             results_are_brains = True\n-        elif hasattr(vocabulary, \'search\'):\n+        elif hasattr(vocabulary, "search"):\n             try:\n-                query = self.parsed_query()[\'SearchableText\'][\'query\']\n+                query = self.parsed_query()["SearchableText"]["query"]\n             except KeyError:\n                 results = iter(vocabulary)\n             else:\n@@ -180,15 +173,15 @@ def __call__(self):\n             total = 0\n \n         # get batch\n-        batch = _parseJSON(self.request.get(\'batch\', \'\'))\n-        if batch and (\'size\' not in batch or \'page\' not in batch):\n+        batch = _parseJSON(self.request.get("batch", ""))\n+        if batch and ("size" not in batch or "page" not in batch):\n             batch = None  # batching not providing correct options\n         if batch:\n             # must be slicable for batching support\n-            page = int(batch[\'page\'])\n-            size = int(batch[\'size\'])\n+            page = int(batch["page"])\n+            size = int(batch["size"])\n             if size > MAX_BATCH_SIZE:\n-                raise Exception(\'Max batch size is 500\')\n+                raise Exception("Max batch size is 500")\n             # page is being passed in is 1-based\n             start = (max(page - 1, 0)) * size\n             end = start + size\n@@ -205,9 +198,9 @@ def __call__(self):\n         # build result items\n         items = []\n \n-        attributes = _parseJSON(self.request.get(\'attributes\', \'\'))\n+        attributes = _parseJSON(self.request.get("attributes", ""))\n         if isinstance(attributes, str) and attributes:\n-            attributes = attributes.split(\',\')\n+            attributes = attributes.split(",")\n \n         translate_ignored = self.get_translated_ignored()\n         transform = SafeHTML()\n@@ -215,49 +208,42 @@ def __call__(self):\n             base_path = self.get_base_path(context)\n             sm = getSecurityManager()\n             can_edit = sm.checkPermission(DEFAULT_PERMISSION_SECURE, context)\n-            mtt = getToolByName(self.context, \'mimetypes_registry\')\n+            mtt = getToolByName(self.context, "mimetypes_registry")\n             for vocab_item in results:\n                 if not results_are_brains:\n                     vocab_item = vocab_item.value\n                 item = {}\n                 for attr in attributes:\n                     key = attr\n-                    if \':\' in attr:\n-                        key, attr = attr.split(\':\', 1)\n+                    if ":" in attr:\n+                        key, attr = attr.split(":", 1)\n                     if attr in _unsafe_metadata and not can_edit:\n                         continue\n-                    if key == \'path\':\n-                        attr = \'getPath\'\n+                    if key == "path":\n+                        attr = "getPath"\n                     val = getattr(vocab_item, attr, None)\n                     if callable(val):\n                         if attr in _safe_callable_metadata:\n                             val = val()\n                         else:\n                             continue\n-                    if key == \'path\':\n-                        val = val[len(base_path):]\n-                    if (\n-                        key not in translate_ignored and\n-                        isinstance(val, str)\n-                    ):\n-                        val = translate(\n-                            _(safe_unicode(val)),\n-                            context=self.request\n-                        )\n+                    if key == "path":\n+                        val = val[len(base_path) :]\n+                    if key not in translate_ignored and isinstance(val, str):\n+                        val = translate(_(safe_unicode(val)), context=self.request)\n                     if isinstance(val, (bytes, str)):\n                         val = transform.scrub_html(val)\n                     item[key] = val\n-                    if key == \'getMimeIcon\':\n+                    if key == "getMimeIcon":\n                         item[key] = None\n                         # get mime type icon url from mimetype registry\'\n-                        contenttype = aq_base(\n-                            getattr(vocab_item, \'mime_type\', None))\n+                        contenttype = aq_base(getattr(vocab_item, "mime_type", None))\n                         if contenttype:\n                             ctype = mtt.lookup(contenttype)\n                             if ctype:\n-                                item[key] = \'/\'.join([\n-                                    base_path,\n-                                    guess_icon_path(ctype[0])])\n+                                item[key] = "/".join(\n+                                    [base_path, guess_icon_path(ctype[0])]\n+                                )\n                             else:\n                                 item[key] = "/".join(\n                                     [\n@@ -268,28 +254,31 @@ def __call__(self):\n                                 )\n                 items.append(item)\n         else:\n-            items = [{\'id\': transform.scrub_html(item.value),\n-                      \'text\': transform.scrub_html(item.title) if item.title else ""} for item in results]\n+            items = [\n+                {\n+                    "id": transform.scrub_html(item.value),\n+                    "text": transform.scrub_html(item.title) if item.title else "",\n+                }\n+                for item in results\n+            ]\n \n         if total == 0:\n             total = len(items)\n \n-        return json_dumps({\n-            \'results\': items,\n-            \'total\': total\n-        })\n+        return json_dumps({"results": items, "total": total})\n \n-    def parsed_query(self, ):\n-        query = _parseJSON(self.request.get(\'query\', \'\'))\n+    def parsed_query(\n+        self,\n+    ):\n+        query = _parseJSON(self.request.get("query", ""))\n         if isinstance(query, str):\n-            query = {\'SearchableText\': {\'query\': query}}\n+            query = {"SearchableText": {"query": query}}\n         elif query:\n-            parsed = queryparser.parseFormquery(\n-                self.get_context(), query[\'criteria\'])\n-            if \'sort_on\' in query:\n-                parsed[\'sort_on\'] = query[\'sort_on\']\n-            if \'sort_order\' in query:\n-                parsed[\'sort_order\'] = str(query[\'sort_order\'])\n+            parsed = queryparser.parseFormquery(self.get_context(), query["criteria"])\n+            if "sort_on" in query:\n+                parsed["sort_on"] = query["sort_on"]\n+            if "sort_order" in query:\n+                parsed["sort_order"] = str(query["sort_order"])\n             query = parsed\n         else:\n             query = {}\n@@ -306,47 +295,39 @@ def get_vocabulary(self):\n         # Look up named vocabulary and check permission.\n \n         context = self.context\n-        factory_name = self.request.get(\'name\', None)\n-        field_name = self.request.get(\'field\', None)\n+        factory_name = self.request.get("name", None)\n+        field_name = self.request.get("field", None)\n         if not factory_name:\n-            raise VocabLookupException(\'No factory provided.\')\n+            raise VocabLookupException("No factory provided.")\n         authorized = None\n         sm = getSecurityManager()\n-        if (\n-            factory_name not in PERMISSIONS\n-            or not INavigationRoot.providedBy(context)\n-        ):\n+        if factory_name not in PERMISSIONS or not INavigationRoot.providedBy(context):\n             # Check field specific permission\n             if field_name:\n-                permission_checker = queryAdapter(\n-                    context,\n-                    IFieldPermissionChecker\n-                )\n+                permission_checker = queryAdapter(context, IFieldPermissionChecker)\n                 if permission_checker is not None:\n-                    authorized = permission_checker.validate(\n-                        field_name,\n-                        factory_name\n-                    )\n+                    authorized = permission_checker.validate(field_name, factory_name)\n                 elif sm.checkPermission(\n-                    PERMISSIONS.get(factory_name, DEFAULT_PERMISSION),\n-                    context\n+                    PERMISSIONS.get(factory_name, DEFAULT_PERMISSION), context\n                 ):\n                     # If no checker, fall back to checking the global registry\n                     authorized = True\n \n             if not authorized:\n-                raise VocabLookupException(\'Vocabulary lookup not allowed\')\n+                raise VocabLookupException("Vocabulary lookup not allowed")\n \n         # Short circuit if we are on the site root and permission is\n         # in global registry\n         elif not sm.checkPermission(\n-                PERMISSIONS.get(factory_name, DEFAULT_PERMISSION), context):\n-            raise VocabLookupException(\'Vocabulary lookup not allowed\')\n+            PERMISSIONS.get(factory_name, DEFAULT_PERMISSION), context\n+        ):\n+            raise VocabLookupException("Vocabulary lookup not allowed")\n \n         factory = queryUtility(IVocabularyFactory, factory_name)\n         if not factory:\n             raise VocabLookupException(\n-                \'No factory with name "%s" exists.\' % factory_name)\n+                \'No factory with name "%s" exists.\' % factory_name\n+            )\n \n         # This part is for backwards-compatibility with the first\n         # generation of vocabularies created for plone.app.widgets,\n@@ -356,8 +337,8 @@ def get_vocabulary(self):\n             factory_spec = inspect.getfullargspec(factory)\n         else:\n             factory_spec = inspect.getfullargspec(factory.__call__)\n-        query = _parseJSON(self.request.get(\'query\', \'\'))\n-        if query and \'query\' in factory_spec.args:\n+        query = _parseJSON(self.request.get("query", ""))\n+        if query and "query" in factory_spec.args:\n             vocabulary = factory(context, query=query)\n         else:\n             # This is what is reached for non-legacy vocabularies.\n@@ -394,10 +375,9 @@ def get_vocabulary(self):\n         if permission is None:\n             permission = getUtility(IPermission, name=self.default_permission)\n         if not getSecurityManager().checkPermission(\n-            permission.title,\n-            self.get_context()\n+            permission.title, self.get_context()\n         ):\n-            raise VocabLookupException(\'Vocabulary lookup not allowed.\')\n+            raise VocabLookupException("Vocabulary lookup not allowed.")\n \n         if ICollection.providedBy(field):\n             return field.value_type.vocabulary\ndiff --git a/plone/app/content/catalog.py b/plone/app/content/catalog.py\nindex 003ff52..b6c452b 100644\n--- a/plone/app/content/catalog.py\n+++ b/plone/app/content/catalog.py\n@@ -1,6 +1,5 @@\n def reindexOnModify(content, event):\n-    """When an object is modified, re-index it in the catalog\n-    """\n+    """When an object is modified, re-index it in the catalog"""\n     if event.object is not content:\n         return\n-    content.reindexObject(idxs=getattr(event, \'descriptions\', []))\n+    content.reindexObject(idxs=getattr(event, "descriptions", []))\ndiff --git a/plone/app/content/container.py b/plone/app/content/container.py\nindex 770e34b..f117451 100644\n--- a/plone/app/content/container.py\n+++ b/plone/app/content/container.py\n@@ -2,11 +2,12 @@\n from Products.CMFCore.PortalContent import PortalContent\n from Products.CMFCore.PortalFolder import PortalFolderBase\n from Products.CMFPlone.DublinCore import DefaultDublinCoreImpl\n-from plone.app.content.interfaces import IReindexOnModify\n from zope.container.contained import Contained\n from zope.container.interfaces import IContainer\n from zope.interface import implementer\n \n+from plone.app.content.interfaces import IReindexOnModify\n+\n \n @implementer(IContainer)\n class OFSContainer:\n@@ -20,6 +21,7 @@ class OFSContainer:\n     def __init__(self, id=None):\n         if id is not None:\n             self.id = id\n+\n     # fulfill IContainer interface\n \n     def keys(self):\n@@ -33,6 +35,7 @@ def items(self):\n \n     def get(self, name, default=None):\n         return getattr(self, name, default)\n+\n     # __getitem__ is already implemented by ObjectManager\n \n     def __setitem__(self, name, obj):\n@@ -50,6 +53,7 @@ def __iter__(self):\n     def __len__(self):\n         return len(self.objectIds())\n \n+\n # Notes on this insane mixing of classes:\n #\n #  - OFSContainer gives us Zope3-like container operations, and we want that\n@@ -67,8 +71,14 @@ def __len__(self):\n \n \n @implementer(IReindexOnModify)\n-class Container(OFSContainer, CMFCatalogAware, PortalFolderBase, PortalContent,\n-                DefaultDublinCoreImpl, Contained):\n+class Container(\n+    OFSContainer,\n+    CMFCatalogAware,\n+    PortalFolderBase,\n+    PortalContent,\n+    DefaultDublinCoreImpl,\n+    Contained,\n+):\n     """A base class mixing in CMFish, contentish, containerish, containedish,\n     dublincoreish behaviour.\n     """\ndiff --git a/plone/app/content/interfaces.py b/plone/app/content/interfaces.py\nindex 8dc13cf..74ce508 100644\n--- a/plone/app/content/interfaces.py\n+++ b/plone/app/content/interfaces.py\n@@ -1,15 +1,14 @@\n from zope import schema\n-from zope.interface import Interface, Attribute\n+from zope.interface import Attribute, Interface\n \n \n class INameFromTitle(Interface):\n-    """An object that supports gettings it name from its title.\n-    """\n+    """An object that supports gettings it name from its title."""\n \n     title = schema.TextLine(\n         title="Title",\n         description="A title, which will be converted to a name",\n-        required=True\n+        required=True,\n     )\n \n \ndiff --git a/plone/app/content/item.py b/plone/app/content/item.py\nindex b900450..9e872c5 100644\n--- a/plone/app/content/item.py\n+++ b/plone/app/content/item.py\n@@ -1,14 +1,14 @@\n from Products.CMFCore.PortalContent import PortalContent\n from Products.CMFPlone.DublinCore import DefaultDublinCoreImpl\n-from plone.app.content.interfaces import IReindexOnModify\n from zope.container.contained import Contained\n from zope.interface import implementer\n \n+from plone.app.content.interfaces import IReindexOnModify\n+\n \n @implementer(IReindexOnModify)\n class Item(PortalContent, DefaultDublinCoreImpl, Contained):\n-    """A non-containerish, CMFish item\n-    """\n+    """A non-containerish, CMFish item"""\n \n     def __init__(self, id=None, **kwargs):\n         DefaultDublinCoreImpl.__init__(self, **kwargs)\ndiff --git a/plone/app/content/namechooser.py b/plone/app/content/namechooser.py\nindex 875de29..62c9ebb 100644\n--- a/plone/app/content/namechooser.py\n+++ b/plone/app/content/namechooser.py\n@@ -1,15 +1,13 @@\n-from Acquisition import aq_base\n-from Acquisition import aq_inner\n-from plone.app.content.interfaces import INameFromTitle\n+import time\n+\n+from Acquisition import aq_base, aq_inner\n from plone.i18n.normalizer import FILENAME_REGEX\n-from plone.i18n.normalizer.interfaces import IURLNormalizer\n-from plone.i18n.normalizer.interfaces import IUserPreferredURLNormalizer\n+from plone.i18n.normalizer.interfaces import IURLNormalizer, IUserPreferredURLNormalizer\n from zope.component import getUtility\n from zope.container.interfaces import INameChooser\n from zope.interface import implementer\n \n-import time\n-\n+from plone.app.content.interfaces import INameFromTitle\n \n ATTEMPTS = 100\n \n@@ -35,17 +33,17 @@ def chooseName(self, name, obj):\n             if nameFromTitle is not None:\n                 name = nameFromTitle.title\n             if not name:\n-                name = getattr(aq_base(obj), \'id\', None)\n+                name = getattr(aq_base(obj), "id", None)\n             if not name:\n-                name = getattr(aq_base(obj), \'portal_type\', None)\n+                name = getattr(aq_base(obj), "portal_type", None)\n             if not name:\n                 name = obj.__class__.__name__\n \n         if not isinstance(name, str):\n-            name = str(name, \'utf-8\')\n-            #name = name.encode(\'utf-8\')\n+            name = str(name, "utf-8")\n+            # name = name.encode(\'utf-8\')\n \n-        request = getattr(obj.__of__(container), \'REQUEST\', None)\n+        request = getattr(obj.__of__(container), "REQUEST", None)\n         if request is not None:\n             name = IUserPreferredURLNormalizer(request).normalize(name)\n         else:\n@@ -63,11 +61,11 @@ def _findUniqueName(self, name, obj):\n         if not check_id(name, required=1):\n             return name\n \n-        ext = \'\'\n+        ext = ""\n         m = FILENAME_REGEX.match(name)\n         if m is not None:\n             name = m.groups()[0]\n-            ext = \'.\' + m.groups()[1]\n+            ext = "." + m.groups()[1]\n \n         idx = 1\n         while idx <= ATTEMPTS:\n@@ -82,31 +80,26 @@ def _findUniqueName(self, name, obj):\n             return new_name\n \n         raise ValueError(\n-            "Cannot find a unique name based on %s after %d attemps." % (\n+            "Cannot find a unique name based on %s after %d attemps."\n+            % (\n                 name,\n                 ATTEMPTS,\n             )\n         )\n \n     def _getCheckId(self, obj):\n-        """Return a function that can act as the check_id script.\n-        """\n+        """Return a function that can act as the check_id script."""\n         parent = aq_inner(self.context)\n         # Check for a method or a skin script, like\n         # Products/CMFPlone/skins/plone_scripts/check_id.py until Plone 5.1.\n-        _check_id = getattr(obj, \'check_id\', None)\n+        _check_id = getattr(obj, "check_id", None)\n \n         def do_Plone_check(newid, required):\n             if _check_id is not None:\n-                return _check_id(\n-                    newid,\n-                    required=required,\n-                    contained_by=parent\n-                )\n+                return _check_id(newid, required=required, contained_by=parent)\n \n             from Products.CMFPlone.utils import check_id\n \n-            return check_id(\n-                obj, newid, required=required, contained_by=parent)\n+            return check_id(obj, newid, required=required, contained_by=parent)\n \n         return do_Plone_check\ndiff --git a/plone/app/content/testing.py b/plone/app/content/testing.py\nindex 7e87b0c..bac42ae 100644\n--- a/plone/app/content/testing.py\n+++ b/plone/app/content/testing.py\n@@ -1,73 +1,73 @@\n+import doctest\n+\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n-from plone.app.testing import applyProfile\n-from plone.app.testing import FunctionalTesting\n-from plone.app.testing import IntegrationTesting\n-from plone.app.testing import PLONE_FIXTURE\n-from plone.app.testing import PloneSandboxLayer\n+from plone.app.testing import (\n+    PLONE_FIXTURE,\n+    FunctionalTesting,\n+    IntegrationTesting,\n+    PloneSandboxLayer,\n+    applyProfile,\n+)\n from Products.CMFCore.utils import getToolByName\n from zope.configuration import xmlconfig\n-from zope.interface import implementer\n-from zope.interface import provider\n+from zope.interface import implementer, provider\n from zope.schema.interfaces import IVocabularyFactory\n-from zope.schema.vocabulary import SimpleTerm\n-from zope.schema.vocabulary import SimpleVocabulary\n-\n-import doctest\n+from zope.schema.vocabulary import SimpleTerm, SimpleVocabulary\n \n \n @implementer(IVocabularyFactory)\n class ExampleVocabulary:\n-\n     def __call__(self, context, query=None):\n-        items = [\'One\', \'Two\', \'Three\']\n-        tmp = SimpleVocabulary([\n-            SimpleTerm(it.lower(), it.lower(), it)\n-            for it in items\n-            if query is None\n-            or query.lower() in it.lower()\n-        ])\n+        items = ["One", "Two", "Three"]\n+        tmp = SimpleVocabulary(\n+            [\n+                SimpleTerm(it.lower(), it.lower(), it)\n+                for it in items\n+                if query is None or query.lower() in it.lower()\n+            ]\n+        )\n         tmp.test = 1\n         return tmp\n \n \n @provider(IVocabularyFactory)\n def ExampleFunctionVocabulary(context, query=None):\n-    items = [\'First\', \'Second\', \'Third\']\n-    tmp = SimpleVocabulary([\n-        SimpleTerm(it.lower(), it.lower(), it)\n-        for it in items\n-        if query is None\n-        or query.lower() in it.lower()\n-    ])\n+    items = ["First", "Second", "Third"]\n+    tmp = SimpleVocabulary(\n+        [\n+            SimpleTerm(it.lower(), it.lower(), it)\n+            for it in items\n+            if query is None or query.lower() in it.lower()\n+        ]\n+    )\n     return tmp\n \n \n class PloneAppContent(PloneSandboxLayer):\n \n-    defaultBases = (PLONE_FIXTURE, )\n+    defaultBases = (PLONE_FIXTURE,)\n \n-    USER_NAME = \'johndoe\'\n-    USER_PASSWORD = \'secret\'\n-    MEMBER_NAME = \'janedoe\'\n-    MEMBER_PASSWORD = \'secret\'\n-    USER_WITH_FULLNAME_NAME = \'jim\'\n-    USER_WITH_FULLNAME_FULLNAME = \'Jim Fulton\'\n-    USER_WITH_FULLNAME_PASSWORD = \'secret\'\n-    MANAGER_USER_NAME = \'manager\'\n-    MANAGER_USER_PASSWORD = \'secret\'\n+    USER_NAME = "johndoe"\n+    USER_PASSWORD = "secret"\n+    MEMBER_NAME = "janedoe"\n+    MEMBER_PASSWORD = "secret"\n+    USER_WITH_FULLNAME_NAME = "jim"\n+    USER_WITH_FULLNAME_FULLNAME = "Jim Fulton"\n+    USER_WITH_FULLNAME_PASSWORD = "secret"\n+    MANAGER_USER_NAME = "manager"\n+    MANAGER_USER_PASSWORD = "secret"\n \n     def setUpZope(self, app, configurationContext):\n         # Load ZCML\n         import plone.app.content\n+\n         xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.app.content,\n-            context=configurationContext\n+            "configure.zcml", plone.app.content, context=configurationContext\n         )\n \n     def setUpPloneSite(self, portal):\n         # Creates some users\n-        acl_users = getToolByName(portal, \'acl_users\')\n+        acl_users = getToolByName(portal, "acl_users")\n         acl_users.userFolderAddUser(\n             self.USER_NAME,\n             self.USER_PASSWORD,\n@@ -77,70 +77,71 @@ def setUpPloneSite(self, portal):\n         acl_users.userFolderAddUser(\n             self.MEMBER_NAME,\n             self.MEMBER_PASSWORD,\n-            [\'Member\'],\n+            ["Member"],\n             [],\n         )\n         acl_users.userFolderAddUser(\n             self.USER_WITH_FULLNAME_NAME,\n             self.USER_WITH_FULLNAME_PASSWORD,\n-            [\'Member\'],\n+            ["Member"],\n             [],\n         )\n-        mtool = getToolByName(portal, \'portal_membership\', None)\n-        mtool.addMember(\'jim\', \'Jim\', [\'Member\'], [])\n-        mtool.getMemberById(\'jim\').setMemberProperties(\n-            {"fullname": \'Jim Fult\\xc3\\xb8rn\'})\n+        mtool = getToolByName(portal, "portal_membership", None)\n+        mtool.addMember("jim", "Jim", ["Member"], [])\n+        mtool.getMemberById("jim").setMemberProperties(\n+            {"fullname": "Jim Fult\\xc3\\xb8rn"}\n+        )\n \n         acl_users.userFolderAddUser(\n             self.MANAGER_USER_NAME,\n             self.MANAGER_USER_PASSWORD,\n-            [\'Manager\'],\n+            ["Manager"],\n             [],\n         )\n         portal.portal_workflow.setDefaultChain("simple_publication_workflow")\n \n \n class NonAsciiLayer(PloneSandboxLayer):\n-\n     def setUpZope(self, app, configurationContext):\n         import plone.app.content.tests\n \n-        xmlconfig.file(\'profiles/non-ascii-workflow.zcml\',\n-                       plone.app.content.tests,\n-                       context=configurationContext)\n+        xmlconfig.file(\n+            "profiles/non-ascii-workflow.zcml",\n+            plone.app.content.tests,\n+            context=configurationContext,\n+        )\n \n     def setUpPloneSite(self, portal):\n         # applyProfile which has non-ascii characters in state titles\n-        applyProfile(portal, \'plone.app.content.tests:non-ascii-workflow\')\n+        applyProfile(portal, "plone.app.content.tests:non-ascii-workflow")\n \n \n PLONE_APP_CONTENT_FIXTURE = PloneAppContent()\n PLONE_APP_CONTENT_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_CONTENT_FIXTURE, ),\n-    name="PloneAppContent:Integration")\n+    bases=(PLONE_APP_CONTENT_FIXTURE,), name="PloneAppContent:Integration"\n+)\n PLONE_APP_CONTENT_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_APP_CONTENT_FIXTURE, ),\n-    name="PloneAppContent:Functional")\n+    bases=(PLONE_APP_CONTENT_FIXTURE,), name="PloneAppContent:Functional"\n+)\n \n \n # Dexterity test layers\n PLONE_APP_CONTENT_DX_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_CONTENTTYPES_FIXTURE, ),\n-    name="PloneAppContentDX:Integration")\n+    bases=(PLONE_APP_CONTENTTYPES_FIXTURE,), name="PloneAppContentDX:Integration"\n+)\n PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_APP_CONTENTTYPES_FIXTURE, ),\n-    name="PloneAppContentDX:Functional")\n+    bases=(PLONE_APP_CONTENTTYPES_FIXTURE,), name="PloneAppContentDX:Functional"\n+)\n \n \n # Test layer with a workflow containing non-ascii characters in state titles.\n PLONE_APP_CONTENT_NON_ASCII_LAYER = NonAsciiLayer()\n PLONE_APP_CONTENT_NON_ASCII_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_CONTENT_NON_ASCII_LAYER, ),\n-    name="PloneAppContentNonAscii:Integration")\n+    bases=(PLONE_APP_CONTENT_NON_ASCII_LAYER,),\n+    name="PloneAppContentNonAscii:Integration",\n+)\n \n \n optionflags = (\n-    doctest.REPORT_ONLY_FIRST_FAILURE\n-    | doctest.ELLIPSIS\n-    | doctest.NORMALIZE_WHITESPACE\n+    doctest.REPORT_ONLY_FIRST_FAILURE | doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n )\ndiff --git a/plone/app/content/tests/test_actions.py b/plone/app/content/tests/test_actions.py\nindex a9a8c0e..2c2a643 100644\n--- a/plone/app/content/tests/test_actions.py\n+++ b/plone/app/content/tests/test_actions.py\n@@ -1,19 +1,15 @@\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n-from plone.app.testing import login\n-from plone.app.testing import logout\n-from plone.app.testing import setRoles\n-from plone.testing.zope import Browser\n+import unittest\n+\n+import transaction\n+from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, login, logout, setRoles\n from plone.locking.interfaces import ILockable\n-from zExceptions import Unauthorized\n+from plone.testing.zope import Browser\n from z3c.form.interfaces import IFormLayer\n+from zExceptions import Unauthorized\n from zope.component import getMultiAdapter\n from zope.interface import alsoProvides\n \n-import transaction\n-import unittest\n-\n+from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n \n \n class ActionsDXTestCase(unittest.TestCase):\n@@ -21,48 +17,45 @@ class ActionsDXTestCase(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n-        self.portal.acl_users.userFolderAddUser(\n-            \'editor\', \'secret\', [\'Editor\'], [])\n+        self.portal.acl_users.userFolderAddUser("editor", "secret", ["Editor"], [])\n \n         # For z3c.forms request must provide IFormLayer\n         alsoProvides(self.request, IFormLayer)\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\n-            type_name=\'Folder\', id=\'f1\', title=\'A T\xc3\xa9st Folder\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory(type_name="Folder", id="f1", title="A T\xc3\xa9st Folder")\n \n         transaction.commit()\n-        self.browser = Browser(self.layer[\'app\'])\n+        self.browser = Browser(self.layer["app"])\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic {}:{}\'.format(TEST_USER_NAME, \'secret\'))\n+            "Authorization", "Basic {}:{}".format(TEST_USER_NAME, "secret")\n+        )\n \n     def tearDown(self):\n-        if \'f1\' in self.portal.objectIds():\n-            self.portal.manage_delObjects(ids=\'f1\')\n+        if "f1" in self.portal.objectIds():\n+            self.portal.manage_delObjects(ids="f1")\n             transaction.commit()\n \n     def test_delete_confirmation(self):\n-        folder = self.portal[\'f1\']\n+        folder = self.portal["f1"]\n \n-        form = getMultiAdapter(\n-            (folder, self.request), name=\'delete_confirmation\')\n+        form = getMultiAdapter((folder, self.request), name="delete_confirmation")\n         form.update()\n \n-        cancel = form.buttons[\'Cancel\']\n+        cancel = form.buttons["Cancel"]\n         form.handlers.getHandler(cancel)(form, form)\n \n         self.assertFalse(form.is_locked)\n \n     def test_delete_confirmation_if_locked(self):\n-        folder = self.portal[\'f1\']\n+        folder = self.portal["f1"]\n         lockable = ILockable.providedBy(folder)\n \n-        form = getMultiAdapter(\n-            (folder, self.request), name=\'delete_confirmation\')\n+        form = getMultiAdapter((folder, self.request), name="delete_confirmation")\n         form.update()\n \n         self.assertFalse(form.is_locked)\n@@ -70,8 +63,7 @@ def test_delete_confirmation_if_locked(self):\n         if lockable:\n             lockable.lock()\n \n-        form = getMultiAdapter(\n-            (folder, self.request), name=\'delete_confirmation\')\n+        form = getMultiAdapter((folder, self.request), name="delete_confirmation")\n         form.update()\n \n         self.assertFalse(form.is_locked)\n@@ -81,10 +73,9 @@ def test_delete_confirmation_if_locked(self):\n         # ILockable interface.\n         if lockable:\n             logout()\n-            login(self.portal, \'editor\')\n+            login(self.portal, "editor")\n \n-            form = getMultiAdapter(\n-                (folder, self.request), name=\'delete_confirmation\')\n+            form = getMultiAdapter((folder, self.request), name="delete_confirmation")\n             form.update()\n             self.assertTrue(form.is_locked)\n \n@@ -94,13 +85,12 @@ def test_delete_confirmation_if_locked(self):\n             ILockable(folder).unlock()\n \n     def test_delete_confirmation_cancel(self):\n-        folder = self.portal[\'f1\']\n+        folder = self.portal["f1"]\n \n-        self.browser.open(folder.absolute_url() + \'/delete_confirmation\')\n-        self.browser.getControl(name=\'form.buttons.Cancel\').click()\n+        self.browser.open(folder.absolute_url() + "/delete_confirmation")\n+        self.browser.getControl(name="form.buttons.Cancel").click()\n         context_state = getMultiAdapter(\n-            (folder, self.request),\n-            name=\'plone_context_state\'\n+            (folder, self.request), name="plone_context_state"\n         )\n         self.assertEqual(self.browser.url, context_state.view_url())\n \n@@ -115,19 +105,22 @@ def prepare_for_acquisition_tests(self):\n         """\n         # create a page at the root and one nested with the same id.\n         p1 = self.portal.invokeFactory(\n-            type_name=\'Document\', id=\'test\', title=\'Test Page at Root\')\n-        folder_1 = self.portal[\'f1\']\n+            type_name="Document", id="test", title="Test Page at Root"\n+        )\n+        folder_1 = self.portal["f1"]\n         p2 = folder_1.invokeFactory(\n-            type_name=\'Document\', id=\'test\', title=\'Test Page in Folder\')\n+            type_name="Document", id="test", title="Test Page in Folder"\n+        )\n         contained_test_page = folder_1[p2]\n \n         transaction.commit()\n \n         # create an alternate browser also logged in with manager\n-        browser_2 = Browser(self.layer[\'app\'])\n+        browser_2 = Browser(self.layer["app"])\n         browser_2.handleErrors = False\n         browser_2.addHeader(\n-            \'Authorization\', \'Basic {}:{}\'.format(TEST_USER_NAME, \'secret\'))\n+            "Authorization", "Basic {}:{}".format(TEST_USER_NAME, "secret")\n+        )\n \n         # return the id of the root page, the nested page itself, and the\n         # alternate browser\n@@ -141,104 +134,106 @@ def test_delete_wrong_object_by_acquisition_with_action(self):\n         p1_id, page_2, browser_2 = self.prepare_for_acquisition_tests()\n \n         # open two different browsers to the \'delete confirmation\' view\n-        delete_url = page_2.absolute_url() + \'/delete_confirmation\'\n+        delete_url = page_2.absolute_url() + "/delete_confirmation"\n         self.browser.open(delete_url)\n         browser_2.open(delete_url)\n         self.assertTrue(p1_id in self.portal)\n         for browser in [self.browser, browser_2]:\n-            browser.getControl(name=\'form.buttons.Delete\').click()\n+            browser.getControl(name="form.buttons.Delete").click()\n \n         # the nested folder should be gone, but the one at the root should\n         # remain.\n-        self.assertFalse(page_2.id in self.portal[\'f1\'])\n+        self.assertFalse(page_2.id in self.portal["f1"])\n         self.assertTrue(p1_id in self.portal)\n \n     def test_rename_form(self):\n         logout()\n-        folder = self.portal[\'f1\']\n+        folder = self.portal["f1"]\n \n         # We need zope2.CopyOrMove permission to rename content\n-        self.browser.open(folder.absolute_url() + \'/folder_rename\')\n-        self.browser.getControl(name=\'form.widgets.new_id\').value = \'f2\'\n-        self.browser.getControl(name=\'form.widgets.new_title\').value = \'F2\'\n-        self.browser.getControl(name=\'form.buttons.Rename\').click()\n-        self.assertEqual(folder.getId(), \'f2\')\n-        self.assertEqual(folder.Title(), \'F2\')\n+        self.browser.open(folder.absolute_url() + "/folder_rename")\n+        self.browser.getControl(name="form.widgets.new_id").value = "f2"\n+        self.browser.getControl(name="form.widgets.new_title").value = "F2"\n+        self.browser.getControl(name="form.buttons.Rename").click()\n+        self.assertEqual(folder.getId(), "f2")\n+        self.assertEqual(folder.Title(), "F2")\n         self.assertEqual(self.browser.url, folder.absolute_url())\n \n         login(self.portal, TEST_USER_NAME)\n-        self.portal.manage_delObjects(ids=\'f2\')\n+        self.portal.manage_delObjects(ids="f2")\n         transaction.commit()\n \n     def test_rename_form_with_view_action(self):\n         # can\'t be bothered to register blobs, instead we add documents to\n         # typesUseViewActionInListings\n         registry = self.portal.portal_registry\n-        registry[\'plone.types_use_view_action_in_listings\'] = [\'Image\',\n-                                                               \'File\',\n-                                                               \'Document\']\n-\n-        folder = self.portal[\'f1\']\n-        folder.invokeFactory(\'Document\', \'document1\')\n-        document1 = folder[\'document1\']\n+        registry["plone.types_use_view_action_in_listings"] = [\n+            "Image",\n+            "File",\n+            "Document",\n+        ]\n+\n+        folder = self.portal["f1"]\n+        folder.invokeFactory("Document", "document1")\n+        document1 = folder["document1"]\n         transaction.commit()\n         logout()\n \n         # We need zope2.CopyOrMove permission to rename content\n-        self.browser.open(document1.absolute_url() + \'/object_rename\')\n-        self.browser.getControl(name=\'form.widgets.new_id\').value = \'f2\'\n-        self.browser.getControl(name=\'form.widgets.new_title\').value = \'F2\'\n-        self.browser.getControl(name=\'form.buttons.Rename\').click()\n-        self.assertEqual(document1.getId(), \'f2\')\n-        self.assertEqual(document1.Title(), \'F2\')\n-        self.assertEqual(self.browser.url, document1.absolute_url() + \'/view\')\n+        self.browser.open(document1.absolute_url() + "/object_rename")\n+        self.browser.getControl(name="form.widgets.new_id").value = "f2"\n+        self.browser.getControl(name="form.widgets.new_title").value = "F2"\n+        self.browser.getControl(name="form.buttons.Rename").click()\n+        self.assertEqual(document1.getId(), "f2")\n+        self.assertEqual(document1.Title(), "F2")\n+        self.assertEqual(self.browser.url, document1.absolute_url() + "/view")\n \n         login(self.portal, TEST_USER_NAME)\n-        self.portal.manage_delObjects(ids=\'f1\')\n+        self.portal.manage_delObjects(ids="f1")\n         transaction.commit()\n \n     def test_create_safe_id_on_renaming(self):\n         logout()\n-        folder = self.portal[\'f1\']\n+        folder = self.portal["f1"]\n \n         # We need zope2.CopyOrMove permission to rename content\n-        self.browser.open(folder.absolute_url() + \'/folder_rename\')\n-        self.browser.getControl(name=\'form.widgets.new_id\').value = \' ? f4 4 \'\n-        self.browser.getControl(name=\'form.widgets.new_title\').value = \' F2 \'\n-        self.browser.getControl(name=\'form.buttons.Rename\').click()\n-        self.assertEqual(folder.getId(), \'f4-4\')\n-        self.assertEqual(folder.Title(), \'F2\')\n+        self.browser.open(folder.absolute_url() + "/folder_rename")\n+        self.browser.getControl(name="form.widgets.new_id").value = " ? f4 4 "\n+        self.browser.getControl(name="form.widgets.new_title").value = " F2 "\n+        self.browser.getControl(name="form.buttons.Rename").click()\n+        self.assertEqual(folder.getId(), "f4-4")\n+        self.assertEqual(folder.Title(), "F2")\n         self.assertEqual(self.browser.url, folder.absolute_url())\n \n         login(self.portal, TEST_USER_NAME)\n-        self.portal.manage_delObjects(ids=\'f4-4\')\n+        self.portal.manage_delObjects(ids="f4-4")\n         transaction.commit()\n \n     def test_default_page_updated_on_rename(self):\n         login(self.portal, TEST_USER_NAME)\n-        folder = self.portal[\'f1\']\n-        folder.invokeFactory(type_name=\'Document\', id=\'d1\', title=\'A Doc\')\n-        doc = folder[\'d1\']\n-        folder.setDefaultPage(\'d1\')\n+        folder = self.portal["f1"]\n+        folder.invokeFactory(type_name="Document", id="d1", title="A Doc")\n+        doc = folder["d1"]\n+        folder.setDefaultPage("d1")\n         transaction.commit()\n-        self.assertEqual(folder.getDefaultPage(), \'d1\')\n+        self.assertEqual(folder.getDefaultPage(), "d1")\n \n         # We need zope2.CopyOrMove permission to rename content\n-        self.browser.open(doc.absolute_url() + \'/object_rename\')\n-        self.browser.getControl(name=\'form.widgets.new_id\').value = \' ?renamed\'\n-        self.browser.getControl(name=\'form.widgets.new_title\').value = \'Doc\'\n-        self.browser.getControl(name=\'form.buttons.Rename\').click()\n-        self.assertEqual(folder.getFolderContents()[0].id, \'renamed\')\n-        self.assertEqual(folder.getDefaultPage(), \'renamed\')\n+        self.browser.open(doc.absolute_url() + "/object_rename")\n+        self.browser.getControl(name="form.widgets.new_id").value = " ?renamed"\n+        self.browser.getControl(name="form.widgets.new_title").value = "Doc"\n+        self.browser.getControl(name="form.buttons.Rename").click()\n+        self.assertEqual(folder.getFolderContents()[0].id, "renamed")\n+        self.assertEqual(folder.getDefaultPage(), "renamed")\n \n     def test_rename_form_cancel(self):\n-        folder = self.portal[\'f1\']\n+        folder = self.portal["f1"]\n \n         _id = folder.getId()\n         _title = folder.Title()\n \n-        self.browser.open(folder.absolute_url() + \'/folder_rename\')\n-        self.browser.getControl(name=\'form.buttons.Cancel\').click()\n+        self.browser.open(folder.absolute_url() + "/folder_rename")\n+        self.browser.getControl(name="form.buttons.Cancel").click()\n         transaction.commit()\n \n         self.assertEqual(self.browser.url, folder.absolute_url())\n@@ -249,198 +244,220 @@ def test_rename_form_cancel_with_view_action(self):\n         # can\'t be bothered to register blobs, instead we add documents to\n         # typesUseViewActionInListings\n         registry = self.portal.portal_registry\n-        registry[\'plone.types_use_view_action_in_listings\'] = [\'Image\',\n-                                                               \'File\',\n-                                                               \'Document\']\n-        folder = self.portal[\'f1\']\n-        folder.invokeFactory(\'Document\', \'document1\')\n-        document1 = folder[\'document1\']\n+        registry["plone.types_use_view_action_in_listings"] = [\n+            "Image",\n+            "File",\n+            "Document",\n+        ]\n+        folder = self.portal["f1"]\n+        folder.invokeFactory("Document", "document1")\n+        document1 = folder["document1"]\n         transaction.commit()\n \n         _id = document1.getId()\n         _title = document1.Title()\n \n-        self.browser.open(document1.absolute_url() + \'/object_rename\')\n-        self.browser.getControl(name=\'form.buttons.Cancel\').click()\n+        self.browser.open(document1.absolute_url() + "/object_rename")\n+        self.browser.getControl(name="form.buttons.Cancel").click()\n         transaction.commit()\n \n-        self.assertEqual(self.browser.url, document1.absolute_url() + \'/view\')\n+        self.assertEqual(self.browser.url, document1.absolute_url() + "/view")\n         self.assertEqual(document1.getId(), _id)\n         self.assertEqual(document1.Title(), _title)\n \n     def _get_token(self, context):\n-        authenticator = getMultiAdapter(\n-            (context, self.request), name=\'authenticator\')\n+        authenticator = getMultiAdapter((context, self.request), name="authenticator")\n \n         return authenticator.token()\n \n     def test_object_cut_view(self):\n-        folder = self.portal[\'f1\']\n+        folder = self.portal["f1"]\n \n         # We need pass an authenticator token to prevent Unauthorized\n         self.assertRaises(\n-            Unauthorized,\n-            self.browser.open,\n-            f\'{folder.absolute_url():s}/object_cut\'\n+            Unauthorized, self.browser.open, f"{folder.absolute_url():s}/object_cut"\n         )\n \n         # We need to have Copy or Move permission to cut an object\n-        self.browser.open(\'{:s}/object_cut?_authenticator={:s}\'.format(\n-            folder.absolute_url(), self._get_token(folder)))\n+        self.browser.open(\n+            "{:s}/object_cut?_authenticator={:s}".format(\n+                folder.absolute_url(), self._get_token(folder)\n+            )\n+        )\n \n-        self.assertIn(\'__cp\', self.browser.cookies)\n-        self.assertIn(\n-            f\'{folder.Title():s} cut.\', self.browser.contents)\n+        self.assertIn("__cp", self.browser.cookies)\n+        self.assertIn(f"{folder.Title():s} cut.", self.browser.contents)\n \n     def test_object_cut_view_with_view_action(self):\n         # can\'t be bothered to register blobs, instead we add documents to\n         # typesUseViewActionInListings\n         registry = self.portal.portal_registry\n-        registry[\'plone.types_use_view_action_in_listings\'] = [\'Image\',\n-                                                               \'File\',\n-                                                               \'Document\']\n-        folder = self.portal[\'f1\']\n-        folder.invokeFactory(\'Document\', \'document1\')\n-        document1 = folder[\'document1\']\n+        registry["plone.types_use_view_action_in_listings"] = [\n+            "Image",\n+            "File",\n+            "Document",\n+        ]\n+        folder = self.portal["f1"]\n+        folder.invokeFactory("Document", "document1")\n+        document1 = folder["document1"]\n         transaction.commit()\n \n         # We need pass an authenticator token to prevent Unauthorized\n         self.assertRaises(\n-            Unauthorized,\n-            self.browser.open,\n-            f\'{document1.absolute_url():s}/object_cut\'\n+            Unauthorized, self.browser.open, f"{document1.absolute_url():s}/object_cut"\n         )\n \n         # We need to have Copy or Move permission to cut an object\n-        self.browser.open(\'{:s}/object_cut?_authenticator={:s}\'.format(\n-            document1.absolute_url(), self._get_token(document1)))\n+        self.browser.open(\n+            "{:s}/object_cut?_authenticator={:s}".format(\n+                document1.absolute_url(), self._get_token(document1)\n+            )\n+        )\n \n-        self.assertIn(\'__cp\', self.browser.cookies)\n-        self.assertIn(\n-            f\'{document1.Title():s} cut.\', self.browser.contents)\n-        self.assertEqual(document1.absolute_url() + \'/view\', self.browser.url)\n+        self.assertIn("__cp", self.browser.cookies)\n+        self.assertIn(f"{document1.Title():s} cut.", self.browser.contents)\n+        self.assertEqual(document1.absolute_url() + "/view", self.browser.url)\n \n     def test_object_copy_view(self):\n-        folder = self.portal[\'f1\']\n+        folder = self.portal["f1"]\n \n         # We need pass an authenticator token to prevent Unauthorized\n         self.assertRaises(\n-            Unauthorized,\n-            self.browser.open,\n-            f\'{folder.absolute_url():s}/object_copy\'\n+            Unauthorized, self.browser.open, f"{folder.absolute_url():s}/object_copy"\n         )\n \n-        self.browser.open(\'{:s}/object_copy?_authenticator={:s}\'.format(\n-            folder.absolute_url(), self._get_token(folder)))\n+        self.browser.open(\n+            "{:s}/object_copy?_authenticator={:s}".format(\n+                folder.absolute_url(), self._get_token(folder)\n+            )\n+        )\n \n-        self.assertIn(\'__cp\', self.browser.cookies)\n-        self.assertIn(\n-            f\'{folder.Title():s} copied.\', self.browser.contents)\n+        self.assertIn("__cp", self.browser.cookies)\n+        self.assertIn(f"{folder.Title():s} copied.", self.browser.contents)\n \n     def test_object_copy_with_view_action(self):\n         # can\'t be bothered to register blobs, instead we add documents to\n         # typesUseViewActionInListings\n         registry = self.portal.portal_registry\n-        registry[\'plone.types_use_view_action_in_listings\'] = [\'Image\',\n-                                                               \'File\',\n-                                                               \'Document\']\n-\n-        folder = self.portal[\'f1\']\n-        folder.invokeFactory(\'Document\', \'document1\')\n-        document1 = folder[\'document1\']\n+        registry["plone.types_use_view_action_in_listings"] = [\n+            "Image",\n+            "File",\n+            "Document",\n+        ]\n+\n+        folder = self.portal["f1"]\n+        folder.invokeFactory("Document", "document1")\n+        document1 = folder["document1"]\n         transaction.commit()\n \n         # We need pass an authenticator token to prevent Unauthorized\n         self.assertRaises(\n-            Unauthorized,\n-            self.browser.open,\n-            f\'{document1.absolute_url():s}/object_copy\'\n+            Unauthorized, self.browser.open, f"{document1.absolute_url():s}/object_copy"\n         )\n \n-        self.browser.open(\'{:s}/object_copy?_authenticator={:s}\'.format(\n-            document1.absolute_url(), self._get_token(document1)))\n+        self.browser.open(\n+            "{:s}/object_copy?_authenticator={:s}".format(\n+                document1.absolute_url(), self._get_token(document1)\n+            )\n+        )\n \n-        self.assertIn(\'__cp\', self.browser.cookies)\n-        self.assertIn(\n-            f\'{document1.Title():s} copied.\', self.browser.contents)\n-        self.assertEqual(document1.absolute_url() + \'/view\', self.browser.url)\n+        self.assertIn("__cp", self.browser.cookies)\n+        self.assertIn(f"{document1.Title():s} copied.", self.browser.contents)\n+        self.assertEqual(document1.absolute_url() + "/view", self.browser.url)\n \n     def test_object_cut_and_paste(self):\n-        folder = self.portal[\'f1\']\n-        self.portal.invokeFactory(type_name=\'Document\', id=\'d1\', title=\'A Doc\')\n-        doc = self.portal[\'d1\']\n+        folder = self.portal["f1"]\n+        self.portal.invokeFactory(type_name="Document", id="d1", title="A Doc")\n+        doc = self.portal["d1"]\n         transaction.commit()\n \n-        self.browser.open(\'{:s}/object_cut?_authenticator={:s}\'.format(\n-            doc.absolute_url(), self._get_token(doc)))\n+        self.browser.open(\n+            "{:s}/object_cut?_authenticator={:s}".format(\n+                doc.absolute_url(), self._get_token(doc)\n+            )\n+        )\n \n-        self.assertIn(\'__cp\', self.browser.cookies)\n-        self.assertIn(\'d1\', self.portal.objectIds())\n-        self.assertIn(\'f1\', self.portal.objectIds())\n+        self.assertIn("__cp", self.browser.cookies)\n+        self.assertIn("d1", self.portal.objectIds())\n+        self.assertIn("f1", self.portal.objectIds())\n \n         # We need pass an authenticator token to prevent Unauthorized\n         self.assertRaises(\n-            Unauthorized,\n-            self.browser.open,\n-            f\'{folder.absolute_url():s}/object_paste\'\n+            Unauthorized, self.browser.open, f"{folder.absolute_url():s}/object_paste"\n         )\n \n-        self.browser.open(\'{:s}/object_paste?_authenticator={:s}\'.format(\n-            folder.absolute_url(), self._get_token(doc)))\n+        self.browser.open(\n+            "{:s}/object_paste?_authenticator={:s}".format(\n+                folder.absolute_url(), self._get_token(doc)\n+            )\n+        )\n \n-        self.assertIn(\'__cp\', self.browser.cookies)\n+        self.assertIn("__cp", self.browser.cookies)\n         transaction.commit()\n \n-        self.assertNotIn(\'d1\', self.portal.objectIds())\n-        self.assertIn(\'d1\', folder.objectIds())\n-        self.assertIn(\'Item(s) pasted.\', self.browser.contents)\n+        self.assertNotIn("d1", self.portal.objectIds())\n+        self.assertIn("d1", folder.objectIds())\n+        self.assertIn("Item(s) pasted.", self.browser.contents)\n \n     def test_object_copy_and_paste(self):\n-        folder = self.portal[\'f1\']\n-        folder.invokeFactory(type_name=\'Document\', id=\'d1\', title=\'A Doc\')\n-        doc = folder[\'d1\']\n+        folder = self.portal["f1"]\n+        folder.invokeFactory(type_name="Document", id="d1", title="A Doc")\n+        doc = folder["d1"]\n         transaction.commit()\n \n-        self.browser.open(\'{:s}/object_copy?_authenticator={:s}\'.format(\n-            doc.absolute_url(), self._get_token(doc)))\n+        self.browser.open(\n+            "{:s}/object_copy?_authenticator={:s}".format(\n+                doc.absolute_url(), self._get_token(doc)\n+            )\n+        )\n \n-        self.assertIn(\'__cp\', self.browser.cookies)\n+        self.assertIn("__cp", self.browser.cookies)\n \n         # We need pass an authenticator token to prevent Unauthorized\n         self.assertRaises(\n-            Unauthorized,\n-            self.browser.open,\n-            f\'{folder.absolute_url():s}/object_paste\'\n+            Unauthorized, self.browser.open, f"{folder.absolute_url():s}/object_paste"\n         )\n \n-        self.browser.open(\'{:s}/object_paste?_authenticator={:s}\'.format(\n-            folder.absolute_url(), self._get_token(folder)))\n+        self.browser.open(\n+            "{:s}/object_paste?_authenticator={:s}".format(\n+                folder.absolute_url(), self._get_token(folder)\n+            )\n+        )\n         transaction.commit()\n \n-        self.assertIn(\'f1\', self.portal.objectIds())\n-        self.assertIn(\'d1\', folder.objectIds())\n-        self.assertIn(\'copy_of_d1\', folder.objectIds())\n-        self.assertIn(\'Item(s) pasted.\', self.browser.contents)\n+        self.assertIn("f1", self.portal.objectIds())\n+        self.assertIn("d1", folder.objectIds())\n+        self.assertIn("copy_of_d1", folder.objectIds())\n+        self.assertIn("Item(s) pasted.", self.browser.contents)\n \n     def test_object_copy_and_paste_multiple_times(self):\n-        folder = self.portal[\'f1\']\n-        folder.invokeFactory(type_name=\'Document\', id=\'d1\', title=\'A Doc\')\n-        doc = folder[\'d1\']\n+        folder = self.portal["f1"]\n+        folder.invokeFactory(type_name="Document", id="d1", title="A Doc")\n+        doc = folder["d1"]\n         transaction.commit()\n \n-        self.browser.open(\'{:s}/object_copy?_authenticator={:s}\'.format(\n-            doc.absolute_url(), self._get_token(doc)))\n+        self.browser.open(\n+            "{:s}/object_copy?_authenticator={:s}".format(\n+                doc.absolute_url(), self._get_token(doc)\n+            )\n+        )\n \n-        self.assertIn(\'__cp\', self.browser.cookies)\n-        self.browser.open(\'{:s}/object_paste?_authenticator={:s}\'.format(\n-            folder.absolute_url(), self._get_token(folder)))\n-        self.browser.open(\'{:s}/object_paste?_authenticator={:s}\'.format(\n-            folder.absolute_url(), self._get_token(folder)))\n+        self.assertIn("__cp", self.browser.cookies)\n+        self.browser.open(\n+            "{:s}/object_paste?_authenticator={:s}".format(\n+                folder.absolute_url(), self._get_token(folder)\n+            )\n+        )\n+        self.browser.open(\n+            "{:s}/object_paste?_authenticator={:s}".format(\n+                folder.absolute_url(), self._get_token(folder)\n+            )\n+        )\n \n         # Cookie should persist, because you can paste the item multiple times\n-        self.assertIn(\'__cp\', self.browser.cookies)\n-        self.assertIn(\'f1\', self.portal.objectIds())\n-        self.assertIn(\'d1\', folder.objectIds())\n-        self.assertIn(\'copy_of_d1\', folder.objectIds())\n-        self.assertIn(\'copy2_of_d1\', folder.objectIds())\n-        self.assertIn(\'Item(s) pasted.\', self.browser.contents)\n+        self.assertIn("__cp", self.browser.cookies)\n+        self.assertIn("f1", self.portal.objectIds())\n+        self.assertIn("d1", folder.objectIds())\n+        self.assertIn("copy_of_d1", folder.objectIds())\n+        self.assertIn("copy2_of_d1", folder.objectIds())\n+        self.assertIn("Item(s) pasted.", self.browser.contents)\ndiff --git a/plone/app/content/tests/test_adding.py b/plone/app/content/tests/test_adding.py\nindex 4fc904b..079055a 100644\n--- a/plone/app/content/tests/test_adding.py\n+++ b/plone/app/content/tests/test_adding.py\n@@ -1,7 +1,8 @@\n+import unittest\n+\n from Acquisition import aq_get\n-from plone.app.content.testing import PLONE_APP_CONTENT_INTEGRATION_TESTING\n \n-import unittest\n+from plone.app.content.testing import PLONE_APP_CONTENT_INTEGRATION_TESTING\n \n \n class AddingTests(unittest.TestCase):\n@@ -9,16 +10,16 @@ class AddingTests(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n     def test_adding_acquisition(self):\n-        adding = self.portal.unrestrictedTraverse(\'+\')\n+        adding = self.portal.unrestrictedTraverse("+")\n         # Check explicit Acquisition\n-        template = aq_get(adding, \'portal_skins\')\n+        template = aq_get(adding, "portal_skins")\n         self.assertTrue(template)\n         # Check implicit Acquisition, unfortunately the CMF skins machinery\n         # depends on this\n-        template = getattr(adding, \'portal_skins\')\n+        template = getattr(adding, "portal_skins")\n         self.assertTrue(template)\n         # Check traversal\n-        self.assertTrue(self.portal.unrestrictedTraverse(\'+/main_template\'))\n+        self.assertTrue(self.portal.unrestrictedTraverse("+/main_template"))\ndiff --git a/plone/app/content/tests/test_basecontent.py b/plone/app/content/tests/test_basecontent.py\nindex 644cd14..923da8c 100644\n--- a/plone/app/content/tests/test_basecontent.py\n+++ b/plone/app/content/tests/test_basecontent.py\n@@ -1,14 +1,15 @@\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n-from plone.app.content.testing import optionflags\n-from plone.testing import layered\n import doctest\n import unittest\n \n+from plone.testing import layered\n \n-doctests = (\n-    \'basecontent.rst\',\n+from plone.app.content.testing import (\n+    PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING,\n+    optionflags,\n )\n \n+doctests = ("basecontent.rst",)\n+\n \n def test_suite():\n     suite = unittest.TestSuite()\n@@ -16,7 +17,7 @@ def test_suite():\n         layered(\n             doctest.DocFileSuite(\n                 test_file,\n-                package=\'plone.app.content\',\n+                package="plone.app.content",\n                 optionflags=optionflags,\n             ),\n             layer=PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING,\ndiff --git a/plone/app/content/tests/test_content_status_modify.py b/plone/app/content/tests/test_content_status_modify.py\nindex 3f6c428..e195bee 100644\n--- a/plone/app/content/tests/test_content_status_modify.py\n+++ b/plone/app/content/tests/test_content_status_modify.py\n@@ -1,12 +1,10 @@\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n-from plone.app.testing import login\n-from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n+import unittest\n+\n+from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, login, setRoles\n from Products.CMFPlone.utils import isExpired\n from zope.component import getMultiAdapter\n \n-import unittest\n+from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n \n class TestContentStatusModify(unittest.TestCase):\ndiff --git a/plone/app/content/tests/test_contents.py b/plone/app/content/tests/test_contents.py\nindex 7f4457b..6477f0c 100644\n--- a/plone/app/content/tests/test_contents.py\n+++ b/plone/app/content/tests/test_contents.py\n@@ -1,106 +1,104 @@\n-from datetime import datetime\n-from datetime import timedelta\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n-from plone.app.testing import login\n-from plone.app.testing import setRoles\n-from plone.app.testing import SITE_OWNER_NAME\n-from plone.app.testing import SITE_OWNER_PASSWORD\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n+import json\n+import unittest\n+from datetime import datetime, timedelta\n+from unittest import mock\n+\n+import transaction\n+from plone.app.testing import (\n+    SITE_OWNER_NAME,\n+    SITE_OWNER_PASSWORD,\n+    TEST_USER_ID,\n+    TEST_USER_NAME,\n+    login,\n+    setRoles,\n+)\n from plone.dexterity.fti import DexterityFTI\n from plone.protect.authenticator import createToken\n from plone.registry.interfaces import IRegistry\n from plone.testing.zope import Browser\n from plone.uuid.interfaces import IUUID\n-from unittest import mock\n-from zope.component import getMultiAdapter\n-from zope.component import getUtility\n+from zope.component import getMultiAdapter, getUtility\n \n-import json\n-import transaction\n-import unittest\n+from plone.app.content.testing import (\n+    PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING,\n+    PLONE_APP_CONTENT_DX_INTEGRATION_TESTING,\n+)\n \n \n class ContentsCopyTests(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n         # TYPE 1\n-        type1_fti = DexterityFTI(\'type1\')\n-        type1_fti.klass = \'plone.dexterity.content.Container\'\n+        type1_fti = DexterityFTI("type1")\n+        type1_fti.klass = "plone.dexterity.content.Container"\n         type1_fti.filter_content_types = True\n-        type1_fti.allowed_content_types = [\'type1\']\n+        type1_fti.allowed_content_types = ["type1"]\n         type1_fti.behaviors = (\n-            \'Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes\',  # noqa\n-            \'plone.app.dexterity.behaviors.metadata.IBasic\'\n+            "Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes",  # noqa\n+            "plone.app.dexterity.behaviors.metadata.IBasic",\n         )\n-        self.portal.portal_types._setObject(\'type1\', type1_fti)\n+        self.portal.portal_types._setObject("type1", type1_fti)\n         self.type1_fti = type1_fti\n \n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-    @mock.patch(\'plone.app.content.browser.contents.ContentsBaseAction.protect\', lambda x: True)  # noqa\n+    @mock.patch(\n+        "plone.app.content.browser.contents.ContentsBaseAction.protect", lambda x: True\n+    )  # noqa\n     def test_keep_selection_order(self):\n-        """Keep the order of items the same as they were selected.\n-        """\n-        self.portal.invokeFactory(\'type1\', id=\'f1\', title=\'Folder 1\')\n+        """Keep the order of items the same as they were selected."""\n+        self.portal.invokeFactory("type1", id="f1", title="Folder 1")\n         f1 = self.portal.f1\n-        f1.invokeFactory(\'type1\', id=\'it1\', title=\'Item 1\')\n-        f1.invokeFactory(\'type1\', id=\'it2\', title=\'Item 2\')\n-        f1.invokeFactory(\'type1\', id=\'it3\', title=\'Item 3\')\n+        f1.invokeFactory("type1", id="it1", title="Item 1")\n+        f1.invokeFactory("type1", id="it2", title="Item 2")\n+        f1.invokeFactory("type1", id="it3", title="Item 3")\n \n         def _test_order(sel):\n-            self.request.form[\'selection\'] = json.dumps([\n-                IUUID(f1[id_])\n-                for id_\n-                in sel\n-            ])\n-            view = f1.restrictedTraverse(\'@@fc-copy\')\n+            self.request.form["selection"] = json.dumps([IUUID(f1[id_]) for id_ in sel])\n+            view = f1.restrictedTraverse("@@fc-copy")\n             view()\n-            self.assertEqual(\n-                [ob.id for ob in view.oblist],\n-                sel\n-            )\n+            self.assertEqual([ob.id for ob in view.oblist], sel)\n \n-        _test_order([\'it1\', \'it2\', \'it3\'])\n-        _test_order([\'it3\', \'it1\', \'it2\'])\n+        _test_order(["it1", "it2", "it3"])\n+        _test_order(["it3", "it1", "it2"])\n \n \n class ContentsDeleteTests(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n         # TYPE 1\n-        type1_fti = DexterityFTI(\'type1\')\n-        type1_fti.klass = \'plone.dexterity.content.Container\'\n+        type1_fti = DexterityFTI("type1")\n+        type1_fti.klass = "plone.dexterity.content.Container"\n         type1_fti.filter_content_types = True\n-        type1_fti.allowed_content_types = [\'type1\']\n+        type1_fti.allowed_content_types = ["type1"]\n         type1_fti.behaviors = (\n-            \'Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes\',  # noqa\n-            \'plone.app.dexterity.behaviors.metadata.IBasic\'\n+            "Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes",  # noqa\n+            "plone.app.dexterity.behaviors.metadata.IBasic",\n         )\n-        self.portal.portal_types._setObject(\'type1\', type1_fti)\n+        self.portal.portal_types._setObject("type1", type1_fti)\n         self.type1_fti = type1_fti\n \n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-    @mock.patch(\'plone.app.content.browser.contents.ContentsBaseAction.protect\', lambda x: True)  # noqa\n+    @mock.patch(\n+        "plone.app.content.browser.contents.ContentsBaseAction.protect", lambda x: True\n+    )  # noqa\n     def test_delete_success_with_private_anchestor(self):\n-        """Delete content item from a folder with private anchestor\n-        """\n+        """Delete content item from a folder with private anchestor"""\n         # Create test content /it1/it2/it3\n-        self.portal.invokeFactory(\'type1\', id=\'it1\', title=\'Item 1\')\n-        self.portal.it1.invokeFactory(\'type1\', id=\'it2\', title=\'Item 2\')\n-        self.portal.it1.it2.invokeFactory(\'type1\', id=\'it3\', title=\'Item 3\')\n+        self.portal.invokeFactory("type1", id="it1", title="Item 1")\n+        self.portal.it1.invokeFactory("type1", id="it2", title="Item 2")\n+        self.portal.it1.it2.invokeFactory("type1", id="it3", title="Item 3")\n         self.assertEqual(len(self.portal.it1.it2.contentIds()), 1)\n \n         # Block user access to it1m but leave access to its children\n@@ -114,22 +112,23 @@ def test_delete_success_with_private_anchestor(self):\n \n         # Execute delete request\n         selection = [self.portal.it1.it2.it3.UID()]\n-        self.request.form[\'folder\'] = \'/it1/it2\'\n-        self.request.form[\'selection\'] = json.dumps(selection)\n-        res = self.portal.it1.it2.restrictedTraverse(\'@@fc-delete\')()\n+        self.request.form["folder"] = "/it1/it2"\n+        self.request.form["selection"] = json.dumps(selection)\n+        res = self.portal.it1.it2.restrictedTraverse("@@fc-delete")()\n \n         # Check for successful deletion\n         res = json.loads(res)\n-        self.assertEqual(res[\'status\'], \'success\')\n+        self.assertEqual(res["status"], "success")\n         self.assertEqual(len(self.portal.it1.it2.contentIds()), 0)\n \n-    @mock.patch(\'plone.app.content.browser.contents.ContentsBaseAction.protect\', lambda x: True)  # noqa\n+    @mock.patch(\n+        "plone.app.content.browser.contents.ContentsBaseAction.protect", lambda x: True\n+    )  # noqa\n     def test_delete_success_on_inactive_content(self):\n-        """Delete an expired content item from a folder.\n-        """\n+        """Delete an expired content item from a folder."""\n         # Create content\n-        self.portal.invokeFactory(\'type1\', id=\'it1\', title=\'Item 1\')\n-        self.portal.it1.invokeFactory(\'type1\', id=\'it2\', title=\'Item 2\')\n+        self.portal.invokeFactory("type1", id="it1", title="Item 1")\n+        self.portal.it1.invokeFactory("type1", id="it2", title="Item 2")\n \n         # Expire it2\n         exp = datetime.now() - timedelta(days=10)\n@@ -142,13 +141,13 @@ def test_delete_success_on_inactive_content(self):\n \n         # Execute delete request\n         selection = [self.portal.it1.it2.UID()]\n-        self.request.form[\'folder\'] = \'/it1\'\n-        self.request.form[\'selection\'] = json.dumps(selection)\n-        res = self.portal.it1.restrictedTraverse(\'@@fc-delete\')()\n+        self.request.form["folder"] = "/it1"\n+        self.request.form["selection"] = json.dumps(selection)\n+        res = self.portal.it1.restrictedTraverse("@@fc-delete")()\n \n         # Check for successful deletion\n         res = json.loads(res)\n-        self.assertEqual(res[\'status\'], \'success\')\n+        self.assertEqual(res["status"], "success")\n         self.assertEqual(len(self.portal.it1.contentIds()), 0)\n \n \n@@ -156,76 +155,81 @@ class ContentsPasteTests(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n         # TYPE 1\n-        type1_fti = DexterityFTI(\'type1\')\n-        type1_fti.klass = \'plone.dexterity.content.Container\'\n+        type1_fti = DexterityFTI("type1")\n+        type1_fti.klass = "plone.dexterity.content.Container"\n         type1_fti.filter_content_types = True\n-        type1_fti.allowed_content_types = [\'type1\']\n+        type1_fti.allowed_content_types = ["type1"]\n         type1_fti.behaviors = (\n-            \'Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes\',  # noqa\n-            \'plone.app.dexterity.behaviors.metadata.IBasic\'\n+            "Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes",  # noqa\n+            "plone.app.dexterity.behaviors.metadata.IBasic",\n         )\n-        self.portal.portal_types._setObject(\'type1\', type1_fti)\n+        self.portal.portal_types._setObject("type1", type1_fti)\n         self.type1_fti = type1_fti\n \n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        self.portal.invokeFactory(\'type1\', id=\'it1\', title=\'Item 1\')\n+        self.portal.invokeFactory("type1", id="it1", title="Item 1")\n \n-    @mock.patch(\'plone.app.content.browser.contents.ContentsBaseAction.protect\', lambda x: True)  # noqa\n+    @mock.patch(\n+        "plone.app.content.browser.contents.ContentsBaseAction.protect", lambda x: True\n+    )  # noqa\n     def test_paste_success(self):\n-        """Copy content item and paste in portal root.\n-        """\n+        """Copy content item and paste in portal root."""\n         # # setup copying via @@fc-copy\n         # from plone.uuid.interfaces import IUUID\n         # self.request[\'selection\'] = [IUUID(self.portal.it1)]\n         # self.portal.restrictedTraverse(\'@@fc-copy\')()\n \n-        self.request[\'__cp\'] = self.portal.manage_copyObjects([\'it1\'])\n-        self.request.form[\'folder\'] = \'/\'\n-        res = self.portal.restrictedTraverse(\'@@fc-paste\')()\n+        self.request["__cp"] = self.portal.manage_copyObjects(["it1"])\n+        self.request.form["folder"] = "/"\n+        res = self.portal.restrictedTraverse("@@fc-paste")()\n \n         res = json.loads(res)\n-        self.assertEqual(res[\'status\'], \'success\')\n+        self.assertEqual(res["status"], "success")\n         self.assertEqual(len(self.portal.contentIds()), 2)\n \n-    @mock.patch(\'plone.app.content.browser.contents.ContentsBaseAction.protect\', lambda x: True)  # noqa\n+    @mock.patch(\n+        "plone.app.content.browser.contents.ContentsBaseAction.protect", lambda x: True\n+    )  # noqa\n     def test_paste_success_paste_in_itself(self):\n-        """Copy content item and paste in itself. Because we can.\n-        """\n-        self.request[\'__cp\'] = self.portal.manage_copyObjects([\'it1\'])\n-        self.request.form[\'folder\'] = \'/it1\'\n-        res = self.portal.it1.restrictedTraverse(\'@@fc-paste\')()\n+        """Copy content item and paste in itself. Because we can."""\n+        self.request["__cp"] = self.portal.manage_copyObjects(["it1"])\n+        self.request.form["folder"] = "/it1"\n+        res = self.portal.it1.restrictedTraverse("@@fc-paste")()\n \n         res = json.loads(res)\n-        self.assertEqual(res[\'status\'], \'success\')\n+        self.assertEqual(res["status"], "success")\n         self.assertEqual(len(self.portal.it1.contentIds()), 1)\n \n-    @mock.patch(\'plone.app.content.browser.contents.ContentsBaseAction.protect\', lambda x: True)  # noqa\n+    @mock.patch(\n+        "plone.app.content.browser.contents.ContentsBaseAction.protect", lambda x: True\n+    )  # noqa\n     def test_paste_fail_constraint(self):\n         """Fail pasting content item in itself when folder constraints don\'t\n         allow to.\n         """\n         self.type1_fti.allowed_content_types = []  # set folder constraints\n-        self.request[\'__cp\'] = self.portal.manage_copyObjects([\'it1\'])\n-        self.request.form[\'folder\'] = \'/it1\'\n-        res = self.portal.it1.restrictedTraverse(\'@@fc-paste\')()\n+        self.request["__cp"] = self.portal.manage_copyObjects(["it1"])\n+        self.request.form["folder"] = "/it1"\n+        res = self.portal.it1.restrictedTraverse("@@fc-paste")()\n \n         res = json.loads(res)\n-        self.assertEqual(res[\'status\'], \'warning\')\n+        self.assertEqual(res["status"], "warning")\n         self.assertEqual(len(self.portal.it1.contentIds()), 0)\n \n-    @mock.patch(\'plone.app.content.browser.contents.ContentsBaseAction.protect\', lambda x: True)  # noqa\n+    @mock.patch(\n+        "plone.app.content.browser.contents.ContentsBaseAction.protect", lambda x: True\n+    )  # noqa\n     def test_paste_success_with_private_anchestor(self):\n-        """Copy content item and paste into a folder with private anchestor\n-        """\n+        """Copy content item and paste into a folder with private anchestor"""\n         # Create test content /it2/it3\n-        self.portal.invokeFactory(\'type1\', id=\'it2\', title=\'Item 2\')\n-        self.portal.it2.invokeFactory(\'type1\', id=\'it3\', title=\'Item 3\')\n+        self.portal.invokeFactory("type1", id="it2", title="Item 2")\n+        self.portal.it2.invokeFactory("type1", id="it3", title="Item 3")\n         self.assertEqual(len(self.portal.it2.it3.contentIds()), 0)\n \n         # Block user access to it2, but leave access to its children\n@@ -238,13 +242,13 @@ def test_paste_success_with_private_anchestor(self):\n         setRoles(self.portal, TEST_USER_ID, [])\n \n         # Execute paste\n-        self.request[\'__cp\'] = self.portal.manage_copyObjects([\'it1\'])\n-        self.request.form[\'folder\'] = \'/it2/it3\'\n-        res = self.portal.it2.it3.restrictedTraverse(\'@@fc-paste\')()\n+        self.request["__cp"] = self.portal.manage_copyObjects(["it1"])\n+        self.request.form["folder"] = "/it2/it3"\n+        res = self.portal.it2.it3.restrictedTraverse("@@fc-paste")()\n \n         # Check for successful paste\n         res = json.loads(res)\n-        self.assertEqual(res[\'status\'], \'success\')\n+        self.assertEqual(res["status"], "success")\n         self.assertEqual(len(self.portal.it2.it3.contentIds()), 1)\n \n \n@@ -252,32 +256,33 @@ class ContentsRenameTests(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n         # TYPE 1\n-        type1_fti = DexterityFTI(\'type1\')\n-        type1_fti.klass = \'plone.dexterity.content.Container\'\n+        type1_fti = DexterityFTI("type1")\n+        type1_fti.klass = "plone.dexterity.content.Container"\n         type1_fti.filter_content_types = True\n-        type1_fti.allowed_content_types = [\'type1\']\n+        type1_fti.allowed_content_types = ["type1"]\n         type1_fti.behaviors = (\n-            \'Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes\',  # noqa\n-            \'plone.app.dexterity.behaviors.metadata.IBasic\'\n+            "Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes",  # noqa\n+            "plone.app.dexterity.behaviors.metadata.IBasic",\n         )\n-        self.portal.portal_types._setObject(\'type1\', type1_fti)\n+        self.portal.portal_types._setObject("type1", type1_fti)\n         self.type1_fti = type1_fti\n \n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-    @mock.patch(\'plone.app.content.browser.contents.ContentsBaseAction.protect\', lambda x: True)  # noqa\n+    @mock.patch(\n+        "plone.app.content.browser.contents.ContentsBaseAction.protect", lambda x: True\n+    )  # noqa\n     def test_rename_success_with_private_anchestor(self):\n-        """Rename content item from a folder with private anchestor\n-        """\n+        """Rename content item from a folder with private anchestor"""\n         # Create test content /it1/it2/it3\n-        self.portal.invokeFactory(\'type1\', id=\'it1\', title=\'Item 1\')\n-        self.portal.it1.invokeFactory(\'type1\', id=\'it2\', title=\'Item 2\')\n-        self.portal.it1.it2.invokeFactory(\'type1\', id=\'it3\', title=\'Item 3\')\n+        self.portal.invokeFactory("type1", id="it1", title="Item 1")\n+        self.portal.it1.invokeFactory("type1", id="it2", title="Item 2")\n+        self.portal.it1.it2.invokeFactory("type1", id="it3", title="Item 3")\n         self.assertEqual(len(self.portal.it1.it2.contentIds()), 1)\n \n         # Block user access to it1m but leave access to its children\n@@ -290,24 +295,25 @@ def test_rename_success_with_private_anchestor(self):\n         setRoles(self.portal, TEST_USER_ID, [])\n \n         # Execute rename request\n-        self.request.form[\'UID_1\'] = self.portal.it1.it2.it3.UID()\n-        self.request.form[\'newid_1\'] = \'it3bak\'\n-        self.request.form[\'newtitle_1\'] = \'Item 3 BAK\'\n-        res = self.portal.it1.it2.restrictedTraverse(\'@@fc-rename\')()\n+        self.request.form["UID_1"] = self.portal.it1.it2.it3.UID()\n+        self.request.form["newid_1"] = "it3bak"\n+        self.request.form["newtitle_1"] = "Item 3 BAK"\n+        res = self.portal.it1.it2.restrictedTraverse("@@fc-rename")()\n \n         # Check for successful deletion\n         res = json.loads(res)\n-        self.assertEqual(res[\'status\'], \'success\')\n-        self.assertEqual(self.portal.it1.it2.it3bak.id, \'it3bak\')\n-        self.assertEqual(self.portal.it1.it2.it3bak.title, \'Item 3 BAK\')\n+        self.assertEqual(res["status"], "success")\n+        self.assertEqual(self.portal.it1.it2.it3bak.id, "it3bak")\n+        self.assertEqual(self.portal.it1.it2.it3bak.title, "Item 3 BAK")\n \n-    @mock.patch(\'plone.app.content.browser.contents.ContentsBaseAction.protect\', lambda x: True)  # noqa\n+    @mock.patch(\n+        "plone.app.content.browser.contents.ContentsBaseAction.protect", lambda x: True\n+    )  # noqa\n     def test_rename_success_on_inactive_content(self):\n-        """Rename an expired content item from a folder.\n-        """\n+        """Rename an expired content item from a folder."""\n         # Create content\n-        self.portal.invokeFactory(\'type1\', id=\'it1\', title=\'Item 1\')\n-        self.portal.it1.invokeFactory(\'type1\', id=\'it2\', title=\'Item 2\')\n+        self.portal.invokeFactory("type1", id="it1", title="Item 1")\n+        self.portal.it1.invokeFactory("type1", id="it2", title="Item 2")\n \n         # Expire it2\n         exp = datetime.now() - timedelta(days=10)\n@@ -319,52 +325,48 @@ def test_rename_success_on_inactive_content(self):\n         setRoles(self.portal, TEST_USER_ID, [])\n \n         # Execute rename request\n-        self.request.form[\'UID_1\'] = self.portal.it1.it2.UID()\n-        self.request.form[\'newid_1\'] = \'it2bak\'\n-        self.request.form[\'newtitle_1\'] = \'Item 2 BAK\'\n-        res = self.portal.it1.restrictedTraverse(\'@@fc-rename\')()\n+        self.request.form["UID_1"] = self.portal.it1.it2.UID()\n+        self.request.form["newid_1"] = "it2bak"\n+        self.request.form["newtitle_1"] = "Item 2 BAK"\n+        res = self.portal.it1.restrictedTraverse("@@fc-rename")()\n \n         # Check for successful deletion\n         res = json.loads(res)\n-        self.assertEqual(res[\'status\'], \'success\')\n-        self.assertEqual(self.portal.it1.it2bak.id, \'it2bak\')\n-        self.assertEqual(self.portal.it1.it2bak.title, \'Item 2 BAK\')\n+        self.assertEqual(res["status"], "success")\n+        self.assertEqual(self.portal.it1.it2bak.id, "it2bak")\n+        self.assertEqual(self.portal.it1.it2bak.title, "Item 2 BAK")\n \n \n class AllowUploadViewTests(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n         # TYPE 1\n-        type1_fti = DexterityFTI(\'type1\')\n-        type1_fti.klass = \'plone.dexterity.content.Container\'\n+        type1_fti = DexterityFTI("type1")\n+        type1_fti.klass = "plone.dexterity.content.Container"\n         type1_fti.filter_content_types = True\n         type1_fti.allowed_content_types = []\n-        type1_fti.behaviors = (\n-            \'plone.app.dexterity.behaviors.metadata.IBasic\',\n-        )\n-        self.portal.portal_types._setObject(\'type1\', type1_fti)\n+        type1_fti.behaviors = ("plone.app.dexterity.behaviors.metadata.IBasic",)\n+        self.portal.portal_types._setObject("type1", type1_fti)\n         self.type1_fti = type1_fti\n \n         # TYPE 2\n-        type2_fti = DexterityFTI(\'type1\')\n-        type2_fti.klass = \'plone.dexterity.content.Item\'\n+        type2_fti = DexterityFTI("type1")\n+        type2_fti.klass = "plone.dexterity.content.Item"\n         type2_fti.filter_content_types = True\n         type2_fti.allowed_content_types = []\n-        type2_fti.behaviors = (\n-            \'plone.app.dexterity.behaviors.metadata.IBasic\',\n-        )\n-        self.portal.portal_types._setObject(\'type2\', type2_fti)\n+        type2_fti.behaviors = ("plone.app.dexterity.behaviors.metadata.IBasic",)\n+        self.portal.portal_types._setObject("type2", type2_fti)\n         self.type2_fti = type2_fti\n \n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        self.portal.invokeFactory(\'type1\', id=\'it1\', title=\'Item 1\')\n-        self.portal.invokeFactory(\'type2\', id=\'it2\', title=\'Item 2\')\n+        self.portal.invokeFactory("type1", id="it1", title="Item 1")\n+        self.portal.invokeFactory("type2", id="it2", title="Item 2")\n \n     def test_allow_upload(self):\n         """Test, if file or images are allowed in a container in different FTI\n@@ -372,87 +374,87 @@ def test_allow_upload(self):\n         """\n \n         # Test non-container, none allowed\n-        allow_upload = self.portal.it2.restrictedTraverse(\'@@allow_upload\')\n+        allow_upload = self.portal.it2.restrictedTraverse("@@allow_upload")\n         allow_upload = json.loads(allow_upload())\n \n-        self.assertEqual(allow_upload[\'allowUpload\'], False)\n-        self.assertEqual(allow_upload[\'allowImages\'], False)\n-        self.assertEqual(allow_upload[\'allowFiles\'], False)\n+        self.assertEqual(allow_upload["allowUpload"], False)\n+        self.assertEqual(allow_upload["allowImages"], False)\n+        self.assertEqual(allow_upload["allowFiles"], False)\n \n         # Test none allowed\n         self.type1_fti.allowed_content_types = []\n-        allow_upload = self.portal.it1.restrictedTraverse(\'@@allow_upload\')\n+        allow_upload = self.portal.it1.restrictedTraverse("@@allow_upload")\n         allow_upload = json.loads(allow_upload())\n \n-        self.assertEqual(allow_upload[\'allowUpload\'], False)\n-        self.assertEqual(allow_upload[\'allowImages\'], False)\n-        self.assertEqual(allow_upload[\'allowFiles\'], False)\n+        self.assertEqual(allow_upload["allowUpload"], False)\n+        self.assertEqual(allow_upload["allowImages"], False)\n+        self.assertEqual(allow_upload["allowFiles"], False)\n \n         # Test images allowed\n-        self.type1_fti.allowed_content_types = [\'Image\']\n-        allow_upload = self.portal.it1.restrictedTraverse(\'@@allow_upload\')\n+        self.type1_fti.allowed_content_types = ["Image"]\n+        allow_upload = self.portal.it1.restrictedTraverse("@@allow_upload")\n         allow_upload = json.loads(allow_upload())\n \n-        self.assertEqual(allow_upload[\'allowUpload\'], True)\n-        self.assertEqual(allow_upload[\'allowImages\'], True)\n-        self.assertEqual(allow_upload[\'allowFiles\'], False)\n+        self.assertEqual(allow_upload["allowUpload"], True)\n+        self.assertEqual(allow_upload["allowImages"], True)\n+        self.assertEqual(allow_upload["allowFiles"], False)\n \n         # Test files allowed\n-        self.type1_fti.allowed_content_types = [\'File\']\n-        allow_upload = self.portal.it1.restrictedTraverse(\'@@allow_upload\')\n+        self.type1_fti.allowed_content_types = ["File"]\n+        allow_upload = self.portal.it1.restrictedTraverse("@@allow_upload")\n         allow_upload = json.loads(allow_upload())\n \n-        self.assertEqual(allow_upload[\'allowUpload\'], True)\n-        self.assertEqual(allow_upload[\'allowImages\'], False)\n-        self.assertEqual(allow_upload[\'allowFiles\'], True)\n+        self.assertEqual(allow_upload["allowUpload"], True)\n+        self.assertEqual(allow_upload["allowImages"], False)\n+        self.assertEqual(allow_upload["allowFiles"], True)\n \n         # Test images and files allowed\n-        self.type1_fti.allowed_content_types = [\'Image\', \'File\']\n-        allow_upload = self.portal.it1.restrictedTraverse(\'@@allow_upload\')\n+        self.type1_fti.allowed_content_types = ["Image", "File"]\n+        allow_upload = self.portal.it1.restrictedTraverse("@@allow_upload")\n         allow_upload = json.loads(allow_upload())\n \n-        self.assertEqual(allow_upload[\'allowUpload\'], True)\n-        self.assertEqual(allow_upload[\'allowImages\'], True)\n-        self.assertEqual(allow_upload[\'allowFiles\'], True)\n+        self.assertEqual(allow_upload["allowUpload"], True)\n+        self.assertEqual(allow_upload["allowImages"], True)\n+        self.assertEqual(allow_upload["allowFiles"], True)\n \n         # Test files allowed, path via request variable\n-        self.type1_fti.allowed_content_types = [\'File\']\n+        self.type1_fti.allowed_content_types = ["File"]\n         # First, test on Portal root to see the difference\n-        allow_upload = self.portal.restrictedTraverse(\'@@allow_upload\')\n+        allow_upload = self.portal.restrictedTraverse("@@allow_upload")\n         allow_upload = json.loads(allow_upload())\n-        self.assertEqual(allow_upload[\'allowUpload\'], True)\n-        self.assertEqual(allow_upload[\'allowImages\'], True)\n-        self.assertEqual(allow_upload[\'allowFiles\'], True)\n+        self.assertEqual(allow_upload["allowUpload"], True)\n+        self.assertEqual(allow_upload["allowImages"], True)\n+        self.assertEqual(allow_upload["allowFiles"], True)\n         # Then, with path set to sub item\n-        allow_upload = self.portal.restrictedTraverse(\'@@allow_upload\')\n-        allow_upload.request.form[\'path\'] = \'/plone/it1\'\n+        allow_upload = self.portal.restrictedTraverse("@@allow_upload")\n+        allow_upload.request.form["path"] = "/plone/it1"\n         allow_upload = json.loads(allow_upload())\n-        self.assertEqual(allow_upload[\'allowUpload\'], True)\n-        self.assertEqual(allow_upload[\'allowImages\'], False)\n-        self.assertEqual(allow_upload[\'allowFiles\'], True)\n+        self.assertEqual(allow_upload["allowUpload"], True)\n+        self.assertEqual(allow_upload["allowImages"], False)\n+        self.assertEqual(allow_upload["allowFiles"], True)\n \n \n class FCPropertiesTests(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         # Disable plone.protect for these tests\n-        self.request.environ[\'REQUEST_METHOD\'] = \'POST\'\n-        self.request.form[\'_authenticator\'] = createToken()\n+        self.request.environ["REQUEST_METHOD"] = "POST"\n+        self.request.form["_authenticator"] = createToken()\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         # set available languages\n         registry = getUtility(IRegistry)\n-        registry[\'plone.available_languages\'] = [\'en\', \'de\']\n+        registry["plone.available_languages"] = ["en", "de"]\n \n-        self.portal.invokeFactory(\'Folder\', \'main1\')\n-        self.portal.main1.invokeFactory(\'Folder\', \'sub1\')\n-        self.portal.main1.sub1.invokeFactory(\'Folder\', \'subsub1\')\n-        self.portal.main1.invokeFactory(\'Document\', \'sub2\')\n-        self.portal.invokeFactory(\'Document\', \'main2\')\n+        self.portal.invokeFactory("Folder", "main1")\n+        self.portal.main1.invokeFactory("Folder", "sub1")\n+        self.portal.main1.sub1.invokeFactory("Folder", "subsub1")\n+        self.portal.main1.invokeFactory("Document", "sub2")\n+        self.portal.invokeFactory("Document", "main2")\n \n         self.setup_initial()\n \n@@ -464,33 +466,31 @@ def setup_initial(self):\n         self.portal.main1.sub2.exclude_from_nav = True\n         self.portal.main2.exclude_from_nav = True\n \n-        self.portal.main1.language = \'en\'\n-        self.portal.main1.sub1.language = \'en\'\n-        self.portal.main1.sub1.subsub1.language = \'en\'\n-        self.portal.main1.sub2.language = \'en\'\n-        self.portal.main2.language = \'en\'\n+        self.portal.main1.language = "en"\n+        self.portal.main1.sub1.language = "en"\n+        self.portal.main1.sub1.subsub1.language = "en"\n+        self.portal.main1.sub2.language = "en"\n+        self.portal.main2.language = "en"\n \n     def test_fc_properties__changes__no_recurse(self):\n-        """Test changing properties without recursion.\n-        """\n+        """Test changing properties without recursion."""\n         req = self.request\n-        req.form[\'language\'] = \'de\'\n-        req.form[\'exclude-from-nav\'] = \'no\'\n-        req.form[\'selection\'] = \'["{}", "{}"]\'.format(\n-            IUUID(self.portal.main1),\n-            IUUID(self.portal.main2)\n+        req.form["language"] = "de"\n+        req.form["exclude-from-nav"] = "no"\n+        req.form["selection"] = \'["{}", "{}"]\'.format(\n+            IUUID(self.portal.main1), IUUID(self.portal.main2)\n         )\n \n-        view = getMultiAdapter((self.portal, req), name=\'fc-properties\')\n+        view = getMultiAdapter((self.portal, req), name="fc-properties")\n \n         # Call the view and execute the actions\n         view()\n \n-        self.assertEqual(self.portal.main1.language, \'de\')\n-        self.assertEqual(self.portal.main2.language, \'de\')\n-        self.assertEqual(self.portal.main1.sub1.language, \'en\')\n-        self.assertEqual(self.portal.main1.sub1.subsub1.language, \'en\')\n-        self.assertEqual(self.portal.main1.sub2.language, \'en\')\n+        self.assertEqual(self.portal.main1.language, "de")\n+        self.assertEqual(self.portal.main2.language, "de")\n+        self.assertEqual(self.portal.main1.sub1.language, "en")\n+        self.assertEqual(self.portal.main1.sub1.subsub1.language, "en")\n+        self.assertEqual(self.portal.main1.sub2.language, "en")\n \n         self.assertEqual(self.portal.main1.exclude_from_nav, False)\n         self.assertEqual(self.portal.main2.exclude_from_nav, False)\n@@ -499,27 +499,25 @@ def test_fc_properties__changes__no_recurse(self):\n         self.assertEqual(self.portal.main1.sub2.exclude_from_nav, True)\n \n     def test_fc_properties__changes__with_recurse(self):\n-        """Test changing properties without recursion.\n-        """\n+        """Test changing properties without recursion."""\n         req = self.request\n-        req.form[\'language\'] = \'de\'\n-        req.form[\'exclude-from-nav\'] = \'no\'\n-        req.form[\'recurse\'] = \'yes\'\n-        req.form[\'selection\'] = \'["{}", "{}"]\'.format(\n-            IUUID(self.portal.main1),\n-            IUUID(self.portal.main2)\n+        req.form["language"] = "de"\n+        req.form["exclude-from-nav"] = "no"\n+        req.form["recurse"] = "yes"\n+        req.form["selection"] = \'["{}", "{}"]\'.format(\n+            IUUID(self.portal.main1), IUUID(self.portal.main2)\n         )\n \n-        view = getMultiAdapter((self.portal, req), name=\'fc-properties\')\n+        view = getMultiAdapter((self.portal, req), name="fc-properties")\n \n         # Call the view and execute the actions\n         view()\n \n-        self.assertEqual(self.portal.main1.language, \'de\')\n-        self.assertEqual(self.portal.main2.language, \'de\')\n-        self.assertEqual(self.portal.main1.sub1.language, \'de\')\n-        self.assertEqual(self.portal.main1.sub1.subsub1.language, \'de\')\n-        self.assertEqual(self.portal.main1.sub2.language, \'de\')\n+        self.assertEqual(self.portal.main1.language, "de")\n+        self.assertEqual(self.portal.main2.language, "de")\n+        self.assertEqual(self.portal.main1.sub1.language, "de")\n+        self.assertEqual(self.portal.main1.sub1.subsub1.language, "de")\n+        self.assertEqual(self.portal.main1.sub2.language, "de")\n \n         self.assertEqual(self.portal.main1.exclude_from_nav, False)\n         self.assertEqual(self.portal.main2.exclude_from_nav, False)\n@@ -547,12 +545,13 @@ class TestSafeHtmlInFolderContents(unittest.TestCase):\n     Same for other fields, from PloneHotfix20210518, see\n     https://plone.org/security/hotfix/20210518/stored-xss-in-folder-contents\n     """\n+\n     layer = PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def get_browser(self):\n         browser = Browser(self.layer["app"])\n@@ -657,6 +656,6 @@ def assert_not_in(self, target, body):\n         index = body.index(target)\n         start = max(0, index - 50)\n         end = min(index + len(target) + 50, len(body))\n-        assert False, "Text \'{0}\' unexpectedly found in body: ... {1} ...".format(\n+        assert False, "Text \'{}\' unexpectedly found in body: ... {} ...".format(\n             target, body[start:end]\n         )\ndiff --git a/plone/app/content/tests/test_folder.py b/plone/app/content/tests/test_folder.py\nindex da4d98b..eb37148 100644\n--- a/plone/app/content/tests/test_folder.py\n+++ b/plone/app/content/tests/test_folder.py\n@@ -1,53 +1,51 @@\n+import json\n+import unittest\n+from urllib.parse import urlparse\n+\n from DateTime import DateTime\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n-from plone.app.testing import login\n-from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, login, setRoles\n from plone.dexterity.fti import DexterityFTI\n from plone.locking.interfaces import IRefreshableLockable\n from plone.protect.authenticator import createToken\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.utils import getToolByName\n-from urllib.parse import urlparse\n from Testing.makerequest import makerequest\n from transaction import commit\n from zope.annotation.interfaces import IAttributeAnnotatable\n from zope.interface import alsoProvides\n from zope.publisher.browser import TestRequest\n \n-import json\n-import unittest\n+from plone.app.content.testing import (\n+    PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING,\n+    PLONE_APP_CONTENT_DX_INTEGRATION_TESTING,\n+)\n \n \n class BaseTest(unittest.TestCase):\n-\n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        self.portal.invokeFactory(\'Document\', id="page", title="page")\n+        self.portal.invokeFactory("Document", id="page", title="page")\n         self.portal.page.reindexObject()\n \n         self.request = TestRequest(\n-            environ={\n-                \'HTTP_ACCEPT_LANGUAGE\': \'en\',\n-                \'REQUEST_METHOD\': \'POST\'\n-            },\n+            environ={"HTTP_ACCEPT_LANGUAGE": "en", "REQUEST_METHOD": "POST"},\n             form={\n-                \'selection\': \'["\' + IUUID(self.portal.page) + \'"]\',\n-                \'_authenticator\': createToken(),\n-                \'folder\': \'/\'\n-            }\n+                "selection": \'["\' + IUUID(self.portal.page) + \'"]\',\n+                "_authenticator": createToken(),\n+                "folder": "/",\n+            },\n         )\n-        self.request.REQUEST_METHOD = \'POST\'\n+        self.request.REQUEST_METHOD = "POST"\n         # Mock physicalPathFromURL\n         # NOTE: won\'t return the right path in virtual hosting environments\n-        self.request.physicalPathFromURL = lambda url: urlparse(url).path.split(\'/\')  # noqa\n+        self.request.physicalPathFromURL = lambda url: urlparse(url).path.split(\n+            "/"\n+        )  # noqa\n         alsoProvides(self.request, IAttributeAnnotatable)\n-        self.userList = \'one,two\'\n+        self.userList = "one,two"\n \n \n class DXBaseTest(BaseTest):\n@@ -55,62 +53,74 @@ class DXBaseTest(BaseTest):\n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         portal_types = getToolByName(self.portal, "portal_types")\n-        if \'Document\' not in portal_types.objectIds():\n-            fti = DexterityFTI(\'Document\')\n-            portal_types._setObject(\'Document\', fti)\n+        if "Document" not in portal_types.objectIds():\n+            fti = DexterityFTI("Document")\n+            portal_types._setObject("Document", fti)\n         super().setUp()\n \n \n class PropertiesDXTest(DXBaseTest):\n-\n     def testEffective(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'effectiveDate\'] = \'1999/01/01 09:00\'\n+        from plone.app.content.browser.contents.properties import (\n+            PropertiesActionView,\n+        )  # noqa\n+\n+        self.request.form["effectiveDate"] = "1999/01/01 09:00"\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEqual(self.portal.page.effective_date,\n-                          DateTime(\'1999/01/01 09:00\'))\n+        self.assertEqual(self.portal.page.effective_date, DateTime("1999/01/01 09:00"))\n \n     def testExpires(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'expirationDate\'] = \'1999/01/01 09:00\'\n+        from plone.app.content.browser.contents.properties import (\n+            PropertiesActionView,\n+        )  # noqa\n+\n+        self.request.form["expirationDate"] = "1999/01/01 09:00"\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEqual(self.portal.page.expiration_date,\n-                          DateTime(\'1999/01/01 09:00\'))\n+        self.assertEqual(self.portal.page.expiration_date, DateTime("1999/01/01 09:00"))\n \n     def testSetDexterityExcludeFromNav(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'exclude-from-nav\'] = \'yes\'\n+        from plone.app.content.browser.contents.properties import (\n+            PropertiesActionView,\n+        )  # noqa\n+\n+        self.request.form["exclude-from-nav"] = "yes"\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n         self.assertEqual(self.portal.page.exclude_from_nav, True)\n \n     def testRights(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'copyright\'] = \'foobar\'\n+        from plone.app.content.browser.contents.properties import (\n+            PropertiesActionView,\n+        )  # noqa\n+\n+        self.request.form["copyright"] = "foobar"\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEqual(self.portal.page.rights, \'foobar\')\n+        self.assertEqual(self.portal.page.rights, "foobar")\n \n     def testContributors(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'contributors\'] = self.userList\n+        from plone.app.content.browser.contents.properties import (\n+            PropertiesActionView,\n+        )  # noqa\n+\n+        self.request.form["contributors"] = self.userList\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEqual(self.portal.page.contributors, (\'one\', \'two\'))\n+        self.assertEqual(self.portal.page.contributors, ("one", "two"))\n \n     def testCreators(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'creators\'] = self.userList\n+        from plone.app.content.browser.contents.properties import (\n+            PropertiesActionView,\n+        )  # noqa\n+\n+        self.request.form["creators"] = self.userList\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEqual(\n-            self.portal.page.creators,\n-            (\'one\', \'two\')\n-        )\n+        self.assertEqual(self.portal.page.creators, ("one", "two"))\n \n \n class WorkflowTest(BaseTest):\n@@ -118,44 +128,41 @@ class WorkflowTest(BaseTest):\n     layer = PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n \n     def convertDateTimeToIndexRepr(self, date):\n-        t_tup = date.toZone(\'UTC\').parts()\n+        t_tup = date.toZone("UTC").parts()\n         yr = t_tup[0]\n         mo = t_tup[1]\n         dy = t_tup[2]\n         hr = t_tup[3]\n         mn = t_tup[4]\n \n-        return ((((yr * 12 + mo) * 31 + dy) * 24 + hr) * 60 + mn)\n+        return (((yr * 12 + mo) * 31 + dy) * 24 + hr) * 60 + mn\n \n     def testStateChange(self):\n-        from plone.app.content.browser.contents.workflow import WorkflowActionView  # noqa\n-        self.request.form[\'transition\'] = \'publish\'\n-        default_effective = DateTime(\'1969/12/31 00:00:00 {}\'.format(\n-            DateTime().timezone()\n-        ))\n-        default_effective_index = self.convertDateTimeToIndexRepr(\n-            default_effective\n+        from plone.app.content.browser.contents.workflow import (\n+            WorkflowActionView,\n+        )  # noqa\n+\n+        self.request.form["transition"] = "publish"\n+        default_effective = DateTime(\n+            "1969/12/31 00:00:00 {}".format(DateTime().timezone())\n         )\n+        default_effective_index = self.convertDateTimeToIndexRepr(default_effective)\n         pc = getToolByName(self.portal, "portal_catalog")\n         # i need to call it, to populate catalog indexes\n         pc()\n-        self.assertEqual(\n-            pc.uniqueValuesFor(\'effective\'),\n-            (default_effective_index,))\n+        self.assertEqual(pc.uniqueValuesFor("effective"), (default_effective_index,))\n         view = WorkflowActionView(self.portal.page, self.request)\n         view()\n         workflowTool = getToolByName(self.portal, "portal_workflow")\n         self.assertEqual(\n-            workflowTool.getInfoFor(self.portal.page, \'review_state\'),\n-            \'published\')\n+            workflowTool.getInfoFor(self.portal.page, "review_state"), "published"\n+        )\n         # commit to update indexes in catalog\n         commit()\n         effective_index = self.convertDateTimeToIndexRepr(\n             self.portal.page.effective_date\n         )\n-        self.assertEqual(\n-            pc.uniqueValuesFor(\'effective\'),\n-            (effective_index,))\n+        self.assertEqual(pc.uniqueValuesFor("effective"), (effective_index,))\n \n \n class RenameTest(BaseTest):\n@@ -164,34 +171,36 @@ class RenameTest(BaseTest):\n \n     def test_folder_rename_objects(self):\n         from plone.app.content.browser.contents.rename import RenameActionView\n+\n         uid = IUUID(self.portal.page)\n-        self.portal.invokeFactory(\'Document\', id=\'page2\', title=\'2nd page\')\n+        self.portal.invokeFactory("Document", id="page2", title="2nd page")\n         uid2 = IUUID(self.portal.page2)\n-        self.request.form.update({\n-            \'UID_0\': uid,\n-            \'newid_0\': \'I am UnSafe! \',\n-            \'newtitle_0\': \'New!\',\n-            \'UID_1\': uid2,\n-            \'newid_1\': \'. ,;new id : _! \',\n-            \'newtitle_1\': \'Newer!\'\n-        })\n+        self.request.form.update(\n+            {\n+                "UID_0": uid,\n+                "newid_0": "I am UnSafe! ",\n+                "newtitle_0": "New!",\n+                "UID_1": uid2,\n+                "newid_1": ". ,;new id : _! ",\n+                "newtitle_1": "Newer!",\n+            }\n+        )\n         view = RenameActionView(self.portal, self.request)\n         view()\n-        self.assertEqual(self.portal[\'i-am-unsafe\'].title, "New!")\n-        self.assertEqual(self.portal[\'new-id-_\'].title, "Newer!")\n+        self.assertEqual(self.portal["i-am-unsafe"].title, "New!")\n+        self.assertEqual(self.portal["new-id-_"].title, "Newer!")\n \n     def test_default_page_updated_on_rename_objects(self):\n         from plone.app.content.browser.contents.rename import RenameActionView\n-        self.portal.setDefaultPage(\'page\')\n+\n+        self.portal.setDefaultPage("page")\n         uid = IUUID(self.portal.page)\n-        self.request.form.update({\n-            \'UID_0\': uid,\n-            \'newid_0\': \'page-renamed\',\n-            \'newtitle_0\': \'Page\'\n-        })\n+        self.request.form.update(\n+            {"UID_0": uid, "newid_0": "page-renamed", "newtitle_0": "Page"}\n+        )\n         view = RenameActionView(self.portal, self.request)\n         view()\n-        self.assertEqual(self.portal.getDefaultPage(), \'page-renamed\')\n+        self.assertEqual(self.portal.getDefaultPage(), "page-renamed")\n \n \n class ContextInfoTest(BaseTest):\n@@ -200,37 +209,39 @@ class ContextInfoTest(BaseTest):\n \n     def testStateChange(self):\n         from plone.app.content.browser.contents import ContextInfo\n+\n         view = ContextInfo(self.portal.page, self.request)\n         result = json.loads(view())\n-        self.assertEqual(result[\'object\'][\'Title\'], \'page\')\n-        self.assertTrue(len(result[\'breadcrumbs\']) > 0)\n+        self.assertEqual(result["object"]["Title"], "page")\n+        self.assertTrue(len(result["breadcrumbs"]) > 0)\n \n \n class CutCopyLockedTest(BaseTest):\n-    """in folder contents """\n+    """in folder contents"""\n \n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        self.portal.invokeFactory(\'Document\', id="page", title="page")\n+        self.portal.invokeFactory("Document", id="page", title="page")\n         self.portal.page.reindexObject()\n \n-        self.env = {\'HTTP_ACCEPT_LANGUAGE\': \'en\', \'REQUEST_METHOD\': \'POST\'}\n-        self.request = makerequest(self.layer[\'app\']).REQUEST\n+        self.env = {"HTTP_ACCEPT_LANGUAGE": "en", "REQUEST_METHOD": "POST"}\n+        self.request = makerequest(self.layer["app"]).REQUEST\n         self.request.environ.update(self.env)\n         self.request.form = {\n-            \'selection\': \'["\' + IUUID(self.portal.page) + \'"]\',\n-            \'_authenticator\': createToken(),\n-            \'folder\': \'/\'\n+            "selection": \'["\' + IUUID(self.portal.page) + \'"]\',\n+            "_authenticator": createToken(),\n+            "folder": "/",\n         }\n-        self.request.REQUEST_METHOD = \'POST\'\n+        self.request.REQUEST_METHOD = "POST"\n \n     def test_cut_object_when_locked(self):\n         from plone.app.content.browser.contents.cut import CutActionView\n+\n         lockable = IRefreshableLockable(self.portal.page)\n         lockable.lock()\n         view = CutActionView(self.portal, self.request)\n@@ -244,31 +255,32 @@ class DeleteDXTest(BaseTest):\n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        self.portal.invokeFactory(\'Document\', id="page", title="page")\n+        self.portal.invokeFactory("Document", id="page", title="page")\n         self.portal.page.reindexObject()\n \n-        self.env = {\'HTTP_ACCEPT_LANGUAGE\': \'en\', \'REQUEST_METHOD\': \'POST\'}\n-        self.request = makerequest(self.layer[\'app\']).REQUEST\n+        self.env = {"HTTP_ACCEPT_LANGUAGE": "en", "REQUEST_METHOD": "POST"}\n+        self.request = makerequest(self.layer["app"]).REQUEST\n         self.request.environ.update(self.env)\n         self.request.form = {\n-            \'selection\': \'["\' + IUUID(self.portal.page) + \'"]\',\n-            \'_authenticator\': createToken(),\n-            \'folder\': \'/\'\n+            "selection": \'["\' + IUUID(self.portal.page) + \'"]\',\n+            "_authenticator": createToken(),\n+            "folder": "/",\n         }\n-        self.request.REQUEST_METHOD = \'POST\'\n+        self.request.REQUEST_METHOD = "POST"\n \n     def make_request(self):\n-        request = makerequest(self.layer[\'app\'], environ=self.env).REQUEST\n+        request = makerequest(self.layer["app"], environ=self.env).REQUEST\n         self.request.environ.update(self.env)\n-        request.REQUEST_METHOD = \'POST\'\n+        request.REQUEST_METHOD = "POST"\n         return request\n \n     def test_delete_object(self):\n         from plone.app.content.browser.contents.delete import DeleteActionView\n+\n         page_id = self.portal.page.id\n         self.assertTrue(page_id in self.portal)\n         view = DeleteActionView(self.portal, self.request)\n@@ -277,6 +289,7 @@ def test_delete_object(self):\n \n     def test_delete_object_when_locked(self):\n         from plone.app.content.browser.contents.delete import DeleteActionView\n+\n         lockable = IRefreshableLockable(self.portal.page)\n         lockable.lock()\n         view = DeleteActionView(self.portal, self.request)\n@@ -285,13 +298,9 @@ def test_delete_object_when_locked(self):\n \n     def test_delete_wrong_object_by_acquisition(self):\n         page_id = self.portal.page.id\n-        f1 = self.portal.invokeFactory(\'Folder\', id="f1", title="folder one")\n+        f1 = self.portal.invokeFactory("Folder", id="f1", title="folder one")\n         # created a nested page with the same id as the one at the site root\n-        p1 = self.portal[f1].invokeFactory(\n-            \'Document\',\n-            id=page_id,\n-            title="page"\n-        )\n+        p1 = self.portal[f1].invokeFactory("Document", id=page_id, title="page")\n         self.assertEqual(p1, page_id)\n         request2 = self.make_request()\n \n@@ -301,12 +310,13 @@ def test_delete_wrong_object_by_acquisition(self):\n \n         # instantiate two different views and delete the same object with each\n         from plone.app.content.browser.contents.delete import DeleteActionView\n+\n         object_uuid = IUUID(self.portal[f1][p1])\n         for req in [self.request, request2]:\n             req.form = {\n-                \'selection\': f\'["{object_uuid}"]\',\n-                \'_authenticator\': createToken(),\n-                \'folder\': f\'/{f1}/\'\n+                "selection": f\'["{object_uuid}"]\',\n+                "_authenticator": createToken(),\n+                "folder": f"/{f1}/",\n             }\n             view = DeleteActionView(self.portal, req)\n             view()\n@@ -322,46 +332,38 @@ class RearrangeDXTest(BaseTest):\n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        self.portal.invokeFactory(\n-            \'Folder\',\n-            id="basefolder",\n-            title="Folder Base"\n-        )\n+        self.portal.invokeFactory("Folder", id="basefolder", title="Folder Base")\n         self.bf = self.portal.basefolder\n         self.bf.reindexObject()\n         for idx in range(0, 5):\n             newid = f"f{idx}"\n             self.bf.invokeFactory(\n-                \'Folder\',\n+                "Folder",\n                 id=newid,\n                 # title in reverse order\n-                title="Folder {}".format(4-idx)\n+                title=f"Folder {4-idx}",\n             )\n             self.bf[newid].reindexObject()\n \n         # create 3 documents in plone root\n         for idx in range(0, 3):\n             _id = f"page_{idx}"\n-            self.portal.invokeFactory(\n-                \'Document\',\n-                id=_id,\n-                title=f"Page {idx}"\n-            )\n+            self.portal.invokeFactory("Document", id=_id, title=f"Page {idx}")\n             self.portal[_id].reindexObject()\n \n-        self.env = {\'HTTP_ACCEPT_LANGUAGE\': \'en\', \'REQUEST_METHOD\': \'POST\'}\n-        self.request = makerequest(self.layer[\'app\']).REQUEST\n+        self.env = {"HTTP_ACCEPT_LANGUAGE": "en", "REQUEST_METHOD": "POST"}\n+        self.request = makerequest(self.layer["app"]).REQUEST\n         self.request.environ.update(self.env)\n         self.request.form = {\n-            \'selection\': \'["\' + IUUID(self.bf) + \'"]\',\n-            \'_authenticator\': createToken(),\n-            \'folder\': \'/basefolder\'\n+            "selection": \'["\' + IUUID(self.bf) + \'"]\',\n+            "_authenticator": createToken(),\n+            "folder": "/basefolder",\n         }\n-        self.request.REQUEST_METHOD = \'POST\'\n+        self.request.REQUEST_METHOD = "POST"\n \n     def test_initial_order(self):\n         # just to be sure preconditions are fine\n@@ -371,117 +373,143 @@ def test_initial_order(self):\n         self.assertEqual(\n             [(c[0], c[1].Title()) for c in self.bf.contentItems()],\n             [\n-                (\'f0\', \'Folder 4\'),\n-                (\'f1\', \'Folder 3\'),\n-                (\'f2\', \'Folder 2\'),\n-                (\'f3\', \'Folder 1\'),\n-                (\'f4\', \'Folder 0\'),\n-            ]\n+                ("f0", "Folder 4"),\n+                ("f1", "Folder 3"),\n+                ("f2", "Folder 2"),\n+                ("f3", "Folder 1"),\n+                ("f4", "Folder 0"),\n+            ],\n         )\n \n     def test_rearrange_by_title(self):\n-        from plone.app.content.browser.contents.rearrange import RearrangeActionView  # noqa\n-        self.request.form.update({\n-            \'rearrange_on\': \'sortable_title\',\n-        })\n+        from plone.app.content.browser.contents.rearrange import (\n+            RearrangeActionView,\n+        )  # noqa\n+\n+        self.request.form.update(\n+            {\n+                "rearrange_on": "sortable_title",\n+            }\n+        )\n         view = RearrangeActionView(self.bf, self.request)\n         view()\n         self.assertEqual(\n             [(c[0], c[1].Title()) for c in self.bf.contentItems()],\n             [\n-                (\'f4\', \'Folder 0\'),\n-                (\'f3\', \'Folder 1\'),\n-                (\'f2\', \'Folder 2\'),\n-                (\'f1\', \'Folder 3\'),\n-                (\'f0\', \'Folder 4\'),\n+                ("f4", "Folder 0"),\n+                ("f3", "Folder 1"),\n+                ("f2", "Folder 2"),\n+                ("f1", "Folder 3"),\n+                ("f0", "Folder 4"),\n             ],\n         )\n \n     def test_item_order_move_to_top(self):\n-        from plone.app.content.browser.contents.rearrange import ItemOrderActionView  # noqa\n-        self.request.form.update({\n-            \'id\': \'f2\',\n-            \'delta\': \'top\',\n-        })\n+        from plone.app.content.browser.contents.rearrange import (\n+            ItemOrderActionView,\n+        )  # noqa\n+\n+        self.request.form.update(\n+            {\n+                "id": "f2",\n+                "delta": "top",\n+            }\n+        )\n         view = ItemOrderActionView(self.bf, self.request)\n         view()\n         self.assertEqual(\n             [(c[0], c[1].Title()) for c in self.bf.contentItems()],\n             [\n-                (\'f2\', \'Folder 2\'),\n-                (\'f0\', \'Folder 4\'),\n-                (\'f1\', \'Folder 3\'),\n-                (\'f3\', \'Folder 1\'),\n-                (\'f4\', \'Folder 0\'),\n-            ]\n+                ("f2", "Folder 2"),\n+                ("f0", "Folder 4"),\n+                ("f1", "Folder 3"),\n+                ("f3", "Folder 1"),\n+                ("f4", "Folder 0"),\n+            ],\n         )\n \n     def test_item_order_move_to_bottom(self):\n-        from plone.app.content.browser.contents.rearrange import ItemOrderActionView  # noqa\n-        self.request.form.update({\n-            \'id\': \'f2\',\n-            \'delta\': \'bottom\',\n-        })\n+        from plone.app.content.browser.contents.rearrange import (\n+            ItemOrderActionView,\n+        )  # noqa\n+\n+        self.request.form.update(\n+            {\n+                "id": "f2",\n+                "delta": "bottom",\n+            }\n+        )\n         view = ItemOrderActionView(self.bf, self.request)\n         view()\n         self.assertEqual(\n             [(c[0], c[1].Title()) for c in self.bf.contentItems()],\n             [\n-                (\'f0\', \'Folder 4\'),\n-                (\'f1\', \'Folder 3\'),\n-                (\'f3\', \'Folder 1\'),\n-                (\'f4\', \'Folder 0\'),\n-                (\'f2\', \'Folder 2\'),\n-            ]\n+                ("f0", "Folder 4"),\n+                ("f1", "Folder 3"),\n+                ("f3", "Folder 1"),\n+                ("f4", "Folder 0"),\n+                ("f2", "Folder 2"),\n+            ],\n         )\n \n     def test_item_order_move_by_delta(self):\n-        from plone.app.content.browser.contents.rearrange import ItemOrderActionView  # noqa\n-        self.request.form.update({\n-            \'id\': \'f2\',\n-            \'delta\': \'-1\',\n-        })\n+        from plone.app.content.browser.contents.rearrange import (\n+            ItemOrderActionView,\n+        )  # noqa\n+\n+        self.request.form.update(\n+            {\n+                "id": "f2",\n+                "delta": "-1",\n+            }\n+        )\n         view = ItemOrderActionView(self.bf, self.request)\n         view()\n         self.assertEqual(\n             [(c[0], c[1].Title()) for c in self.bf.contentItems()],\n             [\n-                (\'f0\', \'Folder 4\'),\n-                (\'f2\', \'Folder 2\'),\n-                (\'f1\', \'Folder 3\'),\n-                (\'f3\', \'Folder 1\'),\n-                (\'f4\', \'Folder 0\'),\n-            ]\n+                ("f0", "Folder 4"),\n+                ("f2", "Folder 2"),\n+                ("f1", "Folder 3"),\n+                ("f3", "Folder 1"),\n+                ("f4", "Folder 0"),\n+            ],\n         )\n \n     def test_item_order_move_by_delta_in_plone_root(self):\n-        from plone.app.content.browser.contents.rearrange import ItemOrderActionView  # noqa\n+        from plone.app.content.browser.contents.rearrange import (\n+            ItemOrderActionView,\n+        )  # noqa\n \n         # first move the \'basefolder\' to the top\n-        self.request.form.update({\n-            \'id\': \'basefolder\',\n-            \'delta\': \'top\',\n-        })\n+        self.request.form.update(\n+            {\n+                "id": "basefolder",\n+                "delta": "top",\n+            }\n+        )\n         view = ItemOrderActionView(self.portal, self.request)\n         view()\n \n         # move \'basefolder\' two positions down\n-        self.request.form.update({\n-            \'id\': \'basefolder\',\n-            \'delta\': \'2\',\n-            \'subsetIds\': \'["basefolder", "page_0", "page_1", "page_2"]\',\n-        })\n+        self.request.form.update(\n+            {\n+                "id": "basefolder",\n+                "delta": "2",\n+                "subsetIds": \'["basefolder", "page_0", "page_1", "page_2"]\',\n+            }\n+        )\n         view = ItemOrderActionView(self.portal, self.request)\n         view()\n \n         self.assertEqual(\n             [(c[0], c[1].Title()) for c in self.portal.contentItems()],\n             [\n-                (\'page_0\', \'Page 0\'),\n-                (\'page_1\', \'Page 1\'),\n-                (\'basefolder\', \'Folder Base\'),\n-                (\'page_2\', \'Page 2\'),\n-            ]\n+                ("page_0", "Page 0"),\n+                ("page_1", "Page 1"),\n+                ("basefolder", "Folder Base"),\n+                ("page_2", "Page 2"),\n+            ],\n         )\n \n \n@@ -489,31 +517,31 @@ class FolderFactoriesTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def test_folder_factories_regression(self):\n-        from plone.app.content.browser.folderfactories import (\n-            FolderFactoriesView as FFV)\n+        from plone.app.content.browser.folderfactories import FolderFactoriesView as FFV\n+\n         view = FFV(self.portal, self.request)\n-        self.request.form.update({\n-            \'form.button.Add\': \'yes\',\n-            \'url\': self.portal.absolute_url()\n-        })\n+        self.request.form.update(\n+            {"form.button.Add": "yes", "url": self.portal.absolute_url()}\n+        )\n         view()\n-        self.assertEqual(self.request.response.headers.get(\'location\'),\n-                         self.portal.absolute_url())\n+        self.assertEqual(\n+            self.request.response.headers.get("location"), self.portal.absolute_url()\n+        )\n \n     def test_folder_factories(self):\n-        from plone.app.content.browser.folderfactories import (\n-            FolderFactoriesView as FFV)\n+        from plone.app.content.browser.folderfactories import FolderFactoriesView as FFV\n+\n         view = FFV(self.portal, self.request)\n-        self.request.form.update({\n-            \'form.button.Add\': \'yes\',\n-            \'url\': \'http://www.foobar.com\'\n-        })\n+        self.request.form.update(\n+            {"form.button.Add": "yes", "url": "http://www.foobar.com"}\n+        )\n         view()\n-        self.assertNotEqual(self.request.response.headers.get(\'location\'),\n-                            \'http://www.foobar.com\')\n+        self.assertNotEqual(\n+            self.request.response.headers.get("location"), "http://www.foobar.com"\n+        )\ndiff --git a/plone/app/content/tests/test_folder_publish.py b/plone/app/content/tests/test_folder_publish.py\nindex 4b581a0..6a55ec7 100644\n--- a/plone/app/content/tests/test_folder_publish.py\n+++ b/plone/app/content/tests/test_folder_publish.py\n@@ -1,13 +1,11 @@\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n-from plone.app.testing import login\n-from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n+import unittest\n+\n+from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, login, setRoles\n from Products.CMFPlone.utils import isExpired\n from zExceptions import Forbidden\n from zope.component import getMultiAdapter\n \n-import unittest\n+from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n \n class TestContentPublishing(unittest.TestCase):\n@@ -74,7 +72,9 @@ def test_publishing_subobjects(self):\n         for o in (self.folder.d1, self.folder.f1, self.folder.f1.d2, self.folder.f1.f2):\n             self.assertEqual(self.workflow.getInfoFor(o, "review_state"), "published")\n         self.assertEqual(self.request.response.getStatus(), 302)\n-        self.assertEqual(self.request.response.getHeader("Location"), self.folder.absolute_url())\n+        self.assertEqual(\n+            self.request.response.getHeader("Location"), self.folder.absolute_url()\n+        )\n \n     def test_publishing_subobjects_and_expire_them(self):\n         paths = []\n@@ -121,4 +121,6 @@ def test_publishing_orig_template_attacker(self):\n \n         self.request.form["orig_template"] = "https://attacker.com"\n         self.folder_publish(workflow_action="publish", paths=paths)\n-        self.assertEqual(self.request.response.getHeader("Location"), self.folder.absolute_url())\n+        self.assertEqual(\n+            self.request.response.getHeader("Location"), self.folder.absolute_url()\n+        )\ndiff --git a/plone/app/content/tests/test_namechooser.py b/plone/app/content/tests/test_namechooser.py\nindex c33c162..4584ccf 100644\n--- a/plone/app/content/tests/test_namechooser.py\n+++ b/plone/app/content/tests/test_namechooser.py\n@@ -1,15 +1,20 @@\n-from zope.component.testing import setUp\n-from zope.component.testing import tearDown\n import doctest\n import unittest\n \n+from zope.component.testing import setUp, tearDown\n+\n \n def test_suite():\n     return unittest.TestSuite(\n-        doctest.DocFileSuite(\'namechooser.txt\',\n-                             package=\'plone.app.content\',\n-                             optionflags=doctest.ELLIPSIS,\n-                             setUp=setUp, tearDown=tearDown))\n+        doctest.DocFileSuite(\n+            "namechooser.txt",\n+            package="plone.app.content",\n+            optionflags=doctest.ELLIPSIS,\n+            setUp=setUp,\n+            tearDown=tearDown,\n+        )\n+    )\n+\n \n if __name__ == "__main__":\n-    unittest.main(defaultTest=\'test_suite\')\n+    unittest.main(defaultTest="test_suite")\ndiff --git a/plone/app/content/tests/test_namechooser_unit.py b/plone/app/content/tests/test_namechooser_unit.py\nindex ca4a94d..e6e4fdb 100644\n--- a/plone/app/content/tests/test_namechooser_unit.py\n+++ b/plone/app/content/tests/test_namechooser_unit.py\n@@ -1,13 +1,13 @@\n+import unittest\n+\n+import transaction\n+from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, login, setRoles\n+from plone.dexterity.fti import DexterityFTI\n from Products.CMFCore.utils import getToolByName\n+from zope.container.interfaces import INameChooser\n+\n from plone.app.content.namechooser import ATTEMPTS\n from plone.app.content.testing import PLONE_APP_CONTENT_INTEGRATION_TESTING\n-from plone.app.testing import TEST_USER_ID, TEST_USER_NAME\n-from plone.app.testing import login\n-from plone.app.testing import setRoles\n-from plone.dexterity.fti import DexterityFTI\n-from zope.container.interfaces import INameChooser\n-import transaction\n-import unittest\n \n \n class NameChooserTest(unittest.TestCase):\n@@ -15,12 +15,12 @@ class NameChooserTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         portal_types = getToolByName(self.portal, "portal_types")\n-        if \'Document\' not in portal_types.objectIds():\n-            fti = DexterityFTI(\'Document\')\n-            portal_types._setObject(\'Document\', fti)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        if "Document" not in portal_types.objectIds():\n+            fti = DexterityFTI("Document")\n+            portal_types._setObject("Document", fti)\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n \n     def test_100_or_more_unique_ids(self):\n@@ -30,7 +30,7 @@ def test_100_or_more_unique_ids(self):\n         holder = self.portal\n         title = "A Small Document"\n         # create the first object, which will have no suffix\n-        holder.invokeFactory("Document", id=\'a-small-document\')\n+        holder.invokeFactory("Document", id="a-small-document")\n \n         chooser = INameChooser(holder)\n \ndiff --git a/plone/app/content/tests/test_non_ascii_characters_in_workflow_state.py b/plone/app/content/tests/test_non_ascii_characters_in_workflow_state.py\nindex af822b2..e5a9ea4 100644\n--- a/plone/app/content/tests/test_non_ascii_characters_in_workflow_state.py\n+++ b/plone/app/content/tests/test_non_ascii_characters_in_workflow_state.py\n@@ -1,13 +1,11 @@\n-from plone.app.content.testing import PLONE_APP_CONTENT_NON_ASCII_INTEGRATION_TESTING\n-from plone.app.testing import login\n-from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n-from Products.CMFCore.utils import getToolByName\n+import json\n+import unittest\n+\n+from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, login, setRoles\n from plone.uuid.interfaces import IUUID\n+from Products.CMFCore.utils import getToolByName\n \n-import unittest\n-import json\n+from plone.app.content.testing import PLONE_APP_CONTENT_NON_ASCII_INTEGRATION_TESTING\n \n \n class TestNonAsciiCharactersWorkflow(unittest.TestCase):\n@@ -15,37 +13,42 @@ class TestNonAsciiCharactersWorkflow(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_NON_ASCII_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         # set non-ascii-workflow for Documents\n-        wf_tool = getToolByName(self, \'portal_workflow\')\n-        wf_tool.setChainForPortalTypes([\'Document\'], \'non-ascii-workflow\')\n+        wf_tool = getToolByName(self, "portal_workflow")\n+        wf_tool.setChainForPortalTypes(["Document"], "non-ascii-workflow")\n \n         # create an object having the non-ascii-workflow assigned\n         self.portal.invokeFactory("Document", "doc")\n \n     def test_non_ascii_characters_in_workflow_title(self):\n-        wf_tool = getToolByName(self, \'portal_workflow\')\n-        workflow_matching_id = list(filter(\n-                lambda workflow: (\'non-ascii-workflow\' in workflow.id),\n-                wf_tool.getWorkflowsFor(self.portal.doc)))\n+        wf_tool = getToolByName(self, "portal_workflow")\n+        workflow_matching_id = list(\n+            filter(\n+                lambda workflow: ("non-ascii-workflow" in workflow.id),\n+                wf_tool.getWorkflowsFor(self.portal.doc),\n+            )\n+        )\n \n         # Make sure that the non-ascii-workflow was assigned to the Document\n         self.assertTrue(workflow_matching_id)\n \n         # Build POST request to get state title for the Document\n         documents_uid = IUUID(self.portal.doc)\n-        self.request.form[\'selection\'] = json.dumps(documents_uid)\n-        self.request.form[\'transitions\'] = True\n-        self.request.form[\'render\'] = \'yes\'\n+        self.request.form["selection"] = json.dumps(documents_uid)\n+        self.request.form["transitions"] = True\n+        self.request.form["render"] = "yes"\n \n         try:\n             # try to do the json request which among other things returns\n             # the workflow state title containing non-ascii characters.\n-            self.portal.unrestrictedTraverse(\'@@fc-workflow\')()\n+            self.portal.unrestrictedTraverse("@@fc-workflow")()\n         except UnicodeDecodeError:\n-            self.fail(\'Calling @@fc-workflow raised UnicodeDecodeError \\\n-                       unexpectedly.\')\n+            self.fail(\n+                "Calling @@fc-workflow raised UnicodeDecodeError \\\n+                       unexpectedly."\n+            )\ndiff --git a/plone/app/content/tests/test_reviewlist.py b/plone/app/content/tests/test_reviewlist.py\nindex 17354b7..f5f1f9a 100644\n--- a/plone/app/content/tests/test_reviewlist.py\n+++ b/plone/app/content/tests/test_reviewlist.py\n@@ -1,11 +1,11 @@\n-from Products.CMFCore.utils import getToolByName\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n-from plone.testing.zope import Browser\n-from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n+import unittest\n \n import transaction\n-import unittest\n+from plone.app.testing import TEST_USER_ID, setRoles\n+from plone.testing.zope import Browser\n+from Products.CMFCore.utils import getToolByName\n+\n+from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n \n \n class ReviewListTestCase(unittest.TestCase):\n@@ -14,17 +14,23 @@ class ReviewListTestCase(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.uf = self.portal.acl_users\n-        self.uf.userFolderAddUser(\'reviewer\', \'secret\', [\'Reviewer\'], [])\n+        self.uf.userFolderAddUser("reviewer", "secret", ["Reviewer"], [])\n         transaction.commit()\n-        self.browser = Browser(self.layer[\'app\'])\n+        self.browser = Browser(self.layer["app"])\n         self.browser.handleErrors = True\n-        self.wftool = getToolByName(self.portal, \'portal_workflow\')\n+        self.wftool = getToolByName(self.portal, "portal_workflow")\n \n     def createDocument(self, id, title, description):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', ])\n-        self.portal.invokeFactory(id=id, type_name=\'Document\')\n+        setRoles(\n+            self.portal,\n+            TEST_USER_ID,\n+            [\n+                "Manager",\n+            ],\n+        )\n+        self.portal.invokeFactory(id=id, type_name="Document")\n         doc = getattr(self.portal, id)\n         doc.title = title\n         doc.description = description\n@@ -35,40 +41,41 @@ def createDocument(self, id, title, description):\n         return doc\n \n     def submitToReview(self, obj):\n-        \'\'\'call the workflow action \'submit\' for an object\'\'\'\n-        self.wftool.doActionFor(obj, \'submit\')\n+        """call the workflow action \'submit\' for an object"""\n+        self.wftool.doActionFor(obj, "submit")\n \n     def test_unauthenticated(self):\n-        \'\'\'\n+        """\n         unauthenticated users do not have the necessary permissions to view\n         the review list\n-        \'\'\'\n-        self.browser.open(\'http://nohost/plone/full_review_list\')\n-        self.assertTrue(\'Login Name\' in self.browser.contents)\n+        """\n+        self.browser.open("http://nohost/plone/full_review_list")\n+        self.assertTrue("Login Name" in self.browser.contents)\n \n     def test_authenticated(self):\n-        \'\'\'\n+        """\n         authenticated users do have the necessary permissions to view\n         the review list\n-        \'\'\'\n-        self.browser.addHeader(\'Authorization\',\n-                               \'Basic {}:{}\'.format(\'reviewer\', \'secret\'))\n-        self.browser.open(\'http://nohost/plone/full_review_list\')\n-        self.assertTrue(\'Full review list:\' in self.browser.contents)\n+        """\n+        self.browser.addHeader(\n+            "Authorization", "Basic {}:{}".format("reviewer", "secret")\n+        )\n+        self.browser.open("http://nohost/plone/full_review_list")\n+        self.assertTrue("Full review list:" in self.browser.contents)\n \n     def test_with_content(self):\n-        \'\'\'\n+        """\n         authenticated users do have the necessary permissions to view\n         the review list\n-        \'\'\'\n-        doc = self.createDocument(\n-            \'testdoc\', \'Test Document\', \'Test Description\')\n-        self.wftool.doActionFor(doc, \'submit\')\n+        """\n+        doc = self.createDocument("testdoc", "Test Document", "Test Description")\n+        self.wftool.doActionFor(doc, "submit")\n         transaction.commit()\n \n-        self.browser.addHeader(\'Authorization\',\n-                               \'Basic {}:{}\'.format(\'reviewer\', \'secret\'))\n-        self.browser.open(\'http://nohost/plone/full_review_list\')\n-        self.assertTrue(\'Full review list:\' in self.browser.contents)\n+        self.browser.addHeader(\n+            "Authorization", "Basic {}:{}".format("reviewer", "secret")\n+        )\n+        self.browser.open("http://nohost/plone/full_review_list")\n+        self.assertTrue("Full review list:" in self.browser.contents)\n         # test if the table with review items contains an entry for testdoc\n         self.assertTrue(\'value="/plone/testdoc"\' in self.browser.contents)\ndiff --git a/plone/app/content/tests/test_selectdefaultpage.py b/plone/app/content/tests/test_selectdefaultpage.py\nindex ea4efb8..551314f 100644\n--- a/plone/app/content/tests/test_selectdefaultpage.py\n+++ b/plone/app/content/tests/test_selectdefaultpage.py\n@@ -1,22 +1,28 @@\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import setRoles\n-from plone.testing.zope import Browser\n-import transaction\n import unittest\n \n+import transaction\n+from plone.app.testing import TEST_USER_ID, setRoles\n+from plone.testing.zope import Browser\n+\n+from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n \n-FOLDER = {\'id\': \'testfolder\',\n-          \'title\': \'Test Folder\',\n-          \'description\': \'Test Folder Description\'}\n+FOLDER = {\n+    "id": "testfolder",\n+    "title": "Test Folder",\n+    "description": "Test Folder Description",\n+}\n \n-DOCUMENT = {\'id\': \'testdoc\',\n-            \'title\': \'Test Document\',\n-            \'description\': \'Test Document Description\'}\n+DOCUMENT = {\n+    "id": "testdoc",\n+    "title": "Test Document",\n+    "description": "Test Document Description",\n+}\n \n-NEWSITEM = {\'id\': \'testnews\',\n-            \'title\': \'Test News Item\',\n-            \'description\': \'Test News Item Description\'}\n+NEWSITEM = {\n+    "id": "testnews",\n+    "title": "Test News Item",\n+    "description": "Test News Item Description",\n+}\n \n \n class SelectDefaultPageDXTestCase(unittest.TestCase):\n@@ -24,53 +30,53 @@ class SelectDefaultPageDXTestCase(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.portal.acl_users.userFolderAddUser(\n-            \'editor\', \'secret\', [\'Editor\'], [])\n+        self.portal = self.layer["portal"]\n+        self.portal.acl_users.userFolderAddUser("editor", "secret", ["Editor"], [])\n \n         self._create_structure()\n         transaction.commit()\n \n-        self.browser = Browser(self.layer[\'app\'])\n-        self.browser.addHeader(\'Authorization\',\n-                               \'Basic {}:{}\'.format(\'editor\', \'secret\'))\n+        self.browser = Browser(self.layer["app"])\n+        self.browser.addHeader(\n+            "Authorization", "Basic {}:{}".format("editor", "secret")\n+        )\n \n     def tearDown(self):\n-        self.portal.manage_delObjects(ids=FOLDER[\'id\'])\n+        self.portal.manage_delObjects(ids=FOLDER["id"])\n         transaction.commit()\n \n     def _createFolder(self):\n-        self.portal.invokeFactory(id=FOLDER[\'id\'], type_name=\'Folder\')\n-        folder = getattr(self.portal, FOLDER[\'id\'])\n-        folder.setTitle(FOLDER[\'title\'])\n-        folder.setDescription(FOLDER[\'description\'])\n+        self.portal.invokeFactory(id=FOLDER["id"], type_name="Folder")\n+        folder = getattr(self.portal, FOLDER["id"])\n+        folder.setTitle(FOLDER["title"])\n+        folder.setDescription(FOLDER["description"])\n         folder.reindexObject()\n         # we don\'t want it in the navigation\n         # folder.setExcludeFromNav(True)\n         return folder\n \n     def _createDocument(self, context):\n-        context.invokeFactory(id=DOCUMENT[\'id\'], type_name=\'Document\')\n-        doc = getattr(context, DOCUMENT[\'id\'])\n-        doc.setTitle(DOCUMENT[\'title\'])\n-        doc.setDescription(DOCUMENT[\'description\'])\n+        context.invokeFactory(id=DOCUMENT["id"], type_name="Document")\n+        doc = getattr(context, DOCUMENT["id"])\n+        doc.setTitle(DOCUMENT["title"])\n+        doc.setDescription(DOCUMENT["description"])\n         doc.reindexObject()\n         # we don\'t want it in the navigation\n         # doc.setExcludeFromNav(True)\n         return doc\n \n     def _createNewsItem(self, context):\n-        context.invokeFactory(id=NEWSITEM[\'id\'], type_name=\'News Item\')\n-        doc = getattr(context, NEWSITEM[\'id\'])\n-        doc.setTitle(NEWSITEM[\'title\'])\n-        doc.setDescription(NEWSITEM[\'description\'])\n+        context.invokeFactory(id=NEWSITEM["id"], type_name="News Item")\n+        doc = getattr(context, NEWSITEM["id"])\n+        doc.setTitle(NEWSITEM["title"])\n+        doc.setDescription(NEWSITEM["description"])\n         doc.reindexObject()\n         # we don\'t want it in the navigation\n         # doc.setExcludeFromNav(True)\n         return doc\n \n     def _create_structure(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         folder = self._createFolder()\n         self._createDocument(folder)\n         return folder\n@@ -79,22 +85,23 @@ def test_select_default_page_view(self):\n         """Check that the form can be rendered."""\n         folder = self.portal.testfolder\n \n-        self.browser.open(\'%s/@@select_default_page\' % folder.absolute_url())\n+        self.browser.open("%s/@@select_default_page" % folder.absolute_url())\n \n-        self.assertTrue(\'Select default page\' in self.browser.contents)\n+        self.assertTrue("Select default page" in self.browser.contents)\n         self.assertTrue(\'id="testdoc"\' in self.browser.contents)\n \n     def test_select_default_page_view_with_folderish_type(self):\n         """Check if folderish types are available."""\n         folder = self.portal.testfolder\n-        folder.invokeFactory(id=FOLDER[\'id\'], type_name=\'Folder\')\n-        folder2 = getattr(folder, FOLDER[\'id\'])\n-        folder.setTitle(FOLDER[\'title\'])\n+        folder.invokeFactory(id=FOLDER["id"], type_name="Folder")\n+        folder2 = getattr(folder, FOLDER["id"])\n+        folder.setTitle(FOLDER["title"])\n         folder2.reindexObject()\n-        folder_fti = self.portal.portal_types[\'Folder\']\n+        folder_fti = self.portal.portal_types["Folder"]\n         folder_fti.manage_changeProperties(\n-            filter_content_types=True, allowed_content_types=[])\n-        view = folder.restrictedTraverse(\'@@select_default_page\')()\n+            filter_content_types=True, allowed_content_types=[]\n+        )\n+        view = folder.restrictedTraverse("@@select_default_page")()\n \n         self.assertTrue(\'id="testdoc"\' in view)\n         self.assertTrue(\'id="testfolder"\' in view)\n@@ -103,8 +110,8 @@ def test_default_page_action_cancel(self):\n         """Check the Cancel action."""\n         folder = self.portal.testfolder\n \n-        self.browser.open(\'%s/@@select_default_page\' % folder.absolute_url())\n-        cancel_button = self.browser.getControl(name=\'form.buttons.Cancel\')\n+        self.browser.open("%s/@@select_default_page" % folder.absolute_url())\n+        cancel_button = self.browser.getControl(name="form.buttons.Cancel")\n         cancel_button.click()\n \n         self.assertEqual(self.browser.url, folder.absolute_url())\n@@ -113,19 +120,19 @@ def test_default_page_action_cancel(self):\n     def test_default_page_action_save(self):\n         """Check the Save action."""\n         folder = self.portal.testfolder\n-        self.browser.open(\'%s/@@select_default_page\' % folder.absolute_url())\n+        self.browser.open("%s/@@select_default_page" % folder.absolute_url())\n \n-        submit_button = self.browser.getControl(name=\'form.buttons.Save\')\n+        submit_button = self.browser.getControl(name="form.buttons.Save")\n         submit_button.click()\n \n         self.assertEqual(self.browser.url, folder.absolute_url())\n-        self.assertEqual(folder.getDefaultPage(), \'testdoc\')\n+        self.assertEqual(folder.getDefaultPage(), "testdoc")\n \n     def test_selectable_types_filter(self):\n-        self.portal.portal_registry[\'plone.default_page_types\'] = [\'News Item\']\n+        self.portal.portal_registry["plone.default_page_types"] = ["News Item"]\n         folder = self.portal.testfolder\n         self._createNewsItem(folder)\n \n-        view = folder.restrictedTraverse(\'@@select_default_page\')()\n+        view = folder.restrictedTraverse("@@select_default_page")()\n         self.assertTrue(\'id="testdoc"\' not in view)\n         self.assertTrue(\'id="testnews"\' in view)\ndiff --git a/plone/app/content/tests/test_table.py b/plone/app/content/tests/test_table.py\nindex 71a5ea2..1a07450 100644\n--- a/plone/app/content/tests/test_table.py\n+++ b/plone/app/content/tests/test_table.py\n@@ -1,12 +1,16 @@\n-from zope.component.testing import setUp\n-from zope.component.testing import tearDown\n import doctest\n import unittest\n \n+from zope.component.testing import setUp, tearDown\n+\n \n def test_suite():\n     return unittest.TestSuite(\n-        doctest.DocFileSuite(\'table.txt\',\n-                             package=\'plone.app.content.browser\',\n-                             optionflags=doctest.ELLIPSIS,\n-                             setUp=setUp, tearDown=tearDown))\n+        doctest.DocFileSuite(\n+            "table.txt",\n+            package="plone.app.content.browser",\n+            optionflags=doctest.ELLIPSIS,\n+            setUp=setUp,\n+            tearDown=tearDown,\n+        )\n+    )\ndiff --git a/plone/app/content/tests/test_widgets.py b/plone/app/content/tests/test_widgets.py\nindex 7b134c2..8eeaa66 100644\n--- a/plone/app/content/tests/test_widgets.py\n+++ b/plone/app/content/tests/test_widgets.py\n@@ -1,35 +1,29 @@\n-from plone.app.content.browser import vocabulary\n-from plone.app.content.browser.file import FileUploadView\n-from plone.app.content.browser.query import QueryStringIndexOptions\n-from plone.app.content.browser.vocabulary import VocabularyView\n-from plone.app.content.testing import ExampleFunctionVocabulary\n-from plone.app.content.testing import ExampleVocabulary\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n-from plone.app.testing import login\n-from plone.app.testing import logout\n-from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n+import json\n+import operator\n+import os\n+import unittest\n+from unittest import mock\n+\n+import transaction\n+from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, login, logout, setRoles\n from plone.app.z3cform.interfaces import IFieldPermissionChecker\n from Products.CMFCore.indexing import processQueue\n-from unittest import mock\n-from zope.component import getMultiAdapter\n-from zope.component import provideAdapter\n-from zope.component import provideUtility\n+from zope.component import getMultiAdapter, provideAdapter, provideUtility\n from zope.component.globalregistry import base\n from zope.globalrequest import setRequest\n-from zope.interface import alsoProvides\n-from zope.interface import Interface\n-from zope.interface import noLongerProvides\n+from zope.interface import Interface, alsoProvides, noLongerProvides\n from zope.publisher.browser import TestRequest\n \n-import json\n-import operator\n-import os\n-import transaction\n-import unittest\n-\n+from plone.app.content.browser import vocabulary\n+from plone.app.content.browser.file import FileUploadView\n+from plone.app.content.browser.query import QueryStringIndexOptions\n+from plone.app.content.browser.vocabulary import VocabularyView\n+from plone.app.content.testing import (\n+    PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING,\n+    PLONE_APP_CONTENT_DX_INTEGRATION_TESTING,\n+    ExampleFunctionVocabulary,\n+    ExampleVocabulary,\n+)\n \n _dir = os.path.dirname(__file__)\n \n@@ -39,12 +33,12 @@ def __init__(self, context):\n         pass\n \n     def validate(self, field_name, vocabulary_name=None):\n-        if field_name == \'allowed_field\':\n+        if field_name == "allowed_field":\n             return True\n-        elif field_name == \'disallowed_field\':\n+        elif field_name == "disallowed_field":\n             return False\n         else:\n-            raise AttributeError(\'Missing Field\')\n+            raise AttributeError("Missing Field")\n \n \n class ICustomPermissionProvider(Interface):\n@@ -52,15 +46,19 @@ class ICustomPermissionProvider(Interface):\n \n \n def _enable_permission_checker(context):\n-    provideAdapter(PermissionChecker, adapts=(ICustomPermissionProvider,),\n-                   provides=IFieldPermissionChecker)\n+    provideAdapter(\n+        PermissionChecker,\n+        adapts=(ICustomPermissionProvider,),\n+        provides=IFieldPermissionChecker,\n+    )\n     alsoProvides(context, ICustomPermissionProvider)\n \n \n def _disable_permission_checker(context):\n     noLongerProvides(context, ICustomPermissionProvider)\n-    base.unregisterAdapter(required=(ICustomPermissionProvider,),\n-                           provided=IFieldPermissionChecker)\n+    base.unregisterAdapter(\n+        required=(ICustomPermissionProvider,), provided=IFieldPermissionChecker\n+    )\n \n \n class BrowserTest(unittest.TestCase):\n@@ -68,173 +66,171 @@ class BrowserTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.request = TestRequest(environ={\'HTTP_ACCEPT_LANGUAGE\': \'en\'})\n+        self.request = TestRequest(environ={"HTTP_ACCEPT_LANGUAGE": "en"})\n         setRequest(self.request)\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        provideUtility(ExampleVocabulary(), name=\'vocab_class\')\n-        provideUtility(ExampleFunctionVocabulary, name=\'vocab_function\')\n-        vocabulary.PERMISSIONS.update({\n-            \'vocab_class\': \'Modify portal content\',\n-            \'vocab_function\': \'Modify portal content\',\n-        })\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        provideUtility(ExampleVocabulary(), name="vocab_class")\n+        provideUtility(ExampleFunctionVocabulary, name="vocab_function")\n+        vocabulary.PERMISSIONS.update(\n+            {\n+                "vocab_class": "Modify portal content",\n+                "vocab_function": "Modify portal content",\n+            }\n+        )\n \n     def testVocabularyQueryString(self):\n-        """Test querying a class based vocabulary with a search string.\n-        """\n+        """Test querying a class based vocabulary with a search string."""\n         view = VocabularyView(self.portal, self.request)\n-        self.request.form.update({\n-            \'name\': \'vocab_class\',\n-            \'query\': \'three\'\n-        })\n+        self.request.form.update({"name": "vocab_class", "query": "three"})\n         data = json.loads(view())\n-        self.assertEqual(len(data[\'results\']), 1)\n+        self.assertEqual(len(data["results"]), 1)\n \n     def testVocabularyFunctionQueryString(self):\n-        """Test querying a function based vocabulary with a search string.\n-        """\n+        """Test querying a function based vocabulary with a search string."""\n         view = VocabularyView(self.portal, self.request)\n-        self.request.form.update({\n-            \'name\': \'vocab_function\',\n-            \'query\': \'third\'\n-        })\n+        self.request.form.update({"name": "vocab_function", "query": "third"})\n         data = json.loads(view())\n-        self.assertEqual(len(data[\'results\']), 1)\n+        self.assertEqual(len(data["results"]), 1)\n \n     def testVocabularyNoResults(self):\n-        """Tests that the widgets displays correctly\n-        """\n+        """Tests that the widgets displays correctly"""\n         view = VocabularyView(self.portal, self.request)\n         query = {\n-            \'criteria\': [\n+            "criteria": [\n                 {\n-                    \'i\': \'path\',\n-                    \'o\': \'plone.app.querystring.operation.string.path\',\n-                    \'v\': \'/foo\'\n+                    "i": "path",\n+                    "o": "plone.app.querystring.operation.string.path",\n+                    "v": "/foo",\n                 }\n             ]\n         }\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.Catalog\',\n-            \'query\': json.dumps(query)\n-        })\n+        self.request.form.update(\n+            {"name": "plone.app.vocabularies.Catalog", "query": json.dumps(query)}\n+        )\n         data = json.loads(view())\n-        self.assertEqual(len(data[\'results\']), 0)\n+        self.assertEqual(len(data["results"]), 0)\n \n     def testVocabularyCatalogResults(self):\n-        self.portal.invokeFactory(\'Document\', id="page", title="page")\n+        self.portal.invokeFactory("Document", id="page", title="page")\n         self.portal.page.reindexObject()\n         view = VocabularyView(self.portal, self.request)\n         query = {\n-            \'criteria\': [\n+            "criteria": [\n                 {\n-                    \'i\': \'path\',\n-                    \'o\': \'plone.app.querystring.operation.string.path\',\n-                    \'v\': \'/plone\'\n+                    "i": "path",\n+                    "o": "plone.app.querystring.operation.string.path",\n+                    "v": "/plone",\n                 }\n             ]\n         }\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.Catalog\',\n-            \'query\': json.dumps(query),\n-            \'attributes\': [\'UID\', \'id\', \'title\', \'path\']\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.Catalog",\n+                "query": json.dumps(query),\n+                "attributes": ["UID", "id", "title", "path"],\n+            }\n+        )\n         data = json.loads(view())\n-        self.assertEqual(len(data[\'results\']), 1)\n+        self.assertEqual(len(data["results"]), 1)\n \n     def testVocabularyCatalogUnsafeMetadataAllowed(self):\n         """Users with permission "Modify portal content" are allowed to see\n         ``_unsafe_metadata``.\n         """\n-        self.portal.invokeFactory(\'Document\', id="page", title="page")\n+        self.portal.invokeFactory("Document", id="page", title="page")\n         self.portal.page.reindexObject()\n         view = VocabularyView(self.portal, self.request)\n         query = {\n-            \'criteria\': [\n+            "criteria": [\n                 {\n-                    \'i\': \'path\',\n-                    \'o\': \'plone.app.querystring.operation.string.path\',\n-                    \'v\': \'/plone/page\'\n+                    "i": "path",\n+                    "o": "plone.app.querystring.operation.string.path",\n+                    "v": "/plone/page",\n                 }\n             ]\n         }\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.Catalog\',\n-            \'query\': json.dumps(query),\n-            \'attributes\': [\n-                \'id\',\n-                \'commentors\',\n-                \'Creator\',\n-                \'listCreators\',\n-            ]\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.Catalog",\n+                "query": json.dumps(query),\n+                "attributes": [\n+                    "id",\n+                    "commentors",\n+                    "Creator",\n+                    "listCreators",\n+                ],\n+            }\n+        )\n         data = json.loads(view())\n-        self.assertEqual(len(list(data[\'results\'][0].keys())), 4)\n+        self.assertEqual(len(list(data["results"][0].keys())), 4)\n \n     def testVocabularyCatalogUnsafeMetadataDisallowed(self):\n         """Users without permission "Modify portal content" are not allowed to\n         see ``_unsafe_metadata``.\n         """\n-        self.portal.invokeFactory(\'Document\', id="page", title="page")\n+        self.portal.invokeFactory("Document", id="page", title="page")\n         self.portal.page.reindexObject()\n         # Downgrade permissions\n         setRoles(self.portal, TEST_USER_ID, [])\n         view = VocabularyView(self.portal, self.request)\n         query = {\n-            \'criteria\': [\n+            "criteria": [\n                 {\n-                    \'i\': \'path\',\n-                    \'o\': \'plone.app.querystring.operation.string.path\',\n-                    \'v\': \'/plone/page\'\n+                    "i": "path",\n+                    "o": "plone.app.querystring.operation.string.path",\n+                    "v": "/plone/page",\n                 }\n             ]\n         }\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.Catalog\',\n-            \'query\': json.dumps(query),\n-            \'attributes\': [\n-                \'id\',\n-                \'commentors\',\n-                \'Creator\',\n-                \'listCreators\',\n-            ]\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.Catalog",\n+                "query": json.dumps(query),\n+                "attributes": [\n+                    "id",\n+                    "commentors",\n+                    "Creator",\n+                    "listCreators",\n+                ],\n+            }\n+        )\n         data = json.loads(view())\n         # Only one result key should be returned, as ``commentors``,\n         # ``Creator`` and ``listCreators`` is considered unsafe and thus\n         # skipped.\n-        self.assertEqual(len(list(data[\'results\'][0].keys())), 1)\n+        self.assertEqual(len(list(data["results"][0].keys())), 1)\n \n     def testVocabularyBatching(self):\n         amount = 30\n         for i in range(amount):\n-            self.portal.invokeFactory(\'Document\', id="page" + str(i),\n-                                      title="Page" + str(i))\n-            self.portal[\'page\' + str(i)].reindexObject()\n+            self.portal.invokeFactory(\n+                "Document", id="page" + str(i), title="Page" + str(i)\n+            )\n+            self.portal["page" + str(i)].reindexObject()\n         view = VocabularyView(self.portal, self.request)\n         query = {\n-            \'criteria\': [\n+            "criteria": [\n                 {\n-                    \'i\': \'path\',\n-                    \'o\': \'plone.app.querystring.operation.string.path\',\n-                    \'v\': \'/plone\'\n+                    "i": "path",\n+                    "o": "plone.app.querystring.operation.string.path",\n+                    "v": "/plone",\n                 }\n             ]\n         }\n         # batch pages are 1-based\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.Catalog\',\n-            \'query\': json.dumps(query),\n-            \'attributes\': [\'UID\', \'id\', \'title\', \'path\'],\n-            \'batch\': {\n-                \'page\': \'1\',\n-                \'size\': \'10\'\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.Catalog",\n+                "query": json.dumps(query),\n+                "attributes": ["UID", "id", "title", "path"],\n+                "batch": {"page": "1", "size": "10"},\n             }\n-        })\n+        )\n         data = json.loads(view())\n-        self.assertEqual(len(data[\'results\']), 10)\n-        self.assertEqual(data[\'total\'], amount)\n+        self.assertEqual(len(data["results"]), 10)\n+        self.assertEqual(data["total"], amount)\n \n     def testVocabularyEncoding(self):\n         """The vocabulary should not return the binary encoded token\n@@ -242,41 +238,39 @@ def testVocabularyEncoding(self):\n         set. Fixes an encoding problem. See:\n         https://github.com/plone/Products.CMFPlone/issues/650\n         """\n-        test_val = \'N\xc3\xa5\xc3\xb8\xc3\xaf\'\n+        test_val = "N\xc3\xa5\xc3\xb8\xc3\xaf"\n \n-        self.portal.invokeFactory(\'Document\', id="page", title="page")\n+        self.portal.invokeFactory("Document", id="page", title="page")\n         self.portal.page.subject = (test_val,)\n-        self.portal.page.reindexObject(idxs=[\'Subject\'])\n+        self.portal.page.reindexObject(idxs=["Subject"])\n         processQueue()\n \n-        self.request.form[\'name\'] = \'plone.app.vocabularies.Keywords\'\n-        results = getMultiAdapter(\n-            (self.portal, self.request),\n-            name=\'getVocabulary\'\n-        )()\n+        self.request.form["name"] = "plone.app.vocabularies.Keywords"\n+        results = getMultiAdapter((self.portal, self.request), name="getVocabulary")()\n         results = json.loads(results)\n-        result = results[\'results\'][0]\n+        result = results["results"][0]\n \n-        self.assertEqual(result[\'text\'], test_val)\n-        self.assertEqual(result[\'id\'], test_val)\n+        self.assertEqual(result["text"], test_val)\n+        self.assertEqual(result["id"], test_val)\n \n     def testVocabularyUnauthorized(self):\n         setRoles(self.portal, TEST_USER_ID, [])\n         view = VocabularyView(self.portal, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.Users\',\n-            \'query\': TEST_USER_NAME\n-        })\n+        self.request.form.update(\n+            {"name": "plone.app.vocabularies.Users", "query": TEST_USER_NAME}\n+        )\n         data = json.loads(view())\n-        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n+        self.assertEqual(data["error"], "Vocabulary lookup not allowed")\n \n     def testVocabularyMissing(self):\n         view = VocabularyView(self.portal, self.request)\n-        self.request.form.update({\n-            \'name\': \'vocabulary.that.does.not.exist\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "vocabulary.that.does.not.exist",\n+            }\n+        )\n         data = json.loads(view())\n-        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n+        self.assertEqual(data["error"], "Vocabulary lookup not allowed")\n \n     def testPermissionCheckerAllowed(self):\n         # Setup a custom permission checker on the portal\n@@ -284,28 +278,33 @@ def testPermissionCheckerAllowed(self):\n         view = VocabularyView(self.portal, self.request)\n \n         # Allowed field is allowed\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.PortalTypes\',\n-            \'field\': \'allowed_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.PortalTypes",\n+                "field": "allowed_field",\n+            }\n+        )\n         data = json.loads(view())\n-        self.assertEqual(len(data[\'results\']),\n-                          len(self.portal.portal_types.objectIds()))\n+        self.assertEqual(\n+            len(data["results"]), len(self.portal.portal_types.objectIds())\n+        )\n         _disable_permission_checker(self.portal)\n \n     def testPermissionCheckerUnknownVocab(self):\n         _enable_permission_checker(self.portal)\n         view = VocabularyView(self.portal, self.request)\n         # Unknown vocabulary gives error\n-        self.request.form.update({\n-            \'name\': \'vocab.does.not.exist\',\n-            \'field\': \'allowed_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "vocab.does.not.exist",\n+                "field": "allowed_field",\n+            }\n+        )\n         data = json.loads(view())\n         self.assertEqual(\n-            data[\'error\'],\n-            \'No factory with name "{}" exists.\'.format(\n-                \'vocab.does.not.exist\'))\n+            data["error"],\n+            \'No factory with name "{}" exists.\'.format("vocab.does.not.exist"),\n+        )\n         _disable_permission_checker(self.portal)\n \n     def testPermissionCheckerDisallowed(self):\n@@ -313,12 +312,14 @@ def testPermissionCheckerDisallowed(self):\n         view = VocabularyView(self.portal, self.request)\n         # Disallowed field is not allowed\n         # Allowed field is allowed\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.PortalTypes\',\n-            \'field\': \'disallowed_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.PortalTypes",\n+                "field": "disallowed_field",\n+            }\n+        )\n         data = json.loads(view())\n-        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n+        self.assertEqual(data["error"], "Vocabulary lookup not allowed")\n         _disable_permission_checker(self.portal)\n \n     def testPermissionCheckerShortCircuit(self):\n@@ -326,23 +327,27 @@ def testPermissionCheckerShortCircuit(self):\n         view = VocabularyView(self.portal, self.request)\n         # Known vocabulary name short-circuits field permission check\n         # global permission\n-        self.request.form[\'name\'] = \'plone.app.vocabularies.Users\'\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.Users\',\n-            \'field\': \'disallowed_field\',\n-        })\n+        self.request.form["name"] = "plone.app.vocabularies.Users"\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.Users",\n+                "field": "disallowed_field",\n+            }\n+        )\n         data = json.loads(view())\n-        self.assertEqual(data[\'results\'], [])\n+        self.assertEqual(data["results"], [])\n         _disable_permission_checker(self.portal)\n \n     def testPermissionCheckerUnknownField(self):\n         _enable_permission_checker(self.portal)\n         view = VocabularyView(self.portal, self.request)\n         # Unknown field is raises error\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.PortalTypes\',\n-            \'field\': \'missing_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.PortalTypes",\n+                "field": "missing_field",\n+            }\n+        )\n         with self.assertRaises(AttributeError):\n             view()\n         _disable_permission_checker(self.portal)\n@@ -354,8 +359,8 @@ def testVocabularyUsers(self):\n         # Let\'s test that safe html is used on the fullname,\n         # as alternative to the workaround in PloneHotfix20210518.\n         for i in range(amount):\n-            id = \'user\' + str(i)\n-            acl_users.userFolderAddUser(id, \'secret\', [\'Member\'], [])\n+            id = "user" + str(i)\n+            acl_users.userFolderAddUser(id, "secret", ["Member"], [])\n             member = membership.getMemberById(id)\n             # Make user0 the hacker.\n             if i == 0:\n@@ -364,29 +369,27 @@ def testVocabularyUsers(self):\n                 fullname = id\n             member.setMemberProperties(mapping={"fullname": fullname})\n         view = VocabularyView(self.portal, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.Users\',\n-            \'query\': \'user\'\n-        })\n+        self.request.form.update(\n+            {"name": "plone.app.vocabularies.Users", "query": "user"}\n+        )\n         data = json.loads(view())\n \n-        self.assertEqual(len(data[\'results\']), amount)\n+        self.assertEqual(len(data["results"]), amount)\n         # Let\'s sort, just to be sure.\n-        results = sorted(data[\'results\'], key=operator.itemgetter("id"))\n+        results = sorted(data["results"], key=operator.itemgetter("id"))\n         # The first one is the hacker.  The hack should have failed.\n-        self.assertDictEqual(results[0], {\'id\': \'user0\', \'text\': \'user  hacker\'})\n+        self.assertDictEqual(results[0], {"id": "user0", "text": "user  hacker"})\n \n     def testSource(self):\n         from z3c.form.browser.text import TextWidget\n-        from zope.interface import implementer\n-        from zope.interface import Interface\n+        from zope.interface import Interface, implementer\n         from zope.schema import Choice\n         from zope.schema.interfaces import ISource\n \n         @implementer(ISource)\n         class DummyCatalogSource:\n             def search_catalog(self, query):\n-                querytext = query[\'SearchableText\'][\'query\']\n+                querytext = query["SearchableText"]["query"]\n                 return [mock.Mock(id=querytext)]\n \n         widget = TextWidget(self.request)\n@@ -395,32 +398,34 @@ def search_catalog(self, query):\n         widget.field.interface = Interface\n \n         from plone.app.content.browser.vocabulary import SourceView\n+\n         view = SourceView(widget, self.request)\n         query = {\n-            \'criteria\': [\n+            "criteria": [\n                 {\n-                    \'i\': \'SearchableText\',\n-                    \'o\': \'plone.app.querystring.operation.string.is\',\n-                    \'v\': \'foo\'\n+                    "i": "SearchableText",\n+                    "o": "plone.app.querystring.operation.string.is",\n+                    "v": "foo",\n                 }\n             ]\n         }\n-        self.request.form.update({\n-            \'query\': json.dumps(query),\n-            \'attributes\': \'id\',\n-        })\n+        self.request.form.update(\n+            {\n+                "query": json.dumps(query),\n+                "attributes": "id",\n+            }\n+        )\n         data = json.loads(view())\n-        self.assertEqual(len(data[\'results\']), 1)\n-        self.assertEqual(data[\'results\'][0][\'id\'], \'foo\')\n+        self.assertEqual(len(data["results"]), 1)\n+        self.assertEqual(data["results"][0]["id"], "foo")\n \n     def testSourceCollectionField(self):\n         # This test uses a collection field\n         # and a source providing the \'search\' method\n         # to help achieve coverage.\n         from z3c.form.browser.text import TextWidget\n-        from zope.interface import implementer\n-        from zope.interface import Interface\n-        from zope.schema import List, Choice\n+        from zope.interface import Interface, implementer\n+        from zope.schema import Choice, List\n         from zope.schema.interfaces import ISource\n         from zope.schema.vocabulary import SimpleTerm\n \n@@ -436,37 +441,39 @@ def search(self, query):\n         widget.field.interface = Interface\n \n         from plone.app.content.browser.vocabulary import SourceView\n+\n         view = SourceView(widget, self.request)\n         query = {\n-            \'criteria\': [\n+            "criteria": [\n                 {\n-                    \'i\': \'SearchableText\',\n-                    \'o\': \'plone.app.querystring.operation.string.is\',\n-                    \'v\': \'foo\'\n+                    "i": "SearchableText",\n+                    "o": "plone.app.querystring.operation.string.is",\n+                    "v": "foo",\n                 }\n             ],\n-            \'sort_on\': \'id\',\n-            \'sort_order\': \'ascending\',\n+            "sort_on": "id",\n+            "sort_order": "ascending",\n         }\n-        self.request.form.update({\n-            \'query\': json.dumps(query),\n-            \'batch\': json.dumps({\'size\': 10, \'page\': 1}),\n-        })\n+        self.request.form.update(\n+            {\n+                "query": json.dumps(query),\n+                "batch": json.dumps({"size": 10, "page": 1}),\n+            }\n+        )\n         data = json.loads(view())\n-        self.assertEqual(len(data[\'results\']), 1)\n-        self.assertEqual(data[\'results\'][0][\'id\'], \'foo\')\n+        self.assertEqual(len(data["results"]), 1)\n+        self.assertEqual(data["results"][0]["id"], "foo")\n \n     def testSourcePermissionDenied(self):\n         from z3c.form.browser.text import TextWidget\n-        from zope.interface import implementer\n-        from zope.interface import Interface\n+        from zope.interface import Interface, implementer\n         from zope.schema import Choice\n         from zope.schema.interfaces import ISource\n \n         @implementer(ISource)\n         class DummyCatalogSource:\n             def search_catalog(self, query):\n-                querytext = query[\'SearchableText\'][\'query\']\n+                querytext = query["SearchableText"]["query"]\n                 return [mock.Mock(id=querytext)]\n \n         widget = TextWidget(self.request)\n@@ -475,36 +482,41 @@ def search_catalog(self, query):\n         widget.field.interface = Interface\n \n         from plone.app.content.browser.vocabulary import SourceView\n+\n         view = SourceView(widget, self.request)\n         query = {\n-            \'criteria\': [\n+            "criteria": [\n                 {\n-                    \'i\': \'SearchableText\',\n-                    \'o\': \'plone.app.querystring.operation.string.is\',\n-                    \'v\': \'foo\'\n+                    "i": "SearchableText",\n+                    "o": "plone.app.querystring.operation.string.is",\n+                    "v": "foo",\n                 }\n             ]\n         }\n-        self.request.form.update({\n-            \'query\': json.dumps(query),\n-        })\n+        self.request.form.update(\n+            {\n+                "query": json.dumps(query),\n+            }\n+        )\n         logout()\n         data = json.loads(view())\n-        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed.\')\n+        self.assertEqual(data["error"], "Vocabulary lookup not allowed.")\n \n     def testSourceDefaultPermission(self):\n-        from plone.app.content.browser.vocabulary import SourceView\n         from z3c.form.browser.text import TextWidget\n \n+        from plone.app.content.browser.vocabulary import SourceView\n+\n         widget = TextWidget(self.request)\n         view = SourceView(widget, self.request)\n         self.assertEqual(view.default_permission, "cmf.ModifyPortalContent")\n \n     def testSourceDefaultPermissionOnAddForm(self):\n-        from plone.app.content.browser.vocabulary import SourceView\n         from z3c.form import form\n         from z3c.form.browser.text import TextWidget\n \n+        from plone.app.content.browser.vocabulary import SourceView\n+\n         widget = TextWidget(self.request)\n         widget.form = form.AddForm(self.portal, self.request)\n \n@@ -513,8 +525,7 @@ def testSourceDefaultPermissionOnAddForm(self):\n \n     def testSourceTextQuery(self):\n         from z3c.form.browser.text import TextWidget\n-        from zope.interface import implementer\n-        from zope.interface import Interface\n+        from zope.interface import Interface, implementer\n         from zope.schema import Choice\n         from zope.schema.interfaces import ISource\n \n@@ -529,63 +540,67 @@ def search(self, query):\n         widget.field.interface = Interface\n \n         from plone.app.content.browser.vocabulary import SourceView\n+\n         view = SourceView(widget, self.request)\n-        self.request.form.update({\n-            \'query\': \'foo\',\n-            \'attributes\': \'id\',\n-        })\n+        self.request.form.update(\n+            {\n+                "query": "foo",\n+                "attributes": "id",\n+            }\n+        )\n         data = json.loads(view())\n-        self.assertEqual(len(data[\'results\']), 1)\n-        self.assertEqual(data[\'results\'][0][\'id\'], \'foo\')\n+        self.assertEqual(len(data["results"]), 1)\n+        self.assertEqual(data["results"][0]["id"], "foo")\n \n     def testQueryStringConfiguration(self):\n         view = QueryStringIndexOptions(self.portal, self.request)\n         data = json.loads(view())\n         # just test one so we know it\'s working...\n-        self.assertEqual(data[\'indexes\'][\'sortable_title\'][\'sortable\'], True)\n+        self.assertEqual(data["indexes"]["sortable_title"]["sortable"], True)\n \n-    @mock.patch(\'zope.i18n.negotiate\', new=lambda ctx: \'de\')\n+    @mock.patch("zope.i18n.negotiate", new=lambda ctx: "de")\n     def testUntranslatableMetadata(self):\n         """Test translation of ``@@getVocabulary`` view results.\n         From the standard metadata columns, only ``Type`` is translated.\n         """\n         # Language is set via language negotiaton patch.\n \n-        self.portal.invokeFactory(\'Document\', id="page", title="page")\n+        self.portal.invokeFactory("Document", id="page", title="page")\n         self.portal.page.reindexObject()\n         view = VocabularyView(self.portal, self.request)\n         query = {\n-            \'criteria\': [\n+            "criteria": [\n                 {\n-                    \'i\': \'path\',\n-                    \'o\': \'plone.app.querystring.operation.string.path\',\n-                    \'v\': \'/plone/page\'\n+                    "i": "path",\n+                    "o": "plone.app.querystring.operation.string.path",\n+                    "v": "/plone/page",\n                 }\n             ]\n         }\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.Catalog\',\n-            \'query\': json.dumps(query),\n-            \'attributes\': [\n-                \'id\',\n-                \'portal_type\',\n-                \'Type\',\n-            ]\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.Catalog",\n+                "query": json.dumps(query),\n+                "attributes": [\n+                    "id",\n+                    "portal_type",\n+                    "Type",\n+                ],\n+            }\n+        )\n \n         # data[\'results\'] should return one item, which represents the document\n         # created before.\n         data = json.loads(view())\n \n         # Type is translated\n-        self.assertEqual(data[\'results\'][0][\'Type\'], \'Seite\')\n+        self.assertEqual(data["results"][0]["Type"], "Seite")\n \n         # portal_type is never translated\n-        self.assertEqual(data[\'results\'][0][\'portal_type\'], \'Document\')\n+        self.assertEqual(data["results"][0]["portal_type"], "Document")\n \n     def testGetMimeIcon(self):\n-        """ Check if the returned icon is correct\n-        """\n+        """Check if the returned icon is correct"""\n         self.request.form.update(\n             {\n                 "name": "plone.app.vocabularies.Catalog",\n@@ -599,9 +614,7 @@ def testGetMimeIcon(self):\n         obj = self.portal["my-file"]\n         obj.reindexObject()\n \n-        self.assertListEqual(\n-            json.loads(view())["results"], [{"getMimeIcon": None}]\n-        )\n+        self.assertListEqual(json.loads(view())["results"], [{"getMimeIcon": None}])\n \n         # mock a pdf\n         obj.file = mock.Mock(contentType="application/pdf")\n@@ -619,6 +632,7 @@ def testGetMimeIcon(self):\n             [{"getMimeIcon": "/plone/++resource++mimetype.icons/unknown.png"}],\n         )\n \n+\n class FunctionalBrowserTest(unittest.TestCase):\n \n     layer = PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n@@ -626,38 +640,40 @@ class FunctionalBrowserTest(unittest.TestCase):\n     def setUp(self):\n         self.request = TestRequest()\n         setRequest(self.request)\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testFileUpload(self):\n         view = FileUploadView(self.portal, self.request)\n         from plone.namedfile.file import FileChunk\n-        chunk = FileChunk(b\'foobar\')\n-        chunk.filename = \'test.xml\'\n-        self.request.form[\'file\'] = chunk\n-        self.request.REQUEST_METHOD = \'POST\'\n+\n+        chunk = FileChunk(b"foobar")\n+        chunk.filename = "test.xml"\n+        self.request.form["file"] = chunk\n+        self.request.REQUEST_METHOD = "POST"\n         # the next calls plone.app.dexterity.factories and does a\n         # transaction.commit. Needs cleanup and FunctionalTesting layer.\n         data = json.loads(view())\n-        self.assertEqual(data[\'url\'], \'http://nohost/plone/test.xml\')\n-        self.assertTrue(data[\'UID\'] is not None)\n+        self.assertEqual(data["url"], "http://nohost/plone/test.xml")\n+        self.assertTrue(data["UID"] is not None)\n         # clean it up...\n-        self.portal.manage_delObjects([\'test.xml\'])\n+        self.portal.manage_delObjects(["test.xml"])\n         transaction.commit()\n \n     def testFileUploadTxt(self):\n         view = FileUploadView(self.portal, self.request)\n         from plone.namedfile.file import FileChunk\n-        chunk = FileChunk(b\'foobar\')\n-        chunk.filename = \'test.txt\'\n-        self.request.form[\'file\'] = chunk\n-        self.request.REQUEST_METHOD = \'POST\'\n+\n+        chunk = FileChunk(b"foobar")\n+        chunk.filename = "test.txt"\n+        self.request.form["file"] = chunk\n+        self.request.REQUEST_METHOD = "POST"\n         # the next calls plone.app.dexterity.factories and does a\n         # transaction.commit. Needs cleanup and FunctionalTesting layer.\n         data = json.loads(view())\n-        self.assertEqual(data[\'url\'], \'http://nohost/plone/test.txt\')\n-        self.assertTrue(data[\'UID\'] is not None)\n+        self.assertEqual(data["url"], "http://nohost/plone/test.txt")\n+        self.assertTrue(data["UID"] is not None)\n         # clean it up...\n-        self.portal.manage_delObjects([\'test.txt\'])\n+        self.portal.manage_delObjects(["test.txt"])\n         transaction.commit()\ndiff --git a/plone/app/content/utils.py b/plone/app/content/utils.py\nindex 978273b..64692a2 100644\n--- a/plone/app/content/utils.py\n+++ b/plone/app/content/utils.py\n@@ -1,9 +1,10 @@\n-from DateTime import DateTime\n+import datetime\n \n import Missing\n-import datetime\n+\n # use simplejson because it\'s ahead of stdlib and supports more types\n import simplejson\n+from DateTime import DateTime\n \n \n def custom_json_handler(obj):\ndiff --git a/setup.py b/setup.py\nindex e0e051c..773d670 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,16 +1,17 @@\n-from setuptools import find_packages\n-from setuptools import setup\n+from setuptools import find_packages, setup\n \n-version = \'4.0.0a4.dev0\'\n+version = "4.0.0a4.dev0"\n \n setup(\n-    name=\'plone.app.content\',\n+    name="plone.app.content",\n     version=version,\n     description="Content Views for Plone",\n-    long_description=\'\\n\\n\'.join([\n-        open("README.rst").read(),\n-        open("CHANGES.rst").read(),\n-    ]),\n+    long_description="\\n\\n".join(\n+        [\n+            open("README.rst").read(),\n+            open("CHANGES.rst").read(),\n+        ]\n+    ),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n@@ -25,44 +26,44 @@\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'plone content views viewlet\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.content\',\n-    license=\'GPL version 2\',\n+    keywords="plone content views viewlet",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.content",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require=dict(\n         test=[\n-            \'plone.app.contenttypes\',\n-            \'plone.app.testing\',\n+            "plone.app.contenttypes",\n+            "plone.app.testing",\n         ]\n     ),\n     install_requires=[\n-        \'Acquisition\',\n-        \'plone.app.widgets\',\n-        \'plone.batching\',\n-        \'plone.i18n\',\n-        \'plone.memoize\',\n-        \'plone.protect\',\n-        \'Products.CMFCore>=2.2.0dev\',\n-        \'Products.CMFDynamicViewFTI\',  # required for cmf.ModifyViewTemplate\n-        \'Products.CMFPlone\',\n-        \'plone.app.vocabularies>4.1.2\',\n-        \'setuptools\',\n-        \'simplejson\',\n-        \'z3c.form\',\n-        \'zope.component\',\n-        \'zope.container\',\n-        \'zope.event\',\n-        \'zope.i18n\',\n-        \'zope.i18nmessageid\',\n-        \'zope.interface\',\n-        \'zope.lifecycleevent\',\n-        \'zope.publisher\',\n-        \'zope.schema\',\n-        \'Zope\',\n+        "Acquisition",\n+        "plone.app.widgets",\n+        "plone.batching",\n+        "plone.i18n",\n+        "plone.memoize",\n+        "plone.protect",\n+        "Products.CMFCore>=2.2.0dev",\n+        "Products.CMFDynamicViewFTI",  # required for cmf.ModifyViewTemplate\n+        "Products.CMFPlone",\n+        "plone.app.vocabularies>4.1.2",\n+        "setuptools",\n+        "simplejson",\n+        "z3c.form",\n+        "zope.component",\n+        "zope.container",\n+        "zope.event",\n+        "zope.i18n",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n+        "zope.lifecycleevent",\n+        "zope.publisher",\n+        "zope.schema",\n+        "Zope",\n     ],\n )\n'

Repository: plone.app.content


Branch: refs/heads/master
Date: 2021-08-12T19:58:07+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.content/commit/e39613d3bc2b47def2ebf6cc979d2b8f2128e740

Merge pull request #231 from plone/codestyle

Black, Isort, pyupgrade

Files changed:
A news/231.bugfix
M plone/__init__.py
M plone/app/__init__.py
M plone/app/content/browser/actions.py
M plone/app/content/browser/adding.py
M plone/app/content/browser/constraintypes.py
M plone/app/content/browser/content_status_history.py
M plone/app/content/browser/content_status_modify.py
M plone/app/content/browser/contents/__init__.py
M plone/app/content/browser/contents/copy.py
M plone/app/content/browser/contents/cut.py
M plone/app/content/browser/contents/defaultpage.py
M plone/app/content/browser/contents/delete.py
M plone/app/content/browser/contents/paste.py
M plone/app/content/browser/contents/properties.py
M plone/app/content/browser/contents/rearrange.py
M plone/app/content/browser/contents/rename.py
M plone/app/content/browser/contents/tags.py
M plone/app/content/browser/contents/workflow.py
M plone/app/content/browser/file.py
M plone/app/content/browser/folder_publish.py
M plone/app/content/browser/folderfactories.py
M plone/app/content/browser/i18n.py
M plone/app/content/browser/interfaces.py
M plone/app/content/browser/query.py
M plone/app/content/browser/reviewlist.py
M plone/app/content/browser/selection.py
M plone/app/content/browser/tableview.py
M plone/app/content/browser/vocabulary.py
M plone/app/content/catalog.py
M plone/app/content/container.py
M plone/app/content/interfaces.py
M plone/app/content/item.py
M plone/app/content/namechooser.py
M plone/app/content/testing.py
M plone/app/content/tests/test_actions.py
M plone/app/content/tests/test_adding.py
M plone/app/content/tests/test_basecontent.py
M plone/app/content/tests/test_content_status_modify.py
M plone/app/content/tests/test_contents.py
M plone/app/content/tests/test_folder.py
M plone/app/content/tests/test_folder_publish.py
M plone/app/content/tests/test_namechooser.py
M plone/app/content/tests/test_namechooser_unit.py
M plone/app/content/tests/test_non_ascii_characters_in_workflow_state.py
M plone/app/content/tests/test_reviewlist.py
M plone/app/content/tests/test_selectdefaultpage.py
M plone/app/content/tests/test_table.py
M plone/app/content/tests/test_widgets.py
M plone/app/content/utils.py
M setup.py

b'diff --git a/news/231.bugfix b/news/231.bugfix\nnew file mode 100644\nindex 0000000..71d5207\n--- /dev/null\n+++ b/news/231.bugfix\n@@ -0,0 +1 @@\n+isort, black bode style and pyupgrade [jensens]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/content/browser/actions.py b/plone/app/content/browser/actions.py\nindex 77d1ebe..a98edb5 100644\n--- a/plone/app/content/browser/actions.py\n+++ b/plone/app/content/browser/actions.py\n@@ -1,6 +1,6 @@\n+import transaction\n from AccessControl import getSecurityManager\n-from Acquisition import aq_inner\n-from Acquisition import aq_parent\n+from Acquisition import aq_inner, aq_parent\n from OFS.CopySupport import CopyError\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n@@ -8,29 +8,24 @@\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n-from ZODB.POSException import ConflictError\n-from z3c.form import button\n-from z3c.form import field\n-from z3c.form import form\n+from z3c.form import button, field, form\n from z3c.form.widget import ComputedWidgetAttribute\n from zExceptions import Unauthorized\n+from ZODB.POSException import ConflictError\n from zope import schema\n-from zope.component import getMultiAdapter\n-from zope.component import queryMultiAdapter\n+from zope.component import getMultiAdapter, queryMultiAdapter\n from zope.container.interfaces import INameChooser\n from zope.event import notify\n from zope.interface import Interface\n from zope.lifecycleevent import ObjectModifiedEvent\n \n-import transaction\n-\n \n class LockingBase(BrowserView):\n-\n     @property\n     def is_locked(self):\n         locking_view = queryMultiAdapter(\n-            (self.context, self.request), name=\'plone_lock_info\')\n+            (self.context, self.request), name="plone_lock_info"\n+        )\n \n         return locking_view and locking_view.is_locked_for_current_user()\n \n@@ -38,36 +33,37 @@ def is_locked(self):\n class DeleteConfirmationForm(form.Form, LockingBase):\n \n     fields = field.Fields()\n-    template = ViewPageTemplateFile(\'templates/delete_confirmation.pt\')\n+    template = ViewPageTemplateFile("templates/delete_confirmation.pt")\n     enableCSRFProtection = True\n \n     def view_url(self):\n-        \'\'\' Facade to the homonymous plone_context_state method\n-        \'\'\'\n+        """Facade to the homonymous plone_context_state method"""\n         context_state = getMultiAdapter(\n-            (self.context, self.request),\n-            name=\'plone_context_state\'\n+            (self.context, self.request), name="plone_context_state"\n         )\n         return context_state.view_url()\n \n     def more_info(self):\n         adapter = queryMultiAdapter(\n-            (self.context, self.request), name=\'delete_confirmation_info\')\n+            (self.context, self.request), name="delete_confirmation_info"\n+        )\n         if adapter:\n             return adapter()\n         return ""\n \n     @property\n     def items_to_delete(self):\n-        catalog = getToolByName(self.context, \'portal_catalog\')\n-        putils = getToolByName(self.context, \'plone_utils\')\n-        results = catalog({\n-            \'path\': \'/\'.join(self.context.getPhysicalPath()),\n-            \'portal_type\': putils.getUserFriendlyTypes(),\n-        })\n+        catalog = getToolByName(self.context, "portal_catalog")\n+        putils = getToolByName(self.context, "plone_utils")\n+        results = catalog(\n+            {\n+                "path": "/".join(self.context.getPhysicalPath()),\n+                "portal_type": putils.getUserFriendlyTypes(),\n+            }\n+        )\n         return len(results)\n \n-    @button.buttonAndHandler(_(\'Delete\'), name=\'Delete\')\n+    @button.buttonAndHandler(_("Delete"), name="Delete")\n     def handle_delete(self, action):\n         title = safe_unicode(self.context.Title())\n         parent = aq_parent(aq_inner(self.context))\n@@ -77,27 +73,26 @@ def handle_delete(self, action):\n         if self.context.aq_chain == self.context.aq_inner.aq_chain:\n             parent.manage_delObjects(self.context.getId())\n             IStatusMessage(self.request).add(\n-                _(\'${title} has been deleted.\', mapping={\'title\': title}))\n+                _("${title} has been deleted.", mapping={"title": title})\n+            )\n         else:\n             IStatusMessage(self.request).add(\n-                _(\'"${title}" has already been deleted\',\n-                  mapping={\'title\': title})\n+                _(\'"${title}" has already been deleted\', mapping={"title": title})\n             )\n \n         self.request.response.redirect(parent.absolute_url())\n \n-    @button.buttonAndHandler(\n-        _(\'label_cancel\', default=\'Cancel\'), name=\'Cancel\')\n+    @button.buttonAndHandler(_("label_cancel", default="Cancel"), name="Cancel")\n     def handle_cancel(self, action):\n         target = self.view_url()\n         return self.request.response.redirect(target)\n \n     def updateActions(self):\n         super().updateActions()\n-        if self.actions and \'Delete\' in self.actions:\n-            self.actions[\'Delete\'].addClass(\'btn-danger\')\n-        if self.actions and \'Cancel\' in self.actions:\n-            self.actions[\'Cancel\'].addClass(\'btn-secondary\')\n+        if self.actions and "Delete" in self.actions:\n+            self.actions["Delete"].addClass("btn-danger")\n+        if self.actions and "Cancel" in self.actions:\n+            self.actions["Cancel"].addClass("btn-secondary")\n \n \n def valid_id(self):\n@@ -108,42 +103,49 @@ def valid_id(self):\n \n class IRenameForm(Interface):\n     new_id = schema.ASCIILine(\n-        title=_(\'label_new_short_name\', default=\'New Short Name\'),\n-        description=_(\'help_short_name_url\', default=\n-                      \'Short name is the part that shows up in the URL \' +\n-                      \'of the item.\'),\n+        title=_("label_new_short_name", default="New Short Name"),\n+        description=_(\n+            "help_short_name_url",\n+            default="Short name is the part that shows up in the URL " + "of the item.",\n+        ),\n         constraint=valid_id,\n     )\n \n     new_title = schema.TextLine(\n-        title=_(\'label_new_title\', default=\'New Title\'),\n+        title=_("label_new_title", default="New Title"),\n     )\n \n+\n default_new_id = ComputedWidgetAttribute(\n-    lambda form: form.context.getId(), field=IRenameForm[\'new_id\'])\n+    lambda form: form.context.getId(), field=IRenameForm["new_id"]\n+)\n \n default_new_title = ComputedWidgetAttribute(\n-    lambda form: form.context.Title(), field=IRenameForm[\'new_title\'])\n+    lambda form: form.context.Title(), field=IRenameForm["new_title"]\n+)\n \n \n class RenameForm(form.Form):\n \n     fields = field.Fields(IRenameForm)\n-    template = ViewPageTemplateFile(\'templates/object_rename.pt\')\n+    template = ViewPageTemplateFile("templates/object_rename.pt")\n     enableCSRFProtection = True\n     ignoreContext = True\n \n-    label = _(\'heading_rename_item\', default=\'Rename item\')\n-    description = _(\'description_rename_item\', default=\n-                    \'Each item has a Short Name and a Title, which you can \' +\n-                    \'change by entering the new details below.\')\n+    label = _("heading_rename_item", default="Rename item")\n+    description = _(\n+        "description_rename_item",\n+        default="Each item has a Short Name and a Title, which you can "\n+        + "change by entering the new details below.",\n+    )\n \n     def view_url(self):\n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=\'plone_context_state\')\n+            (self.context, self.request), name="plone_context_state"\n+        )\n         return context_state.view_url()\n \n-    @button.buttonAndHandler(_(\'Rename\'), name=\'Rename\')\n+    @button.buttonAndHandler(_("Rename"), name="Rename")\n     def handle_rename(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -151,15 +153,19 @@ def handle_rename(self, action):\n \n         parent = aq_parent(aq_inner(self.context))\n         sm = getSecurityManager()\n-        if not sm.checkPermission(\'Copy or Move\', parent):\n-            raise Unauthorized(_(\'Permission denied to rename ${title}.\',\n-                                 mapping={\'title\': self.context.title}))\n+        if not sm.checkPermission("Copy or Move", parent):\n+            raise Unauthorized(\n+                _(\n+                    "Permission denied to rename ${title}.",\n+                    mapping={"title": self.context.title},\n+                )\n+            )\n \n         # Requires cmf.ModifyPortalContent permission\n-        self.context.title = data[\'new_title\']\n+        self.context.title = data["new_title"]\n \n         oldid = self.context.getId()\n-        newid = data[\'new_id\']\n+        newid = data["new_id"]\n         if oldid != newid:\n             newid = INameChooser(parent).chooseName(newid, self.context)\n \n@@ -172,7 +178,14 @@ def handle_rename(self, action):\n             # for 2+3 there are subscribers in Products.CMFDynamicViewFTI\n             # responsible to change (2) or unset (3) the default_page.\n \n-            parent.manage_renameObjects([oldid, ], [str(newid), ])\n+            parent.manage_renameObjects(\n+                [\n+                    oldid,\n+                ],\n+                [\n+                    str(newid),\n+                ],\n+            )\n         else:\n             # Object is not reindex if manage_renameObjects is not called\n             self.context.reindexObject()\n@@ -181,26 +194,27 @@ def handle_rename(self, action):\n         notify(ObjectModifiedEvent(self.context))\n \n         IStatusMessage(self.request).add(\n-            _("Renamed \'${oldid}\' to \'${newid}\'.", mapping={\n-                \'oldid\': oldid, \'newid\': newid}))\n+            _(\n+                "Renamed \'${oldid}\' to \'${newid}\'.",\n+                mapping={"oldid": oldid, "newid": newid},\n+            )\n+        )\n \n         self.request.response.redirect(self.view_url())\n \n-    @button.buttonAndHandler(_(\'label_cancel\', default=\'Cancel\'),\n-                             name=\'Cancel\')\n+    @button.buttonAndHandler(_("label_cancel", default="Cancel"), name="Cancel")\n     def handle_cancel(self, action):\n         self.request.response.redirect(self.view_url())\n \n     def updateActions(self):\n         super().updateActions()\n-        if self.actions and \'Rename\' in self.actions:\n-            self.actions[\'Rename\'].addClass(\'btn-primary\')\n-        if self.actions and \'Cancel\' in self.actions:\n-            self.actions[\'Cancel\'].addClass(\'btn-secondary\')\n+        if self.actions and "Rename" in self.actions:\n+            self.actions["Rename"].addClass("btn-primary")\n+        if self.actions and "Cancel" in self.actions:\n+            self.actions["Cancel"].addClass("btn-secondary")\n \n \n class ObjectCutView(LockingBase):\n-\n     @property\n     def title(self):\n         return self.context.Title()\n@@ -212,17 +226,18 @@ def parent(self):\n     @property\n     def canonical_object_url(self):\n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=\'plone_context_state\')\n+            (self.context, self.request), name="plone_context_state"\n+        )\n         return context_state.canonical_object_url()\n \n     @property\n     def view_url(self):\n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=\'plone_context_state\')\n+            (self.context, self.request), name="plone_context_state"\n+        )\n         return context_state.view_url()\n \n-    def do_redirect(self, url, message=None, message_type=\'info\',\n-                    raise_exception=None):\n+    def do_redirect(self, url, message=None, message_type="info", raise_exception=None):\n         if message is not None:\n             IStatusMessage(self.request).add(message, type=message_type)\n \n@@ -232,29 +247,36 @@ def do_redirect(self, url, message=None, message_type=\'info\',\n \n     def do_action(self):\n         if self.is_locked:\n-            return self.do_redirect(self.view_url,\n-                                    _(\'${title} is locked and cannot be cut.\',\n-                                        mapping={\'title\': self.title, }))\n+            return self.do_redirect(\n+                self.view_url,\n+                _(\n+                    "${title} is locked and cannot be cut.",\n+                    mapping={\n+                        "title": self.title,\n+                    },\n+                ),\n+            )\n \n         try:\n             cp = self.parent.manage_cutObjects(self.context.getId())\n         except CopyError:\n-            return self.do_redirect(self.view_url,\n-                                    _(\'${title} is not moveable.\',\n-                                        mapping={\'title\': self.title}))\n+            return self.do_redirect(\n+                self.view_url,\n+                _("${title} is not moveable.", mapping={"title": self.title}),\n+            )\n         self.request.response.setCookie(\n-            \'__cp\', cp, path=self.request[\'BASEPATH1\'] or \'/\')\n-        self.request[\'__cp\'] = cp\n+            "__cp", cp, path=self.request["BASEPATH1"] or "/"\n+        )\n+        self.request["__cp"] = cp\n \n         return self.do_redirect(\n-            self.view_url,\n-            _(\'${title} cut.\', mapping={\'title\': self.title}),\n-            \'info\'\n+            self.view_url, _("${title} cut.", mapping={"title": self.title}), "info"\n         )\n \n     def __call__(self):\n         authenticator = getMultiAdapter(\n-            (self.context, self.request), name=\'authenticator\')\n+            (self.context, self.request), name="authenticator"\n+        )\n \n         if not authenticator.verify():\n             raise Unauthorized\n@@ -263,66 +285,64 @@ def __call__(self):\n \n \n class ObjectCopyView(ObjectCutView):\n-\n     def do_action(self):\n         try:\n             cp = self.parent.manage_copyObjects(self.context.getId())\n         except CopyError:\n-            return self.do_redirect(self.view_url,\n-                                    _(\'${title} is not copyable.\',\n-                                        mapping={\'title\': self.title}))\n+            return self.do_redirect(\n+                self.view_url,\n+                _("${title} is not copyable.", mapping={"title": self.title}),\n+            )\n         self.request.response.setCookie(\n-            \'__cp\', cp, path=self.request[\'BASEPATH1\'] or \'/\')\n-        self.request[\'__cp\'] = cp\n+            "__cp", cp, path=self.request["BASEPATH1"] or "/"\n+        )\n+        self.request["__cp"] = cp\n \n-        return self.do_redirect(self.view_url,\n-                                _(\'${title} copied.\',\n-                                    mapping={\'title\': self.title}))\n+        return self.do_redirect(\n+            self.view_url, _("${title} copied.", mapping={"title": self.title})\n+        )\n \n \n class ObjectDeleteView(ObjectCutView):\n-\n     def do_action(self):\n         form = DeleteConfirmationForm(self.context, self.request)\n         form.update()\n \n-        button = form.buttons[\'Delete\']\n+        button = form.buttons["Delete"]\n         # delete by clicking the form button in delete_confirmation\n         form.handlers.getHandler(button)(form, button)\n \n \n class ObjectPasteView(ObjectCutView):\n-\n     def do_action(self):\n         if not self.context.cb_dataValid():\n             return self.do_redirect(\n                 self.canonical_object_url,\n-                _(\'Copy or cut one or more items to paste.\'),\n-                \'error\'\n+                _("Copy or cut one or more items to paste."),\n+                "error",\n             )\n         try:\n-            self.context.manage_pasteObjects(self.request[\'__cp\'])\n+            self.context.manage_pasteObjects(self.request["__cp"])\n         except ConflictError:\n             raise\n         except Unauthorized as e:\n             self.do_redirect(\n-                self.canonical_object_url,\n-                _(\'You are not authorized to paste here.\'),\n-                e\n+                self.canonical_object_url, _("You are not authorized to paste here."), e\n             )\n         except CopyError as e:\n             error_string = str(e)\n-            if \'Item Not Found\' in error_string:\n+            if "Item Not Found" in error_string:\n                 return self.do_redirect(\n                     self.canonical_object_url,\n-                    _(\'The item you are trying to paste could not be found. \'\n-                      \'It may have been moved or deleted after you copied or \'\n-                      \'cut it.\'),\n-                    \'error\',\n+                    _(\n+                        "The item you are trying to paste could not be found. "\n+                        "It may have been moved or deleted after you copied or "\n+                        "cut it."\n+                    ),\n+                    "error",\n                 )\n         except Exception as e:\n-            if \'__cp\' in self.request:\n-                self.do_redirect(self.canonical_object_url, e, \'error\', e)\n+            if "__cp" in self.request:\n+                self.do_redirect(self.canonical_object_url, e, "error", e)\n \n-        return self.do_redirect(self.canonical_object_url,\n-                                _(\'Item(s) pasted.\'))\n+        return self.do_redirect(self.canonical_object_url, _("Item(s) pasted."))\ndiff --git a/plone/app/content/browser/adding.py b/plone/app/content/browser/adding.py\nindex 88ad32e..60f0698 100644\n--- a/plone/app/content/browser/adding.py\n+++ b/plone/app/content/browser/adding.py\n@@ -4,18 +4,17 @@\n \n \n class CMFAdding(Implicit, ContentAdding):\n-    """An adding view with a less silly next-url\n-    """\n+    """An adding view with a less silly next-url"""\n \n     # We need to do this to get proper traversal URLs - otherwise, the\n     # <base /> tag is messed up.\n-    id = \'+\'\n+    id = "+"\n \n     def add(self, content):\n         content = super().add(content)\n         # We need to ensure that we finish type construction, not at least\n         # to set the correct permissions based on the workflow\n-        getToolByName(content, \'portal_types\')\n+        getToolByName(content, "portal_types")\n \n         return content\n \ndiff --git a/plone/app/content/browser/constraintypes.py b/plone/app/content/browser/constraintypes.py\nindex 11c5881..319fbfd 100644\n--- a/plone/app/content/browser/constraintypes.py\n+++ b/plone/app/content/browser/constraintypes.py\n@@ -1,21 +1,15 @@\n from plone.autoform.form import AutoExtensibleForm\n-from Products.CMFPlone import PloneMessageFactory as  _\n+from Products.CMFPlone import PloneMessageFactory as _\n from Products.CMFPlone.interfaces import ISelectableConstrainTypes\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from z3c.form import button\n-from z3c.form import form\n+from z3c.form import button, form\n from z3c.form.browser.checkbox import CheckBoxFieldWidget\n from zope.i18nmessageid import MessageFactory\n-from zope.interface import implementer\n-from zope.interface import Interface\n-from zope.interface import invariant\n+from zope.interface import Interface, implementer, invariant\n from zope.interface.exceptions import Invalid\n-from zope.schema import Choice\n-from zope.schema import List\n+from zope.schema import Choice, List\n from zope.schema.interfaces import IVocabularyFactory\n-from zope.schema.vocabulary import SimpleTerm\n-from zope.schema.vocabulary import SimpleVocabulary\n-\n+from zope.schema.vocabulary import SimpleTerm, SimpleVocabulary\n \n # XXX\n # acquire locallyAllowedTypes from parent (default)\n@@ -33,24 +27,22 @@ def ST(key, title):\n \n \n # reuse the translations that we had in atcontenttypes\n-AMF = MessageFactory(\'atcontenttypes\')\n+AMF = MessageFactory("atcontenttypes")\n \n-possible_constrain_types = SimpleVocabulary([\n-    ST(ACQUIRE,\n-       AMF(\'constraintypes_acquire_label\',\n-         default=\'Use parent folder settings\')),\n-    ST(DISABLED,\n-       AMF(\'constraintypes_disable_label\',\n-         default=\'Use portal default\')),\n-    ST(ENABLED,\n-       AMF(\'constraintypes_enable_label\',\n-         default=\'Select manually\'))\n-])\n+possible_constrain_types = SimpleVocabulary(\n+    [\n+        ST(\n+            ACQUIRE,\n+            AMF("constraintypes_acquire_label", default="Use parent folder settings"),\n+        ),\n+        ST(DISABLED, AMF("constraintypes_disable_label", default="Use portal default")),\n+        ST(ENABLED, AMF("constraintypes_enable_label", default="Select manually")),\n+    ]\n+)\n \n \n @implementer(IVocabularyFactory)\n class ValidTypes:\n-\n     def __call__(self, context):\n         constrain_aspect = context.context\n         items = []\n@@ -58,6 +50,7 @@ def __call__(self, context):\n             items.append(SimpleTerm(value=type_.getId(), title=type_.Title()))\n         return SimpleVocabulary(items)\n \n+\n ValidTypesFactory = ValidTypes()\n \n \n@@ -65,36 +58,38 @@ class IConstrainForm(Interface):\n \n     constrain_types_mode = Choice(\n         title=_("label_type_restrictions", default="Type restrictions"),\n-        description=_("help_add_restriction_mode",\n-                        default="Select the restriction policy "\n-                        "in this location"),\n+        description=_(\n+            "help_add_restriction_mode",\n+            default="Select the restriction policy " "in this location",\n+        ),\n         vocabulary=possible_constrain_types,\n         required=False,\n     )\n \n     allowed_types = List(\n         title=_("label_immediately_addable_types", default="Allowed types"),\n-        description=_("help_immediately_addable_types",\n-                        default="Controls what types are addable "\n-                        "in this location"),\n-        value_type=Choice(\n-            source="plone.app.content.ValidAddableTypes"),\n+        description=_(\n+            "help_immediately_addable_types",\n+            default="Controls what types are addable " "in this location",\n+        ),\n+        value_type=Choice(source="plone.app.content.ValidAddableTypes"),\n         required=False,\n     )\n \n     secondary_types = List(\n         title=_("label_locally_allowed_types", default="Secondary types"),\n-        description=_("help_locally_allowed_types", default=""\n-                        "Select which types should be available in the "\n-                        "\'More&hellip;\' submenu <em>instead</em> of in the "\n-                        "main pulldown. "\n-                        "This is useful to indicate that these are not the "\n-                        "preferred types "\n-                        "in this location, but are allowed if you really "\n-                        "need them."\n-                        ),\n-        value_type=Choice(\n-            source="plone.app.content.ValidAddableTypes"),\n+        description=_(\n+            "help_locally_allowed_types",\n+            default=""\n+            "Select which types should be available in the "\n+            "\'More&hellip;\' submenu <em>instead</em> of in the "\n+            "main pulldown. "\n+            "This is useful to indicate that these are not the "\n+            "preferred types "\n+            "in this location, but are allowed if you really "\n+            "need them.",\n+        ),\n+        value_type=Choice(source="plone.app.content.ValidAddableTypes"),\n         required=False,\n     )\n \n@@ -106,15 +101,17 @@ def legal_not_immediately_addable(data):\n                 missing.append(one_allowed)\n         if missing:\n             raise Invalid(\n-                _("You cannot have a type as a secondary type without "\n+                _(\n+                    "You cannot have a type as a secondary type without "\n                     "having it allowed. You have selected ${types}.",\n-                    mapping=dict(types=", ".join(missing))))\n+                    mapping=dict(types=", ".join(missing)),\n+                )\n+            )\n         return True\n \n \n @implementer(IConstrainForm)\n class FormContentAdapter:\n-\n     def __init__(self, context):\n         self.context = ISelectableConstrainTypes(context)\n \n@@ -129,15 +126,20 @@ def allowed_types(self):\n     @property\n     def secondary_types(self):\n         immediately_addable = self.context.getImmediatelyAddableTypes()\n-        return [t for t in self.context.getLocallyAllowedTypes()\n-                if t not in immediately_addable]\n+        return [\n+            t\n+            for t in self.context.getLocallyAllowedTypes()\n+            if t not in immediately_addable\n+        ]\n \n \n class ConstrainsFormView(AutoExtensibleForm, form.EditForm):\n \n     schema = IConstrainForm\n-    label = _("heading_set_content_type_restrictions",\n-                default="Restrict what types of content can be added")\n+    label = _(\n+        "heading_set_content_type_restrictions",\n+        default="Restrict what types of content can be added",\n+    )\n     template = ViewPageTemplateFile("constraintypes.pt")\n \n     def getContent(self):\n@@ -145,40 +147,39 @@ def getContent(self):\n \n     def updateFields(self):\n         super().updateFields()\n-        self.fields[\'allowed_types\'].widgetFactory = CheckBoxFieldWidget\n-        self.fields[\'secondary_types\'].widgetFactory = CheckBoxFieldWidget\n+        self.fields["allowed_types"].widgetFactory = CheckBoxFieldWidget\n+        self.fields["secondary_types"].widgetFactory = CheckBoxFieldWidget\n \n     def updateWidgets(self):\n         super().updateWidgets()\n-        self.widgets[\'allowed_types\'].addClass(\'current_prefer_form\')\n-        self.widgets[\'secondary_types\'].addClass(\'current_allow_form\')\n-        self.widgets[\'constrain_types_mode\'].addClass(\n-            \'constrain_types_mode_form\')\n+        self.widgets["allowed_types"].addClass("current_prefer_form")\n+        self.widgets["secondary_types"].addClass("current_allow_form")\n+        self.widgets["constrain_types_mode"].addClass("constrain_types_mode_form")\n \n     def updateActions(self):\n         super().updateActions()\n-        self.actions[\'save\'].addClass(\'btn btn-primary\')\n+        self.actions["save"].addClass("btn btn-primary")\n \n-    @button.buttonAndHandler(_(\'label_save\', default="Save"), name=\'save\')\n+    @button.buttonAndHandler(_("label_save", default="Save"), name="save")\n     def handleSave(self, action):\n         data, errors = self.extractData()\n         if errors:\n             self.status = self.formErrorsMessage\n             return\n \n-        allowed_types = data[\'allowed_types\']\n+        allowed_types = data["allowed_types"]\n         immediately_addable = [\n-            t for t in allowed_types\n-            if t not in data[\'secondary_types\']]\n+            t for t in allowed_types if t not in data["secondary_types"]\n+        ]\n \n         aspect = ISelectableConstrainTypes(self.context)\n-        aspect.setConstrainTypesMode(data[\'constrain_types_mode\'])\n+        aspect.setConstrainTypesMode(data["constrain_types_mode"])\n         aspect.setLocallyAllowedTypes(allowed_types)\n         aspect.setImmediatelyAddableTypes(immediately_addable)\n         contextURL = self.context.absolute_url()\n         self.request.response.redirect(contextURL)\n \n-    @button.buttonAndHandler(_(\'label_cancel\', default="Cancel"), name=\'cancel\')\n+    @button.buttonAndHandler(_("label_cancel", default="Cancel"), name="cancel")\n     def handleCancel(self, action):\n         contextURL = self.context.absolute_url()\n         self.request.response.redirect(contextURL)\ndiff --git a/plone/app/content/browser/content_status_history.py b/plone/app/content/browser/content_status_history.py\nindex 6be7e6e..db32576 100644\n--- a/plone/app/content/browser/content_status_history.py\n+++ b/plone/app/content/browser/content_status_history.py\n@@ -1,10 +1,8 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.utils import isExpired\n-from Products.CMFPlone.utils import human_readable_size\n+from Products.CMFPlone.utils import human_readable_size, isExpired\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from z3c.form import field\n-from z3c.form import form\n+from z3c.form import field, form\n from zope.interface import Interface\n from zope.publisher.browser import BrowserView\n from zope.schema import Datetime\n@@ -12,8 +10,7 @@\n \n \n class IContentStatusHistoryDates(Interface):\n-    """ Interface for the two dates on content status history view\n-    """\n+    """Interface for the two dates on content status history view"""\n \n     effective_date = Datetime(\n         title=_("label_effective_date", default="Publishing Date"),\n@@ -42,24 +39,20 @@ class ContentStatusHistoryDatesForm(form.Form):\n     ignoreContext = True\n     label = "Content status history dates"\n \n-    effective_date = FieldProperty(\n-        IContentStatusHistoryDates[\'effective_date\']\n-    )\n-    expiration_date = FieldProperty(\n-        IContentStatusHistoryDates[\'expiration_date\']\n-    )\n+    effective_date = FieldProperty(IContentStatusHistoryDates["effective_date"])\n+    expiration_date = FieldProperty(IContentStatusHistoryDates["expiration_date"])\n \n \n class ContentStatusHistoryView(BrowserView):\n \n-    template = ViewPageTemplateFile(\'templates/content_status_history.pt\')\n+    template = ViewPageTemplateFile("templates/content_status_history.pt")\n \n     def __init__(self, context, request):\n         super().__init__(context, request)\n \n         self.dates_form = ContentStatusHistoryDatesForm(context, request)\n         self.dates_form.updateWidgets()\n-        self.plone_utils = getToolByName(context, \'plone_utils\')\n+        self.plone_utils = getToolByName(context, "plone_utils")\n         self.errors = {}\n \n     def __call__(\n@@ -74,45 +67,35 @@ def __call__(\n     ):\n \n         data = self.dates_form.extractData()\n-        if (\n-            self.request.get(\'form.widgets.effective_date-calendar\', None)\n-            and data\n-        ):\n-            effective_date = data[0][\'effective_date\'].strftime(\n-                "%Y-%m-%d %H:%M"\n-            )\n+        if self.request.get("form.widgets.effective_date-calendar", None) and data:\n+            effective_date = data[0]["effective_date"].strftime("%Y-%m-%d %H:%M")\n \n-        if (\n-            self.request.get(\'form.widgets.expiration_date-calendar\', None)\n-            and data\n-        ):\n-            expiration_date = data[0][\'expiration_date\'].strftime(\n-                "%Y-%m-%d %H:%M"\n-            )\n+        if self.request.get("form.widgets.expiration_date-calendar", None) and data:\n+            expiration_date = data[0]["expiration_date"].strftime("%Y-%m-%d %H:%M")\n \n-        if self.request.get(\'form.button.Cancel\', None):\n+        if self.request.get("form.button.Cancel", None):\n             return self.request.RESPONSE.redirect(\n                 "%s/view" % self.context.absolute_url()\n             )\n \n-        if self.request.get(\'form.submitted\', None):\n+        if self.request.get("form.submitted", None):\n             self.validate(workflow_action=workflow_action, paths=paths)\n             if self.errors:\n                 self.plone_utils.addPortalMessage(\n-                    _(\'Please correct the indicated errors.\'), \'error\'\n+                    _("Please correct the indicated errors."), "error"\n                 )\n                 return self.template()\n \n-        if self.request.get(\'form.button.Publish\', None):\n-            return self.context.restrictedTraverse(\'content_status_modify\')(\n+        if self.request.get("form.button.Publish", None):\n+            return self.context.restrictedTraverse("content_status_modify")(\n                 workflow_action=workflow_action,\n                 comment=comment,\n                 effective_date=effective_date,\n                 expiration_date=expiration_date,\n             )\n \n-        if self.request.get(\'form.button.FolderPublish\', None):\n-            self.context.restrictedTraverse(\'folder_publish\')(\n+        if self.request.get("form.button.FolderPublish", None):\n+            self.context.restrictedTraverse("folder_publish")(\n                 workflow_action=workflow_action,\n                 paths=paths,\n                 comment=comment,\n@@ -125,20 +108,18 @@ def __call__(\n \n     def validate(self, workflow_action=None, paths=[]):\n         if workflow_action is None:\n-            self.errors[\'workflow_action\'] = _(\n-                \'You must select a publishing action.\'\n-            )\n+            self.errors["workflow_action"] = _("You must select a publishing action.")\n \n         if not paths:\n-            self.errors[\'paths\'] = _(\'You must select content to change.\')\n+            self.errors["paths"] = _("You must select content to change.")\n             # If there are no paths, it\'s mostly a mistake\n             # Set paths using orgi_paths, otherwise users are getting confused\n-            orig_paths = self.request.get(\'orig_paths\')\n-            self.request.set(\'paths\', orig_paths)\n+            orig_paths = self.request.get("orig_paths")\n+            self.request.set("paths", orig_paths)\n \n     def get_objects_from_path_list(self, paths=[]):\n         contents = []\n-        portal = getToolByName(self.context, \'portal_url\').getPortalObject()\n+        portal = getToolByName(self.context, "portal_url").getPortalObject()\n         for path in paths:\n             obj = portal.restrictedTraverse(str(path), None)\n             if obj is not None:\n@@ -146,8 +127,8 @@ def get_objects_from_path_list(self, paths=[]):\n         return contents\n \n     def redirect_to_referrer(self):\n-        referer = self.request.get(\'HTTP_REFERER\', \'\')\n-        target_url = referer.split(\'?\', 1)[0]\n+        referer = self.request.get("HTTP_REFERER", "")\n+        target_url = referer.split("?", 1)[0]\n         return self.request.RESPONSE.redirect(target_url)\n \n     def isExpired(self, content):\ndiff --git a/plone/app/content/browser/content_status_modify.py b/plone/app/content/browser/content_status_modify.py\nindex cfccae9..80183d7 100644\n--- a/plone/app/content/browser/content_status_modify.py\n+++ b/plone/app/content/browser/content_status_modify.py\n@@ -1,6 +1,5 @@\n from AccessControl import Unauthorized\n-from Acquisition import aq_inner\n-from Acquisition import aq_parent\n+from Acquisition import aq_inner, aq_parent\n from DateTime import DateTime\n from plone.protect import CheckAuthenticator\n from Products.CMFCore.utils import getToolByName\n@@ -98,7 +97,7 @@ def __call__(\n             pass\n \n         # Create the note while we still have access to the original context\n-        note = "Changed status of %s at %s" % (\n+        note = "Changed status of {} at {}".format(\n             context.title_or_id(),\n             context.absolute_url(),\n         )\ndiff --git a/plone/app/content/browser/contents/__init__.py b/plone/app/content/browser/contents/__init__.py\nindex d926be8..596c96f 100644\n--- a/plone/app/content/browser/contents/__init__.py\n+++ b/plone/app/content/browser/contents/__init__.py\n@@ -1,10 +1,5 @@\n from AccessControl import Unauthorized\n from Acquisition import aq_inner\n-from plone.app.content.browser.file import TUS_ENABLED\n-from plone.app.content.browser.interfaces import IFolderContentsView\n-from plone.app.content.interfaces import IStructureAction\n-from plone.app.content.utils import json_dumps\n-from plone.app.content.utils import json_loads\n from plone.app.uuid.utils import uuidToCatalogBrain\n from plone.protect.postonly import check as checkpost\n from plone.registry.interfaces import IRegistry\n@@ -17,18 +12,21 @@\n from Products.Five import BrowserView\n from Products.PortalTransforms.transforms.safe_html import SafeHTML\n from zope.browsermenu.interfaces import IBrowserMenu\n-from zope.component import getMultiAdapter\n-from zope.component import getUtilitiesFor\n-from zope.component import getUtility\n+from zope.component import getMultiAdapter, getUtilitiesFor, getUtility\n from zope.i18n import translate\n from zope.interface import implementer\n from zope.schema.interfaces import IVocabularyFactory\n \n+from plone.app.content.browser.file import TUS_ENABLED\n+from plone.app.content.browser.interfaces import IFolderContentsView\n+from plone.app.content.interfaces import IStructureAction\n+from plone.app.content.utils import json_dumps, json_loads\n+\n \n class ContentsBaseAction(BrowserView):\n \n-    success_msg = _(\'Success\')\n-    failure_msg = _(\'Failure\')\n+    success_msg = _("Success")\n+    failure_msg = _("Failure")\n     required_obj_permission = None\n \n     @property\n@@ -41,20 +39,21 @@ def objectTitle(self, obj):\n         return utils.safe_unicode(title)\n \n     def protect(self):\n-        authenticator = getMultiAdapter((self.context, self.request),\n-                                        name=\'authenticator\')\n+        authenticator = getMultiAdapter(\n+            (self.context, self.request), name="authenticator"\n+        )\n         if not authenticator.verify():\n             raise Unauthorized\n         checkpost(self.request)\n \n     def json(self, data):\n         self.request.response.setHeader(\n-            \'Content-Type\', \'application/json; charset=utf-8\'\n+            "Content-Type", "application/json; charset=utf-8"\n         )\n         return json_dumps(data)\n \n     def get_selection(self):\n-        selection = self.request.form.get(\'selection\', \'[]\')\n+        selection = self.request.form.get("selection", "[]")\n         return json_loads(selection)\n \n     def action(self, obj):\n@@ -72,13 +71,13 @@ def __call__(self, keep_selection_order=False):\n         context = aq_inner(self.context)\n         selection = self.get_selection()\n \n-        parts = str(self.request.form.get(\'folder\', \'\').lstrip(\'/\')).split(\'/\')\n+        parts = str(self.request.form.get("folder", "").lstrip("/")).split("/")\n         if parts:\n-            parent = self.site.unrestrictedTraverse(\'/\'.join(parts[:-1]))\n+            parent = self.site.unrestrictedTraverse("/".join(parts[:-1]))\n             self.dest = parent.restrictedTraverse(parts[-1])\n \n-        self.catalog = getToolByName(context, \'portal_catalog\')\n-        self.mtool = getToolByName(self.context, \'portal_membership\')\n+        self.catalog = getToolByName(context, "portal_catalog")\n+        self.mtool = getToolByName(self.context, "portal_membership")\n \n         brains = []\n         if keep_selection_order:\n@@ -92,17 +91,15 @@ def __call__(self, keep_selection_order=False):\n             # remove everyone so we know if we missed any\n             selection.remove(brain.UID)\n             obj = brain.getObject()\n-            if (\n-                self.required_obj_permission\n-                and not self.mtool.checkPermission(\n-                    self.required_obj_permission,\n-                    obj\n-                )\n+            if self.required_obj_permission and not self.mtool.checkPermission(\n+                self.required_obj_permission, obj\n             ):\n-                self.errors.append(_(\n-                    \'Permission denied for "${title}"\',\n-                    mapping={\'title\': self.objectTitle(obj)}\n-                ))\n+                self.errors.append(\n+                    _(\n+                        \'Permission denied for "${title}"\',\n+                        mapping={"title": self.objectTitle(obj)},\n+                    )\n+                )\n                 continue\n             self.action(obj)\n \n@@ -111,10 +108,9 @@ def __call__(self, keep_selection_order=False):\n \n     def message(self, missing=[]):\n         if len(missing) > 0:\n-            self.errors.append(_(\n-                \'${items} could not be found\',\n-                mapping={\'items\': str(len(missing))}\n-            ))\n+            self.errors.append(\n+                _("${items} could not be found", mapping={"items": str(len(missing))})\n+            )\n         if self.errors:\n             msg = self.failure_msg\n         else:\n@@ -125,20 +121,17 @@ def message(self, missing=[]):\n             translated_errors = [\n                 translate(error, context=self.request) for error in self.errors\n             ]\n-            translated_msg = \'{:s}: {:s}\'.format(\n-                translated_msg,\n-                \'\\n\'.join(translated_errors)\n+            translated_msg = "{:s}: {:s}".format(\n+                translated_msg, "\\n".join(translated_errors)\n             )\n \n-        return self.json({\n-            \'status\': \'warning\' if self.errors else \'success\',\n-            \'msg\': translated_msg\n-        })\n+        return self.json(\n+            {"status": "warning" if self.errors else "success", "msg": translated_msg}\n+        )\n \n \n @implementer(IFolderContentsView)\n class FolderContentsView(BrowserView):\n-\n     def get_actions(self):\n         actions = []\n         for name, Utility in getUtilitiesFor(IStructureAction):\n@@ -149,34 +142,35 @@ def get_actions(self):\n \n     @property\n     def ignored_columns(self):\n-        """Return columns, which should be ignored in folder contents.\n-        """\n+        """Return columns, which should be ignored in folder contents."""\n         # These columns either have alternatives or are probably not useful\n         ignored = [\n-            \'Date\',\n-            \'Title\',\n-            \'author_name\',\n-            \'cmf_uid\',\n-            \'commentators\',\n-            \'created\',\n-            \'effective\',\n-            \'expires\',\n-            \'getIcon\',\n-            \'getMimeIcon\',\n-            \'getId\',\n-            \'getRemoteUrl\',\n-            \'in_response_to\',\n-            \'listCreators\',\n-            \'meta_type\',\n-            \'modified\',\n-            \'portal_type\',\n-            \'sync_uid\'\n+            "Date",\n+            "Title",\n+            "author_name",\n+            "cmf_uid",\n+            "commentators",\n+            "created",\n+            "effective",\n+            "expires",\n+            "getIcon",\n+            "getMimeIcon",\n+            "getId",\n+            "getRemoteUrl",\n+            "in_response_to",\n+            "listCreators",\n+            "meta_type",\n+            "modified",\n+            "portal_type",\n+            "sync_uid",\n         ]\n         return ignored\n \n     def get_columns(self):\n         columns = {}\n-        voc = getUtility(IVocabularyFactory, \'plone.app.vocabularies.MetadataFields\')(self.context)\n+        voc = getUtility(IVocabularyFactory, "plone.app.vocabularies.MetadataFields")(\n+            self.context\n+        )\n         for term in voc:\n             if term.value not in self.ignored_columns:\n                 columns[term.value] = translate(term.title, context=self.request)\n@@ -185,8 +179,7 @@ def get_columns(self):\n \n     def get_thumb_scale(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         if settings.no_thumbs_tables:\n             # thumbs to be supressed\n             return None\n@@ -195,56 +188,55 @@ def get_thumb_scale(self):\n \n     def default_page_types(self):\n         registry = getUtility(IRegistry)\n-        return registry.get(\'plone.default_page_types\', [])\n+        return registry.get("plone.default_page_types", [])\n \n     @property\n     def ignored_indexes(self):\n         ignored = [\n-            \'Date\',\n-            \'Description\',\n-            \'Title\',\n-            \'allowedRolesAndUsers\',\n-            \'author_name\',\n-            \'cmf_uid\',\n-            \'commentators\',\n-            \'effectiveRange\',\n-            \'getId\',\n-            \'getObjectPositionInParent\',\n-            \'getRawRelatedItems\',\n-            \'in_reply_to\',\n-            \'meta_type\',\n-            \'object_provides\',\n-            \'portal_type\',\n-            \'SearchableText\',\n-            \'sync_uid\'\n+            "Date",\n+            "Description",\n+            "Title",\n+            "allowedRolesAndUsers",\n+            "author_name",\n+            "cmf_uid",\n+            "commentators",\n+            "effectiveRange",\n+            "getId",\n+            "getObjectPositionInParent",\n+            "getRawRelatedItems",\n+            "in_reply_to",\n+            "meta_type",\n+            "object_provides",\n+            "portal_type",\n+            "SearchableText",\n+            "sync_uid",\n         ]\n         return ignored\n \n     def get_indexes(self):\n         # Base set of indexes\n         indexes = {\n-            \'created\': translate(_(\'Created on\'), context=self.request),\n-            \'Creator\': translate(_(\'Creator\'), context=self.request),\n-            \'effective\': translate(_(\'Publication date\'), context=self.request),  # noqa\n-            \'end\': translate(_(\'End Date\'), context=self.request),\n-            \'expires\': translate(_(\'Expiration date\'), context=self.request),\n-            \'id\': translate(_(\'ID\'), context=self.request),\n-            \'is_folderish\': translate(_(\'Folder\'), context=self.request),\n-            \'modified\': translate(_(\'Last modified\'), context=self.request),  # noqa\n-            \'review_state\': translate(_(\'Review state\'), context=self.request),\n-            \'sortable_title\': translate(_(\'Title\'), context=self.request),\n-            \'start\': translate(_(\'Start Date\'), context=self.request),\n-            \'Subject\': translate(_(\'Tags\'), context=self.request),\n-            \'total_comments\': translate(_(\'Total comments\'), context=self.request),  # noqa\n-            \'Type\': translate(_(\'Type\'), context=self.request),\n+            "created": translate(_("Created on"), context=self.request),\n+            "Creator": translate(_("Creator"), context=self.request),\n+            "effective": translate(_("Publication date"), context=self.request),  # noqa\n+            "end": translate(_("End Date"), context=self.request),\n+            "expires": translate(_("Expiration date"), context=self.request),\n+            "id": translate(_("ID"), context=self.request),\n+            "is_folderish": translate(_("Folder"), context=self.request),\n+            "modified": translate(_("Last modified"), context=self.request),  # noqa\n+            "review_state": translate(_("Review state"), context=self.request),\n+            "sortable_title": translate(_("Title"), context=self.request),\n+            "start": translate(_("Start Date"), context=self.request),\n+            "Subject": translate(_("Tags"), context=self.request),\n+            "total_comments": translate(\n+                _("Total comments"), context=self.request\n+            ),  # noqa\n+            "Type": translate(_("Type"), context=self.request),\n         }\n         # Filter out ignored\n-        indexes = {\n-            k: v for k, v in indexes.items()\n-            if k not in self.ignored_indexes\n-        }\n+        indexes = {k: v for k, v in indexes.items() if k not in self.ignored_indexes}\n         # Add in extra metadata indexes\n-        catalog = getToolByName(self.context, \'portal_catalog\')\n+        catalog = getToolByName(self.context, "portal_catalog")\n         cat_indexes = [idx for idx in catalog.indexes()]\n         for index in cat_indexes:\n             if index not in indexes and index not in self.ignored_indexes:\n@@ -254,38 +246,42 @@ def get_indexes(self):\n     def get_options(self):\n         site = get_top_site_from_url(self.context, self.request)\n         base_url = site.absolute_url()\n-        base_vocabulary = \'%s/@@getVocabulary?name=\' % base_url\n+        base_vocabulary = "%s/@@getVocabulary?name=" % base_url\n         site_path = site.getPhysicalPath()\n         context_path = self.context.getPhysicalPath()\n         columns = self.get_columns()\n         options = {\n-            \'vocabularyUrl\': \'%splone.app.vocabularies.Catalog\' % (\n-                base_vocabulary),\n-            \'urlStructure\': {\n-                \'base\': base_url,\n-                \'appended\': \'/folder_contents\'\n-            },\n-            \'moveUrl\': \'%s{path}/fc-itemOrder\' % base_url,\n-            \'indexOptionsUrl\': \'%s/@@qsOptions\' % base_url,\n-            \'contextInfoUrl\': \'%s{path}/@@fc-contextInfo\' % base_url,\n-            \'setDefaultPageUrl\': \'%s{path}/@@fc-setDefaultPage\' % base_url,\n-            \'defaultPageTypes\': self.default_page_types(),\n-            \'searchParam\': \'Title\',\n-            \'availableColumns\': columns,\n-            \'attributes\': [\'Title\', \'path\', \'getURL\', \'getIcon\', \'getMimeIcon\', \'portal_type\'] + list(columns.keys()),  # noqa\n-            \'buttons\': self.get_actions(),\n-            \'rearrange\': {\n-                \'properties\': self.get_indexes(),\n-                \'url\': \'%s{path}/@@fc-rearrange\' % base_url\n+            "vocabularyUrl": "%splone.app.vocabularies.Catalog" % (base_vocabulary),\n+            "urlStructure": {"base": base_url, "appended": "/folder_contents"},\n+            "moveUrl": "%s{path}/fc-itemOrder" % base_url,\n+            "indexOptionsUrl": "%s/@@qsOptions" % base_url,\n+            "contextInfoUrl": "%s{path}/@@fc-contextInfo" % base_url,\n+            "setDefaultPageUrl": "%s{path}/@@fc-setDefaultPage" % base_url,\n+            "defaultPageTypes": self.default_page_types(),\n+            "searchParam": "Title",\n+            "availableColumns": columns,\n+            "attributes": [\n+                "Title",\n+                "path",\n+                "getURL",\n+                "getIcon",\n+                "getMimeIcon",\n+                "portal_type",\n+            ]\n+            + list(columns.keys()),  # noqa\n+            "buttons": self.get_actions(),\n+            "rearrange": {\n+                "properties": self.get_indexes(),\n+                "url": "%s{path}/@@fc-rearrange" % base_url,\n             },\n-            \'basePath\': \'/\' + \'/\'.join(context_path[len(site_path):]),\n-            \'upload\': {\n-                \'relativePath\': \'@@fileUpload\',\n-                \'baseUrl\': base_url,\n-                \'initialFolder\': IUUID(self.context, None),\n-                \'useTus\': TUS_ENABLED\n+            "basePath": "/" + "/".join(context_path[len(site_path) :]),\n+            "upload": {\n+                "relativePath": "@@fileUpload",\n+                "baseUrl": base_url,\n+                "initialFolder": IUUID(self.context, None),\n+                "useTus": TUS_ENABLED,\n             },\n-            \'thumb_scale\': self.get_thumb_scale(),\n+            "thumb_scale": self.get_thumb_scale(),\n         }\n         return options\n \n@@ -297,57 +293,65 @@ def __call__(self):\n class ContextInfo(BrowserView):\n \n     attributes = [\n-        \'CreationDate\',\n-        \'Creator\',\n-        \'Description\',\n-        \'EffectiveDate\',\n-        \'end\',\n-        \'exclude_from_nav\',\n-        \'getObjSize\',\n-        \'getURL\',\n-        \'id\',\n-        \'is_folderish\',\n-        \'last_comment_date\',\n-        \'location\',\n-        \'ModificationDate\',\n-        \'path\',\n-        \'portal_type\',\n-        \'review_state\',\n-        \'start\',\n-        \'Subject\',\n-        \'Title\',\n-        \'total_comments\',\n-        \'Type\',\n-        \'UID\',\n+        "CreationDate",\n+        "Creator",\n+        "Description",\n+        "EffectiveDate",\n+        "end",\n+        "exclude_from_nav",\n+        "getObjSize",\n+        "getURL",\n+        "id",\n+        "is_folderish",\n+        "last_comment_date",\n+        "location",\n+        "ModificationDate",\n+        "path",\n+        "portal_type",\n+        "review_state",\n+        "start",\n+        "Subject",\n+        "Title",\n+        "total_comments",\n+        "Type",\n+        "UID",\n     ]\n \n     def __call__(self):\n         factories_menu = getUtility(\n-            IBrowserMenu, name=\'plone_contentmenu_factory\',\n-            context=self.context).getMenuItems(self.context, self.request)\n+            IBrowserMenu, name="plone_contentmenu_factory", context=self.context\n+        ).getMenuItems(self.context, self.request)\n         factories = []\n         for item in factories_menu:\n-            if item.get(\'title\') == \'folder_add_settings\':\n+            if item.get("title") == "folder_add_settings":\n                 continue\n-            title = item.get(\'title\', \'\')\n-            factories.append({\n-                \'id\': item.get(\'id\'),\n-                \'title\': title and translate(title, context=self.request) or \'\',  # noqa\n-                \'action\': item.get(\'action\')\n-                })\n+            title = item.get("title", "")\n+            factories.append(\n+                {\n+                    "id": item.get("id"),\n+                    "title": title\n+                    and translate(title, context=self.request)\n+                    or "",  # noqa\n+                    "action": item.get("action"),\n+                }\n+            )\n \n         context = aq_inner(self.context)\n         transform = SafeHTML()\n         crumbs = []\n         top_site = get_top_site_from_url(self.context, self.request)\n         while not context == top_site:\n-            crumbs.append({\n-                \'id\': context.getId(),\n-                \'title\': transform.scrub_html(utils.pretty_title_or_id(context, context))\n-            })\n+            crumbs.append(\n+                {\n+                    "id": context.getId(),\n+                    "title": transform.scrub_html(\n+                        utils.pretty_title_or_id(context, context)\n+                    ),\n+                }\n+            )\n             context = utils.parent(context)\n \n-        catalog = getToolByName(self.context, \'portal_catalog\')\n+        catalog = getToolByName(self.context, "portal_catalog")\n         try:\n             brains = catalog(UID=IUUID(self.context), show_inactive=True)\n         except TypeError:\n@@ -356,27 +360,29 @@ def __call__(self):\n         if len(brains) > 0:\n             obj = brains[0]\n             # context here should be site root\n-            base_path = \'/\'.join(context.getPhysicalPath())\n+            base_path = "/".join(context.getPhysicalPath())\n             item = {}\n             for attr in self.attributes:\n                 key = attr\n-                if key == \'path\':\n-                    attr = \'getPath\'\n+                if key == "path":\n+                    attr = "getPath"\n                 val = getattr(obj, attr, None)\n                 if callable(val):\n                     val = val()\n-                if key == \'path\':\n-                    val = val[len(base_path):]\n+                if key == "path":\n+                    val = val[len(base_path) :]\n                 if isinstance(val, (bytes, str)):\n                     val = transform.scrub_html(val)\n                 item[key] = val\n \n         self.request.response.setHeader(\n-            \'Content-Type\', \'application/json; charset=utf-8\'\n+            "Content-Type", "application/json; charset=utf-8"\n+        )\n+        return json_dumps(\n+            {\n+                "addButtons": factories,\n+                "defaultPage": self.context.getDefaultPage(),\n+                "breadcrumbs": [c for c in reversed(crumbs)],\n+                "object": item,\n+            }\n         )\n-        return json_dumps({\n-            \'addButtons\': factories,\n-            \'defaultPage\': self.context.getDefaultPage(),\n-            \'breadcrumbs\': [c for c in reversed(crumbs)],\n-            \'object\': item\n-        })\ndiff --git a/plone/app/content/browser/contents/copy.py b/plone/app/content/browser/contents/copy.py\nindex 3c5a3b9..d1684c8 100644\n--- a/plone/app/content/browser/contents/copy.py\n+++ b/plone/app/content/browser/contents/copy.py\n@@ -1,12 +1,12 @@\n-from OFS.CopySupport import _cb_encode\n-from OFS.CopySupport import cookie_path\n+from OFS.CopySupport import _cb_encode, cookie_path\n from OFS.Moniker import Moniker\n-from plone.app.content.browser.contents import ContentsBaseAction\n-from plone.app.content.interfaces import IStructureAction\n from Products.CMFPlone import PloneMessageFactory as _\n from zope.i18n import translate\n from zope.interface import implementer\n \n+from plone.app.content.browser.contents import ContentsBaseAction\n+from plone.app.content.interfaces import IStructureAction\n+\n \n @implementer(IStructureAction)\n class CopyAction:\n@@ -19,16 +19,16 @@ def __init__(self, context, request):\n \n     def get_options(self):\n         return {\n-            \'tooltip\': translate(_(\'Copy\'), context=self.request),\n-            \'id\': \'copy\',\n-            \'icon\': \'duplicate\',\n-            \'url\': self.context.absolute_url() + \'/@@fc-copy\'\n+            "tooltip": translate(_("Copy"), context=self.request),\n+            "id": "copy",\n+            "icon": "duplicate",\n+            "url": self.context.absolute_url() + "/@@fc-copy",\n         }\n \n \n class CopyActionView(ContentsBaseAction):\n-    success_msg = _(\'Successfully copied items\')\n-    failure_msg = _(\'Failed to copy items\')\n+    success_msg = _("Successfully copied items")\n+    failure_msg = _("Failed to copy items")\n \n     def action(self, obj):\n         self.oblist.append(obj)\n@@ -37,16 +37,20 @@ def finish(self):\n         oblist = []\n         for ob in self.oblist:\n             if not ob.cb_isCopyable():\n-                self.errors.append(_(\'${title} cannot be copied.\',\n-                                     mapping={\'title\': self.objectTitle(ob)}))\n+                self.errors.append(\n+                    _(\n+                        "${title} cannot be copied.",\n+                        mapping={"title": self.objectTitle(ob)},\n+                    )\n+                )\n                 continue\n             m = Moniker(ob)\n             oblist.append(m.dump())\n         cp = (0, oblist)\n         cp = _cb_encode(cp)\n         resp = self.request.response\n-        resp.setCookie(\'__cp\', cp, path=\'%s\' % cookie_path(self.request))\n-        self.request[\'__cp\'] = cp\n+        resp.setCookie("__cp", cp, path="%s" % cookie_path(self.request))\n+        self.request["__cp"] = cp\n \n     def __call__(self):\n         self.oblist = []\ndiff --git a/plone/app/content/browser/contents/cut.py b/plone/app/content/browser/contents/cut.py\nindex da3ad7c..2a260fe 100644\n--- a/plone/app/content/browser/contents/cut.py\n+++ b/plone/app/content/browser/contents/cut.py\n@@ -1,12 +1,12 @@\n-from OFS.CopySupport import _cb_encode\n-from OFS.CopySupport import cookie_path\n+from OFS.CopySupport import _cb_encode, cookie_path\n from OFS.Moniker import Moniker\n-from plone.app.content.browser.contents import ContentsBaseAction\n-from plone.app.content.interfaces import IStructureAction\n from Products.CMFPlone import PloneMessageFactory as _\n from zope.i18n import translate\n from zope.interface import implementer\n \n+from plone.app.content.browser.contents import ContentsBaseAction\n+from plone.app.content.interfaces import IStructureAction\n+\n \n @implementer(IStructureAction)\n class CutAction:\n@@ -19,16 +19,16 @@ def __init__(self, context, request):\n \n     def get_options(self):\n         return {\n-            \'tooltip\': translate(_(\'Cut\'), context=self.request),\n-            \'id\': \'cut\',\n-            \'icon\': \'scissors\',\n-            \'url\': self.context.absolute_url() + \'/@@fc-cut\'\n+            "tooltip": translate(_("Cut"), context=self.request),\n+            "id": "cut",\n+            "icon": "scissors",\n+            "url": self.context.absolute_url() + "/@@fc-cut",\n         }\n \n \n class CutActionView(ContentsBaseAction):\n-    success_msg = _(\'Successfully cut items\')\n-    failure_msg = _(\'Failed to cut items\')\n+    success_msg = _("Successfully cut items")\n+    failure_msg = _("Failed to cut items")\n \n     def action(self, obj):\n         self.oblist.append(obj)\n@@ -37,20 +37,28 @@ def finish(self):\n         oblist = []\n         for ob in self.oblist:\n             if ob.wl_isLocked():\n-                self.errors.append(_(\'${title} is being edited and cannot be cut.\',\n-                                     mapping={\'title\': self.objectTitle(ob)}))\n+                self.errors.append(\n+                    _(\n+                        "${title} is being edited and cannot be cut.",\n+                        mapping={"title": self.objectTitle(ob)},\n+                    )\n+                )\n                 continue\n             if not ob.cb_isMoveable():\n-                self.errors.append(_(\'${title} is being edited and cannot be cut.\',\n-                                     mapping={\'title\': self.objectTitle(ob)}))\n+                self.errors.append(\n+                    _(\n+                        "${title} is being edited and cannot be cut.",\n+                        mapping={"title": self.objectTitle(ob)},\n+                    )\n+                )\n                 continue\n             m = Moniker(ob)\n             oblist.append(m.dump())\n         cp = (1, oblist)\n         cp = _cb_encode(cp)\n         resp = self.request.response\n-        resp.setCookie(\'__cp\', cp, path=\'%s\' % cookie_path(self.request))\n-        self.request[\'__cp\'] = cp\n+        resp.setCookie("__cp", cp, path="%s" % cookie_path(self.request))\n+        self.request["__cp"] = cp\n \n     def __call__(self):\n         self.oblist = []\ndiff --git a/plone/app/content/browser/contents/defaultpage.py b/plone/app/content/browser/contents/defaultpage.py\nindex 93828fb..9b4b8ec 100644\n--- a/plone/app/content/browser/contents/defaultpage.py\n+++ b/plone/app/content/browser/contents/defaultpage.py\n@@ -1,20 +1,23 @@\n-from plone.app.content.browser.contents import ContentsBaseAction\n from Products.CMFPlone import PloneMessageFactory as _\n \n+from plone.app.content.browser.contents import ContentsBaseAction\n+\n \n class SetDefaultPageActionView(ContentsBaseAction):\n-    success_msg = _(\'Default page set successfully\')\n-    failure_msg = _(\'Failed to set default page\')\n+    success_msg = _("Default page set successfully")\n+    failure_msg = _("Failed to set default page")\n \n     def __call__(self):\n-        cid = self.request.form.get(\'id\')\n+        cid = self.request.form.get("id")\n         self.errors = []\n \n         if cid not in self.context.objectIds():\n             self.errors.append(\n-                _(\'There is no object with short name \'\n-                  \'${name} in this folder.\',\n-                  mapping={\'name\': cid}))\n+                _(\n+                    "There is no object with short name " "${name} in this folder.",\n+                    mapping={"name": cid},\n+                )\n+            )\n         else:\n             self.context.setDefaultPage(cid)\n         return self.message()\ndiff --git a/plone/app/content/browser/contents/delete.py b/plone/app/content/browser/contents/delete.py\nindex 14a65bf..2fa4cfd 100644\n--- a/plone/app/content/browser/contents/delete.py\n+++ b/plone/app/content/browser/contents/delete.py\n@@ -1,7 +1,7 @@\n+import json\n+\n from AccessControl import Unauthorized\n from AccessControl.Permissions import delete_objects\n-from plone.app.content.browser.contents import ContentsBaseAction\n-from plone.app.content.interfaces import IStructureAction\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n@@ -10,13 +10,14 @@\n from zope.i18n import translate\n from zope.interface import implementer\n \n-import json\n+from plone.app.content.browser.contents import ContentsBaseAction\n+from plone.app.content.interfaces import IStructureAction\n \n \n @implementer(IStructureAction)\n class DeleteAction:\n \n-    template = ViewPageTemplateFile(\'templates/delete.pt\')\n+    template = ViewPageTemplateFile("templates/delete.pt")\n     order = 4\n \n     def __init__(self, context, request):\n@@ -25,41 +26,40 @@ def __init__(self, context, request):\n \n     def get_options(self):\n         return {\n-            \'tooltip\': translate(_(\'Delete\'), context=self.request),\n-            \'id\': \'delete\',\n-            \'icon\': \'trash\',\n-            \'context\': \'danger\',\n-            \'url\': self.context.absolute_url() + \'/@@fc-delete\',\n-            \'form\': {\n-                \'title\': translate(_(\'Delete selected items\'), context=self.request),\n-                \'submitText\': translate(_(\'Yes\'), context=self.request),\n-                \'submitContext\': \'danger\',\n-                \'template\': self.template(),\n-                \'closeText\': translate(_(\'No\'), context=self.request),\n-                \'dataUrl\': self.context.absolute_url() + \'/@@fc-delete\'\n-            }\n+            "tooltip": translate(_("Delete"), context=self.request),\n+            "id": "delete",\n+            "icon": "trash",\n+            "context": "danger",\n+            "url": self.context.absolute_url() + "/@@fc-delete",\n+            "form": {\n+                "title": translate(_("Delete selected items"), context=self.request),\n+                "submitText": translate(_("Yes"), context=self.request),\n+                "submitContext": "danger",\n+                "template": self.template(),\n+                "closeText": translate(_("No"), context=self.request),\n+                "dataUrl": self.context.absolute_url() + "/@@fc-delete",\n+            },\n         }\n \n \n class DeleteActionView(ContentsBaseAction):\n     required_obj_permission = delete_objects\n-    success_msg = _(\'Successfully delete items\')\n-    failure_msg = _(\'Failed to delete items\')\n+    success_msg = _("Successfully delete items")\n+    failure_msg = _("Failed to delete items")\n \n     def __call__(self):\n-        if self.request.form.get(\'render\') == \'yes\':\n-            confirm_view = getMultiAdapter((getSite(), self.request),\n-                                           name=\'delete_confirmation_info\')\n+        if self.request.form.get("render") == "yes":\n+            confirm_view = getMultiAdapter(\n+                (getSite(), self.request), name="delete_confirmation_info"\n+            )\n             selection = self.get_selection()\n-            catalog = getToolByName(self.context, \'portal_catalog\')\n+            catalog = getToolByName(self.context, "portal_catalog")\n             brains = catalog(UID=selection, show_inactive=True)\n             items = [i.getObject() for i in brains]\n             self.request.response.setHeader(\n-                \'Content-Type\', \'application/json; charset=utf-8\'\n+                "Content-Type", "application/json; charset=utf-8"\n             )\n-            return json.dumps({\n-                \'html\': confirm_view(items)\n-            })\n+            return json.dumps({"html": confirm_view(items)})\n         else:\n             return super().__call__()\n \n@@ -68,18 +68,22 @@ def action(self, obj):\n         title = self.objectTitle(obj)\n \n         try:\n-            lock_info = obj.restrictedTraverse(\'@@plone_lock_info\')\n+            lock_info = obj.restrictedTraverse("@@plone_lock_info")\n         except AttributeError:\n             lock_info = None\n \n         if lock_info is not None and lock_info.is_locked():\n-            self.errors.append(_(\'${title} is locked and cannot be deleted.\',\n-                                 mapping={\'title\': title}))\n+            self.errors.append(\n+                _("${title} is locked and cannot be deleted.", mapping={"title": title})\n+            )\n             return\n         else:\n             try:\n                 parent.manage_delObjects(obj.getId())\n             except Unauthorized:\n                 self.errors.append(\n-                    _(\'You are not authorized to delete ${title}.\',\n-                        mapping={\'title\': self.objectTitle(self.dest)}))\n+                    _(\n+                        "You are not authorized to delete ${title}.",\n+                        mapping={"title": self.objectTitle(self.dest)},\n+                    )\n+                )\ndiff --git a/plone/app/content/browser/contents/paste.py b/plone/app/content/browser/contents/paste.py\nindex f5f9d90..01e58a5 100644\n--- a/plone/app/content/browser/contents/paste.py\n+++ b/plone/app/content/browser/contents/paste.py\n@@ -1,11 +1,12 @@\n from AccessControl import Unauthorized\n-from plone.app.content.browser.contents import ContentsBaseAction\n-from plone.app.content.interfaces import IStructureAction\n from Products.CMFPlone import PloneMessageFactory as _\n from ZODB.POSException import ConflictError\n from zope.i18n import translate\n from zope.interface import implementer\n \n+from plone.app.content.browser.contents import ContentsBaseAction\n+from plone.app.content.interfaces import IStructureAction\n+\n \n @implementer(IStructureAction)\n class PasteAction:\n@@ -18,28 +19,28 @@ def __init__(self, context, request):\n \n     def get_options(self):\n         return {\n-            \'tooltip\': translate(_(\'Paste\'), context=self.request),\n-            \'id\': \'paste\',\n-            \'icon\': \'open-file\',\n-            \'url\': self.context.absolute_url() + \'/@@fc-paste\'\n+            "tooltip": translate(_("Paste"), context=self.request),\n+            "id": "paste",\n+            "icon": "open-file",\n+            "url": self.context.absolute_url() + "/@@fc-paste",\n         }\n \n \n class PasteActionView(ContentsBaseAction):\n-    required_obj_permission = \'Copy or Move\'\n-    success_msg = _(\'Successfully pasted items\')\n-    failure_msg = _(\'Failed to paste items\')\n+    required_obj_permission = "Copy or Move"\n+    success_msg = _("Successfully pasted items")\n+    failure_msg = _("Failed to paste items")\n \n     def __call__(self):\n         self.protect()\n         self.errors = []\n \n-        parts = str(self.request.form[\'folder\'].lstrip(\'/\')).split(\'/\')\n-        parent = self.site.unrestrictedTraverse(\'/\'.join(parts[:-1]))\n+        parts = str(self.request.form["folder"].lstrip("/")).split("/")\n+        parent = self.site.unrestrictedTraverse("/".join(parts[:-1]))\n         self.dest = parent.restrictedTraverse(parts[-1])\n \n         try:\n-            self.dest.manage_pasteObjects(self.request[\'__cp\'])\n+            self.dest.manage_pasteObjects(self.request["__cp"])\n         except ConflictError:\n             raise\n         except Unauthorized:\n@@ -47,14 +48,20 @@ def __call__(self):\n             # "You are not allowed to access \'manage_pasteObjects\' in this\n             # context"\n             self.errors.append(\n-                _(\'You are not authorized to paste ${title} here.\',\n-                    mapping={\'title\': self.objectTitle(self.dest)}))\n+                _(\n+                    "You are not authorized to paste ${title} here.",\n+                    mapping={"title": self.objectTitle(self.dest)},\n+                )\n+            )\n         except ValueError as e:\n-            if \'Disallowed subobject type: \' in e.args[0]:\n-                msg_parts = e.args[0].split(\':\')\n+            if "Disallowed subobject type: " in e.args[0]:\n+                msg_parts = e.args[0].split(":")\n                 self.errors.append(\n-                    _(\'Disallowed subobject type "${type}"\',\n-                        mapping={\'type\': msg_parts[1].strip()}))\n+                    _(\n+                        \'Disallowed subobject type "${type}"\',\n+                        mapping={"type": msg_parts[1].strip()},\n+                    )\n+                )\n             else:\n                 raise e\n \ndiff --git a/plone/app/content/browser/contents/properties.py b/plone/app/content/browser/contents/properties.py\nindex 9386948..c70b679 100644\n--- a/plone/app/content/browser/contents/properties.py\n+++ b/plone/app/content/browser/contents/properties.py\n@@ -1,6 +1,6 @@\n+import json\n+\n from DateTime import DateTime\n-from plone.app.content.browser.contents import ContentsBaseAction\n-from plone.app.content.interfaces import IStructureAction\n from plone.app.dexterity.behaviors.metadata import ICategorization\n from plone.app.widgets.utils import get_datetime_options\n from plone.dexterity.interfaces import IDexterityContent\n@@ -14,13 +14,14 @@\n from zope.interface import implementer\n from zope.schema.interfaces import IVocabularyFactory\n \n-import json\n+from plone.app.content.browser.contents import ContentsBaseAction\n+from plone.app.content.interfaces import IStructureAction\n \n \n @implementer(IStructureAction)\n class PropertiesAction:\n \n-    template = ViewPageTemplateFile(\'templates/properties.pt\')\n+    template = ViewPageTemplateFile("templates/properties.pt")\n     order = 8\n \n     def __init__(self, context, request):\n@@ -28,83 +29,85 @@ def __init__(self, context, request):\n         self.request = request\n \n     def get_options(self):\n-        base_vocabulary = \'%s/@@getVocabulary?name=\' % getSite().absolute_url()\n+        base_vocabulary = "%s/@@getVocabulary?name=" % getSite().absolute_url()\n         return {\n-            \'tooltip\': translate(_(\'Properties\'), context=self.request),\n-            \'id\': \'properties\',\n-            \'icon\': \'edit\',\n-            \'url\': self.context.absolute_url() + \'/@@fc-properties\',\n-            \'form\': {\n-                \'title\': translate(_(\'Modify properties on items\'), context=self.request),\n-                \'template\': self.template(\n-                    vocabulary_url=\'%splone.app.vocabularies.Users\' % (\n-                        base_vocabulary),\n-                    pattern_options=json.dumps(get_datetime_options(self.request))\n+            "tooltip": translate(_("Properties"), context=self.request),\n+            "id": "properties",\n+            "icon": "edit",\n+            "url": self.context.absolute_url() + "/@@fc-properties",\n+            "form": {\n+                "title": translate(\n+                    _("Modify properties on items"), context=self.request\n                 ),\n-                \'dataUrl\': self.context.absolute_url() + \'/@@fc-properties\',\n-            }\n+                "template": self.template(\n+                    vocabulary_url="%splone.app.vocabularies.Users" % (base_vocabulary),\n+                    pattern_options=json.dumps(get_datetime_options(self.request)),\n+                ),\n+                "dataUrl": self.context.absolute_url() + "/@@fc-properties",\n+            },\n         }\n \n+\n class PropertiesActionView(ContentsBaseAction):\n-    success_msg = _(\'Successfully updated metadata\')\n-    failure_msg = _(\'Failure updating metadata\')\n-    required_obj_permission = \'Modify portal content\'\n+    success_msg = _("Successfully updated metadata")\n+    failure_msg = _("Failure updating metadata")\n+    required_obj_permission = "Modify portal content"\n \n     def __call__(self):\n \n-        if self.request.form.get(\'render\') == \'yes\':\n+        if self.request.form.get("render") == "yes":\n             lang_factory = getUtility(\n-                IVocabularyFactory,\n-                \'plone.app.vocabularies.SupportedContentLanguages\'\n+                IVocabularyFactory, "plone.app.vocabularies.SupportedContentLanguages"\n             )\n             lang_vocabulary = lang_factory(self.context)\n             languages = [\n+                {"title": term.title, "value": term.value} for term in lang_vocabulary\n+            ]\n+            return self.json(\n                 {\n-                    \'title\': term.title,\n-                    \'value\': term.value\n+                    "languages": [\n+                        {\n+                            "title": translate(\n+                                _("label_no_change", default="No change"),\n+                                context=self.request,\n+                            ),\n+                            "value": "",\n+                        }\n+                    ]\n+                    + languages\n                 }\n-                for term in lang_vocabulary\n-            ]\n-            return self.json({\n-                \'languages\': [{\n-                    \'title\': translate(\n-                        _(\'label_no_change\', default=\'No change\'),\n-                        context=self.request,\n-                    ),\n-                    \'value\': \'\'\n-                }] + languages\n-            })\n-\n-        self.putils = getToolByName(self.context, \'plone_utils\')\n-        self.effectiveDate = self.request.form.get(\'effectiveDate\')\n-        self.expirationDate = self.request.form.get(\'expirationDate\')\n-        self.copyright = self.request.form.get(\'copyright\')\n-        self.contributors = self.request.form.get(\'contributors\')\n+            )\n+\n+        self.putils = getToolByName(self.context, "plone_utils")\n+        self.effectiveDate = self.request.form.get("effectiveDate")\n+        self.expirationDate = self.request.form.get("expirationDate")\n+        self.copyright = self.request.form.get("copyright")\n+        self.contributors = self.request.form.get("contributors")\n         if self.contributors:\n-            self.contributors = self.contributors.split(\',\')\n+            self.contributors = self.contributors.split(",")\n         else:\n             self.contributors = []\n-        self.creators = self.request.form.get(\'creators\', \'\')\n+        self.creators = self.request.form.get("creators", "")\n         if self.creators:\n-            self.creators = self.creators.split(\',\')\n-        self.exclude = self.request.form.get(\'exclude-from-nav\')\n-        self.language = self.request.form.get(\'language\')\n-        self.recurse = self.request.form.get(\'recurse\', \'no\') == \'yes\'\n+            self.creators = self.creators.split(",")\n+        self.exclude = self.request.form.get("exclude-from-nav")\n+        self.language = self.request.form.get("language")\n+        self.recurse = self.request.form.get("recurse", "no") == "yes"\n         return super().__call__()\n \n     def dx_action(self, obj):\n-        if self.effectiveDate and hasattr(obj, \'effective_date\'):\n+        if self.effectiveDate and hasattr(obj, "effective_date"):\n             obj.effective_date = DateTime(self.effectiveDate)\n-        if self.expirationDate and hasattr(obj, \'expiration_date\'):\n+        if self.expirationDate and hasattr(obj, "expiration_date"):\n             obj.expiration_date = DateTime(self.expirationDate)\n-        if self.copyright and hasattr(obj, \'rights\'):\n+        if self.copyright and hasattr(obj, "rights"):\n             obj.rights = self.copyright\n-        if self.contributors and hasattr(obj, \'contributors\'):\n+        if self.contributors and hasattr(obj, "contributors"):\n             obj.contributors = tuple(self.contributors)\n-        if self.creators and hasattr(obj, \'creators\'):\n+        if self.creators and hasattr(obj, "creators"):\n             obj.creators = tuple(self.creators)\n-        if self.exclude and hasattr(obj, \'exclude_from_nav\'):\n-            obj.exclude_from_nav = self.exclude == \'yes\'\n+        if self.exclude and hasattr(obj, "exclude_from_nav"):\n+            obj.exclude_from_nav = self.exclude == "yes"\n \n         behavior_categorization = ICategorization(obj)\n         if self.language and behavior_categorization:\n@@ -138,7 +141,7 @@ def at_action(self, obj):\n                 pass\n         if self.exclude:\n             try:\n-                obj.setExcludeFromNav(self.exclude == \'yes\')\n+                obj.setExcludeFromNav(self.exclude == "yes")\n             except AttributeError:\n                 pass\n         if self.language:\ndiff --git a/plone/app/content/browser/contents/rearrange.py b/plone/app/content/browser/contents/rearrange.py\nindex 453bbf6..7307b79 100644\n--- a/plone/app/content/browser/contents/rearrange.py\n+++ b/plone/app/content/browser/contents/rearrange.py\n@@ -1,14 +1,14 @@\n from OFS.interfaces import IOrderedContainer\n-from plone.app.content.browser.contents import ContentsBaseAction\n-from plone.app.content.utils import json_loads\n from plone.folder.interfaces import IExplicitOrdering\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n \n+from plone.app.content.browser.contents import ContentsBaseAction\n+from plone.app.content.utils import json_loads\n+\n \n class OrderContentsBaseAction(ContentsBaseAction):\n-\n     def getOrdering(self):\n         if IPloneSiteRoot.providedBy(self.context):\n             return self.context\n@@ -28,38 +28,36 @@ def getOrdering(self):\n \n \n class ItemOrderActionView(OrderContentsBaseAction):\n-    success_msg = _(\'Successfully moved item\')\n-    failure_msg = _(\'Error moving item\')\n+    success_msg = _("Successfully moved item")\n+    failure_msg = _("Error moving item")\n \n     def __call__(self):\n         self.errors = []\n         self.protect()\n-        id = self.request.form.get(\'id\')\n+        id = self.request.form.get("id")\n         ordering = self.getOrdering()\n \n         if ordering is None:\n-            self.errors.append(_(\'This folder does not support ordering\'))\n+            self.errors.append(_("This folder does not support ordering"))\n             return self.message()\n \n-        delta = self.request.form[\'delta\']\n+        delta = self.request.form["delta"]\n \n-        if delta == \'top\':\n+        if delta == "top":\n             ordering.moveObjectsToTop([id])\n             return self.message()\n \n-        if delta == \'bottom\':\n+        if delta == "bottom":\n             ordering.moveObjectsToBottom([id])\n             return self.message()\n \n         delta = int(delta)\n-        subset_ids = json_loads(self.request.form.get(\'subsetIds\', \'null\'))\n+        subset_ids = json_loads(self.request.form.get("subsetIds", "null"))\n         if subset_ids:\n-            position_id = [\n-                (ordering.getObjectPosition(i), i) for i in subset_ids\n-            ]\n+            position_id = [(ordering.getObjectPosition(i), i) for i in subset_ids]\n             position_id.sort()\n             if subset_ids != [i for position, i in position_id]:\n-                self.errors.append(_(\'Client/server ordering mismatch\'))\n+                self.errors.append(_("Client/server ordering mismatch"))\n                 return self.message()\n \n         ordering.moveObjectsByDelta([id], delta, subset_ids)\n@@ -67,28 +65,25 @@ def __call__(self):\n \n \n class RearrangeActionView(OrderContentsBaseAction):\n-    success_msg = _(\'Successfully rearranged folder\')\n-    failure_msg = _(\'Can not rearrange folder\')\n+    success_msg = _("Successfully rearranged folder")\n+    failure_msg = _("Can not rearrange folder")\n \n     def __call__(self):\n         self.protect()\n         self.errors = []\n         ordering = self.getOrdering()\n         if ordering:\n-            catalog = getToolByName(self.context, \'portal_catalog\')\n+            catalog = getToolByName(self.context, "portal_catalog")\n             query = {\n-                \'path\': {\n-                    \'query\': \'/\'.join(self.context.getPhysicalPath()),\n-                    \'depth\': 1\n-                },\n-                \'sort_on\': self.request.form.get(\'rearrange_on\'),\n-                \'show_inactive\': True\n+                "path": {"query": "/".join(self.context.getPhysicalPath()), "depth": 1},\n+                "sort_on": self.request.form.get("rearrange_on"),\n+                "show_inactive": True,\n             }\n             brains = catalog(**query)\n-            if self.request.form.get(\'reversed\') == \'true\':\n+            if self.request.form.get("reversed") == "true":\n                 brains = [b for b in reversed(brains)]\n             for idx, brain in enumerate(brains):\n                 ordering.moveObjectToPosition(brain.id, idx)\n         else:\n-            self.errors.append(_(\'Not explicit orderable\'))\n+            self.errors.append(_("Not explicit orderable"))\n         return self.message()\ndiff --git a/plone/app/content/browser/contents/rename.py b/plone/app/content/browser/contents/rename.py\nindex ecef86c..81266a4 100644\n--- a/plone/app/content/browser/contents/rename.py\n+++ b/plone/app/content/browser/contents/rename.py\n@@ -1,8 +1,8 @@\n+import logging\n+\n+import transaction\n from AccessControl import getSecurityManager\n-from Acquisition import aq_inner\n-from Acquisition import aq_parent\n-from plone.app.content.browser.contents import ContentsBaseAction\n-from plone.app.content.interfaces import IStructureAction\n+from Acquisition import aq_inner, aq_parent\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n@@ -14,18 +14,16 @@\n from zope.interface import implementer\n from zope.lifecycleevent import ObjectModifiedEvent\n \n+from plone.app.content.browser.contents import ContentsBaseAction\n+from plone.app.content.interfaces import IStructureAction\n \n-import logging\n-import transaction\n-\n-\n-logger = logging.getLogger(\'plone.app.content\')\n+logger = logging.getLogger("plone.app.content")\n \n \n @implementer(IStructureAction)\n class RenameAction:\n \n-    template = ViewPageTemplateFile(\'templates/rename.pt\')\n+    template = ViewPageTemplateFile("templates/rename.pt")\n     order = 5\n \n     def __init__(self, context, request):\n@@ -34,33 +32,31 @@ def __init__(self, context, request):\n \n     def get_options(self):\n         return {\n-            \'tooltip\': translate(_(\'Rename\'), context=self.request),\n-            \'id\': \'rename\',\n-            \'icon\': \'random\',\n-            \'url\': self.context.absolute_url() + \'/@@fc-rename\',\n-            \'form\': {\n-                \'template\': self.template()\n-            }\n+            "tooltip": translate(_("Rename"), context=self.request),\n+            "id": "rename",\n+            "icon": "random",\n+            "url": self.context.absolute_url() + "/@@fc-rename",\n+            "form": {"template": self.template()},\n         }\n \n \n class RenameActionView(ContentsBaseAction):\n-    success_msg = _(\'Items renamed\')\n-    failure_msg = _(\'Failed to rename all items\')\n+    success_msg = _("Items renamed")\n+    failure_msg = _("Failed to rename all items")\n \n     def __call__(self):\n         self.errors = []\n         self.protect()\n         context = aq_inner(self.context)\n \n-        catalog = getToolByName(context, \'portal_catalog\')\n-        mtool = getToolByName(context, \'portal_membership\')\n+        catalog = getToolByName(context, "portal_catalog")\n+        mtool = getToolByName(context, "portal_membership")\n \n         missing = []\n         for key in self.request.form.keys():\n-            if not key.startswith(\'UID_\'):\n+            if not key.startswith("UID_"):\n                 continue\n-            index = key.split(\'_\')[-1]\n+            index = key.split("_")[-1]\n             uid = self.request.form[key]\n             brains = catalog(UID=uid, show_inactive=True)\n             if len(brains) == 0:\n@@ -68,22 +64,22 @@ def __call__(self):\n                 continue\n             obj = brains[0].getObject()\n             title = self.objectTitle(obj)\n-            if not mtool.checkPermission(\'Copy or Move\', obj):\n-                self.errors.append(_(\'Permission denied to rename ${title}.\',\n-                              mapping={\'title\': title}))\n+            if not mtool.checkPermission("Copy or Move", obj):\n+                self.errors.append(\n+                    _("Permission denied to rename ${title}.", mapping={"title": title})\n+                )\n                 continue\n \n             sp = transaction.savepoint(optimistic=True)\n \n-            newid = self.request.form[\'newid_\' + index]\n-            newtitle = self.request.form[\'newtitle_\' + index]\n+            newid = self.request.form["newid_" + index]\n+            newtitle = self.request.form["newtitle_" + index]\n             try:\n                 obid = obj.getId()\n                 title = obj.Title()\n                 change_title = newtitle and title != newtitle\n                 if change_title:\n-                    getSecurityManager().validate(obj, obj, \'setTitle\',\n-                                                  obj.setTitle)\n+                    getSecurityManager().validate(obj, obj, "setTitle", obj.setTitle)\n                     obj.setTitle(newtitle)\n                     notify(ObjectModifiedEvent(obj))\n                 if newid and obid != newid:\n@@ -92,10 +88,11 @@ def __call__(self):\n                     newid = INameChooser(parent).chooseName(newid, obj)\n                     # Update the default_page on the parent.\n                     context_state = getMultiAdapter(\n-                        (obj, self.request), name=\'plone_context_state\')\n+                        (obj, self.request), name="plone_context_state"\n+                    )\n                     if context_state.is_default_page():\n                         parent.setDefaultPage(newid)\n-                    parent.manage_renameObjects((obid, ), (newid, ))\n+                    parent.manage_renameObjects((obid,), (newid,))\n                 elif change_title:\n                     # the rename will have already triggered a reindex\n                     obj.reindexObject()\n@@ -103,9 +100,13 @@ def __call__(self):\n                 raise\n             except Exception as e:\n                 sp.rollback()\n-                logger.error(\'Error renaming "{title}": "{exception}"\'\n-                    .format(title=title, exception=e))\n-                self.errors.append(_(\'Error renaming ${title}\', mapping={\n-                    \'title\': title}))\n+                logger.error(\n+                    \'Error renaming "{title}": "{exception}"\'.format(\n+                        title=title, exception=e\n+                    )\n+                )\n+                self.errors.append(\n+                    _("Error renaming ${title}", mapping={"title": title})\n+                )\n \n         return self.message(missing)\ndiff --git a/plone/app/content/browser/contents/tags.py b/plone/app/content/browser/contents/tags.py\nindex 82c6fbe..743bab3 100644\n--- a/plone/app/content/browser/contents/tags.py\n+++ b/plone/app/content/browser/contents/tags.py\n@@ -1,16 +1,17 @@\n-from plone.app.content.browser.contents import ContentsBaseAction\n-from plone.app.content.interfaces import IStructureAction\n from Products.CMFPlone import PloneMessageFactory as _\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope.component.hooks import getSite\n from zope.i18n import translate\n from zope.interface import implementer\n \n+from plone.app.content.browser.contents import ContentsBaseAction\n+from plone.app.content.interfaces import IStructureAction\n+\n \n @implementer(IStructureAction)\n class TagsAction:\n \n-    template = ViewPageTemplateFile(\'templates/tags.pt\')\n+    template = ViewPageTemplateFile("templates/tags.pt")\n     order = 6\n \n     def __init__(self, context, request):\n@@ -18,35 +19,35 @@ def __init__(self, context, request):\n         self.request = request\n \n     def get_options(self):\n-        base_vocabulary = \'%s/@@getVocabulary?name=\' % getSite().absolute_url()\n+        base_vocabulary = "%s/@@getVocabulary?name=" % getSite().absolute_url()\n         return {\n-            \'tooltip\': translate(_(\'Tags\'), context=self.request),\n-            \'id\': \'tags\',\n-            \'icon\': \'tags\',\n-            \'url\': self.context.absolute_url() + \'/@@fc-tags\',\n-            \'form\': {\n-                \'template\': self.template(\n-                    vocabulary_url=\'%splone.app.vocabularies.Keywords\' % (\n-                        base_vocabulary)\n+            "tooltip": translate(_("Tags"), context=self.request),\n+            "id": "tags",\n+            "icon": "tags",\n+            "url": self.context.absolute_url() + "/@@fc-tags",\n+            "form": {\n+                "template": self.template(\n+                    vocabulary_url="%splone.app.vocabularies.Keywords"\n+                    % (base_vocabulary)\n                 )\n-            }\n+            },\n         }\n \n \n class TagsActionView(ContentsBaseAction):\n-    required_obj_permission = \'Modify portal content\'\n-    success_msg = _(\'Successfully updated tags on items\')\n-    failure_msg = _(\'Failed to modify tags on items\')\n+    required_obj_permission = "Modify portal content"\n+    success_msg = _("Successfully updated tags on items")\n+    failure_msg = _("Failed to modify tags on items")\n \n     def action(self, obj):\n-        toadd = self.request.form.get(\'toadd\')\n+        toadd = self.request.form.get("toadd")\n         if toadd:\n-            toadd = set(toadd.split(\',\'))\n+            toadd = set(toadd.split(","))\n         else:\n             toadd = set()\n-        toremove = self.request.get(\'toremove\')\n+        toremove = self.request.get("toremove")\n         if toremove:\n-            toremove = set(toremove.split(\',\'))\n+            toremove = set(toremove.split(","))\n         else:\n             toremove = set()\n         tags = set(obj.Subject())\ndiff --git a/plone/app/content/browser/contents/workflow.py b/plone/app/content/browser/contents/workflow.py\nindex f426127..9b62492 100644\n--- a/plone/app/content/browser/contents/workflow.py\n+++ b/plone/app/content/browser/contents/workflow.py\n@@ -1,6 +1,4 @@\n from DateTime import DateTime\n-from plone.app.content.browser.contents import ContentsBaseAction\n-from plone.app.content.interfaces import IStructureAction\n from plone.dexterity.utils import safe_unicode\n from Products.CMFCore.interfaces._content import IFolderish\n from Products.CMFCore.utils import getToolByName\n@@ -10,11 +8,14 @@\n from zope.i18n import translate\n from zope.interface import implementer\n \n+from plone.app.content.browser.contents import ContentsBaseAction\n+from plone.app.content.interfaces import IStructureAction\n+\n \n @implementer(IStructureAction)\n class WorkflowAction:\n \n-    template = ViewPageTemplateFile(\'templates/workflow.pt\')\n+    template = ViewPageTemplateFile("templates/workflow.pt")\n     order = 7\n \n     def __init__(self, context, request):\n@@ -23,61 +24,63 @@ def __init__(self, context, request):\n \n     def get_options(self):\n         return {\n-            \'tooltip\': translate(_(\'State\'), context=self.request),\n-            \'id\': \'workflow\',\n-            \'icon\': \'lock\',\n-            \'url\': self.context.absolute_url() + \'/@@fc-workflow\',\n-            \'form\': {\n-                \'title\': translate(_(\'Change workflow of selected items\'), context=self.request),\n-                \'template\': self.template(),\n-                \'dataUrl\': self.context.absolute_url() + \'/@@fc-workflow\'\n-            }\n+            "tooltip": translate(_("State"), context=self.request),\n+            "id": "workflow",\n+            "icon": "lock",\n+            "url": self.context.absolute_url() + "/@@fc-workflow",\n+            "form": {\n+                "title": translate(\n+                    _("Change workflow of selected items"), context=self.request\n+                ),\n+                "template": self.template(),\n+                "dataUrl": self.context.absolute_url() + "/@@fc-workflow",\n+            },\n         }\n \n \n class WorkflowActionView(ContentsBaseAction):\n-    required_obj_permission = \'Modify portal content\'\n-    success_msg = _(\'Successfully modified items\')\n-    failure_msg = _(\'Failed to modify items\')\n+    required_obj_permission = "Modify portal content"\n+    success_msg = _("Successfully modified items")\n+    failure_msg = _("Failed to modify items")\n \n     def __call__(self):\n-        self.pworkflow = getToolByName(self.context, \'portal_workflow\')\n-        self.putils = getToolByName(self.context, \'plone_utils\')\n-        self.transition_id = self.request.form.get(\'transition\', None)\n-        self.comments = self.request.form.get(\'comments\', \'\')\n-        self.recurse = self.request.form.get(\'recurse\', \'no\') == \'yes\'\n-        if self.request.form.get(\'render\') == \'yes\':\n+        self.pworkflow = getToolByName(self.context, "portal_workflow")\n+        self.putils = getToolByName(self.context, "plone_utils")\n+        self.transition_id = self.request.form.get("transition", None)\n+        self.comments = self.request.form.get("comments", "")\n+        self.recurse = self.request.form.get("recurse", "no") == "yes"\n+        if self.request.form.get("render") == "yes":\n             # asking for render information\n             selection = self.get_selection()\n-            catalog = getToolByName(self.context, \'portal_catalog\')\n+            catalog = getToolByName(self.context, "portal_catalog")\n             brains = catalog(UID=selection, show_inactive=True)\n             transitions = []\n             for brain in brains:\n                 obj = brain.getObject()\n                 for transition in self.pworkflow.getTransitionsFor(obj):\n                     tdata = {\n-                        \'id\': transition[\'id\'],\n-                        \'title\': self.context.translate(\n-                            safe_unicode(transition[\'name\']))\n+                        "id": transition["id"],\n+                        "title": self.context.translate(\n+                            safe_unicode(transition["name"])\n+                        ),\n                     }\n                     if tdata not in transitions:\n                         transitions.append(tdata)\n-            return self.json({\n-                \'transitions\': transitions\n-            })\n+            return self.json({"transitions": transitions})\n         else:\n             return super().__call__()\n \n     def action(self, obj, bypass_recurse=False):\n         transitions = self.pworkflow.getTransitionsFor(obj)\n-        if self.transition_id in [t[\'id\'] for t in transitions]:\n+        if self.transition_id in [t["id"] for t in transitions]:\n             try:\n                 # set effective date if not already set\n-                if obj.EffectiveDate() == \'None\':\n+                if obj.EffectiveDate() == "None":\n                     obj.setEffectiveDate(DateTime())\n \n-                self.pworkflow.doActionFor(obj, self.transition_id,\n-                                           comment=self.comments)\n+                self.pworkflow.doActionFor(\n+                    obj, self.transition_id, comment=self.comments\n+                )\n                 if self.putils.isDefaultPage(obj):\n                     self.action(obj.aq_parent, bypass_recurse=True)\n                 recurse = self.recurse and not bypass_recurse\n@@ -89,5 +92,8 @@ def action(self, obj, bypass_recurse=False):\n                 raise\n             except Exception:\n                 self.errors.append(\n-                    _(\'Could not transition: ${title}\',\n-                      mapping={\'title\': self.objectTitle(obj)}))\n+                    _(\n+                        "Could not transition: ${title}",\n+                        mapping={"title": self.objectTitle(obj)},\n+                    )\n+                )\ndiff --git a/plone/app/content/browser/file.py b/plone/app/content/browser/file.py\nindex a7a7a8d..e384a31 100644\n--- a/plone/app/content/browser/file.py\n+++ b/plone/app/content/browser/file.py\n@@ -1,3 +1,8 @@\n+import json\n+import logging\n+import mimetypes\n+import os\n+\n from AccessControl import getSecurityManager\n from OFS.interfaces import IFolder\n from plone.app.dexterity.interfaces import IDXFileFactory\n@@ -6,17 +11,11 @@\n from Products.CMFPlone.permissions import AddPortalContent\n from Products.Five.browser import BrowserView\n \n-import json\n-import logging\n-import mimetypes\n-import os\n-\n-\n-logger = logging.getLogger(\'plone\')\n+logger = logging.getLogger("plone")\n \n \n def _bool(val):\n-    if val.lower() in (\'t\', \'true\', \'1\', \'on\'):\n+    if val.lower() in ("t", "true", "1", "on"):\n         return True\n     return False\n \n@@ -29,48 +28,54 @@ def _tus_int(val):\n \n \n possible_tus_options = {\n-    \'tmp_file_dir\': str,\n-    \'send_file\': _bool,\n-    \'upload_valid_duration\': _tus_int\n+    "tmp_file_dir": str,\n+    "send_file": _bool,\n+    "upload_valid_duration": _tus_int,\n }\n \n TUS_ENABLED = False\n-if os.environ.get(\'TUS_ENABLED\'):\n+if os.environ.get("TUS_ENABLED"):\n     # tus resumable upload standard, see http://tus.io\n     try:\n         from tus import Tus, Zope2RequestAdapter\n+\n         tus_settings = {}\n         for option, converter in possible_tus_options.items():\n-            name = \'TUS_%s\' % option.upper()\n+            name = "TUS_%s" % option.upper()\n             if name in os.environ:\n                 tus_settings[option] = converter(os.environ[name])\n \n-            tmp_file_dir = tus_settings.get(\'tmp_file_dir\')\n+            tmp_file_dir = tus_settings.get("tmp_file_dir")\n             if tmp_file_dir is None:\n-                logger.warn(\'You are trying to enable tus but no\'\n-                            \'TUS_TMP_FILE_DIR environment setting is set.\')\n-            elif not os.path.exists(tmp_file_dir) or \\\n-                    not os.path.isdir(tmp_file_dir):\n-                logger.warn(\'The TUS_TMP_FILE_DIR does not point to a valid \'\n-                            \'directory.\')\n+                logger.warn(\n+                    "You are trying to enable tus but no"\n+                    "TUS_TMP_FILE_DIR environment setting is set."\n+                )\n+            elif not os.path.exists(tmp_file_dir) or not os.path.isdir(tmp_file_dir):\n+                logger.warn(\n+                    "The TUS_TMP_FILE_DIR does not point to a valid " "directory."\n+                )\n             elif not os.access(tmp_file_dir, os.W_OK):\n-                logger.warn(\'The TUS_TMP_FILE_DIR is not writable\')\n+                logger.warn("The TUS_TMP_FILE_DIR is not writable")\n             else:\n                 TUS_ENABLED = True\n-                logger.info(\'tus file upload support is successfully \'\n-                            \'configured\')\n+                logger.info("tus file upload support is successfully " "configured")\n     except ImportError:\n-        logger.warn(\'TUS_ENABLED is set; however, tus python package is \'\n-                    \'not installed\')\n+        logger.warn(\n+            "TUS_ENABLED is set; however, tus python package is " "not installed"\n+        )\n else:\n     try:\n         import tus\n+\n         tus  # pyflakes\n     except ImportError:\n         pass\n     else:\n-        logger.warn(\'You have the tus python package installed but it is \'\n-                    \'not configured for this plone client\')\n+        logger.warn(\n+            "You have the tus python package installed but it is "\n+            "not configured for this plone client"\n+        )\n \n \n class FileUploadView(BrowserView):\n@@ -87,7 +92,7 @@ def __contains__(self, uid):\n     def __getitem__(self, uid):\n         if self.tus_uid is None:\n             self.tus_uid = uid\n-            self.__doc__ = \'foobar\'  # why is this necessary?\n+            self.__doc__ = "foobar"  # why is this necessary?\n             return self\n         else:\n             raise KeyError\n@@ -111,7 +116,7 @@ def __call__(self):\n                 if not tus.upload_finished:\n                     return\n                 else:\n-                    filename = req.getHeader(\'FILENAME\')\n+                    filename = req.getHeader("FILENAME")\n                     if tus.send_file:\n                         filedata = req._file\n                         filedata.filename = filename\n@@ -119,7 +124,7 @@ def __call__(self):\n                         filepath = req._file.read()\n                         filedata = open(filepath)\n         if not tusrequest:\n-            if req.REQUEST_METHOD != \'POST\':\n+            if req.REQUEST_METHOD != "POST":\n                 return\n             filedata = self.request.form.get("file", None)\n             if filedata is None:\n@@ -130,77 +135,72 @@ def __call__(self):\n         if not filedata:\n             return\n \n-        ctr = getToolByName(self.context, \'content_type_registry\')\n-        type_ = ctr.findTypeName(filename.lower(), content_type, \'\') or \'File\'\n+        ctr = getToolByName(self.context, "content_type_registry")\n+        type_ = ctr.findTypeName(filename.lower(), content_type, "") or "File"\n \n         # Now check that the object is not restricted to be added in the\n         # current context\n-        allowed_ids = [\n-            fti.getId() for fti in self.context.allowedContentTypes()\n-        ]\n+        allowed_ids = [fti.getId() for fti in self.context.allowedContentTypes()]\n         if type_ not in allowed_ids:\n             response = self.request.RESPONSE\n             response.setStatus(403)\n-            if type_ == \'File\':\n+            if type_ == "File":\n                 return "You cannot add a File to this folder, try another one"\n-            if type_ == \'Image\':\n-                return (\n-                    "You cannot add an Image to this folder, "\n-                    "try another one"\n-                )\n+            if type_ == "Image":\n+                return "You cannot add an Image to this folder, " "try another one"\n \n         factory = IDXFileFactory(self.context)\n         obj = factory(filename, content_type, filedata)\n \n-        result = {\n-            "type": \'\',\n-            "size": 0\n-        }\n+        result = {"type": "", "size": 0}\n \n-        if \'File\' in obj.portal_type:\n-            result[\'size\'] = obj.file.getSize()\n-            result[\'type\'] = obj.file.contentType\n-        elif \'Image\' in obj.portal_type:\n-            result[\'size\'] = obj.image.getSize()\n-            result[\'type\'] = obj.image.contentType\n+        if "File" in obj.portal_type:\n+            result["size"] = obj.file.getSize()\n+            result["type"] = obj.file.contentType\n+        elif "Image" in obj.portal_type:\n+            result["size"] = obj.image.getSize()\n+            result["type"] = obj.image.contentType\n \n         if tusrequest:\n             tus.cleanup_file()\n-        result.update({\n-            \'url\': obj.absolute_url(),\n-            \'name\': obj.getId(),\n-            \'UID\': IUUID(obj),\n-            \'filename\': filename\n-        })\n+        result.update(\n+            {\n+                "url": obj.absolute_url(),\n+                "name": obj.getId(),\n+                "UID": IUUID(obj),\n+                "filename": filename,\n+            }\n+        )\n \n         self.request.response.setHeader(\n-            \'Content-Type\', \'application/json; charset=utf-8\'\n+            "Content-Type", "application/json; charset=utf-8"\n         )\n         return json.dumps(result)\n \n \n class AllowUploadView(BrowserView):\n-\n     def __call__(self):\n         """Return JSON structure to indicate if File or Image uploads are\n         allowed in the current container.\n         """\n         self.request.response.setHeader(\n-            \'Content-Type\', \'application/json; charset=utf-8\'\n+            "Content-Type", "application/json; charset=utf-8"\n         )\n         context = self.context\n-        if self.request.form.get(\'path\'):\n-            context = context.restrictedTraverse(self.request.form.get(\'path\'))\n+        if self.request.form.get("path"):\n+            context = context.restrictedTraverse(self.request.form.get("path"))\n \n         allow_images = False\n         allow_files = False\n         if IFolder.providedBy(context):\n             allowed_types = [t.getId() for t in context.allowedContentTypes()]\n-            allow_images = \'Image\' in allowed_types\n-            allow_files = \'File\' in allowed_types\n-\n-        return json.dumps({\n-            \'allowUpload\': allow_images or allow_files,\n-            \'allowImages\': allow_images,\n-            \'allowFiles\': allow_files\n-        })\n+            allow_images = "Image" in allowed_types\n+            allow_files = "File" in allowed_types\n+\n+        return json.dumps(\n+            {\n+                "allowUpload": allow_images or allow_files,\n+                "allowImages": allow_images,\n+                "allowFiles": allow_files,\n+            }\n+        )\ndiff --git a/plone/app/content/browser/folder_publish.py b/plone/app/content/browser/folder_publish.py\nindex 5eba758..a9a8818 100644\n--- a/plone/app/content/browser/folder_publish.py\n+++ b/plone/app/content/browser/folder_publish.py\n@@ -1,5 +1,5 @@\n-from plone.protect import CheckAuthenticator\n-from plone.protect import PostOnly\n+import transaction\n+from plone.protect import CheckAuthenticator, PostOnly\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n from Products.CMFPlone.utils import transaction_note\n@@ -7,8 +7,6 @@\n from zope.component import getMultiAdapter\n from zope.publisher.browser import BrowserView\n \n-import transaction\n-\n \n class FolderPublishView(BrowserView):\n     """Publish objects from a folder.\n@@ -78,7 +76,9 @@ def transition_objects_by_paths(\n             try:\n                 obj = traverse(path, None)\n                 if obj is not None:\n-                    view = getMultiAdapter((obj, self.request), name="content_status_modify")\n+                    view = getMultiAdapter(\n+                        (obj, self.request), name="content_status_modify"\n+                    )\n                     view(\n                         workflow_action,\n                         comment,\n@@ -105,7 +105,9 @@ def transition_objects_by_paths(\n \n     def redirect(self):\n         target = self.request.get("orig_template", "")\n-        if target and not getToolByName(self.context, "portal_url").isURLInPortal(target):\n+        if target and not getToolByName(self.context, "portal_url").isURLInPortal(\n+            target\n+        ):\n             target = ""\n         if not target:\n             target = self.context.absolute_url()\ndiff --git a/plone/app/content/browser/folderfactories.py b/plone/app/content/browser/folderfactories.py\nindex 7cbfaa1..9b82fd8 100644\n--- a/plone/app/content/browser/folderfactories.py\n+++ b/plone/app/content/browser/folderfactories.py\n@@ -1,19 +1,19 @@\n-from Acquisition import aq_inner\n-from Acquisition import aq_parent\n-from Products.CMFCore.Expression import createExprContext\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n-from plone.app.content.browser.interfaces import IFolderContentsView\n+from urllib.parse import quote_plus\n+\n+from Acquisition import aq_inner, aq_parent\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n from plone.memoize.instance import memoize\n from plone.memoize.request import memoize_diy_request\n from plone.protect.authenticator import createToken\n-from urllib.parse import quote_plus\n-from zope.component import getMultiAdapter\n-from zope.component import queryUtility\n+from Products.CMFCore.Expression import createExprContext\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n+from zope.component import getMultiAdapter, queryUtility\n from zope.i18n import translate\n from zope.publisher.browser import BrowserView\n \n+from plone.app.content.browser.interfaces import IFolderContentsView\n+\n \n @memoize_diy_request(arg=0)\n def _allowedTypes(request, context):\n@@ -21,17 +21,16 @@ def _allowedTypes(request, context):\n \n \n class FolderFactoriesView(BrowserView):\n-    """The folder_factories view - show addable types\n-    """\n+    """The folder_factories view - show addable types"""\n \n     def __call__(self):\n-        if \'form.button.Add\' in self.request.form:\n-            urltool = getToolByName(self.context, \'portal_url\')\n-            url = self.request.form.get(\'url\')\n+        if "form.button.Add" in self.request.form:\n+            urltool = getToolByName(self.context, "portal_url")\n+            url = self.request.form.get("url")\n             if not urltool.isURLInPortal(url):\n                 url = self.context.absolute_url()\n             self.request.response.redirect(url)\n-            return \'\'\n+            return ""\n         else:\n             return self.index()\n \n@@ -42,8 +41,9 @@ def can_constrain_types(self):\n     @memoize\n     def add_context(self):\n         context = self.context\n-        context_state = getMultiAdapter((context, self.request),\n-                                        name=\'plone_context_state\')\n+        context_state = getMultiAdapter(\n+            (context, self.request), name="plone_context_state"\n+        )\n         context = aq_inner(context)\n         try:\n             published = self.request.PUBLISHED\n@@ -51,8 +51,7 @@ def add_context(self):\n             published = context\n         if context_state.is_structural_folder():\n             if context_state.is_default_page():\n-                is_folder_contents_view = \\\n-                    IFolderContentsView.providedBy(published)\n+                is_folder_contents_view = IFolderContentsView.providedBy(published)\n                 if is_folder_contents_view or self == published:\n                     # on the folder_contents view and factories view,\n                     # show the actual context object\'s addable types\n@@ -63,6 +62,7 @@ def add_context(self):\n                 return context\n         else:\n             return aq_parent(context)\n+\n     # NOTE: This is also used by plone.app.contentmenu.menu.FactoriesMenu.\n     # The return value is somewhat dictated by the menu infrastructure, so\n     # be careful if you change it\n@@ -80,8 +80,7 @@ def addable_types(self, include=None):\n         results = []\n \n         idnormalizer = queryUtility(IIDNormalizer)\n-        portal_state = getMultiAdapter((context, request),\n-                                       name=\'plone_portal_state\')\n+        portal_state = getMultiAdapter((context, request), name="plone_portal_state")\n \n         addContext = self.add_context()\n         baseUrl = addContext.absolute_url()\n@@ -89,7 +88,7 @@ def addable_types(self, include=None):\n \n         allowedTypes = _allowedTypes(request, addContext)\n \n-        types_tool = getToolByName(context, \'portal_types\')\n+        types_tool = getToolByName(context, "portal_types")\n \n         # Note: we don\'t check \'allowed\' or \'available\' here, because these are\n         # slow. We assume the \'allowedTypes\' list has already performed the\n@@ -98,48 +97,50 @@ def addable_types(self, include=None):\n             object=addContext,\n             check_permissions=False,\n             check_condition=False,\n-            category=\'folder/add\',\n+            category="folder/add",\n         )\n-        addActionsById = {a[\'id\']: a for a in actions}\n+        addActionsById = {a["id"]: a for a in actions}\n \n         expr_context = createExprContext(\n-            aq_parent(addContext), portal_state.portal(), addContext)\n+            aq_parent(addContext), portal_state.portal(), addContext\n+        )\n         for t in allowedTypes:\n             typeId = t.getId()\n             if include is None or typeId in include:\n                 cssId = idnormalizer.normalize(typeId)\n-                cssClass = \'contenttype-%s\' % cssId\n+                cssClass = "contenttype-%s" % cssId\n \n                 url = None\n                 addAction = addActionsById.get(typeId, None)\n                 if addAction is not None:\n-                    url = addAction[\'url\']\n+                    url = addAction["url"]\n \n                 if not url:\n-                    url = \'{}/createObject?type_name={}&_authenticator={}\'.format(\n-                        baseUrl, quote_plus(typeId), token)\n+                    url = "{}/createObject?type_name={}&_authenticator={}".format(\n+                        baseUrl, quote_plus(typeId), token\n+                    )\n \n                 icon = t.getIconExprObject()\n                 if icon:\n                     icon = icon(expr_context)\n \n-                results.append({\n-                    \'id\': typeId,\n-                    \'title\': t.Title(),\n-                    \'description\': t.Description(),\n-                    \'action\': url,\n-                    \'selected\': False,\n-                    \'icon\': icon,\n-                    \'extra\': {\n-                        \'id\': cssId,\n-                        \'separator\': None,\n-                        \'class\': cssClass},\n-                    \'submenu\': None,\n-                })\n+                results.append(\n+                    {\n+                        "id": typeId,\n+                        "title": t.Title(),\n+                        "description": t.Description(),\n+                        "action": url,\n+                        "selected": False,\n+                        "icon": icon,\n+                        "extra": {"id": cssId, "separator": None, "class": cssClass},\n+                        "submenu": None,\n+                    }\n+                )\n \n         # Sort the addable content types based on their translated title\n-        results = [(translate(ctype[\'title\'], context=request), ctype)\n-                   for ctype in results]\n+        results = [\n+            (translate(ctype["title"], context=request), ctype) for ctype in results\n+        ]\n         results.sort()\n         results = [ctype[-1] for ctype in results]\n \ndiff --git a/plone/app/content/browser/i18n.py b/plone/app/content/browser/i18n.py\nindex 3281429..03717cf 100644\n--- a/plone/app/content/browser/i18n.py\n+++ b/plone/app/content/browser/i18n.py\n@@ -1,23 +1,26 @@\n-from Products.Five.browser import BrowserView\n+import json\n+\n from plone.memoize import ram\n+from Products.Five.browser import BrowserView\n from zope.component import queryUtility\n from zope.i18n.interfaces import ITranslationDomain\n-import json\n \n \n def _cache_key(method, self, domain, language):\n-    return (domain, language,)\n+    return (\n+        domain,\n+        language,\n+    )\n \n \n class i18njs(BrowserView):\n-\n     @ram.cache(_cache_key)\n     def _gettext_catalog(self, domain, language):\n         td = queryUtility(ITranslationDomain, domain)\n         if td is None:\n             return\n         if language not in td._catalogs:\n-            baselanguage = language.split(\'-\')[0]\n+            baselanguage = language.split("-")[0]\n             if baselanguage not in td._catalogs:\n                 return\n             else:\n@@ -37,10 +40,10 @@ def __call__(self, domain=None, language=None):\n             catalog = {}\n         else:\n             if language is None:\n-                language = self.request[\'LANGUAGE\']\n+                language = self.request["LANGUAGE"]\n             catalog = self._gettext_catalog(domain, language)\n \n         response = self.request.response\n-        response.setHeader(\'Content-Type\', \'application/json; charset=utf-8\')\n+        response.setHeader("Content-Type", "application/json; charset=utf-8")\n         response.setBody(json.dumps(catalog))\n         return response\ndiff --git a/plone/app/content/browser/interfaces.py b/plone/app/content/browser/interfaces.py\nindex 42539f9..4cdfc35 100644\n--- a/plone/app/content/browser/interfaces.py\n+++ b/plone/app/content/browser/interfaces.py\n@@ -2,17 +2,13 @@\n \n \n class IFolderContentsView(Interface):\n-    """Interface, which provides methods for folder contens\n-    """\n+    """Interface, which provides methods for folder contens"""\n \n     def test(a, b, c):\n-        """A simple replacement of python\'s test.\n-        """\n+        """A simple replacement of python\'s test."""\n \n     def getAllowedTypes():\n-        """Returns allowed types for context.\n-        """\n+        """Returns allowed types for context."""\n \n     def title():\n-        """Returns the title for the template.\n-        """\n+        """Returns the title for the template."""\ndiff --git a/plone/app/content/browser/query.py b/plone/app/content/browser/query.py\nindex 117bf6a..144a4da 100644\n--- a/plone/app/content/browser/query.py\n+++ b/plone/app/content/browser/query.py\n@@ -1,16 +1,16 @@\n-from Products.Five import BrowserView\n+import json\n+\n from plone.app.querystring.interfaces import IQuerystringRegistryReader\n from plone.registry.interfaces import IRegistry\n+from Products.Five import BrowserView\n from zope.component import getUtility\n-import json\n \n \n class QueryStringIndexOptions(BrowserView):\n-\n     def __call__(self):\n         registry = getUtility(IRegistry)\n         config = IQuerystringRegistryReader(registry)()\n         self.request.response.setHeader(\n-            \'Content-Type\', \'application/json; charset=utf-8\'\n+            "Content-Type", "application/json; charset=utf-8"\n         )\n         return json.dumps(config)\ndiff --git a/plone/app/content/browser/reviewlist.py b/plone/app/content/browser/reviewlist.py\nindex 82a0947..d59d06d 100644\n--- a/plone/app/content/browser/reviewlist.py\n+++ b/plone/app/content/browser/reviewlist.py\n@@ -1,30 +1,27 @@\n+from urllib.parse import quote_plus\n+\n from Acquisition import aq_inner\n-from plone.app.content.browser.tableview import Table\n-from plone.app.content.browser.tableview import TableBrowserView\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import human_readable_size\n-from Products.CMFPlone.utils import isExpired\n-from Products.CMFPlone.utils import safe_unicode\n-from urllib.parse import quote_plus\n-from zope.component import getMultiAdapter\n-from zope.component import getUtility\n+from Products.CMFPlone.utils import human_readable_size, isExpired, safe_unicode\n+from zope.component import getMultiAdapter, getUtility\n from zope.i18n import translate\n from zope.publisher.browser import BrowserView\n \n+from plone.app.content.browser.tableview import Table, TableBrowserView\n \n-class FullReviewListView(BrowserView):\n \n+class FullReviewListView(BrowserView):\n     def revlist(self):\n-        portal_membership = getToolByName(self.context, \'portal_membership\')\n-        portal_workflow = getToolByName(self.context, \'portal_workflow\')\n+        portal_membership = getToolByName(self.context, "portal_membership")\n+        portal_workflow = getToolByName(self.context, "portal_workflow")\n         if portal_membership.isAnonymousUser():\n             return []\n \n         return portal_workflow.getWorklistsResults()\n \n     def url(self):\n-        return self.context.absolute_url() + \'/full_review_list\'\n+        return self.context.absolute_url() + "/full_review_list"\n \n     def review_table(self):\n         table = ReviewListTable(self.context, self.request)\n@@ -41,26 +38,23 @@ def __init__(self, context, request, **kwargs):\n         self.request = request\n \n         url = self.context.absolute_url()\n-        view_url = url + \'/full_review_list\'\n-        self.table = Table(request, url, view_url, self.items,\n-                           buttons=self.buttons)\n+        view_url = url + "/full_review_list"\n+        self.table = Table(request, url, view_url, self.items, buttons=self.buttons)\n \n     def render(self):\n         return self.table.render()\n \n     @property\n     def items(self):\n-        plone_utils = getToolByName(self.context, \'plone_utils\')\n-        portal_url = getToolByName(self.context, \'portal_url\')\n-        plone_view = getMultiAdapter((self.context, self.request),\n-                                     name=\'plone\')\n-        portal_workflow = getToolByName(self.context, \'portal_workflow\')\n-        portal_types = getToolByName(self.context, \'portal_types\')\n-        portal_membership = getToolByName(self.context, \'portal_membership\')\n+        plone_utils = getToolByName(self.context, "plone_utils")\n+        portal_url = getToolByName(self.context, "portal_url")\n+        plone_view = getMultiAdapter((self.context, self.request), name="plone")\n+        portal_workflow = getToolByName(self.context, "portal_workflow")\n+        portal_types = getToolByName(self.context, "portal_types")\n+        portal_membership = getToolByName(self.context, "portal_membership")\n \n         registry = getUtility(IRegistry)\n-        use_view_action = registry.get(\n-            \'plone.types_use_view_action_in_listings\', ())\n+        use_view_action = registry.get("plone.types_use_view_action_in_listings", ())\n \n         browser_default = plone_utils.browserDefault(self.context)\n \n@@ -77,66 +71,79 @@ def items(self):\n                 table_row_class = "odd"\n \n             url = obj.absolute_url()\n-            path = \'/\'.join(obj.getPhysicalPath())\n-            type_class = \'contenttype-\' + plone_utils.normalizeString(\n-                obj.portal_type)\n+            path = "/".join(obj.getPhysicalPath())\n+            type_class = "contenttype-" + plone_utils.normalizeString(obj.portal_type)\n \n-            review_state = portal_workflow.getInfoFor(obj, \'review_state\', \'\')\n+            review_state = portal_workflow.getInfoFor(obj, "review_state", "")\n \n-            state_class = \'state-\' + plone_utils.normalizeString(review_state)\n+            state_class = "state-" + plone_utils.normalizeString(review_state)\n             relative_url = portal_url.getRelativeContentURL(obj)\n \n             type_title_msgid = portal_types[obj.portal_type].Title()\n-            url_href_title = \'{}: {}\'.format(translate(type_title_msgid,\n-                                                    context=self.request),\n-                                          safe_unicode(obj.Description()))\n-            getMember = getToolByName(obj, \'portal_membership\').getMemberById\n+            url_href_title = "{}: {}".format(\n+                translate(type_title_msgid, context=self.request),\n+                safe_unicode(obj.Description()),\n+            )\n+            getMember = getToolByName(obj, "portal_membership").getMemberById\n             creator_id = obj.Creator()\n             creator = getMember(creator_id)\n             if creator:\n-                creator_name = creator.getProperty(\'fullname\', \'\') or creator_id\n+                creator_name = creator.getProperty("fullname", "") or creator_id\n             else:\n                 creator_name = creator_id\n-            modified = \'\'.join(map(safe_unicode, [\n-                creator_name, \' - \',\n-                plone_view.toLocalizedTime(obj.ModificationDate(),\n-                                           long_format=1)]))\n+            modified = "".join(\n+                map(\n+                    safe_unicode,\n+                    [\n+                        creator_name,\n+                        " - ",\n+                        plone_view.toLocalizedTime(\n+                            obj.ModificationDate(), long_format=1\n+                        ),\n+                    ],\n+                )\n+            )\n             is_structural_folder = obj.restrictedTraverse(\n-                \'@@plone\').isStructuralFolder()\n+                "@@plone"\n+            ).isStructuralFolder()\n \n             if obj.portal_type in use_view_action:\n-                view_url = url + \'/view\'\n+                view_url = url + "/view"\n             elif is_structural_folder:\n                 view_url = url + "/folder_contents"\n             else:\n                 view_url = url\n \n             is_browser_default = len(browser_default[1]) == 1 and (\n-                obj.id == browser_default[1][0])\n-\n-            results.append(dict(\n-                url=url,\n-                url_href_title=url_href_title,\n-                id=obj.getId(),\n-                quoted_id=quote_plus(obj.getId()),\n-                path=path,\n-                title_or_id=obj.pretty_title_or_id(),\n-                description=obj.Description(),\n-                obj_type=obj.Type,\n-                size=human_readable_size(obj.get_size()),\n-                modified=modified,\n-                type_class=type_class,\n-                wf_state=review_state,\n-                state_title=portal_workflow.getTitleForStateOnType(\n-                    review_state, obj.portal_type),\n-                state_class=state_class,\n-                is_browser_default=is_browser_default,\n-                folderish=is_structural_folder,\n-                relative_url=relative_url,\n-                view_url=view_url,\n-                table_row_class=table_row_class,\n-                is_expired=isExpired(obj)\n-            ))\n+                obj.id == browser_default[1][0]\n+            )\n+\n+            results.append(\n+                dict(\n+                    url=url,\n+                    url_href_title=url_href_title,\n+                    id=obj.getId(),\n+                    quoted_id=quote_plus(obj.getId()),\n+                    path=path,\n+                    title_or_id=obj.pretty_title_or_id(),\n+                    description=obj.Description(),\n+                    obj_type=obj.Type,\n+                    size=human_readable_size(obj.get_size()),\n+                    modified=modified,\n+                    type_class=type_class,\n+                    wf_state=review_state,\n+                    state_title=portal_workflow.getTitleForStateOnType(\n+                        review_state, obj.portal_type\n+                    ),\n+                    state_class=state_class,\n+                    is_browser_default=is_browser_default,\n+                    folderish=is_structural_folder,\n+                    relative_url=relative_url,\n+                    view_url=view_url,\n+                    table_row_class=table_row_class,\n+                    is_expired=isExpired(obj),\n+                )\n+            )\n         return results\n \n     @property\n@@ -145,31 +152,32 @@ def show_sort_column(self):\n \n     def buttons(self):\n         buttons = []\n-        portal_actions = getToolByName(self.context, \'portal_actions\')\n+        portal_actions = getToolByName(self.context, "portal_actions")\n         button_actions = portal_actions.listActionInfos(\n-            object=aq_inner(self.context), categories=(\'folder_buttons\', ))\n+            object=aq_inner(self.context), categories=("folder_buttons",)\n+        )\n \n         # Do not show buttons if there is no data, unless there is data to be\n         # pasted\n         if False:  # not len(self.batch):\n             if self.context.cb_dataValid():\n                 for button in button_actions:\n-                    if button[\'id\'] == \'paste\':\n+                    if button["id"] == "paste":\n                         return [self.setbuttonclass(button)]\n             else:\n                 return []\n \n         for button in button_actions:\n             # Make proper classes for our buttons\n-            if button[\'id\'] != \'paste\' or self.context.cb_dataValid():\n+            if button["id"] != "paste" or self.context.cb_dataValid():\n                 buttons.append(self.setbuttonclass(button))\n         return buttons\n \n     def setbuttonclass(self, button):\n-        if button[\'id\'] == \'paste\':\n-            button[\'cssclass\'] = \'btn btn-secondary\'\n+        if button["id"] == "paste":\n+            button["cssclass"] = "btn btn-secondary"\n         else:\n-            button[\'cssclass\'] = \'btn btn-primary\'\n+            button["cssclass"] = "btn btn-primary"\n         return button\n \n \ndiff --git a/plone/app/content/browser/selection.py b/plone/app/content/browser/selection.py\nindex 5d1dbe4..f25f1c9 100644\n--- a/plone/app/content/browser/selection.py\n+++ b/plone/app/content/browser/selection.py\n@@ -1,15 +1,13 @@\n from Acquisition import aq_inner\n-from zope.component import getUtility\n+from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n from Products.Five.browser import BrowserView\n from Products.statusmessages.interfaces import IStatusMessage\n-from plone.registry.interfaces import IRegistry\n-from zope.component import getMultiAdapter\n+from zope.component import getMultiAdapter, getUtility\n \n \n class DefaultViewSelectionView(BrowserView):\n-\n     def isValidTemplate(self, templateId):\n         return templateId in [a[0] for a in self.vocab]\n \n@@ -27,81 +25,78 @@ def selectedLayout(self):\n         if not self.context_state.is_default_page():\n             return self.context.getLayout()\n         else:\n-            return \'\'\n+            return ""\n \n     def selectViewTemplate(self):\n-        templateId = self.request.get(\'templateId\')\n+        templateId = self.request.get("templateId")\n \n         if self.isValidTemplate(templateId):\n             self.context.setLayout(templateId)\n \n-        self.request.response.redirect(self.context.absolute_url() + \'/view\')\n+        self.request.response.redirect(self.context.absolute_url() + "/view")\n \n     @property\n     def action_url(self):\n-        return \'{:s}/select_default_view\'.format(\n-            self.context_state.object_url())\n+        return "{:s}/select_default_view".format(self.context_state.object_url())\n \n     def __call__(self):\n \n         self.context_state = getMultiAdapter(\n-            (self.context, self.request), name=\'plone_context_state\')\n+            (self.context, self.request), name="plone_context_state"\n+        )\n \n-        templateId = self.request.form.get(\'templateId\', False)\n+        templateId = self.request.form.get("templateId", False)\n         if templateId:\n-            plone_utils = getToolByName(self.context, \'plone_utils\')\n+            plone_utils = getToolByName(self.context, "plone_utils")\n             # Make sure this is a valid template\n             if self.isValidTemplate(templateId):\n                 # Update the template\n                 self.context.setLayout(templateId)\n-                plone_utils.addPortalMessage(\'View changed.\')\n+                plone_utils.addPortalMessage("View changed.")\n             else:\n-                plone_utils.addPortalMessage(\'Invalid view.\', type="error")\n+                plone_utils.addPortalMessage("Invalid view.", type="error")\n                 return self.index()\n \n-        if templateId or self.request.form.get(\'form.buttons.Cancel\', False):\n+        if templateId or self.request.form.get("form.buttons.Cancel", False):\n             # Redirect to view\n-            self.request.response.redirect(\n-                \'%s/view\' % self.context_state.object_url())\n+            self.request.response.redirect("%s/view" % self.context_state.object_url())\n \n         return self.index()\n \n \n class DefaultPageSelectionView(BrowserView):\n-\n     def __call__(self):\n-        if \'form.buttons.Save\' in self.request.form:\n-            if \'objectId\' not in self.request.form:\n-                message = _(\'Please select an item to use.\')\n-                msgtype = \'error\'\n+        if "form.buttons.Save" in self.request.form:\n+            if "objectId" not in self.request.form:\n+                message = _("Please select an item to use.")\n+                msgtype = "error"\n             else:\n-                objectId = self.request.form[\'objectId\']\n+                objectId = self.request.form["objectId"]\n \n                 if objectId not in self.context.objectIds():\n-                    message = _(\'There is no object with short name ${name} \'\n-                                \'in this folder.\',\n-                                mapping={\'name\': objectId})\n-                    msgtype = \'error\'\n+                    message = _(\n+                        "There is no object with short name ${name} " "in this folder.",\n+                        mapping={"name": objectId},\n+                    )\n+                    msgtype = "error"\n                 else:\n                     self.context.setDefaultPage(objectId)\n-                    message = _(\'View changed.\')\n-                    msgtype = \'info\'\n+                    message = _("View changed.")\n+                    msgtype = "info"\n                     self.request.response.redirect(self.context.absolute_url())\n             IStatusMessage(self.request).add(message, msgtype)\n-        elif \'form.buttons.Cancel\' in self.request.form:\n+        elif "form.buttons.Cancel" in self.request.form:\n             self.request.response.redirect(self.context.absolute_url())\n \n         return self.index()\n \n     def get_selectable_items(self):\n-        """ Return brains in this container that can be used as default_pages\n-        """\n+        """Return brains in this container that can be used as default_pages"""\n         context = aq_inner(self.context)\n         registry = getUtility(IRegistry)\n-        view_types = registry.get(\n-            \'plone.types_use_view_action_in_listings\', [])\n-        default_page_types = registry.get(\'plone.default_page_types\', [])\n-        portal_types = getToolByName(self.context, \'portal_types\')\n+        view_types = registry.get("plone.types_use_view_action_in_listings", [])\n+        default_page_types = registry.get("plone.default_page_types", [])\n+        portal_types = getToolByName(self.context, "portal_types")\n \n         results = []\n         for brain in context.getFolderContents():\n@@ -119,8 +114,11 @@ def get_selectable_items(self):\n                 fti = portal_types.get(portal_type)\n                 if not fti:\n                     continue\n-                if fti.filter_content_types and fti.allowed_content_types or \\\n-                        not fti.filter_content_types:\n+                if (\n+                    fti.filter_content_types\n+                    and fti.allowed_content_types\n+                    or not fti.filter_content_types\n+                ):\n                     # Disallow folderish types if you can\'t add any content.\n                     # To override you have to add type to default_page_types\n                     continue\ndiff --git a/plone/app/content/browser/tableview.py b/plone/app/content/browser/tableview.py\nindex a5c70ab..7efb6f9 100644\n--- a/plone/app/content/browser/tableview.py\n+++ b/plone/app/content/browser/tableview.py\n@@ -1,23 +1,24 @@\n+from urllib.parse import quote_plus\n+\n from plone.batching import Batch\n from plone.batching.browser import BatchView\n from plone.memoize import instance\n from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from urllib.parse import quote_plus\n from zope.i18nmessageid import MessageFactory\n from zope.publisher.browser import BrowserView\n from ZTUtils import make_query\n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\n \n \n class TableBatchView(BatchView):\n-\n     def make_link(self, pagenumber):\n         batchlinkparams = self.request.form.copy()\n-        return \'{}?{}\'.format(self.request.ACTUAL_URL,\n-                          make_query(batchlinkparams,\n-                                     {\'pagenumber\': pagenumber}))\n+        return "{}?{}".format(\n+            self.request.ACTUAL_URL,\n+            make_query(batchlinkparams, {"pagenumber": pagenumber}),\n+        )\n \n \n class Table:\n@@ -28,10 +29,20 @@ class Table:\n     info.\n     """\n \n-    def __init__(self, request, base_url, view_url, items,\n-                 show_sort_column=False, buttons=None, pagesize=20,\n-                 show_select_column=True, show_size_column=True,\n-                 show_modified_column=True, show_status_column=True):\n+    def __init__(\n+        self,\n+        request,\n+        base_url,\n+        view_url,\n+        items,\n+        show_sort_column=False,\n+        buttons=None,\n+        pagesize=20,\n+        show_select_column=True,\n+        show_size_column=True,\n+        show_modified_column=True,\n+        show_status_column=True,\n+    ):\n         if buttons is None:\n             buttons = []\n         self.request = request\n@@ -49,22 +60,29 @@ def __init__(self, request, base_url, view_url, items,\n         self.buttons = buttons\n         self.default_page_size = 20\n         self.pagesize = pagesize\n-        self.show_all = request.get(\'show_all\', \'\').lower() == \'true\'\n+        self.show_all = request.get("show_all", "").lower() == "true"\n \n-        selection = request.get(\'select\')\n-        if selection == \'screen\':\n+        selection = request.get("select")\n+        if selection == "screen":\n             self.selectcurrentbatch = True\n-        elif selection == \'all\':\n+        elif selection == "all":\n             self.selectall = True\n \n-        self.pagenumber = int(request.get(\'pagenumber\', 1))\n+        self.pagenumber = int(request.get("pagenumber", 1))\n \n     def msg_select_item(self, item):\n-        title_or_id = (item.get(\'title_or_id\') or item.get(\'title\') or\n-                       item.get(\'Title\') or item.get(\'id\') or item[\'getId\'])\n-        return _(\'checkbox_select_item\',\n-                 default="Select ${title}",\n-                 mapping={\'title\': safe_unicode(title_or_id)})\n+        title_or_id = (\n+            item.get("title_or_id")\n+            or item.get("title")\n+            or item.get("Title")\n+            or item.get("id")\n+            or item["getId"]\n+        )\n+        return _(\n+            "checkbox_select_item",\n+            default="Select ${title}",\n+            mapping={"title": safe_unicode(title_or_id)},\n+        )\n \n     @property\n     def within_batch_size(self):\n@@ -72,10 +90,10 @@ def within_batch_size(self):\n \n     def set_checked(self, item):\n         selected = self.selected(item)\n-        item[\'checked\'] = selected and \'checked\' or None\n-        item[\'table_row_class\'] = item.get(\'table_row_class\', \'\')\n+        item["checked"] = selected and "checked" or None\n+        item["table_row_class"] = item.get("table_row_class", "")\n         if selected:\n-            item[\'table_row_class\'] += \' selected\'\n+            item["table_row_class"] += " selected"\n \n     @property\n     @instance.memoize\n@@ -83,9 +101,9 @@ def batch(self):\n         pagesize = self.pagesize\n         if self.show_all:\n             pagesize = len(self.items)\n-        b = Batch.fromPagenumber(self.items,\n-                                 pagesize=pagesize,\n-                                 pagenumber=self.pagenumber)\n+        b = Batch.fromPagenumber(\n+            self.items, pagesize=pagesize, pagenumber=self.pagenumber\n+        )\n         list(map(self.set_checked, b))\n         return b\n \n@@ -103,12 +121,14 @@ def _get_select_currentbatch(self):\n \n     def _set_select_currentbatch(self, value):\n         self._selectcurrentbatch = value\n-        if self._selectcurrentbatch and self.show_all or (\n-                len(self.items) <= self.pagesize):\n+        if (\n+            self._selectcurrentbatch\n+            and self.show_all\n+            or (len(self.items) <= self.pagesize)\n+        ):\n             self.selectall = True\n \n-    selectcurrentbatch = property(_get_select_currentbatch,\n-                                  _set_select_currentbatch)\n+    selectcurrentbatch = property(_get_select_currentbatch, _set_select_currentbatch)\n \n     def _get_select_all(self):\n         return self._select_all\n@@ -125,29 +145,29 @@ def show_select_all_items(self):\n         return self.selectcurrentbatch and not self.selectall\n \n     def get_nosort_class(self):\n-        """\n-        """\n+        """ """\n         return "nosort"\n \n     @property\n     def selectall_url(self):\n-        return self.selectnone_url + \'&select=all\'\n+        return self.selectnone_url + "&select=all"\n \n     @property\n     def selectscreen_url(self):\n-        return self.selectnone_url + \'&select=screen\'\n+        return self.selectnone_url + "&select=screen"\n \n     @property\n     def selectnone_url(self):\n-        base = self.view_url + \'?pagenumber={}&pagesize={}\'.format(\n-            self.pagenumber, self.pagesize)\n+        base = self.view_url + "?pagenumber={}&pagesize={}".format(\n+            self.pagenumber, self.pagesize\n+        )\n         if self.show_all:\n-            base += \'&show_all=true\'\n+            base += "&show_all=true"\n         return base\n \n     @property\n     def show_all_url(self):\n-        return self.view_url + \'?show_all=true\'\n+        return self.view_url + "?show_all=true"\n \n     def selected(self, item):\n         if self.selectcurrentbatch:\n@@ -156,24 +176,26 @@ def selected(self, item):\n \n     @property\n     def viewname(self):\n-        return self.view_url.split(\'?\')[0].split(\'/\')[-1]\n+        return self.view_url.split("?")[0].split("/")[-1]\n \n     def quote_plus(self, string):\n         return quote_plus(string)\n \n \n class TableBrowserView(BrowserView):\n-    \'\'\'Base class which can be used from a AJAX view\n+    """Base class which can be used from a AJAX view\n \n     Subclasses only need to set the table property to a different\n-    class.\'\'\'\n+    class."""\n \n     table = None\n \n-    def update_table(self, pagenumber=\'1\', sort_on=\'getObjPositionInParent\',\n-                     show_all=False):\n-        self.request.set(\'sort_on\', sort_on)\n-        self.request.set(\'pagenumber\', pagenumber)\n-        table = self.table(self.context, self.request,\n-                           contentFilter={\'sort_on\': sort_on})\n+    def update_table(\n+        self, pagenumber="1", sort_on="getObjPositionInParent", show_all=False\n+    ):\n+        self.request.set("sort_on", sort_on)\n+        self.request.set("pagenumber", pagenumber)\n+        table = self.table(\n+            self.context, self.request, contentFilter={"sort_on": sort_on}\n+        )\n         return table.render()\ndiff --git a/plone/app/content/browser/vocabulary.py b/plone/app/content/browser/vocabulary.py\nindex 1ec75b1..b559e31 100644\n--- a/plone/app/content/browser/vocabulary.py\n+++ b/plone/app/content/browser/vocabulary.py\n@@ -1,8 +1,10 @@\n+import inspect\n+import itertools\n+from logging import getLogger\n+from types import FunctionType\n+\n from AccessControl import getSecurityManager\n from Acquisition import aq_base\n-from logging import getLogger\n-from plone.app.content.utils import json_dumps\n-from plone.app.content.utils import json_loads\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.layout.navigation.root import getNavigationRoot\n from plone.app.querystring import queryparser\n@@ -14,105 +16,97 @@\n from Products.CMFPlone import PloneMessageFactory as _\n from Products.CMFPlone.utils import safe_unicode\n from Products.Five import BrowserView\n-from Products.MimetypesRegistry.MimeTypeItem import guess_icon_path\n-from Products.MimetypesRegistry.MimeTypeItem import PREFIX\n+from Products.MimetypesRegistry.MimeTypeItem import PREFIX, guess_icon_path\n from Products.PortalTransforms.transforms.safe_html import SafeHTML\n-from types import FunctionType\n-from z3c.form.interfaces import IAddForm\n-from z3c.form.interfaces import ISubForm\n-from zope.component import getUtility\n-from zope.component import queryAdapter\n-from zope.component import queryUtility\n+from z3c.form.interfaces import IAddForm, ISubForm\n+from zope.component import getUtility, queryAdapter, queryUtility\n from zope.deprecation import deprecated\n from zope.i18n import translate\n-from zope.schema.interfaces import ICollection\n-from zope.schema.interfaces import IVocabularyFactory\n+from zope.schema.interfaces import ICollection, IVocabularyFactory\n from zope.security.interfaces import IPermission\n \n-import inspect\n-import itertools\n-\n+from plone.app.content.utils import json_dumps, json_loads\n \n logger = getLogger(__name__)\n \n MAX_BATCH_SIZE = 500  # prevent overloading server\n \n-DEFAULT_PERMISSION = \'View\'\n-DEFAULT_PERMISSION_SECURE = \'Modify portal content\'\n+DEFAULT_PERMISSION = "View"\n+DEFAULT_PERMISSION_SECURE = "Modify portal content"\n PERMISSIONS = {\n-    \'plone.app.vocabularies.Catalog\': \'View\',\n-    \'plone.app.vocabularies.Keywords\': \'Modify portal content\',\n-    \'plone.app.vocabularies.SyndicatableFeedItems\': \'Modify portal content\',\n-    \'plone.app.vocabularies.Users\': \'Modify portal content\',\n-    \'plone.app.multilingual.RootCatalog\': \'View\',\n+    "plone.app.vocabularies.Catalog": "View",\n+    "plone.app.vocabularies.Keywords": "Modify portal content",\n+    "plone.app.vocabularies.SyndicatableFeedItems": "Modify portal content",\n+    "plone.app.vocabularies.Users": "Modify portal content",\n+    "plone.app.multilingual.RootCatalog": "View",\n }\n TRANSLATED_IGNORED = [\n-    \'author_name\',\n-    \'cmf_uid\',\n-    \'commentators\',\n-    \'created\',\n-    \'CreationDate\',\n-    \'Creator\',\n-    \'Date\',\n-    \'Description\',\n-    \'effective\',\n-    \'EffectiveDate\',\n-    \'end\',\n-    \'exclude_from_nav\',\n-    \'ExpirationDate\',\n-    \'expires\',\n-    \'getIcon\',\n-    \'getMimeIcon\',\n-    \'getId\',\n-    \'getObjSize\',\n-    \'getRemoteUrl\',\n-    \'getURL\',\n-    \'id\',\n-    \'in_response_to\',\n-    \'is_folderish\',\n-    \'last_comment_date\',\n-    \'listCreators\',\n-    \'location\',\n-    \'meta_type\',\n-    \'ModificationDate\',\n-    \'modified\',\n-    \'path\',\n-    \'portal_type\',\n-    \'review_state\',\n-    \'start\',\n-    \'Subject\',\n-    \'sync_uid\',\n-    \'Title\',\n-    \'total_comments\'\n-    \'UID\',\n+    "author_name",\n+    "cmf_uid",\n+    "commentators",\n+    "created",\n+    "CreationDate",\n+    "Creator",\n+    "Date",\n+    "Description",\n+    "effective",\n+    "EffectiveDate",\n+    "end",\n+    "exclude_from_nav",\n+    "ExpirationDate",\n+    "expires",\n+    "getIcon",\n+    "getMimeIcon",\n+    "getId",\n+    "getObjSize",\n+    "getRemoteUrl",\n+    "getURL",\n+    "id",\n+    "in_response_to",\n+    "is_folderish",\n+    "last_comment_date",\n+    "listCreators",\n+    "location",\n+    "meta_type",\n+    "ModificationDate",\n+    "modified",\n+    "path",\n+    "portal_type",\n+    "review_state",\n+    "start",\n+    "Subject",\n+    "sync_uid",\n+    "Title",\n+    "total_comments" "UID",\n ]\n \n _permissions = PERMISSIONS\n-deprecated(\'_permissions\', \'Use PERMISSIONS variable instead.\')\n+deprecated("_permissions", "Use PERMISSIONS variable instead.")\n \n \n def _parseJSON(s):\n     # XXX this should be changed to a try loads except return s\n     if isinstance(s, str):\n         s = s.strip()\n-        if (s.startswith(\'{\') and s.endswith(\'}\')) or \\\n-                (s.startswith(\'[\') and s.endswith(\']\')):  # detect if json\n+        if (s.startswith("{") and s.endswith("}")) or (\n+            s.startswith("[") and s.endswith("]")\n+        ):  # detect if json\n             return json_loads(s)\n     return s\n \n \n _unsafe_metadata = [\n-    \'author_name\',\n-    \'commentors\',\n-    \'Creator\',\n-    \'listCreators\',\n+    "author_name",\n+    "commentors",\n+    "Creator",\n+    "listCreators",\n ]\n _safe_callable_metadata = [\n-    \'getIcon\',\n-    \'getPath\',\n-    \'getURL\',\n-    \'is_folderish\',\n-    \'review_state\',\n+    "getIcon",\n+    "getPath",\n+    "getURL",\n+    "is_folderish",\n+    "review_state",\n ]\n \n \n@@ -121,7 +115,6 @@ class VocabLookupException(Exception):\n \n \n class BaseVocabularyView(BrowserView):\n-\n     def get_translated_ignored(self):\n         return TRANSLATED_IGNORED\n \n@@ -148,22 +141,22 @@ def __call__(self):\n         """\n         context = self.get_context()\n         self.request.response.setHeader(\n-            \'Content-Type\', \'application/json; charset=utf-8\'\n+            "Content-Type", "application/json; charset=utf-8"\n         )\n \n         try:\n             vocabulary = self.get_vocabulary()\n         except VocabLookupException as e:\n-            return json_dumps({\'error\': e.args[0]})\n+            return json_dumps({"error": e.args[0]})\n \n         results_are_brains = False\n-        if hasattr(vocabulary, \'search_catalog\'):\n+        if hasattr(vocabulary, "search_catalog"):\n             query = self.parsed_query()\n             results = vocabulary.search_catalog(query)\n             results_are_brains = True\n-        elif hasattr(vocabulary, \'search\'):\n+        elif hasattr(vocabulary, "search"):\n             try:\n-                query = self.parsed_query()[\'SearchableText\'][\'query\']\n+                query = self.parsed_query()["SearchableText"]["query"]\n             except KeyError:\n                 results = iter(vocabulary)\n             else:\n@@ -180,15 +173,15 @@ def __call__(self):\n             total = 0\n \n         # get batch\n-        batch = _parseJSON(self.request.get(\'batch\', \'\'))\n-        if batch and (\'size\' not in batch or \'page\' not in batch):\n+        batch = _parseJSON(self.request.get("batch", ""))\n+        if batch and ("size" not in batch or "page" not in batch):\n             batch = None  # batching not providing correct options\n         if batch:\n             # must be slicable for batching support\n-            page = int(batch[\'page\'])\n-            size = int(batch[\'size\'])\n+            page = int(batch["page"])\n+            size = int(batch["size"])\n             if size > MAX_BATCH_SIZE:\n-                raise Exception(\'Max batch size is 500\')\n+                raise Exception("Max batch size is 500")\n             # page is being passed in is 1-based\n             start = (max(page - 1, 0)) * size\n             end = start + size\n@@ -205,9 +198,9 @@ def __call__(self):\n         # build result items\n         items = []\n \n-        attributes = _parseJSON(self.request.get(\'attributes\', \'\'))\n+        attributes = _parseJSON(self.request.get("attributes", ""))\n         if isinstance(attributes, str) and attributes:\n-            attributes = attributes.split(\',\')\n+            attributes = attributes.split(",")\n \n         translate_ignored = self.get_translated_ignored()\n         transform = SafeHTML()\n@@ -215,49 +208,42 @@ def __call__(self):\n             base_path = self.get_base_path(context)\n             sm = getSecurityManager()\n             can_edit = sm.checkPermission(DEFAULT_PERMISSION_SECURE, context)\n-            mtt = getToolByName(self.context, \'mimetypes_registry\')\n+            mtt = getToolByName(self.context, "mimetypes_registry")\n             for vocab_item in results:\n                 if not results_are_brains:\n                     vocab_item = vocab_item.value\n                 item = {}\n                 for attr in attributes:\n                     key = attr\n-                    if \':\' in attr:\n-                        key, attr = attr.split(\':\', 1)\n+                    if ":" in attr:\n+                        key, attr = attr.split(":", 1)\n                     if attr in _unsafe_metadata and not can_edit:\n                         continue\n-                    if key == \'path\':\n-                        attr = \'getPath\'\n+                    if key == "path":\n+                        attr = "getPath"\n                     val = getattr(vocab_item, attr, None)\n                     if callable(val):\n                         if attr in _safe_callable_metadata:\n                             val = val()\n                         else:\n                             continue\n-                    if key == \'path\':\n-                        val = val[len(base_path):]\n-                    if (\n-                        key not in translate_ignored and\n-                        isinstance(val, str)\n-                    ):\n-                        val = translate(\n-                            _(safe_unicode(val)),\n-                            context=self.request\n-                        )\n+                    if key == "path":\n+                        val = val[len(base_path) :]\n+                    if key not in translate_ignored and isinstance(val, str):\n+                        val = translate(_(safe_unicode(val)), context=self.request)\n                     if isinstance(val, (bytes, str)):\n                         val = transform.scrub_html(val)\n                     item[key] = val\n-                    if key == \'getMimeIcon\':\n+                    if key == "getMimeIcon":\n                         item[key] = None\n                         # get mime type icon url from mimetype registry\'\n-                        contenttype = aq_base(\n-                            getattr(vocab_item, \'mime_type\', None))\n+                        contenttype = aq_base(getattr(vocab_item, "mime_type", None))\n                         if contenttype:\n                             ctype = mtt.lookup(contenttype)\n                             if ctype:\n-                                item[key] = \'/\'.join([\n-                                    base_path,\n-                                    guess_icon_path(ctype[0])])\n+                                item[key] = "/".join(\n+                                    [base_path, guess_icon_path(ctype[0])]\n+                                )\n                             else:\n                                 item[key] = "/".join(\n                                     [\n@@ -268,28 +254,31 @@ def __call__(self):\n                                 )\n                 items.append(item)\n         else:\n-            items = [{\'id\': transform.scrub_html(item.value),\n-                      \'text\': transform.scrub_html(item.title) if item.title else ""} for item in results]\n+            items = [\n+                {\n+                    "id": transform.scrub_html(item.value),\n+                    "text": transform.scrub_html(item.title) if item.title else "",\n+                }\n+                for item in results\n+            ]\n \n         if total == 0:\n             total = len(items)\n \n-        return json_dumps({\n-            \'results\': items,\n-            \'total\': total\n-        })\n+        return json_dumps({"results": items, "total": total})\n \n-    def parsed_query(self, ):\n-        query = _parseJSON(self.request.get(\'query\', \'\'))\n+    def parsed_query(\n+        self,\n+    ):\n+        query = _parseJSON(self.request.get("query", ""))\n         if isinstance(query, str):\n-            query = {\'SearchableText\': {\'query\': query}}\n+            query = {"SearchableText": {"query": query}}\n         elif query:\n-            parsed = queryparser.parseFormquery(\n-                self.get_context(), query[\'criteria\'])\n-            if \'sort_on\' in query:\n-                parsed[\'sort_on\'] = query[\'sort_on\']\n-            if \'sort_order\' in query:\n-                parsed[\'sort_order\'] = str(query[\'sort_order\'])\n+            parsed = queryparser.parseFormquery(self.get_context(), query["criteria"])\n+            if "sort_on" in query:\n+                parsed["sort_on"] = query["sort_on"]\n+            if "sort_order" in query:\n+                parsed["sort_order"] = str(query["sort_order"])\n             query = parsed\n         else:\n             query = {}\n@@ -306,47 +295,39 @@ def get_vocabulary(self):\n         # Look up named vocabulary and check permission.\n \n         context = self.context\n-        factory_name = self.request.get(\'name\', None)\n-        field_name = self.request.get(\'field\', None)\n+        factory_name = self.request.get("name", None)\n+        field_name = self.request.get("field", None)\n         if not factory_name:\n-            raise VocabLookupException(\'No factory provided.\')\n+            raise VocabLookupException("No factory provided.")\n         authorized = None\n         sm = getSecurityManager()\n-        if (\n-            factory_name not in PERMISSIONS\n-            or not INavigationRoot.providedBy(context)\n-        ):\n+        if factory_name not in PERMISSIONS or not INavigationRoot.providedBy(context):\n             # Check field specific permission\n             if field_name:\n-                permission_checker = queryAdapter(\n-                    context,\n-                    IFieldPermissionChecker\n-                )\n+                permission_checker = queryAdapter(context, IFieldPermissionChecker)\n                 if permission_checker is not None:\n-                    authorized = permission_checker.validate(\n-                        field_name,\n-                        factory_name\n-                    )\n+                    authorized = permission_checker.validate(field_name, factory_name)\n                 elif sm.checkPermission(\n-                    PERMISSIONS.get(factory_name, DEFAULT_PERMISSION),\n-                    context\n+                    PERMISSIONS.get(factory_name, DEFAULT_PERMISSION), context\n                 ):\n                     # If no checker, fall back to checking the global registry\n                     authorized = True\n \n             if not authorized:\n-                raise VocabLookupException(\'Vocabulary lookup not allowed\')\n+                raise VocabLookupException("Vocabulary lookup not allowed")\n \n         # Short circuit if we are on the site root and permission is\n         # in global registry\n         elif not sm.checkPermission(\n-                PERMISSIONS.get(factory_name, DEFAULT_PERMISSION), context):\n-            raise VocabLookupException(\'Vocabulary lookup not allowed\')\n+            PERMISSIONS.get(factory_name, DEFAULT_PERMISSION), context\n+        ):\n+            raise VocabLookupException("Vocabulary lookup not allowed")\n \n         factory = queryUtility(IVocabularyFactory, factory_name)\n         if not factory:\n             raise VocabLookupException(\n-                \'No factory with name "%s" exists.\' % factory_name)\n+                \'No factory with name "%s" exists.\' % factory_name\n+            )\n \n         # This part is for backwards-compatibility with the first\n         # generation of vocabularies created for plone.app.widgets,\n@@ -356,8 +337,8 @@ def get_vocabulary(self):\n             factory_spec = inspect.getfullargspec(factory)\n         else:\n             factory_spec = inspect.getfullargspec(factory.__call__)\n-        query = _parseJSON(self.request.get(\'query\', \'\'))\n-        if query and \'query\' in factory_spec.args:\n+        query = _parseJSON(self.request.get("query", ""))\n+        if query and "query" in factory_spec.args:\n             vocabulary = factory(context, query=query)\n         else:\n             # This is what is reached for non-legacy vocabularies.\n@@ -394,10 +375,9 @@ def get_vocabulary(self):\n         if permission is None:\n             permission = getUtility(IPermission, name=self.default_permission)\n         if not getSecurityManager().checkPermission(\n-            permission.title,\n-            self.get_context()\n+            permission.title, self.get_context()\n         ):\n-            raise VocabLookupException(\'Vocabulary lookup not allowed.\')\n+            raise VocabLookupException("Vocabulary lookup not allowed.")\n \n         if ICollection.providedBy(field):\n             return field.value_type.vocabulary\ndiff --git a/plone/app/content/catalog.py b/plone/app/content/catalog.py\nindex 003ff52..b6c452b 100644\n--- a/plone/app/content/catalog.py\n+++ b/plone/app/content/catalog.py\n@@ -1,6 +1,5 @@\n def reindexOnModify(content, event):\n-    """When an object is modified, re-index it in the catalog\n-    """\n+    """When an object is modified, re-index it in the catalog"""\n     if event.object is not content:\n         return\n-    content.reindexObject(idxs=getattr(event, \'descriptions\', []))\n+    content.reindexObject(idxs=getattr(event, "descriptions", []))\ndiff --git a/plone/app/content/container.py b/plone/app/content/container.py\nindex 770e34b..f117451 100644\n--- a/plone/app/content/container.py\n+++ b/plone/app/content/container.py\n@@ -2,11 +2,12 @@\n from Products.CMFCore.PortalContent import PortalContent\n from Products.CMFCore.PortalFolder import PortalFolderBase\n from Products.CMFPlone.DublinCore import DefaultDublinCoreImpl\n-from plone.app.content.interfaces import IReindexOnModify\n from zope.container.contained import Contained\n from zope.container.interfaces import IContainer\n from zope.interface import implementer\n \n+from plone.app.content.interfaces import IReindexOnModify\n+\n \n @implementer(IContainer)\n class OFSContainer:\n@@ -20,6 +21,7 @@ class OFSContainer:\n     def __init__(self, id=None):\n         if id is not None:\n             self.id = id\n+\n     # fulfill IContainer interface\n \n     def keys(self):\n@@ -33,6 +35,7 @@ def items(self):\n \n     def get(self, name, default=None):\n         return getattr(self, name, default)\n+\n     # __getitem__ is already implemented by ObjectManager\n \n     def __setitem__(self, name, obj):\n@@ -50,6 +53,7 @@ def __iter__(self):\n     def __len__(self):\n         return len(self.objectIds())\n \n+\n # Notes on this insane mixing of classes:\n #\n #  - OFSContainer gives us Zope3-like container operations, and we want that\n@@ -67,8 +71,14 @@ def __len__(self):\n \n \n @implementer(IReindexOnModify)\n-class Container(OFSContainer, CMFCatalogAware, PortalFolderBase, PortalContent,\n-                DefaultDublinCoreImpl, Contained):\n+class Container(\n+    OFSContainer,\n+    CMFCatalogAware,\n+    PortalFolderBase,\n+    PortalContent,\n+    DefaultDublinCoreImpl,\n+    Contained,\n+):\n     """A base class mixing in CMFish, contentish, containerish, containedish,\n     dublincoreish behaviour.\n     """\ndiff --git a/plone/app/content/interfaces.py b/plone/app/content/interfaces.py\nindex 8dc13cf..74ce508 100644\n--- a/plone/app/content/interfaces.py\n+++ b/plone/app/content/interfaces.py\n@@ -1,15 +1,14 @@\n from zope import schema\n-from zope.interface import Interface, Attribute\n+from zope.interface import Attribute, Interface\n \n \n class INameFromTitle(Interface):\n-    """An object that supports gettings it name from its title.\n-    """\n+    """An object that supports gettings it name from its title."""\n \n     title = schema.TextLine(\n         title="Title",\n         description="A title, which will be converted to a name",\n-        required=True\n+        required=True,\n     )\n \n \ndiff --git a/plone/app/content/item.py b/plone/app/content/item.py\nindex b900450..9e872c5 100644\n--- a/plone/app/content/item.py\n+++ b/plone/app/content/item.py\n@@ -1,14 +1,14 @@\n from Products.CMFCore.PortalContent import PortalContent\n from Products.CMFPlone.DublinCore import DefaultDublinCoreImpl\n-from plone.app.content.interfaces import IReindexOnModify\n from zope.container.contained import Contained\n from zope.interface import implementer\n \n+from plone.app.content.interfaces import IReindexOnModify\n+\n \n @implementer(IReindexOnModify)\n class Item(PortalContent, DefaultDublinCoreImpl, Contained):\n-    """A non-containerish, CMFish item\n-    """\n+    """A non-containerish, CMFish item"""\n \n     def __init__(self, id=None, **kwargs):\n         DefaultDublinCoreImpl.__init__(self, **kwargs)\ndiff --git a/plone/app/content/namechooser.py b/plone/app/content/namechooser.py\nindex 875de29..62c9ebb 100644\n--- a/plone/app/content/namechooser.py\n+++ b/plone/app/content/namechooser.py\n@@ -1,15 +1,13 @@\n-from Acquisition import aq_base\n-from Acquisition import aq_inner\n-from plone.app.content.interfaces import INameFromTitle\n+import time\n+\n+from Acquisition import aq_base, aq_inner\n from plone.i18n.normalizer import FILENAME_REGEX\n-from plone.i18n.normalizer.interfaces import IURLNormalizer\n-from plone.i18n.normalizer.interfaces import IUserPreferredURLNormalizer\n+from plone.i18n.normalizer.interfaces import IURLNormalizer, IUserPreferredURLNormalizer\n from zope.component import getUtility\n from zope.container.interfaces import INameChooser\n from zope.interface import implementer\n \n-import time\n-\n+from plone.app.content.interfaces import INameFromTitle\n \n ATTEMPTS = 100\n \n@@ -35,17 +33,17 @@ def chooseName(self, name, obj):\n             if nameFromTitle is not None:\n                 name = nameFromTitle.title\n             if not name:\n-                name = getattr(aq_base(obj), \'id\', None)\n+                name = getattr(aq_base(obj), "id", None)\n             if not name:\n-                name = getattr(aq_base(obj), \'portal_type\', None)\n+                name = getattr(aq_base(obj), "portal_type", None)\n             if not name:\n                 name = obj.__class__.__name__\n \n         if not isinstance(name, str):\n-            name = str(name, \'utf-8\')\n-            #name = name.encode(\'utf-8\')\n+            name = str(name, "utf-8")\n+            # name = name.encode(\'utf-8\')\n \n-        request = getattr(obj.__of__(container), \'REQUEST\', None)\n+        request = getattr(obj.__of__(container), "REQUEST", None)\n         if request is not None:\n             name = IUserPreferredURLNormalizer(request).normalize(name)\n         else:\n@@ -63,11 +61,11 @@ def _findUniqueName(self, name, obj):\n         if not check_id(name, required=1):\n             return name\n \n-        ext = \'\'\n+        ext = ""\n         m = FILENAME_REGEX.match(name)\n         if m is not None:\n             name = m.groups()[0]\n-            ext = \'.\' + m.groups()[1]\n+            ext = "." + m.groups()[1]\n \n         idx = 1\n         while idx <= ATTEMPTS:\n@@ -82,31 +80,26 @@ def _findUniqueName(self, name, obj):\n             return new_name\n \n         raise ValueError(\n-            "Cannot find a unique name based on %s after %d attemps." % (\n+            "Cannot find a unique name based on %s after %d attemps."\n+            % (\n                 name,\n                 ATTEMPTS,\n             )\n         )\n \n     def _getCheckId(self, obj):\n-        """Return a function that can act as the check_id script.\n-        """\n+        """Return a function that can act as the check_id script."""\n         parent = aq_inner(self.context)\n         # Check for a method or a skin script, like\n         # Products/CMFPlone/skins/plone_scripts/check_id.py until Plone 5.1.\n-        _check_id = getattr(obj, \'check_id\', None)\n+        _check_id = getattr(obj, "check_id", None)\n \n         def do_Plone_check(newid, required):\n             if _check_id is not None:\n-                return _check_id(\n-                    newid,\n-                    required=required,\n-                    contained_by=parent\n-                )\n+                return _check_id(newid, required=required, contained_by=parent)\n \n             from Products.CMFPlone.utils import check_id\n \n-            return check_id(\n-                obj, newid, required=required, contained_by=parent)\n+            return check_id(obj, newid, required=required, contained_by=parent)\n \n         return do_Plone_check\ndiff --git a/plone/app/content/testing.py b/plone/app/content/testing.py\nindex 7e87b0c..bac42ae 100644\n--- a/plone/app/content/testing.py\n+++ b/plone/app/content/testing.py\n@@ -1,73 +1,73 @@\n+import doctest\n+\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n-from plone.app.testing import applyProfile\n-from plone.app.testing import FunctionalTesting\n-from plone.app.testing import IntegrationTesting\n-from plone.app.testing import PLONE_FIXTURE\n-from plone.app.testing import PloneSandboxLayer\n+from plone.app.testing import (\n+    PLONE_FIXTURE,\n+    FunctionalTesting,\n+    IntegrationTesting,\n+    PloneSandboxLayer,\n+    applyProfile,\n+)\n from Products.CMFCore.utils import getToolByName\n from zope.configuration import xmlconfig\n-from zope.interface import implementer\n-from zope.interface import provider\n+from zope.interface import implementer, provider\n from zope.schema.interfaces import IVocabularyFactory\n-from zope.schema.vocabulary import SimpleTerm\n-from zope.schema.vocabulary import SimpleVocabulary\n-\n-import doctest\n+from zope.schema.vocabulary import SimpleTerm, SimpleVocabulary\n \n \n @implementer(IVocabularyFactory)\n class ExampleVocabulary:\n-\n     def __call__(self, context, query=None):\n-        items = [\'One\', \'Two\', \'Three\']\n-        tmp = SimpleVocabulary([\n-            SimpleTerm(it.lower(), it.lower(), it)\n-            for it in items\n-            if query is None\n-            or query.lower() in it.lower()\n-        ])\n+        items = ["One", "Two", "Three"]\n+        tmp = SimpleVocabulary(\n+            [\n+                SimpleTerm(it.lower(), it.lower(), it)\n+                for it in items\n+                if query is None or query.lower() in it.lower()\n+            ]\n+        )\n         tmp.test = 1\n         return tmp\n \n \n @provider(IVocabularyFactory)\n def ExampleFunctionVocabulary(context, query=None):\n-    items = [\'First\', \'Second\', \'Third\']\n-    tmp = SimpleVocabulary([\n-        SimpleTerm(it.lower(), it.lower(), it)\n-        for it in items\n-        if query is None\n-        or query.lower() in it.lower()\n-    ])\n+    items = ["First", "Second", "Third"]\n+    tmp = SimpleVocabulary(\n+        [\n+            SimpleTerm(it.lower(), it.lower(), it)\n+            for it in items\n+            if query is None or query.lower() in it.lower()\n+        ]\n+    )\n     return tmp\n \n \n class PloneAppContent(PloneSandboxLayer):\n \n-    defaultBases = (PLONE_FIXTURE, )\n+    defaultBases = (PLONE_FIXTURE,)\n \n-    USER_NAME = \'johndoe\'\n-    USER_PASSWORD = \'secret\'\n-    MEMBER_NAME = \'janedoe\'\n-    MEMBER_PASSWORD = \'secret\'\n-    USER_WITH_FULLNAME_NAME = \'jim\'\n-    USER_WITH_FULLNAME_FULLNAME = \'Jim Fulton\'\n-    USER_WITH_FULLNAME_PASSWORD = \'secret\'\n-    MANAGER_USER_NAME = \'manager\'\n-    MANAGER_USER_PASSWORD = \'secret\'\n+    USER_NAME = "johndoe"\n+    USER_PASSWORD = "secret"\n+    MEMBER_NAME = "janedoe"\n+    MEMBER_PASSWORD = "secret"\n+    USER_WITH_FULLNAME_NAME = "jim"\n+    USER_WITH_FULLNAME_FULLNAME = "Jim Fulton"\n+    USER_WITH_FULLNAME_PASSWORD = "secret"\n+    MANAGER_USER_NAME = "manager"\n+    MANAGER_USER_PASSWORD = "secret"\n \n     def setUpZope(self, app, configurationContext):\n         # Load ZCML\n         import plone.app.content\n+\n         xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.app.content,\n-            context=configurationContext\n+            "configure.zcml", plone.app.content, context=configurationContext\n         )\n \n     def setUpPloneSite(self, portal):\n         # Creates some users\n-        acl_users = getToolByName(portal, \'acl_users\')\n+        acl_users = getToolByName(portal, "acl_users")\n         acl_users.userFolderAddUser(\n             self.USER_NAME,\n             self.USER_PASSWORD,\n@@ -77,70 +77,71 @@ def setUpPloneSite(self, portal):\n         acl_users.userFolderAddUser(\n             self.MEMBER_NAME,\n             self.MEMBER_PASSWORD,\n-            [\'Member\'],\n+            ["Member"],\n             [],\n         )\n         acl_users.userFolderAddUser(\n             self.USER_WITH_FULLNAME_NAME,\n             self.USER_WITH_FULLNAME_PASSWORD,\n-            [\'Member\'],\n+            ["Member"],\n             [],\n         )\n-        mtool = getToolByName(portal, \'portal_membership\', None)\n-        mtool.addMember(\'jim\', \'Jim\', [\'Member\'], [])\n-        mtool.getMemberById(\'jim\').setMemberProperties(\n-            {"fullname": \'Jim Fult\\xc3\\xb8rn\'})\n+        mtool = getToolByName(portal, "portal_membership", None)\n+        mtool.addMember("jim", "Jim", ["Member"], [])\n+        mtool.getMemberById("jim").setMemberProperties(\n+            {"fullname": "Jim Fult\\xc3\\xb8rn"}\n+        )\n \n         acl_users.userFolderAddUser(\n             self.MANAGER_USER_NAME,\n             self.MANAGER_USER_PASSWORD,\n-            [\'Manager\'],\n+            ["Manager"],\n             [],\n         )\n         portal.portal_workflow.setDefaultChain("simple_publication_workflow")\n \n \n class NonAsciiLayer(PloneSandboxLayer):\n-\n     def setUpZope(self, app, configurationContext):\n         import plone.app.content.tests\n \n-        xmlconfig.file(\'profiles/non-ascii-workflow.zcml\',\n-                       plone.app.content.tests,\n-                       context=configurationContext)\n+        xmlconfig.file(\n+            "profiles/non-ascii-workflow.zcml",\n+            plone.app.content.tests,\n+            context=configurationContext,\n+        )\n \n     def setUpPloneSite(self, portal):\n         # applyProfile which has non-ascii characters in state titles\n-        applyProfile(portal, \'plone.app.content.tests:non-ascii-workflow\')\n+        applyProfile(portal, "plone.app.content.tests:non-ascii-workflow")\n \n \n PLONE_APP_CONTENT_FIXTURE = PloneAppContent()\n PLONE_APP_CONTENT_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_CONTENT_FIXTURE, ),\n-    name="PloneAppContent:Integration")\n+    bases=(PLONE_APP_CONTENT_FIXTURE,), name="PloneAppContent:Integration"\n+)\n PLONE_APP_CONTENT_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_APP_CONTENT_FIXTURE, ),\n-    name="PloneAppContent:Functional")\n+    bases=(PLONE_APP_CONTENT_FIXTURE,), name="PloneAppContent:Functional"\n+)\n \n \n # Dexterity test layers\n PLONE_APP_CONTENT_DX_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_CONTENTTYPES_FIXTURE, ),\n-    name="PloneAppContentDX:Integration")\n+    bases=(PLONE_APP_CONTENTTYPES_FIXTURE,), name="PloneAppContentDX:Integration"\n+)\n PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_APP_CONTENTTYPES_FIXTURE, ),\n-    name="PloneAppContentDX:Functional")\n+    bases=(PLONE_APP_CONTENTTYPES_FIXTURE,), name="PloneAppContentDX:Functional"\n+)\n \n \n # Test layer with a workflow containing non-ascii characters in state titles.\n PLONE_APP_CONTENT_NON_ASCII_LAYER = NonAsciiLayer()\n PLONE_APP_CONTENT_NON_ASCII_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_CONTENT_NON_ASCII_LAYER, ),\n-    name="PloneAppContentNonAscii:Integration")\n+    bases=(PLONE_APP_CONTENT_NON_ASCII_LAYER,),\n+    name="PloneAppContentNonAscii:Integration",\n+)\n \n \n optionflags = (\n-    doctest.REPORT_ONLY_FIRST_FAILURE\n-    | doctest.ELLIPSIS\n-    | doctest.NORMALIZE_WHITESPACE\n+    doctest.REPORT_ONLY_FIRST_FAILURE | doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n )\ndiff --git a/plone/app/content/tests/test_actions.py b/plone/app/content/tests/test_actions.py\nindex a9a8c0e..2c2a643 100644\n--- a/plone/app/content/tests/test_actions.py\n+++ b/plone/app/content/tests/test_actions.py\n@@ -1,19 +1,15 @@\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n-from plone.app.testing import login\n-from plone.app.testing import logout\n-from plone.app.testing import setRoles\n-from plone.testing.zope import Browser\n+import unittest\n+\n+import transaction\n+from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, login, logout, setRoles\n from plone.locking.interfaces import ILockable\n-from zExceptions import Unauthorized\n+from plone.testing.zope import Browser\n from z3c.form.interfaces import IFormLayer\n+from zExceptions import Unauthorized\n from zope.component import getMultiAdapter\n from zope.interface import alsoProvides\n \n-import transaction\n-import unittest\n-\n+from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n \n \n class ActionsDXTestCase(unittest.TestCase):\n@@ -21,48 +17,45 @@ class ActionsDXTestCase(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n-        self.portal.acl_users.userFolderAddUser(\n-            \'editor\', \'secret\', [\'Editor\'], [])\n+        self.portal.acl_users.userFolderAddUser("editor", "secret", ["Editor"], [])\n \n         # For z3c.forms request must provide IFormLayer\n         alsoProvides(self.request, IFormLayer)\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\n-            type_name=\'Folder\', id=\'f1\', title=\'A T\xc3\xa9st Folder\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory(type_name="Folder", id="f1", title="A T\xc3\xa9st Folder")\n \n         transaction.commit()\n-        self.browser = Browser(self.layer[\'app\'])\n+        self.browser = Browser(self.layer["app"])\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic {}:{}\'.format(TEST_USER_NAME, \'secret\'))\n+            "Authorization", "Basic {}:{}".format(TEST_USER_NAME, "secret")\n+        )\n \n     def tearDown(self):\n-        if \'f1\' in self.portal.objectIds():\n-            self.portal.manage_delObjects(ids=\'f1\')\n+        if "f1" in self.portal.objectIds():\n+            self.portal.manage_delObjects(ids="f1")\n             transaction.commit()\n \n     def test_delete_confirmation(self):\n-        folder = self.portal[\'f1\']\n+        folder = self.portal["f1"]\n \n-        form = getMultiAdapter(\n-            (folder, self.request), name=\'delete_confirmation\')\n+        form = getMultiAdapter((folder, self.request), name="delete_confirmation")\n         form.update()\n \n-        cancel = form.buttons[\'Cancel\']\n+        cancel = form.buttons["Cancel"]\n         form.handlers.getHandler(cancel)(form, form)\n \n         self.assertFalse(form.is_locked)\n \n     def test_delete_confirmation_if_locked(self):\n-        folder = self.portal[\'f1\']\n+        folder = self.portal["f1"]\n         lockable = ILockable.providedBy(folder)\n \n-        form = getMultiAdapter(\n-            (folder, self.request), name=\'delete_confirmation\')\n+        form = getMultiAdapter((folder, self.request), name="delete_confirmation")\n         form.update()\n \n         self.assertFalse(form.is_locked)\n@@ -70,8 +63,7 @@ def test_delete_confirmation_if_locked(self):\n         if lockable:\n             lockable.lock()\n \n-        form = getMultiAdapter(\n-            (folder, self.request), name=\'delete_confirmation\')\n+        form = getMultiAdapter((folder, self.request), name="delete_confirmation")\n         form.update()\n \n         self.assertFalse(form.is_locked)\n@@ -81,10 +73,9 @@ def test_delete_confirmation_if_locked(self):\n         # ILockable interface.\n         if lockable:\n             logout()\n-            login(self.portal, \'editor\')\n+            login(self.portal, "editor")\n \n-            form = getMultiAdapter(\n-                (folder, self.request), name=\'delete_confirmation\')\n+            form = getMultiAdapter((folder, self.request), name="delete_confirmation")\n             form.update()\n             self.assertTrue(form.is_locked)\n \n@@ -94,13 +85,12 @@ def test_delete_confirmation_if_locked(self):\n             ILockable(folder).unlock()\n \n     def test_delete_confirmation_cancel(self):\n-        folder = self.portal[\'f1\']\n+        folder = self.portal["f1"]\n \n-        self.browser.open(folder.absolute_url() + \'/delete_confirmation\')\n-        self.browser.getControl(name=\'form.buttons.Cancel\').click()\n+        self.browser.open(folder.absolute_url() + "/delete_confirmation")\n+        self.browser.getControl(name="form.buttons.Cancel").click()\n         context_state = getMultiAdapter(\n-            (folder, self.request),\n-            name=\'plone_context_state\'\n+            (folder, self.request), name="plone_context_state"\n         )\n         self.assertEqual(self.browser.url, context_state.view_url())\n \n@@ -115,19 +105,22 @@ def prepare_for_acquisition_tests(self):\n         """\n         # create a page at the root and one nested with the same id.\n         p1 = self.portal.invokeFactory(\n-            type_name=\'Document\', id=\'test\', title=\'Test Page at Root\')\n-        folder_1 = self.portal[\'f1\']\n+            type_name="Document", id="test", title="Test Page at Root"\n+        )\n+        folder_1 = self.portal["f1"]\n         p2 = folder_1.invokeFactory(\n-            type_name=\'Document\', id=\'test\', title=\'Test Page in Folder\')\n+            type_name="Document", id="test", title="Test Page in Folder"\n+        )\n         contained_test_page = folder_1[p2]\n \n         transaction.commit()\n \n         # create an alternate browser also logged in with manager\n-        browser_2 = Browser(self.layer[\'app\'])\n+        browser_2 = Browser(self.layer["app"])\n         browser_2.handleErrors = False\n         browser_2.addHeader(\n-            \'Authorization\', \'Basic {}:{}\'.format(TEST_USER_NAME, \'secret\'))\n+            "Authorization", "Basic {}:{}".format(TEST_USER_NAME, "secret")\n+        )\n \n         # return the id of the root page, the nested page itself, and the\n         # alternate browser\n@@ -141,104 +134,106 @@ def test_delete_wrong_object_by_acquisition_with_action(self):\n         p1_id, page_2, browser_2 = self.prepare_for_acquisition_tests()\n \n         # open two different browsers to the \'delete confirmation\' view\n-        delete_url = page_2.absolute_url() + \'/delete_confirmation\'\n+        delete_url = page_2.absolute_url() + "/delete_confirmation"\n         self.browser.open(delete_url)\n         browser_2.open(delete_url)\n         self.assertTrue(p1_id in self.portal)\n         for browser in [self.browser, browser_2]:\n-            browser.getControl(name=\'form.buttons.Delete\').click()\n+            browser.getControl(name="form.buttons.Delete").click()\n \n         # the nested folder should be gone, but the one at the root should\n         # remain.\n-        self.assertFalse(page_2.id in self.portal[\'f1\'])\n+        self.assertFalse(page_2.id in self.portal["f1"])\n         self.assertTrue(p1_id in self.portal)\n \n     def test_rename_form(self):\n         logout()\n-        folder = self.portal[\'f1\']\n+        folder = self.portal["f1"]\n \n         # We need zope2.CopyOrMove permission to rename content\n-        self.browser.open(folder.absolute_url() + \'/folder_rename\')\n-        self.browser.getControl(name=\'form.widgets.new_id\').value = \'f2\'\n-        self.browser.getControl(name=\'form.widgets.new_title\').value = \'F2\'\n-        self.browser.getControl(name=\'form.buttons.Rename\').click()\n-        self.assertEqual(folder.getId(), \'f2\')\n-        self.assertEqual(folder.Title(), \'F2\')\n+        self.browser.open(folder.absolute_url() + "/folder_rename")\n+        self.browser.getControl(name="form.widgets.new_id").value = "f2"\n+        self.browser.getControl(name="form.widgets.new_title").value = "F2"\n+        self.browser.getControl(name="form.buttons.Rename").click()\n+        self.assertEqual(folder.getId(), "f2")\n+        self.assertEqual(folder.Title(), "F2")\n         self.assertEqual(self.browser.url, folder.absolute_url())\n \n         login(self.portal, TEST_USER_NAME)\n-        self.portal.manage_delObjects(ids=\'f2\')\n+        self.portal.manage_delObjects(ids="f2")\n         transaction.commit()\n \n     def test_rename_form_with_view_action(self):\n         # can\'t be bothered to register blobs, instead we add documents to\n         # typesUseViewActionInListings\n         registry = self.portal.portal_registry\n-        registry[\'plone.types_use_view_action_in_listings\'] = [\'Image\',\n-                                                               \'File\',\n-                                                               \'Document\']\n-\n-        folder = self.portal[\'f1\']\n-        folder.invokeFactory(\'Document\', \'document1\')\n-        document1 = folder[\'document1\']\n+        registry["plone.types_use_view_action_in_listings"] = [\n+            "Image",\n+            "File",\n+            "Document",\n+        ]\n+\n+        folder = self.portal["f1"]\n+        folder.invokeFactory("Document", "document1")\n+        document1 = folder["document1"]\n         transaction.commit()\n         logout()\n \n         # We need zope2.CopyOrMove permission to rename content\n-        self.browser.open(document1.absolute_url() + \'/object_rename\')\n-        self.browser.getControl(name=\'form.widgets.new_id\').value = \'f2\'\n-        self.browser.getControl(name=\'form.widgets.new_title\').value = \'F2\'\n-        self.browser.getControl(name=\'form.buttons.Rename\').click()\n-        self.assertEqual(document1.getId(), \'f2\')\n-        self.assertEqual(document1.Title(), \'F2\')\n-        self.assertEqual(self.browser.url, document1.absolute_url() + \'/view\')\n+        self.browser.open(document1.absolute_url() + "/object_rename")\n+        self.browser.getControl(name="form.widgets.new_id").value = "f2"\n+        self.browser.getControl(name="form.widgets.new_title").value = "F2"\n+        self.browser.getControl(name="form.buttons.Rename").click()\n+        self.assertEqual(document1.getId(), "f2")\n+        self.assertEqual(document1.Title(), "F2")\n+        self.assertEqual(self.browser.url, document1.absolute_url() + "/view")\n \n         login(self.portal, TEST_USER_NAME)\n-        self.portal.manage_delObjects(ids=\'f1\')\n+        self.portal.manage_delObjects(ids="f1")\n         transaction.commit()\n \n     def test_create_safe_id_on_renaming(self):\n         logout()\n-        folder = self.portal[\'f1\']\n+        folder = self.portal["f1"]\n \n         # We need zope2.CopyOrMove permission to rename content\n-        self.browser.open(folder.absolute_url() + \'/folder_rename\')\n-        self.browser.getControl(name=\'form.widgets.new_id\').value = \' ? f4 4 \'\n-        self.browser.getControl(name=\'form.widgets.new_title\').value = \' F2 \'\n-        self.browser.getControl(name=\'form.buttons.Rename\').click()\n-        self.assertEqual(folder.getId(), \'f4-4\')\n-        self.assertEqual(folder.Title(), \'F2\')\n+        self.browser.open(folder.absolute_url() + "/folder_rename")\n+        self.browser.getControl(name="form.widgets.new_id").value = " ? f4 4 "\n+        self.browser.getControl(name="form.widgets.new_title").value = " F2 "\n+        self.browser.getControl(name="form.buttons.Rename").click()\n+        self.assertEqual(folder.getId(), "f4-4")\n+        self.assertEqual(folder.Title(), "F2")\n         self.assertEqual(self.browser.url, folder.absolute_url())\n \n         login(self.portal, TEST_USER_NAME)\n-        self.portal.manage_delObjects(ids=\'f4-4\')\n+        self.portal.manage_delObjects(ids="f4-4")\n         transaction.commit()\n \n     def test_default_page_updated_on_rename(self):\n         login(self.portal, TEST_USER_NAME)\n-        folder = self.portal[\'f1\']\n-        folder.invokeFactory(type_name=\'Document\', id=\'d1\', title=\'A Doc\')\n-        doc = folder[\'d1\']\n-        folder.setDefaultPage(\'d1\')\n+        folder = self.portal["f1"]\n+        folder.invokeFactory(type_name="Document", id="d1", title="A Doc")\n+        doc = folder["d1"]\n+        folder.setDefaultPage("d1")\n         transaction.commit()\n-        self.assertEqual(folder.getDefaultPage(), \'d1\')\n+        self.assertEqual(folder.getDefaultPage(), "d1")\n \n         # We need zope2.CopyOrMove permission to rename content\n-        self.browser.open(doc.absolute_url() + \'/object_rename\')\n-        self.browser.getControl(name=\'form.widgets.new_id\').value = \' ?renamed\'\n-        self.browser.getControl(name=\'form.widgets.new_title\').value = \'Doc\'\n-        self.browser.getControl(name=\'form.buttons.Rename\').click()\n-        self.assertEqual(folder.getFolderContents()[0].id, \'renamed\')\n-        self.assertEqual(folder.getDefaultPage(), \'renamed\')\n+        self.browser.open(doc.absolute_url() + "/object_rename")\n+        self.browser.getControl(name="form.widgets.new_id").value = " ?renamed"\n+        self.browser.getControl(name="form.widgets.new_title").value = "Doc"\n+        self.browser.getControl(name="form.buttons.Rename").click()\n+        self.assertEqual(folder.getFolderContents()[0].id, "renamed")\n+        self.assertEqual(folder.getDefaultPage(), "renamed")\n \n     def test_rename_form_cancel(self):\n-        folder = self.portal[\'f1\']\n+        folder = self.portal["f1"]\n \n         _id = folder.getId()\n         _title = folder.Title()\n \n-        self.browser.open(folder.absolute_url() + \'/folder_rename\')\n-        self.browser.getControl(name=\'form.buttons.Cancel\').click()\n+        self.browser.open(folder.absolute_url() + "/folder_rename")\n+        self.browser.getControl(name="form.buttons.Cancel").click()\n         transaction.commit()\n \n         self.assertEqual(self.browser.url, folder.absolute_url())\n@@ -249,198 +244,220 @@ def test_rename_form_cancel_with_view_action(self):\n         # can\'t be bothered to register blobs, instead we add documents to\n         # typesUseViewActionInListings\n         registry = self.portal.portal_registry\n-        registry[\'plone.types_use_view_action_in_listings\'] = [\'Image\',\n-                                                               \'File\',\n-                                                               \'Document\']\n-        folder = self.portal[\'f1\']\n-        folder.invokeFactory(\'Document\', \'document1\')\n-        document1 = folder[\'document1\']\n+        registry["plone.types_use_view_action_in_listings"] = [\n+            "Image",\n+            "File",\n+            "Document",\n+        ]\n+        folder = self.portal["f1"]\n+        folder.invokeFactory("Document", "document1")\n+        document1 = folder["document1"]\n         transaction.commit()\n \n         _id = document1.getId()\n         _title = document1.Title()\n \n-        self.browser.open(document1.absolute_url() + \'/object_rename\')\n-        self.browser.getControl(name=\'form.buttons.Cancel\').click()\n+        self.browser.open(document1.absolute_url() + "/object_rename")\n+        self.browser.getControl(name="form.buttons.Cancel").click()\n         transaction.commit()\n \n-        self.assertEqual(self.browser.url, document1.absolute_url() + \'/view\')\n+        self.assertEqual(self.browser.url, document1.absolute_url() + "/view")\n         self.assertEqual(document1.getId(), _id)\n         self.assertEqual(document1.Title(), _title)\n \n     def _get_token(self, context):\n-        authenticator = getMultiAdapter(\n-            (context, self.request), name=\'authenticator\')\n+        authenticator = getMultiAdapter((context, self.request), name="authenticator")\n \n         return authenticator.token()\n \n     def test_object_cut_view(self):\n-        folder = self.portal[\'f1\']\n+        folder = self.portal["f1"]\n \n         # We need pass an authenticator token to prevent Unauthorized\n         self.assertRaises(\n-            Unauthorized,\n-            self.browser.open,\n-            f\'{folder.absolute_url():s}/object_cut\'\n+            Unauthorized, self.browser.open, f"{folder.absolute_url():s}/object_cut"\n         )\n \n         # We need to have Copy or Move permission to cut an object\n-        self.browser.open(\'{:s}/object_cut?_authenticator={:s}\'.format(\n-            folder.absolute_url(), self._get_token(folder)))\n+        self.browser.open(\n+            "{:s}/object_cut?_authenticator={:s}".format(\n+                folder.absolute_url(), self._get_token(folder)\n+            )\n+        )\n \n-        self.assertIn(\'__cp\', self.browser.cookies)\n-        self.assertIn(\n-            f\'{folder.Title():s} cut.\', self.browser.contents)\n+        self.assertIn("__cp", self.browser.cookies)\n+        self.assertIn(f"{folder.Title():s} cut.", self.browser.contents)\n \n     def test_object_cut_view_with_view_action(self):\n         # can\'t be bothered to register blobs, instead we add documents to\n         # typesUseViewActionInListings\n         registry = self.portal.portal_registry\n-        registry[\'plone.types_use_view_action_in_listings\'] = [\'Image\',\n-                                                               \'File\',\n-                                                               \'Document\']\n-        folder = self.portal[\'f1\']\n-        folder.invokeFactory(\'Document\', \'document1\')\n-        document1 = folder[\'document1\']\n+        registry["plone.types_use_view_action_in_listings"] = [\n+            "Image",\n+            "File",\n+            "Document",\n+        ]\n+        folder = self.portal["f1"]\n+        folder.invokeFactory("Document", "document1")\n+        document1 = folder["document1"]\n         transaction.commit()\n \n         # We need pass an authenticator token to prevent Unauthorized\n         self.assertRaises(\n-            Unauthorized,\n-            self.browser.open,\n-            f\'{document1.absolute_url():s}/object_cut\'\n+            Unauthorized, self.browser.open, f"{document1.absolute_url():s}/object_cut"\n         )\n \n         # We need to have Copy or Move permission to cut an object\n-        self.browser.open(\'{:s}/object_cut?_authenticator={:s}\'.format(\n-            document1.absolute_url(), self._get_token(document1)))\n+        self.browser.open(\n+            "{:s}/object_cut?_authenticator={:s}".format(\n+                document1.absolute_url(), self._get_token(document1)\n+            )\n+        )\n \n-        self.assertIn(\'__cp\', self.browser.cookies)\n-        self.assertIn(\n-            f\'{document1.Title():s} cut.\', self.browser.contents)\n-        self.assertEqual(document1.absolute_url() + \'/view\', self.browser.url)\n+        self.assertIn("__cp", self.browser.cookies)\n+        self.assertIn(f"{document1.Title():s} cut.", self.browser.contents)\n+        self.assertEqual(document1.absolute_url() + "/view", self.browser.url)\n \n     def test_object_copy_view(self):\n-        folder = self.portal[\'f1\']\n+        folder = self.portal["f1"]\n \n         # We need pass an authenticator token to prevent Unauthorized\n         self.assertRaises(\n-            Unauthorized,\n-            self.browser.open,\n-            f\'{folder.absolute_url():s}/object_copy\'\n+            Unauthorized, self.browser.open, f"{folder.absolute_url():s}/object_copy"\n         )\n \n-        self.browser.open(\'{:s}/object_copy?_authenticator={:s}\'.format(\n-            folder.absolute_url(), self._get_token(folder)))\n+        self.browser.open(\n+            "{:s}/object_copy?_authenticator={:s}".format(\n+                folder.absolute_url(), self._get_token(folder)\n+            )\n+        )\n \n-        self.assertIn(\'__cp\', self.browser.cookies)\n-        self.assertIn(\n-            f\'{folder.Title():s} copied.\', self.browser.contents)\n+        self.assertIn("__cp", self.browser.cookies)\n+        self.assertIn(f"{folder.Title():s} copied.", self.browser.contents)\n \n     def test_object_copy_with_view_action(self):\n         # can\'t be bothered to register blobs, instead we add documents to\n         # typesUseViewActionInListings\n         registry = self.portal.portal_registry\n-        registry[\'plone.types_use_view_action_in_listings\'] = [\'Image\',\n-                                                               \'File\',\n-                                                               \'Document\']\n-\n-        folder = self.portal[\'f1\']\n-        folder.invokeFactory(\'Document\', \'document1\')\n-        document1 = folder[\'document1\']\n+        registry["plone.types_use_view_action_in_listings"] = [\n+            "Image",\n+            "File",\n+            "Document",\n+        ]\n+\n+        folder = self.portal["f1"]\n+        folder.invokeFactory("Document", "document1")\n+        document1 = folder["document1"]\n         transaction.commit()\n \n         # We need pass an authenticator token to prevent Unauthorized\n         self.assertRaises(\n-            Unauthorized,\n-            self.browser.open,\n-            f\'{document1.absolute_url():s}/object_copy\'\n+            Unauthorized, self.browser.open, f"{document1.absolute_url():s}/object_copy"\n         )\n \n-        self.browser.open(\'{:s}/object_copy?_authenticator={:s}\'.format(\n-            document1.absolute_url(), self._get_token(document1)))\n+        self.browser.open(\n+            "{:s}/object_copy?_authenticator={:s}".format(\n+                document1.absolute_url(), self._get_token(document1)\n+            )\n+        )\n \n-        self.assertIn(\'__cp\', self.browser.cookies)\n-        self.assertIn(\n-            f\'{document1.Title():s} copied.\', self.browser.contents)\n-        self.assertEqual(document1.absolute_url() + \'/view\', self.browser.url)\n+        self.assertIn("__cp", self.browser.cookies)\n+        self.assertIn(f"{document1.Title():s} copied.", self.browser.contents)\n+        self.assertEqual(document1.absolute_url() + "/view", self.browser.url)\n \n     def test_object_cut_and_paste(self):\n-        folder = self.portal[\'f1\']\n-        self.portal.invokeFactory(type_name=\'Document\', id=\'d1\', title=\'A Doc\')\n-        doc = self.portal[\'d1\']\n+        folder = self.portal["f1"]\n+        self.portal.invokeFactory(type_name="Document", id="d1", title="A Doc")\n+        doc = self.portal["d1"]\n         transaction.commit()\n \n-        self.browser.open(\'{:s}/object_cut?_authenticator={:s}\'.format(\n-            doc.absolute_url(), self._get_token(doc)))\n+        self.browser.open(\n+            "{:s}/object_cut?_authenticator={:s}".format(\n+                doc.absolute_url(), self._get_token(doc)\n+            )\n+        )\n \n-        self.assertIn(\'__cp\', self.browser.cookies)\n-        self.assertIn(\'d1\', self.portal.objectIds())\n-        self.assertIn(\'f1\', self.portal.objectIds())\n+        self.assertIn("__cp", self.browser.cookies)\n+        self.assertIn("d1", self.portal.objectIds())\n+        self.assertIn("f1", self.portal.objectIds())\n \n         # We need pass an authenticator token to prevent Unauthorized\n         self.assertRaises(\n-            Unauthorized,\n-            self.browser.open,\n-            f\'{folder.absolute_url():s}/object_paste\'\n+            Unauthorized, self.browser.open, f"{folder.absolute_url():s}/object_paste"\n         )\n \n-        self.browser.open(\'{:s}/object_paste?_authenticator={:s}\'.format(\n-            folder.absolute_url(), self._get_token(doc)))\n+        self.browser.open(\n+            "{:s}/object_paste?_authenticator={:s}".format(\n+                folder.absolute_url(), self._get_token(doc)\n+            )\n+        )\n \n-        self.assertIn(\'__cp\', self.browser.cookies)\n+        self.assertIn("__cp", self.browser.cookies)\n         transaction.commit()\n \n-        self.assertNotIn(\'d1\', self.portal.objectIds())\n-        self.assertIn(\'d1\', folder.objectIds())\n-        self.assertIn(\'Item(s) pasted.\', self.browser.contents)\n+        self.assertNotIn("d1", self.portal.objectIds())\n+        self.assertIn("d1", folder.objectIds())\n+        self.assertIn("Item(s) pasted.", self.browser.contents)\n \n     def test_object_copy_and_paste(self):\n-        folder = self.portal[\'f1\']\n-        folder.invokeFactory(type_name=\'Document\', id=\'d1\', title=\'A Doc\')\n-        doc = folder[\'d1\']\n+        folder = self.portal["f1"]\n+        folder.invokeFactory(type_name="Document", id="d1", title="A Doc")\n+        doc = folder["d1"]\n         transaction.commit()\n \n-        self.browser.open(\'{:s}/object_copy?_authenticator={:s}\'.format(\n-            doc.absolute_url(), self._get_token(doc)))\n+        self.browser.open(\n+            "{:s}/object_copy?_authenticator={:s}".format(\n+                doc.absolute_url(), self._get_token(doc)\n+            )\n+        )\n \n-        self.assertIn(\'__cp\', self.browser.cookies)\n+        self.assertIn("__cp", self.browser.cookies)\n \n         # We need pass an authenticator token to prevent Unauthorized\n         self.assertRaises(\n-            Unauthorized,\n-            self.browser.open,\n-            f\'{folder.absolute_url():s}/object_paste\'\n+            Unauthorized, self.browser.open, f"{folder.absolute_url():s}/object_paste"\n         )\n \n-        self.browser.open(\'{:s}/object_paste?_authenticator={:s}\'.format(\n-            folder.absolute_url(), self._get_token(folder)))\n+        self.browser.open(\n+            "{:s}/object_paste?_authenticator={:s}".format(\n+                folder.absolute_url(), self._get_token(folder)\n+            )\n+        )\n         transaction.commit()\n \n-        self.assertIn(\'f1\', self.portal.objectIds())\n-        self.assertIn(\'d1\', folder.objectIds())\n-        self.assertIn(\'copy_of_d1\', folder.objectIds())\n-        self.assertIn(\'Item(s) pasted.\', self.browser.contents)\n+        self.assertIn("f1", self.portal.objectIds())\n+        self.assertIn("d1", folder.objectIds())\n+        self.assertIn("copy_of_d1", folder.objectIds())\n+        self.assertIn("Item(s) pasted.", self.browser.contents)\n \n     def test_object_copy_and_paste_multiple_times(self):\n-        folder = self.portal[\'f1\']\n-        folder.invokeFactory(type_name=\'Document\', id=\'d1\', title=\'A Doc\')\n-        doc = folder[\'d1\']\n+        folder = self.portal["f1"]\n+        folder.invokeFactory(type_name="Document", id="d1", title="A Doc")\n+        doc = folder["d1"]\n         transaction.commit()\n \n-        self.browser.open(\'{:s}/object_copy?_authenticator={:s}\'.format(\n-            doc.absolute_url(), self._get_token(doc)))\n+        self.browser.open(\n+            "{:s}/object_copy?_authenticator={:s}".format(\n+                doc.absolute_url(), self._get_token(doc)\n+            )\n+        )\n \n-        self.assertIn(\'__cp\', self.browser.cookies)\n-        self.browser.open(\'{:s}/object_paste?_authenticator={:s}\'.format(\n-            folder.absolute_url(), self._get_token(folder)))\n-        self.browser.open(\'{:s}/object_paste?_authenticator={:s}\'.format(\n-            folder.absolute_url(), self._get_token(folder)))\n+        self.assertIn("__cp", self.browser.cookies)\n+        self.browser.open(\n+            "{:s}/object_paste?_authenticator={:s}".format(\n+                folder.absolute_url(), self._get_token(folder)\n+            )\n+        )\n+        self.browser.open(\n+            "{:s}/object_paste?_authenticator={:s}".format(\n+                folder.absolute_url(), self._get_token(folder)\n+            )\n+        )\n \n         # Cookie should persist, because you can paste the item multiple times\n-        self.assertIn(\'__cp\', self.browser.cookies)\n-        self.assertIn(\'f1\', self.portal.objectIds())\n-        self.assertIn(\'d1\', folder.objectIds())\n-        self.assertIn(\'copy_of_d1\', folder.objectIds())\n-        self.assertIn(\'copy2_of_d1\', folder.objectIds())\n-        self.assertIn(\'Item(s) pasted.\', self.browser.contents)\n+        self.assertIn("__cp", self.browser.cookies)\n+        self.assertIn("f1", self.portal.objectIds())\n+        self.assertIn("d1", folder.objectIds())\n+        self.assertIn("copy_of_d1", folder.objectIds())\n+        self.assertIn("copy2_of_d1", folder.objectIds())\n+        self.assertIn("Item(s) pasted.", self.browser.contents)\ndiff --git a/plone/app/content/tests/test_adding.py b/plone/app/content/tests/test_adding.py\nindex 4fc904b..079055a 100644\n--- a/plone/app/content/tests/test_adding.py\n+++ b/plone/app/content/tests/test_adding.py\n@@ -1,7 +1,8 @@\n+import unittest\n+\n from Acquisition import aq_get\n-from plone.app.content.testing import PLONE_APP_CONTENT_INTEGRATION_TESTING\n \n-import unittest\n+from plone.app.content.testing import PLONE_APP_CONTENT_INTEGRATION_TESTING\n \n \n class AddingTests(unittest.TestCase):\n@@ -9,16 +10,16 @@ class AddingTests(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n     def test_adding_acquisition(self):\n-        adding = self.portal.unrestrictedTraverse(\'+\')\n+        adding = self.portal.unrestrictedTraverse("+")\n         # Check explicit Acquisition\n-        template = aq_get(adding, \'portal_skins\')\n+        template = aq_get(adding, "portal_skins")\n         self.assertTrue(template)\n         # Check implicit Acquisition, unfortunately the CMF skins machinery\n         # depends on this\n-        template = getattr(adding, \'portal_skins\')\n+        template = getattr(adding, "portal_skins")\n         self.assertTrue(template)\n         # Check traversal\n-        self.assertTrue(self.portal.unrestrictedTraverse(\'+/main_template\'))\n+        self.assertTrue(self.portal.unrestrictedTraverse("+/main_template"))\ndiff --git a/plone/app/content/tests/test_basecontent.py b/plone/app/content/tests/test_basecontent.py\nindex 644cd14..923da8c 100644\n--- a/plone/app/content/tests/test_basecontent.py\n+++ b/plone/app/content/tests/test_basecontent.py\n@@ -1,14 +1,15 @@\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n-from plone.app.content.testing import optionflags\n-from plone.testing import layered\n import doctest\n import unittest\n \n+from plone.testing import layered\n \n-doctests = (\n-    \'basecontent.rst\',\n+from plone.app.content.testing import (\n+    PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING,\n+    optionflags,\n )\n \n+doctests = ("basecontent.rst",)\n+\n \n def test_suite():\n     suite = unittest.TestSuite()\n@@ -16,7 +17,7 @@ def test_suite():\n         layered(\n             doctest.DocFileSuite(\n                 test_file,\n-                package=\'plone.app.content\',\n+                package="plone.app.content",\n                 optionflags=optionflags,\n             ),\n             layer=PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING,\ndiff --git a/plone/app/content/tests/test_content_status_modify.py b/plone/app/content/tests/test_content_status_modify.py\nindex 3f6c428..e195bee 100644\n--- a/plone/app/content/tests/test_content_status_modify.py\n+++ b/plone/app/content/tests/test_content_status_modify.py\n@@ -1,12 +1,10 @@\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n-from plone.app.testing import login\n-from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n+import unittest\n+\n+from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, login, setRoles\n from Products.CMFPlone.utils import isExpired\n from zope.component import getMultiAdapter\n \n-import unittest\n+from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n \n class TestContentStatusModify(unittest.TestCase):\ndiff --git a/plone/app/content/tests/test_contents.py b/plone/app/content/tests/test_contents.py\nindex 7f4457b..6477f0c 100644\n--- a/plone/app/content/tests/test_contents.py\n+++ b/plone/app/content/tests/test_contents.py\n@@ -1,106 +1,104 @@\n-from datetime import datetime\n-from datetime import timedelta\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n-from plone.app.testing import login\n-from plone.app.testing import setRoles\n-from plone.app.testing import SITE_OWNER_NAME\n-from plone.app.testing import SITE_OWNER_PASSWORD\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n+import json\n+import unittest\n+from datetime import datetime, timedelta\n+from unittest import mock\n+\n+import transaction\n+from plone.app.testing import (\n+    SITE_OWNER_NAME,\n+    SITE_OWNER_PASSWORD,\n+    TEST_USER_ID,\n+    TEST_USER_NAME,\n+    login,\n+    setRoles,\n+)\n from plone.dexterity.fti import DexterityFTI\n from plone.protect.authenticator import createToken\n from plone.registry.interfaces import IRegistry\n from plone.testing.zope import Browser\n from plone.uuid.interfaces import IUUID\n-from unittest import mock\n-from zope.component import getMultiAdapter\n-from zope.component import getUtility\n+from zope.component import getMultiAdapter, getUtility\n \n-import json\n-import transaction\n-import unittest\n+from plone.app.content.testing import (\n+    PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING,\n+    PLONE_APP_CONTENT_DX_INTEGRATION_TESTING,\n+)\n \n \n class ContentsCopyTests(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n         # TYPE 1\n-        type1_fti = DexterityFTI(\'type1\')\n-        type1_fti.klass = \'plone.dexterity.content.Container\'\n+        type1_fti = DexterityFTI("type1")\n+        type1_fti.klass = "plone.dexterity.content.Container"\n         type1_fti.filter_content_types = True\n-        type1_fti.allowed_content_types = [\'type1\']\n+        type1_fti.allowed_content_types = ["type1"]\n         type1_fti.behaviors = (\n-            \'Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes\',  # noqa\n-            \'plone.app.dexterity.behaviors.metadata.IBasic\'\n+            "Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes",  # noqa\n+            "plone.app.dexterity.behaviors.metadata.IBasic",\n         )\n-        self.portal.portal_types._setObject(\'type1\', type1_fti)\n+        self.portal.portal_types._setObject("type1", type1_fti)\n         self.type1_fti = type1_fti\n \n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-    @mock.patch(\'plone.app.content.browser.contents.ContentsBaseAction.protect\', lambda x: True)  # noqa\n+    @mock.patch(\n+        "plone.app.content.browser.contents.ContentsBaseAction.protect", lambda x: True\n+    )  # noqa\n     def test_keep_selection_order(self):\n-        """Keep the order of items the same as they were selected.\n-        """\n-        self.portal.invokeFactory(\'type1\', id=\'f1\', title=\'Folder 1\')\n+        """Keep the order of items the same as they were selected."""\n+        self.portal.invokeFactory("type1", id="f1", title="Folder 1")\n         f1 = self.portal.f1\n-        f1.invokeFactory(\'type1\', id=\'it1\', title=\'Item 1\')\n-        f1.invokeFactory(\'type1\', id=\'it2\', title=\'Item 2\')\n-        f1.invokeFactory(\'type1\', id=\'it3\', title=\'Item 3\')\n+        f1.invokeFactory("type1", id="it1", title="Item 1")\n+        f1.invokeFactory("type1", id="it2", title="Item 2")\n+        f1.invokeFactory("type1", id="it3", title="Item 3")\n \n         def _test_order(sel):\n-            self.request.form[\'selection\'] = json.dumps([\n-                IUUID(f1[id_])\n-                for id_\n-                in sel\n-            ])\n-            view = f1.restrictedTraverse(\'@@fc-copy\')\n+            self.request.form["selection"] = json.dumps([IUUID(f1[id_]) for id_ in sel])\n+            view = f1.restrictedTraverse("@@fc-copy")\n             view()\n-            self.assertEqual(\n-                [ob.id for ob in view.oblist],\n-                sel\n-            )\n+            self.assertEqual([ob.id for ob in view.oblist], sel)\n \n-        _test_order([\'it1\', \'it2\', \'it3\'])\n-        _test_order([\'it3\', \'it1\', \'it2\'])\n+        _test_order(["it1", "it2", "it3"])\n+        _test_order(["it3", "it1", "it2"])\n \n \n class ContentsDeleteTests(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n         # TYPE 1\n-        type1_fti = DexterityFTI(\'type1\')\n-        type1_fti.klass = \'plone.dexterity.content.Container\'\n+        type1_fti = DexterityFTI("type1")\n+        type1_fti.klass = "plone.dexterity.content.Container"\n         type1_fti.filter_content_types = True\n-        type1_fti.allowed_content_types = [\'type1\']\n+        type1_fti.allowed_content_types = ["type1"]\n         type1_fti.behaviors = (\n-            \'Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes\',  # noqa\n-            \'plone.app.dexterity.behaviors.metadata.IBasic\'\n+            "Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes",  # noqa\n+            "plone.app.dexterity.behaviors.metadata.IBasic",\n         )\n-        self.portal.portal_types._setObject(\'type1\', type1_fti)\n+        self.portal.portal_types._setObject("type1", type1_fti)\n         self.type1_fti = type1_fti\n \n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-    @mock.patch(\'plone.app.content.browser.contents.ContentsBaseAction.protect\', lambda x: True)  # noqa\n+    @mock.patch(\n+        "plone.app.content.browser.contents.ContentsBaseAction.protect", lambda x: True\n+    )  # noqa\n     def test_delete_success_with_private_anchestor(self):\n-        """Delete content item from a folder with private anchestor\n-        """\n+        """Delete content item from a folder with private anchestor"""\n         # Create test content /it1/it2/it3\n-        self.portal.invokeFactory(\'type1\', id=\'it1\', title=\'Item 1\')\n-        self.portal.it1.invokeFactory(\'type1\', id=\'it2\', title=\'Item 2\')\n-        self.portal.it1.it2.invokeFactory(\'type1\', id=\'it3\', title=\'Item 3\')\n+        self.portal.invokeFactory("type1", id="it1", title="Item 1")\n+        self.portal.it1.invokeFactory("type1", id="it2", title="Item 2")\n+        self.portal.it1.it2.invokeFactory("type1", id="it3", title="Item 3")\n         self.assertEqual(len(self.portal.it1.it2.contentIds()), 1)\n \n         # Block user access to it1m but leave access to its children\n@@ -114,22 +112,23 @@ def test_delete_success_with_private_anchestor(self):\n \n         # Execute delete request\n         selection = [self.portal.it1.it2.it3.UID()]\n-        self.request.form[\'folder\'] = \'/it1/it2\'\n-        self.request.form[\'selection\'] = json.dumps(selection)\n-        res = self.portal.it1.it2.restrictedTraverse(\'@@fc-delete\')()\n+        self.request.form["folder"] = "/it1/it2"\n+        self.request.form["selection"] = json.dumps(selection)\n+        res = self.portal.it1.it2.restrictedTraverse("@@fc-delete")()\n \n         # Check for successful deletion\n         res = json.loads(res)\n-        self.assertEqual(res[\'status\'], \'success\')\n+        self.assertEqual(res["status"], "success")\n         self.assertEqual(len(self.portal.it1.it2.contentIds()), 0)\n \n-    @mock.patch(\'plone.app.content.browser.contents.ContentsBaseAction.protect\', lambda x: True)  # noqa\n+    @mock.patch(\n+        "plone.app.content.browser.contents.ContentsBaseAction.protect", lambda x: True\n+    )  # noqa\n     def test_delete_success_on_inactive_content(self):\n-        """Delete an expired content item from a folder.\n-        """\n+        """Delete an expired content item from a folder."""\n         # Create content\n-        self.portal.invokeFactory(\'type1\', id=\'it1\', title=\'Item 1\')\n-        self.portal.it1.invokeFactory(\'type1\', id=\'it2\', title=\'Item 2\')\n+        self.portal.invokeFactory("type1", id="it1", title="Item 1")\n+        self.portal.it1.invokeFactory("type1", id="it2", title="Item 2")\n \n         # Expire it2\n         exp = datetime.now() - timedelta(days=10)\n@@ -142,13 +141,13 @@ def test_delete_success_on_inactive_content(self):\n \n         # Execute delete request\n         selection = [self.portal.it1.it2.UID()]\n-        self.request.form[\'folder\'] = \'/it1\'\n-        self.request.form[\'selection\'] = json.dumps(selection)\n-        res = self.portal.it1.restrictedTraverse(\'@@fc-delete\')()\n+        self.request.form["folder"] = "/it1"\n+        self.request.form["selection"] = json.dumps(selection)\n+        res = self.portal.it1.restrictedTraverse("@@fc-delete")()\n \n         # Check for successful deletion\n         res = json.loads(res)\n-        self.assertEqual(res[\'status\'], \'success\')\n+        self.assertEqual(res["status"], "success")\n         self.assertEqual(len(self.portal.it1.contentIds()), 0)\n \n \n@@ -156,76 +155,81 @@ class ContentsPasteTests(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n         # TYPE 1\n-        type1_fti = DexterityFTI(\'type1\')\n-        type1_fti.klass = \'plone.dexterity.content.Container\'\n+        type1_fti = DexterityFTI("type1")\n+        type1_fti.klass = "plone.dexterity.content.Container"\n         type1_fti.filter_content_types = True\n-        type1_fti.allowed_content_types = [\'type1\']\n+        type1_fti.allowed_content_types = ["type1"]\n         type1_fti.behaviors = (\n-            \'Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes\',  # noqa\n-            \'plone.app.dexterity.behaviors.metadata.IBasic\'\n+            "Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes",  # noqa\n+            "plone.app.dexterity.behaviors.metadata.IBasic",\n         )\n-        self.portal.portal_types._setObject(\'type1\', type1_fti)\n+        self.portal.portal_types._setObject("type1", type1_fti)\n         self.type1_fti = type1_fti\n \n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        self.portal.invokeFactory(\'type1\', id=\'it1\', title=\'Item 1\')\n+        self.portal.invokeFactory("type1", id="it1", title="Item 1")\n \n-    @mock.patch(\'plone.app.content.browser.contents.ContentsBaseAction.protect\', lambda x: True)  # noqa\n+    @mock.patch(\n+        "plone.app.content.browser.contents.ContentsBaseAction.protect", lambda x: True\n+    )  # noqa\n     def test_paste_success(self):\n-        """Copy content item and paste in portal root.\n-        """\n+        """Copy content item and paste in portal root."""\n         # # setup copying via @@fc-copy\n         # from plone.uuid.interfaces import IUUID\n         # self.request[\'selection\'] = [IUUID(self.portal.it1)]\n         # self.portal.restrictedTraverse(\'@@fc-copy\')()\n \n-        self.request[\'__cp\'] = self.portal.manage_copyObjects([\'it1\'])\n-        self.request.form[\'folder\'] = \'/\'\n-        res = self.portal.restrictedTraverse(\'@@fc-paste\')()\n+        self.request["__cp"] = self.portal.manage_copyObjects(["it1"])\n+        self.request.form["folder"] = "/"\n+        res = self.portal.restrictedTraverse("@@fc-paste")()\n \n         res = json.loads(res)\n-        self.assertEqual(res[\'status\'], \'success\')\n+        self.assertEqual(res["status"], "success")\n         self.assertEqual(len(self.portal.contentIds()), 2)\n \n-    @mock.patch(\'plone.app.content.browser.contents.ContentsBaseAction.protect\', lambda x: True)  # noqa\n+    @mock.patch(\n+        "plone.app.content.browser.contents.ContentsBaseAction.protect", lambda x: True\n+    )  # noqa\n     def test_paste_success_paste_in_itself(self):\n-        """Copy content item and paste in itself. Because we can.\n-        """\n-        self.request[\'__cp\'] = self.portal.manage_copyObjects([\'it1\'])\n-        self.request.form[\'folder\'] = \'/it1\'\n-        res = self.portal.it1.restrictedTraverse(\'@@fc-paste\')()\n+        """Copy content item and paste in itself. Because we can."""\n+        self.request["__cp"] = self.portal.manage_copyObjects(["it1"])\n+        self.request.form["folder"] = "/it1"\n+        res = self.portal.it1.restrictedTraverse("@@fc-paste")()\n \n         res = json.loads(res)\n-        self.assertEqual(res[\'status\'], \'success\')\n+        self.assertEqual(res["status"], "success")\n         self.assertEqual(len(self.portal.it1.contentIds()), 1)\n \n-    @mock.patch(\'plone.app.content.browser.contents.ContentsBaseAction.protect\', lambda x: True)  # noqa\n+    @mock.patch(\n+        "plone.app.content.browser.contents.ContentsBaseAction.protect", lambda x: True\n+    )  # noqa\n     def test_paste_fail_constraint(self):\n         """Fail pasting content item in itself when folder constraints don\'t\n         allow to.\n         """\n         self.type1_fti.allowed_content_types = []  # set folder constraints\n-        self.request[\'__cp\'] = self.portal.manage_copyObjects([\'it1\'])\n-        self.request.form[\'folder\'] = \'/it1\'\n-        res = self.portal.it1.restrictedTraverse(\'@@fc-paste\')()\n+        self.request["__cp"] = self.portal.manage_copyObjects(["it1"])\n+        self.request.form["folder"] = "/it1"\n+        res = self.portal.it1.restrictedTraverse("@@fc-paste")()\n \n         res = json.loads(res)\n-        self.assertEqual(res[\'status\'], \'warning\')\n+        self.assertEqual(res["status"], "warning")\n         self.assertEqual(len(self.portal.it1.contentIds()), 0)\n \n-    @mock.patch(\'plone.app.content.browser.contents.ContentsBaseAction.protect\', lambda x: True)  # noqa\n+    @mock.patch(\n+        "plone.app.content.browser.contents.ContentsBaseAction.protect", lambda x: True\n+    )  # noqa\n     def test_paste_success_with_private_anchestor(self):\n-        """Copy content item and paste into a folder with private anchestor\n-        """\n+        """Copy content item and paste into a folder with private anchestor"""\n         # Create test content /it2/it3\n-        self.portal.invokeFactory(\'type1\', id=\'it2\', title=\'Item 2\')\n-        self.portal.it2.invokeFactory(\'type1\', id=\'it3\', title=\'Item 3\')\n+        self.portal.invokeFactory("type1", id="it2", title="Item 2")\n+        self.portal.it2.invokeFactory("type1", id="it3", title="Item 3")\n         self.assertEqual(len(self.portal.it2.it3.contentIds()), 0)\n \n         # Block user access to it2, but leave access to its children\n@@ -238,13 +242,13 @@ def test_paste_success_with_private_anchestor(self):\n         setRoles(self.portal, TEST_USER_ID, [])\n \n         # Execute paste\n-        self.request[\'__cp\'] = self.portal.manage_copyObjects([\'it1\'])\n-        self.request.form[\'folder\'] = \'/it2/it3\'\n-        res = self.portal.it2.it3.restrictedTraverse(\'@@fc-paste\')()\n+        self.request["__cp"] = self.portal.manage_copyObjects(["it1"])\n+        self.request.form["folder"] = "/it2/it3"\n+        res = self.portal.it2.it3.restrictedTraverse("@@fc-paste")()\n \n         # Check for successful paste\n         res = json.loads(res)\n-        self.assertEqual(res[\'status\'], \'success\')\n+        self.assertEqual(res["status"], "success")\n         self.assertEqual(len(self.portal.it2.it3.contentIds()), 1)\n \n \n@@ -252,32 +256,33 @@ class ContentsRenameTests(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n         # TYPE 1\n-        type1_fti = DexterityFTI(\'type1\')\n-        type1_fti.klass = \'plone.dexterity.content.Container\'\n+        type1_fti = DexterityFTI("type1")\n+        type1_fti.klass = "plone.dexterity.content.Container"\n         type1_fti.filter_content_types = True\n-        type1_fti.allowed_content_types = [\'type1\']\n+        type1_fti.allowed_content_types = ["type1"]\n         type1_fti.behaviors = (\n-            \'Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes\',  # noqa\n-            \'plone.app.dexterity.behaviors.metadata.IBasic\'\n+            "Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes",  # noqa\n+            "plone.app.dexterity.behaviors.metadata.IBasic",\n         )\n-        self.portal.portal_types._setObject(\'type1\', type1_fti)\n+        self.portal.portal_types._setObject("type1", type1_fti)\n         self.type1_fti = type1_fti\n \n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-    @mock.patch(\'plone.app.content.browser.contents.ContentsBaseAction.protect\', lambda x: True)  # noqa\n+    @mock.patch(\n+        "plone.app.content.browser.contents.ContentsBaseAction.protect", lambda x: True\n+    )  # noqa\n     def test_rename_success_with_private_anchestor(self):\n-        """Rename content item from a folder with private anchestor\n-        """\n+        """Rename content item from a folder with private anchestor"""\n         # Create test content /it1/it2/it3\n-        self.portal.invokeFactory(\'type1\', id=\'it1\', title=\'Item 1\')\n-        self.portal.it1.invokeFactory(\'type1\', id=\'it2\', title=\'Item 2\')\n-        self.portal.it1.it2.invokeFactory(\'type1\', id=\'it3\', title=\'Item 3\')\n+        self.portal.invokeFactory("type1", id="it1", title="Item 1")\n+        self.portal.it1.invokeFactory("type1", id="it2", title="Item 2")\n+        self.portal.it1.it2.invokeFactory("type1", id="it3", title="Item 3")\n         self.assertEqual(len(self.portal.it1.it2.contentIds()), 1)\n \n         # Block user access to it1m but leave access to its children\n@@ -290,24 +295,25 @@ def test_rename_success_with_private_anchestor(self):\n         setRoles(self.portal, TEST_USER_ID, [])\n \n         # Execute rename request\n-        self.request.form[\'UID_1\'] = self.portal.it1.it2.it3.UID()\n-        self.request.form[\'newid_1\'] = \'it3bak\'\n-        self.request.form[\'newtitle_1\'] = \'Item 3 BAK\'\n-        res = self.portal.it1.it2.restrictedTraverse(\'@@fc-rename\')()\n+        self.request.form["UID_1"] = self.portal.it1.it2.it3.UID()\n+        self.request.form["newid_1"] = "it3bak"\n+        self.request.form["newtitle_1"] = "Item 3 BAK"\n+        res = self.portal.it1.it2.restrictedTraverse("@@fc-rename")()\n \n         # Check for successful deletion\n         res = json.loads(res)\n-        self.assertEqual(res[\'status\'], \'success\')\n-        self.assertEqual(self.portal.it1.it2.it3bak.id, \'it3bak\')\n-        self.assertEqual(self.portal.it1.it2.it3bak.title, \'Item 3 BAK\')\n+        self.assertEqual(res["status"], "success")\n+        self.assertEqual(self.portal.it1.it2.it3bak.id, "it3bak")\n+        self.assertEqual(self.portal.it1.it2.it3bak.title, "Item 3 BAK")\n \n-    @mock.patch(\'plone.app.content.browser.contents.ContentsBaseAction.protect\', lambda x: True)  # noqa\n+    @mock.patch(\n+        "plone.app.content.browser.contents.ContentsBaseAction.protect", lambda x: True\n+    )  # noqa\n     def test_rename_success_on_inactive_content(self):\n-        """Rename an expired content item from a folder.\n-        """\n+        """Rename an expired content item from a folder."""\n         # Create content\n-        self.portal.invokeFactory(\'type1\', id=\'it1\', title=\'Item 1\')\n-        self.portal.it1.invokeFactory(\'type1\', id=\'it2\', title=\'Item 2\')\n+        self.portal.invokeFactory("type1", id="it1", title="Item 1")\n+        self.portal.it1.invokeFactory("type1", id="it2", title="Item 2")\n \n         # Expire it2\n         exp = datetime.now() - timedelta(days=10)\n@@ -319,52 +325,48 @@ def test_rename_success_on_inactive_content(self):\n         setRoles(self.portal, TEST_USER_ID, [])\n \n         # Execute rename request\n-        self.request.form[\'UID_1\'] = self.portal.it1.it2.UID()\n-        self.request.form[\'newid_1\'] = \'it2bak\'\n-        self.request.form[\'newtitle_1\'] = \'Item 2 BAK\'\n-        res = self.portal.it1.restrictedTraverse(\'@@fc-rename\')()\n+        self.request.form["UID_1"] = self.portal.it1.it2.UID()\n+        self.request.form["newid_1"] = "it2bak"\n+        self.request.form["newtitle_1"] = "Item 2 BAK"\n+        res = self.portal.it1.restrictedTraverse("@@fc-rename")()\n \n         # Check for successful deletion\n         res = json.loads(res)\n-        self.assertEqual(res[\'status\'], \'success\')\n-        self.assertEqual(self.portal.it1.it2bak.id, \'it2bak\')\n-        self.assertEqual(self.portal.it1.it2bak.title, \'Item 2 BAK\')\n+        self.assertEqual(res["status"], "success")\n+        self.assertEqual(self.portal.it1.it2bak.id, "it2bak")\n+        self.assertEqual(self.portal.it1.it2bak.title, "Item 2 BAK")\n \n \n class AllowUploadViewTests(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n         # TYPE 1\n-        type1_fti = DexterityFTI(\'type1\')\n-        type1_fti.klass = \'plone.dexterity.content.Container\'\n+        type1_fti = DexterityFTI("type1")\n+        type1_fti.klass = "plone.dexterity.content.Container"\n         type1_fti.filter_content_types = True\n         type1_fti.allowed_content_types = []\n-        type1_fti.behaviors = (\n-            \'plone.app.dexterity.behaviors.metadata.IBasic\',\n-        )\n-        self.portal.portal_types._setObject(\'type1\', type1_fti)\n+        type1_fti.behaviors = ("plone.app.dexterity.behaviors.metadata.IBasic",)\n+        self.portal.portal_types._setObject("type1", type1_fti)\n         self.type1_fti = type1_fti\n \n         # TYPE 2\n-        type2_fti = DexterityFTI(\'type1\')\n-        type2_fti.klass = \'plone.dexterity.content.Item\'\n+        type2_fti = DexterityFTI("type1")\n+        type2_fti.klass = "plone.dexterity.content.Item"\n         type2_fti.filter_content_types = True\n         type2_fti.allowed_content_types = []\n-        type2_fti.behaviors = (\n-            \'plone.app.dexterity.behaviors.metadata.IBasic\',\n-        )\n-        self.portal.portal_types._setObject(\'type2\', type2_fti)\n+        type2_fti.behaviors = ("plone.app.dexterity.behaviors.metadata.IBasic",)\n+        self.portal.portal_types._setObject("type2", type2_fti)\n         self.type2_fti = type2_fti\n \n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        self.portal.invokeFactory(\'type1\', id=\'it1\', title=\'Item 1\')\n-        self.portal.invokeFactory(\'type2\', id=\'it2\', title=\'Item 2\')\n+        self.portal.invokeFactory("type1", id="it1", title="Item 1")\n+        self.portal.invokeFactory("type2", id="it2", title="Item 2")\n \n     def test_allow_upload(self):\n         """Test, if file or images are allowed in a container in different FTI\n@@ -372,87 +374,87 @@ def test_allow_upload(self):\n         """\n \n         # Test non-container, none allowed\n-        allow_upload = self.portal.it2.restrictedTraverse(\'@@allow_upload\')\n+        allow_upload = self.portal.it2.restrictedTraverse("@@allow_upload")\n         allow_upload = json.loads(allow_upload())\n \n-        self.assertEqual(allow_upload[\'allowUpload\'], False)\n-        self.assertEqual(allow_upload[\'allowImages\'], False)\n-        self.assertEqual(allow_upload[\'allowFiles\'], False)\n+        self.assertEqual(allow_upload["allowUpload"], False)\n+        self.assertEqual(allow_upload["allowImages"], False)\n+        self.assertEqual(allow_upload["allowFiles"], False)\n \n         # Test none allowed\n         self.type1_fti.allowed_content_types = []\n-        allow_upload = self.portal.it1.restrictedTraverse(\'@@allow_upload\')\n+        allow_upload = self.portal.it1.restrictedTraverse("@@allow_upload")\n         allow_upload = json.loads(allow_upload())\n \n-        self.assertEqual(allow_upload[\'allowUpload\'], False)\n-        self.assertEqual(allow_upload[\'allowImages\'], False)\n-        self.assertEqual(allow_upload[\'allowFiles\'], False)\n+        self.assertEqual(allow_upload["allowUpload"], False)\n+        self.assertEqual(allow_upload["allowImages"], False)\n+        self.assertEqual(allow_upload["allowFiles"], False)\n \n         # Test images allowed\n-        self.type1_fti.allowed_content_types = [\'Image\']\n-        allow_upload = self.portal.it1.restrictedTraverse(\'@@allow_upload\')\n+        self.type1_fti.allowed_content_types = ["Image"]\n+        allow_upload = self.portal.it1.restrictedTraverse("@@allow_upload")\n         allow_upload = json.loads(allow_upload())\n \n-        self.assertEqual(allow_upload[\'allowUpload\'], True)\n-        self.assertEqual(allow_upload[\'allowImages\'], True)\n-        self.assertEqual(allow_upload[\'allowFiles\'], False)\n+        self.assertEqual(allow_upload["allowUpload"], True)\n+        self.assertEqual(allow_upload["allowImages"], True)\n+        self.assertEqual(allow_upload["allowFiles"], False)\n \n         # Test files allowed\n-        self.type1_fti.allowed_content_types = [\'File\']\n-        allow_upload = self.portal.it1.restrictedTraverse(\'@@allow_upload\')\n+        self.type1_fti.allowed_content_types = ["File"]\n+        allow_upload = self.portal.it1.restrictedTraverse("@@allow_upload")\n         allow_upload = json.loads(allow_upload())\n \n-        self.assertEqual(allow_upload[\'allowUpload\'], True)\n-        self.assertEqual(allow_upload[\'allowImages\'], False)\n-        self.assertEqual(allow_upload[\'allowFiles\'], True)\n+        self.assertEqual(allow_upload["allowUpload"], True)\n+        self.assertEqual(allow_upload["allowImages"], False)\n+        self.assertEqual(allow_upload["allowFiles"], True)\n \n         # Test images and files allowed\n-        self.type1_fti.allowed_content_types = [\'Image\', \'File\']\n-        allow_upload = self.portal.it1.restrictedTraverse(\'@@allow_upload\')\n+        self.type1_fti.allowed_content_types = ["Image", "File"]\n+        allow_upload = self.portal.it1.restrictedTraverse("@@allow_upload")\n         allow_upload = json.loads(allow_upload())\n \n-        self.assertEqual(allow_upload[\'allowUpload\'], True)\n-        self.assertEqual(allow_upload[\'allowImages\'], True)\n-        self.assertEqual(allow_upload[\'allowFiles\'], True)\n+        self.assertEqual(allow_upload["allowUpload"], True)\n+        self.assertEqual(allow_upload["allowImages"], True)\n+        self.assertEqual(allow_upload["allowFiles"], True)\n \n         # Test files allowed, path via request variable\n-        self.type1_fti.allowed_content_types = [\'File\']\n+        self.type1_fti.allowed_content_types = ["File"]\n         # First, test on Portal root to see the difference\n-        allow_upload = self.portal.restrictedTraverse(\'@@allow_upload\')\n+        allow_upload = self.portal.restrictedTraverse("@@allow_upload")\n         allow_upload = json.loads(allow_upload())\n-        self.assertEqual(allow_upload[\'allowUpload\'], True)\n-        self.assertEqual(allow_upload[\'allowImages\'], True)\n-        self.assertEqual(allow_upload[\'allowFiles\'], True)\n+        self.assertEqual(allow_upload["allowUpload"], True)\n+        self.assertEqual(allow_upload["allowImages"], True)\n+        self.assertEqual(allow_upload["allowFiles"], True)\n         # Then, with path set to sub item\n-        allow_upload = self.portal.restrictedTraverse(\'@@allow_upload\')\n-        allow_upload.request.form[\'path\'] = \'/plone/it1\'\n+        allow_upload = self.portal.restrictedTraverse("@@allow_upload")\n+        allow_upload.request.form["path"] = "/plone/it1"\n         allow_upload = json.loads(allow_upload())\n-        self.assertEqual(allow_upload[\'allowUpload\'], True)\n-        self.assertEqual(allow_upload[\'allowImages\'], False)\n-        self.assertEqual(allow_upload[\'allowFiles\'], True)\n+        self.assertEqual(allow_upload["allowUpload"], True)\n+        self.assertEqual(allow_upload["allowImages"], False)\n+        self.assertEqual(allow_upload["allowFiles"], True)\n \n \n class FCPropertiesTests(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         # Disable plone.protect for these tests\n-        self.request.environ[\'REQUEST_METHOD\'] = \'POST\'\n-        self.request.form[\'_authenticator\'] = createToken()\n+        self.request.environ["REQUEST_METHOD"] = "POST"\n+        self.request.form["_authenticator"] = createToken()\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         # set available languages\n         registry = getUtility(IRegistry)\n-        registry[\'plone.available_languages\'] = [\'en\', \'de\']\n+        registry["plone.available_languages"] = ["en", "de"]\n \n-        self.portal.invokeFactory(\'Folder\', \'main1\')\n-        self.portal.main1.invokeFactory(\'Folder\', \'sub1\')\n-        self.portal.main1.sub1.invokeFactory(\'Folder\', \'subsub1\')\n-        self.portal.main1.invokeFactory(\'Document\', \'sub2\')\n-        self.portal.invokeFactory(\'Document\', \'main2\')\n+        self.portal.invokeFactory("Folder", "main1")\n+        self.portal.main1.invokeFactory("Folder", "sub1")\n+        self.portal.main1.sub1.invokeFactory("Folder", "subsub1")\n+        self.portal.main1.invokeFactory("Document", "sub2")\n+        self.portal.invokeFactory("Document", "main2")\n \n         self.setup_initial()\n \n@@ -464,33 +466,31 @@ def setup_initial(self):\n         self.portal.main1.sub2.exclude_from_nav = True\n         self.portal.main2.exclude_from_nav = True\n \n-        self.portal.main1.language = \'en\'\n-        self.portal.main1.sub1.language = \'en\'\n-        self.portal.main1.sub1.subsub1.language = \'en\'\n-        self.portal.main1.sub2.language = \'en\'\n-        self.portal.main2.language = \'en\'\n+        self.portal.main1.language = "en"\n+        self.portal.main1.sub1.language = "en"\n+        self.portal.main1.sub1.subsub1.language = "en"\n+        self.portal.main1.sub2.language = "en"\n+        self.portal.main2.language = "en"\n \n     def test_fc_properties__changes__no_recurse(self):\n-        """Test changing properties without recursion.\n-        """\n+        """Test changing properties without recursion."""\n         req = self.request\n-        req.form[\'language\'] = \'de\'\n-        req.form[\'exclude-from-nav\'] = \'no\'\n-        req.form[\'selection\'] = \'["{}", "{}"]\'.format(\n-            IUUID(self.portal.main1),\n-            IUUID(self.portal.main2)\n+        req.form["language"] = "de"\n+        req.form["exclude-from-nav"] = "no"\n+        req.form["selection"] = \'["{}", "{}"]\'.format(\n+            IUUID(self.portal.main1), IUUID(self.portal.main2)\n         )\n \n-        view = getMultiAdapter((self.portal, req), name=\'fc-properties\')\n+        view = getMultiAdapter((self.portal, req), name="fc-properties")\n \n         # Call the view and execute the actions\n         view()\n \n-        self.assertEqual(self.portal.main1.language, \'de\')\n-        self.assertEqual(self.portal.main2.language, \'de\')\n-        self.assertEqual(self.portal.main1.sub1.language, \'en\')\n-        self.assertEqual(self.portal.main1.sub1.subsub1.language, \'en\')\n-        self.assertEqual(self.portal.main1.sub2.language, \'en\')\n+        self.assertEqual(self.portal.main1.language, "de")\n+        self.assertEqual(self.portal.main2.language, "de")\n+        self.assertEqual(self.portal.main1.sub1.language, "en")\n+        self.assertEqual(self.portal.main1.sub1.subsub1.language, "en")\n+        self.assertEqual(self.portal.main1.sub2.language, "en")\n \n         self.assertEqual(self.portal.main1.exclude_from_nav, False)\n         self.assertEqual(self.portal.main2.exclude_from_nav, False)\n@@ -499,27 +499,25 @@ def test_fc_properties__changes__no_recurse(self):\n         self.assertEqual(self.portal.main1.sub2.exclude_from_nav, True)\n \n     def test_fc_properties__changes__with_recurse(self):\n-        """Test changing properties without recursion.\n-        """\n+        """Test changing properties without recursion."""\n         req = self.request\n-        req.form[\'language\'] = \'de\'\n-        req.form[\'exclude-from-nav\'] = \'no\'\n-        req.form[\'recurse\'] = \'yes\'\n-        req.form[\'selection\'] = \'["{}", "{}"]\'.format(\n-            IUUID(self.portal.main1),\n-            IUUID(self.portal.main2)\n+        req.form["language"] = "de"\n+        req.form["exclude-from-nav"] = "no"\n+        req.form["recurse"] = "yes"\n+        req.form["selection"] = \'["{}", "{}"]\'.format(\n+            IUUID(self.portal.main1), IUUID(self.portal.main2)\n         )\n \n-        view = getMultiAdapter((self.portal, req), name=\'fc-properties\')\n+        view = getMultiAdapter((self.portal, req), name="fc-properties")\n \n         # Call the view and execute the actions\n         view()\n \n-        self.assertEqual(self.portal.main1.language, \'de\')\n-        self.assertEqual(self.portal.main2.language, \'de\')\n-        self.assertEqual(self.portal.main1.sub1.language, \'de\')\n-        self.assertEqual(self.portal.main1.sub1.subsub1.language, \'de\')\n-        self.assertEqual(self.portal.main1.sub2.language, \'de\')\n+        self.assertEqual(self.portal.main1.language, "de")\n+        self.assertEqual(self.portal.main2.language, "de")\n+        self.assertEqual(self.portal.main1.sub1.language, "de")\n+        self.assertEqual(self.portal.main1.sub1.subsub1.language, "de")\n+        self.assertEqual(self.portal.main1.sub2.language, "de")\n \n         self.assertEqual(self.portal.main1.exclude_from_nav, False)\n         self.assertEqual(self.portal.main2.exclude_from_nav, False)\n@@ -547,12 +545,13 @@ class TestSafeHtmlInFolderContents(unittest.TestCase):\n     Same for other fields, from PloneHotfix20210518, see\n     https://plone.org/security/hotfix/20210518/stored-xss-in-folder-contents\n     """\n+\n     layer = PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def get_browser(self):\n         browser = Browser(self.layer["app"])\n@@ -657,6 +656,6 @@ def assert_not_in(self, target, body):\n         index = body.index(target)\n         start = max(0, index - 50)\n         end = min(index + len(target) + 50, len(body))\n-        assert False, "Text \'{0}\' unexpectedly found in body: ... {1} ...".format(\n+        assert False, "Text \'{}\' unexpectedly found in body: ... {} ...".format(\n             target, body[start:end]\n         )\ndiff --git a/plone/app/content/tests/test_folder.py b/plone/app/content/tests/test_folder.py\nindex da4d98b..eb37148 100644\n--- a/plone/app/content/tests/test_folder.py\n+++ b/plone/app/content/tests/test_folder.py\n@@ -1,53 +1,51 @@\n+import json\n+import unittest\n+from urllib.parse import urlparse\n+\n from DateTime import DateTime\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n-from plone.app.testing import login\n-from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, login, setRoles\n from plone.dexterity.fti import DexterityFTI\n from plone.locking.interfaces import IRefreshableLockable\n from plone.protect.authenticator import createToken\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.utils import getToolByName\n-from urllib.parse import urlparse\n from Testing.makerequest import makerequest\n from transaction import commit\n from zope.annotation.interfaces import IAttributeAnnotatable\n from zope.interface import alsoProvides\n from zope.publisher.browser import TestRequest\n \n-import json\n-import unittest\n+from plone.app.content.testing import (\n+    PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING,\n+    PLONE_APP_CONTENT_DX_INTEGRATION_TESTING,\n+)\n \n \n class BaseTest(unittest.TestCase):\n-\n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        self.portal.invokeFactory(\'Document\', id="page", title="page")\n+        self.portal.invokeFactory("Document", id="page", title="page")\n         self.portal.page.reindexObject()\n \n         self.request = TestRequest(\n-            environ={\n-                \'HTTP_ACCEPT_LANGUAGE\': \'en\',\n-                \'REQUEST_METHOD\': \'POST\'\n-            },\n+            environ={"HTTP_ACCEPT_LANGUAGE": "en", "REQUEST_METHOD": "POST"},\n             form={\n-                \'selection\': \'["\' + IUUID(self.portal.page) + \'"]\',\n-                \'_authenticator\': createToken(),\n-                \'folder\': \'/\'\n-            }\n+                "selection": \'["\' + IUUID(self.portal.page) + \'"]\',\n+                "_authenticator": createToken(),\n+                "folder": "/",\n+            },\n         )\n-        self.request.REQUEST_METHOD = \'POST\'\n+        self.request.REQUEST_METHOD = "POST"\n         # Mock physicalPathFromURL\n         # NOTE: won\'t return the right path in virtual hosting environments\n-        self.request.physicalPathFromURL = lambda url: urlparse(url).path.split(\'/\')  # noqa\n+        self.request.physicalPathFromURL = lambda url: urlparse(url).path.split(\n+            "/"\n+        )  # noqa\n         alsoProvides(self.request, IAttributeAnnotatable)\n-        self.userList = \'one,two\'\n+        self.userList = "one,two"\n \n \n class DXBaseTest(BaseTest):\n@@ -55,62 +53,74 @@ class DXBaseTest(BaseTest):\n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         portal_types = getToolByName(self.portal, "portal_types")\n-        if \'Document\' not in portal_types.objectIds():\n-            fti = DexterityFTI(\'Document\')\n-            portal_types._setObject(\'Document\', fti)\n+        if "Document" not in portal_types.objectIds():\n+            fti = DexterityFTI("Document")\n+            portal_types._setObject("Document", fti)\n         super().setUp()\n \n \n class PropertiesDXTest(DXBaseTest):\n-\n     def testEffective(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'effectiveDate\'] = \'1999/01/01 09:00\'\n+        from plone.app.content.browser.contents.properties import (\n+            PropertiesActionView,\n+        )  # noqa\n+\n+        self.request.form["effectiveDate"] = "1999/01/01 09:00"\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEqual(self.portal.page.effective_date,\n-                          DateTime(\'1999/01/01 09:00\'))\n+        self.assertEqual(self.portal.page.effective_date, DateTime("1999/01/01 09:00"))\n \n     def testExpires(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'expirationDate\'] = \'1999/01/01 09:00\'\n+        from plone.app.content.browser.contents.properties import (\n+            PropertiesActionView,\n+        )  # noqa\n+\n+        self.request.form["expirationDate"] = "1999/01/01 09:00"\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEqual(self.portal.page.expiration_date,\n-                          DateTime(\'1999/01/01 09:00\'))\n+        self.assertEqual(self.portal.page.expiration_date, DateTime("1999/01/01 09:00"))\n \n     def testSetDexterityExcludeFromNav(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'exclude-from-nav\'] = \'yes\'\n+        from plone.app.content.browser.contents.properties import (\n+            PropertiesActionView,\n+        )  # noqa\n+\n+        self.request.form["exclude-from-nav"] = "yes"\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n         self.assertEqual(self.portal.page.exclude_from_nav, True)\n \n     def testRights(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'copyright\'] = \'foobar\'\n+        from plone.app.content.browser.contents.properties import (\n+            PropertiesActionView,\n+        )  # noqa\n+\n+        self.request.form["copyright"] = "foobar"\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEqual(self.portal.page.rights, \'foobar\')\n+        self.assertEqual(self.portal.page.rights, "foobar")\n \n     def testContributors(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'contributors\'] = self.userList\n+        from plone.app.content.browser.contents.properties import (\n+            PropertiesActionView,\n+        )  # noqa\n+\n+        self.request.form["contributors"] = self.userList\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEqual(self.portal.page.contributors, (\'one\', \'two\'))\n+        self.assertEqual(self.portal.page.contributors, ("one", "two"))\n \n     def testCreators(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'creators\'] = self.userList\n+        from plone.app.content.browser.contents.properties import (\n+            PropertiesActionView,\n+        )  # noqa\n+\n+        self.request.form["creators"] = self.userList\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEqual(\n-            self.portal.page.creators,\n-            (\'one\', \'two\')\n-        )\n+        self.assertEqual(self.portal.page.creators, ("one", "two"))\n \n \n class WorkflowTest(BaseTest):\n@@ -118,44 +128,41 @@ class WorkflowTest(BaseTest):\n     layer = PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n \n     def convertDateTimeToIndexRepr(self, date):\n-        t_tup = date.toZone(\'UTC\').parts()\n+        t_tup = date.toZone("UTC").parts()\n         yr = t_tup[0]\n         mo = t_tup[1]\n         dy = t_tup[2]\n         hr = t_tup[3]\n         mn = t_tup[4]\n \n-        return ((((yr * 12 + mo) * 31 + dy) * 24 + hr) * 60 + mn)\n+        return (((yr * 12 + mo) * 31 + dy) * 24 + hr) * 60 + mn\n \n     def testStateChange(self):\n-        from plone.app.content.browser.contents.workflow import WorkflowActionView  # noqa\n-        self.request.form[\'transition\'] = \'publish\'\n-        default_effective = DateTime(\'1969/12/31 00:00:00 {}\'.format(\n-            DateTime().timezone()\n-        ))\n-        default_effective_index = self.convertDateTimeToIndexRepr(\n-            default_effective\n+        from plone.app.content.browser.contents.workflow import (\n+            WorkflowActionView,\n+        )  # noqa\n+\n+        self.request.form["transition"] = "publish"\n+        default_effective = DateTime(\n+            "1969/12/31 00:00:00 {}".format(DateTime().timezone())\n         )\n+        default_effective_index = self.convertDateTimeToIndexRepr(default_effective)\n         pc = getToolByName(self.portal, "portal_catalog")\n         # i need to call it, to populate catalog indexes\n         pc()\n-        self.assertEqual(\n-            pc.uniqueValuesFor(\'effective\'),\n-            (default_effective_index,))\n+        self.assertEqual(pc.uniqueValuesFor("effective"), (default_effective_index,))\n         view = WorkflowActionView(self.portal.page, self.request)\n         view()\n         workflowTool = getToolByName(self.portal, "portal_workflow")\n         self.assertEqual(\n-            workflowTool.getInfoFor(self.portal.page, \'review_state\'),\n-            \'published\')\n+            workflowTool.getInfoFor(self.portal.page, "review_state"), "published"\n+        )\n         # commit to update indexes in catalog\n         commit()\n         effective_index = self.convertDateTimeToIndexRepr(\n             self.portal.page.effective_date\n         )\n-        self.assertEqual(\n-            pc.uniqueValuesFor(\'effective\'),\n-            (effective_index,))\n+        self.assertEqual(pc.uniqueValuesFor("effective"), (effective_index,))\n \n \n class RenameTest(BaseTest):\n@@ -164,34 +171,36 @@ class RenameTest(BaseTest):\n \n     def test_folder_rename_objects(self):\n         from plone.app.content.browser.contents.rename import RenameActionView\n+\n         uid = IUUID(self.portal.page)\n-        self.portal.invokeFactory(\'Document\', id=\'page2\', title=\'2nd page\')\n+        self.portal.invokeFactory("Document", id="page2", title="2nd page")\n         uid2 = IUUID(self.portal.page2)\n-        self.request.form.update({\n-            \'UID_0\': uid,\n-            \'newid_0\': \'I am UnSafe! \',\n-            \'newtitle_0\': \'New!\',\n-            \'UID_1\': uid2,\n-            \'newid_1\': \'. ,;new id : _! \',\n-            \'newtitle_1\': \'Newer!\'\n-        })\n+        self.request.form.update(\n+            {\n+                "UID_0": uid,\n+                "newid_0": "I am UnSafe! ",\n+                "newtitle_0": "New!",\n+                "UID_1": uid2,\n+                "newid_1": ". ,;new id : _! ",\n+                "newtitle_1": "Newer!",\n+            }\n+        )\n         view = RenameActionView(self.portal, self.request)\n         view()\n-        self.assertEqual(self.portal[\'i-am-unsafe\'].title, "New!")\n-        self.assertEqual(self.portal[\'new-id-_\'].title, "Newer!")\n+        self.assertEqual(self.portal["i-am-unsafe"].title, "New!")\n+        self.assertEqual(self.portal["new-id-_"].title, "Newer!")\n \n     def test_default_page_updated_on_rename_objects(self):\n         from plone.app.content.browser.contents.rename import RenameActionView\n-        self.portal.setDefaultPage(\'page\')\n+\n+        self.portal.setDefaultPage("page")\n         uid = IUUID(self.portal.page)\n-        self.request.form.update({\n-            \'UID_0\': uid,\n-            \'newid_0\': \'page-renamed\',\n-            \'newtitle_0\': \'Page\'\n-        })\n+        self.request.form.update(\n+            {"UID_0": uid, "newid_0": "page-renamed", "newtitle_0": "Page"}\n+        )\n         view = RenameActionView(self.portal, self.request)\n         view()\n-        self.assertEqual(self.portal.getDefaultPage(), \'page-renamed\')\n+        self.assertEqual(self.portal.getDefaultPage(), "page-renamed")\n \n \n class ContextInfoTest(BaseTest):\n@@ -200,37 +209,39 @@ class ContextInfoTest(BaseTest):\n \n     def testStateChange(self):\n         from plone.app.content.browser.contents import ContextInfo\n+\n         view = ContextInfo(self.portal.page, self.request)\n         result = json.loads(view())\n-        self.assertEqual(result[\'object\'][\'Title\'], \'page\')\n-        self.assertTrue(len(result[\'breadcrumbs\']) > 0)\n+        self.assertEqual(result["object"]["Title"], "page")\n+        self.assertTrue(len(result["breadcrumbs"]) > 0)\n \n \n class CutCopyLockedTest(BaseTest):\n-    """in folder contents """\n+    """in folder contents"""\n \n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        self.portal.invokeFactory(\'Document\', id="page", title="page")\n+        self.portal.invokeFactory("Document", id="page", title="page")\n         self.portal.page.reindexObject()\n \n-        self.env = {\'HTTP_ACCEPT_LANGUAGE\': \'en\', \'REQUEST_METHOD\': \'POST\'}\n-        self.request = makerequest(self.layer[\'app\']).REQUEST\n+        self.env = {"HTTP_ACCEPT_LANGUAGE": "en", "REQUEST_METHOD": "POST"}\n+        self.request = makerequest(self.layer["app"]).REQUEST\n         self.request.environ.update(self.env)\n         self.request.form = {\n-            \'selection\': \'["\' + IUUID(self.portal.page) + \'"]\',\n-            \'_authenticator\': createToken(),\n-            \'folder\': \'/\'\n+            "selection": \'["\' + IUUID(self.portal.page) + \'"]\',\n+            "_authenticator": createToken(),\n+            "folder": "/",\n         }\n-        self.request.REQUEST_METHOD = \'POST\'\n+        self.request.REQUEST_METHOD = "POST"\n \n     def test_cut_object_when_locked(self):\n         from plone.app.content.browser.contents.cut import CutActionView\n+\n         lockable = IRefreshableLockable(self.portal.page)\n         lockable.lock()\n         view = CutActionView(self.portal, self.request)\n@@ -244,31 +255,32 @@ class DeleteDXTest(BaseTest):\n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        self.portal.invokeFactory(\'Document\', id="page", title="page")\n+        self.portal.invokeFactory("Document", id="page", title="page")\n         self.portal.page.reindexObject()\n \n-        self.env = {\'HTTP_ACCEPT_LANGUAGE\': \'en\', \'REQUEST_METHOD\': \'POST\'}\n-        self.request = makerequest(self.layer[\'app\']).REQUEST\n+        self.env = {"HTTP_ACCEPT_LANGUAGE": "en", "REQUEST_METHOD": "POST"}\n+        self.request = makerequest(self.layer["app"]).REQUEST\n         self.request.environ.update(self.env)\n         self.request.form = {\n-            \'selection\': \'["\' + IUUID(self.portal.page) + \'"]\',\n-            \'_authenticator\': createToken(),\n-            \'folder\': \'/\'\n+            "selection": \'["\' + IUUID(self.portal.page) + \'"]\',\n+            "_authenticator": createToken(),\n+            "folder": "/",\n         }\n-        self.request.REQUEST_METHOD = \'POST\'\n+        self.request.REQUEST_METHOD = "POST"\n \n     def make_request(self):\n-        request = makerequest(self.layer[\'app\'], environ=self.env).REQUEST\n+        request = makerequest(self.layer["app"], environ=self.env).REQUEST\n         self.request.environ.update(self.env)\n-        request.REQUEST_METHOD = \'POST\'\n+        request.REQUEST_METHOD = "POST"\n         return request\n \n     def test_delete_object(self):\n         from plone.app.content.browser.contents.delete import DeleteActionView\n+\n         page_id = self.portal.page.id\n         self.assertTrue(page_id in self.portal)\n         view = DeleteActionView(self.portal, self.request)\n@@ -277,6 +289,7 @@ def test_delete_object(self):\n \n     def test_delete_object_when_locked(self):\n         from plone.app.content.browser.contents.delete import DeleteActionView\n+\n         lockable = IRefreshableLockable(self.portal.page)\n         lockable.lock()\n         view = DeleteActionView(self.portal, self.request)\n@@ -285,13 +298,9 @@ def test_delete_object_when_locked(self):\n \n     def test_delete_wrong_object_by_acquisition(self):\n         page_id = self.portal.page.id\n-        f1 = self.portal.invokeFactory(\'Folder\', id="f1", title="folder one")\n+        f1 = self.portal.invokeFactory("Folder", id="f1", title="folder one")\n         # created a nested page with the same id as the one at the site root\n-        p1 = self.portal[f1].invokeFactory(\n-            \'Document\',\n-            id=page_id,\n-            title="page"\n-        )\n+        p1 = self.portal[f1].invokeFactory("Document", id=page_id, title="page")\n         self.assertEqual(p1, page_id)\n         request2 = self.make_request()\n \n@@ -301,12 +310,13 @@ def test_delete_wrong_object_by_acquisition(self):\n \n         # instantiate two different views and delete the same object with each\n         from plone.app.content.browser.contents.delete import DeleteActionView\n+\n         object_uuid = IUUID(self.portal[f1][p1])\n         for req in [self.request, request2]:\n             req.form = {\n-                \'selection\': f\'["{object_uuid}"]\',\n-                \'_authenticator\': createToken(),\n-                \'folder\': f\'/{f1}/\'\n+                "selection": f\'["{object_uuid}"]\',\n+                "_authenticator": createToken(),\n+                "folder": f"/{f1}/",\n             }\n             view = DeleteActionView(self.portal, req)\n             view()\n@@ -322,46 +332,38 @@ class RearrangeDXTest(BaseTest):\n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        self.portal.invokeFactory(\n-            \'Folder\',\n-            id="basefolder",\n-            title="Folder Base"\n-        )\n+        self.portal.invokeFactory("Folder", id="basefolder", title="Folder Base")\n         self.bf = self.portal.basefolder\n         self.bf.reindexObject()\n         for idx in range(0, 5):\n             newid = f"f{idx}"\n             self.bf.invokeFactory(\n-                \'Folder\',\n+                "Folder",\n                 id=newid,\n                 # title in reverse order\n-                title="Folder {}".format(4-idx)\n+                title=f"Folder {4-idx}",\n             )\n             self.bf[newid].reindexObject()\n \n         # create 3 documents in plone root\n         for idx in range(0, 3):\n             _id = f"page_{idx}"\n-            self.portal.invokeFactory(\n-                \'Document\',\n-                id=_id,\n-                title=f"Page {idx}"\n-            )\n+            self.portal.invokeFactory("Document", id=_id, title=f"Page {idx}")\n             self.portal[_id].reindexObject()\n \n-        self.env = {\'HTTP_ACCEPT_LANGUAGE\': \'en\', \'REQUEST_METHOD\': \'POST\'}\n-        self.request = makerequest(self.layer[\'app\']).REQUEST\n+        self.env = {"HTTP_ACCEPT_LANGUAGE": "en", "REQUEST_METHOD": "POST"}\n+        self.request = makerequest(self.layer["app"]).REQUEST\n         self.request.environ.update(self.env)\n         self.request.form = {\n-            \'selection\': \'["\' + IUUID(self.bf) + \'"]\',\n-            \'_authenticator\': createToken(),\n-            \'folder\': \'/basefolder\'\n+            "selection": \'["\' + IUUID(self.bf) + \'"]\',\n+            "_authenticator": createToken(),\n+            "folder": "/basefolder",\n         }\n-        self.request.REQUEST_METHOD = \'POST\'\n+        self.request.REQUEST_METHOD = "POST"\n \n     def test_initial_order(self):\n         # just to be sure preconditions are fine\n@@ -371,117 +373,143 @@ def test_initial_order(self):\n         self.assertEqual(\n             [(c[0], c[1].Title()) for c in self.bf.contentItems()],\n             [\n-                (\'f0\', \'Folder 4\'),\n-                (\'f1\', \'Folder 3\'),\n-                (\'f2\', \'Folder 2\'),\n-                (\'f3\', \'Folder 1\'),\n-                (\'f4\', \'Folder 0\'),\n-            ]\n+                ("f0", "Folder 4"),\n+                ("f1", "Folder 3"),\n+                ("f2", "Folder 2"),\n+                ("f3", "Folder 1"),\n+                ("f4", "Folder 0"),\n+            ],\n         )\n \n     def test_rearrange_by_title(self):\n-        from plone.app.content.browser.contents.rearrange import RearrangeActionView  # noqa\n-        self.request.form.update({\n-            \'rearrange_on\': \'sortable_title\',\n-        })\n+        from plone.app.content.browser.contents.rearrange import (\n+            RearrangeActionView,\n+        )  # noqa\n+\n+        self.request.form.update(\n+            {\n+                "rearrange_on": "sortable_title",\n+            }\n+        )\n         view = RearrangeActionView(self.bf, self.request)\n         view()\n         self.assertEqual(\n             [(c[0], c[1].Title()) for c in self.bf.contentItems()],\n             [\n-                (\'f4\', \'Folder 0\'),\n-                (\'f3\', \'Folder 1\'),\n-                (\'f2\', \'Folder 2\'),\n-                (\'f1\', \'Folder 3\'),\n-                (\'f0\', \'Folder 4\'),\n+                ("f4", "Folder 0"),\n+                ("f3", "Folder 1"),\n+                ("f2", "Folder 2"),\n+                ("f1", "Folder 3"),\n+                ("f0", "Folder 4"),\n             ],\n         )\n \n     def test_item_order_move_to_top(self):\n-        from plone.app.content.browser.contents.rearrange import ItemOrderActionView  # noqa\n-        self.request.form.update({\n-            \'id\': \'f2\',\n-            \'delta\': \'top\',\n-        })\n+        from plone.app.content.browser.contents.rearrange import (\n+            ItemOrderActionView,\n+        )  # noqa\n+\n+        self.request.form.update(\n+            {\n+                "id": "f2",\n+                "delta": "top",\n+            }\n+        )\n         view = ItemOrderActionView(self.bf, self.request)\n         view()\n         self.assertEqual(\n             [(c[0], c[1].Title()) for c in self.bf.contentItems()],\n             [\n-                (\'f2\', \'Folder 2\'),\n-                (\'f0\', \'Folder 4\'),\n-                (\'f1\', \'Folder 3\'),\n-                (\'f3\', \'Folder 1\'),\n-                (\'f4\', \'Folder 0\'),\n-            ]\n+                ("f2", "Folder 2"),\n+                ("f0", "Folder 4"),\n+                ("f1", "Folder 3"),\n+                ("f3", "Folder 1"),\n+                ("f4", "Folder 0"),\n+            ],\n         )\n \n     def test_item_order_move_to_bottom(self):\n-        from plone.app.content.browser.contents.rearrange import ItemOrderActionView  # noqa\n-        self.request.form.update({\n-            \'id\': \'f2\',\n-            \'delta\': \'bottom\',\n-        })\n+        from plone.app.content.browser.contents.rearrange import (\n+            ItemOrderActionView,\n+        )  # noqa\n+\n+        self.request.form.update(\n+            {\n+                "id": "f2",\n+                "delta": "bottom",\n+            }\n+        )\n         view = ItemOrderActionView(self.bf, self.request)\n         view()\n         self.assertEqual(\n             [(c[0], c[1].Title()) for c in self.bf.contentItems()],\n             [\n-                (\'f0\', \'Folder 4\'),\n-                (\'f1\', \'Folder 3\'),\n-                (\'f3\', \'Folder 1\'),\n-                (\'f4\', \'Folder 0\'),\n-                (\'f2\', \'Folder 2\'),\n-            ]\n+                ("f0", "Folder 4"),\n+                ("f1", "Folder 3"),\n+                ("f3", "Folder 1"),\n+                ("f4", "Folder 0"),\n+                ("f2", "Folder 2"),\n+            ],\n         )\n \n     def test_item_order_move_by_delta(self):\n-        from plone.app.content.browser.contents.rearrange import ItemOrderActionView  # noqa\n-        self.request.form.update({\n-            \'id\': \'f2\',\n-            \'delta\': \'-1\',\n-        })\n+        from plone.app.content.browser.contents.rearrange import (\n+            ItemOrderActionView,\n+        )  # noqa\n+\n+        self.request.form.update(\n+            {\n+                "id": "f2",\n+                "delta": "-1",\n+            }\n+        )\n         view = ItemOrderActionView(self.bf, self.request)\n         view()\n         self.assertEqual(\n             [(c[0], c[1].Title()) for c in self.bf.contentItems()],\n             [\n-                (\'f0\', \'Folder 4\'),\n-                (\'f2\', \'Folder 2\'),\n-                (\'f1\', \'Folder 3\'),\n-                (\'f3\', \'Folder 1\'),\n-                (\'f4\', \'Folder 0\'),\n-            ]\n+                ("f0", "Folder 4"),\n+                ("f2", "Folder 2"),\n+                ("f1", "Folder 3"),\n+                ("f3", "Folder 1"),\n+                ("f4", "Folder 0"),\n+            ],\n         )\n \n     def test_item_order_move_by_delta_in_plone_root(self):\n-        from plone.app.content.browser.contents.rearrange import ItemOrderActionView  # noqa\n+        from plone.app.content.browser.contents.rearrange import (\n+            ItemOrderActionView,\n+        )  # noqa\n \n         # first move the \'basefolder\' to the top\n-        self.request.form.update({\n-            \'id\': \'basefolder\',\n-            \'delta\': \'top\',\n-        })\n+        self.request.form.update(\n+            {\n+                "id": "basefolder",\n+                "delta": "top",\n+            }\n+        )\n         view = ItemOrderActionView(self.portal, self.request)\n         view()\n \n         # move \'basefolder\' two positions down\n-        self.request.form.update({\n-            \'id\': \'basefolder\',\n-            \'delta\': \'2\',\n-            \'subsetIds\': \'["basefolder", "page_0", "page_1", "page_2"]\',\n-        })\n+        self.request.form.update(\n+            {\n+                "id": "basefolder",\n+                "delta": "2",\n+                "subsetIds": \'["basefolder", "page_0", "page_1", "page_2"]\',\n+            }\n+        )\n         view = ItemOrderActionView(self.portal, self.request)\n         view()\n \n         self.assertEqual(\n             [(c[0], c[1].Title()) for c in self.portal.contentItems()],\n             [\n-                (\'page_0\', \'Page 0\'),\n-                (\'page_1\', \'Page 1\'),\n-                (\'basefolder\', \'Folder Base\'),\n-                (\'page_2\', \'Page 2\'),\n-            ]\n+                ("page_0", "Page 0"),\n+                ("page_1", "Page 1"),\n+                ("basefolder", "Folder Base"),\n+                ("page_2", "Page 2"),\n+            ],\n         )\n \n \n@@ -489,31 +517,31 @@ class FolderFactoriesTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def test_folder_factories_regression(self):\n-        from plone.app.content.browser.folderfactories import (\n-            FolderFactoriesView as FFV)\n+        from plone.app.content.browser.folderfactories import FolderFactoriesView as FFV\n+\n         view = FFV(self.portal, self.request)\n-        self.request.form.update({\n-            \'form.button.Add\': \'yes\',\n-            \'url\': self.portal.absolute_url()\n-        })\n+        self.request.form.update(\n+            {"form.button.Add": "yes", "url": self.portal.absolute_url()}\n+        )\n         view()\n-        self.assertEqual(self.request.response.headers.get(\'location\'),\n-                         self.portal.absolute_url())\n+        self.assertEqual(\n+            self.request.response.headers.get("location"), self.portal.absolute_url()\n+        )\n \n     def test_folder_factories(self):\n-        from plone.app.content.browser.folderfactories import (\n-            FolderFactoriesView as FFV)\n+        from plone.app.content.browser.folderfactories import FolderFactoriesView as FFV\n+\n         view = FFV(self.portal, self.request)\n-        self.request.form.update({\n-            \'form.button.Add\': \'yes\',\n-            \'url\': \'http://www.foobar.com\'\n-        })\n+        self.request.form.update(\n+            {"form.button.Add": "yes", "url": "http://www.foobar.com"}\n+        )\n         view()\n-        self.assertNotEqual(self.request.response.headers.get(\'location\'),\n-                            \'http://www.foobar.com\')\n+        self.assertNotEqual(\n+            self.request.response.headers.get("location"), "http://www.foobar.com"\n+        )\ndiff --git a/plone/app/content/tests/test_folder_publish.py b/plone/app/content/tests/test_folder_publish.py\nindex 4b581a0..6a55ec7 100644\n--- a/plone/app/content/tests/test_folder_publish.py\n+++ b/plone/app/content/tests/test_folder_publish.py\n@@ -1,13 +1,11 @@\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n-from plone.app.testing import login\n-from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n+import unittest\n+\n+from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, login, setRoles\n from Products.CMFPlone.utils import isExpired\n from zExceptions import Forbidden\n from zope.component import getMultiAdapter\n \n-import unittest\n+from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n \n class TestContentPublishing(unittest.TestCase):\n@@ -74,7 +72,9 @@ def test_publishing_subobjects(self):\n         for o in (self.folder.d1, self.folder.f1, self.folder.f1.d2, self.folder.f1.f2):\n             self.assertEqual(self.workflow.getInfoFor(o, "review_state"), "published")\n         self.assertEqual(self.request.response.getStatus(), 302)\n-        self.assertEqual(self.request.response.getHeader("Location"), self.folder.absolute_url())\n+        self.assertEqual(\n+            self.request.response.getHeader("Location"), self.folder.absolute_url()\n+        )\n \n     def test_publishing_subobjects_and_expire_them(self):\n         paths = []\n@@ -121,4 +121,6 @@ def test_publishing_orig_template_attacker(self):\n \n         self.request.form["orig_template"] = "https://attacker.com"\n         self.folder_publish(workflow_action="publish", paths=paths)\n-        self.assertEqual(self.request.response.getHeader("Location"), self.folder.absolute_url())\n+        self.assertEqual(\n+            self.request.response.getHeader("Location"), self.folder.absolute_url()\n+        )\ndiff --git a/plone/app/content/tests/test_namechooser.py b/plone/app/content/tests/test_namechooser.py\nindex c33c162..4584ccf 100644\n--- a/plone/app/content/tests/test_namechooser.py\n+++ b/plone/app/content/tests/test_namechooser.py\n@@ -1,15 +1,20 @@\n-from zope.component.testing import setUp\n-from zope.component.testing import tearDown\n import doctest\n import unittest\n \n+from zope.component.testing import setUp, tearDown\n+\n \n def test_suite():\n     return unittest.TestSuite(\n-        doctest.DocFileSuite(\'namechooser.txt\',\n-                             package=\'plone.app.content\',\n-                             optionflags=doctest.ELLIPSIS,\n-                             setUp=setUp, tearDown=tearDown))\n+        doctest.DocFileSuite(\n+            "namechooser.txt",\n+            package="plone.app.content",\n+            optionflags=doctest.ELLIPSIS,\n+            setUp=setUp,\n+            tearDown=tearDown,\n+        )\n+    )\n+\n \n if __name__ == "__main__":\n-    unittest.main(defaultTest=\'test_suite\')\n+    unittest.main(defaultTest="test_suite")\ndiff --git a/plone/app/content/tests/test_namechooser_unit.py b/plone/app/content/tests/test_namechooser_unit.py\nindex ca4a94d..e6e4fdb 100644\n--- a/plone/app/content/tests/test_namechooser_unit.py\n+++ b/plone/app/content/tests/test_namechooser_unit.py\n@@ -1,13 +1,13 @@\n+import unittest\n+\n+import transaction\n+from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, login, setRoles\n+from plone.dexterity.fti import DexterityFTI\n from Products.CMFCore.utils import getToolByName\n+from zope.container.interfaces import INameChooser\n+\n from plone.app.content.namechooser import ATTEMPTS\n from plone.app.content.testing import PLONE_APP_CONTENT_INTEGRATION_TESTING\n-from plone.app.testing import TEST_USER_ID, TEST_USER_NAME\n-from plone.app.testing import login\n-from plone.app.testing import setRoles\n-from plone.dexterity.fti import DexterityFTI\n-from zope.container.interfaces import INameChooser\n-import transaction\n-import unittest\n \n \n class NameChooserTest(unittest.TestCase):\n@@ -15,12 +15,12 @@ class NameChooserTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         portal_types = getToolByName(self.portal, "portal_types")\n-        if \'Document\' not in portal_types.objectIds():\n-            fti = DexterityFTI(\'Document\')\n-            portal_types._setObject(\'Document\', fti)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        if "Document" not in portal_types.objectIds():\n+            fti = DexterityFTI("Document")\n+            portal_types._setObject("Document", fti)\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n \n     def test_100_or_more_unique_ids(self):\n@@ -30,7 +30,7 @@ def test_100_or_more_unique_ids(self):\n         holder = self.portal\n         title = "A Small Document"\n         # create the first object, which will have no suffix\n-        holder.invokeFactory("Document", id=\'a-small-document\')\n+        holder.invokeFactory("Document", id="a-small-document")\n \n         chooser = INameChooser(holder)\n \ndiff --git a/plone/app/content/tests/test_non_ascii_characters_in_workflow_state.py b/plone/app/content/tests/test_non_ascii_characters_in_workflow_state.py\nindex af822b2..e5a9ea4 100644\n--- a/plone/app/content/tests/test_non_ascii_characters_in_workflow_state.py\n+++ b/plone/app/content/tests/test_non_ascii_characters_in_workflow_state.py\n@@ -1,13 +1,11 @@\n-from plone.app.content.testing import PLONE_APP_CONTENT_NON_ASCII_INTEGRATION_TESTING\n-from plone.app.testing import login\n-from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n-from Products.CMFCore.utils import getToolByName\n+import json\n+import unittest\n+\n+from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, login, setRoles\n from plone.uuid.interfaces import IUUID\n+from Products.CMFCore.utils import getToolByName\n \n-import unittest\n-import json\n+from plone.app.content.testing import PLONE_APP_CONTENT_NON_ASCII_INTEGRATION_TESTING\n \n \n class TestNonAsciiCharactersWorkflow(unittest.TestCase):\n@@ -15,37 +13,42 @@ class TestNonAsciiCharactersWorkflow(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_NON_ASCII_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         # set non-ascii-workflow for Documents\n-        wf_tool = getToolByName(self, \'portal_workflow\')\n-        wf_tool.setChainForPortalTypes([\'Document\'], \'non-ascii-workflow\')\n+        wf_tool = getToolByName(self, "portal_workflow")\n+        wf_tool.setChainForPortalTypes(["Document"], "non-ascii-workflow")\n \n         # create an object having the non-ascii-workflow assigned\n         self.portal.invokeFactory("Document", "doc")\n \n     def test_non_ascii_characters_in_workflow_title(self):\n-        wf_tool = getToolByName(self, \'portal_workflow\')\n-        workflow_matching_id = list(filter(\n-                lambda workflow: (\'non-ascii-workflow\' in workflow.id),\n-                wf_tool.getWorkflowsFor(self.portal.doc)))\n+        wf_tool = getToolByName(self, "portal_workflow")\n+        workflow_matching_id = list(\n+            filter(\n+                lambda workflow: ("non-ascii-workflow" in workflow.id),\n+                wf_tool.getWorkflowsFor(self.portal.doc),\n+            )\n+        )\n \n         # Make sure that the non-ascii-workflow was assigned to the Document\n         self.assertTrue(workflow_matching_id)\n \n         # Build POST request to get state title for the Document\n         documents_uid = IUUID(self.portal.doc)\n-        self.request.form[\'selection\'] = json.dumps(documents_uid)\n-        self.request.form[\'transitions\'] = True\n-        self.request.form[\'render\'] = \'yes\'\n+        self.request.form["selection"] = json.dumps(documents_uid)\n+        self.request.form["transitions"] = True\n+        self.request.form["render"] = "yes"\n \n         try:\n             # try to do the json request which among other things returns\n             # the workflow state title containing non-ascii characters.\n-            self.portal.unrestrictedTraverse(\'@@fc-workflow\')()\n+            self.portal.unrestrictedTraverse("@@fc-workflow")()\n         except UnicodeDecodeError:\n-            self.fail(\'Calling @@fc-workflow raised UnicodeDecodeError \\\n-                       unexpectedly.\')\n+            self.fail(\n+                "Calling @@fc-workflow raised UnicodeDecodeError \\\n+                       unexpectedly."\n+            )\ndiff --git a/plone/app/content/tests/test_reviewlist.py b/plone/app/content/tests/test_reviewlist.py\nindex 17354b7..f5f1f9a 100644\n--- a/plone/app/content/tests/test_reviewlist.py\n+++ b/plone/app/content/tests/test_reviewlist.py\n@@ -1,11 +1,11 @@\n-from Products.CMFCore.utils import getToolByName\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n-from plone.testing.zope import Browser\n-from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n+import unittest\n \n import transaction\n-import unittest\n+from plone.app.testing import TEST_USER_ID, setRoles\n+from plone.testing.zope import Browser\n+from Products.CMFCore.utils import getToolByName\n+\n+from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n \n \n class ReviewListTestCase(unittest.TestCase):\n@@ -14,17 +14,23 @@ class ReviewListTestCase(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.uf = self.portal.acl_users\n-        self.uf.userFolderAddUser(\'reviewer\', \'secret\', [\'Reviewer\'], [])\n+        self.uf.userFolderAddUser("reviewer", "secret", ["Reviewer"], [])\n         transaction.commit()\n-        self.browser = Browser(self.layer[\'app\'])\n+        self.browser = Browser(self.layer["app"])\n         self.browser.handleErrors = True\n-        self.wftool = getToolByName(self.portal, \'portal_workflow\')\n+        self.wftool = getToolByName(self.portal, "portal_workflow")\n \n     def createDocument(self, id, title, description):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', ])\n-        self.portal.invokeFactory(id=id, type_name=\'Document\')\n+        setRoles(\n+            self.portal,\n+            TEST_USER_ID,\n+            [\n+                "Manager",\n+            ],\n+        )\n+        self.portal.invokeFactory(id=id, type_name="Document")\n         doc = getattr(self.portal, id)\n         doc.title = title\n         doc.description = description\n@@ -35,40 +41,41 @@ def createDocument(self, id, title, description):\n         return doc\n \n     def submitToReview(self, obj):\n-        \'\'\'call the workflow action \'submit\' for an object\'\'\'\n-        self.wftool.doActionFor(obj, \'submit\')\n+        """call the workflow action \'submit\' for an object"""\n+        self.wftool.doActionFor(obj, "submit")\n \n     def test_unauthenticated(self):\n-        \'\'\'\n+        """\n         unauthenticated users do not have the necessary permissions to view\n         the review list\n-        \'\'\'\n-        self.browser.open(\'http://nohost/plone/full_review_list\')\n-        self.assertTrue(\'Login Name\' in self.browser.contents)\n+        """\n+        self.browser.open("http://nohost/plone/full_review_list")\n+        self.assertTrue("Login Name" in self.browser.contents)\n \n     def test_authenticated(self):\n-        \'\'\'\n+        """\n         authenticated users do have the necessary permissions to view\n         the review list\n-        \'\'\'\n-        self.browser.addHeader(\'Authorization\',\n-                               \'Basic {}:{}\'.format(\'reviewer\', \'secret\'))\n-        self.browser.open(\'http://nohost/plone/full_review_list\')\n-        self.assertTrue(\'Full review list:\' in self.browser.contents)\n+        """\n+        self.browser.addHeader(\n+            "Authorization", "Basic {}:{}".format("reviewer", "secret")\n+        )\n+        self.browser.open("http://nohost/plone/full_review_list")\n+        self.assertTrue("Full review list:" in self.browser.contents)\n \n     def test_with_content(self):\n-        \'\'\'\n+        """\n         authenticated users do have the necessary permissions to view\n         the review list\n-        \'\'\'\n-        doc = self.createDocument(\n-            \'testdoc\', \'Test Document\', \'Test Description\')\n-        self.wftool.doActionFor(doc, \'submit\')\n+        """\n+        doc = self.createDocument("testdoc", "Test Document", "Test Description")\n+        self.wftool.doActionFor(doc, "submit")\n         transaction.commit()\n \n-        self.browser.addHeader(\'Authorization\',\n-                               \'Basic {}:{}\'.format(\'reviewer\', \'secret\'))\n-        self.browser.open(\'http://nohost/plone/full_review_list\')\n-        self.assertTrue(\'Full review list:\' in self.browser.contents)\n+        self.browser.addHeader(\n+            "Authorization", "Basic {}:{}".format("reviewer", "secret")\n+        )\n+        self.browser.open("http://nohost/plone/full_review_list")\n+        self.assertTrue("Full review list:" in self.browser.contents)\n         # test if the table with review items contains an entry for testdoc\n         self.assertTrue(\'value="/plone/testdoc"\' in self.browser.contents)\ndiff --git a/plone/app/content/tests/test_selectdefaultpage.py b/plone/app/content/tests/test_selectdefaultpage.py\nindex ea4efb8..551314f 100644\n--- a/plone/app/content/tests/test_selectdefaultpage.py\n+++ b/plone/app/content/tests/test_selectdefaultpage.py\n@@ -1,22 +1,28 @@\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import setRoles\n-from plone.testing.zope import Browser\n-import transaction\n import unittest\n \n+import transaction\n+from plone.app.testing import TEST_USER_ID, setRoles\n+from plone.testing.zope import Browser\n+\n+from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n \n-FOLDER = {\'id\': \'testfolder\',\n-          \'title\': \'Test Folder\',\n-          \'description\': \'Test Folder Description\'}\n+FOLDER = {\n+    "id": "testfolder",\n+    "title": "Test Folder",\n+    "description": "Test Folder Description",\n+}\n \n-DOCUMENT = {\'id\': \'testdoc\',\n-            \'title\': \'Test Document\',\n-            \'description\': \'Test Document Description\'}\n+DOCUMENT = {\n+    "id": "testdoc",\n+    "title": "Test Document",\n+    "description": "Test Document Description",\n+}\n \n-NEWSITEM = {\'id\': \'testnews\',\n-            \'title\': \'Test News Item\',\n-            \'description\': \'Test News Item Description\'}\n+NEWSITEM = {\n+    "id": "testnews",\n+    "title": "Test News Item",\n+    "description": "Test News Item Description",\n+}\n \n \n class SelectDefaultPageDXTestCase(unittest.TestCase):\n@@ -24,53 +30,53 @@ class SelectDefaultPageDXTestCase(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.portal.acl_users.userFolderAddUser(\n-            \'editor\', \'secret\', [\'Editor\'], [])\n+        self.portal = self.layer["portal"]\n+        self.portal.acl_users.userFolderAddUser("editor", "secret", ["Editor"], [])\n \n         self._create_structure()\n         transaction.commit()\n \n-        self.browser = Browser(self.layer[\'app\'])\n-        self.browser.addHeader(\'Authorization\',\n-                               \'Basic {}:{}\'.format(\'editor\', \'secret\'))\n+        self.browser = Browser(self.layer["app"])\n+        self.browser.addHeader(\n+            "Authorization", "Basic {}:{}".format("editor", "secret")\n+        )\n \n     def tearDown(self):\n-        self.portal.manage_delObjects(ids=FOLDER[\'id\'])\n+        self.portal.manage_delObjects(ids=FOLDER["id"])\n         transaction.commit()\n \n     def _createFolder(self):\n-        self.portal.invokeFactory(id=FOLDER[\'id\'], type_name=\'Folder\')\n-        folder = getattr(self.portal, FOLDER[\'id\'])\n-        folder.setTitle(FOLDER[\'title\'])\n-        folder.setDescription(FOLDER[\'description\'])\n+        self.portal.invokeFactory(id=FOLDER["id"], type_name="Folder")\n+        folder = getattr(self.portal, FOLDER["id"])\n+        folder.setTitle(FOLDER["title"])\n+        folder.setDescription(FOLDER["description"])\n         folder.reindexObject()\n         # we don\'t want it in the navigation\n         # folder.setExcludeFromNav(True)\n         return folder\n \n     def _createDocument(self, context):\n-        context.invokeFactory(id=DOCUMENT[\'id\'], type_name=\'Document\')\n-        doc = getattr(context, DOCUMENT[\'id\'])\n-        doc.setTitle(DOCUMENT[\'title\'])\n-        doc.setDescription(DOCUMENT[\'description\'])\n+        context.invokeFactory(id=DOCUMENT["id"], type_name="Document")\n+        doc = getattr(context, DOCUMENT["id"])\n+        doc.setTitle(DOCUMENT["title"])\n+        doc.setDescription(DOCUMENT["description"])\n         doc.reindexObject()\n         # we don\'t want it in the navigation\n         # doc.setExcludeFromNav(True)\n         return doc\n \n     def _createNewsItem(self, context):\n-        context.invokeFactory(id=NEWSITEM[\'id\'], type_name=\'News Item\')\n-        doc = getattr(context, NEWSITEM[\'id\'])\n-        doc.setTitle(NEWSITEM[\'title\'])\n-        doc.setDescription(NEWSITEM[\'description\'])\n+        context.invokeFactory(id=NEWSITEM["id"], type_name="News Item")\n+        doc = getattr(context, NEWSITEM["id"])\n+        doc.setTitle(NEWSITEM["title"])\n+        doc.setDescription(NEWSITEM["description"])\n         doc.reindexObject()\n         # we don\'t want it in the navigation\n         # doc.setExcludeFromNav(True)\n         return doc\n \n     def _create_structure(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         folder = self._createFolder()\n         self._createDocument(folder)\n         return folder\n@@ -79,22 +85,23 @@ def test_select_default_page_view(self):\n         """Check that the form can be rendered."""\n         folder = self.portal.testfolder\n \n-        self.browser.open(\'%s/@@select_default_page\' % folder.absolute_url())\n+        self.browser.open("%s/@@select_default_page" % folder.absolute_url())\n \n-        self.assertTrue(\'Select default page\' in self.browser.contents)\n+        self.assertTrue("Select default page" in self.browser.contents)\n         self.assertTrue(\'id="testdoc"\' in self.browser.contents)\n \n     def test_select_default_page_view_with_folderish_type(self):\n         """Check if folderish types are available."""\n         folder = self.portal.testfolder\n-        folder.invokeFactory(id=FOLDER[\'id\'], type_name=\'Folder\')\n-        folder2 = getattr(folder, FOLDER[\'id\'])\n-        folder.setTitle(FOLDER[\'title\'])\n+        folder.invokeFactory(id=FOLDER["id"], type_name="Folder")\n+        folder2 = getattr(folder, FOLDER["id"])\n+        folder.setTitle(FOLDER["title"])\n         folder2.reindexObject()\n-        folder_fti = self.portal.portal_types[\'Folder\']\n+        folder_fti = self.portal.portal_types["Folder"]\n         folder_fti.manage_changeProperties(\n-            filter_content_types=True, allowed_content_types=[])\n-        view = folder.restrictedTraverse(\'@@select_default_page\')()\n+            filter_content_types=True, allowed_content_types=[]\n+        )\n+        view = folder.restrictedTraverse("@@select_default_page")()\n \n         self.assertTrue(\'id="testdoc"\' in view)\n         self.assertTrue(\'id="testfolder"\' in view)\n@@ -103,8 +110,8 @@ def test_default_page_action_cancel(self):\n         """Check the Cancel action."""\n         folder = self.portal.testfolder\n \n-        self.browser.open(\'%s/@@select_default_page\' % folder.absolute_url())\n-        cancel_button = self.browser.getControl(name=\'form.buttons.Cancel\')\n+        self.browser.open("%s/@@select_default_page" % folder.absolute_url())\n+        cancel_button = self.browser.getControl(name="form.buttons.Cancel")\n         cancel_button.click()\n \n         self.assertEqual(self.browser.url, folder.absolute_url())\n@@ -113,19 +120,19 @@ def test_default_page_action_cancel(self):\n     def test_default_page_action_save(self):\n         """Check the Save action."""\n         folder = self.portal.testfolder\n-        self.browser.open(\'%s/@@select_default_page\' % folder.absolute_url())\n+        self.browser.open("%s/@@select_default_page" % folder.absolute_url())\n \n-        submit_button = self.browser.getControl(name=\'form.buttons.Save\')\n+        submit_button = self.browser.getControl(name="form.buttons.Save")\n         submit_button.click()\n \n         self.assertEqual(self.browser.url, folder.absolute_url())\n-        self.assertEqual(folder.getDefaultPage(), \'testdoc\')\n+        self.assertEqual(folder.getDefaultPage(), "testdoc")\n \n     def test_selectable_types_filter(self):\n-        self.portal.portal_registry[\'plone.default_page_types\'] = [\'News Item\']\n+        self.portal.portal_registry["plone.default_page_types"] = ["News Item"]\n         folder = self.portal.testfolder\n         self._createNewsItem(folder)\n \n-        view = folder.restrictedTraverse(\'@@select_default_page\')()\n+        view = folder.restrictedTraverse("@@select_default_page")()\n         self.assertTrue(\'id="testdoc"\' not in view)\n         self.assertTrue(\'id="testnews"\' in view)\ndiff --git a/plone/app/content/tests/test_table.py b/plone/app/content/tests/test_table.py\nindex 71a5ea2..1a07450 100644\n--- a/plone/app/content/tests/test_table.py\n+++ b/plone/app/content/tests/test_table.py\n@@ -1,12 +1,16 @@\n-from zope.component.testing import setUp\n-from zope.component.testing import tearDown\n import doctest\n import unittest\n \n+from zope.component.testing import setUp, tearDown\n+\n \n def test_suite():\n     return unittest.TestSuite(\n-        doctest.DocFileSuite(\'table.txt\',\n-                             package=\'plone.app.content.browser\',\n-                             optionflags=doctest.ELLIPSIS,\n-                             setUp=setUp, tearDown=tearDown))\n+        doctest.DocFileSuite(\n+            "table.txt",\n+            package="plone.app.content.browser",\n+            optionflags=doctest.ELLIPSIS,\n+            setUp=setUp,\n+            tearDown=tearDown,\n+        )\n+    )\ndiff --git a/plone/app/content/tests/test_widgets.py b/plone/app/content/tests/test_widgets.py\nindex 7b134c2..8eeaa66 100644\n--- a/plone/app/content/tests/test_widgets.py\n+++ b/plone/app/content/tests/test_widgets.py\n@@ -1,35 +1,29 @@\n-from plone.app.content.browser import vocabulary\n-from plone.app.content.browser.file import FileUploadView\n-from plone.app.content.browser.query import QueryStringIndexOptions\n-from plone.app.content.browser.vocabulary import VocabularyView\n-from plone.app.content.testing import ExampleFunctionVocabulary\n-from plone.app.content.testing import ExampleVocabulary\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n-from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n-from plone.app.testing import login\n-from plone.app.testing import logout\n-from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n+import json\n+import operator\n+import os\n+import unittest\n+from unittest import mock\n+\n+import transaction\n+from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, login, logout, setRoles\n from plone.app.z3cform.interfaces import IFieldPermissionChecker\n from Products.CMFCore.indexing import processQueue\n-from unittest import mock\n-from zope.component import getMultiAdapter\n-from zope.component import provideAdapter\n-from zope.component import provideUtility\n+from zope.component import getMultiAdapter, provideAdapter, provideUtility\n from zope.component.globalregistry import base\n from zope.globalrequest import setRequest\n-from zope.interface import alsoProvides\n-from zope.interface import Interface\n-from zope.interface import noLongerProvides\n+from zope.interface import Interface, alsoProvides, noLongerProvides\n from zope.publisher.browser import TestRequest\n \n-import json\n-import operator\n-import os\n-import transaction\n-import unittest\n-\n+from plone.app.content.browser import vocabulary\n+from plone.app.content.browser.file import FileUploadView\n+from plone.app.content.browser.query import QueryStringIndexOptions\n+from plone.app.content.browser.vocabulary import VocabularyView\n+from plone.app.content.testing import (\n+    PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING,\n+    PLONE_APP_CONTENT_DX_INTEGRATION_TESTING,\n+    ExampleFunctionVocabulary,\n+    ExampleVocabulary,\n+)\n \n _dir = os.path.dirname(__file__)\n \n@@ -39,12 +33,12 @@ def __init__(self, context):\n         pass\n \n     def validate(self, field_name, vocabulary_name=None):\n-        if field_name == \'allowed_field\':\n+        if field_name == "allowed_field":\n             return True\n-        elif field_name == \'disallowed_field\':\n+        elif field_name == "disallowed_field":\n             return False\n         else:\n-            raise AttributeError(\'Missing Field\')\n+            raise AttributeError("Missing Field")\n \n \n class ICustomPermissionProvider(Interface):\n@@ -52,15 +46,19 @@ class ICustomPermissionProvider(Interface):\n \n \n def _enable_permission_checker(context):\n-    provideAdapter(PermissionChecker, adapts=(ICustomPermissionProvider,),\n-                   provides=IFieldPermissionChecker)\n+    provideAdapter(\n+        PermissionChecker,\n+        adapts=(ICustomPermissionProvider,),\n+        provides=IFieldPermissionChecker,\n+    )\n     alsoProvides(context, ICustomPermissionProvider)\n \n \n def _disable_permission_checker(context):\n     noLongerProvides(context, ICustomPermissionProvider)\n-    base.unregisterAdapter(required=(ICustomPermissionProvider,),\n-                           provided=IFieldPermissionChecker)\n+    base.unregisterAdapter(\n+        required=(ICustomPermissionProvider,), provided=IFieldPermissionChecker\n+    )\n \n \n class BrowserTest(unittest.TestCase):\n@@ -68,173 +66,171 @@ class BrowserTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.request = TestRequest(environ={\'HTTP_ACCEPT_LANGUAGE\': \'en\'})\n+        self.request = TestRequest(environ={"HTTP_ACCEPT_LANGUAGE": "en"})\n         setRequest(self.request)\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        provideUtility(ExampleVocabulary(), name=\'vocab_class\')\n-        provideUtility(ExampleFunctionVocabulary, name=\'vocab_function\')\n-        vocabulary.PERMISSIONS.update({\n-            \'vocab_class\': \'Modify portal content\',\n-            \'vocab_function\': \'Modify portal content\',\n-        })\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        provideUtility(ExampleVocabulary(), name="vocab_class")\n+        provideUtility(ExampleFunctionVocabulary, name="vocab_function")\n+        vocabulary.PERMISSIONS.update(\n+            {\n+                "vocab_class": "Modify portal content",\n+                "vocab_function": "Modify portal content",\n+            }\n+        )\n \n     def testVocabularyQueryString(self):\n-        """Test querying a class based vocabulary with a search string.\n-        """\n+        """Test querying a class based vocabulary with a search string."""\n         view = VocabularyView(self.portal, self.request)\n-        self.request.form.update({\n-            \'name\': \'vocab_class\',\n-            \'query\': \'three\'\n-        })\n+        self.request.form.update({"name": "vocab_class", "query": "three"})\n         data = json.loads(view())\n-        self.assertEqual(len(data[\'results\']), 1)\n+        self.assertEqual(len(data["results"]), 1)\n \n     def testVocabularyFunctionQueryString(self):\n-        """Test querying a function based vocabulary with a search string.\n-        """\n+        """Test querying a function based vocabulary with a search string."""\n         view = VocabularyView(self.portal, self.request)\n-        self.request.form.update({\n-            \'name\': \'vocab_function\',\n-            \'query\': \'third\'\n-        })\n+        self.request.form.update({"name": "vocab_function", "query": "third"})\n         data = json.loads(view())\n-        self.assertEqual(len(data[\'results\']), 1)\n+        self.assertEqual(len(data["results"]), 1)\n \n     def testVocabularyNoResults(self):\n-        """Tests that the widgets displays correctly\n-        """\n+        """Tests that the widgets displays correctly"""\n         view = VocabularyView(self.portal, self.request)\n         query = {\n-            \'criteria\': [\n+            "criteria": [\n                 {\n-                    \'i\': \'path\',\n-                    \'o\': \'plone.app.querystring.operation.string.path\',\n-                    \'v\': \'/foo\'\n+                    "i": "path",\n+                    "o": "plone.app.querystring.operation.string.path",\n+                    "v": "/foo",\n                 }\n             ]\n         }\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.Catalog\',\n-            \'query\': json.dumps(query)\n-        })\n+        self.request.form.update(\n+            {"name": "plone.app.vocabularies.Catalog", "query": json.dumps(query)}\n+        )\n         data = json.loads(view())\n-        self.assertEqual(len(data[\'results\']), 0)\n+        self.assertEqual(len(data["results"]), 0)\n \n     def testVocabularyCatalogResults(self):\n-        self.portal.invokeFactory(\'Document\', id="page", title="page")\n+        self.portal.invokeFactory("Document", id="page", title="page")\n         self.portal.page.reindexObject()\n         view = VocabularyView(self.portal, self.request)\n         query = {\n-            \'criteria\': [\n+            "criteria": [\n                 {\n-                    \'i\': \'path\',\n-                    \'o\': \'plone.app.querystring.operation.string.path\',\n-                    \'v\': \'/plone\'\n+                    "i": "path",\n+                    "o": "plone.app.querystring.operation.string.path",\n+                    "v": "/plone",\n                 }\n             ]\n         }\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.Catalog\',\n-            \'query\': json.dumps(query),\n-            \'attributes\': [\'UID\', \'id\', \'title\', \'path\']\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.Catalog",\n+                "query": json.dumps(query),\n+                "attributes": ["UID", "id", "title", "path"],\n+            }\n+        )\n         data = json.loads(view())\n-        self.assertEqual(len(data[\'results\']), 1)\n+        self.assertEqual(len(data["results"]), 1)\n \n     def testVocabularyCatalogUnsafeMetadataAllowed(self):\n         """Users with permission "Modify portal content" are allowed to see\n         ``_unsafe_metadata``.\n         """\n-        self.portal.invokeFactory(\'Document\', id="page", title="page")\n+        self.portal.invokeFactory("Document", id="page", title="page")\n         self.portal.page.reindexObject()\n         view = VocabularyView(self.portal, self.request)\n         query = {\n-            \'criteria\': [\n+            "criteria": [\n                 {\n-                    \'i\': \'path\',\n-                    \'o\': \'plone.app.querystring.operation.string.path\',\n-                    \'v\': \'/plone/page\'\n+                    "i": "path",\n+                    "o": "plone.app.querystring.operation.string.path",\n+                    "v": "/plone/page",\n                 }\n             ]\n         }\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.Catalog\',\n-            \'query\': json.dumps(query),\n-            \'attributes\': [\n-                \'id\',\n-                \'commentors\',\n-                \'Creator\',\n-                \'listCreators\',\n-            ]\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.Catalog",\n+                "query": json.dumps(query),\n+                "attributes": [\n+                    "id",\n+                    "commentors",\n+                    "Creator",\n+                    "listCreators",\n+                ],\n+            }\n+        )\n         data = json.loads(view())\n-        self.assertEqual(len(list(data[\'results\'][0].keys())), 4)\n+        self.assertEqual(len(list(data["results"][0].keys())), 4)\n \n     def testVocabularyCatalogUnsafeMetadataDisallowed(self):\n         """Users without permission "Modify portal content" are not allowed to\n         see ``_unsafe_metadata``.\n         """\n-        self.portal.invokeFactory(\'Document\', id="page", title="page")\n+        self.portal.invokeFactory("Document", id="page", title="page")\n         self.portal.page.reindexObject()\n         # Downgrade permissions\n         setRoles(self.portal, TEST_USER_ID, [])\n         view = VocabularyView(self.portal, self.request)\n         query = {\n-            \'criteria\': [\n+            "criteria": [\n                 {\n-                    \'i\': \'path\',\n-                    \'o\': \'plone.app.querystring.operation.string.path\',\n-                    \'v\': \'/plone/page\'\n+                    "i": "path",\n+                    "o": "plone.app.querystring.operation.string.path",\n+                    "v": "/plone/page",\n                 }\n             ]\n         }\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.Catalog\',\n-            \'query\': json.dumps(query),\n-            \'attributes\': [\n-                \'id\',\n-                \'commentors\',\n-                \'Creator\',\n-                \'listCreators\',\n-            ]\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.Catalog",\n+                "query": json.dumps(query),\n+                "attributes": [\n+                    "id",\n+                    "commentors",\n+                    "Creator",\n+                    "listCreators",\n+                ],\n+            }\n+        )\n         data = json.loads(view())\n         # Only one result key should be returned, as ``commentors``,\n         # ``Creator`` and ``listCreators`` is considered unsafe and thus\n         # skipped.\n-        self.assertEqual(len(list(data[\'results\'][0].keys())), 1)\n+        self.assertEqual(len(list(data["results"][0].keys())), 1)\n \n     def testVocabularyBatching(self):\n         amount = 30\n         for i in range(amount):\n-            self.portal.invokeFactory(\'Document\', id="page" + str(i),\n-                                      title="Page" + str(i))\n-            self.portal[\'page\' + str(i)].reindexObject()\n+            self.portal.invokeFactory(\n+                "Document", id="page" + str(i), title="Page" + str(i)\n+            )\n+            self.portal["page" + str(i)].reindexObject()\n         view = VocabularyView(self.portal, self.request)\n         query = {\n-            \'criteria\': [\n+            "criteria": [\n                 {\n-                    \'i\': \'path\',\n-                    \'o\': \'plone.app.querystring.operation.string.path\',\n-                    \'v\': \'/plone\'\n+                    "i": "path",\n+                    "o": "plone.app.querystring.operation.string.path",\n+                    "v": "/plone",\n                 }\n             ]\n         }\n         # batch pages are 1-based\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.Catalog\',\n-            \'query\': json.dumps(query),\n-            \'attributes\': [\'UID\', \'id\', \'title\', \'path\'],\n-            \'batch\': {\n-                \'page\': \'1\',\n-                \'size\': \'10\'\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.Catalog",\n+                "query": json.dumps(query),\n+                "attributes": ["UID", "id", "title", "path"],\n+                "batch": {"page": "1", "size": "10"},\n             }\n-        })\n+        )\n         data = json.loads(view())\n-        self.assertEqual(len(data[\'results\']), 10)\n-        self.assertEqual(data[\'total\'], amount)\n+        self.assertEqual(len(data["results"]), 10)\n+        self.assertEqual(data["total"], amount)\n \n     def testVocabularyEncoding(self):\n         """The vocabulary should not return the binary encoded token\n@@ -242,41 +238,39 @@ def testVocabularyEncoding(self):\n         set. Fixes an encoding problem. See:\n         https://github.com/plone/Products.CMFPlone/issues/650\n         """\n-        test_val = \'N\xc3\xa5\xc3\xb8\xc3\xaf\'\n+        test_val = "N\xc3\xa5\xc3\xb8\xc3\xaf"\n \n-        self.portal.invokeFactory(\'Document\', id="page", title="page")\n+        self.portal.invokeFactory("Document", id="page", title="page")\n         self.portal.page.subject = (test_val,)\n-        self.portal.page.reindexObject(idxs=[\'Subject\'])\n+        self.portal.page.reindexObject(idxs=["Subject"])\n         processQueue()\n \n-        self.request.form[\'name\'] = \'plone.app.vocabularies.Keywords\'\n-        results = getMultiAdapter(\n-            (self.portal, self.request),\n-            name=\'getVocabulary\'\n-        )()\n+        self.request.form["name"] = "plone.app.vocabularies.Keywords"\n+        results = getMultiAdapter((self.portal, self.request), name="getVocabulary")()\n         results = json.loads(results)\n-        result = results[\'results\'][0]\n+        result = results["results"][0]\n \n-        self.assertEqual(result[\'text\'], test_val)\n-        self.assertEqual(result[\'id\'], test_val)\n+        self.assertEqual(result["text"], test_val)\n+        self.assertEqual(result["id"], test_val)\n \n     def testVocabularyUnauthorized(self):\n         setRoles(self.portal, TEST_USER_ID, [])\n         view = VocabularyView(self.portal, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.Users\',\n-            \'query\': TEST_USER_NAME\n-        })\n+        self.request.form.update(\n+            {"name": "plone.app.vocabularies.Users", "query": TEST_USER_NAME}\n+        )\n         data = json.loads(view())\n-        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n+        self.assertEqual(data["error"], "Vocabulary lookup not allowed")\n \n     def testVocabularyMissing(self):\n         view = VocabularyView(self.portal, self.request)\n-        self.request.form.update({\n-            \'name\': \'vocabulary.that.does.not.exist\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "vocabulary.that.does.not.exist",\n+            }\n+        )\n         data = json.loads(view())\n-        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n+        self.assertEqual(data["error"], "Vocabulary lookup not allowed")\n \n     def testPermissionCheckerAllowed(self):\n         # Setup a custom permission checker on the portal\n@@ -284,28 +278,33 @@ def testPermissionCheckerAllowed(self):\n         view = VocabularyView(self.portal, self.request)\n \n         # Allowed field is allowed\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.PortalTypes\',\n-            \'field\': \'allowed_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.PortalTypes",\n+                "field": "allowed_field",\n+            }\n+        )\n         data = json.loads(view())\n-        self.assertEqual(len(data[\'results\']),\n-                          len(self.portal.portal_types.objectIds()))\n+        self.assertEqual(\n+            len(data["results"]), len(self.portal.portal_types.objectIds())\n+        )\n         _disable_permission_checker(self.portal)\n \n     def testPermissionCheckerUnknownVocab(self):\n         _enable_permission_checker(self.portal)\n         view = VocabularyView(self.portal, self.request)\n         # Unknown vocabulary gives error\n-        self.request.form.update({\n-            \'name\': \'vocab.does.not.exist\',\n-            \'field\': \'allowed_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "vocab.does.not.exist",\n+                "field": "allowed_field",\n+            }\n+        )\n         data = json.loads(view())\n         self.assertEqual(\n-            data[\'error\'],\n-            \'No factory with name "{}" exists.\'.format(\n-                \'vocab.does.not.exist\'))\n+            data["error"],\n+            \'No factory with name "{}" exists.\'.format("vocab.does.not.exist"),\n+        )\n         _disable_permission_checker(self.portal)\n \n     def testPermissionCheckerDisallowed(self):\n@@ -313,12 +312,14 @@ def testPermissionCheckerDisallowed(self):\n         view = VocabularyView(self.portal, self.request)\n         # Disallowed field is not allowed\n         # Allowed field is allowed\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.PortalTypes\',\n-            \'field\': \'disallowed_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.PortalTypes",\n+                "field": "disallowed_field",\n+            }\n+        )\n         data = json.loads(view())\n-        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n+        self.assertEqual(data["error"], "Vocabulary lookup not allowed")\n         _disable_permission_checker(self.portal)\n \n     def testPermissionCheckerShortCircuit(self):\n@@ -326,23 +327,27 @@ def testPermissionCheckerShortCircuit(self):\n         view = VocabularyView(self.portal, self.request)\n         # Known vocabulary name short-circuits field permission check\n         # global permission\n-        self.request.form[\'name\'] = \'plone.app.vocabularies.Users\'\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.Users\',\n-            \'field\': \'disallowed_field\',\n-        })\n+        self.request.form["name"] = "plone.app.vocabularies.Users"\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.Users",\n+                "field": "disallowed_field",\n+            }\n+        )\n         data = json.loads(view())\n-        self.assertEqual(data[\'results\'], [])\n+        self.assertEqual(data["results"], [])\n         _disable_permission_checker(self.portal)\n \n     def testPermissionCheckerUnknownField(self):\n         _enable_permission_checker(self.portal)\n         view = VocabularyView(self.portal, self.request)\n         # Unknown field is raises error\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.PortalTypes\',\n-            \'field\': \'missing_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.PortalTypes",\n+                "field": "missing_field",\n+            }\n+        )\n         with self.assertRaises(AttributeError):\n             view()\n         _disable_permission_checker(self.portal)\n@@ -354,8 +359,8 @@ def testVocabularyUsers(self):\n         # Let\'s test that safe html is used on the fullname,\n         # as alternative to the workaround in PloneHotfix20210518.\n         for i in range(amount):\n-            id = \'user\' + str(i)\n-            acl_users.userFolderAddUser(id, \'secret\', [\'Member\'], [])\n+            id = "user" + str(i)\n+            acl_users.userFolderAddUser(id, "secret", ["Member"], [])\n             member = membership.getMemberById(id)\n             # Make user0 the hacker.\n             if i == 0:\n@@ -364,29 +369,27 @@ def testVocabularyUsers(self):\n                 fullname = id\n             member.setMemberProperties(mapping={"fullname": fullname})\n         view = VocabularyView(self.portal, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.Users\',\n-            \'query\': \'user\'\n-        })\n+        self.request.form.update(\n+            {"name": "plone.app.vocabularies.Users", "query": "user"}\n+        )\n         data = json.loads(view())\n \n-        self.assertEqual(len(data[\'results\']), amount)\n+        self.assertEqual(len(data["results"]), amount)\n         # Let\'s sort, just to be sure.\n-        results = sorted(data[\'results\'], key=operator.itemgetter("id"))\n+        results = sorted(data["results"], key=operator.itemgetter("id"))\n         # The first one is the hacker.  The hack should have failed.\n-        self.assertDictEqual(results[0], {\'id\': \'user0\', \'text\': \'user  hacker\'})\n+        self.assertDictEqual(results[0], {"id": "user0", "text": "user  hacker"})\n \n     def testSource(self):\n         from z3c.form.browser.text import TextWidget\n-        from zope.interface import implementer\n-        from zope.interface import Interface\n+        from zope.interface import Interface, implementer\n         from zope.schema import Choice\n         from zope.schema.interfaces import ISource\n \n         @implementer(ISource)\n         class DummyCatalogSource:\n             def search_catalog(self, query):\n-                querytext = query[\'SearchableText\'][\'query\']\n+                querytext = query["SearchableText"]["query"]\n                 return [mock.Mock(id=querytext)]\n \n         widget = TextWidget(self.request)\n@@ -395,32 +398,34 @@ def search_catalog(self, query):\n         widget.field.interface = Interface\n \n         from plone.app.content.browser.vocabulary import SourceView\n+\n         view = SourceView(widget, self.request)\n         query = {\n-            \'criteria\': [\n+            "criteria": [\n                 {\n-                    \'i\': \'SearchableText\',\n-                    \'o\': \'plone.app.querystring.operation.string.is\',\n-                    \'v\': \'foo\'\n+                    "i": "SearchableText",\n+                    "o": "plone.app.querystring.operation.string.is",\n+                    "v": "foo",\n                 }\n             ]\n         }\n-        self.request.form.update({\n-            \'query\': json.dumps(query),\n-            \'attributes\': \'id\',\n-        })\n+        self.request.form.update(\n+            {\n+                "query": json.dumps(query),\n+                "attributes": "id",\n+            }\n+        )\n         data = json.loads(view())\n-        self.assertEqual(len(data[\'results\']), 1)\n-        self.assertEqual(data[\'results\'][0][\'id\'], \'foo\')\n+        self.assertEqual(len(data["results"]), 1)\n+        self.assertEqual(data["results"][0]["id"], "foo")\n \n     def testSourceCollectionField(self):\n         # This test uses a collection field\n         # and a source providing the \'search\' method\n         # to help achieve coverage.\n         from z3c.form.browser.text import TextWidget\n-        from zope.interface import implementer\n-        from zope.interface import Interface\n-        from zope.schema import List, Choice\n+        from zope.interface import Interface, implementer\n+        from zope.schema import Choice, List\n         from zope.schema.interfaces import ISource\n         from zope.schema.vocabulary import SimpleTerm\n \n@@ -436,37 +441,39 @@ def search(self, query):\n         widget.field.interface = Interface\n \n         from plone.app.content.browser.vocabulary import SourceView\n+\n         view = SourceView(widget, self.request)\n         query = {\n-            \'criteria\': [\n+            "criteria": [\n                 {\n-                    \'i\': \'SearchableText\',\n-                    \'o\': \'plone.app.querystring.operation.string.is\',\n-                    \'v\': \'foo\'\n+                    "i": "SearchableText",\n+                    "o": "plone.app.querystring.operation.string.is",\n+                    "v": "foo",\n                 }\n             ],\n-            \'sort_on\': \'id\',\n-            \'sort_order\': \'ascending\',\n+            "sort_on": "id",\n+            "sort_order": "ascending",\n         }\n-        self.request.form.update({\n-            \'query\': json.dumps(query),\n-            \'batch\': json.dumps({\'size\': 10, \'page\': 1}),\n-        })\n+        self.request.form.update(\n+            {\n+                "query": json.dumps(query),\n+                "batch": json.dumps({"size": 10, "page": 1}),\n+            }\n+        )\n         data = json.loads(view())\n-        self.assertEqual(len(data[\'results\']), 1)\n-        self.assertEqual(data[\'results\'][0][\'id\'], \'foo\')\n+        self.assertEqual(len(data["results"]), 1)\n+        self.assertEqual(data["results"][0]["id"], "foo")\n \n     def testSourcePermissionDenied(self):\n         from z3c.form.browser.text import TextWidget\n-        from zope.interface import implementer\n-        from zope.interface import Interface\n+        from zope.interface import Interface, implementer\n         from zope.schema import Choice\n         from zope.schema.interfaces import ISource\n \n         @implementer(ISource)\n         class DummyCatalogSource:\n             def search_catalog(self, query):\n-                querytext = query[\'SearchableText\'][\'query\']\n+                querytext = query["SearchableText"]["query"]\n                 return [mock.Mock(id=querytext)]\n \n         widget = TextWidget(self.request)\n@@ -475,36 +482,41 @@ def search_catalog(self, query):\n         widget.field.interface = Interface\n \n         from plone.app.content.browser.vocabulary import SourceView\n+\n         view = SourceView(widget, self.request)\n         query = {\n-            \'criteria\': [\n+            "criteria": [\n                 {\n-                    \'i\': \'SearchableText\',\n-                    \'o\': \'plone.app.querystring.operation.string.is\',\n-                    \'v\': \'foo\'\n+                    "i": "SearchableText",\n+                    "o": "plone.app.querystring.operation.string.is",\n+                    "v": "foo",\n                 }\n             ]\n         }\n-        self.request.form.update({\n-            \'query\': json.dumps(query),\n-        })\n+        self.request.form.update(\n+            {\n+                "query": json.dumps(query),\n+            }\n+        )\n         logout()\n         data = json.loads(view())\n-        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed.\')\n+        self.assertEqual(data["error"], "Vocabulary lookup not allowed.")\n \n     def testSourceDefaultPermission(self):\n-        from plone.app.content.browser.vocabulary import SourceView\n         from z3c.form.browser.text import TextWidget\n \n+        from plone.app.content.browser.vocabulary import SourceView\n+\n         widget = TextWidget(self.request)\n         view = SourceView(widget, self.request)\n         self.assertEqual(view.default_permission, "cmf.ModifyPortalContent")\n \n     def testSourceDefaultPermissionOnAddForm(self):\n-        from plone.app.content.browser.vocabulary import SourceView\n         from z3c.form import form\n         from z3c.form.browser.text import TextWidget\n \n+        from plone.app.content.browser.vocabulary import SourceView\n+\n         widget = TextWidget(self.request)\n         widget.form = form.AddForm(self.portal, self.request)\n \n@@ -513,8 +525,7 @@ def testSourceDefaultPermissionOnAddForm(self):\n \n     def testSourceTextQuery(self):\n         from z3c.form.browser.text import TextWidget\n-        from zope.interface import implementer\n-        from zope.interface import Interface\n+        from zope.interface import Interface, implementer\n         from zope.schema import Choice\n         from zope.schema.interfaces import ISource\n \n@@ -529,63 +540,67 @@ def search(self, query):\n         widget.field.interface = Interface\n \n         from plone.app.content.browser.vocabulary import SourceView\n+\n         view = SourceView(widget, self.request)\n-        self.request.form.update({\n-            \'query\': \'foo\',\n-            \'attributes\': \'id\',\n-        })\n+        self.request.form.update(\n+            {\n+                "query": "foo",\n+                "attributes": "id",\n+            }\n+        )\n         data = json.loads(view())\n-        self.assertEqual(len(data[\'results\']), 1)\n-        self.assertEqual(data[\'results\'][0][\'id\'], \'foo\')\n+        self.assertEqual(len(data["results"]), 1)\n+        self.assertEqual(data["results"][0]["id"], "foo")\n \n     def testQueryStringConfiguration(self):\n         view = QueryStringIndexOptions(self.portal, self.request)\n         data = json.loads(view())\n         # just test one so we know it\'s working...\n-        self.assertEqual(data[\'indexes\'][\'sortable_title\'][\'sortable\'], True)\n+        self.assertEqual(data["indexes"]["sortable_title"]["sortable"], True)\n \n-    @mock.patch(\'zope.i18n.negotiate\', new=lambda ctx: \'de\')\n+    @mock.patch("zope.i18n.negotiate", new=lambda ctx: "de")\n     def testUntranslatableMetadata(self):\n         """Test translation of ``@@getVocabulary`` view results.\n         From the standard metadata columns, only ``Type`` is translated.\n         """\n         # Language is set via language negotiaton patch.\n \n-        self.portal.invokeFactory(\'Document\', id="page", title="page")\n+        self.portal.invokeFactory("Document", id="page", title="page")\n         self.portal.page.reindexObject()\n         view = VocabularyView(self.portal, self.request)\n         query = {\n-            \'criteria\': [\n+            "criteria": [\n                 {\n-                    \'i\': \'path\',\n-                    \'o\': \'plone.app.querystring.operation.string.path\',\n-                    \'v\': \'/plone/page\'\n+                    "i": "path",\n+                    "o": "plone.app.querystring.operation.string.path",\n+                    "v": "/plone/page",\n                 }\n             ]\n         }\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.Catalog\',\n-            \'query\': json.dumps(query),\n-            \'attributes\': [\n-                \'id\',\n-                \'portal_type\',\n-                \'Type\',\n-            ]\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.Catalog",\n+                "query": json.dumps(query),\n+                "attributes": [\n+                    "id",\n+                    "portal_type",\n+                    "Type",\n+                ],\n+            }\n+        )\n \n         # data[\'results\'] should return one item, which represents the document\n         # created before.\n         data = json.loads(view())\n \n         # Type is translated\n-        self.assertEqual(data[\'results\'][0][\'Type\'], \'Seite\')\n+        self.assertEqual(data["results"][0]["Type"], "Seite")\n \n         # portal_type is never translated\n-        self.assertEqual(data[\'results\'][0][\'portal_type\'], \'Document\')\n+        self.assertEqual(data["results"][0]["portal_type"], "Document")\n \n     def testGetMimeIcon(self):\n-        """ Check if the returned icon is correct\n-        """\n+        """Check if the returned icon is correct"""\n         self.request.form.update(\n             {\n                 "name": "plone.app.vocabularies.Catalog",\n@@ -599,9 +614,7 @@ def testGetMimeIcon(self):\n         obj = self.portal["my-file"]\n         obj.reindexObject()\n \n-        self.assertListEqual(\n-            json.loads(view())["results"], [{"getMimeIcon": None}]\n-        )\n+        self.assertListEqual(json.loads(view())["results"], [{"getMimeIcon": None}])\n \n         # mock a pdf\n         obj.file = mock.Mock(contentType="application/pdf")\n@@ -619,6 +632,7 @@ def testGetMimeIcon(self):\n             [{"getMimeIcon": "/plone/++resource++mimetype.icons/unknown.png"}],\n         )\n \n+\n class FunctionalBrowserTest(unittest.TestCase):\n \n     layer = PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n@@ -626,38 +640,40 @@ class FunctionalBrowserTest(unittest.TestCase):\n     def setUp(self):\n         self.request = TestRequest()\n         setRequest(self.request)\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testFileUpload(self):\n         view = FileUploadView(self.portal, self.request)\n         from plone.namedfile.file import FileChunk\n-        chunk = FileChunk(b\'foobar\')\n-        chunk.filename = \'test.xml\'\n-        self.request.form[\'file\'] = chunk\n-        self.request.REQUEST_METHOD = \'POST\'\n+\n+        chunk = FileChunk(b"foobar")\n+        chunk.filename = "test.xml"\n+        self.request.form["file"] = chunk\n+        self.request.REQUEST_METHOD = "POST"\n         # the next calls plone.app.dexterity.factories and does a\n         # transaction.commit. Needs cleanup and FunctionalTesting layer.\n         data = json.loads(view())\n-        self.assertEqual(data[\'url\'], \'http://nohost/plone/test.xml\')\n-        self.assertTrue(data[\'UID\'] is not None)\n+        self.assertEqual(data["url"], "http://nohost/plone/test.xml")\n+        self.assertTrue(data["UID"] is not None)\n         # clean it up...\n-        self.portal.manage_delObjects([\'test.xml\'])\n+        self.portal.manage_delObjects(["test.xml"])\n         transaction.commit()\n \n     def testFileUploadTxt(self):\n         view = FileUploadView(self.portal, self.request)\n         from plone.namedfile.file import FileChunk\n-        chunk = FileChunk(b\'foobar\')\n-        chunk.filename = \'test.txt\'\n-        self.request.form[\'file\'] = chunk\n-        self.request.REQUEST_METHOD = \'POST\'\n+\n+        chunk = FileChunk(b"foobar")\n+        chunk.filename = "test.txt"\n+        self.request.form["file"] = chunk\n+        self.request.REQUEST_METHOD = "POST"\n         # the next calls plone.app.dexterity.factories and does a\n         # transaction.commit. Needs cleanup and FunctionalTesting layer.\n         data = json.loads(view())\n-        self.assertEqual(data[\'url\'], \'http://nohost/plone/test.txt\')\n-        self.assertTrue(data[\'UID\'] is not None)\n+        self.assertEqual(data["url"], "http://nohost/plone/test.txt")\n+        self.assertTrue(data["UID"] is not None)\n         # clean it up...\n-        self.portal.manage_delObjects([\'test.txt\'])\n+        self.portal.manage_delObjects(["test.txt"])\n         transaction.commit()\ndiff --git a/plone/app/content/utils.py b/plone/app/content/utils.py\nindex 978273b..64692a2 100644\n--- a/plone/app/content/utils.py\n+++ b/plone/app/content/utils.py\n@@ -1,9 +1,10 @@\n-from DateTime import DateTime\n+import datetime\n \n import Missing\n-import datetime\n+\n # use simplejson because it\'s ahead of stdlib and supports more types\n import simplejson\n+from DateTime import DateTime\n \n \n def custom_json_handler(obj):\ndiff --git a/setup.py b/setup.py\nindex e0e051c..773d670 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,16 +1,17 @@\n-from setuptools import find_packages\n-from setuptools import setup\n+from setuptools import find_packages, setup\n \n-version = \'4.0.0a4.dev0\'\n+version = "4.0.0a4.dev0"\n \n setup(\n-    name=\'plone.app.content\',\n+    name="plone.app.content",\n     version=version,\n     description="Content Views for Plone",\n-    long_description=\'\\n\\n\'.join([\n-        open("README.rst").read(),\n-        open("CHANGES.rst").read(),\n-    ]),\n+    long_description="\\n\\n".join(\n+        [\n+            open("README.rst").read(),\n+            open("CHANGES.rst").read(),\n+        ]\n+    ),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n@@ -25,44 +26,44 @@\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'plone content views viewlet\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.content\',\n-    license=\'GPL version 2\',\n+    keywords="plone content views viewlet",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.content",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require=dict(\n         test=[\n-            \'plone.app.contenttypes\',\n-            \'plone.app.testing\',\n+            "plone.app.contenttypes",\n+            "plone.app.testing",\n         ]\n     ),\n     install_requires=[\n-        \'Acquisition\',\n-        \'plone.app.widgets\',\n-        \'plone.batching\',\n-        \'plone.i18n\',\n-        \'plone.memoize\',\n-        \'plone.protect\',\n-        \'Products.CMFCore>=2.2.0dev\',\n-        \'Products.CMFDynamicViewFTI\',  # required for cmf.ModifyViewTemplate\n-        \'Products.CMFPlone\',\n-        \'plone.app.vocabularies>4.1.2\',\n-        \'setuptools\',\n-        \'simplejson\',\n-        \'z3c.form\',\n-        \'zope.component\',\n-        \'zope.container\',\n-        \'zope.event\',\n-        \'zope.i18n\',\n-        \'zope.i18nmessageid\',\n-        \'zope.interface\',\n-        \'zope.lifecycleevent\',\n-        \'zope.publisher\',\n-        \'zope.schema\',\n-        \'Zope\',\n+        "Acquisition",\n+        "plone.app.widgets",\n+        "plone.batching",\n+        "plone.i18n",\n+        "plone.memoize",\n+        "plone.protect",\n+        "Products.CMFCore>=2.2.0dev",\n+        "Products.CMFDynamicViewFTI",  # required for cmf.ModifyViewTemplate\n+        "Products.CMFPlone",\n+        "plone.app.vocabularies>4.1.2",\n+        "setuptools",\n+        "simplejson",\n+        "z3c.form",\n+        "zope.component",\n+        "zope.container",\n+        "zope.event",\n+        "zope.i18n",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n+        "zope.lifecycleevent",\n+        "zope.publisher",\n+        "zope.schema",\n+        "Zope",\n     ],\n )\n'

