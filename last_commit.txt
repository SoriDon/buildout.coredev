Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2019-02-03T12:47:19+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.robotframework/commit/1e03a07de04d7ce2f05cdddd59f4766b9a26a74b

Modernize signal handling

Use the standard library signal module instead of the ZServer Signal module

Fixes #97

Files changed:
M CHANGES.rst
M src/plone/app/robotframework/reload.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex dd9f948..94e2c7d 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,6 +14,10 @@ New features:\n \n Bug fixes:\n \n+- Use the standard library signal module instead of the ZServer Signal module\n+  (Fixes #97)\n+  [ale-rt]\n+\n - Remove five.globalrequest dependency.\n   It has been deprecated upstream (Zope 4).\n   [gforcada]\ndiff --git a/src/plone/app/robotframework/reload.py b/src/plone/app/robotframework/reload.py\nindex 418b653..9a57feb 100644\n--- a/src/plone/app/robotframework/reload.py\n+++ b/src/plone/app/robotframework/reload.py\n@@ -1,20 +1,23 @@\n # -*- coding: utf-8 -*-\n \n+from watchdog.events import FileSystemEventHandler\n+from watchdog.observers import Observer\n+\n import os\n import signal\n import time\n \n-from Signals.SignalHandler import SignalHandler\n-from watchdog.events import FileSystemEventHandler\n-from watchdog.observers import Observer\n+\n+def TIME():\n+    return time.strftime(\'%H:%M:%S\')\n \n \n-registerHandler = SignalHandler.registerHandler\n+def WAIT(msg):\n+    return \'{0} [\\033[33m wait \\033[0m] {1}\'.format(TIME(), msg)\n \n \n-TIME = lambda: time.strftime(\'%H:%M:%S\')\n-WAIT = lambda msg:  \'{0} [\\033[33m wait \\033[0m] {1}\'.format(TIME(), msg)\n-ERROR = lambda msg: \'{0} [\\033[31m ERROR \\033[0m] {1}\'.format(TIME(), msg)\n+def ERROR(msg):\n+    return \'{0} [\\033[31m ERROR \\033[0m] {1}\'.format(TIME(), msg)\n \n \n class Watcher(FileSystemEventHandler):\n@@ -33,8 +36,8 @@ def start(self):\n         """Start file monitoring thread\n         """\n \n-        registerHandler(signal.SIGINT, self._exitHandler)\n-        registerHandler(signal.SIGTERM, self._exitHandler)\n+        signal.signal(signal.SIGINT, self._exitHandler)\n+        signal.signal(signal.SIGTERM, self._exitHandler)\n \n         for path in self.paths:\n             print(WAIT("Watchdog is watching for changes in %s" % path))\n@@ -116,23 +119,24 @@ def start(self):\n         """\n         # SIGCHLD tells us that child process has really died and we can spawn\n         # new child\n-        registerHandler(signal.SIGCHLD, self._waitChildToDieAndScheduleNew)\n+        signal.signal(signal.SIGCHLD, self._waitChildToDieAndScheduleNew)\n \n         # With SIGUSR1 child can tell that it dies by request, not by exception\n         # etc.\n-        registerHandler(signal.SIGUSR1, self._childIsGoingToDie)\n+        signal.signal(signal.SIGUSR1, self._childIsGoingToDie)\n \n         self.loop()\n \n     def loop(self):\n         """Magic happens\n         """\n-        registerHandler(signal.SIGINT, self._parentExitHandler)\n-        registerHandler(signal.SIGTERM, self._parentExitHandler)\n+        signal.signal(signal.SIGINT, self._parentExitHandler)\n+        signal.signal(signal.SIGTERM, self._parentExitHandler)\n \n         self.active = True\n \n-        print(WAIT("Fork loop now starting on parent process %i" % os.getpid()))\n+        msg = "Fork loop now starting on parent process %i" % os.getpid()\n+        print(WAIT(msg))\n         while True:\n             self.forking = False\n \n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2019-02-07T14:19:54+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.robotframework/commit/1c25bb251bf8cf11d45433d1f17922ae1bc8d9df

Merge remote-tracking branch 'origin/master' into use-std-library-signal-handlers

Files changed:
M .travis.yml
M CHANGES.rst
M setup.cfg

b'diff --git a/.travis.yml b/.travis.yml\nindex 7557833..8eaa806 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -1,10 +1,9 @@\n+dist: xenial\n language: python\n python: 2.7\n sudo: false\n addons:\n-  sauce_connect:\n-    username: $SAUCE_USERNAME\n-    access_key: $SAUCE_ACCESS_KEY\n+  sauce_connect: true\n cache:\n   pip: true\n   directories:\n@@ -19,6 +18,7 @@ env:\n     - ARTIFACTS_S3_BUCKET=plone.app.robotframework\n     - ROBOT_BUILD_NUMBER=travis-$TRAVIS_BUILD_NUMBER\n     - ROBOT_REMOTE_URL=http://$SAUCE_USERNAME:$SAUCE_ACCESS_KEY@ondemand.saucelabs.com:80/wd/hub\n+    - ZSERVER_PORT=55001\n   matrix:\n     - ROBOT_BROWSER=firefox ROBOT_DESIRED_CAPABILITIES=tunnel-identifier:$TRAVIS_JOB_NUMBER\n     - ROBOT_BROWSER=chrome ROBOT_DESIRED_CAPABILITIES=tunnel-identifier:$TRAVIS_JOB_NUMBER\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 94e2c7d..0f52f21 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -18,6 +18,10 @@ Bug fixes:\n   (Fixes #97)\n   [ale-rt]\n \n+- Fix the travis build which is broken since we are picking a random port\n+  (fixes #100)\n+  [ale-rt]\n+\n - Remove five.globalrequest dependency.\n   It has been deprecated upstream (Zope 4).\n   [gforcada]\ndiff --git a/setup.cfg b/setup.cfg\nindex b1d742e..8782193 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -7,12 +7,7 @@ ignore =\n     templates\n     templates/varnish.vcl.in\n \n-# When Python 2-3 compatible:\n-# [bdist_wheel]\n-# universal = 1\n \n-[zest.releaser]\n-create-wheel = yes\n \n [isort]\n force_alphabetical_sort = True\n@@ -22,3 +17,6 @@ line_length = 79\n not_skip = __init__.py\n use_parentheses = True\n multi_line_output = 3\n+\n+[bdist_wheel]\n+universal = 1\n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2019-02-07T15:23:31+01:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.robotframework/commit/23fd5094b5bb2e1bbeafed6a5a3e0a42cc11eb51

Merge pull request #98 from plone/use-std-library-signal-handlers

Modernize signal handling

Files changed:
M CHANGES.rst
M src/plone/app/robotframework/reload.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex a280d4b..0f52f21 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,6 +14,10 @@ New features:\n \n Bug fixes:\n \n+- Use the standard library signal module instead of the ZServer Signal module\n+  (Fixes #97)\n+  [ale-rt]\n+\n - Fix the travis build which is broken since we are picking a random port\n   (fixes #100)\n   [ale-rt]\ndiff --git a/src/plone/app/robotframework/reload.py b/src/plone/app/robotframework/reload.py\nindex 418b653..9a57feb 100644\n--- a/src/plone/app/robotframework/reload.py\n+++ b/src/plone/app/robotframework/reload.py\n@@ -1,20 +1,23 @@\n # -*- coding: utf-8 -*-\n \n+from watchdog.events import FileSystemEventHandler\n+from watchdog.observers import Observer\n+\n import os\n import signal\n import time\n \n-from Signals.SignalHandler import SignalHandler\n-from watchdog.events import FileSystemEventHandler\n-from watchdog.observers import Observer\n+\n+def TIME():\n+    return time.strftime(\'%H:%M:%S\')\n \n \n-registerHandler = SignalHandler.registerHandler\n+def WAIT(msg):\n+    return \'{0} [\\033[33m wait \\033[0m] {1}\'.format(TIME(), msg)\n \n \n-TIME = lambda: time.strftime(\'%H:%M:%S\')\n-WAIT = lambda msg:  \'{0} [\\033[33m wait \\033[0m] {1}\'.format(TIME(), msg)\n-ERROR = lambda msg: \'{0} [\\033[31m ERROR \\033[0m] {1}\'.format(TIME(), msg)\n+def ERROR(msg):\n+    return \'{0} [\\033[31m ERROR \\033[0m] {1}\'.format(TIME(), msg)\n \n \n class Watcher(FileSystemEventHandler):\n@@ -33,8 +36,8 @@ def start(self):\n         """Start file monitoring thread\n         """\n \n-        registerHandler(signal.SIGINT, self._exitHandler)\n-        registerHandler(signal.SIGTERM, self._exitHandler)\n+        signal.signal(signal.SIGINT, self._exitHandler)\n+        signal.signal(signal.SIGTERM, self._exitHandler)\n \n         for path in self.paths:\n             print(WAIT("Watchdog is watching for changes in %s" % path))\n@@ -116,23 +119,24 @@ def start(self):\n         """\n         # SIGCHLD tells us that child process has really died and we can spawn\n         # new child\n-        registerHandler(signal.SIGCHLD, self._waitChildToDieAndScheduleNew)\n+        signal.signal(signal.SIGCHLD, self._waitChildToDieAndScheduleNew)\n \n         # With SIGUSR1 child can tell that it dies by request, not by exception\n         # etc.\n-        registerHandler(signal.SIGUSR1, self._childIsGoingToDie)\n+        signal.signal(signal.SIGUSR1, self._childIsGoingToDie)\n \n         self.loop()\n \n     def loop(self):\n         """Magic happens\n         """\n-        registerHandler(signal.SIGINT, self._parentExitHandler)\n-        registerHandler(signal.SIGTERM, self._parentExitHandler)\n+        signal.signal(signal.SIGINT, self._parentExitHandler)\n+        signal.signal(signal.SIGTERM, self._parentExitHandler)\n \n         self.active = True\n \n-        print(WAIT("Fork loop now starting on parent process %i" % os.getpid()))\n+        msg = "Fork loop now starting on parent process %i" % os.getpid()\n+        print(WAIT(msg))\n         while True:\n             self.forking = False\n \n'

