Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-09-17T21:05:46-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/7c530a5d35ec95a3acadd90dc76f3ce2e461aba0

Make tests pass with longer minimum password

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py
M Products/CMFPlone/testing.py
M Products/CMFPlone/tests/LoginAndLogout.rst
M Products/CMFPlone/tests/csrf.txt
M Products/CMFPlone/tests/pwreset_browser.rst
M Products/CMFPlone/tests/search_form.rst
M Products/CMFPlone/tests/testActionsTool.py
M Products/CMFPlone/tests/testCSRFProtection.py
M Products/CMFPlone/tests/testCatalogTool.py
M Products/CMFPlone/tests/testContentSecurity.py
M Products/CMFPlone/tests/testCutPasteSecurity.py
M Products/CMFPlone/tests/testEmailLogin.py
M Products/CMFPlone/tests/testExternalEditorEnabled.py
M Products/CMFPlone/tests/testPloneTool.py
M Products/CMFPlone/tests/testRegistrationTool.py
M Products/CMFPlone/tests/testWorkflowTool.py
M Products/CMFPlone/tests/test_login_form.py
M Products/CMFPlone/tests/test_login_logout.py

b'diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py\nindex 157371faa7..c8add25703 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py\n@@ -28,14 +28,14 @@ def setUp(self):\n         self.browser.handleErrors = False\n         # we have to create a user on the zope root. this just does not work\n         # with plone.app.testing and TEST_USER or SITE_OWNER\n-        self.app.acl_users.userFolderAddUser(\'app\', \'secret\', [\'Manager\'], [])\n+        self.app.acl_users.userFolderAddUser(\'app\', TEST_USER_PASSWORD, [\'Manager\'], [])\n         login(self.app[\'acl_users\'], \'app\')\n \n         import transaction\n         transaction.commit()\n         self.browser.addHeader(\n             \'Authorization\',\n-            \'Basic {}:{}\'.format(\'app\', \'secret\')\n+            \'Basic {}:{}\'.format(\'app\', TEST_USER_PASSWORD)\n         )\n \n         self.site_administrator_browser = Browser(self.app)\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py\nindex 9b567ea24c..d2803c0cde 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py\n@@ -21,9 +21,9 @@ class TestSiteAdministratorRoleFunctional(unittest.TestCase):\n \n     def _generateUsers(self):\n         rtool = getToolByName(self.portal, \'portal_registration\')\n-        rtool.addMember(\'DIispfuF\', \'secret\', [\'Member\'], [])\n-        rtool.addMember(\'siteadmin\', \'secret\', [\'Site Administrator\'], [])\n-        rtool.addMember(\'root\', \'secret\', [\'Manager\'], [])\n+        rtool.addMember(\'DIispfuF\', TEST_USER_PASSWORD, [\'Member\'], [])\n+        rtool.addMember(\'siteadmin\', TEST_USER_PASSWORD, [\'Site Administrator\'], [])\n+        rtool.addMember(\'root\', TEST_USER_PASSWORD, [\'Manager\'], [])\n \n     def setUp(self):\n         self.app = self.layer[\'app\']\n@@ -108,7 +108,7 @@ def testManagerCanDelegateManagerRoleForUsers(self):\n     def testNonManagersCannotDelegateManagerRoleForUsers(self):\n         # a user without the Manager role cannot delegate the Manager role\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic siteadmin:secret\')\n+            \'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n         self.browser.open(self.usergroups_url)\n         form = {\n             \'_authenticator\': self._get_authenticator(),\n@@ -127,7 +127,7 @@ def testNonManagersCanEditOtherRolesOfUsersWithManagerRole(self):\n         roles = self.portal.acl_users.getUserById(\'root\').getRoles()\n         self.assertEqual([\'Manager\', \'Authenticated\'], roles)\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic siteadmin:secret\')\n+            \'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n         self.browser.open(self.usergroups_url)\n         form = {\n             \'_authenticator\': self._get_authenticator(),\n@@ -143,7 +143,7 @@ def testNonManagersCanEditOtherRolesOfUsersWithManagerRole(self):\n \n     def testGroupManagerRoleCheckboxIsDisabledForNonManagers(self):\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic siteadmin:secret\')\n+            \'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n         self.browser.open(self.groups_url)\n         contents = self._simplify_white_space(self.browser.contents)\n         self.assertTrue(\'<input type="checkbox" class="noborder" \'\n@@ -173,7 +173,7 @@ def testManagerCanDelegateManagerRoleForGroups(self):\n     def testNonManagersCannotDelegateManagerRoleForGroups(self):\n         # a user without the Manager role cannot delegate the Manager role\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic siteadmin:secret\')\n+            \'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n \n         self.browser.open(self.groups_url)\n         form = {\n@@ -191,7 +191,7 @@ def testNonManagersCannotDelegateManagerRoleForGroups(self):\n \n     def testNonManagersCanEditOtherRolesOfGroupsWithManagerRole(self):\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic siteadmin:secret\')\n+            \'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n \n         roles = self.portal.acl_users.getUserById(\'root\').getRoles()\n         self.assertEqual([\'Manager\', \'Authenticated\'], roles)\n@@ -210,7 +210,7 @@ def testNonManagersCanEditOtherRolesOfGroupsWithManagerRole(self):\n \n     def test_usergroup_usermembership_blocks_escalation(self):\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic siteadmin:secret\')\n+            \'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n \n         # groups granting the Manager role shouldn\'t show as a valid option to\n         # add\n@@ -241,7 +241,7 @@ def test_usergroup_groupmembership_blocks_escalation(self):\n         # should not show section to add users for groups granting the Manager\n         # role\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic siteadmin:secret\')\n+            \'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n \n         self.browser.open(\n             self.portal_url + \'/@@usergroup-groupmembership?groupname=Administrators\'\n@@ -268,7 +268,7 @@ def test_user_registration_form_blocks_escalation(self):\n         # groups granting the Manager role should not be available for\n         # selection\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic siteadmin:secret\')\n+            \'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n         self.browser.open(self.portal_url + \'/@@new-user\')\n         contents = self._simplify_white_space(self.browser.contents)\n         self.assertFalse(\n@@ -281,8 +281,8 @@ def test_user_registration_form_blocks_escalation(self):\n             \'_authenticator\': self._get_authenticator(),\n             \'form.widgets.username\': \'newuser\',\n             \'form.widgets.email\': \'newuser@example.com\',\n-            \'form.widgets.password\': \'secret\',\n-            \'form.widgets.password_ctl\': \'secret\',\n+            \'form.widgets.password\': TEST_USER_PASSWORD,\n+            \'form.widgets.password_ctl\': TEST_USER_PASSWORD,\n             \'form.widgets.groups:list\': \'Administrators\',\n             \'form.widgets.groups-empty-marker\': \'1\',\n             \'form.buttons.register\': \'Register\',\n@@ -297,7 +297,7 @@ def test_users_overview_blocks_deleting_managers(self):\n         # a user without the Manager role cannot delete a user with the\n         # Manager role\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic siteadmin:secret\')\n+            \'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n \n         self.browser.open(self.usergroups_url)\n         contents = self._simplify_white_space(self.browser.contents)\n@@ -324,7 +324,7 @@ def test_groups_overview_blocks_deleting_managers(self):\n         # a user without the Manager role cannot delete a group with the\n         # Manager role\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic siteadmin:secret\')\n+            \'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n \n         self.browser.open(self.groups_url)\n         contents = self._simplify_white_space(self.browser.contents)\ndiff --git a/Products/CMFPlone/testing.py b/Products/CMFPlone/testing.py\nindex 49548c9595..b65165f6fe 100644\n--- a/Products/CMFPlone/testing.py\n+++ b/Products/CMFPlone/testing.py\n@@ -8,6 +8,7 @@\n from plone.app.testing import PloneSandboxLayer\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.testing.layers import FunctionalTesting\n from plone.app.testing.layers import IntegrationTesting\n from plone.testing import zope\n@@ -40,7 +41,7 @@ def setUpZope(self, app, configurationContext):\n     def setUpPloneSite(self, portal):\n         portal.acl_users.userFolderAddUser(\n             \'admin\',\n-            \'secret\',\n+            TEST_USER_PASSWORD,\n             [\'Manager\'],\n             []\n         )\ndiff --git a/Products/CMFPlone/tests/LoginAndLogout.rst b/Products/CMFPlone/tests/LoginAndLogout.rst\nindex 0245fc5a15..ecae01adf1 100644\n--- a/Products/CMFPlone/tests/LoginAndLogout.rst\n+++ b/Products/CMFPlone/tests/LoginAndLogout.rst\n@@ -115,11 +115,11 @@ A user defined in the root user folder should be able to log in into\n the site:\n \n     >>> browser.getLink(\'Home\').click()\n-    >>> app.acl_users.userFolderAddUser(\'rootuser\', \'secret\', [], [])\n+    >>> app.acl_users.userFolderAddUser(\'rootuser\', TEST_USER_PASSWORD, [], [])\n     >>> transaction.commit()\n     >>> browser.open(\'http://nohost/plone/login_form\')\n     >>> browser.getControl(\'Login Name\').value = \'rootuser\'\n-    >>> browser.getControl(\'Password\').value = \'secret\'\n+    >>> browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n     >>> browser.getControl(\'Log in\').click()\n     >>> \'You are now logged in\' in browser.contents\n     True\ndiff --git a/Products/CMFPlone/tests/csrf.txt b/Products/CMFPlone/tests/csrf.txt\nindex b5f8e22098..f03dbbb376 100644\n--- a/Products/CMFPlone/tests/csrf.txt\n+++ b/Products/CMFPlone/tests/csrf.txt\n@@ -98,8 +98,8 @@ be able to add new users himself if he wishes so:\n   >>> browser.getControl(\'Full Name\').value = \'John Doe\'\n   >>> browser.getControl(\'User Name\').value = \'john\'\n   >>> browser.getControl(\'Email\').value = \'john@foo-security.com\'\n-  >>> browser.getControl(\'Password\').value = \'y0d4Wg\'\n-  >>> browser.getControl(\'Confirm password\').value = \'y0d4Wg\'\n+  >>> browser.getControl(\'Password\').value = \'correct horse battery staple\'\n+  >>> browser.getControl(\'Confirm password\').value = \'correct horse battery staple\'\n   >>> browser.getControl(\'Register\').click()\n   >>> \'User added.\' in browser.contents\n   True\n@@ -145,17 +145,17 @@ know the current passwort to exploit this, but we\'ll check nevertheless:\n \n   >>> browser.open(\'http://nohost/plone/@@change-password\')\n   >>> browser.getControl(\'Current password\').value = TEST_USER_PASSWORD\n-  >>> browser.getControl(\'New password\').value = \'y0d4Wg\'\n-  >>> browser.getControl(\'Confirm password\').value = \'y0d4Wg\'\n+  >>> browser.getControl(\'New password\').value = \'new password\'\n+  >>> browser.getControl(\'Confirm password\').value = \'new password\'\n   >>> browser.getControl(\'Change Password\').click()\n   >>> browser.contents\n   \'...Info...Password changed...\'\n \n   >>> browser.goBack()\n   >>> browser.getControl(name=\'_authenticator\', index=0).value = \'invalid!\'\n-  >>> browser.getControl(\'Current password\').value = \'y0d4Wg\'\n-  >>> browser.getControl(\'New password\').value = \'y0d4Wg!\'\n-  >>> browser.getControl(\'Confirm password\').value = \'y0d4Wg!\'\n+  >>> browser.getControl(\'Current password\').value = \'new password\'\n+  >>> browser.getControl(\'New password\').value = \'newer password\'\n+  >>> browser.getControl(\'Confirm password\').value = \'newer password\'\n   >>> browser.getControl(\'Change Password\').click()\n   Traceback (most recent call last):\n   ...\n@@ -201,8 +201,8 @@ anymore (which at the same time tests the security control panel):\n   >>> browser.getLink(\'Add New User\').click()\n   >>> browser.getControl(\'User Name\').value = \'johnny\'\n   >>> browser.getControl(\'Email\').value = \'john@foo-security.com\'\n-  >>> browser.getControl(\'Password\').value = \'y0d4Wg!\'\n-  >>> browser.getControl(\'Confirm password\').value = \'y0d4Wg!\'\n+  >>> browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n+  >>> browser.getControl(\'Confirm password\').value = TEST_USER_PASSWORD\n   >>> browser.getControl(\'Register\').click()\n   >>> browser.contents\n   \'...Info...User added...\'\n@@ -423,12 +423,12 @@ limitations, which is why we need to log in as the portal owner first:\n \n   >>> app_browser = Browser(app)\n   >>> app_browser.handleErrors = False\n-  >>> app.acl_users.userFolderAddUser(\'app\', \'secret\', [\'Manager\'], [])\n+  >>> app.acl_users.userFolderAddUser(\'app\', TEST_USER_PASSWORD, [\'Manager\'], [])\n   >>> from plone.testing import zope\n   >>> zope.logout()\n   >>> zope.login(app[\'acl_users\'], \'app\')\n   >>> import transaction; transaction.commit()\n-  >>> app_browser.addHeader(\'Authorization\', \'Basic app:secret\')\n+  >>> app_browser.addHeader(\'Authorization\', f\'Basic app:{TEST_USER_PASSWORD}\')\n   >>> app_browser.open(\'http://nohost/plone/@@overview-controlpanel\')\n   >>> app_browser.getLink(\'Maintenance\').click()\n   >>> app_browser.getControl(name=\'_authenticator\', index=0).value = \'invalid!\'\ndiff --git a/Products/CMFPlone/tests/pwreset_browser.rst b/Products/CMFPlone/tests/pwreset_browser.rst\nindex da70832d02..795e781d95 100644\n--- a/Products/CMFPlone/tests/pwreset_browser.rst\n+++ b/Products/CMFPlone/tests/pwreset_browser.rst\n@@ -127,8 +127,8 @@ Now register a new user:\n \n   >>> browser.getControl(\'User Name\').value = \'jsmith\'\n   >>> browser.getControl(\'Email\').value = \'jsmith@example.com\'\n-  >>> browser.getControl(\'Password\').value = \'secret\'\n-  >>> browser.getControl(\'Confirm password\').value = \'secret\'\n+  >>> browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n+  >>> browser.getControl(\'Confirm password\').value = TEST_USER_PASSWORD\n   >>> browser.getControl(\'Register\').click()\n \n XXX Make sure we don\'t have a way to receive our credentials via\n@@ -143,7 +143,7 @@ We are not logged in yet at this point.  Let\'s try to log in:\n   >>> browser.url.startswith(\'http://nohost/plone/login\')\n   True\n   >>> browser.getControl(name=\'__ac_name\').value = \'jsmith\'\n-  >>> browser.getControl(name=\'__ac_password\').value = \'secret\'\n+  >>> browser.getControl(name=\'__ac_password\').value = TEST_USER_PASSWORD\n   >>> browser.getControl(name=\'buttons.login\').click()\n   >>> "You are now logged in" in browser.contents\n   True\n@@ -168,7 +168,7 @@ We check if the old password still works.\n \n   >>> browser.open(\'http://nohost/plone/login\')\n   >>> browser.getControl(name=\'__ac_name\').value = \'jsmith\'\n-  >>> browser.getControl(name=\'__ac_password\').value = \'secret\'\n+  >>> browser.getControl(name=\'__ac_password\').value = TEST_USER_PASSWORD\n   >>> browser.getControl(name=\'buttons.login\').click()\n \n We should be logged in now:\n@@ -377,7 +377,7 @@ Log out again and then join:\n \n We shouldn\'t be able to fill in our password:\n \n-  >>> browser.getControl(\'Password\').value = \'secret\' # doctest: +ELLIPSIS\n+  >>> browser.getControl(\'Password\').value = TEST_USER_PASSWORD # doctest: +ELLIPSIS\n   Traceback (most recent call last):\n   ...\n   LookupError: label \'Password\'\n@@ -425,8 +425,8 @@ Now that we have the address, we will reset our password:\n   >>> "Please fill out the form below to set your password" in browser.contents\n   True\n   >>> browser.getControl(name=\'userid\').value = \'bsmith\'\n-  >>> browser.getControl(name=\'password\').value = \'secret\'\n-  >>> browser.getControl(name=\'password2\').value = \'secret\'\n+  >>> browser.getControl(name=\'password\').value = TEST_USER_PASSWORD\n+  >>> browser.getControl(name=\'password2\').value = TEST_USER_PASSWORD\n   >>> browser.getControl("Set my password").click()\n   >>> "Password reset successful, you are logged in now!" in browser.contents\n   True\n@@ -471,8 +471,8 @@ We navigate to the Users Adding page and register a new user:\n   >>> browser.open(\'http://nohost/plone/@@new-user\')\n   >>> browser.getControl(\'User Name\').value = \'wwwsmith\'\n   >>> browser.getControl(\'Email\').value = \'wwwsmith@example.com\'\n-  >>> browser.getControl(\'Password\').value = \'secret\'\n-  >>> browser.getControl(\'Confirm password\').value = \'secret\'\n+  >>> browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n+  >>> browser.getControl(\'Confirm password\').value = TEST_USER_PASSWORD\n   >>> browser.getControl(\'Send a confirmation mail with a link to set the password\').selected = True\n \n Now register and logout:\ndiff --git a/Products/CMFPlone/tests/search_form.rst b/Products/CMFPlone/tests/search_form.rst\nindex 466e1a97c8..4777363743 100644\n--- a/Products/CMFPlone/tests/search_form.rst\n+++ b/Products/CMFPlone/tests/search_form.rst\n@@ -3,6 +3,7 @@ We want to test the search form and the resulting page.\n Let\'s create a user to test upon\n see: testControlPanelScripts.txt:\n     >>> from DateTime import DateTime\n+    >>> from plone.app.testing import TEST_USER_PASSWORD\n     >>> app = layer[\'app\']\n     >>> portal = layer[\'portal\']\n     >>> fullname = \'Test User Full Name\'\n@@ -10,7 +11,7 @@ see: testControlPanelScripts.txt:\n     >>> email = \'test@plone.org\'\n     >>> last_login_time = DateTime()\n     >>> membership = portal.portal_membership\n-    >>> membership.addMember(username, \'secret\', [], [])\n+    >>> membership.addMember(username, TEST_USER_PASSWORD, [], [])\n     >>> member = membership.getMemberById(username)\n     >>> member.setMemberProperties({\'fullname\': fullname, \'email\': email,\n     ...                             \'last_login_time\': last_login_time,})\ndiff --git a/Products/CMFPlone/tests/testActionsTool.py b/Products/CMFPlone/tests/testActionsTool.py\nindex 8bcaed7d3a..1d6870ce6f 100644\n--- a/Products/CMFPlone/tests/testActionsTool.py\n+++ b/Products/CMFPlone/tests/testActionsTool.py\n@@ -1,6 +1,7 @@\n from Acquisition import Explicit\n from OFS.SimpleItem import Item\n from plone.app.testing import login\n+from plone.app.testing import TEST_USER_PASSWORD\n from Products.CMFCore.ActionInformation import Action\n from Products.CMFCore.ActionInformation import ActionInfo\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n@@ -23,7 +24,7 @@ class TestActionsTool(unittest.TestCase):\n     def setUp(self):\n         self.portal = self.layer[\'portal\']\n         self.actions = self.portal.portal_actions\n-        self.portal.acl_users._doAddUser(\'user1\', \'secret\', [\'Member\'], [])\n+        self.portal.acl_users._doAddUser(\'user1\', TEST_USER_PASSWORD, [\'Member\'], [])\n         self.portal.invokeFactory(\'Folder\', \'f1\')\n         self.folder = self.portal[\'f1\']\n \ndiff --git a/Products/CMFPlone/tests/testCSRFProtection.py b/Products/CMFPlone/tests/testCSRFProtection.py\nindex b2538c4b66..704300b4e7 100644\n--- a/Products/CMFPlone/tests/testCSRFProtection.py\n+++ b/Products/CMFPlone/tests/testCSRFProtection.py\n@@ -50,13 +50,13 @@ def test_PloneTool_renameObjectsByPaths(self):\n     def test_RegistrationTool_editMember(self):\n         self.checkAuthenticator(\n             \'/portal_registration/editMember\',\n-            \'member_id=%s&password=y0d4Wg&properties.foo:record=\' % (\n+            \'member_id=%s&password=correct+horse+battery+staple&properties.foo:record=\' % (\n                 TEST_USER_ID))\n \n     def test_MembershipTool_setPassword(self):\n         self.checkAuthenticator(\n             \'/portal_membership/setPassword\',\n-            \'password=y0d4Wg\',\n+            \'password=correct+horse+battery+staple\',\n             status=204)\n \n     def test_MembershipTool_deleteMemberArea(self):\ndiff --git a/Products/CMFPlone/tests/testCatalogTool.py b/Products/CMFPlone/tests/testCatalogTool.py\nindex da4e38584a..909e7f9178 100644\n--- a/Products/CMFPlone/tests/testCatalogTool.py\n+++ b/Products/CMFPlone/tests/testCatalogTool.py\n@@ -5,6 +5,7 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.textfield import RichTextValue\n from plone.dexterity.content import CEILING_DATE\n from plone.indexer.wrapper import IndexableObjectWrapper\n@@ -365,7 +366,7 @@ def afterSetUp(self):\n         self.workflow = self.portal.portal_workflow\n         self.groups = self.portal.portal_groups\n \n-        self.portal.acl_users._doAddUser(user2, \'secret\', [], [])\n+        self.portal.acl_users._doAddUser(user2, TEST_USER_PASSWORD, [], [])\n \n         self.folder.invokeFactory(\'Document\', id=\'doc\', text=\'foo\')\n         self.folder.invokeFactory(\'Folder\', id=\'folder2\')\n@@ -1016,7 +1017,7 @@ def afterSetUp(self):\n         self.folder.invokeFactory(\'Document\', id=\'doc\')\n \n         # Create unprivileged user\n-        self.portal.acl_users._doAddUser(user2, \'secret\', [\'Member\'], [])\n+        self.portal.acl_users._doAddUser(user2, TEST_USER_PASSWORD, [\'Member\'], [])\n \n     def nofx(self):\n         # Removes effective and expires to make sure we only test\ndiff --git a/Products/CMFPlone/tests/testContentSecurity.py b/Products/CMFPlone/tests/testContentSecurity.py\nindex 5d8945cd30..aea5cc0e2a 100644\n--- a/Products/CMFPlone/tests/testContentSecurity.py\n+++ b/Products/CMFPlone/tests/testContentSecurity.py\n@@ -1,5 +1,6 @@\n from AccessControl import Unauthorized\n from Acquisition import aq_base\n+from plone.app.testing import TEST_USER_PASSWORD\n from Products.CMFPlone.tests.PloneTestCase import PloneTestCase\n from zExceptions.unauthorized import Unauthorized as zUnauthorized\n from zope.component import getMultiAdapter\n@@ -9,10 +10,10 @@ class TestContentSecurity(PloneTestCase):\n \n     def afterSetUp(self):\n         self.request = self.layer["request"]\n-        self.portal.acl_users._doAddUser(\'user1\', \'secret\', [\'Member\'], [])\n-        self.portal.acl_users._doAddUser(\'user2\', \'secret\', [\'Member\'], [])\n+        self.portal.acl_users._doAddUser(\'user1\', TEST_USER_PASSWORD, [\'Member\'], [])\n+        self.portal.acl_users._doAddUser(\'user2\', TEST_USER_PASSWORD, [\'Member\'], [])\n         #_ender_\'s member who\'s not a Member usecase\n-        self.portal.acl_users._doAddUser(\'user3\', \'secret\', [], [])\n+        self.portal.acl_users._doAddUser(\'user3\', TEST_USER_PASSWORD, [], [])\n         self.membership = self.portal.portal_membership\n         self.workflow = self.portal.portal_workflow\n         self.createMemberarea(\'user1\')\ndiff --git a/Products/CMFPlone/tests/testCutPasteSecurity.py b/Products/CMFPlone/tests/testCutPasteSecurity.py\nindex ddf8cf6ecb..bf99c6252e 100644\n--- a/Products/CMFPlone/tests/testCutPasteSecurity.py\n+++ b/Products/CMFPlone/tests/testCutPasteSecurity.py\n@@ -1,6 +1,7 @@\n from AccessControl import Unauthorized\n from Acquisition import aq_base\n from OFS.CopySupport import CopyError\n+from plone.app.testing import TEST_USER_PASSWORD\n from Products.CMFCore.interfaces import IContentish\n from Products.CMFPlone.tests.PloneTestCase import PloneTestCase\n from urllib.error import HTTPError\n@@ -14,8 +15,8 @@\n class TestCutPasteSecurity(PloneTestCase):\n \n     def afterSetUp(self):\n-        self.portal.acl_users._doAddUser(\'user1\', \'secret\', [\'Member\'], [])\n-        self.portal.acl_users._doAddUser(\'user2\', \'secret\', [\'Member\'], [])\n+        self.portal.acl_users._doAddUser(\'user1\', TEST_USER_PASSWORD, [\'Member\'], [])\n+        self.portal.acl_users._doAddUser(\'user2\', TEST_USER_PASSWORD, [\'Member\'], [])\n         self.membership = self.portal.portal_membership\n         self.createMemberarea(\'user1\')\n         self.createMemberarea(\'user2\')\ndiff --git a/Products/CMFPlone/tests/testEmailLogin.py b/Products/CMFPlone/tests/testEmailLogin.py\nindex e54dfdd00b..0e12786f3c 100644\n--- a/Products/CMFPlone/tests/testEmailLogin.py\n+++ b/Products/CMFPlone/tests/testEmailLogin.py\n@@ -1,5 +1,6 @@\n from AccessControl import Unauthorized\n from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.base.interfaces import ISecuritySchema\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n@@ -30,7 +31,7 @@ def testSetOwnLoginName(self):\n \n     def testSetLoginNameOfOther(self):\n         memship = self.portal.portal_membership\n-        memship.addMember(\'maurits\', \'secret\', [], [])\n+        memship.addMember(\'maurits\', TEST_USER_PASSWORD, [], [])\n         member = memship.getMemberById(\'maurits\')\n         self.assertRaises(Unauthorized, set_own_login_name, member, \'vanrees\')\n         # The admin *should* be able to change the login name of\ndiff --git a/Products/CMFPlone/tests/testExternalEditorEnabled.py b/Products/CMFPlone/tests/testExternalEditorEnabled.py\nindex 50775e7120..5333d831e4 100644\n--- a/Products/CMFPlone/tests/testExternalEditorEnabled.py\n+++ b/Products/CMFPlone/tests/testExternalEditorEnabled.py\n@@ -1,3 +1,4 @@\n+from plone.app.testing import TEST_USER_PASSWORD\n from Products.CMFPlone.tests import PloneTestCase\n \n import unittest\n@@ -21,7 +22,7 @@ def afterSetUp(self):\n         self.doc = self.folder.doc\n         self.folder.invokeFactory(\'Folder\', \'folder2\')\n         self.folder = self.folder.folder2\n-        self.portal.acl_users._doAddUser(\'user1\', \'secret\', [\'Member\'], [])\n+        self.portal.acl_users._doAddUser(\'user1\', TEST_USER_PASSWORD, [\'Member\'], [])\n         self.mtool = self.portal.portal_membership\n         member = self.mtool.getAuthenticatedMember()\n         member.setMemberProperties({\'ext_editor\': 1})\ndiff --git a/Products/CMFPlone/tests/testPloneTool.py b/Products/CMFPlone/tests/testPloneTool.py\nindex 86a8d2b365..712dbb04aa 100644\n--- a/Products/CMFPlone/tests/testPloneTool.py\n+++ b/Products/CMFPlone/tests/testPloneTool.py\n@@ -1,5 +1,6 @@\n from Acquisition import Implicit\n from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.base.interfaces import IReorderedEvent\n from plone.base.interfaces import ISearchSchema\n from plone.registry.interfaces import IRegistry\n@@ -171,7 +172,7 @@ class TestOwnershipStuff(PloneTestCase.PloneTestCase):\n     def afterSetUp(self):\n         self.utils = self.portal.plone_utils\n         self.membership = self.portal.portal_membership\n-        self.membership.addMember("new_owner", "secret", ["Member"], [])\n+        self.membership.addMember("new_owner", TEST_USER_PASSWORD, ["Member"], [])\n         self.folder.invokeFactory("Folder", "folder1")\n         self.folder1 = self.folder.folder1\n         self.folder1.invokeFactory("Folder", "folder2")\ndiff --git a/Products/CMFPlone/tests/testRegistrationTool.py b/Products/CMFPlone/tests/testRegistrationTool.py\nindex 677ca7191f..a49561a014 100644\n--- a/Products/CMFPlone/tests/testRegistrationTool.py\n+++ b/Products/CMFPlone/tests/testRegistrationTool.py\n@@ -1,4 +1,6 @@\n+from re import T\n from AccessControl import Unauthorized\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.base.interfaces.controlpanel import IMailSchema\n from plone.base.interfaces.controlpanel import ISiteSchema\n from plone.registry.interfaces import IRegistry\n@@ -32,7 +34,7 @@ def afterSetUp(self):\n         self.portal.acl_users._doAddGroup("groupid", ())\n \n     def testJoinCreatesUser(self):\n-        self.registration.addMember(member_id, \'secret\',\n+        self.registration.addMember(member_id, TEST_USER_PASSWORD,\n                                     properties={\'username\': member_id,\n                                                 \'email\': \'foo@bar.com\'})\n         user = self.portal.acl_users.getUserById(member_id)\n@@ -42,12 +44,12 @@ def testCannotRegisterWithRootAdminUsername(self):\n         root_user = self.portal.aq_parent.acl_users.users.listUserIds()[0]\n         self.assertRaises(ValueError,\n                           self.registration.addMember,\n-                          root_user, \'secret\',\n+                          root_user, TEST_USER_PASSWORD,\n                           properties={\'username\': root_user,\n                                       \'email\': \'foo@bar.com\'})\n \n     def testJoinWithUppercaseEmailCreatesUser(self):\n-        self.registration.addMember(member_id, \'secret\',\n+        self.registration.addMember(member_id, TEST_USER_PASSWORD,\n                                     properties={\'username\': member_id,\n                                                 \'email\': \'FOO@BAR.COM\'})\n         user = self.portal.acl_users.getUserById(member_id)\n@@ -56,13 +58,13 @@ def testJoinWithUppercaseEmailCreatesUser(self):\n     def testJoinWithoutEmailRaisesValueError(self):\n         self.assertRaises(ValueError,\n                           self.registration.addMember,\n-                          member_id, \'secret\',\n+                          member_id, TEST_USER_PASSWORD,\n                           properties={\'username\': member_id, \'email\': \'\'})\n \n     def testJoinWithBadEmailRaisesValueError(self):\n         self.assertRaises(ValueError,\n                           self.registration.addMember,\n-                          member_id, \'secret\',\n+                          member_id, TEST_USER_PASSWORD,\n                           properties={\n                               \'username\': member_id,\n                               \'email\': \'foo@bar.com, fred@bedrock.com\'})\n@@ -70,23 +72,23 @@ def testJoinWithBadEmailRaisesValueError(self):\n     def testJoinAsExistingMemberRaisesValueError(self):\n         self.assertRaises(ValueError,\n                           self.registration.addMember,\n-                          PloneTestCase.default_user, \'secret\',\n+                          PloneTestCase.default_user, TEST_USER_PASSWORD,\n                           properties={\'username\': \'Dr FooBar\',\n                                       \'email\': \'foo@bar.com\'})\n \n     def testJoinAsExistingNonMemberUserRaisesValueError(self):\n         # http://dev.plone.org/plone/ticket/3221\n-        self.portal.acl_users._doAddUser(member_id, \'secret\', [], [])\n+        self.portal.acl_users._doAddUser(member_id, TEST_USER_PASSWORD, [], [])\n         self.assertRaises(ValueError,\n                           self.registration.addMember,\n-                          member_id, \'secret\',\n+                          member_id, TEST_USER_PASSWORD,\n                           properties={\'username\': member_id,\n                                       \'email\': \'foo@bar.com\'})\n \n     def testJoinWithPortalIdAsUsernameRaisesValueError(self):\n         self.assertRaises(ValueError,\n                           self.registration.addMember,\n-                          self.portal.getId(), \'secret\',\n+                          self.portal.getId(), TEST_USER_PASSWORD,\n                           properties={\'username\': \'Dr FooBar\',\n                                       \'email\': \'foo@bar.com\'})\n \n@@ -104,23 +106,23 @@ def testTestPasswordValidityConfirm(self):\n             \'validpassword\', confirm=\'anotherpassword\') is None)\n \n     def testTestPasswordValidityPolicy(self):\n-        self.assertIsNone(self.registration.testPasswordValidity("abcde", confirm=None))\n+        self.assertIsNone(self.registration.testPasswordValidity(TEST_USER_PASSWORD, confirm=None))\n         self.assertEqual(\n             self.registration.testPasswordValidity("abcd", confirm=None),\n-            "Your password must contain at least 5 characters.",\n+            "Your password must contain at least ${min_chars} characters.",\n         )\n         # Password validity is checked with an empty password\n         # to get a nice help message to show for the input field.\n         self.assertEqual(\n             self.registration.testPasswordValidity("", confirm=None),\n-            "Minimum 5 characters.",\n+            "Minimum ${min_chars} characters.",\n         )\n \n     def testPasValidation(self):\n-        self.assertIsNone(self.registration.pasValidation("password", "abcde"))\n+        self.assertIsNone(self.registration.pasValidation("password", TEST_USER_PASSWORD))\n         self.assertEqual(\n             self.registration.pasValidation("password", "abcd"),\n-            "Your password must contain at least 5 characters.",\n+            "Your password must contain at least ${min_chars} characters.",\n         )\n \n     def testNewIdAllowed(self):\n@@ -144,7 +146,7 @@ def testRegisteredNotify(self):\n         sm.unregisterUtility(provided=IMailHost)\n         sm.registerUtility(mails, IMailHost)\n         # Register a user\n-        self.registration.addMember(member_id, \'secret\',\n+        self.registration.addMember(member_id, TEST_USER_PASSWORD,\n                                     properties={\'username\': member_id,\n                                                 \'email\': \'foo@bar.com\'})\n \n@@ -174,7 +176,7 @@ def testRegisteredNotifyEncoding(self):\n         sm.unregisterUtility(provided=IMailHost)\n         sm.registerUtility(mails, IMailHost)\n         # Register a user\n-        self.registration.addMember(member_id, \'secret\',\n+        self.registration.addMember(member_id, TEST_USER_PASSWORD,\n                                     properties={\'username\': member_id,\n                                                 \'email\': \'foo@bar.com\'})\n         registry = getUtility(IRegistry)\n@@ -203,7 +205,7 @@ def testMailPassword(self):\n         sm.unregisterUtility(provided=IMailHost)\n         sm.registerUtility(mails, IMailHost)\n         # Register a user\n-        self.registration.addMember(member_id, \'secret\',\n+        self.registration.addMember(member_id, TEST_USER_PASSWORD,\n                                     properties={\'username\': member_id,\n                                                 \'email\': \'foo@bar.com\'})\n \n@@ -234,7 +236,7 @@ def testMailPasswordEncoding(self):\n         sm.unregisterUtility(provided=IMailHost)\n         sm.registerUtility(mails, IMailHost)\n         # Register a user\n-        self.registration.addMember(member_id, \'secret\',\n+        self.registration.addMember(member_id, TEST_USER_PASSWORD,\n                                     properties={\'username\': member_id,\n                                                 \'email\': \'foo@bar.com\'})\n         registry = getUtility(IRegistry)\ndiff --git a/Products/CMFPlone/tests/testWorkflowTool.py b/Products/CMFPlone/tests/testWorkflowTool.py\nindex 1ad2c70102..298c20fcef 100644\n--- a/Products/CMFPlone/tests/testWorkflowTool.py\n+++ b/Products/CMFPlone/tests/testWorkflowTool.py\n@@ -1,3 +1,4 @@\n+from plone.app.testing import TEST_USER_PASSWORD\n from Products.CMFCore.interfaces import IWorkflowTool\n from Products.CMFPlone.tests import PloneTestCase\n from Products.CMFPlone.tests.dummy import Dummy\n@@ -21,10 +22,10 @@ class TestWorkflowTool(PloneTestCase.PloneTestCase):\n     def afterSetUp(self):\n         self.workflow = self.portal.portal_workflow\n \n-        self.portal.acl_users._doAddUser(\'member\', \'secret\', [\'Member\'], [])\n-        self.portal.acl_users._doAddUser(\'reviewer\', \'secret\',\n+        self.portal.acl_users._doAddUser(\'member\', TEST_USER_PASSWORD, [\'Member\'], [])\n+        self.portal.acl_users._doAddUser(\'reviewer\', TEST_USER_PASSWORD,\n                                          [\'Reviewer\'], [])\n-        self.portal.acl_users._doAddUser(\'manager\', \'secret\', [\'Manager\'], [])\n+        self.portal.acl_users._doAddUser(\'manager\', TEST_USER_PASSWORD, [\'Manager\'], [])\n \n         self.folder.invokeFactory(\'Document\', id=\'doc\')\n         self.doc = self.folder.doc\ndiff --git a/Products/CMFPlone/tests/test_login_form.py b/Products/CMFPlone/tests/test_login_form.py\nindex b997f404a8..94dfc4683a 100644\n--- a/Products/CMFPlone/tests/test_login_form.py\n+++ b/Products/CMFPlone/tests/test_login_form.py\n@@ -1,5 +1,6 @@\n from DateTime import DateTime\n from plone.app.z3cform.interfaces import IPloneFormLayer\n+from plone.app.testing import TEST_USER_PASSWORD\n from Products.CMFCore.permissions import SetOwnProperties\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n@@ -43,7 +44,7 @@ def _setup_authenticator_request(self):\n     def test_form_update(self):\n         self._setup_authenticator_request()\n         self.request[\'__ac_name\'] = \'test\'\n-        self.request[\'__ac_password\'] = \'secret\'\n+        self.request[\'__ac_password\'] = TEST_USER_PASSWORD\n         self.request[\'form.widgets.came_from\'] = [\'\']\n         form = self.portal.restrictedTraverse(FORM_ID)\n         form.update()\n@@ -61,7 +62,7 @@ def test_failsafe_login_form(self):\n     def test_failsafe_login_form_update(self):\n         self._setup_authenticator_request()\n         self.request[\'__ac_name\'] = \'test\'\n-        self.request[\'__ac_password\'] = \'secret\'\n+        self.request[\'__ac_password\'] = TEST_USER_PASSWORD\n         self.request[\'form.widgets.came_from\'] = [\'\']\n         form = self.portal.restrictedTraverse(\'failsafe_login\')\n         form.update()\ndiff --git a/Products/CMFPlone/tests/test_login_logout.py b/Products/CMFPlone/tests/test_login_logout.py\nindex 8998d07549..2dea7c43e7 100644\n--- a/Products/CMFPlone/tests/test_login_logout.py\n+++ b/Products/CMFPlone/tests/test_login_logout.py\n@@ -63,14 +63,14 @@ def test_login_with_user_defined_in_root_user_folder(self):\n         """\n         self.layer[\'app\'].acl_users.userFolderAddUser(\n             \'rootuser\',\n-            \'secret\',\n+            TEST_USER_PASSWORD,\n             [],\n             []\n         )\n         transaction.commit()\n         self.browser.open(\'http://nohost/plone/login\')\n         self.browser.getControl(\'Login Name\').value = \'rootuser\'\n-        self.browser.getControl(\'Password\').value = \'secret\'\n+        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n         self.browser.getControl(\'Log in\').click()\n         self.assertIn(\'You are now logged in\', self.browser.contents)\n \n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-09-17T21:07:23-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/a88182447374df067bd64d691b7df8c5442a58f7

changelog

Files changed:
A news/3646.bugfix

b'diff --git a/news/3646.bugfix b/news/3646.bugfix\nnew file mode 100644\nindex 0000000000..b2b72981ed\n--- /dev/null\n+++ b/news/3646.bugfix\n@@ -0,0 +1 @@\n+- Fix tests to work with longer minimum password length [davisagli]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-09-17T21:51:38-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/5e224f844d7f6b8e2a5a34bdc7acc803e8882d42

fix robot test

Files changed:
M Products/CMFPlone/tests/robot/test_overlays.robot

b'diff --git a/Products/CMFPlone/tests/robot/test_overlays.robot b/Products/CMFPlone/tests/robot/test_overlays.robot\nindex 83070070fc..b8fca6d3d9 100644\n--- a/Products/CMFPlone/tests/robot/test_overlays.robot\n+++ b/Products/CMFPlone/tests/robot/test_overlays.robot\n@@ -272,8 +272,8 @@ I enter valid user data\n     Wait until page contains element  name=form.widgets.password_ctl\n     Input text for sure  form.widgets.username       myuser\n     Input text for sure  form.widgets.email          my@email.eu\n-    Input text for sure  form.widgets.password       123123\n-    Input text for sure  form.widgets.password_ctl   123123\n+    Input text for sure  form.widgets.password       newpassword\n+    Input text for sure  form.widgets.password_ctl   newpassword\n \n I enter valid register user data\n     Wait until page contains element  name=form.widgets.username\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-09-19T11:14:41+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/7e9a85472a3e4ca9d07e58742593344dae9d0b5b

Merge pull request #3646 from plone/pw-length

Make tests pass with longer minimum password

Files changed:
A news/3646.bugfix
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py
M Products/CMFPlone/testing.py
M Products/CMFPlone/tests/LoginAndLogout.rst
M Products/CMFPlone/tests/csrf.txt
M Products/CMFPlone/tests/pwreset_browser.rst
M Products/CMFPlone/tests/robot/test_overlays.robot
M Products/CMFPlone/tests/search_form.rst
M Products/CMFPlone/tests/testActionsTool.py
M Products/CMFPlone/tests/testCSRFProtection.py
M Products/CMFPlone/tests/testCatalogTool.py
M Products/CMFPlone/tests/testContentSecurity.py
M Products/CMFPlone/tests/testCutPasteSecurity.py
M Products/CMFPlone/tests/testEmailLogin.py
M Products/CMFPlone/tests/testExternalEditorEnabled.py
M Products/CMFPlone/tests/testPloneTool.py
M Products/CMFPlone/tests/testRegistrationTool.py
M Products/CMFPlone/tests/testWorkflowTool.py
M Products/CMFPlone/tests/test_login_form.py
M Products/CMFPlone/tests/test_login_logout.py

b'diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py\nindex 157371faa7..c8add25703 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py\n@@ -28,14 +28,14 @@ def setUp(self):\n         self.browser.handleErrors = False\n         # we have to create a user on the zope root. this just does not work\n         # with plone.app.testing and TEST_USER or SITE_OWNER\n-        self.app.acl_users.userFolderAddUser(\'app\', \'secret\', [\'Manager\'], [])\n+        self.app.acl_users.userFolderAddUser(\'app\', TEST_USER_PASSWORD, [\'Manager\'], [])\n         login(self.app[\'acl_users\'], \'app\')\n \n         import transaction\n         transaction.commit()\n         self.browser.addHeader(\n             \'Authorization\',\n-            \'Basic {}:{}\'.format(\'app\', \'secret\')\n+            \'Basic {}:{}\'.format(\'app\', TEST_USER_PASSWORD)\n         )\n \n         self.site_administrator_browser = Browser(self.app)\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py\nindex 9b567ea24c..d2803c0cde 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py\n@@ -21,9 +21,9 @@ class TestSiteAdministratorRoleFunctional(unittest.TestCase):\n \n     def _generateUsers(self):\n         rtool = getToolByName(self.portal, \'portal_registration\')\n-        rtool.addMember(\'DIispfuF\', \'secret\', [\'Member\'], [])\n-        rtool.addMember(\'siteadmin\', \'secret\', [\'Site Administrator\'], [])\n-        rtool.addMember(\'root\', \'secret\', [\'Manager\'], [])\n+        rtool.addMember(\'DIispfuF\', TEST_USER_PASSWORD, [\'Member\'], [])\n+        rtool.addMember(\'siteadmin\', TEST_USER_PASSWORD, [\'Site Administrator\'], [])\n+        rtool.addMember(\'root\', TEST_USER_PASSWORD, [\'Manager\'], [])\n \n     def setUp(self):\n         self.app = self.layer[\'app\']\n@@ -108,7 +108,7 @@ def testManagerCanDelegateManagerRoleForUsers(self):\n     def testNonManagersCannotDelegateManagerRoleForUsers(self):\n         # a user without the Manager role cannot delegate the Manager role\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic siteadmin:secret\')\n+            \'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n         self.browser.open(self.usergroups_url)\n         form = {\n             \'_authenticator\': self._get_authenticator(),\n@@ -127,7 +127,7 @@ def testNonManagersCanEditOtherRolesOfUsersWithManagerRole(self):\n         roles = self.portal.acl_users.getUserById(\'root\').getRoles()\n         self.assertEqual([\'Manager\', \'Authenticated\'], roles)\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic siteadmin:secret\')\n+            \'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n         self.browser.open(self.usergroups_url)\n         form = {\n             \'_authenticator\': self._get_authenticator(),\n@@ -143,7 +143,7 @@ def testNonManagersCanEditOtherRolesOfUsersWithManagerRole(self):\n \n     def testGroupManagerRoleCheckboxIsDisabledForNonManagers(self):\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic siteadmin:secret\')\n+            \'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n         self.browser.open(self.groups_url)\n         contents = self._simplify_white_space(self.browser.contents)\n         self.assertTrue(\'<input type="checkbox" class="noborder" \'\n@@ -173,7 +173,7 @@ def testManagerCanDelegateManagerRoleForGroups(self):\n     def testNonManagersCannotDelegateManagerRoleForGroups(self):\n         # a user without the Manager role cannot delegate the Manager role\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic siteadmin:secret\')\n+            \'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n \n         self.browser.open(self.groups_url)\n         form = {\n@@ -191,7 +191,7 @@ def testNonManagersCannotDelegateManagerRoleForGroups(self):\n \n     def testNonManagersCanEditOtherRolesOfGroupsWithManagerRole(self):\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic siteadmin:secret\')\n+            \'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n \n         roles = self.portal.acl_users.getUserById(\'root\').getRoles()\n         self.assertEqual([\'Manager\', \'Authenticated\'], roles)\n@@ -210,7 +210,7 @@ def testNonManagersCanEditOtherRolesOfGroupsWithManagerRole(self):\n \n     def test_usergroup_usermembership_blocks_escalation(self):\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic siteadmin:secret\')\n+            \'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n \n         # groups granting the Manager role shouldn\'t show as a valid option to\n         # add\n@@ -241,7 +241,7 @@ def test_usergroup_groupmembership_blocks_escalation(self):\n         # should not show section to add users for groups granting the Manager\n         # role\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic siteadmin:secret\')\n+            \'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n \n         self.browser.open(\n             self.portal_url + \'/@@usergroup-groupmembership?groupname=Administrators\'\n@@ -268,7 +268,7 @@ def test_user_registration_form_blocks_escalation(self):\n         # groups granting the Manager role should not be available for\n         # selection\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic siteadmin:secret\')\n+            \'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n         self.browser.open(self.portal_url + \'/@@new-user\')\n         contents = self._simplify_white_space(self.browser.contents)\n         self.assertFalse(\n@@ -281,8 +281,8 @@ def test_user_registration_form_blocks_escalation(self):\n             \'_authenticator\': self._get_authenticator(),\n             \'form.widgets.username\': \'newuser\',\n             \'form.widgets.email\': \'newuser@example.com\',\n-            \'form.widgets.password\': \'secret\',\n-            \'form.widgets.password_ctl\': \'secret\',\n+            \'form.widgets.password\': TEST_USER_PASSWORD,\n+            \'form.widgets.password_ctl\': TEST_USER_PASSWORD,\n             \'form.widgets.groups:list\': \'Administrators\',\n             \'form.widgets.groups-empty-marker\': \'1\',\n             \'form.buttons.register\': \'Register\',\n@@ -297,7 +297,7 @@ def test_users_overview_blocks_deleting_managers(self):\n         # a user without the Manager role cannot delete a user with the\n         # Manager role\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic siteadmin:secret\')\n+            \'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n \n         self.browser.open(self.usergroups_url)\n         contents = self._simplify_white_space(self.browser.contents)\n@@ -324,7 +324,7 @@ def test_groups_overview_blocks_deleting_managers(self):\n         # a user without the Manager role cannot delete a group with the\n         # Manager role\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic siteadmin:secret\')\n+            \'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n \n         self.browser.open(self.groups_url)\n         contents = self._simplify_white_space(self.browser.contents)\ndiff --git a/Products/CMFPlone/testing.py b/Products/CMFPlone/testing.py\nindex 49548c9595..b65165f6fe 100644\n--- a/Products/CMFPlone/testing.py\n+++ b/Products/CMFPlone/testing.py\n@@ -8,6 +8,7 @@\n from plone.app.testing import PloneSandboxLayer\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.testing.layers import FunctionalTesting\n from plone.app.testing.layers import IntegrationTesting\n from plone.testing import zope\n@@ -40,7 +41,7 @@ def setUpZope(self, app, configurationContext):\n     def setUpPloneSite(self, portal):\n         portal.acl_users.userFolderAddUser(\n             \'admin\',\n-            \'secret\',\n+            TEST_USER_PASSWORD,\n             [\'Manager\'],\n             []\n         )\ndiff --git a/Products/CMFPlone/tests/LoginAndLogout.rst b/Products/CMFPlone/tests/LoginAndLogout.rst\nindex 0245fc5a15..ecae01adf1 100644\n--- a/Products/CMFPlone/tests/LoginAndLogout.rst\n+++ b/Products/CMFPlone/tests/LoginAndLogout.rst\n@@ -115,11 +115,11 @@ A user defined in the root user folder should be able to log in into\n the site:\n \n     >>> browser.getLink(\'Home\').click()\n-    >>> app.acl_users.userFolderAddUser(\'rootuser\', \'secret\', [], [])\n+    >>> app.acl_users.userFolderAddUser(\'rootuser\', TEST_USER_PASSWORD, [], [])\n     >>> transaction.commit()\n     >>> browser.open(\'http://nohost/plone/login_form\')\n     >>> browser.getControl(\'Login Name\').value = \'rootuser\'\n-    >>> browser.getControl(\'Password\').value = \'secret\'\n+    >>> browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n     >>> browser.getControl(\'Log in\').click()\n     >>> \'You are now logged in\' in browser.contents\n     True\ndiff --git a/Products/CMFPlone/tests/csrf.txt b/Products/CMFPlone/tests/csrf.txt\nindex b5f8e22098..f03dbbb376 100644\n--- a/Products/CMFPlone/tests/csrf.txt\n+++ b/Products/CMFPlone/tests/csrf.txt\n@@ -98,8 +98,8 @@ be able to add new users himself if he wishes so:\n   >>> browser.getControl(\'Full Name\').value = \'John Doe\'\n   >>> browser.getControl(\'User Name\').value = \'john\'\n   >>> browser.getControl(\'Email\').value = \'john@foo-security.com\'\n-  >>> browser.getControl(\'Password\').value = \'y0d4Wg\'\n-  >>> browser.getControl(\'Confirm password\').value = \'y0d4Wg\'\n+  >>> browser.getControl(\'Password\').value = \'correct horse battery staple\'\n+  >>> browser.getControl(\'Confirm password\').value = \'correct horse battery staple\'\n   >>> browser.getControl(\'Register\').click()\n   >>> \'User added.\' in browser.contents\n   True\n@@ -145,17 +145,17 @@ know the current passwort to exploit this, but we\'ll check nevertheless:\n \n   >>> browser.open(\'http://nohost/plone/@@change-password\')\n   >>> browser.getControl(\'Current password\').value = TEST_USER_PASSWORD\n-  >>> browser.getControl(\'New password\').value = \'y0d4Wg\'\n-  >>> browser.getControl(\'Confirm password\').value = \'y0d4Wg\'\n+  >>> browser.getControl(\'New password\').value = \'new password\'\n+  >>> browser.getControl(\'Confirm password\').value = \'new password\'\n   >>> browser.getControl(\'Change Password\').click()\n   >>> browser.contents\n   \'...Info...Password changed...\'\n \n   >>> browser.goBack()\n   >>> browser.getControl(name=\'_authenticator\', index=0).value = \'invalid!\'\n-  >>> browser.getControl(\'Current password\').value = \'y0d4Wg\'\n-  >>> browser.getControl(\'New password\').value = \'y0d4Wg!\'\n-  >>> browser.getControl(\'Confirm password\').value = \'y0d4Wg!\'\n+  >>> browser.getControl(\'Current password\').value = \'new password\'\n+  >>> browser.getControl(\'New password\').value = \'newer password\'\n+  >>> browser.getControl(\'Confirm password\').value = \'newer password\'\n   >>> browser.getControl(\'Change Password\').click()\n   Traceback (most recent call last):\n   ...\n@@ -201,8 +201,8 @@ anymore (which at the same time tests the security control panel):\n   >>> browser.getLink(\'Add New User\').click()\n   >>> browser.getControl(\'User Name\').value = \'johnny\'\n   >>> browser.getControl(\'Email\').value = \'john@foo-security.com\'\n-  >>> browser.getControl(\'Password\').value = \'y0d4Wg!\'\n-  >>> browser.getControl(\'Confirm password\').value = \'y0d4Wg!\'\n+  >>> browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n+  >>> browser.getControl(\'Confirm password\').value = TEST_USER_PASSWORD\n   >>> browser.getControl(\'Register\').click()\n   >>> browser.contents\n   \'...Info...User added...\'\n@@ -423,12 +423,12 @@ limitations, which is why we need to log in as the portal owner first:\n \n   >>> app_browser = Browser(app)\n   >>> app_browser.handleErrors = False\n-  >>> app.acl_users.userFolderAddUser(\'app\', \'secret\', [\'Manager\'], [])\n+  >>> app.acl_users.userFolderAddUser(\'app\', TEST_USER_PASSWORD, [\'Manager\'], [])\n   >>> from plone.testing import zope\n   >>> zope.logout()\n   >>> zope.login(app[\'acl_users\'], \'app\')\n   >>> import transaction; transaction.commit()\n-  >>> app_browser.addHeader(\'Authorization\', \'Basic app:secret\')\n+  >>> app_browser.addHeader(\'Authorization\', f\'Basic app:{TEST_USER_PASSWORD}\')\n   >>> app_browser.open(\'http://nohost/plone/@@overview-controlpanel\')\n   >>> app_browser.getLink(\'Maintenance\').click()\n   >>> app_browser.getControl(name=\'_authenticator\', index=0).value = \'invalid!\'\ndiff --git a/Products/CMFPlone/tests/pwreset_browser.rst b/Products/CMFPlone/tests/pwreset_browser.rst\nindex da70832d02..795e781d95 100644\n--- a/Products/CMFPlone/tests/pwreset_browser.rst\n+++ b/Products/CMFPlone/tests/pwreset_browser.rst\n@@ -127,8 +127,8 @@ Now register a new user:\n \n   >>> browser.getControl(\'User Name\').value = \'jsmith\'\n   >>> browser.getControl(\'Email\').value = \'jsmith@example.com\'\n-  >>> browser.getControl(\'Password\').value = \'secret\'\n-  >>> browser.getControl(\'Confirm password\').value = \'secret\'\n+  >>> browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n+  >>> browser.getControl(\'Confirm password\').value = TEST_USER_PASSWORD\n   >>> browser.getControl(\'Register\').click()\n \n XXX Make sure we don\'t have a way to receive our credentials via\n@@ -143,7 +143,7 @@ We are not logged in yet at this point.  Let\'s try to log in:\n   >>> browser.url.startswith(\'http://nohost/plone/login\')\n   True\n   >>> browser.getControl(name=\'__ac_name\').value = \'jsmith\'\n-  >>> browser.getControl(name=\'__ac_password\').value = \'secret\'\n+  >>> browser.getControl(name=\'__ac_password\').value = TEST_USER_PASSWORD\n   >>> browser.getControl(name=\'buttons.login\').click()\n   >>> "You are now logged in" in browser.contents\n   True\n@@ -168,7 +168,7 @@ We check if the old password still works.\n \n   >>> browser.open(\'http://nohost/plone/login\')\n   >>> browser.getControl(name=\'__ac_name\').value = \'jsmith\'\n-  >>> browser.getControl(name=\'__ac_password\').value = \'secret\'\n+  >>> browser.getControl(name=\'__ac_password\').value = TEST_USER_PASSWORD\n   >>> browser.getControl(name=\'buttons.login\').click()\n \n We should be logged in now:\n@@ -377,7 +377,7 @@ Log out again and then join:\n \n We shouldn\'t be able to fill in our password:\n \n-  >>> browser.getControl(\'Password\').value = \'secret\' # doctest: +ELLIPSIS\n+  >>> browser.getControl(\'Password\').value = TEST_USER_PASSWORD # doctest: +ELLIPSIS\n   Traceback (most recent call last):\n   ...\n   LookupError: label \'Password\'\n@@ -425,8 +425,8 @@ Now that we have the address, we will reset our password:\n   >>> "Please fill out the form below to set your password" in browser.contents\n   True\n   >>> browser.getControl(name=\'userid\').value = \'bsmith\'\n-  >>> browser.getControl(name=\'password\').value = \'secret\'\n-  >>> browser.getControl(name=\'password2\').value = \'secret\'\n+  >>> browser.getControl(name=\'password\').value = TEST_USER_PASSWORD\n+  >>> browser.getControl(name=\'password2\').value = TEST_USER_PASSWORD\n   >>> browser.getControl("Set my password").click()\n   >>> "Password reset successful, you are logged in now!" in browser.contents\n   True\n@@ -471,8 +471,8 @@ We navigate to the Users Adding page and register a new user:\n   >>> browser.open(\'http://nohost/plone/@@new-user\')\n   >>> browser.getControl(\'User Name\').value = \'wwwsmith\'\n   >>> browser.getControl(\'Email\').value = \'wwwsmith@example.com\'\n-  >>> browser.getControl(\'Password\').value = \'secret\'\n-  >>> browser.getControl(\'Confirm password\').value = \'secret\'\n+  >>> browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n+  >>> browser.getControl(\'Confirm password\').value = TEST_USER_PASSWORD\n   >>> browser.getControl(\'Send a confirmation mail with a link to set the password\').selected = True\n \n Now register and logout:\ndiff --git a/Products/CMFPlone/tests/robot/test_overlays.robot b/Products/CMFPlone/tests/robot/test_overlays.robot\nindex 83070070fc..b8fca6d3d9 100644\n--- a/Products/CMFPlone/tests/robot/test_overlays.robot\n+++ b/Products/CMFPlone/tests/robot/test_overlays.robot\n@@ -272,8 +272,8 @@ I enter valid user data\n     Wait until page contains element  name=form.widgets.password_ctl\n     Input text for sure  form.widgets.username       myuser\n     Input text for sure  form.widgets.email          my@email.eu\n-    Input text for sure  form.widgets.password       123123\n-    Input text for sure  form.widgets.password_ctl   123123\n+    Input text for sure  form.widgets.password       newpassword\n+    Input text for sure  form.widgets.password_ctl   newpassword\n \n I enter valid register user data\n     Wait until page contains element  name=form.widgets.username\ndiff --git a/Products/CMFPlone/tests/search_form.rst b/Products/CMFPlone/tests/search_form.rst\nindex 466e1a97c8..4777363743 100644\n--- a/Products/CMFPlone/tests/search_form.rst\n+++ b/Products/CMFPlone/tests/search_form.rst\n@@ -3,6 +3,7 @@ We want to test the search form and the resulting page.\n Let\'s create a user to test upon\n see: testControlPanelScripts.txt:\n     >>> from DateTime import DateTime\n+    >>> from plone.app.testing import TEST_USER_PASSWORD\n     >>> app = layer[\'app\']\n     >>> portal = layer[\'portal\']\n     >>> fullname = \'Test User Full Name\'\n@@ -10,7 +11,7 @@ see: testControlPanelScripts.txt:\n     >>> email = \'test@plone.org\'\n     >>> last_login_time = DateTime()\n     >>> membership = portal.portal_membership\n-    >>> membership.addMember(username, \'secret\', [], [])\n+    >>> membership.addMember(username, TEST_USER_PASSWORD, [], [])\n     >>> member = membership.getMemberById(username)\n     >>> member.setMemberProperties({\'fullname\': fullname, \'email\': email,\n     ...                             \'last_login_time\': last_login_time,})\ndiff --git a/Products/CMFPlone/tests/testActionsTool.py b/Products/CMFPlone/tests/testActionsTool.py\nindex 8bcaed7d3a..1d6870ce6f 100644\n--- a/Products/CMFPlone/tests/testActionsTool.py\n+++ b/Products/CMFPlone/tests/testActionsTool.py\n@@ -1,6 +1,7 @@\n from Acquisition import Explicit\n from OFS.SimpleItem import Item\n from plone.app.testing import login\n+from plone.app.testing import TEST_USER_PASSWORD\n from Products.CMFCore.ActionInformation import Action\n from Products.CMFCore.ActionInformation import ActionInfo\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n@@ -23,7 +24,7 @@ class TestActionsTool(unittest.TestCase):\n     def setUp(self):\n         self.portal = self.layer[\'portal\']\n         self.actions = self.portal.portal_actions\n-        self.portal.acl_users._doAddUser(\'user1\', \'secret\', [\'Member\'], [])\n+        self.portal.acl_users._doAddUser(\'user1\', TEST_USER_PASSWORD, [\'Member\'], [])\n         self.portal.invokeFactory(\'Folder\', \'f1\')\n         self.folder = self.portal[\'f1\']\n \ndiff --git a/Products/CMFPlone/tests/testCSRFProtection.py b/Products/CMFPlone/tests/testCSRFProtection.py\nindex b2538c4b66..704300b4e7 100644\n--- a/Products/CMFPlone/tests/testCSRFProtection.py\n+++ b/Products/CMFPlone/tests/testCSRFProtection.py\n@@ -50,13 +50,13 @@ def test_PloneTool_renameObjectsByPaths(self):\n     def test_RegistrationTool_editMember(self):\n         self.checkAuthenticator(\n             \'/portal_registration/editMember\',\n-            \'member_id=%s&password=y0d4Wg&properties.foo:record=\' % (\n+            \'member_id=%s&password=correct+horse+battery+staple&properties.foo:record=\' % (\n                 TEST_USER_ID))\n \n     def test_MembershipTool_setPassword(self):\n         self.checkAuthenticator(\n             \'/portal_membership/setPassword\',\n-            \'password=y0d4Wg\',\n+            \'password=correct+horse+battery+staple\',\n             status=204)\n \n     def test_MembershipTool_deleteMemberArea(self):\ndiff --git a/Products/CMFPlone/tests/testCatalogTool.py b/Products/CMFPlone/tests/testCatalogTool.py\nindex da4e38584a..909e7f9178 100644\n--- a/Products/CMFPlone/tests/testCatalogTool.py\n+++ b/Products/CMFPlone/tests/testCatalogTool.py\n@@ -5,6 +5,7 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.textfield import RichTextValue\n from plone.dexterity.content import CEILING_DATE\n from plone.indexer.wrapper import IndexableObjectWrapper\n@@ -365,7 +366,7 @@ def afterSetUp(self):\n         self.workflow = self.portal.portal_workflow\n         self.groups = self.portal.portal_groups\n \n-        self.portal.acl_users._doAddUser(user2, \'secret\', [], [])\n+        self.portal.acl_users._doAddUser(user2, TEST_USER_PASSWORD, [], [])\n \n         self.folder.invokeFactory(\'Document\', id=\'doc\', text=\'foo\')\n         self.folder.invokeFactory(\'Folder\', id=\'folder2\')\n@@ -1016,7 +1017,7 @@ def afterSetUp(self):\n         self.folder.invokeFactory(\'Document\', id=\'doc\')\n \n         # Create unprivileged user\n-        self.portal.acl_users._doAddUser(user2, \'secret\', [\'Member\'], [])\n+        self.portal.acl_users._doAddUser(user2, TEST_USER_PASSWORD, [\'Member\'], [])\n \n     def nofx(self):\n         # Removes effective and expires to make sure we only test\ndiff --git a/Products/CMFPlone/tests/testContentSecurity.py b/Products/CMFPlone/tests/testContentSecurity.py\nindex 5d8945cd30..aea5cc0e2a 100644\n--- a/Products/CMFPlone/tests/testContentSecurity.py\n+++ b/Products/CMFPlone/tests/testContentSecurity.py\n@@ -1,5 +1,6 @@\n from AccessControl import Unauthorized\n from Acquisition import aq_base\n+from plone.app.testing import TEST_USER_PASSWORD\n from Products.CMFPlone.tests.PloneTestCase import PloneTestCase\n from zExceptions.unauthorized import Unauthorized as zUnauthorized\n from zope.component import getMultiAdapter\n@@ -9,10 +10,10 @@ class TestContentSecurity(PloneTestCase):\n \n     def afterSetUp(self):\n         self.request = self.layer["request"]\n-        self.portal.acl_users._doAddUser(\'user1\', \'secret\', [\'Member\'], [])\n-        self.portal.acl_users._doAddUser(\'user2\', \'secret\', [\'Member\'], [])\n+        self.portal.acl_users._doAddUser(\'user1\', TEST_USER_PASSWORD, [\'Member\'], [])\n+        self.portal.acl_users._doAddUser(\'user2\', TEST_USER_PASSWORD, [\'Member\'], [])\n         #_ender_\'s member who\'s not a Member usecase\n-        self.portal.acl_users._doAddUser(\'user3\', \'secret\', [], [])\n+        self.portal.acl_users._doAddUser(\'user3\', TEST_USER_PASSWORD, [], [])\n         self.membership = self.portal.portal_membership\n         self.workflow = self.portal.portal_workflow\n         self.createMemberarea(\'user1\')\ndiff --git a/Products/CMFPlone/tests/testCutPasteSecurity.py b/Products/CMFPlone/tests/testCutPasteSecurity.py\nindex ddf8cf6ecb..bf99c6252e 100644\n--- a/Products/CMFPlone/tests/testCutPasteSecurity.py\n+++ b/Products/CMFPlone/tests/testCutPasteSecurity.py\n@@ -1,6 +1,7 @@\n from AccessControl import Unauthorized\n from Acquisition import aq_base\n from OFS.CopySupport import CopyError\n+from plone.app.testing import TEST_USER_PASSWORD\n from Products.CMFCore.interfaces import IContentish\n from Products.CMFPlone.tests.PloneTestCase import PloneTestCase\n from urllib.error import HTTPError\n@@ -14,8 +15,8 @@\n class TestCutPasteSecurity(PloneTestCase):\n \n     def afterSetUp(self):\n-        self.portal.acl_users._doAddUser(\'user1\', \'secret\', [\'Member\'], [])\n-        self.portal.acl_users._doAddUser(\'user2\', \'secret\', [\'Member\'], [])\n+        self.portal.acl_users._doAddUser(\'user1\', TEST_USER_PASSWORD, [\'Member\'], [])\n+        self.portal.acl_users._doAddUser(\'user2\', TEST_USER_PASSWORD, [\'Member\'], [])\n         self.membership = self.portal.portal_membership\n         self.createMemberarea(\'user1\')\n         self.createMemberarea(\'user2\')\ndiff --git a/Products/CMFPlone/tests/testEmailLogin.py b/Products/CMFPlone/tests/testEmailLogin.py\nindex e54dfdd00b..0e12786f3c 100644\n--- a/Products/CMFPlone/tests/testEmailLogin.py\n+++ b/Products/CMFPlone/tests/testEmailLogin.py\n@@ -1,5 +1,6 @@\n from AccessControl import Unauthorized\n from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.base.interfaces import ISecuritySchema\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n@@ -30,7 +31,7 @@ def testSetOwnLoginName(self):\n \n     def testSetLoginNameOfOther(self):\n         memship = self.portal.portal_membership\n-        memship.addMember(\'maurits\', \'secret\', [], [])\n+        memship.addMember(\'maurits\', TEST_USER_PASSWORD, [], [])\n         member = memship.getMemberById(\'maurits\')\n         self.assertRaises(Unauthorized, set_own_login_name, member, \'vanrees\')\n         # The admin *should* be able to change the login name of\ndiff --git a/Products/CMFPlone/tests/testExternalEditorEnabled.py b/Products/CMFPlone/tests/testExternalEditorEnabled.py\nindex 50775e7120..5333d831e4 100644\n--- a/Products/CMFPlone/tests/testExternalEditorEnabled.py\n+++ b/Products/CMFPlone/tests/testExternalEditorEnabled.py\n@@ -1,3 +1,4 @@\n+from plone.app.testing import TEST_USER_PASSWORD\n from Products.CMFPlone.tests import PloneTestCase\n \n import unittest\n@@ -21,7 +22,7 @@ def afterSetUp(self):\n         self.doc = self.folder.doc\n         self.folder.invokeFactory(\'Folder\', \'folder2\')\n         self.folder = self.folder.folder2\n-        self.portal.acl_users._doAddUser(\'user1\', \'secret\', [\'Member\'], [])\n+        self.portal.acl_users._doAddUser(\'user1\', TEST_USER_PASSWORD, [\'Member\'], [])\n         self.mtool = self.portal.portal_membership\n         member = self.mtool.getAuthenticatedMember()\n         member.setMemberProperties({\'ext_editor\': 1})\ndiff --git a/Products/CMFPlone/tests/testPloneTool.py b/Products/CMFPlone/tests/testPloneTool.py\nindex 86a8d2b365..712dbb04aa 100644\n--- a/Products/CMFPlone/tests/testPloneTool.py\n+++ b/Products/CMFPlone/tests/testPloneTool.py\n@@ -1,5 +1,6 @@\n from Acquisition import Implicit\n from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.base.interfaces import IReorderedEvent\n from plone.base.interfaces import ISearchSchema\n from plone.registry.interfaces import IRegistry\n@@ -171,7 +172,7 @@ class TestOwnershipStuff(PloneTestCase.PloneTestCase):\n     def afterSetUp(self):\n         self.utils = self.portal.plone_utils\n         self.membership = self.portal.portal_membership\n-        self.membership.addMember("new_owner", "secret", ["Member"], [])\n+        self.membership.addMember("new_owner", TEST_USER_PASSWORD, ["Member"], [])\n         self.folder.invokeFactory("Folder", "folder1")\n         self.folder1 = self.folder.folder1\n         self.folder1.invokeFactory("Folder", "folder2")\ndiff --git a/Products/CMFPlone/tests/testRegistrationTool.py b/Products/CMFPlone/tests/testRegistrationTool.py\nindex 677ca7191f..a49561a014 100644\n--- a/Products/CMFPlone/tests/testRegistrationTool.py\n+++ b/Products/CMFPlone/tests/testRegistrationTool.py\n@@ -1,4 +1,6 @@\n+from re import T\n from AccessControl import Unauthorized\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.base.interfaces.controlpanel import IMailSchema\n from plone.base.interfaces.controlpanel import ISiteSchema\n from plone.registry.interfaces import IRegistry\n@@ -32,7 +34,7 @@ def afterSetUp(self):\n         self.portal.acl_users._doAddGroup("groupid", ())\n \n     def testJoinCreatesUser(self):\n-        self.registration.addMember(member_id, \'secret\',\n+        self.registration.addMember(member_id, TEST_USER_PASSWORD,\n                                     properties={\'username\': member_id,\n                                                 \'email\': \'foo@bar.com\'})\n         user = self.portal.acl_users.getUserById(member_id)\n@@ -42,12 +44,12 @@ def testCannotRegisterWithRootAdminUsername(self):\n         root_user = self.portal.aq_parent.acl_users.users.listUserIds()[0]\n         self.assertRaises(ValueError,\n                           self.registration.addMember,\n-                          root_user, \'secret\',\n+                          root_user, TEST_USER_PASSWORD,\n                           properties={\'username\': root_user,\n                                       \'email\': \'foo@bar.com\'})\n \n     def testJoinWithUppercaseEmailCreatesUser(self):\n-        self.registration.addMember(member_id, \'secret\',\n+        self.registration.addMember(member_id, TEST_USER_PASSWORD,\n                                     properties={\'username\': member_id,\n                                                 \'email\': \'FOO@BAR.COM\'})\n         user = self.portal.acl_users.getUserById(member_id)\n@@ -56,13 +58,13 @@ def testJoinWithUppercaseEmailCreatesUser(self):\n     def testJoinWithoutEmailRaisesValueError(self):\n         self.assertRaises(ValueError,\n                           self.registration.addMember,\n-                          member_id, \'secret\',\n+                          member_id, TEST_USER_PASSWORD,\n                           properties={\'username\': member_id, \'email\': \'\'})\n \n     def testJoinWithBadEmailRaisesValueError(self):\n         self.assertRaises(ValueError,\n                           self.registration.addMember,\n-                          member_id, \'secret\',\n+                          member_id, TEST_USER_PASSWORD,\n                           properties={\n                               \'username\': member_id,\n                               \'email\': \'foo@bar.com, fred@bedrock.com\'})\n@@ -70,23 +72,23 @@ def testJoinWithBadEmailRaisesValueError(self):\n     def testJoinAsExistingMemberRaisesValueError(self):\n         self.assertRaises(ValueError,\n                           self.registration.addMember,\n-                          PloneTestCase.default_user, \'secret\',\n+                          PloneTestCase.default_user, TEST_USER_PASSWORD,\n                           properties={\'username\': \'Dr FooBar\',\n                                       \'email\': \'foo@bar.com\'})\n \n     def testJoinAsExistingNonMemberUserRaisesValueError(self):\n         # http://dev.plone.org/plone/ticket/3221\n-        self.portal.acl_users._doAddUser(member_id, \'secret\', [], [])\n+        self.portal.acl_users._doAddUser(member_id, TEST_USER_PASSWORD, [], [])\n         self.assertRaises(ValueError,\n                           self.registration.addMember,\n-                          member_id, \'secret\',\n+                          member_id, TEST_USER_PASSWORD,\n                           properties={\'username\': member_id,\n                                       \'email\': \'foo@bar.com\'})\n \n     def testJoinWithPortalIdAsUsernameRaisesValueError(self):\n         self.assertRaises(ValueError,\n                           self.registration.addMember,\n-                          self.portal.getId(), \'secret\',\n+                          self.portal.getId(), TEST_USER_PASSWORD,\n                           properties={\'username\': \'Dr FooBar\',\n                                       \'email\': \'foo@bar.com\'})\n \n@@ -104,23 +106,23 @@ def testTestPasswordValidityConfirm(self):\n             \'validpassword\', confirm=\'anotherpassword\') is None)\n \n     def testTestPasswordValidityPolicy(self):\n-        self.assertIsNone(self.registration.testPasswordValidity("abcde", confirm=None))\n+        self.assertIsNone(self.registration.testPasswordValidity(TEST_USER_PASSWORD, confirm=None))\n         self.assertEqual(\n             self.registration.testPasswordValidity("abcd", confirm=None),\n-            "Your password must contain at least 5 characters.",\n+            "Your password must contain at least ${min_chars} characters.",\n         )\n         # Password validity is checked with an empty password\n         # to get a nice help message to show for the input field.\n         self.assertEqual(\n             self.registration.testPasswordValidity("", confirm=None),\n-            "Minimum 5 characters.",\n+            "Minimum ${min_chars} characters.",\n         )\n \n     def testPasValidation(self):\n-        self.assertIsNone(self.registration.pasValidation("password", "abcde"))\n+        self.assertIsNone(self.registration.pasValidation("password", TEST_USER_PASSWORD))\n         self.assertEqual(\n             self.registration.pasValidation("password", "abcd"),\n-            "Your password must contain at least 5 characters.",\n+            "Your password must contain at least ${min_chars} characters.",\n         )\n \n     def testNewIdAllowed(self):\n@@ -144,7 +146,7 @@ def testRegisteredNotify(self):\n         sm.unregisterUtility(provided=IMailHost)\n         sm.registerUtility(mails, IMailHost)\n         # Register a user\n-        self.registration.addMember(member_id, \'secret\',\n+        self.registration.addMember(member_id, TEST_USER_PASSWORD,\n                                     properties={\'username\': member_id,\n                                                 \'email\': \'foo@bar.com\'})\n \n@@ -174,7 +176,7 @@ def testRegisteredNotifyEncoding(self):\n         sm.unregisterUtility(provided=IMailHost)\n         sm.registerUtility(mails, IMailHost)\n         # Register a user\n-        self.registration.addMember(member_id, \'secret\',\n+        self.registration.addMember(member_id, TEST_USER_PASSWORD,\n                                     properties={\'username\': member_id,\n                                                 \'email\': \'foo@bar.com\'})\n         registry = getUtility(IRegistry)\n@@ -203,7 +205,7 @@ def testMailPassword(self):\n         sm.unregisterUtility(provided=IMailHost)\n         sm.registerUtility(mails, IMailHost)\n         # Register a user\n-        self.registration.addMember(member_id, \'secret\',\n+        self.registration.addMember(member_id, TEST_USER_PASSWORD,\n                                     properties={\'username\': member_id,\n                                                 \'email\': \'foo@bar.com\'})\n \n@@ -234,7 +236,7 @@ def testMailPasswordEncoding(self):\n         sm.unregisterUtility(provided=IMailHost)\n         sm.registerUtility(mails, IMailHost)\n         # Register a user\n-        self.registration.addMember(member_id, \'secret\',\n+        self.registration.addMember(member_id, TEST_USER_PASSWORD,\n                                     properties={\'username\': member_id,\n                                                 \'email\': \'foo@bar.com\'})\n         registry = getUtility(IRegistry)\ndiff --git a/Products/CMFPlone/tests/testWorkflowTool.py b/Products/CMFPlone/tests/testWorkflowTool.py\nindex 1ad2c70102..298c20fcef 100644\n--- a/Products/CMFPlone/tests/testWorkflowTool.py\n+++ b/Products/CMFPlone/tests/testWorkflowTool.py\n@@ -1,3 +1,4 @@\n+from plone.app.testing import TEST_USER_PASSWORD\n from Products.CMFCore.interfaces import IWorkflowTool\n from Products.CMFPlone.tests import PloneTestCase\n from Products.CMFPlone.tests.dummy import Dummy\n@@ -21,10 +22,10 @@ class TestWorkflowTool(PloneTestCase.PloneTestCase):\n     def afterSetUp(self):\n         self.workflow = self.portal.portal_workflow\n \n-        self.portal.acl_users._doAddUser(\'member\', \'secret\', [\'Member\'], [])\n-        self.portal.acl_users._doAddUser(\'reviewer\', \'secret\',\n+        self.portal.acl_users._doAddUser(\'member\', TEST_USER_PASSWORD, [\'Member\'], [])\n+        self.portal.acl_users._doAddUser(\'reviewer\', TEST_USER_PASSWORD,\n                                          [\'Reviewer\'], [])\n-        self.portal.acl_users._doAddUser(\'manager\', \'secret\', [\'Manager\'], [])\n+        self.portal.acl_users._doAddUser(\'manager\', TEST_USER_PASSWORD, [\'Manager\'], [])\n \n         self.folder.invokeFactory(\'Document\', id=\'doc\')\n         self.doc = self.folder.doc\ndiff --git a/Products/CMFPlone/tests/test_login_form.py b/Products/CMFPlone/tests/test_login_form.py\nindex b997f404a8..94dfc4683a 100644\n--- a/Products/CMFPlone/tests/test_login_form.py\n+++ b/Products/CMFPlone/tests/test_login_form.py\n@@ -1,5 +1,6 @@\n from DateTime import DateTime\n from plone.app.z3cform.interfaces import IPloneFormLayer\n+from plone.app.testing import TEST_USER_PASSWORD\n from Products.CMFCore.permissions import SetOwnProperties\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n@@ -43,7 +44,7 @@ def _setup_authenticator_request(self):\n     def test_form_update(self):\n         self._setup_authenticator_request()\n         self.request[\'__ac_name\'] = \'test\'\n-        self.request[\'__ac_password\'] = \'secret\'\n+        self.request[\'__ac_password\'] = TEST_USER_PASSWORD\n         self.request[\'form.widgets.came_from\'] = [\'\']\n         form = self.portal.restrictedTraverse(FORM_ID)\n         form.update()\n@@ -61,7 +62,7 @@ def test_failsafe_login_form(self):\n     def test_failsafe_login_form_update(self):\n         self._setup_authenticator_request()\n         self.request[\'__ac_name\'] = \'test\'\n-        self.request[\'__ac_password\'] = \'secret\'\n+        self.request[\'__ac_password\'] = TEST_USER_PASSWORD\n         self.request[\'form.widgets.came_from\'] = [\'\']\n         form = self.portal.restrictedTraverse(\'failsafe_login\')\n         form.update()\ndiff --git a/Products/CMFPlone/tests/test_login_logout.py b/Products/CMFPlone/tests/test_login_logout.py\nindex 8998d07549..2dea7c43e7 100644\n--- a/Products/CMFPlone/tests/test_login_logout.py\n+++ b/Products/CMFPlone/tests/test_login_logout.py\n@@ -63,14 +63,14 @@ def test_login_with_user_defined_in_root_user_folder(self):\n         """\n         self.layer[\'app\'].acl_users.userFolderAddUser(\n             \'rootuser\',\n-            \'secret\',\n+            TEST_USER_PASSWORD,\n             [],\n             []\n         )\n         transaction.commit()\n         self.browser.open(\'http://nohost/plone/login\')\n         self.browser.getControl(\'Login Name\').value = \'rootuser\'\n-        self.browser.getControl(\'Password\').value = \'secret\'\n+        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n         self.browser.getControl(\'Log in\').click()\n         self.assertIn(\'You are now logged in\', self.browser.contents)\n \ndiff --git a/news/3646.bugfix b/news/3646.bugfix\nnew file mode 100644\nindex 0000000000..b2b72981ed\n--- /dev/null\n+++ b/news/3646.bugfix\n@@ -0,0 +1 @@\n+- Fix tests to work with longer minimum password length [davisagli]\n'

