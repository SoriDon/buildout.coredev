Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2018-06-14T15:06:35-03:00
Author: hvelarde (hvelarde) <hector.velarde@gmail.com>
Commit: https://github.com/plone/plone.app.contentlisting/commit/845c86a82b1e2aa2ffd8f5fbb761f6ffc01ac82f

Minor refactoring for Python 3 compatibility

Files changed:
M CHANGES.rst
M plone/app/contentlisting/contentlisting.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 9395e4d..971b63b 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -11,7 +11,8 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Minor refactoring for Python 3 compatibility.\n+  [hvelarde]\n \n Bug fixes:\n \ndiff --git a/plone/app/contentlisting/contentlisting.py b/plone/app/contentlisting/contentlisting.py\nindex 597f3c8..5db1ae6 100644\n--- a/plone/app/contentlisting/contentlisting.py\n+++ b/plone/app/contentlisting/contentlisting.py\n@@ -66,6 +66,10 @@ def __eq__(self, other):\n         """`x.__eq__(other)` <==> `x == other`"""\n         raise NotImplementedError\n \n+    def __hash__(self):\n+        """`x.__hash__()`"""\n+        raise NotImplementedError\n+\n     def __ne__(self, other):\n         """`x.__ne__(other)` <==> `x != other`"""\n         raise NotImplementedError\n@@ -90,13 +94,6 @@ def __rmul__(self, n):\n         """`x.__rmul__(n)` <==> `n * x`"""\n         raise NotImplementedError\n \n-    def __getslice__(self, i, j):\n-        """`x.__getslice__(i, j)` <==> `x[i:j]`\n-        Use of negative indices is not supported.\n-        Deprecated since Python 2.0 but still a part of `UserList`.\n-        """\n-        return IContentListing(self._basesequence[i:j])\n-\n \n class BaseContentListingObject(object):\n     """A baseclass for the different types of contentlistingobjects.\n@@ -109,6 +106,9 @@ def __eq__(self, other):\n         other = IContentListingObject(other)\n         return self.uuid() == other.uuid()\n \n+    def __hash__(self):\n+        return hash(self.uuid())\n+\n     def ContentTypeClass(self):\n         # A normalised type name that identifies the object in listings.\n         # Used for CSS styling.\n'

Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2018-06-16T09:27:38+02:00
Author: Gil Forcada (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.contentlisting/commit/57d330c58caacf0c05ba8905a4e195a870a80624

Handle slices

In py3 ``__getitem__`` not only gets a number (an index),
but it can also get a slice (i.e. the subscript on list[1:2:]).

Files changed:
M CHANGES.rst
M plone/app/contentlisting/contentlisting.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 971b63b..17555c7 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -13,6 +13,8 @@ New features:\n \n - Minor refactoring for Python 3 compatibility.\n   [hvelarde]\n+- Handle slices in ``IContentListing.__getitem__``.\n+  [gforcada]\n \n Bug fixes:\n \ndiff --git a/plone/app/contentlisting/contentlisting.py b/plone/app/contentlisting/contentlisting.py\nindex 5db1ae6..494d3d7 100644\n--- a/plone/app/contentlisting/contentlisting.py\n+++ b/plone/app/contentlisting/contentlisting.py\n@@ -26,6 +26,13 @@ def __init__(self, sequence):\n     def __getitem__(self, index):\n         """`x.__getitem__(index)` <==> `x[index]`\n         """\n+        if isinstance(index, slice):\n+            max_elements = min((index.stop, len(self._basesequence)))\n+            return IContentListing([\n+                self._basesequence[x]\n+                for x in range(*index.indices(max_elements))\n+            ])\n+\n         return IContentListingObject(self._basesequence[index])\n \n     def __len__(self):\n'

Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2018-06-25T17:18:44+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.app.contentlisting/commit/6a5411d01217ea3fd87253aeb9f5dcccef2e68dc

Fix tests on Python 3

Files changed:
M CHANGES.rst
M plone/app/contentlisting/contentlisting.py
M plone/app/contentlisting/tests/integration.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 17555c7..3f975a7 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -11,10 +11,8 @@ Breaking changes:\n \n New features:\n \n-- Minor refactoring for Python 3 compatibility.\n-  [hvelarde]\n-- Handle slices in ``IContentListing.__getitem__``.\n-  [gforcada]\n+- Python 3 support\n+  [hvelarde, gforcada, davisagli]\n \n Bug fixes:\n \ndiff --git a/plone/app/contentlisting/contentlisting.py b/plone/app/contentlisting/contentlisting.py\nindex 494d3d7..e01d2c6 100644\n--- a/plone/app/contentlisting/contentlisting.py\n+++ b/plone/app/contentlisting/contentlisting.py\n@@ -27,12 +27,8 @@ def __getitem__(self, index):\n         """`x.__getitem__(index)` <==> `x[index]`\n         """\n         if isinstance(index, slice):\n-            max_elements = min((index.stop, len(self._basesequence)))\n-            return IContentListing([\n-                self._basesequence[x]\n-                for x in range(*index.indices(max_elements))\n-            ])\n-\n+            return IContentListing(\n+                self._basesequence[index.start:index.stop:index.step])\n         return IContentListingObject(self._basesequence[index])\n \n     def __len__(self):\n@@ -101,6 +97,14 @@ def __rmul__(self, n):\n         """`x.__rmul__(n)` <==> `n * x`"""\n         raise NotImplementedError\n \n+    def __getslice__(self, i, j):\n+        """`x.__getslice__(i, j)` <==> `x[i:j]`\n+        Use of negative indices is not supported.\n+        No longer used in Python 3, but still part of\n+        zope.interface.interfaces.IReadSequence\n+        """\n+        return IContentListing(self._basesequence[i:j])\n+\n \n class BaseContentListingObject(object):\n     """A baseclass for the different types of contentlistingobjects.\ndiff --git a/plone/app/contentlisting/tests/integration.rst b/plone/app/contentlisting/tests/integration.rst\nindex a5c8f6e..dc6878e 100644\n--- a/plone/app/contentlisting/tests/integration.rst\n+++ b/plone/app/contentlisting/tests/integration.rst\n@@ -42,7 +42,7 @@ The listitem provides all the methods of the IContentListingObject interface\n It can report what its source of data is\n \n     >>> print(listitem.getDataOrigin())\n-    <Products.ZCatalog.Catalog.mybrains object at...>\n+    <Products.ZCatalog.Catalog...mybrains object at...>\n \n and if we access attributes on it that are not in the interface or in the\n brain, it will transparently fetch the real object and cache it to get\n@@ -115,8 +115,9 @@ Some types may require \'/view\' appended to their URLs. Currently these don\'t\n \n By altering portal_properties, we can make this true for Documents\n \n+    >>> import six\n     >>> registry = portal.portal_registry\n-    >>> registry[\'plone.types_use_view_action_in_listings\'] = [unicode(frontpage.portal_type)]\n+    >>> registry[\'plone.types_use_view_action_in_listings\'] = [six.text_type(frontpage.portal_type)]\n \n     >>> frontpage.appendViewAction()\n     \'/view\'\n@@ -154,7 +155,7 @@ Just to check, these will be catalog objects using a brain internally\n     >>> frontpage.__class__\n     <class \'plone.app.contentlisting.catalog.CatalogContentListingObject\'>\n     >>> print(frontpage.getDataOrigin())\n-    <Products.ZCatalog.Catalog.mybrains object at...>\n+    <Products.ZCatalog.Catalog...mybrains object at...>\n     >>> frontpage.isVisibleInNav()\n     True\n \n@@ -187,7 +188,7 @@ This will be indexed, so an object isn\'t necessary to check this\n     >>> frontpage.isVisibleInNav()\n     False\n     >>> print(frontpage.getDataOrigin())\n-    <Products.ZCatalog.Catalog.mybrains object at...>\n+    <Products.ZCatalog.Catalog...mybrains object at...>\n \n But a real object still works.\n \n'

Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2018-06-25T17:23:13+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.app.contentlisting/commit/9c34aed665744ef5bc54812b281108f0a61f3b6d

Remove TODO that is not going to be done

Files changed:
M plone/app/contentlisting/catalog.py

b"diff --git a/plone/app/contentlisting/catalog.py b/plone/app/contentlisting/catalog.py\nindex b2ef910..2380545 100644\n--- a/plone/app/contentlisting/catalog.py\n+++ b/plone/app/contentlisting/catalog.py\n@@ -133,8 +133,6 @@ def getUserData(self, username):\n                     'username': username,\n                     'description': '',\n                     'language': '',\n-                    # TODO\n-                    # string:${navigation_root_url}/author/${item_creator}\n                     'home_page': '/HOMEPAGEURL',\n                     'location': '',\n                     'fullname': username,\n"

Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2018-06-25T18:11:56+02:00
Author: David Glick (davisagli) <david.glick@plone.org>
Commit: https://github.com/plone/plone.app.contentlisting/commit/abd41c7bfbb59bea7c400606668b961ff3c5709f

Merge pull request #28 from plone/python3

Minor refactoring for Python 3 compatibility

Files changed:
M CHANGES.rst
M plone/app/contentlisting/catalog.py
M plone/app/contentlisting/contentlisting.py
M plone/app/contentlisting/tests/integration.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 9395e4d..3f975a7 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -11,7 +11,8 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Python 3 support\n+  [hvelarde, gforcada, davisagli]\n \n Bug fixes:\n \ndiff --git a/plone/app/contentlisting/catalog.py b/plone/app/contentlisting/catalog.py\nindex b2ef910..2380545 100644\n--- a/plone/app/contentlisting/catalog.py\n+++ b/plone/app/contentlisting/catalog.py\n@@ -133,8 +133,6 @@ def getUserData(self, username):\n                     \'username\': username,\n                     \'description\': \'\',\n                     \'language\': \'\',\n-                    # TODO\n-                    # string:${navigation_root_url}/author/${item_creator}\n                     \'home_page\': \'/HOMEPAGEURL\',\n                     \'location\': \'\',\n                     \'fullname\': username,\ndiff --git a/plone/app/contentlisting/contentlisting.py b/plone/app/contentlisting/contentlisting.py\nindex 597f3c8..e01d2c6 100644\n--- a/plone/app/contentlisting/contentlisting.py\n+++ b/plone/app/contentlisting/contentlisting.py\n@@ -26,6 +26,9 @@ def __init__(self, sequence):\n     def __getitem__(self, index):\n         """`x.__getitem__(index)` <==> `x[index]`\n         """\n+        if isinstance(index, slice):\n+            return IContentListing(\n+                self._basesequence[index.start:index.stop:index.step])\n         return IContentListingObject(self._basesequence[index])\n \n     def __len__(self):\n@@ -66,6 +69,10 @@ def __eq__(self, other):\n         """`x.__eq__(other)` <==> `x == other`"""\n         raise NotImplementedError\n \n+    def __hash__(self):\n+        """`x.__hash__()`"""\n+        raise NotImplementedError\n+\n     def __ne__(self, other):\n         """`x.__ne__(other)` <==> `x != other`"""\n         raise NotImplementedError\n@@ -93,7 +100,8 @@ def __rmul__(self, n):\n     def __getslice__(self, i, j):\n         """`x.__getslice__(i, j)` <==> `x[i:j]`\n         Use of negative indices is not supported.\n-        Deprecated since Python 2.0 but still a part of `UserList`.\n+        No longer used in Python 3, but still part of\n+        zope.interface.interfaces.IReadSequence\n         """\n         return IContentListing(self._basesequence[i:j])\n \n@@ -109,6 +117,9 @@ def __eq__(self, other):\n         other = IContentListingObject(other)\n         return self.uuid() == other.uuid()\n \n+    def __hash__(self):\n+        return hash(self.uuid())\n+\n     def ContentTypeClass(self):\n         # A normalised type name that identifies the object in listings.\n         # Used for CSS styling.\ndiff --git a/plone/app/contentlisting/tests/integration.rst b/plone/app/contentlisting/tests/integration.rst\nindex a5c8f6e..dc6878e 100644\n--- a/plone/app/contentlisting/tests/integration.rst\n+++ b/plone/app/contentlisting/tests/integration.rst\n@@ -42,7 +42,7 @@ The listitem provides all the methods of the IContentListingObject interface\n It can report what its source of data is\n \n     >>> print(listitem.getDataOrigin())\n-    <Products.ZCatalog.Catalog.mybrains object at...>\n+    <Products.ZCatalog.Catalog...mybrains object at...>\n \n and if we access attributes on it that are not in the interface or in the\n brain, it will transparently fetch the real object and cache it to get\n@@ -115,8 +115,9 @@ Some types may require \'/view\' appended to their URLs. Currently these don\'t\n \n By altering portal_properties, we can make this true for Documents\n \n+    >>> import six\n     >>> registry = portal.portal_registry\n-    >>> registry[\'plone.types_use_view_action_in_listings\'] = [unicode(frontpage.portal_type)]\n+    >>> registry[\'plone.types_use_view_action_in_listings\'] = [six.text_type(frontpage.portal_type)]\n \n     >>> frontpage.appendViewAction()\n     \'/view\'\n@@ -154,7 +155,7 @@ Just to check, these will be catalog objects using a brain internally\n     >>> frontpage.__class__\n     <class \'plone.app.contentlisting.catalog.CatalogContentListingObject\'>\n     >>> print(frontpage.getDataOrigin())\n-    <Products.ZCatalog.Catalog.mybrains object at...>\n+    <Products.ZCatalog.Catalog...mybrains object at...>\n     >>> frontpage.isVisibleInNav()\n     True\n \n@@ -187,7 +188,7 @@ This will be indexed, so an object isn\'t necessary to check this\n     >>> frontpage.isVisibleInNav()\n     False\n     >>> print(frontpage.getDataOrigin())\n-    <Products.ZCatalog.Catalog.mybrains object at...>\n+    <Products.ZCatalog.Catalog...mybrains object at...>\n \n But a real object still works.\n \n'

