Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-12-05T08:34:50+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/181f52e4a531ab6778d1f144271ba0188aeeaa3e

Add async and defer attributes to bundles
Add ``load_async`` and ``load_defer`` attributes to resource registries bundle settings.
When set, ``&lt;script&gt;`` tags are rendered with ``async="async"`` resp. ``defer="defer"`` attributes.
In production mode, the setting from the ``plone`` resp. ``plone-logged-in`` bundles are used for the ``default`` resp. ``logged-in`` meta bundles (``merge_with`` setting).

Files changed:
A news/2649.feature
M Products/CMFPlone/interfaces/resources.py
M Products/CMFPlone/profiles/dependencies/registry.xml
M Products/CMFPlone/resources/browser/scripts.pt
M Products/CMFPlone/resources/browser/scripts.py
M Products/CMFPlone/tests/testResourceRegistries.py

b'diff --git a/Products/CMFPlone/interfaces/resources.py b/Products/CMFPlone/interfaces/resources.py\nindex 7ffe2db42..2e1c6a0b4 100644\n--- a/Products/CMFPlone/interfaces/resources.py\n+++ b/Products/CMFPlone/interfaces/resources.py\n@@ -130,3 +130,15 @@ class IBundleRegistry(zope.interface.Interface):\n              SimpleTerm(\'logged-in\', \'logged-in\', \'logged-in\')]),\n         default=u"",\n         required=False)\n+\n+    load_async = schema.Bool(\n+        title=_(u"Load asynchronously"),\n+        description=_("Load the JavaScript files asynchronously by adding an ``async`` attribute to the script tag."),\n+        default=False,\n+        required=False)\n+\n+    load_defer = schema.Bool(\n+        title=_(u"Load deffered"),\n+        description=_("Load the JavaScript files deffered after the document has been parsed but before ``DOMContentLoaded`` by adding a ``defer`` attribute to the script tag."),\n+        default=False,\n+        required=False)\ndiff --git a/Products/CMFPlone/profiles/dependencies/registry.xml b/Products/CMFPlone/profiles/dependencies/registry.xml\nindex 46b0128c0..7cdcbe937 100644\n--- a/Products/CMFPlone/profiles/dependencies/registry.xml\n+++ b/Products/CMFPlone/profiles/dependencies/registry.xml\n@@ -1171,7 +1171,9 @@\n     <value key="enabled">True</value>\n     <value key="jscompilation">++plone++static/plone-compiled.min.js</value>\n     <value key="csscompilation">++plone++static/plone-compiled.css</value>\n-    <value key="last_compilation">2018-09-26 16:00:00</value>\n+    <value key="last_compilation">2018-10-04 12:00:00</value>\n+    <value key="load_async">False</value>\n+    <value key="load_defer">False</value>\n     <value key="stub_js_modules">\n       <element>jquery</element>\n     </value>\n@@ -1189,6 +1191,8 @@\n     <value key="csscompilation">++plone++static/plone-logged-in-compiled.css</value>\n     <value key="last_compilation">2018-09-26 16:00:00</value>\n     <value key="depends">plone</value>\n+    <value key="load_async">False</value>\n+    <value key="load_defer">False</value>\n     <value key="stub_js_modules">\n       <element>backbone</element>\n       <element>bootstrap-dropdown</element>\n@@ -1231,6 +1235,8 @@\n     <value key="last_compilation">2018-09-26 16:00:00</value>\n     <value key="compile">False</value>\n     <value key="enabled">True</value>\n+    <value key="load_async">False</value>\n+    <value key="load_defer">False</value>\n   </records>\n \n   <records prefix="plone.bundles/resourceregistry"\n@@ -1242,6 +1248,8 @@\n     <value key="jscompilation">++plone++static/resourceregistry-compiled.min.js</value>\n     <value key="csscompilation">++plone++static/resourceregistry-compiled.css</value>\n     <value key="last_compilation">2018-09-26 16:00:00</value>\n+    <value key="load_async">False</value>\n+    <value key="load_defer">False</value>\n     <value key="stub_js_modules">\n       <element>jquery</element>\n     </value>\ndiff --git a/Products/CMFPlone/resources/browser/scripts.pt b/Products/CMFPlone/resources/browser/scripts.pt\nindex e9f7e6c0f..3549e18f1 100644\n--- a/Products/CMFPlone/resources/browser/scripts.pt\n+++ b/Products/CMFPlone/resources/browser/scripts.pt\n@@ -10,7 +10,12 @@\n </tal:if><tal:if condition="condcomment">\n     <tal:opencc tal:replace="structure string:&lt;!--[if ${condcomment}]&gt;" />\n </tal:if>\n-  <script tal:attributes="src script/src; data-bundle script/bundle"></script>\n+  <script type="text/javascript"\n+      tal:attributes="\n+        src script/src;\n+        data-bundle script/bundle;\n+        async script/async|nothing;\n+        defer script/defer|nothing"/>\n <tal:if condition="condcomment">\n   <tal:closecc tal:condition="condcomment" tal:replace="structure string:&lt;![endif]--&gt;" />\n </tal:if><tal:if condition="resetrjs">\ndiff --git a/Products/CMFPlone/resources/browser/scripts.py b/Products/CMFPlone/resources/browser/scripts.py\nindex 45589ce96..8cbf18107 100644\n--- a/Products/CMFPlone/resources/browser/scripts.py\n+++ b/Products/CMFPlone/resources/browser/scripts.py\n@@ -82,10 +82,16 @@ def get_data(self, bundle, result):\n                     bundle.jscompilation,\n                     parse.quote(str(bundle.last_compilation))\n                 )\n+\n+            load_async = \'async\' if getattr(bundle, \'load_async\', None) else None  # noqa\n+            load_defer = \'defer\' if getattr(bundle, \'load_defer\', None) else None  # noqa\n+\n             result.append({\n                 \'bundle\': bundle.name,\n                 \'conditionalcomment\': bundle.conditionalcomment,\n-                \'src\': js_location\n+                \'src\': js_location,\n+                \'async\': load_async,\n+                \'defer\': load_defer,\n             })\n \n     def default_resources(self):\n@@ -148,22 +154,36 @@ def scripts(self):\n             result = self.default_resources()\n             result.extend(self.ordered_bundles_result())\n         else:\n+            # Acquire load_async and load_defer bundle options from the plone\n+            # bundle and use it for the ``default`` meta bundle.\n+            bundles = self.get_bundles()\n+            load_async = getattr(bundles.get(\'plone\'), \'load_async\', False)\n+            load_defer = getattr(bundles.get(\'plone\'), \'load_defer\', False)\n             result = [{\n                 \'src\': \'{0}/++plone++{1}\'.format(\n                     self.site_url,\n                     self.production_path + \'/default.js\'\n                 ),\n                 \'conditionalcomment\': None,\n-                \'bundle\': \'production\'\n+                \'bundle\': \'production\',\n+                \'async\': \'async\' if load_async else None,\n+                \'defer\': \'defer\' if load_defer else None\n             }, ]\n             if not self.anonymous:\n+                # Acquire load_async and load_defer bundle options from the\n+                # plone-logged-in bundle and use it for the ``logged-in`` meta\n+                # bundle.\n+                load_async = getattr(bundles.get(\'plone-logged-in\'), \'load_async\', False)  # noqa\n+                load_defer = getattr(bundles.get(\'plone-logged-in\'), \'load_defer\', False)  # noqa\n                 result.append({\n                     \'src\': \'{0}/++plone++{1}\'.format(\n                         self.site_url,\n                         self.production_path + \'/logged-in.js\'\n                     ),\n                     \'conditionalcomment\': None,\n-                    \'bundle\': \'production\'\n+                    \'bundle\': \'production\',\n+                    \'async\': \'async\' if load_async else None,\n+                    \'defer\': \'defer\' if load_defer else None\n                 })\n             result.extend(self.ordered_bundles_result(production=True))\n \ndiff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex 582b97f44..aef54fb37 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -18,12 +18,14 @@\n from Products.CMFPlone.resources.bundle import Bundle\n from Products.CMFPlone.resources.exportimport.resourceregistry import ResourceRegistryNodeAdapter  # noqa\n from Products.CMFPlone.tests import PloneTestCase\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.GenericSetup.context import SetupEnviron\n from xml.dom.minidom import parseString\n from zope.component import getUtility\n \n import json\n import mock\n+import os\n \n \n class TestResourceRegistries(PloneTestCase.PloneTestCase):\n@@ -206,6 +208,91 @@ def test_error(self):\n         )\n         self.assertIn(b\'error cooking\', resp.getBody())\n \n+    def test_bundle_defer_async(self):\n+        registry = getUtility(IRegistry)\n+\n+        bundles = registry.collectionOfInterface(\n+            IBundleRegistry,\n+            prefix="plone.bundles"\n+        )\n+        bundle = bundles.add(\'foobar\')\n+        bundle.name = \'foobar\'\n+        bundle.jscompilation = \'foobar.js\'\n+        bundle.csscompilation = \'foobar.css\'\n+        bundle.resources = [\'foobar\']\n+\n+        view = ScriptsView(self.app, self.app.REQUEST, None, None)\n+        view.get_cooked_bundles = lambda: [(\'foobar\', bundle)]\n+\n+        import Products.CMFPlone.resources.browser\n+        path = os.path.dirname(Products.CMFPlone.resources.browser.__file__)\n+        view.index = ViewPageTemplateFile(\'scripts.pt\', path)\n+        view.update()\n+\n+        self.assertTrue(\'async="async"\' not in view.index(view))\n+        self.assertTrue(\'defer="defer"\' not in view.index(view))\n+\n+        bundle.load_async = True\n+        bundle.load_defer = False\n+        self.assertTrue(\'async="async"\' in view.index(view))\n+        self.assertTrue(\'defer="defer"\' not in view.index(view))\n+\n+        bundle.load_async = False\n+        bundle.load_defer = True\n+        self.assertTrue(\'async="async"\' not in view.index(view))\n+        self.assertTrue(\'defer="defer"\' in view.index(view))\n+\n+        bundle.load_async = True\n+        bundle.load_defer = True\n+\n+        self.assertTrue(\'async="async"\' in view.index(view))\n+        self.assertTrue(\'defer="defer"\' in view.index(view))\n+\n+        bundle.load_async = False\n+        bundle.load_defer = False\n+\n+        self.assertTrue(\'async="async"\' not in view.index(view))\n+        self.assertTrue(\'defer="defer"\' not in view.index(view))\n+\n+    def test_bundle_defer_async_production(self):\n+        registry = getUtility(IRegistry)\n+\n+        bundles = registry.collectionOfInterface(\n+            IBundleRegistry,\n+            prefix="plone.bundles"\n+        )\n+        bundles[\'plone\'].load_async = False\n+        bundles[\'plone\'].load_defer = False\n+        bundles[\'plone-logged-in\'].load_async = False\n+        bundles[\'plone-logged-in\'].load_defer = False\n+\n+        view = ScriptsView(self.app, self.app.REQUEST, None, None)\n+\n+        import Products.CMFPlone.resources.browser\n+        path = os.path.dirname(Products.CMFPlone.resources.browser.__file__)\n+        view.index = ViewPageTemplateFile(\'scripts.pt\', path)\n+        view.update()\n+\n+        self.assertTrue(\'async="async"\' not in view.index(view))\n+        self.assertTrue(\'defer="defer"\' not in view.index(view))\n+\n+        bundles[\'plone\'].load_async = True\n+        bundles[\'plone\'].load_defer = False\n+        self.assertEqual(view.index(view).count(\'async="async"\'), 1)\n+        self.assertEqual(view.index(view).count(\'defer="defer"\'), 0)\n+\n+        bundles[\'plone\'].load_async = False\n+        bundles[\'plone\'].load_defer = True\n+        self.assertEqual(view.index(view).count(\'async="async"\'), 0)\n+        self.assertEqual(view.index(view).count(\'defer="defer"\'), 1)\n+\n+        bundles[\'plone\'].load_async = True\n+        bundles[\'plone\'].load_defer = True\n+        bundles[\'plone-logged-in\'].load_async = True\n+        bundles[\'plone-logged-in\'].load_defer = True\n+        self.assertEqual(view.index(view).count(\'async="async"\'), 2)\n+        self.assertEqual(view.index(view).count(\'defer="defer"\'), 2)\n+\n \n class TestResourceNodeImporter(PloneTestCase.PloneTestCase):\n     """Test features of registry node importer"""\n@@ -530,14 +617,26 @@ def test_add_bundle_on_request_with_subrequest(self):\n         self.assertTrue(scripts.development)\n \n         scripts.update()\n-        results = scripts.scripts()\n+        result = scripts.scripts()[-1]\n         self.assertEqual(\n-            results[-1],\n-            {\n-                \'src\': \'http://nohost/plone/++resource++foo.js?version=123\',\n-                \'conditionalcomment\': None,\n-                \'bundle\': \'foo\'\n-            }\n+            result[\'src\'],\n+            \'http://nohost/plone/++resource++foo.js?version=123\'\n+        )\n+        self.assertEqual(\n+             result[\'conditionalcomment\'],\n+             None\n+        )\n+        self.assertEqual(\n+            result[\'bundle\'],\n+            \'foo\',\n+        )\n+        self.assertEqual(\n+            result[\'async\'],\n+            None\n+        )\n+        self.assertEqual(\n+            result[\'defer\'],\n+            None\n         )\n \n     @mock.patch.object(\ndiff --git a/news/2649.feature b/news/2649.feature\nnew file mode 100644\nindex 000000000..e3ac68ed8\n--- /dev/null\n+++ b/news/2649.feature\n@@ -0,0 +1,4 @@\n+- Add ``load_async`` and ``load_defer`` attributes to resource registries bundle settings.\n+  When set, ``<script>`` tags are rendered with ``async="async"`` resp. ``defer="defer"`` attributes.\n+  In production mode, the setting from the ``plone`` resp. ``plone-logged-in`` bundles are used for the ``default`` resp. ``logged-in`` meta bundles (``merge_with`` setting). \n+  [thet]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-12-06T00:30:35+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/275012db0a33b7b839f451965a597d03911fc33c

Merge branch 'master' into thet-async-defer-52

Files changed:
A news/2464.fixed
M Products/CMFPlone/CatalogTool.py
M Products/CMFPlone/tests/testCatalogTool.py

b"diff --git a/Products/CMFPlone/CatalogTool.py b/Products/CMFPlone/CatalogTool.py\nindex 20d8fb7f2..cafc4b433 100644\n--- a/Products/CMFPlone/CatalogTool.py\n+++ b/Products/CMFPlone/CatalogTool.py\n@@ -437,10 +437,20 @@ def searchResults(self, query=None, **kw):\n         if not show_inactive and not self.allow_inactive(kw):\n             kw['effectiveRange'] = DateTime()\n \n-        sort_on = kw.get('sort_on')\n-        if sort_on and sort_on not in self.indexes():\n-            # I get crazy sort_ons like '194' or 'null'.\n-            kw.pop('sort_on')\n+        # filter out invalid sort_on indexes\n+        sort_on = kw.get('sort_on') or []\n+        if isinstance(sort_on, six.string_types):\n+            sort_on = [sort_on]\n+        valid_indexes = self.indexes()\n+        try:\n+            sort_on = [idx for idx in sort_on if idx in valid_indexes]\n+        except TypeError:\n+            # sort_on is not iterable\n+            sort_on = []\n+        if not sort_on:\n+            kw.pop('sort_on', None)\n+        else:\n+            kw['sort_on'] = sort_on\n \n         return ZCatalog.searchResults(self, query, **kw)\n \ndiff --git a/Products/CMFPlone/tests/testCatalogTool.py b/Products/CMFPlone/tests/testCatalogTool.py\nindex 5f491ef7e..f3fa4adc1 100644\n--- a/Products/CMFPlone/tests/testCatalogTool.py\n+++ b/Products/CMFPlone/tests/testCatalogTool.py\n@@ -2,6 +2,7 @@\n # -*- encoding: utf-8 -*-\n from Acquisition import aq_base\n from DateTime import DateTime\n+from functools import partial\n from OFS.ObjectManager import REPLACEABLE\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n@@ -11,21 +12,23 @@\n from plone.indexer.wrapper import IndexableObjectWrapper\n from plone.uuid.interfaces import IAttributeUUID\n from plone.uuid.interfaces import IUUID\n-from Products.CMFCore.permissions import AccessInactivePortalContent\n from Products.CMFCore.indexing import processQueue\n+from Products.CMFCore.permissions import AccessInactivePortalContent\n from Products.CMFPlone.CatalogTool import CatalogTool\n from Products.CMFPlone.CatalogTool import is_folderish\n from Products.CMFPlone.tests import dummy\n from Products.CMFPlone.tests.PloneTestCase import PloneTestCase\n from Products.CMFPlone.tests.utils import folder_position\n+from z3c.form.interfaces import IFormLayer\n from zope.event import notify\n from zope.interface import alsoProvides\n from zope.lifecycleevent import ObjectCreatedEvent\n-from z3c.form.interfaces import IFormLayer\n+\n import transaction\n import unittest\n import zope.interface\n \n+\n user2 = 'u2'\n group2 = 'g2'\n \n@@ -552,6 +555,36 @@ def afterSetUp(self):\n         self.folder.doc5.reindexObject()\n         self.folder.doc6.reindexObject()\n \n+    def testSortMultipleColumns(self):\n+        path = '/'.join(self.folder.getPhysicalPath())\n+        query = partial(self.catalog, path=path)\n+        brains = query(sort_on=['portal_type', 'sortable_title'])\n+        self.assertListEqual(\n+            [brain.getPath() for brain in brains],\n+            [\n+                '/plone/Members/test_user_1_/doc2',\n+                '/plone/Members/test_user_1_/doc3',\n+                '/plone/Members/test_user_1_/doc',\n+                '/plone/Members/test_user_1_/doc5',\n+                '/plone/Members/test_user_1_/doc6',\n+                '/plone/Members/test_user_1_/doc4',\n+                '/plone/Members/test_user_1_'\n+            ],\n+        )\n+        brains = query(sort_on=['portal_type', 'getId'])\n+        self.assertListEqual(\n+            [brain.getPath() for brain in brains],\n+            [\n+                '/plone/Members/test_user_1_/doc',\n+                '/plone/Members/test_user_1_/doc2',\n+                '/plone/Members/test_user_1_/doc3',\n+                '/plone/Members/test_user_1_/doc4',\n+                '/plone/Members/test_user_1_/doc5',\n+                '/plone/Members/test_user_1_/doc6',\n+                '/plone/Members/test_user_1_',\n+            ]\n+        )\n+\n     def testUnknownSortOnIsIgnored(self):\n         # You should not get a CatalogError when an invalid sort_on is passed.\n         # I get crazy sort_ons like '194' or 'null'.\ndiff --git a/news/2464.fixed b/news/2464.fixed\nnew file mode 100644\nindex 000000000..208e85080\n--- /dev/null\n+++ b/news/2464.fixed\n@@ -0,0 +1 @@\n+Restore the possibility to sort catalog query results with multiple indexes\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-12-06T00:33:03+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/e602191e408880a3a62aedba3dea1b846a200b03

Merge pull request #2649 from plone/thet-async-defer-52

Add async and defer attributes to bundles (5.2)

Files changed:
A news/2649.feature
M Products/CMFPlone/interfaces/resources.py
M Products/CMFPlone/profiles/dependencies/registry.xml
M Products/CMFPlone/resources/browser/scripts.pt
M Products/CMFPlone/resources/browser/scripts.py
M Products/CMFPlone/tests/testResourceRegistries.py

b'diff --git a/Products/CMFPlone/interfaces/resources.py b/Products/CMFPlone/interfaces/resources.py\nindex 7ffe2db42..2e1c6a0b4 100644\n--- a/Products/CMFPlone/interfaces/resources.py\n+++ b/Products/CMFPlone/interfaces/resources.py\n@@ -130,3 +130,15 @@ class IBundleRegistry(zope.interface.Interface):\n              SimpleTerm(\'logged-in\', \'logged-in\', \'logged-in\')]),\n         default=u"",\n         required=False)\n+\n+    load_async = schema.Bool(\n+        title=_(u"Load asynchronously"),\n+        description=_("Load the JavaScript files asynchronously by adding an ``async`` attribute to the script tag."),\n+        default=False,\n+        required=False)\n+\n+    load_defer = schema.Bool(\n+        title=_(u"Load deffered"),\n+        description=_("Load the JavaScript files deffered after the document has been parsed but before ``DOMContentLoaded`` by adding a ``defer`` attribute to the script tag."),\n+        default=False,\n+        required=False)\ndiff --git a/Products/CMFPlone/profiles/dependencies/registry.xml b/Products/CMFPlone/profiles/dependencies/registry.xml\nindex 46b0128c0..7cdcbe937 100644\n--- a/Products/CMFPlone/profiles/dependencies/registry.xml\n+++ b/Products/CMFPlone/profiles/dependencies/registry.xml\n@@ -1171,7 +1171,9 @@\n     <value key="enabled">True</value>\n     <value key="jscompilation">++plone++static/plone-compiled.min.js</value>\n     <value key="csscompilation">++plone++static/plone-compiled.css</value>\n-    <value key="last_compilation">2018-09-26 16:00:00</value>\n+    <value key="last_compilation">2018-10-04 12:00:00</value>\n+    <value key="load_async">False</value>\n+    <value key="load_defer">False</value>\n     <value key="stub_js_modules">\n       <element>jquery</element>\n     </value>\n@@ -1189,6 +1191,8 @@\n     <value key="csscompilation">++plone++static/plone-logged-in-compiled.css</value>\n     <value key="last_compilation">2018-09-26 16:00:00</value>\n     <value key="depends">plone</value>\n+    <value key="load_async">False</value>\n+    <value key="load_defer">False</value>\n     <value key="stub_js_modules">\n       <element>backbone</element>\n       <element>bootstrap-dropdown</element>\n@@ -1231,6 +1235,8 @@\n     <value key="last_compilation">2018-09-26 16:00:00</value>\n     <value key="compile">False</value>\n     <value key="enabled">True</value>\n+    <value key="load_async">False</value>\n+    <value key="load_defer">False</value>\n   </records>\n \n   <records prefix="plone.bundles/resourceregistry"\n@@ -1242,6 +1248,8 @@\n     <value key="jscompilation">++plone++static/resourceregistry-compiled.min.js</value>\n     <value key="csscompilation">++plone++static/resourceregistry-compiled.css</value>\n     <value key="last_compilation">2018-09-26 16:00:00</value>\n+    <value key="load_async">False</value>\n+    <value key="load_defer">False</value>\n     <value key="stub_js_modules">\n       <element>jquery</element>\n     </value>\ndiff --git a/Products/CMFPlone/resources/browser/scripts.pt b/Products/CMFPlone/resources/browser/scripts.pt\nindex e9f7e6c0f..3549e18f1 100644\n--- a/Products/CMFPlone/resources/browser/scripts.pt\n+++ b/Products/CMFPlone/resources/browser/scripts.pt\n@@ -10,7 +10,12 @@\n </tal:if><tal:if condition="condcomment">\n     <tal:opencc tal:replace="structure string:&lt;!--[if ${condcomment}]&gt;" />\n </tal:if>\n-  <script tal:attributes="src script/src; data-bundle script/bundle"></script>\n+  <script type="text/javascript"\n+      tal:attributes="\n+        src script/src;\n+        data-bundle script/bundle;\n+        async script/async|nothing;\n+        defer script/defer|nothing"/>\n <tal:if condition="condcomment">\n   <tal:closecc tal:condition="condcomment" tal:replace="structure string:&lt;![endif]--&gt;" />\n </tal:if><tal:if condition="resetrjs">\ndiff --git a/Products/CMFPlone/resources/browser/scripts.py b/Products/CMFPlone/resources/browser/scripts.py\nindex 45589ce96..8cbf18107 100644\n--- a/Products/CMFPlone/resources/browser/scripts.py\n+++ b/Products/CMFPlone/resources/browser/scripts.py\n@@ -82,10 +82,16 @@ def get_data(self, bundle, result):\n                     bundle.jscompilation,\n                     parse.quote(str(bundle.last_compilation))\n                 )\n+\n+            load_async = \'async\' if getattr(bundle, \'load_async\', None) else None  # noqa\n+            load_defer = \'defer\' if getattr(bundle, \'load_defer\', None) else None  # noqa\n+\n             result.append({\n                 \'bundle\': bundle.name,\n                 \'conditionalcomment\': bundle.conditionalcomment,\n-                \'src\': js_location\n+                \'src\': js_location,\n+                \'async\': load_async,\n+                \'defer\': load_defer,\n             })\n \n     def default_resources(self):\n@@ -148,22 +154,36 @@ def scripts(self):\n             result = self.default_resources()\n             result.extend(self.ordered_bundles_result())\n         else:\n+            # Acquire load_async and load_defer bundle options from the plone\n+            # bundle and use it for the ``default`` meta bundle.\n+            bundles = self.get_bundles()\n+            load_async = getattr(bundles.get(\'plone\'), \'load_async\', False)\n+            load_defer = getattr(bundles.get(\'plone\'), \'load_defer\', False)\n             result = [{\n                 \'src\': \'{0}/++plone++{1}\'.format(\n                     self.site_url,\n                     self.production_path + \'/default.js\'\n                 ),\n                 \'conditionalcomment\': None,\n-                \'bundle\': \'production\'\n+                \'bundle\': \'production\',\n+                \'async\': \'async\' if load_async else None,\n+                \'defer\': \'defer\' if load_defer else None\n             }, ]\n             if not self.anonymous:\n+                # Acquire load_async and load_defer bundle options from the\n+                # plone-logged-in bundle and use it for the ``logged-in`` meta\n+                # bundle.\n+                load_async = getattr(bundles.get(\'plone-logged-in\'), \'load_async\', False)  # noqa\n+                load_defer = getattr(bundles.get(\'plone-logged-in\'), \'load_defer\', False)  # noqa\n                 result.append({\n                     \'src\': \'{0}/++plone++{1}\'.format(\n                         self.site_url,\n                         self.production_path + \'/logged-in.js\'\n                     ),\n                     \'conditionalcomment\': None,\n-                    \'bundle\': \'production\'\n+                    \'bundle\': \'production\',\n+                    \'async\': \'async\' if load_async else None,\n+                    \'defer\': \'defer\' if load_defer else None\n                 })\n             result.extend(self.ordered_bundles_result(production=True))\n \ndiff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex 582b97f44..aef54fb37 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -18,12 +18,14 @@\n from Products.CMFPlone.resources.bundle import Bundle\n from Products.CMFPlone.resources.exportimport.resourceregistry import ResourceRegistryNodeAdapter  # noqa\n from Products.CMFPlone.tests import PloneTestCase\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.GenericSetup.context import SetupEnviron\n from xml.dom.minidom import parseString\n from zope.component import getUtility\n \n import json\n import mock\n+import os\n \n \n class TestResourceRegistries(PloneTestCase.PloneTestCase):\n@@ -206,6 +208,91 @@ def test_error(self):\n         )\n         self.assertIn(b\'error cooking\', resp.getBody())\n \n+    def test_bundle_defer_async(self):\n+        registry = getUtility(IRegistry)\n+\n+        bundles = registry.collectionOfInterface(\n+            IBundleRegistry,\n+            prefix="plone.bundles"\n+        )\n+        bundle = bundles.add(\'foobar\')\n+        bundle.name = \'foobar\'\n+        bundle.jscompilation = \'foobar.js\'\n+        bundle.csscompilation = \'foobar.css\'\n+        bundle.resources = [\'foobar\']\n+\n+        view = ScriptsView(self.app, self.app.REQUEST, None, None)\n+        view.get_cooked_bundles = lambda: [(\'foobar\', bundle)]\n+\n+        import Products.CMFPlone.resources.browser\n+        path = os.path.dirname(Products.CMFPlone.resources.browser.__file__)\n+        view.index = ViewPageTemplateFile(\'scripts.pt\', path)\n+        view.update()\n+\n+        self.assertTrue(\'async="async"\' not in view.index(view))\n+        self.assertTrue(\'defer="defer"\' not in view.index(view))\n+\n+        bundle.load_async = True\n+        bundle.load_defer = False\n+        self.assertTrue(\'async="async"\' in view.index(view))\n+        self.assertTrue(\'defer="defer"\' not in view.index(view))\n+\n+        bundle.load_async = False\n+        bundle.load_defer = True\n+        self.assertTrue(\'async="async"\' not in view.index(view))\n+        self.assertTrue(\'defer="defer"\' in view.index(view))\n+\n+        bundle.load_async = True\n+        bundle.load_defer = True\n+\n+        self.assertTrue(\'async="async"\' in view.index(view))\n+        self.assertTrue(\'defer="defer"\' in view.index(view))\n+\n+        bundle.load_async = False\n+        bundle.load_defer = False\n+\n+        self.assertTrue(\'async="async"\' not in view.index(view))\n+        self.assertTrue(\'defer="defer"\' not in view.index(view))\n+\n+    def test_bundle_defer_async_production(self):\n+        registry = getUtility(IRegistry)\n+\n+        bundles = registry.collectionOfInterface(\n+            IBundleRegistry,\n+            prefix="plone.bundles"\n+        )\n+        bundles[\'plone\'].load_async = False\n+        bundles[\'plone\'].load_defer = False\n+        bundles[\'plone-logged-in\'].load_async = False\n+        bundles[\'plone-logged-in\'].load_defer = False\n+\n+        view = ScriptsView(self.app, self.app.REQUEST, None, None)\n+\n+        import Products.CMFPlone.resources.browser\n+        path = os.path.dirname(Products.CMFPlone.resources.browser.__file__)\n+        view.index = ViewPageTemplateFile(\'scripts.pt\', path)\n+        view.update()\n+\n+        self.assertTrue(\'async="async"\' not in view.index(view))\n+        self.assertTrue(\'defer="defer"\' not in view.index(view))\n+\n+        bundles[\'plone\'].load_async = True\n+        bundles[\'plone\'].load_defer = False\n+        self.assertEqual(view.index(view).count(\'async="async"\'), 1)\n+        self.assertEqual(view.index(view).count(\'defer="defer"\'), 0)\n+\n+        bundles[\'plone\'].load_async = False\n+        bundles[\'plone\'].load_defer = True\n+        self.assertEqual(view.index(view).count(\'async="async"\'), 0)\n+        self.assertEqual(view.index(view).count(\'defer="defer"\'), 1)\n+\n+        bundles[\'plone\'].load_async = True\n+        bundles[\'plone\'].load_defer = True\n+        bundles[\'plone-logged-in\'].load_async = True\n+        bundles[\'plone-logged-in\'].load_defer = True\n+        self.assertEqual(view.index(view).count(\'async="async"\'), 2)\n+        self.assertEqual(view.index(view).count(\'defer="defer"\'), 2)\n+\n \n class TestResourceNodeImporter(PloneTestCase.PloneTestCase):\n     """Test features of registry node importer"""\n@@ -530,14 +617,26 @@ def test_add_bundle_on_request_with_subrequest(self):\n         self.assertTrue(scripts.development)\n \n         scripts.update()\n-        results = scripts.scripts()\n+        result = scripts.scripts()[-1]\n         self.assertEqual(\n-            results[-1],\n-            {\n-                \'src\': \'http://nohost/plone/++resource++foo.js?version=123\',\n-                \'conditionalcomment\': None,\n-                \'bundle\': \'foo\'\n-            }\n+            result[\'src\'],\n+            \'http://nohost/plone/++resource++foo.js?version=123\'\n+        )\n+        self.assertEqual(\n+             result[\'conditionalcomment\'],\n+             None\n+        )\n+        self.assertEqual(\n+            result[\'bundle\'],\n+            \'foo\',\n+        )\n+        self.assertEqual(\n+            result[\'async\'],\n+            None\n+        )\n+        self.assertEqual(\n+            result[\'defer\'],\n+            None\n         )\n \n     @mock.patch.object(\ndiff --git a/news/2649.feature b/news/2649.feature\nnew file mode 100644\nindex 000000000..e3ac68ed8\n--- /dev/null\n+++ b/news/2649.feature\n@@ -0,0 +1,4 @@\n+- Add ``load_async`` and ``load_defer`` attributes to resource registries bundle settings.\n+  When set, ``<script>`` tags are rendered with ``async="async"`` resp. ``defer="defer"`` attributes.\n+  In production mode, the setting from the ``plone`` resp. ``plone-logged-in`` bundles are used for the ``default`` resp. ``logged-in`` meta bundles (``merge_with`` setting). \n+  [thet]\n'

