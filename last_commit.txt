Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-11-23T07:26:33+01:00
Author: Víctor Fernández de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/687a61621d6462a990ddbf4c147488fa1be643ea

Return non-batched vocabularies given a query param b_size=-1 (#1265)

* Return non-batched vocabularies given a query param not_batched

* Change parameter name to b_size=-1

* Amend changelogg

Files changed:
A news/1264.feature
M docs/source/vocabularies.rst
M src/plone/restapi/serializer/vocabularies.py
M src/plone/restapi/tests/test_services_vocabularies.py

b'diff --git a/docs/source/vocabularies.rst b/docs/source/vocabularies.rst\nindex 37a79e39e..d826caf60 100644\n--- a/docs/source/vocabularies.rst\n+++ b/docs/source/vocabularies.rst\n@@ -83,6 +83,8 @@ The token is what should be sent to the server to address that term.\n .. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get.resp\n    :language: http\n \n+By default, the vocabularies are batched. However, you can pass ``b_size=-1`` parameter to force the endpoint to return all the terms, not batched response.\n+\n Filter Vocabularies\n ^^^^^^^^^^^^^^^^^^^\n \ndiff --git a/news/1264.feature b/news/1264.feature\nnew file mode 100644\nindex 000000000..1fbea0e0b\n--- /dev/null\n+++ b/news/1264.feature\n@@ -0,0 +1,2 @@\n+Return non-batched vocabularies given a query param ``b_size=-1``\n+[sneridagh]\ndiff --git a/src/plone/restapi/serializer/vocabularies.py b/src/plone/restapi/serializer/vocabularies.py\nindex 26acb2407..9c2555a8d 100644\n--- a/src/plone/restapi/serializer/vocabularies.py\n+++ b/src/plone/restapi/serializer/vocabularies.py\n@@ -27,6 +27,7 @@ def __call__(self, vocabulary_id):\n         vocabulary = self.context\n         title = safe_unicode(self.request.form.get("title", ""))\n         token = self.request.form.get("token", "")\n+        b_size = self.request.form.get("b_size", "")\n \n         terms = []\n         for term in vocabulary:\n@@ -52,9 +53,19 @@ def __call__(self, vocabulary_id):\n                     continue\n                 terms.append(term)\n \n+        serialized_terms = []\n+\n+        # Do not batch parameter is set\n+        if b_size == "-1":\n+            for term in terms:\n+                serializer = getMultiAdapter(\n+                    (term, self.request), interface=ISerializeToJson\n+                )\n+                serialized_terms.append(serializer())\n+            return {"@id": vocabulary_id, "items": serialized_terms}\n+\n         batch = HypermediaBatch(self.request, terms)\n \n-        serialized_terms = []\n         for term in batch:\n             serializer = getMultiAdapter(\n                 (term, self.request), interface=ISerializeToJson\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 2b4e4324e..2353f9424 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -43,6 +43,15 @@ def test_vocabulary_factory(context):\n     return TEST_VOCABULARY\n \n \n+TEST_BIG_VOCABULARY = SimpleVocabulary(\n+    [SimpleTerm(a, token=f"token{a}", title=f"Title {a}") for a in range(100)]\n+)\n+\n+\n+def test_big_vocabulary_factory(context):\n+    return TEST_BIG_VOCABULARY\n+\n+\n def test_context_vocabulary_factory(context):\n     return SimpleVocabulary(\n         [\n@@ -331,6 +340,20 @@ def test_context_vocabulary(self):\n             },\n         )\n \n+    def test_big_vocabulary_not_batched(self):\n+        provideUtility(\n+            test_big_vocabulary_factory,\n+            provides=IVocabularyFactory,\n+            name="plone.restapi.tests.test_big_vocabulary",\n+        )\n+        response = self.api_session.get(\n+            "/@vocabularies/plone.restapi.tests.test_big_vocabulary?b_size=-1"\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        response = response.json()\n+        self.assertEqual(len(response["items"]), 100)\n+\n     def tearDown(self):\n         self.api_session.close()\n         gsm = getGlobalSiteManager()\n'

