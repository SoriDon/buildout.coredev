Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2021-12-27T20:37:49-08:00
Author: Ross Patterson (rpatterson) <me@rpatterson.net>
Commit: https://github.com/plone/Products.PlonePAS/commit/0bc883209116766ac66fea07dc661a63a104af34

test(setup): Cover Zope root default challenge

Files changed:
A src/Products/PlonePAS/tests/test_setup.py

b'diff --git a/src/Products/PlonePAS/tests/test_setup.py b/src/Products/PlonePAS/tests/test_setup.py\nnew file mode 100644\nindex 00000000..3d2c6091\n--- /dev/null\n+++ b/src/Products/PlonePAS/tests/test_setup.py\n@@ -0,0 +1,55 @@\n+# -*- coding: utf-8 -*-\n+from plone.testing import zope\n+from Products.PlonePAS import testing\n+from Products.PluggableAuthService.interfaces import plugins as plugins_ifaces\n+from Products.PluggableAuthService.plugins import HTTPBasicAuthHelper\n+\n+import unittest\n+\n+\n+class PortalSetupTest(unittest.TestCase):\n+\n+    layer = testing.PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        """\n+        Set up convenience references to test fixture from the layer.\n+        """\n+        self.app = self.layer["app"]\n+        self.root_acl_users = self.app.acl_users\n+\n+    def test_zope_root_default_challenge(self):\n+        """\n+        The Zope root `/acl_users` default challenge plugin works.\n+        """\n+        # Check the Zope root PAS plugin configuration\n+        self.assertIn(\n+            "credentials_basic_auth",\n+            self.root_acl_users.objectIds(),\n+            "Basic auth plugin missing from Zope root `/acl_users`",\n+        )\n+        basic_plugin = self.root_acl_users.credentials_basic_auth\n+        self.assertIsInstance(\n+            basic_plugin,\n+            HTTPBasicAuthHelper.HTTPBasicAuthHelper,\n+            "Wrong Zope root `/acl_users` basic auth plugin type",\n+        )\n+        challenge_plugins = self.root_acl_users.plugins.listPlugins(\n+            plugins_ifaces.IChallengePlugin,\n+        )\n+        _, default_challenge_plugin = challenge_plugins[0]\n+        self.assertEqual(\n+            "/".join(default_challenge_plugin.getPhysicalPath()),\n+            "/".join(basic_plugin.getPhysicalPath()),\n+            "Wrong Zope root `/acl_users` default challenge plugin",\n+        )\n+\n+        # Check the challenge response in the actual browser\n+        browser = zope.Browser(self.app)\n+        browser.raiseHttpErrors = False\n+        browser.open(self.app.absolute_url() + "/manage_main")\n+        self.assertEqual(\n+            browser.headers["Status"].lower(),\n+            "401 unauthorized",\n+            "Wrong Zope root `/acl_users` default challenge response status",\n+        )\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2021-12-28T10:24:18-08:00
Author: Ross Patterson (rpatterson) <me@rpatterson.net>
Commit: https://github.com/plone/Products.PlonePAS/commit/17deb979ea4a7c6047cee1cd2a2accdbf7046384

fix(setup): Zope root cookie auth and login form

The GenericSetup "various" import step that originally installs PAS into a Plone portal
also migrates the Zope root `/acl_users`.  Probably an accident over time, but it
results in a cookie auth plugin that doesn't work outside of the Plone portal:

    2021-12-27 11:12:02,243 ERROR   [Zope.SiteErrorLog:22][waitress-0] ComponentLookupError: http://localhost:49080/api/acl_users/credentials_cookie_auth/login
    Traceback (innermost last):
      Module ZPublisher.WSGIPublisher, line 162, in transaction_pubevents
      Module ZPublisher.WSGIPublisher, line 372, in publish_module
      Module ZPublisher.WSGIPublisher, line 266, in publish
      Module ZPublisher.mapply, line 85, in mapply
      Module ZPublisher.WSGIPublisher, line 63, in call_object
      Module Products.PlonePAS.plugins.cookie_handler, line 106, in login
      Module Products.PluggableAuthService.PluggableAuthService, line 1153, in updateCredentials
      Module Products.PlonePAS.plugins.cookie_handler, line 74, in updateCredentials
      Module zope.component._api, line 165, in getUtility
    zope.interface.interfaces.ComponentLookupError: (&lt;InterfaceClass plone.registry.interfaces.IRegistry&gt;, '')

This import step also removes the `login_form` template which breaks the challenge
response.

Add an interface check to decide whether to install Plone's `ExtendedCookieAuthHelper`
or PAS's vanilla `CookieAuthHelper`.

Files changed:
A news/65.bugfix
M src/Products/PlonePAS/setuphandlers.py
M src/Products/PlonePAS/tests/test_setup.py

b'diff --git a/news/65.bugfix b/news/65.bugfix\nnew file mode 100644\nindex 00000000..b998196d\n--- /dev/null\n+++ b/news/65.bugfix\n@@ -0,0 +1,2 @@\n+Fix broken Zope root `/acl_users` cookie plugin on `PlonePAS` install.\n+[rpatterson]\ndiff --git a/src/Products/PlonePAS/setuphandlers.py b/src/Products/PlonePAS/setuphandlers.py\nindex 3216d992..084ca86b 100644\n--- a/src/Products/PlonePAS/setuphandlers.py\n+++ b/src/Products/PlonePAS/setuphandlers.py\n@@ -2,7 +2,9 @@\n from Acquisition import aq_base\n from Acquisition import aq_parent\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone import interfaces as plone_ifaces\n from Products.PlonePAS import config\n+from Products.PlonePAS.plugins import cookie_handler\n from Products.PlonePAS.interfaces import group as igroup\n from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin\n from Products.PlonePAS.interfaces.plugins import IUserIntrospection\n@@ -13,9 +15,11 @@\n from Products.PluggableAuthService.interfaces.plugins import IChallengePlugin\n from Products.PluggableAuthService.interfaces.plugins \\\n     import ICredentialsResetPlugin\n+from Products.PluggableAuthService.plugins import CookieAuthHelper\n from Products.PluggableAuthService.plugins.RecursiveGroupsPlugin \\\n     import addRecursiveGroupsPlugin\n from plone.session.plugins.session import manage_addSessionPlugin\n+from zope import component\n import logging\n \n logger = logging.getLogger(\'PlonePAS setup\')\n@@ -196,11 +200,25 @@ def setupAuthPlugins(portal, pas, plone_pas,\n         login_path = crumbler.auto_login_page\n         cookie_name = crumbler.auth_cookie\n \n-    found = uf.objectIds([\'Extended Cookie Auth Helper\'])\n-    if not found:\n-        plone_pas.manage_addExtendedCookieAuthHelper(\'credentials_cookie_auth\',\n-                                                     cookie_name=cookie_name)\n-    logger.debug("Added Extended Cookie Auth Helper.")\n+    is_plone_site = plone_ifaces.IPloneSiteRoot.providedBy(portal)\n+    if is_plone_site:\n+        cookie_meta_type = cookie_handler.ExtendedCookieAuthHelper.meta_type\n+        add_cookie_plugin = plone_pas.manage_addExtendedCookieAuthHelper\n+    else:\n+        # Can\'t use the `ExtendedCookieAuthHelper` outside of a Plone portal.\n+        cookie_meta_type = CookieAuthHelper.CookieAuthHelper.meta_type\n+        add_cookie_plugin = pas.addCookieAuthHelper\n+    cookie_auth_ids = uf.objectIds(cookie_meta_type)\n+    if not cookie_auth_ids:\n+        add_cookie_plugin(\n+            "credentials_cookie_auth",\n+            cookie_name=cookie_name,\n+        )\n+        logger.debug(\n+            "Added %r: %r",\n+            cookie_meta_type,\n+            "/".join(uf.credentials_cookie_auth.getPhysicalPath()),\n+        )\n     if deactivate_basic_reset:\n         disable = [\'ICredentialsResetPlugin\', \'ICredentialsUpdatePlugin\']\n     else:\n@@ -212,7 +230,7 @@ def setupAuthPlugins(portal, pas, plone_pas,\n     )\n \n     credentials_cookie_auth = uf._getOb(\'credentials_cookie_auth\')\n-    if \'login_form\' in credentials_cookie_auth:\n+    if is_plone_site and \'login_form\' in credentials_cookie_auth:\n         credentials_cookie_auth.manage_delObjects(ids=[\'login_form\'])\n         logger.debug("Removed default login_form from credentials cookie "\n                      "auth.")\ndiff --git a/src/Products/PlonePAS/tests/test_setup.py b/src/Products/PlonePAS/tests/test_setup.py\nindex 3d2c6091..473f5106 100644\n--- a/src/Products/PlonePAS/tests/test_setup.py\n+++ b/src/Products/PlonePAS/tests/test_setup.py\n@@ -1,10 +1,15 @@\n # -*- coding: utf-8 -*-\n+from plone.app import testing as pa_testing\n from plone.testing import zope\n+from zope.component import hooks\n from Products.PlonePAS import testing\n from Products.PluggableAuthService.interfaces import plugins as plugins_ifaces\n+from Products.PluggableAuthService.plugins import CookieAuthHelper\n from Products.PluggableAuthService.plugins import HTTPBasicAuthHelper\n \n+import transaction\n import unittest\n+import urllib.parse\n \n \n class PortalSetupTest(unittest.TestCase):\n@@ -53,3 +58,77 @@ def test_zope_root_default_challenge(self):\n             "401 unauthorized",\n             "Wrong Zope root `/acl_users` default challenge response status",\n         )\n+\n+    def test_zope_root_cookie_login(self):\n+        """\n+        The Zope root `/acl_users` cookie login works.\n+        """\n+        # Make the cookie plugin the default auth challenge\n+        self.assertIn(\n+            "credentials_cookie_auth",\n+            self.root_acl_users.objectIds(),\n+            "Cookie auth plugin missing from Zope root `/acl_users`",\n+        )\n+        cookie_plugin = self.root_acl_users.credentials_cookie_auth\n+        self.assertIs(\n+            type(cookie_plugin.aq_base),\n+            CookieAuthHelper.CookieAuthHelper,\n+            "Wrong Zope root `/acl_users` cookie auth plugin type",\n+        )\n+        self.root_acl_users.plugins.activatePlugin(\n+            plugins_ifaces.IChallengePlugin,\n+            cookie_plugin.id,\n+        )\n+        self.root_acl_users.plugins.movePluginsTop(\n+            plugins_ifaces.IChallengePlugin,\n+            [cookie_plugin.id],\n+        )\n+        transaction.commit()\n+        challenge_plugins = self.root_acl_users.plugins.listPlugins(\n+            plugins_ifaces.IChallengePlugin,\n+        )\n+        _, default_challenge_plugin = challenge_plugins[0]\n+        self.assertEqual(\n+            "/".join(default_challenge_plugin.getPhysicalPath()),\n+            "/".join(cookie_plugin.getPhysicalPath()),\n+            "Wrong Zope root `/acl_users` default challenge plugin",\n+        )\n+\n+        # Check the challenge response in the actual browser\n+        browser = zope.Browser(self.app)\n+        browser.open(self.app.absolute_url() + "/manage_main")\n+        self.assertEqual(\n+            browser.headers["Status"].lower(),\n+            "200 ok",\n+            "Wrong Zope root `/acl_users` cookie challenge response status",\n+        )\n+        login_form_url = urllib.parse.urlsplit(browser.url)\n+        self.assertEqual(\n+            login_form_url._replace(query="").geturl(),\n+            cookie_plugin.absolute_url() + "/login_form",\n+            "Wrong Zope root `/acl_users` cookie challenge redirect",\n+        )\n+\n+        # Workaround the fact that the `zope.component` site is still the Plone portal\n+        # when the test browser handles requests.\n+        hooks.setSite(None)\n+        zope.login(self.root_acl_users, pa_testing.SITE_OWNER_NAME)\n+        self.app.REQUEST.form["__ac_name"] = pa_testing.SITE_OWNER_NAME\n+        self.app.REQUEST.form["__ac_password"] = pa_testing.TEST_USER_PASSWORD\n+        cookie_plugin.login()\n+\n+        # Submit the login form in the browser\n+        login_form = browser.getForm()\n+        login_form.getControl(name="__ac_name").value = pa_testing.SITE_OWNER_NAME\n+        login_form.getControl(name="__ac_password").value = pa_testing.TEST_USER_PASSWORD\n+        login_form.controls[-1].click()\n+        self.assertEqual(\n+            browser.headers["Status"].lower(),\n+            "200 ok",\n+            "Wrong Zope root `/acl_users` cookie login response status",\n+        )\n+        self.assertEqual(\n+            browser.url,\n+            self.app.absolute_url() + "/manage_main",\n+            "Wrong Zope root `/acl_users` cookie login redirect",\n+        )\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2021-12-29T21:42:42+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PlonePAS/commit/7eb180236c3cfdf52a56e1b64b322dcc86325f3a

Merge pull request #65 from plone/fix-zope-root-cookie-auth

fix(setup): Zope root cookie auth and login form

Files changed:
A news/65.bugfix
A src/Products/PlonePAS/tests/test_setup.py
M src/Products/PlonePAS/setuphandlers.py

b'diff --git a/news/65.bugfix b/news/65.bugfix\nnew file mode 100644\nindex 00000000..b998196d\n--- /dev/null\n+++ b/news/65.bugfix\n@@ -0,0 +1,2 @@\n+Fix broken Zope root `/acl_users` cookie plugin on `PlonePAS` install.\n+[rpatterson]\ndiff --git a/src/Products/PlonePAS/setuphandlers.py b/src/Products/PlonePAS/setuphandlers.py\nindex 3216d992..084ca86b 100644\n--- a/src/Products/PlonePAS/setuphandlers.py\n+++ b/src/Products/PlonePAS/setuphandlers.py\n@@ -2,7 +2,9 @@\n from Acquisition import aq_base\n from Acquisition import aq_parent\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone import interfaces as plone_ifaces\n from Products.PlonePAS import config\n+from Products.PlonePAS.plugins import cookie_handler\n from Products.PlonePAS.interfaces import group as igroup\n from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin\n from Products.PlonePAS.interfaces.plugins import IUserIntrospection\n@@ -13,9 +15,11 @@\n from Products.PluggableAuthService.interfaces.plugins import IChallengePlugin\n from Products.PluggableAuthService.interfaces.plugins \\\n     import ICredentialsResetPlugin\n+from Products.PluggableAuthService.plugins import CookieAuthHelper\n from Products.PluggableAuthService.plugins.RecursiveGroupsPlugin \\\n     import addRecursiveGroupsPlugin\n from plone.session.plugins.session import manage_addSessionPlugin\n+from zope import component\n import logging\n \n logger = logging.getLogger(\'PlonePAS setup\')\n@@ -196,11 +200,25 @@ def setupAuthPlugins(portal, pas, plone_pas,\n         login_path = crumbler.auto_login_page\n         cookie_name = crumbler.auth_cookie\n \n-    found = uf.objectIds([\'Extended Cookie Auth Helper\'])\n-    if not found:\n-        plone_pas.manage_addExtendedCookieAuthHelper(\'credentials_cookie_auth\',\n-                                                     cookie_name=cookie_name)\n-    logger.debug("Added Extended Cookie Auth Helper.")\n+    is_plone_site = plone_ifaces.IPloneSiteRoot.providedBy(portal)\n+    if is_plone_site:\n+        cookie_meta_type = cookie_handler.ExtendedCookieAuthHelper.meta_type\n+        add_cookie_plugin = plone_pas.manage_addExtendedCookieAuthHelper\n+    else:\n+        # Can\'t use the `ExtendedCookieAuthHelper` outside of a Plone portal.\n+        cookie_meta_type = CookieAuthHelper.CookieAuthHelper.meta_type\n+        add_cookie_plugin = pas.addCookieAuthHelper\n+    cookie_auth_ids = uf.objectIds(cookie_meta_type)\n+    if not cookie_auth_ids:\n+        add_cookie_plugin(\n+            "credentials_cookie_auth",\n+            cookie_name=cookie_name,\n+        )\n+        logger.debug(\n+            "Added %r: %r",\n+            cookie_meta_type,\n+            "/".join(uf.credentials_cookie_auth.getPhysicalPath()),\n+        )\n     if deactivate_basic_reset:\n         disable = [\'ICredentialsResetPlugin\', \'ICredentialsUpdatePlugin\']\n     else:\n@@ -212,7 +230,7 @@ def setupAuthPlugins(portal, pas, plone_pas,\n     )\n \n     credentials_cookie_auth = uf._getOb(\'credentials_cookie_auth\')\n-    if \'login_form\' in credentials_cookie_auth:\n+    if is_plone_site and \'login_form\' in credentials_cookie_auth:\n         credentials_cookie_auth.manage_delObjects(ids=[\'login_form\'])\n         logger.debug("Removed default login_form from credentials cookie "\n                      "auth.")\ndiff --git a/src/Products/PlonePAS/tests/test_setup.py b/src/Products/PlonePAS/tests/test_setup.py\nnew file mode 100644\nindex 00000000..473f5106\n--- /dev/null\n+++ b/src/Products/PlonePAS/tests/test_setup.py\n@@ -0,0 +1,134 @@\n+# -*- coding: utf-8 -*-\n+from plone.app import testing as pa_testing\n+from plone.testing import zope\n+from zope.component import hooks\n+from Products.PlonePAS import testing\n+from Products.PluggableAuthService.interfaces import plugins as plugins_ifaces\n+from Products.PluggableAuthService.plugins import CookieAuthHelper\n+from Products.PluggableAuthService.plugins import HTTPBasicAuthHelper\n+\n+import transaction\n+import unittest\n+import urllib.parse\n+\n+\n+class PortalSetupTest(unittest.TestCase):\n+\n+    layer = testing.PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        """\n+        Set up convenience references to test fixture from the layer.\n+        """\n+        self.app = self.layer["app"]\n+        self.root_acl_users = self.app.acl_users\n+\n+    def test_zope_root_default_challenge(self):\n+        """\n+        The Zope root `/acl_users` default challenge plugin works.\n+        """\n+        # Check the Zope root PAS plugin configuration\n+        self.assertIn(\n+            "credentials_basic_auth",\n+            self.root_acl_users.objectIds(),\n+            "Basic auth plugin missing from Zope root `/acl_users`",\n+        )\n+        basic_plugin = self.root_acl_users.credentials_basic_auth\n+        self.assertIsInstance(\n+            basic_plugin,\n+            HTTPBasicAuthHelper.HTTPBasicAuthHelper,\n+            "Wrong Zope root `/acl_users` basic auth plugin type",\n+        )\n+        challenge_plugins = self.root_acl_users.plugins.listPlugins(\n+            plugins_ifaces.IChallengePlugin,\n+        )\n+        _, default_challenge_plugin = challenge_plugins[0]\n+        self.assertEqual(\n+            "/".join(default_challenge_plugin.getPhysicalPath()),\n+            "/".join(basic_plugin.getPhysicalPath()),\n+            "Wrong Zope root `/acl_users` default challenge plugin",\n+        )\n+\n+        # Check the challenge response in the actual browser\n+        browser = zope.Browser(self.app)\n+        browser.raiseHttpErrors = False\n+        browser.open(self.app.absolute_url() + "/manage_main")\n+        self.assertEqual(\n+            browser.headers["Status"].lower(),\n+            "401 unauthorized",\n+            "Wrong Zope root `/acl_users` default challenge response status",\n+        )\n+\n+    def test_zope_root_cookie_login(self):\n+        """\n+        The Zope root `/acl_users` cookie login works.\n+        """\n+        # Make the cookie plugin the default auth challenge\n+        self.assertIn(\n+            "credentials_cookie_auth",\n+            self.root_acl_users.objectIds(),\n+            "Cookie auth plugin missing from Zope root `/acl_users`",\n+        )\n+        cookie_plugin = self.root_acl_users.credentials_cookie_auth\n+        self.assertIs(\n+            type(cookie_plugin.aq_base),\n+            CookieAuthHelper.CookieAuthHelper,\n+            "Wrong Zope root `/acl_users` cookie auth plugin type",\n+        )\n+        self.root_acl_users.plugins.activatePlugin(\n+            plugins_ifaces.IChallengePlugin,\n+            cookie_plugin.id,\n+        )\n+        self.root_acl_users.plugins.movePluginsTop(\n+            plugins_ifaces.IChallengePlugin,\n+            [cookie_plugin.id],\n+        )\n+        transaction.commit()\n+        challenge_plugins = self.root_acl_users.plugins.listPlugins(\n+            plugins_ifaces.IChallengePlugin,\n+        )\n+        _, default_challenge_plugin = challenge_plugins[0]\n+        self.assertEqual(\n+            "/".join(default_challenge_plugin.getPhysicalPath()),\n+            "/".join(cookie_plugin.getPhysicalPath()),\n+            "Wrong Zope root `/acl_users` default challenge plugin",\n+        )\n+\n+        # Check the challenge response in the actual browser\n+        browser = zope.Browser(self.app)\n+        browser.open(self.app.absolute_url() + "/manage_main")\n+        self.assertEqual(\n+            browser.headers["Status"].lower(),\n+            "200 ok",\n+            "Wrong Zope root `/acl_users` cookie challenge response status",\n+        )\n+        login_form_url = urllib.parse.urlsplit(browser.url)\n+        self.assertEqual(\n+            login_form_url._replace(query="").geturl(),\n+            cookie_plugin.absolute_url() + "/login_form",\n+            "Wrong Zope root `/acl_users` cookie challenge redirect",\n+        )\n+\n+        # Workaround the fact that the `zope.component` site is still the Plone portal\n+        # when the test browser handles requests.\n+        hooks.setSite(None)\n+        zope.login(self.root_acl_users, pa_testing.SITE_OWNER_NAME)\n+        self.app.REQUEST.form["__ac_name"] = pa_testing.SITE_OWNER_NAME\n+        self.app.REQUEST.form["__ac_password"] = pa_testing.TEST_USER_PASSWORD\n+        cookie_plugin.login()\n+\n+        # Submit the login form in the browser\n+        login_form = browser.getForm()\n+        login_form.getControl(name="__ac_name").value = pa_testing.SITE_OWNER_NAME\n+        login_form.getControl(name="__ac_password").value = pa_testing.TEST_USER_PASSWORD\n+        login_form.controls[-1].click()\n+        self.assertEqual(\n+            browser.headers["Status"].lower(),\n+            "200 ok",\n+            "Wrong Zope root `/acl_users` cookie login response status",\n+        )\n+        self.assertEqual(\n+            browser.url,\n+            self.app.absolute_url() + "/manage_main",\n+            "Wrong Zope root `/acl_users` cookie login redirect",\n+        )\n'

