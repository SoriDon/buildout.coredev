Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2019-02-07T16:30:38+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.robotframework/commit/7178ed1009f4950c8cda77b7499d1e20d8480715

Replace "Zope 2 server" with the more appropriate "Zope robot server"

Files changed:
M CHANGES.rst
M src/plone/app/robotframework/server.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 0f52f21..9dac5a6 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,6 +14,9 @@ New features:\n \n Bug fixes:\n \n+- Replace "Zope 2 server" with the more appropriate "Zope robot server"\n+  [ale-rt]\n+\n - Use the standard library signal module instead of the ZServer Signal module\n   (Fixes #97)\n   [ale-rt]\ndiff --git a/src/plone/app/robotframework/server.py b/src/plone/app/robotframework/server.py\nindex 76dee39..3cbb3c8 100644\n--- a/src/plone/app/robotframework/server.py\n+++ b/src/plone/app/robotframework/server.py\n@@ -30,20 +30,31 @@\n LISTENER_HOST = os.getenv("LISTENER_HOST", ZSERVER_HOST)\n LISTENER_PORT = int(os.getenv("LISTENER_PORT", 49999))\n \n-TIME = lambda: time.strftime(\'%H:%M:%S\')\n-WAIT = lambda msg:  \'{0} [\\033[33m wait \\033[0m] {1}\'.format(TIME(), msg)\n-ERROR = lambda msg: \'{0} [\\033[31m ERROR \\033[0m] {1}\'.format(TIME(), msg)\n-READY = lambda msg: \'{0} [\\033[32m ready \\033[0m] {1}\'.format(TIME(), msg)\n+\n+def TIME():\n+    return time.strftime(\'%H:%M:%S\')\n+\n+\n+def WAIT(msg):\n+    return \'{0} [\\033[33m wait \\033[0m] {1}\'.format(TIME(), msg)\n+\n+\n+def ERROR(msg):\n+    return \'{0} [\\033[31m ERROR \\033[0m] {1}\'.format(TIME(), msg)\n+\n+\n+def READY(msg):\n+    return \'{0} [\\033[32m ready \\033[0m] {1}\'.format(TIME(), msg)\n \n \n def start(zope_layer_dotted_name):\n \n-    print(WAIT("Starting Zope 2 server"))\n+    print(WAIT("Starting Zope robot server"))\n \n     zsl = Zope2Server()\n     zsl.start_zope_server(zope_layer_dotted_name)\n \n-    print(READY("Started Zope 2 server"))\n+    print(READY("Started Zope robot server"))\n \n     listener = SimpleXMLRPCServer((LISTENER_HOST, LISTENER_PORT),\n                                   logRequests=False)\n@@ -55,18 +66,18 @@ def start(zope_layer_dotted_name):\n         listener.serve_forever()\n     finally:\n         print()\n-        print(WAIT("Stopping Zope 2 server"))\n+        print(WAIT("Stopping Zope robot server"))\n \n         zsl.stop_zope_server()\n \n-        print(READY("Zope 2 server stopped"))\n+        print(READY("Zope robot server stopped"))\n \n \n def start_reload(zope_layer_dotted_name, reload_paths=(\'src\',),\n                  preload_layer_dotted_name=\'plone.app.testing.PLONE_FIXTURE\',\n                  extensions=None):\n \n-    print(WAIT("Starting Zope 2 server"))\n+    print(WAIT("Starting Zope robot server"))\n \n     zsl = Zope2Server()\n     zsl.start_zope_server(preload_layer_dotted_name)\n@@ -81,9 +92,9 @@ def start_reload(zope_layer_dotted_name, reload_paths=(\'src\',),\n     forkloop.start()\n \n     if forkloop.exit:\n-        print(WAIT("Stopping Zope 2 server"))\n+        print(WAIT("Stopping Zope robot server"))\n         zsl.stop_zope_server()\n-        print(READY("Zope 2 server stopped"))\n+        print(READY("Zope robot server stopped"))\n         return\n \n     # XXX: For unknown reason call to socket.gethostbyaddr may cause malloc\n@@ -111,14 +122,14 @@ def start_reload(zope_layer_dotted_name, reload_paths=(\'src\',),\n     if \'Darwin\' in platform.uname():\n         socket.gethostbyaddr = gethostbyaddr\n \n-    print(READY("Zope 2 server started"))\n+    print(READY("Zope robot server started"))\n \n     try:\n         listener = SimpleXMLRPCServer((LISTENER_HOST, LISTENER_PORT),\n                                       logRequests=False)\n     except socket.error as e:\n         print(ERROR(str(e)))\n-        print(WAIT("Pruning Zope 2 server"))\n+        print(WAIT("Pruning Zope robot server"))\n         zsl.prune_zope_server()\n         return\n \n@@ -133,7 +144,7 @@ def start_reload(zope_layer_dotted_name, reload_paths=(\'src\',),\n     except select.error:  # Interrupted system call\n         pass\n     finally:\n-        print(WAIT("Pruning Zope 2 server"))\n+        print(WAIT("Pruning Zope robot server"))\n         zsl.prune_zope_server()\n \n \n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2019-02-07T17:33:35+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.robotframework/commit/c4674a6f60c053eb8eaa1b435d6936606bc50614

Fix killing the child of a process

Files changed:
M CHANGES.rst
M src/plone/app/robotframework/reload.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 9dac5a6..540c347 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,6 +14,10 @@ New features:\n \n Bug fixes:\n \n+- Do not raise an error if the child processes we want to kill\n+  is not there anymore\n+  [ale-rt]\n+\n - Replace "Zope 2 server" with the more appropriate "Zope robot server"\n   [ale-rt]\n \ndiff --git a/src/plone/app/robotframework/reload.py b/src/plone/app/robotframework/reload.py\nindex 9a57feb..e72ea22 100644\n--- a/src/plone/app/robotframework/reload.py\n+++ b/src/plone/app/robotframework/reload.py\n@@ -217,7 +217,11 @@ def _killChild(self):\n             # Kill itself\n             os.kill(os.getpid(), signal.SIGINT)\n         else:\n-            os.kill(self.child_pid, signal.SIGINT)\n+            try:\n+                os.kill(self.child_pid, signal.SIGINT)\n+            except OSError:\n+                if not self.isChildAlive():\n+                    pass  # The child process has already been killed\n \n     def _parentExitHandler(self, signum=None, frame=None):\n         if self.exit:\n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2019-02-08T00:51:58+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.robotframework/commit/8fe19743673f21400a1c9f0d258846bad0b89988

Merge pull request #104 from plone/improvements

Assorted improvements

Files changed:
M CHANGES.rst
M src/plone/app/robotframework/reload.py
M src/plone/app/robotframework/server.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 0f52f21..540c347 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,6 +14,13 @@ New features:\n \n Bug fixes:\n \n+- Do not raise an error if the child processes we want to kill\n+  is not there anymore\n+  [ale-rt]\n+\n+- Replace "Zope 2 server" with the more appropriate "Zope robot server"\n+  [ale-rt]\n+\n - Use the standard library signal module instead of the ZServer Signal module\n   (Fixes #97)\n   [ale-rt]\ndiff --git a/src/plone/app/robotframework/reload.py b/src/plone/app/robotframework/reload.py\nindex 9a57feb..e72ea22 100644\n--- a/src/plone/app/robotframework/reload.py\n+++ b/src/plone/app/robotframework/reload.py\n@@ -217,7 +217,11 @@ def _killChild(self):\n             # Kill itself\n             os.kill(os.getpid(), signal.SIGINT)\n         else:\n-            os.kill(self.child_pid, signal.SIGINT)\n+            try:\n+                os.kill(self.child_pid, signal.SIGINT)\n+            except OSError:\n+                if not self.isChildAlive():\n+                    pass  # The child process has already been killed\n \n     def _parentExitHandler(self, signum=None, frame=None):\n         if self.exit:\ndiff --git a/src/plone/app/robotframework/server.py b/src/plone/app/robotframework/server.py\nindex 76dee39..3cbb3c8 100644\n--- a/src/plone/app/robotframework/server.py\n+++ b/src/plone/app/robotframework/server.py\n@@ -30,20 +30,31 @@\n LISTENER_HOST = os.getenv("LISTENER_HOST", ZSERVER_HOST)\n LISTENER_PORT = int(os.getenv("LISTENER_PORT", 49999))\n \n-TIME = lambda: time.strftime(\'%H:%M:%S\')\n-WAIT = lambda msg:  \'{0} [\\033[33m wait \\033[0m] {1}\'.format(TIME(), msg)\n-ERROR = lambda msg: \'{0} [\\033[31m ERROR \\033[0m] {1}\'.format(TIME(), msg)\n-READY = lambda msg: \'{0} [\\033[32m ready \\033[0m] {1}\'.format(TIME(), msg)\n+\n+def TIME():\n+    return time.strftime(\'%H:%M:%S\')\n+\n+\n+def WAIT(msg):\n+    return \'{0} [\\033[33m wait \\033[0m] {1}\'.format(TIME(), msg)\n+\n+\n+def ERROR(msg):\n+    return \'{0} [\\033[31m ERROR \\033[0m] {1}\'.format(TIME(), msg)\n+\n+\n+def READY(msg):\n+    return \'{0} [\\033[32m ready \\033[0m] {1}\'.format(TIME(), msg)\n \n \n def start(zope_layer_dotted_name):\n \n-    print(WAIT("Starting Zope 2 server"))\n+    print(WAIT("Starting Zope robot server"))\n \n     zsl = Zope2Server()\n     zsl.start_zope_server(zope_layer_dotted_name)\n \n-    print(READY("Started Zope 2 server"))\n+    print(READY("Started Zope robot server"))\n \n     listener = SimpleXMLRPCServer((LISTENER_HOST, LISTENER_PORT),\n                                   logRequests=False)\n@@ -55,18 +66,18 @@ def start(zope_layer_dotted_name):\n         listener.serve_forever()\n     finally:\n         print()\n-        print(WAIT("Stopping Zope 2 server"))\n+        print(WAIT("Stopping Zope robot server"))\n \n         zsl.stop_zope_server()\n \n-        print(READY("Zope 2 server stopped"))\n+        print(READY("Zope robot server stopped"))\n \n \n def start_reload(zope_layer_dotted_name, reload_paths=(\'src\',),\n                  preload_layer_dotted_name=\'plone.app.testing.PLONE_FIXTURE\',\n                  extensions=None):\n \n-    print(WAIT("Starting Zope 2 server"))\n+    print(WAIT("Starting Zope robot server"))\n \n     zsl = Zope2Server()\n     zsl.start_zope_server(preload_layer_dotted_name)\n@@ -81,9 +92,9 @@ def start_reload(zope_layer_dotted_name, reload_paths=(\'src\',),\n     forkloop.start()\n \n     if forkloop.exit:\n-        print(WAIT("Stopping Zope 2 server"))\n+        print(WAIT("Stopping Zope robot server"))\n         zsl.stop_zope_server()\n-        print(READY("Zope 2 server stopped"))\n+        print(READY("Zope robot server stopped"))\n         return\n \n     # XXX: For unknown reason call to socket.gethostbyaddr may cause malloc\n@@ -111,14 +122,14 @@ def start_reload(zope_layer_dotted_name, reload_paths=(\'src\',),\n     if \'Darwin\' in platform.uname():\n         socket.gethostbyaddr = gethostbyaddr\n \n-    print(READY("Zope 2 server started"))\n+    print(READY("Zope robot server started"))\n \n     try:\n         listener = SimpleXMLRPCServer((LISTENER_HOST, LISTENER_PORT),\n                                       logRequests=False)\n     except socket.error as e:\n         print(ERROR(str(e)))\n-        print(WAIT("Pruning Zope 2 server"))\n+        print(WAIT("Pruning Zope robot server"))\n         zsl.prune_zope_server()\n         return\n \n@@ -133,7 +144,7 @@ def start_reload(zope_layer_dotted_name, reload_paths=(\'src\',),\n     except select.error:  # Interrupted system call\n         pass\n     finally:\n-        print(WAIT("Pruning Zope 2 server"))\n+        print(WAIT("Pruning Zope robot server"))\n         zsl.prune_zope_server()\n \n \n'

