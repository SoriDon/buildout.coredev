Repository: plone.api


Branch: refs/heads/master
Date: 2022-09-18T20:01:22-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.api/commit/41e50aa5703a06b58490d4f60b36ce7c27f15ca9

Use longer passwords in tests

Files changed:
M docs/user.md
M src/plone/api/tests/test_env.py
M src/plone/api/tests/test_user.py

b'diff --git a/docs/user.md b/docs/user.md\nindex 070d8f44..11362b43 100644\n--- a/docs/user.md\n+++ b/docs/user.md\n@@ -88,7 +88,7 @@ Otherwise a random 8-character alphanumeric password will be generated.\n user = api.user.create(\n     username=\'noob\',\n     email=\'noob@plone.org\',\n-    password=\'secret\',\n+    password=\'secretpw\',\n )\n ```\n \ndiff --git a/src/plone/api/tests/test_env.py b/src/plone/api/tests/test_env.py\nindex 12b95be8..66dcdd05 100644\n--- a/src/plone/api/tests/test_env.py\n+++ b/src/plone/api/tests/test_env.py\n@@ -5,6 +5,7 @@\n from plone import api\n from plone.api.tests.base import INTEGRATION_TESTING\n from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_PASSWORD\n \n import AccessControl\n import unittest\n@@ -88,21 +89,21 @@ def setUp(self):\n         api.user.create(\n             username="worker",\n             email="ordinary_person@example.com",\n-            password="password1",\n+            password=TEST_USER_PASSWORD,\n             roles=("Member",),\n         )\n \n         api.user.create(\n             username="boss",\n             email="important_person@example.com",\n-            password="123456",\n+            password=TEST_USER_PASSWORD,\n             roles=("Member", "VIP"),\n         )\n \n         api.user.create(\n             username="superhuman",\n             email="xavier@example.com",\n-            password="think_carefully",\n+            password=TEST_USER_PASSWORD,\n             roles=("Member", "Manager"),\n         )\n \ndiff --git a/src/plone/api/tests/test_user.py b/src/plone/api/tests/test_user.py\nindex a324647b..742383ac 100644\n--- a/src/plone/api/tests/test_user.py\n+++ b/src/plone/api/tests/test_user.py\n@@ -59,7 +59,7 @@ def test_create_no_email(self):\n         with self.assertRaises(MissingParameterError):\n             api.user.create(\n                 username="chuck",\n-                password="secret",\n+                password="secretpw",\n             )\n \n     def test_get_user_userid_username(self):\n@@ -78,7 +78,7 @@ def test_create_email_in_properties(self):\n         """Test that email is parsed from the properties."""\n         user = api.user.create(\n             username="chuck",\n-            password="secret",\n+            password="secretpw",\n             properties={"email": "chuck@norris.org"},\n         )\n \n@@ -91,7 +91,7 @@ def test_create_no_username(self):\n \n         user = api.user.create(\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n \n         self.assertEqual(user.getUserName(), "chuck@norris.org")\n@@ -105,7 +105,7 @@ def test_create_no_username(self):\n         with self.assertRaises(InvalidParameterError):\n             api.user.create(\n                 email="chuck@norris.org",\n-                password="secret",\n+                password="secretpw",\n             )\n \n     def test_create_with_username(self):\n@@ -115,7 +115,7 @@ def test_create_with_username(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n         self.assertEqual(user.getUserName(), "chuck@norris.org")\n \n@@ -124,7 +124,7 @@ def test_create_with_username(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n         self.assertEqual(user.getUserName(), "chuck")\n \n@@ -134,7 +134,7 @@ def test_create_default_roles(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n         self.assertCountEqual(\n             api.user.get_roles(user=user),\n@@ -146,7 +146,7 @@ def test_create_specified_roles(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n             roles=["Reviewer", "Editor"],\n         )\n         self.assertCountEqual(\n@@ -159,7 +159,7 @@ def test_create_no_roles(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n             roles=[],\n         )\n         self.assertCountEqual(\n@@ -179,7 +179,7 @@ def test_get(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n         self.assertEqual(api.user.get("chuck").id, user.id)\n \n@@ -195,7 +195,7 @@ def test_get_all_users(self):\n         api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n         users = [user.getUserName() for user in api.user.get_users()]\n         self.assertCountEqual(\n@@ -208,7 +208,7 @@ def test_get_groups_users(self):\n         api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n         api.group.create(groupname="staff")\n         api.group.add_user(username="chuck", groupname="staff")\n@@ -256,24 +256,24 @@ def test_delete_no_username(self):\n                 user=mock.Mock(),\n             )\n \n-        api.user.create(email="chuck@norris.org", password="secret")\n+        api.user.create(email="chuck@norris.org", password="secretpw")\n         api.user.delete(username="unwanted@norris.org")\n \n-        user = api.user.create(email="steven@seagal.org", password="secret")\n+        user = api.user.create(email="steven@seagal.org", password="secretpw")\n         api.user.delete(user=user)\n \n     def test_delete_username(self):\n         """Test whether the user has been deleted."""\n         api.user.create(\n             username="unwanted",\n-            password="secret",\n+            password="secretpw",\n             email="unwanted@example.org",\n         )\n         api.user.delete(username="unwanted")\n \n         user = api.user.create(\n             username="steven",\n-            password="secret",\n+            password="secretpw",\n             email="steven@example.org",\n         )\n         api.user.delete(user=user)\n@@ -290,7 +290,7 @@ def test_get_roles_username(self):\n         api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n             roles=ROLES,\n         )\n         self.assertCountEqual(\n@@ -304,7 +304,7 @@ def test_get_roles_user(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n             roles=ROLES,\n         )\n         self.assertCountEqual(\n@@ -318,7 +318,7 @@ def test_get_roles_username_and_user(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n             roles=ROLES,\n         )\n \n@@ -366,7 +366,7 @@ def test_get_roles_in_context(self):\n         api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n \n         portal = api.portal.get()\n@@ -397,7 +397,7 @@ def test_get_roles_local_only(self):\n         api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n \n         portal = api.portal.get()\n@@ -428,7 +428,7 @@ def test_get_roles_local_includes_group_roles(self):\n         api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n         api.group.create("foo", roles=["Reviewer"])\n         api.group.add_user(groupname="foo", username="chuck")\n@@ -482,7 +482,7 @@ def test_get_permissions_root(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n             roles=[],\n         )\n \n@@ -523,7 +523,7 @@ def test_get_permissions_context(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n             roles=[],\n         )\n \n@@ -571,7 +571,7 @@ def test_has_permission_context(self):\n         user = api.user.create(\n             username=username,\n             email="billy@bob.net",\n-            password="secret",\n+            password="secretpw",\n         )\n \n         # Cannot supply both username and user arguments\n@@ -620,7 +620,7 @@ def test_grant_roles(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n \n         api.user.grant_roles(username="chuck", roles=["Editor"])\n@@ -653,7 +653,7 @@ def test_grant_roles_username_and_user(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n \n         from plone.api.exc import MissingParameterError\n@@ -708,7 +708,7 @@ def test_revoke_roles(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n \n         api.user.grant_roles(username="chuck", roles=["Reviewer", "Editor"])\n@@ -743,7 +743,7 @@ def test_revoke_roles_username_and_user(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n \n         from plone.api.exc import MissingParameterError\n@@ -783,7 +783,7 @@ def test_revoke_roles_username(self):\n         api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n         from plone.api.exc import InvalidParameterError\n \n@@ -818,7 +818,7 @@ def test_grant_roles_in_context(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n \n         portal = api.portal.get()\n@@ -919,7 +919,7 @@ def test_grant_roles_disregards_adapter(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n \n         self.assertCountEqual(\n@@ -1039,7 +1039,7 @@ def test_revoke_roles_in_context(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n \n         portal = api.portal.get()\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-09-18T20:01:59-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.api/commit/9438837adcdc61fbb0ed6527f3ffba4dbd430ea5

changelog

Files changed:
A news/495.bugfix

b'diff --git a/news/495.bugfix b/news/495.bugfix\nnew file mode 100644\nindex 00000000..2d767944\n--- /dev/null\n+++ b/news/495.bugfix\n@@ -0,0 +1 @@\n+- Use longer password in tests. [davisagli]\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-09-19T11:15:59+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.api/commit/44c98682025e6b83ee16c82f280895bf8aa78209

Merge pull request #495 from plone/pw-length

Use longer passwords in tests

Files changed:
A news/495.bugfix
M docs/user.md
M src/plone/api/tests/test_env.py
M src/plone/api/tests/test_user.py

b'diff --git a/docs/user.md b/docs/user.md\nindex 070d8f44..11362b43 100644\n--- a/docs/user.md\n+++ b/docs/user.md\n@@ -88,7 +88,7 @@ Otherwise a random 8-character alphanumeric password will be generated.\n user = api.user.create(\n     username=\'noob\',\n     email=\'noob@plone.org\',\n-    password=\'secret\',\n+    password=\'secretpw\',\n )\n ```\n \ndiff --git a/news/495.bugfix b/news/495.bugfix\nnew file mode 100644\nindex 00000000..2d767944\n--- /dev/null\n+++ b/news/495.bugfix\n@@ -0,0 +1 @@\n+- Use longer password in tests. [davisagli]\ndiff --git a/src/plone/api/tests/test_env.py b/src/plone/api/tests/test_env.py\nindex 12b95be8..66dcdd05 100644\n--- a/src/plone/api/tests/test_env.py\n+++ b/src/plone/api/tests/test_env.py\n@@ -5,6 +5,7 @@\n from plone import api\n from plone.api.tests.base import INTEGRATION_TESTING\n from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_PASSWORD\n \n import AccessControl\n import unittest\n@@ -88,21 +89,21 @@ def setUp(self):\n         api.user.create(\n             username="worker",\n             email="ordinary_person@example.com",\n-            password="password1",\n+            password=TEST_USER_PASSWORD,\n             roles=("Member",),\n         )\n \n         api.user.create(\n             username="boss",\n             email="important_person@example.com",\n-            password="123456",\n+            password=TEST_USER_PASSWORD,\n             roles=("Member", "VIP"),\n         )\n \n         api.user.create(\n             username="superhuman",\n             email="xavier@example.com",\n-            password="think_carefully",\n+            password=TEST_USER_PASSWORD,\n             roles=("Member", "Manager"),\n         )\n \ndiff --git a/src/plone/api/tests/test_user.py b/src/plone/api/tests/test_user.py\nindex a324647b..742383ac 100644\n--- a/src/plone/api/tests/test_user.py\n+++ b/src/plone/api/tests/test_user.py\n@@ -59,7 +59,7 @@ def test_create_no_email(self):\n         with self.assertRaises(MissingParameterError):\n             api.user.create(\n                 username="chuck",\n-                password="secret",\n+                password="secretpw",\n             )\n \n     def test_get_user_userid_username(self):\n@@ -78,7 +78,7 @@ def test_create_email_in_properties(self):\n         """Test that email is parsed from the properties."""\n         user = api.user.create(\n             username="chuck",\n-            password="secret",\n+            password="secretpw",\n             properties={"email": "chuck@norris.org"},\n         )\n \n@@ -91,7 +91,7 @@ def test_create_no_username(self):\n \n         user = api.user.create(\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n \n         self.assertEqual(user.getUserName(), "chuck@norris.org")\n@@ -105,7 +105,7 @@ def test_create_no_username(self):\n         with self.assertRaises(InvalidParameterError):\n             api.user.create(\n                 email="chuck@norris.org",\n-                password="secret",\n+                password="secretpw",\n             )\n \n     def test_create_with_username(self):\n@@ -115,7 +115,7 @@ def test_create_with_username(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n         self.assertEqual(user.getUserName(), "chuck@norris.org")\n \n@@ -124,7 +124,7 @@ def test_create_with_username(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n         self.assertEqual(user.getUserName(), "chuck")\n \n@@ -134,7 +134,7 @@ def test_create_default_roles(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n         self.assertCountEqual(\n             api.user.get_roles(user=user),\n@@ -146,7 +146,7 @@ def test_create_specified_roles(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n             roles=["Reviewer", "Editor"],\n         )\n         self.assertCountEqual(\n@@ -159,7 +159,7 @@ def test_create_no_roles(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n             roles=[],\n         )\n         self.assertCountEqual(\n@@ -179,7 +179,7 @@ def test_get(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n         self.assertEqual(api.user.get("chuck").id, user.id)\n \n@@ -195,7 +195,7 @@ def test_get_all_users(self):\n         api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n         users = [user.getUserName() for user in api.user.get_users()]\n         self.assertCountEqual(\n@@ -208,7 +208,7 @@ def test_get_groups_users(self):\n         api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n         api.group.create(groupname="staff")\n         api.group.add_user(username="chuck", groupname="staff")\n@@ -256,24 +256,24 @@ def test_delete_no_username(self):\n                 user=mock.Mock(),\n             )\n \n-        api.user.create(email="chuck@norris.org", password="secret")\n+        api.user.create(email="chuck@norris.org", password="secretpw")\n         api.user.delete(username="unwanted@norris.org")\n \n-        user = api.user.create(email="steven@seagal.org", password="secret")\n+        user = api.user.create(email="steven@seagal.org", password="secretpw")\n         api.user.delete(user=user)\n \n     def test_delete_username(self):\n         """Test whether the user has been deleted."""\n         api.user.create(\n             username="unwanted",\n-            password="secret",\n+            password="secretpw",\n             email="unwanted@example.org",\n         )\n         api.user.delete(username="unwanted")\n \n         user = api.user.create(\n             username="steven",\n-            password="secret",\n+            password="secretpw",\n             email="steven@example.org",\n         )\n         api.user.delete(user=user)\n@@ -290,7 +290,7 @@ def test_get_roles_username(self):\n         api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n             roles=ROLES,\n         )\n         self.assertCountEqual(\n@@ -304,7 +304,7 @@ def test_get_roles_user(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n             roles=ROLES,\n         )\n         self.assertCountEqual(\n@@ -318,7 +318,7 @@ def test_get_roles_username_and_user(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n             roles=ROLES,\n         )\n \n@@ -366,7 +366,7 @@ def test_get_roles_in_context(self):\n         api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n \n         portal = api.portal.get()\n@@ -397,7 +397,7 @@ def test_get_roles_local_only(self):\n         api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n \n         portal = api.portal.get()\n@@ -428,7 +428,7 @@ def test_get_roles_local_includes_group_roles(self):\n         api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n         api.group.create("foo", roles=["Reviewer"])\n         api.group.add_user(groupname="foo", username="chuck")\n@@ -482,7 +482,7 @@ def test_get_permissions_root(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n             roles=[],\n         )\n \n@@ -523,7 +523,7 @@ def test_get_permissions_context(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n             roles=[],\n         )\n \n@@ -571,7 +571,7 @@ def test_has_permission_context(self):\n         user = api.user.create(\n             username=username,\n             email="billy@bob.net",\n-            password="secret",\n+            password="secretpw",\n         )\n \n         # Cannot supply both username and user arguments\n@@ -620,7 +620,7 @@ def test_grant_roles(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n \n         api.user.grant_roles(username="chuck", roles=["Editor"])\n@@ -653,7 +653,7 @@ def test_grant_roles_username_and_user(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n \n         from plone.api.exc import MissingParameterError\n@@ -708,7 +708,7 @@ def test_revoke_roles(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n \n         api.user.grant_roles(username="chuck", roles=["Reviewer", "Editor"])\n@@ -743,7 +743,7 @@ def test_revoke_roles_username_and_user(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n \n         from plone.api.exc import MissingParameterError\n@@ -783,7 +783,7 @@ def test_revoke_roles_username(self):\n         api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n         from plone.api.exc import InvalidParameterError\n \n@@ -818,7 +818,7 @@ def test_grant_roles_in_context(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n \n         portal = api.portal.get()\n@@ -919,7 +919,7 @@ def test_grant_roles_disregards_adapter(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n \n         self.assertCountEqual(\n@@ -1039,7 +1039,7 @@ def test_revoke_roles_in_context(self):\n         user = api.user.create(\n             username="chuck",\n             email="chuck@norris.org",\n-            password="secret",\n+            password="secretpw",\n         )\n \n         portal = api.portal.get()\n'

