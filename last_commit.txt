Repository: plone.testing


Branch: refs/heads/4.3.x
Date: 2017-04-07T12:46:12+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.testing/commit/f1de157bad5a2e1f0afed6e2f7ec36584b30493e

Fix for ZODB 5: Abort transaction before DB close.

Files changed:
M CHANGES.rst
M src/plone/testing/z2.py

diff --git a/CHANGES.rst b/CHANGES.rst
index cddb690..6264c0c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,9 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Fix for ZODB 5: Abort transaction before DB close.
+  [jensens, jimfulton, ale-rt]
+
 
 
 4.3.0 (2017-03-05)
diff --git a/src/plone/testing/z2.py b/src/plone/testing/z2.py
index d661ad7..f9b8098 100644
--- a/src/plone/testing/z2.py
+++ b/src/plone/testing/z2.py
@@ -9,8 +9,10 @@
 from Zope2.App.schema import Zope2VocabularyRegistry
 from ZPublisher import publish_module
 from ZServer import PubCore
+
 import contextlib
 import os
+import transaction
 
 try:
     from plone.testing._z2_testbrowser import Browser
@@ -264,9 +266,7 @@ def zopeApp(db=None, connection=None, environ=None):
     pass an open connection as ``connection`` (the connection will not be
     closed).
     """
-
     import Zope2
-    import transaction
 
     closeConn = True
     if connection is not None:
@@ -303,10 +303,10 @@ def zopeApp(db=None, connection=None, environ=None):
     finally:
         try:
             app.REQUEST.close()
-
             if closeConn:
+                transaction.abort()
                 connection.close()
-        except:
+        except Exception:
             if inner_exception:
                 raise inner_exception
             else:
@@ -603,6 +603,7 @@ def tearDownDatabase(self):
         del self._dbtab
 
         # Close and pop the zodbDB resource
+        transaction.abort()
         self['zodbDB'].close()
         del self['zodbDB']
 
@@ -752,6 +753,7 @@ def tearDownFive(self):
 
         setVocabularyRegistry(self._oldVocabularyRegistry)
 
+
 STARTUP = Startup()
 
 
@@ -788,7 +790,6 @@ class MyFixture(Layer):
 
     def testSetUp(self):
         import Zope2
-        import transaction
 
         # Open a new app and save it as the resource ``app``.
 
@@ -816,7 +817,6 @@ def testSetUp(self):
         self['request'] = request
 
     def testTearDown(self):
-        import transaction
 
         # Abort the transaction
         transaction.abort()
@@ -870,7 +870,6 @@ class MyFixture(Layer):
 
     def testSetUp(self):
         import Zope2
-        import transaction
 
         # Override zodbDB from the layer setup. Since it was set up by
         # this layer, we can't just assign a new shadow. We therefore keep
@@ -906,8 +905,6 @@ def testSetUp(self):
         self['request'] = request
 
     def testTearDown(self):
-        import transaction
-
         # Abort any open transactions
         transaction.abort()
 


Repository: plone.testing


Branch: refs/heads/4.3.x
Date: 2017-04-07T14:32:25+02:00
Author: agitator (agitator) <agitator@users.noreply.github.com>
Commit: https://github.com/plone/plone.testing/commit/384af39a09c394da751c0ec765d1b2d2bd25d7a8

Merge pull request #31 from plone/abort-before-close-4.3.x

Fix for ZODB 5: Abort transaction before DB close (4.3.x backport)

Files changed:
M CHANGES.rst
M src/plone/testing/z2.py

diff --git a/CHANGES.rst b/CHANGES.rst
index cddb690..6264c0c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,9 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Fix for ZODB 5: Abort transaction before DB close.
+  [jensens, jimfulton, ale-rt]
+
 
 
 4.3.0 (2017-03-05)
diff --git a/src/plone/testing/z2.py b/src/plone/testing/z2.py
index d661ad7..f9b8098 100644
--- a/src/plone/testing/z2.py
+++ b/src/plone/testing/z2.py
@@ -9,8 +9,10 @@
 from Zope2.App.schema import Zope2VocabularyRegistry
 from ZPublisher import publish_module
 from ZServer import PubCore
+
 import contextlib
 import os
+import transaction
 
 try:
     from plone.testing._z2_testbrowser import Browser
@@ -264,9 +266,7 @@ def zopeApp(db=None, connection=None, environ=None):
     pass an open connection as ``connection`` (the connection will not be
     closed).
     """
-
     import Zope2
-    import transaction
 
     closeConn = True
     if connection is not None:
@@ -303,10 +303,10 @@ def zopeApp(db=None, connection=None, environ=None):
     finally:
         try:
             app.REQUEST.close()
-
             if closeConn:
+                transaction.abort()
                 connection.close()
-        except:
+        except Exception:
             if inner_exception:
                 raise inner_exception
             else:
@@ -603,6 +603,7 @@ def tearDownDatabase(self):
         del self._dbtab
 
         # Close and pop the zodbDB resource
+        transaction.abort()
         self['zodbDB'].close()
         del self['zodbDB']
 
@@ -752,6 +753,7 @@ def tearDownFive(self):
 
         setVocabularyRegistry(self._oldVocabularyRegistry)
 
+
 STARTUP = Startup()
 
 
@@ -788,7 +790,6 @@ class MyFixture(Layer):
 
     def testSetUp(self):
         import Zope2
-        import transaction
 
         # Open a new app and save it as the resource ``app``.
 
@@ -816,7 +817,6 @@ def testSetUp(self):
         self['request'] = request
 
     def testTearDown(self):
-        import transaction
 
         # Abort the transaction
         transaction.abort()
@@ -870,7 +870,6 @@ class MyFixture(Layer):
 
     def testSetUp(self):
         import Zope2
-        import transaction
 
         # Override zodbDB from the layer setup. Since it was set up by
         # this layer, we can't just assign a new shadow. We therefore keep
@@ -906,8 +905,6 @@ def testSetUp(self):
         self['request'] = request
 
     def testTearDown(self):
-        import transaction
-
         # Abort any open transactions
         transaction.abort()
 


