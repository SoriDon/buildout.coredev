Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2022-04-30T12:35:02+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contenttypes/commit/48680850ca4c1eefafc279aa84f3745d6f3d440f

black

Files changed:
M bootstrap-buildout.py
M docs/source/conf.py
M plone/__init__.py
M plone/app/__init__.py
M plone/app/contenttypes/__init__.py
M plone/app/contenttypes/behaviors/collection.py
M plone/app/contenttypes/behaviors/leadimage.py
M plone/app/contenttypes/behaviors/richtext.py
M plone/app/contenttypes/behaviors/tableofcontents.py
M plone/app/contenttypes/behaviors/thumb_icon.py
M plone/app/contenttypes/behaviors/viewlets.py
M plone/app/contenttypes/browser/collection.py
M plone/app/contenttypes/browser/file.py
M plone/app/contenttypes/browser/full_view.py
M plone/app/contenttypes/browser/migration.py
M plone/app/contenttypes/browser/utils.py
M plone/app/contenttypes/content.py
M plone/app/contenttypes/indexers.py
M plone/app/contenttypes/interfaces.py
M plone/app/contenttypes/permissions.py
M plone/app/contenttypes/setuphandlers.py
M plone/app/contenttypes/subscribers.py
M plone/app/contenttypes/testing.py
M plone/app/contenttypes/tests/oldtypes.py
M plone/app/contenttypes/tests/robot/variables.py
M plone/app/contenttypes/tests/test_behaviors_collection.py
M plone/app/contenttypes/tests/test_behaviors_leadimage.py
M plone/app/contenttypes/tests/test_behaviors_richtext.py
M plone/app/contenttypes/tests/test_behaviors_table_of_contents.py
M plone/app/contenttypes/tests/test_collection.py
M plone/app/contenttypes/tests/test_collection_rss.py
M plone/app/contenttypes/tests/test_content_profile.py
M plone/app/contenttypes/tests/test_document.py
M plone/app/contenttypes/tests/test_event.py
M plone/app/contenttypes/tests/test_file.py
M plone/app/contenttypes/tests/test_folder.py
M plone/app/contenttypes/tests/test_image.py
M plone/app/contenttypes/tests/test_indexes.py
M plone/app/contenttypes/tests/test_link.py
M plone/app/contenttypes/tests/test_news_item.py
M plone/app/contenttypes/tests/test_robot.py
M plone/app/contenttypes/tests/test_security.py
M plone/app/contenttypes/tests/test_setup.py
M plone/app/contenttypes/tests/test_webdav.py
M plone/app/contenttypes/upgrades.py
M plone/app/contenttypes/utils.py

b'diff --git a/bootstrap-buildout.py b/bootstrap-buildout.py\nindex a4599211f..a8bc0c9b9 100644\n--- a/bootstrap-buildout.py\n+++ b/bootstrap-buildout.py\n@@ -25,12 +25,12 @@\n \n from optparse import OptionParser\n \n-__version__ = \'2015-07-01\'\n+__version__ = "2015-07-01"\n # See zc.buildout\'s changelog if this version is up to date.\n \n-tmpeggs = tempfile.mkdtemp(prefix=\'bootstrap-\')\n+tmpeggs = tempfile.mkdtemp(prefix="bootstrap-")\n \n-usage = \'\'\'\\\n+usage = """\\\n [DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n \n Bootstraps a buildout-based project.\n@@ -40,36 +40,50 @@\n \n Note that by using --find-links to point to local resources, you can keep\n this script from going over the network.\n-\'\'\'\n+"""\n \n parser = OptionParser(usage=usage)\n-parser.add_option("--version",\n-                  action="store_true", default=False,\n-                  help=("Return bootstrap.py version."))\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-parser.add_option("--buildout-version",\n-                  help="Use a specific zc.buildout version")\n-parser.add_option("--setuptools-version",\n-                  help="Use a specific setuptools version")\n-parser.add_option("--setuptools-to-dir",\n-                  help=("Allow for re-use of existing directory of "\n-                        "setuptools versions"))\n+parser.add_option(\n+    "--version",\n+    action="store_true",\n+    default=False,\n+    help=("Return bootstrap.py version."),\n+)\n+parser.add_option(\n+    "-t",\n+    "--accept-buildout-test-releases",\n+    dest="accept_buildout_test_releases",\n+    action="store_true",\n+    default=False,\n+    help=(\n+        "Normally, if you do not specify a --version, the "\n+        "bootstrap script and buildout gets the newest "\n+        "*final* versions of zc.buildout and its recipes and "\n+        "extensions for you.  If you use this flag, "\n+        "bootstrap and buildout will get the newest releases "\n+        "even if they are alphas or betas."\n+    ),\n+)\n+parser.add_option(\n+    "-c",\n+    "--config-file",\n+    help=("Specify the path to the buildout configuration " "file to be used."),\n+)\n+parser.add_option(\n+    "-f", "--find-links", help=("Specify a URL to search for buildout releases")\n+)\n+parser.add_option(\n+    "--allow-site-packages",\n+    action="store_true",\n+    default=False,\n+    help=("Let bootstrap.py use existing site packages"),\n+)\n+parser.add_option("--buildout-version", help="Use a specific zc.buildout version")\n+parser.add_option("--setuptools-version", help="Use a specific setuptools version")\n+parser.add_option(\n+    "--setuptools-to-dir",\n+    help=("Allow for re-use of existing directory of " "setuptools versions"),\n+)\n \n options, args = parser.parse_args()\n if options.version:\n@@ -86,35 +100,35 @@\n     from urllib2 import urlopen\n \n ez = {}\n-if os.path.exists(\'ez_setup.py\'):\n-    exec(open(\'ez_setup.py\').read(), ez)\n+if os.path.exists("ez_setup.py"):\n+    exec(open("ez_setup.py").read(), ez)\n else:\n-    exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n+    exec(urlopen("https://bootstrap.pypa.io/ez_setup.py").read(), ez)\n \n if not options.allow_site_packages:\n     # ez_setup imports site, which adds site packages\n     # this will remove them from the path to ensure that incompatible versions\n     # of setuptools are not in the path\n     import site\n+\n     # inside a virtualenv, there is no \'getsitepackages\'.\n     # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n+    if hasattr(site, "getsitepackages"):\n         for sitepackage_path in site.getsitepackages():\n             # Strip all site-packages directories from sys.path that\n             # are not sys.prefix; this is because on Windows\n             # sys.prefix is a site-package directory.\n             if sitepackage_path != sys.prefix:\n-                sys.path[:] = [x for x in sys.path\n-                               if sitepackage_path not in x]\n+                sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n \n setup_args = dict(to_dir=tmpeggs, download_delay=0)\n \n if options.setuptools_version is not None:\n-    setup_args[\'version\'] = options.setuptools_version\n+    setup_args["version"] = options.setuptools_version\n if options.setuptools_to_dir is not None:\n-    setup_args[\'to_dir\'] = options.setuptools_to_dir\n+    setup_args["to_dir"] = options.setuptools_to_dir\n \n-ez[\'use_setuptools\'](**setup_args)\n+ez["use_setuptools"](**setup_args)\n import setuptools\n import pkg_resources\n \n@@ -129,30 +143,37 @@\n \n ws = pkg_resources.working_set\n \n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n+setuptools_path = ws.find(pkg_resources.Requirement.parse("setuptools")).location\n \n # Fix sys.path here as easy_install.pth added before PYTHONPATH\n-cmd = [sys.executable, \'-c\',\n-       \'import sys; sys.path[0:0] = [%r]; \' % setuptools_path +\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n+cmd = [\n+    sys.executable,\n+    "-c",\n+    "import sys; sys.path[0:0] = [%r]; " % setuptools_path\n+    + "from setuptools.command.easy_install import main; main()",\n+    "-mZqNxd",\n+    tmpeggs,\n+]\n \n find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n+    "bootstrap-testing-find-links",\n+    options.find_links\n+    or (\n+        "http://downloads.buildout.org/"\n+        if options.accept_buildout_test_releases\n+        else None\n+    ),\n+)\n if find_links:\n-    cmd.extend([\'-f\', find_links])\n+    cmd.extend(["-f", find_links])\n \n-requirement = \'zc.buildout\'\n+requirement = "zc.buildout"\n version = options.buildout_version\n if version is None and not options.accept_buildout_test_releases:\n     # Figure out the most recent final version of zc.buildout.\n     import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n+\n+    _final_parts = "*final-", "*final"\n \n     def _final_version(parsed_version):\n         try:\n@@ -160,12 +181,11 @@ def _final_version(parsed_version):\n         except AttributeError:\n             # Older setuptools\n             for part in parsed_version:\n-                if (part[:1] == \'*\') and (part not in _final_parts):\n+                if (part[:1] == "*") and (part not in _final_parts):\n                     return False\n             return True\n \n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n+    index = setuptools.package_index.PackageIndex(search_path=[setuptools_path])\n     if find_links:\n         index.add_find_links((find_links,))\n     req = pkg_resources.Requirement.parse(requirement)\n@@ -184,13 +204,13 @@ def _final_version(parsed_version):\n             best.sort()\n             version = best[-1].version\n if version:\n-    requirement = \'==\'.join((requirement, version))\n+    requirement = "==".join((requirement, version))\n cmd.append(requirement)\n \n import subprocess\n+\n if subprocess.call(cmd) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n+    raise Exception("Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n \n ######################################################################\n # Import and run buildout\n@@ -199,12 +219,12 @@ def _final_version(parsed_version):\n ws.require(requirement)\n import zc.buildout.buildout\n \n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n+if not [a for a in args if "=" not in a]:\n+    args.append("bootstrap")\n \n # if -c was provided, we push it back into args for buildout\' main function\n if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n+    args[0:0] = ["-c", options.config_file]\n \n zc.buildout.buildout.main(args)\n shutil.rmtree(tmpeggs)\ndiff --git a/docs/source/conf.py b/docs/source/conf.py\nindex e5898ae45..daf35b0be 100644\n--- a/docs/source/conf.py\n+++ b/docs/source/conf.py\n@@ -16,196 +16,199 @@\n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\n # documentation root, use os.path.abspath to make it absolute, like shown here.\n-#sys.path.insert(0, os.path.abspath(\'.\'))\n+# sys.path.insert(0, os.path.abspath(\'.\'))\n \n # -- General configuration -----------------------------------------------------\n \n # If your documentation needs a minimal Sphinx version, state it here.\n-#needs_sphinx = \'1.0\'\n+# needs_sphinx = \'1.0\'\n \n # Add any Sphinx extension module names here, as strings. They can be extensions\n # coming with Sphinx (named \'sphinx.ext.*\') or your custom ones.\n extensions = []\n \n # Add any paths that contain templates here, relative to this directory.\n-templates_path = [\'_templates\']\n+templates_path = ["_templates"]\n \n # The suffix of source filenames.\n-source_suffix = \'.rst\'\n+source_suffix = ".rst"\n \n # The encoding of source files.\n-#source_encoding = \'utf-8-sig\'\n+# source_encoding = \'utf-8-sig\'\n \n # The master toctree document.\n-master_doc = \'index\'\n+master_doc = "index"\n \n # General information about the project.\n-project = u\'plone.app.contenttypes\'\n-copyright = u\'2013, Plone Foundation\'\n+project = u"plone.app.contenttypes"\n+copyright = u"2013, Plone Foundation"\n \n # The version info for the project you\'re documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n # built documents.\n #\n # The short X.Y version.\n-version = \'1.0\'\n+version = "1.0"\n # The full version, including alpha/beta/rc tags.\n-release = \'1.0\'\n+release = "1.0"\n \n # The language for content autogenerated by Sphinx. Refer to documentation\n # for a list of supported languages.\n-#language = None\n+# language = None\n \n # There are two options for replacing |today|: either, you set today to some\n # non-false value, then it is used:\n-#today = \'\'\n+# today = \'\'\n # Else, today_fmt is used as the format for a strftime call.\n-#today_fmt = \'%B %d, %Y\'\n+# today_fmt = \'%B %d, %Y\'\n \n # List of patterns, relative to source directory, that match files and\n # directories to ignore when looking for source files.\n exclude_patterns = []\n \n # The reST default role (used for this markup: `text`) to use for all documents.\n-#default_role = None\n+# default_role = None\n \n # If true, \'()\' will be appended to :func: etc. cross-reference text.\n-#add_function_parentheses = True\n+# add_function_parentheses = True\n \n # If true, the current module name will be prepended to all description\n # unit titles (such as .. function::).\n-#add_module_names = True\n+# add_module_names = True\n \n # If true, sectionauthor and moduleauthor directives will be shown in the\n # output. They are ignored by default.\n-#show_authors = False\n+# show_authors = False\n \n # The name of the Pygments (syntax highlighting) style to use.\n-pygments_style = \'sphinx\'\n+pygments_style = "sphinx"\n \n # A list of ignored prefixes for module index sorting.\n-#modindex_common_prefix = []\n+# modindex_common_prefix = []\n \n \n # -- Options for HTML output ---------------------------------------------------\n \n # The theme to use for HTML and HTML Help pages.  See the documentation for\n # a list of builtin themes.\n-html_theme = \'default\'\n+html_theme = "default"\n \n # Theme options are theme-specific and customize the look and feel of a theme\n # further.  For a list of options available for each theme, see the\n # documentation.\n-#html_theme_options = {}\n+# html_theme_options = {}\n \n # Add any paths that contain custom themes here, relative to this directory.\n-#html_theme_path = []\n+# html_theme_path = []\n \n # The name for this set of Sphinx documents.  If None, it defaults to\n # "<project> v<release> documentation".\n-#html_title = None\n+# html_title = None\n \n # A shorter title for the navigation bar.  Default is the same as html_title.\n-#html_short_title = None\n+# html_short_title = None\n \n # The name of an image file (relative to this directory) to place at the top\n # of the sidebar.\n-#html_logo = None\n+# html_logo = None\n \n # The name of an image file (within the static path) to use as favicon of the\n # docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n # pixels large.\n-#html_favicon = None\n+# html_favicon = None\n \n # Add any paths that contain custom static files (such as style sheets) here,\n # relative to this directory. They are copied after the builtin static files,\n # so a file named "default.css" will overwrite the builtin "default.css".\n-html_static_path = [\'_static\']\n+html_static_path = ["_static"]\n \n # If not \'\', a \'Last updated on:\' timestamp is inserted at every page bottom,\n # using the given strftime format.\n-#html_last_updated_fmt = \'%b %d, %Y\'\n+# html_last_updated_fmt = \'%b %d, %Y\'\n \n # If true, SmartyPants will be used to convert quotes and dashes to\n # typographically correct entities.\n-#html_use_smartypants = True\n+# html_use_smartypants = True\n \n # Custom sidebar templates, maps document names to template names.\n-#html_sidebars = {}\n+# html_sidebars = {}\n \n # Additional templates that should be rendered to pages, maps page names to\n # template names.\n-#html_additional_pages = {}\n+# html_additional_pages = {}\n \n # If false, no module index is generated.\n-#html_domain_indices = True\n+# html_domain_indices = True\n \n # If false, no index is generated.\n-#html_use_index = True\n+# html_use_index = True\n \n # If true, the index is split into individual pages for each letter.\n-#html_split_index = False\n+# html_split_index = False\n \n # If true, links to the reST sources are added to the pages.\n-#html_show_sourcelink = True\n+# html_show_sourcelink = True\n \n # If true, "Created using Sphinx" is shown in the HTML footer. Default is True.\n-#html_show_sphinx = True\n+# html_show_sphinx = True\n \n # If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.\n-#html_show_copyright = True\n+# html_show_copyright = True\n \n # If true, an OpenSearch description file will be output, and all pages will\n # contain a <link> tag referring to it.  The value of this option must be the\n # base URL from which the finished HTML is served.\n-#html_use_opensearch = \'\'\n+# html_use_opensearch = \'\'\n \n # This is the file name suffix for HTML files (e.g. ".xhtml").\n-#html_file_suffix = None\n+# html_file_suffix = None\n \n # Output file base name for HTML help builder.\n-htmlhelp_basename = \'ploneappcontenttypesdoc\'\n+htmlhelp_basename = "ploneappcontenttypesdoc"\n \n \n # -- Options for LaTeX output --------------------------------------------------\n \n latex_elements = {\n-# The paper size (\'letterpaper\' or \'a4paper\').\n-#\'papersize\': \'letterpaper\',\n-\n-# The font size (\'10pt\', \'11pt\' or \'12pt\').\n-#\'pointsize\': \'10pt\',\n-\n-# Additional stuff for the LaTeX preamble.\n-#\'preamble\': \'\',\n+    # The paper size (\'letterpaper\' or \'a4paper\').\n+    #\'papersize\': \'letterpaper\',\n+    # The font size (\'10pt\', \'11pt\' or \'12pt\').\n+    #\'pointsize\': \'10pt\',\n+    # Additional stuff for the LaTeX preamble.\n+    #\'preamble\': \'\',\n }\n \n # Grouping the document tree into LaTeX files. List of tuples\n # (source start file, target name, title, author, documentclass [howto/manual]).\n latex_documents = [\n-  (\'index\', \'ploneappcontenttypes.tex\', u\'plone.app.contenttypes Documentation\',\n-   u\'Plone Foundation\', \'manual\'),\n+    (\n+        "index",\n+        "ploneappcontenttypes.tex",\n+        u"plone.app.contenttypes Documentation",\n+        u"Plone Foundation",\n+        "manual",\n+    ),\n ]\n \n # The name of an image file (relative to this directory) to place at the top of\n # the title page.\n-#latex_logo = None\n+# latex_logo = None\n \n # For "manual" documents, if this is true, then toplevel headings are parts,\n # not chapters.\n-#latex_use_parts = False\n+# latex_use_parts = False\n \n # If true, show page references after internal links.\n-#latex_show_pagerefs = False\n+# latex_show_pagerefs = False\n \n # If true, show URL addresses after external links.\n-#latex_show_urls = False\n+# latex_show_urls = False\n \n # Documents to append as an appendix to all manuals.\n-#latex_appendices = []\n+# latex_appendices = []\n \n # If false, no module index is generated.\n-#latex_domain_indices = True\n+# latex_domain_indices = True\n \n \n # -- Options for manual page output --------------------------------------------\n@@ -213,12 +216,17 @@\n # One entry per manual page. List of tuples\n # (source start file, name, description, authors, manual section).\n man_pages = [\n-    (\'index\', \'ploneappcontenttypes\', u\'plone.app.contenttypes Documentation\',\n-     [u\'Plone Foundation\'], 1)\n+    (\n+        "index",\n+        "ploneappcontenttypes",\n+        u"plone.app.contenttypes Documentation",\n+        [u"Plone Foundation"],\n+        1,\n+    )\n ]\n \n # If true, show URL addresses after external links.\n-#man_show_urls = False\n+# man_show_urls = False\n \n \n # -- Options for Texinfo output ------------------------------------------------\n@@ -227,16 +235,22 @@\n # (source start file, target name, title, author,\n #  dir menu entry, description, category)\n texinfo_documents = [\n-  (\'index\', \'ploneappcontenttypes\', u\'plone.app.contenttypes Documentation\',\n-   u\'Plone Foundation\', \'ploneappcontenttypes\', \'One line description of project.\',\n-   \'Miscellaneous\'),\n+    (\n+        "index",\n+        "ploneappcontenttypes",\n+        u"plone.app.contenttypes Documentation",\n+        u"Plone Foundation",\n+        "ploneappcontenttypes",\n+        "One line description of project.",\n+        "Miscellaneous",\n+    ),\n ]\n \n # Documents to append as an appendix to all manuals.\n-#texinfo_appendices = []\n+# texinfo_appendices = []\n \n # If false, no module index is generated.\n-#texinfo_domain_indices = True\n+# texinfo_domain_indices = True\n \n # How to display URL addresses: \'footnote\', \'no\', or \'inline\'.\n-#texinfo_show_urls = \'footnote\'\n+# texinfo_show_urls = \'footnote\'\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 076cb05a0..6a3c1c079 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,7 +1,8 @@\n # -*- coding: utf-8 -*-\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:  # pragma: no cover\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 076cb05a0..6a3c1c079 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,7 +1,8 @@\n # -*- coding: utf-8 -*-\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:  # pragma: no cover\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/app/contenttypes/__init__.py b/plone/app/contenttypes/__init__.py\nindex de99613fe..7ce837e9d 100644\n--- a/plone/app/contenttypes/__init__.py\n+++ b/plone/app/contenttypes/__init__.py\n@@ -6,4 +6,4 @@\n \n permissions  # pyflakes\n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\ndiff --git a/plone/app/contenttypes/behaviors/collection.py b/plone/app/contenttypes/behaviors/collection.py\nindex 1d1f2d500..8ac21efcf 100644\n--- a/plone/app/contenttypes/behaviors/collection.py\n+++ b/plone/app/contenttypes/behaviors/collection.py\n@@ -6,7 +6,9 @@\n from plone.dexterity.interfaces import IDexterityContent\n from plone.supermodel import model\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.browser.syndication.adapters import CollectionFeed as BaseCollectionFeed  # noqa\n+from Products.CMFPlone.browser.syndication.adapters import (\n+    CollectionFeed as BaseCollectionFeed,\n+)  # noqa\n from Products.CMFPlone.interfaces.syndication import IFeed\n from Products.CMFPlone.interfaces.syndication import ISyndicatable\n from zope import schema\n@@ -21,13 +23,13 @@\n \n deprecated(\n     "Import from plone.app.vocabularies.metadatafields instead (this compatibility layer will be removed in Plone 6)",\n-    MetaDataFieldsVocabulary=\'plone.app.vocabularies.metadatafields:MetaDataFieldsVocabulary\',\n+    MetaDataFieldsVocabulary="plone.app.vocabularies.metadatafields:MetaDataFieldsVocabulary",\n )\n \n \n deprecated(\n     "Import from plone.app.vocabularies.metadatafields instead (this compatibility layer will be removed in Plone 6)",\n-    MetaDataFieldsVocabularyFactory=\'plone.app.vocabularies.metadatafields:MetaDataFieldsVocabularyFactory\',\n+    MetaDataFieldsVocabularyFactory="plone.app.vocabularies.metadatafields:MetaDataFieldsVocabularyFactory",\n )\n \n \n@@ -35,76 +37,84 @@\n class ICollection(model.Schema):\n \n     query = schema.List(\n-        title=_(u\'Search terms\'),\n-        description=_(u\'Define the search terms for the items you want \'\n-                      u\'to list by choosing what to match on. \'\n-                      u\'The list of results will be dynamically updated\'),\n-        value_type=schema.Dict(value_type=schema.Field(),\n-                               key_type=schema.TextLine()),\n+        title=_(u"Search terms"),\n+        description=_(\n+            u"Define the search terms for the items you want "\n+            u"to list by choosing what to match on. "\n+            u"The list of results will be dynamically updated"\n+        ),\n+        value_type=schema.Dict(value_type=schema.Field(), key_type=schema.TextLine()),\n         required=False,\n-        missing_value=\'\'\n+        missing_value="",\n     )\n-    form.widget(\'query\', QueryStringFieldWidget)\n+    form.widget("query", QueryStringFieldWidget)\n \n     sort_on = schema.TextLine(\n-        title=_(u\'label_sort_on\', default=u\'Sort on\'),\n-        description=_(u\'Sort the collection on this index\'),\n+        title=_(u"label_sort_on", default=u"Sort on"),\n+        description=_(u"Sort the collection on this index"),\n         required=False,\n     )\n \n     sort_reversed = schema.Bool(\n-        title=_(u\'label_sort_reversed\', default=u\'Reversed order\'),\n-        description=_(u\'Sort the results in reversed order\'),\n+        title=_(u"label_sort_reversed", default=u"Reversed order"),\n+        description=_(u"Sort the results in reversed order"),\n         required=False,\n     )\n \n     limit = schema.Int(\n-        title=_(u\'Limit\'),\n-        description=_(u\'Limit Search Results\'),\n+        title=_(u"Limit"),\n+        description=_(u"Limit Search Results"),\n         required=False,\n         default=1000,\n         min=1,\n     )\n \n     item_count = schema.Int(\n-        title=_(u\'label_item_count\', default=u\'Item count\'),\n-        description=_(u\'Number of items that will show up in one batch.\'),\n+        title=_(u"label_item_count", default=u"Item count"),\n+        description=_(u"Number of items that will show up in one batch."),\n         required=False,\n         default=30,\n         min=1,\n     )\n \n     customViewFields = schema.List(\n-        title=_(u\'Table Columns\'),\n-        description=_(u"Select which fields to display when "\n-                      u"\'Tabular view\' is selected in the display menu."),\n-        default=[\'Title\', \'Creator\', \'Type\', \'ModificationDate\'],\n-        value_type=schema.Choice(\n-            vocabulary=\'plone.app.vocabularies.MetadataFields\'),\n+        title=_(u"Table Columns"),\n+        description=_(\n+            u"Select which fields to display when "\n+            u"\'Tabular view\' is selected in the display menu."\n+        ),\n+        default=["Title", "Creator", "Type", "ModificationDate"],\n+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.MetadataFields"),\n         required=False,\n     )\n \n \n class ISyndicatableCollection(ISyndicatable):\n-    """Marker interface for syndicatable collections.\n-    """\n+    """Marker interface for syndicatable collections."""\n \n \n @implementer(ICollection)\n @adapter(IDexterityContent)\n class Collection(object):\n-\n     def __init__(self, context):\n         self.context = context\n \n-    def results(self, batch=True, b_start=0, b_size=None,\n-                sort_on=None, limit=None, brains=False,\n-                custom_query=None):\n+    def results(\n+        self,\n+        batch=True,\n+        b_start=0,\n+        b_size=None,\n+        sort_on=None,\n+        limit=None,\n+        brains=False,\n+        custom_query=None,\n+    ):\n         if custom_query is None:\n             custom_query = {}\n-        querybuilder = getMultiAdapter((self.context, self.context.REQUEST),\n-                                       name=\'querybuilderresults\')\n-        sort_order = \'reverse\' if self.sort_reversed else \'ascending\'\n+        querybuilder = getMultiAdapter(\n+            (self.context, self.context.REQUEST), name="querybuilderresults"\n+        )\n+        sort_order = "reverse" if self.sort_reversed else "ascending"\n         if not b_size:\n             b_size = self.item_count\n         if not sort_on:\n@@ -112,9 +122,15 @@ def results(self, batch=True, b_start=0, b_size=None,\n         if not limit:\n             limit = self.limit\n         return querybuilder(\n-            query=self.query, batch=batch, b_start=b_start, b_size=b_size,\n-            sort_on=sort_on, sort_order=sort_order,\n-            limit=limit, brains=brains, custom_query=custom_query\n+            query=self.query,\n+            batch=batch,\n+            b_start=b_start,\n+            b_size=b_size,\n+            sort_on=sort_on,\n+            sort_order=sort_order,\n+            limit=limit,\n+            brains=brains,\n+            custom_query=custom_query,\n         )\n \n     def selectedViewFields(self):\n@@ -125,8 +141,9 @@ def selectedViewFields(self):\n \n         """\n         _mapping = {}\n-        vocab = getUtility(IVocabularyFactory,\n-                           name=\'plone.app.vocabularies.MetadataFields\')\n+        vocab = getUtility(\n+            IVocabularyFactory, name="plone.app.vocabularies.MetadataFields"\n+        )\n         for field in vocab(self.context):\n             _mapping[field.value] = (field.value, field.title)\n         ret = [_mapping[field] for field in self.customViewFields]\n@@ -138,7 +155,7 @@ def _set_sort_reversed(self, value):\n         self.context.sort_reversed = value\n \n     def _get_sort_reversed(self):\n-        return getattr(self.context, \'sort_reversed\', None)\n+        return getattr(self.context, "sort_reversed", None)\n \n     sort_reversed = property(_get_sort_reversed, _set_sort_reversed)\n \n@@ -146,7 +163,7 @@ def _set_item_count(self, value):\n         self.context.item_count = value\n \n     def _get_item_count(self):\n-        return getattr(self.context, \'item_count\', 30)\n+        return getattr(self.context, "item_count", 30)\n \n     item_count = property(_get_item_count, _set_item_count)\n \n@@ -154,7 +171,7 @@ def _set_sort_on(self, value):\n         self.context.sort_on = value\n \n     def _get_sort_on(self):\n-        return getattr(self.context, \'sort_on\', None)\n+        return getattr(self.context, "sort_on", None)\n \n     sort_on = property(_get_sort_on, _set_sort_on)\n \n@@ -162,7 +179,7 @@ def _set_limit(self, value):\n         self.context.limit = value\n \n     def _get_limit(self):\n-        return getattr(self.context, \'limit\', 1000)\n+        return getattr(self.context, "limit", 1000)\n \n     limit = property(_get_limit, _set_limit)\n \n@@ -170,7 +187,7 @@ def _set_query(self, value):\n         self.context.query = value\n \n     def _get_query(self):\n-        return getattr(self.context, \'query\', None)\n+        return getattr(self.context, "query", None)\n \n     query = property(_get_query, _set_query)\n \n@@ -180,13 +197,12 @@ def _set_customViewFields(self, value):\n     def _get_customViewFields(self):\n         # Note: in corner cases customViewFields might be None, but we\n         # always want a list.\n-        return getattr(self.context, \'customViewFields\', []) or []\n+        return getattr(self.context, "customViewFields", []) or []\n \n     customViewFields = property(_get_customViewFields, _set_customViewFields)\n \n \n @implementer(IFeed)\n class CollectionFeed(BaseCollectionFeed):\n-\n     def _brains(self):\n-        return ICollection(self.context).results(batch=False)[:self.limit]\n+        return ICollection(self.context).results(batch=False)[: self.limit]\ndiff --git a/plone/app/contenttypes/behaviors/leadimage.py b/plone/app/contenttypes/behaviors/leadimage.py\nindex f7bebbddf..3c690fa9e 100644\n--- a/plone/app/contenttypes/behaviors/leadimage.py\n+++ b/plone/app/contenttypes/behaviors/leadimage.py\n@@ -19,14 +19,14 @@ class ILeadImage(Interface):\n class ILeadImageBehavior(model.Schema):\n \n     image = namedfile.NamedBlobImage(\n-        title=_(u\'label_leadimage\', default=u\'Lead Image\'),\n-        description=u\'\',\n+        title=_(u"label_leadimage", default=u"Lead Image"),\n+        description=u"",\n         required=False,\n     )\n \n     image_caption = schema.TextLine(\n-        title=_(u\'label_leadimage_caption\', default=u\'Lead Image Caption\'),\n-        description=u\'\',\n+        title=_(u"label_leadimage_caption", default=u"Lead Image Caption"),\n+        description=u"",\n         required=False,\n     )\n \n@@ -34,7 +34,6 @@ class ILeadImageBehavior(model.Schema):\n @implementer(ILeadImageBehavior)\n @adapter(IDexterityContent)\n class LeadImage(object):\n-\n     def __init__(self, context):\n         self.context = context\n \ndiff --git a/plone/app/contenttypes/behaviors/richtext.py b/plone/app/contenttypes/behaviors/richtext.py\nindex 9238c9b9b..36624f517 100644\n--- a/plone/app/contenttypes/behaviors/richtext.py\n+++ b/plone/app/contenttypes/behaviors/richtext.py\n@@ -23,25 +23,24 @@ class IRichText(Interface):\n class IRichTextBehavior(model.Schema):\n \n     text = RichTextField(\n-        title=_(u\'Text\'),\n-        description=u\'\',\n+        title=_(u"Text"),\n+        description=u"",\n         required=False,\n     )\n-    form.widget(\'text\', RichTextFieldWidget)\n-    model.primary(\'text\')\n+    form.widget("text", RichTextFieldWidget)\n+    model.primary("text")\n     searchable("text")\n \n \n @implementer(IRichTextBehavior)\n @adapter(IDexterityContent)\n class RichText(object):\n-\n     def __init__(self, context):\n         self.context = context\n \n     @property\n     def text(self):\n-        return getattr(aq_base(self.context), \'text\', \'\')\n+        return getattr(aq_base(self.context), "text", "")\n \n     @text.setter\n     def text(self, value):\ndiff --git a/plone/app/contenttypes/behaviors/tableofcontents.py b/plone/app/contenttypes/behaviors/tableofcontents.py\nindex 4179a248a..2bf826691 100644\n--- a/plone/app/contenttypes/behaviors/tableofcontents.py\n+++ b/plone/app/contenttypes/behaviors/tableofcontents.py\n@@ -6,22 +6,20 @@\n from zope.interface import provider\n \n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\n \n \n @provider(IFormFieldProvider)\n class ITableOfContents(model.Schema):\n \n-    model.fieldset(\'settings\', label=_(u\'Settings\'),\n-                   fields=[\'table_of_contents\'])\n+    model.fieldset("settings", label=_(u"Settings"), fields=["table_of_contents"])\n \n     table_of_contents = schema.Bool(\n-        title=_(\n-            u\'help_enable_table_of_contents\',\n-            default=u\'Table of contents\'),\n+        title=_(u"help_enable_table_of_contents", default=u"Table of contents"),\n         description=_(\n-            u\'help_enable_table_of_contents_description\',\n-            default=u\'If selected, this will show a table of contents\'\n-                    u\' at the top of the page.\'),\n+            u"help_enable_table_of_contents_description",\n+            default=u"If selected, this will show a table of contents"\n+            u" at the top of the page.",\n+        ),\n         required=False,\n     )\ndiff --git a/plone/app/contenttypes/behaviors/thumb_icon.py b/plone/app/contenttypes/behaviors/thumb_icon.py\nindex b63e4e8ea..426bd7905 100644\n--- a/plone/app/contenttypes/behaviors/thumb_icon.py\n+++ b/plone/app/contenttypes/behaviors/thumb_icon.py\n@@ -13,19 +13,19 @@\n class IThumbIconHandling(model.Schema):\n \n     model.fieldset(\n-        \'settings\',\n-        label=_(u\'Settings\'),\n+        "settings",\n+        label=_(u"Settings"),\n         fields=[\n-            \'thumb_scale_list\',\n-            \'thumb_scale_table\',\n-            \'thumb_scale_summary\',\n-            \'suppress_icons\',\n-            \'suppress_thumbs\'\n-        ]\n+            "thumb_scale_list",\n+            "thumb_scale_table",\n+            "thumb_scale_summary",\n+            "suppress_icons",\n+            "suppress_thumbs",\n+        ],\n     )\n \n     thumb_scale_list = schema.TextLine(\n-        title=_(u\'Override thumb scale for list view\'),\n+        title=_(u"Override thumb scale for list view"),\n         description=_(\n             u"Enter a valid scale name"\n             u" (see \'Image Handling\' control panel) to override"\n@@ -33,10 +33,11 @@ class IThumbIconHandling(model.Schema):\n             u" Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u\'\')\n+        default=u"",\n+    )\n \n     thumb_scale_table = schema.TextLine(\n-        title=_(u\'Override thumb scale for table view\'),\n+        title=_(u"Override thumb scale for table view"),\n         description=_(\n             u"Enter a valid scale name"\n             u" (see \'Image Handling\' control panel) to override"\n@@ -44,10 +45,11 @@ class IThumbIconHandling(model.Schema):\n             u" Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u\'\')\n+        default=u"",\n+    )\n \n     thumb_scale_summary = schema.TextLine(\n-        title=_(u\'Override thumb scale for summary view\'),\n+        title=_(u"Override thumb scale for summary view"),\n         description=_(\n             u"Enter a valid scale name"\n             u" (see \'Image Handling\' control panel) to override"\n@@ -55,41 +57,42 @@ class IThumbIconHandling(model.Schema):\n             u" Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u\'\')\n+        default=u"",\n+    )\n \n     suppress_icons = schema.Bool(\n-        title=_(u\'Suppress icons in list, table or summary view\'),\n-        description=_(u\'\'),\n+        title=_(u"Suppress icons in list, table or summary view"),\n+        description=_(u""),\n         required=False,\n         default=False,\n     )\n \n     suppress_thumbs = schema.Bool(\n-        title=_(u\'Suppress thumbs in list, table or summary view\'),\n+        title=_(u"Suppress thumbs in list, table or summary view"),\n         required=False,\n         default=False,\n     )\n \n     directives.omitted(\n-        \'thumb_scale_list\',\n-        \'thumb_scale_table\',\n-        \'thumb_scale_summary\',\n-        \'suppress_icons\',\n-        \'suppress_thumbs\'\n+        "thumb_scale_list",\n+        "thumb_scale_table",\n+        "thumb_scale_summary",\n+        "suppress_icons",\n+        "suppress_thumbs",\n     )\n     directives.no_omit(\n         IEditForm,\n-        \'thumb_scale_list\',\n-        \'thumb_scale_table\',\n-        \'thumb_scale_summary\',\n-        \'suppress_icons\',\n-        \'suppress_thumbs\'\n+        "thumb_scale_list",\n+        "thumb_scale_table",\n+        "thumb_scale_summary",\n+        "suppress_icons",\n+        "suppress_thumbs",\n     )\n     directives.no_omit(\n         IAddForm,\n-        \'thumb_scale_list\',\n-        \'thumb_scale_table\',\n-        \'thumb_scale_summary\',\n-        \'suppress_icons\',\n-        \'suppress_thumbs\'\n+        "thumb_scale_list",\n+        "thumb_scale_table",\n+        "thumb_scale_summary",\n+        "suppress_icons",\n+        "suppress_thumbs",\n     )\ndiff --git a/plone/app/contenttypes/behaviors/viewlets.py b/plone/app/contenttypes/behaviors/viewlets.py\nindex acc66efcb..101cd81f3 100644\n--- a/plone/app/contenttypes/behaviors/viewlets.py\n+++ b/plone/app/contenttypes/behaviors/viewlets.py\n@@ -4,7 +4,7 @@\n \n \n class LeadImageViewlet(ViewletBase):\n-    """ A simple viewlet which renders leadimage """\n+    """A simple viewlet which renders leadimage"""\n \n     def update(self):\n         self.context = ILeadImage(self.context)\ndiff --git a/plone/app/contenttypes/browser/collection.py b/plone/app/contenttypes/browser/collection.py\nindex e75252c2f..9cff4b039 100644\n--- a/plone/app/contenttypes/browser/collection.py\n+++ b/plone/app/contenttypes/browser/collection.py\n@@ -10,14 +10,13 @@\n \n \n class CollectionView(FolderView):\n-\n     @property\n     def collection_behavior(self):\n         return ICollection(aq_inner(self.context))\n \n     @property\n     def b_size(self):\n-        return getattr(self, \'_b_size\', self.collection_behavior.item_count)\n+        return getattr(self, "_b_size", self.collection_behavior.item_count)\n \n     def results(self, **kwargs):\n         """Return a content listing based result set with results from the\n@@ -32,12 +31,12 @@ def results(self, **kwargs):\n                 sequence.\n         """\n         # Extra filter\n-        contentFilter = dict(self.request.get(\'contentFilter\', {}))\n-        contentFilter.update(kwargs.get(\'contentFilter\', {}))\n-        kwargs.setdefault(\'custom_query\', contentFilter)\n-        kwargs.setdefault(\'batch\', True)\n-        kwargs.setdefault(\'b_size\', self.b_size)\n-        kwargs.setdefault(\'b_start\', self.b_start)\n+        contentFilter = dict(self.request.get("contentFilter", {}))\n+        contentFilter.update(kwargs.get("contentFilter", {}))\n+        kwargs.setdefault("custom_query", contentFilter)\n+        kwargs.setdefault("batch", True)\n+        kwargs.setdefault("b_size", self.b_size)\n+        kwargs.setdefault("b_start", self.b_start)\n \n         results = self.collection_behavior.results(**kwargs)\n         return results\n@@ -49,8 +48,7 @@ def batch(self):\n     @property\n     @memoize\n     def _album_results(self):\n-        """Get results to display an album with subalbums.\n-        """\n+        """Get results to display an album with subalbums."""\n         results = self.results()\n         images = []\n         folders = []\n@@ -59,26 +57,23 @@ def _album_results(self):\n             ob = it.getObject()\n             if IFolder.providedBy(ob):\n                 folders.append(it)\n-            elif IImage.providedBy(ob) or \\\n-                 ILeadImage.providedBy(ob):\n+            elif IImage.providedBy(ob) or ILeadImage.providedBy(ob):\n                 images.append(it)\n-        return {\'images\': images, \'folders\': folders}\n+        return {"images": images, "folders": folders}\n \n     @property\n     def album_images(self):\n-        """Get all images within this collection.\n-        """\n-        return self._album_results[\'images\']\n+        """Get all images within this collection."""\n+        return self._album_results["images"]\n \n     @property\n     def album_folders(self):\n-        """Get all folders within this collection.\n-        """\n-        return self._album_results[\'folders\']\n+        """Get all folders within this collection."""\n+        return self._album_results["folders"]\n \n     def tabular_fields(self):\n         """Return a list of all metadata fields from the catalog that were\n-           selected.\n+        selected.\n         """\n         context = aq_inner(self.context)\n         wrapped = ICollection(context)\n@@ -88,7 +83,4 @@ def tabular_fields(self):\n \n     @property\n     def no_items_message(self):\n-        return _(\n-            \'description_no_results_found\',\n-            default=u\'No results were found.\'\n-        )\n+        return _("description_no_results_found", default=u"No results were found.")\ndiff --git a/plone/app/contenttypes/browser/file.py b/plone/app/contenttypes/browser/file.py\nindex 7521938af..9122c2af8 100644\n--- a/plone/app/contenttypes/browser/file.py\n+++ b/plone/app/contenttypes/browser/file.py\n@@ -4,15 +4,15 @@\n \n import re\n \n-class FileView(Utils):\n \n+class FileView(Utils):\n     def is_videotype(self):\n         ct = self.context.file.contentType\n-        return \'video/\' in ct\n+        return "video/" in ct\n \n     def is_audiotype(self):\n         ct = self.context.file.contentType\n-        return \'audio/\' in ct\n+        return "audio/" in ct\n \n     def human_readable_size(self):\n         return human_readable_size(self.context.file.getSize())\ndiff --git a/plone/app/contenttypes/browser/full_view.py b/plone/app/contenttypes/browser/full_view.py\nindex a5035ddba..cf0559cd1 100644\n--- a/plone/app/contenttypes/browser/full_view.py\n+++ b/plone/app/contenttypes/browser/full_view.py\n@@ -6,7 +6,6 @@\n \n \n class FullViewItem(BrowserView):\n-\n     @property\n     def default_view(self):\n         item_layout = self.context.getLayout()\n@@ -25,9 +24,8 @@ def item_macros(self):\n     @property\n     def item_url(self):\n         registry = getUtility(IRegistry)\n-        use_view_action = registry.get(\n-            \'plone.types_use_view_action_in_listings\', [])\n+        use_view_action = registry.get("plone.types_use_view_action_in_listings", [])\n         url = self.context.absolute_url()\n         if self.context.portal_type in use_view_action:\n-            url = u\'{0}/view\'.format(url)\n+            url = u"{0}/view".format(url)\n         return url\ndiff --git a/plone/app/contenttypes/browser/migration.py b/plone/app/contenttypes/browser/migration.py\nindex 230df9822..f410cef3e 100644\n--- a/plone/app/contenttypes/browser/migration.py\n+++ b/plone/app/contenttypes/browser/migration.py\n@@ -39,15 +39,15 @@\n logger = logging.getLogger(__name__)\n \n \n-\n @implementer(IVocabularyFactory)\n class ChangedBaseClasses(object):\n-\n     def __call__(self, context):\n         """Return a vocabulary with all changed base classes."""\n         terms = []\n         for class_name, data in changed_base_classes(context).items():\n-            title = "{} (\xe2\x9e\xa1 {}) - ({} items)".format(data["old"], data["new"], data["amount"])\n+            title = "{} (\xe2\x9e\xa1 {}) - ({} items)".format(\n+                data["old"], data["new"], data["amount"]\n+            )\n             term = SimpleVocabulary.createTerm(class_name, class_name, title)\n             terms.append(term)\n         return SimpleVocabulary(terms)\n@@ -56,11 +56,11 @@ def __call__(self, context):\n class IBaseClassMigratorForm(Interface):\n \n     changed_base_classes = schema.List(\n-        title=u\'Changed base classes (old class, new class and number of items)\',\n-        description=u\'Select changed base classes you want to migrate. \'\n-            \'If the new types are folderish that change is also applied.\',\n+        title=u"Changed base classes (old class, new class and number of items)",\n+        description=u"Select changed base classes you want to migrate. "\n+        "If the new types are folderish that change is also applied.",\n         value_type=schema.Choice(\n-            vocabulary=\'plone.app.contenttypes.migration.changed_base_classes\',\n+            vocabulary="plone.app.contenttypes.migration.changed_base_classes",\n         ),\n         default=[],\n         required=True,\n@@ -69,11 +69,13 @@ class IBaseClassMigratorForm(Interface):\n \n class BaseClassMigratorForm(form.Form):\n \n-    label = _("heading_class_migrator",\n-        default="Update base-classes for content with changed classes")\n+    label = _(\n+        "heading_class_migrator",\n+        default="Update base-classes for content with changed classes",\n+    )\n \n     fields = field.Fields(IBaseClassMigratorForm)\n-    fields[\'changed_base_classes\'].widgetFactory = CheckBoxFieldWidget\n+    fields["changed_base_classes"].widgetFactory = CheckBoxFieldWidget\n     ignoreContext = True\n     enableCSRFProtection = True\n \n@@ -82,23 +84,24 @@ def updateWidgets(self):\n         changed_base_classes = self.widgets["changed_base_classes"]\n         if not changed_base_classes.terms.terms.by_value:\n             IStatusMessage(self.request).addStatusMessage(\n-                u\'No types with changed classes to migrate!\', type=\'warning\')\n+                u"No types with changed classes to migrate!", type="warning"\n+            )\n             return\n \n-    @button.buttonAndHandler(u\'Update\', name=\'update\')\n+    @button.buttonAndHandler(u"Update", name="update")\n     def handle_migrate(self, action):\n         data, errors = self.extractData()\n \n         if errors:\n             return\n \n-        changed_base_classes = data.get(\'changed_base_classes\', [])\n+        changed_base_classes = data.get("changed_base_classes", [])\n         messages = IStatusMessage(self.request)\n         if not changed_base_classes:\n-            messages.addStatusMessage(u\'No types were selected\', type=\'warning\')\n+            messages.addStatusMessage(u"No types were selected", type="warning")\n             return\n \n-        catalog = getToolByName(self.context, \'portal_catalog\')\n+        catalog = getToolByName(self.context, "portal_catalog")\n         migrated = []\n         not_migrated = []\n         for brain in catalog():\n@@ -108,21 +111,20 @@ def handle_migrate(self, action):\n                 continue\n             old_class_name = get_old_class_name_string(obj)\n             if old_class_name in changed_base_classes:\n-                if migrate_base_class_to_new_class(\n-                        obj, migrate_to_folderish=True):\n+                if migrate_base_class_to_new_class(obj, migrate_to_folderish=True):\n                     migrated.append(obj)\n                 else:\n                     not_migrated.append(obj)\n \n-        info_message_template = \'{0} objects were migrated.\'\n-        warn_message_template = \'{0} objects were not migrated.\'\n+        info_message_template = "{0} objects were migrated."\n+        warn_message_template = "{0} objects were not migrated."\n         if migrated:\n             msg = info_message_template.format(len(migrated))\n-            messages.addStatusMessage(msg, type=\'info\')\n+            messages.addStatusMessage(msg, type="info")\n         if not_migrated:\n             msg = warn_message_template.format(len(not_migrated))\n-            messages.addStatusMessage(msg, type=\'warning\')\n-        self.request.response.redirect(self.request[\'ACTUAL_URL\'])\n+            messages.addStatusMessage(msg, type="warning")\n+        self.request.response.redirect(self.request["ACTUAL_URL"])\n \n \n BaseClassMigrator = wrap_form(\ndiff --git a/plone/app/contenttypes/browser/utils.py b/plone/app/contenttypes/browser/utils.py\nindex 6448f0872..940f16a36 100644\n--- a/plone/app/contenttypes/browser/utils.py\n+++ b/plone/app/contenttypes/browser/utils.py\n@@ -13,13 +13,10 @@\n \n \n class IUtils(Interface):\n-    """\n-    """\n+    """ """\n \n     def getMimeTypeIcon(content_file):\n-        """\n-\n-        """\n+        """ """\n \n \n @implementer(IUtils)\ndiff --git a/plone/app/contenttypes/content.py b/plone/app/contenttypes/content.py\nindex d4f8537be..c408c57d1 100644\n--- a/plone/app/contenttypes/content.py\n+++ b/plone/app/contenttypes/content.py\n@@ -25,8 +25,8 @@\n \n @implementer(ICollection)\n class Collection(Item):\n-    """Convenience subclass for ``Collection`` portal type\n-    """\n+    """Convenience subclass for ``Collection`` portal type"""\n+\n     security = ClassSecurityInfo()\n \n     # BBB\n@@ -42,10 +42,12 @@ def listMetaDataFields(self, exclude=True):\n     @security.protected(permissions.View)\n     def selectedViewFields(self):\n         """Returns a list of all metadata fields from the catalog that were\n-           selected.\n+        selected.\n         """\n-        from plone.app.contenttypes.behaviors.collection import \\\n-            ICollection as ICollection_behavior\n+        from plone.app.contenttypes.behaviors.collection import (\n+            ICollection as ICollection_behavior,\n+        )\n+\n         return ICollection_behavior(self).selectedViewFields()\n \n     @security.protected(permissions.ModifyPortalContent)\n@@ -60,7 +62,7 @@ def getQuery(self):\n         """\n         return self.query\n \n-    @deprecation.deprecate(\'getRawQuery() is deprecated; use getQuery().\')\n+    @deprecation.deprecate("getRawQuery() is deprecated; use getQuery().")\n     @security.protected(permissions.View)\n     def getRawQuery(self):\n         return self.getQuery()\n@@ -75,29 +77,34 @@ def setSort_reversed(self, sort_reversed):\n \n     @security.protected(permissions.View)\n     def queryCatalog(self, batch=True, b_start=0, b_size=30, sort_on=None):\n-        from plone.app.contenttypes.behaviors.collection import \\\n-            ICollection as ICollection_behavior\n+        from plone.app.contenttypes.behaviors.collection import (\n+            ICollection as ICollection_behavior,\n+        )\n+\n         return ICollection_behavior(self).results(\n-            batch, b_start, b_size, sort_on=sort_on)\n+            batch, b_start, b_size, sort_on=sort_on\n+        )\n \n     @security.protected(permissions.View)\n     def results(self, **kwargs):\n-        from plone.app.contenttypes.behaviors.collection import \\\n-            ICollection as ICollection_behavior\n+        from plone.app.contenttypes.behaviors.collection import (\n+            ICollection as ICollection_behavior,\n+        )\n+\n         return ICollection_behavior(self).results(**kwargs)\n \n \n @implementer(IDocument)\n class Document(Item):\n-    """Convenience subclass for ``Document`` portal type\n-    """\n+    """Convenience subclass for ``Document`` portal type"""\n+\n     security = ClassSecurityInfo()\n \n     @security.protected(permissions.View)\n     def Format(self):\n-        \'\'\' Provide a proper accessor for the format attribute\n+        """Provide a proper accessor for the format attribute\n         See https://github.com/plone/Products.CMFPlone/issues/2540\n-        \'\'\'\n+        """\n         format = self.format\n         if six.PY2 and isinstance(format, six.text_type):\n             format = self.format.encode()\n@@ -106,8 +113,8 @@ def Format(self):\n \n @implementer(IFile)\n class File(Item):\n-    """Convenience subclass for ``File`` portal type\n-    """\n+    """Convenience subclass for ``File`` portal type"""\n+\n     security = ClassSecurityInfo()\n \n     @security.protected(permissions.ModifyPortalContent)\n@@ -116,16 +123,17 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n         request = REQUEST if REQUEST is not None else self.REQUEST\n         response = RESPONSE if RESPONSE is not None else request.response\n \n-        infile = request.get(\'BODYFILE\', None)\n+        infile = request.get("BODYFILE", None)\n         first_line = infile.readline()\n         infile.seek(0)\n         if not headerRE.match(safe_text(first_line)):\n             self.dav__init(request, response)\n             self.dav__simpleifhandler(request, response, refresh=1)\n \n-            filename = request[\'PATH_INFO\'].split(\'/\')[-1]\n+            filename = request["PATH_INFO"].split("/")[-1]\n             self.file = NamedBlobFile(\n-                data=infile.read(), filename=six.text_type(filename))\n+                data=infile.read(), filename=six.text_type(filename)\n+            )\n \n             modified(self)\n             return response\n@@ -134,23 +142,22 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n \n     @security.protected(permissions.View)\n     def get_size(self):\n-        return getattr(self.file, \'size\', 0)\n+        return getattr(self.file, "size", 0)\n \n     @security.protected(permissions.View)\n     def content_type(self):\n-        return getattr(self.file, \'contentType\', None)\n+        return getattr(self.file, "contentType", None)\n \n \n @implementer(IFolder)\n class Folder(Container):\n-    """Convenience subclass for ``Folder`` portal type\n-    """\n+    """Convenience subclass for ``Folder`` portal type"""\n \n \n @implementer(IImage)\n class Image(Item):\n-    """Convenience subclass for ``Image`` portal type\n-    """\n+    """Convenience subclass for ``Image`` portal type"""\n+\n     security = ClassSecurityInfo()\n \n     @security.protected(permissions.ModifyPortalContent)\n@@ -159,17 +166,18 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n         request = REQUEST if REQUEST is not None else self.REQUEST\n         response = RESPONSE if RESPONSE is not None else request.response\n \n-        infile = request.get(\'BODYFILE\', None)\n+        infile = request.get("BODYFILE", None)\n         first_line = infile.readline()\n         infile.seek(0)\n         if not headerRE.match(safe_text(first_line)):\n             self.dav__init(request, response)\n             self.dav__simpleifhandler(request, response, refresh=1)\n \n-            infile = request.get(\'BODYFILE\', None)\n-            filename = request[\'PATH_INFO\'].split(\'/\')[-1]\n+            infile = request.get("BODYFILE", None)\n+            filename = request["PATH_INFO"].split("/")[-1]\n             self.image = NamedBlobImage(\n-                data=infile.read(), filename=six.text_type(filename))\n+                data=infile.read(), filename=six.text_type(filename)\n+            )\n \n             modified(self)\n             return response\n@@ -178,26 +186,23 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n \n     @security.protected(permissions.View)\n     def get_size(self):\n-        return getattr(self.image, \'size\', 0)\n+        return getattr(self.image, "size", 0)\n \n     @security.protected(permissions.View)\n     def content_type(self):\n-        return getattr(self.image, \'contentType\', None)\n+        return getattr(self.image, "contentType", None)\n \n \n @implementer(ILink)\n class Link(Item):\n-    """Convenience subclass for ``Link`` portal type\n-    """\n+    """Convenience subclass for ``Link`` portal type"""\n \n \n @implementer(INewsItem)\n class NewsItem(Item):\n-    """Convenience subclass for ``News Item`` portal type\n-    """\n+    """Convenience subclass for ``News Item`` portal type"""\n \n \n @implementer(IEvent)\n class Event(Item):\n-    """Convenience subclass for ``Event`` portal type\n-    """\n+    """Convenience subclass for ``Event`` portal type"""\ndiff --git a/plone/app/contenttypes/indexers.py b/plone/app/contenttypes/indexers.py\nindex a2ba27fb4..9140af950 100644\n--- a/plone/app/contenttypes/indexers.py\n+++ b/plone/app/contenttypes/indexers.py\n@@ -26,7 +26,7 @@\n \n logger = getLogger(__name__)\n \n-FALLBACK_CONTENTTYPE = \'application/octet-stream\'\n+FALLBACK_CONTENTTYPE = "application/octet-stream"\n \n \n def _unicode_save_string_concat(*args):\n@@ -34,50 +34,54 @@ def _unicode_save_string_concat(*args):\n     concats args with spaces between and returns utf-8 string, it does not\n     matter if input was text or bytes\n     """\n-    result = \'\'\n+    result = ""\n     for value in args:\n         if six.PY2:\n             if isinstance(value, six.text_type):\n-                value = value.encode(\'utf-8\', \'replace\')\n+                value = value.encode("utf-8", "replace")\n             if value:\n-                result = \' \'.join((result, value))\n+                result = " ".join((result, value))\n         else:\n             if isinstance(value, six.binary_type):\n                 value = safe_unicode(value)\n-            result = \' \'.join((result, value))\n+            result = " ".join((result, value))\n     return result\n \n \n def SearchableText(obj):\n-    text = u\'\'\n+    text = u""\n     richtext = IRichText(obj, None)\n     if richtext:\n         textvalue = richtext.text\n         if IRichTextValue.providedBy(textvalue):\n-            transforms = getToolByName(obj, \'portal_transforms\')\n+            transforms = getToolByName(obj, "portal_transforms")\n             # Before you think about switching raw/output\n             # or mimeType/outputMimeType, first read\n             # https://github.com/plone/Products.CMFPlone/issues/2066\n             raw = safe_unicode(textvalue.raw)\n             if six.PY2:\n-                raw = raw.encode(\'utf-8\', \'replace\')\n-            text = transforms.convertTo(\n-                \'text/plain\',\n-                raw,\n-                mimetype=textvalue.mimeType,\n-            ).getData().strip()\n-\n-    subject = u\' \'.join(\n-        [safe_unicode(s) for s in obj.Subject()]\n-    )\n+                raw = raw.encode("utf-8", "replace")\n+            text = (\n+                transforms.convertTo(\n+                    "text/plain",\n+                    raw,\n+                    mimetype=textvalue.mimeType,\n+                )\n+                .getData()\n+                .strip()\n+            )\n \n-    return u\' \'.join((\n-        safe_unicode(obj.id),\n-        safe_unicode(obj.title) or u\'\',\n-        safe_unicode(obj.description) or u\'\',\n-        safe_unicode(text),\n-        safe_unicode(subject),\n-    ))\n+    subject = u" ".join([safe_unicode(s) for s in obj.Subject()])\n+\n+    return u" ".join(\n+        (\n+            safe_unicode(obj.id),\n+            safe_unicode(obj.title) or u"",\n+            safe_unicode(obj.description) or u"",\n+            safe_unicode(text),\n+            safe_unicode(subject),\n+        )\n+    )\n \n \n @indexer(INewsItem)\n@@ -101,17 +105,15 @@ def SearchableText_file(obj):\n         primary_field = IPrimaryFieldInfo(obj)\n     except TypeError:\n         logger.warn(\n-            u\'Lookup of PrimaryField failed for {0} \'\n-            u\'If renaming or importing please reindex!\'.format(\n-                obj.absolute_url()\n-            )\n+            u"Lookup of PrimaryField failed for {0} "\n+            u"If renaming or importing please reindex!".format(obj.absolute_url())\n         )\n         return\n     if primary_field.value is None:\n         return SearchableText(obj)\n     mimetype = primary_field.value.contentType\n-    transforms = getToolByName(obj, \'portal_transforms\')\n-    if transforms._findPath(mimetype, \'text/plain\') is None:\n+    transforms = getToolByName(obj, "portal_transforms")\n+    if transforms._findPath(mimetype, "text/plain") is None:\n         # check if there is a valid transform available first\n         return SearchableText(obj)\n     value = primary_field.value.data\n@@ -119,13 +121,14 @@ def SearchableText_file(obj):\n         value = str(value)\n     filename = primary_field.value.filename\n     try:\n-        transformed_value = transforms.convertTo(\'text/plain\', value,\n-                                                 mimetype=mimetype,\n-                                                 filename=filename)\n+        transformed_value = transforms.convertTo(\n+            "text/plain", value, mimetype=mimetype, filename=filename\n+        )\n         if not transformed_value:\n             return SearchableText(obj)\n-        return _unicode_save_string_concat(SearchableText(obj),\n-                                           transformed_value.getData())\n+        return _unicode_save_string_concat(\n+            SearchableText(obj), transformed_value.getData()\n+        )\n     except MissingBinary:\n         return SearchableText(obj)\n     except (ConflictError, KeyboardInterrupt):\n@@ -133,7 +136,7 @@ def SearchableText_file(obj):\n     except Exception as msg:\n         logger.exception(\n             \'exception while trying to convert blob contents to "text/plain" \'\n-            \'for {0}. Error: {1}\'.format(obj, str(msg)),\n+            "for {0}. Error: {1}".format(obj, str(msg)),\n         )\n         return SearchableText(obj)\n \n@@ -162,8 +165,8 @@ def getObjSize_image(obj):\n         primary_field_info = IPrimaryFieldInfo(obj)\n     except TypeError:\n         logger.warn(\n-            u\'Lookup of PrimaryField failed for {0} If renaming or importing \'\n-            u\'please reindex!\'.format(obj.absolute_url())\n+            u"Lookup of PrimaryField failed for {0} If renaming or importing "\n+            u"please reindex!".format(obj.absolute_url())\n         )\n         return\n     return human_readable_size(primary_field_info.value.size)\n@@ -175,8 +178,8 @@ def getObjSize_file(obj):\n         primary_field_info = IPrimaryFieldInfo(obj)\n     except TypeError:\n         logger.warn(\n-            u\'Lookup of PrimaryField failed for {0} If renaming or importing \'\n-            u\'please reindex!\'.format(obj.absolute_url())\n+            u"Lookup of PrimaryField failed for {0} If renaming or importing "\n+            u"please reindex!".format(obj.absolute_url())\n         )\n         return\n     return human_readable_size(primary_field_info.value.size)\ndiff --git a/plone/app/contenttypes/interfaces.py b/plone/app/contenttypes/interfaces.py\nindex 73908f8b6..522a4943a 100644\n--- a/plone/app/contenttypes/interfaces.py\n+++ b/plone/app/contenttypes/interfaces.py\n@@ -13,40 +13,32 @@ class IPloneAppContenttypesLayer(Interface):\n \n \n class ICollection(Interface):\n-    """Explicit marker interface for Collection\n-    """\n+    """Explicit marker interface for Collection"""\n \n \n class IDocument(Interface):\n-    """Explicit marker interface for Document\n-    """\n+    """Explicit marker interface for Document"""\n \n \n class IFile(Interface):\n-    """Explicit marker interface for File\n-    """\n+    """Explicit marker interface for File"""\n \n \n class IFolder(Interface):\n-    """Explicit marker interface for Folder\n-    """\n+    """Explicit marker interface for Folder"""\n \n \n class IImage(Interface):\n-    """Explicit marker interface for Image\n-    """\n+    """Explicit marker interface for Image"""\n \n \n class ILink(Interface):\n-    """Explicit marker interface for Link\n-    """\n+    """Explicit marker interface for Link"""\n \n \n class INewsItem(Interface):\n-    """Explicit marker interface for News Item\n-    """\n+    """Explicit marker interface for News Item"""\n \n \n class IEvent(Interface):\n-    """Explicit marker interface for Event\n-    """\n+    """Explicit marker interface for Event"""\ndiff --git a/plone/app/contenttypes/permissions.py b/plone/app/contenttypes/permissions.py\nindex cacfbba0d..1d0300cc7 100644\n--- a/plone/app/contenttypes/permissions.py\n+++ b/plone/app/contenttypes/permissions.py\n@@ -3,23 +3,23 @@\n from AccessControl.SecurityInfo import ModuleSecurityInfo\n from plone.app.contenttypes.utils import DEFAULT_TYPES\n \n-security = ModuleSecurityInfo(\'plone.app.contenttypes\')\n+security = ModuleSecurityInfo("plone.app.contenttypes")\n \n-TYPE_ROLES = (\'Manager\', \'Site Administrator\', \'Owner\', \'Contributor\')\n+TYPE_ROLES = ("Manager", "Site Administrator", "Owner", "Contributor")\n \n perms = []\n \n for typename in DEFAULT_TYPES:\n-    permid = \'Add\' + typename\n-    permname = \'plone.app.contenttypes: Add \' + typename\n+    permid = "Add" + typename\n+    permname = "plone.app.contenttypes: Add " + typename\n     security.declarePublic(permid)\n     addPermission(permname, default_roles=TYPE_ROLES)\n \n-AddCollection = \'plone.app.contenttypes: Add Collection\'\n-AddDocument = \'plone.app.contenttypes: Add Document\'\n-AddEvent = \'plone.app.contenttypes: Add Event\'\n-AddFile = \'plone.app.contenttypes: Add File\'\n-AddFolder = \'plone.app.contenttypes: Add Folder\'\n-AddImage = \'plone.app.contenttypes: Add Image\'\n-AddLink = \'plone.app.contenttypes: Add Link\'\n-AddNewsItem = \'plone.app.contenttypes: Add News Item\'\n+AddCollection = "plone.app.contenttypes: Add Collection"\n+AddDocument = "plone.app.contenttypes: Add Document"\n+AddEvent = "plone.app.contenttypes: Add Event"\n+AddFile = "plone.app.contenttypes: Add File"\n+AddFolder = "plone.app.contenttypes: Add Folder"\n+AddImage = "plone.app.contenttypes: Add Image"\n+AddLink = "plone.app.contenttypes: Add Link"\n+AddNewsItem = "plone.app.contenttypes: Add News Item"\ndiff --git a/plone/app/contenttypes/setuphandlers.py b/plone/app/contenttypes/setuphandlers.py\nindex e8023156a..f47255c93 100644\n--- a/plone/app/contenttypes/setuphandlers.py\n+++ b/plone/app/contenttypes/setuphandlers.py\n@@ -29,34 +29,34 @@\n \n @implementer(INonInstallable)\n class HiddenProfiles(object):\n-\n     def getNonInstallableProfiles(self):\n         """\n         Prevents all profiles but \'plone-content\' from showing up in the\n         profile list when creating a Plone site.\n         """\n         return [\n-            u\'plone.app.contenttypes:default\',\n+            u"plone.app.contenttypes:default",\n         ]\n \n \n def _publish(content):\n     """Publish the object if it hasn\'t been published."""\n-    portal_workflow = getToolByName(getSite(), \'portal_workflow\')\n-    if portal_workflow.getInfoFor(content, \'review_state\') != \'published\':\n-        portal_workflow.doActionFor(content, \'publish\')\n+    portal_workflow = getToolByName(getSite(), "portal_workflow")\n+    if portal_workflow.getInfoFor(content, "review_state") != "published":\n+        portal_workflow.doActionFor(content, "publish")\n         return True\n     return False\n \n \n-def _translate(name, target_language, default=u\'\'):\n+def _translate(name, target_language, default=u""):\n     """Simple function to translate a string."""\n     result = None\n-    if target_language != \'en\':\n-        util = queryUtility(ITranslationDomain, \'plonefrontpage\')\n+    if target_language != "en":\n+        util = queryUtility(ITranslationDomain, "plonefrontpage")\n         if util is not None:\n-            result = util.translate(name, target_language=target_language,\n-                                    default=default)\n+            result = util.translate(\n+                name, target_language=target_language, default=default\n+            )\n     return result and result or default\n \n \n@@ -64,8 +64,8 @@ def addContentToContainer(container, object, checkConstraints=True):\n     """Copy of plone.dexterity.util.addContentToContainer.\n     Modified to check the existing Id on the object before paving over it.\n     """\n-    if not hasattr(aq_base(object), \'portal_type\'):\n-        raise ValueError(\'object must have its portal_type set\')\n+    if not hasattr(aq_base(object), "portal_type"):\n+        raise ValueError("object must have its portal_type set")\n \n     container = aq_inner(container)\n     if checkConstraints:\n@@ -73,16 +73,17 @@ def addContentToContainer(container, object, checkConstraints=True):\n \n         fti = getUtility(IDexterityFTI, name=object.portal_type)\n         if not fti.isConstructionAllowed(container):\n-            raise Unauthorized(\'Cannot create {0}\'.format(object.portal_type))\n+            raise Unauthorized("Cannot create {0}".format(object.portal_type))\n \n-        if container_fti is not None and \\\n-                not container_fti.allowType(object.portal_type):\n+        if container_fti is not None and not container_fti.allowType(\n+            object.portal_type\n+        ):\n             raise ValueError(\n-                \'Disallowed subobject type: {0}\'.format(object.portal_type)\n+                "Disallowed subobject type: {0}".format(object.portal_type)\n             )\n \n     chooser = INameChooser(container)\n-    if hasattr(object, \'id\') and chooser.checkName(object.id, object):\n+    if hasattr(object, "id") and chooser.checkName(object.id, object):\n         name = object.id\n     else:\n         name = INameChooser(container).chooseName(None, object)\n@@ -94,29 +95,29 @@ def addContentToContainer(container, object, checkConstraints=True):\n \n def _get_locales_info(portal):\n     reg = queryUtility(IRegistry, context=portal)\n-    language = reg[\'plone.default_language\']\n-    parts = (language.split(\'-\') + [None, None])[:3]\n+    language = reg["plone.default_language"]\n+    parts = (language.split("-") + [None, None])[:3]\n \n     try:\n         locale = locales.getLocale(*parts)\n \n         # If we get a territory, we enable the combined language codes\n         if locale.id.territory:\n-            return locale.id.language + \'_\' + locale.id.territory, True, locale\n+            return locale.id.language + "_" + locale.id.territory, True, locale\n         return locale.id.language, False, locale\n     except LoadLocaleError:\n         # default to *some* language so we don\'t error out\n-        return language, False, locales.getLocale(\'en\')\n+        return language, False, locales.getLocale("en")\n \n \n def _setup_calendar(portal, locale):\n     """Set the calendar\'s date system to reflect the default locale"""\n-    gregorian_calendar = locale.dates.calendars.get(u\'gregorian\', None)\n-    portal_calendar = getToolByName(portal, \'portal_calendar\', None)\n+    gregorian_calendar = locale.dates.calendars.get(u"gregorian", None)\n+    portal_calendar = getToolByName(portal, "portal_calendar", None)\n     if portal_calendar is not None:\n         first = 6\n         if gregorian_calendar is not None:\n-            first = gregorian_calendar.week.get(\'firstDay\', None)\n+            first = gregorian_calendar.week.get("firstDay", None)\n             # on the locale object we have: mon : 1 ... sun : 7\n             # on the calendar tool we have: mon : 0 ... sun : 6\n             if first is not None:\n@@ -125,7 +126,7 @@ def _setup_calendar(portal, locale):\n \n \n def _setup_visible_ids(portal, target_language, locale):\n-    portal_properties = getToolByName(portal, \'portal_properties\')\n+    portal_properties = getToolByName(portal, "portal_properties")\n     site_properties = portal_properties.site_properties\n \n     # See if we have a URL normalizer\n@@ -135,7 +136,7 @@ def _setup_visible_ids(portal, target_language, locale):\n \n     # If we get a script other than Latn we enable visible_ids\n     if locale.id.script is not None:\n-        if locale.id.script.lower() != \'latn\':\n+        if locale.id.script.lower() != "latn":\n             site_properties.visible_ids = True\n \n     # If we have a normalizer it is safe to disable the visible ids\n@@ -154,162 +155,169 @@ def create_frontpage(portal, target_language):\n     if portal.text:\n         # Do not overwrite existing content\n         return\n-    portal.title = _translate(\n-        u\'front-title\',\n-        target_language,\n-        u\'Welcome to Plone\'\n-    )\n+    portal.title = _translate(u"front-title", target_language, u"Welcome to Plone")\n     portal.description = _translate(\n-        u\'front-description\', target_language,\n-        u\'Congratulations! You have successfully installed Plone.\'\n+        u"front-description",\n+        target_language,\n+        u"Congratulations! You have successfully installed Plone.",\n     )\n     front_text = None\n-    if target_language != \'en\':\n-        util = queryUtility(ITranslationDomain, \'plonefrontpage\')\n+    if target_language != "en":\n+        util = queryUtility(ITranslationDomain, "plonefrontpage")\n         if util is not None:\n             translated_text = util.translate(\n-                u\'front-text\',\n-                target_language=target_language\n+                u"front-text", target_language=target_language\n             )\n-            if translated_text != u\'front-text\':\n+            if translated_text != u"front-text":\n                 front_text = translated_text\n-    request = getattr(portal, \'REQUEST\', None)\n+    request = getattr(portal, "REQUEST", None)\n     if front_text is None and request is not None:\n-        view = queryMultiAdapter(\n-            (portal, request),\n-            name=\'plone-frontpage-setup\'\n-        )\n+        view = queryMultiAdapter((portal, request), name="plone-frontpage-setup")\n         if view is not None:\n             front_text = bodyfinder(view.index()).strip()\n-    portal.text = RichTextValue(\n-        front_text,\n-        \'text/html\',\n-        \'text/x-html-safe\'\n-    )\n+    portal.text = RichTextValue(front_text, "text/html", "text/x-html-safe")\n     portal.reindexObject()\n \n \n def create_news_topic(portal, target_language):\n-    news_id = \'news\'\n+    news_id = "news"\n \n     if news_id not in portal.keys():\n-        title = _translate(u\'news-title\', target_language, u\'News\')\n-        description = _translate(u\'news-description\', target_language,\n-                                 u\'Site News\')\n+        title = _translate(u"news-title", target_language, u"News")\n+        description = _translate(u"news-description", target_language, u"Site News")\n         container = createContent(\n-            \'Folder\', id=news_id,\n+            "Folder",\n+            id=news_id,\n             title=title,\n             description=description,\n-            language=target_language.replace(\'_\', \'-\').lower())\n+            language=target_language.replace("_", "-").lower(),\n+        )\n         container = addContentToContainer(portal, container)\n-        _createObjectByType(\'Collection\', container,\n-                            id=\'aggregator\', title=title,\n-                            description=description)\n-        aggregator = container[\'aggregator\']\n+        _createObjectByType(\n+            "Collection",\n+            container,\n+            id="aggregator",\n+            title=title,\n+            description=description,\n+        )\n+        aggregator = container["aggregator"]\n \n         # Constrain types\n-        allowed_types = [\'News Item\', ]\n+        allowed_types = [\n+            "News Item",\n+        ]\n         _setup_constrains(container, allowed_types)\n \n-        container.setOrdering(\'unordered\')\n-        container.setDefaultPage(\'aggregator\')\n+        container.setOrdering("unordered")\n+        container.setDefaultPage("aggregator")\n         _publish(container)\n \n         # Set the Collection criteria.\n         #: Sort on the Effective date\n-        aggregator.sort_on = u\'effective\'\n+        aggregator.sort_on = u"effective"\n         aggregator.sort_reversed = True\n         #: Query by Type and Review State\n         aggregator.query = [\n-            {\'i\': u\'portal_type\',\n-             \'o\': u\'plone.app.querystring.operation.selection.any\',\n-             \'v\': [u\'News Item\'],\n-             },\n-            {\'i\': u\'review_state\',\n-             \'o\': u\'plone.app.querystring.operation.selection.any\',\n-             \'v\': [u\'published\'],\n-             },\n+            {\n+                "i": u"portal_type",\n+                "o": u"plone.app.querystring.operation.selection.any",\n+                "v": [u"News Item"],\n+            },\n+            {\n+                "i": u"review_state",\n+                "o": u"plone.app.querystring.operation.selection.any",\n+                "v": [u"published"],\n+            },\n         ]\n-        aggregator.setLayout(\'summary_view\')\n+        aggregator.setLayout("summary_view")\n \n         _publish(aggregator)\n \n \n def create_events_topic(portal, target_language):\n-    events_id = \'events\'\n+    events_id = "events"\n \n     if events_id not in portal.keys():\n-        title = _translate(u\'events-title\', target_language, u\'Events\')\n-        description = _translate(u\'events-description\', target_language,\n-                                 u\'Site Events\')\n+        title = _translate(u"events-title", target_language, u"Events")\n+        description = _translate(u"events-description", target_language, u"Site Events")\n         container = createContent(\n-            \'Folder\', id=events_id,\n+            "Folder",\n+            id=events_id,\n             title=title,\n             description=description,\n-            language=target_language.replace(\'_\', \'-\').lower())\n+            language=target_language.replace("_", "-").lower(),\n+        )\n         container = addContentToContainer(portal, container)\n-        _createObjectByType(\'Collection\', container,\n-                            id=\'aggregator\', title=title,\n-                            description=description)\n-        aggregator = container[\'aggregator\']\n+        _createObjectByType(\n+            "Collection",\n+            container,\n+            id="aggregator",\n+            title=title,\n+            description=description,\n+        )\n+        aggregator = container["aggregator"]\n \n         # Constain types\n-        allowed_types = [\'Event\', ]\n+        allowed_types = [\n+            "Event",\n+        ]\n \n         _setup_constrains(container, allowed_types)\n \n-        container.setOrdering(\'unordered\')\n-        container.setDefaultPage(\'aggregator\')\n+        container.setOrdering("unordered")\n+        container.setDefaultPage("aggregator")\n         _publish(container)\n \n         # Set the Collection criteria.\n         #: Sort on the Event start date\n-        aggregator.sort_on = u\'start\'\n+        aggregator.sort_on = u"start"\n         aggregator.sort_reversed = True\n         #: Query by Type and Review State\n         aggregator.query = [\n-            {\'i\': \'portal_type\',\n-             \'o\': \'plone.app.querystring.operation.selection.any\',\n-             \'v\': [\'Event\']\n-             },\n-            {\'i\': \'review_state\',\n-             \'o\': \'plone.app.querystring.operation.selection.any\',\n-             \'v\': [\'published\']\n-             },\n+            {\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.selection.any",\n+                "v": ["Event"],\n+            },\n+            {\n+                "i": "review_state",\n+                "o": "plone.app.querystring.operation.selection.any",\n+                "v": ["published"],\n+            },\n         ]\n-        aggregator.setLayout(\'event_listing\')\n+        aggregator.setLayout("event_listing")\n         _publish(aggregator)\n \n \n def configure_members_folder(portal, target_language):\n-    members_id = \'Members\'\n+    members_id = "Members"\n \n     if members_id not in portal.keys():\n-        title = _translate(u\'members-title\', target_language, u\'Users\')\n-        description = _translate(u\'members-description\', target_language,\n-                                 u\'Site Users\')\n+        title = _translate(u"members-title", target_language, u"Users")\n+        description = _translate(u"members-description", target_language, u"Site Users")\n         container = createContent(\n-            \'Folder\', id=members_id,\n+            "Folder",\n+            id=members_id,\n             title=title,\n             description=description,\n-            language=target_language.replace(\'_\', \'-\').lower())\n+            language=target_language.replace("_", "-").lower(),\n+        )\n         container = addContentToContainer(portal, container)\n-        container.setOrdering(\'unordered\')\n+        container.setOrdering("unordered")\n         container.reindexObject()\n \n         # set member search as default layout to Members Area\n-        container.setLayout(\'@@member-search\')\n+        container.setLayout("@@member-search")\n \n         # Block all right column portlets by default\n-        manager = queryUtility(IPortletManager, name=\'plone.rightcolumn\')\n+        manager = queryUtility(IPortletManager, name="plone.rightcolumn")\n         if manager is not None:\n             assignable = getMultiAdapter(\n-                (container, manager),\n-                ILocalPortletAssignmentManager\n+                (container, manager), ILocalPortletAssignmentManager\n             )\n-            assignable.setBlacklistStatus(\'context\', True)\n-            assignable.setBlacklistStatus(\'group\', True)\n-            assignable.setBlacklistStatus(\'content_type\', True)\n+            assignable.setBlacklistStatus("context", True)\n+            assignable.setBlacklistStatus("group", True)\n+            assignable.setBlacklistStatus("content_type", True)\n \n \n def import_content(context):\ndiff --git a/plone/app/contenttypes/subscribers.py b/plone/app/contenttypes/subscribers.py\nindex d233cb308..4c0c2788b 100644\n--- a/plone/app/contenttypes/subscribers.py\n+++ b/plone/app/contenttypes/subscribers.py\n@@ -3,11 +3,11 @@\n \n \n def set_title_description(obj, event):\n-    \'\'\' Sets title to filename if no title\n-        was provided.\n-        Also sets an empty unicode as description if\n-        no description was provided.\n-    \'\'\'\n+    """Sets title to filename if no title\n+    was provided.\n+    Also sets an empty unicode as description if\n+    no description was provided.\n+    """\n     title = obj.title\n     if not title:\n         if IImage.providedBy(obj):\n@@ -20,4 +20,4 @@ def set_title_description(obj, event):\n \n     description = obj.description\n     if not description:\n-        obj.description = u\'\'\n+        obj.description = u""\ndiff --git a/plone/app/contenttypes/testing.py b/plone/app/contenttypes/testing.py\nindex 50545bdf6..c6f32d9f5 100644\n--- a/plone/app/contenttypes/testing.py\n+++ b/plone/app/contenttypes/testing.py\n@@ -25,52 +25,51 @@ def set_browserlayer(request):\n \n class PloneAppContenttypes(PloneSandboxLayer):\n \n-    defaultBases = (PAEvent_FIXTURE, PLONE_FIXTURE,)\n+    defaultBases = (\n+        PAEvent_FIXTURE,\n+        PLONE_FIXTURE,\n+    )\n \n     def setUpZope(self, app, configurationContext):\n         import plone.app.contenttypes\n+\n         self.loadZCML(package=plone.app.contenttypes)\n         import plone.app.event.dx\n+\n         self.loadZCML(package=plone.app.event.dx)\n \n     def setUpPloneSite(self, portal):\n-        portal.portal_workflow.setDefaultChain(\'simple_publication_workflow\')\n+        portal.portal_workflow.setDefaultChain("simple_publication_workflow")\n \n \n class PloneAppContenttypesRobot(PloneAppContenttypes):\n-    """Same as the default but with a added folder \'robot-test-folder\'.\n-    """\n+    """Same as the default but with a added folder \'robot-test-folder\'."""\n \n-    defaultBases = (\n-        PAEvent_FIXTURE, REMOTE_LIBRARY_BUNDLE_FIXTURE)\n+    defaultBases = (PAEvent_FIXTURE, REMOTE_LIBRARY_BUNDLE_FIXTURE)\n \n     def setUpPloneSite(self, portal):\n         portal.acl_users.userFolderAddUser(\n-            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, [\'Manager\'], [])\n+            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ["Manager"], []\n+        )\n         login(portal, SITE_OWNER_NAME)\n         super(PloneAppContenttypesRobot, self).setUpPloneSite(portal)\n-        portal.invokeFactory(\'Folder\', id=TEST_FOLDER_ID, title=u\'Test Folder\')\n+        portal.invokeFactory("Folder", id=TEST_FOLDER_ID, title=u"Test Folder")\n \n     def tearDownPloneSite(self, portal):\n-        login(portal, \'admin\')\n+        login(portal, "admin")\n         portal.manage_delObjects([TEST_FOLDER_ID])\n         super(PloneAppContenttypesRobot, self).tearDownPloneSite(portal)\n \n \n PLONE_APP_CONTENTTYPES_FIXTURE = PloneAppContenttypes()\n PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_CONTENTTYPES_FIXTURE,),\n-    name=\'PloneAppContenttypes:Integration\'\n+    bases=(PLONE_APP_CONTENTTYPES_FIXTURE,), name="PloneAppContenttypes:Integration"\n )\n PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_APP_CONTENTTYPES_FIXTURE,),\n-    name=\'PloneAppContenttypes:Functional\'\n+    bases=(PLONE_APP_CONTENTTYPES_FIXTURE,), name="PloneAppContenttypes:Functional"\n )\n PLONE_APP_CONTENTTYPES_ROBOT_FIXTURE = PloneAppContenttypesRobot()\n PLONE_APP_CONTENTTYPES_ROBOT_TESTING = FunctionalTesting(\n-    bases=(\n-        PLONE_APP_CONTENTTYPES_ROBOT_FIXTURE,\n-        zope.WSGI_SERVER_FIXTURE\n-    ),\n-    name=\'PloneAppContenttypes:Robot\'\n+    bases=(PLONE_APP_CONTENTTYPES_ROBOT_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n+    name="PloneAppContenttypes:Robot",\n )\ndiff --git a/plone/app/contenttypes/tests/oldtypes.py b/plone/app/contenttypes/tests/oldtypes.py\nindex c56228f6f..15a05e6f0 100644\n--- a/plone/app/contenttypes/tests/oldtypes.py\n+++ b/plone/app/contenttypes/tests/oldtypes.py\n@@ -7,37 +7,36 @@\n \n @implementer(IEvent)\n class Event(Item):\n-    """Dummy subclass for old ``Event`` portal type\n-    """\n+    """Dummy subclass for old ``Event`` portal type"""\n \n \n def create1_0EventType(portal):\n     """Recreate the old event type used in the 1.0 branch"""\n-    fti = DexterityFTI(\'Event\')\n-    fti.title = \'Event\'\n-    fti.description = \'Events can be shown in calendars.\'\n-    fti.factory = \'Event\'\n-    fti.add_view_expr = \'string:${folder_url}/++add++Event\'\n-    fti.link_target = \'\'\n-    fti.link_target = \'\'\n-    fti.immediate_view = \'view\'\n+    fti = DexterityFTI("Event")\n+    fti.title = "Event"\n+    fti.description = "Events can be shown in calendars."\n+    fti.factory = "Event"\n+    fti.add_view_expr = "string:${folder_url}/++add++Event"\n+    fti.link_target = ""\n+    fti.link_target = ""\n+    fti.immediate_view = "view"\n     fti.global_allow = True\n     fti.filter_content_types = True\n     fti.allowed_content_types = []\n     fti.allow_discussion = False\n-    fti.default_view = \'event_view\'\n-    fti.view_methods = (\'event_view\', )\n+    fti.default_view = "event_view"\n+    fti.view_methods = ("event_view",)\n     fti.default_view_fallback = False\n-    fti.add_permission = \'plone.app.contenttypes.addEvent\'\n-    fti.klass = \'plone.app.contenttypes.tests.oldtypes.Event\'\n+    fti.add_permission = "plone.app.contenttypes.addEvent"\n+    fti.klass = "plone.app.contenttypes.tests.oldtypes.Event"\n     fti.behaviors = (\n-        \'plone.app.contenttypes.interfaces.IEvent\',\n-        \'plone.app.dexterity.behaviors.metadata.IDublinCore\',\n-        \'plone.app.content.interfaces.INameFromTitle\',\n-        \'plone.app.dexterity.behaviors.discussion.IAllowDiscussion\',\n-        \'plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation\',\n-        \'plone.app.relationfield.behavior.IRelatedItems\',\n-        \'plone.app.versioningbehavior.behaviors.IVersionable\',\n+        "plone.app.contenttypes.interfaces.IEvent",\n+        "plone.app.dexterity.behaviors.metadata.IDublinCore",\n+        "plone.app.content.interfaces.INameFromTitle",\n+        "plone.app.dexterity.behaviors.discussion.IAllowDiscussion",\n+        "plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation",\n+        "plone.app.relationfield.behavior.IRelatedItems",\n+        "plone.app.versioningbehavior.behaviors.IVersionable",\n     )\n     fti.schema = None\n     fti.model_source = """\n@@ -100,7 +99,7 @@ def create1_0EventType(portal):\n </model>"""\n     fti.model_file = None  # Was plone.app.contenttypes.schema:event.xml\n \n-    if \'Event\' in portal.portal_types:\n-        del portal.portal_types[\'Event\']\n-    portal.portal_types._setObject(\'Event\', fti)\n+    if "Event" in portal.portal_types:\n+        del portal.portal_types["Event"]\n+    portal.portal_types._setObject("Event", fti)\n     return fti\ndiff --git a/plone/app/contenttypes/tests/robot/variables.py b/plone/app/contenttypes/tests/robot/variables.py\nindex e1e7a4f0e..e7844a651 100644\n--- a/plone/app/contenttypes/tests/robot/variables.py\n+++ b/plone/app/contenttypes/tests/robot/variables.py\n@@ -2,7 +2,10 @@\n from pkg_resources import resource_filename\n \n \n-TEST_FOLDER_ID = \'robot-test-folder\'\n-PLONE_PATH = \'/plone\'\n-COLLECTION_TEST_QUERY = \'[{"i": "path", "o": "plone.app.querystring.operation.string.path", "v": "%s/%s"}]\' % (PLONE_PATH, TEST_FOLDER_ID)  # noqa\n-PATH_TO_TEST_FILES = resource_filename(\'plone.app.contenttypes.tests\', \'\')\n+TEST_FOLDER_ID = "robot-test-folder"\n+PLONE_PATH = "/plone"\n+COLLECTION_TEST_QUERY = (\n+    \'[{"i": "path", "o": "plone.app.querystring.operation.string.path", "v": "%s/%s"}]\'\n+    % (PLONE_PATH, TEST_FOLDER_ID)\n+)  # noqa\n+PATH_TO_TEST_FILES = resource_filename("plone.app.contenttypes.tests", "")\ndiff --git a/plone/app/contenttypes/tests/test_behaviors_collection.py b/plone/app/contenttypes/tests/test_behaviors_collection.py\nindex a6aa9b926..c972a7f7c 100644\n--- a/plone/app/contenttypes/tests/test_behaviors_collection.py\n+++ b/plone/app/contenttypes/tests/test_behaviors_collection.py\n@@ -1,6 +1,8 @@\n # -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)  # noqa\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -13,11 +15,13 @@\n import unittest\n \n \n-query = [{\n-    \'i\': \'Title\',\n-    \'o\': \'plone.app.querystring.operation.string.contains\',\n-    \'v\': \'Collection Test Page\',\n-}]\n+query = [\n+    {\n+        "i": "Title",\n+        "o": "plone.app.querystring.operation.string.contains",\n+        "v": "Collection Test Page",\n+    }\n+]\n \n \n class CollectionBehaviorFunctionalTest(unittest.TestCase):\n@@ -25,75 +29,79 @@ class CollectionBehaviorFunctionalTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        fti = DexterityFTI(\'collectioncontainer\')\n-        self.portal.portal_types._setObject(\'collectioncontainer\', fti)\n-        fti.klass = \'plone.dexterity.content.Container\'\n-        fti.behaviors = (\n-            \'plone.app.contenttypes.behaviors.collection.ICollection\',\n-        )\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        fti = DexterityFTI("collectioncontainer")\n+        self.portal.portal_types._setObject("collectioncontainer", fti)\n+        fti.klass = "plone.dexterity.content.Container"\n+        fti.behaviors = ("plone.app.contenttypes.behaviors.collection.ICollection",)\n         self.fti = fti\n         alsoProvides(self.portal.REQUEST, IPloneAppContenttypesLayer)\n         alsoProvides(self.request, IPloneAppContenttypesLayer)\n         from plone.app.contenttypes.behaviors.collection import ICollection\n+\n         alsoProvides(self.request, ICollection)\n         self.portal.invokeFactory(\n-            \'collectioncontainer\',\n-            id=\'collectioncontainer\',\n-            title=u\'Container with a collection\',\n-            customViewFields=[\'Title\', \'portal_type\'],\n+            "collectioncontainer",\n+            id="collectioncontainer",\n+            title=u"Container with a collection",\n+            customViewFields=["Title", "portal_type"],\n             query=query,\n         )\n         self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc\',\n-            title=u\'Collection Test Page\',\n+            "Document",\n+            id="doc",\n+            title=u"Collection Test Page",\n         )\n \n     def _get_browser(self):\n         # Need to commit transaction, otherwise the browser does not\n         # see anything.\n         import transaction\n+\n         transaction.commit()\n         # Set up browser\n-        app = self.layer[\'app\']\n+        app = self.layer["app"]\n         browser = Browser(app)\n         browser.handleErrors = False\n         browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {0}:{1}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n         return browser\n \n     def test_collection_default_dexterity_view(self):\n         # Test the default dexterity view\n         browser = self._get_browser()\n-        browser.open(self.portal_url + \'/collectioncontainer/view\')\n+        browser.open(self.portal_url + "/collectioncontainer/view")\n         self.assertTrue(\'"v": "Collection Test Page"\' in browser.contents)\n \n     def test_collection_tabular_view(self):\n         browser = self._get_browser()\n-        browser.open(self.portal_url + \'/collectioncontainer/tabular_view\')\n+        browser.open(self.portal_url + "/collectioncontainer/tabular_view")\n         # search from here:\n-        start = browser.contents.find(\'content-core\')\n+        start = browser.contents.find("content-core")\n         # The test string should be within the search results.\n-        self.assertTrue(\'Collection Test Page\' in\n-                        browser.contents[start:start + 2000])\n+        self.assertTrue(\n+            "Collection Test Page" in browser.contents[start : start + 2000]\n+        )\n \n     def test_collection_in_edit_form(self):\n         browser = self._get_browser()\n-        browser.open(self.portal_url + \'/collectioncontainer/edit\')\n-        control = browser.getControl(name=\'form.widgets.ICollection.query\')\n-        self.assertTrue(json.loads(control.value)[0][\'v\'],\n-                        \'Collection Test Page\')\n+        browser.open(self.portal_url + "/collectioncontainer/edit")\n+        control = browser.getControl(name="form.widgets.ICollection.query")\n+        self.assertTrue(json.loads(control.value)[0]["v"], "Collection Test Page")\n         # The customViewFields field is a \'double\' control, with a\n         # \'from\' and \'to\' list.\n         from_control = browser.getControl(\n-            name=\'form.widgets.ICollection.customViewFields.from\')\n+            name="form.widgets.ICollection.customViewFields.from"\n+        )\n         self.assertEqual(from_control.value, [])\n-        self.assertTrue(\'Title\' not in from_control.options)\n-        self.assertTrue(\'portal_type\' not in from_control.options)\n-        self.assertTrue(\'Description\' in from_control.options)\n+        self.assertTrue("Title" not in from_control.options)\n+        self.assertTrue("portal_type" not in from_control.options)\n+        self.assertTrue("Description" in from_control.options)\ndiff --git a/plone/app/contenttypes/tests/test_behaviors_leadimage.py b/plone/app/contenttypes/tests/test_behaviors_leadimage.py\nindex 6fda6bc56..635e38f50 100644\n--- a/plone/app/contenttypes/tests/test_behaviors_leadimage.py\n+++ b/plone/app/contenttypes/tests/test_behaviors_leadimage.py\n@@ -1,6 +1,8 @@\n # -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)  # noqa\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -19,63 +21,64 @@ class LeadImageBehaviorFunctionalTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n-        fti = DexterityFTI(\'leadimagefolder\')\n-        self.portal.portal_types._setObject(\'leadimagefolder\', fti)\n-        fti.klass = \'plone.dexterity.content.Container\'\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n+        fti = DexterityFTI("leadimagefolder")\n+        self.portal.portal_types._setObject("leadimagefolder", fti)\n+        fti.klass = "plone.dexterity.content.Container"\n         fti.behaviors = (\n-            \'plone.app.contenttypes.behaviors.leadimage.ILeadImageBehavior\',\n+            "plone.app.contenttypes.behaviors.leadimage.ILeadImageBehavior",\n         )\n         self.fti = fti\n         alsoProvides(self.portal.REQUEST, IPloneAppContenttypesLayer)\n         alsoProvides(self.request, IPloneAppContenttypesLayer)\n         from plone.app.contenttypes.behaviors.leadimage import ILeadImage\n+\n         alsoProvides(self.request, ILeadImage)\n         self.portal.invokeFactory(\n-            \'leadimagefolder\',\n-            id=\'leadimagefolder\',\n-            title=u\'Folder with a lead image\'\n+            "leadimagefolder", id="leadimagefolder", title=u"Folder with a lead image"\n         )\n         import transaction\n+\n         transaction.commit()\n         # Set up browser\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {0}:{1}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_lead_image_in_edit_form(self):\n-        self.browser.open(self.portal_url + \'/leadimagefolder/edit\')\n-        self.assertTrue(\'Lead Image\' in self.browser.contents)\n-        self.assertTrue(\'Lead Image Caption\' in self.browser.contents)\n+        self.browser.open(self.portal_url + "/leadimagefolder/edit")\n+        self.assertTrue("Lead Image" in self.browser.contents)\n+        self.assertTrue("Lead Image Caption" in self.browser.contents)\n \n     def test_lead_image_viewlet_shows_up(self):\n-        self.browser.open(self.portal_url + \'/leadimagefolder/edit\')\n+        self.browser.open(self.portal_url + "/leadimagefolder/edit")\n         # Image upload\n-        file_path = os.path.join(os.path.dirname(__file__), \'image.jpg\')\n-        file_ctl = self.browser.getControl(\n-            name=\'form.widgets.ILeadImageBehavior.image\'\n-        )\n-        with io.FileIO(file_path, \'rb\') as f:\n-            file_ctl.add_file(f, \'image/png\', \'image.jpg\')\n+        file_path = os.path.join(os.path.dirname(__file__), "image.jpg")\n+        file_ctl = self.browser.getControl(name="form.widgets.ILeadImageBehavior.image")\n+        with io.FileIO(file_path, "rb") as f:\n+            file_ctl.add_file(f, "image/png", "image.jpg")\n         # Image caption\n         self.browser.getControl(\n-            name=\'form.widgets.ILeadImageBehavior.image_caption\'\n-        ).value = \'My image caption\'\n+            name="form.widgets.ILeadImageBehavior.image_caption"\n+        ).value = "My image caption"\n         # Submit form\n-        self.browser.getControl(\'Save\').click()\n+        self.browser.getControl("Save").click()\n \n-        self.assertTrue(\'My image caption\' in self.browser.contents)\n-        self.assertTrue(\'image.jpg\' in self.browser.contents)\n+        self.assertTrue("My image caption" in self.browser.contents)\n+        self.assertTrue("image.jpg" in self.browser.contents)\n \n         self.assertTrue(\'<section id="section-leadimage">\' in self.browser.contents)\n \n         # But doesn\'t show up on folder_contents, which is not a default view\n-        self.browser.open(self.portal_url + \'/leadimagefolder/folder_contents\')\n+        self.browser.open(self.portal_url + "/leadimagefolder/folder_contents")\n         self.assertTrue(\'<section id="section-leadimage">\' not in self.browser.contents)\ndiff --git a/plone/app/contenttypes/tests/test_behaviors_richtext.py b/plone/app/contenttypes/tests/test_behaviors_richtext.py\nindex f77279865..319f88647 100644\n--- a/plone/app/contenttypes/tests/test_behaviors_richtext.py\n+++ b/plone/app/contenttypes/tests/test_behaviors_richtext.py\n@@ -1,6 +1,8 @@\n # -*- coding: utf-8 -*-\n from plone.app.contenttypes.behaviors.richtext import IRichText\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)  # noqa\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -20,42 +22,45 @@ class RichTextBase:\n     def _setupFTI(self):\n         fti = DexterityFTI(self._portal_type)\n         self.portal.portal_types._setObject(self._portal_type, fti)\n-        fti.klass = \'plone.dexterity.content.Item\'\n+        fti.klass = "plone.dexterity.content.Item"\n         fti.behaviors = self._behaviors\n \n \n class RichTextBehaviorFunctionalTest(RichTextBase, unittest.TestCase):\n-    """ basic use cases and tests for richtext behavior"""\n+    """basic use cases and tests for richtext behavior"""\n \n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n-    _behaviors = (\n-        \'plone.app.contenttypes.behaviors.richtext.IRichTextBehavior\',)\n-    _portal_type = \'SomeDocument\'\n+    _behaviors = ("plone.app.contenttypes.behaviors.richtext.IRichTextBehavior",)\n+    _portal_type = "SomeDocument"\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.wf = getToolByName(self.portal, \'portal_workflow\')\n-        self.portal.acl_users._doAddUser(\'user_std\', \'secret\', [\'Member\'], [])\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.wf = getToolByName(self.portal, "portal_workflow")\n+        self.portal.acl_users._doAddUser("user_std", "secret", ["Member"], [])\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self._setupFTI()\n-        self.portal.invokeFactory(self._portal_type, \'doc1\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        self.portal.invokeFactory(self._portal_type, "doc1")\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         import transaction\n+\n         transaction.commit()\n         # Set up browser\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {0}:{1}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_richtext_in_edit_form(self):\n-        self.browser.open(self.portal_url + \'/doc1/edit\')\n-        self.assertTrue(\'tinymce\' in self.browser.contents)\n+        self.browser.open(self.portal_url + "/doc1/edit")\n+        self.assertTrue("tinymce" in self.browser.contents)\n \n     def test_richtext_behavior(self):\n         IRichText.providedBy(self.portal.doc1)\ndiff --git a/plone/app/contenttypes/tests/test_behaviors_table_of_contents.py b/plone/app/contenttypes/tests/test_behaviors_table_of_contents.py\nindex 3b729d9bd..ec955228c 100644\n--- a/plone/app/contenttypes/tests/test_behaviors_table_of_contents.py\n+++ b/plone/app/contenttypes/tests/test_behaviors_table_of_contents.py\n@@ -1,6 +1,8 @@\n # -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)  # noqa\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -17,49 +19,52 @@ class TableOfContentsBehaviorFunctionalTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n-        fti = DexterityFTI(\'tocdocument\')\n-        self.portal.portal_types._setObject(\'tocdocument\', fti)\n-        fti.klass = \'plone.dexterity.content.Item\'\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n+        fti = DexterityFTI("tocdocument")\n+        self.portal.portal_types._setObject("tocdocument", fti)\n+        fti.klass = "plone.dexterity.content.Item"\n         fti.behaviors = (\n-            \'plone.app.contenttypes.behaviors.tableofcontents.\'\n-            \'ITableOfContents\',\n+            "plone.app.contenttypes.behaviors.tableofcontents." "ITableOfContents",\n         )\n         self.fti = fti\n         alsoProvides(self.portal.REQUEST, IPloneAppContenttypesLayer)\n         alsoProvides(self.request, IPloneAppContenttypesLayer)\n-        from plone.app.contenttypes.behaviors.tableofcontents \\\n-            import ITableOfContents\n+        from plone.app.contenttypes.behaviors.tableofcontents import ITableOfContents\n+\n         alsoProvides(self.request, ITableOfContents)\n         self.portal.invokeFactory(\n-            \'tocdocument\',\n-            id=\'tocdoc\',\n-            title=u\'Document with a table of contents\'\n+            "tocdocument", id="tocdoc", title=u"Document with a table of contents"\n         )\n         import transaction\n+\n         transaction.commit()\n         # Set up browser\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {0}:{1}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_toc_in_edit_form(self):\n-        self.browser.open(self.portal_url + \'/tocdoc/edit\')\n-        self.assertTrue(\'Table of contents\' in self.browser.contents)\n+        self.browser.open(self.portal_url + "/tocdoc/edit")\n+        self.assertTrue("Table of contents" in self.browser.contents)\n \n     def test_toc_viewlet_shows_up(self):\n-        self.browser.open(self.portal_url + \'/tocdoc/edit\')\n+        self.browser.open(self.portal_url + "/tocdoc/edit")\n         toc_ctl = self.browser.getControl(\n-            name=\'form.widgets.ITableOfContents.table_of_contents:list\'\n+            name="form.widgets.ITableOfContents.table_of_contents:list"\n         )\n-        toc_ctl.value = [u\'selected\', ]\n+        toc_ctl.value = [\n+            u"selected",\n+        ]\n         # Submit form\n-        self.browser.getControl(\'Save\').click()\n+        self.browser.getControl("Save").click()\n         self.assertTrue(\'<section id="document-toc"\' in self.browser.contents)\ndiff --git a/plone/app/contenttypes/tests/test_collection.py b/plone/app/contenttypes/tests/test_collection.py\nindex 29c89225c..58c5af857 100644\n--- a/plone/app/contenttypes/tests/test_collection.py\n+++ b/plone/app/contenttypes/tests/test_collection.py\n@@ -1,10 +1,16 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from DateTime import DateTime\n-from plone.app.contenttypes.behaviors.collection import ICollection as ICollection_behavior  # noqa\n+from plone.app.contenttypes.behaviors.collection import (\n+    ICollection as ICollection_behavior,\n+)  # noqa\n from plone.app.contenttypes.interfaces import ICollection\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)  # noqa\n from plone.app.contenttypes.testing import set_browserlayer\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.testing import login\n@@ -26,22 +32,22 @@\n import unittest\n \n \n-query = [{\n-    \'i\': \'Title\',\n-    \'o\': \'plone.app.querystring.operation.string.contains\',\n-    \'v\': \'Collection Test Page\',\n-}]\n+query = [\n+    {\n+        "i": "Title",\n+        "o": "plone.app.querystring.operation.string.contains",\n+        "v": "Collection Test Page",\n+    }\n+]\n \n \n def dummy_image():\n     from plone.namedfile.file import NamedBlobImage\n-    filename = os.path.join(os.path.dirname(__file__), u\'image.png\')\n-    with open(filename, \'rb\') as f:\n-        image_data = f.read() \n-    return NamedBlobImage(\n-        data=image_data,\n-        filename=filename\n-    )\n+\n+    filename = os.path.join(os.path.dirname(__file__), u"image.png")\n+    with open(filename, "rb") as f:\n+        image_data = f.read()\n+    return NamedBlobImage(data=image_data, filename=filename)\n \n \n class PloneAppCollectionClassTest(unittest.TestCase):\n@@ -49,11 +55,11 @@ class PloneAppCollectionClassTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n-        self.portal.invokeFactory(\'Collection\', \'collection\')\n-        self.collection = self.portal[\'collection\']\n+        self.portal.invokeFactory("Collection", "collection")\n+        self.collection = self.portal["collection"]\n \n     def test_bbb_listMetaDataFields(self):\n         self.assertEqual(self.collection.listMetaDataFields(), [])\n@@ -64,12 +70,18 @@ def test_results(self):\n     def test_bbb_selectedViewFields(self):\n         self.assertEqual(\n             self.collection.selectedViewFields(),\n-            [(\'Title\', u\'Title\'), (\'Creator\', u\'Creator\'),\n-             (\'Type\', u\'Type\'), (\'ModificationDate\', u\'Last modified\')]\n+            [\n+                ("Title", u"Title"),\n+                ("Creator", u"Creator"),\n+                ("Type", u"Type"),\n+                ("ModificationDate", u"Last modified"),\n+            ],\n+        )\n+        self.collection.customViewFields = ["Title", "Description"]\n+        self.assertEqual(\n+            self.collection.selectedViewFields(),\n+            [("Title", u"Title"), ("Description", u"Description")],\n         )\n-        self.collection.customViewFields = [\'Title\', \'Description\']\n-        self.assertEqual(self.collection.selectedViewFields(),\n-                         [(\'Title\', u\'Title\'), (\'Description\', u\'Description\')])\n \n     def test_bbb_setQuery(self):\n         self.collection.setQuery(query)\n@@ -84,8 +96,8 @@ def test_bbb_getRawQuery(self):\n         self.assertEqual(self.collection.getRawQuery(), query)\n \n     def test_bbb_setSort_on(self):\n-        self.collection.setSort_on(\'start\')\n-        self.assertEqual(self.collection.sort_on, \'start\')\n+        self.collection.setSort_on("start")\n+        self.assertEqual(self.collection.sort_on, "start")\n \n     def test_bbb_setSort_reversed(self):\n         self.collection.setSort_reversed(True)\n@@ -93,6 +105,7 @@ def test_bbb_setSort_reversed(self):\n \n     def test_syndicatable(self):\n         from Products.CMFPlone.interfaces.syndication import ISyndicatable\n+\n         self.assertTrue(ISyndicatable.providedBy(self.collection))\n \n \n@@ -101,35 +114,31 @@ class PloneAppCollectionIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n-        self.portal.invokeFactory(\'Folder\', \'test-folder\')\n-        self.folder = self.portal[\'test-folder\']\n+        self.portal.invokeFactory("Folder", "test-folder")\n+        self.folder = self.portal["test-folder"]\n \n     def test_schema(self):\n-        fti = queryUtility(IDexterityFTI,\n-                           name=\'Collection\')\n+        fti = queryUtility(IDexterityFTI, name="Collection")\n         schema = fti.lookupSchema()\n-        self.assertTrue(schema.getName().endswith(\'_0_Collection\'))\n+        self.assertTrue(schema.getName().endswith("_0_Collection"))\n \n     def test_fti(self):\n-        fti = queryUtility(IDexterityFTI,\n-                           name=\'Collection\')\n+        fti = queryUtility(IDexterityFTI, name="Collection")\n         self.assertNotEqual(None, fti)\n \n     def test_factory(self):\n-        fti = queryUtility(IDexterityFTI,\n-                           name=\'Collection\')\n+        fti = queryUtility(IDexterityFTI, name="Collection")\n         factory = fti.factory\n         new_object = createObject(factory)\n         self.assertTrue(ICollection.providedBy(new_object))\n \n     def test_adding(self):\n-        self.folder.invokeFactory(\'Collection\',\n-                                  \'collection1\')\n-        p1 = self.folder[\'collection1\']\n+        self.folder.invokeFactory("Collection", "collection1")\n+        p1 = self.folder["collection1"]\n         self.assertTrue(ICollection.providedBy(p1))\n \n \n@@ -138,47 +147,46 @@ class PloneAppCollectionViewsIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.browser = Browser(self.layer[\'app\'])\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.browser = Browser(self.layer["app"])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         set_browserlayer(self.request)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n-        self.portal.invokeFactory(\'Folder\', \'test-folder\')\n-        self.folder = self.portal[\'test-folder\']\n-        self.folder.invokeFactory(\'Collection\',\n-                                  \'collection1\')\n-        self.collection = aq_inner(self.folder[\'collection1\'])\n-        self.request.set(\'URL\', self.collection.absolute_url())\n-        self.request.set(\'ACTUAL_URL\', self.collection.absolute_url())\n+        self.portal.invokeFactory("Folder", "test-folder")\n+        self.folder = self.portal["test-folder"]\n+        self.folder.invokeFactory("Collection", "collection1")\n+        self.collection = aq_inner(self.folder["collection1"])\n+        self.request.set("URL", self.collection.absolute_url())\n+        self.request.set("ACTUAL_URL", self.collection.absolute_url())\n \n     def test_collection_view(self):\n-        view = self.collection.restrictedTraverse(\'@@view\')\n+        view = self.collection.restrictedTraverse("@@view")\n         self.assertTrue(view())\n         self.assertEqual(view.request.response.status, 200)\n \n     def test_collection_listing_view(self):\n-        view = self.collection.restrictedTraverse(\'listing_view\')\n+        view = self.collection.restrictedTraverse("listing_view")\n         self.assertTrue(view())\n         self.assertEqual(view.request.response.status, 200)\n \n     def test_collection_summary_view(self):\n-        view = self.collection.restrictedTraverse(\'summary_view\')\n+        view = self.collection.restrictedTraverse("summary_view")\n         self.assertTrue(view())\n         self.assertEqual(view.request.response.status, 200)\n \n     def test_collection_full_view(self):\n-        view = self.collection.restrictedTraverse(\'full_view\')\n+        view = self.collection.restrictedTraverse("full_view")\n         self.assertTrue(view())\n         self.assertEqual(view.request.response.status, 200)\n \n     def test_collection_tabular_view(self):\n-        view = self.collection.restrictedTraverse(\'tabular_view\')\n+        view = self.collection.restrictedTraverse("tabular_view")\n         self.assertTrue(view())\n         self.assertEqual(view.request.response.status, 200)\n \n     def test_collection_album_view(self):\n-        view = self.collection.restrictedTraverse(\'album_view\')\n+        view = self.collection.restrictedTraverse("album_view")\n         self.assertTrue(view())\n         self.assertEqual(view.request.response.status, 200)\n \n@@ -186,131 +194,132 @@ def test_add_collection(self):\n         browser = self.browser\n         browser.handleErrors = False\n         browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {0}:{1}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n         portal_url = self.portal.absolute_url()\n         browser.open(portal_url)\n-        browser.getLink(url=\'http://nohost/plone/++add++Collection\').click()\n-        widget = \'form.widgets.IDublinCore.title\'\n-        browser.getControl(name=widget).value = \'My collection\'\n-        widget = \'form.widgets.IDublinCore.description\'\n-        browser.getControl(name=widget).value = \'This is my collection.\'\n-        widget = \'form.widgets.IRichTextBehavior.text\'\n-        browser.getControl(name=widget).value = \'Lorem Ipsum\'\n-        widget = \'form.widgets.IShortName.id\'\n-        browser.getControl(name=widget).value = \'my-special-collection\'\n-        browser.getControl(\'Save\').click()\n-        self.assertTrue(browser.url.endswith(\'my-special-collection/view\'))\n-        self.assertTrue(\'My collection\' in browser.contents)\n-        self.assertTrue(\'This is my collection\' in browser.contents)\n-        self.assertTrue(\'Lorem Ipsum\' in browser.contents)\n+        browser.getLink(url="http://nohost/plone/++add++Collection").click()\n+        widget = "form.widgets.IDublinCore.title"\n+        browser.getControl(name=widget).value = "My collection"\n+        widget = "form.widgets.IDublinCore.description"\n+        browser.getControl(name=widget).value = "This is my collection."\n+        widget = "form.widgets.IRichTextBehavior.text"\n+        browser.getControl(name=widget).value = "Lorem Ipsum"\n+        widget = "form.widgets.IShortName.id"\n+        browser.getControl(name=widget).value = "my-special-collection"\n+        browser.getControl("Save").click()\n+        self.assertTrue(browser.url.endswith("my-special-collection/view"))\n+        self.assertTrue("My collection" in browser.contents)\n+        self.assertTrue("This is my collection" in browser.contents)\n+        self.assertTrue("Lorem Ipsum" in browser.contents)\n \n     def test_collection_templates(self):\n         self.portal.acl_users.userFolderAddUser(\n-            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, [\'Manager\'], [])\n+            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ["Manager"], []\n+        )\n         browser = self.browser\n         portal = self.portal\n         login(portal, SITE_OWNER_NAME)\n         # add an image that will be listed by the collection\n-        portal.invokeFactory(\'Image\',\n-                             \'image\',\n-                             title=\'Image example\')\n+        portal.invokeFactory("Image", "image", title="Image example")\n \n-        image = self.portal[\'image\']\n+        image = self.portal["image"]\n         image.image = dummy_image()\n \n         # add a collection, so we can add a query to it\n-        portal.invokeFactory(\'Collection\',\n-                             \'collection\',\n-                             title=\'New Collection\')\n-        collection = portal[\'collection\']\n+        portal.invokeFactory("Collection", "collection", title="New Collection")\n+        collection = portal["collection"]\n         # Search for images\n-        query = [{\n-            \'i\': \'Type\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Image\',\n-        }]\n+        query = [\n+            {\n+                "i": "Type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Image",\n+            }\n+        ]\n         collection.text = RichTextValue(\n-            u\'Lorem collection ipsum\',\n-            \'text/plain\',\n-            \'text/html\'\n+            u"Lorem collection ipsum", "text/plain", "text/html"\n         )\n \n         wrapped = ICollection_behavior(collection)\n         # set the query and publish the collection\n         wrapped.query = query\n         workflow = portal.portal_workflow\n-        workflow.doActionFor(collection, \'publish\')\n+        workflow.doActionFor(collection, "publish")\n         commit()\n         logout()\n         # open a browser to see if our image is in the results\n         browser.handleErrors = False\n         url = collection.absolute_url()\n         browser.open(url)\n-        self.assertIn(\'Lorem collection ipsum\', browser.contents)\n-        self.assertIn(\'Image example\', browser.contents)\n+        self.assertIn("Lorem collection ipsum", browser.contents)\n+        self.assertIn("Image example", browser.contents)\n \n         # open summary_view template\n-        browser.open(\'{0}/@@summary_view\'.format(url))\n-        self.assertIn(\'Lorem collection ipsum\', browser.contents)\n-        self.assertIn(\'Image example\', browser.contents)\n+        browser.open("{0}/@@summary_view".format(url))\n+        self.assertIn("Lorem collection ipsum", browser.contents)\n+        self.assertIn("Image example", browser.contents)\n \n         # open full_view template\n-        browser.open(\'{0}/@@full_view\'.format(url))\n-        self.assertIn(\'Lorem collection ipsum\', browser.contents)\n-        self.assertIn(\'Image example\', browser.contents)\n+        browser.open("{0}/@@full_view".format(url))\n+        self.assertIn("Lorem collection ipsum", browser.contents)\n+        self.assertIn("Image example", browser.contents)\n \n         # open tabular_view template\n-        browser.open(\'{0}/@@tabular_view\'.format(url))\n-        self.assertIn(\'Lorem collection ipsum\', browser.contents)\n-        self.assertIn(\'Image example\', browser.contents)\n+        browser.open("{0}/@@tabular_view".format(url))\n+        self.assertIn("Lorem collection ipsum", browser.contents)\n+        self.assertIn("Image example", browser.contents)\n \n         # open thumbnail_view template\n-        browser.open(\'{0}/@@album_view\'.format(url))\n-        self.assertIn(\'Lorem collection ipsum\', browser.contents)\n-        self.assertIn(\'Image example\', browser.contents)\n+        browser.open("{0}/@@album_view".format(url))\n+        self.assertIn("Lorem collection ipsum", browser.contents)\n+        self.assertIn("Image example", browser.contents)\n \n     def test_sorting_1(self):\n         self.portal.acl_users.userFolderAddUser(\n-            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, [\'Manager\'], [])\n+            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ["Manager"], []\n+        )\n \n         portal = self.portal\n         login(portal, SITE_OWNER_NAME)\n-        query = [{\n-            \'i\': \'portal_type\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'News Item\',\n-        }]\n-        portal.invokeFactory(\'Collection\',\n-                             \'collection\',\n-                             title=\'New Collection\',\n-                             query=query,\n-                             sort_on=\'created\',\n-                             sort_reversed=True,\n-                             )\n+        query = [\n+            {\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "News Item",\n+            }\n+        ]\n+        portal.invokeFactory(\n+            "Collection",\n+            "collection",\n+            title="New Collection",\n+            query=query,\n+            sort_on="created",\n+            sort_reversed=True,\n+        )\n \n         now = DateTime()\n         # News Item 1\n-        portal.invokeFactory(id=\'newsitem1\',\n-                             type_name=\'News Item\')\n+        portal.invokeFactory(id="newsitem1", type_name="News Item")\n         item1 = portal.newsitem1\n         item1.creation_date = now - 2\n         item1.reindexObject()\n         # News Item 2\n-        portal.invokeFactory(id=\'newsitem2\',\n-                             type_name=\'News Item\')\n+        portal.invokeFactory(id="newsitem2", type_name="News Item")\n         item2 = portal.newsitem2\n         item2.creation_date = now - 1\n         item2.reindexObject()\n         # News Item 3\n-        portal.invokeFactory(id=\'newsitem3\',\n-                             type_name=\'News Item\')\n+        portal.invokeFactory(id="newsitem3", type_name="News Item")\n         item3 = portal.newsitem3\n         item3.creation_date = now\n         item3.reindexObject()\n \n-        collection = portal[\'collection\']\n+        collection = portal["collection"]\n         wrapped = ICollection_behavior(collection)\n         results = wrapped.results(batch=False)\n         ritem0 = results[0]\n@@ -322,33 +331,35 @@ def test_sorting_1(self):\n \n     def test_custom_query(self):\n         self.portal.acl_users.userFolderAddUser(\n-            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, [\'Manager\'], [])\n+            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ["Manager"], []\n+        )\n         portal = self.portal\n         login(portal, SITE_OWNER_NAME)\n-        query = [{\n-            \'i\': \'portal_type\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': [\'News Item\', \'Document\'],\n-        }]\n-        portal.invokeFactory(\'Collection\',\n-                             \'collection\',\n-                             title=\'New Collection\',\n-                             query=query,\n-                             )\n+        query = [\n+            {\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": ["News Item", "Document"],\n+            }\n+        ]\n+        portal.invokeFactory(\n+            "Collection",\n+            "collection",\n+            title="New Collection",\n+            query=query,\n+        )\n \n         # item 1\n-        portal.invokeFactory(id=\'testnews\',\n-                             type_name=\'News Item\')\n+        portal.invokeFactory(id="testnews", type_name="News Item")\n         item1 = portal.testnews\n         item1.reindexObject()\n \n         # item 2\n-        portal.invokeFactory(id=\'testdoc\',\n-                             type_name=\'Document\')\n+        portal.invokeFactory(id="testdoc", type_name="Document")\n         item2 = portal.testdoc\n         item2.reindexObject()\n \n-        collection = portal[\'collection\']\n+        collection = portal["collection"]\n         wrapped = ICollection_behavior(collection)\n \n         # Test unmodified query\n@@ -356,59 +367,55 @@ def test_custom_query(self):\n         self.assertEqual(len(results), 2)\n \n         # Test with custom query\n-        results = wrapped.results(batch=False,\n-                                  custom_query={\'portal_type\': \'Document\'})\n+        results = wrapped.results(batch=False, custom_query={"portal_type": "Document"})\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].id, \'testdoc\')\n+        self.assertEqual(results[0].id, "testdoc")\n \n         # Test with custom query, which should not find anything\n-        results = wrapped.results(batch=False,\n-                                  custom_query={\'portal_type\': \'Document\',\n-                                                \'id\': \'bla\'})\n+        results = wrapped.results(\n+            batch=False, custom_query={"portal_type": "Document", "id": "bla"}\n+        )\n         self.assertEqual(len(results), 0)\n \n     def test_respect_navigation_root(self):\n         self.portal.acl_users.userFolderAddUser(\n-            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, [\'Manager\'], [])\n+            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ["Manager"], []\n+        )\n         portal = self.portal\n         login(portal, SITE_OWNER_NAME)\n \n         # Create two subsites i.e create two folders and mark them with\n         # INavigationRoot\n         for i in range(1, 3):\n-            folder_id = \'folder{0}\'.format(i)\n-            portal.invokeFactory(\'Folder\',\n-                                 folder_id,\n-                                 title=\'Folder{0}\'.format(i))\n+            folder_id = "folder{0}".format(i)\n+            portal.invokeFactory("Folder", folder_id, title="Folder{0}".format(i))\n             folder = portal[folder_id]\n             alsoProvides(folder, INavigationRoot)\n-        folders = (portal[\'folder1\'], portal[\'folder2\'])\n+        folders = (portal["folder1"], portal["folder2"])\n \n         # Add a content item to each folder\n         for f in folders:\n             f_id = f.getId()\n-            f.invokeFactory(\'Document\',\n-                            \'item_in_{0}\'.format(f_id),\n-                            title=\'Item In {0}\'.format(f_id))\n+            f.invokeFactory(\n+                "Document", "item_in_{0}".format(f_id), title="Item In {0}".format(f_id)\n+            )\n \n         # Add a collection to folder1\n         folder1 = folders[0]\n-        folder1.invokeFactory(\'Collection\',\n-                              \'collection1\',\n-                              title=\'Collection 1\')\n-        collection1 = folder1[\'collection1\']\n+        folder1.invokeFactory("Collection", "collection1", title="Collection 1")\n+        collection1 = folder1["collection1"]\n         wrapped = ICollection_behavior(collection1)\n         wrapped.query = [\n             {\n-                \'i\': \'portal_type\',\n-                \'o\': \'plone.app.querystring.operation.string.is\',\n-                \'v\': \'Document\',\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Document",\n             },\n             # use a "/" path and navroot works fine!\n             {\n-                \'i\': \'path\',\n-                \'o\': \'plone.app.querystring.operation.string.path\',\n-                \'v\': \'/\',\n+                "i": "path",\n+                "o": "plone.app.querystring.operation.string.path",\n+                "v": "/",\n             },\n         ]\n \n@@ -416,7 +423,7 @@ def test_respect_navigation_root(self):\n         # navigation root.\n         items = wrapped.results(batch=False)\n         ids = [i.getId() for i in items]\n-        self.assertListEqual(ids, [\'item_in_folder1\'])\n+        self.assertListEqual(ids, ["item_in_folder1"])\n \n \n class PloneAppCollectionEditViewsIntegrationTest(unittest.TestCase):\n@@ -424,25 +431,22 @@ class PloneAppCollectionEditViewsIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         set_browserlayer(self.request)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n-        self.portal.invokeFactory(\'Folder\', \'test-folder\')\n-        self.folder = self.portal[\'test-folder\']\n-        self.folder.invokeFactory(\n-            \'Collection\',\n-            \'collection1\'\n-        )\n-        self.collection = aq_inner(self.folder[\'collection1\'])\n-        self.request.set(\'URL\', self.collection.absolute_url())\n-        self.request.set(\'ACTUAL_URL\', self.collection.absolute_url())\n+        self.portal.invokeFactory("Folder", "test-folder")\n+        self.folder = self.portal["test-folder"]\n+        self.folder.invokeFactory("Collection", "collection1")\n+        self.collection = aq_inner(self.folder["collection1"])\n+        self.request.set("URL", self.collection.absolute_url())\n+        self.request.set("ACTUAL_URL", self.collection.absolute_url())\n \n     def test_search_result(self):\n-        view = self.collection.restrictedTraverse(\'@@edit\')\n+        view = self.collection.restrictedTraverse("@@edit")\n         html = view()\n-        self.assertTrue(\'form-widgets-ICollection-query\' in html)\n+        self.assertTrue("form-widgets-ICollection-query" in html)\n         # from plone.app.contentlisting.interfaces import IContentListing\n         # self.assertTrue(IContentListing.providedBy(view.accessor()))\n         # self.assertTrue(getattr(accessor(), \'actual_result_count\'))\ndiff --git a/plone/app/contenttypes/tests/test_collection_rss.py b/plone/app/contenttypes/tests/test_collection_rss.py\nindex caa07cf2b..88775fddb 100644\n--- a/plone/app/contenttypes/tests/test_collection_rss.py\n+++ b/plone/app/contenttypes/tests/test_collection_rss.py\n@@ -1,7 +1,9 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from lxml import etree\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)  # noqa\n from plone.app.testing import login\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n@@ -14,11 +16,13 @@\n import unittest\n \n \n-query = [{\n-    \'i\': \'Title\',\n-    \'o\': \'plone.app.querystring.operation.string.is\',\n-    \'v\': \'Collection Test Page\',\n-}]\n+query = [\n+    {\n+        "i": "Title",\n+        "o": "plone.app.querystring.operation.string.is",\n+        "v": "Collection Test Page",\n+    }\n+]\n \n \n class RSSViewTest(unittest.TestCase):\n@@ -26,23 +30,22 @@ class RSSViewTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n-        self.portal.invokeFactory(\'Folder\', \'test-folder\')\n-        self.folder = self.portal[\'test-folder\']\n+        self.portal.invokeFactory("Folder", "test-folder")\n+        self.folder = self.portal["test-folder"]\n         self.folder.invokeFactory(\n-            \'Document\',\n-            \'page1\',\n-            title=\'Collection Test Page\',\n+            "Document",\n+            "page1",\n+            title="Collection Test Page",\n         )\n-        self.folder.invokeFactory(\'Collection\',\n-                                  \'collection1\')\n-        self.collection = aq_inner(self.folder[\'collection1\'])\n+        self.folder.invokeFactory("Collection", "collection1")\n+        self.collection = aq_inner(self.folder["collection1"])\n         self.collection.query = query\n-        self.request.set(\'URL\', self.collection.absolute_url())\n-        self.request.set(\'ACTUAL_URL\', self.collection.absolute_url())\n+        self.request.set("URL", self.collection.absolute_url())\n+        self.request.set("ACTUAL_URL", self.collection.absolute_url())\n         # We need to enable syndication globally.\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSyndicationSettings)\n@@ -54,17 +57,17 @@ def assertIsValidRSS(self, rss):\n         # schema = etree.XMLSchema(schema_root)\n         # parser = etree.XMLParser(dtd_validation=True,schema=schema)\n         if isinstance(rss, six.text_type):\n-            rss = rss.encode(\'utf-8\')\n+            rss = rss.encode("utf-8")\n         parser = etree.XMLParser()\n         return etree.fromstring(rss, parser)\n \n     def test_view(self):\n-        view = self.collection.restrictedTraverse(\'@@RSS\')\n+        view = self.collection.restrictedTraverse("@@RSS")\n         html = view()\n         self.assertEqual(view.request.response.status, 200)\n-        self.assertTrue(\'Collection Test Page\' in html)\n+        self.assertTrue("Collection Test Page" in html)\n \n     def test_view_is_valid(self):\n-        view = self.collection.restrictedTraverse(\'@@RSS\')\n+        view = self.collection.restrictedTraverse("@@RSS")\n         result = self.assertIsValidRSS(view())\n-        self.assertTrue(b\'Collection Test Page\' in etree.tostring(result))\n+        self.assertTrue(b"Collection Test Page" in etree.tostring(result))\ndiff --git a/plone/app/contenttypes/tests/test_content_profile.py b/plone/app/contenttypes/tests/test_content_profile.py\nindex 83a9554e3..3cdce9a71 100644\n--- a/plone/app/contenttypes/tests/test_content_profile.py\n+++ b/plone/app/contenttypes/tests/test_content_profile.py\n@@ -18,13 +18,14 @@ class PloneAppContenttypesContent(PloneSandboxLayer):\n \n     def setUpPloneSite(self, portal):\n         # Necessary to set up some Plone stuff, such as Workflow.\n-        self.applyProfile(portal, \'plone.app.contenttypes:plone-content\')\n+        self.applyProfile(portal, "plone.app.contenttypes:plone-content")\n \n \n PLONE_APP_CONTENTTYPES_CONTENT_FIXTURE = PloneAppContenttypesContent()\n-PLONE_APP_CONTENTTYPES_CONTENT_INTEGRATION_TESTING = \\\n-    IntegrationTesting(bases=(PLONE_APP_CONTENTTYPES_CONTENT_FIXTURE,),\n-                       name=\'PloneAppContenttypesContent:Integration\')\n+PLONE_APP_CONTENTTYPES_CONTENT_INTEGRATION_TESTING = IntegrationTesting(\n+    bases=(PLONE_APP_CONTENTTYPES_CONTENT_FIXTURE,),\n+    name="PloneAppContenttypesContent:Integration",\n+)\n \n # TODO Test for content translation.\n \n@@ -33,8 +34,8 @@ class ContentProfileTestCase(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_CONTENT_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.portal_workflow = getToolByName(self.portal, \'portal_workflow\')\n+        self.portal = self.layer["portal"]\n+        self.portal_workflow = getToolByName(self.portal, "portal_workflow")\n \n     # #################### #\n     #   front-page tests   #\n@@ -44,7 +45,7 @@ def test_homepage(self):\n         self.assertEqual(self.portal.title, "Welcome to Plone")\n         self.assertEqual(\n             self.portal.description,\n-            "Congratulations! You have successfully installed Plone."\n+            "Congratulations! You have successfully installed Plone.",\n         )\n         self.assertIn("Welcome!", self.portal.text.raw)\n \n@@ -54,24 +55,25 @@ def test_homepage(self):\n \n     def test_Members_was_created(self):\n         # Was the object created?\n-        obj = self.portal[\'Members\']\n-        self.assertEqual(obj.portal_type, \'Folder\')\n+        obj = self.portal["Members"]\n+        self.assertEqual(obj.portal_type, "Folder")\n \n     def test_Members_portlets(self):\n         # Have the right column portlet manager setting been added?\n-        members = self.portal[\'Members\']\n-        manager = getUtility(IPortletManager, name=\'plone.rightcolumn\')\n-        assignable_manager = getMultiAdapter((members, manager),\n-                                             ILocalPortletAssignmentManager)\n-        self.assertTrue(assignable_manager.getBlacklistStatus(\'context\'))\n-        self.assertTrue(assignable_manager.getBlacklistStatus(\'group\'))\n-        self.assertTrue(assignable_manager.getBlacklistStatus(\'content_type\'))\n+        members = self.portal["Members"]\n+        manager = getUtility(IPortletManager, name="plone.rightcolumn")\n+        assignable_manager = getMultiAdapter(\n+            (members, manager), ILocalPortletAssignmentManager\n+        )\n+        self.assertTrue(assignable_manager.getBlacklistStatus("context"))\n+        self.assertTrue(assignable_manager.getBlacklistStatus("group"))\n+        self.assertTrue(assignable_manager.getBlacklistStatus("content_type"))\n \n     def test_Members_is_private(self):\n         # Is the content object public?\n-        obj = self.portal[\'Members\']\n-        current_state = self.portal_workflow.getInfoFor(obj, \'review_state\')\n-        self.assertEqual(current_state, \'private\')\n+        obj = self.portal["Members"]\n+        current_state = self.portal_workflow.getInfoFor(obj, "review_state")\n+        self.assertEqual(current_state, "private")\n \n     # ################ #\n     #   events tests   #\n@@ -79,21 +81,21 @@ def test_Members_is_private(self):\n \n     def test_events_was_created(self):\n         # Was the object created?\n-        events = self.portal[\'events\']\n-        self.assertEqual(events.portal_type, \'Folder\')\n+        events = self.portal["events"]\n+        self.assertEqual(events.portal_type, "Folder")\n         # Was the contained collection created?\n-        collection = events[\'aggregator\']\n-        self.assertEqual(collection.portal_type, \'Collection\')\n+        collection = events["aggregator"]\n+        self.assertEqual(collection.portal_type, "Collection")\n \n     def test_events_default_page(self):\n         # Has the object been set on the container as the default page?\n-        self.assertEqual(self.portal[\'events\'].default_page, \'aggregator\')\n+        self.assertEqual(self.portal["events"].default_page, "aggregator")\n \n     def test_events_is_published(self):\n         # Has the content object been published?\n-        events = self.portal[\'events\']\n-        current_state = self.portal_workflow.getInfoFor(events, \'review_state\')\n-        self.assertEqual(current_state, \'published\')\n+        events = self.portal["events"]\n+        current_state = self.portal_workflow.getInfoFor(events, "review_state")\n+        self.assertEqual(current_state, "published")\n \n     # ############## #\n     #   news tests   #\n@@ -101,33 +103,38 @@ def test_events_is_published(self):\n \n     def test_news_was_created(self):\n         # Was the object created?\n-        news = self.portal[\'news\']\n-        self.assertEqual(news.portal_type, \'Folder\')\n+        news = self.portal["news"]\n+        self.assertEqual(news.portal_type, "Folder")\n         # Was the contained collection created?\n-        collection = news[\'aggregator\']\n-        self.assertEqual(collection.portal_type, \'Collection\')\n+        collection = news["aggregator"]\n+        self.assertEqual(collection.portal_type, "Collection")\n \n     def test_news_default_page(self):\n         # Has the object been set on the container as the default page?\n-        self.assertEqual(self.portal[\'news\'].default_page, \'aggregator\')\n+        self.assertEqual(self.portal["news"].default_page, "aggregator")\n \n     def test_news_is_published(self):\n         # Has the content object been published?\n-        news = self.portal[\'news\']\n-        current_state = self.portal_workflow.getInfoFor(news, \'review_state\')\n-        self.assertEqual(current_state, \'published\')\n+        news = self.portal["news"]\n+        current_state = self.portal_workflow.getInfoFor(news, "review_state")\n+        self.assertEqual(current_state, "published")\n \n     def test_news_aggregator_settings(self):\n         # Has the news aggregator (Collection) been set up?\n-        query = [dict(i=u\'portal_type\',\n-                      o=u\'plone.app.querystring.operation.selection.any\',\n-                      v=[u\'News Item\']),\n-                 dict(i=u\'review_state\',\n-                      o=u\'plone.app.querystring.operation.selection.any\',\n-                      v=[u\'published\']),\n-                 ]\n-        collection = self.portal[\'news\'][\'aggregator\']\n-        self.assertEqual(collection.sort_on, u\'effective\')\n+        query = [\n+            dict(\n+                i=u"portal_type",\n+                o=u"plone.app.querystring.operation.selection.any",\n+                v=[u"News Item"],\n+            ),\n+            dict(\n+                i=u"review_state",\n+                o=u"plone.app.querystring.operation.selection.any",\n+                v=[u"published"],\n+            ),\n+        ]\n+        collection = self.portal["news"]["aggregator"]\n+        self.assertEqual(collection.sort_on, u"effective")\n         self.assertEqual(collection.sort_reversed, True)\n         self.assertEqual(collection.query, query)\n-        self.assertEqual(collection.getLayout(), \'summary_view\')\n+        self.assertEqual(collection.getLayout(), "summary_view")\ndiff --git a/plone/app/contenttypes/tests/test_document.py b/plone/app/contenttypes/tests/test_document.py\nindex f18990e73..a3c7f5675 100644\n--- a/plone/app/contenttypes/tests/test_document.py\n+++ b/plone/app/contenttypes/tests/test_document.py\n@@ -1,7 +1,11 @@\n # -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IDocument\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)  # noqa\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -22,65 +26,54 @@ class DocumentIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n     def test_schema(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Document\')\n+        fti = queryUtility(IDexterityFTI, name="Document")\n         schema = fti.lookupSchema()\n-        self.assertTrue(schema.getName().endswith(\'_0_Document\'))\n+        self.assertTrue(schema.getName().endswith("_0_Document"))\n \n     def test_fti(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Document\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="Document")\n         self.assertNotEqual(None, fti)\n \n     def test_factory(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Document\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="Document")\n         factory = fti.factory\n         new_object = createObject(factory)\n         self.assertTrue(IDocument.providedBy(new_object))\n \n     def test_adding(self):\n-        self.portal.invokeFactory(\n-            \'Document\',\n-            \'doc1\'\n-        )\n-        self.assertTrue(IDocument.providedBy(self.portal[\'doc1\']))\n+        self.portal.invokeFactory("Document", "doc1")\n+        self.assertTrue(IDocument.providedBy(self.portal["doc1"]))\n \n     def test_view(self):\n-        self.portal.invokeFactory(\'Document\', \'document\')\n-        document = self.portal[\'document\']\n-        document.title = \'My Document\'\n-        document.description = \'This is my document.\'\n+        self.portal.invokeFactory("Document", "document")\n+        document = self.portal["document"]\n+        document.title = "My Document"\n+        document.description = "This is my document."\n         document.text = RichTextValue(\n-            u\'Lorem ipsum\',\n-            \'text/plain\',\n-            \'text/html\',\n+            u"Lorem ipsum",\n+            "text/plain",\n+            "text/html",\n         )\n-        self.request.set(\'URL\', document.absolute_url())\n-        self.request.set(\'ACTUAL_URL\', document.absolute_url())\n+        self.request.set("URL", document.absolute_url())\n+        self.request.set("ACTUAL_URL", document.absolute_url())\n         alsoProvides(self.request, IPloneFormLayer)\n-        view = document.restrictedTraverse(\'@@view\')\n+        view = document.restrictedTraverse("@@view")\n         self.assertEqual(view.request.response.status, 200)\n         output = view()\n         self.assertTrue(output)\n-        self.assertTrue(\'My Document\' in output)\n-        self.assertTrue(\'This is my document.\' in output)\n-        self.assertTrue(\'Lorem ipsum\' in output)\n+        self.assertTrue("My Document" in output)\n+        self.assertTrue("This is my document." in output)\n+        self.assertTrue("Lorem ipsum" in output)\n \n     def tearDown(self):\n-        if \'document\' in self.portal.objectIds():\n-            self.portal.manage_delObjects(ids=\'document\')\n+        if "document" in self.portal.objectIds():\n+            self.portal.manage_delObjects(ids="document")\n \n \n class DocumentFunctionalTest(unittest.TestCase):\n@@ -88,30 +81,33 @@ class DocumentFunctionalTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {0}:{1}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_add_document(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(url=\'http://nohost/plone/++add++Document\').click()\n-        widget = \'form.widgets.IDublinCore.title\'\n-        self.browser.getControl(name=widget).value = \'My document\'\n-        widget = \'form.widgets.IDublinCore.description\'\n-        self.browser.getControl(name=widget).value = \'This is my document.\'\n-        widget = \'form.widgets.IRichTextBehavior.text\'\n-        self.browser.getControl(name=widget).value = \'Lorem Ipsum\'\n-        widget = \'form.widgets.IShortName.id\'\n-        self.browser.getControl(name=widget).value = \'my-special-document\'\n-        self.browser.getControl(\'Save\').click()\n-        self.assertTrue(self.browser.url.endswith(\'my-special-document/view\'))\n-        self.assertTrue(\'My document\' in self.browser.contents)\n-        self.assertTrue(\'This is my document\' in self.browser.contents)\n-        self.assertTrue(\'Lorem Ipsum\' in self.browser.contents)\n+        self.browser.getLink(url="http://nohost/plone/++add++Document").click()\n+        widget = "form.widgets.IDublinCore.title"\n+        self.browser.getControl(name=widget).value = "My document"\n+        widget = "form.widgets.IDublinCore.description"\n+        self.browser.getControl(name=widget).value = "This is my document."\n+        widget = "form.widgets.IRichTextBehavior.text"\n+        self.browser.getControl(name=widget).value = "Lorem Ipsum"\n+        widget = "form.widgets.IShortName.id"\n+        self.browser.getControl(name=widget).value = "my-special-document"\n+        self.browser.getControl("Save").click()\n+        self.assertTrue(self.browser.url.endswith("my-special-document/view"))\n+        self.assertTrue("My document" in self.browser.contents)\n+        self.assertTrue("This is my document" in self.browser.contents)\n+        self.assertTrue("Lorem Ipsum" in self.browser.contents)\ndiff --git a/plone/app/contenttypes/tests/test_event.py b/plone/app/contenttypes/tests/test_event.py\nindex b7df78cbb..49c67492e 100644\n--- a/plone/app/contenttypes/tests/test_event.py\n+++ b/plone/app/contenttypes/tests/test_event.py\n@@ -1,7 +1,11 @@\n # -*- coding: utf-8 -*-\n from datetime import datetime\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)  # noqa\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -22,61 +26,50 @@ class EventIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        self.request[\'LANGUAGE\'] = \'en\'\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        self.request["LANGUAGE"] = "en"\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n     def test_schema(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Event\')\n+        fti = queryUtility(IDexterityFTI, name="Event")\n         schema = fti.lookupSchema()\n-        self.assertTrue(schema.getName().endswith(\'_0_Event\'))\n+        self.assertTrue(schema.getName().endswith("_0_Event"))\n \n     def test_fti(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Event\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="Event")\n         self.assertNotEqual(None, fti)\n \n     def test_factory(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Event\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="Event")\n         factory = fti.factory\n         new_object = createObject(factory)\n         self.assertTrue(IEvent.providedBy(new_object))\n \n     def test_adding(self):\n-        self.portal.invokeFactory(\n-            \'Event\',\n-            \'doc1\'\n-        )\n-        self.assertTrue(IEvent.providedBy(self.portal[\'doc1\']))\n+        self.portal.invokeFactory("Event", "doc1")\n+        self.assertTrue(IEvent.providedBy(self.portal["doc1"]))\n \n     def test_view(self):\n-        self.portal.invokeFactory(\'Event\', \'event\')\n-        event = self.portal[\'event\']\n-        event.title = \'My Event\'\n-        event.description = \'This is my event.\'\n+        self.portal.invokeFactory("Event", "event")\n+        event = self.portal["event"]\n+        event.title = "My Event"\n+        event.description = "This is my event."\n         event.start = datetime(2013, 1, 1, 10, 0)\n         event.end = datetime(2013, 1, 1, 12, 0)\n \n-        self.request.set(\'URL\', event.absolute_url())\n-        self.request.set(\'ACTUAL_URL\', event.absolute_url())\n+        self.request.set("URL", event.absolute_url())\n+        self.request.set("ACTUAL_URL", event.absolute_url())\n         alsoProvides(self.request, IPloneFormLayer)\n-        view = event.restrictedTraverse(\'@@view\')\n+        view = event.restrictedTraverse("@@view")\n \n         # TODO: start/end are not set??\n         #\n         self.assertTrue(view())\n         self.assertEqual(view.request.response.status, 200)\n-        self.assertTrue(\'My Event\' in view())\n-        self.assertTrue(\'This is my event.\' in view())\n+        self.assertTrue("My Event" in view())\n+        self.assertTrue("This is my event." in view())\n \n \n class EventFunctionalTest(unittest.TestCase):\n@@ -84,43 +77,46 @@ class EventFunctionalTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD, )\n+            "Authorization",\n+            "Basic {0}:{1}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_add_event(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'Event\').click()\n+        self.browser.getLink("Event").click()\n         self.browser.getControl(\n-            name=\'form.widgets.IDublinCore.title\'\n-        ).value = \'My event\'\n+            name="form.widgets.IDublinCore.title"\n+        ).value = "My event"\n         self.browser.getControl(\n-            name=\'form.widgets.IDublinCore.description\'\n-        ).value = \'This is my event.\'\n+            name="form.widgets.IDublinCore.description"\n+        ).value = "This is my event."\n         self.browser.getControl(\n-            name=\'form.widgets.IRichTextBehavior.text\'\n-        ).value = \'Lorem Ipsum\'\n+            name="form.widgets.IRichTextBehavior.text"\n+        ).value = "Lorem Ipsum"\n         self.browser.getControl(\n-            name=\'form.widgets.IEventBasic.start\'\n-        ).value = \'2013-01-01\'\n+            name="form.widgets.IEventBasic.start"\n+        ).value = "2013-01-01"\n         self.browser.getControl(\n-            name=\'form.widgets.IEventBasic.end\'\n-        ).value = \'2013-01-12\'\n+            name="form.widgets.IEventBasic.end"\n+        ).value = "2013-01-12"\n         self.browser.getControl(\n-            name=\'form.widgets.IShortName.id\'\n-        ).value = \'my-special-event\'\n-        self.browser.getControl(\'Save\').click()\n-\n-        self.assertTrue(self.browser.url.endswith(\'my-special-event/view\'))\n-        self.assertIn(\'My event\', self.browser.contents)\n-        self.assertIn(\'This is my event\', self.browser.contents)\n-        self.assertIn(\'Lorem Ipsum\', self.browser.contents)\n-        self.assertIn(\'2013-01-01\', self.browser.contents)\n-        self.assertIn(\'2013-01-12\', self.browser.contents)\n+            name="form.widgets.IShortName.id"\n+        ).value = "my-special-event"\n+        self.browser.getControl("Save").click()\n+\n+        self.assertTrue(self.browser.url.endswith("my-special-event/view"))\n+        self.assertIn("My event", self.browser.contents)\n+        self.assertIn("This is my event", self.browser.contents)\n+        self.assertIn("Lorem Ipsum", self.browser.contents)\n+        self.assertIn("2013-01-01", self.browser.contents)\n+        self.assertIn("2013-01-12", self.browser.contents)\ndiff --git a/plone/app/contenttypes/tests/test_file.py b/plone/app/contenttypes/tests/test_file.py\nindex f2bcdd6fa..a5a8ef4ab 100644\n--- a/plone/app/contenttypes/tests/test_file.py\n+++ b/plone/app/contenttypes/tests/test_file.py\n@@ -1,8 +1,12 @@\n # -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IFile\n from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)  # noqa\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -26,86 +30,75 @@ class FileIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n     def test_schema(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'File\')\n+        fti = queryUtility(IDexterityFTI, name="File")\n         schema = fti.lookupSchema()\n-        self.assertTrue(schema.getName().endswith(\'_0_File\'))\n+        self.assertTrue(schema.getName().endswith("_0_File"))\n \n     def test_fti(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'File\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="File")\n         self.assertNotEqual(None, fti)\n \n     def test_factory(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'File\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="File")\n         factory = fti.factory\n         new_object = createObject(factory)\n         self.assertTrue(IFile.providedBy(new_object))\n \n     def test_adding(self):\n-        self.portal.invokeFactory(\n-            \'File\',\n-            \'doc1\'\n-        )\n-        self.assertTrue(IFile.providedBy(self.portal[\'doc1\']))\n+        self.portal.invokeFactory("File", "doc1")\n+        self.assertTrue(IFile.providedBy(self.portal["doc1"]))\n \n     def test_view(self):\n-        self.portal.invokeFactory(\'File\', \'file\')\n-        file1 = self.portal[\'file\']\n-        file1.title = \'My File\'\n-        file1.description = \'This is my file.\'\n-        self.request.set(\'URL\', file1.absolute_url())\n-        self.request.set(\'ACTUAL_URL\', file1.absolute_url())\n+        self.portal.invokeFactory("File", "file")\n+        file1 = self.portal["file"]\n+        file1.title = "My File"\n+        file1.description = "This is my file."\n+        self.request.set("URL", file1.absolute_url())\n+        self.request.set("ACTUAL_URL", file1.absolute_url())\n         alsoProvides(self.request, IPloneFormLayer)\n-        view = file1.restrictedTraverse(\'@@view\')\n+        view = file1.restrictedTraverse("@@view")\n \n         self.assertTrue(view())\n         self.assertEqual(view.request.response.status, 200)\n-        self.assertTrue(\'My File\' in view())\n-        self.assertTrue(\'This is my file.\' in view())\n+        self.assertTrue("My File" in view())\n+        self.assertTrue("This is my file." in view())\n \n     def test_view_no_video_audio_tag(self):\n-        self.portal.invokeFactory(\'File\', \'file\')\n-        file = self.portal[\'file\']\n+        self.portal.invokeFactory("File", "file")\n+        file = self.portal["file"]\n         file.file = NamedFile()\n-        file.file.contentType = \'application/pdf\'\n+        file.file.contentType = "application/pdf"\n         alsoProvides(self.request, IPloneAppContenttypesLayer)\n-        view = file.restrictedTraverse(\'@@file_view\')\n+        view = file.restrictedTraverse("@@file_view")\n         rendered = view()\n-        self.assertTrue(\'</audio>\' not in rendered)\n-        self.assertTrue(\'</video>\' not in rendered)\n+        self.assertTrue("</audio>" not in rendered)\n+        self.assertTrue("</video>" not in rendered)\n \n     def test_view_video_tag(self):\n-        self.portal.invokeFactory(\'File\', \'file\')\n-        file = self.portal[\'file\']\n+        self.portal.invokeFactory("File", "file")\n+        file = self.portal["file"]\n         file.file = NamedFile()\n-        file.file.contentType = \'audio/mp3\'\n+        file.file.contentType = "audio/mp3"\n         alsoProvides(self.request, IPloneAppContenttypesLayer)\n-        view = file.restrictedTraverse(\'@@file_view\')\n+        view = file.restrictedTraverse("@@file_view")\n         rendered = view()\n-        self.assertTrue(\'</audio>\' in rendered)\n+        self.assertTrue("</audio>" in rendered)\n \n     def test_view_audio_tag(self):\n-        self.portal.invokeFactory(\'File\', \'file\')\n-        file = self.portal[\'file\']\n+        self.portal.invokeFactory("File", "file")\n+        file = self.portal["file"]\n         file.file = NamedFile()\n-        file.file.contentType = \'video/ogv\'\n+        file.file.contentType = "video/ogv"\n         alsoProvides(self.request, IPloneAppContenttypesLayer)\n-        view = file.restrictedTraverse(\'@@file_view\')\n+        view = file.restrictedTraverse("@@file_view")\n         rendered = view()\n-        self.assertTrue(\'</video>\' in rendered)\n+        self.assertTrue("</video>" in rendered)\n \n \n class FileFunctionalTest(unittest.TestCase):\n@@ -113,111 +106,114 @@ class FileFunctionalTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n         self.icons = self.portal.restrictedTraverse("@@iconresolver")\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {0}:{1}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_add_file(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'File\').click()\n-        widget = \'form.widgets.title\'\n-        self.browser.getControl(name=widget).value = \'My file\'\n-        widget = \'form.widgets.description\'\n-        self.browser.getControl(name=widget).value = \'This is my file.\'\n-        file_path = os.path.join(os.path.dirname(__file__), \'image.jpg\')\n-        file_ctl = self.browser.getControl(name=\'form.widgets.file\')\n-        with io.FileIO(file_path, \'rb\') as f:\n-            file_ctl.add_file(f, \'image/png\', \'image.jpg\')\n-        self.browser.getControl(\'Save\').click()\n-        self.assertTrue(self.browser.url.endswith(\'image.jpg/view\'))\n-        self.assertTrue(\'My file\' in self.browser.contents)\n-        self.assertTrue(\'This is my file\' in self.browser.contents)\n+        self.browser.getLink("File").click()\n+        widget = "form.widgets.title"\n+        self.browser.getControl(name=widget).value = "My file"\n+        widget = "form.widgets.description"\n+        self.browser.getControl(name=widget).value = "This is my file."\n+        file_path = os.path.join(os.path.dirname(__file__), "image.jpg")\n+        file_ctl = self.browser.getControl(name="form.widgets.file")\n+        with io.FileIO(file_path, "rb") as f:\n+            file_ctl.add_file(f, "image/png", "image.jpg")\n+        self.browser.getControl("Save").click()\n+        self.assertTrue(self.browser.url.endswith("image.jpg/view"))\n+        self.assertTrue("My file" in self.browser.contents)\n+        self.assertTrue("This is my file" in self.browser.contents)\n \n     def test_shortname_file(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'File\').click()\n-        widget = \'form.widgets.title\'\n-        self.browser.getControl(name=widget).value = \'My file\'\n-        widget = \'form.widgets.IShortName.id\'\n-        self.browser.getControl(name=widget).value = \'my-special-file\'\n-        file_path = os.path.join(os.path.dirname(__file__), \'image.jpg\')\n-        file_ctl = self.browser.getControl(name=\'form.widgets.file\')\n-        with io.FileIO(file_path, \'rb\') as f:\n-            file_ctl.add_file(f, \'image/png\', \'image.jpg\')\n-        self.browser.getControl(\'Save\').click()\n-        self.assertTrue(self.browser.url.endswith(\'my-special-file/view\'))\n+        self.browser.getLink("File").click()\n+        widget = "form.widgets.title"\n+        self.browser.getControl(name=widget).value = "My file"\n+        widget = "form.widgets.IShortName.id"\n+        self.browser.getControl(name=widget).value = "my-special-file"\n+        file_path = os.path.join(os.path.dirname(__file__), "image.jpg")\n+        file_ctl = self.browser.getControl(name="form.widgets.file")\n+        with io.FileIO(file_path, "rb") as f:\n+            file_ctl.add_file(f, "image/png", "image.jpg")\n+        self.browser.getControl("Save").click()\n+        self.assertTrue(self.browser.url.endswith("my-special-file/view"))\n \n     def test_mime_icon_pdf_for_file_(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'File\').click()\n-\n-        widget = \'form.widgets.title\'\n-        self.browser.getControl(name=widget).value = \'My file\'\n-        widget = \'form.widgets.description\'\n-        self.browser.getControl(name=widget).value = \'This is my pdf file.\'\n-        file_path = os.path.join(os.path.dirname(__file__), \'file.pdf\')\n-        file_ctl = self.browser.getControl(name=\'form.widgets.file\')\n-        with io.FileIO(file_path, \'rb\') as f:\n-            file_ctl.add_file(f, \'application/pdf\', \'file.pdf\')\n-        self.browser.getControl(\'Save\').click()\n-        self.assertTrue(self.browser.url.endswith(\'file.pdf/view\'))\n+        self.browser.getLink("File").click()\n+\n+        widget = "form.widgets.title"\n+        self.browser.getControl(name=widget).value = "My file"\n+        widget = "form.widgets.description"\n+        self.browser.getControl(name=widget).value = "This is my pdf file."\n+        file_path = os.path.join(os.path.dirname(__file__), "file.pdf")\n+        file_ctl = self.browser.getControl(name="form.widgets.file")\n+        with io.FileIO(file_path, "rb") as f:\n+            file_ctl.add_file(f, "application/pdf", "file.pdf")\n+        self.browser.getControl("Save").click()\n+        self.assertTrue(self.browser.url.endswith("file.pdf/view"))\n         # check icon\n         self.assertEqual(\n-            \'http://nohost/plone/++plone++bootstrap-icons/file-earmark-pdf.svg\',\n-            self._get_icon_url(self.portal["file.pdf"].file.contentType))\n+            "http://nohost/plone/++plone++bootstrap-icons/file-earmark-pdf.svg",\n+            self._get_icon_url(self.portal["file.pdf"].file.contentType),\n+        )\n \n     def test_alternative_mime_icon_doc_for_file(self):\n         mtr = self.portal.mimetypes_registry\n-        mime_doc = mtr.lookup(\'application/msword\')[0]\n-        mime_doc.icon_path = \'custom.png\'\n+        mime_doc = mtr.lookup("application/msword")[0]\n+        mime_doc.icon_path = "custom.png"\n         transaction.commit()\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'File\').click()\n-\n-        widget = \'form.widgets.title\'\n-        self.browser.getControl(name=widget).value = \'My file\'\n-        widget = \'form.widgets.description\'\n-        self.browser.getControl(name=widget).value = \'This is my doc file.\'\n-        file_path = os.path.join(os.path.dirname(__file__), \'file.doc\')\n-        file_ctl = self.browser.getControl(name=\'form.widgets.file\')\n-        with io.FileIO(file_path, \'rb\') as f:\n-            file_ctl.add_file(f, \'application/msword\', \'file.doc\')\n-        self.browser.getControl(\'Save\').click()\n-        self.assertTrue(self.browser.url.endswith(\'file.doc/view\'))\n+        self.browser.getLink("File").click()\n+\n+        widget = "form.widgets.title"\n+        self.browser.getControl(name=widget).value = "My file"\n+        widget = "form.widgets.description"\n+        self.browser.getControl(name=widget).value = "This is my doc file."\n+        file_path = os.path.join(os.path.dirname(__file__), "file.doc")\n+        file_ctl = self.browser.getControl(name="form.widgets.file")\n+        with io.FileIO(file_path, "rb") as f:\n+            file_ctl.add_file(f, "application/msword", "file.doc")\n+        self.browser.getControl("Save").click()\n+        self.assertTrue(self.browser.url.endswith("file.doc/view"))\n         # check icon\n         self.assertEqual(\n-            \'http://nohost/plone/++plone++bootstrap-icons/file-earmark-richtext.svg\',\n-            self._get_icon_url(self.portal["file.doc"].file.contentType))\n+            "http://nohost/plone/++plone++bootstrap-icons/file-earmark-richtext.svg",\n+            self._get_icon_url(self.portal["file.doc"].file.contentType),\n+        )\n \n     def test_mime_icon_odt_for_file_(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'File\').click()\n-\n-        widget = \'form.widgets.title\'\n-        self.browser.getControl(name=widget).value = \'My file\'\n-        widget = \'form.widgets.description\'\n-        self.browser.getControl(name=widget).value = \'This is my odt file.\'\n-        file_path = os.path.join(os.path.dirname(__file__), \'file.odt\')\n-        file_ctl = self.browser.getControl(name=\'form.widgets.file\')\n-        with io.FileIO(file_path, \'rb\') as f:\n-            file_ctl.add_file(\n-                f,\n-                \'application/vnd.oasis.opendocument.text\',\n-                \'file.odt\')\n-        self.browser.getControl(\'Save\').click()\n-        self.assertTrue(self.browser.url.endswith(\'file.odt/view\'))\n+        self.browser.getLink("File").click()\n+\n+        widget = "form.widgets.title"\n+        self.browser.getControl(name=widget).value = "My file"\n+        widget = "form.widgets.description"\n+        self.browser.getControl(name=widget).value = "This is my odt file."\n+        file_path = os.path.join(os.path.dirname(__file__), "file.odt")\n+        file_ctl = self.browser.getControl(name="form.widgets.file")\n+        with io.FileIO(file_path, "rb") as f:\n+            file_ctl.add_file(f, "application/vnd.oasis.opendocument.text", "file.odt")\n+        self.browser.getControl("Save").click()\n+        self.assertTrue(self.browser.url.endswith("file.odt/view"))\n         # check icon\n         self.assertEqual(\n-            \'http://nohost/plone/++plone++bootstrap-icons/file-earmark-richtext.svg\',\n-            self._get_icon_url(self.portal["file.odt"].file.contentType))\n+            "http://nohost/plone/++plone++bootstrap-icons/file-earmark-richtext.svg",\n+            self._get_icon_url(self.portal["file.odt"].file.contentType),\n+        )\n \n     def _get_icon_url(self, mime_type):\n         return self.icons.url("mimetype-" + mime_type)\ndiff --git a/plone/app/contenttypes/tests/test_folder.py b/plone/app/contenttypes/tests/test_folder.py\nindex e8bd54df6..f668e71db 100644\n--- a/plone/app/contenttypes/tests/test_folder.py\n+++ b/plone/app/contenttypes/tests/test_folder.py\n@@ -1,8 +1,12 @@\n # -*- coding: utf-8 -*-\n from plone.app.contenttypes.browser.folder import FolderView\n from plone.app.contenttypes.interfaces import IFolder\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)  # noqa\n from plone.app.contenttypes.tests.test_image import dummy_image\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n@@ -21,40 +25,29 @@ class FolderIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n     def test_schema(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Folder\')\n+        fti = queryUtility(IDexterityFTI, name="Folder")\n         schema = fti.lookupSchema()\n-        self.assertTrue(schema.getName().endswith(\'_0_Folder\'))\n+        self.assertTrue(schema.getName().endswith("_0_Folder"))\n \n     def test_fti(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Folder\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="Folder")\n         self.assertNotEqual(None, fti)\n \n     def test_factory(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Folder\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="Folder")\n         factory = fti.factory\n         new_object = createObject(factory)\n         self.assertTrue(IFolder.providedBy(new_object))\n \n     def test_adding(self):\n-        self.portal.invokeFactory(\n-            \'Folder\',\n-            \'doc1\'\n-        )\n-        self.assertTrue(IFolder.providedBy(self.portal[\'doc1\']))\n+        self.portal.invokeFactory("Folder", "doc1")\n+        self.assertTrue(IFolder.providedBy(self.portal["doc1"]))\n \n \n class FolderViewIntegrationTest(unittest.TestCase):\n@@ -62,47 +55,47 @@ class FolderViewIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n     def test_result_filtering(self):\n         """Test, if portal_state\'s friendly_types and the result method\'s\n         keyword arguments are included in the query.\n         """\n \n-        self.portal.invokeFactory(\'News Item\', \'newsitem\')\n-        self.portal.invokeFactory(\'Document\', \'document\')\n+        self.portal.invokeFactory("News Item", "newsitem")\n+        self.portal.invokeFactory("Document", "document")\n         view = FolderView(self.portal, self.request)\n \n         # Test, if all results are found.\n-        view.portal_state.friendly_types = lambda: [\'Document\', \'News Item\']\n+        view.portal_state.friendly_types = lambda: ["Document", "News Item"]\n         res = view.results()\n         self.assertEqual(len(res), 2)\n \n         # Test, if friendly_types does filter for types.\n-        view.portal_state.friendly_types = lambda: [\'Document\']\n+        view.portal_state.friendly_types = lambda: ["Document"]\n         res = view.results()\n         self.assertEqual(len(res), 1)\n \n         # Test, if friendly_types does filter for types.\n-        view.portal_state.friendly_types = lambda: [\'NotExistingType\']\n+        view.portal_state.friendly_types = lambda: ["NotExistingType"]\n         res = view.results()\n         self.assertEqual(len(res), 0)\n \n         # Test, if kwargs filtering is applied.\n-        view.portal_state.friendly_types = lambda: [\'NotExistingType\']\n+        view.portal_state.friendly_types = lambda: ["NotExistingType"]\n         res = view.results(\n-            object_provides=\'plone.app.contenttypes.interfaces.IDocument\'\n+            object_provides="plone.app.contenttypes.interfaces.IDocument"\n         )\n         self.assertEqual(len(res), 1)\n \n     def test_result_batching(self):\n         for idx in range(5):\n-            self.portal.invokeFactory(\'Document\', \'document{}\'.format(idx))\n+            self.portal.invokeFactory("Document", "document{}".format(idx))\n         request = self.request.clone()\n-        request.form[\'b_size\'] = 5\n+        request.form["b_size"] = 5\n         view = FolderView(self.portal, request)\n \n         batch = view.batch()\n@@ -110,14 +103,14 @@ def test_result_batching(self):\n         self.assertEqual(len([item for item in batch]), 5)\n         self.assertFalse(batch.has_next)\n \n-        self.portal.invokeFactory(\'Document\', \'document5\')\n+        self.portal.invokeFactory("Document", "document5")\n \n         batch = view.batch()\n         self.assertEqual(batch.length, 6)\n         self.assertEqual(len([item for item in batch]), 6)\n         self.assertFalse(batch.has_next)\n \n-        self.portal.invokeFactory(\'Document\', \'document6\')\n+        self.portal.invokeFactory("Document", "document6")\n \n         batch = view.batch()\n         self.assertEqual(batch.length, 5)\n@@ -131,39 +124,42 @@ class FolderFunctionalTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {0}:{1}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_add_folder(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(url=\'http://nohost/plone/++add++Folder\').click()\n-        widget = \'form.widgets.IDublinCore.title\'\n-        self.browser.getControl(name=widget).value = \'My folder\'\n-        widget = \'form.widgets.IShortName.id\'\n-        self.browser.getControl(name=widget).value = \'\'\n-        widget = \'form.widgets.IDublinCore.description\'\n-        self.browser.getControl(name=widget).value = \'This is my folder.\'\n-        self.browser.getControl(\'Save\').click()\n-        self.assertTrue(self.browser.url.endswith(\'my-folder/view\'))\n-        self.assertTrue(\'My folder\' in self.browser.contents)\n-        self.assertTrue(\'This is my folder\' in self.browser.contents)\n+        self.browser.getLink(url="http://nohost/plone/++add++Folder").click()\n+        widget = "form.widgets.IDublinCore.title"\n+        self.browser.getControl(name=widget).value = "My folder"\n+        widget = "form.widgets.IShortName.id"\n+        self.browser.getControl(name=widget).value = ""\n+        widget = "form.widgets.IDublinCore.description"\n+        self.browser.getControl(name=widget).value = "This is my folder."\n+        self.browser.getControl("Save").click()\n+        self.assertTrue(self.browser.url.endswith("my-folder/view"))\n+        self.assertTrue("My folder" in self.browser.contents)\n+        self.assertTrue("This is my folder" in self.browser.contents)\n \n     def test_add_folder_with_shortname(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(url=\'http://nohost/plone/++add++Folder\').click()\n-        widget = \'form.widgets.IDublinCore.title\'\n-        self.browser.getControl(name=widget).value = \'My folder\'\n-        widget = \'form.widgets.IShortName.id\'\n-        self.browser.getControl(name=widget).value = \'my-special-folder\'\n-        self.browser.getControl(\'Save\').click()\n-        self.assertTrue(self.browser.url.endswith(\'my-special-folder/view\'))\n+        self.browser.getLink(url="http://nohost/plone/++add++Folder").click()\n+        widget = "form.widgets.IDublinCore.title"\n+        self.browser.getControl(name=widget).value = "My folder"\n+        widget = "form.widgets.IShortName.id"\n+        self.browser.getControl(name=widget).value = "my-special-folder"\n+        self.browser.getControl("Save").click()\n+        self.assertTrue(self.browser.url.endswith("my-special-folder/view"))\n \n \n class FolderViewFunctionalTest(unittest.TestCase):\n@@ -171,67 +167,73 @@ class FolderViewFunctionalTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.portal_url = self.portal.absolute_url()\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\', title=\'My Folder\')\n+        self.portal.invokeFactory("Folder", id="folder", title="My Folder")\n         self.folder = self.portal.folder\n         self.folder_url = self.folder.absolute_url()\n-        self.folder.invokeFactory(\'Document\', id=\'doc1\', title=\'Document 1\')\n+        self.folder.invokeFactory("Document", id="doc1", title="Document 1")\n         import transaction\n+\n         transaction.commit()\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {0}:{1}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_folder_view(self):\n-        self.browser.open(self.folder_url + \'/view\')\n-        self.assertIn(\'My Folder\', self.browser.contents)\n-        self.assertIn(\'Document 1\', self.browser.contents)\n+        self.browser.open(self.folder_url + "/view")\n+        self.assertIn("My Folder", self.browser.contents)\n+        self.assertIn("Document 1", self.browser.contents)\n \n     def test_folder_summary_view(self):\n-        self.browser.open(self.folder_url + \'/summary_view\')\n-        self.assertIn(\'My Folder\', self.browser.contents)\n-        self.assertIn(\'Document 1\', self.browser.contents)\n+        self.browser.open(self.folder_url + "/summary_view")\n+        self.assertIn("My Folder", self.browser.contents)\n+        self.assertIn("Document 1", self.browser.contents)\n \n     def test_folder_full_view(self):\n-        self.browser.open(self.folder_url + \'/full_view\')\n-        self.assertIn(\'My Folder\', self.browser.contents)\n-        self.assertIn(\'Document 1\', self.browser.contents)\n+        self.browser.open(self.folder_url + "/full_view")\n+        self.assertIn("My Folder", self.browser.contents)\n+        self.assertIn("Document 1", self.browser.contents)\n \n     def test_folder_tabular_view(self):\n-        self.browser.open(self.folder_url + \'/tabular_view\')\n-        self.assertIn(\'My Folder\', self.browser.contents)\n-        self.assertIn(\'Document 1\', self.browser.contents)\n+        self.browser.open(self.folder_url + "/tabular_view")\n+        self.assertIn("My Folder", self.browser.contents)\n+        self.assertIn("Document 1", self.browser.contents)\n \n     def test_folder_album_view(self):\n-        self.folder.invokeFactory(\'Image\', id=\'image1\', title=\'Image 1\')\n-        img1 = self.folder[\'image1\']\n+        self.folder.invokeFactory("Image", id="image1", title="Image 1")\n+        img1 = self.folder["image1"]\n         img1.image = dummy_image()\n         import transaction\n+\n         transaction.commit()\n-        self.browser.open(self.folder_url + \'/album_view\')\n-        self.assertIn(\'My Folder\', self.browser.contents)\n+        self.browser.open(self.folder_url + "/album_view")\n+        self.assertIn("My Folder", self.browser.contents)\n         self.assertIn(\n             \'<img src="http://nohost/plone/folder/image1/@@images\',\n-            self.browser.contents)\n+            self.browser.contents,\n+        )\n \n     def test_list_item_wout_title(self):\n-        """In content listings, if a content object has no title use it\'s id.\n-        """\n-        self.folder.invokeFactory(\'Document\', id=\'doc_wout_title\')\n+        """In content listings, if a content object has no title use it\'s id."""\n+        self.folder.invokeFactory("Document", id="doc_wout_title")\n         import transaction\n+\n         transaction.commit()\n \n         # Document should be shown in listing view (and it\'s siblings)\n         self.browser.open(self.folder_url + "/listing_view")\n-        self.assertIn(\'doc_wout_title\', self.browser.contents)\n+        self.assertIn("doc_wout_title", self.browser.contents)\n \n         # And also in tabular view\n         self.browser.open(self.folder_url + "/tabular_view")\n-        self.assertIn(\'doc_wout_title\', self.browser.contents)\n+        self.assertIn("doc_wout_title", self.browser.contents)\ndiff --git a/plone/app/contenttypes/tests/test_image.py b/plone/app/contenttypes/tests/test_image.py\nindex 58d305c54..f65d2df16 100644\n--- a/plone/app/contenttypes/tests/test_image.py\n+++ b/plone/app/contenttypes/tests/test_image.py\n@@ -1,7 +1,11 @@\n # -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IImage\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)  # noqa\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -19,15 +23,13 @@\n import unittest\n \n \n-def dummy_image(filename=u\'image.jpg\'):\n+def dummy_image(filename=u"image.jpg"):\n     from plone.namedfile.file import NamedBlobImage\n+\n     filename = os.path.join(os.path.dirname(__file__), filename)\n-    with open(filename, \'rb\') as f:\n+    with open(filename, "rb") as f:\n         image_data = f.read()\n-    return NamedBlobImage(\n-        data=image_data,\n-        filename=filename\n-    )\n+    return NamedBlobImage(data=image_data, filename=filename)\n \n \n class ImageIntegrationTest(unittest.TestCase):\n@@ -35,40 +37,29 @@ class ImageIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n     def test_schema(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Image\')\n+        fti = queryUtility(IDexterityFTI, name="Image")\n         schema = fti.lookupSchema()\n-        self.assertTrue(schema.getName().endswith(\'_0_Image\'))\n+        self.assertTrue(schema.getName().endswith("_0_Image"))\n \n     def test_fti(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Image\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="Image")\n         self.assertNotEqual(None, fti)\n \n     def test_factory(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Image\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="Image")\n         factory = fti.factory\n         new_object = createObject(factory)\n         self.assertTrue(IImage.providedBy(new_object))\n \n     def test_adding(self):\n-        self.portal.invokeFactory(\n-            \'Image\',\n-            \'doc1\'\n-        )\n-        self.assertTrue(IImage.providedBy(self.portal[\'doc1\']))\n+        self.portal.invokeFactory("Image", "doc1")\n+        self.assertTrue(IImage.providedBy(self.portal["doc1"]))\n \n \n class ImageViewIntegrationTest(unittest.TestCase):\n@@ -76,54 +67,54 @@ class ImageViewIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     if six.PY2:\n+\n         def assertRegex(self, value, pattern):\n             # Python 2 backwards compatibility\n             import re\n+\n             if not re.search(pattern, value):\n-                raise self.failureException(\n-                    \'%r not found in %s\' % (pattern, value)\n-                )\n+                raise self.failureException("%r not found in %s" % (pattern, value))\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Image\', \'image\')\n-        image = self.portal[\'image\']\n-        image.title = \'My Image\'\n-        image.description = \'This is my image.\'\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Image", "image")\n+        image = self.portal["image"]\n+        image.title = "My Image"\n+        image.description = "This is my image."\n         image.image = dummy_image()\n         self.image = image\n-        self.request.set(\'URL\', image.absolute_url())\n-        self.request.set(\'ACTUAL_URL\', image.absolute_url())\n+        self.request.set("URL", image.absolute_url())\n+        self.request.set("ACTUAL_URL", image.absolute_url())\n         alsoProvides(self.request, IPloneFormLayer)\n \n     def test_image_view(self):\n-        view = self.image.restrictedTraverse(\'@@view\')\n+        view = self.image.restrictedTraverse("@@view")\n \n         self.assertTrue(view())\n         self.assertEqual(view.request.response.status, 200)\n-        self.assertTrue(\'My Image\' in view())\n-        self.assertTrue(\'This is my image.\' in view())\n-\n-# XXX: Not working. See ImageFunctionalTest test_image_view_fullscreen\n-# Problem seems to be that the image is not properly uploaded.\n-#    def test_image_view_fullscreen(self):\n-#        view = getMultiAdapter(\n-#            (self.image, self.request),\n-#            name=\'image_view_fullscreen\'\n-#        )\n-#\n-#        self.assertTrue(view())\n-#        self.assertEqual(view.request.response.status, 200)\n-#        self.assertTrue(\'image.jpg\' in view())\n+        self.assertTrue("My Image" in view())\n+        self.assertTrue("This is my image." in view())\n+\n+    # XXX: Not working. See ImageFunctionalTest test_image_view_fullscreen\n+    # Problem seems to be that the image is not properly uploaded.\n+    #    def test_image_view_fullscreen(self):\n+    #        view = getMultiAdapter(\n+    #            (self.image, self.request),\n+    #            name=\'image_view_fullscreen\'\n+    #        )\n+    #\n+    #        self.assertTrue(view())\n+    #        self.assertEqual(view.request.response.status, 200)\n+    #        self.assertTrue(\'image.jpg\' in view())\n \n     def test_svg_image(self):\n-        self.image.image = dummy_image(u\'image.svg\')\n-        scale = self.image.restrictedTraverse(\'@@images\')\n+        self.image.image = dummy_image(u"image.svg")\n+        scale = self.image.restrictedTraverse("@@images")\n         self.assertRegex(\n-            scale.scale(\'image\', scale=\'large\').tag(),\n+            scale.scale("image", scale="large").tag(),\n             r\'<img src="http://nohost/plone/image/@@images/[a-z0-9\\-]*.svg" alt="My Image" title="My Image" height="[a-z0-9\\-]*" width="[a-z0-9\\-]*" />\',  # noqa: E501\n         )\n \n@@ -133,68 +124,69 @@ class ImageFunctionalTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {0}:{1}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_add_image(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'Image\').click()\n-        widget = \'form.widgets.title\'\n-        self.browser.getControl(name=widget).value = \'My image\'\n-        widget = \'form.widgets.description\'\n-        self.browser.getControl(name=widget).value = \'This is my image.\'\n-        widget = \'form.widgets.IShortName.id\'\n-        self.browser.getControl(name=widget).value = \'my-special-image.jpg\'\n-        image_path = os.path.join(os.path.dirname(__file__), \'image.jpg\')\n-        image_ctl = self.browser.getControl(name=\'form.widgets.image\')\n-        with io.FileIO(image_path, \'rb\') as f:\n-            image_ctl.add_file(f, \'image/png\', \'image.jpg\')\n-        self.browser.getControl(\'Save\').click()\n-        self.assertTrue(self.browser.url.endswith(\'image.jpg/view\'))\n-        self.assertIn(\'My image\', self.browser.contents)\n-        self.assertIn(\'This is my image\', self.browser.contents)\n-        self.assertIn(\'image.jpg\', self.browser.contents)\n+        self.browser.getLink("Image").click()\n+        widget = "form.widgets.title"\n+        self.browser.getControl(name=widget).value = "My image"\n+        widget = "form.widgets.description"\n+        self.browser.getControl(name=widget).value = "This is my image."\n+        widget = "form.widgets.IShortName.id"\n+        self.browser.getControl(name=widget).value = "my-special-image.jpg"\n+        image_path = os.path.join(os.path.dirname(__file__), "image.jpg")\n+        image_ctl = self.browser.getControl(name="form.widgets.image")\n+        with io.FileIO(image_path, "rb") as f:\n+            image_ctl.add_file(f, "image/png", "image.jpg")\n+        self.browser.getControl("Save").click()\n+        self.assertTrue(self.browser.url.endswith("image.jpg/view"))\n+        self.assertIn("My image", self.browser.contents)\n+        self.assertIn("This is my image", self.browser.contents)\n+        self.assertIn("image.jpg", self.browser.contents)\n \n     def test_add_image_with_shortname(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'Image\').click()\n-        widget = \'form.widgets.title\'\n-        self.browser.getControl(name=widget).value = \'My image\'\n-        widget = \'form.widgets.IShortName.id\'\n-        self.browser.getControl(name=widget).value = \'my-special-image.jpg\'\n-        image_path = os.path.join(os.path.dirname(__file__), \'image.jpg\')\n-        image_ctl = self.browser.getControl(name=\'form.widgets.image\')\n-        with io.FileIO(image_path, \'rb\') as f:\n-            image_ctl.add_file(f, \'image/png\', \'image.jpg\')\n-        self.browser.getControl(\'Save\').click()\n-        self.assertTrue(self.browser.url.endswith(\'my-special-image.jpg/view\'))\n+        self.browser.getLink("Image").click()\n+        widget = "form.widgets.title"\n+        self.browser.getControl(name=widget).value = "My image"\n+        widget = "form.widgets.IShortName.id"\n+        self.browser.getControl(name=widget).value = "my-special-image.jpg"\n+        image_path = os.path.join(os.path.dirname(__file__), "image.jpg")\n+        image_ctl = self.browser.getControl(name="form.widgets.image")\n+        with io.FileIO(image_path, "rb") as f:\n+            image_ctl.add_file(f, "image/png", "image.jpg")\n+        self.browser.getControl("Save").click()\n+        self.assertTrue(self.browser.url.endswith("my-special-image.jpg/view"))\n \n     def test_image_view_fullscreen(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'Image\').click()\n-        self.assertTrue(\'Title\' in self.browser.contents)\n-        self.assertTrue(\'Description\' in self.browser.contents)\n-        self.assertTrue(\'Text\' in self.browser.contents)\n-        widget = \'form.widgets.title\'\n-        self.browser.getControl(name=widget).value = \'My image\'\n-        widget = \'form.widgets.description\'\n-        self.browser.getControl(name=widget).value = \'This is my image.\'\n-        image_path = os.path.join(os.path.dirname(__file__), \'image.jpg\')\n-        image_ctl = self.browser.getControl(name=\'form.widgets.image\')\n-        with io.FileIO(image_path, \'rb\') as f:\n-            image_ctl.add_file(f, \'image/png\', \'image.jpg\')\n-        self.browser.getControl(\'Save\').click()\n-        self.browser.getLink(url=\'/image_view_fullscreen\').click()\n-        self.assertTrue(\n-            self.browser.url.endswith(\'image.jpg/image_view_fullscreen\')\n-        )\n-        self.assertTrue(\'My image\' in self.browser.contents)\n-        self.assertTrue(\'Back to site\' in self.browser.contents)\n+        self.browser.getLink("Image").click()\n+        self.assertTrue("Title" in self.browser.contents)\n+        self.assertTrue("Description" in self.browser.contents)\n+        self.assertTrue("Text" in self.browser.contents)\n+        widget = "form.widgets.title"\n+        self.browser.getControl(name=widget).value = "My image"\n+        widget = "form.widgets.description"\n+        self.browser.getControl(name=widget).value = "This is my image."\n+        image_path = os.path.join(os.path.dirname(__file__), "image.jpg")\n+        image_ctl = self.browser.getControl(name="form.widgets.image")\n+        with io.FileIO(image_path, "rb") as f:\n+            image_ctl.add_file(f, "image/png", "image.jpg")\n+        self.browser.getControl("Save").click()\n+        self.browser.getLink(url="/image_view_fullscreen").click()\n+        self.assertTrue(self.browser.url.endswith("image.jpg/image_view_fullscreen"))\n+        self.assertTrue("My image" in self.browser.contents)\n+        self.assertTrue("Back to site" in self.browser.contents)\ndiff --git a/plone/app/contenttypes/tests/test_indexes.py b/plone/app/contenttypes/tests/test_indexes.py\nindex 7c3eebb85..c6d4cee1c 100644\n--- a/plone/app/contenttypes/tests/test_indexes.py\n+++ b/plone/app/contenttypes/tests/test_indexes.py\n@@ -1,5 +1,7 @@\n # -*- coding: utf-8 -*-\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)  # noqa\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.textfield.value import RichTextValue\n@@ -15,38 +17,17 @@ class CatalogIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\')\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder")\n         self.folder = self.portal.folder\n-        self.folder.invokeFactory(\n-            \'Document\',\n-            \'document\'\n-        )\n-        self.folder.invokeFactory(\n-            \'News Item\',\n-            \'news_item\'\n-        )\n-        self.folder.invokeFactory(\n-            \'Link\',\n-            \'link\'\n-        )\n-        self.folder.invokeFactory(\n-            \'Image\',\n-            \'image\'\n-        )\n-        self.folder.invokeFactory(\n-            \'File\',\n-            \'file\'\n-        )\n-        self.folder.invokeFactory(\n-            \'Collection\',\n-            \'collection\'\n-        )\n-        self.folder.invokeFactory(\n-            \'Folder\',\n-            \'folder\'\n-        )\n+        self.folder.invokeFactory("Document", "document")\n+        self.folder.invokeFactory("News Item", "news_item")\n+        self.folder.invokeFactory("Link", "link")\n+        self.folder.invokeFactory("Image", "image")\n+        self.folder.invokeFactory("File", "file")\n+        self.folder.invokeFactory("Collection", "collection")\n+        self.folder.invokeFactory("Folder", "folder")\n         self.document = self.folder.document\n         self.news_item = self.folder.news_item\n         self.link = self.folder.link\n@@ -55,142 +36,125 @@ def setUp(self):\n         self.collection = self.folder.collection\n         # Note: this changes self.folder.\n         self.folder = self.folder.folder\n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n \n     def test_id_in_searchable_text_index(self):\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=\'document\',\n-        ))\n-        self.assertEqual(len(brains), 1)\n-        self.assertEqual(\n-            brains[0].getPath(),\n-            \'/plone/folder/document\'\n+        brains = self.catalog.searchResults(\n+            dict(\n+                SearchableText="document",\n+            )\n         )\n+        self.assertEqual(len(brains), 1)\n+        self.assertEqual(brains[0].getPath(), "/plone/folder/document")\n \n     def test_title_in_searchable_text_index(self):\n-        self.document.title = \'My title\'\n+        self.document.title = "My title"\n         self.document.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=\'My title\',\n-        ))\n-        self.assertEqual(len(brains), 1)\n-        self.assertEqual(\n-            brains[0].getPath(),\n-            \'/plone/folder/document\'\n+        brains = self.catalog.searchResults(\n+            dict(\n+                SearchableText="My title",\n+            )\n         )\n+        self.assertEqual(len(brains), 1)\n+        self.assertEqual(brains[0].getPath(), "/plone/folder/document")\n \n     def test_description_in_searchable_text_index(self):\n-        self.document.description = \'My description\'\n+        self.document.description = "My description"\n         self.document.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=\'My description\',\n-        ))\n-        self.assertEqual(len(brains), 1)\n-        self.assertEqual(\n-            brains[0].getPath(),\n-            \'/plone/folder/document\'\n+        brains = self.catalog.searchResults(\n+            dict(\n+                SearchableText="My description",\n+            )\n         )\n+        self.assertEqual(len(brains), 1)\n+        self.assertEqual(brains[0].getPath(), "/plone/folder/document")\n \n     def test_subject_in_searchable_text_index(self):\n-        self.document.setSubject([\'Apples\', \'Oranges\', ])\n+        self.document.setSubject(\n+            [\n+                "Apples",\n+                "Oranges",\n+            ]\n+        )\n         self.document.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=\'Apples\',\n-        ))\n-        self.assertEqual(len(brains), 1)\n-        self.assertEqual(\n-            brains[0].getPath(),\n-            \'/plone/folder/document\'\n+        brains = self.catalog.searchResults(\n+            dict(\n+                SearchableText="Apples",\n+            )\n         )\n+        self.assertEqual(len(brains), 1)\n+        self.assertEqual(brains[0].getPath(), "/plone/folder/document")\n \n     def test_folder_fields_in_searchable_text_index(self):\n-        self.folder.title = \'Carpeta\'\n-        self.folder.description = \'My description\'\n+        self.folder.title = "Carpeta"\n+        self.folder.description = "My description"\n         self.folder.reindexObject()\n         # Description\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=\'My description\',\n-        ))\n-        self.assertEqual(len(brains), 1)\n-        self.assertEqual(\n-            brains[0].getPath(),\n-            \'/plone/folder/folder\'\n+        brains = self.catalog.searchResults(\n+            dict(\n+                SearchableText="My description",\n+            )\n         )\n-        # Title\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=\'Carpeta\',\n-        ))\n         self.assertEqual(len(brains), 1)\n-        self.assertEqual(\n-            brains[0].getPath(),\n-            \'/plone/folder/folder\'\n+        self.assertEqual(brains[0].getPath(), "/plone/folder/folder")\n+        # Title\n+        brains = self.catalog.searchResults(\n+            dict(\n+                SearchableText="Carpeta",\n+            )\n         )\n+        self.assertEqual(len(brains), 1)\n+        self.assertEqual(brains[0].getPath(), "/plone/folder/folder")\n \n     def test_remote_url_in_searchable_text_index(self):\n-        self.link.remoteUrl = \'http://www.plone.org/\'\n+        self.link.remoteUrl = "http://www.plone.org/"\n         self.link.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=\'plone\',\n-            portal_type=\'Link\',\n-        ))\n-        self.assertEqual(len(brains), 1)\n-        self.assertEqual(\n-            brains[0].getPath(),\n-            \'/plone/folder/link\'\n+        brains = self.catalog.searchResults(\n+            dict(\n+                SearchableText="plone",\n+                portal_type="Link",\n+            )\n         )\n+        self.assertEqual(len(brains), 1)\n+        self.assertEqual(brains[0].getPath(), "/plone/folder/link")\n \n     def test_text_in_searchable_text_index(self):\n-        self.document.text = RichTextValue(\n-            u\'Lorem ipsum\',\n-            \'text/plain\',\n-            \'text/html\'\n-        )\n-        self.news_item.text = RichTextValue(\n-            u\'Lorem ipsum\',\n-            \'text/plain\',\n-            \'text/html\'\n-        )\n-        self.collection.text = RichTextValue(\n-            u\'Lorem ipsum\',\n-            \'text/plain\',\n-            \'text/html\'\n-        )\n+        self.document.text = RichTextValue(u"Lorem ipsum", "text/plain", "text/html")\n+        self.news_item.text = RichTextValue(u"Lorem ipsum", "text/plain", "text/html")\n+        self.collection.text = RichTextValue(u"Lorem ipsum", "text/plain", "text/html")\n         self.document.reindexObject()\n         self.news_item.reindexObject()\n         self.collection.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'Lorem ipsum\',\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                SearchableText=u"Lorem ipsum",\n+            )\n+        )\n         self.assertEqual(len(brains), 3)\n \n         paths = [it.getPath() for it in brains]\n-        self.assertTrue(\n-            \'/plone/folder/news_item\' in paths\n-        )\n-        self.assertTrue(\n-            \'/plone/folder/document\' in paths\n-        )\n-        self.assertTrue(\n-            \'/plone/folder/collection\' in paths\n-        )\n+        self.assertTrue("/plone/folder/news_item" in paths)\n+        self.assertTrue("/plone/folder/document" in paths)\n+        self.assertTrue("/plone/folder/collection" in paths)\n \n     def test_html_stripped_searchable_text_index(self):\n-        """Ensure, html tags are stripped out from the content and not indexed.\n-        """\n+        """Ensure, html tags are stripped out from the content and not indexed."""\n         self.document.text = RichTextValue(\n-            u\'<p>Lorem <b>ipsum</b></p>\',\n-            mimeType=\'text/html\',\n-            outputMimeType=\'text/html\'\n+            u"<p>Lorem <b>ipsum</b></p>",\n+            mimeType="text/html",\n+            outputMimeType="text/html",\n         )\n         self.document.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'Lorem ipsum\',\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                SearchableText=u"Lorem ipsum",\n+            )\n+        )\n         self.assertEqual(len(brains), 1)\n         rid = brains[0].getRID()\n         index_data = self.catalog.getIndexDataForRID(rid)\n-        self.assertEqual(index_data[\'SearchableText\'].count(\'p\'), 0)\n-        self.assertEqual(index_data[\'SearchableText\'].count(\'b\'), 0)\n+        self.assertEqual(index_data["SearchableText"].count("p"), 0)\n+        self.assertEqual(index_data["SearchableText"].count("b"), 0)\n \n     def test_raw_text_searchable_text_index(self):\n         """Ensure that raw text is used, instead of output.\n@@ -201,119 +165,108 @@ def test_raw_text_searchable_text_index(self):\n         searchable text, but you will usually have a hard time setting it.\n         """\n         self.document.text = RichTextValue(\n-            u"""<script type="text/javascript">alert(\'Lorem ipsum\')"""\n-            u"""</script>""",\n-            mimeType=\'text/html\',\n-            outputMimeType=\'text/x-html-safe\'\n+            u"""<script type="text/javascript">alert(\'Lorem ipsum\')""" u"""</script>""",\n+            mimeType="text/html",\n+            outputMimeType="text/x-html-safe",\n         )\n         self.document.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'Lorem ipsum\',\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                SearchableText=u"Lorem ipsum",\n+            )\n+        )\n         self.assertEqual(len(brains), 1)\n         rid = brains[0].getRID()\n         index_data = self.catalog.getIndexDataForRID(rid)\n-        self.assertEqual(index_data[\'SearchableText\'].count(\'script\'), 0)\n-        self.assertEqual(index_data[\'SearchableText\'].count(\'text\'), 0)\n+        self.assertEqual(index_data["SearchableText"].count("script"), 0)\n+        self.assertEqual(index_data["SearchableText"].count("text"), 0)\n \n     def test_file_fulltext_in_searchable_text_plain(self):\n         from plone.namedfile.file import NamedBlobFile\n-        data = (\'Lorem ipsum. K\xc3\xb6ln <!-- ...oder M\xc3\xbcnchen, das ist hier die \'\n-                \'Frage. -->\')\n-        test_file = NamedBlobFile(data=data, filename=u\'string.txt\')\n+\n+        data = "Lorem ipsum. K\xc3\xb6ln <!-- ...oder M\xc3\xbcnchen, das ist hier die " "Frage. -->"\n+        test_file = NamedBlobFile(data=data, filename=u"string.txt")\n \n         primary_field_info = IPrimaryFieldInfo(self.file)\n         primary_field_info.field.set(self.file, test_file)\n         self.file.reindexObject()\n \n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'Lorem ipsum\'))\n+        brains = self.catalog.searchResults(dict(SearchableText=u"Lorem ipsum"))\n         self.assertEqual(len(brains), 1)\n \n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'K\xc3\xb6ln\'))\n+        brains = self.catalog.searchResults(dict(SearchableText=u"K\xc3\xb6ln"))\n         self.assertEqual(len(brains), 1)\n \n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'M\xc3\xbcnchen\'))\n+        brains = self.catalog.searchResults(dict(SearchableText=u"M\xc3\xbcnchen"))\n         self.assertEqual(len(brains), 1)\n \n     def test_file_fulltext_in_searchable_text_index_string(self):\n         from plone.namedfile.file import NamedBlobFile\n-        data = (\'Lorem ipsum. K\xc3\xb6ln <!-- ...oder M\xc3\xbcnchen, das ist hier die \'\n-                \'Frage. -->\')\n-        test_file = NamedBlobFile(data=data, filename=u\'string.html\')\n+\n+        data = "Lorem ipsum. K\xc3\xb6ln <!-- ...oder M\xc3\xbcnchen, das ist hier die " "Frage. -->"\n+        test_file = NamedBlobFile(data=data, filename=u"string.html")\n \n         primary_field_info = IPrimaryFieldInfo(self.file)\n         primary_field_info.field.set(self.file, test_file)\n         self.file.reindexObject()\n \n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'Lorem ipsum\'))\n+        brains = self.catalog.searchResults(dict(SearchableText=u"Lorem ipsum"))\n         self.assertEqual(len(brains), 1)\n \n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'K\xc3\xb6ln\'))\n+        brains = self.catalog.searchResults(dict(SearchableText=u"K\xc3\xb6ln"))\n         self.assertEqual(len(brains), 1)\n \n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'M\xc3\xbcnchen\'))\n+        brains = self.catalog.searchResults(dict(SearchableText=u"M\xc3\xbcnchen"))\n         self.assertEqual(len(brains), 0)  # hint: html comment is stripped\n \n     def test_file_fulltext_in_searchable_text_index_unicode(self):\n         from plone.namedfile.file import NamedBlobFile\n-        data = (u\'Lorem ipsum K\xc3\xb6ln <!-- ...oder M\xc3\xbcnchen, das ist hier die \'\n-                u\'Frage. -->\')\n-        test_file = NamedBlobFile(data=data, filename=u\'unicode.html\')\n+\n+        data = u"Lorem ipsum K\xc3\xb6ln <!-- ...oder M\xc3\xbcnchen, das ist hier die " u"Frage. -->"\n+        test_file = NamedBlobFile(data=data, filename=u"unicode.html")\n \n         primary_field_info = IPrimaryFieldInfo(self.file)\n         primary_field_info.field.set(self.file, test_file)\n         self.file.reindexObject()\n \n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'Lorem ipsum\'))\n+        brains = self.catalog.searchResults(dict(SearchableText=u"Lorem ipsum"))\n         self.assertEqual(len(brains), 1)\n \n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'K\xc3\xb6ln\'))\n+        brains = self.catalog.searchResults(dict(SearchableText=u"K\xc3\xb6ln"))\n         self.assertEqual(len(brains), 1)\n \n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'M\xc3\xbcnchen\'))\n+        brains = self.catalog.searchResults(dict(SearchableText=u"M\xc3\xbcnchen"))\n         self.assertEqual(len(brains), 0)  # hint: html comment is stripped\n \n     def test_title_in_metadata(self):\n-        self.document.title = \'My title\'\n+        self.document.title = "My title"\n         self.document.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            path=\'/plone/folder/document\',\n-        ))\n-        self.assertEqual(\n-            brains[0].Title,\n-            \'My title\'\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path="/plone/folder/document",\n+            )\n         )\n+        self.assertEqual(brains[0].Title, "My title")\n \n     def test_description_in_metadata(self):\n-        self.document.description = \'My description\'\n+        self.document.description = "My description"\n         self.document.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            path=\'/plone/folder/document\',\n-        ))\n-        self.assertEqual(\n-            brains[0].Description,\n-            \'My description\'\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path="/plone/folder/document",\n+            )\n         )\n+        self.assertEqual(brains[0].Description, "My description")\n \n     def test_get_remote_url_in_metadata(self):\n-        self.link.remoteUrl = \'http://www.plone.org/\'\n+        self.link.remoteUrl = "http://www.plone.org/"\n         self.link.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            path=\'/plone/folder/link\',\n-        ))\n-        self.assertEqual(\n-            brains[0].getRemoteUrl,\n-            \'http://www.plone.org/\'\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path="/plone/folder/link",\n+            )\n         )\n+        self.assertEqual(brains[0].getRemoteUrl, "http://www.plone.org/")\n \n     def test_get_remote_url_in_metadata_variables_replaced(self):\n         """Link URL must be in catalog with the variables\n@@ -321,15 +274,14 @@ def test_get_remote_url_in_metadata_variables_replaced(self):\n         paths. Otherwise the navigation portlet will show an wrong URL for the\n         link object. (See issue #110)\n         """\n-        self.link.remoteUrl = \'${navigation_root_url}/my-item\'\n+        self.link.remoteUrl = "${navigation_root_url}/my-item"\n         self.link.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            path=\'/plone/folder/link\',\n-        ))\n-        self.assertEqual(\n-            brains[0].getRemoteUrl,\n-            \'/plone/my-item\'\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path="/plone/folder/link",\n+            )\n         )\n+        self.assertEqual(brains[0].getRemoteUrl, "/plone/my-item")\n \n     def test_getobjsize_image(self):\n         from .test_image import dummy_image\n@@ -338,34 +290,36 @@ def test_getobjsize_image(self):\n         primary_field_info.field.set(self.image, dummy_image())\n         self.image.reindexObject()\n \n-        brains = self.catalog.searchResults(dict(\n-            path=\'/plone/folder/image\',\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path="/plone/folder/image",\n+            )\n+        )\n \n         self.assertEqual(\n-            \'5.0 KB\',\n+            "5.0 KB",\n             brains[0].getObjSize,\n         )\n \n     def test_getobjsize_file(self):\n         from plone.namedfile.file import NamedBlobFile\n \n-        filename = os.path.join(os.path.dirname(__file__), u\'image.jpg\')\n-        with open(filename, \'rb\') as f:\n+        filename = os.path.join(os.path.dirname(__file__), u"image.jpg")\n+        with open(filename, "rb") as f:\n             file_data = f.read()\n-        test_file = NamedBlobFile(\n-            data=file_data,\n-            filename=filename)\n+        test_file = NamedBlobFile(data=file_data, filename=filename)\n \n         primary_field_info = IPrimaryFieldInfo(self.file)\n         primary_field_info.field.set(self.file, test_file)\n         self.file.reindexObject()\n \n-        brains = self.catalog.searchResults(dict(\n-            path=\'/plone/folder/file\',\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path="/plone/folder/file",\n+            )\n+        )\n \n         self.assertEqual(\n-            \'5.0 KB\',\n+            "5.0 KB",\n             brains[0].getObjSize,\n         )\ndiff --git a/plone/app/contenttypes/tests/test_link.py b/plone/app/contenttypes/tests/test_link.py\nindex a9a824976..15af3a65b 100644\n--- a/plone/app/contenttypes/tests/test_link.py\n+++ b/plone/app/contenttypes/tests/test_link.py\n@@ -3,8 +3,12 @@\n from plone.app.z3cform.converters import LinkWidgetDataConverter\n from plone.app.z3cform.widget import LinkWidget\n from plone.app.contenttypes.interfaces import ILink\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)  # noqa\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n@@ -31,40 +35,29 @@ class LinkIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n     def test_schema(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Link\')\n+        fti = queryUtility(IDexterityFTI, name="Link")\n         schema = fti.lookupSchema()\n-        self.assertTrue(schema.getName().endswith(\'_0_Link\'))\n+        self.assertTrue(schema.getName().endswith("_0_Link"))\n \n     def test_fti(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Link\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="Link")\n         self.assertNotEqual(None, fti)\n \n     def test_factory(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Link\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="Link")\n         factory = fti.factory\n         new_object = createObject(factory)\n         self.assertTrue(ILink.providedBy(new_object))\n \n     def test_adding(self):\n-        self.portal.invokeFactory(\n-            \'Link\',\n-            \'doc1\'\n-        )\n-        self.assertTrue(ILink.providedBy(self.portal[\'doc1\']))\n+        self.portal.invokeFactory("Link", "doc1")\n+        self.assertTrue(ILink.providedBy(self.portal["doc1"]))\n \n \n class LinkViewIntegrationTest(unittest.TestCase):\n@@ -72,18 +65,18 @@ class LinkViewIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n         self.response = self.request.response\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Link\', \'link\')\n-        link = self.portal[\'link\']\n-        link.title = \'My Link\'\n-        link.description = \'This is my link.\'\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Link", "link")\n+        link = self.portal["link"]\n+        link.title = "My Link"\n+        link.description = "This is my link."\n         self.link = link\n-        self.request.set(\'URL\', link.absolute_url())\n-        self.request.set(\'ACTUAL_URL\', link.absolute_url())\n+        self.request.set("URL", link.absolute_url())\n+        self.request.set("ACTUAL_URL", link.absolute_url())\n         alsoProvides(self.request, IPloneFormLayer)\n \n         # setup manually the correct browserlayer, see:\n@@ -91,14 +84,14 @@ def setUp(self):\n         notify(BeforeTraverseEvent(self.portal, self.request))\n \n     def test_link_redirect_view(self):\n-        view = self.link.restrictedTraverse(\'@@view\')\n+        view = self.link.restrictedTraverse("@@view")\n         self.assertTrue(view())\n         self.assertEqual(view.request.response.status, 200)\n-        self.assertTrue(\'My Link\' in view())\n-        self.assertTrue(\'This is my link.\' in view())\n+        self.assertTrue("My Link" in view())\n+        self.assertTrue("This is my link." in view())\n \n     def test_link_redirect_view_external_url(self):\n-        self.link.remoteUrl = \'http://www.plone.org\'\n+        self.link.remoteUrl = "http://www.plone.org"\n         self._publish(self.link)\n         view = self._get_link_redirect_view(self.link)\n \n@@ -109,10 +102,10 @@ def test_link_redirect_view_external_url(self):\n         # As anonymous: redirect\n         logout()\n         self.assertTrue(view())\n-        self._assert_redirect(\'http://www.plone.org\')\n+        self._assert_redirect("http://www.plone.org")\n \n     def test_link_redirect_view_absolute_path(self):\n-        self.link.remoteUrl = \'/plone/my-folder/my-item\'\n+        self.link.remoteUrl = "/plone/my-folder/my-item"\n         self._publish(self.link)\n         view = self._get_link_redirect_view(self.link)\n \n@@ -123,10 +116,10 @@ def test_link_redirect_view_absolute_path(self):\n         # As anonymous: redirect\n         logout()\n         self.assertTrue(view())\n-        self._assert_redirect(\'http://nohost/plone/my-folder/my-item\')\n+        self._assert_redirect("http://nohost/plone/my-folder/my-item")\n \n     def test_link_redirect_view_relative_path(self):\n-        self.link.remoteUrl = \'../my-item\'\n+        self.link.remoteUrl = "../my-item"\n         self._publish(self.link)\n         view = self._get_link_redirect_view(self.link)\n \n@@ -139,10 +132,10 @@ def test_link_redirect_view_relative_path(self):\n         self.assertTrue(view())\n         # The following URL will be redirected to:\n         # "http://nohost/plone/my-item"\n-        self._assert_redirect(\'http://nohost/plone/link/../my-item\')\n+        self._assert_redirect("http://nohost/plone/link/../my-item")\n \n     def test_link_redirect_view_path_with_variable(self):\n-        self.link.remoteUrl = \'${navigation_root_url}/my-folder/my-item\'\n+        self.link.remoteUrl = "${navigation_root_url}/my-folder/my-item"\n         self._publish(self.link)\n         view = self._get_link_redirect_view(self.link)\n \n@@ -153,16 +146,16 @@ def test_link_redirect_view_path_with_variable(self):\n         # As anonymous: redirect\n         logout()\n         self.assertTrue(view())\n-        self._assert_redirect(\'http://nohost/plone/my-folder/my-item\')\n+        self._assert_redirect("http://nohost/plone/my-folder/my-item")\n \n         # Should give the same result with ${portal_url}\n-        self.link.remoteUrl = \'${portal_url}/my-folder/my-item\'\n+        self.link.remoteUrl = "${portal_url}/my-folder/my-item"\n         self.assertTrue(view())\n-        self._assert_redirect(\'http://nohost/plone/my-folder/my-item\')\n+        self._assert_redirect("http://nohost/plone/my-folder/my-item")\n \n     def test_link_redirect_view_path_with_variable_and_parameters(self):\n         # https://github.com/plone/plone.app.contenttypes/issues/457\n-        self.link.remoteUrl = \'${portal_url}/@@search?SearchableText=Plone\'\n+        self.link.remoteUrl = "${portal_url}/@@search?SearchableText=Plone"\n         self._publish(self.link)\n         view = self._get_link_redirect_view(self.link)\n \n@@ -174,11 +167,11 @@ def test_link_redirect_view_path_with_variable_and_parameters(self):\n         logout()\n         self.assertTrue(view())\n         self._assert_redirect(\n-            \'http://nohost/plone/@@search?SearchableText=Plone\',\n+            "http://nohost/plone/@@search?SearchableText=Plone",\n         )\n \n     def test_mailto_type(self):\n-        self.link.remoteUrl = \'mailto:stress@test.us\'\n+        self.link.remoteUrl = "mailto:stress@test.us"\n         view = self._get_link_redirect_view(self.link)\n         self._publish(self.link)\n         logout()\n@@ -187,7 +180,7 @@ def test_mailto_type(self):\n         self._assert_response_OK()\n \n     def test_tel_type(self):\n-        self.link.remoteUrl = \'tel:123\'\n+        self.link.remoteUrl = "tel:123"\n         view = self._get_link_redirect_view(self.link)\n         self._publish(self.link)\n         logout()\n@@ -196,7 +189,7 @@ def test_tel_type(self):\n         self._assert_response_OK()\n \n     def test_callto_type(self):\n-        self.link.remoteUrl = \'callto:123\'\n+        self.link.remoteUrl = "callto:123"\n         view = self._get_link_redirect_view(self.link)\n         self._publish(self.link)\n         logout()\n@@ -205,31 +198,25 @@ def test_callto_type(self):\n         self._assert_response_OK()\n \n     def test_webdav_type(self):\n-        self.link.remoteUrl = \'webdav://web.site/resource\'\n+        self.link.remoteUrl = "webdav://web.site/resource"\n         view = self._get_link_redirect_view(self.link)\n         self._publish(self.link)\n         logout()\n         rendered = view()\n-        self.assertIn(\n-            \'href="webdav://web.site/resource"\',\n-            rendered\n-        )\n+        self.assertIn(\'href="webdav://web.site/resource"\', rendered)\n         self._assert_response_OK()\n \n     def test_caldav_type(self):\n-        self.link.remoteUrl = \'caldav://calendar.site/resource\'\n+        self.link.remoteUrl = "caldav://calendar.site/resource"\n         view = self._get_link_redirect_view(self.link)\n         self._publish(self.link)\n         logout()\n         rendered = view()\n-        self.assertIn(\n-            \'href="caldav://calendar.site/resource"\',\n-            rendered\n-        )\n+        self.assertIn(\'href="caldav://calendar.site/resource"\', rendered)\n         self._assert_response_OK()\n \n     def test_file_type(self):\n-        self.link.remoteUrl = \'file:///some/file/on/your/system\'\n+        self.link.remoteUrl = "file:///some/file/on/your/system"\n         view = self._get_link_redirect_view(self.link)\n         self._publish(self.link)\n         logout()\n@@ -237,7 +224,7 @@ def test_file_type(self):\n         self._assert_redirect(self.link.remoteUrl)\n \n     def test_ftp_type(self):\n-        self.link.remoteUrl = \'ftp://thereIsNoSuchDomain.isThere{0}\'.format(\n+        self.link.remoteUrl = "ftp://thereIsNoSuchDomain.isThere{0}".format(\n             datetime.now().isoformat()\n         )\n         view = self._get_link_redirect_view(self.link)\n@@ -247,18 +234,18 @@ def test_ftp_type(self):\n         self._assert_redirect(self.link.remoteUrl)\n \n     def _publish(self, obj):\n-        portal_workflow = getToolByName(self.portal, \'portal_workflow\')\n-        portal_workflow.doActionFor(obj, \'publish\')\n+        portal_workflow = getToolByName(self.portal, "portal_workflow")\n+        portal_workflow.doActionFor(obj, "publish")\n \n     def _assert_redirect(self, url):\n         self.assertEqual(self.response.status, 302)\n-        self.assertEqual(self.response.headers[\'location\'], url)\n+        self.assertEqual(self.response.headers["location"], url)\n \n     def _assert_response_OK(self):\n         self.assertEqual(self.response.status, 200)\n \n     def _get_link_redirect_view(self, obj):\n-        return getMultiAdapter((obj, self.request), name=\'link_redirect_view\')\n+        return getMultiAdapter((obj, self.request), name="link_redirect_view")\n \n \n class LinkFunctionalTest(unittest.TestCase):\n@@ -266,116 +253,120 @@ class LinkFunctionalTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {0}:{1}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_add_link(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'Link\').click()\n-        self.browser.getControl(name=\'form.widgets.IDublinCore.title\')\\\n-            .value = \'My link\'\n-        self.browser.getControl(name=\'form.widgets.IDublinCore.description\')\\\n-            .value = \'This is my link.\'\n-        self.browser.getControl(name=\'form.widgets.IShortName.id\')\\\n-            .value = \'my-special-link\'\n-        self.browser.getControl(name=\'form.widgets.remoteUrl.external\')\\\n-            .value = \'https://plone.org\'\n-        self.browser.getControl(\'Save\').click()\n-\n-        self.assertTrue(self.browser.url.endswith(\'my-special-link/view\'))\n-        self.assertTrue(\'My link\' in self.browser.contents)\n-        self.assertTrue(\'This is my link\' in self.browser.contents)\n+        self.browser.getLink("Link").click()\n+        self.browser.getControl(name="form.widgets.IDublinCore.title").value = "My link"\n+        self.browser.getControl(\n+            name="form.widgets.IDublinCore.description"\n+        ).value = "This is my link."\n+        self.browser.getControl(\n+            name="form.widgets.IShortName.id"\n+        ).value = "my-special-link"\n+        self.browser.getControl(\n+            name="form.widgets.remoteUrl.external"\n+        ).value = "https://plone.org"\n+        self.browser.getControl("Save").click()\n+\n+        self.assertTrue(self.browser.url.endswith("my-special-link/view"))\n+        self.assertTrue("My link" in self.browser.contents)\n+        self.assertTrue("This is my link" in self.browser.contents)\n \n \n class LinkWidgetIntegrationTest(unittest.TestCase):\n \n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n-    default_result = {\'internal\': u\'\',\n-                      \'external\': u\'\',\n-                      \'email\': u\'\',\n-                      \'email_subject\': u\'\'}\n+    default_result = {\n+        "internal": u"",\n+        "external": u"",\n+        "email": u"",\n+        "email_subject": u"",\n+    }\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n         self.response = self.request.response\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        lid = self.portal.invokeFactory(\'Link\', \'link\',\n-                                        title=\'My Link\',\n-                                        description="This is my link.")\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        lid = self.portal.invokeFactory(\n+            "Link", "link", title="My Link", description="This is my link."\n+        )\n         self.link = self.portal[lid]\n         self.link_field = TextLine()\n         self.widget = LinkWidget(self.request)\n \n     def test_dc_towidget_external(self):\n-        url = \'http://www.example.org\'\n+        url = "http://www.example.org"\n         self.link.remoteUrl = url\n \n         converter = LinkWidgetDataConverter(self.link_field, self.widget)\n         expected = self.default_result.copy()\n-        expected[\'external\'] = url\n+        expected["external"] = url\n         self.assertEqual(converter.toWidgetValue(url), expected)\n \n     def test_dc_towidget_internal(self):\n-        self.portal.invokeFactory(\'Document\', \'doc1\',\n-                                  title=\'A document\',\n-                                  description="This is a document.")\n-        doc1 = self.portal[\'doc1\']\n+        self.portal.invokeFactory(\n+            "Document", "doc1", title="A document", description="This is a document."\n+        )\n+        doc1 = self.portal["doc1"]\n         url = doc1.absolute_url()\n         converter = LinkWidgetDataConverter(self.link_field, self.widget)\n         expected = self.default_result.copy()\n-        expected[\'internal\'] = IUUID(doc1)\n+        expected["internal"] = IUUID(doc1)\n         self.assertEqual(converter.toWidgetValue(url), expected)\n \n     def test_dc_towidget_mail(self):\n-        url = u\'mailto:foo@.example.org\'\n+        url = u"mailto:foo@.example.org"\n         converter = LinkWidgetDataConverter(self.link_field, self.widget)\n         expected = self.default_result.copy()\n-        expected[\'email\'] = url[7:]   # mailto is cut\n+        expected["email"] = url[7:]  # mailto is cut\n         self.assertEqual(converter.toWidgetValue(url), expected)\n \n     def test_dc_towidget_mail_subject(self):\n-        url = \'mailto:foo@.example.org?subject=A subject\'\n+        url = "mailto:foo@.example.org?subject=A subject"\n         converter = LinkWidgetDataConverter(self.link_field, self.widget)\n         expected = self.default_result.copy()\n-        expected[\'email\'] = u\'foo@.example.org\'\n-        expected[\'email_subject\'] = u\'A subject\'\n+        expected["email"] = u"foo@.example.org"\n+        expected["email_subject"] = u"A subject"\n         self.assertEqual(converter.toWidgetValue(url), expected)\n \n     def test_dc_illegal(self):\n-        url = \'foo\'\n+        url = "foo"\n         converter = LinkWidgetDataConverter(self.link_field, self.widget)\n         expected = self.default_result.copy()\n-        expected[\'external\'] = url\n+        expected["external"] = url\n         self.assertEqual(converter.toWidgetValue(url), expected)\n \n     def test_dc_var(self):\n-        url = \'${portal_url}/foo\'\n+        url = "${portal_url}/foo"\n         converter = LinkWidgetDataConverter(self.link_field, self.widget)\n         expected = self.default_result.copy()\n-        expected[\'external\'] = url\n+        expected["external"] = url\n         self.assertEqual(converter.toWidgetValue(url), expected)\n \n     def test_var_replacement_in_view(self):\n-        view = getMultiAdapter(\n-            (self.link, self.request),\n-            name=\'link_redirect_view\'\n-        )\n+        view = getMultiAdapter((self.link, self.request), name="link_redirect_view")\n \n-        self.link.remoteUrl = \'${portal_url}\'\n-        self.assertEqual(view.url(), \'/plone\')\n-        self.assertEqual(view.absolute_target_url(), \'http://nohost/plone\')\n+        self.link.remoteUrl = "${portal_url}"\n+        self.assertEqual(view.url(), "/plone")\n+        self.assertEqual(view.absolute_target_url(), "http://nohost/plone")\n \n-        self.link.remoteUrl = \'${navigation_root_url}\'\n-        self.assertEqual(view.url(), \'/plone\')\n-        self.assertEqual(view.absolute_target_url(), \'http://nohost/plone\')\n+        self.link.remoteUrl = "${navigation_root_url}"\n+        self.assertEqual(view.url(), "/plone")\n+        self.assertEqual(view.absolute_target_url(), "http://nohost/plone")\ndiff --git a/plone/app/contenttypes/tests/test_news_item.py b/plone/app/contenttypes/tests/test_news_item.py\nindex 41c89a633..b5171bf67 100644\n--- a/plone/app/contenttypes/tests/test_news_item.py\n+++ b/plone/app/contenttypes/tests/test_news_item.py\n@@ -1,7 +1,11 @@\n # -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import INewsItem\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)  # noqa\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -25,82 +29,66 @@ class NewsItemIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        from plone.app.contenttypes.interfaces import (\n-            IPloneAppContenttypesLayer\n-        )\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n+\n         alsoProvides(self.request, IPloneAppContenttypesLayer)\n         alsoProvides(self.request, IPloneFormLayer)\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n     def test_schema(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'News Item\')\n+        fti = queryUtility(IDexterityFTI, name="News Item")\n         schema = fti.lookupSchema()\n-        self.assertTrue(schema.getName().endswith(\'_0_News_1_Item\'))\n+        self.assertTrue(schema.getName().endswith("_0_News_1_Item"))\n \n     def test_fti(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'News Item\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="News Item")\n         self.assertNotEqual(None, fti)\n \n     def test_factory(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'News Item\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="News Item")\n         factory = fti.factory\n         new_object = createObject(factory)\n         self.assertTrue(INewsItem.providedBy(new_object))\n \n     def test_adding(self):\n-        self.portal.invokeFactory(\n-            \'News Item\',\n-            \'doc1\'\n-        )\n-        self.assertTrue(INewsItem.providedBy(self.portal[\'doc1\']))\n+        self.portal.invokeFactory("News Item", "doc1")\n+        self.assertTrue(INewsItem.providedBy(self.portal["doc1"]))\n \n     def test_view(self):\n-        self.portal.invokeFactory(\'News Item\', \'news_item\')\n-        news_item = self.portal[\'news_item\']\n-        news_item.title = \'My News Item\'\n-        news_item.description = \'This is my news item.\'\n-        news_item.text = RichTextValue(\n-            u\'Lorem ipsum\',\n-            \'text/plain\',\n-            \'text/html\'\n-        )\n-        self.request.set(\'URL\', news_item.absolute_url())\n-        self.request.set(\'ACTUAL_URL\', news_item.absolute_url())\n-        view = news_item.restrictedTraverse(\'@@view\')\n+        self.portal.invokeFactory("News Item", "news_item")\n+        news_item = self.portal["news_item"]\n+        news_item.title = "My News Item"\n+        news_item.description = "This is my news item."\n+        news_item.text = RichTextValue(u"Lorem ipsum", "text/plain", "text/html")\n+        self.request.set("URL", news_item.absolute_url())\n+        self.request.set("ACTUAL_URL", news_item.absolute_url())\n+        view = news_item.restrictedTraverse("@@view")\n \n         self.assertTrue(view())\n         self.assertEqual(view.request.response.status, 200)\n-        self.assertTrue(\'My News Item\' in view())\n-        self.assertTrue(\'This is my news item.\' in view())\n-        self.assertTrue(\'Lorem ipsum\' in view())\n+        self.assertTrue("My News Item" in view())\n+        self.assertTrue("This is my news item." in view())\n+        self.assertTrue("Lorem ipsum" in view())\n \n     def test_leadimage_viewlet_does_not_show_up_for_newsitems(self):\n         from zope.interface import alsoProvides\n         from plone.app.contenttypes.behaviors.leadimage import ILeadImage\n+\n         alsoProvides(self.request, ILeadImage)\n         view = View(self.portal, self.request)\n         manager = queryMultiAdapter(\n             (self.portal, self.request, view),\n             IViewletManager,\n-            \'plone.abovecontenttitle\',\n-            default=None\n+            "plone.abovecontenttitle",\n+            default=None,\n         )\n         self.assertTrue(manager)\n         manager.update()\n         leadimage_viewlet = [\n-            v for v in manager.viewlets\n-            if v.__name__ == \'contentleadimage\'\n+            v for v in manager.viewlets if v.__name__ == "contentleadimage"\n         ]\n         self.assertEqual(len(leadimage_viewlet), 0)\n \n@@ -110,42 +98,49 @@ class NewsItemFunctionalTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD, )\n+            "Authorization",\n+            "Basic {0}:{1}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_add_news_item(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'News Item\').click()\n-        self.browser.getControl(name=\'form.widgets.IDublinCore.title\')\\\n-            .value = \'My news item\'\n-        self.browser.getControl(name=\'form.widgets.IDublinCore.description\')\\\n-            .value = \'This is my news item.\'\n-        self.browser.getControl(name=\'form.widgets.IShortName.id\')\\\n-            .value = \'\'\n-        self.browser.getControl(name=\'form.widgets.IRichTextBehavior.text\')\\\n-            .value = \'Lorem Ipsum\'\n-        self.browser.getControl(\'Save\').click()\n-\n-        self.assertTrue(self.browser.url.endswith(\'my-news-item/view\'))\n-        self.assertTrue(\'My news item\' in self.browser.contents)\n-        self.assertTrue(\'This is my news item\' in self.browser.contents)\n-        self.assertTrue(\'Lorem Ipsum\' in self.browser.contents)\n+        self.browser.getLink("News Item").click()\n+        self.browser.getControl(\n+            name="form.widgets.IDublinCore.title"\n+        ).value = "My news item"\n+        self.browser.getControl(\n+            name="form.widgets.IDublinCore.description"\n+        ).value = "This is my news item."\n+        self.browser.getControl(name="form.widgets.IShortName.id").value = ""\n+        self.browser.getControl(\n+            name="form.widgets.IRichTextBehavior.text"\n+        ).value = "Lorem Ipsum"\n+        self.browser.getControl("Save").click()\n+\n+        self.assertTrue(self.browser.url.endswith("my-news-item/view"))\n+        self.assertTrue("My news item" in self.browser.contents)\n+        self.assertTrue("This is my news item" in self.browser.contents)\n+        self.assertTrue("Lorem Ipsum" in self.browser.contents)\n \n     def test_add_news_item_with_shortname(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'News Item\').click()\n-        self.browser.getControl(name=\'form.widgets.IDublinCore.title\')\\\n-            .value = \'My news item\'\n-        self.browser.getControl(name=\'form.widgets.IShortName.id\')\\\n-            .value = \'my-special-news\'\n-        self.browser.getControl(\'Save\').click()\n-\n-        self.assertTrue(self.browser.url.endswith(\'my-special-news/view\'))\n+        self.browser.getLink("News Item").click()\n+        self.browser.getControl(\n+            name="form.widgets.IDublinCore.title"\n+        ).value = "My news item"\n+        self.browser.getControl(\n+            name="form.widgets.IShortName.id"\n+        ).value = "my-special-news"\n+        self.browser.getControl("Save").click()\n+\n+        self.assertTrue(self.browser.url.endswith("my-special-news/view"))\ndiff --git a/plone/app/contenttypes/tests/test_robot.py b/plone/app/contenttypes/tests/test_robot.py\nindex 2d92e360a..e9096e6ea 100644\n--- a/plone/app/contenttypes/tests/test_robot.py\n+++ b/plone/app/contenttypes/tests/test_robot.py\n@@ -11,22 +11,24 @@\n def test_suite():\n     suite = unittest.TestSuite()\n     current_dir = os.path.abspath(os.path.dirname(__file__))\n-    robot_dir = os.path.join(current_dir, \'robot\')\n+    robot_dir = os.path.join(current_dir, "robot")\n     robot_tests = [\n-        os.path.join(\'robot\', doc) for doc in\n-        os.listdir(robot_dir) if doc.endswith(\'.robot\') and\n-        doc.startswith(\'test_\')\n+        os.path.join("robot", doc)\n+        for doc in os.listdir(robot_dir)\n+        if doc.endswith(".robot") and doc.startswith("test_")\n     ]\n     for robot_test in robot_tests:\n         robottestsuite = robotsuite.RobotTestSuite(\n             robot_test,\n-            noncritical=[\'unstable\'],\n+            noncritical=["unstable"],\n         )\n         robottestsuite.level = ROBOT_TEST_LEVEL\n-        suite.addTests([\n-            layered(\n-                robottestsuite,\n-                layer=PLONE_APP_CONTENTTYPES_ROBOT_TESTING,\n-            ),\n-        ])\n+        suite.addTests(\n+            [\n+                layered(\n+                    robottestsuite,\n+                    layer=PLONE_APP_CONTENTTYPES_ROBOT_TESTING,\n+                ),\n+            ]\n+        )\n     return suite\ndiff --git a/plone/app/contenttypes/tests/test_security.py b/plone/app/contenttypes/tests/test_security.py\nindex 5a2ef0b8d..60bad1413 100644\n--- a/plone/app/contenttypes/tests/test_security.py\n+++ b/plone/app/contenttypes/tests/test_security.py\n@@ -1,6 +1,8 @@\n # -*- coding: utf-8 -*-\n from io import BytesIO\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)  # noqa\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n@@ -79,10 +81,10 @@ class TestSecurity(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         # self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def publish(\n         self,\ndiff --git a/plone/app/contenttypes/tests/test_setup.py b/plone/app/contenttypes/tests/test_setup.py\nindex 050611ab6..763d49d58 100644\n--- a/plone/app/contenttypes/tests/test_setup.py\n+++ b/plone/app/contenttypes/tests/test_setup.py\n@@ -1,5 +1,7 @@\n # -*- coding: utf-8 -*-\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)  # noqa\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n \n@@ -11,28 +13,26 @@ class PloneAppContenttypesSetupTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.types = self.portal.portal_types\n \n     def test_old_topic_disabled(self):\n-        self.assertTrue(\'Topic\' not in self.types.objectIds())\n+        self.assertTrue("Topic" not in self.types.objectIds())\n \n     def test_atcontenttypes_replaced_by_dexterity_types(self):\n-        self.assertEqual(self.types[\'Collection\'].meta_type, \'Dexterity FTI\')\n-        self.assertEqual(self.types[\'Document\'].meta_type, \'Dexterity FTI\')\n-        self.assertEqual(self.types[\'Event\'].meta_type, \'Dexterity FTI\')\n-        self.assertEqual(self.types[\'File\'].meta_type, \'Dexterity FTI\')\n-        self.assertEqual(self.types[\'Folder\'].meta_type, \'Dexterity FTI\')\n-        self.assertEqual(self.types[\'Image\'].meta_type, \'Dexterity FTI\')\n-        self.assertEqual(self.types[\'Link\'].meta_type, \'Dexterity FTI\')\n-        self.assertEqual(self.types[\'News Item\'].meta_type, \'Dexterity FTI\')\n+        self.assertEqual(self.types["Collection"].meta_type, "Dexterity FTI")\n+        self.assertEqual(self.types["Document"].meta_type, "Dexterity FTI")\n+        self.assertEqual(self.types["Event"].meta_type, "Dexterity FTI")\n+        self.assertEqual(self.types["File"].meta_type, "Dexterity FTI")\n+        self.assertEqual(self.types["Folder"].meta_type, "Dexterity FTI")\n+        self.assertEqual(self.types["Image"].meta_type, "Dexterity FTI")\n+        self.assertEqual(self.types["Link"].meta_type, "Dexterity FTI")\n+        self.assertEqual(self.types["News Item"].meta_type, "Dexterity FTI")\n \n     def test_browserlayer_available(self):\n         from plone.browserlayer import utils\n-        from plone.app.contenttypes.interfaces import \\\n-            IPloneAppContenttypesLayer\n-        self.assertTrue(\n-            IPloneAppContenttypesLayer in utils.registered_layers()\n-        )\n+        from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n+\n+        self.assertTrue(IPloneAppContenttypesLayer in utils.registered_layers())\ndiff --git a/plone/app/contenttypes/tests/test_webdav.py b/plone/app/contenttypes/tests/test_webdav.py\nindex f329a3bba..e91e1e352 100644\n--- a/plone/app/contenttypes/tests/test_webdav.py\n+++ b/plone/app/contenttypes/tests/test_webdav.py\n@@ -1,5 +1,7 @@\n # -*- coding: utf-8 -*-\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)  # noqa\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from zope.publisher.browser import TestRequest\n@@ -24,40 +26,44 @@ class WebDAVIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Image\', \'image\')\n-        self.image = self.portal[\'image\']\n-        self.image.title = \'My Image\'\n-        self.portal.invokeFactory(\'File\', \'file\')\n-        self.file = self.portal[\'file\']\n-        self.file.title = \'My file\'\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Image", "image")\n+        self.image = self.portal["image"]\n+        self.image.title = "My Image"\n+        self.portal.invokeFactory("File", "file")\n+        self.file = self.portal["file"]\n+        self.file.title = "My file"\n \n     def test_image_put(self):\n         """Upload an image through webdav."""\n-        filename = os.path.join(os.path.dirname(__file__), u\'image.jpg\')\n-        with open(filename, \'rb\') as myfile:\n-            request = DAVTestRequest(environ={\n-                \'BODYFILE\': myfile,\n-                \'PATH_INFO\': \'/foo/bar/image.jpg\',\n-            })\n+        filename = os.path.join(os.path.dirname(__file__), u"image.jpg")\n+        with open(filename, "rb") as myfile:\n+            request = DAVTestRequest(\n+                environ={\n+                    "BODYFILE": myfile,\n+                    "PATH_INFO": "/foo/bar/image.jpg",\n+                }\n+            )\n             self.image.REQUEST = request\n             self.image.PUT()\n-        self.assertEqual(self.image.image.filename, u\'image.jpg\')\n+        self.assertEqual(self.image.image.filename, u"image.jpg")\n         self.assertEqual(self.image.get_size(), 5131)\n-        self.assertEqual(self.image.content_type(), \'image/jpeg\')\n+        self.assertEqual(self.image.content_type(), "image/jpeg")\n \n     def test_file_put(self):\n         """Upload a file through webdav."""\n-        filename = os.path.join(os.path.dirname(__file__), u\'file.pdf\')\n-        with open(filename, \'rb\') as myfile:\n-            request = DAVTestRequest(environ={\n-                \'BODYFILE\': myfile,\n-                \'PATH_INFO\': \'/foo/bar/file.pdf\',\n-            })\n+        filename = os.path.join(os.path.dirname(__file__), u"file.pdf")\n+        with open(filename, "rb") as myfile:\n+            request = DAVTestRequest(\n+                environ={\n+                    "BODYFILE": myfile,\n+                    "PATH_INFO": "/foo/bar/file.pdf",\n+                }\n+            )\n             self.file.REQUEST = request\n             self.file.PUT()\n-        self.assertEqual(self.file.file.filename, u\'file.pdf\')\n+        self.assertEqual(self.file.file.filename, u"file.pdf")\n         self.assertEqual(self.file.get_size(), 8561)\n-        self.assertEqual(self.file.content_type(), \'application/pdf\')\n+        self.assertEqual(self.file.content_type(), "application/pdf")\ndiff --git a/plone/app/contenttypes/upgrades.py b/plone/app/contenttypes/upgrades.py\nindex b18a17cdd..48cbd4a59 100644\n--- a/plone/app/contenttypes/upgrades.py\n+++ b/plone/app/contenttypes/upgrades.py\n@@ -5,7 +5,7 @@\n import logging\n \n \n-logger = logging.getLogger(name=\'plone.app.contenttypes upgrade\')\n+logger = logging.getLogger(name="plone.app.contenttypes upgrade")\n \n \n def update_type_icons(context):\ndiff --git a/plone/app/contenttypes/utils.py b/plone/app/contenttypes/utils.py\nindex 8693b2d1e..589214c81 100644\n--- a/plone/app/contenttypes/utils.py\n+++ b/plone/app/contenttypes/utils.py\n@@ -14,14 +14,14 @@\n \n \n DEFAULT_TYPES = [\n-    \'Collection\',\n-    \'Document\',\n-    \'Event\',\n-    \'File\',\n-    \'Folder\',\n-    \'Image\',\n-    \'Link\',\n-    \'News Item\',\n+    "Collection",\n+    "Document",\n+    "Event",\n+    "File",\n+    "Folder",\n+    "Image",\n+    "Link",\n+    "News Item",\n ]\n \n \n@@ -33,33 +33,27 @@ def replace_link_variables_by_paths(context, url):\n     if not url:\n         return url\n \n-    portal_state = context.restrictedTraverse(\'@@plone_portal_state\')\n+    portal_state = context.restrictedTraverse("@@plone_portal_state")\n \n-    if \'${navigation_root_url}\' in url:\n+    if "${navigation_root_url}" in url:\n         url = _replace_variable_by_path(\n-            url,\n-            \'${navigation_root_url}\',\n-            portal_state.navigation_root()\n+            url, "${navigation_root_url}", portal_state.navigation_root()\n         )\n \n-    if \'${portal_url}\' in url:\n-        url = _replace_variable_by_path(\n-            url,\n-            \'${portal_url}\',\n-            portal_state.portal()\n-        )\n+    if "${portal_url}" in url:\n+        url = _replace_variable_by_path(url, "${portal_url}", portal_state.portal())\n \n     return url\n \n \n def _replace_variable_by_path(url, variable, obj):\n-    path = \'/\'.join(obj.getPhysicalPath())\n+    path = "/".join(obj.getPhysicalPath())\n     return url.replace(variable, path)\n \n \n def get_old_class_name_string(obj):\n     """Returns the current class name string."""\n-    return \'{0}.{1}\'.format(obj.__module__, obj.__class__.__name__)\n+    return "{0}.{1}".format(obj.__module__, obj.__class__.__name__)\n \n \n def get_portal_type_name_string(obj):\n@@ -70,27 +64,27 @@ def get_portal_type_name_string(obj):\n     return fti.klass\n \n \n-def migrate_base_class_to_new_class(obj,\n-                                    indexes=None,\n-                                    old_class_name=\'\',\n-                                    new_class_name=\'\',\n-                                    migrate_to_folderish=False,\n-                                    ):\n+def migrate_base_class_to_new_class(\n+    obj,\n+    indexes=None,\n+    old_class_name="",\n+    new_class_name="",\n+    migrate_to_folderish=False,\n+):\n     if indexes is None:\n-        indexes = [\'is_folderish\', \'object_provides\']\n+        indexes = ["is_folderish", "object_provides"]\n     if not old_class_name:\n         old_class_name = get_old_class_name_string(obj)\n     if not new_class_name:\n         new_class_name = get_portal_type_name_string(obj)\n         if not new_class_name:\n-            logger.warning(\n-                \'The type {0} has no fti!\'.format(obj.portal_type))\n+            logger.warning("The type {0} has no fti!".format(obj.portal_type))\n             return False\n \n     was_item = not isinstance(obj, BTreeFolder2Base)\n     if old_class_name != new_class_name:\n         obj_id = obj.getId()\n-        module_name, class_name = new_class_name.rsplit(\'.\', 1)\n+        module_name, class_name = new_class_name.rsplit(".", 1)\n         module = importlib.import_module(module_name)\n         new_class = getattr(module, class_name)\n \n@@ -114,12 +108,12 @@ def migrate_base_class_to_new_class(obj,\n \n \n def list_of_objects_with_changed_base_class(context):\n-    catalog = getToolByName(context, \'portal_catalog\')\n+    catalog = getToolByName(context, "portal_catalog")\n     for brain in catalog(object_provides=IDexterityContent.__identifier__):\n         try:\n             obj = brain.getObject()\n         except (KeyError, NotFound):\n-            logger.warn(\'Object {0} not found\'.format(brain.getPath()))\n+            logger.warn("Object {0} not found".format(brain.getPath()))\n             continue\n         if get_portal_type_name_string(obj) != get_old_class_name_string(obj):\n             yield obj\n'

Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2022-04-30T12:35:02+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contenttypes/commit/3337717cdf2839ed2d6ea172138dccfae9e139f3

isort

Files changed:
M bootstrap-buildout.py
M docs/source/conf.py
M plone/app/contenttypes/__init__.py
M plone/app/contenttypes/behaviors/leadimage.py
M plone/app/contenttypes/browser/migration.py
M plone/app/contenttypes/content.py
M plone/app/contenttypes/indexers.py
M plone/app/contenttypes/permissions.py
M plone/app/contenttypes/tests/test_behaviors_collection.py
M plone/app/contenttypes/tests/test_behaviors_leadimage.py
M plone/app/contenttypes/tests/test_behaviors_richtext.py
M plone/app/contenttypes/tests/test_behaviors_table_of_contents.py
M plone/app/contenttypes/tests/test_browser_utils.py
M plone/app/contenttypes/tests/test_collection.py
M plone/app/contenttypes/tests/test_collection_rss.py
M plone/app/contenttypes/tests/test_document.py
M plone/app/contenttypes/tests/test_event.py
M plone/app/contenttypes/tests/test_file.py
M plone/app/contenttypes/tests/test_folder.py
M plone/app/contenttypes/tests/test_image.py
M plone/app/contenttypes/tests/test_indexes.py
M plone/app/contenttypes/tests/test_link.py
M plone/app/contenttypes/tests/test_news_item.py
M plone/app/contenttypes/tests/test_security.py
M plone/app/contenttypes/tests/test_setup.py
M plone/app/contenttypes/tests/test_webdav.py
M plone/app/contenttypes/utils.py

b'diff --git a/bootstrap-buildout.py b/bootstrap-buildout.py\nindex a8bc0c9b..54318586 100644\n--- a/bootstrap-buildout.py\n+++ b/bootstrap-buildout.py\n@@ -18,12 +18,13 @@\n use the -c option to specify an alternate configuration file.\n """\n \n+from optparse import OptionParser\n+\n import os\n import shutil\n import sys\n import tempfile\n \n-from optparse import OptionParser\n \n __version__ = "2015-07-01"\n # See zc.buildout\'s changelog if this version is up to date.\n@@ -129,8 +130,9 @@\n     setup_args["to_dir"] = options.setuptools_to_dir\n \n ez["use_setuptools"](**setup_args)\n-import setuptools\n import pkg_resources\n+import setuptools\n+\n \n # This does not (always?) update the default working set.  We will\n # do it.\n@@ -209,6 +211,7 @@ def _final_version(parsed_version):\n \n import subprocess\n \n+\n if subprocess.call(cmd) != 0:\n     raise Exception("Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n \n@@ -219,6 +222,7 @@ def _final_version(parsed_version):\n ws.require(requirement)\n import zc.buildout.buildout\n \n+\n if not [a for a in args if "=" not in a]:\n     args.append("bootstrap")\n \ndiff --git a/docs/source/conf.py b/docs/source/conf.py\nindex daf35b0b..438d6487 100644\n--- a/docs/source/conf.py\n+++ b/docs/source/conf.py\n@@ -11,7 +11,9 @@\n # All configuration values have a default; values that are commented out\n # serve to show the default.\n \n-import sys, os\n+import os\n+import sys\n+\n \n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\ndiff --git a/plone/app/contenttypes/__init__.py b/plone/app/contenttypes/__init__.py\nindex 7ce837e9..b2324b13 100644\n--- a/plone/app/contenttypes/__init__.py\n+++ b/plone/app/contenttypes/__init__.py\n@@ -1,7 +1,6 @@\n # -*- coding: utf-8 -*-\n-from zope.i18nmessageid import MessageFactory\n-\n from . import permissions\n+from zope.i18nmessageid import MessageFactory\n \n \n permissions  # pyflakes\ndiff --git a/plone/app/contenttypes/behaviors/leadimage.py b/plone/app/contenttypes/behaviors/leadimage.py\nindex 3c690fa9..036a65cd 100644\n--- a/plone/app/contenttypes/behaviors/leadimage.py\n+++ b/plone/app/contenttypes/behaviors/leadimage.py\n@@ -7,8 +7,8 @@\n from zope import schema\n from zope.component import adapter\n from zope.interface import implementer\n-from zope.interface import provider\n from zope.interface import Interface\n+from zope.interface import provider\n \n \n class ILeadImage(Interface):\ndiff --git a/plone/app/contenttypes/browser/migration.py b/plone/app/contenttypes/browser/migration.py\nindex f410cef3..6d9a4b82 100644\n--- a/plone/app/contenttypes/browser/migration.py\n+++ b/plone/app/contenttypes/browser/migration.py\n@@ -4,10 +4,10 @@\n from plone.app.contenttypes.content import Image\n from plone.app.contenttypes.content import Link\n from plone.app.contenttypes.content import NewsItem\n+from plone.app.contenttypes.utils import changed_base_classes\n from plone.app.contenttypes.utils import DEFAULT_TYPES\n from plone.app.contenttypes.utils import get_old_class_name_string\n from plone.app.contenttypes.utils import migrate_base_class_to_new_class\n-from plone.app.contenttypes.utils import changed_base_classes\n from plone.browserlayer.interfaces import ILocalBrowserLayerType\n from plone.dexterity.interfaces import IDexterityContent\n from plone.dexterity.interfaces import IDexterityFTI\n@@ -27,10 +27,10 @@\n from zope import schema\n from zope.component import getMultiAdapter\n from zope.component import queryUtility\n+from zope.interface import implementer\n from zope.interface import Interface\n from zope.schema.interfaces import IVocabularyFactory\n from zope.schema.vocabulary import SimpleVocabulary\n-from zope.interface import implementer\n \n import logging\n import pkg_resources\ndiff --git a/plone/app/contenttypes/content.py b/plone/app/contenttypes/content.py\nindex c408c57d..40e7f869 100644\n--- a/plone/app/contenttypes/content.py\n+++ b/plone/app/contenttypes/content.py\n@@ -19,7 +19,6 @@\n from zope.interface import implementer\n from zope.lifecycleevent import modified\n \n-\n import six\n \n \ndiff --git a/plone/app/contenttypes/indexers.py b/plone/app/contenttypes/indexers.py\nindex 9140af95..69d78a00 100644\n--- a/plone/app/contenttypes/indexers.py\n+++ b/plone/app/contenttypes/indexers.py\n@@ -15,12 +15,11 @@\n from plone.indexer.decorator import indexer\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import safe_unicode\n from Products.CMFPlone.utils import human_readable_size\n+from Products.CMFPlone.utils import safe_unicode\n from Products.PortalTransforms.libtransforms.utils import MissingBinary\n from ZODB.POSException import ConflictError\n \n-\n import six\n \n \ndiff --git a/plone/app/contenttypes/permissions.py b/plone/app/contenttypes/permissions.py\nindex 1d0300cc..a4e7eb0d 100644\n--- a/plone/app/contenttypes/permissions.py\n+++ b/plone/app/contenttypes/permissions.py\n@@ -3,6 +3,7 @@\n from AccessControl.SecurityInfo import ModuleSecurityInfo\n from plone.app.contenttypes.utils import DEFAULT_TYPES\n \n+\n security = ModuleSecurityInfo("plone.app.contenttypes")\n \n TYPE_ROLES = ("Manager", "Site Administrator", "Owner", "Contributor")\ndiff --git a/plone/app/contenttypes/tests/test_behaviors_collection.py b/plone/app/contenttypes/tests/test_behaviors_collection.py\nindex c972a7f7..6df53e4c 100644\n--- a/plone/app/contenttypes/tests/test_behaviors_collection.py\n+++ b/plone/app/contenttypes/tests/test_behaviors_collection.py\n@@ -1,8 +1,8 @@\n # -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n-from plone.app.contenttypes.testing import (\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n-)  # noqa\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\ndiff --git a/plone/app/contenttypes/tests/test_behaviors_leadimage.py b/plone/app/contenttypes/tests/test_behaviors_leadimage.py\nindex 635e38f5..dc17cc10 100644\n--- a/plone/app/contenttypes/tests/test_behaviors_leadimage.py\n+++ b/plone/app/contenttypes/tests/test_behaviors_leadimage.py\n@@ -1,8 +1,8 @@\n # -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n-from plone.app.contenttypes.testing import (\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n-)  # noqa\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\ndiff --git a/plone/app/contenttypes/tests/test_behaviors_richtext.py b/plone/app/contenttypes/tests/test_behaviors_richtext.py\nindex 319f8864..84903cae 100644\n--- a/plone/app/contenttypes/tests/test_behaviors_richtext.py\n+++ b/plone/app/contenttypes/tests/test_behaviors_richtext.py\n@@ -1,8 +1,8 @@\n # -*- coding: utf-8 -*-\n from plone.app.contenttypes.behaviors.richtext import IRichText\n-from plone.app.contenttypes.testing import (\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n-)  # noqa\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\ndiff --git a/plone/app/contenttypes/tests/test_behaviors_table_of_contents.py b/plone/app/contenttypes/tests/test_behaviors_table_of_contents.py\nindex ec955228..21d62b20 100644\n--- a/plone/app/contenttypes/tests/test_behaviors_table_of_contents.py\n+++ b/plone/app/contenttypes/tests/test_behaviors_table_of_contents.py\n@@ -1,8 +1,8 @@\n # -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n-from plone.app.contenttypes.testing import (\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n-)  # noqa\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\ndiff --git a/plone/app/contenttypes/tests/test_browser_utils.py b/plone/app/contenttypes/tests/test_browser_utils.py\nindex e1fa2846..fe46233e 100644\n--- a/plone/app/contenttypes/tests/test_browser_utils.py\n+++ b/plone/app/contenttypes/tests/test_browser_utils.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n-from plone.app.contenttypes.testing import (\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n-)  # noqa\n+)\n from zope.component import getMultiAdapter\n \n import unittest\ndiff --git a/plone/app/contenttypes/tests/test_collection.py b/plone/app/contenttypes/tests/test_collection.py\nindex 58c5af85..c6d86d46 100644\n--- a/plone/app/contenttypes/tests/test_collection.py\n+++ b/plone/app/contenttypes/tests/test_collection.py\n@@ -5,12 +5,12 @@\n     ICollection as ICollection_behavior,\n )  # noqa\n from plone.app.contenttypes.interfaces import ICollection\n-from plone.app.contenttypes.testing import (\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n-)  # noqa\n-from plone.app.contenttypes.testing import (\n+)\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n-)  # noqa\n+)\n from plone.app.contenttypes.testing import set_browserlayer\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.testing import login\ndiff --git a/plone/app/contenttypes/tests/test_collection_rss.py b/plone/app/contenttypes/tests/test_collection_rss.py\nindex 88775fdd..e11ff413 100644\n--- a/plone/app/contenttypes/tests/test_collection_rss.py\n+++ b/plone/app/contenttypes/tests/test_collection_rss.py\n@@ -1,9 +1,9 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from lxml import etree\n-from plone.app.contenttypes.testing import (\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n-)  # noqa\n+)\n from plone.app.testing import login\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\ndiff --git a/plone/app/contenttypes/tests/test_document.py b/plone/app/contenttypes/tests/test_document.py\nindex a3c7f567..5b3f8392 100644\n--- a/plone/app/contenttypes/tests/test_document.py\n+++ b/plone/app/contenttypes/tests/test_document.py\n@@ -1,11 +1,11 @@\n # -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IDocument\n-from plone.app.contenttypes.testing import (\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n-)  # noqa\n-from plone.app.contenttypes.testing import (\n+)\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n-)  # noqa\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\ndiff --git a/plone/app/contenttypes/tests/test_event.py b/plone/app/contenttypes/tests/test_event.py\nindex 49c67492..9262a0e6 100644\n--- a/plone/app/contenttypes/tests/test_event.py\n+++ b/plone/app/contenttypes/tests/test_event.py\n@@ -1,11 +1,11 @@\n # -*- coding: utf-8 -*-\n from datetime import datetime\n-from plone.app.contenttypes.testing import (\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n-)  # noqa\n-from plone.app.contenttypes.testing import (\n+)\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n-)  # noqa\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\ndiff --git a/plone/app/contenttypes/tests/test_file.py b/plone/app/contenttypes/tests/test_file.py\nindex a5a8ef4a..77929f4e 100644\n--- a/plone/app/contenttypes/tests/test_file.py\n+++ b/plone/app/contenttypes/tests/test_file.py\n@@ -1,12 +1,12 @@\n # -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IFile\n from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n-from plone.app.contenttypes.testing import (\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n-)  # noqa\n-from plone.app.contenttypes.testing import (\n+)\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n-)  # noqa\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\ndiff --git a/plone/app/contenttypes/tests/test_folder.py b/plone/app/contenttypes/tests/test_folder.py\nindex f668e71d..d7b01cfb 100644\n--- a/plone/app/contenttypes/tests/test_folder.py\n+++ b/plone/app/contenttypes/tests/test_folder.py\n@@ -1,12 +1,12 @@\n # -*- coding: utf-8 -*-\n from plone.app.contenttypes.browser.folder import FolderView\n from plone.app.contenttypes.interfaces import IFolder\n-from plone.app.contenttypes.testing import (\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n-)  # noqa\n-from plone.app.contenttypes.testing import (\n+)\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n-)  # noqa\n+)\n from plone.app.contenttypes.tests.test_image import dummy_image\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\ndiff --git a/plone/app/contenttypes/tests/test_image.py b/plone/app/contenttypes/tests/test_image.py\nindex f65d2df1..83a0df6a 100644\n--- a/plone/app/contenttypes/tests/test_image.py\n+++ b/plone/app/contenttypes/tests/test_image.py\n@@ -1,11 +1,11 @@\n # -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IImage\n-from plone.app.contenttypes.testing import (\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n-)  # noqa\n-from plone.app.contenttypes.testing import (\n+)\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n-)  # noqa\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\ndiff --git a/plone/app/contenttypes/tests/test_indexes.py b/plone/app/contenttypes/tests/test_indexes.py\nindex c6d4cee1..a521321c 100644\n--- a/plone/app/contenttypes/tests/test_indexes.py\n+++ b/plone/app/contenttypes/tests/test_indexes.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n-from plone.app.contenttypes.testing import (\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n-)  # noqa\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.textfield.value import RichTextValue\ndiff --git a/plone/app/contenttypes/tests/test_link.py b/plone/app/contenttypes/tests/test_link.py\nindex 15af3a65..1688b68f 100644\n--- a/plone/app/contenttypes/tests/test_link.py\n+++ b/plone/app/contenttypes/tests/test_link.py\n@@ -1,20 +1,20 @@\n # -*- coding: utf-8 -*-\n from datetime import datetime\n-from plone.app.z3cform.converters import LinkWidgetDataConverter\n-from plone.app.z3cform.widget import LinkWidget\n from plone.app.contenttypes.interfaces import ILink\n-from plone.app.contenttypes.testing import (\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n-)  # noqa\n-from plone.app.contenttypes.testing import (\n+)\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n-)  # noqa\n+)\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n+from plone.app.z3cform.converters import LinkWidgetDataConverter\n from plone.app.z3cform.interfaces import IPloneFormLayer\n+from plone.app.z3cform.widget import LinkWidget\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.testing.zope import Browser\n from plone.uuid.interfaces import IUUID\ndiff --git a/plone/app/contenttypes/tests/test_news_item.py b/plone/app/contenttypes/tests/test_news_item.py\nindex b5171bf6..a2b8df04 100644\n--- a/plone/app/contenttypes/tests/test_news_item.py\n+++ b/plone/app/contenttypes/tests/test_news_item.py\n@@ -1,11 +1,11 @@\n # -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import INewsItem\n-from plone.app.contenttypes.testing import (\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n-)  # noqa\n-from plone.app.contenttypes.testing import (\n+)\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n-)  # noqa\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -74,8 +74,8 @@ def test_view(self):\n         self.assertTrue("Lorem ipsum" in view())\n \n     def test_leadimage_viewlet_does_not_show_up_for_newsitems(self):\n-        from zope.interface import alsoProvides\n         from plone.app.contenttypes.behaviors.leadimage import ILeadImage\n+        from zope.interface import alsoProvides\n \n         alsoProvides(self.request, ILeadImage)\n         view = View(self.portal, self.request)\ndiff --git a/plone/app/contenttypes/tests/test_security.py b/plone/app/contenttypes/tests/test_security.py\nindex 60bad141..e7309b07 100644\n--- a/plone/app/contenttypes/tests/test_security.py\n+++ b/plone/app/contenttypes/tests/test_security.py\n@@ -1,8 +1,8 @@\n # -*- coding: utf-8 -*-\n from io import BytesIO\n-from plone.app.contenttypes.testing import (\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n-)  # noqa\n+)\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n@@ -99,11 +99,10 @@ def publish(\n         """\n         Mostly pulled from Testing.functional\n         """\n-        from ZPublisher.Request import Request\n-        from ZPublisher.Response import Response\n-\n         # Note: the next import fail in Python 3, because it needs ZServer.\n         from ZPublisher.Publish import publish_module\n+        from ZPublisher.Request import Request\n+        from ZPublisher.Response import Response\n \n         transaction.commit()\n \ndiff --git a/plone/app/contenttypes/tests/test_setup.py b/plone/app/contenttypes/tests/test_setup.py\nindex 763d49d5..61a356aa 100644\n--- a/plone/app/contenttypes/tests/test_setup.py\n+++ b/plone/app/contenttypes/tests/test_setup.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n-from plone.app.contenttypes.testing import (\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n-)  # noqa\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n \n@@ -32,7 +32,7 @@ def test_atcontenttypes_replaced_by_dexterity_types(self):\n         self.assertEqual(self.types["News Item"].meta_type, "Dexterity FTI")\n \n     def test_browserlayer_available(self):\n-        from plone.browserlayer import utils\n         from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n+        from plone.browserlayer import utils\n \n         self.assertTrue(IPloneAppContenttypesLayer in utils.registered_layers())\ndiff --git a/plone/app/contenttypes/tests/test_webdav.py b/plone/app/contenttypes/tests/test_webdav.py\nindex e91e1e35..5ce92080 100644\n--- a/plone/app/contenttypes/tests/test_webdav.py\n+++ b/plone/app/contenttypes/tests/test_webdav.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n-from plone.app.contenttypes.testing import (\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n-)  # noqa\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from zope.publisher.browser import TestRequest\ndiff --git a/plone/app/contenttypes/utils.py b/plone/app/contenttypes/utils.py\nindex 589214c8..417d5600 100644\n--- a/plone/app/contenttypes/utils.py\n+++ b/plone/app/contenttypes/utils.py\n@@ -1,15 +1,16 @@\n+from plone.dexterity.interfaces import IDexterityContent\n from plone.dexterity.interfaces import IDexterityFTI\n-from zope.component import queryUtility\n-from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2Base\n-from zope.interface import alsoProvides\n from plone.folder.interfaces import IOrdering\n+from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2Base\n from Products.CMFCore.utils import getToolByName\n from zExceptions import NotFound\n-from plone.dexterity.interfaces import IDexterityContent\n+from zope.component import queryUtility\n+from zope.interface import alsoProvides\n \n import importlib\n import logging\n \n+\n logger = logging.getLogger(__name__)\n \n \n'

Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2022-04-30T12:35:41+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contenttypes/commit/c0587f418c0649a328a03f569fe3708a984b4bf9

find  -name "*.py" -exec pyupgrade  --py3-only --py37-plus {} +

Files changed:
M docs/source/conf.py
M plone/__init__.py
M plone/app/__init__.py
M plone/app/contenttypes/__init__.py
M plone/app/contenttypes/behaviors/__init__.py
M plone/app/contenttypes/behaviors/collection.py
M plone/app/contenttypes/behaviors/leadimage.py
M plone/app/contenttypes/behaviors/richtext.py
M plone/app/contenttypes/behaviors/tableofcontents.py
M plone/app/contenttypes/behaviors/thumb_icon.py
M plone/app/contenttypes/behaviors/viewlets.py
M plone/app/contenttypes/browser/__init__.py
M plone/app/contenttypes/browser/collection.py
M plone/app/contenttypes/browser/file.py
M plone/app/contenttypes/browser/folder.py
M plone/app/contenttypes/browser/full_view.py
M plone/app/contenttypes/browser/migration.py
M plone/app/contenttypes/browser/utils.py
M plone/app/contenttypes/content.py
M plone/app/contenttypes/indexers.py
M plone/app/contenttypes/interfaces.py
M plone/app/contenttypes/permissions.py
M plone/app/contenttypes/schema/__init__.py
M plone/app/contenttypes/setuphandlers.py
M plone/app/contenttypes/subscribers.py
M plone/app/contenttypes/testing.py
M plone/app/contenttypes/tests/oldtypes.py
M plone/app/contenttypes/tests/robot/variables.py
M plone/app/contenttypes/tests/test_behaviors_collection.py
M plone/app/contenttypes/tests/test_behaviors_leadimage.py
M plone/app/contenttypes/tests/test_behaviors_richtext.py
M plone/app/contenttypes/tests/test_behaviors_table_of_contents.py
M plone/app/contenttypes/tests/test_browser_utils.py
M plone/app/contenttypes/tests/test_collection.py
M plone/app/contenttypes/tests/test_collection_rss.py
M plone/app/contenttypes/tests/test_content_profile.py
M plone/app/contenttypes/tests/test_document.py
M plone/app/contenttypes/tests/test_event.py
M plone/app/contenttypes/tests/test_file.py
M plone/app/contenttypes/tests/test_folder.py
M plone/app/contenttypes/tests/test_image.py
M plone/app/contenttypes/tests/test_indexes.py
M plone/app/contenttypes/tests/test_link.py
M plone/app/contenttypes/tests/test_news_item.py
M plone/app/contenttypes/tests/test_robot.py
M plone/app/contenttypes/tests/test_security.py
M plone/app/contenttypes/tests/test_setup.py
M plone/app/contenttypes/tests/test_webdav.py
M plone/app/contenttypes/upgrades.py
M plone/app/contenttypes/utils.py
M setup.py

b'diff --git a/docs/source/conf.py b/docs/source/conf.py\nindex 438d64873..c2bc52abe 100644\n--- a/docs/source/conf.py\n+++ b/docs/source/conf.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # plone.app.contenttypes documentation build configuration file, created by\n # sphinx-quickstart on Sat May  4 10:52:54 2013.\n@@ -42,8 +41,8 @@\n master_doc = "index"\n \n # General information about the project.\n-project = u"plone.app.contenttypes"\n-copyright = u"2013, Plone Foundation"\n+project = "plone.app.contenttypes"\n+copyright = "2013, Plone Foundation"\n \n # The version info for the project you\'re documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n@@ -186,8 +185,8 @@\n     (\n         "index",\n         "ploneappcontenttypes.tex",\n-        u"plone.app.contenttypes Documentation",\n-        u"Plone Foundation",\n+        "plone.app.contenttypes Documentation",\n+        "Plone Foundation",\n         "manual",\n     ),\n ]\n@@ -221,8 +220,8 @@\n     (\n         "index",\n         "ploneappcontenttypes",\n-        u"plone.app.contenttypes Documentation",\n-        [u"Plone Foundation"],\n+        "plone.app.contenttypes Documentation",\n+        ["Plone Foundation"],\n         1,\n     )\n ]\n@@ -240,8 +239,8 @@\n     (\n         "index",\n         "ploneappcontenttypes",\n-        u"plone.app.contenttypes Documentation",\n-        u"Plone Foundation",\n+        "plone.app.contenttypes Documentation",\n+        "Plone Foundation",\n         "ploneappcontenttypes",\n         "One line description of project.",\n         "Miscellaneous",\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 6a3c1c079..5f9c2f42a 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n     __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 6a3c1c079..5f9c2f42a 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n     __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/contenttypes/__init__.py b/plone/app/contenttypes/__init__.py\nindex b2324b13f..ac45a45bb 100644\n--- a/plone/app/contenttypes/__init__.py\n+++ b/plone/app/contenttypes/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from . import permissions\n from zope.i18nmessageid import MessageFactory\n \ndiff --git a/plone/app/contenttypes/behaviors/__init__.py b/plone/app/contenttypes/behaviors/__init__.py\nindex 40a96afc6..e69de29bb 100644\n--- a/plone/app/contenttypes/behaviors/__init__.py\n+++ b/plone/app/contenttypes/behaviors/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/contenttypes/behaviors/collection.py b/plone/app/contenttypes/behaviors/collection.py\nindex 8ac21efcf..63e488c9e 100644\n--- a/plone/app/contenttypes/behaviors/collection.py\n+++ b/plone/app/contenttypes/behaviors/collection.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes import _\n from plone.app.z3cform.widget import QueryStringFieldWidget\n from plone.autoform import directives as form\n@@ -37,11 +36,11 @@\n class ICollection(model.Schema):\n \n     query = schema.List(\n-        title=_(u"Search terms"),\n+        title=_("Search terms"),\n         description=_(\n-            u"Define the search terms for the items you want "\n-            u"to list by choosing what to match on. "\n-            u"The list of results will be dynamically updated"\n+            "Define the search terms for the items you want "\n+            "to list by choosing what to match on. "\n+            "The list of results will be dynamically updated"\n         ),\n         value_type=schema.Dict(value_type=schema.Field(), key_type=schema.TextLine()),\n         required=False,\n@@ -50,38 +49,38 @@ class ICollection(model.Schema):\n     form.widget("query", QueryStringFieldWidget)\n \n     sort_on = schema.TextLine(\n-        title=_(u"label_sort_on", default=u"Sort on"),\n-        description=_(u"Sort the collection on this index"),\n+        title=_("label_sort_on", default="Sort on"),\n+        description=_("Sort the collection on this index"),\n         required=False,\n     )\n \n     sort_reversed = schema.Bool(\n-        title=_(u"label_sort_reversed", default=u"Reversed order"),\n-        description=_(u"Sort the results in reversed order"),\n+        title=_("label_sort_reversed", default="Reversed order"),\n+        description=_("Sort the results in reversed order"),\n         required=False,\n     )\n \n     limit = schema.Int(\n-        title=_(u"Limit"),\n-        description=_(u"Limit Search Results"),\n+        title=_("Limit"),\n+        description=_("Limit Search Results"),\n         required=False,\n         default=1000,\n         min=1,\n     )\n \n     item_count = schema.Int(\n-        title=_(u"label_item_count", default=u"Item count"),\n-        description=_(u"Number of items that will show up in one batch."),\n+        title=_("label_item_count", default="Item count"),\n+        description=_("Number of items that will show up in one batch."),\n         required=False,\n         default=30,\n         min=1,\n     )\n \n     customViewFields = schema.List(\n-        title=_(u"Table Columns"),\n+        title=_("Table Columns"),\n         description=_(\n-            u"Select which fields to display when "\n-            u"\'Tabular view\' is selected in the display menu."\n+            "Select which fields to display when "\n+            "\'Tabular view\' is selected in the display menu."\n         ),\n         default=["Title", "Creator", "Type", "ModificationDate"],\n         value_type=schema.Choice(vocabulary="plone.app.vocabularies.MetadataFields"),\n@@ -95,7 +94,7 @@ class ISyndicatableCollection(ISyndicatable):\n \n @implementer(ICollection)\n @adapter(IDexterityContent)\n-class Collection(object):\n+class Collection:\n     def __init__(self, context):\n         self.context = context\n \ndiff --git a/plone/app/contenttypes/behaviors/leadimage.py b/plone/app/contenttypes/behaviors/leadimage.py\nindex 036a65cd6..5987d085d 100644\n--- a/plone/app/contenttypes/behaviors/leadimage.py\n+++ b/plone/app/contenttypes/behaviors/leadimage.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes import _\n from plone.autoform.interfaces import IFormFieldProvider\n from plone.dexterity.interfaces import IDexterityContent\n@@ -19,21 +18,21 @@ class ILeadImage(Interface):\n class ILeadImageBehavior(model.Schema):\n \n     image = namedfile.NamedBlobImage(\n-        title=_(u"label_leadimage", default=u"Lead Image"),\n-        description=u"",\n+        title=_("label_leadimage", default="Lead Image"),\n+        description="",\n         required=False,\n     )\n \n     image_caption = schema.TextLine(\n-        title=_(u"label_leadimage_caption", default=u"Lead Image Caption"),\n-        description=u"",\n+        title=_("label_leadimage_caption", default="Lead Image Caption"),\n+        description="",\n         required=False,\n     )\n \n \n @implementer(ILeadImageBehavior)\n @adapter(IDexterityContent)\n-class LeadImage(object):\n+class LeadImage:\n     def __init__(self, context):\n         self.context = context\n \ndiff --git a/plone/app/contenttypes/behaviors/richtext.py b/plone/app/contenttypes/behaviors/richtext.py\nindex 36624f517..ab3f492c2 100644\n--- a/plone/app/contenttypes/behaviors/richtext.py\n+++ b/plone/app/contenttypes/behaviors/richtext.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.app.contenttypes import _\n from plone.app.dexterity.textindexer import searchable\n@@ -23,8 +22,8 @@ class IRichText(Interface):\n class IRichTextBehavior(model.Schema):\n \n     text = RichTextField(\n-        title=_(u"Text"),\n-        description=u"",\n+        title=_("Text"),\n+        description="",\n         required=False,\n     )\n     form.widget("text", RichTextFieldWidget)\n@@ -34,7 +33,7 @@ class IRichTextBehavior(model.Schema):\n \n @implementer(IRichTextBehavior)\n @adapter(IDexterityContent)\n-class RichText(object):\n+class RichText:\n     def __init__(self, context):\n         self.context = context\n \ndiff --git a/plone/app/contenttypes/behaviors/tableofcontents.py b/plone/app/contenttypes/behaviors/tableofcontents.py\nindex 2bf826691..b4c7a6a59 100644\n--- a/plone/app/contenttypes/behaviors/tableofcontents.py\n+++ b/plone/app/contenttypes/behaviors/tableofcontents.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.autoform.interfaces import IFormFieldProvider\n from plone.supermodel import model\n from zope import schema\n@@ -12,14 +11,14 @@\n @provider(IFormFieldProvider)\n class ITableOfContents(model.Schema):\n \n-    model.fieldset("settings", label=_(u"Settings"), fields=["table_of_contents"])\n+    model.fieldset("settings", label=_("Settings"), fields=["table_of_contents"])\n \n     table_of_contents = schema.Bool(\n-        title=_(u"help_enable_table_of_contents", default=u"Table of contents"),\n+        title=_("help_enable_table_of_contents", default="Table of contents"),\n         description=_(\n-            u"help_enable_table_of_contents_description",\n-            default=u"If selected, this will show a table of contents"\n-            u" at the top of the page.",\n+            "help_enable_table_of_contents_description",\n+            default="If selected, this will show a table of contents"\n+            " at the top of the page.",\n         ),\n         required=False,\n     )\ndiff --git a/plone/app/contenttypes/behaviors/thumb_icon.py b/plone/app/contenttypes/behaviors/thumb_icon.py\nindex 426bd7905..3ef985d21 100644\n--- a/plone/app/contenttypes/behaviors/thumb_icon.py\n+++ b/plone/app/contenttypes/behaviors/thumb_icon.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes import _\n from plone.autoform import directives\n from plone.autoform.interfaces import IFormFieldProvider\n@@ -14,7 +13,7 @@ class IThumbIconHandling(model.Schema):\n \n     model.fieldset(\n         "settings",\n-        label=_(u"Settings"),\n+        label=_("Settings"),\n         fields=[\n             "thumb_scale_list",\n             "thumb_scale_table",\n@@ -25,50 +24,50 @@ class IThumbIconHandling(model.Schema):\n     )\n \n     thumb_scale_list = schema.TextLine(\n-        title=_(u"Override thumb scale for list view"),\n+        title=_("Override thumb scale for list view"),\n         description=_(\n-            u"Enter a valid scale name"\n-            u" (see \'Image Handling\' control panel) to override"\n-            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n-            u" Leave empty to use default (see \'Site\' control panel)."\n+            "Enter a valid scale name"\n+            " (see \'Image Handling\' control panel) to override"\n+            " (e.g. icon, tile, thumb, mini, preview, ... )."\n+            " Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u"",\n+        default="",\n     )\n \n     thumb_scale_table = schema.TextLine(\n-        title=_(u"Override thumb scale for table view"),\n+        title=_("Override thumb scale for table view"),\n         description=_(\n-            u"Enter a valid scale name"\n-            u" (see \'Image Handling\' control panel) to override"\n-            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n-            u" Leave empty to use default (see \'Site\' control panel)."\n+            "Enter a valid scale name"\n+            " (see \'Image Handling\' control panel) to override"\n+            " (e.g. icon, tile, thumb, mini, preview, ... )."\n+            " Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u"",\n+        default="",\n     )\n \n     thumb_scale_summary = schema.TextLine(\n-        title=_(u"Override thumb scale for summary view"),\n+        title=_("Override thumb scale for summary view"),\n         description=_(\n-            u"Enter a valid scale name"\n-            u" (see \'Image Handling\' control panel) to override"\n-            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n-            u" Leave empty to use default (see \'Site\' control panel)."\n+            "Enter a valid scale name"\n+            " (see \'Image Handling\' control panel) to override"\n+            " (e.g. icon, tile, thumb, mini, preview, ... )."\n+            " Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u"",\n+        default="",\n     )\n \n     suppress_icons = schema.Bool(\n-        title=_(u"Suppress icons in list, table or summary view"),\n-        description=_(u""),\n+        title=_("Suppress icons in list, table or summary view"),\n+        description=_(""),\n         required=False,\n         default=False,\n     )\n \n     suppress_thumbs = schema.Bool(\n-        title=_(u"Suppress thumbs in list, table or summary view"),\n+        title=_("Suppress thumbs in list, table or summary view"),\n         required=False,\n         default=False,\n     )\ndiff --git a/plone/app/contenttypes/behaviors/viewlets.py b/plone/app/contenttypes/behaviors/viewlets.py\nindex 101cd81f3..eb38dbb25 100644\n--- a/plone/app/contenttypes/behaviors/viewlets.py\n+++ b/plone/app/contenttypes/behaviors/viewlets.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.behaviors.leadimage import ILeadImage\n from plone.app.layout.viewlets import ViewletBase\n \ndiff --git a/plone/app/contenttypes/browser/__init__.py b/plone/app/contenttypes/browser/__init__.py\nindex 40a96afc6..e69de29bb 100644\n--- a/plone/app/contenttypes/browser/__init__.py\n+++ b/plone/app/contenttypes/browser/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/contenttypes/browser/collection.py b/plone/app/contenttypes/browser/collection.py\nindex 9cff4b039..c4f2a4e37 100644\n--- a/plone/app/contenttypes/browser/collection.py\n+++ b/plone/app/contenttypes/browser/collection.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.app.contenttypes import _\n from plone.app.contenttypes.behaviors.collection import ICollection\n@@ -83,4 +82,4 @@ def tabular_fields(self):\n \n     @property\n     def no_items_message(self):\n-        return _("description_no_results_found", default=u"No results were found.")\n+        return _("description_no_results_found", default="No results were found.")\ndiff --git a/plone/app/contenttypes/browser/file.py b/plone/app/contenttypes/browser/file.py\nindex 9122c2af8..087381ab6 100644\n--- a/plone/app/contenttypes/browser/file.py\n+++ b/plone/app/contenttypes/browser/file.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.browser.utils import Utils\n from Products.CMFPlone.utils import human_readable_size\n \ndiff --git a/plone/app/contenttypes/browser/folder.py b/plone/app/contenttypes/browser/folder.py\nindex 982de4d13..a266e931e 100644\n--- a/plone/app/contenttypes/browser/folder.py\n+++ b/plone/app/contenttypes/browser/folder.py\n@@ -31,7 +31,7 @@ class FolderView(BrowserView):\n     def plone_view(self):\n         if not self._plone_view:\n             self._plone_view = getMultiAdapter(\n-                (self.context, self.request), name=u"plone"\n+                (self.context, self.request), name="plone"\n             )\n         return self._plone_view\n \n@@ -39,7 +39,7 @@ def plone_view(self):\n     def portal_state(self):\n         if not self._portal_state:\n             self._portal_state = getMultiAdapter(\n-                (self.context, self.request), name=u"plone_portal_state"\n+                (self.context, self.request), name="plone_portal_state"\n             )\n         return self._portal_state\n \n@@ -47,7 +47,7 @@ def portal_state(self):\n     def pas_member(self):\n         if not self._pas_member:\n             self._pas_member = getMultiAdapter(\n-                (self.context, self.request), name=u"pas_member"\n+                (self.context, self.request), name="pas_member"\n             )\n         return self._pas_member\n \n@@ -233,7 +233,7 @@ def album_number_images(self):\n     def no_items_message(self):\n         return _(\n             "description_no_items_in_folder",\n-            default=u"There are currently no items in this folder.",\n+            default="There are currently no items in this folder.",\n         )\n \n     @memoize\ndiff --git a/plone/app/contenttypes/browser/full_view.py b/plone/app/contenttypes/browser/full_view.py\nindex cf0559cd1..f2fc191f1 100644\n--- a/plone/app/contenttypes/browser/full_view.py\n+++ b/plone/app/contenttypes/browser/full_view.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.registry.interfaces import IRegistry\n from Products.Five.browser import BrowserView\n from zope.component import getUtility\n@@ -27,5 +26,5 @@ def item_url(self):\n         use_view_action = registry.get("plone.types_use_view_action_in_listings", [])\n         url = self.context.absolute_url()\n         if self.context.portal_type in use_view_action:\n-            url = u"{0}/view".format(url)\n+            url = f"{url}/view"\n         return url\ndiff --git a/plone/app/contenttypes/browser/migration.py b/plone/app/contenttypes/browser/migration.py\nindex 6d9a4b821..fc837c851 100644\n--- a/plone/app/contenttypes/browser/migration.py\n+++ b/plone/app/contenttypes/browser/migration.py\n@@ -40,7 +40,7 @@\n \n \n @implementer(IVocabularyFactory)\n-class ChangedBaseClasses(object):\n+class ChangedBaseClasses:\n     def __call__(self, context):\n         """Return a vocabulary with all changed base classes."""\n         terms = []\n@@ -56,8 +56,8 @@ def __call__(self, context):\n class IBaseClassMigratorForm(Interface):\n \n     changed_base_classes = schema.List(\n-        title=u"Changed base classes (old class, new class and number of items)",\n-        description=u"Select changed base classes you want to migrate. "\n+        title="Changed base classes (old class, new class and number of items)",\n+        description="Select changed base classes you want to migrate. "\n         "If the new types are folderish that change is also applied.",\n         value_type=schema.Choice(\n             vocabulary="plone.app.contenttypes.migration.changed_base_classes",\n@@ -84,11 +84,11 @@ def updateWidgets(self):\n         changed_base_classes = self.widgets["changed_base_classes"]\n         if not changed_base_classes.terms.terms.by_value:\n             IStatusMessage(self.request).addStatusMessage(\n-                u"No types with changed classes to migrate!", type="warning"\n+                "No types with changed classes to migrate!", type="warning"\n             )\n             return\n \n-    @button.buttonAndHandler(u"Update", name="update")\n+    @button.buttonAndHandler("Update", name="update")\n     def handle_migrate(self, action):\n         data, errors = self.extractData()\n \n@@ -98,7 +98,7 @@ def handle_migrate(self, action):\n         changed_base_classes = data.get("changed_base_classes", [])\n         messages = IStatusMessage(self.request)\n         if not changed_base_classes:\n-            messages.addStatusMessage(u"No types were selected", type="warning")\n+            messages.addStatusMessage("No types were selected", type="warning")\n             return\n \n         catalog = getToolByName(self.context, "portal_catalog")\ndiff --git a/plone/app/contenttypes/browser/utils.py b/plone/app/contenttypes/browser/utils.py\nindex 940f16a36..13e654d13 100644\n--- a/plone/app/contenttypes/browser/utils.py\n+++ b/plone/app/contenttypes/browser/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.memoize.view import memoize\n from Products.CMFCore.utils import getToolByName\n@@ -28,13 +27,11 @@ def _get_mimes(self, content_file):\n         mtr = getToolByName(context, "mimetypes_registry")\n         if content_file.contentType:\n             # this gives a tuple\n-            for mime in mtr.lookup(content_file.contentType):\n-                yield mime\n+            yield from mtr.lookup(content_file.contentType)\n         if content_file.filename:\n             # this gives a single mime type\n             yield mtr.lookupExtension(content_file.filename)\n-        for mime in mtr.lookup("application/octet-stream"):\n-            yield mime\n+        yield from mtr.lookup("application/octet-stream")\n \n     @memoize\n     def getMimeTypeIcon(self, content_file):\n@@ -54,6 +51,6 @@ def getMimeTypeIcon(self, content_file):\n             # Probably does not happen in practice.\n             return ""\n         context = aq_inner(self.context)\n-        pstate = getMultiAdapter((context, self.request), name=u"plone_portal_state")\n+        pstate = getMultiAdapter((context, self.request), name="plone_portal_state")\n         portal_url = pstate.portal_url()\n         return portal_url + "/" + guess_icon_path(first)\ndiff --git a/plone/app/contenttypes/content.py b/plone/app/contenttypes/content.py\nindex 40e7f8697..f360b6378 100644\n--- a/plone/app/contenttypes/content.py\n+++ b/plone/app/contenttypes/content.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.SecurityInfo import ClassSecurityInfo\n from email.feedparser import headerRE\n from plone.app.contenttypes.interfaces import ICollection\n@@ -105,7 +104,7 @@ def Format(self):\n         See https://github.com/plone/Products.CMFPlone/issues/2540\n         """\n         format = self.format\n-        if six.PY2 and isinstance(format, six.text_type):\n+        if six.PY2 and isinstance(format, str):\n             format = self.format.encode()\n         return format\n \n@@ -131,13 +130,13 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n \n             filename = request["PATH_INFO"].split("/")[-1]\n             self.file = NamedBlobFile(\n-                data=infile.read(), filename=six.text_type(filename)\n+                data=infile.read(), filename=str(filename)\n             )\n \n             modified(self)\n             return response\n         else:\n-            return super(File, self).PUT(REQUEST=request, RESPONSE=response)\n+            return super().PUT(REQUEST=request, RESPONSE=response)\n \n     @security.protected(permissions.View)\n     def get_size(self):\n@@ -175,13 +174,13 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n             infile = request.get("BODYFILE", None)\n             filename = request["PATH_INFO"].split("/")[-1]\n             self.image = NamedBlobImage(\n-                data=infile.read(), filename=six.text_type(filename)\n+                data=infile.read(), filename=str(filename)\n             )\n \n             modified(self)\n             return response\n         else:\n-            return super(Image, self).PUT(REQUEST=request, RESPONSE=response)\n+            return super().PUT(REQUEST=request, RESPONSE=response)\n \n     @security.protected(permissions.View)\n     def get_size(self):\ndiff --git a/plone/app/contenttypes/indexers.py b/plone/app/contenttypes/indexers.py\nindex 69d78a003..d2fce3d47 100644\n--- a/plone/app/contenttypes/indexers.py\n+++ b/plone/app/contenttypes/indexers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from logging import getLogger\n from plone.app.contenttypes.behaviors.richtext import IRichText\n@@ -36,19 +35,19 @@ def _unicode_save_string_concat(*args):\n     result = ""\n     for value in args:\n         if six.PY2:\n-            if isinstance(value, six.text_type):\n+            if isinstance(value, str):\n                 value = value.encode("utf-8", "replace")\n             if value:\n                 result = " ".join((result, value))\n         else:\n-            if isinstance(value, six.binary_type):\n+            if isinstance(value, bytes):\n                 value = safe_unicode(value)\n             result = " ".join((result, value))\n     return result\n \n \n def SearchableText(obj):\n-    text = u""\n+    text = ""\n     richtext = IRichText(obj, None)\n     if richtext:\n         textvalue = richtext.text\n@@ -70,13 +69,13 @@ def SearchableText(obj):\n                 .strip()\n             )\n \n-    subject = u" ".join([safe_unicode(s) for s in obj.Subject()])\n+    subject = " ".join([safe_unicode(s) for s in obj.Subject()])\n \n-    return u" ".join(\n+    return " ".join(\n         (\n             safe_unicode(obj.id),\n-            safe_unicode(obj.title) or u"",\n-            safe_unicode(obj.description) or u"",\n+            safe_unicode(obj.title) or "",\n+            safe_unicode(obj.description) or "",\n             safe_unicode(text),\n             safe_unicode(subject),\n         )\n@@ -104,8 +103,8 @@ def SearchableText_file(obj):\n         primary_field = IPrimaryFieldInfo(obj)\n     except TypeError:\n         logger.warn(\n-            u"Lookup of PrimaryField failed for {0} "\n-            u"If renaming or importing please reindex!".format(obj.absolute_url())\n+            "Lookup of PrimaryField failed for {} "\n+            "If renaming or importing please reindex!".format(obj.absolute_url())\n         )\n         return\n     if primary_field.value is None:\n@@ -135,7 +134,7 @@ def SearchableText_file(obj):\n     except Exception as msg:\n         logger.exception(\n             \'exception while trying to convert blob contents to "text/plain" \'\n-            "for {0}. Error: {1}".format(obj, str(msg)),\n+            "for {}. Error: {}".format(obj, str(msg)),\n         )\n         return SearchableText(obj)\n \n@@ -164,8 +163,8 @@ def getObjSize_image(obj):\n         primary_field_info = IPrimaryFieldInfo(obj)\n     except TypeError:\n         logger.warn(\n-            u"Lookup of PrimaryField failed for {0} If renaming or importing "\n-            u"please reindex!".format(obj.absolute_url())\n+            "Lookup of PrimaryField failed for {} If renaming or importing "\n+            "please reindex!".format(obj.absolute_url())\n         )\n         return\n     return human_readable_size(primary_field_info.value.size)\n@@ -177,8 +176,8 @@ def getObjSize_file(obj):\n         primary_field_info = IPrimaryFieldInfo(obj)\n     except TypeError:\n         logger.warn(\n-            u"Lookup of PrimaryField failed for {0} If renaming or importing "\n-            u"please reindex!".format(obj.absolute_url())\n+            "Lookup of PrimaryField failed for {} If renaming or importing "\n+            "please reindex!".format(obj.absolute_url())\n         )\n         return\n     return human_readable_size(primary_field_info.value.size)\ndiff --git a/plone/app/contenttypes/interfaces.py b/plone/app/contenttypes/interfaces.py\nindex 522a4943a..03021935b 100644\n--- a/plone/app/contenttypes/interfaces.py\n+++ b/plone/app/contenttypes/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \ndiff --git a/plone/app/contenttypes/permissions.py b/plone/app/contenttypes/permissions.py\nindex a4e7eb0d2..ac366c494 100644\n--- a/plone/app/contenttypes/permissions.py\n+++ b/plone/app/contenttypes/permissions.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.Permission import addPermission\n from AccessControl.SecurityInfo import ModuleSecurityInfo\n from plone.app.contenttypes.utils import DEFAULT_TYPES\ndiff --git a/plone/app/contenttypes/schema/__init__.py b/plone/app/contenttypes/schema/__init__.py\nindex 40a96afc6..e69de29bb 100644\n--- a/plone/app/contenttypes/schema/__init__.py\n+++ b/plone/app/contenttypes/schema/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/contenttypes/setuphandlers.py b/plone/app/contenttypes/setuphandlers.py\nindex f47255c93..2baeb7b26 100644\n--- a/plone/app/contenttypes/setuphandlers.py\n+++ b/plone/app/contenttypes/setuphandlers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from Acquisition import aq_base\n from Acquisition import aq_inner\n@@ -28,14 +27,14 @@\n \n \n @implementer(INonInstallable)\n-class HiddenProfiles(object):\n+class HiddenProfiles:\n     def getNonInstallableProfiles(self):\n         """\n         Prevents all profiles but \'plone-content\' from showing up in the\n         profile list when creating a Plone site.\n         """\n         return [\n-            u"plone.app.contenttypes:default",\n+            "plone.app.contenttypes:default",\n         ]\n \n \n@@ -48,7 +47,7 @@ def _publish(content):\n     return False\n \n \n-def _translate(name, target_language, default=u""):\n+def _translate(name, target_language, default=""):\n     """Simple function to translate a string."""\n     result = None\n     if target_language != "en":\n@@ -73,13 +72,13 @@ def addContentToContainer(container, object, checkConstraints=True):\n \n         fti = getUtility(IDexterityFTI, name=object.portal_type)\n         if not fti.isConstructionAllowed(container):\n-            raise Unauthorized("Cannot create {0}".format(object.portal_type))\n+            raise Unauthorized(f"Cannot create {object.portal_type}")\n \n         if container_fti is not None and not container_fti.allowType(\n             object.portal_type\n         ):\n             raise ValueError(\n-                "Disallowed subobject type: {0}".format(object.portal_type)\n+                f"Disallowed subobject type: {object.portal_type}"\n             )\n \n     chooser = INameChooser(container)\n@@ -112,7 +111,7 @@ def _get_locales_info(portal):\n \n def _setup_calendar(portal, locale):\n     """Set the calendar\'s date system to reflect the default locale"""\n-    gregorian_calendar = locale.dates.calendars.get(u"gregorian", None)\n+    gregorian_calendar = locale.dates.calendars.get("gregorian", None)\n     portal_calendar = getToolByName(portal, "portal_calendar", None)\n     if portal_calendar is not None:\n         first = 6\n@@ -155,20 +154,20 @@ def create_frontpage(portal, target_language):\n     if portal.text:\n         # Do not overwrite existing content\n         return\n-    portal.title = _translate(u"front-title", target_language, u"Welcome to Plone")\n+    portal.title = _translate("front-title", target_language, "Welcome to Plone")\n     portal.description = _translate(\n-        u"front-description",\n+        "front-description",\n         target_language,\n-        u"Congratulations! You have successfully installed Plone.",\n+        "Congratulations! You have successfully installed Plone.",\n     )\n     front_text = None\n     if target_language != "en":\n         util = queryUtility(ITranslationDomain, "plonefrontpage")\n         if util is not None:\n             translated_text = util.translate(\n-                u"front-text", target_language=target_language\n+                "front-text", target_language=target_language\n             )\n-            if translated_text != u"front-text":\n+            if translated_text != "front-text":\n                 front_text = translated_text\n     request = getattr(portal, "REQUEST", None)\n     if front_text is None and request is not None:\n@@ -183,8 +182,8 @@ def create_news_topic(portal, target_language):\n     news_id = "news"\n \n     if news_id not in portal.keys():\n-        title = _translate(u"news-title", target_language, u"News")\n-        description = _translate(u"news-description", target_language, u"Site News")\n+        title = _translate("news-title", target_language, "News")\n+        description = _translate("news-description", target_language, "Site News")\n         container = createContent(\n             "Folder",\n             id=news_id,\n@@ -214,19 +213,19 @@ def create_news_topic(portal, target_language):\n \n         # Set the Collection criteria.\n         #: Sort on the Effective date\n-        aggregator.sort_on = u"effective"\n+        aggregator.sort_on = "effective"\n         aggregator.sort_reversed = True\n         #: Query by Type and Review State\n         aggregator.query = [\n             {\n-                "i": u"portal_type",\n-                "o": u"plone.app.querystring.operation.selection.any",\n-                "v": [u"News Item"],\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.selection.any",\n+                "v": ["News Item"],\n             },\n             {\n-                "i": u"review_state",\n-                "o": u"plone.app.querystring.operation.selection.any",\n-                "v": [u"published"],\n+                "i": "review_state",\n+                "o": "plone.app.querystring.operation.selection.any",\n+                "v": ["published"],\n             },\n         ]\n         aggregator.setLayout("summary_view")\n@@ -238,8 +237,8 @@ def create_events_topic(portal, target_language):\n     events_id = "events"\n \n     if events_id not in portal.keys():\n-        title = _translate(u"events-title", target_language, u"Events")\n-        description = _translate(u"events-description", target_language, u"Site Events")\n+        title = _translate("events-title", target_language, "Events")\n+        description = _translate("events-description", target_language, "Site Events")\n         container = createContent(\n             "Folder",\n             id=events_id,\n@@ -270,7 +269,7 @@ def create_events_topic(portal, target_language):\n \n         # Set the Collection criteria.\n         #: Sort on the Event start date\n-        aggregator.sort_on = u"start"\n+        aggregator.sort_on = "start"\n         aggregator.sort_reversed = True\n         #: Query by Type and Review State\n         aggregator.query = [\n@@ -293,8 +292,8 @@ def configure_members_folder(portal, target_language):\n     members_id = "Members"\n \n     if members_id not in portal.keys():\n-        title = _translate(u"members-title", target_language, u"Users")\n-        description = _translate(u"members-description", target_language, u"Site Users")\n+        title = _translate("members-title", target_language, "Users")\n+        description = _translate("members-description", target_language, "Site Users")\n         container = createContent(\n             "Folder",\n             id=members_id,\ndiff --git a/plone/app/contenttypes/subscribers.py b/plone/app/contenttypes/subscribers.py\nindex 4c0c2788b..42958729f 100644\n--- a/plone/app/contenttypes/subscribers.py\n+++ b/plone/app/contenttypes/subscribers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IImage\n \n \n@@ -20,4 +19,4 @@ def set_title_description(obj, event):\n \n     description = obj.description\n     if not description:\n-        obj.description = u""\n+        obj.description = ""\ndiff --git a/plone/app/contenttypes/testing.py b/plone/app/contenttypes/testing.py\nindex c6f32d9f5..3444331fb 100644\n--- a/plone/app/contenttypes/testing.py\n+++ b/plone/app/contenttypes/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n from plone.app.contenttypes.tests.robot.variables import TEST_FOLDER_ID\n from plone.app.event.testing import PAEvent_FIXTURE\n@@ -52,13 +51,13 @@ def setUpPloneSite(self, portal):\n             SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ["Manager"], []\n         )\n         login(portal, SITE_OWNER_NAME)\n-        super(PloneAppContenttypesRobot, self).setUpPloneSite(portal)\n-        portal.invokeFactory("Folder", id=TEST_FOLDER_ID, title=u"Test Folder")\n+        super().setUpPloneSite(portal)\n+        portal.invokeFactory("Folder", id=TEST_FOLDER_ID, title="Test Folder")\n \n     def tearDownPloneSite(self, portal):\n         login(portal, "admin")\n         portal.manage_delObjects([TEST_FOLDER_ID])\n-        super(PloneAppContenttypesRobot, self).tearDownPloneSite(portal)\n+        super().tearDownPloneSite(portal)\n \n \n PLONE_APP_CONTENTTYPES_FIXTURE = PloneAppContenttypes()\ndiff --git a/plone/app/contenttypes/tests/oldtypes.py b/plone/app/contenttypes/tests/oldtypes.py\nindex 15a05e6f0..ceb46d376 100644\n--- a/plone/app/contenttypes/tests/oldtypes.py\n+++ b/plone/app/contenttypes/tests/oldtypes.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IEvent\n from plone.dexterity.content import Item\n from plone.dexterity.fti import DexterityFTI\ndiff --git a/plone/app/contenttypes/tests/robot/variables.py b/plone/app/contenttypes/tests/robot/variables.py\nindex e7844a651..e7017c130 100644\n--- a/plone/app/contenttypes/tests/robot/variables.py\n+++ b/plone/app/contenttypes/tests/robot/variables.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from pkg_resources import resource_filename\n \n \ndiff --git a/plone/app/contenttypes/tests/test_behaviors_collection.py b/plone/app/contenttypes/tests/test_behaviors_collection.py\nindex 6df53e4c0..dacd057a2 100644\n--- a/plone/app/contenttypes/tests/test_behaviors_collection.py\n+++ b/plone/app/contenttypes/tests/test_behaviors_collection.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n@@ -46,14 +45,14 @@ def setUp(self):\n         self.portal.invokeFactory(\n             "collectioncontainer",\n             id="collectioncontainer",\n-            title=u"Container with a collection",\n+            title="Container with a collection",\n             customViewFields=["Title", "portal_type"],\n             query=query,\n         )\n         self.portal.invokeFactory(\n             "Document",\n             id="doc",\n-            title=u"Collection Test Page",\n+            title="Collection Test Page",\n         )\n \n     def _get_browser(self):\n@@ -68,7 +67,7 @@ def _get_browser(self):\n         browser.handleErrors = False\n         browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(\n+            "Basic {}:{}".format(\n                 SITE_OWNER_NAME,\n                 SITE_OWNER_PASSWORD,\n             ),\ndiff --git a/plone/app/contenttypes/tests/test_behaviors_leadimage.py b/plone/app/contenttypes/tests/test_behaviors_leadimage.py\nindex dc17cc10f..06859fbc7 100644\n--- a/plone/app/contenttypes/tests/test_behaviors_leadimage.py\n+++ b/plone/app/contenttypes/tests/test_behaviors_leadimage.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n@@ -39,7 +38,7 @@ def setUp(self):\n \n         alsoProvides(self.request, ILeadImage)\n         self.portal.invokeFactory(\n-            "leadimagefolder", id="leadimagefolder", title=u"Folder with a lead image"\n+            "leadimagefolder", id="leadimagefolder", title="Folder with a lead image"\n         )\n         import transaction\n \n@@ -49,7 +48,7 @@ def setUp(self):\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(\n+            "Basic {}:{}".format(\n                 SITE_OWNER_NAME,\n                 SITE_OWNER_PASSWORD,\n             ),\ndiff --git a/plone/app/contenttypes/tests/test_behaviors_richtext.py b/plone/app/contenttypes/tests/test_behaviors_richtext.py\nindex 84903cae9..f8b2c4d7c 100644\n--- a/plone/app/contenttypes/tests/test_behaviors_richtext.py\n+++ b/plone/app/contenttypes/tests/test_behaviors_richtext.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.behaviors.richtext import IRichText\n from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n@@ -52,7 +51,7 @@ def setUp(self):\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(\n+            "Basic {}:{}".format(\n                 SITE_OWNER_NAME,\n                 SITE_OWNER_PASSWORD,\n             ),\ndiff --git a/plone/app/contenttypes/tests/test_behaviors_table_of_contents.py b/plone/app/contenttypes/tests/test_behaviors_table_of_contents.py\nindex 21d62b209..ef673ef1c 100644\n--- a/plone/app/contenttypes/tests/test_behaviors_table_of_contents.py\n+++ b/plone/app/contenttypes/tests/test_behaviors_table_of_contents.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n@@ -37,7 +36,7 @@ def setUp(self):\n \n         alsoProvides(self.request, ITableOfContents)\n         self.portal.invokeFactory(\n-            "tocdocument", id="tocdoc", title=u"Document with a table of contents"\n+            "tocdocument", id="tocdoc", title="Document with a table of contents"\n         )\n         import transaction\n \n@@ -47,7 +46,7 @@ def setUp(self):\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(\n+            "Basic {}:{}".format(\n                 SITE_OWNER_NAME,\n                 SITE_OWNER_PASSWORD,\n             ),\n@@ -63,7 +62,7 @@ def test_toc_viewlet_shows_up(self):\n             name="form.widgets.ITableOfContents.table_of_contents:list"\n         )\n         toc_ctl.value = [\n-            u"selected",\n+            "selected",\n         ]\n         # Submit form\n         self.browser.getControl("Save").click()\ndiff --git a/plone/app/contenttypes/tests/test_browser_utils.py b/plone/app/contenttypes/tests/test_browser_utils.py\nindex fe46233ed..b61df8dc6 100644\n--- a/plone/app/contenttypes/tests/test_browser_utils.py\n+++ b/plone/app/contenttypes/tests/test_browser_utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n )\n@@ -13,7 +12,7 @@\n PREFIX = "++resource++mimetype.icons/"\n \n \n-class DummyFile(object):\n+class DummyFile:\n     """Dummy file object.\n \n     For these tests, we only need a contentType and filename.\ndiff --git a/plone/app/contenttypes/tests/test_collection.py b/plone/app/contenttypes/tests/test_collection.py\nindex c6d86d467..42b2737df 100644\n--- a/plone/app/contenttypes/tests/test_collection.py\n+++ b/plone/app/contenttypes/tests/test_collection.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from DateTime import DateTime\n from plone.app.contenttypes.behaviors.collection import (\n@@ -44,7 +43,7 @@\n def dummy_image():\n     from plone.namedfile.file import NamedBlobImage\n \n-    filename = os.path.join(os.path.dirname(__file__), u"image.png")\n+    filename = os.path.join(os.path.dirname(__file__), "image.png")\n     with open(filename, "rb") as f:\n         image_data = f.read()\n     return NamedBlobImage(data=image_data, filename=filename)\n@@ -71,16 +70,16 @@ def test_bbb_selectedViewFields(self):\n         self.assertEqual(\n             self.collection.selectedViewFields(),\n             [\n-                ("Title", u"Title"),\n-                ("Creator", u"Creator"),\n-                ("Type", u"Type"),\n-                ("ModificationDate", u"Last modified"),\n+                ("Title", "Title"),\n+                ("Creator", "Creator"),\n+                ("Type", "Type"),\n+                ("ModificationDate", "Last modified"),\n             ],\n         )\n         self.collection.customViewFields = ["Title", "Description"]\n         self.assertEqual(\n             self.collection.selectedViewFields(),\n-            [("Title", u"Title"), ("Description", u"Description")],\n+            [("Title", "Title"), ("Description", "Description")],\n         )\n \n     def test_bbb_setQuery(self):\n@@ -195,7 +194,7 @@ def test_add_collection(self):\n         browser.handleErrors = False\n         browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(\n+            "Basic {}:{}".format(\n                 SITE_OWNER_NAME,\n                 SITE_OWNER_PASSWORD,\n             ),\n@@ -242,7 +241,7 @@ def test_collection_templates(self):\n             }\n         ]\n         collection.text = RichTextValue(\n-            u"Lorem collection ipsum", "text/plain", "text/html"\n+            "Lorem collection ipsum", "text/plain", "text/html"\n         )\n \n         wrapped = ICollection_behavior(collection)\n@@ -260,22 +259,22 @@ def test_collection_templates(self):\n         self.assertIn("Image example", browser.contents)\n \n         # open summary_view template\n-        browser.open("{0}/@@summary_view".format(url))\n+        browser.open(f"{url}/@@summary_view")\n         self.assertIn("Lorem collection ipsum", browser.contents)\n         self.assertIn("Image example", browser.contents)\n \n         # open full_view template\n-        browser.open("{0}/@@full_view".format(url))\n+        browser.open(f"{url}/@@full_view")\n         self.assertIn("Lorem collection ipsum", browser.contents)\n         self.assertIn("Image example", browser.contents)\n \n         # open tabular_view template\n-        browser.open("{0}/@@tabular_view".format(url))\n+        browser.open(f"{url}/@@tabular_view")\n         self.assertIn("Lorem collection ipsum", browser.contents)\n         self.assertIn("Image example", browser.contents)\n \n         # open thumbnail_view template\n-        browser.open("{0}/@@album_view".format(url))\n+        browser.open(f"{url}/@@album_view")\n         self.assertIn("Lorem collection ipsum", browser.contents)\n         self.assertIn("Image example", browser.contents)\n \n@@ -387,8 +386,8 @@ def test_respect_navigation_root(self):\n         # Create two subsites i.e create two folders and mark them with\n         # INavigationRoot\n         for i in range(1, 3):\n-            folder_id = "folder{0}".format(i)\n-            portal.invokeFactory("Folder", folder_id, title="Folder{0}".format(i))\n+            folder_id = f"folder{i}"\n+            portal.invokeFactory("Folder", folder_id, title=f"Folder{i}")\n             folder = portal[folder_id]\n             alsoProvides(folder, INavigationRoot)\n         folders = (portal["folder1"], portal["folder2"])\n@@ -397,7 +396,7 @@ def test_respect_navigation_root(self):\n         for f in folders:\n             f_id = f.getId()\n             f.invokeFactory(\n-                "Document", "item_in_{0}".format(f_id), title="Item In {0}".format(f_id)\n+                "Document", f"item_in_{f_id}", title=f"Item In {f_id}"\n             )\n \n         # Add a collection to folder1\ndiff --git a/plone/app/contenttypes/tests/test_collection_rss.py b/plone/app/contenttypes/tests/test_collection_rss.py\nindex e11ff4138..de899ef4f 100644\n--- a/plone/app/contenttypes/tests/test_collection_rss.py\n+++ b/plone/app/contenttypes/tests/test_collection_rss.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from lxml import etree\n from plone.app.contenttypes.testing import (  # noqa\n@@ -56,7 +55,7 @@ def assertIsValidRSS(self, rss):\n         # XXX: We might want to validate against a DTD or RelaxNG schema here.\n         # schema = etree.XMLSchema(schema_root)\n         # parser = etree.XMLParser(dtd_validation=True,schema=schema)\n-        if isinstance(rss, six.text_type):\n+        if isinstance(rss, str):\n             rss = rss.encode("utf-8")\n         parser = etree.XMLParser()\n         return etree.fromstring(rss, parser)\ndiff --git a/plone/app/contenttypes/tests/test_content_profile.py b/plone/app/contenttypes/tests/test_content_profile.py\nindex 3cdce9a71..0b3bc9f00 100644\n--- a/plone/app/contenttypes/tests/test_content_profile.py\n+++ b/plone/app/contenttypes/tests/test_content_profile.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PloneSandboxLayer\n@@ -123,18 +122,18 @@ def test_news_aggregator_settings(self):\n         # Has the news aggregator (Collection) been set up?\n         query = [\n             dict(\n-                i=u"portal_type",\n-                o=u"plone.app.querystring.operation.selection.any",\n-                v=[u"News Item"],\n+                i="portal_type",\n+                o="plone.app.querystring.operation.selection.any",\n+                v=["News Item"],\n             ),\n             dict(\n-                i=u"review_state",\n-                o=u"plone.app.querystring.operation.selection.any",\n-                v=[u"published"],\n+                i="review_state",\n+                o="plone.app.querystring.operation.selection.any",\n+                v=["published"],\n             ),\n         ]\n         collection = self.portal["news"]["aggregator"]\n-        self.assertEqual(collection.sort_on, u"effective")\n+        self.assertEqual(collection.sort_on, "effective")\n         self.assertEqual(collection.sort_reversed, True)\n         self.assertEqual(collection.query, query)\n         self.assertEqual(collection.getLayout(), "summary_view")\ndiff --git a/plone/app/contenttypes/tests/test_document.py b/plone/app/contenttypes/tests/test_document.py\nindex 5b3f8392c..0432d8384 100644\n--- a/plone/app/contenttypes/tests/test_document.py\n+++ b/plone/app/contenttypes/tests/test_document.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IDocument\n from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n@@ -56,7 +55,7 @@ def test_view(self):\n         document.title = "My Document"\n         document.description = "This is my document."\n         document.text = RichTextValue(\n-            u"Lorem ipsum",\n+            "Lorem ipsum",\n             "text/plain",\n             "text/html",\n         )\n@@ -89,7 +88,7 @@ def setUp(self):\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(\n+            "Basic {}:{}".format(\n                 SITE_OWNER_NAME,\n                 SITE_OWNER_PASSWORD,\n             ),\ndiff --git a/plone/app/contenttypes/tests/test_event.py b/plone/app/contenttypes/tests/test_event.py\nindex 9262a0e62..36f519248 100644\n--- a/plone/app/contenttypes/tests/test_event.py\n+++ b/plone/app/contenttypes/tests/test_event.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from datetime import datetime\n from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n@@ -85,7 +84,7 @@ def setUp(self):\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(\n+            "Basic {}:{}".format(\n                 SITE_OWNER_NAME,\n                 SITE_OWNER_PASSWORD,\n             ),\ndiff --git a/plone/app/contenttypes/tests/test_file.py b/plone/app/contenttypes/tests/test_file.py\nindex 77929f4eb..8977906b9 100644\n--- a/plone/app/contenttypes/tests/test_file.py\n+++ b/plone/app/contenttypes/tests/test_file.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IFile\n from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n from plone.app.contenttypes.testing import (  # noqa\n@@ -115,7 +114,7 @@ def setUp(self):\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(\n+            "Basic {}:{}".format(\n                 SITE_OWNER_NAME,\n                 SITE_OWNER_PASSWORD,\n             ),\ndiff --git a/plone/app/contenttypes/tests/test_folder.py b/plone/app/contenttypes/tests/test_folder.py\nindex d7b01cfb3..47b17a2f1 100644\n--- a/plone/app/contenttypes/tests/test_folder.py\n+++ b/plone/app/contenttypes/tests/test_folder.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.browser.folder import FolderView\n from plone.app.contenttypes.interfaces import IFolder\n from plone.app.contenttypes.testing import (  # noqa\n@@ -93,7 +92,7 @@ def test_result_filtering(self):\n \n     def test_result_batching(self):\n         for idx in range(5):\n-            self.portal.invokeFactory("Document", "document{}".format(idx))\n+            self.portal.invokeFactory("Document", f"document{idx}")\n         request = self.request.clone()\n         request.form["b_size"] = 5\n         view = FolderView(self.portal, request)\n@@ -131,7 +130,7 @@ def setUp(self):\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(\n+            "Basic {}:{}".format(\n                 SITE_OWNER_NAME,\n                 SITE_OWNER_PASSWORD,\n             ),\n@@ -183,7 +182,7 @@ def setUp(self):\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(\n+            "Basic {}:{}".format(\n                 SITE_OWNER_NAME,\n                 SITE_OWNER_PASSWORD,\n             ),\ndiff --git a/plone/app/contenttypes/tests/test_image.py b/plone/app/contenttypes/tests/test_image.py\nindex 83a0df6a5..9d3f4a05e 100644\n--- a/plone/app/contenttypes/tests/test_image.py\n+++ b/plone/app/contenttypes/tests/test_image.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IImage\n from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n@@ -23,7 +22,7 @@\n import unittest\n \n \n-def dummy_image(filename=u"image.jpg"):\n+def dummy_image(filename="image.jpg"):\n     from plone.namedfile.file import NamedBlobImage\n \n     filename = os.path.join(os.path.dirname(__file__), filename)\n@@ -73,7 +72,7 @@ def assertRegex(self, value, pattern):\n             import re\n \n             if not re.search(pattern, value):\n-                raise self.failureException("%r not found in %s" % (pattern, value))\n+                raise self.failureException(f"{pattern!r} not found in {value}")\n \n     def setUp(self):\n         self.portal = self.layer["portal"]\n@@ -111,7 +110,7 @@ def test_image_view(self):\n     #        self.assertTrue(\'image.jpg\' in view())\n \n     def test_svg_image(self):\n-        self.image.image = dummy_image(u"image.svg")\n+        self.image.image = dummy_image("image.svg")\n         scale = self.image.restrictedTraverse("@@images")\n         self.assertRegex(\n             scale.scale("image", scale="large").tag(),\n@@ -132,7 +131,7 @@ def setUp(self):\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(\n+            "Basic {}:{}".format(\n                 SITE_OWNER_NAME,\n                 SITE_OWNER_PASSWORD,\n             ),\ndiff --git a/plone/app/contenttypes/tests/test_indexes.py b/plone/app/contenttypes/tests/test_indexes.py\nindex a521321ce..3211c9cbf 100644\n--- a/plone/app/contenttypes/tests/test_indexes.py\n+++ b/plone/app/contenttypes/tests/test_indexes.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n )\n@@ -119,15 +118,15 @@ def test_remote_url_in_searchable_text_index(self):\n         self.assertEqual(brains[0].getPath(), "/plone/folder/link")\n \n     def test_text_in_searchable_text_index(self):\n-        self.document.text = RichTextValue(u"Lorem ipsum", "text/plain", "text/html")\n-        self.news_item.text = RichTextValue(u"Lorem ipsum", "text/plain", "text/html")\n-        self.collection.text = RichTextValue(u"Lorem ipsum", "text/plain", "text/html")\n+        self.document.text = RichTextValue("Lorem ipsum", "text/plain", "text/html")\n+        self.news_item.text = RichTextValue("Lorem ipsum", "text/plain", "text/html")\n+        self.collection.text = RichTextValue("Lorem ipsum", "text/plain", "text/html")\n         self.document.reindexObject()\n         self.news_item.reindexObject()\n         self.collection.reindexObject()\n         brains = self.catalog.searchResults(\n             dict(\n-                SearchableText=u"Lorem ipsum",\n+                SearchableText="Lorem ipsum",\n             )\n         )\n         self.assertEqual(len(brains), 3)\n@@ -140,14 +139,14 @@ def test_text_in_searchable_text_index(self):\n     def test_html_stripped_searchable_text_index(self):\n         """Ensure, html tags are stripped out from the content and not indexed."""\n         self.document.text = RichTextValue(\n-            u"<p>Lorem <b>ipsum</b></p>",\n+            "<p>Lorem <b>ipsum</b></p>",\n             mimeType="text/html",\n             outputMimeType="text/html",\n         )\n         self.document.reindexObject()\n         brains = self.catalog.searchResults(\n             dict(\n-                SearchableText=u"Lorem ipsum",\n+                SearchableText="Lorem ipsum",\n             )\n         )\n         self.assertEqual(len(brains), 1)\n@@ -165,14 +164,14 @@ def test_raw_text_searchable_text_index(self):\n         searchable text, but you will usually have a hard time setting it.\n         """\n         self.document.text = RichTextValue(\n-            u"""<script type="text/javascript">alert(\'Lorem ipsum\')""" u"""</script>""",\n+            """<script type="text/javascript">alert(\'Lorem ipsum\')""" """</script>""",\n             mimeType="text/html",\n             outputMimeType="text/x-html-safe",\n         )\n         self.document.reindexObject()\n         brains = self.catalog.searchResults(\n             dict(\n-                SearchableText=u"Lorem ipsum",\n+                SearchableText="Lorem ipsum",\n             )\n         )\n         self.assertEqual(len(brains), 1)\n@@ -185,57 +184,57 @@ def test_file_fulltext_in_searchable_text_plain(self):\n         from plone.namedfile.file import NamedBlobFile\n \n         data = "Lorem ipsum. K\xc3\xb6ln <!-- ...oder M\xc3\xbcnchen, das ist hier die " "Frage. -->"\n-        test_file = NamedBlobFile(data=data, filename=u"string.txt")\n+        test_file = NamedBlobFile(data=data, filename="string.txt")\n \n         primary_field_info = IPrimaryFieldInfo(self.file)\n         primary_field_info.field.set(self.file, test_file)\n         self.file.reindexObject()\n \n-        brains = self.catalog.searchResults(dict(SearchableText=u"Lorem ipsum"))\n+        brains = self.catalog.searchResults(dict(SearchableText="Lorem ipsum"))\n         self.assertEqual(len(brains), 1)\n \n-        brains = self.catalog.searchResults(dict(SearchableText=u"K\xc3\xb6ln"))\n+        brains = self.catalog.searchResults(dict(SearchableText="K\xc3\xb6ln"))\n         self.assertEqual(len(brains), 1)\n \n-        brains = self.catalog.searchResults(dict(SearchableText=u"M\xc3\xbcnchen"))\n+        brains = self.catalog.searchResults(dict(SearchableText="M\xc3\xbcnchen"))\n         self.assertEqual(len(brains), 1)\n \n     def test_file_fulltext_in_searchable_text_index_string(self):\n         from plone.namedfile.file import NamedBlobFile\n \n         data = "Lorem ipsum. K\xc3\xb6ln <!-- ...oder M\xc3\xbcnchen, das ist hier die " "Frage. -->"\n-        test_file = NamedBlobFile(data=data, filename=u"string.html")\n+        test_file = NamedBlobFile(data=data, filename="string.html")\n \n         primary_field_info = IPrimaryFieldInfo(self.file)\n         primary_field_info.field.set(self.file, test_file)\n         self.file.reindexObject()\n \n-        brains = self.catalog.searchResults(dict(SearchableText=u"Lorem ipsum"))\n+        brains = self.catalog.searchResults(dict(SearchableText="Lorem ipsum"))\n         self.assertEqual(len(brains), 1)\n \n-        brains = self.catalog.searchResults(dict(SearchableText=u"K\xc3\xb6ln"))\n+        brains = self.catalog.searchResults(dict(SearchableText="K\xc3\xb6ln"))\n         self.assertEqual(len(brains), 1)\n \n-        brains = self.catalog.searchResults(dict(SearchableText=u"M\xc3\xbcnchen"))\n+        brains = self.catalog.searchResults(dict(SearchableText="M\xc3\xbcnchen"))\n         self.assertEqual(len(brains), 0)  # hint: html comment is stripped\n \n     def test_file_fulltext_in_searchable_text_index_unicode(self):\n         from plone.namedfile.file import NamedBlobFile\n \n-        data = u"Lorem ipsum K\xc3\xb6ln <!-- ...oder M\xc3\xbcnchen, das ist hier die " u"Frage. -->"\n-        test_file = NamedBlobFile(data=data, filename=u"unicode.html")\n+        data = "Lorem ipsum K\xc3\xb6ln <!-- ...oder M\xc3\xbcnchen, das ist hier die " "Frage. -->"\n+        test_file = NamedBlobFile(data=data, filename="unicode.html")\n \n         primary_field_info = IPrimaryFieldInfo(self.file)\n         primary_field_info.field.set(self.file, test_file)\n         self.file.reindexObject()\n \n-        brains = self.catalog.searchResults(dict(SearchableText=u"Lorem ipsum"))\n+        brains = self.catalog.searchResults(dict(SearchableText="Lorem ipsum"))\n         self.assertEqual(len(brains), 1)\n \n-        brains = self.catalog.searchResults(dict(SearchableText=u"K\xc3\xb6ln"))\n+        brains = self.catalog.searchResults(dict(SearchableText="K\xc3\xb6ln"))\n         self.assertEqual(len(brains), 1)\n \n-        brains = self.catalog.searchResults(dict(SearchableText=u"M\xc3\xbcnchen"))\n+        brains = self.catalog.searchResults(dict(SearchableText="M\xc3\xbcnchen"))\n         self.assertEqual(len(brains), 0)  # hint: html comment is stripped\n \n     def test_title_in_metadata(self):\n@@ -304,7 +303,7 @@ def test_getobjsize_image(self):\n     def test_getobjsize_file(self):\n         from plone.namedfile.file import NamedBlobFile\n \n-        filename = os.path.join(os.path.dirname(__file__), u"image.jpg")\n+        filename = os.path.join(os.path.dirname(__file__), "image.jpg")\n         with open(filename, "rb") as f:\n             file_data = f.read()\n         test_file = NamedBlobFile(data=file_data, filename=filename)\ndiff --git a/plone/app/contenttypes/tests/test_link.py b/plone/app/contenttypes/tests/test_link.py\nindex 1688b68fe..7593f3619 100644\n--- a/plone/app/contenttypes/tests/test_link.py\n+++ b/plone/app/contenttypes/tests/test_link.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from datetime import datetime\n from plone.app.contenttypes.interfaces import ILink\n from plone.app.contenttypes.testing import (  # noqa\n@@ -224,7 +223,7 @@ def test_file_type(self):\n         self._assert_redirect(self.link.remoteUrl)\n \n     def test_ftp_type(self):\n-        self.link.remoteUrl = "ftp://thereIsNoSuchDomain.isThere{0}".format(\n+        self.link.remoteUrl = "ftp://thereIsNoSuchDomain.isThere{}".format(\n             datetime.now().isoformat()\n         )\n         view = self._get_link_redirect_view(self.link)\n@@ -261,7 +260,7 @@ def setUp(self):\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(\n+            "Basic {}:{}".format(\n                 SITE_OWNER_NAME,\n                 SITE_OWNER_PASSWORD,\n             ),\n@@ -292,10 +291,10 @@ class LinkWidgetIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     default_result = {\n-        "internal": u"",\n-        "external": u"",\n-        "email": u"",\n-        "email_subject": u"",\n+        "internal": "",\n+        "external": "",\n+        "email": "",\n+        "email_subject": "",\n     }\n \n     def setUp(self):\n@@ -332,7 +331,7 @@ def test_dc_towidget_internal(self):\n         self.assertEqual(converter.toWidgetValue(url), expected)\n \n     def test_dc_towidget_mail(self):\n-        url = u"mailto:foo@.example.org"\n+        url = "mailto:foo@.example.org"\n         converter = LinkWidgetDataConverter(self.link_field, self.widget)\n         expected = self.default_result.copy()\n         expected["email"] = url[7:]  # mailto is cut\n@@ -342,8 +341,8 @@ def test_dc_towidget_mail_subject(self):\n         url = "mailto:foo@.example.org?subject=A subject"\n         converter = LinkWidgetDataConverter(self.link_field, self.widget)\n         expected = self.default_result.copy()\n-        expected["email"] = u"foo@.example.org"\n-        expected["email_subject"] = u"A subject"\n+        expected["email"] = "foo@.example.org"\n+        expected["email_subject"] = "A subject"\n         self.assertEqual(converter.toWidgetValue(url), expected)\n \n     def test_dc_illegal(self):\ndiff --git a/plone/app/contenttypes/tests/test_news_item.py b/plone/app/contenttypes/tests/test_news_item.py\nindex a2b8df04b..11e2efc49 100644\n--- a/plone/app/contenttypes/tests/test_news_item.py\n+++ b/plone/app/contenttypes/tests/test_news_item.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import INewsItem\n from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n@@ -62,7 +61,7 @@ def test_view(self):\n         news_item = self.portal["news_item"]\n         news_item.title = "My News Item"\n         news_item.description = "This is my news item."\n-        news_item.text = RichTextValue(u"Lorem ipsum", "text/plain", "text/html")\n+        news_item.text = RichTextValue("Lorem ipsum", "text/plain", "text/html")\n         self.request.set("URL", news_item.absolute_url())\n         self.request.set("ACTUAL_URL", news_item.absolute_url())\n         view = news_item.restrictedTraverse("@@view")\n@@ -106,7 +105,7 @@ def setUp(self):\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(\n+            "Basic {}:{}".format(\n                 SITE_OWNER_NAME,\n                 SITE_OWNER_PASSWORD,\n             ),\ndiff --git a/plone/app/contenttypes/tests/test_robot.py b/plone/app/contenttypes/tests/test_robot.py\nindex e9096e6ea..9c787f46c 100644\n--- a/plone/app/contenttypes/tests/test_robot.py\n+++ b/plone/app/contenttypes/tests/test_robot.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_ROBOT_TESTING\n from plone.app.testing import ROBOT_TEST_LEVEL\n from plone.testing import layered\ndiff --git a/plone/app/contenttypes/tests/test_security.py b/plone/app/contenttypes/tests/test_security.py\nindex e7309b072..af6d24ded 100644\n--- a/plone/app/contenttypes/tests/test_security.py\n+++ b/plone/app/contenttypes/tests/test_security.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from io import BytesIO\n from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n@@ -220,14 +219,14 @@ def _test_class_protected(self, klass):\n                 self.assertEqual(\n                     mapping.get(method),\n                     "View",\n-                    "Method {0} missing view protection".format(method),\n+                    f"Method {method} missing view protection",\n                 )\n         for method in WRITE_METHODS:\n             if method in klass.__dict__.keys():\n                 self.assertEqual(\n                     mapping.get(method),\n                     "Modify portal content",\n-                    "Method {0} missing edit protection".format(method),\n+                    f"Method {method} missing edit protection",\n                 )\n \n     def testCollection_protected(self):\ndiff --git a/plone/app/contenttypes/tests/test_setup.py b/plone/app/contenttypes/tests/test_setup.py\nindex 61a356aa4..dc5935df2 100644\n--- a/plone/app/contenttypes/tests/test_setup.py\n+++ b/plone/app/contenttypes/tests/test_setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n )\ndiff --git a/plone/app/contenttypes/tests/test_webdav.py b/plone/app/contenttypes/tests/test_webdav.py\nindex 5ce920800..35b17dc88 100644\n--- a/plone/app/contenttypes/tests/test_webdav.py\n+++ b/plone/app/contenttypes/tests/test_webdav.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n )\n@@ -38,7 +37,7 @@ def setUp(self):\n \n     def test_image_put(self):\n         """Upload an image through webdav."""\n-        filename = os.path.join(os.path.dirname(__file__), u"image.jpg")\n+        filename = os.path.join(os.path.dirname(__file__), "image.jpg")\n         with open(filename, "rb") as myfile:\n             request = DAVTestRequest(\n                 environ={\n@@ -48,13 +47,13 @@ def test_image_put(self):\n             )\n             self.image.REQUEST = request\n             self.image.PUT()\n-        self.assertEqual(self.image.image.filename, u"image.jpg")\n+        self.assertEqual(self.image.image.filename, "image.jpg")\n         self.assertEqual(self.image.get_size(), 5131)\n         self.assertEqual(self.image.content_type(), "image/jpeg")\n \n     def test_file_put(self):\n         """Upload a file through webdav."""\n-        filename = os.path.join(os.path.dirname(__file__), u"file.pdf")\n+        filename = os.path.join(os.path.dirname(__file__), "file.pdf")\n         with open(filename, "rb") as myfile:\n             request = DAVTestRequest(\n                 environ={\n@@ -64,6 +63,6 @@ def test_file_put(self):\n             )\n             self.file.REQUEST = request\n             self.file.PUT()\n-        self.assertEqual(self.file.file.filename, u"file.pdf")\n+        self.assertEqual(self.file.file.filename, "file.pdf")\n         self.assertEqual(self.file.get_size(), 8561)\n         self.assertEqual(self.file.content_type(), "application/pdf")\ndiff --git a/plone/app/contenttypes/upgrades.py b/plone/app/contenttypes/upgrades.py\nindex 48cbd4a59..5cff026de 100644\n--- a/plone/app/contenttypes/upgrades.py\n+++ b/plone/app/contenttypes/upgrades.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.dexterity.interfaces import IDexterityFTI\n from zope.component import queryUtility\n \ndiff --git a/plone/app/contenttypes/utils.py b/plone/app/contenttypes/utils.py\nindex 417d56001..b4c89a3c5 100644\n--- a/plone/app/contenttypes/utils.py\n+++ b/plone/app/contenttypes/utils.py\n@@ -54,7 +54,7 @@ def _replace_variable_by_path(url, variable, obj):\n \n def get_old_class_name_string(obj):\n     """Returns the current class name string."""\n-    return "{0}.{1}".format(obj.__module__, obj.__class__.__name__)\n+    return f"{obj.__module__}.{obj.__class__.__name__}"\n \n \n def get_portal_type_name_string(obj):\n@@ -79,7 +79,7 @@ def migrate_base_class_to_new_class(\n     if not new_class_name:\n         new_class_name = get_portal_type_name_string(obj)\n         if not new_class_name:\n-            logger.warning("The type {0} has no fti!".format(obj.portal_type))\n+            logger.warning(f"The type {obj.portal_type} has no fti!")\n             return False\n \n     was_item = not isinstance(obj, BTreeFolder2Base)\n@@ -114,7 +114,7 @@ def list_of_objects_with_changed_base_class(context):\n         try:\n             obj = brain.getObject()\n         except (KeyError, NotFound):\n-            logger.warn("Object {0} not found".format(brain.getPath()))\n+            logger.warn(f"Object {brain.getPath()} not found")\n             continue\n         if get_portal_type_name_string(obj) != get_old_class_name_string(obj):\n             yield obj\ndiff --git a/setup.py b/setup.py\nindex ab314ef6e..73dc7ece4 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n'

Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2022-04-30T12:35:43+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contenttypes/commit/b9d4da9764c561436343803457f7508886596bed

manually remove six leftovers

Files changed:
M plone/app/contenttypes/content.py
M plone/app/contenttypes/indexers.py
M plone/app/contenttypes/setuphandlers.py
M plone/app/contenttypes/tests/test_collection.py
M plone/app/contenttypes/tests/test_collection_rss.py
M plone/app/contenttypes/tests/test_image.py

b'diff --git a/plone/app/contenttypes/content.py b/plone/app/contenttypes/content.py\nindex f360b637..0befb821 100644\n--- a/plone/app/contenttypes/content.py\n+++ b/plone/app/contenttypes/content.py\n@@ -18,8 +18,6 @@\n from zope.interface import implementer\n from zope.lifecycleevent import modified\n \n-import six\n-\n \n @implementer(ICollection)\n class Collection(Item):\n@@ -103,10 +101,7 @@ def Format(self):\n         """Provide a proper accessor for the format attribute\n         See https://github.com/plone/Products.CMFPlone/issues/2540\n         """\n-        format = self.format\n-        if six.PY2 and isinstance(format, str):\n-            format = self.format.encode()\n-        return format\n+        return self.format\n \n \n @implementer(IFile)\n@@ -129,9 +124,7 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n             self.dav__simpleifhandler(request, response, refresh=1)\n \n             filename = request["PATH_INFO"].split("/")[-1]\n-            self.file = NamedBlobFile(\n-                data=infile.read(), filename=str(filename)\n-            )\n+            self.file = NamedBlobFile(data=infile.read(), filename=str(filename))\n \n             modified(self)\n             return response\n@@ -173,9 +166,7 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n \n             infile = request.get("BODYFILE", None)\n             filename = request["PATH_INFO"].split("/")[-1]\n-            self.image = NamedBlobImage(\n-                data=infile.read(), filename=str(filename)\n-            )\n+            self.image = NamedBlobImage(data=infile.read(), filename=str(filename))\n \n             modified(self)\n             return response\ndiff --git a/plone/app/contenttypes/indexers.py b/plone/app/contenttypes/indexers.py\nindex d2fce3d4..bd8fa04e 100644\n--- a/plone/app/contenttypes/indexers.py\n+++ b/plone/app/contenttypes/indexers.py\n@@ -19,8 +19,6 @@\n from Products.PortalTransforms.libtransforms.utils import MissingBinary\n from ZODB.POSException import ConflictError\n \n-import six\n-\n \n logger = getLogger(__name__)\n \n@@ -34,15 +32,9 @@ def _unicode_save_string_concat(*args):\n     """\n     result = ""\n     for value in args:\n-        if six.PY2:\n-            if isinstance(value, str):\n-                value = value.encode("utf-8", "replace")\n-            if value:\n-                result = " ".join((result, value))\n-        else:\n-            if isinstance(value, bytes):\n-                value = safe_unicode(value)\n-            result = " ".join((result, value))\n+        if isinstance(value, bytes):\n+            value = safe_unicode(value)\n+        result = " ".join((result, value))\n     return result\n \n \n@@ -57,8 +49,6 @@ def SearchableText(obj):\n             # or mimeType/outputMimeType, first read\n             # https://github.com/plone/Products.CMFPlone/issues/2066\n             raw = safe_unicode(textvalue.raw)\n-            if six.PY2:\n-                raw = raw.encode("utf-8", "replace")\n             text = (\n                 transforms.convertTo(\n                     "text/plain",\n@@ -115,8 +105,6 @@ def SearchableText_file(obj):\n         # check if there is a valid transform available first\n         return SearchableText(obj)\n     value = primary_field.value.data\n-    if six.PY2:\n-        value = str(value)\n     filename = primary_field.value.filename\n     try:\n         transformed_value = transforms.convertTo(\ndiff --git a/plone/app/contenttypes/setuphandlers.py b/plone/app/contenttypes/setuphandlers.py\nindex 2baeb7b2..1a46b6e5 100644\n--- a/plone/app/contenttypes/setuphandlers.py\n+++ b/plone/app/contenttypes/setuphandlers.py\n@@ -77,9 +77,7 @@ def addContentToContainer(container, object, checkConstraints=True):\n         if container_fti is not None and not container_fti.allowType(\n             object.portal_type\n         ):\n-            raise ValueError(\n-                f"Disallowed subobject type: {object.portal_type}"\n-            )\n+            raise ValueError(f"Disallowed subobject type: {object.portal_type}")\n \n     chooser = INameChooser(container)\n     if hasattr(object, "id") and chooser.checkName(object.id, object):\ndiff --git a/plone/app/contenttypes/tests/test_collection.py b/plone/app/contenttypes/tests/test_collection.py\nindex 42b2737d..661d3768 100644\n--- a/plone/app/contenttypes/tests/test_collection.py\n+++ b/plone/app/contenttypes/tests/test_collection.py\n@@ -395,9 +395,7 @@ def test_respect_navigation_root(self):\n         # Add a content item to each folder\n         for f in folders:\n             f_id = f.getId()\n-            f.invokeFactory(\n-                "Document", f"item_in_{f_id}", title=f"Item In {f_id}"\n-            )\n+            f.invokeFactory("Document", f"item_in_{f_id}", title=f"Item In {f_id}")\n \n         # Add a collection to folder1\n         folder1 = folders[0]\ndiff --git a/plone/app/contenttypes/tests/test_collection_rss.py b/plone/app/contenttypes/tests/test_collection_rss.py\nindex de899ef4..f62789f0 100644\n--- a/plone/app/contenttypes/tests/test_collection_rss.py\n+++ b/plone/app/contenttypes/tests/test_collection_rss.py\n@@ -1,8 +1,6 @@\n from Acquisition import aq_inner\n from lxml import etree\n-from plone.app.contenttypes.testing import (  # noqa\n-    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n-)\n+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n from plone.app.testing import login\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n@@ -11,7 +9,6 @@\n from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings\n from zope.component import getUtility\n \n-import six\n import unittest\n \n \ndiff --git a/plone/app/contenttypes/tests/test_image.py b/plone/app/contenttypes/tests/test_image.py\nindex 9d3f4a05..0df6a6b7 100644\n--- a/plone/app/contenttypes/tests/test_image.py\n+++ b/plone/app/contenttypes/tests/test_image.py\n@@ -18,7 +18,6 @@\n \n import io\n import os.path\n-import six\n import unittest\n \n \n@@ -65,15 +64,6 @@ class ImageViewIntegrationTest(unittest.TestCase):\n \n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n-    if six.PY2:\n-\n-        def assertRegex(self, value, pattern):\n-            # Python 2 backwards compatibility\n-            import re\n-\n-            if not re.search(pattern, value):\n-                raise self.failureException(f"{pattern!r} not found in {value}")\n-\n     def setUp(self):\n         self.portal = self.layer["portal"]\n         self.request = self.layer["request"]\n'

Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2022-04-30T13:01:51+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contenttypes/commit/7c21f75552c3bfef8b75b19ff612ea17ff3bad8e

use plone.base

Files changed:
M plone/app/contenttypes/behaviors/collection.py
M plone/app/contenttypes/browser/configure.zcml
M plone/app/contenttypes/browser/file.py
M plone/app/contenttypes/browser/folder.py
M plone/app/contenttypes/browser/migration.py
M plone/app/contenttypes/configure.zcml
M plone/app/contenttypes/content.py
M plone/app/contenttypes/indexers.py
M plone/app/contenttypes/setuphandlers.py
M plone/app/contenttypes/tests/test_collection.py
M plone/app/contenttypes/tests/test_collection_rss.py
M plone/app/contenttypes/tests/test_content_profile.py

b'diff --git a/plone/app/contenttypes/behaviors/collection.py b/plone/app/contenttypes/behaviors/collection.py\nindex 63e488c9..e8ed0ea2 100644\n--- a/plone/app/contenttypes/behaviors/collection.py\n+++ b/plone/app/contenttypes/behaviors/collection.py\n@@ -2,14 +2,14 @@\n from plone.app.z3cform.widget import QueryStringFieldWidget\n from plone.autoform import directives as form\n from plone.autoform.interfaces import IFormFieldProvider\n+from plone.base.interfaces.syndication import IFeed\n+from plone.base.interfaces.syndication import ISyndicatable\n from plone.dexterity.interfaces import IDexterityContent\n from plone.supermodel import model\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.browser.syndication.adapters import (\n     CollectionFeed as BaseCollectionFeed,\n-)  # noqa\n-from Products.CMFPlone.interfaces.syndication import IFeed\n-from Products.CMFPlone.interfaces.syndication import ISyndicatable\n+)\n from zope import schema\n from zope.component import adapter\n from zope.component import getMultiAdapter\ndiff --git a/plone/app/contenttypes/browser/configure.zcml b/plone/app/contenttypes/browser/configure.zcml\nindex 0273021e..df0a6881 100644\n--- a/plone/app/contenttypes/browser/configure.zcml\n+++ b/plone/app/contenttypes/browser/configure.zcml\n@@ -9,7 +9,7 @@\n \n   <!-- VIEWS FOR PLONE SITE ROOT -->\n   <browser:pages\n-      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      for="plone.base.interfaces.IPloneSiteRoot"\n       class=".folder.FolderView"\n       permission="zope2.View">\n     <browser:page\n@@ -207,7 +207,7 @@\n \n   <browser:page\n       name="base_class_migrator_form"\n-      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      for="plone.base.interfaces.IPloneSiteRoot"\n       class="plone.app.contenttypes.browser.migration.BaseClassMigrator"\n       layer="plone.app.contenttypes.interfaces.IPloneAppContenttypesLayer"\n       permission="cmf.ManagePortal"\ndiff --git a/plone/app/contenttypes/browser/file.py b/plone/app/contenttypes/browser/file.py\nindex 087381ab..0a5ffa7c 100644\n--- a/plone/app/contenttypes/browser/file.py\n+++ b/plone/app/contenttypes/browser/file.py\n@@ -1,5 +1,5 @@\n from plone.app.contenttypes.browser.utils import Utils\n-from Products.CMFPlone.utils import human_readable_size\n+from plone.base.utils import human_readable_size\n \n import re\n \ndiff --git a/plone/app/contenttypes/browser/folder.py b/plone/app/contenttypes/browser/folder.py\nindex a266e931..f6f00f25 100644\n--- a/plone/app/contenttypes/browser/folder.py\n+++ b/plone/app/contenttypes/browser/folder.py\n@@ -8,10 +8,10 @@\n from plone.base.batch import Batch\n from plone.base.interfaces import ISecuritySchema\n from plone.base.interfaces import ISiteSchema\n+from plone.base.utils import safe_callable\n from plone.event.interfaces import IEvent\n from plone.memoize.view import memoize\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.utils import safe_callable\n from Products.Five import BrowserView\n from zope.component import getMultiAdapter\n from zope.component import getUtility\ndiff --git a/plone/app/contenttypes/browser/migration.py b/plone/app/contenttypes/browser/migration.py\nindex fc837c85..a6aa76e1 100644\n--- a/plone/app/contenttypes/browser/migration.py\n+++ b/plone/app/contenttypes/browser/migration.py\n@@ -8,13 +8,13 @@\n from plone.app.contenttypes.utils import DEFAULT_TYPES\n from plone.app.contenttypes.utils import get_old_class_name_string\n from plone.app.contenttypes.utils import migrate_base_class_to_new_class\n+from plone.base import PloneMessageFactory as _\n+from plone.base.utils import get_installer\n from plone.browserlayer.interfaces import ILocalBrowserLayerType\n from plone.dexterity.interfaces import IDexterityContent\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.z3cform.layout import wrap_form\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.utils import get_installer\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\ndiff --git a/plone/app/contenttypes/configure.zcml b/plone/app/contenttypes/configure.zcml\nindex 0b1131a4..540ce04b 100644\n--- a/plone/app/contenttypes/configure.zcml\n+++ b/plone/app/contenttypes/configure.zcml\n@@ -7,12 +7,12 @@\n            xmlns:plone="http://namespaces.plone.org/plone"\n            i18n_domain="plone">\n \n-  <include package="Products.CMFPlone" file="meta.zcml"/>\n+  <include package="Products.CMFCore" file="meta.zcml" />\n+  <include package="Products.GenericSetup" file="meta.zcml" />\n   <include package="plone.behavior" file="meta.zcml"/>\n   <include package="plone.dexterity" file="meta.zcml"/>\n   <include package="plone.app.dexterity" file="meta.zcml"/>\n \n-  <include package="Products.CMFPlone" />\n   <include package="plone.behavior" />\n   <include package="plone.dexterity" />\n   <include package="plone.namedfile" />\n@@ -41,6 +41,6 @@\n   <utility\n       factory=".setuphandlers.HiddenProfiles"\n       name="plone.app.contenttypes"\n-      provides="Products.CMFPlone.interfaces.INonInstallable" />\n+      provides="plone.base.interfaces.INonInstallable" />\n \n </configure>\ndiff --git a/plone/app/contenttypes/content.py b/plone/app/contenttypes/content.py\nindex 0befb821..1dc13c0e 100644\n--- a/plone/app/contenttypes/content.py\n+++ b/plone/app/contenttypes/content.py\n@@ -8,12 +8,12 @@\n from plone.app.contenttypes.interfaces import IImage\n from plone.app.contenttypes.interfaces import ILink\n from plone.app.contenttypes.interfaces import INewsItem\n+from plone.base.utils import safe_text\n from plone.dexterity.content import Container\n from plone.dexterity.content import Item\n from plone.namedfile.file import NamedBlobFile\n from plone.namedfile.file import NamedBlobImage\n from Products.CMFCore import permissions\n-from Products.CMFPlone.utils import safe_text\n from zope.deprecation import deprecation\n from zope.interface import implementer\n from zope.lifecycleevent import modified\ndiff --git a/plone/app/contenttypes/indexers.py b/plone/app/contenttypes/indexers.py\nindex bd8fa04e..a4e49517 100644\n--- a/plone/app/contenttypes/indexers.py\n+++ b/plone/app/contenttypes/indexers.py\n@@ -10,12 +10,12 @@\n from plone.app.contenttypes.interfaces import INewsItem\n from plone.app.contenttypes.utils import replace_link_variables_by_paths\n from plone.app.textfield.value import IRichTextValue\n+from plone.base.utils import human_readable_size\n+from plone.base.utils import safe_text\n from plone.dexterity.interfaces import IDexterityContent\n from plone.indexer.decorator import indexer\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import human_readable_size\n-from Products.CMFPlone.utils import safe_unicode\n from Products.PortalTransforms.libtransforms.utils import MissingBinary\n from ZODB.POSException import ConflictError\n \n@@ -33,7 +33,7 @@ def _unicode_save_string_concat(*args):\n     result = ""\n     for value in args:\n         if isinstance(value, bytes):\n-            value = safe_unicode(value)\n+            value = safe_text(value)\n         result = " ".join((result, value))\n     return result\n \n@@ -48,7 +48,7 @@ def SearchableText(obj):\n             # Before you think about switching raw/output\n             # or mimeType/outputMimeType, first read\n             # https://github.com/plone/Products.CMFPlone/issues/2066\n-            raw = safe_unicode(textvalue.raw)\n+            raw = safe_text(textvalue.raw)\n             text = (\n                 transforms.convertTo(\n                     "text/plain",\n@@ -59,15 +59,15 @@ def SearchableText(obj):\n                 .strip()\n             )\n \n-    subject = " ".join([safe_unicode(s) for s in obj.Subject()])\n+    subject = " ".join([safe_text(s) for s in obj.Subject()])\n \n     return " ".join(\n         (\n-            safe_unicode(obj.id),\n-            safe_unicode(obj.title) or "",\n-            safe_unicode(obj.description) or "",\n-            safe_unicode(text),\n-            safe_unicode(subject),\n+            safe_text(obj.id),\n+            safe_text(obj.title) or "",\n+            safe_text(obj.description) or "",\n+            safe_text(text),\n+            safe_text(subject),\n         )\n     )\n \ndiff --git a/plone/app/contenttypes/setuphandlers.py b/plone/app/contenttypes/setuphandlers.py\nindex 1a46b6e5..5697a224 100644\n--- a/plone/app/contenttypes/setuphandlers.py\n+++ b/plone/app/contenttypes/setuphandlers.py\n@@ -3,6 +3,9 @@\n from Acquisition import aq_inner\n from plone.app.dexterity.behaviors import constrains\n from plone.app.textfield.value import RichTextValue\n+from plone.base.interfaces import INonInstallable\n+from plone.base.interfaces.constrains import ISelectableConstrainTypes\n+from plone.base.utils import unrestricted_construct_instance\n from plone.dexterity.fti import IDexterityFTI\n from plone.dexterity.utils import createContent\n from plone.i18n.normalizer.interfaces import IURLNormalizer\n@@ -10,10 +13,6 @@\n from plone.portlets.interfaces import IPortletManager\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import INonInstallable\n-from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n-from Products.CMFPlone.utils import _createObjectByType\n-from Products.CMFPlone.utils import bodyfinder\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.component import queryMultiAdapter\n@@ -148,6 +147,24 @@ def _setup_constrains(container, allowed_types):\n     return True\n \n \n+def _bodyfinder(text):\n+    """Return body or unchanged text if no body tags found.\n+\n+    Always use html_headcheck() first.\n+    """\n+    lowertext = text.lower()\n+    bodystart = lowertext.find("<body")\n+    if bodystart == -1:\n+        return text\n+    bodystart = lowertext.find(">", bodystart) + 1\n+    if bodystart == 0:\n+        return text\n+    bodyend = lowertext.rfind("</body>", bodystart)\n+    if bodyend == -1:\n+        return text\n+    return text[bodystart:bodyend]\n+\n+\n def create_frontpage(portal, target_language):\n     if portal.text:\n         # Do not overwrite existing content\n@@ -171,7 +188,7 @@ def create_frontpage(portal, target_language):\n     if front_text is None and request is not None:\n         view = queryMultiAdapter((portal, request), name="plone-frontpage-setup")\n         if view is not None:\n-            front_text = bodyfinder(view.index()).strip()\n+            front_text = _bodyfinder(view.index()).strip()\n     portal.text = RichTextValue(front_text, "text/html", "text/x-html-safe")\n     portal.reindexObject()\n \n@@ -190,7 +207,7 @@ def create_news_topic(portal, target_language):\n             language=target_language.replace("_", "-").lower(),\n         )\n         container = addContentToContainer(portal, container)\n-        _createObjectByType(\n+        unrestricted_construct_instance(\n             "Collection",\n             container,\n             id="aggregator",\n@@ -245,7 +262,7 @@ def create_events_topic(portal, target_language):\n             language=target_language.replace("_", "-").lower(),\n         )\n         container = addContentToContainer(portal, container)\n-        _createObjectByType(\n+        unrestricted_construct_instance(\n             "Collection",\n             container,\n             id="aggregator",\ndiff --git a/plone/app/contenttypes/tests/test_collection.py b/plone/app/contenttypes/tests/test_collection.py\nindex 661d3768..0dce1177 100644\n--- a/plone/app/contenttypes/tests/test_collection.py\n+++ b/plone/app/contenttypes/tests/test_collection.py\n@@ -2,14 +2,10 @@\n from DateTime import DateTime\n from plone.app.contenttypes.behaviors.collection import (\n     ICollection as ICollection_behavior,\n-)  # noqa\n-from plone.app.contenttypes.interfaces import ICollection\n-from plone.app.contenttypes.testing import (  # noqa\n-    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n-)\n-from plone.app.contenttypes.testing import (  # noqa\n-    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n )\n+from plone.app.contenttypes.interfaces import ICollection\n+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n from plone.app.contenttypes.testing import set_browserlayer\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.testing import login\n@@ -103,7 +99,7 @@ def test_bbb_setSort_reversed(self):\n         self.assertEqual(self.collection.sort_reversed, True)\n \n     def test_syndicatable(self):\n-        from Products.CMFPlone.interfaces.syndication import ISyndicatable\n+        from plone.base.interfaces.syndication import ISyndicatable\n \n         self.assertTrue(ISyndicatable.providedBy(self.collection))\n \ndiff --git a/plone/app/contenttypes/tests/test_collection_rss.py b/plone/app/contenttypes/tests/test_collection_rss.py\nindex f62789f0..d2abfaed 100644\n--- a/plone/app/contenttypes/tests/test_collection_rss.py\n+++ b/plone/app/contenttypes/tests/test_collection_rss.py\n@@ -5,8 +5,8 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n+from plone.base.interfaces.syndication import ISiteSyndicationSettings\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings\n from zope.component import getUtility\n \n import unittest\ndiff --git a/plone/app/contenttypes/tests/test_content_profile.py b/plone/app/contenttypes/tests/test_content_profile.py\nindex 0b3bc9f0..1f2cefa3 100644\n--- a/plone/app/contenttypes/tests/test_content_profile.py\n+++ b/plone/app/contenttypes/tests/test_content_profile.py\n@@ -1,10 +1,10 @@\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PloneSandboxLayer\n+from plone.base.interfaces.constrains import ISelectableConstrainTypes\n from plone.portlets.interfaces import ILocalPortletAssignmentManager\n from plone.portlets.interfaces import IPortletManager\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n from Products.PythonScripts.PythonScript import PythonScript\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n'

Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2022-04-30T13:05:48+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contenttypes/commit/fdeab3529e0d2644da214abbcbcbed23ea31068b

remove outdated (7 years) bbb tests

Files changed:
M plone/app/contenttypes/tests/test_collection.py

b'diff --git a/plone/app/contenttypes/tests/test_collection.py b/plone/app/contenttypes/tests/test_collection.py\nindex 0dce1177..d52544e3 100644\n--- a/plone/app/contenttypes/tests/test_collection.py\n+++ b/plone/app/contenttypes/tests/test_collection.py\n@@ -56,48 +56,6 @@ def setUp(self):\n         self.portal.invokeFactory("Collection", "collection")\n         self.collection = self.portal["collection"]\n \n-    def test_bbb_listMetaDataFields(self):\n-        self.assertEqual(self.collection.listMetaDataFields(), [])\n-\n-    def test_results(self):\n-        pass\n-\n-    def test_bbb_selectedViewFields(self):\n-        self.assertEqual(\n-            self.collection.selectedViewFields(),\n-            [\n-                ("Title", "Title"),\n-                ("Creator", "Creator"),\n-                ("Type", "Type"),\n-                ("ModificationDate", "Last modified"),\n-            ],\n-        )\n-        self.collection.customViewFields = ["Title", "Description"]\n-        self.assertEqual(\n-            self.collection.selectedViewFields(),\n-            [("Title", "Title"), ("Description", "Description")],\n-        )\n-\n-    def test_bbb_setQuery(self):\n-        self.collection.setQuery(query)\n-        self.assertEqual(self.collection.query, query)\n-\n-    def test_bbb_getQuery(self):\n-        self.collection.query = query\n-        self.assertEqual(self.collection.getQuery(), query)\n-\n-    def test_bbb_getRawQuery(self):\n-        self.collection.query = query\n-        self.assertEqual(self.collection.getRawQuery(), query)\n-\n-    def test_bbb_setSort_on(self):\n-        self.collection.setSort_on("start")\n-        self.assertEqual(self.collection.sort_on, "start")\n-\n-    def test_bbb_setSort_reversed(self):\n-        self.collection.setSort_reversed(True)\n-        self.assertEqual(self.collection.sort_reversed, True)\n-\n     def test_syndicatable(self):\n         from plone.base.interfaces.syndication import ISyndicatable\n \n'

Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2022-04-30T13:13:52+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contenttypes/commit/0d4cb71742ae31a29d8c97abf007ee439bec243c

modern getters/setters

Files changed:
M plone/app/contenttypes/behaviors/collection.py

b'diff --git a/plone/app/contenttypes/behaviors/collection.py b/plone/app/contenttypes/behaviors/collection.py\nindex e8ed0ea2..221addac 100644\n--- a/plone/app/contenttypes/behaviors/collection.py\n+++ b/plone/app/contenttypes/behaviors/collection.py\n@@ -150,55 +150,55 @@ def selectedViewFields(self):\n \n     # Getters and setters for our fields.\n \n-    def _set_sort_reversed(self, value):\n-        self.context.sort_reversed = value\n-\n-    def _get_sort_reversed(self):\n+    @property\n+    def sort_reversed(self):\n         return getattr(self.context, "sort_reversed", None)\n \n-    sort_reversed = property(_get_sort_reversed, _set_sort_reversed)\n-\n-    def _set_item_count(self, value):\n-        self.context.item_count = value\n+    @sort_reversed.setter\n+    def sort_reversed(self, value):\n+        self.context.sort_reversed = value\n \n-    def _get_item_count(self):\n+    @property\n+    def item_count(self):\n         return getattr(self.context, "item_count", 30)\n \n-    item_count = property(_get_item_count, _set_item_count)\n-\n-    def _set_sort_on(self, value):\n-        self.context.sort_on = value\n+    @item_count.setter\n+    def item_count(self, value):\n+        self.context.item_count = value\n \n-    def _get_sort_on(self):\n+    @property\n+    def sort_on(self):\n         return getattr(self.context, "sort_on", None)\n \n-    sort_on = property(_get_sort_on, _set_sort_on)\n-\n-    def _set_limit(self, value):\n-        self.context.limit = value\n+    @sort_on.setter\n+    def sort_on(self, value):\n+        self.context.sort_on = value\n \n-    def _get_limit(self):\n+    @property\n+    def limit(self):\n         return getattr(self.context, "limit", 1000)\n \n-    limit = property(_get_limit, _set_limit)\n-\n-    def _set_query(self, value):\n-        self.context.query = value\n+    @limit.setter\n+    def limit(self, value):\n+        self.context.limit = value\n \n-    def _get_query(self):\n+    @property\n+    def query(self):\n         return getattr(self.context, "query", None)\n \n-    query = property(_get_query, _set_query)\n-\n-    def _set_customViewFields(self, value):\n-        self.context.customViewFields = value\n+    @query.setter\n+    def query(self, value):\n+        self.context.query = value\n \n-    def _get_customViewFields(self):\n+    @property\n+    def customViewFields(self):\n         # Note: in corner cases customViewFields might be None, but we\n         # always want a list.\n         return getattr(self.context, "customViewFields", []) or []\n \n-    customViewFields = property(_get_customViewFields, _set_customViewFields)\n+    @customViewFields.setter\n+    def customViewFields(self, value):\n+        self.context.customViewFields = value\n \n \n @implementer(IFeed)\n'

Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2022-04-30T13:19:16+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contenttypes/commit/3db1a5ebefd8219dab4bf9890e42e50ab321e0cf

document changes of #644

Files changed:
A news/644.breaking

b'diff --git a/news/644.breaking b/news/644.breaking\nnew file mode 100644\nindex 00000000..ef7a9853\n--- /dev/null\n+++ b/news/644.breaking\n@@ -0,0 +1,2 @@\n+Use plone.base, code style black, isort, pyupgrade, manual overhaul.\n+[jensens]\n'

Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2022-04-30T21:28:53+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contenttypes/commit/75979ffd8c550371fafcc53b1d0716fe09a654af

Merge pull request #644 from plone/plone-base-overhaul

plone.base usage plus overall overhaul

Files changed:
A news/644.breaking
M bootstrap-buildout.py
M docs/source/conf.py
M plone/__init__.py
M plone/app/__init__.py
M plone/app/contenttypes/__init__.py
M plone/app/contenttypes/behaviors/__init__.py
M plone/app/contenttypes/behaviors/collection.py
M plone/app/contenttypes/behaviors/leadimage.py
M plone/app/contenttypes/behaviors/richtext.py
M plone/app/contenttypes/behaviors/tableofcontents.py
M plone/app/contenttypes/behaviors/thumb_icon.py
M plone/app/contenttypes/behaviors/viewlets.py
M plone/app/contenttypes/browser/__init__.py
M plone/app/contenttypes/browser/collection.py
M plone/app/contenttypes/browser/configure.zcml
M plone/app/contenttypes/browser/file.py
M plone/app/contenttypes/browser/folder.py
M plone/app/contenttypes/browser/full_view.py
M plone/app/contenttypes/browser/migration.py
M plone/app/contenttypes/browser/utils.py
M plone/app/contenttypes/configure.zcml
M plone/app/contenttypes/content.py
M plone/app/contenttypes/indexers.py
M plone/app/contenttypes/interfaces.py
M plone/app/contenttypes/permissions.py
M plone/app/contenttypes/schema/__init__.py
M plone/app/contenttypes/setuphandlers.py
M plone/app/contenttypes/subscribers.py
M plone/app/contenttypes/testing.py
M plone/app/contenttypes/tests/oldtypes.py
M plone/app/contenttypes/tests/robot/variables.py
M plone/app/contenttypes/tests/test_behaviors_collection.py
M plone/app/contenttypes/tests/test_behaviors_leadimage.py
M plone/app/contenttypes/tests/test_behaviors_richtext.py
M plone/app/contenttypes/tests/test_behaviors_table_of_contents.py
M plone/app/contenttypes/tests/test_browser_utils.py
M plone/app/contenttypes/tests/test_collection.py
M plone/app/contenttypes/tests/test_collection_rss.py
M plone/app/contenttypes/tests/test_content_profile.py
M plone/app/contenttypes/tests/test_document.py
M plone/app/contenttypes/tests/test_event.py
M plone/app/contenttypes/tests/test_file.py
M plone/app/contenttypes/tests/test_folder.py
M plone/app/contenttypes/tests/test_image.py
M plone/app/contenttypes/tests/test_indexes.py
M plone/app/contenttypes/tests/test_link.py
M plone/app/contenttypes/tests/test_news_item.py
M plone/app/contenttypes/tests/test_robot.py
M plone/app/contenttypes/tests/test_security.py
M plone/app/contenttypes/tests/test_setup.py
M plone/app/contenttypes/tests/test_webdav.py
M plone/app/contenttypes/upgrades.py
M plone/app/contenttypes/utils.py
M setup.py

b'diff --git a/bootstrap-buildout.py b/bootstrap-buildout.py\nindex a4599211f..54318586f 100644\n--- a/bootstrap-buildout.py\n+++ b/bootstrap-buildout.py\n@@ -18,19 +18,20 @@\n use the -c option to specify an alternate configuration file.\n """\n \n+from optparse import OptionParser\n+\n import os\n import shutil\n import sys\n import tempfile\n \n-from optparse import OptionParser\n \n-__version__ = \'2015-07-01\'\n+__version__ = "2015-07-01"\n # See zc.buildout\'s changelog if this version is up to date.\n \n-tmpeggs = tempfile.mkdtemp(prefix=\'bootstrap-\')\n+tmpeggs = tempfile.mkdtemp(prefix="bootstrap-")\n \n-usage = \'\'\'\\\n+usage = """\\\n [DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n \n Bootstraps a buildout-based project.\n@@ -40,36 +41,50 @@\n \n Note that by using --find-links to point to local resources, you can keep\n this script from going over the network.\n-\'\'\'\n+"""\n \n parser = OptionParser(usage=usage)\n-parser.add_option("--version",\n-                  action="store_true", default=False,\n-                  help=("Return bootstrap.py version."))\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-parser.add_option("--buildout-version",\n-                  help="Use a specific zc.buildout version")\n-parser.add_option("--setuptools-version",\n-                  help="Use a specific setuptools version")\n-parser.add_option("--setuptools-to-dir",\n-                  help=("Allow for re-use of existing directory of "\n-                        "setuptools versions"))\n+parser.add_option(\n+    "--version",\n+    action="store_true",\n+    default=False,\n+    help=("Return bootstrap.py version."),\n+)\n+parser.add_option(\n+    "-t",\n+    "--accept-buildout-test-releases",\n+    dest="accept_buildout_test_releases",\n+    action="store_true",\n+    default=False,\n+    help=(\n+        "Normally, if you do not specify a --version, the "\n+        "bootstrap script and buildout gets the newest "\n+        "*final* versions of zc.buildout and its recipes and "\n+        "extensions for you.  If you use this flag, "\n+        "bootstrap and buildout will get the newest releases "\n+        "even if they are alphas or betas."\n+    ),\n+)\n+parser.add_option(\n+    "-c",\n+    "--config-file",\n+    help=("Specify the path to the buildout configuration " "file to be used."),\n+)\n+parser.add_option(\n+    "-f", "--find-links", help=("Specify a URL to search for buildout releases")\n+)\n+parser.add_option(\n+    "--allow-site-packages",\n+    action="store_true",\n+    default=False,\n+    help=("Let bootstrap.py use existing site packages"),\n+)\n+parser.add_option("--buildout-version", help="Use a specific zc.buildout version")\n+parser.add_option("--setuptools-version", help="Use a specific setuptools version")\n+parser.add_option(\n+    "--setuptools-to-dir",\n+    help=("Allow for re-use of existing directory of " "setuptools versions"),\n+)\n \n options, args = parser.parse_args()\n if options.version:\n@@ -86,37 +101,38 @@\n     from urllib2 import urlopen\n \n ez = {}\n-if os.path.exists(\'ez_setup.py\'):\n-    exec(open(\'ez_setup.py\').read(), ez)\n+if os.path.exists("ez_setup.py"):\n+    exec(open("ez_setup.py").read(), ez)\n else:\n-    exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n+    exec(urlopen("https://bootstrap.pypa.io/ez_setup.py").read(), ez)\n \n if not options.allow_site_packages:\n     # ez_setup imports site, which adds site packages\n     # this will remove them from the path to ensure that incompatible versions\n     # of setuptools are not in the path\n     import site\n+\n     # inside a virtualenv, there is no \'getsitepackages\'.\n     # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n+    if hasattr(site, "getsitepackages"):\n         for sitepackage_path in site.getsitepackages():\n             # Strip all site-packages directories from sys.path that\n             # are not sys.prefix; this is because on Windows\n             # sys.prefix is a site-package directory.\n             if sitepackage_path != sys.prefix:\n-                sys.path[:] = [x for x in sys.path\n-                               if sitepackage_path not in x]\n+                sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n \n setup_args = dict(to_dir=tmpeggs, download_delay=0)\n \n if options.setuptools_version is not None:\n-    setup_args[\'version\'] = options.setuptools_version\n+    setup_args["version"] = options.setuptools_version\n if options.setuptools_to_dir is not None:\n-    setup_args[\'to_dir\'] = options.setuptools_to_dir\n+    setup_args["to_dir"] = options.setuptools_to_dir\n \n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n+ez["use_setuptools"](**setup_args)\n import pkg_resources\n+import setuptools\n+\n \n # This does not (always?) update the default working set.  We will\n # do it.\n@@ -129,30 +145,37 @@\n \n ws = pkg_resources.working_set\n \n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n+setuptools_path = ws.find(pkg_resources.Requirement.parse("setuptools")).location\n \n # Fix sys.path here as easy_install.pth added before PYTHONPATH\n-cmd = [sys.executable, \'-c\',\n-       \'import sys; sys.path[0:0] = [%r]; \' % setuptools_path +\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n+cmd = [\n+    sys.executable,\n+    "-c",\n+    "import sys; sys.path[0:0] = [%r]; " % setuptools_path\n+    + "from setuptools.command.easy_install import main; main()",\n+    "-mZqNxd",\n+    tmpeggs,\n+]\n \n find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n+    "bootstrap-testing-find-links",\n+    options.find_links\n+    or (\n+        "http://downloads.buildout.org/"\n+        if options.accept_buildout_test_releases\n+        else None\n+    ),\n+)\n if find_links:\n-    cmd.extend([\'-f\', find_links])\n+    cmd.extend(["-f", find_links])\n \n-requirement = \'zc.buildout\'\n+requirement = "zc.buildout"\n version = options.buildout_version\n if version is None and not options.accept_buildout_test_releases:\n     # Figure out the most recent final version of zc.buildout.\n     import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n+\n+    _final_parts = "*final-", "*final"\n \n     def _final_version(parsed_version):\n         try:\n@@ -160,12 +183,11 @@ def _final_version(parsed_version):\n         except AttributeError:\n             # Older setuptools\n             for part in parsed_version:\n-                if (part[:1] == \'*\') and (part not in _final_parts):\n+                if (part[:1] == "*") and (part not in _final_parts):\n                     return False\n             return True\n \n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n+    index = setuptools.package_index.PackageIndex(search_path=[setuptools_path])\n     if find_links:\n         index.add_find_links((find_links,))\n     req = pkg_resources.Requirement.parse(requirement)\n@@ -184,13 +206,14 @@ def _final_version(parsed_version):\n             best.sort()\n             version = best[-1].version\n if version:\n-    requirement = \'==\'.join((requirement, version))\n+    requirement = "==".join((requirement, version))\n cmd.append(requirement)\n \n import subprocess\n+\n+\n if subprocess.call(cmd) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n+    raise Exception("Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n \n ######################################################################\n # Import and run buildout\n@@ -199,12 +222,13 @@ def _final_version(parsed_version):\n ws.require(requirement)\n import zc.buildout.buildout\n \n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n+\n+if not [a for a in args if "=" not in a]:\n+    args.append("bootstrap")\n \n # if -c was provided, we push it back into args for buildout\' main function\n if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n+    args[0:0] = ["-c", options.config_file]\n \n zc.buildout.buildout.main(args)\n shutil.rmtree(tmpeggs)\ndiff --git a/docs/source/conf.py b/docs/source/conf.py\nindex e5898ae45..c2bc52abe 100644\n--- a/docs/source/conf.py\n+++ b/docs/source/conf.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # plone.app.contenttypes documentation build configuration file, created by\n # sphinx-quickstart on Sat May  4 10:52:54 2013.\n@@ -11,201 +10,206 @@\n # All configuration values have a default; values that are commented out\n # serve to show the default.\n \n-import sys, os\n+import os\n+import sys\n+\n \n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\n # documentation root, use os.path.abspath to make it absolute, like shown here.\n-#sys.path.insert(0, os.path.abspath(\'.\'))\n+# sys.path.insert(0, os.path.abspath(\'.\'))\n \n # -- General configuration -----------------------------------------------------\n \n # If your documentation needs a minimal Sphinx version, state it here.\n-#needs_sphinx = \'1.0\'\n+# needs_sphinx = \'1.0\'\n \n # Add any Sphinx extension module names here, as strings. They can be extensions\n # coming with Sphinx (named \'sphinx.ext.*\') or your custom ones.\n extensions = []\n \n # Add any paths that contain templates here, relative to this directory.\n-templates_path = [\'_templates\']\n+templates_path = ["_templates"]\n \n # The suffix of source filenames.\n-source_suffix = \'.rst\'\n+source_suffix = ".rst"\n \n # The encoding of source files.\n-#source_encoding = \'utf-8-sig\'\n+# source_encoding = \'utf-8-sig\'\n \n # The master toctree document.\n-master_doc = \'index\'\n+master_doc = "index"\n \n # General information about the project.\n-project = u\'plone.app.contenttypes\'\n-copyright = u\'2013, Plone Foundation\'\n+project = "plone.app.contenttypes"\n+copyright = "2013, Plone Foundation"\n \n # The version info for the project you\'re documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n # built documents.\n #\n # The short X.Y version.\n-version = \'1.0\'\n+version = "1.0"\n # The full version, including alpha/beta/rc tags.\n-release = \'1.0\'\n+release = "1.0"\n \n # The language for content autogenerated by Sphinx. Refer to documentation\n # for a list of supported languages.\n-#language = None\n+# language = None\n \n # There are two options for replacing |today|: either, you set today to some\n # non-false value, then it is used:\n-#today = \'\'\n+# today = \'\'\n # Else, today_fmt is used as the format for a strftime call.\n-#today_fmt = \'%B %d, %Y\'\n+# today_fmt = \'%B %d, %Y\'\n \n # List of patterns, relative to source directory, that match files and\n # directories to ignore when looking for source files.\n exclude_patterns = []\n \n # The reST default role (used for this markup: `text`) to use for all documents.\n-#default_role = None\n+# default_role = None\n \n # If true, \'()\' will be appended to :func: etc. cross-reference text.\n-#add_function_parentheses = True\n+# add_function_parentheses = True\n \n # If true, the current module name will be prepended to all description\n # unit titles (such as .. function::).\n-#add_module_names = True\n+# add_module_names = True\n \n # If true, sectionauthor and moduleauthor directives will be shown in the\n # output. They are ignored by default.\n-#show_authors = False\n+# show_authors = False\n \n # The name of the Pygments (syntax highlighting) style to use.\n-pygments_style = \'sphinx\'\n+pygments_style = "sphinx"\n \n # A list of ignored prefixes for module index sorting.\n-#modindex_common_prefix = []\n+# modindex_common_prefix = []\n \n \n # -- Options for HTML output ---------------------------------------------------\n \n # The theme to use for HTML and HTML Help pages.  See the documentation for\n # a list of builtin themes.\n-html_theme = \'default\'\n+html_theme = "default"\n \n # Theme options are theme-specific and customize the look and feel of a theme\n # further.  For a list of options available for each theme, see the\n # documentation.\n-#html_theme_options = {}\n+# html_theme_options = {}\n \n # Add any paths that contain custom themes here, relative to this directory.\n-#html_theme_path = []\n+# html_theme_path = []\n \n # The name for this set of Sphinx documents.  If None, it defaults to\n # "<project> v<release> documentation".\n-#html_title = None\n+# html_title = None\n \n # A shorter title for the navigation bar.  Default is the same as html_title.\n-#html_short_title = None\n+# html_short_title = None\n \n # The name of an image file (relative to this directory) to place at the top\n # of the sidebar.\n-#html_logo = None\n+# html_logo = None\n \n # The name of an image file (within the static path) to use as favicon of the\n # docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n # pixels large.\n-#html_favicon = None\n+# html_favicon = None\n \n # Add any paths that contain custom static files (such as style sheets) here,\n # relative to this directory. They are copied after the builtin static files,\n # so a file named "default.css" will overwrite the builtin "default.css".\n-html_static_path = [\'_static\']\n+html_static_path = ["_static"]\n \n # If not \'\', a \'Last updated on:\' timestamp is inserted at every page bottom,\n # using the given strftime format.\n-#html_last_updated_fmt = \'%b %d, %Y\'\n+# html_last_updated_fmt = \'%b %d, %Y\'\n \n # If true, SmartyPants will be used to convert quotes and dashes to\n # typographically correct entities.\n-#html_use_smartypants = True\n+# html_use_smartypants = True\n \n # Custom sidebar templates, maps document names to template names.\n-#html_sidebars = {}\n+# html_sidebars = {}\n \n # Additional templates that should be rendered to pages, maps page names to\n # template names.\n-#html_additional_pages = {}\n+# html_additional_pages = {}\n \n # If false, no module index is generated.\n-#html_domain_indices = True\n+# html_domain_indices = True\n \n # If false, no index is generated.\n-#html_use_index = True\n+# html_use_index = True\n \n # If true, the index is split into individual pages for each letter.\n-#html_split_index = False\n+# html_split_index = False\n \n # If true, links to the reST sources are added to the pages.\n-#html_show_sourcelink = True\n+# html_show_sourcelink = True\n \n # If true, "Created using Sphinx" is shown in the HTML footer. Default is True.\n-#html_show_sphinx = True\n+# html_show_sphinx = True\n \n # If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.\n-#html_show_copyright = True\n+# html_show_copyright = True\n \n # If true, an OpenSearch description file will be output, and all pages will\n # contain a <link> tag referring to it.  The value of this option must be the\n # base URL from which the finished HTML is served.\n-#html_use_opensearch = \'\'\n+# html_use_opensearch = \'\'\n \n # This is the file name suffix for HTML files (e.g. ".xhtml").\n-#html_file_suffix = None\n+# html_file_suffix = None\n \n # Output file base name for HTML help builder.\n-htmlhelp_basename = \'ploneappcontenttypesdoc\'\n+htmlhelp_basename = "ploneappcontenttypesdoc"\n \n \n # -- Options for LaTeX output --------------------------------------------------\n \n latex_elements = {\n-# The paper size (\'letterpaper\' or \'a4paper\').\n-#\'papersize\': \'letterpaper\',\n-\n-# The font size (\'10pt\', \'11pt\' or \'12pt\').\n-#\'pointsize\': \'10pt\',\n-\n-# Additional stuff for the LaTeX preamble.\n-#\'preamble\': \'\',\n+    # The paper size (\'letterpaper\' or \'a4paper\').\n+    #\'papersize\': \'letterpaper\',\n+    # The font size (\'10pt\', \'11pt\' or \'12pt\').\n+    #\'pointsize\': \'10pt\',\n+    # Additional stuff for the LaTeX preamble.\n+    #\'preamble\': \'\',\n }\n \n # Grouping the document tree into LaTeX files. List of tuples\n # (source start file, target name, title, author, documentclass [howto/manual]).\n latex_documents = [\n-  (\'index\', \'ploneappcontenttypes.tex\', u\'plone.app.contenttypes Documentation\',\n-   u\'Plone Foundation\', \'manual\'),\n+    (\n+        "index",\n+        "ploneappcontenttypes.tex",\n+        "plone.app.contenttypes Documentation",\n+        "Plone Foundation",\n+        "manual",\n+    ),\n ]\n \n # The name of an image file (relative to this directory) to place at the top of\n # the title page.\n-#latex_logo = None\n+# latex_logo = None\n \n # For "manual" documents, if this is true, then toplevel headings are parts,\n # not chapters.\n-#latex_use_parts = False\n+# latex_use_parts = False\n \n # If true, show page references after internal links.\n-#latex_show_pagerefs = False\n+# latex_show_pagerefs = False\n \n # If true, show URL addresses after external links.\n-#latex_show_urls = False\n+# latex_show_urls = False\n \n # Documents to append as an appendix to all manuals.\n-#latex_appendices = []\n+# latex_appendices = []\n \n # If false, no module index is generated.\n-#latex_domain_indices = True\n+# latex_domain_indices = True\n \n \n # -- Options for manual page output --------------------------------------------\n@@ -213,12 +217,17 @@\n # One entry per manual page. List of tuples\n # (source start file, name, description, authors, manual section).\n man_pages = [\n-    (\'index\', \'ploneappcontenttypes\', u\'plone.app.contenttypes Documentation\',\n-     [u\'Plone Foundation\'], 1)\n+    (\n+        "index",\n+        "ploneappcontenttypes",\n+        "plone.app.contenttypes Documentation",\n+        ["Plone Foundation"],\n+        1,\n+    )\n ]\n \n # If true, show URL addresses after external links.\n-#man_show_urls = False\n+# man_show_urls = False\n \n \n # -- Options for Texinfo output ------------------------------------------------\n@@ -227,16 +236,22 @@\n # (source start file, target name, title, author,\n #  dir menu entry, description, category)\n texinfo_documents = [\n-  (\'index\', \'ploneappcontenttypes\', u\'plone.app.contenttypes Documentation\',\n-   u\'Plone Foundation\', \'ploneappcontenttypes\', \'One line description of project.\',\n-   \'Miscellaneous\'),\n+    (\n+        "index",\n+        "ploneappcontenttypes",\n+        "plone.app.contenttypes Documentation",\n+        "Plone Foundation",\n+        "ploneappcontenttypes",\n+        "One line description of project.",\n+        "Miscellaneous",\n+    ),\n ]\n \n # Documents to append as an appendix to all manuals.\n-#texinfo_appendices = []\n+# texinfo_appendices = []\n \n # If false, no module index is generated.\n-#texinfo_domain_indices = True\n+# texinfo_domain_indices = True\n \n # How to display URL addresses: \'footnote\', \'no\', or \'inline\'.\n-#texinfo_show_urls = \'footnote\'\n+# texinfo_show_urls = \'footnote\'\ndiff --git a/news/644.breaking b/news/644.breaking\nnew file mode 100644\nindex 000000000..ef7a98530\n--- /dev/null\n+++ b/news/644.breaking\n@@ -0,0 +1,2 @@\n+Use plone.base, code style black, isort, pyupgrade, manual overhaul.\n+[jensens]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 076cb05a0..5f9c2f42a 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,7 +1,7 @@\n-# -*- coding: utf-8 -*-\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:  # pragma: no cover\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 076cb05a0..5f9c2f42a 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,7 +1,7 @@\n-# -*- coding: utf-8 -*-\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:  # pragma: no cover\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/app/contenttypes/__init__.py b/plone/app/contenttypes/__init__.py\nindex de99613fe..ac45a45bb 100644\n--- a/plone/app/contenttypes/__init__.py\n+++ b/plone/app/contenttypes/__init__.py\n@@ -1,9 +1,7 @@\n-# -*- coding: utf-8 -*-\n-from zope.i18nmessageid import MessageFactory\n-\n from . import permissions\n+from zope.i18nmessageid import MessageFactory\n \n \n permissions  # pyflakes\n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\ndiff --git a/plone/app/contenttypes/behaviors/__init__.py b/plone/app/contenttypes/behaviors/__init__.py\nindex 40a96afc6..e69de29bb 100644\n--- a/plone/app/contenttypes/behaviors/__init__.py\n+++ b/plone/app/contenttypes/behaviors/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/contenttypes/behaviors/collection.py b/plone/app/contenttypes/behaviors/collection.py\nindex 1d1f2d500..221addac5 100644\n--- a/plone/app/contenttypes/behaviors/collection.py\n+++ b/plone/app/contenttypes/behaviors/collection.py\n@@ -1,14 +1,15 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes import _\n from plone.app.z3cform.widget import QueryStringFieldWidget\n from plone.autoform import directives as form\n from plone.autoform.interfaces import IFormFieldProvider\n+from plone.base.interfaces.syndication import IFeed\n+from plone.base.interfaces.syndication import ISyndicatable\n from plone.dexterity.interfaces import IDexterityContent\n from plone.supermodel import model\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.browser.syndication.adapters import CollectionFeed as BaseCollectionFeed  # noqa\n-from Products.CMFPlone.interfaces.syndication import IFeed\n-from Products.CMFPlone.interfaces.syndication import ISyndicatable\n+from Products.CMFPlone.browser.syndication.adapters import (\n+    CollectionFeed as BaseCollectionFeed,\n+)\n from zope import schema\n from zope.component import adapter\n from zope.component import getMultiAdapter\n@@ -21,13 +22,13 @@\n \n deprecated(\n     "Import from plone.app.vocabularies.metadatafields instead (this compatibility layer will be removed in Plone 6)",\n-    MetaDataFieldsVocabulary=\'plone.app.vocabularies.metadatafields:MetaDataFieldsVocabulary\',\n+    MetaDataFieldsVocabulary="plone.app.vocabularies.metadatafields:MetaDataFieldsVocabulary",\n )\n \n \n deprecated(\n     "Import from plone.app.vocabularies.metadatafields instead (this compatibility layer will be removed in Plone 6)",\n-    MetaDataFieldsVocabularyFactory=\'plone.app.vocabularies.metadatafields:MetaDataFieldsVocabularyFactory\',\n+    MetaDataFieldsVocabularyFactory="plone.app.vocabularies.metadatafields:MetaDataFieldsVocabularyFactory",\n )\n \n \n@@ -35,76 +36,84 @@\n class ICollection(model.Schema):\n \n     query = schema.List(\n-        title=_(u\'Search terms\'),\n-        description=_(u\'Define the search terms for the items you want \'\n-                      u\'to list by choosing what to match on. \'\n-                      u\'The list of results will be dynamically updated\'),\n-        value_type=schema.Dict(value_type=schema.Field(),\n-                               key_type=schema.TextLine()),\n+        title=_("Search terms"),\n+        description=_(\n+            "Define the search terms for the items you want "\n+            "to list by choosing what to match on. "\n+            "The list of results will be dynamically updated"\n+        ),\n+        value_type=schema.Dict(value_type=schema.Field(), key_type=schema.TextLine()),\n         required=False,\n-        missing_value=\'\'\n+        missing_value="",\n     )\n-    form.widget(\'query\', QueryStringFieldWidget)\n+    form.widget("query", QueryStringFieldWidget)\n \n     sort_on = schema.TextLine(\n-        title=_(u\'label_sort_on\', default=u\'Sort on\'),\n-        description=_(u\'Sort the collection on this index\'),\n+        title=_("label_sort_on", default="Sort on"),\n+        description=_("Sort the collection on this index"),\n         required=False,\n     )\n \n     sort_reversed = schema.Bool(\n-        title=_(u\'label_sort_reversed\', default=u\'Reversed order\'),\n-        description=_(u\'Sort the results in reversed order\'),\n+        title=_("label_sort_reversed", default="Reversed order"),\n+        description=_("Sort the results in reversed order"),\n         required=False,\n     )\n \n     limit = schema.Int(\n-        title=_(u\'Limit\'),\n-        description=_(u\'Limit Search Results\'),\n+        title=_("Limit"),\n+        description=_("Limit Search Results"),\n         required=False,\n         default=1000,\n         min=1,\n     )\n \n     item_count = schema.Int(\n-        title=_(u\'label_item_count\', default=u\'Item count\'),\n-        description=_(u\'Number of items that will show up in one batch.\'),\n+        title=_("label_item_count", default="Item count"),\n+        description=_("Number of items that will show up in one batch."),\n         required=False,\n         default=30,\n         min=1,\n     )\n \n     customViewFields = schema.List(\n-        title=_(u\'Table Columns\'),\n-        description=_(u"Select which fields to display when "\n-                      u"\'Tabular view\' is selected in the display menu."),\n-        default=[\'Title\', \'Creator\', \'Type\', \'ModificationDate\'],\n-        value_type=schema.Choice(\n-            vocabulary=\'plone.app.vocabularies.MetadataFields\'),\n+        title=_("Table Columns"),\n+        description=_(\n+            "Select which fields to display when "\n+            "\'Tabular view\' is selected in the display menu."\n+        ),\n+        default=["Title", "Creator", "Type", "ModificationDate"],\n+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.MetadataFields"),\n         required=False,\n     )\n \n \n class ISyndicatableCollection(ISyndicatable):\n-    """Marker interface for syndicatable collections.\n-    """\n+    """Marker interface for syndicatable collections."""\n \n \n @implementer(ICollection)\n @adapter(IDexterityContent)\n-class Collection(object):\n-\n+class Collection:\n     def __init__(self, context):\n         self.context = context\n \n-    def results(self, batch=True, b_start=0, b_size=None,\n-                sort_on=None, limit=None, brains=False,\n-                custom_query=None):\n+    def results(\n+        self,\n+        batch=True,\n+        b_start=0,\n+        b_size=None,\n+        sort_on=None,\n+        limit=None,\n+        brains=False,\n+        custom_query=None,\n+    ):\n         if custom_query is None:\n             custom_query = {}\n-        querybuilder = getMultiAdapter((self.context, self.context.REQUEST),\n-                                       name=\'querybuilderresults\')\n-        sort_order = \'reverse\' if self.sort_reversed else \'ascending\'\n+        querybuilder = getMultiAdapter(\n+            (self.context, self.context.REQUEST), name="querybuilderresults"\n+        )\n+        sort_order = "reverse" if self.sort_reversed else "ascending"\n         if not b_size:\n             b_size = self.item_count\n         if not sort_on:\n@@ -112,9 +121,15 @@ def results(self, batch=True, b_start=0, b_size=None,\n         if not limit:\n             limit = self.limit\n         return querybuilder(\n-            query=self.query, batch=batch, b_start=b_start, b_size=b_size,\n-            sort_on=sort_on, sort_order=sort_order,\n-            limit=limit, brains=brains, custom_query=custom_query\n+            query=self.query,\n+            batch=batch,\n+            b_start=b_start,\n+            b_size=b_size,\n+            sort_on=sort_on,\n+            sort_order=sort_order,\n+            limit=limit,\n+            brains=brains,\n+            custom_query=custom_query,\n         )\n \n     def selectedViewFields(self):\n@@ -125,8 +140,9 @@ def selectedViewFields(self):\n \n         """\n         _mapping = {}\n-        vocab = getUtility(IVocabularyFactory,\n-                           name=\'plone.app.vocabularies.MetadataFields\')\n+        vocab = getUtility(\n+            IVocabularyFactory, name="plone.app.vocabularies.MetadataFields"\n+        )\n         for field in vocab(self.context):\n             _mapping[field.value] = (field.value, field.title)\n         ret = [_mapping[field] for field in self.customViewFields]\n@@ -134,59 +150,58 @@ def selectedViewFields(self):\n \n     # Getters and setters for our fields.\n \n-    def _set_sort_reversed(self, value):\n-        self.context.sort_reversed = value\n+    @property\n+    def sort_reversed(self):\n+        return getattr(self.context, "sort_reversed", None)\n \n-    def _get_sort_reversed(self):\n-        return getattr(self.context, \'sort_reversed\', None)\n+    @sort_reversed.setter\n+    def sort_reversed(self, value):\n+        self.context.sort_reversed = value\n \n-    sort_reversed = property(_get_sort_reversed, _set_sort_reversed)\n+    @property\n+    def item_count(self):\n+        return getattr(self.context, "item_count", 30)\n \n-    def _set_item_count(self, value):\n+    @item_count.setter\n+    def item_count(self, value):\n         self.context.item_count = value\n \n-    def _get_item_count(self):\n-        return getattr(self.context, \'item_count\', 30)\n+    @property\n+    def sort_on(self):\n+        return getattr(self.context, "sort_on", None)\n \n-    item_count = property(_get_item_count, _set_item_count)\n-\n-    def _set_sort_on(self, value):\n+    @sort_on.setter\n+    def sort_on(self, value):\n         self.context.sort_on = value\n \n-    def _get_sort_on(self):\n-        return getattr(self.context, \'sort_on\', None)\n-\n-    sort_on = property(_get_sort_on, _set_sort_on)\n+    @property\n+    def limit(self):\n+        return getattr(self.context, "limit", 1000)\n \n-    def _set_limit(self, value):\n+    @limit.setter\n+    def limit(self, value):\n         self.context.limit = value\n \n-    def _get_limit(self):\n-        return getattr(self.context, \'limit\', 1000)\n+    @property\n+    def query(self):\n+        return getattr(self.context, "query", None)\n \n-    limit = property(_get_limit, _set_limit)\n-\n-    def _set_query(self, value):\n+    @query.setter\n+    def query(self, value):\n         self.context.query = value\n \n-    def _get_query(self):\n-        return getattr(self.context, \'query\', None)\n-\n-    query = property(_get_query, _set_query)\n-\n-    def _set_customViewFields(self, value):\n-        self.context.customViewFields = value\n-\n-    def _get_customViewFields(self):\n+    @property\n+    def customViewFields(self):\n         # Note: in corner cases customViewFields might be None, but we\n         # always want a list.\n-        return getattr(self.context, \'customViewFields\', []) or []\n+        return getattr(self.context, "customViewFields", []) or []\n \n-    customViewFields = property(_get_customViewFields, _set_customViewFields)\n+    @customViewFields.setter\n+    def customViewFields(self, value):\n+        self.context.customViewFields = value\n \n \n @implementer(IFeed)\n class CollectionFeed(BaseCollectionFeed):\n-\n     def _brains(self):\n-        return ICollection(self.context).results(batch=False)[:self.limit]\n+        return ICollection(self.context).results(batch=False)[: self.limit]\ndiff --git a/plone/app/contenttypes/behaviors/leadimage.py b/plone/app/contenttypes/behaviors/leadimage.py\nindex f7bebbddf..5987d085d 100644\n--- a/plone/app/contenttypes/behaviors/leadimage.py\n+++ b/plone/app/contenttypes/behaviors/leadimage.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes import _\n from plone.autoform.interfaces import IFormFieldProvider\n from plone.dexterity.interfaces import IDexterityContent\n@@ -7,8 +6,8 @@\n from zope import schema\n from zope.component import adapter\n from zope.interface import implementer\n-from zope.interface import provider\n from zope.interface import Interface\n+from zope.interface import provider\n \n \n class ILeadImage(Interface):\n@@ -19,22 +18,21 @@ class ILeadImage(Interface):\n class ILeadImageBehavior(model.Schema):\n \n     image = namedfile.NamedBlobImage(\n-        title=_(u\'label_leadimage\', default=u\'Lead Image\'),\n-        description=u\'\',\n+        title=_("label_leadimage", default="Lead Image"),\n+        description="",\n         required=False,\n     )\n \n     image_caption = schema.TextLine(\n-        title=_(u\'label_leadimage_caption\', default=u\'Lead Image Caption\'),\n-        description=u\'\',\n+        title=_("label_leadimage_caption", default="Lead Image Caption"),\n+        description="",\n         required=False,\n     )\n \n \n @implementer(ILeadImageBehavior)\n @adapter(IDexterityContent)\n-class LeadImage(object):\n-\n+class LeadImage:\n     def __init__(self, context):\n         self.context = context\n \ndiff --git a/plone/app/contenttypes/behaviors/richtext.py b/plone/app/contenttypes/behaviors/richtext.py\nindex 9238c9b9b..ab3f492c2 100644\n--- a/plone/app/contenttypes/behaviors/richtext.py\n+++ b/plone/app/contenttypes/behaviors/richtext.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.app.contenttypes import _\n from plone.app.dexterity.textindexer import searchable\n@@ -23,25 +22,24 @@ class IRichText(Interface):\n class IRichTextBehavior(model.Schema):\n \n     text = RichTextField(\n-        title=_(u\'Text\'),\n-        description=u\'\',\n+        title=_("Text"),\n+        description="",\n         required=False,\n     )\n-    form.widget(\'text\', RichTextFieldWidget)\n-    model.primary(\'text\')\n+    form.widget("text", RichTextFieldWidget)\n+    model.primary("text")\n     searchable("text")\n \n \n @implementer(IRichTextBehavior)\n @adapter(IDexterityContent)\n-class RichText(object):\n-\n+class RichText:\n     def __init__(self, context):\n         self.context = context\n \n     @property\n     def text(self):\n-        return getattr(aq_base(self.context), \'text\', \'\')\n+        return getattr(aq_base(self.context), "text", "")\n \n     @text.setter\n     def text(self, value):\ndiff --git a/plone/app/contenttypes/behaviors/tableofcontents.py b/plone/app/contenttypes/behaviors/tableofcontents.py\nindex 4179a248a..b4c7a6a59 100644\n--- a/plone/app/contenttypes/behaviors/tableofcontents.py\n+++ b/plone/app/contenttypes/behaviors/tableofcontents.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.autoform.interfaces import IFormFieldProvider\n from plone.supermodel import model\n from zope import schema\n@@ -6,22 +5,20 @@\n from zope.interface import provider\n \n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\n \n \n @provider(IFormFieldProvider)\n class ITableOfContents(model.Schema):\n \n-    model.fieldset(\'settings\', label=_(u\'Settings\'),\n-                   fields=[\'table_of_contents\'])\n+    model.fieldset("settings", label=_("Settings"), fields=["table_of_contents"])\n \n     table_of_contents = schema.Bool(\n-        title=_(\n-            u\'help_enable_table_of_contents\',\n-            default=u\'Table of contents\'),\n+        title=_("help_enable_table_of_contents", default="Table of contents"),\n         description=_(\n-            u\'help_enable_table_of_contents_description\',\n-            default=u\'If selected, this will show a table of contents\'\n-                    u\' at the top of the page.\'),\n+            "help_enable_table_of_contents_description",\n+            default="If selected, this will show a table of contents"\n+            " at the top of the page.",\n+        ),\n         required=False,\n     )\ndiff --git a/plone/app/contenttypes/behaviors/thumb_icon.py b/plone/app/contenttypes/behaviors/thumb_icon.py\nindex b63e4e8ea..3ef985d21 100644\n--- a/plone/app/contenttypes/behaviors/thumb_icon.py\n+++ b/plone/app/contenttypes/behaviors/thumb_icon.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes import _\n from plone.autoform import directives\n from plone.autoform.interfaces import IFormFieldProvider\n@@ -13,83 +12,86 @@\n class IThumbIconHandling(model.Schema):\n \n     model.fieldset(\n-        \'settings\',\n-        label=_(u\'Settings\'),\n+        "settings",\n+        label=_("Settings"),\n         fields=[\n-            \'thumb_scale_list\',\n-            \'thumb_scale_table\',\n-            \'thumb_scale_summary\',\n-            \'suppress_icons\',\n-            \'suppress_thumbs\'\n-        ]\n+            "thumb_scale_list",\n+            "thumb_scale_table",\n+            "thumb_scale_summary",\n+            "suppress_icons",\n+            "suppress_thumbs",\n+        ],\n     )\n \n     thumb_scale_list = schema.TextLine(\n-        title=_(u\'Override thumb scale for list view\'),\n+        title=_("Override thumb scale for list view"),\n         description=_(\n-            u"Enter a valid scale name"\n-            u" (see \'Image Handling\' control panel) to override"\n-            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n-            u" Leave empty to use default (see \'Site\' control panel)."\n+            "Enter a valid scale name"\n+            " (see \'Image Handling\' control panel) to override"\n+            " (e.g. icon, tile, thumb, mini, preview, ... )."\n+            " Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u\'\')\n+        default="",\n+    )\n \n     thumb_scale_table = schema.TextLine(\n-        title=_(u\'Override thumb scale for table view\'),\n+        title=_("Override thumb scale for table view"),\n         description=_(\n-            u"Enter a valid scale name"\n-            u" (see \'Image Handling\' control panel) to override"\n-            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n-            u" Leave empty to use default (see \'Site\' control panel)."\n+            "Enter a valid scale name"\n+            " (see \'Image Handling\' control panel) to override"\n+            " (e.g. icon, tile, thumb, mini, preview, ... )."\n+            " Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u\'\')\n+        default="",\n+    )\n \n     thumb_scale_summary = schema.TextLine(\n-        title=_(u\'Override thumb scale for summary view\'),\n+        title=_("Override thumb scale for summary view"),\n         description=_(\n-            u"Enter a valid scale name"\n-            u" (see \'Image Handling\' control panel) to override"\n-            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n-            u" Leave empty to use default (see \'Site\' control panel)."\n+            "Enter a valid scale name"\n+            " (see \'Image Handling\' control panel) to override"\n+            " (e.g. icon, tile, thumb, mini, preview, ... )."\n+            " Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u\'\')\n+        default="",\n+    )\n \n     suppress_icons = schema.Bool(\n-        title=_(u\'Suppress icons in list, table or summary view\'),\n-        description=_(u\'\'),\n+        title=_("Suppress icons in list, table or summary view"),\n+        description=_(""),\n         required=False,\n         default=False,\n     )\n \n     suppress_thumbs = schema.Bool(\n-        title=_(u\'Suppress thumbs in list, table or summary view\'),\n+        title=_("Suppress thumbs in list, table or summary view"),\n         required=False,\n         default=False,\n     )\n \n     directives.omitted(\n-        \'thumb_scale_list\',\n-        \'thumb_scale_table\',\n-        \'thumb_scale_summary\',\n-        \'suppress_icons\',\n-        \'suppress_thumbs\'\n+        "thumb_scale_list",\n+        "thumb_scale_table",\n+        "thumb_scale_summary",\n+        "suppress_icons",\n+        "suppress_thumbs",\n     )\n     directives.no_omit(\n         IEditForm,\n-        \'thumb_scale_list\',\n-        \'thumb_scale_table\',\n-        \'thumb_scale_summary\',\n-        \'suppress_icons\',\n-        \'suppress_thumbs\'\n+        "thumb_scale_list",\n+        "thumb_scale_table",\n+        "thumb_scale_summary",\n+        "suppress_icons",\n+        "suppress_thumbs",\n     )\n     directives.no_omit(\n         IAddForm,\n-        \'thumb_scale_list\',\n-        \'thumb_scale_table\',\n-        \'thumb_scale_summary\',\n-        \'suppress_icons\',\n-        \'suppress_thumbs\'\n+        "thumb_scale_list",\n+        "thumb_scale_table",\n+        "thumb_scale_summary",\n+        "suppress_icons",\n+        "suppress_thumbs",\n     )\ndiff --git a/plone/app/contenttypes/behaviors/viewlets.py b/plone/app/contenttypes/behaviors/viewlets.py\nindex acc66efcb..eb38dbb25 100644\n--- a/plone/app/contenttypes/behaviors/viewlets.py\n+++ b/plone/app/contenttypes/behaviors/viewlets.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.behaviors.leadimage import ILeadImage\n from plone.app.layout.viewlets import ViewletBase\n \n \n class LeadImageViewlet(ViewletBase):\n-    """ A simple viewlet which renders leadimage """\n+    """A simple viewlet which renders leadimage"""\n \n     def update(self):\n         self.context = ILeadImage(self.context)\ndiff --git a/plone/app/contenttypes/browser/__init__.py b/plone/app/contenttypes/browser/__init__.py\nindex 40a96afc6..e69de29bb 100644\n--- a/plone/app/contenttypes/browser/__init__.py\n+++ b/plone/app/contenttypes/browser/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/contenttypes/browser/collection.py b/plone/app/contenttypes/browser/collection.py\nindex e75252c2f..c4f2a4e37 100644\n--- a/plone/app/contenttypes/browser/collection.py\n+++ b/plone/app/contenttypes/browser/collection.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.app.contenttypes import _\n from plone.app.contenttypes.behaviors.collection import ICollection\n@@ -10,14 +9,13 @@\n \n \n class CollectionView(FolderView):\n-\n     @property\n     def collection_behavior(self):\n         return ICollection(aq_inner(self.context))\n \n     @property\n     def b_size(self):\n-        return getattr(self, \'_b_size\', self.collection_behavior.item_count)\n+        return getattr(self, "_b_size", self.collection_behavior.item_count)\n \n     def results(self, **kwargs):\n         """Return a content listing based result set with results from the\n@@ -32,12 +30,12 @@ def results(self, **kwargs):\n                 sequence.\n         """\n         # Extra filter\n-        contentFilter = dict(self.request.get(\'contentFilter\', {}))\n-        contentFilter.update(kwargs.get(\'contentFilter\', {}))\n-        kwargs.setdefault(\'custom_query\', contentFilter)\n-        kwargs.setdefault(\'batch\', True)\n-        kwargs.setdefault(\'b_size\', self.b_size)\n-        kwargs.setdefault(\'b_start\', self.b_start)\n+        contentFilter = dict(self.request.get("contentFilter", {}))\n+        contentFilter.update(kwargs.get("contentFilter", {}))\n+        kwargs.setdefault("custom_query", contentFilter)\n+        kwargs.setdefault("batch", True)\n+        kwargs.setdefault("b_size", self.b_size)\n+        kwargs.setdefault("b_start", self.b_start)\n \n         results = self.collection_behavior.results(**kwargs)\n         return results\n@@ -49,8 +47,7 @@ def batch(self):\n     @property\n     @memoize\n     def _album_results(self):\n-        """Get results to display an album with subalbums.\n-        """\n+        """Get results to display an album with subalbums."""\n         results = self.results()\n         images = []\n         folders = []\n@@ -59,26 +56,23 @@ def _album_results(self):\n             ob = it.getObject()\n             if IFolder.providedBy(ob):\n                 folders.append(it)\n-            elif IImage.providedBy(ob) or \\\n-                 ILeadImage.providedBy(ob):\n+            elif IImage.providedBy(ob) or ILeadImage.providedBy(ob):\n                 images.append(it)\n-        return {\'images\': images, \'folders\': folders}\n+        return {"images": images, "folders": folders}\n \n     @property\n     def album_images(self):\n-        """Get all images within this collection.\n-        """\n-        return self._album_results[\'images\']\n+        """Get all images within this collection."""\n+        return self._album_results["images"]\n \n     @property\n     def album_folders(self):\n-        """Get all folders within this collection.\n-        """\n-        return self._album_results[\'folders\']\n+        """Get all folders within this collection."""\n+        return self._album_results["folders"]\n \n     def tabular_fields(self):\n         """Return a list of all metadata fields from the catalog that were\n-           selected.\n+        selected.\n         """\n         context = aq_inner(self.context)\n         wrapped = ICollection(context)\n@@ -88,7 +82,4 @@ def tabular_fields(self):\n \n     @property\n     def no_items_message(self):\n-        return _(\n-            \'description_no_results_found\',\n-            default=u\'No results were found.\'\n-        )\n+        return _("description_no_results_found", default="No results were found.")\ndiff --git a/plone/app/contenttypes/browser/configure.zcml b/plone/app/contenttypes/browser/configure.zcml\nindex 0273021ed..df0a68817 100644\n--- a/plone/app/contenttypes/browser/configure.zcml\n+++ b/plone/app/contenttypes/browser/configure.zcml\n@@ -9,7 +9,7 @@\n \n   <!-- VIEWS FOR PLONE SITE ROOT -->\n   <browser:pages\n-      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      for="plone.base.interfaces.IPloneSiteRoot"\n       class=".folder.FolderView"\n       permission="zope2.View">\n     <browser:page\n@@ -207,7 +207,7 @@\n \n   <browser:page\n       name="base_class_migrator_form"\n-      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      for="plone.base.interfaces.IPloneSiteRoot"\n       class="plone.app.contenttypes.browser.migration.BaseClassMigrator"\n       layer="plone.app.contenttypes.interfaces.IPloneAppContenttypesLayer"\n       permission="cmf.ManagePortal"\ndiff --git a/plone/app/contenttypes/browser/file.py b/plone/app/contenttypes/browser/file.py\nindex 7521938af..0a5ffa7c1 100644\n--- a/plone/app/contenttypes/browser/file.py\n+++ b/plone/app/contenttypes/browser/file.py\n@@ -1,18 +1,17 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.browser.utils import Utils\n-from Products.CMFPlone.utils import human_readable_size\n+from plone.base.utils import human_readable_size\n \n import re\n \n-class FileView(Utils):\n \n+class FileView(Utils):\n     def is_videotype(self):\n         ct = self.context.file.contentType\n-        return \'video/\' in ct\n+        return "video/" in ct\n \n     def is_audiotype(self):\n         ct = self.context.file.contentType\n-        return \'audio/\' in ct\n+        return "audio/" in ct\n \n     def human_readable_size(self):\n         return human_readable_size(self.context.file.getSize())\ndiff --git a/plone/app/contenttypes/browser/folder.py b/plone/app/contenttypes/browser/folder.py\nindex 982de4d13..f6f00f25b 100644\n--- a/plone/app/contenttypes/browser/folder.py\n+++ b/plone/app/contenttypes/browser/folder.py\n@@ -8,10 +8,10 @@\n from plone.base.batch import Batch\n from plone.base.interfaces import ISecuritySchema\n from plone.base.interfaces import ISiteSchema\n+from plone.base.utils import safe_callable\n from plone.event.interfaces import IEvent\n from plone.memoize.view import memoize\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.utils import safe_callable\n from Products.Five import BrowserView\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n@@ -31,7 +31,7 @@ class FolderView(BrowserView):\n     def plone_view(self):\n         if not self._plone_view:\n             self._plone_view = getMultiAdapter(\n-                (self.context, self.request), name=u"plone"\n+                (self.context, self.request), name="plone"\n             )\n         return self._plone_view\n \n@@ -39,7 +39,7 @@ def plone_view(self):\n     def portal_state(self):\n         if not self._portal_state:\n             self._portal_state = getMultiAdapter(\n-                (self.context, self.request), name=u"plone_portal_state"\n+                (self.context, self.request), name="plone_portal_state"\n             )\n         return self._portal_state\n \n@@ -47,7 +47,7 @@ def portal_state(self):\n     def pas_member(self):\n         if not self._pas_member:\n             self._pas_member = getMultiAdapter(\n-                (self.context, self.request), name=u"pas_member"\n+                (self.context, self.request), name="pas_member"\n             )\n         return self._pas_member\n \n@@ -233,7 +233,7 @@ def album_number_images(self):\n     def no_items_message(self):\n         return _(\n             "description_no_items_in_folder",\n-            default=u"There are currently no items in this folder.",\n+            default="There are currently no items in this folder.",\n         )\n \n     @memoize\ndiff --git a/plone/app/contenttypes/browser/full_view.py b/plone/app/contenttypes/browser/full_view.py\nindex a5035ddba..f2fc191f1 100644\n--- a/plone/app/contenttypes/browser/full_view.py\n+++ b/plone/app/contenttypes/browser/full_view.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.registry.interfaces import IRegistry\n from Products.Five.browser import BrowserView\n from zope.component import getUtility\n@@ -6,7 +5,6 @@\n \n \n class FullViewItem(BrowserView):\n-\n     @property\n     def default_view(self):\n         item_layout = self.context.getLayout()\n@@ -25,9 +23,8 @@ def item_macros(self):\n     @property\n     def item_url(self):\n         registry = getUtility(IRegistry)\n-        use_view_action = registry.get(\n-            \'plone.types_use_view_action_in_listings\', [])\n+        use_view_action = registry.get("plone.types_use_view_action_in_listings", [])\n         url = self.context.absolute_url()\n         if self.context.portal_type in use_view_action:\n-            url = u\'{0}/view\'.format(url)\n+            url = f"{url}/view"\n         return url\ndiff --git a/plone/app/contenttypes/browser/migration.py b/plone/app/contenttypes/browser/migration.py\nindex 230df9822..a6aa76e16 100644\n--- a/plone/app/contenttypes/browser/migration.py\n+++ b/plone/app/contenttypes/browser/migration.py\n@@ -4,17 +4,17 @@\n from plone.app.contenttypes.content import Image\n from plone.app.contenttypes.content import Link\n from plone.app.contenttypes.content import NewsItem\n+from plone.app.contenttypes.utils import changed_base_classes\n from plone.app.contenttypes.utils import DEFAULT_TYPES\n from plone.app.contenttypes.utils import get_old_class_name_string\n from plone.app.contenttypes.utils import migrate_base_class_to_new_class\n-from plone.app.contenttypes.utils import changed_base_classes\n+from plone.base import PloneMessageFactory as _\n+from plone.base.utils import get_installer\n from plone.browserlayer.interfaces import ILocalBrowserLayerType\n from plone.dexterity.interfaces import IDexterityContent\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.z3cform.layout import wrap_form\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.utils import get_installer\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n@@ -27,10 +27,10 @@\n from zope import schema\n from zope.component import getMultiAdapter\n from zope.component import queryUtility\n+from zope.interface import implementer\n from zope.interface import Interface\n from zope.schema.interfaces import IVocabularyFactory\n from zope.schema.vocabulary import SimpleVocabulary\n-from zope.interface import implementer\n \n import logging\n import pkg_resources\n@@ -39,15 +39,15 @@\n logger = logging.getLogger(__name__)\n \n \n-\n @implementer(IVocabularyFactory)\n-class ChangedBaseClasses(object):\n-\n+class ChangedBaseClasses:\n     def __call__(self, context):\n         """Return a vocabulary with all changed base classes."""\n         terms = []\n         for class_name, data in changed_base_classes(context).items():\n-            title = "{} (\xe2\x9e\xa1 {}) - ({} items)".format(data["old"], data["new"], data["amount"])\n+            title = "{} (\xe2\x9e\xa1 {}) - ({} items)".format(\n+                data["old"], data["new"], data["amount"]\n+            )\n             term = SimpleVocabulary.createTerm(class_name, class_name, title)\n             terms.append(term)\n         return SimpleVocabulary(terms)\n@@ -56,11 +56,11 @@ def __call__(self, context):\n class IBaseClassMigratorForm(Interface):\n \n     changed_base_classes = schema.List(\n-        title=u\'Changed base classes (old class, new class and number of items)\',\n-        description=u\'Select changed base classes you want to migrate. \'\n-            \'If the new types are folderish that change is also applied.\',\n+        title="Changed base classes (old class, new class and number of items)",\n+        description="Select changed base classes you want to migrate. "\n+        "If the new types are folderish that change is also applied.",\n         value_type=schema.Choice(\n-            vocabulary=\'plone.app.contenttypes.migration.changed_base_classes\',\n+            vocabulary="plone.app.contenttypes.migration.changed_base_classes",\n         ),\n         default=[],\n         required=True,\n@@ -69,11 +69,13 @@ class IBaseClassMigratorForm(Interface):\n \n class BaseClassMigratorForm(form.Form):\n \n-    label = _("heading_class_migrator",\n-        default="Update base-classes for content with changed classes")\n+    label = _(\n+        "heading_class_migrator",\n+        default="Update base-classes for content with changed classes",\n+    )\n \n     fields = field.Fields(IBaseClassMigratorForm)\n-    fields[\'changed_base_classes\'].widgetFactory = CheckBoxFieldWidget\n+    fields["changed_base_classes"].widgetFactory = CheckBoxFieldWidget\n     ignoreContext = True\n     enableCSRFProtection = True\n \n@@ -82,23 +84,24 @@ def updateWidgets(self):\n         changed_base_classes = self.widgets["changed_base_classes"]\n         if not changed_base_classes.terms.terms.by_value:\n             IStatusMessage(self.request).addStatusMessage(\n-                u\'No types with changed classes to migrate!\', type=\'warning\')\n+                "No types with changed classes to migrate!", type="warning"\n+            )\n             return\n \n-    @button.buttonAndHandler(u\'Update\', name=\'update\')\n+    @button.buttonAndHandler("Update", name="update")\n     def handle_migrate(self, action):\n         data, errors = self.extractData()\n \n         if errors:\n             return\n \n-        changed_base_classes = data.get(\'changed_base_classes\', [])\n+        changed_base_classes = data.get("changed_base_classes", [])\n         messages = IStatusMessage(self.request)\n         if not changed_base_classes:\n-            messages.addStatusMessage(u\'No types were selected\', type=\'warning\')\n+            messages.addStatusMessage("No types were selected", type="warning")\n             return\n \n-        catalog = getToolByName(self.context, \'portal_catalog\')\n+        catalog = getToolByName(self.context, "portal_catalog")\n         migrated = []\n         not_migrated = []\n         for brain in catalog():\n@@ -108,21 +111,20 @@ def handle_migrate(self, action):\n                 continue\n             old_class_name = get_old_class_name_string(obj)\n             if old_class_name in changed_base_classes:\n-                if migrate_base_class_to_new_class(\n-                        obj, migrate_to_folderish=True):\n+                if migrate_base_class_to_new_class(obj, migrate_to_folderish=True):\n                     migrated.append(obj)\n                 else:\n                     not_migrated.append(obj)\n \n-        info_message_template = \'{0} objects were migrated.\'\n-        warn_message_template = \'{0} objects were not migrated.\'\n+        info_message_template = "{0} objects were migrated."\n+        warn_message_template = "{0} objects were not migrated."\n         if migrated:\n             msg = info_message_template.format(len(migrated))\n-            messages.addStatusMessage(msg, type=\'info\')\n+            messages.addStatusMessage(msg, type="info")\n         if not_migrated:\n             msg = warn_message_template.format(len(not_migrated))\n-            messages.addStatusMessage(msg, type=\'warning\')\n-        self.request.response.redirect(self.request[\'ACTUAL_URL\'])\n+            messages.addStatusMessage(msg, type="warning")\n+        self.request.response.redirect(self.request["ACTUAL_URL"])\n \n \n BaseClassMigrator = wrap_form(\ndiff --git a/plone/app/contenttypes/browser/utils.py b/plone/app/contenttypes/browser/utils.py\nindex 6448f0872..13e654d13 100644\n--- a/plone/app/contenttypes/browser/utils.py\n+++ b/plone/app/contenttypes/browser/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.memoize.view import memoize\n from Products.CMFCore.utils import getToolByName\n@@ -13,13 +12,10 @@\n \n \n class IUtils(Interface):\n-    """\n-    """\n+    """ """\n \n     def getMimeTypeIcon(content_file):\n-        """\n-\n-        """\n+        """ """\n \n \n @implementer(IUtils)\n@@ -31,13 +27,11 @@ def _get_mimes(self, content_file):\n         mtr = getToolByName(context, "mimetypes_registry")\n         if content_file.contentType:\n             # this gives a tuple\n-            for mime in mtr.lookup(content_file.contentType):\n-                yield mime\n+            yield from mtr.lookup(content_file.contentType)\n         if content_file.filename:\n             # this gives a single mime type\n             yield mtr.lookupExtension(content_file.filename)\n-        for mime in mtr.lookup("application/octet-stream"):\n-            yield mime\n+        yield from mtr.lookup("application/octet-stream")\n \n     @memoize\n     def getMimeTypeIcon(self, content_file):\n@@ -57,6 +51,6 @@ def getMimeTypeIcon(self, content_file):\n             # Probably does not happen in practice.\n             return ""\n         context = aq_inner(self.context)\n-        pstate = getMultiAdapter((context, self.request), name=u"plone_portal_state")\n+        pstate = getMultiAdapter((context, self.request), name="plone_portal_state")\n         portal_url = pstate.portal_url()\n         return portal_url + "/" + guess_icon_path(first)\ndiff --git a/plone/app/contenttypes/configure.zcml b/plone/app/contenttypes/configure.zcml\nindex 0b1131a4e..540ce04bf 100644\n--- a/plone/app/contenttypes/configure.zcml\n+++ b/plone/app/contenttypes/configure.zcml\n@@ -7,12 +7,12 @@\n            xmlns:plone="http://namespaces.plone.org/plone"\n            i18n_domain="plone">\n \n-  <include package="Products.CMFPlone" file="meta.zcml"/>\n+  <include package="Products.CMFCore" file="meta.zcml" />\n+  <include package="Products.GenericSetup" file="meta.zcml" />\n   <include package="plone.behavior" file="meta.zcml"/>\n   <include package="plone.dexterity" file="meta.zcml"/>\n   <include package="plone.app.dexterity" file="meta.zcml"/>\n \n-  <include package="Products.CMFPlone" />\n   <include package="plone.behavior" />\n   <include package="plone.dexterity" />\n   <include package="plone.namedfile" />\n@@ -41,6 +41,6 @@\n   <utility\n       factory=".setuphandlers.HiddenProfiles"\n       name="plone.app.contenttypes"\n-      provides="Products.CMFPlone.interfaces.INonInstallable" />\n+      provides="plone.base.interfaces.INonInstallable" />\n \n </configure>\ndiff --git a/plone/app/contenttypes/content.py b/plone/app/contenttypes/content.py\nindex d4f8537be..1dc13c0eb 100644\n--- a/plone/app/contenttypes/content.py\n+++ b/plone/app/contenttypes/content.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.SecurityInfo import ClassSecurityInfo\n from email.feedparser import headerRE\n from plone.app.contenttypes.interfaces import ICollection\n@@ -9,24 +8,21 @@\n from plone.app.contenttypes.interfaces import IImage\n from plone.app.contenttypes.interfaces import ILink\n from plone.app.contenttypes.interfaces import INewsItem\n+from plone.base.utils import safe_text\n from plone.dexterity.content import Container\n from plone.dexterity.content import Item\n from plone.namedfile.file import NamedBlobFile\n from plone.namedfile.file import NamedBlobImage\n from Products.CMFCore import permissions\n-from Products.CMFPlone.utils import safe_text\n from zope.deprecation import deprecation\n from zope.interface import implementer\n from zope.lifecycleevent import modified\n \n \n-import six\n-\n-\n @implementer(ICollection)\n class Collection(Item):\n-    """Convenience subclass for ``Collection`` portal type\n-    """\n+    """Convenience subclass for ``Collection`` portal type"""\n+\n     security = ClassSecurityInfo()\n \n     # BBB\n@@ -42,10 +38,12 @@ def listMetaDataFields(self, exclude=True):\n     @security.protected(permissions.View)\n     def selectedViewFields(self):\n         """Returns a list of all metadata fields from the catalog that were\n-           selected.\n+        selected.\n         """\n-        from plone.app.contenttypes.behaviors.collection import \\\n-            ICollection as ICollection_behavior\n+        from plone.app.contenttypes.behaviors.collection import (\n+            ICollection as ICollection_behavior,\n+        )\n+\n         return ICollection_behavior(self).selectedViewFields()\n \n     @security.protected(permissions.ModifyPortalContent)\n@@ -60,7 +58,7 @@ def getQuery(self):\n         """\n         return self.query\n \n-    @deprecation.deprecate(\'getRawQuery() is deprecated; use getQuery().\')\n+    @deprecation.deprecate("getRawQuery() is deprecated; use getQuery().")\n     @security.protected(permissions.View)\n     def getRawQuery(self):\n         return self.getQuery()\n@@ -75,39 +73,41 @@ def setSort_reversed(self, sort_reversed):\n \n     @security.protected(permissions.View)\n     def queryCatalog(self, batch=True, b_start=0, b_size=30, sort_on=None):\n-        from plone.app.contenttypes.behaviors.collection import \\\n-            ICollection as ICollection_behavior\n+        from plone.app.contenttypes.behaviors.collection import (\n+            ICollection as ICollection_behavior,\n+        )\n+\n         return ICollection_behavior(self).results(\n-            batch, b_start, b_size, sort_on=sort_on)\n+            batch, b_start, b_size, sort_on=sort_on\n+        )\n \n     @security.protected(permissions.View)\n     def results(self, **kwargs):\n-        from plone.app.contenttypes.behaviors.collection import \\\n-            ICollection as ICollection_behavior\n+        from plone.app.contenttypes.behaviors.collection import (\n+            ICollection as ICollection_behavior,\n+        )\n+\n         return ICollection_behavior(self).results(**kwargs)\n \n \n @implementer(IDocument)\n class Document(Item):\n-    """Convenience subclass for ``Document`` portal type\n-    """\n+    """Convenience subclass for ``Document`` portal type"""\n+\n     security = ClassSecurityInfo()\n \n     @security.protected(permissions.View)\n     def Format(self):\n-        \'\'\' Provide a proper accessor for the format attribute\n+        """Provide a proper accessor for the format attribute\n         See https://github.com/plone/Products.CMFPlone/issues/2540\n-        \'\'\'\n-        format = self.format\n-        if six.PY2 and isinstance(format, six.text_type):\n-            format = self.format.encode()\n-        return format\n+        """\n+        return self.format\n \n \n @implementer(IFile)\n class File(Item):\n-    """Convenience subclass for ``File`` portal type\n-    """\n+    """Convenience subclass for ``File`` portal type"""\n+\n     security = ClassSecurityInfo()\n \n     @security.protected(permissions.ModifyPortalContent)\n@@ -116,41 +116,39 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n         request = REQUEST if REQUEST is not None else self.REQUEST\n         response = RESPONSE if RESPONSE is not None else request.response\n \n-        infile = request.get(\'BODYFILE\', None)\n+        infile = request.get("BODYFILE", None)\n         first_line = infile.readline()\n         infile.seek(0)\n         if not headerRE.match(safe_text(first_line)):\n             self.dav__init(request, response)\n             self.dav__simpleifhandler(request, response, refresh=1)\n \n-            filename = request[\'PATH_INFO\'].split(\'/\')[-1]\n-            self.file = NamedBlobFile(\n-                data=infile.read(), filename=six.text_type(filename))\n+            filename = request["PATH_INFO"].split("/")[-1]\n+            self.file = NamedBlobFile(data=infile.read(), filename=str(filename))\n \n             modified(self)\n             return response\n         else:\n-            return super(File, self).PUT(REQUEST=request, RESPONSE=response)\n+            return super().PUT(REQUEST=request, RESPONSE=response)\n \n     @security.protected(permissions.View)\n     def get_size(self):\n-        return getattr(self.file, \'size\', 0)\n+        return getattr(self.file, "size", 0)\n \n     @security.protected(permissions.View)\n     def content_type(self):\n-        return getattr(self.file, \'contentType\', None)\n+        return getattr(self.file, "contentType", None)\n \n \n @implementer(IFolder)\n class Folder(Container):\n-    """Convenience subclass for ``Folder`` portal type\n-    """\n+    """Convenience subclass for ``Folder`` portal type"""\n \n \n @implementer(IImage)\n class Image(Item):\n-    """Convenience subclass for ``Image`` portal type\n-    """\n+    """Convenience subclass for ``Image`` portal type"""\n+\n     security = ClassSecurityInfo()\n \n     @security.protected(permissions.ModifyPortalContent)\n@@ -159,45 +157,41 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n         request = REQUEST if REQUEST is not None else self.REQUEST\n         response = RESPONSE if RESPONSE is not None else request.response\n \n-        infile = request.get(\'BODYFILE\', None)\n+        infile = request.get("BODYFILE", None)\n         first_line = infile.readline()\n         infile.seek(0)\n         if not headerRE.match(safe_text(first_line)):\n             self.dav__init(request, response)\n             self.dav__simpleifhandler(request, response, refresh=1)\n \n-            infile = request.get(\'BODYFILE\', None)\n-            filename = request[\'PATH_INFO\'].split(\'/\')[-1]\n-            self.image = NamedBlobImage(\n-                data=infile.read(), filename=six.text_type(filename))\n+            infile = request.get("BODYFILE", None)\n+            filename = request["PATH_INFO"].split("/")[-1]\n+            self.image = NamedBlobImage(data=infile.read(), filename=str(filename))\n \n             modified(self)\n             return response\n         else:\n-            return super(Image, self).PUT(REQUEST=request, RESPONSE=response)\n+            return super().PUT(REQUEST=request, RESPONSE=response)\n \n     @security.protected(permissions.View)\n     def get_size(self):\n-        return getattr(self.image, \'size\', 0)\n+        return getattr(self.image, "size", 0)\n \n     @security.protected(permissions.View)\n     def content_type(self):\n-        return getattr(self.image, \'contentType\', None)\n+        return getattr(self.image, "contentType", None)\n \n \n @implementer(ILink)\n class Link(Item):\n-    """Convenience subclass for ``Link`` portal type\n-    """\n+    """Convenience subclass for ``Link`` portal type"""\n \n \n @implementer(INewsItem)\n class NewsItem(Item):\n-    """Convenience subclass for ``News Item`` portal type\n-    """\n+    """Convenience subclass for ``News Item`` portal type"""\n \n \n @implementer(IEvent)\n class Event(Item):\n-    """Convenience subclass for ``Event`` portal type\n-    """\n+    """Convenience subclass for ``Event`` portal type"""\ndiff --git a/plone/app/contenttypes/indexers.py b/plone/app/contenttypes/indexers.py\nindex a2ba27fb4..a4e495178 100644\n--- a/plone/app/contenttypes/indexers.py\n+++ b/plone/app/contenttypes/indexers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from logging import getLogger\n from plone.app.contenttypes.behaviors.richtext import IRichText\n@@ -11,22 +10,19 @@\n from plone.app.contenttypes.interfaces import INewsItem\n from plone.app.contenttypes.utils import replace_link_variables_by_paths\n from plone.app.textfield.value import IRichTextValue\n+from plone.base.utils import human_readable_size\n+from plone.base.utils import safe_text\n from plone.dexterity.interfaces import IDexterityContent\n from plone.indexer.decorator import indexer\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import safe_unicode\n-from Products.CMFPlone.utils import human_readable_size\n from Products.PortalTransforms.libtransforms.utils import MissingBinary\n from ZODB.POSException import ConflictError\n \n \n-import six\n-\n-\n logger = getLogger(__name__)\n \n-FALLBACK_CONTENTTYPE = \'application/octet-stream\'\n+FALLBACK_CONTENTTYPE = "application/octet-stream"\n \n \n def _unicode_save_string_concat(*args):\n@@ -34,50 +30,46 @@ def _unicode_save_string_concat(*args):\n     concats args with spaces between and returns utf-8 string, it does not\n     matter if input was text or bytes\n     """\n-    result = \'\'\n+    result = ""\n     for value in args:\n-        if six.PY2:\n-            if isinstance(value, six.text_type):\n-                value = value.encode(\'utf-8\', \'replace\')\n-            if value:\n-                result = \' \'.join((result, value))\n-        else:\n-            if isinstance(value, six.binary_type):\n-                value = safe_unicode(value)\n-            result = \' \'.join((result, value))\n+        if isinstance(value, bytes):\n+            value = safe_text(value)\n+        result = " ".join((result, value))\n     return result\n \n \n def SearchableText(obj):\n-    text = u\'\'\n+    text = ""\n     richtext = IRichText(obj, None)\n     if richtext:\n         textvalue = richtext.text\n         if IRichTextValue.providedBy(textvalue):\n-            transforms = getToolByName(obj, \'portal_transforms\')\n+            transforms = getToolByName(obj, "portal_transforms")\n             # Before you think about switching raw/output\n             # or mimeType/outputMimeType, first read\n             # https://github.com/plone/Products.CMFPlone/issues/2066\n-            raw = safe_unicode(textvalue.raw)\n-            if six.PY2:\n-                raw = raw.encode(\'utf-8\', \'replace\')\n-            text = transforms.convertTo(\n-                \'text/plain\',\n-                raw,\n-                mimetype=textvalue.mimeType,\n-            ).getData().strip()\n-\n-    subject = u\' \'.join(\n-        [safe_unicode(s) for s in obj.Subject()]\n-    )\n+            raw = safe_text(textvalue.raw)\n+            text = (\n+                transforms.convertTo(\n+                    "text/plain",\n+                    raw,\n+                    mimetype=textvalue.mimeType,\n+                )\n+                .getData()\n+                .strip()\n+            )\n+\n+    subject = " ".join([safe_text(s) for s in obj.Subject()])\n \n-    return u\' \'.join((\n-        safe_unicode(obj.id),\n-        safe_unicode(obj.title) or u\'\',\n-        safe_unicode(obj.description) or u\'\',\n-        safe_unicode(text),\n-        safe_unicode(subject),\n-    ))\n+    return " ".join(\n+        (\n+            safe_text(obj.id),\n+            safe_text(obj.title) or "",\n+            safe_text(obj.description) or "",\n+            safe_text(text),\n+            safe_text(subject),\n+        )\n+    )\n \n \n @indexer(INewsItem)\n@@ -101,31 +93,28 @@ def SearchableText_file(obj):\n         primary_field = IPrimaryFieldInfo(obj)\n     except TypeError:\n         logger.warn(\n-            u\'Lookup of PrimaryField failed for {0} \'\n-            u\'If renaming or importing please reindex!\'.format(\n-                obj.absolute_url()\n-            )\n+            "Lookup of PrimaryField failed for {} "\n+            "If renaming or importing please reindex!".format(obj.absolute_url())\n         )\n         return\n     if primary_field.value is None:\n         return SearchableText(obj)\n     mimetype = primary_field.value.contentType\n-    transforms = getToolByName(obj, \'portal_transforms\')\n-    if transforms._findPath(mimetype, \'text/plain\') is None:\n+    transforms = getToolByName(obj, "portal_transforms")\n+    if transforms._findPath(mimetype, "text/plain") is None:\n         # check if there is a valid transform available first\n         return SearchableText(obj)\n     value = primary_field.value.data\n-    if six.PY2:\n-        value = str(value)\n     filename = primary_field.value.filename\n     try:\n-        transformed_value = transforms.convertTo(\'text/plain\', value,\n-                                                 mimetype=mimetype,\n-                                                 filename=filename)\n+        transformed_value = transforms.convertTo(\n+            "text/plain", value, mimetype=mimetype, filename=filename\n+        )\n         if not transformed_value:\n             return SearchableText(obj)\n-        return _unicode_save_string_concat(SearchableText(obj),\n-                                           transformed_value.getData())\n+        return _unicode_save_string_concat(\n+            SearchableText(obj), transformed_value.getData()\n+        )\n     except MissingBinary:\n         return SearchableText(obj)\n     except (ConflictError, KeyboardInterrupt):\n@@ -133,7 +122,7 @@ def SearchableText_file(obj):\n     except Exception as msg:\n         logger.exception(\n             \'exception while trying to convert blob contents to "text/plain" \'\n-            \'for {0}. Error: {1}\'.format(obj, str(msg)),\n+            "for {}. Error: {}".format(obj, str(msg)),\n         )\n         return SearchableText(obj)\n \n@@ -162,8 +151,8 @@ def getObjSize_image(obj):\n         primary_field_info = IPrimaryFieldInfo(obj)\n     except TypeError:\n         logger.warn(\n-            u\'Lookup of PrimaryField failed for {0} If renaming or importing \'\n-            u\'please reindex!\'.format(obj.absolute_url())\n+            "Lookup of PrimaryField failed for {} If renaming or importing "\n+            "please reindex!".format(obj.absolute_url())\n         )\n         return\n     return human_readable_size(primary_field_info.value.size)\n@@ -175,8 +164,8 @@ def getObjSize_file(obj):\n         primary_field_info = IPrimaryFieldInfo(obj)\n     except TypeError:\n         logger.warn(\n-            u\'Lookup of PrimaryField failed for {0} If renaming or importing \'\n-            u\'please reindex!\'.format(obj.absolute_url())\n+            "Lookup of PrimaryField failed for {} If renaming or importing "\n+            "please reindex!".format(obj.absolute_url())\n         )\n         return\n     return human_readable_size(primary_field_info.value.size)\ndiff --git a/plone/app/contenttypes/interfaces.py b/plone/app/contenttypes/interfaces.py\nindex 73908f8b6..03021935b 100644\n--- a/plone/app/contenttypes/interfaces.py\n+++ b/plone/app/contenttypes/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \n@@ -13,40 +12,32 @@ class IPloneAppContenttypesLayer(Interface):\n \n \n class ICollection(Interface):\n-    """Explicit marker interface for Collection\n-    """\n+    """Explicit marker interface for Collection"""\n \n \n class IDocument(Interface):\n-    """Explicit marker interface for Document\n-    """\n+    """Explicit marker interface for Document"""\n \n \n class IFile(Interface):\n-    """Explicit marker interface for File\n-    """\n+    """Explicit marker interface for File"""\n \n \n class IFolder(Interface):\n-    """Explicit marker interface for Folder\n-    """\n+    """Explicit marker interface for Folder"""\n \n \n class IImage(Interface):\n-    """Explicit marker interface for Image\n-    """\n+    """Explicit marker interface for Image"""\n \n \n class ILink(Interface):\n-    """Explicit marker interface for Link\n-    """\n+    """Explicit marker interface for Link"""\n \n \n class INewsItem(Interface):\n-    """Explicit marker interface for News Item\n-    """\n+    """Explicit marker interface for News Item"""\n \n \n class IEvent(Interface):\n-    """Explicit marker interface for Event\n-    """\n+    """Explicit marker interface for Event"""\ndiff --git a/plone/app/contenttypes/permissions.py b/plone/app/contenttypes/permissions.py\nindex cacfbba0d..ac366c494 100644\n--- a/plone/app/contenttypes/permissions.py\n+++ b/plone/app/contenttypes/permissions.py\n@@ -1,25 +1,25 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.Permission import addPermission\n from AccessControl.SecurityInfo import ModuleSecurityInfo\n from plone.app.contenttypes.utils import DEFAULT_TYPES\n \n-security = ModuleSecurityInfo(\'plone.app.contenttypes\')\n \n-TYPE_ROLES = (\'Manager\', \'Site Administrator\', \'Owner\', \'Contributor\')\n+security = ModuleSecurityInfo("plone.app.contenttypes")\n+\n+TYPE_ROLES = ("Manager", "Site Administrator", "Owner", "Contributor")\n \n perms = []\n \n for typename in DEFAULT_TYPES:\n-    permid = \'Add\' + typename\n-    permname = \'plone.app.contenttypes: Add \' + typename\n+    permid = "Add" + typename\n+    permname = "plone.app.contenttypes: Add " + typename\n     security.declarePublic(permid)\n     addPermission(permname, default_roles=TYPE_ROLES)\n \n-AddCollection = \'plone.app.contenttypes: Add Collection\'\n-AddDocument = \'plone.app.contenttypes: Add Document\'\n-AddEvent = \'plone.app.contenttypes: Add Event\'\n-AddFile = \'plone.app.contenttypes: Add File\'\n-AddFolder = \'plone.app.contenttypes: Add Folder\'\n-AddImage = \'plone.app.contenttypes: Add Image\'\n-AddLink = \'plone.app.contenttypes: Add Link\'\n-AddNewsItem = \'plone.app.contenttypes: Add News Item\'\n+AddCollection = "plone.app.contenttypes: Add Collection"\n+AddDocument = "plone.app.contenttypes: Add Document"\n+AddEvent = "plone.app.contenttypes: Add Event"\n+AddFile = "plone.app.contenttypes: Add File"\n+AddFolder = "plone.app.contenttypes: Add Folder"\n+AddImage = "plone.app.contenttypes: Add Image"\n+AddLink = "plone.app.contenttypes: Add Link"\n+AddNewsItem = "plone.app.contenttypes: Add News Item"\ndiff --git a/plone/app/contenttypes/schema/__init__.py b/plone/app/contenttypes/schema/__init__.py\nindex 40a96afc6..e69de29bb 100644\n--- a/plone/app/contenttypes/schema/__init__.py\n+++ b/plone/app/contenttypes/schema/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/contenttypes/setuphandlers.py b/plone/app/contenttypes/setuphandlers.py\nindex e8023156a..5697a2249 100644\n--- a/plone/app/contenttypes/setuphandlers.py\n+++ b/plone/app/contenttypes/setuphandlers.py\n@@ -1,9 +1,11 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from plone.app.dexterity.behaviors import constrains\n from plone.app.textfield.value import RichTextValue\n+from plone.base.interfaces import INonInstallable\n+from plone.base.interfaces.constrains import ISelectableConstrainTypes\n+from plone.base.utils import unrestricted_construct_instance\n from plone.dexterity.fti import IDexterityFTI\n from plone.dexterity.utils import createContent\n from plone.i18n.normalizer.interfaces import IURLNormalizer\n@@ -11,10 +13,6 @@\n from plone.portlets.interfaces import IPortletManager\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import INonInstallable\n-from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n-from Products.CMFPlone.utils import _createObjectByType\n-from Products.CMFPlone.utils import bodyfinder\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.component import queryMultiAdapter\n@@ -28,35 +26,35 @@\n \n \n @implementer(INonInstallable)\n-class HiddenProfiles(object):\n-\n+class HiddenProfiles:\n     def getNonInstallableProfiles(self):\n         """\n         Prevents all profiles but \'plone-content\' from showing up in the\n         profile list when creating a Plone site.\n         """\n         return [\n-            u\'plone.app.contenttypes:default\',\n+            "plone.app.contenttypes:default",\n         ]\n \n \n def _publish(content):\n     """Publish the object if it hasn\'t been published."""\n-    portal_workflow = getToolByName(getSite(), \'portal_workflow\')\n-    if portal_workflow.getInfoFor(content, \'review_state\') != \'published\':\n-        portal_workflow.doActionFor(content, \'publish\')\n+    portal_workflow = getToolByName(getSite(), "portal_workflow")\n+    if portal_workflow.getInfoFor(content, "review_state") != "published":\n+        portal_workflow.doActionFor(content, "publish")\n         return True\n     return False\n \n \n-def _translate(name, target_language, default=u\'\'):\n+def _translate(name, target_language, default=""):\n     """Simple function to translate a string."""\n     result = None\n-    if target_language != \'en\':\n-        util = queryUtility(ITranslationDomain, \'plonefrontpage\')\n+    if target_language != "en":\n+        util = queryUtility(ITranslationDomain, "plonefrontpage")\n         if util is not None:\n-            result = util.translate(name, target_language=target_language,\n-                                    default=default)\n+            result = util.translate(\n+                name, target_language=target_language, default=default\n+            )\n     return result and result or default\n \n \n@@ -64,8 +62,8 @@ def addContentToContainer(container, object, checkConstraints=True):\n     """Copy of plone.dexterity.util.addContentToContainer.\n     Modified to check the existing Id on the object before paving over it.\n     """\n-    if not hasattr(aq_base(object), \'portal_type\'):\n-        raise ValueError(\'object must have its portal_type set\')\n+    if not hasattr(aq_base(object), "portal_type"):\n+        raise ValueError("object must have its portal_type set")\n \n     container = aq_inner(container)\n     if checkConstraints:\n@@ -73,16 +71,15 @@ def addContentToContainer(container, object, checkConstraints=True):\n \n         fti = getUtility(IDexterityFTI, name=object.portal_type)\n         if not fti.isConstructionAllowed(container):\n-            raise Unauthorized(\'Cannot create {0}\'.format(object.portal_type))\n+            raise Unauthorized(f"Cannot create {object.portal_type}")\n \n-        if container_fti is not None and \\\n-                not container_fti.allowType(object.portal_type):\n-            raise ValueError(\n-                \'Disallowed subobject type: {0}\'.format(object.portal_type)\n-            )\n+        if container_fti is not None and not container_fti.allowType(\n+            object.portal_type\n+        ):\n+            raise ValueError(f"Disallowed subobject type: {object.portal_type}")\n \n     chooser = INameChooser(container)\n-    if hasattr(object, \'id\') and chooser.checkName(object.id, object):\n+    if hasattr(object, "id") and chooser.checkName(object.id, object):\n         name = object.id\n     else:\n         name = INameChooser(container).chooseName(None, object)\n@@ -94,29 +91,29 @@ def addContentToContainer(container, object, checkConstraints=True):\n \n def _get_locales_info(portal):\n     reg = queryUtility(IRegistry, context=portal)\n-    language = reg[\'plone.default_language\']\n-    parts = (language.split(\'-\') + [None, None])[:3]\n+    language = reg["plone.default_language"]\n+    parts = (language.split("-") + [None, None])[:3]\n \n     try:\n         locale = locales.getLocale(*parts)\n \n         # If we get a territory, we enable the combined language codes\n         if locale.id.territory:\n-            return locale.id.language + \'_\' + locale.id.territory, True, locale\n+            return locale.id.language + "_" + locale.id.territory, True, locale\n         return locale.id.language, False, locale\n     except LoadLocaleError:\n         # default to *some* language so we don\'t error out\n-        return language, False, locales.getLocale(\'en\')\n+        return language, False, locales.getLocale("en")\n \n \n def _setup_calendar(portal, locale):\n     """Set the calendar\'s date system to reflect the default locale"""\n-    gregorian_calendar = locale.dates.calendars.get(u\'gregorian\', None)\n-    portal_calendar = getToolByName(portal, \'portal_calendar\', None)\n+    gregorian_calendar = locale.dates.calendars.get("gregorian", None)\n+    portal_calendar = getToolByName(portal, "portal_calendar", None)\n     if portal_calendar is not None:\n         first = 6\n         if gregorian_calendar is not None:\n-            first = gregorian_calendar.week.get(\'firstDay\', None)\n+            first = gregorian_calendar.week.get("firstDay", None)\n             # on the locale object we have: mon : 1 ... sun : 7\n             # on the calendar tool we have: mon : 0 ... sun : 6\n             if first is not None:\n@@ -125,7 +122,7 @@ def _setup_calendar(portal, locale):\n \n \n def _setup_visible_ids(portal, target_language, locale):\n-    portal_properties = getToolByName(portal, \'portal_properties\')\n+    portal_properties = getToolByName(portal, "portal_properties")\n     site_properties = portal_properties.site_properties\n \n     # See if we have a URL normalizer\n@@ -135,7 +132,7 @@ def _setup_visible_ids(portal, target_language, locale):\n \n     # If we get a script other than Latn we enable visible_ids\n     if locale.id.script is not None:\n-        if locale.id.script.lower() != \'latn\':\n+        if locale.id.script.lower() != "latn":\n             site_properties.visible_ids = True\n \n     # If we have a normalizer it is safe to disable the visible ids\n@@ -150,166 +147,191 @@ def _setup_constrains(container, allowed_types):\n     return True\n \n \n+def _bodyfinder(text):\n+    """Return body or unchanged text if no body tags found.\n+\n+    Always use html_headcheck() first.\n+    """\n+    lowertext = text.lower()\n+    bodystart = lowertext.find("<body")\n+    if bodystart == -1:\n+        return text\n+    bodystart = lowertext.find(">", bodystart) + 1\n+    if bodystart == 0:\n+        return text\n+    bodyend = lowertext.rfind("</body>", bodystart)\n+    if bodyend == -1:\n+        return text\n+    return text[bodystart:bodyend]\n+\n+\n def create_frontpage(portal, target_language):\n     if portal.text:\n         # Do not overwrite existing content\n         return\n-    portal.title = _translate(\n-        u\'front-title\',\n-        target_language,\n-        u\'Welcome to Plone\'\n-    )\n+    portal.title = _translate("front-title", target_language, "Welcome to Plone")\n     portal.description = _translate(\n-        u\'front-description\', target_language,\n-        u\'Congratulations! You have successfully installed Plone.\'\n+        "front-description",\n+        target_language,\n+        "Congratulations! You have successfully installed Plone.",\n     )\n     front_text = None\n-    if target_language != \'en\':\n-        util = queryUtility(ITranslationDomain, \'plonefrontpage\')\n+    if target_language != "en":\n+        util = queryUtility(ITranslationDomain, "plonefrontpage")\n         if util is not None:\n             translated_text = util.translate(\n-                u\'front-text\',\n-                target_language=target_language\n+                "front-text", target_language=target_language\n             )\n-            if translated_text != u\'front-text\':\n+            if translated_text != "front-text":\n                 front_text = translated_text\n-    request = getattr(portal, \'REQUEST\', None)\n+    request = getattr(portal, "REQUEST", None)\n     if front_text is None and request is not None:\n-        view = queryMultiAdapter(\n-            (portal, request),\n-            name=\'plone-frontpage-setup\'\n-        )\n+        view = queryMultiAdapter((portal, request), name="plone-frontpage-setup")\n         if view is not None:\n-            front_text = bodyfinder(view.index()).strip()\n-    portal.text = RichTextValue(\n-        front_text,\n-        \'text/html\',\n-        \'text/x-html-safe\'\n-    )\n+            front_text = _bodyfinder(view.index()).strip()\n+    portal.text = RichTextValue(front_text, "text/html", "text/x-html-safe")\n     portal.reindexObject()\n \n \n def create_news_topic(portal, target_language):\n-    news_id = \'news\'\n+    news_id = "news"\n \n     if news_id not in portal.keys():\n-        title = _translate(u\'news-title\', target_language, u\'News\')\n-        description = _translate(u\'news-description\', target_language,\n-                                 u\'Site News\')\n+        title = _translate("news-title", target_language, "News")\n+        description = _translate("news-description", target_language, "Site News")\n         container = createContent(\n-            \'Folder\', id=news_id,\n+            "Folder",\n+            id=news_id,\n             title=title,\n             description=description,\n-            language=target_language.replace(\'_\', \'-\').lower())\n+            language=target_language.replace("_", "-").lower(),\n+        )\n         container = addContentToContainer(portal, container)\n-        _createObjectByType(\'Collection\', container,\n-                            id=\'aggregator\', title=title,\n-                            description=description)\n-        aggregator = container[\'aggregator\']\n+        unrestricted_construct_instance(\n+            "Collection",\n+            container,\n+            id="aggregator",\n+            title=title,\n+            description=description,\n+        )\n+        aggregator = container["aggregator"]\n \n         # Constrain types\n-        allowed_types = [\'News Item\', ]\n+        allowed_types = [\n+            "News Item",\n+        ]\n         _setup_constrains(container, allowed_types)\n \n-        container.setOrdering(\'unordered\')\n-        container.setDefaultPage(\'aggregator\')\n+        container.setOrdering("unordered")\n+        container.setDefaultPage("aggregator")\n         _publish(container)\n \n         # Set the Collection criteria.\n         #: Sort on the Effective date\n-        aggregator.sort_on = u\'effective\'\n+        aggregator.sort_on = "effective"\n         aggregator.sort_reversed = True\n         #: Query by Type and Review State\n         aggregator.query = [\n-            {\'i\': u\'portal_type\',\n-             \'o\': u\'plone.app.querystring.operation.selection.any\',\n-             \'v\': [u\'News Item\'],\n-             },\n-            {\'i\': u\'review_state\',\n-             \'o\': u\'plone.app.querystring.operation.selection.any\',\n-             \'v\': [u\'published\'],\n-             },\n+            {\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.selection.any",\n+                "v": ["News Item"],\n+            },\n+            {\n+                "i": "review_state",\n+                "o": "plone.app.querystring.operation.selection.any",\n+                "v": ["published"],\n+            },\n         ]\n-        aggregator.setLayout(\'summary_view\')\n+        aggregator.setLayout("summary_view")\n \n         _publish(aggregator)\n \n \n def create_events_topic(portal, target_language):\n-    events_id = \'events\'\n+    events_id = "events"\n \n     if events_id not in portal.keys():\n-        title = _translate(u\'events-title\', target_language, u\'Events\')\n-        description = _translate(u\'events-description\', target_language,\n-                                 u\'Site Events\')\n+        title = _translate("events-title", target_language, "Events")\n+        description = _translate("events-description", target_language, "Site Events")\n         container = createContent(\n-            \'Folder\', id=events_id,\n+            "Folder",\n+            id=events_id,\n             title=title,\n             description=description,\n-            language=target_language.replace(\'_\', \'-\').lower())\n+            language=target_language.replace("_", "-").lower(),\n+        )\n         container = addContentToContainer(portal, container)\n-        _createObjectByType(\'Collection\', container,\n-                            id=\'aggregator\', title=title,\n-                            description=description)\n-        aggregator = container[\'aggregator\']\n+        unrestricted_construct_instance(\n+            "Collection",\n+            container,\n+            id="aggregator",\n+            title=title,\n+            description=description,\n+        )\n+        aggregator = container["aggregator"]\n \n         # Constain types\n-        allowed_types = [\'Event\', ]\n+        allowed_types = [\n+            "Event",\n+        ]\n \n         _setup_constrains(container, allowed_types)\n \n-        container.setOrdering(\'unordered\')\n-        container.setDefaultPage(\'aggregator\')\n+        container.setOrdering("unordered")\n+        container.setDefaultPage("aggregator")\n         _publish(container)\n \n         # Set the Collection criteria.\n         #: Sort on the Event start date\n-        aggregator.sort_on = u\'start\'\n+        aggregator.sort_on = "start"\n         aggregator.sort_reversed = True\n         #: Query by Type and Review State\n         aggregator.query = [\n-            {\'i\': \'portal_type\',\n-             \'o\': \'plone.app.querystring.operation.selection.any\',\n-             \'v\': [\'Event\']\n-             },\n-            {\'i\': \'review_state\',\n-             \'o\': \'plone.app.querystring.operation.selection.any\',\n-             \'v\': [\'published\']\n-             },\n+            {\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.selection.any",\n+                "v": ["Event"],\n+            },\n+            {\n+                "i": "review_state",\n+                "o": "plone.app.querystring.operation.selection.any",\n+                "v": ["published"],\n+            },\n         ]\n-        aggregator.setLayout(\'event_listing\')\n+        aggregator.setLayout("event_listing")\n         _publish(aggregator)\n \n \n def configure_members_folder(portal, target_language):\n-    members_id = \'Members\'\n+    members_id = "Members"\n \n     if members_id not in portal.keys():\n-        title = _translate(u\'members-title\', target_language, u\'Users\')\n-        description = _translate(u\'members-description\', target_language,\n-                                 u\'Site Users\')\n+        title = _translate("members-title", target_language, "Users")\n+        description = _translate("members-description", target_language, "Site Users")\n         container = createContent(\n-            \'Folder\', id=members_id,\n+            "Folder",\n+            id=members_id,\n             title=title,\n             description=description,\n-            language=target_language.replace(\'_\', \'-\').lower())\n+            language=target_language.replace("_", "-").lower(),\n+        )\n         container = addContentToContainer(portal, container)\n-        container.setOrdering(\'unordered\')\n+        container.setOrdering("unordered")\n         container.reindexObject()\n \n         # set member search as default layout to Members Area\n-        container.setLayout(\'@@member-search\')\n+        container.setLayout("@@member-search")\n \n         # Block all right column portlets by default\n-        manager = queryUtility(IPortletManager, name=\'plone.rightcolumn\')\n+        manager = queryUtility(IPortletManager, name="plone.rightcolumn")\n         if manager is not None:\n             assignable = getMultiAdapter(\n-                (container, manager),\n-                ILocalPortletAssignmentManager\n+                (container, manager), ILocalPortletAssignmentManager\n             )\n-            assignable.setBlacklistStatus(\'context\', True)\n-            assignable.setBlacklistStatus(\'group\', True)\n-            assignable.setBlacklistStatus(\'content_type\', True)\n+            assignable.setBlacklistStatus("context", True)\n+            assignable.setBlacklistStatus("group", True)\n+            assignable.setBlacklistStatus("content_type", True)\n \n \n def import_content(context):\ndiff --git a/plone/app/contenttypes/subscribers.py b/plone/app/contenttypes/subscribers.py\nindex d233cb308..42958729f 100644\n--- a/plone/app/contenttypes/subscribers.py\n+++ b/plone/app/contenttypes/subscribers.py\n@@ -1,13 +1,12 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IImage\n \n \n def set_title_description(obj, event):\n-    \'\'\' Sets title to filename if no title\n-        was provided.\n-        Also sets an empty unicode as description if\n-        no description was provided.\n-    \'\'\'\n+    """Sets title to filename if no title\n+    was provided.\n+    Also sets an empty unicode as description if\n+    no description was provided.\n+    """\n     title = obj.title\n     if not title:\n         if IImage.providedBy(obj):\n@@ -20,4 +19,4 @@ def set_title_description(obj, event):\n \n     description = obj.description\n     if not description:\n-        obj.description = u\'\'\n+        obj.description = ""\ndiff --git a/plone/app/contenttypes/testing.py b/plone/app/contenttypes/testing.py\nindex 50545bdf6..3444331fb 100644\n--- a/plone/app/contenttypes/testing.py\n+++ b/plone/app/contenttypes/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n from plone.app.contenttypes.tests.robot.variables import TEST_FOLDER_ID\n from plone.app.event.testing import PAEvent_FIXTURE\n@@ -25,52 +24,51 @@ def set_browserlayer(request):\n \n class PloneAppContenttypes(PloneSandboxLayer):\n \n-    defaultBases = (PAEvent_FIXTURE, PLONE_FIXTURE,)\n+    defaultBases = (\n+        PAEvent_FIXTURE,\n+        PLONE_FIXTURE,\n+    )\n \n     def setUpZope(self, app, configurationContext):\n         import plone.app.contenttypes\n+\n         self.loadZCML(package=plone.app.contenttypes)\n         import plone.app.event.dx\n+\n         self.loadZCML(package=plone.app.event.dx)\n \n     def setUpPloneSite(self, portal):\n-        portal.portal_workflow.setDefaultChain(\'simple_publication_workflow\')\n+        portal.portal_workflow.setDefaultChain("simple_publication_workflow")\n \n \n class PloneAppContenttypesRobot(PloneAppContenttypes):\n-    """Same as the default but with a added folder \'robot-test-folder\'.\n-    """\n+    """Same as the default but with a added folder \'robot-test-folder\'."""\n \n-    defaultBases = (\n-        PAEvent_FIXTURE, REMOTE_LIBRARY_BUNDLE_FIXTURE)\n+    defaultBases = (PAEvent_FIXTURE, REMOTE_LIBRARY_BUNDLE_FIXTURE)\n \n     def setUpPloneSite(self, portal):\n         portal.acl_users.userFolderAddUser(\n-            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, [\'Manager\'], [])\n+            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ["Manager"], []\n+        )\n         login(portal, SITE_OWNER_NAME)\n-        super(PloneAppContenttypesRobot, self).setUpPloneSite(portal)\n-        portal.invokeFactory(\'Folder\', id=TEST_FOLDER_ID, title=u\'Test Folder\')\n+        super().setUpPloneSite(portal)\n+        portal.invokeFactory("Folder", id=TEST_FOLDER_ID, title="Test Folder")\n \n     def tearDownPloneSite(self, portal):\n-        login(portal, \'admin\')\n+        login(portal, "admin")\n         portal.manage_delObjects([TEST_FOLDER_ID])\n-        super(PloneAppContenttypesRobot, self).tearDownPloneSite(portal)\n+        super().tearDownPloneSite(portal)\n \n \n PLONE_APP_CONTENTTYPES_FIXTURE = PloneAppContenttypes()\n PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_CONTENTTYPES_FIXTURE,),\n-    name=\'PloneAppContenttypes:Integration\'\n+    bases=(PLONE_APP_CONTENTTYPES_FIXTURE,), name="PloneAppContenttypes:Integration"\n )\n PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_APP_CONTENTTYPES_FIXTURE,),\n-    name=\'PloneAppContenttypes:Functional\'\n+    bases=(PLONE_APP_CONTENTTYPES_FIXTURE,), name="PloneAppContenttypes:Functional"\n )\n PLONE_APP_CONTENTTYPES_ROBOT_FIXTURE = PloneAppContenttypesRobot()\n PLONE_APP_CONTENTTYPES_ROBOT_TESTING = FunctionalTesting(\n-    bases=(\n-        PLONE_APP_CONTENTTYPES_ROBOT_FIXTURE,\n-        zope.WSGI_SERVER_FIXTURE\n-    ),\n-    name=\'PloneAppContenttypes:Robot\'\n+    bases=(PLONE_APP_CONTENTTYPES_ROBOT_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n+    name="PloneAppContenttypes:Robot",\n )\ndiff --git a/plone/app/contenttypes/tests/oldtypes.py b/plone/app/contenttypes/tests/oldtypes.py\nindex c56228f6f..ceb46d376 100644\n--- a/plone/app/contenttypes/tests/oldtypes.py\n+++ b/plone/app/contenttypes/tests/oldtypes.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IEvent\n from plone.dexterity.content import Item\n from plone.dexterity.fti import DexterityFTI\n@@ -7,37 +6,36 @@\n \n @implementer(IEvent)\n class Event(Item):\n-    """Dummy subclass for old ``Event`` portal type\n-    """\n+    """Dummy subclass for old ``Event`` portal type"""\n \n \n def create1_0EventType(portal):\n     """Recreate the old event type used in the 1.0 branch"""\n-    fti = DexterityFTI(\'Event\')\n-    fti.title = \'Event\'\n-    fti.description = \'Events can be shown in calendars.\'\n-    fti.factory = \'Event\'\n-    fti.add_view_expr = \'string:${folder_url}/++add++Event\'\n-    fti.link_target = \'\'\n-    fti.link_target = \'\'\n-    fti.immediate_view = \'view\'\n+    fti = DexterityFTI("Event")\n+    fti.title = "Event"\n+    fti.description = "Events can be shown in calendars."\n+    fti.factory = "Event"\n+    fti.add_view_expr = "string:${folder_url}/++add++Event"\n+    fti.link_target = ""\n+    fti.link_target = ""\n+    fti.immediate_view = "view"\n     fti.global_allow = True\n     fti.filter_content_types = True\n     fti.allowed_content_types = []\n     fti.allow_discussion = False\n-    fti.default_view = \'event_view\'\n-    fti.view_methods = (\'event_view\', )\n+    fti.default_view = "event_view"\n+    fti.view_methods = ("event_view",)\n     fti.default_view_fallback = False\n-    fti.add_permission = \'plone.app.contenttypes.addEvent\'\n-    fti.klass = \'plone.app.contenttypes.tests.oldtypes.Event\'\n+    fti.add_permission = "plone.app.contenttypes.addEvent"\n+    fti.klass = "plone.app.contenttypes.tests.oldtypes.Event"\n     fti.behaviors = (\n-        \'plone.app.contenttypes.interfaces.IEvent\',\n-        \'plone.app.dexterity.behaviors.metadata.IDublinCore\',\n-        \'plone.app.content.interfaces.INameFromTitle\',\n-        \'plone.app.dexterity.behaviors.discussion.IAllowDiscussion\',\n-        \'plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation\',\n-        \'plone.app.relationfield.behavior.IRelatedItems\',\n-        \'plone.app.versioningbehavior.behaviors.IVersionable\',\n+        "plone.app.contenttypes.interfaces.IEvent",\n+        "plone.app.dexterity.behaviors.metadata.IDublinCore",\n+        "plone.app.content.interfaces.INameFromTitle",\n+        "plone.app.dexterity.behaviors.discussion.IAllowDiscussion",\n+        "plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation",\n+        "plone.app.relationfield.behavior.IRelatedItems",\n+        "plone.app.versioningbehavior.behaviors.IVersionable",\n     )\n     fti.schema = None\n     fti.model_source = """\n@@ -100,7 +98,7 @@ def create1_0EventType(portal):\n </model>"""\n     fti.model_file = None  # Was plone.app.contenttypes.schema:event.xml\n \n-    if \'Event\' in portal.portal_types:\n-        del portal.portal_types[\'Event\']\n-    portal.portal_types._setObject(\'Event\', fti)\n+    if "Event" in portal.portal_types:\n+        del portal.portal_types["Event"]\n+    portal.portal_types._setObject("Event", fti)\n     return fti\ndiff --git a/plone/app/contenttypes/tests/robot/variables.py b/plone/app/contenttypes/tests/robot/variables.py\nindex e1e7a4f0e..e7017c130 100644\n--- a/plone/app/contenttypes/tests/robot/variables.py\n+++ b/plone/app/contenttypes/tests/robot/variables.py\n@@ -1,8 +1,10 @@\n-# -*- coding: utf-8 -*-\n from pkg_resources import resource_filename\n \n \n-TEST_FOLDER_ID = \'robot-test-folder\'\n-PLONE_PATH = \'/plone\'\n-COLLECTION_TEST_QUERY = \'[{"i": "path", "o": "plone.app.querystring.operation.string.path", "v": "%s/%s"}]\' % (PLONE_PATH, TEST_FOLDER_ID)  # noqa\n-PATH_TO_TEST_FILES = resource_filename(\'plone.app.contenttypes.tests\', \'\')\n+TEST_FOLDER_ID = "robot-test-folder"\n+PLONE_PATH = "/plone"\n+COLLECTION_TEST_QUERY = (\n+    \'[{"i": "path", "o": "plone.app.querystring.operation.string.path", "v": "%s/%s"}]\'\n+    % (PLONE_PATH, TEST_FOLDER_ID)\n+)  # noqa\n+PATH_TO_TEST_FILES = resource_filename("plone.app.contenttypes.tests", "")\ndiff --git a/plone/app/contenttypes/tests/test_behaviors_collection.py b/plone/app/contenttypes/tests/test_behaviors_collection.py\nindex a6aa9b926..dacd057a2 100644\n--- a/plone/app/contenttypes/tests/test_behaviors_collection.py\n+++ b/plone/app/contenttypes/tests/test_behaviors_collection.py\n@@ -1,6 +1,7 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n+from plone.app.contenttypes.testing import (  # noqa\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -13,11 +14,13 @@\n import unittest\n \n \n-query = [{\n-    \'i\': \'Title\',\n-    \'o\': \'plone.app.querystring.operation.string.contains\',\n-    \'v\': \'Collection Test Page\',\n-}]\n+query = [\n+    {\n+        "i": "Title",\n+        "o": "plone.app.querystring.operation.string.contains",\n+        "v": "Collection Test Page",\n+    }\n+]\n \n \n class CollectionBehaviorFunctionalTest(unittest.TestCase):\n@@ -25,75 +28,79 @@ class CollectionBehaviorFunctionalTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        fti = DexterityFTI(\'collectioncontainer\')\n-        self.portal.portal_types._setObject(\'collectioncontainer\', fti)\n-        fti.klass = \'plone.dexterity.content.Container\'\n-        fti.behaviors = (\n-            \'plone.app.contenttypes.behaviors.collection.ICollection\',\n-        )\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        fti = DexterityFTI("collectioncontainer")\n+        self.portal.portal_types._setObject("collectioncontainer", fti)\n+        fti.klass = "plone.dexterity.content.Container"\n+        fti.behaviors = ("plone.app.contenttypes.behaviors.collection.ICollection",)\n         self.fti = fti\n         alsoProvides(self.portal.REQUEST, IPloneAppContenttypesLayer)\n         alsoProvides(self.request, IPloneAppContenttypesLayer)\n         from plone.app.contenttypes.behaviors.collection import ICollection\n+\n         alsoProvides(self.request, ICollection)\n         self.portal.invokeFactory(\n-            \'collectioncontainer\',\n-            id=\'collectioncontainer\',\n-            title=u\'Container with a collection\',\n-            customViewFields=[\'Title\', \'portal_type\'],\n+            "collectioncontainer",\n+            id="collectioncontainer",\n+            title="Container with a collection",\n+            customViewFields=["Title", "portal_type"],\n             query=query,\n         )\n         self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc\',\n-            title=u\'Collection Test Page\',\n+            "Document",\n+            id="doc",\n+            title="Collection Test Page",\n         )\n \n     def _get_browser(self):\n         # Need to commit transaction, otherwise the browser does not\n         # see anything.\n         import transaction\n+\n         transaction.commit()\n         # Set up browser\n-        app = self.layer[\'app\']\n+        app = self.layer["app"]\n         browser = Browser(app)\n         browser.handleErrors = False\n         browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {}:{}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n         return browser\n \n     def test_collection_default_dexterity_view(self):\n         # Test the default dexterity view\n         browser = self._get_browser()\n-        browser.open(self.portal_url + \'/collectioncontainer/view\')\n+        browser.open(self.portal_url + "/collectioncontainer/view")\n         self.assertTrue(\'"v": "Collection Test Page"\' in browser.contents)\n \n     def test_collection_tabular_view(self):\n         browser = self._get_browser()\n-        browser.open(self.portal_url + \'/collectioncontainer/tabular_view\')\n+        browser.open(self.portal_url + "/collectioncontainer/tabular_view")\n         # search from here:\n-        start = browser.contents.find(\'content-core\')\n+        start = browser.contents.find("content-core")\n         # The test string should be within the search results.\n-        self.assertTrue(\'Collection Test Page\' in\n-                        browser.contents[start:start + 2000])\n+        self.assertTrue(\n+            "Collection Test Page" in browser.contents[start : start + 2000]\n+        )\n \n     def test_collection_in_edit_form(self):\n         browser = self._get_browser()\n-        browser.open(self.portal_url + \'/collectioncontainer/edit\')\n-        control = browser.getControl(name=\'form.widgets.ICollection.query\')\n-        self.assertTrue(json.loads(control.value)[0][\'v\'],\n-                        \'Collection Test Page\')\n+        browser.open(self.portal_url + "/collectioncontainer/edit")\n+        control = browser.getControl(name="form.widgets.ICollection.query")\n+        self.assertTrue(json.loads(control.value)[0]["v"], "Collection Test Page")\n         # The customViewFields field is a \'double\' control, with a\n         # \'from\' and \'to\' list.\n         from_control = browser.getControl(\n-            name=\'form.widgets.ICollection.customViewFields.from\')\n+            name="form.widgets.ICollection.customViewFields.from"\n+        )\n         self.assertEqual(from_control.value, [])\n-        self.assertTrue(\'Title\' not in from_control.options)\n-        self.assertTrue(\'portal_type\' not in from_control.options)\n-        self.assertTrue(\'Description\' in from_control.options)\n+        self.assertTrue("Title" not in from_control.options)\n+        self.assertTrue("portal_type" not in from_control.options)\n+        self.assertTrue("Description" in from_control.options)\ndiff --git a/plone/app/contenttypes/tests/test_behaviors_leadimage.py b/plone/app/contenttypes/tests/test_behaviors_leadimage.py\nindex 6fda6bc56..06859fbc7 100644\n--- a/plone/app/contenttypes/tests/test_behaviors_leadimage.py\n+++ b/plone/app/contenttypes/tests/test_behaviors_leadimage.py\n@@ -1,6 +1,7 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n+from plone.app.contenttypes.testing import (  # noqa\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -19,63 +20,64 @@ class LeadImageBehaviorFunctionalTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n-        fti = DexterityFTI(\'leadimagefolder\')\n-        self.portal.portal_types._setObject(\'leadimagefolder\', fti)\n-        fti.klass = \'plone.dexterity.content.Container\'\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n+        fti = DexterityFTI("leadimagefolder")\n+        self.portal.portal_types._setObject("leadimagefolder", fti)\n+        fti.klass = "plone.dexterity.content.Container"\n         fti.behaviors = (\n-            \'plone.app.contenttypes.behaviors.leadimage.ILeadImageBehavior\',\n+            "plone.app.contenttypes.behaviors.leadimage.ILeadImageBehavior",\n         )\n         self.fti = fti\n         alsoProvides(self.portal.REQUEST, IPloneAppContenttypesLayer)\n         alsoProvides(self.request, IPloneAppContenttypesLayer)\n         from plone.app.contenttypes.behaviors.leadimage import ILeadImage\n+\n         alsoProvides(self.request, ILeadImage)\n         self.portal.invokeFactory(\n-            \'leadimagefolder\',\n-            id=\'leadimagefolder\',\n-            title=u\'Folder with a lead image\'\n+            "leadimagefolder", id="leadimagefolder", title="Folder with a lead image"\n         )\n         import transaction\n+\n         transaction.commit()\n         # Set up browser\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {}:{}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_lead_image_in_edit_form(self):\n-        self.browser.open(self.portal_url + \'/leadimagefolder/edit\')\n-        self.assertTrue(\'Lead Image\' in self.browser.contents)\n-        self.assertTrue(\'Lead Image Caption\' in self.browser.contents)\n+        self.browser.open(self.portal_url + "/leadimagefolder/edit")\n+        self.assertTrue("Lead Image" in self.browser.contents)\n+        self.assertTrue("Lead Image Caption" in self.browser.contents)\n \n     def test_lead_image_viewlet_shows_up(self):\n-        self.browser.open(self.portal_url + \'/leadimagefolder/edit\')\n+        self.browser.open(self.portal_url + "/leadimagefolder/edit")\n         # Image upload\n-        file_path = os.path.join(os.path.dirname(__file__), \'image.jpg\')\n-        file_ctl = self.browser.getControl(\n-            name=\'form.widgets.ILeadImageBehavior.image\'\n-        )\n-        with io.FileIO(file_path, \'rb\') as f:\n-            file_ctl.add_file(f, \'image/png\', \'image.jpg\')\n+        file_path = os.path.join(os.path.dirname(__file__), "image.jpg")\n+        file_ctl = self.browser.getControl(name="form.widgets.ILeadImageBehavior.image")\n+        with io.FileIO(file_path, "rb") as f:\n+            file_ctl.add_file(f, "image/png", "image.jpg")\n         # Image caption\n         self.browser.getControl(\n-            name=\'form.widgets.ILeadImageBehavior.image_caption\'\n-        ).value = \'My image caption\'\n+            name="form.widgets.ILeadImageBehavior.image_caption"\n+        ).value = "My image caption"\n         # Submit form\n-        self.browser.getControl(\'Save\').click()\n+        self.browser.getControl("Save").click()\n \n-        self.assertTrue(\'My image caption\' in self.browser.contents)\n-        self.assertTrue(\'image.jpg\' in self.browser.contents)\n+        self.assertTrue("My image caption" in self.browser.contents)\n+        self.assertTrue("image.jpg" in self.browser.contents)\n \n         self.assertTrue(\'<section id="section-leadimage">\' in self.browser.contents)\n \n         # But doesn\'t show up on folder_contents, which is not a default view\n-        self.browser.open(self.portal_url + \'/leadimagefolder/folder_contents\')\n+        self.browser.open(self.portal_url + "/leadimagefolder/folder_contents")\n         self.assertTrue(\'<section id="section-leadimage">\' not in self.browser.contents)\ndiff --git a/plone/app/contenttypes/tests/test_behaviors_richtext.py b/plone/app/contenttypes/tests/test_behaviors_richtext.py\nindex f77279865..f8b2c4d7c 100644\n--- a/plone/app/contenttypes/tests/test_behaviors_richtext.py\n+++ b/plone/app/contenttypes/tests/test_behaviors_richtext.py\n@@ -1,6 +1,7 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.behaviors.richtext import IRichText\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n+from plone.app.contenttypes.testing import (  # noqa\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -20,42 +21,45 @@ class RichTextBase:\n     def _setupFTI(self):\n         fti = DexterityFTI(self._portal_type)\n         self.portal.portal_types._setObject(self._portal_type, fti)\n-        fti.klass = \'plone.dexterity.content.Item\'\n+        fti.klass = "plone.dexterity.content.Item"\n         fti.behaviors = self._behaviors\n \n \n class RichTextBehaviorFunctionalTest(RichTextBase, unittest.TestCase):\n-    """ basic use cases and tests for richtext behavior"""\n+    """basic use cases and tests for richtext behavior"""\n \n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n-    _behaviors = (\n-        \'plone.app.contenttypes.behaviors.richtext.IRichTextBehavior\',)\n-    _portal_type = \'SomeDocument\'\n+    _behaviors = ("plone.app.contenttypes.behaviors.richtext.IRichTextBehavior",)\n+    _portal_type = "SomeDocument"\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.wf = getToolByName(self.portal, \'portal_workflow\')\n-        self.portal.acl_users._doAddUser(\'user_std\', \'secret\', [\'Member\'], [])\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.wf = getToolByName(self.portal, "portal_workflow")\n+        self.portal.acl_users._doAddUser("user_std", "secret", ["Member"], [])\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self._setupFTI()\n-        self.portal.invokeFactory(self._portal_type, \'doc1\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        self.portal.invokeFactory(self._portal_type, "doc1")\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         import transaction\n+\n         transaction.commit()\n         # Set up browser\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {}:{}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_richtext_in_edit_form(self):\n-        self.browser.open(self.portal_url + \'/doc1/edit\')\n-        self.assertTrue(\'tinymce\' in self.browser.contents)\n+        self.browser.open(self.portal_url + "/doc1/edit")\n+        self.assertTrue("tinymce" in self.browser.contents)\n \n     def test_richtext_behavior(self):\n         IRichText.providedBy(self.portal.doc1)\ndiff --git a/plone/app/contenttypes/tests/test_behaviors_table_of_contents.py b/plone/app/contenttypes/tests/test_behaviors_table_of_contents.py\nindex 3b729d9bd..ef673ef1c 100644\n--- a/plone/app/contenttypes/tests/test_behaviors_table_of_contents.py\n+++ b/plone/app/contenttypes/tests/test_behaviors_table_of_contents.py\n@@ -1,6 +1,7 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n+from plone.app.contenttypes.testing import (  # noqa\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -17,49 +18,52 @@ class TableOfContentsBehaviorFunctionalTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n-        fti = DexterityFTI(\'tocdocument\')\n-        self.portal.portal_types._setObject(\'tocdocument\', fti)\n-        fti.klass = \'plone.dexterity.content.Item\'\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n+        fti = DexterityFTI("tocdocument")\n+        self.portal.portal_types._setObject("tocdocument", fti)\n+        fti.klass = "plone.dexterity.content.Item"\n         fti.behaviors = (\n-            \'plone.app.contenttypes.behaviors.tableofcontents.\'\n-            \'ITableOfContents\',\n+            "plone.app.contenttypes.behaviors.tableofcontents." "ITableOfContents",\n         )\n         self.fti = fti\n         alsoProvides(self.portal.REQUEST, IPloneAppContenttypesLayer)\n         alsoProvides(self.request, IPloneAppContenttypesLayer)\n-        from plone.app.contenttypes.behaviors.tableofcontents \\\n-            import ITableOfContents\n+        from plone.app.contenttypes.behaviors.tableofcontents import ITableOfContents\n+\n         alsoProvides(self.request, ITableOfContents)\n         self.portal.invokeFactory(\n-            \'tocdocument\',\n-            id=\'tocdoc\',\n-            title=u\'Document with a table of contents\'\n+            "tocdocument", id="tocdoc", title="Document with a table of contents"\n         )\n         import transaction\n+\n         transaction.commit()\n         # Set up browser\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {}:{}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_toc_in_edit_form(self):\n-        self.browser.open(self.portal_url + \'/tocdoc/edit\')\n-        self.assertTrue(\'Table of contents\' in self.browser.contents)\n+        self.browser.open(self.portal_url + "/tocdoc/edit")\n+        self.assertTrue("Table of contents" in self.browser.contents)\n \n     def test_toc_viewlet_shows_up(self):\n-        self.browser.open(self.portal_url + \'/tocdoc/edit\')\n+        self.browser.open(self.portal_url + "/tocdoc/edit")\n         toc_ctl = self.browser.getControl(\n-            name=\'form.widgets.ITableOfContents.table_of_contents:list\'\n+            name="form.widgets.ITableOfContents.table_of_contents:list"\n         )\n-        toc_ctl.value = [u\'selected\', ]\n+        toc_ctl.value = [\n+            "selected",\n+        ]\n         # Submit form\n-        self.browser.getControl(\'Save\').click()\n+        self.browser.getControl("Save").click()\n         self.assertTrue(\'<section id="document-toc"\' in self.browser.contents)\ndiff --git a/plone/app/contenttypes/tests/test_browser_utils.py b/plone/app/contenttypes/tests/test_browser_utils.py\nindex e1fa28467..b61df8dc6 100644\n--- a/plone/app/contenttypes/tests/test_browser_utils.py\n+++ b/plone/app/contenttypes/tests/test_browser_utils.py\n@@ -1,7 +1,6 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.contenttypes.testing import (\n+from plone.app.contenttypes.testing import (  # noqa\n     PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n-)  # noqa\n+)\n from zope.component import getMultiAdapter\n \n import unittest\n@@ -13,7 +12,7 @@\n PREFIX = "++resource++mimetype.icons/"\n \n \n-class DummyFile(object):\n+class DummyFile:\n     """Dummy file object.\n \n     For these tests, we only need a contentType and filename.\ndiff --git a/plone/app/contenttypes/tests/test_collection.py b/plone/app/contenttypes/tests/test_collection.py\nindex 29c89225c..d52544e3e 100644\n--- a/plone/app/contenttypes/tests/test_collection.py\n+++ b/plone/app/contenttypes/tests/test_collection.py\n@@ -1,10 +1,11 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from DateTime import DateTime\n-from plone.app.contenttypes.behaviors.collection import ICollection as ICollection_behavior  # noqa\n+from plone.app.contenttypes.behaviors.collection import (\n+    ICollection as ICollection_behavior,\n+)\n from plone.app.contenttypes.interfaces import ICollection\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n from plone.app.contenttypes.testing import set_browserlayer\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.testing import login\n@@ -26,22 +27,22 @@\n import unittest\n \n \n-query = [{\n-    \'i\': \'Title\',\n-    \'o\': \'plone.app.querystring.operation.string.contains\',\n-    \'v\': \'Collection Test Page\',\n-}]\n+query = [\n+    {\n+        "i": "Title",\n+        "o": "plone.app.querystring.operation.string.contains",\n+        "v": "Collection Test Page",\n+    }\n+]\n \n \n def dummy_image():\n     from plone.namedfile.file import NamedBlobImage\n-    filename = os.path.join(os.path.dirname(__file__), u\'image.png\')\n-    with open(filename, \'rb\') as f:\n-        image_data = f.read() \n-    return NamedBlobImage(\n-        data=image_data,\n-        filename=filename\n-    )\n+\n+    filename = os.path.join(os.path.dirname(__file__), "image.png")\n+    with open(filename, "rb") as f:\n+        image_data = f.read()\n+    return NamedBlobImage(data=image_data, filename=filename)\n \n \n class PloneAppCollectionClassTest(unittest.TestCase):\n@@ -49,50 +50,15 @@ class PloneAppCollectionClassTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n-        self.portal.invokeFactory(\'Collection\', \'collection\')\n-        self.collection = self.portal[\'collection\']\n-\n-    def test_bbb_listMetaDataFields(self):\n-        self.assertEqual(self.collection.listMetaDataFields(), [])\n-\n-    def test_results(self):\n-        pass\n-\n-    def test_bbb_selectedViewFields(self):\n-        self.assertEqual(\n-            self.collection.selectedViewFields(),\n-            [(\'Title\', u\'Title\'), (\'Creator\', u\'Creator\'),\n-             (\'Type\', u\'Type\'), (\'ModificationDate\', u\'Last modified\')]\n-        )\n-        self.collection.customViewFields = [\'Title\', \'Description\']\n-        self.assertEqual(self.collection.selectedViewFields(),\n-                         [(\'Title\', u\'Title\'), (\'Description\', u\'Description\')])\n-\n-    def test_bbb_setQuery(self):\n-        self.collection.setQuery(query)\n-        self.assertEqual(self.collection.query, query)\n-\n-    def test_bbb_getQuery(self):\n-        self.collection.query = query\n-        self.assertEqual(self.collection.getQuery(), query)\n-\n-    def test_bbb_getRawQuery(self):\n-        self.collection.query = query\n-        self.assertEqual(self.collection.getRawQuery(), query)\n-\n-    def test_bbb_setSort_on(self):\n-        self.collection.setSort_on(\'start\')\n-        self.assertEqual(self.collection.sort_on, \'start\')\n-\n-    def test_bbb_setSort_reversed(self):\n-        self.collection.setSort_reversed(True)\n-        self.assertEqual(self.collection.sort_reversed, True)\n+        self.portal.invokeFactory("Collection", "collection")\n+        self.collection = self.portal["collection"]\n \n     def test_syndicatable(self):\n-        from Products.CMFPlone.interfaces.syndication import ISyndicatable\n+        from plone.base.interfaces.syndication import ISyndicatable\n+\n         self.assertTrue(ISyndicatable.providedBy(self.collection))\n \n \n@@ -101,35 +67,31 @@ class PloneAppCollectionIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n-        self.portal.invokeFactory(\'Folder\', \'test-folder\')\n-        self.folder = self.portal[\'test-folder\']\n+        self.portal.invokeFactory("Folder", "test-folder")\n+        self.folder = self.portal["test-folder"]\n \n     def test_schema(self):\n-        fti = queryUtility(IDexterityFTI,\n-                           name=\'Collection\')\n+        fti = queryUtility(IDexterityFTI, name="Collection")\n         schema = fti.lookupSchema()\n-        self.assertTrue(schema.getName().endswith(\'_0_Collection\'))\n+        self.assertTrue(schema.getName().endswith("_0_Collection"))\n \n     def test_fti(self):\n-        fti = queryUtility(IDexterityFTI,\n-                           name=\'Collection\')\n+        fti = queryUtility(IDexterityFTI, name="Collection")\n         self.assertNotEqual(None, fti)\n \n     def test_factory(self):\n-        fti = queryUtility(IDexterityFTI,\n-                           name=\'Collection\')\n+        fti = queryUtility(IDexterityFTI, name="Collection")\n         factory = fti.factory\n         new_object = createObject(factory)\n         self.assertTrue(ICollection.providedBy(new_object))\n \n     def test_adding(self):\n-        self.folder.invokeFactory(\'Collection\',\n-                                  \'collection1\')\n-        p1 = self.folder[\'collection1\']\n+        self.folder.invokeFactory("Collection", "collection1")\n+        p1 = self.folder["collection1"]\n         self.assertTrue(ICollection.providedBy(p1))\n \n \n@@ -138,47 +100,46 @@ class PloneAppCollectionViewsIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.browser = Browser(self.layer[\'app\'])\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.browser = Browser(self.layer["app"])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         set_browserlayer(self.request)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n-        self.portal.invokeFactory(\'Folder\', \'test-folder\')\n-        self.folder = self.portal[\'test-folder\']\n-        self.folder.invokeFactory(\'Collection\',\n-                                  \'collection1\')\n-        self.collection = aq_inner(self.folder[\'collection1\'])\n-        self.request.set(\'URL\', self.collection.absolute_url())\n-        self.request.set(\'ACTUAL_URL\', self.collection.absolute_url())\n+        self.portal.invokeFactory("Folder", "test-folder")\n+        self.folder = self.portal["test-folder"]\n+        self.folder.invokeFactory("Collection", "collection1")\n+        self.collection = aq_inner(self.folder["collection1"])\n+        self.request.set("URL", self.collection.absolute_url())\n+        self.request.set("ACTUAL_URL", self.collection.absolute_url())\n \n     def test_collection_view(self):\n-        view = self.collection.restrictedTraverse(\'@@view\')\n+        view = self.collection.restrictedTraverse("@@view")\n         self.assertTrue(view())\n         self.assertEqual(view.request.response.status, 200)\n \n     def test_collection_listing_view(self):\n-        view = self.collection.restrictedTraverse(\'listing_view\')\n+        view = self.collection.restrictedTraverse("listing_view")\n         self.assertTrue(view())\n         self.assertEqual(view.request.response.status, 200)\n \n     def test_collection_summary_view(self):\n-        view = self.collection.restrictedTraverse(\'summary_view\')\n+        view = self.collection.restrictedTraverse("summary_view")\n         self.assertTrue(view())\n         self.assertEqual(view.request.response.status, 200)\n \n     def test_collection_full_view(self):\n-        view = self.collection.restrictedTraverse(\'full_view\')\n+        view = self.collection.restrictedTraverse("full_view")\n         self.assertTrue(view())\n         self.assertEqual(view.request.response.status, 200)\n \n     def test_collection_tabular_view(self):\n-        view = self.collection.restrictedTraverse(\'tabular_view\')\n+        view = self.collection.restrictedTraverse("tabular_view")\n         self.assertTrue(view())\n         self.assertEqual(view.request.response.status, 200)\n \n     def test_collection_album_view(self):\n-        view = self.collection.restrictedTraverse(\'album_view\')\n+        view = self.collection.restrictedTraverse("album_view")\n         self.assertTrue(view())\n         self.assertEqual(view.request.response.status, 200)\n \n@@ -186,131 +147,132 @@ def test_add_collection(self):\n         browser = self.browser\n         browser.handleErrors = False\n         browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {}:{}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n         portal_url = self.portal.absolute_url()\n         browser.open(portal_url)\n-        browser.getLink(url=\'http://nohost/plone/++add++Collection\').click()\n-        widget = \'form.widgets.IDublinCore.title\'\n-        browser.getControl(name=widget).value = \'My collection\'\n-        widget = \'form.widgets.IDublinCore.description\'\n-        browser.getControl(name=widget).value = \'This is my collection.\'\n-        widget = \'form.widgets.IRichTextBehavior.text\'\n-        browser.getControl(name=widget).value = \'Lorem Ipsum\'\n-        widget = \'form.widgets.IShortName.id\'\n-        browser.getControl(name=widget).value = \'my-special-collection\'\n-        browser.getControl(\'Save\').click()\n-        self.assertTrue(browser.url.endswith(\'my-special-collection/view\'))\n-        self.assertTrue(\'My collection\' in browser.contents)\n-        self.assertTrue(\'This is my collection\' in browser.contents)\n-        self.assertTrue(\'Lorem Ipsum\' in browser.contents)\n+        browser.getLink(url="http://nohost/plone/++add++Collection").click()\n+        widget = "form.widgets.IDublinCore.title"\n+        browser.getControl(name=widget).value = "My collection"\n+        widget = "form.widgets.IDublinCore.description"\n+        browser.getControl(name=widget).value = "This is my collection."\n+        widget = "form.widgets.IRichTextBehavior.text"\n+        browser.getControl(name=widget).value = "Lorem Ipsum"\n+        widget = "form.widgets.IShortName.id"\n+        browser.getControl(name=widget).value = "my-special-collection"\n+        browser.getControl("Save").click()\n+        self.assertTrue(browser.url.endswith("my-special-collection/view"))\n+        self.assertTrue("My collection" in browser.contents)\n+        self.assertTrue("This is my collection" in browser.contents)\n+        self.assertTrue("Lorem Ipsum" in browser.contents)\n \n     def test_collection_templates(self):\n         self.portal.acl_users.userFolderAddUser(\n-            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, [\'Manager\'], [])\n+            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ["Manager"], []\n+        )\n         browser = self.browser\n         portal = self.portal\n         login(portal, SITE_OWNER_NAME)\n         # add an image that will be listed by the collection\n-        portal.invokeFactory(\'Image\',\n-                             \'image\',\n-                             title=\'Image example\')\n+        portal.invokeFactory("Image", "image", title="Image example")\n \n-        image = self.portal[\'image\']\n+        image = self.portal["image"]\n         image.image = dummy_image()\n \n         # add a collection, so we can add a query to it\n-        portal.invokeFactory(\'Collection\',\n-                             \'collection\',\n-                             title=\'New Collection\')\n-        collection = portal[\'collection\']\n+        portal.invokeFactory("Collection", "collection", title="New Collection")\n+        collection = portal["collection"]\n         # Search for images\n-        query = [{\n-            \'i\': \'Type\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Image\',\n-        }]\n+        query = [\n+            {\n+                "i": "Type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Image",\n+            }\n+        ]\n         collection.text = RichTextValue(\n-            u\'Lorem collection ipsum\',\n-            \'text/plain\',\n-            \'text/html\'\n+            "Lorem collection ipsum", "text/plain", "text/html"\n         )\n \n         wrapped = ICollection_behavior(collection)\n         # set the query and publish the collection\n         wrapped.query = query\n         workflow = portal.portal_workflow\n-        workflow.doActionFor(collection, \'publish\')\n+        workflow.doActionFor(collection, "publish")\n         commit()\n         logout()\n         # open a browser to see if our image is in the results\n         browser.handleErrors = False\n         url = collection.absolute_url()\n         browser.open(url)\n-        self.assertIn(\'Lorem collection ipsum\', browser.contents)\n-        self.assertIn(\'Image example\', browser.contents)\n+        self.assertIn("Lorem collection ipsum", browser.contents)\n+        self.assertIn("Image example", browser.contents)\n \n         # open summary_view template\n-        browser.open(\'{0}/@@summary_view\'.format(url))\n-        self.assertIn(\'Lorem collection ipsum\', browser.contents)\n-        self.assertIn(\'Image example\', browser.contents)\n+        browser.open(f"{url}/@@summary_view")\n+        self.assertIn("Lorem collection ipsum", browser.contents)\n+        self.assertIn("Image example", browser.contents)\n \n         # open full_view template\n-        browser.open(\'{0}/@@full_view\'.format(url))\n-        self.assertIn(\'Lorem collection ipsum\', browser.contents)\n-        self.assertIn(\'Image example\', browser.contents)\n+        browser.open(f"{url}/@@full_view")\n+        self.assertIn("Lorem collection ipsum", browser.contents)\n+        self.assertIn("Image example", browser.contents)\n \n         # open tabular_view template\n-        browser.open(\'{0}/@@tabular_view\'.format(url))\n-        self.assertIn(\'Lorem collection ipsum\', browser.contents)\n-        self.assertIn(\'Image example\', browser.contents)\n+        browser.open(f"{url}/@@tabular_view")\n+        self.assertIn("Lorem collection ipsum", browser.contents)\n+        self.assertIn("Image example", browser.contents)\n \n         # open thumbnail_view template\n-        browser.open(\'{0}/@@album_view\'.format(url))\n-        self.assertIn(\'Lorem collection ipsum\', browser.contents)\n-        self.assertIn(\'Image example\', browser.contents)\n+        browser.open(f"{url}/@@album_view")\n+        self.assertIn("Lorem collection ipsum", browser.contents)\n+        self.assertIn("Image example", browser.contents)\n \n     def test_sorting_1(self):\n         self.portal.acl_users.userFolderAddUser(\n-            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, [\'Manager\'], [])\n+            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ["Manager"], []\n+        )\n \n         portal = self.portal\n         login(portal, SITE_OWNER_NAME)\n-        query = [{\n-            \'i\': \'portal_type\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'News Item\',\n-        }]\n-        portal.invokeFactory(\'Collection\',\n-                             \'collection\',\n-                             title=\'New Collection\',\n-                             query=query,\n-                             sort_on=\'created\',\n-                             sort_reversed=True,\n-                             )\n+        query = [\n+            {\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "News Item",\n+            }\n+        ]\n+        portal.invokeFactory(\n+            "Collection",\n+            "collection",\n+            title="New Collection",\n+            query=query,\n+            sort_on="created",\n+            sort_reversed=True,\n+        )\n \n         now = DateTime()\n         # News Item 1\n-        portal.invokeFactory(id=\'newsitem1\',\n-                             type_name=\'News Item\')\n+        portal.invokeFactory(id="newsitem1", type_name="News Item")\n         item1 = portal.newsitem1\n         item1.creation_date = now - 2\n         item1.reindexObject()\n         # News Item 2\n-        portal.invokeFactory(id=\'newsitem2\',\n-                             type_name=\'News Item\')\n+        portal.invokeFactory(id="newsitem2", type_name="News Item")\n         item2 = portal.newsitem2\n         item2.creation_date = now - 1\n         item2.reindexObject()\n         # News Item 3\n-        portal.invokeFactory(id=\'newsitem3\',\n-                             type_name=\'News Item\')\n+        portal.invokeFactory(id="newsitem3", type_name="News Item")\n         item3 = portal.newsitem3\n         item3.creation_date = now\n         item3.reindexObject()\n \n-        collection = portal[\'collection\']\n+        collection = portal["collection"]\n         wrapped = ICollection_behavior(collection)\n         results = wrapped.results(batch=False)\n         ritem0 = results[0]\n@@ -322,33 +284,35 @@ def test_sorting_1(self):\n \n     def test_custom_query(self):\n         self.portal.acl_users.userFolderAddUser(\n-            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, [\'Manager\'], [])\n+            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ["Manager"], []\n+        )\n         portal = self.portal\n         login(portal, SITE_OWNER_NAME)\n-        query = [{\n-            \'i\': \'portal_type\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': [\'News Item\', \'Document\'],\n-        }]\n-        portal.invokeFactory(\'Collection\',\n-                             \'collection\',\n-                             title=\'New Collection\',\n-                             query=query,\n-                             )\n+        query = [\n+            {\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": ["News Item", "Document"],\n+            }\n+        ]\n+        portal.invokeFactory(\n+            "Collection",\n+            "collection",\n+            title="New Collection",\n+            query=query,\n+        )\n \n         # item 1\n-        portal.invokeFactory(id=\'testnews\',\n-                             type_name=\'News Item\')\n+        portal.invokeFactory(id="testnews", type_name="News Item")\n         item1 = portal.testnews\n         item1.reindexObject()\n \n         # item 2\n-        portal.invokeFactory(id=\'testdoc\',\n-                             type_name=\'Document\')\n+        portal.invokeFactory(id="testdoc", type_name="Document")\n         item2 = portal.testdoc\n         item2.reindexObject()\n \n-        collection = portal[\'collection\']\n+        collection = portal["collection"]\n         wrapped = ICollection_behavior(collection)\n \n         # Test unmodified query\n@@ -356,59 +320,53 @@ def test_custom_query(self):\n         self.assertEqual(len(results), 2)\n \n         # Test with custom query\n-        results = wrapped.results(batch=False,\n-                                  custom_query={\'portal_type\': \'Document\'})\n+        results = wrapped.results(batch=False, custom_query={"portal_type": "Document"})\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].id, \'testdoc\')\n+        self.assertEqual(results[0].id, "testdoc")\n \n         # Test with custom query, which should not find anything\n-        results = wrapped.results(batch=False,\n-                                  custom_query={\'portal_type\': \'Document\',\n-                                                \'id\': \'bla\'})\n+        results = wrapped.results(\n+            batch=False, custom_query={"portal_type": "Document", "id": "bla"}\n+        )\n         self.assertEqual(len(results), 0)\n \n     def test_respect_navigation_root(self):\n         self.portal.acl_users.userFolderAddUser(\n-            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, [\'Manager\'], [])\n+            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ["Manager"], []\n+        )\n         portal = self.portal\n         login(portal, SITE_OWNER_NAME)\n \n         # Create two subsites i.e create two folders and mark them with\n         # INavigationRoot\n         for i in range(1, 3):\n-            folder_id = \'folder{0}\'.format(i)\n-            portal.invokeFactory(\'Folder\',\n-                                 folder_id,\n-                                 title=\'Folder{0}\'.format(i))\n+            folder_id = f"folder{i}"\n+            portal.invokeFactory("Folder", folder_id, title=f"Folder{i}")\n             folder = portal[folder_id]\n             alsoProvides(folder, INavigationRoot)\n-        folders = (portal[\'folder1\'], portal[\'folder2\'])\n+        folders = (portal["folder1"], portal["folder2"])\n \n         # Add a content item to each folder\n         for f in folders:\n             f_id = f.getId()\n-            f.invokeFactory(\'Document\',\n-                            \'item_in_{0}\'.format(f_id),\n-                            title=\'Item In {0}\'.format(f_id))\n+            f.invokeFactory("Document", f"item_in_{f_id}", title=f"Item In {f_id}")\n \n         # Add a collection to folder1\n         folder1 = folders[0]\n-        folder1.invokeFactory(\'Collection\',\n-                              \'collection1\',\n-                              title=\'Collection 1\')\n-        collection1 = folder1[\'collection1\']\n+        folder1.invokeFactory("Collection", "collection1", title="Collection 1")\n+        collection1 = folder1["collection1"]\n         wrapped = ICollection_behavior(collection1)\n         wrapped.query = [\n             {\n-                \'i\': \'portal_type\',\n-                \'o\': \'plone.app.querystring.operation.string.is\',\n-                \'v\': \'Document\',\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Document",\n             },\n             # use a "/" path and navroot works fine!\n             {\n-                \'i\': \'path\',\n-                \'o\': \'plone.app.querystring.operation.string.path\',\n-                \'v\': \'/\',\n+                "i": "path",\n+                "o": "plone.app.querystring.operation.string.path",\n+                "v": "/",\n             },\n         ]\n \n@@ -416,7 +374,7 @@ def test_respect_navigation_root(self):\n         # navigation root.\n         items = wrapped.results(batch=False)\n         ids = [i.getId() for i in items]\n-        self.assertListEqual(ids, [\'item_in_folder1\'])\n+        self.assertListEqual(ids, ["item_in_folder1"])\n \n \n class PloneAppCollectionEditViewsIntegrationTest(unittest.TestCase):\n@@ -424,25 +382,22 @@ class PloneAppCollectionEditViewsIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         set_browserlayer(self.request)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n-        self.portal.invokeFactory(\'Folder\', \'test-folder\')\n-        self.folder = self.portal[\'test-folder\']\n-        self.folder.invokeFactory(\n-            \'Collection\',\n-            \'collection1\'\n-        )\n-        self.collection = aq_inner(self.folder[\'collection1\'])\n-        self.request.set(\'URL\', self.collection.absolute_url())\n-        self.request.set(\'ACTUAL_URL\', self.collection.absolute_url())\n+        self.portal.invokeFactory("Folder", "test-folder")\n+        self.folder = self.portal["test-folder"]\n+        self.folder.invokeFactory("Collection", "collection1")\n+        self.collection = aq_inner(self.folder["collection1"])\n+        self.request.set("URL", self.collection.absolute_url())\n+        self.request.set("ACTUAL_URL", self.collection.absolute_url())\n \n     def test_search_result(self):\n-        view = self.collection.restrictedTraverse(\'@@edit\')\n+        view = self.collection.restrictedTraverse("@@edit")\n         html = view()\n-        self.assertTrue(\'form-widgets-ICollection-query\' in html)\n+        self.assertTrue("form-widgets-ICollection-query" in html)\n         # from plone.app.contentlisting.interfaces import IContentListing\n         # self.assertTrue(IContentListing.providedBy(view.accessor()))\n         # self.assertTrue(getattr(accessor(), \'actual_result_count\'))\ndiff --git a/plone/app/contenttypes/tests/test_collection_rss.py b/plone/app/contenttypes/tests/test_collection_rss.py\nindex caa07cf2b..d2abfaedb 100644\n--- a/plone/app/contenttypes/tests/test_collection_rss.py\n+++ b/plone/app/contenttypes/tests/test_collection_rss.py\n@@ -1,24 +1,24 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from lxml import etree\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n from plone.app.testing import login\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n+from plone.base.interfaces.syndication import ISiteSyndicationSettings\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings\n from zope.component import getUtility\n \n-import six\n import unittest\n \n \n-query = [{\n-    \'i\': \'Title\',\n-    \'o\': \'plone.app.querystring.operation.string.is\',\n-    \'v\': \'Collection Test Page\',\n-}]\n+query = [\n+    {\n+        "i": "Title",\n+        "o": "plone.app.querystring.operation.string.is",\n+        "v": "Collection Test Page",\n+    }\n+]\n \n \n class RSSViewTest(unittest.TestCase):\n@@ -26,23 +26,22 @@ class RSSViewTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n-        self.portal.invokeFactory(\'Folder\', \'test-folder\')\n-        self.folder = self.portal[\'test-folder\']\n+        self.portal.invokeFactory("Folder", "test-folder")\n+        self.folder = self.portal["test-folder"]\n         self.folder.invokeFactory(\n-            \'Document\',\n-            \'page1\',\n-            title=\'Collection Test Page\',\n+            "Document",\n+            "page1",\n+            title="Collection Test Page",\n         )\n-        self.folder.invokeFactory(\'Collection\',\n-                                  \'collection1\')\n-        self.collection = aq_inner(self.folder[\'collection1\'])\n+        self.folder.invokeFactory("Collection", "collection1")\n+        self.collection = aq_inner(self.folder["collection1"])\n         self.collection.query = query\n-        self.request.set(\'URL\', self.collection.absolute_url())\n-        self.request.set(\'ACTUAL_URL\', self.collection.absolute_url())\n+        self.request.set("URL", self.collection.absolute_url())\n+        self.request.set("ACTUAL_URL", self.collection.absolute_url())\n         # We need to enable syndication globally.\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSyndicationSettings)\n@@ -53,18 +52,18 @@ def assertIsValidRSS(self, rss):\n         # XXX: We might want to validate against a DTD or RelaxNG schema here.\n         # schema = etree.XMLSchema(schema_root)\n         # parser = etree.XMLParser(dtd_validation=True,schema=schema)\n-        if isinstance(rss, six.text_type):\n-            rss = rss.encode(\'utf-8\')\n+        if isinstance(rss, str):\n+            rss = rss.encode("utf-8")\n         parser = etree.XMLParser()\n         return etree.fromstring(rss, parser)\n \n     def test_view(self):\n-        view = self.collection.restrictedTraverse(\'@@RSS\')\n+        view = self.collection.restrictedTraverse("@@RSS")\n         html = view()\n         self.assertEqual(view.request.response.status, 200)\n-        self.assertTrue(\'Collection Test Page\' in html)\n+        self.assertTrue("Collection Test Page" in html)\n \n     def test_view_is_valid(self):\n-        view = self.collection.restrictedTraverse(\'@@RSS\')\n+        view = self.collection.restrictedTraverse("@@RSS")\n         result = self.assertIsValidRSS(view())\n-        self.assertTrue(b\'Collection Test Page\' in etree.tostring(result))\n+        self.assertTrue(b"Collection Test Page" in etree.tostring(result))\ndiff --git a/plone/app/contenttypes/tests/test_content_profile.py b/plone/app/contenttypes/tests/test_content_profile.py\nindex 83a9554e3..1f2cefa32 100644\n--- a/plone/app/contenttypes/tests/test_content_profile.py\n+++ b/plone/app/contenttypes/tests/test_content_profile.py\n@@ -1,11 +1,10 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PloneSandboxLayer\n+from plone.base.interfaces.constrains import ISelectableConstrainTypes\n from plone.portlets.interfaces import ILocalPortletAssignmentManager\n from plone.portlets.interfaces import IPortletManager\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n from Products.PythonScripts.PythonScript import PythonScript\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n@@ -18,13 +17,14 @@ class PloneAppContenttypesContent(PloneSandboxLayer):\n \n     def setUpPloneSite(self, portal):\n         # Necessary to set up some Plone stuff, such as Workflow.\n-        self.applyProfile(portal, \'plone.app.contenttypes:plone-content\')\n+        self.applyProfile(portal, "plone.app.contenttypes:plone-content")\n \n \n PLONE_APP_CONTENTTYPES_CONTENT_FIXTURE = PloneAppContenttypesContent()\n-PLONE_APP_CONTENTTYPES_CONTENT_INTEGRATION_TESTING = \\\n-    IntegrationTesting(bases=(PLONE_APP_CONTENTTYPES_CONTENT_FIXTURE,),\n-                       name=\'PloneAppContenttypesContent:Integration\')\n+PLONE_APP_CONTENTTYPES_CONTENT_INTEGRATION_TESTING = IntegrationTesting(\n+    bases=(PLONE_APP_CONTENTTYPES_CONTENT_FIXTURE,),\n+    name="PloneAppContenttypesContent:Integration",\n+)\n \n # TODO Test for content translation.\n \n@@ -33,8 +33,8 @@ class ContentProfileTestCase(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_CONTENT_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.portal_workflow = getToolByName(self.portal, \'portal_workflow\')\n+        self.portal = self.layer["portal"]\n+        self.portal_workflow = getToolByName(self.portal, "portal_workflow")\n \n     # #################### #\n     #   front-page tests   #\n@@ -44,7 +44,7 @@ def test_homepage(self):\n         self.assertEqual(self.portal.title, "Welcome to Plone")\n         self.assertEqual(\n             self.portal.description,\n-            "Congratulations! You have successfully installed Plone."\n+            "Congratulations! You have successfully installed Plone.",\n         )\n         self.assertIn("Welcome!", self.portal.text.raw)\n \n@@ -54,24 +54,25 @@ def test_homepage(self):\n \n     def test_Members_was_created(self):\n         # Was the object created?\n-        obj = self.portal[\'Members\']\n-        self.assertEqual(obj.portal_type, \'Folder\')\n+        obj = self.portal["Members"]\n+        self.assertEqual(obj.portal_type, "Folder")\n \n     def test_Members_portlets(self):\n         # Have the right column portlet manager setting been added?\n-        members = self.portal[\'Members\']\n-        manager = getUtility(IPortletManager, name=\'plone.rightcolumn\')\n-        assignable_manager = getMultiAdapter((members, manager),\n-                                             ILocalPortletAssignmentManager)\n-        self.assertTrue(assignable_manager.getBlacklistStatus(\'context\'))\n-        self.assertTrue(assignable_manager.getBlacklistStatus(\'group\'))\n-        self.assertTrue(assignable_manager.getBlacklistStatus(\'content_type\'))\n+        members = self.portal["Members"]\n+        manager = getUtility(IPortletManager, name="plone.rightcolumn")\n+        assignable_manager = getMultiAdapter(\n+            (members, manager), ILocalPortletAssignmentManager\n+        )\n+        self.assertTrue(assignable_manager.getBlacklistStatus("context"))\n+        self.assertTrue(assignable_manager.getBlacklistStatus("group"))\n+        self.assertTrue(assignable_manager.getBlacklistStatus("content_type"))\n \n     def test_Members_is_private(self):\n         # Is the content object public?\n-        obj = self.portal[\'Members\']\n-        current_state = self.portal_workflow.getInfoFor(obj, \'review_state\')\n-        self.assertEqual(current_state, \'private\')\n+        obj = self.portal["Members"]\n+        current_state = self.portal_workflow.getInfoFor(obj, "review_state")\n+        self.assertEqual(current_state, "private")\n \n     # ################ #\n     #   events tests   #\n@@ -79,21 +80,21 @@ def test_Members_is_private(self):\n \n     def test_events_was_created(self):\n         # Was the object created?\n-        events = self.portal[\'events\']\n-        self.assertEqual(events.portal_type, \'Folder\')\n+        events = self.portal["events"]\n+        self.assertEqual(events.portal_type, "Folder")\n         # Was the contained collection created?\n-        collection = events[\'aggregator\']\n-        self.assertEqual(collection.portal_type, \'Collection\')\n+        collection = events["aggregator"]\n+        self.assertEqual(collection.portal_type, "Collection")\n \n     def test_events_default_page(self):\n         # Has the object been set on the container as the default page?\n-        self.assertEqual(self.portal[\'events\'].default_page, \'aggregator\')\n+        self.assertEqual(self.portal["events"].default_page, "aggregator")\n \n     def test_events_is_published(self):\n         # Has the content object been published?\n-        events = self.portal[\'events\']\n-        current_state = self.portal_workflow.getInfoFor(events, \'review_state\')\n-        self.assertEqual(current_state, \'published\')\n+        events = self.portal["events"]\n+        current_state = self.portal_workflow.getInfoFor(events, "review_state")\n+        self.assertEqual(current_state, "published")\n \n     # ############## #\n     #   news tests   #\n@@ -101,33 +102,38 @@ def test_events_is_published(self):\n \n     def test_news_was_created(self):\n         # Was the object created?\n-        news = self.portal[\'news\']\n-        self.assertEqual(news.portal_type, \'Folder\')\n+        news = self.portal["news"]\n+        self.assertEqual(news.portal_type, "Folder")\n         # Was the contained collection created?\n-        collection = news[\'aggregator\']\n-        self.assertEqual(collection.portal_type, \'Collection\')\n+        collection = news["aggregator"]\n+        self.assertEqual(collection.portal_type, "Collection")\n \n     def test_news_default_page(self):\n         # Has the object been set on the container as the default page?\n-        self.assertEqual(self.portal[\'news\'].default_page, \'aggregator\')\n+        self.assertEqual(self.portal["news"].default_page, "aggregator")\n \n     def test_news_is_published(self):\n         # Has the content object been published?\n-        news = self.portal[\'news\']\n-        current_state = self.portal_workflow.getInfoFor(news, \'review_state\')\n-        self.assertEqual(current_state, \'published\')\n+        news = self.portal["news"]\n+        current_state = self.portal_workflow.getInfoFor(news, "review_state")\n+        self.assertEqual(current_state, "published")\n \n     def test_news_aggregator_settings(self):\n         # Has the news aggregator (Collection) been set up?\n-        query = [dict(i=u\'portal_type\',\n-                      o=u\'plone.app.querystring.operation.selection.any\',\n-                      v=[u\'News Item\']),\n-                 dict(i=u\'review_state\',\n-                      o=u\'plone.app.querystring.operation.selection.any\',\n-                      v=[u\'published\']),\n-                 ]\n-        collection = self.portal[\'news\'][\'aggregator\']\n-        self.assertEqual(collection.sort_on, u\'effective\')\n+        query = [\n+            dict(\n+                i="portal_type",\n+                o="plone.app.querystring.operation.selection.any",\n+                v=["News Item"],\n+            ),\n+            dict(\n+                i="review_state",\n+                o="plone.app.querystring.operation.selection.any",\n+                v=["published"],\n+            ),\n+        ]\n+        collection = self.portal["news"]["aggregator"]\n+        self.assertEqual(collection.sort_on, "effective")\n         self.assertEqual(collection.sort_reversed, True)\n         self.assertEqual(collection.query, query)\n-        self.assertEqual(collection.getLayout(), \'summary_view\')\n+        self.assertEqual(collection.getLayout(), "summary_view")\ndiff --git a/plone/app/contenttypes/tests/test_document.py b/plone/app/contenttypes/tests/test_document.py\nindex f18990e73..0432d8384 100644\n--- a/plone/app/contenttypes/tests/test_document.py\n+++ b/plone/app/contenttypes/tests/test_document.py\n@@ -1,7 +1,10 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IDocument\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import (  # noqa\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)\n+from plone.app.contenttypes.testing import (  # noqa\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -22,65 +25,54 @@ class DocumentIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n     def test_schema(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Document\')\n+        fti = queryUtility(IDexterityFTI, name="Document")\n         schema = fti.lookupSchema()\n-        self.assertTrue(schema.getName().endswith(\'_0_Document\'))\n+        self.assertTrue(schema.getName().endswith("_0_Document"))\n \n     def test_fti(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Document\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="Document")\n         self.assertNotEqual(None, fti)\n \n     def test_factory(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Document\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="Document")\n         factory = fti.factory\n         new_object = createObject(factory)\n         self.assertTrue(IDocument.providedBy(new_object))\n \n     def test_adding(self):\n-        self.portal.invokeFactory(\n-            \'Document\',\n-            \'doc1\'\n-        )\n-        self.assertTrue(IDocument.providedBy(self.portal[\'doc1\']))\n+        self.portal.invokeFactory("Document", "doc1")\n+        self.assertTrue(IDocument.providedBy(self.portal["doc1"]))\n \n     def test_view(self):\n-        self.portal.invokeFactory(\'Document\', \'document\')\n-        document = self.portal[\'document\']\n-        document.title = \'My Document\'\n-        document.description = \'This is my document.\'\n+        self.portal.invokeFactory("Document", "document")\n+        document = self.portal["document"]\n+        document.title = "My Document"\n+        document.description = "This is my document."\n         document.text = RichTextValue(\n-            u\'Lorem ipsum\',\n-            \'text/plain\',\n-            \'text/html\',\n+            "Lorem ipsum",\n+            "text/plain",\n+            "text/html",\n         )\n-        self.request.set(\'URL\', document.absolute_url())\n-        self.request.set(\'ACTUAL_URL\', document.absolute_url())\n+        self.request.set("URL", document.absolute_url())\n+        self.request.set("ACTUAL_URL", document.absolute_url())\n         alsoProvides(self.request, IPloneFormLayer)\n-        view = document.restrictedTraverse(\'@@view\')\n+        view = document.restrictedTraverse("@@view")\n         self.assertEqual(view.request.response.status, 200)\n         output = view()\n         self.assertTrue(output)\n-        self.assertTrue(\'My Document\' in output)\n-        self.assertTrue(\'This is my document.\' in output)\n-        self.assertTrue(\'Lorem ipsum\' in output)\n+        self.assertTrue("My Document" in output)\n+        self.assertTrue("This is my document." in output)\n+        self.assertTrue("Lorem ipsum" in output)\n \n     def tearDown(self):\n-        if \'document\' in self.portal.objectIds():\n-            self.portal.manage_delObjects(ids=\'document\')\n+        if "document" in self.portal.objectIds():\n+            self.portal.manage_delObjects(ids="document")\n \n \n class DocumentFunctionalTest(unittest.TestCase):\n@@ -88,30 +80,33 @@ class DocumentFunctionalTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {}:{}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_add_document(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(url=\'http://nohost/plone/++add++Document\').click()\n-        widget = \'form.widgets.IDublinCore.title\'\n-        self.browser.getControl(name=widget).value = \'My document\'\n-        widget = \'form.widgets.IDublinCore.description\'\n-        self.browser.getControl(name=widget).value = \'This is my document.\'\n-        widget = \'form.widgets.IRichTextBehavior.text\'\n-        self.browser.getControl(name=widget).value = \'Lorem Ipsum\'\n-        widget = \'form.widgets.IShortName.id\'\n-        self.browser.getControl(name=widget).value = \'my-special-document\'\n-        self.browser.getControl(\'Save\').click()\n-        self.assertTrue(self.browser.url.endswith(\'my-special-document/view\'))\n-        self.assertTrue(\'My document\' in self.browser.contents)\n-        self.assertTrue(\'This is my document\' in self.browser.contents)\n-        self.assertTrue(\'Lorem Ipsum\' in self.browser.contents)\n+        self.browser.getLink(url="http://nohost/plone/++add++Document").click()\n+        widget = "form.widgets.IDublinCore.title"\n+        self.browser.getControl(name=widget).value = "My document"\n+        widget = "form.widgets.IDublinCore.description"\n+        self.browser.getControl(name=widget).value = "This is my document."\n+        widget = "form.widgets.IRichTextBehavior.text"\n+        self.browser.getControl(name=widget).value = "Lorem Ipsum"\n+        widget = "form.widgets.IShortName.id"\n+        self.browser.getControl(name=widget).value = "my-special-document"\n+        self.browser.getControl("Save").click()\n+        self.assertTrue(self.browser.url.endswith("my-special-document/view"))\n+        self.assertTrue("My document" in self.browser.contents)\n+        self.assertTrue("This is my document" in self.browser.contents)\n+        self.assertTrue("Lorem Ipsum" in self.browser.contents)\ndiff --git a/plone/app/contenttypes/tests/test_event.py b/plone/app/contenttypes/tests/test_event.py\nindex b7df78cbb..36f519248 100644\n--- a/plone/app/contenttypes/tests/test_event.py\n+++ b/plone/app/contenttypes/tests/test_event.py\n@@ -1,7 +1,10 @@\n-# -*- coding: utf-8 -*-\n from datetime import datetime\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import (  # noqa\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)\n+from plone.app.contenttypes.testing import (  # noqa\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -22,61 +25,50 @@ class EventIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        self.request[\'LANGUAGE\'] = \'en\'\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        self.request["LANGUAGE"] = "en"\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n     def test_schema(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Event\')\n+        fti = queryUtility(IDexterityFTI, name="Event")\n         schema = fti.lookupSchema()\n-        self.assertTrue(schema.getName().endswith(\'_0_Event\'))\n+        self.assertTrue(schema.getName().endswith("_0_Event"))\n \n     def test_fti(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Event\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="Event")\n         self.assertNotEqual(None, fti)\n \n     def test_factory(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Event\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="Event")\n         factory = fti.factory\n         new_object = createObject(factory)\n         self.assertTrue(IEvent.providedBy(new_object))\n \n     def test_adding(self):\n-        self.portal.invokeFactory(\n-            \'Event\',\n-            \'doc1\'\n-        )\n-        self.assertTrue(IEvent.providedBy(self.portal[\'doc1\']))\n+        self.portal.invokeFactory("Event", "doc1")\n+        self.assertTrue(IEvent.providedBy(self.portal["doc1"]))\n \n     def test_view(self):\n-        self.portal.invokeFactory(\'Event\', \'event\')\n-        event = self.portal[\'event\']\n-        event.title = \'My Event\'\n-        event.description = \'This is my event.\'\n+        self.portal.invokeFactory("Event", "event")\n+        event = self.portal["event"]\n+        event.title = "My Event"\n+        event.description = "This is my event."\n         event.start = datetime(2013, 1, 1, 10, 0)\n         event.end = datetime(2013, 1, 1, 12, 0)\n \n-        self.request.set(\'URL\', event.absolute_url())\n-        self.request.set(\'ACTUAL_URL\', event.absolute_url())\n+        self.request.set("URL", event.absolute_url())\n+        self.request.set("ACTUAL_URL", event.absolute_url())\n         alsoProvides(self.request, IPloneFormLayer)\n-        view = event.restrictedTraverse(\'@@view\')\n+        view = event.restrictedTraverse("@@view")\n \n         # TODO: start/end are not set??\n         #\n         self.assertTrue(view())\n         self.assertEqual(view.request.response.status, 200)\n-        self.assertTrue(\'My Event\' in view())\n-        self.assertTrue(\'This is my event.\' in view())\n+        self.assertTrue("My Event" in view())\n+        self.assertTrue("This is my event." in view())\n \n \n class EventFunctionalTest(unittest.TestCase):\n@@ -84,43 +76,46 @@ class EventFunctionalTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD, )\n+            "Authorization",\n+            "Basic {}:{}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_add_event(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'Event\').click()\n+        self.browser.getLink("Event").click()\n         self.browser.getControl(\n-            name=\'form.widgets.IDublinCore.title\'\n-        ).value = \'My event\'\n+            name="form.widgets.IDublinCore.title"\n+        ).value = "My event"\n         self.browser.getControl(\n-            name=\'form.widgets.IDublinCore.description\'\n-        ).value = \'This is my event.\'\n+            name="form.widgets.IDublinCore.description"\n+        ).value = "This is my event."\n         self.browser.getControl(\n-            name=\'form.widgets.IRichTextBehavior.text\'\n-        ).value = \'Lorem Ipsum\'\n+            name="form.widgets.IRichTextBehavior.text"\n+        ).value = "Lorem Ipsum"\n         self.browser.getControl(\n-            name=\'form.widgets.IEventBasic.start\'\n-        ).value = \'2013-01-01\'\n+            name="form.widgets.IEventBasic.start"\n+        ).value = "2013-01-01"\n         self.browser.getControl(\n-            name=\'form.widgets.IEventBasic.end\'\n-        ).value = \'2013-01-12\'\n+            name="form.widgets.IEventBasic.end"\n+        ).value = "2013-01-12"\n         self.browser.getControl(\n-            name=\'form.widgets.IShortName.id\'\n-        ).value = \'my-special-event\'\n-        self.browser.getControl(\'Save\').click()\n-\n-        self.assertTrue(self.browser.url.endswith(\'my-special-event/view\'))\n-        self.assertIn(\'My event\', self.browser.contents)\n-        self.assertIn(\'This is my event\', self.browser.contents)\n-        self.assertIn(\'Lorem Ipsum\', self.browser.contents)\n-        self.assertIn(\'2013-01-01\', self.browser.contents)\n-        self.assertIn(\'2013-01-12\', self.browser.contents)\n+            name="form.widgets.IShortName.id"\n+        ).value = "my-special-event"\n+        self.browser.getControl("Save").click()\n+\n+        self.assertTrue(self.browser.url.endswith("my-special-event/view"))\n+        self.assertIn("My event", self.browser.contents)\n+        self.assertIn("This is my event", self.browser.contents)\n+        self.assertIn("Lorem Ipsum", self.browser.contents)\n+        self.assertIn("2013-01-01", self.browser.contents)\n+        self.assertIn("2013-01-12", self.browser.contents)\ndiff --git a/plone/app/contenttypes/tests/test_file.py b/plone/app/contenttypes/tests/test_file.py\nindex f2bcdd6fa..8977906b9 100644\n--- a/plone/app/contenttypes/tests/test_file.py\n+++ b/plone/app/contenttypes/tests/test_file.py\n@@ -1,8 +1,11 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IFile\n from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import (  # noqa\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)\n+from plone.app.contenttypes.testing import (  # noqa\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -26,86 +29,75 @@ class FileIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n     def test_schema(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'File\')\n+        fti = queryUtility(IDexterityFTI, name="File")\n         schema = fti.lookupSchema()\n-        self.assertTrue(schema.getName().endswith(\'_0_File\'))\n+        self.assertTrue(schema.getName().endswith("_0_File"))\n \n     def test_fti(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'File\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="File")\n         self.assertNotEqual(None, fti)\n \n     def test_factory(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'File\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="File")\n         factory = fti.factory\n         new_object = createObject(factory)\n         self.assertTrue(IFile.providedBy(new_object))\n \n     def test_adding(self):\n-        self.portal.invokeFactory(\n-            \'File\',\n-            \'doc1\'\n-        )\n-        self.assertTrue(IFile.providedBy(self.portal[\'doc1\']))\n+        self.portal.invokeFactory("File", "doc1")\n+        self.assertTrue(IFile.providedBy(self.portal["doc1"]))\n \n     def test_view(self):\n-        self.portal.invokeFactory(\'File\', \'file\')\n-        file1 = self.portal[\'file\']\n-        file1.title = \'My File\'\n-        file1.description = \'This is my file.\'\n-        self.request.set(\'URL\', file1.absolute_url())\n-        self.request.set(\'ACTUAL_URL\', file1.absolute_url())\n+        self.portal.invokeFactory("File", "file")\n+        file1 = self.portal["file"]\n+        file1.title = "My File"\n+        file1.description = "This is my file."\n+        self.request.set("URL", file1.absolute_url())\n+        self.request.set("ACTUAL_URL", file1.absolute_url())\n         alsoProvides(self.request, IPloneFormLayer)\n-        view = file1.restrictedTraverse(\'@@view\')\n+        view = file1.restrictedTraverse("@@view")\n \n         self.assertTrue(view())\n         self.assertEqual(view.request.response.status, 200)\n-        self.assertTrue(\'My File\' in view())\n-        self.assertTrue(\'This is my file.\' in view())\n+        self.assertTrue("My File" in view())\n+        self.assertTrue("This is my file." in view())\n \n     def test_view_no_video_audio_tag(self):\n-        self.portal.invokeFactory(\'File\', \'file\')\n-        file = self.portal[\'file\']\n+        self.portal.invokeFactory("File", "file")\n+        file = self.portal["file"]\n         file.file = NamedFile()\n-        file.file.contentType = \'application/pdf\'\n+        file.file.contentType = "application/pdf"\n         alsoProvides(self.request, IPloneAppContenttypesLayer)\n-        view = file.restrictedTraverse(\'@@file_view\')\n+        view = file.restrictedTraverse("@@file_view")\n         rendered = view()\n-        self.assertTrue(\'</audio>\' not in rendered)\n-        self.assertTrue(\'</video>\' not in rendered)\n+        self.assertTrue("</audio>" not in rendered)\n+        self.assertTrue("</video>" not in rendered)\n \n     def test_view_video_tag(self):\n-        self.portal.invokeFactory(\'File\', \'file\')\n-        file = self.portal[\'file\']\n+        self.portal.invokeFactory("File", "file")\n+        file = self.portal["file"]\n         file.file = NamedFile()\n-        file.file.contentType = \'audio/mp3\'\n+        file.file.contentType = "audio/mp3"\n         alsoProvides(self.request, IPloneAppContenttypesLayer)\n-        view = file.restrictedTraverse(\'@@file_view\')\n+        view = file.restrictedTraverse("@@file_view")\n         rendered = view()\n-        self.assertTrue(\'</audio>\' in rendered)\n+        self.assertTrue("</audio>" in rendered)\n \n     def test_view_audio_tag(self):\n-        self.portal.invokeFactory(\'File\', \'file\')\n-        file = self.portal[\'file\']\n+        self.portal.invokeFactory("File", "file")\n+        file = self.portal["file"]\n         file.file = NamedFile()\n-        file.file.contentType = \'video/ogv\'\n+        file.file.contentType = "video/ogv"\n         alsoProvides(self.request, IPloneAppContenttypesLayer)\n-        view = file.restrictedTraverse(\'@@file_view\')\n+        view = file.restrictedTraverse("@@file_view")\n         rendered = view()\n-        self.assertTrue(\'</video>\' in rendered)\n+        self.assertTrue("</video>" in rendered)\n \n \n class FileFunctionalTest(unittest.TestCase):\n@@ -113,111 +105,114 @@ class FileFunctionalTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n         self.icons = self.portal.restrictedTraverse("@@iconresolver")\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {}:{}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_add_file(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'File\').click()\n-        widget = \'form.widgets.title\'\n-        self.browser.getControl(name=widget).value = \'My file\'\n-        widget = \'form.widgets.description\'\n-        self.browser.getControl(name=widget).value = \'This is my file.\'\n-        file_path = os.path.join(os.path.dirname(__file__), \'image.jpg\')\n-        file_ctl = self.browser.getControl(name=\'form.widgets.file\')\n-        with io.FileIO(file_path, \'rb\') as f:\n-            file_ctl.add_file(f, \'image/png\', \'image.jpg\')\n-        self.browser.getControl(\'Save\').click()\n-        self.assertTrue(self.browser.url.endswith(\'image.jpg/view\'))\n-        self.assertTrue(\'My file\' in self.browser.contents)\n-        self.assertTrue(\'This is my file\' in self.browser.contents)\n+        self.browser.getLink("File").click()\n+        widget = "form.widgets.title"\n+        self.browser.getControl(name=widget).value = "My file"\n+        widget = "form.widgets.description"\n+        self.browser.getControl(name=widget).value = "This is my file."\n+        file_path = os.path.join(os.path.dirname(__file__), "image.jpg")\n+        file_ctl = self.browser.getControl(name="form.widgets.file")\n+        with io.FileIO(file_path, "rb") as f:\n+            file_ctl.add_file(f, "image/png", "image.jpg")\n+        self.browser.getControl("Save").click()\n+        self.assertTrue(self.browser.url.endswith("image.jpg/view"))\n+        self.assertTrue("My file" in self.browser.contents)\n+        self.assertTrue("This is my file" in self.browser.contents)\n \n     def test_shortname_file(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'File\').click()\n-        widget = \'form.widgets.title\'\n-        self.browser.getControl(name=widget).value = \'My file\'\n-        widget = \'form.widgets.IShortName.id\'\n-        self.browser.getControl(name=widget).value = \'my-special-file\'\n-        file_path = os.path.join(os.path.dirname(__file__), \'image.jpg\')\n-        file_ctl = self.browser.getControl(name=\'form.widgets.file\')\n-        with io.FileIO(file_path, \'rb\') as f:\n-            file_ctl.add_file(f, \'image/png\', \'image.jpg\')\n-        self.browser.getControl(\'Save\').click()\n-        self.assertTrue(self.browser.url.endswith(\'my-special-file/view\'))\n+        self.browser.getLink("File").click()\n+        widget = "form.widgets.title"\n+        self.browser.getControl(name=widget).value = "My file"\n+        widget = "form.widgets.IShortName.id"\n+        self.browser.getControl(name=widget).value = "my-special-file"\n+        file_path = os.path.join(os.path.dirname(__file__), "image.jpg")\n+        file_ctl = self.browser.getControl(name="form.widgets.file")\n+        with io.FileIO(file_path, "rb") as f:\n+            file_ctl.add_file(f, "image/png", "image.jpg")\n+        self.browser.getControl("Save").click()\n+        self.assertTrue(self.browser.url.endswith("my-special-file/view"))\n \n     def test_mime_icon_pdf_for_file_(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'File\').click()\n-\n-        widget = \'form.widgets.title\'\n-        self.browser.getControl(name=widget).value = \'My file\'\n-        widget = \'form.widgets.description\'\n-        self.browser.getControl(name=widget).value = \'This is my pdf file.\'\n-        file_path = os.path.join(os.path.dirname(__file__), \'file.pdf\')\n-        file_ctl = self.browser.getControl(name=\'form.widgets.file\')\n-        with io.FileIO(file_path, \'rb\') as f:\n-            file_ctl.add_file(f, \'application/pdf\', \'file.pdf\')\n-        self.browser.getControl(\'Save\').click()\n-        self.assertTrue(self.browser.url.endswith(\'file.pdf/view\'))\n+        self.browser.getLink("File").click()\n+\n+        widget = "form.widgets.title"\n+        self.browser.getControl(name=widget).value = "My file"\n+        widget = "form.widgets.description"\n+        self.browser.getControl(name=widget).value = "This is my pdf file."\n+        file_path = os.path.join(os.path.dirname(__file__), "file.pdf")\n+        file_ctl = self.browser.getControl(name="form.widgets.file")\n+        with io.FileIO(file_path, "rb") as f:\n+            file_ctl.add_file(f, "application/pdf", "file.pdf")\n+        self.browser.getControl("Save").click()\n+        self.assertTrue(self.browser.url.endswith("file.pdf/view"))\n         # check icon\n         self.assertEqual(\n-            \'http://nohost/plone/++plone++bootstrap-icons/file-earmark-pdf.svg\',\n-            self._get_icon_url(self.portal["file.pdf"].file.contentType))\n+            "http://nohost/plone/++plone++bootstrap-icons/file-earmark-pdf.svg",\n+            self._get_icon_url(self.portal["file.pdf"].file.contentType),\n+        )\n \n     def test_alternative_mime_icon_doc_for_file(self):\n         mtr = self.portal.mimetypes_registry\n-        mime_doc = mtr.lookup(\'application/msword\')[0]\n-        mime_doc.icon_path = \'custom.png\'\n+        mime_doc = mtr.lookup("application/msword")[0]\n+        mime_doc.icon_path = "custom.png"\n         transaction.commit()\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'File\').click()\n-\n-        widget = \'form.widgets.title\'\n-        self.browser.getControl(name=widget).value = \'My file\'\n-        widget = \'form.widgets.description\'\n-        self.browser.getControl(name=widget).value = \'This is my doc file.\'\n-        file_path = os.path.join(os.path.dirname(__file__), \'file.doc\')\n-        file_ctl = self.browser.getControl(name=\'form.widgets.file\')\n-        with io.FileIO(file_path, \'rb\') as f:\n-            file_ctl.add_file(f, \'application/msword\', \'file.doc\')\n-        self.browser.getControl(\'Save\').click()\n-        self.assertTrue(self.browser.url.endswith(\'file.doc/view\'))\n+        self.browser.getLink("File").click()\n+\n+        widget = "form.widgets.title"\n+        self.browser.getControl(name=widget).value = "My file"\n+        widget = "form.widgets.description"\n+        self.browser.getControl(name=widget).value = "This is my doc file."\n+        file_path = os.path.join(os.path.dirname(__file__), "file.doc")\n+        file_ctl = self.browser.getControl(name="form.widgets.file")\n+        with io.FileIO(file_path, "rb") as f:\n+            file_ctl.add_file(f, "application/msword", "file.doc")\n+        self.browser.getControl("Save").click()\n+        self.assertTrue(self.browser.url.endswith("file.doc/view"))\n         # check icon\n         self.assertEqual(\n-            \'http://nohost/plone/++plone++bootstrap-icons/file-earmark-richtext.svg\',\n-            self._get_icon_url(self.portal["file.doc"].file.contentType))\n+            "http://nohost/plone/++plone++bootstrap-icons/file-earmark-richtext.svg",\n+            self._get_icon_url(self.portal["file.doc"].file.contentType),\n+        )\n \n     def test_mime_icon_odt_for_file_(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'File\').click()\n-\n-        widget = \'form.widgets.title\'\n-        self.browser.getControl(name=widget).value = \'My file\'\n-        widget = \'form.widgets.description\'\n-        self.browser.getControl(name=widget).value = \'This is my odt file.\'\n-        file_path = os.path.join(os.path.dirname(__file__), \'file.odt\')\n-        file_ctl = self.browser.getControl(name=\'form.widgets.file\')\n-        with io.FileIO(file_path, \'rb\') as f:\n-            file_ctl.add_file(\n-                f,\n-                \'application/vnd.oasis.opendocument.text\',\n-                \'file.odt\')\n-        self.browser.getControl(\'Save\').click()\n-        self.assertTrue(self.browser.url.endswith(\'file.odt/view\'))\n+        self.browser.getLink("File").click()\n+\n+        widget = "form.widgets.title"\n+        self.browser.getControl(name=widget).value = "My file"\n+        widget = "form.widgets.description"\n+        self.browser.getControl(name=widget).value = "This is my odt file."\n+        file_path = os.path.join(os.path.dirname(__file__), "file.odt")\n+        file_ctl = self.browser.getControl(name="form.widgets.file")\n+        with io.FileIO(file_path, "rb") as f:\n+            file_ctl.add_file(f, "application/vnd.oasis.opendocument.text", "file.odt")\n+        self.browser.getControl("Save").click()\n+        self.assertTrue(self.browser.url.endswith("file.odt/view"))\n         # check icon\n         self.assertEqual(\n-            \'http://nohost/plone/++plone++bootstrap-icons/file-earmark-richtext.svg\',\n-            self._get_icon_url(self.portal["file.odt"].file.contentType))\n+            "http://nohost/plone/++plone++bootstrap-icons/file-earmark-richtext.svg",\n+            self._get_icon_url(self.portal["file.odt"].file.contentType),\n+        )\n \n     def _get_icon_url(self, mime_type):\n         return self.icons.url("mimetype-" + mime_type)\ndiff --git a/plone/app/contenttypes/tests/test_folder.py b/plone/app/contenttypes/tests/test_folder.py\nindex e8bd54df6..47b17a2f1 100644\n--- a/plone/app/contenttypes/tests/test_folder.py\n+++ b/plone/app/contenttypes/tests/test_folder.py\n@@ -1,8 +1,11 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.browser.folder import FolderView\n from plone.app.contenttypes.interfaces import IFolder\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import (  # noqa\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)\n+from plone.app.contenttypes.testing import (  # noqa\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)\n from plone.app.contenttypes.tests.test_image import dummy_image\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n@@ -21,40 +24,29 @@ class FolderIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n     def test_schema(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Folder\')\n+        fti = queryUtility(IDexterityFTI, name="Folder")\n         schema = fti.lookupSchema()\n-        self.assertTrue(schema.getName().endswith(\'_0_Folder\'))\n+        self.assertTrue(schema.getName().endswith("_0_Folder"))\n \n     def test_fti(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Folder\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="Folder")\n         self.assertNotEqual(None, fti)\n \n     def test_factory(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Folder\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="Folder")\n         factory = fti.factory\n         new_object = createObject(factory)\n         self.assertTrue(IFolder.providedBy(new_object))\n \n     def test_adding(self):\n-        self.portal.invokeFactory(\n-            \'Folder\',\n-            \'doc1\'\n-        )\n-        self.assertTrue(IFolder.providedBy(self.portal[\'doc1\']))\n+        self.portal.invokeFactory("Folder", "doc1")\n+        self.assertTrue(IFolder.providedBy(self.portal["doc1"]))\n \n \n class FolderViewIntegrationTest(unittest.TestCase):\n@@ -62,47 +54,47 @@ class FolderViewIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n     def test_result_filtering(self):\n         """Test, if portal_state\'s friendly_types and the result method\'s\n         keyword arguments are included in the query.\n         """\n \n-        self.portal.invokeFactory(\'News Item\', \'newsitem\')\n-        self.portal.invokeFactory(\'Document\', \'document\')\n+        self.portal.invokeFactory("News Item", "newsitem")\n+        self.portal.invokeFactory("Document", "document")\n         view = FolderView(self.portal, self.request)\n \n         # Test, if all results are found.\n-        view.portal_state.friendly_types = lambda: [\'Document\', \'News Item\']\n+        view.portal_state.friendly_types = lambda: ["Document", "News Item"]\n         res = view.results()\n         self.assertEqual(len(res), 2)\n \n         # Test, if friendly_types does filter for types.\n-        view.portal_state.friendly_types = lambda: [\'Document\']\n+        view.portal_state.friendly_types = lambda: ["Document"]\n         res = view.results()\n         self.assertEqual(len(res), 1)\n \n         # Test, if friendly_types does filter for types.\n-        view.portal_state.friendly_types = lambda: [\'NotExistingType\']\n+        view.portal_state.friendly_types = lambda: ["NotExistingType"]\n         res = view.results()\n         self.assertEqual(len(res), 0)\n \n         # Test, if kwargs filtering is applied.\n-        view.portal_state.friendly_types = lambda: [\'NotExistingType\']\n+        view.portal_state.friendly_types = lambda: ["NotExistingType"]\n         res = view.results(\n-            object_provides=\'plone.app.contenttypes.interfaces.IDocument\'\n+            object_provides="plone.app.contenttypes.interfaces.IDocument"\n         )\n         self.assertEqual(len(res), 1)\n \n     def test_result_batching(self):\n         for idx in range(5):\n-            self.portal.invokeFactory(\'Document\', \'document{}\'.format(idx))\n+            self.portal.invokeFactory("Document", f"document{idx}")\n         request = self.request.clone()\n-        request.form[\'b_size\'] = 5\n+        request.form["b_size"] = 5\n         view = FolderView(self.portal, request)\n \n         batch = view.batch()\n@@ -110,14 +102,14 @@ def test_result_batching(self):\n         self.assertEqual(len([item for item in batch]), 5)\n         self.assertFalse(batch.has_next)\n \n-        self.portal.invokeFactory(\'Document\', \'document5\')\n+        self.portal.invokeFactory("Document", "document5")\n \n         batch = view.batch()\n         self.assertEqual(batch.length, 6)\n         self.assertEqual(len([item for item in batch]), 6)\n         self.assertFalse(batch.has_next)\n \n-        self.portal.invokeFactory(\'Document\', \'document6\')\n+        self.portal.invokeFactory("Document", "document6")\n \n         batch = view.batch()\n         self.assertEqual(batch.length, 5)\n@@ -131,39 +123,42 @@ class FolderFunctionalTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {}:{}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_add_folder(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(url=\'http://nohost/plone/++add++Folder\').click()\n-        widget = \'form.widgets.IDublinCore.title\'\n-        self.browser.getControl(name=widget).value = \'My folder\'\n-        widget = \'form.widgets.IShortName.id\'\n-        self.browser.getControl(name=widget).value = \'\'\n-        widget = \'form.widgets.IDublinCore.description\'\n-        self.browser.getControl(name=widget).value = \'This is my folder.\'\n-        self.browser.getControl(\'Save\').click()\n-        self.assertTrue(self.browser.url.endswith(\'my-folder/view\'))\n-        self.assertTrue(\'My folder\' in self.browser.contents)\n-        self.assertTrue(\'This is my folder\' in self.browser.contents)\n+        self.browser.getLink(url="http://nohost/plone/++add++Folder").click()\n+        widget = "form.widgets.IDublinCore.title"\n+        self.browser.getControl(name=widget).value = "My folder"\n+        widget = "form.widgets.IShortName.id"\n+        self.browser.getControl(name=widget).value = ""\n+        widget = "form.widgets.IDublinCore.description"\n+        self.browser.getControl(name=widget).value = "This is my folder."\n+        self.browser.getControl("Save").click()\n+        self.assertTrue(self.browser.url.endswith("my-folder/view"))\n+        self.assertTrue("My folder" in self.browser.contents)\n+        self.assertTrue("This is my folder" in self.browser.contents)\n \n     def test_add_folder_with_shortname(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(url=\'http://nohost/plone/++add++Folder\').click()\n-        widget = \'form.widgets.IDublinCore.title\'\n-        self.browser.getControl(name=widget).value = \'My folder\'\n-        widget = \'form.widgets.IShortName.id\'\n-        self.browser.getControl(name=widget).value = \'my-special-folder\'\n-        self.browser.getControl(\'Save\').click()\n-        self.assertTrue(self.browser.url.endswith(\'my-special-folder/view\'))\n+        self.browser.getLink(url="http://nohost/plone/++add++Folder").click()\n+        widget = "form.widgets.IDublinCore.title"\n+        self.browser.getControl(name=widget).value = "My folder"\n+        widget = "form.widgets.IShortName.id"\n+        self.browser.getControl(name=widget).value = "my-special-folder"\n+        self.browser.getControl("Save").click()\n+        self.assertTrue(self.browser.url.endswith("my-special-folder/view"))\n \n \n class FolderViewFunctionalTest(unittest.TestCase):\n@@ -171,67 +166,73 @@ class FolderViewFunctionalTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.portal_url = self.portal.absolute_url()\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\', title=\'My Folder\')\n+        self.portal.invokeFactory("Folder", id="folder", title="My Folder")\n         self.folder = self.portal.folder\n         self.folder_url = self.folder.absolute_url()\n-        self.folder.invokeFactory(\'Document\', id=\'doc1\', title=\'Document 1\')\n+        self.folder.invokeFactory("Document", id="doc1", title="Document 1")\n         import transaction\n+\n         transaction.commit()\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {}:{}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_folder_view(self):\n-        self.browser.open(self.folder_url + \'/view\')\n-        self.assertIn(\'My Folder\', self.browser.contents)\n-        self.assertIn(\'Document 1\', self.browser.contents)\n+        self.browser.open(self.folder_url + "/view")\n+        self.assertIn("My Folder", self.browser.contents)\n+        self.assertIn("Document 1", self.browser.contents)\n \n     def test_folder_summary_view(self):\n-        self.browser.open(self.folder_url + \'/summary_view\')\n-        self.assertIn(\'My Folder\', self.browser.contents)\n-        self.assertIn(\'Document 1\', self.browser.contents)\n+        self.browser.open(self.folder_url + "/summary_view")\n+        self.assertIn("My Folder", self.browser.contents)\n+        self.assertIn("Document 1", self.browser.contents)\n \n     def test_folder_full_view(self):\n-        self.browser.open(self.folder_url + \'/full_view\')\n-        self.assertIn(\'My Folder\', self.browser.contents)\n-        self.assertIn(\'Document 1\', self.browser.contents)\n+        self.browser.open(self.folder_url + "/full_view")\n+        self.assertIn("My Folder", self.browser.contents)\n+        self.assertIn("Document 1", self.browser.contents)\n \n     def test_folder_tabular_view(self):\n-        self.browser.open(self.folder_url + \'/tabular_view\')\n-        self.assertIn(\'My Folder\', self.browser.contents)\n-        self.assertIn(\'Document 1\', self.browser.contents)\n+        self.browser.open(self.folder_url + "/tabular_view")\n+        self.assertIn("My Folder", self.browser.contents)\n+        self.assertIn("Document 1", self.browser.contents)\n \n     def test_folder_album_view(self):\n-        self.folder.invokeFactory(\'Image\', id=\'image1\', title=\'Image 1\')\n-        img1 = self.folder[\'image1\']\n+        self.folder.invokeFactory("Image", id="image1", title="Image 1")\n+        img1 = self.folder["image1"]\n         img1.image = dummy_image()\n         import transaction\n+\n         transaction.commit()\n-        self.browser.open(self.folder_url + \'/album_view\')\n-        self.assertIn(\'My Folder\', self.browser.contents)\n+        self.browser.open(self.folder_url + "/album_view")\n+        self.assertIn("My Folder", self.browser.contents)\n         self.assertIn(\n             \'<img src="http://nohost/plone/folder/image1/@@images\',\n-            self.browser.contents)\n+            self.browser.contents,\n+        )\n \n     def test_list_item_wout_title(self):\n-        """In content listings, if a content object has no title use it\'s id.\n-        """\n-        self.folder.invokeFactory(\'Document\', id=\'doc_wout_title\')\n+        """In content listings, if a content object has no title use it\'s id."""\n+        self.folder.invokeFactory("Document", id="doc_wout_title")\n         import transaction\n+\n         transaction.commit()\n \n         # Document should be shown in listing view (and it\'s siblings)\n         self.browser.open(self.folder_url + "/listing_view")\n-        self.assertIn(\'doc_wout_title\', self.browser.contents)\n+        self.assertIn("doc_wout_title", self.browser.contents)\n \n         # And also in tabular view\n         self.browser.open(self.folder_url + "/tabular_view")\n-        self.assertIn(\'doc_wout_title\', self.browser.contents)\n+        self.assertIn("doc_wout_title", self.browser.contents)\ndiff --git a/plone/app/contenttypes/tests/test_image.py b/plone/app/contenttypes/tests/test_image.py\nindex 58d305c54..0df6a6b7b 100644\n--- a/plone/app/contenttypes/tests/test_image.py\n+++ b/plone/app/contenttypes/tests/test_image.py\n@@ -1,7 +1,10 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import IImage\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import (  # noqa\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)\n+from plone.app.contenttypes.testing import (  # noqa\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -15,19 +18,16 @@\n \n import io\n import os.path\n-import six\n import unittest\n \n \n-def dummy_image(filename=u\'image.jpg\'):\n+def dummy_image(filename="image.jpg"):\n     from plone.namedfile.file import NamedBlobImage\n+\n     filename = os.path.join(os.path.dirname(__file__), filename)\n-    with open(filename, \'rb\') as f:\n+    with open(filename, "rb") as f:\n         image_data = f.read()\n-    return NamedBlobImage(\n-        data=image_data,\n-        filename=filename\n-    )\n+    return NamedBlobImage(data=image_data, filename=filename)\n \n \n class ImageIntegrationTest(unittest.TestCase):\n@@ -35,95 +35,75 @@ class ImageIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n     def test_schema(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Image\')\n+        fti = queryUtility(IDexterityFTI, name="Image")\n         schema = fti.lookupSchema()\n-        self.assertTrue(schema.getName().endswith(\'_0_Image\'))\n+        self.assertTrue(schema.getName().endswith("_0_Image"))\n \n     def test_fti(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Image\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="Image")\n         self.assertNotEqual(None, fti)\n \n     def test_factory(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Image\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="Image")\n         factory = fti.factory\n         new_object = createObject(factory)\n         self.assertTrue(IImage.providedBy(new_object))\n \n     def test_adding(self):\n-        self.portal.invokeFactory(\n-            \'Image\',\n-            \'doc1\'\n-        )\n-        self.assertTrue(IImage.providedBy(self.portal[\'doc1\']))\n+        self.portal.invokeFactory("Image", "doc1")\n+        self.assertTrue(IImage.providedBy(self.portal["doc1"]))\n \n \n class ImageViewIntegrationTest(unittest.TestCase):\n \n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n-    if six.PY2:\n-        def assertRegex(self, value, pattern):\n-            # Python 2 backwards compatibility\n-            import re\n-            if not re.search(pattern, value):\n-                raise self.failureException(\n-                    \'%r not found in %s\' % (pattern, value)\n-                )\n-\n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Image\', \'image\')\n-        image = self.portal[\'image\']\n-        image.title = \'My Image\'\n-        image.description = \'This is my image.\'\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Image", "image")\n+        image = self.portal["image"]\n+        image.title = "My Image"\n+        image.description = "This is my image."\n         image.image = dummy_image()\n         self.image = image\n-        self.request.set(\'URL\', image.absolute_url())\n-        self.request.set(\'ACTUAL_URL\', image.absolute_url())\n+        self.request.set("URL", image.absolute_url())\n+        self.request.set("ACTUAL_URL", image.absolute_url())\n         alsoProvides(self.request, IPloneFormLayer)\n \n     def test_image_view(self):\n-        view = self.image.restrictedTraverse(\'@@view\')\n+        view = self.image.restrictedTraverse("@@view")\n \n         self.assertTrue(view())\n         self.assertEqual(view.request.response.status, 200)\n-        self.assertTrue(\'My Image\' in view())\n-        self.assertTrue(\'This is my image.\' in view())\n-\n-# XXX: Not working. See ImageFunctionalTest test_image_view_fullscreen\n-# Problem seems to be that the image is not properly uploaded.\n-#    def test_image_view_fullscreen(self):\n-#        view = getMultiAdapter(\n-#            (self.image, self.request),\n-#            name=\'image_view_fullscreen\'\n-#        )\n-#\n-#        self.assertTrue(view())\n-#        self.assertEqual(view.request.response.status, 200)\n-#        self.assertTrue(\'image.jpg\' in view())\n+        self.assertTrue("My Image" in view())\n+        self.assertTrue("This is my image." in view())\n+\n+    # XXX: Not working. See ImageFunctionalTest test_image_view_fullscreen\n+    # Problem seems to be that the image is not properly uploaded.\n+    #    def test_image_view_fullscreen(self):\n+    #        view = getMultiAdapter(\n+    #            (self.image, self.request),\n+    #            name=\'image_view_fullscreen\'\n+    #        )\n+    #\n+    #        self.assertTrue(view())\n+    #        self.assertEqual(view.request.response.status, 200)\n+    #        self.assertTrue(\'image.jpg\' in view())\n \n     def test_svg_image(self):\n-        self.image.image = dummy_image(u\'image.svg\')\n-        scale = self.image.restrictedTraverse(\'@@images\')\n+        self.image.image = dummy_image("image.svg")\n+        scale = self.image.restrictedTraverse("@@images")\n         self.assertRegex(\n-            scale.scale(\'image\', scale=\'large\').tag(),\n+            scale.scale("image", scale="large").tag(),\n             r\'<img src="http://nohost/plone/image/@@images/[a-z0-9\\-]*.svg" alt="My Image" title="My Image" height="[a-z0-9\\-]*" width="[a-z0-9\\-]*" />\',  # noqa: E501\n         )\n \n@@ -133,68 +113,69 @@ class ImageFunctionalTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {}:{}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_add_image(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'Image\').click()\n-        widget = \'form.widgets.title\'\n-        self.browser.getControl(name=widget).value = \'My image\'\n-        widget = \'form.widgets.description\'\n-        self.browser.getControl(name=widget).value = \'This is my image.\'\n-        widget = \'form.widgets.IShortName.id\'\n-        self.browser.getControl(name=widget).value = \'my-special-image.jpg\'\n-        image_path = os.path.join(os.path.dirname(__file__), \'image.jpg\')\n-        image_ctl = self.browser.getControl(name=\'form.widgets.image\')\n-        with io.FileIO(image_path, \'rb\') as f:\n-            image_ctl.add_file(f, \'image/png\', \'image.jpg\')\n-        self.browser.getControl(\'Save\').click()\n-        self.assertTrue(self.browser.url.endswith(\'image.jpg/view\'))\n-        self.assertIn(\'My image\', self.browser.contents)\n-        self.assertIn(\'This is my image\', self.browser.contents)\n-        self.assertIn(\'image.jpg\', self.browser.contents)\n+        self.browser.getLink("Image").click()\n+        widget = "form.widgets.title"\n+        self.browser.getControl(name=widget).value = "My image"\n+        widget = "form.widgets.description"\n+        self.browser.getControl(name=widget).value = "This is my image."\n+        widget = "form.widgets.IShortName.id"\n+        self.browser.getControl(name=widget).value = "my-special-image.jpg"\n+        image_path = os.path.join(os.path.dirname(__file__), "image.jpg")\n+        image_ctl = self.browser.getControl(name="form.widgets.image")\n+        with io.FileIO(image_path, "rb") as f:\n+            image_ctl.add_file(f, "image/png", "image.jpg")\n+        self.browser.getControl("Save").click()\n+        self.assertTrue(self.browser.url.endswith("image.jpg/view"))\n+        self.assertIn("My image", self.browser.contents)\n+        self.assertIn("This is my image", self.browser.contents)\n+        self.assertIn("image.jpg", self.browser.contents)\n \n     def test_add_image_with_shortname(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'Image\').click()\n-        widget = \'form.widgets.title\'\n-        self.browser.getControl(name=widget).value = \'My image\'\n-        widget = \'form.widgets.IShortName.id\'\n-        self.browser.getControl(name=widget).value = \'my-special-image.jpg\'\n-        image_path = os.path.join(os.path.dirname(__file__), \'image.jpg\')\n-        image_ctl = self.browser.getControl(name=\'form.widgets.image\')\n-        with io.FileIO(image_path, \'rb\') as f:\n-            image_ctl.add_file(f, \'image/png\', \'image.jpg\')\n-        self.browser.getControl(\'Save\').click()\n-        self.assertTrue(self.browser.url.endswith(\'my-special-image.jpg/view\'))\n+        self.browser.getLink("Image").click()\n+        widget = "form.widgets.title"\n+        self.browser.getControl(name=widget).value = "My image"\n+        widget = "form.widgets.IShortName.id"\n+        self.browser.getControl(name=widget).value = "my-special-image.jpg"\n+        image_path = os.path.join(os.path.dirname(__file__), "image.jpg")\n+        image_ctl = self.browser.getControl(name="form.widgets.image")\n+        with io.FileIO(image_path, "rb") as f:\n+            image_ctl.add_file(f, "image/png", "image.jpg")\n+        self.browser.getControl("Save").click()\n+        self.assertTrue(self.browser.url.endswith("my-special-image.jpg/view"))\n \n     def test_image_view_fullscreen(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'Image\').click()\n-        self.assertTrue(\'Title\' in self.browser.contents)\n-        self.assertTrue(\'Description\' in self.browser.contents)\n-        self.assertTrue(\'Text\' in self.browser.contents)\n-        widget = \'form.widgets.title\'\n-        self.browser.getControl(name=widget).value = \'My image\'\n-        widget = \'form.widgets.description\'\n-        self.browser.getControl(name=widget).value = \'This is my image.\'\n-        image_path = os.path.join(os.path.dirname(__file__), \'image.jpg\')\n-        image_ctl = self.browser.getControl(name=\'form.widgets.image\')\n-        with io.FileIO(image_path, \'rb\') as f:\n-            image_ctl.add_file(f, \'image/png\', \'image.jpg\')\n-        self.browser.getControl(\'Save\').click()\n-        self.browser.getLink(url=\'/image_view_fullscreen\').click()\n-        self.assertTrue(\n-            self.browser.url.endswith(\'image.jpg/image_view_fullscreen\')\n-        )\n-        self.assertTrue(\'My image\' in self.browser.contents)\n-        self.assertTrue(\'Back to site\' in self.browser.contents)\n+        self.browser.getLink("Image").click()\n+        self.assertTrue("Title" in self.browser.contents)\n+        self.assertTrue("Description" in self.browser.contents)\n+        self.assertTrue("Text" in self.browser.contents)\n+        widget = "form.widgets.title"\n+        self.browser.getControl(name=widget).value = "My image"\n+        widget = "form.widgets.description"\n+        self.browser.getControl(name=widget).value = "This is my image."\n+        image_path = os.path.join(os.path.dirname(__file__), "image.jpg")\n+        image_ctl = self.browser.getControl(name="form.widgets.image")\n+        with io.FileIO(image_path, "rb") as f:\n+            image_ctl.add_file(f, "image/png", "image.jpg")\n+        self.browser.getControl("Save").click()\n+        self.browser.getLink(url="/image_view_fullscreen").click()\n+        self.assertTrue(self.browser.url.endswith("image.jpg/image_view_fullscreen"))\n+        self.assertTrue("My image" in self.browser.contents)\n+        self.assertTrue("Back to site" in self.browser.contents)\ndiff --git a/plone/app/contenttypes/tests/test_indexes.py b/plone/app/contenttypes/tests/test_indexes.py\nindex 7c3eebb85..3211c9cbf 100644\n--- a/plone/app/contenttypes/tests/test_indexes.py\n+++ b/plone/app/contenttypes/tests/test_indexes.py\n@@ -1,5 +1,6 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import (  # noqa\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.textfield.value import RichTextValue\n@@ -15,38 +16,17 @@ class CatalogIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\')\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder")\n         self.folder = self.portal.folder\n-        self.folder.invokeFactory(\n-            \'Document\',\n-            \'document\'\n-        )\n-        self.folder.invokeFactory(\n-            \'News Item\',\n-            \'news_item\'\n-        )\n-        self.folder.invokeFactory(\n-            \'Link\',\n-            \'link\'\n-        )\n-        self.folder.invokeFactory(\n-            \'Image\',\n-            \'image\'\n-        )\n-        self.folder.invokeFactory(\n-            \'File\',\n-            \'file\'\n-        )\n-        self.folder.invokeFactory(\n-            \'Collection\',\n-            \'collection\'\n-        )\n-        self.folder.invokeFactory(\n-            \'Folder\',\n-            \'folder\'\n-        )\n+        self.folder.invokeFactory("Document", "document")\n+        self.folder.invokeFactory("News Item", "news_item")\n+        self.folder.invokeFactory("Link", "link")\n+        self.folder.invokeFactory("Image", "image")\n+        self.folder.invokeFactory("File", "file")\n+        self.folder.invokeFactory("Collection", "collection")\n+        self.folder.invokeFactory("Folder", "folder")\n         self.document = self.folder.document\n         self.news_item = self.folder.news_item\n         self.link = self.folder.link\n@@ -55,142 +35,125 @@ def setUp(self):\n         self.collection = self.folder.collection\n         # Note: this changes self.folder.\n         self.folder = self.folder.folder\n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n \n     def test_id_in_searchable_text_index(self):\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=\'document\',\n-        ))\n-        self.assertEqual(len(brains), 1)\n-        self.assertEqual(\n-            brains[0].getPath(),\n-            \'/plone/folder/document\'\n+        brains = self.catalog.searchResults(\n+            dict(\n+                SearchableText="document",\n+            )\n         )\n+        self.assertEqual(len(brains), 1)\n+        self.assertEqual(brains[0].getPath(), "/plone/folder/document")\n \n     def test_title_in_searchable_text_index(self):\n-        self.document.title = \'My title\'\n+        self.document.title = "My title"\n         self.document.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=\'My title\',\n-        ))\n-        self.assertEqual(len(brains), 1)\n-        self.assertEqual(\n-            brains[0].getPath(),\n-            \'/plone/folder/document\'\n+        brains = self.catalog.searchResults(\n+            dict(\n+                SearchableText="My title",\n+            )\n         )\n+        self.assertEqual(len(brains), 1)\n+        self.assertEqual(brains[0].getPath(), "/plone/folder/document")\n \n     def test_description_in_searchable_text_index(self):\n-        self.document.description = \'My description\'\n+        self.document.description = "My description"\n         self.document.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=\'My description\',\n-        ))\n-        self.assertEqual(len(brains), 1)\n-        self.assertEqual(\n-            brains[0].getPath(),\n-            \'/plone/folder/document\'\n+        brains = self.catalog.searchResults(\n+            dict(\n+                SearchableText="My description",\n+            )\n         )\n+        self.assertEqual(len(brains), 1)\n+        self.assertEqual(brains[0].getPath(), "/plone/folder/document")\n \n     def test_subject_in_searchable_text_index(self):\n-        self.document.setSubject([\'Apples\', \'Oranges\', ])\n+        self.document.setSubject(\n+            [\n+                "Apples",\n+                "Oranges",\n+            ]\n+        )\n         self.document.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=\'Apples\',\n-        ))\n-        self.assertEqual(len(brains), 1)\n-        self.assertEqual(\n-            brains[0].getPath(),\n-            \'/plone/folder/document\'\n+        brains = self.catalog.searchResults(\n+            dict(\n+                SearchableText="Apples",\n+            )\n         )\n+        self.assertEqual(len(brains), 1)\n+        self.assertEqual(brains[0].getPath(), "/plone/folder/document")\n \n     def test_folder_fields_in_searchable_text_index(self):\n-        self.folder.title = \'Carpeta\'\n-        self.folder.description = \'My description\'\n+        self.folder.title = "Carpeta"\n+        self.folder.description = "My description"\n         self.folder.reindexObject()\n         # Description\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=\'My description\',\n-        ))\n-        self.assertEqual(len(brains), 1)\n-        self.assertEqual(\n-            brains[0].getPath(),\n-            \'/plone/folder/folder\'\n+        brains = self.catalog.searchResults(\n+            dict(\n+                SearchableText="My description",\n+            )\n         )\n-        # Title\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=\'Carpeta\',\n-        ))\n         self.assertEqual(len(brains), 1)\n-        self.assertEqual(\n-            brains[0].getPath(),\n-            \'/plone/folder/folder\'\n+        self.assertEqual(brains[0].getPath(), "/plone/folder/folder")\n+        # Title\n+        brains = self.catalog.searchResults(\n+            dict(\n+                SearchableText="Carpeta",\n+            )\n         )\n+        self.assertEqual(len(brains), 1)\n+        self.assertEqual(brains[0].getPath(), "/plone/folder/folder")\n \n     def test_remote_url_in_searchable_text_index(self):\n-        self.link.remoteUrl = \'http://www.plone.org/\'\n+        self.link.remoteUrl = "http://www.plone.org/"\n         self.link.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=\'plone\',\n-            portal_type=\'Link\',\n-        ))\n-        self.assertEqual(len(brains), 1)\n-        self.assertEqual(\n-            brains[0].getPath(),\n-            \'/plone/folder/link\'\n+        brains = self.catalog.searchResults(\n+            dict(\n+                SearchableText="plone",\n+                portal_type="Link",\n+            )\n         )\n+        self.assertEqual(len(brains), 1)\n+        self.assertEqual(brains[0].getPath(), "/plone/folder/link")\n \n     def test_text_in_searchable_text_index(self):\n-        self.document.text = RichTextValue(\n-            u\'Lorem ipsum\',\n-            \'text/plain\',\n-            \'text/html\'\n-        )\n-        self.news_item.text = RichTextValue(\n-            u\'Lorem ipsum\',\n-            \'text/plain\',\n-            \'text/html\'\n-        )\n-        self.collection.text = RichTextValue(\n-            u\'Lorem ipsum\',\n-            \'text/plain\',\n-            \'text/html\'\n-        )\n+        self.document.text = RichTextValue("Lorem ipsum", "text/plain", "text/html")\n+        self.news_item.text = RichTextValue("Lorem ipsum", "text/plain", "text/html")\n+        self.collection.text = RichTextValue("Lorem ipsum", "text/plain", "text/html")\n         self.document.reindexObject()\n         self.news_item.reindexObject()\n         self.collection.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'Lorem ipsum\',\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                SearchableText="Lorem ipsum",\n+            )\n+        )\n         self.assertEqual(len(brains), 3)\n \n         paths = [it.getPath() for it in brains]\n-        self.assertTrue(\n-            \'/plone/folder/news_item\' in paths\n-        )\n-        self.assertTrue(\n-            \'/plone/folder/document\' in paths\n-        )\n-        self.assertTrue(\n-            \'/plone/folder/collection\' in paths\n-        )\n+        self.assertTrue("/plone/folder/news_item" in paths)\n+        self.assertTrue("/plone/folder/document" in paths)\n+        self.assertTrue("/plone/folder/collection" in paths)\n \n     def test_html_stripped_searchable_text_index(self):\n-        """Ensure, html tags are stripped out from the content and not indexed.\n-        """\n+        """Ensure, html tags are stripped out from the content and not indexed."""\n         self.document.text = RichTextValue(\n-            u\'<p>Lorem <b>ipsum</b></p>\',\n-            mimeType=\'text/html\',\n-            outputMimeType=\'text/html\'\n+            "<p>Lorem <b>ipsum</b></p>",\n+            mimeType="text/html",\n+            outputMimeType="text/html",\n         )\n         self.document.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'Lorem ipsum\',\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                SearchableText="Lorem ipsum",\n+            )\n+        )\n         self.assertEqual(len(brains), 1)\n         rid = brains[0].getRID()\n         index_data = self.catalog.getIndexDataForRID(rid)\n-        self.assertEqual(index_data[\'SearchableText\'].count(\'p\'), 0)\n-        self.assertEqual(index_data[\'SearchableText\'].count(\'b\'), 0)\n+        self.assertEqual(index_data["SearchableText"].count("p"), 0)\n+        self.assertEqual(index_data["SearchableText"].count("b"), 0)\n \n     def test_raw_text_searchable_text_index(self):\n         """Ensure that raw text is used, instead of output.\n@@ -201,119 +164,108 @@ def test_raw_text_searchable_text_index(self):\n         searchable text, but you will usually have a hard time setting it.\n         """\n         self.document.text = RichTextValue(\n-            u"""<script type="text/javascript">alert(\'Lorem ipsum\')"""\n-            u"""</script>""",\n-            mimeType=\'text/html\',\n-            outputMimeType=\'text/x-html-safe\'\n+            """<script type="text/javascript">alert(\'Lorem ipsum\')""" """</script>""",\n+            mimeType="text/html",\n+            outputMimeType="text/x-html-safe",\n         )\n         self.document.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'Lorem ipsum\',\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                SearchableText="Lorem ipsum",\n+            )\n+        )\n         self.assertEqual(len(brains), 1)\n         rid = brains[0].getRID()\n         index_data = self.catalog.getIndexDataForRID(rid)\n-        self.assertEqual(index_data[\'SearchableText\'].count(\'script\'), 0)\n-        self.assertEqual(index_data[\'SearchableText\'].count(\'text\'), 0)\n+        self.assertEqual(index_data["SearchableText"].count("script"), 0)\n+        self.assertEqual(index_data["SearchableText"].count("text"), 0)\n \n     def test_file_fulltext_in_searchable_text_plain(self):\n         from plone.namedfile.file import NamedBlobFile\n-        data = (\'Lorem ipsum. K\xc3\xb6ln <!-- ...oder M\xc3\xbcnchen, das ist hier die \'\n-                \'Frage. -->\')\n-        test_file = NamedBlobFile(data=data, filename=u\'string.txt\')\n+\n+        data = "Lorem ipsum. K\xc3\xb6ln <!-- ...oder M\xc3\xbcnchen, das ist hier die " "Frage. -->"\n+        test_file = NamedBlobFile(data=data, filename="string.txt")\n \n         primary_field_info = IPrimaryFieldInfo(self.file)\n         primary_field_info.field.set(self.file, test_file)\n         self.file.reindexObject()\n \n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'Lorem ipsum\'))\n+        brains = self.catalog.searchResults(dict(SearchableText="Lorem ipsum"))\n         self.assertEqual(len(brains), 1)\n \n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'K\xc3\xb6ln\'))\n+        brains = self.catalog.searchResults(dict(SearchableText="K\xc3\xb6ln"))\n         self.assertEqual(len(brains), 1)\n \n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'M\xc3\xbcnchen\'))\n+        brains = self.catalog.searchResults(dict(SearchableText="M\xc3\xbcnchen"))\n         self.assertEqual(len(brains), 1)\n \n     def test_file_fulltext_in_searchable_text_index_string(self):\n         from plone.namedfile.file import NamedBlobFile\n-        data = (\'Lorem ipsum. K\xc3\xb6ln <!-- ...oder M\xc3\xbcnchen, das ist hier die \'\n-                \'Frage. -->\')\n-        test_file = NamedBlobFile(data=data, filename=u\'string.html\')\n+\n+        data = "Lorem ipsum. K\xc3\xb6ln <!-- ...oder M\xc3\xbcnchen, das ist hier die " "Frage. -->"\n+        test_file = NamedBlobFile(data=data, filename="string.html")\n \n         primary_field_info = IPrimaryFieldInfo(self.file)\n         primary_field_info.field.set(self.file, test_file)\n         self.file.reindexObject()\n \n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'Lorem ipsum\'))\n+        brains = self.catalog.searchResults(dict(SearchableText="Lorem ipsum"))\n         self.assertEqual(len(brains), 1)\n \n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'K\xc3\xb6ln\'))\n+        brains = self.catalog.searchResults(dict(SearchableText="K\xc3\xb6ln"))\n         self.assertEqual(len(brains), 1)\n \n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'M\xc3\xbcnchen\'))\n+        brains = self.catalog.searchResults(dict(SearchableText="M\xc3\xbcnchen"))\n         self.assertEqual(len(brains), 0)  # hint: html comment is stripped\n \n     def test_file_fulltext_in_searchable_text_index_unicode(self):\n         from plone.namedfile.file import NamedBlobFile\n-        data = (u\'Lorem ipsum K\xc3\xb6ln <!-- ...oder M\xc3\xbcnchen, das ist hier die \'\n-                u\'Frage. -->\')\n-        test_file = NamedBlobFile(data=data, filename=u\'unicode.html\')\n+\n+        data = "Lorem ipsum K\xc3\xb6ln <!-- ...oder M\xc3\xbcnchen, das ist hier die " "Frage. -->"\n+        test_file = NamedBlobFile(data=data, filename="unicode.html")\n \n         primary_field_info = IPrimaryFieldInfo(self.file)\n         primary_field_info.field.set(self.file, test_file)\n         self.file.reindexObject()\n \n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'Lorem ipsum\'))\n+        brains = self.catalog.searchResults(dict(SearchableText="Lorem ipsum"))\n         self.assertEqual(len(brains), 1)\n \n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'K\xc3\xb6ln\'))\n+        brains = self.catalog.searchResults(dict(SearchableText="K\xc3\xb6ln"))\n         self.assertEqual(len(brains), 1)\n \n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'M\xc3\xbcnchen\'))\n+        brains = self.catalog.searchResults(dict(SearchableText="M\xc3\xbcnchen"))\n         self.assertEqual(len(brains), 0)  # hint: html comment is stripped\n \n     def test_title_in_metadata(self):\n-        self.document.title = \'My title\'\n+        self.document.title = "My title"\n         self.document.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            path=\'/plone/folder/document\',\n-        ))\n-        self.assertEqual(\n-            brains[0].Title,\n-            \'My title\'\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path="/plone/folder/document",\n+            )\n         )\n+        self.assertEqual(brains[0].Title, "My title")\n \n     def test_description_in_metadata(self):\n-        self.document.description = \'My description\'\n+        self.document.description = "My description"\n         self.document.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            path=\'/plone/folder/document\',\n-        ))\n-        self.assertEqual(\n-            brains[0].Description,\n-            \'My description\'\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path="/plone/folder/document",\n+            )\n         )\n+        self.assertEqual(brains[0].Description, "My description")\n \n     def test_get_remote_url_in_metadata(self):\n-        self.link.remoteUrl = \'http://www.plone.org/\'\n+        self.link.remoteUrl = "http://www.plone.org/"\n         self.link.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            path=\'/plone/folder/link\',\n-        ))\n-        self.assertEqual(\n-            brains[0].getRemoteUrl,\n-            \'http://www.plone.org/\'\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path="/plone/folder/link",\n+            )\n         )\n+        self.assertEqual(brains[0].getRemoteUrl, "http://www.plone.org/")\n \n     def test_get_remote_url_in_metadata_variables_replaced(self):\n         """Link URL must be in catalog with the variables\n@@ -321,15 +273,14 @@ def test_get_remote_url_in_metadata_variables_replaced(self):\n         paths. Otherwise the navigation portlet will show an wrong URL for the\n         link object. (See issue #110)\n         """\n-        self.link.remoteUrl = \'${navigation_root_url}/my-item\'\n+        self.link.remoteUrl = "${navigation_root_url}/my-item"\n         self.link.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            path=\'/plone/folder/link\',\n-        ))\n-        self.assertEqual(\n-            brains[0].getRemoteUrl,\n-            \'/plone/my-item\'\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path="/plone/folder/link",\n+            )\n         )\n+        self.assertEqual(brains[0].getRemoteUrl, "/plone/my-item")\n \n     def test_getobjsize_image(self):\n         from .test_image import dummy_image\n@@ -338,34 +289,36 @@ def test_getobjsize_image(self):\n         primary_field_info.field.set(self.image, dummy_image())\n         self.image.reindexObject()\n \n-        brains = self.catalog.searchResults(dict(\n-            path=\'/plone/folder/image\',\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path="/plone/folder/image",\n+            )\n+        )\n \n         self.assertEqual(\n-            \'5.0 KB\',\n+            "5.0 KB",\n             brains[0].getObjSize,\n         )\n \n     def test_getobjsize_file(self):\n         from plone.namedfile.file import NamedBlobFile\n \n-        filename = os.path.join(os.path.dirname(__file__), u\'image.jpg\')\n-        with open(filename, \'rb\') as f:\n+        filename = os.path.join(os.path.dirname(__file__), "image.jpg")\n+        with open(filename, "rb") as f:\n             file_data = f.read()\n-        test_file = NamedBlobFile(\n-            data=file_data,\n-            filename=filename)\n+        test_file = NamedBlobFile(data=file_data, filename=filename)\n \n         primary_field_info = IPrimaryFieldInfo(self.file)\n         primary_field_info.field.set(self.file, test_file)\n         self.file.reindexObject()\n \n-        brains = self.catalog.searchResults(dict(\n-            path=\'/plone/folder/file\',\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path="/plone/folder/file",\n+            )\n+        )\n \n         self.assertEqual(\n-            \'5.0 KB\',\n+            "5.0 KB",\n             brains[0].getObjSize,\n         )\ndiff --git a/plone/app/contenttypes/tests/test_link.py b/plone/app/contenttypes/tests/test_link.py\nindex a9a824976..7593f3619 100644\n--- a/plone/app/contenttypes/tests/test_link.py\n+++ b/plone/app/contenttypes/tests/test_link.py\n@@ -1,16 +1,19 @@\n-# -*- coding: utf-8 -*-\n from datetime import datetime\n-from plone.app.z3cform.converters import LinkWidgetDataConverter\n-from plone.app.z3cform.widget import LinkWidget\n from plone.app.contenttypes.interfaces import ILink\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import (  # noqa\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)\n+from plone.app.contenttypes.testing import (  # noqa\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n+from plone.app.z3cform.converters import LinkWidgetDataConverter\n from plone.app.z3cform.interfaces import IPloneFormLayer\n+from plone.app.z3cform.widget import LinkWidget\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.testing.zope import Browser\n from plone.uuid.interfaces import IUUID\n@@ -31,40 +34,29 @@ class LinkIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n     def test_schema(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Link\')\n+        fti = queryUtility(IDexterityFTI, name="Link")\n         schema = fti.lookupSchema()\n-        self.assertTrue(schema.getName().endswith(\'_0_Link\'))\n+        self.assertTrue(schema.getName().endswith("_0_Link"))\n \n     def test_fti(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Link\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="Link")\n         self.assertNotEqual(None, fti)\n \n     def test_factory(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Link\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="Link")\n         factory = fti.factory\n         new_object = createObject(factory)\n         self.assertTrue(ILink.providedBy(new_object))\n \n     def test_adding(self):\n-        self.portal.invokeFactory(\n-            \'Link\',\n-            \'doc1\'\n-        )\n-        self.assertTrue(ILink.providedBy(self.portal[\'doc1\']))\n+        self.portal.invokeFactory("Link", "doc1")\n+        self.assertTrue(ILink.providedBy(self.portal["doc1"]))\n \n \n class LinkViewIntegrationTest(unittest.TestCase):\n@@ -72,18 +64,18 @@ class LinkViewIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n         self.response = self.request.response\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Link\', \'link\')\n-        link = self.portal[\'link\']\n-        link.title = \'My Link\'\n-        link.description = \'This is my link.\'\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Link", "link")\n+        link = self.portal["link"]\n+        link.title = "My Link"\n+        link.description = "This is my link."\n         self.link = link\n-        self.request.set(\'URL\', link.absolute_url())\n-        self.request.set(\'ACTUAL_URL\', link.absolute_url())\n+        self.request.set("URL", link.absolute_url())\n+        self.request.set("ACTUAL_URL", link.absolute_url())\n         alsoProvides(self.request, IPloneFormLayer)\n \n         # setup manually the correct browserlayer, see:\n@@ -91,14 +83,14 @@ def setUp(self):\n         notify(BeforeTraverseEvent(self.portal, self.request))\n \n     def test_link_redirect_view(self):\n-        view = self.link.restrictedTraverse(\'@@view\')\n+        view = self.link.restrictedTraverse("@@view")\n         self.assertTrue(view())\n         self.assertEqual(view.request.response.status, 200)\n-        self.assertTrue(\'My Link\' in view())\n-        self.assertTrue(\'This is my link.\' in view())\n+        self.assertTrue("My Link" in view())\n+        self.assertTrue("This is my link." in view())\n \n     def test_link_redirect_view_external_url(self):\n-        self.link.remoteUrl = \'http://www.plone.org\'\n+        self.link.remoteUrl = "http://www.plone.org"\n         self._publish(self.link)\n         view = self._get_link_redirect_view(self.link)\n \n@@ -109,10 +101,10 @@ def test_link_redirect_view_external_url(self):\n         # As anonymous: redirect\n         logout()\n         self.assertTrue(view())\n-        self._assert_redirect(\'http://www.plone.org\')\n+        self._assert_redirect("http://www.plone.org")\n \n     def test_link_redirect_view_absolute_path(self):\n-        self.link.remoteUrl = \'/plone/my-folder/my-item\'\n+        self.link.remoteUrl = "/plone/my-folder/my-item"\n         self._publish(self.link)\n         view = self._get_link_redirect_view(self.link)\n \n@@ -123,10 +115,10 @@ def test_link_redirect_view_absolute_path(self):\n         # As anonymous: redirect\n         logout()\n         self.assertTrue(view())\n-        self._assert_redirect(\'http://nohost/plone/my-folder/my-item\')\n+        self._assert_redirect("http://nohost/plone/my-folder/my-item")\n \n     def test_link_redirect_view_relative_path(self):\n-        self.link.remoteUrl = \'../my-item\'\n+        self.link.remoteUrl = "../my-item"\n         self._publish(self.link)\n         view = self._get_link_redirect_view(self.link)\n \n@@ -139,10 +131,10 @@ def test_link_redirect_view_relative_path(self):\n         self.assertTrue(view())\n         # The following URL will be redirected to:\n         # "http://nohost/plone/my-item"\n-        self._assert_redirect(\'http://nohost/plone/link/../my-item\')\n+        self._assert_redirect("http://nohost/plone/link/../my-item")\n \n     def test_link_redirect_view_path_with_variable(self):\n-        self.link.remoteUrl = \'${navigation_root_url}/my-folder/my-item\'\n+        self.link.remoteUrl = "${navigation_root_url}/my-folder/my-item"\n         self._publish(self.link)\n         view = self._get_link_redirect_view(self.link)\n \n@@ -153,16 +145,16 @@ def test_link_redirect_view_path_with_variable(self):\n         # As anonymous: redirect\n         logout()\n         self.assertTrue(view())\n-        self._assert_redirect(\'http://nohost/plone/my-folder/my-item\')\n+        self._assert_redirect("http://nohost/plone/my-folder/my-item")\n \n         # Should give the same result with ${portal_url}\n-        self.link.remoteUrl = \'${portal_url}/my-folder/my-item\'\n+        self.link.remoteUrl = "${portal_url}/my-folder/my-item"\n         self.assertTrue(view())\n-        self._assert_redirect(\'http://nohost/plone/my-folder/my-item\')\n+        self._assert_redirect("http://nohost/plone/my-folder/my-item")\n \n     def test_link_redirect_view_path_with_variable_and_parameters(self):\n         # https://github.com/plone/plone.app.contenttypes/issues/457\n-        self.link.remoteUrl = \'${portal_url}/@@search?SearchableText=Plone\'\n+        self.link.remoteUrl = "${portal_url}/@@search?SearchableText=Plone"\n         self._publish(self.link)\n         view = self._get_link_redirect_view(self.link)\n \n@@ -174,11 +166,11 @@ def test_link_redirect_view_path_with_variable_and_parameters(self):\n         logout()\n         self.assertTrue(view())\n         self._assert_redirect(\n-            \'http://nohost/plone/@@search?SearchableText=Plone\',\n+            "http://nohost/plone/@@search?SearchableText=Plone",\n         )\n \n     def test_mailto_type(self):\n-        self.link.remoteUrl = \'mailto:stress@test.us\'\n+        self.link.remoteUrl = "mailto:stress@test.us"\n         view = self._get_link_redirect_view(self.link)\n         self._publish(self.link)\n         logout()\n@@ -187,7 +179,7 @@ def test_mailto_type(self):\n         self._assert_response_OK()\n \n     def test_tel_type(self):\n-        self.link.remoteUrl = \'tel:123\'\n+        self.link.remoteUrl = "tel:123"\n         view = self._get_link_redirect_view(self.link)\n         self._publish(self.link)\n         logout()\n@@ -196,7 +188,7 @@ def test_tel_type(self):\n         self._assert_response_OK()\n \n     def test_callto_type(self):\n-        self.link.remoteUrl = \'callto:123\'\n+        self.link.remoteUrl = "callto:123"\n         view = self._get_link_redirect_view(self.link)\n         self._publish(self.link)\n         logout()\n@@ -205,31 +197,25 @@ def test_callto_type(self):\n         self._assert_response_OK()\n \n     def test_webdav_type(self):\n-        self.link.remoteUrl = \'webdav://web.site/resource\'\n+        self.link.remoteUrl = "webdav://web.site/resource"\n         view = self._get_link_redirect_view(self.link)\n         self._publish(self.link)\n         logout()\n         rendered = view()\n-        self.assertIn(\n-            \'href="webdav://web.site/resource"\',\n-            rendered\n-        )\n+        self.assertIn(\'href="webdav://web.site/resource"\', rendered)\n         self._assert_response_OK()\n \n     def test_caldav_type(self):\n-        self.link.remoteUrl = \'caldav://calendar.site/resource\'\n+        self.link.remoteUrl = "caldav://calendar.site/resource"\n         view = self._get_link_redirect_view(self.link)\n         self._publish(self.link)\n         logout()\n         rendered = view()\n-        self.assertIn(\n-            \'href="caldav://calendar.site/resource"\',\n-            rendered\n-        )\n+        self.assertIn(\'href="caldav://calendar.site/resource"\', rendered)\n         self._assert_response_OK()\n \n     def test_file_type(self):\n-        self.link.remoteUrl = \'file:///some/file/on/your/system\'\n+        self.link.remoteUrl = "file:///some/file/on/your/system"\n         view = self._get_link_redirect_view(self.link)\n         self._publish(self.link)\n         logout()\n@@ -237,7 +223,7 @@ def test_file_type(self):\n         self._assert_redirect(self.link.remoteUrl)\n \n     def test_ftp_type(self):\n-        self.link.remoteUrl = \'ftp://thereIsNoSuchDomain.isThere{0}\'.format(\n+        self.link.remoteUrl = "ftp://thereIsNoSuchDomain.isThere{}".format(\n             datetime.now().isoformat()\n         )\n         view = self._get_link_redirect_view(self.link)\n@@ -247,18 +233,18 @@ def test_ftp_type(self):\n         self._assert_redirect(self.link.remoteUrl)\n \n     def _publish(self, obj):\n-        portal_workflow = getToolByName(self.portal, \'portal_workflow\')\n-        portal_workflow.doActionFor(obj, \'publish\')\n+        portal_workflow = getToolByName(self.portal, "portal_workflow")\n+        portal_workflow.doActionFor(obj, "publish")\n \n     def _assert_redirect(self, url):\n         self.assertEqual(self.response.status, 302)\n-        self.assertEqual(self.response.headers[\'location\'], url)\n+        self.assertEqual(self.response.headers["location"], url)\n \n     def _assert_response_OK(self):\n         self.assertEqual(self.response.status, 200)\n \n     def _get_link_redirect_view(self, obj):\n-        return getMultiAdapter((obj, self.request), name=\'link_redirect_view\')\n+        return getMultiAdapter((obj, self.request), name="link_redirect_view")\n \n \n class LinkFunctionalTest(unittest.TestCase):\n@@ -266,116 +252,120 @@ class LinkFunctionalTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {}:{}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_add_link(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'Link\').click()\n-        self.browser.getControl(name=\'form.widgets.IDublinCore.title\')\\\n-            .value = \'My link\'\n-        self.browser.getControl(name=\'form.widgets.IDublinCore.description\')\\\n-            .value = \'This is my link.\'\n-        self.browser.getControl(name=\'form.widgets.IShortName.id\')\\\n-            .value = \'my-special-link\'\n-        self.browser.getControl(name=\'form.widgets.remoteUrl.external\')\\\n-            .value = \'https://plone.org\'\n-        self.browser.getControl(\'Save\').click()\n-\n-        self.assertTrue(self.browser.url.endswith(\'my-special-link/view\'))\n-        self.assertTrue(\'My link\' in self.browser.contents)\n-        self.assertTrue(\'This is my link\' in self.browser.contents)\n+        self.browser.getLink("Link").click()\n+        self.browser.getControl(name="form.widgets.IDublinCore.title").value = "My link"\n+        self.browser.getControl(\n+            name="form.widgets.IDublinCore.description"\n+        ).value = "This is my link."\n+        self.browser.getControl(\n+            name="form.widgets.IShortName.id"\n+        ).value = "my-special-link"\n+        self.browser.getControl(\n+            name="form.widgets.remoteUrl.external"\n+        ).value = "https://plone.org"\n+        self.browser.getControl("Save").click()\n+\n+        self.assertTrue(self.browser.url.endswith("my-special-link/view"))\n+        self.assertTrue("My link" in self.browser.contents)\n+        self.assertTrue("This is my link" in self.browser.contents)\n \n \n class LinkWidgetIntegrationTest(unittest.TestCase):\n \n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n-    default_result = {\'internal\': u\'\',\n-                      \'external\': u\'\',\n-                      \'email\': u\'\',\n-                      \'email_subject\': u\'\'}\n+    default_result = {\n+        "internal": "",\n+        "external": "",\n+        "email": "",\n+        "email_subject": "",\n+    }\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n         self.response = self.request.response\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        lid = self.portal.invokeFactory(\'Link\', \'link\',\n-                                        title=\'My Link\',\n-                                        description="This is my link.")\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        lid = self.portal.invokeFactory(\n+            "Link", "link", title="My Link", description="This is my link."\n+        )\n         self.link = self.portal[lid]\n         self.link_field = TextLine()\n         self.widget = LinkWidget(self.request)\n \n     def test_dc_towidget_external(self):\n-        url = \'http://www.example.org\'\n+        url = "http://www.example.org"\n         self.link.remoteUrl = url\n \n         converter = LinkWidgetDataConverter(self.link_field, self.widget)\n         expected = self.default_result.copy()\n-        expected[\'external\'] = url\n+        expected["external"] = url\n         self.assertEqual(converter.toWidgetValue(url), expected)\n \n     def test_dc_towidget_internal(self):\n-        self.portal.invokeFactory(\'Document\', \'doc1\',\n-                                  title=\'A document\',\n-                                  description="This is a document.")\n-        doc1 = self.portal[\'doc1\']\n+        self.portal.invokeFactory(\n+            "Document", "doc1", title="A document", description="This is a document."\n+        )\n+        doc1 = self.portal["doc1"]\n         url = doc1.absolute_url()\n         converter = LinkWidgetDataConverter(self.link_field, self.widget)\n         expected = self.default_result.copy()\n-        expected[\'internal\'] = IUUID(doc1)\n+        expected["internal"] = IUUID(doc1)\n         self.assertEqual(converter.toWidgetValue(url), expected)\n \n     def test_dc_towidget_mail(self):\n-        url = u\'mailto:foo@.example.org\'\n+        url = "mailto:foo@.example.org"\n         converter = LinkWidgetDataConverter(self.link_field, self.widget)\n         expected = self.default_result.copy()\n-        expected[\'email\'] = url[7:]   # mailto is cut\n+        expected["email"] = url[7:]  # mailto is cut\n         self.assertEqual(converter.toWidgetValue(url), expected)\n \n     def test_dc_towidget_mail_subject(self):\n-        url = \'mailto:foo@.example.org?subject=A subject\'\n+        url = "mailto:foo@.example.org?subject=A subject"\n         converter = LinkWidgetDataConverter(self.link_field, self.widget)\n         expected = self.default_result.copy()\n-        expected[\'email\'] = u\'foo@.example.org\'\n-        expected[\'email_subject\'] = u\'A subject\'\n+        expected["email"] = "foo@.example.org"\n+        expected["email_subject"] = "A subject"\n         self.assertEqual(converter.toWidgetValue(url), expected)\n \n     def test_dc_illegal(self):\n-        url = \'foo\'\n+        url = "foo"\n         converter = LinkWidgetDataConverter(self.link_field, self.widget)\n         expected = self.default_result.copy()\n-        expected[\'external\'] = url\n+        expected["external"] = url\n         self.assertEqual(converter.toWidgetValue(url), expected)\n \n     def test_dc_var(self):\n-        url = \'${portal_url}/foo\'\n+        url = "${portal_url}/foo"\n         converter = LinkWidgetDataConverter(self.link_field, self.widget)\n         expected = self.default_result.copy()\n-        expected[\'external\'] = url\n+        expected["external"] = url\n         self.assertEqual(converter.toWidgetValue(url), expected)\n \n     def test_var_replacement_in_view(self):\n-        view = getMultiAdapter(\n-            (self.link, self.request),\n-            name=\'link_redirect_view\'\n-        )\n+        view = getMultiAdapter((self.link, self.request), name="link_redirect_view")\n \n-        self.link.remoteUrl = \'${portal_url}\'\n-        self.assertEqual(view.url(), \'/plone\')\n-        self.assertEqual(view.absolute_target_url(), \'http://nohost/plone\')\n+        self.link.remoteUrl = "${portal_url}"\n+        self.assertEqual(view.url(), "/plone")\n+        self.assertEqual(view.absolute_target_url(), "http://nohost/plone")\n \n-        self.link.remoteUrl = \'${navigation_root_url}\'\n-        self.assertEqual(view.url(), \'/plone\')\n-        self.assertEqual(view.absolute_target_url(), \'http://nohost/plone\')\n+        self.link.remoteUrl = "${navigation_root_url}"\n+        self.assertEqual(view.url(), "/plone")\n+        self.assertEqual(view.absolute_target_url(), "http://nohost/plone")\ndiff --git a/plone/app/contenttypes/tests/test_news_item.py b/plone/app/contenttypes/tests/test_news_item.py\nindex 41c89a633..11e2efc49 100644\n--- a/plone/app/contenttypes/tests/test_news_item.py\n+++ b/plone/app/contenttypes/tests/test_news_item.py\n@@ -1,7 +1,10 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.interfaces import INewsItem\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import (  # noqa\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)\n+from plone.app.contenttypes.testing import (  # noqa\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -25,82 +28,66 @@ class NewsItemIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        from plone.app.contenttypes.interfaces import (\n-            IPloneAppContenttypesLayer\n-        )\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n+\n         alsoProvides(self.request, IPloneAppContenttypesLayer)\n         alsoProvides(self.request, IPloneFormLayer)\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n     def test_schema(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'News Item\')\n+        fti = queryUtility(IDexterityFTI, name="News Item")\n         schema = fti.lookupSchema()\n-        self.assertTrue(schema.getName().endswith(\'_0_News_1_Item\'))\n+        self.assertTrue(schema.getName().endswith("_0_News_1_Item"))\n \n     def test_fti(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'News Item\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="News Item")\n         self.assertNotEqual(None, fti)\n \n     def test_factory(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'News Item\'\n-        )\n+        fti = queryUtility(IDexterityFTI, name="News Item")\n         factory = fti.factory\n         new_object = createObject(factory)\n         self.assertTrue(INewsItem.providedBy(new_object))\n \n     def test_adding(self):\n-        self.portal.invokeFactory(\n-            \'News Item\',\n-            \'doc1\'\n-        )\n-        self.assertTrue(INewsItem.providedBy(self.portal[\'doc1\']))\n+        self.portal.invokeFactory("News Item", "doc1")\n+        self.assertTrue(INewsItem.providedBy(self.portal["doc1"]))\n \n     def test_view(self):\n-        self.portal.invokeFactory(\'News Item\', \'news_item\')\n-        news_item = self.portal[\'news_item\']\n-        news_item.title = \'My News Item\'\n-        news_item.description = \'This is my news item.\'\n-        news_item.text = RichTextValue(\n-            u\'Lorem ipsum\',\n-            \'text/plain\',\n-            \'text/html\'\n-        )\n-        self.request.set(\'URL\', news_item.absolute_url())\n-        self.request.set(\'ACTUAL_URL\', news_item.absolute_url())\n-        view = news_item.restrictedTraverse(\'@@view\')\n+        self.portal.invokeFactory("News Item", "news_item")\n+        news_item = self.portal["news_item"]\n+        news_item.title = "My News Item"\n+        news_item.description = "This is my news item."\n+        news_item.text = RichTextValue("Lorem ipsum", "text/plain", "text/html")\n+        self.request.set("URL", news_item.absolute_url())\n+        self.request.set("ACTUAL_URL", news_item.absolute_url())\n+        view = news_item.restrictedTraverse("@@view")\n \n         self.assertTrue(view())\n         self.assertEqual(view.request.response.status, 200)\n-        self.assertTrue(\'My News Item\' in view())\n-        self.assertTrue(\'This is my news item.\' in view())\n-        self.assertTrue(\'Lorem ipsum\' in view())\n+        self.assertTrue("My News Item" in view())\n+        self.assertTrue("This is my news item." in view())\n+        self.assertTrue("Lorem ipsum" in view())\n \n     def test_leadimage_viewlet_does_not_show_up_for_newsitems(self):\n-        from zope.interface import alsoProvides\n         from plone.app.contenttypes.behaviors.leadimage import ILeadImage\n+        from zope.interface import alsoProvides\n+\n         alsoProvides(self.request, ILeadImage)\n         view = View(self.portal, self.request)\n         manager = queryMultiAdapter(\n             (self.portal, self.request, view),\n             IViewletManager,\n-            \'plone.abovecontenttitle\',\n-            default=None\n+            "plone.abovecontenttitle",\n+            default=None,\n         )\n         self.assertTrue(manager)\n         manager.update()\n         leadimage_viewlet = [\n-            v for v in manager.viewlets\n-            if v.__name__ == \'contentleadimage\'\n+            v for v in manager.viewlets if v.__name__ == "contentleadimage"\n         ]\n         self.assertEqual(len(leadimage_viewlet), 0)\n \n@@ -110,42 +97,49 @@ class NewsItemFunctionalTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD, )\n+            "Authorization",\n+            "Basic {}:{}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_add_news_item(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'News Item\').click()\n-        self.browser.getControl(name=\'form.widgets.IDublinCore.title\')\\\n-            .value = \'My news item\'\n-        self.browser.getControl(name=\'form.widgets.IDublinCore.description\')\\\n-            .value = \'This is my news item.\'\n-        self.browser.getControl(name=\'form.widgets.IShortName.id\')\\\n-            .value = \'\'\n-        self.browser.getControl(name=\'form.widgets.IRichTextBehavior.text\')\\\n-            .value = \'Lorem Ipsum\'\n-        self.browser.getControl(\'Save\').click()\n-\n-        self.assertTrue(self.browser.url.endswith(\'my-news-item/view\'))\n-        self.assertTrue(\'My news item\' in self.browser.contents)\n-        self.assertTrue(\'This is my news item\' in self.browser.contents)\n-        self.assertTrue(\'Lorem Ipsum\' in self.browser.contents)\n+        self.browser.getLink("News Item").click()\n+        self.browser.getControl(\n+            name="form.widgets.IDublinCore.title"\n+        ).value = "My news item"\n+        self.browser.getControl(\n+            name="form.widgets.IDublinCore.description"\n+        ).value = "This is my news item."\n+        self.browser.getControl(name="form.widgets.IShortName.id").value = ""\n+        self.browser.getControl(\n+            name="form.widgets.IRichTextBehavior.text"\n+        ).value = "Lorem Ipsum"\n+        self.browser.getControl("Save").click()\n+\n+        self.assertTrue(self.browser.url.endswith("my-news-item/view"))\n+        self.assertTrue("My news item" in self.browser.contents)\n+        self.assertTrue("This is my news item" in self.browser.contents)\n+        self.assertTrue("Lorem Ipsum" in self.browser.contents)\n \n     def test_add_news_item_with_shortname(self):\n         self.browser.open(self.portal_url)\n-        self.browser.getLink(\'News Item\').click()\n-        self.browser.getControl(name=\'form.widgets.IDublinCore.title\')\\\n-            .value = \'My news item\'\n-        self.browser.getControl(name=\'form.widgets.IShortName.id\')\\\n-            .value = \'my-special-news\'\n-        self.browser.getControl(\'Save\').click()\n-\n-        self.assertTrue(self.browser.url.endswith(\'my-special-news/view\'))\n+        self.browser.getLink("News Item").click()\n+        self.browser.getControl(\n+            name="form.widgets.IDublinCore.title"\n+        ).value = "My news item"\n+        self.browser.getControl(\n+            name="form.widgets.IShortName.id"\n+        ).value = "my-special-news"\n+        self.browser.getControl("Save").click()\n+\n+        self.assertTrue(self.browser.url.endswith("my-special-news/view"))\ndiff --git a/plone/app/contenttypes/tests/test_robot.py b/plone/app/contenttypes/tests/test_robot.py\nindex 2d92e360a..9c787f46c 100644\n--- a/plone/app/contenttypes/tests/test_robot.py\n+++ b/plone/app/contenttypes/tests/test_robot.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_ROBOT_TESTING\n from plone.app.testing import ROBOT_TEST_LEVEL\n from plone.testing import layered\n@@ -11,22 +10,24 @@\n def test_suite():\n     suite = unittest.TestSuite()\n     current_dir = os.path.abspath(os.path.dirname(__file__))\n-    robot_dir = os.path.join(current_dir, \'robot\')\n+    robot_dir = os.path.join(current_dir, "robot")\n     robot_tests = [\n-        os.path.join(\'robot\', doc) for doc in\n-        os.listdir(robot_dir) if doc.endswith(\'.robot\') and\n-        doc.startswith(\'test_\')\n+        os.path.join("robot", doc)\n+        for doc in os.listdir(robot_dir)\n+        if doc.endswith(".robot") and doc.startswith("test_")\n     ]\n     for robot_test in robot_tests:\n         robottestsuite = robotsuite.RobotTestSuite(\n             robot_test,\n-            noncritical=[\'unstable\'],\n+            noncritical=["unstable"],\n         )\n         robottestsuite.level = ROBOT_TEST_LEVEL\n-        suite.addTests([\n-            layered(\n-                robottestsuite,\n-                layer=PLONE_APP_CONTENTTYPES_ROBOT_TESTING,\n-            ),\n-        ])\n+        suite.addTests(\n+            [\n+                layered(\n+                    robottestsuite,\n+                    layer=PLONE_APP_CONTENTTYPES_ROBOT_TESTING,\n+                ),\n+            ]\n+        )\n     return suite\ndiff --git a/plone/app/contenttypes/tests/test_security.py b/plone/app/contenttypes/tests/test_security.py\nindex 5a2ef0b8d..af6d24ded 100644\n--- a/plone/app/contenttypes/tests/test_security.py\n+++ b/plone/app/contenttypes/tests/test_security.py\n@@ -1,6 +1,7 @@\n-# -*- coding: utf-8 -*-\n from io import BytesIO\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n+from plone.app.contenttypes.testing import (  # noqa\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n@@ -79,10 +80,10 @@ class TestSecurity(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         # self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def publish(\n         self,\n@@ -97,11 +98,10 @@ def publish(\n         """\n         Mostly pulled from Testing.functional\n         """\n-        from ZPublisher.Request import Request\n-        from ZPublisher.Response import Response\n-\n         # Note: the next import fail in Python 3, because it needs ZServer.\n         from ZPublisher.Publish import publish_module\n+        from ZPublisher.Request import Request\n+        from ZPublisher.Response import Response\n \n         transaction.commit()\n \n@@ -219,14 +219,14 @@ def _test_class_protected(self, klass):\n                 self.assertEqual(\n                     mapping.get(method),\n                     "View",\n-                    "Method {0} missing view protection".format(method),\n+                    f"Method {method} missing view protection",\n                 )\n         for method in WRITE_METHODS:\n             if method in klass.__dict__.keys():\n                 self.assertEqual(\n                     mapping.get(method),\n                     "Modify portal content",\n-                    "Method {0} missing edit protection".format(method),\n+                    f"Method {method} missing edit protection",\n                 )\n \n     def testCollection_protected(self):\ndiff --git a/plone/app/contenttypes/tests/test_setup.py b/plone/app/contenttypes/tests/test_setup.py\nindex 050611ab6..dc5935df2 100644\n--- a/plone/app/contenttypes/tests/test_setup.py\n+++ b/plone/app/contenttypes/tests/test_setup.py\n@@ -1,5 +1,6 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import (  # noqa\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n \n@@ -11,28 +12,26 @@ class PloneAppContenttypesSetupTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.types = self.portal.portal_types\n \n     def test_old_topic_disabled(self):\n-        self.assertTrue(\'Topic\' not in self.types.objectIds())\n+        self.assertTrue("Topic" not in self.types.objectIds())\n \n     def test_atcontenttypes_replaced_by_dexterity_types(self):\n-        self.assertEqual(self.types[\'Collection\'].meta_type, \'Dexterity FTI\')\n-        self.assertEqual(self.types[\'Document\'].meta_type, \'Dexterity FTI\')\n-        self.assertEqual(self.types[\'Event\'].meta_type, \'Dexterity FTI\')\n-        self.assertEqual(self.types[\'File\'].meta_type, \'Dexterity FTI\')\n-        self.assertEqual(self.types[\'Folder\'].meta_type, \'Dexterity FTI\')\n-        self.assertEqual(self.types[\'Image\'].meta_type, \'Dexterity FTI\')\n-        self.assertEqual(self.types[\'Link\'].meta_type, \'Dexterity FTI\')\n-        self.assertEqual(self.types[\'News Item\'].meta_type, \'Dexterity FTI\')\n+        self.assertEqual(self.types["Collection"].meta_type, "Dexterity FTI")\n+        self.assertEqual(self.types["Document"].meta_type, "Dexterity FTI")\n+        self.assertEqual(self.types["Event"].meta_type, "Dexterity FTI")\n+        self.assertEqual(self.types["File"].meta_type, "Dexterity FTI")\n+        self.assertEqual(self.types["Folder"].meta_type, "Dexterity FTI")\n+        self.assertEqual(self.types["Image"].meta_type, "Dexterity FTI")\n+        self.assertEqual(self.types["Link"].meta_type, "Dexterity FTI")\n+        self.assertEqual(self.types["News Item"].meta_type, "Dexterity FTI")\n \n     def test_browserlayer_available(self):\n+        from plone.app.contenttypes.interfaces import IPloneAppContenttypesLayer\n         from plone.browserlayer import utils\n-        from plone.app.contenttypes.interfaces import \\\n-            IPloneAppContenttypesLayer\n-        self.assertTrue(\n-            IPloneAppContenttypesLayer in utils.registered_layers()\n-        )\n+\n+        self.assertTrue(IPloneAppContenttypesLayer in utils.registered_layers())\ndiff --git a/plone/app/contenttypes/tests/test_webdav.py b/plone/app/contenttypes/tests/test_webdav.py\nindex f329a3bba..35b17dc88 100644\n--- a/plone/app/contenttypes/tests/test_webdav.py\n+++ b/plone/app/contenttypes/tests/test_webdav.py\n@@ -1,5 +1,6 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n+from plone.app.contenttypes.testing import (  # noqa\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from zope.publisher.browser import TestRequest\n@@ -24,40 +25,44 @@ class WebDAVIntegrationTest(unittest.TestCase):\n     layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Image\', \'image\')\n-        self.image = self.portal[\'image\']\n-        self.image.title = \'My Image\'\n-        self.portal.invokeFactory(\'File\', \'file\')\n-        self.file = self.portal[\'file\']\n-        self.file.title = \'My file\'\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Image", "image")\n+        self.image = self.portal["image"]\n+        self.image.title = "My Image"\n+        self.portal.invokeFactory("File", "file")\n+        self.file = self.portal["file"]\n+        self.file.title = "My file"\n \n     def test_image_put(self):\n         """Upload an image through webdav."""\n-        filename = os.path.join(os.path.dirname(__file__), u\'image.jpg\')\n-        with open(filename, \'rb\') as myfile:\n-            request = DAVTestRequest(environ={\n-                \'BODYFILE\': myfile,\n-                \'PATH_INFO\': \'/foo/bar/image.jpg\',\n-            })\n+        filename = os.path.join(os.path.dirname(__file__), "image.jpg")\n+        with open(filename, "rb") as myfile:\n+            request = DAVTestRequest(\n+                environ={\n+                    "BODYFILE": myfile,\n+                    "PATH_INFO": "/foo/bar/image.jpg",\n+                }\n+            )\n             self.image.REQUEST = request\n             self.image.PUT()\n-        self.assertEqual(self.image.image.filename, u\'image.jpg\')\n+        self.assertEqual(self.image.image.filename, "image.jpg")\n         self.assertEqual(self.image.get_size(), 5131)\n-        self.assertEqual(self.image.content_type(), \'image/jpeg\')\n+        self.assertEqual(self.image.content_type(), "image/jpeg")\n \n     def test_file_put(self):\n         """Upload a file through webdav."""\n-        filename = os.path.join(os.path.dirname(__file__), u\'file.pdf\')\n-        with open(filename, \'rb\') as myfile:\n-            request = DAVTestRequest(environ={\n-                \'BODYFILE\': myfile,\n-                \'PATH_INFO\': \'/foo/bar/file.pdf\',\n-            })\n+        filename = os.path.join(os.path.dirname(__file__), "file.pdf")\n+        with open(filename, "rb") as myfile:\n+            request = DAVTestRequest(\n+                environ={\n+                    "BODYFILE": myfile,\n+                    "PATH_INFO": "/foo/bar/file.pdf",\n+                }\n+            )\n             self.file.REQUEST = request\n             self.file.PUT()\n-        self.assertEqual(self.file.file.filename, u\'file.pdf\')\n+        self.assertEqual(self.file.file.filename, "file.pdf")\n         self.assertEqual(self.file.get_size(), 8561)\n-        self.assertEqual(self.file.content_type(), \'application/pdf\')\n+        self.assertEqual(self.file.content_type(), "application/pdf")\ndiff --git a/plone/app/contenttypes/upgrades.py b/plone/app/contenttypes/upgrades.py\nindex b18a17cdd..5cff026de 100644\n--- a/plone/app/contenttypes/upgrades.py\n+++ b/plone/app/contenttypes/upgrades.py\n@@ -1,11 +1,10 @@\n-# -*- coding: utf-8 -*-\n from plone.dexterity.interfaces import IDexterityFTI\n from zope.component import queryUtility\n \n import logging\n \n \n-logger = logging.getLogger(name=\'plone.app.contenttypes upgrade\')\n+logger = logging.getLogger(name="plone.app.contenttypes upgrade")\n \n \n def update_type_icons(context):\ndiff --git a/plone/app/contenttypes/utils.py b/plone/app/contenttypes/utils.py\nindex 8693b2d1e..b4c89a3c5 100644\n--- a/plone/app/contenttypes/utils.py\n+++ b/plone/app/contenttypes/utils.py\n@@ -1,27 +1,28 @@\n+from plone.dexterity.interfaces import IDexterityContent\n from plone.dexterity.interfaces import IDexterityFTI\n-from zope.component import queryUtility\n-from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2Base\n-from zope.interface import alsoProvides\n from plone.folder.interfaces import IOrdering\n+from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2Base\n from Products.CMFCore.utils import getToolByName\n from zExceptions import NotFound\n-from plone.dexterity.interfaces import IDexterityContent\n+from zope.component import queryUtility\n+from zope.interface import alsoProvides\n \n import importlib\n import logging\n \n+\n logger = logging.getLogger(__name__)\n \n \n DEFAULT_TYPES = [\n-    \'Collection\',\n-    \'Document\',\n-    \'Event\',\n-    \'File\',\n-    \'Folder\',\n-    \'Image\',\n-    \'Link\',\n-    \'News Item\',\n+    "Collection",\n+    "Document",\n+    "Event",\n+    "File",\n+    "Folder",\n+    "Image",\n+    "Link",\n+    "News Item",\n ]\n \n \n@@ -33,33 +34,27 @@ def replace_link_variables_by_paths(context, url):\n     if not url:\n         return url\n \n-    portal_state = context.restrictedTraverse(\'@@plone_portal_state\')\n+    portal_state = context.restrictedTraverse("@@plone_portal_state")\n \n-    if \'${navigation_root_url}\' in url:\n+    if "${navigation_root_url}" in url:\n         url = _replace_variable_by_path(\n-            url,\n-            \'${navigation_root_url}\',\n-            portal_state.navigation_root()\n+            url, "${navigation_root_url}", portal_state.navigation_root()\n         )\n \n-    if \'${portal_url}\' in url:\n-        url = _replace_variable_by_path(\n-            url,\n-            \'${portal_url}\',\n-            portal_state.portal()\n-        )\n+    if "${portal_url}" in url:\n+        url = _replace_variable_by_path(url, "${portal_url}", portal_state.portal())\n \n     return url\n \n \n def _replace_variable_by_path(url, variable, obj):\n-    path = \'/\'.join(obj.getPhysicalPath())\n+    path = "/".join(obj.getPhysicalPath())\n     return url.replace(variable, path)\n \n \n def get_old_class_name_string(obj):\n     """Returns the current class name string."""\n-    return \'{0}.{1}\'.format(obj.__module__, obj.__class__.__name__)\n+    return f"{obj.__module__}.{obj.__class__.__name__}"\n \n \n def get_portal_type_name_string(obj):\n@@ -70,27 +65,27 @@ def get_portal_type_name_string(obj):\n     return fti.klass\n \n \n-def migrate_base_class_to_new_class(obj,\n-                                    indexes=None,\n-                                    old_class_name=\'\',\n-                                    new_class_name=\'\',\n-                                    migrate_to_folderish=False,\n-                                    ):\n+def migrate_base_class_to_new_class(\n+    obj,\n+    indexes=None,\n+    old_class_name="",\n+    new_class_name="",\n+    migrate_to_folderish=False,\n+):\n     if indexes is None:\n-        indexes = [\'is_folderish\', \'object_provides\']\n+        indexes = ["is_folderish", "object_provides"]\n     if not old_class_name:\n         old_class_name = get_old_class_name_string(obj)\n     if not new_class_name:\n         new_class_name = get_portal_type_name_string(obj)\n         if not new_class_name:\n-            logger.warning(\n-                \'The type {0} has no fti!\'.format(obj.portal_type))\n+            logger.warning(f"The type {obj.portal_type} has no fti!")\n             return False\n \n     was_item = not isinstance(obj, BTreeFolder2Base)\n     if old_class_name != new_class_name:\n         obj_id = obj.getId()\n-        module_name, class_name = new_class_name.rsplit(\'.\', 1)\n+        module_name, class_name = new_class_name.rsplit(".", 1)\n         module = importlib.import_module(module_name)\n         new_class = getattr(module, class_name)\n \n@@ -114,12 +109,12 @@ def migrate_base_class_to_new_class(obj,\n \n \n def list_of_objects_with_changed_base_class(context):\n-    catalog = getToolByName(context, \'portal_catalog\')\n+    catalog = getToolByName(context, "portal_catalog")\n     for brain in catalog(object_provides=IDexterityContent.__identifier__):\n         try:\n             obj = brain.getObject()\n         except (KeyError, NotFound):\n-            logger.warn(\'Object {0} not found\'.format(brain.getPath()))\n+            logger.warn(f"Object {brain.getPath()} not found")\n             continue\n         if get_portal_type_name_string(obj) != get_old_class_name_string(obj):\n             yield obj\ndiff --git a/setup.py b/setup.py\nindex ab314ef6e..73dc7ece4 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n'

