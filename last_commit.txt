Repository: plone.keyring


Branch: refs/heads/master
Date: 2023-04-16T12:59:54+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.keyring/commit/b29b18fd5d02c7a8ab67db5e58ead1544b3d2e66

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/2ed8f544.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..e2b4515\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "2ed8f544"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/2ed8f544.internal b/news/2ed8f544.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/2ed8f544.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..92c3af9 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,64 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\', \'six\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..879f3de\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.keyring {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.keyring {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

Repository: plone.keyring


Branch: refs/heads/master
Date: 2023-04-16T13:01:17+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.keyring/commit/e7a4c96df4a1ecd04a76b99ac01d590bc6b93b18

chore: pyupgrade

Files changed:
M plone/keyring/django_random.py
M plone/keyring/interfaces.py
M plone/keyring/keymanager.py
M plone/keyring/keyring.py
M plone/keyring/tests/testKeymanager.py
M plone/keyring/tests/testKeyring.py

b'diff --git a/plone/keyring/django_random.py b/plone/keyring/django_random.py\nindex 1e0d520..98be8c4 100644\n--- a/plone/keyring/django_random.py\n+++ b/plone/keyring/django_random.py\n@@ -65,7 +65,7 @@ def get_random_string(length=12,\n         # is better than absolute predictability.\n         random.seed(\n             sha(\n-                "%s%s%s" % (\n+                "{}{}{}".format(\n                     random.getstate(),\n                     time.time(),\n                     SECRET)\ndiff --git a/plone/keyring/interfaces.py b/plone/keyring/interfaces.py\nindex 23aad13..dce34e1 100644\n--- a/plone/keyring/interfaces.py\n+++ b/plone/keyring/interfaces.py\n@@ -9,17 +9,17 @@\n class IKeyManager(IContainer):\n     contains("plone.keyring.interfaces.IKeyring")\n \n-    def clear(ring=u"_system"):\n+    def clear(ring="_system"):\n         """Clear all keys on a given ring. By default the system ring\n         is cleader.  If None is used as ring id all rings are cleared.\n         """\n \n-    def rotate(ring=u"_system"):\n+    def rotate(ring="_system"):\n         """Rotate a given ring. By default rotates the system ring.\n         If None is used as ring id all rings are rotated.\n         """\n \n-    def secret(ring=u"_system"):\n+    def secret(ring="_system"):\n         """Return the current secret for a given ring. If no ring\n         is given the secret for the system ring is returned"""\n \ndiff --git a/plone/keyring/keymanager.py b/plone/keyring/keymanager.py\nindex 16989c4..e6b282f 100644\n--- a/plone/keyring/keymanager.py\n+++ b/plone/keyring/keymanager.py\n@@ -15,33 +15,33 @@ def __init__(self, keyring_size=5):\n         if keyring_size < 1:\n             keyring_size = 5  # prevent not having any keys\n \n-        self[u"_system"] = Keyring(keyring_size)\n-        self[u"_system"].fill()\n+        self["_system"] = Keyring(keyring_size)\n+        self["_system"].fill()\n \n         # to be used with anonymous users\n-        self[u\'_anon\'] = Keyring(keyring_size)\n-        self[u\'_anon\'].fill()\n+        self[\'_anon\'] = Keyring(keyring_size)\n+        self[\'_anon\'].fill()\n \n         # to be used with forms, plone.protect here..\n-        self[u\'_forms\'] = Keyring(keyring_size)\n-        self[u\'_forms\'].fill()\n+        self[\'_forms\'] = Keyring(keyring_size)\n+        self[\'_forms\'].fill()\n \n     def _newContainerData(self):\n         return PersistentMapping()\n \n-    def clear(self, ring=u"_system"):\n+    def clear(self, ring="_system"):\n         if ring is None:\n             for ring in self.values():\n                 ring.clear()\n         else:\n             self[ring].clear()\n \n-    def rotate(self, ring=u"_system"):\n+    def rotate(self, ring="_system"):\n         if ring is None:\n             for ring in self.values():\n                 ring.rotate()\n         else:\n             self[ring].rotate()\n \n-    def secret(self, ring=u"_system"):\n+    def secret(self, ring="_system"):\n         return self[ring].current\ndiff --git a/plone/keyring/keyring.py b/plone/keyring/keyring.py\nindex dad8107..f444f84 100644\n--- a/plone/keyring/keyring.py\n+++ b/plone/keyring/keyring.py\n@@ -26,8 +26,7 @@ def __init__(self, size=5):\n             self.append(None)\n \n     def __iter__(self):\n-        for item in self.data:\n-            yield item\n+        yield from self.data\n \n     def clear(self):\n         for i in range(len(self)):\ndiff --git a/plone/keyring/tests/testKeymanager.py b/plone/keyring/tests/testKeymanager.py\nindex a22442a..d6b1814 100644\n--- a/plone/keyring/tests/testKeymanager.py\n+++ b/plone/keyring/tests/testKeymanager.py\n@@ -14,13 +14,13 @@\n class KeyManagerTests(TestCase):\n     def setUp(self):\n         self.mgr=KeyManager()\n-        del self.mgr[u"_system"]\n-        self.mgr[u"_system"]=Keyring()\n-        self.mgr[u"_system"].rotate()\n-        self.mgr[u"one"]=Keyring()\n-        self.mgr[u"one"].rotate()\n-        self.mgr[u"two"]=Keyring()\n-        self.mgr[u"two"].rotate()\n+        del self.mgr["_system"]\n+        self.mgr["_system"]=Keyring()\n+        self.mgr["_system"].rotate()\n+        self.mgr["one"]=Keyring()\n+        self.mgr["one"].rotate()\n+        self.mgr["two"]=Keyring()\n+        self.mgr["two"].rotate()\n \n \n     def testInterface(self):\n@@ -29,8 +29,8 @@ def testInterface(self):\n \n     def testSystemKeyringCreated(self):\n         mgr=KeyManager()\n-        self.assertEqual(set(mgr), {u"_anon", u"_forms", u"_system"})\n-        self.assertTrue(mgr[u"_system"].current is not None)\n+        self.assertEqual(set(mgr), {"_anon", "_forms", "_system"})\n+        self.assertTrue(mgr["_system"].current is not None)\n \n \n     def testContainerIsPersistent(self):\n@@ -41,82 +41,82 @@ def testContainerIsPersistent(self):\n \n     def testClear(self):\n         self.mgr.clear()\n-        self.assertEqual(set(self.mgr[u"_system"]), set([None]))\n-        self.assertNotEqual(set(self.mgr[u"one"]), set([None]))\n-        self.assertNotEqual(set(self.mgr[u"two"]), set([None]))\n+        self.assertEqual(set(self.mgr["_system"]), {None})\n+        self.assertNotEqual(set(self.mgr["one"]), {None})\n+        self.assertNotEqual(set(self.mgr["two"]), {None})\n \n \n     def testClearGivenRing(self):\n-        self.mgr.clear(u"one")\n-        self.assertNotEqual(set(self.mgr[u"_system"]), set([None]))\n-        self.assertEqual(set(self.mgr[u"one"]), set([None]))\n-        self.assertNotEqual(set(self.mgr[u"two"]), set([None]))\n+        self.mgr.clear("one")\n+        self.assertNotEqual(set(self.mgr["_system"]), {None})\n+        self.assertEqual(set(self.mgr["one"]), {None})\n+        self.assertNotEqual(set(self.mgr["two"]), {None})\n \n \n     def testClearAll(self):\n         self.mgr.clear(None)\n-        self.assertEqual(set(self.mgr[u"_system"]), set([None]))\n-        self.assertEqual(set(self.mgr[u"one"]), set([None]))\n-        self.assertEqual(set(self.mgr[u"two"]), set([None]))\n+        self.assertEqual(set(self.mgr["_system"]), {None})\n+        self.assertEqual(set(self.mgr["one"]), {None})\n+        self.assertEqual(set(self.mgr["two"]), {None})\n \n \n     def testClearUnknownRing(self):\n-        self.assertRaises(KeyError, self.mgr.clear, u"missing")\n+        self.assertRaises(KeyError, self.mgr.clear, "missing")\n \n \n     def testRotate(self):\n-        current_sys = self.mgr[u"_system"].current\n-        current_one = self.mgr[u"one"].current\n-        current_two = self.mgr[u"two"].current\n+        current_sys = self.mgr["_system"].current\n+        current_one = self.mgr["one"].current\n+        current_two = self.mgr["two"].current\n         self.mgr.rotate()\n-        self.assertNotEqual(self.mgr[u"_system"].current, current_sys)\n-        self.assertEqual(self.mgr[u"_system"][1], current_sys)\n-        self.assertEqual(self.mgr[u"one"].current, current_one)\n-        self.assertEqual(self.mgr[u"one"][1], None)\n-        self.assertEqual(self.mgr[u"two"].current, current_two)\n-        self.assertEqual(self.mgr[u"two"][1], None)\n+        self.assertNotEqual(self.mgr["_system"].current, current_sys)\n+        self.assertEqual(self.mgr["_system"][1], current_sys)\n+        self.assertEqual(self.mgr["one"].current, current_one)\n+        self.assertEqual(self.mgr["one"][1], None)\n+        self.assertEqual(self.mgr["two"].current, current_two)\n+        self.assertEqual(self.mgr["two"][1], None)\n \n \n     def testRotateGivenRing(self):\n-        current_sys = self.mgr[u"_system"].current\n-        current_one = self.mgr[u"one"].current\n-        current_two = self.mgr[u"two"].current\n-        self.mgr.rotate(u"one")\n-        self.assertEqual(self.mgr[u"_system"].current, current_sys)\n-        self.assertEqual(self.mgr[u"_system"][1], None)\n-        self.assertNotEqual(self.mgr[u"one"].current, current_one)\n-        self.assertEqual(self.mgr[u"one"][1], current_one)\n-        self.assertEqual(self.mgr[u"two"].current, current_two)\n-        self.assertEqual(self.mgr[u"two"][1], None)\n+        current_sys = self.mgr["_system"].current\n+        current_one = self.mgr["one"].current\n+        current_two = self.mgr["two"].current\n+        self.mgr.rotate("one")\n+        self.assertEqual(self.mgr["_system"].current, current_sys)\n+        self.assertEqual(self.mgr["_system"][1], None)\n+        self.assertNotEqual(self.mgr["one"].current, current_one)\n+        self.assertEqual(self.mgr["one"][1], current_one)\n+        self.assertEqual(self.mgr["two"].current, current_two)\n+        self.assertEqual(self.mgr["two"][1], None)\n \n \n     def testRotateAll(self):\n-        current_sys = self.mgr[u"_system"].current\n-        current_one = self.mgr[u"one"].current\n-        current_two = self.mgr[u"two"].current\n+        current_sys = self.mgr["_system"].current\n+        current_one = self.mgr["one"].current\n+        current_two = self.mgr["two"].current\n         self.mgr.rotate(None)\n-        self.assertNotEqual(self.mgr[u"_system"].current, current_sys)\n-        self.assertEqual(self.mgr[u"_system"][1], current_sys)\n-        self.assertNotEqual(self.mgr[u"one"].current, current_one)\n-        self.assertEqual(self.mgr[u"one"][1], current_one)\n-        self.assertNotEqual(self.mgr[u"two"].current, current_two)\n-        self.assertEqual(self.mgr[u"two"][1], current_two)\n+        self.assertNotEqual(self.mgr["_system"].current, current_sys)\n+        self.assertEqual(self.mgr["_system"][1], current_sys)\n+        self.assertNotEqual(self.mgr["one"].current, current_one)\n+        self.assertEqual(self.mgr["one"][1], current_one)\n+        self.assertNotEqual(self.mgr["two"].current, current_two)\n+        self.assertEqual(self.mgr["two"][1], current_two)\n \n \n     def testRotateUnknownRing(self):\n-        self.assertRaises(KeyError, self.mgr.clear, u"missing")\n+        self.assertRaises(KeyError, self.mgr.clear, "missing")\n \n \n     def testSecret(self):\n-        self.mgr[u"_system"][0]=marker\n+        self.mgr["_system"][0]=marker\n         self.assertTrue(self.mgr.secret() is marker)\n \n     def testSecretGivenRing(self):\n-        self.mgr[u"one"][0]=marker\n-        self.assertTrue(self.mgr.secret(u"one") is marker)\n+        self.mgr["one"][0]=marker\n+        self.assertTrue(self.mgr.secret("one") is marker)\n \n     def testSecretUnknownRing(self):\n-        self.assertRaises(KeyError, self.mgr.secret, u"missing")\n+        self.assertRaises(KeyError, self.mgr.secret, "missing")\n \n def test_suite():\n     suite=TestSuite()\ndiff --git a/plone/keyring/tests/testKeyring.py b/plone/keyring/tests/testKeyring.py\nindex f975aed..875cd69 100644\n--- a/plone/keyring/tests/testKeyring.py\n+++ b/plone/keyring/tests/testKeyring.py\n@@ -20,7 +20,7 @@ def testConstructionSize(self):\n \n     def testKeyringStartsEmpty(self):\n         ring=Keyring()\n-        self.assertEqual(set(list(ring)), set([None]))\n+        self.assertEqual(set(list(ring)), {None})\n \n     def testIterate(self):\n         ring=Keyring()\n'

Repository: plone.keyring


Branch: refs/heads/master
Date: 2023-04-16T13:01:41+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.keyring/commit/f7ed02af8673d43a85fdd565ecfa97e71b14f485

chore: isort

Files changed:
M plone/keyring/django_random.py
M plone/keyring/interfaces.py
M plone/keyring/keymanager.py
M plone/keyring/keyring.py
M plone/keyring/tests/testKeymanager.py
M plone/keyring/tests/testKeyring.py
M setup.py

b'diff --git a/plone/keyring/django_random.py b/plone/keyring/django_random.py\nindex 98be8c4..6742b3e 100644\n--- a/plone/keyring/django_random.py\n+++ b/plone/keyring/django_random.py\n@@ -29,6 +29,8 @@\n """\n \n import random\n+\n+\n try:\n     random = random.SystemRandom()\n     using_sysrandom = True\ndiff --git a/plone/keyring/interfaces.py b/plone/keyring/interfaces.py\nindex dce34e1..6508030 100644\n--- a/plone/keyring/interfaces.py\n+++ b/plone/keyring/interfaces.py\n@@ -5,7 +5,6 @@\n from zope.location.interfaces import IContained\n \n \n-\n class IKeyManager(IContainer):\n     contains("plone.keyring.interfaces.IKeyring")\n \ndiff --git a/plone/keyring/keymanager.py b/plone/keyring/keymanager.py\nindex e6b282f..fba8faa 100644\n--- a/plone/keyring/keymanager.py\n+++ b/plone/keyring/keymanager.py\n@@ -1,9 +1,8 @@\n from persistent.mapping import PersistentMapping\n-from zope.container.sample import SampleContainer\n-from zope.interface import implementer\n-\n from plone.keyring.interfaces import IKeyManager\n from plone.keyring.keyring import Keyring\n+from zope.container.sample import SampleContainer\n+from zope.interface import implementer\n \n \n @implementer(IKeyManager)\ndiff --git a/plone/keyring/keyring.py b/plone/keyring/keyring.py\nindex f444f84..c7b51ad 100644\n--- a/plone/keyring/keyring.py\n+++ b/plone/keyring/keyring.py\n@@ -1,12 +1,11 @@\n-import time\n-from random import choice\n-\n from persistent.list import PersistentList\n+from plone.keyring import django_random\n+from plone.keyring.interfaces import IKeyring\n+from random import choice\n from zope.interface import implementer\n from zope.location.interfaces import IContained\n \n-from plone.keyring.interfaces import IKeyring\n-from plone.keyring import django_random\n+import time\n \n \n def GenerateSecret(length=64):\ndiff --git a/plone/keyring/tests/testKeymanager.py b/plone/keyring/tests/testKeymanager.py\nindex d6b1814..8c62a28 100644\n--- a/plone/keyring/tests/testKeymanager.py\n+++ b/plone/keyring/tests/testKeymanager.py\n@@ -1,11 +1,11 @@\n-from unittest import makeSuite\n-from unittest import TestCase\n-from unittest import TestSuite\n from persistent.mapping import PersistentMapping\n-from zope.interface.verify import verifyClass\n from plone.keyring.interfaces import IKeyManager\n from plone.keyring.keymanager import KeyManager\n from plone.keyring.keyring import Keyring\n+from unittest import makeSuite\n+from unittest import TestCase\n+from unittest import TestSuite\n+from zope.interface.verify import verifyClass\n \n \n marker=[]\ndiff --git a/plone/keyring/tests/testKeyring.py b/plone/keyring/tests/testKeyring.py\nindex 875cd69..c1909dd 100644\n--- a/plone/keyring/tests/testKeyring.py\n+++ b/plone/keyring/tests/testKeyring.py\n@@ -1,10 +1,12 @@\n-import types\n+from plone.keyring.interfaces import IKeyring\n+from plone.keyring.keyring import Keyring\n from unittest import makeSuite\n from unittest import TestCase\n from unittest import TestSuite\n from zope.interface.verify import verifyClass\n-from plone.keyring.interfaces import IKeyring\n-from plone.keyring.keyring import Keyring\n+\n+import types\n+\n \n class KeyringTests(TestCase):\n     def testInterface(self):\ndiff --git a/setup.py b/setup.py\nindex 71871eb..7c20a51 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,6 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n+\n \n version = \'3.2.2.dev0\'\n \n'

Repository: plone.keyring


Branch: refs/heads/master
Date: 2023-04-16T13:02:57+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.keyring/commit/d771f8f59f23c4712da29b30da276ef9d4733deb

chore: black

Files changed:
M plone/__init__.py
M plone/keyring/django_random.py
M plone/keyring/interfaces.py
M plone/keyring/keymanager.py
M plone/keyring/keyring.py
M plone/keyring/tests/testKeymanager.py
M plone/keyring/tests/testKeyring.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad10..05f0beb 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,6 +1,7 @@\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/keyring/django_random.py b/plone/keyring/django_random.py\nindex 6742b3e..c5a384f 100644\n--- a/plone/keyring/django_random.py\n+++ b/plone/keyring/django_random.py\n@@ -49,9 +49,10 @@\n SECRET = random.randint(0, 1000000)\n \n \n-def get_random_string(length=12,\n-                      allowed_chars=\'abcdefghijklmnopqrstuvwxyz\'\n-                                    \'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\'):\n+def get_random_string(\n+    length=12,\n+    allowed_chars="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",\n+):\n     """\n     Returns a securely generated random string.\n \n@@ -66,10 +67,6 @@ def get_random_string(length=12,\n         # properties of the chosen random sequence slightly, but this\n         # is better than absolute predictability.\n         random.seed(\n-            sha(\n-                "{}{}{}".format(\n-                    random.getstate(),\n-                    time.time(),\n-                    SECRET)\n-                ).digest())\n-    return \'\'.join([random.choice(allowed_chars) for i in range(length)])\n+            sha("{}{}{}".format(random.getstate(), time.time(), SECRET)).digest()\n+        )\n+    return "".join([random.choice(allowed_chars) for i in range(length)])\ndiff --git a/plone/keyring/interfaces.py b/plone/keyring/interfaces.py\nindex 6508030..fe0a3c4 100644\n--- a/plone/keyring/interfaces.py\n+++ b/plone/keyring/interfaces.py\n@@ -23,19 +23,14 @@ def secret(ring="_system"):\n         is given the secret for the system ring is returned"""\n \n \n-\n class IKeyring(IContained, IFiniteSequence):\n     current = Attribute("The current (ie latest) secret in the ring.")\n \n     def __init__(size=5):\n-        """Construct a new keyring for a specified number of keys.\n-        """\n+        """Construct a new keyring for a specified number of keys."""\n \n     def clear():\n-        """Remove all keys from the ring.\n-        """\n+        """Remove all keys from the ring."""\n \n     def rotate():\n-        """Add a new secret to the ring, pushing out the oldest secret.\n-        """\n-\n+        """Add a new secret to the ring, pushing out the oldest secret."""\ndiff --git a/plone/keyring/keymanager.py b/plone/keyring/keymanager.py\nindex fba8faa..da3af38 100644\n--- a/plone/keyring/keymanager.py\n+++ b/plone/keyring/keymanager.py\n@@ -7,7 +7,6 @@\n \n @implementer(IKeyManager)\n class KeyManager(SampleContainer):\n-\n     def __init__(self, keyring_size=5):\n         SampleContainer.__init__(self)\n \n@@ -18,12 +17,12 @@ def __init__(self, keyring_size=5):\n         self["_system"].fill()\n \n         # to be used with anonymous users\n-        self[\'_anon\'] = Keyring(keyring_size)\n-        self[\'_anon\'].fill()\n+        self["_anon"] = Keyring(keyring_size)\n+        self["_anon"].fill()\n \n         # to be used with forms, plone.protect here..\n-        self[\'_forms\'] = Keyring(keyring_size)\n-        self[\'_forms\'].fill()\n+        self["_forms"] = Keyring(keyring_size)\n+        self["_forms"].fill()\n \n     def _newContainerData(self):\n         return PersistentMapping()\ndiff --git a/plone/keyring/keyring.py b/plone/keyring/keyring.py\nindex c7b51ad..5a65441 100644\n--- a/plone/keyring/keyring.py\n+++ b/plone/keyring/keyring.py\n@@ -14,7 +14,6 @@ def GenerateSecret(length=64):\n \n @implementer(IKeyring, IContained)\n class Keyring(PersistentList):\n-\n     __parent__ = __name__ = None\n \n     last_rotation = 0\ndiff --git a/plone/keyring/tests/testKeymanager.py b/plone/keyring/tests/testKeymanager.py\nindex 8c62a28..86e9fbe 100644\n--- a/plone/keyring/tests/testKeymanager.py\n+++ b/plone/keyring/tests/testKeymanager.py\n@@ -8,36 +8,33 @@\n from zope.interface.verify import verifyClass\n \n \n-marker=[]\n+marker = []\n \n \n class KeyManagerTests(TestCase):\n     def setUp(self):\n-        self.mgr=KeyManager()\n+        self.mgr = KeyManager()\n         del self.mgr["_system"]\n-        self.mgr["_system"]=Keyring()\n+        self.mgr["_system"] = Keyring()\n         self.mgr["_system"].rotate()\n-        self.mgr["one"]=Keyring()\n+        self.mgr["one"] = Keyring()\n         self.mgr["one"].rotate()\n-        self.mgr["two"]=Keyring()\n+        self.mgr["two"] = Keyring()\n         self.mgr["two"].rotate()\n \n-\n     def testInterface(self):\n         verifyClass(IKeyManager, KeyManager)\n \n-\n     def testSystemKeyringCreated(self):\n-        mgr=KeyManager()\n+        mgr = KeyManager()\n         self.assertEqual(set(mgr), {"_anon", "_forms", "_system"})\n         self.assertTrue(mgr["_system"].current is not None)\n \n-\n     def testContainerIsPersistent(self):\n-        mgr=KeyManager()\n-        self.assertTrue(isinstance(mgr.__dict__["_SampleContainer__data"],\n-                                   PersistentMapping))\n-\n+        mgr = KeyManager()\n+        self.assertTrue(\n+            isinstance(mgr.__dict__["_SampleContainer__data"], PersistentMapping)\n+        )\n \n     def testClear(self):\n         self.mgr.clear()\n@@ -45,25 +42,21 @@ def testClear(self):\n         self.assertNotEqual(set(self.mgr["one"]), {None})\n         self.assertNotEqual(set(self.mgr["two"]), {None})\n \n-\n     def testClearGivenRing(self):\n         self.mgr.clear("one")\n         self.assertNotEqual(set(self.mgr["_system"]), {None})\n         self.assertEqual(set(self.mgr["one"]), {None})\n         self.assertNotEqual(set(self.mgr["two"]), {None})\n \n-\n     def testClearAll(self):\n         self.mgr.clear(None)\n         self.assertEqual(set(self.mgr["_system"]), {None})\n         self.assertEqual(set(self.mgr["one"]), {None})\n         self.assertEqual(set(self.mgr["two"]), {None})\n \n-\n     def testClearUnknownRing(self):\n         self.assertRaises(KeyError, self.mgr.clear, "missing")\n \n-\n     def testRotate(self):\n         current_sys = self.mgr["_system"].current\n         current_one = self.mgr["one"].current\n@@ -76,7 +69,6 @@ def testRotate(self):\n         self.assertEqual(self.mgr["two"].current, current_two)\n         self.assertEqual(self.mgr["two"][1], None)\n \n-\n     def testRotateGivenRing(self):\n         current_sys = self.mgr["_system"].current\n         current_one = self.mgr["one"].current\n@@ -89,7 +81,6 @@ def testRotateGivenRing(self):\n         self.assertEqual(self.mgr["two"].current, current_two)\n         self.assertEqual(self.mgr["two"][1], None)\n \n-\n     def testRotateAll(self):\n         current_sys = self.mgr["_system"].current\n         current_one = self.mgr["one"].current\n@@ -102,23 +93,22 @@ def testRotateAll(self):\n         self.assertNotEqual(self.mgr["two"].current, current_two)\n         self.assertEqual(self.mgr["two"][1], current_two)\n \n-\n     def testRotateUnknownRing(self):\n         self.assertRaises(KeyError, self.mgr.clear, "missing")\n \n-\n     def testSecret(self):\n-        self.mgr["_system"][0]=marker\n+        self.mgr["_system"][0] = marker\n         self.assertTrue(self.mgr.secret() is marker)\n \n     def testSecretGivenRing(self):\n-        self.mgr["one"][0]=marker\n+        self.mgr["one"][0] = marker\n         self.assertTrue(self.mgr.secret("one") is marker)\n \n     def testSecretUnknownRing(self):\n         self.assertRaises(KeyError, self.mgr.secret, "missing")\n \n+\n def test_suite():\n-    suite=TestSuite()\n+    suite = TestSuite()\n     suite.addTest(makeSuite(KeyManagerTests))\n     return suite\ndiff --git a/plone/keyring/tests/testKeyring.py b/plone/keyring/tests/testKeyring.py\nindex c1909dd..34f0876 100644\n--- a/plone/keyring/tests/testKeyring.py\n+++ b/plone/keyring/tests/testKeyring.py\n@@ -13,53 +13,52 @@ def testInterface(self):\n         verifyClass(IKeyring, Keyring)\n \n     def testConstructionDefaultSize(self):\n-        ring=Keyring()\n+        ring = Keyring()\n         self.assertEqual(len(ring), 5)\n \n     def testConstructionSize(self):\n-        ring=Keyring(3)\n+        ring = Keyring(3)\n         self.assertEqual(len(ring), 3)\n \n     def testKeyringStartsEmpty(self):\n-        ring=Keyring()\n+        ring = Keyring()\n         self.assertEqual(set(list(ring)), {None})\n \n     def testIterate(self):\n-        ring=Keyring()\n-        ring.data=[0, 1, 2, 3, 4]\n-        iterator=ring.__iter__()\n+        ring = Keyring()\n+        ring.data = [0, 1, 2, 3, 4]\n+        iterator = ring.__iter__()\n         self.assertTrue(isinstance(iterator, types.GeneratorType))\n         self.assertEqual(list(iterator), [0, 1, 2, 3, 4])\n \n     def testClear(self):\n-        ring=Keyring()\n-        ring.data=[0, 1, 2]\n+        ring = Keyring()\n+        ring.data = [0, 1, 2]\n         ring.clear()\n-        self.assertEqual(ring.data, [ None, None, None ])\n+        self.assertEqual(ring.data, [None, None, None])\n \n     def testRotate(self):\n-        ring=Keyring()\n+        ring = Keyring()\n         ring.rotate()\n         self.assertFalse(ring.current is None)\n-        self.assertEqual(ring.data[1:], [ None, None, None, None])\n+        self.assertEqual(ring.data[1:], [None, None, None, None])\n \n     def testRotateTwice(self):\n-        ring=Keyring()\n+        ring = Keyring()\n         ring.rotate()\n         ring.rotate()\n         self.assertTrue(ring.data[0] is not None)\n         self.assertTrue(ring.data[1] is not None)\n-        self.assertEqual(ring.data[2:], [ None, None, None])\n+        self.assertEqual(ring.data[2:], [None, None, None])\n \n     def testCurrent(self):\n-        ring=Keyring()\n-        marker=[]\n-        ring.data=[marker, 1, 2, 3]\n+        ring = Keyring()\n+        marker = []\n+        ring.data = [marker, 1, 2, 3]\n         self.assertTrue(ring.current is marker)\n \n \n def test_suite():\n-    suite=TestSuite()\n+    suite = TestSuite()\n     suite.addTest(makeSuite(KeyringTests))\n     return suite\n-\ndiff --git a/setup.py b/setup.py\nindex 7c20a51..b08813c 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,14 +2,13 @@\n from setuptools import setup\n \n \n-version = \'3.2.2.dev0\'\n+version = "3.2.2.dev0"\n \n setup(\n-    name=\'plone.keyring\',\n+    name="plone.keyring",\n     version=version,\n     description="Manage secrets",\n-    long_description=(open("README.rst").read() + "\\n" +\n-                      open("CHANGES.rst").read()),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n@@ -29,21 +28,21 @@\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'secret key keyring\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.keyring\',\n-    license=\'BSD\',\n+    keywords="secret key keyring",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.keyring",\n+    license="BSD",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     python_requires=">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*",\n     install_requires=[\n-        \'setuptools\',\n-        \'ZODB\',\n-        \'zope.container\',\n-        \'zope.interface\',\n-        \'zope.location\',\n+        "setuptools",\n+        "ZODB",\n+        "zope.container",\n+        "zope.interface",\n+        "zope.location",\n     ],\n-    )\n+)\n'

Repository: plone.keyring


Branch: refs/heads/master
Date: 2023-04-16T13:03:10+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.keyring/commit/12f4861a90f1f295087ce600b8cb87c236c6cbf6

chore: pyupgrade

Files changed:
M plone/keyring/django_random.py

b'diff --git a/plone/keyring/django_random.py b/plone/keyring/django_random.py\nindex c5a384f..1839de5 100644\n--- a/plone/keyring/django_random.py\n+++ b/plone/keyring/django_random.py\n@@ -67,6 +67,6 @@ def get_random_string(\n         # properties of the chosen random sequence slightly, but this\n         # is better than absolute predictability.\n         random.seed(\n-            sha("{}{}{}".format(random.getstate(), time.time(), SECRET)).digest()\n+            sha(f"{random.getstate()}{time.time()}{SECRET}").digest()\n         )\n     return "".join([random.choice(allowed_chars) for i in range(length)])\n'

Repository: plone.keyring


Branch: refs/heads/master
Date: 2023-04-16T13:03:25+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.keyring/commit/e35e252a4fbfca957e1740d69fa5b07ea00badf0

chore: black

Files changed:
M plone/keyring/django_random.py

b'diff --git a/plone/keyring/django_random.py b/plone/keyring/django_random.py\nindex 1839de5..95a1c4b 100644\n--- a/plone/keyring/django_random.py\n+++ b/plone/keyring/django_random.py\n@@ -66,7 +66,5 @@ def get_random_string(\n         # time a random string is required. This may change the\n         # properties of the chosen random sequence slightly, but this\n         # is better than absolute predictability.\n-        random.seed(\n-            sha(f"{random.getstate()}{time.time()}{SECRET}").digest()\n-        )\n+        random.seed(sha(f"{random.getstate()}{time.time()}{SECRET}").digest())\n     return "".join([random.choice(allowed_chars) for i in range(length)])\n'

Repository: plone.keyring


Branch: refs/heads/master
Date: 2023-04-16T13:04:09+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.keyring/commit/1a7c7b829cd522b1490de71dd6f489c462e529fd

chore: zpretty

Files changed:
M plone/keyring/configure.zcml
M plone/keyring/meta.zcml
M plone/keyring/profiles/default/componentregistry.xml
M plone/keyring/profiles/default/metadata.xml

b'diff --git a/plone/keyring/configure.zcml b/plone/keyring/configure.zcml\nindex cd25d26..c7bbde1 100644\n--- a/plone/keyring/configure.zcml\n+++ b/plone/keyring/configure.zcml\n@@ -1,17 +1,18 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone.keyring">\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    i18n_domain="plone.keyring"\n+    >\n \n   <genericsetup:registerProfile\n-      zcml:condition="installed Products.GenericSetup"\n       name="default"\n-      directory="profiles/default"\n       title="plone.keyring KeyManager registration"\n       description="Registers a persistent plone.keyring KeyManager"\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n       for="zope.interface.interfaces.IComponentRegistry"\n+      directory="profiles/default"\n+      zcml:condition="installed Products.GenericSetup"\n       />\n \n </configure>\ndiff --git a/plone/keyring/meta.zcml b/plone/keyring/meta.zcml\nindex b5cd1c1..4728ee0 100644\n--- a/plone/keyring/meta.zcml\n+++ b/plone/keyring/meta.zcml\n@@ -1,9 +1,13 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:zcml="http://namespaces.zope.org/zcml">\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    >\n \n   <configure zcml:condition="installed Products.GenericSetup">\n-    <include package="Products.GenericSetup" file="meta.zcml" />\n+    <include\n+        package="Products.GenericSetup"\n+        file="meta.zcml"\n+        />\n   </configure>\n \n </configure>\ndiff --git a/plone/keyring/profiles/default/componentregistry.xml b/plone/keyring/profiles/default/componentregistry.xml\nindex ec3eeba..7fbb109 100644\n--- a/plone/keyring/profiles/default/componentregistry.xml\n+++ b/plone/keyring/profiles/default/componentregistry.xml\n@@ -1,9 +1,8 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <componentregistry>\n   <utilities>\n-    <utility\n-        interface="plone.keyring.interfaces.IKeyManager"\n-        factory="plone.keyring.keymanager.KeyManager"\n-        />\n+    <utility factory="plone.keyring.keymanager.KeyManager"\n+             interface="plone.keyring.interfaces.IKeyManager"\n+    />\n   </utilities>\n </componentregistry>\ndiff --git a/plone/keyring/profiles/default/metadata.xml b/plone/keyring/profiles/default/metadata.xml\nindex 7cc32e1..0b133bc 100644\n--- a/plone/keyring/profiles/default/metadata.xml\n+++ b/plone/keyring/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <version>1.1</version>\n </metadata>\n'

Repository: plone.keyring


Branch: refs/heads/master
Date: 2023-04-16T13:05:09+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.keyring/commit/8b1cfcd4c1431d42a56e749a66a55cec75ee7706

feat: drop pkgutil

Files changed:
M plone/__init__.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 05f0beb..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,7 +1 @@\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__("pkg_resources").declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-\n-    __path__ = extend_path(__path__, __name__)\n+__import__("pkg_resources").declare_namespace(__name__)\n'

Repository: plone.keyring


Branch: refs/heads/master
Date: 2023-04-16T13:06:12+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.keyring/commit/a04daa636f56278987a83b466889f685e07e2d2c

chore: update trove classifiers

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex b08813c..6720759 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -13,16 +13,12 @@\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        "Framework :: Zope :: 4",\n         "Framework :: Zope :: 5",\n         "License :: OSI Approved :: BSD License",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n         "Programming Language :: Python :: 3.10",\n'

Repository: plone.keyring


Branch: refs/heads/master
Date: 2023-04-16T13:06:28+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.keyring/commit/e81a46ea7ae84ded6e63b86f58b1f25410b1f069

feat: only python3.8+

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 6720759..2a7ca53 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -33,7 +33,7 @@\n     namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n-    python_requires=">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*",\n+    python_requires=">=3.8",\n     install_requires=[\n         "setuptools",\n         "ZODB",\n'

Repository: plone.keyring


Branch: refs/heads/master
Date: 2023-04-16T13:35:18+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.keyring/commit/410b3f82caa073ea220d9919d0006030a3a2e471

feat: configure dependencies

Files changed:
M .meta.toml
M pyproject.toml

b'diff --git a/.meta.toml b/.meta.toml\nindex e2b4515..0de14dc 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -3,3 +3,6 @@\n [meta]\n template = "default"\n commit-id = "2ed8f544"\n+\n+[dependencies]\n+ignores = "[\'Products.GenericSetup\']"\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 92c3af9..af3125f 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -81,3 +81,4 @@ Zope = [\n   \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n ]\n python-dateutil = [\'dateutil\']\n+ignore-packages = [\'Products.GenericSetup\']\n'

Repository: plone.keyring


Branch: refs/heads/master
Date: 2023-04-16T13:35:18+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.keyring/commit/bbeaf3b21b3257f6b26068d7c74ecf7d6de39f12

feat: drop python 2 fallback

Files changed:
M plone/keyring/django_random.py

b'diff --git a/plone/keyring/django_random.py b/plone/keyring/django_random.py\nindex 95a1c4b..99874ca 100644\n--- a/plone/keyring/django_random.py\n+++ b/plone/keyring/django_random.py\n@@ -28,7 +28,10 @@\n SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n """\n \n+from hashlib import sha256 as sha\n+\n import random\n+import time\n \n \n try:\n@@ -37,13 +40,6 @@\n except NotImplementedError:\n     using_sysrandom = False\n \n-try:\n-    from hashlib import sha256 as sha\n-except ImportError:\n-    from sha import sha\n-\n-import time\n-\n \n # generated when process started, hard to guess\n SECRET = random.randint(0, 1000000)\n'

Repository: plone.keyring


Branch: refs/heads/master
Date: 2023-04-16T13:35:18+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.keyring/commit/0d4112ba2b45fc234805089cd95c2ae3590577fe

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 2a7ca53..cc11ae9 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -35,8 +35,8 @@\n     zip_safe=False,\n     python_requires=">=3.8",\n     install_requires=[\n+        "persistent",\n         "setuptools",\n-        "ZODB",\n         "zope.container",\n         "zope.interface",\n         "zope.location",\n'

Repository: plone.keyring


Branch: refs/heads/master
Date: 2023-04-16T13:35:18+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.keyring/commit/cb17ba833e8ed92d68fc85c56aa4008901989495

chore: bump version

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex cc11ae9..36e136a 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n \n \n-version = "3.2.2.dev0"\n+version = "4.0.0.dev0"\n \n setup(\n     name="plone.keyring",\n'

Repository: plone.keyring


Branch: refs/heads/master
Date: 2023-04-16T13:35:18+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.keyring/commit/580c385a23e589a8a5844f47cb237c71cab238ef

Add news entry

Files changed:
A news/1.breaking

b'diff --git a/news/1.breaking b/news/1.breaking\nnew file mode 100644\nindex 0000000..174ecbf\n--- /dev/null\n+++ b/news/1.breaking\n@@ -0,0 +1,2 @@\n+Drop python 2.7 support.\n+[gforcada]\n'

Repository: plone.keyring


Branch: refs/heads/master
Date: 2023-04-23T13:40:14+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.keyring/commit/fa446906ab742543ce7925ed02ae3cd7467e02a7

Merge pull request #9 from plone/config-with-default-template-73497227

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/1.breaking
A news/2ed8f544.internal
A tox.ini
M plone/__init__.py
M plone/keyring/configure.zcml
M plone/keyring/django_random.py
M plone/keyring/interfaces.py
M plone/keyring/keymanager.py
M plone/keyring/keyring.py
M plone/keyring/meta.zcml
M plone/keyring/profiles/default/componentregistry.xml
M plone/keyring/profiles/default/metadata.xml
M plone/keyring/tests/testKeymanager.py
M plone/keyring/tests/testKeyring.py
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..0de14dc\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,8 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "2ed8f544"\n+\n+[dependencies]\n+ignores = "[\'Products.GenericSetup\']"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/1.breaking b/news/1.breaking\nnew file mode 100644\nindex 0000000..174ecbf\n--- /dev/null\n+++ b/news/1.breaking\n@@ -0,0 +1,2 @@\n+Drop python 2.7 support.\n+[gforcada]\ndiff --git a/news/2ed8f544.internal b/news/2ed8f544.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/2ed8f544.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad10..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,6 +1 @@\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/keyring/configure.zcml b/plone/keyring/configure.zcml\nindex cd25d26..c7bbde1 100644\n--- a/plone/keyring/configure.zcml\n+++ b/plone/keyring/configure.zcml\n@@ -1,17 +1,18 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone.keyring">\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    i18n_domain="plone.keyring"\n+    >\n \n   <genericsetup:registerProfile\n-      zcml:condition="installed Products.GenericSetup"\n       name="default"\n-      directory="profiles/default"\n       title="plone.keyring KeyManager registration"\n       description="Registers a persistent plone.keyring KeyManager"\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n       for="zope.interface.interfaces.IComponentRegistry"\n+      directory="profiles/default"\n+      zcml:condition="installed Products.GenericSetup"\n       />\n \n </configure>\ndiff --git a/plone/keyring/django_random.py b/plone/keyring/django_random.py\nindex 1e0d520..99874ca 100644\n--- a/plone/keyring/django_random.py\n+++ b/plone/keyring/django_random.py\n@@ -28,28 +28,27 @@\n SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n """\n \n+from hashlib import sha256 as sha\n+\n import random\n+import time\n+\n+\n try:\n     random = random.SystemRandom()\n     using_sysrandom = True\n except NotImplementedError:\n     using_sysrandom = False\n \n-try:\n-    from hashlib import sha256 as sha\n-except ImportError:\n-    from sha import sha\n-\n-import time\n-\n \n # generated when process started, hard to guess\n SECRET = random.randint(0, 1000000)\n \n \n-def get_random_string(length=12,\n-                      allowed_chars=\'abcdefghijklmnopqrstuvwxyz\'\n-                                    \'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\'):\n+def get_random_string(\n+    length=12,\n+    allowed_chars="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",\n+):\n     """\n     Returns a securely generated random string.\n \n@@ -63,11 +62,5 @@ def get_random_string(length=12,\n         # time a random string is required. This may change the\n         # properties of the chosen random sequence slightly, but this\n         # is better than absolute predictability.\n-        random.seed(\n-            sha(\n-                "%s%s%s" % (\n-                    random.getstate(),\n-                    time.time(),\n-                    SECRET)\n-                ).digest())\n-    return \'\'.join([random.choice(allowed_chars) for i in range(length)])\n+        random.seed(sha(f"{random.getstate()}{time.time()}{SECRET}").digest())\n+    return "".join([random.choice(allowed_chars) for i in range(length)])\ndiff --git a/plone/keyring/interfaces.py b/plone/keyring/interfaces.py\nindex 23aad13..fe0a3c4 100644\n--- a/plone/keyring/interfaces.py\n+++ b/plone/keyring/interfaces.py\n@@ -5,38 +5,32 @@\n from zope.location.interfaces import IContained\n \n \n-\n class IKeyManager(IContainer):\n     contains("plone.keyring.interfaces.IKeyring")\n \n-    def clear(ring=u"_system"):\n+    def clear(ring="_system"):\n         """Clear all keys on a given ring. By default the system ring\n         is cleader.  If None is used as ring id all rings are cleared.\n         """\n \n-    def rotate(ring=u"_system"):\n+    def rotate(ring="_system"):\n         """Rotate a given ring. By default rotates the system ring.\n         If None is used as ring id all rings are rotated.\n         """\n \n-    def secret(ring=u"_system"):\n+    def secret(ring="_system"):\n         """Return the current secret for a given ring. If no ring\n         is given the secret for the system ring is returned"""\n \n \n-\n class IKeyring(IContained, IFiniteSequence):\n     current = Attribute("The current (ie latest) secret in the ring.")\n \n     def __init__(size=5):\n-        """Construct a new keyring for a specified number of keys.\n-        """\n+        """Construct a new keyring for a specified number of keys."""\n \n     def clear():\n-        """Remove all keys from the ring.\n-        """\n+        """Remove all keys from the ring."""\n \n     def rotate():\n-        """Add a new secret to the ring, pushing out the oldest secret.\n-        """\n-\n+        """Add a new secret to the ring, pushing out the oldest secret."""\ndiff --git a/plone/keyring/keymanager.py b/plone/keyring/keymanager.py\nindex 16989c4..da3af38 100644\n--- a/plone/keyring/keymanager.py\n+++ b/plone/keyring/keymanager.py\n@@ -1,47 +1,45 @@\n from persistent.mapping import PersistentMapping\n-from zope.container.sample import SampleContainer\n-from zope.interface import implementer\n-\n from plone.keyring.interfaces import IKeyManager\n from plone.keyring.keyring import Keyring\n+from zope.container.sample import SampleContainer\n+from zope.interface import implementer\n \n \n @implementer(IKeyManager)\n class KeyManager(SampleContainer):\n-\n     def __init__(self, keyring_size=5):\n         SampleContainer.__init__(self)\n \n         if keyring_size < 1:\n             keyring_size = 5  # prevent not having any keys\n \n-        self[u"_system"] = Keyring(keyring_size)\n-        self[u"_system"].fill()\n+        self["_system"] = Keyring(keyring_size)\n+        self["_system"].fill()\n \n         # to be used with anonymous users\n-        self[u\'_anon\'] = Keyring(keyring_size)\n-        self[u\'_anon\'].fill()\n+        self["_anon"] = Keyring(keyring_size)\n+        self["_anon"].fill()\n \n         # to be used with forms, plone.protect here..\n-        self[u\'_forms\'] = Keyring(keyring_size)\n-        self[u\'_forms\'].fill()\n+        self["_forms"] = Keyring(keyring_size)\n+        self["_forms"].fill()\n \n     def _newContainerData(self):\n         return PersistentMapping()\n \n-    def clear(self, ring=u"_system"):\n+    def clear(self, ring="_system"):\n         if ring is None:\n             for ring in self.values():\n                 ring.clear()\n         else:\n             self[ring].clear()\n \n-    def rotate(self, ring=u"_system"):\n+    def rotate(self, ring="_system"):\n         if ring is None:\n             for ring in self.values():\n                 ring.rotate()\n         else:\n             self[ring].rotate()\n \n-    def secret(self, ring=u"_system"):\n+    def secret(self, ring="_system"):\n         return self[ring].current\ndiff --git a/plone/keyring/keyring.py b/plone/keyring/keyring.py\nindex dad8107..5a65441 100644\n--- a/plone/keyring/keyring.py\n+++ b/plone/keyring/keyring.py\n@@ -1,12 +1,11 @@\n-import time\n-from random import choice\n-\n from persistent.list import PersistentList\n+from plone.keyring import django_random\n+from plone.keyring.interfaces import IKeyring\n+from random import choice\n from zope.interface import implementer\n from zope.location.interfaces import IContained\n \n-from plone.keyring.interfaces import IKeyring\n-from plone.keyring import django_random\n+import time\n \n \n def GenerateSecret(length=64):\n@@ -15,7 +14,6 @@ def GenerateSecret(length=64):\n \n @implementer(IKeyring, IContained)\n class Keyring(PersistentList):\n-\n     __parent__ = __name__ = None\n \n     last_rotation = 0\n@@ -26,8 +24,7 @@ def __init__(self, size=5):\n             self.append(None)\n \n     def __iter__(self):\n-        for item in self.data:\n-            yield item\n+        yield from self.data\n \n     def clear(self):\n         for i in range(len(self)):\ndiff --git a/plone/keyring/meta.zcml b/plone/keyring/meta.zcml\nindex b5cd1c1..4728ee0 100644\n--- a/plone/keyring/meta.zcml\n+++ b/plone/keyring/meta.zcml\n@@ -1,9 +1,13 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:zcml="http://namespaces.zope.org/zcml">\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    >\n \n   <configure zcml:condition="installed Products.GenericSetup">\n-    <include package="Products.GenericSetup" file="meta.zcml" />\n+    <include\n+        package="Products.GenericSetup"\n+        file="meta.zcml"\n+        />\n   </configure>\n \n </configure>\ndiff --git a/plone/keyring/profiles/default/componentregistry.xml b/plone/keyring/profiles/default/componentregistry.xml\nindex ec3eeba..7fbb109 100644\n--- a/plone/keyring/profiles/default/componentregistry.xml\n+++ b/plone/keyring/profiles/default/componentregistry.xml\n@@ -1,9 +1,8 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <componentregistry>\n   <utilities>\n-    <utility\n-        interface="plone.keyring.interfaces.IKeyManager"\n-        factory="plone.keyring.keymanager.KeyManager"\n-        />\n+    <utility factory="plone.keyring.keymanager.KeyManager"\n+             interface="plone.keyring.interfaces.IKeyManager"\n+    />\n   </utilities>\n </componentregistry>\ndiff --git a/plone/keyring/profiles/default/metadata.xml b/plone/keyring/profiles/default/metadata.xml\nindex 7cc32e1..0b133bc 100644\n--- a/plone/keyring/profiles/default/metadata.xml\n+++ b/plone/keyring/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <version>1.1</version>\n </metadata>\ndiff --git a/plone/keyring/tests/testKeymanager.py b/plone/keyring/tests/testKeymanager.py\nindex a22442a..86e9fbe 100644\n--- a/plone/keyring/tests/testKeymanager.py\n+++ b/plone/keyring/tests/testKeymanager.py\n@@ -1,124 +1,114 @@\n-from unittest import makeSuite\n-from unittest import TestCase\n-from unittest import TestSuite\n from persistent.mapping import PersistentMapping\n-from zope.interface.verify import verifyClass\n from plone.keyring.interfaces import IKeyManager\n from plone.keyring.keymanager import KeyManager\n from plone.keyring.keyring import Keyring\n+from unittest import makeSuite\n+from unittest import TestCase\n+from unittest import TestSuite\n+from zope.interface.verify import verifyClass\n \n \n-marker=[]\n+marker = []\n \n \n class KeyManagerTests(TestCase):\n     def setUp(self):\n-        self.mgr=KeyManager()\n-        del self.mgr[u"_system"]\n-        self.mgr[u"_system"]=Keyring()\n-        self.mgr[u"_system"].rotate()\n-        self.mgr[u"one"]=Keyring()\n-        self.mgr[u"one"].rotate()\n-        self.mgr[u"two"]=Keyring()\n-        self.mgr[u"two"].rotate()\n-\n+        self.mgr = KeyManager()\n+        del self.mgr["_system"]\n+        self.mgr["_system"] = Keyring()\n+        self.mgr["_system"].rotate()\n+        self.mgr["one"] = Keyring()\n+        self.mgr["one"].rotate()\n+        self.mgr["two"] = Keyring()\n+        self.mgr["two"].rotate()\n \n     def testInterface(self):\n         verifyClass(IKeyManager, KeyManager)\n \n-\n     def testSystemKeyringCreated(self):\n-        mgr=KeyManager()\n-        self.assertEqual(set(mgr), {u"_anon", u"_forms", u"_system"})\n-        self.assertTrue(mgr[u"_system"].current is not None)\n-\n+        mgr = KeyManager()\n+        self.assertEqual(set(mgr), {"_anon", "_forms", "_system"})\n+        self.assertTrue(mgr["_system"].current is not None)\n \n     def testContainerIsPersistent(self):\n-        mgr=KeyManager()\n-        self.assertTrue(isinstance(mgr.__dict__["_SampleContainer__data"],\n-                                   PersistentMapping))\n-\n+        mgr = KeyManager()\n+        self.assertTrue(\n+            isinstance(mgr.__dict__["_SampleContainer__data"], PersistentMapping)\n+        )\n \n     def testClear(self):\n         self.mgr.clear()\n-        self.assertEqual(set(self.mgr[u"_system"]), set([None]))\n-        self.assertNotEqual(set(self.mgr[u"one"]), set([None]))\n-        self.assertNotEqual(set(self.mgr[u"two"]), set([None]))\n-\n+        self.assertEqual(set(self.mgr["_system"]), {None})\n+        self.assertNotEqual(set(self.mgr["one"]), {None})\n+        self.assertNotEqual(set(self.mgr["two"]), {None})\n \n     def testClearGivenRing(self):\n-        self.mgr.clear(u"one")\n-        self.assertNotEqual(set(self.mgr[u"_system"]), set([None]))\n-        self.assertEqual(set(self.mgr[u"one"]), set([None]))\n-        self.assertNotEqual(set(self.mgr[u"two"]), set([None]))\n-\n+        self.mgr.clear("one")\n+        self.assertNotEqual(set(self.mgr["_system"]), {None})\n+        self.assertEqual(set(self.mgr["one"]), {None})\n+        self.assertNotEqual(set(self.mgr["two"]), {None})\n \n     def testClearAll(self):\n         self.mgr.clear(None)\n-        self.assertEqual(set(self.mgr[u"_system"]), set([None]))\n-        self.assertEqual(set(self.mgr[u"one"]), set([None]))\n-        self.assertEqual(set(self.mgr[u"two"]), set([None]))\n-\n+        self.assertEqual(set(self.mgr["_system"]), {None})\n+        self.assertEqual(set(self.mgr["one"]), {None})\n+        self.assertEqual(set(self.mgr["two"]), {None})\n \n     def testClearUnknownRing(self):\n-        self.assertRaises(KeyError, self.mgr.clear, u"missing")\n-\n+        self.assertRaises(KeyError, self.mgr.clear, "missing")\n \n     def testRotate(self):\n-        current_sys = self.mgr[u"_system"].current\n-        current_one = self.mgr[u"one"].current\n-        current_two = self.mgr[u"two"].current\n+        current_sys = self.mgr["_system"].current\n+        current_one = self.mgr["one"].current\n+        current_two = self.mgr["two"].current\n         self.mgr.rotate()\n-        self.assertNotEqual(self.mgr[u"_system"].current, current_sys)\n-        self.assertEqual(self.mgr[u"_system"][1], current_sys)\n-        self.assertEqual(self.mgr[u"one"].current, current_one)\n-        self.assertEqual(self.mgr[u"one"][1], None)\n-        self.assertEqual(self.mgr[u"two"].current, current_two)\n-        self.assertEqual(self.mgr[u"two"][1], None)\n-\n+        self.assertNotEqual(self.mgr["_system"].current, current_sys)\n+        self.assertEqual(self.mgr["_system"][1], current_sys)\n+        self.assertEqual(self.mgr["one"].current, current_one)\n+        self.assertEqual(self.mgr["one"][1], None)\n+        self.assertEqual(self.mgr["two"].current, current_two)\n+        self.assertEqual(self.mgr["two"][1], None)\n \n     def testRotateGivenRing(self):\n-        current_sys = self.mgr[u"_system"].current\n-        current_one = self.mgr[u"one"].current\n-        current_two = self.mgr[u"two"].current\n-        self.mgr.rotate(u"one")\n-        self.assertEqual(self.mgr[u"_system"].current, current_sys)\n-        self.assertEqual(self.mgr[u"_system"][1], None)\n-        self.assertNotEqual(self.mgr[u"one"].current, current_one)\n-        self.assertEqual(self.mgr[u"one"][1], current_one)\n-        self.assertEqual(self.mgr[u"two"].current, current_two)\n-        self.assertEqual(self.mgr[u"two"][1], None)\n-\n+        current_sys = self.mgr["_system"].current\n+        current_one = self.mgr["one"].current\n+        current_two = self.mgr["two"].current\n+        self.mgr.rotate("one")\n+        self.assertEqual(self.mgr["_system"].current, current_sys)\n+        self.assertEqual(self.mgr["_system"][1], None)\n+        self.assertNotEqual(self.mgr["one"].current, current_one)\n+        self.assertEqual(self.mgr["one"][1], current_one)\n+        self.assertEqual(self.mgr["two"].current, current_two)\n+        self.assertEqual(self.mgr["two"][1], None)\n \n     def testRotateAll(self):\n-        current_sys = self.mgr[u"_system"].current\n-        current_one = self.mgr[u"one"].current\n-        current_two = self.mgr[u"two"].current\n+        current_sys = self.mgr["_system"].current\n+        current_one = self.mgr["one"].current\n+        current_two = self.mgr["two"].current\n         self.mgr.rotate(None)\n-        self.assertNotEqual(self.mgr[u"_system"].current, current_sys)\n-        self.assertEqual(self.mgr[u"_system"][1], current_sys)\n-        self.assertNotEqual(self.mgr[u"one"].current, current_one)\n-        self.assertEqual(self.mgr[u"one"][1], current_one)\n-        self.assertNotEqual(self.mgr[u"two"].current, current_two)\n-        self.assertEqual(self.mgr[u"two"][1], current_two)\n-\n+        self.assertNotEqual(self.mgr["_system"].current, current_sys)\n+        self.assertEqual(self.mgr["_system"][1], current_sys)\n+        self.assertNotEqual(self.mgr["one"].current, current_one)\n+        self.assertEqual(self.mgr["one"][1], current_one)\n+        self.assertNotEqual(self.mgr["two"].current, current_two)\n+        self.assertEqual(self.mgr["two"][1], current_two)\n \n     def testRotateUnknownRing(self):\n-        self.assertRaises(KeyError, self.mgr.clear, u"missing")\n-\n+        self.assertRaises(KeyError, self.mgr.clear, "missing")\n \n     def testSecret(self):\n-        self.mgr[u"_system"][0]=marker\n+        self.mgr["_system"][0] = marker\n         self.assertTrue(self.mgr.secret() is marker)\n \n     def testSecretGivenRing(self):\n-        self.mgr[u"one"][0]=marker\n-        self.assertTrue(self.mgr.secret(u"one") is marker)\n+        self.mgr["one"][0] = marker\n+        self.assertTrue(self.mgr.secret("one") is marker)\n \n     def testSecretUnknownRing(self):\n-        self.assertRaises(KeyError, self.mgr.secret, u"missing")\n+        self.assertRaises(KeyError, self.mgr.secret, "missing")\n+\n \n def test_suite():\n-    suite=TestSuite()\n+    suite = TestSuite()\n     suite.addTest(makeSuite(KeyManagerTests))\n     return suite\ndiff --git a/plone/keyring/tests/testKeyring.py b/plone/keyring/tests/testKeyring.py\nindex f975aed..34f0876 100644\n--- a/plone/keyring/tests/testKeyring.py\n+++ b/plone/keyring/tests/testKeyring.py\n@@ -1,63 +1,64 @@\n-import types\n+from plone.keyring.interfaces import IKeyring\n+from plone.keyring.keyring import Keyring\n from unittest import makeSuite\n from unittest import TestCase\n from unittest import TestSuite\n from zope.interface.verify import verifyClass\n-from plone.keyring.interfaces import IKeyring\n-from plone.keyring.keyring import Keyring\n+\n+import types\n+\n \n class KeyringTests(TestCase):\n     def testInterface(self):\n         verifyClass(IKeyring, Keyring)\n \n     def testConstructionDefaultSize(self):\n-        ring=Keyring()\n+        ring = Keyring()\n         self.assertEqual(len(ring), 5)\n \n     def testConstructionSize(self):\n-        ring=Keyring(3)\n+        ring = Keyring(3)\n         self.assertEqual(len(ring), 3)\n \n     def testKeyringStartsEmpty(self):\n-        ring=Keyring()\n-        self.assertEqual(set(list(ring)), set([None]))\n+        ring = Keyring()\n+        self.assertEqual(set(list(ring)), {None})\n \n     def testIterate(self):\n-        ring=Keyring()\n-        ring.data=[0, 1, 2, 3, 4]\n-        iterator=ring.__iter__()\n+        ring = Keyring()\n+        ring.data = [0, 1, 2, 3, 4]\n+        iterator = ring.__iter__()\n         self.assertTrue(isinstance(iterator, types.GeneratorType))\n         self.assertEqual(list(iterator), [0, 1, 2, 3, 4])\n \n     def testClear(self):\n-        ring=Keyring()\n-        ring.data=[0, 1, 2]\n+        ring = Keyring()\n+        ring.data = [0, 1, 2]\n         ring.clear()\n-        self.assertEqual(ring.data, [ None, None, None ])\n+        self.assertEqual(ring.data, [None, None, None])\n \n     def testRotate(self):\n-        ring=Keyring()\n+        ring = Keyring()\n         ring.rotate()\n         self.assertFalse(ring.current is None)\n-        self.assertEqual(ring.data[1:], [ None, None, None, None])\n+        self.assertEqual(ring.data[1:], [None, None, None, None])\n \n     def testRotateTwice(self):\n-        ring=Keyring()\n+        ring = Keyring()\n         ring.rotate()\n         ring.rotate()\n         self.assertTrue(ring.data[0] is not None)\n         self.assertTrue(ring.data[1] is not None)\n-        self.assertEqual(ring.data[2:], [ None, None, None])\n+        self.assertEqual(ring.data[2:], [None, None, None])\n \n     def testCurrent(self):\n-        ring=Keyring()\n-        marker=[]\n-        ring.data=[marker, 1, 2, 3]\n+        ring = Keyring()\n+        marker = []\n+        ring.data = [marker, 1, 2, 3]\n         self.assertTrue(ring.current is marker)\n \n \n def test_suite():\n-    suite=TestSuite()\n+    suite = TestSuite()\n     suite.addTest(makeSuite(KeyringTests))\n     return suite\n-\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..af3125f 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,65 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\', \'six\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\n+ignore-packages = [\'Products.GenericSetup\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex 71871eb..36e136a 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,47 +1,44 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n \n-version = \'3.2.2.dev0\'\n+\n+version = "4.0.0.dev0"\n \n setup(\n-    name=\'plone.keyring\',\n+    name="plone.keyring",\n     version=version,\n     description="Manage secrets",\n-    long_description=(open("README.rst").read() + "\\n" +\n-                      open("CHANGES.rst").read()),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        "Framework :: Zope :: 4",\n         "Framework :: Zope :: 5",\n         "License :: OSI Approved :: BSD License",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'secret key keyring\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.keyring\',\n-    license=\'BSD\',\n+    keywords="secret key keyring",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.keyring",\n+    license="BSD",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n-    python_requires=">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*",\n+    python_requires=">=3.8",\n     install_requires=[\n-        \'setuptools\',\n-        \'ZODB\',\n-        \'zope.container\',\n-        \'zope.interface\',\n-        \'zope.location\',\n+        "persistent",\n+        "setuptools",\n+        "zope.container",\n+        "zope.interface",\n+        "zope.location",\n     ],\n-    )\n+)\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..879f3de\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.keyring {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.keyring {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

