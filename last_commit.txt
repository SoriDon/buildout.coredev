Repository: plone.app.redirector


Branch: refs/heads/master
Date: 2019-02-14T11:02:39+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.redirector/commit/87e3aefde78f5e6e6224f6492483c147ae1df173

Test that storing non string path fails.

Files changed:
M plone/app/redirector/tests/test_storage.py

b"diff --git a/plone/app/redirector/tests/test_storage.py b/plone/app/redirector/tests/test_storage.py\nindex 9f2d7e0..538da7c 100644\n--- a/plone/app/redirector/tests/test_storage.py\n+++ b/plone/app/redirector/tests/test_storage.py\n@@ -272,6 +272,13 @@ def test_storage_three_step_circular_rename(self):\n         self.assertListEqual(st.redirects('second'), [])\n         self.assertListEqual(st.redirects('third'), [])\n \n+    def test_storage_non_string_path_fails(self):\n+        st = RedirectionStorage()\n+        with self.assertRaises(AttributeError):\n+            st[0] = '/bar'\n+        with self.assertRaises(AttributeError):\n+            st['/foo'] = 0\n+\n \n def test_suite():\n     suite = unittest.TestSuite()\n"

Repository: plone.app.redirector


Branch: refs/heads/master
Date: 2019-02-14T17:02:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.redirector/commit/a48179a5c2f1abbe454606a7147f00d6f4f421b9

test_performance: show number prettier.

When number is 1000000, I have trouble seeing if this is one million (true)
or ten times more or less.

Files changed:
M plone/app/redirector/tests/test_performance.py

b'diff --git a/plone/app/redirector/tests/test_performance.py b/plone/app/redirector/tests/test_performance.py\nindex 633865d..b669f52 100644\n--- a/plone/app/redirector/tests/test_performance.py\n+++ b/plone/app/redirector/tests/test_performance.py\n@@ -21,6 +21,16 @@\n     VERBOSE = False\n \n \n+def pretty_number(num):\n+    if num < 1000:\n+        return num\n+    num = int(num / 1000)\n+    if num < 1000:\n+        return \'{0} thousand\'.format(num)\n+    num = int(num / 1000)\n+    return \'{0} million\'.format(num)\n+\n+\n class TestStoragePerformance(unittest.TestCase):\n     """Test the performance of the RedirectionStorage class.\n     """\n@@ -66,7 +76,7 @@ def test_storage_performance(self):\n         st = RedirectionStorage()\n         if VERBOSE:\n             print(\'\\nRunning plone.app.redirector storage performance tests.\')\n-            print(\'Inserting {0} paths...\'.format(NUMBER))\n+            print(\'Inserting {0} paths...\'.format(pretty_number(NUMBER)))\n \n         # Can take long.  But 10.000 per second should be no problem.\n         with self.timeit(\'Inserting\', NUMBER / 10000.0):\n'

Repository: plone.app.redirector


Branch: refs/heads/master
Date: 2019-02-14T17:48:39+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.redirector/commit/c9a34862eae579172f73d4e6190e5e89517b31aa

Added 'clear' method.

This is another method of Python dicts that seems useful to support.
We create fresh OOBTrees when called.

Files changed:
M plone/app/redirector/storage.py
M plone/app/redirector/tests/test_storage.py

b'diff --git a/plone/app/redirector/storage.py b/plone/app/redirector/storage.py\nindex 5f9913b..ba65f48 100644\n--- a/plone/app/redirector/storage.py\n+++ b/plone/app/redirector/storage.py\n@@ -25,6 +25,11 @@ class RedirectionStorage(Persistent):\n     """\n \n     def __init__(self):\n+        self.clear()\n+\n+    def clear(self):\n+        # If the data already exists, we could call \'clear\' on all BTrees,\n+        # but making them fresh seems cleaner and faster.\n         self._paths = OOBTree()\n         self._rpaths = OOBTree()\n \ndiff --git a/plone/app/redirector/tests/test_storage.py b/plone/app/redirector/tests/test_storage.py\nindex 538da7c..570e0c1 100644\n--- a/plone/app/redirector/tests/test_storage.py\n+++ b/plone/app/redirector/tests/test_storage.py\n@@ -108,6 +108,19 @@ def test_storage_two_redirects_pythonic(self):\n         self.assertIn(\'/baz\', st)\n         self.assertNotIn(\'/bar\', st)\n \n+    def test_storage_clear(self):\n+        # Clear all information.\n+        st = RedirectionStorage()\n+        st[\'/foo\'] = \'/bar\'\n+        st[\'/baz\'] = \'/bar\'\n+        st.clear()\n+        self.assertNotIn(\'/foo\', st)\n+        self.assertNotIn(\'/baz\', st)\n+        self.assertEqual(len(st.redirects(\'/bar\')), 0)\n+        # Test the internal structures directly\n+        self.assertEqual(len(st._paths), 0)\n+        self.assertEqual(len(st._rpaths), 0)\n+\n     def test_storage_update_redirect(self):\n         # Update a redirect\n         st = RedirectionStorage()\n'

Repository: plone.app.redirector


Branch: refs/heads/master
Date: 2019-02-14T17:48:39+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.redirector/commit/2c07667334af69a3ad17e0fe41e6a9c1b2c851ae

Added update method for bulk updates.

Files changed:
M plone/app/redirector/storage.py
M plone/app/redirector/tests/test_performance.py

b"diff --git a/plone/app/redirector/storage.py b/plone/app/redirector/storage.py\nindex ba65f48..91c12c3 100644\n--- a/plone/app/redirector/storage.py\n+++ b/plone/app/redirector/storage.py\n@@ -66,6 +66,10 @@ def add(self, old_path, new_path):\n \n     __setitem__ = add\n \n+    def update(self, info):\n+        for key, value in info.items():\n+            self.add(key, value)\n+\n     def remove(self, old_path):\n         old_path = self._canonical(old_path)\n         new_path = self._paths.get(old_path, None)\ndiff --git a/plone/app/redirector/tests/test_performance.py b/plone/app/redirector/tests/test_performance.py\nindex b669f52..86b64e5 100644\n--- a/plone/app/redirector/tests/test_performance.py\n+++ b/plone/app/redirector/tests/test_performance.py\n@@ -76,13 +76,46 @@ def test_storage_performance(self):\n         st = RedirectionStorage()\n         if VERBOSE:\n             print('\\nRunning plone.app.redirector storage performance tests.')\n-            print('Inserting {0} paths...'.format(pretty_number(NUMBER)))\n \n         # Can take long.  But 10.000 per second should be no problem.\n-        with self.timeit('Inserting', NUMBER / 10000.0):\n-            for i in range(NUMBER):\n+        # Take one tenth of the items at first.\n+        num = max(int(NUMBER / 10), 1)\n+        with self.timeit(\n+            'Inserting {0} individual items'.format(pretty_number(num)),\n+            num / 10000.0,\n+        ):\n+            for i in range(num):\n                 st['/old/{0}'.format(i)] = '/new/{0}'.format(i)\n \n+        # Should be almost instantaneous.\n+        with self.timeit('Clearing storage'):\n+            st.clear()\n+\n+        # Should be fairly quick.\n+        with self.timeit(\n+            'Preparing {0} items for bulk import'.format(\n+                pretty_number(NUMBER)\n+            ),\n+            NUMBER / 100000.0,\n+        ):\n+            # Prepare input:\n+            info = {}\n+            for i in range(NUMBER):\n+                info['/old/{0}'.format(i)] = '/new/{0}'.format(i)\n+\n+        # Can take long.  But 10.000 per second should be no problem.\n+        with self.timeit(\n+            'Inserting {0} prepared items in bulk'.format(\n+                pretty_number(NUMBER)\n+            ),\n+            NUMBER / 10000.0,\n+        ):\n+            # Prepare input:\n+            info = {}\n+            for i in range(NUMBER):\n+                info['/old/{0}'.format(i)] = '/new/{0}'.format(i)\n+            st.update(info)\n+\n         # Should be almost instantaneous.\n         with self.timeit('Getting length'):\n             self.assertEqual(len(st), NUMBER)\n"

Repository: plone.app.redirector


Branch: refs/heads/master
Date: 2019-02-14T17:48:39+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.redirector/commit/55a3abf901a96dc57a5789ff8cb29708ecc2ad4b

Changelog for clear and update.

Files changed:
M news/13.bugfix

b"diff --git a/news/13.bugfix b/news/13.bugfix\nindex 7b2a874..c66713b 100644\n--- a/news/13.bugfix\n+++ b/news/13.bugfix\n@@ -2,5 +2,7 @@ Support using the 'in' operator for paths.\n Support using storage[old_path] to get the new path, possibly raising KeyError.\n Support using storage[old_path] to set or delete new paths.\n Support using len(storage) to get the number of paths.\n+Support storage.clear() to clear out all data.\n+Support storage.update() for bulk updates.\n Added performance tests.  Call with ``export PLONE_APP_REDIRECTOR_PERFORMANCE_NUMBER=100000`` to enable.\n [maurits]\n"

Repository: plone.app.redirector


Branch: refs/heads/master
Date: 2019-02-14T17:48:39+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.redirector/commit/a2c6d2ea80fd7612bb4f601100659cf87034735e

Removed no longer needed test_suite functions.

Files changed:
M news/12.bugfix
M plone/app/redirector/tests/test_browser.py
M plone/app/redirector/tests/test_events.py
M plone/app/redirector/tests/test_performance.py
M plone/app/redirector/tests/test_setup.py
M plone/app/redirector/tests/test_storage.py
M plone/app/redirector/tests/test_view.py

b"diff --git a/news/12.bugfix b/news/12.bugfix\nindex 0db1414..0d72e8b 100644\n--- a/news/12.bugfix\n+++ b/news/12.bugfix\n@@ -1,2 +1,3 @@\n Turned doctests into unittests.\n+Removed no longer needed test_suite functions.\n [maurits]\ndiff --git a/plone/app/redirector/tests/test_browser.py b/plone/app/redirector/tests/test_browser.py\nindex e62ec31..bf5b3f1 100644\n--- a/plone/app/redirector/tests/test_browser.py\n+++ b/plone/app/redirector/tests/test_browser.py\n@@ -57,9 +57,3 @@ def test_no_redirect_on_creation(self):\n         self.browser.getControl('Rename').click()\n         self.assertListEqual(list(storage), ['/plone/foo'])\n         self.assertEqual(storage.get('/plone/foo'), '/plone/bar')\n-\n-\n-def test_suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestBrowser))\n-    return suite\ndiff --git a/plone/app/redirector/tests/test_events.py b/plone/app/redirector/tests/test_events.py\nindex 63a68fe..a17cec8 100644\n--- a/plone/app/redirector/tests/test_events.py\n+++ b/plone/app/redirector/tests/test_events.py\n@@ -154,9 +154,3 @@ def test_add_doesnt_create_storage_entry(self):\n         self.folder.invokeFactory('Document', 'p1')\n         transaction.savepoint(1)\n         self.assertEqual(0, len(list(self.storage)) - orig_len)\n-\n-\n-def test_suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestRedirectorEvents))\n-    return suite\ndiff --git a/plone/app/redirector/tests/test_performance.py b/plone/app/redirector/tests/test_performance.py\nindex 86b64e5..0cdb3eb 100644\n--- a/plone/app/redirector/tests/test_performance.py\n+++ b/plone/app/redirector/tests/test_performance.py\n@@ -134,9 +134,3 @@ def test_storage_performance(self):\n         ):\n             for key in st:\n                 st[key]\n-\n-\n-def test_suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestStoragePerformance))\n-    return suite\ndiff --git a/plone/app/redirector/tests/test_setup.py b/plone/app/redirector/tests/test_setup.py\nindex 7c4d30a..8c28836 100644\n--- a/plone/app/redirector/tests/test_setup.py\n+++ b/plone/app/redirector/tests/test_setup.py\n@@ -24,9 +24,3 @@ def test_utility(self):\n     def test_view(self):\n         view = self.portal.restrictedTraverse('@@plone_redirector_view')\n         self.assertNotEqual(None, view)\n-\n-\n-def test_suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestRedirectorSetup))\n-    return suite\ndiff --git a/plone/app/redirector/tests/test_storage.py b/plone/app/redirector/tests/test_storage.py\nindex 570e0c1..1967798 100644\n--- a/plone/app/redirector/tests/test_storage.py\n+++ b/plone/app/redirector/tests/test_storage.py\n@@ -291,9 +291,3 @@ def test_storage_non_string_path_fails(self):\n             st[0] = '/bar'\n         with self.assertRaises(AttributeError):\n             st['/foo'] = 0\n-\n-\n-def test_suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestStorage))\n-    return suite\ndiff --git a/plone/app/redirector/tests/test_view.py b/plone/app/redirector/tests/test_view.py\nindex bed2037..e6326c0 100644\n--- a/plone/app/redirector/tests/test_view.py\n+++ b/plone/app/redirector/tests/test_view.py\n@@ -204,9 +204,3 @@ def test_search_blacklisted(self):\n         urls = sorted([b.getURL() for b in view.search_for_similar()])\n         self.assertEqual(1, len(urls))\n         self.assertEqual(fu + '/f2', urls[0])\n-\n-\n-def test_suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestRedirectorView))\n-    return suite\n"

Repository: plone.app.redirector


Branch: refs/heads/master
Date: 2019-02-14T17:48:39+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.redirector/commit/d350cd163cdf18f3cfe064d6d6bd8fb1097e9ce5

Test performance: clearing takes longer than expected.

Accept this.

Files changed:
M plone/app/redirector/tests/test_performance.py

b"diff --git a/plone/app/redirector/tests/test_performance.py b/plone/app/redirector/tests/test_performance.py\nindex 0cdb3eb..6972299 100644\n--- a/plone/app/redirector/tests/test_performance.py\n+++ b/plone/app/redirector/tests/test_performance.py\n@@ -87,8 +87,10 @@ def test_storage_performance(self):\n             for i in range(num):\n                 st['/old/{0}'.format(i)] = '/new/{0}'.format(i)\n \n-        # Should be almost instantaneous.\n-        with self.timeit('Clearing storage'):\n+        # I expected this to be almost instantaneous because we replace\n+        # the data with new OOBTrees, but it still takes time:\n+        # for ten million items it take 0.3 seconds.\n+        with self.timeit('Clearing storage', num / 1000000.0):\n             st.clear()\n \n         # Should be fairly quick.\n"

Repository: plone.app.redirector


Branch: refs/heads/master
Date: 2019-02-14T17:48:39+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.redirector/commit/2c3bc9e308187e40cfa8825926d1021c3505e066

Performance test: slightly different way of specifying the bulk data.

Files changed:
M plone/app/redirector/tests/test_performance.py

b"diff --git a/plone/app/redirector/tests/test_performance.py b/plone/app/redirector/tests/test_performance.py\nindex 6972299..c8821db 100644\n--- a/plone/app/redirector/tests/test_performance.py\n+++ b/plone/app/redirector/tests/test_performance.py\n@@ -100,10 +100,10 @@ def test_storage_performance(self):\n             ),\n             NUMBER / 100000.0,\n         ):\n-            # Prepare input:\n-            info = {}\n-            for i in range(NUMBER):\n-                info['/old/{0}'.format(i)] = '/new/{0}'.format(i)\n+            info = {\n+                '/old/{0}'.format(i): '/new/{0}'.format(i)\n+                for i in range(NUMBER)\n+            }\n \n         # Can take long.  But 10.000 per second should be no problem.\n         with self.timeit(\n"

Repository: plone.app.redirector


Branch: refs/heads/master
Date: 2019-02-14T21:34:51+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.redirector/commit/85e3d88d3946395790123a7267f016b8d1261a34

These are not bug fixes, but features.

Files changed:
A news/13.feature
D news/13.bugfix

b'diff --git a/news/13.bugfix b/news/13.feature\nsimilarity index 100%\nrename from news/13.bugfix\nrename to news/13.feature\n'

Repository: plone.app.redirector


Branch: refs/heads/master
Date: 2019-02-15T22:10:27+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.redirector/commit/3796c603c87fb6a08eaddfcf34c1f008d6bc6aa8

Merge pull request #16 from plone/maurits-minor-fixes-and-additions

Support storage.clear and storage.update (plus minor fixes)

Files changed:
A news/13.feature
M news/12.bugfix
M plone/app/redirector/storage.py
M plone/app/redirector/tests/test_browser.py
M plone/app/redirector/tests/test_events.py
M plone/app/redirector/tests/test_performance.py
M plone/app/redirector/tests/test_setup.py
M plone/app/redirector/tests/test_storage.py
M plone/app/redirector/tests/test_view.py
D news/13.bugfix

b'diff --git a/news/12.bugfix b/news/12.bugfix\nindex 0db1414..0d72e8b 100644\n--- a/news/12.bugfix\n+++ b/news/12.bugfix\n@@ -1,2 +1,3 @@\n Turned doctests into unittests.\n+Removed no longer needed test_suite functions.\n [maurits]\ndiff --git a/news/13.bugfix b/news/13.feature\nsimilarity index 79%\nrename from news/13.bugfix\nrename to news/13.feature\nindex 7b2a874..c66713b 100644\n--- a/news/13.bugfix\n+++ b/news/13.feature\n@@ -2,5 +2,7 @@ Support using the \'in\' operator for paths.\n Support using storage[old_path] to get the new path, possibly raising KeyError.\n Support using storage[old_path] to set or delete new paths.\n Support using len(storage) to get the number of paths.\n+Support storage.clear() to clear out all data.\n+Support storage.update() for bulk updates.\n Added performance tests.  Call with ``export PLONE_APP_REDIRECTOR_PERFORMANCE_NUMBER=100000`` to enable.\n [maurits]\ndiff --git a/plone/app/redirector/storage.py b/plone/app/redirector/storage.py\nindex 5f9913b..91c12c3 100644\n--- a/plone/app/redirector/storage.py\n+++ b/plone/app/redirector/storage.py\n@@ -25,6 +25,11 @@ class RedirectionStorage(Persistent):\n     """\n \n     def __init__(self):\n+        self.clear()\n+\n+    def clear(self):\n+        # If the data already exists, we could call \'clear\' on all BTrees,\n+        # but making them fresh seems cleaner and faster.\n         self._paths = OOBTree()\n         self._rpaths = OOBTree()\n \n@@ -61,6 +66,10 @@ def add(self, old_path, new_path):\n \n     __setitem__ = add\n \n+    def update(self, info):\n+        for key, value in info.items():\n+            self.add(key, value)\n+\n     def remove(self, old_path):\n         old_path = self._canonical(old_path)\n         new_path = self._paths.get(old_path, None)\ndiff --git a/plone/app/redirector/tests/test_browser.py b/plone/app/redirector/tests/test_browser.py\nindex e62ec31..bf5b3f1 100644\n--- a/plone/app/redirector/tests/test_browser.py\n+++ b/plone/app/redirector/tests/test_browser.py\n@@ -57,9 +57,3 @@ def test_no_redirect_on_creation(self):\n         self.browser.getControl(\'Rename\').click()\n         self.assertListEqual(list(storage), [\'/plone/foo\'])\n         self.assertEqual(storage.get(\'/plone/foo\'), \'/plone/bar\')\n-\n-\n-def test_suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestBrowser))\n-    return suite\ndiff --git a/plone/app/redirector/tests/test_events.py b/plone/app/redirector/tests/test_events.py\nindex 63a68fe..a17cec8 100644\n--- a/plone/app/redirector/tests/test_events.py\n+++ b/plone/app/redirector/tests/test_events.py\n@@ -154,9 +154,3 @@ def test_add_doesnt_create_storage_entry(self):\n         self.folder.invokeFactory(\'Document\', \'p1\')\n         transaction.savepoint(1)\n         self.assertEqual(0, len(list(self.storage)) - orig_len)\n-\n-\n-def test_suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestRedirectorEvents))\n-    return suite\ndiff --git a/plone/app/redirector/tests/test_performance.py b/plone/app/redirector/tests/test_performance.py\nindex 633865d..c8821db 100644\n--- a/plone/app/redirector/tests/test_performance.py\n+++ b/plone/app/redirector/tests/test_performance.py\n@@ -21,6 +21,16 @@\n     VERBOSE = False\n \n \n+def pretty_number(num):\n+    if num < 1000:\n+        return num\n+    num = int(num / 1000)\n+    if num < 1000:\n+        return \'{0} thousand\'.format(num)\n+    num = int(num / 1000)\n+    return \'{0} million\'.format(num)\n+\n+\n class TestStoragePerformance(unittest.TestCase):\n     """Test the performance of the RedirectionStorage class.\n     """\n@@ -66,13 +76,48 @@ def test_storage_performance(self):\n         st = RedirectionStorage()\n         if VERBOSE:\n             print(\'\\nRunning plone.app.redirector storage performance tests.\')\n-            print(\'Inserting {0} paths...\'.format(NUMBER))\n \n         # Can take long.  But 10.000 per second should be no problem.\n-        with self.timeit(\'Inserting\', NUMBER / 10000.0):\n-            for i in range(NUMBER):\n+        # Take one tenth of the items at first.\n+        num = max(int(NUMBER / 10), 1)\n+        with self.timeit(\n+            \'Inserting {0} individual items\'.format(pretty_number(num)),\n+            num / 10000.0,\n+        ):\n+            for i in range(num):\n                 st[\'/old/{0}\'.format(i)] = \'/new/{0}\'.format(i)\n \n+        # I expected this to be almost instantaneous because we replace\n+        # the data with new OOBTrees, but it still takes time:\n+        # for ten million items it take 0.3 seconds.\n+        with self.timeit(\'Clearing storage\', num / 1000000.0):\n+            st.clear()\n+\n+        # Should be fairly quick.\n+        with self.timeit(\n+            \'Preparing {0} items for bulk import\'.format(\n+                pretty_number(NUMBER)\n+            ),\n+            NUMBER / 100000.0,\n+        ):\n+            info = {\n+                \'/old/{0}\'.format(i): \'/new/{0}\'.format(i)\n+                for i in range(NUMBER)\n+            }\n+\n+        # Can take long.  But 10.000 per second should be no problem.\n+        with self.timeit(\n+            \'Inserting {0} prepared items in bulk\'.format(\n+                pretty_number(NUMBER)\n+            ),\n+            NUMBER / 10000.0,\n+        ):\n+            # Prepare input:\n+            info = {}\n+            for i in range(NUMBER):\n+                info[\'/old/{0}\'.format(i)] = \'/new/{0}\'.format(i)\n+            st.update(info)\n+\n         # Should be almost instantaneous.\n         with self.timeit(\'Getting length\'):\n             self.assertEqual(len(st), NUMBER)\n@@ -91,9 +136,3 @@ def test_storage_performance(self):\n         ):\n             for key in st:\n                 st[key]\n-\n-\n-def test_suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestStoragePerformance))\n-    return suite\ndiff --git a/plone/app/redirector/tests/test_setup.py b/plone/app/redirector/tests/test_setup.py\nindex 7c4d30a..8c28836 100644\n--- a/plone/app/redirector/tests/test_setup.py\n+++ b/plone/app/redirector/tests/test_setup.py\n@@ -24,9 +24,3 @@ def test_utility(self):\n     def test_view(self):\n         view = self.portal.restrictedTraverse(\'@@plone_redirector_view\')\n         self.assertNotEqual(None, view)\n-\n-\n-def test_suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestRedirectorSetup))\n-    return suite\ndiff --git a/plone/app/redirector/tests/test_storage.py b/plone/app/redirector/tests/test_storage.py\nindex 9f2d7e0..1967798 100644\n--- a/plone/app/redirector/tests/test_storage.py\n+++ b/plone/app/redirector/tests/test_storage.py\n@@ -108,6 +108,19 @@ def test_storage_two_redirects_pythonic(self):\n         self.assertIn(\'/baz\', st)\n         self.assertNotIn(\'/bar\', st)\n \n+    def test_storage_clear(self):\n+        # Clear all information.\n+        st = RedirectionStorage()\n+        st[\'/foo\'] = \'/bar\'\n+        st[\'/baz\'] = \'/bar\'\n+        st.clear()\n+        self.assertNotIn(\'/foo\', st)\n+        self.assertNotIn(\'/baz\', st)\n+        self.assertEqual(len(st.redirects(\'/bar\')), 0)\n+        # Test the internal structures directly\n+        self.assertEqual(len(st._paths), 0)\n+        self.assertEqual(len(st._rpaths), 0)\n+\n     def test_storage_update_redirect(self):\n         # Update a redirect\n         st = RedirectionStorage()\n@@ -272,8 +285,9 @@ def test_storage_three_step_circular_rename(self):\n         self.assertListEqual(st.redirects(\'second\'), [])\n         self.assertListEqual(st.redirects(\'third\'), [])\n \n-\n-def test_suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestStorage))\n-    return suite\n+    def test_storage_non_string_path_fails(self):\n+        st = RedirectionStorage()\n+        with self.assertRaises(AttributeError):\n+            st[0] = \'/bar\'\n+        with self.assertRaises(AttributeError):\n+            st[\'/foo\'] = 0\ndiff --git a/plone/app/redirector/tests/test_view.py b/plone/app/redirector/tests/test_view.py\nindex bed2037..e6326c0 100644\n--- a/plone/app/redirector/tests/test_view.py\n+++ b/plone/app/redirector/tests/test_view.py\n@@ -204,9 +204,3 @@ def test_search_blacklisted(self):\n         urls = sorted([b.getURL() for b in view.search_for_similar()])\n         self.assertEqual(1, len(urls))\n         self.assertEqual(fu + \'/f2\', urls[0])\n-\n-\n-def test_suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestRedirectorView))\n-    return suite\n'

