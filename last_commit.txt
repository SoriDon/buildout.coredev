Repository: plone.dexterity


Branch: refs/heads/master
Date: 2015-12-16T15:29:21+01:00
Author: Stephan Geulette (sgeulette) <s.geulette@imio.be>
Commit: https://github.com/plone/plone.dexterity/commit/b558bea828096e6006645abe3ab2d078e4ac39a3

Corrected tests on date comparison (avoid 1h shift)

Files changed:
M CHANGES.rst
M plone/dexterity/tests/test_content.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 0800e26..9291fd9 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -11,7 +11,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Corrected tests on date comparison (avoid 1h shift)
+  [sgeulette]
 
 
 2.3.6 (2015-10-28)
diff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py
index 68726fc..0cb8827 100644
--- a/plone/dexterity/tests/test_content.py
+++ b/plone/dexterity/tests/test_content.py
@@ -679,7 +679,7 @@ def test_item_dublincore(self):
         self.assertEqual(i.modification_date, i.creation_date)
         self.assertEqual(i.modification_date, i.modified())
         self.assertEqual(
-            i.ModificationDate()[:19], i.modification_date.ISO()[:19])
+            i.ModificationDate(zone=summer_timezone)[:19], i.modification_date.ISO()[:19])
         self.assertEqual(i.Date(), i.EffectiveDate())
         self.assertEqual(i.Identifier(), i.absolute_url())
 
@@ -721,7 +721,7 @@ def test_item_dublincore_date(self):
         self.assertEqual(i.modification_date, i.creation_date)
         self.assertEqual(i.modification_date, i.modified())
         self.assertEqual(
-            i.ModificationDate()[:19], i.modification_date.ISO()[:19])
+            i.ModificationDate(zone=summer_timezone)[:19], i.modification_date.ISO()[:19])
         self.assertEqual(i.Date(), i.EffectiveDate())
 
     def test_item_dublincore_datetime(self):
@@ -771,7 +771,7 @@ def test_item_dublincore_datetime(self):
         self.assertEqual(i.CreationDate(zone=summer_timezone), i.creation_date.ISO())
         self.assertEqual(i.modification_date, i.creation_date)
         self.assertEqual(i.modification_date, i.modified())
-        self.assertEqual(i.ModificationDate(), i.modification_date.ISO())
+        self.assertEqual(i.ModificationDate(zone=summer_timezone), i.modification_date.ISO())
         self.assertEqual(i.Date(), i.EffectiveDate())
 
     def test_item_notifyModified(self):


Repository: plone.dexterity


Branch: refs/heads/master
Date: 2015-12-17T13:19:04+01:00
Author: Stephan Geulette (sgeulette) <s.geulette@imio.be>
Commit: https://github.com/plone/plone.dexterity/commit/3e1bb44fe2f8ad170033edcc6b382f8a0717ca2c

Sync schema when schema_policy name is changed

(issue #44)

Files changed:
M CHANGES.rst
M plone/dexterity/fti.py
M plone/dexterity/tests/test_fti.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 9291fd9..4c1e2d3 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -11,6 +11,9 @@ New:
 
 Fixes:
 
+- Sync schema when schema_policy name is changed (issue #44)
+  [sgeulette]
+
 - Corrected tests on date comparison (avoid 1h shift)
   [sgeulette]
 
diff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py
index 48856a3..8ff28cc 100644
--- a/plone/dexterity/fti.py
+++ b/plone/dexterity/fti.py
@@ -530,16 +530,18 @@ def ftiModified(object, event):
     if 'behaviors' in mod \
        or 'schema' in mod \
        or 'model_source' in mod \
-       or 'model_file' in mod:
+       or 'model_file' in mod \
+       or 'schema_policy' in mod:
 
         # Determine if we need to re-sync a dynamic schema
         if (fti.model_source or fti.model_file) \
-           and ('model_source' in mod or 'model_file' in mod):
+           and ('model_source' in mod or 'model_file' in mod or 'schema_policy' in mod):
 
             schemaName = portalTypeToSchemaName(portal_type)
             schema = getattr(plone.dexterity.schema.generated, schemaName)
 
             model = fti.lookupModel()
-            syncSchema(model.schema, schema, overwrite=True)
+            sync_bases = 'schema_policy' in mod and True or False
+            syncSchema(model.schema, schema, overwrite=True, sync_bases=sync_bases)
 
         notify(SchemaInvalidatedEvent(portal_type))
diff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py
index d37470a..63fce00 100644
--- a/plone/dexterity/tests/test_fti.py
+++ b/plone/dexterity/tests/test_fti.py
@@ -868,6 +868,59 @@ class IBlank(Interface):
         self.assertTrue('title' in IBlank)
         self.assertTrue(IBlank['title'].title == u"title")
 
+    def test_dynamic_schema_refreshed_on_modify_schema_policy(self):
+        portal_type = u"testtype"
+        fti = self.mocker.proxy(DexterityFTI(portal_type))
+
+        class INew(Interface):
+            title = zope.schema.TextLine(title=u"title")
+
+        class IBlank(Interface):
+            pass
+
+        class TestSchemaPolicy(DexteritySchemaPolicy):
+            def bases(self, schemaName, tree):
+                return (INew,)
+
+        gsm = getGlobalSiteManager()
+        policy = TestSchemaPolicy()
+        gsm.registerUtility(
+            policy,
+            plone.supermodel.interfaces.ISchemaPolicy,
+            name=u"test"
+        )
+
+        self.expect(fti.schema_policy).passthrough().count(0, None)
+
+        site_dummy = self.create_dummy(
+            getPhysicalPath=lambda: ('', 'siteid')
+        )
+        self.mock_utility(site_dummy, ISiteRoot)
+
+        self.replay()
+
+        # Set source interface
+        schemaName = utils.portalTypeToSchemaName(fti.getId())
+        setattr(plone.dexterity.schema.generated, schemaName, IBlank)
+        original = getattr(plone.dexterity.schema.generated, schemaName)
+        self.assertNotIn(INew, original.__bases__)
+        self.assertNotIn('title', original)
+
+        # Set new schema_policy
+        fti.schema_policy = "test"
+
+        # Sync this with schema
+        ftiModified(
+            fti,
+            ObjectModifiedEvent(
+                fti,
+                DexterityFTIModificationDescription('schema_policy', '')
+            )
+        )
+        updated = getattr(plone.dexterity.schema.generated, schemaName)
+        self.assertIn('title', updated)
+        self.assertIn(INew, updated.__bases__)
+
     def test_concrete_schema_not_refreshed_on_modify_schema(self):
         portal_type = u"testtype"
         fti = self.mocker.proxy(DexterityFTI(portal_type))


Repository: plone.dexterity


Branch: refs/heads/master
Date: 2015-12-22T09:12:37+01:00
Author: Stephan Geulette (sgeulette) <s.geulette@imio.be>
Commit: https://github.com/plone/plone.dexterity/commit/cd85f2c76c08b58af18bc96b4311edf13aa5ff05

Removed unneeded test

Files changed:
M plone/dexterity/fti.py

diff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py
index 8ff28cc..8f87db2 100644
--- a/plone/dexterity/fti.py
+++ b/plone/dexterity/fti.py
@@ -541,7 +541,7 @@ def ftiModified(object, event):
             schema = getattr(plone.dexterity.schema.generated, schemaName)
 
             model = fti.lookupModel()
-            sync_bases = 'schema_policy' in mod and True or False
+            sync_bases = 'schema_policy' in mod
             syncSchema(model.schema, schema, overwrite=True, sync_bases=sync_bases)
 
         notify(SchemaInvalidatedEvent(portal_type))


Repository: plone.dexterity


Branch: refs/heads/master
Date: 2015-12-22T15:29:28+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.dexterity/commit/3b01f64deedb76287b6aa57f89386da09313231d

Merge pull request #45 from sgeulette/master

Resolve issue #44

Files changed:
M CHANGES.rst
M plone/dexterity/fti.py
M plone/dexterity/tests/test_content.py
M plone/dexterity/tests/test_fti.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 0800e26..4c1e2d3 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -11,7 +11,11 @@ New:
 
 Fixes:
 
-- *add item here*
+- Sync schema when schema_policy name is changed (issue #44)
+  [sgeulette]
+
+- Corrected tests on date comparison (avoid 1h shift)
+  [sgeulette]
 
 
 2.3.6 (2015-10-28)
diff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py
index 48856a3..8f87db2 100644
--- a/plone/dexterity/fti.py
+++ b/plone/dexterity/fti.py
@@ -530,16 +530,18 @@ def ftiModified(object, event):
     if 'behaviors' in mod \
        or 'schema' in mod \
        or 'model_source' in mod \
-       or 'model_file' in mod:
+       or 'model_file' in mod \
+       or 'schema_policy' in mod:
 
         # Determine if we need to re-sync a dynamic schema
         if (fti.model_source or fti.model_file) \
-           and ('model_source' in mod or 'model_file' in mod):
+           and ('model_source' in mod or 'model_file' in mod or 'schema_policy' in mod):
 
             schemaName = portalTypeToSchemaName(portal_type)
             schema = getattr(plone.dexterity.schema.generated, schemaName)
 
             model = fti.lookupModel()
-            syncSchema(model.schema, schema, overwrite=True)
+            sync_bases = 'schema_policy' in mod
+            syncSchema(model.schema, schema, overwrite=True, sync_bases=sync_bases)
 
         notify(SchemaInvalidatedEvent(portal_type))
diff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py
index 68726fc..0cb8827 100644
--- a/plone/dexterity/tests/test_content.py
+++ b/plone/dexterity/tests/test_content.py
@@ -679,7 +679,7 @@ def test_item_dublincore(self):
         self.assertEqual(i.modification_date, i.creation_date)
         self.assertEqual(i.modification_date, i.modified())
         self.assertEqual(
-            i.ModificationDate()[:19], i.modification_date.ISO()[:19])
+            i.ModificationDate(zone=summer_timezone)[:19], i.modification_date.ISO()[:19])
         self.assertEqual(i.Date(), i.EffectiveDate())
         self.assertEqual(i.Identifier(), i.absolute_url())
 
@@ -721,7 +721,7 @@ def test_item_dublincore_date(self):
         self.assertEqual(i.modification_date, i.creation_date)
         self.assertEqual(i.modification_date, i.modified())
         self.assertEqual(
-            i.ModificationDate()[:19], i.modification_date.ISO()[:19])
+            i.ModificationDate(zone=summer_timezone)[:19], i.modification_date.ISO()[:19])
         self.assertEqual(i.Date(), i.EffectiveDate())
 
     def test_item_dublincore_datetime(self):
@@ -771,7 +771,7 @@ def test_item_dublincore_datetime(self):
         self.assertEqual(i.CreationDate(zone=summer_timezone), i.creation_date.ISO())
         self.assertEqual(i.modification_date, i.creation_date)
         self.assertEqual(i.modification_date, i.modified())
-        self.assertEqual(i.ModificationDate(), i.modification_date.ISO())
+        self.assertEqual(i.ModificationDate(zone=summer_timezone), i.modification_date.ISO())
         self.assertEqual(i.Date(), i.EffectiveDate())
 
     def test_item_notifyModified(self):
diff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py
index d37470a..63fce00 100644
--- a/plone/dexterity/tests/test_fti.py
+++ b/plone/dexterity/tests/test_fti.py
@@ -868,6 +868,59 @@ class IBlank(Interface):
         self.assertTrue('title' in IBlank)
         self.assertTrue(IBlank['title'].title == u"title")
 
+    def test_dynamic_schema_refreshed_on_modify_schema_policy(self):
+        portal_type = u"testtype"
+        fti = self.mocker.proxy(DexterityFTI(portal_type))
+
+        class INew(Interface):
+            title = zope.schema.TextLine(title=u"title")
+
+        class IBlank(Interface):
+            pass
+
+        class TestSchemaPolicy(DexteritySchemaPolicy):
+            def bases(self, schemaName, tree):
+                return (INew,)
+
+        gsm = getGlobalSiteManager()
+        policy = TestSchemaPolicy()
+        gsm.registerUtility(
+            policy,
+            plone.supermodel.interfaces.ISchemaPolicy,
+            name=u"test"
+        )
+
+        self.expect(fti.schema_policy).passthrough().count(0, None)
+
+        site_dummy = self.create_dummy(
+            getPhysicalPath=lambda: ('', 'siteid')
+        )
+        self.mock_utility(site_dummy, ISiteRoot)
+
+        self.replay()
+
+        # Set source interface
+        schemaName = utils.portalTypeToSchemaName(fti.getId())
+        setattr(plone.dexterity.schema.generated, schemaName, IBlank)
+        original = getattr(plone.dexterity.schema.generated, schemaName)
+        self.assertNotIn(INew, original.__bases__)
+        self.assertNotIn('title', original)
+
+        # Set new schema_policy
+        fti.schema_policy = "test"
+
+        # Sync this with schema
+        ftiModified(
+            fti,
+            ObjectModifiedEvent(
+                fti,
+                DexterityFTIModificationDescription('schema_policy', '')
+            )
+        )
+        updated = getattr(plone.dexterity.schema.generated, schemaName)
+        self.assertIn('title', updated)
+        self.assertIn(INew, updated.__bases__)
+
     def test_concrete_schema_not_refreshed_on_modify_schema(self):
         portal_type = u"testtype"
         fti = self.mocker.proxy(DexterityFTI(portal_type))


