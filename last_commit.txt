Repository: plone.scale


Branch: refs/heads/master
Date: 2022-08-12T16:16:24+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/85874eb36fc95485ba609601c5035cb507ffd79b

Use "scale" mode as default.

This cleans up more confusion between mode and direction.  See also https://github.com/plone/plone.namedfile/issues/102.
Previously our definition of the `IImageScaleFactory` interface had the deprecated `direction="thumbnail"`.
Other parts used `mode="contain"` by default, which does cropping, where in Plone we are used to simple scaling almost everywhere.

Depending on your point of view, you could call this a bug fix (fixing the default to what Plone expects, to avoid surprises).
Or you could call this a breaking change, because the default changes.
It is beta stage, so I am okay with it either way.

Files changed:
A news/102.bugfix
M plone/scale/interfaces.py
M plone/scale/scale.py
M plone/scale/storage.py
M plone/scale/tests/test_scale.py
M plone/scale/tests/test_storage.py

b'diff --git a/news/102.bugfix b/news/102.bugfix\nnew file mode 100644\nindex 0000000..61a9734\n--- /dev/null\n+++ b/news/102.bugfix\n@@ -0,0 +1,6 @@\n+Use "scale" mode as default.\n+This cleans up more confusion between mode and direction.\n+See also `plone.namedfile issue 102 <https://github.com/plone/plone.namedfile/issues/102>`_.\n+Previously our definition of the ``IImageScaleFactory`` interface had the deprecated ``direction="thumbnail"``.\n+Other parts used ``mode="contain"`` by default, which does cropping, where in Plone we are used to simple scaling almost everywhere.\n+[maurits]\ndiff --git a/plone/scale/interfaces.py b/plone/scale/interfaces.py\nindex 87103e0..41a9b72 100644\n--- a/plone/scale/interfaces.py\n+++ b/plone/scale/interfaces.py\n@@ -12,9 +12,9 @@ class IScaledImageQuality(Interface):\n class IImageScaleFactory(Interface):\n     """Creates a scale"""\n \n-    def _call__(\n+    def __call__(\n         fieldname=None,\n-        direction="thumbnail",\n+        mode="scale",\n         height=None,\n         width=None,\n         scale=None,\n@@ -30,8 +30,10 @@ def _call__(\n         ``fieldname``\n             name of the field to scale\n \n-        ``direction``\n-            is same as PIL direction on scale\n+        ``mode``\n+            See ``scalePILImage`` for the values that should be accepted.\n+            This used to be called "direction", which may still be accepted,\n+            but is deprecated.\n \n         ``width`` and ``height``\n             target size\ndiff --git a/plone/scale/scale.py b/plone/scale/scale.py\nindex 3fe7be6..bb8b42d 100644\n--- a/plone/scale/scale.py\n+++ b/plone/scale/scale.py\n@@ -45,7 +45,7 @@ def scaleImage(\n     image,\n     width=None,\n     height=None,\n-    mode="contain",\n+    mode="scale",\n     quality=88,\n     result=None,\n     direction=None,\n@@ -153,17 +153,17 @@ def _scale_thumbnail(image, width=None, height=None):\n def get_scale_mode(mode, direction=None):\n     if direction is not None:\n         warnings.warn(\n-            "the \'direction\' option is deprecated, use \'mode\' instead",\n+            "The \'direction\' option is deprecated, use \'mode\' instead.",\n             DeprecationWarning,\n         )\n         mode = direction\n \n-    if mode in ("scale-crop-to-fit", "down"):\n-        mode = "contain"\n-    elif mode in ("scale-crop-to-fill", "up"):\n-        mode = "cover"\n-    elif mode in ("keep", "thumbnail"):\n-        mode = "scale"\n+    if mode in ("scale", "keep", "thumbnail", None):\n+        return "scale"\n+    if mode in ("contain", "scale-crop-to-fit", "down"):\n+        return "contain"\n+    if mode in ("cover", "scale-crop-to-fill", "up"):\n+        return "cover"\n \n     return mode\n \n@@ -178,7 +178,7 @@ def __init__(self, original_width=0, original_height=0):\n \n \n def _calculate_all_dimensions(\n-    original_width, original_height, width, height, mode="contain"\n+    original_width, original_height, width, height, mode="scale"\n ):\n     """Calculate all dimensions we need for scaling.\n \n@@ -334,7 +334,7 @@ def _calculate_all_dimensions(\n \n \n def calculate_scaled_dimensions(\n-    original_width, original_height, width, height, mode="contain"\n+    original_width, original_height, width, height, mode="scale"\n ):\n     """Calculate the scaled image dimensions from the originals using the\n     same logic as scalePILImage"""\n@@ -345,7 +345,7 @@ def calculate_scaled_dimensions(\n     return (dimensions.final_width, dimensions.final_height)\n \n \n-def scalePILImage(image, width=None, height=None, mode="contain", direction=None):\n+def scalePILImage(image, width=None, height=None, mode="scale", direction=None):\n     """Scale a PIL image to another size.\n \n     This is all about scaling for the display in a web browser.\ndiff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex dbde4a3..3986d4a 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -241,7 +241,8 @@ def pre_scale(self, **parameters):\n         height = parameters.get("height")\n         orig_width, orig_height = value.getImageSize()\n         mode = get_scale_mode(\n-            parameters.get("direction") or parameters.get("mode") or "contain"\n+            parameters.get("mode"),\n+            parameters.get("direction")\n         )\n         width, height = calculate_scaled_dimensions(\n             orig_width, orig_height, width, height, mode\ndiff --git a/plone/scale/tests/test_scale.py b/plone/scale/tests/test_scale.py\nindex d620661..4ffaf42 100644\n--- a/plone/scale/tests/test_scale.py\n+++ b/plone/scale/tests/test_scale.py\n@@ -226,6 +226,7 @@ def testAlternativeSpellings(self):\n         ``direction`` arguments instead of ``mode``.\n         """\n \n+        # Test mode contain.  This can do cropping.\n         # scale-crop-to-fit\n         img = PIL.Image.new("RGB", (20, 20), (0, 0, 0))\n         img_scaled = scalePILImage(img, 10, 5, direction="scale-crop-to-fit")\n@@ -335,19 +336,19 @@ def testDeprecations(self):\n             scaleImage(PNG, 16, 16, direction="keep")\n             self.assertEqual(len(w), 1)\n             self.assertIs(w[0].category, DeprecationWarning)\n-            self.assertIn("the \'direction\' option is deprecated", str(w[0].message))\n+            self.assertIn("The \'direction\' option is deprecated", str(w[0].message))\n \n     def test_calculate_scaled_dimensions_contain(self):\n-        """Test the calculate_scaled_dimensions function.\n+        """Test the calculate_scaled_dimensions function with mode "contain".\n \n         You pass it:\n \n             original_width, original_height, width, height\n \n-        Plus an optional mode, by default "contain"`.\n+        Plus an optional mode, by default "scale"`.\n         Alternative spellings: `scale-crop-to-fit`, `down`.\n         """\n-        calc = calculate_scaled_dimensions\n+        calc = functools.partial(calculate_scaled_dimensions, mode="contain")\n         self.assertEqual(calc(1, 1, 1, 1), (1, 1))\n         self.assertEqual(calc(10, 10, 1, 1), (1, 1))\n         self.assertEqual(calc(1, 1, 10, 10), (10, 10))\n@@ -381,8 +382,10 @@ def test_calculate_scaled_dimensions_scale(self):\n         """Test calculate_scaled_dimensions function with mode "scale".\n \n         Alternative spellings: `keep`, `thumbnail`.\n+        "scale" is the default\n         """\n-        calc = functools.partial(calculate_scaled_dimensions, mode="scale")\n+        # calc = functools.partial(calculate_scaled_dimensions, mode="scale")\n+        calc = calculate_scaled_dimensions\n         self.assertEqual(calc(1, 1, 1, 1), (1, 1))\n         self.assertEqual(calc(10, 10, 1, 1), (1, 1))\n         # Mode "scale" only scales down, not up:\ndiff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py\nindex e643fe0..e98531b 100644\n--- a/plone/scale/tests/test_storage.py\n+++ b/plone/scale/tests/test_storage.py\n@@ -112,7 +112,9 @@ def testPreScaleForNonExistingScale(self):\n         self.assertIn("key", scale)\n         self.assertEqual(scale["data"], None)\n         self.assertEqual(scale["width"], 50)\n-        self.assertEqual(scale["height"], 80)\n+        # Note: the original image is 60x40.\n+        # By default we scale without cropping, so you do not get height 80.\n+        self.assertEqual(scale["height"], 33)\n         self.assertEqual(scale["mimetype"], "image/jpeg")\n         # Request the same pre scale.\n         scale2 = storage.pre_scale(width=50, height=80)\n@@ -129,6 +131,15 @@ def testPreScaleForNonExistingScale(self):\n         self.assertEqual(new_scale["height"], 23)\n         self.assertEqual(new_scale["mimetype"], "image/png")\n \n+        # Try cropping as well.\n+        scale = storage.pre_scale(width=50, height=80, mode="contain")\n+        self.assertIn("uid", scale)\n+        self.assertIn("key", scale)\n+        self.assertEqual(scale["data"], None)\n+        self.assertEqual(scale["width"], 50)\n+        self.assertEqual(scale["height"], 80)\n+        self.assertEqual(scale["mimetype"], "image/jpeg")\n+\n     def testPreScaleForNonExistingField(self):\n         self._provide_dummy_scale_adapter(None)\n         storage = self.storage\n@@ -151,7 +162,7 @@ def test_get_or_generate(self):\n         self.assertEqual(placeholder["uid"], uid)\n         self.assertIsNone(placeholder["data"])\n         self.assertEqual(placeholder["width"], 50)\n-        self.assertEqual(placeholder["height"], 80)\n+        self.assertEqual(placeholder["height"], 33)\n         self.assertEqual(placeholder["mimetype"], "image/jpeg")\n         # \'get_or_generate\' gets the pre generated placeholder info\n         # and generates the scale.\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-09-29T12:34:49+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/b1ba10f71f56d4e7e2ffc956f162e0160ee0884f

No longer test Plone 5.2 on 3.6 and Plone 6.0 on 3.7.

Files changed:
A news/3637.breaking
M .github/workflows/tests.yml
M tox.ini

b'diff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nindex 25cbef5..79cf5b2 100644\n--- a/.github/workflows/tests.yml\n+++ b/.github/workflows/tests.yml\n@@ -12,10 +12,8 @@ jobs:\n       matrix:\n         config:\n         # [Python version, tox env]\n-        - ["3.6",  "plone52-py36"]\n         - ["3.7",  "plone52-py37"]\n         - ["3.8",  "plone52-py38"]\n-        - ["3.7",  "plone60-py37"]\n         - ["3.8",  "plone60-py38"]\n         - ["3.9",  "plone60-py39"]\n         - ["3.10", "plone60-py310"]\ndiff --git a/news/3637.breaking b/news/3637.breaking\nnew file mode 100644\nindex 0000000..000e271\n--- /dev/null\n+++ b/news/3637.breaking\n@@ -0,0 +1,2 @@\n+No longer test Plone 5.2 on 3.6 and Plone 6.0 on 3.7.\n+[maurits]\ndiff --git a/tox.ini b/tox.ini\nindex 053ec86..543f7fa 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,9 +1,7 @@\n [tox]\n envlist =\n-    plone52-py36,\n     plone52-py37,\n     plone52-py38,\n-    plone60-py37,\n     plone60-py38,\n     plone60-py39,\n     plone60-py310,\n@@ -18,13 +16,13 @@ commands =\n     pip list\n     zope-testrunner --test-path={toxinidir} {posargs:-vc}\n \n-[testenv:plone52-py{36,37,38}]\n+[testenv:plone52-py{37,38}]\n commands_pre =\n     pip install mxdev\n     mxdev -c sources-52.ini\n     pip install -rrequirements-52-mxdev.txt\n \n-[testenv:plone60-py{37,38,39,310}]\n+[testenv:plone60-py{38,39,310}]\n commands_pre =\n     # for libvcs pin, see https://github.com/bluedynamics/mxdev/issues/10\n     pip install mxdev "libvcs<0.12"\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-09-29T20:50:04+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/79f2f1367ebdb68a6cc7ef9684e2c26715f87e3b

Merge pull request #66 from plone/maurits-direction-versus-mode

Use "scale" mode as default.

Files changed:
A news/102.bugfix
A news/3637.breaking
M .github/workflows/tests.yml
M plone/scale/interfaces.py
M plone/scale/scale.py
M plone/scale/storage.py
M plone/scale/tests/test_scale.py
M plone/scale/tests/test_storage.py
M tox.ini

b'diff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nindex 25cbef5..79cf5b2 100644\n--- a/.github/workflows/tests.yml\n+++ b/.github/workflows/tests.yml\n@@ -12,10 +12,8 @@ jobs:\n       matrix:\n         config:\n         # [Python version, tox env]\n-        - ["3.6",  "plone52-py36"]\n         - ["3.7",  "plone52-py37"]\n         - ["3.8",  "plone52-py38"]\n-        - ["3.7",  "plone60-py37"]\n         - ["3.8",  "plone60-py38"]\n         - ["3.9",  "plone60-py39"]\n         - ["3.10", "plone60-py310"]\ndiff --git a/news/102.bugfix b/news/102.bugfix\nnew file mode 100644\nindex 0000000..61a9734\n--- /dev/null\n+++ b/news/102.bugfix\n@@ -0,0 +1,6 @@\n+Use "scale" mode as default.\n+This cleans up more confusion between mode and direction.\n+See also `plone.namedfile issue 102 <https://github.com/plone/plone.namedfile/issues/102>`_.\n+Previously our definition of the ``IImageScaleFactory`` interface had the deprecated ``direction="thumbnail"``.\n+Other parts used ``mode="contain"`` by default, which does cropping, where in Plone we are used to simple scaling almost everywhere.\n+[maurits]\ndiff --git a/news/3637.breaking b/news/3637.breaking\nnew file mode 100644\nindex 0000000..000e271\n--- /dev/null\n+++ b/news/3637.breaking\n@@ -0,0 +1,2 @@\n+No longer test Plone 5.2 on 3.6 and Plone 6.0 on 3.7.\n+[maurits]\ndiff --git a/plone/scale/interfaces.py b/plone/scale/interfaces.py\nindex 87103e0..41a9b72 100644\n--- a/plone/scale/interfaces.py\n+++ b/plone/scale/interfaces.py\n@@ -12,9 +12,9 @@ class IScaledImageQuality(Interface):\n class IImageScaleFactory(Interface):\n     """Creates a scale"""\n \n-    def _call__(\n+    def __call__(\n         fieldname=None,\n-        direction="thumbnail",\n+        mode="scale",\n         height=None,\n         width=None,\n         scale=None,\n@@ -30,8 +30,10 @@ def _call__(\n         ``fieldname``\n             name of the field to scale\n \n-        ``direction``\n-            is same as PIL direction on scale\n+        ``mode``\n+            See ``scalePILImage`` for the values that should be accepted.\n+            This used to be called "direction", which may still be accepted,\n+            but is deprecated.\n \n         ``width`` and ``height``\n             target size\ndiff --git a/plone/scale/scale.py b/plone/scale/scale.py\nindex 3fe7be6..bb8b42d 100644\n--- a/plone/scale/scale.py\n+++ b/plone/scale/scale.py\n@@ -45,7 +45,7 @@ def scaleImage(\n     image,\n     width=None,\n     height=None,\n-    mode="contain",\n+    mode="scale",\n     quality=88,\n     result=None,\n     direction=None,\n@@ -153,17 +153,17 @@ def _scale_thumbnail(image, width=None, height=None):\n def get_scale_mode(mode, direction=None):\n     if direction is not None:\n         warnings.warn(\n-            "the \'direction\' option is deprecated, use \'mode\' instead",\n+            "The \'direction\' option is deprecated, use \'mode\' instead.",\n             DeprecationWarning,\n         )\n         mode = direction\n \n-    if mode in ("scale-crop-to-fit", "down"):\n-        mode = "contain"\n-    elif mode in ("scale-crop-to-fill", "up"):\n-        mode = "cover"\n-    elif mode in ("keep", "thumbnail"):\n-        mode = "scale"\n+    if mode in ("scale", "keep", "thumbnail", None):\n+        return "scale"\n+    if mode in ("contain", "scale-crop-to-fit", "down"):\n+        return "contain"\n+    if mode in ("cover", "scale-crop-to-fill", "up"):\n+        return "cover"\n \n     return mode\n \n@@ -178,7 +178,7 @@ def __init__(self, original_width=0, original_height=0):\n \n \n def _calculate_all_dimensions(\n-    original_width, original_height, width, height, mode="contain"\n+    original_width, original_height, width, height, mode="scale"\n ):\n     """Calculate all dimensions we need for scaling.\n \n@@ -334,7 +334,7 @@ def _calculate_all_dimensions(\n \n \n def calculate_scaled_dimensions(\n-    original_width, original_height, width, height, mode="contain"\n+    original_width, original_height, width, height, mode="scale"\n ):\n     """Calculate the scaled image dimensions from the originals using the\n     same logic as scalePILImage"""\n@@ -345,7 +345,7 @@ def calculate_scaled_dimensions(\n     return (dimensions.final_width, dimensions.final_height)\n \n \n-def scalePILImage(image, width=None, height=None, mode="contain", direction=None):\n+def scalePILImage(image, width=None, height=None, mode="scale", direction=None):\n     """Scale a PIL image to another size.\n \n     This is all about scaling for the display in a web browser.\ndiff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex dbde4a3..3986d4a 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -241,7 +241,8 @@ def pre_scale(self, **parameters):\n         height = parameters.get("height")\n         orig_width, orig_height = value.getImageSize()\n         mode = get_scale_mode(\n-            parameters.get("direction") or parameters.get("mode") or "contain"\n+            parameters.get("mode"),\n+            parameters.get("direction")\n         )\n         width, height = calculate_scaled_dimensions(\n             orig_width, orig_height, width, height, mode\ndiff --git a/plone/scale/tests/test_scale.py b/plone/scale/tests/test_scale.py\nindex d620661..4ffaf42 100644\n--- a/plone/scale/tests/test_scale.py\n+++ b/plone/scale/tests/test_scale.py\n@@ -226,6 +226,7 @@ def testAlternativeSpellings(self):\n         ``direction`` arguments instead of ``mode``.\n         """\n \n+        # Test mode contain.  This can do cropping.\n         # scale-crop-to-fit\n         img = PIL.Image.new("RGB", (20, 20), (0, 0, 0))\n         img_scaled = scalePILImage(img, 10, 5, direction="scale-crop-to-fit")\n@@ -335,19 +336,19 @@ def testDeprecations(self):\n             scaleImage(PNG, 16, 16, direction="keep")\n             self.assertEqual(len(w), 1)\n             self.assertIs(w[0].category, DeprecationWarning)\n-            self.assertIn("the \'direction\' option is deprecated", str(w[0].message))\n+            self.assertIn("The \'direction\' option is deprecated", str(w[0].message))\n \n     def test_calculate_scaled_dimensions_contain(self):\n-        """Test the calculate_scaled_dimensions function.\n+        """Test the calculate_scaled_dimensions function with mode "contain".\n \n         You pass it:\n \n             original_width, original_height, width, height\n \n-        Plus an optional mode, by default "contain"`.\n+        Plus an optional mode, by default "scale"`.\n         Alternative spellings: `scale-crop-to-fit`, `down`.\n         """\n-        calc = calculate_scaled_dimensions\n+        calc = functools.partial(calculate_scaled_dimensions, mode="contain")\n         self.assertEqual(calc(1, 1, 1, 1), (1, 1))\n         self.assertEqual(calc(10, 10, 1, 1), (1, 1))\n         self.assertEqual(calc(1, 1, 10, 10), (10, 10))\n@@ -381,8 +382,10 @@ def test_calculate_scaled_dimensions_scale(self):\n         """Test calculate_scaled_dimensions function with mode "scale".\n \n         Alternative spellings: `keep`, `thumbnail`.\n+        "scale" is the default\n         """\n-        calc = functools.partial(calculate_scaled_dimensions, mode="scale")\n+        # calc = functools.partial(calculate_scaled_dimensions, mode="scale")\n+        calc = calculate_scaled_dimensions\n         self.assertEqual(calc(1, 1, 1, 1), (1, 1))\n         self.assertEqual(calc(10, 10, 1, 1), (1, 1))\n         # Mode "scale" only scales down, not up:\ndiff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py\nindex e643fe0..e98531b 100644\n--- a/plone/scale/tests/test_storage.py\n+++ b/plone/scale/tests/test_storage.py\n@@ -112,7 +112,9 @@ def testPreScaleForNonExistingScale(self):\n         self.assertIn("key", scale)\n         self.assertEqual(scale["data"], None)\n         self.assertEqual(scale["width"], 50)\n-        self.assertEqual(scale["height"], 80)\n+        # Note: the original image is 60x40.\n+        # By default we scale without cropping, so you do not get height 80.\n+        self.assertEqual(scale["height"], 33)\n         self.assertEqual(scale["mimetype"], "image/jpeg")\n         # Request the same pre scale.\n         scale2 = storage.pre_scale(width=50, height=80)\n@@ -129,6 +131,15 @@ def testPreScaleForNonExistingScale(self):\n         self.assertEqual(new_scale["height"], 23)\n         self.assertEqual(new_scale["mimetype"], "image/png")\n \n+        # Try cropping as well.\n+        scale = storage.pre_scale(width=50, height=80, mode="contain")\n+        self.assertIn("uid", scale)\n+        self.assertIn("key", scale)\n+        self.assertEqual(scale["data"], None)\n+        self.assertEqual(scale["width"], 50)\n+        self.assertEqual(scale["height"], 80)\n+        self.assertEqual(scale["mimetype"], "image/jpeg")\n+\n     def testPreScaleForNonExistingField(self):\n         self._provide_dummy_scale_adapter(None)\n         storage = self.storage\n@@ -151,7 +162,7 @@ def test_get_or_generate(self):\n         self.assertEqual(placeholder["uid"], uid)\n         self.assertIsNone(placeholder["data"])\n         self.assertEqual(placeholder["width"], 50)\n-        self.assertEqual(placeholder["height"], 80)\n+        self.assertEqual(placeholder["height"], 33)\n         self.assertEqual(placeholder["mimetype"], "image/jpeg")\n         # \'get_or_generate\' gets the pre generated placeholder info\n         # and generates the scale.\ndiff --git a/tox.ini b/tox.ini\nindex 053ec86..543f7fa 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,9 +1,7 @@\n [tox]\n envlist =\n-    plone52-py36,\n     plone52-py37,\n     plone52-py38,\n-    plone60-py37,\n     plone60-py38,\n     plone60-py39,\n     plone60-py310,\n@@ -18,13 +16,13 @@ commands =\n     pip list\n     zope-testrunner --test-path={toxinidir} {posargs:-vc}\n \n-[testenv:plone52-py{36,37,38}]\n+[testenv:plone52-py{37,38}]\n commands_pre =\n     pip install mxdev\n     mxdev -c sources-52.ini\n     pip install -rrequirements-52-mxdev.txt\n \n-[testenv:plone60-py{37,38,39,310}]\n+[testenv:plone60-py{38,39,310}]\n commands_pre =\n     # for libvcs pin, see https://github.com/bluedynamics/mxdev/issues/10\n     pip install mxdev "libvcs<0.12"\n'

