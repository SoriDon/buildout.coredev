Repository: plone.supermodel


Branch: refs/heads/master
Date: 2023-03-16T09:38:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.supermodel/commit/a65dc3c8fab3f01e054441596b63eeb6ab0c2193

Configuring with plone/meta

Files changed:
A .pre-commit-config.yaml
A news/13d8d6c0.internal
A news/243ca9ec.internal
M .meta.toml
M pyproject.toml
M setup.cfg
M tox.ini

b'diff --git a/.meta.toml b/.meta.toml\nindex 7c9dd1f..0652801 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -2,7 +2,7 @@\n # https://github.com/plone/meta/tree/master/config/default\n [meta]\n template = "default"\n-commit-id = "78307cdf"\n+commit-id = "243ca9ec"\n \n [dependencies]\n ignores = "[\'plone.rfc822\']"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..582f8ac\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.2\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/13d8d6c0.internal b/news/13d8d6c0.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/13d8d6c0.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/news/243ca9ec.internal b/news/243ca9ec.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/243ca9ec.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 0447505..c8fbc5c 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -43,4 +43,21 @@ profile = "plone"\n target-version = ["py38"]\n \n [tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'setuptools\', \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\n ignore-packages = [\'plone.rfc822\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 8849fbc..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -19,5 +19,5 @@ ignore =\n ignore =\n     .editorconfig\n     .meta.toml\n+    .pre-commit-config.yaml\n     tox.ini\n-    lint-requirements.txt\ndiff --git a/tox.ini b/tox.ini\nindex c4810c9..56c42c3 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -4,47 +4,47 @@\n envlist =\n     format\n     lint\n+    test\n \n [testenv]\n-py_files = git ls-files "*.py"\n-text_files = git ls-files "*.rst" "*.md"\n allowlist_externals =\n     sh\n \n [testenv:format]\n-description = automatically reformat python code\n+description = automatically reformat code\n skip_install = true\n deps =\n-    pyupgrade\n-    isort\n-    black\n-    -c lint-requirements.txt\n+    pre-commit\n commands =\n-    sh -c \'{[testenv]py_files} | xargs pyupgrade --py38-plus\'\n-    sh -c \'{[testenv]py_files} | xargs isort\'\n-    sh -c \'{[testenv]py_files} | xargs black\'\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n \n [testenv:lint]\n description = run linters that will help improve the code style\n skip_install = true\n deps =\n-    flake8\n-    codespell\n-    tomli  # needed for codespell to read pyproject.toml\n-    check-manifest\n-    pyroma\n-    -c lint-requirements.txt\n+    pre-commit\n commands =\n-    sh -c \'{[testenv]py_files} | xargs flake8\'\n-    sh -c \'{[testenv]py_files} | xargs codespell\'\n-    sh -c \'{[testenv]text_files} | xargs codespell\'\n-    check-manifest\n-    pyroma -n 10 .\n+    pre-commit run -a\n \n [testenv:dependencies]\n-description = check if the package defines all its dependencies\n+description = check if the package defines all its dependencies and generate a graph out of them\n deps =\n-    z3c.dependencychecker\n-    -c lint-requirements.txt\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n commands =\n     dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s plone.supermodel\n+extras =\n+    test\n'

Repository: plone.supermodel


Branch: refs/heads/master
Date: 2023-03-16T09:38:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.supermodel/commit/04661df2e3adbff22c71119895dc6cff15f85c5a

chore: black

Files changed:
M plone/supermodel/converters.py
M plone/supermodel/directives.py
M plone/supermodel/exportimport.py
M plone/supermodel/parser.py
M plone/supermodel/serializer.py
M plone/supermodel/utils.py

b'diff --git a/plone/supermodel/converters.py b/plone/supermodel/converters.py\nindex 4bdde60..3cc0916 100644\n--- a/plone/supermodel/converters.py\n+++ b/plone/supermodel/converters.py\n@@ -46,7 +46,6 @@ def toUnicode(self, value):\n @implementer(IFromUnicode)\n @adapter(IDate)\n class DateFromUnicode:\n-\n     format = "%Y-%m-%d"\n \n     def __init__(self, context):\n@@ -62,7 +61,6 @@ def fromUnicode(self, value):\n @implementer(IFromUnicode)\n @adapter(IDatetime)\n class DatetimeFromUnicode:\n-\n     format = "%Y-%m-%d %H:%M:%S"\n \n     def __init__(self, context):\ndiff --git a/plone/supermodel/directives.py b/plone/supermodel/directives.py\nindex 744d406..22cf5dd 100644\n--- a/plone/supermodel/directives.py\n+++ b/plone/supermodel/directives.py\n@@ -70,7 +70,6 @@ def store(self, tags, value):\n @adapter(ISchema)\n @implementer(ISchemaPlugin)\n class CheckerPlugin:\n-\n     key = None\n \n     def __init__(self, schema):\n@@ -112,7 +111,6 @@ def fieldNames(self):\n \n \n class ListPositionCheckerPlugin(CheckerPlugin):\n-\n     position = None\n \n     def fieldNames(self):\n@@ -139,7 +137,6 @@ def factory(self, filename, schema=""):\n @adapter(ISchema)\n @implementer(ISchemaPlugin)\n class SupermodelSchemaPlugin:\n-\n     order = -1000\n \n     def __init__(self, interface):\n@@ -209,13 +206,12 @@ def factory(\n             fields=fields,\n             order=order,\n         )\n-        for (key, value) in kw.items():\n+        for key, value in kw.items():\n             setattr(fieldset, key, value)\n         return [fieldset]\n \n \n class FieldsetCheckerPlugin(CheckerPlugin):\n-\n     key = FIELDSETS_KEY\n \n     def fieldNames(self):\n@@ -242,7 +238,6 @@ def factory(self, *args):\n             return args\n \n     class PrimaryFieldsPlugin(ListCheckerPlugin):\n-\n         key = PRIMARY_FIELDS_KEY\n \n         def __call__(self):\ndiff --git a/plone/supermodel/exportimport.py b/plone/supermodel/exportimport.py\nindex e767cb7..a22b7b1 100644\n--- a/plone/supermodel/exportimport.py\n+++ b/plone/supermodel/exportimport.py\n@@ -98,7 +98,6 @@ def read(self, element):\n \n             attributeField = self.fieldAttributes.get(attribute_name, None)\n             if attributeField is not None:\n-\n                 if attribute_name in self.fieldTypeAttributes:\n                     deferred[attribute_name] = attribute_element\n \n@@ -106,7 +105,6 @@ def read(self, element):\n                     deferred_nonvalidated[attribute_name] = attribute_element\n \n                 elif attribute_name in self.fieldInstanceAttributes:\n-\n                     attributeField_type = attribute_element.get("type")\n                     handler = queryUtility(\n                         IFieldExportImportHandler, name=attributeField_type\n@@ -148,7 +146,6 @@ def read(self, element):\n \n         for attribute_name in self.nonValidatedfieldTypeAttributes:\n             if attribute_name in deferred_nonvalidated:\n-\n                 # this is pretty nasty: we need the field\'s fromUnicode(),\n                 # but this always validates. The missing_value field may by\n                 # definition be invalid. Therefore, we need to fake it.\n@@ -339,7 +336,6 @@ def _constructField(self, attributes):\n         return super()._constructField(attributes)\n \n     def write(self, field, name, type, elementName="field"):\n-\n         element = super().write(field, name, type, elementName)\n \n         # write vocabulary or values list\ndiff --git a/plone/supermodel/parser.py b/plone/supermodel/parser.py\nindex 73feda4..b95f1df 100644\n--- a/plone/supermodel/parser.py\n+++ b/plone/supermodel/parser.py\n@@ -93,7 +93,6 @@ def _parse(source, policy):\n     policy_util = getUtility(ISchemaPolicy, name=policy)\n \n     def readField(fieldElement, schemaAttributes, fieldElements, baseFields):\n-\n         # Parse field attributes\n         fieldName = fieldElement.get("name")\n         fieldType = fieldElement.get("type")\n@@ -165,7 +164,6 @@ def readField(fieldElement, schemaAttributes, fieldElements, baseFields):\n                 readField(subelement, schemaAttributes, fieldElements, baseFields)\n \n             elif subelement.tag == ns("fieldset"):\n-\n                 fieldset_name = subelement.get("name")\n                 if fieldset_name is None:\n                     raise ValueError(f"Fieldset in schema {schemaName} has no name")\ndiff --git a/plone/supermodel/serializer.py b/plone/supermodel/serializer.py\nindex 2212515..f6f933d 100644\n--- a/plone/supermodel/serializer.py\n+++ b/plone/supermodel/serializer.py\n@@ -43,7 +43,6 @@ def __call__(self):\n \n \n def serialize(model):\n-\n     handlers = {}\n     schema_metadata_handlers = tuple(getUtilitiesFor(ISchemaMetadataHandler))\n     field_metadata_handlers = tuple(getUtilitiesFor(IFieldMetadataHandler))\n@@ -77,7 +76,6 @@ def writeField(field, parentElement):\n                 metadata_handler.write(fieldElement, schema, field)\n \n     for schemaName, schema in model.schemata.items():\n-\n         fieldsets = schema.queryTaggedValue(FIELDSETS_KEY, [])\n \n         fieldset_fields = set()\n@@ -106,7 +104,6 @@ def writeField(field, parentElement):\n             writeField(field, schema_element)\n \n         for fieldset in fieldsets:\n-\n             fieldset_element = etree.Element("fieldset")\n             fieldset_element.set("name", fieldset.__name__)\n             if fieldset.label:\ndiff --git a/plone/supermodel/utils.py b/plone/supermodel/utils.py\nindex af296a6..ba25d70 100644\n--- a/plone/supermodel/utils.py\n+++ b/plone/supermodel/utils.py\n@@ -38,14 +38,12 @@ def noNS(name):\n \n \n def indent(node, level=0):\n-\n     INDENT_SIZE = 2\n     node_indent = level * (" " * INDENT_SIZE)\n     child_indent = (level + 1) * (" " * INDENT_SIZE)\n \n     # node has children\n     if len(node):\n-\n         # add indent before first child node\n         if not node.text or not node.text.strip():\n             node.text = "\\n" + child_indent\n@@ -184,7 +182,6 @@ def valueToElement(field, value, name=None, force=False):\n     child = etree.Element(name)\n \n     if value is not None and (force or value != field.missing_value):\n-\n         if IDict.providedBy(field):\n             key_converter = IToUnicode(field.key_type)\n             for k, v in sorted(value.items()):\n@@ -301,7 +298,6 @@ def syncSchema(source, dest, overwrite=False, sync_bases=False):\n \n     for name, field in sortedFields(source):\n         if overwrite or name not in dest or dest[name].interface is not dest:\n-\n             clone = field.__class__.__new__(field.__class__)\n             clone.__dict__.update(field.__dict__)\n             clone.interface = dest\n'

Repository: plone.supermodel


Branch: refs/heads/master
Date: 2023-03-16T09:38:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.supermodel/commit/c46b5ffd3b43cf3a80a03390ea8ab96fde27d4d1

chore: zpretty

Files changed:
M plone/supermodel/configure.zcml

b'diff --git a/plone/supermodel/configure.zcml b/plone/supermodel/configure.zcml\nindex adee0b7..1c1e81b 100644\n--- a/plone/supermodel/configure.zcml\n+++ b/plone/supermodel/configure.zcml\n@@ -2,153 +2,157 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:five="http://namespaces.zope.org/five"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n-    i18n_domain="plone.supermodel">\n-\n-    <include package="z3c.zcmlhook" file="meta.zcml" />\n-\n-    <zcml:customAction\n-        handler=".model.finalizeSchemas"\n-        order="9999999"\n-        />\n-\n-    <adapter\n-        factory=".directives.FieldsetCheckerPlugin"\n-        name="plone.supermodel.fieldset"\n-        />\n-\n-    <adapter\n-        factory=".directives.SupermodelSchemaPlugin"\n-        name="plone.supermodel.load"\n-        />\n-\n-    <adapter\n-        zcml:condition="installed plone.rfc822"\n-        factory=".directives.PrimaryFieldsPlugin"\n-        name="plone.supermodel.primary"\n-        />\n-\n-    <!-- Unicode converters -->\n-\n-    <adapter factory=".converters.DefaultFromUnicode" />\n-    <adapter factory=".converters.DefaultToUnicode" />\n-\n-    <adapter factory=".converters.DateFromUnicode" />\n-    <adapter factory=".converters.DatetimeFromUnicode" />\n-\n-    <adapter factory=".converters.InterfaceFieldFromUnicode" />\n-    <adapter factory=".converters.InterfaceFieldToUnicode" />\n-\n-    <adapter factory=".converters.ObjectFromUnicode" />\n-\n-    <adapter factory=".converters.BytesToUnicode" />\n-\n-    <!-- Field handlers for all of zope.schema -->\n-\n-    <utility\n-        component=".fields.BytesHandler"\n-        name="zope.schema.Bytes"\n-        />\n-    <utility\n-        component=".fields.ASCIIHandler"\n-        name="zope.schema.ASCII"\n-        />\n-    <utility\n-        component=".fields.BytesLineHandler"\n-        name="zope.schema.BytesLine"\n-        />\n-    <utility\n-        component=".fields.ASCIILineHandler"\n-        name="zope.schema.ASCIILine"\n-        />\n-    <utility\n-        component=".fields.TextHandler"\n-        name="zope.schema.Text"\n-        />\n-    <utility\n-        component=".fields.TextLineHandler"\n-        name="zope.schema.TextLine"\n-        />\n-    <utility\n-        component=".fields.BoolHandler"\n-        name="zope.schema.Bool"\n-        />\n-    <utility\n-        component=".fields.IntHandler"\n-        name="zope.schema.Int"\n-        />\n-    <utility\n-        component=".fields.FloatHandler"\n-        name="zope.schema.Float"\n-        />\n-    <utility\n-        component=".fields.DecimalHandler"\n-        name="zope.schema.Decimal"\n-        />\n-    <utility\n-        component=".fields.TupleHandler"\n-        name="zope.schema.Tuple"\n-        />\n-    <utility\n-        component=".fields.ListHandler"\n-        name="zope.schema.List"\n-        />\n-    <utility\n-        component=".fields.SetHandler"\n-        name="zope.schema.Set"\n-        />\n-    <utility\n-        component=".fields.FrozenSetHandler"\n-        name="zope.schema.FrozenSet"\n-        />\n-    <utility\n-        component=".fields.PasswordHandler"\n-        name="zope.schema.Password"\n-        />\n-    <utility\n-        component=".fields.DictHandler"\n-        name="zope.schema.Dict"\n-        />\n-    <utility\n-        component=".fields.DatetimeHandler"\n-        name="zope.schema.Datetime"\n-        />\n-    <utility\n-        component=".fields.DateHandler"\n-        name="zope.schema.Date"\n-        />\n-    <utility\n-        component=".fields.SourceTextHandler"\n-        name="zope.schema.SourceText"\n-        />\n-    <utility\n-        component=".fields.URIHandler"\n-        name="zope.schema.URI"\n-        />\n-    <utility\n-        component=".fields.IdHandler"\n-        name="zope.schema.Id"\n-        />\n-    <utility\n-        component=".fields.DottedNameHandler"\n-        name="zope.schema.DottedName"\n-        />\n-    <utility\n-        component=".fields.InterfaceFieldHandler"\n-        name="zope.schema.InterfaceField"\n-        />\n-    <utility\n-        component=".fields.ObjectHandler"\n-        name="zope.schema.Object"\n-        />\n-    <utility\n-        component=".fields.ChoiceHandler"\n-        name="zope.schema.Choice"\n-        />\n-\n-    <!-- Field name extractors -->\n-    <adapter factory=".serializer.DefaultFieldNameExtractor" />\n-\n-    <!-- Parsing policy -->\n-    <utility factory=".parser.DefaultSchemaPolicy" />\n+    i18n_domain="plone.supermodel"\n+    >\n+\n+  <include\n+      package="z3c.zcmlhook"\n+      file="meta.zcml"\n+      />\n+\n+  <zcml:customAction\n+      handler=".model.finalizeSchemas"\n+      order="9999999"\n+      />\n+\n+  <adapter\n+      factory=".directives.FieldsetCheckerPlugin"\n+      name="plone.supermodel.fieldset"\n+      />\n+\n+  <adapter\n+      factory=".directives.SupermodelSchemaPlugin"\n+      name="plone.supermodel.load"\n+      />\n+\n+  <adapter\n+      factory=".directives.PrimaryFieldsPlugin"\n+      name="plone.supermodel.primary"\n+      zcml:condition="installed plone.rfc822"\n+      />\n+\n+  <!-- Unicode converters -->\n+\n+  <adapter factory=".converters.DefaultFromUnicode" />\n+  <adapter factory=".converters.DefaultToUnicode" />\n+\n+  <adapter factory=".converters.DateFromUnicode" />\n+  <adapter factory=".converters.DatetimeFromUnicode" />\n+\n+  <adapter factory=".converters.InterfaceFieldFromUnicode" />\n+  <adapter factory=".converters.InterfaceFieldToUnicode" />\n+\n+  <adapter factory=".converters.ObjectFromUnicode" />\n+\n+  <adapter factory=".converters.BytesToUnicode" />\n+\n+  <!-- Field handlers for all of zope.schema -->\n+\n+  <utility\n+      name="zope.schema.Bytes"\n+      component=".fields.BytesHandler"\n+      />\n+  <utility\n+      name="zope.schema.ASCII"\n+      component=".fields.ASCIIHandler"\n+      />\n+  <utility\n+      name="zope.schema.BytesLine"\n+      component=".fields.BytesLineHandler"\n+      />\n+  <utility\n+      name="zope.schema.ASCIILine"\n+      component=".fields.ASCIILineHandler"\n+      />\n+  <utility\n+      name="zope.schema.Text"\n+      component=".fields.TextHandler"\n+      />\n+  <utility\n+      name="zope.schema.TextLine"\n+      component=".fields.TextLineHandler"\n+      />\n+  <utility\n+      name="zope.schema.Bool"\n+      component=".fields.BoolHandler"\n+      />\n+  <utility\n+      name="zope.schema.Int"\n+      component=".fields.IntHandler"\n+      />\n+  <utility\n+      name="zope.schema.Float"\n+      component=".fields.FloatHandler"\n+      />\n+  <utility\n+      name="zope.schema.Decimal"\n+      component=".fields.DecimalHandler"\n+      />\n+  <utility\n+      name="zope.schema.Tuple"\n+      component=".fields.TupleHandler"\n+      />\n+  <utility\n+      name="zope.schema.List"\n+      component=".fields.ListHandler"\n+      />\n+  <utility\n+      name="zope.schema.Set"\n+      component=".fields.SetHandler"\n+      />\n+  <utility\n+      name="zope.schema.FrozenSet"\n+      component=".fields.FrozenSetHandler"\n+      />\n+  <utility\n+      name="zope.schema.Password"\n+      component=".fields.PasswordHandler"\n+      />\n+  <utility\n+      name="zope.schema.Dict"\n+      component=".fields.DictHandler"\n+      />\n+  <utility\n+      name="zope.schema.Datetime"\n+      component=".fields.DatetimeHandler"\n+      />\n+  <utility\n+      name="zope.schema.Date"\n+      component=".fields.DateHandler"\n+      />\n+  <utility\n+      name="zope.schema.SourceText"\n+      component=".fields.SourceTextHandler"\n+      />\n+  <utility\n+      name="zope.schema.URI"\n+      component=".fields.URIHandler"\n+      />\n+  <utility\n+      name="zope.schema.Id"\n+      component=".fields.IdHandler"\n+      />\n+  <utility\n+      name="zope.schema.DottedName"\n+      component=".fields.DottedNameHandler"\n+      />\n+  <utility\n+      name="zope.schema.InterfaceField"\n+      component=".fields.InterfaceFieldHandler"\n+      />\n+  <utility\n+      name="zope.schema.Object"\n+      component=".fields.ObjectHandler"\n+      />\n+  <utility\n+      name="zope.schema.Choice"\n+      component=".fields.ChoiceHandler"\n+      />\n+\n+  <!-- Field name extractors -->\n+  <adapter factory=".serializer.DefaultFieldNameExtractor" />\n+\n+  <!-- Parsing policy -->\n+  <utility factory=".parser.DefaultSchemaPolicy" />\n \n </configure>\n'

Repository: plone.supermodel


Branch: refs/heads/master
Date: 2023-03-16T09:52:11+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.supermodel/commit/9523e5561e47b239b8ea05e07b043c7f835e691e

fix: tests

For `tox -e test` to run successfully seems that somewhere
`zope.testing` is needed, although not directly by `plone.supermodel`
itself.

Depending on `zope.configuration[test]` does the trick to pull
`zope.testing` in.

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex e8b4b5c..2aa5ffd 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -58,7 +58,7 @@ def read(*rnames):\n         "plone.rfc822": ["plone.rfc822"],\n         "test": [\n             "plone.rfc822",\n-            "zope.configuration",\n+            "zope.configuration[test]",\n         ],\n     },\n     entry_points="""\n'

Repository: plone.supermodel


Branch: refs/heads/master
Date: 2023-03-16T13:44:12+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.supermodel/commit/0e584a2d54427a1d12f7ef63aeb87216da9c4ad2

Merge pull request #46 from plone/config-with-default-template-9a8853a8

Config with default template

Files changed:
A .pre-commit-config.yaml
A news/13d8d6c0.internal
A news/243ca9ec.internal
M .meta.toml
M plone/supermodel/configure.zcml
M plone/supermodel/converters.py
M plone/supermodel/directives.py
M plone/supermodel/exportimport.py
M plone/supermodel/parser.py
M plone/supermodel/serializer.py
M plone/supermodel/utils.py
M pyproject.toml
M setup.cfg
M setup.py
M tox.ini

b'diff --git a/.meta.toml b/.meta.toml\nindex 7c9dd1f..0652801 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -2,7 +2,7 @@\n # https://github.com/plone/meta/tree/master/config/default\n [meta]\n template = "default"\n-commit-id = "78307cdf"\n+commit-id = "243ca9ec"\n \n [dependencies]\n ignores = "[\'plone.rfc822\']"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..582f8ac\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.2\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/13d8d6c0.internal b/news/13d8d6c0.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/13d8d6c0.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/news/243ca9ec.internal b/news/243ca9ec.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/243ca9ec.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/supermodel/configure.zcml b/plone/supermodel/configure.zcml\nindex adee0b7..1c1e81b 100644\n--- a/plone/supermodel/configure.zcml\n+++ b/plone/supermodel/configure.zcml\n@@ -2,153 +2,157 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:five="http://namespaces.zope.org/five"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n-    i18n_domain="plone.supermodel">\n-\n-    <include package="z3c.zcmlhook" file="meta.zcml" />\n-\n-    <zcml:customAction\n-        handler=".model.finalizeSchemas"\n-        order="9999999"\n-        />\n-\n-    <adapter\n-        factory=".directives.FieldsetCheckerPlugin"\n-        name="plone.supermodel.fieldset"\n-        />\n-\n-    <adapter\n-        factory=".directives.SupermodelSchemaPlugin"\n-        name="plone.supermodel.load"\n-        />\n-\n-    <adapter\n-        zcml:condition="installed plone.rfc822"\n-        factory=".directives.PrimaryFieldsPlugin"\n-        name="plone.supermodel.primary"\n-        />\n-\n-    <!-- Unicode converters -->\n-\n-    <adapter factory=".converters.DefaultFromUnicode" />\n-    <adapter factory=".converters.DefaultToUnicode" />\n-\n-    <adapter factory=".converters.DateFromUnicode" />\n-    <adapter factory=".converters.DatetimeFromUnicode" />\n-\n-    <adapter factory=".converters.InterfaceFieldFromUnicode" />\n-    <adapter factory=".converters.InterfaceFieldToUnicode" />\n-\n-    <adapter factory=".converters.ObjectFromUnicode" />\n-\n-    <adapter factory=".converters.BytesToUnicode" />\n-\n-    <!-- Field handlers for all of zope.schema -->\n-\n-    <utility\n-        component=".fields.BytesHandler"\n-        name="zope.schema.Bytes"\n-        />\n-    <utility\n-        component=".fields.ASCIIHandler"\n-        name="zope.schema.ASCII"\n-        />\n-    <utility\n-        component=".fields.BytesLineHandler"\n-        name="zope.schema.BytesLine"\n-        />\n-    <utility\n-        component=".fields.ASCIILineHandler"\n-        name="zope.schema.ASCIILine"\n-        />\n-    <utility\n-        component=".fields.TextHandler"\n-        name="zope.schema.Text"\n-        />\n-    <utility\n-        component=".fields.TextLineHandler"\n-        name="zope.schema.TextLine"\n-        />\n-    <utility\n-        component=".fields.BoolHandler"\n-        name="zope.schema.Bool"\n-        />\n-    <utility\n-        component=".fields.IntHandler"\n-        name="zope.schema.Int"\n-        />\n-    <utility\n-        component=".fields.FloatHandler"\n-        name="zope.schema.Float"\n-        />\n-    <utility\n-        component=".fields.DecimalHandler"\n-        name="zope.schema.Decimal"\n-        />\n-    <utility\n-        component=".fields.TupleHandler"\n-        name="zope.schema.Tuple"\n-        />\n-    <utility\n-        component=".fields.ListHandler"\n-        name="zope.schema.List"\n-        />\n-    <utility\n-        component=".fields.SetHandler"\n-        name="zope.schema.Set"\n-        />\n-    <utility\n-        component=".fields.FrozenSetHandler"\n-        name="zope.schema.FrozenSet"\n-        />\n-    <utility\n-        component=".fields.PasswordHandler"\n-        name="zope.schema.Password"\n-        />\n-    <utility\n-        component=".fields.DictHandler"\n-        name="zope.schema.Dict"\n-        />\n-    <utility\n-        component=".fields.DatetimeHandler"\n-        name="zope.schema.Datetime"\n-        />\n-    <utility\n-        component=".fields.DateHandler"\n-        name="zope.schema.Date"\n-        />\n-    <utility\n-        component=".fields.SourceTextHandler"\n-        name="zope.schema.SourceText"\n-        />\n-    <utility\n-        component=".fields.URIHandler"\n-        name="zope.schema.URI"\n-        />\n-    <utility\n-        component=".fields.IdHandler"\n-        name="zope.schema.Id"\n-        />\n-    <utility\n-        component=".fields.DottedNameHandler"\n-        name="zope.schema.DottedName"\n-        />\n-    <utility\n-        component=".fields.InterfaceFieldHandler"\n-        name="zope.schema.InterfaceField"\n-        />\n-    <utility\n-        component=".fields.ObjectHandler"\n-        name="zope.schema.Object"\n-        />\n-    <utility\n-        component=".fields.ChoiceHandler"\n-        name="zope.schema.Choice"\n-        />\n-\n-    <!-- Field name extractors -->\n-    <adapter factory=".serializer.DefaultFieldNameExtractor" />\n-\n-    <!-- Parsing policy -->\n-    <utility factory=".parser.DefaultSchemaPolicy" />\n+    i18n_domain="plone.supermodel"\n+    >\n+\n+  <include\n+      package="z3c.zcmlhook"\n+      file="meta.zcml"\n+      />\n+\n+  <zcml:customAction\n+      handler=".model.finalizeSchemas"\n+      order="9999999"\n+      />\n+\n+  <adapter\n+      factory=".directives.FieldsetCheckerPlugin"\n+      name="plone.supermodel.fieldset"\n+      />\n+\n+  <adapter\n+      factory=".directives.SupermodelSchemaPlugin"\n+      name="plone.supermodel.load"\n+      />\n+\n+  <adapter\n+      factory=".directives.PrimaryFieldsPlugin"\n+      name="plone.supermodel.primary"\n+      zcml:condition="installed plone.rfc822"\n+      />\n+\n+  <!-- Unicode converters -->\n+\n+  <adapter factory=".converters.DefaultFromUnicode" />\n+  <adapter factory=".converters.DefaultToUnicode" />\n+\n+  <adapter factory=".converters.DateFromUnicode" />\n+  <adapter factory=".converters.DatetimeFromUnicode" />\n+\n+  <adapter factory=".converters.InterfaceFieldFromUnicode" />\n+  <adapter factory=".converters.InterfaceFieldToUnicode" />\n+\n+  <adapter factory=".converters.ObjectFromUnicode" />\n+\n+  <adapter factory=".converters.BytesToUnicode" />\n+\n+  <!-- Field handlers for all of zope.schema -->\n+\n+  <utility\n+      name="zope.schema.Bytes"\n+      component=".fields.BytesHandler"\n+      />\n+  <utility\n+      name="zope.schema.ASCII"\n+      component=".fields.ASCIIHandler"\n+      />\n+  <utility\n+      name="zope.schema.BytesLine"\n+      component=".fields.BytesLineHandler"\n+      />\n+  <utility\n+      name="zope.schema.ASCIILine"\n+      component=".fields.ASCIILineHandler"\n+      />\n+  <utility\n+      name="zope.schema.Text"\n+      component=".fields.TextHandler"\n+      />\n+  <utility\n+      name="zope.schema.TextLine"\n+      component=".fields.TextLineHandler"\n+      />\n+  <utility\n+      name="zope.schema.Bool"\n+      component=".fields.BoolHandler"\n+      />\n+  <utility\n+      name="zope.schema.Int"\n+      component=".fields.IntHandler"\n+      />\n+  <utility\n+      name="zope.schema.Float"\n+      component=".fields.FloatHandler"\n+      />\n+  <utility\n+      name="zope.schema.Decimal"\n+      component=".fields.DecimalHandler"\n+      />\n+  <utility\n+      name="zope.schema.Tuple"\n+      component=".fields.TupleHandler"\n+      />\n+  <utility\n+      name="zope.schema.List"\n+      component=".fields.ListHandler"\n+      />\n+  <utility\n+      name="zope.schema.Set"\n+      component=".fields.SetHandler"\n+      />\n+  <utility\n+      name="zope.schema.FrozenSet"\n+      component=".fields.FrozenSetHandler"\n+      />\n+  <utility\n+      name="zope.schema.Password"\n+      component=".fields.PasswordHandler"\n+      />\n+  <utility\n+      name="zope.schema.Dict"\n+      component=".fields.DictHandler"\n+      />\n+  <utility\n+      name="zope.schema.Datetime"\n+      component=".fields.DatetimeHandler"\n+      />\n+  <utility\n+      name="zope.schema.Date"\n+      component=".fields.DateHandler"\n+      />\n+  <utility\n+      name="zope.schema.SourceText"\n+      component=".fields.SourceTextHandler"\n+      />\n+  <utility\n+      name="zope.schema.URI"\n+      component=".fields.URIHandler"\n+      />\n+  <utility\n+      name="zope.schema.Id"\n+      component=".fields.IdHandler"\n+      />\n+  <utility\n+      name="zope.schema.DottedName"\n+      component=".fields.DottedNameHandler"\n+      />\n+  <utility\n+      name="zope.schema.InterfaceField"\n+      component=".fields.InterfaceFieldHandler"\n+      />\n+  <utility\n+      name="zope.schema.Object"\n+      component=".fields.ObjectHandler"\n+      />\n+  <utility\n+      name="zope.schema.Choice"\n+      component=".fields.ChoiceHandler"\n+      />\n+\n+  <!-- Field name extractors -->\n+  <adapter factory=".serializer.DefaultFieldNameExtractor" />\n+\n+  <!-- Parsing policy -->\n+  <utility factory=".parser.DefaultSchemaPolicy" />\n \n </configure>\ndiff --git a/plone/supermodel/converters.py b/plone/supermodel/converters.py\nindex 4bdde60..3cc0916 100644\n--- a/plone/supermodel/converters.py\n+++ b/plone/supermodel/converters.py\n@@ -46,7 +46,6 @@ def toUnicode(self, value):\n @implementer(IFromUnicode)\n @adapter(IDate)\n class DateFromUnicode:\n-\n     format = "%Y-%m-%d"\n \n     def __init__(self, context):\n@@ -62,7 +61,6 @@ def fromUnicode(self, value):\n @implementer(IFromUnicode)\n @adapter(IDatetime)\n class DatetimeFromUnicode:\n-\n     format = "%Y-%m-%d %H:%M:%S"\n \n     def __init__(self, context):\ndiff --git a/plone/supermodel/directives.py b/plone/supermodel/directives.py\nindex 744d406..22cf5dd 100644\n--- a/plone/supermodel/directives.py\n+++ b/plone/supermodel/directives.py\n@@ -70,7 +70,6 @@ def store(self, tags, value):\n @adapter(ISchema)\n @implementer(ISchemaPlugin)\n class CheckerPlugin:\n-\n     key = None\n \n     def __init__(self, schema):\n@@ -112,7 +111,6 @@ def fieldNames(self):\n \n \n class ListPositionCheckerPlugin(CheckerPlugin):\n-\n     position = None\n \n     def fieldNames(self):\n@@ -139,7 +137,6 @@ def factory(self, filename, schema=""):\n @adapter(ISchema)\n @implementer(ISchemaPlugin)\n class SupermodelSchemaPlugin:\n-\n     order = -1000\n \n     def __init__(self, interface):\n@@ -209,13 +206,12 @@ def factory(\n             fields=fields,\n             order=order,\n         )\n-        for (key, value) in kw.items():\n+        for key, value in kw.items():\n             setattr(fieldset, key, value)\n         return [fieldset]\n \n \n class FieldsetCheckerPlugin(CheckerPlugin):\n-\n     key = FIELDSETS_KEY\n \n     def fieldNames(self):\n@@ -242,7 +238,6 @@ def factory(self, *args):\n             return args\n \n     class PrimaryFieldsPlugin(ListCheckerPlugin):\n-\n         key = PRIMARY_FIELDS_KEY\n \n         def __call__(self):\ndiff --git a/plone/supermodel/exportimport.py b/plone/supermodel/exportimport.py\nindex e767cb7..a22b7b1 100644\n--- a/plone/supermodel/exportimport.py\n+++ b/plone/supermodel/exportimport.py\n@@ -98,7 +98,6 @@ def read(self, element):\n \n             attributeField = self.fieldAttributes.get(attribute_name, None)\n             if attributeField is not None:\n-\n                 if attribute_name in self.fieldTypeAttributes:\n                     deferred[attribute_name] = attribute_element\n \n@@ -106,7 +105,6 @@ def read(self, element):\n                     deferred_nonvalidated[attribute_name] = attribute_element\n \n                 elif attribute_name in self.fieldInstanceAttributes:\n-\n                     attributeField_type = attribute_element.get("type")\n                     handler = queryUtility(\n                         IFieldExportImportHandler, name=attributeField_type\n@@ -148,7 +146,6 @@ def read(self, element):\n \n         for attribute_name in self.nonValidatedfieldTypeAttributes:\n             if attribute_name in deferred_nonvalidated:\n-\n                 # this is pretty nasty: we need the field\'s fromUnicode(),\n                 # but this always validates. The missing_value field may by\n                 # definition be invalid. Therefore, we need to fake it.\n@@ -339,7 +336,6 @@ def _constructField(self, attributes):\n         return super()._constructField(attributes)\n \n     def write(self, field, name, type, elementName="field"):\n-\n         element = super().write(field, name, type, elementName)\n \n         # write vocabulary or values list\ndiff --git a/plone/supermodel/parser.py b/plone/supermodel/parser.py\nindex 73feda4..b95f1df 100644\n--- a/plone/supermodel/parser.py\n+++ b/plone/supermodel/parser.py\n@@ -93,7 +93,6 @@ def _parse(source, policy):\n     policy_util = getUtility(ISchemaPolicy, name=policy)\n \n     def readField(fieldElement, schemaAttributes, fieldElements, baseFields):\n-\n         # Parse field attributes\n         fieldName = fieldElement.get("name")\n         fieldType = fieldElement.get("type")\n@@ -165,7 +164,6 @@ def readField(fieldElement, schemaAttributes, fieldElements, baseFields):\n                 readField(subelement, schemaAttributes, fieldElements, baseFields)\n \n             elif subelement.tag == ns("fieldset"):\n-\n                 fieldset_name = subelement.get("name")\n                 if fieldset_name is None:\n                     raise ValueError(f"Fieldset in schema {schemaName} has no name")\ndiff --git a/plone/supermodel/serializer.py b/plone/supermodel/serializer.py\nindex 2212515..f6f933d 100644\n--- a/plone/supermodel/serializer.py\n+++ b/plone/supermodel/serializer.py\n@@ -43,7 +43,6 @@ def __call__(self):\n \n \n def serialize(model):\n-\n     handlers = {}\n     schema_metadata_handlers = tuple(getUtilitiesFor(ISchemaMetadataHandler))\n     field_metadata_handlers = tuple(getUtilitiesFor(IFieldMetadataHandler))\n@@ -77,7 +76,6 @@ def writeField(field, parentElement):\n                 metadata_handler.write(fieldElement, schema, field)\n \n     for schemaName, schema in model.schemata.items():\n-\n         fieldsets = schema.queryTaggedValue(FIELDSETS_KEY, [])\n \n         fieldset_fields = set()\n@@ -106,7 +104,6 @@ def writeField(field, parentElement):\n             writeField(field, schema_element)\n \n         for fieldset in fieldsets:\n-\n             fieldset_element = etree.Element("fieldset")\n             fieldset_element.set("name", fieldset.__name__)\n             if fieldset.label:\ndiff --git a/plone/supermodel/utils.py b/plone/supermodel/utils.py\nindex af296a6..ba25d70 100644\n--- a/plone/supermodel/utils.py\n+++ b/plone/supermodel/utils.py\n@@ -38,14 +38,12 @@ def noNS(name):\n \n \n def indent(node, level=0):\n-\n     INDENT_SIZE = 2\n     node_indent = level * (" " * INDENT_SIZE)\n     child_indent = (level + 1) * (" " * INDENT_SIZE)\n \n     # node has children\n     if len(node):\n-\n         # add indent before first child node\n         if not node.text or not node.text.strip():\n             node.text = "\\n" + child_indent\n@@ -184,7 +182,6 @@ def valueToElement(field, value, name=None, force=False):\n     child = etree.Element(name)\n \n     if value is not None and (force or value != field.missing_value):\n-\n         if IDict.providedBy(field):\n             key_converter = IToUnicode(field.key_type)\n             for k, v in sorted(value.items()):\n@@ -301,7 +298,6 @@ def syncSchema(source, dest, overwrite=False, sync_bases=False):\n \n     for name, field in sortedFields(source):\n         if overwrite or name not in dest or dest[name].interface is not dest:\n-\n             clone = field.__class__.__new__(field.__class__)\n             clone.__dict__.update(field.__dict__)\n             clone.interface = dest\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 0447505..c8fbc5c 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -43,4 +43,21 @@ profile = "plone"\n target-version = ["py38"]\n \n [tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'setuptools\', \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\n ignore-packages = [\'plone.rfc822\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 8849fbc..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -19,5 +19,5 @@ ignore =\n ignore =\n     .editorconfig\n     .meta.toml\n+    .pre-commit-config.yaml\n     tox.ini\n-    lint-requirements.txt\ndiff --git a/setup.py b/setup.py\nindex e8b4b5c..2aa5ffd 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -58,7 +58,7 @@ def read(*rnames):\n         "plone.rfc822": ["plone.rfc822"],\n         "test": [\n             "plone.rfc822",\n-            "zope.configuration",\n+            "zope.configuration[test]",\n         ],\n     },\n     entry_points="""\ndiff --git a/tox.ini b/tox.ini\nindex c4810c9..56c42c3 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -4,47 +4,47 @@\n envlist =\n     format\n     lint\n+    test\n \n [testenv]\n-py_files = git ls-files "*.py"\n-text_files = git ls-files "*.rst" "*.md"\n allowlist_externals =\n     sh\n \n [testenv:format]\n-description = automatically reformat python code\n+description = automatically reformat code\n skip_install = true\n deps =\n-    pyupgrade\n-    isort\n-    black\n-    -c lint-requirements.txt\n+    pre-commit\n commands =\n-    sh -c \'{[testenv]py_files} | xargs pyupgrade --py38-plus\'\n-    sh -c \'{[testenv]py_files} | xargs isort\'\n-    sh -c \'{[testenv]py_files} | xargs black\'\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n \n [testenv:lint]\n description = run linters that will help improve the code style\n skip_install = true\n deps =\n-    flake8\n-    codespell\n-    tomli  # needed for codespell to read pyproject.toml\n-    check-manifest\n-    pyroma\n-    -c lint-requirements.txt\n+    pre-commit\n commands =\n-    sh -c \'{[testenv]py_files} | xargs flake8\'\n-    sh -c \'{[testenv]py_files} | xargs codespell\'\n-    sh -c \'{[testenv]text_files} | xargs codespell\'\n-    check-manifest\n-    pyroma -n 10 .\n+    pre-commit run -a\n \n [testenv:dependencies]\n-description = check if the package defines all its dependencies\n+description = check if the package defines all its dependencies and generate a graph out of them\n deps =\n-    z3c.dependencychecker\n-    -c lint-requirements.txt\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n commands =\n     dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s plone.supermodel\n+extras =\n+    test\n'

