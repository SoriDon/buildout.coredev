Repository: plone.staticresources


Branch: refs/heads/master
Date: 2019-06-20T10:06:34-04:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/plone.staticresources/commit/63db70005184469fe03d50e82c5fa628abe07575

:guilabel: is an unsupported role in pypi descriptions

See https://packaging.python.org/guides/making-a-pypi-friendly-readme/#validating-restructuredtext-markup

Files changed:
M README.rst

b'diff --git a/README.rst b/README.rst\nindex 4eba566..2a5e9fc 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -108,7 +108,7 @@ When editing a pattern (e.g. in ``mockup`` package), it is important to know for\n The bundle name will be useful as parameter for ``plone-compile-resources`` script.\n \n .. note::\n-  Patterns are also available as independent resources in :guilabel:`&Resource Registries` control panel but they are not registered to default Plone bundles, which instead use the entry point approach.\n+  Patterns are also available as independent resources in `Resource Registries` control panel but they are not registered to default Plone bundles, which instead use the entry point approach.\n   Pattern\'s resources may be useful if needed to be injected in specific views.\n \n In production mode (``./bin/instance start``), since version 5.1, Plone is configured to serve Aggregate Bundles, single files to minimize network requests (`aggregate bundles <https://docs.plone.org/adapt-and-extend/theming/resourceregistry.html#resource-bundle-aggregation>`_).\n@@ -117,7 +117,7 @@ In that case final production resource URLs will be similar to:\n - http://localhost:8080//++plone++production/++unique++TIMESTAMP/default.js\n - http://localhost:8080//++plone++production/++unique++TIMESTAMP/default.css\n \n-If you enable :guilabel:`&Development Mode` for JavaScript and CSS in :guilabel:`&Resource Registries` control panel, Plone will omit timestamp from path and serve fresh copies of the resources of the selected bundle(s).\n+If you enable `Development Mode` for JavaScript and CSS in `Resource Registries` control panel, Plone will omit timestamp from path and serve fresh copies of the resources of the selected bundle(s).\n Those are compiled in-browser, on the fly for each page load and requested by XHR requests to URLs like:\n \n - http://localhost:8080/++resource++plone.js\n@@ -145,13 +145,13 @@ When fixing Plone bugs or improving functionality:\n \n - Dependencies upgrades (e.g. ``moment.js``) should be done in ``mockup`` and after the PR is merged, propagated here (i.e. static resources needs to be recompiled)\n - Likewise, CSS and JS should be developed not in ``plone.staticresources`` but in their own package\'s source (for instance, in ``mockup``)\n-- To see the new changes in the browser, enable :guilabel:`&Development Mode` in :guilabel:`&Resource Registries` control panel.\n+- To see the new changes in the browser, enable `Development Mode` in `Resource Registries` control panel.\n   Next the desired bundle (that contains the modified files) must be set to either "Develop JavaScript", "Develop CSS" or both.\n   This causes each of the bundle resources to be served individually, easing development.\n   In this case, bundle resources are served from the source package (e.g. ``mockup``) instead of ``plone.staticresources``.\n - To identify which bundle contains the modified resource, see section "Entry Points" below.\n   Keep in mind the more bundles selected for development mode the slower are page reloads, so it is recommended to select only what is being developed.\n-- Alternatively you may run ``./bin/plone-compile-resources`` between changes and avoid :guilabel:`&Development Mode`\'s in-browser compilation (fastest browser loading time).\n+- Alternatively you may run ``./bin/plone-compile-resources`` between changes and avoid `Development Mode`\'s in-browser compilation (fastest browser loading time).\n \n \n Entry Points\n'

Repository: plone.staticresources


Branch: refs/heads/master
Date: 2019-06-21T12:39:16-04:00
Author: Eric Steele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/plone.staticresources/commit/4f953fd2fbd3e03b814c553df2c9247d45c60a7b

Merge pull request #32 from plone/remove-unsupported-role

:guilabel: is an unsupported role in pypi descriptions

Files changed:
M README.rst

b'diff --git a/README.rst b/README.rst\nindex 4eba566..2a5e9fc 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -108,7 +108,7 @@ When editing a pattern (e.g. in ``mockup`` package), it is important to know for\n The bundle name will be useful as parameter for ``plone-compile-resources`` script.\n \n .. note::\n-  Patterns are also available as independent resources in :guilabel:`&Resource Registries` control panel but they are not registered to default Plone bundles, which instead use the entry point approach.\n+  Patterns are also available as independent resources in `Resource Registries` control panel but they are not registered to default Plone bundles, which instead use the entry point approach.\n   Pattern\'s resources may be useful if needed to be injected in specific views.\n \n In production mode (``./bin/instance start``), since version 5.1, Plone is configured to serve Aggregate Bundles, single files to minimize network requests (`aggregate bundles <https://docs.plone.org/adapt-and-extend/theming/resourceregistry.html#resource-bundle-aggregation>`_).\n@@ -117,7 +117,7 @@ In that case final production resource URLs will be similar to:\n - http://localhost:8080//++plone++production/++unique++TIMESTAMP/default.js\n - http://localhost:8080//++plone++production/++unique++TIMESTAMP/default.css\n \n-If you enable :guilabel:`&Development Mode` for JavaScript and CSS in :guilabel:`&Resource Registries` control panel, Plone will omit timestamp from path and serve fresh copies of the resources of the selected bundle(s).\n+If you enable `Development Mode` for JavaScript and CSS in `Resource Registries` control panel, Plone will omit timestamp from path and serve fresh copies of the resources of the selected bundle(s).\n Those are compiled in-browser, on the fly for each page load and requested by XHR requests to URLs like:\n \n - http://localhost:8080/++resource++plone.js\n@@ -145,13 +145,13 @@ When fixing Plone bugs or improving functionality:\n \n - Dependencies upgrades (e.g. ``moment.js``) should be done in ``mockup`` and after the PR is merged, propagated here (i.e. static resources needs to be recompiled)\n - Likewise, CSS and JS should be developed not in ``plone.staticresources`` but in their own package\'s source (for instance, in ``mockup``)\n-- To see the new changes in the browser, enable :guilabel:`&Development Mode` in :guilabel:`&Resource Registries` control panel.\n+- To see the new changes in the browser, enable `Development Mode` in `Resource Registries` control panel.\n   Next the desired bundle (that contains the modified files) must be set to either "Develop JavaScript", "Develop CSS" or both.\n   This causes each of the bundle resources to be served individually, easing development.\n   In this case, bundle resources are served from the source package (e.g. ``mockup``) instead of ``plone.staticresources``.\n - To identify which bundle contains the modified resource, see section "Entry Points" below.\n   Keep in mind the more bundles selected for development mode the slower are page reloads, so it is recommended to select only what is being developed.\n-- Alternatively you may run ``./bin/plone-compile-resources`` between changes and avoid :guilabel:`&Development Mode`\'s in-browser compilation (fastest browser loading time).\n+- Alternatively you may run ``./bin/plone-compile-resources`` between changes and avoid `Development Mode`\'s in-browser compilation (fastest browser loading time).\n \n \n Entry Points\n'

