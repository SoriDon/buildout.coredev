Repository: plone.protect


Branch: refs/heads/master
Date: 2018-09-21T15:23:44+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.protect/commit/934dd8d236b58573a9488e97f48d526f222641a2

fix createToken and transform for py3

Files changed:
M plone/protect/authenticator.py
M plone/protect/auto.py

b"diff --git a/plone/protect/authenticator.py b/plone/protect/authenticator.py\nindex 34caae4..20b28fc 100644\n--- a/plone/protect/authenticator.py\n+++ b/plone/protect/authenticator.py\n@@ -94,6 +94,10 @@ def createToken(extra='', manager=None):\n     user = _getUserName()\n     ring = _getKeyring(user, manager=manager)\n     secret = ring.random()\n+    if six.PY3:\n+        secret = secret.encode('utf-8')\n+        user = user.encode('utf-8')\n+        extra = extra.encode('utf-8')\n     return hmac.new(secret, user + extra, sha).hexdigest()\n \n \ndiff --git a/plone/protect/auto.py b/plone/protect/auto.py\nindex 88a4d70..d1c43e7 100644\n--- a/plone/protect/auto.py\n+++ b/plone/protect/auto.py\n@@ -131,7 +131,7 @@ def parseTree(self, result, encoding):\n             return None\n \n     def transformBytes(self, result, encoding):\n-        result = six.text_type(result, encoding, 'ignore')\n+        result = result.decode(encoding, 'ignore')\n         return self.transformIterable([result], encoding)\n \n     def transformString(self, result, encoding):\n@@ -198,7 +198,7 @@ def transformIterable(self, result, encoding):\n     def getContext(self):\n         published = self.request.get('PUBLISHED')\n         if isinstance(published, types.MethodType):\n-            return published.im_self\n+            return published.__self__\n         return aq_parent(published)\n \n     def getViewName(self):\n"

Repository: plone.protect


Branch: refs/heads/master
Date: 2018-09-21T15:23:44+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.protect/commit/9ec33675a5466f5824091282d6b53acc78bf66c3

fix _verify_request in py3

Files changed:
M plone/protect/authenticator.py

b"diff --git a/plone/protect/authenticator.py b/plone/protect/authenticator.py\nindex 20b28fc..ede24bd 100644\n--- a/plone/protect/authenticator.py\n+++ b/plone/protect/authenticator.py\n@@ -77,10 +77,14 @@ def _verify_request(request, extra='', name='_authenticator', manager=None):\n     user = _getUserName()\n     ring = _getKeyring(user, manager=manager)\n \n+    if six.PY3:\n+        user = user.encode('utf-8')\n+        extra = extra.encode('utf-8')\n+\n     for key in ring:\n         if key is None:\n             continue\n-        correct = hmac.new(key, user + extra, sha).hexdigest()\n+        correct = hmac.new(key.encode('utf-8'), user + extra, sha).hexdigest()\n         if _is_equal(correct, auth):\n             return True\n \n"

Repository: plone.protect


Branch: refs/heads/master
Date: 2018-09-21T15:23:44+02:00
Author: Matthew Wilkes (MatthewWilkes) <git@matthewwilkes.name>
Commit: https://github.com/plone/plone.protect/commit/cad8f750d89ec501852d88d610f810887355f613

Apply new encoding logic for HMAC to test suite

Files changed:
M CHANGES.rst
M plone/protect/tests/testAuthenticator.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 5913705..997f8c9 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -60,6 +60,8 @@ Bug fixes:\n   Warning: this gives a SyntaxError on Python 2.7.8 or lower.\n   See `issue 74 <https://github.com/plone/plone.protect/issues/74>`_.\n   [pbauer]\n+- More Python 2 / 3 compatibility\n+  [pbauer, MatthewWilkes]\n \n \n 3.1.2 (2018-02-02)\ndiff --git a/plone/protect/tests/testAuthenticator.py b/plone/protect/tests/testAuthenticator.py\nindex beb09c6..c41a0a7 100644\n--- a/plone/protect/tests/testAuthenticator.py\n+++ b/plone/protect/tests/testAuthenticator.py\n@@ -15,6 +15,7 @@\n import hmac\n import sys\n \n+import six\n \n try:\n     from hashlib import sha1 as sha\n@@ -69,7 +70,10 @@ def setUp(self):\n \n     def setAuthenticator(self, key, extra=\'\', name="_authenticator"):\n         user = getSecurityManager().getUser().getUserName()\n-        auth = hmac.new(key, user + extra, sha).hexdigest()\n+        if six.PY3:\n+            user = user.encode(\'utf-8\')\n+            extra = extra.encode(\'utf-8\')\n+        auth = hmac.new(key.encode(\'utf-8\'), user + extra, sha).hexdigest()\n         self.request[name] = auth\n \n     def testCorrectAuthenticator(self):\n'

Repository: plone.protect


Branch: refs/heads/master
Date: 2018-09-21T15:23:44+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.protect/commit/1492e72ce0f4ee264e05250995e4788b2fa9b385

make _buildFacade work in older 2.7 versions (see #74)

Files changed:
M CHANGES.rst
M plone/protect/utils.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 997f8c9..be9d363 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -50,6 +50,9 @@ Bug fixes:\n   stored in a plone.scale.storage.ScalesDict.\n   [davisagli]\n \n+- More Python 2 / 3 compatibility\n+  [pbauer, MatthewWilkes]\n+\n \n 3.1.3 (2018-04-04)\n ------------------\n@@ -60,8 +63,6 @@ Bug fixes:\n   Warning: this gives a SyntaxError on Python 2.7.8 or lower.\n   See `issue 74 <https://github.com/plone/plone.protect/issues/74>`_.\n   [pbauer]\n-- More Python 2 / 3 compatibility\n-  [pbauer, MatthewWilkes]\n \n \n 3.1.2 (2018-02-02)\ndiff --git a/plone/protect/utils.py b/plone/protect/utils.py\nindex 1d09829..e1837de 100644\n--- a/plone/protect/utils.py\n+++ b/plone/protect/utils.py\n@@ -60,7 +60,10 @@ def _curried(*args, **kw):\n         # Build a facade, with a reference to our locally-scoped _curried\n         facade_globs = dict(_curried=_curried, _default=_default)\n         name = callable.__name__\n-        exec(_buildFacade(name, spec, callable.__doc__), facade_globs)\n+        if six.PY2:\n+            exec _buildFacade(name, spec, callable.__doc__) in facade_globs\n+        else:\n+            exec(_buildFacade(name, spec, callable.__doc__), facade_globs)\n         return facade_globs[name]\n \n \n'

Repository: plone.protect


Branch: refs/heads/master
Date: 2018-09-21T15:23:44+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.protect/commit/92513a96e1e239289fd7614054b64e8319676c7e

Revert "make _buildFacade work in older 2.7 versions (see #74)"

This reverts commit 15f84b4cf06fbcc5f30dc430a2bfc055951f72ef.

Files changed:
M CHANGES.rst
M plone/protect/utils.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex be9d363..997f8c9 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -50,9 +50,6 @@ Bug fixes:\n   stored in a plone.scale.storage.ScalesDict.\n   [davisagli]\n \n-- More Python 2 / 3 compatibility\n-  [pbauer, MatthewWilkes]\n-\n \n 3.1.3 (2018-04-04)\n ------------------\n@@ -63,6 +60,8 @@ Bug fixes:\n   Warning: this gives a SyntaxError on Python 2.7.8 or lower.\n   See `issue 74 <https://github.com/plone/plone.protect/issues/74>`_.\n   [pbauer]\n+- More Python 2 / 3 compatibility\n+  [pbauer, MatthewWilkes]\n \n \n 3.1.2 (2018-02-02)\ndiff --git a/plone/protect/utils.py b/plone/protect/utils.py\nindex e1837de..1d09829 100644\n--- a/plone/protect/utils.py\n+++ b/plone/protect/utils.py\n@@ -60,10 +60,7 @@ def _curried(*args, **kw):\n         # Build a facade, with a reference to our locally-scoped _curried\n         facade_globs = dict(_curried=_curried, _default=_default)\n         name = callable.__name__\n-        if six.PY2:\n-            exec _buildFacade(name, spec, callable.__doc__) in facade_globs\n-        else:\n-            exec(_buildFacade(name, spec, callable.__doc__), facade_globs)\n+        exec(_buildFacade(name, spec, callable.__doc__), facade_globs)\n         return facade_globs[name]\n \n \n'

Repository: plone.protect


Branch: refs/heads/master
Date: 2018-09-21T15:23:44+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.protect/commit/838c8bd1b0a8bc00c47b255da5930eb82d1e1058

fix test

Files changed:
M plone/protect/tests/testAuto.py

b'diff --git a/plone/protect/tests/testAuto.py b/plone/protect/tests/testAuto.py\nindex f1fe5f8..8b31504 100644\n--- a/plone/protect/tests/testAuto.py\n+++ b/plone/protect/tests/testAuto.py\n@@ -209,4 +209,4 @@ def test_html(self):\n             \'<html>\\n<body>\'\n             \'<form action="http://nohost/myaction" method="POST">\'\n             \'</form></body>\\n</html>\')], \'utf-8\')\n-        self.failUnless(\'_authenticator\' in result.serialize())\n+        self.failUnless(b\'_authenticator\' in result.serialize())\n'

Repository: plone.protect


Branch: refs/heads/master
Date: 2018-09-21T15:23:44+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.protect/commit/906406157f7a21ee979f80b8798f6817efe6ae11

Fix marmoset monkey patching for Python 3

Files changed:
A plone/protect/monkey_webdav.py
M CHANGES.rst
M plone/protect/__init__.py
M plone/protect/configure.zcml
M plone/protect/monkey.py
M plone/protect/tests/__init__.py
M plone/protect/tests/testPatches.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 997f8c9..bb4c949 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -50,6 +50,9 @@ Bug fixes:\n   stored in a plone.scale.storage.ScalesDict.\n   [davisagli]\n \n+- Fix marmoset monkey patching for Python 3\n+  [jensens]\n+\n \n 3.1.3 (2018-04-04)\n ------------------\ndiff --git a/plone/protect/__init__.py b/plone/protect/__init__.py\nindex 7b621e7..76145ec 100644\n--- a/plone/protect/__init__.py\n+++ b/plone/protect/__init__.py\n@@ -4,3 +4,4 @@\n from plone.protect.authenticator import CustomCheckAuthenticator\n from plone.protect.postonly import check as PostOnly\n from plone.protect.utils import protect\n+from plone.protect import monkey\ndiff --git a/plone/protect/configure.zcml b/plone/protect/configure.zcml\nindex b79abe8..0812f78 100644\n--- a/plone/protect/configure.zcml\n+++ b/plone/protect/configure.zcml\n@@ -57,7 +57,7 @@\n         description="Special handling for write on read Zope2 locking issues"\n         class="webdav.Lockable.LockableItem"\n         original="wl_lockmapping"\n-        replacement=".monkey.wl_lockmapping"\n+        replacement=".monkey_webdav.wl_lockmapping"\n         preserveOriginal="True"\n         />\n </configure>\ndiff --git a/plone/protect/monkey.py b/plone/protect/monkey.py\nindex 5ea96f5..9ee7c78 100644\n--- a/plone/protect/monkey.py\n+++ b/plone/protect/monkey.py\n@@ -35,13 +35,15 @@ def pluggableauth__checkCSRFToken(request, token=\'csrf_token\', raises=True):\n \n def marmoset_patch(func, replacement):\n     source = inspect.getsource(replacement)\n-    exec source in func.func_globals\n-    func.func_code = replacement.func_code\n+    exec(source, func.__globals__)\n+    func.__code__ = replacement.__code__\n \n \n # otherwise the patches do not get applied in some cases\n if hasattr(pluggable_utils, \'checkCSRFToken\'):\n-    marmoset_patch(pluggable_utils.checkCSRFToken,\n-                   pluggableauth__checkCSRFToken)\n+    marmoset_patch(\n+        pluggable_utils.checkCSRFToken,\n+        pluggableauth__checkCSRFToken,\n+    )\n if hasattr(pluggable_utils, \'getCSRFToken\'):\n     marmoset_patch(pluggable_utils.getCSRFToken, pluggableauth__getCSRFToken)\ndiff --git a/plone/protect/monkey_webdav.py b/plone/protect/monkey_webdav.py\nnew file mode 100644\nindex 0000000..d3583ad\n--- /dev/null\n+++ b/plone/protect/monkey_webdav.py\n@@ -0,0 +1,16 @@\n+# -*- coding: utf-8 -*-\n+from plone.protect.auto import safeWrite\n+\n+\n+def wl_lockmapping(self, killinvalids=0, create=0):\n+    has_write_locks = hasattr(self, \'_dav_writelocks\')\n+    locks = self._old_wl_lockmapping(killinvalids=killinvalids, create=create)\n+    try:\n+        safeWrite(locks)\n+        if not has_write_locks and create:\n+            # first time writing to object, need to mark it safe\n+            safeWrite(self)\n+    except AttributeError:\n+        # not a persistent class, ignore\n+        pass\n+    return locks\ndiff --git a/plone/protect/tests/__init__.py b/plone/protect/tests/__init__.py\nindex 1fe7b54..40a96af 100644\n--- a/plone/protect/tests/__init__.py\n+++ b/plone/protect/tests/__init__.py\n@@ -1,2 +1 @@\n # -*- coding: utf-8 -*-\n-# Poof\ndiff --git a/plone/protect/tests/testPatches.py b/plone/protect/tests/testPatches.py\nindex 3a17b56..fe59ae2 100644\n--- a/plone/protect/tests/testPatches.py\n+++ b/plone/protect/tests/testPatches.py\n@@ -15,16 +15,25 @@ def setUp(self):\n         self.browser = Browser(self.layer[\'app\'])\n         self.request = self.layer[\'request\']\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,))\n+            \'Authorization\',\n+            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+        )\n \n     def test_change_password_on_root_does_not_throw_other_csrf_protection(\n-            self):\n-        self.browser.open(\'%s/acl_users/users/manage_users?user_id=%s&passwd=1\' % (\n-            self.layer[\'app\'].absolute_url(), SITE_OWNER_NAME))\n+            self\n+    ):\n+        self.browser.open(\n+            \'%s/acl_users/users/manage_users?user_id=%s&passwd=1\' % (\n+                self.layer[\'app\'].absolute_url(), SITE_OWNER_NAME\n+            )\n+        )\n         self.browser.getControl(name=\'password\').value = SITE_OWNER_PASSWORD\n         self.browser.getControl(name=\'confirm\').value = SITE_OWNER_PASSWORD\n         self.browser.getForm().submit()\n         self.assertEquals(\n             self.browser.url,\n-            \'%s/acl_users/users/manage_users?manage_tabs_message=password+updated\' % (\n-                self.layer[\'app\'].absolute_url()))\n+            \'%s/acl_users/users/manage_users?\'\n+            \'manage_tabs_message=password+updated\' % (\n+                self.layer[\'app\'].absolute_url()\n+            )\n+        )\n'

Repository: plone.protect


Branch: refs/heads/master
Date: 2018-09-21T15:23:44+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.protect/commit/dd6a8d924dcbef08e32eabd70263e74064f5e3aa

don't patch until zcml loaded

Files changed:
M plone/protect/configure.zcml
M plone/protect/monkey.py
D plone/protect/monkey_webdav.py

b'diff --git a/plone/protect/configure.zcml b/plone/protect/configure.zcml\nindex 0812f78..25acd7d 100644\n--- a/plone/protect/configure.zcml\n+++ b/plone/protect/configure.zcml\n@@ -57,7 +57,14 @@\n         description="Special handling for write on read Zope2 locking issues"\n         class="webdav.Lockable.LockableItem"\n         original="wl_lockmapping"\n-        replacement=".monkey_webdav.wl_lockmapping"\n+        replacement=".monkey.wl_lockmapping"\n         preserveOriginal="True"\n         />\n+\n+    <include package="z3c.zcmlhook" file="meta.zcml" />\n+\n+    <zcml:customAction\n+        handler=".monkey.disable_zope_csrf_checks"\n+        />\n+\n </configure>\ndiff --git a/plone/protect/monkey.py b/plone/protect/monkey.py\nindex 9ee7c78..28dc82c 100644\n--- a/plone/protect/monkey.py\n+++ b/plone/protect/monkey.py\n@@ -1,7 +1,5 @@\n # -*- coding: utf-8 -*-\n from plone.protect.auto import safeWrite\n-from Products.PluggableAuthService import utils as pluggable_utils\n-\n import inspect\n \n \n@@ -39,11 +37,13 @@ def marmoset_patch(func, replacement):\n     func.__code__ = replacement.__code__\n \n \n-# otherwise the patches do not get applied in some cases\n-if hasattr(pluggable_utils, \'checkCSRFToken\'):\n-    marmoset_patch(\n-        pluggable_utils.checkCSRFToken,\n-        pluggableauth__checkCSRFToken,\n-    )\n-if hasattr(pluggable_utils, \'getCSRFToken\'):\n-    marmoset_patch(pluggable_utils.getCSRFToken, pluggableauth__getCSRFToken)\n+def disable_zope_csrf_checks():\n+    from Products.PluggableAuthService import utils as pluggable_utils\n+    if hasattr(pluggable_utils, \'checkCSRFToken\'):\n+        marmoset_patch(\n+            pluggable_utils.checkCSRFToken,\n+            pluggableauth__checkCSRFToken,\n+        )\n+    if hasattr(pluggable_utils, \'getCSRFToken\'):\n+        marmoset_patch(\n+            pluggable_utils.getCSRFToken, pluggableauth__getCSRFToken)\ndiff --git a/plone/protect/monkey_webdav.py b/plone/protect/monkey_webdav.py\ndeleted file mode 100644\nindex d3583ad..0000000\n--- a/plone/protect/monkey_webdav.py\n+++ /dev/null\n@@ -1,16 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from plone.protect.auto import safeWrite\n-\n-\n-def wl_lockmapping(self, killinvalids=0, create=0):\n-    has_write_locks = hasattr(self, \'_dav_writelocks\')\n-    locks = self._old_wl_lockmapping(killinvalids=killinvalids, create=create)\n-    try:\n-        safeWrite(locks)\n-        if not has_write_locks and create:\n-            # first time writing to object, need to mark it safe\n-            safeWrite(self)\n-    except AttributeError:\n-        # not a persistent class, ignore\n-        pass\n-    return locks\n'

Repository: plone.protect


Branch: refs/heads/master
Date: 2018-09-21T15:23:44+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.protect/commit/ef7416cb64cf263a36144120414f92e665bd8411

Head, meet desk

Files changed:
M plone/protect/__init__.py

b'diff --git a/plone/protect/__init__.py b/plone/protect/__init__.py\nindex 76145ec..7b621e7 100644\n--- a/plone/protect/__init__.py\n+++ b/plone/protect/__init__.py\n@@ -4,4 +4,3 @@\n from plone.protect.authenticator import CustomCheckAuthenticator\n from plone.protect.postonly import check as PostOnly\n from plone.protect.utils import protect\n-from plone.protect import monkey\n'

Repository: plone.protect


Branch: refs/heads/master
Date: 2018-09-21T15:23:44+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.protect/commit/8089197385e149ceddb7aaa1294b7f2040c8673e

put the marmoset on a leash

Files changed:
M plone/protect/monkey.py
M plone/protect/testing.py

b"diff --git a/plone/protect/monkey.py b/plone/protect/monkey.py\nindex 28dc82c..af79302 100644\n--- a/plone/protect/monkey.py\n+++ b/plone/protect/monkey.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from plone.protect.auto import safeWrite\n+from zope.testing.cleanup import addCleanUp\n import inspect\n \n \n@@ -34,6 +35,7 @@ def pluggableauth__checkCSRFToken(request, token='csrf_token', raises=True):\n def marmoset_patch(func, replacement):\n     source = inspect.getsource(replacement)\n     exec(source, func.__globals__)\n+    func._old_code = func.__code__\n     func.__code__ = replacement.__code__\n \n \n@@ -47,3 +49,20 @@ def disable_zope_csrf_checks():\n     if hasattr(pluggable_utils, 'getCSRFToken'):\n         marmoset_patch(\n             pluggable_utils.getCSRFToken, pluggableauth__getCSRFToken)\n+\n+\n+def enable_zope_csrf_checks():\n+    from Products.PluggableAuthService import utils as pluggable_utils\n+    if hasattr(pluggable_utils, 'checkCSRFToken'):\n+        try:\n+            pluggable_utils.checkCSRFToken.__code__ = \\\n+                pluggable_utils.checkCSRFToken._old_code\n+        except AttributeError:\n+            pass\n+    if hasattr(pluggable_utils, 'getCSRFToken'):\n+        try:\n+            pluggable_utils.getCSRFToken.__code__ = \\\n+                pluggable_utils.getCSRFToken._old_code\n+        except AttributeError:\n+            pass\n+addCleanUp(enable_zope_csrf_checks)\ndiff --git a/plone/protect/testing.py b/plone/protect/testing.py\nindex 34ef2cf..70455f1 100644\n--- a/plone/protect/testing.py\n+++ b/plone/protect/testing.py\n@@ -24,6 +24,8 @@ def setUpPloneSite(self, portal):\n         applyProfile(portal, 'plone.protect:default')\n         self.portal = portal\n \n+    def tearDownZope(self, app):\n+        from plone.protect.monkey import enable_zope_csrf_checks\n \n PROTECT_FIXTURE = ProtectedLayer()\n PROTECT_FUNCTIONAL_TESTING = FunctionalTesting(\n"

Repository: plone.protect


Branch: refs/heads/master
Date: 2018-09-21T15:31:26+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.protect/commit/9a72cf70d8b571b991b578a6832a5042d94ba0ca

add changenotes and classifiers

Files changed:
M CHANGES.rst
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex bb4c949..dd36677 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,17 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- More Python 2 / 3 compatibility\n+  [pbauer, MatthewWilkes]\n+\n+- Fix marmoset monkey patching for Python 3\n+  [jensens]\n+\n+- Don\'t patch until zcml loaded\n+  [davisagli]\n+\n+- Put the marmoset on a leash  (reset csrf-checks after tests)\n+  [davisagli]\n \n \n 4.0.1 (2018-07-16)\n@@ -50,9 +60,6 @@ Bug fixes:\n   stored in a plone.scale.storage.ScalesDict.\n   [davisagli]\n \n-- Fix marmoset monkey patching for Python 3\n-  [jensens]\n-\n \n 3.1.3 (2018-04-04)\n ------------------\n@@ -63,8 +70,6 @@ Bug fixes:\n   Warning: this gives a SyntaxError on Python 2.7.8 or lower.\n   See `issue 74 <https://github.com/plone/plone.protect/issues/74>`_.\n   [pbauer]\n-- More Python 2 / 3 compatibility\n-  [pbauer, MatthewWilkes]\n \n \n 3.1.2 (2018-02-02)\ndiff --git a/setup.py b/setup.py\nindex 5e8c416..d6ccb98 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -22,6 +22,8 @@\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n     ],\n     keywords=\'zope security CSRF\',\n     author=\'Plone Foundation\',\n'

Repository: plone.protect


Branch: refs/heads/master
Date: 2018-09-21T16:24:35+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.protect/commit/48343140967d832fbf2c4d07c0e129b151c3caed

Merge pull request #77 from plone/python3

Python3

Files changed:
M CHANGES.rst
M plone/protect/authenticator.py
M plone/protect/auto.py
M plone/protect/configure.zcml
M plone/protect/monkey.py
M plone/protect/testing.py
M plone/protect/tests/__init__.py
M plone/protect/tests/testAuthenticator.py
M plone/protect/tests/testAuto.py
M plone/protect/tests/testPatches.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 5913705..dd36677 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,17 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- More Python 2 / 3 compatibility\n+  [pbauer, MatthewWilkes]\n+\n+- Fix marmoset monkey patching for Python 3\n+  [jensens]\n+\n+- Don\'t patch until zcml loaded\n+  [davisagli]\n+\n+- Put the marmoset on a leash  (reset csrf-checks after tests)\n+  [davisagli]\n \n \n 4.0.1 (2018-07-16)\ndiff --git a/plone/protect/authenticator.py b/plone/protect/authenticator.py\nindex 34caae4..ede24bd 100644\n--- a/plone/protect/authenticator.py\n+++ b/plone/protect/authenticator.py\n@@ -77,10 +77,14 @@ def _verify_request(request, extra=\'\', name=\'_authenticator\', manager=None):\n     user = _getUserName()\n     ring = _getKeyring(user, manager=manager)\n \n+    if six.PY3:\n+        user = user.encode(\'utf-8\')\n+        extra = extra.encode(\'utf-8\')\n+\n     for key in ring:\n         if key is None:\n             continue\n-        correct = hmac.new(key, user + extra, sha).hexdigest()\n+        correct = hmac.new(key.encode(\'utf-8\'), user + extra, sha).hexdigest()\n         if _is_equal(correct, auth):\n             return True\n \n@@ -94,6 +98,10 @@ def createToken(extra=\'\', manager=None):\n     user = _getUserName()\n     ring = _getKeyring(user, manager=manager)\n     secret = ring.random()\n+    if six.PY3:\n+        secret = secret.encode(\'utf-8\')\n+        user = user.encode(\'utf-8\')\n+        extra = extra.encode(\'utf-8\')\n     return hmac.new(secret, user + extra, sha).hexdigest()\n \n \ndiff --git a/plone/protect/auto.py b/plone/protect/auto.py\nindex 88a4d70..d1c43e7 100644\n--- a/plone/protect/auto.py\n+++ b/plone/protect/auto.py\n@@ -131,7 +131,7 @@ def parseTree(self, result, encoding):\n             return None\n \n     def transformBytes(self, result, encoding):\n-        result = six.text_type(result, encoding, \'ignore\')\n+        result = result.decode(encoding, \'ignore\')\n         return self.transformIterable([result], encoding)\n \n     def transformString(self, result, encoding):\n@@ -198,7 +198,7 @@ def transformIterable(self, result, encoding):\n     def getContext(self):\n         published = self.request.get(\'PUBLISHED\')\n         if isinstance(published, types.MethodType):\n-            return published.im_self\n+            return published.__self__\n         return aq_parent(published)\n \n     def getViewName(self):\ndiff --git a/plone/protect/configure.zcml b/plone/protect/configure.zcml\nindex b79abe8..25acd7d 100644\n--- a/plone/protect/configure.zcml\n+++ b/plone/protect/configure.zcml\n@@ -60,4 +60,11 @@\n         replacement=".monkey.wl_lockmapping"\n         preserveOriginal="True"\n         />\n+\n+    <include package="z3c.zcmlhook" file="meta.zcml" />\n+\n+    <zcml:customAction\n+        handler=".monkey.disable_zope_csrf_checks"\n+        />\n+\n </configure>\ndiff --git a/plone/protect/monkey.py b/plone/protect/monkey.py\nindex 5ea96f5..af79302 100644\n--- a/plone/protect/monkey.py\n+++ b/plone/protect/monkey.py\n@@ -1,7 +1,6 @@\n # -*- coding: utf-8 -*-\n from plone.protect.auto import safeWrite\n-from Products.PluggableAuthService import utils as pluggable_utils\n-\n+from zope.testing.cleanup import addCleanUp\n import inspect\n \n \n@@ -35,13 +34,35 @@ def pluggableauth__checkCSRFToken(request, token=\'csrf_token\', raises=True):\n \n def marmoset_patch(func, replacement):\n     source = inspect.getsource(replacement)\n-    exec source in func.func_globals\n-    func.func_code = replacement.func_code\n+    exec(source, func.__globals__)\n+    func._old_code = func.__code__\n+    func.__code__ = replacement.__code__\n+\n+\n+def disable_zope_csrf_checks():\n+    from Products.PluggableAuthService import utils as pluggable_utils\n+    if hasattr(pluggable_utils, \'checkCSRFToken\'):\n+        marmoset_patch(\n+            pluggable_utils.checkCSRFToken,\n+            pluggableauth__checkCSRFToken,\n+        )\n+    if hasattr(pluggable_utils, \'getCSRFToken\'):\n+        marmoset_patch(\n+            pluggable_utils.getCSRFToken, pluggableauth__getCSRFToken)\n \n \n-# otherwise the patches do not get applied in some cases\n-if hasattr(pluggable_utils, \'checkCSRFToken\'):\n-    marmoset_patch(pluggable_utils.checkCSRFToken,\n-                   pluggableauth__checkCSRFToken)\n-if hasattr(pluggable_utils, \'getCSRFToken\'):\n-    marmoset_patch(pluggable_utils.getCSRFToken, pluggableauth__getCSRFToken)\n+def enable_zope_csrf_checks():\n+    from Products.PluggableAuthService import utils as pluggable_utils\n+    if hasattr(pluggable_utils, \'checkCSRFToken\'):\n+        try:\n+            pluggable_utils.checkCSRFToken.__code__ = \\\n+                pluggable_utils.checkCSRFToken._old_code\n+        except AttributeError:\n+            pass\n+    if hasattr(pluggable_utils, \'getCSRFToken\'):\n+        try:\n+            pluggable_utils.getCSRFToken.__code__ = \\\n+                pluggable_utils.getCSRFToken._old_code\n+        except AttributeError:\n+            pass\n+addCleanUp(enable_zope_csrf_checks)\ndiff --git a/plone/protect/testing.py b/plone/protect/testing.py\nindex 34ef2cf..70455f1 100644\n--- a/plone/protect/testing.py\n+++ b/plone/protect/testing.py\n@@ -24,6 +24,8 @@ def setUpPloneSite(self, portal):\n         applyProfile(portal, \'plone.protect:default\')\n         self.portal = portal\n \n+    def tearDownZope(self, app):\n+        from plone.protect.monkey import enable_zope_csrf_checks\n \n PROTECT_FIXTURE = ProtectedLayer()\n PROTECT_FUNCTIONAL_TESTING = FunctionalTesting(\ndiff --git a/plone/protect/tests/__init__.py b/plone/protect/tests/__init__.py\nindex 1fe7b54..40a96af 100644\n--- a/plone/protect/tests/__init__.py\n+++ b/plone/protect/tests/__init__.py\n@@ -1,2 +1 @@\n # -*- coding: utf-8 -*-\n-# Poof\ndiff --git a/plone/protect/tests/testAuthenticator.py b/plone/protect/tests/testAuthenticator.py\nindex beb09c6..c41a0a7 100644\n--- a/plone/protect/tests/testAuthenticator.py\n+++ b/plone/protect/tests/testAuthenticator.py\n@@ -15,6 +15,7 @@\n import hmac\n import sys\n \n+import six\n \n try:\n     from hashlib import sha1 as sha\n@@ -69,7 +70,10 @@ def setUp(self):\n \n     def setAuthenticator(self, key, extra=\'\', name="_authenticator"):\n         user = getSecurityManager().getUser().getUserName()\n-        auth = hmac.new(key, user + extra, sha).hexdigest()\n+        if six.PY3:\n+            user = user.encode(\'utf-8\')\n+            extra = extra.encode(\'utf-8\')\n+        auth = hmac.new(key.encode(\'utf-8\'), user + extra, sha).hexdigest()\n         self.request[name] = auth\n \n     def testCorrectAuthenticator(self):\ndiff --git a/plone/protect/tests/testAuto.py b/plone/protect/tests/testAuto.py\nindex f1fe5f8..8b31504 100644\n--- a/plone/protect/tests/testAuto.py\n+++ b/plone/protect/tests/testAuto.py\n@@ -209,4 +209,4 @@ def test_html(self):\n             \'<html>\\n<body>\'\n             \'<form action="http://nohost/myaction" method="POST">\'\n             \'</form></body>\\n</html>\')], \'utf-8\')\n-        self.failUnless(\'_authenticator\' in result.serialize())\n+        self.failUnless(b\'_authenticator\' in result.serialize())\ndiff --git a/plone/protect/tests/testPatches.py b/plone/protect/tests/testPatches.py\nindex 3a17b56..fe59ae2 100644\n--- a/plone/protect/tests/testPatches.py\n+++ b/plone/protect/tests/testPatches.py\n@@ -15,16 +15,25 @@ def setUp(self):\n         self.browser = Browser(self.layer[\'app\'])\n         self.request = self.layer[\'request\']\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,))\n+            \'Authorization\',\n+            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+        )\n \n     def test_change_password_on_root_does_not_throw_other_csrf_protection(\n-            self):\n-        self.browser.open(\'%s/acl_users/users/manage_users?user_id=%s&passwd=1\' % (\n-            self.layer[\'app\'].absolute_url(), SITE_OWNER_NAME))\n+            self\n+    ):\n+        self.browser.open(\n+            \'%s/acl_users/users/manage_users?user_id=%s&passwd=1\' % (\n+                self.layer[\'app\'].absolute_url(), SITE_OWNER_NAME\n+            )\n+        )\n         self.browser.getControl(name=\'password\').value = SITE_OWNER_PASSWORD\n         self.browser.getControl(name=\'confirm\').value = SITE_OWNER_PASSWORD\n         self.browser.getForm().submit()\n         self.assertEquals(\n             self.browser.url,\n-            \'%s/acl_users/users/manage_users?manage_tabs_message=password+updated\' % (\n-                self.layer[\'app\'].absolute_url()))\n+            \'%s/acl_users/users/manage_users?\'\n+            \'manage_tabs_message=password+updated\' % (\n+                self.layer[\'app\'].absolute_url()\n+            )\n+        )\ndiff --git a/setup.py b/setup.py\nindex 5e8c416..d6ccb98 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -22,6 +22,8 @@\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n     ],\n     keywords=\'zope security CSRF\',\n     author=\'Plone Foundation\',\n'

