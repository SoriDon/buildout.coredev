Repository: plone.scale


Branch: refs/heads/master
Date: 2022-02-02T22:33:16+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/09358e5d49f7b9048873d104d89431dd305132d5

pyupgrade --py36-plus

Files changed:
M docs/conf.py
M plone/scale/__init__.py
M plone/scale/interfaces.py
M plone/scale/scale.py
M plone/scale/storage.py
M plone/scale/tests/test_scale.py
M plone/scale/tests/test_storage.py
M setup.py

b"diff --git a/docs/conf.py b/docs/conf.py\nindex ef6fb99..06a5061 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # repoze.atemplate documentation build configuration file\n #\ndiff --git a/plone/scale/__init__.py b/plone/scale/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/scale/__init__.py\n+++ b/plone/scale/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/scale/interfaces.py b/plone/scale/interfaces.py\nindex f68aa2c..8ea5e84 100644\n--- a/plone/scale/interfaces.py\n+++ b/plone/scale/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-s\n from zope.interface import Interface\n \n \ndiff --git a/plone/scale/scale.py b/plone/scale/scale.py\nindex 16cb745..d6bffb3 100644\n--- a/plone/scale/scale.py\n+++ b/plone/scale/scale.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n import PIL.Image\n import PIL.ImageFile\n import math\n@@ -153,7 +152,7 @@ def get_scale_mode(mode, direction):\n     return mode\n \n \n-class ScaledDimensions(object):\n+class ScaledDimensions:\n     pass\n \n \ndiff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex 85436c1..3501104 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from persistent.dict import PersistentDict\n from plone.scale.interfaces import IImageScaleFactory\n from six import integer_types\n@@ -27,7 +26,7 @@\n \n # Number types are float and int, and on Python 2 also long.\n number_types = [float]\n-number_types.extend(integer_types)\n+number_types.extend((int,))\n number_types = tuple(number_types)\n \n \n@@ -152,7 +151,7 @@ def modified_time(self):\n \n     def __repr__(self):\n         name = self.__class__.__name__\n-        return '<%s context=%r>' % (name, self.context)\n+        return f'<{name} context={self.context!r}>'\n \n     __str__ = __repr__\n \n@@ -237,7 +236,7 @@ def scale(self, factory=None, **parameters):\n                 data=data,\n                 width=width,\n                 height=height,\n-                mimetype='image/{0}'.format(format_.lower()),\n+                mimetype=f'image/{format_.lower()}',\n                 key=key,\n                 modified=self.modified_time,\n             )\ndiff --git a/plone/scale/tests/test_scale.py b/plone/scale/tests/test_scale.py\nindex 0c1d57c..b98e3d3 100644\n--- a/plone/scale/tests/test_scale.py\n+++ b/plone/scale/tests/test_scale.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.scale.scale import scaleImage\n from plone.scale.scale import scalePILImage\n from plone.scale.tests import TEST_DATA_LOCATION\n@@ -208,7 +207,7 @@ def testQuality(self):\n         img3 = scaleImage(CMYK, 84, 103, quality=20)[0]\n         self.assertNotEqual(img1, img2)\n         self.assertNotEqual(img1, img3)\n-        self.failUnless(len(img1) > len(img2) > len(img3))\n+        self.assertTrue(len(img1) > len(img2) > len(img3))\n \n     def testResultBuffer(self):\n         img1 = scaleImage(PNG, 84, 103)[0]\ndiff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py\nindex fda5de7..000149f 100644\n--- a/plone/scale/tests/test_storage.py\n+++ b/plone/scale/tests/test_storage.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from operator import delitem\n from operator import itemgetter\n from operator import setitem\n@@ -11,7 +10,7 @@\n \n \n @implementer(zope.annotation.interfaces.IAttributeAnnotatable)\n-class _DummyContext(object):\n+class _DummyContext:\n     pass\n \n \n@@ -27,7 +26,7 @@ def _provide_dummy_scale_adapter(self, result=True):\n \n         @implementer(IImageScaleFactory)\n         @adapter(_DummyContext)\n-        class DummyISF(object):\n+        class DummyISF:\n \n             def __init__(self, context):\n                 self.context = context\n@@ -92,7 +91,7 @@ def testScaleForExistingScaleBBB(self):\n         storage = self.storage\n         scale1 = storage.scale(factory=self.factory, foo=23, bar=42)\n         scale2 = storage.scale(factory=self.factory, bar=42, foo=23)\n-        self.failUnless(scale1 is scale2)\n+        self.assertTrue(scale1 is scale2)\n \n     def testScaleForExistingScale(self):\n         self._provide_dummy_scale_adapter()\n@@ -119,8 +118,8 @@ def testGetItemBBB(self):\n         scale = storage.scale(factory=self.factory, foo=23, bar=42)\n         uid = scale['uid']\n         scale = storage[uid]\n-        self.failUnless('uid' in scale)\n-        self.failUnless('key' in scale)\n+        self.assertTrue('uid' in scale)\n+        self.assertTrue('key' in scale)\n         self.assertEqual(scale['data'], 'some data')\n         self.assertEqual(scale['width'], 42)\n         self.assertEqual(scale['height'], 23)\n@@ -155,12 +154,12 @@ def testIterate(self):\n         storage = self.storage\n         storage.storage.update(dict(one=None, two=None))\n         generator = iter(storage)\n-        self.assertEqual(set(generator), set(['one', 'two']))\n+        self.assertEqual(set(generator), {'one', 'two'})\n \n     def testKeys(self):\n         storage = self.storage\n         storage.storage.update(dict(one=None, two=None))\n-        self.assertEqual(set(storage.keys()), set(['one', 'two']))\n+        self.assertEqual(set(storage.keys()), {'one', 'two'})\n \n     def testNegativeHasKey(self):\n         storage = self.storage\ndiff --git a/setup.py b/setup.py\nindex 8870b2d..4e8141c 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n"

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-02-02T22:36:53+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/cf27494ed15235e1eb61666a74adb77610b6d367

isort5 config

Files changed:
M setup.cfg

b'diff --git a/setup.cfg b/setup.cfg\nindex 5d2845a..cc716e2 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -4,11 +4,11 @@ ignore =\n     bootstrap.py\n \n [isort]\n+# black compatible isort rules:\n+profile = black\n force_alphabetical_sort = True\n force_single_line = True\n lines_after_imports = 2\n-line_length = 200\n-not_skip = __init__.py\n \n [bdist_wheel]\n universal = 1\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-02-02T22:37:22+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/f4048024c3f343922ddb4a69d8824fc093d6e4f6

Removed bootstrap.py

Files changed:
M setup.cfg
D bootstrap.py

b'diff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex a459921..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,210 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-__version__ = \'2015-07-01\'\n-# See zc.buildout\'s changelog if this version is up to date.\n-\n-tmpeggs = tempfile.mkdtemp(prefix=\'bootstrap-\')\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep\n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("--version",\n-                  action="store_true", default=False,\n-                  help=("Return bootstrap.py version."))\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-parser.add_option("--buildout-version",\n-                  help="Use a specific zc.buildout version")\n-parser.add_option("--setuptools-version",\n-                  help="Use a specific setuptools version")\n-parser.add_option("--setuptools-to-dir",\n-                  help=("Allow for re-use of existing directory of "\n-                        "setuptools versions"))\n-\n-options, args = parser.parse_args()\n-if options.version:\n-    print("bootstrap.py version %s" % __version__)\n-    sys.exit(0)\n-\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-if os.path.exists(\'ez_setup.py\'):\n-    exec(open(\'ez_setup.py\').read(), ez)\n-else:\n-    exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions\n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'.\n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            # Strip all site-packages directories from sys.path that\n-            # are not sys.prefix; this is because on Windows\n-            # sys.prefix is a site-package directory.\n-            if sitepackage_path != sys.prefix:\n-                sys.path[:] = [x for x in sys.path\n-                               if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-\n-if options.setuptools_version is not None:\n-    setup_args[\'version\'] = options.setuptools_version\n-if options.setuptools_to_dir is not None:\n-    setup_args[\'to_dir\'] = options.setuptools_to_dir\n-\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-# Fix sys.path here as easy_install.pth added before PYTHONPATH\n-cmd = [sys.executable, \'-c\',\n-       \'import sys; sys.path[0:0] = [%r]; \' % setuptools_path +\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-requirement = \'zc.buildout\'\n-version = options.buildout_version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        try:\n-            return not parsed_version.is_prerelease\n-        except AttributeError:\n-            # Older setuptools\n-            for part in parsed_version:\n-                if (part[:1] == \'*\') and (part not in _final_parts):\n-                    return False\n-            return True\n-\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/setup.cfg b/setup.cfg\nindex cc716e2..bed99c0 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,7 +1,6 @@\n [check-manifest]\n ignore =\n     *.cfg\n-    bootstrap.py\n \n [isort]\n # black compatible isort rules:\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-02-02T22:37:34+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/65c216842a24f99c26cd10dd17dbae6a9bf316fe

isort5

Files changed:
M plone/scale/scale.py
M plone/scale/storage.py
M plone/scale/tests/test_scale.py
M plone/scale/tests/test_storage.py
M setup.py

b"diff --git a/plone/scale/scale.py b/plone/scale/scale.py\nindex d6bffb3..ee7b87e 100644\n--- a/plone/scale/scale.py\n+++ b/plone/scale/scale.py\n@@ -1,6 +1,6 @@\n+import math\n import PIL.Image\n import PIL.ImageFile\n-import math\n import sys\n import warnings\n \ndiff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex 3501104..cebca9c 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -11,6 +11,7 @@\n import pprint\n import warnings\n \n+\n # BBB From python 3.3 it will work and from 3.9 it will be an error\n # the fallback is kept for py2 compatibility\n try:\ndiff --git a/plone/scale/tests/test_scale.py b/plone/scale/tests/test_scale.py\nindex b98e3d3..6536f84 100644\n--- a/plone/scale/tests/test_scale.py\n+++ b/plone/scale/tests/test_scale.py\n@@ -323,6 +323,7 @@ def testModes(self):\n \n     def testDeprecations(self):\n         import plone.scale.scale\n+\n         # clear warnings registry, so the test actually sees the warning\n         plone.scale.scale.__warningregistry__.clear()\n         with warnings.catch_warnings(record=True) as w:\ndiff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py\nindex 000149f..20df8e9 100644\n--- a/plone/scale/tests/test_storage.py\n+++ b/plone/scale/tests/test_storage.py\n@@ -3,10 +3,11 @@\n from operator import setitem\n from plone.testing import zca\n from unittest import TestCase\n-import zope.annotation.interfaces\n-import zope.annotation.attribute\n-from zope.interface import implementer\n from zope.component import provideAdapter\n+from zope.interface import implementer\n+\n+import zope.annotation.attribute\n+import zope.annotation.interfaces\n \n \n @implementer(zope.annotation.interfaces.IAttributeAnnotatable)\n@@ -19,8 +20,8 @@ class AnnotationStorageTests(TestCase):\n     layer = zca.UNIT_TESTING\n \n     def _provide_dummy_scale_adapter(self, result=True):\n-        from zope.component import adapter\n         from plone.scale.interfaces import IImageScaleFactory\n+        from zope.component import adapter\n \n         factory = self.factory\n \ndiff --git a/setup.py b/setup.py\nindex 4e8141c..563977f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,6 +1,7 @@\n from setuptools import find_packages\n from setuptools import setup\n \n+\n version = '3.1.3.dev0'\n readme = open('README.rst').read().replace(':class:', '').replace(':mod:', '')\n changes = open('CHANGES.rst').read()\n"

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-02-02T22:38:09+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/faeddd2b1b518cb1452ed6c702a334625d3f4f64

isort5 config: profile plone.

Same effect.

Files changed:
M setup.cfg

b'diff --git a/setup.cfg b/setup.cfg\nindex bed99c0..e16e02f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -3,11 +3,7 @@ ignore =\n     *.cfg\n \n [isort]\n-# black compatible isort rules:\n-profile = black\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n+profile = plone\n \n [bdist_wheel]\n universal = 1\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-02-02T22:48:00+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/ac2e382fea56aae2f4c014de624fd5bf249f508b

Removed docs directory and sphinx extra.

The docs were last updated in 2010, and the maybe still relevant parts already copied to the readme.

Files changed:
A news/44.breaking.1
A news/44.breaking.2
M MANIFEST.in
M buildout.cfg
M setup.py
D docs/.static/logo.png
D docs/.static/plone.css
D docs/LICENSE.txt
D docs/Makefile
D docs/conf.py
D docs/index.rst
D docs/narr/scale.rst
D docs/narr/storage.rst

b'diff --git a/MANIFEST.in b/MANIFEST.in\nindex 647d62f..56fc6b7 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -1,7 +1,6 @@\n include *.rst\n include pyproject.toml\n \n-recursive-include docs *\n recursive-include plone *\n \n global-exclude *pyc\ndiff --git a/buildout.cfg b/buildout.cfg\nindex 22a509a..3f75e05 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -1,5 +1,5 @@\n [buildout]\n-parts = test sphinx sphinx-html omelette interpreter\n+parts = test omelette interpreter\n develop = .\n \n [test]\n@@ -7,21 +7,6 @@ recipe = zc.recipe.testrunner\n defaults = [\'-v\', \'-s\', \'plone.scale\']\n eggs = plone.scale [tests]\n \n-[sphinx]\n-recipe = zc.recipe.egg\n-dependent-scripts = true\n-scripts = sphinx-build\n-eggs = plone.scale [sphinx]\n-\n-[sphinx-html]\n-recipe = collective.recipe.template\n-inline =\n-   #!/bin/bash\n-   cd ${buildout:directory}/docs\n-   make html\n-output = ${buildout:bin-directory}/sphinx-html\n-mode = 755\n-\n [omelette]\n recipe = collective.recipe.omelette\n eggs = ${test:eggs}\ndiff --git a/docs/.static/logo.png b/docs/.static/logo.png\ndeleted file mode 100644\nindex 1242462..0000000\nBinary files a/docs/.static/logo.png and /dev/null differ\ndiff --git a/docs/.static/plone.css b/docs/.static/plone.css\ndeleted file mode 100644\nindex 5a069e3..0000000\n--- a/docs/.static/plone.css\n+++ /dev/null\n@@ -1,76 +0,0 @@\n-@import url(\'default.css\');\n-body {\n-    font: 100% Arial, FreeSans, sans-serif;\n-    background: White;\n-    color: Black;\n-}\n-\n-div.body h1,\n-div.body h2,\n-div.body h3,\n-div.body h4,\n-div.body h5,\n-div.body h6 {\n-    color: Black;\n-    background-color: White;\n-    font-weight: bold;\n-    line-height: 125%;\n-    border: none;\n-    font: "Helvetica Neue",Arial,FreeSans,sans-serif;\n-}\n-\n-\n-div.document {\n-    background-color: White;\n-}\n-\n-div.sphinxsidebar {\n-    background-color: #f6f6f6;\n-    border: 1px solid #eeeeee;\n-}\n-\n-div.sphinxsidebar h3 {\n-    margin-left: -11px;\n-    margin-right: -6px;\n-    line-height: 1.5em;\n-}\n-\n-div.sphinxsidebar h3,\n-div.sphinxsidebar h3 a {\n-    background-color: #76ad17;\n-    color: White;\n-    padding: 0 0.5em;\n-}\n-\n-div.sphinxsidebar h3 a:hover {\n-    color: White;\n-}\n-\n-div.sphinxsidebar h4,\n-div.sphinxsidebar h4 a {\n-    color: #205c90;\n-}\n-\n-div.sphinxsidebar a,\n-div.sphinxsidebar p {\n-    color: #205c90;\n-}\n-\n-div.related {\n-    background-color: #329fd7;\n-}\n-\n-div.related a:hover {\n-    color: Black;\n-}\n-\n-a:link, a:visited {\n-    color: #205c90;\n-    text-decoration: none;\n-}\n-\n-a:link:hover,\n-a:visited:hover {\n-    color: #75ad0a;\n-}\n-\ndiff --git a/docs/LICENSE.txt b/docs/LICENSE.txt\ndeleted file mode 100644\nindex 266c989..0000000\n--- a/docs/LICENSE.txt\n+++ /dev/null\n@@ -1,27 +0,0 @@\n-plone.scale is copyright Plone Foundation\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions\n-are met:\n-1. Redistributions of source code must retain the above copyright\n-   notice, this list of conditions and the following disclaimer.\n-2. Redistributions in binary form must reproduce the above copyright\n-   notice, this list of conditions and the following disclaimer in the\n-   documentation and/or other materials provided with the distribution.\n-3. Neither the name of the author nor the names of its contributors\n-   may be used to endorse or promote products derived from this software\n-   without specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS\'\' AND\n-ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n-ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE\n-FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n-DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n-OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n-HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n-LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n-OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n-SUCH DAMAGE.\n-\ndiff --git a/docs/Makefile b/docs/Makefile\ndeleted file mode 100644\nindex b46d97b..0000000\n--- a/docs/Makefile\n+++ /dev/null\n@@ -1,70 +0,0 @@\n-# Makefile for Sphinx documentation\n-#\n-\n-# You can set these variables from the command line.\n-SPHINXOPTS    =\n-SPHINXBUILD   = ../bin/sphinx-build\n-PAPER         = a4\n-\n-# Internal variables.\n-PAPEROPT_a4     = -D latex_paper_size=a4\n-PAPEROPT_letter = -D latex_paper_size=letter\n-ALLSPHINXOPTS   = -d .build/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .\n-\n-.PHONY: help clean html web pickle htmlhelp latex changes linkcheck\n-\n-help:\n-\t@echo "Please use \\`make <target>\' where <target> is one of"\n-\t@echo "  html      to make standalone HTML files"\n-\t@echo "  pickle    to make pickle files (usable by e.g. sphinx-web)"\n-\t@echo "  htmlhelp  to make HTML files and a HTML help project"\n-\t@echo "  latex     to make LaTeX files, you can set PAPER=a4 or PAPER=letter"\n-\t@echo "  changes   to make an overview over all changed/added/deprecated items"\n-\t@echo "  linkcheck to check all external links for integrity"\n-\n-clean:\n-\t-rm -rf .build/*\n-\n-html:\n-\tmkdir -p .build/html .build/doctrees\n-\t$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) .build/html\n-\t@echo\n-\t@echo "Build finished. The HTML pages are in .build/html."\n-\n-pickle:\n-\tmkdir -p .build/pickle .build/doctrees\n-\t$(SPHINXBUILD) -b pickle $(ALLSPHINXOPTS) .build/pickle\n-\t@echo\n-\t@echo "Build finished; now you can process the pickle files or run"\n-\t@echo "  sphinx-web .build/pickle"\n-\t@echo "to start the sphinx-web server."\n-\n-web: pickle\n-\n-htmlhelp:\n-\tmkdir -p .build/htmlhelp .build/doctrees\n-\t$(SPHINXBUILD) -b htmlhelp $(ALLSPHINXOPTS) .build/htmlhelp\n-\t@echo\n-\t@echo "Build finished; now you can run HTML Help Workshop with the" \\\n-\t      ".hhp project file in .build/htmlhelp."\n-\n-latex:\n-\tmkdir -p .build/latex .build/doctrees\n-\t$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) .build/latex\n-\t@echo\n-\t@echo "Build finished; the LaTeX files are in .build/latex."\n-\t@echo "Run \\`make all-pdf\' or \\`make all-ps\' in that directory to" \\\n-\t      "run these through (pdf)latex."\n-\n-changes:\n-\tmkdir -p .build/changes .build/doctrees\n-\t$(SPHINXBUILD) -b changes $(ALLSPHINXOPTS) .build/changes\n-\t@echo\n-\t@echo "The overview file is in .build/changes."\n-\n-linkcheck:\n-\tmkdir -p .build/linkcheck .build/doctrees\n-\t$(SPHINXBUILD) -b linkcheck $(ALLSPHINXOPTS) .build/linkcheck\n-\t@echo\n-\t@echo "Link check complete; look for any errors in the above output " \\\n-\t      "or in .build/linkcheck/output.txt."\ndiff --git a/docs/conf.py b/docs/conf.py\ndeleted file mode 100644\nindex 06a5061..0000000\n--- a/docs/conf.py\n+++ /dev/null\n@@ -1,190 +0,0 @@\n-#\n-# repoze.atemplate documentation build configuration file\n-#\n-# This file is execfile()d with the current directory set to its containing\n-# dir.\n-#\n-# The contents of this file are pickled, so don\'t put values in the\n-# namespace that aren\'t pickleable (module imports are okay, they\'re\n-# removed automatically).\n-#\n-# All configuration values have a default value; values that are commented\n-# out serve to show the default value.\n-\n-# If your extensions are in another directory, add it here. If the\n-# directory is relative to the documentation root, use os.path.abspath to\n-# make it absolute, like shown here.\n-#sys.path.append(os.path.abspath(\'some/directory\'))\n-\n-\n-# General configuration\n-# ---------------------\n-\n-# Add any Sphinx extension module names here, as strings. They can be\n-# extensions coming with Sphinx (named \'sphinx.ext.*\') or your custom ones.\n-extensions = [ \'sphinx.ext.autodoc\', \'sphinx.ext.todo\',\n-        \'repoze.sphinx.autointerface\' ]\n-\n-# Add any paths that contain templates here, relative to this directory.\n-templates_path = [\'.templates\']\n-\n-# The suffix of source filenames.\n-source_suffix = \'.rst\'\n-\n-# The master toctree document.\n-master_doc = \'index\'\n-\n-# General substitutions.\n-project = \'plone.scale\'\n-copyright = \'2009, Plone Foundation\'\n-\n-# The default replacements for |version| and |release|, also used in various\n-# other places throughout the built documents.\n-#\n-# The short X.Y version.\n-version = \'1.0\'\n-# The full version, including alpha/beta/rc tags.\n-release = \'1.0\'\n-\n-# There are two options for replacing |today|: either, you set today to\n-# some non-false value, then it is used:\n-#today = \'\'\n-# Else, today_fmt is used as the format for a strftime call.\n-today_fmt = \'%B %d, %Y\'\n-\n-# List of documents that shouldn\'t be included in the build.\n-#unused_docs = []\n-\n-# List of directories, relative to source directories, that shouldn\'t be\n-# searched for source files.\n-#exclude_dirs = []\n-\n-# The reST default role (used for this markup: `text`) to use for all\n-# documents.\n-#default_role = None\n-\n-# If true, \'()\' will be appended to :func: etc. cross-reference text.\n-#add_function_parentheses = True\n-\n-# If true, the current module name will be prepended to all description\n-# unit titles (such as .. function::).\n-#add_module_names = True\n-\n-# If true, sectionauthor and moduleauthor directives will be shown in the\n-# output. They are ignored by default.\n-#show_authors = False\n-\n-# The name of the Pygments (syntax highlighting) style to use.\n-pygments_style = \'sphinx\'\n-\n-\n-# Options for HTML output\n-# -----------------------\n-\n-# The style sheet to use for HTML and HTML Help pages. A file of that name\n-# must exist either in Sphinx\' static/ path, or in one of the custom paths\n-# given in html_static_path.\n-html_style = \'plone.css\'\n-\n-# The name for this set of Sphinx documents.  If None, it defaults to\n-# "<project> v<release> documentation".\n-#html_title = None\n-\n-# A shorter title for the navigation bar.  Default is the same as\n-# html_title.\n-#html_short_title = None\n-\n-# The name of an image file (within the static path) to place at the top of\n-# the sidebar.\n-html_logo = \'.static/logo.png\'\n-\n-# The name of an image file (within the static path) to use as favicon of\n-# the docs.  This file should be a Windows icon file (.ico) being 16x16 or\n-# 32x32 pixels large.\n-#html_favicon = None\n-\n-# Add any paths that contain custom static files (such as style sheets)\n-# here, relative to this directory. They are copied after the builtin\n-# static files, so a file named "default.css" will overwrite the builtin\n-# "default.css".\n-html_static_path = [\'.static\']\n-\n-# If not \'\', a \'Last updated on:\' timestamp is inserted at every page\n-# bottom, using the given strftime format.\n-html_last_updated_fmt = \'%b %d, %Y\'\n-\n-# If true, SmartyPants will be used to convert quotes and dashes to\n-# typographically correct entities.\n-#html_use_smartypants = True\n-\n-# Custom sidebar templates, maps document names to template names.\n-#html_sidebars = {}\n-\n-# Additional templates that should be rendered to pages, maps page names to\n-# template names.\n-#html_additional_pages = {}\n-\n-# If false, no module index is generated.\n-#html_use_modindex = True\n-\n-# If false, no index is generated.\n-#html_use_index = True\n-\n-# If true, the index is split into individual pages for each letter.\n-#html_split_index = False\n-\n-# If true, the reST sources are included in the HTML build as\n-# _sources/<name>.\n-#html_copy_source = True\n-\n-# If true, an OpenSearch description file will be output, and all pages\n-# will contain a <link> tag referring to it.  The value of this option must\n-# be the base URL from which the finished HTML is served.\n-#html_use_opensearch = \'\'\n-\n-# If nonempty, this is the file name suffix for HTML files (e.g. ".xhtml").\n-#html_file_suffix = \'\'\n-\n-# Output file base name for HTML help builder.\n-htmlhelp_basename = \'plone-scale\'\n-\n-\n-# Options for LaTeX output\n-# ------------------------\n-\n-# The paper size (\'letter\' or \'a4\').\n-#latex_paper_size = \'a4\'\n-\n-# The font size (\'10pt\', \'11pt\' or \'12pt\').\n-#latex_font_size = \'10pt\'\n-\n-# Grouping the document tree into LaTeX files. List of tuples\n-# (source start file, target name, title,\n-#  author, document class [howto/manual]).\n-latex_documents = [\n-  (\'index\', \'plone-scale.tex\', \'plone.scale Documentation\',\n-   \'Plone Foundation\', \'manual\'),\n-]\n-\n-# The name of an image file (relative to this directory) to place at the\n-# top of the title page.\n-latex_logo = \'.static/logo.png\'\n-\n-# For "manual" documents, if this is true, then toplevel headings are\n-# parts, not chapters.\n-#latex_use_parts = False\n-\n-# Additional stuff for the LaTeX preamble.\n-#latex_preamble = \'\'\n-\n-# Documents to append as an appendix to all manuals.\n-#latex_appendices = []\n-\n-# If false, no module index is generated.\n-#latex_use_modindex = True\n-\n-\n-# Options for extras\n-# ------------------\n-todo_include_todos = True\n-\ndiff --git a/docs/index.rst b/docs/index.rst\ndeleted file mode 100644\nindex a9ce821..0000000\n--- a/docs/index.rst\n+++ /dev/null\n@@ -1,105 +0,0 @@\n-.. _index:\n-\n-***************************************************************\n-:mod:`plone.scale` -- Image scaling logic\n-***************************************************************\n-\n-:Author: Simplon / Wichert Akkerman\n-:Version: |version|\n-\n-.. module:: plone.scale\n-  :synopsis: Plone image scaling framework\n-\n-:mod:`plone.scale` contains basic image scaling logic for use in Zope\n-environments. It supports Zope 2, grok and other systems build on using the\n-Zope ToolKit (ZTK).\n-\n-Several design goals were used when writing this package:\n-\n-- image scaling to any width, height, width&height should be supported\n-  using both up-scaling and down-scaling. Scaling parameters should never\n-  be fixed in code. This allows designers to use any image scale they want\n-  without having to modify python code.\n-\n-- the result of scaling will be an image along with its new size, not a\n-  HTML or XHTML tag. We already have excellent tools to generate tags in\n-  the form of Zope Pagetemplates, Genshi and other template languages that\n-  are much better suited for this purpose.\n-\n-In addition several implementation goals were defined:\n-\n-- image scaling must happen on demand instead of up-front. This reduces\n-  initial save time and prevents unnecessary scalings from being generated.\n-\n-- image scaling parameters should not be part of the generated URL. Since\n-  the number of parameters can change and new parameters may be added in\n-  the future this would create overly complex URLs and URL parsing.\n-\n-- no HTML rewriting (such as done by `repoze.bitblt`_) should be required.\n-  Rewriting has proven to have too many negative side effects such as\n-  not handling unclean markup correctly, lossing DOCTYPEs or switching between\n-  HTML and XHTML, all of which can have very undesirable effects. In addition\n-  it will have a performance penalty.\n-\n-- it should be possibly to develop an external storage system which stores\n-  scaled images externally and returns a URL which bypasses the application\n-  server. This should be configurable via just a filesystem path & base\n-  URL.\n-\n-- minimum number of external dependencies, allowing this package to be\n-  used in many environments.\n-\n-- testable without requiring zope.testing. Running ``setup.py test`` should\n-  be sufficient.\n-\n-- URLs for scaled images should have an extension which reflects their\n-  MIME type. This is facilitates cache (and other front-end services)\n-  configuration.\n-\n-\n-.. _repoze.bitblt: http://pypi.python.org/pypi/repoze.bitblt\n-\n-\n-Usage\n-=====\n-\n-ATTENTION: Long time outdated information follows.\n-\n-The most common way to use :mod:`plone.scale` is from a HTML template.\n-In TAL syntax a typical usage looks like this::\n-\n-  <img tal:define="scales context/@@image-scaling;\n-                   thumbnail python:scales.scale(\'logo\', width=64, height=64)"\n-       tal:attributes="src thumbnail/url;\n-                       width thumbnail/width;\n-                       height thumbnail/height" />\n-\n-This generates a thumbnail of an image field called *logo* with a maximum size\n-of 64x64 pixels. The dimensions of the resulting image (which might not be\n-exactly 64x64) are set as attributes on the ``img`` tag to speed up browser\n-rendering.\n-\n-If you prefer Genshi syntax and have the :class:`IImageScaleStorage` interface\n-in scope the syntax looks like this::\n-\n-  <img py:with="thumbnail=IImageScaleStorage(context).scale(\'logo\', width=64, heigh=64)"\n-       py:attributes="dict(src=thumbnail.url, width=thumbnail.width, height=thumbnail.height" />\n-\n-Contents\n-==============\n-\n-.. toctree::\n-  :maxdepth: 2\n-\n-  narr/scale\n-  narr/storage\n-  changes\n-\n-\n-\n-Indices and tables\n-------------------\n-\n-* :ref:`genindex`\n-* :ref:`modindex`\n-* :ref:`search`\ndiff --git a/docs/narr/scale.rst b/docs/narr/scale.rst\ndeleted file mode 100644\nindex 14ff427..0000000\n--- a/docs/narr/scale.rst\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-Scaling\n-=======\n-\n-.. module:: plone.scale.scale\n-   :synopsis: Image scaling routines\n-\n-This module contains functions to scale images in particular ways. The\n-functions operate on raw image data and have no Zope dependencies.\n-\n-Functions\n----------\n-\n-.. autofunction:: scaleImage\n-\ndiff --git a/docs/narr/storage.rst b/docs/narr/storage.rst\ndeleted file mode 100644\nindex 75213b1..0000000\n--- a/docs/narr/storage.rst\n+++ /dev/null\n@@ -1,30 +0,0 @@\n-Storage\n-=======\n-\n-.. module:: plone.scale.storage\n-   :synopsis: Storage and retrieval of scaled images\n-\n-In Zope environments there are many possible types of objects which\n-can have images, and just as many ways to store an image. In order to\n-handle all of these two types of adapters are used: an :class:`IImageData`\n-adapter which can retrieve the data from an image field and an\n-:class:`IImageScaleStorage` adapter which manages generation and retrieval\n-of scaled images of fields on an object.\n-\n-Scales can be retrieved using either their scaling parameters or via an\n-identification code generated by the storage.\n-\n-\n-Interfaces\n------------\n-\n-.. autointerface:: IImageScaleStorage\n-   :members:\n-\n-\n-Classes\n---------\n-\n-.. autoclass:: AnnotationStorage\n-   :members: scale\n-\ndiff --git a/news/44.breaking.1 b/news/44.breaking.1\nnew file mode 100644\nindex 0000000..2ba180d\n--- /dev/null\n+++ b/news/44.breaking.1\n@@ -0,0 +1,3 @@\n+Removed Python 2 support.  Only Python 3.6+ supported now.\n+Still works on Plone 5.2.\n+[maurits]\ndiff --git a/news/44.breaking.2 b/news/44.breaking.2\nnew file mode 100644\nindex 0000000..7ba8dfa\n--- /dev/null\n+++ b/news/44.breaking.2\n@@ -0,0 +1,3 @@\n+Removed docs directory and sphinx extra.\n+The docs were last updated in 2010, and the maybe still relevant parts already copied to the readme.\n+[maurits]\ndiff --git a/setup.py b/setup.py\nindex 563977f..c10269d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -19,11 +19,6 @@\n     \'plone.testing\'\n ]\n \n-SPHINX_REQUIREMENTS = [\n-    \'Sphinx\',\n-    \'repoze.sphinx.autointerface\',\n-]\n-\n setup(\n     name=\'plone.scale\',\n     version=version,\n@@ -68,7 +63,6 @@\n     extras_require=dict(\n         test=TESTS_REQUIREMENTS,\n         storage=STORAGE_REQUIREMENTS,\n-        sphinx=STORAGE_REQUIREMENTS + SPHINX_REQUIREMENTS,\n         tests=STORAGE_REQUIREMENTS + TESTS_REQUIREMENTS,\n     ),\n )\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-02-02T22:48:22+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/1b3fc773d1e25dc45e3b7f0a540145af27344b50

black

Files changed:
M plone/__init__.py
M plone/scale/interfaces.py
M plone/scale/scale.py
M plone/scale/storage.py
M plone/scale/tests/test_scale.py
M plone/scale/tests/test_storage.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad10..05f0beb 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,6 +1,7 @@\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/scale/interfaces.py b/plone/scale/interfaces.py\nindex 8ea5e84..13bcf66 100644\n--- a/plone/scale/interfaces.py\n+++ b/plone/scale/interfaces.py\n@@ -14,12 +14,11 @@ class IScaledImageQuality(Interface):\n \n \n class IImageScaleFactory(Interface):\n-    """Creates a scale\n-    """\n+    """Creates a scale"""\n \n     def _call__(\n         fieldname=None,\n-        direction=\'thumbnail\',\n+        direction="thumbnail",\n         height=None,\n         width=None,\n         scale=None,\ndiff --git a/plone/scale/scale.py b/plone/scale/scale.py\nindex ee7b87e..cbc0aba 100644\n--- a/plone/scale/scale.py\n+++ b/plone/scale/scale.py\n@@ -29,8 +29,15 @@ def none_as_int(the_int):\n MAX_PIXELS = 8192 * 8192\n \n \n-def scaleImage(image, width=None, height=None, mode=\'contain\',\n-               quality=88, result=None, direction=None):\n+def scaleImage(\n+    image,\n+    width=None,\n+    height=None,\n+    mode="contain",\n+    quality=88,\n+    result=None,\n+    direction=None,\n+):\n     """Scale the given image data to another size and return the result\n     as a string or optionally write in to the file-like `result` object.\n \n@@ -57,35 +64,35 @@ def scaleImage(image, width=None, height=None, mode=\'contain\',\n     # When we create a new image during scaling we loose the format\n     # information, so remember it here.\n     format_ = image.format\n-    if format_ not in (\'PNG\', \'GIF\'):\n+    if format_ not in ("PNG", "GIF"):\n         # Always generate JPEG, except if format is PNG or GIF.\n-        format_ = \'JPEG\'\n-    elif format_ == \'GIF\':\n+        format_ = "JPEG"\n+    elif format_ == "GIF":\n         # GIF scaled looks better if we have 8-bit alpha and no palette\n-        format_ = \'PNG\'\n+        format_ = "PNG"\n \n-    icc_profile = image.info.get(\'icc_profile\')\n+    icc_profile = image.info.get("icc_profile")\n     image = scalePILImage(image, width, height, mode, direction=direction)\n \n     # convert to simpler mode if possible\n     colors = image.getcolors(maxcolors=256)\n-    if image.mode not in (\'P\', \'L\') and colors:\n-        if format_ == \'JPEG\':\n+    if image.mode not in ("P", "L") and colors:\n+        if format_ == "JPEG":\n             # check if it\'s all grey\n             if all(rgb[0] == rgb[1] == rgb[2] for c, rgb in colors):\n-                image = image.convert(\'L\')\n-        elif format_ == \'PNG\':\n-            image = image.convert(\'P\')\n+                image = image.convert("L")\n+        elif format_ == "PNG":\n+            image = image.convert("P")\n \n-    if image.mode == \'RGBA\' and format_ == \'JPEG\':\n+    if image.mode == "RGBA" and format_ == "JPEG":\n         extrema = dict(zip(image.getbands(), image.getextrema()))\n-        if extrema.get(\'A\') == (255, 255):\n+        if extrema.get("A") == (255, 255):\n             # no alpha used, just change the mode, which causes the alpha band\n             # to be dropped on save\n             image.mode = "RGB"\n         else:\n             # switch to PNG, which supports alpha\n-            format_ = \'PNG\'\n+            format_ = "PNG"\n \n     new_result = False\n \n@@ -99,7 +106,7 @@ def scaleImage(image, width=None, height=None, mode=\'contain\',\n         quality=quality,\n         optimize=True,\n         progressive=True,\n-        icc_profile=icc_profile\n+        icc_profile=icc_profile,\n     )\n \n     if new_result:\n@@ -118,20 +125,18 @@ def _scale_thumbnail(image, width=None, height=None):\n     than the given target width or height. No cropping!\n     """\n     dimensions = _calculate_all_dimensions(\n-        image.size[0], image.size[1],\n-        width, height, \'scale\')\n+        image.size[0], image.size[1], width, height, "scale"\n+    )\n \n     if (dimensions.target_width * dimensions.target_height) > MAX_PIXELS:\n         # The new image would be excessively large and eat up all memory while\n         # scaling, so return the potentially pre cropped image\n         return image\n \n-    image.draft(\n-        image.mode,\n-        (dimensions.target_width, dimensions.target_height))\n+    image.draft(image.mode, (dimensions.target_width, dimensions.target_height))\n     image = image.resize(\n-        (dimensions.target_width, dimensions.target_height),\n-        PIL.Image.ANTIALIAS)\n+        (dimensions.target_width, dimensions.target_height), PIL.Image.ANTIALIAS\n+    )\n     return image\n \n \n@@ -139,7 +144,8 @@ def get_scale_mode(mode, direction):\n     if direction is not None:\n         warnings.warn(\n             "the \'direction\' option is deprecated, use \'mode\' instead",\n-            DeprecationWarning)\n+            DeprecationWarning,\n+        )\n         mode = direction\n \n     if mode in ("scale-crop-to-fit", "down"):\n@@ -156,8 +162,10 @@ class ScaledDimensions:\n     pass\n \n \n-def _calculate_all_dimensions(original_width, original_height, width, height, mode=\'contain\'):\n-    """ Calculate all dimensions we need for scaling.\n+def _calculate_all_dimensions(\n+    original_width, original_height, width, height, mode="contain"\n+):\n+    """Calculate all dimensions we need for scaling.\n \n     final_width and final_height are the dimensions of the resulting image and\n     are always present.\n@@ -167,12 +175,12 @@ def _calculate_all_dimensions(original_width, original_height, width, height, mo\n     if width is None and height is None:\n         raise ValueError("Either width or height need to be given.")\n \n-    if mode not in (\'contain\', \'cover\', \'scale\'):\n+    if mode not in ("contain", "cover", "scale"):\n         raise ValueError("Unknown scale mode \'%s\'" % mode)\n \n     dimensions = ScaledDimensions()\n \n-    if mode == \'scale\':\n+    if mode == "scale":\n         # first store original size, as it is possible that we won\'t scale at all\n         dimensions.final_width = original_width\n         dimensions.final_height = original_height\n@@ -210,9 +218,9 @@ def _calculate_all_dimensions(original_width, original_height, width, height, mo\n     # Determine scale factors needed\n     factor_height = factor_width = None\n     if height is not None:\n-        factor_height = (float(height) / float(original_height))\n+        factor_height = float(height) / float(original_height)\n     if width is not None:\n-        factor_width = (float(width) / float(original_width))\n+        factor_width = float(width) / float(original_width)\n \n     dimensions.factor_width = factor_width\n     dimensions.factor_height = factor_height\n@@ -225,22 +233,22 @@ def _calculate_all_dimensions(original_width, original_height, width, height, mo\n \n     # figure out which axis to scale. One of the factors can still be None!\n     use_height = none_as_int(factor_width) > none_as_int(factor_height)\n-    if mode == \'cover\':  # for \'cover\': invert\n+    if mode == "cover":  # for \'cover\': invert\n         use_height = not use_height\n \n     # keep aspect ratio\n-    if (height is None or (use_height and width is not None)):\n+    if height is None or (use_height and width is not None):\n         target_width = width\n         target_height = int(round(original_height * factor_width))\n \n-    if (width is None or (height is not None and not use_height)):\n+    if width is None or (height is not None and not use_height):\n         target_width = int(round(original_width * factor_height))\n         target_height = height\n \n     # determine whether we need to crop before scaling\n-    pre_scale_crop = (\n-        (width is not None and target_width > width) or\n-        (height is not None and target_height > height))\n+    pre_scale_crop = (width is not None and target_width > width) or (\n+        height is not None and target_height > height\n+    )\n     dimensions.pre_scale_crop = pre_scale_crop\n \n     if pre_scale_crop:\n@@ -248,20 +256,20 @@ def _calculate_all_dimensions(original_width, original_height, width, height, mo\n         if use_height:\n             left = 0\n             right = original_width\n-            top = int(math.floor(\n-                ((target_height - height) / 2.0) / factor_width))\n-            bottom = int(math.ceil(\n-                (((target_height - height) / 2.0) + height) / factor_width))\n+            top = int(math.floor(((target_height - height) / 2.0) / factor_width))\n+            bottom = int(\n+                math.ceil((((target_height - height) / 2.0) + height) / factor_width)\n+            )\n             pre_scale_crop_height = bottom - top\n             # set new height in case we abort\n             dimensions.final_height = pre_scale_crop_height\n             # calculate new scale target_height from cropped height\n             target_height = int(round(pre_scale_crop_height * factor_width))\n         else:\n-            left = int(math.floor(\n-                ((target_width - width) / 2.0) / factor_height))\n-            right = int(math.ceil(\n-                (((target_width - width) / 2.0) + width) / factor_height))\n+            left = int(math.floor(((target_width - width) / 2.0) / factor_height))\n+            right = int(\n+                math.ceil((((target_width - width) / 2.0) + width) / factor_height)\n+            )\n             top = 0\n             bottom = original_height\n             pre_scale_crop_width = right - left\n@@ -283,9 +291,9 @@ def _calculate_all_dimensions(original_width, original_height, width, height, mo\n     dimensions.final_height = target_height\n \n     # determine whether we have to crop after scaling due to rounding\n-    post_scale_crop = (\n-        (width is not None and target_width > width) or\n-        (height is not None and target_height > height))\n+    post_scale_crop = (width is not None and target_width > width) or (\n+        height is not None and target_height > height\n+    )\n     dimensions.post_scale_crop = post_scale_crop\n \n     if post_scale_crop:\n@@ -306,17 +314,19 @@ def _calculate_all_dimensions(original_width, original_height, width, height, mo\n     return dimensions\n \n \n-def calculate_scaled_dimensions(original_width, original_height, width, height, mode=\'contain\'):\n-    """ Calculate the scaled image dimensions from the originals using the\n-    same logic as scalePILImage """\n+def calculate_scaled_dimensions(\n+    original_width, original_height, width, height, mode="contain"\n+):\n+    """Calculate the scaled image dimensions from the originals using the\n+    same logic as scalePILImage"""\n     dimensions = _calculate_all_dimensions(\n-        original_width, original_height,\n-        width, height, mode)\n+        original_width, original_height, width, height, mode\n+    )\n \n     return (dimensions.final_width, dimensions.final_height)\n \n \n-def scalePILImage(image, width=None, height=None, mode=\'contain\', direction=None):\n+def scalePILImage(image, width=None, height=None, mode="contain", direction=None):\n     """Scale a PIL image to another size.\n \n     This is all about scaling for the display in a web browser.\n@@ -375,24 +385,24 @@ def scalePILImage(image, width=None, height=None, mode=\'contain\', direction=None\n         image = image.convert("RGB")\n \n     # for scale we\'re done:\n-    if mode == \'scale\':\n+    if mode == "scale":\n         return _scale_thumbnail(image, width, height)\n \n     dimensions = _calculate_all_dimensions(\n-        image.size[0], image.size[1],\n-        width, height, mode)\n+        image.size[0], image.size[1], width, height, mode\n+    )\n \n     if dimensions.factor_height == dimensions.factor_width:\n         # The original already has the right aspect ratio, so we only need\n         # to scale.\n-        if mode == \'contain\':\n+        if mode == "contain":\n             image.thumbnail(\n-                (dimensions.final_width, dimensions.final_height),\n-                PIL.Image.ANTIALIAS)\n+                (dimensions.final_width, dimensions.final_height), PIL.Image.ANTIALIAS\n+            )\n             return image\n         return image.resize(\n-            (dimensions.final_width, dimensions.final_height),\n-            PIL.Image.ANTIALIAS)\n+            (dimensions.final_width, dimensions.final_height), PIL.Image.ANTIALIAS\n+        )\n \n     if dimensions.pre_scale_crop:\n         # crop image before scaling to avoid excessive memory use\n@@ -404,12 +414,10 @@ def scalePILImage(image, width=None, height=None, mode=\'contain\', direction=None\n         # scaling, so return the potentially pre cropped image\n         return image\n \n-    image.draft(\n-        image.mode,\n-        (dimensions.target_width, dimensions.target_height))\n+    image.draft(image.mode, (dimensions.target_width, dimensions.target_height))\n     image = image.resize(\n-        (dimensions.target_width, dimensions.target_height),\n-        PIL.Image.ANTIALIAS)\n+        (dimensions.target_width, dimensions.target_height), PIL.Image.ANTIALIAS\n+    )\n \n     if dimensions.post_scale_crop:\n         # crop off remains due to rounding before scaling\ndiff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex cebca9c..977693a 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -20,7 +20,7 @@\n     from collections import MutableMapping\n \n \n-logger = logging.getLogger(\'plone.scale\')\n+logger = logging.getLogger("plone.scale")\n # Keep old scales around for this amount of milliseconds.\n # This is one day:\n KEEP_SCALE_MILLIS = 24 * 60 * 60 * 1000\n@@ -32,61 +32,60 @@\n \n \n class IImageScaleStorage(Interface):\n-    """ This is an adapter for image content which can store, retrieve and\n-        generate image scale data. It provides a dictionary interface to\n-        existing image scales using the scale id as key. To find or create a\n-        scale based on its scaling parameters use the :meth:`scale` method. """\n+    """This is an adapter for image content which can store, retrieve and\n+    generate image scale data. It provides a dictionary interface to\n+    existing image scales using the scale id as key. To find or create a\n+    scale based on its scaling parameters use the :meth:`scale` method."""\n \n     def __init__(context, modified=None):\n-        """ Adapt the given context item and optionally provide a callable\n-            to return a representation of the last modification date, which\n-            can be used to invalidate stored scale data on update. """\n+        """Adapt the given context item and optionally provide a callable\n+        to return a representation of the last modification date, which\n+        can be used to invalidate stored scale data on update."""\n \n     def scale(factory=None, **parameters):\n-        """ Find image scale data for the given parameters or create it if\n-            a factory was provided.  The parameters will be passed back to\n-            the factory method, which is expected to return a tuple\n-            containing a representation of the actual image scale data (i.e.\n-            a string or file-like object) as well as the image\'s format and\n-            dimensions.  For convenience, this happens to match the return\n-            value of `scaleImage`, but makes it possible to use different\n-            storages, i.e. ZODB blobs """\n+        """Find image scale data for the given parameters or create it if\n+        a factory was provided.  The parameters will be passed back to\n+        the factory method, which is expected to return a tuple\n+        containing a representation of the actual image scale data (i.e.\n+        a string or file-like object) as well as the image\'s format and\n+        dimensions.  For convenience, this happens to match the return\n+        value of `scaleImage`, but makes it possible to use different\n+        storages, i.e. ZODB blobs"""\n \n     def __getitem__(uid):\n-        """ Find image scale data based on its uid. """\n+        """Find image scale data based on its uid."""\n \n \n class ScalesDict(PersistentDict):\n-\n     def raise_conflict(self, saved, new):\n-        logger.info(\'Conflict\')\n-        logger.debug(\'saved\\n\' + pprint.pformat(saved))\n-        logger.debug(\'new\\n\' + pprint.pformat(new))\n+        logger.info("Conflict")\n+        logger.debug("saved\\n" + pprint.pformat(saved))\n+        logger.debug("new\\n" + pprint.pformat(new))\n         raise ConflictError\n \n     def _p_resolveConflict(self, oldState, savedState, newState):\n-        logger.debug(\'Resolve conflict\')\n-        old = oldState[\'data\']\n-        saved = savedState[\'data\']\n-        new = newState[\'data\']\n+        logger.debug("Resolve conflict")\n+        old = oldState["data"]\n+        saved = savedState["data"]\n+        new = newState["data"]\n         added = []\n         modified = []\n         deleted = []\n         for key, value in new.items():\n             if key not in old:\n                 added.append(key)\n-            elif value[\'modified\'] != old[key][\'modified\']:\n+            elif value["modified"] != old[key]["modified"]:\n                 modified.append(key)\n             # else:\n-                # unchanged\n+            # unchanged\n         for key in old:\n             if key not in new:\n                 deleted.append(key)\n         for key in deleted:\n             if key in saved:\n-                if old[key][\'modified\'] == saved[key][\'modified\']:\n+                if old[key]["modified"] == saved[key]["modified"]:\n                     # unchanged by saved, deleted by new\n-                    logger.debug(\'deleted %s\' % repr(key))\n+                    logger.debug("deleted %s" % repr(key))\n                     del saved[key]\n                 else:\n                     # modified by saved, deleted by new\n@@ -97,28 +96,28 @@ def _p_resolveConflict(self, oldState, savedState, newState):\n                 self.raise_conflict(saved[key], new[key])\n             else:\n                 # not in saved, added by new\n-                logger.debug(\'added %s\' % repr(key))\n+                logger.debug("added %s" % repr(key))\n                 saved[key] = new[key]\n         for key in modified:\n             if key not in saved:\n                 # deleted by saved, modified by new\n                 self.raise_conflict(saved[key], new[key])\n-            elif saved[key][\'modified\'] != old[key][\'modified\']:\n+            elif saved[key]["modified"] != old[key]["modified"]:\n                 # modified by saved, modified by new\n                 self.raise_conflict(saved[key], new[key])\n             else:\n                 # unchanged in saved, modified by new\n-                logger.debug(\'modified %s\' % repr(key))\n+                logger.debug("modified %s" % repr(key))\n                 saved[key] = new[key]\n         return dict(data=saved)\n \n \n @implementer(IImageScaleStorage)\n class AnnotationStorage(MutableMapping):\n-    """ An abstract storage for image scale data using annotations and\n-        implementing :class:`IImageScaleStorage`. Image data is stored as an\n-        annotation on the object container, i.e. the image. This is needed\n-        since not all images are themselves annotatable. """\n+    """An abstract storage for image scale data using annotations and\n+    implementing :class:`IImageScaleStorage`. Image data is stored as an\n+    annotation on the object container, i.e. the image. This is needed\n+    since not all images are themselves annotatable."""\n \n     def __init__(self, context, modified=None):\n         self.context = context\n@@ -152,21 +151,18 @@ def modified_time(self):\n \n     def __repr__(self):\n         name = self.__class__.__name__\n-        return f\'<{name} context={self.context!r}>\'\n+        return f"<{name} context={self.context!r}>"\n \n     __str__ = __repr__\n \n     @property\n     def storage(self):\n         annotations = IAnnotations(self.context)\n-        scales = annotations.setdefault(\n-            \'plone.scale\',\n-            ScalesDict()\n-        )\n+        scales = annotations.setdefault("plone.scale", ScalesDict())\n         if not isinstance(scales, ScalesDict):\n             # migrate from PersistentDict to ScalesDict\n             new_scales = ScalesDict(scales)\n-            annotations[\'plone.scale\'] = new_scales\n+            annotations["plone.scale"] = new_scales\n             return new_scales\n         return scales\n \n@@ -175,7 +171,7 @@ def hash(self, **parameters):\n \n     def get_info_by_hash(self, hash):\n         for value in self.storage.values():\n-            if value[\'key\'] == hash:\n+            if value["key"] == hash:\n                 return value\n \n     def scale(self, factory=None, **parameters):\n@@ -183,10 +179,12 @@ def scale(self, factory=None, **parameters):\n         storage = self.storage\n         info = self.get_info_by_hash(key)\n         scaling_factory = IImageScaleFactory(self.context, None)\n-        if (info is not None and\n-                (scaling_factory is not None or factory is not None) and\n-                self._modified_since(info[\'modified\'])):\n-            del self[info[\'uid\']]\n+        if (\n+            info is not None\n+            and (scaling_factory is not None or factory is not None)\n+            and self._modified_since(info["modified"])\n+        ):\n+            del self[info["uid"]]\n             # invalidate when the image was updated\n             info = None\n         elif info is not None:\n@@ -196,19 +194,19 @@ def scale(self, factory=None, **parameters):\n         if factory is not None:\n             if scaling_factory is not None:\n                 warnings.warn(\n-                    \'Deprecated usage of factory in plone.scale. \'\n-                    \'Factory is passed to plone.scale but also an adapter \'\n-                    \'was found. No way to really decide which one to execute.\'\n-                    \'To be nice and with a look at backward compatibility the \'\n-                    \'passed one is used.\',\n-                    DeprecationWarning\n+                    "Deprecated usage of factory in plone.scale. "\n+                    "Factory is passed to plone.scale but also an adapter "\n+                    "was found. No way to really decide which one to execute."\n+                    "To be nice and with a look at backward compatibility the "\n+                    "passed one is used.",\n+                    DeprecationWarning,\n                 )\n             else:\n                 warnings.warn(\n-                    \'Deprecated usage of factory in plone.scale. Provide an \'\n-                    \'adapter for the factory instead. The kwarg will be \'\n-                    \'dropped with plone.scale 3.0\',\n-                    DeprecationWarning\n+                    "Deprecated usage of factory in plone.scale. Provide an "\n+                    "adapter for the factory instead. The kwarg will be "\n+                    "dropped with plone.scale 3.0",\n+                    DeprecationWarning,\n                 )\n             result = factory(**parameters)\n         elif scaling_factory is not None:\n@@ -219,9 +217,9 @@ def scale(self, factory=None, **parameters):\n             # BBB behavior here is to return None\n             # nevertheless we warn!\n             warnings.warn(\n-                \'Could not adapt context to IImageScaleFactory nor a \'\n-                \'deprecated BBB factory callable was provided.\'\n-                \'Assume None return value as it was before.\'\n+                "Could not adapt context to IImageScaleFactory nor a "\n+                "deprecated BBB factory callable was provided."\n+                "Assume None return value as it was before."\n             )\n             return None\n \n@@ -237,7 +235,7 @@ def scale(self, factory=None, **parameters):\n                 data=data,\n                 width=width,\n                 height=height,\n-                mimetype=f\'image/{format_.lower()}\',\n+                mimetype=f"image/{format_.lower()}",\n                 key=key,\n                 modified=self.modified_time,\n             )\n@@ -258,15 +256,14 @@ def _cleanup(self):\n             if isinstance(key, tuple):\n                 del self[key]\n             # clear cache from scales older than one day\n-            elif self._modified_since(\n-                    value[\'modified\'], offset=KEEP_SCALE_MILLIS):\n+            elif self._modified_since(value["modified"], offset=KEEP_SCALE_MILLIS):\n                 del self[key]\n \n     def __getitem__(self, uid):\n         return self.storage[uid]\n \n     def __setitem__(self, id, scale):\n-        raise RuntimeError(\'New scales have to be created via scale()\')\n+        raise RuntimeError("New scales have to be created via scale()")\n \n     def __delitem__(self, uid):\n         try:\n@@ -274,7 +271,7 @@ def __delitem__(self, uid):\n         except KeyError:\n             # This should not happen, but it apparently can happen in corner\n             # cases.  See https://github.com/plone/plone.scale/issues/15\n-            logger.warn(\'Could not delete key %s from storage.\', uid)\n+            logger.warn("Could not delete key %s from storage.", uid)\n \n     def __iter__(self):\n         return iter(self.storage)\ndiff --git a/plone/scale/tests/test_scale.py b/plone/scale/tests/test_scale.py\nindex 6536f84..7f74cd4 100644\n--- a/plone/scale/tests/test_scale.py\n+++ b/plone/scale/tests/test_scale.py\n@@ -15,20 +15,19 @@\n     from io import BytesIO as StringIO\n \n \n-with open(os.path.join(TEST_DATA_LOCATION, "logo.png"), \'rb\') as fio:\n+with open(os.path.join(TEST_DATA_LOCATION, "logo.png"), "rb") as fio:\n     PNG = fio.read()\n-with open(os.path.join(TEST_DATA_LOCATION, "logo.gif"), \'rb\') as fio:\n+with open(os.path.join(TEST_DATA_LOCATION, "logo.gif"), "rb") as fio:\n     GIF = fio.read()\n-with open(os.path.join(TEST_DATA_LOCATION, "logo.tiff"), \'rb\') as fio:\n+with open(os.path.join(TEST_DATA_LOCATION, "logo.tiff"), "rb") as fio:\n     TIFF = fio.read()\n-with open(os.path.join(TEST_DATA_LOCATION, "cmyk.jpg"), \'rb\') as fio:\n+with open(os.path.join(TEST_DATA_LOCATION, "cmyk.jpg"), "rb") as fio:\n     CMYK = fio.read()\n-with open(os.path.join(TEST_DATA_LOCATION, "profile.jpg"), \'rb\') as fio:\n+with open(os.path.join(TEST_DATA_LOCATION, "profile.jpg"), "rb") as fio:\n     PROFILE = fio.read()\n \n \n class ScalingTests(TestCase):\n-\n     def testNewSizeReturned(self):\n         (imagedata, format, size) = scaleImage(PNG, 42, 51, "contain")\n         input = StringIO(imagedata)\n@@ -75,14 +74,14 @@ def testScaledPreservesProfile(self):\n         (imagedata, format, size) = scaleImage(PROFILE, 42, 51, "contain")\n         input = StringIO(imagedata)\n         image = PIL.Image.open(input)\n-        self.assertIsNotNone(image.info.get(\'icc_profile\'))\n+        self.assertIsNotNone(image.info.get("icc_profile"))\n \n     def testScaleWithFewColorsStaysColored(self):\n         (imagedata, format, size) = scaleImage(PROFILE, 16, None, "contain")\n         image = PIL.Image.open(StringIO(imagedata))\n         self.assertEqual(max(image.size), 16)\n-        self.assertEqual(image.mode, \'RGB\')\n-        self.assertEqual(image.format, \'JPEG\')\n+        self.assertEqual(image.mode, "RGB")\n+        self.assertEqual(image.format, "JPEG")\n \n     def testAutomaticGreyscale(self):\n         src = PIL.Image.new("RGB", (256, 256), (255, 255, 255))\n@@ -94,29 +93,29 @@ def testAutomaticGreyscale(self):\n         (imagedata, format, size) = scaleImage(result, 200, None, "contain")\n         image = PIL.Image.open(StringIO(imagedata))\n         self.assertEqual(max(image.size), 200)\n-        self.assertEqual(image.mode, \'L\')\n-        self.assertEqual(image.format, \'JPEG\')\n+        self.assertEqual(image.mode, "L")\n+        self.assertEqual(image.format, "JPEG")\n \n     def testAutomaticPalette(self):\n         # get a JPEG with more than 256 colors\n         jpeg = PIL.Image.open(StringIO(PROFILE))\n-        self.assertEqual(jpeg.mode, \'RGB\')\n-        self.assertEqual(jpeg.format, \'JPEG\')\n+        self.assertEqual(jpeg.mode, "RGB")\n+        self.assertEqual(jpeg.format, "JPEG")\n         self.assertIsNone(jpeg.getcolors(maxcolors=256))\n         # convert to PNG\n         dst = StringIO()\n         jpeg.save(dst, "PNG")\n         dst.seek(0)\n         png = PIL.Image.open(dst)\n-        self.assertEqual(png.mode, \'RGB\')\n-        self.assertEqual(png.format, \'PNG\')\n+        self.assertEqual(png.mode, "RGB")\n+        self.assertEqual(png.format, "PNG")\n         self.assertIsNone(png.getcolors(maxcolors=256))\n         # scale it to a size where we get less than 256 colors\n         (imagedata, format, size) = scaleImage(dst.getvalue(), 24, None, "contain")\n         image = PIL.Image.open(StringIO(imagedata))\n         # we should now have an image in palette mode\n-        self.assertEqual(image.mode, \'P\')\n-        self.assertEqual(image.format, \'PNG\')\n+        self.assertEqual(image.mode, "P")\n+        self.assertEqual(image.format, "PNG")\n \n     def testSameSizeDownScale(self):\n         self.assertEqual(scaleImage(PNG, 84, 103, "contain")[2], (84, 103))\n@@ -213,8 +212,8 @@ def testResultBuffer(self):\n         img1 = scaleImage(PNG, 84, 103)[0]\n         result = StringIO()\n         img2 = scaleImage(PNG, 84, 103, result=result)[0]\n-        self.assertEqual(result, img2)      # the return value _is_ the buffer\n-        self.assertEqual(result.getvalue(), img1)   # but with the same value\n+        self.assertEqual(result, img2)  # the return value _is_ the buffer\n+        self.assertEqual(result.getvalue(), img1)  # but with the same value\n \n     def testAlternativeSpellings(self):\n         """Test alternative and deprecated mode spellings and the old\n@@ -222,103 +221,102 @@ def testAlternativeSpellings(self):\n         """\n \n         # scale-crop-to-fit\n-        img = PIL.Image.new(\'RGB\', (20, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 10, 5, direction=\'scale-crop-to-fit\')\n+        img = PIL.Image.new("RGB", (20, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 10, 5, direction="scale-crop-to-fit")\n         self.assertEqual(img_scaled.size, (10, 5))\n         # down\n-        img = PIL.Image.new(\'RGB\', (20, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 10, 5, direction=\'down\')\n+        img = PIL.Image.new("RGB", (20, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 10, 5, direction="down")\n         self.assertEqual(img_scaled.size, (10, 5))\n \n         # Test mode cover\n         # scale-crop-to-fill\n-        img = PIL.Image.new(\'RGB\', (20, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 40, 30, direction=\'scale-crop-to-fill\')\n+        img = PIL.Image.new("RGB", (20, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 40, 30, direction="scale-crop-to-fill")\n         self.assertEqual(img_scaled.size, (30, 30))\n         # up\n-        img = PIL.Image.new(\'RGB\', (20, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 40, 30, direction=\'up\')\n+        img = PIL.Image.new("RGB", (20, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 40, 30, direction="up")\n         self.assertEqual(img_scaled.size, (30, 30))\n \n         # Test mode scale\n         # keep A\n-        img = PIL.Image.new(\'RGB\', (20, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 20, 10, direction=\'keep\')\n+        img = PIL.Image.new("RGB", (20, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 20, 10, direction="keep")\n         self.assertEqual(img_scaled.size, (10, 10))\n         # keep B\n-        img = PIL.Image.new(\'RGB\', (20, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 40, 80, direction=\'keep\')\n+        img = PIL.Image.new("RGB", (20, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 40, 80, direction="keep")\n         self.assertEqual(img_scaled.size, (20, 20))\n         # thumbnail A\n-        img = PIL.Image.new(\'RGB\', (20, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 20, 10, direction=\'thumbnail\')\n+        img = PIL.Image.new("RGB", (20, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 20, 10, direction="thumbnail")\n         self.assertEqual(img_scaled.size, (10, 10))\n         # thumbnail B\n-        img = PIL.Image.new(\'RGB\', (20, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 40, 80, direction=\'thumbnail\')\n+        img = PIL.Image.new("RGB", (20, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 40, 80, direction="thumbnail")\n         self.assertEqual(img_scaled.size, (20, 20))\n \n     def testModes(self):\n-        """Test modes to actually behavie like documented.\n-        """\n+        """Test modes to actually behavie like documented."""\n         # Mode contain\n         # v\n         # A\n-        img = PIL.Image.new(\'RGB\', (20, 40), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 10, 10, mode=\'contain\')\n+        img = PIL.Image.new("RGB", (20, 40), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 10, 10, mode="contain")\n         self.assertEqual(img_scaled.size, (10, 10))\n         # B\n-        img = PIL.Image.new(\'RGB\', (40, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 10, 10, mode=\'contain\')\n+        img = PIL.Image.new("RGB", (40, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 10, 10, mode="contain")\n         self.assertEqual(img_scaled.size, (10, 10))\n         # ^\n         # A\n-        img = PIL.Image.new(\'RGB\', (20, 40), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 60, 60, mode=\'contain\')\n+        img = PIL.Image.new("RGB", (20, 40), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 60, 60, mode="contain")\n         self.assertEqual(img_scaled.size, (60, 60))\n         # B\n-        img = PIL.Image.new(\'RGB\', (40, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 60, 60, mode=\'contain\')\n+        img = PIL.Image.new("RGB", (40, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 60, 60, mode="contain")\n         self.assertEqual(img_scaled.size, (60, 60))\n \n         # Mode cover\n         # v\n         # A\n-        img = PIL.Image.new(\'RGB\', (20, 40), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 10, 10, mode=\'cover\')\n+        img = PIL.Image.new("RGB", (20, 40), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 10, 10, mode="cover")\n         self.assertEqual(img_scaled.size, (5, 10))\n         # B\n-        img = PIL.Image.new(\'RGB\', (40, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 10, 10, mode=\'cover\')\n+        img = PIL.Image.new("RGB", (40, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 10, 10, mode="cover")\n         self.assertEqual(img_scaled.size, (10, 5))\n         # ^\n         # A\n-        img = PIL.Image.new(\'RGB\', (20, 40), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 60, 60, mode=\'cover\')\n+        img = PIL.Image.new("RGB", (20, 40), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 60, 60, mode="cover")\n         self.assertEqual(img_scaled.size, (30, 60))\n         # B\n-        img = PIL.Image.new(\'RGB\', (40, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 60, 60, mode=\'cover\')\n+        img = PIL.Image.new("RGB", (40, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 60, 60, mode="cover")\n         self.assertEqual(img_scaled.size, (60, 30))\n \n         # Mode scale\n         # v\n         # A\n-        img = PIL.Image.new(\'RGB\', (20, 40), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 10, 10, mode=\'scale\')\n+        img = PIL.Image.new("RGB", (20, 40), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 10, 10, mode="scale")\n         self.assertEqual(img_scaled.size, (5, 10))\n         # B\n-        img = PIL.Image.new(\'RGB\', (40, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 10, 10, mode=\'scale\')\n+        img = PIL.Image.new("RGB", (40, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 10, 10, mode="scale")\n         self.assertEqual(img_scaled.size, (10, 5))\n         # ^\n         # A\n-        img = PIL.Image.new(\'RGB\', (20, 40), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 60, 60, mode=\'scale\')\n+        img = PIL.Image.new("RGB", (20, 40), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 60, 60, mode="scale")\n         self.assertEqual(img_scaled.size, (20, 40))\n         # B\n-        img = PIL.Image.new(\'RGB\', (40, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 60, 60, mode=\'scale\')\n+        img = PIL.Image.new("RGB", (40, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 60, 60, mode="scale")\n         self.assertEqual(img_scaled.size, (40, 20))\n \n     def testDeprecations(self):\n@@ -331,11 +329,10 @@ def testDeprecations(self):\n             scaleImage(PNG, 16, 16, direction="keep")\n             self.assertEqual(len(w), 1)\n             self.assertIs(w[0].category, DeprecationWarning)\n-            self.assertIn(\n-                "the \'direction\' option is deprecated",\n-                str(w[0].message))\n+            self.assertIn("the \'direction\' option is deprecated", str(w[0].message))\n \n \n def test_suite():\n     from unittest import defaultTestLoader\n+\n     return defaultTestLoader.loadTestsFromName(__name__)\ndiff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py\nindex 20df8e9..c1cf001 100644\n--- a/plone/scale/tests/test_storage.py\n+++ b/plone/scale/tests/test_storage.py\n@@ -28,7 +28,6 @@ def _provide_dummy_scale_adapter(self, result=True):\n         @implementer(IImageScaleFactory)\n         @adapter(_DummyContext)\n         class DummyISF:\n-\n             def __init__(self, context):\n                 self.context = context\n \n@@ -42,40 +41,42 @@ def __call__(self, **parameters):\n     @property\n     def storage(self):\n         from plone.scale.storage import AnnotationStorage\n+\n         provideAdapter(zope.annotation.attribute.AttributeAnnotations)\n         storage = AnnotationStorage(_DummyContext())\n         storage.modified = lambda: 42\n         return storage\n \n     def factory(self, **kw):\n-        return \'some data\', \'png\', (42, 23)\n+        return "some data", "png", (42, 23)\n \n     def testInterface(self):\n         from plone.scale.storage import IImageScaleStorage\n+\n         storage = self.storage\n         self.assertTrue(IImageScaleStorage.providedBy(storage))\n \n     def testScaleForNonExistingScaleWithCreationBBB(self):\n         storage = self.storage\n         scale = storage.scale(factory=self.factory, foo=23, bar=42)\n-        self.assertIn(\'uid\', scale)\n-        self.assertIn(\'key\', scale)\n-        self.assertEqual(scale[\'data\'], \'some data\')\n-        self.assertEqual(scale[\'width\'], 42)\n-        self.assertEqual(scale[\'height\'], 23)\n-        self.assertEqual(scale[\'mimetype\'], \'image/png\')\n+        self.assertIn("uid", scale)\n+        self.assertIn("key", scale)\n+        self.assertEqual(scale["data"], "some data")\n+        self.assertEqual(scale["width"], 42)\n+        self.assertEqual(scale["height"], 23)\n+        self.assertEqual(scale["mimetype"], "image/png")\n \n     def testScaleForNonExistingScaleWithCreation(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n         scale = storage.scale(foo=23, bar=42)\n-        self.assertIn(\'uid\', scale)\n-        self.assertIn(\'key\', scale)\n-        self.assertEqual(scale[\'data\'], \'some data\')\n-        self.assertEqual(scale[\'width\'], 42)\n+        self.assertIn("uid", scale)\n+        self.assertIn("key", scale)\n+        self.assertEqual(scale["data"], "some data")\n+        self.assertEqual(scale["width"], 42)\n \n-        self.assertEqual(scale[\'height\'], 23)\n-        self.assertEqual(scale[\'mimetype\'], \'image/png\')\n+        self.assertEqual(scale["height"], 23)\n+        self.assertEqual(scale["mimetype"], "image/png")\n \n     def testScaleForNonExistingScaleWithoutCreationBBB(self):\n         storage = self.storage\n@@ -104,48 +105,48 @@ def testScaleForExistingScale(self):\n     def testScaleForSimilarScalesBBB(self):\n         storage = self.storage\n         scale1 = storage.scale(factory=self.factory, foo=23, bar=42)\n-        scale2 = storage.scale(factory=self.factory, bar=42, foo=23, hurz=\'!\')\n+        scale2 = storage.scale(factory=self.factory, bar=42, foo=23, hurz="!")\n         self.assertIsNot(scale1, scale2)\n \n     def testScaleForSimilarScales(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n         scale1 = storage.scale(foo=23, bar=42)\n-        scale2 = storage.scale(bar=42, foo=23, hurz=\'!\')\n+        scale2 = storage.scale(bar=42, foo=23, hurz="!")\n         self.assertIsNot(scale1, scale2)\n \n     def testGetItemBBB(self):\n         storage = self.storage\n         scale = storage.scale(factory=self.factory, foo=23, bar=42)\n-        uid = scale[\'uid\']\n+        uid = scale["uid"]\n         scale = storage[uid]\n-        self.assertTrue(\'uid\' in scale)\n-        self.assertTrue(\'key\' in scale)\n-        self.assertEqual(scale[\'data\'], \'some data\')\n-        self.assertEqual(scale[\'width\'], 42)\n-        self.assertEqual(scale[\'height\'], 23)\n-        self.assertEqual(scale[\'mimetype\'], \'image/png\')\n+        self.assertTrue("uid" in scale)\n+        self.assertTrue("key" in scale)\n+        self.assertEqual(scale["data"], "some data")\n+        self.assertEqual(scale["width"], 42)\n+        self.assertEqual(scale["height"], 23)\n+        self.assertEqual(scale["mimetype"], "image/png")\n \n     def testGetItem(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n         scale = storage.scale(foo=23, bar=42)\n-        uid = scale[\'uid\']\n+        uid = scale["uid"]\n         scale = storage[uid]\n-        self.assertIn(\'uid\', scale)\n-        self.assertIn(\'key\', scale)\n-        self.assertEqual(scale[\'data\'], \'some data\')\n-        self.assertEqual(scale[\'width\'], 42)\n-        self.assertEqual(scale[\'height\'], 23)\n-        self.assertEqual(scale[\'mimetype\'], \'image/png\')\n+        self.assertIn("uid", scale)\n+        self.assertIn("key", scale)\n+        self.assertEqual(scale["data"], "some data")\n+        self.assertEqual(scale["width"], 42)\n+        self.assertEqual(scale["height"], 23)\n+        self.assertEqual(scale["mimetype"], "image/png")\n \n     def testGetUnknownItem(self):\n         storage = self.storage\n-        self.assertRaises(KeyError, itemgetter(\'foo\'), storage)\n+        self.assertRaises(KeyError, itemgetter("foo"), storage)\n \n     def testSetItemNotAllowed(self):\n         storage = self.storage\n-        self.assertRaises(RuntimeError, setitem, storage, \'key\', None)\n+        self.assertRaises(RuntimeError, setitem, storage, "key", None)\n \n     def testIterateWithoutAnnotations(self):\n         storage = self.storage\n@@ -155,34 +156,34 @@ def testIterate(self):\n         storage = self.storage\n         storage.storage.update(dict(one=None, two=None))\n         generator = iter(storage)\n-        self.assertEqual(set(generator), {\'one\', \'two\'})\n+        self.assertEqual(set(generator), {"one", "two"})\n \n     def testKeys(self):\n         storage = self.storage\n         storage.storage.update(dict(one=None, two=None))\n-        self.assertEqual(set(storage.keys()), {\'one\', \'two\'})\n+        self.assertEqual(set(storage.keys()), {"one", "two"})\n \n     def testNegativeHasKey(self):\n         storage = self.storage\n-        self.assertEqual(\'one\' in storage, False)\n+        self.assertEqual("one" in storage, False)\n \n     def testPositiveHasKey(self):\n         storage = self.storage\n         storage.storage.update(dict(one=None))\n-        self.assertEqual(\'one\' in storage, True)\n+        self.assertEqual("one" in storage, True)\n \n     def testDeleteNonExistingItem(self):\n         storage = self.storage\n         # This used to raise a KeyError, but sometimes the underlying storage\n         # can get inconsistent, so it is nicer to accept it.\n         # See https://github.com/plone/plone.scale/issues/15\n-        delitem(storage, \'foo\')\n+        delitem(storage, "foo")\n \n     def testDeleteRemovesItemAndIndexBBB(self):\n         storage = self.storage\n         scale = storage.scale(factory=self.factory, foo=23, bar=42)\n         self.assertEqual(len(storage), 1)\n-        del storage[scale[\'uid\']]\n+        del storage[scale["uid"]]\n         self.assertEqual(len(storage), 0)\n \n     def testDeleteRemovesItemAndIndex(self):\n@@ -190,7 +191,7 @@ def testDeleteRemovesItemAndIndex(self):\n         storage = self.storage\n         scale = storage.scale(foo=23, bar=42)\n         self.assertEqual(len(storage), 1)\n-        del storage[scale[\'uid\']]\n+        del storage[scale["uid"]]\n         self.assertEqual(len(storage), 0)\n \n     def testCleanUpOldItemsBBB(self):\n@@ -200,8 +201,8 @@ def testCleanUpOldItemsBBB(self):\n         storage.modified = lambda: next_modified\n         scale_new = storage.scale(factory=self.factory, foo=23, bar=42)\n         self.assertEqual(len(storage), 1)\n-        self.assertEqual(scale_new[\'uid\'] in storage, True)\n-        self.assertEqual(scale_old[\'uid\'] in storage, False)\n+        self.assertEqual(scale_new["uid"] in storage, True)\n+        self.assertEqual(scale_old["uid"] in storage, False)\n \n         # When modification time is older than a day, too old scales\n         # get purged.\n@@ -209,10 +210,10 @@ def testCleanUpOldItemsBBB(self):\n         storage.modified = lambda: next_modified\n         scale_newer = storage.scale(factory=self.factory, foo=23, bar=42)\n \n-        self.assertEqual(scale_newer[\'uid\'] in storage, True)\n-        self.assertEqual(scale_new[\'uid\'] in storage, False)\n-        self.assertEqual(scale_old[\'uid\'] in storage, False)\n-        del storage[scale_newer[\'uid\']]\n+        self.assertEqual(scale_newer["uid"] in storage, True)\n+        self.assertEqual(scale_new["uid"] in storage, False)\n+        self.assertEqual(scale_old["uid"] in storage, False)\n+        del storage[scale_newer["uid"]]\n         self.assertEqual(len(storage), 0)\n \n     def testCleanUpOldItems(self):\n@@ -223,8 +224,8 @@ def testCleanUpOldItems(self):\n         storage.modified = lambda: next_modified\n         scale_new = storage.scale(foo=23, bar=42)\n         self.assertEqual(len(storage), 1)\n-        self.assertIn(scale_new[\'uid\'], storage)\n-        self.assertNotIn(scale_old[\'uid\'], storage)\n+        self.assertIn(scale_new["uid"], storage)\n+        self.assertNotIn(scale_old["uid"], storage)\n \n         # When modification time is older than a day, too old scales\n         # get purged.\n@@ -232,10 +233,10 @@ def testCleanUpOldItems(self):\n         storage.modified = lambda: next_modified\n         scale_newer = storage.scale(foo=23, bar=42)\n \n-        self.assertIn(scale_newer[\'uid\'], storage)\n-        self.assertNotIn(scale_new[\'uid\'], storage)\n-        self.assertNotIn(scale_old[\'uid\'], storage)\n-        del storage[scale_newer[\'uid\']]\n+        self.assertIn(scale_newer["uid"], storage)\n+        self.assertNotIn(scale_new["uid"], storage)\n+        self.assertNotIn(scale_old["uid"], storage)\n+        del storage[scale_newer["uid"]]\n         self.assertEqual(len(storage), 0)\n \n     def testClearBBB(self):\n@@ -256,4 +257,5 @@ def testClear(self):\n \n def test_suite():\n     from unittest import defaultTestLoader\n+\n     return defaultTestLoader.loadTestsFromName(__name__)\ndiff --git a/setup.py b/setup.py\nindex c10269d..9f40ad1 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,62 +2,59 @@\n from setuptools import setup\n \n \n-version = \'3.1.3.dev0\'\n-readme = open(\'README.rst\').read().replace(\':class:\', \'\').replace(\':mod:\', \'\')\n-changes = open(\'CHANGES.rst\').read()\n+version = "3.1.3.dev0"\n+readme = open("README.rst").read().replace(":class:", "").replace(":mod:", "")\n+changes = open("CHANGES.rst").read()\n \n STORAGE_REQUIREMENTS = [\n-    \'zope.annotation\',\n-    \'zope.component\',\n-    \'zope.configuration\',\n-    \'zope.interface\',\n-    \'Persistence\',\n+    "zope.annotation",\n+    "zope.component",\n+    "zope.configuration",\n+    "zope.interface",\n+    "Persistence",\n ]\n \n-TESTS_REQUIREMENTS = [\n-    \'Pillow\',\n-    \'plone.testing\'\n-]\n+TESTS_REQUIREMENTS = ["Pillow", "plone.testing"]\n \n setup(\n-    name=\'plone.scale\',\n+    name="plone.scale",\n     version=version,\n-    description=\'Image scaling\',\n-    long_description=readme + \'\\n\' + changes,\n+    description="Image scaling",\n+    long_description=readme + "\\n" + changes,\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n-        \'Environment :: Web Environment\',\n-        \'Framework :: Plone\',\n-        \'Framework :: Plone :: 5.1\',\n-        \'Framework :: Plone :: 5.2\',\n-        \'Framework :: Plone :: Core\',\n-        \'Framework :: Zope2\',\n-        \'Framework :: Zope :: 4\',\n-        \'License :: OSI Approved :: BSD License\',\n-        \'Operating System :: OS Independent\',\n-        \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 2.7\',\n-        \'Programming Language :: Python :: 3.5\',\n-        \'Programming Language :: Python :: 3.6\',\n-        \'Programming Language :: Python :: 3.7\',\n-        \'Programming Language :: Python :: 3.8\',\n+        "Development Status :: 5 - Production/Stable",\n+        "Environment :: Web Environment",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 5.1",\n+        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: Core",\n+        "Framework :: Zope2",\n+        "Framework :: Zope :: 4",\n+        "License :: OSI Approved :: BSD License",\n+        "Operating System :: OS Independent",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.5",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n     ],\n-    keywords=\'image scaling\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.scale\',\n-    license=\'BSD\',\n+    keywords="image scaling",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.scale",\n+    license="BSD",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n-    test_suite=\'plone.scale\',\n+    test_suite="plone.scale",\n     install_requires=[\n         # We can\'t actually depend on PIL because not everyone can install it\n         # as an egg.\n         # \'PIL\',\n         # \'Pillow\'\n-        \'setuptools\',\n+        "setuptools",\n         "six",\n     ],\n     extras_require=dict(\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-02-02T22:51:38+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/b605fe128f8cb97abbc5d3f07ae2a030ad94b65f

Removed unused import

Files changed:
M plone/scale/storage.py

b'diff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex 977693a..07e9c8d 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -1,6 +1,5 @@\n from persistent.dict import PersistentDict\n from plone.scale.interfaces import IImageScaleFactory\n-from six import integer_types\n from uuid import uuid4\n from ZODB.POSException import ConflictError\n from zope.annotation import IAnnotations\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-02-02T22:52:01+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/c21b2a91eaf9b946e21033959fa17cd749995989

Removed dependency on six.

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 9f40ad1..86c82ba 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -55,7 +55,6 @@\n         # \'PIL\',\n         # \'Pillow\'\n         "setuptools",\n-        "six",\n     ],\n     extras_require=dict(\n         test=TESTS_REQUIREMENTS,\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-02-02T22:58:27+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/5d01a47bcb288cfe6167cbacae42a93ff77965b4

Depend on Pillow.

Originally we did not officially depend on it (or PIL) "because not everyone can install it as an egg".
It seems time to grow up here.

Files changed:
A news/44.breaking.3
M setup.py

b'diff --git a/news/44.breaking.3 b/news/44.breaking.3\nnew file mode 100644\nindex 0000000..a4af641\n--- /dev/null\n+++ b/news/44.breaking.3\n@@ -0,0 +1,4 @@\n+Depend on Pillow.\n+Originally we did not officially depend on it (or PIL) "because not everyone can install it as an egg".\n+It seems time to grow up here.\n+[maurits]\ndiff --git a/setup.py b/setup.py\nindex 86c82ba..c018102 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -14,7 +14,7 @@\n     "Persistence",\n ]\n \n-TESTS_REQUIREMENTS = ["Pillow", "plone.testing"]\n+TESTS_REQUIREMENTS = ["plone.testing"]\n \n setup(\n     name="plone.scale",\n@@ -50,10 +50,7 @@\n     zip_safe=False,\n     test_suite="plone.scale",\n     install_requires=[\n-        # We can\'t actually depend on PIL because not everyone can install it\n-        # as an egg.\n-        # \'PIL\',\n-        # \'Pillow\'\n+        "Pillow",\n         "setuptools",\n     ],\n     extras_require=dict(\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-02-02T23:05:00+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/2bc021f9fe9de11ac5f54ac7204e6f0f450dd9e3

Removed try/except ImportErrors.

Files changed:
M plone/scale/scale.py
M plone/scale/storage.py
M plone/scale/tests/test_scale.py

b'diff --git a/plone/scale/scale.py b/plone/scale/scale.py\nindex cbc0aba..0e55eed 100644\n--- a/plone/scale/scale.py\n+++ b/plone/scale/scale.py\n@@ -1,3 +1,5 @@\n+from io import BytesIO as StringIO\n+\n import math\n import PIL.Image\n import PIL.ImageFile\n@@ -5,12 +7,6 @@\n import warnings\n \n \n-try:\n-    from cStringIO import StringIO\n-except ImportError:\n-    from io import BytesIO as StringIO\n-\n-\n def none_as_int(the_int):\n     """For python 3 compatibility, to make int vs. none comparison possible\n     without changing the algorithms below.\ndiff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex 07e9c8d..6e0cbc9 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -1,3 +1,4 @@\n+from collections.abc import MutableMapping\n from persistent.dict import PersistentDict\n from plone.scale.interfaces import IImageScaleFactory\n from uuid import uuid4\n@@ -11,14 +12,6 @@\n import warnings\n \n \n-# BBB From python 3.3 it will work and from 3.9 it will be an error\n-# the fallback is kept for py2 compatibility\n-try:\n-    from collections.abc import MutableMapping\n-except ImportError:\n-    from collections import MutableMapping\n-\n-\n logger = logging.getLogger("plone.scale")\n # Keep old scales around for this amount of milliseconds.\n # This is one day:\ndiff --git a/plone/scale/tests/test_scale.py b/plone/scale/tests/test_scale.py\nindex 7f74cd4..2df62a3 100644\n--- a/plone/scale/tests/test_scale.py\n+++ b/plone/scale/tests/test_scale.py\n@@ -1,3 +1,4 @@\n+from io import BytesIO as StringIO\n from plone.scale.scale import scaleImage\n from plone.scale.scale import scalePILImage\n from plone.scale.tests import TEST_DATA_LOCATION\n@@ -9,12 +10,6 @@\n import warnings\n \n \n-try:\n-    from cStringIO import StringIO\n-except ImportError:\n-    from io import BytesIO as StringIO\n-\n-\n with open(os.path.join(TEST_DATA_LOCATION, "logo.png"), "rb") as fio:\n     PNG = fio.read()\n with open(os.path.join(TEST_DATA_LOCATION, "logo.gif"), "rb") as fio:\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-02-02T23:24:27+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/05a088bdf58e173f41a816f6dad74f5a632655f0

Add tox.ini with mxdev.

Test with GitHub Actions on Plone 5.2 Py + 3.6-3.8 and Plone 6.0 + Py 3.7-3.10.

Files changed:
A .github/workflows/tests.yml
A news/44.feature.1
A requirements-52.txt
A requirements-60.txt
A sources-52.ini
A sources-60.ini
A tox.ini
M .gitignore

b'diff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nnew file mode 100644\nindex 0000000..25cbef5\n--- /dev/null\n+++ b/.github/workflows/tests.yml\n@@ -0,0 +1,43 @@\n+name: tests\n+\n+on:\n+  push:\n+    branches: [ master ]\n+  pull_request:\n+  # Allow to run this workflow manually from the Actions tab\n+  workflow_dispatch:\n+jobs:\n+  build:\n+    strategy:\n+      matrix:\n+        config:\n+        # [Python version, tox env]\n+        - ["3.6",  "plone52-py36"]\n+        - ["3.7",  "plone52-py37"]\n+        - ["3.8",  "plone52-py38"]\n+        - ["3.7",  "plone60-py37"]\n+        - ["3.8",  "plone60-py38"]\n+        - ["3.9",  "plone60-py39"]\n+        - ["3.10", "plone60-py310"]\n+    runs-on: ubuntu-latest\n+    name: ${{ matrix.config[1] }}\n+    steps:\n+    - uses: actions/checkout@v2\n+    - name: Set up Python\n+      uses: actions/setup-python@v2\n+      with:\n+        python-version: ${{ matrix.config[0] }}\n+    - name: Pip cache\n+      uses: actions/cache@v2\n+      with:\n+        path: ~/.cache/pip\n+        key: ${{ runner.os }}-pip-${{ matrix.config[0] }}-${{ hashFiles(\'setup.*\', \'tox.ini\') }}\n+        restore-keys: |\n+          ${{ runner.os }}-pip-${{ matrix.config[0] }}-\n+          ${{ runner.os }}-pip-\n+    - name: Install dependencies\n+      run: |\n+        python -m pip install --upgrade pip\n+        pip install tox\n+    - name: Test\n+      run: tox -e ${{ matrix.config[1] }}\ndiff --git a/.gitignore b/.gitignore\nindex a6667b7..b541ef6 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -6,3 +6,5 @@ include/\n .installed.cfg\n develop-eggs/\n parts/\n+constraints-*-mxdev.txt\n+requirements-*-mxdev.txt\ndiff --git a/news/44.feature.1 b/news/44.feature.1\nnew file mode 100644\nindex 0000000..6d8979c\n--- /dev/null\n+++ b/news/44.feature.1\n@@ -0,0 +1,3 @@\n+Add tox.ini with mxdev.\n+Test with GitHub Actions on Plone 5.2 Py + 3.6-3.8 and Plone 6.0 + Py 3.7-3.10.\n+[maurits]\ndiff --git a/requirements-52.txt b/requirements-52.txt\nnew file mode 100644\nindex 0000000..95d53f8\n--- /dev/null\n+++ b/requirements-52.txt\n@@ -0,0 +1,4 @@\n+-e .[test]\n+zope.testrunner\n+--pre\n+-c https://dist.plone.org/release/5.2-dev/constraints.txt\ndiff --git a/requirements-60.txt b/requirements-60.txt\nnew file mode 100644\nindex 0000000..b7b56cb\n--- /dev/null\n+++ b/requirements-60.txt\n@@ -0,0 +1,4 @@\n+-e .[test]\n+zope.testrunner\n+--pre\n+-c https://dist.plone.org/release/6.0-dev/constraints.txt\ndiff --git a/sources-52.ini b/sources-52.ini\nnew file mode 100644\nindex 0000000..684b971\n--- /dev/null\n+++ b/sources-52.ini\n@@ -0,0 +1,10 @@\n+[settings]\n+# This is a mxdev configuration file\n+#\n+# available options are documented at\n+# https://pypi.org/project/mxdev/\n+\n+requirements-in = requirements-52.txt\n+requirements-out = requirements-52-mxdev.txt\n+constraints-out = constraints-52-mxdev.txt\n+ignores = plone.scale\ndiff --git a/sources-60.ini b/sources-60.ini\nnew file mode 100644\nindex 0000000..2f3ddc3\n--- /dev/null\n+++ b/sources-60.ini\n@@ -0,0 +1,10 @@\n+[settings]\n+# This is a mxdev configuration file\n+#\n+# available options are documented at\n+# https://pypi.org/project/mxdev/\n+\n+requirements-in = requirements-60.txt\n+requirements-out = requirements-60-mxdev.txt\n+constraints-out = constraints-60-mxdev.txt\n+ignores = plone.scale\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..c505c68\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,31 @@\n+[tox]\n+envlist =\n+    plone52-py36,\n+    plone52-py37,\n+    plone52-py38,\n+    plone60-py37,\n+    plone60-py38,\n+    plone60-py39,\n+    plone60-py310,\n+\n+skip_missing_interpreters = False\n+\n+[testenv]\n+usedevelop = False\n+skip_install = true\n+commands =\n+    python -V\n+    pip list\n+    zope-testrunner --test-path={toxinidir} {posargs:-vc}\n+\n+[testenv:plone52-py{36,37,38}]\n+commands_pre =\n+    pip install mxdev\n+    mxdev -c sources-52.ini\n+    pip install --use-deprecated legacy-resolver -rrequirements-52-mxdev.txt\n+\n+[testenv:plone60-py{37,38,39,310}]\n+commands_pre =\n+    pip install mxdev\n+    mxdev -c sources-60.ini\n+    pip install --use-deprecated legacy-resolver -rrequirements-60-mxdev.txt\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-02-02T23:29:11+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/be00eb413d21ba1d28cc0c13d6cedb73028adf65

Removed ``tests`` extra, kept only ``test`` extra and ``storage``.

Swapped packages slightly between those two extras.

For ``storage`` we depend on ``persistent`` and ``ZODB``.

Files changed:
A news/44.breaking.4
M setup.py

b'diff --git a/news/44.breaking.4 b/news/44.breaking.4\nnew file mode 100644\nindex 0000000..a012eb7\n--- /dev/null\n+++ b/news/44.breaking.4\n@@ -0,0 +1,4 @@\n+Removed ``tests`` extra, kept only ``test`` extra and ``storage``.\n+Swapped packages slightly between those two extras.\n+For ``storage`` we depend on ``persistent`` and ``ZODB``.\n+[maurits]\ndiff --git a/setup.py b/setup.py\nindex c018102..3f24087 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -7,14 +7,18 @@\n changes = open("CHANGES.rst").read()\n \n STORAGE_REQUIREMENTS = [\n+    "ZODB",\n     "zope.annotation",\n-    "zope.component",\n-    "zope.configuration",\n     "zope.interface",\n-    "Persistence",\n+    "persistent",\n ]\n \n-TESTS_REQUIREMENTS = ["plone.testing"]\n+# "zope.configuration",\n+TEST_REQUIREMENTS = [\n+    "zope.component",\n+    "zope.configuration",\n+    "plone.testing",\n+]\n \n setup(\n     name="plone.scale",\n@@ -54,8 +58,7 @@\n         "setuptools",\n     ],\n     extras_require=dict(\n-        test=TESTS_REQUIREMENTS,\n         storage=STORAGE_REQUIREMENTS,\n-        tests=STORAGE_REQUIREMENTS + TESTS_REQUIREMENTS,\n+        test=STORAGE_REQUIREMENTS + TEST_REQUIREMENTS,\n     ),\n )\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-02-02T23:32:07+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/6ed0bc343e146dc624640c2f4434255cd1ad0bfb

setup.py: do not replace anything in the readme.

The strings that we tried to replace, are not there.

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 3f24087..aaf9430 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n \n \n version = "3.1.3.dev0"\n-readme = open("README.rst").read().replace(":class:", "").replace(":mod:", "")\n+readme = open("README.rst").read()\n changes = open("CHANGES.rst").read()\n \n STORAGE_REQUIREMENTS = [\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-02-02T23:32:49+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/0c8e236b24f65e3ff1d052aaf178c8bb93f32b89

setup.py: properly close files

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex aaf9430..a272798 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,8 +3,10 @@\n \n \n version = "3.1.3.dev0"\n-readme = open("README.rst").read()\n-changes = open("CHANGES.rst").read()\n+with open("README.rst") as myfile:\n+    readme = myfile.read()\n+with open("CHANGES.rst") as myfile:\n+    changes = myfile.read()\n \n STORAGE_REQUIREMENTS = [\n     "ZODB",\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-02-02T23:38:22+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/3e9ec1a27cdb8ab4f1196bc72ce71c6fd07afb11

Updated classifiers

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex a272798..8c870ab 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -31,19 +31,19 @@\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.1",\n         "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        "Framework :: Zope2",\n         "Framework :: Zope :: 4",\n+        "Framework :: Zope :: 5",\n         "License :: OSI Approved :: BSD License",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.5",\n         "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n     ],\n     keywords="image scaling",\n     author="Plone Foundation",\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-02-02T23:39:16+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/0564a7a18053198c7c56f84f243aac6e434f70da

Removed buildout.cfg

Files changed:
D buildout.cfg

b"diff --git a/buildout.cfg b/buildout.cfg\ndeleted file mode 100644\nindex 3f75e05..0000000\n--- a/buildout.cfg\n+++ /dev/null\n@@ -1,18 +0,0 @@\n-[buildout]\n-parts = test omelette interpreter\n-develop = .\n-\n-[test]\n-recipe = zc.recipe.testrunner\n-defaults = ['-v', '-s', 'plone.scale']\n-eggs = plone.scale [tests]\n-\n-[omelette]\n-recipe = collective.recipe.omelette\n-eggs = ${test:eggs}\n-\n-[interpreter]\n-recipe = zc.recipe.egg\n-eggs = ${test:eggs}\n-interpreter = interpreter\n-\n"

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-02-02T23:39:24+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/1ee0b0b312a57133a3469f3e1cebde7d24adbd2b

check-manifest

Files changed:
M setup.cfg

b'diff --git a/setup.cfg b/setup.cfg\nindex e16e02f..9daf718 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,6 +1,8 @@\n [check-manifest]\n ignore =\n-    *.cfg\n+  requirements-*.txt\n+  sources-*.ini\n+  tox.ini\n \n [isort]\n profile = plone\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-02-02T23:39:50+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/e61aec4c2db7943f231b9c3ad8b110682abb8027

Do not create universal wheel: we are Python 3 only.

Files changed:
M setup.cfg

b'diff --git a/setup.cfg b/setup.cfg\nindex 9daf718..a62eb88 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -8,7 +8,4 @@ ignore =\n profile = plone\n \n [bdist_wheel]\n-universal = 1\n-\n-[zest.releaser]\n-create-wheel = yes\n+universal = 0\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-02-22T22:32:08+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/2f4e96c572eb7197704174aa63699682c0d451ef

Merge pull request #45 from plone/maurits-python3-cleanup

Python3 cleanup + tox + GHA

Files changed:
A .github/workflows/tests.yml
A news/44.breaking.1
A news/44.breaking.2
A news/44.breaking.3
A news/44.breaking.4
A news/44.feature.1
A requirements-52.txt
A requirements-60.txt
A sources-52.ini
A sources-60.ini
A tox.ini
M .gitignore
M MANIFEST.in
M plone/__init__.py
M plone/scale/__init__.py
M plone/scale/interfaces.py
M plone/scale/scale.py
M plone/scale/storage.py
M plone/scale/tests/test_scale.py
M plone/scale/tests/test_storage.py
M setup.cfg
M setup.py
D bootstrap.py
D buildout.cfg
D docs/.static/logo.png
D docs/.static/plone.css
D docs/LICENSE.txt
D docs/Makefile
D docs/conf.py
D docs/index.rst
D docs/narr/scale.rst
D docs/narr/storage.rst

b'diff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nnew file mode 100644\nindex 0000000..25cbef5\n--- /dev/null\n+++ b/.github/workflows/tests.yml\n@@ -0,0 +1,43 @@\n+name: tests\n+\n+on:\n+  push:\n+    branches: [ master ]\n+  pull_request:\n+  # Allow to run this workflow manually from the Actions tab\n+  workflow_dispatch:\n+jobs:\n+  build:\n+    strategy:\n+      matrix:\n+        config:\n+        # [Python version, tox env]\n+        - ["3.6",  "plone52-py36"]\n+        - ["3.7",  "plone52-py37"]\n+        - ["3.8",  "plone52-py38"]\n+        - ["3.7",  "plone60-py37"]\n+        - ["3.8",  "plone60-py38"]\n+        - ["3.9",  "plone60-py39"]\n+        - ["3.10", "plone60-py310"]\n+    runs-on: ubuntu-latest\n+    name: ${{ matrix.config[1] }}\n+    steps:\n+    - uses: actions/checkout@v2\n+    - name: Set up Python\n+      uses: actions/setup-python@v2\n+      with:\n+        python-version: ${{ matrix.config[0] }}\n+    - name: Pip cache\n+      uses: actions/cache@v2\n+      with:\n+        path: ~/.cache/pip\n+        key: ${{ runner.os }}-pip-${{ matrix.config[0] }}-${{ hashFiles(\'setup.*\', \'tox.ini\') }}\n+        restore-keys: |\n+          ${{ runner.os }}-pip-${{ matrix.config[0] }}-\n+          ${{ runner.os }}-pip-\n+    - name: Install dependencies\n+      run: |\n+        python -m pip install --upgrade pip\n+        pip install tox\n+    - name: Test\n+      run: tox -e ${{ matrix.config[1] }}\ndiff --git a/.gitignore b/.gitignore\nindex a6667b7..b541ef6 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -6,3 +6,5 @@ include/\n .installed.cfg\n develop-eggs/\n parts/\n+constraints-*-mxdev.txt\n+requirements-*-mxdev.txt\ndiff --git a/MANIFEST.in b/MANIFEST.in\nindex 647d62f..56fc6b7 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -1,7 +1,6 @@\n include *.rst\n include pyproject.toml\n \n-recursive-include docs *\n recursive-include plone *\n \n global-exclude *pyc\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex a459921..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,210 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-__version__ = \'2015-07-01\'\n-# See zc.buildout\'s changelog if this version is up to date.\n-\n-tmpeggs = tempfile.mkdtemp(prefix=\'bootstrap-\')\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep\n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("--version",\n-                  action="store_true", default=False,\n-                  help=("Return bootstrap.py version."))\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-parser.add_option("--buildout-version",\n-                  help="Use a specific zc.buildout version")\n-parser.add_option("--setuptools-version",\n-                  help="Use a specific setuptools version")\n-parser.add_option("--setuptools-to-dir",\n-                  help=("Allow for re-use of existing directory of "\n-                        "setuptools versions"))\n-\n-options, args = parser.parse_args()\n-if options.version:\n-    print("bootstrap.py version %s" % __version__)\n-    sys.exit(0)\n-\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-if os.path.exists(\'ez_setup.py\'):\n-    exec(open(\'ez_setup.py\').read(), ez)\n-else:\n-    exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions\n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'.\n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            # Strip all site-packages directories from sys.path that\n-            # are not sys.prefix; this is because on Windows\n-            # sys.prefix is a site-package directory.\n-            if sitepackage_path != sys.prefix:\n-                sys.path[:] = [x for x in sys.path\n-                               if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-\n-if options.setuptools_version is not None:\n-    setup_args[\'version\'] = options.setuptools_version\n-if options.setuptools_to_dir is not None:\n-    setup_args[\'to_dir\'] = options.setuptools_to_dir\n-\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-# Fix sys.path here as easy_install.pth added before PYTHONPATH\n-cmd = [sys.executable, \'-c\',\n-       \'import sys; sys.path[0:0] = [%r]; \' % setuptools_path +\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-requirement = \'zc.buildout\'\n-version = options.buildout_version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        try:\n-            return not parsed_version.is_prerelease\n-        except AttributeError:\n-            # Older setuptools\n-            for part in parsed_version:\n-                if (part[:1] == \'*\') and (part not in _final_parts):\n-                    return False\n-            return True\n-\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/buildout.cfg b/buildout.cfg\ndeleted file mode 100644\nindex 22a509a..0000000\n--- a/buildout.cfg\n+++ /dev/null\n@@ -1,33 +0,0 @@\n-[buildout]\n-parts = test sphinx sphinx-html omelette interpreter\n-develop = .\n-\n-[test]\n-recipe = zc.recipe.testrunner\n-defaults = [\'-v\', \'-s\', \'plone.scale\']\n-eggs = plone.scale [tests]\n-\n-[sphinx]\n-recipe = zc.recipe.egg\n-dependent-scripts = true\n-scripts = sphinx-build\n-eggs = plone.scale [sphinx]\n-\n-[sphinx-html]\n-recipe = collective.recipe.template\n-inline =\n-   #!/bin/bash\n-   cd ${buildout:directory}/docs\n-   make html\n-output = ${buildout:bin-directory}/sphinx-html\n-mode = 755\n-\n-[omelette]\n-recipe = collective.recipe.omelette\n-eggs = ${test:eggs}\n-\n-[interpreter]\n-recipe = zc.recipe.egg\n-eggs = ${test:eggs}\n-interpreter = interpreter\n-\ndiff --git a/docs/.static/logo.png b/docs/.static/logo.png\ndeleted file mode 100644\nindex 1242462..0000000\nBinary files a/docs/.static/logo.png and /dev/null differ\ndiff --git a/docs/.static/plone.css b/docs/.static/plone.css\ndeleted file mode 100644\nindex 5a069e3..0000000\n--- a/docs/.static/plone.css\n+++ /dev/null\n@@ -1,76 +0,0 @@\n-@import url(\'default.css\');\n-body {\n-    font: 100% Arial, FreeSans, sans-serif;\n-    background: White;\n-    color: Black;\n-}\n-\n-div.body h1,\n-div.body h2,\n-div.body h3,\n-div.body h4,\n-div.body h5,\n-div.body h6 {\n-    color: Black;\n-    background-color: White;\n-    font-weight: bold;\n-    line-height: 125%;\n-    border: none;\n-    font: "Helvetica Neue",Arial,FreeSans,sans-serif;\n-}\n-\n-\n-div.document {\n-    background-color: White;\n-}\n-\n-div.sphinxsidebar {\n-    background-color: #f6f6f6;\n-    border: 1px solid #eeeeee;\n-}\n-\n-div.sphinxsidebar h3 {\n-    margin-left: -11px;\n-    margin-right: -6px;\n-    line-height: 1.5em;\n-}\n-\n-div.sphinxsidebar h3,\n-div.sphinxsidebar h3 a {\n-    background-color: #76ad17;\n-    color: White;\n-    padding: 0 0.5em;\n-}\n-\n-div.sphinxsidebar h3 a:hover {\n-    color: White;\n-}\n-\n-div.sphinxsidebar h4,\n-div.sphinxsidebar h4 a {\n-    color: #205c90;\n-}\n-\n-div.sphinxsidebar a,\n-div.sphinxsidebar p {\n-    color: #205c90;\n-}\n-\n-div.related {\n-    background-color: #329fd7;\n-}\n-\n-div.related a:hover {\n-    color: Black;\n-}\n-\n-a:link, a:visited {\n-    color: #205c90;\n-    text-decoration: none;\n-}\n-\n-a:link:hover,\n-a:visited:hover {\n-    color: #75ad0a;\n-}\n-\ndiff --git a/docs/LICENSE.txt b/docs/LICENSE.txt\ndeleted file mode 100644\nindex 266c989..0000000\n--- a/docs/LICENSE.txt\n+++ /dev/null\n@@ -1,27 +0,0 @@\n-plone.scale is copyright Plone Foundation\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions\n-are met:\n-1. Redistributions of source code must retain the above copyright\n-   notice, this list of conditions and the following disclaimer.\n-2. Redistributions in binary form must reproduce the above copyright\n-   notice, this list of conditions and the following disclaimer in the\n-   documentation and/or other materials provided with the distribution.\n-3. Neither the name of the author nor the names of its contributors\n-   may be used to endorse or promote products derived from this software\n-   without specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS\'\' AND\n-ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n-ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE\n-FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n-DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n-OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n-HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n-LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n-OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n-SUCH DAMAGE.\n-\ndiff --git a/docs/Makefile b/docs/Makefile\ndeleted file mode 100644\nindex b46d97b..0000000\n--- a/docs/Makefile\n+++ /dev/null\n@@ -1,70 +0,0 @@\n-# Makefile for Sphinx documentation\n-#\n-\n-# You can set these variables from the command line.\n-SPHINXOPTS    =\n-SPHINXBUILD   = ../bin/sphinx-build\n-PAPER         = a4\n-\n-# Internal variables.\n-PAPEROPT_a4     = -D latex_paper_size=a4\n-PAPEROPT_letter = -D latex_paper_size=letter\n-ALLSPHINXOPTS   = -d .build/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .\n-\n-.PHONY: help clean html web pickle htmlhelp latex changes linkcheck\n-\n-help:\n-\t@echo "Please use \\`make <target>\' where <target> is one of"\n-\t@echo "  html      to make standalone HTML files"\n-\t@echo "  pickle    to make pickle files (usable by e.g. sphinx-web)"\n-\t@echo "  htmlhelp  to make HTML files and a HTML help project"\n-\t@echo "  latex     to make LaTeX files, you can set PAPER=a4 or PAPER=letter"\n-\t@echo "  changes   to make an overview over all changed/added/deprecated items"\n-\t@echo "  linkcheck to check all external links for integrity"\n-\n-clean:\n-\t-rm -rf .build/*\n-\n-html:\n-\tmkdir -p .build/html .build/doctrees\n-\t$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) .build/html\n-\t@echo\n-\t@echo "Build finished. The HTML pages are in .build/html."\n-\n-pickle:\n-\tmkdir -p .build/pickle .build/doctrees\n-\t$(SPHINXBUILD) -b pickle $(ALLSPHINXOPTS) .build/pickle\n-\t@echo\n-\t@echo "Build finished; now you can process the pickle files or run"\n-\t@echo "  sphinx-web .build/pickle"\n-\t@echo "to start the sphinx-web server."\n-\n-web: pickle\n-\n-htmlhelp:\n-\tmkdir -p .build/htmlhelp .build/doctrees\n-\t$(SPHINXBUILD) -b htmlhelp $(ALLSPHINXOPTS) .build/htmlhelp\n-\t@echo\n-\t@echo "Build finished; now you can run HTML Help Workshop with the" \\\n-\t      ".hhp project file in .build/htmlhelp."\n-\n-latex:\n-\tmkdir -p .build/latex .build/doctrees\n-\t$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) .build/latex\n-\t@echo\n-\t@echo "Build finished; the LaTeX files are in .build/latex."\n-\t@echo "Run \\`make all-pdf\' or \\`make all-ps\' in that directory to" \\\n-\t      "run these through (pdf)latex."\n-\n-changes:\n-\tmkdir -p .build/changes .build/doctrees\n-\t$(SPHINXBUILD) -b changes $(ALLSPHINXOPTS) .build/changes\n-\t@echo\n-\t@echo "The overview file is in .build/changes."\n-\n-linkcheck:\n-\tmkdir -p .build/linkcheck .build/doctrees\n-\t$(SPHINXBUILD) -b linkcheck $(ALLSPHINXOPTS) .build/linkcheck\n-\t@echo\n-\t@echo "Link check complete; look for any errors in the above output " \\\n-\t      "or in .build/linkcheck/output.txt."\ndiff --git a/docs/conf.py b/docs/conf.py\ndeleted file mode 100644\nindex ef6fb99..0000000\n--- a/docs/conf.py\n+++ /dev/null\n@@ -1,191 +0,0 @@\n-# -*- coding: utf-8 -*-\n-#\n-# repoze.atemplate documentation build configuration file\n-#\n-# This file is execfile()d with the current directory set to its containing\n-# dir.\n-#\n-# The contents of this file are pickled, so don\'t put values in the\n-# namespace that aren\'t pickleable (module imports are okay, they\'re\n-# removed automatically).\n-#\n-# All configuration values have a default value; values that are commented\n-# out serve to show the default value.\n-\n-# If your extensions are in another directory, add it here. If the\n-# directory is relative to the documentation root, use os.path.abspath to\n-# make it absolute, like shown here.\n-#sys.path.append(os.path.abspath(\'some/directory\'))\n-\n-\n-# General configuration\n-# ---------------------\n-\n-# Add any Sphinx extension module names here, as strings. They can be\n-# extensions coming with Sphinx (named \'sphinx.ext.*\') or your custom ones.\n-extensions = [ \'sphinx.ext.autodoc\', \'sphinx.ext.todo\',\n-        \'repoze.sphinx.autointerface\' ]\n-\n-# Add any paths that contain templates here, relative to this directory.\n-templates_path = [\'.templates\']\n-\n-# The suffix of source filenames.\n-source_suffix = \'.rst\'\n-\n-# The master toctree document.\n-master_doc = \'index\'\n-\n-# General substitutions.\n-project = \'plone.scale\'\n-copyright = \'2009, Plone Foundation\'\n-\n-# The default replacements for |version| and |release|, also used in various\n-# other places throughout the built documents.\n-#\n-# The short X.Y version.\n-version = \'1.0\'\n-# The full version, including alpha/beta/rc tags.\n-release = \'1.0\'\n-\n-# There are two options for replacing |today|: either, you set today to\n-# some non-false value, then it is used:\n-#today = \'\'\n-# Else, today_fmt is used as the format for a strftime call.\n-today_fmt = \'%B %d, %Y\'\n-\n-# List of documents that shouldn\'t be included in the build.\n-#unused_docs = []\n-\n-# List of directories, relative to source directories, that shouldn\'t be\n-# searched for source files.\n-#exclude_dirs = []\n-\n-# The reST default role (used for this markup: `text`) to use for all\n-# documents.\n-#default_role = None\n-\n-# If true, \'()\' will be appended to :func: etc. cross-reference text.\n-#add_function_parentheses = True\n-\n-# If true, the current module name will be prepended to all description\n-# unit titles (such as .. function::).\n-#add_module_names = True\n-\n-# If true, sectionauthor and moduleauthor directives will be shown in the\n-# output. They are ignored by default.\n-#show_authors = False\n-\n-# The name of the Pygments (syntax highlighting) style to use.\n-pygments_style = \'sphinx\'\n-\n-\n-# Options for HTML output\n-# -----------------------\n-\n-# The style sheet to use for HTML and HTML Help pages. A file of that name\n-# must exist either in Sphinx\' static/ path, or in one of the custom paths\n-# given in html_static_path.\n-html_style = \'plone.css\'\n-\n-# The name for this set of Sphinx documents.  If None, it defaults to\n-# "<project> v<release> documentation".\n-#html_title = None\n-\n-# A shorter title for the navigation bar.  Default is the same as\n-# html_title.\n-#html_short_title = None\n-\n-# The name of an image file (within the static path) to place at the top of\n-# the sidebar.\n-html_logo = \'.static/logo.png\'\n-\n-# The name of an image file (within the static path) to use as favicon of\n-# the docs.  This file should be a Windows icon file (.ico) being 16x16 or\n-# 32x32 pixels large.\n-#html_favicon = None\n-\n-# Add any paths that contain custom static files (such as style sheets)\n-# here, relative to this directory. They are copied after the builtin\n-# static files, so a file named "default.css" will overwrite the builtin\n-# "default.css".\n-html_static_path = [\'.static\']\n-\n-# If not \'\', a \'Last updated on:\' timestamp is inserted at every page\n-# bottom, using the given strftime format.\n-html_last_updated_fmt = \'%b %d, %Y\'\n-\n-# If true, SmartyPants will be used to convert quotes and dashes to\n-# typographically correct entities.\n-#html_use_smartypants = True\n-\n-# Custom sidebar templates, maps document names to template names.\n-#html_sidebars = {}\n-\n-# Additional templates that should be rendered to pages, maps page names to\n-# template names.\n-#html_additional_pages = {}\n-\n-# If false, no module index is generated.\n-#html_use_modindex = True\n-\n-# If false, no index is generated.\n-#html_use_index = True\n-\n-# If true, the index is split into individual pages for each letter.\n-#html_split_index = False\n-\n-# If true, the reST sources are included in the HTML build as\n-# _sources/<name>.\n-#html_copy_source = True\n-\n-# If true, an OpenSearch description file will be output, and all pages\n-# will contain a <link> tag referring to it.  The value of this option must\n-# be the base URL from which the finished HTML is served.\n-#html_use_opensearch = \'\'\n-\n-# If nonempty, this is the file name suffix for HTML files (e.g. ".xhtml").\n-#html_file_suffix = \'\'\n-\n-# Output file base name for HTML help builder.\n-htmlhelp_basename = \'plone-scale\'\n-\n-\n-# Options for LaTeX output\n-# ------------------------\n-\n-# The paper size (\'letter\' or \'a4\').\n-#latex_paper_size = \'a4\'\n-\n-# The font size (\'10pt\', \'11pt\' or \'12pt\').\n-#latex_font_size = \'10pt\'\n-\n-# Grouping the document tree into LaTeX files. List of tuples\n-# (source start file, target name, title,\n-#  author, document class [howto/manual]).\n-latex_documents = [\n-  (\'index\', \'plone-scale.tex\', \'plone.scale Documentation\',\n-   \'Plone Foundation\', \'manual\'),\n-]\n-\n-# The name of an image file (relative to this directory) to place at the\n-# top of the title page.\n-latex_logo = \'.static/logo.png\'\n-\n-# For "manual" documents, if this is true, then toplevel headings are\n-# parts, not chapters.\n-#latex_use_parts = False\n-\n-# Additional stuff for the LaTeX preamble.\n-#latex_preamble = \'\'\n-\n-# Documents to append as an appendix to all manuals.\n-#latex_appendices = []\n-\n-# If false, no module index is generated.\n-#latex_use_modindex = True\n-\n-\n-# Options for extras\n-# ------------------\n-todo_include_todos = True\n-\ndiff --git a/docs/index.rst b/docs/index.rst\ndeleted file mode 100644\nindex a9ce821..0000000\n--- a/docs/index.rst\n+++ /dev/null\n@@ -1,105 +0,0 @@\n-.. _index:\n-\n-***************************************************************\n-:mod:`plone.scale` -- Image scaling logic\n-***************************************************************\n-\n-:Author: Simplon / Wichert Akkerman\n-:Version: |version|\n-\n-.. module:: plone.scale\n-  :synopsis: Plone image scaling framework\n-\n-:mod:`plone.scale` contains basic image scaling logic for use in Zope\n-environments. It supports Zope 2, grok and other systems build on using the\n-Zope ToolKit (ZTK).\n-\n-Several design goals were used when writing this package:\n-\n-- image scaling to any width, height, width&height should be supported\n-  using both up-scaling and down-scaling. Scaling parameters should never\n-  be fixed in code. This allows designers to use any image scale they want\n-  without having to modify python code.\n-\n-- the result of scaling will be an image along with its new size, not a\n-  HTML or XHTML tag. We already have excellent tools to generate tags in\n-  the form of Zope Pagetemplates, Genshi and other template languages that\n-  are much better suited for this purpose.\n-\n-In addition several implementation goals were defined:\n-\n-- image scaling must happen on demand instead of up-front. This reduces\n-  initial save time and prevents unnecessary scalings from being generated.\n-\n-- image scaling parameters should not be part of the generated URL. Since\n-  the number of parameters can change and new parameters may be added in\n-  the future this would create overly complex URLs and URL parsing.\n-\n-- no HTML rewriting (such as done by `repoze.bitblt`_) should be required.\n-  Rewriting has proven to have too many negative side effects such as\n-  not handling unclean markup correctly, lossing DOCTYPEs or switching between\n-  HTML and XHTML, all of which can have very undesirable effects. In addition\n-  it will have a performance penalty.\n-\n-- it should be possibly to develop an external storage system which stores\n-  scaled images externally and returns a URL which bypasses the application\n-  server. This should be configurable via just a filesystem path & base\n-  URL.\n-\n-- minimum number of external dependencies, allowing this package to be\n-  used in many environments.\n-\n-- testable without requiring zope.testing. Running ``setup.py test`` should\n-  be sufficient.\n-\n-- URLs for scaled images should have an extension which reflects their\n-  MIME type. This is facilitates cache (and other front-end services)\n-  configuration.\n-\n-\n-.. _repoze.bitblt: http://pypi.python.org/pypi/repoze.bitblt\n-\n-\n-Usage\n-=====\n-\n-ATTENTION: Long time outdated information follows.\n-\n-The most common way to use :mod:`plone.scale` is from a HTML template.\n-In TAL syntax a typical usage looks like this::\n-\n-  <img tal:define="scales context/@@image-scaling;\n-                   thumbnail python:scales.scale(\'logo\', width=64, height=64)"\n-       tal:attributes="src thumbnail/url;\n-                       width thumbnail/width;\n-                       height thumbnail/height" />\n-\n-This generates a thumbnail of an image field called *logo* with a maximum size\n-of 64x64 pixels. The dimensions of the resulting image (which might not be\n-exactly 64x64) are set as attributes on the ``img`` tag to speed up browser\n-rendering.\n-\n-If you prefer Genshi syntax and have the :class:`IImageScaleStorage` interface\n-in scope the syntax looks like this::\n-\n-  <img py:with="thumbnail=IImageScaleStorage(context).scale(\'logo\', width=64, heigh=64)"\n-       py:attributes="dict(src=thumbnail.url, width=thumbnail.width, height=thumbnail.height" />\n-\n-Contents\n-==============\n-\n-.. toctree::\n-  :maxdepth: 2\n-\n-  narr/scale\n-  narr/storage\n-  changes\n-\n-\n-\n-Indices and tables\n-------------------\n-\n-* :ref:`genindex`\n-* :ref:`modindex`\n-* :ref:`search`\ndiff --git a/docs/narr/scale.rst b/docs/narr/scale.rst\ndeleted file mode 100644\nindex 14ff427..0000000\n--- a/docs/narr/scale.rst\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-Scaling\n-=======\n-\n-.. module:: plone.scale.scale\n-   :synopsis: Image scaling routines\n-\n-This module contains functions to scale images in particular ways. The\n-functions operate on raw image data and have no Zope dependencies.\n-\n-Functions\n----------\n-\n-.. autofunction:: scaleImage\n-\ndiff --git a/docs/narr/storage.rst b/docs/narr/storage.rst\ndeleted file mode 100644\nindex 75213b1..0000000\n--- a/docs/narr/storage.rst\n+++ /dev/null\n@@ -1,30 +0,0 @@\n-Storage\n-=======\n-\n-.. module:: plone.scale.storage\n-   :synopsis: Storage and retrieval of scaled images\n-\n-In Zope environments there are many possible types of objects which\n-can have images, and just as many ways to store an image. In order to\n-handle all of these two types of adapters are used: an :class:`IImageData`\n-adapter which can retrieve the data from an image field and an\n-:class:`IImageScaleStorage` adapter which manages generation and retrieval\n-of scaled images of fields on an object.\n-\n-Scales can be retrieved using either their scaling parameters or via an\n-identification code generated by the storage.\n-\n-\n-Interfaces\n------------\n-\n-.. autointerface:: IImageScaleStorage\n-   :members:\n-\n-\n-Classes\n---------\n-\n-.. autoclass:: AnnotationStorage\n-   :members: scale\n-\ndiff --git a/news/44.breaking.1 b/news/44.breaking.1\nnew file mode 100644\nindex 0000000..2ba180d\n--- /dev/null\n+++ b/news/44.breaking.1\n@@ -0,0 +1,3 @@\n+Removed Python 2 support.  Only Python 3.6+ supported now.\n+Still works on Plone 5.2.\n+[maurits]\ndiff --git a/news/44.breaking.2 b/news/44.breaking.2\nnew file mode 100644\nindex 0000000..7ba8dfa\n--- /dev/null\n+++ b/news/44.breaking.2\n@@ -0,0 +1,3 @@\n+Removed docs directory and sphinx extra.\n+The docs were last updated in 2010, and the maybe still relevant parts already copied to the readme.\n+[maurits]\ndiff --git a/news/44.breaking.3 b/news/44.breaking.3\nnew file mode 100644\nindex 0000000..a4af641\n--- /dev/null\n+++ b/news/44.breaking.3\n@@ -0,0 +1,4 @@\n+Depend on Pillow.\n+Originally we did not officially depend on it (or PIL) "because not everyone can install it as an egg".\n+It seems time to grow up here.\n+[maurits]\ndiff --git a/news/44.breaking.4 b/news/44.breaking.4\nnew file mode 100644\nindex 0000000..a012eb7\n--- /dev/null\n+++ b/news/44.breaking.4\n@@ -0,0 +1,4 @@\n+Removed ``tests`` extra, kept only ``test`` extra and ``storage``.\n+Swapped packages slightly between those two extras.\n+For ``storage`` we depend on ``persistent`` and ``ZODB``.\n+[maurits]\ndiff --git a/news/44.feature.1 b/news/44.feature.1\nnew file mode 100644\nindex 0000000..6d8979c\n--- /dev/null\n+++ b/news/44.feature.1\n@@ -0,0 +1,3 @@\n+Add tox.ini with mxdev.\n+Test with GitHub Actions on Plone 5.2 Py + 3.6-3.8 and Plone 6.0 + Py 3.7-3.10.\n+[maurits]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad10..05f0beb 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,6 +1,7 @@\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/scale/__init__.py b/plone/scale/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/scale/__init__.py\n+++ b/plone/scale/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/scale/interfaces.py b/plone/scale/interfaces.py\nindex f68aa2c..13bcf66 100644\n--- a/plone/scale/interfaces.py\n+++ b/plone/scale/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-s\n from zope.interface import Interface\n \n \n@@ -15,12 +14,11 @@ class IScaledImageQuality(Interface):\n \n \n class IImageScaleFactory(Interface):\n-    """Creates a scale\n-    """\n+    """Creates a scale"""\n \n     def _call__(\n         fieldname=None,\n-        direction=\'thumbnail\',\n+        direction="thumbnail",\n         height=None,\n         width=None,\n         scale=None,\ndiff --git a/plone/scale/scale.py b/plone/scale/scale.py\nindex 16cb745..0e55eed 100644\n--- a/plone/scale/scale.py\n+++ b/plone/scale/scale.py\n@@ -1,17 +1,12 @@\n-# -*- coding: utf-8 -*-\n+from io import BytesIO as StringIO\n+\n+import math\n import PIL.Image\n import PIL.ImageFile\n-import math\n import sys\n import warnings\n \n \n-try:\n-    from cStringIO import StringIO\n-except ImportError:\n-    from io import BytesIO as StringIO\n-\n-\n def none_as_int(the_int):\n     """For python 3 compatibility, to make int vs. none comparison possible\n     without changing the algorithms below.\n@@ -30,8 +25,15 @@ def none_as_int(the_int):\n MAX_PIXELS = 8192 * 8192\n \n \n-def scaleImage(image, width=None, height=None, mode=\'contain\',\n-               quality=88, result=None, direction=None):\n+def scaleImage(\n+    image,\n+    width=None,\n+    height=None,\n+    mode="contain",\n+    quality=88,\n+    result=None,\n+    direction=None,\n+):\n     """Scale the given image data to another size and return the result\n     as a string or optionally write in to the file-like `result` object.\n \n@@ -58,35 +60,35 @@ def scaleImage(image, width=None, height=None, mode=\'contain\',\n     # When we create a new image during scaling we loose the format\n     # information, so remember it here.\n     format_ = image.format\n-    if format_ not in (\'PNG\', \'GIF\'):\n+    if format_ not in ("PNG", "GIF"):\n         # Always generate JPEG, except if format is PNG or GIF.\n-        format_ = \'JPEG\'\n-    elif format_ == \'GIF\':\n+        format_ = "JPEG"\n+    elif format_ == "GIF":\n         # GIF scaled looks better if we have 8-bit alpha and no palette\n-        format_ = \'PNG\'\n+        format_ = "PNG"\n \n-    icc_profile = image.info.get(\'icc_profile\')\n+    icc_profile = image.info.get("icc_profile")\n     image = scalePILImage(image, width, height, mode, direction=direction)\n \n     # convert to simpler mode if possible\n     colors = image.getcolors(maxcolors=256)\n-    if image.mode not in (\'P\', \'L\') and colors:\n-        if format_ == \'JPEG\':\n+    if image.mode not in ("P", "L") and colors:\n+        if format_ == "JPEG":\n             # check if it\'s all grey\n             if all(rgb[0] == rgb[1] == rgb[2] for c, rgb in colors):\n-                image = image.convert(\'L\')\n-        elif format_ == \'PNG\':\n-            image = image.convert(\'P\')\n+                image = image.convert("L")\n+        elif format_ == "PNG":\n+            image = image.convert("P")\n \n-    if image.mode == \'RGBA\' and format_ == \'JPEG\':\n+    if image.mode == "RGBA" and format_ == "JPEG":\n         extrema = dict(zip(image.getbands(), image.getextrema()))\n-        if extrema.get(\'A\') == (255, 255):\n+        if extrema.get("A") == (255, 255):\n             # no alpha used, just change the mode, which causes the alpha band\n             # to be dropped on save\n             image.mode = "RGB"\n         else:\n             # switch to PNG, which supports alpha\n-            format_ = \'PNG\'\n+            format_ = "PNG"\n \n     new_result = False\n \n@@ -100,7 +102,7 @@ def scaleImage(image, width=None, height=None, mode=\'contain\',\n         quality=quality,\n         optimize=True,\n         progressive=True,\n-        icc_profile=icc_profile\n+        icc_profile=icc_profile,\n     )\n \n     if new_result:\n@@ -119,20 +121,18 @@ def _scale_thumbnail(image, width=None, height=None):\n     than the given target width or height. No cropping!\n     """\n     dimensions = _calculate_all_dimensions(\n-        image.size[0], image.size[1],\n-        width, height, \'scale\')\n+        image.size[0], image.size[1], width, height, "scale"\n+    )\n \n     if (dimensions.target_width * dimensions.target_height) > MAX_PIXELS:\n         # The new image would be excessively large and eat up all memory while\n         # scaling, so return the potentially pre cropped image\n         return image\n \n-    image.draft(\n-        image.mode,\n-        (dimensions.target_width, dimensions.target_height))\n+    image.draft(image.mode, (dimensions.target_width, dimensions.target_height))\n     image = image.resize(\n-        (dimensions.target_width, dimensions.target_height),\n-        PIL.Image.ANTIALIAS)\n+        (dimensions.target_width, dimensions.target_height), PIL.Image.ANTIALIAS\n+    )\n     return image\n \n \n@@ -140,7 +140,8 @@ def get_scale_mode(mode, direction):\n     if direction is not None:\n         warnings.warn(\n             "the \'direction\' option is deprecated, use \'mode\' instead",\n-            DeprecationWarning)\n+            DeprecationWarning,\n+        )\n         mode = direction\n \n     if mode in ("scale-crop-to-fit", "down"):\n@@ -153,12 +154,14 @@ def get_scale_mode(mode, direction):\n     return mode\n \n \n-class ScaledDimensions(object):\n+class ScaledDimensions:\n     pass\n \n \n-def _calculate_all_dimensions(original_width, original_height, width, height, mode=\'contain\'):\n-    """ Calculate all dimensions we need for scaling.\n+def _calculate_all_dimensions(\n+    original_width, original_height, width, height, mode="contain"\n+):\n+    """Calculate all dimensions we need for scaling.\n \n     final_width and final_height are the dimensions of the resulting image and\n     are always present.\n@@ -168,12 +171,12 @@ def _calculate_all_dimensions(original_width, original_height, width, height, mo\n     if width is None and height is None:\n         raise ValueError("Either width or height need to be given.")\n \n-    if mode not in (\'contain\', \'cover\', \'scale\'):\n+    if mode not in ("contain", "cover", "scale"):\n         raise ValueError("Unknown scale mode \'%s\'" % mode)\n \n     dimensions = ScaledDimensions()\n \n-    if mode == \'scale\':\n+    if mode == "scale":\n         # first store original size, as it is possible that we won\'t scale at all\n         dimensions.final_width = original_width\n         dimensions.final_height = original_height\n@@ -211,9 +214,9 @@ def _calculate_all_dimensions(original_width, original_height, width, height, mo\n     # Determine scale factors needed\n     factor_height = factor_width = None\n     if height is not None:\n-        factor_height = (float(height) / float(original_height))\n+        factor_height = float(height) / float(original_height)\n     if width is not None:\n-        factor_width = (float(width) / float(original_width))\n+        factor_width = float(width) / float(original_width)\n \n     dimensions.factor_width = factor_width\n     dimensions.factor_height = factor_height\n@@ -226,22 +229,22 @@ def _calculate_all_dimensions(original_width, original_height, width, height, mo\n \n     # figure out which axis to scale. One of the factors can still be None!\n     use_height = none_as_int(factor_width) > none_as_int(factor_height)\n-    if mode == \'cover\':  # for \'cover\': invert\n+    if mode == "cover":  # for \'cover\': invert\n         use_height = not use_height\n \n     # keep aspect ratio\n-    if (height is None or (use_height and width is not None)):\n+    if height is None or (use_height and width is not None):\n         target_width = width\n         target_height = int(round(original_height * factor_width))\n \n-    if (width is None or (height is not None and not use_height)):\n+    if width is None or (height is not None and not use_height):\n         target_width = int(round(original_width * factor_height))\n         target_height = height\n \n     # determine whether we need to crop before scaling\n-    pre_scale_crop = (\n-        (width is not None and target_width > width) or\n-        (height is not None and target_height > height))\n+    pre_scale_crop = (width is not None and target_width > width) or (\n+        height is not None and target_height > height\n+    )\n     dimensions.pre_scale_crop = pre_scale_crop\n \n     if pre_scale_crop:\n@@ -249,20 +252,20 @@ def _calculate_all_dimensions(original_width, original_height, width, height, mo\n         if use_height:\n             left = 0\n             right = original_width\n-            top = int(math.floor(\n-                ((target_height - height) / 2.0) / factor_width))\n-            bottom = int(math.ceil(\n-                (((target_height - height) / 2.0) + height) / factor_width))\n+            top = int(math.floor(((target_height - height) / 2.0) / factor_width))\n+            bottom = int(\n+                math.ceil((((target_height - height) / 2.0) + height) / factor_width)\n+            )\n             pre_scale_crop_height = bottom - top\n             # set new height in case we abort\n             dimensions.final_height = pre_scale_crop_height\n             # calculate new scale target_height from cropped height\n             target_height = int(round(pre_scale_crop_height * factor_width))\n         else:\n-            left = int(math.floor(\n-                ((target_width - width) / 2.0) / factor_height))\n-            right = int(math.ceil(\n-                (((target_width - width) / 2.0) + width) / factor_height))\n+            left = int(math.floor(((target_width - width) / 2.0) / factor_height))\n+            right = int(\n+                math.ceil((((target_width - width) / 2.0) + width) / factor_height)\n+            )\n             top = 0\n             bottom = original_height\n             pre_scale_crop_width = right - left\n@@ -284,9 +287,9 @@ def _calculate_all_dimensions(original_width, original_height, width, height, mo\n     dimensions.final_height = target_height\n \n     # determine whether we have to crop after scaling due to rounding\n-    post_scale_crop = (\n-        (width is not None and target_width > width) or\n-        (height is not None and target_height > height))\n+    post_scale_crop = (width is not None and target_width > width) or (\n+        height is not None and target_height > height\n+    )\n     dimensions.post_scale_crop = post_scale_crop\n \n     if post_scale_crop:\n@@ -307,17 +310,19 @@ def _calculate_all_dimensions(original_width, original_height, width, height, mo\n     return dimensions\n \n \n-def calculate_scaled_dimensions(original_width, original_height, width, height, mode=\'contain\'):\n-    """ Calculate the scaled image dimensions from the originals using the\n-    same logic as scalePILImage """\n+def calculate_scaled_dimensions(\n+    original_width, original_height, width, height, mode="contain"\n+):\n+    """Calculate the scaled image dimensions from the originals using the\n+    same logic as scalePILImage"""\n     dimensions = _calculate_all_dimensions(\n-        original_width, original_height,\n-        width, height, mode)\n+        original_width, original_height, width, height, mode\n+    )\n \n     return (dimensions.final_width, dimensions.final_height)\n \n \n-def scalePILImage(image, width=None, height=None, mode=\'contain\', direction=None):\n+def scalePILImage(image, width=None, height=None, mode="contain", direction=None):\n     """Scale a PIL image to another size.\n \n     This is all about scaling for the display in a web browser.\n@@ -376,24 +381,24 @@ def scalePILImage(image, width=None, height=None, mode=\'contain\', direction=None\n         image = image.convert("RGB")\n \n     # for scale we\'re done:\n-    if mode == \'scale\':\n+    if mode == "scale":\n         return _scale_thumbnail(image, width, height)\n \n     dimensions = _calculate_all_dimensions(\n-        image.size[0], image.size[1],\n-        width, height, mode)\n+        image.size[0], image.size[1], width, height, mode\n+    )\n \n     if dimensions.factor_height == dimensions.factor_width:\n         # The original already has the right aspect ratio, so we only need\n         # to scale.\n-        if mode == \'contain\':\n+        if mode == "contain":\n             image.thumbnail(\n-                (dimensions.final_width, dimensions.final_height),\n-                PIL.Image.ANTIALIAS)\n+                (dimensions.final_width, dimensions.final_height), PIL.Image.ANTIALIAS\n+            )\n             return image\n         return image.resize(\n-            (dimensions.final_width, dimensions.final_height),\n-            PIL.Image.ANTIALIAS)\n+            (dimensions.final_width, dimensions.final_height), PIL.Image.ANTIALIAS\n+        )\n \n     if dimensions.pre_scale_crop:\n         # crop image before scaling to avoid excessive memory use\n@@ -405,12 +410,10 @@ def scalePILImage(image, width=None, height=None, mode=\'contain\', direction=None\n         # scaling, so return the potentially pre cropped image\n         return image\n \n-    image.draft(\n-        image.mode,\n-        (dimensions.target_width, dimensions.target_height))\n+    image.draft(image.mode, (dimensions.target_width, dimensions.target_height))\n     image = image.resize(\n-        (dimensions.target_width, dimensions.target_height),\n-        PIL.Image.ANTIALIAS)\n+        (dimensions.target_width, dimensions.target_height), PIL.Image.ANTIALIAS\n+    )\n \n     if dimensions.post_scale_crop:\n         # crop off remains due to rounding before scaling\ndiff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex 85436c1..6e0cbc9 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -1,7 +1,6 @@\n-# -*- coding: utf-8 -*-\n+from collections.abc import MutableMapping\n from persistent.dict import PersistentDict\n from plone.scale.interfaces import IImageScaleFactory\n-from six import integer_types\n from uuid import uuid4\n from ZODB.POSException import ConflictError\n from zope.annotation import IAnnotations\n@@ -12,81 +11,73 @@\n import pprint\n import warnings\n \n-# BBB From python 3.3 it will work and from 3.9 it will be an error\n-# the fallback is kept for py2 compatibility\n-try:\n-    from collections.abc import MutableMapping\n-except ImportError:\n-    from collections import MutableMapping\n \n-\n-logger = logging.getLogger(\'plone.scale\')\n+logger = logging.getLogger("plone.scale")\n # Keep old scales around for this amount of milliseconds.\n # This is one day:\n KEEP_SCALE_MILLIS = 24 * 60 * 60 * 1000\n \n # Number types are float and int, and on Python 2 also long.\n number_types = [float]\n-number_types.extend(integer_types)\n+number_types.extend((int,))\n number_types = tuple(number_types)\n \n \n class IImageScaleStorage(Interface):\n-    """ This is an adapter for image content which can store, retrieve and\n-        generate image scale data. It provides a dictionary interface to\n-        existing image scales using the scale id as key. To find or create a\n-        scale based on its scaling parameters use the :meth:`scale` method. """\n+    """This is an adapter for image content which can store, retrieve and\n+    generate image scale data. It provides a dictionary interface to\n+    existing image scales using the scale id as key. To find or create a\n+    scale based on its scaling parameters use the :meth:`scale` method."""\n \n     def __init__(context, modified=None):\n-        """ Adapt the given context item and optionally provide a callable\n-            to return a representation of the last modification date, which\n-            can be used to invalidate stored scale data on update. """\n+        """Adapt the given context item and optionally provide a callable\n+        to return a representation of the last modification date, which\n+        can be used to invalidate stored scale data on update."""\n \n     def scale(factory=None, **parameters):\n-        """ Find image scale data for the given parameters or create it if\n-            a factory was provided.  The parameters will be passed back to\n-            the factory method, which is expected to return a tuple\n-            containing a representation of the actual image scale data (i.e.\n-            a string or file-like object) as well as the image\'s format and\n-            dimensions.  For convenience, this happens to match the return\n-            value of `scaleImage`, but makes it possible to use different\n-            storages, i.e. ZODB blobs """\n+        """Find image scale data for the given parameters or create it if\n+        a factory was provided.  The parameters will be passed back to\n+        the factory method, which is expected to return a tuple\n+        containing a representation of the actual image scale data (i.e.\n+        a string or file-like object) as well as the image\'s format and\n+        dimensions.  For convenience, this happens to match the return\n+        value of `scaleImage`, but makes it possible to use different\n+        storages, i.e. ZODB blobs"""\n \n     def __getitem__(uid):\n-        """ Find image scale data based on its uid. """\n+        """Find image scale data based on its uid."""\n \n \n class ScalesDict(PersistentDict):\n-\n     def raise_conflict(self, saved, new):\n-        logger.info(\'Conflict\')\n-        logger.debug(\'saved\\n\' + pprint.pformat(saved))\n-        logger.debug(\'new\\n\' + pprint.pformat(new))\n+        logger.info("Conflict")\n+        logger.debug("saved\\n" + pprint.pformat(saved))\n+        logger.debug("new\\n" + pprint.pformat(new))\n         raise ConflictError\n \n     def _p_resolveConflict(self, oldState, savedState, newState):\n-        logger.debug(\'Resolve conflict\')\n-        old = oldState[\'data\']\n-        saved = savedState[\'data\']\n-        new = newState[\'data\']\n+        logger.debug("Resolve conflict")\n+        old = oldState["data"]\n+        saved = savedState["data"]\n+        new = newState["data"]\n         added = []\n         modified = []\n         deleted = []\n         for key, value in new.items():\n             if key not in old:\n                 added.append(key)\n-            elif value[\'modified\'] != old[key][\'modified\']:\n+            elif value["modified"] != old[key]["modified"]:\n                 modified.append(key)\n             # else:\n-                # unchanged\n+            # unchanged\n         for key in old:\n             if key not in new:\n                 deleted.append(key)\n         for key in deleted:\n             if key in saved:\n-                if old[key][\'modified\'] == saved[key][\'modified\']:\n+                if old[key]["modified"] == saved[key]["modified"]:\n                     # unchanged by saved, deleted by new\n-                    logger.debug(\'deleted %s\' % repr(key))\n+                    logger.debug("deleted %s" % repr(key))\n                     del saved[key]\n                 else:\n                     # modified by saved, deleted by new\n@@ -97,28 +88,28 @@ def _p_resolveConflict(self, oldState, savedState, newState):\n                 self.raise_conflict(saved[key], new[key])\n             else:\n                 # not in saved, added by new\n-                logger.debug(\'added %s\' % repr(key))\n+                logger.debug("added %s" % repr(key))\n                 saved[key] = new[key]\n         for key in modified:\n             if key not in saved:\n                 # deleted by saved, modified by new\n                 self.raise_conflict(saved[key], new[key])\n-            elif saved[key][\'modified\'] != old[key][\'modified\']:\n+            elif saved[key]["modified"] != old[key]["modified"]:\n                 # modified by saved, modified by new\n                 self.raise_conflict(saved[key], new[key])\n             else:\n                 # unchanged in saved, modified by new\n-                logger.debug(\'modified %s\' % repr(key))\n+                logger.debug("modified %s" % repr(key))\n                 saved[key] = new[key]\n         return dict(data=saved)\n \n \n @implementer(IImageScaleStorage)\n class AnnotationStorage(MutableMapping):\n-    """ An abstract storage for image scale data using annotations and\n-        implementing :class:`IImageScaleStorage`. Image data is stored as an\n-        annotation on the object container, i.e. the image. This is needed\n-        since not all images are themselves annotatable. """\n+    """An abstract storage for image scale data using annotations and\n+    implementing :class:`IImageScaleStorage`. Image data is stored as an\n+    annotation on the object container, i.e. the image. This is needed\n+    since not all images are themselves annotatable."""\n \n     def __init__(self, context, modified=None):\n         self.context = context\n@@ -152,21 +143,18 @@ def modified_time(self):\n \n     def __repr__(self):\n         name = self.__class__.__name__\n-        return \'<%s context=%r>\' % (name, self.context)\n+        return f"<{name} context={self.context!r}>"\n \n     __str__ = __repr__\n \n     @property\n     def storage(self):\n         annotations = IAnnotations(self.context)\n-        scales = annotations.setdefault(\n-            \'plone.scale\',\n-            ScalesDict()\n-        )\n+        scales = annotations.setdefault("plone.scale", ScalesDict())\n         if not isinstance(scales, ScalesDict):\n             # migrate from PersistentDict to ScalesDict\n             new_scales = ScalesDict(scales)\n-            annotations[\'plone.scale\'] = new_scales\n+            annotations["plone.scale"] = new_scales\n             return new_scales\n         return scales\n \n@@ -175,7 +163,7 @@ def hash(self, **parameters):\n \n     def get_info_by_hash(self, hash):\n         for value in self.storage.values():\n-            if value[\'key\'] == hash:\n+            if value["key"] == hash:\n                 return value\n \n     def scale(self, factory=None, **parameters):\n@@ -183,10 +171,12 @@ def scale(self, factory=None, **parameters):\n         storage = self.storage\n         info = self.get_info_by_hash(key)\n         scaling_factory = IImageScaleFactory(self.context, None)\n-        if (info is not None and\n-                (scaling_factory is not None or factory is not None) and\n-                self._modified_since(info[\'modified\'])):\n-            del self[info[\'uid\']]\n+        if (\n+            info is not None\n+            and (scaling_factory is not None or factory is not None)\n+            and self._modified_since(info["modified"])\n+        ):\n+            del self[info["uid"]]\n             # invalidate when the image was updated\n             info = None\n         elif info is not None:\n@@ -196,19 +186,19 @@ def scale(self, factory=None, **parameters):\n         if factory is not None:\n             if scaling_factory is not None:\n                 warnings.warn(\n-                    \'Deprecated usage of factory in plone.scale. \'\n-                    \'Factory is passed to plone.scale but also an adapter \'\n-                    \'was found. No way to really decide which one to execute.\'\n-                    \'To be nice and with a look at backward compatibility the \'\n-                    \'passed one is used.\',\n-                    DeprecationWarning\n+                    "Deprecated usage of factory in plone.scale. "\n+                    "Factory is passed to plone.scale but also an adapter "\n+                    "was found. No way to really decide which one to execute."\n+                    "To be nice and with a look at backward compatibility the "\n+                    "passed one is used.",\n+                    DeprecationWarning,\n                 )\n             else:\n                 warnings.warn(\n-                    \'Deprecated usage of factory in plone.scale. Provide an \'\n-                    \'adapter for the factory instead. The kwarg will be \'\n-                    \'dropped with plone.scale 3.0\',\n-                    DeprecationWarning\n+                    "Deprecated usage of factory in plone.scale. Provide an "\n+                    "adapter for the factory instead. The kwarg will be "\n+                    "dropped with plone.scale 3.0",\n+                    DeprecationWarning,\n                 )\n             result = factory(**parameters)\n         elif scaling_factory is not None:\n@@ -219,9 +209,9 @@ def scale(self, factory=None, **parameters):\n             # BBB behavior here is to return None\n             # nevertheless we warn!\n             warnings.warn(\n-                \'Could not adapt context to IImageScaleFactory nor a \'\n-                \'deprecated BBB factory callable was provided.\'\n-                \'Assume None return value as it was before.\'\n+                "Could not adapt context to IImageScaleFactory nor a "\n+                "deprecated BBB factory callable was provided."\n+                "Assume None return value as it was before."\n             )\n             return None\n \n@@ -237,7 +227,7 @@ def scale(self, factory=None, **parameters):\n                 data=data,\n                 width=width,\n                 height=height,\n-                mimetype=\'image/{0}\'.format(format_.lower()),\n+                mimetype=f"image/{format_.lower()}",\n                 key=key,\n                 modified=self.modified_time,\n             )\n@@ -258,15 +248,14 @@ def _cleanup(self):\n             if isinstance(key, tuple):\n                 del self[key]\n             # clear cache from scales older than one day\n-            elif self._modified_since(\n-                    value[\'modified\'], offset=KEEP_SCALE_MILLIS):\n+            elif self._modified_since(value["modified"], offset=KEEP_SCALE_MILLIS):\n                 del self[key]\n \n     def __getitem__(self, uid):\n         return self.storage[uid]\n \n     def __setitem__(self, id, scale):\n-        raise RuntimeError(\'New scales have to be created via scale()\')\n+        raise RuntimeError("New scales have to be created via scale()")\n \n     def __delitem__(self, uid):\n         try:\n@@ -274,7 +263,7 @@ def __delitem__(self, uid):\n         except KeyError:\n             # This should not happen, but it apparently can happen in corner\n             # cases.  See https://github.com/plone/plone.scale/issues/15\n-            logger.warn(\'Could not delete key %s from storage.\', uid)\n+            logger.warn("Could not delete key %s from storage.", uid)\n \n     def __iter__(self):\n         return iter(self.storage)\ndiff --git a/plone/scale/tests/test_scale.py b/plone/scale/tests/test_scale.py\nindex 0c1d57c..2df62a3 100644\n--- a/plone/scale/tests/test_scale.py\n+++ b/plone/scale/tests/test_scale.py\n@@ -1,4 +1,4 @@\n-# -*- coding: utf-8 -*-\n+from io import BytesIO as StringIO\n from plone.scale.scale import scaleImage\n from plone.scale.scale import scalePILImage\n from plone.scale.tests import TEST_DATA_LOCATION\n@@ -10,26 +10,19 @@\n import warnings\n \n \n-try:\n-    from cStringIO import StringIO\n-except ImportError:\n-    from io import BytesIO as StringIO\n-\n-\n-with open(os.path.join(TEST_DATA_LOCATION, "logo.png"), \'rb\') as fio:\n+with open(os.path.join(TEST_DATA_LOCATION, "logo.png"), "rb") as fio:\n     PNG = fio.read()\n-with open(os.path.join(TEST_DATA_LOCATION, "logo.gif"), \'rb\') as fio:\n+with open(os.path.join(TEST_DATA_LOCATION, "logo.gif"), "rb") as fio:\n     GIF = fio.read()\n-with open(os.path.join(TEST_DATA_LOCATION, "logo.tiff"), \'rb\') as fio:\n+with open(os.path.join(TEST_DATA_LOCATION, "logo.tiff"), "rb") as fio:\n     TIFF = fio.read()\n-with open(os.path.join(TEST_DATA_LOCATION, "cmyk.jpg"), \'rb\') as fio:\n+with open(os.path.join(TEST_DATA_LOCATION, "cmyk.jpg"), "rb") as fio:\n     CMYK = fio.read()\n-with open(os.path.join(TEST_DATA_LOCATION, "profile.jpg"), \'rb\') as fio:\n+with open(os.path.join(TEST_DATA_LOCATION, "profile.jpg"), "rb") as fio:\n     PROFILE = fio.read()\n \n \n class ScalingTests(TestCase):\n-\n     def testNewSizeReturned(self):\n         (imagedata, format, size) = scaleImage(PNG, 42, 51, "contain")\n         input = StringIO(imagedata)\n@@ -76,14 +69,14 @@ def testScaledPreservesProfile(self):\n         (imagedata, format, size) = scaleImage(PROFILE, 42, 51, "contain")\n         input = StringIO(imagedata)\n         image = PIL.Image.open(input)\n-        self.assertIsNotNone(image.info.get(\'icc_profile\'))\n+        self.assertIsNotNone(image.info.get("icc_profile"))\n \n     def testScaleWithFewColorsStaysColored(self):\n         (imagedata, format, size) = scaleImage(PROFILE, 16, None, "contain")\n         image = PIL.Image.open(StringIO(imagedata))\n         self.assertEqual(max(image.size), 16)\n-        self.assertEqual(image.mode, \'RGB\')\n-        self.assertEqual(image.format, \'JPEG\')\n+        self.assertEqual(image.mode, "RGB")\n+        self.assertEqual(image.format, "JPEG")\n \n     def testAutomaticGreyscale(self):\n         src = PIL.Image.new("RGB", (256, 256), (255, 255, 255))\n@@ -95,29 +88,29 @@ def testAutomaticGreyscale(self):\n         (imagedata, format, size) = scaleImage(result, 200, None, "contain")\n         image = PIL.Image.open(StringIO(imagedata))\n         self.assertEqual(max(image.size), 200)\n-        self.assertEqual(image.mode, \'L\')\n-        self.assertEqual(image.format, \'JPEG\')\n+        self.assertEqual(image.mode, "L")\n+        self.assertEqual(image.format, "JPEG")\n \n     def testAutomaticPalette(self):\n         # get a JPEG with more than 256 colors\n         jpeg = PIL.Image.open(StringIO(PROFILE))\n-        self.assertEqual(jpeg.mode, \'RGB\')\n-        self.assertEqual(jpeg.format, \'JPEG\')\n+        self.assertEqual(jpeg.mode, "RGB")\n+        self.assertEqual(jpeg.format, "JPEG")\n         self.assertIsNone(jpeg.getcolors(maxcolors=256))\n         # convert to PNG\n         dst = StringIO()\n         jpeg.save(dst, "PNG")\n         dst.seek(0)\n         png = PIL.Image.open(dst)\n-        self.assertEqual(png.mode, \'RGB\')\n-        self.assertEqual(png.format, \'PNG\')\n+        self.assertEqual(png.mode, "RGB")\n+        self.assertEqual(png.format, "PNG")\n         self.assertIsNone(png.getcolors(maxcolors=256))\n         # scale it to a size where we get less than 256 colors\n         (imagedata, format, size) = scaleImage(dst.getvalue(), 24, None, "contain")\n         image = PIL.Image.open(StringIO(imagedata))\n         # we should now have an image in palette mode\n-        self.assertEqual(image.mode, \'P\')\n-        self.assertEqual(image.format, \'PNG\')\n+        self.assertEqual(image.mode, "P")\n+        self.assertEqual(image.format, "PNG")\n \n     def testSameSizeDownScale(self):\n         self.assertEqual(scaleImage(PNG, 84, 103, "contain")[2], (84, 103))\n@@ -208,14 +201,14 @@ def testQuality(self):\n         img3 = scaleImage(CMYK, 84, 103, quality=20)[0]\n         self.assertNotEqual(img1, img2)\n         self.assertNotEqual(img1, img3)\n-        self.failUnless(len(img1) > len(img2) > len(img3))\n+        self.assertTrue(len(img1) > len(img2) > len(img3))\n \n     def testResultBuffer(self):\n         img1 = scaleImage(PNG, 84, 103)[0]\n         result = StringIO()\n         img2 = scaleImage(PNG, 84, 103, result=result)[0]\n-        self.assertEqual(result, img2)      # the return value _is_ the buffer\n-        self.assertEqual(result.getvalue(), img1)   # but with the same value\n+        self.assertEqual(result, img2)  # the return value _is_ the buffer\n+        self.assertEqual(result.getvalue(), img1)  # but with the same value\n \n     def testAlternativeSpellings(self):\n         """Test alternative and deprecated mode spellings and the old\n@@ -223,107 +216,107 @@ def testAlternativeSpellings(self):\n         """\n \n         # scale-crop-to-fit\n-        img = PIL.Image.new(\'RGB\', (20, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 10, 5, direction=\'scale-crop-to-fit\')\n+        img = PIL.Image.new("RGB", (20, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 10, 5, direction="scale-crop-to-fit")\n         self.assertEqual(img_scaled.size, (10, 5))\n         # down\n-        img = PIL.Image.new(\'RGB\', (20, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 10, 5, direction=\'down\')\n+        img = PIL.Image.new("RGB", (20, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 10, 5, direction="down")\n         self.assertEqual(img_scaled.size, (10, 5))\n \n         # Test mode cover\n         # scale-crop-to-fill\n-        img = PIL.Image.new(\'RGB\', (20, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 40, 30, direction=\'scale-crop-to-fill\')\n+        img = PIL.Image.new("RGB", (20, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 40, 30, direction="scale-crop-to-fill")\n         self.assertEqual(img_scaled.size, (30, 30))\n         # up\n-        img = PIL.Image.new(\'RGB\', (20, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 40, 30, direction=\'up\')\n+        img = PIL.Image.new("RGB", (20, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 40, 30, direction="up")\n         self.assertEqual(img_scaled.size, (30, 30))\n \n         # Test mode scale\n         # keep A\n-        img = PIL.Image.new(\'RGB\', (20, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 20, 10, direction=\'keep\')\n+        img = PIL.Image.new("RGB", (20, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 20, 10, direction="keep")\n         self.assertEqual(img_scaled.size, (10, 10))\n         # keep B\n-        img = PIL.Image.new(\'RGB\', (20, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 40, 80, direction=\'keep\')\n+        img = PIL.Image.new("RGB", (20, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 40, 80, direction="keep")\n         self.assertEqual(img_scaled.size, (20, 20))\n         # thumbnail A\n-        img = PIL.Image.new(\'RGB\', (20, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 20, 10, direction=\'thumbnail\')\n+        img = PIL.Image.new("RGB", (20, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 20, 10, direction="thumbnail")\n         self.assertEqual(img_scaled.size, (10, 10))\n         # thumbnail B\n-        img = PIL.Image.new(\'RGB\', (20, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 40, 80, direction=\'thumbnail\')\n+        img = PIL.Image.new("RGB", (20, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 40, 80, direction="thumbnail")\n         self.assertEqual(img_scaled.size, (20, 20))\n \n     def testModes(self):\n-        """Test modes to actually behavie like documented.\n-        """\n+        """Test modes to actually behavie like documented."""\n         # Mode contain\n         # v\n         # A\n-        img = PIL.Image.new(\'RGB\', (20, 40), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 10, 10, mode=\'contain\')\n+        img = PIL.Image.new("RGB", (20, 40), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 10, 10, mode="contain")\n         self.assertEqual(img_scaled.size, (10, 10))\n         # B\n-        img = PIL.Image.new(\'RGB\', (40, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 10, 10, mode=\'contain\')\n+        img = PIL.Image.new("RGB", (40, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 10, 10, mode="contain")\n         self.assertEqual(img_scaled.size, (10, 10))\n         # ^\n         # A\n-        img = PIL.Image.new(\'RGB\', (20, 40), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 60, 60, mode=\'contain\')\n+        img = PIL.Image.new("RGB", (20, 40), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 60, 60, mode="contain")\n         self.assertEqual(img_scaled.size, (60, 60))\n         # B\n-        img = PIL.Image.new(\'RGB\', (40, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 60, 60, mode=\'contain\')\n+        img = PIL.Image.new("RGB", (40, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 60, 60, mode="contain")\n         self.assertEqual(img_scaled.size, (60, 60))\n \n         # Mode cover\n         # v\n         # A\n-        img = PIL.Image.new(\'RGB\', (20, 40), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 10, 10, mode=\'cover\')\n+        img = PIL.Image.new("RGB", (20, 40), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 10, 10, mode="cover")\n         self.assertEqual(img_scaled.size, (5, 10))\n         # B\n-        img = PIL.Image.new(\'RGB\', (40, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 10, 10, mode=\'cover\')\n+        img = PIL.Image.new("RGB", (40, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 10, 10, mode="cover")\n         self.assertEqual(img_scaled.size, (10, 5))\n         # ^\n         # A\n-        img = PIL.Image.new(\'RGB\', (20, 40), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 60, 60, mode=\'cover\')\n+        img = PIL.Image.new("RGB", (20, 40), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 60, 60, mode="cover")\n         self.assertEqual(img_scaled.size, (30, 60))\n         # B\n-        img = PIL.Image.new(\'RGB\', (40, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 60, 60, mode=\'cover\')\n+        img = PIL.Image.new("RGB", (40, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 60, 60, mode="cover")\n         self.assertEqual(img_scaled.size, (60, 30))\n \n         # Mode scale\n         # v\n         # A\n-        img = PIL.Image.new(\'RGB\', (20, 40), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 10, 10, mode=\'scale\')\n+        img = PIL.Image.new("RGB", (20, 40), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 10, 10, mode="scale")\n         self.assertEqual(img_scaled.size, (5, 10))\n         # B\n-        img = PIL.Image.new(\'RGB\', (40, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 10, 10, mode=\'scale\')\n+        img = PIL.Image.new("RGB", (40, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 10, 10, mode="scale")\n         self.assertEqual(img_scaled.size, (10, 5))\n         # ^\n         # A\n-        img = PIL.Image.new(\'RGB\', (20, 40), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 60, 60, mode=\'scale\')\n+        img = PIL.Image.new("RGB", (20, 40), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 60, 60, mode="scale")\n         self.assertEqual(img_scaled.size, (20, 40))\n         # B\n-        img = PIL.Image.new(\'RGB\', (40, 20), (0, 0, 0))\n-        img_scaled = scalePILImage(img, 60, 60, mode=\'scale\')\n+        img = PIL.Image.new("RGB", (40, 20), (0, 0, 0))\n+        img_scaled = scalePILImage(img, 60, 60, mode="scale")\n         self.assertEqual(img_scaled.size, (40, 20))\n \n     def testDeprecations(self):\n         import plone.scale.scale\n+\n         # clear warnings registry, so the test actually sees the warning\n         plone.scale.scale.__warningregistry__.clear()\n         with warnings.catch_warnings(record=True) as w:\n@@ -331,11 +324,10 @@ def testDeprecations(self):\n             scaleImage(PNG, 16, 16, direction="keep")\n             self.assertEqual(len(w), 1)\n             self.assertIs(w[0].category, DeprecationWarning)\n-            self.assertIn(\n-                "the \'direction\' option is deprecated",\n-                str(w[0].message))\n+            self.assertIn("the \'direction\' option is deprecated", str(w[0].message))\n \n \n def test_suite():\n     from unittest import defaultTestLoader\n+\n     return defaultTestLoader.loadTestsFromName(__name__)\ndiff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py\nindex fda5de7..c1cf001 100644\n--- a/plone/scale/tests/test_storage.py\n+++ b/plone/scale/tests/test_storage.py\n@@ -1,17 +1,17 @@\n-# -*- coding: utf-8 -*-\n from operator import delitem\n from operator import itemgetter\n from operator import setitem\n from plone.testing import zca\n from unittest import TestCase\n-import zope.annotation.interfaces\n-import zope.annotation.attribute\n-from zope.interface import implementer\n from zope.component import provideAdapter\n+from zope.interface import implementer\n+\n+import zope.annotation.attribute\n+import zope.annotation.interfaces\n \n \n @implementer(zope.annotation.interfaces.IAttributeAnnotatable)\n-class _DummyContext(object):\n+class _DummyContext:\n     pass\n \n \n@@ -20,15 +20,14 @@ class AnnotationStorageTests(TestCase):\n     layer = zca.UNIT_TESTING\n \n     def _provide_dummy_scale_adapter(self, result=True):\n-        from zope.component import adapter\n         from plone.scale.interfaces import IImageScaleFactory\n+        from zope.component import adapter\n \n         factory = self.factory\n \n         @implementer(IImageScaleFactory)\n         @adapter(_DummyContext)\n-        class DummyISF(object):\n-\n+        class DummyISF:\n             def __init__(self, context):\n                 self.context = context\n \n@@ -42,40 +41,42 @@ def __call__(self, **parameters):\n     @property\n     def storage(self):\n         from plone.scale.storage import AnnotationStorage\n+\n         provideAdapter(zope.annotation.attribute.AttributeAnnotations)\n         storage = AnnotationStorage(_DummyContext())\n         storage.modified = lambda: 42\n         return storage\n \n     def factory(self, **kw):\n-        return \'some data\', \'png\', (42, 23)\n+        return "some data", "png", (42, 23)\n \n     def testInterface(self):\n         from plone.scale.storage import IImageScaleStorage\n+\n         storage = self.storage\n         self.assertTrue(IImageScaleStorage.providedBy(storage))\n \n     def testScaleForNonExistingScaleWithCreationBBB(self):\n         storage = self.storage\n         scale = storage.scale(factory=self.factory, foo=23, bar=42)\n-        self.assertIn(\'uid\', scale)\n-        self.assertIn(\'key\', scale)\n-        self.assertEqual(scale[\'data\'], \'some data\')\n-        self.assertEqual(scale[\'width\'], 42)\n-        self.assertEqual(scale[\'height\'], 23)\n-        self.assertEqual(scale[\'mimetype\'], \'image/png\')\n+        self.assertIn("uid", scale)\n+        self.assertIn("key", scale)\n+        self.assertEqual(scale["data"], "some data")\n+        self.assertEqual(scale["width"], 42)\n+        self.assertEqual(scale["height"], 23)\n+        self.assertEqual(scale["mimetype"], "image/png")\n \n     def testScaleForNonExistingScaleWithCreation(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n         scale = storage.scale(foo=23, bar=42)\n-        self.assertIn(\'uid\', scale)\n-        self.assertIn(\'key\', scale)\n-        self.assertEqual(scale[\'data\'], \'some data\')\n-        self.assertEqual(scale[\'width\'], 42)\n+        self.assertIn("uid", scale)\n+        self.assertIn("key", scale)\n+        self.assertEqual(scale["data"], "some data")\n+        self.assertEqual(scale["width"], 42)\n \n-        self.assertEqual(scale[\'height\'], 23)\n-        self.assertEqual(scale[\'mimetype\'], \'image/png\')\n+        self.assertEqual(scale["height"], 23)\n+        self.assertEqual(scale["mimetype"], "image/png")\n \n     def testScaleForNonExistingScaleWithoutCreationBBB(self):\n         storage = self.storage\n@@ -92,7 +93,7 @@ def testScaleForExistingScaleBBB(self):\n         storage = self.storage\n         scale1 = storage.scale(factory=self.factory, foo=23, bar=42)\n         scale2 = storage.scale(factory=self.factory, bar=42, foo=23)\n-        self.failUnless(scale1 is scale2)\n+        self.assertTrue(scale1 is scale2)\n \n     def testScaleForExistingScale(self):\n         self._provide_dummy_scale_adapter()\n@@ -104,48 +105,48 @@ def testScaleForExistingScale(self):\n     def testScaleForSimilarScalesBBB(self):\n         storage = self.storage\n         scale1 = storage.scale(factory=self.factory, foo=23, bar=42)\n-        scale2 = storage.scale(factory=self.factory, bar=42, foo=23, hurz=\'!\')\n+        scale2 = storage.scale(factory=self.factory, bar=42, foo=23, hurz="!")\n         self.assertIsNot(scale1, scale2)\n \n     def testScaleForSimilarScales(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n         scale1 = storage.scale(foo=23, bar=42)\n-        scale2 = storage.scale(bar=42, foo=23, hurz=\'!\')\n+        scale2 = storage.scale(bar=42, foo=23, hurz="!")\n         self.assertIsNot(scale1, scale2)\n \n     def testGetItemBBB(self):\n         storage = self.storage\n         scale = storage.scale(factory=self.factory, foo=23, bar=42)\n-        uid = scale[\'uid\']\n+        uid = scale["uid"]\n         scale = storage[uid]\n-        self.failUnless(\'uid\' in scale)\n-        self.failUnless(\'key\' in scale)\n-        self.assertEqual(scale[\'data\'], \'some data\')\n-        self.assertEqual(scale[\'width\'], 42)\n-        self.assertEqual(scale[\'height\'], 23)\n-        self.assertEqual(scale[\'mimetype\'], \'image/png\')\n+        self.assertTrue("uid" in scale)\n+        self.assertTrue("key" in scale)\n+        self.assertEqual(scale["data"], "some data")\n+        self.assertEqual(scale["width"], 42)\n+        self.assertEqual(scale["height"], 23)\n+        self.assertEqual(scale["mimetype"], "image/png")\n \n     def testGetItem(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n         scale = storage.scale(foo=23, bar=42)\n-        uid = scale[\'uid\']\n+        uid = scale["uid"]\n         scale = storage[uid]\n-        self.assertIn(\'uid\', scale)\n-        self.assertIn(\'key\', scale)\n-        self.assertEqual(scale[\'data\'], \'some data\')\n-        self.assertEqual(scale[\'width\'], 42)\n-        self.assertEqual(scale[\'height\'], 23)\n-        self.assertEqual(scale[\'mimetype\'], \'image/png\')\n+        self.assertIn("uid", scale)\n+        self.assertIn("key", scale)\n+        self.assertEqual(scale["data"], "some data")\n+        self.assertEqual(scale["width"], 42)\n+        self.assertEqual(scale["height"], 23)\n+        self.assertEqual(scale["mimetype"], "image/png")\n \n     def testGetUnknownItem(self):\n         storage = self.storage\n-        self.assertRaises(KeyError, itemgetter(\'foo\'), storage)\n+        self.assertRaises(KeyError, itemgetter("foo"), storage)\n \n     def testSetItemNotAllowed(self):\n         storage = self.storage\n-        self.assertRaises(RuntimeError, setitem, storage, \'key\', None)\n+        self.assertRaises(RuntimeError, setitem, storage, "key", None)\n \n     def testIterateWithoutAnnotations(self):\n         storage = self.storage\n@@ -155,34 +156,34 @@ def testIterate(self):\n         storage = self.storage\n         storage.storage.update(dict(one=None, two=None))\n         generator = iter(storage)\n-        self.assertEqual(set(generator), set([\'one\', \'two\']))\n+        self.assertEqual(set(generator), {"one", "two"})\n \n     def testKeys(self):\n         storage = self.storage\n         storage.storage.update(dict(one=None, two=None))\n-        self.assertEqual(set(storage.keys()), set([\'one\', \'two\']))\n+        self.assertEqual(set(storage.keys()), {"one", "two"})\n \n     def testNegativeHasKey(self):\n         storage = self.storage\n-        self.assertEqual(\'one\' in storage, False)\n+        self.assertEqual("one" in storage, False)\n \n     def testPositiveHasKey(self):\n         storage = self.storage\n         storage.storage.update(dict(one=None))\n-        self.assertEqual(\'one\' in storage, True)\n+        self.assertEqual("one" in storage, True)\n \n     def testDeleteNonExistingItem(self):\n         storage = self.storage\n         # This used to raise a KeyError, but sometimes the underlying storage\n         # can get inconsistent, so it is nicer to accept it.\n         # See https://github.com/plone/plone.scale/issues/15\n-        delitem(storage, \'foo\')\n+        delitem(storage, "foo")\n \n     def testDeleteRemovesItemAndIndexBBB(self):\n         storage = self.storage\n         scale = storage.scale(factory=self.factory, foo=23, bar=42)\n         self.assertEqual(len(storage), 1)\n-        del storage[scale[\'uid\']]\n+        del storage[scale["uid"]]\n         self.assertEqual(len(storage), 0)\n \n     def testDeleteRemovesItemAndIndex(self):\n@@ -190,7 +191,7 @@ def testDeleteRemovesItemAndIndex(self):\n         storage = self.storage\n         scale = storage.scale(foo=23, bar=42)\n         self.assertEqual(len(storage), 1)\n-        del storage[scale[\'uid\']]\n+        del storage[scale["uid"]]\n         self.assertEqual(len(storage), 0)\n \n     def testCleanUpOldItemsBBB(self):\n@@ -200,8 +201,8 @@ def testCleanUpOldItemsBBB(self):\n         storage.modified = lambda: next_modified\n         scale_new = storage.scale(factory=self.factory, foo=23, bar=42)\n         self.assertEqual(len(storage), 1)\n-        self.assertEqual(scale_new[\'uid\'] in storage, True)\n-        self.assertEqual(scale_old[\'uid\'] in storage, False)\n+        self.assertEqual(scale_new["uid"] in storage, True)\n+        self.assertEqual(scale_old["uid"] in storage, False)\n \n         # When modification time is older than a day, too old scales\n         # get purged.\n@@ -209,10 +210,10 @@ def testCleanUpOldItemsBBB(self):\n         storage.modified = lambda: next_modified\n         scale_newer = storage.scale(factory=self.factory, foo=23, bar=42)\n \n-        self.assertEqual(scale_newer[\'uid\'] in storage, True)\n-        self.assertEqual(scale_new[\'uid\'] in storage, False)\n-        self.assertEqual(scale_old[\'uid\'] in storage, False)\n-        del storage[scale_newer[\'uid\']]\n+        self.assertEqual(scale_newer["uid"] in storage, True)\n+        self.assertEqual(scale_new["uid"] in storage, False)\n+        self.assertEqual(scale_old["uid"] in storage, False)\n+        del storage[scale_newer["uid"]]\n         self.assertEqual(len(storage), 0)\n \n     def testCleanUpOldItems(self):\n@@ -223,8 +224,8 @@ def testCleanUpOldItems(self):\n         storage.modified = lambda: next_modified\n         scale_new = storage.scale(foo=23, bar=42)\n         self.assertEqual(len(storage), 1)\n-        self.assertIn(scale_new[\'uid\'], storage)\n-        self.assertNotIn(scale_old[\'uid\'], storage)\n+        self.assertIn(scale_new["uid"], storage)\n+        self.assertNotIn(scale_old["uid"], storage)\n \n         # When modification time is older than a day, too old scales\n         # get purged.\n@@ -232,10 +233,10 @@ def testCleanUpOldItems(self):\n         storage.modified = lambda: next_modified\n         scale_newer = storage.scale(foo=23, bar=42)\n \n-        self.assertIn(scale_newer[\'uid\'], storage)\n-        self.assertNotIn(scale_new[\'uid\'], storage)\n-        self.assertNotIn(scale_old[\'uid\'], storage)\n-        del storage[scale_newer[\'uid\']]\n+        self.assertIn(scale_newer["uid"], storage)\n+        self.assertNotIn(scale_new["uid"], storage)\n+        self.assertNotIn(scale_old["uid"], storage)\n+        del storage[scale_newer["uid"]]\n         self.assertEqual(len(storage), 0)\n \n     def testClearBBB(self):\n@@ -256,4 +257,5 @@ def testClear(self):\n \n def test_suite():\n     from unittest import defaultTestLoader\n+\n     return defaultTestLoader.loadTestsFromName(__name__)\ndiff --git a/requirements-52.txt b/requirements-52.txt\nnew file mode 100644\nindex 0000000..95d53f8\n--- /dev/null\n+++ b/requirements-52.txt\n@@ -0,0 +1,4 @@\n+-e .[test]\n+zope.testrunner\n+--pre\n+-c https://dist.plone.org/release/5.2-dev/constraints.txt\ndiff --git a/requirements-60.txt b/requirements-60.txt\nnew file mode 100644\nindex 0000000..b7b56cb\n--- /dev/null\n+++ b/requirements-60.txt\n@@ -0,0 +1,4 @@\n+-e .[test]\n+zope.testrunner\n+--pre\n+-c https://dist.plone.org/release/6.0-dev/constraints.txt\ndiff --git a/setup.cfg b/setup.cfg\nindex 5d2845a..a62eb88 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,17 +1,11 @@\n [check-manifest]\n ignore =\n-    *.cfg\n-    bootstrap.py\n+  requirements-*.txt\n+  sources-*.ini\n+  tox.ini\n \n [isort]\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n-line_length = 200\n-not_skip = __init__.py\n+profile = plone\n \n [bdist_wheel]\n-universal = 1\n-\n-[zest.releaser]\n-create-wheel = yes\n+universal = 0\ndiff --git a/setup.py b/setup.py\nindex 8870b2d..8c870ab 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,74 +1,66 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n-version = \'3.1.3.dev0\'\n-readme = open(\'README.rst\').read().replace(\':class:\', \'\').replace(\':mod:\', \'\')\n-changes = open(\'CHANGES.rst\').read()\n \n-STORAGE_REQUIREMENTS = [\n-    \'zope.annotation\',\n-    \'zope.component\',\n-    \'zope.configuration\',\n-    \'zope.interface\',\n-    \'Persistence\',\n-]\n+version = "3.1.3.dev0"\n+with open("README.rst") as myfile:\n+    readme = myfile.read()\n+with open("CHANGES.rst") as myfile:\n+    changes = myfile.read()\n \n-TESTS_REQUIREMENTS = [\n-    \'Pillow\',\n-    \'plone.testing\'\n+STORAGE_REQUIREMENTS = [\n+    "ZODB",\n+    "zope.annotation",\n+    "zope.interface",\n+    "persistent",\n ]\n \n-SPHINX_REQUIREMENTS = [\n-    \'Sphinx\',\n-    \'repoze.sphinx.autointerface\',\n+# "zope.configuration",\n+TEST_REQUIREMENTS = [\n+    "zope.component",\n+    "zope.configuration",\n+    "plone.testing",\n ]\n \n setup(\n-    name=\'plone.scale\',\n+    name="plone.scale",\n     version=version,\n-    description=\'Image scaling\',\n-    long_description=readme + \'\\n\' + changes,\n+    description="Image scaling",\n+    long_description=readme + "\\n" + changes,\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n-        \'Environment :: Web Environment\',\n-        \'Framework :: Plone\',\n-        \'Framework :: Plone :: 5.1\',\n-        \'Framework :: Plone :: 5.2\',\n-        \'Framework :: Plone :: Core\',\n-        \'Framework :: Zope2\',\n-        \'Framework :: Zope :: 4\',\n-        \'License :: OSI Approved :: BSD License\',\n-        \'Operating System :: OS Independent\',\n-        \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 2.7\',\n-        \'Programming Language :: Python :: 3.5\',\n-        \'Programming Language :: Python :: 3.6\',\n-        \'Programming Language :: Python :: 3.7\',\n-        \'Programming Language :: Python :: 3.8\',\n+        "Development Status :: 5 - Production/Stable",\n+        "Environment :: Web Environment",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n+        "Framework :: Plone :: Core",\n+        "Framework :: Zope :: 4",\n+        "Framework :: Zope :: 5",\n+        "License :: OSI Approved :: BSD License",\n+        "Operating System :: OS Independent",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n     ],\n-    keywords=\'image scaling\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.scale\',\n-    license=\'BSD\',\n+    keywords="image scaling",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.scale",\n+    license="BSD",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n-    test_suite=\'plone.scale\',\n+    test_suite="plone.scale",\n     install_requires=[\n-        # We can\'t actually depend on PIL because not everyone can install it\n-        # as an egg.\n-        # \'PIL\',\n-        # \'Pillow\'\n-        \'setuptools\',\n-        "six",\n+        "Pillow",\n+        "setuptools",\n     ],\n     extras_require=dict(\n-        test=TESTS_REQUIREMENTS,\n         storage=STORAGE_REQUIREMENTS,\n-        sphinx=STORAGE_REQUIREMENTS + SPHINX_REQUIREMENTS,\n-        tests=STORAGE_REQUIREMENTS + TESTS_REQUIREMENTS,\n+        test=STORAGE_REQUIREMENTS + TEST_REQUIREMENTS,\n     ),\n )\ndiff --git a/sources-52.ini b/sources-52.ini\nnew file mode 100644\nindex 0000000..684b971\n--- /dev/null\n+++ b/sources-52.ini\n@@ -0,0 +1,10 @@\n+[settings]\n+# This is a mxdev configuration file\n+#\n+# available options are documented at\n+# https://pypi.org/project/mxdev/\n+\n+requirements-in = requirements-52.txt\n+requirements-out = requirements-52-mxdev.txt\n+constraints-out = constraints-52-mxdev.txt\n+ignores = plone.scale\ndiff --git a/sources-60.ini b/sources-60.ini\nnew file mode 100644\nindex 0000000..2f3ddc3\n--- /dev/null\n+++ b/sources-60.ini\n@@ -0,0 +1,10 @@\n+[settings]\n+# This is a mxdev configuration file\n+#\n+# available options are documented at\n+# https://pypi.org/project/mxdev/\n+\n+requirements-in = requirements-60.txt\n+requirements-out = requirements-60-mxdev.txt\n+constraints-out = constraints-60-mxdev.txt\n+ignores = plone.scale\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..c505c68\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,31 @@\n+[tox]\n+envlist =\n+    plone52-py36,\n+    plone52-py37,\n+    plone52-py38,\n+    plone60-py37,\n+    plone60-py38,\n+    plone60-py39,\n+    plone60-py310,\n+\n+skip_missing_interpreters = False\n+\n+[testenv]\n+usedevelop = False\n+skip_install = true\n+commands =\n+    python -V\n+    pip list\n+    zope-testrunner --test-path={toxinidir} {posargs:-vc}\n+\n+[testenv:plone52-py{36,37,38}]\n+commands_pre =\n+    pip install mxdev\n+    mxdev -c sources-52.ini\n+    pip install --use-deprecated legacy-resolver -rrequirements-52-mxdev.txt\n+\n+[testenv:plone60-py{37,38,39,310}]\n+commands_pre =\n+    pip install mxdev\n+    mxdev -c sources-60.ini\n+    pip install --use-deprecated legacy-resolver -rrequirements-60-mxdev.txt\n'

