Repository: plone.restapi


Branch: refs/heads/master
Date: 2023-03-20T16:11:51+01:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/7696dc7c78e1ee6165dc1100cf042eda9b735ba7

Fix #1600 UnboundLocalError in RelationChoice deserializer 

* Fix UnboundLocalError in RelationChoice deserializer
* changelog
* update tests
* black

Files changed:
A news/1600.bugfix
M src/plone/restapi/deserializer/relationfield.py
M src/plone/restapi/tests/test_dxfield_deserializer.py

b'diff --git a/news/1600.bugfix b/news/1600.bugfix\nnew file mode 100644\nindex 000000000..34a6cc796\n--- /dev/null\n+++ b/news/1600.bugfix\n@@ -0,0 +1 @@\n+Fix UnboundLocalError in RelationChoice deserializer. @davisagli\ndiff --git a/src/plone/restapi/deserializer/relationfield.py b/src/plone/restapi/deserializer/relationfield.py\nindex 1317fd3e8..27c302a34 100644\n--- a/src/plone/restapi/deserializer/relationfield.py\n+++ b/src/plone/restapi/deserializer/relationfield.py\n@@ -16,6 +16,7 @@\n class RelationChoiceFieldDeserializer(DefaultFieldDeserializer):\n     def __call__(self, value):\n         obj = None\n+        resolved_by = None\n \n         if isinstance(value, dict):\n             # We are trying to deserialize the output of a serialization\n@@ -50,7 +51,10 @@ def __call__(self, value):\n \n         if obj is None:\n             self.request.response.setStatus(400)\n-            raise ValueError(f"Could not resolve object for {resolved_by}={value}")\n+            msg = f"Could not resolve object for {value}"\n+            if resolved_by:\n+                msg += f" (resolved by {resolved_by})"\n+            raise ValueError(msg)\n \n         self.field.validate(obj)\n         return obj\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex 0410a1e04..02c255fa3 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -421,7 +421,8 @@ def test_relationchoice_deserialization_from_invalid_intid_raises(self):\n         with self.assertRaises(ValueError) as cm:\n             self.deserialize("test_relationchoice_field", 123456789)\n         self.assertEqual(\n-            str(cm.exception), "Could not resolve object for intid=123456789"\n+            str(cm.exception),\n+            "Could not resolve object for 123456789 (resolved by intid)",\n         )\n         self.assertEqual(400, self.request.response.getStatus())\n \n@@ -433,7 +434,7 @@ def test_relationchoice_deserialization_from_invalid_uid_raises(self):\n             )\n         self.assertEqual(\n             str(cm.exception),\n-            "Could not resolve object for UID=ac12b24913cf45c6863937367aacc263",\n+            "Could not resolve object for ac12b24913cf45c6863937367aacc263 (resolved by UID)",\n         )\n         self.assertEqual(400, self.request.response.getStatus())\n \n@@ -445,7 +446,7 @@ def test_relationchoice_deserialization_from_invalid_url_raises(self):\n             )\n         self.assertEqual(\n             str(cm.exception),\n-            "Could not resolve object for URL=http://nohost/plone/doesnotexist",\n+            "Could not resolve object for http://nohost/plone/doesnotexist (resolved by URL)",\n         )\n         self.assertEqual(400, self.request.response.getStatus())\n \n@@ -453,10 +454,17 @@ def test_relationchoice_deserialization_from_invalid_path_raises(self):\n         with self.assertRaises(ValueError) as cm:\n             self.deserialize("test_relationchoice_field", "/doesnotexist")\n         self.assertEqual(\n-            str(cm.exception), "Could not resolve object for path=/doesnotexist"\n+            str(cm.exception),\n+            "Could not resolve object for /doesnotexist (resolved by path)",\n         )\n         self.assertEqual(400, self.request.response.getStatus())\n \n+    def test_relationchoice_deserialization_from_wrong_type_raises(self):\n+        with self.assertRaises(ValueError) as cm:\n+            self.deserialize("test_relationchoice_field", None)\n+        self.assertEqual(str(cm.exception), "Could not resolve object for None")\n+        self.assertEqual(400, self.request.response.getStatus())\n+\n     def test_relationlist_deserialization_returns_list_of_documents(self):\n         doc2 = self.portal[\n             self.portal.invokeFactory(\n'

