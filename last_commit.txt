Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-15T13:48:04+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/cd2f693fadb3e91689515353703888463738cc66

Add github workflow, testing with tox.

Files changed:
A .github/workflows/black.yml
A .github/workflows/docs.yml
A .github/workflows/isort.yml
A .github/workflows/plone_python.yml
A constraints.txt
A constraints_plone52.txt
A constraints_plone60.txt
A requirements.txt
A test_plone-52.cfg
A test_plone-60.cfg
M base.cfg
M buildout.cfg
M setup.cfg
M setup.py
M tox.ini

b'diff --git a/.github/workflows/black.yml b/.github/workflows/black.yml\nnew file mode 100644\nindex 00000000..420028cc\n--- /dev/null\n+++ b/.github/workflows/black.yml\n@@ -0,0 +1,32 @@\n+name: Black\n+on: [push]\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        python-version: [3.9]\n+\n+    steps:\n+      # git checkout\n+      - uses: actions/checkout@v2\n+\n+      # python setup\n+      - name: Set up Python ${{ matrix.python-version }}\n+        uses: actions/setup-python@v1\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+      - name: Install dependencies\n+        run: |\n+          python -m pip install --upgrade pip\n+          pip install tox tox-gh-actions\n+\n+      # python cache\n+      - uses: actions/cache@v1\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n+\n+      - name: Test with tox\n+        run: tox -e black-check\ndiff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml\nnew file mode 100644\nindex 00000000..93fc39fc\n--- /dev/null\n+++ b/.github/workflows/docs.yml\n@@ -0,0 +1,34 @@\n+name: Build docs\n+on: [push]\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        python-version: [3.9]\n+\n+    steps:\n+      # git checkout\n+      - uses: actions/checkout@v2\n+\n+      # python setup\n+      - name: Set up Python ${{ matrix.python-version }}\n+        uses: actions/setup-python@v1\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+      - name: Install dependencies\n+        run: |\n+          python -m pip install --upgrade pip\n+          pip install tox tox-gh-actions\n+\n+      # python cache\n+      - uses: actions/cache@v1\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n+\n+      - name: Test with tox\n+        run: |\n+          tox -e linkcheck\n+          tox -e plone6docs\ndiff --git a/.github/workflows/isort.yml b/.github/workflows/isort.yml\nnew file mode 100644\nindex 00000000..c6f499fc\n--- /dev/null\n+++ b/.github/workflows/isort.yml\n@@ -0,0 +1,32 @@\n+name: Isort\n+on: [push]\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: true\n+      matrix:\n+        python-version: [3.9]\n+\n+    steps:\n+      # git checkout\n+      - uses: actions/checkout@v2\n+\n+      # python setup\n+      - name: Set up Python ${{ matrix.python-version }}\n+        uses: actions/setup-python@v1\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+      - name: Install dependencies\n+        run: |\n+          python -m pip install --upgrade pip\n+          pip install tox tox-gh-actions\n+\n+      # python cache\n+      - uses: actions/cache@v1\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n+\n+      - name: Test with tox\n+        run: tox -e isort\ndiff --git a/.github/workflows/plone_python.yml b/.github/workflows/plone_python.yml\nnew file mode 100644\nindex 00000000..375c2a8b\n--- /dev/null\n+++ b/.github/workflows/plone_python.yml\n@@ -0,0 +1,31 @@\n+name: Plone backend tests\n+\n+on:\n+  push:\n+  pull_request:\n+\n+jobs:\n+  plone_python:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        python-version: ["3.7", "3.8", "3.9"]\n+        plone-version: ["5.2", "6.0"]\n+\n+    steps:\n+      - uses: actions/checkout@v3\n+      - name: Install system libraries\n+        run: sudo apt-get install libxml2-dev libxslt1-dev libjpeg-dev\n+      - name: Set up Python ${{ matrix.python-version }}\n+        uses: actions/setup-python@v2\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+      - name: Install dependencies\n+        run: |\n+          python -m pip install --upgrade pip\n+          pip install tox tox-gh-actions\n+      - name: Test with tox\n+        run: tox\n+        env:\n+          PLONE: ${{ matrix.plone-version }}\ndiff --git a/base.cfg b/base.cfg\nindex d94225b0..6ff15635 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -1,20 +1,54 @@\n [buildout]\n+show-picked-versions = true\n package-name = plone.api\n-package-extras = [test]\n-test-eggs =\n-    plone.api\n \n parts +=\n+    instance\n+    test\n     omelette\n \n # network speedup\n socket-timeout = 5\n \n+\n+[instance]\n+recipe = plone.recipe.zope2instance\n+deprecation-warnings = off\n+user = admin:admin\n+http-address = 8080\n+environment-vars =\n+    zope_i18n_compile_mo_files true\n+eggs =\n+    Plone\n+    Pillow\n+    plone.api [test]\n+\n+\n+[omelette]\n+recipe = collective.recipe.omelette\n+eggs = ${test:eggs}\n+\n+\n+[test]\n+recipe = zc.recipe.testrunner\n+eggs = ${instance:eggs}\n+initialization =\n+    os.environ[\'TZ\'] = \'UTC\'\n+    # In Python 3.8+, for the TZ environment variable to be used, it\'s\n+    # necessary to explicitly call time.tzset().\n+    import time\n+    time.tzset()\n+defaults = [\'-s\', \'plone.api\', \'--auto-color\', \'--auto-progress\']\n+\n+\n [versions]\n plone.api =\n #setuptools = 33.1.1\n #zc.buildout = 2.8.0\n \n-[omelette]\n-recipe = collective.recipe.omelette\n-eggs = ${test:eggs}\n+# cffi 1.14.3 fails on apple m1\n+# cffi 1.14.4 fails with "ModuleNotFoundError: No module named \'_cffi_backend\'"\n+cffi = 1.14.6\n+\n+# Pillow 6 fails on apple m1\n+Pillow = >= 8.3.2\ndiff --git a/buildout.cfg b/buildout.cfg\nindex f45087fb..e710d7a2 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -1,2 +1,2 @@\n [buildout]\n-extends = plone-5.2.x.cfg\n+extends = test_plone-60.cfg\ndiff --git a/constraints.txt b/constraints.txt\nnew file mode 100644\nindex 00000000..c1fb3a1b\n--- /dev/null\n+++ b/constraints.txt\n@@ -0,0 +1 @@\n+-c constraints_plone60.txt\ndiff --git a/constraints_plone52.txt b/constraints_plone52.txt\nnew file mode 100644\nindex 00000000..3887b180\n--- /dev/null\n+++ b/constraints_plone52.txt\n@@ -0,0 +1 @@\n+-c https://dist.plone.org/release/5.2-latest/requirements.txt\n\\ No newline at end of file\ndiff --git a/constraints_plone60.txt b/constraints_plone60.txt\nnew file mode 100644\nindex 00000000..2c1d6188\n--- /dev/null\n+++ b/constraints_plone60.txt\n@@ -0,0 +1 @@\n+-c https://dist.plone.org/release/6.0-latest/requirements.txt\n\\ No newline at end of file\ndiff --git a/requirements.txt b/requirements.txt\nnew file mode 100644\nindex 00000000..a4377ccf\n--- /dev/null\n+++ b/requirements.txt\n@@ -0,0 +1,5 @@\n+-c constraints.txt\n+setuptools\n+zc.buildout\n+Pillow>=8.3.2\n+tox\n\\ No newline at end of file\ndiff --git a/setup.cfg b/setup.cfg\nindex 00706645..1204ce28 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -2,7 +2,6 @@\n ignore =\n     *.cfg\n     .editorconfig\n-    .travis.yml\n     Makefile\n     fix-converted-myst.py\n     netlify.toml\ndiff --git a/setup.py b/setup.py\nindex 03389875..ff6e7a11 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -8,10 +8,9 @@ def read(*rnames):\n     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n \n \n-long_description = \\\n-    read(\'README.rst\') + \'\\n\\n\' + \\\n-    read(\'CHANGES.rst\') + \'\\n\\n\' + \\\n-    read(\'LICENSE\')\n+long_description = (\n+    read(\'README.rst\') + \'\\n\\n\' + read(\'CHANGES.rst\') + \'\\n\\n\' + read(\'LICENSE\')\n+)\n \n version = \'2.0.0a3.dev0\'\n \n@@ -42,13 +41,13 @@ def read(*rnames):\n     extras_require={\n         \'test\': [\n             \'Products.CMFPlone\',\n-            \'manuel\',\n             \'plone.app.dexterity\',\n             \'plone.app.intid\',\n             \'plone.app.testing\',\n             \'plone.indexer\',\n             \'plone.registry\',\n             \'z3c.relationfield\',\n+            \'zope.testrunner\',\n         ],\n     },\n     classifiers=[\n@@ -61,7 +60,6 @@ def read(*rnames):\n         \'License :: OSI Approved :: GNU General Public License v2 (GPLv2)\',\n         \'Operating System :: OS Independent\',\n         \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 3.6\',\n         \'Programming Language :: Python :: 3.7\',\n         \'Programming Language :: Python :: 3.8\',\n         \'Programming Language :: Python :: 3.9\',\ndiff --git a/test_plone-52.cfg b/test_plone-52.cfg\nnew file mode 100644\nindex 00000000..22236359\n--- /dev/null\n+++ b/test_plone-52.cfg\n@@ -0,0 +1,6 @@\n+[buildout]\n+extends =\n+    https://raw.github.com/collective/buildout.plonetest/master/test-5.2.x.cfg\n+    https://raw.githubusercontent.com/collective/buildout.plonetest/master/qa.cfg\n+    base.cfg\n+\ndiff --git a/test_plone-60.cfg b/test_plone-60.cfg\nnew file mode 100644\nindex 00000000..2fae3a15\n--- /dev/null\n+++ b/test_plone-60.cfg\n@@ -0,0 +1,6 @@\n+[buildout]\n+extends =\n+    https://raw.github.com/collective/buildout.plonetest/master/test-6.0.x.cfg\n+    https://raw.githubusercontent.com/collective/buildout.plonetest/master/qa.cfg\n+    base.cfg\n+\ndiff --git a/tox.ini b/tox.ini\nindex 4574f5c2..8289892f 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,53 +1,57 @@\n [tox]\n envlist =\n-    py{36,37,38}-plone-{5.2},\n-#    black-check,\n+    py{37,38,39}-plone-{5.2},\n+    py{38,39}-plone-{6.0}\n+    # towncrier\n+    # black-enforce,\n+    black-check,\n+    # isort-apply,\n     isort,\n     lint,\n-    coverage-report,\n+#    coverage-report,\n+    linkcheck\n     plone6docs,\n     docs\n-    docs-livehtml\n-    linkcheck\n \n-skip_missing_interpreters = False\n+skip_missing_interpreters = True\n+\n+[gh-actions]\n+python =\n+    3.7: py37\n+    3.8: py38\n+    3.9: py39\n+\n+[gh-actions:env]\n+PLONE =\n+    5.2: plone-5.2\n+    6.0: plone-6.0\n+\n \n [testenv]\n skip_install = True\n \n-basepython:\n-    py36: python3.6\n-    py37: python3.7\n-    py38: python3.8\n-\n commands =\n     python -VV\n+    pip install -r requirements.txt\n     pip list\n-    mkdir -p {toxinidir}/reports/coverage\n-# Calling bin/buildout -c toxinidir/buildout.cfg works in principle.\n-# But when buildout restarts because it has upgraded or downgraded itself,\n-# it will fail to find the buildout config file in the envdir.\n-# So make sure the versions in the deps match what is in the buildout config.\n-    {envbindir}/buildout -c {toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir} bootstrap\n-    {envbindir}/buildout -c {toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir}\n-    {envbindir}/coverage run {envbindir}/test -v1 --auto-color {posargs}\n+    {envbindir}/buildout -c /{toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir}\n+    {envbindir}/buildout -c {toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir} annotate\n+    {envbindir}/test\n \n setenv =\n-    COVERAGE_FILE=.coverage.{envname}\n-    plone-5.2: BUILDOUT_FILE="plone-5.2.x.cfg"\n+    BUILDOUT_FILE=test_plone-60.cfg\n+    plone-5.2: BUILDOUT_FILE=test_plone-52.cfg\n \n deps =\n     pdbpp\n-    setuptools==42.0.2\n-    zc.buildout==2.13.3\n-    coverage\n+    manuel\n \n whitelist_externals =\n     mkdir\n     echo\n \n [testenv:coverage-report]\n-basepython = python\n+basepython = python3.9\n deps = coverage\n \n setenv =\n@@ -64,51 +68,52 @@ commands =\n     coverage xml\n \n [testenv:black-check]\n-basepython = python\n+basepython = python3.9\n skip_install = True\n deps =\n     black\n \n commands =\n     python -VV\n-    black --line-length=79 --check --diff -v --skip-string-normalization src setup.py\n+    black --check --diff -v --skip-string-normalization src setup.py\n \n [testenv:black-enforce]\n-basepython = python\n+basepython = python3.9\n skip_install = True\n deps =\n     black\n \n commands =\n     python -VV\n-    black -v --line-length=79 --skip-string-normalization src setup.py\n+    black -v --skip-string-normalization src setup.py\n \n-[testenv:isort-apply]\n-basepython = python\n+[testenv:isort]\n+basepython = python3.9\n skip_install = True\n-\n deps =\n     isort\n \n commands =\n     python -VV\n-    isort {toxinidir}/src setup.py {posargs}\n+    isort --check-only --diff src setup.py\n \n-[testenv:isort]\n-basepython = python\n+[testenv:isort-apply]\n+basepython = python3.9\n skip_install = True\n+\n deps =\n     isort\n \n commands =\n     python -VV\n-    isort --check-only --diff {toxinidir}/src setup.py\n+    isort src setup.py {posargs}\n \n [testenv:lint]\n-basepython = python\n+basepython = python3.9\n skip_install = True\n \n deps =\n+    Jinja2<=3.0.3\n     isort\n     flake8\n     # helper to generate HTML reports:\n@@ -118,21 +123,20 @@ deps =\n     flake8-commas\n     flake8-debugger\n     flake8-deprecated\n+    flake8-docstrings\n     flake8-isort\n     flake8-pep3101\n-    #flake8-plone-api  # Sorry did not make sense here as this is plone.api\n     flake8-plone-hasattr\n     flake8-print\n     flake8-quotes\n     flake8-string-format\n     flake8-todo\n-    flake8_strict\n \n commands =\n     python -VV\n     mkdir -p {toxinidir}/_build/flake8\n-    - flake8 --format=html --htmldir={toxinidir}/_build/flake8 src setup.py\n-    flake8 src setup.py\n+    - flake8 --format=html --htmldir={toxinidir}/_build/flake8 --ignore=C101 src setup.py\n+    flake8 --ignore=C101,P101,D104 src setup.py\n \n whitelist_externals =\n     mkdir\n@@ -141,7 +145,7 @@ whitelist_externals =\n [testenv:plone6docs]\n # New docs with sphinx-book-theme\n # See [testenv:docs] for classic documentation\n-basepython = python\n+basepython = python3.9\n skip_install = False\n usedevelop = True\n extras =\n@@ -160,14 +164,14 @@ commands =\n # Locally for Maurits this only works with Python 2.7.\n # Travis is happy with 3.7, not with 3.8 or 3.9.\n # So pick the right one in .travis.yml (or GitHub Actions).\n-basepython = python\n+basepython = python3.9\n skip_install = False\n usedevelop = True\n extras =\n     tests\n \n deps =\n-    Sphinx\n+    -r requirements-docs.txt\n \n commands =\n     python -VV\n@@ -192,20 +196,6 @@ commands =\n     sphinx-build -b linkcheck -d _build/plone6docs/doctrees docs _build/plone6docs/linkcheck\n \n \n-[testenv:docs-livehtml]\n-basepython = python\n-skip_install = False\n-usedevelop = True\n-extras =\n-    {[testenv:plone6docs]extras}\n-deps =\n-    {[testenv:plone6docs]deps}\n-commands =\n-    python -VV\n-    mkdir -p {toxinidir}/_build/plone6docs\n-    sphinx-autobuild --ignore "*.swp" -b html docs _build/plone6docs/html \n-\n-\n [testenv:towncrier]\n basepython = python\n skip_install = True\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-15T13:49:48+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/7907baad272ed1ca823880b81ea5660dd349ab05

Switch to manuel.myst

Files changed:
M src/plone/api/tests/test_doctests.py

b'diff --git a/src/plone/api/tests/test_doctests.py b/src/plone/api/tests/test_doctests.py\nindex 4ad9fd0c..2e4c761c 100644\n--- a/src/plone/api/tests/test_doctests.py\n+++ b/src/plone/api/tests/test_doctests.py\n@@ -8,11 +8,11 @@\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.testing import layered\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from zope.testing import renormalizing\n \n import doctest\n-import manuel.codeblock\n+import manuel.myst.codeblock\n import manuel.doctest\n import manuel.testing\n import os\n@@ -94,7 +94,7 @@ def DocFileSuite(\n     :rtype: `manuel.testing.TestSuite`\n     """\n     m = manuel.doctest.Manuel(optionflags=flags, checker=CHECKER)\n-    m += manuel.codeblock.Manuel()\n+    m += manuel.myst.codeblock.Manuel()\n \n     return layered(\n         manuel.testing.TestSuite(\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-15T13:53:21+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/7539e50c8a8c0969f7acf0dc93f07bccf3b1b2bd

black and isort

Files changed:
M MANIFEST.in
M docs/conf.py
M src/plone/__init__.py
M src/plone/api/content.py
M src/plone/api/env.py
M src/plone/api/group.py
M src/plone/api/portal.py
M src/plone/api/relation.py
M src/plone/api/tests/base.py
M src/plone/api/tests/test_content.py
M src/plone/api/tests/test_doctests.py
M src/plone/api/tests/test_env.py
M src/plone/api/tests/test_group.py
M src/plone/api/tests/test_portal.py
M src/plone/api/tests/test_relation.py
M src/plone/api/tests/test_user.py
M src/plone/api/tests/test_validation.py
M src/plone/api/user.py
M src/plone/api/validation.py

b'diff --git a/MANIFEST.in b/MANIFEST.in\nindex 5378791b..b9ca1361 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -4,8 +4,8 @@ include tox.ini\n # Ignore most of the docs directory.\n prune docs\n \n-# The doctests point to docs/*.rst, so we need them, including CHANGES.rst.\n-include docs/*.rst\n+# The doctests point to docs/*.md, so we need them, including CHANGES.rst.\n+include docs/*.md\n \n graft src\n \n@@ -13,3 +13,7 @@ global-exclude *.pyc\n include pyproject.toml\n recursive-exclude news *\n exclude news\n+\n+# added by check-manifest\n+recursive-include src *.py\n+recursive-include src *.rst\ndiff --git a/docs/conf.py b/docs/conf.py\nindex e0382f1b..16b402c6 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -25,7 +25,7 @@\n ]\n master_doc = \'index\'\n \n-locale_dirs = ["translated/"]\n+locale_dirs = [\'translated/\']\n language = \'en\'\n \n # Grouping the document tree into LaTeX files. List of tuples\n@@ -35,8 +35,9 @@\n     \'index\',\n     \'ploneapi.tex\',\n     \'plone.api Documentation\',\n-    \'\', \'manual\'\n-), ]\n+    \'\',\n+    \'manual\',\n+)]\n \n \n class Mock:\ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex de40ea7c..5284146e 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/api/content.py b/src/plone/api/content.py\nindex c2a5538f..acb0144c 100644\n--- a/src/plone/api/content.py\n+++ b/src/plone/api/content.py\n@@ -1,15 +1,12 @@\n """Module that provides functionality for content manipulation."""\n \n from copy import copy as _copy\n-from pkg_resources import DistributionNotFound\n-from pkg_resources import get_distribution\n-from pkg_resources import parse_version\n from plone.api import portal\n from plone.api.exc import InvalidParameterError\n from plone.api.validation import at_least_one_of\n from plone.api.validation import mutually_exclusive_parameters\n from plone.api.validation import required_parameters\n-from plone.app.linkintegrity.exceptions import LinkIntegrityNotificationException  # noqa\n+from plone.app.linkintegrity.exceptions import LinkIntegrityNotificationException\n from plone.app.uuid.utils import uuidToObject\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.WorkflowCore import WorkflowException\n@@ -22,11 +19,12 @@\n import random\n import transaction\n \n+\n _marker = []\n \n \n-@required_parameters(\'container\', \'type\')\n-@at_least_one_of(\'id\', \'title\')\n+@required_parameters("container", "type")\n+@at_least_one_of("id", "title")\n def create(\n     container=None,\n     type=None,\n@@ -54,6 +52,7 @@ def create(\n         conflicting with another object in the target container, raise an\n         InvalidParameterError. When True, choose a new, non-conflicting id.\n     :type safe_id: boolean\n+\n     :returns: Content object\n     :raises:\n         KeyError,\n@@ -65,7 +64,7 @@ def create(\n     content_id = not safe_id and id or str(random.randint(0, 99999999))\n \n     if title:\n-        kwargs[\'title\'] = title\n+        kwargs["title"] = title\n \n     try:\n         container.invokeFactory(type, content_id, **kwargs)\n@@ -78,11 +77,11 @@ def create(\n \n         raise InvalidParameterError(\n             "Cannot add a \'{obj_type}\' object to the container.\\n"\n-            \'Allowed types are:\\n\'\n-            \'{allowed_types}\\n\'\n-            \'{message}\'.format(\n+            "Allowed types are:\\n"\n+            "{allowed_types}\\n"\n+            "{message}".format(\n                 obj_type=type,\n-                allowed_types=\'\\n\'.join(sorted(types)),\n+                allowed_types="\\n".join(sorted(types)),\n                 message=str(e),\n             ),\n         )\n@@ -105,8 +104,8 @@ def create(\n     return content\n \n \n-@mutually_exclusive_parameters(\'path\', \'UID\')\n-@at_least_one_of(\'path\', \'UID\')\n+@mutually_exclusive_parameters("path", "UID")\n+@at_least_one_of("path", "UID")\n def get(path=None, UID=None):\n     """Get an object.\n \n@@ -122,9 +121,9 @@ def get(path=None, UID=None):\n     """\n     if path:\n         site = portal.get()\n-        site_absolute_path = \'/\'.join(site.getPhysicalPath())\n-        if not path.startswith(\'{path}\'.format(path=site_absolute_path)):\n-            path = \'{site_path}{relative_path}\'.format(\n+        site_absolute_path = "/".join(site.getPhysicalPath())\n+        if not path.startswith("{path}".format(path=site_absolute_path)):\n+            path = "{site_path}{relative_path}".format(\n                 site_path=site_absolute_path,\n                 relative_path=path,\n             )\n@@ -138,8 +137,8 @@ def get(path=None, UID=None):\n         return uuidToObject(UID)\n \n \n-@required_parameters(\'source\')\n-@at_least_one_of(\'target\', \'id\')\n+@required_parameters("source")\n+@at_least_one_of("target", "id")\n def move(source=None, target=None, id=None, safe_id=False):\n     """Move the object to the target container.\n \n@@ -181,7 +180,7 @@ def move(source=None, target=None, id=None, safe_id=False):\n         return target[source_id]\n \n \n-@required_parameters(\'obj\', \'new_id\')\n+@required_parameters("obj", "new_id")\n def rename(obj=None, new_id=None, safe_id=False):\n     """Rename the object.\n \n@@ -208,8 +207,8 @@ def rename(obj=None, new_id=None, safe_id=False):\n     return container[new_id]\n \n \n-@required_parameters(\'source\')\n-@at_least_one_of(\'target\', \'id\')\n+@required_parameters("source")\n+@at_least_one_of("target", "id")\n def copy(source=None, target=None, id=None, safe_id=False):\n     """Copy the object to the target container.\n \n@@ -243,7 +242,7 @@ def copy(source=None, target=None, id=None, safe_id=False):\n         source.aq_parent.manage_copyObjects(source_id),\n     )\n \n-    new_id = copy_info[0][\'new_id\']\n+    new_id = copy_info[0]["new_id"]\n     if id:\n         if not safe_id and id in target:\n             msg = "Duplicate ID \'{0}\' in \'{1}\' for \'{2}\'"\n@@ -254,8 +253,8 @@ def copy(source=None, target=None, id=None, safe_id=False):\n         return target[new_id]\n \n \n-@mutually_exclusive_parameters(\'obj\', \'objects\')\n-@at_least_one_of(\'obj\', \'objects\')\n+@mutually_exclusive_parameters("obj", "objects")\n+@at_least_one_of("obj", "objects")\n def delete(obj=None, objects=None, check_linkintegrity=True):\n     """Delete the object(s).\n \n@@ -282,7 +281,7 @@ def delete(obj=None, objects=None, check_linkintegrity=True):\n     if check_linkintegrity:\n         site = portal.get()\n         linkintegrity_view = get_view(\n-            name=\'delete_confirmation_info\',\n+            name="delete_confirmation_info",\n             context=site,\n             request=site.REQUEST,\n         )\n@@ -290,14 +289,14 @@ def delete(obj=None, objects=None, check_linkintegrity=True):\n         breaches = linkintegrity_view.get_breaches(objects)\n         if breaches:\n             raise LinkIntegrityNotificationException(\n-                \'Linkintegrity-breaches: {}\'.format(breaches),\n+                "Linkintegrity-breaches: {}".format(breaches),\n             )\n \n     for obj_ in objects:\n         obj_.aq_parent.manage_delObjects([obj_.getId()])\n \n \n-@required_parameters(\'obj\')\n+@required_parameters("obj")\n def get_state(obj=None, default=_marker):\n     """Get the current workflow state of the object.\n \n@@ -310,14 +309,14 @@ def get_state(obj=None, default=_marker):\n         Products.CMFCore.WorkflowCore.WorkflowException\n     :Example: :ref:`content-get-state-example`\n     """\n-    workflow = portal.get_tool(\'portal_workflow\')\n+    workflow = portal.get_tool("portal_workflow")\n \n     if default is not _marker and not workflow.getWorkflowsFor(obj):\n         return default\n \n     # This still raises WorkflowException when the workflow state is broken,\n     # ie \'review_state\' is absent\n-    return workflow.getInfoFor(ob=obj, name=\'review_state\')\n+    return workflow.getInfoFor(ob=obj, name="review_state")\n \n \n # work backwards from our end state\n@@ -353,7 +352,8 @@ def _find_path(maps, path, current_state, start_state):\n \n \n def _wf_transitions_for(workflow, from_state, to_state):\n-    """Get a list of transition IDs required to transition\n+    """Get list of transition IDs required to transition.\n+\n     from ``from_state`` to ``to_state``.\n \n     :param workflow: Workflow object which contains states and transitions\n@@ -394,14 +394,14 @@ def _transition_to(obj, workflow, to_state, **kwargs):\n     # via any route we can find\n     for wf in workflow.getWorkflowsFor(obj):\n         status = workflow.getStatusOf(wf.getId(), obj)\n-        if not status or not status.get(\'review_state\'):\n+        if not status or not status.get("review_state"):\n             continue\n-        if status[\'review_state\'] == to_state:\n+        if status["review_state"] == to_state:\n             return\n \n         transitions = _wf_transitions_for(\n             wf,\n-            status[\'review_state\'],\n+            status["review_state"],\n             to_state,\n         )\n         if not transitions:\n@@ -420,11 +420,13 @@ def _transition_to(obj, workflow, to_state, **kwargs):\n         break\n \n \n-@required_parameters(\'obj\')\n-@at_least_one_of(\'transition\', \'to_state\')\n-@mutually_exclusive_parameters(\'transition\', \'to_state\')\n+@required_parameters("obj")\n+@at_least_one_of("transition", "to_state")\n+@mutually_exclusive_parameters("transition", "to_state")\n def transition(obj=None, transition=None, to_state=None, **kwargs):\n-    """Perform a workflow transition for the object or attempt to perform\n+    """Perform a workflow transition.\n+\n+    for the object or attempt to perform\n     workflow transitions on the object to reach the given state.\n     The later will not guarantee that transition guards conditions can be met.\n \n@@ -442,58 +444,58 @@ def transition(obj=None, transition=None, to_state=None, **kwargs):\n         :class:`~plone.api.exc.InvalidParameterError`\n     :Example: :ref:`content-transition-example`\n     """\n-    workflow = portal.get_tool(\'portal_workflow\')\n+    workflow = portal.get_tool("portal_workflow")\n     if transition is not None:\n         try:\n             workflow.doActionFor(obj, transition, **kwargs)\n         except WorkflowException:\n-            transitions = [\n-                action[\'id\'] for action in workflow.listActions(object=obj)\n-            ]\n+            transitions = [action["id"] for action in workflow.listActions(object=obj)]\n \n             raise InvalidParameterError(\n                 "Invalid transition \'{}\'.\\n"\n-                \'Valid transitions are:\\n\'\n-                \'{}\'.format(transition, \'\\n\'.join(sorted(transitions))),\n+                "Valid transitions are:\\n"\n+                "{}".format(transition, "\\n".join(sorted(transitions))),\n             )\n     else:\n         _transition_to(obj, workflow, to_state, **kwargs)\n-        if workflow.getInfoFor(obj, \'review_state\') != to_state:\n+        if workflow.getInfoFor(obj, "review_state") != to_state:\n             raise InvalidParameterError(\n-                \'Could not find workflow to set state to {} on {}\'.format(\n+                "Could not find workflow to set state to {} on {}".format(\n                     to_state,\n                     obj,\n                 ),\n             )\n \n \n-@required_parameters(\'obj\')\n+@required_parameters("obj")\n def disable_roles_acquisition(obj=None):\n     """Disable acquisition of local roles on given obj.\n+\n     Set __ac_local_roles_block__ = 1 on obj.\n \n     :param obj: [required] Context object to block the acquisition on.\n     :type obj: Content object\n     :Example: :ref:`content-disable-roles-acquisition-example`\n     """\n-    plone_utils = portal.get_tool(\'plone_utils\')\n+    plone_utils = portal.get_tool("plone_utils")\n     plone_utils.acquireLocalRoles(obj, status=0)\n \n \n-@required_parameters(\'obj\')\n+@required_parameters("obj")\n def enable_roles_acquisition(obj=None):\n     """Enable acquisition of local roles on given obj.\n+\n     Set __ac_local_roles_block__ = 0 on obj.\n \n     :param obj: [required] Context object to enable the acquisition on.\n     :type obj: Content object\n     :Example: :ref:`content-enable-roles-acquisition-example`\n     """\n-    plone_utils = portal.get_tool(\'plone_utils\')\n+    plone_utils = portal.get_tool("plone_utils")\n     plone_utils.acquireLocalRoles(obj, status=1)\n \n \n-@required_parameters(\'name\', \'context\', \'request\')\n+@required_parameters("name", "context", "request")\n def get_view(name=None, context=None, request=None):\n     """Get a BrowserView object.\n \n@@ -525,16 +527,16 @@ def get_view(name=None, context=None, request=None):\n     if name not in available_view_names:\n         raise InvalidParameterError(\n             "Cannot find a view with name \'{name}\'.\\n"\n-            \'Available views are:\\n\'\n-            \'{views}\'.format(\n+            "Available views are:\\n"\n+            "{views}".format(\n                 name=name,\n-                views=\'\\n\'.join(sorted(available_view_names)),\n+                views="\\n".join(sorted(available_view_names)),\n             ),\n         )\n     return getMultiAdapter((context, request), name=name)\n \n \n-@required_parameters(\'obj\')\n+@required_parameters("obj")\n def get_uuid(obj=None):\n     """Get the object\'s Universally Unique IDentifier (UUID).\n \n@@ -558,32 +560,32 @@ def _parse_object_provides_query(query):\n         (eg. `{\'query\': [Iface1, Iface2], \'operator\': \'or\'}`)\n     """\n     ifaces = query\n-    operator = \'or\'\n+    operator = "or"\n     query_not = []\n \n     if isinstance(query, dict):\n-        ifaces = query.get(\'query\', [])\n-        operator = query.get(\'operator\', operator)\n-        query_not = query.get(\'not\', [])\n+        ifaces = query.get("query", [])\n+        operator = query.get("operator", operator)\n+        query_not = query.get("not", [])\n         # KeywordIndex also supports "range",\n         # but that\'s not useful for querying object_provides\n \n     if not isinstance(ifaces, (list, tuple)):\n         ifaces = [ifaces]\n-    ifaces = [getattr(x, \'__identifier__\', x) for x in ifaces]\n+    ifaces = [getattr(x, "__identifier__", x) for x in ifaces]\n \n     if not isinstance(query_not, (list, tuple)):\n         query_not = [query_not]\n-    query_not = [getattr(x, \'__identifier__\', x) for x in query_not]\n+    query_not = [getattr(x, "__identifier__", x) for x in query_not]\n \n     result = {}\n \n     if ifaces:\n-        result[\'query\'] = ifaces\n-        result[\'operator\'] = operator\n+        result["query"] = ifaces\n+        result["operator"] = operator\n \n     if query_not:\n-        result[\'not\'] = query_not\n+        result["not"] = query_not\n \n     return result\n \n@@ -604,16 +606,16 @@ def find(context=None, depth=None, **kwargs):\n     query.update(**kwargs)\n \n     # Save the original path to maybe restore it later.\n-    orig_path = query.get(\'path\')\n+    orig_path = query.get("path")\n     if isinstance(orig_path, dict):\n-        orig_path = orig_path.get(\'query\')\n+        orig_path = orig_path.get("query")\n \n     # Passing a context or depth overrides the existing path query,\n     # for now.\n     if context or depth is not None:\n         # Make the path a dictionary, unless it already is.\n         if not isinstance(orig_path, dict):\n-            query[\'path\'] = {}\n+            query["path"] = {}\n \n     # Limit search depth\n     if depth is not None:\n@@ -622,20 +624,20 @@ def find(context=None, depth=None, **kwargs):\n             context = portal.get()\n         else:\n             # Restore the original path\n-            query[\'path\'][\'query\'] = orig_path\n-        query[\'path\'][\'depth\'] = depth\n+            query["path"]["query"] = orig_path\n+        query["path"]["depth"] = depth\n \n     if context is not None:\n-        query[\'path\'][\'query\'] = \'/\'.join(context.getPhysicalPath())\n+        query["path"]["query"] = "/".join(context.getPhysicalPath())\n \n     # Convert interfaces to their identifiers and also allow to query\n     # multiple values using {\'query:[], \'operator\':\'and|or\'}\n-    obj_provides = query.get(\'object_provides\', [])\n+    obj_provides = query.get("object_provides", [])\n     if obj_provides:\n-        query[\'object_provides\'] = _parse_object_provides_query(obj_provides)\n+        query["object_provides"] = _parse_object_provides_query(obj_provides)\n \n     # Make sure we don\'t dump the whole catalog.\n-    catalog = portal.get_tool(\'portal_catalog\')\n+    catalog = portal.get_tool("portal_catalog")\n     indexes = catalog.indexes()\n     valid_indexes = [index for index in query if index in indexes]\n     if not valid_indexes:\ndiff --git a/src/plone/api/env.py b/src/plone/api/env.py\nindex f8ccbc56..096cdc0f 100644\n--- a/src/plone/api/env.py\n+++ b/src/plone/api/env.py\n@@ -1,3 +1,5 @@\n+"""Module provides info about your instance and tools to switch roles and user."""\n+\n from AccessControl.SecurityManagement import getSecurityManager\n from AccessControl.SecurityManagement import newSecurityManager\n from AccessControl.SecurityManagement import setSecurityManager\n@@ -20,8 +22,8 @@\n IS_TEST = None\n \n \n-@at_least_one_of(\'username\', \'user\')\n-@mutually_exclusive_parameters(\'username\', \'user\')\n+@at_least_one_of("username", "user")\n+@mutually_exclusive_parameters("username", "user")\n def adopt_user(username=None, user=None):\n     """Context manager for temporarily switching user inside a block.\n \n@@ -83,7 +85,7 @@ def _adopt_user(user):\n     setSecurityManager(old_security_manager)\n \n \n-@required_parameters(\'roles\')\n+@required_parameters("roles")\n def adopt_roles(roles=None):\n     """Context manager for temporarily switching roles.\n \n@@ -178,7 +180,7 @@ def getWrappedOwner(self):\n \n \n def debug_mode():\n-    """Returns True if your zope instance is running in debug mode.\n+    """Return True if your zope instance is running in debug mode.\n \n     :Example: :ref:`env-debug-mode-example`\n     """\n@@ -195,7 +197,7 @@ def test_mode():\n     if IS_TEST is None:\n         IS_TEST = False\n         for frame in traceback.extract_stack():\n-            if \'testrunner\' in frame[0] or \'testreport/runner\' in frame[0]:\n+            if "testrunner" in frame[0] or "testreport/runner" in frame[0]:\n                 IS_TEST = True\n                 break\n \n@@ -218,7 +220,7 @@ def plone_version():\n     :returns: string denoting what release of Plone this distribution contains\n     :Example: :ref:`env-plone-version-example`\n     """\n-    return get_distribution(\'Products.CMFPlone\').version\n+    return get_distribution("Products.CMFPlone").version\n \n \n def zope_version():\n@@ -227,4 +229,4 @@ def zope_version():\n     :returns: string denoting what release of Zope2 this distribution contains\n     :Example: :ref:`env-zope-version-example`\n     """\n-    return get_distribution(\'Zope2\').version\n+    return get_distribution("Zope2").version\ndiff --git a/src/plone/api/group.py b/src/plone/api/group.py\nindex 30bf4c7e..f85bf78c 100644\n--- a/src/plone/api/group.py\n+++ b/src/plone/api/group.py\n@@ -10,7 +10,7 @@\n from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin\n \n \n-@required_parameters(\'groupname\')\n+@required_parameters("groupname")\n def create(\n     groupname=None,\n     title=None,\n@@ -36,7 +36,7 @@ def create(\n         ValueError\n     :Example: :ref:`group-create-example`\n     """\n-    group_tool = portal.get_tool(\'portal_groups\')\n+    group_tool = portal.get_tool("portal_groups")\n     group_tool.addGroup(\n         groupname,\n         roles,\n@@ -47,7 +47,7 @@ def create(\n     return group_tool.getGroupById(groupname)\n \n \n-@required_parameters(\'groupname\')\n+@required_parameters("groupname")\n def get(groupname=None):\n     """Get a group.\n \n@@ -59,11 +59,11 @@ def get(groupname=None):\n         ValueError\n     :Example: :ref:`group-get-example`\n     """\n-    group_tool = portal.get_tool(\'portal_groups\')\n+    group_tool = portal.get_tool("portal_groups")\n     return group_tool.getGroupById(groupname)\n \n \n-@mutually_exclusive_parameters(\'username\', \'user\')\n+@mutually_exclusive_parameters("username", "user")\n def get_groups(username=None, user=None):\n     """Get all groups or all groups filtered by user.\n \n@@ -87,15 +87,15 @@ def get_groups(username=None, user=None):\n         if not user:\n             raise UserNotFoundError\n \n-    group_tool = portal.get_tool(\'portal_groups\')\n+    group_tool = portal.get_tool("portal_groups")\n \n     if user:\n         try:\n             groups = group_tool.getGroupsForPrincipal(user)\n         except AttributeError as e:\n             # Anonymous users from the Zope acl_users folder will fail on this\n-            if \'portal_groups\' in str(e):\n-                return[]\n+            if "portal_groups" in str(e):\n+                return []\n             raise\n \n         return [get(groupname=group) for group in groups]\n@@ -103,8 +103,8 @@ def get_groups(username=None, user=None):\n     return group_tool.listGroups()\n \n \n-@mutually_exclusive_parameters(\'groupname\', \'group\')\n-@at_least_one_of(\'groupname\', \'group\')\n+@mutually_exclusive_parameters("groupname", "group")\n+@at_least_one_of("groupname", "group")\n def delete(groupname=None, group=None):\n     """Delete a group.\n \n@@ -119,7 +119,7 @@ def delete(groupname=None, group=None):\n         ValueError\n     :Example: :ref:`group-delete-example`\n     """\n-    group_tool = portal.get_tool(\'portal_groups\')\n+    group_tool = portal.get_tool("portal_groups")\n \n     if group:\n         groupname = group.id\n@@ -127,10 +127,10 @@ def delete(groupname=None, group=None):\n     return group_tool.removeGroup(groupname)\n \n \n-@mutually_exclusive_parameters(\'groupname\', \'group\')\n-@at_least_one_of(\'groupname\', \'group\')\n-@mutually_exclusive_parameters(\'username\', \'user\')\n-@at_least_one_of(\'username\', \'user\')\n+@mutually_exclusive_parameters("groupname", "group")\n+@at_least_one_of("groupname", "group")\n+@mutually_exclusive_parameters("username", "user")\n+@at_least_one_of("username", "user")\n def add_user(groupname=None, group=None, username=None, user=None):\n     """Add the user to a group.\n \n@@ -161,14 +161,14 @@ def add_user(groupname=None, group=None, username=None, user=None):\n \n     user_id = user.id\n     group_id = groupname or group.id\n-    portal_groups = portal.get_tool(\'portal_groups\')\n+    portal_groups = portal.get_tool("portal_groups")\n     portal_groups.addPrincipalToGroup(user_id, group_id)\n \n \n-@mutually_exclusive_parameters(\'groupname\', \'group\')\n-@at_least_one_of(\'groupname\', \'group\')\n-@mutually_exclusive_parameters(\'username\', \'user\')\n-@at_least_one_of(\'username\', \'user\')\n+@mutually_exclusive_parameters("groupname", "group")\n+@at_least_one_of("groupname", "group")\n+@mutually_exclusive_parameters("username", "user")\n+@at_least_one_of("username", "user")\n def remove_user(groupname=None, group=None, username=None, user=None):\n     """Remove the user from a group.\n \n@@ -197,12 +197,12 @@ def remove_user(groupname=None, group=None, username=None, user=None):\n             raise UserNotFoundError\n     user_id = user.id\n     group_id = groupname or group.id\n-    portal_groups = portal.get_tool(\'portal_groups\')\n+    portal_groups = portal.get_tool("portal_groups")\n     portal_groups.removePrincipalFromGroup(user_id, group_id)\n \n \n-@mutually_exclusive_parameters(\'groupname\', \'group\')\n-@at_least_one_of(\'groupname\', \'group\')\n+@mutually_exclusive_parameters("groupname", "group")\n+@at_least_one_of("groupname", "group")\n def get_roles(groupname=None, group=None, obj=None, inherit=True):\n     """Get group\'s site-wide or local roles.\n \n@@ -242,16 +242,16 @@ def get_roles(groupname=None, group=None, obj=None, inherit=True):\n         # same as above we use the PloneUser version of getRolesInContext.\n         # Include roles from adapters granting local roles\n         roles = set()\n-        pas = portal.get_tool(\'acl_users\')\n+        pas = portal.get_tool("acl_users")\n         for _, lrmanager in pas.plugins.listPlugins(ILocalRolesPlugin):\n             for adapter in lrmanager._getAdapters(obj):\n                 roles.update(adapter.getRoles(group_id))\n         return list(roles)\n \n \n-@required_parameters(\'roles\')\n-@mutually_exclusive_parameters(\'groupname\', \'group\')\n-@at_least_one_of(\'groupname\', \'group\')\n+@required_parameters("roles")\n+@mutually_exclusive_parameters("groupname", "group")\n+@at_least_one_of("groupname", "group")\n def grant_roles(groupname=None, group=None, roles=None, obj=None):\n     """Grant roles to a group.\n \n@@ -270,7 +270,7 @@ def grant_roles(groupname=None, group=None, roles=None, obj=None):\n         ValueError\n     :Example: :ref:`group-grant-roles-example`\n     """\n-    if \'Anonymous\' in roles or \'Authenticated\' in roles:\n+    if "Anonymous" in roles or "Authenticated" in roles:\n         raise ValueError\n \n     group_id = groupname or group.id\n@@ -282,13 +282,11 @@ def grant_roles(groupname=None, group=None, roles=None, obj=None):\n         actual_roles = obj.get_local_roles_for_userid(group_id)\n \n     actual_roles = [\n-        role\n-        for role in actual_roles\n-        if role not in [\'Anonymous\', \'Authenticated\']\n+        role for role in actual_roles if role not in ["Anonymous", "Authenticated"]\n     ]\n \n     roles = list(set(actual_roles) | set(roles))\n-    portal_groups = portal.get_tool(\'portal_groups\')\n+    portal_groups = portal.get_tool("portal_groups")\n \n     if obj is None:\n         portal_groups.setRolesForGroup(group_id=group_id, roles=roles)\n@@ -296,9 +294,9 @@ def grant_roles(groupname=None, group=None, roles=None, obj=None):\n         obj.manage_setLocalRoles(group_id, roles)\n \n \n-@required_parameters(\'roles\')\n-@mutually_exclusive_parameters(\'groupname\', \'group\')\n-@at_least_one_of(\'groupname\', \'group\')\n+@required_parameters("roles")\n+@mutually_exclusive_parameters("groupname", "group")\n+@at_least_one_of("groupname", "group")\n def revoke_roles(groupname=None, group=None, roles=None, obj=None):\n     """Revoke roles from a group.\n \n@@ -317,7 +315,7 @@ def revoke_roles(groupname=None, group=None, roles=None, obj=None):\n         ValueError\n     :Example: :ref:`group-revoke-roles-example`\n     """\n-    if \'Anonymous\' in roles or \'Authenticated\' in roles:\n+    if "Anonymous" in roles or "Authenticated" in roles:\n         raise ValueError\n \n     group_id = groupname or group.id\n@@ -328,13 +326,11 @@ def revoke_roles(groupname=None, group=None, roles=None, obj=None):\n         actual_roles = get_roles(groupname=group_id, obj=obj, inherit=False)\n \n     actual_roles = [\n-        role\n-        for role in actual_roles\n-        if role not in [\'Anonymous\', \'Authenticated\']\n+        role for role in actual_roles if role not in ["Anonymous", "Authenticated"]\n     ]\n \n     roles = list(set(actual_roles) - set(roles))\n-    portal_groups = portal.get_tool(\'portal_groups\')\n+    portal_groups = portal.get_tool("portal_groups")\n \n     if obj is None:\n         portal_groups.setRolesForGroup(group_id=group_id, roles=roles)\ndiff --git a/src/plone/api/portal.py b/src/plone/api/portal.py\nindex 7b5f1883..9d42a5da 100644\n--- a/src/plone/api/portal.py\n+++ b/src/plone/api/portal.py\n@@ -19,10 +19,9 @@\n from zope.interface.interfaces import IInterface\n \n import datetime as dtime\n-import pkg_resources\n \n \n-logger = getLogger(\'plone.api.portal\')\n+logger = getLogger("plone.api.portal")\n \n try:\n     from Products import PrintingMailHost\n@@ -36,16 +35,14 @@\n     and PrintingMailHost.ENABLED.lower() in PrintingMailHost.TRUISMS\n ):\n     PRINTINGMAILHOST_ENABLED = True\n-elif (\n-    PrintingMailHost.ENABLED is None\n-    and PrintingMailHost.DevelopmentMode is True\n-):\n+elif PrintingMailHost.ENABLED is None and PrintingMailHost.DevelopmentMode is True:\n     PRINTINGMAILHOST_ENABLED = True\n else:\n     # PrintingMailHost only patches in debug mode.\n     # plone.api.env.debug_mode cannot be used here, because .env imports this\n     # file\n     from App.config import getConfiguration\n+\n     PRINTINGMAILHOST_ENABLED = getConfiguration().debug_mode\n \n MISSING = object()\n@@ -61,7 +58,6 @@ def get():\n     :rtype: Portal object\n     :Example: :ref:`portal-get-example`\n     """\n-\n     closest_site = getSite()\n     if closest_site is not None:\n         for potential_portal in closest_site.aq_chain:\n@@ -69,13 +65,13 @@ def get():\n                 return potential_portal\n \n     raise CannotGetPortalError(\n-        \'Unable to get the portal object. More info on \'\n-        \'https://docs.plone.org/develop/plone.api/docs/api/exceptions.html\'\n-        \'#plone.api.exc.CannotGetPortalError\',\n+        "Unable to get the portal object. More info on "\n+        "https://docs.plone.org/develop/plone.api/docs/api/exceptions.html"\n+        "#plone.api.exc.CannotGetPortalError",\n     )\n \n \n-@required_parameters(\'context\')\n+@required_parameters("context")\n def get_navigation_root(context=None):\n     """Get the navigation root object for the context.\n \n@@ -92,7 +88,7 @@ def get_navigation_root(context=None):\n     return getNavigationRootObject(context, get())\n \n \n-@required_parameters(\'name\')\n+@required_parameters("name")\n def get_tool(name=None):\n     """Get a portal tool in a simple way.\n \n@@ -112,17 +108,17 @@ def get_tool(name=None):\n         portal = get()\n         tools = []\n         for id in portal.objectIds():\n-            if id.startswith(\'portal_\'):\n+            if id.startswith("portal_"):\n                 tools.append(id)\n \n         raise InvalidParameterError(\n             "Cannot find a tool with name \'{name}\'.\\n"\n-            \'Available tools are:\\n\'\n-            \'{tools}\'.format(name=name, tools=\'\\n\'.join(tools)),\n+            "Available tools are:\\n"\n+            "{tools}".format(name=name, tools="\\n".join(tools)),\n         )\n \n \n-@required_parameters(\'recipient\', \'subject\', \'body\')\n+@required_parameters("recipient", "subject", "body")\n def send_email(\n     sender=None,\n     recipient=None,\n@@ -153,19 +149,20 @@ def send_email(\n \n     if not PRINTINGMAILHOST_ENABLED:\n         from plone.api import content\n+\n         ctrlOverview = content.get_view(\n             context=portal,\n             request=portal.REQUEST,\n-            name=\'overview-controlpanel\',\n+            name="overview-controlpanel",\n         )\n         if ctrlOverview.mailhost_warning():\n-            raise ValueError(\'MailHost is not configured.\')\n+            raise ValueError("MailHost is not configured.")\n \n-    encoding = get_registry_record(\'plone.email_charset\')\n+    encoding = get_registry_record("plone.email_charset")\n \n     if not sender:\n-        from_address = get_registry_record(\'plone.email_from_address\')\n-        from_name = get_registry_record(\'plone.email_from_name\')\n+        from_address = get_registry_record("plone.email_from_address")\n+        from_name = get_registry_record("plone.email_from_name")\n         sender = formataddr((from_name, from_address))\n         if parseaddr(sender)[1] != from_address:\n             # formataddr probably got confused by special characters.\n@@ -176,7 +173,7 @@ def send_email(\n     if isinstance(body, str):\n         body = body.encode(encoding)\n \n-    host = get_tool(\'MailHost\')\n+    host = get_tool("MailHost")\n     host.send(\n         body,\n         recipient,\n@@ -187,7 +184,7 @@ def send_email(\n     )\n \n \n-@required_parameters(\'datetime\')\n+@required_parameters("datetime")\n def get_localized_time(datetime=None, long_format=False, time_only=False):\n     """Display a date/time in a user-friendly way.\n \n@@ -216,13 +213,13 @@ def get_localized_time(datetime=None, long_format=False, time_only=False):\n         ValueError\n     :Example: :ref:`portal-get-localized-time-example`\n     """\n-    tool = get_tool(name=\'translation_service\')\n+    tool = get_tool(name="translation_service")\n     request = getRequest()\n \n     # isinstance won\'t work because of date -> datetime inheritance\n     if type(datetime) is dtime.date:\n         if time_only:\n-            return \'\'\n+            return ""\n         datetime = dtime.datetime(datetime.year, datetime.month, datetime.day)\n         long_format = False\n \n@@ -230,13 +227,13 @@ def get_localized_time(datetime=None, long_format=False, time_only=False):\n         datetime,\n         long_format,\n         time_only,\n-        domain=\'plonelocales\',\n+        domain="plonelocales",\n         request=request,\n     )\n \n \n-@required_parameters(\'message\', \'request\')\n-def show_message(message=None, request=None, type=\'info\'):\n+@required_parameters("message", "request")\n+def show_message(message=None, request=None, type="info"):\n     """Display a status message.\n \n     :param message: [required] Message to show.\n@@ -252,9 +249,9 @@ def show_message(message=None, request=None, type=\'info\'):\n     IStatusMessage(request).add(message, type=type)\n \n \n-@required_parameters(\'name\')\n+@required_parameters("name")\n def get_registry_record(name=None, interface=None, default=MISSING):\n-    """Get a record value from ``plone.app.registry``\n+    """Get a record value from ``plone.app.registry``.\n \n     :param name: [required] Name\n     :type name: string\n@@ -272,8 +269,7 @@ def get_registry_record(name=None, interface=None, default=MISSING):\n \n     if interface is not None and not IInterface.providedBy(interface):\n         raise InvalidParameterError(\n-            \'The interface parameter has to derive from \'\n-            \'zope.interface.Interface\',\n+            "The interface parameter has to derive from " "zope.interface.Interface",\n         )\n \n     registry = getUtility(IRegistry)\n@@ -282,7 +278,7 @@ def get_registry_record(name=None, interface=None, default=MISSING):\n         records = registry.forInterface(interface, check=False)\n         _marker = object()\n         if getattr(records, name, _marker) != _marker:\n-            return registry[\'{}.{}\'.format(interface.__identifier__, name)]\n+            return registry["{}.{}".format(interface.__identifier__, name)]\n \n         if default is not MISSING:\n             return default\n@@ -291,12 +287,12 @@ def get_registry_record(name=None, interface=None, default=MISSING):\n         records = [key for key in interface.names()]\n         msg = (\n             \'Cannot find a record with name "{name}"\'\n-            \' on interface {identifier}.\\n\'\n-            \'Did you mean?\\n\'\n-            \'{records}\'.format(\n+            " on interface {identifier}.\\n"\n+            "Did you mean?\\n"\n+            "{records}".format(\n                 name=name,\n                 identifier=interface.__identifier__,\n-                records=\'\\n\'.join(records),\n+                records="\\n".join(records),\n             )\n         )\n         raise InvalidParameterError(msg)\n@@ -309,22 +305,20 @@ def get_registry_record(name=None, interface=None, default=MISSING):\n \n     # Show all records that \'look like\' name.\n     # We don\'t dump the whole list, because it 1500+ items.\n-    msg = (\n-        "Cannot find a record with name \'{name}\'".format(name=name)\n-    )\n+    msg = "Cannot find a record with name \'{name}\'".format(name=name)\n     records = [key for key in registry.records.keys() if name in key]\n     if records:\n         msg = (\n-            \'{message}\\n\'\n-            \'Did you mean?:\\n\'\n-            \'{records}\'.format(message=msg, records=\'\\n\'.join(records))\n+            "{message}\\n"\n+            "Did you mean?:\\n"\n+            "{records}".format(message=msg, records="\\n".join(records))\n         )\n     raise InvalidParameterError(msg)\n \n \n-@required_parameters(\'name\', \'value\')\n+@required_parameters("name", "value")\n def set_registry_record(name=None, value=None, interface=None):\n-    """Set a record value in the ``plone.app.registry``\n+    """Set a record value in the ``plone.app.registry``.\n \n     :param name: [required] Name of the record\n     :type name: string\n@@ -340,8 +334,7 @@ def set_registry_record(name=None, value=None, interface=None):\n \n     if interface is not None and not IInterface.providedBy(interface):\n         raise InvalidParameterError(\n-            \'The interface parameter has to derive from \'\n-            \'zope.interface.Interface\',\n+            "The interface parameter has to derive from " "zope.interface.Interface",\n         )\n \n     registry = getUtility(IRegistry)\n@@ -351,8 +344,9 @@ def set_registry_record(name=None, value=None, interface=None):\n         get_registry_record(name=name, interface=interface)\n \n         from zope.schema._bootstrapinterfaces import WrongType\n+\n         try:\n-            registry[interface.__identifier__ + \'.\' + name] = value\n+            registry[interface.__identifier__ + "." + name] = value\n         except WrongType:\n             field_type = None\n             for field in interface.namesAndDescriptions():\n@@ -360,8 +354,8 @@ def set_registry_record(name=None, value=None, interface=None):\n                     field_type = field[1]\n                     break\n             raise InvalidParameterError(\n-                \'The value parameter for the field {name} needs to be \'\n-                \'{of_class} instead of {of_type}\'.format(\n+                "The value parameter for the field {name} needs to be "\n+                "{of_class} instead of {of_type}".format(\n                     name=name,\n                     of_class=str(field_type.__class__),\n                     of_type=type(value),\n@@ -384,8 +378,9 @@ def get_default_language():\n     :Example: :ref:`portal-get-default-language-example`\n     """\n     from plone.i18n.interfaces import ILanguageSchema\n+\n     registry = getUtility(IRegistry)\n-    settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n+    settings = registry.forInterface(ILanguageSchema, prefix="plone")\n     return settings.default_language\n \n \n@@ -399,12 +394,14 @@ def get_current_language(context=None):\n     :Example: :ref:`portal-get-current-language-example`\n     """\n     request = getRequest()\n-    return request.get(\'LANGUAGE\', None) or \\\n-        (context and aq_inner(context).Language()) \\\n+    return (\n+        request.get("LANGUAGE", None)\n+        or (context and aq_inner(context).Language())\n         or get_default_language()\n+    )\n \n \n-def translate(msgid, domain=\'plone\', lang=None):\n+def translate(msgid, domain="plone", lang=None):\n     """Translate a message into a given language.\n \n     Default to current negotiated language if no target language specified.\n@@ -419,13 +416,13 @@ def translate(msgid, domain=\'plone\', lang=None):\n     :rtype: str\n     :Example: :ref:`portal-translate-example`\n     """\n-    translation_service = get_tool(\'translation_service\')\n+    translation_service = get_tool("translation_service")\n     query = {\n-        \'msgid\': msgid,\n-        \'domain\': domain,\n-        \'target_language\': lang,\n+        "msgid": msgid,\n+        "domain": domain,\n+        "target_language": lang,\n     }\n     if lang is None:\n         # Pass the request, so zope.i18n.translate can negotiate the language.\n-        query[\'context\'] = getRequest()\n+        query["context"] = getRequest()\n     return translation_service.utranslate(**query)\ndiff --git a/src/plone/api/relation.py b/src/plone/api/relation.py\nindex 1de0f4cc..3291c88b 100644\n--- a/src/plone/api/relation.py\n+++ b/src/plone/api/relation.py\n@@ -24,6 +24,7 @@\n import logging\n import pkg_resources\n \n+\n try:\n     pkg_resources.get_distribution("plone.app.iterate")\n except pkg_resources.DistributionNotFound:\n@@ -40,14 +41,14 @@\n def _get_field_and_schema_for_fieldname(field_id, portal_type):\n     """Get field and its schema from a portal_type."""\n     # Turn form.widgets.IDublinCore.title into title\n-    field_id = field_id.split(\'.\')[-1]\n+    field_id = field_id.split(".")[-1]\n     for schema in iterSchemataForType(portal_type):\n         field = schema.get(field_id, None)\n         if field is not None:\n             return (field, schema)\n \n \n-@at_least_one_of(\'source\', \'target\', \'relationship\')\n+@at_least_one_of("source", "target", "relationship")\n def get(\n     source=None,\n     target=None,\n@@ -55,7 +56,7 @@ def get(\n     unrestricted=False,\n     as_dict=False,\n ):\n-    """Get specific relations given a source/target/relationship\n+    """Get specific relations given a source/target/relationship.\n \n     :param source: Object that the relations originate from.\n     :type source: Content object\n@@ -73,17 +74,17 @@ def get(\n \n     :Example: :ref:`relation-get-example`\n     """\n-    if source is not None and not base_hasattr(source, \'portal_type\'):\n-        raise InvalidParameterError(\'{} has no portal_type\'.format(source))\n+    if source is not None and not base_hasattr(source, "portal_type"):\n+        raise InvalidParameterError("{} has no portal_type".format(source))\n \n-    if target is not None and not base_hasattr(target, \'portal_type\'):\n-        raise InvalidParameterError(\'{} has no portal_type\'.format(target))\n+    if target is not None and not base_hasattr(target, "portal_type"):\n+        raise InvalidParameterError("{} has no portal_type".format(target))\n \n     if relationship is not None and not isinstance(\n         relationship,\n         str,\n     ):\n-        raise InvalidParameterError(\'{} is no string\'.format(relationship))\n+        raise InvalidParameterError("{} is no string".format(relationship))\n \n     intids = getUtility(IIntIds)\n     relation_catalog = getUtility(ICatalog)\n@@ -100,11 +101,11 @@ def get(\n         checkPermission = getSecurityManager().checkPermission\n \n     if source is not None:\n-        query[\'from_id\'] = intids.getId(source)\n+        query["from_id"] = intids.getId(source)\n     if target is not None:\n-        query[\'to_id\'] = intids.getId(target)\n+        query["to_id"] = intids.getId(target)\n     if relationship is not None:\n-        query[\'from_attribute\'] = relationship\n+        query["from_attribute"] = relationship\n \n     for relation in relation_catalog.findRelations(query):\n         if relation.isBroken():\n@@ -114,8 +115,8 @@ def get(\n             source_obj = relation.from_object\n             target_obj = relation.to_object\n \n-            if checkPermission(\'View\', source_obj) and checkPermission(\n-                \'View\',\n+            if checkPermission("View", source_obj) and checkPermission(\n+                "View",\n                 target_obj,\n             ):\n                 if as_dict:\n@@ -132,9 +133,9 @@ def get(\n     return results\n \n \n-@required_parameters(\'source\', \'target\', \'relationship\')\n+@required_parameters("source", "target", "relationship")\n def create(source=None, target=None, relationship=None):\n-    """Create a relation from source to target using zc.relation\n+    """Create a relation from source to target using zc.relation.\n \n     :param source: [required] Object that the relation will originate from.\n     :type source: Content object\n@@ -147,14 +148,14 @@ def create(source=None, target=None, relationship=None):\n     :type id: string\n     :Example: :ref:`relation-create-example`\n     """\n-    if source is not None and not base_hasattr(source, \'portal_type\'):\n-        raise InvalidParameterError(\'{} has no portal_type\'.format(source))\n+    if source is not None and not base_hasattr(source, "portal_type"):\n+        raise InvalidParameterError("{} has no portal_type".format(source))\n \n-    if target is not None and not base_hasattr(target, \'portal_type\'):\n-        raise InvalidParameterError(\'{} has no portal_type\'.format(target))\n+    if target is not None and not base_hasattr(target, "portal_type"):\n+        raise InvalidParameterError("{} has no portal_type".format(target))\n \n     if not isinstance(relationship, str):\n-        raise InvalidParameterError(\'{} is no string\'.format(relationship))\n+        raise InvalidParameterError("{} is no string".format(relationship))\n \n     relation_catalog = getUtility(ICatalog)\n     intids = getUtility(IIntIds)\n@@ -165,9 +166,9 @@ def create(source=None, target=None, relationship=None):\n     # Check if there is exactly this relation.\n     # If so remove it and create a fresh one.\n     query = {\n-        \'from_attribute\': from_attribute,\n-        \'from_id\': from_id,\n-        \'to_id\': to_id,\n+        "from_attribute": from_attribute,\n+        "from_id": from_id,\n+        "to_id": to_id,\n     }\n     for rel in relation_catalog.findRelations(query):\n         relation_catalog.unindex(rel)\n@@ -178,10 +179,7 @@ def create(source=None, target=None, relationship=None):\n         modifiedContent(source, None)\n         return\n \n-    if (\n-        ITERATE_RELATION_NAME is not None\n-        and from_attribute == ITERATE_RELATION_NAME\n-    ):\n+    if ITERATE_RELATION_NAME is not None and from_attribute == ITERATE_RELATION_NAME:\n         # Iterate relations use a subclass of RelationValue\n         relation = StagingRelationValue(to_id)\n         event._setRelation(source, ITERATE_RELATION_NAME, relation)\n@@ -197,7 +195,7 @@ def create(source=None, target=None, relationship=None):\n         # The relationship is not the name of a dexterity field.\n         # Only create a relation.\n         logger.debug(\n-            \'No dexterity field. Setting relation %s from %s to %s\',\n+            "No dexterity field. Setting relation %s from %s to %s",\n             source.absolute_url(),\n             target.absolute_url(),\n             relationship,\n@@ -209,7 +207,7 @@ def create(source=None, target=None, relationship=None):\n \n     if isinstance(field, RelationList):\n         logger.info(\n-            \'Add relation to relationlist %s from %s to %s\',\n+            "Add relation to relationlist %s from %s to %s",\n             from_attribute,\n             source.absolute_url(),\n             target.absolute_url(),\n@@ -222,7 +220,7 @@ def create(source=None, target=None, relationship=None):\n \n     elif isinstance(field, (Relation, RelationChoice)):\n         logger.info(\n-            \'Add relation %s from %s to %s\',\n+            "Add relation %s from %s to %s",\n             from_attribute,\n             source.absolute_url(),\n             target.absolute_url(),\n@@ -238,16 +236,16 @@ def create(source=None, target=None, relationship=None):\n     # Let\'s create the relationship and log a warning.\n     event._setRelation(source, from_attribute, RelationValue(to_id))\n     logger.warning(\n-        \'Created relation %s on an item that has a field with the same name \'\n-        \'which is not a relation field. Is this what you wanted? \'\n-        \'Relation points from %s to %s\',\n+        "Created relation %s on an item that has a field with the same name "\n+        "which is not a relation field. Is this what you wanted? "\n+        "Relation points from %s to %s",\n         from_attribute,\n         source.absolute_url(),\n         target.absolute_url(),\n     )\n \n \n-@at_least_one_of(\'source\', \'target\', \'relationship\')\n+@at_least_one_of("source", "target", "relationship")\n def delete(source=None, target=None, relationship=None):\n     """Delete relation or relations.\n \n@@ -262,27 +260,27 @@ def delete(source=None, target=None, relationship=None):\n     :type id: string\n     :Example: :ref:`relation-delete-example`\n     """\n-    if source is not None and not base_hasattr(source, \'portal_type\'):\n-        raise InvalidParameterError(\'{} has no portal_type\'.format(source))\n+    if source is not None and not base_hasattr(source, "portal_type"):\n+        raise InvalidParameterError("{} has no portal_type".format(source))\n \n-    if target is not None and not base_hasattr(target, \'portal_type\'):\n-        raise InvalidParameterError(\'{} has no portal_type\'.format(target))\n+    if target is not None and not base_hasattr(target, "portal_type"):\n+        raise InvalidParameterError("{} has no portal_type".format(target))\n \n     if relationship is not None and not isinstance(\n         relationship,\n         str,\n     ):\n-        raise InvalidParameterError(\'{} is no string\'.format(relationship))\n+        raise InvalidParameterError("{} is no string".format(relationship))\n \n     query = {}\n     relation_catalog = getUtility(ICatalog)\n     intids = getUtility(IIntIds)\n     if source is not None:\n-        query[\'from_id\'] = intids.getId(source)\n+        query["from_id"] = intids.getId(source)\n     if target is not None:\n-        query[\'to_id\'] = intids.getId(target)\n+        query["to_id"] = intids.getId(target)\n     if relationship is not None:\n-        query[\'from_attribute\'] = relationship\n+        query["from_attribute"] = relationship\n     for rel in relation_catalog.findRelations(query):\n         source = rel.from_object\n         from_attribute = rel.from_attribute\n@@ -300,7 +298,7 @@ def delete(source=None, target=None, relationship=None):\n         field, _schema = field_and_schema\n         if isinstance(field, RelationList):\n             logger.info(\n-                \'Remove relation from %s to %s from relationlist %s\',\n+                "Remove relation from %s to %s from relationlist %s",\n                 source.absolute_url(),\n                 target.absolute_url(),\n                 from_attribute,\n@@ -312,7 +310,7 @@ def delete(source=None, target=None, relationship=None):\n \n         elif isinstance(field, (Relation, RelationChoice)):\n             logger.info(\n-                \'Remove relation %s from %s to %s\',\n+                "Remove relation %s from %s to %s",\n                 from_attribute,\n                 source.absolute_url(),\n                 target.absolute_url(),\ndiff --git a/src/plone/api/tests/base.py b/src/plone/api/tests/base.py\nindex 654836fd..e39c2a90 100644\n--- a/src/plone/api/tests/base.py\n+++ b/src/plone/api/tests/base.py\n@@ -9,33 +9,34 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n \n-import pkg_resources\n-\n \n class PloneApiLayer(PloneSandboxLayer):\n \n-    defaultBases = (PLONE_FIXTURE, )\n+    defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         """Prepare Zope instance by loading appropriate ZCMLs."""\n         import plone.app.dexterity\n+\n         self.loadZCML(package=plone.app.dexterity)\n         import plone.api\n-        self.loadZCML(package=plone.api, name=\'testing.zcml\')\n+\n+        self.loadZCML(package=plone.api, name="testing.zcml")\n         import plone.app.contenttypes\n+\n         self.loadZCML(package=plone.app.contenttypes)\n \n     def setUpPloneSite(self, portal):\n         """Prepare a Plone instance for testing."""\n         # Install into Plone site using portal_setup\n-        self.applyProfile(portal, \'Products.CMFPlone:plone\')\n-        self.applyProfile(portal, \'plone.app.contenttypes:default\')\n+        self.applyProfile(portal, "Products.CMFPlone:plone")\n+        self.applyProfile(portal, "plone.app.contenttypes:default")\n \n         # Create dummy content types for Dexterity tests\n-        self.applyProfile(portal, \'plone.api:testfixture\')\n+        self.applyProfile(portal, "plone.api:testfixture")\n \n         # Login as manager\n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n         login(portal, TEST_USER_NAME)\n \n     def tearDownZope(self, app):\n@@ -44,10 +45,10 @@ def tearDownZope(self, app):\n \n FIXTURE = PloneApiLayer()\n INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(FIXTURE, ),\n-    name=\'PloneApiLayer:Integration\',\n+    bases=(FIXTURE,),\n+    name="PloneApiLayer:Integration",\n )\n FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(FIXTURE, ),\n-    name=\'PloneApiLayer:Functional\',\n+    bases=(FIXTURE,),\n+    name="PloneApiLayer:Functional",\n )\ndiff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py\nindex 6c0c0922..6a5e7b55 100644\n--- a/src/plone/api/tests/test_content.py\n+++ b/src/plone/api/tests/test_content.py\n@@ -8,9 +8,8 @@\n from plone.api.content import _parse_object_provides_query\n from plone.api.tests.base import INTEGRATION_TESTING\n from plone.app.layout.navigation.interfaces import INavigationRoot\n-from plone.app.linkintegrity.exceptions import LinkIntegrityNotificationException  # NOQA: E501\n+from plone.app.linkintegrity.exceptions import LinkIntegrityNotificationException\n from plone.app.textfield import RichTextValue\n-from plone.dexterity.interfaces import IDexterityContent\n from plone.indexer import indexer\n from plone.uuid.interfaces import IMutableUUID\n from plone.uuid.interfaces import IUUIDGenerator\n@@ -28,12 +27,11 @@\n from zope.lifecycleevent import modified\n from zope.lifecycleevent import ObjectMovedEvent\n \n-import pkg_resources\n import unittest\n \n \n class TestPloneApiContent(unittest.TestCase):\n-    """Unit tests for content manipulation using plone.api"""\n+    """Unit tests for content manipulation using plone.api."""\n \n     layer = INTEGRATION_TESTING\n \n@@ -51,65 +49,66 @@ def setUp(self):\n             |-- conference\n             `-- sprint\n         """\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n         self.blog = api.content.create(\n-            type=\'Link\',\n-            id=\'blog\',\n+            type="Link",\n+            id="blog",\n             container=self.portal,\n         )\n         self.about = api.content.create(\n-            type=\'Folder\',\n-            id=\'about\',\n+            type="Folder",\n+            id="about",\n             container=self.portal,\n         )\n         self.events = api.content.create(\n-            type=\'Folder\',\n-            id=\'events\',\n+            type="Folder",\n+            id="events",\n             container=self.portal,\n         )\n \n         self.team = api.content.create(\n             container=self.about,\n-            type=\'Document\',\n-            id=\'team\',\n+            type="Document",\n+            id="team",\n         )\n         self.contact = api.content.create(\n             container=self.about,\n-            type=\'Document\',\n-            id=\'contact\',\n+            type="Document",\n+            id="contact",\n         )\n \n         self.training = api.content.create(\n             container=self.events,\n-            type=\'Event\',\n-            id=\'training\',\n+            type="Event",\n+            id="training",\n         )\n         self.conference = api.content.create(\n             container=self.events,\n-            type=\'Event\',\n-            id=\'conference\',\n+            type="Event",\n+            id="conference",\n         )\n         self.sprint = api.content.create(\n             container=self.events,\n-            type=\'Event\',\n-            id=\'sprint\',\n+            type="Event",\n+            id="sprint",\n         )\n \n         self.image = api.content.create(\n             container=self.portal,\n-            type=\'Image\',\n-            id=\'image\',\n+            type="Image",\n+            id="image",\n         )\n \n     def verify_intids(self):\n-        """Test that the intids are in order"""\n+        """Test that the intids are in order."""\n         from zope.component import getUtility\n         from zope.intid.interfaces import IIntIds\n \n         intids = getUtility(IIntIds)\n         broken_keys = [\n-            key for key in intids.ids\n+            key\n+            for key in intids.ids\n             if not self.portal.unrestrictedTraverse(key.path, None)\n         ]\n         obsolete_paths = [key.path for key in broken_keys]\n@@ -117,10 +116,7 @@ def verify_intids(self):\n \n         # Objects used as keys with a hash can behave strangely.\n         # I have seen this go wrong in a production site.\n-        weird_keys = [\n-            key for key in intids.ids\n-            if key not in intids.ids\n-        ]\n+        weird_keys = [key for key in intids.ids if key not in intids.ids]\n         weird_paths = [key.path for key in weird_keys]\n         self.assertListEqual(weird_paths, [])\n \n@@ -136,8 +132,8 @@ def test_create_constraints(self):\n         # Check the constraints for the type container\n         with self.assertRaises(MissingParameterError):\n             api.content.create(\n-                type=\'Document\',\n-                id=\'test-doc\',\n+                type="Document",\n+                id="test-doc",\n             )\n \n         # Check the constraints for the type parameter\n@@ -145,14 +141,14 @@ def test_create_constraints(self):\n         with self.assertRaises(MissingParameterError):\n             api.content.create(\n                 container=container,\n-                id=\'test-doc\',\n+                id="test-doc",\n             )\n \n         # Check the constraints for id and title parameters\n         with self.assertRaises(MissingParameterError):\n             api.content.create(\n                 container=container,\n-                type=\'Document\',\n+                type="Document",\n             )\n \n         # Check the constraints for allowed types in the container\n@@ -160,8 +156,8 @@ def test_create_constraints(self):\n         with self.assertRaises(InvalidParameterError):\n             api.content.create(\n                 container=container,\n-                type=\'foo\',\n-                id=\'test-foo\',\n+                type="foo",\n+                id="test-foo",\n             )\n \n         # Check the constraints for allowed types in the container if\n@@ -170,14 +166,14 @@ def test_create_constraints(self):\n         with self.assertRaises(InvalidParameterError) as cm:\n             api.content.create(\n                 container=container,\n-                type=\'foo\',\n-                id=\'test-foo\',\n+                type="foo",\n+                id="test-foo",\n             )\n \n         # Check if the underlying error message is included\n         # in the InvalidParameterError message\n         self.assertIn(\n-            \'No such content type: foo\',\n+            "No such content type: foo",\n             str(cm.exception),\n         )\n \n@@ -185,31 +181,32 @@ def test_create_constraints(self):\n         # Create a folder\n         folder = api.content.create(\n             container=container,\n-            type=\'Folder\',\n-            id=\'test-folder\',\n+            type="Folder",\n+            id="test-folder",\n         )\n         assert folder\n \n         # Constraint the allowed types\n         ENABLED = 1\n-        if getattr(aq_base(folder), \'setConstrainTypesMode\', None):  # AT\n+        if getattr(aq_base(folder), "setConstrainTypesMode", None):  # AT\n             folder.setConstrainTypesMode(ENABLED)\n-            folder.setLocallyAllowedTypes((\'News Item\', ))\n+            folder.setLocallyAllowedTypes(("News Item",))\n         else:  # DX\n             from Products.CMFPlone.interfaces import ISelectableConstrainTypes\n+\n             constraints = ISelectableConstrainTypes(folder)\n             constraints.setConstrainTypesMode(ENABLED)\n-            constraints.setLocallyAllowedTypes((\'News Item\', ))\n+            constraints.setLocallyAllowedTypes(("News Item",))\n \n         with self.assertRaises(InvalidParameterError):\n             api.content.create(\n                 container=folder,\n-                type=\'Document\',\n-                id=\'test-doc\',\n+                type="Document",\n+                id="test-doc",\n             )\n \n     def test_create_dexterity(self):\n-        """Test create dexterity"""\n+        """Test create dexterity."""\n         container = self.portal\n \n         # This section check for DX compatibilty. The custom DX types defined\n@@ -218,45 +215,45 @@ def test_create_dexterity(self):\n         # Create a folder\n         folder = api.content.create(\n             container=container,\n-            type=\'Dexterity Folder\',\n-            id=\'test-folder\',\n+            type="Dexterity Folder",\n+            id="test-folder",\n         )\n         assert folder\n-        self.assertEqual(folder.id, \'test-folder\')\n-        self.assertEqual(folder.portal_type, \'Dexterity Folder\')\n+        self.assertEqual(folder.id, "test-folder")\n+        self.assertEqual(folder.portal_type, "Dexterity Folder")\n \n         # Create an item\n         page = api.content.create(\n             container=folder,\n-            type=\'Dexterity Item\',\n-            id=\'test-item\',\n+            type="Dexterity Item",\n+            id="test-item",\n         )\n         assert page\n-        self.assertEqual(page.id, \'test-item\')\n-        self.assertEqual(page.portal_type, \'Dexterity Item\')\n+        self.assertEqual(page.id, "test-item")\n+        self.assertEqual(page.portal_type, "Dexterity Item")\n \n         # Create an item with a title and without an id\n         page = api.content.create(\n             container=folder,\n-            type=\'Dexterity Item\',\n-            title=\'Test id generated\',\n+            type="Dexterity Item",\n+            title="Test id generated",\n         )\n         assert page\n-        self.assertEqual(page.id, \'test-id-generated\')\n-        self.assertEqual(page.Title(), \'Test id generated\')\n-        self.assertEqual(page.portal_type, \'Dexterity Item\')\n+        self.assertEqual(page.id, "test-id-generated")\n+        self.assertEqual(page.Title(), "Test id generated")\n+        self.assertEqual(page.portal_type, "Dexterity Item")\n \n         # Try to create another item with same id, this should fail\n         with self.assertRaises(BadRequest):\n             api.content.create(\n                 container=folder,\n-                type=\'Dexterity Item\',\n-                id=\'test-item\',\n+                type="Dexterity Item",\n+                id="test-item",\n             )\n         self.verify_intids()\n \n     def test_create_content(self):\n-        """Test create content"""\n+        """Test create content."""\n         container = self.portal\n \n         # This section below is either AT (Plone < 5) or DX (Plone >= 5)\n@@ -266,40 +263,40 @@ def test_create_content(self):\n         # Create a folder\n         folder = api.content.create(\n             container=container,\n-            type=\'Folder\',\n-            id=\'test-folder\',\n+            type="Folder",\n+            id="test-folder",\n         )\n         assert folder\n-        self.assertEqual(folder.id, \'test-folder\')\n-        self.assertEqual(folder.portal_type, \'Folder\')\n+        self.assertEqual(folder.id, "test-folder")\n+        self.assertEqual(folder.portal_type, "Folder")\n \n         # Create a document\n         page = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'test-document\',\n+            type="Document",\n+            id="test-document",\n         )\n         assert page\n-        self.assertEqual(page.id, \'test-document\')\n-        self.assertEqual(page.portal_type, \'Document\')\n+        self.assertEqual(page.id, "test-document")\n+        self.assertEqual(page.portal_type, "Document")\n \n         # Create a document with a title and without an id\n         page = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            title=\'Test id generated\',\n+            type="Document",\n+            title="Test id generated",\n         )\n         assert page\n-        self.assertEqual(page.id, \'test-id-generated\')\n-        self.assertEqual(page.Title(), \'Test id generated\')\n-        self.assertEqual(page.portal_type, \'Document\')\n+        self.assertEqual(page.id, "test-id-generated")\n+        self.assertEqual(page.Title(), "Test id generated")\n+        self.assertEqual(page.portal_type, "Document")\n \n         # Try to create another page with same id, this should fail\n         with self.assertRaises(BadRequest):\n             api.content.create(\n                 container=folder,\n-                type=\'Document\',\n-                id=\'test-document\',\n+                type="Document",\n+                id="test-document",\n             )\n         self.verify_intids()\n \n@@ -309,53 +306,53 @@ def test_create_with_safe_id(self):\n \n         first_page = api.content.create(\n             container=container,\n-            type=\'Document\',\n-            id=\'test-document\',\n+            type="Document",\n+            id="test-document",\n             safe_id=True,\n         )\n         assert first_page\n-        self.assertEqual(first_page.id, \'test-document\')\n-        self.assertEqual(first_page.portal_type, \'Document\')\n+        self.assertEqual(first_page.id, "test-document")\n+        self.assertEqual(first_page.portal_type, "Document")\n \n         # Second page is created with non-conflicting id\n         second_page = api.content.create(\n             container=container,\n-            type=\'Document\',\n-            id=\'test-document\',\n+            type="Document",\n+            id="test-document",\n             safe_id=True,\n         )\n         assert second_page\n-        self.assertEqual(second_page.id, \'test-document-1\')\n-        self.assertEqual(second_page.portal_type, \'Document\')\n+        self.assertEqual(second_page.id, "test-document-1")\n+        self.assertEqual(second_page.portal_type, "Document")\n \n     def test_create_raises_unicodedecodeerror(self):\n         """Test that the create method raises UnicodeDecodeErrors correctly."""\n         site = getGlobalSiteManager()\n-        unicode_exception_message = \'This is a fake unicode error\'\n+        unicode_exception_message = "This is a fake unicode error"\n \n         # register a title indexer that will force a UnicodeDecodeError\n         # during content reindexing\n         @indexer(IContentish, IZCatalog)\n         def force_unicode_error(object):\n             raise UnicodeDecodeError(\n-                \'ascii\',\n-                b\'x\',\n+                "ascii",\n+                b"x",\n                 1,\n                 5,\n                 unicode_exception_message,\n             )\n \n-        site.registerAdapter(factory=force_unicode_error, name=\'Title\')\n+        site.registerAdapter(factory=force_unicode_error, name="Title")\n \n         def unregister_indexer():\n-            site.unregisterAdapter(factory=force_unicode_error, name=\'Title\')\n+            site.unregisterAdapter(factory=force_unicode_error, name="Title")\n \n         self.addCleanup(unregister_indexer)\n \n         with self.assertRaises(UnicodeDecodeError) as ude:\n             api.content.create(\n-                type=\'Folder\',\n-                id=\'test-unicode-folder\',\n+                type="Folder",\n+                id="test-unicode-folder",\n                 container=self.portal,\n             )\n \n@@ -363,115 +360,117 @@ def unregister_indexer():\n         self.assertEqual(ude.exception.reason, unicode_exception_message)\n \n     def test_create_at_with_title_in_request(self):\n-        """ Test that content gets created with the correct title, even if\n-            request.form[\'title\'] already exists and has a different value.\n-            This can occur, for example, when adding a Plone with an enabled\n-            product that creates a site structure. In that case, the \'title\'\n-            would be that of the portal.\n-            Only AT content types are affected, due to content.processForm.\n+        """Test that content gets created with the correct title.\n+\n+        even if request.form[\'title\'] already exists and has a different value.\n+        This can occur, for example, when adding a Plone with an enabled\n+        product that creates a site structure. In that case, the \'title\'\n+        would be that of the portal.\n+        Only AT content types are affected, due to content.processForm.\n         """\n-        leaked_title = \'This should not be set on content items\'\n-        self.layer[\'request\'].form[\'title\'] = leaked_title\n+        leaked_title = "This should not be set on content items"\n+        self.layer["request"].form["title"] = leaked_title\n \n         container = self.portal\n \n         # Create a folder\n         folder = api.content.create(\n             container=container,\n-            type=\'Folder\',\n-            title=\'Test folder\',\n+            type="Folder",\n+            title="Test folder",\n         )\n \n-        self.assertEqual(folder.title, \'Test folder\')\n+        self.assertEqual(folder.title, "Test folder")\n \n         # Create a document\n         page = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            title=\'Test document\',\n+            type="Document",\n+            title="Test document",\n         )\n \n-        self.assertEqual(page.title, \'Test document\')\n+        self.assertEqual(page.title, "Test document")\n \n     def test_create_collection(self):\n         """Test create a Collection."""\n         collection = api.content.create(\n             container=self.portal,\n-            type=\'Collection\',\n-            title=\'Mandelbrot set\',\n-            description=\'Image gallery of a zoom sequence\',\n+            type="Collection",\n+            title="Mandelbrot set",\n+            description="Image gallery of a zoom sequence",\n             query=[\n                 {\n-                 \'i\': \'Type\',\n-                 \'o\': \'plone.app.querystring.operation.string.is\',\n-                 \'v\': [\'Image\'],\n+                    "i": "Type",\n+                    "o": "plone.app.querystring.operation.string.is",\n+                    "v": ["Image"],\n                 },\n             ],\n         )\n-        self.assertEqual(collection.Title(), \'Mandelbrot set\')\n+        self.assertEqual(collection.Title(), "Mandelbrot set")\n \n     def test_create_event(self):\n         """Test create a event."""\n         import datetime\n+\n         today = datetime.datetime.now()\n         tomorrow = today + datetime.timedelta(days=1)\n         event = api.content.create(\n             container=self.portal,\n-            type=\'Event\',\n-            title=\'My event\',\n+            type="Event",\n+            title="My event",\n             start=today,\n             end=tomorrow,\n         )\n         self.assertEqual(event.start, today)\n         self.assertEqual(event.end, tomorrow)\n-        results = api.content.find(Title=\'My event\')\n+        results = api.content.find(Title="My event")\n         self.assertEqual(len(results), 1)\n         self.assertEqual(results[0].start, today)\n         self.assertEqual(results[0].end, tomorrow)\n \n     def test_get_constraints(self):\n         """Test the constraints when content is fetched with get."""\n-\n         # Path and UID parameter can not be given together\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.content.get(\n-                path=\'/\',\n-                UID=\'dummy\',\n+                path="/",\n+                UID="dummy",\n             )\n \n         # Either a path or UID must be given\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.content.get()\n \n     def test_get(self):\n         """Test the getting of content in varios ways."""\n-\n         # Test getting the about folder by path and UID\n-        about_by_path = api.content.get(\'/about\')\n+        about_by_path = api.content.get("/about")\n         about_by_uid = api.content.get(UID=self.about.UID())\n         self.assertEqual(self.about, about_by_path)\n         self.assertEqual(self.about, about_by_uid)\n \n         # Test getting the team document by path and UID\n-        team_by_path = api.content.get(\'/about/team\')\n+        team_by_path = api.content.get("/about/team")\n         team_by_uid = api.content.get(UID=self.team.UID())\n         self.assertEqual(self.team, team_by_path)\n         self.assertEqual(self.team, team_by_uid)\n \n         # Test getting the team document by path that has portal id included\n         team_by_path = api.content.get(\n-            \'/{}/about/team\'.format(self.portal.getId()),\n+            "/{}/about/team".format(self.portal.getId()),\n         )\n         self.assertEqual(self.team, team_by_path)\n \n         # Test getting an non-existing item by path and UID\n-        self.assertFalse(api.content.get(\'/spam/ham\'))\n-        self.assertFalse(api.content.get(UID=\'bacon\'))\n+        self.assertFalse(api.content.get("/spam/ham"))\n+        self.assertFalse(api.content.get(UID="bacon"))\n \n         # Test getting a non-existing subfolder by path\n-        self.assertFalse(api.content.get(\'/about/spam\'))\n+        self.assertFalse(api.content.get("/about/spam"))\n \n     def test_move_constraints(self):\n         """Test the constraints for moving content."""\n@@ -493,64 +492,66 @@ def test_move_constraints(self):\n \n     def test_move(self):\n         """Test moving of content."""\n-\n         container = self.portal\n \n         # Move contact to the same folder (basically a rename)\n-        nucontact = api.content.move(source=self.contact, id=\'nu-contact\')\n-        assert (container[\'about\'][\'nu-contact\']\n-                and container[\'about\'][\'nu-contact\'] == nucontact)\n-        assert \'contact\' not in container[\'about\'].keys()\n+        nucontact = api.content.move(source=self.contact, id="nu-contact")\n+        assert (\n+            container["about"]["nu-contact"]\n+            and container["about"]["nu-contact"] == nucontact\n+        )\n+        assert "contact" not in container["about"].keys()\n \n         # Move team page to portal root\n         team = api.content.move(source=self.team, target=container)\n-        assert container[\'team\'] and container[\'team\'] == team\n-        assert \'team\' not in container[\'about\'].keys()\n+        assert container["team"] and container["team"] == team\n+        assert "team" not in container["about"].keys()\n \n         # When moving objects we can change the id\n-        team = container[\'team\']\n+        team = container["team"]\n         ourteam = api.content.move(\n             source=team,\n             target=self.about,\n-            id=\'our-team\',\n+            id="our-team",\n+        )\n+        assert (\n+            container["about"]["our-team"] and container["about"]["our-team"] == ourteam\n         )\n-        assert (container[\'about\'][\'our-team\']\n-                and container[\'about\'][\'our-team\'] == ourteam)\n-        assert \'team\' not in container.keys()\n+        assert "team" not in container.keys()\n \n         # Test with safe_id option when moving content\n         api.content.create(\n-            container=self.about, type=\'Link\', id=\'link-to-blog\',\n+            container=self.about,\n+            type="Link",\n+            id="link-to-blog",\n         )\n         linktoblog1 = api.content.move(\n             source=self.blog,\n             target=self.about,\n-            id=\'link-to-blog\',\n+            id="link-to-blog",\n             safe_id=True,\n         )\n-        assert (container[\'about\'][\'link-to-blog-1\']\n-                and container[\'about\'][\'link-to-blog-1\'] == linktoblog1)\n-        assert \'link-to-blog\' not in container.keys()\n+        assert (\n+            container["about"]["link-to-blog-1"]\n+            and container["about"]["link-to-blog-1"] == linktoblog1\n+        )\n+        assert "link-to-blog" not in container.keys()\n \n-        api.content.move(source=self.conference, id=\'conference-renamed\')\n-        self.assertEqual(self.conference.id, \'conference-renamed\')\n+        api.content.move(source=self.conference, id="conference-renamed")\n+        self.assertEqual(self.conference.id, "conference-renamed")\n \n         # Move folderish object\n         about = api.content.move(\n             source=container.about,\n             target=container.events,\n         )\n-        assert (\n-            container[\'events\'][\'about\']\n-            and container[\'events\'][\'about\'] == about\n-        )\n+        assert container["events"]["about"] and container["events"]["about"] == about\n         self.verify_intids()\n \n     def test_move_no_move_if_target_is_source_parent(self):\n-        """Test that trying to move an object to its parent is a noop"""\n-\n+        """Test that trying to move an object to its parent is a noop."""\n         target = self.contact.aq_parent\n-        with mock.patch.object(target, \'manage_pasteObjects\'):\n+        with mock.patch.object(target, "manage_pasteObjects"):\n             api.content.move(\n                 source=self.contact,\n                 target=target,\n@@ -573,7 +574,6 @@ def test_rename_constraints(self):\n \n     def test_rename(self):\n         """Test renaming of content."""\n-\n         container = self.portal\n         sm = getGlobalSiteManager()\n         firedEvents = []\n@@ -581,15 +581,17 @@ def test_rename(self):\n         def recordEvent(event):\n             firedEvents.append(event.__class__)\n \n-        sm.registerHandler(recordEvent, (IObjectWillBeMovedEvent, ))\n-        sm.registerHandler(recordEvent, (IObjectMovedEvent, ))\n-        sm.registerHandler(recordEvent, (IObjectModifiedEvent, ))\n+        sm.registerHandler(recordEvent, (IObjectWillBeMovedEvent,))\n+        sm.registerHandler(recordEvent, (IObjectMovedEvent,))\n+        sm.registerHandler(recordEvent, (IObjectModifiedEvent,))\n \n         # Rename contact\n-        nucontact = api.content.rename(obj=self.contact, new_id=\'nu-contact\')\n-        assert (container[\'about\'][\'nu-contact\']\n-                and container[\'about\'][\'nu-contact\'] == nucontact)\n-        assert \'contact\' not in container[\'about\'].keys()\n+        nucontact = api.content.rename(obj=self.contact, new_id="nu-contact")\n+        assert (\n+            container["about"]["nu-contact"]\n+            and container["about"]["nu-contact"] == nucontact\n+        )\n+        assert "contact" not in container["about"].keys()\n \n         self.assertCountEqual(\n             firedEvents,\n@@ -599,41 +601,49 @@ def recordEvent(event):\n                 ContainerModifiedEvent,\n             ],\n         )\n-        sm.unregisterHandler(recordEvent, (IObjectWillBeMovedEvent, ))\n-        sm.unregisterHandler(recordEvent, (IObjectMovedEvent, ))\n-        sm.unregisterHandler(recordEvent, (IObjectModifiedEvent, ))\n+        sm.unregisterHandler(recordEvent, (IObjectWillBeMovedEvent,))\n+        sm.unregisterHandler(recordEvent, (IObjectMovedEvent,))\n+        sm.unregisterHandler(recordEvent, (IObjectModifiedEvent,))\n \n         # Test with safe_id option when moving content\n         api.content.create(\n-            container=self.about, type=\'Link\', id=\'link-to-blog\',\n+            container=self.about,\n+            type="Link",\n+            id="link-to-blog",\n         )\n         linktoblog1 = api.content.rename(\n-            obj=container[\'about\'][\'link-to-blog\'],\n-            new_id=\'link-to-blog\',\n+            obj=container["about"]["link-to-blog"],\n+            new_id="link-to-blog",\n             safe_id=True,\n         )\n-        assert (container[\'about\'][\'link-to-blog-1\']\n-                and container[\'about\'][\'link-to-blog-1\'] == linktoblog1)\n-        assert \'link-to-blog\' not in container.keys()\n+        assert (\n+            container["about"]["link-to-blog-1"]\n+            and container["about"]["link-to-blog-1"] == linktoblog1\n+        )\n+        assert "link-to-blog" not in container.keys()\n \n         # Rename to existing id\n         api.content.create(\n-            container=self.about, type=\'Link\', id=\'link-to-blog\',\n+            container=self.about,\n+            type="Link",\n+            id="link-to-blog",\n         )\n \n         with self.assertRaises(CopyError):\n             api.content.rename(\n-                obj=container[\'about\'][\'link-to-blog\'],\n-                new_id=\'link-to-blog-1\',\n+                obj=container["about"]["link-to-blog"],\n+                new_id="link-to-blog-1",\n             )\n         linktoblog11 = api.content.rename(\n-            obj=container[\'about\'][\'link-to-blog\'],\n-            new_id=\'link-to-blog-1\',\n+            obj=container["about"]["link-to-blog"],\n+            new_id="link-to-blog-1",\n             safe_id=True,\n         )\n-        assert (container[\'about\'][\'link-to-blog-1-1\']\n-                and container[\'about\'][\'link-to-blog-1-1\'] == linktoblog11)\n-        assert \'link-to-blog\' not in container.keys()\n+        assert (\n+            container["about"]["link-to-blog-1-1"]\n+            and container["about"]["link-to-blog-1-1"] == linktoblog11\n+        )\n+        assert "link-to-blog" not in container.keys()\n \n     def test_rename_same_id(self):\n         api.content.rename(obj=self.contact, new_id=self.contact.getId())\n@@ -643,18 +653,18 @@ def test_rename_same_folder(self):\n         # already an existing folderish item with that id, it should choose\n         # a new name.\n \n-        events = self.portal[\'events\']\n-        about = self.portal[\'about\']\n+        events = self.portal["events"]\n+        about = self.portal["about"]\n         api.content.rename(\n             obj=events,\n-            new_id=\'about\',\n+            new_id="about",\n             safe_id=True,\n         )\n \n-        assert self.portal[\'about\']\n-        assert self.portal[\'about-1\']\n-        assert self.portal[\'about\'].aq_base is about.aq_base\n-        assert self.portal[\'about-1\'].aq_base is events.aq_base\n+        assert self.portal["about"]\n+        assert self.portal["about-1"]\n+        assert self.portal["about"].aq_base is about.aq_base\n+        assert self.portal["about-1"].aq_base is events.aq_base\n \n     def test_copy_constraints(self):\n         """Test the constraints for moving content."""\n@@ -676,41 +686,41 @@ def test_copy(self):\n \n         # Copy team page to portal root\n         team = api.content.copy(source=self.team, target=container)\n-        assert container[\'team\'] and container[\'team\'] == team\n+        assert container["team"] and container["team"] == team\n         assert (\n-            container[\'about\'][\'team\']\n-            and container[\'about\'][\'team\'] != team\n+            container["about"]["team"] and container["about"]["team"] != team\n         )  # old content still available\n \n         # When copying objects we can change the id\n         ourteam = api.content.copy(\n             source=self.team,\n             target=self.about,\n-            id=\'our-team\',\n+            id="our-team",\n         )\n-        assert(\n-            container[\'about\'][\'our-team\']\n-            and container[\'about\'][\'our-team\'] == ourteam\n+        assert (\n+            container["about"]["our-team"] and container["about"]["our-team"] == ourteam\n         )\n \n         # When copying whithout target parameter should take source parent\n-        api.content.copy(source=self.team, id=\'our-team-no-target\')\n-        assert container[\'about\'][\'our-team-no-target\']\n+        api.content.copy(source=self.team, id="our-team-no-target")\n+        assert container["about"]["our-team-no-target"]\n \n         # Test the safe_id option when moving content\n         api.content.create(\n-            container=self.about, type=\'Link\', id=\'link-to-blog\',\n+            container=self.about,\n+            type="Link",\n+            id="link-to-blog",\n         )\n \n         linktoblog1 = api.content.copy(\n             source=self.blog,\n             target=self.about,\n-            id=\'link-to-blog\',\n+            id="link-to-blog",\n             safe_id=True,\n         )\n-        assert(\n-            container[\'about\'][\'link-to-blog-1\']\n-            and container[\'about\'][\'link-to-blog-1\'] == linktoblog1\n+        assert (\n+            container["about"]["link-to-blog-1"]\n+            and container["about"]["link-to-blog-1"] == linktoblog1\n         )\n \n         # Copy folderish content under target\n@@ -718,28 +728,29 @@ def test_copy(self):\n             source=container.about,\n             target=container.events,\n         )\n-        assert(\n-            container[\'events\'][\'about\']\n-            and container[\'events\'][\'about\'] == about\n-        )\n+        assert container["events"]["about"] and container["events"]["about"] == about\n \n         # When copying with safe_id=True, the prior created item should not be\n         # renamed, and the copied item should have a sane postfix\n \n         # Create a products folder\n         products = api.content.create(\n-            type=\'Folder\', id=\'products\', container=self.portal,\n+            type="Folder",\n+            id="products",\n+            container=self.portal,\n         )\n \n         # Create a item inside the products folder\n         item = api.content.create(\n-            container=products, type=\'Document\', id=\'item\',\n+            container=products,\n+            type="Document",\n+            id="item",\n         )\n \n-        api.content.copy(source=item, id=\'item\', safe_id=True)\n+        api.content.copy(source=item, id="item", safe_id=True)\n \n-        assert container[\'products\'][\'item-1\']\n-        assert container[\'products\'][\'item\']\n+        assert container["products"]["item-1"]\n+        assert container["products"]["item"]\n \n         # When copying with safe_id=True, the created bargain with the id=item\n         # should not be renamed, and the item copied from the products folder\n@@ -748,34 +759,35 @@ def test_copy(self):\n \n         # Create a second folder named bargains\n         bargains = api.content.create(\n-            type=\'Folder\',\n-            id=\'bargains\',\n+            type="Folder",\n+            id="bargains",\n             container=self.portal,\n         )\n \n         # Create a bargain inside the bargains folder with the id="item"\n         bargain = api.content.create(\n-            type=\'Document\',\n-            id=\'item\',\n+            type="Document",\n+            id="item",\n             container=bargains,\n         )\n         api.content.copy(\n             source=item,\n             target=bargains,\n-            id=\'item\',\n+            id="item",\n             safe_id=True,\n         )\n \n-        assert container[\'bargains\'][\'item-1\']\n-        assert container[\'bargains\'][\'item\']\n-        assert container[\'bargains\'][\'item\'].aq_base is bargain.aq_base\n-        assert container[\'products\'][\'item\']\n+        assert container["bargains"]["item-1"]\n+        assert container["bargains"]["item"]\n+        assert container["bargains"]["item"].aq_base is bargain.aq_base\n+        assert container["products"]["item"]\n \n     def test_copy_same_id(self):\n         obj = self.contact\n \n         # Using the same id should fail\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.content.copy(obj, obj.__parent__, obj.id)\n \n@@ -787,6 +799,7 @@ def test_delete_constraints(self):\n \n         # When no parameters are given an error is raised\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.content.delete()\n \n@@ -797,28 +810,29 @@ def test_delete(self):\n \n         # The content item must be given as parameter\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.content.delete()\n \n         # Delete the contact page\n         api.content.delete(self.contact)\n-        self.assertNotIn(\'contact\', container[\'about\'].keys())\n+        self.assertNotIn("contact", container["about"].keys())\n \n     def test_delete_multiple(self):\n         """Test deleting multiple content items."""\n \n         container = self.portal\n-        api.content.copy(source=container[\'about\'], target=container)\n-        api.content.copy(source=container[\'about\'], target=container[\'events\'])\n+        api.content.copy(source=container["about"], target=container)\n+        api.content.copy(source=container["about"], target=container["events"])\n \n         api.content.delete(\n             objects=[\n-                container[\'copy_of_about\'],\n-                container[\'events\'][\'about\'],\n+                container["copy_of_about"],\n+                container["events"]["about"],\n             ],\n         )\n-        self.assertNotIn(\'copy_of_about\', container)\n-        self.assertNotIn(\'about\', container[\'events\'])\n+        self.assertNotIn("copy_of_about", container)\n+        self.assertNotIn("about", container["events"])\n \n     def test_delete_no_objs(self):\n         # Check that we allow passing in an empty list of objects.\n@@ -829,7 +843,7 @@ def test_delete_ignore_linkintegrity(self):\n         self._set_text(self.team, \'<a href="contact">contact</a>\')\n         # Delete the contact page\n         api.content.delete(self.contact, check_linkintegrity=False)\n-        self.assertNotIn(\'contact\', self.portal[\'about\'].keys())\n+        self.assertNotIn("contact", self.portal["about"].keys())\n \n     def test_delete_check_linkintegrity(self):\n         """Test deleting a content item with a link pointed at it."""\n@@ -837,7 +851,7 @@ def test_delete_check_linkintegrity(self):\n         # Delete the contact page\n         with self.assertRaises(LinkIntegrityNotificationException):\n             api.content.delete(self.contact)\n-        self.assertIn(\'contact\', self.portal[\'about\'].keys())\n+        self.assertIn("contact", self.portal["about"].keys())\n \n     def test_delete_multiple_check_linkintegrity(self):\n         """Test deleting multiple item with linkintegrity-breaches."""\n@@ -846,8 +860,8 @@ def test_delete_multiple_check_linkintegrity(self):\n         # Delete the contact page\n         with self.assertRaises(LinkIntegrityNotificationException):\n             api.content.delete(objects=[self.blog, self.contact])\n-        self.assertIn(\'contact\', self.portal[\'about\'].keys())\n-        self.assertIn(\'blog\', self.portal.keys())\n+        self.assertIn("contact", self.portal["about"].keys())\n+        self.assertIn("blog", self.portal.keys())\n \n     def test_delete_multiple_ignore_linkintegrity(self):\n         """Test deleting multiple items ignoring linkintegrity-breaches."""\n@@ -858,8 +872,8 @@ def test_delete_multiple_ignore_linkintegrity(self):\n             objects=[self.blog, self.contact],\n             check_linkintegrity=False,\n         )\n-        self.assertNotIn(\'contact\', self.portal[\'about\'].keys())\n-        self.assertNotIn(\'blog\', self.portal.keys())\n+        self.assertNotIn("contact", self.portal["about"].keys())\n+        self.assertNotIn("blog", self.portal.keys())\n \n     def test_delete_with_internal_breaches(self):\n         """Test deleting multiple with internal linkintegrity breaches."""\n@@ -868,9 +882,9 @@ def test_delete_with_internal_breaches(self):\n         # Deleting pages with unresolved breaches throws an exception\n         with self.assertRaises(LinkIntegrityNotificationException):\n             api.content.delete(objects=[self.blog, self.about])\n-        self.assertIn(\'about\', self.portal.keys())\n-        self.assertIn(\'blog\', self.portal.keys())\n-        self.assertIn(\'training\', self.portal[\'events\'].keys())\n+        self.assertIn("about", self.portal.keys())\n+        self.assertIn("blog", self.portal.keys())\n+        self.assertIn("training", self.portal["events"].keys())\n \n     def test_delete_with_resolved_internal_breaches(self):\n         """Test deleting multiple with internal linkintegrity breaches."""\n@@ -878,19 +892,19 @@ def test_delete_with_resolved_internal_breaches(self):\n         self._set_text(self.training, \'<a href="../blog">contact</a>\')\n         # Deleting pages with resolved breaches throws no exception\n         api.content.delete(objects=[self.blog, self.training, self.about])\n-        self.assertNotIn(\'about\', self.portal.keys())\n-        self.assertNotIn(\'blog\', self.portal.keys())\n-        self.assertNotIn(\'training\', self.portal[\'events\'].keys())\n+        self.assertNotIn("about", self.portal.keys())\n+        self.assertNotIn("blog", self.portal.keys())\n+        self.assertNotIn("training", self.portal["events"].keys())\n \n     def _set_text(self, obj, text):\n-        obj.text = RichTextValue(text, \'text/html\', \'text/x-html-safe\')\n+        obj.text = RichTextValue(text, "text/html", "text/x-html-safe")\n         modified(obj)\n \n     def test_find(self):\n         """Test the finding of content in various ways."""\n \n         # Find documents\n-        documents = api.content.find(portal_type=\'Document\')\n+        documents = api.content.find(portal_type="Document")\n         self.assertEqual(len(documents), 2)\n \n     def test_find_empty_query(self):\n@@ -903,13 +917,13 @@ def test_find_invalid_indexes(self):\n         """Make sure invalid indexes yield no results"""\n \n         # All invalid indexes yields no results\n-        documents = api.content.find(invalid_index=\'henk\')\n+        documents = api.content.find(invalid_index="henk")\n         self.assertEqual(len(documents), 0)\n \n         # But at least one valid index does.\n         documents = api.content.find(\n-            invalid_index=\'henk\',\n-            portal_type=\'Document\',\n+            invalid_index="henk",\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 2)\n \n@@ -917,53 +931,53 @@ def test_find_context(self):\n         # Find documents in context\n         documents = api.content.find(\n             context=self.portal.about,\n-            portal_type=\'Document\',\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 2)\n         documents = api.content.find(\n             context=self.portal.events,\n-            portal_type=\'Document\',\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 0)\n \n     def test_find_depth(self):\n         # Limit search depth from portal root\n-        documents = api.content.find(depth=2, portal_type=\'Document\')\n+        documents = api.content.find(depth=2, portal_type="Document")\n         self.assertEqual(len(documents), 2)\n-        documents = api.content.find(depth=1, portal_type=\'Document\')\n+        documents = api.content.find(depth=1, portal_type="Document")\n         self.assertEqual(len(documents), 0)\n \n         # Limit search depth with explicit context\n         documents = api.content.find(\n             context=self.portal.about,\n             depth=1,\n-            portal_type=\'Document\',\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 2)\n         documents = api.content.find(\n             context=self.portal.about,\n             depth=0,\n-            portal_type=\'Document\',\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 0)\n \n         # Limit search depth with explicit path\n         documents = api.content.find(\n-            path=\'/\'.join(self.portal.about.getPhysicalPath()),\n+            path="/".join(self.portal.about.getPhysicalPath()),\n             depth=1,\n-            portal_type=\'Document\',\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 2)\n         documents = api.content.find(\n-            path=\'/\'.join(self.portal.about.getPhysicalPath()),\n+            path="/".join(self.portal.about.getPhysicalPath()),\n             depth=0,\n-            portal_type=\'Document\',\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 0)\n         documents = api.content.find(\n-            path=\'/\'.join(self.portal.events.getPhysicalPath()),\n+            path="/".join(self.portal.events.getPhysicalPath()),\n             depth=1,\n-            portal_type=\'Document\',\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 0)\n \n@@ -982,16 +996,16 @@ def test_find_interface_dict(self):\n         # Find documents by interface combined with \'and\'\n \n         alsoProvides(self.portal.events, INavigationRoot)\n-        self.portal.events.reindexObject(idxs=[\'object_provides\'])\n+        self.portal.events.reindexObject(idxs=["object_provides"])\n \n         # standard catalog query using identifiers\n         brains = api.content.find(\n             object_provides={\n-                \'query\': [\n+                "query": [\n                     IContentish.__identifier__,\n                     INavigationRoot.__identifier__,\n                 ],\n-                \'operator\': \'and\',\n+                "operator": "and",\n             },\n         )\n         self.assertEqual(len(brains), 1)\n@@ -999,112 +1013,111 @@ def test_find_interface_dict(self):\n         # plone.api query using interfaces\n         brains = api.content.find(\n             object_provides={\n-                \'query\': [IContentish, INavigationRoot],\n-                \'operator\': \'and\',\n+                "query": [IContentish, INavigationRoot],\n+                "operator": "and",\n             },\n         )\n         self.assertEqual(len(brains), 1)\n \n     def test_find_interface_dict__include_not_query(self):\n-        """Check if not query in object_provides is functional.\n-        """\n+        """Check if not query in object_provides is functional."""\n \n         brains_all = api.content.find(\n-            object_provides={\'query\': IContentish.__identifier__},\n+            object_provides={"query": IContentish.__identifier__},\n         )\n \n         alsoProvides(self.portal.events, INavigationRoot)\n-        self.portal.events.reindexObject(idxs=[\'object_provides\'])\n+        self.portal.events.reindexObject(idxs=["object_provides"])\n \n         brains = api.content.find(\n             object_provides={\n-                \'query\': IContentish.__identifier__,\n-                \'not\': INavigationRoot.__identifier__,\n+                "query": IContentish.__identifier__,\n+                "not": INavigationRoot.__identifier__,\n             },\n         )\n \n         self.assertEqual(len(brains_all) - len(brains), 1)\n \n     def test_find_interface_dict__all_options(self):\n-        """ Check for all options in a object_provides query are correctly\n+        """Check for all options in a object_provides query are correctly\n         transformed.\n         """\n         parser = _parse_object_provides_query\n \n         self.assertDictEqual(\n-            parser({\'query\': IContentish}),\n-            {\'query\': [IContentish.__identifier__], \'operator\': \'or\'},\n+            parser({"query": IContentish}),\n+            {"query": [IContentish.__identifier__], "operator": "or"},\n         )\n \n         self.assertDictEqual(\n             parser(\n                 {\n-                    \'query\': [IContentish, INavigationRoot.__identifier__],\n-                    \'operator\': \'and\',\n+                    "query": [IContentish, INavigationRoot.__identifier__],\n+                    "operator": "and",\n                 },\n             ),\n             {\n-                \'query\': [IContentish.__identifier__, INavigationRoot.__identifier__],\n-                \'operator\': \'and\',\n+                "query": [IContentish.__identifier__, INavigationRoot.__identifier__],\n+                "operator": "and",\n             },\n         )\n \n         self.assertDictEqual(\n-            parser({\'not\': IContentish}),\n-            {\'not\': [IContentish.__identifier__]},\n+            parser({"not": IContentish}),\n+            {"not": [IContentish.__identifier__]},\n         )\n \n         self.assertDictEqual(\n-            parser({\'not\': [IContentish, INavigationRoot.__identifier__]}),\n-            {\'not\': [IContentish.__identifier__, INavigationRoot.__identifier__]},\n+            parser({"not": [IContentish, INavigationRoot.__identifier__]}),\n+            {"not": [IContentish.__identifier__, INavigationRoot.__identifier__]},\n         )\n \n         self.assertDictEqual(\n-            parser({\'not\': IContentish}),\n-            {\'not\': [IContentish.__identifier__]},\n+            parser({"not": IContentish}),\n+            {"not": [IContentish.__identifier__]},\n         )\n \n         self.assertDictEqual(\n-            parser({\'query\': IContentish, \'operator\': \'and\', \'not\': INavigationRoot}),\n+            parser({"query": IContentish, "operator": "and", "not": INavigationRoot}),\n             {\n-                \'query\': [IContentish.__identifier__],\n-                \'operator\': \'and\',\n-                \'not\': [INavigationRoot.__identifier__],\n+                "query": [IContentish.__identifier__],\n+                "operator": "and",\n+                "not": [INavigationRoot.__identifier__],\n             },\n         )\n \n     def test_find_dict(self):\n         # Pass arguments using dict\n-        path = \'/\'.join(self.portal.about.getPhysicalPath())\n+        path = "/".join(self.portal.about.getPhysicalPath())\n \n         query = {\n-            \'portal_type\': \'Document\',\n-            \'path\': {\'query\': path, \'depth\': 2},\n+            "portal_type": "Document",\n+            "path": {"query": path, "depth": 2},\n         }\n         documents = api.content.find(**query)\n         self.assertEqual(len(documents), 2)\n \n         query = {\n-            \'portal_type\': \'Document\',\n-            \'path\': {\'query\': path, \'depth\': 0},\n+            "portal_type": "Document",\n+            "path": {"query": path, "depth": 0},\n         }\n         documents = api.content.find(**query)\n         self.assertEqual(len(documents), 0)\n \n         # This is a bit awkward, but it is nice if this does not crash.\n         query = {\n-            \'depth\': 2,\n-            \'portal_type\': \'Document\',\n-            \'path\': {\'query\': path},\n+            "depth": 2,\n+            "portal_type": "Document",\n+            "path": {"query": path},\n         }\n         documents = api.content.find(**query)\n         self.assertEqual(len(documents), 2)\n \n-        path = \'/\'.join(self.portal.events.getPhysicalPath())\n+        path = "/".join(self.portal.events.getPhysicalPath())\n         query = {\n-            \'depth\': 2,\n-            \'portal_type\': \'Document\',\n-            \'path\': {\'query\': path},\n+            "depth": 2,\n+            "portal_type": "Document",\n+            "path": {"query": path},\n         }\n         documents = api.content.find(**query)\n         self.assertEqual(len(documents), 0)\n@@ -1117,75 +1130,76 @@ def test_find_parse_object_provides_query(self):\n         self.assertDictEqual(\n             parse(IContentish),\n             {\n-                \'query\': [IContentish.__identifier__],\n-                \'operator\': \'or\',\n+                "query": [IContentish.__identifier__],\n+                "operator": "or",\n             },\n         )\n         # single identifier\n         self.assertDictEqual(\n             parse(IContentish.__identifier__),\n             {\n-                \'query\': [IContentish.__identifier__],\n-                \'operator\': \'or\',\n+                "query": [IContentish.__identifier__],\n+                "operator": "or",\n             },\n         )\n         # multiple interfaces/identifiers (mixed as list)\n         self.assertDictEqual(\n             parse([INavigationRoot, IContentish.__identifier__]),\n             {\n-                \'query\': [\n+                "query": [\n                     INavigationRoot.__identifier__,\n                     IContentish.__identifier__,\n                 ],\n-                \'operator\': \'or\',\n+                "operator": "or",\n             },\n         )\n         # multiple interfaces/identifiers (mixed as tuple)\n         self.assertDictEqual(\n             parse((INavigationRoot, IContentish.__identifier__)),\n             {\n-                \'query\': [\n+                "query": [\n                     INavigationRoot.__identifier__,\n                     IContentish.__identifier__,\n                 ],\n-                \'operator\': \'or\',\n+                "operator": "or",\n             },\n         )\n         # full blown query - interfaces/identifiers mixed\n         self.assertDictEqual(\n-            parse({\n-                \'query\': [INavigationRoot, IContentish.__identifier__],\n-                \'operator\': \'and\',\n-            }),\n+            parse(\n+                {\n+                    "query": [INavigationRoot, IContentish.__identifier__],\n+                    "operator": "and",\n+                }\n+            ),\n             {\n-                \'query\': [\n+                "query": [\n                     INavigationRoot.__identifier__,\n                     IContentish.__identifier__,\n                 ],\n-                \'operator\': \'and\',\n+                "operator": "and",\n             },\n         )\n \n     def test_get_state(self):\n         """Test retrieving the workflow state of a content item."""\n-\n         # This should fail because an content item is mandatory\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.content.get_state()\n \n         review_state = api.content.get_state(obj=self.blog)\n-        self.assertEqual(review_state, \'private\')\n+        self.assertEqual(review_state, "private")\n \n     def test_get_state_default_value(self):\n-        """Test passing in a default value.\n-        """\n+        """Test passing in a default value."""\n         # A WorkflowException is raise if no workflow is defined for the obj.\n         # This is normally the case for Images and Files.\n         with self.assertRaises(WorkflowException):\n             review_state = api.content.get_state(obj=self.image)\n \n-        default = \'my default value\'\n+        default = "my default value"\n         review_state = api.content.get_state(obj=self.image, default=default)\n         review_state is default\n \n@@ -1205,81 +1219,82 @@ def test_transition(self):\n             api.content.transition(obj=mock.Mock())\n \n         with self.assertRaises(MissingParameterError):\n-            api.content.transition(transition=\'publish\')\n+            api.content.transition(transition="publish")\n \n         with self.assertRaises(InvalidParameterError):\n             api.content.transition(\n                 obj=mock.Mock(),\n-                transition=\'publish\',\n-                to_state=\'published\',\n+                transition="publish",\n+                to_state="published",\n             )\n \n-        api.content.transition(obj=self.blog, transition=\'publish\')\n+        api.content.transition(obj=self.blog, transition="publish")\n         review_state = api.content.get_state(obj=self.blog)\n-        self.assertEqual(review_state, \'published\')\n+        self.assertEqual(review_state, "published")\n \n         # This should fail because the transition doesn\'t exist\n         with self.assertRaises(InvalidParameterError) as cm:\n             api.content.transition(\n-                transition=\'foo\', obj=self.blog,\n+                transition="foo",\n+                obj=self.blog,\n             )\n \n         self.maxDiff = None  # to see assert diff\n         self.assertMultiLineEqual(\n             str(cm.exception),\n             "Invalid transition \'foo\'.\\n"\n-            \'Valid transitions are:\\n\'\n-            \'reject\\n\'\n-            \'retract\',\n+            "Valid transitions are:\\n"\n+            "reject\\n"\n+            "retract",\n         )\n \n         # change the workflow of a document so that there is no transition\n         # that goes directly from one state to another\n-        portal_workflow = api.portal.get_tool(\'portal_workflow\')\n-        portal_workflow._chains_by_type[\'File\'] = tuple(\n-            [\'intranet_workflow\'],\n+        portal_workflow = api.portal.get_tool("portal_workflow")\n+        portal_workflow._chains_by_type["File"] = tuple(\n+            ["intranet_workflow"],\n         )\n         test_file = api.content.create(\n             container=api.portal.get(),\n-            type=\'File\',\n-            id=\'test-file\',\n+            type="File",\n+            id="test-file",\n         )\n         self.assertEqual(\n             api.content.get_state(test_file),\n-            \'internal\',\n+            "internal",\n         )\n         api.content.transition(\n             obj=test_file,\n-            transition=\'hide\',\n+            transition="hide",\n         )\n \n         # the following transition must move through the internal state\n         api.content.transition(\n             obj=test_file,\n-            to_state=\'internally_published\',\n+            to_state="internally_published",\n         )\n         self.assertEqual(\n             api.content.get_state(test_file),\n-            \'internally_published\',\n+            "internally_published",\n         )\n \n     def test_diable_roles_acquisition(self):\n-        """ Test disabling local roles acquisition.\n-        """\n+        """Test disabling local roles acquisition."""\n         # This should fail because an content item is mandatory\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.content.disable_roles_acquisition()\n \n         api.content.disable_roles_acquisition(obj=self.blog)\n-        blog_ac_flag = getattr(self.blog, \'__ac_local_roles_block__\', None)\n+        blog_ac_flag = getattr(self.blog, "__ac_local_roles_block__", None)\n         self.assertTrue(blog_ac_flag)\n \n     def test_enable_roles_acquisition(self):\n-        """ Test enabling local roles acquisition.\n-        """\n+        """Test enabling local roles acquisition."""\n         # This should fail because an content item is mandatory\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.content.enable_roles_acquisition()\n \n@@ -1288,13 +1303,14 @@ def test_enable_roles_acquisition(self):\n         self.blog.__ac_local_roles_block__ = 1\n \n         api.content.enable_roles_acquisition(obj=self.blog)\n-        blog_ac_flag = getattr(self.blog, \'__ac_local_roles_block__\', None)\n+        blog_ac_flag = getattr(self.blog, "__ac_local_roles_block__", None)\n         self.assertFalse(blog_ac_flag)\n \n     def test_get_view_constraints(self):\n         """Test the constraints for deleting content."""\n         from plone.api.exc import MissingParameterError\n-        request = self.layer[\'request\']\n+\n+        request = self.layer["request"]\n \n         # When no parameters are given an error is raised\n         with self.assertRaises(MissingParameterError):\n@@ -1310,38 +1326,38 @@ def test_get_view_constraints(self):\n         # context is required\n         with self.assertRaises(MissingParameterError):\n             api.content.get_view(\n-                name=\'plone\',\n+                name="plone",\n                 request=request,\n             )\n \n         # request is required\n         with self.assertRaises(MissingParameterError):\n             api.content.get_view(\n-                name=\'plone\',\n+                name="plone",\n                 context=self.blog,\n             )\n \n     def test_get_view(self):\n         """Test the view."""\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n \n         view = api.content.get_view(\n-            name=\'plone\',\n+            name="plone",\n             context=self.blog,\n             request=request,\n         )\n         self.assertEqual(aq_base(view.context), aq_base(self.blog))\n-        self.assertEqual(view.__name__, \'plone\')\n-        self.assertTrue(hasattr(view, \'toLocalizedTime\'))\n-        self.assertTrue(hasattr(view, \'isDefaultPageInFolder\'))\n+        self.assertEqual(view.__name__, "plone")\n+        self.assertTrue(hasattr(view, "toLocalizedTime"))\n+        self.assertTrue(hasattr(view, "isDefaultPageInFolder"))\n \n         # Try another standard view.\n         view = api.content.get_view(\n-            name=\'plone_context_state\',\n+            name="plone_context_state",\n             context=self.blog,\n             request=request,\n         )\n-        self.assertEqual(view.__name__, \'plone_context_state\')\n+        self.assertEqual(view.__name__, "plone_context_state")\n         self.assertEqual(aq_base(view.canonical_object()), aq_base(self.blog))\n \n     def test_get_uuid(self):\n@@ -1358,8 +1374,8 @@ def test_get_uuid(self):\n \n         # Set the UUID and compare it with the one we get from our function\n         # Dexterity\n-        container.invokeFactory(\'Dexterity Item\', \'test-dexterity\')\n-        item = container[\'test-dexterity\']\n+        container.invokeFactory("Dexterity Item", "test-dexterity")\n+        item = container["test-dexterity"]\n         uuid1 = generator()\n         IMutableUUID(item).set(uuid1)\n \n@@ -1369,12 +1385,12 @@ def test_get_uuid(self):\n \n     def test_get_view_view_not_found(self):\n         """Test that error msg lists available views if a view is not found."""\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         from plone.api.exc import InvalidParameterError\n \n         with self.assertRaises(InvalidParameterError) as cm:\n             api.content.get_view(\n-                name=\'foo\',\n+                name="foo",\n                 context=self.blog,\n                 request=request,\n             )\n@@ -1382,9 +1398,7 @@ def test_get_view_view_not_found(self):\n         self.maxDiff = None  # to see assert diff\n         self.assertTrue(\n             str(cm.exception).startswith(\n-                "Cannot find a view with name \'foo\'.\\n"\n-                \'Available views are:\\n\'\n-                \'\\n\',\n+                "Cannot find a view with name \'foo\'.\\n" "Available views are:\\n" "\\n",\n             ),\n         )\n \n@@ -1392,21 +1406,21 @@ def test_get_view_view_not_found(self):\n         # Test against only these rather than the full list. Otherwise, this\n         # test has to maintain an up-to-date list of every view in Plone.\n         should_be_theres = (\n-            \'adapter\',\n-            \'authenticator\',\n-            \'checkDocument\',\n-            \'get_macros\',\n-            \'history\',\n-            \'plone\',\n-            \'plone_tools\',\n-            \'resource\',\n-            \'search\',\n-            \'sharing\',\n-            \'skin\',\n-            \'text-transform\',\n-            \'uuid\',\n-            \'view\',\n+            "adapter",\n+            "authenticator",\n+            "checkDocument",\n+            "get_macros",\n+            "history",\n+            "plone",\n+            "plone_tools",\n+            "resource",\n+            "search",\n+            "sharing",\n+            "skin",\n+            "text-transform",\n+            "uuid",\n+            "view",\n         )\n \n         for should_be_there in should_be_theres:\n-            self.assertIn((should_be_there + \'\\n\'), str(cm.exception))\n+            self.assertIn((should_be_there + "\\n"), str(cm.exception))\ndiff --git a/src/plone/api/tests/test_doctests.py b/src/plone/api/tests/test_doctests.py\nindex 2e4c761c..26a2fb18 100644\n--- a/src/plone/api/tests/test_doctests.py\n+++ b/src/plone/api/tests/test_doctests.py\n@@ -12,8 +12,8 @@\n from zope.testing import renormalizing\n \n import doctest\n-import manuel.myst.codeblock\n import manuel.doctest\n+import manuel.myst.codeblock\n import manuel.testing\n import os\n import pkg_resources\n@@ -24,7 +24,7 @@\n logger = getLogger(__name__)\n \n try:\n-    pkg_resources.get_distribution(\'plone.app.contenttypes\')\n+    pkg_resources.get_distribution("plone.app.contenttypes")\n except pkg_resources.DistributionNotFound:\n     HAS_PA_CONTENTTYPES = False\n else:\n@@ -37,45 +37,52 @@\n     | doctest.REPORT_ONLY_FIRST_FAILURE\n )\n \n-CHECKER = renormalizing.RENormalizing([\n-    # Normalize the generated UUID values to always compare equal.\n-    (re.compile(\n-        r\'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\'),\n-        \'<UUID>\',\n-     ),\n-])\n+CHECKER = renormalizing.RENormalizing(\n+    [\n+        # Normalize the generated UUID values to always compare equal.\n+        (\n+            re.compile(r"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"),\n+            "<UUID>",\n+        ),\n+    ]\n+)\n \n \n def setUp(self):  # pragma: no cover\n     """Shared test environment set-up, ran before every test."""\n-    layer = self.globs[\'layer\']\n+    layer = self.globs["layer"]\n     # Update global variables within the tests.\n-    self.globs.update({\n-        \'portal\': layer[\'portal\'],\n-        \'request\': layer[\'request\'],\n-        \'browser\': Browser(layer[\'app\']),\n-        \'TEST_USER_NAME\': TEST_USER_NAME,\n-        \'TEST_USER_PASSWORD\': TEST_USER_PASSWORD,\n-        \'self\': self,\n-    })\n-\n-    portal = self.globs[\'portal\']\n-    browser = self.globs[\'browser\']\n+    self.globs.update(\n+        {\n+            "portal": layer["portal"],\n+            "request": layer["request"],\n+            "browser": Browser(layer["app"]),\n+            "TEST_USER_NAME": TEST_USER_NAME,\n+            "TEST_USER_PASSWORD": TEST_USER_PASSWORD,\n+            "self": self,\n+        }\n+    )\n+\n+    portal = self.globs["portal"]\n+    browser = self.globs["browser"]\n \n     browser.handleErrors = True\n     portal.error_log._ignored_exceptions = ()\n \n-    setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+    setRoles(portal, TEST_USER_ID, ["Manager"])\n \n-    applyProfile(portal, \'Products.CMFPlone:plone\')\n+    applyProfile(portal, "Products.CMFPlone:plone")\n \n     # Plone 5 support\n     if HAS_PA_CONTENTTYPES:\n-        applyProfile(portal, \'plone.app.contenttypes:default\')\n+        applyProfile(portal, "plone.app.contenttypes:default")\n \n \n def DocFileSuite(\n-    testfile, flags=FLAGS, setUp=setUp, layer=PLONE_INTEGRATION_TESTING,\n+    testfile,\n+    flags=FLAGS,\n+    setUp=setUp,\n+    layer=PLONE_INTEGRATION_TESTING,\n ):\n     """Returns a test suite configured with a test layer.\n \n@@ -109,7 +116,7 @@ def DocFileSuite(\n \n def test_suite():\n     """Find .rst files and test code examples in them."""\n-    path = \'doctests\'\n+    path = "doctests"\n     doctests = []\n     docs_path = os.path.join(os.path.dirname(__file__), path)\n \n@@ -118,7 +125,7 @@ def test_suite():\n             doctests.append(DocFileSuite(os.path.join(path, filename)))\n         except OSError:\n             logger.warning(\n-                \'test_doctest.py skipping {file}\'.format(file=filename),\n+                "test_doctest.py skipping {file}".format(file=filename),\n             )\n \n     return unittest.TestSuite(doctests)\ndiff --git a/src/plone/api/tests/test_env.py b/src/plone/api/tests/test_env.py\nindex f6402a99..28e632f9 100644\n--- a/src/plone/api/tests/test_env.py\n+++ b/src/plone/api/tests/test_env.py\n@@ -15,16 +15,16 @@ class ExampleException(Exception):\n \n \n role_mapping = (\n-    (\'ppp\', (\'Manager\', \'VIP\', \'Member\')),\n-    (\'qqq\', (\'Manager\', \'VIP\')),\n-    (\'rrr\', (\'Manager\')),\n+    ("ppp", ("Manager", "VIP", "Member")),\n+    ("qqq", ("Manager", "VIP")),\n+    ("rrr", ("Manager")),\n )\n \n # Version of Zope and Plone should be something like\n # \'X.Y\' or \'X.Y.Z\' or \'X.Y.Z.A\'\n # It could also include a package status id (Alpha, Beta or RC).\n # When run against coredev, we may have a .devN suffix as well.\n-version_regexp = r\'^(\\d+(\\.\\d+){1,3})(a\\d+|b\\d+|rc\\d+)?(\\.dev\\d)?$\'\n+version_regexp = r"^(\\d+(\\.\\d+){1,3})(a\\d+|b\\d+|rc\\d+)?(\\.dev\\d)?$"\n \n \n class HasProtectedMethods(SimpleItem):\n@@ -38,15 +38,15 @@ def __init__(self, id):\n     def public_method(self):\n         pass\n \n-    @security.protected(\'ppp\')\n+    @security.protected("ppp")\n     def pp_method(self):\n         pass\n \n-    @security.protected(\'qqq\')\n+    @security.protected("qqq")\n     def qq_method(self):\n         pass\n \n-    @security.protected(\'rrr\')\n+    @security.protected("rrr")\n     def rr_method(self):\n         pass\n \n@@ -65,8 +65,8 @@ class TestPloneApiEnv(unittest.TestCase):\n \n     def setUp(self):\n         """Shared test environment set-up, ran before every test."""\n-        portal = self.portal = self.layer[\'portal\']\n-        portal._setObject(\'hpm\', HasProtectedMethods(\'hpm\'))\n+        portal = self.portal = self.layer["portal"]\n+        portal._setObject("hpm", HasProtectedMethods("hpm"))\n \n         # This isn\'t necessary to the unit tests, it makes debugging them\n         # easier when they go wrong. Like "verbose-security on" in zope.conf\n@@ -76,37 +76,37 @@ def setUp(self):\n         # Roles need to be created by name before we can assign permissions\n         # to them or grant them to users.\n         # \'Member\' and \'Manager\' already exist by default, we need to add \'VIP\'\n-        portal._addRole(\'VIP\')\n+        portal._addRole("VIP")\n \n         for permission, roles in role_mapping:\n             portal.manage_permission(permission, roles, 1)\n \n         api.user.create(\n-            username=\'worker\',\n-            email=\'ordinary_person@example.com\',\n-            password=\'password1\',\n-            roles=(\'Member\',),\n+            username="worker",\n+            email="ordinary_person@example.com",\n+            password="password1",\n+            roles=("Member",),\n         )\n \n         api.user.create(\n-            username=\'boss\',\n-            email=\'important_person@example.com\',\n-            password=\'123456\',\n-            roles=(\'Member\', \'VIP\'),\n+            username="boss",\n+            email="important_person@example.com",\n+            password="123456",\n+            roles=("Member", "VIP"),\n         )\n \n         api.user.create(\n-            username=\'superhuman\',\n-            email=\'xavier@example.com\',\n-            password=\'think_carefully\',\n-            roles=(\'Member\', \'Manager\'),\n+            username="superhuman",\n+            email="xavier@example.com",\n+            password="think_carefully",\n+            roles=("Member", "Manager"),\n         )\n \n         self._old_sm = AccessControl.SecurityManagement.getSecurityManager()\n \n         AccessControl.SecurityManagement.newSecurityManager(\n             self.portal.REQUEST,\n-            self.portal.acl_users.getUser(\'boss\'),\n+            self.portal.acl_users.getUser("boss"),\n         )\n \n     def tearDown(self):\n@@ -124,78 +124,98 @@ def should_forbid(self, names):\n \n     def test_test_defaults(self):\n         """Test that the default set-up does what I expect it to."""\n-        self.should_allow([\n-            \'public_method\',\n-            \'pp_method\',\n-            \'qq_method\',\n-        ])\n-        self.should_forbid([\n-            \'rr_method\',\n-            \'private_method\',\n-        ])\n+        self.should_allow(\n+            [\n+                "public_method",\n+                "pp_method",\n+                "qq_method",\n+            ]\n+        )\n+        self.should_forbid(\n+            [\n+                "rr_method",\n+                "private_method",\n+            ]\n+        )\n \n     def test_adopt_manager_role(self):\n         """Test that we can adopt the Manager role temporarily."""\n-        with api.env.adopt_roles(roles=[\'Manager\']):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-            ])\n+        with api.env.adopt_roles(roles=["Manager"]):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                ]\n+            )\n         self.test_test_defaults()\n \n     def test_adopt_manager_string_role(self):\n         """Test that we can adopt the Manager role temporarily."""\n-        with api.env.adopt_roles(roles=\'Manager\'):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-            ])\n+        with api.env.adopt_roles(roles="Manager"):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                ]\n+            )\n         self.test_test_defaults()\n \n     def test_adopt_fewers_role(self):\n         """Test that we can adopt a non-Manager role temporarily."""\n-        with api.env.adopt_roles(roles=[\'Member\']):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-            ])\n-            self.should_forbid([\n-                \'qq_method\',\n-                \'rr_method\',\n-                \'private_method\',\n-            ])\n+        with api.env.adopt_roles(roles=["Member"]):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "qq_method",\n+                    "rr_method",\n+                    "private_method",\n+                ]\n+            )\n         self.test_test_defaults()\n \n     def test_drop_to_anon(self):\n         """Test that we can drop roles."""\n-        with api.env.adopt_roles(roles=[\'Anonymous\']):\n-            self.should_allow([\n-                \'public_method\',\n-            ])\n-            self.should_forbid([\n-                \'pp_method\',\n-                \'rr_method\',\n-                \'qq_method\',\n-                \'private_method\',\n-            ])\n+        with api.env.adopt_roles(roles=["Anonymous"]):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "pp_method",\n+                    "rr_method",\n+                    "qq_method",\n+                    "private_method",\n+                ]\n+            )\n \n     def test_content_owner_role(self):\n         """Tests that adopting a role should not affect content ownership."""\n-        with api.env.adopt_roles(roles=[\'Manager\']):\n+        with api.env.adopt_roles(roles=["Manager"]):\n             doc2 = api.content.create(\n                 container=self.portal,\n-                type=\'Document\',\n-                id=\'doc_2\',\n+                type="Document",\n+                id="doc_2",\n             )\n \n         intended = self.portal.acl_users.getUser(api.user.get_current().id)\n@@ -204,192 +224,245 @@ def test_content_owner_role(self):\n \n     def test_become_manager_by_name(self):\n         """Tests that becoming a manager user works."""\n-        with api.env.adopt_user(username=\'superhuman\'):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-            ])\n+        with api.env.adopt_user(username="superhuman"):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                ]\n+            )\n         self.test_test_defaults()\n \n     def test_become_manager_by_obj(self):\n         """Tests that becoming a manager with user from api.user works."""\n-        with api.env.adopt_user(user=api.user.get(username=\'superhuman\')):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-            ])\n+        with api.env.adopt_user(user=api.user.get(username="superhuman")):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                ]\n+            )\n         self.test_test_defaults()\n \n     def test_become_manager_by_acl_user(self):\n         """Tests that becoming a user with user from acl_users works."""\n         acl_users = api.portal.get().acl_users\n \n-        au_ordinary = acl_users.getUser(\'worker\')\n+        au_ordinary = acl_users.getUser("worker")\n         with api.env.adopt_user(user=au_ordinary):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n-\n-        au_manager = acl_users.getUser(\'superhuman\')\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n+\n+        au_manager = acl_users.getUser("superhuman")\n         with api.env.adopt_user(user=au_manager):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-            ])\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                ]\n+            )\n \n     def test_become_ordinary(self):\n         """Tests that becoming a user with fewer permissions works."""\n-        with api.env.adopt_user(username=\'worker\'):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n+        with api.env.adopt_user(username="worker"):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n         self.test_test_defaults()\n \n     def test_adopted_content_ownership(self):\n         """Tests that content created while user-switched is owned."""\n-        with api.env.adopt_user(username=\'superhuman\'):\n+        with api.env.adopt_user(username="superhuman"):\n             doc3 = api.content.create(\n                 container=self.portal,\n-                type=\'Document\',\n-                id=\'doc_3\',\n+                type="Document",\n+                id="doc_3",\n             )\n-        intended = self.portal.acl_users.getUser(\'superhuman\')\n+        intended = self.portal.acl_users.getUser("superhuman")\n         actual = doc3.getOwner()\n         self.assertEqual(actual.getPhysicalPath(), intended.getPhysicalPath())\n \n     def test_adopted_nested_ownership(self):\n         """Test deep nesting of adopt_user and adopt_roles blocks."""\n-        with api.env.adopt_user(username=\'worker\'):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n-            with api.env.adopt_roles([\'Anonymous\']):\n-                self.should_allow([\n-                    \'public_method\',\n-                ])\n-                self.should_forbid([\n-                    \'private_method\',\n-                    \'pp_method\',\n-                    \'qq_method\',\n-                    \'rr_method\',\n-                ])\n-                with api.env.adopt_user(username=\'boss\'):\n-                    self.should_allow([\n-                        \'public_method\',\n-                        \'pp_method\',\n-                        \'qq_method\',\n-                    ])\n-                    self.should_forbid([\n-                        \'private_method\',\n-                        \'rr_method\',\n-                    ])\n-                    with api.env.adopt_roles([\'Manager\']):\n-                        self.should_allow([\n-                            \'public_method\',\n-                            \'pp_method\',\n-                            \'qq_method\',\n-                            \'rr_method\',\n-                        ])\n-                        self.should_forbid([\n-                            \'private_method\',\n-                        ])\n-\n-                        with api.env.adopt_roles([\'Anonymous\']):\n-                            self.should_allow([\n-                                \'public_method\',\n-                            ])\n-                            self.should_forbid([\n-                                \'private_method\',\n-                                \'pp_method\',\n-                                \'qq_method\',\n-                                \'rr_method\',\n-                            ])\n+        with api.env.adopt_user(username="worker"):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n+            with api.env.adopt_roles(["Anonymous"]):\n+                self.should_allow(\n+                    [\n+                        "public_method",\n+                    ]\n+                )\n+                self.should_forbid(\n+                    [\n+                        "private_method",\n+                        "pp_method",\n+                        "qq_method",\n+                        "rr_method",\n+                    ]\n+                )\n+                with api.env.adopt_user(username="boss"):\n+                    self.should_allow(\n+                        [\n+                            "public_method",\n+                            "pp_method",\n+                            "qq_method",\n+                        ]\n+                    )\n+                    self.should_forbid(\n+                        [\n+                            "private_method",\n+                            "rr_method",\n+                        ]\n+                    )\n+                    with api.env.adopt_roles(["Manager"]):\n+                        self.should_allow(\n+                            [\n+                                "public_method",\n+                                "pp_method",\n+                                "qq_method",\n+                                "rr_method",\n+                            ]\n+                        )\n+                        self.should_forbid(\n+                            [\n+                                "private_method",\n+                            ]\n+                        )\n+\n+                        with api.env.adopt_roles(["Anonymous"]):\n+                            self.should_allow(\n+                                [\n+                                    "public_method",\n+                                ]\n+                            )\n+                            self.should_forbid(\n+                                [\n+                                    "private_method",\n+                                    "pp_method",\n+                                    "qq_method",\n+                                    "rr_method",\n+                                ]\n+                            )\n                         # /roles Anonymous\n \n                         doc4 = api.content.create(\n                             container=self.portal,\n-                            type=\'Document\',\n-                            id=\'doc_ock\',\n+                            type="Document",\n+                            id="doc_ock",\n                         )\n-                        intended = self.portal.acl_users.getUser(\'boss\')\n+                        intended = self.portal.acl_users.getUser("boss")\n                         intended_pp = intended.getPhysicalPath()\n                         actual = doc4.getOwner()\n                         actual_pp = actual.getPhysicalPath()\n                         self.assertEqual(actual_pp, intended_pp)\n                     # /roles Manager\n \n-                    self.should_allow([\n-                        \'public_method\',\n-                        \'pp_method\',\n-                        \'qq_method\',\n-                    ])\n-                    self.should_forbid([\n-                        \'private_method\',\n-                        \'rr_method\',\n-                    ])\n+                    self.should_allow(\n+                        [\n+                            "public_method",\n+                            "pp_method",\n+                            "qq_method",\n+                        ]\n+                    )\n+                    self.should_forbid(\n+                        [\n+                            "private_method",\n+                            "rr_method",\n+                        ]\n+                    )\n                 # /user boss\n \n-                self.should_allow([\n-                    \'public_method\',\n-                ])\n-                self.should_forbid([\n-                    \'private_method\',\n-                    \'pp_method\',\n-                    \'qq_method\',\n-                    \'rr_method\',\n-                ])\n+                self.should_allow(\n+                    [\n+                        "public_method",\n+                    ]\n+                )\n+                self.should_forbid(\n+                    [\n+                        "private_method",\n+                        "pp_method",\n+                        "qq_method",\n+                        "rr_method",\n+                    ]\n+                )\n             # /roles Anonymous\n \n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n         # /user worker\n \n     def test_adopting_zope_users(self):\n-        api.env.adopt_user(username=\'admin\')\n-        api.env.adopt_user(user=api.user.get(username=\'admin\'))\n+        api.env.adopt_user(username="admin")\n+        api.env.adopt_user(user=api.user.get(username="admin"))\n \n     def test_adopting_anonymous(self):\n         from AccessControl.users import nobody\n+\n         self.assertNotEqual(nobody, api.user.get_current())\n         with api.env.adopt_user(user=nobody):\n             self.assertEqual(nobody, api.user.get_current())\n@@ -397,12 +470,14 @@ def test_adopting_anonymous(self):\n     def test_empty_warning(self):\n         """Tests that empty roles lists get warned about."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.env.adopt_roles([])\n \n     def test_argument_requirement(self):\n         """Tests that missing arguments don\'t go unnoticed."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.env.adopt_roles()\n \n@@ -411,6 +486,7 @@ def test_debug_mode(self):\n         getConfiguration.debug_mode."""\n         from App.config import getConfiguration\n         from plone.api.env import debug_mode\n+\n         getConfiguration().debug_mode = True\n         self.assertEqual(debug_mode(), True)\n         getConfiguration().debug_mode = False\n@@ -419,23 +495,27 @@ def test_debug_mode(self):\n     def test_test_mode(self):\n         """Tests that test_mode() returns True as we are in a test runner."""\n         from plone.api.env import test_mode\n+\n         self.assertEqual(test_mode(), True)\n \n     def test_read_only_mode(self):\n         """Test that read_only_mode() returns False\n         as we have a write enabled ZODB."""\n         from plone.api.env import read_only_mode\n+\n         self.assertFalse(read_only_mode())\n \n     def test_plone_version(self):\n         """Tests that plone_version() returns Plone version."""\n         from plone.api.env import plone_version\n+\n         self.assertTrue(isinstance(plone_version(), str))\n         self.assertRegexpMatches(plone_version(), version_regexp)\n \n     def test_zope_version(self):\n         """Tests that zope_version() returns Zope version."""\n         from plone.api.env import zope_version\n+\n         self.assertTrue(isinstance(zope_version(), str))\n         self.assertRegexpMatches(zope_version(), version_regexp)\n \ndiff --git a/src/plone/api/tests/test_group.py b/src/plone/api/tests/test_group.py\nindex 4ef54ae9..c1718d48 100644\n--- a/src/plone/api/tests/test_group.py\n+++ b/src/plone/api/tests/test_group.py\n@@ -21,68 +21,72 @@ class TestPloneApiGroup(unittest.TestCase):\n \n     def setUp(self):\n         """Shared test environment set-up, ran before every test."""\n-        self.portal = self.layer[\'portal\']\n-        self.group_tool = getToolByName(self.portal, \'portal_groups\')\n+        self.portal = self.layer["portal"]\n+        self.group_tool = getToolByName(self.portal, "portal_groups")\n         self.portal_membership = getToolByName(\n-            self.portal, \'portal_membership\',\n+            self.portal,\n+            "portal_membership",\n         )\n \n     def test_create_constraints(self):\n         """Test the constraints for creating a group."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.group.create()\n \n     def test_create(self):\n         """Test adding of a group, groupname is mandatory."""\n \n-        spam_group = api.group.create(groupname=\'spam\')\n-        self.assertEqual(spam_group, self.group_tool.getGroupById(\'spam\'))\n+        spam_group = api.group.create(groupname="spam")\n+        self.assertEqual(spam_group, self.group_tool.getGroupById("spam"))\n \n     def test_create_with_title_and_desc(self):\n         """Test adding of a group with title and description."""\n \n         bacon_group = api.group.create(\n-            groupname=\'bacon\',\n-            title=\'Bacon\',\n-            description=\'Hmm bacon good!\',\n+            groupname="bacon",\n+            title="Bacon",\n+            description="Hmm bacon good!",\n         )\n \n         self.assertEqual(\n             bacon_group,\n-            self.group_tool.getGroupById(\'bacon\'),\n+            self.group_tool.getGroupById("bacon"),\n         )\n         self.assertEqual(\n             bacon_group.getGroupTitleOrName(),\n-            \'Bacon\',\n+            "Bacon",\n         )\n         self.assertEqual(\n-            bacon_group.getProperty(\'description\'),\n-            \'Hmm bacon good!\',\n+            bacon_group.getProperty("description"),\n+            "Hmm bacon good!",\n         )\n \n     def test_create_with_roles_and_groups(self):\n         """Test adding of a group with roles and groups."""\n \n         ham_group = api.group.create(\n-            groupname=\'ham\',\n-            roles=[\'Editor\'],\n-            groups=[\'Reviewer\'],\n+            groupname="ham",\n+            roles=["Editor"],\n+            groups=["Reviewer"],\n         )\n-        group = self.group_tool.getGroupById(\'ham\')\n+        group = self.group_tool.getGroupById("ham")\n         self.assertEqual(ham_group, group)\n-        self.assertIn(\'Editor\', ham_group.getRoles())\n-        self.assertIn(\'Reviewer\', ham_group.getMemberIds())\n+        self.assertIn("Editor", ham_group.getRoles())\n+        self.assertIn("Reviewer", ham_group.getMemberIds())\n \n     def test_get_constraints(self):\n         """Test the constraints for geting a group."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.group.get()\n \n     def test_get_no_groupname(self):\n         """Test getting a group without passing a groupname."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.group.create()\n \n@@ -95,12 +99,12 @@ def test_get(self):\n             api.group.create()\n \n         # Create a group and retrieve it\n-        api.group.create(groupname=\'bacon\')\n-        bacon = api.group.get(groupname=\'bacon\')\n+        api.group.create(groupname="bacon")\n+        bacon = api.group.get(groupname="bacon")\n \n         self.assertEqual(\n             bacon,\n-            self.group_tool.getGroupById(\'bacon\'),\n+            self.group_tool.getGroupById("bacon"),\n         )\n \n     def test_get_all_groups(self):\n@@ -114,9 +118,10 @@ def test_get_groups_constraints(self):\n \n         # username and user are mutually exclusive\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.group.get_groups(\n-                username=\'chuck\',\n+                username="chuck",\n                 user=mock.Mock(),\n             )\n \n@@ -124,30 +129,31 @@ def test_get_groups_user(self):\n         """Test retrieving of groups that the user is member of."""\n         user = self.portal_membership.getAuthenticatedMember()\n \n-        api.group.create(groupname=\'staff\')\n-        api.group.add_user(groupname=\'staff\', user=user)\n+        api.group.create(groupname="staff")\n+        api.group.add_user(groupname="staff", user=user)\n \n         groups = [g.id for g in api.group.get_groups(user=user)]\n-        self.assertIn(\'AuthenticatedUsers\', groups)\n-        self.assertIn(\'staff\', groups)\n+        self.assertIn("AuthenticatedUsers", groups)\n+        self.assertIn("staff", groups)\n \n     def test_get_groups_username(self):\n         """Test retrieving of groups that the user is member of."""\n         user = self.portal_membership.getAuthenticatedMember()\n         username = user.getUserName()\n \n-        api.group.create(groupname=\'staff\')\n-        api.group.add_user(groupname=\'staff\', user=user)\n+        api.group.create(groupname="staff")\n+        api.group.add_user(groupname="staff", user=user)\n \n         groups = [g.id for g in api.group.get_groups(username=username)]\n-        self.assertIn(\'AuthenticatedUsers\', groups)\n-        self.assertIn(\'staff\', groups)\n+        self.assertIn("AuthenticatedUsers", groups)\n+        self.assertIn("staff", groups)\n \n     def test_get_groups_nonexistant_user(self):\n         """Test retrieving of groups for a user that does not exist."""\n         from plone.api.exc import UserNotFoundError\n+\n         with self.assertRaises(UserNotFoundError):\n-            api.group.get_groups(username=\'theurbanspaceman\')\n+            api.group.get_groups(username="theurbanspaceman")\n \n     def test_get_groups_anonymous(self):\n         from AccessControl.users import nobody\n@@ -166,52 +172,56 @@ def test_get_groups_anonymous(self):\n     def test_delete_constraints(self):\n         """Test deleting a group without passing parameters."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.group.delete()\n \n     def test_delete_groupname_and_group(self):\n         """Test deleting a group passing both groupname and group."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.group.delete(\n-                groupname=\'bacon\',\n+                groupname="bacon",\n                 group=mock.Mock(),\n             )\n \n     def test_delete_group_groupname(self):\n         """Test deleting a group by groupname."""\n \n-        bacon = api.group.create(groupname=\'bacon\')\n-        self.assertEqual(bacon, api.group.get(\'bacon\'))\n+        bacon = api.group.create(groupname="bacon")\n+        self.assertEqual(bacon, api.group.get("bacon"))\n \n-        api.group.delete(groupname=\'bacon\')\n-        self.assertIsNone(api.group.get(\'bacon\'))\n+        api.group.delete(groupname="bacon")\n+        self.assertIsNone(api.group.get("bacon"))\n \n     def test_delete_group_group(self):\n         """Test deleting a group by group object."""\n \n-        group = api.group.create(groupname=\'bacon\')\n-        self.assertEqual(group, api.group.get(\'bacon\'))\n+        group = api.group.create(groupname="bacon")\n+        self.assertEqual(group, api.group.get("bacon"))\n \n         api.group.delete(group=group)\n-        self.assertIsNone(api.group.get(\'bacon\'))\n+        self.assertIsNone(api.group.get("bacon"))\n \n     def test_add_user_constraints(self):\n         """Test the constraints when a user is added to a group."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.group.add_user(\n-                groupname=\'staff\',\n+                groupname="staff",\n                 group=mock.Mock(),\n             )\n \n     def test_add_user_username_and_user(self):\n         """Test adding a user to a group passing both username and user."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.group.add_user(\n-                groupname=\'staff\',\n-                username=\'staff\',\n+                groupname="staff",\n+                username="staff",\n                 user=mock.Mock(),\n             )\n \n@@ -222,43 +232,44 @@ def test_add_user_with_nonexistant_group(self):\n             KeyError,\n             api.group.add_user,\n             user=mock.Mock(),\n-            groupname=\'staff\',\n+            groupname="staff",\n         )\n \n     def test_add_user_with_nonexistant_user(self):\n         """Test adding a user that does not exist to a group."""\n         from plone.api.exc import UserNotFoundError\n+\n         with self.assertRaises(UserNotFoundError):\n-            api.group.add_user(username=\'jane\', groupname=\'staff\')\n+            api.group.add_user(username="jane", groupname="staff")\n \n     def test_add_user_username(self):\n         """Test adding a user to a group by username."""\n-        group = api.group.create(groupname=\'staff\')\n-        api.user.create(email=\'bob@plone.org\', username=\'bob\')\n+        group = api.group.create(groupname="staff")\n+        api.user.create(email="bob@plone.org", username="bob")\n \n-        api.group.add_user(groupname=\'staff\', username=\'bob\')\n+        api.group.add_user(groupname="staff", username="bob")\n \n         self.assertIn(\n-            \'staff\',\n-            [g.id for g in api.group.get_groups(username=\'bob\')],\n+            "staff",\n+            [g.id for g in api.group.get_groups(username="bob")],\n         )\n \n-        self.assertIn(\'bob\', group.getMemberIds())\n+        self.assertIn("bob", group.getMemberIds())\n \n     def test_add_user_user(self):\n         """Test adding a user to a group by user object."""\n \n-        group = api.group.create(groupname=\'staff\')\n-        user = api.user.create(email=\'jane@plone.org\', username=\'jane\')\n+        group = api.group.create(groupname="staff")\n+        user = api.user.create(email="jane@plone.org", username="jane")\n \n         api.group.add_user(group=group, user=user)\n \n         self.assertIn(\n-            \'staff\',\n-            [g.id for g in api.group.get_groups(username=\'jane\')],\n+            "staff",\n+            [g.id for g in api.group.get_groups(username="jane")],\n         )\n \n-        self.assertIn(\'jane\', group.getMemberIds())\n+        self.assertIn("jane", group.getMemberIds())\n \n     def test_remove_user_constraints(self):\n         """Test the constraints when a user is removed from a group."""\n@@ -268,203 +279,206 @@ def test_remove_user_constraints(self):\n         # Arguments ``groupname`` and ``group`` are mutually exclusive.\n         with self.assertRaises(InvalidParameterError):\n             api.group.remove_user(\n-                username=\'jane\',\n-                groupname=\'staff\',\n+                username="jane",\n+                groupname="staff",\n                 group=mock.Mock(),\n             )\n         # Arguments ``username`` and ``user`` are mutually exclusive.\n         with self.assertRaises(InvalidParameterError):\n             api.group.remove_user(\n-                groupname=\'staff\',\n-                username=\'jane\',\n+                groupname="staff",\n+                username="jane",\n                 user=mock.Mock(),\n             )\n         # At least one of ``username`` and ``user`` must be provided\n         with self.assertRaises(MissingParameterError):\n-            api.group.remove_user(groupname=\'staff\')\n+            api.group.remove_user(groupname="staff")\n         # At least one of ``groupname`` and ``group`` must be provided\n         with self.assertRaises(MissingParameterError):\n-            api.group.remove_user(username=\'jane\')\n+            api.group.remove_user(username="jane")\n \n     def test_remove_user(self):\n         """Test removing a user from a group."""\n \n-        api.group.create(groupname=\'staff\')\n-        api.user.create(email=\'jane@plone.org\', username=\'jane\')\n-        api.user.create(email=\'bob@plone.org\', username=\'bob\')\n-        api.group.add_user(groupname=\'staff\', username=\'jane\')\n-        api.group.add_user(groupname=\'staff\', username=\'bob\')\n+        api.group.create(groupname="staff")\n+        api.user.create(email="jane@plone.org", username="jane")\n+        api.user.create(email="bob@plone.org", username="bob")\n+        api.group.add_user(groupname="staff", username="jane")\n+        api.group.add_user(groupname="staff", username="bob")\n \n         # Delete user by username from group\n-        api.group.remove_user(groupname=\'staff\', username=\'bob\')\n+        api.group.remove_user(groupname="staff", username="bob")\n \n-        group = api.group.get(groupname=\'staff\')\n-        user = api.user.get(username=\'jane\')\n+        group = api.group.get(groupname="staff")\n+        user = api.user.get(username="jane")\n \n         # Delete user by user object from group\n         api.group.remove_user(group=group, user=user)\n \n-        self.assertNotIn(\'staff\', api.group.get_groups(username=\'bob\'))\n-        self.assertNotIn(\'staff\', api.group.get_groups(username=\'jane\'))\n+        self.assertNotIn("staff", api.group.get_groups(username="bob"))\n+        self.assertNotIn("staff", api.group.get_groups(username="jane"))\n \n-        self.assertNotIn(\'bob\', group.getMemberIds())\n-        self.assertNotIn(\'jane\', group.getMemberIds())\n+        self.assertNotIn("bob", group.getMemberIds())\n+        self.assertNotIn("jane", group.getMemberIds())\n \n     def test_remove_user_with_nonexistant_user(self):\n         """Test removing a user from a group when the user does not exist"""\n         from plone.api.exc import UserNotFoundError\n-        api.group.create(groupname=\'staff\')\n-        group = api.group.get(groupname=\'staff\')\n+\n+        api.group.create(groupname="staff")\n+        group = api.group.get(groupname="staff")\n         with self.assertRaises(UserNotFoundError):\n-            api.group.remove_user(group=group, username=\'iamnothere\')\n+            api.group.remove_user(group=group, username="iamnothere")\n \n     def test_grant_roles(self):\n         """Test grant roles."""\n         from plone.api.exc import InvalidParameterError\n         from plone.api.exc import MissingParameterError\n-        group = api.group.create(groupname=\'foo\')\n+\n+        group = api.group.create(groupname="foo")\n \n         # You can\'t grant Anonymous\n         with self.assertRaises(ValueError):\n             api.group.grant_roles(\n-                groupname=\'foo\',\n-                roles=[\'Anonymous\'],\n+                groupname="foo",\n+                roles=["Anonymous"],\n             )\n \n         # You can\'t grant Authenticated\n         with self.assertRaises(ValueError):\n             api.group.grant_roles(\n-                groupname=\'foo\',\n-                roles=[\'Authenticated\'],\n+                groupname="foo",\n+                roles=["Authenticated"],\n             )\n \n         # Roles are required\n         with self.assertRaises(MissingParameterError):\n-            api.group.grant_roles(groupname=\'foo\')\n+            api.group.grant_roles(groupname="foo")\n \n         # Groupname and group are mutually exclusive\n         with self.assertRaises(InvalidParameterError):\n             api.group.grant_roles(\n-                groupname=\'foo\',\n+                groupname="foo",\n                 group=group,\n-                roles=[\'Reviewer\'],\n+                roles=["Reviewer"],\n             )\n \n-        api.group.grant_roles(groupname=\'foo\', roles=[\'Editor\'])\n-        self.assertIn(\'Editor\', api.group.get_roles(groupname=\'foo\'))\n-        self.assertIn(\'Editor\', api.group.get_roles(group=group))\n+        api.group.grant_roles(groupname="foo", roles=["Editor"])\n+        self.assertIn("Editor", api.group.get_roles(groupname="foo"))\n+        self.assertIn("Editor", api.group.get_roles(group=group))\n \n-        api.group.grant_roles(groupname=\'foo\', roles=(\'Contributor\',))\n-        self.assertIn(\'Contributor\', api.group.get_roles(groupname=\'foo\'))\n-        self.assertIn(\'Contributor\', api.group.get_roles(group=group))\n+        api.group.grant_roles(groupname="foo", roles=("Contributor",))\n+        self.assertIn("Contributor", api.group.get_roles(groupname="foo"))\n+        self.assertIn("Contributor", api.group.get_roles(group=group))\n \n-        api.group.grant_roles(groupname=\'foo\', roles=[\'Reader\', \'Reader\'])\n-        ROLES = {\'Editor\', \'Contributor\', \'Reader\', \'Authenticated\'}\n-        self.assertEqual(ROLES, set(api.group.get_roles(groupname=\'foo\')))\n+        api.group.grant_roles(groupname="foo", roles=["Reader", "Reader"])\n+        ROLES = {"Editor", "Contributor", "Reader", "Authenticated"}\n+        self.assertEqual(ROLES, set(api.group.get_roles(groupname="foo")))\n         self.assertEqual(ROLES, set(api.group.get_roles(group=group)))\n \n     def test_revoke_roles(self):\n         """Test revoke roles."""\n         from plone.api.exc import InvalidParameterError\n         from plone.api.exc import MissingParameterError\n-        group = api.group.create(groupname=\'bar\')\n+\n+        group = api.group.create(groupname="bar")\n \n         # You can\'t revoke Anonymous\n         with self.assertRaises(ValueError):\n             api.group.revoke_roles(\n-                groupname=\'bar\',\n-                roles=[\'Anonymous\'],\n+                groupname="bar",\n+                roles=["Anonymous"],\n             )\n \n         # You can\'t revoke Authenticated\n         with self.assertRaises(ValueError):\n             api.group.revoke_roles(\n-                groupname=\'bar\',\n-                roles=[\'Authenticated\'],\n+                groupname="bar",\n+                roles=["Authenticated"],\n             )\n \n         # Roles are required\n         with self.assertRaises(MissingParameterError):\n-            api.group.revoke_roles(groupname=\'foo\')\n+            api.group.revoke_roles(groupname="foo")\n \n         # Groupname and group are mutually exclusive\n         with self.assertRaises(InvalidParameterError):\n             api.group.revoke_roles(\n-                groupname=\'foo\',\n+                groupname="foo",\n                 group=group,\n-                roles=[\'Reviewer\'],\n+                roles=["Reviewer"],\n             )\n \n-        api.group.grant_roles(groupname=\'bar\', roles=[\'Reviewer\', \'Editor\'])\n+        api.group.grant_roles(groupname="bar", roles=["Reviewer", "Editor"])\n \n-        api.group.revoke_roles(groupname=\'bar\', roles=[\'Reviewer\'])\n-        self.assertNotIn(\'Reviewer\', api.group.get_roles(groupname=\'bar\'))\n-        self.assertNotIn(\'Reviewer\', api.group.get_roles(group=group))\n-        self.assertIn(\'Editor\', api.group.get_roles(groupname=\'bar\'))\n-        self.assertIn(\'Editor\', api.group.get_roles(group=group))\n+        api.group.revoke_roles(groupname="bar", roles=["Reviewer"])\n+        self.assertNotIn("Reviewer", api.group.get_roles(groupname="bar"))\n+        self.assertNotIn("Reviewer", api.group.get_roles(group=group))\n+        self.assertIn("Editor", api.group.get_roles(groupname="bar"))\n+        self.assertIn("Editor", api.group.get_roles(group=group))\n \n-        api.group.revoke_roles(groupname=\'bar\', roles=[\'Editor\'])\n-        ROLES = {\'Authenticated\'}\n-        self.assertEqual(ROLES, set(api.group.get_roles(groupname=\'bar\')))\n+        api.group.revoke_roles(groupname="bar", roles=["Editor"])\n+        ROLES = {"Authenticated"}\n+        self.assertEqual(ROLES, set(api.group.get_roles(groupname="bar")))\n         self.assertEqual(ROLES, set(api.group.get_roles(group=group)))\n \n     def test_grant_roles_in_context(self):\n         """Test grant roles."""\n \n-        group = api.group.create(groupname=\'foo\')\n+        group = api.group.create(groupname="foo")\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n \n-        api.group.grant_roles(groupname=\'foo\', roles=[\'Editor\'], obj=folder)\n+        api.group.grant_roles(groupname="foo", roles=["Editor"], obj=folder)\n         self.assertIn(\n-            \'Editor\',\n-            api.group.get_roles(groupname=\'foo\', obj=folder),\n+            "Editor",\n+            api.group.get_roles(groupname="foo", obj=folder),\n         )\n-        self.assertIn(\'Editor\', api.group.get_roles(group=group, obj=folder))\n+        self.assertIn("Editor", api.group.get_roles(group=group, obj=folder))\n         self.assertIn(\n-            \'Editor\',\n-            api.group.get_roles(groupname=\'foo\', obj=document),\n+            "Editor",\n+            api.group.get_roles(groupname="foo", obj=document),\n         )\n-        self.assertIn(\'Editor\', api.group.get_roles(group=group, obj=document))\n+        self.assertIn("Editor", api.group.get_roles(group=group, obj=document))\n \n         api.group.grant_roles(\n-            groupname=\'foo\',\n-            roles=(\'Contributor\',),\n+            groupname="foo",\n+            roles=("Contributor",),\n             obj=folder,\n         )\n         self.assertIn(\n-            \'Contributor\',\n-            api.group.get_roles(groupname=\'foo\', obj=folder),\n+            "Contributor",\n+            api.group.get_roles(groupname="foo", obj=folder),\n         )\n         self.assertIn(\n-            \'Contributor\',\n+            "Contributor",\n             api.group.get_roles(group=group, obj=folder),\n         )\n         self.assertIn(\n-            \'Contributor\',\n-            api.group.get_roles(groupname=\'foo\', obj=document),\n+            "Contributor",\n+            api.group.get_roles(groupname="foo", obj=document),\n         )\n         self.assertIn(\n-            \'Contributor\',\n+            "Contributor",\n             api.group.get_roles(group=group, obj=document),\n         )\n \n-        ROLES = {\'Editor\', \'Contributor\', \'Authenticated\'}\n+        ROLES = {"Editor", "Contributor", "Authenticated"}\n         self.assertEqual(\n             ROLES,\n-            set(api.group.get_roles(groupname=\'foo\', obj=folder)),\n+            set(api.group.get_roles(groupname="foo", obj=folder)),\n         )\n         self.assertEqual(\n             ROLES,\n@@ -472,18 +486,18 @@ def test_grant_roles_in_context(self):\n         )\n         self.assertEqual(\n             ROLES,\n-            set(api.group.get_roles(groupname=\'foo\', obj=document)),\n+            set(api.group.get_roles(groupname="foo", obj=document)),\n         )\n         self.assertEqual(\n             ROLES,\n             set(api.group.get_roles(group=group, obj=document)),\n         )\n-        ROLES = {\'Editor\', \'Contributor\'}\n+        ROLES = {"Editor", "Contributor"}\n         self.assertEqual(\n             ROLES,\n             set(\n                 api.group.get_roles(\n-                    groupname=\'foo\',\n+                    groupname="foo",\n                     obj=folder,\n                     inherit=False,\n                 ),\n@@ -497,7 +511,7 @@ def test_grant_roles_in_context(self):\n             set(),\n             set(\n                 api.group.get_roles(\n-                    groupname=\'foo\',\n+                    groupname="foo",\n                     obj=document,\n                     inherit=False,\n                 ),\n@@ -510,89 +524,92 @@ def test_grant_roles_in_context(self):\n \n     def test_local_roles_without_inheritance(self):\n         """Test granting and getting local_roles."""\n-        api.group.create(groupname=\'foo\')\n+        api.group.create(groupname="foo")\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         self.assertEqual(\n-            [\'Authenticated\'],\n-            api.group.get_roles(groupname=\'foo\'),\n+            ["Authenticated"],\n+            api.group.get_roles(groupname="foo"),\n         )\n         # Add the editor-role as global role\n-        api.group.grant_roles(groupname=\'foo\', roles=[\'Editor\'])\n+        api.group.grant_roles(groupname="foo", roles=["Editor"])\n         self.assertCountEqual(\n-            [\'Authenticated\', \'Editor\'],\n-            api.group.get_roles(groupname=\'foo\'),\n+            ["Authenticated", "Editor"],\n+            api.group.get_roles(groupname="foo"),\n         )\n         # local_roles plus global_roles\n         self.assertCountEqual(\n-            [\'Authenticated\', \'Editor\'],\n-            api.group.get_roles(groupname=\'foo\', obj=folder),\n+            ["Authenticated", "Editor"],\n+            api.group.get_roles(groupname="foo", obj=folder),\n         )\n         # only local_roles\n         self.assertEqual(\n             [],\n-            api.group.get_roles(groupname=\'foo\', obj=folder, inherit=False),\n+            api.group.get_roles(groupname="foo", obj=folder, inherit=False),\n         )\n \n         # The Contributor-role is added\n         api.group.grant_roles(\n-            groupname=\'foo\', roles=[\'Contributor\'], obj=folder,\n+            groupname="foo",\n+            roles=["Contributor"],\n+            obj=folder,\n         )\n         self.assertCountEqual(\n-            [\'Contributor\'],\n-            api.group.get_roles(groupname=\'foo\', obj=folder, inherit=False),\n+            ["Contributor"],\n+            api.group.get_roles(groupname="foo", obj=folder, inherit=False),\n         )\n         # local_roles plus global_roles\n         self.assertEqual(\n-            {\'Authenticated\', \'Editor\', \'Contributor\'},\n-            set(api.group.get_roles(groupname=\'foo\', obj=document)),\n+            {"Authenticated", "Editor", "Contributor"},\n+            set(api.group.get_roles(groupname="foo", obj=document)),\n         )\n         # no only-local roles\n         self.assertEqual(\n             set(),\n             set(\n                 api.group.get_roles(\n-                    groupname=\'foo\',\n+                    groupname="foo",\n                     obj=document,\n                     inherit=False,\n                 ),\n             ),\n         )\n         api.group.grant_roles(\n-            groupname=\'foo\', roles=[\'Contributor\'], obj=document,\n+            groupname="foo",\n+            roles=["Contributor"],\n+            obj=document,\n         )\n         # one only-local role\n         self.assertEqual(\n-            {\'Contributor\'},\n+            {"Contributor"},\n             set(\n                 api.group.get_roles(\n-                    groupname=\'foo\',\n+                    groupname="foo",\n                     obj=document,\n                     inherit=False,\n                 ),\n             ),\n-\n         )\n \n         # The Editor-role is added even though it is already a global role\n-        api.group.grant_roles(groupname=\'foo\', roles=[\'Editor\'], obj=folder)\n+        api.group.grant_roles(groupname="foo", roles=["Editor"], obj=folder)\n         self.assertEqual(\n-            {\'Contributor\', \'Editor\'},\n+            {"Contributor", "Editor"},\n             set(\n                 api.group.get_roles(\n-                    groupname=\'foo\',\n+                    groupname="foo",\n                     obj=folder,\n                     inherit=False,\n                 ),\n@@ -605,18 +622,18 @@ def test_local_roles_disregard_adapter(self):\n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n-        api.group.create(groupname=\'foo\')\n+        api.group.create(groupname="foo")\n \n         self.assertEqual(\n-            api.group.get_roles(groupname=\'foo\', obj=folder),\n-            [\'Authenticated\'],\n+            api.group.get_roles(groupname="foo", obj=folder),\n+            ["Authenticated"],\n         )\n         self.assertEqual(\n-            api.group.get_roles(groupname=\'foo\', obj=folder, inherit=False),\n+            api.group.get_roles(groupname="foo", obj=folder, inherit=False),\n             [],\n         )\n \n@@ -624,133 +641,135 @@ def test_local_roles_disregard_adapter(self):\n         @adapter(Interface)\n         @implementer(ILocalRoleProvider)\n         class LocalRoleProvider:\n-\n             def __init__(self, context):\n                 self.context = context\n \n             def getRoles(self, principal_id):\n-                return (\'Reviewer\',)\n+                return ("Reviewer",)\n \n         provideAdapter(LocalRoleProvider)\n \n         # the adapter-role is added for get_role\n         self.assertCountEqual(\n-            api.group.get_roles(groupname=\'foo\', obj=folder),\n-            [\'Authenticated\', \'Reviewer\'],\n+            api.group.get_roles(groupname="foo", obj=folder),\n+            ["Authenticated", "Reviewer"],\n         )\n \n         self.assertCountEqual(\n-            api.group.get_roles(groupname=\'foo\', obj=folder, inherit=False),\n-            [\'Reviewer\'],\n+            api.group.get_roles(groupname="foo", obj=folder, inherit=False),\n+            ["Reviewer"],\n         )\n \n         # Assign a local role\n         api.group.grant_roles(\n-            groupname=\'foo\', roles=[\'Contributor\'], obj=folder,\n+            groupname="foo",\n+            roles=["Contributor"],\n+            obj=folder,\n         )\n         self.assertCountEqual(\n-            api.group.get_roles(groupname=\'foo\', obj=folder),\n-            [\'Authenticated\', \'Contributor\', \'Reviewer\'],\n+            api.group.get_roles(groupname="foo", obj=folder),\n+            ["Authenticated", "Contributor", "Reviewer"],\n         )\n \n         # The adapter role in in the local roles but not persistent\n         self.assertCountEqual(\n-            api.group.get_roles(groupname=\'foo\', obj=folder, inherit=False),\n-            [\'Contributor\', \'Reviewer\'],\n+            api.group.get_roles(groupname="foo", obj=folder, inherit=False),\n+            ["Contributor", "Reviewer"],\n         )\n-        local_roles = getattr(folder, \'__ac_local_roles__\', {})\n+        local_roles = getattr(folder, "__ac_local_roles__", {})\n         self.assertCountEqual(\n-            local_roles.get(\'foo\'),\n-            [\'Contributor\'],\n+            local_roles.get("foo"),\n+            ["Contributor"],\n         )\n         # cleanup\n         gsm = getGlobalSiteManager()\n         gsm.unregisterAdapter(\n-            factory=LocalRoleProvider, provided=ILocalRoleProvider,\n+            factory=LocalRoleProvider,\n+            provided=ILocalRoleProvider,\n         )\n \n     def test_revoke_roles_in_context(self):\n         """Test revoke roles."""\n \n-        group = api.group.create(groupname=\'ploneboat\')\n+        group = api.group.create(groupname="ploneboat")\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         api.group.grant_roles(\n-            groupname=\'ploneboat\',\n-            roles=[\'Reviewer\', \'Editor\'],\n+            groupname="ploneboat",\n+            roles=["Reviewer", "Editor"],\n             obj=folder,\n         )\n \n         api.group.revoke_roles(\n-            groupname=\'ploneboat\',\n-            roles=[\'Reviewer\'],\n+            groupname="ploneboat",\n+            roles=["Reviewer"],\n             obj=folder,\n         )\n         self.assertIn(\n-            \'Editor\',\n-            api.group.get_roles(groupname=\'ploneboat\', obj=folder),\n+            "Editor",\n+            api.group.get_roles(groupname="ploneboat", obj=folder),\n         )\n-        self.assertIn(\'Editor\', api.group.get_roles(group=group, obj=folder))\n+        self.assertIn("Editor", api.group.get_roles(group=group, obj=folder))\n         self.assertIn(\n-            \'Editor\',\n-            api.group.get_roles(groupname=\'ploneboat\', obj=document),\n+            "Editor",\n+            api.group.get_roles(groupname="ploneboat", obj=document),\n         )\n-        self.assertIn(\'Editor\', api.group.get_roles(group=group, obj=document))\n+        self.assertIn("Editor", api.group.get_roles(group=group, obj=document))\n         self.assertNotIn(\n-            \'Reviewer\',\n-            api.group.get_roles(groupname=\'ploneboat\', obj=folder),\n+            "Reviewer",\n+            api.group.get_roles(groupname="ploneboat", obj=folder),\n         )\n         self.assertNotIn(\n-            \'Reviewer\',\n+            "Reviewer",\n             api.group.get_roles(group=group, obj=folder),\n         )\n         self.assertNotIn(\n-            \'Reviewer\',\n-            api.group.get_roles(groupname=\'ploneboat\', obj=document),\n+            "Reviewer",\n+            api.group.get_roles(groupname="ploneboat", obj=document),\n         )\n         self.assertNotIn(\n-            \'Reviewer\',\n+            "Reviewer",\n             api.group.get_roles(group=group, obj=document),\n         )\n \n         api.group.revoke_roles(\n-            groupname=\'ploneboat\',\n-            roles=[\'Editor\'],\n+            groupname="ploneboat",\n+            roles=["Editor"],\n             obj=folder,\n         )\n         self.assertNotIn(\n-            \'Editor\',\n-            api.group.get_roles(groupname=\'ploneboat\', obj=folder),\n+            "Editor",\n+            api.group.get_roles(groupname="ploneboat", obj=folder),\n         )\n         self.assertNotIn(\n-            \'Editor\',\n+            "Editor",\n             api.group.get_roles(group=group, obj=folder),\n         )\n         self.assertNotIn(\n-            \'Editor\',\n-            api.group.get_roles(groupname=\'ploneboat\', obj=document),\n+            "Editor",\n+            api.group.get_roles(groupname="ploneboat", obj=document),\n         )\n         self.assertNotIn(\n-            \'Editor\',\n+            "Editor",\n             api.group.get_roles(group=group, obj=document),\n         )\n \n-        ROLES = {\'Authenticated\'}\n+        ROLES = {"Authenticated"}\n         self.assertEqual(\n             ROLES,\n-            set(api.group.get_roles(groupname=\'ploneboat\', obj=folder)),\n+            set(api.group.get_roles(groupname="ploneboat", obj=folder)),\n         )\n         self.assertEqual(\n             ROLES,\n@@ -758,7 +777,7 @@ def test_revoke_roles_in_context(self):\n         )\n         self.assertEqual(\n             ROLES,\n-            set(api.group.get_roles(groupname=\'ploneboat\', obj=document)),\n+            set(api.group.get_roles(groupname="ploneboat", obj=document)),\n         )\n         self.assertEqual(\n             ROLES,\n@@ -768,27 +787,31 @@ def test_revoke_roles_in_context(self):\n     def test_local_roles_no_inheritance(self):\n         """Test possibility to disregard roles\n         for inherited groups."""\n-        api.group.create(groupname=\'ploneboat\')\n+        api.group.create(groupname="ploneboat")\n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         api.group.grant_roles(\n-            groupname=\'ploneboat\',\n-            roles=[\'Reviewer\', \'Editor\'],\n+            groupname="ploneboat",\n+            roles=["Reviewer", "Editor"],\n             obj=document,\n         )\n-        document.manage_setLocalRoles(\'AuthenticatedUsers\', (\'Reader\',))\n+        document.manage_setLocalRoles("AuthenticatedUsers", ("Reader",))\n         self.assertNotIn(\n-            \'Reader\',\n-            api.group.get_roles(groupname=\'ploneboat\', inherit=False, obj=document),  # noqa: E501\n+            "Reader",\n+            api.group.get_roles(\n+                groupname="ploneboat",\n+                inherit=False,\n+                obj=document,\n+            ),\n         )\ndiff --git a/src/plone/api/tests/test_portal.py b/src/plone/api/tests/test_portal.py\nindex 595366d4..e94c783e 100644\n--- a/src/plone/api/tests/test_portal.py\n+++ b/src/plone/api/tests/test_portal.py\n@@ -33,27 +33,27 @@\n     from email import message_from_string as message_from_bytes\n \n \n-HAS_PLONE5 = parse_version(env.plone_version()) >= parse_version(\'5.0b2\')\n+HAS_PLONE5 = parse_version(env.plone_version()) >= parse_version("5.0b2")\n \n \n class IMyRegistrySettings(Interface):\n \n     field_one = schema.TextLine(\n-        title=\'something\',\n-        description=\'something else\',\n+        title="something",\n+        description="something else",\n     )\n \n     field_two = schema.TextLine(\n-        title=\'something\',\n-        description=\'something else\',\n+        title="something",\n+        description="something else",\n     )\n \n \n class IMyOtherRegistrySettings(Interface):\n \n     field_three = schema.TextLine(\n-        title=\'something\',\n-        description=\'something else\',\n+        title="something",\n+        description="something else",\n     )\n \n \n@@ -68,66 +68,66 @@ class TestPloneApiPortal(unittest.TestCase):\n \n     def setUp(self):\n         """Shared test environment set-up, ran before every test."""\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n         # Mock the mail host so we can test sending the email\n-        mockmailhost = MockMailHost(\'MailHost\')\n+        mockmailhost = MockMailHost("MailHost")\n \n-        if not getattr(mockmailhost, \'smtp_host\', None):\n-            mockmailhost.smtp_host = \'localhost\'\n+        if not getattr(mockmailhost, "smtp_host", None):\n+            mockmailhost.smtp_host = "localhost"\n \n         self.portal.MailHost = mockmailhost\n         sm = self.portal.getSiteManager()\n         sm.registerUtility(component=mockmailhost, provided=IMailHost)\n \n-        self.mailhost = portal.get_tool(\'MailHost\')\n+        self.mailhost = portal.get_tool("MailHost")\n         if HAS_PLONE5:\n             portal.set_registry_record(\n-                \'plone.email_from_name\',\n-                \'Portal Owner\',\n+                "plone.email_from_name",\n+                "Portal Owner",\n             )\n             portal.set_registry_record(\n-                \'plone.email_from_address\',\n-                \'sender@example.org\',\n+                "plone.email_from_address",\n+                "sender@example.org",\n             )\n         else:\n             self.portal._updateProperty(\n-                \'email_from_name\',\n-                \'Portal Owner\',\n+                "email_from_name",\n+                "Portal Owner",\n             )\n             self.portal._updateProperty(\n-                \'email_from_address\',\n-                \'sender@example.org\',\n+                "email_from_address",\n+                "sender@example.org",\n             )\n \n     def _set_localization_date_format(self):\n         """Set the expected localized date format."""\n         from plone.api.exc import InvalidParameterError\n \n-        name_root = \'Products.CMFPlone.i18nl10n.override_dateformat.\'\n+        name_root = "Products.CMFPlone.i18nl10n.override_dateformat."\n         try:\n             portal.set_registry_record(\n-                name=name_root + \'Enabled\',\n+                name=name_root + "Enabled",\n                 value=True,\n             )\n             portal.set_registry_record(\n-                name=name_root + \'date_format_long\',\n-                value=\'%b %d, %Y %I:%M %p\',\n+                name=name_root + "date_format_long",\n+                value="%b %d, %Y %I:%M %p",\n             )\n             portal.set_registry_record(\n-                name=name_root + \'time_format\',\n-                value=\'%I:%M %p\',\n+                name=name_root + "time_format",\n+                value="%I:%M %p",\n             )\n             portal.set_registry_record(\n-                name=name_root + \'date_format_short\',\n-                value=\'%b %d, %Y\',\n+                name=name_root + "date_format_short",\n+                value="%b %d, %Y",\n             )\n         except InvalidParameterError:\n             # before Plone 4.3, date formats were stored in portal_properties\n-            properties = portal.get_tool(\'portal_properties\')\n-            properties.localLongTimeFormat = \'%b %d, %Y %I:%M %p\'\n-            properties.localTimeOnlyFormat = \'%I:%M %p\'\n-            properties.localTimeFormat = \'%b %d, %Y\'\n+            properties = portal.get_tool("portal_properties")\n+            properties.localLongTimeFormat = "%b %d, %Y %I:%M %p"\n+            properties.localTimeOnlyFormat = "%I:%M %p"\n+            properties.localTimeFormat = "%b %d, %Y"\n \n     def test_get(self):\n         """Test getting the portal object."""\n@@ -143,8 +143,8 @@ def test_get_with_sub_site(self):\n         """\n         a_site = content.create(\n             container=self.portal,\n-            type=\'Folder\',\n-            title=\'A Site\',\n+            type="Folder",\n+            title="A Site",\n         )\n         a_site.setSiteManager(LocalSiteManager(a_site))\n \n@@ -155,11 +155,12 @@ def test_get_with_sub_site(self):\n         # cleanup\n         setSite(self.portal)\n \n-    @mock.patch(\'plone.api.portal.getSite\')\n+    @mock.patch("plone.api.portal.getSite")\n     def test_get_no_site(self, getSite):\n         """Test error msg when getSite() returns None."""\n         getSite.return_value = None\n         from plone.api.exc import CannotGetPortalError\n+\n         with self.assertRaises(CannotGetPortalError):\n             portal.get()\n \n@@ -168,14 +169,16 @@ def test_get_tool_constraints(self):\n \n         # When no parameters are given an error is raised\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             portal.get_tool()\n \n     def test_get_tool_tool_not_found(self):\n         """Test that error msg lists available tools if a tool is not found."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError) as cm:\n-            portal.get_tool(\'portal_foo\')\n+            portal.get_tool("portal_foo")\n \n         self.assertTrue(\n             str(cm.exception).startswith(\n@@ -185,23 +188,23 @@ def test_get_tool_tool_not_found(self):\n \n         # A selection of portal tools which should exist in all plone versions\n         should_be_theres = (\n-            \'portal_setup\',\n-            \'portal_catalog\',\n+            "portal_setup",\n+            "portal_catalog",\n         )\n \n         for should_be_there in should_be_theres:\n-            self.assertIn((should_be_there + \'\\n\'), str(cm.exception))\n+            self.assertIn((should_be_there + "\\n"), str(cm.exception))\n \n     def test_get_tool(self):\n         """Test to validate the tool name."""\n \n         self.assertEqual(\n-            portal.get_tool(name=\'portal_catalog\'),\n-            getToolByName(self.portal, \'portal_catalog\'),\n+            portal.get_tool(name="portal_catalog"),\n+            getToolByName(self.portal, "portal_catalog"),\n         )\n         self.assertEqual(\n-            portal.get_tool(name=\'portal_membership\'),\n-            getToolByName(self.portal, \'portal_membership\'),\n+            portal.get_tool(name="portal_membership"),\n+            getToolByName(self.portal, "portal_membership"),\n         )\n \n     def test_send_email_constraints(self):\n@@ -215,18 +218,18 @@ def test_send_email_constraints(self):\n         # recipient, subject and body are required\n         with self.assertRaises(MissingParameterError):\n             portal.send_email(\n-                subject=\'Beer\',\n-                body=\'To beer or not to beer, that is the question\',\n+                subject="Beer",\n+                body="To beer or not to beer, that is the question",\n             )\n         with self.assertRaises(MissingParameterError):\n             portal.send_email(\n-                recipient=\'joe@example.org\',\n-                subject=\'Beer\',\n+                recipient="joe@example.org",\n+                subject="Beer",\n             )\n         with self.assertRaises(MissingParameterError):\n             portal.send_email(\n-                recipient=\'joe@example.org\',\n-                body=\'To beer or not to beer, that is the question\',\n+                recipient="joe@example.org",\n+                body="To beer or not to beer, that is the question",\n             )\n \n     def test_send_email(self):\n@@ -235,56 +238,56 @@ def test_send_email(self):\n         self.mailhost.reset()\n \n         portal.send_email(\n-            recipient=\'bob@plone.org\',\n-            sender=\'noreply@plone.org\',\n-            subject=\'Trappist\',\n-            body=\'One for you Bob!\',\n+            recipient="bob@plone.org",\n+            sender="noreply@plone.org",\n+            subject="Trappist",\n+            body="One for you Bob!",\n         )\n \n         self.assertEqual(len(self.mailhost.messages), 1)\n         msg = message_from_bytes(self.mailhost.messages[0])\n-        self.assertEqual(msg[\'To\'], \'bob@plone.org\')\n-        self.assertEqual(msg[\'From\'], \'noreply@plone.org\')\n-        self.assertEqual(msg[\'Subject\'], \'=?utf-8?q?Trappist?=\')\n-        self.assertEqual(msg.get_payload(), \'One for you Bob!\')\n+        self.assertEqual(msg["To"], "bob@plone.org")\n+        self.assertEqual(msg["From"], "noreply@plone.org")\n+        self.assertEqual(msg["Subject"], "=?utf-8?q?Trappist?=")\n+        self.assertEqual(msg.get_payload(), "One for you Bob!")\n         self.mailhost.reset()\n \n         # When no sender is set, we take the portal properties.\n         portal.send_email(\n-            recipient=\'bob@plone.org\',\n-            subject=\'Trappist\',\n-            body=\'One for you Bob!\',\n+            recipient="bob@plone.org",\n+            subject="Trappist",\n+            body="One for you Bob!",\n         )\n \n         self.assertEqual(len(self.mailhost.messages), 1)\n         msg = message_from_bytes(self.mailhost.messages[0])\n-        self.assertEqual(msg[\'From\'], \'Portal Owner <sender@example.org>\')\n+        self.assertEqual(msg["From"], "Portal Owner <sender@example.org>")\n \n     def test_send_email_without_configured_mailhost(self):\n         """By default, the MailHost is not configured yet, so we cannot\n         send email.\n         """\n         if HAS_PLONE5:\n-            old_value = portal.get_registry_record(\'plone.email_from_address\')\n-            portal.set_registry_record(\'plone.email_from_address\', \'\')  # ASCII\n+            old_value = portal.get_registry_record("plone.email_from_address")\n+            portal.set_registry_record("plone.email_from_address", "")  # ASCII\n         else:\n             old_smtp_host = self.portal.MailHost.smtp_host\n             self.portal.MailHost.smtp_host = None\n \n         with self.assertRaises(ValueError):\n             portal.send_email(\n-                recipient=\'bob@plone.org\',\n-                sender=\'noreply@plone.org\',\n-                subject=\'Trappist\',\n-                body=\'One for you Bob!\',\n+                recipient="bob@plone.org",\n+                sender="noreply@plone.org",\n+                subject="Trappist",\n+                body="One for you Bob!",\n             )\n \n         if HAS_PLONE5:\n-            portal.set_registry_record(\'plone.email_from_address\', old_value)\n+            portal.set_registry_record("plone.email_from_address", old_value)\n         else:\n             self.portal.MailHost.smtp_host = old_smtp_host\n \n-    @mock.patch(\'plone.api.portal.parseaddr\')\n+    @mock.patch("plone.api.portal.parseaddr")\n     def test_send_email_parseaddr(self, mock_parseaddr):\n         """Simulate faulty parsing in parseaddr, from_address should be\n         default email_from_address.\n@@ -292,44 +295,43 @@ def test_send_email_parseaddr(self, mock_parseaddr):\n \n         self.mailhost.reset()\n \n-        mock_parseaddr.return_value = (\'Chuck Norris\', \'chuck@norris.org\')\n+        mock_parseaddr.return_value = ("Chuck Norris", "chuck@norris.org")\n         portal.send_email(\n-            recipient=\'bob@plone.org\',\n-            subject=\'Trappist\',\n-            body=\'One for you Bob!\',\n+            recipient="bob@plone.org",\n+            subject="Trappist",\n+            body="One for you Bob!",\n         )\n \n     def test_send_email_with_config_in_registry(self):\n-        """Test mail-setting being stored in registry\n-        """\n+        """Test mail-setting being stored in registry"""\n         self.mailhost.reset()\n \n         portal.set_registry_record(\n-            \'plone.email_from_address\',\n-            \'reg@example.org\',\n+            "plone.email_from_address",\n+            "reg@example.org",\n         )  # ASCII\n         portal.set_registry_record(\n-            \'plone.email_from_name\',\n-            \'Registry\',\n+            "plone.email_from_name",\n+            "Registry",\n         )  # TextLine\n         portal.send_email(\n-            recipient=\'bob@plone.org\',\n-            subject=\'Trappist\',\n-            body=\'One for you Bob!\',\n+            recipient="bob@plone.org",\n+            subject="Trappist",\n+            body="One for you Bob!",\n         )\n         self.assertEqual(len(self.mailhost.messages), 1)\n         msg = message_from_bytes(self.mailhost.messages[0])\n-        self.assertEqual(msg[\'From\'], \'Registry <reg@example.org>\')\n+        self.assertEqual(msg["From"], "Registry <reg@example.org>")\n \n     def test_send_email_with_printingmailhost(self):\n-        """ Test that send_email does not raise an exception when\n+        """Test that send_email does not raise an exception when\n         Products.PrintingMailHost is installed and active.\n         """\n         old_flag = portal.PRINTINGMAILHOST_ENABLED\n \n         if HAS_PLONE5:\n-            old_value = portal.get_registry_record(\'plone.email_from_address\')\n-            portal.set_registry_record(\'plone.email_from_address\', \'\')  # ASCII\n+            old_value = portal.get_registry_record("plone.email_from_address")\n+            portal.set_registry_record("plone.email_from_address", "")  # ASCII\n         else:\n             old_smtp_host = self.portal.MailHost.smtp_host\n             self.portal.MailHost.smtp_host = None\n@@ -338,24 +340,24 @@ def test_send_email_with_printingmailhost(self):\n         portal.PRINTINGMAILHOST_ENABLED = False\n         with self.assertRaises(ValueError):\n             portal.send_email(\n-                recipient=\'bob@plone.org\',\n-                sender=\'noreply@plone.org\',\n-                subject=\'Trappist\',\n-                body=\'One for you Bob!\',\n+                recipient="bob@plone.org",\n+                sender="noreply@plone.org",\n+                subject="Trappist",\n+                body="One for you Bob!",\n             )\n \n         # PrintingMailHost enabled\n         portal.PRINTINGMAILHOST_ENABLED = True\n         portal.send_email(\n-            recipient=\'bob@plone.org\',\n-            sender=\'noreply@plone.org\',\n-            subject=\'Trappist\',\n-            body=\'One for you Bob!\',\n+            recipient="bob@plone.org",\n+            sender="noreply@plone.org",\n+            subject="Trappist",\n+            body="One for you Bob!",\n         )\n \n         # Prevents sideeffects in other tests.\n         if HAS_PLONE5:\n-            portal.set_registry_record(\'plone.email_from_address\', old_value)\n+            portal.set_registry_record("plone.email_from_address", old_value)\n         else:\n             self.portal.MailHost.smtp_host = old_smtp_host\n         portal.PRINTINGMAILHOST_ENABLED = old_flag\n@@ -365,6 +367,7 @@ def test_get_localized_time_constraints(self):\n \n         # When no parameters are given an error is raised\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             portal.get_localized_time()\n \n@@ -379,18 +382,18 @@ def test_get_localized_time(self):\n             datetime=DateTime.DateTime(1999, 12, 31, 23, 59),\n             long_format=True,\n         )\n-        self.assertEqual(result, \'Dec 31, 1999 11:59 PM\')\n+        self.assertEqual(result, "Dec 31, 1999 11:59 PM")\n \n         result = portal.get_localized_time(\n             datetime=DateTime.DateTime(1999, 12, 31, 23, 59),\n             time_only=True,\n         )\n-        self.assertEqual(result, \'11:59 PM\')\n+        self.assertEqual(result, "11:59 PM")\n \n         result = portal.get_localized_time(\n             datetime=DateTime.DateTime(1999, 12, 31, 23, 59),\n         )\n-        self.assertEqual(result, \'Dec 31, 1999\')\n+        self.assertEqual(result, "Dec 31, 1999")\n \n     def test_get_localized_time_python_datetime(self):\n         """Test getting the localized time using Python datetime.datetime."""\n@@ -403,18 +406,18 @@ def test_get_localized_time_python_datetime(self):\n             datetime=datetime(1999, 12, 31, 23, 59),\n             long_format=True,\n         )\n-        self.assertEqual(result, \'Dec 31, 1999 11:59 PM\')\n+        self.assertEqual(result, "Dec 31, 1999 11:59 PM")\n \n         result = portal.get_localized_time(\n             datetime=datetime(1999, 12, 31, 23, 59),\n             time_only=True,\n         )\n-        self.assertEqual(result, \'11:59 PM\')\n+        self.assertEqual(result, "11:59 PM")\n \n         result = portal.get_localized_time(\n             datetime=datetime(1999, 12, 31, 23, 59),\n         )\n-        self.assertEqual(result, \'Dec 31, 1999\')\n+        self.assertEqual(result, "Dec 31, 1999")\n \n     def test_get_localized_time_python_date(self):\n         """Test getting the localized time using Python datetime.date."""\n@@ -427,18 +430,18 @@ def test_get_localized_time_python_date(self):\n             datetime=date(1999, 12, 31),\n             long_format=True,\n         )\n-        self.assertEqual(result, \'Dec 31, 1999\')\n+        self.assertEqual(result, "Dec 31, 1999")\n \n         result = portal.get_localized_time(\n             datetime=date(1999, 12, 31),\n             time_only=True,\n         )\n-        self.assertEqual(result, \'\')\n+        self.assertEqual(result, "")\n \n         result = portal.get_localized_time(\n             datetime=date(1999, 12, 31),\n         )\n-        self.assertEqual(result, \'Dec 31, 1999\')\n+        self.assertEqual(result, "Dec 31, 1999")\n \n     def test_show_message_constraints(self):\n         """Test the constraints for show_message."""\n@@ -450,28 +453,29 @@ def test_show_message_constraints(self):\n \n         # message and request are required\n         with self.assertRaises(MissingParameterError):\n-            portal.show_message(request=self.layer[\'request\'])\n+            portal.show_message(request=self.layer["request"])\n \n         with self.assertRaises(MissingParameterError):\n-            portal.show_message(message=\'Beer is brewing.\')\n+            portal.show_message(message="Beer is brewing.")\n \n     def test_show_message(self):\n         """Test to see if message appears."""\n \n         from Products.statusmessages.interfaces import IStatusMessage\n-        request = self.layer[\'request\']\n-        portal.show_message(message=\'Blueberries!\', request=request)\n+\n+        request = self.layer["request"]\n+        portal.show_message(message="Blueberries!", request=request)\n         messages = IStatusMessage(request)\n         show = messages.show()\n         self.assertEqual(len(show), 1)\n-        self.assertIn(\'Blueberries!\', show[0].message)\n-        portal.show_message(message=\'One\', request=request)\n-        portal.show_message(message=\'Two\', request=request)\n+        self.assertIn("Blueberries!", show[0].message)\n+        portal.show_message(message="One", request=request)\n+        portal.show_message(message="Two", request=request)\n         messages = IStatusMessage(request)\n         show = messages.show()\n         self.assertEqual(len(show), 2)\n-        self.assertEqual(show[0].message, \'One\')\n-        self.assertEqual(show[1].message, \'Two\')\n+        self.assertEqual(show[0].message, "One")\n+        self.assertEqual(show[1].message, "Two")\n \n     def test_get_navigation_root(self):\n         """Test to see if the navigation_root is returned."""\n@@ -480,41 +484,44 @@ def test_get_navigation_root(self):\n         self.assertTrue(INavigationRoot.providedBy(navigation_root))\n \n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             portal.get_navigation_root()\n \n     def test_get_existing_registry_record(self):\n         """Test that existing registry records are returned correctly."""\n         registry = getUtility(IRegistry)\n-        registry.records[\'plone.api.norris_power\'] = Record(\n+        registry.records["plone.api.norris_power"] = Record(\n             field.TextLine(title="Chuck Norris\' Power"),\n         )\n-        registry.records[\'plone.api.unset\'] = Record(\n-            field.TextLine(title=\'An unset field\'),\n+        registry.records["plone.api.unset"] = Record(\n+            field.TextLine(title="An unset field"),\n         )\n-        registry[\'plone.api.norris_power\'] = \'infinite\'\n+        registry["plone.api.norris_power"] = "infinite"\n \n         self.assertEqual(\n-            portal.get_registry_record(\'plone.api.norris_power\'),\n-            \'infinite\',\n+            portal.get_registry_record("plone.api.norris_power"),\n+            "infinite",\n         )\n \n         self.assertEqual(\n-            portal.get_registry_record(\'plone.api.unset\'),\n+            portal.get_registry_record("plone.api.unset"),\n             None,\n         )\n \n     def test_get_missing_registry_record(self):\n         """Test that getting a missing registry record raises an Exception."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             portal.get_registry_record()\n \n     def test_get_invalid_registry_record(self):\n         """Test that getting an invalid registry record raises an Exception."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n-            portal.get_registry_record(name=dict({\'foo\': \'bar\'}))\n+            portal.get_registry_record(name=dict({"foo": "bar"}))\n \n     def test_get_invalid_registry_record_msg(self):\n         """Test that the error message from trying to get a\n@@ -524,32 +531,32 @@ def test_get_invalid_registry_record_msg(self):\n         from plone.api.exc import InvalidParameterError\n \n         with self.assertRaises(InvalidParameterError) as cm:\n-            portal.get_registry_record(name=\'nonexistent.sharepoint.power\')\n+            portal.get_registry_record(name="nonexistent.sharepoint.power")\n         exc_str = str(cm.exception)\n \n         # Check if there is an error message.\n-        self.assertTrue(exc_str.startswith(\'Cannot find a record with name\'))\n+        self.assertTrue(exc_str.startswith("Cannot find a record with name"))\n \n     def test_get_invalid_registry_record_suggestions(self):\n         from plone.api.exc import InvalidParameterError\n \n         # Check without suggestion\n         with self.assertRaises(InvalidParameterError) as cm:\n-            portal.get_registry_record(name=\'a random unique string\')\n+            portal.get_registry_record(name="a random unique string")\n         exc_str = str(cm.exception)\n \n         # Check for an error, but no suggestions.\n-        self.assertTrue(exc_str.startswith(\'Cannot find a record with name\'))\n-        self.assertFalse(\'Did you mean?:\' in exc_str)\n+        self.assertTrue(exc_str.startswith("Cannot find a record with name"))\n+        self.assertFalse("Did you mean?:" in exc_str)\n \n         # Check with suggestions\n         with self.assertRaises(InvalidParameterError) as cm:\n-            portal.get_registry_record(name=\'querystring\')\n+            portal.get_registry_record(name="querystring")\n         exc_str = str(cm.exception)\n \n         # Check for an error with suggestions.\n-        self.assertTrue(exc_str.startswith(\'Cannot find a record with name\'))\n-        self.assertTrue(\'Did you mean?:\' in exc_str)\n+        self.assertTrue(exc_str.startswith("Cannot find a record with name"))\n+        self.assertTrue("Did you mean?:" in exc_str)\n \n     def test_get_registry_record_from_interface(self):\n         """Test that getting a record from an interface works."""\n@@ -558,7 +565,7 @@ def test_get_registry_record_from_interface(self):\n \n         self.assertEqual(\n             portal.get_registry_record(\n-                \'field_one\',\n+                "field_one",\n                 interface=IMyRegistrySettings,\n             ),\n             None,\n@@ -567,9 +574,10 @@ def test_get_registry_record_from_interface(self):\n     def test_get_invalid_interface_for_registry_record(self):\n         """Test that passing an invalid interface raises an Exception."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             portal.get_registry_record(\n-                \'something\',\n+                "something",\n                 interface=ImNotAnInterface,\n             )\n \n@@ -578,27 +586,29 @@ def test_get_invalid_interface_for_registry_record_msg(self):\n         interface.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError) as cm:\n             portal.get_registry_record(\n-                \'something\',\n+                "something",\n                 interface=ImNotAnInterface,\n             )\n         exc_str = str(cm.exception)\n \n         # Check if there is an error message.\n-        self.assertTrue(exc_str.startswith(\'The interface parameter has to \'))\n+        self.assertTrue(exc_str.startswith("The interface parameter has to "))\n \n     def test_get_invalid_record_in_interface_for_registry_record(self):\n         """Test that trying to get an invalid field from an interface raises\n         an Exception.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n         with self.assertRaises(InvalidParameterError):\n             portal.get_registry_record(\n-                \'non_existing_field\',\n+                "non_existing_field",\n                 interface=IMyRegistrySettings,\n             )\n \n@@ -607,24 +617,25 @@ def test_get_invalid_record_in_interface_for_registry_record_msg(self):\n         field from an interface.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n         with self.assertRaises(InvalidParameterError) as cm:\n             portal.get_registry_record(\n-                \'non_existing_field\',\n+                "non_existing_field",\n                 interface=IMyRegistrySettings,\n             )\n         exc_str = str(cm.exception)\n \n         # Check if there is an error message.\n-        self.assertTrue(exc_str.startswith(\'Cannot find a record with name \'))\n-        self.assertTrue(exc_str.find(\' on interface \') != -1)\n-        self.assertTrue(exc_str.find(\'field_one\') != -1)\n-        self.assertTrue(exc_str.find(\'field_two\') != -1)\n+        self.assertTrue(exc_str.startswith("Cannot find a record with name "))\n+        self.assertTrue(exc_str.find(" on interface ") != -1)\n+        self.assertTrue(exc_str.find("field_one") != -1)\n+        self.assertTrue(exc_str.find("field_two") != -1)\n \n     def test_get_invalid_record_with_default(self):\n-        """ If get_registry_record is called with a default parameter\n+        """If get_registry_record is called with a default parameter\n         and the record cannot be resolved\n         the default will be returned instead of raising InvalidParameterError\n         """\n@@ -633,7 +644,7 @@ def test_get_invalid_record_with_default(self):\n \n         self.assertEqual(\n             portal.get_registry_record(\n-                \'non_existing_field\',\n+                "non_existing_field",\n                 interface=IMyRegistrySettings,\n                 default=1,\n             ),\n@@ -641,7 +652,7 @@ def test_get_invalid_record_with_default(self):\n         )\n         self.assertEqual(\n             portal.get_registry_record(\n-                \'something\',\n+                "something",\n                 default=2,\n             ),\n             2,\n@@ -650,17 +661,18 @@ def test_get_invalid_record_with_default(self):\n     def test_set_valid_registry_record(self):\n         """Test that setting a valid registry record succeeds."""\n         registry = getUtility(IRegistry)\n-        registry.records[\'plone.api.plone_power\'] = Record(\n+        registry.records["plone.api.plone_power"] = Record(\n             field.TextLine(title="Plone\'s Power"),\n         )\n-        portal.set_registry_record(\'plone.api.plone_power\', \'awesome\')\n-        self.assertEqual(registry[\'plone.api.plone_power\'], \'awesome\')\n+        portal.set_registry_record("plone.api.plone_power", "awesome")\n+        self.assertEqual(registry["plone.api.plone_power"], "awesome")\n \n     def test_set_missing_param_registry_record(self):\n         """Test that when set_registry_record is called without\n         parameters, a MissingParameterError exception is raised.\n         """\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             portal.set_registry_record()\n \n@@ -669,10 +681,11 @@ def test_set_non_existing_record_value(self):\n         an Exception.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             portal.set_registry_record(\n-                name=\'nonexistent.sharepoint.power\',\n-                value=\'Zero\',\n+                name="nonexistent.sharepoint.power",\n+                value="Zero",\n             )\n \n     def test_set_no_value_param_for_existing_record(self):\n@@ -681,23 +694,25 @@ def test_set_no_value_param_for_existing_record(self):\n         an Exception.\n         """\n         registry = getUtility(IRegistry)\n-        registry.records[\'plone.api.plone_power\'] = Record(\n+        registry.records["plone.api.plone_power"] = Record(\n             field.TextLine(title="Plone\'s Power"),\n         )\n \n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n-            portal.set_registry_record(name=\'plone.api.plone_power\')\n+            portal.set_registry_record(name="plone.api.plone_power")\n \n     def test_set_invalid_key_type_record(self):\n         """Test that trying to set the value of a record by passing a\n         list for the record name instead of a string, raises an error.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             portal.set_registry_record(\n-                name=[\'foo\', \'bar\'],\n-                value=\'baz\',\n+                name=["foo", "bar"],\n+                value="baz",\n             )\n \n     def test_set_registry_record_from_interface(self):\n@@ -705,15 +720,15 @@ def test_set_registry_record_from_interface(self):\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n-        text = \'random text\'\n+        text = "random text"\n         portal.set_registry_record(\n-            \'field_one\',\n+            "field_one",\n             text,\n             interface=IMyRegistrySettings,\n         )\n         self.assertEqual(\n             portal.get_registry_record(\n-                \'field_one\',\n+                "field_one",\n                 interface=IMyRegistrySettings,\n             ),\n             text,\n@@ -727,28 +742,28 @@ def test_set_registry_record_with_invalid_value(self):\n         and duplicate: https://github.com/plone/plone.api/issues/464\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyOtherRegistrySettings)\n         with self.assertRaises(InvalidParameterError) as cm:\n             portal.set_registry_record(\n-                \'field_three\',\n+                "field_three",\n                 42,\n                 interface=IMyOtherRegistrySettings,\n             )\n         exc_str = str(cm.exception)\n \n-        self.assertIn(\n-            "The value parameter for the field field_three", exc_str\n-        )\n+        self.assertIn("The value parameter for the field field_three", exc_str)\n         self.assertIn("TextLine", exc_str)\n \n     def test_set_registry_record_on_invalid_interface(self):\n         """Test that passing an invalid interface raises an Exception."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             portal.set_registry_record(\n-                \'something\',\n-                \'value\',\n+                "something",\n+                "value",\n                 interface=ImNotAnInterface,\n             )\n \n@@ -757,29 +772,31 @@ def test_set_registry_record_on_invalid_interface_msg(self):\n         interface.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError) as cm:\n             portal.set_registry_record(\n-                \'something\',\n-                \'value\',\n+                "something",\n+                "value",\n                 interface=ImNotAnInterface,\n             )\n         exc_str = str(cm.exception)\n \n         # Check if there is an error message.\n-        self.assertTrue(exc_str.startswith(\'The interface parameter has to \'))\n+        self.assertTrue(exc_str.startswith("The interface parameter has to "))\n \n     def test_set_invalid_registry_record_from_interface(self):\n         """Test that trying to set an invalid field from an interface raises\n         an Exception.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n         with self.assertRaises(InvalidParameterError):\n             portal.set_registry_record(\n-                \'non_existing_field\',\n-                \'value\',\n+                "non_existing_field",\n+                "value",\n                 interface=IMyRegistrySettings,\n             )\n \n@@ -788,35 +805,37 @@ def test_set_invalid_registry_record_from_interface_msg(self):\n         field from an interface.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n         with self.assertRaises(InvalidParameterError) as cm:\n             portal.set_registry_record(\n-                \'non_existing_field\',\n-                \'value\',\n+                "non_existing_field",\n+                "value",\n                 interface=IMyRegistrySettings,\n             )\n         exc_str = str(cm.exception)\n \n         # Check if there is an error message.\n-        self.assertTrue(exc_str.startswith(\'Cannot find a record with name \'))\n-        self.assertTrue(exc_str.find(\' on interface \') != -1)\n-        self.assertTrue(exc_str.find(\'field_one\') != -1)\n-        self.assertTrue(exc_str.find(\'field_two\') != -1)\n+        self.assertTrue(exc_str.startswith("Cannot find a record with name "))\n+        self.assertTrue(exc_str.find(" on interface ") != -1)\n+        self.assertTrue(exc_str.find("field_one") != -1)\n+        self.assertTrue(exc_str.find("field_two") != -1)\n \n     def test_set_invalid_value_on_registry_record_from_interface(self):\n         """Test that setting a value not meant for the record raises an\n         Exception..\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n         with self.assertRaises(InvalidParameterError):\n             portal.set_registry_record(\n-                \'field_one\',\n-                b\'value\',\n+                "field_one",\n+                b"value",\n                 interface=IMyRegistrySettings,\n             )\n \n@@ -825,50 +844,50 @@ def test_set_invalid_value_on_registry_record_from_interface_msg(self):\n         Exception..\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n         with self.assertRaises(InvalidParameterError) as cm:\n             portal.set_registry_record(\n-                \'field_one\',\n-                b\'value\',\n+                "field_one",\n+                b"value",\n                 interface=IMyRegistrySettings,\n             )\n         exc_str = str(cm.exception)\n \n         # Check if there is an error message.\n         self.assertTrue(\n-            exc_str.startswith(\'The value parameter for the field\'),\n+            exc_str.startswith("The value parameter for the field"),\n         )\n-        self.assertTrue(exc_str.find(\' needs to be \') != -1)\n-        self.assertTrue(exc_str.find(\'TextLine\') != -1)\n+        self.assertTrue(exc_str.find(" needs to be ") != -1)\n+        self.assertTrue(exc_str.find("TextLine") != -1)\n \n     def test_get_default_language(self):\n         """Test that default language is properly returned."""\n-        self.assertEqual(portal.get_default_language(), \'en\')\n+        self.assertEqual(portal.get_default_language(), "en")\n \n     def test_get_current_language(self):\n         """Test that current language is properly returned."""\n-        self.assertEqual(portal.get_current_language(portal.get()), \'en\')\n-        self.layer[\'request\'][\'LANGUAGE\'] = \'fr\'\n-        self.assertEqual(portal.get_current_language(), \'fr\')\n+        self.assertEqual(portal.get_current_language(portal.get()), "en")\n+        self.layer["request"]["LANGUAGE"] = "fr"\n+        self.assertEqual(portal.get_current_language(), "fr")\n \n     def test_translate(self):\n         """Test translation."""\n         self.assertEqual(\n             portal.translate(\n-                \'A workflow action triggers a workflow transition on an \'\n-                \'object.\',\n-                lang=\'es\',\n+                "A workflow action triggers a workflow transition on an " "object.",\n+                lang="es",\n             ),\n-            \'Una acci\xc3\xb3n de flujo de trabajo dispara una transici\xc3\xb3n de \'\n-            \'flujo de trabajo en un objeto.\',\n+            "Una acci\xc3\xb3n de flujo de trabajo dispara una transici\xc3\xb3n de "\n+            "flujo de trabajo en un objeto.",\n         )\n         self.assertEqual(\n             portal.translate(\n-                \'month_apr\',\n-                domain=\'plonelocales\',\n-                lang=\'fr\',\n+                "month_apr",\n+                domain="plonelocales",\n+                lang="fr",\n             ),\n-            \'Avril\',\n+            "Avril",\n         )\ndiff --git a/src/plone/api/tests/test_relation.py b/src/plone/api/tests/test_relation.py\nindex 16c92576..24dd4f99 100644\n--- a/src/plone/api/tests/test_relation.py\n+++ b/src/plone/api/tests/test_relation.py\n@@ -34,55 +34,55 @@ def setUp(self):\n         This is copied from test_content.py.\n         We may want to simplify.  But could be okay.\n         """\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n         self.blog = api.content.create(\n-            type=\'Link\',\n-            id=\'blog\',\n+            type="Link",\n+            id="blog",\n             container=self.portal,\n         )\n         self.about = api.content.create(\n-            type=\'Folder\',\n-            id=\'about\',\n+            type="Folder",\n+            id="about",\n             container=self.portal,\n         )\n         self.events = api.content.create(\n-            type=\'Folder\',\n-            id=\'events\',\n+            type="Folder",\n+            id="events",\n             container=self.portal,\n         )\n \n         self.team = api.content.create(\n             container=self.about,\n-            type=\'Document\',\n-            id=\'team\',\n+            type="Document",\n+            id="team",\n         )\n         self.contact = api.content.create(\n             container=self.about,\n-            type=\'Document\',\n-            id=\'contact\',\n+            type="Document",\n+            id="contact",\n         )\n \n         self.training = api.content.create(\n             container=self.events,\n-            type=\'Event\',\n-            id=\'training\',\n+            type="Event",\n+            id="training",\n         )\n         self.conference = api.content.create(\n             container=self.events,\n-            type=\'Event\',\n-            id=\'conference\',\n+            type="Event",\n+            id="conference",\n         )\n         self.sprint = api.content.create(\n             container=self.events,\n-            type=\'Event\',\n-            id=\'sprint\',\n+            type="Event",\n+            id="sprint",\n         )\n \n         self.image = api.content.create(\n             container=self.portal,\n-            type=\'Image\',\n-            id=\'image\',\n+            type="Image",\n+            id="image",\n         )\n \n     def test_create_constraints(self):\n@@ -98,14 +98,14 @@ def test_create_constraints(self):\n         with self.assertRaises(MissingParameterError):\n             api.relation.create(\n                 target=self.blog,\n-                relationship=\'link\',\n+                relationship="link",\n             )\n \n         # Check the constraints for the target parameter\n         with self.assertRaises(MissingParameterError):\n             api.relation.create(\n                 source=self.about,\n-                relationship=\'link\',\n+                relationship="link",\n             )\n \n         # Check the constraints for the relationship parameter\n@@ -116,12 +116,12 @@ def test_create_constraints(self):\n             )\n \n         # We require a source with portal_type\n-        app = self.layer[\'app\']\n+        app = self.layer["app"]\n         with self.assertRaises(InvalidParameterError):\n             api.relation.create(\n                 source=app,\n                 target=self.blog,\n-                relationship=\'link\',\n+                relationship="link",\n             )\n \n         # We require a target with portal_type\n@@ -129,7 +129,7 @@ def test_create_constraints(self):\n             api.relation.create(\n                 source=self.about,\n                 target=app,\n-                relationship=\'link\',\n+                relationship="link",\n             )\n \n         # We require a string relationship\n@@ -147,18 +147,18 @@ def test_create_relation(self):\n         relations = api.relation.get(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         self.assertEqual(len(relations), 0)\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         relations = api.relation.get(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         self.assertEqual(len(relations), 1)\n         relation = relations[0]\n@@ -170,28 +170,27 @@ def test_create_relation(self):\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'relatedItems\',\n+            relationship="relatedItems",\n         )\n         self.assertEqual(len(self.about.relatedItems), 1)\n         self.assertIsInstance(self.about.relatedItems[0], RelationValue)\n \n         # create relation with a fieldname that is no relationfield\n-        self.assertEqual(self.about.description, \'\')\n+        self.assertEqual(self.about.description, "")\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'description\',\n+            relationship="description",\n         )\n-        self.assertEqual(self.about.description, \'\')\n+        self.assertEqual(self.about.description, "")\n         self.assertEqual(len(api.relation.get(source=self.about, target=self.blog)), 3)\n \n-\n     def test_delete_constraints(self):\n         """Test the constraints when deleting relations."""\n         from plone.api.exc import InvalidParameterError\n \n         # If source is given, it must have a portal_type.\n-        app = self.layer[\'app\']\n+        app = self.layer["app"]\n         with self.assertRaises(InvalidParameterError):\n             api.relation.delete(source=app)\n \n@@ -208,17 +207,17 @@ def test_delete_relation(self):\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.delete(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         relations = api.relation.get(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         self.assertEqual(len(relations), 0)\n \n@@ -227,12 +226,12 @@ def test_delete_fieldrelation(self):\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'relatedItems\',\n+            relationship="relatedItems",\n         )\n         self.assertEqual(len(api.relation.get(source=self.about)), 2)\n         self.assertIsInstance(self.about.relatedItems[0], RelationValue)\n@@ -240,7 +239,7 @@ def test_delete_fieldrelation(self):\n         api.relation.delete(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'relatedItems\',\n+            relationship="relatedItems",\n         )\n         self.assertEqual(len(api.relation.get(source=self.about)), 1)\n         self.assertEqual(len(self.about.relatedItems), 0)\n@@ -250,17 +249,17 @@ def test_delete_one_fieldrelation(self):\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'relatedItems\',\n+            relationship="relatedItems",\n         )\n         api.relation.create(\n             source=self.about,\n             target=self.events,\n-            relationship=\'relatedItems\',\n+            relationship="relatedItems",\n         )\n         self.assertEqual(len(api.relation.get(source=self.about)), 3)\n         self.assertIsInstance(self.about.relatedItems[0], RelationValue)\n@@ -268,7 +267,7 @@ def test_delete_one_fieldrelation(self):\n         api.relation.delete(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'relatedItems\',\n+            relationship="relatedItems",\n         )\n         self.assertEqual(len(api.relation.get(source=self.about)), 2)\n         self.assertEqual(len(self.about.relatedItems), 1)\n@@ -279,21 +278,21 @@ def test_deleted_relation_is_purged(self):\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'description\',\n+            relationship="description",\n         )\n-        self.assertEqual(self.about.description, \'\')\n+        self.assertEqual(self.about.description, "")\n         self.assertEqual(len(api.relation.get(source=self.about)), 1)\n-        rels = relation_catalog.findRelations({\'from_attribute\': \'description\'})\n+        rels = relation_catalog.findRelations({"from_attribute": "description"})\n         self.assertEqual(len([i for i in rels]), 1)\n \n         api.relation.delete(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'description\',\n+            relationship="description",\n         )\n         self.assertEqual(len(api.relation.get(source=self.about)), 0)\n-        self.assertEqual(self.about.description, \'\')\n-        rels = relation_catalog.findRelations({\'from_attribute\': \'description\'})\n+        self.assertEqual(self.about.description, "")\n+        rels = relation_catalog.findRelations({"from_attribute": "description"})\n         self.assertEqual(len([i for i in rels]), 0)\n \n     def test_get_constraints(self):\n@@ -301,7 +300,7 @@ def test_get_constraints(self):\n         from plone.api.exc import InvalidParameterError\n \n         # If source is given, it must have a portal_type.\n-        app = self.layer[\'app\']\n+        app = self.layer["app"]\n         with self.assertRaises(InvalidParameterError):\n             api.relation.get(source=app)\n \n@@ -318,106 +317,114 @@ def test_get_relation(self):\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.events,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.about.team,\n             target=self.events,\n-            relationship=\'team\',\n+            relationship="team",\n         )\n         api.relation.create(\n             source=self.events,\n             target=self.portal.image,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         self.assertEqual(len(api.relation.get(source=self.about)), 1)\n         self.assertIsInstance(api.relation.get(source=self.about), list)\n         self.assertIsInstance(api.relation.get(source=self.about)[0], RelationValue)\n \n         self.assertEqual(len(api.relation.get(target=self.blog)), 2)\n-        self.assertEqual(len(api.relation.get(relationship=\'link\')), 3)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 3)\n \n-        self.assertEqual(len(api.relation.get(source=self.about, relationship=\'link\')), 1)\n-        self.assertEqual(len(api.relation.get(source=self.about, target=self.events)), 0)\n+        self.assertEqual(\n+            len(api.relation.get(source=self.about, relationship="link")), 1\n+        )\n+        self.assertEqual(\n+            len(api.relation.get(source=self.about, target=self.events)), 0\n+        )\n         self.assertEqual(len(api.relation.get(source=self.about, target=self.blog)), 1)\n \n         self.assertEqual(len(api.relation.get(source=self.events)), 2)\n-        self.assertEqual(len(api.relation.get(relationship=\'team\')), 1)\n+        self.assertEqual(len(api.relation.get(relationship="team")), 1)\n \n     def test_get_relation_as_dict(self):\n         """Test getting relations as dicts"""\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.events,\n             target=self.blog,\n-            relationship=\'bloglink\',\n+            relationship="bloglink",\n+        )\n+        self.assertEqual(\n+            len(api.relation.get(relationship="link", as_dict=True)["link"]), 1\n         )\n-        self.assertEqual(len(api.relation.get(relationship=\'link\', as_dict=True)[\'link\']), 1)\n         rels = api.relation.get(target=self.blog, as_dict=True)\n-        self.assertEqual(len(rels[\'link\']), 1)\n-        self.assertEqual(len(rels[\'bloglink\']), 1)\n+        self.assertEqual(len(rels["link"]), 1)\n+        self.assertEqual(len(rels["bloglink"]), 1)\n \n     def test_get_broken_relation(self):\n         """Test that broken relations are ignored."""\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.events,\n             target=self.portal.image,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         self.assertEqual(len(api.relation.get(source=self.about)), 1)\n-        self.assertEqual(len(api.relation.get(relationship=\'link\')), 2)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 2)\n \n         # break a relation\n-        self.portal._delObject(\'blog\')\n+        self.portal._delObject("blog")\n \n         self.assertEqual(len(api.relation.get(source=self.about)), 0)\n-        self.assertEqual(len(api.relation.get(relationship=\'link\')), 1)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 1)\n \n     def test_restricted_relation(self):\n         """Test that rels between inaccessible items are ignored."""\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.events,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.about.team,\n             target=self.events,\n-            relationship=\'team\',\n+            relationship="team",\n         )\n         api.relation.create(\n             source=self.events,\n             target=self.portal.image,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n-        api.content.transition(self.events, to_state=\'published\')\n-        api.content.transition(self.blog, to_state=\'published\')\n-        self.assertEqual(len(api.relation.get(relationship=\'link\')), 3)\n+        api.content.transition(self.events, to_state="published")\n+        api.content.transition(self.blog, to_state="published")\n+        self.assertEqual(len(api.relation.get(relationship="link")), 3)\n \n         # Switch user\n-        api.user.create(email=\'bob@plone.org\', username=\'bob\')\n-        setRoles(self.portal, \'bob\', [\'Member\'])\n+        api.user.create(email="bob@plone.org", username="bob")\n+        setRoles(self.portal, "bob", ["Member"])\n         logout()\n-        login(self.portal, \'bob\')\n+        login(self.portal, "bob")\n \n-        self.assertEqual(len(api.relation.get(relationship=\'link\')), 2)\n-        self.assertEqual(len(api.relation.get(relationship=\'link\', unrestricted=True)), 3)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 2)\n+        self.assertEqual(\n+            len(api.relation.get(relationship="link", unrestricted=True)), 3\n+        )\ndiff --git a/src/plone/api/tests/test_user.py b/src/plone/api/tests/test_user.py\nindex 67313238..a324647b 100644\n--- a/src/plone/api/tests/test_user.py\n+++ b/src/plone/api/tests/test_user.py\n@@ -7,14 +7,13 @@\n from plone.app.testing import logout\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n-from plone.registry.interfaces import IRegistry\n+from unittest import mock\n from zope.component import adapter\n from zope.component import getGlobalSiteManager\n from zope.component import provideAdapter\n from zope.interface import implementer\n from zope.interface import Interface\n \n-from unittest import mock\n import unittest\n \n \n@@ -25,11 +24,11 @@ class TestPloneApiUser(unittest.TestCase):\n \n     def setUp(self):\n         """Shared test environment set-up, ran before every test."""\n-        self.portal = self.layer[\'portal\']\n-        self.portal_membership = api.portal.get_tool(\'portal_membership\')\n+        self.portal = self.layer["portal"]\n+        self.portal_membership = api.portal.get_tool("portal_membership")\n \n     def _check_userid_and_username_different(self):\n-        """Ensure that the userid and username are not equal\n+        """Ensure that the userid and username are not equal.\n \n         This is important for tests which rely on differentiation between the\n         two. These tests should rely on the Test User created by\n@@ -44,22 +43,23 @@ def _check_userid_and_username_different(self):\n \n     def _set_emaillogin(self, value):\n         from plone.api.exc import InvalidParameterError\n+\n         try:\n-            api.portal.set_registry_record(\'plone.use_email_as_login\', value)\n+            api.portal.set_registry_record("plone.use_email_as_login", value)\n         except InvalidParameterError:\n             portal = api.portal.get()\n             portal.portal_properties.site_properties.use_email_as_login = value\n \n     def test_create_no_email(self):\n         """Test that exception is raised if no email is given."""\n-\n         self._set_emaillogin(True)\n \n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.user.create(\n-                username=\'chuck\',\n-                password=\'secret\',\n+                username="chuck",\n+                password="secret",\n             )\n \n     def test_get_user_userid_username(self):\n@@ -77,35 +77,35 @@ def test_get_user_userid_username(self):\n     def test_create_email_in_properties(self):\n         """Test that email is parsed from the properties."""\n         user = api.user.create(\n-            username=\'chuck\',\n-            password=\'secret\',\n-            properties={\'email\': \'chuck@norris.org\'},\n+            username="chuck",\n+            password="secret",\n+            properties={"email": "chuck@norris.org"},\n         )\n \n-        self.assertEqual(user.getProperty(\'email\'), \'chuck@norris.org\')\n+        self.assertEqual(user.getProperty("email"), "chuck@norris.org")\n \n     def test_create_no_username(self):\n         """Test create if no username is provided."""\n-\n         # If there is no username, email will be used instead\n         self._set_emaillogin(True)\n \n         user = api.user.create(\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n-        self.assertEqual(user.getUserName(), \'chuck@norris.org\')\n+        self.assertEqual(user.getUserName(), "chuck@norris.org")\n \n         # But if using emails as a username is disabled, we should get\n         # an error\n         self._set_emaillogin(False)\n \n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.create(\n-                email=\'chuck@norris.org\',\n-                password=\'secret\',\n+                email="chuck@norris.org",\n+                password="secret",\n             )\n \n     def test_create_with_username(self):\n@@ -113,76 +113,75 @@ def test_create_with_username(self):\n         self._set_emaillogin(True)\n \n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n-        self.assertEqual(user.getUserName(), \'chuck@norris.org\')\n+        self.assertEqual(user.getUserName(), "chuck@norris.org")\n \n         self._set_emaillogin(False)\n \n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n-        self.assertEqual(user.getUserName(), \'chuck\')\n+        self.assertEqual(user.getUserName(), "chuck")\n \n     def test_create_default_roles(self):\n         """Test the default role is set to member."""\n         # if create is given no roles, member is the default\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n         self.assertCountEqual(\n             api.user.get_roles(user=user),\n-            [\'Member\', \'Authenticated\'],\n+            ["Member", "Authenticated"],\n         )\n \n     def test_create_specified_roles(self):\n         """Test specific roles are set correctly."""\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n-            roles=[\'Reviewer\', \'Editor\'],\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n+            roles=["Reviewer", "Editor"],\n         )\n         self.assertCountEqual(\n             api.user.get_roles(user=user),\n-            [\'Reviewer\', \'Authenticated\', \'Editor\'],\n+            ["Reviewer", "Authenticated", "Editor"],\n         )\n \n     def test_create_no_roles(self):\n         """Test that passing an empty list give a user with no member role."""\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n             roles=[],\n         )\n         self.assertCountEqual(\n             api.user.get_roles(user=user),\n-            [\'Authenticated\'],\n+            ["Authenticated"],\n         )\n \n     def test_get_constraints(self):\n-        """Test that exception is raised if no username is given when getting\n-        the user.\n-        """\n+        """Test on raised exeption if no username is given when getting the user."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.user.get()\n \n     def test_get(self):\n         """Test getting the user."""\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n-        self.assertEqual(api.user.get(\'chuck\').id, user.id)\n+        self.assertEqual(api.user.get("chuck").id, user.id)\n \n     def test_get_current(self):\n         """Test getting the currently logged-in user."""\n@@ -194,146 +193,147 @@ def test_get_current(self):\n     def test_get_all_users(self):\n         """Test getting all users."""\n         api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n         users = [user.getUserName() for user in api.user.get_users()]\n         self.assertCountEqual(\n             users,\n-            [\'chuck\', TEST_USER_NAME],\n+            ["chuck", TEST_USER_NAME],\n         )\n \n     def test_get_groups_users(self):\n         """Test getting all users of a certain group."""\n         api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n-        api.group.create(groupname=\'staff\')\n-        api.group.add_user(username=\'chuck\', groupname=\'staff\')\n+        api.group.create(groupname="staff")\n+        api.group.add_user(username="chuck", groupname="staff")\n \n-        users = api.user.get_users(groupname=\'staff\')\n+        users = api.user.get_users(groupname="staff")\n         usernames = [user.getUserName() for user in users]\n \n-        self.assertEqual(usernames, [\'chuck\'])\n+        self.assertEqual(usernames, ["chuck"])\n \n     def test_get_users_groupname_and_group(self):\n         """Test getting users passing both groupname and group."""\n-        api.group.create(groupname=\'bacon\')\n-        bacon = api.group.get(groupname=\'bacon\')\n+        api.group.create(groupname="bacon")\n+        bacon = api.group.get(groupname="bacon")\n \n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.get_users(\n-                groupname=\'bacon\',\n+                groupname="bacon",\n                 group=bacon,\n             )\n \n     def test_get_users_nonexistent_group(self):\n         """Test getting users for a group that does not exist."""\n-\n         from plone.api.exc import GroupNotFoundError\n+\n         with self.assertRaises(GroupNotFoundError):\n-            api.user.get_users(groupname=\'bacon\')\n+            api.user.get_users(groupname="bacon")\n \n     def test_delete_no_username(self):\n         """Test deleting of a member with email login."""\n-\n         self._set_emaillogin(True)\n \n         # This should fail either an username or user object should be given\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.user.delete()\n \n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.delete(\n-                username=\'chuck@norris.org\',\n+                username="chuck@norris.org",\n                 user=mock.Mock(),\n             )\n \n-        api.user.create(email=\'chuck@norris.org\', password=\'secret\')\n-        api.user.delete(username=\'unwanted@norris.org\')\n+        api.user.create(email="chuck@norris.org", password="secret")\n+        api.user.delete(username="unwanted@norris.org")\n \n-        user = api.user.create(email=\'steven@seagal.org\', password=\'secret\')\n+        user = api.user.create(email="steven@seagal.org", password="secret")\n         api.user.delete(user=user)\n \n     def test_delete_username(self):\n-        """test whether the user has been deleted."""\n-\n+        """Test whether the user has been deleted."""\n         api.user.create(\n-            username=\'unwanted\',\n-            password=\'secret\',\n-            email=\'unwanted@example.org\',\n+            username="unwanted",\n+            password="secret",\n+            email="unwanted@example.org",\n         )\n-        api.user.delete(username=\'unwanted\')\n+        api.user.delete(username="unwanted")\n \n         user = api.user.create(\n-            username=\'steven\',\n-            password=\'secret\',\n-            email=\'steven@example.org\',\n+            username="steven",\n+            password="secret",\n+            email="steven@example.org",\n         )\n         api.user.delete(user=user)\n \n     def test_is_anonymous(self):\n         """Test anonymous access."""\n-\n         self.assertEqual(api.user.is_anonymous(), False)\n         logout()\n         self.assertEqual(api.user.is_anonymous(), True)\n \n     def test_get_roles_username(self):\n         """Test get roles passing a username."""\n-        ROLES = [\'Reviewer\', \'Editor\']\n+        ROLES = ["Reviewer", "Editor"]\n         api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n             roles=ROLES,\n         )\n         self.assertCountEqual(\n-            ROLES + [\'Authenticated\'],\n-            api.user.get_roles(username=\'chuck\'),\n+            ROLES + ["Authenticated"],\n+            api.user.get_roles(username="chuck"),\n         )\n \n     def test_get_roles_user(self):\n         """Test get roles passing a user."""\n-        ROLES = [\'Reviewer\', \'Editor\']\n+        ROLES = ["Reviewer", "Editor"]\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n             roles=ROLES,\n         )\n         self.assertCountEqual(\n-            ROLES + [\'Authenticated\'],\n+            ROLES + ["Authenticated"],\n             api.user.get_roles(user=user),\n         )\n \n     def test_get_roles_username_and_user(self):\n         """Test get roles passing username and user."""\n-        ROLES = [\'Reviewer\', \'Editor\']\n+        ROLES = ["Reviewer", "Editor"]\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n             roles=ROLES,\n         )\n \n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.get_roles(\n-                username=\'chuck\',\n+                username="chuck",\n                 user=user,\n             )\n \n     def test_get_roles_no_parameters(self):\n         """Test get roles without any parameters."""\n         self.assertCountEqual(\n-            [\'Manager\', \'Authenticated\'],\n+            ["Manager", "Authenticated"],\n             api.user.get_roles(),\n         )\n \n@@ -347,162 +347,164 @@ def test_get_permissions_no_parameters(self):\n     def test_get_roles_nonexistant_user(self):\n         """Test get roles for a user that does not exist."""\n         from plone.api.exc import UserNotFoundError\n+\n         with self.assertRaises(UserNotFoundError):\n-            api.user.get_roles(username=\'theurbanspaceman\')\n+            api.user.get_roles(username="theurbanspaceman")\n \n     def test_get_roles_anonymous(self):\n         """Test get_roles for an anonymous user."""\n         from AccessControl.users import nobody\n+\n         with api.env.adopt_user(user=nobody):\n             self.assertEqual(\n                 api.user.get_roles(),\n-                (\'Anonymous\', ),\n+                ("Anonymous",),\n             )\n \n     def test_get_roles_in_context(self):\n-        """Test get local and inherited roles for a user on an object"""\n+        """Test get local and inherited roles for a user on an object."""\n         api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         api.user.grant_roles(\n-            username=\'chuck\',\n-            roles=[\'Editor\'],\n+            username="chuck",\n+            roles=["Editor"],\n             obj=folder,\n         )\n         self.assertIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n \n     def test_get_roles_local_only(self):\n-        """Test get local roles for a user on an object"""\n+        """Test get local roles for a user on an object."""\n         api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         api.user.grant_roles(\n-            username=\'chuck\',\n-            roles=[\'Editor\'],\n+            username="chuck",\n+            roles=["Editor"],\n             obj=folder,\n         )\n         self.assertNotIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=document, inherit=False),\n         )\n \n     def test_get_roles_local_includes_group_roles(self):\n         """Test if get local roles for a user on an object respects groups."""\n         api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n-        api.group.create(\'foo\', roles=[\'Reviewer\'])\n-        api.group.add_user(groupname=\'foo\', username=\'chuck\')\n+        api.group.create("foo", roles=["Reviewer"])\n+        api.group.add_user(groupname="foo", username="chuck")\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document),\n-            [\'Member\', \'Reviewer\', \'Authenticated\'],\n+            api.user.get_roles(username="chuck", obj=document),\n+            ["Member", "Reviewer", "Authenticated"],\n         )\n         api.user.grant_roles(\n-            username=\'chuck\',\n-            roles=[\'Editor\'],\n+            username="chuck",\n+            roles=["Editor"],\n             obj=folder,\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document),\n-            [\'Member\', \'Reviewer\', \'Authenticated\', \'Editor\'],\n+            api.user.get_roles(username="chuck", obj=document),\n+            ["Member", "Reviewer", "Authenticated", "Editor"],\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n+            api.user.get_roles(username="chuck", obj=document, inherit=False),\n             [],\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n-            [\'Editor\'],\n+            api.user.get_roles(username="chuck", obj=folder, inherit=False),\n+            ["Editor"],\n         )\n         api.group.grant_roles(\n-            groupname=\'foo\',\n-            roles=[\'Contributor\'],\n+            groupname="foo",\n+            roles=["Contributor"],\n             obj=document,\n         )\n         self.assertCountEqual(\n-            [\'Contributor\'],\n-            api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n+            ["Contributor"],\n+            api.user.get_roles(username="chuck", obj=document, inherit=False),\n         )\n \n     def test_get_permissions_root(self):\n         """Test get permissions on site root."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n             roles=[],\n         )\n \n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.get_permissions(\n-                username=\'chuck\',\n+                username="chuck",\n                 user=user,\n             )\n \n         PERMISSIONS = {\n-            \'View\': True,\n-            \'Manage portal\': False,\n-            \'Modify portal content\': False,\n-            \'Access contents information\': True,\n+            "View": True,\n+            "Manage portal": False,\n+            "Modify portal content": False,\n+            "Access contents information": True,\n         }\n \n         for k, v in PERMISSIONS.items():\n             self.assertEqual(\n                 v,\n-                api.user.get_permissions(username=\'chuck\').get(k, None),\n+                api.user.get_permissions(username="chuck").get(k, None),\n             )\n             self.assertEqual(\n                 v,\n@@ -511,47 +513,47 @@ def test_get_permissions_root(self):\n \n     def test_get_permissions_nonexistant_user(self):\n         """Test get_permissions for a user that does not exist."""\n-\n         from plone.api.exc import UserNotFoundError\n+\n         with self.assertRaises(UserNotFoundError):\n-            api.user.get_permissions(username=\'ming\')\n+            api.user.get_permissions(username="ming")\n \n     def test_get_permissions_context(self):\n         """Test get permissions on some context."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n             roles=[],\n         )\n \n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.get_permissions(\n-                username=\'chuck\',\n+                username="chuck",\n                 user=user,\n             )\n \n         PERMISSIONS = {\n-            \'View\': False,\n-            \'Manage portal\': False,\n-            \'Modify portal content\': False,\n-            \'Access contents information\': False,\n+            "View": False,\n+            "Manage portal": False,\n+            "Modify portal content": False,\n+            "Access contents information": False,\n         }\n \n         folder = api.content.create(\n             container=self.portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n \n         for k, v in PERMISSIONS.items():\n             self.assertEqual(\n                 v,\n                 api.user.get_permissions(\n-                    username=\'chuck\',\n+                    username="chuck",\n                     obj=folder,\n                 ).get(k, None),\n             )\n@@ -565,41 +567,41 @@ def test_get_permissions_context(self):\n \n     def test_has_permission_context(self):\n         """Test has_permission on some context."""\n-\n-        username = \'billy\'\n+        username = "billy"\n         user = api.user.create(\n             username=username,\n-            email=\'billy@bob.net\',\n-            password=\'secret\',\n+            email="billy@bob.net",\n+            password="secret",\n         )\n \n         # Cannot supply both username and user arguments\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.has_permission(\n-                \'View\',\n+                "View",\n                 username=username,\n                 user=user,\n             )\n \n         folder = api.content.create(\n             container=self.portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'A Folder\',\n+            type="Folder",\n+            id="folder_one",\n+            title="A Folder",\n         )\n-        api.content.transition(obj=folder, transition=\'publish\')\n+        api.content.transition(obj=folder, transition="publish")\n \n         self.assertTrue(\n             api.user.has_permission(\n-                \'View\',\n+                "View",\n                 user=user,\n                 obj=folder,\n             ),\n         )\n         self.assertFalse(\n             api.user.has_permission(\n-                \'Modify portal content\',\n+                "Modify portal content",\n                 user=user,\n                 obj=folder,\n             ),\n@@ -607,7 +609,7 @@ def test_has_permission_context(self):\n \n         self.assertTrue(\n             api.user.has_permission(\n-                \'View\',\n+                "View",\n                 user=None,\n                 obj=folder,\n             ),\n@@ -615,32 +617,31 @@ def test_has_permission_context(self):\n \n     def test_grant_roles(self):\n         """Test granting a couple of roles."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n-        api.user.grant_roles(username=\'chuck\', roles=[\'Editor\'])\n-        self.assertIn(\'Editor\', api.user.get_roles(username=\'chuck\'))\n-        self.assertIn(\'Editor\', api.user.get_roles(user=user))\n+        api.user.grant_roles(username="chuck", roles=["Editor"])\n+        self.assertIn("Editor", api.user.get_roles(username="chuck"))\n+        self.assertIn("Editor", api.user.get_roles(user=user))\n \n-        api.user.grant_roles(username=\'chuck\', roles=(\'Contributor\',))\n-        self.assertIn(\'Contributor\', api.user.get_roles(username=\'chuck\'))\n-        self.assertIn(\'Contributor\', api.user.get_roles(user=user))\n+        api.user.grant_roles(username="chuck", roles=("Contributor",))\n+        self.assertIn("Contributor", api.user.get_roles(username="chuck"))\n+        self.assertIn("Contributor", api.user.get_roles(user=user))\n \n-        api.user.grant_roles(username=\'chuck\', roles=[\'Reader\', \'Reader\'])\n+        api.user.grant_roles(username="chuck", roles=["Reader", "Reader"])\n         ROLES = [\n-            \'Editor\',\n-            \'Contributor\',\n-            \'Reader\',\n-            \'Authenticated\',\n-            \'Member\',\n+            "Editor",\n+            "Contributor",\n+            "Reader",\n+            "Authenticated",\n+            "Member",\n         ]\n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'chuck\'),\n+            api.user.get_roles(username="chuck"),\n         )\n         self.assertCountEqual(\n             ROLES,\n@@ -649,77 +650,80 @@ def test_grant_roles(self):\n \n     def test_grant_roles_username_and_user(self):\n         """Test grant roles passing username and user."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.user.grant_roles(username=user)\n \n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n-            api.user.grant_roles(username=\'chuck\', roles=(\'Authenticated\'))\n+            api.user.grant_roles(username="chuck", roles=("Authenticated"))\n \n     def test_grant_roles_anonymous(self):\n         """Test granting Anonymous role."""\n-\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.grant_roles(\n-                username=\'chuck\',\n-                roles=[\'Anonymous\'],\n+                username="chuck",\n+                roles=["Anonymous"],\n             )\n \n     def test_grant_roles_authenticated(self):\n         """Test granting Authenticated role."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.grant_roles(\n-                username=\'chuck\',\n-                roles=[\'Authenticated\'],\n+                username="chuck",\n+                roles=["Authenticated"],\n             )\n \n     def test_grant_roles_no_parameters(self):\n         """Test grant roles without passing parameters."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.user.grant_roles()\n \n     def test_grant_roles_no_user(self):\n         """If no user is found, raise a suitable error."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.grant_roles(\n-                username=\'chuck\',\n-                roles=[\'Manager\'],\n+                username="chuck",\n+                roles=["Manager"],\n             )\n \n     def test_revoke_roles(self):\n         """Test revoke roles."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n-        api.user.grant_roles(username=\'chuck\', roles=[\'Reviewer\', \'Editor\'])\n-        api.user.revoke_roles(username=\'chuck\', roles=[\'Reviewer\'])\n-        self.assertNotIn(\'Reviewer\', api.user.get_roles(username=\'chuck\'))\n-        self.assertNotIn(\'Reviewer\', api.user.get_roles(user=user))\n-        self.assertIn(\'Editor\', api.user.get_roles(username=\'chuck\'))\n-        self.assertIn(\'Editor\', api.user.get_roles(user=user))\n+        api.user.grant_roles(username="chuck", roles=["Reviewer", "Editor"])\n+        api.user.revoke_roles(username="chuck", roles=["Reviewer"])\n+        self.assertNotIn("Reviewer", api.user.get_roles(username="chuck"))\n+        self.assertNotIn("Reviewer", api.user.get_roles(user=user))\n+        self.assertIn("Editor", api.user.get_roles(username="chuck"))\n+        self.assertIn("Editor", api.user.get_roles(user=user))\n \n-        api.user.revoke_roles(username=\'chuck\', roles=(\'Editor\',))\n-        ROLES = [\'Authenticated\', \'Member\']\n+        api.user.revoke_roles(username="chuck", roles=("Editor",))\n+        ROLES = ["Authenticated", "Member"]\n \n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'chuck\'),\n+            api.user.get_roles(username="chuck"),\n         )\n         self.assertCountEqual(\n             ROLES,\n@@ -727,7 +731,7 @@ def test_revoke_roles(self):\n         )\n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'chuck\', inherit=False),\n+            api.user.get_roles(username="chuck", inherit=False),\n         )\n         self.assertCountEqual(\n             ROLES,\n@@ -736,152 +740,153 @@ def test_revoke_roles(self):\n \n     def test_revoke_roles_username_and_user(self):\n         """Test revoke roles passing username and user."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.user.revoke_roles(user=user)\n \n     def test_revoke_roles_anonymous(self):\n         """Test revoking Anonymous role."""\n-\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.revoke_roles(\n-                username=\'chuck\',\n-                roles=[\'Anonymous\'],\n+                username="chuck",\n+                roles=["Anonymous"],\n             )\n \n     def test_revoke_roles_authenticated(self):\n         """Test revoking Authenticated role."""\n-\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.revoke_roles(\n-                username=\'chuck\',\n-                roles=[\'Authenticated\'],\n+                username="chuck",\n+                roles=["Authenticated"],\n             )\n \n     def test_revoke_roles_no_parameters(self):\n         """Test revoke roles without passing parameters."""\n-\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.user.revoke_roles()\n \n     def test_revoke_roles_username(self):\n         """Test revoke roles for username."""\n         api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n-            api.user.revoke_roles(username=\'chuck\', roles=[\'Authenticated\'])\n+            api.user.revoke_roles(username="chuck", roles=["Authenticated"])\n \n-    @unittest.skip(\'Getting the Anonymous user does not work like this.\')\n+    @unittest.skip("Getting the Anonymous user does not work like this.")\n     def test_revoke_roles_from_anonymous(self):\n         """Test revoking roles from an Anonymous user."""\n         api.user.revoke_roles(\n-            username=\'Anonymous User\',\n-            roles=[\'Reviewer\'],\n+            username="Anonymous User",\n+            roles=["Reviewer"],\n         )\n-        ROLES = [\'Anonymous\']\n+        ROLES = ["Anonymous"]\n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'Anonymous User\'),\n+            api.user.get_roles(username="Anonymous User"),\n         )\n \n     def test_revoke_roles_no_user(self):\n         """If no user is found, raise a suitable error."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.revoke_roles(\n-                username=\'chuck\',\n-                roles=[\'Manager\'],\n+                username="chuck",\n+                roles=["Manager"],\n             )\n \n     def test_grant_roles_in_context(self):\n         """Test grant roles."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n \n         api.user.grant_roles(\n-            username=\'chuck\',\n-            roles=[\'Editor\'],\n+            username="chuck",\n+            roles=["Editor"],\n             obj=folder,\n         )\n         self.assertIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=folder),\n         )\n         self.assertCountEqual(\n-            [\'Editor\'],\n-            api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n+            ["Editor"],\n+            api.user.get_roles(username="chuck", obj=folder, inherit=False),\n         )\n         self.assertIn(\n-            \'Editor\',\n+            "Editor",\n             api.user.get_roles(user=user, obj=folder),\n         )\n         self.assertIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n         self.assertIn(\n-            \'Editor\',\n+            "Editor",\n             api.user.get_roles(user=user, obj=document),\n         )\n \n         api.user.grant_roles(\n-            username=\'chuck\',\n-            roles=(\'Contributor\',),\n+            username="chuck",\n+            roles=("Contributor",),\n             obj=folder,\n         )\n         self.assertIn(\n-            \'Contributor\',\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            "Contributor",\n+            api.user.get_roles(username="chuck", obj=folder),\n         )\n         self.assertIn(\n-            \'Contributor\',\n+            "Contributor",\n             api.user.get_roles(user=user, obj=folder),\n         )\n         self.assertIn(\n-            \'Contributor\',\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            "Contributor",\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n         self.assertIn(\n-            \'Contributor\',\n+            "Contributor",\n             api.user.get_roles(user=user, obj=document),\n         )\n \n-        ROLES = [\'Editor\', \'Contributor\', \'Authenticated\', \'Member\']\n+        ROLES = ["Editor", "Contributor", "Authenticated", "Member"]\n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            api.user.get_roles(username="chuck", obj=folder),\n         )\n         self.assertCountEqual(\n             ROLES,\n@@ -889,7 +894,7 @@ def test_grant_roles_in_context(self):\n         )\n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n         self.assertCountEqual(\n             ROLES,\n@@ -897,31 +902,29 @@ def test_grant_roles_in_context(self):\n         )\n \n     def test_grant_roles_disregards_adapter(self):\n-        """Test that borg.localrole-adpaters are not copied when granting\n-        local roles."""\n-\n+        """Test that borg.localrole-adpaters are not copied on granting local roles."""\n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n-            [\'Member\', \'Authenticated\'],\n+            api.user.get_roles(username="chuck", obj=folder),\n+            ["Member", "Authenticated"],\n         )\n         self.assertFalse(\n             api.user.get_roles(user=user, obj=folder, inherit=False),\n@@ -931,175 +934,174 @@ def test_grant_roles_disregards_adapter(self):\n         @adapter(Interface)\n         @implementer(ILocalRoleProvider)\n         class LocalRoleProvider:\n-\n             def __init__(self, context):\n                 self.context = context\n \n             def getRoles(self, principal_id):\n-                return (\'Reviewer\',)\n+                return ("Reviewer",)\n \n         provideAdapter(LocalRoleProvider)\n \n         # the adapter-role is added for get_role\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n-            [\'Member\', \'Authenticated\', \'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=folder),\n+            ["Member", "Authenticated", "Reviewer"],\n         )\n \n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n-            [\'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=folder, inherit=False),\n+            ["Reviewer"],\n         )\n \n         # Assign a local role\n         api.user.grant_roles(\n-            username=\'chuck\',\n-            roles=[\'Contributor\'],\n+            username="chuck",\n+            roles=["Contributor"],\n             obj=folder,\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n-            [\'Member\', \'Authenticated\', \'Contributor\', \'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=folder),\n+            ["Member", "Authenticated", "Contributor", "Reviewer"],\n         )\n \n         # The adapter role is in in the local roles but not persistent\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n-            [\'Contributor\', \'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=folder, inherit=False),\n+            ["Contributor", "Reviewer"],\n         )\n-        local_roles = getattr(folder, \'__ac_local_roles__\', {})\n+        local_roles = getattr(folder, "__ac_local_roles__", {})\n         self.assertEqual(\n-            local_roles.get(\'chuck\'),\n-            [\'Contributor\'],\n+            local_roles.get("chuck"),\n+            ["Contributor"],\n         )\n \n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n-            [\'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=document, inherit=False),\n+            ["Reviewer"],\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document),\n-            [\'Member\', \'Authenticated\', \'Contributor\', \'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=document),\n+            ["Member", "Authenticated", "Contributor", "Reviewer"],\n         )\n \n         # add a group and test mix of group and adapter and user-roles\n-        api.group.create(\'foo\')\n+        api.group.create("foo")\n         api.group.grant_roles(\n-            groupname=\'foo\',\n-            roles=[\'Contributor\'],\n+            groupname="foo",\n+            roles=["Contributor"],\n             obj=document,\n         )\n-        api.group.add_user(groupname=\'foo\', username=\'chuck\')\n+        api.group.add_user(groupname="foo", username="chuck")\n \n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n-            [\'Contributor\', \'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=document, inherit=False),\n+            ["Contributor", "Reviewer"],\n         )\n-        api.group.grant_roles(groupname=\'foo\', roles=[\'Manager\'], obj=folder)\n+        api.group.grant_roles(groupname="foo", roles=["Manager"], obj=folder)\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n-            [\'Contributor\', \'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=document, inherit=False),\n+            ["Contributor", "Reviewer"],\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            api.user.get_roles(username="chuck", obj=document),\n             [\n-                \'Contributor\',\n-                \'Reviewer\',\n-                \'Manager\',\n-                \'Authenticated\',\n-                \'Member\',\n+                "Contributor",\n+                "Reviewer",\n+                "Manager",\n+                "Authenticated",\n+                "Member",\n             ],\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            api.user.get_roles(username="chuck", obj=folder),\n             [\n-                \'Contributor\',\n-                \'Reviewer\',\n-                \'Manager\',\n-                \'Authenticated\',\n-                \'Member\',\n+                "Contributor",\n+                "Reviewer",\n+                "Manager",\n+                "Authenticated",\n+                "Member",\n             ],\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n-            [\'Contributor\', \'Reviewer\', \'Manager\'],\n+            api.user.get_roles(username="chuck", obj=folder, inherit=False),\n+            ["Contributor", "Reviewer", "Manager"],\n         )\n \n         # cleanup\n         gsm = getGlobalSiteManager()\n         gsm.unregisterAdapter(\n-            factory=LocalRoleProvider, provided=ILocalRoleProvider,\n+            factory=LocalRoleProvider,\n+            provided=ILocalRoleProvider,\n         )\n \n     def test_revoke_roles_in_context(self):\n         """Test revoke roles."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         api.user.grant_roles(\n-            username=\'chuck\',\n-            roles=[\'Reviewer\', \'Editor\'],\n+            username="chuck",\n+            roles=["Reviewer", "Editor"],\n             obj=folder,\n         )\n \n-        api.user.revoke_roles(username=\'chuck\', roles=[\'Reviewer\'], obj=folder)\n+        api.user.revoke_roles(username="chuck", roles=["Reviewer"], obj=folder)\n         self.assertIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=folder),\n         )\n-        self.assertIn(\'Editor\', api.user.get_roles(user=user, obj=folder))\n+        self.assertIn("Editor", api.user.get_roles(user=user, obj=folder))\n         self.assertIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n-        self.assertIn(\'Editor\', api.user.get_roles(user=user, obj=document))\n+        self.assertIn("Editor", api.user.get_roles(user=user, obj=document))\n         self.assertNotIn(\n-            \'Reviewer\',\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            "Reviewer",\n+            api.user.get_roles(username="chuck", obj=folder),\n         )\n-        self.assertNotIn(\'Reviewer\', api.user.get_roles(user=user, obj=folder))\n+        self.assertNotIn("Reviewer", api.user.get_roles(user=user, obj=folder))\n         self.assertNotIn(\n-            \'Reviewer\',\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            "Reviewer",\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n         self.assertNotIn(\n-            \'Reviewer\',\n+            "Reviewer",\n             api.user.get_roles(user=user, obj=document),\n         )\n \n-        api.user.revoke_roles(username=\'chuck\', roles=[\'Editor\'], obj=folder)\n+        api.user.revoke_roles(username="chuck", roles=["Editor"], obj=folder)\n         self.assertNotIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=folder),\n         )\n-        self.assertNotIn(\'Editor\', api.user.get_roles(user=user, obj=folder))\n+        self.assertNotIn("Editor", api.user.get_roles(user=user, obj=folder))\n         self.assertNotIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n-        self.assertNotIn(\'Editor\', api.user.get_roles(user=user, obj=document))\n+        self.assertNotIn("Editor", api.user.get_roles(user=user, obj=document))\n \n-        ROLES = [\'Authenticated\', \'Member\']\n+        ROLES = ["Authenticated", "Member"]\n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            api.user.get_roles(username="chuck", obj=folder),\n         )\n         self.assertCountEqual(\n             ROLES,\n@@ -1107,7 +1109,7 @@ def test_revoke_roles_in_context(self):\n         )\n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n         self.assertCountEqual(\n             ROLES,\n@@ -1115,7 +1117,7 @@ def test_revoke_roles_in_context(self):\n         )\n         self.assertCountEqual(\n             [],\n-            api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n+            api.user.get_roles(username="chuck", obj=folder, inherit=False),\n         )\n         self.assertCountEqual(\n             [],\n@@ -1123,7 +1125,7 @@ def test_revoke_roles_in_context(self):\n         )\n         self.assertCountEqual(\n             [],\n-            api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n+            api.user.get_roles(username="chuck", obj=document, inherit=False),\n         )\n         self.assertCountEqual(\n             [],\ndiff --git a/src/plone/api/tests/test_validation.py b/src/plone/api/tests/test_validation.py\nindex 48c951b0..810a02cc 100644\n--- a/src/plone/api/tests/test_validation.py\n+++ b/src/plone/api/tests/test_validation.py\n@@ -10,7 +10,7 @@\n \n \n def undecorated_func(arg1=None, arg2=None, arg3=None):\n-    return \'foo\'\n+    return "foo"\n \n \n class TestPloneAPIValidation(unittest.TestCase):\n@@ -22,7 +22,8 @@ def test_decorator_works_the_same_as_explicit_calling(self):\n         """Check that calling the decorator with the function as an argument\n         is equivalent to decorating the function.\n         """\n-        @required_parameters(\'arg1\')\n+\n+        @required_parameters("arg1")\n         def _func1_decorated(arg1=None, arg2=None, arg3=None):\n             """This is my docstring"""\n             pass\n@@ -30,10 +31,11 @@ def _func1_decorated(arg1=None, arg2=None, arg3=None):\n         def _func2_undecorated(arg1=None, arg2=None, arg3=None):\n             """This is my docstring"""\n             pass\n-        _func2_decorated = required_parameters(\'arg1\')(_func2_undecorated)\n+\n+        _func2_decorated = required_parameters("arg1")(_func2_undecorated)\n \n         # Check that the decorated function gets the correct docstring\n-        self.assertEqual(_func1_decorated.__doc__, \'This is my docstring\')\n+        self.assertEqual(_func1_decorated.__doc__, "This is my docstring")\n \n         # Check that both functions have the same docstring\n         self.assertEqual(_func1_decorated.__doc__, _func2_decorated.__doc__)\n@@ -43,27 +45,27 @@ def test_non_existant_required_arg(self):\n         a parameter that doesn\'t exist in the function signature.\n         """\n         with self.assertRaises(ValueError):\n-            _func = required_parameters(\'arg1\', \'wibble\', \'wobble\')\n+            _func = required_parameters("arg1", "wibble", "wobble")\n             _func(undecorated_func)\n \n         with self.assertRaises(ValueError):\n             _func = mutually_exclusive_parameters(\n-                \'arg1\',\n-                \'wibble\',\n-                \'wobble\',\n+                "arg1",\n+                "wibble",\n+                "wobble",\n             )\n             _func(undecorated_func)\n \n     def test_get_supplied_args(self):\n         """Test that positional and keyword args are recognised correctly."""\n         # the arguments specified in the function signature\n-        signature = (\'arg1\', \'arg2\', \'arg3\')\n+        signature = ("arg1", "arg2", "arg3")\n \n         # test that positional args are recognised correctly\n-        result = _gsa(signature, (\'foo\', \'wibble\'), {})\n+        result = _gsa(signature, ("foo", "wibble"), {})\n         self.assertEqual(\n             set(result),\n-            {\'arg1\', \'arg2\'},\n+            {"arg1", "arg2"},\n         )\n \n         # test that keyword args are recognised correctly\n@@ -71,35 +73,35 @@ def test_get_supplied_args(self):\n             signature,\n             (),\n             {\n-                \'arg1\': \'foo\',\n-                \'arg2\': \'wibble\',\n+                "arg1": "foo",\n+                "arg2": "wibble",\n             },\n         )\n         self.assertEqual(\n             set(result),\n-            {\'arg1\', \'arg2\'},\n+            {"arg1", "arg2"},\n         )\n \n         # test that a mixture of args are recognised correctly\n         result = _gsa(\n             signature,\n-            (\'foo\',),\n-            {\'arg2\': \'wibble\'},\n+            ("foo",),\n+            {"arg2": "wibble"},\n         )\n         self.assertEqual(\n             set(result),\n-            {\'arg1\', \'arg2\'},\n+            {"arg1", "arg2"},\n         )\n \n         # test that None-valued positional args are ignored\n         result = _gsa(\n             signature,\n-            (\'foo\', None),\n+            ("foo", None),\n             {},\n         )\n         self.assertEqual(\n             set(result),\n-            {\'arg1\'},\n+            {"arg1"},\n         )\n \n         # test that None-valued keyword args are ignored\n@@ -107,33 +109,33 @@ def test_get_supplied_args(self):\n             signature,\n             (),\n             {\n-                \'arg1\': None,\n-                \'arg2\': \'wibble\',\n+                "arg1": None,\n+                "arg2": "wibble",\n             },\n         )\n         self.assertEqual(\n             set(result),\n-            {\'arg2\'},\n+            {"arg2"},\n         )\n \n     def test_single_keyword_arg_provided(self):\n         """Test for passing a single required parameter\n         as a keyword argument.\n         """\n-        _func = required_parameters(\'arg1\')(undecorated_func)\n+        _func = required_parameters("arg1")(undecorated_func)\n         self.assertEqual(\n-            _func(arg1=\'hello\'),\n-            \'foo\',\n+            _func(arg1="hello"),\n+            "foo",\n         )\n \n     def test_single_positional_arg_provided(self):\n         """Test for passing a single required parameter\n         as a positional argument.\n         """\n-        _func = required_parameters(\'arg1\')(undecorated_func)\n+        _func = required_parameters("arg1")(undecorated_func)\n         self.assertEqual(\n-            _func(\'hello\'),\n-            \'foo\',\n+            _func("hello"),\n+            "foo",\n         )\n \n     def test_single_arg_missing(self):\n@@ -141,7 +143,8 @@ def test_single_arg_missing(self):\n         single required parameter is missing.\n         """\n         from plone.api.exc import MissingParameterError\n-        _func = required_parameters(\'arg1\')(undecorated_func)\n+\n+        _func = required_parameters("arg1")(undecorated_func)\n         with self.assertRaises(MissingParameterError):\n             _func()\n \n@@ -150,104 +153,108 @@ def test_one_missing_one_provided(self):\n         required parameters is missing.\n         """\n         from plone.api.exc import MissingParameterError\n-        _func = required_parameters(\'arg1\', \'arg2\')(undecorated_func)\n+\n+        _func = required_parameters("arg1", "arg2")(undecorated_func)\n         with self.assertRaises(MissingParameterError):\n-            _func(\'hello\')\n+            _func("hello")\n \n     def test_no_mutually_exclusive_args_provided(self):\n         """Test for passing no args (valid) to a function that specifies\n         mutually exclusive parameters.\n         """\n-        _func = mutually_exclusive_parameters(\'arg1\', \'arg2\')(undecorated_func)\n-        self.assertEqual(_func(), \'foo\')\n-        self.assertEqual(_func(arg3=\'hello\'), \'foo\')\n+        _func = mutually_exclusive_parameters("arg1", "arg2")(undecorated_func)\n+        self.assertEqual(_func(), "foo")\n+        self.assertEqual(_func(arg3="hello"), "foo")\n \n     def test_one_mutually_exclusive_arg_provided(self):\n         """Test for passing one arg (the right number) to a function\n         that specifies mutually exclusive parameters.\n         """\n-        _func = mutually_exclusive_parameters(\'arg1\', \'arg2\')(undecorated_func)\n-        self.assertEqual(_func(\'hello\'), \'foo\')\n-        self.assertEqual(_func(arg1=\'hello\'), \'foo\')\n-        self.assertEqual(_func(arg2=\'hello\'), \'foo\')\n+        _func = mutually_exclusive_parameters("arg1", "arg2")(undecorated_func)\n+        self.assertEqual(_func("hello"), "foo")\n+        self.assertEqual(_func(arg1="hello"), "foo")\n+        self.assertEqual(_func(arg2="hello"), "foo")\n \n     def test_two_mutually_exclusive_args_provided(self):\n         """Test that InvalidParameterError is raised if more than\n         one mutually exclusive argument is provided.\n         """\n         from plone.api.exc import InvalidParameterError\n-        _func = mutually_exclusive_parameters(\'arg1\', \'arg2\')(undecorated_func)\n+\n+        _func = mutually_exclusive_parameters("arg1", "arg2")(undecorated_func)\n         with self.assertRaises(InvalidParameterError):\n-            _func(\'ahoy\', \'there\')\n+            _func("ahoy", "there")\n \n         with self.assertRaises(InvalidParameterError):\n-            _func(arg1=\'ahoy\', arg2=\'there\')\n+            _func(arg1="ahoy", arg2="there")\n \n     def test_require_at_least_one_but_none_provided(self):\n         """Test that MissingParameterError is raised if no argument is supplied\n         when at least one is required.\n         """\n         from plone.api.exc import MissingParameterError\n-        _func = at_least_one_of(\'arg1\', \'arg2\')(undecorated_func)\n+\n+        _func = at_least_one_of("arg1", "arg2")(undecorated_func)\n         with self.assertRaises(MissingParameterError):\n             _func()\n \n     def test_require_at_least_one_and_one_provided(self):\n         """Test for passing one argument when at least one is required."""\n-        _func = at_least_one_of(\'arg1\', \'arg2\')(undecorated_func)\n-        self.assertEqual(_func(\'ahoy\'), \'foo\')\n-        self.assertEqual(_func(arg2=\'ahoy\'), \'foo\')\n+        _func = at_least_one_of("arg1", "arg2")(undecorated_func)\n+        self.assertEqual(_func("ahoy"), "foo")\n+        self.assertEqual(_func(arg2="ahoy"), "foo")\n \n     def test_require_at_least_one_and_several_provided(self):\n         """Test for passing several arguments when at least one is required."""\n-        _func = at_least_one_of(\'arg1\', \'arg2\')(undecorated_func)\n-        self.assertEqual(_func(\'ahoy\', \'there\'), \'foo\')\n-        self.assertEqual(_func(arg1=\'ahoy\', arg2=\'there\'), \'foo\')\n-        self.assertEqual(_func(\'ahoy\', arg2=\'there\', arg3=\'matey\'), \'foo\')\n+        _func = at_least_one_of("arg1", "arg2")(undecorated_func)\n+        self.assertEqual(_func("ahoy", "there"), "foo")\n+        self.assertEqual(_func(arg1="ahoy", arg2="there"), "foo")\n+        self.assertEqual(_func("ahoy", arg2="there", arg3="matey"), "foo")\n \n     def test_required_and_mutually_exclusive(self):\n         """Test that multiple decorators can be used together."""\n-        @mutually_exclusive_parameters(\'arg2\', \'arg3\')\n-        @required_parameters(\'arg1\')\n+\n+        @mutually_exclusive_parameters("arg2", "arg3")\n+        @required_parameters("arg1")\n         def _func1_decorated(arg1=None, arg2=None, arg3=None):\n-            return \'foo\'\n+            return "foo"\n \n         from plone.api.exc import InvalidParameterError\n         from plone.api.exc import MissingParameterError\n \n         # test that the required parameter error works (missing arg1)\n         with self.assertRaises(MissingParameterError):\n-            _func1_decorated(arg2=\'ahoy\')\n+            _func1_decorated(arg2="ahoy")\n \n         # test that the mutually exclusive decorator works\n         # (arg2 and arg3 should not be there)\n         with self.assertRaises(InvalidParameterError):\n             _func1_decorated(\n-                arg1=\'ahoy\',\n-                arg2=\'there\',\n-                arg3=\'matey\',\n+                arg1="ahoy",\n+                arg2="there",\n+                arg3="matey",\n             )\n \n         # test that they both work.  Making no assumptions here about the order\n         # in which they fire.\n         with self.assertRaises((InvalidParameterError, MissingParameterError)):\n             _func1_decorated(\n-                arg2=\'ahoy\',\n-                arg3=\'there\',\n+                arg2="ahoy",\n+                arg3="there",\n             )\n \n         # everything ok\n-        self.assertEqual(_func1_decorated(\'ahoy\', arg3=\'there\'), \'foo\')\n+        self.assertEqual(_func1_decorated("ahoy", arg3="there"), "foo")\n \n     def test_exactly_one_required(self):\n         """Test that combining mutually_exclusive_parameters and\n         at_least_one_of is equivalent to \'exactly one required\'.\n         """\n \n-        @mutually_exclusive_parameters(\'arg1\', \'arg2\')\n-        @at_least_one_of(\'arg1\', \'arg2\')\n+        @mutually_exclusive_parameters("arg1", "arg2")\n+        @at_least_one_of("arg1", "arg2")\n         def _func1_decorated(arg1=None, arg2=None, arg3=None):\n-            return \'foo\'\n+            return "foo"\n \n         from plone.api.exc import InvalidParameterError\n         from plone.api.exc import MissingParameterError\n@@ -258,8 +265,8 @@ def _func1_decorated(arg1=None, arg2=None, arg3=None):\n \n         # test that it errors if you provide both\n         with self.assertRaises(InvalidParameterError):\n-            _func1_decorated(\'ahoy\', \'there\')\n+            _func1_decorated("ahoy", "there")\n \n         # everything ok\n-        self.assertEqual(_func1_decorated(\'ahoy\'), \'foo\')\n-        self.assertEqual(_func1_decorated(\'ahoy\', arg3=\'there\'), \'foo\')\n+        self.assertEqual(_func1_decorated("ahoy"), "foo")\n+        self.assertEqual(_func1_decorated("ahoy", arg3="there"), "foo")\ndiff --git a/src/plone/api/user.py b/src/plone/api/user.py\nindex 00428248..206cbe70 100644\n--- a/src/plone/api/user.py\n+++ b/src/plone/api/user.py\n@@ -23,7 +23,7 @@ def create(\n     email=None,\n     username=None,\n     password=None,\n-    roles=(\'Member\', ),\n+    roles=("Member",),\n     properties=None,\n ):\n     """Create a user.\n@@ -52,26 +52,26 @@ def create(\n \n     # it may happen that someone passes email in the properties dict, catch\n     # that and set the email so the code below this works fine\n-    if not email and properties.get(\'email\'):\n-        email = properties.get(\'email\')\n+    if not email and properties.get("email"):\n+        email = properties.get("email")\n \n     if not email:\n         raise MissingParameterError("You need to pass the new user\'s email.")\n \n-    use_email_as_username = portal.get_registry_record(\'plone.use_email_as_login\')\n+    use_email_as_username = portal.get_registry_record("plone.use_email_as_login")\n     if not use_email_as_username and not username:\n         raise InvalidParameterError(\n-            \'The portal is configured to use username \'\n-            \'that is not email so you need to pass a username.\',\n+            "The portal is configured to use username "\n+            "that is not email so you need to pass a username.",\n         )\n \n-    registration = portal.get_tool(\'portal_registration\')\n+    registration = portal.get_tool("portal_registration")\n     user_id = use_email_as_username and email or username\n \n     # Generate a random 8-char password\n     if not password:\n         chars = string.ascii_letters + string.digits\n-        password = \'\'.join(random.choice(chars) for char in range(8))\n+        password = "".join(random.choice(chars) for char in range(8))\n \n     properties.update(username=user_id)\n     properties.update(email=email)\n@@ -85,8 +85,8 @@ def create(\n     return get(username=user_id)\n \n \n-@mutually_exclusive_parameters(\'userid\', \'username\')\n-@at_least_one_of(\'userid\', \'username\')\n+@mutually_exclusive_parameters("userid", "username")\n+@at_least_one_of("userid", "username")\n def get(userid=None, username=None):\n     """Get a user.\n \n@@ -111,7 +111,7 @@ def get(userid=None, username=None):\n     :Example: :ref:`user-get-example`\n     """\n     if userid is not None:\n-        portal_membership = portal.get_tool(\'portal_membership\')\n+        portal_membership = portal.get_tool("portal_membership")\n         return portal_membership.getMemberById(userid)\n \n     return get_member_by_login_name(\n@@ -128,11 +128,11 @@ def get_current():\n     :rtype: MemberData object\n     :Example: :ref:`user-get-current-example`\n     """\n-    portal_membership = portal.get_tool(\'portal_membership\')\n+    portal_membership = portal.get_tool("portal_membership")\n     return portal_membership.getAuthenticatedMember()\n \n \n-@mutually_exclusive_parameters(\'groupname\', \'group\')\n+@mutually_exclusive_parameters("groupname", "group")\n def get_users(groupname=None, group=None):\n     """Get all users or all users filtered by group.\n \n@@ -151,12 +151,12 @@ def get_users(groupname=None, group=None):\n         :ref:`user-get-groups-users-example`\n     """\n     if groupname:\n-        group_tool = portal.get_tool(\'portal_groups\')\n+        group_tool = portal.get_tool("portal_groups")\n         group = group_tool.getGroupById(groupname)\n         if not group:\n             raise GroupNotFoundError\n \n-    portal_membership = portal.get_tool(\'portal_membership\')\n+    portal_membership = portal.get_tool("portal_membership")\n \n     if group:\n         return group.getGroupMembers()\n@@ -164,8 +164,8 @@ def get_users(groupname=None, group=None):\n         return portal_membership.listMembers()\n \n \n-@mutually_exclusive_parameters(\'username\', \'user\')\n-@at_least_one_of(\'username\', \'user\')\n+@mutually_exclusive_parameters("username", "user")\n+@at_least_one_of("username", "user")\n def delete(username=None, user=None):\n     """Delete a user.\n \n@@ -181,7 +181,7 @@ def delete(username=None, user=None):\n         InvalidParameterError\n     :Example: :ref:`user-delete-example`\n     """\n-    portal_membership = portal.get_tool(\'portal_membership\')\n+    portal_membership = portal.get_tool("portal_membership")\n     user_id = username or user.id\n     portal_membership.deleteMembers((user_id,))\n \n@@ -193,10 +193,10 @@ def is_anonymous():\n     :rtype: bool\n     :Example: :ref:`user-is-anonymous-example`\n     """\n-    return bool(portal.get_tool(\'portal_membership\').isAnonymousUser())\n+    return bool(portal.get_tool("portal_membership").isAnonymousUser())\n \n \n-@mutually_exclusive_parameters(\'username\', \'user\')\n+@mutually_exclusive_parameters("username", "user")\n def get_roles(username=None, user=None, obj=None, inherit=True):\n     """Get user\'s site-wide or local roles.\n \n@@ -218,7 +218,7 @@ def get_roles(username=None, user=None, obj=None, inherit=True):\n         MissingParameterError\n     :Example: :ref:`user-get-roles-example`\n     """\n-    portal_membership = portal.get_tool(\'portal_membership\')\n+    portal_membership = portal.get_tool("portal_membership")\n \n     if username is None:\n         if user is None:\n@@ -244,7 +244,7 @@ def get_roles(username=None, user=None, obj=None, inherit=True):\n             principal_ids = list(plone_user.getGroups())\n             principal_ids.insert(0, plone_user.getId())\n             roles = set()\n-            pas = portal.get_tool(\'acl_users\')\n+            pas = portal.get_tool("acl_users")\n             for _, lrmanager in pas.plugins.listPlugins(ILocalRolesPlugin):\n                 for adapter in lrmanager._getAdapters(obj):\n                     for principal_id in principal_ids:\n@@ -256,11 +256,11 @@ def get_roles(username=None, user=None, obj=None, inherit=True):\n \n @contextmanager\n def _nop_context_manager():\n-    """A trivial context manager that does nothing."""\n+    """Do nothing (trivial context manager)."""\n     yield\n \n \n-@mutually_exclusive_parameters(\'username\', \'user\')\n+@mutually_exclusive_parameters("username", "user")\n def get_permissions(username=None, user=None, obj=None):\n     """Get user\'s site-wide or local permissions.\n \n@@ -295,7 +295,7 @@ def get_permissions(username=None, user=None, obj=None):\n     return result\n \n \n-@mutually_exclusive_parameters(\'username\', \'user\')\n+@mutually_exclusive_parameters("username", "user")\n def has_permission(permission, username=None, user=None, obj=None):\n     """Check whether this user has the given permission.\n \n@@ -330,8 +330,8 @@ def has_permission(permission, username=None, user=None, obj=None):\n         return bool(getSecurityManager().checkPermission(permission, obj))\n \n \n-@required_parameters(\'roles\')\n-@mutually_exclusive_parameters(\'username\', \'user\')\n+@required_parameters("roles")\n+@mutually_exclusive_parameters("username", "user")\n def grant_roles(username=None, user=None, obj=None, roles=None):\n     """Grant roles to a user.\n \n@@ -357,13 +357,13 @@ def grant_roles(username=None, user=None, obj=None, roles=None):\n         user = get(username=username)\n     # check we got a user\n     if user is None:\n-        raise InvalidParameterError(\'User could not be found\')\n+        raise InvalidParameterError("User could not be found")\n \n     if isinstance(roles, tuple):\n         roles = list(roles)\n \n     # These roles cannot be granted\n-    if \'Anonymous\' in roles or \'Authenticated\' in roles:\n+    if "Anonymous" in roles or "Authenticated" in roles:\n         raise InvalidParameterError\n \n     if obj is None:\n@@ -379,8 +379,8 @@ def grant_roles(username=None, user=None, obj=None, roles=None):\n         obj.manage_setLocalRoles(user.getId(), roles)\n \n \n-@required_parameters(\'roles\')\n-@mutually_exclusive_parameters(\'username\', \'user\')\n+@required_parameters("roles")\n+@mutually_exclusive_parameters("username", "user")\n def revoke_roles(username=None, user=None, obj=None, roles=None):\n     """Revoke roles from a user.\n \n@@ -405,11 +405,11 @@ def revoke_roles(username=None, user=None, obj=None, roles=None):\n         user = get(username=username)\n     # check we got a user\n     if user is None:\n-        raise InvalidParameterError(\'User could not be found\')\n+        raise InvalidParameterError("User could not be found")\n \n     roles = set(roles)\n \n-    if \'Anonymous\' in roles or \'Authenticated\' in roles:\n+    if "Anonymous" in roles or "Authenticated" in roles:\n         raise InvalidParameterError\n \n     inherit = True\n@@ -420,7 +420,7 @@ def revoke_roles(username=None, user=None, obj=None, roles=None):\n     actual_roles = {\n         role\n         for role in get_roles(user=user, obj=obj, inherit=inherit)\n-        if role not in [\'Anonymous\', \'Authenticated\']\n+        if role not in ["Anonymous", "Authenticated"]\n     }\n \n     roles = list(actual_roles - roles)\ndiff --git a/src/plone/api/validation.py b/src/plone/api/validation.py\nindex c7b2e312..d4bc707f 100644\n--- a/src/plone/api/validation.py\n+++ b/src/plone/api/validation.py\n@@ -1,4 +1,4 @@\n-"""Decorators for validating parameters"""\n+"""Provide decorators for validating parameters."""\n \n from decorator import decorator\n from plone.api.exc import InvalidParameterError\n@@ -8,17 +8,18 @@\n \n \n def _get_arg_spec(func, validator_args):\n-    """Get the arguments specified in the function spec\n+    """Get the arguments specified in the function spec.\n+\n     and check that the decorator doesn\'t refer to non-existant args.\n     """\n     signature_args = inspect.getfullargspec(func).args\n     extra_args = set(validator_args) - set(signature_args)\n     if extra_args:\n         raise ValueError(\n-            \'Validator for {name} refers to parameters \'\n-            \'that are not part of the function signature: {signature}\'.format(\n+            "Validator for {name} refers to parameters "\n+            "that are not part of the function signature: {signature}".format(\n                 name=func.__name__,\n-                signature=\', \'.join(extra_args),\n+                signature=", ".join(extra_args),\n             ),\n         )\n \n@@ -26,7 +27,8 @@ def _get_arg_spec(func, validator_args):\n \n \n def _get_supplied_args(signature_params, args, kwargs):\n-    """Return names of all args that have been passed in\n+    """Return names of all args that have been passed in.\n+\n     either as positional or keyword arguments, and are not None.\n     """\n     supplied_args = []\n@@ -42,8 +44,7 @@ def _get_supplied_args(signature_params, args, kwargs):\n \n \n def required_parameters(*required_params):\n-    """A decorator that tests whether all of the specified parameters\n-    have been supplied and are not None\n+    """Test whether all of the specified parameters have been supplied and are not None.\n \n     Todo: add an optional flag to allow None values through as valid parameters\n \n@@ -52,23 +53,20 @@ def required_parameters(*required_params):\n     def foo(a=None, b=None, c=None):\n         pass\n     """\n+\n     def _required_parameters(func):\n-        """The actual decorator"""\n+        """Provide actual decorator."""\n         signature_params = _get_arg_spec(func, required_params)\n \n         def wrapped(function, *args, **kwargs):\n-            """The wrapped function (whose docstring will get replaced)"""\n+            """Provide wrapped function (whose docstring will get replaced)."""\n             supplied_args = _get_supplied_args(signature_params, args, kwargs)\n \n-            missing = [\n-                param\n-                for param in required_params\n-                if param not in supplied_args\n-            ]\n+            missing = [param for param in required_params if param not in supplied_args]\n             if len(missing):\n                 raise MissingParameterError(\n-                    \'Missing required parameter(s): {params}\'.format(\n-                        params=\', \'.join(missing),\n+                    "Missing required parameter(s): {params}".format(\n+                        params=", ".join(missing),\n                     ),\n                 )\n \n@@ -80,7 +78,9 @@ def wrapped(function, *args, **kwargs):\n \n \n def mutually_exclusive_parameters(*exclusive_params):\n-    """A decorator that raises an exception if more than one\n+    """Provide decorator.\n+\n+    The decorator raises an exception if more than one\n     of the specified parameters has been supplied and is not None\n \n     Usage:\n@@ -88,22 +88,21 @@ def mutually_exclusive_parameters(*exclusive_params):\n     def foo(a=None, b=None, c=None):\n         pass\n     """\n+\n     def _mutually_exclusive_parameters(func):\n-        """The actual decorator."""\n+        """Provide a decorator."""\n         signature_params = _get_arg_spec(func, exclusive_params)\n \n         def wrapped(function, *args, **kwargs):\n-            """The wrapped function (whose docstring will get replaced)."""\n+            """Provide a wrapped function (whose docstring will get replaced)."""\n             supplied_args = _get_supplied_args(signature_params, args, kwargs)\n             clashes = [\n-                argument\n-                for argument in supplied_args\n-                if argument in exclusive_params\n+                argument for argument in supplied_args if argument in exclusive_params\n             ]\n             if len(clashes) > 1:\n                 raise InvalidParameterError(\n-                    \'These parameters are mutually exclusive: {arg}.\'.format(\n-                        arg=\', \'.join(supplied_args),\n+                    "These parameters are mutually exclusive: {arg}.".format(\n+                        arg=", ".join(supplied_args),\n                     ),\n                 )\n \n@@ -115,7 +114,9 @@ def wrapped(function, *args, **kwargs):\n \n \n def at_least_one_of(*candidate_params):\n-    """A decorator that raises an exception if none of the\n+    """Provide a decorator.\n+\n+    The decorator raises an exception if none of the\n     specified parameters has been supplied.  Can be used in conjunction with\n     mutually_exclusive_parameters to enforce exactly one.\n \n@@ -124,12 +125,13 @@ def at_least_one_of(*candidate_params):\n     def foo(a=None, b=None, c=None):\n         pass\n     """\n+\n     def _at_least_one_of(func):\n-        """The actual decorator."""\n+        """Provide an actual decorator."""\n         signature_params = _get_arg_spec(func, candidate_params)\n \n         def wrapped(function, *args, **kwargs):\n-            """The wrapped function (whose docstring will get replaced)."""\n+            """Provide a wrapped function (whose docstring will get replaced)."""\n             supplied_args = _get_supplied_args(signature_params, args, kwargs)\n             candidates = [\n                 candidate\n@@ -138,9 +140,9 @@ def wrapped(function, *args, **kwargs):\n             ]\n             if len(candidates) < 1:\n                 raise MissingParameterError(\n-                    \'At least one of these parameters must be \'\n-                    \'supplied: {params}.\'.format(\n-                        params=\', \'.join(candidate_params),\n+                    "At least one of these parameters must be "\n+                    "supplied: {params}.".format(\n+                        params=", ".join(candidate_params),\n                     ),\n                 )\n \n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-15T13:54:18+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/7f09210de9d69274d1572b6dbff49f417e264f56

Update Makefile: add livehtml

Files changed:
M Makefile

b'diff --git a/Makefile b/Makefile\nindex 5eaf407..3d8b79b 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -29,6 +29,9 @@ bin/python bin/pip:\n # Documentation\n # ----------------------------------------------------------------------\n \n+# TODO Remove complete Makefile when Netlify build command is switched from \'make netlify\' to \'tox -e docs\'.\n+\n+# Just a developer helper. Can be replaced by \'tox -e docs\' (\'tox -e plone6docs\') \n .PHONY: docs-html\n docs-html: bin/python bin/pip ## Build documentation\n \tbin/pip install tox\n@@ -36,14 +39,20 @@ docs-html: bin/python bin/pip ## Build documentation\n \t@echo\n \t@echo "Build of documentation finished. The HTML pages are in _build/plone6docs/html."\n \n+.PHONY: livehtml\n+livehtml:\n+\tsphinx-autobuild  -b html -d _build/plone6docs/doctrees docs _build/plone6docs/html $(O)\n+\n+# TODO Remove when Netlify build command is switched from \'make netlify\' to \'tox -e docs\'.\n .PHONY: netlify\n-netlify: bin/python bin/pip ## Run documentatin build (Netlfy style)\n+netlify: bin/python bin/pip ## Build documentation (Netlfy style)\n \tbin/pip install tox\n \tbin/tox -e plone6docs\n \t@echo\n \t@echo "Build of documentation finished. The HTML pages are in _build/plone6docs/html."\n \n ## Run conversion of documentation from restructuredText to myST\n+# TODO Remove later when MyST documentation is settled.\n .PHONY: conversion-to-myst\n conversion-to-myst: bin/python bin/pip\n \tbin/pip install "rst-to-myst[sphinx]"\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-15T13:54:55+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/fe2e63346ab64a9bedb56a0f757fc0097d063a10

Create 474.feature

Files changed:
A news/474.feature

b'diff --git a/news/474.feature b/news/474.feature\nnew file mode 100644\nindex 00000000..aeb6c1f3\n--- /dev/null\n+++ b/news/474.feature\n@@ -0,0 +1,3 @@\n+Testing code examples in MyST markdown documentation.\n+Update documentation [ksuess]\n+Add some doctests to module plone.api.relation. [ksuess]\n\\ No newline at end of file\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-15T13:55:01+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/7fe88e1f321c319a165ccdf470df3c28de894637

Update README.rst

Files changed:
M README.rst

b"diff --git a/README.rst b/README.rst\nindex 79f52bb..2eff831 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -22,7 +22,7 @@ The intention is\n Documentation\n =============\n \n-`plone.api documentation <https://docs.plone.org/develop/plone.api/docs/index.html>`_ is part of the official Plone documentation.\n+`plone.api documentation <https://6.dev-docs.plone.org/plone.api/index.html>`_ is part of the official Plone documentation.\n \n ``plone.api`` comes with *cookbook*-like documentation and step-by-step instructions for doing common development tasks in Plone.\n Recipes try to assume the user does not have extensive knowledge about Plone internals.\n@@ -31,12 +31,7 @@ Recipes try to assume the user does not have extensive knowledge about Plone int\n Source Code and Contribution\n ============================\n \n-.. image:: https://api.travis-ci.org/plone/plone.api.svg\n-    :target: https://travis-ci.org/#!/plone/plone.api\n-\n-.. image:: https://coveralls.io/repos/github/plone/plone.api/badge.svg?branch=master\n-    :alt: Coverage\n-    :target: https://coveralls.io/github/plone/plone.api?branch=master\n+# TODO Github CI badge\n \n Contributors\n     Please read the document `Process for Plone core's development <https://docs.plone.org/develop/coredev/docs/index.html>`_.\n"

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-15T13:55:23+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/9d5735a83aca7939b3e41b558ab5fe960a8f4843

Update development instructions.

Files changed:
M docs/contribute/develop.md

b'diff --git a/docs/contribute/develop.md b/docs/contribute/develop.md\nindex 06cd474e..27ed886d 100644\n--- a/docs/contribute/develop.md\n+++ b/docs/contribute/develop.md\n@@ -1,5 +1,7 @@\n # Development environment\n \n+{sub-ref}`today`\n+\n This section is meant for contributors to the `plone.api` project.\n Its purpose is to guide them through the steps needed to start contributing.\n \n@@ -26,33 +28,25 @@ First let\'s look at \'system\' libraries and applications that are normally instal\n - `git` - Version control system.\n - `gcc` - The GNU Compiler Collection.\n - `g++` - The C++ extensions for gcc.\n-- `GNU make` - The fundamental build-control tool.\n - `GNU tar` - The (un)archiving tool for extracting downloaded archives.\n - `bzip2` and `gzip` decompression packages - `gzip` is nearly standard, however some platforms will require that `bzip2` be installed.\n-- `Python 2.7` - Linux distributions normally already have it, OS X users should use <https://github.com/collective/buildout.python> to get a clean Python version (the one that comes with OS X is broken).\n+- `Python 3` - It is recommended to use a virtual environment , i.e. pyenv or venv, to get a clean Python version. \n \n ### Python tools\n \n-- tox automation - tox aims to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing and release process of Python software. Install with `pip install tox`.\n+tox automation\n+: `tox` aims to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing and release process of Python software. Install with `pip install tox`.\n \n-```{note}\n-Again, OS X users should use <https://github.com/collective/buildout.python>,\n-it will make your life much easier to have a cleanly compiled Python instead of using the system one that is broken in many deeply confusing ways.\n-```\n \n ### Further information\n \n-If you experience problems read through the following links as almost all of the above steps are required for a default Plone development environment:\n+If you experience problems, read through the following links as almost all of the above steps are required for a default Plone development environment:\n \n - <https://docs.plone.org/manage/index.html>\n - <https://pypi.org/project/zc.buildout/>\n - <https://pypi.org/project/setuptools/>\n - <https://plone.org/download>\n \n-If you are an OS X user, you first need a working Python implementation\n-(the one that comes with the operating system is broken).\n-Use <https://github.com/collective/buildout.python> and be happy.\n-Also applicable to other OSes, if getting a working Python proves a challenge.\n \n (git-workflow)=\n \n@@ -74,46 +68,36 @@ Use `git rebase --interactive` to squash all commits that you think are unnecess\n \n ## Creating and using the development environment\n \n-```{eval-rst}\n-.. todo::\n-\n-    Update this section as it seams out of date, there is no Makefile so this description makes no sense anymore.\n-```\n-\n Go to your projects folder and download the lastest `plone.api` code:\n \n-```bash\n+```shell\n [you@local ~]$ cd <your_work_folder>\n [you@local work]$ git clone https://github.com/plone/plone.api.git\n ```\n \n Now `cd` into the newly created directory and build your environment:\n \n-```bash\n+```shell\n [you@local work]$ cd plone.api\n-[you@local plone.api]$ make\n+[you@local plone.api]$ pip install tox\n+[you@local plone.api]$ tox\n ```\n \n-Go make some tea while\n+Go make some tea while `tox` runs all tasks listed under `tox -l`\n \n-- `make` creates an isolated Python environment in your `` plone.api` `` folder,\n-- bootstraps `zc.buildout`,\n-- fetches all dependencies,\n-- builds Plone,\n-- runs all tests and\n-- generates documentation so you can open it locally later on.\n+- runs all checks and tests\n+- generates documentation so you can open it locally later on\n \n Other commands that you may want to run:\n \n-```bash\n-[you@local plone.api]$ make tests  # run all tests and syntax validation\n-[you@local plone.api]$ make docs   # re-generate documentation\n-[you@local plone.api]$ make clean  # reset your env back to a fresh start\n-[you@local plone.api]$ make        # re-build env, generate docs, run tests\n+```shell\n+[you@local plone.api]$ tox -e py39-plone-60  # run all tests for Python 3.9 and Plone 6\n+[you@local plone.api]$ tox -e plone6docs   # re-generate documentation\n ```\n \n-Open `Makefile` in your favorite code editor to see all possible commands and what they do.\n-And read <http://www.gnu.org/software/make/manual/make.html> to learn more about `make`.\n+Run `tox -l` to list all tox environments. Open `tox.ini` in your favorite code editor to see all possible commands and what they do.\n+And read <https://tox.wiki/en/latest/> to learn more about `tox`.\n+\n \n (working-on-an-issue)=\n \n@@ -129,7 +113,7 @@ So if you are not doing a very trivial fix, but rather adding new features/enhan\n This way your work is kept in an isolated place where you can receive feedback on it, improve it, etc.\n Once we are happy with your implementation, your branch gets merged into *master* at which point everyone else starts using your code.\n \n-```bash\n+```shell\n [you@local plone.api]$ git checkout master  # go to master branch\n [you@local plone.api]$ git checkout -b issue_17  # create a feature branch\n # replace 17 with the issue number you are working on\n@@ -163,13 +147,13 @@ where I added the get_navigation_root() method.\n Before every commit you should:\n \n - Run unit tests and syntax validation checks.\n-- Add an entry to `CHANGES.rst` (if applicable).\n+- Add an entry to `/news/` (if applicable).\n \n All syntax checks and all tests can be run with a single command.\n This command also re-generates your documentation.\n \n-```bash\n-$ make\n+```shell\n+tox\n ```\n \n ```{note}\n@@ -178,11 +162,12 @@ It pays off to invest a little time to make your editor run `pep8` and `pyflakes\n This saves you lots of time in the long run.\n ```\n \n-## Travis Continuous Integration\n \n-On every push to GitHub, [Travis](https://travis-ci.org/plone/plone.api) runs all tests and syntax validation checks and reports build outcome to the `#sprint` IRC channel and the person who committed the last change.\n+## GitHub Continuous Integration\n+\n+On every push GitHub runs all tests and syntax validation checks.\n+GitHub CI is configured in `.github/workflow` in the root of this package.\n \n-Travis is configured with the `.travis.yml` file located in the root of this package.\n \n ## Sphinx Documentation\n \n@@ -194,41 +179,108 @@ For every feature you add to the codebase, you should also add documentation for\n \n After adding or modifying documentation, run `tox -e plone6docs` to re-generate your documentation.\n \n-Publicly available documentation on [6.dev-docs.plone.org/plone.api](https://6.dev-docs.plone.org/plone.api) is automatically generated from these source files, periodically.\n+Publicly available documentation on [6.dev-docs.plone.org/plone.api](https://6.dev-docs.plone.org/plone.api) is automatically generated from these source files.\n So when you push changes to master on GitHub you should soon be able to see them published on [6.dev-docs.plone.org/plone.api](https://6.dev-docs.plone.org/plone.api).\n \n Read the [General Guide to Writing Documentation](https://6.dev-docs.plone.org/contributing/writing-docs-guide.html) to brush up on your `MyST` skills.\n \n-Example:\n-\n-```python\n-def add(a, b):\n-    """Calculate the sum of the two parameters.\n+### Adding a function to an existing module\n \n-    Also see the :func:`mod.path.my_func`, :meth:`mod.path.MyClass.method` and :attr:`mod.path.MY_CONSTANT` for more details.\n+Example: Add a new function `plone.api.content.foo`.\n \n-    :param a: The first operand.\n-    :type a: :class:`mod.path.A`\n+The function would go into module `plone.api.content`.\n+So you add your function in `/src/plone/api/content.py`\n \n-    :param b: The second operand.\n-    :type b: :class:`mod.path.B`\n+% invisible-code-block: python\n+%\n+% from plone.api.validation import at_least_one_of\n+% from plone.api.validation import mutually_exclusive_parameters\n \n-    :rtype: int\n-    :return: The sum of the operands.\n-    :raises: `KeyError`, if the operands are not the correct type.\n+```python\n+@mutually_exclusive_parameters(\'path\', \'UID\')\n+@at_least_one_of(\'path\', \'UID\')\n+def foo(path=None, UID=None):\n+    """Do foo.\n+\n+    :param path: Path to the object we want to get,\n+        relative to the portal root.\n+    :type path: string\n+\n+    :param UID: UID of the object we want to get.\n+    :type UID: string\n+\n+    :returns: String\n+    :raises:\n+        :class:`~plone.api.exc.MissingParameterError`,\n+        :class:`~plone.api.exc.InvalidParameterError`\n+    :Example: :ref:`content-foo-example`\n     """\n+    return "foo"\n ```\n \n-Attributes are documented using the `#:` marker above the attribute.\n-The documentation may span multiple lines.\n+% invisible-code-block: python\n+%\n+% bar = foo(\'/plone/blog\')\n+% self.assertEqual(bar,"foo")\n+%\n+% from plone.api.exc import InvalidParameterError\n+% self.assertRaises(\n+%     InvalidParameterError,\n+%     lambda: foo("/plone/blog", "abcd001")\n+% )\n+\n+Add documentation in `/docs/content.md`.\n+Describe what your function does and write some tests in code blocks. TestCase methods like `self.assertEqual()` are available in `doctests`.\n+See [unittest.TestCase assert methods](https://docs.python.org/3/library/unittest.html#unittest.TestCase.debug) for all available methods.\n+The file is linked in `/src/plone/api/tests/doctests/`, which includes the doctests in plone.api testing set up.\n+The package `manuel` allows to write doctests as common Python code in code blocks.\n+\n+````markdown\n+(content-foo-example)=\n+\n+## Get the foo of an object\n+\n+You can use the {meth}`api.content.foo` function to get the foo of an object.\n \n ```python\n-#: Description of the constant value\n-MY_CONSTANT = 0xc0ffee\n+from plone import api\n+blog_foo = api.content.foo(path="/plone/blog")\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(blog_foo,"foo")\n+````\n \n-class Foobar(object):\n+Code blocks are rendered in documentation.\n \n-    #: Description of the class variable which spans over\n-    #: multiple lines\n-    FOO = 1\n+````markdown\n+```python\n+from plone import api\n+blog_foo = api.content.foo(path="/plone/blog")\n ```\n+````\n+\n+Invisible code blocks are not rendered in documentation and can be used for tests.\n+\n+````markdown\n+% invisible-code-block: python\n+%\n+% self.assertEqual(blog_foo,"foo")\n+````\n+\n+Invisible code blocks are also handy for enriching the namespace without cluttering the narrative documentation.\n+\n+````markdown\n+% invisible-code-block: python\n+%\n+% portal = api.portal.get()\n+% image = api.content.create(type=\'Image\', id=\'image\', container=portal)\n+% blog = api.content.create(type=\'Link\', id=\'blog\', container=portal)\n+````\n+\n+\n+Function and example in documentation are referenced vice versa.\n+The function references the narrative documentation via label `content-foo-example`.\n+The narrative documentation references the API function documentation via `` {meth}`api.content.foo` ``.  \n+The documentation is rendered with a link from API reference to narrative documentation and a another link back.\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-15T13:56:12+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/f09d925ef712f24dce639111b3df2fa580e6a218

Create symlinks to MyST markdown syntax.

Files changed:
A src/plone/api/tests/doctests/content.md
A src/plone/api/tests/doctests/env.md
A src/plone/api/tests/doctests/group.md
A src/plone/api/tests/doctests/portal.md
A src/plone/api/tests/doctests/relation.md
A src/plone/api/tests/doctests/user.md
D src/plone/api/tests/doctests/about.rst
D src/plone/api/tests/doctests/content.rst
D src/plone/api/tests/doctests/env.rst
D src/plone/api/tests/doctests/group.rst
D src/plone/api/tests/doctests/portal.rst
D src/plone/api/tests/doctests/user.rst

b'diff --git a/src/plone/api/tests/doctests/about.rst b/src/plone/api/tests/doctests/about.rst\ndeleted file mode 120000\nindex 8b310142..00000000\n--- a/src/plone/api/tests/doctests/about.rst\n+++ /dev/null\n@@ -1 +0,0 @@\n-../../../../../docs/about.rst\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/content.md b/src/plone/api/tests/doctests/content.md\nnew file mode 120000\nindex 00000000..3834f680\n--- /dev/null\n+++ b/src/plone/api/tests/doctests/content.md\n@@ -0,0 +1 @@\n+../../../../../docs/content.md\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/content.rst b/src/plone/api/tests/doctests/content.rst\ndeleted file mode 120000\nindex 6a91e4b9..00000000\n--- a/src/plone/api/tests/doctests/content.rst\n+++ /dev/null\n@@ -1 +0,0 @@\n-../../../../../docs/content.rst\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/env.md b/src/plone/api/tests/doctests/env.md\nnew file mode 120000\nindex 00000000..1eb7795d\n--- /dev/null\n+++ b/src/plone/api/tests/doctests/env.md\n@@ -0,0 +1 @@\n+../../../../../docs/env.md\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/env.rst b/src/plone/api/tests/doctests/env.rst\ndeleted file mode 120000\nindex 20e2aafc..00000000\n--- a/src/plone/api/tests/doctests/env.rst\n+++ /dev/null\n@@ -1 +0,0 @@\n-../../../../../docs/env.rst\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/group.md b/src/plone/api/tests/doctests/group.md\nnew file mode 120000\nindex 00000000..72c98eca\n--- /dev/null\n+++ b/src/plone/api/tests/doctests/group.md\n@@ -0,0 +1 @@\n+../../../../../docs/group.md\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/group.rst b/src/plone/api/tests/doctests/group.rst\ndeleted file mode 120000\nindex 3f6065d4..00000000\n--- a/src/plone/api/tests/doctests/group.rst\n+++ /dev/null\n@@ -1 +0,0 @@\n-../../../../../docs/group.rst\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/portal.md b/src/plone/api/tests/doctests/portal.md\nnew file mode 120000\nindex 00000000..44a98307\n--- /dev/null\n+++ b/src/plone/api/tests/doctests/portal.md\n@@ -0,0 +1 @@\n+../../../../../docs/portal.md\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/portal.rst b/src/plone/api/tests/doctests/portal.rst\ndeleted file mode 120000\nindex 6a32aa04..00000000\n--- a/src/plone/api/tests/doctests/portal.rst\n+++ /dev/null\n@@ -1 +0,0 @@\n-../../../../../docs/portal.rst\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/relation.md b/src/plone/api/tests/doctests/relation.md\nnew file mode 120000\nindex 00000000..b8e3b628\n--- /dev/null\n+++ b/src/plone/api/tests/doctests/relation.md\n@@ -0,0 +1 @@\n+../../../../../docs/relation.md\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/user.md b/src/plone/api/tests/doctests/user.md\nnew file mode 120000\nindex 00000000..9dbad016\n--- /dev/null\n+++ b/src/plone/api/tests/doctests/user.md\n@@ -0,0 +1 @@\n+../../../../../docs/user.md\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/user.rst b/src/plone/api/tests/doctests/user.rst\ndeleted file mode 120000\nindex 00dadfa3..00000000\n--- a/src/plone/api/tests/doctests/user.rst\n+++ /dev/null\n@@ -1 +0,0 @@\n-../../../../../docs/user.rst\n\\ No newline at end of file\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-15T13:56:42+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/876107e3137cd0e5a8b884a2e33c18259ad9fc0b

Add doctests to relations module.

Files changed:
M docs/relation.md

b'diff --git a/docs/relation.md b/docs/relation.md\nindex 465e1c6..c05a606 100644\n--- a/docs/relation.md\n+++ b/docs/relation.md\n@@ -7,20 +7,39 @@\n \n # Relations\n \n+\n (relation-get-example)=\n \n ## Get relations\n \n+% invisible-code-block: python\n+%\n+% from plone import api\n+% portal = api.portal.get()\n+% bob = api.content.create(type=\'Document\', id=\'bob\', container=portal)\n+% bobby = api.content.create(type=\'Document\', id=\'bobby\', container=portal)\n+%\n+% source = bob\n+% target = bobby\n+% api.relation.create(source=source, target=target, relationship="friend")\n+\n ```python\n-api.relation.get(source=source, target=target, relationship="friend", unrestricted=False, as_dict=False)\n+from plone import api\n+\n+friendship = api.relation.get(\n+    source=source, target=target, relationship="friend", unrestricted=False, as_dict=False\n+    )\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertTrue(friendship)\n+\n You must provide either source, target, or relationship, or a combination of those, to {meth}`api.relation.get`.\n `unrestricted` and `as_dict` are optional.\n \n-By default the result is a list of `RelationValue` objects.\n-\n-If you set `as_dict=True` it will return a dictionary with the names of the relations as keys and lists of objects as values.\n+By default the result is a list of {class}`z3c.relationfield.RelationValue` objects.\n+If you set `as_dict=True` {meth}`api.relation.get` will return a dictionary with the names of the relations as keys and lists of objects as values.\n \n By default the View permission is checked on the relation objects.\n You only get objects that you are allowed to see.\n@@ -29,9 +48,13 @@ Use the `unrestricted` parameter if you want to bypass this check.\n To get back relations, so relations pointing to an item, use:\n \n ```python\n-api.relation.get(target=target)\n+friendships = api.relation.get(target=target)\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual([friendship.from_object for friendship in friendships], [source])\n+\n To get the objects connected by relations you can use the api of these return values:\n \n ```python\n@@ -41,6 +64,7 @@ for relation in api.relation.get(source=source):\n     relationship = relation.from_attribute\n ```\n \n+\n (relation-create-example)=\n \n ## Create relation\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-15T13:57:11+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/61a94c75e8999a08d2a345b8450df9d3b6cb4da0

Add tests to content module.

Files changed:
M docs/content.md

b'diff --git a/docs/content.md b/docs/content.md\nindex d5f04dc..dabef04 100644\n--- a/docs/content.md\n+++ b/docs/content.md\n@@ -1,5 +1,6 @@\n ```{eval-rst}\n .. module:: plone\n+    :noindex:\n ```\n \n (chapter-content)=\n@@ -32,7 +33,7 @@ obj = api.content.create(\n The `id` of the new object is automatically and safely generated from its `title`.\n \n ```python\n-assert obj.id == \'my-content\'\n+self.assertEqual(obj.id, \'my-content\')\n ```\n \n (content-get-example)=\n@@ -103,7 +104,7 @@ not_found = api.content.get(UID=\'notfound\')\n % self.assertTrue(conference)\n % self.assertTrue(sprint)\n % self.assertTrue(team)\n-% self.assertEquals(not_found, None)\n+% self.assertEqual(not_found, None)\n \n (content-find-example)=\n \n@@ -244,6 +245,15 @@ Actually, `move` behaves like a filesystem move.\n If you pass it an `id` argument, the object will have that new ID in its new home.\n By default it will retain its original ID.\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(contact.id, "contact")\n+% self.assertTrue(portal[\'contact\'])\n+% contact = portal[\'contact\']\n+% api.content.move(source=contact, target=portal[\'about\'], id="new-contact")\n+% self.assertEqual(contact.id, "new-contact")\n+% self.assertTrue(portal[\'about\'][\'new-contact\'])\n+\n (content-rename-example)=\n \n ## Rename content\n@@ -427,7 +437,6 @@ portal = api.portal.get()\n api.content.transition(obj=portal[\'about\'], transition=\'reject\', comment=\'You had a typo on your page.\')\n ```\n \n-% invisible-code-block: python\n \n (content-disable-roles-acquisition-example)=\n \n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-15T13:57:31+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/2e431b91314dea34b6666ee489bcc5cdfd13eeaf

Fix MyST markdown syntax.

Files changed:
M docs/contribute/release.md

b"diff --git a/docs/contribute/release.md b/docs/contribute/release.md\nindex 208c77c..6f31ddd 100644\n--- a/docs/contribute/release.md\n+++ b/docs/contribute/release.md\n@@ -13,7 +13,7 @@ Releasing a new version of `plone.api` involves the following steps:\n To avoid human errors and to automate some of the tasks above we use `jarn.mkrelease`.\n It's listed as a dependency in `setup.py` and should already be installed in your local bin:\n \n-```bash\n+```shell\n $ bin/mkrelease --help\n ```\n \n@@ -46,7 +46,7 @@ In the following example we are releasing version 0.1 of `plone.api`.\n The package has been prepared so that `setup.py` contains the version `0.1`,\n this change has been committed to git and all changes have been pushed upstream to GitHub:\n \n-```bash\n+```shell\n # Check that package description is rendered correctly\n $ bin/longtest\n \n"

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-15T14:50:05+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/2507b744694a711655cb806039c291ba876d3231

FIx black, lint

Files changed:
M setup.py
M tox.ini

b'diff --git a/setup.py b/setup.py\nindex ff6e7a1..482db77 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -9,60 +9,60 @@ def read(*rnames):\n \n \n long_description = (\n-    read(\'README.rst\') + \'\\n\\n\' + read(\'CHANGES.rst\') + \'\\n\\n\' + read(\'LICENSE\')\n+    read("README.rst") + "\\n\\n" + read("CHANGES.rst") + "\\n\\n" + read("LICENSE")\n )\n \n-version = \'2.0.0a3.dev0\'\n+version = "2.0.0a3.dev0"\n \n setup(\n-    name=\'plone.api\',\n+    name="plone.api",\n     version=version,\n-    description=\'A Plone API.\',\n+    description="A Plone API.",\n     long_description=long_description,\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    license=\'GPL version 2\',\n-    packages=find_packages(\'src\'),\n-    package_dir={\'\': \'src\'},\n-    namespace_packages=[\'plone\'],\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    license="GPL version 2",\n+    packages=find_packages("src"),\n+    package_dir={"": "src"},\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n-    url=\'https://github.com/plone/plone.api\',\n-    keywords=\'plone api\',\n+    url="https://github.com/plone/plone.api",\n+    keywords="plone api",\n     install_requires=[\n-        \'Products.statusmessages\',\n-        \'decorator\',\n-        \'plone.app.uuid\',\n-        \'plone.app.linkintegrity\',\n-        \'plone.uuid\',\n-        \'setuptools\',\n-        \'zope.globalrequest\',\n+        "Products.statusmessages",\n+        "decorator",\n+        "plone.app.uuid",\n+        "plone.app.linkintegrity",\n+        "plone.uuid",\n+        "setuptools",\n+        "zope.globalrequest",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'Products.CMFPlone\',\n-            \'plone.app.dexterity\',\n-            \'plone.app.intid\',\n-            \'plone.app.testing\',\n-            \'plone.indexer\',\n-            \'plone.registry\',\n-            \'z3c.relationfield\',\n-            \'zope.testrunner\',\n+        "test": [\n+            "Products.CMFPlone",\n+            "plone.app.dexterity",\n+            "plone.app.intid",\n+            "plone.app.testing",\n+            "plone.indexer",\n+            "plone.registry",\n+            "z3c.relationfield",\n+            "zope.testrunner",\n         ],\n     },\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n-        \'Environment :: Web Environment\',\n-        \'Framework :: Plone\',\n-        \'Framework :: Plone :: 6.0\',\n-        \'Framework :: Plone :: Core\',\n-        \'Intended Audience :: Developers\',\n-        \'License :: OSI Approved :: GNU General Public License v2 (GPLv2)\',\n-        \'Operating System :: OS Independent\',\n-        \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 3.7\',\n-        \'Programming Language :: Python :: 3.8\',\n-        \'Programming Language :: Python :: 3.9\',\n+        "Development Status :: 5 - Production/Stable",\n+        "Environment :: Web Environment",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 6.0",\n+        "Framework :: Plone :: Core",\n+        "Intended Audience :: Developers",\n+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n+        "Operating System :: OS Independent",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n     ],\n-    platforms=\'Any\',\n+    platforms="Any",\n )\ndiff --git a/tox.ini b/tox.ini\nindex 8289892..fee9166 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -75,7 +75,7 @@ deps =\n \n commands =\n     python -VV\n-    black --check --diff -v --skip-string-normalization src setup.py\n+    black --check --diff -v src setup.py\n \n [testenv:black-enforce]\n basepython = python3.9\n@@ -85,7 +85,7 @@ deps =\n \n commands =\n     python -VV\n-    black -v --skip-string-normalization src setup.py\n+    black -v src setup.py\n \n [testenv:isort]\n basepython = python3.9\n@@ -120,15 +120,15 @@ deps =\n     flake8-html\n     flake8-blind-except\n     flake8-coding\n-    flake8-commas\n+    # flake8-commas\n     flake8-debugger\n     flake8-deprecated\n-    flake8-docstrings\n+    # flake8-docstrings\n     flake8-isort\n     flake8-pep3101\n     flake8-plone-hasattr\n     flake8-print\n-    flake8-quotes\n+    # flake8-quotes\n     flake8-string-format\n     flake8-todo\n \n@@ -136,7 +136,7 @@ commands =\n     python -VV\n     mkdir -p {toxinidir}/_build/flake8\n     - flake8 --format=html --htmldir={toxinidir}/_build/flake8 --ignore=C101 src setup.py\n-    flake8 --ignore=C101,P101,D104 src setup.py\n+    flake8 --ignore=C101,P101,Q000 src setup.py\n \n whitelist_externals =\n     mkdir\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-15T16:39:04+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/898ce74884d7a6a380805d421851f3eb1d94770c

Fix version of manuel to &gt;= 1.11.1

Files changed:
M base.cfg
M setup.py

b'diff --git a/base.cfg b/base.cfg\nindex 6ff1563..5c11e5c 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -52,3 +52,5 @@ cffi = 1.14.6\n \n # Pillow 6 fails on apple m1\n Pillow = >= 8.3.2\n+\n+manuel = >= 1.11.1\ndiff --git a/setup.py b/setup.py\nindex 482db77..434db1c 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -41,6 +41,7 @@ def read(*rnames):\n     extras_require={\n         "test": [\n             "Products.CMFPlone",\n+            "manuel",\n             "plone.app.dexterity",\n             "plone.app.intid",\n             "plone.app.testing",\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-16T07:00:48+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/ea3f340d5179b55e08eade5a6042f2aa90632d3d

Pin manuel version &gt;=1.11.2

Files changed:
M base.cfg
M setup.py

b'diff --git a/base.cfg b/base.cfg\nindex 5c11e5c..6ff1563 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -52,5 +52,3 @@ cffi = 1.14.6\n \n # Pillow 6 fails on apple m1\n Pillow = >= 8.3.2\n-\n-manuel = >= 1.11.1\ndiff --git a/setup.py b/setup.py\nindex 434db1c..afcf515 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -41,7 +41,7 @@ def read(*rnames):\n     extras_require={\n         "test": [\n             "Products.CMFPlone",\n-            "manuel",\n+            "manuel>=1.11.2",\n             "plone.app.dexterity",\n             "plone.app.intid",\n             "plone.app.testing",\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-16T07:21:26+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/3ec87d62ffefaf90c13bba57effb2674112e9b21

Pin manuel version &gt;=1.11.2

Files changed:
M base.cfg

b'diff --git a/base.cfg b/base.cfg\nindex 6ff1563..81d97c9 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -52,3 +52,6 @@ cffi = 1.14.6\n \n # Pillow 6 fails on apple m1\n Pillow = >= 8.3.2\n+\n+# MyST markdown modules\n+manuel = >= 1.11.2\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-16T07:46:15+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/de1675d6fa88c8ea0b4ff0eb95e1f88b49e0c335

Add Github workflow status badge

Files changed:
M README.rst

b'diff --git a/README.rst b/README.rst\nindex 2eff831..adbc970 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -31,7 +31,8 @@ Recipes try to assume the user does not have extensive knowledge about Plone int\n Source Code and Contribution\n ============================\n \n-# TODO Github CI badge\n+[![Testing Status](https://github.com/plone/plone.api/actions/workflows/plone_python.yml/badge.svg "Testing Status")](https://github.com/plone/plone.api/actions/workflows/plone_python.yml)\n+\n \n Contributors\n     Please read the document `Process for Plone core\'s development <https://docs.plone.org/develop/coredev/docs/index.html>`_.\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-16T08:12:04+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/158e1caef970e7ee99a6899a442cce782489e7d0

Add Github workflow status badge

Files changed:
M README.rst

b'diff --git a/README.rst b/README.rst\nindex adbc970..569890a 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -31,7 +31,7 @@ Recipes try to assume the user does not have extensive knowledge about Plone int\n Source Code and Contribution\n ============================\n \n-[![Testing Status](https://github.com/plone/plone.api/actions/workflows/plone_python.yml/badge.svg "Testing Status")](https://github.com/plone/plone.api/actions/workflows/plone_python.yml)\n+![Testing Status](https://github.com/plone/plone.api/blob/re-add-doctests-manuel-myst/.github/workflows/plone_python.yml/badge.svg)\n \n \n Contributors\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-16T08:29:05+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/d32b1a6eb0e8b88cfc0dae238aff3495709ad206

Convert README to MyST markdown

Files changed:
A README.md
D README.rst

b'diff --git a/README.md b/README.md\nnew file mode 100644\nindex 0000000..4ce3d11\n--- /dev/null\n+++ b/README.md\n@@ -0,0 +1,46 @@\n+# plone.api\n+\n+[![Latest PyPI version](https://img.shields.io/pypi/v/plone.api.svg "Latest PyPI version")](https://pypi.python.org/pypi/plone.api/)\n+\n+\n+[![Number of PyPI downloads](https://img.shields.io/pypi/dm/plone.api.svg "Number of PyPI downloads")](https://pypi.python.org/pypi/plone.api/)\n+\n+A simple API, built for humans wishing to develop with Plone.\n+\n+The intention is\n+\n+* to cover as much as possible the tasks carried out by a Plone developer\n+* to provide clear API methods for Plone functionality which may be confusing or difficult to access,\n+* keeping everything in one place,\n+* staying introspectable and discoverable, important aspects of being Pythonic.\n+\n+\n+## Documentation\n+\n+[plone.api documentation](https://6.dev-docs.plone.org/plone.api/index.html) is part of the official Plone documentation.\n+\n+`plone.api` comes with *cookbook*-like documentation and step-by-step instructions for doing common development tasks in Plone.\n+Recipes try to assume the user does not have extensive knowledge about Plone internals.\n+\n+\n+## Source Code and Contribution\n+\n+[![Testing Status](https://github.com/plone/plone.api/blob/master/.github/workflows/plone_python.yml/badge.svg "Testing Status")](https://github.com/plone/plone.api/blob/master/.github/workflows/plone_python.yml)\n+\n+\n+Contributors\n+    Please read the document [Process for Plone core\'s development](https://docs.plone.org/develop/coredev/docs/index.html).\n+    Also consult the section about contribution in the [plone.api contributors documentation](https://docs.plone.org/develop/plone.api/docs/contribute/index.html).\n+\n+Source Code\n+    at the [Plone code repository hosted at GitHub](https://github.com/plone/plone.api).\n+\n+Issues\n+    Please use the [issue tracker](https://github.com/plone/plone.api/issues)\n+\n+Continuous Integration\n+    runs on [Travis CI](https://travis-ci.org/plone/plone.api).\n+\n+Code Coverage\n+    is measured at [Coveralls.io](https://coveralls.io/github/plone/plone.api).\n+\ndiff --git a/README.rst b/README.rst\ndeleted file mode 100644\nindex 569890a..0000000\n--- a/README.rst\n+++ /dev/null\n@@ -1,52 +0,0 @@\n-plone.api\n-=========\n-\n-.. image:: https://img.shields.io/pypi/v/plone.api.svg\n-    :target: https://pypi.python.org/pypi/plone.api/\n-    :alt: Latest PyPI version\n-\n-.. image:: https://img.shields.io/pypi/dm/plone.api.svg\n-    :target: https://pypi.python.org/pypi/plone.api/\n-    :alt: Number of PyPI downloads\n-\n-A simple API, built for humans wishing to develop with Plone.\n-\n-The intention is\n-\n-* to cover as much as possible the tasks carried out by a Plone developer\n-* to provide clear API methods for Plone functionality which may be confusing or difficult to access,\n-* keeping everything in one place,\n-* staying introspectable and discoverable, important aspects of being Pythonic.\n-\n-\n-Documentation\n-=============\n-\n-`plone.api documentation <https://6.dev-docs.plone.org/plone.api/index.html>`_ is part of the official Plone documentation.\n-\n-``plone.api`` comes with *cookbook*-like documentation and step-by-step instructions for doing common development tasks in Plone.\n-Recipes try to assume the user does not have extensive knowledge about Plone internals.\n-\n-\n-Source Code and Contribution\n-============================\n-\n-![Testing Status](https://github.com/plone/plone.api/blob/re-add-doctests-manuel-myst/.github/workflows/plone_python.yml/badge.svg)\n-\n-\n-Contributors\n-    Please read the document `Process for Plone core\'s development <https://docs.plone.org/develop/coredev/docs/index.html>`_.\n-    Also consult the section about contribution in the `plone.api contributors documentation <https://docs.plone.org/develop/plone.api/docs/contribute/index.html>`_.\n-\n-Source Code\n-    at the `Plone code repository hosted at GitHub <https://github.com/plone/plone.api>`_.\n-\n-Issues\n-    Please use the `issue tracker <https://github.com/plone/plone.api/issues>`_\n-\n-Continuous Integration\n-    runs on `Travis CI <https://travis-ci.org/plone/plone.api>`_.\n-\n-Code Coverage\n-    is measured at `Coveralls.io <https://coveralls.io/github/plone/plone.api>`_.\n-\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-16T08:35:19+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/69915e498d1ff9bd641c1545654ba39c49c4f7e9

README.md

Files changed:
M docs/contribute/release.md
M setup.py

b'diff --git a/docs/contribute/release.md b/docs/contribute/release.md\nindex 6f31ddd..4b7a5be 100644\n--- a/docs/contribute/release.md\n+++ b/docs/contribute/release.md\n@@ -31,12 +31,12 @@ password = secret\n \n ## Checklist\n \n-Folow these step to create a new release of `plone.api`.\n+Follow these step to create a new release of `plone.api`.\n \n 1. Verify that we have documented all changes in the `CHANGES.rst` file.\n    Go through the list of commits since last release on GitHub and check all changes are documented.\n 2. Modify the version identifier in the `setup.py` to reflect the version of the new release.\n-3. Confirm that the package description (generated from `README.rst` and others) renders correctly by running `bin/longtest` and open its ouput in your favorite browser.\n+3. Confirm that the package description (generated from `README.md` and others) renders correctly by running `bin/longtest` and open its ouput in your favorite browser.\n 4. Commit all changes to the git repository and push them upstream to GitHub.\n 5. Create a release, tag it in git and upload it to GitHub by running `bin/mkrelease -d pypi -pq .` (see example below).\n \ndiff --git a/setup.py b/setup.py\nindex afcf515..ac95233 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -9,7 +9,7 @@ def read(*rnames):\n \n \n long_description = (\n-    read("README.rst") + "\\n\\n" + read("CHANGES.rst") + "\\n\\n" + read("LICENSE")\n+    read("README.md") + "\\n\\n" + read("CHANGES.rst") + "\\n\\n" + read("LICENSE")\n )\n \n version = "2.0.0a3.dev0"\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-16T12:21:14+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.api/commit/be5e1cc5155b00f650b768e787ed32a3d1d3deab

Merge pull request #478 from plone/re-add-doctests-manuel-myst

Re-add doctests after switch from restructuredText to MyST markdown

Files changed:
A .github/workflows/black.yml
A .github/workflows/docs.yml
A .github/workflows/isort.yml
A .github/workflows/plone_python.yml
A README.md
A constraints.txt
A constraints_plone52.txt
A constraints_plone60.txt
A news/474.feature
A requirements.txt
A src/plone/api/tests/doctests/content.md
A src/plone/api/tests/doctests/env.md
A src/plone/api/tests/doctests/group.md
A src/plone/api/tests/doctests/portal.md
A src/plone/api/tests/doctests/relation.md
A src/plone/api/tests/doctests/user.md
A test_plone-52.cfg
A test_plone-60.cfg
M MANIFEST.in
M Makefile
M base.cfg
M buildout.cfg
M docs/conf.py
M docs/content.md
M docs/contribute/develop.md
M docs/contribute/release.md
M docs/relation.md
M setup.cfg
M setup.py
M src/plone/__init__.py
M src/plone/api/content.py
M src/plone/api/env.py
M src/plone/api/group.py
M src/plone/api/portal.py
M src/plone/api/relation.py
M src/plone/api/tests/base.py
M src/plone/api/tests/test_content.py
M src/plone/api/tests/test_doctests.py
M src/plone/api/tests/test_env.py
M src/plone/api/tests/test_group.py
M src/plone/api/tests/test_portal.py
M src/plone/api/tests/test_relation.py
M src/plone/api/tests/test_user.py
M src/plone/api/tests/test_validation.py
M src/plone/api/user.py
M src/plone/api/validation.py
M tox.ini
D README.rst
D src/plone/api/tests/doctests/about.rst
D src/plone/api/tests/doctests/content.rst
D src/plone/api/tests/doctests/env.rst
D src/plone/api/tests/doctests/group.rst
D src/plone/api/tests/doctests/portal.rst
D src/plone/api/tests/doctests/user.rst

b'diff --git a/.github/workflows/black.yml b/.github/workflows/black.yml\nnew file mode 100644\nindex 00000000..420028cc\n--- /dev/null\n+++ b/.github/workflows/black.yml\n@@ -0,0 +1,32 @@\n+name: Black\n+on: [push]\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        python-version: [3.9]\n+\n+    steps:\n+      # git checkout\n+      - uses: actions/checkout@v2\n+\n+      # python setup\n+      - name: Set up Python ${{ matrix.python-version }}\n+        uses: actions/setup-python@v1\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+      - name: Install dependencies\n+        run: |\n+          python -m pip install --upgrade pip\n+          pip install tox tox-gh-actions\n+\n+      # python cache\n+      - uses: actions/cache@v1\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n+\n+      - name: Test with tox\n+        run: tox -e black-check\ndiff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml\nnew file mode 100644\nindex 00000000..93fc39fc\n--- /dev/null\n+++ b/.github/workflows/docs.yml\n@@ -0,0 +1,34 @@\n+name: Build docs\n+on: [push]\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        python-version: [3.9]\n+\n+    steps:\n+      # git checkout\n+      - uses: actions/checkout@v2\n+\n+      # python setup\n+      - name: Set up Python ${{ matrix.python-version }}\n+        uses: actions/setup-python@v1\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+      - name: Install dependencies\n+        run: |\n+          python -m pip install --upgrade pip\n+          pip install tox tox-gh-actions\n+\n+      # python cache\n+      - uses: actions/cache@v1\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n+\n+      - name: Test with tox\n+        run: |\n+          tox -e linkcheck\n+          tox -e plone6docs\ndiff --git a/.github/workflows/isort.yml b/.github/workflows/isort.yml\nnew file mode 100644\nindex 00000000..c6f499fc\n--- /dev/null\n+++ b/.github/workflows/isort.yml\n@@ -0,0 +1,32 @@\n+name: Isort\n+on: [push]\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: true\n+      matrix:\n+        python-version: [3.9]\n+\n+    steps:\n+      # git checkout\n+      - uses: actions/checkout@v2\n+\n+      # python setup\n+      - name: Set up Python ${{ matrix.python-version }}\n+        uses: actions/setup-python@v1\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+      - name: Install dependencies\n+        run: |\n+          python -m pip install --upgrade pip\n+          pip install tox tox-gh-actions\n+\n+      # python cache\n+      - uses: actions/cache@v1\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n+\n+      - name: Test with tox\n+        run: tox -e isort\ndiff --git a/.github/workflows/plone_python.yml b/.github/workflows/plone_python.yml\nnew file mode 100644\nindex 00000000..375c2a8b\n--- /dev/null\n+++ b/.github/workflows/plone_python.yml\n@@ -0,0 +1,31 @@\n+name: Plone backend tests\n+\n+on:\n+  push:\n+  pull_request:\n+\n+jobs:\n+  plone_python:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        python-version: ["3.7", "3.8", "3.9"]\n+        plone-version: ["5.2", "6.0"]\n+\n+    steps:\n+      - uses: actions/checkout@v3\n+      - name: Install system libraries\n+        run: sudo apt-get install libxml2-dev libxslt1-dev libjpeg-dev\n+      - name: Set up Python ${{ matrix.python-version }}\n+        uses: actions/setup-python@v2\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+      - name: Install dependencies\n+        run: |\n+          python -m pip install --upgrade pip\n+          pip install tox tox-gh-actions\n+      - name: Test with tox\n+        run: tox\n+        env:\n+          PLONE: ${{ matrix.plone-version }}\ndiff --git a/MANIFEST.in b/MANIFEST.in\nindex 5378791b..b9ca1361 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -4,8 +4,8 @@ include tox.ini\n # Ignore most of the docs directory.\n prune docs\n \n-# The doctests point to docs/*.rst, so we need them, including CHANGES.rst.\n-include docs/*.rst\n+# The doctests point to docs/*.md, so we need them, including CHANGES.rst.\n+include docs/*.md\n \n graft src\n \n@@ -13,3 +13,7 @@ global-exclude *.pyc\n include pyproject.toml\n recursive-exclude news *\n exclude news\n+\n+# added by check-manifest\n+recursive-include src *.py\n+recursive-include src *.rst\ndiff --git a/Makefile b/Makefile\nindex 5eaf407b..3d8b79bd 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -29,6 +29,9 @@ bin/python bin/pip:\n # Documentation\n # ----------------------------------------------------------------------\n \n+# TODO Remove complete Makefile when Netlify build command is switched from \'make netlify\' to \'tox -e docs\'.\n+\n+# Just a developer helper. Can be replaced by \'tox -e docs\' (\'tox -e plone6docs\') \n .PHONY: docs-html\n docs-html: bin/python bin/pip ## Build documentation\n \tbin/pip install tox\n@@ -36,14 +39,20 @@ docs-html: bin/python bin/pip ## Build documentation\n \t@echo\n \t@echo "Build of documentation finished. The HTML pages are in _build/plone6docs/html."\n \n+.PHONY: livehtml\n+livehtml:\n+\tsphinx-autobuild  -b html -d _build/plone6docs/doctrees docs _build/plone6docs/html $(O)\n+\n+# TODO Remove when Netlify build command is switched from \'make netlify\' to \'tox -e docs\'.\n .PHONY: netlify\n-netlify: bin/python bin/pip ## Run documentatin build (Netlfy style)\n+netlify: bin/python bin/pip ## Build documentation (Netlfy style)\n \tbin/pip install tox\n \tbin/tox -e plone6docs\n \t@echo\n \t@echo "Build of documentation finished. The HTML pages are in _build/plone6docs/html."\n \n ## Run conversion of documentation from restructuredText to myST\n+# TODO Remove later when MyST documentation is settled.\n .PHONY: conversion-to-myst\n conversion-to-myst: bin/python bin/pip\n \tbin/pip install "rst-to-myst[sphinx]"\ndiff --git a/README.md b/README.md\nnew file mode 100644\nindex 00000000..4ce3d11e\n--- /dev/null\n+++ b/README.md\n@@ -0,0 +1,46 @@\n+# plone.api\n+\n+[![Latest PyPI version](https://img.shields.io/pypi/v/plone.api.svg "Latest PyPI version")](https://pypi.python.org/pypi/plone.api/)\n+\n+\n+[![Number of PyPI downloads](https://img.shields.io/pypi/dm/plone.api.svg "Number of PyPI downloads")](https://pypi.python.org/pypi/plone.api/)\n+\n+A simple API, built for humans wishing to develop with Plone.\n+\n+The intention is\n+\n+* to cover as much as possible the tasks carried out by a Plone developer\n+* to provide clear API methods for Plone functionality which may be confusing or difficult to access,\n+* keeping everything in one place,\n+* staying introspectable and discoverable, important aspects of being Pythonic.\n+\n+\n+## Documentation\n+\n+[plone.api documentation](https://6.dev-docs.plone.org/plone.api/index.html) is part of the official Plone documentation.\n+\n+`plone.api` comes with *cookbook*-like documentation and step-by-step instructions for doing common development tasks in Plone.\n+Recipes try to assume the user does not have extensive knowledge about Plone internals.\n+\n+\n+## Source Code and Contribution\n+\n+[![Testing Status](https://github.com/plone/plone.api/blob/master/.github/workflows/plone_python.yml/badge.svg "Testing Status")](https://github.com/plone/plone.api/blob/master/.github/workflows/plone_python.yml)\n+\n+\n+Contributors\n+    Please read the document [Process for Plone core\'s development](https://docs.plone.org/develop/coredev/docs/index.html).\n+    Also consult the section about contribution in the [plone.api contributors documentation](https://docs.plone.org/develop/plone.api/docs/contribute/index.html).\n+\n+Source Code\n+    at the [Plone code repository hosted at GitHub](https://github.com/plone/plone.api).\n+\n+Issues\n+    Please use the [issue tracker](https://github.com/plone/plone.api/issues)\n+\n+Continuous Integration\n+    runs on [Travis CI](https://travis-ci.org/plone/plone.api).\n+\n+Code Coverage\n+    is measured at [Coveralls.io](https://coveralls.io/github/plone/plone.api).\n+\ndiff --git a/README.rst b/README.rst\ndeleted file mode 100644\nindex 79f52bb4..00000000\n--- a/README.rst\n+++ /dev/null\n@@ -1,56 +0,0 @@\n-plone.api\n-=========\n-\n-.. image:: https://img.shields.io/pypi/v/plone.api.svg\n-    :target: https://pypi.python.org/pypi/plone.api/\n-    :alt: Latest PyPI version\n-\n-.. image:: https://img.shields.io/pypi/dm/plone.api.svg\n-    :target: https://pypi.python.org/pypi/plone.api/\n-    :alt: Number of PyPI downloads\n-\n-A simple API, built for humans wishing to develop with Plone.\n-\n-The intention is\n-\n-* to cover as much as possible the tasks carried out by a Plone developer\n-* to provide clear API methods for Plone functionality which may be confusing or difficult to access,\n-* keeping everything in one place,\n-* staying introspectable and discoverable, important aspects of being Pythonic.\n-\n-\n-Documentation\n-=============\n-\n-`plone.api documentation <https://docs.plone.org/develop/plone.api/docs/index.html>`_ is part of the official Plone documentation.\n-\n-``plone.api`` comes with *cookbook*-like documentation and step-by-step instructions for doing common development tasks in Plone.\n-Recipes try to assume the user does not have extensive knowledge about Plone internals.\n-\n-\n-Source Code and Contribution\n-============================\n-\n-.. image:: https://api.travis-ci.org/plone/plone.api.svg\n-    :target: https://travis-ci.org/#!/plone/plone.api\n-\n-.. image:: https://coveralls.io/repos/github/plone/plone.api/badge.svg?branch=master\n-    :alt: Coverage\n-    :target: https://coveralls.io/github/plone/plone.api?branch=master\n-\n-Contributors\n-    Please read the document `Process for Plone core\'s development <https://docs.plone.org/develop/coredev/docs/index.html>`_.\n-    Also consult the section about contribution in the `plone.api contributors documentation <https://docs.plone.org/develop/plone.api/docs/contribute/index.html>`_.\n-\n-Source Code\n-    at the `Plone code repository hosted at GitHub <https://github.com/plone/plone.api>`_.\n-\n-Issues\n-    Please use the `issue tracker <https://github.com/plone/plone.api/issues>`_\n-\n-Continuous Integration\n-    runs on `Travis CI <https://travis-ci.org/plone/plone.api>`_.\n-\n-Code Coverage\n-    is measured at `Coveralls.io <https://coveralls.io/github/plone/plone.api>`_.\n-\ndiff --git a/base.cfg b/base.cfg\nindex d94225b0..81d97c99 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -1,20 +1,57 @@\n [buildout]\n+show-picked-versions = true\n package-name = plone.api\n-package-extras = [test]\n-test-eggs =\n-    plone.api\n \n parts +=\n+    instance\n+    test\n     omelette\n \n # network speedup\n socket-timeout = 5\n \n+\n+[instance]\n+recipe = plone.recipe.zope2instance\n+deprecation-warnings = off\n+user = admin:admin\n+http-address = 8080\n+environment-vars =\n+    zope_i18n_compile_mo_files true\n+eggs =\n+    Plone\n+    Pillow\n+    plone.api [test]\n+\n+\n+[omelette]\n+recipe = collective.recipe.omelette\n+eggs = ${test:eggs}\n+\n+\n+[test]\n+recipe = zc.recipe.testrunner\n+eggs = ${instance:eggs}\n+initialization =\n+    os.environ[\'TZ\'] = \'UTC\'\n+    # In Python 3.8+, for the TZ environment variable to be used, it\'s\n+    # necessary to explicitly call time.tzset().\n+    import time\n+    time.tzset()\n+defaults = [\'-s\', \'plone.api\', \'--auto-color\', \'--auto-progress\']\n+\n+\n [versions]\n plone.api =\n #setuptools = 33.1.1\n #zc.buildout = 2.8.0\n \n-[omelette]\n-recipe = collective.recipe.omelette\n-eggs = ${test:eggs}\n+# cffi 1.14.3 fails on apple m1\n+# cffi 1.14.4 fails with "ModuleNotFoundError: No module named \'_cffi_backend\'"\n+cffi = 1.14.6\n+\n+# Pillow 6 fails on apple m1\n+Pillow = >= 8.3.2\n+\n+# MyST markdown modules\n+manuel = >= 1.11.2\ndiff --git a/buildout.cfg b/buildout.cfg\nindex f45087fb..e710d7a2 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -1,2 +1,2 @@\n [buildout]\n-extends = plone-5.2.x.cfg\n+extends = test_plone-60.cfg\ndiff --git a/constraints.txt b/constraints.txt\nnew file mode 100644\nindex 00000000..c1fb3a1b\n--- /dev/null\n+++ b/constraints.txt\n@@ -0,0 +1 @@\n+-c constraints_plone60.txt\ndiff --git a/constraints_plone52.txt b/constraints_plone52.txt\nnew file mode 100644\nindex 00000000..3887b180\n--- /dev/null\n+++ b/constraints_plone52.txt\n@@ -0,0 +1 @@\n+-c https://dist.plone.org/release/5.2-latest/requirements.txt\n\\ No newline at end of file\ndiff --git a/constraints_plone60.txt b/constraints_plone60.txt\nnew file mode 100644\nindex 00000000..2c1d6188\n--- /dev/null\n+++ b/constraints_plone60.txt\n@@ -0,0 +1 @@\n+-c https://dist.plone.org/release/6.0-latest/requirements.txt\n\\ No newline at end of file\ndiff --git a/docs/conf.py b/docs/conf.py\nindex e0382f1b..16b402c6 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -25,7 +25,7 @@\n ]\n master_doc = \'index\'\n \n-locale_dirs = ["translated/"]\n+locale_dirs = [\'translated/\']\n language = \'en\'\n \n # Grouping the document tree into LaTeX files. List of tuples\n@@ -35,8 +35,9 @@\n     \'index\',\n     \'ploneapi.tex\',\n     \'plone.api Documentation\',\n-    \'\', \'manual\'\n-), ]\n+    \'\',\n+    \'manual\',\n+)]\n \n \n class Mock:\ndiff --git a/docs/content.md b/docs/content.md\nindex d5f04dce..dabef048 100644\n--- a/docs/content.md\n+++ b/docs/content.md\n@@ -1,5 +1,6 @@\n ```{eval-rst}\n .. module:: plone\n+    :noindex:\n ```\n \n (chapter-content)=\n@@ -32,7 +33,7 @@ obj = api.content.create(\n The `id` of the new object is automatically and safely generated from its `title`.\n \n ```python\n-assert obj.id == \'my-content\'\n+self.assertEqual(obj.id, \'my-content\')\n ```\n \n (content-get-example)=\n@@ -103,7 +104,7 @@ not_found = api.content.get(UID=\'notfound\')\n % self.assertTrue(conference)\n % self.assertTrue(sprint)\n % self.assertTrue(team)\n-% self.assertEquals(not_found, None)\n+% self.assertEqual(not_found, None)\n \n (content-find-example)=\n \n@@ -244,6 +245,15 @@ Actually, `move` behaves like a filesystem move.\n If you pass it an `id` argument, the object will have that new ID in its new home.\n By default it will retain its original ID.\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(contact.id, "contact")\n+% self.assertTrue(portal[\'contact\'])\n+% contact = portal[\'contact\']\n+% api.content.move(source=contact, target=portal[\'about\'], id="new-contact")\n+% self.assertEqual(contact.id, "new-contact")\n+% self.assertTrue(portal[\'about\'][\'new-contact\'])\n+\n (content-rename-example)=\n \n ## Rename content\n@@ -427,7 +437,6 @@ portal = api.portal.get()\n api.content.transition(obj=portal[\'about\'], transition=\'reject\', comment=\'You had a typo on your page.\')\n ```\n \n-% invisible-code-block: python\n \n (content-disable-roles-acquisition-example)=\n \ndiff --git a/docs/contribute/develop.md b/docs/contribute/develop.md\nindex 06cd474e..27ed886d 100644\n--- a/docs/contribute/develop.md\n+++ b/docs/contribute/develop.md\n@@ -1,5 +1,7 @@\n # Development environment\n \n+{sub-ref}`today`\n+\n This section is meant for contributors to the `plone.api` project.\n Its purpose is to guide them through the steps needed to start contributing.\n \n@@ -26,33 +28,25 @@ First let\'s look at \'system\' libraries and applications that are normally instal\n - `git` - Version control system.\n - `gcc` - The GNU Compiler Collection.\n - `g++` - The C++ extensions for gcc.\n-- `GNU make` - The fundamental build-control tool.\n - `GNU tar` - The (un)archiving tool for extracting downloaded archives.\n - `bzip2` and `gzip` decompression packages - `gzip` is nearly standard, however some platforms will require that `bzip2` be installed.\n-- `Python 2.7` - Linux distributions normally already have it, OS X users should use <https://github.com/collective/buildout.python> to get a clean Python version (the one that comes with OS X is broken).\n+- `Python 3` - It is recommended to use a virtual environment , i.e. pyenv or venv, to get a clean Python version. \n \n ### Python tools\n \n-- tox automation - tox aims to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing and release process of Python software. Install with `pip install tox`.\n+tox automation\n+: `tox` aims to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing and release process of Python software. Install with `pip install tox`.\n \n-```{note}\n-Again, OS X users should use <https://github.com/collective/buildout.python>,\n-it will make your life much easier to have a cleanly compiled Python instead of using the system one that is broken in many deeply confusing ways.\n-```\n \n ### Further information\n \n-If you experience problems read through the following links as almost all of the above steps are required for a default Plone development environment:\n+If you experience problems, read through the following links as almost all of the above steps are required for a default Plone development environment:\n \n - <https://docs.plone.org/manage/index.html>\n - <https://pypi.org/project/zc.buildout/>\n - <https://pypi.org/project/setuptools/>\n - <https://plone.org/download>\n \n-If you are an OS X user, you first need a working Python implementation\n-(the one that comes with the operating system is broken).\n-Use <https://github.com/collective/buildout.python> and be happy.\n-Also applicable to other OSes, if getting a working Python proves a challenge.\n \n (git-workflow)=\n \n@@ -74,46 +68,36 @@ Use `git rebase --interactive` to squash all commits that you think are unnecess\n \n ## Creating and using the development environment\n \n-```{eval-rst}\n-.. todo::\n-\n-    Update this section as it seams out of date, there is no Makefile so this description makes no sense anymore.\n-```\n-\n Go to your projects folder and download the lastest `plone.api` code:\n \n-```bash\n+```shell\n [you@local ~]$ cd <your_work_folder>\n [you@local work]$ git clone https://github.com/plone/plone.api.git\n ```\n \n Now `cd` into the newly created directory and build your environment:\n \n-```bash\n+```shell\n [you@local work]$ cd plone.api\n-[you@local plone.api]$ make\n+[you@local plone.api]$ pip install tox\n+[you@local plone.api]$ tox\n ```\n \n-Go make some tea while\n+Go make some tea while `tox` runs all tasks listed under `tox -l`\n \n-- `make` creates an isolated Python environment in your `` plone.api` `` folder,\n-- bootstraps `zc.buildout`,\n-- fetches all dependencies,\n-- builds Plone,\n-- runs all tests and\n-- generates documentation so you can open it locally later on.\n+- runs all checks and tests\n+- generates documentation so you can open it locally later on\n \n Other commands that you may want to run:\n \n-```bash\n-[you@local plone.api]$ make tests  # run all tests and syntax validation\n-[you@local plone.api]$ make docs   # re-generate documentation\n-[you@local plone.api]$ make clean  # reset your env back to a fresh start\n-[you@local plone.api]$ make        # re-build env, generate docs, run tests\n+```shell\n+[you@local plone.api]$ tox -e py39-plone-60  # run all tests for Python 3.9 and Plone 6\n+[you@local plone.api]$ tox -e plone6docs   # re-generate documentation\n ```\n \n-Open `Makefile` in your favorite code editor to see all possible commands and what they do.\n-And read <http://www.gnu.org/software/make/manual/make.html> to learn more about `make`.\n+Run `tox -l` to list all tox environments. Open `tox.ini` in your favorite code editor to see all possible commands and what they do.\n+And read <https://tox.wiki/en/latest/> to learn more about `tox`.\n+\n \n (working-on-an-issue)=\n \n@@ -129,7 +113,7 @@ So if you are not doing a very trivial fix, but rather adding new features/enhan\n This way your work is kept in an isolated place where you can receive feedback on it, improve it, etc.\n Once we are happy with your implementation, your branch gets merged into *master* at which point everyone else starts using your code.\n \n-```bash\n+```shell\n [you@local plone.api]$ git checkout master  # go to master branch\n [you@local plone.api]$ git checkout -b issue_17  # create a feature branch\n # replace 17 with the issue number you are working on\n@@ -163,13 +147,13 @@ where I added the get_navigation_root() method.\n Before every commit you should:\n \n - Run unit tests and syntax validation checks.\n-- Add an entry to `CHANGES.rst` (if applicable).\n+- Add an entry to `/news/` (if applicable).\n \n All syntax checks and all tests can be run with a single command.\n This command also re-generates your documentation.\n \n-```bash\n-$ make\n+```shell\n+tox\n ```\n \n ```{note}\n@@ -178,11 +162,12 @@ It pays off to invest a little time to make your editor run `pep8` and `pyflakes\n This saves you lots of time in the long run.\n ```\n \n-## Travis Continuous Integration\n \n-On every push to GitHub, [Travis](https://travis-ci.org/plone/plone.api) runs all tests and syntax validation checks and reports build outcome to the `#sprint` IRC channel and the person who committed the last change.\n+## GitHub Continuous Integration\n+\n+On every push GitHub runs all tests and syntax validation checks.\n+GitHub CI is configured in `.github/workflow` in the root of this package.\n \n-Travis is configured with the `.travis.yml` file located in the root of this package.\n \n ## Sphinx Documentation\n \n@@ -194,41 +179,108 @@ For every feature you add to the codebase, you should also add documentation for\n \n After adding or modifying documentation, run `tox -e plone6docs` to re-generate your documentation.\n \n-Publicly available documentation on [6.dev-docs.plone.org/plone.api](https://6.dev-docs.plone.org/plone.api) is automatically generated from these source files, periodically.\n+Publicly available documentation on [6.dev-docs.plone.org/plone.api](https://6.dev-docs.plone.org/plone.api) is automatically generated from these source files.\n So when you push changes to master on GitHub you should soon be able to see them published on [6.dev-docs.plone.org/plone.api](https://6.dev-docs.plone.org/plone.api).\n \n Read the [General Guide to Writing Documentation](https://6.dev-docs.plone.org/contributing/writing-docs-guide.html) to brush up on your `MyST` skills.\n \n-Example:\n-\n-```python\n-def add(a, b):\n-    """Calculate the sum of the two parameters.\n+### Adding a function to an existing module\n \n-    Also see the :func:`mod.path.my_func`, :meth:`mod.path.MyClass.method` and :attr:`mod.path.MY_CONSTANT` for more details.\n+Example: Add a new function `plone.api.content.foo`.\n \n-    :param a: The first operand.\n-    :type a: :class:`mod.path.A`\n+The function would go into module `plone.api.content`.\n+So you add your function in `/src/plone/api/content.py`\n \n-    :param b: The second operand.\n-    :type b: :class:`mod.path.B`\n+% invisible-code-block: python\n+%\n+% from plone.api.validation import at_least_one_of\n+% from plone.api.validation import mutually_exclusive_parameters\n \n-    :rtype: int\n-    :return: The sum of the operands.\n-    :raises: `KeyError`, if the operands are not the correct type.\n+```python\n+@mutually_exclusive_parameters(\'path\', \'UID\')\n+@at_least_one_of(\'path\', \'UID\')\n+def foo(path=None, UID=None):\n+    """Do foo.\n+\n+    :param path: Path to the object we want to get,\n+        relative to the portal root.\n+    :type path: string\n+\n+    :param UID: UID of the object we want to get.\n+    :type UID: string\n+\n+    :returns: String\n+    :raises:\n+        :class:`~plone.api.exc.MissingParameterError`,\n+        :class:`~plone.api.exc.InvalidParameterError`\n+    :Example: :ref:`content-foo-example`\n     """\n+    return "foo"\n ```\n \n-Attributes are documented using the `#:` marker above the attribute.\n-The documentation may span multiple lines.\n+% invisible-code-block: python\n+%\n+% bar = foo(\'/plone/blog\')\n+% self.assertEqual(bar,"foo")\n+%\n+% from plone.api.exc import InvalidParameterError\n+% self.assertRaises(\n+%     InvalidParameterError,\n+%     lambda: foo("/plone/blog", "abcd001")\n+% )\n+\n+Add documentation in `/docs/content.md`.\n+Describe what your function does and write some tests in code blocks. TestCase methods like `self.assertEqual()` are available in `doctests`.\n+See [unittest.TestCase assert methods](https://docs.python.org/3/library/unittest.html#unittest.TestCase.debug) for all available methods.\n+The file is linked in `/src/plone/api/tests/doctests/`, which includes the doctests in plone.api testing set up.\n+The package `manuel` allows to write doctests as common Python code in code blocks.\n+\n+````markdown\n+(content-foo-example)=\n+\n+## Get the foo of an object\n+\n+You can use the {meth}`api.content.foo` function to get the foo of an object.\n \n ```python\n-#: Description of the constant value\n-MY_CONSTANT = 0xc0ffee\n+from plone import api\n+blog_foo = api.content.foo(path="/plone/blog")\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(blog_foo,"foo")\n+````\n \n-class Foobar(object):\n+Code blocks are rendered in documentation.\n \n-    #: Description of the class variable which spans over\n-    #: multiple lines\n-    FOO = 1\n+````markdown\n+```python\n+from plone import api\n+blog_foo = api.content.foo(path="/plone/blog")\n ```\n+````\n+\n+Invisible code blocks are not rendered in documentation and can be used for tests.\n+\n+````markdown\n+% invisible-code-block: python\n+%\n+% self.assertEqual(blog_foo,"foo")\n+````\n+\n+Invisible code blocks are also handy for enriching the namespace without cluttering the narrative documentation.\n+\n+````markdown\n+% invisible-code-block: python\n+%\n+% portal = api.portal.get()\n+% image = api.content.create(type=\'Image\', id=\'image\', container=portal)\n+% blog = api.content.create(type=\'Link\', id=\'blog\', container=portal)\n+````\n+\n+\n+Function and example in documentation are referenced vice versa.\n+The function references the narrative documentation via label `content-foo-example`.\n+The narrative documentation references the API function documentation via `` {meth}`api.content.foo` ``.  \n+The documentation is rendered with a link from API reference to narrative documentation and a another link back.\ndiff --git a/docs/contribute/release.md b/docs/contribute/release.md\nindex 208c77c9..4b7a5be9 100644\n--- a/docs/contribute/release.md\n+++ b/docs/contribute/release.md\n@@ -13,7 +13,7 @@ Releasing a new version of `plone.api` involves the following steps:\n To avoid human errors and to automate some of the tasks above we use `jarn.mkrelease`.\n It\'s listed as a dependency in `setup.py` and should already be installed in your local bin:\n \n-```bash\n+```shell\n $ bin/mkrelease --help\n ```\n \n@@ -31,12 +31,12 @@ password = secret\n \n ## Checklist\n \n-Folow these step to create a new release of `plone.api`.\n+Follow these step to create a new release of `plone.api`.\n \n 1. Verify that we have documented all changes in the `CHANGES.rst` file.\n    Go through the list of commits since last release on GitHub and check all changes are documented.\n 2. Modify the version identifier in the `setup.py` to reflect the version of the new release.\n-3. Confirm that the package description (generated from `README.rst` and others) renders correctly by running `bin/longtest` and open its ouput in your favorite browser.\n+3. Confirm that the package description (generated from `README.md` and others) renders correctly by running `bin/longtest` and open its ouput in your favorite browser.\n 4. Commit all changes to the git repository and push them upstream to GitHub.\n 5. Create a release, tag it in git and upload it to GitHub by running `bin/mkrelease -d pypi -pq .` (see example below).\n \n@@ -46,7 +46,7 @@ In the following example we are releasing version 0.1 of `plone.api`.\n The package has been prepared so that `setup.py` contains the version `0.1`,\n this change has been committed to git and all changes have been pushed upstream to GitHub:\n \n-```bash\n+```shell\n # Check that package description is rendered correctly\n $ bin/longtest\n \ndiff --git a/docs/relation.md b/docs/relation.md\nindex 465e1c64..c05a606f 100644\n--- a/docs/relation.md\n+++ b/docs/relation.md\n@@ -7,20 +7,39 @@\n \n # Relations\n \n+\n (relation-get-example)=\n \n ## Get relations\n \n+% invisible-code-block: python\n+%\n+% from plone import api\n+% portal = api.portal.get()\n+% bob = api.content.create(type=\'Document\', id=\'bob\', container=portal)\n+% bobby = api.content.create(type=\'Document\', id=\'bobby\', container=portal)\n+%\n+% source = bob\n+% target = bobby\n+% api.relation.create(source=source, target=target, relationship="friend")\n+\n ```python\n-api.relation.get(source=source, target=target, relationship="friend", unrestricted=False, as_dict=False)\n+from plone import api\n+\n+friendship = api.relation.get(\n+    source=source, target=target, relationship="friend", unrestricted=False, as_dict=False\n+    )\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertTrue(friendship)\n+\n You must provide either source, target, or relationship, or a combination of those, to {meth}`api.relation.get`.\n `unrestricted` and `as_dict` are optional.\n \n-By default the result is a list of `RelationValue` objects.\n-\n-If you set `as_dict=True` it will return a dictionary with the names of the relations as keys and lists of objects as values.\n+By default the result is a list of {class}`z3c.relationfield.RelationValue` objects.\n+If you set `as_dict=True` {meth}`api.relation.get` will return a dictionary with the names of the relations as keys and lists of objects as values.\n \n By default the View permission is checked on the relation objects.\n You only get objects that you are allowed to see.\n@@ -29,9 +48,13 @@ Use the `unrestricted` parameter if you want to bypass this check.\n To get back relations, so relations pointing to an item, use:\n \n ```python\n-api.relation.get(target=target)\n+friendships = api.relation.get(target=target)\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual([friendship.from_object for friendship in friendships], [source])\n+\n To get the objects connected by relations you can use the api of these return values:\n \n ```python\n@@ -41,6 +64,7 @@ for relation in api.relation.get(source=source):\n     relationship = relation.from_attribute\n ```\n \n+\n (relation-create-example)=\n \n ## Create relation\ndiff --git a/news/474.feature b/news/474.feature\nnew file mode 100644\nindex 00000000..aeb6c1f3\n--- /dev/null\n+++ b/news/474.feature\n@@ -0,0 +1,3 @@\n+Testing code examples in MyST markdown documentation.\n+Update documentation [ksuess]\n+Add some doctests to module plone.api.relation. [ksuess]\n\\ No newline at end of file\ndiff --git a/requirements.txt b/requirements.txt\nnew file mode 100644\nindex 00000000..a4377ccf\n--- /dev/null\n+++ b/requirements.txt\n@@ -0,0 +1,5 @@\n+-c constraints.txt\n+setuptools\n+zc.buildout\n+Pillow>=8.3.2\n+tox\n\\ No newline at end of file\ndiff --git a/setup.cfg b/setup.cfg\nindex 00706645..1204ce28 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -2,7 +2,6 @@\n ignore =\n     *.cfg\n     .editorconfig\n-    .travis.yml\n     Makefile\n     fix-converted-myst.py\n     netlify.toml\ndiff --git a/setup.py b/setup.py\nindex 03389875..ac95233e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -8,63 +8,62 @@ def read(*rnames):\n     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n \n \n-long_description = \\\n-    read(\'README.rst\') + \'\\n\\n\' + \\\n-    read(\'CHANGES.rst\') + \'\\n\\n\' + \\\n-    read(\'LICENSE\')\n+long_description = (\n+    read("README.md") + "\\n\\n" + read("CHANGES.rst") + "\\n\\n" + read("LICENSE")\n+)\n \n-version = \'2.0.0a3.dev0\'\n+version = "2.0.0a3.dev0"\n \n setup(\n-    name=\'plone.api\',\n+    name="plone.api",\n     version=version,\n-    description=\'A Plone API.\',\n+    description="A Plone API.",\n     long_description=long_description,\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    license=\'GPL version 2\',\n-    packages=find_packages(\'src\'),\n-    package_dir={\'\': \'src\'},\n-    namespace_packages=[\'plone\'],\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    license="GPL version 2",\n+    packages=find_packages("src"),\n+    package_dir={"": "src"},\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n-    url=\'https://github.com/plone/plone.api\',\n-    keywords=\'plone api\',\n+    url="https://github.com/plone/plone.api",\n+    keywords="plone api",\n     install_requires=[\n-        \'Products.statusmessages\',\n-        \'decorator\',\n-        \'plone.app.uuid\',\n-        \'plone.app.linkintegrity\',\n-        \'plone.uuid\',\n-        \'setuptools\',\n-        \'zope.globalrequest\',\n+        "Products.statusmessages",\n+        "decorator",\n+        "plone.app.uuid",\n+        "plone.app.linkintegrity",\n+        "plone.uuid",\n+        "setuptools",\n+        "zope.globalrequest",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'Products.CMFPlone\',\n-            \'manuel\',\n-            \'plone.app.dexterity\',\n-            \'plone.app.intid\',\n-            \'plone.app.testing\',\n-            \'plone.indexer\',\n-            \'plone.registry\',\n-            \'z3c.relationfield\',\n+        "test": [\n+            "Products.CMFPlone",\n+            "manuel>=1.11.2",\n+            "plone.app.dexterity",\n+            "plone.app.intid",\n+            "plone.app.testing",\n+            "plone.indexer",\n+            "plone.registry",\n+            "z3c.relationfield",\n+            "zope.testrunner",\n         ],\n     },\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n-        \'Environment :: Web Environment\',\n-        \'Framework :: Plone\',\n-        \'Framework :: Plone :: 6.0\',\n-        \'Framework :: Plone :: Core\',\n-        \'Intended Audience :: Developers\',\n-        \'License :: OSI Approved :: GNU General Public License v2 (GPLv2)\',\n-        \'Operating System :: OS Independent\',\n-        \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 3.6\',\n-        \'Programming Language :: Python :: 3.7\',\n-        \'Programming Language :: Python :: 3.8\',\n-        \'Programming Language :: Python :: 3.9\',\n+        "Development Status :: 5 - Production/Stable",\n+        "Environment :: Web Environment",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 6.0",\n+        "Framework :: Plone :: Core",\n+        "Intended Audience :: Developers",\n+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n+        "Operating System :: OS Independent",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n     ],\n-    platforms=\'Any\',\n+    platforms="Any",\n )\ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex de40ea7c..5284146e 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/api/content.py b/src/plone/api/content.py\nindex c2a5538f..acb0144c 100644\n--- a/src/plone/api/content.py\n+++ b/src/plone/api/content.py\n@@ -1,15 +1,12 @@\n """Module that provides functionality for content manipulation."""\n \n from copy import copy as _copy\n-from pkg_resources import DistributionNotFound\n-from pkg_resources import get_distribution\n-from pkg_resources import parse_version\n from plone.api import portal\n from plone.api.exc import InvalidParameterError\n from plone.api.validation import at_least_one_of\n from plone.api.validation import mutually_exclusive_parameters\n from plone.api.validation import required_parameters\n-from plone.app.linkintegrity.exceptions import LinkIntegrityNotificationException  # noqa\n+from plone.app.linkintegrity.exceptions import LinkIntegrityNotificationException\n from plone.app.uuid.utils import uuidToObject\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.WorkflowCore import WorkflowException\n@@ -22,11 +19,12 @@\n import random\n import transaction\n \n+\n _marker = []\n \n \n-@required_parameters(\'container\', \'type\')\n-@at_least_one_of(\'id\', \'title\')\n+@required_parameters("container", "type")\n+@at_least_one_of("id", "title")\n def create(\n     container=None,\n     type=None,\n@@ -54,6 +52,7 @@ def create(\n         conflicting with another object in the target container, raise an\n         InvalidParameterError. When True, choose a new, non-conflicting id.\n     :type safe_id: boolean\n+\n     :returns: Content object\n     :raises:\n         KeyError,\n@@ -65,7 +64,7 @@ def create(\n     content_id = not safe_id and id or str(random.randint(0, 99999999))\n \n     if title:\n-        kwargs[\'title\'] = title\n+        kwargs["title"] = title\n \n     try:\n         container.invokeFactory(type, content_id, **kwargs)\n@@ -78,11 +77,11 @@ def create(\n \n         raise InvalidParameterError(\n             "Cannot add a \'{obj_type}\' object to the container.\\n"\n-            \'Allowed types are:\\n\'\n-            \'{allowed_types}\\n\'\n-            \'{message}\'.format(\n+            "Allowed types are:\\n"\n+            "{allowed_types}\\n"\n+            "{message}".format(\n                 obj_type=type,\n-                allowed_types=\'\\n\'.join(sorted(types)),\n+                allowed_types="\\n".join(sorted(types)),\n                 message=str(e),\n             ),\n         )\n@@ -105,8 +104,8 @@ def create(\n     return content\n \n \n-@mutually_exclusive_parameters(\'path\', \'UID\')\n-@at_least_one_of(\'path\', \'UID\')\n+@mutually_exclusive_parameters("path", "UID")\n+@at_least_one_of("path", "UID")\n def get(path=None, UID=None):\n     """Get an object.\n \n@@ -122,9 +121,9 @@ def get(path=None, UID=None):\n     """\n     if path:\n         site = portal.get()\n-        site_absolute_path = \'/\'.join(site.getPhysicalPath())\n-        if not path.startswith(\'{path}\'.format(path=site_absolute_path)):\n-            path = \'{site_path}{relative_path}\'.format(\n+        site_absolute_path = "/".join(site.getPhysicalPath())\n+        if not path.startswith("{path}".format(path=site_absolute_path)):\n+            path = "{site_path}{relative_path}".format(\n                 site_path=site_absolute_path,\n                 relative_path=path,\n             )\n@@ -138,8 +137,8 @@ def get(path=None, UID=None):\n         return uuidToObject(UID)\n \n \n-@required_parameters(\'source\')\n-@at_least_one_of(\'target\', \'id\')\n+@required_parameters("source")\n+@at_least_one_of("target", "id")\n def move(source=None, target=None, id=None, safe_id=False):\n     """Move the object to the target container.\n \n@@ -181,7 +180,7 @@ def move(source=None, target=None, id=None, safe_id=False):\n         return target[source_id]\n \n \n-@required_parameters(\'obj\', \'new_id\')\n+@required_parameters("obj", "new_id")\n def rename(obj=None, new_id=None, safe_id=False):\n     """Rename the object.\n \n@@ -208,8 +207,8 @@ def rename(obj=None, new_id=None, safe_id=False):\n     return container[new_id]\n \n \n-@required_parameters(\'source\')\n-@at_least_one_of(\'target\', \'id\')\n+@required_parameters("source")\n+@at_least_one_of("target", "id")\n def copy(source=None, target=None, id=None, safe_id=False):\n     """Copy the object to the target container.\n \n@@ -243,7 +242,7 @@ def copy(source=None, target=None, id=None, safe_id=False):\n         source.aq_parent.manage_copyObjects(source_id),\n     )\n \n-    new_id = copy_info[0][\'new_id\']\n+    new_id = copy_info[0]["new_id"]\n     if id:\n         if not safe_id and id in target:\n             msg = "Duplicate ID \'{0}\' in \'{1}\' for \'{2}\'"\n@@ -254,8 +253,8 @@ def copy(source=None, target=None, id=None, safe_id=False):\n         return target[new_id]\n \n \n-@mutually_exclusive_parameters(\'obj\', \'objects\')\n-@at_least_one_of(\'obj\', \'objects\')\n+@mutually_exclusive_parameters("obj", "objects")\n+@at_least_one_of("obj", "objects")\n def delete(obj=None, objects=None, check_linkintegrity=True):\n     """Delete the object(s).\n \n@@ -282,7 +281,7 @@ def delete(obj=None, objects=None, check_linkintegrity=True):\n     if check_linkintegrity:\n         site = portal.get()\n         linkintegrity_view = get_view(\n-            name=\'delete_confirmation_info\',\n+            name="delete_confirmation_info",\n             context=site,\n             request=site.REQUEST,\n         )\n@@ -290,14 +289,14 @@ def delete(obj=None, objects=None, check_linkintegrity=True):\n         breaches = linkintegrity_view.get_breaches(objects)\n         if breaches:\n             raise LinkIntegrityNotificationException(\n-                \'Linkintegrity-breaches: {}\'.format(breaches),\n+                "Linkintegrity-breaches: {}".format(breaches),\n             )\n \n     for obj_ in objects:\n         obj_.aq_parent.manage_delObjects([obj_.getId()])\n \n \n-@required_parameters(\'obj\')\n+@required_parameters("obj")\n def get_state(obj=None, default=_marker):\n     """Get the current workflow state of the object.\n \n@@ -310,14 +309,14 @@ def get_state(obj=None, default=_marker):\n         Products.CMFCore.WorkflowCore.WorkflowException\n     :Example: :ref:`content-get-state-example`\n     """\n-    workflow = portal.get_tool(\'portal_workflow\')\n+    workflow = portal.get_tool("portal_workflow")\n \n     if default is not _marker and not workflow.getWorkflowsFor(obj):\n         return default\n \n     # This still raises WorkflowException when the workflow state is broken,\n     # ie \'review_state\' is absent\n-    return workflow.getInfoFor(ob=obj, name=\'review_state\')\n+    return workflow.getInfoFor(ob=obj, name="review_state")\n \n \n # work backwards from our end state\n@@ -353,7 +352,8 @@ def _find_path(maps, path, current_state, start_state):\n \n \n def _wf_transitions_for(workflow, from_state, to_state):\n-    """Get a list of transition IDs required to transition\n+    """Get list of transition IDs required to transition.\n+\n     from ``from_state`` to ``to_state``.\n \n     :param workflow: Workflow object which contains states and transitions\n@@ -394,14 +394,14 @@ def _transition_to(obj, workflow, to_state, **kwargs):\n     # via any route we can find\n     for wf in workflow.getWorkflowsFor(obj):\n         status = workflow.getStatusOf(wf.getId(), obj)\n-        if not status or not status.get(\'review_state\'):\n+        if not status or not status.get("review_state"):\n             continue\n-        if status[\'review_state\'] == to_state:\n+        if status["review_state"] == to_state:\n             return\n \n         transitions = _wf_transitions_for(\n             wf,\n-            status[\'review_state\'],\n+            status["review_state"],\n             to_state,\n         )\n         if not transitions:\n@@ -420,11 +420,13 @@ def _transition_to(obj, workflow, to_state, **kwargs):\n         break\n \n \n-@required_parameters(\'obj\')\n-@at_least_one_of(\'transition\', \'to_state\')\n-@mutually_exclusive_parameters(\'transition\', \'to_state\')\n+@required_parameters("obj")\n+@at_least_one_of("transition", "to_state")\n+@mutually_exclusive_parameters("transition", "to_state")\n def transition(obj=None, transition=None, to_state=None, **kwargs):\n-    """Perform a workflow transition for the object or attempt to perform\n+    """Perform a workflow transition.\n+\n+    for the object or attempt to perform\n     workflow transitions on the object to reach the given state.\n     The later will not guarantee that transition guards conditions can be met.\n \n@@ -442,58 +444,58 @@ def transition(obj=None, transition=None, to_state=None, **kwargs):\n         :class:`~plone.api.exc.InvalidParameterError`\n     :Example: :ref:`content-transition-example`\n     """\n-    workflow = portal.get_tool(\'portal_workflow\')\n+    workflow = portal.get_tool("portal_workflow")\n     if transition is not None:\n         try:\n             workflow.doActionFor(obj, transition, **kwargs)\n         except WorkflowException:\n-            transitions = [\n-                action[\'id\'] for action in workflow.listActions(object=obj)\n-            ]\n+            transitions = [action["id"] for action in workflow.listActions(object=obj)]\n \n             raise InvalidParameterError(\n                 "Invalid transition \'{}\'.\\n"\n-                \'Valid transitions are:\\n\'\n-                \'{}\'.format(transition, \'\\n\'.join(sorted(transitions))),\n+                "Valid transitions are:\\n"\n+                "{}".format(transition, "\\n".join(sorted(transitions))),\n             )\n     else:\n         _transition_to(obj, workflow, to_state, **kwargs)\n-        if workflow.getInfoFor(obj, \'review_state\') != to_state:\n+        if workflow.getInfoFor(obj, "review_state") != to_state:\n             raise InvalidParameterError(\n-                \'Could not find workflow to set state to {} on {}\'.format(\n+                "Could not find workflow to set state to {} on {}".format(\n                     to_state,\n                     obj,\n                 ),\n             )\n \n \n-@required_parameters(\'obj\')\n+@required_parameters("obj")\n def disable_roles_acquisition(obj=None):\n     """Disable acquisition of local roles on given obj.\n+\n     Set __ac_local_roles_block__ = 1 on obj.\n \n     :param obj: [required] Context object to block the acquisition on.\n     :type obj: Content object\n     :Example: :ref:`content-disable-roles-acquisition-example`\n     """\n-    plone_utils = portal.get_tool(\'plone_utils\')\n+    plone_utils = portal.get_tool("plone_utils")\n     plone_utils.acquireLocalRoles(obj, status=0)\n \n \n-@required_parameters(\'obj\')\n+@required_parameters("obj")\n def enable_roles_acquisition(obj=None):\n     """Enable acquisition of local roles on given obj.\n+\n     Set __ac_local_roles_block__ = 0 on obj.\n \n     :param obj: [required] Context object to enable the acquisition on.\n     :type obj: Content object\n     :Example: :ref:`content-enable-roles-acquisition-example`\n     """\n-    plone_utils = portal.get_tool(\'plone_utils\')\n+    plone_utils = portal.get_tool("plone_utils")\n     plone_utils.acquireLocalRoles(obj, status=1)\n \n \n-@required_parameters(\'name\', \'context\', \'request\')\n+@required_parameters("name", "context", "request")\n def get_view(name=None, context=None, request=None):\n     """Get a BrowserView object.\n \n@@ -525,16 +527,16 @@ def get_view(name=None, context=None, request=None):\n     if name not in available_view_names:\n         raise InvalidParameterError(\n             "Cannot find a view with name \'{name}\'.\\n"\n-            \'Available views are:\\n\'\n-            \'{views}\'.format(\n+            "Available views are:\\n"\n+            "{views}".format(\n                 name=name,\n-                views=\'\\n\'.join(sorted(available_view_names)),\n+                views="\\n".join(sorted(available_view_names)),\n             ),\n         )\n     return getMultiAdapter((context, request), name=name)\n \n \n-@required_parameters(\'obj\')\n+@required_parameters("obj")\n def get_uuid(obj=None):\n     """Get the object\'s Universally Unique IDentifier (UUID).\n \n@@ -558,32 +560,32 @@ def _parse_object_provides_query(query):\n         (eg. `{\'query\': [Iface1, Iface2], \'operator\': \'or\'}`)\n     """\n     ifaces = query\n-    operator = \'or\'\n+    operator = "or"\n     query_not = []\n \n     if isinstance(query, dict):\n-        ifaces = query.get(\'query\', [])\n-        operator = query.get(\'operator\', operator)\n-        query_not = query.get(\'not\', [])\n+        ifaces = query.get("query", [])\n+        operator = query.get("operator", operator)\n+        query_not = query.get("not", [])\n         # KeywordIndex also supports "range",\n         # but that\'s not useful for querying object_provides\n \n     if not isinstance(ifaces, (list, tuple)):\n         ifaces = [ifaces]\n-    ifaces = [getattr(x, \'__identifier__\', x) for x in ifaces]\n+    ifaces = [getattr(x, "__identifier__", x) for x in ifaces]\n \n     if not isinstance(query_not, (list, tuple)):\n         query_not = [query_not]\n-    query_not = [getattr(x, \'__identifier__\', x) for x in query_not]\n+    query_not = [getattr(x, "__identifier__", x) for x in query_not]\n \n     result = {}\n \n     if ifaces:\n-        result[\'query\'] = ifaces\n-        result[\'operator\'] = operator\n+        result["query"] = ifaces\n+        result["operator"] = operator\n \n     if query_not:\n-        result[\'not\'] = query_not\n+        result["not"] = query_not\n \n     return result\n \n@@ -604,16 +606,16 @@ def find(context=None, depth=None, **kwargs):\n     query.update(**kwargs)\n \n     # Save the original path to maybe restore it later.\n-    orig_path = query.get(\'path\')\n+    orig_path = query.get("path")\n     if isinstance(orig_path, dict):\n-        orig_path = orig_path.get(\'query\')\n+        orig_path = orig_path.get("query")\n \n     # Passing a context or depth overrides the existing path query,\n     # for now.\n     if context or depth is not None:\n         # Make the path a dictionary, unless it already is.\n         if not isinstance(orig_path, dict):\n-            query[\'path\'] = {}\n+            query["path"] = {}\n \n     # Limit search depth\n     if depth is not None:\n@@ -622,20 +624,20 @@ def find(context=None, depth=None, **kwargs):\n             context = portal.get()\n         else:\n             # Restore the original path\n-            query[\'path\'][\'query\'] = orig_path\n-        query[\'path\'][\'depth\'] = depth\n+            query["path"]["query"] = orig_path\n+        query["path"]["depth"] = depth\n \n     if context is not None:\n-        query[\'path\'][\'query\'] = \'/\'.join(context.getPhysicalPath())\n+        query["path"]["query"] = "/".join(context.getPhysicalPath())\n \n     # Convert interfaces to their identifiers and also allow to query\n     # multiple values using {\'query:[], \'operator\':\'and|or\'}\n-    obj_provides = query.get(\'object_provides\', [])\n+    obj_provides = query.get("object_provides", [])\n     if obj_provides:\n-        query[\'object_provides\'] = _parse_object_provides_query(obj_provides)\n+        query["object_provides"] = _parse_object_provides_query(obj_provides)\n \n     # Make sure we don\'t dump the whole catalog.\n-    catalog = portal.get_tool(\'portal_catalog\')\n+    catalog = portal.get_tool("portal_catalog")\n     indexes = catalog.indexes()\n     valid_indexes = [index for index in query if index in indexes]\n     if not valid_indexes:\ndiff --git a/src/plone/api/env.py b/src/plone/api/env.py\nindex f8ccbc56..096cdc0f 100644\n--- a/src/plone/api/env.py\n+++ b/src/plone/api/env.py\n@@ -1,3 +1,5 @@\n+"""Module provides info about your instance and tools to switch roles and user."""\n+\n from AccessControl.SecurityManagement import getSecurityManager\n from AccessControl.SecurityManagement import newSecurityManager\n from AccessControl.SecurityManagement import setSecurityManager\n@@ -20,8 +22,8 @@\n IS_TEST = None\n \n \n-@at_least_one_of(\'username\', \'user\')\n-@mutually_exclusive_parameters(\'username\', \'user\')\n+@at_least_one_of("username", "user")\n+@mutually_exclusive_parameters("username", "user")\n def adopt_user(username=None, user=None):\n     """Context manager for temporarily switching user inside a block.\n \n@@ -83,7 +85,7 @@ def _adopt_user(user):\n     setSecurityManager(old_security_manager)\n \n \n-@required_parameters(\'roles\')\n+@required_parameters("roles")\n def adopt_roles(roles=None):\n     """Context manager for temporarily switching roles.\n \n@@ -178,7 +180,7 @@ def getWrappedOwner(self):\n \n \n def debug_mode():\n-    """Returns True if your zope instance is running in debug mode.\n+    """Return True if your zope instance is running in debug mode.\n \n     :Example: :ref:`env-debug-mode-example`\n     """\n@@ -195,7 +197,7 @@ def test_mode():\n     if IS_TEST is None:\n         IS_TEST = False\n         for frame in traceback.extract_stack():\n-            if \'testrunner\' in frame[0] or \'testreport/runner\' in frame[0]:\n+            if "testrunner" in frame[0] or "testreport/runner" in frame[0]:\n                 IS_TEST = True\n                 break\n \n@@ -218,7 +220,7 @@ def plone_version():\n     :returns: string denoting what release of Plone this distribution contains\n     :Example: :ref:`env-plone-version-example`\n     """\n-    return get_distribution(\'Products.CMFPlone\').version\n+    return get_distribution("Products.CMFPlone").version\n \n \n def zope_version():\n@@ -227,4 +229,4 @@ def zope_version():\n     :returns: string denoting what release of Zope2 this distribution contains\n     :Example: :ref:`env-zope-version-example`\n     """\n-    return get_distribution(\'Zope2\').version\n+    return get_distribution("Zope2").version\ndiff --git a/src/plone/api/group.py b/src/plone/api/group.py\nindex 30bf4c7e..f85bf78c 100644\n--- a/src/plone/api/group.py\n+++ b/src/plone/api/group.py\n@@ -10,7 +10,7 @@\n from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin\n \n \n-@required_parameters(\'groupname\')\n+@required_parameters("groupname")\n def create(\n     groupname=None,\n     title=None,\n@@ -36,7 +36,7 @@ def create(\n         ValueError\n     :Example: :ref:`group-create-example`\n     """\n-    group_tool = portal.get_tool(\'portal_groups\')\n+    group_tool = portal.get_tool("portal_groups")\n     group_tool.addGroup(\n         groupname,\n         roles,\n@@ -47,7 +47,7 @@ def create(\n     return group_tool.getGroupById(groupname)\n \n \n-@required_parameters(\'groupname\')\n+@required_parameters("groupname")\n def get(groupname=None):\n     """Get a group.\n \n@@ -59,11 +59,11 @@ def get(groupname=None):\n         ValueError\n     :Example: :ref:`group-get-example`\n     """\n-    group_tool = portal.get_tool(\'portal_groups\')\n+    group_tool = portal.get_tool("portal_groups")\n     return group_tool.getGroupById(groupname)\n \n \n-@mutually_exclusive_parameters(\'username\', \'user\')\n+@mutually_exclusive_parameters("username", "user")\n def get_groups(username=None, user=None):\n     """Get all groups or all groups filtered by user.\n \n@@ -87,15 +87,15 @@ def get_groups(username=None, user=None):\n         if not user:\n             raise UserNotFoundError\n \n-    group_tool = portal.get_tool(\'portal_groups\')\n+    group_tool = portal.get_tool("portal_groups")\n \n     if user:\n         try:\n             groups = group_tool.getGroupsForPrincipal(user)\n         except AttributeError as e:\n             # Anonymous users from the Zope acl_users folder will fail on this\n-            if \'portal_groups\' in str(e):\n-                return[]\n+            if "portal_groups" in str(e):\n+                return []\n             raise\n \n         return [get(groupname=group) for group in groups]\n@@ -103,8 +103,8 @@ def get_groups(username=None, user=None):\n     return group_tool.listGroups()\n \n \n-@mutually_exclusive_parameters(\'groupname\', \'group\')\n-@at_least_one_of(\'groupname\', \'group\')\n+@mutually_exclusive_parameters("groupname", "group")\n+@at_least_one_of("groupname", "group")\n def delete(groupname=None, group=None):\n     """Delete a group.\n \n@@ -119,7 +119,7 @@ def delete(groupname=None, group=None):\n         ValueError\n     :Example: :ref:`group-delete-example`\n     """\n-    group_tool = portal.get_tool(\'portal_groups\')\n+    group_tool = portal.get_tool("portal_groups")\n \n     if group:\n         groupname = group.id\n@@ -127,10 +127,10 @@ def delete(groupname=None, group=None):\n     return group_tool.removeGroup(groupname)\n \n \n-@mutually_exclusive_parameters(\'groupname\', \'group\')\n-@at_least_one_of(\'groupname\', \'group\')\n-@mutually_exclusive_parameters(\'username\', \'user\')\n-@at_least_one_of(\'username\', \'user\')\n+@mutually_exclusive_parameters("groupname", "group")\n+@at_least_one_of("groupname", "group")\n+@mutually_exclusive_parameters("username", "user")\n+@at_least_one_of("username", "user")\n def add_user(groupname=None, group=None, username=None, user=None):\n     """Add the user to a group.\n \n@@ -161,14 +161,14 @@ def add_user(groupname=None, group=None, username=None, user=None):\n \n     user_id = user.id\n     group_id = groupname or group.id\n-    portal_groups = portal.get_tool(\'portal_groups\')\n+    portal_groups = portal.get_tool("portal_groups")\n     portal_groups.addPrincipalToGroup(user_id, group_id)\n \n \n-@mutually_exclusive_parameters(\'groupname\', \'group\')\n-@at_least_one_of(\'groupname\', \'group\')\n-@mutually_exclusive_parameters(\'username\', \'user\')\n-@at_least_one_of(\'username\', \'user\')\n+@mutually_exclusive_parameters("groupname", "group")\n+@at_least_one_of("groupname", "group")\n+@mutually_exclusive_parameters("username", "user")\n+@at_least_one_of("username", "user")\n def remove_user(groupname=None, group=None, username=None, user=None):\n     """Remove the user from a group.\n \n@@ -197,12 +197,12 @@ def remove_user(groupname=None, group=None, username=None, user=None):\n             raise UserNotFoundError\n     user_id = user.id\n     group_id = groupname or group.id\n-    portal_groups = portal.get_tool(\'portal_groups\')\n+    portal_groups = portal.get_tool("portal_groups")\n     portal_groups.removePrincipalFromGroup(user_id, group_id)\n \n \n-@mutually_exclusive_parameters(\'groupname\', \'group\')\n-@at_least_one_of(\'groupname\', \'group\')\n+@mutually_exclusive_parameters("groupname", "group")\n+@at_least_one_of("groupname", "group")\n def get_roles(groupname=None, group=None, obj=None, inherit=True):\n     """Get group\'s site-wide or local roles.\n \n@@ -242,16 +242,16 @@ def get_roles(groupname=None, group=None, obj=None, inherit=True):\n         # same as above we use the PloneUser version of getRolesInContext.\n         # Include roles from adapters granting local roles\n         roles = set()\n-        pas = portal.get_tool(\'acl_users\')\n+        pas = portal.get_tool("acl_users")\n         for _, lrmanager in pas.plugins.listPlugins(ILocalRolesPlugin):\n             for adapter in lrmanager._getAdapters(obj):\n                 roles.update(adapter.getRoles(group_id))\n         return list(roles)\n \n \n-@required_parameters(\'roles\')\n-@mutually_exclusive_parameters(\'groupname\', \'group\')\n-@at_least_one_of(\'groupname\', \'group\')\n+@required_parameters("roles")\n+@mutually_exclusive_parameters("groupname", "group")\n+@at_least_one_of("groupname", "group")\n def grant_roles(groupname=None, group=None, roles=None, obj=None):\n     """Grant roles to a group.\n \n@@ -270,7 +270,7 @@ def grant_roles(groupname=None, group=None, roles=None, obj=None):\n         ValueError\n     :Example: :ref:`group-grant-roles-example`\n     """\n-    if \'Anonymous\' in roles or \'Authenticated\' in roles:\n+    if "Anonymous" in roles or "Authenticated" in roles:\n         raise ValueError\n \n     group_id = groupname or group.id\n@@ -282,13 +282,11 @@ def grant_roles(groupname=None, group=None, roles=None, obj=None):\n         actual_roles = obj.get_local_roles_for_userid(group_id)\n \n     actual_roles = [\n-        role\n-        for role in actual_roles\n-        if role not in [\'Anonymous\', \'Authenticated\']\n+        role for role in actual_roles if role not in ["Anonymous", "Authenticated"]\n     ]\n \n     roles = list(set(actual_roles) | set(roles))\n-    portal_groups = portal.get_tool(\'portal_groups\')\n+    portal_groups = portal.get_tool("portal_groups")\n \n     if obj is None:\n         portal_groups.setRolesForGroup(group_id=group_id, roles=roles)\n@@ -296,9 +294,9 @@ def grant_roles(groupname=None, group=None, roles=None, obj=None):\n         obj.manage_setLocalRoles(group_id, roles)\n \n \n-@required_parameters(\'roles\')\n-@mutually_exclusive_parameters(\'groupname\', \'group\')\n-@at_least_one_of(\'groupname\', \'group\')\n+@required_parameters("roles")\n+@mutually_exclusive_parameters("groupname", "group")\n+@at_least_one_of("groupname", "group")\n def revoke_roles(groupname=None, group=None, roles=None, obj=None):\n     """Revoke roles from a group.\n \n@@ -317,7 +315,7 @@ def revoke_roles(groupname=None, group=None, roles=None, obj=None):\n         ValueError\n     :Example: :ref:`group-revoke-roles-example`\n     """\n-    if \'Anonymous\' in roles or \'Authenticated\' in roles:\n+    if "Anonymous" in roles or "Authenticated" in roles:\n         raise ValueError\n \n     group_id = groupname or group.id\n@@ -328,13 +326,11 @@ def revoke_roles(groupname=None, group=None, roles=None, obj=None):\n         actual_roles = get_roles(groupname=group_id, obj=obj, inherit=False)\n \n     actual_roles = [\n-        role\n-        for role in actual_roles\n-        if role not in [\'Anonymous\', \'Authenticated\']\n+        role for role in actual_roles if role not in ["Anonymous", "Authenticated"]\n     ]\n \n     roles = list(set(actual_roles) - set(roles))\n-    portal_groups = portal.get_tool(\'portal_groups\')\n+    portal_groups = portal.get_tool("portal_groups")\n \n     if obj is None:\n         portal_groups.setRolesForGroup(group_id=group_id, roles=roles)\ndiff --git a/src/plone/api/portal.py b/src/plone/api/portal.py\nindex 7b5f1883..9d42a5da 100644\n--- a/src/plone/api/portal.py\n+++ b/src/plone/api/portal.py\n@@ -19,10 +19,9 @@\n from zope.interface.interfaces import IInterface\n \n import datetime as dtime\n-import pkg_resources\n \n \n-logger = getLogger(\'plone.api.portal\')\n+logger = getLogger("plone.api.portal")\n \n try:\n     from Products import PrintingMailHost\n@@ -36,16 +35,14 @@\n     and PrintingMailHost.ENABLED.lower() in PrintingMailHost.TRUISMS\n ):\n     PRINTINGMAILHOST_ENABLED = True\n-elif (\n-    PrintingMailHost.ENABLED is None\n-    and PrintingMailHost.DevelopmentMode is True\n-):\n+elif PrintingMailHost.ENABLED is None and PrintingMailHost.DevelopmentMode is True:\n     PRINTINGMAILHOST_ENABLED = True\n else:\n     # PrintingMailHost only patches in debug mode.\n     # plone.api.env.debug_mode cannot be used here, because .env imports this\n     # file\n     from App.config import getConfiguration\n+\n     PRINTINGMAILHOST_ENABLED = getConfiguration().debug_mode\n \n MISSING = object()\n@@ -61,7 +58,6 @@ def get():\n     :rtype: Portal object\n     :Example: :ref:`portal-get-example`\n     """\n-\n     closest_site = getSite()\n     if closest_site is not None:\n         for potential_portal in closest_site.aq_chain:\n@@ -69,13 +65,13 @@ def get():\n                 return potential_portal\n \n     raise CannotGetPortalError(\n-        \'Unable to get the portal object. More info on \'\n-        \'https://docs.plone.org/develop/plone.api/docs/api/exceptions.html\'\n-        \'#plone.api.exc.CannotGetPortalError\',\n+        "Unable to get the portal object. More info on "\n+        "https://docs.plone.org/develop/plone.api/docs/api/exceptions.html"\n+        "#plone.api.exc.CannotGetPortalError",\n     )\n \n \n-@required_parameters(\'context\')\n+@required_parameters("context")\n def get_navigation_root(context=None):\n     """Get the navigation root object for the context.\n \n@@ -92,7 +88,7 @@ def get_navigation_root(context=None):\n     return getNavigationRootObject(context, get())\n \n \n-@required_parameters(\'name\')\n+@required_parameters("name")\n def get_tool(name=None):\n     """Get a portal tool in a simple way.\n \n@@ -112,17 +108,17 @@ def get_tool(name=None):\n         portal = get()\n         tools = []\n         for id in portal.objectIds():\n-            if id.startswith(\'portal_\'):\n+            if id.startswith("portal_"):\n                 tools.append(id)\n \n         raise InvalidParameterError(\n             "Cannot find a tool with name \'{name}\'.\\n"\n-            \'Available tools are:\\n\'\n-            \'{tools}\'.format(name=name, tools=\'\\n\'.join(tools)),\n+            "Available tools are:\\n"\n+            "{tools}".format(name=name, tools="\\n".join(tools)),\n         )\n \n \n-@required_parameters(\'recipient\', \'subject\', \'body\')\n+@required_parameters("recipient", "subject", "body")\n def send_email(\n     sender=None,\n     recipient=None,\n@@ -153,19 +149,20 @@ def send_email(\n \n     if not PRINTINGMAILHOST_ENABLED:\n         from plone.api import content\n+\n         ctrlOverview = content.get_view(\n             context=portal,\n             request=portal.REQUEST,\n-            name=\'overview-controlpanel\',\n+            name="overview-controlpanel",\n         )\n         if ctrlOverview.mailhost_warning():\n-            raise ValueError(\'MailHost is not configured.\')\n+            raise ValueError("MailHost is not configured.")\n \n-    encoding = get_registry_record(\'plone.email_charset\')\n+    encoding = get_registry_record("plone.email_charset")\n \n     if not sender:\n-        from_address = get_registry_record(\'plone.email_from_address\')\n-        from_name = get_registry_record(\'plone.email_from_name\')\n+        from_address = get_registry_record("plone.email_from_address")\n+        from_name = get_registry_record("plone.email_from_name")\n         sender = formataddr((from_name, from_address))\n         if parseaddr(sender)[1] != from_address:\n             # formataddr probably got confused by special characters.\n@@ -176,7 +173,7 @@ def send_email(\n     if isinstance(body, str):\n         body = body.encode(encoding)\n \n-    host = get_tool(\'MailHost\')\n+    host = get_tool("MailHost")\n     host.send(\n         body,\n         recipient,\n@@ -187,7 +184,7 @@ def send_email(\n     )\n \n \n-@required_parameters(\'datetime\')\n+@required_parameters("datetime")\n def get_localized_time(datetime=None, long_format=False, time_only=False):\n     """Display a date/time in a user-friendly way.\n \n@@ -216,13 +213,13 @@ def get_localized_time(datetime=None, long_format=False, time_only=False):\n         ValueError\n     :Example: :ref:`portal-get-localized-time-example`\n     """\n-    tool = get_tool(name=\'translation_service\')\n+    tool = get_tool(name="translation_service")\n     request = getRequest()\n \n     # isinstance won\'t work because of date -> datetime inheritance\n     if type(datetime) is dtime.date:\n         if time_only:\n-            return \'\'\n+            return ""\n         datetime = dtime.datetime(datetime.year, datetime.month, datetime.day)\n         long_format = False\n \n@@ -230,13 +227,13 @@ def get_localized_time(datetime=None, long_format=False, time_only=False):\n         datetime,\n         long_format,\n         time_only,\n-        domain=\'plonelocales\',\n+        domain="plonelocales",\n         request=request,\n     )\n \n \n-@required_parameters(\'message\', \'request\')\n-def show_message(message=None, request=None, type=\'info\'):\n+@required_parameters("message", "request")\n+def show_message(message=None, request=None, type="info"):\n     """Display a status message.\n \n     :param message: [required] Message to show.\n@@ -252,9 +249,9 @@ def show_message(message=None, request=None, type=\'info\'):\n     IStatusMessage(request).add(message, type=type)\n \n \n-@required_parameters(\'name\')\n+@required_parameters("name")\n def get_registry_record(name=None, interface=None, default=MISSING):\n-    """Get a record value from ``plone.app.registry``\n+    """Get a record value from ``plone.app.registry``.\n \n     :param name: [required] Name\n     :type name: string\n@@ -272,8 +269,7 @@ def get_registry_record(name=None, interface=None, default=MISSING):\n \n     if interface is not None and not IInterface.providedBy(interface):\n         raise InvalidParameterError(\n-            \'The interface parameter has to derive from \'\n-            \'zope.interface.Interface\',\n+            "The interface parameter has to derive from " "zope.interface.Interface",\n         )\n \n     registry = getUtility(IRegistry)\n@@ -282,7 +278,7 @@ def get_registry_record(name=None, interface=None, default=MISSING):\n         records = registry.forInterface(interface, check=False)\n         _marker = object()\n         if getattr(records, name, _marker) != _marker:\n-            return registry[\'{}.{}\'.format(interface.__identifier__, name)]\n+            return registry["{}.{}".format(interface.__identifier__, name)]\n \n         if default is not MISSING:\n             return default\n@@ -291,12 +287,12 @@ def get_registry_record(name=None, interface=None, default=MISSING):\n         records = [key for key in interface.names()]\n         msg = (\n             \'Cannot find a record with name "{name}"\'\n-            \' on interface {identifier}.\\n\'\n-            \'Did you mean?\\n\'\n-            \'{records}\'.format(\n+            " on interface {identifier}.\\n"\n+            "Did you mean?\\n"\n+            "{records}".format(\n                 name=name,\n                 identifier=interface.__identifier__,\n-                records=\'\\n\'.join(records),\n+                records="\\n".join(records),\n             )\n         )\n         raise InvalidParameterError(msg)\n@@ -309,22 +305,20 @@ def get_registry_record(name=None, interface=None, default=MISSING):\n \n     # Show all records that \'look like\' name.\n     # We don\'t dump the whole list, because it 1500+ items.\n-    msg = (\n-        "Cannot find a record with name \'{name}\'".format(name=name)\n-    )\n+    msg = "Cannot find a record with name \'{name}\'".format(name=name)\n     records = [key for key in registry.records.keys() if name in key]\n     if records:\n         msg = (\n-            \'{message}\\n\'\n-            \'Did you mean?:\\n\'\n-            \'{records}\'.format(message=msg, records=\'\\n\'.join(records))\n+            "{message}\\n"\n+            "Did you mean?:\\n"\n+            "{records}".format(message=msg, records="\\n".join(records))\n         )\n     raise InvalidParameterError(msg)\n \n \n-@required_parameters(\'name\', \'value\')\n+@required_parameters("name", "value")\n def set_registry_record(name=None, value=None, interface=None):\n-    """Set a record value in the ``plone.app.registry``\n+    """Set a record value in the ``plone.app.registry``.\n \n     :param name: [required] Name of the record\n     :type name: string\n@@ -340,8 +334,7 @@ def set_registry_record(name=None, value=None, interface=None):\n \n     if interface is not None and not IInterface.providedBy(interface):\n         raise InvalidParameterError(\n-            \'The interface parameter has to derive from \'\n-            \'zope.interface.Interface\',\n+            "The interface parameter has to derive from " "zope.interface.Interface",\n         )\n \n     registry = getUtility(IRegistry)\n@@ -351,8 +344,9 @@ def set_registry_record(name=None, value=None, interface=None):\n         get_registry_record(name=name, interface=interface)\n \n         from zope.schema._bootstrapinterfaces import WrongType\n+\n         try:\n-            registry[interface.__identifier__ + \'.\' + name] = value\n+            registry[interface.__identifier__ + "." + name] = value\n         except WrongType:\n             field_type = None\n             for field in interface.namesAndDescriptions():\n@@ -360,8 +354,8 @@ def set_registry_record(name=None, value=None, interface=None):\n                     field_type = field[1]\n                     break\n             raise InvalidParameterError(\n-                \'The value parameter for the field {name} needs to be \'\n-                \'{of_class} instead of {of_type}\'.format(\n+                "The value parameter for the field {name} needs to be "\n+                "{of_class} instead of {of_type}".format(\n                     name=name,\n                     of_class=str(field_type.__class__),\n                     of_type=type(value),\n@@ -384,8 +378,9 @@ def get_default_language():\n     :Example: :ref:`portal-get-default-language-example`\n     """\n     from plone.i18n.interfaces import ILanguageSchema\n+\n     registry = getUtility(IRegistry)\n-    settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n+    settings = registry.forInterface(ILanguageSchema, prefix="plone")\n     return settings.default_language\n \n \n@@ -399,12 +394,14 @@ def get_current_language(context=None):\n     :Example: :ref:`portal-get-current-language-example`\n     """\n     request = getRequest()\n-    return request.get(\'LANGUAGE\', None) or \\\n-        (context and aq_inner(context).Language()) \\\n+    return (\n+        request.get("LANGUAGE", None)\n+        or (context and aq_inner(context).Language())\n         or get_default_language()\n+    )\n \n \n-def translate(msgid, domain=\'plone\', lang=None):\n+def translate(msgid, domain="plone", lang=None):\n     """Translate a message into a given language.\n \n     Default to current negotiated language if no target language specified.\n@@ -419,13 +416,13 @@ def translate(msgid, domain=\'plone\', lang=None):\n     :rtype: str\n     :Example: :ref:`portal-translate-example`\n     """\n-    translation_service = get_tool(\'translation_service\')\n+    translation_service = get_tool("translation_service")\n     query = {\n-        \'msgid\': msgid,\n-        \'domain\': domain,\n-        \'target_language\': lang,\n+        "msgid": msgid,\n+        "domain": domain,\n+        "target_language": lang,\n     }\n     if lang is None:\n         # Pass the request, so zope.i18n.translate can negotiate the language.\n-        query[\'context\'] = getRequest()\n+        query["context"] = getRequest()\n     return translation_service.utranslate(**query)\ndiff --git a/src/plone/api/relation.py b/src/plone/api/relation.py\nindex 1de0f4cc..3291c88b 100644\n--- a/src/plone/api/relation.py\n+++ b/src/plone/api/relation.py\n@@ -24,6 +24,7 @@\n import logging\n import pkg_resources\n \n+\n try:\n     pkg_resources.get_distribution("plone.app.iterate")\n except pkg_resources.DistributionNotFound:\n@@ -40,14 +41,14 @@\n def _get_field_and_schema_for_fieldname(field_id, portal_type):\n     """Get field and its schema from a portal_type."""\n     # Turn form.widgets.IDublinCore.title into title\n-    field_id = field_id.split(\'.\')[-1]\n+    field_id = field_id.split(".")[-1]\n     for schema in iterSchemataForType(portal_type):\n         field = schema.get(field_id, None)\n         if field is not None:\n             return (field, schema)\n \n \n-@at_least_one_of(\'source\', \'target\', \'relationship\')\n+@at_least_one_of("source", "target", "relationship")\n def get(\n     source=None,\n     target=None,\n@@ -55,7 +56,7 @@ def get(\n     unrestricted=False,\n     as_dict=False,\n ):\n-    """Get specific relations given a source/target/relationship\n+    """Get specific relations given a source/target/relationship.\n \n     :param source: Object that the relations originate from.\n     :type source: Content object\n@@ -73,17 +74,17 @@ def get(\n \n     :Example: :ref:`relation-get-example`\n     """\n-    if source is not None and not base_hasattr(source, \'portal_type\'):\n-        raise InvalidParameterError(\'{} has no portal_type\'.format(source))\n+    if source is not None and not base_hasattr(source, "portal_type"):\n+        raise InvalidParameterError("{} has no portal_type".format(source))\n \n-    if target is not None and not base_hasattr(target, \'portal_type\'):\n-        raise InvalidParameterError(\'{} has no portal_type\'.format(target))\n+    if target is not None and not base_hasattr(target, "portal_type"):\n+        raise InvalidParameterError("{} has no portal_type".format(target))\n \n     if relationship is not None and not isinstance(\n         relationship,\n         str,\n     ):\n-        raise InvalidParameterError(\'{} is no string\'.format(relationship))\n+        raise InvalidParameterError("{} is no string".format(relationship))\n \n     intids = getUtility(IIntIds)\n     relation_catalog = getUtility(ICatalog)\n@@ -100,11 +101,11 @@ def get(\n         checkPermission = getSecurityManager().checkPermission\n \n     if source is not None:\n-        query[\'from_id\'] = intids.getId(source)\n+        query["from_id"] = intids.getId(source)\n     if target is not None:\n-        query[\'to_id\'] = intids.getId(target)\n+        query["to_id"] = intids.getId(target)\n     if relationship is not None:\n-        query[\'from_attribute\'] = relationship\n+        query["from_attribute"] = relationship\n \n     for relation in relation_catalog.findRelations(query):\n         if relation.isBroken():\n@@ -114,8 +115,8 @@ def get(\n             source_obj = relation.from_object\n             target_obj = relation.to_object\n \n-            if checkPermission(\'View\', source_obj) and checkPermission(\n-                \'View\',\n+            if checkPermission("View", source_obj) and checkPermission(\n+                "View",\n                 target_obj,\n             ):\n                 if as_dict:\n@@ -132,9 +133,9 @@ def get(\n     return results\n \n \n-@required_parameters(\'source\', \'target\', \'relationship\')\n+@required_parameters("source", "target", "relationship")\n def create(source=None, target=None, relationship=None):\n-    """Create a relation from source to target using zc.relation\n+    """Create a relation from source to target using zc.relation.\n \n     :param source: [required] Object that the relation will originate from.\n     :type source: Content object\n@@ -147,14 +148,14 @@ def create(source=None, target=None, relationship=None):\n     :type id: string\n     :Example: :ref:`relation-create-example`\n     """\n-    if source is not None and not base_hasattr(source, \'portal_type\'):\n-        raise InvalidParameterError(\'{} has no portal_type\'.format(source))\n+    if source is not None and not base_hasattr(source, "portal_type"):\n+        raise InvalidParameterError("{} has no portal_type".format(source))\n \n-    if target is not None and not base_hasattr(target, \'portal_type\'):\n-        raise InvalidParameterError(\'{} has no portal_type\'.format(target))\n+    if target is not None and not base_hasattr(target, "portal_type"):\n+        raise InvalidParameterError("{} has no portal_type".format(target))\n \n     if not isinstance(relationship, str):\n-        raise InvalidParameterError(\'{} is no string\'.format(relationship))\n+        raise InvalidParameterError("{} is no string".format(relationship))\n \n     relation_catalog = getUtility(ICatalog)\n     intids = getUtility(IIntIds)\n@@ -165,9 +166,9 @@ def create(source=None, target=None, relationship=None):\n     # Check if there is exactly this relation.\n     # If so remove it and create a fresh one.\n     query = {\n-        \'from_attribute\': from_attribute,\n-        \'from_id\': from_id,\n-        \'to_id\': to_id,\n+        "from_attribute": from_attribute,\n+        "from_id": from_id,\n+        "to_id": to_id,\n     }\n     for rel in relation_catalog.findRelations(query):\n         relation_catalog.unindex(rel)\n@@ -178,10 +179,7 @@ def create(source=None, target=None, relationship=None):\n         modifiedContent(source, None)\n         return\n \n-    if (\n-        ITERATE_RELATION_NAME is not None\n-        and from_attribute == ITERATE_RELATION_NAME\n-    ):\n+    if ITERATE_RELATION_NAME is not None and from_attribute == ITERATE_RELATION_NAME:\n         # Iterate relations use a subclass of RelationValue\n         relation = StagingRelationValue(to_id)\n         event._setRelation(source, ITERATE_RELATION_NAME, relation)\n@@ -197,7 +195,7 @@ def create(source=None, target=None, relationship=None):\n         # The relationship is not the name of a dexterity field.\n         # Only create a relation.\n         logger.debug(\n-            \'No dexterity field. Setting relation %s from %s to %s\',\n+            "No dexterity field. Setting relation %s from %s to %s",\n             source.absolute_url(),\n             target.absolute_url(),\n             relationship,\n@@ -209,7 +207,7 @@ def create(source=None, target=None, relationship=None):\n \n     if isinstance(field, RelationList):\n         logger.info(\n-            \'Add relation to relationlist %s from %s to %s\',\n+            "Add relation to relationlist %s from %s to %s",\n             from_attribute,\n             source.absolute_url(),\n             target.absolute_url(),\n@@ -222,7 +220,7 @@ def create(source=None, target=None, relationship=None):\n \n     elif isinstance(field, (Relation, RelationChoice)):\n         logger.info(\n-            \'Add relation %s from %s to %s\',\n+            "Add relation %s from %s to %s",\n             from_attribute,\n             source.absolute_url(),\n             target.absolute_url(),\n@@ -238,16 +236,16 @@ def create(source=None, target=None, relationship=None):\n     # Let\'s create the relationship and log a warning.\n     event._setRelation(source, from_attribute, RelationValue(to_id))\n     logger.warning(\n-        \'Created relation %s on an item that has a field with the same name \'\n-        \'which is not a relation field. Is this what you wanted? \'\n-        \'Relation points from %s to %s\',\n+        "Created relation %s on an item that has a field with the same name "\n+        "which is not a relation field. Is this what you wanted? "\n+        "Relation points from %s to %s",\n         from_attribute,\n         source.absolute_url(),\n         target.absolute_url(),\n     )\n \n \n-@at_least_one_of(\'source\', \'target\', \'relationship\')\n+@at_least_one_of("source", "target", "relationship")\n def delete(source=None, target=None, relationship=None):\n     """Delete relation or relations.\n \n@@ -262,27 +260,27 @@ def delete(source=None, target=None, relationship=None):\n     :type id: string\n     :Example: :ref:`relation-delete-example`\n     """\n-    if source is not None and not base_hasattr(source, \'portal_type\'):\n-        raise InvalidParameterError(\'{} has no portal_type\'.format(source))\n+    if source is not None and not base_hasattr(source, "portal_type"):\n+        raise InvalidParameterError("{} has no portal_type".format(source))\n \n-    if target is not None and not base_hasattr(target, \'portal_type\'):\n-        raise InvalidParameterError(\'{} has no portal_type\'.format(target))\n+    if target is not None and not base_hasattr(target, "portal_type"):\n+        raise InvalidParameterError("{} has no portal_type".format(target))\n \n     if relationship is not None and not isinstance(\n         relationship,\n         str,\n     ):\n-        raise InvalidParameterError(\'{} is no string\'.format(relationship))\n+        raise InvalidParameterError("{} is no string".format(relationship))\n \n     query = {}\n     relation_catalog = getUtility(ICatalog)\n     intids = getUtility(IIntIds)\n     if source is not None:\n-        query[\'from_id\'] = intids.getId(source)\n+        query["from_id"] = intids.getId(source)\n     if target is not None:\n-        query[\'to_id\'] = intids.getId(target)\n+        query["to_id"] = intids.getId(target)\n     if relationship is not None:\n-        query[\'from_attribute\'] = relationship\n+        query["from_attribute"] = relationship\n     for rel in relation_catalog.findRelations(query):\n         source = rel.from_object\n         from_attribute = rel.from_attribute\n@@ -300,7 +298,7 @@ def delete(source=None, target=None, relationship=None):\n         field, _schema = field_and_schema\n         if isinstance(field, RelationList):\n             logger.info(\n-                \'Remove relation from %s to %s from relationlist %s\',\n+                "Remove relation from %s to %s from relationlist %s",\n                 source.absolute_url(),\n                 target.absolute_url(),\n                 from_attribute,\n@@ -312,7 +310,7 @@ def delete(source=None, target=None, relationship=None):\n \n         elif isinstance(field, (Relation, RelationChoice)):\n             logger.info(\n-                \'Remove relation %s from %s to %s\',\n+                "Remove relation %s from %s to %s",\n                 from_attribute,\n                 source.absolute_url(),\n                 target.absolute_url(),\ndiff --git a/src/plone/api/tests/base.py b/src/plone/api/tests/base.py\nindex 654836fd..e39c2a90 100644\n--- a/src/plone/api/tests/base.py\n+++ b/src/plone/api/tests/base.py\n@@ -9,33 +9,34 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n \n-import pkg_resources\n-\n \n class PloneApiLayer(PloneSandboxLayer):\n \n-    defaultBases = (PLONE_FIXTURE, )\n+    defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         """Prepare Zope instance by loading appropriate ZCMLs."""\n         import plone.app.dexterity\n+\n         self.loadZCML(package=plone.app.dexterity)\n         import plone.api\n-        self.loadZCML(package=plone.api, name=\'testing.zcml\')\n+\n+        self.loadZCML(package=plone.api, name="testing.zcml")\n         import plone.app.contenttypes\n+\n         self.loadZCML(package=plone.app.contenttypes)\n \n     def setUpPloneSite(self, portal):\n         """Prepare a Plone instance for testing."""\n         # Install into Plone site using portal_setup\n-        self.applyProfile(portal, \'Products.CMFPlone:plone\')\n-        self.applyProfile(portal, \'plone.app.contenttypes:default\')\n+        self.applyProfile(portal, "Products.CMFPlone:plone")\n+        self.applyProfile(portal, "plone.app.contenttypes:default")\n \n         # Create dummy content types for Dexterity tests\n-        self.applyProfile(portal, \'plone.api:testfixture\')\n+        self.applyProfile(portal, "plone.api:testfixture")\n \n         # Login as manager\n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n         login(portal, TEST_USER_NAME)\n \n     def tearDownZope(self, app):\n@@ -44,10 +45,10 @@ def tearDownZope(self, app):\n \n FIXTURE = PloneApiLayer()\n INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(FIXTURE, ),\n-    name=\'PloneApiLayer:Integration\',\n+    bases=(FIXTURE,),\n+    name="PloneApiLayer:Integration",\n )\n FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(FIXTURE, ),\n-    name=\'PloneApiLayer:Functional\',\n+    bases=(FIXTURE,),\n+    name="PloneApiLayer:Functional",\n )\ndiff --git a/src/plone/api/tests/doctests/about.rst b/src/plone/api/tests/doctests/about.rst\ndeleted file mode 120000\nindex 8b310142..00000000\n--- a/src/plone/api/tests/doctests/about.rst\n+++ /dev/null\n@@ -1 +0,0 @@\n-../../../../../docs/about.rst\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/content.md b/src/plone/api/tests/doctests/content.md\nnew file mode 120000\nindex 00000000..3834f680\n--- /dev/null\n+++ b/src/plone/api/tests/doctests/content.md\n@@ -0,0 +1 @@\n+../../../../../docs/content.md\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/content.rst b/src/plone/api/tests/doctests/content.rst\ndeleted file mode 120000\nindex 6a91e4b9..00000000\n--- a/src/plone/api/tests/doctests/content.rst\n+++ /dev/null\n@@ -1 +0,0 @@\n-../../../../../docs/content.rst\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/env.md b/src/plone/api/tests/doctests/env.md\nnew file mode 120000\nindex 00000000..1eb7795d\n--- /dev/null\n+++ b/src/plone/api/tests/doctests/env.md\n@@ -0,0 +1 @@\n+../../../../../docs/env.md\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/env.rst b/src/plone/api/tests/doctests/env.rst\ndeleted file mode 120000\nindex 20e2aafc..00000000\n--- a/src/plone/api/tests/doctests/env.rst\n+++ /dev/null\n@@ -1 +0,0 @@\n-../../../../../docs/env.rst\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/group.md b/src/plone/api/tests/doctests/group.md\nnew file mode 120000\nindex 00000000..72c98eca\n--- /dev/null\n+++ b/src/plone/api/tests/doctests/group.md\n@@ -0,0 +1 @@\n+../../../../../docs/group.md\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/group.rst b/src/plone/api/tests/doctests/group.rst\ndeleted file mode 120000\nindex 3f6065d4..00000000\n--- a/src/plone/api/tests/doctests/group.rst\n+++ /dev/null\n@@ -1 +0,0 @@\n-../../../../../docs/group.rst\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/portal.md b/src/plone/api/tests/doctests/portal.md\nnew file mode 120000\nindex 00000000..44a98307\n--- /dev/null\n+++ b/src/plone/api/tests/doctests/portal.md\n@@ -0,0 +1 @@\n+../../../../../docs/portal.md\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/portal.rst b/src/plone/api/tests/doctests/portal.rst\ndeleted file mode 120000\nindex 6a32aa04..00000000\n--- a/src/plone/api/tests/doctests/portal.rst\n+++ /dev/null\n@@ -1 +0,0 @@\n-../../../../../docs/portal.rst\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/relation.md b/src/plone/api/tests/doctests/relation.md\nnew file mode 120000\nindex 00000000..b8e3b628\n--- /dev/null\n+++ b/src/plone/api/tests/doctests/relation.md\n@@ -0,0 +1 @@\n+../../../../../docs/relation.md\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/user.md b/src/plone/api/tests/doctests/user.md\nnew file mode 120000\nindex 00000000..9dbad016\n--- /dev/null\n+++ b/src/plone/api/tests/doctests/user.md\n@@ -0,0 +1 @@\n+../../../../../docs/user.md\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/user.rst b/src/plone/api/tests/doctests/user.rst\ndeleted file mode 120000\nindex 00dadfa3..00000000\n--- a/src/plone/api/tests/doctests/user.rst\n+++ /dev/null\n@@ -1 +0,0 @@\n-../../../../../docs/user.rst\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py\nindex 6c0c0922..6a5e7b55 100644\n--- a/src/plone/api/tests/test_content.py\n+++ b/src/plone/api/tests/test_content.py\n@@ -8,9 +8,8 @@\n from plone.api.content import _parse_object_provides_query\n from plone.api.tests.base import INTEGRATION_TESTING\n from plone.app.layout.navigation.interfaces import INavigationRoot\n-from plone.app.linkintegrity.exceptions import LinkIntegrityNotificationException  # NOQA: E501\n+from plone.app.linkintegrity.exceptions import LinkIntegrityNotificationException\n from plone.app.textfield import RichTextValue\n-from plone.dexterity.interfaces import IDexterityContent\n from plone.indexer import indexer\n from plone.uuid.interfaces import IMutableUUID\n from plone.uuid.interfaces import IUUIDGenerator\n@@ -28,12 +27,11 @@\n from zope.lifecycleevent import modified\n from zope.lifecycleevent import ObjectMovedEvent\n \n-import pkg_resources\n import unittest\n \n \n class TestPloneApiContent(unittest.TestCase):\n-    """Unit tests for content manipulation using plone.api"""\n+    """Unit tests for content manipulation using plone.api."""\n \n     layer = INTEGRATION_TESTING\n \n@@ -51,65 +49,66 @@ def setUp(self):\n             |-- conference\n             `-- sprint\n         """\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n         self.blog = api.content.create(\n-            type=\'Link\',\n-            id=\'blog\',\n+            type="Link",\n+            id="blog",\n             container=self.portal,\n         )\n         self.about = api.content.create(\n-            type=\'Folder\',\n-            id=\'about\',\n+            type="Folder",\n+            id="about",\n             container=self.portal,\n         )\n         self.events = api.content.create(\n-            type=\'Folder\',\n-            id=\'events\',\n+            type="Folder",\n+            id="events",\n             container=self.portal,\n         )\n \n         self.team = api.content.create(\n             container=self.about,\n-            type=\'Document\',\n-            id=\'team\',\n+            type="Document",\n+            id="team",\n         )\n         self.contact = api.content.create(\n             container=self.about,\n-            type=\'Document\',\n-            id=\'contact\',\n+            type="Document",\n+            id="contact",\n         )\n \n         self.training = api.content.create(\n             container=self.events,\n-            type=\'Event\',\n-            id=\'training\',\n+            type="Event",\n+            id="training",\n         )\n         self.conference = api.content.create(\n             container=self.events,\n-            type=\'Event\',\n-            id=\'conference\',\n+            type="Event",\n+            id="conference",\n         )\n         self.sprint = api.content.create(\n             container=self.events,\n-            type=\'Event\',\n-            id=\'sprint\',\n+            type="Event",\n+            id="sprint",\n         )\n \n         self.image = api.content.create(\n             container=self.portal,\n-            type=\'Image\',\n-            id=\'image\',\n+            type="Image",\n+            id="image",\n         )\n \n     def verify_intids(self):\n-        """Test that the intids are in order"""\n+        """Test that the intids are in order."""\n         from zope.component import getUtility\n         from zope.intid.interfaces import IIntIds\n \n         intids = getUtility(IIntIds)\n         broken_keys = [\n-            key for key in intids.ids\n+            key\n+            for key in intids.ids\n             if not self.portal.unrestrictedTraverse(key.path, None)\n         ]\n         obsolete_paths = [key.path for key in broken_keys]\n@@ -117,10 +116,7 @@ def verify_intids(self):\n \n         # Objects used as keys with a hash can behave strangely.\n         # I have seen this go wrong in a production site.\n-        weird_keys = [\n-            key for key in intids.ids\n-            if key not in intids.ids\n-        ]\n+        weird_keys = [key for key in intids.ids if key not in intids.ids]\n         weird_paths = [key.path for key in weird_keys]\n         self.assertListEqual(weird_paths, [])\n \n@@ -136,8 +132,8 @@ def test_create_constraints(self):\n         # Check the constraints for the type container\n         with self.assertRaises(MissingParameterError):\n             api.content.create(\n-                type=\'Document\',\n-                id=\'test-doc\',\n+                type="Document",\n+                id="test-doc",\n             )\n \n         # Check the constraints for the type parameter\n@@ -145,14 +141,14 @@ def test_create_constraints(self):\n         with self.assertRaises(MissingParameterError):\n             api.content.create(\n                 container=container,\n-                id=\'test-doc\',\n+                id="test-doc",\n             )\n \n         # Check the constraints for id and title parameters\n         with self.assertRaises(MissingParameterError):\n             api.content.create(\n                 container=container,\n-                type=\'Document\',\n+                type="Document",\n             )\n \n         # Check the constraints for allowed types in the container\n@@ -160,8 +156,8 @@ def test_create_constraints(self):\n         with self.assertRaises(InvalidParameterError):\n             api.content.create(\n                 container=container,\n-                type=\'foo\',\n-                id=\'test-foo\',\n+                type="foo",\n+                id="test-foo",\n             )\n \n         # Check the constraints for allowed types in the container if\n@@ -170,14 +166,14 @@ def test_create_constraints(self):\n         with self.assertRaises(InvalidParameterError) as cm:\n             api.content.create(\n                 container=container,\n-                type=\'foo\',\n-                id=\'test-foo\',\n+                type="foo",\n+                id="test-foo",\n             )\n \n         # Check if the underlying error message is included\n         # in the InvalidParameterError message\n         self.assertIn(\n-            \'No such content type: foo\',\n+            "No such content type: foo",\n             str(cm.exception),\n         )\n \n@@ -185,31 +181,32 @@ def test_create_constraints(self):\n         # Create a folder\n         folder = api.content.create(\n             container=container,\n-            type=\'Folder\',\n-            id=\'test-folder\',\n+            type="Folder",\n+            id="test-folder",\n         )\n         assert folder\n \n         # Constraint the allowed types\n         ENABLED = 1\n-        if getattr(aq_base(folder), \'setConstrainTypesMode\', None):  # AT\n+        if getattr(aq_base(folder), "setConstrainTypesMode", None):  # AT\n             folder.setConstrainTypesMode(ENABLED)\n-            folder.setLocallyAllowedTypes((\'News Item\', ))\n+            folder.setLocallyAllowedTypes(("News Item",))\n         else:  # DX\n             from Products.CMFPlone.interfaces import ISelectableConstrainTypes\n+\n             constraints = ISelectableConstrainTypes(folder)\n             constraints.setConstrainTypesMode(ENABLED)\n-            constraints.setLocallyAllowedTypes((\'News Item\', ))\n+            constraints.setLocallyAllowedTypes(("News Item",))\n \n         with self.assertRaises(InvalidParameterError):\n             api.content.create(\n                 container=folder,\n-                type=\'Document\',\n-                id=\'test-doc\',\n+                type="Document",\n+                id="test-doc",\n             )\n \n     def test_create_dexterity(self):\n-        """Test create dexterity"""\n+        """Test create dexterity."""\n         container = self.portal\n \n         # This section check for DX compatibilty. The custom DX types defined\n@@ -218,45 +215,45 @@ def test_create_dexterity(self):\n         # Create a folder\n         folder = api.content.create(\n             container=container,\n-            type=\'Dexterity Folder\',\n-            id=\'test-folder\',\n+            type="Dexterity Folder",\n+            id="test-folder",\n         )\n         assert folder\n-        self.assertEqual(folder.id, \'test-folder\')\n-        self.assertEqual(folder.portal_type, \'Dexterity Folder\')\n+        self.assertEqual(folder.id, "test-folder")\n+        self.assertEqual(folder.portal_type, "Dexterity Folder")\n \n         # Create an item\n         page = api.content.create(\n             container=folder,\n-            type=\'Dexterity Item\',\n-            id=\'test-item\',\n+            type="Dexterity Item",\n+            id="test-item",\n         )\n         assert page\n-        self.assertEqual(page.id, \'test-item\')\n-        self.assertEqual(page.portal_type, \'Dexterity Item\')\n+        self.assertEqual(page.id, "test-item")\n+        self.assertEqual(page.portal_type, "Dexterity Item")\n \n         # Create an item with a title and without an id\n         page = api.content.create(\n             container=folder,\n-            type=\'Dexterity Item\',\n-            title=\'Test id generated\',\n+            type="Dexterity Item",\n+            title="Test id generated",\n         )\n         assert page\n-        self.assertEqual(page.id, \'test-id-generated\')\n-        self.assertEqual(page.Title(), \'Test id generated\')\n-        self.assertEqual(page.portal_type, \'Dexterity Item\')\n+        self.assertEqual(page.id, "test-id-generated")\n+        self.assertEqual(page.Title(), "Test id generated")\n+        self.assertEqual(page.portal_type, "Dexterity Item")\n \n         # Try to create another item with same id, this should fail\n         with self.assertRaises(BadRequest):\n             api.content.create(\n                 container=folder,\n-                type=\'Dexterity Item\',\n-                id=\'test-item\',\n+                type="Dexterity Item",\n+                id="test-item",\n             )\n         self.verify_intids()\n \n     def test_create_content(self):\n-        """Test create content"""\n+        """Test create content."""\n         container = self.portal\n \n         # This section below is either AT (Plone < 5) or DX (Plone >= 5)\n@@ -266,40 +263,40 @@ def test_create_content(self):\n         # Create a folder\n         folder = api.content.create(\n             container=container,\n-            type=\'Folder\',\n-            id=\'test-folder\',\n+            type="Folder",\n+            id="test-folder",\n         )\n         assert folder\n-        self.assertEqual(folder.id, \'test-folder\')\n-        self.assertEqual(folder.portal_type, \'Folder\')\n+        self.assertEqual(folder.id, "test-folder")\n+        self.assertEqual(folder.portal_type, "Folder")\n \n         # Create a document\n         page = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'test-document\',\n+            type="Document",\n+            id="test-document",\n         )\n         assert page\n-        self.assertEqual(page.id, \'test-document\')\n-        self.assertEqual(page.portal_type, \'Document\')\n+        self.assertEqual(page.id, "test-document")\n+        self.assertEqual(page.portal_type, "Document")\n \n         # Create a document with a title and without an id\n         page = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            title=\'Test id generated\',\n+            type="Document",\n+            title="Test id generated",\n         )\n         assert page\n-        self.assertEqual(page.id, \'test-id-generated\')\n-        self.assertEqual(page.Title(), \'Test id generated\')\n-        self.assertEqual(page.portal_type, \'Document\')\n+        self.assertEqual(page.id, "test-id-generated")\n+        self.assertEqual(page.Title(), "Test id generated")\n+        self.assertEqual(page.portal_type, "Document")\n \n         # Try to create another page with same id, this should fail\n         with self.assertRaises(BadRequest):\n             api.content.create(\n                 container=folder,\n-                type=\'Document\',\n-                id=\'test-document\',\n+                type="Document",\n+                id="test-document",\n             )\n         self.verify_intids()\n \n@@ -309,53 +306,53 @@ def test_create_with_safe_id(self):\n \n         first_page = api.content.create(\n             container=container,\n-            type=\'Document\',\n-            id=\'test-document\',\n+            type="Document",\n+            id="test-document",\n             safe_id=True,\n         )\n         assert first_page\n-        self.assertEqual(first_page.id, \'test-document\')\n-        self.assertEqual(first_page.portal_type, \'Document\')\n+        self.assertEqual(first_page.id, "test-document")\n+        self.assertEqual(first_page.portal_type, "Document")\n \n         # Second page is created with non-conflicting id\n         second_page = api.content.create(\n             container=container,\n-            type=\'Document\',\n-            id=\'test-document\',\n+            type="Document",\n+            id="test-document",\n             safe_id=True,\n         )\n         assert second_page\n-        self.assertEqual(second_page.id, \'test-document-1\')\n-        self.assertEqual(second_page.portal_type, \'Document\')\n+        self.assertEqual(second_page.id, "test-document-1")\n+        self.assertEqual(second_page.portal_type, "Document")\n \n     def test_create_raises_unicodedecodeerror(self):\n         """Test that the create method raises UnicodeDecodeErrors correctly."""\n         site = getGlobalSiteManager()\n-        unicode_exception_message = \'This is a fake unicode error\'\n+        unicode_exception_message = "This is a fake unicode error"\n \n         # register a title indexer that will force a UnicodeDecodeError\n         # during content reindexing\n         @indexer(IContentish, IZCatalog)\n         def force_unicode_error(object):\n             raise UnicodeDecodeError(\n-                \'ascii\',\n-                b\'x\',\n+                "ascii",\n+                b"x",\n                 1,\n                 5,\n                 unicode_exception_message,\n             )\n \n-        site.registerAdapter(factory=force_unicode_error, name=\'Title\')\n+        site.registerAdapter(factory=force_unicode_error, name="Title")\n \n         def unregister_indexer():\n-            site.unregisterAdapter(factory=force_unicode_error, name=\'Title\')\n+            site.unregisterAdapter(factory=force_unicode_error, name="Title")\n \n         self.addCleanup(unregister_indexer)\n \n         with self.assertRaises(UnicodeDecodeError) as ude:\n             api.content.create(\n-                type=\'Folder\',\n-                id=\'test-unicode-folder\',\n+                type="Folder",\n+                id="test-unicode-folder",\n                 container=self.portal,\n             )\n \n@@ -363,115 +360,117 @@ def unregister_indexer():\n         self.assertEqual(ude.exception.reason, unicode_exception_message)\n \n     def test_create_at_with_title_in_request(self):\n-        """ Test that content gets created with the correct title, even if\n-            request.form[\'title\'] already exists and has a different value.\n-            This can occur, for example, when adding a Plone with an enabled\n-            product that creates a site structure. In that case, the \'title\'\n-            would be that of the portal.\n-            Only AT content types are affected, due to content.processForm.\n+        """Test that content gets created with the correct title.\n+\n+        even if request.form[\'title\'] already exists and has a different value.\n+        This can occur, for example, when adding a Plone with an enabled\n+        product that creates a site structure. In that case, the \'title\'\n+        would be that of the portal.\n+        Only AT content types are affected, due to content.processForm.\n         """\n-        leaked_title = \'This should not be set on content items\'\n-        self.layer[\'request\'].form[\'title\'] = leaked_title\n+        leaked_title = "This should not be set on content items"\n+        self.layer["request"].form["title"] = leaked_title\n \n         container = self.portal\n \n         # Create a folder\n         folder = api.content.create(\n             container=container,\n-            type=\'Folder\',\n-            title=\'Test folder\',\n+            type="Folder",\n+            title="Test folder",\n         )\n \n-        self.assertEqual(folder.title, \'Test folder\')\n+        self.assertEqual(folder.title, "Test folder")\n \n         # Create a document\n         page = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            title=\'Test document\',\n+            type="Document",\n+            title="Test document",\n         )\n \n-        self.assertEqual(page.title, \'Test document\')\n+        self.assertEqual(page.title, "Test document")\n \n     def test_create_collection(self):\n         """Test create a Collection."""\n         collection = api.content.create(\n             container=self.portal,\n-            type=\'Collection\',\n-            title=\'Mandelbrot set\',\n-            description=\'Image gallery of a zoom sequence\',\n+            type="Collection",\n+            title="Mandelbrot set",\n+            description="Image gallery of a zoom sequence",\n             query=[\n                 {\n-                 \'i\': \'Type\',\n-                 \'o\': \'plone.app.querystring.operation.string.is\',\n-                 \'v\': [\'Image\'],\n+                    "i": "Type",\n+                    "o": "plone.app.querystring.operation.string.is",\n+                    "v": ["Image"],\n                 },\n             ],\n         )\n-        self.assertEqual(collection.Title(), \'Mandelbrot set\')\n+        self.assertEqual(collection.Title(), "Mandelbrot set")\n \n     def test_create_event(self):\n         """Test create a event."""\n         import datetime\n+\n         today = datetime.datetime.now()\n         tomorrow = today + datetime.timedelta(days=1)\n         event = api.content.create(\n             container=self.portal,\n-            type=\'Event\',\n-            title=\'My event\',\n+            type="Event",\n+            title="My event",\n             start=today,\n             end=tomorrow,\n         )\n         self.assertEqual(event.start, today)\n         self.assertEqual(event.end, tomorrow)\n-        results = api.content.find(Title=\'My event\')\n+        results = api.content.find(Title="My event")\n         self.assertEqual(len(results), 1)\n         self.assertEqual(results[0].start, today)\n         self.assertEqual(results[0].end, tomorrow)\n \n     def test_get_constraints(self):\n         """Test the constraints when content is fetched with get."""\n-\n         # Path and UID parameter can not be given together\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.content.get(\n-                path=\'/\',\n-                UID=\'dummy\',\n+                path="/",\n+                UID="dummy",\n             )\n \n         # Either a path or UID must be given\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.content.get()\n \n     def test_get(self):\n         """Test the getting of content in varios ways."""\n-\n         # Test getting the about folder by path and UID\n-        about_by_path = api.content.get(\'/about\')\n+        about_by_path = api.content.get("/about")\n         about_by_uid = api.content.get(UID=self.about.UID())\n         self.assertEqual(self.about, about_by_path)\n         self.assertEqual(self.about, about_by_uid)\n \n         # Test getting the team document by path and UID\n-        team_by_path = api.content.get(\'/about/team\')\n+        team_by_path = api.content.get("/about/team")\n         team_by_uid = api.content.get(UID=self.team.UID())\n         self.assertEqual(self.team, team_by_path)\n         self.assertEqual(self.team, team_by_uid)\n \n         # Test getting the team document by path that has portal id included\n         team_by_path = api.content.get(\n-            \'/{}/about/team\'.format(self.portal.getId()),\n+            "/{}/about/team".format(self.portal.getId()),\n         )\n         self.assertEqual(self.team, team_by_path)\n \n         # Test getting an non-existing item by path and UID\n-        self.assertFalse(api.content.get(\'/spam/ham\'))\n-        self.assertFalse(api.content.get(UID=\'bacon\'))\n+        self.assertFalse(api.content.get("/spam/ham"))\n+        self.assertFalse(api.content.get(UID="bacon"))\n \n         # Test getting a non-existing subfolder by path\n-        self.assertFalse(api.content.get(\'/about/spam\'))\n+        self.assertFalse(api.content.get("/about/spam"))\n \n     def test_move_constraints(self):\n         """Test the constraints for moving content."""\n@@ -493,64 +492,66 @@ def test_move_constraints(self):\n \n     def test_move(self):\n         """Test moving of content."""\n-\n         container = self.portal\n \n         # Move contact to the same folder (basically a rename)\n-        nucontact = api.content.move(source=self.contact, id=\'nu-contact\')\n-        assert (container[\'about\'][\'nu-contact\']\n-                and container[\'about\'][\'nu-contact\'] == nucontact)\n-        assert \'contact\' not in container[\'about\'].keys()\n+        nucontact = api.content.move(source=self.contact, id="nu-contact")\n+        assert (\n+            container["about"]["nu-contact"]\n+            and container["about"]["nu-contact"] == nucontact\n+        )\n+        assert "contact" not in container["about"].keys()\n \n         # Move team page to portal root\n         team = api.content.move(source=self.team, target=container)\n-        assert container[\'team\'] and container[\'team\'] == team\n-        assert \'team\' not in container[\'about\'].keys()\n+        assert container["team"] and container["team"] == team\n+        assert "team" not in container["about"].keys()\n \n         # When moving objects we can change the id\n-        team = container[\'team\']\n+        team = container["team"]\n         ourteam = api.content.move(\n             source=team,\n             target=self.about,\n-            id=\'our-team\',\n+            id="our-team",\n+        )\n+        assert (\n+            container["about"]["our-team"] and container["about"]["our-team"] == ourteam\n         )\n-        assert (container[\'about\'][\'our-team\']\n-                and container[\'about\'][\'our-team\'] == ourteam)\n-        assert \'team\' not in container.keys()\n+        assert "team" not in container.keys()\n \n         # Test with safe_id option when moving content\n         api.content.create(\n-            container=self.about, type=\'Link\', id=\'link-to-blog\',\n+            container=self.about,\n+            type="Link",\n+            id="link-to-blog",\n         )\n         linktoblog1 = api.content.move(\n             source=self.blog,\n             target=self.about,\n-            id=\'link-to-blog\',\n+            id="link-to-blog",\n             safe_id=True,\n         )\n-        assert (container[\'about\'][\'link-to-blog-1\']\n-                and container[\'about\'][\'link-to-blog-1\'] == linktoblog1)\n-        assert \'link-to-blog\' not in container.keys()\n+        assert (\n+            container["about"]["link-to-blog-1"]\n+            and container["about"]["link-to-blog-1"] == linktoblog1\n+        )\n+        assert "link-to-blog" not in container.keys()\n \n-        api.content.move(source=self.conference, id=\'conference-renamed\')\n-        self.assertEqual(self.conference.id, \'conference-renamed\')\n+        api.content.move(source=self.conference, id="conference-renamed")\n+        self.assertEqual(self.conference.id, "conference-renamed")\n \n         # Move folderish object\n         about = api.content.move(\n             source=container.about,\n             target=container.events,\n         )\n-        assert (\n-            container[\'events\'][\'about\']\n-            and container[\'events\'][\'about\'] == about\n-        )\n+        assert container["events"]["about"] and container["events"]["about"] == about\n         self.verify_intids()\n \n     def test_move_no_move_if_target_is_source_parent(self):\n-        """Test that trying to move an object to its parent is a noop"""\n-\n+        """Test that trying to move an object to its parent is a noop."""\n         target = self.contact.aq_parent\n-        with mock.patch.object(target, \'manage_pasteObjects\'):\n+        with mock.patch.object(target, "manage_pasteObjects"):\n             api.content.move(\n                 source=self.contact,\n                 target=target,\n@@ -573,7 +574,6 @@ def test_rename_constraints(self):\n \n     def test_rename(self):\n         """Test renaming of content."""\n-\n         container = self.portal\n         sm = getGlobalSiteManager()\n         firedEvents = []\n@@ -581,15 +581,17 @@ def test_rename(self):\n         def recordEvent(event):\n             firedEvents.append(event.__class__)\n \n-        sm.registerHandler(recordEvent, (IObjectWillBeMovedEvent, ))\n-        sm.registerHandler(recordEvent, (IObjectMovedEvent, ))\n-        sm.registerHandler(recordEvent, (IObjectModifiedEvent, ))\n+        sm.registerHandler(recordEvent, (IObjectWillBeMovedEvent,))\n+        sm.registerHandler(recordEvent, (IObjectMovedEvent,))\n+        sm.registerHandler(recordEvent, (IObjectModifiedEvent,))\n \n         # Rename contact\n-        nucontact = api.content.rename(obj=self.contact, new_id=\'nu-contact\')\n-        assert (container[\'about\'][\'nu-contact\']\n-                and container[\'about\'][\'nu-contact\'] == nucontact)\n-        assert \'contact\' not in container[\'about\'].keys()\n+        nucontact = api.content.rename(obj=self.contact, new_id="nu-contact")\n+        assert (\n+            container["about"]["nu-contact"]\n+            and container["about"]["nu-contact"] == nucontact\n+        )\n+        assert "contact" not in container["about"].keys()\n \n         self.assertCountEqual(\n             firedEvents,\n@@ -599,41 +601,49 @@ def recordEvent(event):\n                 ContainerModifiedEvent,\n             ],\n         )\n-        sm.unregisterHandler(recordEvent, (IObjectWillBeMovedEvent, ))\n-        sm.unregisterHandler(recordEvent, (IObjectMovedEvent, ))\n-        sm.unregisterHandler(recordEvent, (IObjectModifiedEvent, ))\n+        sm.unregisterHandler(recordEvent, (IObjectWillBeMovedEvent,))\n+        sm.unregisterHandler(recordEvent, (IObjectMovedEvent,))\n+        sm.unregisterHandler(recordEvent, (IObjectModifiedEvent,))\n \n         # Test with safe_id option when moving content\n         api.content.create(\n-            container=self.about, type=\'Link\', id=\'link-to-blog\',\n+            container=self.about,\n+            type="Link",\n+            id="link-to-blog",\n         )\n         linktoblog1 = api.content.rename(\n-            obj=container[\'about\'][\'link-to-blog\'],\n-            new_id=\'link-to-blog\',\n+            obj=container["about"]["link-to-blog"],\n+            new_id="link-to-blog",\n             safe_id=True,\n         )\n-        assert (container[\'about\'][\'link-to-blog-1\']\n-                and container[\'about\'][\'link-to-blog-1\'] == linktoblog1)\n-        assert \'link-to-blog\' not in container.keys()\n+        assert (\n+            container["about"]["link-to-blog-1"]\n+            and container["about"]["link-to-blog-1"] == linktoblog1\n+        )\n+        assert "link-to-blog" not in container.keys()\n \n         # Rename to existing id\n         api.content.create(\n-            container=self.about, type=\'Link\', id=\'link-to-blog\',\n+            container=self.about,\n+            type="Link",\n+            id="link-to-blog",\n         )\n \n         with self.assertRaises(CopyError):\n             api.content.rename(\n-                obj=container[\'about\'][\'link-to-blog\'],\n-                new_id=\'link-to-blog-1\',\n+                obj=container["about"]["link-to-blog"],\n+                new_id="link-to-blog-1",\n             )\n         linktoblog11 = api.content.rename(\n-            obj=container[\'about\'][\'link-to-blog\'],\n-            new_id=\'link-to-blog-1\',\n+            obj=container["about"]["link-to-blog"],\n+            new_id="link-to-blog-1",\n             safe_id=True,\n         )\n-        assert (container[\'about\'][\'link-to-blog-1-1\']\n-                and container[\'about\'][\'link-to-blog-1-1\'] == linktoblog11)\n-        assert \'link-to-blog\' not in container.keys()\n+        assert (\n+            container["about"]["link-to-blog-1-1"]\n+            and container["about"]["link-to-blog-1-1"] == linktoblog11\n+        )\n+        assert "link-to-blog" not in container.keys()\n \n     def test_rename_same_id(self):\n         api.content.rename(obj=self.contact, new_id=self.contact.getId())\n@@ -643,18 +653,18 @@ def test_rename_same_folder(self):\n         # already an existing folderish item with that id, it should choose\n         # a new name.\n \n-        events = self.portal[\'events\']\n-        about = self.portal[\'about\']\n+        events = self.portal["events"]\n+        about = self.portal["about"]\n         api.content.rename(\n             obj=events,\n-            new_id=\'about\',\n+            new_id="about",\n             safe_id=True,\n         )\n \n-        assert self.portal[\'about\']\n-        assert self.portal[\'about-1\']\n-        assert self.portal[\'about\'].aq_base is about.aq_base\n-        assert self.portal[\'about-1\'].aq_base is events.aq_base\n+        assert self.portal["about"]\n+        assert self.portal["about-1"]\n+        assert self.portal["about"].aq_base is about.aq_base\n+        assert self.portal["about-1"].aq_base is events.aq_base\n \n     def test_copy_constraints(self):\n         """Test the constraints for moving content."""\n@@ -676,41 +686,41 @@ def test_copy(self):\n \n         # Copy team page to portal root\n         team = api.content.copy(source=self.team, target=container)\n-        assert container[\'team\'] and container[\'team\'] == team\n+        assert container["team"] and container["team"] == team\n         assert (\n-            container[\'about\'][\'team\']\n-            and container[\'about\'][\'team\'] != team\n+            container["about"]["team"] and container["about"]["team"] != team\n         )  # old content still available\n \n         # When copying objects we can change the id\n         ourteam = api.content.copy(\n             source=self.team,\n             target=self.about,\n-            id=\'our-team\',\n+            id="our-team",\n         )\n-        assert(\n-            container[\'about\'][\'our-team\']\n-            and container[\'about\'][\'our-team\'] == ourteam\n+        assert (\n+            container["about"]["our-team"] and container["about"]["our-team"] == ourteam\n         )\n \n         # When copying whithout target parameter should take source parent\n-        api.content.copy(source=self.team, id=\'our-team-no-target\')\n-        assert container[\'about\'][\'our-team-no-target\']\n+        api.content.copy(source=self.team, id="our-team-no-target")\n+        assert container["about"]["our-team-no-target"]\n \n         # Test the safe_id option when moving content\n         api.content.create(\n-            container=self.about, type=\'Link\', id=\'link-to-blog\',\n+            container=self.about,\n+            type="Link",\n+            id="link-to-blog",\n         )\n \n         linktoblog1 = api.content.copy(\n             source=self.blog,\n             target=self.about,\n-            id=\'link-to-blog\',\n+            id="link-to-blog",\n             safe_id=True,\n         )\n-        assert(\n-            container[\'about\'][\'link-to-blog-1\']\n-            and container[\'about\'][\'link-to-blog-1\'] == linktoblog1\n+        assert (\n+            container["about"]["link-to-blog-1"]\n+            and container["about"]["link-to-blog-1"] == linktoblog1\n         )\n \n         # Copy folderish content under target\n@@ -718,28 +728,29 @@ def test_copy(self):\n             source=container.about,\n             target=container.events,\n         )\n-        assert(\n-            container[\'events\'][\'about\']\n-            and container[\'events\'][\'about\'] == about\n-        )\n+        assert container["events"]["about"] and container["events"]["about"] == about\n \n         # When copying with safe_id=True, the prior created item should not be\n         # renamed, and the copied item should have a sane postfix\n \n         # Create a products folder\n         products = api.content.create(\n-            type=\'Folder\', id=\'products\', container=self.portal,\n+            type="Folder",\n+            id="products",\n+            container=self.portal,\n         )\n \n         # Create a item inside the products folder\n         item = api.content.create(\n-            container=products, type=\'Document\', id=\'item\',\n+            container=products,\n+            type="Document",\n+            id="item",\n         )\n \n-        api.content.copy(source=item, id=\'item\', safe_id=True)\n+        api.content.copy(source=item, id="item", safe_id=True)\n \n-        assert container[\'products\'][\'item-1\']\n-        assert container[\'products\'][\'item\']\n+        assert container["products"]["item-1"]\n+        assert container["products"]["item"]\n \n         # When copying with safe_id=True, the created bargain with the id=item\n         # should not be renamed, and the item copied from the products folder\n@@ -748,34 +759,35 @@ def test_copy(self):\n \n         # Create a second folder named bargains\n         bargains = api.content.create(\n-            type=\'Folder\',\n-            id=\'bargains\',\n+            type="Folder",\n+            id="bargains",\n             container=self.portal,\n         )\n \n         # Create a bargain inside the bargains folder with the id="item"\n         bargain = api.content.create(\n-            type=\'Document\',\n-            id=\'item\',\n+            type="Document",\n+            id="item",\n             container=bargains,\n         )\n         api.content.copy(\n             source=item,\n             target=bargains,\n-            id=\'item\',\n+            id="item",\n             safe_id=True,\n         )\n \n-        assert container[\'bargains\'][\'item-1\']\n-        assert container[\'bargains\'][\'item\']\n-        assert container[\'bargains\'][\'item\'].aq_base is bargain.aq_base\n-        assert container[\'products\'][\'item\']\n+        assert container["bargains"]["item-1"]\n+        assert container["bargains"]["item"]\n+        assert container["bargains"]["item"].aq_base is bargain.aq_base\n+        assert container["products"]["item"]\n \n     def test_copy_same_id(self):\n         obj = self.contact\n \n         # Using the same id should fail\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.content.copy(obj, obj.__parent__, obj.id)\n \n@@ -787,6 +799,7 @@ def test_delete_constraints(self):\n \n         # When no parameters are given an error is raised\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.content.delete()\n \n@@ -797,28 +810,29 @@ def test_delete(self):\n \n         # The content item must be given as parameter\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.content.delete()\n \n         # Delete the contact page\n         api.content.delete(self.contact)\n-        self.assertNotIn(\'contact\', container[\'about\'].keys())\n+        self.assertNotIn("contact", container["about"].keys())\n \n     def test_delete_multiple(self):\n         """Test deleting multiple content items."""\n \n         container = self.portal\n-        api.content.copy(source=container[\'about\'], target=container)\n-        api.content.copy(source=container[\'about\'], target=container[\'events\'])\n+        api.content.copy(source=container["about"], target=container)\n+        api.content.copy(source=container["about"], target=container["events"])\n \n         api.content.delete(\n             objects=[\n-                container[\'copy_of_about\'],\n-                container[\'events\'][\'about\'],\n+                container["copy_of_about"],\n+                container["events"]["about"],\n             ],\n         )\n-        self.assertNotIn(\'copy_of_about\', container)\n-        self.assertNotIn(\'about\', container[\'events\'])\n+        self.assertNotIn("copy_of_about", container)\n+        self.assertNotIn("about", container["events"])\n \n     def test_delete_no_objs(self):\n         # Check that we allow passing in an empty list of objects.\n@@ -829,7 +843,7 @@ def test_delete_ignore_linkintegrity(self):\n         self._set_text(self.team, \'<a href="contact">contact</a>\')\n         # Delete the contact page\n         api.content.delete(self.contact, check_linkintegrity=False)\n-        self.assertNotIn(\'contact\', self.portal[\'about\'].keys())\n+        self.assertNotIn("contact", self.portal["about"].keys())\n \n     def test_delete_check_linkintegrity(self):\n         """Test deleting a content item with a link pointed at it."""\n@@ -837,7 +851,7 @@ def test_delete_check_linkintegrity(self):\n         # Delete the contact page\n         with self.assertRaises(LinkIntegrityNotificationException):\n             api.content.delete(self.contact)\n-        self.assertIn(\'contact\', self.portal[\'about\'].keys())\n+        self.assertIn("contact", self.portal["about"].keys())\n \n     def test_delete_multiple_check_linkintegrity(self):\n         """Test deleting multiple item with linkintegrity-breaches."""\n@@ -846,8 +860,8 @@ def test_delete_multiple_check_linkintegrity(self):\n         # Delete the contact page\n         with self.assertRaises(LinkIntegrityNotificationException):\n             api.content.delete(objects=[self.blog, self.contact])\n-        self.assertIn(\'contact\', self.portal[\'about\'].keys())\n-        self.assertIn(\'blog\', self.portal.keys())\n+        self.assertIn("contact", self.portal["about"].keys())\n+        self.assertIn("blog", self.portal.keys())\n \n     def test_delete_multiple_ignore_linkintegrity(self):\n         """Test deleting multiple items ignoring linkintegrity-breaches."""\n@@ -858,8 +872,8 @@ def test_delete_multiple_ignore_linkintegrity(self):\n             objects=[self.blog, self.contact],\n             check_linkintegrity=False,\n         )\n-        self.assertNotIn(\'contact\', self.portal[\'about\'].keys())\n-        self.assertNotIn(\'blog\', self.portal.keys())\n+        self.assertNotIn("contact", self.portal["about"].keys())\n+        self.assertNotIn("blog", self.portal.keys())\n \n     def test_delete_with_internal_breaches(self):\n         """Test deleting multiple with internal linkintegrity breaches."""\n@@ -868,9 +882,9 @@ def test_delete_with_internal_breaches(self):\n         # Deleting pages with unresolved breaches throws an exception\n         with self.assertRaises(LinkIntegrityNotificationException):\n             api.content.delete(objects=[self.blog, self.about])\n-        self.assertIn(\'about\', self.portal.keys())\n-        self.assertIn(\'blog\', self.portal.keys())\n-        self.assertIn(\'training\', self.portal[\'events\'].keys())\n+        self.assertIn("about", self.portal.keys())\n+        self.assertIn("blog", self.portal.keys())\n+        self.assertIn("training", self.portal["events"].keys())\n \n     def test_delete_with_resolved_internal_breaches(self):\n         """Test deleting multiple with internal linkintegrity breaches."""\n@@ -878,19 +892,19 @@ def test_delete_with_resolved_internal_breaches(self):\n         self._set_text(self.training, \'<a href="../blog">contact</a>\')\n         # Deleting pages with resolved breaches throws no exception\n         api.content.delete(objects=[self.blog, self.training, self.about])\n-        self.assertNotIn(\'about\', self.portal.keys())\n-        self.assertNotIn(\'blog\', self.portal.keys())\n-        self.assertNotIn(\'training\', self.portal[\'events\'].keys())\n+        self.assertNotIn("about", self.portal.keys())\n+        self.assertNotIn("blog", self.portal.keys())\n+        self.assertNotIn("training", self.portal["events"].keys())\n \n     def _set_text(self, obj, text):\n-        obj.text = RichTextValue(text, \'text/html\', \'text/x-html-safe\')\n+        obj.text = RichTextValue(text, "text/html", "text/x-html-safe")\n         modified(obj)\n \n     def test_find(self):\n         """Test the finding of content in various ways."""\n \n         # Find documents\n-        documents = api.content.find(portal_type=\'Document\')\n+        documents = api.content.find(portal_type="Document")\n         self.assertEqual(len(documents), 2)\n \n     def test_find_empty_query(self):\n@@ -903,13 +917,13 @@ def test_find_invalid_indexes(self):\n         """Make sure invalid indexes yield no results"""\n \n         # All invalid indexes yields no results\n-        documents = api.content.find(invalid_index=\'henk\')\n+        documents = api.content.find(invalid_index="henk")\n         self.assertEqual(len(documents), 0)\n \n         # But at least one valid index does.\n         documents = api.content.find(\n-            invalid_index=\'henk\',\n-            portal_type=\'Document\',\n+            invalid_index="henk",\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 2)\n \n@@ -917,53 +931,53 @@ def test_find_context(self):\n         # Find documents in context\n         documents = api.content.find(\n             context=self.portal.about,\n-            portal_type=\'Document\',\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 2)\n         documents = api.content.find(\n             context=self.portal.events,\n-            portal_type=\'Document\',\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 0)\n \n     def test_find_depth(self):\n         # Limit search depth from portal root\n-        documents = api.content.find(depth=2, portal_type=\'Document\')\n+        documents = api.content.find(depth=2, portal_type="Document")\n         self.assertEqual(len(documents), 2)\n-        documents = api.content.find(depth=1, portal_type=\'Document\')\n+        documents = api.content.find(depth=1, portal_type="Document")\n         self.assertEqual(len(documents), 0)\n \n         # Limit search depth with explicit context\n         documents = api.content.find(\n             context=self.portal.about,\n             depth=1,\n-            portal_type=\'Document\',\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 2)\n         documents = api.content.find(\n             context=self.portal.about,\n             depth=0,\n-            portal_type=\'Document\',\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 0)\n \n         # Limit search depth with explicit path\n         documents = api.content.find(\n-            path=\'/\'.join(self.portal.about.getPhysicalPath()),\n+            path="/".join(self.portal.about.getPhysicalPath()),\n             depth=1,\n-            portal_type=\'Document\',\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 2)\n         documents = api.content.find(\n-            path=\'/\'.join(self.portal.about.getPhysicalPath()),\n+            path="/".join(self.portal.about.getPhysicalPath()),\n             depth=0,\n-            portal_type=\'Document\',\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 0)\n         documents = api.content.find(\n-            path=\'/\'.join(self.portal.events.getPhysicalPath()),\n+            path="/".join(self.portal.events.getPhysicalPath()),\n             depth=1,\n-            portal_type=\'Document\',\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 0)\n \n@@ -982,16 +996,16 @@ def test_find_interface_dict(self):\n         # Find documents by interface combined with \'and\'\n \n         alsoProvides(self.portal.events, INavigationRoot)\n-        self.portal.events.reindexObject(idxs=[\'object_provides\'])\n+        self.portal.events.reindexObject(idxs=["object_provides"])\n \n         # standard catalog query using identifiers\n         brains = api.content.find(\n             object_provides={\n-                \'query\': [\n+                "query": [\n                     IContentish.__identifier__,\n                     INavigationRoot.__identifier__,\n                 ],\n-                \'operator\': \'and\',\n+                "operator": "and",\n             },\n         )\n         self.assertEqual(len(brains), 1)\n@@ -999,112 +1013,111 @@ def test_find_interface_dict(self):\n         # plone.api query using interfaces\n         brains = api.content.find(\n             object_provides={\n-                \'query\': [IContentish, INavigationRoot],\n-                \'operator\': \'and\',\n+                "query": [IContentish, INavigationRoot],\n+                "operator": "and",\n             },\n         )\n         self.assertEqual(len(brains), 1)\n \n     def test_find_interface_dict__include_not_query(self):\n-        """Check if not query in object_provides is functional.\n-        """\n+        """Check if not query in object_provides is functional."""\n \n         brains_all = api.content.find(\n-            object_provides={\'query\': IContentish.__identifier__},\n+            object_provides={"query": IContentish.__identifier__},\n         )\n \n         alsoProvides(self.portal.events, INavigationRoot)\n-        self.portal.events.reindexObject(idxs=[\'object_provides\'])\n+        self.portal.events.reindexObject(idxs=["object_provides"])\n \n         brains = api.content.find(\n             object_provides={\n-                \'query\': IContentish.__identifier__,\n-                \'not\': INavigationRoot.__identifier__,\n+                "query": IContentish.__identifier__,\n+                "not": INavigationRoot.__identifier__,\n             },\n         )\n \n         self.assertEqual(len(brains_all) - len(brains), 1)\n \n     def test_find_interface_dict__all_options(self):\n-        """ Check for all options in a object_provides query are correctly\n+        """Check for all options in a object_provides query are correctly\n         transformed.\n         """\n         parser = _parse_object_provides_query\n \n         self.assertDictEqual(\n-            parser({\'query\': IContentish}),\n-            {\'query\': [IContentish.__identifier__], \'operator\': \'or\'},\n+            parser({"query": IContentish}),\n+            {"query": [IContentish.__identifier__], "operator": "or"},\n         )\n \n         self.assertDictEqual(\n             parser(\n                 {\n-                    \'query\': [IContentish, INavigationRoot.__identifier__],\n-                    \'operator\': \'and\',\n+                    "query": [IContentish, INavigationRoot.__identifier__],\n+                    "operator": "and",\n                 },\n             ),\n             {\n-                \'query\': [IContentish.__identifier__, INavigationRoot.__identifier__],\n-                \'operator\': \'and\',\n+                "query": [IContentish.__identifier__, INavigationRoot.__identifier__],\n+                "operator": "and",\n             },\n         )\n \n         self.assertDictEqual(\n-            parser({\'not\': IContentish}),\n-            {\'not\': [IContentish.__identifier__]},\n+            parser({"not": IContentish}),\n+            {"not": [IContentish.__identifier__]},\n         )\n \n         self.assertDictEqual(\n-            parser({\'not\': [IContentish, INavigationRoot.__identifier__]}),\n-            {\'not\': [IContentish.__identifier__, INavigationRoot.__identifier__]},\n+            parser({"not": [IContentish, INavigationRoot.__identifier__]}),\n+            {"not": [IContentish.__identifier__, INavigationRoot.__identifier__]},\n         )\n \n         self.assertDictEqual(\n-            parser({\'not\': IContentish}),\n-            {\'not\': [IContentish.__identifier__]},\n+            parser({"not": IContentish}),\n+            {"not": [IContentish.__identifier__]},\n         )\n \n         self.assertDictEqual(\n-            parser({\'query\': IContentish, \'operator\': \'and\', \'not\': INavigationRoot}),\n+            parser({"query": IContentish, "operator": "and", "not": INavigationRoot}),\n             {\n-                \'query\': [IContentish.__identifier__],\n-                \'operator\': \'and\',\n-                \'not\': [INavigationRoot.__identifier__],\n+                "query": [IContentish.__identifier__],\n+                "operator": "and",\n+                "not": [INavigationRoot.__identifier__],\n             },\n         )\n \n     def test_find_dict(self):\n         # Pass arguments using dict\n-        path = \'/\'.join(self.portal.about.getPhysicalPath())\n+        path = "/".join(self.portal.about.getPhysicalPath())\n \n         query = {\n-            \'portal_type\': \'Document\',\n-            \'path\': {\'query\': path, \'depth\': 2},\n+            "portal_type": "Document",\n+            "path": {"query": path, "depth": 2},\n         }\n         documents = api.content.find(**query)\n         self.assertEqual(len(documents), 2)\n \n         query = {\n-            \'portal_type\': \'Document\',\n-            \'path\': {\'query\': path, \'depth\': 0},\n+            "portal_type": "Document",\n+            "path": {"query": path, "depth": 0},\n         }\n         documents = api.content.find(**query)\n         self.assertEqual(len(documents), 0)\n \n         # This is a bit awkward, but it is nice if this does not crash.\n         query = {\n-            \'depth\': 2,\n-            \'portal_type\': \'Document\',\n-            \'path\': {\'query\': path},\n+            "depth": 2,\n+            "portal_type": "Document",\n+            "path": {"query": path},\n         }\n         documents = api.content.find(**query)\n         self.assertEqual(len(documents), 2)\n \n-        path = \'/\'.join(self.portal.events.getPhysicalPath())\n+        path = "/".join(self.portal.events.getPhysicalPath())\n         query = {\n-            \'depth\': 2,\n-            \'portal_type\': \'Document\',\n-            \'path\': {\'query\': path},\n+            "depth": 2,\n+            "portal_type": "Document",\n+            "path": {"query": path},\n         }\n         documents = api.content.find(**query)\n         self.assertEqual(len(documents), 0)\n@@ -1117,75 +1130,76 @@ def test_find_parse_object_provides_query(self):\n         self.assertDictEqual(\n             parse(IContentish),\n             {\n-                \'query\': [IContentish.__identifier__],\n-                \'operator\': \'or\',\n+                "query": [IContentish.__identifier__],\n+                "operator": "or",\n             },\n         )\n         # single identifier\n         self.assertDictEqual(\n             parse(IContentish.__identifier__),\n             {\n-                \'query\': [IContentish.__identifier__],\n-                \'operator\': \'or\',\n+                "query": [IContentish.__identifier__],\n+                "operator": "or",\n             },\n         )\n         # multiple interfaces/identifiers (mixed as list)\n         self.assertDictEqual(\n             parse([INavigationRoot, IContentish.__identifier__]),\n             {\n-                \'query\': [\n+                "query": [\n                     INavigationRoot.__identifier__,\n                     IContentish.__identifier__,\n                 ],\n-                \'operator\': \'or\',\n+                "operator": "or",\n             },\n         )\n         # multiple interfaces/identifiers (mixed as tuple)\n         self.assertDictEqual(\n             parse((INavigationRoot, IContentish.__identifier__)),\n             {\n-                \'query\': [\n+                "query": [\n                     INavigationRoot.__identifier__,\n                     IContentish.__identifier__,\n                 ],\n-                \'operator\': \'or\',\n+                "operator": "or",\n             },\n         )\n         # full blown query - interfaces/identifiers mixed\n         self.assertDictEqual(\n-            parse({\n-                \'query\': [INavigationRoot, IContentish.__identifier__],\n-                \'operator\': \'and\',\n-            }),\n+            parse(\n+                {\n+                    "query": [INavigationRoot, IContentish.__identifier__],\n+                    "operator": "and",\n+                }\n+            ),\n             {\n-                \'query\': [\n+                "query": [\n                     INavigationRoot.__identifier__,\n                     IContentish.__identifier__,\n                 ],\n-                \'operator\': \'and\',\n+                "operator": "and",\n             },\n         )\n \n     def test_get_state(self):\n         """Test retrieving the workflow state of a content item."""\n-\n         # This should fail because an content item is mandatory\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.content.get_state()\n \n         review_state = api.content.get_state(obj=self.blog)\n-        self.assertEqual(review_state, \'private\')\n+        self.assertEqual(review_state, "private")\n \n     def test_get_state_default_value(self):\n-        """Test passing in a default value.\n-        """\n+        """Test passing in a default value."""\n         # A WorkflowException is raise if no workflow is defined for the obj.\n         # This is normally the case for Images and Files.\n         with self.assertRaises(WorkflowException):\n             review_state = api.content.get_state(obj=self.image)\n \n-        default = \'my default value\'\n+        default = "my default value"\n         review_state = api.content.get_state(obj=self.image, default=default)\n         review_state is default\n \n@@ -1205,81 +1219,82 @@ def test_transition(self):\n             api.content.transition(obj=mock.Mock())\n \n         with self.assertRaises(MissingParameterError):\n-            api.content.transition(transition=\'publish\')\n+            api.content.transition(transition="publish")\n \n         with self.assertRaises(InvalidParameterError):\n             api.content.transition(\n                 obj=mock.Mock(),\n-                transition=\'publish\',\n-                to_state=\'published\',\n+                transition="publish",\n+                to_state="published",\n             )\n \n-        api.content.transition(obj=self.blog, transition=\'publish\')\n+        api.content.transition(obj=self.blog, transition="publish")\n         review_state = api.content.get_state(obj=self.blog)\n-        self.assertEqual(review_state, \'published\')\n+        self.assertEqual(review_state, "published")\n \n         # This should fail because the transition doesn\'t exist\n         with self.assertRaises(InvalidParameterError) as cm:\n             api.content.transition(\n-                transition=\'foo\', obj=self.blog,\n+                transition="foo",\n+                obj=self.blog,\n             )\n \n         self.maxDiff = None  # to see assert diff\n         self.assertMultiLineEqual(\n             str(cm.exception),\n             "Invalid transition \'foo\'.\\n"\n-            \'Valid transitions are:\\n\'\n-            \'reject\\n\'\n-            \'retract\',\n+            "Valid transitions are:\\n"\n+            "reject\\n"\n+            "retract",\n         )\n \n         # change the workflow of a document so that there is no transition\n         # that goes directly from one state to another\n-        portal_workflow = api.portal.get_tool(\'portal_workflow\')\n-        portal_workflow._chains_by_type[\'File\'] = tuple(\n-            [\'intranet_workflow\'],\n+        portal_workflow = api.portal.get_tool("portal_workflow")\n+        portal_workflow._chains_by_type["File"] = tuple(\n+            ["intranet_workflow"],\n         )\n         test_file = api.content.create(\n             container=api.portal.get(),\n-            type=\'File\',\n-            id=\'test-file\',\n+            type="File",\n+            id="test-file",\n         )\n         self.assertEqual(\n             api.content.get_state(test_file),\n-            \'internal\',\n+            "internal",\n         )\n         api.content.transition(\n             obj=test_file,\n-            transition=\'hide\',\n+            transition="hide",\n         )\n \n         # the following transition must move through the internal state\n         api.content.transition(\n             obj=test_file,\n-            to_state=\'internally_published\',\n+            to_state="internally_published",\n         )\n         self.assertEqual(\n             api.content.get_state(test_file),\n-            \'internally_published\',\n+            "internally_published",\n         )\n \n     def test_diable_roles_acquisition(self):\n-        """ Test disabling local roles acquisition.\n-        """\n+        """Test disabling local roles acquisition."""\n         # This should fail because an content item is mandatory\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.content.disable_roles_acquisition()\n \n         api.content.disable_roles_acquisition(obj=self.blog)\n-        blog_ac_flag = getattr(self.blog, \'__ac_local_roles_block__\', None)\n+        blog_ac_flag = getattr(self.blog, "__ac_local_roles_block__", None)\n         self.assertTrue(blog_ac_flag)\n \n     def test_enable_roles_acquisition(self):\n-        """ Test enabling local roles acquisition.\n-        """\n+        """Test enabling local roles acquisition."""\n         # This should fail because an content item is mandatory\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.content.enable_roles_acquisition()\n \n@@ -1288,13 +1303,14 @@ def test_enable_roles_acquisition(self):\n         self.blog.__ac_local_roles_block__ = 1\n \n         api.content.enable_roles_acquisition(obj=self.blog)\n-        blog_ac_flag = getattr(self.blog, \'__ac_local_roles_block__\', None)\n+        blog_ac_flag = getattr(self.blog, "__ac_local_roles_block__", None)\n         self.assertFalse(blog_ac_flag)\n \n     def test_get_view_constraints(self):\n         """Test the constraints for deleting content."""\n         from plone.api.exc import MissingParameterError\n-        request = self.layer[\'request\']\n+\n+        request = self.layer["request"]\n \n         # When no parameters are given an error is raised\n         with self.assertRaises(MissingParameterError):\n@@ -1310,38 +1326,38 @@ def test_get_view_constraints(self):\n         # context is required\n         with self.assertRaises(MissingParameterError):\n             api.content.get_view(\n-                name=\'plone\',\n+                name="plone",\n                 request=request,\n             )\n \n         # request is required\n         with self.assertRaises(MissingParameterError):\n             api.content.get_view(\n-                name=\'plone\',\n+                name="plone",\n                 context=self.blog,\n             )\n \n     def test_get_view(self):\n         """Test the view."""\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n \n         view = api.content.get_view(\n-            name=\'plone\',\n+            name="plone",\n             context=self.blog,\n             request=request,\n         )\n         self.assertEqual(aq_base(view.context), aq_base(self.blog))\n-        self.assertEqual(view.__name__, \'plone\')\n-        self.assertTrue(hasattr(view, \'toLocalizedTime\'))\n-        self.assertTrue(hasattr(view, \'isDefaultPageInFolder\'))\n+        self.assertEqual(view.__name__, "plone")\n+        self.assertTrue(hasattr(view, "toLocalizedTime"))\n+        self.assertTrue(hasattr(view, "isDefaultPageInFolder"))\n \n         # Try another standard view.\n         view = api.content.get_view(\n-            name=\'plone_context_state\',\n+            name="plone_context_state",\n             context=self.blog,\n             request=request,\n         )\n-        self.assertEqual(view.__name__, \'plone_context_state\')\n+        self.assertEqual(view.__name__, "plone_context_state")\n         self.assertEqual(aq_base(view.canonical_object()), aq_base(self.blog))\n \n     def test_get_uuid(self):\n@@ -1358,8 +1374,8 @@ def test_get_uuid(self):\n \n         # Set the UUID and compare it with the one we get from our function\n         # Dexterity\n-        container.invokeFactory(\'Dexterity Item\', \'test-dexterity\')\n-        item = container[\'test-dexterity\']\n+        container.invokeFactory("Dexterity Item", "test-dexterity")\n+        item = container["test-dexterity"]\n         uuid1 = generator()\n         IMutableUUID(item).set(uuid1)\n \n@@ -1369,12 +1385,12 @@ def test_get_uuid(self):\n \n     def test_get_view_view_not_found(self):\n         """Test that error msg lists available views if a view is not found."""\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         from plone.api.exc import InvalidParameterError\n \n         with self.assertRaises(InvalidParameterError) as cm:\n             api.content.get_view(\n-                name=\'foo\',\n+                name="foo",\n                 context=self.blog,\n                 request=request,\n             )\n@@ -1382,9 +1398,7 @@ def test_get_view_view_not_found(self):\n         self.maxDiff = None  # to see assert diff\n         self.assertTrue(\n             str(cm.exception).startswith(\n-                "Cannot find a view with name \'foo\'.\\n"\n-                \'Available views are:\\n\'\n-                \'\\n\',\n+                "Cannot find a view with name \'foo\'.\\n" "Available views are:\\n" "\\n",\n             ),\n         )\n \n@@ -1392,21 +1406,21 @@ def test_get_view_view_not_found(self):\n         # Test against only these rather than the full list. Otherwise, this\n         # test has to maintain an up-to-date list of every view in Plone.\n         should_be_theres = (\n-            \'adapter\',\n-            \'authenticator\',\n-            \'checkDocument\',\n-            \'get_macros\',\n-            \'history\',\n-            \'plone\',\n-            \'plone_tools\',\n-            \'resource\',\n-            \'search\',\n-            \'sharing\',\n-            \'skin\',\n-            \'text-transform\',\n-            \'uuid\',\n-            \'view\',\n+            "adapter",\n+            "authenticator",\n+            "checkDocument",\n+            "get_macros",\n+            "history",\n+            "plone",\n+            "plone_tools",\n+            "resource",\n+            "search",\n+            "sharing",\n+            "skin",\n+            "text-transform",\n+            "uuid",\n+            "view",\n         )\n \n         for should_be_there in should_be_theres:\n-            self.assertIn((should_be_there + \'\\n\'), str(cm.exception))\n+            self.assertIn((should_be_there + "\\n"), str(cm.exception))\ndiff --git a/src/plone/api/tests/test_doctests.py b/src/plone/api/tests/test_doctests.py\nindex 4ad9fd0c..26a2fb18 100644\n--- a/src/plone/api/tests/test_doctests.py\n+++ b/src/plone/api/tests/test_doctests.py\n@@ -8,12 +8,12 @@\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.testing import layered\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from zope.testing import renormalizing\n \n import doctest\n-import manuel.codeblock\n import manuel.doctest\n+import manuel.myst.codeblock\n import manuel.testing\n import os\n import pkg_resources\n@@ -24,7 +24,7 @@\n logger = getLogger(__name__)\n \n try:\n-    pkg_resources.get_distribution(\'plone.app.contenttypes\')\n+    pkg_resources.get_distribution("plone.app.contenttypes")\n except pkg_resources.DistributionNotFound:\n     HAS_PA_CONTENTTYPES = False\n else:\n@@ -37,45 +37,52 @@\n     | doctest.REPORT_ONLY_FIRST_FAILURE\n )\n \n-CHECKER = renormalizing.RENormalizing([\n-    # Normalize the generated UUID values to always compare equal.\n-    (re.compile(\n-        r\'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\'),\n-        \'<UUID>\',\n-     ),\n-])\n+CHECKER = renormalizing.RENormalizing(\n+    [\n+        # Normalize the generated UUID values to always compare equal.\n+        (\n+            re.compile(r"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"),\n+            "<UUID>",\n+        ),\n+    ]\n+)\n \n \n def setUp(self):  # pragma: no cover\n     """Shared test environment set-up, ran before every test."""\n-    layer = self.globs[\'layer\']\n+    layer = self.globs["layer"]\n     # Update global variables within the tests.\n-    self.globs.update({\n-        \'portal\': layer[\'portal\'],\n-        \'request\': layer[\'request\'],\n-        \'browser\': Browser(layer[\'app\']),\n-        \'TEST_USER_NAME\': TEST_USER_NAME,\n-        \'TEST_USER_PASSWORD\': TEST_USER_PASSWORD,\n-        \'self\': self,\n-    })\n-\n-    portal = self.globs[\'portal\']\n-    browser = self.globs[\'browser\']\n+    self.globs.update(\n+        {\n+            "portal": layer["portal"],\n+            "request": layer["request"],\n+            "browser": Browser(layer["app"]),\n+            "TEST_USER_NAME": TEST_USER_NAME,\n+            "TEST_USER_PASSWORD": TEST_USER_PASSWORD,\n+            "self": self,\n+        }\n+    )\n+\n+    portal = self.globs["portal"]\n+    browser = self.globs["browser"]\n \n     browser.handleErrors = True\n     portal.error_log._ignored_exceptions = ()\n \n-    setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+    setRoles(portal, TEST_USER_ID, ["Manager"])\n \n-    applyProfile(portal, \'Products.CMFPlone:plone\')\n+    applyProfile(portal, "Products.CMFPlone:plone")\n \n     # Plone 5 support\n     if HAS_PA_CONTENTTYPES:\n-        applyProfile(portal, \'plone.app.contenttypes:default\')\n+        applyProfile(portal, "plone.app.contenttypes:default")\n \n \n def DocFileSuite(\n-    testfile, flags=FLAGS, setUp=setUp, layer=PLONE_INTEGRATION_TESTING,\n+    testfile,\n+    flags=FLAGS,\n+    setUp=setUp,\n+    layer=PLONE_INTEGRATION_TESTING,\n ):\n     """Returns a test suite configured with a test layer.\n \n@@ -94,7 +101,7 @@ def DocFileSuite(\n     :rtype: `manuel.testing.TestSuite`\n     """\n     m = manuel.doctest.Manuel(optionflags=flags, checker=CHECKER)\n-    m += manuel.codeblock.Manuel()\n+    m += manuel.myst.codeblock.Manuel()\n \n     return layered(\n         manuel.testing.TestSuite(\n@@ -109,7 +116,7 @@ def DocFileSuite(\n \n def test_suite():\n     """Find .rst files and test code examples in them."""\n-    path = \'doctests\'\n+    path = "doctests"\n     doctests = []\n     docs_path = os.path.join(os.path.dirname(__file__), path)\n \n@@ -118,7 +125,7 @@ def test_suite():\n             doctests.append(DocFileSuite(os.path.join(path, filename)))\n         except OSError:\n             logger.warning(\n-                \'test_doctest.py skipping {file}\'.format(file=filename),\n+                "test_doctest.py skipping {file}".format(file=filename),\n             )\n \n     return unittest.TestSuite(doctests)\ndiff --git a/src/plone/api/tests/test_env.py b/src/plone/api/tests/test_env.py\nindex f6402a99..28e632f9 100644\n--- a/src/plone/api/tests/test_env.py\n+++ b/src/plone/api/tests/test_env.py\n@@ -15,16 +15,16 @@ class ExampleException(Exception):\n \n \n role_mapping = (\n-    (\'ppp\', (\'Manager\', \'VIP\', \'Member\')),\n-    (\'qqq\', (\'Manager\', \'VIP\')),\n-    (\'rrr\', (\'Manager\')),\n+    ("ppp", ("Manager", "VIP", "Member")),\n+    ("qqq", ("Manager", "VIP")),\n+    ("rrr", ("Manager")),\n )\n \n # Version of Zope and Plone should be something like\n # \'X.Y\' or \'X.Y.Z\' or \'X.Y.Z.A\'\n # It could also include a package status id (Alpha, Beta or RC).\n # When run against coredev, we may have a .devN suffix as well.\n-version_regexp = r\'^(\\d+(\\.\\d+){1,3})(a\\d+|b\\d+|rc\\d+)?(\\.dev\\d)?$\'\n+version_regexp = r"^(\\d+(\\.\\d+){1,3})(a\\d+|b\\d+|rc\\d+)?(\\.dev\\d)?$"\n \n \n class HasProtectedMethods(SimpleItem):\n@@ -38,15 +38,15 @@ def __init__(self, id):\n     def public_method(self):\n         pass\n \n-    @security.protected(\'ppp\')\n+    @security.protected("ppp")\n     def pp_method(self):\n         pass\n \n-    @security.protected(\'qqq\')\n+    @security.protected("qqq")\n     def qq_method(self):\n         pass\n \n-    @security.protected(\'rrr\')\n+    @security.protected("rrr")\n     def rr_method(self):\n         pass\n \n@@ -65,8 +65,8 @@ class TestPloneApiEnv(unittest.TestCase):\n \n     def setUp(self):\n         """Shared test environment set-up, ran before every test."""\n-        portal = self.portal = self.layer[\'portal\']\n-        portal._setObject(\'hpm\', HasProtectedMethods(\'hpm\'))\n+        portal = self.portal = self.layer["portal"]\n+        portal._setObject("hpm", HasProtectedMethods("hpm"))\n \n         # This isn\'t necessary to the unit tests, it makes debugging them\n         # easier when they go wrong. Like "verbose-security on" in zope.conf\n@@ -76,37 +76,37 @@ def setUp(self):\n         # Roles need to be created by name before we can assign permissions\n         # to them or grant them to users.\n         # \'Member\' and \'Manager\' already exist by default, we need to add \'VIP\'\n-        portal._addRole(\'VIP\')\n+        portal._addRole("VIP")\n \n         for permission, roles in role_mapping:\n             portal.manage_permission(permission, roles, 1)\n \n         api.user.create(\n-            username=\'worker\',\n-            email=\'ordinary_person@example.com\',\n-            password=\'password1\',\n-            roles=(\'Member\',),\n+            username="worker",\n+            email="ordinary_person@example.com",\n+            password="password1",\n+            roles=("Member",),\n         )\n \n         api.user.create(\n-            username=\'boss\',\n-            email=\'important_person@example.com\',\n-            password=\'123456\',\n-            roles=(\'Member\', \'VIP\'),\n+            username="boss",\n+            email="important_person@example.com",\n+            password="123456",\n+            roles=("Member", "VIP"),\n         )\n \n         api.user.create(\n-            username=\'superhuman\',\n-            email=\'xavier@example.com\',\n-            password=\'think_carefully\',\n-            roles=(\'Member\', \'Manager\'),\n+            username="superhuman",\n+            email="xavier@example.com",\n+            password="think_carefully",\n+            roles=("Member", "Manager"),\n         )\n \n         self._old_sm = AccessControl.SecurityManagement.getSecurityManager()\n \n         AccessControl.SecurityManagement.newSecurityManager(\n             self.portal.REQUEST,\n-            self.portal.acl_users.getUser(\'boss\'),\n+            self.portal.acl_users.getUser("boss"),\n         )\n \n     def tearDown(self):\n@@ -124,78 +124,98 @@ def should_forbid(self, names):\n \n     def test_test_defaults(self):\n         """Test that the default set-up does what I expect it to."""\n-        self.should_allow([\n-            \'public_method\',\n-            \'pp_method\',\n-            \'qq_method\',\n-        ])\n-        self.should_forbid([\n-            \'rr_method\',\n-            \'private_method\',\n-        ])\n+        self.should_allow(\n+            [\n+                "public_method",\n+                "pp_method",\n+                "qq_method",\n+            ]\n+        )\n+        self.should_forbid(\n+            [\n+                "rr_method",\n+                "private_method",\n+            ]\n+        )\n \n     def test_adopt_manager_role(self):\n         """Test that we can adopt the Manager role temporarily."""\n-        with api.env.adopt_roles(roles=[\'Manager\']):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-            ])\n+        with api.env.adopt_roles(roles=["Manager"]):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                ]\n+            )\n         self.test_test_defaults()\n \n     def test_adopt_manager_string_role(self):\n         """Test that we can adopt the Manager role temporarily."""\n-        with api.env.adopt_roles(roles=\'Manager\'):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-            ])\n+        with api.env.adopt_roles(roles="Manager"):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                ]\n+            )\n         self.test_test_defaults()\n \n     def test_adopt_fewers_role(self):\n         """Test that we can adopt a non-Manager role temporarily."""\n-        with api.env.adopt_roles(roles=[\'Member\']):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-            ])\n-            self.should_forbid([\n-                \'qq_method\',\n-                \'rr_method\',\n-                \'private_method\',\n-            ])\n+        with api.env.adopt_roles(roles=["Member"]):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "qq_method",\n+                    "rr_method",\n+                    "private_method",\n+                ]\n+            )\n         self.test_test_defaults()\n \n     def test_drop_to_anon(self):\n         """Test that we can drop roles."""\n-        with api.env.adopt_roles(roles=[\'Anonymous\']):\n-            self.should_allow([\n-                \'public_method\',\n-            ])\n-            self.should_forbid([\n-                \'pp_method\',\n-                \'rr_method\',\n-                \'qq_method\',\n-                \'private_method\',\n-            ])\n+        with api.env.adopt_roles(roles=["Anonymous"]):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "pp_method",\n+                    "rr_method",\n+                    "qq_method",\n+                    "private_method",\n+                ]\n+            )\n \n     def test_content_owner_role(self):\n         """Tests that adopting a role should not affect content ownership."""\n-        with api.env.adopt_roles(roles=[\'Manager\']):\n+        with api.env.adopt_roles(roles=["Manager"]):\n             doc2 = api.content.create(\n                 container=self.portal,\n-                type=\'Document\',\n-                id=\'doc_2\',\n+                type="Document",\n+                id="doc_2",\n             )\n \n         intended = self.portal.acl_users.getUser(api.user.get_current().id)\n@@ -204,192 +224,245 @@ def test_content_owner_role(self):\n \n     def test_become_manager_by_name(self):\n         """Tests that becoming a manager user works."""\n-        with api.env.adopt_user(username=\'superhuman\'):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-            ])\n+        with api.env.adopt_user(username="superhuman"):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                ]\n+            )\n         self.test_test_defaults()\n \n     def test_become_manager_by_obj(self):\n         """Tests that becoming a manager with user from api.user works."""\n-        with api.env.adopt_user(user=api.user.get(username=\'superhuman\')):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-            ])\n+        with api.env.adopt_user(user=api.user.get(username="superhuman")):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                ]\n+            )\n         self.test_test_defaults()\n \n     def test_become_manager_by_acl_user(self):\n         """Tests that becoming a user with user from acl_users works."""\n         acl_users = api.portal.get().acl_users\n \n-        au_ordinary = acl_users.getUser(\'worker\')\n+        au_ordinary = acl_users.getUser("worker")\n         with api.env.adopt_user(user=au_ordinary):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n-\n-        au_manager = acl_users.getUser(\'superhuman\')\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n+\n+        au_manager = acl_users.getUser("superhuman")\n         with api.env.adopt_user(user=au_manager):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-            ])\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                ]\n+            )\n \n     def test_become_ordinary(self):\n         """Tests that becoming a user with fewer permissions works."""\n-        with api.env.adopt_user(username=\'worker\'):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n+        with api.env.adopt_user(username="worker"):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n         self.test_test_defaults()\n \n     def test_adopted_content_ownership(self):\n         """Tests that content created while user-switched is owned."""\n-        with api.env.adopt_user(username=\'superhuman\'):\n+        with api.env.adopt_user(username="superhuman"):\n             doc3 = api.content.create(\n                 container=self.portal,\n-                type=\'Document\',\n-                id=\'doc_3\',\n+                type="Document",\n+                id="doc_3",\n             )\n-        intended = self.portal.acl_users.getUser(\'superhuman\')\n+        intended = self.portal.acl_users.getUser("superhuman")\n         actual = doc3.getOwner()\n         self.assertEqual(actual.getPhysicalPath(), intended.getPhysicalPath())\n \n     def test_adopted_nested_ownership(self):\n         """Test deep nesting of adopt_user and adopt_roles blocks."""\n-        with api.env.adopt_user(username=\'worker\'):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n-            with api.env.adopt_roles([\'Anonymous\']):\n-                self.should_allow([\n-                    \'public_method\',\n-                ])\n-                self.should_forbid([\n-                    \'private_method\',\n-                    \'pp_method\',\n-                    \'qq_method\',\n-                    \'rr_method\',\n-                ])\n-                with api.env.adopt_user(username=\'boss\'):\n-                    self.should_allow([\n-                        \'public_method\',\n-                        \'pp_method\',\n-                        \'qq_method\',\n-                    ])\n-                    self.should_forbid([\n-                        \'private_method\',\n-                        \'rr_method\',\n-                    ])\n-                    with api.env.adopt_roles([\'Manager\']):\n-                        self.should_allow([\n-                            \'public_method\',\n-                            \'pp_method\',\n-                            \'qq_method\',\n-                            \'rr_method\',\n-                        ])\n-                        self.should_forbid([\n-                            \'private_method\',\n-                        ])\n-\n-                        with api.env.adopt_roles([\'Anonymous\']):\n-                            self.should_allow([\n-                                \'public_method\',\n-                            ])\n-                            self.should_forbid([\n-                                \'private_method\',\n-                                \'pp_method\',\n-                                \'qq_method\',\n-                                \'rr_method\',\n-                            ])\n+        with api.env.adopt_user(username="worker"):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n+            with api.env.adopt_roles(["Anonymous"]):\n+                self.should_allow(\n+                    [\n+                        "public_method",\n+                    ]\n+                )\n+                self.should_forbid(\n+                    [\n+                        "private_method",\n+                        "pp_method",\n+                        "qq_method",\n+                        "rr_method",\n+                    ]\n+                )\n+                with api.env.adopt_user(username="boss"):\n+                    self.should_allow(\n+                        [\n+                            "public_method",\n+                            "pp_method",\n+                            "qq_method",\n+                        ]\n+                    )\n+                    self.should_forbid(\n+                        [\n+                            "private_method",\n+                            "rr_method",\n+                        ]\n+                    )\n+                    with api.env.adopt_roles(["Manager"]):\n+                        self.should_allow(\n+                            [\n+                                "public_method",\n+                                "pp_method",\n+                                "qq_method",\n+                                "rr_method",\n+                            ]\n+                        )\n+                        self.should_forbid(\n+                            [\n+                                "private_method",\n+                            ]\n+                        )\n+\n+                        with api.env.adopt_roles(["Anonymous"]):\n+                            self.should_allow(\n+                                [\n+                                    "public_method",\n+                                ]\n+                            )\n+                            self.should_forbid(\n+                                [\n+                                    "private_method",\n+                                    "pp_method",\n+                                    "qq_method",\n+                                    "rr_method",\n+                                ]\n+                            )\n                         # /roles Anonymous\n \n                         doc4 = api.content.create(\n                             container=self.portal,\n-                            type=\'Document\',\n-                            id=\'doc_ock\',\n+                            type="Document",\n+                            id="doc_ock",\n                         )\n-                        intended = self.portal.acl_users.getUser(\'boss\')\n+                        intended = self.portal.acl_users.getUser("boss")\n                         intended_pp = intended.getPhysicalPath()\n                         actual = doc4.getOwner()\n                         actual_pp = actual.getPhysicalPath()\n                         self.assertEqual(actual_pp, intended_pp)\n                     # /roles Manager\n \n-                    self.should_allow([\n-                        \'public_method\',\n-                        \'pp_method\',\n-                        \'qq_method\',\n-                    ])\n-                    self.should_forbid([\n-                        \'private_method\',\n-                        \'rr_method\',\n-                    ])\n+                    self.should_allow(\n+                        [\n+                            "public_method",\n+                            "pp_method",\n+                            "qq_method",\n+                        ]\n+                    )\n+                    self.should_forbid(\n+                        [\n+                            "private_method",\n+                            "rr_method",\n+                        ]\n+                    )\n                 # /user boss\n \n-                self.should_allow([\n-                    \'public_method\',\n-                ])\n-                self.should_forbid([\n-                    \'private_method\',\n-                    \'pp_method\',\n-                    \'qq_method\',\n-                    \'rr_method\',\n-                ])\n+                self.should_allow(\n+                    [\n+                        "public_method",\n+                    ]\n+                )\n+                self.should_forbid(\n+                    [\n+                        "private_method",\n+                        "pp_method",\n+                        "qq_method",\n+                        "rr_method",\n+                    ]\n+                )\n             # /roles Anonymous\n \n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n         # /user worker\n \n     def test_adopting_zope_users(self):\n-        api.env.adopt_user(username=\'admin\')\n-        api.env.adopt_user(user=api.user.get(username=\'admin\'))\n+        api.env.adopt_user(username="admin")\n+        api.env.adopt_user(user=api.user.get(username="admin"))\n \n     def test_adopting_anonymous(self):\n         from AccessControl.users import nobody\n+\n         self.assertNotEqual(nobody, api.user.get_current())\n         with api.env.adopt_user(user=nobody):\n             self.assertEqual(nobody, api.user.get_current())\n@@ -397,12 +470,14 @@ def test_adopting_anonymous(self):\n     def test_empty_warning(self):\n         """Tests that empty roles lists get warned about."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.env.adopt_roles([])\n \n     def test_argument_requirement(self):\n         """Tests that missing arguments don\'t go unnoticed."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.env.adopt_roles()\n \n@@ -411,6 +486,7 @@ def test_debug_mode(self):\n         getConfiguration.debug_mode."""\n         from App.config import getConfiguration\n         from plone.api.env import debug_mode\n+\n         getConfiguration().debug_mode = True\n         self.assertEqual(debug_mode(), True)\n         getConfiguration().debug_mode = False\n@@ -419,23 +495,27 @@ def test_debug_mode(self):\n     def test_test_mode(self):\n         """Tests that test_mode() returns True as we are in a test runner."""\n         from plone.api.env import test_mode\n+\n         self.assertEqual(test_mode(), True)\n \n     def test_read_only_mode(self):\n         """Test that read_only_mode() returns False\n         as we have a write enabled ZODB."""\n         from plone.api.env import read_only_mode\n+\n         self.assertFalse(read_only_mode())\n \n     def test_plone_version(self):\n         """Tests that plone_version() returns Plone version."""\n         from plone.api.env import plone_version\n+\n         self.assertTrue(isinstance(plone_version(), str))\n         self.assertRegexpMatches(plone_version(), version_regexp)\n \n     def test_zope_version(self):\n         """Tests that zope_version() returns Zope version."""\n         from plone.api.env import zope_version\n+\n         self.assertTrue(isinstance(zope_version(), str))\n         self.assertRegexpMatches(zope_version(), version_regexp)\n \ndiff --git a/src/plone/api/tests/test_group.py b/src/plone/api/tests/test_group.py\nindex 4ef54ae9..c1718d48 100644\n--- a/src/plone/api/tests/test_group.py\n+++ b/src/plone/api/tests/test_group.py\n@@ -21,68 +21,72 @@ class TestPloneApiGroup(unittest.TestCase):\n \n     def setUp(self):\n         """Shared test environment set-up, ran before every test."""\n-        self.portal = self.layer[\'portal\']\n-        self.group_tool = getToolByName(self.portal, \'portal_groups\')\n+        self.portal = self.layer["portal"]\n+        self.group_tool = getToolByName(self.portal, "portal_groups")\n         self.portal_membership = getToolByName(\n-            self.portal, \'portal_membership\',\n+            self.portal,\n+            "portal_membership",\n         )\n \n     def test_create_constraints(self):\n         """Test the constraints for creating a group."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.group.create()\n \n     def test_create(self):\n         """Test adding of a group, groupname is mandatory."""\n \n-        spam_group = api.group.create(groupname=\'spam\')\n-        self.assertEqual(spam_group, self.group_tool.getGroupById(\'spam\'))\n+        spam_group = api.group.create(groupname="spam")\n+        self.assertEqual(spam_group, self.group_tool.getGroupById("spam"))\n \n     def test_create_with_title_and_desc(self):\n         """Test adding of a group with title and description."""\n \n         bacon_group = api.group.create(\n-            groupname=\'bacon\',\n-            title=\'Bacon\',\n-            description=\'Hmm bacon good!\',\n+            groupname="bacon",\n+            title="Bacon",\n+            description="Hmm bacon good!",\n         )\n \n         self.assertEqual(\n             bacon_group,\n-            self.group_tool.getGroupById(\'bacon\'),\n+            self.group_tool.getGroupById("bacon"),\n         )\n         self.assertEqual(\n             bacon_group.getGroupTitleOrName(),\n-            \'Bacon\',\n+            "Bacon",\n         )\n         self.assertEqual(\n-            bacon_group.getProperty(\'description\'),\n-            \'Hmm bacon good!\',\n+            bacon_group.getProperty("description"),\n+            "Hmm bacon good!",\n         )\n \n     def test_create_with_roles_and_groups(self):\n         """Test adding of a group with roles and groups."""\n \n         ham_group = api.group.create(\n-            groupname=\'ham\',\n-            roles=[\'Editor\'],\n-            groups=[\'Reviewer\'],\n+            groupname="ham",\n+            roles=["Editor"],\n+            groups=["Reviewer"],\n         )\n-        group = self.group_tool.getGroupById(\'ham\')\n+        group = self.group_tool.getGroupById("ham")\n         self.assertEqual(ham_group, group)\n-        self.assertIn(\'Editor\', ham_group.getRoles())\n-        self.assertIn(\'Reviewer\', ham_group.getMemberIds())\n+        self.assertIn("Editor", ham_group.getRoles())\n+        self.assertIn("Reviewer", ham_group.getMemberIds())\n \n     def test_get_constraints(self):\n         """Test the constraints for geting a group."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.group.get()\n \n     def test_get_no_groupname(self):\n         """Test getting a group without passing a groupname."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.group.create()\n \n@@ -95,12 +99,12 @@ def test_get(self):\n             api.group.create()\n \n         # Create a group and retrieve it\n-        api.group.create(groupname=\'bacon\')\n-        bacon = api.group.get(groupname=\'bacon\')\n+        api.group.create(groupname="bacon")\n+        bacon = api.group.get(groupname="bacon")\n \n         self.assertEqual(\n             bacon,\n-            self.group_tool.getGroupById(\'bacon\'),\n+            self.group_tool.getGroupById("bacon"),\n         )\n \n     def test_get_all_groups(self):\n@@ -114,9 +118,10 @@ def test_get_groups_constraints(self):\n \n         # username and user are mutually exclusive\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.group.get_groups(\n-                username=\'chuck\',\n+                username="chuck",\n                 user=mock.Mock(),\n             )\n \n@@ -124,30 +129,31 @@ def test_get_groups_user(self):\n         """Test retrieving of groups that the user is member of."""\n         user = self.portal_membership.getAuthenticatedMember()\n \n-        api.group.create(groupname=\'staff\')\n-        api.group.add_user(groupname=\'staff\', user=user)\n+        api.group.create(groupname="staff")\n+        api.group.add_user(groupname="staff", user=user)\n \n         groups = [g.id for g in api.group.get_groups(user=user)]\n-        self.assertIn(\'AuthenticatedUsers\', groups)\n-        self.assertIn(\'staff\', groups)\n+        self.assertIn("AuthenticatedUsers", groups)\n+        self.assertIn("staff", groups)\n \n     def test_get_groups_username(self):\n         """Test retrieving of groups that the user is member of."""\n         user = self.portal_membership.getAuthenticatedMember()\n         username = user.getUserName()\n \n-        api.group.create(groupname=\'staff\')\n-        api.group.add_user(groupname=\'staff\', user=user)\n+        api.group.create(groupname="staff")\n+        api.group.add_user(groupname="staff", user=user)\n \n         groups = [g.id for g in api.group.get_groups(username=username)]\n-        self.assertIn(\'AuthenticatedUsers\', groups)\n-        self.assertIn(\'staff\', groups)\n+        self.assertIn("AuthenticatedUsers", groups)\n+        self.assertIn("staff", groups)\n \n     def test_get_groups_nonexistant_user(self):\n         """Test retrieving of groups for a user that does not exist."""\n         from plone.api.exc import UserNotFoundError\n+\n         with self.assertRaises(UserNotFoundError):\n-            api.group.get_groups(username=\'theurbanspaceman\')\n+            api.group.get_groups(username="theurbanspaceman")\n \n     def test_get_groups_anonymous(self):\n         from AccessControl.users import nobody\n@@ -166,52 +172,56 @@ def test_get_groups_anonymous(self):\n     def test_delete_constraints(self):\n         """Test deleting a group without passing parameters."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.group.delete()\n \n     def test_delete_groupname_and_group(self):\n         """Test deleting a group passing both groupname and group."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.group.delete(\n-                groupname=\'bacon\',\n+                groupname="bacon",\n                 group=mock.Mock(),\n             )\n \n     def test_delete_group_groupname(self):\n         """Test deleting a group by groupname."""\n \n-        bacon = api.group.create(groupname=\'bacon\')\n-        self.assertEqual(bacon, api.group.get(\'bacon\'))\n+        bacon = api.group.create(groupname="bacon")\n+        self.assertEqual(bacon, api.group.get("bacon"))\n \n-        api.group.delete(groupname=\'bacon\')\n-        self.assertIsNone(api.group.get(\'bacon\'))\n+        api.group.delete(groupname="bacon")\n+        self.assertIsNone(api.group.get("bacon"))\n \n     def test_delete_group_group(self):\n         """Test deleting a group by group object."""\n \n-        group = api.group.create(groupname=\'bacon\')\n-        self.assertEqual(group, api.group.get(\'bacon\'))\n+        group = api.group.create(groupname="bacon")\n+        self.assertEqual(group, api.group.get("bacon"))\n \n         api.group.delete(group=group)\n-        self.assertIsNone(api.group.get(\'bacon\'))\n+        self.assertIsNone(api.group.get("bacon"))\n \n     def test_add_user_constraints(self):\n         """Test the constraints when a user is added to a group."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.group.add_user(\n-                groupname=\'staff\',\n+                groupname="staff",\n                 group=mock.Mock(),\n             )\n \n     def test_add_user_username_and_user(self):\n         """Test adding a user to a group passing both username and user."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.group.add_user(\n-                groupname=\'staff\',\n-                username=\'staff\',\n+                groupname="staff",\n+                username="staff",\n                 user=mock.Mock(),\n             )\n \n@@ -222,43 +232,44 @@ def test_add_user_with_nonexistant_group(self):\n             KeyError,\n             api.group.add_user,\n             user=mock.Mock(),\n-            groupname=\'staff\',\n+            groupname="staff",\n         )\n \n     def test_add_user_with_nonexistant_user(self):\n         """Test adding a user that does not exist to a group."""\n         from plone.api.exc import UserNotFoundError\n+\n         with self.assertRaises(UserNotFoundError):\n-            api.group.add_user(username=\'jane\', groupname=\'staff\')\n+            api.group.add_user(username="jane", groupname="staff")\n \n     def test_add_user_username(self):\n         """Test adding a user to a group by username."""\n-        group = api.group.create(groupname=\'staff\')\n-        api.user.create(email=\'bob@plone.org\', username=\'bob\')\n+        group = api.group.create(groupname="staff")\n+        api.user.create(email="bob@plone.org", username="bob")\n \n-        api.group.add_user(groupname=\'staff\', username=\'bob\')\n+        api.group.add_user(groupname="staff", username="bob")\n \n         self.assertIn(\n-            \'staff\',\n-            [g.id for g in api.group.get_groups(username=\'bob\')],\n+            "staff",\n+            [g.id for g in api.group.get_groups(username="bob")],\n         )\n \n-        self.assertIn(\'bob\', group.getMemberIds())\n+        self.assertIn("bob", group.getMemberIds())\n \n     def test_add_user_user(self):\n         """Test adding a user to a group by user object."""\n \n-        group = api.group.create(groupname=\'staff\')\n-        user = api.user.create(email=\'jane@plone.org\', username=\'jane\')\n+        group = api.group.create(groupname="staff")\n+        user = api.user.create(email="jane@plone.org", username="jane")\n \n         api.group.add_user(group=group, user=user)\n \n         self.assertIn(\n-            \'staff\',\n-            [g.id for g in api.group.get_groups(username=\'jane\')],\n+            "staff",\n+            [g.id for g in api.group.get_groups(username="jane")],\n         )\n \n-        self.assertIn(\'jane\', group.getMemberIds())\n+        self.assertIn("jane", group.getMemberIds())\n \n     def test_remove_user_constraints(self):\n         """Test the constraints when a user is removed from a group."""\n@@ -268,203 +279,206 @@ def test_remove_user_constraints(self):\n         # Arguments ``groupname`` and ``group`` are mutually exclusive.\n         with self.assertRaises(InvalidParameterError):\n             api.group.remove_user(\n-                username=\'jane\',\n-                groupname=\'staff\',\n+                username="jane",\n+                groupname="staff",\n                 group=mock.Mock(),\n             )\n         # Arguments ``username`` and ``user`` are mutually exclusive.\n         with self.assertRaises(InvalidParameterError):\n             api.group.remove_user(\n-                groupname=\'staff\',\n-                username=\'jane\',\n+                groupname="staff",\n+                username="jane",\n                 user=mock.Mock(),\n             )\n         # At least one of ``username`` and ``user`` must be provided\n         with self.assertRaises(MissingParameterError):\n-            api.group.remove_user(groupname=\'staff\')\n+            api.group.remove_user(groupname="staff")\n         # At least one of ``groupname`` and ``group`` must be provided\n         with self.assertRaises(MissingParameterError):\n-            api.group.remove_user(username=\'jane\')\n+            api.group.remove_user(username="jane")\n \n     def test_remove_user(self):\n         """Test removing a user from a group."""\n \n-        api.group.create(groupname=\'staff\')\n-        api.user.create(email=\'jane@plone.org\', username=\'jane\')\n-        api.user.create(email=\'bob@plone.org\', username=\'bob\')\n-        api.group.add_user(groupname=\'staff\', username=\'jane\')\n-        api.group.add_user(groupname=\'staff\', username=\'bob\')\n+        api.group.create(groupname="staff")\n+        api.user.create(email="jane@plone.org", username="jane")\n+        api.user.create(email="bob@plone.org", username="bob")\n+        api.group.add_user(groupname="staff", username="jane")\n+        api.group.add_user(groupname="staff", username="bob")\n \n         # Delete user by username from group\n-        api.group.remove_user(groupname=\'staff\', username=\'bob\')\n+        api.group.remove_user(groupname="staff", username="bob")\n \n-        group = api.group.get(groupname=\'staff\')\n-        user = api.user.get(username=\'jane\')\n+        group = api.group.get(groupname="staff")\n+        user = api.user.get(username="jane")\n \n         # Delete user by user object from group\n         api.group.remove_user(group=group, user=user)\n \n-        self.assertNotIn(\'staff\', api.group.get_groups(username=\'bob\'))\n-        self.assertNotIn(\'staff\', api.group.get_groups(username=\'jane\'))\n+        self.assertNotIn("staff", api.group.get_groups(username="bob"))\n+        self.assertNotIn("staff", api.group.get_groups(username="jane"))\n \n-        self.assertNotIn(\'bob\', group.getMemberIds())\n-        self.assertNotIn(\'jane\', group.getMemberIds())\n+        self.assertNotIn("bob", group.getMemberIds())\n+        self.assertNotIn("jane", group.getMemberIds())\n \n     def test_remove_user_with_nonexistant_user(self):\n         """Test removing a user from a group when the user does not exist"""\n         from plone.api.exc import UserNotFoundError\n-        api.group.create(groupname=\'staff\')\n-        group = api.group.get(groupname=\'staff\')\n+\n+        api.group.create(groupname="staff")\n+        group = api.group.get(groupname="staff")\n         with self.assertRaises(UserNotFoundError):\n-            api.group.remove_user(group=group, username=\'iamnothere\')\n+            api.group.remove_user(group=group, username="iamnothere")\n \n     def test_grant_roles(self):\n         """Test grant roles."""\n         from plone.api.exc import InvalidParameterError\n         from plone.api.exc import MissingParameterError\n-        group = api.group.create(groupname=\'foo\')\n+\n+        group = api.group.create(groupname="foo")\n \n         # You can\'t grant Anonymous\n         with self.assertRaises(ValueError):\n             api.group.grant_roles(\n-                groupname=\'foo\',\n-                roles=[\'Anonymous\'],\n+                groupname="foo",\n+                roles=["Anonymous"],\n             )\n \n         # You can\'t grant Authenticated\n         with self.assertRaises(ValueError):\n             api.group.grant_roles(\n-                groupname=\'foo\',\n-                roles=[\'Authenticated\'],\n+                groupname="foo",\n+                roles=["Authenticated"],\n             )\n \n         # Roles are required\n         with self.assertRaises(MissingParameterError):\n-            api.group.grant_roles(groupname=\'foo\')\n+            api.group.grant_roles(groupname="foo")\n \n         # Groupname and group are mutually exclusive\n         with self.assertRaises(InvalidParameterError):\n             api.group.grant_roles(\n-                groupname=\'foo\',\n+                groupname="foo",\n                 group=group,\n-                roles=[\'Reviewer\'],\n+                roles=["Reviewer"],\n             )\n \n-        api.group.grant_roles(groupname=\'foo\', roles=[\'Editor\'])\n-        self.assertIn(\'Editor\', api.group.get_roles(groupname=\'foo\'))\n-        self.assertIn(\'Editor\', api.group.get_roles(group=group))\n+        api.group.grant_roles(groupname="foo", roles=["Editor"])\n+        self.assertIn("Editor", api.group.get_roles(groupname="foo"))\n+        self.assertIn("Editor", api.group.get_roles(group=group))\n \n-        api.group.grant_roles(groupname=\'foo\', roles=(\'Contributor\',))\n-        self.assertIn(\'Contributor\', api.group.get_roles(groupname=\'foo\'))\n-        self.assertIn(\'Contributor\', api.group.get_roles(group=group))\n+        api.group.grant_roles(groupname="foo", roles=("Contributor",))\n+        self.assertIn("Contributor", api.group.get_roles(groupname="foo"))\n+        self.assertIn("Contributor", api.group.get_roles(group=group))\n \n-        api.group.grant_roles(groupname=\'foo\', roles=[\'Reader\', \'Reader\'])\n-        ROLES = {\'Editor\', \'Contributor\', \'Reader\', \'Authenticated\'}\n-        self.assertEqual(ROLES, set(api.group.get_roles(groupname=\'foo\')))\n+        api.group.grant_roles(groupname="foo", roles=["Reader", "Reader"])\n+        ROLES = {"Editor", "Contributor", "Reader", "Authenticated"}\n+        self.assertEqual(ROLES, set(api.group.get_roles(groupname="foo")))\n         self.assertEqual(ROLES, set(api.group.get_roles(group=group)))\n \n     def test_revoke_roles(self):\n         """Test revoke roles."""\n         from plone.api.exc import InvalidParameterError\n         from plone.api.exc import MissingParameterError\n-        group = api.group.create(groupname=\'bar\')\n+\n+        group = api.group.create(groupname="bar")\n \n         # You can\'t revoke Anonymous\n         with self.assertRaises(ValueError):\n             api.group.revoke_roles(\n-                groupname=\'bar\',\n-                roles=[\'Anonymous\'],\n+                groupname="bar",\n+                roles=["Anonymous"],\n             )\n \n         # You can\'t revoke Authenticated\n         with self.assertRaises(ValueError):\n             api.group.revoke_roles(\n-                groupname=\'bar\',\n-                roles=[\'Authenticated\'],\n+                groupname="bar",\n+                roles=["Authenticated"],\n             )\n \n         # Roles are required\n         with self.assertRaises(MissingParameterError):\n-            api.group.revoke_roles(groupname=\'foo\')\n+            api.group.revoke_roles(groupname="foo")\n \n         # Groupname and group are mutually exclusive\n         with self.assertRaises(InvalidParameterError):\n             api.group.revoke_roles(\n-                groupname=\'foo\',\n+                groupname="foo",\n                 group=group,\n-                roles=[\'Reviewer\'],\n+                roles=["Reviewer"],\n             )\n \n-        api.group.grant_roles(groupname=\'bar\', roles=[\'Reviewer\', \'Editor\'])\n+        api.group.grant_roles(groupname="bar", roles=["Reviewer", "Editor"])\n \n-        api.group.revoke_roles(groupname=\'bar\', roles=[\'Reviewer\'])\n-        self.assertNotIn(\'Reviewer\', api.group.get_roles(groupname=\'bar\'))\n-        self.assertNotIn(\'Reviewer\', api.group.get_roles(group=group))\n-        self.assertIn(\'Editor\', api.group.get_roles(groupname=\'bar\'))\n-        self.assertIn(\'Editor\', api.group.get_roles(group=group))\n+        api.group.revoke_roles(groupname="bar", roles=["Reviewer"])\n+        self.assertNotIn("Reviewer", api.group.get_roles(groupname="bar"))\n+        self.assertNotIn("Reviewer", api.group.get_roles(group=group))\n+        self.assertIn("Editor", api.group.get_roles(groupname="bar"))\n+        self.assertIn("Editor", api.group.get_roles(group=group))\n \n-        api.group.revoke_roles(groupname=\'bar\', roles=[\'Editor\'])\n-        ROLES = {\'Authenticated\'}\n-        self.assertEqual(ROLES, set(api.group.get_roles(groupname=\'bar\')))\n+        api.group.revoke_roles(groupname="bar", roles=["Editor"])\n+        ROLES = {"Authenticated"}\n+        self.assertEqual(ROLES, set(api.group.get_roles(groupname="bar")))\n         self.assertEqual(ROLES, set(api.group.get_roles(group=group)))\n \n     def test_grant_roles_in_context(self):\n         """Test grant roles."""\n \n-        group = api.group.create(groupname=\'foo\')\n+        group = api.group.create(groupname="foo")\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n \n-        api.group.grant_roles(groupname=\'foo\', roles=[\'Editor\'], obj=folder)\n+        api.group.grant_roles(groupname="foo", roles=["Editor"], obj=folder)\n         self.assertIn(\n-            \'Editor\',\n-            api.group.get_roles(groupname=\'foo\', obj=folder),\n+            "Editor",\n+            api.group.get_roles(groupname="foo", obj=folder),\n         )\n-        self.assertIn(\'Editor\', api.group.get_roles(group=group, obj=folder))\n+        self.assertIn("Editor", api.group.get_roles(group=group, obj=folder))\n         self.assertIn(\n-            \'Editor\',\n-            api.group.get_roles(groupname=\'foo\', obj=document),\n+            "Editor",\n+            api.group.get_roles(groupname="foo", obj=document),\n         )\n-        self.assertIn(\'Editor\', api.group.get_roles(group=group, obj=document))\n+        self.assertIn("Editor", api.group.get_roles(group=group, obj=document))\n \n         api.group.grant_roles(\n-            groupname=\'foo\',\n-            roles=(\'Contributor\',),\n+            groupname="foo",\n+            roles=("Contributor",),\n             obj=folder,\n         )\n         self.assertIn(\n-            \'Contributor\',\n-            api.group.get_roles(groupname=\'foo\', obj=folder),\n+            "Contributor",\n+            api.group.get_roles(groupname="foo", obj=folder),\n         )\n         self.assertIn(\n-            \'Contributor\',\n+            "Contributor",\n             api.group.get_roles(group=group, obj=folder),\n         )\n         self.assertIn(\n-            \'Contributor\',\n-            api.group.get_roles(groupname=\'foo\', obj=document),\n+            "Contributor",\n+            api.group.get_roles(groupname="foo", obj=document),\n         )\n         self.assertIn(\n-            \'Contributor\',\n+            "Contributor",\n             api.group.get_roles(group=group, obj=document),\n         )\n \n-        ROLES = {\'Editor\', \'Contributor\', \'Authenticated\'}\n+        ROLES = {"Editor", "Contributor", "Authenticated"}\n         self.assertEqual(\n             ROLES,\n-            set(api.group.get_roles(groupname=\'foo\', obj=folder)),\n+            set(api.group.get_roles(groupname="foo", obj=folder)),\n         )\n         self.assertEqual(\n             ROLES,\n@@ -472,18 +486,18 @@ def test_grant_roles_in_context(self):\n         )\n         self.assertEqual(\n             ROLES,\n-            set(api.group.get_roles(groupname=\'foo\', obj=document)),\n+            set(api.group.get_roles(groupname="foo", obj=document)),\n         )\n         self.assertEqual(\n             ROLES,\n             set(api.group.get_roles(group=group, obj=document)),\n         )\n-        ROLES = {\'Editor\', \'Contributor\'}\n+        ROLES = {"Editor", "Contributor"}\n         self.assertEqual(\n             ROLES,\n             set(\n                 api.group.get_roles(\n-                    groupname=\'foo\',\n+                    groupname="foo",\n                     obj=folder,\n                     inherit=False,\n                 ),\n@@ -497,7 +511,7 @@ def test_grant_roles_in_context(self):\n             set(),\n             set(\n                 api.group.get_roles(\n-                    groupname=\'foo\',\n+                    groupname="foo",\n                     obj=document,\n                     inherit=False,\n                 ),\n@@ -510,89 +524,92 @@ def test_grant_roles_in_context(self):\n \n     def test_local_roles_without_inheritance(self):\n         """Test granting and getting local_roles."""\n-        api.group.create(groupname=\'foo\')\n+        api.group.create(groupname="foo")\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         self.assertEqual(\n-            [\'Authenticated\'],\n-            api.group.get_roles(groupname=\'foo\'),\n+            ["Authenticated"],\n+            api.group.get_roles(groupname="foo"),\n         )\n         # Add the editor-role as global role\n-        api.group.grant_roles(groupname=\'foo\', roles=[\'Editor\'])\n+        api.group.grant_roles(groupname="foo", roles=["Editor"])\n         self.assertCountEqual(\n-            [\'Authenticated\', \'Editor\'],\n-            api.group.get_roles(groupname=\'foo\'),\n+            ["Authenticated", "Editor"],\n+            api.group.get_roles(groupname="foo"),\n         )\n         # local_roles plus global_roles\n         self.assertCountEqual(\n-            [\'Authenticated\', \'Editor\'],\n-            api.group.get_roles(groupname=\'foo\', obj=folder),\n+            ["Authenticated", "Editor"],\n+            api.group.get_roles(groupname="foo", obj=folder),\n         )\n         # only local_roles\n         self.assertEqual(\n             [],\n-            api.group.get_roles(groupname=\'foo\', obj=folder, inherit=False),\n+            api.group.get_roles(groupname="foo", obj=folder, inherit=False),\n         )\n \n         # The Contributor-role is added\n         api.group.grant_roles(\n-            groupname=\'foo\', roles=[\'Contributor\'], obj=folder,\n+            groupname="foo",\n+            roles=["Contributor"],\n+            obj=folder,\n         )\n         self.assertCountEqual(\n-            [\'Contributor\'],\n-            api.group.get_roles(groupname=\'foo\', obj=folder, inherit=False),\n+            ["Contributor"],\n+            api.group.get_roles(groupname="foo", obj=folder, inherit=False),\n         )\n         # local_roles plus global_roles\n         self.assertEqual(\n-            {\'Authenticated\', \'Editor\', \'Contributor\'},\n-            set(api.group.get_roles(groupname=\'foo\', obj=document)),\n+            {"Authenticated", "Editor", "Contributor"},\n+            set(api.group.get_roles(groupname="foo", obj=document)),\n         )\n         # no only-local roles\n         self.assertEqual(\n             set(),\n             set(\n                 api.group.get_roles(\n-                    groupname=\'foo\',\n+                    groupname="foo",\n                     obj=document,\n                     inherit=False,\n                 ),\n             ),\n         )\n         api.group.grant_roles(\n-            groupname=\'foo\', roles=[\'Contributor\'], obj=document,\n+            groupname="foo",\n+            roles=["Contributor"],\n+            obj=document,\n         )\n         # one only-local role\n         self.assertEqual(\n-            {\'Contributor\'},\n+            {"Contributor"},\n             set(\n                 api.group.get_roles(\n-                    groupname=\'foo\',\n+                    groupname="foo",\n                     obj=document,\n                     inherit=False,\n                 ),\n             ),\n-\n         )\n \n         # The Editor-role is added even though it is already a global role\n-        api.group.grant_roles(groupname=\'foo\', roles=[\'Editor\'], obj=folder)\n+        api.group.grant_roles(groupname="foo", roles=["Editor"], obj=folder)\n         self.assertEqual(\n-            {\'Contributor\', \'Editor\'},\n+            {"Contributor", "Editor"},\n             set(\n                 api.group.get_roles(\n-                    groupname=\'foo\',\n+                    groupname="foo",\n                     obj=folder,\n                     inherit=False,\n                 ),\n@@ -605,18 +622,18 @@ def test_local_roles_disregard_adapter(self):\n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n-        api.group.create(groupname=\'foo\')\n+        api.group.create(groupname="foo")\n \n         self.assertEqual(\n-            api.group.get_roles(groupname=\'foo\', obj=folder),\n-            [\'Authenticated\'],\n+            api.group.get_roles(groupname="foo", obj=folder),\n+            ["Authenticated"],\n         )\n         self.assertEqual(\n-            api.group.get_roles(groupname=\'foo\', obj=folder, inherit=False),\n+            api.group.get_roles(groupname="foo", obj=folder, inherit=False),\n             [],\n         )\n \n@@ -624,133 +641,135 @@ def test_local_roles_disregard_adapter(self):\n         @adapter(Interface)\n         @implementer(ILocalRoleProvider)\n         class LocalRoleProvider:\n-\n             def __init__(self, context):\n                 self.context = context\n \n             def getRoles(self, principal_id):\n-                return (\'Reviewer\',)\n+                return ("Reviewer",)\n \n         provideAdapter(LocalRoleProvider)\n \n         # the adapter-role is added for get_role\n         self.assertCountEqual(\n-            api.group.get_roles(groupname=\'foo\', obj=folder),\n-            [\'Authenticated\', \'Reviewer\'],\n+            api.group.get_roles(groupname="foo", obj=folder),\n+            ["Authenticated", "Reviewer"],\n         )\n \n         self.assertCountEqual(\n-            api.group.get_roles(groupname=\'foo\', obj=folder, inherit=False),\n-            [\'Reviewer\'],\n+            api.group.get_roles(groupname="foo", obj=folder, inherit=False),\n+            ["Reviewer"],\n         )\n \n         # Assign a local role\n         api.group.grant_roles(\n-            groupname=\'foo\', roles=[\'Contributor\'], obj=folder,\n+            groupname="foo",\n+            roles=["Contributor"],\n+            obj=folder,\n         )\n         self.assertCountEqual(\n-            api.group.get_roles(groupname=\'foo\', obj=folder),\n-            [\'Authenticated\', \'Contributor\', \'Reviewer\'],\n+            api.group.get_roles(groupname="foo", obj=folder),\n+            ["Authenticated", "Contributor", "Reviewer"],\n         )\n \n         # The adapter role in in the local roles but not persistent\n         self.assertCountEqual(\n-            api.group.get_roles(groupname=\'foo\', obj=folder, inherit=False),\n-            [\'Contributor\', \'Reviewer\'],\n+            api.group.get_roles(groupname="foo", obj=folder, inherit=False),\n+            ["Contributor", "Reviewer"],\n         )\n-        local_roles = getattr(folder, \'__ac_local_roles__\', {})\n+        local_roles = getattr(folder, "__ac_local_roles__", {})\n         self.assertCountEqual(\n-            local_roles.get(\'foo\'),\n-            [\'Contributor\'],\n+            local_roles.get("foo"),\n+            ["Contributor"],\n         )\n         # cleanup\n         gsm = getGlobalSiteManager()\n         gsm.unregisterAdapter(\n-            factory=LocalRoleProvider, provided=ILocalRoleProvider,\n+            factory=LocalRoleProvider,\n+            provided=ILocalRoleProvider,\n         )\n \n     def test_revoke_roles_in_context(self):\n         """Test revoke roles."""\n \n-        group = api.group.create(groupname=\'ploneboat\')\n+        group = api.group.create(groupname="ploneboat")\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         api.group.grant_roles(\n-            groupname=\'ploneboat\',\n-            roles=[\'Reviewer\', \'Editor\'],\n+            groupname="ploneboat",\n+            roles=["Reviewer", "Editor"],\n             obj=folder,\n         )\n \n         api.group.revoke_roles(\n-            groupname=\'ploneboat\',\n-            roles=[\'Reviewer\'],\n+            groupname="ploneboat",\n+            roles=["Reviewer"],\n             obj=folder,\n         )\n         self.assertIn(\n-            \'Editor\',\n-            api.group.get_roles(groupname=\'ploneboat\', obj=folder),\n+            "Editor",\n+            api.group.get_roles(groupname="ploneboat", obj=folder),\n         )\n-        self.assertIn(\'Editor\', api.group.get_roles(group=group, obj=folder))\n+        self.assertIn("Editor", api.group.get_roles(group=group, obj=folder))\n         self.assertIn(\n-            \'Editor\',\n-            api.group.get_roles(groupname=\'ploneboat\', obj=document),\n+            "Editor",\n+            api.group.get_roles(groupname="ploneboat", obj=document),\n         )\n-        self.assertIn(\'Editor\', api.group.get_roles(group=group, obj=document))\n+        self.assertIn("Editor", api.group.get_roles(group=group, obj=document))\n         self.assertNotIn(\n-            \'Reviewer\',\n-            api.group.get_roles(groupname=\'ploneboat\', obj=folder),\n+            "Reviewer",\n+            api.group.get_roles(groupname="ploneboat", obj=folder),\n         )\n         self.assertNotIn(\n-            \'Reviewer\',\n+            "Reviewer",\n             api.group.get_roles(group=group, obj=folder),\n         )\n         self.assertNotIn(\n-            \'Reviewer\',\n-            api.group.get_roles(groupname=\'ploneboat\', obj=document),\n+            "Reviewer",\n+            api.group.get_roles(groupname="ploneboat", obj=document),\n         )\n         self.assertNotIn(\n-            \'Reviewer\',\n+            "Reviewer",\n             api.group.get_roles(group=group, obj=document),\n         )\n \n         api.group.revoke_roles(\n-            groupname=\'ploneboat\',\n-            roles=[\'Editor\'],\n+            groupname="ploneboat",\n+            roles=["Editor"],\n             obj=folder,\n         )\n         self.assertNotIn(\n-            \'Editor\',\n-            api.group.get_roles(groupname=\'ploneboat\', obj=folder),\n+            "Editor",\n+            api.group.get_roles(groupname="ploneboat", obj=folder),\n         )\n         self.assertNotIn(\n-            \'Editor\',\n+            "Editor",\n             api.group.get_roles(group=group, obj=folder),\n         )\n         self.assertNotIn(\n-            \'Editor\',\n-            api.group.get_roles(groupname=\'ploneboat\', obj=document),\n+            "Editor",\n+            api.group.get_roles(groupname="ploneboat", obj=document),\n         )\n         self.assertNotIn(\n-            \'Editor\',\n+            "Editor",\n             api.group.get_roles(group=group, obj=document),\n         )\n \n-        ROLES = {\'Authenticated\'}\n+        ROLES = {"Authenticated"}\n         self.assertEqual(\n             ROLES,\n-            set(api.group.get_roles(groupname=\'ploneboat\', obj=folder)),\n+            set(api.group.get_roles(groupname="ploneboat", obj=folder)),\n         )\n         self.assertEqual(\n             ROLES,\n@@ -758,7 +777,7 @@ def test_revoke_roles_in_context(self):\n         )\n         self.assertEqual(\n             ROLES,\n-            set(api.group.get_roles(groupname=\'ploneboat\', obj=document)),\n+            set(api.group.get_roles(groupname="ploneboat", obj=document)),\n         )\n         self.assertEqual(\n             ROLES,\n@@ -768,27 +787,31 @@ def test_revoke_roles_in_context(self):\n     def test_local_roles_no_inheritance(self):\n         """Test possibility to disregard roles\n         for inherited groups."""\n-        api.group.create(groupname=\'ploneboat\')\n+        api.group.create(groupname="ploneboat")\n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         api.group.grant_roles(\n-            groupname=\'ploneboat\',\n-            roles=[\'Reviewer\', \'Editor\'],\n+            groupname="ploneboat",\n+            roles=["Reviewer", "Editor"],\n             obj=document,\n         )\n-        document.manage_setLocalRoles(\'AuthenticatedUsers\', (\'Reader\',))\n+        document.manage_setLocalRoles("AuthenticatedUsers", ("Reader",))\n         self.assertNotIn(\n-            \'Reader\',\n-            api.group.get_roles(groupname=\'ploneboat\', inherit=False, obj=document),  # noqa: E501\n+            "Reader",\n+            api.group.get_roles(\n+                groupname="ploneboat",\n+                inherit=False,\n+                obj=document,\n+            ),\n         )\ndiff --git a/src/plone/api/tests/test_portal.py b/src/plone/api/tests/test_portal.py\nindex 595366d4..e94c783e 100644\n--- a/src/plone/api/tests/test_portal.py\n+++ b/src/plone/api/tests/test_portal.py\n@@ -33,27 +33,27 @@\n     from email import message_from_string as message_from_bytes\n \n \n-HAS_PLONE5 = parse_version(env.plone_version()) >= parse_version(\'5.0b2\')\n+HAS_PLONE5 = parse_version(env.plone_version()) >= parse_version("5.0b2")\n \n \n class IMyRegistrySettings(Interface):\n \n     field_one = schema.TextLine(\n-        title=\'something\',\n-        description=\'something else\',\n+        title="something",\n+        description="something else",\n     )\n \n     field_two = schema.TextLine(\n-        title=\'something\',\n-        description=\'something else\',\n+        title="something",\n+        description="something else",\n     )\n \n \n class IMyOtherRegistrySettings(Interface):\n \n     field_three = schema.TextLine(\n-        title=\'something\',\n-        description=\'something else\',\n+        title="something",\n+        description="something else",\n     )\n \n \n@@ -68,66 +68,66 @@ class TestPloneApiPortal(unittest.TestCase):\n \n     def setUp(self):\n         """Shared test environment set-up, ran before every test."""\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n         # Mock the mail host so we can test sending the email\n-        mockmailhost = MockMailHost(\'MailHost\')\n+        mockmailhost = MockMailHost("MailHost")\n \n-        if not getattr(mockmailhost, \'smtp_host\', None):\n-            mockmailhost.smtp_host = \'localhost\'\n+        if not getattr(mockmailhost, "smtp_host", None):\n+            mockmailhost.smtp_host = "localhost"\n \n         self.portal.MailHost = mockmailhost\n         sm = self.portal.getSiteManager()\n         sm.registerUtility(component=mockmailhost, provided=IMailHost)\n \n-        self.mailhost = portal.get_tool(\'MailHost\')\n+        self.mailhost = portal.get_tool("MailHost")\n         if HAS_PLONE5:\n             portal.set_registry_record(\n-                \'plone.email_from_name\',\n-                \'Portal Owner\',\n+                "plone.email_from_name",\n+                "Portal Owner",\n             )\n             portal.set_registry_record(\n-                \'plone.email_from_address\',\n-                \'sender@example.org\',\n+                "plone.email_from_address",\n+                "sender@example.org",\n             )\n         else:\n             self.portal._updateProperty(\n-                \'email_from_name\',\n-                \'Portal Owner\',\n+                "email_from_name",\n+                "Portal Owner",\n             )\n             self.portal._updateProperty(\n-                \'email_from_address\',\n-                \'sender@example.org\',\n+                "email_from_address",\n+                "sender@example.org",\n             )\n \n     def _set_localization_date_format(self):\n         """Set the expected localized date format."""\n         from plone.api.exc import InvalidParameterError\n \n-        name_root = \'Products.CMFPlone.i18nl10n.override_dateformat.\'\n+        name_root = "Products.CMFPlone.i18nl10n.override_dateformat."\n         try:\n             portal.set_registry_record(\n-                name=name_root + \'Enabled\',\n+                name=name_root + "Enabled",\n                 value=True,\n             )\n             portal.set_registry_record(\n-                name=name_root + \'date_format_long\',\n-                value=\'%b %d, %Y %I:%M %p\',\n+                name=name_root + "date_format_long",\n+                value="%b %d, %Y %I:%M %p",\n             )\n             portal.set_registry_record(\n-                name=name_root + \'time_format\',\n-                value=\'%I:%M %p\',\n+                name=name_root + "time_format",\n+                value="%I:%M %p",\n             )\n             portal.set_registry_record(\n-                name=name_root + \'date_format_short\',\n-                value=\'%b %d, %Y\',\n+                name=name_root + "date_format_short",\n+                value="%b %d, %Y",\n             )\n         except InvalidParameterError:\n             # before Plone 4.3, date formats were stored in portal_properties\n-            properties = portal.get_tool(\'portal_properties\')\n-            properties.localLongTimeFormat = \'%b %d, %Y %I:%M %p\'\n-            properties.localTimeOnlyFormat = \'%I:%M %p\'\n-            properties.localTimeFormat = \'%b %d, %Y\'\n+            properties = portal.get_tool("portal_properties")\n+            properties.localLongTimeFormat = "%b %d, %Y %I:%M %p"\n+            properties.localTimeOnlyFormat = "%I:%M %p"\n+            properties.localTimeFormat = "%b %d, %Y"\n \n     def test_get(self):\n         """Test getting the portal object."""\n@@ -143,8 +143,8 @@ def test_get_with_sub_site(self):\n         """\n         a_site = content.create(\n             container=self.portal,\n-            type=\'Folder\',\n-            title=\'A Site\',\n+            type="Folder",\n+            title="A Site",\n         )\n         a_site.setSiteManager(LocalSiteManager(a_site))\n \n@@ -155,11 +155,12 @@ def test_get_with_sub_site(self):\n         # cleanup\n         setSite(self.portal)\n \n-    @mock.patch(\'plone.api.portal.getSite\')\n+    @mock.patch("plone.api.portal.getSite")\n     def test_get_no_site(self, getSite):\n         """Test error msg when getSite() returns None."""\n         getSite.return_value = None\n         from plone.api.exc import CannotGetPortalError\n+\n         with self.assertRaises(CannotGetPortalError):\n             portal.get()\n \n@@ -168,14 +169,16 @@ def test_get_tool_constraints(self):\n \n         # When no parameters are given an error is raised\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             portal.get_tool()\n \n     def test_get_tool_tool_not_found(self):\n         """Test that error msg lists available tools if a tool is not found."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError) as cm:\n-            portal.get_tool(\'portal_foo\')\n+            portal.get_tool("portal_foo")\n \n         self.assertTrue(\n             str(cm.exception).startswith(\n@@ -185,23 +188,23 @@ def test_get_tool_tool_not_found(self):\n \n         # A selection of portal tools which should exist in all plone versions\n         should_be_theres = (\n-            \'portal_setup\',\n-            \'portal_catalog\',\n+            "portal_setup",\n+            "portal_catalog",\n         )\n \n         for should_be_there in should_be_theres:\n-            self.assertIn((should_be_there + \'\\n\'), str(cm.exception))\n+            self.assertIn((should_be_there + "\\n"), str(cm.exception))\n \n     def test_get_tool(self):\n         """Test to validate the tool name."""\n \n         self.assertEqual(\n-            portal.get_tool(name=\'portal_catalog\'),\n-            getToolByName(self.portal, \'portal_catalog\'),\n+            portal.get_tool(name="portal_catalog"),\n+            getToolByName(self.portal, "portal_catalog"),\n         )\n         self.assertEqual(\n-            portal.get_tool(name=\'portal_membership\'),\n-            getToolByName(self.portal, \'portal_membership\'),\n+            portal.get_tool(name="portal_membership"),\n+            getToolByName(self.portal, "portal_membership"),\n         )\n \n     def test_send_email_constraints(self):\n@@ -215,18 +218,18 @@ def test_send_email_constraints(self):\n         # recipient, subject and body are required\n         with self.assertRaises(MissingParameterError):\n             portal.send_email(\n-                subject=\'Beer\',\n-                body=\'To beer or not to beer, that is the question\',\n+                subject="Beer",\n+                body="To beer or not to beer, that is the question",\n             )\n         with self.assertRaises(MissingParameterError):\n             portal.send_email(\n-                recipient=\'joe@example.org\',\n-                subject=\'Beer\',\n+                recipient="joe@example.org",\n+                subject="Beer",\n             )\n         with self.assertRaises(MissingParameterError):\n             portal.send_email(\n-                recipient=\'joe@example.org\',\n-                body=\'To beer or not to beer, that is the question\',\n+                recipient="joe@example.org",\n+                body="To beer or not to beer, that is the question",\n             )\n \n     def test_send_email(self):\n@@ -235,56 +238,56 @@ def test_send_email(self):\n         self.mailhost.reset()\n \n         portal.send_email(\n-            recipient=\'bob@plone.org\',\n-            sender=\'noreply@plone.org\',\n-            subject=\'Trappist\',\n-            body=\'One for you Bob!\',\n+            recipient="bob@plone.org",\n+            sender="noreply@plone.org",\n+            subject="Trappist",\n+            body="One for you Bob!",\n         )\n \n         self.assertEqual(len(self.mailhost.messages), 1)\n         msg = message_from_bytes(self.mailhost.messages[0])\n-        self.assertEqual(msg[\'To\'], \'bob@plone.org\')\n-        self.assertEqual(msg[\'From\'], \'noreply@plone.org\')\n-        self.assertEqual(msg[\'Subject\'], \'=?utf-8?q?Trappist?=\')\n-        self.assertEqual(msg.get_payload(), \'One for you Bob!\')\n+        self.assertEqual(msg["To"], "bob@plone.org")\n+        self.assertEqual(msg["From"], "noreply@plone.org")\n+        self.assertEqual(msg["Subject"], "=?utf-8?q?Trappist?=")\n+        self.assertEqual(msg.get_payload(), "One for you Bob!")\n         self.mailhost.reset()\n \n         # When no sender is set, we take the portal properties.\n         portal.send_email(\n-            recipient=\'bob@plone.org\',\n-            subject=\'Trappist\',\n-            body=\'One for you Bob!\',\n+            recipient="bob@plone.org",\n+            subject="Trappist",\n+            body="One for you Bob!",\n         )\n \n         self.assertEqual(len(self.mailhost.messages), 1)\n         msg = message_from_bytes(self.mailhost.messages[0])\n-        self.assertEqual(msg[\'From\'], \'Portal Owner <sender@example.org>\')\n+        self.assertEqual(msg["From"], "Portal Owner <sender@example.org>")\n \n     def test_send_email_without_configured_mailhost(self):\n         """By default, the MailHost is not configured yet, so we cannot\n         send email.\n         """\n         if HAS_PLONE5:\n-            old_value = portal.get_registry_record(\'plone.email_from_address\')\n-            portal.set_registry_record(\'plone.email_from_address\', \'\')  # ASCII\n+            old_value = portal.get_registry_record("plone.email_from_address")\n+            portal.set_registry_record("plone.email_from_address", "")  # ASCII\n         else:\n             old_smtp_host = self.portal.MailHost.smtp_host\n             self.portal.MailHost.smtp_host = None\n \n         with self.assertRaises(ValueError):\n             portal.send_email(\n-                recipient=\'bob@plone.org\',\n-                sender=\'noreply@plone.org\',\n-                subject=\'Trappist\',\n-                body=\'One for you Bob!\',\n+                recipient="bob@plone.org",\n+                sender="noreply@plone.org",\n+                subject="Trappist",\n+                body="One for you Bob!",\n             )\n \n         if HAS_PLONE5:\n-            portal.set_registry_record(\'plone.email_from_address\', old_value)\n+            portal.set_registry_record("plone.email_from_address", old_value)\n         else:\n             self.portal.MailHost.smtp_host = old_smtp_host\n \n-    @mock.patch(\'plone.api.portal.parseaddr\')\n+    @mock.patch("plone.api.portal.parseaddr")\n     def test_send_email_parseaddr(self, mock_parseaddr):\n         """Simulate faulty parsing in parseaddr, from_address should be\n         default email_from_address.\n@@ -292,44 +295,43 @@ def test_send_email_parseaddr(self, mock_parseaddr):\n \n         self.mailhost.reset()\n \n-        mock_parseaddr.return_value = (\'Chuck Norris\', \'chuck@norris.org\')\n+        mock_parseaddr.return_value = ("Chuck Norris", "chuck@norris.org")\n         portal.send_email(\n-            recipient=\'bob@plone.org\',\n-            subject=\'Trappist\',\n-            body=\'One for you Bob!\',\n+            recipient="bob@plone.org",\n+            subject="Trappist",\n+            body="One for you Bob!",\n         )\n \n     def test_send_email_with_config_in_registry(self):\n-        """Test mail-setting being stored in registry\n-        """\n+        """Test mail-setting being stored in registry"""\n         self.mailhost.reset()\n \n         portal.set_registry_record(\n-            \'plone.email_from_address\',\n-            \'reg@example.org\',\n+            "plone.email_from_address",\n+            "reg@example.org",\n         )  # ASCII\n         portal.set_registry_record(\n-            \'plone.email_from_name\',\n-            \'Registry\',\n+            "plone.email_from_name",\n+            "Registry",\n         )  # TextLine\n         portal.send_email(\n-            recipient=\'bob@plone.org\',\n-            subject=\'Trappist\',\n-            body=\'One for you Bob!\',\n+            recipient="bob@plone.org",\n+            subject="Trappist",\n+            body="One for you Bob!",\n         )\n         self.assertEqual(len(self.mailhost.messages), 1)\n         msg = message_from_bytes(self.mailhost.messages[0])\n-        self.assertEqual(msg[\'From\'], \'Registry <reg@example.org>\')\n+        self.assertEqual(msg["From"], "Registry <reg@example.org>")\n \n     def test_send_email_with_printingmailhost(self):\n-        """ Test that send_email does not raise an exception when\n+        """Test that send_email does not raise an exception when\n         Products.PrintingMailHost is installed and active.\n         """\n         old_flag = portal.PRINTINGMAILHOST_ENABLED\n \n         if HAS_PLONE5:\n-            old_value = portal.get_registry_record(\'plone.email_from_address\')\n-            portal.set_registry_record(\'plone.email_from_address\', \'\')  # ASCII\n+            old_value = portal.get_registry_record("plone.email_from_address")\n+            portal.set_registry_record("plone.email_from_address", "")  # ASCII\n         else:\n             old_smtp_host = self.portal.MailHost.smtp_host\n             self.portal.MailHost.smtp_host = None\n@@ -338,24 +340,24 @@ def test_send_email_with_printingmailhost(self):\n         portal.PRINTINGMAILHOST_ENABLED = False\n         with self.assertRaises(ValueError):\n             portal.send_email(\n-                recipient=\'bob@plone.org\',\n-                sender=\'noreply@plone.org\',\n-                subject=\'Trappist\',\n-                body=\'One for you Bob!\',\n+                recipient="bob@plone.org",\n+                sender="noreply@plone.org",\n+                subject="Trappist",\n+                body="One for you Bob!",\n             )\n \n         # PrintingMailHost enabled\n         portal.PRINTINGMAILHOST_ENABLED = True\n         portal.send_email(\n-            recipient=\'bob@plone.org\',\n-            sender=\'noreply@plone.org\',\n-            subject=\'Trappist\',\n-            body=\'One for you Bob!\',\n+            recipient="bob@plone.org",\n+            sender="noreply@plone.org",\n+            subject="Trappist",\n+            body="One for you Bob!",\n         )\n \n         # Prevents sideeffects in other tests.\n         if HAS_PLONE5:\n-            portal.set_registry_record(\'plone.email_from_address\', old_value)\n+            portal.set_registry_record("plone.email_from_address", old_value)\n         else:\n             self.portal.MailHost.smtp_host = old_smtp_host\n         portal.PRINTINGMAILHOST_ENABLED = old_flag\n@@ -365,6 +367,7 @@ def test_get_localized_time_constraints(self):\n \n         # When no parameters are given an error is raised\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             portal.get_localized_time()\n \n@@ -379,18 +382,18 @@ def test_get_localized_time(self):\n             datetime=DateTime.DateTime(1999, 12, 31, 23, 59),\n             long_format=True,\n         )\n-        self.assertEqual(result, \'Dec 31, 1999 11:59 PM\')\n+        self.assertEqual(result, "Dec 31, 1999 11:59 PM")\n \n         result = portal.get_localized_time(\n             datetime=DateTime.DateTime(1999, 12, 31, 23, 59),\n             time_only=True,\n         )\n-        self.assertEqual(result, \'11:59 PM\')\n+        self.assertEqual(result, "11:59 PM")\n \n         result = portal.get_localized_time(\n             datetime=DateTime.DateTime(1999, 12, 31, 23, 59),\n         )\n-        self.assertEqual(result, \'Dec 31, 1999\')\n+        self.assertEqual(result, "Dec 31, 1999")\n \n     def test_get_localized_time_python_datetime(self):\n         """Test getting the localized time using Python datetime.datetime."""\n@@ -403,18 +406,18 @@ def test_get_localized_time_python_datetime(self):\n             datetime=datetime(1999, 12, 31, 23, 59),\n             long_format=True,\n         )\n-        self.assertEqual(result, \'Dec 31, 1999 11:59 PM\')\n+        self.assertEqual(result, "Dec 31, 1999 11:59 PM")\n \n         result = portal.get_localized_time(\n             datetime=datetime(1999, 12, 31, 23, 59),\n             time_only=True,\n         )\n-        self.assertEqual(result, \'11:59 PM\')\n+        self.assertEqual(result, "11:59 PM")\n \n         result = portal.get_localized_time(\n             datetime=datetime(1999, 12, 31, 23, 59),\n         )\n-        self.assertEqual(result, \'Dec 31, 1999\')\n+        self.assertEqual(result, "Dec 31, 1999")\n \n     def test_get_localized_time_python_date(self):\n         """Test getting the localized time using Python datetime.date."""\n@@ -427,18 +430,18 @@ def test_get_localized_time_python_date(self):\n             datetime=date(1999, 12, 31),\n             long_format=True,\n         )\n-        self.assertEqual(result, \'Dec 31, 1999\')\n+        self.assertEqual(result, "Dec 31, 1999")\n \n         result = portal.get_localized_time(\n             datetime=date(1999, 12, 31),\n             time_only=True,\n         )\n-        self.assertEqual(result, \'\')\n+        self.assertEqual(result, "")\n \n         result = portal.get_localized_time(\n             datetime=date(1999, 12, 31),\n         )\n-        self.assertEqual(result, \'Dec 31, 1999\')\n+        self.assertEqual(result, "Dec 31, 1999")\n \n     def test_show_message_constraints(self):\n         """Test the constraints for show_message."""\n@@ -450,28 +453,29 @@ def test_show_message_constraints(self):\n \n         # message and request are required\n         with self.assertRaises(MissingParameterError):\n-            portal.show_message(request=self.layer[\'request\'])\n+            portal.show_message(request=self.layer["request"])\n \n         with self.assertRaises(MissingParameterError):\n-            portal.show_message(message=\'Beer is brewing.\')\n+            portal.show_message(message="Beer is brewing.")\n \n     def test_show_message(self):\n         """Test to see if message appears."""\n \n         from Products.statusmessages.interfaces import IStatusMessage\n-        request = self.layer[\'request\']\n-        portal.show_message(message=\'Blueberries!\', request=request)\n+\n+        request = self.layer["request"]\n+        portal.show_message(message="Blueberries!", request=request)\n         messages = IStatusMessage(request)\n         show = messages.show()\n         self.assertEqual(len(show), 1)\n-        self.assertIn(\'Blueberries!\', show[0].message)\n-        portal.show_message(message=\'One\', request=request)\n-        portal.show_message(message=\'Two\', request=request)\n+        self.assertIn("Blueberries!", show[0].message)\n+        portal.show_message(message="One", request=request)\n+        portal.show_message(message="Two", request=request)\n         messages = IStatusMessage(request)\n         show = messages.show()\n         self.assertEqual(len(show), 2)\n-        self.assertEqual(show[0].message, \'One\')\n-        self.assertEqual(show[1].message, \'Two\')\n+        self.assertEqual(show[0].message, "One")\n+        self.assertEqual(show[1].message, "Two")\n \n     def test_get_navigation_root(self):\n         """Test to see if the navigation_root is returned."""\n@@ -480,41 +484,44 @@ def test_get_navigation_root(self):\n         self.assertTrue(INavigationRoot.providedBy(navigation_root))\n \n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             portal.get_navigation_root()\n \n     def test_get_existing_registry_record(self):\n         """Test that existing registry records are returned correctly."""\n         registry = getUtility(IRegistry)\n-        registry.records[\'plone.api.norris_power\'] = Record(\n+        registry.records["plone.api.norris_power"] = Record(\n             field.TextLine(title="Chuck Norris\' Power"),\n         )\n-        registry.records[\'plone.api.unset\'] = Record(\n-            field.TextLine(title=\'An unset field\'),\n+        registry.records["plone.api.unset"] = Record(\n+            field.TextLine(title="An unset field"),\n         )\n-        registry[\'plone.api.norris_power\'] = \'infinite\'\n+        registry["plone.api.norris_power"] = "infinite"\n \n         self.assertEqual(\n-            portal.get_registry_record(\'plone.api.norris_power\'),\n-            \'infinite\',\n+            portal.get_registry_record("plone.api.norris_power"),\n+            "infinite",\n         )\n \n         self.assertEqual(\n-            portal.get_registry_record(\'plone.api.unset\'),\n+            portal.get_registry_record("plone.api.unset"),\n             None,\n         )\n \n     def test_get_missing_registry_record(self):\n         """Test that getting a missing registry record raises an Exception."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             portal.get_registry_record()\n \n     def test_get_invalid_registry_record(self):\n         """Test that getting an invalid registry record raises an Exception."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n-            portal.get_registry_record(name=dict({\'foo\': \'bar\'}))\n+            portal.get_registry_record(name=dict({"foo": "bar"}))\n \n     def test_get_invalid_registry_record_msg(self):\n         """Test that the error message from trying to get a\n@@ -524,32 +531,32 @@ def test_get_invalid_registry_record_msg(self):\n         from plone.api.exc import InvalidParameterError\n \n         with self.assertRaises(InvalidParameterError) as cm:\n-            portal.get_registry_record(name=\'nonexistent.sharepoint.power\')\n+            portal.get_registry_record(name="nonexistent.sharepoint.power")\n         exc_str = str(cm.exception)\n \n         # Check if there is an error message.\n-        self.assertTrue(exc_str.startswith(\'Cannot find a record with name\'))\n+        self.assertTrue(exc_str.startswith("Cannot find a record with name"))\n \n     def test_get_invalid_registry_record_suggestions(self):\n         from plone.api.exc import InvalidParameterError\n \n         # Check without suggestion\n         with self.assertRaises(InvalidParameterError) as cm:\n-            portal.get_registry_record(name=\'a random unique string\')\n+            portal.get_registry_record(name="a random unique string")\n         exc_str = str(cm.exception)\n \n         # Check for an error, but no suggestions.\n-        self.assertTrue(exc_str.startswith(\'Cannot find a record with name\'))\n-        self.assertFalse(\'Did you mean?:\' in exc_str)\n+        self.assertTrue(exc_str.startswith("Cannot find a record with name"))\n+        self.assertFalse("Did you mean?:" in exc_str)\n \n         # Check with suggestions\n         with self.assertRaises(InvalidParameterError) as cm:\n-            portal.get_registry_record(name=\'querystring\')\n+            portal.get_registry_record(name="querystring")\n         exc_str = str(cm.exception)\n \n         # Check for an error with suggestions.\n-        self.assertTrue(exc_str.startswith(\'Cannot find a record with name\'))\n-        self.assertTrue(\'Did you mean?:\' in exc_str)\n+        self.assertTrue(exc_str.startswith("Cannot find a record with name"))\n+        self.assertTrue("Did you mean?:" in exc_str)\n \n     def test_get_registry_record_from_interface(self):\n         """Test that getting a record from an interface works."""\n@@ -558,7 +565,7 @@ def test_get_registry_record_from_interface(self):\n \n         self.assertEqual(\n             portal.get_registry_record(\n-                \'field_one\',\n+                "field_one",\n                 interface=IMyRegistrySettings,\n             ),\n             None,\n@@ -567,9 +574,10 @@ def test_get_registry_record_from_interface(self):\n     def test_get_invalid_interface_for_registry_record(self):\n         """Test that passing an invalid interface raises an Exception."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             portal.get_registry_record(\n-                \'something\',\n+                "something",\n                 interface=ImNotAnInterface,\n             )\n \n@@ -578,27 +586,29 @@ def test_get_invalid_interface_for_registry_record_msg(self):\n         interface.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError) as cm:\n             portal.get_registry_record(\n-                \'something\',\n+                "something",\n                 interface=ImNotAnInterface,\n             )\n         exc_str = str(cm.exception)\n \n         # Check if there is an error message.\n-        self.assertTrue(exc_str.startswith(\'The interface parameter has to \'))\n+        self.assertTrue(exc_str.startswith("The interface parameter has to "))\n \n     def test_get_invalid_record_in_interface_for_registry_record(self):\n         """Test that trying to get an invalid field from an interface raises\n         an Exception.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n         with self.assertRaises(InvalidParameterError):\n             portal.get_registry_record(\n-                \'non_existing_field\',\n+                "non_existing_field",\n                 interface=IMyRegistrySettings,\n             )\n \n@@ -607,24 +617,25 @@ def test_get_invalid_record_in_interface_for_registry_record_msg(self):\n         field from an interface.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n         with self.assertRaises(InvalidParameterError) as cm:\n             portal.get_registry_record(\n-                \'non_existing_field\',\n+                "non_existing_field",\n                 interface=IMyRegistrySettings,\n             )\n         exc_str = str(cm.exception)\n \n         # Check if there is an error message.\n-        self.assertTrue(exc_str.startswith(\'Cannot find a record with name \'))\n-        self.assertTrue(exc_str.find(\' on interface \') != -1)\n-        self.assertTrue(exc_str.find(\'field_one\') != -1)\n-        self.assertTrue(exc_str.find(\'field_two\') != -1)\n+        self.assertTrue(exc_str.startswith("Cannot find a record with name "))\n+        self.assertTrue(exc_str.find(" on interface ") != -1)\n+        self.assertTrue(exc_str.find("field_one") != -1)\n+        self.assertTrue(exc_str.find("field_two") != -1)\n \n     def test_get_invalid_record_with_default(self):\n-        """ If get_registry_record is called with a default parameter\n+        """If get_registry_record is called with a default parameter\n         and the record cannot be resolved\n         the default will be returned instead of raising InvalidParameterError\n         """\n@@ -633,7 +644,7 @@ def test_get_invalid_record_with_default(self):\n \n         self.assertEqual(\n             portal.get_registry_record(\n-                \'non_existing_field\',\n+                "non_existing_field",\n                 interface=IMyRegistrySettings,\n                 default=1,\n             ),\n@@ -641,7 +652,7 @@ def test_get_invalid_record_with_default(self):\n         )\n         self.assertEqual(\n             portal.get_registry_record(\n-                \'something\',\n+                "something",\n                 default=2,\n             ),\n             2,\n@@ -650,17 +661,18 @@ def test_get_invalid_record_with_default(self):\n     def test_set_valid_registry_record(self):\n         """Test that setting a valid registry record succeeds."""\n         registry = getUtility(IRegistry)\n-        registry.records[\'plone.api.plone_power\'] = Record(\n+        registry.records["plone.api.plone_power"] = Record(\n             field.TextLine(title="Plone\'s Power"),\n         )\n-        portal.set_registry_record(\'plone.api.plone_power\', \'awesome\')\n-        self.assertEqual(registry[\'plone.api.plone_power\'], \'awesome\')\n+        portal.set_registry_record("plone.api.plone_power", "awesome")\n+        self.assertEqual(registry["plone.api.plone_power"], "awesome")\n \n     def test_set_missing_param_registry_record(self):\n         """Test that when set_registry_record is called without\n         parameters, a MissingParameterError exception is raised.\n         """\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             portal.set_registry_record()\n \n@@ -669,10 +681,11 @@ def test_set_non_existing_record_value(self):\n         an Exception.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             portal.set_registry_record(\n-                name=\'nonexistent.sharepoint.power\',\n-                value=\'Zero\',\n+                name="nonexistent.sharepoint.power",\n+                value="Zero",\n             )\n \n     def test_set_no_value_param_for_existing_record(self):\n@@ -681,23 +694,25 @@ def test_set_no_value_param_for_existing_record(self):\n         an Exception.\n         """\n         registry = getUtility(IRegistry)\n-        registry.records[\'plone.api.plone_power\'] = Record(\n+        registry.records["plone.api.plone_power"] = Record(\n             field.TextLine(title="Plone\'s Power"),\n         )\n \n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n-            portal.set_registry_record(name=\'plone.api.plone_power\')\n+            portal.set_registry_record(name="plone.api.plone_power")\n \n     def test_set_invalid_key_type_record(self):\n         """Test that trying to set the value of a record by passing a\n         list for the record name instead of a string, raises an error.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             portal.set_registry_record(\n-                name=[\'foo\', \'bar\'],\n-                value=\'baz\',\n+                name=["foo", "bar"],\n+                value="baz",\n             )\n \n     def test_set_registry_record_from_interface(self):\n@@ -705,15 +720,15 @@ def test_set_registry_record_from_interface(self):\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n-        text = \'random text\'\n+        text = "random text"\n         portal.set_registry_record(\n-            \'field_one\',\n+            "field_one",\n             text,\n             interface=IMyRegistrySettings,\n         )\n         self.assertEqual(\n             portal.get_registry_record(\n-                \'field_one\',\n+                "field_one",\n                 interface=IMyRegistrySettings,\n             ),\n             text,\n@@ -727,28 +742,28 @@ def test_set_registry_record_with_invalid_value(self):\n         and duplicate: https://github.com/plone/plone.api/issues/464\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyOtherRegistrySettings)\n         with self.assertRaises(InvalidParameterError) as cm:\n             portal.set_registry_record(\n-                \'field_three\',\n+                "field_three",\n                 42,\n                 interface=IMyOtherRegistrySettings,\n             )\n         exc_str = str(cm.exception)\n \n-        self.assertIn(\n-            "The value parameter for the field field_three", exc_str\n-        )\n+        self.assertIn("The value parameter for the field field_three", exc_str)\n         self.assertIn("TextLine", exc_str)\n \n     def test_set_registry_record_on_invalid_interface(self):\n         """Test that passing an invalid interface raises an Exception."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             portal.set_registry_record(\n-                \'something\',\n-                \'value\',\n+                "something",\n+                "value",\n                 interface=ImNotAnInterface,\n             )\n \n@@ -757,29 +772,31 @@ def test_set_registry_record_on_invalid_interface_msg(self):\n         interface.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError) as cm:\n             portal.set_registry_record(\n-                \'something\',\n-                \'value\',\n+                "something",\n+                "value",\n                 interface=ImNotAnInterface,\n             )\n         exc_str = str(cm.exception)\n \n         # Check if there is an error message.\n-        self.assertTrue(exc_str.startswith(\'The interface parameter has to \'))\n+        self.assertTrue(exc_str.startswith("The interface parameter has to "))\n \n     def test_set_invalid_registry_record_from_interface(self):\n         """Test that trying to set an invalid field from an interface raises\n         an Exception.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n         with self.assertRaises(InvalidParameterError):\n             portal.set_registry_record(\n-                \'non_existing_field\',\n-                \'value\',\n+                "non_existing_field",\n+                "value",\n                 interface=IMyRegistrySettings,\n             )\n \n@@ -788,35 +805,37 @@ def test_set_invalid_registry_record_from_interface_msg(self):\n         field from an interface.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n         with self.assertRaises(InvalidParameterError) as cm:\n             portal.set_registry_record(\n-                \'non_existing_field\',\n-                \'value\',\n+                "non_existing_field",\n+                "value",\n                 interface=IMyRegistrySettings,\n             )\n         exc_str = str(cm.exception)\n \n         # Check if there is an error message.\n-        self.assertTrue(exc_str.startswith(\'Cannot find a record with name \'))\n-        self.assertTrue(exc_str.find(\' on interface \') != -1)\n-        self.assertTrue(exc_str.find(\'field_one\') != -1)\n-        self.assertTrue(exc_str.find(\'field_two\') != -1)\n+        self.assertTrue(exc_str.startswith("Cannot find a record with name "))\n+        self.assertTrue(exc_str.find(" on interface ") != -1)\n+        self.assertTrue(exc_str.find("field_one") != -1)\n+        self.assertTrue(exc_str.find("field_two") != -1)\n \n     def test_set_invalid_value_on_registry_record_from_interface(self):\n         """Test that setting a value not meant for the record raises an\n         Exception..\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n         with self.assertRaises(InvalidParameterError):\n             portal.set_registry_record(\n-                \'field_one\',\n-                b\'value\',\n+                "field_one",\n+                b"value",\n                 interface=IMyRegistrySettings,\n             )\n \n@@ -825,50 +844,50 @@ def test_set_invalid_value_on_registry_record_from_interface_msg(self):\n         Exception..\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n         with self.assertRaises(InvalidParameterError) as cm:\n             portal.set_registry_record(\n-                \'field_one\',\n-                b\'value\',\n+                "field_one",\n+                b"value",\n                 interface=IMyRegistrySettings,\n             )\n         exc_str = str(cm.exception)\n \n         # Check if there is an error message.\n         self.assertTrue(\n-            exc_str.startswith(\'The value parameter for the field\'),\n+            exc_str.startswith("The value parameter for the field"),\n         )\n-        self.assertTrue(exc_str.find(\' needs to be \') != -1)\n-        self.assertTrue(exc_str.find(\'TextLine\') != -1)\n+        self.assertTrue(exc_str.find(" needs to be ") != -1)\n+        self.assertTrue(exc_str.find("TextLine") != -1)\n \n     def test_get_default_language(self):\n         """Test that default language is properly returned."""\n-        self.assertEqual(portal.get_default_language(), \'en\')\n+        self.assertEqual(portal.get_default_language(), "en")\n \n     def test_get_current_language(self):\n         """Test that current language is properly returned."""\n-        self.assertEqual(portal.get_current_language(portal.get()), \'en\')\n-        self.layer[\'request\'][\'LANGUAGE\'] = \'fr\'\n-        self.assertEqual(portal.get_current_language(), \'fr\')\n+        self.assertEqual(portal.get_current_language(portal.get()), "en")\n+        self.layer["request"]["LANGUAGE"] = "fr"\n+        self.assertEqual(portal.get_current_language(), "fr")\n \n     def test_translate(self):\n         """Test translation."""\n         self.assertEqual(\n             portal.translate(\n-                \'A workflow action triggers a workflow transition on an \'\n-                \'object.\',\n-                lang=\'es\',\n+                "A workflow action triggers a workflow transition on an " "object.",\n+                lang="es",\n             ),\n-            \'Una acci\xc3\xb3n de flujo de trabajo dispara una transici\xc3\xb3n de \'\n-            \'flujo de trabajo en un objeto.\',\n+            "Una acci\xc3\xb3n de flujo de trabajo dispara una transici\xc3\xb3n de "\n+            "flujo de trabajo en un objeto.",\n         )\n         self.assertEqual(\n             portal.translate(\n-                \'month_apr\',\n-                domain=\'plonelocales\',\n-                lang=\'fr\',\n+                "month_apr",\n+                domain="plonelocales",\n+                lang="fr",\n             ),\n-            \'Avril\',\n+            "Avril",\n         )\ndiff --git a/src/plone/api/tests/test_relation.py b/src/plone/api/tests/test_relation.py\nindex 16c92576..24dd4f99 100644\n--- a/src/plone/api/tests/test_relation.py\n+++ b/src/plone/api/tests/test_relation.py\n@@ -34,55 +34,55 @@ def setUp(self):\n         This is copied from test_content.py.\n         We may want to simplify.  But could be okay.\n         """\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n         self.blog = api.content.create(\n-            type=\'Link\',\n-            id=\'blog\',\n+            type="Link",\n+            id="blog",\n             container=self.portal,\n         )\n         self.about = api.content.create(\n-            type=\'Folder\',\n-            id=\'about\',\n+            type="Folder",\n+            id="about",\n             container=self.portal,\n         )\n         self.events = api.content.create(\n-            type=\'Folder\',\n-            id=\'events\',\n+            type="Folder",\n+            id="events",\n             container=self.portal,\n         )\n \n         self.team = api.content.create(\n             container=self.about,\n-            type=\'Document\',\n-            id=\'team\',\n+            type="Document",\n+            id="team",\n         )\n         self.contact = api.content.create(\n             container=self.about,\n-            type=\'Document\',\n-            id=\'contact\',\n+            type="Document",\n+            id="contact",\n         )\n \n         self.training = api.content.create(\n             container=self.events,\n-            type=\'Event\',\n-            id=\'training\',\n+            type="Event",\n+            id="training",\n         )\n         self.conference = api.content.create(\n             container=self.events,\n-            type=\'Event\',\n-            id=\'conference\',\n+            type="Event",\n+            id="conference",\n         )\n         self.sprint = api.content.create(\n             container=self.events,\n-            type=\'Event\',\n-            id=\'sprint\',\n+            type="Event",\n+            id="sprint",\n         )\n \n         self.image = api.content.create(\n             container=self.portal,\n-            type=\'Image\',\n-            id=\'image\',\n+            type="Image",\n+            id="image",\n         )\n \n     def test_create_constraints(self):\n@@ -98,14 +98,14 @@ def test_create_constraints(self):\n         with self.assertRaises(MissingParameterError):\n             api.relation.create(\n                 target=self.blog,\n-                relationship=\'link\',\n+                relationship="link",\n             )\n \n         # Check the constraints for the target parameter\n         with self.assertRaises(MissingParameterError):\n             api.relation.create(\n                 source=self.about,\n-                relationship=\'link\',\n+                relationship="link",\n             )\n \n         # Check the constraints for the relationship parameter\n@@ -116,12 +116,12 @@ def test_create_constraints(self):\n             )\n \n         # We require a source with portal_type\n-        app = self.layer[\'app\']\n+        app = self.layer["app"]\n         with self.assertRaises(InvalidParameterError):\n             api.relation.create(\n                 source=app,\n                 target=self.blog,\n-                relationship=\'link\',\n+                relationship="link",\n             )\n \n         # We require a target with portal_type\n@@ -129,7 +129,7 @@ def test_create_constraints(self):\n             api.relation.create(\n                 source=self.about,\n                 target=app,\n-                relationship=\'link\',\n+                relationship="link",\n             )\n \n         # We require a string relationship\n@@ -147,18 +147,18 @@ def test_create_relation(self):\n         relations = api.relation.get(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         self.assertEqual(len(relations), 0)\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         relations = api.relation.get(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         self.assertEqual(len(relations), 1)\n         relation = relations[0]\n@@ -170,28 +170,27 @@ def test_create_relation(self):\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'relatedItems\',\n+            relationship="relatedItems",\n         )\n         self.assertEqual(len(self.about.relatedItems), 1)\n         self.assertIsInstance(self.about.relatedItems[0], RelationValue)\n \n         # create relation with a fieldname that is no relationfield\n-        self.assertEqual(self.about.description, \'\')\n+        self.assertEqual(self.about.description, "")\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'description\',\n+            relationship="description",\n         )\n-        self.assertEqual(self.about.description, \'\')\n+        self.assertEqual(self.about.description, "")\n         self.assertEqual(len(api.relation.get(source=self.about, target=self.blog)), 3)\n \n-\n     def test_delete_constraints(self):\n         """Test the constraints when deleting relations."""\n         from plone.api.exc import InvalidParameterError\n \n         # If source is given, it must have a portal_type.\n-        app = self.layer[\'app\']\n+        app = self.layer["app"]\n         with self.assertRaises(InvalidParameterError):\n             api.relation.delete(source=app)\n \n@@ -208,17 +207,17 @@ def test_delete_relation(self):\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.delete(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         relations = api.relation.get(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         self.assertEqual(len(relations), 0)\n \n@@ -227,12 +226,12 @@ def test_delete_fieldrelation(self):\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'relatedItems\',\n+            relationship="relatedItems",\n         )\n         self.assertEqual(len(api.relation.get(source=self.about)), 2)\n         self.assertIsInstance(self.about.relatedItems[0], RelationValue)\n@@ -240,7 +239,7 @@ def test_delete_fieldrelation(self):\n         api.relation.delete(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'relatedItems\',\n+            relationship="relatedItems",\n         )\n         self.assertEqual(len(api.relation.get(source=self.about)), 1)\n         self.assertEqual(len(self.about.relatedItems), 0)\n@@ -250,17 +249,17 @@ def test_delete_one_fieldrelation(self):\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'relatedItems\',\n+            relationship="relatedItems",\n         )\n         api.relation.create(\n             source=self.about,\n             target=self.events,\n-            relationship=\'relatedItems\',\n+            relationship="relatedItems",\n         )\n         self.assertEqual(len(api.relation.get(source=self.about)), 3)\n         self.assertIsInstance(self.about.relatedItems[0], RelationValue)\n@@ -268,7 +267,7 @@ def test_delete_one_fieldrelation(self):\n         api.relation.delete(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'relatedItems\',\n+            relationship="relatedItems",\n         )\n         self.assertEqual(len(api.relation.get(source=self.about)), 2)\n         self.assertEqual(len(self.about.relatedItems), 1)\n@@ -279,21 +278,21 @@ def test_deleted_relation_is_purged(self):\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'description\',\n+            relationship="description",\n         )\n-        self.assertEqual(self.about.description, \'\')\n+        self.assertEqual(self.about.description, "")\n         self.assertEqual(len(api.relation.get(source=self.about)), 1)\n-        rels = relation_catalog.findRelations({\'from_attribute\': \'description\'})\n+        rels = relation_catalog.findRelations({"from_attribute": "description"})\n         self.assertEqual(len([i for i in rels]), 1)\n \n         api.relation.delete(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'description\',\n+            relationship="description",\n         )\n         self.assertEqual(len(api.relation.get(source=self.about)), 0)\n-        self.assertEqual(self.about.description, \'\')\n-        rels = relation_catalog.findRelations({\'from_attribute\': \'description\'})\n+        self.assertEqual(self.about.description, "")\n+        rels = relation_catalog.findRelations({"from_attribute": "description"})\n         self.assertEqual(len([i for i in rels]), 0)\n \n     def test_get_constraints(self):\n@@ -301,7 +300,7 @@ def test_get_constraints(self):\n         from plone.api.exc import InvalidParameterError\n \n         # If source is given, it must have a portal_type.\n-        app = self.layer[\'app\']\n+        app = self.layer["app"]\n         with self.assertRaises(InvalidParameterError):\n             api.relation.get(source=app)\n \n@@ -318,106 +317,114 @@ def test_get_relation(self):\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.events,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.about.team,\n             target=self.events,\n-            relationship=\'team\',\n+            relationship="team",\n         )\n         api.relation.create(\n             source=self.events,\n             target=self.portal.image,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         self.assertEqual(len(api.relation.get(source=self.about)), 1)\n         self.assertIsInstance(api.relation.get(source=self.about), list)\n         self.assertIsInstance(api.relation.get(source=self.about)[0], RelationValue)\n \n         self.assertEqual(len(api.relation.get(target=self.blog)), 2)\n-        self.assertEqual(len(api.relation.get(relationship=\'link\')), 3)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 3)\n \n-        self.assertEqual(len(api.relation.get(source=self.about, relationship=\'link\')), 1)\n-        self.assertEqual(len(api.relation.get(source=self.about, target=self.events)), 0)\n+        self.assertEqual(\n+            len(api.relation.get(source=self.about, relationship="link")), 1\n+        )\n+        self.assertEqual(\n+            len(api.relation.get(source=self.about, target=self.events)), 0\n+        )\n         self.assertEqual(len(api.relation.get(source=self.about, target=self.blog)), 1)\n \n         self.assertEqual(len(api.relation.get(source=self.events)), 2)\n-        self.assertEqual(len(api.relation.get(relationship=\'team\')), 1)\n+        self.assertEqual(len(api.relation.get(relationship="team")), 1)\n \n     def test_get_relation_as_dict(self):\n         """Test getting relations as dicts"""\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.events,\n             target=self.blog,\n-            relationship=\'bloglink\',\n+            relationship="bloglink",\n+        )\n+        self.assertEqual(\n+            len(api.relation.get(relationship="link", as_dict=True)["link"]), 1\n         )\n-        self.assertEqual(len(api.relation.get(relationship=\'link\', as_dict=True)[\'link\']), 1)\n         rels = api.relation.get(target=self.blog, as_dict=True)\n-        self.assertEqual(len(rels[\'link\']), 1)\n-        self.assertEqual(len(rels[\'bloglink\']), 1)\n+        self.assertEqual(len(rels["link"]), 1)\n+        self.assertEqual(len(rels["bloglink"]), 1)\n \n     def test_get_broken_relation(self):\n         """Test that broken relations are ignored."""\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.events,\n             target=self.portal.image,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         self.assertEqual(len(api.relation.get(source=self.about)), 1)\n-        self.assertEqual(len(api.relation.get(relationship=\'link\')), 2)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 2)\n \n         # break a relation\n-        self.portal._delObject(\'blog\')\n+        self.portal._delObject("blog")\n \n         self.assertEqual(len(api.relation.get(source=self.about)), 0)\n-        self.assertEqual(len(api.relation.get(relationship=\'link\')), 1)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 1)\n \n     def test_restricted_relation(self):\n         """Test that rels between inaccessible items are ignored."""\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.events,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.about.team,\n             target=self.events,\n-            relationship=\'team\',\n+            relationship="team",\n         )\n         api.relation.create(\n             source=self.events,\n             target=self.portal.image,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n-        api.content.transition(self.events, to_state=\'published\')\n-        api.content.transition(self.blog, to_state=\'published\')\n-        self.assertEqual(len(api.relation.get(relationship=\'link\')), 3)\n+        api.content.transition(self.events, to_state="published")\n+        api.content.transition(self.blog, to_state="published")\n+        self.assertEqual(len(api.relation.get(relationship="link")), 3)\n \n         # Switch user\n-        api.user.create(email=\'bob@plone.org\', username=\'bob\')\n-        setRoles(self.portal, \'bob\', [\'Member\'])\n+        api.user.create(email="bob@plone.org", username="bob")\n+        setRoles(self.portal, "bob", ["Member"])\n         logout()\n-        login(self.portal, \'bob\')\n+        login(self.portal, "bob")\n \n-        self.assertEqual(len(api.relation.get(relationship=\'link\')), 2)\n-        self.assertEqual(len(api.relation.get(relationship=\'link\', unrestricted=True)), 3)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 2)\n+        self.assertEqual(\n+            len(api.relation.get(relationship="link", unrestricted=True)), 3\n+        )\ndiff --git a/src/plone/api/tests/test_user.py b/src/plone/api/tests/test_user.py\nindex 67313238..a324647b 100644\n--- a/src/plone/api/tests/test_user.py\n+++ b/src/plone/api/tests/test_user.py\n@@ -7,14 +7,13 @@\n from plone.app.testing import logout\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n-from plone.registry.interfaces import IRegistry\n+from unittest import mock\n from zope.component import adapter\n from zope.component import getGlobalSiteManager\n from zope.component import provideAdapter\n from zope.interface import implementer\n from zope.interface import Interface\n \n-from unittest import mock\n import unittest\n \n \n@@ -25,11 +24,11 @@ class TestPloneApiUser(unittest.TestCase):\n \n     def setUp(self):\n         """Shared test environment set-up, ran before every test."""\n-        self.portal = self.layer[\'portal\']\n-        self.portal_membership = api.portal.get_tool(\'portal_membership\')\n+        self.portal = self.layer["portal"]\n+        self.portal_membership = api.portal.get_tool("portal_membership")\n \n     def _check_userid_and_username_different(self):\n-        """Ensure that the userid and username are not equal\n+        """Ensure that the userid and username are not equal.\n \n         This is important for tests which rely on differentiation between the\n         two. These tests should rely on the Test User created by\n@@ -44,22 +43,23 @@ def _check_userid_and_username_different(self):\n \n     def _set_emaillogin(self, value):\n         from plone.api.exc import InvalidParameterError\n+\n         try:\n-            api.portal.set_registry_record(\'plone.use_email_as_login\', value)\n+            api.portal.set_registry_record("plone.use_email_as_login", value)\n         except InvalidParameterError:\n             portal = api.portal.get()\n             portal.portal_properties.site_properties.use_email_as_login = value\n \n     def test_create_no_email(self):\n         """Test that exception is raised if no email is given."""\n-\n         self._set_emaillogin(True)\n \n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.user.create(\n-                username=\'chuck\',\n-                password=\'secret\',\n+                username="chuck",\n+                password="secret",\n             )\n \n     def test_get_user_userid_username(self):\n@@ -77,35 +77,35 @@ def test_get_user_userid_username(self):\n     def test_create_email_in_properties(self):\n         """Test that email is parsed from the properties."""\n         user = api.user.create(\n-            username=\'chuck\',\n-            password=\'secret\',\n-            properties={\'email\': \'chuck@norris.org\'},\n+            username="chuck",\n+            password="secret",\n+            properties={"email": "chuck@norris.org"},\n         )\n \n-        self.assertEqual(user.getProperty(\'email\'), \'chuck@norris.org\')\n+        self.assertEqual(user.getProperty("email"), "chuck@norris.org")\n \n     def test_create_no_username(self):\n         """Test create if no username is provided."""\n-\n         # If there is no username, email will be used instead\n         self._set_emaillogin(True)\n \n         user = api.user.create(\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n-        self.assertEqual(user.getUserName(), \'chuck@norris.org\')\n+        self.assertEqual(user.getUserName(), "chuck@norris.org")\n \n         # But if using emails as a username is disabled, we should get\n         # an error\n         self._set_emaillogin(False)\n \n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.create(\n-                email=\'chuck@norris.org\',\n-                password=\'secret\',\n+                email="chuck@norris.org",\n+                password="secret",\n             )\n \n     def test_create_with_username(self):\n@@ -113,76 +113,75 @@ def test_create_with_username(self):\n         self._set_emaillogin(True)\n \n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n-        self.assertEqual(user.getUserName(), \'chuck@norris.org\')\n+        self.assertEqual(user.getUserName(), "chuck@norris.org")\n \n         self._set_emaillogin(False)\n \n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n-        self.assertEqual(user.getUserName(), \'chuck\')\n+        self.assertEqual(user.getUserName(), "chuck")\n \n     def test_create_default_roles(self):\n         """Test the default role is set to member."""\n         # if create is given no roles, member is the default\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n         self.assertCountEqual(\n             api.user.get_roles(user=user),\n-            [\'Member\', \'Authenticated\'],\n+            ["Member", "Authenticated"],\n         )\n \n     def test_create_specified_roles(self):\n         """Test specific roles are set correctly."""\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n-            roles=[\'Reviewer\', \'Editor\'],\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n+            roles=["Reviewer", "Editor"],\n         )\n         self.assertCountEqual(\n             api.user.get_roles(user=user),\n-            [\'Reviewer\', \'Authenticated\', \'Editor\'],\n+            ["Reviewer", "Authenticated", "Editor"],\n         )\n \n     def test_create_no_roles(self):\n         """Test that passing an empty list give a user with no member role."""\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n             roles=[],\n         )\n         self.assertCountEqual(\n             api.user.get_roles(user=user),\n-            [\'Authenticated\'],\n+            ["Authenticated"],\n         )\n \n     def test_get_constraints(self):\n-        """Test that exception is raised if no username is given when getting\n-        the user.\n-        """\n+        """Test on raised exeption if no username is given when getting the user."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.user.get()\n \n     def test_get(self):\n         """Test getting the user."""\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n-        self.assertEqual(api.user.get(\'chuck\').id, user.id)\n+        self.assertEqual(api.user.get("chuck").id, user.id)\n \n     def test_get_current(self):\n         """Test getting the currently logged-in user."""\n@@ -194,146 +193,147 @@ def test_get_current(self):\n     def test_get_all_users(self):\n         """Test getting all users."""\n         api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n         users = [user.getUserName() for user in api.user.get_users()]\n         self.assertCountEqual(\n             users,\n-            [\'chuck\', TEST_USER_NAME],\n+            ["chuck", TEST_USER_NAME],\n         )\n \n     def test_get_groups_users(self):\n         """Test getting all users of a certain group."""\n         api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n-        api.group.create(groupname=\'staff\')\n-        api.group.add_user(username=\'chuck\', groupname=\'staff\')\n+        api.group.create(groupname="staff")\n+        api.group.add_user(username="chuck", groupname="staff")\n \n-        users = api.user.get_users(groupname=\'staff\')\n+        users = api.user.get_users(groupname="staff")\n         usernames = [user.getUserName() for user in users]\n \n-        self.assertEqual(usernames, [\'chuck\'])\n+        self.assertEqual(usernames, ["chuck"])\n \n     def test_get_users_groupname_and_group(self):\n         """Test getting users passing both groupname and group."""\n-        api.group.create(groupname=\'bacon\')\n-        bacon = api.group.get(groupname=\'bacon\')\n+        api.group.create(groupname="bacon")\n+        bacon = api.group.get(groupname="bacon")\n \n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.get_users(\n-                groupname=\'bacon\',\n+                groupname="bacon",\n                 group=bacon,\n             )\n \n     def test_get_users_nonexistent_group(self):\n         """Test getting users for a group that does not exist."""\n-\n         from plone.api.exc import GroupNotFoundError\n+\n         with self.assertRaises(GroupNotFoundError):\n-            api.user.get_users(groupname=\'bacon\')\n+            api.user.get_users(groupname="bacon")\n \n     def test_delete_no_username(self):\n         """Test deleting of a member with email login."""\n-\n         self._set_emaillogin(True)\n \n         # This should fail either an username or user object should be given\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.user.delete()\n \n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.delete(\n-                username=\'chuck@norris.org\',\n+                username="chuck@norris.org",\n                 user=mock.Mock(),\n             )\n \n-        api.user.create(email=\'chuck@norris.org\', password=\'secret\')\n-        api.user.delete(username=\'unwanted@norris.org\')\n+        api.user.create(email="chuck@norris.org", password="secret")\n+        api.user.delete(username="unwanted@norris.org")\n \n-        user = api.user.create(email=\'steven@seagal.org\', password=\'secret\')\n+        user = api.user.create(email="steven@seagal.org", password="secret")\n         api.user.delete(user=user)\n \n     def test_delete_username(self):\n-        """test whether the user has been deleted."""\n-\n+        """Test whether the user has been deleted."""\n         api.user.create(\n-            username=\'unwanted\',\n-            password=\'secret\',\n-            email=\'unwanted@example.org\',\n+            username="unwanted",\n+            password="secret",\n+            email="unwanted@example.org",\n         )\n-        api.user.delete(username=\'unwanted\')\n+        api.user.delete(username="unwanted")\n \n         user = api.user.create(\n-            username=\'steven\',\n-            password=\'secret\',\n-            email=\'steven@example.org\',\n+            username="steven",\n+            password="secret",\n+            email="steven@example.org",\n         )\n         api.user.delete(user=user)\n \n     def test_is_anonymous(self):\n         """Test anonymous access."""\n-\n         self.assertEqual(api.user.is_anonymous(), False)\n         logout()\n         self.assertEqual(api.user.is_anonymous(), True)\n \n     def test_get_roles_username(self):\n         """Test get roles passing a username."""\n-        ROLES = [\'Reviewer\', \'Editor\']\n+        ROLES = ["Reviewer", "Editor"]\n         api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n             roles=ROLES,\n         )\n         self.assertCountEqual(\n-            ROLES + [\'Authenticated\'],\n-            api.user.get_roles(username=\'chuck\'),\n+            ROLES + ["Authenticated"],\n+            api.user.get_roles(username="chuck"),\n         )\n \n     def test_get_roles_user(self):\n         """Test get roles passing a user."""\n-        ROLES = [\'Reviewer\', \'Editor\']\n+        ROLES = ["Reviewer", "Editor"]\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n             roles=ROLES,\n         )\n         self.assertCountEqual(\n-            ROLES + [\'Authenticated\'],\n+            ROLES + ["Authenticated"],\n             api.user.get_roles(user=user),\n         )\n \n     def test_get_roles_username_and_user(self):\n         """Test get roles passing username and user."""\n-        ROLES = [\'Reviewer\', \'Editor\']\n+        ROLES = ["Reviewer", "Editor"]\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n             roles=ROLES,\n         )\n \n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.get_roles(\n-                username=\'chuck\',\n+                username="chuck",\n                 user=user,\n             )\n \n     def test_get_roles_no_parameters(self):\n         """Test get roles without any parameters."""\n         self.assertCountEqual(\n-            [\'Manager\', \'Authenticated\'],\n+            ["Manager", "Authenticated"],\n             api.user.get_roles(),\n         )\n \n@@ -347,162 +347,164 @@ def test_get_permissions_no_parameters(self):\n     def test_get_roles_nonexistant_user(self):\n         """Test get roles for a user that does not exist."""\n         from plone.api.exc import UserNotFoundError\n+\n         with self.assertRaises(UserNotFoundError):\n-            api.user.get_roles(username=\'theurbanspaceman\')\n+            api.user.get_roles(username="theurbanspaceman")\n \n     def test_get_roles_anonymous(self):\n         """Test get_roles for an anonymous user."""\n         from AccessControl.users import nobody\n+\n         with api.env.adopt_user(user=nobody):\n             self.assertEqual(\n                 api.user.get_roles(),\n-                (\'Anonymous\', ),\n+                ("Anonymous",),\n             )\n \n     def test_get_roles_in_context(self):\n-        """Test get local and inherited roles for a user on an object"""\n+        """Test get local and inherited roles for a user on an object."""\n         api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         api.user.grant_roles(\n-            username=\'chuck\',\n-            roles=[\'Editor\'],\n+            username="chuck",\n+            roles=["Editor"],\n             obj=folder,\n         )\n         self.assertIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n \n     def test_get_roles_local_only(self):\n-        """Test get local roles for a user on an object"""\n+        """Test get local roles for a user on an object."""\n         api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         api.user.grant_roles(\n-            username=\'chuck\',\n-            roles=[\'Editor\'],\n+            username="chuck",\n+            roles=["Editor"],\n             obj=folder,\n         )\n         self.assertNotIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=document, inherit=False),\n         )\n \n     def test_get_roles_local_includes_group_roles(self):\n         """Test if get local roles for a user on an object respects groups."""\n         api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n-        api.group.create(\'foo\', roles=[\'Reviewer\'])\n-        api.group.add_user(groupname=\'foo\', username=\'chuck\')\n+        api.group.create("foo", roles=["Reviewer"])\n+        api.group.add_user(groupname="foo", username="chuck")\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document),\n-            [\'Member\', \'Reviewer\', \'Authenticated\'],\n+            api.user.get_roles(username="chuck", obj=document),\n+            ["Member", "Reviewer", "Authenticated"],\n         )\n         api.user.grant_roles(\n-            username=\'chuck\',\n-            roles=[\'Editor\'],\n+            username="chuck",\n+            roles=["Editor"],\n             obj=folder,\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document),\n-            [\'Member\', \'Reviewer\', \'Authenticated\', \'Editor\'],\n+            api.user.get_roles(username="chuck", obj=document),\n+            ["Member", "Reviewer", "Authenticated", "Editor"],\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n+            api.user.get_roles(username="chuck", obj=document, inherit=False),\n             [],\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n-            [\'Editor\'],\n+            api.user.get_roles(username="chuck", obj=folder, inherit=False),\n+            ["Editor"],\n         )\n         api.group.grant_roles(\n-            groupname=\'foo\',\n-            roles=[\'Contributor\'],\n+            groupname="foo",\n+            roles=["Contributor"],\n             obj=document,\n         )\n         self.assertCountEqual(\n-            [\'Contributor\'],\n-            api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n+            ["Contributor"],\n+            api.user.get_roles(username="chuck", obj=document, inherit=False),\n         )\n \n     def test_get_permissions_root(self):\n         """Test get permissions on site root."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n             roles=[],\n         )\n \n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.get_permissions(\n-                username=\'chuck\',\n+                username="chuck",\n                 user=user,\n             )\n \n         PERMISSIONS = {\n-            \'View\': True,\n-            \'Manage portal\': False,\n-            \'Modify portal content\': False,\n-            \'Access contents information\': True,\n+            "View": True,\n+            "Manage portal": False,\n+            "Modify portal content": False,\n+            "Access contents information": True,\n         }\n \n         for k, v in PERMISSIONS.items():\n             self.assertEqual(\n                 v,\n-                api.user.get_permissions(username=\'chuck\').get(k, None),\n+                api.user.get_permissions(username="chuck").get(k, None),\n             )\n             self.assertEqual(\n                 v,\n@@ -511,47 +513,47 @@ def test_get_permissions_root(self):\n \n     def test_get_permissions_nonexistant_user(self):\n         """Test get_permissions for a user that does not exist."""\n-\n         from plone.api.exc import UserNotFoundError\n+\n         with self.assertRaises(UserNotFoundError):\n-            api.user.get_permissions(username=\'ming\')\n+            api.user.get_permissions(username="ming")\n \n     def test_get_permissions_context(self):\n         """Test get permissions on some context."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n             roles=[],\n         )\n \n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.get_permissions(\n-                username=\'chuck\',\n+                username="chuck",\n                 user=user,\n             )\n \n         PERMISSIONS = {\n-            \'View\': False,\n-            \'Manage portal\': False,\n-            \'Modify portal content\': False,\n-            \'Access contents information\': False,\n+            "View": False,\n+            "Manage portal": False,\n+            "Modify portal content": False,\n+            "Access contents information": False,\n         }\n \n         folder = api.content.create(\n             container=self.portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n \n         for k, v in PERMISSIONS.items():\n             self.assertEqual(\n                 v,\n                 api.user.get_permissions(\n-                    username=\'chuck\',\n+                    username="chuck",\n                     obj=folder,\n                 ).get(k, None),\n             )\n@@ -565,41 +567,41 @@ def test_get_permissions_context(self):\n \n     def test_has_permission_context(self):\n         """Test has_permission on some context."""\n-\n-        username = \'billy\'\n+        username = "billy"\n         user = api.user.create(\n             username=username,\n-            email=\'billy@bob.net\',\n-            password=\'secret\',\n+            email="billy@bob.net",\n+            password="secret",\n         )\n \n         # Cannot supply both username and user arguments\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.has_permission(\n-                \'View\',\n+                "View",\n                 username=username,\n                 user=user,\n             )\n \n         folder = api.content.create(\n             container=self.portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'A Folder\',\n+            type="Folder",\n+            id="folder_one",\n+            title="A Folder",\n         )\n-        api.content.transition(obj=folder, transition=\'publish\')\n+        api.content.transition(obj=folder, transition="publish")\n \n         self.assertTrue(\n             api.user.has_permission(\n-                \'View\',\n+                "View",\n                 user=user,\n                 obj=folder,\n             ),\n         )\n         self.assertFalse(\n             api.user.has_permission(\n-                \'Modify portal content\',\n+                "Modify portal content",\n                 user=user,\n                 obj=folder,\n             ),\n@@ -607,7 +609,7 @@ def test_has_permission_context(self):\n \n         self.assertTrue(\n             api.user.has_permission(\n-                \'View\',\n+                "View",\n                 user=None,\n                 obj=folder,\n             ),\n@@ -615,32 +617,31 @@ def test_has_permission_context(self):\n \n     def test_grant_roles(self):\n         """Test granting a couple of roles."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n-        api.user.grant_roles(username=\'chuck\', roles=[\'Editor\'])\n-        self.assertIn(\'Editor\', api.user.get_roles(username=\'chuck\'))\n-        self.assertIn(\'Editor\', api.user.get_roles(user=user))\n+        api.user.grant_roles(username="chuck", roles=["Editor"])\n+        self.assertIn("Editor", api.user.get_roles(username="chuck"))\n+        self.assertIn("Editor", api.user.get_roles(user=user))\n \n-        api.user.grant_roles(username=\'chuck\', roles=(\'Contributor\',))\n-        self.assertIn(\'Contributor\', api.user.get_roles(username=\'chuck\'))\n-        self.assertIn(\'Contributor\', api.user.get_roles(user=user))\n+        api.user.grant_roles(username="chuck", roles=("Contributor",))\n+        self.assertIn("Contributor", api.user.get_roles(username="chuck"))\n+        self.assertIn("Contributor", api.user.get_roles(user=user))\n \n-        api.user.grant_roles(username=\'chuck\', roles=[\'Reader\', \'Reader\'])\n+        api.user.grant_roles(username="chuck", roles=["Reader", "Reader"])\n         ROLES = [\n-            \'Editor\',\n-            \'Contributor\',\n-            \'Reader\',\n-            \'Authenticated\',\n-            \'Member\',\n+            "Editor",\n+            "Contributor",\n+            "Reader",\n+            "Authenticated",\n+            "Member",\n         ]\n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'chuck\'),\n+            api.user.get_roles(username="chuck"),\n         )\n         self.assertCountEqual(\n             ROLES,\n@@ -649,77 +650,80 @@ def test_grant_roles(self):\n \n     def test_grant_roles_username_and_user(self):\n         """Test grant roles passing username and user."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.user.grant_roles(username=user)\n \n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n-            api.user.grant_roles(username=\'chuck\', roles=(\'Authenticated\'))\n+            api.user.grant_roles(username="chuck", roles=("Authenticated"))\n \n     def test_grant_roles_anonymous(self):\n         """Test granting Anonymous role."""\n-\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.grant_roles(\n-                username=\'chuck\',\n-                roles=[\'Anonymous\'],\n+                username="chuck",\n+                roles=["Anonymous"],\n             )\n \n     def test_grant_roles_authenticated(self):\n         """Test granting Authenticated role."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.grant_roles(\n-                username=\'chuck\',\n-                roles=[\'Authenticated\'],\n+                username="chuck",\n+                roles=["Authenticated"],\n             )\n \n     def test_grant_roles_no_parameters(self):\n         """Test grant roles without passing parameters."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.user.grant_roles()\n \n     def test_grant_roles_no_user(self):\n         """If no user is found, raise a suitable error."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.grant_roles(\n-                username=\'chuck\',\n-                roles=[\'Manager\'],\n+                username="chuck",\n+                roles=["Manager"],\n             )\n \n     def test_revoke_roles(self):\n         """Test revoke roles."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n-        api.user.grant_roles(username=\'chuck\', roles=[\'Reviewer\', \'Editor\'])\n-        api.user.revoke_roles(username=\'chuck\', roles=[\'Reviewer\'])\n-        self.assertNotIn(\'Reviewer\', api.user.get_roles(username=\'chuck\'))\n-        self.assertNotIn(\'Reviewer\', api.user.get_roles(user=user))\n-        self.assertIn(\'Editor\', api.user.get_roles(username=\'chuck\'))\n-        self.assertIn(\'Editor\', api.user.get_roles(user=user))\n+        api.user.grant_roles(username="chuck", roles=["Reviewer", "Editor"])\n+        api.user.revoke_roles(username="chuck", roles=["Reviewer"])\n+        self.assertNotIn("Reviewer", api.user.get_roles(username="chuck"))\n+        self.assertNotIn("Reviewer", api.user.get_roles(user=user))\n+        self.assertIn("Editor", api.user.get_roles(username="chuck"))\n+        self.assertIn("Editor", api.user.get_roles(user=user))\n \n-        api.user.revoke_roles(username=\'chuck\', roles=(\'Editor\',))\n-        ROLES = [\'Authenticated\', \'Member\']\n+        api.user.revoke_roles(username="chuck", roles=("Editor",))\n+        ROLES = ["Authenticated", "Member"]\n \n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'chuck\'),\n+            api.user.get_roles(username="chuck"),\n         )\n         self.assertCountEqual(\n             ROLES,\n@@ -727,7 +731,7 @@ def test_revoke_roles(self):\n         )\n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'chuck\', inherit=False),\n+            api.user.get_roles(username="chuck", inherit=False),\n         )\n         self.assertCountEqual(\n             ROLES,\n@@ -736,152 +740,153 @@ def test_revoke_roles(self):\n \n     def test_revoke_roles_username_and_user(self):\n         """Test revoke roles passing username and user."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.user.revoke_roles(user=user)\n \n     def test_revoke_roles_anonymous(self):\n         """Test revoking Anonymous role."""\n-\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.revoke_roles(\n-                username=\'chuck\',\n-                roles=[\'Anonymous\'],\n+                username="chuck",\n+                roles=["Anonymous"],\n             )\n \n     def test_revoke_roles_authenticated(self):\n         """Test revoking Authenticated role."""\n-\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.revoke_roles(\n-                username=\'chuck\',\n-                roles=[\'Authenticated\'],\n+                username="chuck",\n+                roles=["Authenticated"],\n             )\n \n     def test_revoke_roles_no_parameters(self):\n         """Test revoke roles without passing parameters."""\n-\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.user.revoke_roles()\n \n     def test_revoke_roles_username(self):\n         """Test revoke roles for username."""\n         api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n-            api.user.revoke_roles(username=\'chuck\', roles=[\'Authenticated\'])\n+            api.user.revoke_roles(username="chuck", roles=["Authenticated"])\n \n-    @unittest.skip(\'Getting the Anonymous user does not work like this.\')\n+    @unittest.skip("Getting the Anonymous user does not work like this.")\n     def test_revoke_roles_from_anonymous(self):\n         """Test revoking roles from an Anonymous user."""\n         api.user.revoke_roles(\n-            username=\'Anonymous User\',\n-            roles=[\'Reviewer\'],\n+            username="Anonymous User",\n+            roles=["Reviewer"],\n         )\n-        ROLES = [\'Anonymous\']\n+        ROLES = ["Anonymous"]\n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'Anonymous User\'),\n+            api.user.get_roles(username="Anonymous User"),\n         )\n \n     def test_revoke_roles_no_user(self):\n         """If no user is found, raise a suitable error."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.revoke_roles(\n-                username=\'chuck\',\n-                roles=[\'Manager\'],\n+                username="chuck",\n+                roles=["Manager"],\n             )\n \n     def test_grant_roles_in_context(self):\n         """Test grant roles."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n \n         api.user.grant_roles(\n-            username=\'chuck\',\n-            roles=[\'Editor\'],\n+            username="chuck",\n+            roles=["Editor"],\n             obj=folder,\n         )\n         self.assertIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=folder),\n         )\n         self.assertCountEqual(\n-            [\'Editor\'],\n-            api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n+            ["Editor"],\n+            api.user.get_roles(username="chuck", obj=folder, inherit=False),\n         )\n         self.assertIn(\n-            \'Editor\',\n+            "Editor",\n             api.user.get_roles(user=user, obj=folder),\n         )\n         self.assertIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n         self.assertIn(\n-            \'Editor\',\n+            "Editor",\n             api.user.get_roles(user=user, obj=document),\n         )\n \n         api.user.grant_roles(\n-            username=\'chuck\',\n-            roles=(\'Contributor\',),\n+            username="chuck",\n+            roles=("Contributor",),\n             obj=folder,\n         )\n         self.assertIn(\n-            \'Contributor\',\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            "Contributor",\n+            api.user.get_roles(username="chuck", obj=folder),\n         )\n         self.assertIn(\n-            \'Contributor\',\n+            "Contributor",\n             api.user.get_roles(user=user, obj=folder),\n         )\n         self.assertIn(\n-            \'Contributor\',\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            "Contributor",\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n         self.assertIn(\n-            \'Contributor\',\n+            "Contributor",\n             api.user.get_roles(user=user, obj=document),\n         )\n \n-        ROLES = [\'Editor\', \'Contributor\', \'Authenticated\', \'Member\']\n+        ROLES = ["Editor", "Contributor", "Authenticated", "Member"]\n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            api.user.get_roles(username="chuck", obj=folder),\n         )\n         self.assertCountEqual(\n             ROLES,\n@@ -889,7 +894,7 @@ def test_grant_roles_in_context(self):\n         )\n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n         self.assertCountEqual(\n             ROLES,\n@@ -897,31 +902,29 @@ def test_grant_roles_in_context(self):\n         )\n \n     def test_grant_roles_disregards_adapter(self):\n-        """Test that borg.localrole-adpaters are not copied when granting\n-        local roles."""\n-\n+        """Test that borg.localrole-adpaters are not copied on granting local roles."""\n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n-            [\'Member\', \'Authenticated\'],\n+            api.user.get_roles(username="chuck", obj=folder),\n+            ["Member", "Authenticated"],\n         )\n         self.assertFalse(\n             api.user.get_roles(user=user, obj=folder, inherit=False),\n@@ -931,175 +934,174 @@ def test_grant_roles_disregards_adapter(self):\n         @adapter(Interface)\n         @implementer(ILocalRoleProvider)\n         class LocalRoleProvider:\n-\n             def __init__(self, context):\n                 self.context = context\n \n             def getRoles(self, principal_id):\n-                return (\'Reviewer\',)\n+                return ("Reviewer",)\n \n         provideAdapter(LocalRoleProvider)\n \n         # the adapter-role is added for get_role\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n-            [\'Member\', \'Authenticated\', \'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=folder),\n+            ["Member", "Authenticated", "Reviewer"],\n         )\n \n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n-            [\'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=folder, inherit=False),\n+            ["Reviewer"],\n         )\n \n         # Assign a local role\n         api.user.grant_roles(\n-            username=\'chuck\',\n-            roles=[\'Contributor\'],\n+            username="chuck",\n+            roles=["Contributor"],\n             obj=folder,\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n-            [\'Member\', \'Authenticated\', \'Contributor\', \'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=folder),\n+            ["Member", "Authenticated", "Contributor", "Reviewer"],\n         )\n \n         # The adapter role is in in the local roles but not persistent\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n-            [\'Contributor\', \'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=folder, inherit=False),\n+            ["Contributor", "Reviewer"],\n         )\n-        local_roles = getattr(folder, \'__ac_local_roles__\', {})\n+        local_roles = getattr(folder, "__ac_local_roles__", {})\n         self.assertEqual(\n-            local_roles.get(\'chuck\'),\n-            [\'Contributor\'],\n+            local_roles.get("chuck"),\n+            ["Contributor"],\n         )\n \n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n-            [\'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=document, inherit=False),\n+            ["Reviewer"],\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document),\n-            [\'Member\', \'Authenticated\', \'Contributor\', \'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=document),\n+            ["Member", "Authenticated", "Contributor", "Reviewer"],\n         )\n \n         # add a group and test mix of group and adapter and user-roles\n-        api.group.create(\'foo\')\n+        api.group.create("foo")\n         api.group.grant_roles(\n-            groupname=\'foo\',\n-            roles=[\'Contributor\'],\n+            groupname="foo",\n+            roles=["Contributor"],\n             obj=document,\n         )\n-        api.group.add_user(groupname=\'foo\', username=\'chuck\')\n+        api.group.add_user(groupname="foo", username="chuck")\n \n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n-            [\'Contributor\', \'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=document, inherit=False),\n+            ["Contributor", "Reviewer"],\n         )\n-        api.group.grant_roles(groupname=\'foo\', roles=[\'Manager\'], obj=folder)\n+        api.group.grant_roles(groupname="foo", roles=["Manager"], obj=folder)\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n-            [\'Contributor\', \'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=document, inherit=False),\n+            ["Contributor", "Reviewer"],\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            api.user.get_roles(username="chuck", obj=document),\n             [\n-                \'Contributor\',\n-                \'Reviewer\',\n-                \'Manager\',\n-                \'Authenticated\',\n-                \'Member\',\n+                "Contributor",\n+                "Reviewer",\n+                "Manager",\n+                "Authenticated",\n+                "Member",\n             ],\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            api.user.get_roles(username="chuck", obj=folder),\n             [\n-                \'Contributor\',\n-                \'Reviewer\',\n-                \'Manager\',\n-                \'Authenticated\',\n-                \'Member\',\n+                "Contributor",\n+                "Reviewer",\n+                "Manager",\n+                "Authenticated",\n+                "Member",\n             ],\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n-            [\'Contributor\', \'Reviewer\', \'Manager\'],\n+            api.user.get_roles(username="chuck", obj=folder, inherit=False),\n+            ["Contributor", "Reviewer", "Manager"],\n         )\n \n         # cleanup\n         gsm = getGlobalSiteManager()\n         gsm.unregisterAdapter(\n-            factory=LocalRoleProvider, provided=ILocalRoleProvider,\n+            factory=LocalRoleProvider,\n+            provided=ILocalRoleProvider,\n         )\n \n     def test_revoke_roles_in_context(self):\n         """Test revoke roles."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         api.user.grant_roles(\n-            username=\'chuck\',\n-            roles=[\'Reviewer\', \'Editor\'],\n+            username="chuck",\n+            roles=["Reviewer", "Editor"],\n             obj=folder,\n         )\n \n-        api.user.revoke_roles(username=\'chuck\', roles=[\'Reviewer\'], obj=folder)\n+        api.user.revoke_roles(username="chuck", roles=["Reviewer"], obj=folder)\n         self.assertIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=folder),\n         )\n-        self.assertIn(\'Editor\', api.user.get_roles(user=user, obj=folder))\n+        self.assertIn("Editor", api.user.get_roles(user=user, obj=folder))\n         self.assertIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n-        self.assertIn(\'Editor\', api.user.get_roles(user=user, obj=document))\n+        self.assertIn("Editor", api.user.get_roles(user=user, obj=document))\n         self.assertNotIn(\n-            \'Reviewer\',\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            "Reviewer",\n+            api.user.get_roles(username="chuck", obj=folder),\n         )\n-        self.assertNotIn(\'Reviewer\', api.user.get_roles(user=user, obj=folder))\n+        self.assertNotIn("Reviewer", api.user.get_roles(user=user, obj=folder))\n         self.assertNotIn(\n-            \'Reviewer\',\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            "Reviewer",\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n         self.assertNotIn(\n-            \'Reviewer\',\n+            "Reviewer",\n             api.user.get_roles(user=user, obj=document),\n         )\n \n-        api.user.revoke_roles(username=\'chuck\', roles=[\'Editor\'], obj=folder)\n+        api.user.revoke_roles(username="chuck", roles=["Editor"], obj=folder)\n         self.assertNotIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=folder),\n         )\n-        self.assertNotIn(\'Editor\', api.user.get_roles(user=user, obj=folder))\n+        self.assertNotIn("Editor", api.user.get_roles(user=user, obj=folder))\n         self.assertNotIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n-        self.assertNotIn(\'Editor\', api.user.get_roles(user=user, obj=document))\n+        self.assertNotIn("Editor", api.user.get_roles(user=user, obj=document))\n \n-        ROLES = [\'Authenticated\', \'Member\']\n+        ROLES = ["Authenticated", "Member"]\n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            api.user.get_roles(username="chuck", obj=folder),\n         )\n         self.assertCountEqual(\n             ROLES,\n@@ -1107,7 +1109,7 @@ def test_revoke_roles_in_context(self):\n         )\n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n         self.assertCountEqual(\n             ROLES,\n@@ -1115,7 +1117,7 @@ def test_revoke_roles_in_context(self):\n         )\n         self.assertCountEqual(\n             [],\n-            api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n+            api.user.get_roles(username="chuck", obj=folder, inherit=False),\n         )\n         self.assertCountEqual(\n             [],\n@@ -1123,7 +1125,7 @@ def test_revoke_roles_in_context(self):\n         )\n         self.assertCountEqual(\n             [],\n-            api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n+            api.user.get_roles(username="chuck", obj=document, inherit=False),\n         )\n         self.assertCountEqual(\n             [],\ndiff --git a/src/plone/api/tests/test_validation.py b/src/plone/api/tests/test_validation.py\nindex 48c951b0..810a02cc 100644\n--- a/src/plone/api/tests/test_validation.py\n+++ b/src/plone/api/tests/test_validation.py\n@@ -10,7 +10,7 @@\n \n \n def undecorated_func(arg1=None, arg2=None, arg3=None):\n-    return \'foo\'\n+    return "foo"\n \n \n class TestPloneAPIValidation(unittest.TestCase):\n@@ -22,7 +22,8 @@ def test_decorator_works_the_same_as_explicit_calling(self):\n         """Check that calling the decorator with the function as an argument\n         is equivalent to decorating the function.\n         """\n-        @required_parameters(\'arg1\')\n+\n+        @required_parameters("arg1")\n         def _func1_decorated(arg1=None, arg2=None, arg3=None):\n             """This is my docstring"""\n             pass\n@@ -30,10 +31,11 @@ def _func1_decorated(arg1=None, arg2=None, arg3=None):\n         def _func2_undecorated(arg1=None, arg2=None, arg3=None):\n             """This is my docstring"""\n             pass\n-        _func2_decorated = required_parameters(\'arg1\')(_func2_undecorated)\n+\n+        _func2_decorated = required_parameters("arg1")(_func2_undecorated)\n \n         # Check that the decorated function gets the correct docstring\n-        self.assertEqual(_func1_decorated.__doc__, \'This is my docstring\')\n+        self.assertEqual(_func1_decorated.__doc__, "This is my docstring")\n \n         # Check that both functions have the same docstring\n         self.assertEqual(_func1_decorated.__doc__, _func2_decorated.__doc__)\n@@ -43,27 +45,27 @@ def test_non_existant_required_arg(self):\n         a parameter that doesn\'t exist in the function signature.\n         """\n         with self.assertRaises(ValueError):\n-            _func = required_parameters(\'arg1\', \'wibble\', \'wobble\')\n+            _func = required_parameters("arg1", "wibble", "wobble")\n             _func(undecorated_func)\n \n         with self.assertRaises(ValueError):\n             _func = mutually_exclusive_parameters(\n-                \'arg1\',\n-                \'wibble\',\n-                \'wobble\',\n+                "arg1",\n+                "wibble",\n+                "wobble",\n             )\n             _func(undecorated_func)\n \n     def test_get_supplied_args(self):\n         """Test that positional and keyword args are recognised correctly."""\n         # the arguments specified in the function signature\n-        signature = (\'arg1\', \'arg2\', \'arg3\')\n+        signature = ("arg1", "arg2", "arg3")\n \n         # test that positional args are recognised correctly\n-        result = _gsa(signature, (\'foo\', \'wibble\'), {})\n+        result = _gsa(signature, ("foo", "wibble"), {})\n         self.assertEqual(\n             set(result),\n-            {\'arg1\', \'arg2\'},\n+            {"arg1", "arg2"},\n         )\n \n         # test that keyword args are recognised correctly\n@@ -71,35 +73,35 @@ def test_get_supplied_args(self):\n             signature,\n             (),\n             {\n-                \'arg1\': \'foo\',\n-                \'arg2\': \'wibble\',\n+                "arg1": "foo",\n+                "arg2": "wibble",\n             },\n         )\n         self.assertEqual(\n             set(result),\n-            {\'arg1\', \'arg2\'},\n+            {"arg1", "arg2"},\n         )\n \n         # test that a mixture of args are recognised correctly\n         result = _gsa(\n             signature,\n-            (\'foo\',),\n-            {\'arg2\': \'wibble\'},\n+            ("foo",),\n+            {"arg2": "wibble"},\n         )\n         self.assertEqual(\n             set(result),\n-            {\'arg1\', \'arg2\'},\n+            {"arg1", "arg2"},\n         )\n \n         # test that None-valued positional args are ignored\n         result = _gsa(\n             signature,\n-            (\'foo\', None),\n+            ("foo", None),\n             {},\n         )\n         self.assertEqual(\n             set(result),\n-            {\'arg1\'},\n+            {"arg1"},\n         )\n \n         # test that None-valued keyword args are ignored\n@@ -107,33 +109,33 @@ def test_get_supplied_args(self):\n             signature,\n             (),\n             {\n-                \'arg1\': None,\n-                \'arg2\': \'wibble\',\n+                "arg1": None,\n+                "arg2": "wibble",\n             },\n         )\n         self.assertEqual(\n             set(result),\n-            {\'arg2\'},\n+            {"arg2"},\n         )\n \n     def test_single_keyword_arg_provided(self):\n         """Test for passing a single required parameter\n         as a keyword argument.\n         """\n-        _func = required_parameters(\'arg1\')(undecorated_func)\n+        _func = required_parameters("arg1")(undecorated_func)\n         self.assertEqual(\n-            _func(arg1=\'hello\'),\n-            \'foo\',\n+            _func(arg1="hello"),\n+            "foo",\n         )\n \n     def test_single_positional_arg_provided(self):\n         """Test for passing a single required parameter\n         as a positional argument.\n         """\n-        _func = required_parameters(\'arg1\')(undecorated_func)\n+        _func = required_parameters("arg1")(undecorated_func)\n         self.assertEqual(\n-            _func(\'hello\'),\n-            \'foo\',\n+            _func("hello"),\n+            "foo",\n         )\n \n     def test_single_arg_missing(self):\n@@ -141,7 +143,8 @@ def test_single_arg_missing(self):\n         single required parameter is missing.\n         """\n         from plone.api.exc import MissingParameterError\n-        _func = required_parameters(\'arg1\')(undecorated_func)\n+\n+        _func = required_parameters("arg1")(undecorated_func)\n         with self.assertRaises(MissingParameterError):\n             _func()\n \n@@ -150,104 +153,108 @@ def test_one_missing_one_provided(self):\n         required parameters is missing.\n         """\n         from plone.api.exc import MissingParameterError\n-        _func = required_parameters(\'arg1\', \'arg2\')(undecorated_func)\n+\n+        _func = required_parameters("arg1", "arg2")(undecorated_func)\n         with self.assertRaises(MissingParameterError):\n-            _func(\'hello\')\n+            _func("hello")\n \n     def test_no_mutually_exclusive_args_provided(self):\n         """Test for passing no args (valid) to a function that specifies\n         mutually exclusive parameters.\n         """\n-        _func = mutually_exclusive_parameters(\'arg1\', \'arg2\')(undecorated_func)\n-        self.assertEqual(_func(), \'foo\')\n-        self.assertEqual(_func(arg3=\'hello\'), \'foo\')\n+        _func = mutually_exclusive_parameters("arg1", "arg2")(undecorated_func)\n+        self.assertEqual(_func(), "foo")\n+        self.assertEqual(_func(arg3="hello"), "foo")\n \n     def test_one_mutually_exclusive_arg_provided(self):\n         """Test for passing one arg (the right number) to a function\n         that specifies mutually exclusive parameters.\n         """\n-        _func = mutually_exclusive_parameters(\'arg1\', \'arg2\')(undecorated_func)\n-        self.assertEqual(_func(\'hello\'), \'foo\')\n-        self.assertEqual(_func(arg1=\'hello\'), \'foo\')\n-        self.assertEqual(_func(arg2=\'hello\'), \'foo\')\n+        _func = mutually_exclusive_parameters("arg1", "arg2")(undecorated_func)\n+        self.assertEqual(_func("hello"), "foo")\n+        self.assertEqual(_func(arg1="hello"), "foo")\n+        self.assertEqual(_func(arg2="hello"), "foo")\n \n     def test_two_mutually_exclusive_args_provided(self):\n         """Test that InvalidParameterError is raised if more than\n         one mutually exclusive argument is provided.\n         """\n         from plone.api.exc import InvalidParameterError\n-        _func = mutually_exclusive_parameters(\'arg1\', \'arg2\')(undecorated_func)\n+\n+        _func = mutually_exclusive_parameters("arg1", "arg2")(undecorated_func)\n         with self.assertRaises(InvalidParameterError):\n-            _func(\'ahoy\', \'there\')\n+            _func("ahoy", "there")\n \n         with self.assertRaises(InvalidParameterError):\n-            _func(arg1=\'ahoy\', arg2=\'there\')\n+            _func(arg1="ahoy", arg2="there")\n \n     def test_require_at_least_one_but_none_provided(self):\n         """Test that MissingParameterError is raised if no argument is supplied\n         when at least one is required.\n         """\n         from plone.api.exc import MissingParameterError\n-        _func = at_least_one_of(\'arg1\', \'arg2\')(undecorated_func)\n+\n+        _func = at_least_one_of("arg1", "arg2")(undecorated_func)\n         with self.assertRaises(MissingParameterError):\n             _func()\n \n     def test_require_at_least_one_and_one_provided(self):\n         """Test for passing one argument when at least one is required."""\n-        _func = at_least_one_of(\'arg1\', \'arg2\')(undecorated_func)\n-        self.assertEqual(_func(\'ahoy\'), \'foo\')\n-        self.assertEqual(_func(arg2=\'ahoy\'), \'foo\')\n+        _func = at_least_one_of("arg1", "arg2")(undecorated_func)\n+        self.assertEqual(_func("ahoy"), "foo")\n+        self.assertEqual(_func(arg2="ahoy"), "foo")\n \n     def test_require_at_least_one_and_several_provided(self):\n         """Test for passing several arguments when at least one is required."""\n-        _func = at_least_one_of(\'arg1\', \'arg2\')(undecorated_func)\n-        self.assertEqual(_func(\'ahoy\', \'there\'), \'foo\')\n-        self.assertEqual(_func(arg1=\'ahoy\', arg2=\'there\'), \'foo\')\n-        self.assertEqual(_func(\'ahoy\', arg2=\'there\', arg3=\'matey\'), \'foo\')\n+        _func = at_least_one_of("arg1", "arg2")(undecorated_func)\n+        self.assertEqual(_func("ahoy", "there"), "foo")\n+        self.assertEqual(_func(arg1="ahoy", arg2="there"), "foo")\n+        self.assertEqual(_func("ahoy", arg2="there", arg3="matey"), "foo")\n \n     def test_required_and_mutually_exclusive(self):\n         """Test that multiple decorators can be used together."""\n-        @mutually_exclusive_parameters(\'arg2\', \'arg3\')\n-        @required_parameters(\'arg1\')\n+\n+        @mutually_exclusive_parameters("arg2", "arg3")\n+        @required_parameters("arg1")\n         def _func1_decorated(arg1=None, arg2=None, arg3=None):\n-            return \'foo\'\n+            return "foo"\n \n         from plone.api.exc import InvalidParameterError\n         from plone.api.exc import MissingParameterError\n \n         # test that the required parameter error works (missing arg1)\n         with self.assertRaises(MissingParameterError):\n-            _func1_decorated(arg2=\'ahoy\')\n+            _func1_decorated(arg2="ahoy")\n \n         # test that the mutually exclusive decorator works\n         # (arg2 and arg3 should not be there)\n         with self.assertRaises(InvalidParameterError):\n             _func1_decorated(\n-                arg1=\'ahoy\',\n-                arg2=\'there\',\n-                arg3=\'matey\',\n+                arg1="ahoy",\n+                arg2="there",\n+                arg3="matey",\n             )\n \n         # test that they both work.  Making no assumptions here about the order\n         # in which they fire.\n         with self.assertRaises((InvalidParameterError, MissingParameterError)):\n             _func1_decorated(\n-                arg2=\'ahoy\',\n-                arg3=\'there\',\n+                arg2="ahoy",\n+                arg3="there",\n             )\n \n         # everything ok\n-        self.assertEqual(_func1_decorated(\'ahoy\', arg3=\'there\'), \'foo\')\n+        self.assertEqual(_func1_decorated("ahoy", arg3="there"), "foo")\n \n     def test_exactly_one_required(self):\n         """Test that combining mutually_exclusive_parameters and\n         at_least_one_of is equivalent to \'exactly one required\'.\n         """\n \n-        @mutually_exclusive_parameters(\'arg1\', \'arg2\')\n-        @at_least_one_of(\'arg1\', \'arg2\')\n+        @mutually_exclusive_parameters("arg1", "arg2")\n+        @at_least_one_of("arg1", "arg2")\n         def _func1_decorated(arg1=None, arg2=None, arg3=None):\n-            return \'foo\'\n+            return "foo"\n \n         from plone.api.exc import InvalidParameterError\n         from plone.api.exc import MissingParameterError\n@@ -258,8 +265,8 @@ def _func1_decorated(arg1=None, arg2=None, arg3=None):\n \n         # test that it errors if you provide both\n         with self.assertRaises(InvalidParameterError):\n-            _func1_decorated(\'ahoy\', \'there\')\n+            _func1_decorated("ahoy", "there")\n \n         # everything ok\n-        self.assertEqual(_func1_decorated(\'ahoy\'), \'foo\')\n-        self.assertEqual(_func1_decorated(\'ahoy\', arg3=\'there\'), \'foo\')\n+        self.assertEqual(_func1_decorated("ahoy"), "foo")\n+        self.assertEqual(_func1_decorated("ahoy", arg3="there"), "foo")\ndiff --git a/src/plone/api/user.py b/src/plone/api/user.py\nindex 00428248..206cbe70 100644\n--- a/src/plone/api/user.py\n+++ b/src/plone/api/user.py\n@@ -23,7 +23,7 @@ def create(\n     email=None,\n     username=None,\n     password=None,\n-    roles=(\'Member\', ),\n+    roles=("Member",),\n     properties=None,\n ):\n     """Create a user.\n@@ -52,26 +52,26 @@ def create(\n \n     # it may happen that someone passes email in the properties dict, catch\n     # that and set the email so the code below this works fine\n-    if not email and properties.get(\'email\'):\n-        email = properties.get(\'email\')\n+    if not email and properties.get("email"):\n+        email = properties.get("email")\n \n     if not email:\n         raise MissingParameterError("You need to pass the new user\'s email.")\n \n-    use_email_as_username = portal.get_registry_record(\'plone.use_email_as_login\')\n+    use_email_as_username = portal.get_registry_record("plone.use_email_as_login")\n     if not use_email_as_username and not username:\n         raise InvalidParameterError(\n-            \'The portal is configured to use username \'\n-            \'that is not email so you need to pass a username.\',\n+            "The portal is configured to use username "\n+            "that is not email so you need to pass a username.",\n         )\n \n-    registration = portal.get_tool(\'portal_registration\')\n+    registration = portal.get_tool("portal_registration")\n     user_id = use_email_as_username and email or username\n \n     # Generate a random 8-char password\n     if not password:\n         chars = string.ascii_letters + string.digits\n-        password = \'\'.join(random.choice(chars) for char in range(8))\n+        password = "".join(random.choice(chars) for char in range(8))\n \n     properties.update(username=user_id)\n     properties.update(email=email)\n@@ -85,8 +85,8 @@ def create(\n     return get(username=user_id)\n \n \n-@mutually_exclusive_parameters(\'userid\', \'username\')\n-@at_least_one_of(\'userid\', \'username\')\n+@mutually_exclusive_parameters("userid", "username")\n+@at_least_one_of("userid", "username")\n def get(userid=None, username=None):\n     """Get a user.\n \n@@ -111,7 +111,7 @@ def get(userid=None, username=None):\n     :Example: :ref:`user-get-example`\n     """\n     if userid is not None:\n-        portal_membership = portal.get_tool(\'portal_membership\')\n+        portal_membership = portal.get_tool("portal_membership")\n         return portal_membership.getMemberById(userid)\n \n     return get_member_by_login_name(\n@@ -128,11 +128,11 @@ def get_current():\n     :rtype: MemberData object\n     :Example: :ref:`user-get-current-example`\n     """\n-    portal_membership = portal.get_tool(\'portal_membership\')\n+    portal_membership = portal.get_tool("portal_membership")\n     return portal_membership.getAuthenticatedMember()\n \n \n-@mutually_exclusive_parameters(\'groupname\', \'group\')\n+@mutually_exclusive_parameters("groupname", "group")\n def get_users(groupname=None, group=None):\n     """Get all users or all users filtered by group.\n \n@@ -151,12 +151,12 @@ def get_users(groupname=None, group=None):\n         :ref:`user-get-groups-users-example`\n     """\n     if groupname:\n-        group_tool = portal.get_tool(\'portal_groups\')\n+        group_tool = portal.get_tool("portal_groups")\n         group = group_tool.getGroupById(groupname)\n         if not group:\n             raise GroupNotFoundError\n \n-    portal_membership = portal.get_tool(\'portal_membership\')\n+    portal_membership = portal.get_tool("portal_membership")\n \n     if group:\n         return group.getGroupMembers()\n@@ -164,8 +164,8 @@ def get_users(groupname=None, group=None):\n         return portal_membership.listMembers()\n \n \n-@mutually_exclusive_parameters(\'username\', \'user\')\n-@at_least_one_of(\'username\', \'user\')\n+@mutually_exclusive_parameters("username", "user")\n+@at_least_one_of("username", "user")\n def delete(username=None, user=None):\n     """Delete a user.\n \n@@ -181,7 +181,7 @@ def delete(username=None, user=None):\n         InvalidParameterError\n     :Example: :ref:`user-delete-example`\n     """\n-    portal_membership = portal.get_tool(\'portal_membership\')\n+    portal_membership = portal.get_tool("portal_membership")\n     user_id = username or user.id\n     portal_membership.deleteMembers((user_id,))\n \n@@ -193,10 +193,10 @@ def is_anonymous():\n     :rtype: bool\n     :Example: :ref:`user-is-anonymous-example`\n     """\n-    return bool(portal.get_tool(\'portal_membership\').isAnonymousUser())\n+    return bool(portal.get_tool("portal_membership").isAnonymousUser())\n \n \n-@mutually_exclusive_parameters(\'username\', \'user\')\n+@mutually_exclusive_parameters("username", "user")\n def get_roles(username=None, user=None, obj=None, inherit=True):\n     """Get user\'s site-wide or local roles.\n \n@@ -218,7 +218,7 @@ def get_roles(username=None, user=None, obj=None, inherit=True):\n         MissingParameterError\n     :Example: :ref:`user-get-roles-example`\n     """\n-    portal_membership = portal.get_tool(\'portal_membership\')\n+    portal_membership = portal.get_tool("portal_membership")\n \n     if username is None:\n         if user is None:\n@@ -244,7 +244,7 @@ def get_roles(username=None, user=None, obj=None, inherit=True):\n             principal_ids = list(plone_user.getGroups())\n             principal_ids.insert(0, plone_user.getId())\n             roles = set()\n-            pas = portal.get_tool(\'acl_users\')\n+            pas = portal.get_tool("acl_users")\n             for _, lrmanager in pas.plugins.listPlugins(ILocalRolesPlugin):\n                 for adapter in lrmanager._getAdapters(obj):\n                     for principal_id in principal_ids:\n@@ -256,11 +256,11 @@ def get_roles(username=None, user=None, obj=None, inherit=True):\n \n @contextmanager\n def _nop_context_manager():\n-    """A trivial context manager that does nothing."""\n+    """Do nothing (trivial context manager)."""\n     yield\n \n \n-@mutually_exclusive_parameters(\'username\', \'user\')\n+@mutually_exclusive_parameters("username", "user")\n def get_permissions(username=None, user=None, obj=None):\n     """Get user\'s site-wide or local permissions.\n \n@@ -295,7 +295,7 @@ def get_permissions(username=None, user=None, obj=None):\n     return result\n \n \n-@mutually_exclusive_parameters(\'username\', \'user\')\n+@mutually_exclusive_parameters("username", "user")\n def has_permission(permission, username=None, user=None, obj=None):\n     """Check whether this user has the given permission.\n \n@@ -330,8 +330,8 @@ def has_permission(permission, username=None, user=None, obj=None):\n         return bool(getSecurityManager().checkPermission(permission, obj))\n \n \n-@required_parameters(\'roles\')\n-@mutually_exclusive_parameters(\'username\', \'user\')\n+@required_parameters("roles")\n+@mutually_exclusive_parameters("username", "user")\n def grant_roles(username=None, user=None, obj=None, roles=None):\n     """Grant roles to a user.\n \n@@ -357,13 +357,13 @@ def grant_roles(username=None, user=None, obj=None, roles=None):\n         user = get(username=username)\n     # check we got a user\n     if user is None:\n-        raise InvalidParameterError(\'User could not be found\')\n+        raise InvalidParameterError("User could not be found")\n \n     if isinstance(roles, tuple):\n         roles = list(roles)\n \n     # These roles cannot be granted\n-    if \'Anonymous\' in roles or \'Authenticated\' in roles:\n+    if "Anonymous" in roles or "Authenticated" in roles:\n         raise InvalidParameterError\n \n     if obj is None:\n@@ -379,8 +379,8 @@ def grant_roles(username=None, user=None, obj=None, roles=None):\n         obj.manage_setLocalRoles(user.getId(), roles)\n \n \n-@required_parameters(\'roles\')\n-@mutually_exclusive_parameters(\'username\', \'user\')\n+@required_parameters("roles")\n+@mutually_exclusive_parameters("username", "user")\n def revoke_roles(username=None, user=None, obj=None, roles=None):\n     """Revoke roles from a user.\n \n@@ -405,11 +405,11 @@ def revoke_roles(username=None, user=None, obj=None, roles=None):\n         user = get(username=username)\n     # check we got a user\n     if user is None:\n-        raise InvalidParameterError(\'User could not be found\')\n+        raise InvalidParameterError("User could not be found")\n \n     roles = set(roles)\n \n-    if \'Anonymous\' in roles or \'Authenticated\' in roles:\n+    if "Anonymous" in roles or "Authenticated" in roles:\n         raise InvalidParameterError\n \n     inherit = True\n@@ -420,7 +420,7 @@ def revoke_roles(username=None, user=None, obj=None, roles=None):\n     actual_roles = {\n         role\n         for role in get_roles(user=user, obj=obj, inherit=inherit)\n-        if role not in [\'Anonymous\', \'Authenticated\']\n+        if role not in ["Anonymous", "Authenticated"]\n     }\n \n     roles = list(actual_roles - roles)\ndiff --git a/src/plone/api/validation.py b/src/plone/api/validation.py\nindex c7b2e312..d4bc707f 100644\n--- a/src/plone/api/validation.py\n+++ b/src/plone/api/validation.py\n@@ -1,4 +1,4 @@\n-"""Decorators for validating parameters"""\n+"""Provide decorators for validating parameters."""\n \n from decorator import decorator\n from plone.api.exc import InvalidParameterError\n@@ -8,17 +8,18 @@\n \n \n def _get_arg_spec(func, validator_args):\n-    """Get the arguments specified in the function spec\n+    """Get the arguments specified in the function spec.\n+\n     and check that the decorator doesn\'t refer to non-existant args.\n     """\n     signature_args = inspect.getfullargspec(func).args\n     extra_args = set(validator_args) - set(signature_args)\n     if extra_args:\n         raise ValueError(\n-            \'Validator for {name} refers to parameters \'\n-            \'that are not part of the function signature: {signature}\'.format(\n+            "Validator for {name} refers to parameters "\n+            "that are not part of the function signature: {signature}".format(\n                 name=func.__name__,\n-                signature=\', \'.join(extra_args),\n+                signature=", ".join(extra_args),\n             ),\n         )\n \n@@ -26,7 +27,8 @@ def _get_arg_spec(func, validator_args):\n \n \n def _get_supplied_args(signature_params, args, kwargs):\n-    """Return names of all args that have been passed in\n+    """Return names of all args that have been passed in.\n+\n     either as positional or keyword arguments, and are not None.\n     """\n     supplied_args = []\n@@ -42,8 +44,7 @@ def _get_supplied_args(signature_params, args, kwargs):\n \n \n def required_parameters(*required_params):\n-    """A decorator that tests whether all of the specified parameters\n-    have been supplied and are not None\n+    """Test whether all of the specified parameters have been supplied and are not None.\n \n     Todo: add an optional flag to allow None values through as valid parameters\n \n@@ -52,23 +53,20 @@ def required_parameters(*required_params):\n     def foo(a=None, b=None, c=None):\n         pass\n     """\n+\n     def _required_parameters(func):\n-        """The actual decorator"""\n+        """Provide actual decorator."""\n         signature_params = _get_arg_spec(func, required_params)\n \n         def wrapped(function, *args, **kwargs):\n-            """The wrapped function (whose docstring will get replaced)"""\n+            """Provide wrapped function (whose docstring will get replaced)."""\n             supplied_args = _get_supplied_args(signature_params, args, kwargs)\n \n-            missing = [\n-                param\n-                for param in required_params\n-                if param not in supplied_args\n-            ]\n+            missing = [param for param in required_params if param not in supplied_args]\n             if len(missing):\n                 raise MissingParameterError(\n-                    \'Missing required parameter(s): {params}\'.format(\n-                        params=\', \'.join(missing),\n+                    "Missing required parameter(s): {params}".format(\n+                        params=", ".join(missing),\n                     ),\n                 )\n \n@@ -80,7 +78,9 @@ def wrapped(function, *args, **kwargs):\n \n \n def mutually_exclusive_parameters(*exclusive_params):\n-    """A decorator that raises an exception if more than one\n+    """Provide decorator.\n+\n+    The decorator raises an exception if more than one\n     of the specified parameters has been supplied and is not None\n \n     Usage:\n@@ -88,22 +88,21 @@ def mutually_exclusive_parameters(*exclusive_params):\n     def foo(a=None, b=None, c=None):\n         pass\n     """\n+\n     def _mutually_exclusive_parameters(func):\n-        """The actual decorator."""\n+        """Provide a decorator."""\n         signature_params = _get_arg_spec(func, exclusive_params)\n \n         def wrapped(function, *args, **kwargs):\n-            """The wrapped function (whose docstring will get replaced)."""\n+            """Provide a wrapped function (whose docstring will get replaced)."""\n             supplied_args = _get_supplied_args(signature_params, args, kwargs)\n             clashes = [\n-                argument\n-                for argument in supplied_args\n-                if argument in exclusive_params\n+                argument for argument in supplied_args if argument in exclusive_params\n             ]\n             if len(clashes) > 1:\n                 raise InvalidParameterError(\n-                    \'These parameters are mutually exclusive: {arg}.\'.format(\n-                        arg=\', \'.join(supplied_args),\n+                    "These parameters are mutually exclusive: {arg}.".format(\n+                        arg=", ".join(supplied_args),\n                     ),\n                 )\n \n@@ -115,7 +114,9 @@ def wrapped(function, *args, **kwargs):\n \n \n def at_least_one_of(*candidate_params):\n-    """A decorator that raises an exception if none of the\n+    """Provide a decorator.\n+\n+    The decorator raises an exception if none of the\n     specified parameters has been supplied.  Can be used in conjunction with\n     mutually_exclusive_parameters to enforce exactly one.\n \n@@ -124,12 +125,13 @@ def at_least_one_of(*candidate_params):\n     def foo(a=None, b=None, c=None):\n         pass\n     """\n+\n     def _at_least_one_of(func):\n-        """The actual decorator."""\n+        """Provide an actual decorator."""\n         signature_params = _get_arg_spec(func, candidate_params)\n \n         def wrapped(function, *args, **kwargs):\n-            """The wrapped function (whose docstring will get replaced)."""\n+            """Provide a wrapped function (whose docstring will get replaced)."""\n             supplied_args = _get_supplied_args(signature_params, args, kwargs)\n             candidates = [\n                 candidate\n@@ -138,9 +140,9 @@ def wrapped(function, *args, **kwargs):\n             ]\n             if len(candidates) < 1:\n                 raise MissingParameterError(\n-                    \'At least one of these parameters must be \'\n-                    \'supplied: {params}.\'.format(\n-                        params=\', \'.join(candidate_params),\n+                    "At least one of these parameters must be "\n+                    "supplied: {params}.".format(\n+                        params=", ".join(candidate_params),\n                     ),\n                 )\n \ndiff --git a/test_plone-52.cfg b/test_plone-52.cfg\nnew file mode 100644\nindex 00000000..22236359\n--- /dev/null\n+++ b/test_plone-52.cfg\n@@ -0,0 +1,6 @@\n+[buildout]\n+extends =\n+    https://raw.github.com/collective/buildout.plonetest/master/test-5.2.x.cfg\n+    https://raw.githubusercontent.com/collective/buildout.plonetest/master/qa.cfg\n+    base.cfg\n+\ndiff --git a/test_plone-60.cfg b/test_plone-60.cfg\nnew file mode 100644\nindex 00000000..2fae3a15\n--- /dev/null\n+++ b/test_plone-60.cfg\n@@ -0,0 +1,6 @@\n+[buildout]\n+extends =\n+    https://raw.github.com/collective/buildout.plonetest/master/test-6.0.x.cfg\n+    https://raw.githubusercontent.com/collective/buildout.plonetest/master/qa.cfg\n+    base.cfg\n+\ndiff --git a/tox.ini b/tox.ini\nindex 4574f5c2..fee9166b 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,53 +1,57 @@\n [tox]\n envlist =\n-    py{36,37,38}-plone-{5.2},\n-#    black-check,\n+    py{37,38,39}-plone-{5.2},\n+    py{38,39}-plone-{6.0}\n+    # towncrier\n+    # black-enforce,\n+    black-check,\n+    # isort-apply,\n     isort,\n     lint,\n-    coverage-report,\n+#    coverage-report,\n+    linkcheck\n     plone6docs,\n     docs\n-    docs-livehtml\n-    linkcheck\n \n-skip_missing_interpreters = False\n+skip_missing_interpreters = True\n+\n+[gh-actions]\n+python =\n+    3.7: py37\n+    3.8: py38\n+    3.9: py39\n+\n+[gh-actions:env]\n+PLONE =\n+    5.2: plone-5.2\n+    6.0: plone-6.0\n+\n \n [testenv]\n skip_install = True\n \n-basepython:\n-    py36: python3.6\n-    py37: python3.7\n-    py38: python3.8\n-\n commands =\n     python -VV\n+    pip install -r requirements.txt\n     pip list\n-    mkdir -p {toxinidir}/reports/coverage\n-# Calling bin/buildout -c toxinidir/buildout.cfg works in principle.\n-# But when buildout restarts because it has upgraded or downgraded itself,\n-# it will fail to find the buildout config file in the envdir.\n-# So make sure the versions in the deps match what is in the buildout config.\n-    {envbindir}/buildout -c {toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir} bootstrap\n-    {envbindir}/buildout -c {toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir}\n-    {envbindir}/coverage run {envbindir}/test -v1 --auto-color {posargs}\n+    {envbindir}/buildout -c /{toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir}\n+    {envbindir}/buildout -c {toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir} annotate\n+    {envbindir}/test\n \n setenv =\n-    COVERAGE_FILE=.coverage.{envname}\n-    plone-5.2: BUILDOUT_FILE="plone-5.2.x.cfg"\n+    BUILDOUT_FILE=test_plone-60.cfg\n+    plone-5.2: BUILDOUT_FILE=test_plone-52.cfg\n \n deps =\n     pdbpp\n-    setuptools==42.0.2\n-    zc.buildout==2.13.3\n-    coverage\n+    manuel\n \n whitelist_externals =\n     mkdir\n     echo\n \n [testenv:coverage-report]\n-basepython = python\n+basepython = python3.9\n deps = coverage\n \n setenv =\n@@ -64,75 +68,75 @@ commands =\n     coverage xml\n \n [testenv:black-check]\n-basepython = python\n+basepython = python3.9\n skip_install = True\n deps =\n     black\n \n commands =\n     python -VV\n-    black --line-length=79 --check --diff -v --skip-string-normalization src setup.py\n+    black --check --diff -v src setup.py\n \n [testenv:black-enforce]\n-basepython = python\n+basepython = python3.9\n skip_install = True\n deps =\n     black\n \n commands =\n     python -VV\n-    black -v --line-length=79 --skip-string-normalization src setup.py\n+    black -v src setup.py\n \n-[testenv:isort-apply]\n-basepython = python\n+[testenv:isort]\n+basepython = python3.9\n skip_install = True\n-\n deps =\n     isort\n \n commands =\n     python -VV\n-    isort {toxinidir}/src setup.py {posargs}\n+    isort --check-only --diff src setup.py\n \n-[testenv:isort]\n-basepython = python\n+[testenv:isort-apply]\n+basepython = python3.9\n skip_install = True\n+\n deps =\n     isort\n \n commands =\n     python -VV\n-    isort --check-only --diff {toxinidir}/src setup.py\n+    isort src setup.py {posargs}\n \n [testenv:lint]\n-basepython = python\n+basepython = python3.9\n skip_install = True\n \n deps =\n+    Jinja2<=3.0.3\n     isort\n     flake8\n     # helper to generate HTML reports:\n     flake8-html\n     flake8-blind-except\n     flake8-coding\n-    flake8-commas\n+    # flake8-commas\n     flake8-debugger\n     flake8-deprecated\n+    # flake8-docstrings\n     flake8-isort\n     flake8-pep3101\n-    #flake8-plone-api  # Sorry did not make sense here as this is plone.api\n     flake8-plone-hasattr\n     flake8-print\n-    flake8-quotes\n+    # flake8-quotes\n     flake8-string-format\n     flake8-todo\n-    flake8_strict\n \n commands =\n     python -VV\n     mkdir -p {toxinidir}/_build/flake8\n-    - flake8 --format=html --htmldir={toxinidir}/_build/flake8 src setup.py\n-    flake8 src setup.py\n+    - flake8 --format=html --htmldir={toxinidir}/_build/flake8 --ignore=C101 src setup.py\n+    flake8 --ignore=C101,P101,Q000 src setup.py\n \n whitelist_externals =\n     mkdir\n@@ -141,7 +145,7 @@ whitelist_externals =\n [testenv:plone6docs]\n # New docs with sphinx-book-theme\n # See [testenv:docs] for classic documentation\n-basepython = python\n+basepython = python3.9\n skip_install = False\n usedevelop = True\n extras =\n@@ -160,14 +164,14 @@ commands =\n # Locally for Maurits this only works with Python 2.7.\n # Travis is happy with 3.7, not with 3.8 or 3.9.\n # So pick the right one in .travis.yml (or GitHub Actions).\n-basepython = python\n+basepython = python3.9\n skip_install = False\n usedevelop = True\n extras =\n     tests\n \n deps =\n-    Sphinx\n+    -r requirements-docs.txt\n \n commands =\n     python -VV\n@@ -192,20 +196,6 @@ commands =\n     sphinx-build -b linkcheck -d _build/plone6docs/doctrees docs _build/plone6docs/linkcheck\n \n \n-[testenv:docs-livehtml]\n-basepython = python\n-skip_install = False\n-usedevelop = True\n-extras =\n-    {[testenv:plone6docs]extras}\n-deps =\n-    {[testenv:plone6docs]deps}\n-commands =\n-    python -VV\n-    mkdir -p {toxinidir}/_build/plone6docs\n-    sphinx-autobuild --ignore "*.swp" -b html docs _build/plone6docs/html \n-\n-\n [testenv:towncrier]\n basepython = python\n skip_install = True\n'

