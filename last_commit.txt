Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-10-22T14:07:04-04:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/7d061b00af9af0c97fdee3bb082fb62013b73cd0

Conver to p.a.testing

Files changed:
M Products/CMFPlone/tests/testSiteAdminRole.py

diff --git a/Products/CMFPlone/tests/testSiteAdminRole.py b/Products/CMFPlone/tests/testSiteAdminRole.py
index f129c5d..796ff2c 100644
--- a/Products/CMFPlone/tests/testSiteAdminRole.py
+++ b/Products/CMFPlone/tests/testSiteAdminRole.py
@@ -1,14 +1,16 @@
 # -*- coding: utf-8 -*-
-import pkg_resources
-from Testing import ZopeTestCase as ztc
 from AccessControl.PermissionRole import rolesForPermissionOn
-from Products.CMFPlone.tests import PloneTestCase
+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING
 
-# without this some permissions don't get initialized
-ztc.installProduct('Transience')
+import unittest
 
 
-class TestSiteAdministratorRole(PloneTestCase.PloneTestCase):
+class TestSiteAdministratorRole(unittest.TestCase):
+
+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
 
     def testExpectedPermissions(self):
         # This integration test shows that the correct permissions were


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-10-22T14:07:04-04:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/bd4f99c90811bec1cd537f6ad34622ed7e6655fa

Remove duplicated entry

Files changed:
M Products/CMFPlone/tests/testSiteAdminRole.py

diff --git a/Products/CMFPlone/tests/testSiteAdminRole.py b/Products/CMFPlone/tests/testSiteAdminRole.py
index 796ff2c..8c97129 100644
--- a/Products/CMFPlone/tests/testSiteAdminRole.py
+++ b/Products/CMFPlone/tests/testSiteAdminRole.py
@@ -177,7 +177,6 @@ def testExpectedPermissions(self):
             'Portlets: Manage portlets':                                1,
             'Portlets: View dashboard':                                 1,
             'Query Vocabulary':                                         0,
-            'Reply to item':                                            1,
             'Request review':                                           1,
             'Review portal content':                                    1,
             'Search ZCatalog':                                          1,


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-10-22T14:07:04-04:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/d43e8dece0ac3289ac3268f2f72e414c225348d1

p.a.folder side effect

Files changed:
M Products/CMFPlone/tests/testSiteAdminRole.py

diff --git a/Products/CMFPlone/tests/testSiteAdminRole.py b/Products/CMFPlone/tests/testSiteAdminRole.py
index 8c97129..83fac85 100644
--- a/Products/CMFPlone/tests/testSiteAdminRole.py
+++ b/Products/CMFPlone/tests/testSiteAdminRole.py
@@ -33,7 +33,8 @@ def testExpectedPermissions(self):
             'ATContentTypes: Add Document':                             1,
             'ATContentTypes: Add Event':                                1,
             'ATContentTypes: Add File':                                 1,
-            'ATContentTypes: Add Folder':                               1,
+            # see p.a.folder.__init__ as to why AT Add Folder is disabled
+            'ATContentTypes: Add Folder':                               0,
             'ATContentTypes: Add Image':                                1,
             'ATContentTypes: Add Large Plone Folder':                   1,
             'ATContentTypes: Add Link':                                 1,


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-10-22T14:07:04-04:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/6b2070576dbeb0a7ea3ed81037d6a85041271296

Kupu is no longer around

Files changed:
M Products/CMFPlone/tests/testSiteAdminRole.py

diff --git a/Products/CMFPlone/tests/testSiteAdminRole.py b/Products/CMFPlone/tests/testSiteAdminRole.py
index 83fac85..f295d72 100644
--- a/Products/CMFPlone/tests/testSiteAdminRole.py
+++ b/Products/CMFPlone/tests/testSiteAdminRole.py
@@ -207,12 +207,6 @@ def testExpectedPermissions(self):
             'plone.portlet.collection: Add collection portlet':         1,
             'plone.portlet.static: Add static portlet':                 1,
         }
-        if 'products.kupu' in pkg_resources.working_set.by_key:
-            expected.update({
-                'Add kupu Library Tools':                               0,
-                'Kupu: Manage libraries':                               1,
-                'Kupu: Query libraries':                                1,
-            })
         try:
             import plone.app.iterate
             plone.app.iterate  # pyflakes


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-10-22T14:07:04-04:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/545de1c9f028bf01ff4b67f6eaa568707c03b8ab

Another ZopeTestCase converted to p.a.testing

Files changed:
M Products/CMFPlone/tests/testUserFolderBasics.py

diff --git a/Products/CMFPlone/tests/testUserFolderBasics.py b/Products/CMFPlone/tests/testUserFolderBasics.py
index 7a89088..941b495 100644
--- a/Products/CMFPlone/tests/testUserFolderBasics.py
+++ b/Products/CMFPlone/tests/testUserFolderBasics.py
@@ -3,35 +3,45 @@
 # must pass these.
 
 from AccessControl import Unauthorized
-from Testing import ZopeTestCase
+from plone.app.testing import login
+from plone.app.testing import logout
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import TEST_USER_PASSWORD
-from Products.CMFPlone.tests import PloneTestCase
-from Products.CMFCore.tests.base.testcase import WarningInterceptor
+from plone.app.testing import setRoles
+from plone.app.testing.bbb import _createMemberarea
+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+
 import base64
+import unittest
 
-user_perms = ZopeTestCase.standard_permissions
 user_role = 'Member'
 
 
-class TestUserFolder(PloneTestCase.PloneTestCase, WarningInterceptor):
+class TestUserFolder(unittest.TestCase):
+
+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
 
-    def afterSetUp(self):
-        self.logout()
         self.uf = self.portal.acl_users
         self.basic = \
             'Basic %s' % base64.encodestring(
                 '%s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD))
+
+        _createMemberarea(self.portal, TEST_USER_ID)
+        self.folder = self.portal.portal_membership.getHomeFolder(TEST_USER_ID)
+
         # Set up a published object accessible to the default user
         self.folder.addDTMLMethod('doc', file='')
         self.folder.doc.manage_permission('View', [user_role], acquire=0)
         # Rig the REQUEST so it looks like we traversed to 'doc'
-        self.app.REQUEST.set('PUBLISHED', self.folder['doc'])
-        self.app.REQUEST.set('PARENTS', [self.folder, self.app])
+        self.request.set('PUBLISHED', self.folder['doc'])
+        self.request.set('PARENTS', [self.folder, self.portal])
         folder_path = list(self.folder.getPhysicalPath())
-        self.app.REQUEST.steps = folder_path + ['doc']
-        self._trap_warning_output()
+        self.request.steps = folder_path + ['doc']
 
         if 'auto_group' in self.uf:
             self.uf.manage_delObjects(['auto_group'])
@@ -41,6 +51,9 @@ def afterSetUp(self):
         self.portal.portal_groups.removeGroups(
             self.portal.portal_groups.listGroupIds())
 
+        login(self.portal, TEST_USER_NAME)
+        setRoles(self.portal, TEST_USER_ID, [user_role, ])
+
     def testGetUser(self):
         self.assertNotEqual(self.uf.getUser(TEST_USER_NAME), None)
 
@@ -55,13 +68,17 @@ def testGetBadUserById(self):
 
     def testGetUsers(self):
         users = self.uf.getUsers()
-        self.assertTrue(users)
-        self.assertEqual(users[0].getUserName(), TEST_USER_NAME)
+        self.assertIn(
+            TEST_USER_NAME,
+            [u.getUserName() for u in users]
+        )
 
     def testGetUserNames(self):
         names = self.uf.getUserNames()
-        self.assertTrue(names)
-        self.assertEqual(names[0], TEST_USER_NAME)
+        self.assertIn(
+            TEST_USER_NAME,
+            names
+        )
 
     def testGetRoles(self):
         user = self.uf.getUser(TEST_USER_NAME)
@@ -96,41 +113,39 @@ def testHasLocalRolePermission(self):
         self.assertTrue(user.has_permission('Add Folders', self.folder))
 
     def testValidate(self):
-        self.app.REQUEST._auth = self.basic
-        user = self.uf.validate(self.app.REQUEST, self.basic, [user_role])
+        self.request._auth = self.basic
+        user = self.uf.validate(self.request, self.basic, [user_role])
         self.assertNotEqual(user, None)
         self.assertEqual(user.getUserName(), TEST_USER_NAME)
 
     def testNotValidateWithoutAuth(self):
-        self.app.REQUEST._auth = ''
-        user = self.uf.validate(self.app.REQUEST, '', ['role1'])
+        self.request._auth = ''
+        user = self.uf.validate(self.request, '', ['role1'])
         self.assertEqual(user, None)
 
     def testValidateWithoutRoles(self):
-        self.app.REQUEST._auth = self.basic
+        self.request._auth = self.basic
         # Roles will be determined by looking at 'doc' itself
-        user = self.uf.validate(self.app.REQUEST, self.basic)
+        user = self.uf.validate(self.request, self.basic)
         self.assertEqual(user.getUserName(), TEST_USER_NAME)
 
     def testNotValidateWithEmptyRoles(self):
-        self.app.REQUEST._auth = self.basic
-        user = self.uf.validate(self.app.REQUEST, self.basic, [])
+        self.request._auth = self.basic
+        user = self.uf.validate(self.request, self.basic, [])
         self.assertEqual(user, None)
 
     def testNotValidateWithWrongRoles(self):
-        self.app.REQUEST._auth = self.basic
-        user = self.uf.validate(self.app.REQUEST, self.basic, ['Manager'])
+        self.request._auth = self.basic
+        user = self.uf.validate(self.request, self.basic, ['Manager'])
         self.assertEqual(user, None)
 
     def testAllowAccessToUser(self):
-        self.login()
+        login(self.portal, TEST_USER_NAME)
         try:
             self.folder.restrictedTraverse('doc')
         except Unauthorized:
             self.fail('Unauthorized')
 
     def testDenyAccessToAnonymous(self):
+        logout()
         self.assertRaises(Unauthorized, self.folder.restrictedTraverse, 'doc')
-
-    def beforeTearDown(self):
-        self._free_warning_output()


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-10-22T14:07:04-04:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/10d3c5180534b49cd682f4ad5d470f52fea0606b

Another ZopeTestCase to p.a.testing

Turn the doctests in unit tests.

It makes it far more easy to write and maintain them.

Files changed:
A Products/CMFPlone/tests/test_PloneTool.py
M Products/CMFPlone/PloneTool.py
M Products/CMFPlone/tests/test_doctests.py

diff --git a/Products/CMFPlone/PloneTool.py b/Products/CMFPlone/PloneTool.py
index 84152cf..3f879bc 100644
--- a/Products/CMFPlone/PloneTool.py
+++ b/Products/CMFPlone/PloneTool.py
@@ -112,50 +112,22 @@ def setMemberProperties(self, member, REQUEST=None, **properties):
     @deprecate(('`getSiteEncoding` is deprecated. Plone only supports UTF-8 '
                 'currently. This method always returns "utf-8"'))
     def getSiteEncoding(self):
-        """ Get the the site encoding, which is utf-8.
-
-        >>> ptool = self.portal.plone_utils
-
-        >>> ptool.getSiteEncoding()
-        'utf-8'
-        """
+        """ Get the the site encoding, which is utf-8."""
         return 'utf-8'
 
     @security.public
     def portal_utf8(self, str, errors='strict'):
-        """ Transforms an string in portal encoding to utf8.
-
-        >>> ptool = self.portal.plone_utils
-        >>> text = u'Eksempel \xe6\xf8\xe5'
-        >>> sitetext = text.encode('utf-8')
-
-        >>> ptool.portal_utf8(sitetext) == text.encode('utf-8')
-        True
-        """
+        """Transforms an string in portal encoding to utf8."""
         return utils.portal_utf8(self, str, errors)
 
     @security.public
     def utf8_portal(self, str, errors='strict'):
-        """ Transforms an utf8 string to portal encoding.
-
-        >>> ptool = self.portal.plone_utils
-        >>> text = u'Eksempel \xe6\xf8\xe5'
-        >>> utf8text = text.encode('utf-8')
-
-        >>> ptool.utf8_portal(utf8text) == text.encode('utf-8')
-        True
-        """
+        """Transforms an utf8 string to portal encoding."""
         return utils.utf8_portal(self, str, errors)
 
     @security.private
     def getMailHost(self):
-        """ Gets the MailHost.
-
-        >>> ptool = self.portal.plone_utils
-
-        >>> ptool.getMailHost()
-        <MailHost ...>
-        """
+        """Gets the MailHost."""
         return getattr(aq_parent(self), 'MailHost')
 
     @security.public
@@ -371,11 +343,6 @@ def getReviewStateTitleFor(self, obj):
         object's review_state.
 
         Returns None if no review_state found.
-
-        >>> ptool = self.portal.plone_utils
-
-        >>> ptool.getReviewStateTitleFor(self.folder).lower()
-        'public draft'
         """
         wf_tool = getToolByName(self, 'portal_workflow')
         wfs = ()
@@ -445,16 +412,7 @@ def fixOwnerRole(object, user_id):
     def urlparse(self, url):
         """Returns the pieces of url in a six-part tuple.
 
-        See Python standard library urlparse.urlparse:
-        http://python.org/doc/lib/module-urlparse.html
-
-        >>> ptool = self.portal.plone_utils
-
-        >>> url = 'http://dev.plone.org/plone/query?milestone=2.1#foo'
-        >>> tuple(ptool.urlparse(url))
-        ('http', 'dev.plone.org', '/plone/query', '', 'milestone=2.1', 'foo')
-
-        New in Python 2.6: urlparse now returns a ParseReusult object.
+        Since Python 2.6: urlparse now returns a ParseResult object.
         We just need the tuple form which is tuple(result).
         """
         return tuple(urlparse.urlparse(url))
@@ -463,15 +421,6 @@ def urlparse(self, url):
     def urlunparse(self, url_tuple):
         """Puts a url back together again, in the manner that
         urlparse breaks it.
-
-        See also Python standard library: urlparse.urlunparse:
-        http://python.org/doc/lib/module-urlparse.html
-
-        >>> ptool = self.portal.plone_utils
-
-        >>> ptool.urlunparse(
-        ...     ('http', 'plone.org', '/support', '', '', 'users'))
-        'http://plone.org/support#users'
         """
         return urlparse.urlunparse(url_tuple)
 
@@ -609,15 +558,6 @@ def addPortalMessage(self, message, type='info', request=None):
         Call this once or more to add messages to be displayed at the
         top of the web page.
 
-        Examples:
-
-        >>> ptool = self.portal.plone_utils
-
-        >>> ptool.addPortalMessage(u'A random warning message', 'warning')
-
-        If no type is given it defaults to 'info'
-        >>> ptool.addPortalMessage(u'A random info message')
-
         The arguments are:
             message:   a string, with the text message you want to show,
                        or a HTML fragment (see type='structure' below)
@@ -811,11 +751,6 @@ def isStructuralFolder(self, obj):
         That is, a folderish item which does not explicitly implement
         INonStructuralFolder to declare that it doesn't wish to be treated
         as a folder by the navtree, the tab generation etc.
-
-        >>> ptool = self.portal.plone_utils
-
-        >>> ptool.isStructuralFolder(self.folder)
-        True
         """
         return (
             obj.isPrincipiaFolderish
@@ -854,14 +789,7 @@ def isLocalRoleAcquired(self, obj):
 
     @security.public
     def getOwnerName(self, obj):
-        """ Returns the userid of the owner of an object.
-
-        >>> ptool = self.portal.plone_utils
-        >>> from plone.app.testing import TEST_USER_ID
-
-        >>> ptool.getOwnerName(self.folder) == TEST_USER_ID
-        True
-        """
+        """ Returns the userid of the owner of an object."""
         mt = getToolByName(self, 'portal_membership')
         if not mt.checkPermission(View, obj):
             raise Unauthorized
@@ -876,51 +804,6 @@ def normalizeString(self, text):
 
         normalizeString() converts a whole string to a normalized form that
         should be safe to use as in a url, as a css id, etc.
-
-        >>> ptool = self.portal.plone_utils
-
-        >>> ptool.normalizeString("Foo bar")
-        'foo-bar'
-
-        >>> ptool.normalizeString("Some!_are allowed, others&?:are not")
-        'some-_are-allowed-others-are-not'
-
-        >>> ptool.normalizeString("Some!_are allowed, others&?:are not")
-        'some-_are-allowed-others-are-not'
-
-        all punctuation and spacing is removed and replaced with a '-':
-
-        >>> ptool.normalizeString("a string with spaces")
-        'a-string-with-spaces'
-
-        >>> ptool.normalizeString("p.u,n;c(t)u!a@t#i$o%n")
-        'p-u-n-c-t-u-a-t-i-o-n'
-
-        strings are lowercased:
-
-        >>> ptool.normalizeString("UppERcaSE")
-        'uppercase'
-
-        punctuation, spaces, etc. are trimmed and multiples are reduced to just
-        one:
-
-        >>> ptool.normalizeString(" a string    ")
-        'a-string'
-        >>> ptool.normalizeString(">here's another!")
-        'heres-another'
-
-        >>> ptool.normalizeString("one with !@#$!@#$ stuff in the middle")
-        'one-with-stuff-in-the-middle'
-
-        the exception to all this is that if there is something that looks like
-        a filename with an extension at the end, it will preserve the last
-        period.
-
-        >>> ptool.normalizeString("this is a file.gif")
-        'this-is-a-file-gif'
-
-        >>> ptool.normalizeString("this is. also. a file.html")
-        'this-is-also-a-file-html'
         """
         return utils.normalizeString(text, context=self)
 
@@ -1081,13 +964,7 @@ def isIDAutoGenerated(self, id):
 
     @security.public
     def getEmptyTitle(self, translated=True):
-        """ Returns string to be used for objects with no title or id.
-
-        >>> ptool = self.portal.plone_utils
-
-        >>> ptool.getEmptyTitle(translated=False) == u'[\xb7\xb7\xb7]'
-        True
-        """
+        """Returns string to be used for objects with no title or id."""
         return utils.getEmptyTitle(self, translated)
 
     @security.public
diff --git a/Products/CMFPlone/tests/test_PloneTool.py b/Products/CMFPlone/tests/test_PloneTool.py
new file mode 100644
index 0000000..f58b6d9
--- /dev/null
+++ b/Products/CMFPlone/tests/test_PloneTool.py
@@ -0,0 +1,208 @@
+# -*- coding: utf-8 -*-
+from plone.app.testing import login
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import TEST_USER_NAME
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+from Products.MailHost.interfaces import IMailHost
+from Products.statusmessages.interfaces import IStatusMessage
+
+import unittest
+
+
+class TestPloneTool(unittest.TestCase):
+
+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+
+        self.tool = getToolByName(self.portal, 'plone_utils', None)
+
+    def test_getSiteEncoding(self):
+        self.assertEqual(
+            self.tool.getSiteEncoding(),
+            'utf-8'
+        )
+
+    def test_portal_utf8(self):
+        text = u'Eksempel \xe6\xf8\xe5'
+        site_text = text.encode('utf-8')
+
+        self.assertEqual(
+            self.tool.portal_utf8(site_text),
+            text.encode('utf-8')
+        )
+
+    def test_utf8_portal(self):
+        text = u'Eksempel \xe6\xf8\xe5'
+        utf8text = text.encode('utf-8')
+
+        self.assertEqual(
+            self.tool.utf8_portal(utf8text),
+            text.encode('utf-8')
+        )
+
+    def test_getMailHost(self):
+        self.assertTrue(
+            IMailHost.providedBy(self.tool.getMailHost())
+        )
+
+    def test_getReviewStateTitleFor(self):
+        folder_id = self.portal.invokeFactory('Folder', 'folder')
+        folder = self.portal[folder_id]
+        self.assertEqual(
+            self.tool.getReviewStateTitleFor(folder).lower(),
+            'private'
+        )
+
+    def test_urlparse(self):
+        """See Python standard library urlparse.urlparse:
+        http://python.org/doc/lib/module-urlparse.html
+        """
+        url = 'http://dev.plone.org/plone/query?milestone=2.1#foo'
+        expected = (
+            'http',
+            'dev.plone.org',
+            '/plone/query',
+            '',
+            'milestone=2.1',
+            'foo'
+        )
+        self.assertEqual(
+            tuple(self.tool.urlparse(url)),
+            expected
+        )
+
+    def test_urlunparse(self):
+        """See Python standard library: urlparse.urlunparse:
+        http://python.org/doc/lib/module-urlparse.html
+        """
+        data = ('http', 'plone.org', '/support', '', '', 'users')
+        self.assertEqual(
+            self.tool.urlunparse(data),
+            'http://plone.org/support#users'
+        )
+
+    def test_addPortalMessage(self):
+        # no status messages
+        self.assertEqual(
+            IStatusMessage(self.request).show(),
+            []
+        )
+
+        self.tool.addPortalMessage(u'A random warning message', 'warning')
+        status = IStatusMessage(self.request).show()
+        self.assertEqual(
+            len(status),
+            1
+        )
+        self.assertEqual(
+            status[0].type,
+            'warning'
+        )
+
+        # again no status messages
+        self.assertEqual(
+            IStatusMessage(self.request).show(),
+            []
+        )
+
+        self.tool.addPortalMessage(u'A random info message')
+        status = IStatusMessage(self.request).show()
+        self.assertEqual(
+            len(status),
+            1
+        )
+        self.assertEqual(
+            status[0].type,
+            'info'
+        )
+
+    def test_isStructuralFolder(self):
+        folder_id = self.portal.invokeFactory('Folder', 'folder')
+        folder = self.portal[folder_id]
+        self.assertTrue(self.tool.isStructuralFolder(folder))
+
+    def test_getOwnerName(self):
+        login(self.portal, TEST_USER_NAME)
+
+        folder_id = self.portal.invokeFactory('Folder', 'folder')
+        folder = self.portal[folder_id]
+
+        self.assertEqual(
+            self.tool.getOwnerName(folder),
+            TEST_USER_ID
+        )
+
+    def test_normalizeString(self):
+        self.assertEqual(
+            self.tool.normalizeString("Foo bar"),
+            'foo-bar'
+        )
+        self.assertEqual(
+            self.tool.normalizeString("Some!_are allowed, others&?:are not"),
+            'some-_are-allowed-others-are-not'
+        )
+        self.assertEqual(
+            self.tool.normalizeString("Some!_are allowed, others&?:are not"),
+            'some-_are-allowed-others-are-not'
+        )
+
+    def test_normalizeString_punctuation_and_spacing(self):
+        """all punctuation and spacing is removed and replaced with a '-'"""
+        self.assertEqual(
+            self.tool.normalizeString("a string with spaces"),
+            'a-string-with-spaces'
+        )
+        self.assertEqual(
+            self.tool.normalizeString("p.u,n;c(t)u!a@t#i$o%n"),
+            'p-u-n-c-t-u-a-t-i-o-n'
+        )
+
+    def test_normalizeString_lowercase(self):
+        """strings are lowercased"""
+        self.assertEqual(
+            self.tool.normalizeString("UppERcaSE"),
+            'uppercase'
+        )
+
+    def test_normalizeString_trim_and_reduce(self):
+        """punctuation, spaces, etc. are trimmed and multiples are reduced to
+        just one
+        """
+        self.assertEqual(
+            self.tool.normalizeString(" a string    "),
+            'a-string'
+        )
+        self.assertEqual(
+            self.tool.normalizeString(">here's another!"),
+            'heres-another'
+        )
+
+        self.assertEqual(
+            self.tool.normalizeString("one with !@#$!@#$ stuff in the middle"),
+            'one-with-stuff-in-the-middle'
+        )
+
+    def test_normalizeString_file_like(self):
+        """the exception to all this is that if there is something that looks
+        like a filename with an extension at the end, it will preserve the last
+        period.
+        """
+        self.assertEqual(
+            self.tool.normalizeString("this is a file.gif"),
+            'this-is-a-file-gif'
+        )
+
+        self.assertEqual(
+            self.tool.normalizeString("this is. also. a file.html"),
+            'this-is-also-a-file-html'
+        )
+
+    def test_getEmptyTitle(self):
+        self.assertEqual(
+            self.tool.getEmptyTitle(translated=False),
+            u'[\xb7\xb7\xb7]'
+        )
diff --git a/Products/CMFPlone/tests/test_doctests.py b/Products/CMFPlone/tests/test_doctests.py
index e280945..3bd19c4 100644
--- a/Products/CMFPlone/tests/test_doctests.py
+++ b/Products/CMFPlone/tests/test_doctests.py
@@ -1,7 +1,5 @@
 # -*- coding: utf-8 -*-
 from doctest import DocTestSuite, DocFileSuite
-from Products.CMFPlone.tests.PloneTestCase import FunctionalTestCase
-from Testing.ZopeTestCase import ZopeDocTestSuite
 from unittest import TestSuite
 
 
@@ -9,8 +7,6 @@ def test_suite():
     suites = (
         DocFileSuite('messages.txt', package='Products.CMFPlone.tests'),
         DocTestSuite('Products.CMFPlone.i18nl10n'),
-        ZopeDocTestSuite('Products.CMFPlone.PloneTool',
-                         test_class=FunctionalTestCase),
         DocTestSuite('Products.CMFPlone.TranslationServiceTool'),
         DocTestSuite('Products.CMFPlone.utils'),
         DocTestSuite('Products.CMFPlone.workflow'),


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-10-22T14:17:48-04:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/157d8ff098da092ea68ca88c965db826febf3a60

Update CHANGES

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 6f858f8..202c698 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -82,6 +82,9 @@ Bug fixes:
 - Use fork of grunt-sed which is compatible with newer grunt version.
   [gforcada]
 
+- Move some tests from ZopeTestCase to plone.app.testing.
+  [gforcada]
+
 5.1a2 (2016-08-19)
 ------------------
 


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-10-22T16:53:17-04:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/76cf1a28163f0974ef62e2ee420cb87f4caf0115

Merge pull request #1349 from plone/gforcada-remove-ZopeTestCase

Remove ZopeTestCase

Files changed:
A Products/CMFPlone/tests/test_PloneTool.py
M CHANGES.rst
M Products/CMFPlone/PloneTool.py
M Products/CMFPlone/tests/testSiteAdminRole.py
M Products/CMFPlone/tests/testUserFolderBasics.py
M Products/CMFPlone/tests/test_doctests.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 6f858f8..202c698 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -82,6 +82,9 @@ Bug fixes:
 - Use fork of grunt-sed which is compatible with newer grunt version.
   [gforcada]
 
+- Move some tests from ZopeTestCase to plone.app.testing.
+  [gforcada]
+
 5.1a2 (2016-08-19)
 ------------------
 
diff --git a/Products/CMFPlone/PloneTool.py b/Products/CMFPlone/PloneTool.py
index 84152cf..3f879bc 100644
--- a/Products/CMFPlone/PloneTool.py
+++ b/Products/CMFPlone/PloneTool.py
@@ -112,50 +112,22 @@ def setMemberProperties(self, member, REQUEST=None, **properties):
     @deprecate(('`getSiteEncoding` is deprecated. Plone only supports UTF-8 '
                 'currently. This method always returns "utf-8"'))
     def getSiteEncoding(self):
-        """ Get the the site encoding, which is utf-8.
-
-        >>> ptool = self.portal.plone_utils
-
-        >>> ptool.getSiteEncoding()
-        'utf-8'
-        """
+        """ Get the the site encoding, which is utf-8."""
         return 'utf-8'
 
     @security.public
     def portal_utf8(self, str, errors='strict'):
-        """ Transforms an string in portal encoding to utf8.
-
-        >>> ptool = self.portal.plone_utils
-        >>> text = u'Eksempel \xe6\xf8\xe5'
-        >>> sitetext = text.encode('utf-8')
-
-        >>> ptool.portal_utf8(sitetext) == text.encode('utf-8')
-        True
-        """
+        """Transforms an string in portal encoding to utf8."""
         return utils.portal_utf8(self, str, errors)
 
     @security.public
     def utf8_portal(self, str, errors='strict'):
-        """ Transforms an utf8 string to portal encoding.
-
-        >>> ptool = self.portal.plone_utils
-        >>> text = u'Eksempel \xe6\xf8\xe5'
-        >>> utf8text = text.encode('utf-8')
-
-        >>> ptool.utf8_portal(utf8text) == text.encode('utf-8')
-        True
-        """
+        """Transforms an utf8 string to portal encoding."""
         return utils.utf8_portal(self, str, errors)
 
     @security.private
     def getMailHost(self):
-        """ Gets the MailHost.
-
-        >>> ptool = self.portal.plone_utils
-
-        >>> ptool.getMailHost()
-        <MailHost ...>
-        """
+        """Gets the MailHost."""
         return getattr(aq_parent(self), 'MailHost')
 
     @security.public
@@ -371,11 +343,6 @@ def getReviewStateTitleFor(self, obj):
         object's review_state.
 
         Returns None if no review_state found.
-
-        >>> ptool = self.portal.plone_utils
-
-        >>> ptool.getReviewStateTitleFor(self.folder).lower()
-        'public draft'
         """
         wf_tool = getToolByName(self, 'portal_workflow')
         wfs = ()
@@ -445,16 +412,7 @@ def fixOwnerRole(object, user_id):
     def urlparse(self, url):
         """Returns the pieces of url in a six-part tuple.
 
-        See Python standard library urlparse.urlparse:
-        http://python.org/doc/lib/module-urlparse.html
-
-        >>> ptool = self.portal.plone_utils
-
-        >>> url = 'http://dev.plone.org/plone/query?milestone=2.1#foo'
-        >>> tuple(ptool.urlparse(url))
-        ('http', 'dev.plone.org', '/plone/query', '', 'milestone=2.1', 'foo')
-
-        New in Python 2.6: urlparse now returns a ParseReusult object.
+        Since Python 2.6: urlparse now returns a ParseResult object.
         We just need the tuple form which is tuple(result).
         """
         return tuple(urlparse.urlparse(url))
@@ -463,15 +421,6 @@ def urlparse(self, url):
     def urlunparse(self, url_tuple):
         """Puts a url back together again, in the manner that
         urlparse breaks it.
-
-        See also Python standard library: urlparse.urlunparse:
-        http://python.org/doc/lib/module-urlparse.html
-
-        >>> ptool = self.portal.plone_utils
-
-        >>> ptool.urlunparse(
-        ...     ('http', 'plone.org', '/support', '', '', 'users'))
-        'http://plone.org/support#users'
         """
         return urlparse.urlunparse(url_tuple)
 
@@ -609,15 +558,6 @@ def addPortalMessage(self, message, type='info', request=None):
         Call this once or more to add messages to be displayed at the
         top of the web page.
 
-        Examples:
-
-        >>> ptool = self.portal.plone_utils
-
-        >>> ptool.addPortalMessage(u'A random warning message', 'warning')
-
-        If no type is given it defaults to 'info'
-        >>> ptool.addPortalMessage(u'A random info message')
-
         The arguments are:
             message:   a string, with the text message you want to show,
                        or a HTML fragment (see type='structure' below)
@@ -811,11 +751,6 @@ def isStructuralFolder(self, obj):
         That is, a folderish item which does not explicitly implement
         INonStructuralFolder to declare that it doesn't wish to be treated
         as a folder by the navtree, the tab generation etc.
-
-        >>> ptool = self.portal.plone_utils
-
-        >>> ptool.isStructuralFolder(self.folder)
-        True
         """
         return (
             obj.isPrincipiaFolderish
@@ -854,14 +789,7 @@ def isLocalRoleAcquired(self, obj):
 
     @security.public
     def getOwnerName(self, obj):
-        """ Returns the userid of the owner of an object.
-
-        >>> ptool = self.portal.plone_utils
-        >>> from plone.app.testing import TEST_USER_ID
-
-        >>> ptool.getOwnerName(self.folder) == TEST_USER_ID
-        True
-        """
+        """ Returns the userid of the owner of an object."""
         mt = getToolByName(self, 'portal_membership')
         if not mt.checkPermission(View, obj):
             raise Unauthorized
@@ -876,51 +804,6 @@ def normalizeString(self, text):
 
         normalizeString() converts a whole string to a normalized form that
         should be safe to use as in a url, as a css id, etc.
-
-        >>> ptool = self.portal.plone_utils
-
-        >>> ptool.normalizeString("Foo bar")
-        'foo-bar'
-
-        >>> ptool.normalizeString("Some!_are allowed, others&?:are not")
-        'some-_are-allowed-others-are-not'
-
-        >>> ptool.normalizeString("Some!_are allowed, others&?:are not")
-        'some-_are-allowed-others-are-not'
-
-        all punctuation and spacing is removed and replaced with a '-':
-
-        >>> ptool.normalizeString("a string with spaces")
-        'a-string-with-spaces'
-
-        >>> ptool.normalizeString("p.u,n;c(t)u!a@t#i$o%n")
-        'p-u-n-c-t-u-a-t-i-o-n'
-
-        strings are lowercased:
-
-        >>> ptool.normalizeString("UppERcaSE")
-        'uppercase'
-
-        punctuation, spaces, etc. are trimmed and multiples are reduced to just
-        one:
-
-        >>> ptool.normalizeString(" a string    ")
-        'a-string'
-        >>> ptool.normalizeString(">here's another!")
-        'heres-another'
-
-        >>> ptool.normalizeString("one with !@#$!@#$ stuff in the middle")
-        'one-with-stuff-in-the-middle'
-
-        the exception to all this is that if there is something that looks like
-        a filename with an extension at the end, it will preserve the last
-        period.
-
-        >>> ptool.normalizeString("this is a file.gif")
-        'this-is-a-file-gif'
-
-        >>> ptool.normalizeString("this is. also. a file.html")
-        'this-is-also-a-file-html'
         """
         return utils.normalizeString(text, context=self)
 
@@ -1081,13 +964,7 @@ def isIDAutoGenerated(self, id):
 
     @security.public
     def getEmptyTitle(self, translated=True):
-        """ Returns string to be used for objects with no title or id.
-
-        >>> ptool = self.portal.plone_utils
-
-        >>> ptool.getEmptyTitle(translated=False) == u'[\xb7\xb7\xb7]'
-        True
-        """
+        """Returns string to be used for objects with no title or id."""
         return utils.getEmptyTitle(self, translated)
 
     @security.public
diff --git a/Products/CMFPlone/tests/testSiteAdminRole.py b/Products/CMFPlone/tests/testSiteAdminRole.py
index f129c5d..f295d72 100644
--- a/Products/CMFPlone/tests/testSiteAdminRole.py
+++ b/Products/CMFPlone/tests/testSiteAdminRole.py
@@ -1,14 +1,16 @@
 # -*- coding: utf-8 -*-
-import pkg_resources
-from Testing import ZopeTestCase as ztc
 from AccessControl.PermissionRole import rolesForPermissionOn
-from Products.CMFPlone.tests import PloneTestCase
+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING
 
-# without this some permissions don't get initialized
-ztc.installProduct('Transience')
+import unittest
 
 
-class TestSiteAdministratorRole(PloneTestCase.PloneTestCase):
+class TestSiteAdministratorRole(unittest.TestCase):
+
+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
 
     def testExpectedPermissions(self):
         # This integration test shows that the correct permissions were
@@ -31,7 +33,8 @@ def testExpectedPermissions(self):
             'ATContentTypes: Add Document':                             1,
             'ATContentTypes: Add Event':                                1,
             'ATContentTypes: Add File':                                 1,
-            'ATContentTypes: Add Folder':                               1,
+            # see p.a.folder.__init__ as to why AT Add Folder is disabled
+            'ATContentTypes: Add Folder':                               0,
             'ATContentTypes: Add Image':                                1,
             'ATContentTypes: Add Large Plone Folder':                   1,
             'ATContentTypes: Add Link':                                 1,
@@ -175,7 +178,6 @@ def testExpectedPermissions(self):
             'Portlets: Manage portlets':                                1,
             'Portlets: View dashboard':                                 1,
             'Query Vocabulary':                                         0,
-            'Reply to item':                                            1,
             'Request review':                                           1,
             'Review portal content':                                    1,
             'Search ZCatalog':                                          1,
@@ -205,12 +207,6 @@ def testExpectedPermissions(self):
             'plone.portlet.collection: Add collection portlet':         1,
             'plone.portlet.static: Add static portlet':                 1,
         }
-        if 'products.kupu' in pkg_resources.working_set.by_key:
-            expected.update({
-                'Add kupu Library Tools':                               0,
-                'Kupu: Manage libraries':                               1,
-                'Kupu: Query libraries':                                1,
-            })
         try:
             import plone.app.iterate
             plone.app.iterate  # pyflakes
diff --git a/Products/CMFPlone/tests/testUserFolderBasics.py b/Products/CMFPlone/tests/testUserFolderBasics.py
index 7a89088..941b495 100644
--- a/Products/CMFPlone/tests/testUserFolderBasics.py
+++ b/Products/CMFPlone/tests/testUserFolderBasics.py
@@ -3,35 +3,45 @@
 # must pass these.
 
 from AccessControl import Unauthorized
-from Testing import ZopeTestCase
+from plone.app.testing import login
+from plone.app.testing import logout
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import TEST_USER_PASSWORD
-from Products.CMFPlone.tests import PloneTestCase
-from Products.CMFCore.tests.base.testcase import WarningInterceptor
+from plone.app.testing import setRoles
+from plone.app.testing.bbb import _createMemberarea
+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+
 import base64
+import unittest
 
-user_perms = ZopeTestCase.standard_permissions
 user_role = 'Member'
 
 
-class TestUserFolder(PloneTestCase.PloneTestCase, WarningInterceptor):
+class TestUserFolder(unittest.TestCase):
+
+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
 
-    def afterSetUp(self):
-        self.logout()
         self.uf = self.portal.acl_users
         self.basic = \
             'Basic %s' % base64.encodestring(
                 '%s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD))
+
+        _createMemberarea(self.portal, TEST_USER_ID)
+        self.folder = self.portal.portal_membership.getHomeFolder(TEST_USER_ID)
+
         # Set up a published object accessible to the default user
         self.folder.addDTMLMethod('doc', file='')
         self.folder.doc.manage_permission('View', [user_role], acquire=0)
         # Rig the REQUEST so it looks like we traversed to 'doc'
-        self.app.REQUEST.set('PUBLISHED', self.folder['doc'])
-        self.app.REQUEST.set('PARENTS', [self.folder, self.app])
+        self.request.set('PUBLISHED', self.folder['doc'])
+        self.request.set('PARENTS', [self.folder, self.portal])
         folder_path = list(self.folder.getPhysicalPath())
-        self.app.REQUEST.steps = folder_path + ['doc']
-        self._trap_warning_output()
+        self.request.steps = folder_path + ['doc']
 
         if 'auto_group' in self.uf:
             self.uf.manage_delObjects(['auto_group'])
@@ -41,6 +51,9 @@ def afterSetUp(self):
         self.portal.portal_groups.removeGroups(
             self.portal.portal_groups.listGroupIds())
 
+        login(self.portal, TEST_USER_NAME)
+        setRoles(self.portal, TEST_USER_ID, [user_role, ])
+
     def testGetUser(self):
         self.assertNotEqual(self.uf.getUser(TEST_USER_NAME), None)
 
@@ -55,13 +68,17 @@ def testGetBadUserById(self):
 
     def testGetUsers(self):
         users = self.uf.getUsers()
-        self.assertTrue(users)
-        self.assertEqual(users[0].getUserName(), TEST_USER_NAME)
+        self.assertIn(
+            TEST_USER_NAME,
+            [u.getUserName() for u in users]
+        )
 
     def testGetUserNames(self):
         names = self.uf.getUserNames()
-        self.assertTrue(names)
-        self.assertEqual(names[0], TEST_USER_NAME)
+        self.assertIn(
+            TEST_USER_NAME,
+            names
+        )
 
     def testGetRoles(self):
         user = self.uf.getUser(TEST_USER_NAME)
@@ -96,41 +113,39 @@ def testHasLocalRolePermission(self):
         self.assertTrue(user.has_permission('Add Folders', self.folder))
 
     def testValidate(self):
-        self.app.REQUEST._auth = self.basic
-        user = self.uf.validate(self.app.REQUEST, self.basic, [user_role])
+        self.request._auth = self.basic
+        user = self.uf.validate(self.request, self.basic, [user_role])
         self.assertNotEqual(user, None)
         self.assertEqual(user.getUserName(), TEST_USER_NAME)
 
     def testNotValidateWithoutAuth(self):
-        self.app.REQUEST._auth = ''
-        user = self.uf.validate(self.app.REQUEST, '', ['role1'])
+        self.request._auth = ''
+        user = self.uf.validate(self.request, '', ['role1'])
         self.assertEqual(user, None)
 
     def testValidateWithoutRoles(self):
-        self.app.REQUEST._auth = self.basic
+        self.request._auth = self.basic
         # Roles will be determined by looking at 'doc' itself
-        user = self.uf.validate(self.app.REQUEST, self.basic)
+        user = self.uf.validate(self.request, self.basic)
         self.assertEqual(user.getUserName(), TEST_USER_NAME)
 
     def testNotValidateWithEmptyRoles(self):
-        self.app.REQUEST._auth = self.basic
-        user = self.uf.validate(self.app.REQUEST, self.basic, [])
+        self.request._auth = self.basic
+        user = self.uf.validate(self.request, self.basic, [])
         self.assertEqual(user, None)
 
     def testNotValidateWithWrongRoles(self):
-        self.app.REQUEST._auth = self.basic
-        user = self.uf.validate(self.app.REQUEST, self.basic, ['Manager'])
+        self.request._auth = self.basic
+        user = self.uf.validate(self.request, self.basic, ['Manager'])
         self.assertEqual(user, None)
 
     def testAllowAccessToUser(self):
-        self.login()
+        login(self.portal, TEST_USER_NAME)
         try:
             self.folder.restrictedTraverse('doc')
         except Unauthorized:
             self.fail('Unauthorized')
 
     def testDenyAccessToAnonymous(self):
+        logout()
         self.assertRaises(Unauthorized, self.folder.restrictedTraverse, 'doc')
-
-    def beforeTearDown(self):
-        self._free_warning_output()
diff --git a/Products/CMFPlone/tests/test_PloneTool.py b/Products/CMFPlone/tests/test_PloneTool.py
new file mode 100644
index 0000000..f58b6d9
--- /dev/null
+++ b/Products/CMFPlone/tests/test_PloneTool.py
@@ -0,0 +1,208 @@
+# -*- coding: utf-8 -*-
+from plone.app.testing import login
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import TEST_USER_NAME
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+from Products.MailHost.interfaces import IMailHost
+from Products.statusmessages.interfaces import IStatusMessage
+
+import unittest
+
+
+class TestPloneTool(unittest.TestCase):
+
+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+
+        self.tool = getToolByName(self.portal, 'plone_utils', None)
+
+    def test_getSiteEncoding(self):
+        self.assertEqual(
+            self.tool.getSiteEncoding(),
+            'utf-8'
+        )
+
+    def test_portal_utf8(self):
+        text = u'Eksempel \xe6\xf8\xe5'
+        site_text = text.encode('utf-8')
+
+        self.assertEqual(
+            self.tool.portal_utf8(site_text),
+            text.encode('utf-8')
+        )
+
+    def test_utf8_portal(self):
+        text = u'Eksempel \xe6\xf8\xe5'
+        utf8text = text.encode('utf-8')
+
+        self.assertEqual(
+            self.tool.utf8_portal(utf8text),
+            text.encode('utf-8')
+        )
+
+    def test_getMailHost(self):
+        self.assertTrue(
+            IMailHost.providedBy(self.tool.getMailHost())
+        )
+
+    def test_getReviewStateTitleFor(self):
+        folder_id = self.portal.invokeFactory('Folder', 'folder')
+        folder = self.portal[folder_id]
+        self.assertEqual(
+            self.tool.getReviewStateTitleFor(folder).lower(),
+            'private'
+        )
+
+    def test_urlparse(self):
+        """See Python standard library urlparse.urlparse:
+        http://python.org/doc/lib/module-urlparse.html
+        """
+        url = 'http://dev.plone.org/plone/query?milestone=2.1#foo'
+        expected = (
+            'http',
+            'dev.plone.org',
+            '/plone/query',
+            '',
+            'milestone=2.1',
+            'foo'
+        )
+        self.assertEqual(
+            tuple(self.tool.urlparse(url)),
+            expected
+        )
+
+    def test_urlunparse(self):
+        """See Python standard library: urlparse.urlunparse:
+        http://python.org/doc/lib/module-urlparse.html
+        """
+        data = ('http', 'plone.org', '/support', '', '', 'users')
+        self.assertEqual(
+            self.tool.urlunparse(data),
+            'http://plone.org/support#users'
+        )
+
+    def test_addPortalMessage(self):
+        # no status messages
+        self.assertEqual(
+            IStatusMessage(self.request).show(),
+            []
+        )
+
+        self.tool.addPortalMessage(u'A random warning message', 'warning')
+        status = IStatusMessage(self.request).show()
+        self.assertEqual(
+            len(status),
+            1
+        )
+        self.assertEqual(
+            status[0].type,
+            'warning'
+        )
+
+        # again no status messages
+        self.assertEqual(
+            IStatusMessage(self.request).show(),
+            []
+        )
+
+        self.tool.addPortalMessage(u'A random info message')
+        status = IStatusMessage(self.request).show()
+        self.assertEqual(
+            len(status),
+            1
+        )
+        self.assertEqual(
+            status[0].type,
+            'info'
+        )
+
+    def test_isStructuralFolder(self):
+        folder_id = self.portal.invokeFactory('Folder', 'folder')
+        folder = self.portal[folder_id]
+        self.assertTrue(self.tool.isStructuralFolder(folder))
+
+    def test_getOwnerName(self):
+        login(self.portal, TEST_USER_NAME)
+
+        folder_id = self.portal.invokeFactory('Folder', 'folder')
+        folder = self.portal[folder_id]
+
+        self.assertEqual(
+            self.tool.getOwnerName(folder),
+            TEST_USER_ID
+        )
+
+    def test_normalizeString(self):
+        self.assertEqual(
+            self.tool.normalizeString("Foo bar"),
+            'foo-bar'
+        )
+        self.assertEqual(
+            self.tool.normalizeString("Some!_are allowed, others&?:are not"),
+            'some-_are-allowed-others-are-not'
+        )
+        self.assertEqual(
+            self.tool.normalizeString("Some!_are allowed, others&?:are not"),
+            'some-_are-allowed-others-are-not'
+        )
+
+    def test_normalizeString_punctuation_and_spacing(self):
+        """all punctuation and spacing is removed and replaced with a '-'"""
+        self.assertEqual(
+            self.tool.normalizeString("a string with spaces"),
+            'a-string-with-spaces'
+        )
+        self.assertEqual(
+            self.tool.normalizeString("p.u,n;c(t)u!a@t#i$o%n"),
+            'p-u-n-c-t-u-a-t-i-o-n'
+        )
+
+    def test_normalizeString_lowercase(self):
+        """strings are lowercased"""
+        self.assertEqual(
+            self.tool.normalizeString("UppERcaSE"),
+            'uppercase'
+        )
+
+    def test_normalizeString_trim_and_reduce(self):
+        """punctuation, spaces, etc. are trimmed and multiples are reduced to
+        just one
+        """
+        self.assertEqual(
+            self.tool.normalizeString(" a string    "),
+            'a-string'
+        )
+        self.assertEqual(
+            self.tool.normalizeString(">here's another!"),
+            'heres-another'
+        )
+
+        self.assertEqual(
+            self.tool.normalizeString("one with !@#$!@#$ stuff in the middle"),
+            'one-with-stuff-in-the-middle'
+        )
+
+    def test_normalizeString_file_like(self):
+        """the exception to all this is that if there is something that looks
+        like a filename with an extension at the end, it will preserve the last
+        period.
+        """
+        self.assertEqual(
+            self.tool.normalizeString("this is a file.gif"),
+            'this-is-a-file-gif'
+        )
+
+        self.assertEqual(
+            self.tool.normalizeString("this is. also. a file.html"),
+            'this-is-also-a-file-html'
+        )
+
+    def test_getEmptyTitle(self):
+        self.assertEqual(
+            self.tool.getEmptyTitle(translated=False),
+            u'[\xb7\xb7\xb7]'
+        )
diff --git a/Products/CMFPlone/tests/test_doctests.py b/Products/CMFPlone/tests/test_doctests.py
index e280945..3bd19c4 100644
--- a/Products/CMFPlone/tests/test_doctests.py
+++ b/Products/CMFPlone/tests/test_doctests.py
@@ -1,7 +1,5 @@
 # -*- coding: utf-8 -*-
 from doctest import DocTestSuite, DocFileSuite
-from Products.CMFPlone.tests.PloneTestCase import FunctionalTestCase
-from Testing.ZopeTestCase import ZopeDocTestSuite
 from unittest import TestSuite
 
 
@@ -9,8 +7,6 @@ def test_suite():
     suites = (
         DocFileSuite('messages.txt', package='Products.CMFPlone.tests'),
         DocTestSuite('Products.CMFPlone.i18nl10n'),
-        ZopeDocTestSuite('Products.CMFPlone.PloneTool',
-                         test_class=FunctionalTestCase),
         DocTestSuite('Products.CMFPlone.TranslationServiceTool'),
         DocTestSuite('Products.CMFPlone.utils'),
         DocTestSuite('Products.CMFPlone.workflow'),


