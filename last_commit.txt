Repository: plone.app.testing


Branch: refs/heads/master
Date: 2023-04-08T20:16:48+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.testing/commit/21c510c7b1c63122d7c248cfbc5764d7924bf4bd

Configuring with plone/meta

Files changed:
A .meta.toml
A .pre-commit-config.yaml
A news/434550cc.internal
M .editorconfig
M pyproject.toml
M setup.cfg
M tox.ini
D .travis.yml
D bootstrap.py

b'diff --git a/.editorconfig b/.editorconfig\nindex 626f406..b4158b8 100644\n--- a/.editorconfig\n+++ b/.editorconfig\n@@ -1,3 +1,6 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n # EditorConfig Configuration file, for more details see:\n # http://EditorConfig.org\n # EditorConfig is a convention description, that could be interpreted\n@@ -25,7 +28,7 @@ max_line_length = off\n # 4 space indentation\n indent_size = 4\n \n-[*.{yml}]\n+[*.{yml,zpt,pt,dtml,zcml}]\n # 2 space indentation\n indent_size = 2\n \ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..4eda434\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "434550cc"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/.travis.yml b/.travis.yml\ndeleted file mode 100644\nindex e76161f..0000000\n--- a/.travis.yml\n+++ /dev/null\n@@ -1,37 +0,0 @@\n-language: python\n-sudo: false\n-dist: xenial\n-\n-matrix:\n-    include:\n-        - python: "2.7"\n-          env: TOXENV=lint-py27\n-        - python: "3.6"\n-          env: TOXENV=lint-py36\n-        - python: "3.7"\n-          env: TOXENV=lint-py37\n-        - python: "3.8"\n-          env: TOXENV=lint-py38\n-        - python: "2.7"\n-          env: TOXENV=py27\n-        - python: "3.6"\n-          env: TOXENV=py36\n-        - python: "3.7"\n-          env: TOXENV=py37\n-        - python: "3.8"\n-          env: TOXENV=py38\n-\n-install:\n-    - travis_retry pip install -U tox coveralls coverage\n-\n-script:\n-    - tox\n-\n-after_success:\n-    - coverage combine\n-    - coveralls\n-\n-notifications:\n-    email: false\n-cache:\n-    pip: true\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex ed57894..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,178 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-tmpeggs = tempfile.mkdtemp()\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep \n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n-\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-\n-\n-options, args = parser.parse_args()\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    if options.allow_site_packages:\n-        import setuptools\n-        import pkg_resources\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions \n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'. \n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-cmd = [sys.executable, \'-c\',\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-requirement = \'zc.buildout\'\n-version = options.version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        for part in parsed_version:\n-            if (part[:1] == \'*\') and (part not in _final_parts):\n-                return False\n-        return True\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/news/434550cc.internal b/news/434550cc.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/434550cc.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9eb73f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 1371526..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,57 +1,23 @@\n-[build_sphinx]\n-source-dir = docs/source\n-build-dir  = _build/docs\n-all_files  = 1\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n \n-[upload_sphinx]\n-upload-dir = _build/docs/html\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n \n [check-manifest]\n ignore =\n-    bootstrap.py\n-    buildout.cfg\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n     tox.ini\n-\n-[coverage:run]\n-branch = True\n-\n-source =\n-    src\n-\n-omit =\n-\n-[coverage:report]\n-precision = 2\n-\n-[coverage:html]\n-directory = _build/reports/coverage\n-\n-\n-[isort]\n-# for details see\n-# http://docs.plone.org/develop/styleguide/python.html#grouping-and-sorting\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n-line_length = 200\n-not_skip = __init__.py\n-\n-[flake8]\n-exclude =\n-    bootstrap.py,\n-\n-include =\n-    src\n-\n-ignore =\n-    N801,\n-    N802,\n-    N803,\n-    N805,\n-    N806,\n-    N812,\n-    T000,\n-    T003,\n-\n-[bdist_wheel]\n-universal = 0\ndiff --git a/tox.ini b/tox.ini\nindex 514dfb1..878cca4 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,163 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n envlist =\n-    py27,\n-    py36,\n-    py37,\n-    py38,\n-    coverage-report,\n-    docs,\n-    lint-py27,\n-    lint-py36,\n-    lint-py37,\n-    lint-py38,\n-\n-minversion = 1.9\n-\n-[testenv]\n-whitelist_externals = test coverage\n-skip_install = true\n-usedevelop = True\n-\n-pip_pre = True\n-\n-extras =\n+    format\n+    lint\n     test\n \n-deps =\n-     -rhttps://raw.githubusercontent.com/plone/buildout.coredev/5.2/requirements.txt\n-\n-commands =\n-    python -V\n-    {envbindir}/buildout -c {toxinidir}/buildout.cfg buildout:directory={envdir} buildout:develop={toxinidir} install test\n-    ls -la {envbindir}\n-    coverage run {envbindir}/test --all {posargs:-vvc}\n-\n-setenv =\n-    COVERAGE_FILE=.coverage.{envname}\n-\n-passenv =\n-    WSGI_REQUEST_LOGGING\n-\n-[testenv:coverage-report]\n-skip_install = true\n-basepython = python2.7\n-\n-deps = coverage\n-\n-setenv =\n-    COVERAGE_FILE=.coverage\n-\n-commands =\n-    coverage erase\n-    coverage combine\n-    coverage html -i\n-    coverage xml -i\n-    coverage report -i --fail-under=60\n-\n+[testenv]\n+allowlist_externals =\n+    sh\n \n-[lint]\n+[testenv:format]\n+description = automatically reformat code\n skip_install = true\n-\n deps =\n-    isort < 5\n-    flake8\n-    # helper to generate HTML reports:\n-    flake8-html\n-    # Useful flake8 plugins that are Python and Plone specific:\n-    flake8-coding\n-    flake8-debugger\n-    flake8-deprecated\n-    flake8-print\n-    flake8-pytest\n-    flake8-todo\n-    flake8-isort\n-    mccabe\n-    # Potential flake8 plugins that should be used:  # TBD\n-    #flake8-blind-except\n-    #flake8-commas\n-    #flake8-docstrings\n-    #flake8-mypy\n-    #flake8-pep3101\n-    #flake8-plone-hasattr\n-    #flake8-string-format\n-    #flake8_strict\n-    #flake8-quotes\n-    #flake8-polyfill\n-\n+    pre-commit\n commands =\n-    mkdir -p {toxinidir}/_build/reports/flake8\n-    - flake8 --format=html --htmldir={toxinidir}/_build/reports/flake8 --doctests src setup.py\n-    flake8 --doctests src setup.py\n-    isort --check-only --recursive {toxinidir}/src\n-\n-whitelist_externals =\n-    mkdir\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n \n-[testenv:isort-apply]\n+[testenv:lint]\n+description = run linters that will help improve the code style\n skip_install = true\n-\n deps =\n-    isort\n-\n+    pre-commit\n commands =\n-    isort --apply --recursive {toxinidir}/src\n-\n-[testenv:lint-py27]\n-basepython = python2.7\n-skip_install = true\n-deps = {[lint]deps}\n-commands = {[lint]commands}\n-whitelist_externals = {[lint]whitelist_externals}\n-\n-[testenv:lint-py36]\n-basepython = python3.6\n-skip_install = true\n-deps = {[lint]deps}\n-commands = {[lint]commands}\n-whitelist_externals = {[lint]whitelist_externals}\n-\n-[testenv:lint-py37]\n-basepython = python3.7\n-skip_install = true\n-deps = {[lint]deps}\n-commands = {[lint]commands}\n-whitelist_externals = {[lint]whitelist_externals}\n-\n-[testenv:lint-py38]\n-basepython = python3.8\n-skip_install = true\n-deps = {[lint]deps}\n-commands = {[lint]commands}\n-whitelist_externals = {[lint]whitelist_externals}\n-\n-[testenv:docs]\n-skip_install = true\n+    pre-commit run -a\n \n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n deps =\n-    Sphinx\n-\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n commands =\n-    sphinx-build -b html -d _build/docs/doctrees docs _build/docs/html\n-#    sphinx-build -b doctest docs _build/docs/doctrees\n-\n-[testenv:update_translation]\n-skip_install = true\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n \n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n deps =\n-    i18ndude\n-\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands =\n-    i18ndude find-untranslated\n-    i18ndude rebuild-pot\n-    i18ndude merge\n-    i18ndude sync\n-    i18ndude list\n-\n-[testenv:release]\n-skip_install = true\n+    zope-testrunner --all --test-path={toxinidir}/src -s plone.app.testing {posargs}\n+extras =\n+    test\n \n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n deps =\n-    zest.releaser[recommended]\n-\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands =\n-    fullrelease --no-input -v\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir}/src -s plone.app.testing {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

Repository: plone.app.testing


Branch: refs/heads/master
Date: 2023-04-08T20:16:48+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.testing/commit/a13cfc167efff986780d5555399f6728354d976c

chore: pyupgrade

Files changed:
M docs/conf.py
M setup.py
M src/plone/__init__.py
M src/plone/app/__init__.py
M src/plone/app/testing/__init__.py
M src/plone/app/testing/bbb.py
M src/plone/app/testing/bbb_at.py
M src/plone/app/testing/cleanup.py
M src/plone/app/testing/helpers.py
M src/plone/app/testing/interfaces.py
M src/plone/app/testing/layers.py
M src/plone/app/testing/selenium_layers.py
M src/plone/app/testing/tests.py
M src/plone/app/testing/utils.py

b'diff --git a/docs/conf.py b/docs/conf.py\nindex ba460d1..6dee677 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # plone.app.testing documentation build configuration file, created by\n # sphinx-quickstart on Sat Feb  9 11:31:41 2013.\n@@ -40,8 +39,8 @@\n master_doc = \'index\'\n \n # General information about the project.\n-project = u\'plone.app.testing\'\n-copyright = u\'2018, Plone Foundation\'\n+project = \'plone.app.testing\'\n+copyright = \'2018, Plone Foundation\'\n \n # The version info for the project you\'re documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n@@ -178,8 +177,8 @@\n # Grouping the document tree into LaTeX files. List of tuples\n # (source start file, target name, title, author, documentclass [howto/manual]).\n latex_documents = [\n-  (\'index\', \'ploneapptesting.tex\', u\'plone.app.testing Documentation\',\n-   u\'Plone Foundation\', \'manual\'),\n+  (\'index\', \'ploneapptesting.tex\', \'plone.app.testing Documentation\',\n+   \'Plone Foundation\', \'manual\'),\n ]\n \n # The name of an image file (relative to this directory) to place at the top of\n@@ -211,6 +210,6 @@\n # One entry per manual page. List of tuples\n # (source start file, name, description, authors, manual section).\n man_pages = [\n-    (\'index\', \'ploneapptesting\', u\'plone.app.testing Documentation\',\n-     [u\'Plone Foundation\'], 1)\n+    (\'index\', \'ploneapptesting\', \'plone.app.testing Documentation\',\n+     [\'Plone Foundation\'], 1)\n ]\ndiff --git a/setup.py b/setup.py\nindex 89e7bc0..bbbf28a 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/src/plone/app/__init__.py b/src/plone/app/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/src/plone/app/__init__.py\n+++ b/src/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/src/plone/app/testing/__init__.py b/src/plone/app/testing/__init__.py\nindex 44bafc4..a903a8b 100644\n--- a/src/plone/app/testing/__init__.py\n+++ b/src/plone/app/testing/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # flake8: NOQA: F401\n from plone.app.testing.cleanup import cleanUpMultiPlugins\n from plone.app.testing.helpers import applyProfile\ndiff --git a/src/plone/app/testing/bbb.py b/src/plone/app/testing/bbb.py\nindex 3103192..3b01e5e 100644\n--- a/src/plone/app/testing/bbb.py\n+++ b/src/plone/app/testing/bbb.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Backwards-compatibility test class for PloneTestCase for Dexterity."""\n \n from AccessControl import getSecurityManager\n@@ -72,7 +71,7 @@ def tearDown(self):\n         """Tear down after each test."""\n         self.beforeTearDown()\n         transaction.abort()\n-        super(PloneTestCase, self).tearDown()\n+        super().tearDown()\n         self.afterTearDown()\n \n     def beforeTearDown(self):\ndiff --git a/src/plone/app/testing/bbb_at.py b/src/plone/app/testing/bbb_at.py\nindex fb5b36a..c25cb0f 100644\n--- a/src/plone/app/testing/bbb_at.py\n+++ b/src/plone/app/testing/bbb_at.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Backwards-compatibility test class for PloneTestCase for Archetypes."""\n \n from AccessControl import getSecurityManager\n@@ -102,7 +101,7 @@ def tearDown(self):\n         """Tear down after each test."""\n         self.beforeTearDown()\n         transaction.abort()\n-        super(PloneTestCase, self).tearDown()\n+        super().tearDown()\n         self.afterTearDown()\n \n     def beforeTearDown(self):\ndiff --git a/src/plone/app/testing/cleanup.py b/src/plone/app/testing/cleanup.py\nindex b6eaeca..4be9b91 100644\n--- a/src/plone/app/testing/cleanup.py\n+++ b/src/plone/app/testing/cleanup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Cleanup handlers for various global registries\n """\n \ndiff --git a/src/plone/app/testing/helpers.py b/src/plone/app/testing/helpers.py\nindex 1d801fa..31cc5dd 100644\n--- a/src/plone/app/testing/helpers.py\n+++ b/src/plone/app/testing/helpers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Helper functions for Plone testing. Also importable from plone.app.testing\n # directly\n \n@@ -120,7 +119,7 @@ def applyProfile(portal, profileName, purge_old=None,\n \n     try:\n         setupTool = portal[\'portal_setup\']\n-        profileId = \'profile-{0}\'.format(profileName)\n+        profileId = f\'profile-{profileName}\'\n         setupTool.runAllImportStepsFromProfile(\n             profileId,\n             purge_old=purge_old,\n@@ -331,7 +330,7 @@ def setUp(self):\n             # Push a new configuration context so that it\'s possible to\n             # re-import ZCML files after tear-down\n             name = self.__name__ if self.__name__ is not None else \'not-named\'\n-            contextName = \'PloneSandboxLayer-{0}\'.format(name)\n+            contextName = f\'PloneSandboxLayer-{name}\'\n             self[\'configurationContext\'] = configurationContext = (\n                 zca.stackConfigurationContext(self.get(\'configurationContext\'),\n                                               name=contextName))\n@@ -475,7 +474,7 @@ class PloneWithPackageLayer(PloneSandboxLayer):\n     def __init__(self, bases=None, name=None, module=None, zcml_filename=None,\n                  zcml_package=None, gs_profile_id=None,\n                  additional_z2_products=()):\n-        super(PloneWithPackageLayer, self).__init__(bases, name, module)\n+        super().__init__(bases, name, module)\n         self.zcml_filename = zcml_filename\n         self.zcml_package = zcml_package\n         self.gs_profile_id = gs_profile_id\ndiff --git a/src/plone/app/testing/interfaces.py b/src/plone/app/testing/interfaces.py\nindex aafdac2..9ff1c8a 100644\n--- a/src/plone/app/testing/interfaces.py\n+++ b/src/plone/app/testing/interfaces.py\n@@ -1,9 +1,8 @@\n-# -*- coding: utf-8 -*-\n # Constants for names used in layer setup - also importable from\n # plone.app.testing directly\n \n PLONE_SITE_ID = \'plone\'\n-PLONE_SITE_TITLE = u\'Plone site\'\n+PLONE_SITE_TITLE = \'Plone site\'\n DEFAULT_LANGUAGE = \'en\'\n \n TEST_USER_NAME = \'test-user\'\ndiff --git a/src/plone/app/testing/layers.py b/src/plone/app/testing/layers.py\nindex 3628082..5f7e348 100644\n--- a/src/plone/app/testing/layers.py\n+++ b/src/plone/app/testing/layers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Layers setting up fixtures with a Plone site. Also importable from\n # plone.app.testing directly\n \n@@ -161,7 +160,7 @@ def loadAll(filename):\n                     continue\n                 try:\n                     xmlconfig.file(filename, package, context=context)\n-                except IOError:\n+                except OSError:\n                     pass\n \n         loadAll(\'meta.zcml\')\n@@ -307,7 +306,7 @@ def tearDown(self):\n PLONE_ZSERVER_FIXTURE = PloneZServerFixture()\n \n \n-class PloneTestLifecycle(object):\n+class PloneTestLifecycle:\n     """Mixin class for Plone test lifecycle. This exposes the ``portal``\n     resource and resets the environment between each test.\n \n@@ -319,7 +318,7 @@ class PloneTestLifecycle(object):\n     defaultBases = (PLONE_FIXTURE,)\n \n     def testSetUp(self):\n-        super(PloneTestLifecycle, self).testSetUp()\n+        super().testSetUp()\n \n         self[\'portal\'] = portal = self[\'app\'][PLONE_SITE_ID]\n         self.setUpEnvironment(portal)\n@@ -328,7 +327,7 @@ def testTearDown(self):\n         self.tearDownEnvironment(self[\'portal\'])\n         del self[\'portal\']\n \n-        super(PloneTestLifecycle, self).testTearDown()\n+        super().testTearDown()\n \n     def setUpEnvironment(self, portal):\n         """Set up the local component site, reset skin data and log in as\n@@ -393,7 +392,7 @@ def testSetUp(self):\n \n             if not registry["plone.email_from_name"]:\n                 portal._original_email_name = registry["plone.email_from_name"]\n-                registry["plone.email_from_name"] = u"Plone site"\n+                registry["plone.email_from_name"] = "Plone site"\n \n             portal._original_MailHost = portal.MailHost\n             portal.MailHost = mailhost = MockMailHost(\'MailHost\')\ndiff --git a/src/plone/app/testing/selenium_layers.py b/src/plone/app/testing/selenium_layers.py\nindex 965f2df..8ab9665 100644\n--- a/src/plone/app/testing/selenium_layers.py\n+++ b/src/plone/app/testing/selenium_layers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import PLONE_FIXTURE\n from plone.app.testing import TEST_USER_NAME\n@@ -17,7 +16,7 @@ def testSetUp(self):\n         # Start up Selenium\n         driver = os.environ.get(\'SELENIUM_DRIVER\', \'\').lower() or \'firefox\'\n         webdriver = __import__(\n-            \'selenium.webdriver.{0}.webdriver\'.format(driver),\n+            f\'selenium.webdriver.{driver}.webdriver\',\n             fromlist=[\'WebDriver\']\n         )\n         args = [arg.strip() for arg in\n@@ -106,7 +105,7 @@ def clear(selenium, name):\n def select(selenium, xpath1, xpath2=\'\'):\n     xpath = xpath1\n     if xpath2:\n-        xpath = "{0}[\'{1}\']".format(xpath1, xpath2)\n+        xpath = f"{xpath1}[\'{xpath2}\']"\n         xpath = xpath.replace("select[\'label=", "select/option[\'text()=")\n     selenium.find_element_by_xpath(xpath).click()\n \ndiff --git a/src/plone/app/testing/tests.py b/src/plone/app/testing/tests.py\nindex 53a7a10..4d86132 100644\n--- a/src/plone/app/testing/tests.py\n+++ b/src/plone/app/testing/tests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n import doctest\n import re\n import six\ndiff --git a/src/plone/app/testing/utils.py b/src/plone/app/testing/utils.py\nindex 0771372..8021984 100644\n--- a/src/plone/app/testing/utils.py\n+++ b/src/plone/app/testing/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from persistent.list import PersistentList\n from Products.MailHost.MailHost import _mungeHeaders\n from Products.MailHost.MailHost import MailBase\n'

Repository: plone.app.testing


Branch: refs/heads/master
Date: 2023-04-08T20:16:48+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.testing/commit/52f95b6bd65802abb1431420e9a478d3c3718d2d

chore: isort

Files changed:
M docs/conf.py
M src/plone/app/testing/cleanup.py
M src/plone/app/testing/helpers.py
M src/plone/app/testing/layers.py

b'diff --git a/docs/conf.py b/docs/conf.py\nindex 6dee677..36c332a 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -10,7 +10,9 @@\n # All configuration values have a default; values that are commented out\n # serve to show the default.\n \n-import sys, os\n+import os\n+import sys\n+\n \n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\ndiff --git a/src/plone/app/testing/cleanup.py b/src/plone/app/testing/cleanup.py\nindex 4be9b91..b092686 100644\n--- a/src/plone/app/testing/cleanup.py\n+++ b/src/plone/app/testing/cleanup.py\n@@ -19,7 +19,9 @@\n \n def cleanUpMultiPlugins():\n     try:\n-        from Products.PluggableAuthService.PluggableAuthService import MultiPlugins  # NOQA: E501\n+        from Products.PluggableAuthService.PluggableAuthService import (\n+            MultiPlugins,  # NOQA: E501\n+        )\n     except ImportError:\n         pass\n     else:\ndiff --git a/src/plone/app/testing/helpers.py b/src/plone/app/testing/helpers.py\nindex 31cc5dd..200e6fe 100644\n--- a/src/plone/app/testing/helpers.py\n+++ b/src/plone/app/testing/helpers.py\n@@ -74,9 +74,9 @@ def quickInstallProduct(portal, productName, reinstall=False):\n     is installed already.\n     """\n \n-    from Acquisition import aq_parent\n     from AccessControl import getSecurityManager\n     from AccessControl.SecurityManagement import setSecurityManager\n+    from Acquisition import aq_parent\n \n     sm = getSecurityManager()\n     app = aq_parent(portal)\n@@ -108,9 +108,9 @@ def applyProfile(portal, profileName, purge_old=None,\n     should be a package name and a profile name, e.g. \'my.product:default\'.\n     """\n \n-    from Acquisition import aq_parent\n     from AccessControl import getSecurityManager\n     from AccessControl.SecurityManagement import setSecurityManager\n+    from Acquisition import aq_parent\n \n     sm = getSecurityManager()\n     app = aq_parent(portal)\n@@ -354,7 +354,9 @@ def setUp(self):\n \n                 security.pushCheckers()\n \n-                from Products.PluggableAuthService.PluggableAuthService import MultiPlugins  # noqa\n+                from Products.PluggableAuthService.PluggableAuthService import (  # noqa\n+                    MultiPlugins,\n+                )\n \n                 preSetupMultiPlugins = MultiPlugins[:]\n \n@@ -435,9 +437,7 @@ def snapshotMultiPlugins(self, preSetupMultiPlugins):\n \n         self._addedMultiPlugins = set()\n \n-        from Products.PluggableAuthService.PluggableAuthService import (\n-            MultiPlugins\n-        )\n+        from Products.PluggableAuthService.PluggableAuthService import MultiPlugins\n \n         for plugin in MultiPlugins:\n             if plugin not in preSetupMultiPlugins:\ndiff --git a/src/plone/app/testing/layers.py b/src/plone/app/testing/layers.py\nindex 5f7e348..d92b45c 100644\n--- a/src/plone/app/testing/layers.py\n+++ b/src/plone/app/testing/layers.py\n@@ -77,6 +77,7 @@ class PloneFixture(Layer):\n         try:\n             # Since gopipindex moved to plone.folder only with Archetypes\n             import plone.app.folder\n+\n             # Prevent trying to load plone.app.folder if it is a module alias\n             if hasattr(plone.app.folder, "__file__"):\n                 products += (\n@@ -359,8 +360,8 @@ def tearDownEnvironment(self, portal):\n         from plone.memoize.ram import global_cache\n         global_cache.invalidateAll()\n \n-        from zope.component import queryUtility\n         from plone.memoize.ram import IRAMCache\n+        from zope.component import queryUtility\n         cache = queryUtility(IRAMCache)\n         if cache and getattr(cache, \'_cacheId\', None):\n             cache.invalidateAll()\n'

Repository: plone.app.testing


Branch: refs/heads/master
Date: 2023-04-08T20:16:49+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.testing/commit/40d46c19ead646db5987fb9cbe493a6091a8e413

chore: black

Files changed:
M docs/conf.py
M setup.py
M src/plone/__init__.py
M src/plone/app/__init__.py
M src/plone/app/testing/bbb.py
M src/plone/app/testing/bbb_at.py
M src/plone/app/testing/cleanup.py
M src/plone/app/testing/helpers.py
M src/plone/app/testing/interfaces.py
M src/plone/app/testing/layers.py
M src/plone/app/testing/selenium_layers.py
M src/plone/app/testing/tests.py
M src/plone/app/testing/utils.py

b'diff --git a/docs/conf.py b/docs/conf.py\nindex 36c332a..08c106f 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -17,194 +17,199 @@\n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\n # documentation root, use os.path.abspath to make it absolute, like shown here.\n-#sys.path.insert(0, os.path.abspath(\'.\'))\n+# sys.path.insert(0, os.path.abspath(\'.\'))\n \n # -- General configuration -----------------------------------------------------\n \n # If your documentation needs a minimal Sphinx version, state it here.\n-#needs_sphinx = \'1.0\'\n+# needs_sphinx = \'1.0\'\n \n # Add any Sphinx extension module names here, as strings. They can be extensions\n # coming with Sphinx (named \'sphinx.ext.*\') or your custom ones.\n extensions = []\n \n # Add any paths that contain templates here, relative to this directory.\n-templates_path = [\'_templates\']\n+templates_path = ["_templates"]\n \n # The suffix of source filenames.\n-source_suffix = \'.rst\'\n+source_suffix = ".rst"\n \n # The encoding of source files.\n-#source_encoding = \'utf-8-sig\'\n+# source_encoding = \'utf-8-sig\'\n \n # The master toctree document.\n-master_doc = \'index\'\n+master_doc = "index"\n \n # General information about the project.\n-project = \'plone.app.testing\'\n-copyright = \'2018, Plone Foundation\'\n+project = "plone.app.testing"\n+copyright = "2018, Plone Foundation"\n \n # The version info for the project you\'re documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n # built documents.\n #\n # The short X.Y version.\n-version = \'5.0\'\n+version = "5.0"\n # The full version, including alpha/beta/rc tags.\n-release = \'5.0\'\n+release = "5.0"\n \n # The language for content autogenerated by Sphinx. Refer to documentation\n # for a list of supported languages.\n-#language = None\n+# language = None\n \n # There are two options for replacing |today|: either, you set today to some\n # non-false value, then it is used:\n-#today = \'\'\n+# today = \'\'\n # Else, today_fmt is used as the format for a strftime call.\n-#today_fmt = \'%B %d, %Y\'\n+# today_fmt = \'%B %d, %Y\'\n \n # List of patterns, relative to source directory, that match files and\n # directories to ignore when looking for source files.\n exclude_patterns = []\n \n # The reST default role (used for this markup: `text`) to use for all documents.\n-#default_role = None\n+# default_role = None\n \n # If true, \'()\' will be appended to :func: etc. cross-reference text.\n-#add_function_parentheses = True\n+# add_function_parentheses = True\n \n # If true, the current module name will be prepended to all description\n # unit titles (such as .. function::).\n-#add_module_names = True\n+# add_module_names = True\n \n # If true, sectionauthor and moduleauthor directives will be shown in the\n # output. They are ignored by default.\n-#show_authors = False\n+# show_authors = False\n \n # The name of the Pygments (syntax highlighting) style to use.\n-pygments_style = \'sphinx\'\n+pygments_style = "sphinx"\n \n # A list of ignored prefixes for module index sorting.\n-#modindex_common_prefix = []\n+# modindex_common_prefix = []\n \n \n # -- Options for HTML output ---------------------------------------------------\n \n # The theme to use for HTML and HTML Help pages.  See the documentation for\n # a list of builtin themes.\n-html_theme = \'default\'\n+html_theme = "default"\n \n # Theme options are theme-specific and customize the look and feel of a theme\n # further.  For a list of options available for each theme, see the\n # documentation.\n-#html_theme_options = {}\n+# html_theme_options = {}\n \n # Add any paths that contain custom themes here, relative to this directory.\n-#html_theme_path = []\n+# html_theme_path = []\n \n # The name for this set of Sphinx documents.  If None, it defaults to\n # "<project> v<release> documentation".\n-#html_title = None\n+# html_title = None\n \n # A shorter title for the navigation bar.  Default is the same as html_title.\n-#html_short_title = None\n+# html_short_title = None\n \n # The name of an image file (relative to this directory) to place at the top\n # of the sidebar.\n-#html_logo = None\n+# html_logo = None\n \n # The name of an image file (within the static path) to use as favicon of the\n # docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n # pixels large.\n-#html_favicon = None\n+# html_favicon = None\n \n # Add any paths that contain custom static files (such as style sheets) here,\n # relative to this directory. They are copied after the builtin static files,\n # so a file named "default.css" will overwrite the builtin "default.css".\n-html_static_path = [\'_static\']\n+html_static_path = ["_static"]\n \n # If not \'\', a \'Last updated on:\' timestamp is inserted at every page bottom,\n # using the given strftime format.\n-#html_last_updated_fmt = \'%b %d, %Y\'\n+# html_last_updated_fmt = \'%b %d, %Y\'\n \n # If true, SmartyPants will be used to convert quotes and dashes to\n # typographically correct entities.\n-#html_use_smartypants = True\n+# html_use_smartypants = True\n \n # Custom sidebar templates, maps document names to template names.\n-#html_sidebars = {}\n+# html_sidebars = {}\n \n # Additional templates that should be rendered to pages, maps page names to\n # template names.\n-#html_additional_pages = {}\n+# html_additional_pages = {}\n \n # If false, no module index is generated.\n-#html_domain_indices = True\n+# html_domain_indices = True\n \n # If false, no index is generated.\n-#html_use_index = True\n+# html_use_index = True\n \n # If true, the index is split into individual pages for each letter.\n-#html_split_index = False\n+# html_split_index = False\n \n # If true, links to the reST sources are added to the pages.\n-#html_show_sourcelink = True\n+# html_show_sourcelink = True\n \n # If true, "Created using Sphinx" is shown in the HTML footer. Default is True.\n-#html_show_sphinx = True\n+# html_show_sphinx = True\n \n # If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.\n-#html_show_copyright = True\n+# html_show_copyright = True\n \n # If true, an OpenSearch description file will be output, and all pages will\n # contain a <link> tag referring to it.  The value of this option must be the\n # base URL from which the finished HTML is served.\n-#html_use_opensearch = \'\'\n+# html_use_opensearch = \'\'\n \n # This is the file name suffix for HTML files (e.g. ".xhtml").\n-#html_file_suffix = None\n+# html_file_suffix = None\n \n # Output file base name for HTML help builder.\n-htmlhelp_basename = \'ploneapptestingdoc\'\n+htmlhelp_basename = "ploneapptestingdoc"\n \n \n # -- Options for LaTeX output --------------------------------------------------\n \n # The paper size (\'letter\' or \'a4\').\n-#latex_paper_size = \'letter\'\n+# latex_paper_size = \'letter\'\n \n # The font size (\'10pt\', \'11pt\' or \'12pt\').\n-#latex_font_size = \'10pt\'\n+# latex_font_size = \'10pt\'\n \n # Grouping the document tree into LaTeX files. List of tuples\n # (source start file, target name, title, author, documentclass [howto/manual]).\n latex_documents = [\n-  (\'index\', \'ploneapptesting.tex\', \'plone.app.testing Documentation\',\n-   \'Plone Foundation\', \'manual\'),\n+    (\n+        "index",\n+        "ploneapptesting.tex",\n+        "plone.app.testing Documentation",\n+        "Plone Foundation",\n+        "manual",\n+    ),\n ]\n \n # The name of an image file (relative to this directory) to place at the top of\n # the title page.\n-#latex_logo = None\n+# latex_logo = None\n \n # For "manual" documents, if this is true, then toplevel headings are parts,\n # not chapters.\n-#latex_use_parts = False\n+# latex_use_parts = False\n \n # If true, show page references after internal links.\n-#latex_show_pagerefs = False\n+# latex_show_pagerefs = False\n \n # If true, show URL addresses after external links.\n-#latex_show_urls = False\n+# latex_show_urls = False\n \n # Additional stuff for the LaTeX preamble.\n-#latex_preamble = \'\'\n+# latex_preamble = \'\'\n \n # Documents to append as an appendix to all manuals.\n-#latex_appendices = []\n+# latex_appendices = []\n \n # If false, no module index is generated.\n-#latex_domain_indices = True\n+# latex_domain_indices = True\n \n \n # -- Options for manual page output --------------------------------------------\n@@ -212,6 +217,11 @@\n # One entry per manual page. List of tuples\n # (source start file, name, description, authors, manual section).\n man_pages = [\n-    (\'index\', \'ploneapptesting\', \'plone.app.testing Documentation\',\n-     [\'Plone Foundation\'], 1)\n+    (\n+        "index",\n+        "ploneapptesting",\n+        "plone.app.testing Documentation",\n+        ["Plone Foundation"],\n+        1,\n+    )\n ]\ndiff --git a/setup.py b/setup.py\nindex bbbf28a..410ac04 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -4,29 +4,29 @@\n import os\n \n \n-version = \'7.0.1.dev0\'\n+version = "7.0.1.dev0"\n \n tests_require = [\n-    \'plone.testing[test]\',\n-    \'Products.CMFCore\',\n-    \'Products.CMFPlacefulWorkflow\',\n-    \'Products.CMFPlone\',\n-    \'Products.PluggableAuthService\',\n-    \'selenium\',\n-    \'transaction\',\n-    \'zope.interface\',\n-    \'zope.publisher\',\n-    \'zope.testing\',\n-    \'zope.testrunner\',\n+    "plone.testing[test]",\n+    "Products.CMFCore",\n+    "Products.CMFPlacefulWorkflow",\n+    "Products.CMFPlone",\n+    "Products.PluggableAuthService",\n+    "selenium",\n+    "transaction",\n+    "zope.interface",\n+    "zope.publisher",\n+    "zope.testing",\n+    "zope.testrunner",\n     # XXX unspecified dependency of plone.app.upgrade XXX\n     # \'Products.ATContentTypes\',\n ]\n \n robot_require = [\n-    \'robotsuite>=1.4.0\',\n-    \'robotframework-selenium2library\',\n-    \'decorator\',\n-    \'selenium\',\n+    "robotsuite>=1.4.0",\n+    "robotframework-selenium2library",\n+    "decorator",\n+    "selenium",\n ]\n \n \n@@ -34,14 +34,11 @@ def read(*rnames):\n     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n \n \n-long_description = \\\n-    read(\'docs\', \'README.rst\') + \\\n-    \'\\n\\n\' +\\\n-    read(\'CHANGES.rst\')\n+long_description = read("docs", "README.rst") + "\\n\\n" + read("CHANGES.rst")\n \n \n setup(\n-    name=\'plone.app.testing\',\n+    name="plone.app.testing",\n     version=version,\n     description="Testing tools for Plone-the-application, based on plone.testing.",  # NOQA: E501\n     long_description=long_description,\n@@ -64,36 +61,36 @@ def read(*rnames):\n         "Programming Language :: Python :: 3.11",\n         "Topic :: Internet :: WWW/HTTP :: Dynamic Content",\n     ],\n-    keywords=\'plone tests\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.testing\',\n-    license=\'GPL version 2\',\n-    packages=find_packages(\'src\'),\n-    package_dir={\'\': \'src\'},\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    keywords="plone tests",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.testing",\n+    license="GPL version 2",\n+    packages=find_packages("src"),\n+    package_dir={"": "src"},\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     python_requires=">=3.7",\n     install_requires=[\n-        \'setuptools\',\n-        \'six\',\n-        \'zope.configuration\',\n-        \'zope.component\',\n-        \'zope.dottedname\',\n-        \'zope.testing\',\n-        \'five.localsitemanager\',\n-        \'plone.memoize\',\n-        \'plone.testing [zca,security,zodb,z2]\',\n+        "setuptools",\n+        "six",\n+        "zope.configuration",\n+        "zope.component",\n+        "zope.dottedname",\n+        "zope.testing",\n+        "five.localsitemanager",\n+        "plone.memoize",\n+        "plone.testing [zca,security,zodb,z2]",\n         # \'Acquisition\', # Zope 2.13+\n         # \'AccessControl\', # Zope 2.13+\n-        \'Products.CMFPlone\',\n-        \'Products.GenericSetup\',\n-        \'Zope\',\n+        "Products.CMFPlone",\n+        "Products.GenericSetup",\n+        "Zope",\n     ],\n     tests_require=tests_require,\n     extras_require={\n-        \'test\': tests_require,\n-        \'robot\': robot_require,\n+        "test": tests_require,\n+        "robot": robot_require,\n     },\n )\ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/app/__init__.py b/src/plone/app/__init__.py\nindex de40ea7..5284146 100644\n--- a/src/plone/app/__init__.py\n+++ b/src/plone/app/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/app/testing/bbb.py b/src/plone/app/testing/bbb.py\nindex 3b01e5e..f36f8c8 100644\n--- a/src/plone/app/testing/bbb.py\n+++ b/src/plone/app/testing/bbb.py\n@@ -14,7 +14,7 @@ def _createMemberarea(portal, user_id):\n     mtool = portal.portal_membership\n     members = mtool.getMembersFolder()\n     if members is None:\n-        _createObjectByType(\'Folder\', portal, id=\'Members\')\n+        _createObjectByType("Folder", portal, id="Members")\n     if not mtool.getMemberareaCreationFlag():\n         mtool.setMemberareaCreationFlag()\n     mtool.createMemberArea(user_id)\n@@ -23,19 +23,19 @@ def _createMemberarea(portal, user_id):\n \n \n class PloneTestCaseFixture(testing.PloneSandboxLayer):\n-\n     defaultBases = (testing.PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         import plone.app.contenttypes\n+\n         self.loadZCML(package=plone.app.contenttypes)\n \n     def setUpPloneSite(self, portal):\n         # restore default workflow\n-        testing.applyProfile(portal, \'Products.CMFPlone:testfixture\')\n+        testing.applyProfile(portal, "Products.CMFPlone:testfixture")\n \n         # add default content\n-        testing.applyProfile(portal, \'plone.app.contenttypes:plone-content\')\n+        testing.applyProfile(portal, "plone.app.contenttypes:plone-content")\n \n         # add home folder for default test user\n         _createMemberarea(portal, testing.TEST_USER_ID)\n@@ -43,20 +43,19 @@ def setUpPloneSite(self, portal):\n \n PTC_FIXTURE = PloneTestCaseFixture()\n PTC_FUNCTIONAL_TESTING = testing.FunctionalTesting(\n-    bases=(PTC_FIXTURE,), name=\'PloneTestCase:Functional\')\n+    bases=(PTC_FIXTURE,), name="PloneTestCase:Functional"\n+)\n \n \n class PloneTestCase(Functional, unittest.TestCase):\n-\n     layer = PTC_FUNCTIONAL_TESTING\n \n     def setUp(self):\n         """Set up before each test."""\n         self.beforeSetUp()\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.folder = self.portal.portal_membership.getHomeFolder(\n-            testing.TEST_USER_ID)\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.folder = self.portal.portal_membership.getHomeFolder(testing.TEST_USER_ID)\n         transaction.commit()\n         self.afterSetUp()\n \n@@ -85,14 +84,14 @@ def setRoles(self, roles, name=testing.TEST_USER_ID):\n         testing.setRoles(self.portal, name, roles)\n \n     def setGroups(self, groups, name=testing.TEST_USER_ID):\n-        \'\'\'Changes the user\'s groups.\'\'\'\n-        uf = self.portal[\'acl_users\']\n+        """Changes the user\'s groups."""\n+        uf = self.portal["acl_users"]\n         uf.userSetGroups(name, list(groups))\n         user = getSecurityManager().getUser()\n         if name == user.getId():\n             self.login(user.getUserName())\n \n-    def setPermissions(self, permissions, role=\'Member\'):\n+    def setPermissions(self, permissions, role="Member"):\n         """Changes the permissions assigned to role."""\n         self.portal.manage_role(role, list(permissions))\n \n@@ -102,7 +101,7 @@ def login(self, userName=testing.TEST_USER_NAME):\n \n     def loginAsPortalOwner(self, userName=testing.SITE_OWNER_NAME):\n         """Log in to the portal as the user who created it."""\n-        zope.login(self.app[\'acl_users\'], userName)\n+        zope.login(self.app["acl_users"], userName)\n \n     def logout(self):\n         """Log out, i.e. become anonymous."""\ndiff --git a/src/plone/app/testing/bbb_at.py b/src/plone/app/testing/bbb_at.py\nindex c25cb0f..2764480 100644\n--- a/src/plone/app/testing/bbb_at.py\n+++ b/src/plone/app/testing/bbb_at.py\n@@ -22,7 +22,7 @@ def _createMemberarea(portal, user_id):\n     mtool = portal.portal_membership\n     members = mtool.getMembersFolder()\n     if members is None:\n-        _createObjectByType(\'Folder\', portal, id=\'Members\')\n+        _createObjectByType("Folder", portal, id="Members")\n     if not mtool.getMemberareaCreationFlag():\n         mtool.setMemberareaCreationFlag()\n     mtool.createMemberArea(user_id)\n@@ -31,7 +31,6 @@ def _createMemberarea(portal, user_id):\n \n \n class PloneTestCaseFixture(testing.PloneSandboxLayer):\n-\n     defaultBases = (testing.PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n@@ -39,22 +38,23 @@ def setUpZope(self, app, configurationContext):\n             return\n \n         import Products.ATContentTypes\n+\n         self.loadZCML(package=Products.ATContentTypes)\n \n-        z2.installProduct(app, \'Products.Archetypes\')\n-        z2.installProduct(app, \'Products.ATContentTypes\')\n-        z2.installProduct(app, \'plone.app.blob\')\n-        z2.installProduct(app, \'plone.app.collection\')\n+        z2.installProduct(app, "Products.Archetypes")\n+        z2.installProduct(app, "Products.ATContentTypes")\n+        z2.installProduct(app, "plone.app.blob")\n+        z2.installProduct(app, "plone.app.collection")\n \n     def setUpPloneSite(self, portal):\n         if not HAS_AT:\n             return\n \n         # restore default workflow\n-        testing.applyProfile(portal, \'Products.CMFPlone:testfixture\')\n+        testing.applyProfile(portal, "Products.CMFPlone:testfixture")\n \n         # add default content\n-        testing.applyProfile(portal, \'Products.ATContentTypes:content\')\n+        testing.applyProfile(portal, "Products.ATContentTypes:content")\n \n         # add home folder for default test user\n         _createMemberarea(portal, testing.TEST_USER_ID)\n@@ -63,30 +63,29 @@ def tearDownZope(self, app):\n         if not HAS_AT:\n             return\n \n-        z2.uninstallProduct(app, \'plone.app.collection\')\n-        z2.uninstallProduct(app, \'plone.app.blob\')\n-        z2.uninstallProduct(app, \'Products.ATContentTypes\')\n-        z2.uninstallProduct(app, \'Products.Archetypes\')\n+        z2.uninstallProduct(app, "plone.app.collection")\n+        z2.uninstallProduct(app, "plone.app.blob")\n+        z2.uninstallProduct(app, "Products.ATContentTypes")\n+        z2.uninstallProduct(app, "Products.Archetypes")\n \n \n PTC_FIXTURE = PloneTestCaseFixture()\n PTC_FUNCTIONAL_TESTING = testing.FunctionalTesting(\n-    bases=(PTC_FIXTURE,), name=\'PloneTestCase:Functional\')\n+    bases=(PTC_FIXTURE,), name="PloneTestCase:Functional"\n+)\n \n \n class PloneTestCase(Functional, unittest.TestCase):\n-\n     layer = PTC_FUNCTIONAL_TESTING\n \n     def setUp(self):\n         """Set up before each test."""\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'PloneTestCase requires Archetypes\')\n+            raise unittest.SkipTest("PloneTestCase requires Archetypes")\n         self.beforeSetUp()\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.folder = self.portal.portal_membership.getHomeFolder(\n-            testing.TEST_USER_ID)\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.folder = self.portal.portal_membership.getHomeFolder(testing.TEST_USER_ID)\n         transaction.commit()\n         self.afterSetUp()\n \n@@ -115,14 +114,14 @@ def setRoles(self, roles, name=testing.TEST_USER_ID):\n         testing.setRoles(self.portal, name, roles)\n \n     def setGroups(self, groups, name=testing.TEST_USER_ID):\n-        \'\'\'Changes the user\'s groups.\'\'\'\n-        uf = self.portal[\'acl_users\']\n+        """Changes the user\'s groups."""\n+        uf = self.portal["acl_users"]\n         uf.userSetGroups(name, list(groups))\n         user = getSecurityManager().getUser()\n         if name == user.getId():\n             self.login(user.getUserName())\n \n-    def setPermissions(self, permissions, role=\'Member\'):\n+    def setPermissions(self, permissions, role="Member"):\n         """Changes the permissions assigned to role."""\n         self.portal.manage_role(role, list(permissions))\n \n@@ -132,7 +131,7 @@ def login(self, userName=testing.TEST_USER_NAME):\n \n     def loginAsPortalOwner(self, userName=testing.SITE_OWNER_NAME):\n         """Log in to the portal as the user who created it."""\n-        z2.login(self.app[\'acl_users\'], userName)\n+        z2.login(self.app["acl_users"], userName)\n \n     def logout(self):\n         """Log out, i.e. become anonymous."""\ndiff --git a/src/plone/app/testing/cleanup.py b/src/plone/app/testing/cleanup.py\nindex b092686..7fcfc1f 100644\n--- a/src/plone/app/testing/cleanup.py\n+++ b/src/plone/app/testing/cleanup.py\n@@ -25,11 +25,11 @@ def cleanUpMultiPlugins():\n     except ImportError:\n         pass\n     else:\n-\n         zap = []\n \n         # Don\'t stomp on the things the other cleanup handler will deal with\n         from Products.PluggableAuthService import zcml\n+\n         for plugin in MultiPlugins:\n             if plugin not in zcml._mt_regs:\n                 zap.append(plugin)\ndiff --git a/src/plone/app/testing/helpers.py b/src/plone/app/testing/helpers.py\nindex 200e6fe..6c9ddb8 100644\n--- a/src/plone/app/testing/helpers.py\n+++ b/src/plone/app/testing/helpers.py\n@@ -23,24 +23,21 @@\n \n \n def login(portal, userName):\n-    """Log in as the given user in the given Plone site\n-    """\n+    """Log in as the given user in the given Plone site"""\n \n-    zope.login(portal[\'acl_users\'], userName)\n+    zope.login(portal["acl_users"], userName)\n \n \n def logout():\n-    """Log out, i.e. become anonymous\n-    """\n+    """Log out, i.e. become anonymous"""\n \n     zope.logout()\n \n \n def setRoles(portal, userId, roles):\n-    """Set the given user\'s roles to a tuple of roles.\n-    """\n+    """Set the given user\'s roles to a tuple of roles."""\n \n-    userFolder = portal[\'acl_users\']\n+    userFolder = portal["acl_users"]\n     zope.setRoles(userFolder, userId, roles)\n \n \n@@ -81,7 +78,7 @@ def quickInstallProduct(portal, productName, reinstall=False):\n     sm = getSecurityManager()\n     app = aq_parent(portal)\n \n-    zope.login(app[\'acl_users\'], SITE_OWNER_NAME)\n+    zope.login(app["acl_users"], SITE_OWNER_NAME)\n \n     from Products.CMFPlone.utils import get_installer\n \n@@ -101,9 +98,14 @@ def quickInstallProduct(portal, productName, reinstall=False):\n         setSecurityManager(sm)\n \n \n-def applyProfile(portal, profileName, purge_old=None,\n-                 ignore_dependencies=False, archive=None,\n-                 blacklisted_steps=None):\n+def applyProfile(\n+    portal,\n+    profileName,\n+    purge_old=None,\n+    ignore_dependencies=False,\n+    archive=None,\n+    blacklisted_steps=None,\n+):\n     """Install an extension profile into the portal. The profile name\n     should be a package name and a profile name, e.g. \'my.product:default\'.\n     """\n@@ -115,17 +117,18 @@ def applyProfile(portal, profileName, purge_old=None,\n     sm = getSecurityManager()\n     app = aq_parent(portal)\n \n-    zope.login(app[\'acl_users\'], SITE_OWNER_NAME)\n+    zope.login(app["acl_users"], SITE_OWNER_NAME)\n \n     try:\n-        setupTool = portal[\'portal_setup\']\n-        profileId = f\'profile-{profileName}\'\n+        setupTool = portal["portal_setup"]\n+        profileId = f"profile-{profileName}"\n         setupTool.runAllImportStepsFromProfile(\n             profileId,\n             purge_old=purge_old,\n             ignore_dependencies=ignore_dependencies,\n             archive=archive,\n-            blacklisted_steps=blacklisted_steps)\n+            blacklisted_steps=blacklisted_steps,\n+        )\n \n         portal.clearCurrentSkin()\n         portal.setupCurrentSkin(portal.REQUEST)\n@@ -157,7 +160,7 @@ def pushGlobalRegistry(portal, new=None, name=None):\n     current = zca.pushGlobalRegistry(new=new)\n \n     if current not in localSiteManager.__bases__:\n-        localSiteManager.__bases__ = (current, )\n+        localSiteManager.__bases__ = (current,)\n \n     if site is not None:\n         setHooks()\n@@ -215,6 +218,7 @@ def persist_profile_upgrade_versions(portal):\n     mapping.  Call this once in layer setup and you have easy rollback.\n     """\n     from persistent.mapping import PersistentMapping\n+\n     puv = portal.portal_setup._profile_upgrade_versions\n     if isinstance(puv, PersistentMapping):\n         return\n@@ -244,7 +248,7 @@ def ploneSite(db=None, connection=None, environ=None, flavour=zope):\n     setHooks()\n     site = getSite()\n \n-    with getattr(flavour, \'zopeApp\')(db, connection, environ) as app:\n+    with getattr(flavour, "zopeApp")(db, connection, environ) as app:\n         portal = app[PLONE_SITE_ID]\n \n         setSite(portal)\n@@ -272,7 +276,7 @@ class PloneSandboxLayer(Layer):\n \n     # The default list of bases.\n \n-    defaultBases = (layers.PLONE_FIXTURE, )\n+    defaultBases = (layers.PLONE_FIXTURE,)\n \n     # Hooks\n \n@@ -324,16 +328,19 @@ def setUp(self):\n         try:\n             # Push a new database storage so that database changes\n             # commited during layer setup can be easily torn down\n-            self[\'zodbDB\'] = zodb.stackDemoStorage(self.get(\'zodbDB\'),\n-                                                   name=self.__name__)\n+            self["zodbDB"] = zodb.stackDemoStorage(\n+                self.get("zodbDB"), name=self.__name__\n+            )\n \n             # Push a new configuration context so that it\'s possible to\n             # re-import ZCML files after tear-down\n-            name = self.__name__ if self.__name__ is not None else \'not-named\'\n-            contextName = f\'PloneSandboxLayer-{name}\'\n-            self[\'configurationContext\'] = configurationContext = (\n-                zca.stackConfigurationContext(self.get(\'configurationContext\'),\n-                                              name=contextName))\n+            name = self.__name__ if self.__name__ is not None else "not-named"\n+            contextName = f"PloneSandboxLayer-{name}"\n+            self[\n+                "configurationContext"\n+            ] = configurationContext = zca.stackConfigurationContext(\n+                self.get("configurationContext"), name=contextName\n+            )\n \n             with ploneSite() as portal:\n                 setHooks()\n@@ -374,15 +381,13 @@ def setUp(self):\n             # Keep track of PAS plugins that were added during setup\n             self.snapshotMultiPlugins(preSetupMultiPlugins)\n         except Exception:\n-            del self[\'configurationContext\']\n-            self[\'zodbDB\'].close()\n-            del self[\'zodbDB\']\n+            del self["configurationContext"]\n+            self["zodbDB"].close()\n+            del self["zodbDB"]\n             raise\n \n     def tearDown(self):\n-\n         with zope.zopeApp() as app:\n-\n             portal = app[PLONE_SITE_ID]\n             setHooks()\n             setSite(portal)\n@@ -411,23 +416,34 @@ def tearDown(self):\n             self.tearDownZope(app)\n \n         # Zap the configuration context\n-        del self[\'configurationContext\']\n+        del self["configurationContext"]\n \n         # Pop the demo storage, thus restoring the database to the\n         # previous state\n-        self[\'zodbDB\'].close()\n-        del self[\'zodbDB\']\n+        self["zodbDB"].close()\n+        del self["zodbDB"]\n \n     # Helpers\n-    def applyProfile(self, portal, profileName, purge_old=None,\n-                     ignore_dependencies=False, archive=None,\n-                     blacklisted_steps=None):\n-        return applyProfile(portal, profileName, purge_old,\n-                            ignore_dependencies, archive,\n-                            blacklisted_steps)\n-\n-    def loadZCML(self, name=\'configure.zcml\', **kw):\n-        kw.setdefault(\'context\', self[\'configurationContext\'])\n+    def applyProfile(\n+        self,\n+        portal,\n+        profileName,\n+        purge_old=None,\n+        ignore_dependencies=False,\n+        archive=None,\n+        blacklisted_steps=None,\n+    ):\n+        return applyProfile(\n+            portal,\n+            profileName,\n+            purge_old,\n+            ignore_dependencies,\n+            archive,\n+            blacklisted_steps,\n+        )\n+\n+    def loadZCML(self, name="configure.zcml", **kw):\n+        kw.setdefault("context", self["configurationContext"])\n         return xmlconfig.file(name, **kw)\n \n     def snapshotMultiPlugins(self, preSetupMultiPlugins):\n@@ -454,10 +470,11 @@ def tearDownMultiPlugins(self):\n     def snapshotGeneratedSchemas(self):\n         """Save a snapshot of the plone.dexterity.schema.generated module"""\n         from plone.dexterity.schema import generated\n+\n         self._generatedSchemas = generated.__dict__.copy()\n         todelete = []\n         for k in generated.__dict__:\n-            if not k.startswith(\'_\'):\n+            if not k.startswith("_"):\n                 todelete.append(k)\n         for k in todelete:\n             del generated.__dict__[k]\n@@ -465,15 +482,22 @@ def snapshotGeneratedSchemas(self):\n     def tearDownGeneratedSchemas(self):\n         """Reset plone.dexterity.schema.generated to its previous state"""\n         from plone.dexterity.schema import generated\n+\n         generated.__dict__.clear()\n         generated.__dict__.update(self._generatedSchemas)\n \n \n class PloneWithPackageLayer(PloneSandboxLayer):\n-\n-    def __init__(self, bases=None, name=None, module=None, zcml_filename=None,\n-                 zcml_package=None, gs_profile_id=None,\n-                 additional_z2_products=()):\n+    def __init__(\n+        self,\n+        bases=None,\n+        name=None,\n+        module=None,\n+        zcml_filename=None,\n+        zcml_package=None,\n+        gs_profile_id=None,\n+        additional_z2_products=(),\n+    ):\n         super().__init__(bases, name, module)\n         self.zcml_filename = zcml_filename\n         self.zcml_package = zcml_package\n@@ -495,11 +519,10 @@ def setUpZCMLFiles(self):\n         Can be overridden to load more ZCML.\n         """\n         if self.zcml_filename is None:\n-            raise ValueError(\'ZCML file name has not been provided.\')\n+            raise ValueError("ZCML file name has not been provided.")\n         if self.zcml_package is None:\n             raise ValueError(\n-                \'The package that contains the ZCML file \'\n-                \'has not been provided.\'\n+                "The package that contains the ZCML file " "has not been provided."\n             )\n         self.loadZCML(self.zcml_filename, package=self.zcml_package)\n \ndiff --git a/src/plone/app/testing/interfaces.py b/src/plone/app/testing/interfaces.py\nindex 9ff1c8a..bd28479 100644\n--- a/src/plone/app/testing/interfaces.py\n+++ b/src/plone/app/testing/interfaces.py\n@@ -1,16 +1,18 @@\n # Constants for names used in layer setup - also importable from\n # plone.app.testing directly\n \n-PLONE_SITE_ID = \'plone\'\n-PLONE_SITE_TITLE = \'Plone site\'\n-DEFAULT_LANGUAGE = \'en\'\n+PLONE_SITE_ID = "plone"\n+PLONE_SITE_TITLE = "Plone site"\n+DEFAULT_LANGUAGE = "en"\n \n-TEST_USER_NAME = \'test-user\'\n-TEST_USER_ID = \'test_user_1_\'\n-TEST_USER_PASSWORD = \'correct horse battery staple\'\n-TEST_USER_ROLES = [\'Member\', ]\n+TEST_USER_NAME = "test-user"\n+TEST_USER_ID = "test_user_1_"\n+TEST_USER_PASSWORD = "correct horse battery staple"\n+TEST_USER_ROLES = [\n+    "Member",\n+]\n \n-SITE_OWNER_NAME = \'admin\'\n-SITE_OWNER_PASSWORD = \'secret\'\n+SITE_OWNER_NAME = "admin"\n+SITE_OWNER_PASSWORD = "secret"\n \n ROBOT_TEST_LEVEL = 5\ndiff --git a/src/plone/app/testing/layers.py b/src/plone/app/testing/layers.py\nindex d92b45c..f07e001 100644\n--- a/src/plone/app/testing/layers.py\n+++ b/src/plone/app/testing/layers.py\n@@ -44,35 +44,33 @@ class PloneFixture(Layer):\n \n     # Products that will be installed, plus options\n     products = (\n-        (\'Products.GenericSetup\', {\'loadZCML\': True}, ),\n-        (\'Products.DCWorkflow\', {\'loadZCML\': True}, ),\n-        (\'Products.ZCTextIndex\', {\'loadZCML\': True}, ),\n-        (\'Products.DateRecurringIndex\', {\'loadZCML\': False}, ),\n-        (\'Products.PageTemplates\', {\'loadZCML\': True}, ),\n-        (\'Products.CMFUid\', {\'loadZCML\': True}, ),\n-        (\'Products.CMFCore\', {\'loadZCML\': True}, ),\n-        (\'Products.PluggableAuthService\', {\'loadZCML\': True}, ),\n-        (\'Products.PluginRegistry\', {\'loadZCML\': True}, ),\n-        (\'Products.PlonePAS\', {\'loadZCML\': True}, ),\n+        ("Products.GenericSetup", {"loadZCML": True}),\n+        ("Products.DCWorkflow", {"loadZCML": True}),\n+        ("Products.ZCTextIndex", {"loadZCML": True}),\n+        ("Products.DateRecurringIndex", {"loadZCML": False}),\n+        ("Products.PageTemplates", {"loadZCML": True}),\n+        ("Products.CMFUid", {"loadZCML": True}),\n+        ("Products.CMFCore", {"loadZCML": True}),\n+        ("Products.PluggableAuthService", {"loadZCML": True}),\n+        ("Products.PluginRegistry", {"loadZCML": True}),\n+        ("Products.PlonePAS", {"loadZCML": True}),\n         # product for Plone 5.2 only, be silent when not available on Plone 6:\n-        (\'Products.CMFFormController\', {\'loadZCML\': True, \'silent\': True}, ),\n-        (\'Products.CMFDynamicViewFTI\', {\'loadZCML\': True}, ),\n-        (\'Products.CMFPlacefulWorkflow\', {\'loadZCML\': True}, ),\n-        (\'Products.MimetypesRegistry\', {\'loadZCML\': True}, ),\n-        (\'Products.PortalTransforms\', {\'loadZCML\': True}, ),\n-        (\'Products.ExtendedPathIndex\', {\'loadZCML\': True}, ),\n-        (\'Products.SiteAccess\', {\'loadZCML\': False}, ),\n-        (\'Products.CMFEditions\', {\'loadZCML\': True}, ),\n-        (\'Products.CMFDiffTool\', {\'loadZCML\': True}, ),\n-        (\'plone.i18n\', {\'loadZCML\': True, \'install\': False}, ),\n-        (\'plonetheme.barceloneta\', {\'loadZCML\': True, \'install\': False}, ),\n-        (\'Products.CMFPlone\', {\'loadZCML\': True}, ),\n-        (\'Products.PythonScripts\', {\'loadZCML\': False}, ),\n+        ("Products.CMFFormController", {"loadZCML": True, "silent": True}),\n+        ("Products.CMFDynamicViewFTI", {"loadZCML": True}),\n+        ("Products.CMFPlacefulWorkflow", {"loadZCML": True}),\n+        ("Products.MimetypesRegistry", {"loadZCML": True}),\n+        ("Products.PortalTransforms", {"loadZCML": True}),\n+        ("Products.ExtendedPathIndex", {"loadZCML": True}),\n+        ("Products.SiteAccess", {"loadZCML": False}),\n+        ("Products.CMFEditions", {"loadZCML": True}),\n+        ("Products.CMFDiffTool", {"loadZCML": True}),\n+        ("plone.i18n", {"loadZCML": True, "install": False}),\n+        ("plonetheme.barceloneta", {"loadZCML": True, "install": False}),\n+        ("Products.CMFPlone", {"loadZCML": True}),\n+        ("Products.PythonScripts", {"loadZCML": False}),\n     )\n     if six.PY2:\n-        products += (\n-            (\'Products.ExternalEditor\', {\'loadZCML\': True}, ),\n-        )\n+        products += (("Products.ExternalEditor", {"loadZCML": True}),)\n \n         try:\n             # Since gopipindex moved to plone.folder only with Archetypes\n@@ -81,25 +79,22 @@ class PloneFixture(Layer):\n             # Prevent trying to load plone.app.folder if it is a module alias\n             if hasattr(plone.app.folder, "__file__"):\n                 products += (\n-                    (\'plone.app.folder\', {\'loadZCML\': True}, ),\n+                    (\n+                        "plone.app.folder",\n+                        {"loadZCML": True}\n+                    ),\n                 )\n         except ImportError:\n             pass\n \n     # Extension profiles to be installed with site setup\n-    extensionProfiles = (\n-        \'plonetheme.barceloneta:default\',\n-    )\n+    extensionProfiles = ("plonetheme.barceloneta:default",)\n \n     # Layer lifecycle\n \n     def setUp(self):\n-\n         # Stack a new DemoStorage on top of the one from zope.STARTUP.\n-        self[\'zodbDB\'] = zodb.stackDemoStorage(\n-            self.get(\'zodbDB\'),\n-            name=\'PloneFixture\'\n-        )\n+        self["zodbDB"] = zodb.stackDemoStorage(self.get("zodbDB"), name="PloneFixture")\n \n         self.setUpZCML()\n \n@@ -112,7 +107,6 @@ def setUp(self):\n             transaction.savepoint(optimistic=True)\n \n     def tearDown(self):\n-\n         # Tear down products\n         with zope.zopeApp() as app:\n             # note: content tear-down happens by squashing the ZODB\n@@ -121,8 +115,8 @@ def tearDown(self):\n         self.tearDownZCML()\n \n         # Zap the stacked ZODB\n-        self[\'zodbDB\'].close()\n-        del self[\'zodbDB\']\n+        self["zodbDB"].close()\n+        del self["zodbDB"]\n \n     def setUpZCML(self):\n         """Stack a new global registry and load ZCML configuration of Plone\n@@ -135,25 +129,29 @@ def setUpZCML(self):\n         zca.pushGlobalRegistry()\n \n         from zope.configuration import xmlconfig\n-        self[\'configurationContext\'] = context = zca.stackConfigurationContext(\n-            self.get(\'configurationContext\')\n+\n+        self["configurationContext"] = context = zca.stackConfigurationContext(\n+            self.get("configurationContext")\n         )\n \n         # Turn off z3c.autoinclude\n \n-        xmlconfig.string("""\\\n+        xmlconfig.string(\n+            """\\\n <configure xmlns="http://namespaces.zope.org/zope"\n            xmlns:meta="http://namespaces.zope.org/meta">\n     <meta:provides feature="disable-autoinclude" />\n </configure>\n-""", context=context)\n+""",\n+            context=context,\n+        )\n \n         # Load dependent products\'s ZCML - Plone doesn\'t specify dependencies\n         # on Products.* packages fully\n \n         def loadAll(filename):\n             for p, config in self.products:\n-                if not config[\'loadZCML\']:\n+                if not config["loadZCML"]:\n                     continue\n                 try:\n                     package = resolve(p)\n@@ -164,9 +162,9 @@ def loadAll(filename):\n                 except OSError:\n                     pass\n \n-        loadAll(\'meta.zcml\')\n-        loadAll(\'configure.zcml\')\n-        loadAll(\'overrides.zcml\')\n+        loadAll("meta.zcml")\n+        loadAll("configure.zcml")\n+        loadAll("overrides.zcml")\n \n     def tearDownZCML(self):\n         """Pop the global component registry stack, effectively unregistering\n@@ -176,7 +174,7 @@ def tearDownZCML(self):\n         zca.popGlobalRegistry()\n \n         # Zap the stacked configuration context\n-        del self[\'configurationContext\']\n+        del self["configurationContext"]\n \n     def setUpProducts(self, app):\n         """Install all old-style products listed in the the ``products`` tuple\n@@ -184,8 +182,8 @@ def setUpProducts(self, app):\n         """\n \n         for p, config in self.products:\n-            if config.get(\'install\', True):\n-                if config.get(\'silent\'):\n+            if config.get("install", True):\n+                if config.get("silent"):\n                     # When product is not available, do not complain or warn.\n                     try:\n                         resolve(p)\n@@ -198,13 +196,14 @@ def tearDownProducts(self, app):\n         tuple of this class.\n         """\n         for p, config in reversed(self.products):\n-            if config.get(\'install\', True):\n+            if config.get("install", True):\n                 zope.uninstallProduct(app, p)\n \n         # Clean up Wicked turds\n         # XXX: This may tear down too much state\n         try:\n             from wicked.fieldevent import meta\n+\n             meta.cleanUp()\n         except ImportError:\n             pass\n@@ -222,17 +221,15 @@ def setUpDefaultContent(self, app):\n \n         # Create the owner user and "log in" so that the site object gets\n         # the right ownership information\n-        app[\'acl_users\'].userFolderAddUser(\n-            SITE_OWNER_NAME,\n-            SITE_OWNER_PASSWORD,\n-            [\'Manager\'],\n-            []\n+        app["acl_users"].userFolderAddUser(\n+            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ["Manager"], []\n         )\n \n-        zope.login(app[\'acl_users\'], SITE_OWNER_NAME)\n+        zope.login(app["acl_users"], SITE_OWNER_NAME)\n \n         # Create the site with the default set of extension profiles\n         from Products.CMFPlone.factory import addPloneSite\n+\n         addPloneSite(\n             app,\n             PLONE_SITE_ID,\n@@ -243,17 +240,13 @@ def setUpDefaultContent(self, app):\n         )\n \n         # Turn off default workflow\n-        app[PLONE_SITE_ID][\'portal_workflow\'].setDefaultChain(\'\')\n+        app[PLONE_SITE_ID]["portal_workflow"].setDefaultChain("")\n \n         # Create the test user. (Plone)PAS does not have an API to create a\n         # user with different userid and login name, so we call the plugin\n         # directly.\n-        pas = app[PLONE_SITE_ID][\'acl_users\']\n-        pas.source_users.addUser(\n-            TEST_USER_ID,\n-            TEST_USER_NAME,\n-            TEST_USER_PASSWORD\n-        )\n+        pas = app[PLONE_SITE_ID]["acl_users"]\n+        pas.source_users.addUser(TEST_USER_ID, TEST_USER_NAME, TEST_USER_PASSWORD)\n         for role in TEST_USER_ROLES:\n             pas.portal_role_manager.doAssignRoleToPrincipal(TEST_USER_ID, role)\n \n@@ -276,11 +269,9 @@ class PloneZServerFixture(PloneFixture):\n     defaultBases = (zserver.STARTUP,)\n \n     def setUp(self):\n-\n         # Stack a new DemoStorage on top of the one from zserver.STARTUP.\n-        self[\'zodbDB\'] = zodb.stackDemoStorage(\n-            self.get(\'zodbDB\'),\n-            name=\'PloneZServerFixture\'\n+        self["zodbDB"] = zodb.stackDemoStorage(\n+            self.get("zodbDB"), name="PloneZServerFixture"\n         )\n \n         self.setUpZCML()\n@@ -291,7 +282,6 @@ def setUp(self):\n             self.setUpDefaultContent(app)\n \n     def tearDown(self):\n-\n         # Tear down products\n         with zserver.zopeApp() as app:\n             # note: content tear-down happens by squashing the ZODB\n@@ -300,8 +290,8 @@ def tearDown(self):\n         self.tearDownZCML()\n \n         # Zap the stacked ZODB\n-        self[\'zodbDB\'].close()\n-        del self[\'zodbDB\']\n+        self["zodbDB"].close()\n+        del self["zodbDB"]\n \n \n PLONE_ZSERVER_FIXTURE = PloneZServerFixture()\n@@ -321,12 +311,12 @@ class PloneTestLifecycle:\n     def testSetUp(self):\n         super().testSetUp()\n \n-        self[\'portal\'] = portal = self[\'app\'][PLONE_SITE_ID]\n+        self["portal"] = portal = self["app"][PLONE_SITE_ID]\n         self.setUpEnvironment(portal)\n \n     def testTearDown(self):\n-        self.tearDownEnvironment(self[\'portal\'])\n-        del self[\'portal\']\n+        self.tearDownEnvironment(self["portal"])\n+        del self["portal"]\n \n         super().testTearDown()\n \n@@ -345,6 +335,7 @@ def setUpEnvironment(self, portal):\n \n         # Pseudo-login as the test user\n         from plone.app.testing import helpers\n+\n         helpers.login(portal, TEST_USER_NAME)\n \n     def tearDownEnvironment(self, portal):\n@@ -354,16 +345,19 @@ def tearDownEnvironment(self, portal):\n \n         # Clear the security manager\n         from plone.app.testing import helpers\n+\n         helpers.logout()\n \n         # Clear any cached data using plone.memoize\'s RAM caches\n         from plone.memoize.ram import global_cache\n+\n         global_cache.invalidateAll()\n \n         from plone.memoize.ram import IRAMCache\n         from zope.component import queryUtility\n+\n         cache = queryUtility(IRAMCache)\n-        if cache and getattr(cache, \'_cacheId\', None):\n+        if cache and getattr(cache, "_cacheId", None):\n             cache.invalidateAll()\n \n         # Unset the local component site\n@@ -380,6 +374,7 @@ class MockMailHostLayer(Layer):\n     """Layer for setting up a MockMailHost to store all sent messages as\n     strings into a list at portal.MailHost.messages\n     """\n+\n     defaultBases = (PLONE_FIXTURE,)\n \n     def testSetUp(self):\n@@ -388,7 +383,9 @@ def testSetUp(self):\n             registry = getUtility(IRegistry, context=portal)\n \n             if not registry["plone.email_from_address"]:\n-                portal._original_email_address = registry["plone.email_from_address"]  # noqa: E501\n+                portal._original_email_address = registry[\n+                    "plone.email_from_address"\n+                ]  # noqa: E501\n                 registry["plone.email_from_address"] = "noreply@example.com"\n \n             if not registry["plone.email_from_name"]:\n@@ -396,14 +393,13 @@ def testSetUp(self):\n                 registry["plone.email_from_name"] = "Plone site"\n \n             portal._original_MailHost = portal.MailHost\n-            portal.MailHost = mailhost = MockMailHost(\'MailHost\')\n+            portal.MailHost = mailhost = MockMailHost("MailHost")\n \n             sm = getSiteManager(context=portal)\n             sm.unregisterUtility(provided=IMailHost)\n             sm.registerUtility(mailhost, provided=IMailHost)\n \n     def testTearDown(self):\n-\n         with zope.zopeApp() as app:\n             portal = app[PLONE_SITE_ID]\n             registry = getUtility(IRegistry, context=portal)\n@@ -419,7 +415,9 @@ def testTearDown(self):\n                 delattr(portal, "_original_email_name")\n \n             if hasattr(portal, "_original_email_address"):\n-                registry["plone.email_from_address"] = portal._original_email_address  # noqa: E501\n+                registry[\n+                    "plone.email_from_address"\n+                ] = portal._original_email_address  # noqa: E501\n                 delattr(portal, "_original_email_address")\n \n             delattr(portal, "_original_MailHost")\n@@ -429,19 +427,16 @@ def testTearDown(self):\n \n \n class IntegrationTesting(PloneTestLifecycle, zope.IntegrationTesting):\n-    """Plone version of the integration testing layer\n-    """\n+    """Plone version of the integration testing layer"""\n \n \n class FunctionalTesting(PloneTestLifecycle, zope.FunctionalTesting):\n-    """Plone version of the functional testing layer\n-    """\n+    """Plone version of the functional testing layer"""\n \n \n-class ZServerFunctionalTesting(\n-        PloneZServerTestLifecycle, zserver.FunctionalTesting):\n-    """Plone version of the functional testing layer using ZServer.\n-    """\n+class ZServerFunctionalTesting(PloneZServerTestLifecycle, zserver.FunctionalTesting):\n+    """Plone version of the functional testing layer using ZServer."""\n+\n \n #\n # Layer instances\n@@ -450,21 +445,17 @@ class ZServerFunctionalTesting(\n \n \n PLONE_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_FIXTURE, ),\n-    name=\'Plone:Integration\'\n+    bases=(PLONE_FIXTURE,), name="Plone:Integration"\n )\n \n PLONE_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_FIXTURE, ),\n-    name=\'Plone:Functional\'\n+    bases=(PLONE_FIXTURE,), name="Plone:Functional"\n )\n \n PLONE_WSGISERVER = PLONE_ZSERVER = FunctionalTesting(\n-    bases=(PLONE_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n-    name=\'Plone:WSGIServer\'\n+    bases=(PLONE_FIXTURE, zope.WSGI_SERVER_FIXTURE), name="Plone:WSGIServer"\n )\n \n PLONE_FTP_SERVER = ZServerFunctionalTesting(\n-    bases=(PLONE_ZSERVER_FIXTURE, zserver.FTP_SERVER_FIXTURE),\n-    name=\'Plone:FTPServer\'\n+    bases=(PLONE_ZSERVER_FIXTURE, zserver.FTP_SERVER_FIXTURE), name="Plone:FTPServer"\n )\ndiff --git a/src/plone/app/testing/selenium_layers.py b/src/plone/app/testing/selenium_layers.py\nindex 8ab9665..f4e0905 100644\n--- a/src/plone/app/testing/selenium_layers.py\n+++ b/src/plone/app/testing/selenium_layers.py\n@@ -10,32 +10,33 @@\n \n \n class SeleniumLayer(Layer):\n-    defaultBases = (zope.ZSERVER_FIXTURE, )\n+    defaultBases = (zope.ZSERVER_FIXTURE,)\n \n     def testSetUp(self):\n         # Start up Selenium\n-        driver = os.environ.get(\'SELENIUM_DRIVER\', \'\').lower() or \'firefox\'\n+        driver = os.environ.get("SELENIUM_DRIVER", "").lower() or "firefox"\n         webdriver = __import__(\n-            f\'selenium.webdriver.{driver}.webdriver\',\n-            fromlist=[\'WebDriver\']\n+            f"selenium.webdriver.{driver}.webdriver", fromlist=["WebDriver"]\n         )\n-        args = [arg.strip() for arg in\n-                os.environ.get(\'SELENIUM_ARGS\', \'\').split()\n-                if arg.strip()]\n-        self[\'selenium\'] = webdriver.WebDriver(*args)\n+        args = [\n+            arg.strip()\n+            for arg in os.environ.get("SELENIUM_ARGS", "").split()\n+            if arg.strip()\n+        ]\n+        self["selenium"] = webdriver.WebDriver(*args)\n \n     def testTearDown(self):\n-        self[\'selenium\'].quit()\n-        del self[\'selenium\']\n+        self["selenium"].quit()\n+        del self["selenium"]\n \n \n SELENIUM_FIXTURE = SeleniumLayer()\n SELENIUM_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(SELENIUM_FIXTURE, ),\n-    name=\'SeleniumTesting:Functional\')\n+    bases=(SELENIUM_FIXTURE,), name="SeleniumTesting:Functional"\n+)\n SELENIUM_PLONE_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(SELENIUM_FIXTURE, PLONE_FIXTURE),\n-    name=\'SeleniumTesting:Functional\')\n+    bases=(SELENIUM_FIXTURE, PLONE_FIXTURE), name="SeleniumTesting:Functional"\n+)\n \n \n # Helper functions\n@@ -48,26 +49,25 @@ def open(selenium, url):\n \n \n def login(selenium, portal, username=False, password=False):\n-\n     if not username:\n         username = TEST_USER_NAME\n     if not password:\n         password = TEST_USER_PASSWORD\n \n-    open(selenium, portal.absolute_url() + \'/login_form\')\n-    selenium.find_element_by_name(\'__ac_name\').send_keys(username)\n-    selenium.find_element_by_name(\'__ac_password\').send_keys(password)\n-    selenium.find_element_by_name(\'submit\').click()\n+    open(selenium, portal.absolute_url() + "/login_form")\n+    selenium.find_element_by_name("__ac_name").send_keys(username)\n+    selenium.find_element_by_name("__ac_password").send_keys(password)\n+    selenium.find_element_by_name("submit").click()\n \n \n def click(selenium, xpath):\n-    if xpath.count(\'link=\'):\n-        link = xpath.split(\'link=\')[-1]\n+    if xpath.count("link="):\n+        link = xpath.split("link=")[-1]\n         element = selenium.find_element_by_partial_link_text(link)\n-    elif xpath.count(\'//\'):\n+    elif xpath.count("//"):\n         element = selenium.find_element_by_xpath(xpath)\n-    elif xpath.count(\'#\'):\n-        eleName = xpath.split(\'#\')[-1]\n+    elif xpath.count("#"):\n+        eleName = xpath.split("#")[-1]\n         element = selenium.find_element_by_id(eleName)\n     else:\n         element = selenium.find_element_by_name(xpath)\n@@ -92,8 +92,8 @@ def typeMce(selenium, value):\n     this breaks it won\'t be a surprise.\n     """\n     handle = selenium.current_window_handle\n-    selenium.switch_to_frame(\'form.text_ifr\')\n-    ele = selenium.find_element_by_xpath(\'//p\')\n+    selenium.switch_to_frame("form.text_ifr")\n+    ele = selenium.find_element_by_xpath("//p")\n     ele.send_keys(value)\n     selenium.switch_to_window(handle)\n \n@@ -102,7 +102,7 @@ def clear(selenium, name):\n     selenium.find_element_by_name(name).clear()\n \n \n-def select(selenium, xpath1, xpath2=\'\'):\n+def select(selenium, xpath1, xpath2=""):\n     xpath = xpath1\n     if xpath2:\n         xpath = f"{xpath1}[\'{xpath2}\']"\n@@ -117,7 +117,7 @@ def waitForPageToLoad(selenium, foo):\n \n def publish(selenium):\n     click(selenium, "//dl[@id=\'plone-contentmenu-workflow\']/dt/a")\n-    click(selenium, \'#workflow-transition-publish\')\n+    click(selenium, "#workflow-transition-publish")\n \n \n def submit(selenium, formId):\ndiff --git a/src/plone/app/testing/tests.py b/src/plone/app/testing/tests.py\nindex 4d86132..fadf268 100644\n--- a/src/plone/app/testing/tests.py\n+++ b/src/plone/app/testing/tests.py\n@@ -45,8 +45,9 @@ def test_suite():\n         ]\n     )\n     if six.PY2:\n-        suite.addTests([\n-            doctest.DocFileSuite(\n-                \'layers_zserver.rst\', optionflags=OPTIONFLAGS),\n-        ])\n+        suite.addTests(\n+            [\n+                doctest.DocFileSuite("layers_zserver.rst", optionflags=OPTIONFLAGS),\n+            ]\n+        )\n     return suite\ndiff --git a/src/plone/app/testing/utils.py b/src/plone/app/testing/utils.py\nindex 8021984..4a73eb5 100644\n--- a/src/plone/app/testing/utils.py\n+++ b/src/plone/app/testing/utils.py\n@@ -4,8 +4,7 @@\n \n \n class MockMailHost(MailBase):\n-    """A MailHost that collects messages instead of sending them.\n-    """\n+    """A MailHost that collects messages instead of sending them."""\n \n     def __init__(self, id):\n         self.reset()\n@@ -14,13 +13,21 @@ def reset(self):\n         self.messages = PersistentList()\n \n     def _send(self, mfrom, mto, messageText, immediate=False):\n-        """ Send the message """\n+        """Send the message"""\n         self.messages.append(messageText)\n \n-    def send(self, messageText, mto=None, mfrom=None, subject=None,\n-             encode=None, immediate=False, charset=None, msg_type=None):\n-        messageText, mto, mfrom = _mungeHeaders(messageText,\n-                                                mto, mfrom, subject,\n-                                                charset=charset,\n-                                                msg_type=msg_type)\n+    def send(\n+        self,\n+        messageText,\n+        mto=None,\n+        mfrom=None,\n+        subject=None,\n+        encode=None,\n+        immediate=False,\n+        charset=None,\n+        msg_type=None,\n+    ):\n+        messageText, mto, mfrom = _mungeHeaders(\n+            messageText, mto, mfrom, subject, charset=charset, msg_type=msg_type\n+        )\n         self.messages.append(messageText)\n'

Repository: plone.app.testing


Branch: refs/heads/master
Date: 2023-04-08T20:16:49+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.testing/commit/0254b8a8b30c6c8cffc51b1c3d4c2c9ae27e9f6f

chore: zpretty

Files changed:
M src/plone/app/testing/profile/metadata.xml

b'diff --git a/src/plone/app/testing/profile/metadata.xml b/src/plone/app/testing/profile/metadata.xml\nindex 6ce5b66..95a84a0 100644\n--- a/src/plone/app/testing/profile/metadata.xml\n+++ b/src/plone/app/testing/profile/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <!-- This is used in the helpers.rst tests. -->\n   <version>1000</version>\n'

Repository: plone.app.testing


Branch: refs/heads/master
Date: 2023-04-08T20:16:49+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.testing/commit/7a40ad96edd7c6f4369e3283bc0059063c3d2c34

feat: remove Archetypes code paths

Since it is only python 3 compatible, it does not make sense to keep
code around for something (Archetypes) that is not python 3 compatible.

Files changed:
M src/plone/app/testing/layers.py
D src/plone/app/testing/bbb_at.py

b'diff --git a/src/plone/app/testing/bbb_at.py b/src/plone/app/testing/bbb_at.py\ndeleted file mode 100644\nindex 2764480..0000000\n--- a/src/plone/app/testing/bbb_at.py\n+++ /dev/null\n@@ -1,142 +0,0 @@\n-"""Backwards-compatibility test class for PloneTestCase for Archetypes."""\n-\n-from AccessControl import getSecurityManager\n-from plone.app import testing\n-from plone.testing import z2\n-from Products.CMFPlone.utils import _createObjectByType\n-from Testing.ZopeTestCase.functional import Functional\n-\n-import transaction\n-import unittest\n-\n-\n-try:\n-    import Products.Archetypes  # noqa: F401\n-except ImportError:\n-    HAS_AT = False\n-else:\n-    HAS_AT = True\n-\n-\n-def _createMemberarea(portal, user_id):\n-    mtool = portal.portal_membership\n-    members = mtool.getMembersFolder()\n-    if members is None:\n-        _createObjectByType("Folder", portal, id="Members")\n-    if not mtool.getMemberareaCreationFlag():\n-        mtool.setMemberareaCreationFlag()\n-    mtool.createMemberArea(user_id)\n-    if mtool.getMemberareaCreationFlag():\n-        mtool.setMemberareaCreationFlag()\n-\n-\n-class PloneTestCaseFixture(testing.PloneSandboxLayer):\n-    defaultBases = (testing.PLONE_FIXTURE,)\n-\n-    def setUpZope(self, app, configurationContext):\n-        if not HAS_AT:\n-            return\n-\n-        import Products.ATContentTypes\n-\n-        self.loadZCML(package=Products.ATContentTypes)\n-\n-        z2.installProduct(app, "Products.Archetypes")\n-        z2.installProduct(app, "Products.ATContentTypes")\n-        z2.installProduct(app, "plone.app.blob")\n-        z2.installProduct(app, "plone.app.collection")\n-\n-    def setUpPloneSite(self, portal):\n-        if not HAS_AT:\n-            return\n-\n-        # restore default workflow\n-        testing.applyProfile(portal, "Products.CMFPlone:testfixture")\n-\n-        # add default content\n-        testing.applyProfile(portal, "Products.ATContentTypes:content")\n-\n-        # add home folder for default test user\n-        _createMemberarea(portal, testing.TEST_USER_ID)\n-\n-    def tearDownZope(self, app):\n-        if not HAS_AT:\n-            return\n-\n-        z2.uninstallProduct(app, "plone.app.collection")\n-        z2.uninstallProduct(app, "plone.app.blob")\n-        z2.uninstallProduct(app, "Products.ATContentTypes")\n-        z2.uninstallProduct(app, "Products.Archetypes")\n-\n-\n-PTC_FIXTURE = PloneTestCaseFixture()\n-PTC_FUNCTIONAL_TESTING = testing.FunctionalTesting(\n-    bases=(PTC_FIXTURE,), name="PloneTestCase:Functional"\n-)\n-\n-\n-class PloneTestCase(Functional, unittest.TestCase):\n-    layer = PTC_FUNCTIONAL_TESTING\n-\n-    def setUp(self):\n-        """Set up before each test."""\n-        if not HAS_AT:\n-            raise unittest.SkipTest("PloneTestCase requires Archetypes")\n-        self.beforeSetUp()\n-        self.app = self.layer["app"]\n-        self.portal = self.layer["portal"]\n-        self.folder = self.portal.portal_membership.getHomeFolder(testing.TEST_USER_ID)\n-        transaction.commit()\n-        self.afterSetUp()\n-\n-    def beforeSetUp(self):\n-        """Hook to do setup before the portal is created."""\n-        pass\n-\n-    def afterSetUp(self):\n-        """Hook to do setup after the portal is created."""\n-\n-    def tearDown(self):\n-        """Tear down after each test."""\n-        self.beforeTearDown()\n-        transaction.abort()\n-        super().tearDown()\n-        self.afterTearDown()\n-\n-    def beforeTearDown(self):\n-        """Hook to do teardown before the portal is removed."""\n-\n-    def afterTearDown(self):\n-        """Hook to do teardown after the portal is removed."""\n-\n-    def setRoles(self, roles, name=testing.TEST_USER_ID):\n-        """Set the effective roles of a user."""\n-        testing.setRoles(self.portal, name, roles)\n-\n-    def setGroups(self, groups, name=testing.TEST_USER_ID):\n-        """Changes the user\'s groups."""\n-        uf = self.portal["acl_users"]\n-        uf.userSetGroups(name, list(groups))\n-        user = getSecurityManager().getUser()\n-        if name == user.getId():\n-            self.login(user.getUserName())\n-\n-    def setPermissions(self, permissions, role="Member"):\n-        """Changes the permissions assigned to role."""\n-        self.portal.manage_role(role, list(permissions))\n-\n-    def login(self, userName=testing.TEST_USER_NAME):\n-        """Log in to the portal as the given user."""\n-        testing.login(self.portal, userName)\n-\n-    def loginAsPortalOwner(self, userName=testing.SITE_OWNER_NAME):\n-        """Log in to the portal as the user who created it."""\n-        z2.login(self.app["acl_users"], userName)\n-\n-    def logout(self):\n-        """Log out, i.e. become anonymous."""\n-        testing.logout()\n-\n-    def createMemberarea(self, name):\n-        """Create a minimal memberarea."""\n-        _createMemberarea(self.portal, name)\ndiff --git a/src/plone/app/testing/layers.py b/src/plone/app/testing/layers.py\nindex f07e001..e235cce 100644\n--- a/src/plone/app/testing/layers.py\n+++ b/src/plone/app/testing/layers.py\n@@ -72,21 +72,6 @@ class PloneFixture(Layer):\n     if six.PY2:\n         products += (("Products.ExternalEditor", {"loadZCML": True}),)\n \n-        try:\n-            # Since gopipindex moved to plone.folder only with Archetypes\n-            import plone.app.folder\n-\n-            # Prevent trying to load plone.app.folder if it is a module alias\n-            if hasattr(plone.app.folder, "__file__"):\n-                products += (\n-                    (\n-                        "plone.app.folder",\n-                        {"loadZCML": True}\n-                    ),\n-                )\n-        except ImportError:\n-            pass\n-\n     # Extension profiles to be installed with site setup\n     extensionProfiles = ("plonetheme.barceloneta:default",)\n \n'

Repository: plone.app.testing


Branch: refs/heads/master
Date: 2023-04-08T20:16:49+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.testing/commit/7a3472fb3fe56105dc4ef6984e41cb908a0abcdc

feat: drop six usage

Files changed:
M setup.py
M src/plone/app/testing/layers.py
M src/plone/app/testing/layers.rst
M src/plone/app/testing/tests.py
D src/plone/app/testing/layers_zserver.rst

b'diff --git a/setup.py b/setup.py\nindex 410ac04..34a2c81 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -74,7 +74,6 @@ def read(*rnames):\n     python_requires=">=3.7",\n     install_requires=[\n         "setuptools",\n-        "six",\n         "zope.configuration",\n         "zope.component",\n         "zope.dottedname",\ndiff --git a/src/plone/app/testing/layers.py b/src/plone/app/testing/layers.py\nindex e235cce..190ea7d 100644\n--- a/src/plone/app/testing/layers.py\n+++ b/src/plone/app/testing/layers.py\n@@ -26,7 +26,6 @@\n from zope.event import notify\n from zope.traversing.interfaces import BeforeTraverseEvent\n \n-import six\n import transaction\n \n \n@@ -69,8 +68,6 @@ class PloneFixture(Layer):\n         ("Products.CMFPlone", {"loadZCML": True}),\n         ("Products.PythonScripts", {"loadZCML": False}),\n     )\n-    if six.PY2:\n-        products += (("Products.ExternalEditor", {"loadZCML": True}),)\n \n     # Extension profiles to be installed with site setup\n     extensionProfiles = ("plonetheme.barceloneta:default",)\ndiff --git a/src/plone/app/testing/layers.rst b/src/plone/app/testing/layers.rst\nindex 6cf1ca7..927ac79 100644\n--- a/src/plone/app/testing/layers.rst\n+++ b/src/plone/app/testing/layers.rst\n@@ -337,7 +337,7 @@ We can now look for this new object through the server.\n     >>> portal_url.split(\':\')[:-1]\n     [\'http\', \'//localhost\']\n \n-    >>> from six.moves.urllib.request import urlopen\n+    >>> from urllib.request import urlopen\n     >>> conn = urlopen(portal_url, timeout=10)\n     >>> responseBody = conn.read()\n     >>> b"Fancy Portal" in responseBody\ndiff --git a/src/plone/app/testing/layers_zserver.rst b/src/plone/app/testing/layers_zserver.rst\ndeleted file mode 100644\nindex 8bd3401..0000000\n--- a/src/plone/app/testing/layers_zserver.rst\n+++ /dev/null\n@@ -1,135 +0,0 @@\n-Plone testing ZServer layers\n-----------------------------\n-\n-There are some ZServer layers used to set up test fixtures containing a Plone\n-site running with ZServer. They are all importable from ``plone.app.testing``\n-directly, or from their canonical locations at ``plone.app.testing.layers``.\n-\n-    >>> from plone.app.testing import layers\n-\n-For testing, we need a testrunner\n-\n-    >>> from zope.testrunner import runner\n-\n-FTP server with Plone site\n-~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-The ``PLONE_FTP_SERVER`` layer instantiates the ``FunctionalTesting`` class\n-with two bases: ``PLONE_FIXTURE``, as shown above, and ``FTP_SERVER_FIXTURE``\n-from ``plone.testing``, which starts up an FTP server thread.\n-\n-    >>> "%s.%s" % (layers.PLONE_FTP_SERVER.__module__, layers.PLONE_FTP_SERVER.__name__,)\n-    \'plone.app.testing.layers.Plone:FTPServer\'\n-\n-    >>> layers.PLONE_FTP_SERVER.__bases__\n-    (<Layer \'plone.app.testing.layers.PloneZServerFixture\'>, <Layer \'plone.testing.zserver.FTPServer\'>)\n-\n-    >>> options = runner.get_options([], [])\n-    >>> setupLayers = {}\n-    >>> runner.setup_layer(options, layers.PLONE_FTP_SERVER, setupLayers)  # here!\n-    Set up plone.testing.zca.LayerCleanup in ... seconds.\n-    Set up plone.testing.zserver.Startup in ... seconds.\n-    Set up plone.app.testing.layers.PloneZServerFixture in ... seconds.\n-    Set up plone.testing.zserver.FTPServer in ... seconds.\n-    Set up plone.app.testing.layers.Plone:FTPServer in ... seconds.\n-\n-After layer setup, the resources ``host`` and ``port`` are available, and\n-indicate where Zope is running.\n-\n-    >>> host = layers.PLONE_FTP_SERVER[\'host\']\n-    >>> host\n-    \'localhost\'\n-\n-The port is auto-allocated\n-\n-    >>> port = layers.PLONE_FTP_SERVER[\'port\']\n-    >>> bool(port)\n-    True\n-\n-Let\'s now simulate a test. Test setup does nothing beyond what the base layers\n-do.\n-\n-    >>> from plone.testing import zca, zserver\n-    >>> zca.LAYER_CLEANUP.testSetUp()\n-    >>> zserver.STARTUP.testSetUp()\n-    >>> layers.PLONE_FIXTURE.testSetUp()\n-    >>> zserver.FTP_SERVER_FIXTURE.testSetUp()\n-    >>> layers.PLONE_FTP_SERVER.testSetUp()\n-\n-It is common in a test to use the Python API to change the state of the server\n-(e.g. create some content or change a setting) and then use the FTP protocol\n-to look at the results. Bear in mind that the server is running in a separate\n-thread, with a separate security manager, so calls to ``helpers.login()`` and\n-``helpers.logout()``, for instance, do not affect the server thread.\n-\n-    >>> from plone.app.testing import helpers\n-    >>> from plone.app.testing.interfaces import TEST_USER_ID\n-    >>> portal = layers.PLONE_FTP_SERVER[\'portal\'] # would normally be self.layer[\'portal\']\n-    >>> helpers.setRoles(portal, TEST_USER_ID, [\'Manager\'])\n-    >>> from OFS.Folder import Folder\n-    >>> portal._setObject(\'folder1\', Folder(\'folder1\'))\n-    \'folder1\'\n-\n-Note that we need to commit the transaction before it will show up in the\n-other thread.\n-\n-    >>> import transaction; transaction.commit()\n-\n-    >>> folder_path = portal.absolute_url_path() + \'/folder1\'\n-\n-    >>> import ftplib\n-    >>> ftpClient = ftplib.FTP()\n-    >>> ftpClient.connect(host, port, timeout=5)\n-    \'220 ... FTP server (...) ready.\'\n-\n-    >>> from plone.app.testing.interfaces import SITE_OWNER_NAME\n-    >>> from plone.app.testing.interfaces import SITE_OWNER_PASSWORD\n-\n-    >>> ftpClient.login(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-    \'230 Login successful.\'\n-\n-    >>> ftpClient.cwd(folder_path)\n-    \'250 CWD command successful.\'\n-\n-    >>> ftpClient.retrlines(\'LIST\')\n-    drwxrwx---   1 test_user_1_ Zope            0 ... .\n-    d---------   1 admin        Zope            0 ... ..\n-    \'226 Transfer complete\'\n-\n-    >>> ftpClient.quit()\n-    \'221 Goodbye.\'\n-\n-Test tear-down does nothing beyond what the base layers do.\n-\n-    >>> layers.PLONE_FTP_SERVER.testTearDown()\n-    >>> zserver.FTP_SERVER_FIXTURE.testTearDown()\n-    >>> layers.PLONE_FIXTURE.testTearDown()\n-    >>> zserver.STARTUP.testTearDown()\n-    >>> zca.LAYER_CLEANUP.testTearDown()\n-\n-    >>> \'portal\' in layers.PLONE_FTP_SERVER\n-    False\n-\n-    >>> \'app\' in layers.PLONE_FTP_SERVER\n-    False\n-\n-    >>> \'request\' in layers.PLONE_FTP_SERVER\n-    False\n-\n-    >>> import plone.testing.zserver\n-    >>> with helpers.ploneSite(flavour=plone.testing.zserver) as portal:\n-    ...     print(\'folder1\' in portal.objectIds())\n-    False\n-\n-When the server is torn down, the FTP server thread is stopped.\n-\n-    >>> runner.tear_down_unneeded(options, [], setupLayers, [])\n-    Tear down plone.app.testing.layers.Plone:FTPServer in ... seconds.\n-    Tear down plone.testing.zserver.FTPServer in ... seconds.\n-    Tear down plone.app.testing.layers.PloneZServerFixture in ... seconds.\n-    Tear down plone.testing.zserver.Startup in ... seconds.\n-    Tear down plone.testing.zca.LayerCleanup in ... seconds.\n-\n-    >>> ftpClient.connect(host, port, timeout=5) # doctest: +IGNORE_EXCEPTION_DETAIL\n-    Traceback (most recent call last):\n-    error: [Errno 61] Connection refused\ndiff --git a/src/plone/app/testing/tests.py b/src/plone/app/testing/tests.py\nindex fadf268..1c57762 100644\n--- a/src/plone/app/testing/tests.py\n+++ b/src/plone/app/testing/tests.py\n@@ -1,6 +1,5 @@\n import doctest\n import re\n-import six\n import unittest\n \n \n@@ -12,13 +11,6 @@ def dummy(context):\n     pass\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     suite = unittest.TestSuite()\n     # seltest = doctest.DocFileSuite(\'selenium.rst\', optionflags=OPTIONFLAGS)\n@@ -30,24 +22,15 @@ def test_suite():\n             doctest.DocFileSuite(\n                 "cleanup.rst",\n                 optionflags=OPTIONFLAGS,\n-                checker=Py23DocChecker(),\n             ),\n             doctest.DocFileSuite(\n                 "layers.rst",\n                 optionflags=OPTIONFLAGS,\n-                checker=Py23DocChecker(),\n             ),\n             doctest.DocFileSuite(\n                 "helpers.rst",\n                 optionflags=OPTIONFLAGS,\n-                checker=Py23DocChecker(),\n             ),\n         ]\n     )\n-    if six.PY2:\n-        suite.addTests(\n-            [\n-                doctest.DocFileSuite("layers_zserver.rst", optionflags=OPTIONFLAGS),\n-            ]\n-        )\n     return suite\n'

Repository: plone.app.testing


Branch: refs/heads/master
Date: 2023-04-08T20:16:49+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.testing/commit/a9b204f3d7aed0b251466e015383ea1521914ec8

chore: remove noqa comments

Files changed:
M setup.py
M src/plone/app/testing/__init__.py
M src/plone/app/testing/cleanup.py
M src/plone/app/testing/helpers.py
M src/plone/app/testing/layers.py

b'diff --git a/setup.py b/setup.py\nindex 34a2c81..c95662a 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -40,7 +40,7 @@ def read(*rnames):\n setup(\n     name="plone.app.testing",\n     version=version,\n-    description="Testing tools for Plone-the-application, based on plone.testing.",  # NOQA: E501\n+    description="Testing tools for Plone-the-application, based on plone.testing.",\n     long_description=long_description,\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\ndiff --git a/src/plone/app/testing/__init__.py b/src/plone/app/testing/__init__.py\nindex a903a8b..f2df943 100644\n--- a/src/plone/app/testing/__init__.py\n+++ b/src/plone/app/testing/__init__.py\n@@ -1,4 +1,3 @@\n-# flake8: NOQA: F401\n from plone.app.testing.cleanup import cleanUpMultiPlugins\n from plone.app.testing.helpers import applyProfile\n from plone.app.testing.helpers import login\ndiff --git a/src/plone/app/testing/cleanup.py b/src/plone/app/testing/cleanup.py\nindex 7fcfc1f..f91493c 100644\n--- a/src/plone/app/testing/cleanup.py\n+++ b/src/plone/app/testing/cleanup.py\n@@ -12,16 +12,15 @@\n \n # Make sure cleanup handlers from PAS are registered\n try:\n-    import Products.PluggableAuthService.zcml  # NOQA: F401\n+    import Products.PluggableAuthService.zcml\n except ImportError:\n     pass\n \n \n def cleanUpMultiPlugins():\n     try:\n-        from Products.PluggableAuthService.PluggableAuthService import (\n-            MultiPlugins,  # NOQA: E501\n-        )\n+        from Products.PluggableAuthService.PluggableAuthService import MultiPlugins\n+\n     except ImportError:\n         pass\n     else:\ndiff --git a/src/plone/app/testing/helpers.py b/src/plone/app/testing/helpers.py\nindex 6c9ddb8..1f71b27 100644\n--- a/src/plone/app/testing/helpers.py\n+++ b/src/plone/app/testing/helpers.py\n@@ -361,7 +361,7 @@ def setUp(self):\n \n                 security.pushCheckers()\n \n-                from Products.PluggableAuthService.PluggableAuthService import (  # noqa\n+                from Products.PluggableAuthService.PluggableAuthService import (\n                     MultiPlugins,\n                 )\n \ndiff --git a/src/plone/app/testing/layers.py b/src/plone/app/testing/layers.py\nindex 190ea7d..0c2f854 100644\n--- a/src/plone/app/testing/layers.py\n+++ b/src/plone/app/testing/layers.py\n@@ -365,9 +365,7 @@ def testSetUp(self):\n             registry = getUtility(IRegistry, context=portal)\n \n             if not registry["plone.email_from_address"]:\n-                portal._original_email_address = registry[\n-                    "plone.email_from_address"\n-                ]  # noqa: E501\n+                portal._original_email_address = registry["plone.email_from_address"]\n                 registry["plone.email_from_address"] = "noreply@example.com"\n \n             if not registry["plone.email_from_name"]:\n@@ -397,9 +395,7 @@ def testTearDown(self):\n                 delattr(portal, "_original_email_name")\n \n             if hasattr(portal, "_original_email_address"):\n-                registry[\n-                    "plone.email_from_address"\n-                ] = portal._original_email_address  # noqa: E501\n+                registry["plone.email_from_address"] = portal._original_email_address\n                 delattr(portal, "_original_email_address")\n \n             delattr(portal, "_original_MailHost")\n'

Repository: plone.app.testing


Branch: refs/heads/master
Date: 2023-04-08T20:16:49+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.testing/commit/631901623b6ae803d2b73c8a47153a7fd37d0e9d

chore: configure flake8

Files changed:
M setup.cfg

b'diff --git a/setup.cfg b/setup.cfg\nindex 0da8f8f..9624eb8 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -14,6 +14,8 @@ ignore =\n     E203,\n     # black takes care of spaces after commas\n     E231,\n+per-file-ignores =\n+    src/plone/app/testing/__init__.py:F401\n \n [check-manifest]\n ignore =\n'

Repository: plone.app.testing


Branch: refs/heads/master
Date: 2023-04-08T20:16:49+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.testing/commit/2d3f6eaf518d9756be0429ad3b19eb3b43021f0f

feat: flake8

Files changed:
M docs/conf.py
M src/plone/app/testing/cleanup.py
M src/plone/app/testing/tests.py

b'diff --git a/docs/conf.py b/docs/conf.py\nindex 08c106f..251236a 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -10,9 +10,6 @@\n # All configuration values have a default; values that are commented out\n # serve to show the default.\n \n-import os\n-import sys\n-\n \n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\ndiff --git a/src/plone/app/testing/cleanup.py b/src/plone/app/testing/cleanup.py\nindex f91493c..775be80 100644\n--- a/src/plone/app/testing/cleanup.py\n+++ b/src/plone/app/testing/cleanup.py\n@@ -12,7 +12,7 @@\n \n # Make sure cleanup handlers from PAS are registered\n try:\n-    import Products.PluggableAuthService.zcml\n+    import Products.PluggableAuthService.zcml  # noqa: F401\n except ImportError:\n     pass\n \ndiff --git a/src/plone/app/testing/tests.py b/src/plone/app/testing/tests.py\nindex 1c57762..8fbd5bb 100644\n--- a/src/plone/app/testing/tests.py\n+++ b/src/plone/app/testing/tests.py\n@@ -1,5 +1,4 @@\n import doctest\n-import re\n import unittest\n \n \n'

Repository: plone.app.testing


Branch: refs/heads/master
Date: 2023-04-08T20:16:49+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.testing/commit/c9061f1353afdc09dd4411333ac95121ada83aae

feat: codespell

Files changed:
M CHANGES.rst
M docs/isolation.rst
M src/plone/app/testing/helpers.py
M src/plone/app/testing/helpers.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 89f5890..69037b0 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -198,7 +198,7 @@ New features:\n \n Bug fixes:\n \n-- Amended the doctests to work with automatical layer port picking from plone.testing.\n+- Amended the doctests to work with automatically layer port picking from plone.testing.\n   [Rotonen]\n \n \n@@ -352,7 +352,7 @@ Fixes:\n   profile is applied (which installs the index to catalog). At the moment\n   CMFPlone therefore registers the index itself, but plone.app.folder\n   registers it too, which resulted in plone/Products.CMFPlone#313\n-  "GopipIndex registered twice" In tests the registration does not succedd,\n+  "GopipIndex registered twice" In tests the registration does not succeed,\n   because plone.app.folder was never initialized as z2 products. In order to\n   remove the misleading regisatration from CMFPlone we must take care that the\n   index is available, which is achieved with this change. Also minor pep8\ndiff --git a/docs/isolation.rst b/docs/isolation.rst\nindex fa93327..ec6dfa7 100644\n--- a/docs/isolation.rst\n+++ b/docs/isolation.rst\n@@ -2,7 +2,7 @@ Test Isolation is hard\n ======================\n \n At the moment, it is not possible to just run all tests at once.\n-Therfore we have an alltests script that groups tests together.\n+Therefore we have an alltests script that groups tests together.\n \n You may wonder, why and which tests need to be separated.\n \ndiff --git a/src/plone/app/testing/helpers.py b/src/plone/app/testing/helpers.py\nindex 1f71b27..0a0a319 100644\n--- a/src/plone/app/testing/helpers.py\n+++ b/src/plone/app/testing/helpers.py\n@@ -317,7 +317,7 @@ def tearDownPloneSite(self, portal):\n \n         Implementing this is optional. If the changes made during the\n         ``setUpPloneSite()`` method were confined to the ZODB and the global\n-        component regsitry, those changes will be torn down automatically.\n+        component registry, those changes will be torn down automatically.\n         """\n \n         pass\n@@ -327,7 +327,7 @@ def tearDownPloneSite(self, portal):\n     def setUp(self):\n         try:\n             # Push a new database storage so that database changes\n-            # commited during layer setup can be easily torn down\n+            # committed during layer setup can be easily torn down\n             self["zodbDB"] = zodb.stackDemoStorage(\n                 self.get("zodbDB"), name=self.__name__\n             )\ndiff --git a/src/plone/app/testing/helpers.rst b/src/plone/app/testing/helpers.rst\nindex 44368e1..f3c8841 100644\n--- a/src/plone/app/testing/helpers.rst\n+++ b/src/plone/app/testing/helpers.rst\n@@ -66,7 +66,7 @@ need to tear that down as well.\n     ...     def setUp(self):\n     ...\n     ...         # Push a new database storage so that database changes\n-    ...         # commited during layer setup can be easily torn down\n+    ...         # committed during layer setup can be easily torn down\n     ...         self[\'zodbDB\'] = zodb.stackDemoStorage(self.get(\'zodbDB\'), name=\'HelperDemos\')\n     ...\n     ...         # Push a new configuration context so that it\'s possible to re-import\n'

Repository: plone.app.testing


Branch: refs/heads/master
Date: 2023-04-08T20:16:49+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.testing/commit/3dc8a72d846e55db6af72be63f77db0cd5131a37

feat: remove wicked references

Files changed:
M src/plone/app/testing/layers.py

b'diff --git a/src/plone/app/testing/layers.py b/src/plone/app/testing/layers.py\nindex 0c2f854..e1eb75b 100644\n--- a/src/plone/app/testing/layers.py\n+++ b/src/plone/app/testing/layers.py\n@@ -181,15 +181,6 @@ def tearDownProducts(self, app):\n             if config.get("install", True):\n                 zope.uninstallProduct(app, p)\n \n-        # Clean up Wicked turds\n-        # XXX: This may tear down too much state\n-        try:\n-            from wicked.fieldevent import meta\n-\n-            meta.cleanUp()\n-        except ImportError:\n-            pass\n-\n     def setUpDefaultContent(self, app):\n         """Add the site owner user to the root user folder and log in as that\n         user. Create the Plone site, installing the extension profiles listed\n'

Repository: plone.app.testing


Branch: refs/heads/master
Date: 2023-04-08T20:16:49+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.testing/commit/bf99142e653a863901e3ccdc35298ac62031ae54

feat: configure z3c.dependencychecker

Files changed:
M pyproject.toml

b"diff --git a/pyproject.toml b/pyproject.toml\nindex 9eb73f3..3d26372 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -60,3 +60,4 @@ Zope = [\n   'Products.CMFDynamicViewFTI', 'zope.deprecation',\n ]\n python-dateutil = ['dateutil']\n+ignore-packages = ['decorator', 'robotframework-selenium2library', 'robotsuite', 'selenium']\n"

Repository: plone.app.testing


Branch: refs/heads/master
Date: 2023-04-08T20:16:49+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.testing/commit/50e4f996dfa677932fba49bc19ffe0ad54f58196

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex c95662a..ead96da 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -8,14 +8,11 @@\n \n tests_require = [\n     "plone.testing[test]",\n-    "Products.CMFCore",\n-    "Products.CMFPlacefulWorkflow",\n     "Products.CMFPlone",\n     "Products.PluggableAuthService",\n-    "selenium",\n+    "requests",\n     "transaction",\n     "zope.interface",\n-    "zope.publisher",\n     "zope.testing",\n     "zope.testrunner",\n     # XXX unspecified dependency of plone.app.upgrade XXX\n@@ -73,19 +70,22 @@ def read(*rnames):\n     zip_safe=False,\n     python_requires=">=3.7",\n     install_requires=[\n+        "Products.CMFPlone",\n+        "Products.GenericSetup",\n+        "Products.MailHost",\n+        "Products.PluggableAuthService",\n+        "Zope",\n+        "persistent",\n+        "plone.app.contenttypes",\n+        "plone.dexterity",\n+        "plone.memoize",\n+        "plone.registry",\n+        "plone.testing [zca,security,zodb,z2]",\n         "setuptools",\n         "zope.configuration",\n         "zope.component",\n         "zope.dottedname",\n         "zope.testing",\n-        "five.localsitemanager",\n-        "plone.memoize",\n-        "plone.testing [zca,security,zodb,z2]",\n-        # \'Acquisition\', # Zope 2.13+\n-        # \'AccessControl\', # Zope 2.13+\n-        "Products.CMFPlone",\n-        "Products.GenericSetup",\n-        "Zope",\n     ],\n     tests_require=tests_require,\n     extras_require={\n'

Repository: plone.app.testing


Branch: refs/heads/master
Date: 2023-04-10T03:11:01+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.testing/commit/3604ed8572f942f5a0b5eb103fb35dcc1551a477

Merge pull request #82 from plone/config-with-default-template-48453853

Config with default template

Files changed:
A .meta.toml
A .pre-commit-config.yaml
A news/434550cc.internal
M .editorconfig
M CHANGES.rst
M docs/conf.py
M docs/isolation.rst
M pyproject.toml
M setup.cfg
M setup.py
M src/plone/__init__.py
M src/plone/app/__init__.py
M src/plone/app/testing/__init__.py
M src/plone/app/testing/bbb.py
M src/plone/app/testing/cleanup.py
M src/plone/app/testing/helpers.py
M src/plone/app/testing/helpers.rst
M src/plone/app/testing/interfaces.py
M src/plone/app/testing/layers.py
M src/plone/app/testing/layers.rst
M src/plone/app/testing/profile/metadata.xml
M src/plone/app/testing/selenium_layers.py
M src/plone/app/testing/tests.py
M src/plone/app/testing/utils.py
M tox.ini
D .travis.yml
D bootstrap.py
D src/plone/app/testing/bbb_at.py
D src/plone/app/testing/layers_zserver.rst

b'diff --git a/.editorconfig b/.editorconfig\nindex 626f406..b4158b8 100644\n--- a/.editorconfig\n+++ b/.editorconfig\n@@ -1,3 +1,6 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n # EditorConfig Configuration file, for more details see:\n # http://EditorConfig.org\n # EditorConfig is a convention description, that could be interpreted\n@@ -25,7 +28,7 @@ max_line_length = off\n # 4 space indentation\n indent_size = 4\n \n-[*.{yml}]\n+[*.{yml,zpt,pt,dtml,zcml}]\n # 2 space indentation\n indent_size = 2\n \ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..4eda434\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "434550cc"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/.travis.yml b/.travis.yml\ndeleted file mode 100644\nindex e76161f..0000000\n--- a/.travis.yml\n+++ /dev/null\n@@ -1,37 +0,0 @@\n-language: python\n-sudo: false\n-dist: xenial\n-\n-matrix:\n-    include:\n-        - python: "2.7"\n-          env: TOXENV=lint-py27\n-        - python: "3.6"\n-          env: TOXENV=lint-py36\n-        - python: "3.7"\n-          env: TOXENV=lint-py37\n-        - python: "3.8"\n-          env: TOXENV=lint-py38\n-        - python: "2.7"\n-          env: TOXENV=py27\n-        - python: "3.6"\n-          env: TOXENV=py36\n-        - python: "3.7"\n-          env: TOXENV=py37\n-        - python: "3.8"\n-          env: TOXENV=py38\n-\n-install:\n-    - travis_retry pip install -U tox coveralls coverage\n-\n-script:\n-    - tox\n-\n-after_success:\n-    - coverage combine\n-    - coveralls\n-\n-notifications:\n-    email: false\n-cache:\n-    pip: true\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 89f5890..69037b0 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -198,7 +198,7 @@ New features:\n \n Bug fixes:\n \n-- Amended the doctests to work with automatical layer port picking from plone.testing.\n+- Amended the doctests to work with automatically layer port picking from plone.testing.\n   [Rotonen]\n \n \n@@ -352,7 +352,7 @@ Fixes:\n   profile is applied (which installs the index to catalog). At the moment\n   CMFPlone therefore registers the index itself, but plone.app.folder\n   registers it too, which resulted in plone/Products.CMFPlone#313\n-  "GopipIndex registered twice" In tests the registration does not succedd,\n+  "GopipIndex registered twice" In tests the registration does not succeed,\n   because plone.app.folder was never initialized as z2 products. In order to\n   remove the misleading regisatration from CMFPlone we must take care that the\n   index is available, which is achieved with this change. Also minor pep8\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex ed57894..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,178 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-tmpeggs = tempfile.mkdtemp()\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep \n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n-\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-\n-\n-options, args = parser.parse_args()\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    if options.allow_site_packages:\n-        import setuptools\n-        import pkg_resources\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions \n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'. \n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-cmd = [sys.executable, \'-c\',\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-requirement = \'zc.buildout\'\n-version = options.version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        for part in parsed_version:\n-            if (part[:1] == \'*\') and (part not in _final_parts):\n-                return False\n-        return True\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/docs/conf.py b/docs/conf.py\nindex ba460d1..251236a 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # plone.app.testing documentation build configuration file, created by\n # sphinx-quickstart on Sat Feb  9 11:31:41 2013.\n@@ -11,199 +10,203 @@\n # All configuration values have a default; values that are commented out\n # serve to show the default.\n \n-import sys, os\n \n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\n # documentation root, use os.path.abspath to make it absolute, like shown here.\n-#sys.path.insert(0, os.path.abspath(\'.\'))\n+# sys.path.insert(0, os.path.abspath(\'.\'))\n \n # -- General configuration -----------------------------------------------------\n \n # If your documentation needs a minimal Sphinx version, state it here.\n-#needs_sphinx = \'1.0\'\n+# needs_sphinx = \'1.0\'\n \n # Add any Sphinx extension module names here, as strings. They can be extensions\n # coming with Sphinx (named \'sphinx.ext.*\') or your custom ones.\n extensions = []\n \n # Add any paths that contain templates here, relative to this directory.\n-templates_path = [\'_templates\']\n+templates_path = ["_templates"]\n \n # The suffix of source filenames.\n-source_suffix = \'.rst\'\n+source_suffix = ".rst"\n \n # The encoding of source files.\n-#source_encoding = \'utf-8-sig\'\n+# source_encoding = \'utf-8-sig\'\n \n # The master toctree document.\n-master_doc = \'index\'\n+master_doc = "index"\n \n # General information about the project.\n-project = u\'plone.app.testing\'\n-copyright = u\'2018, Plone Foundation\'\n+project = "plone.app.testing"\n+copyright = "2018, Plone Foundation"\n \n # The version info for the project you\'re documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n # built documents.\n #\n # The short X.Y version.\n-version = \'5.0\'\n+version = "5.0"\n # The full version, including alpha/beta/rc tags.\n-release = \'5.0\'\n+release = "5.0"\n \n # The language for content autogenerated by Sphinx. Refer to documentation\n # for a list of supported languages.\n-#language = None\n+# language = None\n \n # There are two options for replacing |today|: either, you set today to some\n # non-false value, then it is used:\n-#today = \'\'\n+# today = \'\'\n # Else, today_fmt is used as the format for a strftime call.\n-#today_fmt = \'%B %d, %Y\'\n+# today_fmt = \'%B %d, %Y\'\n \n # List of patterns, relative to source directory, that match files and\n # directories to ignore when looking for source files.\n exclude_patterns = []\n \n # The reST default role (used for this markup: `text`) to use for all documents.\n-#default_role = None\n+# default_role = None\n \n # If true, \'()\' will be appended to :func: etc. cross-reference text.\n-#add_function_parentheses = True\n+# add_function_parentheses = True\n \n # If true, the current module name will be prepended to all description\n # unit titles (such as .. function::).\n-#add_module_names = True\n+# add_module_names = True\n \n # If true, sectionauthor and moduleauthor directives will be shown in the\n # output. They are ignored by default.\n-#show_authors = False\n+# show_authors = False\n \n # The name of the Pygments (syntax highlighting) style to use.\n-pygments_style = \'sphinx\'\n+pygments_style = "sphinx"\n \n # A list of ignored prefixes for module index sorting.\n-#modindex_common_prefix = []\n+# modindex_common_prefix = []\n \n \n # -- Options for HTML output ---------------------------------------------------\n \n # The theme to use for HTML and HTML Help pages.  See the documentation for\n # a list of builtin themes.\n-html_theme = \'default\'\n+html_theme = "default"\n \n # Theme options are theme-specific and customize the look and feel of a theme\n # further.  For a list of options available for each theme, see the\n # documentation.\n-#html_theme_options = {}\n+# html_theme_options = {}\n \n # Add any paths that contain custom themes here, relative to this directory.\n-#html_theme_path = []\n+# html_theme_path = []\n \n # The name for this set of Sphinx documents.  If None, it defaults to\n # "<project> v<release> documentation".\n-#html_title = None\n+# html_title = None\n \n # A shorter title for the navigation bar.  Default is the same as html_title.\n-#html_short_title = None\n+# html_short_title = None\n \n # The name of an image file (relative to this directory) to place at the top\n # of the sidebar.\n-#html_logo = None\n+# html_logo = None\n \n # The name of an image file (within the static path) to use as favicon of the\n # docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n # pixels large.\n-#html_favicon = None\n+# html_favicon = None\n \n # Add any paths that contain custom static files (such as style sheets) here,\n # relative to this directory. They are copied after the builtin static files,\n # so a file named "default.css" will overwrite the builtin "default.css".\n-html_static_path = [\'_static\']\n+html_static_path = ["_static"]\n \n # If not \'\', a \'Last updated on:\' timestamp is inserted at every page bottom,\n # using the given strftime format.\n-#html_last_updated_fmt = \'%b %d, %Y\'\n+# html_last_updated_fmt = \'%b %d, %Y\'\n \n # If true, SmartyPants will be used to convert quotes and dashes to\n # typographically correct entities.\n-#html_use_smartypants = True\n+# html_use_smartypants = True\n \n # Custom sidebar templates, maps document names to template names.\n-#html_sidebars = {}\n+# html_sidebars = {}\n \n # Additional templates that should be rendered to pages, maps page names to\n # template names.\n-#html_additional_pages = {}\n+# html_additional_pages = {}\n \n # If false, no module index is generated.\n-#html_domain_indices = True\n+# html_domain_indices = True\n \n # If false, no index is generated.\n-#html_use_index = True\n+# html_use_index = True\n \n # If true, the index is split into individual pages for each letter.\n-#html_split_index = False\n+# html_split_index = False\n \n # If true, links to the reST sources are added to the pages.\n-#html_show_sourcelink = True\n+# html_show_sourcelink = True\n \n # If true, "Created using Sphinx" is shown in the HTML footer. Default is True.\n-#html_show_sphinx = True\n+# html_show_sphinx = True\n \n # If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.\n-#html_show_copyright = True\n+# html_show_copyright = True\n \n # If true, an OpenSearch description file will be output, and all pages will\n # contain a <link> tag referring to it.  The value of this option must be the\n # base URL from which the finished HTML is served.\n-#html_use_opensearch = \'\'\n+# html_use_opensearch = \'\'\n \n # This is the file name suffix for HTML files (e.g. ".xhtml").\n-#html_file_suffix = None\n+# html_file_suffix = None\n \n # Output file base name for HTML help builder.\n-htmlhelp_basename = \'ploneapptestingdoc\'\n+htmlhelp_basename = "ploneapptestingdoc"\n \n \n # -- Options for LaTeX output --------------------------------------------------\n \n # The paper size (\'letter\' or \'a4\').\n-#latex_paper_size = \'letter\'\n+# latex_paper_size = \'letter\'\n \n # The font size (\'10pt\', \'11pt\' or \'12pt\').\n-#latex_font_size = \'10pt\'\n+# latex_font_size = \'10pt\'\n \n # Grouping the document tree into LaTeX files. List of tuples\n # (source start file, target name, title, author, documentclass [howto/manual]).\n latex_documents = [\n-  (\'index\', \'ploneapptesting.tex\', u\'plone.app.testing Documentation\',\n-   u\'Plone Foundation\', \'manual\'),\n+    (\n+        "index",\n+        "ploneapptesting.tex",\n+        "plone.app.testing Documentation",\n+        "Plone Foundation",\n+        "manual",\n+    ),\n ]\n \n # The name of an image file (relative to this directory) to place at the top of\n # the title page.\n-#latex_logo = None\n+# latex_logo = None\n \n # For "manual" documents, if this is true, then toplevel headings are parts,\n # not chapters.\n-#latex_use_parts = False\n+# latex_use_parts = False\n \n # If true, show page references after internal links.\n-#latex_show_pagerefs = False\n+# latex_show_pagerefs = False\n \n # If true, show URL addresses after external links.\n-#latex_show_urls = False\n+# latex_show_urls = False\n \n # Additional stuff for the LaTeX preamble.\n-#latex_preamble = \'\'\n+# latex_preamble = \'\'\n \n # Documents to append as an appendix to all manuals.\n-#latex_appendices = []\n+# latex_appendices = []\n \n # If false, no module index is generated.\n-#latex_domain_indices = True\n+# latex_domain_indices = True\n \n \n # -- Options for manual page output --------------------------------------------\n@@ -211,6 +214,11 @@\n # One entry per manual page. List of tuples\n # (source start file, name, description, authors, manual section).\n man_pages = [\n-    (\'index\', \'ploneapptesting\', u\'plone.app.testing Documentation\',\n-     [u\'Plone Foundation\'], 1)\n+    (\n+        "index",\n+        "ploneapptesting",\n+        "plone.app.testing Documentation",\n+        ["Plone Foundation"],\n+        1,\n+    )\n ]\ndiff --git a/docs/isolation.rst b/docs/isolation.rst\nindex fa93327..ec6dfa7 100644\n--- a/docs/isolation.rst\n+++ b/docs/isolation.rst\n@@ -2,7 +2,7 @@ Test Isolation is hard\n ======================\n \n At the moment, it is not possible to just run all tests at once.\n-Therfore we have an alltests script that groups tests together.\n+Therefore we have an alltests script that groups tests together.\n \n You may wonder, why and which tests need to be separated.\n \ndiff --git a/news/434550cc.internal b/news/434550cc.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/434550cc.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..3d26372 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,44 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\n+ignore-packages = [\'decorator\', \'robotframework-selenium2library\', \'robotsuite\', \'selenium\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 1371526..9624eb8 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,57 +1,25 @@\n-[build_sphinx]\n-source-dir = docs/source\n-build-dir  = _build/docs\n-all_files  = 1\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n \n-[upload_sphinx]\n-upload-dir = _build/docs/html\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+per-file-ignores =\n+    src/plone/app/testing/__init__.py:F401\n \n [check-manifest]\n ignore =\n-    bootstrap.py\n-    buildout.cfg\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n     tox.ini\n-\n-[coverage:run]\n-branch = True\n-\n-source =\n-    src\n-\n-omit =\n-\n-[coverage:report]\n-precision = 2\n-\n-[coverage:html]\n-directory = _build/reports/coverage\n-\n-\n-[isort]\n-# for details see\n-# http://docs.plone.org/develop/styleguide/python.html#grouping-and-sorting\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n-line_length = 200\n-not_skip = __init__.py\n-\n-[flake8]\n-exclude =\n-    bootstrap.py,\n-\n-include =\n-    src\n-\n-ignore =\n-    N801,\n-    N802,\n-    N803,\n-    N805,\n-    N806,\n-    N812,\n-    T000,\n-    T003,\n-\n-[bdist_wheel]\n-universal = 0\ndiff --git a/setup.py b/setup.py\nindex 89e7bc0..ead96da 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,33 +1,29 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n import os\n \n \n-version = \'7.0.1.dev0\'\n+version = "7.0.1.dev0"\n \n tests_require = [\n-    \'plone.testing[test]\',\n-    \'Products.CMFCore\',\n-    \'Products.CMFPlacefulWorkflow\',\n-    \'Products.CMFPlone\',\n-    \'Products.PluggableAuthService\',\n-    \'selenium\',\n-    \'transaction\',\n-    \'zope.interface\',\n-    \'zope.publisher\',\n-    \'zope.testing\',\n-    \'zope.testrunner\',\n+    "plone.testing[test]",\n+    "Products.CMFPlone",\n+    "Products.PluggableAuthService",\n+    "requests",\n+    "transaction",\n+    "zope.interface",\n+    "zope.testing",\n+    "zope.testrunner",\n     # XXX unspecified dependency of plone.app.upgrade XXX\n     # \'Products.ATContentTypes\',\n ]\n \n robot_require = [\n-    \'robotsuite>=1.4.0\',\n-    \'robotframework-selenium2library\',\n-    \'decorator\',\n-    \'selenium\',\n+    "robotsuite>=1.4.0",\n+    "robotframework-selenium2library",\n+    "decorator",\n+    "selenium",\n ]\n \n \n@@ -35,16 +31,13 @@ def read(*rnames):\n     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n \n \n-long_description = \\\n-    read(\'docs\', \'README.rst\') + \\\n-    \'\\n\\n\' +\\\n-    read(\'CHANGES.rst\')\n+long_description = read("docs", "README.rst") + "\\n\\n" + read("CHANGES.rst")\n \n \n setup(\n-    name=\'plone.app.testing\',\n+    name="plone.app.testing",\n     version=version,\n-    description="Testing tools for Plone-the-application, based on plone.testing.",  # NOQA: E501\n+    description="Testing tools for Plone-the-application, based on plone.testing.",\n     long_description=long_description,\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n@@ -65,36 +58,38 @@ def read(*rnames):\n         "Programming Language :: Python :: 3.11",\n         "Topic :: Internet :: WWW/HTTP :: Dynamic Content",\n     ],\n-    keywords=\'plone tests\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.testing\',\n-    license=\'GPL version 2\',\n-    packages=find_packages(\'src\'),\n-    package_dir={\'\': \'src\'},\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    keywords="plone tests",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.testing",\n+    license="GPL version 2",\n+    packages=find_packages("src"),\n+    package_dir={"": "src"},\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     python_requires=">=3.7",\n     install_requires=[\n-        \'setuptools\',\n-        \'six\',\n-        \'zope.configuration\',\n-        \'zope.component\',\n-        \'zope.dottedname\',\n-        \'zope.testing\',\n-        \'five.localsitemanager\',\n-        \'plone.memoize\',\n-        \'plone.testing [zca,security,zodb,z2]\',\n-        # \'Acquisition\', # Zope 2.13+\n-        # \'AccessControl\', # Zope 2.13+\n-        \'Products.CMFPlone\',\n-        \'Products.GenericSetup\',\n-        \'Zope\',\n+        "Products.CMFPlone",\n+        "Products.GenericSetup",\n+        "Products.MailHost",\n+        "Products.PluggableAuthService",\n+        "Zope",\n+        "persistent",\n+        "plone.app.contenttypes",\n+        "plone.dexterity",\n+        "plone.memoize",\n+        "plone.registry",\n+        "plone.testing [zca,security,zodb,z2]",\n+        "setuptools",\n+        "zope.configuration",\n+        "zope.component",\n+        "zope.dottedname",\n+        "zope.testing",\n     ],\n     tests_require=tests_require,\n     extras_require={\n-        \'test\': tests_require,\n-        \'robot\': robot_require,\n+        "test": tests_require,\n+        "robot": robot_require,\n     },\n )\ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/app/__init__.py b/src/plone/app/__init__.py\nindex 68c04af..5284146 100644\n--- a/src/plone/app/__init__.py\n+++ b/src/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/app/testing/__init__.py b/src/plone/app/testing/__init__.py\nindex 44bafc4..f2df943 100644\n--- a/src/plone/app/testing/__init__.py\n+++ b/src/plone/app/testing/__init__.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-# flake8: NOQA: F401\n from plone.app.testing.cleanup import cleanUpMultiPlugins\n from plone.app.testing.helpers import applyProfile\n from plone.app.testing.helpers import login\ndiff --git a/src/plone/app/testing/bbb.py b/src/plone/app/testing/bbb.py\nindex 3103192..f36f8c8 100644\n--- a/src/plone/app/testing/bbb.py\n+++ b/src/plone/app/testing/bbb.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Backwards-compatibility test class for PloneTestCase for Dexterity."""\n \n from AccessControl import getSecurityManager\n@@ -15,7 +14,7 @@ def _createMemberarea(portal, user_id):\n     mtool = portal.portal_membership\n     members = mtool.getMembersFolder()\n     if members is None:\n-        _createObjectByType(\'Folder\', portal, id=\'Members\')\n+        _createObjectByType("Folder", portal, id="Members")\n     if not mtool.getMemberareaCreationFlag():\n         mtool.setMemberareaCreationFlag()\n     mtool.createMemberArea(user_id)\n@@ -24,19 +23,19 @@ def _createMemberarea(portal, user_id):\n \n \n class PloneTestCaseFixture(testing.PloneSandboxLayer):\n-\n     defaultBases = (testing.PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         import plone.app.contenttypes\n+\n         self.loadZCML(package=plone.app.contenttypes)\n \n     def setUpPloneSite(self, portal):\n         # restore default workflow\n-        testing.applyProfile(portal, \'Products.CMFPlone:testfixture\')\n+        testing.applyProfile(portal, "Products.CMFPlone:testfixture")\n \n         # add default content\n-        testing.applyProfile(portal, \'plone.app.contenttypes:plone-content\')\n+        testing.applyProfile(portal, "plone.app.contenttypes:plone-content")\n \n         # add home folder for default test user\n         _createMemberarea(portal, testing.TEST_USER_ID)\n@@ -44,20 +43,19 @@ def setUpPloneSite(self, portal):\n \n PTC_FIXTURE = PloneTestCaseFixture()\n PTC_FUNCTIONAL_TESTING = testing.FunctionalTesting(\n-    bases=(PTC_FIXTURE,), name=\'PloneTestCase:Functional\')\n+    bases=(PTC_FIXTURE,), name="PloneTestCase:Functional"\n+)\n \n \n class PloneTestCase(Functional, unittest.TestCase):\n-\n     layer = PTC_FUNCTIONAL_TESTING\n \n     def setUp(self):\n         """Set up before each test."""\n         self.beforeSetUp()\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.folder = self.portal.portal_membership.getHomeFolder(\n-            testing.TEST_USER_ID)\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.folder = self.portal.portal_membership.getHomeFolder(testing.TEST_USER_ID)\n         transaction.commit()\n         self.afterSetUp()\n \n@@ -72,7 +70,7 @@ def tearDown(self):\n         """Tear down after each test."""\n         self.beforeTearDown()\n         transaction.abort()\n-        super(PloneTestCase, self).tearDown()\n+        super().tearDown()\n         self.afterTearDown()\n \n     def beforeTearDown(self):\n@@ -86,14 +84,14 @@ def setRoles(self, roles, name=testing.TEST_USER_ID):\n         testing.setRoles(self.portal, name, roles)\n \n     def setGroups(self, groups, name=testing.TEST_USER_ID):\n-        \'\'\'Changes the user\'s groups.\'\'\'\n-        uf = self.portal[\'acl_users\']\n+        """Changes the user\'s groups."""\n+        uf = self.portal["acl_users"]\n         uf.userSetGroups(name, list(groups))\n         user = getSecurityManager().getUser()\n         if name == user.getId():\n             self.login(user.getUserName())\n \n-    def setPermissions(self, permissions, role=\'Member\'):\n+    def setPermissions(self, permissions, role="Member"):\n         """Changes the permissions assigned to role."""\n         self.portal.manage_role(role, list(permissions))\n \n@@ -103,7 +101,7 @@ def login(self, userName=testing.TEST_USER_NAME):\n \n     def loginAsPortalOwner(self, userName=testing.SITE_OWNER_NAME):\n         """Log in to the portal as the user who created it."""\n-        zope.login(self.app[\'acl_users\'], userName)\n+        zope.login(self.app["acl_users"], userName)\n \n     def logout(self):\n         """Log out, i.e. become anonymous."""\ndiff --git a/src/plone/app/testing/bbb_at.py b/src/plone/app/testing/bbb_at.py\ndeleted file mode 100644\nindex fb5b36a..0000000\n--- a/src/plone/app/testing/bbb_at.py\n+++ /dev/null\n@@ -1,144 +0,0 @@\n-# -*- coding: utf-8 -*-\n-"""Backwards-compatibility test class for PloneTestCase for Archetypes."""\n-\n-from AccessControl import getSecurityManager\n-from plone.app import testing\n-from plone.testing import z2\n-from Products.CMFPlone.utils import _createObjectByType\n-from Testing.ZopeTestCase.functional import Functional\n-\n-import transaction\n-import unittest\n-\n-\n-try:\n-    import Products.Archetypes  # noqa: F401\n-except ImportError:\n-    HAS_AT = False\n-else:\n-    HAS_AT = True\n-\n-\n-def _createMemberarea(portal, user_id):\n-    mtool = portal.portal_membership\n-    members = mtool.getMembersFolder()\n-    if members is None:\n-        _createObjectByType(\'Folder\', portal, id=\'Members\')\n-    if not mtool.getMemberareaCreationFlag():\n-        mtool.setMemberareaCreationFlag()\n-    mtool.createMemberArea(user_id)\n-    if mtool.getMemberareaCreationFlag():\n-        mtool.setMemberareaCreationFlag()\n-\n-\n-class PloneTestCaseFixture(testing.PloneSandboxLayer):\n-\n-    defaultBases = (testing.PLONE_FIXTURE,)\n-\n-    def setUpZope(self, app, configurationContext):\n-        if not HAS_AT:\n-            return\n-\n-        import Products.ATContentTypes\n-        self.loadZCML(package=Products.ATContentTypes)\n-\n-        z2.installProduct(app, \'Products.Archetypes\')\n-        z2.installProduct(app, \'Products.ATContentTypes\')\n-        z2.installProduct(app, \'plone.app.blob\')\n-        z2.installProduct(app, \'plone.app.collection\')\n-\n-    def setUpPloneSite(self, portal):\n-        if not HAS_AT:\n-            return\n-\n-        # restore default workflow\n-        testing.applyProfile(portal, \'Products.CMFPlone:testfixture\')\n-\n-        # add default content\n-        testing.applyProfile(portal, \'Products.ATContentTypes:content\')\n-\n-        # add home folder for default test user\n-        _createMemberarea(portal, testing.TEST_USER_ID)\n-\n-    def tearDownZope(self, app):\n-        if not HAS_AT:\n-            return\n-\n-        z2.uninstallProduct(app, \'plone.app.collection\')\n-        z2.uninstallProduct(app, \'plone.app.blob\')\n-        z2.uninstallProduct(app, \'Products.ATContentTypes\')\n-        z2.uninstallProduct(app, \'Products.Archetypes\')\n-\n-\n-PTC_FIXTURE = PloneTestCaseFixture()\n-PTC_FUNCTIONAL_TESTING = testing.FunctionalTesting(\n-    bases=(PTC_FIXTURE,), name=\'PloneTestCase:Functional\')\n-\n-\n-class PloneTestCase(Functional, unittest.TestCase):\n-\n-    layer = PTC_FUNCTIONAL_TESTING\n-\n-    def setUp(self):\n-        """Set up before each test."""\n-        if not HAS_AT:\n-            raise unittest.SkipTest(\'PloneTestCase requires Archetypes\')\n-        self.beforeSetUp()\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.folder = self.portal.portal_membership.getHomeFolder(\n-            testing.TEST_USER_ID)\n-        transaction.commit()\n-        self.afterSetUp()\n-\n-    def beforeSetUp(self):\n-        """Hook to do setup before the portal is created."""\n-        pass\n-\n-    def afterSetUp(self):\n-        """Hook to do setup after the portal is created."""\n-\n-    def tearDown(self):\n-        """Tear down after each test."""\n-        self.beforeTearDown()\n-        transaction.abort()\n-        super(PloneTestCase, self).tearDown()\n-        self.afterTearDown()\n-\n-    def beforeTearDown(self):\n-        """Hook to do teardown before the portal is removed."""\n-\n-    def afterTearDown(self):\n-        """Hook to do teardown after the portal is removed."""\n-\n-    def setRoles(self, roles, name=testing.TEST_USER_ID):\n-        """Set the effective roles of a user."""\n-        testing.setRoles(self.portal, name, roles)\n-\n-    def setGroups(self, groups, name=testing.TEST_USER_ID):\n-        \'\'\'Changes the user\'s groups.\'\'\'\n-        uf = self.portal[\'acl_users\']\n-        uf.userSetGroups(name, list(groups))\n-        user = getSecurityManager().getUser()\n-        if name == user.getId():\n-            self.login(user.getUserName())\n-\n-    def setPermissions(self, permissions, role=\'Member\'):\n-        """Changes the permissions assigned to role."""\n-        self.portal.manage_role(role, list(permissions))\n-\n-    def login(self, userName=testing.TEST_USER_NAME):\n-        """Log in to the portal as the given user."""\n-        testing.login(self.portal, userName)\n-\n-    def loginAsPortalOwner(self, userName=testing.SITE_OWNER_NAME):\n-        """Log in to the portal as the user who created it."""\n-        z2.login(self.app[\'acl_users\'], userName)\n-\n-    def logout(self):\n-        """Log out, i.e. become anonymous."""\n-        testing.logout()\n-\n-    def createMemberarea(self, name):\n-        """Create a minimal memberarea."""\n-        _createMemberarea(self.portal, name)\ndiff --git a/src/plone/app/testing/cleanup.py b/src/plone/app/testing/cleanup.py\nindex b6eaeca..775be80 100644\n--- a/src/plone/app/testing/cleanup.py\n+++ b/src/plone/app/testing/cleanup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Cleanup handlers for various global registries\n """\n \n@@ -13,22 +12,23 @@\n \n # Make sure cleanup handlers from PAS are registered\n try:\n-    import Products.PluggableAuthService.zcml  # NOQA: F401\n+    import Products.PluggableAuthService.zcml  # noqa: F401\n except ImportError:\n     pass\n \n \n def cleanUpMultiPlugins():\n     try:\n-        from Products.PluggableAuthService.PluggableAuthService import MultiPlugins  # NOQA: E501\n+        from Products.PluggableAuthService.PluggableAuthService import MultiPlugins\n+\n     except ImportError:\n         pass\n     else:\n-\n         zap = []\n \n         # Don\'t stomp on the things the other cleanup handler will deal with\n         from Products.PluggableAuthService import zcml\n+\n         for plugin in MultiPlugins:\n             if plugin not in zcml._mt_regs:\n                 zap.append(plugin)\ndiff --git a/src/plone/app/testing/helpers.py b/src/plone/app/testing/helpers.py\nindex 1d801fa..0a0a319 100644\n--- a/src/plone/app/testing/helpers.py\n+++ b/src/plone/app/testing/helpers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Helper functions for Plone testing. Also importable from plone.app.testing\n # directly\n \n@@ -24,24 +23,21 @@\n \n \n def login(portal, userName):\n-    """Log in as the given user in the given Plone site\n-    """\n+    """Log in as the given user in the given Plone site"""\n \n-    zope.login(portal[\'acl_users\'], userName)\n+    zope.login(portal["acl_users"], userName)\n \n \n def logout():\n-    """Log out, i.e. become anonymous\n-    """\n+    """Log out, i.e. become anonymous"""\n \n     zope.logout()\n \n \n def setRoles(portal, userId, roles):\n-    """Set the given user\'s roles to a tuple of roles.\n-    """\n+    """Set the given user\'s roles to a tuple of roles."""\n \n-    userFolder = portal[\'acl_users\']\n+    userFolder = portal["acl_users"]\n     zope.setRoles(userFolder, userId, roles)\n \n \n@@ -75,14 +71,14 @@ def quickInstallProduct(portal, productName, reinstall=False):\n     is installed already.\n     """\n \n-    from Acquisition import aq_parent\n     from AccessControl import getSecurityManager\n     from AccessControl.SecurityManagement import setSecurityManager\n+    from Acquisition import aq_parent\n \n     sm = getSecurityManager()\n     app = aq_parent(portal)\n \n-    zope.login(app[\'acl_users\'], SITE_OWNER_NAME)\n+    zope.login(app["acl_users"], SITE_OWNER_NAME)\n \n     from Products.CMFPlone.utils import get_installer\n \n@@ -102,31 +98,37 @@ def quickInstallProduct(portal, productName, reinstall=False):\n         setSecurityManager(sm)\n \n \n-def applyProfile(portal, profileName, purge_old=None,\n-                 ignore_dependencies=False, archive=None,\n-                 blacklisted_steps=None):\n+def applyProfile(\n+    portal,\n+    profileName,\n+    purge_old=None,\n+    ignore_dependencies=False,\n+    archive=None,\n+    blacklisted_steps=None,\n+):\n     """Install an extension profile into the portal. The profile name\n     should be a package name and a profile name, e.g. \'my.product:default\'.\n     """\n \n-    from Acquisition import aq_parent\n     from AccessControl import getSecurityManager\n     from AccessControl.SecurityManagement import setSecurityManager\n+    from Acquisition import aq_parent\n \n     sm = getSecurityManager()\n     app = aq_parent(portal)\n \n-    zope.login(app[\'acl_users\'], SITE_OWNER_NAME)\n+    zope.login(app["acl_users"], SITE_OWNER_NAME)\n \n     try:\n-        setupTool = portal[\'portal_setup\']\n-        profileId = \'profile-{0}\'.format(profileName)\n+        setupTool = portal["portal_setup"]\n+        profileId = f"profile-{profileName}"\n         setupTool.runAllImportStepsFromProfile(\n             profileId,\n             purge_old=purge_old,\n             ignore_dependencies=ignore_dependencies,\n             archive=archive,\n-            blacklisted_steps=blacklisted_steps)\n+            blacklisted_steps=blacklisted_steps,\n+        )\n \n         portal.clearCurrentSkin()\n         portal.setupCurrentSkin(portal.REQUEST)\n@@ -158,7 +160,7 @@ def pushGlobalRegistry(portal, new=None, name=None):\n     current = zca.pushGlobalRegistry(new=new)\n \n     if current not in localSiteManager.__bases__:\n-        localSiteManager.__bases__ = (current, )\n+        localSiteManager.__bases__ = (current,)\n \n     if site is not None:\n         setHooks()\n@@ -216,6 +218,7 @@ def persist_profile_upgrade_versions(portal):\n     mapping.  Call this once in layer setup and you have easy rollback.\n     """\n     from persistent.mapping import PersistentMapping\n+\n     puv = portal.portal_setup._profile_upgrade_versions\n     if isinstance(puv, PersistentMapping):\n         return\n@@ -245,7 +248,7 @@ def ploneSite(db=None, connection=None, environ=None, flavour=zope):\n     setHooks()\n     site = getSite()\n \n-    with getattr(flavour, \'zopeApp\')(db, connection, environ) as app:\n+    with getattr(flavour, "zopeApp")(db, connection, environ) as app:\n         portal = app[PLONE_SITE_ID]\n \n         setSite(portal)\n@@ -273,7 +276,7 @@ class PloneSandboxLayer(Layer):\n \n     # The default list of bases.\n \n-    defaultBases = (layers.PLONE_FIXTURE, )\n+    defaultBases = (layers.PLONE_FIXTURE,)\n \n     # Hooks\n \n@@ -314,7 +317,7 @@ def tearDownPloneSite(self, portal):\n \n         Implementing this is optional. If the changes made during the\n         ``setUpPloneSite()`` method were confined to the ZODB and the global\n-        component regsitry, those changes will be torn down automatically.\n+        component registry, those changes will be torn down automatically.\n         """\n \n         pass\n@@ -324,17 +327,20 @@ def tearDownPloneSite(self, portal):\n     def setUp(self):\n         try:\n             # Push a new database storage so that database changes\n-            # commited during layer setup can be easily torn down\n-            self[\'zodbDB\'] = zodb.stackDemoStorage(self.get(\'zodbDB\'),\n-                                                   name=self.__name__)\n+            # committed during layer setup can be easily torn down\n+            self["zodbDB"] = zodb.stackDemoStorage(\n+                self.get("zodbDB"), name=self.__name__\n+            )\n \n             # Push a new configuration context so that it\'s possible to\n             # re-import ZCML files after tear-down\n-            name = self.__name__ if self.__name__ is not None else \'not-named\'\n-            contextName = \'PloneSandboxLayer-{0}\'.format(name)\n-            self[\'configurationContext\'] = configurationContext = (\n-                zca.stackConfigurationContext(self.get(\'configurationContext\'),\n-                                              name=contextName))\n+            name = self.__name__ if self.__name__ is not None else "not-named"\n+            contextName = f"PloneSandboxLayer-{name}"\n+            self[\n+                "configurationContext"\n+            ] = configurationContext = zca.stackConfigurationContext(\n+                self.get("configurationContext"), name=contextName\n+            )\n \n             with ploneSite() as portal:\n                 setHooks()\n@@ -355,7 +361,9 @@ def setUp(self):\n \n                 security.pushCheckers()\n \n-                from Products.PluggableAuthService.PluggableAuthService import MultiPlugins  # noqa\n+                from Products.PluggableAuthService.PluggableAuthService import (\n+                    MultiPlugins,\n+                )\n \n                 preSetupMultiPlugins = MultiPlugins[:]\n \n@@ -373,15 +381,13 @@ def setUp(self):\n             # Keep track of PAS plugins that were added during setup\n             self.snapshotMultiPlugins(preSetupMultiPlugins)\n         except Exception:\n-            del self[\'configurationContext\']\n-            self[\'zodbDB\'].close()\n-            del self[\'zodbDB\']\n+            del self["configurationContext"]\n+            self["zodbDB"].close()\n+            del self["zodbDB"]\n             raise\n \n     def tearDown(self):\n-\n         with zope.zopeApp() as app:\n-\n             portal = app[PLONE_SITE_ID]\n             setHooks()\n             setSite(portal)\n@@ -410,23 +416,34 @@ def tearDown(self):\n             self.tearDownZope(app)\n \n         # Zap the configuration context\n-        del self[\'configurationContext\']\n+        del self["configurationContext"]\n \n         # Pop the demo storage, thus restoring the database to the\n         # previous state\n-        self[\'zodbDB\'].close()\n-        del self[\'zodbDB\']\n+        self["zodbDB"].close()\n+        del self["zodbDB"]\n \n     # Helpers\n-    def applyProfile(self, portal, profileName, purge_old=None,\n-                     ignore_dependencies=False, archive=None,\n-                     blacklisted_steps=None):\n-        return applyProfile(portal, profileName, purge_old,\n-                            ignore_dependencies, archive,\n-                            blacklisted_steps)\n-\n-    def loadZCML(self, name=\'configure.zcml\', **kw):\n-        kw.setdefault(\'context\', self[\'configurationContext\'])\n+    def applyProfile(\n+        self,\n+        portal,\n+        profileName,\n+        purge_old=None,\n+        ignore_dependencies=False,\n+        archive=None,\n+        blacklisted_steps=None,\n+    ):\n+        return applyProfile(\n+            portal,\n+            profileName,\n+            purge_old,\n+            ignore_dependencies,\n+            archive,\n+            blacklisted_steps,\n+        )\n+\n+    def loadZCML(self, name="configure.zcml", **kw):\n+        kw.setdefault("context", self["configurationContext"])\n         return xmlconfig.file(name, **kw)\n \n     def snapshotMultiPlugins(self, preSetupMultiPlugins):\n@@ -436,9 +453,7 @@ def snapshotMultiPlugins(self, preSetupMultiPlugins):\n \n         self._addedMultiPlugins = set()\n \n-        from Products.PluggableAuthService.PluggableAuthService import (\n-            MultiPlugins\n-        )\n+        from Products.PluggableAuthService.PluggableAuthService import MultiPlugins\n \n         for plugin in MultiPlugins:\n             if plugin not in preSetupMultiPlugins:\n@@ -455,10 +470,11 @@ def tearDownMultiPlugins(self):\n     def snapshotGeneratedSchemas(self):\n         """Save a snapshot of the plone.dexterity.schema.generated module"""\n         from plone.dexterity.schema import generated\n+\n         self._generatedSchemas = generated.__dict__.copy()\n         todelete = []\n         for k in generated.__dict__:\n-            if not k.startswith(\'_\'):\n+            if not k.startswith("_"):\n                 todelete.append(k)\n         for k in todelete:\n             del generated.__dict__[k]\n@@ -466,16 +482,23 @@ def snapshotGeneratedSchemas(self):\n     def tearDownGeneratedSchemas(self):\n         """Reset plone.dexterity.schema.generated to its previous state"""\n         from plone.dexterity.schema import generated\n+\n         generated.__dict__.clear()\n         generated.__dict__.update(self._generatedSchemas)\n \n \n class PloneWithPackageLayer(PloneSandboxLayer):\n-\n-    def __init__(self, bases=None, name=None, module=None, zcml_filename=None,\n-                 zcml_package=None, gs_profile_id=None,\n-                 additional_z2_products=()):\n-        super(PloneWithPackageLayer, self).__init__(bases, name, module)\n+    def __init__(\n+        self,\n+        bases=None,\n+        name=None,\n+        module=None,\n+        zcml_filename=None,\n+        zcml_package=None,\n+        gs_profile_id=None,\n+        additional_z2_products=(),\n+    ):\n+        super().__init__(bases, name, module)\n         self.zcml_filename = zcml_filename\n         self.zcml_package = zcml_package\n         self.gs_profile_id = gs_profile_id\n@@ -496,11 +519,10 @@ def setUpZCMLFiles(self):\n         Can be overridden to load more ZCML.\n         """\n         if self.zcml_filename is None:\n-            raise ValueError(\'ZCML file name has not been provided.\')\n+            raise ValueError("ZCML file name has not been provided.")\n         if self.zcml_package is None:\n             raise ValueError(\n-                \'The package that contains the ZCML file \'\n-                \'has not been provided.\'\n+                "The package that contains the ZCML file " "has not been provided."\n             )\n         self.loadZCML(self.zcml_filename, package=self.zcml_package)\n \ndiff --git a/src/plone/app/testing/helpers.rst b/src/plone/app/testing/helpers.rst\nindex 44368e1..f3c8841 100644\n--- a/src/plone/app/testing/helpers.rst\n+++ b/src/plone/app/testing/helpers.rst\n@@ -66,7 +66,7 @@ need to tear that down as well.\n     ...     def setUp(self):\n     ...\n     ...         # Push a new database storage so that database changes\n-    ...         # commited during layer setup can be easily torn down\n+    ...         # committed during layer setup can be easily torn down\n     ...         self[\'zodbDB\'] = zodb.stackDemoStorage(self.get(\'zodbDB\'), name=\'HelperDemos\')\n     ...\n     ...         # Push a new configuration context so that it\'s possible to re-import\ndiff --git a/src/plone/app/testing/interfaces.py b/src/plone/app/testing/interfaces.py\nindex aafdac2..bd28479 100644\n--- a/src/plone/app/testing/interfaces.py\n+++ b/src/plone/app/testing/interfaces.py\n@@ -1,17 +1,18 @@\n-# -*- coding: utf-8 -*-\n # Constants for names used in layer setup - also importable from\n # plone.app.testing directly\n \n-PLONE_SITE_ID = \'plone\'\n-PLONE_SITE_TITLE = u\'Plone site\'\n-DEFAULT_LANGUAGE = \'en\'\n+PLONE_SITE_ID = "plone"\n+PLONE_SITE_TITLE = "Plone site"\n+DEFAULT_LANGUAGE = "en"\n \n-TEST_USER_NAME = \'test-user\'\n-TEST_USER_ID = \'test_user_1_\'\n-TEST_USER_PASSWORD = \'correct horse battery staple\'\n-TEST_USER_ROLES = [\'Member\', ]\n+TEST_USER_NAME = "test-user"\n+TEST_USER_ID = "test_user_1_"\n+TEST_USER_PASSWORD = "correct horse battery staple"\n+TEST_USER_ROLES = [\n+    "Member",\n+]\n \n-SITE_OWNER_NAME = \'admin\'\n-SITE_OWNER_PASSWORD = \'secret\'\n+SITE_OWNER_NAME = "admin"\n+SITE_OWNER_PASSWORD = "secret"\n \n ROBOT_TEST_LEVEL = 5\ndiff --git a/src/plone/app/testing/layers.py b/src/plone/app/testing/layers.py\nindex 3628082..e1eb75b 100644\n--- a/src/plone/app/testing/layers.py\n+++ b/src/plone/app/testing/layers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Layers setting up fixtures with a Plone site. Also importable from\n # plone.app.testing directly\n \n@@ -27,7 +26,6 @@\n from zope.event import notify\n from zope.traversing.interfaces import BeforeTraverseEvent\n \n-import six\n import transaction\n \n \n@@ -45,61 +43,40 @@ class PloneFixture(Layer):\n \n     # Products that will be installed, plus options\n     products = (\n-        (\'Products.GenericSetup\', {\'loadZCML\': True}, ),\n-        (\'Products.DCWorkflow\', {\'loadZCML\': True}, ),\n-        (\'Products.ZCTextIndex\', {\'loadZCML\': True}, ),\n-        (\'Products.DateRecurringIndex\', {\'loadZCML\': False}, ),\n-        (\'Products.PageTemplates\', {\'loadZCML\': True}, ),\n-        (\'Products.CMFUid\', {\'loadZCML\': True}, ),\n-        (\'Products.CMFCore\', {\'loadZCML\': True}, ),\n-        (\'Products.PluggableAuthService\', {\'loadZCML\': True}, ),\n-        (\'Products.PluginRegistry\', {\'loadZCML\': True}, ),\n-        (\'Products.PlonePAS\', {\'loadZCML\': True}, ),\n+        ("Products.GenericSetup", {"loadZCML": True}),\n+        ("Products.DCWorkflow", {"loadZCML": True}),\n+        ("Products.ZCTextIndex", {"loadZCML": True}),\n+        ("Products.DateRecurringIndex", {"loadZCML": False}),\n+        ("Products.PageTemplates", {"loadZCML": True}),\n+        ("Products.CMFUid", {"loadZCML": True}),\n+        ("Products.CMFCore", {"loadZCML": True}),\n+        ("Products.PluggableAuthService", {"loadZCML": True}),\n+        ("Products.PluginRegistry", {"loadZCML": True}),\n+        ("Products.PlonePAS", {"loadZCML": True}),\n         # product for Plone 5.2 only, be silent when not available on Plone 6:\n-        (\'Products.CMFFormController\', {\'loadZCML\': True, \'silent\': True}, ),\n-        (\'Products.CMFDynamicViewFTI\', {\'loadZCML\': True}, ),\n-        (\'Products.CMFPlacefulWorkflow\', {\'loadZCML\': True}, ),\n-        (\'Products.MimetypesRegistry\', {\'loadZCML\': True}, ),\n-        (\'Products.PortalTransforms\', {\'loadZCML\': True}, ),\n-        (\'Products.ExtendedPathIndex\', {\'loadZCML\': True}, ),\n-        (\'Products.SiteAccess\', {\'loadZCML\': False}, ),\n-        (\'Products.CMFEditions\', {\'loadZCML\': True}, ),\n-        (\'Products.CMFDiffTool\', {\'loadZCML\': True}, ),\n-        (\'plone.i18n\', {\'loadZCML\': True, \'install\': False}, ),\n-        (\'plonetheme.barceloneta\', {\'loadZCML\': True, \'install\': False}, ),\n-        (\'Products.CMFPlone\', {\'loadZCML\': True}, ),\n-        (\'Products.PythonScripts\', {\'loadZCML\': False}, ),\n+        ("Products.CMFFormController", {"loadZCML": True, "silent": True}),\n+        ("Products.CMFDynamicViewFTI", {"loadZCML": True}),\n+        ("Products.CMFPlacefulWorkflow", {"loadZCML": True}),\n+        ("Products.MimetypesRegistry", {"loadZCML": True}),\n+        ("Products.PortalTransforms", {"loadZCML": True}),\n+        ("Products.ExtendedPathIndex", {"loadZCML": True}),\n+        ("Products.SiteAccess", {"loadZCML": False}),\n+        ("Products.CMFEditions", {"loadZCML": True}),\n+        ("Products.CMFDiffTool", {"loadZCML": True}),\n+        ("plone.i18n", {"loadZCML": True, "install": False}),\n+        ("plonetheme.barceloneta", {"loadZCML": True, "install": False}),\n+        ("Products.CMFPlone", {"loadZCML": True}),\n+        ("Products.PythonScripts", {"loadZCML": False}),\n     )\n-    if six.PY2:\n-        products += (\n-            (\'Products.ExternalEditor\', {\'loadZCML\': True}, ),\n-        )\n-\n-        try:\n-            # Since gopipindex moved to plone.folder only with Archetypes\n-            import plone.app.folder\n-            # Prevent trying to load plone.app.folder if it is a module alias\n-            if hasattr(plone.app.folder, "__file__"):\n-                products += (\n-                    (\'plone.app.folder\', {\'loadZCML\': True}, ),\n-                )\n-        except ImportError:\n-            pass\n \n     # Extension profiles to be installed with site setup\n-    extensionProfiles = (\n-        \'plonetheme.barceloneta:default\',\n-    )\n+    extensionProfiles = ("plonetheme.barceloneta:default",)\n \n     # Layer lifecycle\n \n     def setUp(self):\n-\n         # Stack a new DemoStorage on top of the one from zope.STARTUP.\n-        self[\'zodbDB\'] = zodb.stackDemoStorage(\n-            self.get(\'zodbDB\'),\n-            name=\'PloneFixture\'\n-        )\n+        self["zodbDB"] = zodb.stackDemoStorage(self.get("zodbDB"), name="PloneFixture")\n \n         self.setUpZCML()\n \n@@ -112,7 +89,6 @@ def setUp(self):\n             transaction.savepoint(optimistic=True)\n \n     def tearDown(self):\n-\n         # Tear down products\n         with zope.zopeApp() as app:\n             # note: content tear-down happens by squashing the ZODB\n@@ -121,8 +97,8 @@ def tearDown(self):\n         self.tearDownZCML()\n \n         # Zap the stacked ZODB\n-        self[\'zodbDB\'].close()\n-        del self[\'zodbDB\']\n+        self["zodbDB"].close()\n+        del self["zodbDB"]\n \n     def setUpZCML(self):\n         """Stack a new global registry and load ZCML configuration of Plone\n@@ -135,25 +111,29 @@ def setUpZCML(self):\n         zca.pushGlobalRegistry()\n \n         from zope.configuration import xmlconfig\n-        self[\'configurationContext\'] = context = zca.stackConfigurationContext(\n-            self.get(\'configurationContext\')\n+\n+        self["configurationContext"] = context = zca.stackConfigurationContext(\n+            self.get("configurationContext")\n         )\n \n         # Turn off z3c.autoinclude\n \n-        xmlconfig.string("""\\\n+        xmlconfig.string(\n+            """\\\n <configure xmlns="http://namespaces.zope.org/zope"\n            xmlns:meta="http://namespaces.zope.org/meta">\n     <meta:provides feature="disable-autoinclude" />\n </configure>\n-""", context=context)\n+""",\n+            context=context,\n+        )\n \n         # Load dependent products\'s ZCML - Plone doesn\'t specify dependencies\n         # on Products.* packages fully\n \n         def loadAll(filename):\n             for p, config in self.products:\n-                if not config[\'loadZCML\']:\n+                if not config["loadZCML"]:\n                     continue\n                 try:\n                     package = resolve(p)\n@@ -161,12 +141,12 @@ def loadAll(filename):\n                     continue\n                 try:\n                     xmlconfig.file(filename, package, context=context)\n-                except IOError:\n+                except OSError:\n                     pass\n \n-        loadAll(\'meta.zcml\')\n-        loadAll(\'configure.zcml\')\n-        loadAll(\'overrides.zcml\')\n+        loadAll("meta.zcml")\n+        loadAll("configure.zcml")\n+        loadAll("overrides.zcml")\n \n     def tearDownZCML(self):\n         """Pop the global component registry stack, effectively unregistering\n@@ -176,7 +156,7 @@ def tearDownZCML(self):\n         zca.popGlobalRegistry()\n \n         # Zap the stacked configuration context\n-        del self[\'configurationContext\']\n+        del self["configurationContext"]\n \n     def setUpProducts(self, app):\n         """Install all old-style products listed in the the ``products`` tuple\n@@ -184,8 +164,8 @@ def setUpProducts(self, app):\n         """\n \n         for p, config in self.products:\n-            if config.get(\'install\', True):\n-                if config.get(\'silent\'):\n+            if config.get("install", True):\n+                if config.get("silent"):\n                     # When product is not available, do not complain or warn.\n                     try:\n                         resolve(p)\n@@ -198,17 +178,9 @@ def tearDownProducts(self, app):\n         tuple of this class.\n         """\n         for p, config in reversed(self.products):\n-            if config.get(\'install\', True):\n+            if config.get("install", True):\n                 zope.uninstallProduct(app, p)\n \n-        # Clean up Wicked turds\n-        # XXX: This may tear down too much state\n-        try:\n-            from wicked.fieldevent import meta\n-            meta.cleanUp()\n-        except ImportError:\n-            pass\n-\n     def setUpDefaultContent(self, app):\n         """Add the site owner user to the root user folder and log in as that\n         user. Create the Plone site, installing the extension profiles listed\n@@ -222,17 +194,15 @@ def setUpDefaultContent(self, app):\n \n         # Create the owner user and "log in" so that the site object gets\n         # the right ownership information\n-        app[\'acl_users\'].userFolderAddUser(\n-            SITE_OWNER_NAME,\n-            SITE_OWNER_PASSWORD,\n-            [\'Manager\'],\n-            []\n+        app["acl_users"].userFolderAddUser(\n+            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ["Manager"], []\n         )\n \n-        zope.login(app[\'acl_users\'], SITE_OWNER_NAME)\n+        zope.login(app["acl_users"], SITE_OWNER_NAME)\n \n         # Create the site with the default set of extension profiles\n         from Products.CMFPlone.factory import addPloneSite\n+\n         addPloneSite(\n             app,\n             PLONE_SITE_ID,\n@@ -243,17 +213,13 @@ def setUpDefaultContent(self, app):\n         )\n \n         # Turn off default workflow\n-        app[PLONE_SITE_ID][\'portal_workflow\'].setDefaultChain(\'\')\n+        app[PLONE_SITE_ID]["portal_workflow"].setDefaultChain("")\n \n         # Create the test user. (Plone)PAS does not have an API to create a\n         # user with different userid and login name, so we call the plugin\n         # directly.\n-        pas = app[PLONE_SITE_ID][\'acl_users\']\n-        pas.source_users.addUser(\n-            TEST_USER_ID,\n-            TEST_USER_NAME,\n-            TEST_USER_PASSWORD\n-        )\n+        pas = app[PLONE_SITE_ID]["acl_users"]\n+        pas.source_users.addUser(TEST_USER_ID, TEST_USER_NAME, TEST_USER_PASSWORD)\n         for role in TEST_USER_ROLES:\n             pas.portal_role_manager.doAssignRoleToPrincipal(TEST_USER_ID, role)\n \n@@ -276,11 +242,9 @@ class PloneZServerFixture(PloneFixture):\n     defaultBases = (zserver.STARTUP,)\n \n     def setUp(self):\n-\n         # Stack a new DemoStorage on top of the one from zserver.STARTUP.\n-        self[\'zodbDB\'] = zodb.stackDemoStorage(\n-            self.get(\'zodbDB\'),\n-            name=\'PloneZServerFixture\'\n+        self["zodbDB"] = zodb.stackDemoStorage(\n+            self.get("zodbDB"), name="PloneZServerFixture"\n         )\n \n         self.setUpZCML()\n@@ -291,7 +255,6 @@ def setUp(self):\n             self.setUpDefaultContent(app)\n \n     def tearDown(self):\n-\n         # Tear down products\n         with zserver.zopeApp() as app:\n             # note: content tear-down happens by squashing the ZODB\n@@ -300,14 +263,14 @@ def tearDown(self):\n         self.tearDownZCML()\n \n         # Zap the stacked ZODB\n-        self[\'zodbDB\'].close()\n-        del self[\'zodbDB\']\n+        self["zodbDB"].close()\n+        del self["zodbDB"]\n \n \n PLONE_ZSERVER_FIXTURE = PloneZServerFixture()\n \n \n-class PloneTestLifecycle(object):\n+class PloneTestLifecycle:\n     """Mixin class for Plone test lifecycle. This exposes the ``portal``\n     resource and resets the environment between each test.\n \n@@ -319,16 +282,16 @@ class PloneTestLifecycle(object):\n     defaultBases = (PLONE_FIXTURE,)\n \n     def testSetUp(self):\n-        super(PloneTestLifecycle, self).testSetUp()\n+        super().testSetUp()\n \n-        self[\'portal\'] = portal = self[\'app\'][PLONE_SITE_ID]\n+        self["portal"] = portal = self["app"][PLONE_SITE_ID]\n         self.setUpEnvironment(portal)\n \n     def testTearDown(self):\n-        self.tearDownEnvironment(self[\'portal\'])\n-        del self[\'portal\']\n+        self.tearDownEnvironment(self["portal"])\n+        del self["portal"]\n \n-        super(PloneTestLifecycle, self).testTearDown()\n+        super().testTearDown()\n \n     def setUpEnvironment(self, portal):\n         """Set up the local component site, reset skin data and log in as\n@@ -345,6 +308,7 @@ def setUpEnvironment(self, portal):\n \n         # Pseudo-login as the test user\n         from plone.app.testing import helpers\n+\n         helpers.login(portal, TEST_USER_NAME)\n \n     def tearDownEnvironment(self, portal):\n@@ -354,16 +318,19 @@ def tearDownEnvironment(self, portal):\n \n         # Clear the security manager\n         from plone.app.testing import helpers\n+\n         helpers.logout()\n \n         # Clear any cached data using plone.memoize\'s RAM caches\n         from plone.memoize.ram import global_cache\n+\n         global_cache.invalidateAll()\n \n-        from zope.component import queryUtility\n         from plone.memoize.ram import IRAMCache\n+        from zope.component import queryUtility\n+\n         cache = queryUtility(IRAMCache)\n-        if cache and getattr(cache, \'_cacheId\', None):\n+        if cache and getattr(cache, "_cacheId", None):\n             cache.invalidateAll()\n \n         # Unset the local component site\n@@ -380,6 +347,7 @@ class MockMailHostLayer(Layer):\n     """Layer for setting up a MockMailHost to store all sent messages as\n     strings into a list at portal.MailHost.messages\n     """\n+\n     defaultBases = (PLONE_FIXTURE,)\n \n     def testSetUp(self):\n@@ -388,22 +356,21 @@ def testSetUp(self):\n             registry = getUtility(IRegistry, context=portal)\n \n             if not registry["plone.email_from_address"]:\n-                portal._original_email_address = registry["plone.email_from_address"]  # noqa: E501\n+                portal._original_email_address = registry["plone.email_from_address"]\n                 registry["plone.email_from_address"] = "noreply@example.com"\n \n             if not registry["plone.email_from_name"]:\n                 portal._original_email_name = registry["plone.email_from_name"]\n-                registry["plone.email_from_name"] = u"Plone site"\n+                registry["plone.email_from_name"] = "Plone site"\n \n             portal._original_MailHost = portal.MailHost\n-            portal.MailHost = mailhost = MockMailHost(\'MailHost\')\n+            portal.MailHost = mailhost = MockMailHost("MailHost")\n \n             sm = getSiteManager(context=portal)\n             sm.unregisterUtility(provided=IMailHost)\n             sm.registerUtility(mailhost, provided=IMailHost)\n \n     def testTearDown(self):\n-\n         with zope.zopeApp() as app:\n             portal = app[PLONE_SITE_ID]\n             registry = getUtility(IRegistry, context=portal)\n@@ -419,7 +386,7 @@ def testTearDown(self):\n                 delattr(portal, "_original_email_name")\n \n             if hasattr(portal, "_original_email_address"):\n-                registry["plone.email_from_address"] = portal._original_email_address  # noqa: E501\n+                registry["plone.email_from_address"] = portal._original_email_address\n                 delattr(portal, "_original_email_address")\n \n             delattr(portal, "_original_MailHost")\n@@ -429,19 +396,16 @@ def testTearDown(self):\n \n \n class IntegrationTesting(PloneTestLifecycle, zope.IntegrationTesting):\n-    """Plone version of the integration testing layer\n-    """\n+    """Plone version of the integration testing layer"""\n \n \n class FunctionalTesting(PloneTestLifecycle, zope.FunctionalTesting):\n-    """Plone version of the functional testing layer\n-    """\n+    """Plone version of the functional testing layer"""\n \n \n-class ZServerFunctionalTesting(\n-        PloneZServerTestLifecycle, zserver.FunctionalTesting):\n-    """Plone version of the functional testing layer using ZServer.\n-    """\n+class ZServerFunctionalTesting(PloneZServerTestLifecycle, zserver.FunctionalTesting):\n+    """Plone version of the functional testing layer using ZServer."""\n+\n \n #\n # Layer instances\n@@ -450,21 +414,17 @@ class ZServerFunctionalTesting(\n \n \n PLONE_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_FIXTURE, ),\n-    name=\'Plone:Integration\'\n+    bases=(PLONE_FIXTURE,), name="Plone:Integration"\n )\n \n PLONE_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_FIXTURE, ),\n-    name=\'Plone:Functional\'\n+    bases=(PLONE_FIXTURE,), name="Plone:Functional"\n )\n \n PLONE_WSGISERVER = PLONE_ZSERVER = FunctionalTesting(\n-    bases=(PLONE_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n-    name=\'Plone:WSGIServer\'\n+    bases=(PLONE_FIXTURE, zope.WSGI_SERVER_FIXTURE), name="Plone:WSGIServer"\n )\n \n PLONE_FTP_SERVER = ZServerFunctionalTesting(\n-    bases=(PLONE_ZSERVER_FIXTURE, zserver.FTP_SERVER_FIXTURE),\n-    name=\'Plone:FTPServer\'\n+    bases=(PLONE_ZSERVER_FIXTURE, zserver.FTP_SERVER_FIXTURE), name="Plone:FTPServer"\n )\ndiff --git a/src/plone/app/testing/layers.rst b/src/plone/app/testing/layers.rst\nindex 6cf1ca7..927ac79 100644\n--- a/src/plone/app/testing/layers.rst\n+++ b/src/plone/app/testing/layers.rst\n@@ -337,7 +337,7 @@ We can now look for this new object through the server.\n     >>> portal_url.split(\':\')[:-1]\n     [\'http\', \'//localhost\']\n \n-    >>> from six.moves.urllib.request import urlopen\n+    >>> from urllib.request import urlopen\n     >>> conn = urlopen(portal_url, timeout=10)\n     >>> responseBody = conn.read()\n     >>> b"Fancy Portal" in responseBody\ndiff --git a/src/plone/app/testing/layers_zserver.rst b/src/plone/app/testing/layers_zserver.rst\ndeleted file mode 100644\nindex 8bd3401..0000000\n--- a/src/plone/app/testing/layers_zserver.rst\n+++ /dev/null\n@@ -1,135 +0,0 @@\n-Plone testing ZServer layers\n-----------------------------\n-\n-There are some ZServer layers used to set up test fixtures containing a Plone\n-site running with ZServer. They are all importable from ``plone.app.testing``\n-directly, or from their canonical locations at ``plone.app.testing.layers``.\n-\n-    >>> from plone.app.testing import layers\n-\n-For testing, we need a testrunner\n-\n-    >>> from zope.testrunner import runner\n-\n-FTP server with Plone site\n-~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-The ``PLONE_FTP_SERVER`` layer instantiates the ``FunctionalTesting`` class\n-with two bases: ``PLONE_FIXTURE``, as shown above, and ``FTP_SERVER_FIXTURE``\n-from ``plone.testing``, which starts up an FTP server thread.\n-\n-    >>> "%s.%s" % (layers.PLONE_FTP_SERVER.__module__, layers.PLONE_FTP_SERVER.__name__,)\n-    \'plone.app.testing.layers.Plone:FTPServer\'\n-\n-    >>> layers.PLONE_FTP_SERVER.__bases__\n-    (<Layer \'plone.app.testing.layers.PloneZServerFixture\'>, <Layer \'plone.testing.zserver.FTPServer\'>)\n-\n-    >>> options = runner.get_options([], [])\n-    >>> setupLayers = {}\n-    >>> runner.setup_layer(options, layers.PLONE_FTP_SERVER, setupLayers)  # here!\n-    Set up plone.testing.zca.LayerCleanup in ... seconds.\n-    Set up plone.testing.zserver.Startup in ... seconds.\n-    Set up plone.app.testing.layers.PloneZServerFixture in ... seconds.\n-    Set up plone.testing.zserver.FTPServer in ... seconds.\n-    Set up plone.app.testing.layers.Plone:FTPServer in ... seconds.\n-\n-After layer setup, the resources ``host`` and ``port`` are available, and\n-indicate where Zope is running.\n-\n-    >>> host = layers.PLONE_FTP_SERVER[\'host\']\n-    >>> host\n-    \'localhost\'\n-\n-The port is auto-allocated\n-\n-    >>> port = layers.PLONE_FTP_SERVER[\'port\']\n-    >>> bool(port)\n-    True\n-\n-Let\'s now simulate a test. Test setup does nothing beyond what the base layers\n-do.\n-\n-    >>> from plone.testing import zca, zserver\n-    >>> zca.LAYER_CLEANUP.testSetUp()\n-    >>> zserver.STARTUP.testSetUp()\n-    >>> layers.PLONE_FIXTURE.testSetUp()\n-    >>> zserver.FTP_SERVER_FIXTURE.testSetUp()\n-    >>> layers.PLONE_FTP_SERVER.testSetUp()\n-\n-It is common in a test to use the Python API to change the state of the server\n-(e.g. create some content or change a setting) and then use the FTP protocol\n-to look at the results. Bear in mind that the server is running in a separate\n-thread, with a separate security manager, so calls to ``helpers.login()`` and\n-``helpers.logout()``, for instance, do not affect the server thread.\n-\n-    >>> from plone.app.testing import helpers\n-    >>> from plone.app.testing.interfaces import TEST_USER_ID\n-    >>> portal = layers.PLONE_FTP_SERVER[\'portal\'] # would normally be self.layer[\'portal\']\n-    >>> helpers.setRoles(portal, TEST_USER_ID, [\'Manager\'])\n-    >>> from OFS.Folder import Folder\n-    >>> portal._setObject(\'folder1\', Folder(\'folder1\'))\n-    \'folder1\'\n-\n-Note that we need to commit the transaction before it will show up in the\n-other thread.\n-\n-    >>> import transaction; transaction.commit()\n-\n-    >>> folder_path = portal.absolute_url_path() + \'/folder1\'\n-\n-    >>> import ftplib\n-    >>> ftpClient = ftplib.FTP()\n-    >>> ftpClient.connect(host, port, timeout=5)\n-    \'220 ... FTP server (...) ready.\'\n-\n-    >>> from plone.app.testing.interfaces import SITE_OWNER_NAME\n-    >>> from plone.app.testing.interfaces import SITE_OWNER_PASSWORD\n-\n-    >>> ftpClient.login(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-    \'230 Login successful.\'\n-\n-    >>> ftpClient.cwd(folder_path)\n-    \'250 CWD command successful.\'\n-\n-    >>> ftpClient.retrlines(\'LIST\')\n-    drwxrwx---   1 test_user_1_ Zope            0 ... .\n-    d---------   1 admin        Zope            0 ... ..\n-    \'226 Transfer complete\'\n-\n-    >>> ftpClient.quit()\n-    \'221 Goodbye.\'\n-\n-Test tear-down does nothing beyond what the base layers do.\n-\n-    >>> layers.PLONE_FTP_SERVER.testTearDown()\n-    >>> zserver.FTP_SERVER_FIXTURE.testTearDown()\n-    >>> layers.PLONE_FIXTURE.testTearDown()\n-    >>> zserver.STARTUP.testTearDown()\n-    >>> zca.LAYER_CLEANUP.testTearDown()\n-\n-    >>> \'portal\' in layers.PLONE_FTP_SERVER\n-    False\n-\n-    >>> \'app\' in layers.PLONE_FTP_SERVER\n-    False\n-\n-    >>> \'request\' in layers.PLONE_FTP_SERVER\n-    False\n-\n-    >>> import plone.testing.zserver\n-    >>> with helpers.ploneSite(flavour=plone.testing.zserver) as portal:\n-    ...     print(\'folder1\' in portal.objectIds())\n-    False\n-\n-When the server is torn down, the FTP server thread is stopped.\n-\n-    >>> runner.tear_down_unneeded(options, [], setupLayers, [])\n-    Tear down plone.app.testing.layers.Plone:FTPServer in ... seconds.\n-    Tear down plone.testing.zserver.FTPServer in ... seconds.\n-    Tear down plone.app.testing.layers.PloneZServerFixture in ... seconds.\n-    Tear down plone.testing.zserver.Startup in ... seconds.\n-    Tear down plone.testing.zca.LayerCleanup in ... seconds.\n-\n-    >>> ftpClient.connect(host, port, timeout=5) # doctest: +IGNORE_EXCEPTION_DETAIL\n-    Traceback (most recent call last):\n-    error: [Errno 61] Connection refused\ndiff --git a/src/plone/app/testing/profile/metadata.xml b/src/plone/app/testing/profile/metadata.xml\nindex 6ce5b66..95a84a0 100644\n--- a/src/plone/app/testing/profile/metadata.xml\n+++ b/src/plone/app/testing/profile/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <!-- This is used in the helpers.rst tests. -->\n   <version>1000</version>\ndiff --git a/src/plone/app/testing/selenium_layers.py b/src/plone/app/testing/selenium_layers.py\nindex 965f2df..f4e0905 100644\n--- a/src/plone/app/testing/selenium_layers.py\n+++ b/src/plone/app/testing/selenium_layers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import PLONE_FIXTURE\n from plone.app.testing import TEST_USER_NAME\n@@ -11,32 +10,33 @@\n \n \n class SeleniumLayer(Layer):\n-    defaultBases = (zope.ZSERVER_FIXTURE, )\n+    defaultBases = (zope.ZSERVER_FIXTURE,)\n \n     def testSetUp(self):\n         # Start up Selenium\n-        driver = os.environ.get(\'SELENIUM_DRIVER\', \'\').lower() or \'firefox\'\n+        driver = os.environ.get("SELENIUM_DRIVER", "").lower() or "firefox"\n         webdriver = __import__(\n-            \'selenium.webdriver.{0}.webdriver\'.format(driver),\n-            fromlist=[\'WebDriver\']\n+            f"selenium.webdriver.{driver}.webdriver", fromlist=["WebDriver"]\n         )\n-        args = [arg.strip() for arg in\n-                os.environ.get(\'SELENIUM_ARGS\', \'\').split()\n-                if arg.strip()]\n-        self[\'selenium\'] = webdriver.WebDriver(*args)\n+        args = [\n+            arg.strip()\n+            for arg in os.environ.get("SELENIUM_ARGS", "").split()\n+            if arg.strip()\n+        ]\n+        self["selenium"] = webdriver.WebDriver(*args)\n \n     def testTearDown(self):\n-        self[\'selenium\'].quit()\n-        del self[\'selenium\']\n+        self["selenium"].quit()\n+        del self["selenium"]\n \n \n SELENIUM_FIXTURE = SeleniumLayer()\n SELENIUM_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(SELENIUM_FIXTURE, ),\n-    name=\'SeleniumTesting:Functional\')\n+    bases=(SELENIUM_FIXTURE,), name="SeleniumTesting:Functional"\n+)\n SELENIUM_PLONE_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(SELENIUM_FIXTURE, PLONE_FIXTURE),\n-    name=\'SeleniumTesting:Functional\')\n+    bases=(SELENIUM_FIXTURE, PLONE_FIXTURE), name="SeleniumTesting:Functional"\n+)\n \n \n # Helper functions\n@@ -49,26 +49,25 @@ def open(selenium, url):\n \n \n def login(selenium, portal, username=False, password=False):\n-\n     if not username:\n         username = TEST_USER_NAME\n     if not password:\n         password = TEST_USER_PASSWORD\n \n-    open(selenium, portal.absolute_url() + \'/login_form\')\n-    selenium.find_element_by_name(\'__ac_name\').send_keys(username)\n-    selenium.find_element_by_name(\'__ac_password\').send_keys(password)\n-    selenium.find_element_by_name(\'submit\').click()\n+    open(selenium, portal.absolute_url() + "/login_form")\n+    selenium.find_element_by_name("__ac_name").send_keys(username)\n+    selenium.find_element_by_name("__ac_password").send_keys(password)\n+    selenium.find_element_by_name("submit").click()\n \n \n def click(selenium, xpath):\n-    if xpath.count(\'link=\'):\n-        link = xpath.split(\'link=\')[-1]\n+    if xpath.count("link="):\n+        link = xpath.split("link=")[-1]\n         element = selenium.find_element_by_partial_link_text(link)\n-    elif xpath.count(\'//\'):\n+    elif xpath.count("//"):\n         element = selenium.find_element_by_xpath(xpath)\n-    elif xpath.count(\'#\'):\n-        eleName = xpath.split(\'#\')[-1]\n+    elif xpath.count("#"):\n+        eleName = xpath.split("#")[-1]\n         element = selenium.find_element_by_id(eleName)\n     else:\n         element = selenium.find_element_by_name(xpath)\n@@ -93,8 +92,8 @@ def typeMce(selenium, value):\n     this breaks it won\'t be a surprise.\n     """\n     handle = selenium.current_window_handle\n-    selenium.switch_to_frame(\'form.text_ifr\')\n-    ele = selenium.find_element_by_xpath(\'//p\')\n+    selenium.switch_to_frame("form.text_ifr")\n+    ele = selenium.find_element_by_xpath("//p")\n     ele.send_keys(value)\n     selenium.switch_to_window(handle)\n \n@@ -103,10 +102,10 @@ def clear(selenium, name):\n     selenium.find_element_by_name(name).clear()\n \n \n-def select(selenium, xpath1, xpath2=\'\'):\n+def select(selenium, xpath1, xpath2=""):\n     xpath = xpath1\n     if xpath2:\n-        xpath = "{0}[\'{1}\']".format(xpath1, xpath2)\n+        xpath = f"{xpath1}[\'{xpath2}\']"\n         xpath = xpath.replace("select[\'label=", "select/option[\'text()=")\n     selenium.find_element_by_xpath(xpath).click()\n \n@@ -118,7 +117,7 @@ def waitForPageToLoad(selenium, foo):\n \n def publish(selenium):\n     click(selenium, "//dl[@id=\'plone-contentmenu-workflow\']/dt/a")\n-    click(selenium, \'#workflow-transition-publish\')\n+    click(selenium, "#workflow-transition-publish")\n \n \n def submit(selenium, formId):\ndiff --git a/src/plone/app/testing/tests.py b/src/plone/app/testing/tests.py\nindex 53a7a10..8fbd5bb 100644\n--- a/src/plone/app/testing/tests.py\n+++ b/src/plone/app/testing/tests.py\n@@ -1,7 +1,4 @@\n-# -*- coding: utf-8 -*-\n import doctest\n-import re\n-import six\n import unittest\n \n \n@@ -13,13 +10,6 @@ def dummy(context):\n     pass\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     suite = unittest.TestSuite()\n     # seltest = doctest.DocFileSuite(\'selenium.rst\', optionflags=OPTIONFLAGS)\n@@ -31,23 +21,15 @@ def test_suite():\n             doctest.DocFileSuite(\n                 "cleanup.rst",\n                 optionflags=OPTIONFLAGS,\n-                checker=Py23DocChecker(),\n             ),\n             doctest.DocFileSuite(\n                 "layers.rst",\n                 optionflags=OPTIONFLAGS,\n-                checker=Py23DocChecker(),\n             ),\n             doctest.DocFileSuite(\n                 "helpers.rst",\n                 optionflags=OPTIONFLAGS,\n-                checker=Py23DocChecker(),\n             ),\n         ]\n     )\n-    if six.PY2:\n-        suite.addTests([\n-            doctest.DocFileSuite(\n-                \'layers_zserver.rst\', optionflags=OPTIONFLAGS),\n-        ])\n     return suite\ndiff --git a/src/plone/app/testing/utils.py b/src/plone/app/testing/utils.py\nindex 0771372..4a73eb5 100644\n--- a/src/plone/app/testing/utils.py\n+++ b/src/plone/app/testing/utils.py\n@@ -1,12 +1,10 @@\n-# -*- coding: utf-8 -*-\n from persistent.list import PersistentList\n from Products.MailHost.MailHost import _mungeHeaders\n from Products.MailHost.MailHost import MailBase\n \n \n class MockMailHost(MailBase):\n-    """A MailHost that collects messages instead of sending them.\n-    """\n+    """A MailHost that collects messages instead of sending them."""\n \n     def __init__(self, id):\n         self.reset()\n@@ -15,13 +13,21 @@ def reset(self):\n         self.messages = PersistentList()\n \n     def _send(self, mfrom, mto, messageText, immediate=False):\n-        """ Send the message """\n+        """Send the message"""\n         self.messages.append(messageText)\n \n-    def send(self, messageText, mto=None, mfrom=None, subject=None,\n-             encode=None, immediate=False, charset=None, msg_type=None):\n-        messageText, mto, mfrom = _mungeHeaders(messageText,\n-                                                mto, mfrom, subject,\n-                                                charset=charset,\n-                                                msg_type=msg_type)\n+    def send(\n+        self,\n+        messageText,\n+        mto=None,\n+        mfrom=None,\n+        subject=None,\n+        encode=None,\n+        immediate=False,\n+        charset=None,\n+        msg_type=None,\n+    ):\n+        messageText, mto, mfrom = _mungeHeaders(\n+            messageText, mto, mfrom, subject, charset=charset, msg_type=msg_type\n+        )\n         self.messages.append(messageText)\ndiff --git a/tox.ini b/tox.ini\nindex 514dfb1..878cca4 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,163 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n envlist =\n-    py27,\n-    py36,\n-    py37,\n-    py38,\n-    coverage-report,\n-    docs,\n-    lint-py27,\n-    lint-py36,\n-    lint-py37,\n-    lint-py38,\n-\n-minversion = 1.9\n-\n-[testenv]\n-whitelist_externals = test coverage\n-skip_install = true\n-usedevelop = True\n-\n-pip_pre = True\n-\n-extras =\n+    format\n+    lint\n     test\n \n-deps =\n-     -rhttps://raw.githubusercontent.com/plone/buildout.coredev/5.2/requirements.txt\n-\n-commands =\n-    python -V\n-    {envbindir}/buildout -c {toxinidir}/buildout.cfg buildout:directory={envdir} buildout:develop={toxinidir} install test\n-    ls -la {envbindir}\n-    coverage run {envbindir}/test --all {posargs:-vvc}\n-\n-setenv =\n-    COVERAGE_FILE=.coverage.{envname}\n-\n-passenv =\n-    WSGI_REQUEST_LOGGING\n-\n-[testenv:coverage-report]\n-skip_install = true\n-basepython = python2.7\n-\n-deps = coverage\n-\n-setenv =\n-    COVERAGE_FILE=.coverage\n-\n-commands =\n-    coverage erase\n-    coverage combine\n-    coverage html -i\n-    coverage xml -i\n-    coverage report -i --fail-under=60\n-\n+[testenv]\n+allowlist_externals =\n+    sh\n \n-[lint]\n+[testenv:format]\n+description = automatically reformat code\n skip_install = true\n-\n deps =\n-    isort < 5\n-    flake8\n-    # helper to generate HTML reports:\n-    flake8-html\n-    # Useful flake8 plugins that are Python and Plone specific:\n-    flake8-coding\n-    flake8-debugger\n-    flake8-deprecated\n-    flake8-print\n-    flake8-pytest\n-    flake8-todo\n-    flake8-isort\n-    mccabe\n-    # Potential flake8 plugins that should be used:  # TBD\n-    #flake8-blind-except\n-    #flake8-commas\n-    #flake8-docstrings\n-    #flake8-mypy\n-    #flake8-pep3101\n-    #flake8-plone-hasattr\n-    #flake8-string-format\n-    #flake8_strict\n-    #flake8-quotes\n-    #flake8-polyfill\n-\n+    pre-commit\n commands =\n-    mkdir -p {toxinidir}/_build/reports/flake8\n-    - flake8 --format=html --htmldir={toxinidir}/_build/reports/flake8 --doctests src setup.py\n-    flake8 --doctests src setup.py\n-    isort --check-only --recursive {toxinidir}/src\n-\n-whitelist_externals =\n-    mkdir\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n \n-[testenv:isort-apply]\n+[testenv:lint]\n+description = run linters that will help improve the code style\n skip_install = true\n-\n deps =\n-    isort\n-\n+    pre-commit\n commands =\n-    isort --apply --recursive {toxinidir}/src\n-\n-[testenv:lint-py27]\n-basepython = python2.7\n-skip_install = true\n-deps = {[lint]deps}\n-commands = {[lint]commands}\n-whitelist_externals = {[lint]whitelist_externals}\n-\n-[testenv:lint-py36]\n-basepython = python3.6\n-skip_install = true\n-deps = {[lint]deps}\n-commands = {[lint]commands}\n-whitelist_externals = {[lint]whitelist_externals}\n-\n-[testenv:lint-py37]\n-basepython = python3.7\n-skip_install = true\n-deps = {[lint]deps}\n-commands = {[lint]commands}\n-whitelist_externals = {[lint]whitelist_externals}\n-\n-[testenv:lint-py38]\n-basepython = python3.8\n-skip_install = true\n-deps = {[lint]deps}\n-commands = {[lint]commands}\n-whitelist_externals = {[lint]whitelist_externals}\n-\n-[testenv:docs]\n-skip_install = true\n+    pre-commit run -a\n \n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n deps =\n-    Sphinx\n-\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n commands =\n-    sphinx-build -b html -d _build/docs/doctrees docs _build/docs/html\n-#    sphinx-build -b doctest docs _build/docs/doctrees\n-\n-[testenv:update_translation]\n-skip_install = true\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n \n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n deps =\n-    i18ndude\n-\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands =\n-    i18ndude find-untranslated\n-    i18ndude rebuild-pot\n-    i18ndude merge\n-    i18ndude sync\n-    i18ndude list\n-\n-[testenv:release]\n-skip_install = true\n+    zope-testrunner --all --test-path={toxinidir}/src -s plone.app.testing {posargs}\n+extras =\n+    test\n \n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n deps =\n-    zest.releaser[recommended]\n-\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands =\n-    fullrelease --no-input -v\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir}/src -s plone.app.testing {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

