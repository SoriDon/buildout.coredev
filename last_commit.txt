Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-09T16:03:06+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/f2794f990af981c9d007c9f1e91a8fc18cad3814

Fix excluded items in navigation

Refs. #2516

Files changed:
A news/2516.fixed
M Products/CMFPlone/browser/navigation.py

b"diff --git a/Products/CMFPlone/browser/navigation.py b/Products/CMFPlone/browser/navigation.py\nindex 27bae5816..ba9c12031 100644\n--- a/Products/CMFPlone/browser/navigation.py\n+++ b/Products/CMFPlone/browser/navigation.py\n@@ -148,8 +148,9 @@ def _get_url(item):\n \n         # now add the content to results\n         for item in rawresult:\n-            if item.exclude_from_nav:\n-                continue\n+            if not navigation_settings.show_excluded_items:\n+                if item.exclude_from_nav:\n+                    continue\n             cid, item_url = _get_url(item)\n             data = {\n                 'name': utils.pretty_title_or_id(context, item),\ndiff --git a/news/2516.fixed b/news/2516.fixed\nnew file mode 100644\nindex 000000000..f78be280a\n--- /dev/null\n+++ b/news/2516.fixed\n@@ -0,0 +1 @@\n+Fix excluded items in navigation [ale-rt]\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-10T15:26:46+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/2ceae0d026e4b7dfcb7e877d93dff763b71cf9f4

Merge remote-tracking branch 'origin/master' into 2516-fixup

Files changed:
M Products/CMFPlone/WorkflowTool.py

b"diff --git a/Products/CMFPlone/WorkflowTool.py b/Products/CMFPlone/WorkflowTool.py\nindex fda1d261d..ae8eebbab 100644\n--- a/Products/CMFPlone/WorkflowTool.py\n+++ b/Products/CMFPlone/WorkflowTool.py\n@@ -243,8 +243,9 @@ def getWorklistsResults(self):\n                     if 'Language' not in catalog_vars:\n                         if has_new_lang_bypass:\n                             catalog_vars['path'] = '/'\n-                        elif has_new_lang_bypass:\n-                            catalog_vars['Language'] = 'all'                    # Include inactive content in result list. This is\n+                        else:\n+                            catalog_vars['Language'] = 'all'\n+                    # Include inactive content in result list. This is\n                     # especially important for content scheduled to go public\n                     # in the future, but needs to be reviewed before this.\n                     catalog_vars['show_inactive'] = True\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-10T15:51:22+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/5752310bd1ae6c0278fb61e66633c544ecec3050

Adapt old and broken test

Files changed:
M Products/CMFPlone/tests/testNavigationView.py

b"diff --git a/Products/CMFPlone/tests/testNavigationView.py b/Products/CMFPlone/tests/testNavigationView.py\nindex 7c2080a90..e18f08897 100644\n--- a/Products/CMFPlone/tests/testNavigationView.py\n+++ b/Products/CMFPlone/tests/testNavigationView.py\n@@ -597,17 +597,29 @@ def testDisableFolderTabs(self):\n \n     def testTabsExcludeItemsWithExcludeProperty(self):\n         # Make sure that items witht he exclude_from_nav property are purged\n-        view = self.view_class(self.portal, self.request)\n+        view = self.view_class(self.portal, self.request.clone())\n         tabs = view.topLevelTabs(actions=[])\n         orig_len = len(tabs)\n         self.portal.folder2.exclude_from_nav = True\n         self.portal.folder2.reindexObject()\n+\n+        # For the moment nothing changes because the default for\n+        # plone.show_excluded_items is True\n+        view = self.view_class(self.portal, self.request.clone())\n+        tabs = view.topLevelTabs(actions=[])\n+        self.assertTrue(tabs)\n+        self.assertEqual(len(tabs), orig_len)\n+        tab_names = [t['id'] for t in tabs]\n+        self.assertIn('folder2', tab_names)\n+\n+        # Now we flip the setting for plone.show_excluded_items\n+        self.navigation_settings.show_excluded_items = False\n         view = self.view_class(self.portal, self.request)\n         tabs = view.topLevelTabs(actions=[])\n         self.assertTrue(tabs)\n         self.assertEqual(len(tabs), orig_len - 1)\n         tab_names = [t['id'] for t in tabs]\n-        self.assertFalse('folder2' in tab_names)\n+        self.assertNotIn('folder2', tab_names)\n \n     def testTabsRespectsTypesWithViewAction(self):\n         # With a type in types_use_view_action_in_listings as current action it\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-11T22:47:27+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/bdb5aa76ae12cfbb5945155faa69d1d2022c39f0

Merge remote-tracking branch 'origin/master' into 2516-fixup

Files changed:
M CHANGES.rst
M Products/CMFPlone/SkinsTool.py
M Products/CMFPlone/profiles/default/toolset.xml
M Products/CMFPlone/profiles/dependencies/registry.xml
M Products/CMFPlone/setuphandlers.py
M Products/CMFPlone/tests/testPortalCreation.py
M Products/CMFPlone/tests/testResourceRegistries.py
M Products/CMFPlone/tests/test_zmi.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 02d1afb6b..10c0db9c8 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -79,7 +79,8 @@ Breaking changes:\n - Stop configuring \'View History\' permission which was removed from Zope.\n   [davisagli]\n \n-- Remove legacy resource registries portal_css and portal_javascripts\n+- Removed legacy resource registries portal_css and portal_javascripts;\n+  no conditional handling.\n   [ksuess]\n \n New features:\ndiff --git a/Products/CMFPlone/SkinsTool.py b/Products/CMFPlone/SkinsTool.py\nindex b34927f70..e00537577 100644\n--- a/Products/CMFPlone/SkinsTool.py\n+++ b/Products/CMFPlone/SkinsTool.py\n@@ -3,9 +3,6 @@\n from AccessControl.class_init import InitializeClass\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.SkinsTool import SkinsTool as BaseTool\n-from Products.ResourceRegistries.tools.BaseRegistry import \\\n-    cookWhenChangingSettings\n-\n from Products.CMFPlone.PloneBaseTool import PloneBaseTool\n \n \n@@ -24,8 +21,6 @@ def addSkinSelection(self, skinname, skinpath, test=0, make_default=0):\n         # Adds a skin selection.\n         super(SkinsTool, self).addSkinSelection(skinname, skinpath,\n                                                 test=test, make_default=make_default)\n-        # when adding a new skin, we need to tell RR about it\n-        cookWhenChangingSettings(None, None)\n \n     security.declareProtected(ManagePortal, \'manage_skinLayers\')\n \n@@ -36,8 +31,6 @@ def manage_skinLayers(self, chosen=(), add_skin=0, del_skin=0,\n         response = super(SkinsTool, self).manage_skinLayers(chosen=chosen,\n                                                             add_skin=add_skin, del_skin=del_skin, skinname=skinname,\n                                                             skinpath=skinpath, REQUEST=REQUEST)\n-        # when changing skins, we need to tell RR about it\n-        cookWhenChangingSettings(None, None)\n         return response\n \n SkinsTool.__doc__ = BaseTool.__doc__\ndiff --git a/Products/CMFPlone/profiles/default/toolset.xml b/Products/CMFPlone/profiles/default/toolset.xml\nindex 4837d700e..4ae5e9446 100644\n--- a/Products/CMFPlone/profiles/default/toolset.xml\n+++ b/Products/CMFPlone/profiles/default/toolset.xml\n@@ -16,14 +16,10 @@\n            class="Products.CMFPlone.CatalogTool.CatalogTool"/>\n  <required tool_id="portal_controlpanel"\n            class="Products.CMFPlone.PloneControlPanel.PloneControlPanel"/>\n- <required tool_id="portal_css"\n-           class="Products.ResourceRegistries.tools.CSSRegistry.CSSRegistryTool"/>\n  <required tool_id="portal_groupdata"\n            class="Products.PlonePAS.tools.groupdata.GroupDataTool"/>\n  <required tool_id="portal_groups"\n            class="Products.PlonePAS.tools.groups.GroupsTool"/>\n- <required tool_id="portal_javascripts"\n-           class="Products.ResourceRegistries.tools.JSRegistry.JSRegistryTool"/>\n  <required tool_id="portal_memberdata"\n            class="Products.PlonePAS.tools.memberdata.MemberDataTool"/>\n  <required tool_id="portal_membership"\ndiff --git a/Products/CMFPlone/profiles/dependencies/registry.xml b/Products/CMFPlone/profiles/dependencies/registry.xml\nindex 77608ff71..22580afb4 100644\n--- a/Products/CMFPlone/profiles/dependencies/registry.xml\n+++ b/Products/CMFPlone/profiles/dependencies/registry.xml\n@@ -34,14 +34,6 @@\n            prefix="plone" />\n   <records interface="Products.CMFPlone.interfaces.ILinkSchema"\n            prefix="plone" />\n-  <record interface="Products.ResourceRegistries.interfaces.settings.IResourceRegistriesSettings" field="resourceBundlesForThemes">\n-    <value purge="false">\n-      <element key="(default)">\n-        <element>jquery</element>\n-        <element>default</element>\n-      </element>\n-    </value>\n-  </record>\n   <record name="Products.CMFPlone.i18nl10n.override_dateformat.Enabled">\n     <field type="plone.registry.field.Bool">\n       <title>Enabled</title>\ndiff --git a/Products/CMFPlone/setuphandlers.py b/Products/CMFPlone/setuphandlers.py\nindex 1f3ea5d21..05c8a4c96 100644\n--- a/Products/CMFPlone/setuphandlers.py\n+++ b/Products/CMFPlone/setuphandlers.py\n@@ -36,30 +36,6 @@ def addCacheHandlers(portal):\n                 portal[mgr_id] = mgr_class(mgr_id)\n \n \n-def addCacheForResourceRegistry(portal):\n-    ram_cache_id = \'ResourceRegistryCache\'\n-    if ram_cache_id in portal:\n-        cache = getattr(portal, ram_cache_id)\n-        settings = cache.getSettings()\n-        settings[\'max_age\'] = 24 * 3600  # keep for up to 24 hours\n-        settings[\'request_vars\'] = (\'URL\', )\n-        cache.manage_editProps(\'Cache for saved ResourceRegistry files\',\n-                               settings)\n-    reg = getToolByName(portal, \'portal_css\', None)\n-    if reg is not None \\\n-            and getattr(aq_base(reg), \'ZCacheable_setManagerId\', None) \\\n-    is not None:\n-        reg.ZCacheable_setManagerId(ram_cache_id)\n-        reg.ZCacheable_setEnabled(1)\n-\n-    reg = getToolByName(portal, \'portal_javascripts\', None)\n-    if reg is not None \\\n-            and getattr(aq_base(reg), \'ZCacheable_setManagerId\', None) \\\n-    is not None:\n-        reg.ZCacheable_setManagerId(ram_cache_id)\n-        reg.ZCacheable_setEnabled(1)\n-\n-\n def purgeProfileVersions(portal):\n     """\n     Purge profile dependency versions.\n@@ -93,11 +69,9 @@ def assignTitles(portal):\n         \'portal_calendar\': \'Controls how events are shown\',\n         \'portal_catalog\': \'Indexes all content in the site\',\n         \'portal_controlpanel\': \'Registry of control panel screen\',\n-        \'portal_css\': \'Registry of CSS files\',\n         \'portal_diff\': \'Settings for content version comparisions\',\n         \'portal_groupdata\': \'Handles properties on groups\',\n         \'portal_groups\': \'Handles group related functionality\',\n-        \'portal_javascripts\': \'Registry of JavaScript files\',\n         \'portal_languages\': \'Language specific settings\',\n         \'portal_membership\': \'Handles membership policies\',\n         \'portal_memberdata\': \'Handles the available properties on members\',\n@@ -172,7 +146,6 @@ def importFinalSteps(context):\n     assignTitles(site)\n     replace_local_role_manager(site)\n     addCacheHandlers(site)\n-    addCacheForResourceRegistry(site)\n \n     first_weekday_setup(context)\n     timezone_setup(context)\ndiff --git a/Products/CMFPlone/tests/testPortalCreation.py b/Products/CMFPlone/tests/testPortalCreation.py\nindex 5aa1d6b1b..02a1703ec 100644\n--- a/Products/CMFPlone/tests/testPortalCreation.py\n+++ b/Products/CMFPlone/tests/testPortalCreation.py\n@@ -49,7 +49,6 @@ def afterSetUp(self):\n         self.groups = self.portal.portal_groups\n         self.skins = self.portal.portal_skins\n         self.transforms = self.portal.portal_transforms\n-        self.javascripts = self.portal.portal_javascripts\n         self.setup = self.portal.portal_setup\n \n     def testInstanceVersion(self):\n@@ -198,11 +197,6 @@ def testSitemapAction(self):\n         else:\n             self.fail("Actions tool has no \'sitemap\' action")\n \n-    def testResourceRegistries(self):\n-        # We should have portal_css and portal_javascripts tools\n-        self.assertTrue(hasattr(self.portal, \'portal_css\'))\n-        self.assertTrue(hasattr(self.portal, \'portal_javascripts\'))\n-\n     def testUnfriendlyTypesProperty(self):\n         # We should have an types_not_searched property\n         registry = getUtility(IRegistry)\n@@ -665,10 +659,6 @@ def testConfigurableSafeHtmlTransform(self):\n         except (AttributeError, KeyError):\n             self.fail(\'Disabling of safe_html should be possible!\')\n \n-    def testvcXMLRPCRemoved(self):\n-        # vcXMLRPC.js should no longer be registered\n-        self.assertFalse(\'vcXMLRPC.js\' in self.javascripts.getResourceIds())\n-\n     def testCacheManagers(self):\n         # The cache and caching policy managers should exist\n         httpcache = self.portal._getOb(\'HTTPCache\', None)\ndiff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex 393d24b60..cb0d88580 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -301,153 +301,6 @@ def test_bundle_defer_async_production(self):\n         self.assertEqual(view.index(view).count(\'defer="defer"\'), 2)\n \n \n-class TestResourceNodeImporter(PloneTestCase.PloneTestCase):\n-    """Test features of registry node importer"""\n-    _setup_fixture = 0  # No default fixture\n-\n-    def _get_importer(self, blacklist=set([])):\n-        reg = getToolByName(self.portal, \'portal_javascripts\')\n-        importer = ResourceRegistryNodeAdapter(reg, SetupEnviron())\n-        importer.resource_type = \'javascript\'\n-        importer.registry = getUtility(IRegistry)\n-        importer.resource_blacklist = blacklist\n-        return importer\n-\n-    def _get_resources(self):\n-        return getUtility(IRegistry).collectionOfInterface(\n-            IResourceRegistry, prefix="plone.resources"\n-        )\n-\n-    def _get_legacy_bundle(self):\n-        return getUtility(IRegistry).collectionOfInterface(\n-            IBundleRegistry,\n-            prefix="plone.bundles",\n-            check=False\n-        )[\'plone-legacy\']\n-\n-    def _get_resource_dom(self, name=\'++resource++/resource.js\',\n-                          remove=False, enabled=True):\n-        return parseString("""\n-            <object>\n-                <javascript id="%s" remove="%s" enabled="%s" />\n-            </object>\n-            """ % (name, str(remove), str(enabled).lower()))\n-\n-    def test_resource_blacklist(self):\n-        # Ensure that blacklisted resources aren\'t imported\n-        importer = self._get_importer({\'++resource++/bad_resource.js\'})\n-        dom = self._get_resource_dom("++resource++/bad_resource.js")\n-        importer._importNode(dom.documentElement)\n-        js_files = [x.js for x in self._get_resources().values()]\n-        self.assertNotIn("++resource++/bad_resource.js", js_files)\n-        self.assertNotIn(\n-            "resource-bad_resource-js",\n-            self._get_legacy_bundle().resources,\n-        )\n-\n-    def test_resource_no_blacklist(self):\n-        importer = self._get_importer()\n-        dom = self._get_resource_dom()\n-        importer._importNode(dom.documentElement)\n-        js_files = [x.js for x in self._get_resources().values()]\n-        self.assertTrue("++resource++/resource.js" in js_files)\n-        self.assertTrue(\n-            "resource-resource-js" in self._get_legacy_bundle().resources)\n-\n-    def test_insert_again(self):\n-        importer = self._get_importer()\n-        dom = self._get_resource_dom()\n-        num_resources = self._get_legacy_bundle().resources[:]\n-        importer._importNode(dom.documentElement)\n-        self.assertEqual(len(num_resources) + 1,\n-                          len(self._get_legacy_bundle().resources))\n-        importer._importNode(dom.documentElement)\n-        self.assertEqual(len(num_resources) + 1,\n-                          len(self._get_legacy_bundle().resources))\n-\n-    def test_remove(self):\n-        importer = self._get_importer()\n-\n-        # inserter it\n-        dom = self._get_resource_dom()\n-        importer._importNode(dom.documentElement)\n-\n-        resources = self._get_legacy_bundle().resources[:]\n-        js_files = [x.js for x in self._get_resources().values()]\n-\n-        # import again\n-        dom = self._get_resource_dom(remove=True)\n-        importer._importNode(dom.documentElement)\n-\n-        self.assertEqual(len(resources) - 1,\n-                          len(self._get_legacy_bundle().resources))\n-        self.assertEqual(len(js_files) - 1,\n-                          len([x.js for x in self._get_resources().values()]))\n-\n-    def test_insert_after(self):\n-        importer = self._get_importer()\n-        one = self._get_resource_dom(\'one\')\n-        two = self._get_resource_dom(\'two\')\n-        three = self._get_resource_dom(\'three\')\n-        importer._importNode(one.documentElement)\n-        importer._importNode(two.documentElement)\n-        importer._importNode(three.documentElement)\n-\n-        # now, insert\n-        foobar = parseString("""\n-            <object>\n-                <javascript id="foobar.js" insert-after="one" enabled="true" />\n-            </object>\n-            """)\n-        importer._importNode(foobar.documentElement)\n-        resources = self._get_legacy_bundle().resources\n-        self.assertEqual(\n-            resources.index(\'one\') + 1,\n-            resources.index(\'foobar-js\')\n-        )\n-\n-    def test_insert_before(self):\n-        importer = self._get_importer()\n-        one = self._get_resource_dom(\'one\')\n-        two = self._get_resource_dom(\'two\')\n-        three = self._get_resource_dom(\'three\')\n-        importer._importNode(one.documentElement)\n-        importer._importNode(two.documentElement)\n-        importer._importNode(three.documentElement)\n-\n-        # now, insert\n-        foobar = parseString("""\n-            <object>\n-              <javascript id="foobar.js" insert-before="one" enabled="true" />\n-            </object>\n-            """)\n-        importer._importNode(foobar.documentElement)\n-        resources = self._get_legacy_bundle().resources\n-        self.assertEqual(\n-            resources.index(\'one\') - 1,\n-            resources.index(\'foobar-js\')\n-        )\n-\n-    def test_be_able_to_disable_but_not_remove(self):\n-        importer = self._get_importer()\n-\n-        # inserter it\n-        dom = self._get_resource_dom()\n-        importer._importNode(dom.documentElement)\n-\n-        resources = self._get_legacy_bundle().resources[:]\n-        js_files = [x.js for x in self._get_resources().values()]\n-\n-        # import again\n-        dom = self._get_resource_dom(enabled=False)\n-        importer._importNode(dom.documentElement)\n-\n-        self.assertEqual(len(resources) - 1,\n-                          len(self._get_legacy_bundle().resources))\n-        self.assertEqual(len(js_files),\n-                          len([x.js for x in self._get_resources().values()]))\n-\n-\n class TestConfigJs(PloneTestCase.PloneTestCase):\n \n     def test_init_shim_works_with_function(self):\ndiff --git a/Products/CMFPlone/tests/test_zmi.py b/Products/CMFPlone/tests/test_zmi.py\nindex b754ad725..622559b7c 100644\n--- a/Products/CMFPlone/tests/test_zmi.py\n+++ b/Products/CMFPlone/tests/test_zmi.py\n@@ -91,11 +91,6 @@ def test_portal_catalog(self):\n         view = self.portal.restrictedTraverse(url)\n         self.assertTrue(view(), msg=\'{0} is broken\'.format(url))\n \n-    def test_portal_css(self):\n-        url = \'portal_css/manage_cssForm\'\n-        view = self.portal.restrictedTraverse(url)\n-        self.assertTrue(view(), msg=\'{0} is broken\'.format(url))\n-\n     def test_portal_diff(self):\n         url = \'portal_diff/manage_difftypes\'\n         view = self.portal.restrictedTraverse(url)\n@@ -116,11 +111,6 @@ def test_portal_historyidhandler(self):\n         view = self.portal.restrictedTraverse(url)\n         self.assertTrue(view(), msg=\'{0} is broken\'.format(url))\n \n-    def test_portal_javascripts(self):\n-        url = \'portal_javascripts/manage_jsForm\'\n-        view = self.portal.restrictedTraverse(url)\n-        self.assertTrue(view(), msg=\'{0} is broken\'.format(url))\n-\n     def test_portal_memberdata(self):\n         url = \'portal_memberdata/manage_overview\'\n         view = self.portal.restrictedTraverse(url)\ndiff --git a/setup.py b/setup.py\nindex b3ffc5378..6c3118600 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -105,7 +105,6 @@\n         \'Products.PluggableAuthService\',\n         \'Products.PluginRegistry\',\n         \'Products.PortalTransforms\',\n-        \'Products.ResourceRegistries\',\n         \'Products.Sessions\',\n         \'Products.SiteErrorLog\',\n         \'Products.statusmessages\',\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-18T18:25:39+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/c272accf16cb2efd3bcf27ca30355914b6bc90b2

Merge remote-tracking branch 'origin/master' into 2516-fixup

Files changed:
A Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt
A Products/CMFPlone/controlpanel/browser/redirects-manage.pt
A Products/CMFPlone/controlpanel/browser/redirects.py
A Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py
A news/2752.bugfix
M CHANGES.rst
M Products/CMFPlone/controlpanel/browser/configure.zcml
M Products/CMFPlone/profiles/default/actions.xml
M Products/CMFPlone/profiles/default/controlpanel.xml
M Products/CMFPlone/profiles/default/rolemap.xml
M Products/CMFPlone/tests/robot/test_linkintegrity.robot
M Products/CMFPlone/tests/testPortalCreation.py
M setup.py
D news/2258.bugfix
D news/2464.bugfix
D news/2516.feature
D news/2542.breaking
D news/2595.bugfix
D news/260.bugfix
D news/2645.bugfix
D news/2665.bugfix
D news/2675.bugfix
D news/2683.bugfix
D news/2694.bugfix
D news/2707.bugfix
D news/2736.feature

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 10c0db9c8..fbd6ba40b 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -12,6 +12,54 @@ Changelog\n \n .. towncrier release notes start\n \n+5.2b1 (2019-02-13)\n+------------------\n+\n+Breaking changes:\n+\n+\n+- - Factor out all static resources and the ``plone-compile-resources`` script\n+  into plone.staticresources. [thet] (#2542)\n+\n+\n+New features:\n+\n+\n+- PLIP 1486: Merge Products.RedirectionTool into core. Allow users to manage\n+  redirects on their site and aliases to content. See\n+  https://github.com/plone/Products.CMFPlone/issues/1486 [staeff, maurits]\n+  (#1486)\n+- - Added multilevel dropdown navigation [agitator] (#2516)\n+- No longer mark special links by default. [pbauer] (#2736)\n+\n+\n+Bug fixes:\n+\n+\n+- Switched allowedRolesAndUsers indexer from \'View\' to the correct permission\n+  \'Access contents information\' for displaying metadata. \'View\' permission\n+  should be used on the item itself. The change should not matter for default\n+  Plone workflows, since they always use those permissions together. [agitator]\n+  (#260)\n+- deprecate catalog_get_all(catalog) in favor of catalog.getAllBrains()\n+  [pbauer] (#2258)\n+- Restore the possibility to sort catalog query results with multiple indexes\n+  (#2464)\n+- Review list portlet showed nothing to review with plone.app.multilingual, As\n+  WorkflowTool bypassed languages only for p.a.m<2.x or linguaplone. fixed and\n+  now compatible to both lang-bypassing methods. [iham] (#2595)\n+- Fixed fallback to default view when selected layout does not exist for\n+  Folder. [gbastien] (#2645)\n+- The patched init method for the class zope.sendmail.mailer.SMTPMailer has\n+  been updated, fixing a bug that was preventing to send emails. [ale-rt,\n+  nazrulworld] (#2665)\n+- a11y: Added role attribute for portalMessage [nzambello] (#2675)\n+- Fix several warnings shown when running tests on Python 3+. [gforcada]\n+  (#2683)\n+- fixed Python 3 related str decoding issue in breadcrumbs (#2694)\n+- Fixed unstable robot test Scenario: A page is opened to edit in TinyMCE.\n+  [maurits] (#2707)\n+\n \n 5.2a2 (2018-12-30)\n ------------------\ndiff --git a/Products/CMFPlone/controlpanel/browser/configure.zcml b/Products/CMFPlone/controlpanel/browser/configure.zcml\nindex 5115a526a..ffab4c50d 100644\n--- a/Products/CMFPlone/controlpanel/browser/configure.zcml\n+++ b/Products/CMFPlone/controlpanel/browser/configure.zcml\n@@ -291,4 +291,31 @@\n       permission="cmf.ManagePortal"\n       />\n \n+  <permission\n+      id="Products.CMFPlone.ManagePortalAliases"\n+      title="Manage Portal Aliases"\n+      />\n+\n+  <permission\n+      id="Products.CMFPlone.ManageContextAliases"\n+      title="Manage Context Aliases"\n+      />\n+\n+  <browser:page\n+      name="redirection-controlpanel"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      class=".redirects.RedirectsControlPanel"\n+      template="redirects-controlpanel.pt"\n+      permission="Products.CMFPlone.ManagePortalAliases"\n+      />\n+\n+  <browser:page\n+      name="manage-aliases"\n+      for="Products.CMFCore.interfaces.IContentish"\n+      class=".redirects.RedirectsView"\n+      template="redirects-manage.pt"\n+      permission="Products.CMFPlone.ManageContextAliases"\n+      allowed_attributes="redirects view_url"\n+      />\n+\n </configure>\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\nnew file mode 100644\nindex 000000000..e458585f8\n--- /dev/null\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n@@ -0,0 +1,257 @@\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xml:lang="en" lang="en"\n+      metal:use-macro="context/prefs_main_template/macros/master"\n+      i18n:domain="plone">\n+\n+  <body>\n+    <div metal:fill-slot="prefs_configlet_main">\n+      <dl\n+          tal:condition="view/csv_errors|nothing"\n+          class="portalMessage error">\n+        <dt i18n:translate="">Error</dt>\n+        <dd>\n+          <p i18n:translate="error_bulk_upload">\n+            No alternative urls were added. Please correct these errors in your CSV file and try again:\n+          </p>\n+          <table\n+              style="text-align: left; vertical-align: top"\n+              border="0"\n+              cellpadding="2"\n+              cellspacing="0">\n+            <tr tal:repeat="error view/csv_errors"\n+                style="vertical-align: top">\n+              <td nowrap="nowrap">\n+                <tal:block i18n:translate="label_bulk_upload_line">\n+                  Line\n+                </tal:block>\n+                ${error/line_number}\n+                <tal:block i18n:translate="label_bulk_upload_line_suffix">\n+                  :\n+                </tal:block>\n+              </td>\n+              <td>\n+                ${error/line}\n+              </td>\n+              <td>\n+                ${error/message}\n+              </td>\n+            </tr>\n+          </table>\n+        </dd>\n+      </dl>\n+\n+      <h1 i18n:translate="">\n+        URL Management\n+      </h1>\n+\n+      <form\n+          action="${view/view_url}"\n+          method="post">\n+        <fieldset>\n+          <legend i18n:translate="add_alias">\n+            Add a new alternative url\n+          </legend>\n+\n+          <div class="field"\n+               tal:define="error view/form_errors/redirection|nothing"\n+               tal:attributes="class python:error and \'field error\' or \'field\'">\n+\n+          <label\n+              for="redirection"\n+              i18n:translate="label_alias">\n+            Alternative url path\n+          </label>\n+\n+          <span\n+              class="fieldRequired"\n+              title="Required"\n+              i18n:attributes="title"\n+              i18n:translate="label_required">\n+            (Required)\n+          </span>\n+\n+            <div tal:content="error">\n+              Validation error output\n+            </div>\n+\n+          <div class="formHelp" i18n:translate="help_alias">\n+            Enter the absolute path where the alternative url should exist. The path must start with \'/\'.\n+          </div>\n+\n+          <input\n+              type="text"\n+              name="redirection"\n+              value="#"\n+              size="40"\n+              tal:attributes="value request/redirection | nothing;"/>\n+          </div>\n+\n+          <div class="field"\n+               tal:define="error view/form_errors/target_path|nothing"\n+               tal:attributes="class python:error and \'field error\' or \'field\'">\n+\n+          <label for="target_path"\n+              i18n:translate="label_target_path">\n+              Target Path\n+          </label>\n+\n+          <span\n+              class="fieldRequired"\n+              title="Required"\n+              i18n:attributes="title"\n+              i18n:translate="label_required">\n+            (Required)\n+          </span>\n+\n+            <div tal:content="error">\n+              Validation error output\n+            </div>\n+\n+          <div class="formHelp" i18n:translate="help_target_path">\n+            Enter the absolute path of the target. The path must start with \'/\'.\n+          </div>\n+\n+          <input\n+              type="text"\n+              name="target_path"\n+              value="#"\n+              size="40"\n+              tal:attributes="value request/target_path | nothing;"/>\n+          </div>\n+\n+          <div class="formControls">\n+            <input class="context"\n+                   type="submit"\n+                   value="Add"\n+                   name="form.button.Add"\n+                   i18n:attributes="value" />\n+          </div>\n+\n+        </fieldset>\n+      </form>\n+\n+\n+      <form\n+          action="${view/view_url}"\n+          method="post"\n+          enctype="multipart/form-data">\n+        <fieldset>\n+          <legend i18n:translate="legend_bulk_upload">\n+            Bulk-upload alternative urls\n+          </legend>\n+\n+          <p i18n:translate="description_bulk_upload">\n+            Add many alternative urls at once by uploading a CSV file. The first column should be the path to\n+            redirect from; the second, the path to redirect to. Both paths must be Plone-site-relative,\n+            starting with a slash (/).\n+          </p>\n+          <p>\n+            <tal:block i18n:translate="example_caption_bulk_upload">Example:</tal:block><br />\n+            <code i18n:translate="example_bulk_upload">\n+              /old-home-page.asp,/front-page<br />\n+              /people/JoeT,/Users/joe-thurston\n+            </code>\n+          </p>\n+\n+          <div class="field"\n+               tal:define="error view/form_errors/file|nothing"\n+               tal:attributes="class python:error and \'field error\' or \'field\'">\n+            <label\n+                for="file"\n+                i18n:translate="label_file">\n+              CSV file\n+            </label>\n+\n+            <span\n+                class="fieldRequired"\n+                title="Required"\n+                i18n:attributes="title"\n+                i18n:translate="label_required">\n+              (Required)\n+            </span>\n+\n+            <div tal:content="error">\n+              Validation error output\n+            </div>\n+            <input\n+              type="file"\n+              name="file" />\n+          </div>\n+\n+          <div class="formControls">\n+            <input\n+                class="context"\n+                type="submit"\n+                value="Upload"\n+                name="form.button.Upload"\n+                i18n:attributes="value"\n+              />\n+          </div>\n+\n+        </fieldset>\n+      </form>\n+\n+      <form\n+          action="${view/view_url}#manage-existing-aliases"\n+          method="post"\n+          id="manage-existing-aliases">\n+        <fieldset\n+          tal:define="batch view/redirects">\n+          <legend i18n:translate="legend_all_existing_aliases">\n+            All existing alternative urls for this site\n+          </legend>\n+\n+          <label for="filter-existing-aliases-q" i18n:translate="">Filter by prefix</label>\n+          <input\n+              type="text"\n+              name="q"\n+              value=""\n+              id="filter-existing-aliases-q"\n+               tal:attributes="value python:request.form.get(\'q\', \'/\')"/>\n+          <div class="formControls">\n+            <input\n+                class="context"\n+                type="submit"\n+                value="Filter"\n+                name="form.button.filter"\n+                 i18n:attributes="value" />\n+          </div>\n+\n+          <div class="field"\n+               tal:define="error view/form_errors/remove_redirects|nothing"\n+               tal:attributes="class python:error and \'field error\' or \'field\'"\n+               tal:content="error" />\n+\n+          <tal:redirects repeat="redirect batch">\n+            <div>\n+              <label>\n+              <input\n+                  type="checkbox"\n+                  class="noborder"\n+                  name="redirects:tuple"\n+                  value="${redirect/redirect}" />\n+              ${redirect/path} &rarr; ${redirect/redirect-to}\n+              </label>\n+            </div>\n+          </tal:redirects>\n+\n+          <div tal:condition="python:batch.numpages > 1"\n+               tal:replace="structure view/batching">\n+          </div>\n+\n+          <div class="formControls">\n+            <input class="context"\n+                   type="submit"\n+                   value="Remove"\n+                   name="form.button.Remove"\n+                   i18n:attributes="value" />\n+          </div>\n+\n+        </fieldset>\n+      </form>\n+    </div>\n+  </body>\n+</html>\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects-manage.pt b/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\nnew file mode 100644\nindex 000000000..1ae3ba337\n--- /dev/null\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\n@@ -0,0 +1,129 @@\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xml:lang="en-US" lang="en-US"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      metal:use-macro="here/main_template/macros/master"\n+      i18n:domain="plone">\n+\n+  <body>\n+    <div\n+        metal:fill-slot="main"\n+        tal:define="context_state context/@@plone_context_state">\n+      <h1\n+          class="documentFirstHeading"\n+          i18n:translate="">\n+        URL Management\n+      </h1>\n+\n+      <dl\n+          class="portalMessage info"\n+          tal:condition="context_state/is_default_page">\n+        <dt i18n:translate="">\n+          Info\n+        </dt>\n+        <dd i18n:translate="help_sharing_page_default_page">\n+          You are managing the alternative urls of a default view in a container.\n+          To manage them for the entire container,\n+          <a\n+              i18n:name="go_here"\n+              i18n:translate="help_aliases_go_here"\n+              tal:define="folder context_state/folder"\n+              tal:attributes="href string:${folder/absolute_url}/@@manage-aliases">\n+            go here\n+          </a>.\n+        </dd>\n+      </dl>\n+\n+      <p i18n:translate="description_adding_aliases">\n+        Using this form, you can manage alternative urls for an item. This\n+        is an easy way to make an item available under two different URLs.\n+      </p>\n+\n+      <form\n+          action="${view/view_url}"\n+          method="post">\n+        <fieldset>\n+          <legend i18n:translate="add_alias">\n+            Add a new alternative url\n+          </legend>\n+\n+          <div class="field"\n+               tal:define="error options/errors/redirection|nothing"\n+               tal:attributes="class python:error and \'field error\' or \'field\'">\n+            <label\n+                for="redirection"\n+                i18n:translate="label_alias">\n+              Alternative url path\n+            </label>\n+\n+            <span\n+                class="fieldRequired"\n+                title="Required"\n+                i18n:attributes="title"\n+                i18n:translate="label_required">\n+              (Required)\n+            </span>\n+\n+            <div tal:content="error">\n+              Validation error output\n+            </div>\n+\n+            <div class="formHelp" i18n:translate="help_alias">\n+              Enter the absolute path where the alternative url should exist. The path must start with \'/\'.\n+            </div>\n+\n+            <input\n+                type="text"\n+                name="redirection"\n+                value="#"\n+                size="40"\n+                tal:attributes="value request/redirection | nothing;"/>\n+          </div>\n+          <div class="formControls">\n+            <input\n+                class="context"\n+                type="submit"\n+                value="Add"\n+                name="form.button.Add"\n+                i18n:attributes="value" />\n+          </div>\n+\n+        </fieldset>\n+      </form>\n+\n+      <form\n+          action="${view/view_url}"\n+          method="post">\n+        <fieldset>\n+          <legend i18n:translate="legend_existing_aliases">\n+            Existing alternative urls for this item\n+          </legend>\n+\n+          <tal:redirects repeat="redirect view/redirects">\n+            <div>\n+              <label>\n+              <input\n+                  type="checkbox"\n+                  class="noborder"\n+                  name="redirects:tuple"\n+                  value="${redirect/redirect}" />\n+                ${redirect/path}\n+              </label>\n+            </div>\n+          </tal:redirects>\n+\n+          <div class="formControls">\n+            <input\n+                class="context"\n+                type="submit"\n+                value="Remove"\n+                name="form.button.Remove"\n+                i18n:attributes="value" />\n+          </div>\n+\n+        </fieldset>\n+      </form>\n+    </div>\n+  </body>\n+</html>\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nnew file mode 100644\nindex 000000000..2899ad1bf\n--- /dev/null\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -0,0 +1,368 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.redirector.interfaces import IRedirectionStorage\n+from plone.batching.browser import PloneBatchView\n+from plone.memoize.view import memoize\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.PloneBatch import Batch\n+from Products.CMFPlone.utils import safe_text\n+from Products.Five.browser import BrowserView\n+from Products.statusmessages.interfaces import IStatusMessage\n+from six import StringIO\n+from six.moves.urllib.parse import urlparse\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.component.hooks import getSite\n+from zope.i18nmessageid import MessageFactory\n+\n+import csv\n+\n+\n+_ = MessageFactory(\'plone\')\n+\n+\n+def absolutize_path(path, is_source=True):\n+    """Create path including the path of the portal root.\n+\n+    The path must be absolute, so starting with a slash.\n+    Or it can be a full url.\n+\n+    If is_source is true, this is an alternative url\n+    that will point to a target (unknown here).\n+\n+    If is_source is true, path is the path of a target.\n+    An object must exist at this path, unless it is a full url.\n+\n+    Return a 2-tuple: (absolute redirection path,\n+    an error message if something goes wrong and otherwise \'\').\n+    """\n+\n+    portal = getSite()\n+    err = None\n+    is_external_url = False\n+    if not path:\n+        if is_source:\n+            err = _(u"You have to enter an alternative url.")\n+        else:\n+            err = _(u"You have to enter a target.")\n+    elif not path.startswith(\'/\'):\n+        if is_source:\n+            err = _(u"Alternative url path must start with a slash.")\n+        else:\n+            # For targets, we accept external urls.\n+            # Do basic check.\n+            parsed = urlparse(path)\n+            if parsed.scheme in (\'https\', \'http\') and parsed.netloc:\n+                is_external_url = True\n+            else:\n+                err = _(u"Target path must start with a slash.")\n+    elif \'@@\' in path:\n+        if is_source:\n+            err = _(u"Alternative url path must not be a view.")\n+        else:\n+            err = _(u"Target path must not be a view.")\n+    else:\n+        context_path = "/".join(portal.getPhysicalPath())\n+        path = "{0}{1}".format(context_path, path)\n+    if not err and not is_external_url:\n+        catalog = getToolByName(portal, \'portal_catalog\')\n+        if is_source:\n+            # Check whether already exists in storage\n+            storage = getUtility(IRedirectionStorage)\n+            if storage.get(path):\n+                err = _(u"The provided alternative url already exists!")\n+            else:\n+                # Check whether obj exists at source path.\n+                # A redirect would be useless then.\n+                if portal.unrestrictedTraverse(path, None) is not None:\n+                    err = _(u"Cannot use a working path as alternative url.")\n+        else:\n+            # Check whether obj exists at target path\n+            result = catalog.searchResults(path={"query": path})\n+            if len(result) == 0:\n+                err = _(u"The provided target object does not exist.")\n+\n+    return path, err\n+\n+\n+class RedirectsView(BrowserView):\n+    def redirects(self):\n+        storage = getUtility(IRedirectionStorage)\n+        portal = getSite()\n+        context_path = "/".join(self.context.getPhysicalPath())\n+        portal_path = "/".join(portal.getPhysicalPath())\n+        redirects = storage.redirects(context_path)\n+        for redirect in redirects:\n+            path = redirect[len(portal_path) :]\n+            yield {\'redirect\': redirect, \'path\': path}\n+\n+    def __call__(self):\n+        storage = getUtility(IRedirectionStorage)\n+        request = self.request\n+        form = request.form\n+        status = IStatusMessage(self.request)\n+        errors = {}\n+\n+        if \'form.button.Add\' in form:\n+            redirection = form.get(\'redirection\')\n+            if redirection and redirection.startswith(\'/\'):\n+                # Check navigation root\n+                pps = getMultiAdapter(\n+                    (self.context, self.request), name=\'plone_portal_state\'\n+                )\n+                nav_url = pps.navigation_root_url()\n+                portal_url = pps.portal_url()\n+                if nav_url != portal_url:\n+                    # We are in a navigation root different from the portal root.\n+                    # Update the path accordingly, unless the user already did this.\n+                    extra = nav_url[len(portal_url) :]\n+                    if not redirection.startswith(extra):\n+                        redirection = \'{0}{1}\'.format(extra, redirection)\n+\n+            redirection, err = absolutize_path(redirection, is_source=True)\n+            if err:\n+                errors[\'redirection\'] = err\n+                status.addStatusMessage(err, type=\'error\')\n+            else:\n+                del form[\'redirection\']\n+                storage.add(\n+                    redirection, "/".join(self.context.getPhysicalPath())\n+                )\n+                status.addStatusMessage(\n+                    _(u"Alternative url added."), type=\'info\'\n+                )\n+        elif \'form.button.Remove\' in form:\n+            redirects = form.get(\'redirects\', ())\n+            for redirect in redirects:\n+                storage.remove(redirect)\n+            if len(redirects) > 1:\n+                status.addStatusMessage(\n+                    _(u"Alternative urls removed."), type=\'info\'\n+                )\n+            else:\n+                status.addStatusMessage(\n+                    _(u"Alternative url removed."), type=\'info\'\n+                )\n+\n+        return self.index(errors=errors)\n+\n+    @memoize\n+    def view_url(self):\n+        return self.context.absolute_url() + \'/@@manage-aliases\'\n+\n+\n+class RedirectionSet(object):\n+    def __init__(self, query=\'\'):\n+        self.storage = getUtility(IRedirectionStorage)\n+\n+        portal = getSite()\n+        self.portal_path = \'/\'.join(portal.getPhysicalPath())\n+        self.portal_path_len = len(self.portal_path)\n+\n+        # noinspection PyProtectedMember\n+        if query:\n+            # with query path /Plone/news:\n+            # min_k is /Plone/news and\n+            # max_k is /Plone/newt\n+            # Apparently that is the way to minize the keys we ask.\n+            min_k = u\'{0:s}/{1:s}\'.format(self.portal_path, query.strip(\'/\'))\n+            max_k = min_k[:-1] + chr(ord(min_k[-1]) + 1)\n+            self.data = self.storage._paths.keys(min=min_k, max=max_k)\n+        else:\n+            self.data = self.storage._paths.keys()\n+\n+    def __len__(self):\n+        return len(self.data)\n+\n+    def __getitem__(self, item):\n+        redirect = self.data[item]\n+        if redirect.startswith(self.portal_path):\n+            path = redirect[self.portal_path_len :]\n+        else:\n+            path = redirect\n+        redirect_to = self.storage.get(redirect)\n+        if redirect_to.startswith(self.portal_path):\n+            redirect_to = redirect_to[self.portal_path_len :]\n+        return {\'redirect\': redirect, \'path\': path, \'redirect-to\': redirect_to}\n+\n+\n+class RedirectsBatchView(PloneBatchView):\n+    def make_link(self, pagenumber=None, omit_params=None):\n+        if omit_params is None:\n+            omit_params = [\'ajax_load\']\n+        url = super(RedirectsBatchView, self).make_link(\n+            pagenumber, omit_params\n+        )\n+        return u\'{0:s}#manage-existing-aliases\'.format(url)\n+\n+\n+class RedirectsControlPanel(BrowserView):\n+    def batching(self):\n+        return RedirectsBatchView(self.context, self.request)(self.redirects())\n+\n+    @memoize\n+    def redirects(self):\n+        """ Get existing redirects from the redirection storage.\n+            Return dict with the strings redirect, path and redirect-to.\n+            Strip the id of the instance from path and redirect-to if\n+            it is present. (Seems to be always true)\n+            If id of instance is not present in path the var \'path\' and\n+            \'redirect\' are equal.\n+        """\n+        return Batch(\n+            RedirectionSet(self.request.form.get(\'q\', \'\')),\n+            15,\n+            int(self.request.form.get(\'b_start\', \'0\')),\n+            orphan=1,\n+        )\n+\n+    def __call__(self):\n+        storage = getUtility(IRedirectionStorage)\n+        portal = getSite()\n+        request = self.request\n+        form = request.form\n+        status = IStatusMessage(self.request)\n+        # We make a difference between errors when uploading a csv,\n+        # and errors in form submit.\n+        self.csv_errors = []\n+        self.form_errors = {}\n+\n+        if \'form.button.Remove\' in form:\n+            redirects = form.get(\'redirects\', ())\n+            for redirect in redirects:\n+                storage.remove(redirect)\n+            if len(redirects) == 0:\n+                err = _(u"No alternative urls selected for removal.")\n+                status.addStatusMessage(err, type=\'error\')\n+                self.form_errors[\'remove_redirects\'] = err\n+            elif len(redirects) > 1:\n+                status.addStatusMessage(\n+                    _(u"Alternative urls removed."), type=\'info\'\n+                )\n+            else:\n+                status.addStatusMessage(\n+                    _(u"Alternative url removed."), type=\'info\'\n+                )\n+        elif \'form.button.Add\' in form:\n+            err = self.add(\n+                form[\'redirection\'],\n+                form[\'target_path\'],\n+                portal,\n+                storage,\n+                status,\n+            )\n+            if not err:\n+                # clear our the form\n+                del form[\'redirection\']\n+                del form[\'target_path\']\n+        elif \'form.button.Upload\' in form:\n+            self.upload(form[\'file\'], portal, storage, status)\n+\n+        return self.index()\n+\n+    def add(self, redirection, target, portal, storage, status):\n+        """Add the redirections from the form. If anything goes wrong, do nothing.\n+\n+        Returns error message or nothing.\n+        """\n+        abs_redirection, err = absolutize_path(redirection, is_source=True)\n+        if err:\n+            self.form_errors[\'redirection\'] = err\n+        abs_target, target_err = absolutize_path(target, is_source=False)\n+        if target_err:\n+            self.form_errors[\'target_path\'] = target_err\n+\n+        if err and target_err:\n+            err = "{0} {1}".format(err, target_err)\n+        elif target_err:\n+            err = target_err\n+        else:\n+            if abs_redirection == abs_target:\n+                err = _(\n+                    u"Alternative urls that point to themselves will cause"\n+                    u"an endless cycle of redirects."\n+                )\n+                # TODO: detect indirect recursion\n+\n+        if err:\n+            status.addStatusMessage(_(err), type=\'error\')\n+        else:\n+            storage.add(abs_redirection, abs_target)\n+            status.addStatusMessage(\n+                _(u"Alternative url from {0} to {1} added.").format(\n+                    abs_redirection, abs_target\n+                ),\n+                type=\'info\',\n+            )\n+        return err\n+\n+    def upload(self, file, portal, storage, status):\n+        """Add the redirections from the CSV file `file`. If anything goes wrong, do nothing."""\n+\n+        # No file picked. Theres gotta be a better way to handle this.\n+        if not file.filename:\n+            err = _(u"Please pick a file to upload.")\n+            status.addStatusMessage(err, type=\'error\')\n+            self.form_errors[\'file\'] = err\n+            return\n+        # Turn all kinds of newlines into LF ones. The csv module doesn\'t do\n+        # its own newline sniffing and requires either \\n or \\r.\n+        contents = safe_text(file.read()).splitlines()\n+        file = StringIO(\'\\n\'.join(contents))\n+\n+        # Use first two lines as a representative sample for guessing format,\n+        # in case one is a bunch of headers.\n+        dialect = csv.Sniffer().sniff(file.readline() + file.readline())\n+        file.seek(0)\n+\n+        successes = []  # list of tuples: (abs_redirection, target)\n+        had_errors = False\n+        for i, fields in enumerate(csv.reader(file, dialect)):\n+            if len(fields) == 2:\n+                redirection, target = fields\n+                abs_redirection, err = absolutize_path(\n+                    redirection, is_source=True\n+                )\n+                abs_target, target_err = absolutize_path(\n+                    target, is_source=False\n+                )\n+                if err and target_err:\n+                    err = "%s %s" % (err, target_err)  # sloppy w.r.t. i18n\n+                elif target_err:\n+                    err = target_err\n+                else:\n+                    if abs_redirection == abs_target:\n+                        # TODO: detect indirect recursion\n+                        err = _(\n+                            u"Alternative urls that point to themselves will cause"\n+                            u"an endless cycle of redirects."\n+                        )\n+            else:\n+                err = _(u"Each line must have 2 columns.")\n+\n+            if not err:\n+                if not had_errors:  # else don\'t bother\n+                    successes.append((abs_redirection, abs_target))\n+            else:\n+                had_errors = True\n+                self.csv_errors.append(\n+                    dict(\n+                        line_number=i + 1,\n+                        line=dialect.delimiter.join(fields),\n+                        message=err,\n+                    )\n+                )\n+\n+        if not had_errors:\n+            for abs_redirection, abs_target in successes:\n+                storage.add(abs_redirection, abs_target)\n+            status.addStatusMessage(\n+                _(\n+                    u"${count} alternative urls added.",\n+                    mapping={\'count\': len(successes)},\n+                ),\n+                type=\'info\',\n+            )\n+\n+    @memoize\n+    def view_url(self):\n+        return self.context.absolute_url() + \'/@@redirection-controlpanel\'\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nnew file mode 100644\nindex 000000000..cd36ef3ed\n--- /dev/null\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -0,0 +1,420 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.redirector.interfaces import IRedirectionStorage\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.testing.z2 import Browser\n+from Products.CMFPlone.controlpanel.browser.redirects import RedirectionSet\n+from Products.CMFPlone.PloneBatch import Batch\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+\n+import math\n+import transaction\n+import unittest\n+\n+\n+class RedirectionControlPanelFunctionalTest(unittest.TestCase):\n+    """Test that changes in the redirection control panel are actually\n+    stored in the registry.\n+    """\n+\n+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer[\'app\']\n+        self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n+        self.browser = Browser(self.app)\n+        self.browser.handleErrors = False\n+        self.browser.addHeader(\n+            \'Authorization\',\n+            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+        )\n+\n+    def test_redirection_controlpanel_link(self):\n+        self.browser.open("%s/@@overview-controlpanel" % self.portal_url)\n+        self.browser.getLink(\'URL Management\').click()\n+\n+    def test_redirection_controlpanel_backlink(self):\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.assertTrue("General" in self.browser.contents)\n+\n+    def test_redirection_controlpanel_sidebar(self):\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getLink(\'Site Setup\').click()\n+        self.assertTrue(\n+            self.browser.url.endswith(\'/plone/@@overview-controlpanel\')\n+        )\n+\n+    def test_redirection_controlpanel_view(self):\n+        view = getMultiAdapter(\n+            (self.portal, self.portal.REQUEST), name="redirection-controlpanel"\n+        )\n+        self.assertTrue(view())\n+\n+    def test_redirection_controlpanel_add_redirect(self):\n+        storage = getUtility(IRedirectionStorage)\n+        redirection_path = \'/alias-folder\'\n+        target_path = \'/test-folder\'\n+        storage_path = \'/plone/alias-folder\'\n+\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'redirection\').value = redirection_path\n+        self.browser.getControl(name=\'target_path\').value = target_path\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            storage.has_path(storage_path),\n+            u\'Redirection storage should have path "{0}"\'.format(storage_path),\n+        )\n+\n+    def test_redirection_controlpanel_set(self):\n+        storage = getUtility(IRedirectionStorage)\n+        portal_path = self.layer[\'portal\'].absolute_url_path()\n+        for i in range(1000):\n+            storage.add(\n+                \'{0:s}/foo/{1:s}\'.format(portal_path, str(i)),\n+                \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n+            )\n+        redirects = RedirectionSet()\n+        self.assertEqual(len(redirects), 1000)\n+        self.assertDictEqual(\n+            redirects[0],\n+            {\n+                \'redirect\': \'{0:s}/foo/0\'.format(portal_path),\n+                \'path\': \'/foo/0\',\n+                \'redirect-to\': \'/bar/0\',\n+            },\n+        )\n+        self.assertDictEqual(\n+            redirects[999],\n+            {\n+                \'redirect\': \'{0:s}/foo/999\'.format(portal_path),\n+                \'path\': \'/foo/999\',\n+                \'redirect-to\': \'/bar/999\',\n+            },\n+        )\n+        self.assertEqual(len(list(iter(redirects))), 1000)\n+        self.assertDictEqual(\n+            list(iter(redirects))[0],\n+            {\n+                \'redirect\': \'{0:s}/foo/0\'.format(portal_path),\n+                \'path\': \'/foo/0\',\n+                \'redirect-to\': \'/bar/0\',\n+            },\n+        )\n+\n+    def test_redirection_controlpanel_batching(self):\n+        storage = getUtility(IRedirectionStorage)\n+        portal_path = self.layer[\'portal\'].absolute_url_path()\n+        for i in range(1000):\n+            storage.add(\n+                \'{0:s}/foo/{1:s}\'.format(portal_path, str(i)),\n+                \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n+            )\n+        view = getMultiAdapter(\n+            (self.layer[\'portal\'], self.layer[\'request\']),\n+            name=\'redirection-controlpanel\',\n+        )\n+        # Test that view/redirects returns batch\n+        self.assertIsInstance(view.redirects(), Batch)\n+\n+        # Test that view/batching returns batching with anchor in urls\n+        batching = view.batching()\n+        self.assertIn(\'?b_start:int=990#manage-existing-aliases\', batching)\n+\n+    def test_redirection_controlpanel_redirect_alias_exists(self):\n+        path_alias = \'/alias\'\n+        path_target = \'/test-folder\'\n+        storage_alias = \'/plone{0}\'.format(path_alias)\n+        storage_target = \'/plone{0}\'.format(path_target)\n+        storage = getUtility(IRedirectionStorage)\n+        storage.add(storage_alias, storage_target)\n+        transaction.commit()\n+\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'redirection\').value = path_alias\n+        self.browser.getControl(name=\'target_path\').value = path_target\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            storage.get(storage_alias) == storage_target,\n+            \'{0} not target of alternative url!\'.format(storage_target),\n+        )\n+        self.assertTrue(\n+            \'The provided alternative url already exists!\'\n+            in self.browser.contents,\n+            u\'Message "alternative url already exists" not in page!\',\n+        )\n+\n+    def test_redirection_controlpanel_filtering(self):\n+        storage = getUtility(IRedirectionStorage)\n+        portal_path = self.layer[\'portal\'].absolute_url_path()\n+        for i in range(1000):\n+            storage.add(\n+                \'{0:s}/foo1/{1:s}\'.format(portal_path, str(i)),\n+                \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n+            )\n+        for i in range(1000):\n+            storage.add(\n+                \'{0:s}/foo2/{1:s}\'.format(portal_path, str(i)),\n+                \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n+            )\n+\n+        redirects = RedirectionSet()\n+        self.assertEqual(len(redirects), 2000)\n+        redirects = RedirectionSet(query=\'/foo\')\n+        self.assertEqual(len(redirects), 2000)\n+        redirects = RedirectionSet(query=\'/foo1\')\n+        self.assertEqual(len(redirects), 1000)\n+        redirects = RedirectionSet(query=\'/foo2\')\n+        self.assertEqual(len(redirects), 1000)\n+\n+        request = self.layer[\'request\'].clone()\n+        request.form[\'q\'] = \'/foo\'\n+        view = getMultiAdapter(\n+            (self.layer[\'portal\'], request), name=\'redirection-controlpanel\'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(2000 / 15.0))\n+\n+        request = self.layer[\'request\'].clone()\n+        request.form[\'q\'] = \'/foo1\'\n+        view = getMultiAdapter(\n+            (self.layer[\'portal\'], request), name=\'redirection-controlpanel\'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(1000 / 15.0))\n+\n+        request = self.layer[\'request\'].clone()\n+        request.form[\'q\'] = \'/foo2\'\n+        view = getMultiAdapter(\n+            (self.layer[\'portal\'], request), name=\'redirection-controlpanel\'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(1000 / 15.0))\n+\n+        request = self.layer[\'request\'].clone()\n+        view = getMultiAdapter(\n+            (self.layer[\'portal\'], request), name=\'redirection-controlpanel\'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(2000 / 15.0))\n+\n+        # Filtering without new request does not have effect because memoize\n+        request.form[\'q\'] = \'/foo2\'\n+        self.assertEqual(view.redirects().numpages, math.ceil(2000 / 15.0))\n+\n+    def test_redirection_controlpanel_redirect_no_target(self):\n+        path_alias = \'/alias\'\n+        path_target = \'/not-existing\'\n+\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'redirection\').value = path_alias\n+        self.browser.getControl(name=\'target_path\').value = path_target\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            \'The provided target object does not exist.\'\n+            in self.browser.contents,\n+            u\'Message "target does not exist" not in page!\',\n+        )\n+\n+    def test_redirection_controlpanel_missing_slash_target(self):\n+        path_alias = \'/alias\'\n+        path_target = \'Members\'\n+\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'redirection\').value = path_alias\n+        self.browser.getControl(name=\'target_path\').value = path_target\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            \'Target path must start with a slash.\' in self.browser.contents,\n+            u\'Errormessage for missing slash on target path missing\',\n+        )\n+\n+    def test_redirection_controlpanel_missing_slash_alias(self):\n+        path_alias = \'alias\'\n+        path_target = \'/Members\'\n+\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'redirection\').value = path_alias\n+        self.browser.getControl(name=\'target_path\').value = path_target\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            \'Alternative url path must start with a slash.\'\n+            in self.browser.contents,\n+            u\'Errormessage for missing slash on alternative url missing\',\n+        )\n+\n+    def test_manage_aliases_standard(self):\n+        storage = getUtility(IRedirectionStorage)\n+        folder = self.portal[\'test-folder\']\n+\n+        self.browser.open("%s/@@manage-aliases" % folder.absolute_url())\n+        self.browser.getControl(name=\'redirection\').value = \'/alias\'\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            \'Alternative url added.\' in self.browser.contents,\n+            u\'Message for added alternative url missing\',\n+        )\n+        self.assertTrue(storage.has_path(\'/plone/alias\'))\n+        self.assertEqual(storage.get(\'/plone/alias\'), \'/plone/test-folder\')\n+\n+    def test_manage_aliases_navigation_root(self):\n+        from zope.interface import alsoProvides\n+        from plone.app.layout.navigation.interfaces import INavigationRoot\n+\n+        storage = getUtility(IRedirectionStorage)\n+        folder = self.portal[\'test-folder\']\n+        alsoProvides(folder, INavigationRoot)\n+        transaction.commit()\n+\n+        self.browser.open("%s/@@manage-aliases" % folder.absolute_url())\n+        self.browser.getControl(name=\'redirection\').value = \'/alias\'\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            \'Alternative url added.\' in self.browser.contents,\n+            u\'Message for added alternative url missing\',\n+        )\n+        self.assertTrue(storage.has_path(\'/plone/test-folder/alias\'))\n+        self.assertEqual(\n+            storage.get(\'/plone/test-folder/alias\'), \'/plone/test-folder\'\n+        )\n+\n+        # Add the navigation root path explicitly.\n+        self.browser.getControl(\n+            name=\'redirection\'\n+        ).value = \'/test-folder/alias2\'\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            \'Alternative url added.\' in self.browser.contents,\n+            u\'Message for added alternative url missing\',\n+        )\n+        self.assertTrue(storage.has_path(\'/plone/test-folder/alias2\'))\n+        self.assertEqual(\n+            storage.get(\'/plone/test-folder/alias2\'), \'/plone/test-folder\'\n+        )\n+\n+    def test_absolutize_path(self):\n+        # absolutize_path is a helper function that returns a tuple\n+        # of absolute path and error message.\n+        from Products.CMFPlone.controlpanel.browser.redirects import (\n+            absolutize_path as ap,\n+        )\n+\n+        # A path is required.\n+        self.assertEqual(ap(\'\'), (\'\', \'You have to enter an alternative url.\'))\n+        self.assertEqual(\n+            ap(\'\', is_source=False), (\'\', \'You have to enter a target.\')\n+        )\n+\n+        # relative paths are not accepted\n+        self.assertEqual(\n+            ap(\'foo\'), (\'foo\', \'Alternative url path must start with a slash.\')\n+        )\n+        self.assertEqual(\n+            ap(\'foo\', is_source=True),\n+            (\'foo\', \'Alternative url path must start with a slash.\'),\n+        )\n+        self.assertEqual(\n+            ap(\'foo\', is_source=False),\n+            (\'foo\', \'Target path must start with a slash.\'),\n+        )\n+\n+        # absolute paths are good\n+        self.assertEqual(ap(\'/foo\'), (\'/plone/foo\', None))\n+        self.assertEqual(ap(\'/foo\', is_source=True), (\'/plone/foo\', None))\n+\n+        # for targets, an object must exist on the path\n+        self.assertEqual(\n+            ap(\'/foo\', is_source=False),\n+            (\'/plone/foo\', \'The provided target object does not exist.\'),\n+        )\n+        self.assertEqual(\n+            ap(\'/test-folder\', is_source=False), (\'/plone/test-folder\', None)\n+        )\n+        self.assertEqual(\n+            ap(\'/test-folder/@@sharing\', is_source=False),\n+            (\'/test-folder/@@sharing\', \'Target path must not be a view.\'),\n+        )\n+\n+        # A source must not exist.\n+        self.assertEqual(\n+            ap(\'/test-folder\'),\n+            (\n+                \'/plone/test-folder\',\n+                \'Cannot use a working path as alternative url.\',\n+            ),\n+        )\n+        # More general: a source must not be traversable already.\n+        self.assertEqual(\n+            ap(\'/view\'),\n+            (\'/plone/view\', \'Cannot use a working path as alternative url.\'),\n+        )\n+        self.assertEqual(\n+            ap(\'/@@overview-controlpanel\'),\n+            (\n+                \'/@@overview-controlpanel\',\n+                \'Alternative url path must not be a view.\',\n+            ),\n+        )\n+\n+        # And a source must not exist via (implicit) acquisition.\n+        # We might *want* to allow this, but such a redirect would not have effect,\n+        # because acquisition happens earlier.\n+        # See https://github.com/collective/Products.RedirectionTool/issues/12\n+        self.portal.invokeFactory(\'Document\', \'doc\')\n+        self.assertEqual(\n+            ap(\'/test-folder/doc\'),\n+            (\n+                \'/plone/test-folder/doc\',\n+                \'Cannot use a working path as alternative url.\',\n+            ),\n+        )\n+\n+        # A source must not already exist in the redirect list.\n+        storage = getUtility(IRedirectionStorage)\n+        portal_path = self.portal.absolute_url_path()\n+        storage.add(\n+            \'{0:s}/foo\'.format(portal_path),\n+            \'{0:s}/test-folder\'.format(portal_path),\n+        )\n+        self.assertEqual(\n+            ap(\'/foo\', is_source=True),\n+            (\'/plone/foo\', \'The provided alternative url already exists!\'),\n+        )\n+\n+        # For targets, we now accept external urls.\n+        # Note that this can only be done on the control panel,\n+        # so by default only by Site Administrators or Managers.\n+        self.assertEqual(\n+            ap(\'https://example.org\', is_source=False),\n+            (\'https://example.org\', None),\n+        )\n+        self.assertEqual(\n+            ap(\'http://example.org\', is_source=False),\n+            (\'http://example.org\', None),\n+        )\n+        self.assertEqual(\n+            ap(\n+                \'https://example.org/some/path?foo=bar&bar=foo\',\n+                is_source=False,\n+            ),\n+            (\'https://example.org/some/path?foo=bar&bar=foo\', None),\n+        )\n+        self.assertEqual(\n+            ap(\'http://\', is_source=False),\n+            (\'http://\', \'Target path must start with a slash.\'),\n+        )\n+        # Using \'//\' to ignore http/https differences seems useless,\n+        # as we don\'t include content but only link to it.\n+        self.assertEqual(\n+            ap(\'//example.org\', is_source=False),\n+            (\n+                \'/plone//example.org\',\n+                \'The provided target object does not exist.\',\n+            ),\n+        )\ndiff --git a/Products/CMFPlone/profiles/default/actions.xml b/Products/CMFPlone/profiles/default/actions.xml\nindex 4acce12ee..103553962 100644\n--- a/Products/CMFPlone/profiles/default/actions.xml\n+++ b/Products/CMFPlone/profiles/default/actions.xml\n@@ -204,6 +204,18 @@\n    </property>\n    <property name="visible">True</property>\n    <property name="modal" type="text">{}</property>\n+  </object>\n+    <object name="redirection" meta_type="CMF Action" i18n:domain="plone">\n+   <property name="title" i18n:translate="">URL Management</property>\n+   <property name="description" i18n:translate=""></property>\n+   <property\n+      name="url_expr">string: ${object_url}/@@manage-aliases</property>\n+   <property name="icon_expr"></property>\n+   <property name="available_expr">python:not globals_view.isPortalOrPortalDefaultPage()</property>\n+   <property name="permissions">\n+    <element value="Manage Context Aliases"/>\n+   </property>\n+   <property name="visible">True</property>\n   </object>\n  </object>\n  <object name="portal_tabs" meta_type="CMF Action Category">\ndiff --git a/Products/CMFPlone/profiles/default/controlpanel.xml b/Products/CMFPlone/profiles/default/controlpanel.xml\nindex 3f6b28269..ab20ff6ba 100644\n--- a/Products/CMFPlone/profiles/default/controlpanel.xml\n+++ b/Products/CMFPlone/profiles/default/controlpanel.xml\n@@ -187,4 +187,13 @@\n     i18n:attributes="title">\n   <permission>Manage portal</permission>\n  </configlet>\n+ <configlet title="URL Management" action_id="RedirectionTool"\n+    icon_expr="string:$portal_url/action_icon.png"\n+    appId="Plone" category="plone-general"\n+    condition_expr=""\n+    url_expr="string:${portal_url}/@@redirection-controlpanel"\n+    visible="True"\n+    i18n:attributes="title">\n+  <permission>Manage Portal Aliases</permission>\n+ </configlet>\n </object>\ndiff --git a/Products/CMFPlone/profiles/default/rolemap.xml b/Products/CMFPlone/profiles/default/rolemap.xml\nindex 54dd70182..04c4a4797 100644\n--- a/Products/CMFPlone/profiles/default/rolemap.xml\n+++ b/Products/CMFPlone/profiles/default/rolemap.xml\n@@ -203,5 +203,15 @@\n                 acquire="False">\n       <role name="Authenticated"/>\n     </permission>\n+    <permission name="Manage Context Aliases" acquire="True">\n+      <role name="Manager"/>\n+      <role name="Site Administrator"/>\n+      <role name="Owner"/>\n+      <role name="Editor"/>\n+    </permission>\n+    <permission name="Manage Portal Aliases" acquire="True">\n+      <role name="Manager"/>\n+      <role name="Site Administrator"/>\n+    </permission>\n   </permissions>\n </rolemap>\ndiff --git a/Products/CMFPlone/tests/robot/test_linkintegrity.robot b/Products/CMFPlone/tests/robot/test_linkintegrity.robot\nindex 38f916f68..89aa17421 100644\n--- a/Products/CMFPlone/tests/robot/test_linkintegrity.robot\n+++ b/Products/CMFPlone/tests/robot/test_linkintegrity.robot\n@@ -92,6 +92,7 @@ a link in rich text\n should show warning when deleting page\n   Go To  ${PLONE_URL}/foo\n   Click Link  css=#plone-contentmenu-actions a\n+  Wait until element is visible  css=#plone-contentmenu-actions-delete\n   Click Link  css=#plone-contentmenu-actions-delete\n   Wait until page contains element  css=.breach-container .breach-item\n \n@@ -126,6 +127,7 @@ should not show warning when deleting page from folder_contents\n should not show warning when deleting page\n   Go To  ${PLONE_URL}/foo\n   Click Link  css=#plone-contentmenu-actions a\n+  Wait until element is visible  css=#plone-contentmenu-actions-delete\n   Click Link  css=#plone-contentmenu-actions-delete\n   Page should not contain element  css=.breach-container .breach-item\n \ndiff --git a/Products/CMFPlone/tests/testPortalCreation.py b/Products/CMFPlone/tests/testPortalCreation.py\nindex 02a1703ec..faed08cac 100644\n--- a/Products/CMFPlone/tests/testPortalCreation.py\n+++ b/Products/CMFPlone/tests/testPortalCreation.py\n@@ -554,7 +554,7 @@ def testObjectButtonActionsOnDefaultDocumentDoNotApplyToParent(self):\n         self.folder.invokeFactory(\'Document\', \'index_html\')\n         acts = self.actions.listFilteredActionsFor(self.folder.index_html)\n         buttons = acts[\'object_buttons\']\n-        self.assertEqual(len(buttons), 4)\n+        self.assertEqual(len(buttons), 5)\n         urls = [a[\'url\'] for a in buttons]\n         for url in urls:\n             self.assertFalse(\n@@ -568,10 +568,13 @@ def testObjectButtonActionsPerformCorrectAction(self):\n         self.folder.invokeFactory(\'Document\', \'index_html\')\n         acts = self.actions.listFilteredActionsFor(self.folder.index_html)\n         buttons = acts[\'object_buttons\']\n-        self.assertEqual(len(buttons), 4)\n-        # special case for delete which needs a confirmation form\n+        self.assertEqual(len(buttons), 5)\n+        # special case for delete which needs a confirmation form,\n+        # and for redirection which does not confirm to the url policy,\n+        # which apparently is that action id X should have url object_X.\n         urls = [\n-            (a[\'id\'], a[\'url\']) for a in buttons if a[\'id\'] not in (\'delete\',)\n+            (a[\'id\'], a[\'url\']) for a in buttons if a[\'id\'] not in\n+            (\'delete\', \'redirection\')\n         ]\n         for url in urls:\n             # ensure that e.g. the \'copy\' url contains object_copy\n@@ -589,6 +592,11 @@ def testObjectButtonActionsPerformCorrectAction(self):\n             "object_delete does not use the confirmation form",\n         )\n \n+        redirection_action = [\n+            (a[\'id\'], a[\'url\']) for a in buttons if a[\'id\'] == \'redirection\'\n+        ][0]\n+        self.assertIn(\'@@manage-aliases\', redirection_action[1])\n+\n     def testObjectButtonActionsInExpectedOrder(self):\n         # The object buttons need to be in a standardized order\n         self.setRoles([\'Manager\', \'Member\'])\n@@ -596,11 +604,14 @@ def testObjectButtonActionsInExpectedOrder(self):\n         self.folder.cb_dataValid = True\n         acts = self.actions.listFilteredActionsFor(self.folder)\n         buttons = acts[\'object_buttons\']\n-        self.assertEqual(len(buttons), 6)\n+        self.assertEqual(len(buttons), 7)\n         ids = [(a[\'id\']) for a in buttons]\n         self.assertEqual(\n             ids,\n-            [\'cut\', \'copy\', \'paste\', \'delete\', \'rename\', \'ical_import_enable\'],\n+            [\'cut\', \'copy\', \'paste\', \'delete\', \'rename\',\n+             \'redirection\',\n+             \'ical_import_enable\',\n+             ],\n         )\n \n     def testCustomSkinFolderExists(self):\ndiff --git a/news/2258.bugfix b/news/2258.bugfix\ndeleted file mode 100644\nindex d0d434c45..000000000\n--- a/news/2258.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-deprecate catalog_get_all(catalog) in favor of catalog.getAllBrains()\n-[pbauer]\ndiff --git a/news/2464.bugfix b/news/2464.bugfix\ndeleted file mode 100644\nindex 208e85080..000000000\n--- a/news/2464.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Restore the possibility to sort catalog query results with multiple indexes\ndiff --git a/news/2516.feature b/news/2516.feature\ndeleted file mode 100644\nindex fe30bfe98..000000000\n--- a/news/2516.feature\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-- Added multilevel dropdown navigation\n-  [agitator]\ndiff --git a/news/2542.breaking b/news/2542.breaking\ndeleted file mode 100644\nindex ed83c1ae6..000000000\n--- a/news/2542.breaking\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-- Factor out all static resources and the ``plone-compile-resources`` script into plone.staticresources.\n-  [thet]\n-\ndiff --git a/news/2595.bugfix b/news/2595.bugfix\ndeleted file mode 100644\nindex 5aa8b69ba..000000000\n--- a/news/2595.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Review list portlet showed nothing to review with plone.app.multilingual, As WorkflowTool bypassed languages only for p.a.m<2.x or linguaplone. fixed and now compatible to both lang-bypassing methods.\n-[iham]\ndiff --git a/news/260.bugfix b/news/260.bugfix\ndeleted file mode 100644\nindex dcb164708..000000000\n--- a/news/260.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Switched allowedRolesAndUsers indexer from \'View\' to the correct permission \'Access contents information\' for displaying metadata. \'View\' permission should be used on the item itself. The change should not matter for default Plone workflows, since they always use those permissions together.\n-[agitator]\n\\ No newline at end of file\ndiff --git a/news/2645.bugfix b/news/2645.bugfix\ndeleted file mode 100644\nindex 415054689..000000000\n--- a/news/2645.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Fixed fallback to default view when selected layout does not exist for Folder. [gbastien]\ndiff --git a/news/2665.bugfix b/news/2665.bugfix\ndeleted file mode 100644\nindex 1cd3f0170..000000000\n--- a/news/2665.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-The patched init method for the class zope.sendmail.mailer.SMTPMailer has been updated, fixing a bug that was preventing to send emails.\n-[ale-rt, nazrulworld]\ndiff --git a/news/2675.bugfix b/news/2675.bugfix\ndeleted file mode 100644\nindex b2711e323..000000000\n--- a/news/2675.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-a11y: Added role attribute for portalMessage [nzambello]\ndiff --git a/news/2683.bugfix b/news/2683.bugfix\ndeleted file mode 100644\nindex 0aa5b2ff9..000000000\n--- a/news/2683.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Fix several warnings shown when running tests on Python 3+.\n-[gforcada]\ndiff --git a/news/2694.bugfix b/news/2694.bugfix\ndeleted file mode 100644\nindex 830b6ce5e..000000000\n--- a/news/2694.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-fixed Python 3 related str decoding issue in breadcrumbs\ndiff --git a/news/2707.bugfix b/news/2707.bugfix\ndeleted file mode 100644\nindex 55fafb884..000000000\n--- a/news/2707.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Fixed unstable robot test Scenario: A page is opened to edit in TinyMCE.\n-[maurits]\ndiff --git a/news/2736.feature b/news/2736.feature\ndeleted file mode 100644\nindex 341d8c24a..000000000\n--- a/news/2736.feature\n+++ /dev/null\n@@ -1 +0,0 @@\n-No longer mark special links by default. [pbauer]\n\\ No newline at end of file\ndiff --git a/news/2752.bugfix b/news/2752.bugfix\nnew file mode 100644\nindex 000000000..5b96ce973\n--- /dev/null\n+++ b/news/2752.bugfix\n@@ -0,0 +1,2 @@\n+- make linkintegrity robot test more reliable\n+  [MrTango]\n\\ No newline at end of file\ndiff --git a/setup.py b/setup.py\nindex 6c3118600..2a2288cca 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n from setuptools import find_packages\n \n-version = \'5.2b1.dev0\'\n+version = \'5.2b2.dev0\'\n \n \n setup(\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-18T23:53:30+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/cb5c067434694bf2366d668221e8e2f7323b5373

Merge remote-tracking branch 'origin/master' into 2516-fixup

Files changed:
M Products/CMFPlone/tests/robot/test_linkintegrity.robot

b"diff --git a/Products/CMFPlone/tests/robot/test_linkintegrity.robot b/Products/CMFPlone/tests/robot/test_linkintegrity.robot\nindex 89aa17421..6f812fda8 100644\n--- a/Products/CMFPlone/tests/robot/test_linkintegrity.robot\n+++ b/Products/CMFPlone/tests/robot/test_linkintegrity.robot\n@@ -17,7 +17,7 @@ Library  Remote  ${PLONE_URL}/RobotRemote\n \n Resource  keywords.robot\n \n-#Suite setup  Set Selenium speed  0.5s\n+# Suite setup  Set Selenium speed  0.5s\n Test Setup  Run keywords  Plone Test Setup\n Test Teardown  Run keywords  Plone Test Teardown\n \n@@ -79,8 +79,8 @@ a link in rich text\n   Given patterns are loaded\n   Wait until element is visible  css=.pat-relateditems .select2-input.select2-default\n   Click Element  css=.pat-relateditems .select2-input.select2-default\n-  Wait until element is visible  xpath=(//span[contains(., 'One level up')])\n-  Click Element  xpath=(//span[contains(., 'One level up')])\n+  Wait until element is visible  css=.pattern-relateditems-result.one-level-up a.pattern-relateditems-result-browse\n+  Click Element  css=.pattern-relateditems-result.one-level-up a.pattern-relateditems-result-browse\n   Wait until element is visible  xpath=(//span[contains(., 'Foo')])\n   Click Element  xpath=(//span[contains(., 'Foo')])\n   Wait until page contains  Foo\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-19T09:32:07+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/d8d0261d55a7ae5eddff5a3f31f2d47c5f78df89

Merge pull request #2743 from plone/2516-fixup

Fix excluded items in navigation

Files changed:
A news/2516.fixed
M Products/CMFPlone/browser/navigation.py
M Products/CMFPlone/tests/testNavigationView.py

b"diff --git a/Products/CMFPlone/browser/navigation.py b/Products/CMFPlone/browser/navigation.py\nindex 27bae5816..ba9c12031 100644\n--- a/Products/CMFPlone/browser/navigation.py\n+++ b/Products/CMFPlone/browser/navigation.py\n@@ -148,8 +148,9 @@ def _get_url(item):\n \n         # now add the content to results\n         for item in rawresult:\n-            if item.exclude_from_nav:\n-                continue\n+            if not navigation_settings.show_excluded_items:\n+                if item.exclude_from_nav:\n+                    continue\n             cid, item_url = _get_url(item)\n             data = {\n                 'name': utils.pretty_title_or_id(context, item),\ndiff --git a/Products/CMFPlone/tests/testNavigationView.py b/Products/CMFPlone/tests/testNavigationView.py\nindex 7c2080a90..e18f08897 100644\n--- a/Products/CMFPlone/tests/testNavigationView.py\n+++ b/Products/CMFPlone/tests/testNavigationView.py\n@@ -597,17 +597,29 @@ def testDisableFolderTabs(self):\n \n     def testTabsExcludeItemsWithExcludeProperty(self):\n         # Make sure that items witht he exclude_from_nav property are purged\n-        view = self.view_class(self.portal, self.request)\n+        view = self.view_class(self.portal, self.request.clone())\n         tabs = view.topLevelTabs(actions=[])\n         orig_len = len(tabs)\n         self.portal.folder2.exclude_from_nav = True\n         self.portal.folder2.reindexObject()\n+\n+        # For the moment nothing changes because the default for\n+        # plone.show_excluded_items is True\n+        view = self.view_class(self.portal, self.request.clone())\n+        tabs = view.topLevelTabs(actions=[])\n+        self.assertTrue(tabs)\n+        self.assertEqual(len(tabs), orig_len)\n+        tab_names = [t['id'] for t in tabs]\n+        self.assertIn('folder2', tab_names)\n+\n+        # Now we flip the setting for plone.show_excluded_items\n+        self.navigation_settings.show_excluded_items = False\n         view = self.view_class(self.portal, self.request)\n         tabs = view.topLevelTabs(actions=[])\n         self.assertTrue(tabs)\n         self.assertEqual(len(tabs), orig_len - 1)\n         tab_names = [t['id'] for t in tabs]\n-        self.assertFalse('folder2' in tab_names)\n+        self.assertNotIn('folder2', tab_names)\n \n     def testTabsRespectsTypesWithViewAction(self):\n         # With a type in types_use_view_action_in_listings as current action it\ndiff --git a/news/2516.fixed b/news/2516.fixed\nnew file mode 100644\nindex 000000000..f78be280a\n--- /dev/null\n+++ b/news/2516.fixed\n@@ -0,0 +1 @@\n+Fix excluded items in navigation [ale-rt]\n"

