Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-20T19:05:18+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.restapi/commit/b787234b868409bede885f54d53ac0e391c46406

Use Makefile from kitconcept/buildout.

Files changed:
M Makefile

b'diff --git a/Makefile b/Makefile\nindex 42574ec8..60eba0a9 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -1,9 +1,33 @@\n-# convenience makefile to boostrap & run buildout\n+# keep in sync with: https://github.com/kitconcept/buildout/edit/master/Makefile\n+# update by running \'make update\'\n+SHELL := /bin/bash\n+CURRENT_DIR:=$(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))\n \n version = 2.7\n \n+# We like colors\n+# From: https://coderwall.com/p/izxssa/colored-makefile-for-golang-projects\n+RED=`tput setaf 1`\n+GREEN=`tput setaf 2`\n+RESET=`tput sgr0`\n+YELLOW=`tput setaf 3`\n+\n all: .installed.cfg\n-\tbin/test\n+\n+# Add the following \'help\' target to your Makefile\n+# And add help text after each target name starting with \'\\#\\#\'\n+.PHONY: help\n+help: ## This help message\n+\t@grep -E \'^[a-zA-Z_-]+:.*?## .*$$\' $(MAKEFILE_LIST) | sort | awk \'BEGIN {FS = ":.*?## "}; {printf "\\033[36m%-30s\\033[0m %s\\n", $$1, $$2}\'\n+\n+.PHONY: Update Makefile and Buildout\n+update: ## Update Make and Buildout\n+\twget -O Makefile https://raw.githubusercontent.com/kitconcept/buildout/master/Makefile\n+\twget -O requirements.txt https://raw.githubusercontent.com/kitconcept/buildout/master/requirements.txt\n+\twget -O plone-4.3.x.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/plone-4.3.x.cfg\n+\twget -O plone-5.1.x.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/plone-5.1.x.cfg\n+\twget -O plone-5.2.x.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/plone-5.2.x.cfg\n+\twget -O versions.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/versions.cfg\n \n .installed.cfg: bin/buildout *.cfg\n \tbin/buildout\n@@ -13,12 +37,32 @@ bin/buildout: bin/pip\n \tbin/pip install -r requirements.txt\n \t@touch -c $@\n \n-build-plone-5.2: .installed.cfg\n+.PHONY: Build Plone 4.3\n+build-plone-4.3: .installed.cfg ## Build Plone 4.3\n+\tbin/pip install --upgrade pip\n+\tbin/pip install -r requirements.txt\n+\tbin/buildout -c plone-4.3.x.cfg\n+\n+.PHONY: Build Plone 5.0\n+build-plone-5.0: .installed.cfg ## Build Plone 5.0\n+\tbin/pip install --upgrade pip\n+\tbin/pip install -r requirements.txt\n+\tbin/buildout -c plone-5.0.x.cfg\n+\n+.PHONY: Build Plone 5.1\n+build-plone-5.1: .installed.cfg  ## Build Plone 5.1\n+\tbin/pip install --upgrade pip\n+\tbin/pip install -r requirements.txt\n+\tbin/buildout -c plone-5.1.x.cfg\n+\n+.PHONY: Build Plone 5.2\n+build-plone-5.2: .installed.cfg  ## Build Plone 5.2\n \tbin/pip install --upgrade pip\n \tbin/pip install -r requirements.txt\n \tbin/buildout -c plone-5.2.x.cfg\n \n-build-py3:\n+ ## Build Plone 5.2 with Python 3\n+build-py3:  ## Build Plone 5.2 with Python 3\n \tvirtualenv --python=python3 .\n \tbin/pip install --upgrade pip\n \tbin/pip install -r requirements.txt\n@@ -27,13 +71,24 @@ build-py3:\n bin/python bin/pip:\n \tvirtualenv --clear --python=python$(version) .\n \n+.PHONY: Test\n+test:  ## Test\n+\tbin/test\n+\n+.PHONY: Test Performance\n test-performance:\n \tjmeter -n -t performance.jmx -l jmeter.jtl\n \n-release:\n+.PHONY: Code Analysis\n+code-analysis:  ## Code Analysis\n+\tbin/code-analysis\n+\n+.PHONY: Release\n+release:  ## Release\n \tbin/fullrelease\n \n-clean:\n+.PHONY: Clean\n+clean:  ## Clean\n \tgit clean -Xdf\n \n .PHONY: all clean\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-20T19:22:59+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.restapi/commit/e94978a34ddc75d5e722eebb4ce71d415f90fbab

Fix 4.3 build on osx.

Files changed:
M plone-4.3.x.cfg

b'diff --git a/plone-4.3.x.cfg b/plone-4.3.x.cfg\nindex 7d6dd445..507204e2 100644\n--- a/plone-4.3.x.cfg\n+++ b/plone-4.3.x.cfg\n@@ -8,3 +8,5 @@ extends =\n pytz = 2017.3\n six = 1.11.0\n zope.interface = 4.1.0\n+Pillow = 5.4.1\n+future = 0.17.1\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-20T19:51:14+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.restapi/commit/1f485d993fa854178f99440ee8e6aa0969254dda

Revert "Fix 4.3 build on osx."

This reverts commit e94978a34ddc75d5e722eebb4ce71d415f90fbab.

Files changed:
M plone-4.3.x.cfg

b'diff --git a/plone-4.3.x.cfg b/plone-4.3.x.cfg\nindex 507204e2..7d6dd445 100644\n--- a/plone-4.3.x.cfg\n+++ b/plone-4.3.x.cfg\n@@ -8,5 +8,3 @@ extends =\n pytz = 2017.3\n six = 1.11.0\n zope.interface = 4.1.0\n-Pillow = 5.4.1\n-future = 0.17.1\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-05-07T16:51:51+02:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.restapi/commit/86f18c72b23e684e16df8d9093138728338b2395

Merge branch 'master' into kitconcept-buildout

Files changed:
A docs/source/_json/vocabularies_get_filtered.req
A docs/source/_json/vocabularies_get_filtered.resp
A news/535.breaking
A news/691.breaking
A news/708.bugfixes
A news/721.bugfix
A news/724.bugfix
A news/726.breaking
A src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req
A src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp
A src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.req
A src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.resp
A src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.req
A src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.resp
M CHANGES.rst
M docs/source/upgrade-guide.rst
M docs/source/vocabularies.rst
M src/plone/restapi/deserializer/configure.zcml
M src/plone/restapi/deserializer/dxfields.py
M src/plone/restapi/profiles/tiles/types/Document.xml
M src/plone/restapi/serializer/catalog.py
M src/plone/restapi/serializer/configure.zcml
M src/plone/restapi/serializer/controlpanels.py
M src/plone/restapi/serializer/dxfields.py
M src/plone/restapi/serializer/relationfield.py
M src/plone/restapi/serializer/vocabularies.py
M src/plone/restapi/services/auth/renew.py
M src/plone/restapi/services/email_notification/post.py
M src/plone/restapi/tests/dxtypes.py
M src/plone/restapi/tests/http-examples/collection.resp
M src/plone/restapi/tests/http-examples/controlpanels_get_item.resp
M src/plone/restapi/tests/http-examples/registry_get_list.resp
M src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp
M src/plone/restapi/tests/http-examples/types_document.resp
M src/plone/restapi/tests/http-examples/vocabularies_get.resp
M src/plone/restapi/tests/test_auth.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_dxfield_serializer.py
M src/plone/restapi/tests/test_services_email_notification.py
M src/plone/restapi/tests/test_services_vocabularies.py
M src/plone/restapi/tests/test_types.py
M src/plone/restapi/types/adapters.py
M src/plone/restapi/types/configure.zcml
M src/plone/restapi/types/utils.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 6a15771e..033cdc7d 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,6 +1,48 @@\n Changelog\n =========\n \n+3.0.0 (unreleased)\n+------------------\n+\n+Breaking Changes:\n+\n+- `@vocabularies` service:\n+\n+  - No longer returns an ``@id`` for terms.\n+  - Results are batched, and terms are now listed as ``items``\n+    instead of ``terms`` to match other batched responses.\n+    Batch size is 25 by default but can be overridden\n+    using the ``b_size`` parameter.\n+\n+  [davisagli]\n+\n+- `@types` service:\n+\n+  - Choice fields using named vocabularies are now serialized\n+    with a ``vocabulary`` property giving the URL of the ``@vocabularies``\n+    endpoint for the vocabulary instead of including ``choices``,\n+    ``enum`` and ``enumNames`` inline.\n+  - The ``subjects`` field is now serialized as an ``array``\n+    of ``string`` items using the ``plone.app.vocabularies.Keywords`` vocabulary.\n+    [davisagli]\n+  - Serialize widget parameters into a ``widgetOptions`` object\n+    instead of adding them to the top level of the schema property.\n+\n+  [davisagli]\n+\n+New Features:\n+\n+- ``@vocabularies`` service: Use ``title`` parameter to filter terms by title\n+  and ``token`` for getting the title of a term given a token.\n+  (case-insensitive).\n+  [davisagli]\n+\n+Bugfixes:\n+\n+- Avoid calculating batch links for catalog results twice.\n+  [davisagli]\n+\n+\n .. You should *NOT* be adding new change log entries to this file.\n    You should create a file in the news directory instead.\n    For helpful instructions, please see:\ndiff --git a/docs/source/_json/vocabularies_get_filtered.req b/docs/source/_json/vocabularies_get_filtered.req\nnew file mode 100644\nindex 00000000..0b04c25a\n--- /dev/null\n+++ b/docs/source/_json/vocabularies_get_filtered.req\n@@ -0,0 +1,3 @@\n+GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?q=doc HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/docs/source/_json/vocabularies_get_filtered.resp b/docs/source/_json/vocabularies_get_filtered.resp\nnew file mode 100644\nindex 00000000..e609c514\n--- /dev/null\n+++ b/docs/source/_json/vocabularies_get_filtered.resp\n@@ -0,0 +1,17 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?q=doc", \n+  "items": [\n+    {\n+      "title": "DX Test Document", \n+      "token": "DXTestDocument"\n+    }, \n+    {\n+      "title": "Test Document", \n+      "token": "ATTestDocument"\n+    }\n+  ], \n+  "items_total": 2\n+}\n\\ No newline at end of file\ndiff --git a/docs/source/upgrade-guide.rst b/docs/source/upgrade-guide.rst\nindex 709d94bb..173141c2 100644\n--- a/docs/source/upgrade-guide.rst\n+++ b/docs/source/upgrade-guide.rst\n@@ -4,6 +4,301 @@ Upgrade Guide\n This upgrade guide lists all breaking changes in plone.restapi and explains the necessary steps that are needed to upgrade to the lastest version.\n \n \n+Upgrading to plone.restapi 4.x\n+------------------------------\n+\n+Serialization and Deserialization of fields with vocabularies\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+The serialization of fields with vocabularies (e.g. ``Choice``) now returns the\n+`token` and the `title` of the vocabulary term instead of the stored value.\n+This is allows displaying the term (title) without additionally querying the\n+vocabulary. However it\'s necessary to adopt existing client implementations.\n+\n+Example:\n+\n+The date and time controlpanel previously returned a number for the\n+``first_weekday`` property::\n+\n+  {\n+    "@id": "http://localhost:55001/plone/@controlpanels/date-and-time",\n+    "data": {\n+        ...\n+        "first_weekday": 0,\n+        ...\n+    }\n+    ...\n+  }\n+\n+Now it returns an object with a token and a title::\n+\n+  {\n+    "@id": "http://localhost:55001/plone/@controlpanels/date-and-time",\n+    "data": {\n+        ...\n+        "first_weekday": {\n+            "title": "Monday",\n+            "token": "0"\n+        },\n+        ...\n+    }\n+    ...\n+  }\n+\n+Deserialization accepts objects that contain a token, but also just the token\n+or the value.\n+However it\'s highly recommended to always use the token as vocabulary terms\n+may contain values that are not JSON serializable.\n+\n+\n+Vocabularies\n+^^^^^^^^^^^^\n+\n+Choice and List fields using named vocabularies are now serialized\n+with a ``vocabulary`` property giving the URL of the ``@vocabularies``\n+endpoint for the vocabulary instead of including ``choices``,\n+``enum`` and ``enumNames`` inline.\n+\n+Old Response::\n+\n+    "choices": [\n+        [\n+            "de",\n+            "Deutsch"\n+        ],\n+        [\n+            "en",\n+            "English"\n+        ],\n+    ],\n+    "enum": [\n+      "de",\n+      "en",\n+    ],\n+    "enumNames": [\n+      "Deutsch",\n+      "English",\n+    ],\n+\n+New response::\n+\n+    "vocabulary": {\n+        "@id": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.CaptchaVocabulary"\n+    },\n+\n+  - Serialize widget parameters into a ``widgetOptions`` object\n+    instead of adding them to the top level of the schema property.\n+\n+Old response::\n+\n+      "vocabulary": "plone.app.vocabularies.Users"\n+\n+New response::\n+\n+      "widgetOptions": {\n+        "pattern_options": {\n+          "recentlyUsed": true\n+        },\n+        "vocabulary": { "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users" }\n+      }\n+\n+Example: Vocabularies Subjects Field\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+The ``subjects`` field is now serialized as an ``array``\n+of ``string`` items using the ``plone.app.vocabularies.Keywords`` vocabulary.\n+\n+Old response::\n+\n+    "subjects": {\n+      "choices": [],\n+      "enum": [],\n+      "enumNames": [],\n+    }\n+    "type": "string"\n+\n+New response::\n+\n+    "additionalItems": true,\n+    "type": "array",\n+    "uniqueItems": true,\n+    "widgetOptions": {\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+      }\n+    },\n+    "items": {\n+      "description": "",\n+      "title": "",\n+      "type": "string"\n+    },\n+\n+Example: Available Time Zones Field (vocabulary in ``items``)\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Old response::\n+\n+    "available_timezones": {\n+      "additionalItems": true,\n+      "default": [],\n+      "description": "The timezones, which should be available for the portal. Can be set for users and events",\n+      "items": {\n+        "choices": [\n+          [\n+            "Africa/Abidjan",\n+            "Africa/Abidjan"\n+          ],\n+          [\n+            "Africa/Accra",\n+            "Africa/Accra"\n+          ],\n+          ...\n+        "enum": [\n+          ...\n+        ],\n+        "enumNames": [\n+          ...\n+        ]\n+      },\n+      title: "Available timezones",\n+      type: "array",\n+      uniqueItems: true,\n+    }\n+\n+New response::\n+\n+    "available_timezones": {\n+      "additionalItems": true,\n+      "default": [],\n+      "description": "The timezones, which should be available for the portal. Can be set for users and events",\n+      "items": {\n+        "description": "",\n+        "title": "",\n+        "type": "string",\n+        "vocabulary": {\n+          "@id": "http://localhost:8080/Plone/@vocabularies/plone.app.vocabularies.Timezones"\n+        }\n+      },\n+      "title": "Available timezones",\n+      "type": "array",\n+      "uniqueItems": true\n+    },\n+\n+Example: Weekday Field (vocabulary in main property)\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Old response::\n+\n+    "first_weekday": {\n+      "choices": [\n+        [\n+          "0",\n+          "Monday"\n+        ],\n+        [\n+          "1",\n+          "Tuesday"\n+        ],\n+        [\n+          "2",\n+          "Wednesday"\n+        ],\n+        [\n+          "3",\n+          "Thursday"\n+        ],\n+        [\n+          "4",\n+          "Friday"\n+        ],\n+        [\n+          "5",\n+          "Saturday"\n+        ],\n+        [\n+          "6",\n+          "Sunday"\n+        ]\n+      ],\n+      "description": "First day in the week.",\n+      "enum": [\n+        "0",\n+        "1",\n+        "2",\n+        "3",\n+        "4",\n+        "5",\n+        "6"\n+      ],\n+      "enumNames": [\n+        "Monday",\n+        "Tuesday",\n+        "Wednesday",\n+        "Thursday",\n+        "Friday",\n+        "Saturday",\n+        "Sunday"\n+      ],\n+      "title": "First weekday",\n+      "type": "string"\n+    },\n+\n+New response::\n+\n+    "first_weekday": {\n+      "description": "First day in the week.",\n+      "title": "First weekday",\n+      "type": "string",\n+      "vocabulary": {\n+        "@id": "http://localhost:8080/Plone/@vocabularies/plone.app.vocabularies.Weekdays"\n+      }\n+    },\n+\n+Vocabularies Endpoint\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+The vocabularies endpoint does no longer returns an ``@id`` for terms.\n+\n+The results are batched, and terms are now listed as ``items`` instead of ``terms`` to match other batched responses.\n+\n+Batch size is 25 by default but can be overridden using the ``b_size`` parameter.\n+\n+Old response::\n+\n+    {\n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n+      "terms": [\n+        {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Collection",\n+          "title": "Collection",\n+          "token": "Collection"\n+        },\n+        ...\n+      ]\n+    }\n+\n+New response::\n+\n+    {\n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n+      "items": [\n+          {\n+            "title": "Collection",\n+            "token": "Collection"\n+          },\n+          ...\n+      ],\n+      "items_total": 12\n+    }\n+\n+\n+New Features:\n+\n+- ``@vocabularies`` service: Use ``query`` parameter to filter terms by title\n+  (case-insensitive).\n+  [davisagli]\n+\n+\n Upgrading to plone.restapi 3.x\n ------------------------------\n \n@@ -12,7 +307,7 @@ Image scales\n \n Image download URLs and image scale URLs are created using the UID based url formats. This allows Plone to create different URLs when the image changes and thus ensuring caches are updated.\n \n-Old Response:: \n+Old Response::\n \n      {\n        "icon": {\n@@ -43,7 +338,7 @@ New Response::\n        },\n       ...\n       }\n-     \n+\n \n @sharing endpoint\n ^^^^^^^^^^^^^^^^^\n@@ -56,7 +351,7 @@ Old Response::\n \n   HTTP/1.1 200 OK\n   Content-Type: application/json\n-  \n+\n   {\n     "available_roles": [\n       "Contributor",\n@@ -75,7 +370,7 @@ New Response::\n \n   HTTP/1.1 200 OK\n   Content-Type: application/json\n-  \n+\n   {\n     "available_roles": [\n       {\ndiff --git a/docs/source/vocabularies.rst b/docs/source/vocabularies.rst\nindex 64d09a42..35bd7eca 100644\n--- a/docs/source/vocabularies.rst\n+++ b/docs/source/vocabularies.rst\n@@ -1,11 +1,9 @@\n Vocabularies\n ============\n \n-Vocabularies are utilities containing a list of values grouped by interest or\n-different Plone features. For example,\n-``plone.app.vocabularies.ReallyUserFriendlyTypes`` will return all the content\n-types registered in Plone. The vocabularies return a list of objects with the\n-items ``@id``, ``title`` and ``token``.\n+Vocabularies are utilities containing a list of values grouped by interest or different Plone features.\n+For example, ``plone.app.vocabularies.ReallyUserFriendlyTypes`` will return all the content types registered in Plone.\n+The vocabularies return a list of objects with the items ``title`` and ``token``.\n \n .. note::\n \tThese docs are generated by code tests, therefore you will see some \'test\' contenttypes appear here.\n@@ -13,13 +11,12 @@ items ``@id``, ``title`` and ``token``.\n Get all vocabularies\n --------------------\n \n-To get a list of all the available content types, you can query using a GET to the @vocabulary endpoint:\n+To retrieve a list of all the available vocabularies, send a GET request to the @vocabularies endpoint:\n \n ..  http:example:: curl httpie python-requests\n     :request: ../../src/plone/restapi/tests/http-examples/vocabularies.req\n \n-The response will include a list with all the dotted names of the available\n-vocabularies in Plone.\n+The response will include a list with the URL (``@id``) the dotted names (``title``) of all the available vocabularies in Plone:\n \n .. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies.resp\n    :language: http\n@@ -27,16 +24,47 @@ vocabularies in Plone.\n Get a vocabulary\n ----------------\n \n-To get a particular vocabulary, ``/@vocabularies`` endpoint\n-with the name of the vocabulary, e.g.\n-``/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes``. The\n-endpoint can be used with the site root and content objects. The right way is\n-depending on the implementation of the vocabulary.\n+To get a particular vocabulary, use the ``@vocabularies`` endpoint with the name of the vocabulary, e.g. ``/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes``.\n+The endpoint can be used with the site root and content objects.\n \n ..  http:example:: curl httpie python-requests\n     :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get.req\n \n-The server will respond with a list of terms. The title is pureley for display purposes. The token is what should be send to the server to retrive the value of the term.\n+The server will respond with a list of terms. The title is purely for display purposes.\n+The token is what should be sent to the server to retrieve the value of the term.\n+\n+.. note::\n+    Vocabulary terms will be **batched** if the size of the\n+    resultset exceeds the batch size. See :doc:`/batching` for more\n+    details on how to work with batched results.\n \n .. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get.resp\n    :language: http\n+\n+Filter Vocabularies\n+^^^^^^^^^^^^^^^^^^^\n+\n+Vocabulary terms can be filtered using the ``title`` or ``token`` parameter.\n+\n+Use the ``title`` paramenter to filter vocabulary terms by title.\n+E.g. search for all terms that contain the string ``doc`` in the title:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.req\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.resp\n+   :language: http\n+\n+Use the ``token`` paramenter to filter vocabulary terms by token.\n+This is useful in case that you have the token and you need to retrieve the ``title``.\n+E.g. search the term ``doc`` in the token:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.req\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.resp\n+   :language: http\n+\n+.. note::\n+    You must not filter by title and token at the same time.\n+    The API returns a 400 response code if you do so.\ndiff --git a/news/535.breaking b/news/535.breaking\nnew file mode 100644\nindex 00000000..a95ca829\n--- /dev/null\n+++ b/news/535.breaking\n@@ -0,0 +1,8 @@\n+@vocabularies service: No longer returns an @id for terms. Results are batched, and terms are now listed as items instead of terms to match other batched responses. Batch size is 25 by default but can be overridden using the b_size parameter.\n+[davisagli]\n+\n+@types service: Choice fields using named vocabularies are now serialized with a vocabulary property giving the URL of the @vocabularies endpoint for the vocabulary instead of including choices, enum and enumNames inline. The subjects field is now serialized as an array of string items using the plone.app.vocabularies.Keywords vocabulary. \n+[davisagli]\n+\n+Serialize widget parameters into a widgetOptions object instead of adding them to the top level of the schema property.\n+[davisagli]\ndiff --git a/news/691.breaking b/news/691.breaking\nnew file mode 100644\nindex 00000000..df0280e5\n--- /dev/null\n+++ b/news/691.breaking\n@@ -0,0 +1,3 @@\n+Use tokens for serialization/deserialization of vocabulary terms.\n+[buchi]\n+\ndiff --git a/news/708.bugfixes b/news/708.bugfixes\nnew file mode 100644\nindex 00000000..cd954ea7\n--- /dev/null\n+++ b/news/708.bugfixes\n@@ -0,0 +1,2 @@\n+Standardize errors data structure of email-notification endpoint.\n+[cekk]\ndiff --git a/news/721.bugfix b/news/721.bugfix\nnew file mode 100644\nindex 00000000..abc387aa\n--- /dev/null\n+++ b/news/721.bugfix\n@@ -0,0 +1,2 @@\n+When renewing an expired or invalid authentication token with ``@login-renew`` fail with a ``401`` error instead of returning a new authentication token.\n+[thet]\ndiff --git a/news/724.bugfix b/news/724.bugfix\nnew file mode 100644\nindex 00000000..62c8bbe2\n--- /dev/null\n+++ b/news/724.bugfix\n@@ -0,0 +1,3 @@\n+- Use interface name in the ``tiles`` profile instead of the shorthand behavior\n+  name. This fixes #724.\n+  [sneridagh]\ndiff --git a/news/726.breaking b/news/726.breaking\nnew file mode 100644\nindex 00000000..f90484ce\n--- /dev/null\n+++ b/news/726.breaking\n@@ -0,0 +1,3 @@\n+Return the token and the title of vocabulary terms in serialization.\n+See upgrade guide for more information.\n+[buchi]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/deserializer/configure.zcml b/src/plone/restapi/deserializer/configure.zcml\nindex 635e2c5b..9c89af2e 100644\n--- a/src/plone/restapi/deserializer/configure.zcml\n+++ b/src/plone/restapi/deserializer/configure.zcml\n@@ -8,6 +8,7 @@\n   <adapter factory=".dxcontent.DeserializeFromJson" />\n   <adapter factory=".dxfields.DefaultFieldDeserializer" />\n   <adapter factory=".dxfields.DatetimeFieldDeserializer" />\n+  <adapter factory=".dxfields.ChoiceFieldDeserializer" />\n   <adapter factory=".dxfields.CollectionFieldDeserializer" />\n   <adapter factory=".dxfields.DictFieldDeserializer" />\n   <adapter factory=".dxfields.TextLineFieldDeserializer" />\ndiff --git a/src/plone/restapi/deserializer/dxfields.py b/src/plone/restapi/deserializer/dxfields.py\nindex fd1cd046..077b9064 100644\n--- a/src/plone/restapi/deserializer/dxfields.py\n+++ b/src/plone/restapi/deserializer/dxfields.py\n@@ -14,6 +14,7 @@\n from zope.component import queryMultiAdapter\n from zope.interface import implementer\n from zope.publisher.interfaces.browser import IBrowserRequest\n+from zope.schema.interfaces import IChoice\n from zope.schema.interfaces import ICollection\n from zope.schema.interfaces import IDatetime\n from zope.schema.interfaces import IDict\n@@ -22,6 +23,7 @@\n from zope.schema.interfaces import ITextLine\n from zope.schema.interfaces import ITime\n from zope.schema.interfaces import ITimedelta\n+from zope.schema.interfaces import IVocabularyTokenized\n \n import codecs\n import dateutil\n@@ -115,6 +117,23 @@ def __call__(self, value):\n         return value\n \n \n+@implementer(IFieldDeserializer)\n+@adapter(IChoice, IDexterityContent, IBrowserRequest)\n+class ChoiceFieldDeserializer(DefaultFieldDeserializer):\n+\n+    def __call__(self, value):\n+        if isinstance(value, dict) and \'token\' in value:\n+            value = value[\'token\']\n+        if IVocabularyTokenized.providedBy(self.field.vocabulary):\n+            try:\n+                value = self.field.vocabulary.getTermByToken(value).value\n+            except LookupError:\n+                pass\n+\n+        self.field.validate(value)\n+        return value\n+\n+\n @implementer(IFieldDeserializer)\n @adapter(ICollection, IDexterityContent, IBrowserRequest)\n class CollectionFieldDeserializer(DefaultFieldDeserializer):\n@@ -129,6 +148,8 @@ def __call__(self, value):\n                 IFieldDeserializer)\n \n             for i, v in enumerate(value):\n+                if isinstance(v, dict) and \'token\' in v:\n+                    v = v[\'token\']\n                 value[i] = deserializer(v)\n \n         value = self.field._type(value)\ndiff --git a/src/plone/restapi/profiles/tiles/types/Document.xml b/src/plone/restapi/profiles/tiles/types/Document.xml\nindex b1a8ff36..02a410d1 100644\n--- a/src/plone/restapi/profiles/tiles/types/Document.xml\n+++ b/src/plone/restapi/profiles/tiles/types/Document.xml\n@@ -2,8 +2,7 @@\n <object name="Document" meta_type="Dexterity FTI" i18n:domain="plone"\n    xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n  <property name="behaviors" purge="false">\n-  <element value="plone.tiles" />\n-  <!--<element value="collective.dexteritytextindexer.behavior.IDexterityTextIndexer" />-->\n+  <element value="plone.restapi.behaviors.ITiles" />\n  </property>\n \n </object>\ndiff --git a/src/plone/restapi/serializer/catalog.py b/src/plone/restapi/serializer/catalog.py\nindex da599fe4..e1ec1ec8 100644\n--- a/src/plone/restapi/serializer/catalog.py\n+++ b/src/plone/restapi/serializer/catalog.py\n@@ -77,8 +77,9 @@ def __call__(self, metadata_fields=(), fullobjects=False):\n         results = {}\n         results[\'@id\'] = batch.canonical_url\n         results[\'items_total\'] = batch.items_total\n-        if batch.links:\n-            results[\'batching\'] = batch.links\n+        links = batch.links\n+        if links:\n+            results[\'batching\'] = links\n \n         results[\'items\'] = []\n         for brain in batch:\ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex 041400fc..350ef417 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -15,6 +15,8 @@\n     <adapter factory=".summary.SiteRootJSONSummarySerializer" />\n \n     <adapter factory=".dxfields.DefaultFieldSerializer" />\n+    <adapter factory=".dxfields.ChoiceFieldSerializer" />\n+    <adapter factory=".dxfields.CollectionFieldSerializer" />\n     <adapter factory=".dxfields.FileFieldSerializer" />\n     <adapter factory=".dxfields.ImageFieldSerializer" />\n     <adapter factory=".dxfields.RichttextFieldSerializer" />\n@@ -52,6 +54,8 @@\n     <adapter factory=".converters.zope_DateTime_converter" />\n \n     <configure zcml:condition="installed z3c.relationfield">\n+        <adapter factory=".relationfield.RelationChoiceFieldSerializer" />\n+        <adapter factory=".relationfield.RelationListFieldSerializer" />\n         <adapter factory=".relationfield.relationvalue_converter" />\n     </configure>\n \ndiff --git a/src/plone/restapi/serializer/controlpanels.py b/src/plone/restapi/serializer/controlpanels.py\nindex f90e8534..22ba4ea8 100644\n--- a/src/plone/restapi/serializer/controlpanels.py\n+++ b/src/plone/restapi/serializer/controlpanels.py\n@@ -1,13 +1,16 @@\n # -*- coding: utf-8 -*-\n+from plone.dexterity.interfaces import IDexterityContent\n+from plone.registry.interfaces import IRegistry\n from plone.restapi.controlpanels import IControlpanel\n+from plone.restapi.interfaces import IFieldSerializer\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n-from plone.restapi.interfaces import IFieldSerializer\n from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.types import utils\n-from plone.registry.interfaces import IRegistry\n-from zope.interface import implementer\n from zope.component import adapter, queryMultiAdapter, getUtility\n+from zope.interface import alsoProvides\n+from zope.interface import implementer\n+from zope.interface import noLongerProvides\n \n import zope.schema\n \n@@ -86,6 +89,10 @@ def __call__(self):\n             self.schema, prefix=self.schema_prefix\n         )\n \n+        # Temporarily provide IDexterityContent, so we can use DX field\n+        # serializers\n+        alsoProvides(proxy, IDexterityContent)\n+\n         json_data = {}\n         for name, field in zope.schema.getFields(self.schema).items():\n             serializer = queryMultiAdapter(\n@@ -98,6 +105,8 @@ def __call__(self):\n                 value = getattr(proxy, name, None)\n             json_data[json_compatible(name)] = value\n \n+        noLongerProvides(proxy, IDexterityContent)\n+\n         # JSON schema\n         return {\n             \'@id\': \'{}/{}/{}\'.format(\ndiff --git a/src/plone/restapi/serializer/dxfields.py b/src/plone/restapi/serializer/dxfields.py\nindex 41124705..bc3a5ded 100644\n--- a/src/plone/restapi/serializer/dxfields.py\n+++ b/src/plone/restapi/serializer/dxfields.py\n@@ -10,7 +10,10 @@\n from zope.component import adapter\n from zope.interface import implementer\n from zope.interface import Interface\n+from zope.schema.interfaces import IChoice\n+from zope.schema.interfaces import ICollection\n from zope.schema.interfaces import IField\n+from zope.schema.interfaces import IVocabularyTokenized\n \n \n @adapter(IField, IDexterityContent, Interface)\n@@ -31,6 +34,47 @@ def get_value(self, default=None):\n                        default)\n \n \n+@adapter(IChoice, IDexterityContent, Interface)\n+@implementer(IFieldSerializer)\n+class ChoiceFieldSerializer(DefaultFieldSerializer):\n+\n+    def __call__(self):\n+        # Binding is necessary for named vocabularies\n+        if IField.providedBy(self.field):\n+            self.field = self.field.bind(self.context)\n+        value = self.get_value()\n+        if (value is not None\n+                and IVocabularyTokenized.providedBy(self.field.vocabulary)):\n+            try:\n+                term = self.field.vocabulary.getTerm(value)\n+                value = {\'token\': term.token, \'title\': term.title}\n+            # Some fields (e.g. language) have a default value that is not in\n+            # vocabulary\n+            except LookupError:\n+                pass\n+        return json_compatible(value)\n+\n+\n+@adapter(ICollection, IDexterityContent, Interface)\n+@implementer(IFieldSerializer)\n+class CollectionFieldSerializer(DefaultFieldSerializer):\n+\n+    def __call__(self):\n+        # Binding is necessary for named vocabularies\n+        if IField.providedBy(self.field):\n+            self.field = self.field.bind(self.context)\n+        value = self.get_value()\n+        value_type = self.field.value_type\n+        if (value is not None and IChoice.providedBy(value_type)\n+                and IVocabularyTokenized.providedBy(value_type.vocabulary)):\n+            values = []\n+            for v in value:\n+                term = value_type.vocabulary.getTerm(v)\n+                values.append({u\'token\': term.token, u\'title\': term.title})\n+            value = self.field._type(values)\n+        return json_compatible(value)\n+\n+\n @adapter(INamedImageField, IDexterityContent, Interface)\n class ImageFieldSerializer(DefaultFieldSerializer):\n \ndiff --git a/src/plone/restapi/serializer/relationfield.py b/src/plone/restapi/serializer/relationfield.py\nindex faa51a04..f229b60f 100644\n--- a/src/plone/restapi/serializer/relationfield.py\n+++ b/src/plone/restapi/serializer/relationfield.py\n@@ -1,12 +1,18 @@\n # -*- coding: utf-8 -*-\n+from plone.dexterity.interfaces import IDexterityContent\n+from plone.restapi.interfaces import IFieldSerializer\n from plone.restapi.interfaces import IJsonCompatible\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.restapi.serializer.converters import json_compatible\n+from plone.restapi.serializer.dxfields import DefaultFieldSerializer\n+from z3c.relationfield.interfaces import IRelationChoice\n+from z3c.relationfield.interfaces import IRelationList\n from z3c.relationfield.interfaces import IRelationValue\n from zope.component import adapter\n from zope.component import getMultiAdapter\n from zope.globalrequest import getRequest\n from zope.interface import implementer\n+from zope.interface import Interface\n \n \n @adapter(IRelationValue)\n@@ -16,3 +22,15 @@ def relationvalue_converter(value):\n         summary = getMultiAdapter(\n             (value.to_object, getRequest()), ISerializeToJsonSummary)()\n         return json_compatible(summary)\n+\n+\n+@adapter(IRelationChoice, IDexterityContent, Interface)\n+@implementer(IFieldSerializer)\n+class RelationChoiceFieldSerializer(DefaultFieldSerializer):\n+    pass\n+\n+\n+@adapter(IRelationList, IDexterityContent, Interface)\n+@implementer(IFieldSerializer)\n+class RelationListFieldSerializer(DefaultFieldSerializer):\n+    pass\ndiff --git a/src/plone/restapi/serializer/vocabularies.py b/src/plone/restapi/serializer/vocabularies.py\nindex abf26d2b..181459c9 100644\n--- a/src/plone/restapi/serializer/vocabularies.py\n+++ b/src/plone/restapi/serializer/vocabularies.py\n@@ -1,7 +1,9 @@\n # -*- coding: utf-8 -*-\n+from plone.restapi.batching import HypermediaBatch\n from plone.restapi.interfaces import ISerializeToJson\n from zope.component import adapter\n from zope.component import getMultiAdapter\n+from zope.i18n import translate\n from zope.interface import implementer\n from zope.interface import Interface\n from zope.schema.interfaces import ITitledTokenizedTerm\n@@ -19,16 +21,44 @@ def __init__(self, context, request):\n \n     def __call__(self, vocabulary_id):\n         vocabulary = self.context\n-        serialized_terms = []\n+        title = self.request.form.get(\'title\', \'\')\n+        token = self.request.form.get(\'token\', \'\')\n+\n+        terms = []\n         for term in vocabulary:\n+            if title and token:\n+                self.request.response.setStatus(400)\n+                return dict(error=dict(\n+                    type=\'Invalid parameters\',\n+                    message=\'You can not filter by title and token at the same time.\')  # noqa\n+                )\n+\n+            if token:\n+                if token.lower() != term.token.lower():\n+                    continue\n+                terms.append(term)\n+            else:\n+                if title.lower() not in term.title.lower():\n+                    continue\n+                terms.append(term)\n+\n+        batch = HypermediaBatch(self.request, terms)\n+\n+        serialized_terms = []\n+        for term in batch:\n             serializer = getMultiAdapter((term, self.request),\n                                          interface=ISerializeToJson)\n-            serialized_terms.append(serializer(vocabulary_id))\n+            serialized_terms.append(serializer())\n \n-        return {\n-            \'@id\': vocabulary_id,\n-            \'terms\': serialized_terms\n+        result = {\n+            \'@id\': batch.canonical_url,\n+            \'items\': serialized_terms,\n+            \'items_total\': batch.items_total,\n         }\n+        links = batch.links\n+        if links:\n+            result[\'batching\'] = links\n+        return result\n \n \n @implementer(ISerializeToJson)\n@@ -39,12 +69,11 @@ def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n-    def __call__(self, vocabulary_id):\n+    def __call__(self):\n         term = self.context\n         token = term.token\n         title = term.title if ITitledTokenizedTerm.providedBy(term) else token\n         return {\n-            \'@id\': \'{}/{}\'.format(vocabulary_id, token),\n             \'token\': token,\n-            \'title\': title\n+            \'title\': translate(title, context=self.request)\n         }\ndiff --git a/src/plone/restapi/services/auth/renew.py b/src/plone/restapi/services/auth/renew.py\nindex 19a982e6..cbf18325 100644\n--- a/src/plone/restapi/services/auth/renew.py\n+++ b/src/plone/restapi/services/auth/renew.py\n@@ -10,6 +10,7 @@\n class Renew(Service):\n     """Renew authentication token\n     """\n+\n     def reply(self):\n         plugin = None\n         acl_users = getToolByName(self, "acl_users")\n@@ -32,6 +33,12 @@ def reply(self):\n                          plone.protect.interfaces.IDisableCSRFProtection)\n \n         mtool = getToolByName(self.context, \'portal_membership\')\n+        if (bool(mtool.isAnonymousUser())):\n+            # Don\'t generate authentication tokens for anonymous users.\n+            self.request.response.setStatus(401)\n+            return dict(error=dict(\n+                type=\'Invalid or expired authentication token\',\n+                message=\'The authentication token is invalid or expired.\'))\n         user = mtool.getAuthenticatedMember()\n         payload = {}\n         payload[\'fullname\'] = user.getProperty(\'fullname\')\ndiff --git a/src/plone/restapi/services/email_notification/post.py b/src/plone/restapi/services/email_notification/post.py\nindex 3419e488..6c7681b9 100644\n--- a/src/plone/restapi/services/email_notification/post.py\n+++ b/src/plone/restapi/services/email_notification/post.py\n@@ -1,7 +1,8 @@\n # -*- coding: utf-8 -*-\n+from plone.restapi.deserializer import json_body\n from plone.restapi.services import Service\n+from zExceptions import BadRequest\n from zope.component import getMultiAdapter\n-from plone.restapi.deserializer import json_body\n from zope.interface import alsoProvides\n \n import plone\n@@ -18,18 +19,12 @@ def reply(self):\n         subject = data.get(\'subject\', \'\')\n \n         if not sender_from_address or not message:\n-            self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'BadRequest\',\n-                message=\'Missing from or message parameters\'))\n+            raise BadRequest(\'Missing from or message parameters\')\n \n         overview_controlpanel = getMultiAdapter((self.context, self.request),\n                                                 name=\'overview-controlpanel\')\n         if overview_controlpanel.mailhost_warning():\n-            self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'BadRequest\',\n-                message=\'MailHost is not configured.\'))\n+            raise BadRequest(\'MailHost is not configured.\')\n \n         # Disable CSRF protection\n         if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n@@ -41,10 +36,10 @@ def reply(self):\n \n         contact_info_view.send_message(\n             dict(\n-              message=message,\n-              subject=subject,\n-              sender_from_address=sender_from_address,\n-              sender_fullname=sender_fullname\n+                message=message,\n+                subject=subject,\n+                sender_from_address=sender_from_address,\n+                sender_fullname=sender_fullname\n             )\n         )\n \ndiff --git a/src/plone/restapi/tests/dxtypes.py b/src/plone/restapi/tests/dxtypes.py\nindex 2284f677..da5b3164 100644\n--- a/src/plone/restapi/tests/dxtypes.py\n+++ b/src/plone/restapi/tests/dxtypes.py\n@@ -46,6 +46,11 @@ class IDXTestDocumentSchema(model.Schema):\n     test_bytes_field = schema.Bytes(required=False)\n     test_bytesline_field = schema.BytesLine(required=False)\n     test_choice_field = schema.Choice(values=[u\'foo\', u\'bar\'], required=False)\n+    test_choice_field_with_vocabulary = schema.Choice(\n+        vocabulary=SimpleVocabulary([\n+            SimpleTerm(u\'value1\', \'token1\', u\'title1\'),\n+            SimpleTerm(u\'value2\', \'token2\', u\'title2\'),\n+        ]),  required=False)\n     test_date_field = schema.Date(required=False)\n     test_datetime_field = schema.Datetime(required=False)\n     test_datetime_tz_field = schema.Datetime(\n@@ -58,6 +63,12 @@ class IDXTestDocumentSchema(model.Schema):\n     test_frozenset_field = schema.FrozenSet(required=False)\n     test_int_field = schema.Int(required=False)\n     test_list_field = schema.List(required=False)\n+    test_list_field_with_choice_with_vocabulary = schema.List(\n+        value_type=schema.Choice(vocabulary=SimpleVocabulary([\n+            SimpleTerm(u\'value1\', \'token1\', u\'title1\'),\n+            SimpleTerm(u\'value2\', \'token2\', u\'title2\'),\n+            SimpleTerm(u\'value3\', \'token3\', u\'title3\'),\n+        ])), required=False)\n     test_set_field = schema.Set(required=False)\n     test_text_field = schema.Text(required=False)\n     test_textline_field = schema.TextLine(required=False)\ndiff --git a/src/plone/restapi/tests/http-examples/collection.resp b/src/plone/restapi/tests/http-examples/collection.resp\nindex 86c6c4ce..7421a1c3 100644\n--- a/src/plone/restapi/tests/http-examples/collection.resp\n+++ b/src/plone/restapi/tests/http-examples/collection.resp\n@@ -26,10 +26,22 @@ Content-Type: application/json\n     "test_user_1_"\n   ], \n   "customViewFields": [\n-    "Title", \n-    "Creator", \n-    "Type", \n-    "ModificationDate"\n+    {\n+      "title": "Title", \n+      "token": "Title"\n+    }, \n+    {\n+      "title": "Creator", \n+      "token": "Creator"\n+    }, \n+    {\n+      "title": "Type", \n+      "token": "Type"\n+    }, \n+    {\n+      "title": "ModificationDate", \n+      "token": "ModificationDate"\n+    }\n   ], \n   "description": "This is a collection with two documents", \n   "effective": null, \ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\nindex 47ca1799..ea53e507 100644\n--- a/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n@@ -8,7 +8,10 @@ Content-Type: application/json\n       "TinyMCE", \n       "None"\n     ], \n-    "default_editor": "TinyMCE", \n+    "default_editor": {\n+      "title": "TinyMCE", \n+      "token": "TinyMCE"\n+    }, \n     "enable_link_integrity_checks": true, \n     "ext_editor": false, \n     "lock_on_ttw_edit": true, \n@@ -48,28 +51,13 @@ Content-Type: application/json\n         "uniqueItems": false\n       }, \n       "default_editor": {\n-        "choices": [\n-          [\n-            "TinyMCE", \n-            "TinyMCE"\n-          ], \n-          [\n-            "None", \n-            "None"\n-          ]\n-        ], \n         "default": "TinyMCE", \n         "description": "Select the default wysiwyg editor. Users will be able to choose their own or select to use the site default.", \n-        "enum": [\n-          "TinyMCE", \n-          "None"\n-        ], \n-        "enumNames": [\n-          "TinyMCE", \n-          "None"\n-        ], \n         "title": "Default editor", \n-        "type": "string"\n+        "type": "string", \n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AvailableEditors"\n+        }\n       }, \n       "enable_link_integrity_checks": {\n         "default": true, \ndiff --git a/src/plone/restapi/tests/http-examples/registry_get_list.resp b/src/plone/restapi/tests/http-examples/registry_get_list.resp\nindex f2bb5f51..5d13bb43 100644\n--- a/src/plone/restapi/tests/http-examples/registry_get_list.resp\n+++ b/src/plone/restapi/tests/http-examples/registry_get_list.resp\n@@ -188,12 +188,12 @@ Content-Type: application/json\n           ], \n           "description": "Paths to folders and collections to link to at the portal root.", \n           "items": {\n-            "choices": [], \n             "description": "", \n-            "enum": [], \n-            "enumNames": [], \n             "title": "", \n-            "type": "string"\n+            "type": "string", \n+            "vocabulary": {\n+              "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SyndicatableFeedItems"\n+            }\n           }, \n           "title": "Site RSS", \n           "type": "array", \n@@ -342,75 +342,12 @@ Content-Type: application/json\n           ], \n           "description": "Select which formats are available for users as alternative to the default format. Note that if new formats are installed, they will be enabled for text fields by default unless explicitly turned off here or by the relevant installer.", \n           "items": {\n-            "choices": [\n-              [\n-                "text/html", \n-                "text/html"\n-              ], \n-              [\n-                "text/plain", \n-                "text/plain"\n-              ], \n-              [\n-                "text/plain-pre", \n-                "text/plain-pre"\n-              ], \n-              [\n-                "text/restructured", \n-                "text/restructured"\n-              ], \n-              [\n-                "text/structured", \n-                "text/structured"\n-              ], \n-              [\n-                "text/x-python", \n-                "text/x-python"\n-              ], \n-              [\n-                "text/x-rst", \n-                "text/x-rst"\n-              ], \n-              [\n-                "text/x-web-intelligent", \n-                "text/x-web-intelligent"\n-              ], \n-              [\n-                "text/x-web-markdown", \n-                "text/x-web-markdown"\n-              ], \n-              [\n-                "text/x-web-textile", \n-                "text/x-web-textile"\n-              ]\n-            ], \n             "description": "", \n-            "enum": [\n-              "text/html", \n-              "text/plain", \n-              "text/plain-pre", \n-              "text/restructured", \n-              "text/structured", \n-              "text/x-python", \n-              "text/x-rst", \n-              "text/x-web-intelligent", \n-              "text/x-web-markdown", \n-              "text/x-web-textile"\n-            ], \n-            "enumNames": [\n-              "text/html", \n-              "text/plain", \n-              "text/plain-pre", \n-              "text/restructured", \n-              "text/structured", \n-              "text/x-python", \n-              "text/x-rst", \n-              "text/x-web-intelligent", \n-              "text/x-web-markdown", \n-              "text/x-web-textile"\n-            ], \n             "title": "", \n-            "type": "string"\n+            "type": "string", \n+            "vocabulary": {\n+              "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.AllowableContentTypes"\n+            }\n           }, \n           "title": "Alternative formats", \n           "type": "array", \n@@ -462,22 +399,13 @@ Content-Type: application/json\n       "name": "plone.app.discussion.interfaces.IDiscussionSettings.captcha", \n       "schema": {\n         "properties": {\n-          "choices": [\n-            [\n-              "disabled", \n-              "Disabled"\n-            ]\n-          ], \n           "default": "disabled", \n           "description": "Use this setting to enable or disable Captcha validation for comments. Install plone.formwidget.captcha, plone.formwidget.recaptcha, collective.akismet, or collective.z3cform.norobots if there are no options available.", \n-          "enum": [\n-            "disabled"\n-          ], \n-          "enumNames": [\n-            "Disabled"\n-          ], \n           "title": "Captcha", \n-          "type": "string"\n+          "type": "string", \n+          "vocabulary": {\n+            "@id": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.CaptchaVocabulary"\n+          }\n         }\n       }, \n       "value": "disabled"\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\nindex a6ce8d8c..977df0c5 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n@@ -91,7 +91,11 @@ Content-Type: application/json+schema\n       "title": "Colaboradores", \n       "type": "array", \n       "uniqueItems": true, \n-      "vocabulary": "plone.app.vocabularies.Users"\n+      "widgetOptions": {\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        }\n+      }\n     }, \n     "creators": {\n       "additionalItems": true, \n@@ -104,7 +108,11 @@ Content-Type: application/json+schema\n       "title": "Creadores", \n       "type": "array", \n       "uniqueItems": true, \n-      "vocabulary": "plone.app.vocabularies.Users"\n+      "widgetOptions": {\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        }\n+      }\n     }, \n     "description": {\n       "description": "Usado en listados de elementos y resultados de b\\u00fasquedas.", \n@@ -137,40 +145,13 @@ Content-Type: application/json+schema\n       "type": "string"\n     }, \n     "language": {\n-      "choices": [\n-        [\n-          "de", \n-          "Deutsch"\n-        ], \n-        [\n-          "en", \n-          "English"\n-        ], \n-        [\n-          "es", \n-          "Espa\\u00f1ol"\n-        ], \n-        [\n-          "fr", \n-          "Fran\\u00e7ais"\n-        ]\n-      ], \n       "default": "en", \n       "description": "", \n-      "enum": [\n-        "de", \n-        "en", \n-        "es", \n-        "fr"\n-      ], \n-      "enumNames": [\n-        "Deutsch", \n-        "English", \n-        "Espa\\u00f1ol", \n-        "Fran\\u00e7ais"\n-      ], \n       "title": "Idioma", \n-      "type": "string"\n+      "type": "string", \n+      "vocabulary": {\n+        "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SupportedContentLanguages"\n+      }\n     }, \n     "nextPreviousEnabled": {\n       "default": false, \n@@ -185,15 +166,22 @@ Content-Type: application/json+schema\n       "items": {\n         "description": "", \n         "title": "Related", \n-        "type": "string"\n-      }, \n-      "pattern_options": {\n-        "recentlyUsed": true\n+        "type": "string", \n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        }\n       }, \n       "title": "Contenido relacionado", \n       "type": "array", \n       "uniqueItems": true, \n-      "vocabulary": "plone.app.vocabularies.Catalog"\n+      "widgetOptions": {\n+        "pattern_options": {\n+          "recentlyUsed": true\n+        }, \n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        }\n+      }\n     }, \n     "rights": {\n       "description": "Declaraci\\u00f3n de copyright o informaci\\u00f3n de otros derechos sobre este elemento.", \n@@ -203,13 +191,21 @@ Content-Type: application/json+schema\n       "widget": "textarea"\n     }, \n     "subjects": {\n-      "choices": [], \n+      "additionalItems": true, \n       "description": "Las etiquetas suelen utilizarse para la organizaci\\u00f3n a medida del contenido.", \n-      "enum": [], \n-      "enumNames": [], \n+      "items": {\n+        "description": "", \n+        "title": "", \n+        "type": "string"\n+      }, \n       "title": "Etiquetas", \n-      "type": "string", \n-      "vocabulary": "plone.app.vocabularies.Keywords"\n+      "type": "array", \n+      "uniqueItems": true, \n+      "widgetOptions": {\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+        }\n+      }\n     }, \n     "title": {\n       "description": "", \ndiff --git a/src/plone/restapi/tests/http-examples/types_document.resp b/src/plone/restapi/tests/http-examples/types_document.resp\nindex c16c6fb4..3d58d183 100644\n--- a/src/plone/restapi/tests/http-examples/types_document.resp\n+++ b/src/plone/restapi/tests/http-examples/types_document.resp\n@@ -94,7 +94,11 @@ Content-Type: application/json+schema\n       "title": "Contributors", \n       "type": "array", \n       "uniqueItems": true, \n-      "vocabulary": "plone.app.vocabularies.Users"\n+      "widgetOptions": {\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        }\n+      }\n     }, \n     "creators": {\n       "additionalItems": true, \n@@ -107,7 +111,11 @@ Content-Type: application/json+schema\n       "title": "Creators", \n       "type": "array", \n       "uniqueItems": true, \n-      "vocabulary": "plone.app.vocabularies.Users"\n+      "widgetOptions": {\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+        }\n+      }\n     }, \n     "description": {\n       "description": "Used in item listings and search results.", \n@@ -140,40 +148,13 @@ Content-Type: application/json+schema\n       "type": "string"\n     }, \n     "language": {\n-      "choices": [\n-        [\n-          "de", \n-          "Deutsch"\n-        ], \n-        [\n-          "en", \n-          "English"\n-        ], \n-        [\n-          "es", \n-          "Espa\\u00f1ol"\n-        ], \n-        [\n-          "fr", \n-          "Fran\\u00e7ais"\n-        ]\n-      ], \n       "default": "en", \n       "description": "", \n-      "enum": [\n-        "de", \n-        "en", \n-        "es", \n-        "fr"\n-      ], \n-      "enumNames": [\n-        "Deutsch", \n-        "English", \n-        "Espa\\u00f1ol", \n-        "Fran\\u00e7ais"\n-      ], \n       "title": "Language", \n-      "type": "string"\n+      "type": "string", \n+      "vocabulary": {\n+        "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SupportedContentLanguages"\n+      }\n     }, \n     "relatedItems": {\n       "additionalItems": true, \n@@ -182,15 +163,22 @@ Content-Type: application/json+schema\n       "items": {\n         "description": "", \n         "title": "Related", \n-        "type": "string"\n-      }, \n-      "pattern_options": {\n-        "recentlyUsed": true\n+        "type": "string", \n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        }\n       }, \n       "title": "Related Items", \n       "type": "array", \n       "uniqueItems": true, \n-      "vocabulary": "plone.app.vocabularies.Catalog"\n+      "widgetOptions": {\n+        "pattern_options": {\n+          "recentlyUsed": true\n+        }, \n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+        }\n+      }\n     }, \n     "rights": {\n       "description": "Copyright statement or other rights information on this item.", \n@@ -200,13 +188,21 @@ Content-Type: application/json+schema\n       "widget": "textarea"\n     }, \n     "subjects": {\n-      "choices": [], \n+      "additionalItems": true, \n       "description": "Tags are commonly used for ad-hoc organization of content.", \n-      "enum": [], \n-      "enumNames": [], \n+      "items": {\n+        "description": "", \n+        "title": "", \n+        "type": "string"\n+      }, \n       "title": "Tags", \n-      "type": "string", \n-      "vocabulary": "plone.app.vocabularies.Keywords"\n+      "type": "array", \n+      "uniqueItems": true, \n+      "widgetOptions": {\n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+        }\n+      }\n     }, \n     "table_of_contents": {\n       "description": "If selected, this will show a table of contents at the top of the page.", \ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get.resp b/src/plone/restapi/tests/http-examples/vocabularies_get.resp\nindex 06ecfc17..3720bfcc 100644\n--- a/src/plone/restapi/tests/http-examples/vocabularies_get.resp\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get.resp\n@@ -3,66 +3,55 @@ Content-Type: application/json\n \n {\n   "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes", \n-  "terms": [\n+  "items": [\n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Collection", \n       "title": "Collection", \n       "token": "Collection"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Discussion Item", \n       "title": "Comment", \n       "token": "Discussion Item"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/DXTestDocument", \n       "title": "DX Test Document", \n       "token": "DXTestDocument"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Event", \n       "title": "Event", \n       "token": "Event"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/File", \n       "title": "File", \n       "token": "File"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Folder", \n       "title": "Folder", \n       "token": "Folder"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Image", \n       "title": "Image", \n       "token": "Image"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Link", \n       "title": "Link", \n       "token": "Link"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/News Item", \n       "title": "News Item", \n       "token": "News Item"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Document", \n       "title": "Page", \n       "token": "Document"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/ATTestDocument", \n       "title": "Test Document", \n       "token": "ATTestDocument"\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/ATTestFolder", \n       "title": "Test Folder", \n       "token": "ATTestFolder"\n     }\n-  ]\n+  ], \n+  "items_total": 12\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req\nnew file mode 100644\nindex 00000000..a46aae2d\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.req\n@@ -0,0 +1,3 @@\n+GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?title=doc HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\nnew file mode 100644\nindex 00000000..f9de1ebd\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered.resp\n@@ -0,0 +1,57 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?title=doc", \n+  "items": [\n+    {\n+      "title": "Collection", \n+      "token": "Collection"\n+    }, \n+    {\n+      "title": "Comment", \n+      "token": "Discussion Item"\n+    }, \n+    {\n+      "title": "DX Test Document", \n+      "token": "DXTestDocument"\n+    }, \n+    {\n+      "title": "Event", \n+      "token": "Event"\n+    }, \n+    {\n+      "title": "File", \n+      "token": "File"\n+    }, \n+    {\n+      "title": "Folder", \n+      "token": "Folder"\n+    }, \n+    {\n+      "title": "Image", \n+      "token": "Image"\n+    }, \n+    {\n+      "title": "Link", \n+      "token": "Link"\n+    }, \n+    {\n+      "title": "News Item", \n+      "token": "News Item"\n+    }, \n+    {\n+      "title": "Page", \n+      "token": "Document"\n+    }, \n+    {\n+      "title": "Test Document", \n+      "token": "ATTestDocument"\n+    }, \n+    {\n+      "title": "Test Folder", \n+      "token": "ATTestFolder"\n+    }\n+  ], \n+  "items_total": 12\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.req b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.req\nnew file mode 100644\nindex 00000000..a46aae2d\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.req\n@@ -0,0 +1,3 @@\n+GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?title=doc HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.resp b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.resp\nnew file mode 100644\nindex 00000000..52ec2577\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.resp\n@@ -0,0 +1,17 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?title=doc", \n+  "items": [\n+    {\n+      "title": "DX Test Document", \n+      "token": "DXTestDocument"\n+    }, \n+    {\n+      "title": "Test Document", \n+      "token": "ATTestDocument"\n+    }\n+  ], \n+  "items_total": 2\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.req b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.req\nnew file mode 100644\nindex 00000000..d8295310\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.req\n@@ -0,0 +1,3 @@\n+GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?token=Document HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.resp b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.resp\nnew file mode 100644\nindex 00000000..a46e062c\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.resp\n@@ -0,0 +1,13 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?token=Document", \n+  "items": [\n+    {\n+      "title": "Page", \n+      "token": "Document"\n+    }\n+  ], \n+  "items_total": 1\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/test_auth.py b/src/plone/restapi/tests/test_auth.py\nindex 211a39c1..20889aa6 100644\n--- a/src/plone/restapi/tests/test_auth.py\n+++ b/src/plone/restapi/tests/test_auth.py\n@@ -174,6 +174,9 @@ def test_renew_without_pas_plugin_fails(self):\n         self.assertIn(\'error\', res)\n \n     def test_renew_returns_token(self):\n+        self.portal.acl_users.jwt_auth.store_tokens = True\n+        token = self.portal.acl_users.jwt_auth.create_token(\'admin\')\n+        self.request._auth = \'Bearer {}\'.format(token)\n         service = self.traverse()\n         res = service.reply()\n         self.assertIn(\'token\', res)\n@@ -187,3 +190,17 @@ def test_renew_deletes_old_token(self):\n         self.assertIn(\'token\', res)\n         self.assertEqual(\n             1, len(self.portal.acl_users.jwt_auth._tokens[\'admin\']))\n+\n+    def test_renew_fails_on_invalid_token(self):\n+        token = \'this is an invalid token\'\n+        self.request._auth = \'Bearer {}\'.format(token)\n+        service = self.traverse()\n+        res = service.reply()\n+        self.assertEqual(\n+            service.request.response.status,\n+            401\n+        )\n+        self.assertEqual(\n+            res[\'error\'][\'type\'],\n+            \'Invalid or expired authentication token\'\n+        )\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 9b6d9bfb..009e2036 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1124,6 +1124,22 @@ def test_documentation_vocabularies_get(self):\n         )\n         save_request_and_response_for_docs(\'vocabularies_get\', response)\n \n+    def test_documentation_vocabularies_get_filtered_by_title(self):\n+        response = self.api_session.get(\n+            \'/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?\'\n+            \'title=doc\'\n+        )\n+        save_request_and_response_for_docs(\n+            \'vocabularies_get_filtered_by_title\', response)\n+\n+    def test_documentation_vocabularies_get_filtered_by_token(self):\n+        response = self.api_session.get(\n+            \'/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?\'\n+            \'token=Document\'\n+        )\n+        save_request_and_response_for_docs(\n+            \'vocabularies_get_filtered_by_token\', response)\n+\n     def test_documentation_sharing_folder_get(self):\n         self.portal.invokeFactory(\'Folder\', id=\'folder\')\n         transaction.commit()\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex 91e3fb3a..d493b6a4 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -91,6 +91,24 @@ def test_choice_deserialization_returns_vocabulary_item(self):\n         self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'bar\', value)\n \n+    def test_choice_deserialization_from_token_returns_vocabulary_value(self):\n+        value = self.deserialize(\'test_choice_field_with_vocabulary\',\n+                                 u\'token1\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n+        self.assertEqual(u\'value1\', value)\n+\n+    def test_choice_deserialization_from_value_returns_vocabulary_value(self):\n+        value = self.deserialize(\'test_choice_field_with_vocabulary\',\n+                                 u\'value1\')\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n+        self.assertEqual(u\'value1\', value)\n+\n+    def test_choice_deserialization_from_term_returns_vocabulary_value(self):\n+        value = self.deserialize(\'test_choice_field_with_vocabulary\',\n+                                 {u\'token\': u\'token1\', u\'title\': u\'title1\'})\n+        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n+        self.assertEqual(u\'value1\', value)\n+\n     def test_date_deserialization_returns_date(self):\n         value = self.deserialize(\'test_date_field\', u\'2015-12-20\')\n         self.assertTrue(isinstance(value, date))\n@@ -173,6 +191,25 @@ def test_list_deserialization_returns_list(self):\n         self.assertTrue(isinstance(value, list), \'Not a <list>\')\n         self.assertEqual([1, 2, 3], value)\n \n+    def test_list_deserialization_from_tokens_returns_list_of_values(self):\n+        value = self.deserialize(\'test_list_field_with_choice_with_vocabulary\',\n+                                 [u\'token1\', u\'token3\'])\n+        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n+        self.assertEqual([u\'value1\', u\'value3\'], value)\n+\n+    def test_list_deserialization_from_values_returns_list_of_values(self):\n+        value = self.deserialize(\'test_list_field_with_choice_with_vocabulary\',\n+                                 [u\'value1\', u\'value3\'])\n+        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n+        self.assertEqual([u\'value1\', u\'value3\'], value)\n+\n+    def test_list_deserialization_from_terms_returns_list_of_values(self):\n+        value = self.deserialize(\'test_list_field_with_choice_with_vocabulary\',\n+                                 [{u\'token\': u\'token1\', u\'title\': u\'title1\'},\n+                                  {u\'token\': u\'token3\', u\'title\': u\'title3\'}])\n+        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n+        self.assertEqual([u\'value1\', u\'value3\'], value)\n+\n     def test_set_deserialization_returns_set(self):\n         value = self.deserialize(\'test_set_field\', [1, 2, 3])\n         self.assertTrue(isinstance(value, set), \'Not a <set>\')\ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex 99fc6f32..39da5413 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -90,10 +90,15 @@ def test_bytesline_field_serialization_returns_unicode(self):\n         self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n         self.assertEqual(u\'\\xe4\\xf6\\xfc\', value)\n \n-    def test_choice_field_serialization_returns_vocabulary_item(self):\n+    def test_choice_field_serialization_returns_vocabulary_term(self):\n         value = self.serialize(\'test_choice_field\', u\'foo\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'foo\', value)\n+        self.assertTrue(isinstance(value, dict))\n+        self.assertEqual({u\'token\': u\'foo\', u\'title\': None}, value)\n+\n+    def test_choice_field_with_vocabulary_serialization_returns_vocabulary_term(self):  # noqa\n+        value = self.serialize(\'test_choice_field_with_vocabulary\', u\'value1\')\n+        self.assertTrue(isinstance(value, dict))\n+        self.assertEqual({u\'token\': u\'token1\', u\'title\': u\'title1\'}, value)\n \n     def test_date_field_serialization_returns_unicode(self):\n         value = self.serialize(\'test_date_field\', date(2015, 7, 15))\n@@ -137,6 +142,18 @@ def test_list_field_serialization_returns_list(self):\n         self.assertTrue(isinstance(value, list), \'Not a <list>\')\n         self.assertEqual([1, u\'two\', 3], value)\n \n+    def test_list_field_with_vocabulary_choice_serialization_returns_terms(\n+            self):\n+        value = self.serialize(\'test_list_field_with_choice_with_vocabulary\',\n+                               [u\'value1\', u\'value3\'])\n+        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n+        self.assertEqual(\n+            [\n+                {u\'token\': u\'token1\', u\'title\': u\'title1\'},\n+                {u\'token\': u\'token3\', u\'title\': u\'title3\'},\n+            ],\n+            value)\n+\n     def test_set_field_serialization_returns_list(self):\n         value = self.serialize(\'test_set_field\', set([\'a\', \'b\', \'c\']))\n         self.assertTrue(isinstance(value, list), \'Not a <list>\')\ndiff --git a/src/plone/restapi/tests/test_services_email_notification.py b/src/plone/restapi/tests/test_services_email_notification.py\nindex 9bd05135..0e6ce006 100644\n--- a/src/plone/restapi/tests/test_services_email_notification.py\n+++ b/src/plone/restapi/tests/test_services_email_notification.py\n@@ -49,6 +49,19 @@ def setUp(self):\n     def tearDown(self):\n         self.api_session.close()\n \n+    def test_email_notification_missing_parameters(self):\n+        response = self.api_session.post(\n+            \'/@email-notification\',\n+            json={\n+                \'message\': \'Just want to say hi.\'\n+            })\n+        transaction.commit()\n+        self.assertEqual(response.status_code, 400)\n+        self.assertEqual(self.mailhost.messages, [])\n+        error = response.json()\n+        self.assertEqual(error[\'message\'],\n+                         \'Missing from or message parameters\')\n+\n     def test_email_notification(self):\n         response = self.api_session.post(\n             \'/@email-notification\',\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 25b6cf65..69a9a8d0 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -62,14 +62,133 @@ def test_get_vocabulary(self):\n         response = response.json()\n         self.assertEqual(\n             response,\n-            {u\'@id\': self.portal_url + u\'/@vocabularies/\'\'plone.restapi.tests.test_vocabulary\',  # noqa\n-             u\'terms\': [\n-                 {u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary/token1\',  # noqa\n-                  u\'title\': u\'Title 1\',\n-                  u\'token\': u\'token1\'},\n-                 {u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary/token2\',  # noqa\n-                  u\'title\': u\'Title 2\',\n-                  u\'token\': u\'token2\'}]})\n+            {\n+                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary\',  # noqa\n+                u\'items\': [\n+                    {u\'title\': u\'Title 1\', u\'token\': u\'token1\'},\n+                    {u\'title\': u\'Title 2\', u\'token\': u\'token2\'},\n+                ],\n+                u\'items_total\': 2,\n+            }\n+        )\n+\n+    def test_get_vocabulary_batched(self):\n+        response = self.api_session.get(\n+            \'/@vocabularies/plone.restapi.tests.test_vocabulary?b_size=1\'\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        response = response.json()\n+        self.assertEqual(\n+            response,\n+            {\n+                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary\',  # noqa\n+                u\'batching\': {\n+                    u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?b_size=1\',  # noqa\n+                    u\'first\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=0&b_size=1\',  # noqa\n+                    u\'last\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1\',  # noqa\n+                    u\'next\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1\',  # noqa\n+                },\n+                u\'items\': [\n+                    {u\'title\': u\'Title 1\', u\'token\': u\'token1\'},\n+                ],\n+                u\'items_total\': 2,\n+            }\n+        )\n+\n+    def test_get_vocabulary_filtered_by_title(self):\n+        response = self.api_session.get(\n+            \'/@vocabularies/plone.restapi.tests.test_vocabulary?title=2\'\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        response = response.json()\n+        self.assertEqual(\n+            response,\n+            {\n+                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?title=2\',  # noqa\n+                u\'items\': [\n+                    {\n+                        u\'title\': u\'Title 2\',\n+                        u\'token\': u\'token2\',\n+                    }\n+                ],\n+                u\'items_total\': 1,\n+            }\n+        )\n+\n+    def test_get_vocabulary_filtered_by_token(self):\n+        response = self.api_session.get(\n+            \'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1\'\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        response = response.json()\n+        self.assertEqual(\n+            response,\n+            {\n+                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1\',  # noqa\n+                u\'items\': [\n+                    {\n+                        u\'title\': u\'Title 1\',\n+                        u\'token\': u\'token1\',\n+                    }\n+                ],\n+                u\'items_total\': 1,\n+            }\n+        )\n+\n+    def test_get_vocabulary_filtered_by_token_partial_not_match(self):\n+        response = self.api_session.get(\n+            \'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token\'\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        response = response.json()\n+        self.assertEqual(\n+            response,\n+            {\n+                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token\',  # noqa\n+                u\'items\': [],\n+                u\'items_total\': 0,\n+            }\n+        )\n+\n+    def test_get_vocabulary_filtered_by_title_and_token_returns_error(self):\n+        response = self.api_session.get(\n+            \'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&title=Title\'  # noqa\n+        )\n+\n+        self.assertEqual(400, response.status_code)\n+        response = response.json()\n+        self.assertEqual(\n+            response.get(\'error\'),\n+            {\n+                u\'message\': u\'You can not filter by title and token at the same time.\',  # noqa\n+                u\'type\': u\'Invalid parameters\'\n+            }\n+        )\n+\n+    def test_get_corner_case_vocabulary_filtered_by_token(self):\n+        response = self.api_session.get(\n+            \'/@vocabularies/plone.app.vocabularies.Weekdays?token=0\'\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        response = response.json()\n+        self.assertEqual(\n+            response,\n+            {\n+                u\'@id\': self.portal_url + u\'/@vocabularies/plone.app.vocabularies.Weekdays?token=0\',  # noqa\n+                u\'items\': [\n+                    {\n+                        \'title\': \'Monday\',\n+                        \'token\': \'0\'\n+                    }\n+                ],\n+                u\'items_total\': 1,\n+            }\n+        )\n \n     def test_get_unknown_vocabulary(self):\n         response = self.api_session.get(\n@@ -129,13 +248,12 @@ def test_context_vocabulary(self):\n             response.json(),\n             {\n                 u\'@id\': self.portal_url + u\'/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary\',  # noqa\n-                u\'terms\': [\n-                    {u\'@id\': self.portal_url + u\'/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary/id\',  # noqa\n-                     u\'title\': u\'testdoc\',\n-                     u\'token\': u\'id\'},\n-                    {u\'@id\': self.portal_url + u\'/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary/title\',  # noqa\n-                     u\'title\': u\'Document 1\',\n-                     u\'token\': u\'title\'}]\n+                u\'items\': [\n+                    {u\'title\': u\'testdoc\', u\'token\': u\'id\'},\n+                    {u\'title\': u\'Document 1\', u\'token\': u\'title\'},\n+                ],\n+                u\'items_total\': 2,\n+\n             })\n \n     def tearDown(self):\ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex 8c3a8d87..c637e071 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -189,7 +189,8 @@ def test_get_jsonschema_with_widget_params(self):\n         )\n         self.assertEqual(\n             \'some_value\',\n-            jsonschema[\'properties\'][\'parametrized_widget_field\'][\'a_param\']\n+            jsonschema[\'properties\'][\'parametrized_widget_field\'][\n+                \'widgetOptions\'][\'a_param\']\n         )\n \n     def test_do_not_fail_with_non_parametrized_widget(self):\n@@ -214,8 +215,8 @@ def test_resolve_callable_widget_params(self):\n \n         self.assertEqual(\n             u\'Foo\',\n-            jsonschema[\'properties\'][\'parametrized_widget_field\'].get(\n-                \'defaultFactory\')\n+            jsonschema[\'properties\'][\'parametrized_widget_field\'][\n+                \'widgetOptions\'].get(\'defaultFactory\')\n         )\n \n \n@@ -395,6 +396,25 @@ def test_choice(self):\n             adapter.get_schema()\n         )\n \n+    def test_choice_named_vocab(self):\n+        field = schema.Choice(\n+            title=u\'My field\',\n+            description=u\'My great field\',\n+            vocabulary=\'plone.app.vocabularies.ReallyUserFriendlyTypes\',\n+        )\n+        adapter = getMultiAdapter((field, self.portal, self.request),\n+                                  IJsonSchemaProvider)\n+\n+        self.assertEqual(\n+            {\n+                \'type\': \'string\',\n+                \'title\': u\'My field\',\n+                \'description\': u\'My great field\',\n+                \'vocabulary\': { \'@id\': u\'http://nohost/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes\' }  # noqa\n+            },\n+            adapter.get_schema()\n+        )\n+\n     def test_choice_source_vocab(self):\n         field = schema.Choice(\n             title=u\'My field\',\n@@ -600,7 +620,7 @@ def test_date(self):\n                 \'title\': u\'My field\',\n                 \'description\': u\'My great field\',\n                 \'default\': date(2016, 1, 1),\n-                \'widget\': u\'date\',\n+                \'widget\': u\'date\'\n             },\n             adapter.get_schema()\n         )\ndiff --git a/src/plone/restapi/types/adapters.py b/src/plone/restapi/types/adapters.py\nindex 657fa46a..677c3aa6 100644\n--- a/src/plone/restapi/types/adapters.py\n+++ b/src/plone/restapi/types/adapters.py\n@@ -1,12 +1,9 @@\n # -*- coding: utf-8 -*-\n """JsonSchema providers."""\n-from plone.autoform.interfaces import WIDGETS_KEY\n-\n from plone.app.textfield.interfaces import IRichText\n from plone.schema import IJSONField\n from zope.component import adapter\n from zope.component import getMultiAdapter\n-from zope.component import getUtility\n from zope.i18n import translate\n from zope.interface import implementer\n from zope.interface import Interface\n@@ -30,11 +27,11 @@\n from zope.schema.interfaces import IText\n from zope.schema.interfaces import ITextLine\n from zope.schema.interfaces import ITuple\n-from zope.schema.interfaces import IVocabularyFactory\n \n from plone.restapi.types.interfaces import IJsonSchemaProvider\n-from plone.restapi.types.utils import get_fieldsets, get_tagged_values\n+from plone.restapi.types.utils import get_fieldsets, get_widget_params\n from plone.restapi.types.utils import get_jsonschema_properties\n+from plone.restapi.types.utils import get_vocabulary_url\n \n \n @adapter(IField, Interface, Interface)\n@@ -74,6 +71,10 @@ def get_schema(self):\n         if widget:\n             schema[\'widget\'] = widget\n \n+        widget_options = self.get_widget_params()\n+        if widget_options:\n+            schema[\'widgetOptions\'] = widget_options\n+\n         if self.field.default is not None:\n             schema[\'default\'] = self.field.default\n \n@@ -86,6 +87,16 @@ def get_type(self):\n     def get_widget(self):\n         return None\n \n+    def get_widget_params(self):\n+        all_params = get_widget_params([self.field.interface])\n+        params = all_params.get(self.field.getName(), {})\n+        if \'vocabulary\' in params:\n+            vocab_name = params[\'vocabulary\']\n+            params[\'vocabulary\'] = {\n+                    \'@id\': get_vocabulary_url(\n+                        vocab_name, self.context, self.request)}\n+        return params\n+\n \n @adapter(IBytes, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n@@ -232,7 +243,6 @@ def additional(self):\n @adapter(ITuple, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class TupleJsonSchemaProvider(SetJsonSchemaProvider):\n-\n     pass\n \n \n@@ -248,30 +258,30 @@ def get_type(self):\n         return \'string\'\n \n     def additional(self):\n-        # choices and enumNames are v5 proposals, for now we implement both\n-        choices = []\n-        enum = []\n-        enum_names = []\n-        vocabulary = None\n-\n-        if getattr(self.field, \'vocabularyName\', None):\n-            vocabulary = getUtility(\n-                IVocabularyFactory,\n-                name=self.field.vocabularyName)(self.context)\n-        elif getattr(self.field, \'vocabulary\', None):\n-            vocabulary = self.field.vocabulary\n-        else:\n-            tagged = get_tagged_values([self.field.interface], WIDGETS_KEY)\n-            tagged_field_values = tagged.get(self.field.getName(), {})\n-            vocab_name = tagged_field_values.get(\'vocabulary\', None)\n-            if vocab_name:\n-                vocab_fac = getUtility(IVocabularyFactory, name=vocab_name)\n-                vocabulary = vocab_fac(self.context)\n+        vocab_name = getattr(self.field, \'vocabularyName\', None)\n+        if vocab_name:\n+            return {\n+                \'vocabulary\': {\n+                    \'@id\': get_vocabulary_url(\n+                        vocab_name,\n+                        self.context,\n+                        self.request\n+                    )\n+                }\n+            }\n \n+        # Maybe we have an unnamed vocabulary or source.\n+\n+        vocabulary = getattr(self.field, \'vocabulary\', None)\n         if IContextSourceBinder.providedBy(vocabulary):\n             vocabulary = vocabulary(self.context)\n \n         if hasattr(vocabulary, \'__iter__\') and self.should_render_choices:\n+            # choices and enumNames are v5 proposals, for now we implement both\n+            choices = []\n+            enum = []\n+            enum_names = []\n+\n             for term in vocabulary:\n                 title = translate(term.title, context=self.request)\n                 choices.append((term.token, title))\ndiff --git a/src/plone/restapi/types/configure.zcml b/src/plone/restapi/types/configure.zcml\nindex d099575a..bfb356b2 100644\n--- a/src/plone/restapi/types/configure.zcml\n+++ b/src/plone/restapi/types/configure.zcml\n@@ -19,7 +19,6 @@\n         zcml:condition="installed z3c.relationfield"\n         factory=".z3crelationadapter.ChoiceslessRelationListSchemaProvider"\n         name="IRelatedItems.relatedItems" />\n-    <adapter factory=".adapters.SubjectsFieldJsonSchemaProvider" name="IDublinCore.subjects" />\n     <adapter factory=".adapters.SetJsonSchemaProvider" />\n     <adapter factory=".adapters.TupleJsonSchemaProvider" />\n     <adapter factory=".adapters.ChoiceJsonSchemaProvider" />\ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex e2bc597a..8243778c 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -19,13 +19,14 @@\n from plone.autoform.interfaces import IParameterizedWidget\n from plone.autoform.interfaces import WIDGETS_KEY\n from plone.dexterity.utils import getAdditionalSchemata\n-from plone.restapi.serializer.converters import json_compatible\n+from plone.restapi.serializer.converters import IJsonCompatible\n from plone.restapi.types.interfaces import IJsonSchemaProvider\n from Products.CMFCore.utils import getToolByName\n from plone.supermodel.utils import mergedTaggedValueDict\n from z3c.form import form as z3c_form\n from zope.component import getMultiAdapter\n from zope.component import queryMultiAdapter\n+from zope.component.hooks import getSite\n from zope.globalrequest import getRequest\n from zope.i18n import translate\n \n@@ -95,7 +96,7 @@ def get_fieldset_infos(fieldsets):\n \n \n def get_jsonschema_properties(context, request, fieldsets, prefix=\'\',\n-                              excluded_fields=None, tagged_values={}):\n+                              excluded_fields=None):\n     """Build a JSON schema \'properties\' list, based on a list of fieldset\n     dicts as returned by `get_fieldsets()`.\n     """\n@@ -124,27 +125,23 @@ def get_jsonschema_properties(context, request, fieldsets, prefix=\'\',\n \n             properties[fieldname] = adapter.get_schema()\n \n-            for key, value in tagged_values.get(fieldname, {}).items():\n-                if key in properties[fieldname]:\n-                    continue\n-                properties[fieldname][key] = value\n-\n     return properties\n \n \n-def get_tagged_values(schemas, key):\n+def get_widget_params(schemas):\n     params = {}\n     for schema in schemas:\n         if not schema:\n             continue\n-        tagged_values = mergedTaggedValueDict(schema, key)\n+        tagged_values = mergedTaggedValueDict(schema, WIDGETS_KEY)\n         for field_name in schema:\n             widget = tagged_values.get(field_name)\n             if IParameterizedWidget.providedBy(widget) and widget.params:\n-                params[field_name] = widget.params.copy()\n-                for k, v in params[field_name].items():\n+                params[field_name] = {}\n+                for k, v in widget.params.items():\n                     if callable(v):\n-                        params[field_name][k] = v()\n+                        v = v()\n+                    params[field_name][k] = v\n     return params\n \n \n@@ -168,16 +165,12 @@ def get_jsonschema_for_fti(fti, context, request, excluded_fields=None):\n             context, request, schema, additional_schemata\n         )\n \n-    # Mangle the properties a bit to add widgets hints\n-    schemas = (schema,) + additional_schemata\n-\n     # Build JSON schema properties\n     properties = get_jsonschema_properties(\n         context,\n         request,\n         fieldsets,\n         excluded_fields=excluded_fields,\n-        tagged_values=get_tagged_values(schemas, WIDGETS_KEY)\n     )\n \n     # Determine required fields\n@@ -194,7 +187,7 @@ def get_jsonschema_for_fti(fti, context, request, excluded_fields=None):\n     return {\n         \'type\': \'object\',\n         \'title\': translate(fti.Title(), context=getRequest()),\n-        \'properties\': json_compatible(properties),\n+        \'properties\': IJsonCompatible(properties),\n         \'required\': required,\n         \'fieldsets\': get_fieldset_infos(fieldsets),\n         \'layouts\': getattr(fti, \'view_methods\', []),\n@@ -209,3 +202,15 @@ def get_jsonschema_for_portal_type(portal_type, context, request,\n     fti = ttool[portal_type]\n     return get_jsonschema_for_fti(\n         fti, context, request, excluded_fields=excluded_fields)\n+\n+\n+def get_vocabulary_url(vocab_name, context, request):\n+    try:\n+        context_url = context.absolute_url()\n+    except AttributeError:\n+        portal = getSite()\n+        context_url = portal.absolute_url()\n+    return \'{}/@vocabularies/{}\'.format(\n+        context_url,\n+        vocab_name,\n+    )\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-05-07T17:26:19+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/3a1e1084780b31697cd5516f07e8871b3428dcd1

Merge pull request #728 from plone/kitconcept-buildout

Use kitconcept buildout

Files changed:
M Makefile

b'diff --git a/Makefile b/Makefile\nindex 42574ec8..60eba0a9 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -1,9 +1,33 @@\n-# convenience makefile to boostrap & run buildout\n+# keep in sync with: https://github.com/kitconcept/buildout/edit/master/Makefile\n+# update by running \'make update\'\n+SHELL := /bin/bash\n+CURRENT_DIR:=$(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))\n \n version = 2.7\n \n+# We like colors\n+# From: https://coderwall.com/p/izxssa/colored-makefile-for-golang-projects\n+RED=`tput setaf 1`\n+GREEN=`tput setaf 2`\n+RESET=`tput sgr0`\n+YELLOW=`tput setaf 3`\n+\n all: .installed.cfg\n-\tbin/test\n+\n+# Add the following \'help\' target to your Makefile\n+# And add help text after each target name starting with \'\\#\\#\'\n+.PHONY: help\n+help: ## This help message\n+\t@grep -E \'^[a-zA-Z_-]+:.*?## .*$$\' $(MAKEFILE_LIST) | sort | awk \'BEGIN {FS = ":.*?## "}; {printf "\\033[36m%-30s\\033[0m %s\\n", $$1, $$2}\'\n+\n+.PHONY: Update Makefile and Buildout\n+update: ## Update Make and Buildout\n+\twget -O Makefile https://raw.githubusercontent.com/kitconcept/buildout/master/Makefile\n+\twget -O requirements.txt https://raw.githubusercontent.com/kitconcept/buildout/master/requirements.txt\n+\twget -O plone-4.3.x.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/plone-4.3.x.cfg\n+\twget -O plone-5.1.x.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/plone-5.1.x.cfg\n+\twget -O plone-5.2.x.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/plone-5.2.x.cfg\n+\twget -O versions.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/versions.cfg\n \n .installed.cfg: bin/buildout *.cfg\n \tbin/buildout\n@@ -13,12 +37,32 @@ bin/buildout: bin/pip\n \tbin/pip install -r requirements.txt\n \t@touch -c $@\n \n-build-plone-5.2: .installed.cfg\n+.PHONY: Build Plone 4.3\n+build-plone-4.3: .installed.cfg ## Build Plone 4.3\n+\tbin/pip install --upgrade pip\n+\tbin/pip install -r requirements.txt\n+\tbin/buildout -c plone-4.3.x.cfg\n+\n+.PHONY: Build Plone 5.0\n+build-plone-5.0: .installed.cfg ## Build Plone 5.0\n+\tbin/pip install --upgrade pip\n+\tbin/pip install -r requirements.txt\n+\tbin/buildout -c plone-5.0.x.cfg\n+\n+.PHONY: Build Plone 5.1\n+build-plone-5.1: .installed.cfg  ## Build Plone 5.1\n+\tbin/pip install --upgrade pip\n+\tbin/pip install -r requirements.txt\n+\tbin/buildout -c plone-5.1.x.cfg\n+\n+.PHONY: Build Plone 5.2\n+build-plone-5.2: .installed.cfg  ## Build Plone 5.2\n \tbin/pip install --upgrade pip\n \tbin/pip install -r requirements.txt\n \tbin/buildout -c plone-5.2.x.cfg\n \n-build-py3:\n+ ## Build Plone 5.2 with Python 3\n+build-py3:  ## Build Plone 5.2 with Python 3\n \tvirtualenv --python=python3 .\n \tbin/pip install --upgrade pip\n \tbin/pip install -r requirements.txt\n@@ -27,13 +71,24 @@ build-py3:\n bin/python bin/pip:\n \tvirtualenv --clear --python=python$(version) .\n \n+.PHONY: Test\n+test:  ## Test\n+\tbin/test\n+\n+.PHONY: Test Performance\n test-performance:\n \tjmeter -n -t performance.jmx -l jmeter.jtl\n \n-release:\n+.PHONY: Code Analysis\n+code-analysis:  ## Code Analysis\n+\tbin/code-analysis\n+\n+.PHONY: Release\n+release:  ## Release\n \tbin/fullrelease\n \n-clean:\n+.PHONY: Clean\n+clean:  ## Clean\n \tgit clean -Xdf\n \n .PHONY: all clean\n'

