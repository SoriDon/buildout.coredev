Repository: plone.batching


Branch: refs/heads/master
Date: 2023-01-05T00:47:37+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.batching/commit/9434423e009810af5fbacd2ec8f94a1ca5ec73e1

chore: add minimal configuration

Files changed:
A .meta.toml

b'diff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..dba74f0\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+\n+[check-manifest]\n+additional-ignores = [\n+    "conf.py"\n+]\n'

Repository: plone.batching


Branch: refs/heads/master
Date: 2023-01-08T00:46:03+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.batching/commit/274f50ee8aabe53422bd17bd555bff2612694575

Configuring for default

Files changed:
A .editorconfig
A .github/workflows/linting.yml
A lint-requirements.txt
A tox.ini
M .meta.toml
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.github/workflows/linting.yml b/.github/workflows/linting.yml\nnew file mode 100644\nindex 0000000..a2139a8\n--- /dev/null\n+++ b/.github/workflows/linting.yml\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+name: Linting\n+on:\n+  push:\n+    branches: [master]\n+  pull_request:\n+    branches: [master]\n+  workflow_dispatch:\n+\n+jobs:\n+  test:\n+    name: Lint code\n+    runs-on: ${{ matrix.os }}\n+    strategy:\n+      matrix:\n+        python-version: ["3.8"]\n+        os: ["ubuntu-22.04"]\n+    steps:\n+      - uses: actions/checkout@v3\n+      - name: Set up Python\n+        uses: actions/setup-python@v4\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+      - name: Cache packages\n+        uses: actions/cache@v3\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles(\'lint-requirements.txt\', \'tox.ini\') }}\n+          restore-keys: |\n+            ${{ runner.os }}-pip-${{ matrix.python-version }}-\n+            ${{ runner.os }}-pip-\n+      - name: Install dependencies\n+        run: python -m pip install tox\n+      - name: Run formatters\n+        run: tox -e format\n+      # linters\n+      - name: QA\n+        run: tox -e lint\ndiff --git a/.meta.toml b/.meta.toml\nindex dba74f0..2144feb 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -1,5 +1,10 @@\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [check-manifest]\n additional-ignores = [\n-    "conf.py"\n-]\n+    "conf.py",\n+    ]\n+\n+[meta]\n+template = "default"\n+commit-id = "6d382fce"\ndiff --git a/lint-requirements.txt b/lint-requirements.txt\nnew file mode 100644\nindex 0000000..dedd4cb\n--- /dev/null\n+++ b/lint-requirements.txt\n@@ -0,0 +1,7 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+black==22.12.0\n+codespell==2.2.2\n+flake8==6.0.0\n+isort==5.11.4\n+pyupgrade==3.3.1\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..a5b1745 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,9 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\ndiff --git a/setup.cfg b/setup.cfg\nindex 15458eb..9576d6d 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,8 +1,22 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n [check-manifest]\n ignore =\n+    .editorconfig\n+    .meta.toml\n     conf.py\n-\n-\n-\n-[bdist_wheel]\n-universal = 0\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..0c34067\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,37 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+\n+[testenv]\n+py_files = find plone -name "*.py"\n+rst_files = find plone -name "*.rst"\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat python code\n+skip_install = true\n+deps =\n+    pyupgrade\n+    isort\n+    black\n+    -c lint-requirements.txt\n+commands =\n+    sh -c \'{[testenv]py_files} | xargs pyupgrade --py38-plus *.py\'\n+    sh -c \'{[testenv]py_files} | xargs isort *.py\'\n+    sh -c \'{[testenv]py_files} | xargs black *.py\'\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    flake8\n+    codespell\n+    -c lint-requirements.txt\n+commands =\n+    sh -c \'{[testenv]py_files} | xargs flake8 *.py\'\n+    sh -c \'{[testenv]py_files} | xargs codespell *.py\'\n+    sh -c \'{[testenv]rst_files} | xargs codespell *.rst\'\n'

Repository: plone.batching


Branch: refs/heads/master
Date: 2023-01-08T00:48:38+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.batching/commit/d3e938718e8d8aba4d105d66f79109e1c46522a7

chore: run tox -e format

Files changed:
M conf.py
M plone/__init__.py
M plone/batching/__init__.py
M plone/batching/batch.py
M plone/batching/browser.py
M plone/batching/interfaces.py
M plone/batching/tests.py
M plone/batching/utils.py
M setup.py

b'diff --git a/conf.py b/conf.py\nindex 8eb69e3..7af6b09 100644\n--- a/conf.py\n+++ b/conf.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # Plone batching documentation build configuration file, created by\n # sphinx-quickstart on Mon Dec 19 20:02:24 2011.\n@@ -11,201 +10,206 @@\n # All configuration values have a default; values that are commented out\n # serve to show the default.\n \n-import sys, os\n+import os\n+import sys\n+\n \n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\n # documentation root, use os.path.abspath to make it absolute, like shown here.\n-#sys.path.insert(0, os.path.abspath(\'.\'))\n+# sys.path.insert(0, os.path.abspath(\'.\'))\n \n # -- General configuration -----------------------------------------------------\n \n # If your documentation needs a minimal Sphinx version, state it here.\n-#needs_sphinx = \'1.0\'\n+# needs_sphinx = \'1.0\'\n \n # Add any Sphinx extension module names here, as strings. They can be extensions\n # coming with Sphinx (named \'sphinx.ext.*\') or your custom ones.\n-extensions = [\'sphinx.ext.autodoc\']\n+extensions = ["sphinx.ext.autodoc"]\n \n # Add any paths that contain templates here, relative to this directory.\n-templates_path = [\'_templates\']\n+templates_path = ["_templates"]\n \n # The suffix of source filenames.\n-source_suffix = \'.rst\'\n+source_suffix = ".rst"\n \n # The encoding of source files.\n-#source_encoding = \'utf-8-sig\'\n+# source_encoding = \'utf-8-sig\'\n \n # The master toctree document.\n-master_doc = \'README\'\n+master_doc = "README"\n \n # General information about the project.\n-project = u\'Plone batching\'\n-copyright = u\'2011, Tom Gross\'\n+project = "Plone batching"\n+copyright = "2011, Tom Gross"\n \n # The version info for the project you\'re documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n # built documents.\n #\n # The short X.Y version.\n-version = \'1.0\'\n+version = "1.0"\n # The full version, including alpha/beta/rc tags.\n-release = \'1.0\'\n+release = "1.0"\n \n # The language for content autogenerated by Sphinx. Refer to documentation\n # for a list of supported languages.\n-#language = None\n+# language = None\n \n # There are two options for replacing |today|: either, you set today to some\n # non-false value, then it is used:\n-#today = \'\'\n+# today = \'\'\n # Else, today_fmt is used as the format for a strftime call.\n-#today_fmt = \'%B %d, %Y\'\n+# today_fmt = \'%B %d, %Y\'\n \n # List of patterns, relative to source directory, that match files and\n # directories to ignore when looking for source files.\n-exclude_patterns = [\'_build\', \'*.egg-info\']\n+exclude_patterns = ["_build", "*.egg-info"]\n \n # The reST default role (used for this markup: `text`) to use for all documents.\n-#default_role = None\n+# default_role = None\n \n # If true, \'()\' will be appended to :func: etc. cross-reference text.\n-#add_function_parentheses = True\n+# add_function_parentheses = True\n \n # If true, the current module name will be prepended to all description\n # unit titles (such as .. function::).\n-#add_module_names = True\n+# add_module_names = True\n \n # If true, sectionauthor and moduleauthor directives will be shown in the\n # output. They are ignored by default.\n-#show_authors = False\n+# show_authors = False\n \n # The name of the Pygments (syntax highlighting) style to use.\n-pygments_style = \'sphinx\'\n+pygments_style = "sphinx"\n \n # A list of ignored prefixes for module index sorting.\n-#modindex_common_prefix = []\n+# modindex_common_prefix = []\n \n \n # -- Options for HTML output ---------------------------------------------------\n \n # The theme to use for HTML and HTML Help pages.  See the documentation for\n # a list of builtin themes.\n-html_theme = \'default\'\n+html_theme = "default"\n \n # Theme options are theme-specific and customize the look and feel of a theme\n # further.  For a list of options available for each theme, see the\n # documentation.\n-#html_theme_options = {}\n+# html_theme_options = {}\n \n # Add any paths that contain custom themes here, relative to this directory.\n-#html_theme_path = []\n+# html_theme_path = []\n \n # The name for this set of Sphinx documents.  If None, it defaults to\n # "<project> v<release> documentation".\n-#html_title = None\n+# html_title = None\n \n # A shorter title for the navigation bar.  Default is the same as html_title.\n-#html_short_title = None\n+# html_short_title = None\n \n # The name of an image file (relative to this directory) to place at the top\n # of the sidebar.\n-#html_logo = None\n+# html_logo = None\n \n # The name of an image file (within the static path) to use as favicon of the\n # docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n # pixels large.\n-#html_favicon = None\n+# html_favicon = None\n \n # Add any paths that contain custom static files (such as style sheets) here,\n # relative to this directory. They are copied after the builtin static files,\n # so a file named "default.css" will overwrite the builtin "default.css".\n-html_static_path = [\'_static\']\n+html_static_path = ["_static"]\n \n # If not \'\', a \'Last updated on:\' timestamp is inserted at every page bottom,\n # using the given strftime format.\n-#html_last_updated_fmt = \'%b %d, %Y\'\n+# html_last_updated_fmt = \'%b %d, %Y\'\n \n # If true, SmartyPants will be used to convert quotes and dashes to\n # typographically correct entities.\n-#html_use_smartypants = True\n+# html_use_smartypants = True\n \n # Custom sidebar templates, maps document names to template names.\n-#html_sidebars = {}\n+# html_sidebars = {}\n \n # Additional templates that should be rendered to pages, maps page names to\n # template names.\n-#html_additional_pages = {}\n+# html_additional_pages = {}\n \n # If false, no module index is generated.\n-#html_domain_indices = True\n+# html_domain_indices = True\n \n # If false, no index is generated.\n-#html_use_index = True\n+# html_use_index = True\n \n # If true, the index is split into individual pages for each letter.\n-#html_split_index = False\n+# html_split_index = False\n \n # If true, links to the reST sources are added to the pages.\n-#html_show_sourcelink = True\n+# html_show_sourcelink = True\n \n # If true, "Created using Sphinx" is shown in the HTML footer. Default is True.\n-#html_show_sphinx = True\n+# html_show_sphinx = True\n \n # If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.\n-#html_show_copyright = True\n+# html_show_copyright = True\n \n # If true, an OpenSearch description file will be output, and all pages will\n # contain a <link> tag referring to it.  The value of this option must be the\n # base URL from which the finished HTML is served.\n-#html_use_opensearch = \'\'\n+# html_use_opensearch = \'\'\n \n # This is the file name suffix for HTML files (e.g. ".xhtml").\n-#html_file_suffix = None\n+# html_file_suffix = None\n \n # Output file base name for HTML help builder.\n-htmlhelp_basename = \'Plonebatchingdoc\'\n+htmlhelp_basename = "Plonebatchingdoc"\n \n \n # -- Options for LaTeX output --------------------------------------------------\n \n latex_elements = {\n-# The paper size (\'letterpaper\' or \'a4paper\').\n-#\'papersize\': \'letterpaper\',\n-\n-# The font size (\'10pt\', \'11pt\' or \'12pt\').\n-#\'pointsize\': \'10pt\',\n-\n-# Additional stuff for the LaTeX preamble.\n-#\'preamble\': \'\',\n+    # The paper size (\'letterpaper\' or \'a4paper\').\n+    #\'papersize\': \'letterpaper\',\n+    # The font size (\'10pt\', \'11pt\' or \'12pt\').\n+    #\'pointsize\': \'10pt\',\n+    # Additional stuff for the LaTeX preamble.\n+    #\'preamble\': \'\',\n }\n \n # Grouping the document tree into LaTeX files. List of tuples\n # (source start file, target name, title, author, documentclass [howto/manual]).\n latex_documents = [\n-  (\'README\', \'Plonebatching.tex\', u\'Plone batching Documentation\',\n-   u\'Tom Gross\', \'manual\'),\n+    (\n+        "README",\n+        "Plonebatching.tex",\n+        "Plone batching Documentation",\n+        "Tom Gross",\n+        "manual",\n+    ),\n ]\n \n # The name of an image file (relative to this directory) to place at the top of\n # the title page.\n-#latex_logo = None\n+# latex_logo = None\n \n # For "manual" documents, if this is true, then toplevel headings are parts,\n # not chapters.\n-#latex_use_parts = False\n+# latex_use_parts = False\n \n # If true, show page references after internal links.\n-#latex_show_pagerefs = False\n+# latex_show_pagerefs = False\n \n # If true, show URL addresses after external links.\n-#latex_show_urls = False\n+# latex_show_urls = False\n \n # Documents to append as an appendix to all manuals.\n-#latex_appendices = []\n+# latex_appendices = []\n \n # If false, no module index is generated.\n-#latex_domain_indices = True\n+# latex_domain_indices = True\n \n \n # -- Options for manual page output --------------------------------------------\n@@ -213,12 +217,11 @@\n # One entry per manual page. List of tuples\n # (source start file, name, description, authors, manual section).\n man_pages = [\n-    (\'README\', \'plonebatching\', u\'Plone batching Documentation\',\n-     [u\'Tom Gross\'], 1)\n+    ("README", "plonebatching", "Plone batching Documentation", ["Tom Gross"], 1)\n ]\n \n # If true, show URL addresses after external links.\n-#man_show_urls = False\n+# man_show_urls = False\n \n \n # -- Options for Texinfo output ------------------------------------------------\n@@ -227,16 +230,22 @@\n # (source start file, target name, title, author,\n #  dir menu entry, description, category)\n texinfo_documents = [\n-  (\'README\', \'Plonebatching\', u\'Plone batching Documentation\',\n-   u\'Tom Gross\', \'Plonebatching\', \'One line description of project.\',\n-   \'Miscellaneous\'),\n+    (\n+        "README",\n+        "Plonebatching",\n+        "Plone batching Documentation",\n+        "Tom Gross",\n+        "Plonebatching",\n+        "One line description of project.",\n+        "Miscellaneous",\n+    ),\n ]\n \n # Documents to append as an appendix to all manuals.\n-#texinfo_appendices = []\n+# texinfo_appendices = []\n \n # If false, no module index is generated.\n-#texinfo_domain_indices = True\n+# texinfo_domain_indices = True\n \n # How to display URL addresses: \'footnote\', \'no\', or \'inline\'.\n-#texinfo_show_urls = \'footnote\'\n+# texinfo_show_urls = \'footnote\'\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/batching/__init__.py b/plone/batching/__init__.py\nindex f075161..8a98c64 100644\n--- a/plone/batching/__init__.py\n+++ b/plone/batching/__init__.py\n@@ -1,7 +1,7 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import allow_class\n from AccessControl import allow_module\n from plone.batching.batch import Batch\n \n-allow_module(\'plone.batching\')\n+\n+allow_module("plone.batching")\n allow_class(Batch)\ndiff --git a/plone/batching/batch.py b/plone/batching/batch.py\nindex e569351..d30e5c6 100644\n--- a/plone/batching/batch.py\n+++ b/plone/batching/batch.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.batching.interfaces import IBatch\n from plone.batching.utils import calculate_leapback\n from plone.batching.utils import calculate_leapforward\n@@ -8,19 +7,19 @@\n \n \n @implementer(IBatch)\n-class BaseBatch(object):\n-    """ A sequence batch splits up a large number of items over multiple pages\n-    """\n+class BaseBatch:\n+    """A sequence batch splits up a large number of items over multiple pages"""\n \n     size = first = start = end = 0\n     navlist = []\n     numpages = pagenumber = pagerange = pagenumber = 0\n     orphan = overlap = 0\n-    b_start_str = \'b_start\'\n+    b_start_str = "b_start"\n \n-    def __init__(self, sequence, size, start=0, end=0, orphan=0, overlap=0,\n-                 pagerange=7):\n-        """ Encapsulate sequence in batches of size\n+    def __init__(\n+        self, sequence, size, start=0, end=0, orphan=0, overlap=0, pagerange=7\n+    ):\n+        """Encapsulate sequence in batches of size\n         sequence  - the data to batch.\n         size      - the number of items in each batch.\n         start     - the first element of sequence to include in batch\n@@ -32,8 +31,9 @@ def __init__(self, sequence, size, start=0, end=0, orphan=0, overlap=0,\n         overlap   - the number of overlapping elements in each batch\n         pagerange - the number of pages to display in the navigation\n         """\n-        assert orphan <= size, "Having an orphan size higher than batch size" \\\n-                               " is undefined"\n+        assert orphan <= size, (\n+            "Having an orphan size higher than batch size" " is undefined"\n+        )\n         start += 1\n         self._sequence = sequence\n         self._size = size\n@@ -47,10 +47,8 @@ def __init__(self, sequence, size, start=0, end=0, orphan=0, overlap=0,\n         self.initialize(start, end, size)\n \n     def initialize(self, start, end, size):\n-        """ Calculate effective start, end, length and pagesize values\n-        """\n-        start, end, sz = opt(start, end, size, self.orphan,\n-                             self.sequence_length)\n+        """Calculate effective start, end, length and pagesize values"""\n+        start, end, sz = opt(start, end, size, self.orphan, self.sequence_length)\n \n         self.pagesize = sz\n         self.start = start\n@@ -65,11 +63,11 @@ def initialize(self, start, end, size):\n \n         # Set up the total number of pages\n         self.numpages = calculate_pagenumber(\n-            self.sequence_length - self.orphan, self.pagesize, self.overlap)\n+            self.sequence_length - self.orphan, self.pagesize, self.overlap\n+        )\n \n         # Set up the current page number\n-        self._pagenumber = calculate_pagenumber(\n-            self.start, self.pagesize, self.overlap)\n+        self._pagenumber = calculate_pagenumber(self.start, self.pagesize, self.overlap)\n \n         # Make sure self._pagenumber is <= self.numpages\n         if self._pagenumber > self.numpages:\n@@ -77,7 +75,7 @@ def initialize(self, start, end, size):\n \n     @property\n     def navlist(self):\n-        """ Pagenumber list for creating batch links """\n+        """Pagenumber list for creating batch links"""\n \n         start = int(max(self.pagenumber - self.pagerange // 2, 1))\n         end = int(min(start + self.pagerange - 1, self.lastpage))\n@@ -87,7 +85,7 @@ def getPagenumber(self):\n         return self._pagenumber\n \n     def setPagenumber(self, pagenumber):\n-        """ Set pagenumber and update batch accordingly """\n+        """Set pagenumber and update batch accordingly"""\n         start = max(0, (pagenumber - 1) * self._size) + 1\n         self.initialize(start, 0, self._size)\n         self._pagenumber = pagenumber\n@@ -96,27 +94,22 @@ def setPagenumber(self, pagenumber):\n \n     @classmethod\n     def fromPagenumber(cls, items, pagesize=20, pagenumber=1, navlistsize=5):\n-        """ Create new page from sequence and pagenumber\n-        """\n+        """Create new page from sequence and pagenumber"""\n         start = max(0, (pagenumber - 1) * pagesize)\n         return cls(items, pagesize, start, pagerange=navlistsize)\n \n     @property\n     def sequence_length(self):\n-        """ Effective length of sequence\n-        """\n-        return getattr(self._sequence, \'actual_result_count\',\n-                       len(self._sequence))\n+        """Effective length of sequence"""\n+        return getattr(self._sequence, "actual_result_count", len(self._sequence))\n \n     def __len__(self):\n-        """ Alias of `sequence_length`\n-        """\n+        """Alias of `sequence_length`"""\n         return self.sequence_length\n \n     @property\n     def next(self):\n-        """ Next batch page\n-        """\n+        """Next batch page"""\n         if self.end >= (self.last + self.pagesize):\n             return None\n         return Batch(\n@@ -125,13 +118,12 @@ def next(self):\n             self.end - self.overlap,\n             0,\n             self.orphan,\n-            self.overlap\n+            self.overlap,\n         )\n \n     @property\n     def previous(self):\n-        """ Previous batch page\n-        """\n+        """Previous batch page"""\n         if not self.first:\n             return None\n         return Batch(\n@@ -140,15 +132,13 @@ def previous(self):\n             self.first - self._size + self.overlap,\n             0,\n             self.orphan,\n-            self.overlap\n+            self.overlap,\n         )\n \n     def __getitem__(self, index):\n-        """ Get item from batch\n-        """\n-        actual = getattr(self._sequence, \'actual_result_count\', None)\n-        if (actual is not None and actual != len(self._sequence)\n-                and index < self.length):\n+        """Get item from batch"""\n+        actual = getattr(self._sequence, "actual_result_count", None)\n+        if actual is not None and actual != len(self._sequence) and index < self.length:\n             # optmized batch that contains only the wanted items in the\n             # sequence\n             return self._sequence[index]\n@@ -163,77 +153,65 @@ def __getitem__(self, index):\n     # methods from plone.app.content\n     @property\n     def firstpage(self):\n-        """ First page of batch\n+        """First page of batch\n \n-            Always 1\n+        Always 1\n         """\n         return 1\n \n     @property\n     def lastpage(self):\n-        """ Last page of batch\n-        """\n+        """Last page of batch"""\n         return self.numpages\n \n     @property\n     def islastpage(self):\n-        """ True, if page is last page.\n-        """\n+        """True, if page is last page."""\n         return self.lastpage == self.pagenumber\n \n     @property\n     def items_on_page(self):\n-        """ Alias for `length`\n-        """\n+        """Alias for `length`"""\n         return self.length\n \n     @property\n     def multiple_pages(self):\n-        """ `True`, if batch has more than one page.\n-        """\n+        """`True`, if batch has more than one page."""\n         return self.sequence_length > (self.pagesize + self.orphan)\n \n     @property\n     def previouspage(self):\n-        """ Previous page\n-        """\n+        """Previous page"""\n         return self.pagenumber - 1\n \n     @property\n     def nextpage(self):\n-        """ Next page\n-        """\n+        """Next page"""\n         return self.pagenumber + 1\n \n     @property\n     def items_not_on_page(self):\n-        """ Items of sequence outside of batch\n-        """\n-        return list(self._sequence[:self.first])\\\n-            + list(self._sequence[self.end:])\n+        """Items of sequence outside of batch"""\n+        return list(self._sequence[: self.first]) + list(self._sequence[self.end :])\n \n     @property\n     def next_item_count(self):\n-        """ Number of elements in next batch\n-        """\n+        """Number of elements in next batch"""\n         return self.next.length\n \n     @property\n     def has_next(self):\n-        """ Batch has next page\n-        """\n+        """Batch has next page"""\n         return self.next is not None\n \n     @property\n     def show_link_to_first(self):\n-        """ First page is in navigation list\n-        """\n+        """First page is in navigation list"""\n         return 1 not in self.navlist\n \n     @property\n     def show_link_to_last(self):\n-        """ Last page is in navigation list\n-        """\n+        """Last page is in navigation list"""\n         return self.lastpage not in self.navlist\n \n     @property\n@@ -246,11 +224,11 @@ def has_previous(self):\n \n     @property\n     def previous_pages(self):\n-        return self.navlist[:self.navlist.index(self.pagenumber)]\n+        return self.navlist[: self.navlist.index(self.pagenumber)]\n \n     @property\n     def next_pages(self):\n-        return self.navlist[self.navlist.index(self.pagenumber) + 1:]\n+        return self.navlist[self.navlist.index(self.pagenumber) + 1 :]\n \n     @property\n     def second_page_not_in_navlist(self):\n@@ -258,30 +236,42 @@ def second_page_not_in_navlist(self):\n \n \n class QuantumBatch(BaseBatch):\n-    """ A batch with quantum leaps for quicker navigation of large resultsets.\n+    """A batch with quantum leaps for quicker navigation of large resultsets.\n \n-        (e.g. next 1 10 100 ... results )\n+    (e.g. next 1 10 100 ... results )\n     """\n+\n     quantumleap = False\n     leapback = []\n     leapforward = []\n \n-    def __init__(self, sequence, size, start=0, end=0, orphan=0, overlap=0,\n-                 pagerange=7, quantumleap=0):\n+    def __init__(\n+        self,\n+        sequence,\n+        size,\n+        start=0,\n+        end=0,\n+        orphan=0,\n+        overlap=0,\n+        pagerange=7,\n+        quantumleap=0,\n+    ):\n         """\n         quantumleap - 0 or 1 to indicate if bigger increments should be used\n                       in the navigation list for big results.\n         """\n         self.quantumleap = quantumleap\n-        super(QuantumBatch, self).__init__(sequence, size, start, end, orphan,\n-                                           overlap, pagerange)\n+        super().__init__(sequence, size, start, end, orphan, overlap, pagerange)\n \n     def initialize(self, start, end, size):\n-        super(QuantumBatch, self).initialize(start, end, size)\n+        super().initialize(start, end, size)\n         if self.quantumleap:\n             self.leapback = calculate_leapback(\n-                self.pagenumber, self.numpages, self.pagerange)\n+                self.pagenumber, self.numpages, self.pagerange\n+            )\n             self.leapforward = calculate_leapforward(\n-                self.pagenumber, self.numpages, self.pagerange)\n+                self.pagenumber, self.numpages, self.pagerange\n+            )\n+\n \n Batch = BaseBatch\ndiff --git a/plone/batching/browser.py b/plone/batching/browser.py\nindex a6fb418..619495b 100644\n--- a/plone/batching/browser.py\n+++ b/plone/batching/browser.py\n@@ -1,21 +1,20 @@\n-# -*- coding: utf-8 -*-\n from Products.Five import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from ZTUtils import make_query\n \n+\n BatchTemplate = ViewPageTemplateFile("batchnavigation.pt")\n BootstrapBatchTemplate = ViewPageTemplateFile("batchnavigation_bootstrap.pt")\n \n \n class BatchMacrosView(BrowserView):\n-\n     @property\n     def macros(self):\n         return self.template.macros\n \n \n class BatchView(BrowserView):\n-    """ View class for browser navigation  (classic) """\n+    """View class for browser navigation  (classic)"""\n \n     index = BatchTemplate\n     batch = None\n@@ -37,8 +36,7 @@ class BootstrapBatchView(BatchView):\n \n \n class PloneBatchView(BatchView):\n-\n-    def make_link(self, pagenumber=None, omit_params=[\'ajax_load\']):\n+    def make_link(self, pagenumber=None, omit_params=["ajax_load"]):\n         # Include request form parameters from parent request\n         query_params = {}\n         if "PARENT_REQUEST" in self.request:\n@@ -56,10 +54,9 @@ def make_link(self, pagenumber=None, omit_params=[\'ajax_load\']):\n \n         start = max(pagenumber - 1, 0) * self.batch.pagesize\n         query_params[self.batch.b_start_str] = start\n-        url = u"{0}?{1}".format(self.request.ACTUAL_URL, make_query(query_params))\n+        url = f"{self.request.ACTUAL_URL}?{make_query(query_params)}"\n         return url\n \n \n-\n class PloneBootstrapBatchView(BootstrapBatchView, PloneBatchView):\n     pass\ndiff --git a/plone/batching/interfaces.py b/plone/batching/interfaces.py\nindex 45b91bc..c0bad75 100644\n--- a/plone/batching/interfaces.py\n+++ b/plone/batching/interfaces.py\n@@ -1,57 +1,61 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n+\n import zope.schema\n \n \n class IBatch(Interface):\n     """A batch splits up a large number of items over multiple pages"""\n \n-    size = zope.schema.Int(title=u"The amount of items in the batch")\n+    size = zope.schema.Int(title="The amount of items in the batch")\n \n-    firstpage = zope.schema.Int(\n-        title=u"The number of the first page (always 1)")\n+    firstpage = zope.schema.Int(title="The number of the first page (always 1)")\n \n-    lastpage = zope.schema.Int(title=u"The number of the last page")\n+    lastpage = zope.schema.Int(title="The number of the last page")\n \n     items_not_on_page = zope.schema.List(\n-        title=u"All items that are in the batch but not on the current page")\n+        title="All items that are in the batch but not on the current page"\n+    )\n \n     multiple_pages = zope.schema.Bool(\n-        title=u"Boolean indicating wheter there are multiple pages or not")\n+        title="Boolean indicating wheter there are multiple pages or not"\n+    )\n \n     has_next = zope.schema.Bool(\n-        title=u"Indicator for wheter there is a page after the current one")\n+        title="Indicator for wheter there is a page after the current one"\n+    )\n \n     has_previous = zope.schema.Bool(\n-        title=u"Indicator for wheter there is a page after the current one")\n+        title="Indicator for wheter there is a page after the current one"\n+    )\n \n-    previouspage = zope.schema.Int(title=u"The number of the previous page")\n+    previouspage = zope.schema.Int(title="The number of the previous page")\n \n-    nextpage = zope.schema.Int(title=u"The number of the nextpage page")\n+    nextpage = zope.schema.Int(title="The number of the nextpage page")\n \n-    next_item_count = zope.schema.Int(\n-        title=u"The number of items on the next page")\n+    next_item_count = zope.schema.Int(title="The number of items on the next page")\n \n     navlist = zope.schema.List(\n-        title=u"List of page numbers to be used as a navigation list")\n+        title="List of page numbers to be used as a navigation list"\n+    )\n \n-    show_link_to_first = zope.schema.Bool(\n-        title=u"First page not in the navigation list")\n+    show_link_to_first = zope.schema.Bool(title="First page not in the navigation list")\n \n-    show_link_to_last = zope.schema.Bool(\n-        title=u"Last page not in the navigation list")\n+    show_link_to_last = zope.schema.Bool(title="Last page not in the navigation list")\n \n     second_page_not_in_navlist = zope.schema.Bool(\n-        title=u"Second page not in the navigation list")\n+        title="Second page not in the navigation list"\n+    )\n \n     before_last_page_not_in_navlist = zope.schema.Bool(\n-        title=u"Before last page not in the navigation list")\n+        title="Before last page not in the navigation list"\n+    )\n \n     islastpage = zope.schema.Bool(\n-        title=u"Boolean indicating wheter the current page is the last page")\n+        title="Boolean indicating wheter the current page is the last page"\n+    )\n \n     previous_pages = zope.schema.List(\n-        title=u"All previous pages that are in the navlist")\n+        title="All previous pages that are in the navlist"\n+    )\n \n-    next_pages = zope.schema.List(\n-        title=u"All previous pages that are in the navlist")\n+    next_pages = zope.schema.List(title="All previous pages that are in the navlist")\ndiff --git a/plone/batching/tests.py b/plone/batching/tests.py\nindex a46b8bc..3085aeb 100644\n--- a/plone/batching/tests.py\n+++ b/plone/batching/tests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.batching.batch import BaseBatch\n from plone.batching.batch import QuantumBatch\n from plone.batching.browser import BatchMacrosView\n@@ -18,8 +17,7 @@\n \n \n class TestUtilsOpt(unittest.TestCase):\n-    """ Test utils of plone.batching\n-    """\n+    """Test utils of plone.batching"""\n \n     def test_opt_standard(self):\n         self.assertEqual(opt(1, 0, 5, 0, 100), (1, 5, 5))\n@@ -46,7 +44,6 @@ def test_opt_end_smaller_start(self):\n \n \n class TestUtils(unittest.TestCase):\n-\n     def test_calculate_pagenumber(self):\n         self.assertEqual(calculate_pagenumber(5, 2), 3)\n \n@@ -67,7 +64,6 @@ def test_calculate_leapforward(self):\n \n \n class TestBatch(unittest.TestCase):\n-\n     def test_previous_first(self):\n         batch = BaseBatch(range(20), 5)\n         self.assertFalse(batch.previous)\n@@ -85,18 +81,14 @@ def test_navlist_with_pagerange(self):\n         for start in range(0, 10):\n             batch = BaseBatch(range(20), 5, start, pagerange=3)\n             self.assertListEqual(\n-                list(batch.navlist),\n-                [1, 2, 3],\n-                \'Failing when starting at {}\'.format(start)\n+                list(batch.navlist), [1, 2, 3], f"Failing when starting at {start}"\n             )\n \n         # then we have 3 pages centered on page 3\n         for start in range(10, 15):\n             batch = BaseBatch(range(20), 5, start, pagerange=3)\n             self.assertListEqual(\n-                list(batch.navlist),\n-                [2, 3, 4],\n-                \'Failing when starting at {}\'.format(start)\n+                list(batch.navlist), [2, 3, 4], f"Failing when starting at {start}"\n             )\n \n         # XXX I consider this an errorm it should be [2, 3, 4]\n@@ -104,9 +96,7 @@ def test_navlist_with_pagerange(self):\n         for start in range(15, 20):\n             batch = BaseBatch(range(20), 5, start, pagerange=3)\n             self.assertListEqual(\n-                list(batch.navlist),\n-                [3, 4],\n-                \'Failing when starting at {}\'.format(start)\n+                list(batch.navlist), [3, 4], f"Failing when starting at {start}"\n             )\n \n     def test_previous(self):\n@@ -121,7 +111,6 @@ def test_getitem_out_of_batch(self):\n \n     def test_getitem_resultcount(self):\n         class MySeq(list):\n-\n             @property\n             def actual_result_count(self):\n                 return len(self) + 1\n@@ -155,9 +144,10 @@ def test_lastpage_with_orphans(self):\n \n     def test_items_not_on_page(self):\n         batch = BaseBatch(range(20), 5, start=5)\n-        self.assertEqual(batch.items_not_on_page,\n-                         [0, 1, 2, 3, 4, 10, 11, 12,\n-                          13, 14, 15, 16, 17, 18, 19])\n+        self.assertEqual(\n+            batch.items_not_on_page,\n+            [0, 1, 2, 3, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n+        )\n         self.assertEqual(list(batch), [5, 6, 7, 8, 9])\n \n     def test_batch_bsize(self):\n@@ -191,17 +181,17 @@ def test_batch_bsize(self):\n     def test_multiple_pages_smaller(self):\n         """sequence smaller than batchsize"""\n         batch = BaseBatch(range(12), 20)\n-        self.assertEquals(batch.multiple_pages, False)\n+        self.assertEqual(batch.multiple_pages, False)\n \n     def test_multiple_pages_equals(self):\n         """sequence equals batchsize"""\n         batch = BaseBatch(range(12), 12)\n-        self.assertEquals(batch.multiple_pages, False)\n+        self.assertEqual(batch.multiple_pages, False)\n \n     def test_multiple_pages_longer(self):\n         """sequence longer than batchsize"""\n         batch = BaseBatch(range(12), 10)\n-        self.assertEquals(batch.multiple_pages, True)\n+        self.assertEqual(batch.multiple_pages, True)\n \n     def test_multiple_pages_orphan(self):\n         """sequence with orphans"""\n@@ -213,81 +203,85 @@ def test_multiple_pages_orphan(self):\n \n     def test_pagenumber_never_over_numpages(self):\n         """computed _pagenumber is never > numpages, this\n-           makes previous_pages not fail."""\n+        makes previous_pages not fail."""\n         batch = BaseBatch([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 9)\n-        self.assertEquals(list(batch.previous_pages), [1, 2, 3])\n-        self.assertEquals(batch._pagenumber, 4)\n+        self.assertEqual(list(batch.previous_pages), [1, 2, 3])\n+        self.assertEqual(batch._pagenumber, 4)\n         # works especially with orphan\n         batch = BaseBatch([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 9, orphan=2)\n-        self.assertEquals(list(batch.previous_pages), [1, 2])\n-        self.assertEquals(batch._pagenumber, 3)\n+        self.assertEqual(list(batch.previous_pages), [1, 2])\n+        self.assertEqual(batch._pagenumber, 3)\n \n \n class TestQuantumBatch(unittest.TestCase):\n-\n     def test_quantumbatch(self):\n         qbatch = QuantumBatch(range(200), 3, start=120, quantumleap=1)\n         self.assertEqual(list(qbatch.leapback), [18, 28])\n         self.assertEqual(list(qbatch.leapforward), [54])\n \n \n-class DummyTemplate(object):\n-    macros = \'here are PT macros normally\'\n+class DummyTemplate:\n+    macros = "here are PT macros normally"\n \n     def __call__(self):\n         return "Template called!"\n \n \n class TestBrowser(unittest.TestCase):\n-\n     def test_batchmacrosview(self):\n         view = BatchMacrosView(None, None)\n-        setattr(view, \'template\', DummyTemplate())   # fake view creation\n-        self.assertEqual(view.macros, \'here are PT macros normally\')\n+        setattr(view, "template", DummyTemplate())  # fake view creation\n+        self.assertEqual(view.macros, "here are PT macros normally")\n \n     def test_batchview_base(self):\n         from zope.publisher.browser import TestRequest\n+\n         view = BatchView(None, TestRequest())\n-        setattr(view, \'index\', DummyTemplate())   # fake view creation\n+        setattr(view, "index", DummyTemplate())  # fake view creation\n         self.assertRaises(NotImplementedError, view.make_link, 0)\n-        rendered = view([1, 2, 3], [\'a\', \'b\'])\n+        rendered = view([1, 2, 3], ["a", "b"])\n         self.assertEqual(rendered, "Template called!")\n         self.assertEqual(view.batch, [1, 2, 3])\n-        self.assertEqual(view.batchformkeys, [\'a\', \'b\'])\n+        self.assertEqual(view.batchformkeys, ["a", "b"])\n \n     def test_batchview_plone(self):\n         from zope.publisher.browser import TestRequest\n+\n         batch = BaseBatch([1, 2, 3, 4, 5, 6, 7], 3)\n-        request = TestRequest(form={\'a\': \'foo\', \'c\': \'bar\'})\n-        setattr(request, \'ACTUAL_URL\', \'http://nohost/dummy\')\n+        request = TestRequest(form={"a": "foo", "c": "bar"})\n+        setattr(request, "ACTUAL_URL", "http://nohost/dummy")\n         view = PloneBatchView(None, request)\n-        view(batch, [\'a\', \'b\'])\n-        self.assertEqual(view.make_link(3),\n-                         \'http://nohost/dummy?a=foo&b_start:int=6\')\n+        view(batch, ["a", "b"])\n+        self.assertEqual(view.make_link(3), "http://nohost/dummy?a=foo&b_start:int=6")\n \n     def test_batchview_plone_ajax_load(self):\n         from zope.publisher.browser import TestRequest\n+\n         batch = BaseBatch([1, 2, 3, 4, 5, 6, 7], 3)\n-        request = TestRequest(form={\'a\': \'foo\', \'ajax_load\': 1})\n-        setattr(request, \'ACTUAL_URL\', \'http://nohost/dummy\')\n+        request = TestRequest(form={"a": "foo", "ajax_load": 1})\n+        setattr(request, "ACTUAL_URL", "http://nohost/dummy")\n         view = PloneBatchView(None, request)\n         view(batch)  # don\'t set allowed params (batchformkeys) like above.\n         # allow all, but filter for ajax_load separately\n-        self.assertEqual(view.make_link(3),\n-                         \'http://nohost/dummy?a=foo&b_start:int=6\')\n+        self.assertEqual(view.make_link(3), "http://nohost/dummy?a=foo&b_start:int=6")\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        unittest.makeSuite(TestUtilsOpt),\n-        unittest.makeSuite(TestUtils),\n-        unittest.makeSuite(TestBatch),\n-        unittest.makeSuite(TestBrowser),\n-        unittest.makeSuite(TestQuantumBatch),\n-        doctest.DocFileSuite(\'batching.rst\',\n-                             package=\'plone.batching\',\n-                             optionflags=doctest.ELLIPSIS,\n-                             setUp=setUp, tearDown=tearDown),\n-    ])\n+    suite.addTests(\n+        [\n+            unittest.defaultTestLoader.loadTestsFromTestCase(TestUtilsOpt),\n+            unittest.defaultTestLoader.loadTestsFromTestCase(TestUtils),\n+            unittest.defaultTestLoader.loadTestsFromTestCase(TestBatch),\n+            unittest.defaultTestLoader.loadTestsFromTestCase(TestBrowser),\n+            unittest.defaultTestLoader.loadTestsFromTestCase(TestQuantumBatch),\n+            doctest.DocFileSuite(\n+                "batching.rst",\n+                package="plone.batching",\n+                optionflags=doctest.ELLIPSIS,\n+                setUp=setUp,\n+                tearDown=tearDown,\n+            ),\n+        ]\n+    )\n     return suite\ndiff --git a/plone/batching/utils.py b/plone/batching/utils.py\nindex 4837645..54640c3 100644\n--- a/plone/batching/utils.py\n+++ b/plone/batching/utils.py\n@@ -1,7 +1,5 @@\n-# -*- coding: utf-8 -*-\n def opt(start, end, size, orphan, sequence_length):\n-    """ Calculate start, end, batchsize\n-    """\n+    """Calculate start, end, batchsize"""\n     # This is copied from ZTUtils.Batch.py because orphans were not correct\n     # there. 04/16/04 modified by Danny Bloemendaal (_ender_). Removed\n     # try/except structs because in some situations they cause some unexpected\n@@ -24,7 +22,7 @@ def opt(start, end, size, orphan, sequence_length):\n \n \n def calculate_pagenumber(elementnumber, batchsize, overlap=0):\n-    """ Calculate the pagenumber for the navigation """\n+    """Calculate the pagenumber for the navigation"""\n     # To find first element in a page,\n     # elementnumber = pagenumber * (size - overlap) - size (- orphan?)\n     realsize = batchsize - overlap\n@@ -39,7 +37,7 @@ def calculate_pagenumber(elementnumber, batchsize, overlap=0):\n \n \n def calculate_pagerange(pagenumber, numpages, pagerange):\n-    """ Calculate the pagerange for the navigation quicklinks """\n+    """Calculate the pagerange for the navigation quicklinks"""\n     # Pagerange is the number of pages linked to in the navigation, odd number\n     pagerange = max(0, pagerange + pagerange % 2 - 1)\n     # Making sure the list will not start with negative values\n@@ -50,40 +48,49 @@ def calculate_pagerange(pagenumber, numpages, pagerange):\n \n \n def calculate_quantum_leap_gap(numpages, pagerange):\n-    """ Find the QuantumLeap gap. Current width of list is 6 clicks (30/5) """\n-    return int(round(max(1, round(float(numpages - pagerange) / 30.)) * 5))\n+    """Find the QuantumLeap gap. Current width of list is 6 clicks (30/5)"""\n+    return int(round(max(1, round(float(numpages - pagerange) / 30.0)) * 5))\n \n \n def calculate_leapback(pagenumber, numpages, pagerange):\n-    """ Check the distance between start and 0 and add links as necessary """\n+    """Check the distance between start and 0 and add links as necessary"""\n     leapback = []\n     quantum_leap_gap = calculate_quantum_leap_gap(numpages, pagerange)\n-    num_back_leaps = max(0, min(3, int(round(\n-        float(pagenumber - pagerange) / quantum_leap_gap) - 0.3)))\n+    num_back_leaps = max(\n+        0, min(3, int(round(float(pagenumber - pagerange) / quantum_leap_gap) - 0.3))\n+    )\n     if num_back_leaps:\n         pagerange, pagerangestart, pagerangeend = calculate_pagerange(\n-            pagenumber, numpages, pagerange)\n+            pagenumber, numpages, pagerange\n+        )\n         leapback = range(\n             pagerangestart - num_back_leaps * quantum_leap_gap,\n             pagerangestart,\n-            quantum_leap_gap\n+            quantum_leap_gap,\n         )\n     return leapback\n \n \n def calculate_leapforward(pagenumber, numpages, pagerange):\n-    """ Check the distance between end and length and add links as necessary\n-    """\n+    """Check the distance between end and length and add links as necessary"""\n     leapforward = []\n     quantum_leap_gap = calculate_quantum_leap_gap(numpages, pagerange)\n-    num_forward_leaps = max(0, min(3, int(round(\n-        float(numpages - pagenumber - pagerange) / quantum_leap_gap) - 0.3)))\n+    num_forward_leaps = max(\n+        0,\n+        min(\n+            3,\n+            int(\n+                round(float(numpages - pagenumber - pagerange) / quantum_leap_gap) - 0.3\n+            ),\n+        ),\n+    )\n     if num_forward_leaps:\n         pagerange, pagerangestart, pagerangeend = calculate_pagerange(\n-            pagenumber, numpages, pagerange)\n+            pagenumber, numpages, pagerange\n+        )\n         leapforward = range(\n             pagerangeend - 1 + quantum_leap_gap,\n             pagerangeend - 1 + (num_forward_leaps + 1) * quantum_leap_gap,\n-            quantum_leap_gap\n+            quantum_leap_gap,\n         )\n     return leapforward\ndiff --git a/setup.py b/setup.py\nindex b774689..c821948 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,18 +1,20 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n-version = \'2.0.1.dev0\'\n+\n+version = "2.0.1.dev0"\n \n setup(\n-    name=\'plone.batching\',\n+    name="plone.batching",\n     version=version,\n     description="Batching facilities used in Plone.",\n-    long_description=u\'\\n\'.join([\n-        open("README.rst").read(),\n-        open("CHANGES.rst").read(),\n-        open("docs/usage.rst").read(),\n-    ]),\n+    long_description="\\n".join(\n+        [\n+            open("README.rst").read(),\n+            open("CHANGES.rst").read(),\n+            open("docs/usage.rst").read(),\n+        ]\n+    ),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n@@ -28,18 +30,18 @@\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'Plone\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.batching\',\n-    license=\'GPL\',\n+    keywords="Plone",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.batching",\n+    license="GPL",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'setuptools\',\n-        \'Zope\',\n+        "setuptools",\n+        "Zope",\n     ],\n     entry_points="""\n     [z3c.autoinclude.plugin]\n'

Repository: plone.batching


Branch: refs/heads/master
Date: 2023-01-08T00:48:51+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.batching/commit/496a471b09adbeb85bdba2aa43290cfa65b71906

chore: run flake8

Files changed:
M conf.py

b"diff --git a/conf.py b/conf.py\nindex 7af6b09..bd36a51 100644\n--- a/conf.py\n+++ b/conf.py\n@@ -10,10 +10,6 @@\n # All configuration values have a default; values that are commented out\n # serve to show the default.\n \n-import os\n-import sys\n-\n-\n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\n # documentation root, use os.path.abspath to make it absolute, like shown here.\n@@ -172,11 +168,11 @@\n \n latex_elements = {\n     # The paper size ('letterpaper' or 'a4paper').\n-    #'papersize': 'letterpaper',\n+    # 'papersize': 'letterpaper',\n     # The font size ('10pt', '11pt' or '12pt').\n-    #'pointsize': '10pt',\n+    # 'pointsize': '10pt',\n     # Additional stuff for the LaTeX preamble.\n-    #'preamble': '',\n+    # 'preamble': '',\n }\n \n # Grouping the document tree into LaTeX files. List of tuples\n"

Repository: plone.batching


Branch: refs/heads/master
Date: 2023-01-08T00:48:51+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.batching/commit/12d3eb7f47bea3305e5e87da678c9c3e2892bcd4

chore: fix typos discovered by codespell

Files changed:
M CHANGES.rst
M plone/batching/batch.py
M plone/batching/batching.rst
M plone/batching/interfaces.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex b0dc1d6..0a8fe5b 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -208,5 +208,5 @@ Fixes:\n 1.0a1 (2012-04-25)\n ------------------\n \n-- Factored out Plone batching implementation to seperate egg (PLIP #12235)\n+- Factored out Plone batching implementation to separate egg (PLIP #12235)\n   [tom_gross]\ndiff --git a/plone/batching/batch.py b/plone/batching/batch.py\nindex d30e5c6..5874984 100644\n--- a/plone/batching/batch.py\n+++ b/plone/batching/batch.py\n@@ -139,7 +139,7 @@ def __getitem__(self, index):\n         """Get item from batch"""\n         actual = getattr(self._sequence, "actual_result_count", None)\n         if actual is not None and actual != len(self._sequence) and index < self.length:\n-            # optmized batch that contains only the wanted items in the\n+            # optimized batch that contains only the wanted items in the\n             # sequence\n             return self._sequence[index]\n         if index < 0:\ndiff --git a/plone/batching/batching.rst b/plone/batching/batching.rst\nindex dec733d..639a694 100644\n--- a/plone/batching/batching.rst\n+++ b/plone/batching/batching.rst\n@@ -4,7 +4,7 @@ Batching\n Batching is the mechanism with which you split up a large dataset over multiple pages.\n The batching implementation discussed here has many features to help with constructing templates.\n \n-A basic batch is created using a few paramenters.\n+A basic batch is created using a few parameters.\n \n ::\n \n@@ -122,7 +122,7 @@ We can also ask if there are any next or previous pages.\n   False\n \n You might want to display the next item count.\n-This can be usefull in case the batch is not exactly divisible by the pagesize.\n+This can be useful in case the batch is not exactly divisible by the pagesize.\n \n ::\n \n@@ -185,7 +185,7 @@ To make sure you will not show the links twice (once in the navlist and once for\n   >>> batch.show_link_to_last\n   False\n \n-For extra visual smoothness you might also want to display an elipses next to your quicklink to the first page.\n+For extra visual smoothness you might also want to display an ellipses next to your quicklink to the first page.\n \n ::\n \n@@ -203,7 +203,7 @@ This should only be done in case the second page is not in the navigation list.\n   >>> batch.second_page_not_in_navlist\n   False\n \n-The same goes for the showing an elipses before the last link.\n+The same goes for the showing an ellipses before the last link.\n \n ::\n \n@@ -215,7 +215,7 @@ The same goes for the showing an elipses before the last link.\n   >>> batch.before_last_page_not_in_navlist\n   False\n \n-To make displaying the links to next and previous pages even easier you can also get two seperate navlist for both of them.\n+To make displaying the links to next and previous pages even easier you can also get two separate navlist for both of them.\n \n ::\n \n@@ -235,4 +235,3 @@ To make displaying the links to next and previous pages even easier you can also\n   >>> batch.pagenumber = batch.firstpage + 1\n   >>> list(batch.previous_pages)\n   [1]\n-\ndiff --git a/plone/batching/interfaces.py b/plone/batching/interfaces.py\nindex c0bad75..75caba2 100644\n--- a/plone/batching/interfaces.py\n+++ b/plone/batching/interfaces.py\n@@ -17,15 +17,15 @@ class IBatch(Interface):\n     )\n \n     multiple_pages = zope.schema.Bool(\n-        title="Boolean indicating wheter there are multiple pages or not"\n+        title="Boolean indicating whether there are multiple pages or not"\n     )\n \n     has_next = zope.schema.Bool(\n-        title="Indicator for wheter there is a page after the current one"\n+        title="Indicator for whether there is a page after the current one"\n     )\n \n     has_previous = zope.schema.Bool(\n-        title="Indicator for wheter there is a page after the current one"\n+        title="Indicator for whether there is a page after the current one"\n     )\n \n     previouspage = zope.schema.Int(title="The number of the previous page")\n@@ -51,7 +51,7 @@ class IBatch(Interface):\n     )\n \n     islastpage = zope.schema.Bool(\n-        title="Boolean indicating wheter the current page is the last page"\n+        title="Boolean indicating whether the current page is the last page"\n     )\n \n     previous_pages = zope.schema.List(\n'

Repository: plone.batching


Branch: refs/heads/master
Date: 2023-01-08T00:49:49+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.batching/commit/af151a2b5209a1ef7c1654ea8485e0e85e8c151b

Add news entry

Files changed:
A news/1.bugfix

b'diff --git a/news/1.bugfix b/news/1.bugfix\nnew file mode 100644\nindex 0000000..858a8e6\n--- /dev/null\n+++ b/news/1.bugfix\n@@ -0,0 +1,2 @@\n+Unify repository configuration via github.com/plone/meta.\n+[gforcada]\n'

Repository: plone.batching


Branch: refs/heads/master
Date: 2023-01-16T12:34:43+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.batching/commit/41d55d4b2d2c30d928d2760844d2e6412a5cad33

Merge pull request #33 from plone/config-with-default-template-9434423e

Config with default template

Files changed:
A .editorconfig
A .github/workflows/linting.yml
A .meta.toml
A lint-requirements.txt
A news/1.bugfix
A tox.ini
M CHANGES.rst
M conf.py
M plone/__init__.py
M plone/batching/__init__.py
M plone/batching/batch.py
M plone/batching/batching.rst
M plone/batching/browser.py
M plone/batching/interfaces.py
M plone/batching/tests.py
M plone/batching/utils.py
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.github/workflows/linting.yml b/.github/workflows/linting.yml\nnew file mode 100644\nindex 0000000..a2139a8\n--- /dev/null\n+++ b/.github/workflows/linting.yml\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+name: Linting\n+on:\n+  push:\n+    branches: [master]\n+  pull_request:\n+    branches: [master]\n+  workflow_dispatch:\n+\n+jobs:\n+  test:\n+    name: Lint code\n+    runs-on: ${{ matrix.os }}\n+    strategy:\n+      matrix:\n+        python-version: ["3.8"]\n+        os: ["ubuntu-22.04"]\n+    steps:\n+      - uses: actions/checkout@v3\n+      - name: Set up Python\n+        uses: actions/setup-python@v4\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+      - name: Cache packages\n+        uses: actions/cache@v3\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles(\'lint-requirements.txt\', \'tox.ini\') }}\n+          restore-keys: |\n+            ${{ runner.os }}-pip-${{ matrix.python-version }}-\n+            ${{ runner.os }}-pip-\n+      - name: Install dependencies\n+        run: python -m pip install tox\n+      - name: Run formatters\n+        run: tox -e format\n+      # linters\n+      - name: QA\n+        run: tox -e lint\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..2144feb\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,10 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[check-manifest]\n+additional-ignores = [\n+    "conf.py",\n+    ]\n+\n+[meta]\n+template = "default"\n+commit-id = "6d382fce"\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex b0dc1d6..0a8fe5b 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -208,5 +208,5 @@ Fixes:\n 1.0a1 (2012-04-25)\n ------------------\n \n-- Factored out Plone batching implementation to seperate egg (PLIP #12235)\n+- Factored out Plone batching implementation to separate egg (PLIP #12235)\n   [tom_gross]\ndiff --git a/conf.py b/conf.py\nindex 8eb69e3..bd36a51 100644\n--- a/conf.py\n+++ b/conf.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # Plone batching documentation build configuration file, created by\n # sphinx-quickstart on Mon Dec 19 20:02:24 2011.\n@@ -11,201 +10,202 @@\n # All configuration values have a default; values that are commented out\n # serve to show the default.\n \n-import sys, os\n-\n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\n # documentation root, use os.path.abspath to make it absolute, like shown here.\n-#sys.path.insert(0, os.path.abspath(\'.\'))\n+# sys.path.insert(0, os.path.abspath(\'.\'))\n \n # -- General configuration -----------------------------------------------------\n \n # If your documentation needs a minimal Sphinx version, state it here.\n-#needs_sphinx = \'1.0\'\n+# needs_sphinx = \'1.0\'\n \n # Add any Sphinx extension module names here, as strings. They can be extensions\n # coming with Sphinx (named \'sphinx.ext.*\') or your custom ones.\n-extensions = [\'sphinx.ext.autodoc\']\n+extensions = ["sphinx.ext.autodoc"]\n \n # Add any paths that contain templates here, relative to this directory.\n-templates_path = [\'_templates\']\n+templates_path = ["_templates"]\n \n # The suffix of source filenames.\n-source_suffix = \'.rst\'\n+source_suffix = ".rst"\n \n # The encoding of source files.\n-#source_encoding = \'utf-8-sig\'\n+# source_encoding = \'utf-8-sig\'\n \n # The master toctree document.\n-master_doc = \'README\'\n+master_doc = "README"\n \n # General information about the project.\n-project = u\'Plone batching\'\n-copyright = u\'2011, Tom Gross\'\n+project = "Plone batching"\n+copyright = "2011, Tom Gross"\n \n # The version info for the project you\'re documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n # built documents.\n #\n # The short X.Y version.\n-version = \'1.0\'\n+version = "1.0"\n # The full version, including alpha/beta/rc tags.\n-release = \'1.0\'\n+release = "1.0"\n \n # The language for content autogenerated by Sphinx. Refer to documentation\n # for a list of supported languages.\n-#language = None\n+# language = None\n \n # There are two options for replacing |today|: either, you set today to some\n # non-false value, then it is used:\n-#today = \'\'\n+# today = \'\'\n # Else, today_fmt is used as the format for a strftime call.\n-#today_fmt = \'%B %d, %Y\'\n+# today_fmt = \'%B %d, %Y\'\n \n # List of patterns, relative to source directory, that match files and\n # directories to ignore when looking for source files.\n-exclude_patterns = [\'_build\', \'*.egg-info\']\n+exclude_patterns = ["_build", "*.egg-info"]\n \n # The reST default role (used for this markup: `text`) to use for all documents.\n-#default_role = None\n+# default_role = None\n \n # If true, \'()\' will be appended to :func: etc. cross-reference text.\n-#add_function_parentheses = True\n+# add_function_parentheses = True\n \n # If true, the current module name will be prepended to all description\n # unit titles (such as .. function::).\n-#add_module_names = True\n+# add_module_names = True\n \n # If true, sectionauthor and moduleauthor directives will be shown in the\n # output. They are ignored by default.\n-#show_authors = False\n+# show_authors = False\n \n # The name of the Pygments (syntax highlighting) style to use.\n-pygments_style = \'sphinx\'\n+pygments_style = "sphinx"\n \n # A list of ignored prefixes for module index sorting.\n-#modindex_common_prefix = []\n+# modindex_common_prefix = []\n \n \n # -- Options for HTML output ---------------------------------------------------\n \n # The theme to use for HTML and HTML Help pages.  See the documentation for\n # a list of builtin themes.\n-html_theme = \'default\'\n+html_theme = "default"\n \n # Theme options are theme-specific and customize the look and feel of a theme\n # further.  For a list of options available for each theme, see the\n # documentation.\n-#html_theme_options = {}\n+# html_theme_options = {}\n \n # Add any paths that contain custom themes here, relative to this directory.\n-#html_theme_path = []\n+# html_theme_path = []\n \n # The name for this set of Sphinx documents.  If None, it defaults to\n # "<project> v<release> documentation".\n-#html_title = None\n+# html_title = None\n \n # A shorter title for the navigation bar.  Default is the same as html_title.\n-#html_short_title = None\n+# html_short_title = None\n \n # The name of an image file (relative to this directory) to place at the top\n # of the sidebar.\n-#html_logo = None\n+# html_logo = None\n \n # The name of an image file (within the static path) to use as favicon of the\n # docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n # pixels large.\n-#html_favicon = None\n+# html_favicon = None\n \n # Add any paths that contain custom static files (such as style sheets) here,\n # relative to this directory. They are copied after the builtin static files,\n # so a file named "default.css" will overwrite the builtin "default.css".\n-html_static_path = [\'_static\']\n+html_static_path = ["_static"]\n \n # If not \'\', a \'Last updated on:\' timestamp is inserted at every page bottom,\n # using the given strftime format.\n-#html_last_updated_fmt = \'%b %d, %Y\'\n+# html_last_updated_fmt = \'%b %d, %Y\'\n \n # If true, SmartyPants will be used to convert quotes and dashes to\n # typographically correct entities.\n-#html_use_smartypants = True\n+# html_use_smartypants = True\n \n # Custom sidebar templates, maps document names to template names.\n-#html_sidebars = {}\n+# html_sidebars = {}\n \n # Additional templates that should be rendered to pages, maps page names to\n # template names.\n-#html_additional_pages = {}\n+# html_additional_pages = {}\n \n # If false, no module index is generated.\n-#html_domain_indices = True\n+# html_domain_indices = True\n \n # If false, no index is generated.\n-#html_use_index = True\n+# html_use_index = True\n \n # If true, the index is split into individual pages for each letter.\n-#html_split_index = False\n+# html_split_index = False\n \n # If true, links to the reST sources are added to the pages.\n-#html_show_sourcelink = True\n+# html_show_sourcelink = True\n \n # If true, "Created using Sphinx" is shown in the HTML footer. Default is True.\n-#html_show_sphinx = True\n+# html_show_sphinx = True\n \n # If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.\n-#html_show_copyright = True\n+# html_show_copyright = True\n \n # If true, an OpenSearch description file will be output, and all pages will\n # contain a <link> tag referring to it.  The value of this option must be the\n # base URL from which the finished HTML is served.\n-#html_use_opensearch = \'\'\n+# html_use_opensearch = \'\'\n \n # This is the file name suffix for HTML files (e.g. ".xhtml").\n-#html_file_suffix = None\n+# html_file_suffix = None\n \n # Output file base name for HTML help builder.\n-htmlhelp_basename = \'Plonebatchingdoc\'\n+htmlhelp_basename = "Plonebatchingdoc"\n \n \n # -- Options for LaTeX output --------------------------------------------------\n \n latex_elements = {\n-# The paper size (\'letterpaper\' or \'a4paper\').\n-#\'papersize\': \'letterpaper\',\n-\n-# The font size (\'10pt\', \'11pt\' or \'12pt\').\n-#\'pointsize\': \'10pt\',\n-\n-# Additional stuff for the LaTeX preamble.\n-#\'preamble\': \'\',\n+    # The paper size (\'letterpaper\' or \'a4paper\').\n+    # \'papersize\': \'letterpaper\',\n+    # The font size (\'10pt\', \'11pt\' or \'12pt\').\n+    # \'pointsize\': \'10pt\',\n+    # Additional stuff for the LaTeX preamble.\n+    # \'preamble\': \'\',\n }\n \n # Grouping the document tree into LaTeX files. List of tuples\n # (source start file, target name, title, author, documentclass [howto/manual]).\n latex_documents = [\n-  (\'README\', \'Plonebatching.tex\', u\'Plone batching Documentation\',\n-   u\'Tom Gross\', \'manual\'),\n+    (\n+        "README",\n+        "Plonebatching.tex",\n+        "Plone batching Documentation",\n+        "Tom Gross",\n+        "manual",\n+    ),\n ]\n \n # The name of an image file (relative to this directory) to place at the top of\n # the title page.\n-#latex_logo = None\n+# latex_logo = None\n \n # For "manual" documents, if this is true, then toplevel headings are parts,\n # not chapters.\n-#latex_use_parts = False\n+# latex_use_parts = False\n \n # If true, show page references after internal links.\n-#latex_show_pagerefs = False\n+# latex_show_pagerefs = False\n \n # If true, show URL addresses after external links.\n-#latex_show_urls = False\n+# latex_show_urls = False\n \n # Documents to append as an appendix to all manuals.\n-#latex_appendices = []\n+# latex_appendices = []\n \n # If false, no module index is generated.\n-#latex_domain_indices = True\n+# latex_domain_indices = True\n \n \n # -- Options for manual page output --------------------------------------------\n@@ -213,12 +213,11 @@\n # One entry per manual page. List of tuples\n # (source start file, name, description, authors, manual section).\n man_pages = [\n-    (\'README\', \'plonebatching\', u\'Plone batching Documentation\',\n-     [u\'Tom Gross\'], 1)\n+    ("README", "plonebatching", "Plone batching Documentation", ["Tom Gross"], 1)\n ]\n \n # If true, show URL addresses after external links.\n-#man_show_urls = False\n+# man_show_urls = False\n \n \n # -- Options for Texinfo output ------------------------------------------------\n@@ -227,16 +226,22 @@\n # (source start file, target name, title, author,\n #  dir menu entry, description, category)\n texinfo_documents = [\n-  (\'README\', \'Plonebatching\', u\'Plone batching Documentation\',\n-   u\'Tom Gross\', \'Plonebatching\', \'One line description of project.\',\n-   \'Miscellaneous\'),\n+    (\n+        "README",\n+        "Plonebatching",\n+        "Plone batching Documentation",\n+        "Tom Gross",\n+        "Plonebatching",\n+        "One line description of project.",\n+        "Miscellaneous",\n+    ),\n ]\n \n # Documents to append as an appendix to all manuals.\n-#texinfo_appendices = []\n+# texinfo_appendices = []\n \n # If false, no module index is generated.\n-#texinfo_domain_indices = True\n+# texinfo_domain_indices = True\n \n # How to display URL addresses: \'footnote\', \'no\', or \'inline\'.\n-#texinfo_show_urls = \'footnote\'\n+# texinfo_show_urls = \'footnote\'\ndiff --git a/lint-requirements.txt b/lint-requirements.txt\nnew file mode 100644\nindex 0000000..dedd4cb\n--- /dev/null\n+++ b/lint-requirements.txt\n@@ -0,0 +1,7 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+black==22.12.0\n+codespell==2.2.2\n+flake8==6.0.0\n+isort==5.11.4\n+pyupgrade==3.3.1\ndiff --git a/news/1.bugfix b/news/1.bugfix\nnew file mode 100644\nindex 0000000..858a8e6\n--- /dev/null\n+++ b/news/1.bugfix\n@@ -0,0 +1,2 @@\n+Unify repository configuration via github.com/plone/meta.\n+[gforcada]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/batching/__init__.py b/plone/batching/__init__.py\nindex f075161..8a98c64 100644\n--- a/plone/batching/__init__.py\n+++ b/plone/batching/__init__.py\n@@ -1,7 +1,7 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import allow_class\n from AccessControl import allow_module\n from plone.batching.batch import Batch\n \n-allow_module(\'plone.batching\')\n+\n+allow_module("plone.batching")\n allow_class(Batch)\ndiff --git a/plone/batching/batch.py b/plone/batching/batch.py\nindex e569351..5874984 100644\n--- a/plone/batching/batch.py\n+++ b/plone/batching/batch.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.batching.interfaces import IBatch\n from plone.batching.utils import calculate_leapback\n from plone.batching.utils import calculate_leapforward\n@@ -8,19 +7,19 @@\n \n \n @implementer(IBatch)\n-class BaseBatch(object):\n-    """ A sequence batch splits up a large number of items over multiple pages\n-    """\n+class BaseBatch:\n+    """A sequence batch splits up a large number of items over multiple pages"""\n \n     size = first = start = end = 0\n     navlist = []\n     numpages = pagenumber = pagerange = pagenumber = 0\n     orphan = overlap = 0\n-    b_start_str = \'b_start\'\n+    b_start_str = "b_start"\n \n-    def __init__(self, sequence, size, start=0, end=0, orphan=0, overlap=0,\n-                 pagerange=7):\n-        """ Encapsulate sequence in batches of size\n+    def __init__(\n+        self, sequence, size, start=0, end=0, orphan=0, overlap=0, pagerange=7\n+    ):\n+        """Encapsulate sequence in batches of size\n         sequence  - the data to batch.\n         size      - the number of items in each batch.\n         start     - the first element of sequence to include in batch\n@@ -32,8 +31,9 @@ def __init__(self, sequence, size, start=0, end=0, orphan=0, overlap=0,\n         overlap   - the number of overlapping elements in each batch\n         pagerange - the number of pages to display in the navigation\n         """\n-        assert orphan <= size, "Having an orphan size higher than batch size" \\\n-                               " is undefined"\n+        assert orphan <= size, (\n+            "Having an orphan size higher than batch size" " is undefined"\n+        )\n         start += 1\n         self._sequence = sequence\n         self._size = size\n@@ -47,10 +47,8 @@ def __init__(self, sequence, size, start=0, end=0, orphan=0, overlap=0,\n         self.initialize(start, end, size)\n \n     def initialize(self, start, end, size):\n-        """ Calculate effective start, end, length and pagesize values\n-        """\n-        start, end, sz = opt(start, end, size, self.orphan,\n-                             self.sequence_length)\n+        """Calculate effective start, end, length and pagesize values"""\n+        start, end, sz = opt(start, end, size, self.orphan, self.sequence_length)\n \n         self.pagesize = sz\n         self.start = start\n@@ -65,11 +63,11 @@ def initialize(self, start, end, size):\n \n         # Set up the total number of pages\n         self.numpages = calculate_pagenumber(\n-            self.sequence_length - self.orphan, self.pagesize, self.overlap)\n+            self.sequence_length - self.orphan, self.pagesize, self.overlap\n+        )\n \n         # Set up the current page number\n-        self._pagenumber = calculate_pagenumber(\n-            self.start, self.pagesize, self.overlap)\n+        self._pagenumber = calculate_pagenumber(self.start, self.pagesize, self.overlap)\n \n         # Make sure self._pagenumber is <= self.numpages\n         if self._pagenumber > self.numpages:\n@@ -77,7 +75,7 @@ def initialize(self, start, end, size):\n \n     @property\n     def navlist(self):\n-        """ Pagenumber list for creating batch links """\n+        """Pagenumber list for creating batch links"""\n \n         start = int(max(self.pagenumber - self.pagerange // 2, 1))\n         end = int(min(start + self.pagerange - 1, self.lastpage))\n@@ -87,7 +85,7 @@ def getPagenumber(self):\n         return self._pagenumber\n \n     def setPagenumber(self, pagenumber):\n-        """ Set pagenumber and update batch accordingly """\n+        """Set pagenumber and update batch accordingly"""\n         start = max(0, (pagenumber - 1) * self._size) + 1\n         self.initialize(start, 0, self._size)\n         self._pagenumber = pagenumber\n@@ -96,27 +94,22 @@ def setPagenumber(self, pagenumber):\n \n     @classmethod\n     def fromPagenumber(cls, items, pagesize=20, pagenumber=1, navlistsize=5):\n-        """ Create new page from sequence and pagenumber\n-        """\n+        """Create new page from sequence and pagenumber"""\n         start = max(0, (pagenumber - 1) * pagesize)\n         return cls(items, pagesize, start, pagerange=navlistsize)\n \n     @property\n     def sequence_length(self):\n-        """ Effective length of sequence\n-        """\n-        return getattr(self._sequence, \'actual_result_count\',\n-                       len(self._sequence))\n+        """Effective length of sequence"""\n+        return getattr(self._sequence, "actual_result_count", len(self._sequence))\n \n     def __len__(self):\n-        """ Alias of `sequence_length`\n-        """\n+        """Alias of `sequence_length`"""\n         return self.sequence_length\n \n     @property\n     def next(self):\n-        """ Next batch page\n-        """\n+        """Next batch page"""\n         if self.end >= (self.last + self.pagesize):\n             return None\n         return Batch(\n@@ -125,13 +118,12 @@ def next(self):\n             self.end - self.overlap,\n             0,\n             self.orphan,\n-            self.overlap\n+            self.overlap,\n         )\n \n     @property\n     def previous(self):\n-        """ Previous batch page\n-        """\n+        """Previous batch page"""\n         if not self.first:\n             return None\n         return Batch(\n@@ -140,16 +132,14 @@ def previous(self):\n             self.first - self._size + self.overlap,\n             0,\n             self.orphan,\n-            self.overlap\n+            self.overlap,\n         )\n \n     def __getitem__(self, index):\n-        """ Get item from batch\n-        """\n-        actual = getattr(self._sequence, \'actual_result_count\', None)\n-        if (actual is not None and actual != len(self._sequence)\n-                and index < self.length):\n-            # optmized batch that contains only the wanted items in the\n+        """Get item from batch"""\n+        actual = getattr(self._sequence, "actual_result_count", None)\n+        if actual is not None and actual != len(self._sequence) and index < self.length:\n+            # optimized batch that contains only the wanted items in the\n             # sequence\n             return self._sequence[index]\n         if index < 0:\n@@ -163,77 +153,65 @@ def __getitem__(self, index):\n     # methods from plone.app.content\n     @property\n     def firstpage(self):\n-        """ First page of batch\n+        """First page of batch\n \n-            Always 1\n+        Always 1\n         """\n         return 1\n \n     @property\n     def lastpage(self):\n-        """ Last page of batch\n-        """\n+        """Last page of batch"""\n         return self.numpages\n \n     @property\n     def islastpage(self):\n-        """ True, if page is last page.\n-        """\n+        """True, if page is last page."""\n         return self.lastpage == self.pagenumber\n \n     @property\n     def items_on_page(self):\n-        """ Alias for `length`\n-        """\n+        """Alias for `length`"""\n         return self.length\n \n     @property\n     def multiple_pages(self):\n-        """ `True`, if batch has more than one page.\n-        """\n+        """`True`, if batch has more than one page."""\n         return self.sequence_length > (self.pagesize + self.orphan)\n \n     @property\n     def previouspage(self):\n-        """ Previous page\n-        """\n+        """Previous page"""\n         return self.pagenumber - 1\n \n     @property\n     def nextpage(self):\n-        """ Next page\n-        """\n+        """Next page"""\n         return self.pagenumber + 1\n \n     @property\n     def items_not_on_page(self):\n-        """ Items of sequence outside of batch\n-        """\n-        return list(self._sequence[:self.first])\\\n-            + list(self._sequence[self.end:])\n+        """Items of sequence outside of batch"""\n+        return list(self._sequence[: self.first]) + list(self._sequence[self.end :])\n \n     @property\n     def next_item_count(self):\n-        """ Number of elements in next batch\n-        """\n+        """Number of elements in next batch"""\n         return self.next.length\n \n     @property\n     def has_next(self):\n-        """ Batch has next page\n-        """\n+        """Batch has next page"""\n         return self.next is not None\n \n     @property\n     def show_link_to_first(self):\n-        """ First page is in navigation list\n-        """\n+        """First page is in navigation list"""\n         return 1 not in self.navlist\n \n     @property\n     def show_link_to_last(self):\n-        """ Last page is in navigation list\n-        """\n+        """Last page is in navigation list"""\n         return self.lastpage not in self.navlist\n \n     @property\n@@ -246,11 +224,11 @@ def has_previous(self):\n \n     @property\n     def previous_pages(self):\n-        return self.navlist[:self.navlist.index(self.pagenumber)]\n+        return self.navlist[: self.navlist.index(self.pagenumber)]\n \n     @property\n     def next_pages(self):\n-        return self.navlist[self.navlist.index(self.pagenumber) + 1:]\n+        return self.navlist[self.navlist.index(self.pagenumber) + 1 :]\n \n     @property\n     def second_page_not_in_navlist(self):\n@@ -258,30 +236,42 @@ def second_page_not_in_navlist(self):\n \n \n class QuantumBatch(BaseBatch):\n-    """ A batch with quantum leaps for quicker navigation of large resultsets.\n+    """A batch with quantum leaps for quicker navigation of large resultsets.\n \n-        (e.g. next 1 10 100 ... results )\n+    (e.g. next 1 10 100 ... results )\n     """\n+\n     quantumleap = False\n     leapback = []\n     leapforward = []\n \n-    def __init__(self, sequence, size, start=0, end=0, orphan=0, overlap=0,\n-                 pagerange=7, quantumleap=0):\n+    def __init__(\n+        self,\n+        sequence,\n+        size,\n+        start=0,\n+        end=0,\n+        orphan=0,\n+        overlap=0,\n+        pagerange=7,\n+        quantumleap=0,\n+    ):\n         """\n         quantumleap - 0 or 1 to indicate if bigger increments should be used\n                       in the navigation list for big results.\n         """\n         self.quantumleap = quantumleap\n-        super(QuantumBatch, self).__init__(sequence, size, start, end, orphan,\n-                                           overlap, pagerange)\n+        super().__init__(sequence, size, start, end, orphan, overlap, pagerange)\n \n     def initialize(self, start, end, size):\n-        super(QuantumBatch, self).initialize(start, end, size)\n+        super().initialize(start, end, size)\n         if self.quantumleap:\n             self.leapback = calculate_leapback(\n-                self.pagenumber, self.numpages, self.pagerange)\n+                self.pagenumber, self.numpages, self.pagerange\n+            )\n             self.leapforward = calculate_leapforward(\n-                self.pagenumber, self.numpages, self.pagerange)\n+                self.pagenumber, self.numpages, self.pagerange\n+            )\n+\n \n Batch = BaseBatch\ndiff --git a/plone/batching/batching.rst b/plone/batching/batching.rst\nindex dec733d..639a694 100644\n--- a/plone/batching/batching.rst\n+++ b/plone/batching/batching.rst\n@@ -4,7 +4,7 @@ Batching\n Batching is the mechanism with which you split up a large dataset over multiple pages.\n The batching implementation discussed here has many features to help with constructing templates.\n \n-A basic batch is created using a few paramenters.\n+A basic batch is created using a few parameters.\n \n ::\n \n@@ -122,7 +122,7 @@ We can also ask if there are any next or previous pages.\n   False\n \n You might want to display the next item count.\n-This can be usefull in case the batch is not exactly divisible by the pagesize.\n+This can be useful in case the batch is not exactly divisible by the pagesize.\n \n ::\n \n@@ -185,7 +185,7 @@ To make sure you will not show the links twice (once in the navlist and once for\n   >>> batch.show_link_to_last\n   False\n \n-For extra visual smoothness you might also want to display an elipses next to your quicklink to the first page.\n+For extra visual smoothness you might also want to display an ellipses next to your quicklink to the first page.\n \n ::\n \n@@ -203,7 +203,7 @@ This should only be done in case the second page is not in the navigation list.\n   >>> batch.second_page_not_in_navlist\n   False\n \n-The same goes for the showing an elipses before the last link.\n+The same goes for the showing an ellipses before the last link.\n \n ::\n \n@@ -215,7 +215,7 @@ The same goes for the showing an elipses before the last link.\n   >>> batch.before_last_page_not_in_navlist\n   False\n \n-To make displaying the links to next and previous pages even easier you can also get two seperate navlist for both of them.\n+To make displaying the links to next and previous pages even easier you can also get two separate navlist for both of them.\n \n ::\n \n@@ -235,4 +235,3 @@ To make displaying the links to next and previous pages even easier you can also\n   >>> batch.pagenumber = batch.firstpage + 1\n   >>> list(batch.previous_pages)\n   [1]\n-\ndiff --git a/plone/batching/browser.py b/plone/batching/browser.py\nindex a6fb418..619495b 100644\n--- a/plone/batching/browser.py\n+++ b/plone/batching/browser.py\n@@ -1,21 +1,20 @@\n-# -*- coding: utf-8 -*-\n from Products.Five import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from ZTUtils import make_query\n \n+\n BatchTemplate = ViewPageTemplateFile("batchnavigation.pt")\n BootstrapBatchTemplate = ViewPageTemplateFile("batchnavigation_bootstrap.pt")\n \n \n class BatchMacrosView(BrowserView):\n-\n     @property\n     def macros(self):\n         return self.template.macros\n \n \n class BatchView(BrowserView):\n-    """ View class for browser navigation  (classic) """\n+    """View class for browser navigation  (classic)"""\n \n     index = BatchTemplate\n     batch = None\n@@ -37,8 +36,7 @@ class BootstrapBatchView(BatchView):\n \n \n class PloneBatchView(BatchView):\n-\n-    def make_link(self, pagenumber=None, omit_params=[\'ajax_load\']):\n+    def make_link(self, pagenumber=None, omit_params=["ajax_load"]):\n         # Include request form parameters from parent request\n         query_params = {}\n         if "PARENT_REQUEST" in self.request:\n@@ -56,10 +54,9 @@ def make_link(self, pagenumber=None, omit_params=[\'ajax_load\']):\n \n         start = max(pagenumber - 1, 0) * self.batch.pagesize\n         query_params[self.batch.b_start_str] = start\n-        url = u"{0}?{1}".format(self.request.ACTUAL_URL, make_query(query_params))\n+        url = f"{self.request.ACTUAL_URL}?{make_query(query_params)}"\n         return url\n \n \n-\n class PloneBootstrapBatchView(BootstrapBatchView, PloneBatchView):\n     pass\ndiff --git a/plone/batching/interfaces.py b/plone/batching/interfaces.py\nindex 45b91bc..75caba2 100644\n--- a/plone/batching/interfaces.py\n+++ b/plone/batching/interfaces.py\n@@ -1,57 +1,61 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n+\n import zope.schema\n \n \n class IBatch(Interface):\n     """A batch splits up a large number of items over multiple pages"""\n \n-    size = zope.schema.Int(title=u"The amount of items in the batch")\n+    size = zope.schema.Int(title="The amount of items in the batch")\n \n-    firstpage = zope.schema.Int(\n-        title=u"The number of the first page (always 1)")\n+    firstpage = zope.schema.Int(title="The number of the first page (always 1)")\n \n-    lastpage = zope.schema.Int(title=u"The number of the last page")\n+    lastpage = zope.schema.Int(title="The number of the last page")\n \n     items_not_on_page = zope.schema.List(\n-        title=u"All items that are in the batch but not on the current page")\n+        title="All items that are in the batch but not on the current page"\n+    )\n \n     multiple_pages = zope.schema.Bool(\n-        title=u"Boolean indicating wheter there are multiple pages or not")\n+        title="Boolean indicating whether there are multiple pages or not"\n+    )\n \n     has_next = zope.schema.Bool(\n-        title=u"Indicator for wheter there is a page after the current one")\n+        title="Indicator for whether there is a page after the current one"\n+    )\n \n     has_previous = zope.schema.Bool(\n-        title=u"Indicator for wheter there is a page after the current one")\n+        title="Indicator for whether there is a page after the current one"\n+    )\n \n-    previouspage = zope.schema.Int(title=u"The number of the previous page")\n+    previouspage = zope.schema.Int(title="The number of the previous page")\n \n-    nextpage = zope.schema.Int(title=u"The number of the nextpage page")\n+    nextpage = zope.schema.Int(title="The number of the nextpage page")\n \n-    next_item_count = zope.schema.Int(\n-        title=u"The number of items on the next page")\n+    next_item_count = zope.schema.Int(title="The number of items on the next page")\n \n     navlist = zope.schema.List(\n-        title=u"List of page numbers to be used as a navigation list")\n+        title="List of page numbers to be used as a navigation list"\n+    )\n \n-    show_link_to_first = zope.schema.Bool(\n-        title=u"First page not in the navigation list")\n+    show_link_to_first = zope.schema.Bool(title="First page not in the navigation list")\n \n-    show_link_to_last = zope.schema.Bool(\n-        title=u"Last page not in the navigation list")\n+    show_link_to_last = zope.schema.Bool(title="Last page not in the navigation list")\n \n     second_page_not_in_navlist = zope.schema.Bool(\n-        title=u"Second page not in the navigation list")\n+        title="Second page not in the navigation list"\n+    )\n \n     before_last_page_not_in_navlist = zope.schema.Bool(\n-        title=u"Before last page not in the navigation list")\n+        title="Before last page not in the navigation list"\n+    )\n \n     islastpage = zope.schema.Bool(\n-        title=u"Boolean indicating wheter the current page is the last page")\n+        title="Boolean indicating whether the current page is the last page"\n+    )\n \n     previous_pages = zope.schema.List(\n-        title=u"All previous pages that are in the navlist")\n+        title="All previous pages that are in the navlist"\n+    )\n \n-    next_pages = zope.schema.List(\n-        title=u"All previous pages that are in the navlist")\n+    next_pages = zope.schema.List(title="All previous pages that are in the navlist")\ndiff --git a/plone/batching/tests.py b/plone/batching/tests.py\nindex a46b8bc..3085aeb 100644\n--- a/plone/batching/tests.py\n+++ b/plone/batching/tests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.batching.batch import BaseBatch\n from plone.batching.batch import QuantumBatch\n from plone.batching.browser import BatchMacrosView\n@@ -18,8 +17,7 @@\n \n \n class TestUtilsOpt(unittest.TestCase):\n-    """ Test utils of plone.batching\n-    """\n+    """Test utils of plone.batching"""\n \n     def test_opt_standard(self):\n         self.assertEqual(opt(1, 0, 5, 0, 100), (1, 5, 5))\n@@ -46,7 +44,6 @@ def test_opt_end_smaller_start(self):\n \n \n class TestUtils(unittest.TestCase):\n-\n     def test_calculate_pagenumber(self):\n         self.assertEqual(calculate_pagenumber(5, 2), 3)\n \n@@ -67,7 +64,6 @@ def test_calculate_leapforward(self):\n \n \n class TestBatch(unittest.TestCase):\n-\n     def test_previous_first(self):\n         batch = BaseBatch(range(20), 5)\n         self.assertFalse(batch.previous)\n@@ -85,18 +81,14 @@ def test_navlist_with_pagerange(self):\n         for start in range(0, 10):\n             batch = BaseBatch(range(20), 5, start, pagerange=3)\n             self.assertListEqual(\n-                list(batch.navlist),\n-                [1, 2, 3],\n-                \'Failing when starting at {}\'.format(start)\n+                list(batch.navlist), [1, 2, 3], f"Failing when starting at {start}"\n             )\n \n         # then we have 3 pages centered on page 3\n         for start in range(10, 15):\n             batch = BaseBatch(range(20), 5, start, pagerange=3)\n             self.assertListEqual(\n-                list(batch.navlist),\n-                [2, 3, 4],\n-                \'Failing when starting at {}\'.format(start)\n+                list(batch.navlist), [2, 3, 4], f"Failing when starting at {start}"\n             )\n \n         # XXX I consider this an errorm it should be [2, 3, 4]\n@@ -104,9 +96,7 @@ def test_navlist_with_pagerange(self):\n         for start in range(15, 20):\n             batch = BaseBatch(range(20), 5, start, pagerange=3)\n             self.assertListEqual(\n-                list(batch.navlist),\n-                [3, 4],\n-                \'Failing when starting at {}\'.format(start)\n+                list(batch.navlist), [3, 4], f"Failing when starting at {start}"\n             )\n \n     def test_previous(self):\n@@ -121,7 +111,6 @@ def test_getitem_out_of_batch(self):\n \n     def test_getitem_resultcount(self):\n         class MySeq(list):\n-\n             @property\n             def actual_result_count(self):\n                 return len(self) + 1\n@@ -155,9 +144,10 @@ def test_lastpage_with_orphans(self):\n \n     def test_items_not_on_page(self):\n         batch = BaseBatch(range(20), 5, start=5)\n-        self.assertEqual(batch.items_not_on_page,\n-                         [0, 1, 2, 3, 4, 10, 11, 12,\n-                          13, 14, 15, 16, 17, 18, 19])\n+        self.assertEqual(\n+            batch.items_not_on_page,\n+            [0, 1, 2, 3, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n+        )\n         self.assertEqual(list(batch), [5, 6, 7, 8, 9])\n \n     def test_batch_bsize(self):\n@@ -191,17 +181,17 @@ def test_batch_bsize(self):\n     def test_multiple_pages_smaller(self):\n         """sequence smaller than batchsize"""\n         batch = BaseBatch(range(12), 20)\n-        self.assertEquals(batch.multiple_pages, False)\n+        self.assertEqual(batch.multiple_pages, False)\n \n     def test_multiple_pages_equals(self):\n         """sequence equals batchsize"""\n         batch = BaseBatch(range(12), 12)\n-        self.assertEquals(batch.multiple_pages, False)\n+        self.assertEqual(batch.multiple_pages, False)\n \n     def test_multiple_pages_longer(self):\n         """sequence longer than batchsize"""\n         batch = BaseBatch(range(12), 10)\n-        self.assertEquals(batch.multiple_pages, True)\n+        self.assertEqual(batch.multiple_pages, True)\n \n     def test_multiple_pages_orphan(self):\n         """sequence with orphans"""\n@@ -213,81 +203,85 @@ def test_multiple_pages_orphan(self):\n \n     def test_pagenumber_never_over_numpages(self):\n         """computed _pagenumber is never > numpages, this\n-           makes previous_pages not fail."""\n+        makes previous_pages not fail."""\n         batch = BaseBatch([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 9)\n-        self.assertEquals(list(batch.previous_pages), [1, 2, 3])\n-        self.assertEquals(batch._pagenumber, 4)\n+        self.assertEqual(list(batch.previous_pages), [1, 2, 3])\n+        self.assertEqual(batch._pagenumber, 4)\n         # works especially with orphan\n         batch = BaseBatch([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 9, orphan=2)\n-        self.assertEquals(list(batch.previous_pages), [1, 2])\n-        self.assertEquals(batch._pagenumber, 3)\n+        self.assertEqual(list(batch.previous_pages), [1, 2])\n+        self.assertEqual(batch._pagenumber, 3)\n \n \n class TestQuantumBatch(unittest.TestCase):\n-\n     def test_quantumbatch(self):\n         qbatch = QuantumBatch(range(200), 3, start=120, quantumleap=1)\n         self.assertEqual(list(qbatch.leapback), [18, 28])\n         self.assertEqual(list(qbatch.leapforward), [54])\n \n \n-class DummyTemplate(object):\n-    macros = \'here are PT macros normally\'\n+class DummyTemplate:\n+    macros = "here are PT macros normally"\n \n     def __call__(self):\n         return "Template called!"\n \n \n class TestBrowser(unittest.TestCase):\n-\n     def test_batchmacrosview(self):\n         view = BatchMacrosView(None, None)\n-        setattr(view, \'template\', DummyTemplate())   # fake view creation\n-        self.assertEqual(view.macros, \'here are PT macros normally\')\n+        setattr(view, "template", DummyTemplate())  # fake view creation\n+        self.assertEqual(view.macros, "here are PT macros normally")\n \n     def test_batchview_base(self):\n         from zope.publisher.browser import TestRequest\n+\n         view = BatchView(None, TestRequest())\n-        setattr(view, \'index\', DummyTemplate())   # fake view creation\n+        setattr(view, "index", DummyTemplate())  # fake view creation\n         self.assertRaises(NotImplementedError, view.make_link, 0)\n-        rendered = view([1, 2, 3], [\'a\', \'b\'])\n+        rendered = view([1, 2, 3], ["a", "b"])\n         self.assertEqual(rendered, "Template called!")\n         self.assertEqual(view.batch, [1, 2, 3])\n-        self.assertEqual(view.batchformkeys, [\'a\', \'b\'])\n+        self.assertEqual(view.batchformkeys, ["a", "b"])\n \n     def test_batchview_plone(self):\n         from zope.publisher.browser import TestRequest\n+\n         batch = BaseBatch([1, 2, 3, 4, 5, 6, 7], 3)\n-        request = TestRequest(form={\'a\': \'foo\', \'c\': \'bar\'})\n-        setattr(request, \'ACTUAL_URL\', \'http://nohost/dummy\')\n+        request = TestRequest(form={"a": "foo", "c": "bar"})\n+        setattr(request, "ACTUAL_URL", "http://nohost/dummy")\n         view = PloneBatchView(None, request)\n-        view(batch, [\'a\', \'b\'])\n-        self.assertEqual(view.make_link(3),\n-                         \'http://nohost/dummy?a=foo&b_start:int=6\')\n+        view(batch, ["a", "b"])\n+        self.assertEqual(view.make_link(3), "http://nohost/dummy?a=foo&b_start:int=6")\n \n     def test_batchview_plone_ajax_load(self):\n         from zope.publisher.browser import TestRequest\n+\n         batch = BaseBatch([1, 2, 3, 4, 5, 6, 7], 3)\n-        request = TestRequest(form={\'a\': \'foo\', \'ajax_load\': 1})\n-        setattr(request, \'ACTUAL_URL\', \'http://nohost/dummy\')\n+        request = TestRequest(form={"a": "foo", "ajax_load": 1})\n+        setattr(request, "ACTUAL_URL", "http://nohost/dummy")\n         view = PloneBatchView(None, request)\n         view(batch)  # don\'t set allowed params (batchformkeys) like above.\n         # allow all, but filter for ajax_load separately\n-        self.assertEqual(view.make_link(3),\n-                         \'http://nohost/dummy?a=foo&b_start:int=6\')\n+        self.assertEqual(view.make_link(3), "http://nohost/dummy?a=foo&b_start:int=6")\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        unittest.makeSuite(TestUtilsOpt),\n-        unittest.makeSuite(TestUtils),\n-        unittest.makeSuite(TestBatch),\n-        unittest.makeSuite(TestBrowser),\n-        unittest.makeSuite(TestQuantumBatch),\n-        doctest.DocFileSuite(\'batching.rst\',\n-                             package=\'plone.batching\',\n-                             optionflags=doctest.ELLIPSIS,\n-                             setUp=setUp, tearDown=tearDown),\n-    ])\n+    suite.addTests(\n+        [\n+            unittest.defaultTestLoader.loadTestsFromTestCase(TestUtilsOpt),\n+            unittest.defaultTestLoader.loadTestsFromTestCase(TestUtils),\n+            unittest.defaultTestLoader.loadTestsFromTestCase(TestBatch),\n+            unittest.defaultTestLoader.loadTestsFromTestCase(TestBrowser),\n+            unittest.defaultTestLoader.loadTestsFromTestCase(TestQuantumBatch),\n+            doctest.DocFileSuite(\n+                "batching.rst",\n+                package="plone.batching",\n+                optionflags=doctest.ELLIPSIS,\n+                setUp=setUp,\n+                tearDown=tearDown,\n+            ),\n+        ]\n+    )\n     return suite\ndiff --git a/plone/batching/utils.py b/plone/batching/utils.py\nindex 4837645..54640c3 100644\n--- a/plone/batching/utils.py\n+++ b/plone/batching/utils.py\n@@ -1,7 +1,5 @@\n-# -*- coding: utf-8 -*-\n def opt(start, end, size, orphan, sequence_length):\n-    """ Calculate start, end, batchsize\n-    """\n+    """Calculate start, end, batchsize"""\n     # This is copied from ZTUtils.Batch.py because orphans were not correct\n     # there. 04/16/04 modified by Danny Bloemendaal (_ender_). Removed\n     # try/except structs because in some situations they cause some unexpected\n@@ -24,7 +22,7 @@ def opt(start, end, size, orphan, sequence_length):\n \n \n def calculate_pagenumber(elementnumber, batchsize, overlap=0):\n-    """ Calculate the pagenumber for the navigation """\n+    """Calculate the pagenumber for the navigation"""\n     # To find first element in a page,\n     # elementnumber = pagenumber * (size - overlap) - size (- orphan?)\n     realsize = batchsize - overlap\n@@ -39,7 +37,7 @@ def calculate_pagenumber(elementnumber, batchsize, overlap=0):\n \n \n def calculate_pagerange(pagenumber, numpages, pagerange):\n-    """ Calculate the pagerange for the navigation quicklinks """\n+    """Calculate the pagerange for the navigation quicklinks"""\n     # Pagerange is the number of pages linked to in the navigation, odd number\n     pagerange = max(0, pagerange + pagerange % 2 - 1)\n     # Making sure the list will not start with negative values\n@@ -50,40 +48,49 @@ def calculate_pagerange(pagenumber, numpages, pagerange):\n \n \n def calculate_quantum_leap_gap(numpages, pagerange):\n-    """ Find the QuantumLeap gap. Current width of list is 6 clicks (30/5) """\n-    return int(round(max(1, round(float(numpages - pagerange) / 30.)) * 5))\n+    """Find the QuantumLeap gap. Current width of list is 6 clicks (30/5)"""\n+    return int(round(max(1, round(float(numpages - pagerange) / 30.0)) * 5))\n \n \n def calculate_leapback(pagenumber, numpages, pagerange):\n-    """ Check the distance between start and 0 and add links as necessary """\n+    """Check the distance between start and 0 and add links as necessary"""\n     leapback = []\n     quantum_leap_gap = calculate_quantum_leap_gap(numpages, pagerange)\n-    num_back_leaps = max(0, min(3, int(round(\n-        float(pagenumber - pagerange) / quantum_leap_gap) - 0.3)))\n+    num_back_leaps = max(\n+        0, min(3, int(round(float(pagenumber - pagerange) / quantum_leap_gap) - 0.3))\n+    )\n     if num_back_leaps:\n         pagerange, pagerangestart, pagerangeend = calculate_pagerange(\n-            pagenumber, numpages, pagerange)\n+            pagenumber, numpages, pagerange\n+        )\n         leapback = range(\n             pagerangestart - num_back_leaps * quantum_leap_gap,\n             pagerangestart,\n-            quantum_leap_gap\n+            quantum_leap_gap,\n         )\n     return leapback\n \n \n def calculate_leapforward(pagenumber, numpages, pagerange):\n-    """ Check the distance between end and length and add links as necessary\n-    """\n+    """Check the distance between end and length and add links as necessary"""\n     leapforward = []\n     quantum_leap_gap = calculate_quantum_leap_gap(numpages, pagerange)\n-    num_forward_leaps = max(0, min(3, int(round(\n-        float(numpages - pagenumber - pagerange) / quantum_leap_gap) - 0.3)))\n+    num_forward_leaps = max(\n+        0,\n+        min(\n+            3,\n+            int(\n+                round(float(numpages - pagenumber - pagerange) / quantum_leap_gap) - 0.3\n+            ),\n+        ),\n+    )\n     if num_forward_leaps:\n         pagerange, pagerangestart, pagerangeend = calculate_pagerange(\n-            pagenumber, numpages, pagerange)\n+            pagenumber, numpages, pagerange\n+        )\n         leapforward = range(\n             pagerangeend - 1 + quantum_leap_gap,\n             pagerangeend - 1 + (num_forward_leaps + 1) * quantum_leap_gap,\n-            quantum_leap_gap\n+            quantum_leap_gap,\n         )\n     return leapforward\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..a5b1745 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,9 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\ndiff --git a/setup.cfg b/setup.cfg\nindex 15458eb..9576d6d 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,8 +1,22 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n [check-manifest]\n ignore =\n+    .editorconfig\n+    .meta.toml\n     conf.py\n-\n-\n-\n-[bdist_wheel]\n-universal = 0\ndiff --git a/setup.py b/setup.py\nindex b774689..c821948 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,18 +1,20 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n-version = \'2.0.1.dev0\'\n+\n+version = "2.0.1.dev0"\n \n setup(\n-    name=\'plone.batching\',\n+    name="plone.batching",\n     version=version,\n     description="Batching facilities used in Plone.",\n-    long_description=u\'\\n\'.join([\n-        open("README.rst").read(),\n-        open("CHANGES.rst").read(),\n-        open("docs/usage.rst").read(),\n-    ]),\n+    long_description="\\n".join(\n+        [\n+            open("README.rst").read(),\n+            open("CHANGES.rst").read(),\n+            open("docs/usage.rst").read(),\n+        ]\n+    ),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n@@ -28,18 +30,18 @@\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'Plone\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.batching\',\n-    license=\'GPL\',\n+    keywords="Plone",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.batching",\n+    license="GPL",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'setuptools\',\n-        \'Zope\',\n+        "setuptools",\n+        "Zope",\n     ],\n     entry_points="""\n     [z3c.autoinclude.plugin]\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..0c34067\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,37 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+\n+[testenv]\n+py_files = find plone -name "*.py"\n+rst_files = find plone -name "*.rst"\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat python code\n+skip_install = true\n+deps =\n+    pyupgrade\n+    isort\n+    black\n+    -c lint-requirements.txt\n+commands =\n+    sh -c \'{[testenv]py_files} | xargs pyupgrade --py38-plus *.py\'\n+    sh -c \'{[testenv]py_files} | xargs isort *.py\'\n+    sh -c \'{[testenv]py_files} | xargs black *.py\'\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    flake8\n+    codespell\n+    -c lint-requirements.txt\n+commands =\n+    sh -c \'{[testenv]py_files} | xargs flake8 *.py\'\n+    sh -c \'{[testenv]py_files} | xargs codespell *.py\'\n+    sh -c \'{[testenv]rst_files} | xargs codespell *.rst\'\n'

