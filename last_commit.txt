Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-28T14:38:22+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.outputfilters/commit/4d692f1551d13891a2875ff3d3d3885cab69a481

Configuring with plone/meta

Files changed:
A news/535edb14.internal
M .meta.toml
M .pre-commit-config.yaml
M pyproject.toml
M tox.ini

b'diff --git a/.meta.toml b/.meta.toml\nindex 17f7b14..0acbcb1 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -2,4 +2,4 @@\n # https://github.com/plone/meta/tree/master/config/default\n [meta]\n template = "default"\n-commit-id = "243ca9ec"\n+commit-id = "535edb14"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nindex 582f8ac..449e951 100644\n--- a/.pre-commit-config.yaml\n+++ b/.pre-commit-config.yaml\n@@ -19,7 +19,7 @@ repos:\n     hooks:\n     -   id: black\n -   repo: https://github.com/collective/zpretty\n-    rev: 3.0.2\n+    rev: 3.0.3\n     hooks:\n     -   id: zpretty\n -   repo: https://github.com/PyCQA/flake8\ndiff --git a/news/535edb14.internal b/news/535edb14.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/535edb14.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 5d0d30e..9eb73f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -60,8 +60,3 @@ Zope = [\n   \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n ]\n python-dateutil = [\'dateutil\']\n-beautifulsoup4 = [\'bs4\', ]\n-ignore-packages = [\'zope.app.component\']\n-\n-[tool.codespell]\n-ignore-words-list = "discreet"\ndiff --git a/tox.ini b/tox.ini\nindex c830e4a..62e2436 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,6 +1,8 @@\n # Generated from:\n # https://github.com/plone/meta/tree/master/config/default\n [tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n envlist =\n     format\n     lint\n@@ -37,14 +39,15 @@ deps =\n     graphviz  # optional dependency of pipdeptree\n commands =\n     dependencychecker\n-    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n \n [testenv:test]\n usedevelop = true\n+constrain_package_deps = true\n deps =\n     zope.testrunner\n     -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands =\n-    zope-testrunner --test-path={toxinidir} -s plone.outputfilters\n+    zope-testrunner --test-path={toxinidir} -s plone.outputfilters {posargs}\n extras =\n     test\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-28T14:40:41+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.outputfilters/commit/0ef46e2eac4090d9cb3b87a3679e1549b8dcc839

configure codespell

Files changed:
M .meta.toml
M pyproject.toml

b'diff --git a/.meta.toml b/.meta.toml\nindex 0acbcb1..2960de7 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -2,4 +2,7 @@\n # https://github.com/plone/meta/tree/master/config/default\n [meta]\n template = "default"\n-commit-id = "535edb14"\n+commit-id = "993150bc"\n+\n+[codespell]\n+additional-ignores = "discreet"\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 9eb73f3..c5120e7 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -42,6 +42,9 @@ profile = "plone"\n [tool.black]\n target-version = ["py38"]\n \n+[tool.codespell]\n+ignore-words-list = "discreet"\n+\n [tool.dependencychecker]\n Zope = [\n   # Zope own provided namespaces\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-28T14:41:04+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.outputfilters/commit/d615162bdf59c98811299ecceb0015988f606994

gitignore

Files changed:
M .gitignore

b'diff --git a/.gitignore b/.gitignore\nindex 48f1ce2..9f0e0cb 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -8,6 +8,8 @@ lib/\n include/\n parts/\n .installed.cfg\n+.tox\n+dependencies.svg\n develop-eggs/\n eggs/\n local/\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-28T14:43:19+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.outputfilters/commit/e561984dde987957c809bd1e57c331a088c1520c

no zope.app please

Files changed:
M plone/outputfilters/browser/resolveuid.py

b'diff --git a/plone/outputfilters/browser/resolveuid.py b/plone/outputfilters/browser/resolveuid.py\nindex 093dde1..addac34 100644\n--- a/plone/outputfilters/browser/resolveuid.py\n+++ b/plone/outputfilters/browser/resolveuid.py\n@@ -2,18 +2,13 @@\n from plone.app.uuid.utils import uuidToObject as new_uuidToObject\n from Products.CMFCore.utils import getToolByName\n from zExceptions import NotFound\n+from zope.component.hooks import getSite\n from zope.deprecation import deprecate\n from zope.interface import implementer\n from zope.publisher.browser import BrowserView\n from zope.publisher.interfaces import IPublishTraverse\n \n \n-try:\n-    from zope.component.hooks import getSite\n-except ImportError:\n-    from zope.app.component.hooks import getSite\n-\n-\n @deprecate(\n     "Please use plone.app.uuid.utils.uuidToURL instead. Will be removed in Plone 7"\n )\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-28T14:45:50+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.outputfilters/commit/a7aff912dae973bdd0dc9eba94a441ce815e7173

dependencies: bs4 comes from beautifulsoup4.

Files changed:
M .meta.toml
M pyproject.toml

b'diff --git a/.meta.toml b/.meta.toml\nindex 2960de7..6d9d74f 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -6,3 +6,8 @@ commit-id = "993150bc"\n \n [codespell]\n additional-ignores = "discreet"\n+\n+[dependencies]\n+mappings = [\n+    "beautifulsoup4 = [\'bs4\']",\n+    ]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex c5120e7..c3b09fa 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -63,3 +63,4 @@ Zope = [\n   \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n ]\n python-dateutil = [\'dateutil\']\n+beautifulsoup4 = [\'bs4\']\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-28T14:47:14+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.outputfilters/commit/9a2c8c63316a9f6221a517490a7984b21ae0b86b

Removed plone/outputfilters/tests/README_py2.rst

Files changed:
D plone/outputfilters/tests/README_py2.rst

b'diff --git a/plone/outputfilters/tests/README_py2.rst b/plone/outputfilters/tests/README_py2.rst\ndeleted file mode 100644\nindex 0e7dca9..0000000\n--- a/plone/outputfilters/tests/README_py2.rst\n+++ /dev/null\n@@ -1,85 +0,0 @@\n-Adding a custom filter\n-======================\n-\n-As an example, the following filter replaces all doubled hyphens ("--") with em\n-dashes ("-"). (Don\'t use the example verbatim, because it doesn\'t parse HTML to\n-apply itself only to text nodes, so will mangle HTML comments.)\n-\n-A filter is a callable which accepts a UTF-8-encoded HTML string as input, and\n-returns a modified UTF-8-encoded HTML string. A return value of ``None`` may be\n-used to indicate that the input should not be modified.\n-\n-Example::\n-\n-    import re\n-    from zope.interface import implements\n-    from plone.outputfilters.interfaces import IFilter\n-\n-    class EmDashAdder(object):\n-        implements(IFilter)\n-        order = 1000\n-\n-        def __init__(self, context, request):\n-            pass\n-\n-        def is_enabled(self):\n-            return True\n-\n-        pattern = re.compile(r\'--\')\n-\n-        def __call__(self, data):\n-            return self.pattern.sub(u\'\\xe2\\x80\\x94\', data)\n-\n-The ``order`` attribute may be used to affect the order in which filters are\n-applied (higher values run later). The is_enabled method should return a boolean\n-indicating whether the filter should be applied.\n-\n-Filters are registered in ZCML as a named multi-adapter of the context and\n-request to IFilter::\n-\n-    >>> from Zope2.App import zcml\n-    >>> import Products.Five\n-    >>> configure = """\n-    ... <configure\n-    ...     xmlns="http://namespaces.zope.org/zope">\n-    ...\n-    ...   <adapter\n-    ...     name="em_dash_adder"\n-    ...     provides="plone.outputfilters.interfaces.IFilter"\n-    ...     for="* *"\n-    ...     factory="plone.outputfilters.filters.example.EmDashAdder"\n-    ...     />\n-    ...\n-    ... </configure>\n-    ... """\n-    >>> zcml.load_config("configure.zcml", Products.Five)\n-    >>> zcml.load_string(configure)\n-\n-Now when text is transformed from text/html to text/x-html-safe, the filter will\n-be applied::\n-\n-    >>> app = layer[\'app\']\n-    >>> portal = layer[\'portal\']\n-    >>> str(portal.portal_transforms.convertTo(\'text/x-html-safe\',\n-    ...     \'test--test\', mimetype=\'text/html\', context=portal))\n-    \'test\\xe2\\x80\\x94test\'\n-\n-\n-How it works\n-============\n-\n-``plone.outputfilters`` hooks into the PortalTransforms machinery by installing:\n-\n-1. a new mimetype ("text/x-plone-outputfilters-html")\n-2. a transform from text/html to text/x-plone-outputfilters-html\n-3. a null transform from text/x-plone-outputfilters-html back to text/html\n-4. a "transform policy" for the text/x-html-safe mimetype, which says that text\n-   being transformed to text/x-html-safe must first be transformed to\n-   text/x-plone-outputfilters-html\n-\n-The filter adapters are looked up and applied during the execution of the\n-transform from step #2.\n-\n-This should be considered an implementation detail and may change at some point\n-in the future.\n-\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-28T14:52:56+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.outputfilters/commit/49ca553e1c4f258ae2226ccc733ce6926a2200dc

Deprecate uuidFor, unconditionally import plone.uuid.interfaces.IUUID.

No code in core Plone uses uuidFor, so let's remove it in Plone 7.

Files changed:
M plone/outputfilters/browser/resolveuid.py

b'diff --git a/plone/outputfilters/browser/resolveuid.py b/plone/outputfilters/browser/resolveuid.py\nindex addac34..bb4d993 100644\n--- a/plone/outputfilters/browser/resolveuid.py\n+++ b/plone/outputfilters/browser/resolveuid.py\n@@ -1,5 +1,6 @@\n from Acquisition import aq_base\n from plone.app.uuid.utils import uuidToObject as new_uuidToObject\n+from plone.uuid.interfaces import IUUID\n from Products.CMFCore.utils import getToolByName\n from zExceptions import NotFound\n from zope.component.hooks import getSite\n@@ -26,20 +27,12 @@ def uuidToObject(uuid):\n     return new_uuidToObject(uuid, unrestricted=True)\n \n \n-try:\n-    from plone.uuid.interfaces import IUUID\n-except ImportError:\n-\n-    def uuidFor(obj):\n-        return obj.UID()\n-\n-else:\n-\n-    def uuidFor(obj):\n-        uuid = IUUID(obj, None)\n-        if uuid is None and hasattr(aq_base(obj), "UID"):\n-            uuid = obj.UID()\n-        return uuid\n+@deprecate("uuidFor is not used in core Plone. Will be removed in Plone 7")\n+def uuidFor(obj):\n+    uuid = IUUID(obj, None)\n+    if uuid is None and hasattr(aq_base(obj), "UID"):\n+        uuid = obj.UID()\n+    return uuid\n \n \n @implementer(IPublishTraverse)\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-28T14:54:58+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.outputfilters/commit/dd3b3b7cca854b7c4e53461483a26bb7bd82c4b2

Removed references to Archetypes and LinguaPlone.

Files changed:
M README.rst

b"diff --git a/README.rst b/README.rst\nindex d8e748d..6e250d1 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -8,10 +8,8 @@ By default, these filters are wired up to occur when text is transformed from\n the text/html mimetype to the text/x-html-safe mimetype via the\n PortalTransforms machinery.\n \n-With both Archetypes TextFields and the RichText field of\n-``plone.app.textfield``, this transform is typically applied when the field\n-value is first accessed. The result of the transform is then cached in a\n-volatile attribute for an hour or until the value is replaced.\n+With  the RichText field of ``plone.app.textfield``, this transform is typically applied when the field value is first accessed.\n+The result of the transform is then cached in a volatile attribute for an hour or until the value is replaced.\n \n \n Included Filters\n@@ -45,9 +43,7 @@ requires an extra request after the redirect. The resolveuid filter avoids that\n by replacing such URLs with the object's actual full absolute URL as the link\n is rendered.\n \n-UIDs are resolved using ``plone.app.uuid.utils.uuidToURL``, with a fallback to\n-the Archetypes UID catalog for backwards compatibility. LinguaPlone translations\n-are supported when LinguaPlone is present.\n+UIDs are resolved using ``plone.app.uuid.utils.uuidToURL``.\n \n The resolveuid filter is enabled if there is at least one\n ``plone.outputfilters.filters.resolveuid_and_caption.IResolveUidsEnabler``\n"

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-28T14:55:53+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.outputfilters/commit/d72aef80ccfa423a6fb5884fb2c1c48a40bbf9f7

Replaced 'implements' with 'implementer' in readme.

Files changed:
M plone/outputfilters/README.rst

b'diff --git a/plone/outputfilters/README.rst b/plone/outputfilters/README.rst\nindex 454b166..836a4bd 100644\n--- a/plone/outputfilters/README.rst\n+++ b/plone/outputfilters/README.rst\n@@ -12,11 +12,11 @@ used to indicate that the input should not be modified.\n Example::\n \n     import re\n-    from zope.interface import implements\n+    from zope.interface import implementer\n     from plone.outputfilters.interfaces import IFilter\n \n+    @implementer(IFilter)\n     class EmDashAdder(object):\n-        implements(IFilter)\n         order = 1000\n \n         def __init__(self, context, request):\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-28T15:22:53+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.outputfilters/commit/e4a68dd01ad056b0bd4dfd8ca862f1c42ba90e96

Get rid of our own deprecation warnings in tests.

Files changed:
M plone/outputfilters/browser/resolveuid.py
M plone/outputfilters/filters/picture_variants.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/browser/resolveuid.py b/plone/outputfilters/browser/resolveuid.py\nindex bb4d993..8809af8 100644\n--- a/plone/outputfilters/browser/resolveuid.py\n+++ b/plone/outputfilters/browser/resolveuid.py\n@@ -1,5 +1,6 @@\n from Acquisition import aq_base\n from plone.app.uuid.utils import uuidToObject as new_uuidToObject\n+from plone.app.uuid.utils import uuidToURL as new_uuidToURL\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.utils import getToolByName\n from zExceptions import NotFound\n@@ -21,7 +22,10 @@ def uuidToURL(uuid):\n         return res[0].getURL()\n \n \n-@deprecate("Import from plone.app.uuid.utils instead. Will be removed in Plone 7")\n+@deprecate(\n+    "Import from plone.app.uuid.utils instead, and call with unrestricted=True. "\n+    "Will be removed in Plone 7"\n+)\n def uuidToObject(uuid):\n     """Resolves a UUID to an object via the Physical Path"""\n     return new_uuidToObject(uuid, unrestricted=True)\n@@ -52,7 +56,7 @@ def publishTraverse(self, request, name):\n         return self\n \n     def __call__(self):\n-        url = uuidToURL(self.uuid)\n+        url = new_uuidToURL(self.uuid)\n \n         if not url:\n             raise NotFound("The link you followed is broken")\ndiff --git a/plone/outputfilters/filters/picture_variants.py b/plone/outputfilters/filters/picture_variants.py\nindex 8295e0d..2e39deb 100644\n--- a/plone/outputfilters/filters/picture_variants.py\n+++ b/plone/outputfilters/filters/picture_variants.py\n@@ -35,7 +35,7 @@ def __call__(self, data):\n                 continue\n             picture_variants_config = get_picture_variants().get(picture_variant_name)\n             if not picture_variants_config:\n-                logger.warn(\n+                logger.warning(\n                     "Could not find the given picture_variant_name {}, leave tag untouched!".format(\n                         picture_variant_name\n                     )\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex 7b5dfd5..91e8120 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -16,6 +16,8 @@\n from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n from Products.PortalTransforms.tests.utils import normalize_html\n \n+import warnings\n+\n \n PREFIX = abspath(dirname(__file__))\n \n@@ -310,26 +312,32 @@ def test_resolveuid_view_querystring(self):\n         self.assertEqual("http://nohost/plone/image.jpg?qs", res.headers["location"])\n \n     def test_uuidToURL(self):\n-        from plone.outputfilters.browser.resolveuid import uuidToURL\n+        with warnings.catch_warnings():\n+            warnings.simplefilter("ignore")\n+            from plone.outputfilters.browser.resolveuid import uuidToURL\n \n-        self.assertEqual("http://nohost/plone/image.jpg", uuidToURL(self.UID))\n+            self.assertEqual("http://nohost/plone/image.jpg", uuidToURL(self.UID))\n \n     def test_uuidToObject(self):\n-        from plone.outputfilters.browser.resolveuid import uuidToObject\n+        with warnings.catch_warnings():\n+            warnings.simplefilter("ignore")\n+            from plone.outputfilters.browser.resolveuid import uuidToObject\n \n-        self.assertTrue(\n-            self.portal["image.jpg"].aq_base is uuidToObject(self.UID).aq_base\n-        )\n+            self.assertTrue(\n+                self.portal["image.jpg"].aq_base is uuidToObject(self.UID).aq_base\n+            )\n \n     def test_uuidToURL_permission(self):\n-        from plone.outputfilters.browser.resolveuid import uuidToObject\n-        from plone.outputfilters.browser.resolveuid import uuidToURL\n-\n-        self.portal.invokeFactory("Document", id="page", title="Page")\n-        page = self.portal["page"]\n-        self.logout()\n-        self.assertEqual("http://nohost/plone/page", uuidToURL(page.UID()))\n-        self.assertTrue(page.aq_base is uuidToObject(page.UID()).aq_base)\n+        with warnings.catch_warnings():\n+            warnings.simplefilter("ignore")\n+            from plone.outputfilters.browser.resolveuid import uuidToObject\n+            from plone.outputfilters.browser.resolveuid import uuidToURL\n+\n+            self.portal.invokeFactory("Document", id="page", title="Page")\n+            page = self.portal["page"]\n+            self.logout()\n+            self.assertEqual("http://nohost/plone/page", uuidToURL(page.UID()))\n+            self.assertTrue(page.aq_base is uuidToObject(page.UID()).aq_base)\n \n     def test_image_captioning_in_news_item(self):\n         # Create a news item with a relative unscaled image\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-28T16:48:44+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.outputfilters/commit/7c725efc1072f78a0d0f8b5fcc72d35cfe767bab

Merge pull request #58 from plone/config-with-default-template-169a6347

Config with default template 169a6347

Files changed:
A news/535edb14.internal
M .gitignore
M .meta.toml
M .pre-commit-config.yaml
M README.rst
M plone/outputfilters/README.rst
M plone/outputfilters/browser/resolveuid.py
M plone/outputfilters/filters/picture_variants.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py
M pyproject.toml
M tox.ini
D plone/outputfilters/tests/README_py2.rst

b'diff --git a/.gitignore b/.gitignore\nindex 48f1ce2..9f0e0cb 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -8,6 +8,8 @@ lib/\n include/\n parts/\n .installed.cfg\n+.tox\n+dependencies.svg\n develop-eggs/\n eggs/\n local/\ndiff --git a/.meta.toml b/.meta.toml\nindex 17f7b14..6d9d74f 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -2,4 +2,12 @@\n # https://github.com/plone/meta/tree/master/config/default\n [meta]\n template = "default"\n-commit-id = "243ca9ec"\n+commit-id = "993150bc"\n+\n+[codespell]\n+additional-ignores = "discreet"\n+\n+[dependencies]\n+mappings = [\n+    "beautifulsoup4 = [\'bs4\']",\n+    ]\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nindex 582f8ac..449e951 100644\n--- a/.pre-commit-config.yaml\n+++ b/.pre-commit-config.yaml\n@@ -19,7 +19,7 @@ repos:\n     hooks:\n     -   id: black\n -   repo: https://github.com/collective/zpretty\n-    rev: 3.0.2\n+    rev: 3.0.3\n     hooks:\n     -   id: zpretty\n -   repo: https://github.com/PyCQA/flake8\ndiff --git a/README.rst b/README.rst\nindex d8e748d..6e250d1 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -8,10 +8,8 @@ By default, these filters are wired up to occur when text is transformed from\n the text/html mimetype to the text/x-html-safe mimetype via the\n PortalTransforms machinery.\n \n-With both Archetypes TextFields and the RichText field of\n-``plone.app.textfield``, this transform is typically applied when the field\n-value is first accessed. The result of the transform is then cached in a\n-volatile attribute for an hour or until the value is replaced.\n+With  the RichText field of ``plone.app.textfield``, this transform is typically applied when the field value is first accessed.\n+The result of the transform is then cached in a volatile attribute for an hour or until the value is replaced.\n \n \n Included Filters\n@@ -45,9 +43,7 @@ requires an extra request after the redirect. The resolveuid filter avoids that\n by replacing such URLs with the object\'s actual full absolute URL as the link\n is rendered.\n \n-UIDs are resolved using ``plone.app.uuid.utils.uuidToURL``, with a fallback to\n-the Archetypes UID catalog for backwards compatibility. LinguaPlone translations\n-are supported when LinguaPlone is present.\n+UIDs are resolved using ``plone.app.uuid.utils.uuidToURL``.\n \n The resolveuid filter is enabled if there is at least one\n ``plone.outputfilters.filters.resolveuid_and_caption.IResolveUidsEnabler``\ndiff --git a/news/535edb14.internal b/news/535edb14.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/535edb14.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/outputfilters/README.rst b/plone/outputfilters/README.rst\nindex 454b166..836a4bd 100644\n--- a/plone/outputfilters/README.rst\n+++ b/plone/outputfilters/README.rst\n@@ -12,11 +12,11 @@ used to indicate that the input should not be modified.\n Example::\n \n     import re\n-    from zope.interface import implements\n+    from zope.interface import implementer\n     from plone.outputfilters.interfaces import IFilter\n \n+    @implementer(IFilter)\n     class EmDashAdder(object):\n-        implements(IFilter)\n         order = 1000\n \n         def __init__(self, context, request):\ndiff --git a/plone/outputfilters/browser/resolveuid.py b/plone/outputfilters/browser/resolveuid.py\nindex 093dde1..8809af8 100644\n--- a/plone/outputfilters/browser/resolveuid.py\n+++ b/plone/outputfilters/browser/resolveuid.py\n@@ -1,19 +1,16 @@\n from Acquisition import aq_base\n from plone.app.uuid.utils import uuidToObject as new_uuidToObject\n+from plone.app.uuid.utils import uuidToURL as new_uuidToURL\n+from plone.uuid.interfaces import IUUID\n from Products.CMFCore.utils import getToolByName\n from zExceptions import NotFound\n+from zope.component.hooks import getSite\n from zope.deprecation import deprecate\n from zope.interface import implementer\n from zope.publisher.browser import BrowserView\n from zope.publisher.interfaces import IPublishTraverse\n \n \n-try:\n-    from zope.component.hooks import getSite\n-except ImportError:\n-    from zope.app.component.hooks import getSite\n-\n-\n @deprecate(\n     "Please use plone.app.uuid.utils.uuidToURL instead. Will be removed in Plone 7"\n )\n@@ -25,26 +22,21 @@ def uuidToURL(uuid):\n         return res[0].getURL()\n \n \n-@deprecate("Import from plone.app.uuid.utils instead. Will be removed in Plone 7")\n+@deprecate(\n+    "Import from plone.app.uuid.utils instead, and call with unrestricted=True. "\n+    "Will be removed in Plone 7"\n+)\n def uuidToObject(uuid):\n     """Resolves a UUID to an object via the Physical Path"""\n     return new_uuidToObject(uuid, unrestricted=True)\n \n \n-try:\n-    from plone.uuid.interfaces import IUUID\n-except ImportError:\n-\n-    def uuidFor(obj):\n-        return obj.UID()\n-\n-else:\n-\n-    def uuidFor(obj):\n-        uuid = IUUID(obj, None)\n-        if uuid is None and hasattr(aq_base(obj), "UID"):\n-            uuid = obj.UID()\n-        return uuid\n+@deprecate("uuidFor is not used in core Plone. Will be removed in Plone 7")\n+def uuidFor(obj):\n+    uuid = IUUID(obj, None)\n+    if uuid is None and hasattr(aq_base(obj), "UID"):\n+        uuid = obj.UID()\n+    return uuid\n \n \n @implementer(IPublishTraverse)\n@@ -64,7 +56,7 @@ def publishTraverse(self, request, name):\n         return self\n \n     def __call__(self):\n-        url = uuidToURL(self.uuid)\n+        url = new_uuidToURL(self.uuid)\n \n         if not url:\n             raise NotFound("The link you followed is broken")\ndiff --git a/plone/outputfilters/filters/picture_variants.py b/plone/outputfilters/filters/picture_variants.py\nindex 8295e0d..2e39deb 100644\n--- a/plone/outputfilters/filters/picture_variants.py\n+++ b/plone/outputfilters/filters/picture_variants.py\n@@ -35,7 +35,7 @@ def __call__(self, data):\n                 continue\n             picture_variants_config = get_picture_variants().get(picture_variant_name)\n             if not picture_variants_config:\n-                logger.warn(\n+                logger.warning(\n                     "Could not find the given picture_variant_name {}, leave tag untouched!".format(\n                         picture_variant_name\n                     )\ndiff --git a/plone/outputfilters/tests/README_py2.rst b/plone/outputfilters/tests/README_py2.rst\ndeleted file mode 100644\nindex 0e7dca9..0000000\n--- a/plone/outputfilters/tests/README_py2.rst\n+++ /dev/null\n@@ -1,85 +0,0 @@\n-Adding a custom filter\n-======================\n-\n-As an example, the following filter replaces all doubled hyphens ("--") with em\n-dashes ("-"). (Don\'t use the example verbatim, because it doesn\'t parse HTML to\n-apply itself only to text nodes, so will mangle HTML comments.)\n-\n-A filter is a callable which accepts a UTF-8-encoded HTML string as input, and\n-returns a modified UTF-8-encoded HTML string. A return value of ``None`` may be\n-used to indicate that the input should not be modified.\n-\n-Example::\n-\n-    import re\n-    from zope.interface import implements\n-    from plone.outputfilters.interfaces import IFilter\n-\n-    class EmDashAdder(object):\n-        implements(IFilter)\n-        order = 1000\n-\n-        def __init__(self, context, request):\n-            pass\n-\n-        def is_enabled(self):\n-            return True\n-\n-        pattern = re.compile(r\'--\')\n-\n-        def __call__(self, data):\n-            return self.pattern.sub(u\'\\xe2\\x80\\x94\', data)\n-\n-The ``order`` attribute may be used to affect the order in which filters are\n-applied (higher values run later). The is_enabled method should return a boolean\n-indicating whether the filter should be applied.\n-\n-Filters are registered in ZCML as a named multi-adapter of the context and\n-request to IFilter::\n-\n-    >>> from Zope2.App import zcml\n-    >>> import Products.Five\n-    >>> configure = """\n-    ... <configure\n-    ...     xmlns="http://namespaces.zope.org/zope">\n-    ...\n-    ...   <adapter\n-    ...     name="em_dash_adder"\n-    ...     provides="plone.outputfilters.interfaces.IFilter"\n-    ...     for="* *"\n-    ...     factory="plone.outputfilters.filters.example.EmDashAdder"\n-    ...     />\n-    ...\n-    ... </configure>\n-    ... """\n-    >>> zcml.load_config("configure.zcml", Products.Five)\n-    >>> zcml.load_string(configure)\n-\n-Now when text is transformed from text/html to text/x-html-safe, the filter will\n-be applied::\n-\n-    >>> app = layer[\'app\']\n-    >>> portal = layer[\'portal\']\n-    >>> str(portal.portal_transforms.convertTo(\'text/x-html-safe\',\n-    ...     \'test--test\', mimetype=\'text/html\', context=portal))\n-    \'test\\xe2\\x80\\x94test\'\n-\n-\n-How it works\n-============\n-\n-``plone.outputfilters`` hooks into the PortalTransforms machinery by installing:\n-\n-1. a new mimetype ("text/x-plone-outputfilters-html")\n-2. a transform from text/html to text/x-plone-outputfilters-html\n-3. a null transform from text/x-plone-outputfilters-html back to text/html\n-4. a "transform policy" for the text/x-html-safe mimetype, which says that text\n-   being transformed to text/x-html-safe must first be transformed to\n-   text/x-plone-outputfilters-html\n-\n-The filter adapters are looked up and applied during the execution of the\n-transform from step #2.\n-\n-This should be considered an implementation detail and may change at some point\n-in the future.\n-\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex 7b5dfd5..91e8120 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -16,6 +16,8 @@\n from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n from Products.PortalTransforms.tests.utils import normalize_html\n \n+import warnings\n+\n \n PREFIX = abspath(dirname(__file__))\n \n@@ -310,26 +312,32 @@ def test_resolveuid_view_querystring(self):\n         self.assertEqual("http://nohost/plone/image.jpg?qs", res.headers["location"])\n \n     def test_uuidToURL(self):\n-        from plone.outputfilters.browser.resolveuid import uuidToURL\n+        with warnings.catch_warnings():\n+            warnings.simplefilter("ignore")\n+            from plone.outputfilters.browser.resolveuid import uuidToURL\n \n-        self.assertEqual("http://nohost/plone/image.jpg", uuidToURL(self.UID))\n+            self.assertEqual("http://nohost/plone/image.jpg", uuidToURL(self.UID))\n \n     def test_uuidToObject(self):\n-        from plone.outputfilters.browser.resolveuid import uuidToObject\n+        with warnings.catch_warnings():\n+            warnings.simplefilter("ignore")\n+            from plone.outputfilters.browser.resolveuid import uuidToObject\n \n-        self.assertTrue(\n-            self.portal["image.jpg"].aq_base is uuidToObject(self.UID).aq_base\n-        )\n+            self.assertTrue(\n+                self.portal["image.jpg"].aq_base is uuidToObject(self.UID).aq_base\n+            )\n \n     def test_uuidToURL_permission(self):\n-        from plone.outputfilters.browser.resolveuid import uuidToObject\n-        from plone.outputfilters.browser.resolveuid import uuidToURL\n-\n-        self.portal.invokeFactory("Document", id="page", title="Page")\n-        page = self.portal["page"]\n-        self.logout()\n-        self.assertEqual("http://nohost/plone/page", uuidToURL(page.UID()))\n-        self.assertTrue(page.aq_base is uuidToObject(page.UID()).aq_base)\n+        with warnings.catch_warnings():\n+            warnings.simplefilter("ignore")\n+            from plone.outputfilters.browser.resolveuid import uuidToObject\n+            from plone.outputfilters.browser.resolveuid import uuidToURL\n+\n+            self.portal.invokeFactory("Document", id="page", title="Page")\n+            page = self.portal["page"]\n+            self.logout()\n+            self.assertEqual("http://nohost/plone/page", uuidToURL(page.UID()))\n+            self.assertTrue(page.aq_base is uuidToObject(page.UID()).aq_base)\n \n     def test_image_captioning_in_news_item(self):\n         # Create a news item with a relative unscaled image\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 5d0d30e..c3b09fa 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -42,6 +42,9 @@ profile = "plone"\n [tool.black]\n target-version = ["py38"]\n \n+[tool.codespell]\n+ignore-words-list = "discreet"\n+\n [tool.dependencychecker]\n Zope = [\n   # Zope own provided namespaces\n@@ -60,8 +63,4 @@ Zope = [\n   \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n ]\n python-dateutil = [\'dateutil\']\n-beautifulsoup4 = [\'bs4\', ]\n-ignore-packages = [\'zope.app.component\']\n-\n-[tool.codespell]\n-ignore-words-list = "discreet"\n+beautifulsoup4 = [\'bs4\']\ndiff --git a/tox.ini b/tox.ini\nindex c830e4a..62e2436 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,6 +1,8 @@\n # Generated from:\n # https://github.com/plone/meta/tree/master/config/default\n [tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n envlist =\n     format\n     lint\n@@ -37,14 +39,15 @@ deps =\n     graphviz  # optional dependency of pipdeptree\n commands =\n     dependencychecker\n-    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n \n [testenv:test]\n usedevelop = true\n+constrain_package_deps = true\n deps =\n     zope.testrunner\n     -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands =\n-    zope-testrunner --test-path={toxinidir} -s plone.outputfilters\n+    zope-testrunner --test-path={toxinidir} -s plone.outputfilters {posargs}\n extras =\n     test\n'

