Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2017-03-07T20:09:28+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/2d6f559aa4f2200e53faff9e138e78eece78a39d

whitespace

Files changed:
M Products/CMFPlone/resources/exportimport/__init__.py

diff --git a/Products/CMFPlone/resources/exportimport/__init__.py b/Products/CMFPlone/resources/exportimport/__init__.py
index 7c68785..40a96af 100644
--- a/Products/CMFPlone/resources/exportimport/__init__.py
+++ b/Products/CMFPlone/resources/exportimport/__init__.py
@@ -1 +1 @@
-# -*- coding: utf-8 -*-
\ No newline at end of file
+# -*- coding: utf-8 -*-


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2017-03-07T20:30:07+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/b921a5510ca98756ff6f09c4f0a0ab7d9ed78f7e

Legacy bundle cooking improvements
Resource registry legacy bundle cooking: Exit early with a warning, if preconditions to build are not given (no compilation paths).
Allow cooking CSS, even if no JS is defined.
Log all important steps of the cooking process.

Files changed:
M CHANGES.rst
M Products/CMFPlone/resources/browser/cook.py
M Products/CMFPlone/tests/testResourceRegistries.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 9cdc9c7..6db782a 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -20,13 +20,18 @@ New features:
 
 Bug fixes:
 
+- Resource registry legacy bundle cooking: Exit early with a warning, if preconditions to build are not given (no compilation paths).
+  Allow cooking CSS, even if no JS is defined.
+  Log all important steps of the cooking process.
+  [thet]
+
 - Remove unused ``plone.css`` from static repository.
   [thet]
 
 - Check for ``AccessInactivePortalContent`` for each path in a catalog query.
   This solves a problem, where Editors couldn't see inactive content, even though they had the required permission on a subpath of the portal (e.g. a subsite).
   [thet]
-  
+
 
 5.1b2 (2017-02-20)
 ------------------
diff --git a/Products/CMFPlone/resources/browser/cook.py b/Products/CMFPlone/resources/browser/cook.py
index d3a9ebd..ef0dd39 100644
--- a/Products/CMFPlone/resources/browser/cook.py
+++ b/Products/CMFPlone/resources/browser/cook.py
@@ -65,6 +65,15 @@ def cookWhenChangingSettings(context, bundle=None):
         # shipped as a legacy compiled js file
         return
 
+    js_path = bundle.jscompilation
+    css_path = bundle.csscompilation
+
+    if not js_path and not css_path:
+        logger.warn(
+            'No js_path or css_path found. We need a plone.resource '
+            'based resource path in order to store the compiled JS and CSS.'
+        )
+
     # Let's join all css and js
     cooked_css = ''
     cooked_js = REQUIREJS_RESET_PREFIX
@@ -75,86 +84,79 @@ def cookWhenChangingSettings(context, bundle=None):
             continue
         resource = resources[package]
 
-        for css_resource in resource.css:
-            css_url = siteUrl + '/' + css_resource
-            response = subrequest(css_url)
-            if response.status == 200:
-                css = response.getBody()
-                cooked_css += '\n/* Resource: {0} */\n{1}\n'.format(
-                    css_resource,
-                    css if '.min.css' == css_resource[-8:] else cssmin(css)
-                )
-            else:
-                cooked_css += '\n/* Could not find resource: {0} */\n\n'.format(  # noqa
-                    css_resource
-                )
-
-        if not resource.js:
+        if css_path:
+            for css_resource in resource.css:
+                css_url = siteUrl + '/' + css_resource
+                response = subrequest(css_url)
+                if response.status == 200:
+                    logger.warn('Cooking css {0}'.format(css_resource))
+                    css = response.getBody()
+                    cooked_css += '\n/* Resource: {0} */\n{1}\n'.format(
+                        css_resource,
+                        css if '.min.css' == css_resource[-8:] else cssmin(css)
+                    )
+                else:
+                    cooked_css +=\
+                        '\n/* Could not find resource: {0} */\n\n'.format(
+                            css_resource
+                        )
+                    logger.warn(
+                        'Could not find resource: {0}'.format(css_resource)
+                    )
+        if not resource.js or not js_path:
             continue
         js_url = siteUrl + '/' + resource.js
         response = subrequest(js_url)
         if response.status == 200:
             js = response.getBody()
             try:
+                logger.warn('Cooking js {0}'.format(resource.js))
                 cooked_js += '\n/* resource: {0} */\n{1}'.format(
                     resource.js,
                     js if '.min.js' == resource.js[-7:] else
                     minify(js, mangle=False, mangle_toplevel=False)
                 )
             except SyntaxError:
-                cooked_js += '\n/* resource(error cooking): {0} */\n{1}'.format(  # noqa
-                    resource.js,
-                    js
-                )
+                cooked_js +=\
+                    '\n/* Resource (error cooking): {0} */\n{1}'.format(
+                        resource.js,
+                        js
+                    )
+                logger.warn('Error cooking resource: {0}'.format(resource.js))
         else:
+            logger.warn('Could not find resource: {0}'.format(resource.js))
             cooked_js += '\n/* Could not find resource: {0} */\n\n'.format(
                 js_url
             )
 
     cooked_js += REQUIREJS_RESET_POSTFIX
 
-    js_path = bundle.jscompilation
-    css_path = bundle.csscompilation
-
-    if not js_path:
-        logger.warn('Could not compile js/css for bundle as there is '
-                    'no jscompilation setting')
-        return
-
-    # Storing js
-    resource_path = js_path.split('++plone++')[-1]
-    resource_name, resource_filepath = resource_path.split('/', 1)
     persistent_directory = getUtility(IResourceDirectory, name="persistent")
     if OVERRIDE_RESOURCE_DIRECTORY_NAME not in persistent_directory:
         persistent_directory.makeDirectory(OVERRIDE_RESOURCE_DIRECTORY_NAME)
     container = persistent_directory[OVERRIDE_RESOURCE_DIRECTORY_NAME]
-    if resource_name not in container:
-        container.makeDirectory(resource_name)
-    try:
-        folder = container[resource_name]
-        fi = StringIO(cooked_js)
-        folder.writeFile(resource_filepath, fi)
 
-        if css_path:
-            # Storing css if defined
-            resource_path = css_path.split('++plone++')[-1]
-            resource_name, resource_filepath = resource_path.split('/', 1)
-            persistent_directory = getUtility(
-                IResourceDirectory, name="persistent")
-            if OVERRIDE_RESOURCE_DIRECTORY_NAME not in persistent_directory:
-                persistent_directory.makeDirectory(
-                    OVERRIDE_RESOURCE_DIRECTORY_NAME)
-            container = persistent_directory[OVERRIDE_RESOURCE_DIRECTORY_NAME]
-            if resource_name not in container:
-                container.makeDirectory(resource_name)
+    def _write_resource(resource_path, cooked_string):
+        if not resource_path:
+            return
+        resource_path = resource_path.split('++plone++')[-1]
+        resource_name, resource_filepath = resource_path.split('/', 1)
+        if resource_name not in container:
+            container.makeDirectory(resource_name)
+        try:
             folder = container[resource_name]
-            fi = StringIO(cooked_css)
+            fi = StringIO(cooked_string)
             folder.writeFile(resource_filepath, fi)
-        bundle.last_compilation = datetime.now()
-        # setRequest(original_request)
-    except NotFound:
-        logger.info('Error compiling js/css for the bundle')
+            logger.info('Writing cooked resource: {0}'.format(resource_path))
+        except NotFound:
+            logger.warn('Error writing cooked resource: {0}'.format(
+                resource_path)
+            )
+
+    _write_resource(js_path, cooked_js)
+    _write_resource(css_path, cooked_css)
 
+    bundle.last_compilation = datetime.now()
     # refresh production meta bundles
     combine_bundles(context)
 
diff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py
index fd36abb..1806dc7 100644
--- a/Products/CMFPlone/tests/testResourceRegistries.py
+++ b/Products/CMFPlone/tests/testResourceRegistries.py
@@ -4,11 +4,11 @@
 from plone.resource.interfaces import IResourceDirectory
 from plone.subrequest import subrequest
 from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.controlpanel.browser.resourceregistry import OverrideFolderManager
-from Products.CMFPlone.controlpanel.browser.resourceregistry import ResourceRegistryControlPanelView
+from Products.CMFPlone.controlpanel.browser.resourceregistry import OverrideFolderManager  # noqa
+from Products.CMFPlone.controlpanel.browser.resourceregistry import ResourceRegistryControlPanelView  # noqa
 from Products.CMFPlone.interfaces import IBundleRegistry
 from Products.CMFPlone.interfaces import IResourceRegistry
-from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME
+from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME  # noqa
 from Products.CMFPlone.resources import add_bundle_on_request
 from Products.CMFPlone.resources import add_resource_on_request
 from Products.CMFPlone.resources import remove_bundle_on_request
@@ -16,7 +16,7 @@
 from Products.CMFPlone.resources.browser.scripts import ScriptsView
 from Products.CMFPlone.resources.browser.styles import StylesView
 from Products.CMFPlone.resources.bundle import Bundle
-from Products.CMFPlone.resources.exportimport.resourceregistry import ResourceRegistryNodeAdapter
+from Products.CMFPlone.resources.exportimport.resourceregistry import ResourceRegistryNodeAdapter  # noqa
 from Products.CMFPlone.tests import PloneTestCase
 from Products.GenericSetup.context import SetupEnviron
 from xml.dom.minidom import parseString
@@ -114,6 +114,40 @@ def test_dont_minify_already_minified(self):
         )
         self.assertTrue('body {\ncolor: blue;\n}' in resp_css.getBody())
 
+    def test_cook_only_css(self):
+        registry = getUtility(IRegistry)
+        bundles = registry.collectionOfInterface(IBundleRegistry,
+                                                 prefix="plone.bundles")
+        bundle = bundles.add('foobar')
+        bundle.jscompilation = ''
+        bundle.csscompilation = '++plone++static/foobar-compiled.css'
+
+        resources = registry.collectionOfInterface(IResourceRegistry,
+                                                   prefix="plone.resources")
+        resource = resources.add('foobar')
+
+        resource.css = ['++plone++static/foobar.min.css']
+        bundle.resources = ['foobar']
+
+        persistent_directory = getUtility(
+            IResourceDirectory, name="persistent")
+        if OVERRIDE_RESOURCE_DIRECTORY_NAME not in persistent_directory:
+            persistent_directory.makeDirectory(
+                OVERRIDE_RESOURCE_DIRECTORY_NAME)
+        container = persistent_directory[OVERRIDE_RESOURCE_DIRECTORY_NAME]
+        container.makeDirectory('static')
+        directory = container['static']
+        directory.writeFile('foobar.min.css', 'body {\ncolor: red;\n}')
+
+        cookWhenChangingSettings(self.portal, bundle)
+
+        resp_css = subrequest(
+            '{0}/++plone++static/foobar-compiled.css'.format(
+                self.portal.absolute_url()
+            )
+        )
+        self.assertTrue('body {\ncolor: red;\n}' in resp_css.getBody())
+
     def test_cooking_missing(self):
         registry = getUtility(IRegistry)
         bundles = registry.collectionOfInterface(IBundleRegistry,


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2017-03-07T22:22:52+01:00
Author: Eric BREHAULT (ebrehault) <ebrehault@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/b9e8bc78cc175558de7c3c34ebe064e711a7bf2a

Merge pull request #1961 from plone/thet-rr-cooking

Legacy bundle cooking improvements

Files changed:
M CHANGES.rst
M Products/CMFPlone/resources/browser/cook.py
M Products/CMFPlone/resources/exportimport/__init__.py
M Products/CMFPlone/tests/testResourceRegistries.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 9cdc9c7..6db782a 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -20,13 +20,18 @@ New features:
 
 Bug fixes:
 
+- Resource registry legacy bundle cooking: Exit early with a warning, if preconditions to build are not given (no compilation paths).
+  Allow cooking CSS, even if no JS is defined.
+  Log all important steps of the cooking process.
+  [thet]
+
 - Remove unused ``plone.css`` from static repository.
   [thet]
 
 - Check for ``AccessInactivePortalContent`` for each path in a catalog query.
   This solves a problem, where Editors couldn't see inactive content, even though they had the required permission on a subpath of the portal (e.g. a subsite).
   [thet]
-  
+
 
 5.1b2 (2017-02-20)
 ------------------
diff --git a/Products/CMFPlone/resources/browser/cook.py b/Products/CMFPlone/resources/browser/cook.py
index d3a9ebd..ef0dd39 100644
--- a/Products/CMFPlone/resources/browser/cook.py
+++ b/Products/CMFPlone/resources/browser/cook.py
@@ -65,6 +65,15 @@ def cookWhenChangingSettings(context, bundle=None):
         # shipped as a legacy compiled js file
         return
 
+    js_path = bundle.jscompilation
+    css_path = bundle.csscompilation
+
+    if not js_path and not css_path:
+        logger.warn(
+            'No js_path or css_path found. We need a plone.resource '
+            'based resource path in order to store the compiled JS and CSS.'
+        )
+
     # Let's join all css and js
     cooked_css = ''
     cooked_js = REQUIREJS_RESET_PREFIX
@@ -75,86 +84,79 @@ def cookWhenChangingSettings(context, bundle=None):
             continue
         resource = resources[package]
 
-        for css_resource in resource.css:
-            css_url = siteUrl + '/' + css_resource
-            response = subrequest(css_url)
-            if response.status == 200:
-                css = response.getBody()
-                cooked_css += '\n/* Resource: {0} */\n{1}\n'.format(
-                    css_resource,
-                    css if '.min.css' == css_resource[-8:] else cssmin(css)
-                )
-            else:
-                cooked_css += '\n/* Could not find resource: {0} */\n\n'.format(  # noqa
-                    css_resource
-                )
-
-        if not resource.js:
+        if css_path:
+            for css_resource in resource.css:
+                css_url = siteUrl + '/' + css_resource
+                response = subrequest(css_url)
+                if response.status == 200:
+                    logger.warn('Cooking css {0}'.format(css_resource))
+                    css = response.getBody()
+                    cooked_css += '\n/* Resource: {0} */\n{1}\n'.format(
+                        css_resource,
+                        css if '.min.css' == css_resource[-8:] else cssmin(css)
+                    )
+                else:
+                    cooked_css +=\
+                        '\n/* Could not find resource: {0} */\n\n'.format(
+                            css_resource
+                        )
+                    logger.warn(
+                        'Could not find resource: {0}'.format(css_resource)
+                    )
+        if not resource.js or not js_path:
             continue
         js_url = siteUrl + '/' + resource.js
         response = subrequest(js_url)
         if response.status == 200:
             js = response.getBody()
             try:
+                logger.warn('Cooking js {0}'.format(resource.js))
                 cooked_js += '\n/* resource: {0} */\n{1}'.format(
                     resource.js,
                     js if '.min.js' == resource.js[-7:] else
                     minify(js, mangle=False, mangle_toplevel=False)
                 )
             except SyntaxError:
-                cooked_js += '\n/* resource(error cooking): {0} */\n{1}'.format(  # noqa
-                    resource.js,
-                    js
-                )
+                cooked_js +=\
+                    '\n/* Resource (error cooking): {0} */\n{1}'.format(
+                        resource.js,
+                        js
+                    )
+                logger.warn('Error cooking resource: {0}'.format(resource.js))
         else:
+            logger.warn('Could not find resource: {0}'.format(resource.js))
             cooked_js += '\n/* Could not find resource: {0} */\n\n'.format(
                 js_url
             )
 
     cooked_js += REQUIREJS_RESET_POSTFIX
 
-    js_path = bundle.jscompilation
-    css_path = bundle.csscompilation
-
-    if not js_path:
-        logger.warn('Could not compile js/css for bundle as there is '
-                    'no jscompilation setting')
-        return
-
-    # Storing js
-    resource_path = js_path.split('++plone++')[-1]
-    resource_name, resource_filepath = resource_path.split('/', 1)
     persistent_directory = getUtility(IResourceDirectory, name="persistent")
     if OVERRIDE_RESOURCE_DIRECTORY_NAME not in persistent_directory:
         persistent_directory.makeDirectory(OVERRIDE_RESOURCE_DIRECTORY_NAME)
     container = persistent_directory[OVERRIDE_RESOURCE_DIRECTORY_NAME]
-    if resource_name not in container:
-        container.makeDirectory(resource_name)
-    try:
-        folder = container[resource_name]
-        fi = StringIO(cooked_js)
-        folder.writeFile(resource_filepath, fi)
 
-        if css_path:
-            # Storing css if defined
-            resource_path = css_path.split('++plone++')[-1]
-            resource_name, resource_filepath = resource_path.split('/', 1)
-            persistent_directory = getUtility(
-                IResourceDirectory, name="persistent")
-            if OVERRIDE_RESOURCE_DIRECTORY_NAME not in persistent_directory:
-                persistent_directory.makeDirectory(
-                    OVERRIDE_RESOURCE_DIRECTORY_NAME)
-            container = persistent_directory[OVERRIDE_RESOURCE_DIRECTORY_NAME]
-            if resource_name not in container:
-                container.makeDirectory(resource_name)
+    def _write_resource(resource_path, cooked_string):
+        if not resource_path:
+            return
+        resource_path = resource_path.split('++plone++')[-1]
+        resource_name, resource_filepath = resource_path.split('/', 1)
+        if resource_name not in container:
+            container.makeDirectory(resource_name)
+        try:
             folder = container[resource_name]
-            fi = StringIO(cooked_css)
+            fi = StringIO(cooked_string)
             folder.writeFile(resource_filepath, fi)
-        bundle.last_compilation = datetime.now()
-        # setRequest(original_request)
-    except NotFound:
-        logger.info('Error compiling js/css for the bundle')
+            logger.info('Writing cooked resource: {0}'.format(resource_path))
+        except NotFound:
+            logger.warn('Error writing cooked resource: {0}'.format(
+                resource_path)
+            )
+
+    _write_resource(js_path, cooked_js)
+    _write_resource(css_path, cooked_css)
 
+    bundle.last_compilation = datetime.now()
     # refresh production meta bundles
     combine_bundles(context)
 
diff --git a/Products/CMFPlone/resources/exportimport/__init__.py b/Products/CMFPlone/resources/exportimport/__init__.py
index 7c68785..40a96af 100644
--- a/Products/CMFPlone/resources/exportimport/__init__.py
+++ b/Products/CMFPlone/resources/exportimport/__init__.py
@@ -1 +1 @@
-# -*- coding: utf-8 -*-
\ No newline at end of file
+# -*- coding: utf-8 -*-
diff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py
index fd36abb..1806dc7 100644
--- a/Products/CMFPlone/tests/testResourceRegistries.py
+++ b/Products/CMFPlone/tests/testResourceRegistries.py
@@ -4,11 +4,11 @@
 from plone.resource.interfaces import IResourceDirectory
 from plone.subrequest import subrequest
 from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.controlpanel.browser.resourceregistry import OverrideFolderManager
-from Products.CMFPlone.controlpanel.browser.resourceregistry import ResourceRegistryControlPanelView
+from Products.CMFPlone.controlpanel.browser.resourceregistry import OverrideFolderManager  # noqa
+from Products.CMFPlone.controlpanel.browser.resourceregistry import ResourceRegistryControlPanelView  # noqa
 from Products.CMFPlone.interfaces import IBundleRegistry
 from Products.CMFPlone.interfaces import IResourceRegistry
-from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME
+from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME  # noqa
 from Products.CMFPlone.resources import add_bundle_on_request
 from Products.CMFPlone.resources import add_resource_on_request
 from Products.CMFPlone.resources import remove_bundle_on_request
@@ -16,7 +16,7 @@
 from Products.CMFPlone.resources.browser.scripts import ScriptsView
 from Products.CMFPlone.resources.browser.styles import StylesView
 from Products.CMFPlone.resources.bundle import Bundle
-from Products.CMFPlone.resources.exportimport.resourceregistry import ResourceRegistryNodeAdapter
+from Products.CMFPlone.resources.exportimport.resourceregistry import ResourceRegistryNodeAdapter  # noqa
 from Products.CMFPlone.tests import PloneTestCase
 from Products.GenericSetup.context import SetupEnviron
 from xml.dom.minidom import parseString
@@ -114,6 +114,40 @@ def test_dont_minify_already_minified(self):
         )
         self.assertTrue('body {\ncolor: blue;\n}' in resp_css.getBody())
 
+    def test_cook_only_css(self):
+        registry = getUtility(IRegistry)
+        bundles = registry.collectionOfInterface(IBundleRegistry,
+                                                 prefix="plone.bundles")
+        bundle = bundles.add('foobar')
+        bundle.jscompilation = ''
+        bundle.csscompilation = '++plone++static/foobar-compiled.css'
+
+        resources = registry.collectionOfInterface(IResourceRegistry,
+                                                   prefix="plone.resources")
+        resource = resources.add('foobar')
+
+        resource.css = ['++plone++static/foobar.min.css']
+        bundle.resources = ['foobar']
+
+        persistent_directory = getUtility(
+            IResourceDirectory, name="persistent")
+        if OVERRIDE_RESOURCE_DIRECTORY_NAME not in persistent_directory:
+            persistent_directory.makeDirectory(
+                OVERRIDE_RESOURCE_DIRECTORY_NAME)
+        container = persistent_directory[OVERRIDE_RESOURCE_DIRECTORY_NAME]
+        container.makeDirectory('static')
+        directory = container['static']
+        directory.writeFile('foobar.min.css', 'body {\ncolor: red;\n}')
+
+        cookWhenChangingSettings(self.portal, bundle)
+
+        resp_css = subrequest(
+            '{0}/++plone++static/foobar-compiled.css'.format(
+                self.portal.absolute_url()
+            )
+        )
+        self.assertTrue('body {\ncolor: red;\n}' in resp_css.getBody())
+
     def test_cooking_missing(self):
         registry = getUtility(IRegistry)
         bundles = registry.collectionOfInterface(IBundleRegistry,


