Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-05-08T21:36:38+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/62faf396ac01b136fbf4343f94b25cf9e4636e45

Always add data-default-sort attribute to search results.

Files changed:
A news/2854.bugfix
M Products/CMFPlone/browser/search.py
M Products/CMFPlone/browser/templates/search.pt
M Products/CMFPlone/tests/testSearch.py

b'diff --git a/Products/CMFPlone/browser/search.py b/Products/CMFPlone/browser/search.py\nindex f6e79f841..190f566ff 100644\n--- a/Products/CMFPlone/browser/search.py\n+++ b/Products/CMFPlone/browser/search.py\n@@ -7,6 +7,7 @@\n from Products.CMFPlone.interfaces import ISearchSchema\n from Products.CMFPlone.PloneBatch import Batch\n from Products.ZCTextIndex.ParseTree import ParseError\n+from zope.cachedescriptors.property import Lazy as lazy_property\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.component import queryUtility\n@@ -135,6 +136,12 @@ def _filter_query(self, query):\n             del query[\'sort_order\']\n         return query\n \n+    @lazy_property\n+    def default_sort_on(self):\n+        registry = getUtility(IRegistry)\n+        search_settings = registry.forInterface(ISearchSchema, prefix=\'plone\')\n+        return search_settings.sort_on\n+\n     def filter_query(self, query):\n         query = self._filter_query(query)\n         if query is None:\n@@ -142,10 +149,9 @@ def filter_query(self, query):\n         # explicitly set a sort; if no `sort_on` is present, the catalog sorts\n         # by relevance\n         if \'sort_on\' not in query:\n-            registry = getUtility(IRegistry)\n-            search_settings = registry.forInterface(ISearchSchema, prefix=\'plone\')\n-            if search_settings.sort_on != \'relevance\':\n-                query[\'sort_on\'] = search_settings.sort_on\n+            self.default_sort_on\n+            if self.default_sort_on != \'relevance\':\n+                query[\'sort_on\'] = self.default_sort_on\n         elif query[\'sort_on\'] == \'relevance\':\n             del query[\'sort_on\']\n         if query.get(\'sort_on\', \'\') == \'Date\':\n@@ -171,9 +177,7 @@ def types_list(self):\n     def sort_options(self):\n         """ Sorting options for search results view. """\n         if \'sort_on\' not in self.request.form:\n-            registry = getUtility(IRegistry)\n-            search_settings = registry.forInterface(ISearchSchema, prefix="plone")\n-            self.request.form[\'sort_on\'] = search_settings.sort_on\n+            self.request.form[\'sort_on\'] = self.default_sort_on\n         return (\n             SortOption(self.request, _(u\'relevance\'), \'relevance\'),\n             SortOption(\ndiff --git a/Products/CMFPlone/browser/templates/search.pt b/Products/CMFPlone/browser/templates/search.pt\nindex bf307ee2d..6dbfb124e 100644\n--- a/Products/CMFPlone/browser/templates/search.pt\n+++ b/Products/CMFPlone/browser/templates/search.pt\n@@ -206,7 +206,7 @@\n                     </nav>\n                     <div id="search-results"\n                          tal:define="navigation_root_url context/@@plone_portal_state/navigation_root_url;"\n-                         tal:attributes="data-default-sort request/sort_on">\n+                         tal:attributes="data-default-sort python:request.get(\'sort_on\') or view.default_sort_on">\n \n                       <metal:noresults tal:condition="not: batch">\n                         <p i18n:domain="plone"><strong i18n:translate="description_no_results_found">No results were found.</strong></p>\ndiff --git a/Products/CMFPlone/tests/testSearch.py b/Products/CMFPlone/tests/testSearch.py\nindex 25a584d4e..c048f954c 100644\n--- a/Products/CMFPlone/tests/testSearch.py\n+++ b/Products/CMFPlone/tests/testSearch.py\n@@ -166,7 +166,9 @@ def test_default_search_order_relevance(self):\n         self.assertEqual(search_settings.sort_on, \'relevance\')\n \n         q = {\'SearchableText\': \'spam\'}\n-        res = portal.restrictedTraverse(\'@@search\').results(query=q)\n+        view = portal.restrictedTraverse(\'@@search\')\n+        self.assertEqual(view.default_sort_on, \'relevance\')\n+        res = view.results(query=q)\n         ids = [r.getId() for r in res]\n         expected = [\n             \'my-page11\', \'my-page10\', \'my-page9\', \'my-page8\', \'my-page7\',\n@@ -187,7 +189,9 @@ def test_default_search_order_date(self):\n         search_settings = registry.forInterface(ISearchSchema, prefix="plone")\n         search_settings.sort_on = \'Date\'\n         q = {\'SearchableText\': \'spam\'}\n-        res = portal.restrictedTraverse(\'@@search\').results(query=q)\n+        view = portal.restrictedTraverse(\'@@search\')\n+        self.assertEqual(view.default_sort_on, \'Date\')\n+        res = view.results(query=q)\n         ids = [r.getId() for r in res]\n         expected = [\n             \'my-page11\', \'my-page10\', \'my-page9\', \'my-page8\', \'my-page7\',\n@@ -203,7 +207,9 @@ def test_default_search_order_alphabetic(self):\n         search_settings = registry.forInterface(ISearchSchema, prefix="plone")\n         search_settings.sort_on = \'sortable_title\'\n         q = {\'SearchableText\': \'spam\'}\n-        res = portal.restrictedTraverse(\'@@search\').results(query=q)\n+        view = portal.restrictedTraverse(\'@@search\')\n+        self.assertEqual(view.default_sort_on, \'sortable_title\')\n+        res = view.results(query=q)\n         ids = [r.getId() for r in res]\n         expected = [\n             \'my-page0\', \'my-page1\', \'my-page2\', \'my-page3\', \'my-page4\',\ndiff --git a/news/2854.bugfix b/news/2854.bugfix\nnew file mode 100644\nindex 000000000..4abf29a35\n--- /dev/null\n+++ b/news/2854.bugfix\n@@ -0,0 +1 @@\n+Always add ``data-default-sort`` attribute to search results.  [maurits]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-05-10T10:34:48+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/b6d8ad27135f95fb738de0362befdfb3252e4ced

Merge branch 'maurits-default-sort-2854-plone52'

Files changed:
A news/2854.bugfix
M Products/CMFPlone/browser/search.py
M Products/CMFPlone/browser/templates/search.pt
M Products/CMFPlone/tests/testSearch.py

b'diff --git a/Products/CMFPlone/browser/search.py b/Products/CMFPlone/browser/search.py\nindex f6e79f841..190f566ff 100644\n--- a/Products/CMFPlone/browser/search.py\n+++ b/Products/CMFPlone/browser/search.py\n@@ -7,6 +7,7 @@\n from Products.CMFPlone.interfaces import ISearchSchema\n from Products.CMFPlone.PloneBatch import Batch\n from Products.ZCTextIndex.ParseTree import ParseError\n+from zope.cachedescriptors.property import Lazy as lazy_property\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.component import queryUtility\n@@ -135,6 +136,12 @@ def _filter_query(self, query):\n             del query[\'sort_order\']\n         return query\n \n+    @lazy_property\n+    def default_sort_on(self):\n+        registry = getUtility(IRegistry)\n+        search_settings = registry.forInterface(ISearchSchema, prefix=\'plone\')\n+        return search_settings.sort_on\n+\n     def filter_query(self, query):\n         query = self._filter_query(query)\n         if query is None:\n@@ -142,10 +149,9 @@ def filter_query(self, query):\n         # explicitly set a sort; if no `sort_on` is present, the catalog sorts\n         # by relevance\n         if \'sort_on\' not in query:\n-            registry = getUtility(IRegistry)\n-            search_settings = registry.forInterface(ISearchSchema, prefix=\'plone\')\n-            if search_settings.sort_on != \'relevance\':\n-                query[\'sort_on\'] = search_settings.sort_on\n+            self.default_sort_on\n+            if self.default_sort_on != \'relevance\':\n+                query[\'sort_on\'] = self.default_sort_on\n         elif query[\'sort_on\'] == \'relevance\':\n             del query[\'sort_on\']\n         if query.get(\'sort_on\', \'\') == \'Date\':\n@@ -171,9 +177,7 @@ def types_list(self):\n     def sort_options(self):\n         """ Sorting options for search results view. """\n         if \'sort_on\' not in self.request.form:\n-            registry = getUtility(IRegistry)\n-            search_settings = registry.forInterface(ISearchSchema, prefix="plone")\n-            self.request.form[\'sort_on\'] = search_settings.sort_on\n+            self.request.form[\'sort_on\'] = self.default_sort_on\n         return (\n             SortOption(self.request, _(u\'relevance\'), \'relevance\'),\n             SortOption(\ndiff --git a/Products/CMFPlone/browser/templates/search.pt b/Products/CMFPlone/browser/templates/search.pt\nindex bf307ee2d..6dbfb124e 100644\n--- a/Products/CMFPlone/browser/templates/search.pt\n+++ b/Products/CMFPlone/browser/templates/search.pt\n@@ -206,7 +206,7 @@\n                     </nav>\n                     <div id="search-results"\n                          tal:define="navigation_root_url context/@@plone_portal_state/navigation_root_url;"\n-                         tal:attributes="data-default-sort request/sort_on">\n+                         tal:attributes="data-default-sort python:request.get(\'sort_on\') or view.default_sort_on">\n \n                       <metal:noresults tal:condition="not: batch">\n                         <p i18n:domain="plone"><strong i18n:translate="description_no_results_found">No results were found.</strong></p>\ndiff --git a/Products/CMFPlone/tests/testSearch.py b/Products/CMFPlone/tests/testSearch.py\nindex 25a584d4e..c048f954c 100644\n--- a/Products/CMFPlone/tests/testSearch.py\n+++ b/Products/CMFPlone/tests/testSearch.py\n@@ -166,7 +166,9 @@ def test_default_search_order_relevance(self):\n         self.assertEqual(search_settings.sort_on, \'relevance\')\n \n         q = {\'SearchableText\': \'spam\'}\n-        res = portal.restrictedTraverse(\'@@search\').results(query=q)\n+        view = portal.restrictedTraverse(\'@@search\')\n+        self.assertEqual(view.default_sort_on, \'relevance\')\n+        res = view.results(query=q)\n         ids = [r.getId() for r in res]\n         expected = [\n             \'my-page11\', \'my-page10\', \'my-page9\', \'my-page8\', \'my-page7\',\n@@ -187,7 +189,9 @@ def test_default_search_order_date(self):\n         search_settings = registry.forInterface(ISearchSchema, prefix="plone")\n         search_settings.sort_on = \'Date\'\n         q = {\'SearchableText\': \'spam\'}\n-        res = portal.restrictedTraverse(\'@@search\').results(query=q)\n+        view = portal.restrictedTraverse(\'@@search\')\n+        self.assertEqual(view.default_sort_on, \'Date\')\n+        res = view.results(query=q)\n         ids = [r.getId() for r in res]\n         expected = [\n             \'my-page11\', \'my-page10\', \'my-page9\', \'my-page8\', \'my-page7\',\n@@ -203,7 +207,9 @@ def test_default_search_order_alphabetic(self):\n         search_settings = registry.forInterface(ISearchSchema, prefix="plone")\n         search_settings.sort_on = \'sortable_title\'\n         q = {\'SearchableText\': \'spam\'}\n-        res = portal.restrictedTraverse(\'@@search\').results(query=q)\n+        view = portal.restrictedTraverse(\'@@search\')\n+        self.assertEqual(view.default_sort_on, \'sortable_title\')\n+        res = view.results(query=q)\n         ids = [r.getId() for r in res]\n         expected = [\n             \'my-page0\', \'my-page1\', \'my-page2\', \'my-page3\', \'my-page4\',\ndiff --git a/news/2854.bugfix b/news/2854.bugfix\nnew file mode 100644\nindex 000000000..4abf29a35\n--- /dev/null\n+++ b/news/2854.bugfix\n@@ -0,0 +1 @@\n+Always add ``data-default-sort`` attribute to search results.  [maurits]\n'

