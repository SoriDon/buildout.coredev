Repository: plone.volto


Branch: refs/heads/main
Date: 2022-04-13T10:49:32+02:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.volto/commit/19f504fc1ad37f5ddec76a32ae0fe10e8f8ad52d

Update test to 6.0.0a4 and new pip practices

Files changed:
A news/51.bugfix
M .github/workflows/black.yml
M .github/workflows/flake8.yml
M .gitignore
M Makefile
M plone-6.0.x.cfg

b'diff --git a/.github/workflows/black.yml b/.github/workflows/black.yml\nindex 9b23c02..76a84b6 100644\n--- a/.github/workflows/black.yml\n+++ b/.github/workflows/black.yml\n@@ -1,3 +1,4 @@\n+\n name: Black\n on: [push]\n jobs:\n@@ -25,7 +26,6 @@ jobs:\n           key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n           restore-keys: |\n             ${{ runner.os }}-pip-\n-\n       # install black\n       - name: install black\n         run: pip install black\ndiff --git a/.github/workflows/flake8.yml b/.github/workflows/flake8.yml\nindex 97c7dfa..ee3985d 100644\n--- a/.github/workflows/flake8.yml\n+++ b/.github/workflows/flake8.yml\n@@ -25,11 +25,10 @@ jobs:\n           key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n           restore-keys: |\n             ${{ runner.os }}-pip-\n-\n       # install flake8\n       - name: install flake8\n-        run: pip install flake8\n+        run: pip install flakeheaven\n \n       # run black\n       - name: run flake8\n-        run: flake8 src/ setup.py\n+        run: flakeheaven lint src/ setup.py\ndiff --git a/.gitignore b/.gitignore\nindex 84b425a..1292b60 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -11,6 +11,7 @@ bin/\n buildout-cache/\n develop-eggs/\n eggs/\n+etc/\n htmlcov/\n include/\n lib/\n@@ -36,3 +37,4 @@ report.html\n !.travis.yml\n pyvenv.cfg\n extras\n+inituser\ndiff --git a/Makefile b/Makefile\nindex 46483d7..278bc7c 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -1,9 +1,12 @@\n-# keep in sync with: https://github.com/kitconcept/buildout/edit/master/Makefile\n-# update by running \'make update\'\n-SHELL := /bin/bash\n-CURRENT_DIR:=$(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))\n-\n-version = 3\n+### Defensive settings for make:\n+#     https://tech.davis-hansson.com/p/make/\n+SHELL:=bash\n+.ONESHELL:\n+.SHELLFLAGS:=-xeu -o pipefail -O inherit_errexit -c\n+.SILENT:\n+.DELETE_ON_ERROR:\n+MAKEFLAGS+=--warn-undefined-variables\n+MAKEFLAGS+=--no-builtin-rules\n \n # We like colors\n # From: https://coderwall.com/p/izxssa/colored-makefile-for-golang-projects\n@@ -12,7 +15,12 @@ GREEN=`tput setaf 2`\n RESET=`tput sgr0`\n YELLOW=`tput setaf 3`\n \n-all: .installed.cfg\n+PLONE5=5.2.7\n+PLONE6=6.0.0a4\n+\n+PACKAGE_NAME=kitconcept.contentcreator\n+PACKAGE_PATH=src/\n+CHECK_PATH=setup.py $(PACKAGE_PATH)\n \n # Add the following \'help\' target to your Makefile\n # And add help text after each target name starting with \'\\#\\#\'\n@@ -20,72 +28,73 @@ all: .installed.cfg\n help: ## This help message\n \t@grep -E \'^[a-zA-Z_-]+:.*?## .*$$\' $(MAKEFILE_LIST) | sort | awk \'BEGIN {FS = ":.*?## "}; {printf "\\033[36m%-30s\\033[0m %s\\n", $$1, $$2}\'\n \n-.PHONY: Update Makefile and Buildout\n-update: ## Update Make and Buildout\n-\twget -O Makefile https://raw.githubusercontent.com/kitconcept/buildout/master/Makefile\n-\twget -O requirements.txt https://raw.githubusercontent.com/kitconcept/buildout/master/requirements.txt\n-\twget -O plone-4.3.x.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/plone-4.3.x.cfg\n-\twget -O plone-5.1.x.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/plone-5.1.x.cfg\n-\twget -O plone-5.2.x.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/plone-5.2.x.cfg\n-\twget -O travis.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/travis.cfg\n-\twget -O versions.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/versions.cfg\n-\n-.installed.cfg: bin/buildout *.cfg\n-\tbin/buildout\n-\n-bin/buildout: bin/pip\n-\tbin/pip install --upgrade pip\n-\tbin/pip install -r requirements.txt\n-\t@touch -c $@\n-\n-bin/python bin/pip:\n-\tpython$(version) -m venv . || virtualenv --clear --python=python$(version) .\n-\n-\n-.PHONY: Build Plone 5.2\n-build: .installed.cfg  ## Build Plone 5.2\n-\tbin/pip install --upgrade pip\n-\tbin/pip install -r requirements.txt\n-\tbin/buildout\n-\n-.PHONY: Build Plone 6.0\n-build-plone-6.0:  bin/pip ## Build Plone 6.0\n-\tbin/pip install --upgrade pip\n-\tbin/pip install -r https://dist.plone.org/release/6.0.0a2/requirements.txt\n-\tbin/buildout -c plone-6.0.x.cfg\n-\n-.PHONY: Test\n-test:  ## Test\n-\tbin/test\n-\n-.PHONY: Test Performance\n-test-performance:\n-\tjmeter -n -t performance.jmx -l jmeter.jtl\n-\n-.PHONY: Code Analysis\n-code-analysis:  ## Code Analysis\n-\tbin/code-analysis\n-\tif [ -f "bin/black" ]; then bin/black src/ --check ; fi\n-\n-.PHONY: Black\n-black:  ## Black\n-\tbin/code-analysis\n-\tif [ -f "bin/black" ]; then bin/black src/ ; fi\n-\n-.PHONY: Build Docs\n-docs:  ## Build Docs\n-\tbin/sphinxbuilder\n-\n-.PHONY: Test Release\n-test-release:  ## Run Pyroma and Check Manifest\n-\tbin/pyroma -n 10 -d .\n-\n-.PHONY: Release\n-release:  ## Release\n-\tbin/fullrelease\n-\n-.PHONY: Clean\n-clean:  ## Clean\n-\tgit clean -Xdf\n-\n-.PHONY: all clean\n+bin/pip:\n+\t@echo "$(GREEN)==> Setup Virtual Env$(RESET)"\n+\tpython3 -m venv .\n+\tbin/pip install -U pip wheel\n+\n+bin/black:\n+\tbin/pip install black\n+\n+bin/isort:\n+\tbin/pip install isort\n+\n+bin/flakeheaven:\n+\tbin/pip install flakeheaven\n+\n+.PHONY: build-plone-5.2\n+build-plone-5.2: bin/pip ## Build Plone 5.2\n+\t@echo "$(GREEN)==> Build with Plone 5.2$(RESET)"\n+\tbin/pip install Plone plone.app.testing -c https://dist.plone.org/release/$(PLONE5)/constraints.txt\n+\tbin/pip install -e ".[test]"\n+\tbin/mkwsgiinstance -d . -u admin:admin\n+\n+.PHONY: build-plone-6.0\n+build-plone-6.0: bin/pip ## Build Plone 6.0\n+\t@echo "$(GREEN)==> Build with Plone 6.0$(RESET)"\n+\tbin/pip install Plone plone.app.testing -c https://dist.plone.org/release/$(PLONE6)/constraints.txt\n+\tbin/pip install -e ".[test]"\n+\tbin/mkwsgiinstance -d . -u admin:admin\n+\n+.PHONY: build\n+build: build-plone-6.0 ## Build Plone 6.0\n+\n+.PHONY: clean\n+clean: ## Remove old virtualenv and creates a new one\n+\t@echo "$(RED)==> Cleaning environment and build$(RESET)"\n+\trm -rf bin lib lib64 include share etc var inituser pyvenv.cfg .installed.cfg\n+\n+.PHONY: black\n+black: bin/black ## Format codebase\n+\t./bin/black $(CHECK_PATH)\n+\n+.PHONY: isort\n+isort: bin/isort ## Format imports in the codebase\n+\t./bin/isort $(CHECK_PATH)\n+\n+.PHONY: format\n+format: black isort ## Format the codebase according to our standards\n+\n+.PHONY: lint\n+lint: lint-isort lint-black lint-flake8 ## check style with flake8\n+\n+.PHONY: lint-flake8\n+lint-flake8: bin/flakeheaven ## validate black formating\n+\t./bin/flakeheaven lint $(CHECK_PATH)\n+\n+\n+.PHONY: lint-black\n+lint-black: bin/black ## validate black formating\n+\t./bin/black --check --diff $(CHECK_PATH)\n+\n+.PHONY: lint-isort\n+lint-isort: bin/isort ## validate using isort\n+\t./bin/isort --check-only $(CHECK_PATH)\n+\n+.PHONY: test\n+test: ## run tests\n+\tPYTHONWARNINGS=ignore ./bin/zope-testrunner --auto-color --auto-progress --test-path $(PACKAGE_PATH)\n+\n+.PHONY: start\n+start: ## Start a Plone instance on localhost:8080\n+\tPYTHONWARNINGS=ignore ./bin/runwsgi etc/zope.ini\ndiff --git a/news/51.bugfix b/news/51.bugfix\nnew file mode 100644\nindex 0000000..a7f2e9e\n--- /dev/null\n+++ b/news/51.bugfix\n@@ -0,0 +1,2 @@\n+Update test to 6.0.0a4 and new pip practices\n+[sneridagh]\ndiff --git a/plone-6.0.x.cfg b/plone-6.0.x.cfg\nindex 351f975..114b86f 100644\n--- a/plone-6.0.x.cfg\n+++ b/plone-6.0.x.cfg\n@@ -1,11 +1,8 @@\n [buildout]\n extends =\n-    https://dist.plone.org/release/6.0.0a2/versions.cfg\n+    https://dist.plone.org/release/6.0.0a4/versions.cfg\n     base.cfg\n \n-find-links += https://dist.plone.org/release/6.0.0a2/\n-\n-\n [instance]\n recipe = plone.recipe.zope2instance\n zodb-temporary-storage = off\n@@ -16,4 +13,4 @@ black = 21.7b0\n \n # cffi 1.14.3 fails on apple m1\n # cffi 1.14.4 fails with "ModuleNotFoundError: No module named \'_cffi_backend\'"\n-cffi = 1.14.6\n\\ No newline at end of file\n+cffi = 1.14.6\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2022-04-19T15:07:35-03:00
Author: Érico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.volto/commit/2a7228d85a412da16ceb786600ee211bebfd2380

Fix package name in Makefile

Files changed:
M Makefile

b'diff --git a/Makefile b/Makefile\nindex 278bc7c..a5d9718 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -18,7 +18,7 @@ YELLOW=`tput setaf 3`\n PLONE5=5.2.7\n PLONE6=6.0.0a4\n \n-PACKAGE_NAME=kitconcept.contentcreator\n+PACKAGE_NAME=plone.volto\n PACKAGE_PATH=src/\n CHECK_PATH=setup.py $(PACKAGE_PATH)\n \n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2022-04-19T16:28:08-03:00
Author: Érico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.volto/commit/44bcac8b1aa6d1fea83fd9a156417434acb51b2b

Merge pull request #52 from plone/pipimprovements

Update test to 6.0.0a4 and new pip practices

Files changed:
A news/51.bugfix
M .github/workflows/black.yml
M .github/workflows/flake8.yml
M .gitignore
M Makefile
M plone-6.0.x.cfg

b'diff --git a/.github/workflows/black.yml b/.github/workflows/black.yml\nindex 9b23c02..76a84b6 100644\n--- a/.github/workflows/black.yml\n+++ b/.github/workflows/black.yml\n@@ -1,3 +1,4 @@\n+\n name: Black\n on: [push]\n jobs:\n@@ -25,7 +26,6 @@ jobs:\n           key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n           restore-keys: |\n             ${{ runner.os }}-pip-\n-\n       # install black\n       - name: install black\n         run: pip install black\ndiff --git a/.github/workflows/flake8.yml b/.github/workflows/flake8.yml\nindex 97c7dfa..ee3985d 100644\n--- a/.github/workflows/flake8.yml\n+++ b/.github/workflows/flake8.yml\n@@ -25,11 +25,10 @@ jobs:\n           key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n           restore-keys: |\n             ${{ runner.os }}-pip-\n-\n       # install flake8\n       - name: install flake8\n-        run: pip install flake8\n+        run: pip install flakeheaven\n \n       # run black\n       - name: run flake8\n-        run: flake8 src/ setup.py\n+        run: flakeheaven lint src/ setup.py\ndiff --git a/.gitignore b/.gitignore\nindex 84b425a..1292b60 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -11,6 +11,7 @@ bin/\n buildout-cache/\n develop-eggs/\n eggs/\n+etc/\n htmlcov/\n include/\n lib/\n@@ -36,3 +37,4 @@ report.html\n !.travis.yml\n pyvenv.cfg\n extras\n+inituser\ndiff --git a/Makefile b/Makefile\nindex 46483d7..a5d9718 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -1,9 +1,12 @@\n-# keep in sync with: https://github.com/kitconcept/buildout/edit/master/Makefile\n-# update by running \'make update\'\n-SHELL := /bin/bash\n-CURRENT_DIR:=$(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))\n-\n-version = 3\n+### Defensive settings for make:\n+#     https://tech.davis-hansson.com/p/make/\n+SHELL:=bash\n+.ONESHELL:\n+.SHELLFLAGS:=-xeu -o pipefail -O inherit_errexit -c\n+.SILENT:\n+.DELETE_ON_ERROR:\n+MAKEFLAGS+=--warn-undefined-variables\n+MAKEFLAGS+=--no-builtin-rules\n \n # We like colors\n # From: https://coderwall.com/p/izxssa/colored-makefile-for-golang-projects\n@@ -12,7 +15,12 @@ GREEN=`tput setaf 2`\n RESET=`tput sgr0`\n YELLOW=`tput setaf 3`\n \n-all: .installed.cfg\n+PLONE5=5.2.7\n+PLONE6=6.0.0a4\n+\n+PACKAGE_NAME=plone.volto\n+PACKAGE_PATH=src/\n+CHECK_PATH=setup.py $(PACKAGE_PATH)\n \n # Add the following \'help\' target to your Makefile\n # And add help text after each target name starting with \'\\#\\#\'\n@@ -20,72 +28,73 @@ all: .installed.cfg\n help: ## This help message\n \t@grep -E \'^[a-zA-Z_-]+:.*?## .*$$\' $(MAKEFILE_LIST) | sort | awk \'BEGIN {FS = ":.*?## "}; {printf "\\033[36m%-30s\\033[0m %s\\n", $$1, $$2}\'\n \n-.PHONY: Update Makefile and Buildout\n-update: ## Update Make and Buildout\n-\twget -O Makefile https://raw.githubusercontent.com/kitconcept/buildout/master/Makefile\n-\twget -O requirements.txt https://raw.githubusercontent.com/kitconcept/buildout/master/requirements.txt\n-\twget -O plone-4.3.x.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/plone-4.3.x.cfg\n-\twget -O plone-5.1.x.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/plone-5.1.x.cfg\n-\twget -O plone-5.2.x.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/plone-5.2.x.cfg\n-\twget -O travis.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/travis.cfg\n-\twget -O versions.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/versions.cfg\n-\n-.installed.cfg: bin/buildout *.cfg\n-\tbin/buildout\n-\n-bin/buildout: bin/pip\n-\tbin/pip install --upgrade pip\n-\tbin/pip install -r requirements.txt\n-\t@touch -c $@\n-\n-bin/python bin/pip:\n-\tpython$(version) -m venv . || virtualenv --clear --python=python$(version) .\n-\n-\n-.PHONY: Build Plone 5.2\n-build: .installed.cfg  ## Build Plone 5.2\n-\tbin/pip install --upgrade pip\n-\tbin/pip install -r requirements.txt\n-\tbin/buildout\n-\n-.PHONY: Build Plone 6.0\n-build-plone-6.0:  bin/pip ## Build Plone 6.0\n-\tbin/pip install --upgrade pip\n-\tbin/pip install -r https://dist.plone.org/release/6.0.0a2/requirements.txt\n-\tbin/buildout -c plone-6.0.x.cfg\n-\n-.PHONY: Test\n-test:  ## Test\n-\tbin/test\n-\n-.PHONY: Test Performance\n-test-performance:\n-\tjmeter -n -t performance.jmx -l jmeter.jtl\n-\n-.PHONY: Code Analysis\n-code-analysis:  ## Code Analysis\n-\tbin/code-analysis\n-\tif [ -f "bin/black" ]; then bin/black src/ --check ; fi\n-\n-.PHONY: Black\n-black:  ## Black\n-\tbin/code-analysis\n-\tif [ -f "bin/black" ]; then bin/black src/ ; fi\n-\n-.PHONY: Build Docs\n-docs:  ## Build Docs\n-\tbin/sphinxbuilder\n-\n-.PHONY: Test Release\n-test-release:  ## Run Pyroma and Check Manifest\n-\tbin/pyroma -n 10 -d .\n-\n-.PHONY: Release\n-release:  ## Release\n-\tbin/fullrelease\n-\n-.PHONY: Clean\n-clean:  ## Clean\n-\tgit clean -Xdf\n-\n-.PHONY: all clean\n+bin/pip:\n+\t@echo "$(GREEN)==> Setup Virtual Env$(RESET)"\n+\tpython3 -m venv .\n+\tbin/pip install -U pip wheel\n+\n+bin/black:\n+\tbin/pip install black\n+\n+bin/isort:\n+\tbin/pip install isort\n+\n+bin/flakeheaven:\n+\tbin/pip install flakeheaven\n+\n+.PHONY: build-plone-5.2\n+build-plone-5.2: bin/pip ## Build Plone 5.2\n+\t@echo "$(GREEN)==> Build with Plone 5.2$(RESET)"\n+\tbin/pip install Plone plone.app.testing -c https://dist.plone.org/release/$(PLONE5)/constraints.txt\n+\tbin/pip install -e ".[test]"\n+\tbin/mkwsgiinstance -d . -u admin:admin\n+\n+.PHONY: build-plone-6.0\n+build-plone-6.0: bin/pip ## Build Plone 6.0\n+\t@echo "$(GREEN)==> Build with Plone 6.0$(RESET)"\n+\tbin/pip install Plone plone.app.testing -c https://dist.plone.org/release/$(PLONE6)/constraints.txt\n+\tbin/pip install -e ".[test]"\n+\tbin/mkwsgiinstance -d . -u admin:admin\n+\n+.PHONY: build\n+build: build-plone-6.0 ## Build Plone 6.0\n+\n+.PHONY: clean\n+clean: ## Remove old virtualenv and creates a new one\n+\t@echo "$(RED)==> Cleaning environment and build$(RESET)"\n+\trm -rf bin lib lib64 include share etc var inituser pyvenv.cfg .installed.cfg\n+\n+.PHONY: black\n+black: bin/black ## Format codebase\n+\t./bin/black $(CHECK_PATH)\n+\n+.PHONY: isort\n+isort: bin/isort ## Format imports in the codebase\n+\t./bin/isort $(CHECK_PATH)\n+\n+.PHONY: format\n+format: black isort ## Format the codebase according to our standards\n+\n+.PHONY: lint\n+lint: lint-isort lint-black lint-flake8 ## check style with flake8\n+\n+.PHONY: lint-flake8\n+lint-flake8: bin/flakeheaven ## validate black formating\n+\t./bin/flakeheaven lint $(CHECK_PATH)\n+\n+\n+.PHONY: lint-black\n+lint-black: bin/black ## validate black formating\n+\t./bin/black --check --diff $(CHECK_PATH)\n+\n+.PHONY: lint-isort\n+lint-isort: bin/isort ## validate using isort\n+\t./bin/isort --check-only $(CHECK_PATH)\n+\n+.PHONY: test\n+test: ## run tests\n+\tPYTHONWARNINGS=ignore ./bin/zope-testrunner --auto-color --auto-progress --test-path $(PACKAGE_PATH)\n+\n+.PHONY: start\n+start: ## Start a Plone instance on localhost:8080\n+\tPYTHONWARNINGS=ignore ./bin/runwsgi etc/zope.ini\ndiff --git a/news/51.bugfix b/news/51.bugfix\nnew file mode 100644\nindex 0000000..a7f2e9e\n--- /dev/null\n+++ b/news/51.bugfix\n@@ -0,0 +1,2 @@\n+Update test to 6.0.0a4 and new pip practices\n+[sneridagh]\ndiff --git a/plone-6.0.x.cfg b/plone-6.0.x.cfg\nindex 351f975..114b86f 100644\n--- a/plone-6.0.x.cfg\n+++ b/plone-6.0.x.cfg\n@@ -1,11 +1,8 @@\n [buildout]\n extends =\n-    https://dist.plone.org/release/6.0.0a2/versions.cfg\n+    https://dist.plone.org/release/6.0.0a4/versions.cfg\n     base.cfg\n \n-find-links += https://dist.plone.org/release/6.0.0a2/\n-\n-\n [instance]\n recipe = plone.recipe.zope2instance\n zodb-temporary-storage = off\n@@ -16,4 +13,4 @@ black = 21.7b0\n \n # cffi 1.14.3 fails on apple m1\n # cffi 1.14.4 fails with "ModuleNotFoundError: No module named \'_cffi_backend\'"\n-cffi = 1.14.6\n\\ No newline at end of file\n+cffi = 1.14.6\n'

