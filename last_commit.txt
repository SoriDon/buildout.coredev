Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-09-15T10:50:55-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/32200f878c70530e33aabc7d68a242bd91468223

Revert 1488 (#1491)

* Revert "Validate the id in the content POST service (#1488)"

This reverts commit 86a874bae719d4a14dc34e7a07b3255a7eeed577.

* changelog

* fix test

Files changed:
A news/1488.bugfix
M src/plone/restapi/services/content/add.py
M src/plone/restapi/services/content/utils.py
M src/plone/restapi/tests/http-examples/translated_messages_addons.resp
M src/plone/restapi/tests/test_content_post.py

b'diff --git a/news/1488.bugfix b/news/1488.bugfix\nnew file mode 100644\nindex 000000000..a541f4024\n--- /dev/null\n+++ b/news/1488.bugfix\n@@ -0,0 +1,4 @@\n+- Revert "When an id is specified explicitly in the content POST endpoint,\n+  return a 400 error response if it is invalid or unavailable."\n+  The fix was incorrect and disallowing ids that should be allowed.\n+  [davisagli]\ndiff --git a/src/plone/restapi/services/content/add.py b/src/plone/restapi/services/content/add.py\nindex 11bc6742b..cadedb991 100644\n--- a/src/plone/restapi/services/content/add.py\n+++ b/src/plone/restapi/services/content/add.py\n@@ -90,11 +90,7 @@ def reply(self):\n         if not getattr(deserializer, "notifies_create", False):\n             notify(ObjectCreatedEvent(obj))\n \n-        try:\n-            obj = add(self.context, obj, rename=not bool(id_))\n-        except ValueError as e:\n-            self.request.response.setStatus(400)\n-            return dict(error=dict(type="ValueError", message=str(e)))\n+        obj = add(self.context, obj, rename=not bool(id_))\n \n         # Link translation given the translation_of property\n         if (\ndiff --git a/src/plone/restapi/services/content/utils.py b/src/plone/restapi/services/content/utils.py\nindex 34881eb8d..beb23b98e 100644\n--- a/src/plone/restapi/services/content/utils.py\n+++ b/src/plone/restapi/services/content/utils.py\n@@ -70,19 +70,19 @@ def create(container, type_, id_=None, title=None):\n \n def add(container, obj, rename=True):\n     """Add an object to a container."""\n-    old_id = getattr(aq_base(obj), "id", None)\n+    id_ = getattr(aq_base(obj), "id", None)\n \n     # Archetypes objects are already created in a container thus we just fire\n     # the notification events and rename the object if necessary.\n     if base_hasattr(obj, "_at_rename_after_creation"):\n-        notify(ObjectAddedEvent(obj, container, old_id))\n+        notify(ObjectAddedEvent(obj, container, id_))\n         notifyContainerModified(container)\n         if obj._at_rename_after_creation and rename:\n             obj._renameAfterCreation(check_auto_id=True)\n         return obj\n     else:\n-        chooser = INameChooser(container)\n         if rename:\n+            chooser = INameChooser(container)\n             # INameFromTitle adaptable objects should not get a name\n             # suggestion. NameChooser would prefer the given name instead of\n             # the one provided by the INameFromTitle adapter.\n@@ -90,12 +90,8 @@ def add(container, obj, rename=True):\n             name_from_title = INameFromTitle(obj, None)\n             if name_from_title is None:\n                 suggestion = obj.Title()\n-        else:\n-            suggestion = old_id\n-        id_ = chooser.chooseName(suggestion, obj)\n-        if not rename and id_ != old_id:\n-            raise ValueError(f"id is invalid or already used: {old_id}")\n-        obj.id = id_\n+            id_ = chooser.chooseName(suggestion, obj)\n+            obj.id = id_\n         new_id = container._setObject(id_, obj)\n         # _setObject triggers ObjectAddedEvent which can end up triggering a\n         # content rule to move the item to a different container. In this case\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_addons.resp b/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\nindex ea6bce610..fd47c3f6e 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\n@@ -73,7 +73,7 @@ Content-Type: application/json\n                 "newVersion": "0006",\n                 "required": false\n             },\n-            "version": "8.26.1.dev0"\n+            "version": "8.27.1.dev0"\n         },\n         {\n             "@id": "http://localhost:55001/plone/@addons/plone.session",\ndiff --git a/src/plone/restapi/tests/test_content_post.py b/src/plone/restapi/tests/test_content_post.py\nindex 57d38ef2a..7958821c8 100644\n--- a/src/plone/restapi/tests/test_content_post.py\n+++ b/src/plone/restapi/tests/test_content_post.py\n@@ -139,27 +139,7 @@ def test_post_without_id_creates_id_from_filename(self):\n         transaction.begin()\n         self.assertIn("test.txt", self.portal.folder1)\n \n-    def test_post_with_explicit_file_id_allows_dots(self):\n-        response = requests.post(\n-            self.portal.folder1.absolute_url(),\n-            headers={"Accept": "application/json"},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                "@type": "File",\n-                "title": "My File",\n-                "file": {\n-                    "filename": "test.txt",\n-                    "data": "Spam and Eggs",\n-                    "content_type": "text/plain",\n-                },\n-                "id": "custom.txt",\n-            },\n-        )\n-        self.assertEqual(201, response.status_code)\n-        transaction.begin()\n-        self.assertIn("custom.txt", self.portal.folder1)\n-\n-    def test_post_with_id_already_in_use_returns_validation_error(self):\n+    def test_post_with_id_already_in_use_returns_400(self):\n         self.portal.folder1.invokeFactory("Document", "mydocument")\n         transaction.commit()\n         response = requests.post(\n@@ -169,49 +149,6 @@ def test_post_with_id_already_in_use_returns_validation_error(self):\n             json={"@type": "Document", "id": "mydocument", "title": "My Document"},\n         )\n         self.assertEqual(400, response.status_code)\n-        self.assertEqual(\n-            "id is invalid or already used: mydocument",\n-            response.json().get("error").get("message"),\n-        )\n-\n-    def test_post_with_invalid_id_chars_returns_validation_error(self):\n-        response = requests.post(\n-            self.portal.folder1.absolute_url(),\n-            headers={"Accept": "application/json"},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={"@type": "Document", "id": "my document", "title": "My Document"},\n-        )\n-        self.assertEqual(400, response.status_code)\n-        self.assertEqual(\n-            "id is invalid or already used: my document",\n-            response.json().get("error").get("message"),\n-        )\n-\n-    def test_post_with_reserved_id_returns_validation_error(self):\n-        # Some short names are reserved to avoid colliding with field names, etc\n-        response = requests.post(\n-            self.portal.folder1.absolute_url(),\n-            headers={"Accept": "application/json"},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={"@type": "Document", "id": "layout", "title": "My Document"},\n-        )\n-        self.assertEqual(400, response.status_code)\n-        self.assertEqual(\n-            "id is invalid or already used: layout",\n-            response.json().get("error").get("message"),\n-        )\n-\n-    def test_post_with_empty_id_creates_id_from_title(self):\n-        # spaces in id get replaced with dashes\n-        response = requests.post(\n-            self.portal.folder1.absolute_url(),\n-            headers={"Accept": "application/json"},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={"@type": "Document", "id": "", "title": "My Document"},\n-        )\n-        self.assertEqual(201, response.status_code)\n-        transaction.begin()\n-        self.assertIn("my-document", self.portal.folder1)\n \n     def test_post_to_folder_returns_401_unauthorized(self):\n         response = requests.post(\n'

