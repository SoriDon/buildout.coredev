Repository: plone.volto


Branch: refs/heads/main
Date: 2023-01-12T08:43:10+01:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.volto/commit/7d87a3f821182336ef3724b64e9ef5b784be9d24

Retrieve internal links from nested blocks (#108)

* retrieve internal links from nested blocks

* changelog

* fix tests

* update test matrix

* fix tests when we don't have recent fixes from plone.restapi

Files changed:
A news/108.bugfix
A src/plone/volto/linkintegrity.py
A src/plone/volto/tests/test_linkintegrity.py
M .github/workflows/tests.yml
M plone-5.2.x.cfg
M plone-6.0.x.cfg
M src/plone/volto/configure.zcml
M src/plone/volto/tests/test_preview_link_behavior.py

b'diff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nindex 946af2c6..d8dc1094 100644\n--- a/.github/workflows/tests.yml\n+++ b/.github/workflows/tests.yml\n@@ -6,15 +6,17 @@ jobs:\n     strategy:\n       fail-fast: false\n       matrix:\n-        python: [3.7, 3.8, 3.9, "3.10"]\n-        plone: ["6.0.0b3", "5.2.9"]\n+        python: [3.7, 3.8, 3.9, "3.10", "3.11"]\n+        plone: ["6.0.0", "5.2.10"]\n         exclude:\n-          - plone: "6.0.0b3"\n+          - plone: "6.0.0"\n             python: 3.7\n-          - plone: "5.2.9"\n+          - plone: "5.2.10"\n             python: 3.9\n-          - plone: "5.2.9"\n+          - plone: "5.2.10"\n             python: "3.10"\n+          - plone: "5.2.10"\n+            python: "3.11"\n \n     steps:\n       # git checkout\ndiff --git a/news/108.bugfix b/news/108.bugfix\nnew file mode 100644\nindex 00000000..c6960b0a\n--- /dev/null\n+++ b/news/108.bugfix\n@@ -0,0 +1 @@\n+Include internal links from nested blocks in link integrity recordkeeping. [davisagli]\ndiff --git a/plone-5.2.x.cfg b/plone-5.2.x.cfg\nindex 220a2d58..82926b3a 100644\n--- a/plone-5.2.x.cfg\n+++ b/plone-5.2.x.cfg\n@@ -1,7 +1,7 @@\n [buildout]\n extends =\n     base.cfg\n-    http://dist.plone.org/release/5.2.9/versions.cfg\n+    http://dist.plone.org/release/5.2.10/versions.cfg\n find-links += http://dist.plone.org/thirdparty/\n \n [versions]\ndiff --git a/plone-6.0.x.cfg b/plone-6.0.x.cfg\nindex 554cd35e..2ef8a1bd 100644\n--- a/plone-6.0.x.cfg\n+++ b/plone-6.0.x.cfg\n@@ -1,6 +1,6 @@\n [buildout]\n extends =\n-    https://dist.plone.org/release/6.0.0b3/versions.cfg\n+    https://dist.plone.org/release/6.0.0/versions.cfg\n     base.cfg\n \n [instance]\ndiff --git a/src/plone/volto/configure.zcml b/src/plone/volto/configure.zcml\nindex 6916c533..84dec901 100644\n--- a/src/plone/volto/configure.zcml\n+++ b/src/plone/volto/configure.zcml\n@@ -92,6 +92,11 @@\n         factory=".transforms.PreviewImageResolveUIDSerializerRoot"\n         provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"\n         />\n+\n+    <subscriber\n+        factory=".linkintegrity.NestedBlockLinkRetriever"\n+        provides="plone.restapi.interfaces.IBlockFieldLinkIntegrityRetriever"\n+        />\n   </configure>\n \n </configure>\ndiff --git a/src/plone/volto/linkintegrity.py b/src/plone/volto/linkintegrity.py\nnew file mode 100644\nindex 00000000..9520602e\n--- /dev/null\n+++ b/src/plone/volto/linkintegrity.py\n@@ -0,0 +1,47 @@\n+from plone.restapi.behaviors import IBlocks\n+from plone.restapi.interfaces import IBlockFieldLinkIntegrityRetriever\n+from zope.component import adapter\n+from zope.component import subscribers\n+from zope.interface import implementer\n+from zope.publisher.interfaces.browser import IBrowserRequest\n+\n+\n+@adapter(IBlocks, IBrowserRequest)\n+@implementer(IBlockFieldLinkIntegrityRetriever)\n+class NestedBlockLinkRetriever:\n+    """Retrieve internal links from nested blocks.\n+\n+    Handles the same keys as the resolveuid transform\n+    (columns, hrefList, and slides)\n+    """\n+\n+    order = 2\n+    block_type = None  # any block type\n+\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def __call__(self, block):\n+        links = set()\n+        for nested_name in ("columns", "hrefList", "slides"):\n+            nested_blocks = block.get(nested_name, [])\n+            if not isinstance(nested_blocks, list):\n+                continue\n+            for nested_block in nested_blocks:\n+                links |= self.retrieveLinks(nested_block)\n+        return links\n+\n+    def retrieveLinks(self, block):\n+        links = set()\n+        block_type = block.get("@type", None)\n+        handlers = []\n+        for h in subscribers(\n+            (self.context, self.request),\n+            IBlockFieldLinkIntegrityRetriever,\n+        ):\n+            if h.block_type == block_type or h.block_type is None:\n+                handlers.append(h)\n+        for handler in sorted(handlers, key=lambda h: h.order):\n+            links |= set(handler(block))\n+        return links\ndiff --git a/src/plone/volto/tests/test_linkintegrity.py b/src/plone/volto/tests/test_linkintegrity.py\nnew file mode 100644\nindex 00000000..a2ea0032\n--- /dev/null\n+++ b/src/plone/volto/tests/test_linkintegrity.py\n@@ -0,0 +1,80 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.linkintegrity.interfaces import IRetriever\n+from plone.uuid.interfaces import IUUID\n+from plone.volto.testing import PLONE_VOLTO_CORE_INTEGRATION_TESTING\n+from unittest import TestCase\n+\n+\n+class TestBlocksLinkintegrity(TestCase):\n+    layer = PLONE_VOLTO_CORE_INTEGRATION_TESTING\n+    maxDiff = None\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory(\n+                "Document", id="doc1", title="Document with Blocks"\n+            )\n+        ]\n+        self.doc2 = self.portal[\n+            self.portal.invokeFactory("Document", id="doc2", title="Target Document")\n+        ]\n+\n+    def retrieve_links(self, value):\n+        retriever = IRetriever(self.portal.doc1)\n+        return retriever.retrieveLinks()\n+\n+    def test_links_retriever_return_internal_links_in_nested_columns(self):\n+        uid = IUUID(self.doc2)\n+        blocks = {\n+            "111": {\n+                "@type": "__grid",\n+                "columns": [\n+                    {\n+                        "@type": "teaser",\n+                        "href": f"../resolveuid/{uid}",\n+                    }\n+                ],\n+            },\n+        }\n+        self.portal.doc1.blocks = blocks\n+        value = self.retrieve_links(blocks)\n+\n+        self.assertEqual(len(value), 1)\n+        self.assertIn(f"../resolveuid/{uid}", value)\n+\n+    def test_links_retriever_return_internal_links_in_nested_hrefList(self):\n+        uid = IUUID(self.doc2)\n+        blocks = {\n+            "111": {\n+                "hrefList": [\n+                    {\n+                        "href": f"../resolveuid/{uid}",\n+                    }\n+                ],\n+            },\n+        }\n+        self.portal.doc1.blocks = blocks\n+        value = self.retrieve_links(blocks)\n+\n+        self.assertEqual(len(value), 1)\n+        self.assertIn(f"../resolveuid/{uid}", value)\n+\n+    def test_links_retriever_return_internal_links_in_nested_slides(self):\n+        uid = IUUID(self.doc2)\n+        blocks = {\n+            "111": {\n+                "slides": [\n+                    {\n+                        "href": f"../resolveuid/{uid}",\n+                    }\n+                ],\n+            },\n+        }\n+        self.portal.doc1.blocks = blocks\n+        value = self.retrieve_links(blocks)\n+\n+        self.assertEqual(len(value), 1)\n+        self.assertIn(f"../resolveuid/{uid}", value)\ndiff --git a/src/plone/volto/tests/test_preview_link_behavior.py b/src/plone/volto/tests/test_preview_link_behavior.py\nindex 0f6313f8..ff2c4def 100644\n--- a/src/plone/volto/tests/test_preview_link_behavior.py\n+++ b/src/plone/volto/tests/test_preview_link_behavior.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n \n+from plone.dexterity.schema import invalidate_cache\n from plone.namedfile.file import NamedBlobImage\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.volto.testing import PLONE_6\n@@ -32,6 +33,7 @@ def setUp(self):\n \n         fti = self.portal.portal_types.Document\n         fti.behaviors += ("volto.preview_image_link",)\n+        invalidate_cache(fti)\n \n         self.doc = self.portal[self.portal.invokeFactory("Document", id="doc1")]\n         self.image = self.portal[\n'

