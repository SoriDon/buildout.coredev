Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-09T13:50:24+02:00
Author: Bernd Wolber (wolbernd) <b.wolber@fz-juelich.de>
Commit: https://github.com/plone/plone.restapi/commit/dfb88d317460c824fa9a99abbcc9320e2e40bc2b

[docs] fix docs-linkcheckbroken task

Fixes #1421

Files changed:
A news/1421.internal
M Makefile

b'diff --git a/Makefile b/Makefile\nindex 8efb402d7..a5f8faf3c 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -137,7 +137,7 @@ docs-linkcheck: bin/python  ## Run linkcheck\n \n .PHONY: docs-linkcheckbroken\n docs-linkcheckbroken: bin/python  ## Run linkcheck and show only broken links\n-\tcd $(DOCS_DIR) && $(SPHINXBUILD) -b linkcheck $(ALLSPHINXOPTS) $(BUILDDIR)/linkcheck | GREP_COLORS=\'0;31\' egrep -wi broken --color=auto\n+\tcd $(DOCS_DIR) && $(SPHINXBUILD) -b linkcheck $(ALLSPHINXOPTS) $(BUILDDIR)/linkcheck | GREP_COLORS=\'0;31\' egrep -wi broken --color=auto || test $$? = 1\n \t@echo\n \t@echo "Link check complete; look for any errors in the above output " \\\n \t\t"or in $(BUILDDIR)/linkcheck/ ."\ndiff --git a/news/1421.internal b/news/1421.internal\nnew file mode 100644\nindex 000000000..c537502ba\n--- /dev/null\n+++ b/news/1421.internal\n@@ -0,0 +1 @@\n+fixed broken make task linkcheckbroken\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-17T09:15:07+02:00
Author: wolbernd (wolbernd) <wolbernd@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/45b6f144433a4ce85a98e05b3194b104211a0357

Fix news-item

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

Files changed:
M news/1421.internal

b'diff --git a/news/1421.internal b/news/1421.internal\nindex c537502ba..ea3118df3 100644\n--- a/news/1421.internal\n+++ b/news/1421.internal\n@@ -1 +1 @@\n-fixed broken make task linkcheckbroken\n+fixed broken make task docs-linkcheckbroken\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-17T09:22:51+02:00
Author: Bernd Wolber (wolbernd) <b.wolber@fz-juelich.de>
Commit: https://github.com/plone/plone.restapi/commit/7c402c5ef6eb34c9d5eb4fa629258f03fc638fbd

[docs] Include check for broken links in docs

Files changed:
M .github/workflows/tests.yml

b'diff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nindex 9fdf80b32..e1d330251 100644\n--- a/.github/workflows/tests.yml\n+++ b/.github/workflows/tests.yml\n@@ -70,6 +70,6 @@ jobs:\n           PYTHON_VERSION: ${{ matrix.python-version }}\n           PLONE_VERSION: ${{ matrix.plone-version }}\n \n-      # test sphinx warnings\n-#      - name: sphinx\n-#        run: if [ "${{ matrix.plone-version }}" == "5.2" ] && [ ${{ matrix.python-version }} == \'3.7\' ]; then bin/test-no-sphinx-warnings; fi\n+      # test for broken links\n+      - name: linkcheck\n+        run: if [ "${{ matrix.plone-version }}" == "6.0" ] && [ ${{ matrix.python-version }} == \'3.9\' ]; then make docs-linkcheckbroken; fi\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-17T09:24:16+02:00
Author: wolbernd (wolbernd) <wolbernd@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/553a4bbde7303296586ca7b67d8c4f4cfa538836

Merge branch 'master' into master

Files changed:
A news/1414.feature
A src/plone/restapi/tests/test_caching.py
A test-no-sphinx-warnings
A test-no-uncommitted-doc-changes
M .github/workflows/flake8.yml
M .github/workflows/tests.yml
M base.cfg
M setup.py
M src/plone/restapi/configure.zcml
M src/plone/restapi/services/actions/configure.zcml
M src/plone/restapi/services/breadcrumbs/configure.zcml
M src/plone/restapi/services/content/configure.zcml
M src/plone/restapi/services/discussion/configure.zcml
M src/plone/restapi/services/multilingual/configure.zcml
M src/plone/restapi/services/navigation/configure.zcml
M src/plone/restapi/services/querystring/configure.zcml
M src/plone/restapi/services/search/configure.zcml
M src/plone/restapi/testing.py
M versions.cfg
D test-no-sphinx-warnings.in
D test-no-uncommitted-doc-changes.in

b'diff --git a/.github/workflows/flake8.yml b/.github/workflows/flake8.yml\nindex 73f73f091..45dbfae7b 100644\n--- a/.github/workflows/flake8.yml\n+++ b/.github/workflows/flake8.yml\n@@ -28,7 +28,7 @@ jobs:\n \n       # install flake8\n       - name: install flake8\n-        run: pip install flake8\n+        run: pip install flake8==$(awk \'/^flake8 =/{print $NF}\' versions.cfg)\n \n       # run black\n       - name: run flake8\ndiff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nindex e1d330251..2ea1db930 100644\n--- a/.github/workflows/tests.yml\n+++ b/.github/workflows/tests.yml\n@@ -65,11 +65,11 @@ jobs:\n \n       # test no uncommited changes\n       - name: test no uncommited changes\n-        run: bin/test-no-uncommitted-doc-changes\n+        run: ./test-no-uncommitted-doc-changes\n         env:\n           PYTHON_VERSION: ${{ matrix.python-version }}\n           PLONE_VERSION: ${{ matrix.plone-version }}\n \n       # test for broken links\n       - name: linkcheck\n-        run: if [ "${{ matrix.plone-version }}" == "6.0" ] && [ ${{ matrix.python-version }} == \'3.9\' ]; then make docs-linkcheckbroken; fi\n+        run: if [ "${{ matrix.plone-version }}" == "6.0" ] && [ ${{ matrix.python-version }} == \'3.9\' ]; then make docs-linkcheckbroken; fi\n\\ No newline at end of file\ndiff --git a/base.cfg b/base.cfg\nindex 8f22ca372..33f786f8e 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -5,8 +5,6 @@ parts =\n     instance\n     test\n     test-coverage\n-    test-no-uncommitted-doc-changes\n-    test-no-sphinx-warnings\n     code-analysis\n     dependencychecker\n     dependencies\n@@ -87,18 +85,6 @@ input = inline:\n output = ${buildout:directory}/bin/test-coverage\n mode = 755\n \n-[test-no-uncommitted-doc-changes]\n-recipe = collective.recipe.template\n-input = test-no-uncommitted-doc-changes.in\n-output = bin/test-no-uncommitted-doc-changes\n-mode = 755\n-\n-[test-no-sphinx-warnings]\n-recipe = collective.recipe.template\n-input = test-no-sphinx-warnings.in\n-output = bin/test-no-sphinx-warnings\n-mode = 755\n-\n [code-analysis]\n recipe = plone.recipe.codeanalysis\n directory = ${buildout:directory}/src\ndiff --git a/news/1414.feature b/news/1414.feature\nnew file mode 100644\nindex 000000000..e3c8ee64a\n--- /dev/null\n+++ b/news/1414.feature\n@@ -0,0 +1,2 @@\n+Move caching rulesets to the ZCML where the endpoints are defined.\n+[jensens]\ndiff --git a/setup.py b/setup.py\nindex 34fdb2d61..742c7d35f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,11 @@\n \n version = "8.22.1.dev0"\n \n-assert sys.version_info >= (3, 6, 0), "plone.restapi 8 requires Python 3.6.0+. Please downgrade to plone.restapi 7 for Python 2 and Plone 4.3/5.1."\n+assert sys.version_info >= (\n+    3,\n+    6,\n+    0,\n+), "plone.restapi 8 requires Python 3.6.0+. Please downgrade to plone.restapi 7 for Python 2 and Plone 4.3/5.1."\n \n \n def read(filename):\n@@ -34,6 +38,7 @@ def read(filename):\n \n TEST_REQUIRES = [\n     "collective.MockMailHost",\n+    "plone.app.caching",\n     "plone.app.contenttypes",\n     "plone.app.robotframework",\n     "plone.app.testing [robot] >= 4.2.2",  # ROBOT_TEST_LEVEL added\n@@ -82,9 +87,9 @@ def read(filename):\n         "setuptools",\n         "importlib-metadata; python_version<\'3.8\'",\n         "python-dateutil",\n-        "plone.behavior>=1.1",  # adds name to behavior directive\n-        "plone.rest >= 1.0a6",  # json renderer moved to plone.restapi\n-        "plone.schema >= 1.2.1",  # new/fixed json field\n+        "plone.rest",  # json renderer moved to plone.restapi\n+        "plone.schema>=1.2.1",  # new/fixed json field\n+        "Products.CMFPlone>=5.2",\n         "PyJWT>=1.7.0",\n         "pytz",\n     ],\ndiff --git a/src/plone/restapi/configure.zcml b/src/plone/restapi/configure.zcml\nindex 5fcfb0e47..a18da9013 100644\n--- a/src/plone/restapi/configure.zcml\n+++ b/src/plone/restapi/configure.zcml\n@@ -22,6 +22,12 @@\n   <include package="plone.behavior" />\n   <include package="plone.rest" />\n   <include package="plone.schema" />\n+\n+  <include\n+      package="plone.app.caching"\n+      zcml:condition="installed plone.app.caching"\n+      />\n+\n   <include file="indexers.zcml" />\n \n   <five:registerPackage\ndiff --git a/src/plone/restapi/services/actions/configure.zcml b/src/plone/restapi/services/actions/configure.zcml\nindex b716a1a99..042e1e316 100644\n--- a/src/plone/restapi/services/actions/configure.zcml\n+++ b/src/plone/restapi/services/actions/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <adapter\n@@ -15,5 +17,10 @@\n       permission="zope2.View"\n       name="@actions"\n       />\n+  <cache:ruleset\n+      for=".get.ActionsGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/services/breadcrumbs/configure.zcml b/src/plone/restapi/services/breadcrumbs/configure.zcml\nindex 6dde6de78..d8a169b03 100644\n--- a/src/plone/restapi/services/breadcrumbs/configure.zcml\n+++ b/src/plone/restapi/services/breadcrumbs/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <adapter\n@@ -15,5 +17,10 @@\n       permission="zope2.View"\n       name="@breadcrumbs"\n       />\n+  <cache:ruleset\n+      for=".get.BreadcrumbsGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/services/content/configure.zcml b/src/plone/restapi/services/content/configure.zcml\nindex c18e6a0fb..72073faaf 100644\n--- a/src/plone/restapi/services/content/configure.zcml\n+++ b/src/plone/restapi/services/content/configure.zcml\n@@ -1,5 +1,6 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n@@ -17,6 +18,11 @@\n       for="Products.CMFCore.interfaces.IContentish"\n       permission="zope2.View"\n       />\n+  <cache:ruleset\n+      for=".get.ContentGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n   <plone:service\n       method="PATCH"\ndiff --git a/src/plone/restapi/services/discussion/configure.zcml b/src/plone/restapi/services/discussion/configure.zcml\nindex 9b2b446a6..af608d91e 100644\n--- a/src/plone/restapi/services/discussion/configure.zcml\n+++ b/src/plone/restapi/services/discussion/configure.zcml\n@@ -1,5 +1,6 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n@@ -16,6 +17,11 @@\n       permission="zope2.View"\n       name="@comments"\n       />\n+  <cache:ruleset\n+      for=".conversation.CommentsGet"\n+      ruleset="plone.content.itemView"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n   <plone:service\n       method="POST"\ndiff --git a/src/plone/restapi/services/multilingual/configure.zcml b/src/plone/restapi/services/multilingual/configure.zcml\nindex b304117f6..58d65c74d 100644\n--- a/src/plone/restapi/services/multilingual/configure.zcml\n+++ b/src/plone/restapi/services/multilingual/configure.zcml\n@@ -1,5 +1,6 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n@@ -21,6 +22,11 @@\n       permission="zope2.View"\n       name="@translations"\n       />\n+  <cache:ruleset\n+      for=".pam.TranslationInfo"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n   <plone:service\n       method="POST"\ndiff --git a/src/plone/restapi/services/navigation/configure.zcml b/src/plone/restapi/services/navigation/configure.zcml\nindex f1de8f2d6..4d38b80bf 100644\n--- a/src/plone/restapi/services/navigation/configure.zcml\n+++ b/src/plone/restapi/services/navigation/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <adapter\n@@ -15,5 +17,10 @@\n       permission="zope2.View"\n       name="@navigation"\n       />\n+  <cache:ruleset\n+      for=".get.NavigationGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/services/querystring/configure.zcml b/src/plone/restapi/services/querystring/configure.zcml\nindex 7088090b0..0cc223e65 100644\n--- a/src/plone/restapi/services/querystring/configure.zcml\n+++ b/src/plone/restapi/services/querystring/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <plone:service\n@@ -10,5 +12,10 @@\n       permission="zope2.View"\n       name="@querystring"\n       />\n+  <cache:ruleset\n+      for=".get.QuerystringGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/services/search/configure.zcml b/src/plone/restapi/services/search/configure.zcml\nindex e436c00a2..a48c7fc36 100644\n--- a/src/plone/restapi/services/search/configure.zcml\n+++ b/src/plone/restapi/services/search/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <plone:service\n@@ -10,5 +12,10 @@\n       permission="zope2.View"\n       name="@search"\n       />\n+  <cache:ruleset\n+      for=".get.SearchGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 303eed97c..3840b292a 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -18,7 +18,7 @@\n from plone.registry.interfaces import IRegistry\n from plone.restapi.tests.dxtypes import INDEXES as DX_TYPES_INDEXES\n from plone.restapi.tests.helpers import add_catalog_indexes\n-from plone.testing import z2\n+from plone.testing import zope\n from plone.testing.layer import Layer\n from plone.uuid.interfaces import IUUIDGenerator\n from Products.CMFCore.utils import getToolByName\n@@ -37,6 +37,12 @@\n import time\n \n \n+try:\n+    from plone.app.caching.testing import PloneAppCachingBase\n+except ImportError:\n+    # we get an import error in Plone 5.2 and in 6.0a4 an earlier\n+    PloneAppCachingBase = None\n+\n ENABLED_LANGUAGES = ["de", "en", "es", "fr"]\n \n \n@@ -118,7 +124,7 @@ def setUpZope(self, app, configurationContext):\n         xmlconfig.file("testing.zcml", plone.restapi, context=configurationContext)\n \n         self.loadZCML(package=collective.MockMailHost)\n-        z2.installProduct(app, "plone.restapi")\n+        zope.installProduct(app, "plone.restapi")\n \n     def setUpPloneSite(self, portal):\n         portal.acl_users.userFolderAddUser(\n@@ -142,10 +148,11 @@ def setUpPloneSite(self, portal):\n \n PLONE_RESTAPI_DX_FIXTURE = PloneRestApiDXLayer()\n PLONE_RESTAPI_DX_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_RESTAPI_DX_FIXTURE,), name="PloneRestApiDXLayer:Integration"\n+    bases=(PLONE_RESTAPI_DX_FIXTURE,),\n+    name="PloneRestApiDXLayer:Integration",\n )\n PLONE_RESTAPI_DX_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_DX_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(PLONE_RESTAPI_DX_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n     name="PloneRestApiDXLayer:Functional",\n )\n \n@@ -175,7 +182,7 @@ def setUpZope(self, app, configurationContext):\n         xmlconfig.file("configure.zcml", plone.restapi, context=configurationContext)\n         xmlconfig.file("testing.zcml", plone.restapi, context=configurationContext)\n \n-        z2.installProduct(app, "plone.restapi")\n+        zope.installProduct(app, "plone.restapi")\n \n     def setUpPloneSite(self, portal):\n         portal.acl_users.userFolderAddUser(\n@@ -201,10 +208,34 @@ def setUpPloneSite(self, portal):\n     bases=(PLONE_RESTAPI_DX_PAM_FIXTURE,), name="PloneRestApiDXPAMLayer:Integration"\n )\n PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_DX_PAM_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(PLONE_RESTAPI_DX_PAM_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n     name="PloneRestApiDXPAMLayer:Functional",\n )\n \n+if PloneAppCachingBase is not None:\n+    # condition and fallback can be removed in a Plone 6.0 only scenario\n+    class PloneRestApiCachingLayer(PloneAppCachingBase):\n+\n+        defaultBases = [\n+            PLONE_RESTAPI_DX_PAM_FIXTURE,\n+        ]\n+\n+    PLONE_RESTAPI_CACHING_FIXTURE = PloneRestApiCachingLayer()\n+    PLONE_RESTAPI_CACHING_INTEGRATION_TESTING = IntegrationTesting(\n+        bases=(PLONE_RESTAPI_CACHING_FIXTURE,),\n+        name="PloneRestApICachingLayer:Integration",\n+    )\n+    PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING = FunctionalTesting(\n+        bases=(\n+            PLONE_RESTAPI_CACHING_FIXTURE,\n+            zope.WSGI_SERVER_FIXTURE,\n+        ),\n+        name="PloneRestApICachingLayer:Functional",\n+    )\n+else:\n+    PLONE_RESTAPI_CACHING_INTEGRATION_TESTING = None\n+    PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING = None\n+\n \n class PloneRestApiDXIterateLayer(PloneSandboxLayer):\n \n@@ -216,7 +247,7 @@ def setUpZope(self, app, configurationContext):\n         xmlconfig.file("configure.zcml", plone.restapi, context=configurationContext)\n         xmlconfig.file("testing.zcml", plone.restapi, context=configurationContext)\n \n-        z2.installProduct(app, "plone.restapi")\n+        zope.installProduct(app, "plone.restapi")\n \n \n PLONE_RESTAPI_ITERATE_FIXTURE = PloneRestApiDXIterateLayer()\n@@ -225,7 +256,7 @@ def setUpZope(self, app, configurationContext):\n     name="PloneRestApiDXIterateLayer:Integration",\n )\n PLONE_RESTAPI_ITERATE_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_ITERATE_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(PLONE_RESTAPI_ITERATE_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n     name="PloneRestApiDXIterateLayer:Functional",\n )\n \n@@ -243,7 +274,7 @@ def setUpPloneSite(self, portal):\n     bases=(PLONE_RESTAPI_BLOCKS_FIXTURE,), name="PloneRestApIBlocksLayer:Integration"\n )\n PLONE_RESTAPI_BLOCKS_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_BLOCKS_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(PLONE_RESTAPI_BLOCKS_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n     name="PloneRestApIBlocksLayer:Functional",\n )\n \ndiff --git a/src/plone/restapi/tests/test_caching.py b/src/plone/restapi/tests/test_caching.py\nnew file mode 100644\nindex 000000000..060ae3566\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_caching.py\n@@ -0,0 +1,232 @@\n+from ..testing import PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING\n+from ..testing import RelativeSession\n+from plone.app.testing import applyProfile\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.caching.interfaces import ICacheSettings\n+from plone.registry.interfaces import IRegistry\n+from zope.component import getUtility\n+from zope.globalrequest import setRequest\n+\n+import transaction\n+import unittest\n+\n+\n+@unittest.skipIf(\n+    PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is None,\n+    "Test needs plone.app.caching>3.0.0a13",\n+    # condition and fallback can be removed in a Plone 6.0 only scenario\n+)\n+class TestProfileWithCachingRestAPI(unittest.TestCase):\n+    """This test aims to exercise the caching operations expected from the\n+    `with-caching-proxy` profile for supported restapi calls.\n+    """\n+\n+    if PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is not None:\n+        layer = PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+\n+        setRequest(self.portal.REQUEST)\n+\n+        applyProfile(self.portal, "plone.app.caching:with-caching-proxy")\n+\n+        self.registry = getUtility(IRegistry)\n+        self.cacheSettings = self.registry.forInterface(ICacheSettings)\n+        self.cacheSettings.enabled = True\n+\n+        # some test content\n+        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n+\n+        self.portal.invokeFactory("Folder", "f1")\n+        self.portal["f1"].title = "Folder one"\n+        self.portal.portal_workflow.doActionFor(self.portal["f1"], "publish")\n+\n+        self.portal["f1"].invokeFactory("Folder", "f2")\n+        self.portal["f1"]["f2"].title = "Folder one sub one"\n+        self.portal.portal_workflow.doActionFor(self.portal["f1"]["f2"], "publish")\n+\n+        self.portal.invokeFactory("Collection", "c")\n+        self.portal["c"].title = "A Collection"\n+        self.portal.portal_workflow.doActionFor(self.portal["c"], "publish")\n+\n+        transaction.commit()\n+\n+        # restapi test session\n+        self.api_session = RelativeSession(self.layer["portal"].absolute_url())\n+        self.api_session.headers.update({"Accept": "application/json"})\n+\n+    def test_restapi_actions(self):\n+        # plone.content.dynamic for plone.restapi.services.actions.get.ActionsGet\n+        response = self.api_session.get("/f1/f2/@actions")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_breadcrumbs(self):\n+        # plone.content.dynamic for plone.restapi.services.breadcrumbs.get.BreadcrumbsGet\n+        response = self.api_session.get("/f1/f2/@breadcrumbs")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_comments(self):\n+        # plone.content.itemView for plone.restapi.services.discussion.conversation.CommentsGet\n+        response = self.api_session.get("/f1/f2/@comments")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.itemView")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.weakCaching"\n+        )\n+\n+    def test_restapi_content(self):\n+        # plone.content.dynamic for plone.restapi.services.content.get.ContentGet\n+        response = self.api_session.get("/f1/f2")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_navigation(self):\n+        # plone.content.dynamic for plone.restapi.services.navigation.get.NavigationGet\n+        response = self.api_session.get("/f1/f2/@navigation")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_querystring(self):\n+        # plone.content.dynamic for plone.restapi.services.querystring.get.QueryStringGet\n+        response = self.api_session.get("/@querystring")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_search(self):\n+        # plone.content.dynamic for plone.restapi.services.search.get.SearchGet\n+        response = self.api_session.get("/@search")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+\n+@unittest.skipIf(\n+    PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is None,\n+    "Test needs plone.app.caching>3.0.0a13",\n+    # condition and fallback can be removed in a Plone 6.0 only scenario\n+)\n+class TestProfileWithoutCachingRestAPI(unittest.TestCase):\n+    """This test aims to exercise the caching operations expected from the\n+    `without-caching-proxy` profile for supported restapi calls.\n+    """\n+\n+    if PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is not None:\n+        layer = PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+\n+        setRequest(self.portal.REQUEST)\n+\n+        applyProfile(self.portal, "plone.app.caching:without-caching-proxy")\n+\n+        self.registry = getUtility(IRegistry)\n+        self.cacheSettings = self.registry.forInterface(ICacheSettings)\n+        self.cacheSettings.enabled = True\n+\n+        # some test content\n+        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n+\n+        self.portal.invokeFactory("Folder", "f1")\n+        self.portal["f1"].title = "Folder one"\n+        self.portal.portal_workflow.doActionFor(self.portal["f1"], "publish")\n+\n+        self.portal["f1"].invokeFactory("Folder", "f2")\n+        self.portal["f1"]["f2"].title = "Folder one sub one"\n+        self.portal.portal_workflow.doActionFor(self.portal["f1"]["f2"], "publish")\n+\n+        self.portal.invokeFactory("Collection", "c")\n+        self.portal["c"].title = "A Collection"\n+        self.portal.portal_workflow.doActionFor(self.portal["c"], "publish")\n+\n+        transaction.commit()\n+\n+        # restapi test session\n+        self.api_session = RelativeSession(self.layer["portal"].absolute_url())\n+        self.api_session.headers.update({"Accept": "application/json"})\n+\n+    def test_restapi_actions(self):\n+        # plone.content.dynamic for plone.restapi.services.actions.get.ActionsGet\n+        response = self.api_session.get("/f1/f2/@actions")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_breadcrumbs(self):\n+        # plone.content.dynamic for plone.restapi.services.breadcrumbs.get.BreadcrumbsGet\n+        response = self.api_session.get("/f1/f2/@breadcrumbs")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_comments(self):\n+        # plone.content.itemView for plone.restapi.services.discussion.conversation.CommentsGet\n+        response = self.api_session.get("/f1/f2/@comments")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.itemView")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.weakCaching"\n+        )\n+\n+    def test_restapi_content(self):\n+        # plone.content.dynamic for plone.restapi.services.content.get.ContentGet\n+        response = self.api_session.get("/f1/f2")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_navigation(self):\n+        # plone.content.dynamic for plone.restapi.services.navigation.get.NavigationGet\n+        response = self.api_session.get("/f1/f2/@navigation")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_querystring(self):\n+        # plone.content.dynamic for plone.restapi.services.querystring.get.QueryStringGet\n+        response = self.api_session.get("/@querystring")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_search(self):\n+        # plone.content.dynamic for plone.restapi.services.search.get.SearchGet\n+        response = self.api_session.get("/@search")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\ndiff --git a/test-no-sphinx-warnings.in b/test-no-sphinx-warnings\nsimilarity index 100%\nrename from test-no-sphinx-warnings.in\nrename to test-no-sphinx-warnings\ndiff --git a/test-no-uncommitted-doc-changes.in b/test-no-uncommitted-doc-changes\nsimilarity index 100%\nrename from test-no-uncommitted-doc-changes.in\nrename to test-no-uncommitted-doc-changes\ndiff --git a/versions.cfg b/versions.cfg\nindex 3841232b5..f14e01e91 100644\n--- a/versions.cfg\n+++ b/versions.cfg\n@@ -5,8 +5,9 @@ zc.buildout =\n plone.restapi =\n \n # code analysis\n-black = 20.8b1\n+black = 22.3.0\n click = 8.0.4\n+flake8 = 4.0.1\n \n # Error: The requirement (\'virtualenv>=20.0.35\') is not allowed by your [versions] constraint (20.0.26)\n virtualenv = 20.0.35\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-17T10:36:31+02:00
Author: Bernd Wolber (wolbernd) <b.wolber@fz-juelich.de>
Commit: https://github.com/plone/plone.restapi/commit/9e0407fcda129744256a76496336628b066cb4eb

[docs] remove comment line and update versions for test-build

Files changed:
M .github/workflows/tests.yml

b'diff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nindex e1d330251..682ca3730 100644\n--- a/.github/workflows/tests.yml\n+++ b/.github/workflows/tests.yml\n@@ -56,8 +56,7 @@ jobs:\n \n       # build sphinx\n       - name: sphinx\n-#        run: if [ "${{ matrix.plone-version }}" == "5.2" ] && [ ${{ matrix.python-version }} == \'3.7\' ]; then bin/sphinxbuilder; fi\n-        run: if [ "${{ matrix.plone-version }}" == "5.2" ] && [ ${{ matrix.python-version }} == \'3.7\' ]; then make docs-html; fi\n+        run: if [ "${{ matrix.plone-version }}" == "6.0" ] && [ ${{ matrix.python-version }} == \'3.9\' ]; then make docs-html; fi\n \n       # test\n       - name: test\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-17T10:37:05+02:00
Author: Bernd Wolber (wolbernd) <b.wolber@fz-juelich.de>
Commit: https://github.com/plone/plone.restapi/commit/218f765ede3a9b3dcbcabed2ff01ea8d39ef2ef5

Merge branch 'master' of github.com:wolbernd/plone.restapi

Files changed:
A news/1414.feature
A src/plone/restapi/tests/test_caching.py
A test-no-sphinx-warnings
A test-no-uncommitted-doc-changes
M .github/workflows/flake8.yml
M .github/workflows/tests.yml
M base.cfg
M setup.py
M src/plone/restapi/configure.zcml
M src/plone/restapi/services/actions/configure.zcml
M src/plone/restapi/services/breadcrumbs/configure.zcml
M src/plone/restapi/services/content/configure.zcml
M src/plone/restapi/services/discussion/configure.zcml
M src/plone/restapi/services/multilingual/configure.zcml
M src/plone/restapi/services/navigation/configure.zcml
M src/plone/restapi/services/querystring/configure.zcml
M src/plone/restapi/services/search/configure.zcml
M src/plone/restapi/testing.py
M versions.cfg
D test-no-sphinx-warnings.in
D test-no-uncommitted-doc-changes.in

b'diff --git a/.github/workflows/flake8.yml b/.github/workflows/flake8.yml\nindex 73f73f091..45dbfae7b 100644\n--- a/.github/workflows/flake8.yml\n+++ b/.github/workflows/flake8.yml\n@@ -28,7 +28,7 @@ jobs:\n \n       # install flake8\n       - name: install flake8\n-        run: pip install flake8\n+        run: pip install flake8==$(awk \'/^flake8 =/{print $NF}\' versions.cfg)\n \n       # run black\n       - name: run flake8\ndiff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nindex 682ca3730..9bf1c5daf 100644\n--- a/.github/workflows/tests.yml\n+++ b/.github/workflows/tests.yml\n@@ -64,11 +64,11 @@ jobs:\n \n       # test no uncommited changes\n       - name: test no uncommited changes\n-        run: bin/test-no-uncommitted-doc-changes\n+        run: ./test-no-uncommitted-doc-changes\n         env:\n           PYTHON_VERSION: ${{ matrix.python-version }}\n           PLONE_VERSION: ${{ matrix.plone-version }}\n \n       # test for broken links\n       - name: linkcheck\n-        run: if [ "${{ matrix.plone-version }}" == "6.0" ] && [ ${{ matrix.python-version }} == \'3.9\' ]; then make docs-linkcheckbroken; fi\n+        run: if [ "${{ matrix.plone-version }}" == "6.0" ] && [ ${{ matrix.python-version }} == \'3.9\' ]; then make docs-linkcheckbroken; fi\n\\ No newline at end of file\ndiff --git a/base.cfg b/base.cfg\nindex 8f22ca372..33f786f8e 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -5,8 +5,6 @@ parts =\n     instance\n     test\n     test-coverage\n-    test-no-uncommitted-doc-changes\n-    test-no-sphinx-warnings\n     code-analysis\n     dependencychecker\n     dependencies\n@@ -87,18 +85,6 @@ input = inline:\n output = ${buildout:directory}/bin/test-coverage\n mode = 755\n \n-[test-no-uncommitted-doc-changes]\n-recipe = collective.recipe.template\n-input = test-no-uncommitted-doc-changes.in\n-output = bin/test-no-uncommitted-doc-changes\n-mode = 755\n-\n-[test-no-sphinx-warnings]\n-recipe = collective.recipe.template\n-input = test-no-sphinx-warnings.in\n-output = bin/test-no-sphinx-warnings\n-mode = 755\n-\n [code-analysis]\n recipe = plone.recipe.codeanalysis\n directory = ${buildout:directory}/src\ndiff --git a/news/1414.feature b/news/1414.feature\nnew file mode 100644\nindex 000000000..e3c8ee64a\n--- /dev/null\n+++ b/news/1414.feature\n@@ -0,0 +1,2 @@\n+Move caching rulesets to the ZCML where the endpoints are defined.\n+[jensens]\ndiff --git a/setup.py b/setup.py\nindex 34fdb2d61..742c7d35f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,11 @@\n \n version = "8.22.1.dev0"\n \n-assert sys.version_info >= (3, 6, 0), "plone.restapi 8 requires Python 3.6.0+. Please downgrade to plone.restapi 7 for Python 2 and Plone 4.3/5.1."\n+assert sys.version_info >= (\n+    3,\n+    6,\n+    0,\n+), "plone.restapi 8 requires Python 3.6.0+. Please downgrade to plone.restapi 7 for Python 2 and Plone 4.3/5.1."\n \n \n def read(filename):\n@@ -34,6 +38,7 @@ def read(filename):\n \n TEST_REQUIRES = [\n     "collective.MockMailHost",\n+    "plone.app.caching",\n     "plone.app.contenttypes",\n     "plone.app.robotframework",\n     "plone.app.testing [robot] >= 4.2.2",  # ROBOT_TEST_LEVEL added\n@@ -82,9 +87,9 @@ def read(filename):\n         "setuptools",\n         "importlib-metadata; python_version<\'3.8\'",\n         "python-dateutil",\n-        "plone.behavior>=1.1",  # adds name to behavior directive\n-        "plone.rest >= 1.0a6",  # json renderer moved to plone.restapi\n-        "plone.schema >= 1.2.1",  # new/fixed json field\n+        "plone.rest",  # json renderer moved to plone.restapi\n+        "plone.schema>=1.2.1",  # new/fixed json field\n+        "Products.CMFPlone>=5.2",\n         "PyJWT>=1.7.0",\n         "pytz",\n     ],\ndiff --git a/src/plone/restapi/configure.zcml b/src/plone/restapi/configure.zcml\nindex 5fcfb0e47..a18da9013 100644\n--- a/src/plone/restapi/configure.zcml\n+++ b/src/plone/restapi/configure.zcml\n@@ -22,6 +22,12 @@\n   <include package="plone.behavior" />\n   <include package="plone.rest" />\n   <include package="plone.schema" />\n+\n+  <include\n+      package="plone.app.caching"\n+      zcml:condition="installed plone.app.caching"\n+      />\n+\n   <include file="indexers.zcml" />\n \n   <five:registerPackage\ndiff --git a/src/plone/restapi/services/actions/configure.zcml b/src/plone/restapi/services/actions/configure.zcml\nindex b716a1a99..042e1e316 100644\n--- a/src/plone/restapi/services/actions/configure.zcml\n+++ b/src/plone/restapi/services/actions/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <adapter\n@@ -15,5 +17,10 @@\n       permission="zope2.View"\n       name="@actions"\n       />\n+  <cache:ruleset\n+      for=".get.ActionsGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/services/breadcrumbs/configure.zcml b/src/plone/restapi/services/breadcrumbs/configure.zcml\nindex 6dde6de78..d8a169b03 100644\n--- a/src/plone/restapi/services/breadcrumbs/configure.zcml\n+++ b/src/plone/restapi/services/breadcrumbs/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <adapter\n@@ -15,5 +17,10 @@\n       permission="zope2.View"\n       name="@breadcrumbs"\n       />\n+  <cache:ruleset\n+      for=".get.BreadcrumbsGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/services/content/configure.zcml b/src/plone/restapi/services/content/configure.zcml\nindex c18e6a0fb..72073faaf 100644\n--- a/src/plone/restapi/services/content/configure.zcml\n+++ b/src/plone/restapi/services/content/configure.zcml\n@@ -1,5 +1,6 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n@@ -17,6 +18,11 @@\n       for="Products.CMFCore.interfaces.IContentish"\n       permission="zope2.View"\n       />\n+  <cache:ruleset\n+      for=".get.ContentGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n   <plone:service\n       method="PATCH"\ndiff --git a/src/plone/restapi/services/discussion/configure.zcml b/src/plone/restapi/services/discussion/configure.zcml\nindex 9b2b446a6..af608d91e 100644\n--- a/src/plone/restapi/services/discussion/configure.zcml\n+++ b/src/plone/restapi/services/discussion/configure.zcml\n@@ -1,5 +1,6 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n@@ -16,6 +17,11 @@\n       permission="zope2.View"\n       name="@comments"\n       />\n+  <cache:ruleset\n+      for=".conversation.CommentsGet"\n+      ruleset="plone.content.itemView"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n   <plone:service\n       method="POST"\ndiff --git a/src/plone/restapi/services/multilingual/configure.zcml b/src/plone/restapi/services/multilingual/configure.zcml\nindex b304117f6..58d65c74d 100644\n--- a/src/plone/restapi/services/multilingual/configure.zcml\n+++ b/src/plone/restapi/services/multilingual/configure.zcml\n@@ -1,5 +1,6 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n@@ -21,6 +22,11 @@\n       permission="zope2.View"\n       name="@translations"\n       />\n+  <cache:ruleset\n+      for=".pam.TranslationInfo"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n   <plone:service\n       method="POST"\ndiff --git a/src/plone/restapi/services/navigation/configure.zcml b/src/plone/restapi/services/navigation/configure.zcml\nindex f1de8f2d6..4d38b80bf 100644\n--- a/src/plone/restapi/services/navigation/configure.zcml\n+++ b/src/plone/restapi/services/navigation/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <adapter\n@@ -15,5 +17,10 @@\n       permission="zope2.View"\n       name="@navigation"\n       />\n+  <cache:ruleset\n+      for=".get.NavigationGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/services/querystring/configure.zcml b/src/plone/restapi/services/querystring/configure.zcml\nindex 7088090b0..0cc223e65 100644\n--- a/src/plone/restapi/services/querystring/configure.zcml\n+++ b/src/plone/restapi/services/querystring/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <plone:service\n@@ -10,5 +12,10 @@\n       permission="zope2.View"\n       name="@querystring"\n       />\n+  <cache:ruleset\n+      for=".get.QuerystringGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/services/search/configure.zcml b/src/plone/restapi/services/search/configure.zcml\nindex e436c00a2..a48c7fc36 100644\n--- a/src/plone/restapi/services/search/configure.zcml\n+++ b/src/plone/restapi/services/search/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <plone:service\n@@ -10,5 +12,10 @@\n       permission="zope2.View"\n       name="@search"\n       />\n+  <cache:ruleset\n+      for=".get.SearchGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 303eed97c..3840b292a 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -18,7 +18,7 @@\n from plone.registry.interfaces import IRegistry\n from plone.restapi.tests.dxtypes import INDEXES as DX_TYPES_INDEXES\n from plone.restapi.tests.helpers import add_catalog_indexes\n-from plone.testing import z2\n+from plone.testing import zope\n from plone.testing.layer import Layer\n from plone.uuid.interfaces import IUUIDGenerator\n from Products.CMFCore.utils import getToolByName\n@@ -37,6 +37,12 @@\n import time\n \n \n+try:\n+    from plone.app.caching.testing import PloneAppCachingBase\n+except ImportError:\n+    # we get an import error in Plone 5.2 and in 6.0a4 an earlier\n+    PloneAppCachingBase = None\n+\n ENABLED_LANGUAGES = ["de", "en", "es", "fr"]\n \n \n@@ -118,7 +124,7 @@ def setUpZope(self, app, configurationContext):\n         xmlconfig.file("testing.zcml", plone.restapi, context=configurationContext)\n \n         self.loadZCML(package=collective.MockMailHost)\n-        z2.installProduct(app, "plone.restapi")\n+        zope.installProduct(app, "plone.restapi")\n \n     def setUpPloneSite(self, portal):\n         portal.acl_users.userFolderAddUser(\n@@ -142,10 +148,11 @@ def setUpPloneSite(self, portal):\n \n PLONE_RESTAPI_DX_FIXTURE = PloneRestApiDXLayer()\n PLONE_RESTAPI_DX_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_RESTAPI_DX_FIXTURE,), name="PloneRestApiDXLayer:Integration"\n+    bases=(PLONE_RESTAPI_DX_FIXTURE,),\n+    name="PloneRestApiDXLayer:Integration",\n )\n PLONE_RESTAPI_DX_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_DX_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(PLONE_RESTAPI_DX_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n     name="PloneRestApiDXLayer:Functional",\n )\n \n@@ -175,7 +182,7 @@ def setUpZope(self, app, configurationContext):\n         xmlconfig.file("configure.zcml", plone.restapi, context=configurationContext)\n         xmlconfig.file("testing.zcml", plone.restapi, context=configurationContext)\n \n-        z2.installProduct(app, "plone.restapi")\n+        zope.installProduct(app, "plone.restapi")\n \n     def setUpPloneSite(self, portal):\n         portal.acl_users.userFolderAddUser(\n@@ -201,10 +208,34 @@ def setUpPloneSite(self, portal):\n     bases=(PLONE_RESTAPI_DX_PAM_FIXTURE,), name="PloneRestApiDXPAMLayer:Integration"\n )\n PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_DX_PAM_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(PLONE_RESTAPI_DX_PAM_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n     name="PloneRestApiDXPAMLayer:Functional",\n )\n \n+if PloneAppCachingBase is not None:\n+    # condition and fallback can be removed in a Plone 6.0 only scenario\n+    class PloneRestApiCachingLayer(PloneAppCachingBase):\n+\n+        defaultBases = [\n+            PLONE_RESTAPI_DX_PAM_FIXTURE,\n+        ]\n+\n+    PLONE_RESTAPI_CACHING_FIXTURE = PloneRestApiCachingLayer()\n+    PLONE_RESTAPI_CACHING_INTEGRATION_TESTING = IntegrationTesting(\n+        bases=(PLONE_RESTAPI_CACHING_FIXTURE,),\n+        name="PloneRestApICachingLayer:Integration",\n+    )\n+    PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING = FunctionalTesting(\n+        bases=(\n+            PLONE_RESTAPI_CACHING_FIXTURE,\n+            zope.WSGI_SERVER_FIXTURE,\n+        ),\n+        name="PloneRestApICachingLayer:Functional",\n+    )\n+else:\n+    PLONE_RESTAPI_CACHING_INTEGRATION_TESTING = None\n+    PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING = None\n+\n \n class PloneRestApiDXIterateLayer(PloneSandboxLayer):\n \n@@ -216,7 +247,7 @@ def setUpZope(self, app, configurationContext):\n         xmlconfig.file("configure.zcml", plone.restapi, context=configurationContext)\n         xmlconfig.file("testing.zcml", plone.restapi, context=configurationContext)\n \n-        z2.installProduct(app, "plone.restapi")\n+        zope.installProduct(app, "plone.restapi")\n \n \n PLONE_RESTAPI_ITERATE_FIXTURE = PloneRestApiDXIterateLayer()\n@@ -225,7 +256,7 @@ def setUpZope(self, app, configurationContext):\n     name="PloneRestApiDXIterateLayer:Integration",\n )\n PLONE_RESTAPI_ITERATE_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_ITERATE_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(PLONE_RESTAPI_ITERATE_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n     name="PloneRestApiDXIterateLayer:Functional",\n )\n \n@@ -243,7 +274,7 @@ def setUpPloneSite(self, portal):\n     bases=(PLONE_RESTAPI_BLOCKS_FIXTURE,), name="PloneRestApIBlocksLayer:Integration"\n )\n PLONE_RESTAPI_BLOCKS_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_BLOCKS_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(PLONE_RESTAPI_BLOCKS_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n     name="PloneRestApIBlocksLayer:Functional",\n )\n \ndiff --git a/src/plone/restapi/tests/test_caching.py b/src/plone/restapi/tests/test_caching.py\nnew file mode 100644\nindex 000000000..060ae3566\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_caching.py\n@@ -0,0 +1,232 @@\n+from ..testing import PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING\n+from ..testing import RelativeSession\n+from plone.app.testing import applyProfile\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.caching.interfaces import ICacheSettings\n+from plone.registry.interfaces import IRegistry\n+from zope.component import getUtility\n+from zope.globalrequest import setRequest\n+\n+import transaction\n+import unittest\n+\n+\n+@unittest.skipIf(\n+    PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is None,\n+    "Test needs plone.app.caching>3.0.0a13",\n+    # condition and fallback can be removed in a Plone 6.0 only scenario\n+)\n+class TestProfileWithCachingRestAPI(unittest.TestCase):\n+    """This test aims to exercise the caching operations expected from the\n+    `with-caching-proxy` profile for supported restapi calls.\n+    """\n+\n+    if PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is not None:\n+        layer = PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+\n+        setRequest(self.portal.REQUEST)\n+\n+        applyProfile(self.portal, "plone.app.caching:with-caching-proxy")\n+\n+        self.registry = getUtility(IRegistry)\n+        self.cacheSettings = self.registry.forInterface(ICacheSettings)\n+        self.cacheSettings.enabled = True\n+\n+        # some test content\n+        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n+\n+        self.portal.invokeFactory("Folder", "f1")\n+        self.portal["f1"].title = "Folder one"\n+        self.portal.portal_workflow.doActionFor(self.portal["f1"], "publish")\n+\n+        self.portal["f1"].invokeFactory("Folder", "f2")\n+        self.portal["f1"]["f2"].title = "Folder one sub one"\n+        self.portal.portal_workflow.doActionFor(self.portal["f1"]["f2"], "publish")\n+\n+        self.portal.invokeFactory("Collection", "c")\n+        self.portal["c"].title = "A Collection"\n+        self.portal.portal_workflow.doActionFor(self.portal["c"], "publish")\n+\n+        transaction.commit()\n+\n+        # restapi test session\n+        self.api_session = RelativeSession(self.layer["portal"].absolute_url())\n+        self.api_session.headers.update({"Accept": "application/json"})\n+\n+    def test_restapi_actions(self):\n+        # plone.content.dynamic for plone.restapi.services.actions.get.ActionsGet\n+        response = self.api_session.get("/f1/f2/@actions")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_breadcrumbs(self):\n+        # plone.content.dynamic for plone.restapi.services.breadcrumbs.get.BreadcrumbsGet\n+        response = self.api_session.get("/f1/f2/@breadcrumbs")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_comments(self):\n+        # plone.content.itemView for plone.restapi.services.discussion.conversation.CommentsGet\n+        response = self.api_session.get("/f1/f2/@comments")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.itemView")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.weakCaching"\n+        )\n+\n+    def test_restapi_content(self):\n+        # plone.content.dynamic for plone.restapi.services.content.get.ContentGet\n+        response = self.api_session.get("/f1/f2")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_navigation(self):\n+        # plone.content.dynamic for plone.restapi.services.navigation.get.NavigationGet\n+        response = self.api_session.get("/f1/f2/@navigation")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_querystring(self):\n+        # plone.content.dynamic for plone.restapi.services.querystring.get.QueryStringGet\n+        response = self.api_session.get("/@querystring")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_search(self):\n+        # plone.content.dynamic for plone.restapi.services.search.get.SearchGet\n+        response = self.api_session.get("/@search")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+\n+@unittest.skipIf(\n+    PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is None,\n+    "Test needs plone.app.caching>3.0.0a13",\n+    # condition and fallback can be removed in a Plone 6.0 only scenario\n+)\n+class TestProfileWithoutCachingRestAPI(unittest.TestCase):\n+    """This test aims to exercise the caching operations expected from the\n+    `without-caching-proxy` profile for supported restapi calls.\n+    """\n+\n+    if PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is not None:\n+        layer = PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+\n+        setRequest(self.portal.REQUEST)\n+\n+        applyProfile(self.portal, "plone.app.caching:without-caching-proxy")\n+\n+        self.registry = getUtility(IRegistry)\n+        self.cacheSettings = self.registry.forInterface(ICacheSettings)\n+        self.cacheSettings.enabled = True\n+\n+        # some test content\n+        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n+\n+        self.portal.invokeFactory("Folder", "f1")\n+        self.portal["f1"].title = "Folder one"\n+        self.portal.portal_workflow.doActionFor(self.portal["f1"], "publish")\n+\n+        self.portal["f1"].invokeFactory("Folder", "f2")\n+        self.portal["f1"]["f2"].title = "Folder one sub one"\n+        self.portal.portal_workflow.doActionFor(self.portal["f1"]["f2"], "publish")\n+\n+        self.portal.invokeFactory("Collection", "c")\n+        self.portal["c"].title = "A Collection"\n+        self.portal.portal_workflow.doActionFor(self.portal["c"], "publish")\n+\n+        transaction.commit()\n+\n+        # restapi test session\n+        self.api_session = RelativeSession(self.layer["portal"].absolute_url())\n+        self.api_session.headers.update({"Accept": "application/json"})\n+\n+    def test_restapi_actions(self):\n+        # plone.content.dynamic for plone.restapi.services.actions.get.ActionsGet\n+        response = self.api_session.get("/f1/f2/@actions")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_breadcrumbs(self):\n+        # plone.content.dynamic for plone.restapi.services.breadcrumbs.get.BreadcrumbsGet\n+        response = self.api_session.get("/f1/f2/@breadcrumbs")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_comments(self):\n+        # plone.content.itemView for plone.restapi.services.discussion.conversation.CommentsGet\n+        response = self.api_session.get("/f1/f2/@comments")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.itemView")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.weakCaching"\n+        )\n+\n+    def test_restapi_content(self):\n+        # plone.content.dynamic for plone.restapi.services.content.get.ContentGet\n+        response = self.api_session.get("/f1/f2")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_navigation(self):\n+        # plone.content.dynamic for plone.restapi.services.navigation.get.NavigationGet\n+        response = self.api_session.get("/f1/f2/@navigation")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_querystring(self):\n+        # plone.content.dynamic for plone.restapi.services.querystring.get.QueryStringGet\n+        response = self.api_session.get("/@querystring")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_search(self):\n+        # plone.content.dynamic for plone.restapi.services.search.get.SearchGet\n+        response = self.api_session.get("/@search")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\ndiff --git a/test-no-sphinx-warnings.in b/test-no-sphinx-warnings\nsimilarity index 100%\nrename from test-no-sphinx-warnings.in\nrename to test-no-sphinx-warnings\ndiff --git a/test-no-uncommitted-doc-changes.in b/test-no-uncommitted-doc-changes\nsimilarity index 100%\nrename from test-no-uncommitted-doc-changes.in\nrename to test-no-uncommitted-doc-changes\ndiff --git a/versions.cfg b/versions.cfg\nindex 3841232b5..f14e01e91 100644\n--- a/versions.cfg\n+++ b/versions.cfg\n@@ -5,8 +5,9 @@ zc.buildout =\n plone.restapi =\n \n # code analysis\n-black = 20.8b1\n+black = 22.3.0\n click = 8.0.4\n+flake8 = 4.0.1\n \n # Error: The requirement (\'virtualenv>=20.0.35\') is not allowed by your [versions] constraint (20.0.26)\n virtualenv = 20.0.35\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-17T05:18:10-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.restapi/commit/08a2fbe06e0ed4acc59ff60253a6dff05ed798b7

Merge pull request #1422 from wolbernd/master

[docs] fix docs-linkcheckbroken task

Files changed:
A news/1421.internal
M .github/workflows/tests.yml
M Makefile

b'diff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nindex 62516686e..9bf1c5daf 100644\n--- a/.github/workflows/tests.yml\n+++ b/.github/workflows/tests.yml\n@@ -56,8 +56,7 @@ jobs:\n \n       # build sphinx\n       - name: sphinx\n-#        run: if [ "${{ matrix.plone-version }}" == "5.2" ] && [ ${{ matrix.python-version }} == \'3.7\' ]; then bin/sphinxbuilder; fi\n-        run: if [ "${{ matrix.plone-version }}" == "5.2" ] && [ ${{ matrix.python-version }} == \'3.7\' ]; then make docs-html; fi\n+        run: if [ "${{ matrix.plone-version }}" == "6.0" ] && [ ${{ matrix.python-version }} == \'3.9\' ]; then make docs-html; fi\n \n       # test\n       - name: test\n@@ -70,6 +69,6 @@ jobs:\n           PYTHON_VERSION: ${{ matrix.python-version }}\n           PLONE_VERSION: ${{ matrix.plone-version }}\n \n-      # test sphinx warnings\n-#      - name: sphinx\n-#        run: if [ "${{ matrix.plone-version }}" == "5.2" ] && [ ${{ matrix.python-version }} == \'3.7\' ]; then ./test-no-sphinx-warnings; fi\n+      # test for broken links\n+      - name: linkcheck\n+        run: if [ "${{ matrix.plone-version }}" == "6.0" ] && [ ${{ matrix.python-version }} == \'3.9\' ]; then make docs-linkcheckbroken; fi\n\\ No newline at end of file\ndiff --git a/Makefile b/Makefile\nindex 8efb402d7..a5f8faf3c 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -137,7 +137,7 @@ docs-linkcheck: bin/python  ## Run linkcheck\n \n .PHONY: docs-linkcheckbroken\n docs-linkcheckbroken: bin/python  ## Run linkcheck and show only broken links\n-\tcd $(DOCS_DIR) && $(SPHINXBUILD) -b linkcheck $(ALLSPHINXOPTS) $(BUILDDIR)/linkcheck | GREP_COLORS=\'0;31\' egrep -wi broken --color=auto\n+\tcd $(DOCS_DIR) && $(SPHINXBUILD) -b linkcheck $(ALLSPHINXOPTS) $(BUILDDIR)/linkcheck | GREP_COLORS=\'0;31\' egrep -wi broken --color=auto || test $$? = 1\n \t@echo\n \t@echo "Link check complete; look for any errors in the above output " \\\n \t\t"or in $(BUILDDIR)/linkcheck/ ."\ndiff --git a/news/1421.internal b/news/1421.internal\nnew file mode 100644\nindex 000000000..ea3118df3\n--- /dev/null\n+++ b/news/1421.internal\n@@ -0,0 +1 @@\n+fixed broken make task docs-linkcheckbroken\n'

