Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2017-10-27T00:03:41+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.PlonePAS/commit/2e1f51ff1dc70beadfd5fa279c56867ed78cd5f3

Fixed tests: MemberData is no longer wrapped in the PloneUser.

If you need the PloneUser, you can call self.getUser() on the MemberData.

Files changed:
M src/Products/PlonePAS/tests/test_groupdatatool.py
M src/Products/PlonePAS/tests/test_membershiptool.py

diff --git a/src/Products/PlonePAS/tests/test_groupdatatool.py b/src/Products/PlonePAS/tests/test_groupdatatool.py
index 1dce8b3..343c6e7 100644
--- a/src/Products/PlonePAS/tests/test_groupdatatool.py
+++ b/src/Products/PlonePAS/tests/test_groupdatatool.py
@@ -70,9 +70,7 @@ def testGroupMembersAreWrapped(self):
         self.acl_users.userSetGroups(TEST_USER_ID, groupnames=['foo'])
         ms = g.getGroupMembers()
         self.assertEqual(ms[0].__class__.__name__, 'MemberData')
-        self.assertEqual(aq_parent(ms[0]).__class__.__name__, 'PloneUser')
-        self.assertEqual(aq_parent(aq_parent(ms[0])).__class__.__name__,
-                         'PluggableAuthService')
+        self.assertEqual(aq_parent(ms[0]).__class__.__name__, 'PluggableAuthService')
 
     def testAddMember(self):
         self.setPermissions([Permissions.manage_users])
diff --git a/src/Products/PlonePAS/tests/test_membershiptool.py b/src/Products/PlonePAS/tests/test_membershiptool.py
index 8d92af9..8438b70 100644
--- a/src/Products/PlonePAS/tests/test_membershiptool.py
+++ b/src/Products/PlonePAS/tests/test_membershiptool.py
@@ -53,12 +53,14 @@ def test_get_member(self):
         self.assertTrue(isinstance(member, PloneUser))
 
     def test_get_member_by_id(self):
+        from Products.PluggableAuthService.PluggableAuthService import (
+            PluggableAuthService)
         # Use tool way of getting member by id. This returns a
-        # MemberData object wrapped by the member
+        # MemberData object wrapped by PAS (used to be wrapped by member).
         member = self.mt.getMemberById(self.member_id)
         self.assertFalse(member is None)
         self.assertTrue(isinstance(member, MemberData))
-        self.assertTrue(isinstance(aq_parent(member), PloneUser))
+        self.assertTrue(isinstance(aq_parent(member), PluggableAuthService))
 
     def test_id_clean(self):
         from Products.PlonePAS.utils import cleanId, decleanId
@@ -441,7 +443,8 @@ def testGetMemberByIdIsWrapped(self):
         member = self.membership.getMemberById(TEST_USER_ID)
         self.assertNotEqual(member, None)
         self.assertEqual(member.__class__.__name__, 'MemberData')
-        self.assertEqual(aq_parent(member).__class__.__name__, 'PloneUser')
+        self.assertEqual(aq_parent(member).__class__.__name__,
+                         'PluggableAuthService')
 
     def testGetAuthenticatedMember(self):
         member = self.membership.getAuthenticatedMember()
@@ -451,7 +454,8 @@ def testGetAuthenticatedMemberIsWrapped(self):
         member = self.membership.getAuthenticatedMember()
         self.assertEqual(member.getUserName(), TEST_USER_NAME)
         self.assertEqual(member.__class__.__name__, 'MemberData')
-        self.assertEqual(aq_parent(member).__class__.__name__, 'PloneUser')
+        self.assertEqual(aq_parent(member).__class__.__name__,
+                         'PluggableAuthService')
 
     def testGetAuthenticatedMemberIfAnonymous(self):
         self.logout()
@@ -472,23 +476,19 @@ def testIsAnonymousUser(self):
 
     def testWrapUserWrapsBareUser(self):
         user = self.portal.acl_users.getUserById(TEST_USER_ID)
-        # TODO: GRUF users are wrapped
         self.assertTrue(hasattr(user, 'aq_base'))
         user = aq_base(user)
         user = self.membership.wrapUser(user)
         self.assertEqual(user.__class__.__name__, 'MemberData')
-        self.assertEqual(aq_parent(user).__class__.__name__, 'PloneUser')
-        self.assertEqual(aq_parent(aq_parent(user)).__class__.__name__,
+        self.assertEqual(aq_parent(user).__class__.__name__,
                          'PluggableAuthService')
 
     def testWrapUserWrapsWrappedUser(self):
         user = self.portal.acl_users.getUserById(TEST_USER_ID)
-        # TODO: GRUF users are wrapped
         self.assertTrue(hasattr(user, 'aq_base'))
         user = self.membership.wrapUser(user)
         self.assertEqual(user.__class__.__name__, 'MemberData')
-        self.assertEqual(aq_parent(user).__class__.__name__, 'PloneUser')
-        self.assertEqual(aq_parent(aq_parent(user)).__class__.__name__,
+        self.assertEqual(aq_parent(user).__class__.__name__,
                          'PluggableAuthService')
 
     def testWrapUserDoesntWrapMemberData(self):
@@ -505,8 +505,7 @@ def testWrapUserWrapsAnonymous(self):
         self.assertFalse(hasattr(nobody, 'aq_base'))
         user = self.membership.wrapUser(nobody, wrap_anon=1)
         self.assertEqual(user.__class__.__name__, 'MemberData')
-        self.assertEqual(aq_parent(user).__class__.__name__, 'SpecialUser')
-        self.assertEqual(aq_parent(aq_parent(user)).__class__.__name__,
+        self.assertEqual(aq_parent(user).__class__.__name__,
                          'PluggableAuthService')
 
     def testGetCandidateLocalRoles(self):


