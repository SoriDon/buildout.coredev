Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-30T07:56:43+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/792b4fc9bf5a1c15e9b42e01e1376369e2868fba

Implement depends on multiple bundle names comma separated

Files changed:
M Products/CMFPlone/resources/browser/resource.py
M Products/CMFPlone/tests/testResourceRegistries.py

b'diff --git a/Products/CMFPlone/resources/browser/resource.py b/Products/CMFPlone/resources/browser/resource.py\nindex bc42561754..a628155808 100644\n--- a/Products/CMFPlone/resources/browser/resource.py\n+++ b/Products/CMFPlone/resources/browser/resource.py\n@@ -109,13 +109,48 @@ def update(self):\n         request_enabled_bundles, request_disabled_bundles = self._request_bundles()\n \n         # collect names\n-        js_names = {name for name, rec in records.items() if rec.jscompilation}\n-        css_names = {name for name, rec in records.items() if rec.csscompilation}\n-        all_names = {\n+        js_names = [name for name, rec in records.items() if rec.jscompilation]\n+        css_names = [name for name, rec in records.items() if rec.csscompilation]\n+        all_names = [\n             name\n             for name, rec in records.items()\n             if rec.jscompilation or rec.csscompilation\n-        }\n+        ]\n+\n+        def check_dependencies(bundle_name, depends, bundles):\n+            # "depends" can be a comma separated string of dependent\n+            # bundle names\n+            depend_names = depends.split(",") if depends else []\n+            valid_dependencies = []\n+\n+            for name in depend_names:\n+                if name in bundles:\n+                    valid_dependencies.append(name)\n+                    continue\n+                if name in all_names:\n+                    # ignore dependency on bundle outside "bundles"\n+                    continue\n+\n+                msg = f"Bundle \'{bundle_name}\' has a non existing dependeny on \'{name}\'. "\n+\n+                if name in GRACEFUL_DEPENDENCY_REWRITE:\n+                    # gracefully rewrite old bundle names\n+                    graceful_depends = GRACEFUL_DEPENDENCY_REWRITE[name]\n+                    logger.error(\n+                            msg\n+                            + f"Bundle dependency graceful rewritten to \'{graceful_depends}\' "\n+                            + "Fallback will be removed in Plone 7."\n+                        )\n+                    valid_dependencies.append(graceful_depends)\n+                    continue\n+\n+                # if the dependency does not exist, skip the bundle\n+                logger.error(\n+                    msg + "Bundle ignored - This may break your site!"\n+                )\n+                return "__broken__"\n+\n+            return valid_dependencies\n \n         # register\n         for name, record in records.items():\n@@ -126,24 +161,9 @@ def update(self):\n             include = include and name not in request_disabled_bundles\n \n             if record.jscompilation:\n-                depends = record.depends or ""\n-                if depends and depends not in js_names:\n-                    if depends in all_names:\n-                        depends = None\n-                    else:\n-                        msg = f"Bundle \'{name}\' has a non existing dependeny on \'{record.depends}\'. "\n-                        if depends not in GRACEFUL_DEPENDENCY_REWRITE:\n-                            logger.error(\n-                                msg + "Bundle ignored (JS) - This may break your site!"\n-                            )\n-                            continue\n-                        graceful_depends = GRACEFUL_DEPENDENCY_REWRITE[depends]\n-                        logger.error(\n-                            msg\n-                            + f"Bundle dependency (JS) graceful rewritten to \'{graceful_depends}\' "\n-                            + "Fallback will be removed in Plone 7."\n-                        )\n-                        depends = graceful_depends\n+                depends = check_dependencies(name, record.depends, js_names)\n+                if depends == "__broken__":\n+                    continue\n                 external = record.jscompilation.startswith("http")\n                 PloneScriptResource(\n                     context=self.context,\n@@ -162,24 +182,9 @@ def update(self):\n                     integrity=not external,\n                 )\n             if record.csscompilation:\n-                depends = record.depends or ""\n-                if depends and depends not in css_names:\n-                    if depends in all_names:\n-                        depends = None\n-                    else:\n-                        msg = f"Bundle \'{name}\' has a non existing dependeny on \'{record.depends}\'. "\n-                        if depends not in GRACEFUL_DEPENDENCY_REWRITE:\n-                            logger.error(\n-                                msg + "Bundle ignored (CSS) - This may break your site!"\n-                            )\n-                            continue\n-                        graceful_depends = GRACEFUL_DEPENDENCY_REWRITE[depends]\n-                        logger.error(\n-                            msg\n-                            + f"Bundle dependency (CSS) graceful rewritten to \'{graceful_depends}\' "\n-                            + "Fallback will be removed in Plone 7."\n-                        )\n-                        depends = graceful_depends\n+                depends = check_dependencies(name, record.depends, js_names)\n+                if depends == "__broken__":\n+                    continue\n                 external = record.csscompilation.startswith("http")\n                 PloneStyleResource(\n                     context=self.context,\ndiff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex e2113462aa..4ad904ce0c 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -159,6 +159,31 @@ def test_remove_bundle_on_request_with_subrequest(self):\n         result = scripts.render()\n         self.assertNotIn("http://test.foo/test.css", result)\n \n+    def test_bundle_depends(self):\n+        bundle = self._make_test_bundle()\n+        bundle.depends = "plone"\n+        view = ScriptsView(self.app, self.app.REQUEST, None, None)\n+        view.update()\n+        results = view.render()\n+        self.assertIn("http://foo.bar/foobar.js", results)\n+\n+    def test_bundle_depends_on_multiple(self):\n+        bundle = self._make_test_bundle()\n+        bundle.depends = "plone,eventedit"\n+        view = ScriptsView(self.app, self.app.REQUEST, None, None)\n+        view.update()\n+        results = view.render()\n+        self.assertIn("http://foo.bar/foobar.js", results)\n+\n+    def test_bundle_depends_on_missing(self):\n+        bundle = self._make_test_bundle()\n+        bundle.depends = "nonexistsinbundle"\n+        view = ScriptsView(self.app, self.app.REQUEST, None, None)\n+        view.update()\n+        results = view.render()\n+        # bundle should be skipped when rendering\n+        self.assertNotIn("http://foo.bar/foobar.js", results)\n+\n \n class TestStylesViewlet(PloneTestCase.PloneTestCase):\n     def test_styles_viewlet(self):\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-30T07:56:43+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/b88272591aa82702065d61e81a2be9e03d54786f

changenote

Files changed:
A news/3570.feature

b'diff --git a/news/3570.feature b/news/3570.feature\nnew file mode 100644\nindex 0000000000..7b897a9ed6\n--- /dev/null\n+++ b/news/3570.feature\n@@ -0,0 +1,2 @@\n+Resource bundle dependency on multiple comma separated names.\n+[petschki]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-30T07:56:43+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/1546e058d0a71f654793a4e1dfe7b0976a5d3454

fix bundles to check in csscompilation

Files changed:
M Products/CMFPlone/resources/browser/resource.py

b'diff --git a/Products/CMFPlone/resources/browser/resource.py b/Products/CMFPlone/resources/browser/resource.py\nindex a628155808..14d0412a26 100644\n--- a/Products/CMFPlone/resources/browser/resource.py\n+++ b/Products/CMFPlone/resources/browser/resource.py\n@@ -182,7 +182,7 @@ def check_dependencies(bundle_name, depends, bundles):\n                     integrity=not external,\n                 )\n             if record.csscompilation:\n-                depends = check_dependencies(name, record.depends, js_names)\n+                depends = check_dependencies(name, record.depends, css_names)\n                 if depends == "__broken__":\n                     continue\n                 external = record.csscompilation.startswith("http")\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-07-01T09:08:16+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/dea3f4768ebdd0fa4f1b6a8ec192f3ef31729fec

use latest webresource

Files changed:
M setup.py

b"diff --git a/setup.py b/setup.py\nindex 3ba916fbdd..07528c42cc 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -108,7 +108,7 @@\n         'setuptools>=36.2',\n         'transaction',\n         'plone.autoinclude',\n-        'webresource',\n+        'webresource>=1.1',\n         'ZODB3',\n         'Zope[wsgi] >= 4.0',\n         'zope.app.locales >= 3.6.0',\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-07-01T18:44:49+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/b7cf6218fc8c3c716b8fa8aef6fe9396d4db66f9

Merge pull request #3570 from plone/petschki-bundle-dependency-list

Implement bundle depends on multiple comma separated names

Files changed:
A news/3570.feature
M Products/CMFPlone/resources/browser/resource.py
M Products/CMFPlone/tests/testResourceRegistries.py
M setup.py

b'diff --git a/Products/CMFPlone/resources/browser/resource.py b/Products/CMFPlone/resources/browser/resource.py\nindex bc42561754..14d0412a26 100644\n--- a/Products/CMFPlone/resources/browser/resource.py\n+++ b/Products/CMFPlone/resources/browser/resource.py\n@@ -109,13 +109,48 @@ def update(self):\n         request_enabled_bundles, request_disabled_bundles = self._request_bundles()\n \n         # collect names\n-        js_names = {name for name, rec in records.items() if rec.jscompilation}\n-        css_names = {name for name, rec in records.items() if rec.csscompilation}\n-        all_names = {\n+        js_names = [name for name, rec in records.items() if rec.jscompilation]\n+        css_names = [name for name, rec in records.items() if rec.csscompilation]\n+        all_names = [\n             name\n             for name, rec in records.items()\n             if rec.jscompilation or rec.csscompilation\n-        }\n+        ]\n+\n+        def check_dependencies(bundle_name, depends, bundles):\n+            # "depends" can be a comma separated string of dependent\n+            # bundle names\n+            depend_names = depends.split(",") if depends else []\n+            valid_dependencies = []\n+\n+            for name in depend_names:\n+                if name in bundles:\n+                    valid_dependencies.append(name)\n+                    continue\n+                if name in all_names:\n+                    # ignore dependency on bundle outside "bundles"\n+                    continue\n+\n+                msg = f"Bundle \'{bundle_name}\' has a non existing dependeny on \'{name}\'. "\n+\n+                if name in GRACEFUL_DEPENDENCY_REWRITE:\n+                    # gracefully rewrite old bundle names\n+                    graceful_depends = GRACEFUL_DEPENDENCY_REWRITE[name]\n+                    logger.error(\n+                            msg\n+                            + f"Bundle dependency graceful rewritten to \'{graceful_depends}\' "\n+                            + "Fallback will be removed in Plone 7."\n+                        )\n+                    valid_dependencies.append(graceful_depends)\n+                    continue\n+\n+                # if the dependency does not exist, skip the bundle\n+                logger.error(\n+                    msg + "Bundle ignored - This may break your site!"\n+                )\n+                return "__broken__"\n+\n+            return valid_dependencies\n \n         # register\n         for name, record in records.items():\n@@ -126,24 +161,9 @@ def update(self):\n             include = include and name not in request_disabled_bundles\n \n             if record.jscompilation:\n-                depends = record.depends or ""\n-                if depends and depends not in js_names:\n-                    if depends in all_names:\n-                        depends = None\n-                    else:\n-                        msg = f"Bundle \'{name}\' has a non existing dependeny on \'{record.depends}\'. "\n-                        if depends not in GRACEFUL_DEPENDENCY_REWRITE:\n-                            logger.error(\n-                                msg + "Bundle ignored (JS) - This may break your site!"\n-                            )\n-                            continue\n-                        graceful_depends = GRACEFUL_DEPENDENCY_REWRITE[depends]\n-                        logger.error(\n-                            msg\n-                            + f"Bundle dependency (JS) graceful rewritten to \'{graceful_depends}\' "\n-                            + "Fallback will be removed in Plone 7."\n-                        )\n-                        depends = graceful_depends\n+                depends = check_dependencies(name, record.depends, js_names)\n+                if depends == "__broken__":\n+                    continue\n                 external = record.jscompilation.startswith("http")\n                 PloneScriptResource(\n                     context=self.context,\n@@ -162,24 +182,9 @@ def update(self):\n                     integrity=not external,\n                 )\n             if record.csscompilation:\n-                depends = record.depends or ""\n-                if depends and depends not in css_names:\n-                    if depends in all_names:\n-                        depends = None\n-                    else:\n-                        msg = f"Bundle \'{name}\' has a non existing dependeny on \'{record.depends}\'. "\n-                        if depends not in GRACEFUL_DEPENDENCY_REWRITE:\n-                            logger.error(\n-                                msg + "Bundle ignored (CSS) - This may break your site!"\n-                            )\n-                            continue\n-                        graceful_depends = GRACEFUL_DEPENDENCY_REWRITE[depends]\n-                        logger.error(\n-                            msg\n-                            + f"Bundle dependency (CSS) graceful rewritten to \'{graceful_depends}\' "\n-                            + "Fallback will be removed in Plone 7."\n-                        )\n-                        depends = graceful_depends\n+                depends = check_dependencies(name, record.depends, css_names)\n+                if depends == "__broken__":\n+                    continue\n                 external = record.csscompilation.startswith("http")\n                 PloneStyleResource(\n                     context=self.context,\ndiff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex e2113462aa..4ad904ce0c 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -159,6 +159,31 @@ def test_remove_bundle_on_request_with_subrequest(self):\n         result = scripts.render()\n         self.assertNotIn("http://test.foo/test.css", result)\n \n+    def test_bundle_depends(self):\n+        bundle = self._make_test_bundle()\n+        bundle.depends = "plone"\n+        view = ScriptsView(self.app, self.app.REQUEST, None, None)\n+        view.update()\n+        results = view.render()\n+        self.assertIn("http://foo.bar/foobar.js", results)\n+\n+    def test_bundle_depends_on_multiple(self):\n+        bundle = self._make_test_bundle()\n+        bundle.depends = "plone,eventedit"\n+        view = ScriptsView(self.app, self.app.REQUEST, None, None)\n+        view.update()\n+        results = view.render()\n+        self.assertIn("http://foo.bar/foobar.js", results)\n+\n+    def test_bundle_depends_on_missing(self):\n+        bundle = self._make_test_bundle()\n+        bundle.depends = "nonexistsinbundle"\n+        view = ScriptsView(self.app, self.app.REQUEST, None, None)\n+        view.update()\n+        results = view.render()\n+        # bundle should be skipped when rendering\n+        self.assertNotIn("http://foo.bar/foobar.js", results)\n+\n \n class TestStylesViewlet(PloneTestCase.PloneTestCase):\n     def test_styles_viewlet(self):\ndiff --git a/news/3570.feature b/news/3570.feature\nnew file mode 100644\nindex 0000000000..7b897a9ed6\n--- /dev/null\n+++ b/news/3570.feature\n@@ -0,0 +1,2 @@\n+Resource bundle dependency on multiple comma separated names.\n+[petschki]\ndiff --git a/setup.py b/setup.py\nindex 3ba916fbdd..07528c42cc 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -108,7 +108,7 @@\n         \'setuptools>=36.2\',\n         \'transaction\',\n         \'plone.autoinclude\',\n-        \'webresource\',\n+        \'webresource>=1.1\',\n         \'ZODB3\',\n         \'Zope[wsgi] >= 4.0\',\n         \'zope.app.locales >= 3.6.0\',\n'

