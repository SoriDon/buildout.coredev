Repository: plone.scale


Branch: refs/heads/master
Date: 2017-03-15T15:56:13+01:00
Author: Florian Schulze (fschulze) <florian.schulze@gmx.net>
Commit: https://github.com/plone/plone.scale/commit/c6df0865d3a33ceea045450bc5a50ac8e1c8b34a

Only convert JPEG to greyscale if they actually are and not when the image has less than 256 colors.

This bug was introduced in 2.1 with PR #13.

Files changed:
M CHANGES.rst
M plone/scale/scale.py
M plone/scale/tests/test_scale.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 0c12894..a4d401c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -15,6 +15,10 @@ New features:
 
 Bug fixes:
 
+- Only convert JPEG to greyscale if they actually are and not when the image
+  has less than 256 colors. This bug was introduced in 2.1 with PR #13.
+  [fschulze]
+
 - Preserve color profile in scaled images.
   [fschulze]
 
diff --git a/plone/scale/scale.py b/plone/scale/scale.py
index 1c20239..cd3d5d4 100644
--- a/plone/scale/scale.py
+++ b/plone/scale/scale.py
@@ -52,9 +52,12 @@ def scaleImage(image, width=None, height=None, direction='down',
     image = scalePILImage(image, width, height, direction)
 
     # convert to simpler mode if possible
-    if image.mode not in ('P', 'L') and image.getcolors(maxcolors=256):
+    colors = image.getcolors(maxcolors=256)
+    if image.mode not in ('P', 'L') and colors:
         if format_ == 'JPEG':
-            image = image.convert('L')
+            # check if it's all grey
+            if all(rgb[0] == rgb[1] == rgb[2] for c, rgb in colors):
+                image = image.convert('L')
         elif format_ == 'PNG':
             image = image.convert('P')
 
diff --git a/plone/scale/tests/test_scale.py b/plone/scale/tests/test_scale.py
index 843b64d..9f63b20 100644
--- a/plone/scale/tests/test_scale.py
+++ b/plone/scale/tests/test_scale.py
@@ -5,7 +5,7 @@
 from unittest import TestCase
 
 import os.path
-import PIL.Image
+import PIL.Image, PIL.ImageDraw
 
 
 PNG = open(os.path.join(TEST_DATA_LOCATION, "logo.png")).read()
@@ -47,6 +47,47 @@ def testScaledPreservesProfile(self):
         image = PIL.Image.open(input)
         self.assertIsNotNone(image.info.get('icc_profile'))
 
+    def testScaleWithFewColorsStaysColored(self):
+        (imagedata, format, size) = scaleImage(PROFILE, 16, None, "down")
+        image = PIL.Image.open(StringIO(imagedata))
+        self.assertEqual(max(image.size), 16)
+        self.assertEqual(image.mode, 'RGB')
+        self.assertEqual(image.format, 'JPEG')
+
+    def testAutomaticGreyscale(self):
+        src = PIL.Image.new("RGB", (256, 256), (255, 255, 255))
+        draw = PIL.ImageDraw.Draw(src)
+        for i in range(0, 256):
+            draw.line(((0, i), (256, i)), fill=(i, i, i))
+        result = StringIO()
+        src.save(result, "JPEG")
+        (imagedata, format, size) = scaleImage(result, 200, None, "down")
+        image = PIL.Image.open(StringIO(imagedata))
+        self.assertEqual(max(image.size), 200)
+        self.assertEqual(image.mode, 'L')
+        self.assertEqual(image.format, 'JPEG')
+
+    def testAutomaticPalette(self):
+        # get a JPEG with more than 256 colors
+        jpeg = PIL.Image.open(StringIO(PROFILE))
+        self.assertEqual(jpeg.mode, 'RGB')
+        self.assertEqual(jpeg.format, 'JPEG')
+        self.assertIsNone(jpeg.getcolors(maxcolors=256))
+        # convert to PNG
+        dst = StringIO()
+        jpeg.save(dst, "PNG")
+        dst.seek(0)
+        png = PIL.Image.open(dst)
+        self.assertEqual(png.mode, 'RGB')
+        self.assertEqual(png.format, 'PNG')
+        self.assertIsNone(png.getcolors(maxcolors=256))
+        # scale it to a size where we get less than 256 colors
+        (imagedata, format, size) = scaleImage(dst.getvalue(), 24, None, "down")
+        image = PIL.Image.open(StringIO(imagedata))
+        # we should now have an image in palette mode
+        self.assertEqual(image.mode, 'P')
+        self.assertEqual(image.format, 'PNG')
+
     def testSameSizeDownScale(self):
         self.assertEqual(scaleImage(PNG, 84, 103, "down")[2], (84, 103))
 
diff --git a/setup.py b/setup.py
index aa91535..9fc8473 100644
--- a/setup.py
+++ b/setup.py
@@ -2,7 +2,7 @@
 from setuptools import find_packages
 from setuptools import setup
 
-version = '2.1.1.dev0'
+version = '2.1.1.dev1'
 readme = open('README.rst').read().replace(':class:', '').replace(':mod:', '')
 changes = open('CHANGES.rst').read()
 


Repository: plone.scale


Branch: refs/heads/master
Date: 2017-03-15T20:17:38+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.scale/commit/b0d71819ff51158306917379a4bbeb9b6ef13e95

Merge pull request #24 from fschulze/fix-jpeg-greyscale-optimization

Only convert JPEG to greyscale if they actually are and not when the image has less than 256 colors.

Files changed:
M CHANGES.rst
M plone/scale/scale.py
M plone/scale/tests/test_scale.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 0c12894..a4d401c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -15,6 +15,10 @@ New features:
 
 Bug fixes:
 
+- Only convert JPEG to greyscale if they actually are and not when the image
+  has less than 256 colors. This bug was introduced in 2.1 with PR #13.
+  [fschulze]
+
 - Preserve color profile in scaled images.
   [fschulze]
 
diff --git a/plone/scale/scale.py b/plone/scale/scale.py
index 1c20239..cd3d5d4 100644
--- a/plone/scale/scale.py
+++ b/plone/scale/scale.py
@@ -52,9 +52,12 @@ def scaleImage(image, width=None, height=None, direction='down',
     image = scalePILImage(image, width, height, direction)
 
     # convert to simpler mode if possible
-    if image.mode not in ('P', 'L') and image.getcolors(maxcolors=256):
+    colors = image.getcolors(maxcolors=256)
+    if image.mode not in ('P', 'L') and colors:
         if format_ == 'JPEG':
-            image = image.convert('L')
+            # check if it's all grey
+            if all(rgb[0] == rgb[1] == rgb[2] for c, rgb in colors):
+                image = image.convert('L')
         elif format_ == 'PNG':
             image = image.convert('P')
 
diff --git a/plone/scale/tests/test_scale.py b/plone/scale/tests/test_scale.py
index 843b64d..9f63b20 100644
--- a/plone/scale/tests/test_scale.py
+++ b/plone/scale/tests/test_scale.py
@@ -5,7 +5,7 @@
 from unittest import TestCase
 
 import os.path
-import PIL.Image
+import PIL.Image, PIL.ImageDraw
 
 
 PNG = open(os.path.join(TEST_DATA_LOCATION, "logo.png")).read()
@@ -47,6 +47,47 @@ def testScaledPreservesProfile(self):
         image = PIL.Image.open(input)
         self.assertIsNotNone(image.info.get('icc_profile'))
 
+    def testScaleWithFewColorsStaysColored(self):
+        (imagedata, format, size) = scaleImage(PROFILE, 16, None, "down")
+        image = PIL.Image.open(StringIO(imagedata))
+        self.assertEqual(max(image.size), 16)
+        self.assertEqual(image.mode, 'RGB')
+        self.assertEqual(image.format, 'JPEG')
+
+    def testAutomaticGreyscale(self):
+        src = PIL.Image.new("RGB", (256, 256), (255, 255, 255))
+        draw = PIL.ImageDraw.Draw(src)
+        for i in range(0, 256):
+            draw.line(((0, i), (256, i)), fill=(i, i, i))
+        result = StringIO()
+        src.save(result, "JPEG")
+        (imagedata, format, size) = scaleImage(result, 200, None, "down")
+        image = PIL.Image.open(StringIO(imagedata))
+        self.assertEqual(max(image.size), 200)
+        self.assertEqual(image.mode, 'L')
+        self.assertEqual(image.format, 'JPEG')
+
+    def testAutomaticPalette(self):
+        # get a JPEG with more than 256 colors
+        jpeg = PIL.Image.open(StringIO(PROFILE))
+        self.assertEqual(jpeg.mode, 'RGB')
+        self.assertEqual(jpeg.format, 'JPEG')
+        self.assertIsNone(jpeg.getcolors(maxcolors=256))
+        # convert to PNG
+        dst = StringIO()
+        jpeg.save(dst, "PNG")
+        dst.seek(0)
+        png = PIL.Image.open(dst)
+        self.assertEqual(png.mode, 'RGB')
+        self.assertEqual(png.format, 'PNG')
+        self.assertIsNone(png.getcolors(maxcolors=256))
+        # scale it to a size where we get less than 256 colors
+        (imagedata, format, size) = scaleImage(dst.getvalue(), 24, None, "down")
+        image = PIL.Image.open(StringIO(imagedata))
+        # we should now have an image in palette mode
+        self.assertEqual(image.mode, 'P')
+        self.assertEqual(image.format, 'PNG')
+
     def testSameSizeDownScale(self):
         self.assertEqual(scaleImage(PNG, 84, 103, "down")[2], (84, 103))
 
diff --git a/setup.py b/setup.py
index aa91535..9fc8473 100644
--- a/setup.py
+++ b/setup.py
@@ -2,7 +2,7 @@
 from setuptools import find_packages
 from setuptools import setup
 
-version = '2.1.1.dev0'
+version = '2.1.1.dev1'
 readme = open('README.rst').read().replace(':class:', '').replace(':mod:', '')
 changes = open('CHANGES.rst').read()
 


