Repository: plone.scale


Branch: refs/heads/master
Date: 2017-09-17T12:35:02+02:00
Author: Florian Schulze (fschulze) <florian.schulze@gmx.net>
Commit: https://github.com/plone/plone.scale/commit/b5ea13998daf536ed2d75ed78db66b616c801a0f

Restore scale down behaviour from 1.x series without the huge memory usage.

Files changed:
M CHANGES.rst
M plone/scale/scale.py
M plone/scale/tests/test_scale.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 3a662f3..e4e938f 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -2,12 +2,13 @@ Changelog
 =========
 
 
-2.2.1 (unreleased)
-------------------
+3.0 (unreleased)
+----------------
 
 Breaking changes:
 
-- *add item here*
+- Restore scale down behaviour from 1.x series without the huge memory usage.
+  [fschulze]
 
 New features:
 
diff --git a/plone/scale/scale.py b/plone/scale/scale.py
index be4a52a..0374eae 100644
--- a/plone/scale/scale.py
+++ b/plone/scale/scale.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 import PIL.Image
 import PIL.ImageFile
+import math
 import sys
 import warnings
 
@@ -190,17 +191,6 @@ def scalePILImage(image, width=None, height=None, direction='down'):
     if width is not None:
         factor_width = (float(width) / float(image.size[0]))
 
-    if (none_as_int(factor_height) >= 1 or none_as_int(factor_width) >= 1
-            ) and direction == 'down':
-        # However, for this example scaling calculations after this block fail
-        # badly:
-        # - image with size (129, 100)
-        # - target boxed size (400, 99999)
-        # - we get a factor_width, factor_height: (3.10077519379845, 249.9975)
-        #   and new_width, new_height of (128999, 99999)
-        #   that brings down PIL by eating all the available memory.
-        return image
-
     if factor_height == factor_width:
         # The original already has the right aspect ratio, so we only need
         # to scale.
@@ -225,14 +215,40 @@ def scalePILImage(image, width=None, height=None, direction='down'):
     if (width is None or (height is not None and not use_height)):
         new_width = int(round(image.size[0] * factor_height))
 
+    crop = (
+        (width is not None and new_width > width) or
+        (height is not None and new_height > height))
+
+    if crop:
+        # crop image before scaling to avoid excessive memory use
+        if use_height:
+            image = image.crop((
+                0,
+                int(math.floor(((new_height - height) / 2.0) / factor_width)),
+                image.size[0],
+                int(math.ceil((((new_height - height) / 2.0) + height) / factor_width))))
+            new_height = int(round(image.size[1] * factor_width))
+        else:
+            image = image.crop((
+                int(math.floor(((new_width - width) / 2.0) / factor_height)),
+                0,
+                int(math.ceil((((new_width - width) / 2.0) + width) / factor_height)),
+                image.size[1]))
+            new_width = int(round(image.size[0] * factor_height))
+
+    if (new_width * new_height) > (8192 * 8192):
+        # The new image would be excessively large and eat up all memory while
+        # scaling, so return the potentially pre cropped image
+        return image
+
     image.draft(image.mode, (new_width, new_height))
     image = image.resize((new_width, new_height), PIL.Image.ANTIALIAS)
 
-    # cropping
-    if (
+    crop = (
         (width is not None and new_width > width) or
-        (height is not None and new_height > height)
-    ):
+        (height is not None and new_height > height))
+
+    if crop:
         if use_height:
             left = 0
             right = new_width
@@ -244,4 +260,5 @@ def scalePILImage(image, width=None, height=None, direction='down'):
             top = 0
             bottom = new_height
         image = image.crop((left, top, right, bottom))
+
     return image
diff --git a/plone/scale/tests/test_scale.py b/plone/scale/tests/test_scale.py
index ad2f89e..762055f 100644
--- a/plone/scale/tests/test_scale.py
+++ b/plone/scale/tests/test_scale.py
@@ -102,7 +102,27 @@ def testScaleWithCropDownScale(self):
         self.assertEqual(scaleImage(PNG, 20, 51, "down")[2], (20, 51))
 
     def testNoStretchingDownScale(self):
-        self.assertEqual(scaleImage(PNG, 200, 103, "down")[2], (84, 103))
+        self.assertEqual(scaleImage(PNG, 200, 103, "down")[2], (200, 103))
+
+    def testHugeScale(self):
+        # the image will be cropped, but not scaled
+        self.assertEqual(scaleImage(PNG, 400, 99999, "down")[2], (2, 103))
+
+    def testCropPreWideScaleUnspecifiedHeight(self):
+        image = scaleImage(PNG, 400, None, "down")
+        self.assertEqual(image[2], (400, 490))
+
+    def testCropPreWideScale(self):
+        image = scaleImage(PNG, 400, 100, "down")
+        self.assertEqual(image[2], (400, 100))
+
+    def testCropPreTallScaleUnspecifiedWidth(self):
+        image = scaleImage(PNG, None, 400, "down")
+        self.assertEqual(image[2], (326, 400))
+
+    def testCropPreTallScale(self):
+        image = scaleImage(PNG, 100, 400, "down")
+        self.assertEqual(image[2], (100, 400))
 
     def testRestrictWidthOnlyDownScaleNone(self):
         self.assertEqual(scaleImage(PNG, 42, None, "down")[2], (42, 52))
diff --git a/setup.py b/setup.py
index 5d58913..c0431c5 100644
--- a/setup.py
+++ b/setup.py
@@ -2,7 +2,7 @@
 from setuptools import find_packages
 from setuptools import setup
 
-version = '2.2.1.dev0'
+version = '3.0.dev0'
 readme = open('README.rst').read().replace(':class:', '').replace(':mod:', '')
 changes = open('CHANGES.rst').read()
 


Repository: plone.scale


Branch: refs/heads/master
Date: 2017-09-19T12:02:35+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.scale/commit/bad83f55a4f5fc14abcba8e0674a3d03ac5a2ef7

Merge pull request #27 from fschulze/fix-scale-down-memory-consumption

Restore scale down behaviour from 1.x series without the huge memory usage.

Files changed:
M CHANGES.rst
M plone/scale/scale.py
M plone/scale/tests/test_scale.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 3a662f3..e4e938f 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -2,12 +2,13 @@ Changelog
 =========
 
 
-2.2.1 (unreleased)
-------------------
+3.0 (unreleased)
+----------------
 
 Breaking changes:
 
-- *add item here*
+- Restore scale down behaviour from 1.x series without the huge memory usage.
+  [fschulze]
 
 New features:
 
diff --git a/plone/scale/scale.py b/plone/scale/scale.py
index be4a52a..0374eae 100644
--- a/plone/scale/scale.py
+++ b/plone/scale/scale.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 import PIL.Image
 import PIL.ImageFile
+import math
 import sys
 import warnings
 
@@ -190,17 +191,6 @@ def scalePILImage(image, width=None, height=None, direction='down'):
     if width is not None:
         factor_width = (float(width) / float(image.size[0]))
 
-    if (none_as_int(factor_height) >= 1 or none_as_int(factor_width) >= 1
-            ) and direction == 'down':
-        # However, for this example scaling calculations after this block fail
-        # badly:
-        # - image with size (129, 100)
-        # - target boxed size (400, 99999)
-        # - we get a factor_width, factor_height: (3.10077519379845, 249.9975)
-        #   and new_width, new_height of (128999, 99999)
-        #   that brings down PIL by eating all the available memory.
-        return image
-
     if factor_height == factor_width:
         # The original already has the right aspect ratio, so we only need
         # to scale.
@@ -225,14 +215,40 @@ def scalePILImage(image, width=None, height=None, direction='down'):
     if (width is None or (height is not None and not use_height)):
         new_width = int(round(image.size[0] * factor_height))
 
+    crop = (
+        (width is not None and new_width > width) or
+        (height is not None and new_height > height))
+
+    if crop:
+        # crop image before scaling to avoid excessive memory use
+        if use_height:
+            image = image.crop((
+                0,
+                int(math.floor(((new_height - height) / 2.0) / factor_width)),
+                image.size[0],
+                int(math.ceil((((new_height - height) / 2.0) + height) / factor_width))))
+            new_height = int(round(image.size[1] * factor_width))
+        else:
+            image = image.crop((
+                int(math.floor(((new_width - width) / 2.0) / factor_height)),
+                0,
+                int(math.ceil((((new_width - width) / 2.0) + width) / factor_height)),
+                image.size[1]))
+            new_width = int(round(image.size[0] * factor_height))
+
+    if (new_width * new_height) > (8192 * 8192):
+        # The new image would be excessively large and eat up all memory while
+        # scaling, so return the potentially pre cropped image
+        return image
+
     image.draft(image.mode, (new_width, new_height))
     image = image.resize((new_width, new_height), PIL.Image.ANTIALIAS)
 
-    # cropping
-    if (
+    crop = (
         (width is not None and new_width > width) or
-        (height is not None and new_height > height)
-    ):
+        (height is not None and new_height > height))
+
+    if crop:
         if use_height:
             left = 0
             right = new_width
@@ -244,4 +260,5 @@ def scalePILImage(image, width=None, height=None, direction='down'):
             top = 0
             bottom = new_height
         image = image.crop((left, top, right, bottom))
+
     return image
diff --git a/plone/scale/tests/test_scale.py b/plone/scale/tests/test_scale.py
index ad2f89e..762055f 100644
--- a/plone/scale/tests/test_scale.py
+++ b/plone/scale/tests/test_scale.py
@@ -102,7 +102,27 @@ def testScaleWithCropDownScale(self):
         self.assertEqual(scaleImage(PNG, 20, 51, "down")[2], (20, 51))
 
     def testNoStretchingDownScale(self):
-        self.assertEqual(scaleImage(PNG, 200, 103, "down")[2], (84, 103))
+        self.assertEqual(scaleImage(PNG, 200, 103, "down")[2], (200, 103))
+
+    def testHugeScale(self):
+        # the image will be cropped, but not scaled
+        self.assertEqual(scaleImage(PNG, 400, 99999, "down")[2], (2, 103))
+
+    def testCropPreWideScaleUnspecifiedHeight(self):
+        image = scaleImage(PNG, 400, None, "down")
+        self.assertEqual(image[2], (400, 490))
+
+    def testCropPreWideScale(self):
+        image = scaleImage(PNG, 400, 100, "down")
+        self.assertEqual(image[2], (400, 100))
+
+    def testCropPreTallScaleUnspecifiedWidth(self):
+        image = scaleImage(PNG, None, 400, "down")
+        self.assertEqual(image[2], (326, 400))
+
+    def testCropPreTallScale(self):
+        image = scaleImage(PNG, 100, 400, "down")
+        self.assertEqual(image[2], (100, 400))
 
     def testRestrictWidthOnlyDownScaleNone(self):
         self.assertEqual(scaleImage(PNG, 42, None, "down")[2], (42, 52))
diff --git a/setup.py b/setup.py
index 5d58913..c0431c5 100644
--- a/setup.py
+++ b/setup.py
@@ -2,7 +2,7 @@
 from setuptools import find_packages
 from setuptools import setup
 
-version = '2.2.1.dev0'
+version = '3.0.dev0'
 readme = open('README.rst').read().replace(':class:', '').replace(':mod:', '')
 changes = open('CHANGES.rst').read()
 


