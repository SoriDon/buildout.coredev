Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-06-21T15:10:19+02:00
Author: Thomas Buchberger (buchi) <t.buchberger@4teamwork.ch>
Commit: https://github.com/plone/plone.restapi/commit/a00230d30e6c14bbd5a9341adddaa60f83f56e78

Return an error message if a referenced object can not be resolved

Files changed:
A news/738.bugfix
M src/plone/restapi/deserializer/relationfield.py
M src/plone/restapi/tests/test_dxfield_deserializer.py

b'diff --git a/news/738.bugfix b/news/738.bugfix\nnew file mode 100644\nindex 00000000..1d185c8d\n--- /dev/null\n+++ b/news/738.bugfix\n@@ -0,0 +1,2 @@\n+Return an error message if a referenced object can not be resolved.\n+[buchi]\ndiff --git a/src/plone/restapi/deserializer/relationfield.py b/src/plone/restapi/deserializer/relationfield.py\nindex f22e0f37..3d07b8a1 100644\n--- a/src/plone/restapi/deserializer/relationfield.py\n+++ b/src/plone/restapi/deserializer/relationfield.py\n@@ -28,6 +28,7 @@ def __call__(self, value):\n             # Resolve by intid\n             intids = queryUtility(IIntIds)\n             obj = intids.queryObject(value)\n+            resolved_by = "intid"\n         elif isinstance(value, six.string_types):\n             if six.PY2 and isinstance(value, six.text_type):\n                 value = value.encode("utf8")\n@@ -38,15 +39,23 @@ def __call__(self, value):\n             if value.startswith(portal_url):\n                 # Resolve by URL\n                 obj = portal.restrictedTraverse(value[len(portal_url) + 1 :], None)\n+                resolved_by = "URL"\n             elif value.startswith("/"):\n                 # Resolve by path\n                 obj = portal.restrictedTraverse(value.lstrip("/"), None)\n+                resolved_by = "path"\n             else:\n                 # Resolve by UID\n                 catalog = getToolByName(self.context, "portal_catalog")\n                 brain = catalog(UID=value)\n                 if brain:\n                     obj = brain[0].getObject()\n+                resolved_by = "UID"\n+\n+        if obj is None:\n+            raise ValueError(\n+                u"Could not resolve object for {}={}".format(resolved_by, value)\n+            )\n \n         self.field.validate(obj)\n         return obj\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex 29740455..27711f79 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -416,6 +416,44 @@ def test_relationchoice_deserialization_from_path_returns_document(self):\n         value = self.deserialize("test_relationchoice_field", u"/doc2")\n         self.assertEqual(doc2, value)\n \n+    def test_relationchoice_deserialization_from_invalid_intid_raises(self):\n+        with self.assertRaises(ValueError) as cm:\n+            self.deserialize("test_relationchoice_field", 123456789)\n+        self.assertEqual(\n+            str(cm.exception), u"Could not resolve object for intid=123456789"\n+        )\n+\n+    def test_relationchoice_deserialization_from_invalid_uid_raises(self):\n+        with self.assertRaises(ValueError) as cm:\n+            self.deserialize(\n+                "test_relationchoice_field",\n+                six.text_type("ac12b24913cf45c6863937367aacc263"),\n+            )\n+        self.assertEqual(\n+            str(cm.exception),\n+            u"Could not resolve object for UID=ac12b24913cf45c6863937367aacc263",\n+        )\n+\n+    def test_relationchoice_deserialization_from_invalid_url_raises(self):\n+        with self.assertRaises(ValueError) as cm:\n+            self.deserialize(\n+                "test_relationchoice_field",\n+                six.text_type("http://nohost/plone/doesnotexist"),\n+            )\n+        self.assertEqual(\n+            str(cm.exception),\n+            u"Could not resolve object for URL=http://nohost/plone/doesnotexist",\n+        )\n+\n+    def test_relationchoice_deserialization_from_invalid_path_raises(self):\n+        with self.assertRaises(ValueError) as cm:\n+            self.deserialize(\n+                "test_relationchoice_field", six.text_type("/doesnotexist")\n+            )\n+        self.assertEqual(\n+            str(cm.exception), u"Could not resolve object for path=/doesnotexist"\n+        )\n+\n     def test_relationlist_deserialization_returns_list_of_documents(self):\n         doc2 = self.portal[\n             self.portal.invokeFactory(\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-06-21T18:32:57+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/bfbc2c70b04b545e43bad81c141df7f5e99ddb7f

Merge pull request #756 from plone/unresolvable-error

Return an error message if a referenced object can not be resolved

Files changed:
A news/738.bugfix
M src/plone/restapi/deserializer/relationfield.py
M src/plone/restapi/tests/test_dxfield_deserializer.py

b'diff --git a/news/738.bugfix b/news/738.bugfix\nnew file mode 100644\nindex 00000000..1d185c8d\n--- /dev/null\n+++ b/news/738.bugfix\n@@ -0,0 +1,2 @@\n+Return an error message if a referenced object can not be resolved.\n+[buchi]\ndiff --git a/src/plone/restapi/deserializer/relationfield.py b/src/plone/restapi/deserializer/relationfield.py\nindex f22e0f37..3d07b8a1 100644\n--- a/src/plone/restapi/deserializer/relationfield.py\n+++ b/src/plone/restapi/deserializer/relationfield.py\n@@ -28,6 +28,7 @@ def __call__(self, value):\n             # Resolve by intid\n             intids = queryUtility(IIntIds)\n             obj = intids.queryObject(value)\n+            resolved_by = "intid"\n         elif isinstance(value, six.string_types):\n             if six.PY2 and isinstance(value, six.text_type):\n                 value = value.encode("utf8")\n@@ -38,15 +39,23 @@ def __call__(self, value):\n             if value.startswith(portal_url):\n                 # Resolve by URL\n                 obj = portal.restrictedTraverse(value[len(portal_url) + 1 :], None)\n+                resolved_by = "URL"\n             elif value.startswith("/"):\n                 # Resolve by path\n                 obj = portal.restrictedTraverse(value.lstrip("/"), None)\n+                resolved_by = "path"\n             else:\n                 # Resolve by UID\n                 catalog = getToolByName(self.context, "portal_catalog")\n                 brain = catalog(UID=value)\n                 if brain:\n                     obj = brain[0].getObject()\n+                resolved_by = "UID"\n+\n+        if obj is None:\n+            raise ValueError(\n+                u"Could not resolve object for {}={}".format(resolved_by, value)\n+            )\n \n         self.field.validate(obj)\n         return obj\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex 29740455..27711f79 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -416,6 +416,44 @@ def test_relationchoice_deserialization_from_path_returns_document(self):\n         value = self.deserialize("test_relationchoice_field", u"/doc2")\n         self.assertEqual(doc2, value)\n \n+    def test_relationchoice_deserialization_from_invalid_intid_raises(self):\n+        with self.assertRaises(ValueError) as cm:\n+            self.deserialize("test_relationchoice_field", 123456789)\n+        self.assertEqual(\n+            str(cm.exception), u"Could not resolve object for intid=123456789"\n+        )\n+\n+    def test_relationchoice_deserialization_from_invalid_uid_raises(self):\n+        with self.assertRaises(ValueError) as cm:\n+            self.deserialize(\n+                "test_relationchoice_field",\n+                six.text_type("ac12b24913cf45c6863937367aacc263"),\n+            )\n+        self.assertEqual(\n+            str(cm.exception),\n+            u"Could not resolve object for UID=ac12b24913cf45c6863937367aacc263",\n+        )\n+\n+    def test_relationchoice_deserialization_from_invalid_url_raises(self):\n+        with self.assertRaises(ValueError) as cm:\n+            self.deserialize(\n+                "test_relationchoice_field",\n+                six.text_type("http://nohost/plone/doesnotexist"),\n+            )\n+        self.assertEqual(\n+            str(cm.exception),\n+            u"Could not resolve object for URL=http://nohost/plone/doesnotexist",\n+        )\n+\n+    def test_relationchoice_deserialization_from_invalid_path_raises(self):\n+        with self.assertRaises(ValueError) as cm:\n+            self.deserialize(\n+                "test_relationchoice_field", six.text_type("/doesnotexist")\n+            )\n+        self.assertEqual(\n+            str(cm.exception), u"Could not resolve object for path=/doesnotexist"\n+        )\n+\n     def test_relationlist_deserialization_returns_list_of_documents(self):\n         doc2 = self.portal[\n             self.portal.invokeFactory(\n'

