Repository: plone.versioncheck


Branch: refs/heads/master
Date: 2017-05-29T14:07:10+02:00
Author: Alexander Loechel (loechel) <Alexander.Loechel@lmu.de>
Commit: https://github.com/plone/plone.versioncheck/commit/5bf30678f777ee5a8316d3d154c549621bd0eb73

fix relative path problem

Files changed:
A buildout.d/spam.cfg
M buildout.cfg
M src/plone/versioncheck/parser.py

diff --git a/buildout.cfg b/buildout.cfg
index fff059e..7862a70 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -13,6 +13,7 @@ extensions = plone.versioncheck
 extends =
     foo.cfg
     bar.cfg
+    buildout.d/spam.cfg
 
 versions = alt-versions
 versionannotations = my-versionannotations
diff --git a/buildout.d/spam.cfg b/buildout.d/spam.cfg
new file mode 100644
index 0000000..71e7478
--- /dev/null
+++ b/buildout.d/spam.cfg
@@ -0,0 +1,3 @@
+[versions]
+
+docutils = >= 0.13
diff --git a/src/plone/versioncheck/parser.py b/src/plone/versioncheck/parser.py
index e3fac26..5b57042 100644
--- a/src/plone/versioncheck/parser.py
+++ b/src/plone/versioncheck/parser.py
@@ -34,24 +34,28 @@ def nostdout():
 def _extract_versions_section(  # NOQA: C901
     session,
     filename,
+    base_dir=None,
     version_sections=None,
     annotations=None,
     relative=None,
     version_section_name=None,
     versionannotation_section_name='versionannotations'
 ):
+    if base_dir is None:
+        base_dir = os.path.dirname(os.path.abspath(filename))
     if version_sections is None:
         version_sections = OrderedDict()
     if annotations is None:
         annotations = OrderedDict()
+    #sys.stderr.write('\n- {0}'.format(filename))
+    if '://' not in filename:
+        if relative:
+            if filename.startswith(relative + '/'):
+                filename = filename[len(relative + '/'):]
+            filename = os.path.join(base_dir, relative, filename)
+        else:
+            filename = os.path.join(base_dir, filename)
     sys.stderr.write('\n- {0}'.format(filename))
-    if (
-        relative is not None and
-        '://' not in filename and
-        not filename.startswith('/') and
-        not filename.startswith(relative)
-    ):
-        filename = relative + '/' + filename
 
     try:
         with nostdout():
@@ -122,6 +126,7 @@ def _extract_versions_section(  # NOQA: C901
         _extract_versions_section(
             session,
             extend,
+            base_dir,
             version_sections,
             annotations,
             sub_relative,


Repository: plone.versioncheck


Branch: refs/heads/master
Date: 2017-05-29T14:09:52+02:00
Author: Alexander Loechel (loechel) <Alexander.Loechel@lmu.de>
Commit: https://github.com/plone/plone.versioncheck/commit/c45e8f58435cb480d6988238ac0e58c70d67086d

add changelog

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 0a83afc..4efd1f2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,8 @@ Changelog
 1.6.5 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Fix: Relative Paths should work now, tested with subdirectories.
+  [loechel]
 
 
 1.6.4 (2017-05-08)


Repository: plone.versioncheck


Branch: refs/heads/master
Date: 2017-05-29T15:43:51+02:00
Author: Alexander Loechel (loechel) <Alexander.Loechel@lmu.de>
Commit: https://github.com/plone/plone.versioncheck/commit/fe63b0eebd9d1de94fb5dbbf0931158e081ef4cc

fixed tests

Files changed:
M buildout.d/spam.cfg
M src/plone/versioncheck/parser.py
M tests/test_parser.py

diff --git a/buildout.d/spam.cfg b/buildout.d/spam.cfg
index 71e7478..c827eb3 100644
--- a/buildout.d/spam.cfg
+++ b/buildout.d/spam.cfg
@@ -1,3 +1,3 @@
-[versions]
+[alt-versions]
 
-docutils = >= 0.13
+lazy = >= 1.1
diff --git a/src/plone/versioncheck/parser.py b/src/plone/versioncheck/parser.py
index 5b57042..ebe77eb 100644
--- a/src/plone/versioncheck/parser.py
+++ b/src/plone/versioncheck/parser.py
@@ -47,7 +47,6 @@ def _extract_versions_section(  # NOQA: C901
         version_sections = OrderedDict()
     if annotations is None:
         annotations = OrderedDict()
-    #sys.stderr.write('\n- {0}'.format(filename))
     if '://' not in filename:
         if relative:
             if filename.startswith(relative + '/'):
@@ -93,12 +92,12 @@ def _extract_versions_section(  # NOQA: C901
                 gname=version_section_name,
                 nname=buildout['buildout'].get('versions')))
     if config.has_section(version_section_name):
-        version_sections[filename] = OrderedDict(
+        version_sections[os.path.basename(filename)] = OrderedDict(
             config.items(version_section_name)
         )
         sys.stderr.write(
             '\n  {0:d} entries in versions section.'.format(
-                len(version_sections[filename])
+                len(version_sections[os.path.basename(filename)])
             )
         )
 
@@ -106,12 +105,12 @@ def _extract_versions_section(  # NOQA: C901
     versionannotation_section_name = buildout['buildout'].get(
         'versionannotations', versionannotation_section_name)
     if config.has_section(versionannotation_section_name):
-        annotations[filename] = OrderedDict(
+        annotations[os.path.basename(filename)] = OrderedDict(
             config.items(versionannotation_section_name)
         )
         sys.stderr.write(
             '\n  {0:d} entries in annotations section.'.format(
-                len(annotations[filename])
+                len(annotations[os.path.basename(filename)])
             )
         )
     try:
diff --git a/tests/test_parser.py b/tests/test_parser.py
index 7b4713f..87dbeb9 100644
--- a/tests/test_parser.py
+++ b/tests/test_parser.py
@@ -25,11 +25,11 @@ def test_parse(capsys):
 
     result = parse(input, False)
     out, err = capsys.readouterr()
-    assert err[:108] == """Parsing buildout files:
-- buildout.cfg
+    assert err[:23] == "Parsing buildout files:"
+    assert """buildout.cfg
   3 entries in versions section.
   1 entries in annotations section.
-"""
+""" in err
 
     assert result == {
         'collective.quickupload': OrderedDict([
@@ -37,7 +37,10 @@ def test_parse(capsys):
             ('baz.cfg', {'v': '1.5.2', 'a': ''})
         ]),
         'ipython': OrderedDict([('buildout.cfg', {'v': '5.3.0', 'a': ''})]),
-        'lazy': OrderedDict([('buildout.cfg', {'v': '1.0', 'a': ''})]),
+        'lazy': OrderedDict([
+            ('buildout.cfg', {'v': '1.0', 'a': ''}),
+            ('spam.cfg', {'v': '>= 1.1', 'a': ''})
+        ]),
         'products.cmfcore': OrderedDict([
             ('buildout.cfg', {'v': '2.1.1', 'a': '\nJust a Test Case\nwith multiple lines'}),  # NOQA: E501
             ('bar.cfg', {'v': '2.2.0', 'a': ''}),


Repository: plone.versioncheck


Branch: refs/heads/master
Date: 2017-05-30T12:04:31+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.versioncheck/commit/40a118bcb8b8baa549b8b0bd2d858281106385bf

Merge pull request #44 from plone/relative_paths

fix relative path problem

Files changed:
A buildout.d/spam.cfg
M CHANGES.rst
M buildout.cfg
M src/plone/versioncheck/parser.py
M tests/test_parser.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 0a83afc..4efd1f2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,8 @@ Changelog
 1.6.5 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Fix: Relative Paths should work now, tested with subdirectories.
+  [loechel]
 
 
 1.6.4 (2017-05-08)
diff --git a/buildout.cfg b/buildout.cfg
index fff059e..7862a70 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -13,6 +13,7 @@ extensions = plone.versioncheck
 extends =
     foo.cfg
     bar.cfg
+    buildout.d/spam.cfg
 
 versions = alt-versions
 versionannotations = my-versionannotations
diff --git a/buildout.d/spam.cfg b/buildout.d/spam.cfg
new file mode 100644
index 0000000..c827eb3
--- /dev/null
+++ b/buildout.d/spam.cfg
@@ -0,0 +1,3 @@
+[alt-versions]
+
+lazy = >= 1.1
diff --git a/src/plone/versioncheck/parser.py b/src/plone/versioncheck/parser.py
index e3fac26..ebe77eb 100644
--- a/src/plone/versioncheck/parser.py
+++ b/src/plone/versioncheck/parser.py
@@ -34,24 +34,27 @@ def nostdout():
 def _extract_versions_section(  # NOQA: C901
     session,
     filename,
+    base_dir=None,
     version_sections=None,
     annotations=None,
     relative=None,
     version_section_name=None,
     versionannotation_section_name='versionannotations'
 ):
+    if base_dir is None:
+        base_dir = os.path.dirname(os.path.abspath(filename))
     if version_sections is None:
         version_sections = OrderedDict()
     if annotations is None:
         annotations = OrderedDict()
+    if '://' not in filename:
+        if relative:
+            if filename.startswith(relative + '/'):
+                filename = filename[len(relative + '/'):]
+            filename = os.path.join(base_dir, relative, filename)
+        else:
+            filename = os.path.join(base_dir, filename)
     sys.stderr.write('\n- {0}'.format(filename))
-    if (
-        relative is not None and
-        '://' not in filename and
-        not filename.startswith('/') and
-        not filename.startswith(relative)
-    ):
-        filename = relative + '/' + filename
 
     try:
         with nostdout():
@@ -89,12 +92,12 @@ def _extract_versions_section(  # NOQA: C901
                 gname=version_section_name,
                 nname=buildout['buildout'].get('versions')))
     if config.has_section(version_section_name):
-        version_sections[filename] = OrderedDict(
+        version_sections[os.path.basename(filename)] = OrderedDict(
             config.items(version_section_name)
         )
         sys.stderr.write(
             '\n  {0:d} entries in versions section.'.format(
-                len(version_sections[filename])
+                len(version_sections[os.path.basename(filename)])
             )
         )
 
@@ -102,12 +105,12 @@ def _extract_versions_section(  # NOQA: C901
     versionannotation_section_name = buildout['buildout'].get(
         'versionannotations', versionannotation_section_name)
     if config.has_section(versionannotation_section_name):
-        annotations[filename] = OrderedDict(
+        annotations[os.path.basename(filename)] = OrderedDict(
             config.items(versionannotation_section_name)
         )
         sys.stderr.write(
             '\n  {0:d} entries in annotations section.'.format(
-                len(annotations[filename])
+                len(annotations[os.path.basename(filename)])
             )
         )
     try:
@@ -122,6 +125,7 @@ def _extract_versions_section(  # NOQA: C901
         _extract_versions_section(
             session,
             extend,
+            base_dir,
             version_sections,
             annotations,
             sub_relative,
diff --git a/tests/test_parser.py b/tests/test_parser.py
index 7b4713f..87dbeb9 100644
--- a/tests/test_parser.py
+++ b/tests/test_parser.py
@@ -25,11 +25,11 @@ def test_parse(capsys):
 
     result = parse(input, False)
     out, err = capsys.readouterr()
-    assert err[:108] == """Parsing buildout files:
-- buildout.cfg
+    assert err[:23] == "Parsing buildout files:"
+    assert """buildout.cfg
   3 entries in versions section.
   1 entries in annotations section.
-"""
+""" in err
 
     assert result == {
         'collective.quickupload': OrderedDict([
@@ -37,7 +37,10 @@ def test_parse(capsys):
             ('baz.cfg', {'v': '1.5.2', 'a': ''})
         ]),
         'ipython': OrderedDict([('buildout.cfg', {'v': '5.3.0', 'a': ''})]),
-        'lazy': OrderedDict([('buildout.cfg', {'v': '1.0', 'a': ''})]),
+        'lazy': OrderedDict([
+            ('buildout.cfg', {'v': '1.0', 'a': ''}),
+            ('spam.cfg', {'v': '>= 1.1', 'a': ''})
+        ]),
         'products.cmfcore': OrderedDict([
             ('buildout.cfg', {'v': '2.1.1', 'a': '\nJust a Test Case\nwith multiple lines'}),  # NOQA: E501
             ('bar.cfg', {'v': '2.2.0', 'a': ''}),


