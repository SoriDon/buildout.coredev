Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-04-15T19:40:59+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.dexterity/commit/0b011f834718b85b06b65315e35e375339e06058

Fix issue where DefaultReadFile stream iterator did not produce bytes on Python 3

Files changed:
M plone/dexterity/filerepresentation.py

b"diff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py\nindex 75c318a..b3ee215 100644\n--- a/plone/dexterity/filerepresentation.py\n+++ b/plone/dexterity/filerepresentation.py\n@@ -689,13 +689,11 @@ def _getStream(self):\n         # publisher, which will serve it efficiently even after the\n         # transaction is closed\n         message = self._getMessage()\n+        out = tempfile.TemporaryFile(mode='w+b')\n         if six.PY2:\n-            # message.as_string will return str in both Python 2 and 3\n-            kw = {'mode': 'w+b'}\n+            out.write(message.as_string())\n         else:\n-            kw = {'mode': 'w+', 'encoding': 'utf-8'}\n-        out = tempfile.TemporaryFile(**kw)\n-        out.write(message.as_string())\n+            out.write(message.as_string().encode('utf-8'))\n         self._size = out.tell()\n         out.seek(0)\n         return out\n"

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-04-15T19:42:21+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.dexterity/commit/e5296b73d989af986b3cf67608a8ede363522ef9

Fix issue where DefaultWriteFile did not support parsing bytes on Python 3

Files changed:
M plone/dexterity/filerepresentation.py

b'diff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py\nindex b3ee215..2a6ab42 100644\n--- a/plone/dexterity/filerepresentation.py\n+++ b/plone/dexterity/filerepresentation.py\n@@ -836,7 +836,10 @@ def write(self, data):\n         if self._closed:\n             raise ValueError("File is closed")\n         self._written += len(data)\n-        self._parser.feed(data)\n+        if isinstance(data, bytes):\n+            self._parser.feed(data.decode(\'utf-8\'))\n+        else:\n+            self._parser.feed(data)\n \n     def writelines(self, sequence):\n         for item in sequence:\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-04-15T19:45:54+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.dexterity/commit/d6bb3a655edd6cc2a697f6481fd5ac6101c244d0

Add news item

Files changed:
A news/102.bugfix

b'diff --git a/news/102.bugfix b/news/102.bugfix\nnew file mode 100644\nindex 0000000..0355a95\n--- /dev/null\n+++ b/news/102.bugfix\n@@ -0,0 +1 @@\n+Fix WebDAV compatibility issues with ZServer on Python 3 [datakurre]\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-05-10T14:03:33+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.dexterity/commit/69653a66a172436cab76b8871f8555172875f582

Merge pull request #102 from plone/datakurre/webdav-python-3

Fix WebDav GET and PUT on Python 3

Files changed:
A news/102.bugfix
M plone/dexterity/filerepresentation.py

b'diff --git a/news/102.bugfix b/news/102.bugfix\nnew file mode 100644\nindex 0000000..0355a95\n--- /dev/null\n+++ b/news/102.bugfix\n@@ -0,0 +1 @@\n+Fix WebDAV compatibility issues with ZServer on Python 3 [datakurre]\ndiff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py\nindex 75c318a..2a6ab42 100644\n--- a/plone/dexterity/filerepresentation.py\n+++ b/plone/dexterity/filerepresentation.py\n@@ -689,13 +689,11 @@ def _getStream(self):\n         # publisher, which will serve it efficiently even after the\n         # transaction is closed\n         message = self._getMessage()\n+        out = tempfile.TemporaryFile(mode=\'w+b\')\n         if six.PY2:\n-            # message.as_string will return str in both Python 2 and 3\n-            kw = {\'mode\': \'w+b\'}\n+            out.write(message.as_string())\n         else:\n-            kw = {\'mode\': \'w+\', \'encoding\': \'utf-8\'}\n-        out = tempfile.TemporaryFile(**kw)\n-        out.write(message.as_string())\n+            out.write(message.as_string().encode(\'utf-8\'))\n         self._size = out.tell()\n         out.seek(0)\n         return out\n@@ -838,7 +836,10 @@ def write(self, data):\n         if self._closed:\n             raise ValueError("File is closed")\n         self._written += len(data)\n-        self._parser.feed(data)\n+        if isinstance(data, bytes):\n+            self._parser.feed(data.decode(\'utf-8\'))\n+        else:\n+            self._parser.feed(data)\n \n     def writelines(self, sequence):\n         for item in sequence:\n'

