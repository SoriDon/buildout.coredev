Repository: plone.app.users


Branch: refs/heads/master
Date: 2022-10-25T13:28:49+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.users/commit/055767d1d69f21f50b4fbac4f4b8e35bcf665c90

Add regression tests for issue 76: user info appears empty.

Actually, with the current code, test_regression_76_user_information fails and test_regression_76_personal_information passes.
With manual testing in a site, they both fail.

Files changed:
M plone/app/users/tests/test_schema_types.py

b'diff --git a/plone/app/users/tests/test_schema_types.py b/plone/app/users/tests/test_schema_types.py\nindex 869911c..9d7676e 100644\n--- a/plone/app/users/tests/test_schema_types.py\n+++ b/plone/app/users/tests/test_schema_types.py\n@@ -1,10 +1,11 @@\n # -*- coding: utf-8 -*-\n from pkg_resources import resource_stream\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.users.setuphandlers import import_schema\n-from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n from plone.testing.z2 import Browser\n from Products.GenericSetup.tests.common import DummyImportContext\n from plone.app.users.tests.base import BaseTestCase\n@@ -105,6 +106,7 @@ def setUp(self):\n         transaction.commit()\n \n         self.browser = Browser(self.layer[\'app\'])\n+        self.browser.handleErrors = False\n         self.request = self.layer[\'request\']\n \n     def test_schema_types(self):\n@@ -155,3 +157,95 @@ def test_schema_types(self):\n         self.assertEqual(member.getProperty(\'pi\'), 3.14)\n         self.assertTrue(isinstance(member.getProperty(\'vegetarian\'), bool))\n         self.assertEqual(member.getProperty(\'vegetarian\'), True)\n+\n+    def test_regression_76_user_information(self):\n+        # Test that issue 76 does not return: user info sometimes appears empty.\n+        # https://github.com/plone/plone.app.users/issues/76\n+        # Here we test as admin.\n+        portal_url = self.portal.absolute_url()\n+        self.browser.open(portal_url)\n+        self.browser.getLink(\'Log in\').click()\n+        self.browser.getControl(\'Login Name\').value = SITE_OWNER_NAME\n+        self.browser.getControl(\'Password\').value = SITE_OWNER_PASSWORD\n+        self.browser.getControl(\'Log in\').click()\n+\n+        # Set information for the test user.\n+        info_page = f"{portal_url}/@@user-information?userid={TEST_USER_ID}"\n+        self.browser.open(info_page)\n+        self.browser.getControl(\'Full Name\').value = \'Isaac Newton\'\n+        self.browser.getControl(\'Email\').value = \'isaac@cambridge.com\'\n+        self.browser.getControl(\'Age\').value = \'40\'\n+        self.browser.getControl(\'Save\').click()\n+\n+        # Open the page again, check that the information is set.\n+        self.browser.open(info_page)\n+        self.assertEqual(self.browser.getControl(\'Full Name\').value, \'Isaac Newton\')\n+        self.assertEqual(self.browser.getControl(\'Email\').value, \'isaac@cambridge.com\')\n+        self.assertEqual(self.browser.getControl(\'Age\').value, \'40\')\n+\n+        # Opening the new-user/register page used to be enough to trigger the problem.\n+        self.browser.open(f"{portal_url}/@@new-user")\n+\n+        # Any next calls to the user or personal information pages would show empty.\n+        self.browser.open(info_page)\n+        self.assertEqual(self.browser.getControl(\'Full Name\').value, \'Isaac Newton\')\n+        self.assertEqual(self.browser.getControl(\'Email\').value, \'isaac@cambridge.com\')\n+        self.assertEqual(self.browser.getControl(\'Age\').value, \'40\')\n+\n+    def _enable_self_registration(self):\n+        from plone.registry.interfaces import IRegistry\n+        from Products.CMFPlone.interfaces import ISecuritySchema\n+        from zope.component import getUtility\n+\n+        self.portal.manage_permission(\'Add portal member\', roles=[\'Anonymous\'])\n+        registry = getUtility(IRegistry)\n+        security_settings = registry.forInterface(ISecuritySchema, prefix="plone")\n+        security_settings.enable_user_pwd_choice = True\n+        transaction.commit()\n+\n+    def test_regression_76_personal_information(self):\n+        # Test that issue 76 does not return: personal info sometimes appears empty.\n+        # https://github.com/plone/plone.app.users/issues/76\n+        # Here we test as user.\n+        portal_url = self.portal.absolute_url()\n+        self.browser.open(portal_url)\n+        self.browser.getLink(\'Log in\').click()\n+        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n+        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n+        self.browser.getControl(\'Log in\').click()\n+\n+        # Set information for the test user.\n+        info_page = f"{portal_url}/@@personal-information"\n+        self.browser.open(info_page)\n+        self.browser.getControl(\'Full Name\').value = \'Isaac Newton\'\n+        self.browser.getControl(\'Email\').value = \'isaac@cambridge.com\'\n+        self.browser.getControl(\'Age\').value = \'40\'\n+        self.browser.getControl(\'Save\').click()\n+\n+        # Open the page again, check that the information is set.\n+        self.browser.open(info_page)\n+        self.assertEqual(self.browser.getControl(\'Full Name\').value, \'Isaac Newton\')\n+        self.assertEqual(self.browser.getControl(\'Email\').value, \'isaac@cambridge.com\')\n+        self.assertEqual(self.browser.getControl(\'Age\').value, \'40\')\n+\n+        # Enable self registration.\n+        self._enable_self_registration()\n+\n+        # Opening the new-user/register page used to be enough to trigger the problem.\n+        # Logout, try it, and login again.\n+        self.browser.open(f"{portal_url}/@@logout")\n+        self.browser.open(f"{portal_url}/@@register")\n+        # Check that the registration page is loading correctly.\n+        self.assertNotIn("This site doesn\'t have a valid email setup", self.browser.contents)\n+        self.assertIn("Enter your new password.", self.browser.contents)\n+\n+        self.browser.open(f"{portal_url}/@@login")\n+        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n+        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n+        self.browser.getControl(\'Log in\').click()\n+\n+        # Any next calls to the user or personal information pages would show empty.\n+        self.browser.open(info_page)\n+        self.assertEqual(self.browser.getControl(\'Full Name\').value, \'Isaac Newton\')\n+        self.assertEqual(self.browser.getControl(\'Email\').value, \'isaac@cambridge.com\')\n+        self.assertEqual(self.browser.getControl(\'Age\').value, \'40\')\n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2022-10-25T13:41:22+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.users/commit/3b9c508e126b345dd4ce9ac8b7e6f4d32d5b220e

For user schemas use a volatile cache on the request instead of on the portal.

This prevents seeing an empty user profile when you have custom user schemas.
This fixes https://github.com/plone/plone.app.users/issues/76.

Files changed:
A news/76.bugfix
M plone/app/users/browser/account.py
M plone/app/users/browser/register.py
M plone/app/users/browser/userdatapanel.py

b'diff --git a/news/76.bugfix b/news/76.bugfix\nnew file mode 100644\nindex 00000000..e8c5d6ad\n--- /dev/null\n+++ b/news/76.bugfix\n@@ -0,0 +1,4 @@\n+For user schemas use a volatile cache on the request instead of on the portal.\n+This prevents seeing an empty user profile when you have custom user schemas.\n+This fixes `issue 76 <https://github.com/plone/plone.app.users/issues/76>`_.\n+[maurits]\ndiff --git a/plone/app/users/browser/account.py b/plone/app/users/browser/account.py\nindex f13c085c..71384ed6 100644\n--- a/plone/app/users/browser/account.py\n+++ b/plone/app/users/browser/account.py\n@@ -1,7 +1,9 @@\n # -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from Acquisition import aq_inner\n+from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.users.browser.interfaces import IAccountPanelForm\n+from plone.app.users.browser.schemaeditor import getFromBaseSchema\n from plone.app.users.utils import notifyWidgetActionExecutionError\n from plone.autoform.form import AutoExtensibleForm\n from plone.namedfile.file import NamedBlobImage\n@@ -10,6 +12,7 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n from Products.CMFPlone.controlpanel.events import ConfigurationChangedEvent\n+from Products.CMFPlone.interfaces import IPloneSiteRoot\n from Products.CMFPlone.interfaces import ISecuritySchema\n from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n@@ -21,7 +24,9 @@\n from zope.cachedescriptors.property import Lazy as lazy_property\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n+from zope.component import provideAdapter\n from zope.event import notify\n+from zope.globalrequest import getRequest\n from zope.interface import implementer\n from ZTUtils import make_query\n \n@@ -38,6 +43,44 @@\n                u"name. Please choose another."))\n \n \n+def getSchema(schema_interface, schema_adapter, form_name=None):\n+    request = getRequest()\n+    form_name_to_request_attr_name = {\n+        "In User Profile": "_userdata_schema",\n+        "On Registration": "_register_schema",\n+        None: "_userdata_manager_schema",\n+    }\n+    request_attr_name = form_name_to_request_attr_name.pop(form_name, None)\n+    if request_attr_name is not None:\n+        schema = getattr(request, request_attr_name, None)\n+    else:\n+        schema = None\n+    if schema is None:\n+        schema = getFromBaseSchema(\n+            schema_interface,\n+            form_name=form_name\n+        )\n+        # Unset all request attr names.\n+        # We do not want other caches to linger.\n+        # See https://github.com/plone/plone.app.users/issues/76\n+        # This is in the unlikely case that you visit both the add-user/register form\n+        # and the user/personal-information form in one request,\n+        # maybe during a migration.\n+        for name in form_name_to_request_attr_name.values():\n+            try:\n+                delattr(request, name)\n+            except AttributeError:\n+                pass\n+        if request_attr_name is not None:\n+            setattr(request, request_attr_name, schema)\n+        # As schema is a generated supermodel,\n+        # needed adapters can only be registered at run time.\n+        # Note that this overrides previous adapters for the same interfaces.\n+        provideAdapter(schema_adapter, (IPloneSiteRoot,), schema)\n+        provideAdapter(schema_adapter, (INavigationRoot,), schema)\n+    return schema\n+\n+\n def isDefaultPortrait(value, portal):\n     default_portrait_value = getattr(portal, default_portrait, None)\n     return aq_inner(value) == aq_inner(default_portrait_value)\ndiff --git a/plone/app/users/browser/register.py b/plone/app/users/browser/register.py\nindex ee767a96..cf4df32a 100644\n--- a/plone/app/users/browser/register.py\n+++ b/plone/app/users/browser/register.py\n@@ -1,10 +1,9 @@\n # -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n-from Acquisition import aq_inner\n from plone.app.users.browser.account import AccountPanelSchemaAdapter\n+from plone.app.users.browser.account import getSchema\n from plone.app.users.browser.interfaces import ILoginNameGenerator\n from plone.app.users.browser.interfaces import IUserIdGenerator\n-from plone.app.users.browser.schemaeditor import getFromBaseSchema\n from plone.app.users.schema import IAddUserSchema\n from plone.app.users.schema import ICombinedRegisterSchema\n from plone.app.users.schema import IRegisterSchema\n@@ -17,10 +16,8 @@\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n from Products.CMFPlone.interfaces import ISecuritySchema\n from Products.CMFPlone.interfaces import IUserGroupsSettingsSchema\n-from Products.CMFPlone.utils import get_portal\n from Products.CMFPlone.utils import normalizeString\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n@@ -34,7 +31,6 @@\n from zope.component import getAdapter\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.component import provideAdapter\n from zope.component import queryUtility\n from zope.schema import getFieldNames\n \n@@ -47,16 +43,11 @@\n \n \n def getRegisterSchema():\n-    portal = get_portal()\n-    schema = getattr(portal, \'_v_register_schema\', None)\n-    if schema is None:\n-        portal._v_register_schema = schema = getFromBaseSchema(\n-            ICombinedRegisterSchema,\n-            form_name=u\'On Registration\'\n-        )\n-        # as schema is a generated supermodel,\n-        # needed adapters can only be registered at run time\n-        provideAdapter(AccountPanelSchemaAdapter, (IPloneSiteRoot,), schema)\n+    schema = getSchema(\n+        ICombinedRegisterSchema,\n+        AccountPanelSchemaAdapter,\n+        form_name=\'On Registration\',\n+    )\n     return schema\n \n \n@@ -722,4 +713,3 @@ def action_join(self, action):\n         self.request.response.redirect(\n             self.context.absolute_url() +\n             \'/@@usergroup-userprefs?searchstring=\' + user_id)\n-\ndiff --git a/plone/app/users/browser/userdatapanel.py b/plone/app/users/browser/userdatapanel.py\nindex e876765c..d0f61139 100644\n--- a/plone/app/users/browser/userdatapanel.py\n+++ b/plone/app/users/browser/userdatapanel.py\n@@ -1,21 +1,18 @@\n # -*- coding: utf-8 -*-\n from AccessControl.SecurityManagement import getSecurityManager\n-from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.users.browser.account import AccountPanelForm\n from plone.app.users.browser.account import AccountPanelSchemaAdapter\n-from plone.app.users.browser.schemaeditor import getFromBaseSchema\n+from plone.app.users.browser.account import getSchema\n from plone.app.users.schema import IUserDataSchema\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n from Products.CMFPlone.interfaces import ISecuritySchema\n from Products.CMFPlone.utils import get_portal\n from Products.CMFPlone.utils import set_own_login_name\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zExceptions import NotFound\n from zope.component import getUtility\n-from zope.component import provideAdapter\n \n try:\n     from html import escape\n@@ -103,23 +100,7 @@ def getUserDataSchema():\n     form_name = u\'In User Profile\'\n     if getSecurityManager().checkPermission(\'Manage portal\', portal):\n         form_name = None\n-    if form_name:\n-        schema = getattr(portal, \'_v_userdata_schema\', None)\n-    else:\n-        schema = getattr(portal, \'_v_userdata_manager_schema\', None)\n-    if schema is None:\n-        schema = getFromBaseSchema(\n-            IUserDataSchema,\n-            form_name=form_name\n-        )\n-        if form_name:\n-            portal._v_userdata_schema = schema\n-        else:\n-            portal._v_userdata_manager_schema = schema\n-        # as schema is a generated supermodel,\n-        # needed adapters can only be registered at run time\n-        provideAdapter(UserDataPanelAdapter, (IPloneSiteRoot,), schema)\n-        provideAdapter(UserDataPanelAdapter, (INavigationRoot,), schema)\n+    schema = getSchema(IUserDataSchema, UserDataPanelAdapter, form_name=form_name)\n     return schema\n \n \n@@ -127,4 +108,3 @@ class UserDataConfiglet(UserDataPanel):\n     """Control panel version of the userdata panel"""\n     template = ViewPageTemplateFile(\'account-configlet.pt\')\n     tab = "userdata"\n-\n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2022-10-31T15:38:38+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.users/commit/e32d33aaa019c9e8030c82a4cba730b438040e70

Merge pull request #114 from plone/maurits-issue-76-empty-user-profile

For user schemas use a volatile cache on the request instead of on the portal.

Files changed:
A news/76.bugfix
M plone/app/users/browser/account.py
M plone/app/users/browser/register.py
M plone/app/users/browser/userdatapanel.py
M plone/app/users/tests/test_schema_types.py

b'diff --git a/news/76.bugfix b/news/76.bugfix\nnew file mode 100644\nindex 00000000..e8c5d6ad\n--- /dev/null\n+++ b/news/76.bugfix\n@@ -0,0 +1,4 @@\n+For user schemas use a volatile cache on the request instead of on the portal.\n+This prevents seeing an empty user profile when you have custom user schemas.\n+This fixes `issue 76 <https://github.com/plone/plone.app.users/issues/76>`_.\n+[maurits]\ndiff --git a/plone/app/users/browser/account.py b/plone/app/users/browser/account.py\nindex f13c085c..71384ed6 100644\n--- a/plone/app/users/browser/account.py\n+++ b/plone/app/users/browser/account.py\n@@ -1,7 +1,9 @@\n # -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from Acquisition import aq_inner\n+from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.users.browser.interfaces import IAccountPanelForm\n+from plone.app.users.browser.schemaeditor import getFromBaseSchema\n from plone.app.users.utils import notifyWidgetActionExecutionError\n from plone.autoform.form import AutoExtensibleForm\n from plone.namedfile.file import NamedBlobImage\n@@ -10,6 +12,7 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n from Products.CMFPlone.controlpanel.events import ConfigurationChangedEvent\n+from Products.CMFPlone.interfaces import IPloneSiteRoot\n from Products.CMFPlone.interfaces import ISecuritySchema\n from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n@@ -21,7 +24,9 @@\n from zope.cachedescriptors.property import Lazy as lazy_property\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n+from zope.component import provideAdapter\n from zope.event import notify\n+from zope.globalrequest import getRequest\n from zope.interface import implementer\n from ZTUtils import make_query\n \n@@ -38,6 +43,44 @@\n                u"name. Please choose another."))\n \n \n+def getSchema(schema_interface, schema_adapter, form_name=None):\n+    request = getRequest()\n+    form_name_to_request_attr_name = {\n+        "In User Profile": "_userdata_schema",\n+        "On Registration": "_register_schema",\n+        None: "_userdata_manager_schema",\n+    }\n+    request_attr_name = form_name_to_request_attr_name.pop(form_name, None)\n+    if request_attr_name is not None:\n+        schema = getattr(request, request_attr_name, None)\n+    else:\n+        schema = None\n+    if schema is None:\n+        schema = getFromBaseSchema(\n+            schema_interface,\n+            form_name=form_name\n+        )\n+        # Unset all request attr names.\n+        # We do not want other caches to linger.\n+        # See https://github.com/plone/plone.app.users/issues/76\n+        # This is in the unlikely case that you visit both the add-user/register form\n+        # and the user/personal-information form in one request,\n+        # maybe during a migration.\n+        for name in form_name_to_request_attr_name.values():\n+            try:\n+                delattr(request, name)\n+            except AttributeError:\n+                pass\n+        if request_attr_name is not None:\n+            setattr(request, request_attr_name, schema)\n+        # As schema is a generated supermodel,\n+        # needed adapters can only be registered at run time.\n+        # Note that this overrides previous adapters for the same interfaces.\n+        provideAdapter(schema_adapter, (IPloneSiteRoot,), schema)\n+        provideAdapter(schema_adapter, (INavigationRoot,), schema)\n+    return schema\n+\n+\n def isDefaultPortrait(value, portal):\n     default_portrait_value = getattr(portal, default_portrait, None)\n     return aq_inner(value) == aq_inner(default_portrait_value)\ndiff --git a/plone/app/users/browser/register.py b/plone/app/users/browser/register.py\nindex ee767a96..cf4df32a 100644\n--- a/plone/app/users/browser/register.py\n+++ b/plone/app/users/browser/register.py\n@@ -1,10 +1,9 @@\n # -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n-from Acquisition import aq_inner\n from plone.app.users.browser.account import AccountPanelSchemaAdapter\n+from plone.app.users.browser.account import getSchema\n from plone.app.users.browser.interfaces import ILoginNameGenerator\n from plone.app.users.browser.interfaces import IUserIdGenerator\n-from plone.app.users.browser.schemaeditor import getFromBaseSchema\n from plone.app.users.schema import IAddUserSchema\n from plone.app.users.schema import ICombinedRegisterSchema\n from plone.app.users.schema import IRegisterSchema\n@@ -17,10 +16,8 @@\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n from Products.CMFPlone.interfaces import ISecuritySchema\n from Products.CMFPlone.interfaces import IUserGroupsSettingsSchema\n-from Products.CMFPlone.utils import get_portal\n from Products.CMFPlone.utils import normalizeString\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n@@ -34,7 +31,6 @@\n from zope.component import getAdapter\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.component import provideAdapter\n from zope.component import queryUtility\n from zope.schema import getFieldNames\n \n@@ -47,16 +43,11 @@\n \n \n def getRegisterSchema():\n-    portal = get_portal()\n-    schema = getattr(portal, \'_v_register_schema\', None)\n-    if schema is None:\n-        portal._v_register_schema = schema = getFromBaseSchema(\n-            ICombinedRegisterSchema,\n-            form_name=u\'On Registration\'\n-        )\n-        # as schema is a generated supermodel,\n-        # needed adapters can only be registered at run time\n-        provideAdapter(AccountPanelSchemaAdapter, (IPloneSiteRoot,), schema)\n+    schema = getSchema(\n+        ICombinedRegisterSchema,\n+        AccountPanelSchemaAdapter,\n+        form_name=\'On Registration\',\n+    )\n     return schema\n \n \n@@ -722,4 +713,3 @@ def action_join(self, action):\n         self.request.response.redirect(\n             self.context.absolute_url() +\n             \'/@@usergroup-userprefs?searchstring=\' + user_id)\n-\ndiff --git a/plone/app/users/browser/userdatapanel.py b/plone/app/users/browser/userdatapanel.py\nindex e876765c..d0f61139 100644\n--- a/plone/app/users/browser/userdatapanel.py\n+++ b/plone/app/users/browser/userdatapanel.py\n@@ -1,21 +1,18 @@\n # -*- coding: utf-8 -*-\n from AccessControl.SecurityManagement import getSecurityManager\n-from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.users.browser.account import AccountPanelForm\n from plone.app.users.browser.account import AccountPanelSchemaAdapter\n-from plone.app.users.browser.schemaeditor import getFromBaseSchema\n+from plone.app.users.browser.account import getSchema\n from plone.app.users.schema import IUserDataSchema\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n from Products.CMFPlone.interfaces import ISecuritySchema\n from Products.CMFPlone.utils import get_portal\n from Products.CMFPlone.utils import set_own_login_name\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zExceptions import NotFound\n from zope.component import getUtility\n-from zope.component import provideAdapter\n \n try:\n     from html import escape\n@@ -103,23 +100,7 @@ def getUserDataSchema():\n     form_name = u\'In User Profile\'\n     if getSecurityManager().checkPermission(\'Manage portal\', portal):\n         form_name = None\n-    if form_name:\n-        schema = getattr(portal, \'_v_userdata_schema\', None)\n-    else:\n-        schema = getattr(portal, \'_v_userdata_manager_schema\', None)\n-    if schema is None:\n-        schema = getFromBaseSchema(\n-            IUserDataSchema,\n-            form_name=form_name\n-        )\n-        if form_name:\n-            portal._v_userdata_schema = schema\n-        else:\n-            portal._v_userdata_manager_schema = schema\n-        # as schema is a generated supermodel,\n-        # needed adapters can only be registered at run time\n-        provideAdapter(UserDataPanelAdapter, (IPloneSiteRoot,), schema)\n-        provideAdapter(UserDataPanelAdapter, (INavigationRoot,), schema)\n+    schema = getSchema(IUserDataSchema, UserDataPanelAdapter, form_name=form_name)\n     return schema\n \n \n@@ -127,4 +108,3 @@ class UserDataConfiglet(UserDataPanel):\n     """Control panel version of the userdata panel"""\n     template = ViewPageTemplateFile(\'account-configlet.pt\')\n     tab = "userdata"\n-\ndiff --git a/plone/app/users/tests/test_schema_types.py b/plone/app/users/tests/test_schema_types.py\nindex 869911cf..9d7676e3 100644\n--- a/plone/app/users/tests/test_schema_types.py\n+++ b/plone/app/users/tests/test_schema_types.py\n@@ -1,10 +1,11 @@\n # -*- coding: utf-8 -*-\n from pkg_resources import resource_stream\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.users.setuphandlers import import_schema\n-from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n from plone.testing.z2 import Browser\n from Products.GenericSetup.tests.common import DummyImportContext\n from plone.app.users.tests.base import BaseTestCase\n@@ -105,6 +106,7 @@ def setUp(self):\n         transaction.commit()\n \n         self.browser = Browser(self.layer[\'app\'])\n+        self.browser.handleErrors = False\n         self.request = self.layer[\'request\']\n \n     def test_schema_types(self):\n@@ -155,3 +157,95 @@ def test_schema_types(self):\n         self.assertEqual(member.getProperty(\'pi\'), 3.14)\n         self.assertTrue(isinstance(member.getProperty(\'vegetarian\'), bool))\n         self.assertEqual(member.getProperty(\'vegetarian\'), True)\n+\n+    def test_regression_76_user_information(self):\n+        # Test that issue 76 does not return: user info sometimes appears empty.\n+        # https://github.com/plone/plone.app.users/issues/76\n+        # Here we test as admin.\n+        portal_url = self.portal.absolute_url()\n+        self.browser.open(portal_url)\n+        self.browser.getLink(\'Log in\').click()\n+        self.browser.getControl(\'Login Name\').value = SITE_OWNER_NAME\n+        self.browser.getControl(\'Password\').value = SITE_OWNER_PASSWORD\n+        self.browser.getControl(\'Log in\').click()\n+\n+        # Set information for the test user.\n+        info_page = f"{portal_url}/@@user-information?userid={TEST_USER_ID}"\n+        self.browser.open(info_page)\n+        self.browser.getControl(\'Full Name\').value = \'Isaac Newton\'\n+        self.browser.getControl(\'Email\').value = \'isaac@cambridge.com\'\n+        self.browser.getControl(\'Age\').value = \'40\'\n+        self.browser.getControl(\'Save\').click()\n+\n+        # Open the page again, check that the information is set.\n+        self.browser.open(info_page)\n+        self.assertEqual(self.browser.getControl(\'Full Name\').value, \'Isaac Newton\')\n+        self.assertEqual(self.browser.getControl(\'Email\').value, \'isaac@cambridge.com\')\n+        self.assertEqual(self.browser.getControl(\'Age\').value, \'40\')\n+\n+        # Opening the new-user/register page used to be enough to trigger the problem.\n+        self.browser.open(f"{portal_url}/@@new-user")\n+\n+        # Any next calls to the user or personal information pages would show empty.\n+        self.browser.open(info_page)\n+        self.assertEqual(self.browser.getControl(\'Full Name\').value, \'Isaac Newton\')\n+        self.assertEqual(self.browser.getControl(\'Email\').value, \'isaac@cambridge.com\')\n+        self.assertEqual(self.browser.getControl(\'Age\').value, \'40\')\n+\n+    def _enable_self_registration(self):\n+        from plone.registry.interfaces import IRegistry\n+        from Products.CMFPlone.interfaces import ISecuritySchema\n+        from zope.component import getUtility\n+\n+        self.portal.manage_permission(\'Add portal member\', roles=[\'Anonymous\'])\n+        registry = getUtility(IRegistry)\n+        security_settings = registry.forInterface(ISecuritySchema, prefix="plone")\n+        security_settings.enable_user_pwd_choice = True\n+        transaction.commit()\n+\n+    def test_regression_76_personal_information(self):\n+        # Test that issue 76 does not return: personal info sometimes appears empty.\n+        # https://github.com/plone/plone.app.users/issues/76\n+        # Here we test as user.\n+        portal_url = self.portal.absolute_url()\n+        self.browser.open(portal_url)\n+        self.browser.getLink(\'Log in\').click()\n+        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n+        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n+        self.browser.getControl(\'Log in\').click()\n+\n+        # Set information for the test user.\n+        info_page = f"{portal_url}/@@personal-information"\n+        self.browser.open(info_page)\n+        self.browser.getControl(\'Full Name\').value = \'Isaac Newton\'\n+        self.browser.getControl(\'Email\').value = \'isaac@cambridge.com\'\n+        self.browser.getControl(\'Age\').value = \'40\'\n+        self.browser.getControl(\'Save\').click()\n+\n+        # Open the page again, check that the information is set.\n+        self.browser.open(info_page)\n+        self.assertEqual(self.browser.getControl(\'Full Name\').value, \'Isaac Newton\')\n+        self.assertEqual(self.browser.getControl(\'Email\').value, \'isaac@cambridge.com\')\n+        self.assertEqual(self.browser.getControl(\'Age\').value, \'40\')\n+\n+        # Enable self registration.\n+        self._enable_self_registration()\n+\n+        # Opening the new-user/register page used to be enough to trigger the problem.\n+        # Logout, try it, and login again.\n+        self.browser.open(f"{portal_url}/@@logout")\n+        self.browser.open(f"{portal_url}/@@register")\n+        # Check that the registration page is loading correctly.\n+        self.assertNotIn("This site doesn\'t have a valid email setup", self.browser.contents)\n+        self.assertIn("Enter your new password.", self.browser.contents)\n+\n+        self.browser.open(f"{portal_url}/@@login")\n+        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n+        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n+        self.browser.getControl(\'Log in\').click()\n+\n+        # Any next calls to the user or personal information pages would show empty.\n+        self.browser.open(info_page)\n+        self.assertEqual(self.browser.getControl(\'Full Name\').value, \'Isaac Newton\')\n+        self.assertEqual(self.browser.getControl(\'Email\').value, \'isaac@cambridge.com\')\n+        self.assertEqual(self.browser.getControl(\'Age\').value, \'40\')\n'

