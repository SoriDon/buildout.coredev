Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-04-15T09:46:17+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/0458c7341b7c36b17c5a7dbd68bc249303db0841

Upgrade profiles of core Plone modules to specific versions.

Fixes https://github.com/plone/Products.CMFPlone/issues/3346
Added tests.

Files changed:
A news/3346.feature
M plone/app/upgrade/v60/alphas.py
M plone/app/upgrade/v60/configure.zcml
M plone/app/upgrade/v60/tests.py

b'diff --git a/news/3346.feature b/news/3346.feature\nnew file mode 100644\nindex 00000000..08c052c9\n--- /dev/null\n+++ b/news/3346.feature\n@@ -0,0 +1,3 @@\n+Upgrade profiles of core Plone modules to specific versions.\n+See `issue 3346 <https://github.com/plone/Products.CMFPlone/issues/3346>`_.\n+[maurits]\ndiff --git a/plone/app/upgrade/v60/alphas.py b/plone/app/upgrade/v60/alphas.py\nindex 7445b984..47a39e63 100644\n--- a/plone/app/upgrade/v60/alphas.py\n+++ b/plone/app/upgrade/v60/alphas.py\n@@ -321,3 +321,71 @@ def sorter(value):\n \n     # Explicitly save the record.\n     record.value = new_value\n+\n+\n+def upgrade_plone_module_profiles(context):\n+    """Upgrade profiles of core Plone modules to specific versions.\n+\n+    This means: all packages that are installed when you use the Plone package.\n+    So this includes optional packages, like multilingual and plone.volto.\n+    We want to upgrade all of them to a specific version.\n+\n+    Originally, when you upgrade a Plone 5.2 site to Plone 6.2, this happened:\n+\n+    * We run all upgrade steps for Products.CMFPlone:plone to Plone 6.2.\n+    * Then we run all upgrade steps of the other modules.\n+\n+    The danger is that an upgrade step that works now when Plone 6.0 alpha\n+    is the latest release, will not work when run on a 6.2 site.\n+    Or it may undo a plone.app.upgrade fix from 6.1.\n+\n+    So the new idea is:\n+\n+    * We run all upgrade steps for Products.CMFPlone:plone to Plone 6.0 alpha or\n+      beta, wherever we decide to put this function.\n+    * Then we call this function.  This runs all upgrade steps of the modules that\n+      were defined around that alpha/beta time.\n+    * Then we run the rest of the upgrade steps for Products.CMFPlone:plone to 6.2.\n+    * Then run any remaining upgrade steps for the other modules.\n+\n+    See https://github.com/plone/Products.CMFPlone/issues/3346\n+\n+    You can generate an up to date list if you first activate all modules,\n+    and then with `bin/instance debug` do this:\n+\n+    >>> tool = app.Plone.portal_setup\n+    >>> for profile_id in tool.listProfilesWithUpgrades():\n+    ...     version = ".".join(tool.getLastVersionForProfile(profile_id))\n+    ...     print(f\'("{profile_id}", "{version}"),\')\n+\n+    You must remove Products.CMFPlone:plone from the printed list:\n+    it would lead to recursion.\n+\n+    Also, you may need to fix the plone.app.iterate version if it is unknown,\n+    due to a \'default\' and \'plone.app.iterate\' profile:\n+\n+    >>> tool.getLastVersionForProfile(\'plone.app.iterate:default\')\n+\n+    See https://github.com/plone/plone.app.iterate/issues/99\n+    """\n+    profile_versions = (\n+        ("Products.CMFEditions:CMFEditions", "11"),\n+        ("Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow", "1000"),\n+        # Do NOT add Products.CMFPlone:plone in here: it leads to recursion.\n+        ("Products.PlonePAS:PlonePAS", "5"),\n+        ("plone.app.caching:default", "3"),\n+        ("plone.app.contenttypes:default", "3000"),\n+        ("plone.app.dexterity:default", "2006"),\n+        ("plone.app.discussion:default", "1004"),\n+        ("plone.app.event:default", "15"),\n+        ("plone.app.iterate:default", "121"),\n+        ("plone.app.multilingual:default", "4"),\n+        ("plone.app.querystring:default", "13"),\n+        ("plone.app.theming:default", "1002"),\n+        ("plone.app.users:default", "1"),\n+        ("plone.restapi:default", "0006"),\n+        ("plone.staticresources:default", "209"),\n+        ("plone.volto:default", "1016"),\n+    )\n+    for profile_id, version in profile_versions:\n+        context.upgradeProfile(profile_id, dest=version, quiet=True)\ndiff --git a/plone/app/upgrade/v60/configure.zcml b/plone/app/upgrade/v60/configure.zcml\nindex 288ea97f..4a72b7ee 100644\n--- a/plone/app/upgrade/v60/configure.zcml\n+++ b/plone/app/upgrade/v60/configure.zcml\n@@ -110,6 +110,11 @@\n           import_profile="plone.app.upgrade.v60:to6005"\n           />\n \n+       <gs:upgradeStep\n+           title="Upgrade profiles of core Plone modules to specific versions."\n+           handler=".alphas.upgrade_plone_module_profiles"\n+           />\n+\n     </gs:upgradeSteps>\n \n </configure>\ndiff --git a/plone/app/upgrade/v60/tests.py b/plone/app/upgrade/v60/tests.py\nindex 78ca73e5..4d801ea7 100644\n--- a/plone/app/upgrade/v60/tests.py\n+++ b/plone/app/upgrade/v60/tests.py\n@@ -92,3 +92,45 @@ def test_add_new_image_scales(self):\n                 "or an empty line:",\n             ],\n         )\n+\n+    def test_upgrade_plone_module_profiles_dexterity(self):\n+        from plone.app.upgrade.v60.alphas import upgrade_plone_module_profiles\n+\n+        portal = self.layer["portal"]\n+        setup = getToolByName(portal, "portal_setup")\n+\n+        # We expect plone.app.dexterity to be at least at version 2006.\n+        # The version is a tuple like ("2006",)\n+        profile_id = "plone.app.dexterity:default"\n+        self.assertGreaterEqual(setup.getLastVersionForProfile(profile_id), ("2006",))\n+\n+        # Calling the upgrade step should not change this.\n+        upgrade_plone_module_profiles(setup)\n+        self.assertGreaterEqual(setup.getLastVersionForProfile(profile_id), ("2006",))\n+\n+        # Pretend that we are at an earlier version.\n+        # This should result in an upgrade to the exact requested version,\n+        # even when steps exist to upgrade it to a much newer version.\n+        setup.setLastVersionForProfile(profile_id, "2005")\n+        upgrade_plone_module_profiles(setup)\n+        self.assertEqual(setup.getLastVersionForProfile(profile_id), ("2006",))\n+\n+        # Pretend that we are at a later version.\n+        # The version should stay the same then, no downgrading.\n+        setup.setLastVersionForProfile(profile_id, "2007")\n+        upgrade_plone_module_profiles(setup)\n+        self.assertEqual(setup.getLastVersionForProfile(profile_id), ("2007",))\n+\n+    def test_upgrade_plone_module_profiles_multilingual(self):\n+        from plone.app.upgrade.v60.alphas import upgrade_plone_module_profiles\n+        from Products.GenericSetup.tool import UNKNOWN\n+\n+        portal = self.layer["portal"]\n+        setup = getToolByName(portal, "portal_setup")\n+\n+        # Upgrade steps are only run when the profile is already active.\n+        # Multilingual support is not active by default.\n+        profile_id = "plone.app.multilingual:default"\n+        self.assertEqual(setup.getLastVersionForProfile(profile_id), UNKNOWN)\n+        upgrade_plone_module_profiles(setup)\n+        self.assertEqual(setup.getLastVersionForProfile(profile_id), UNKNOWN)\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-04-15T17:32:40+02:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.app.upgrade/commit/ee807bd59e254656bd84efbd9c0342a08832b135

Merge pull request #289 from plone/maurits-upgrade-to-specific-versions

Upgrade profiles of core Plone modules to specific versions.

Files changed:
A news/3346.feature
M plone/app/upgrade/v60/alphas.py
M plone/app/upgrade/v60/configure.zcml
M plone/app/upgrade/v60/tests.py

b'diff --git a/news/3346.feature b/news/3346.feature\nnew file mode 100644\nindex 00000000..08c052c9\n--- /dev/null\n+++ b/news/3346.feature\n@@ -0,0 +1,3 @@\n+Upgrade profiles of core Plone modules to specific versions.\n+See `issue 3346 <https://github.com/plone/Products.CMFPlone/issues/3346>`_.\n+[maurits]\ndiff --git a/plone/app/upgrade/v60/alphas.py b/plone/app/upgrade/v60/alphas.py\nindex 7445b984..47a39e63 100644\n--- a/plone/app/upgrade/v60/alphas.py\n+++ b/plone/app/upgrade/v60/alphas.py\n@@ -321,3 +321,71 @@ def sorter(value):\n \n     # Explicitly save the record.\n     record.value = new_value\n+\n+\n+def upgrade_plone_module_profiles(context):\n+    """Upgrade profiles of core Plone modules to specific versions.\n+\n+    This means: all packages that are installed when you use the Plone package.\n+    So this includes optional packages, like multilingual and plone.volto.\n+    We want to upgrade all of them to a specific version.\n+\n+    Originally, when you upgrade a Plone 5.2 site to Plone 6.2, this happened:\n+\n+    * We run all upgrade steps for Products.CMFPlone:plone to Plone 6.2.\n+    * Then we run all upgrade steps of the other modules.\n+\n+    The danger is that an upgrade step that works now when Plone 6.0 alpha\n+    is the latest release, will not work when run on a 6.2 site.\n+    Or it may undo a plone.app.upgrade fix from 6.1.\n+\n+    So the new idea is:\n+\n+    * We run all upgrade steps for Products.CMFPlone:plone to Plone 6.0 alpha or\n+      beta, wherever we decide to put this function.\n+    * Then we call this function.  This runs all upgrade steps of the modules that\n+      were defined around that alpha/beta time.\n+    * Then we run the rest of the upgrade steps for Products.CMFPlone:plone to 6.2.\n+    * Then run any remaining upgrade steps for the other modules.\n+\n+    See https://github.com/plone/Products.CMFPlone/issues/3346\n+\n+    You can generate an up to date list if you first activate all modules,\n+    and then with `bin/instance debug` do this:\n+\n+    >>> tool = app.Plone.portal_setup\n+    >>> for profile_id in tool.listProfilesWithUpgrades():\n+    ...     version = ".".join(tool.getLastVersionForProfile(profile_id))\n+    ...     print(f\'("{profile_id}", "{version}"),\')\n+\n+    You must remove Products.CMFPlone:plone from the printed list:\n+    it would lead to recursion.\n+\n+    Also, you may need to fix the plone.app.iterate version if it is unknown,\n+    due to a \'default\' and \'plone.app.iterate\' profile:\n+\n+    >>> tool.getLastVersionForProfile(\'plone.app.iterate:default\')\n+\n+    See https://github.com/plone/plone.app.iterate/issues/99\n+    """\n+    profile_versions = (\n+        ("Products.CMFEditions:CMFEditions", "11"),\n+        ("Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow", "1000"),\n+        # Do NOT add Products.CMFPlone:plone in here: it leads to recursion.\n+        ("Products.PlonePAS:PlonePAS", "5"),\n+        ("plone.app.caching:default", "3"),\n+        ("plone.app.contenttypes:default", "3000"),\n+        ("plone.app.dexterity:default", "2006"),\n+        ("plone.app.discussion:default", "1004"),\n+        ("plone.app.event:default", "15"),\n+        ("plone.app.iterate:default", "121"),\n+        ("plone.app.multilingual:default", "4"),\n+        ("plone.app.querystring:default", "13"),\n+        ("plone.app.theming:default", "1002"),\n+        ("plone.app.users:default", "1"),\n+        ("plone.restapi:default", "0006"),\n+        ("plone.staticresources:default", "209"),\n+        ("plone.volto:default", "1016"),\n+    )\n+    for profile_id, version in profile_versions:\n+        context.upgradeProfile(profile_id, dest=version, quiet=True)\ndiff --git a/plone/app/upgrade/v60/configure.zcml b/plone/app/upgrade/v60/configure.zcml\nindex 288ea97f..4a72b7ee 100644\n--- a/plone/app/upgrade/v60/configure.zcml\n+++ b/plone/app/upgrade/v60/configure.zcml\n@@ -110,6 +110,11 @@\n           import_profile="plone.app.upgrade.v60:to6005"\n           />\n \n+       <gs:upgradeStep\n+           title="Upgrade profiles of core Plone modules to specific versions."\n+           handler=".alphas.upgrade_plone_module_profiles"\n+           />\n+\n     </gs:upgradeSteps>\n \n </configure>\ndiff --git a/plone/app/upgrade/v60/tests.py b/plone/app/upgrade/v60/tests.py\nindex 78ca73e5..4d801ea7 100644\n--- a/plone/app/upgrade/v60/tests.py\n+++ b/plone/app/upgrade/v60/tests.py\n@@ -92,3 +92,45 @@ def test_add_new_image_scales(self):\n                 "or an empty line:",\n             ],\n         )\n+\n+    def test_upgrade_plone_module_profiles_dexterity(self):\n+        from plone.app.upgrade.v60.alphas import upgrade_plone_module_profiles\n+\n+        portal = self.layer["portal"]\n+        setup = getToolByName(portal, "portal_setup")\n+\n+        # We expect plone.app.dexterity to be at least at version 2006.\n+        # The version is a tuple like ("2006",)\n+        profile_id = "plone.app.dexterity:default"\n+        self.assertGreaterEqual(setup.getLastVersionForProfile(profile_id), ("2006",))\n+\n+        # Calling the upgrade step should not change this.\n+        upgrade_plone_module_profiles(setup)\n+        self.assertGreaterEqual(setup.getLastVersionForProfile(profile_id), ("2006",))\n+\n+        # Pretend that we are at an earlier version.\n+        # This should result in an upgrade to the exact requested version,\n+        # even when steps exist to upgrade it to a much newer version.\n+        setup.setLastVersionForProfile(profile_id, "2005")\n+        upgrade_plone_module_profiles(setup)\n+        self.assertEqual(setup.getLastVersionForProfile(profile_id), ("2006",))\n+\n+        # Pretend that we are at a later version.\n+        # The version should stay the same then, no downgrading.\n+        setup.setLastVersionForProfile(profile_id, "2007")\n+        upgrade_plone_module_profiles(setup)\n+        self.assertEqual(setup.getLastVersionForProfile(profile_id), ("2007",))\n+\n+    def test_upgrade_plone_module_profiles_multilingual(self):\n+        from plone.app.upgrade.v60.alphas import upgrade_plone_module_profiles\n+        from Products.GenericSetup.tool import UNKNOWN\n+\n+        portal = self.layer["portal"]\n+        setup = getToolByName(portal, "portal_setup")\n+\n+        # Upgrade steps are only run when the profile is already active.\n+        # Multilingual support is not active by default.\n+        profile_id = "plone.app.multilingual:default"\n+        self.assertEqual(setup.getLastVersionForProfile(profile_id), UNKNOWN)\n+        upgrade_plone_module_profiles(setup)\n+        self.assertEqual(setup.getLastVersionForProfile(profile_id), UNKNOWN)\n'

