Repository: Products.Archetypes


Branch: refs/heads/master
Date: 2016-10-27T15:49:38+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.Archetypes/commit/41d0c025529206b44dbdeabb17e0fa39b63d07f5

moved script date_components_support.py from CMFPlone over here

Files changed:
A Products/Archetypes/skins/archetypes/date_components_support.py
A Products/Archetypes/tests/test_date_components_support_script.py
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 57e6501..4c32fba 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,10 @@ New features:
   Make AnnotationStorage awareness of it optional.
   [jensens]
 
+- moved script ``date_components_support.py`` from CMFPlone over here, 
+  hence its only used here.
+  [jensens]
+
 Bug fixes:
 
 - More flexible test of getBestIcon.
diff --git a/Products/Archetypes/skins/archetypes/date_components_support.py b/Products/Archetypes/skins/archetypes/date_components_support.py
new file mode 100644
index 0000000..c751867
--- /dev/null
+++ b/Products/Archetypes/skins/archetypes/date_components_support.py
@@ -0,0 +1,164 @@
+## Script (Python) "date_components_support"
+##bind container=container
+##bind context=context
+##bind namespace=
+##bind script=script
+##bind subpath=traverse_subpath
+##parameters=date=None, use_ampm=0, starting_year=None, ending_year=None, future_years=None, minute_step=5
+##title=
+
+from DateTime.interfaces import DateTimeError
+
+# 'id' is what shows up.  December for month 12.
+# 'value' is the value for the form.
+# 'selected' is whether or not it is selected.
+
+default = 0
+years = []
+days = []
+months = []
+hours = []
+minutes = []
+ampm = []
+now = DateTime()
+
+# from CMFPlone.DublinCore
+CEILING = DateTime(9999, 0)
+FLOOR = DateTime(1970, 0)
+PLONE_CEILING = DateTime(2021, 0)  # 2020-12-31
+
+
+def month_names():
+    names = {}
+    for x in range(1, 13):
+        faux = DateTime(2004, x, 1)
+        names[x] = faux.Month()
+    return names
+
+
+month_dict = month_names()
+
+# This debacle is because the date that is usually passed in ends with GMT
+# and of course DateTime is too stupid to handle it.  So we strip it off.
+
+if same_type(date, ''):
+    date = date.strip()
+    if not date:
+        date = None
+    elif date.split(' ')[-1].startswith('GMT'):
+        date = ' '.join(date.split(' ')[:-1])
+
+if date is None:
+    date = now
+    default = 1
+elif not same_type(date, now):
+    try:
+        date = DateTime(date)
+    except (TypeError, DateTimeError):
+        date = now
+        default = 1
+
+# Anything above PLONE_CEILING should be PLONE_CEILING
+if date.greaterThan(PLONE_CEILING):
+    date = PLONE_CEILING
+
+# Get portal year range
+registry = context.portal_registry
+if starting_year is None:
+    min_year = registry['Products.Archetypes.calendar_starting_year']
+else:
+    min_year = starting_year
+if ending_year is None:
+    if future_years is None:
+        max_year = registry['Products.Archetypes.calendar_future_years_available'] + now.year()
+    else:
+        max_year = future_years + now.year()
+else:
+    max_year = ending_year
+
+year = int(date.strftime('%Y'))
+
+if min_year != max_year:
+    years.append({'id': '--', 'value': '0000', 'selected': None})
+
+for x in range(min_year, max_year + 1):
+    d = {'id': x, 'value': x, 'selected': None}
+    if x == year:
+        d['selected'] = 1
+    years.append(d)
+
+month = int(date.strftime('%m'))
+
+if default:
+    months.append({'id': '--', 'value': '00', 'selected': 1})
+else:
+    months.append({'id': '--', 'value': '00', 'selected': None})
+
+for x in range(1, 13):
+    d = {'id': month_dict[x], 'value': '%02d' % x, 'selected': None}
+    if x == month and not default:
+        d['selected'] = 1
+    months.append(d)
+
+day = int(date.strftime('%d'))
+
+if default:
+    days.append({'id': '--', 'value': '00', 'selected': 1})
+else:
+    days.append({'id': '--', 'value': '00', 'selected': None})
+
+for x in range(1, 32):
+    d = {'id': x, 'value': '%02d' % x, 'selected': None}
+    if x == day and not default:
+        d['selected'] = 1
+    days.append(d)
+
+if use_ampm:
+    hours_range = [12] + range(1, 12)
+    hour_default = '12'
+    hour = int(date.strftime('%I'))
+else:
+    hours_range = range(0, 24)
+    hour_default = '00'
+    hour = int(date.strftime('%H'))
+
+if default:
+    hours.append({'id': '--', 'value': hour_default, 'selected': 1})
+else:
+    hours.append({'id': '--', 'value': hour_default, 'selected': None})
+
+for x in hours_range:
+    d = {'id': '%02d' % x, 'value': '%02d' % x, 'selected': None}
+    if x == hour and not default:
+        d['selected'] = 1
+    hours.append(d)
+
+minute = int(date.strftime('%M'))
+
+if default:
+    minutes.append({'id': '--', 'value': '00', 'selected': 1})
+else:
+    minutes.append({'id': '--', 'value': '00', 'selected': None})
+
+for x in range(0, 60, minute_step):
+    d = {'id': '%02d' % x, 'value': '%02d' % x, 'selected': None}
+    if (x == minute or minute < x < minute + minute_step) and not default:
+        d['selected'] = 1
+    minutes.append(d)
+
+if use_ampm:
+    p = date.strftime('%p')
+
+    if default:
+        ampm.append({'id': '--', 'value': 'AM', 'selected': 1})
+    else:
+        ampm.append({'id': '--', 'value': 'AM', 'selected': None})
+
+    for x in ('AM', 'PM'):
+        d = {'id': x, 'value': x, 'selected': None}
+        if x == p and not default:
+            d['selected'] = 1
+        ampm.append(d)
+
+return {'years': years, 'months': months, 'days': days,
+        'hours': hours, 'minutes': minutes, 'ampm': ampm}
diff --git a/Products/Archetypes/tests/test_date_components_support_script.py b/Products/Archetypes/tests/test_date_components_support_script.py
new file mode 100644
index 0000000..12edd38
--- /dev/null
+++ b/Products/Archetypes/tests/test_date_components_support_script.py
@@ -0,0 +1,491 @@
+# -*- coding: utf-8 -*-
+from plone.app.testing.bbb import PloneTestCase
+
+from DateTime import DateTime
+
+
+def sortTuple(t):
+    l = list(t)
+    l.sort()
+    return tuple(l)
+
+
+class TestDateComponentsSupport(PloneTestCase):
+
+    def afterSetUp(self):
+        date = DateTime(2002, 8, 1, 17, 42, 0)
+        self.d = self.portal.date_components_support(date)
+
+    def testElements(self):
+        self.assertEqual(sortTuple(self.d.keys()),
+                         ('ampm', 'days', 'hours', 'minutes', 'months', 'years'))
+
+    def testYears(self):
+        this_year = DateTime().year()
+        from plone.registry.interfaces import IRegistry
+        from zope.component import getUtility
+        registry = getUtility(IRegistry)
+        min_year = registry.get(
+            'Products.Archetypes.calendar_starting_year', 1999)
+        max_year = registry.get(
+            'Products.Archetypes.calendar_future_years_available', 5) + this_year
+
+        data = [
+            {'selected': None, 'id': '--', 'value': '0000'}
+        ]
+
+        for y in range(min_year, max_year + 1):
+            d = {'selected': None, 'id': y, 'value': y}
+            if y == 2002:
+                d['selected'] = 1
+            data.append(d)
+
+        years = self.d.get('years')
+        for i in range(max_year - min_year + 1):
+            self.assertEqual(years[i], data[i])
+
+    def testMonths(self):
+        data = [
+            {'selected': None, 'id': '--',        'value': '00'},
+            {'selected': None, 'id': 'January',   'value': '01'},
+            {'selected': None, 'id': 'February',  'value': '02'},
+            {'selected': None, 'id': 'March',     'value': '03'},
+            {'selected': None, 'id': 'April',     'value': '04'},
+            {'selected': None, 'id': 'May',       'value': '05'},
+            {'selected': None, 'id': 'June',      'value': '06'},
+            {'selected': None, 'id': 'July',      'value': '07'},
+            {'selected': 1,    'id': 'August',    'value': '08'},
+            {'selected': None, 'id': 'September', 'value': '09'},
+            {'selected': None, 'id': 'October',   'value': '10'},
+            {'selected': None, 'id': 'November',  'value': '11'},
+            {'selected': None, 'id': 'December',  'value': '12'},
+        ]
+
+        months = self.d.get('months')
+        for i in range(13):
+            self.assertEqual(months[i], data[i])
+
+    def testDays(self):
+        data = [
+            {'selected': None, 'id': '--',   'value': '00'},
+            {'selected': 1,    'id': 1,      'value': '01'},
+            {'selected': None, 'id': 2,      'value': '02'},
+            {'selected': None, 'id': 3,      'value': '03'},
+            {'selected': None, 'id': 4,      'value': '04'},
+            {'selected': None, 'id': 5,      'value': '05'},
+            {'selected': None, 'id': 6,      'value': '06'},
+            {'selected': None, 'id': 7,      'value': '07'},
+            {'selected': None, 'id': 8,      'value': '08'},
+            {'selected': None, 'id': 9,      'value': '09'},
+            {'selected': None, 'id': 10,     'value': '10'},
+            {'selected': None, 'id': 11,     'value': '11'},
+            {'selected': None, 'id': 12,     'value': '12'},
+            {'selected': None, 'id': 13,     'value': '13'},
+            {'selected': None, 'id': 14,     'value': '14'},
+            {'selected': None, 'id': 15,     'value': '15'},
+            {'selected': None, 'id': 16,     'value': '16'},
+            {'selected': None, 'id': 17,     'value': '17'},
+            {'selected': None, 'id': 18,     'value': '18'},
+            {'selected': None, 'id': 19,     'value': '19'},
+            {'selected': None, 'id': 20,     'value': '20'},
+            {'selected': None, 'id': 21,     'value': '21'},
+            {'selected': None, 'id': 22,     'value': '22'},
+            {'selected': None, 'id': 23,     'value': '23'},
+            {'selected': None, 'id': 24,     'value': '24'},
+            {'selected': None, 'id': 25,     'value': '25'},
+            {'selected': None, 'id': 26,     'value': '26'},
+            {'selected': None, 'id': 27,     'value': '27'},
+            {'selected': None, 'id': 28,     'value': '28'},
+            {'selected': None, 'id': 29,     'value': '29'},
+            {'selected': None, 'id': 30,     'value': '30'},
+            {'selected': None, 'id': 31,     'value': '31'},
+        ]
+
+        days = self.d.get('days')
+        for i in range(32):
+            self.assertEqual(days[i], data[i])
+
+    def testHours(self):
+        data = [
+            {'selected': None, 'id': '--',   'value': '00'},
+            {'selected': None, 'id': '00',   'value': '00'},
+            {'selected': None, 'id': '01',   'value': '01'},
+            {'selected': None, 'id': '02',   'value': '02'},
+            {'selected': None, 'id': '03',   'value': '03'},
+            {'selected': None, 'id': '04',   'value': '04'},
+            {'selected': None, 'id': '05',   'value': '05'},
+            {'selected': None, 'id': '06',   'value': '06'},
+            {'selected': None, 'id': '07',   'value': '07'},
+            {'selected': None, 'id': '08',   'value': '08'},
+            {'selected': None, 'id': '09',   'value': '09'},
+            {'selected': None, 'id': '10',   'value': '10'},
+            {'selected': None, 'id': '11',   'value': '11'},
+            {'selected': None, 'id': '12',   'value': '12'},
+            {'selected': None, 'id': '13',   'value': '13'},
+            {'selected': None, 'id': '14',   'value': '14'},
+            {'selected': None, 'id': '15',   'value': '15'},
+            {'selected': None, 'id': '16',   'value': '16'},
+            {'selected': 1,    'id': '17',   'value': '17'},
+            {'selected': None, 'id': '18',   'value': '18'},
+            {'selected': None, 'id': '19',   'value': '19'},
+            {'selected': None, 'id': '20',   'value': '20'},
+            {'selected': None, 'id': '21',   'value': '21'},
+            {'selected': None, 'id': '22',   'value': '22'},
+            {'selected': None, 'id': '23',   'value': '23'},
+        ]
+
+        hours = self.d.get('hours')
+        for i in range(25):
+            self.assertEqual(hours[i], data[i])
+
+    def testMinutes(self):
+        data = [
+            {'selected': None, 'id': '--',   'value': '00'},
+            {'selected': None, 'id': '00',   'value': '00'},
+            {'selected': None, 'id': '05',   'value': '05'},
+            {'selected': None, 'id': '10',   'value': '10'},
+            {'selected': None, 'id': '15',   'value': '15'},
+            {'selected': None, 'id': '20',   'value': '20'},
+            {'selected': None, 'id': '25',   'value': '25'},
+            {'selected': None, 'id': '30',   'value': '30'},
+            {'selected': None, 'id': '35',   'value': '35'},
+            {'selected': None, 'id': '40',   'value': '40'},
+            {'selected': 1,    'id': '45',   'value': '45'},
+            {'selected': None, 'id': '50',   'value': '50'},
+            {'selected': None, 'id': '55',   'value': '55'},
+        ]
+
+        minutes = self.d.get('minutes')
+        for i in range(13):
+            self.assertEqual(minutes[i], data[i])
+
+    def testAM(self):
+        d = DateTime(2002, 8, 1, 3, 0, 0)
+        d = self.portal.date_components_support(d)
+        self.assertEqual(d.get('ampm'), [])
+
+    def testPM(self):
+        ampm = self.d.get('ampm')
+        self.assertEqual(ampm, [])
+
+
+class TestDateComponentsSupportDefault(PloneTestCase):
+
+    def afterSetUp(self):
+        self.d = self.portal.date_components_support(None)
+
+    def testElements(self):
+        self.assertEqual(sortTuple(self.d.keys()),
+                         ('ampm', 'days', 'hours', 'minutes', 'months', 'years'))
+
+    def testYears(self):
+        this_year = DateTime().year()
+        from plone.registry.interfaces import IRegistry
+        from zope.component import getUtility
+        registry = getUtility(IRegistry)
+        min_year = registry.get(
+            'Products.Archetypes.calendar_starting_year', 1999)
+        max_year = registry.get(
+            'Products.Archetypes.calendar_future_years_available', 5) + this_year
+
+        data = [
+            {'selected': None, 'id': '--', 'value': '0000'}
+        ]
+
+        for y in range(min_year, max_year + 1):
+            d = {'selected': None, 'id': y, 'value': y}
+            if y == this_year:
+                d['selected'] = 1
+            data.append(d)
+
+        years = self.d.get('years')
+        for i in range(max_year - min_year + 1):
+            self.assertEqual(years[i], data[i])
+
+    def testMonths(self):
+        data = [
+            {'selected': 1,    'id': '--',        'value': '00'},
+            {'selected': None, 'id': 'January',   'value': '01'},
+            {'selected': None, 'id': 'February',  'value': '02'},
+            {'selected': None, 'id': 'March',     'value': '03'},
+            {'selected': None, 'id': 'April',     'value': '04'},
+            {'selected': None, 'id': 'May',       'value': '05'},
+            {'selected': None, 'id': 'June',      'value': '06'},
+            {'selected': None, 'id': 'July',      'value': '07'},
+            {'selected': None, 'id': 'August',    'value': '08'},
+            {'selected': None, 'id': 'September', 'value': '09'},
+            {'selected': None, 'id': 'October',   'value': '10'},
+            {'selected': None, 'id': 'November',  'value': '11'},
+            {'selected': None, 'id': 'December',  'value': '12'},
+        ]
+
+        months = self.d.get('months')
+        for i in range(13):
+            self.assertEqual(months[i], data[i])
+
+    def testDays(self):
+        data = [
+            {'selected': 1,    'id': '--',   'value': '00'},
+            {'selected': None, 'id': 1,      'value': '01'},
+            {'selected': None, 'id': 2,      'value': '02'},
+            {'selected': None, 'id': 3,      'value': '03'},
+            {'selected': None, 'id': 4,      'value': '04'},
+            {'selected': None, 'id': 5,      'value': '05'},
+            {'selected': None, 'id': 6,      'value': '06'},
+            {'selected': None, 'id': 7,      'value': '07'},
+            {'selected': None, 'id': 8,      'value': '08'},
+            {'selected': None, 'id': 9,      'value': '09'},
+            {'selected': None, 'id': 10,     'value': '10'},
+            {'selected': None, 'id': 11,     'value': '11'},
+            {'selected': None, 'id': 12,     'value': '12'},
+            {'selected': None, 'id': 13,     'value': '13'},
+            {'selected': None, 'id': 14,     'value': '14'},
+            {'selected': None, 'id': 15,     'value': '15'},
+            {'selected': None, 'id': 16,     'value': '16'},
+            {'selected': None, 'id': 17,     'value': '17'},
+            {'selected': None, 'id': 18,     'value': '18'},
+            {'selected': None, 'id': 19,     'value': '19'},
+            {'selected': None, 'id': 20,     'value': '20'},
+            {'selected': None, 'id': 21,     'value': '21'},
+            {'selected': None, 'id': 22,     'value': '22'},
+            {'selected': None, 'id': 23,     'value': '23'},
+            {'selected': None, 'id': 24,     'value': '24'},
+            {'selected': None, 'id': 25,     'value': '25'},
+            {'selected': None, 'id': 26,     'value': '26'},
+            {'selected': None, 'id': 27,     'value': '27'},
+            {'selected': None, 'id': 28,     'value': '28'},
+            {'selected': None, 'id': 29,     'value': '29'},
+            {'selected': None, 'id': 30,     'value': '30'},
+            {'selected': None, 'id': 31,     'value': '31'},
+        ]
+
+        days = self.d.get('days')
+        for i in range(32):
+            self.assertEqual(days[i], data[i])
+
+    def testHours(self):
+        data = [
+            {'selected': 1,    'id': '--',   'value': '00'},
+            {'selected': None, 'id': '00',   'value': '00'},
+            {'selected': None, 'id': '01',   'value': '01'},
+            {'selected': None, 'id': '02',   'value': '02'},
+            {'selected': None, 'id': '03',   'value': '03'},
+            {'selected': None, 'id': '04',   'value': '04'},
+            {'selected': None, 'id': '05',   'value': '05'},
+            {'selected': None, 'id': '06',   'value': '06'},
+            {'selected': None, 'id': '07',   'value': '07'},
+            {'selected': None, 'id': '08',   'value': '08'},
+            {'selected': None, 'id': '09',   'value': '09'},
+            {'selected': None, 'id': '10',   'value': '10'},
+            {'selected': None, 'id': '11',   'value': '11'},
+            {'selected': None, 'id': '12',   'value': '12'},
+            {'selected': None, 'id': '13',   'value': '13'},
+            {'selected': None, 'id': '14',   'value': '14'},
+            {'selected': None, 'id': '15',   'value': '15'},
+            {'selected': None, 'id': '16',   'value': '16'},
+            {'selected': None, 'id': '17',   'value': '17'},
+            {'selected': None, 'id': '18',   'value': '18'},
+            {'selected': None, 'id': '19',   'value': '19'},
+            {'selected': None, 'id': '20',   'value': '20'},
+            {'selected': None, 'id': '21',   'value': '21'},
+            {'selected': None, 'id': '22',   'value': '22'},
+            {'selected': None, 'id': '23',   'value': '23'},
+        ]
+
+        hours = self.d.get('hours')
+        for i in range(25):
+            self.assertEqual(hours[i], data[i])
+
+    def testMinutes(self):
+        data = [
+            {'selected': 1,    'id': '--',   'value': '00'},
+            {'selected': None, 'id': '00',   'value': '00'},
+            {'selected': None, 'id': '05',   'value': '05'},
+            {'selected': None, 'id': '10',   'value': '10'},
+            {'selected': None, 'id': '15',   'value': '15'},
+            {'selected': None, 'id': '20',   'value': '20'},
+            {'selected': None, 'id': '25',   'value': '25'},
+            {'selected': None, 'id': '30',   'value': '30'},
+            {'selected': None, 'id': '35',   'value': '35'},
+            {'selected': None, 'id': '40',   'value': '40'},
+            {'selected': None, 'id': '45',   'value': '45'},
+            {'selected': None, 'id': '50',   'value': '50'},
+            {'selected': None, 'id': '55',   'value': '55'},
+        ]
+
+        minutes = self.d.get('minutes')
+        for i in range(13):
+            self.assertEqual(minutes[i], data[i])
+
+    def testAMPM(self):
+        ampm = self.d.get('ampm')
+        self.assertEqual(ampm, [])
+
+
+class TestDateComponentsSupportAMPM(PloneTestCase):
+
+    def afterSetUp(self):
+        date = DateTime(2002, 8, 1, 17, 42, 0)
+        self.d = self.portal.date_components_support(date, use_ampm=1)
+
+    def testElements(self):
+        self.assertEqual(sortTuple(self.d.keys()),
+                         ('ampm', 'days', 'hours', 'minutes', 'months', 'years'))
+
+    def testHours(self):
+        data = [
+            {'selected': None, 'id': '--',   'value': '12'},
+            {'selected': None, 'id': '12',   'value': '12'},
+            {'selected': None, 'id': '01',   'value': '01'},
+            {'selected': None, 'id': '02',   'value': '02'},
+            {'selected': None, 'id': '03',   'value': '03'},
+            {'selected': None, 'id': '04',   'value': '04'},
+            {'selected': 1,    'id': '05',   'value': '05'},
+            {'selected': None, 'id': '06',   'value': '06'},
+            {'selected': None, 'id': '07',   'value': '07'},
+            {'selected': None, 'id': '08',   'value': '08'},
+            {'selected': None, 'id': '09',   'value': '09'},
+            {'selected': None, 'id': '10',   'value': '10'},
+            {'selected': None, 'id': '11',   'value': '11'},
+        ]
+
+        hours = self.d.get('hours')
+        for i in range(13):
+            self.assertEqual(hours[i], data[i])
+
+    def testAM(self):
+        d = DateTime(2002, 8, 1, 3, 0, 0)
+        d = self.portal.date_components_support(d, use_ampm=1)
+
+        data = [
+            {'selected': None, 'id': '--',   'value': 'AM'},
+            {'selected': 1,    'id': 'AM',   'value': 'AM'},
+            {'selected': None, 'id': 'PM',   'value': 'PM'},
+        ]
+
+        ampm = d.get('ampm')
+        for i in range(3):
+            self.assertEqual(ampm[i], data[i])
+
+    def testPM(self):
+        data = [
+            {'selected': None, 'id': '--',   'value': 'AM'},
+            {'selected': None, 'id': 'AM',   'value': 'AM'},
+            {'selected': 1,    'id': 'PM',   'value': 'PM'},
+        ]
+
+        ampm = self.d.get('ampm')
+        for i in range(3):
+            self.assertEqual(ampm[i], data[i])
+
+
+class TestDateComponentsSupportAMPMDefault(PloneTestCase):
+
+    def afterSetUp(self):
+        self.d = self.portal.date_components_support(None, use_ampm=1)
+
+    def testElements(self):
+        self.assertEqual(sortTuple(self.d.keys()),
+                         ('ampm', 'days', 'hours', 'minutes', 'months', 'years'))
+
+    def testHours(self):
+        data = [
+            {'selected': 1,    'id': '--',   'value': '12'},
+            {'selected': None, 'id': '12',   'value': '12'},
+            {'selected': None, 'id': '01',   'value': '01'},
+            {'selected': None, 'id': '02',   'value': '02'},
+            {'selected': None, 'id': '03',   'value': '03'},
+            {'selected': None, 'id': '04',   'value': '04'},
+            {'selected': None, 'id': '05',   'value': '05'},
+            {'selected': None, 'id': '06',   'value': '06'},
+            {'selected': None, 'id': '07',   'value': '07'},
+            {'selected': None, 'id': '08',   'value': '08'},
+            {'selected': None, 'id': '09',   'value': '09'},
+            {'selected': None, 'id': '10',   'value': '10'},
+            {'selected': None, 'id': '11',   'value': '11'},
+        ]
+
+        hours = self.d.get('hours')
+        for i in range(13):
+            self.assertEqual(hours[i], data[i])
+
+    def testAMPM(self):
+        data = [
+            {'selected': 1,    'id': '--', 'value': 'AM'},
+            {'selected': None, 'id': 'AM',   'value': 'AM'},
+            {'selected': None, 'id': 'PM',   'value': 'PM'},
+        ]
+
+        ampm = self.d.get('ampm')
+        for i in range(2):
+            self.assertEqual(ampm[i], data[i])
+
+
+class TestDateComponentsSupportMinuteStepDefault(PloneTestCase):
+
+    def testMinutesStep1(self):
+        data = [
+            {'selected': 1,    'id': '--', 'value': '00'},
+        ]
+        for x in range(0, 60, 1):
+            d = {'id': '%02d' % x, 'value': '%02d' % x, 'selected': None}
+            data.append(d)
+
+        d = self.portal.date_components_support(None, minute_step=1)
+        minutes = d.get('minutes')
+        for i in range(61):
+            self.assertEqual(minutes[i], data[i])
+
+    def testMinutesStep10(self):
+        data = [
+            {'selected': 1,    'id': '--', 'value': '00'},
+        ]
+        for x in range(0, 60, 10):
+            d = {'id': '%02d' % x, 'value': '%02d' % x, 'selected': None}
+            data.append(d)
+
+        d = self.portal.date_components_support(None, minute_step=10)
+        minutes = d.get('minutes')
+        for i in range(7):
+            self.assertEqual(minutes[i], data[i])
+
+
+class TestSpecialCases(PloneTestCase):
+
+    def testNoneUsesDefault(self):
+        d = self.portal.date_components_support(None)
+        hours = d.get('hours')
+        # default == 1
+        self.assertTrue(hours[0]['selected'])
+
+    def testEmptyStringUsesDefault(self):
+        d = self.portal.date_components_support('')
+        hours = d.get('hours')
+        # default == 1
+        self.assertTrue(hours[0]['selected'])
+
+    def testDateWithGMT(self):
+        # Any GMT suffix gets truncated
+        d = self.portal.date_components_support('2004/08/31 04:30:00 GMT+2')
+        hours = d.get('hours')
+        # default == 0
+        self.assertTrue(hours[5]['selected'])   # 4th hour
+
+    def testDateOnly(self):
+        d = self.portal.date_components_support('2004/08/31')
+        hours = d.get('hours')
+        # default == 0
+        self.assertTrue(hours[1]['selected'])   # 0th hour
+
+    def testInvalidDateWithGMT(self):
+        # Any GMT suffix gets truncated
+        d = self.portal.date_components_support('2004/02/31 00:30:00 GMT+2')
+        hours = d.get('hours')
+        # default == 1
+        self.assertTrue(hours[0]['selected'])
+
+    def testInvalidDateOnly(self):
+        d = self.portal.date_components_support('2004/02/31')
+        hours = d.get('hours')
+        # default == 1
+        self.assertTrue(hours[0]['selected'])


Repository: Products.Archetypes


Branch: refs/heads/master
Date: 2016-10-28T08:46:50+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.Archetypes/commit/8bc900c147a56f1f696ab5a00c69819005121a0c

Merge pull request #68 from plone/move-date_components_support-script-over

moved script date_components_support.py from CMFPlone over here

Files changed:
A Products/Archetypes/skins/archetypes/date_components_support.py
A Products/Archetypes/tests/test_date_components_support_script.py
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 57e6501..4c32fba 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,10 @@ New features:
   Make AnnotationStorage awareness of it optional.
   [jensens]
 
+- moved script ``date_components_support.py`` from CMFPlone over here, 
+  hence its only used here.
+  [jensens]
+
 Bug fixes:
 
 - More flexible test of getBestIcon.
diff --git a/Products/Archetypes/skins/archetypes/date_components_support.py b/Products/Archetypes/skins/archetypes/date_components_support.py
new file mode 100644
index 0000000..c751867
--- /dev/null
+++ b/Products/Archetypes/skins/archetypes/date_components_support.py
@@ -0,0 +1,164 @@
+## Script (Python) "date_components_support"
+##bind container=container
+##bind context=context
+##bind namespace=
+##bind script=script
+##bind subpath=traverse_subpath
+##parameters=date=None, use_ampm=0, starting_year=None, ending_year=None, future_years=None, minute_step=5
+##title=
+
+from DateTime.interfaces import DateTimeError
+
+# 'id' is what shows up.  December for month 12.
+# 'value' is the value for the form.
+# 'selected' is whether or not it is selected.
+
+default = 0
+years = []
+days = []
+months = []
+hours = []
+minutes = []
+ampm = []
+now = DateTime()
+
+# from CMFPlone.DublinCore
+CEILING = DateTime(9999, 0)
+FLOOR = DateTime(1970, 0)
+PLONE_CEILING = DateTime(2021, 0)  # 2020-12-31
+
+
+def month_names():
+    names = {}
+    for x in range(1, 13):
+        faux = DateTime(2004, x, 1)
+        names[x] = faux.Month()
+    return names
+
+
+month_dict = month_names()
+
+# This debacle is because the date that is usually passed in ends with GMT
+# and of course DateTime is too stupid to handle it.  So we strip it off.
+
+if same_type(date, ''):
+    date = date.strip()
+    if not date:
+        date = None
+    elif date.split(' ')[-1].startswith('GMT'):
+        date = ' '.join(date.split(' ')[:-1])
+
+if date is None:
+    date = now
+    default = 1
+elif not same_type(date, now):
+    try:
+        date = DateTime(date)
+    except (TypeError, DateTimeError):
+        date = now
+        default = 1
+
+# Anything above PLONE_CEILING should be PLONE_CEILING
+if date.greaterThan(PLONE_CEILING):
+    date = PLONE_CEILING
+
+# Get portal year range
+registry = context.portal_registry
+if starting_year is None:
+    min_year = registry['Products.Archetypes.calendar_starting_year']
+else:
+    min_year = starting_year
+if ending_year is None:
+    if future_years is None:
+        max_year = registry['Products.Archetypes.calendar_future_years_available'] + now.year()
+    else:
+        max_year = future_years + now.year()
+else:
+    max_year = ending_year
+
+year = int(date.strftime('%Y'))
+
+if min_year != max_year:
+    years.append({'id': '--', 'value': '0000', 'selected': None})
+
+for x in range(min_year, max_year + 1):
+    d = {'id': x, 'value': x, 'selected': None}
+    if x == year:
+        d['selected'] = 1
+    years.append(d)
+
+month = int(date.strftime('%m'))
+
+if default:
+    months.append({'id': '--', 'value': '00', 'selected': 1})
+else:
+    months.append({'id': '--', 'value': '00', 'selected': None})
+
+for x in range(1, 13):
+    d = {'id': month_dict[x], 'value': '%02d' % x, 'selected': None}
+    if x == month and not default:
+        d['selected'] = 1
+    months.append(d)
+
+day = int(date.strftime('%d'))
+
+if default:
+    days.append({'id': '--', 'value': '00', 'selected': 1})
+else:
+    days.append({'id': '--', 'value': '00', 'selected': None})
+
+for x in range(1, 32):
+    d = {'id': x, 'value': '%02d' % x, 'selected': None}
+    if x == day and not default:
+        d['selected'] = 1
+    days.append(d)
+
+if use_ampm:
+    hours_range = [12] + range(1, 12)
+    hour_default = '12'
+    hour = int(date.strftime('%I'))
+else:
+    hours_range = range(0, 24)
+    hour_default = '00'
+    hour = int(date.strftime('%H'))
+
+if default:
+    hours.append({'id': '--', 'value': hour_default, 'selected': 1})
+else:
+    hours.append({'id': '--', 'value': hour_default, 'selected': None})
+
+for x in hours_range:
+    d = {'id': '%02d' % x, 'value': '%02d' % x, 'selected': None}
+    if x == hour and not default:
+        d['selected'] = 1
+    hours.append(d)
+
+minute = int(date.strftime('%M'))
+
+if default:
+    minutes.append({'id': '--', 'value': '00', 'selected': 1})
+else:
+    minutes.append({'id': '--', 'value': '00', 'selected': None})
+
+for x in range(0, 60, minute_step):
+    d = {'id': '%02d' % x, 'value': '%02d' % x, 'selected': None}
+    if (x == minute or minute < x < minute + minute_step) and not default:
+        d['selected'] = 1
+    minutes.append(d)
+
+if use_ampm:
+    p = date.strftime('%p')
+
+    if default:
+        ampm.append({'id': '--', 'value': 'AM', 'selected': 1})
+    else:
+        ampm.append({'id': '--', 'value': 'AM', 'selected': None})
+
+    for x in ('AM', 'PM'):
+        d = {'id': x, 'value': x, 'selected': None}
+        if x == p and not default:
+            d['selected'] = 1
+        ampm.append(d)
+
+return {'years': years, 'months': months, 'days': days,
+        'hours': hours, 'minutes': minutes, 'ampm': ampm}
diff --git a/Products/Archetypes/tests/test_date_components_support_script.py b/Products/Archetypes/tests/test_date_components_support_script.py
new file mode 100644
index 0000000..12edd38
--- /dev/null
+++ b/Products/Archetypes/tests/test_date_components_support_script.py
@@ -0,0 +1,491 @@
+# -*- coding: utf-8 -*-
+from plone.app.testing.bbb import PloneTestCase
+
+from DateTime import DateTime
+
+
+def sortTuple(t):
+    l = list(t)
+    l.sort()
+    return tuple(l)
+
+
+class TestDateComponentsSupport(PloneTestCase):
+
+    def afterSetUp(self):
+        date = DateTime(2002, 8, 1, 17, 42, 0)
+        self.d = self.portal.date_components_support(date)
+
+    def testElements(self):
+        self.assertEqual(sortTuple(self.d.keys()),
+                         ('ampm', 'days', 'hours', 'minutes', 'months', 'years'))
+
+    def testYears(self):
+        this_year = DateTime().year()
+        from plone.registry.interfaces import IRegistry
+        from zope.component import getUtility
+        registry = getUtility(IRegistry)
+        min_year = registry.get(
+            'Products.Archetypes.calendar_starting_year', 1999)
+        max_year = registry.get(
+            'Products.Archetypes.calendar_future_years_available', 5) + this_year
+
+        data = [
+            {'selected': None, 'id': '--', 'value': '0000'}
+        ]
+
+        for y in range(min_year, max_year + 1):
+            d = {'selected': None, 'id': y, 'value': y}
+            if y == 2002:
+                d['selected'] = 1
+            data.append(d)
+
+        years = self.d.get('years')
+        for i in range(max_year - min_year + 1):
+            self.assertEqual(years[i], data[i])
+
+    def testMonths(self):
+        data = [
+            {'selected': None, 'id': '--',        'value': '00'},
+            {'selected': None, 'id': 'January',   'value': '01'},
+            {'selected': None, 'id': 'February',  'value': '02'},
+            {'selected': None, 'id': 'March',     'value': '03'},
+            {'selected': None, 'id': 'April',     'value': '04'},
+            {'selected': None, 'id': 'May',       'value': '05'},
+            {'selected': None, 'id': 'June',      'value': '06'},
+            {'selected': None, 'id': 'July',      'value': '07'},
+            {'selected': 1,    'id': 'August',    'value': '08'},
+            {'selected': None, 'id': 'September', 'value': '09'},
+            {'selected': None, 'id': 'October',   'value': '10'},
+            {'selected': None, 'id': 'November',  'value': '11'},
+            {'selected': None, 'id': 'December',  'value': '12'},
+        ]
+
+        months = self.d.get('months')
+        for i in range(13):
+            self.assertEqual(months[i], data[i])
+
+    def testDays(self):
+        data = [
+            {'selected': None, 'id': '--',   'value': '00'},
+            {'selected': 1,    'id': 1,      'value': '01'},
+            {'selected': None, 'id': 2,      'value': '02'},
+            {'selected': None, 'id': 3,      'value': '03'},
+            {'selected': None, 'id': 4,      'value': '04'},
+            {'selected': None, 'id': 5,      'value': '05'},
+            {'selected': None, 'id': 6,      'value': '06'},
+            {'selected': None, 'id': 7,      'value': '07'},
+            {'selected': None, 'id': 8,      'value': '08'},
+            {'selected': None, 'id': 9,      'value': '09'},
+            {'selected': None, 'id': 10,     'value': '10'},
+            {'selected': None, 'id': 11,     'value': '11'},
+            {'selected': None, 'id': 12,     'value': '12'},
+            {'selected': None, 'id': 13,     'value': '13'},
+            {'selected': None, 'id': 14,     'value': '14'},
+            {'selected': None, 'id': 15,     'value': '15'},
+            {'selected': None, 'id': 16,     'value': '16'},
+            {'selected': None, 'id': 17,     'value': '17'},
+            {'selected': None, 'id': 18,     'value': '18'},
+            {'selected': None, 'id': 19,     'value': '19'},
+            {'selected': None, 'id': 20,     'value': '20'},
+            {'selected': None, 'id': 21,     'value': '21'},
+            {'selected': None, 'id': 22,     'value': '22'},
+            {'selected': None, 'id': 23,     'value': '23'},
+            {'selected': None, 'id': 24,     'value': '24'},
+            {'selected': None, 'id': 25,     'value': '25'},
+            {'selected': None, 'id': 26,     'value': '26'},
+            {'selected': None, 'id': 27,     'value': '27'},
+            {'selected': None, 'id': 28,     'value': '28'},
+            {'selected': None, 'id': 29,     'value': '29'},
+            {'selected': None, 'id': 30,     'value': '30'},
+            {'selected': None, 'id': 31,     'value': '31'},
+        ]
+
+        days = self.d.get('days')
+        for i in range(32):
+            self.assertEqual(days[i], data[i])
+
+    def testHours(self):
+        data = [
+            {'selected': None, 'id': '--',   'value': '00'},
+            {'selected': None, 'id': '00',   'value': '00'},
+            {'selected': None, 'id': '01',   'value': '01'},
+            {'selected': None, 'id': '02',   'value': '02'},
+            {'selected': None, 'id': '03',   'value': '03'},
+            {'selected': None, 'id': '04',   'value': '04'},
+            {'selected': None, 'id': '05',   'value': '05'},
+            {'selected': None, 'id': '06',   'value': '06'},
+            {'selected': None, 'id': '07',   'value': '07'},
+            {'selected': None, 'id': '08',   'value': '08'},
+            {'selected': None, 'id': '09',   'value': '09'},
+            {'selected': None, 'id': '10',   'value': '10'},
+            {'selected': None, 'id': '11',   'value': '11'},
+            {'selected': None, 'id': '12',   'value': '12'},
+            {'selected': None, 'id': '13',   'value': '13'},
+            {'selected': None, 'id': '14',   'value': '14'},
+            {'selected': None, 'id': '15',   'value': '15'},
+            {'selected': None, 'id': '16',   'value': '16'},
+            {'selected': 1,    'id': '17',   'value': '17'},
+            {'selected': None, 'id': '18',   'value': '18'},
+            {'selected': None, 'id': '19',   'value': '19'},
+            {'selected': None, 'id': '20',   'value': '20'},
+            {'selected': None, 'id': '21',   'value': '21'},
+            {'selected': None, 'id': '22',   'value': '22'},
+            {'selected': None, 'id': '23',   'value': '23'},
+        ]
+
+        hours = self.d.get('hours')
+        for i in range(25):
+            self.assertEqual(hours[i], data[i])
+
+    def testMinutes(self):
+        data = [
+            {'selected': None, 'id': '--',   'value': '00'},
+            {'selected': None, 'id': '00',   'value': '00'},
+            {'selected': None, 'id': '05',   'value': '05'},
+            {'selected': None, 'id': '10',   'value': '10'},
+            {'selected': None, 'id': '15',   'value': '15'},
+            {'selected': None, 'id': '20',   'value': '20'},
+            {'selected': None, 'id': '25',   'value': '25'},
+            {'selected': None, 'id': '30',   'value': '30'},
+            {'selected': None, 'id': '35',   'value': '35'},
+            {'selected': None, 'id': '40',   'value': '40'},
+            {'selected': 1,    'id': '45',   'value': '45'},
+            {'selected': None, 'id': '50',   'value': '50'},
+            {'selected': None, 'id': '55',   'value': '55'},
+        ]
+
+        minutes = self.d.get('minutes')
+        for i in range(13):
+            self.assertEqual(minutes[i], data[i])
+
+    def testAM(self):
+        d = DateTime(2002, 8, 1, 3, 0, 0)
+        d = self.portal.date_components_support(d)
+        self.assertEqual(d.get('ampm'), [])
+
+    def testPM(self):
+        ampm = self.d.get('ampm')
+        self.assertEqual(ampm, [])
+
+
+class TestDateComponentsSupportDefault(PloneTestCase):
+
+    def afterSetUp(self):
+        self.d = self.portal.date_components_support(None)
+
+    def testElements(self):
+        self.assertEqual(sortTuple(self.d.keys()),
+                         ('ampm', 'days', 'hours', 'minutes', 'months', 'years'))
+
+    def testYears(self):
+        this_year = DateTime().year()
+        from plone.registry.interfaces import IRegistry
+        from zope.component import getUtility
+        registry = getUtility(IRegistry)
+        min_year = registry.get(
+            'Products.Archetypes.calendar_starting_year', 1999)
+        max_year = registry.get(
+            'Products.Archetypes.calendar_future_years_available', 5) + this_year
+
+        data = [
+            {'selected': None, 'id': '--', 'value': '0000'}
+        ]
+
+        for y in range(min_year, max_year + 1):
+            d = {'selected': None, 'id': y, 'value': y}
+            if y == this_year:
+                d['selected'] = 1
+            data.append(d)
+
+        years = self.d.get('years')
+        for i in range(max_year - min_year + 1):
+            self.assertEqual(years[i], data[i])
+
+    def testMonths(self):
+        data = [
+            {'selected': 1,    'id': '--',        'value': '00'},
+            {'selected': None, 'id': 'January',   'value': '01'},
+            {'selected': None, 'id': 'February',  'value': '02'},
+            {'selected': None, 'id': 'March',     'value': '03'},
+            {'selected': None, 'id': 'April',     'value': '04'},
+            {'selected': None, 'id': 'May',       'value': '05'},
+            {'selected': None, 'id': 'June',      'value': '06'},
+            {'selected': None, 'id': 'July',      'value': '07'},
+            {'selected': None, 'id': 'August',    'value': '08'},
+            {'selected': None, 'id': 'September', 'value': '09'},
+            {'selected': None, 'id': 'October',   'value': '10'},
+            {'selected': None, 'id': 'November',  'value': '11'},
+            {'selected': None, 'id': 'December',  'value': '12'},
+        ]
+
+        months = self.d.get('months')
+        for i in range(13):
+            self.assertEqual(months[i], data[i])
+
+    def testDays(self):
+        data = [
+            {'selected': 1,    'id': '--',   'value': '00'},
+            {'selected': None, 'id': 1,      'value': '01'},
+            {'selected': None, 'id': 2,      'value': '02'},
+            {'selected': None, 'id': 3,      'value': '03'},
+            {'selected': None, 'id': 4,      'value': '04'},
+            {'selected': None, 'id': 5,      'value': '05'},
+            {'selected': None, 'id': 6,      'value': '06'},
+            {'selected': None, 'id': 7,      'value': '07'},
+            {'selected': None, 'id': 8,      'value': '08'},
+            {'selected': None, 'id': 9,      'value': '09'},
+            {'selected': None, 'id': 10,     'value': '10'},
+            {'selected': None, 'id': 11,     'value': '11'},
+            {'selected': None, 'id': 12,     'value': '12'},
+            {'selected': None, 'id': 13,     'value': '13'},
+            {'selected': None, 'id': 14,     'value': '14'},
+            {'selected': None, 'id': 15,     'value': '15'},
+            {'selected': None, 'id': 16,     'value': '16'},
+            {'selected': None, 'id': 17,     'value': '17'},
+            {'selected': None, 'id': 18,     'value': '18'},
+            {'selected': None, 'id': 19,     'value': '19'},
+            {'selected': None, 'id': 20,     'value': '20'},
+            {'selected': None, 'id': 21,     'value': '21'},
+            {'selected': None, 'id': 22,     'value': '22'},
+            {'selected': None, 'id': 23,     'value': '23'},
+            {'selected': None, 'id': 24,     'value': '24'},
+            {'selected': None, 'id': 25,     'value': '25'},
+            {'selected': None, 'id': 26,     'value': '26'},
+            {'selected': None, 'id': 27,     'value': '27'},
+            {'selected': None, 'id': 28,     'value': '28'},
+            {'selected': None, 'id': 29,     'value': '29'},
+            {'selected': None, 'id': 30,     'value': '30'},
+            {'selected': None, 'id': 31,     'value': '31'},
+        ]
+
+        days = self.d.get('days')
+        for i in range(32):
+            self.assertEqual(days[i], data[i])
+
+    def testHours(self):
+        data = [
+            {'selected': 1,    'id': '--',   'value': '00'},
+            {'selected': None, 'id': '00',   'value': '00'},
+            {'selected': None, 'id': '01',   'value': '01'},
+            {'selected': None, 'id': '02',   'value': '02'},
+            {'selected': None, 'id': '03',   'value': '03'},
+            {'selected': None, 'id': '04',   'value': '04'},
+            {'selected': None, 'id': '05',   'value': '05'},
+            {'selected': None, 'id': '06',   'value': '06'},
+            {'selected': None, 'id': '07',   'value': '07'},
+            {'selected': None, 'id': '08',   'value': '08'},
+            {'selected': None, 'id': '09',   'value': '09'},
+            {'selected': None, 'id': '10',   'value': '10'},
+            {'selected': None, 'id': '11',   'value': '11'},
+            {'selected': None, 'id': '12',   'value': '12'},
+            {'selected': None, 'id': '13',   'value': '13'},
+            {'selected': None, 'id': '14',   'value': '14'},
+            {'selected': None, 'id': '15',   'value': '15'},
+            {'selected': None, 'id': '16',   'value': '16'},
+            {'selected': None, 'id': '17',   'value': '17'},
+            {'selected': None, 'id': '18',   'value': '18'},
+            {'selected': None, 'id': '19',   'value': '19'},
+            {'selected': None, 'id': '20',   'value': '20'},
+            {'selected': None, 'id': '21',   'value': '21'},
+            {'selected': None, 'id': '22',   'value': '22'},
+            {'selected': None, 'id': '23',   'value': '23'},
+        ]
+
+        hours = self.d.get('hours')
+        for i in range(25):
+            self.assertEqual(hours[i], data[i])
+
+    def testMinutes(self):
+        data = [
+            {'selected': 1,    'id': '--',   'value': '00'},
+            {'selected': None, 'id': '00',   'value': '00'},
+            {'selected': None, 'id': '05',   'value': '05'},
+            {'selected': None, 'id': '10',   'value': '10'},
+            {'selected': None, 'id': '15',   'value': '15'},
+            {'selected': None, 'id': '20',   'value': '20'},
+            {'selected': None, 'id': '25',   'value': '25'},
+            {'selected': None, 'id': '30',   'value': '30'},
+            {'selected': None, 'id': '35',   'value': '35'},
+            {'selected': None, 'id': '40',   'value': '40'},
+            {'selected': None, 'id': '45',   'value': '45'},
+            {'selected': None, 'id': '50',   'value': '50'},
+            {'selected': None, 'id': '55',   'value': '55'},
+        ]
+
+        minutes = self.d.get('minutes')
+        for i in range(13):
+            self.assertEqual(minutes[i], data[i])
+
+    def testAMPM(self):
+        ampm = self.d.get('ampm')
+        self.assertEqual(ampm, [])
+
+
+class TestDateComponentsSupportAMPM(PloneTestCase):
+
+    def afterSetUp(self):
+        date = DateTime(2002, 8, 1, 17, 42, 0)
+        self.d = self.portal.date_components_support(date, use_ampm=1)
+
+    def testElements(self):
+        self.assertEqual(sortTuple(self.d.keys()),
+                         ('ampm', 'days', 'hours', 'minutes', 'months', 'years'))
+
+    def testHours(self):
+        data = [
+            {'selected': None, 'id': '--',   'value': '12'},
+            {'selected': None, 'id': '12',   'value': '12'},
+            {'selected': None, 'id': '01',   'value': '01'},
+            {'selected': None, 'id': '02',   'value': '02'},
+            {'selected': None, 'id': '03',   'value': '03'},
+            {'selected': None, 'id': '04',   'value': '04'},
+            {'selected': 1,    'id': '05',   'value': '05'},
+            {'selected': None, 'id': '06',   'value': '06'},
+            {'selected': None, 'id': '07',   'value': '07'},
+            {'selected': None, 'id': '08',   'value': '08'},
+            {'selected': None, 'id': '09',   'value': '09'},
+            {'selected': None, 'id': '10',   'value': '10'},
+            {'selected': None, 'id': '11',   'value': '11'},
+        ]
+
+        hours = self.d.get('hours')
+        for i in range(13):
+            self.assertEqual(hours[i], data[i])
+
+    def testAM(self):
+        d = DateTime(2002, 8, 1, 3, 0, 0)
+        d = self.portal.date_components_support(d, use_ampm=1)
+
+        data = [
+            {'selected': None, 'id': '--',   'value': 'AM'},
+            {'selected': 1,    'id': 'AM',   'value': 'AM'},
+            {'selected': None, 'id': 'PM',   'value': 'PM'},
+        ]
+
+        ampm = d.get('ampm')
+        for i in range(3):
+            self.assertEqual(ampm[i], data[i])
+
+    def testPM(self):
+        data = [
+            {'selected': None, 'id': '--',   'value': 'AM'},
+            {'selected': None, 'id': 'AM',   'value': 'AM'},
+            {'selected': 1,    'id': 'PM',   'value': 'PM'},
+        ]
+
+        ampm = self.d.get('ampm')
+        for i in range(3):
+            self.assertEqual(ampm[i], data[i])
+
+
+class TestDateComponentsSupportAMPMDefault(PloneTestCase):
+
+    def afterSetUp(self):
+        self.d = self.portal.date_components_support(None, use_ampm=1)
+
+    def testElements(self):
+        self.assertEqual(sortTuple(self.d.keys()),
+                         ('ampm', 'days', 'hours', 'minutes', 'months', 'years'))
+
+    def testHours(self):
+        data = [
+            {'selected': 1,    'id': '--',   'value': '12'},
+            {'selected': None, 'id': '12',   'value': '12'},
+            {'selected': None, 'id': '01',   'value': '01'},
+            {'selected': None, 'id': '02',   'value': '02'},
+            {'selected': None, 'id': '03',   'value': '03'},
+            {'selected': None, 'id': '04',   'value': '04'},
+            {'selected': None, 'id': '05',   'value': '05'},
+            {'selected': None, 'id': '06',   'value': '06'},
+            {'selected': None, 'id': '07',   'value': '07'},
+            {'selected': None, 'id': '08',   'value': '08'},
+            {'selected': None, 'id': '09',   'value': '09'},
+            {'selected': None, 'id': '10',   'value': '10'},
+            {'selected': None, 'id': '11',   'value': '11'},
+        ]
+
+        hours = self.d.get('hours')
+        for i in range(13):
+            self.assertEqual(hours[i], data[i])
+
+    def testAMPM(self):
+        data = [
+            {'selected': 1,    'id': '--', 'value': 'AM'},
+            {'selected': None, 'id': 'AM',   'value': 'AM'},
+            {'selected': None, 'id': 'PM',   'value': 'PM'},
+        ]
+
+        ampm = self.d.get('ampm')
+        for i in range(2):
+            self.assertEqual(ampm[i], data[i])
+
+
+class TestDateComponentsSupportMinuteStepDefault(PloneTestCase):
+
+    def testMinutesStep1(self):
+        data = [
+            {'selected': 1,    'id': '--', 'value': '00'},
+        ]
+        for x in range(0, 60, 1):
+            d = {'id': '%02d' % x, 'value': '%02d' % x, 'selected': None}
+            data.append(d)
+
+        d = self.portal.date_components_support(None, minute_step=1)
+        minutes = d.get('minutes')
+        for i in range(61):
+            self.assertEqual(minutes[i], data[i])
+
+    def testMinutesStep10(self):
+        data = [
+            {'selected': 1,    'id': '--', 'value': '00'},
+        ]
+        for x in range(0, 60, 10):
+            d = {'id': '%02d' % x, 'value': '%02d' % x, 'selected': None}
+            data.append(d)
+
+        d = self.portal.date_components_support(None, minute_step=10)
+        minutes = d.get('minutes')
+        for i in range(7):
+            self.assertEqual(minutes[i], data[i])
+
+
+class TestSpecialCases(PloneTestCase):
+
+    def testNoneUsesDefault(self):
+        d = self.portal.date_components_support(None)
+        hours = d.get('hours')
+        # default == 1
+        self.assertTrue(hours[0]['selected'])
+
+    def testEmptyStringUsesDefault(self):
+        d = self.portal.date_components_support('')
+        hours = d.get('hours')
+        # default == 1
+        self.assertTrue(hours[0]['selected'])
+
+    def testDateWithGMT(self):
+        # Any GMT suffix gets truncated
+        d = self.portal.date_components_support('2004/08/31 04:30:00 GMT+2')
+        hours = d.get('hours')
+        # default == 0
+        self.assertTrue(hours[5]['selected'])   # 4th hour
+
+    def testDateOnly(self):
+        d = self.portal.date_components_support('2004/08/31')
+        hours = d.get('hours')
+        # default == 0
+        self.assertTrue(hours[1]['selected'])   # 0th hour
+
+    def testInvalidDateWithGMT(self):
+        # Any GMT suffix gets truncated
+        d = self.portal.date_components_support('2004/02/31 00:30:00 GMT+2')
+        hours = d.get('hours')
+        # default == 1
+        self.assertTrue(hours[0]['selected'])
+
+    def testInvalidDateOnly(self):
+        d = self.portal.date_components_support('2004/02/31')
+        hours = d.get('hours')
+        # default == 1
+        self.assertTrue(hours[0]['selected'])


