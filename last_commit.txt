Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-06-25T18:05:22+02:00
Author: Lukas Graf (lukasgraf) <lukas.graf@4teamwork.ch>
Commit: https://github.com/plone/plone.restapi/commit/04a25379d94590bb90fe0a23ad3819f598d1db3c

Return status 400 if a referenced object can not be resolved during deserialization.

Files changed:
A news/777.bugfix
M src/plone/restapi/deserializer/relationfield.py
M src/plone/restapi/tests/test_dxfield_deserializer.py

b'diff --git a/news/777.bugfix b/news/777.bugfix\nnew file mode 100644\nindex 00000000..bc13a099\n--- /dev/null\n+++ b/news/777.bugfix\n@@ -0,0 +1,2 @@\n+Return status 400 if a referenced object can not be resolved during deserialization.\n+[lgraf]\ndiff --git a/src/plone/restapi/deserializer/relationfield.py b/src/plone/restapi/deserializer/relationfield.py\nindex a313f822..669fd787 100644\n--- a/src/plone/restapi/deserializer/relationfield.py\n+++ b/src/plone/restapi/deserializer/relationfield.py\n@@ -54,6 +54,7 @@ def __call__(self, value):\n                 resolved_by = "UID"\n \n         if obj is None:\n+            self.request.response.setStatus(400)\n             raise ValueError(\n                 u"Could not resolve object for {}={}".format(resolved_by, value)\n             )\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex cb12aa16..5c46f8b6 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -421,6 +421,7 @@ def test_relationchoice_deserialization_from_invalid_intid_raises(self):\n         self.assertEqual(\n             str(cm.exception), u"Could not resolve object for intid=123456789"\n         )\n+        self.assertEqual(400, self.request.response.getStatus())\n \n     def test_relationchoice_deserialization_from_invalid_uid_raises(self):\n         with self.assertRaises(ValueError) as cm:\n@@ -432,6 +433,7 @@ def test_relationchoice_deserialization_from_invalid_uid_raises(self):\n             str(cm.exception),\n             u"Could not resolve object for UID=ac12b24913cf45c6863937367aacc263",\n         )\n+        self.assertEqual(400, self.request.response.getStatus())\n \n     def test_relationchoice_deserialization_from_invalid_url_raises(self):\n         with self.assertRaises(ValueError) as cm:\n@@ -443,6 +445,7 @@ def test_relationchoice_deserialization_from_invalid_url_raises(self):\n             str(cm.exception),\n             u"Could not resolve object for URL=http://nohost/plone/doesnotexist",\n         )\n+        self.assertEqual(400, self.request.response.getStatus())\n \n     def test_relationchoice_deserialization_from_invalid_path_raises(self):\n         with self.assertRaises(ValueError) as cm:\n@@ -452,6 +455,7 @@ def test_relationchoice_deserialization_from_invalid_path_raises(self):\n         self.assertEqual(\n             str(cm.exception), u"Could not resolve object for path=/doesnotexist"\n         )\n+        self.assertEqual(400, self.request.response.getStatus())\n \n     def test_relationlist_deserialization_returns_list_of_documents(self):\n         doc2 = self.portal[\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-06-28T17:06:49+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/463bbd4c93c762de9b6fcbae73d1b84d84ffd653

Merge pull request #778 from plone/nonexistent-relation-400

Return status 400 if a referenced object can not be resolved during deserialization

Files changed:
A news/777.bugfix
M src/plone/restapi/deserializer/relationfield.py
M src/plone/restapi/tests/test_dxfield_deserializer.py

b'diff --git a/news/777.bugfix b/news/777.bugfix\nnew file mode 100644\nindex 00000000..bc13a099\n--- /dev/null\n+++ b/news/777.bugfix\n@@ -0,0 +1,2 @@\n+Return status 400 if a referenced object can not be resolved during deserialization.\n+[lgraf]\ndiff --git a/src/plone/restapi/deserializer/relationfield.py b/src/plone/restapi/deserializer/relationfield.py\nindex a313f822..669fd787 100644\n--- a/src/plone/restapi/deserializer/relationfield.py\n+++ b/src/plone/restapi/deserializer/relationfield.py\n@@ -54,6 +54,7 @@ def __call__(self, value):\n                 resolved_by = "UID"\n \n         if obj is None:\n+            self.request.response.setStatus(400)\n             raise ValueError(\n                 u"Could not resolve object for {}={}".format(resolved_by, value)\n             )\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex cb12aa16..5c46f8b6 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -421,6 +421,7 @@ def test_relationchoice_deserialization_from_invalid_intid_raises(self):\n         self.assertEqual(\n             str(cm.exception), u"Could not resolve object for intid=123456789"\n         )\n+        self.assertEqual(400, self.request.response.getStatus())\n \n     def test_relationchoice_deserialization_from_invalid_uid_raises(self):\n         with self.assertRaises(ValueError) as cm:\n@@ -432,6 +433,7 @@ def test_relationchoice_deserialization_from_invalid_uid_raises(self):\n             str(cm.exception),\n             u"Could not resolve object for UID=ac12b24913cf45c6863937367aacc263",\n         )\n+        self.assertEqual(400, self.request.response.getStatus())\n \n     def test_relationchoice_deserialization_from_invalid_url_raises(self):\n         with self.assertRaises(ValueError) as cm:\n@@ -443,6 +445,7 @@ def test_relationchoice_deserialization_from_invalid_url_raises(self):\n             str(cm.exception),\n             u"Could not resolve object for URL=http://nohost/plone/doesnotexist",\n         )\n+        self.assertEqual(400, self.request.response.getStatus())\n \n     def test_relationchoice_deserialization_from_invalid_path_raises(self):\n         with self.assertRaises(ValueError) as cm:\n@@ -452,6 +455,7 @@ def test_relationchoice_deserialization_from_invalid_path_raises(self):\n         self.assertEqual(\n             str(cm.exception), u"Could not resolve object for path=/doesnotexist"\n         )\n+        self.assertEqual(400, self.request.response.getStatus())\n \n     def test_relationlist_deserialization_returns_list_of_documents(self):\n         doc2 = self.portal[\n'

